void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
}

void __Block_byref_object_dispose__42(uint64_t a1)
{
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__30(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__31(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__32(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__33(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__35(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__37(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__38(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__39(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__40(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__41(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__42(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__43(uint64_t a1, uint64_t a2)
{
}

void sub_1E1EA8834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1E1EA9004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1E1EA9548(_Unwind_Exception *exception_object)
{
}

void sub_1E1EAAAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_1E1EAB498(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t _VCAllocatorMultiQueueCallback_Retain(uint64_t result)
{
  return result;
}

void _VCAVFoundationCapture_PushFrameToCaptureServer(_DWORD *a1, CFTypeRef cf, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (cf) {
    CFTypeRef v10 = CFRetain(cf);
  }
  else {
    CFTypeRef v10 = 0;
  }
  v11 = *(void (**)(uint64_t, CFTypeRef, long long *, BOOL, uint64_t, uint64_t))[a1 protocolFunctions];
  uint64_t v12 = [a1 captureServer];
  long long v13 = *a3;
  uint64_t v14 = *((void *)a3 + 2);
  v11(v12, v10, &v13, cf == 0, a4, a5);
  ++a1[88];
  if (v10) {
    CFRelease(v10);
  }
}

void VCVideoCaptureServer_OnCaptureVideoFrame(uint64_t a1, CMSampleBufferRef sbuf, CMTime *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
    int Width = CVPixelBufferGetWidth(ImageBuffer);
    int Height = CVPixelBufferGetHeight(ImageBuffer);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      v16 = *MEMORY[0x1E4F47A50];
      v17 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          CMTime time = *a3;
          Float64 Seconds = CMTimeGetSeconds(&time);
          LODWORD(time.value) = 136316418;
          *(CMTimeValue *)((char *)&time.value + 4) = v15;
          LOWORD(time.flags) = 2080;
          *(void *)((char *)&time.flags + 2) = "VCVideoCaptureServer_OnCaptureVideoFrame";
          HIWORD(time.epoch) = 1024;
          LODWORD(v40) = 1653;
          WORD2(v40) = 1024;
          *(_DWORD *)((char *)&v40 + 6) = Width;
          WORD5(v40) = 1024;
          HIDWORD(v40) = Height;
          *(_WORD *)v41 = 2048;
          *(Float64 *)&v41[2] = Seconds;
          _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d width=%d, height=%d, frameTime=%f", (uint8_t *)&time, 0x32u);
        }
      }
      else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        CMTime time = *a3;
        Float64 v36 = CMTimeGetSeconds(&time);
        LODWORD(time.value) = 136316418;
        *(CMTimeValue *)((char *)&time.value + 4) = v15;
        LOWORD(time.flags) = 2080;
        *(void *)((char *)&time.flags + 2) = "VCVideoCaptureServer_OnCaptureVideoFrame";
        HIWORD(time.epoch) = 1024;
        LODWORD(v40) = 1653;
        WORD2(v40) = 1024;
        *(_DWORD *)((char *)&v40 + 6) = Width;
        WORD5(v40) = 1024;
        HIDWORD(v40) = Height;
        *(_WORD *)v41 = 2048;
        *(Float64 *)&v41[2] = v36;
        _os_log_debug_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEBUG, "VCVideoCaptureServer [%s] %s:%d width=%d, height=%d, frameTime=%f", (uint8_t *)&time, 0x32u);
      }
    }
    if ([*(id *)(a1 + 152) camera] != a5)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        v20 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v21 = [*(id *)(a1 + 152) camera];
          LODWORD(time.value) = 136316162;
          *(CMTimeValue *)((char *)&time.value + 4) = v19;
          LOWORD(time.flags) = 2080;
          *(void *)((char *)&time.flags + 2) = "VCVideoCaptureServer_OnCaptureVideoFrame";
          HIWORD(time.epoch) = 1024;
          LODWORD(v40) = 1656;
          WORD2(v40) = 1024;
          *(_DWORD *)((char *)&v40 + 6) = v21;
          WORD5(v40) = 1024;
          HIDWORD(v40) = a5;
          _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d camera changing from %d -->> %d", (uint8_t *)&time, 0x28u);
        }
      }
      *(unsigned char *)(a1 + 108) = 0;
      [*(id *)(a1 + 152) setCamera:a5];
      objc_msgSend(+[VCAudioSession sharedVoiceChatInstance](VCAudioSession, "sharedVoiceChatInstance"), "selectMicrophoneWithType:", a5 != 0);
    }
    [*(id *)(a1 + 152) setCameraSwitching:a4];
    char v22 = VCCameraStatusBitsFromVideoAttributes(*(void **)(a1 + 152));
    char v23 = v22;
    if (a6) {
      char v24 = 4;
    }
    else {
      char v24 = 0;
    }
    char v25 = v22 & 0xFB;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 488));
    if (a5) {
      int v26 = 0;
    }
    else {
      int v26 = a6 ^ 1;
    }
    if (*(unsigned char *)(a1 + 729)) {
      goto LABEL_20;
    }
    if (!*(unsigned char *)(a1 + 730))
    {
      uint64_t v35 = *(void *)(a1 + 472);
      CMTime time = *a3;
      RotatedSampleBuffer = VCImageRotationConverter_CreateRotatedSampleBuffer(v35, sbuf, (long long *)&time.value, v26);
      goto LABEL_21;
    }
    if (!v26)
    {
LABEL_20:
      RotatedSampleBuffer = (opaqueCMSampleBuffer *)FigSampleBufferRetain();
    }
    else
    {
      uint64_t v34 = *(void *)(a1 + 480);
      CMTime time = *a3;
      RotatedSampleBuffer = VCImageMirroringConverter_CreateMirroredSampleBuffer(v34, sbuf, (long long *)&time.value);
    }
LABEL_21:
    v28 = RotatedSampleBuffer;
    unsigned __int8 v29 = v25 | v24;
    if (RotatedSampleBuffer)
    {
      CMTime time = *a3;
      _classVTable_0(a1, RotatedSampleBuffer, (uint64_t)&time, a5, v29);
      CFRelease(v28);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 488));
    if (*(unsigned char *)(a1 + 457))
    {
      long long v37 = *(_OWORD *)&a3->value;
      CMTimeEpoch epoch = a3->epoch;
      if (a6)
      {
        if ((v23 & 3) == 3) {
          char v30 = 2;
        }
        else {
          char v30 = v23 & 3;
        }
        if ((v23 & 3) == 2) {
          char v31 = 3;
        }
        else {
          char v31 = v30;
        }
        unsigned __int8 v29 = v31 | v29 & 0xFC;
      }
      ++*(_DWORD *)(a1 + 48);
      uint64_t v32 = FigSampleBufferRetain();
      v33 = *(NSObject **)(a1 + 264);
      time.value = MEMORY[0x1E4F143A8];
      *(void *)&time.timescale = 3221225472;
      time.CMTimeEpoch epoch = (CMTimeEpoch)___VCVideoCaptureServer_ProcessCaptureSampleBuffer_block_invoke;
      *(void *)&long long v40 = &unk_1E6DB8C48;
      *((void *)&v40 + 1) = a1;
      *(void *)v41 = v32;
      unsigned __int8 v43 = v29;
      *(_OWORD *)&v41[8] = v37;
      CMTimeEpoch v42 = epoch;
      dispatch_async(v33, &time);
    }
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoCaptureServer_OnCaptureVideoFrame_cold_1();
    }
  }
}

CMSampleBufferRef VCImageRotationConverter_CreateRotatedSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, long long *a3, char a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __VCImageRotationConverter_CreateRotatedSampleBuffer_block_invoke;
  v7[3] = &unk_1E6DB63F8;
  v7[4] = a1;
  char v8 = a4;
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  return VCImageConverterBase_CreateConvertedSampleBuffer(a1, a2, (uint64_t)&v5, (uint64_t)v7);
}

CMSampleBufferRef VCImageConverterBase_CreateConvertedSampleBuffer(int a1, CMSampleBufferRef sbuf, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!sbuf)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCImageConverterBase_CreateConvertedSampleBuffer_cold_1();
      }
    }
    return 0;
  }
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  if (!ImageBuffer)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCImageConverterBase_CreateConvertedSampleBuffer_cold_2();
      }
    }
    return 0;
  }
  v7 = (__CVBuffer *)(*(uint64_t (**)(uint64_t, CVImageBufferRef))(a4 + 16))(a4, ImageBuffer);
  if (!v7)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCImageConverterBase_CreateConvertedSampleBuffer_cold_3();
      }
    }
    return 0;
  }
  char v8 = v7;
  long long v11 = *(_OWORD *)a3;
  uint64_t v12 = *(void *)(a3 + 16);
  CMSampleBufferRef v9 = createSampleBufferWithPixelBuffer(v7, &v11);
  if (!v9 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCImageConverterBase_CreateConvertedSampleBuffer_cold_4();
    }
  }
  CVPixelBufferRelease(v8);
  return v9;
}

CMSampleBufferRef createSampleBufferWithPixelBuffer(__CVBuffer *a1, long long *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  return VideoUtil_CreateSampleBufferWithPixelBuffer(a1, (uint64_t)&v4, v2, v2);
}

CMSampleBufferRef VideoUtil_CreateSampleBufferWithPixelBuffer(CVImageBufferRef imageBuffer, uint64_t a2, CFAllocatorRef allocator, const __CFAllocator *a4)
{
  sampleBufferOut[1] = *(CMSampleBufferRef *)MEMORY[0x1E4F143B8];
  sampleBufferOut[0] = 0;
  if (imageBuffer)
  {
    long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
    *(_OWORD *)&sampleTiming.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
    *(_OWORD *)&sampleTiming.decodeTimeStamp.value = v6;
    CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
    long long v8 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
    *(_OWORD *)&sampleTiming.duration.value = *MEMORY[0x1E4F1FA70];
    *(_OWORD *)&sampleTiming.duration.CMTimeEpoch epoch = v8;
    *(_OWORD *)&sampleTiming.presentationTimeStamp.value = *(_OWORD *)a2;
    CMTimeEpoch v9 = *(void *)(a2 + 16);
    sampleTiming.decodeTimeStamp.CMTimeEpoch epoch = v7;
    sampleTiming.presentationTimeStamp.CMTimeEpoch epoch = v9;
    CMVideoFormatDescriptionRef formatDescriptionOut = 0;
    if (CMVideoFormatDescriptionCreateForImageBuffer(allocator, imageBuffer, &formatDescriptionOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoUtil_CreateSampleBufferWithPixelBuffer_cold_3();
        }
      }
    }
    else if (CMSampleBufferCreateReadyWithImageBuffer(a4, imageBuffer, formatDescriptionOut, &sampleTiming, sampleBufferOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoUtil_CreateSampleBufferWithPixelBuffer_cold_2();
        }
      }
    }
    else
    {
      CFTypeRef v10 = CMGetAttachment(imageBuffer, @"PropagatableAttachments", 0);
      if (v10) {
        CMSetAttachment(sampleBufferOut[0], @"TransportLayer", v10, 1u);
      }
    }
    if (formatDescriptionOut) {
      CFRelease(formatDescriptionOut);
    }
    return sampleBufferOut[0];
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoUtil_CreateSampleBufferWithPixelBuffer_cold_1();
      }
    }
    return 0;
  }
}

CVPixelBufferRef VCImageRotationConverter_CreateRotatedPixelBuffer(uint64_t a1, __CVBuffer *a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    CMTimeEpoch v7 = *MEMORY[0x1E4F47A50];
    long long v8 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
        int v12 = 136316930;
        uint64_t v13 = v6;
        __int16 v14 = 2080;
        uint64_t v15 = "VCImageRotationConverter_CreateRotatedPixelBuffer";
        __int16 v16 = 1024;
        int v17 = 32;
        __int16 v18 = 2048;
        uint64_t v19 = a1;
        __int16 v20 = 2048;
        int v21 = a2;
        __int16 v22 = 2080;
        char v23 = FourccToCStr(PixelFormatType);
        __int16 v24 = 2048;
        size_t Width = CVPixelBufferGetWidth(a2);
        __int16 v26 = 2048;
        size_t Height = CVPixelBufferGetHeight(a2);
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d pointer=%p, pixelBuffer=%p, formatType=%s, width=%lu, height=%lu", (uint8_t *)&v12, 0x4Eu);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      OSType v11 = CVPixelBufferGetPixelFormatType(a2);
      int v12 = 136316930;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      uint64_t v15 = "VCImageRotationConverter_CreateRotatedPixelBuffer";
      __int16 v16 = 1024;
      int v17 = 32;
      __int16 v18 = 2048;
      uint64_t v19 = a1;
      __int16 v20 = 2048;
      int v21 = a2;
      __int16 v22 = 2080;
      char v23 = FourccToCStr(v11);
      __int16 v24 = 2048;
      size_t Width = CVPixelBufferGetWidth(a2);
      __int16 v26 = 2048;
      size_t Height = CVPixelBufferGetHeight(a2);
      _os_log_debug_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEBUG, " [%s] %s:%d pointer=%p, pixelBuffer=%p, formatType=%s, width=%lu, height=%lu", (uint8_t *)&v12, 0x4Eu);
    }
  }
  return VCImageRotationConverterBase_CreateRotatedPixelBuffer(a1, a2, a3);
}

BOOL VCDefaults_GetEyeContactEnabledBoolValue(BOOL a1)
{
  return _VCDefaults_GetBoolValueForKey(@"VPCEnabled", a1, 1);
}

BOOL VCMU_CompareWithAccuracy(float a1, float a2, double a3)
{
  return vabds_f32(a1, a2) < a3;
}

uint64_t VCCameraStatusBitsFromVideoAttributes(void *a1)
{
  char v2 = [a1 orientation];
  int v3 = [a1 cameraSwitching];
  char v4 = [a1 camera];
  if ([a1 videoSourceScreen]) {
    char v5 = 16;
  }
  else {
    char v5 = 0;
  }
  if ([a1 videoMirrored]) {
    char v6 = 4;
  }
  else {
    char v6 = 0;
  }
  if (v3) {
    char v7 = -64;
  }
  else {
    char v7 = 0x80;
  }
  return v7 & 0xF4 | v2 & 3 | v5 & 0xF7u | (8 * (v4 & 1)) | v6;
}

CFArrayRef _VCViewpointCorrection_CreateCameraExtrinsicsArray(const void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  float v2 = VCHardwareSettings_FrontCameraOffsetFromDisplayCenter();
  *(void *)&long long v3 = COERCE_UNSIGNED_INT(1.0);
  DWORD2(v3) = 0;
  *((float *)&v3 + 3) = v2;
  long long v18 = v3;
  float v5 = *(double *)&v4;
  LODWORD(v4) = 0;
  DWORD1(v4) = 1.0;
  DWORD2(v4) = 0;
  *((float *)&v4 + 3) = v5;
  long long v19 = v4;
  long long v20 = xmmword_1E25A1220;
  _VCViewpointCorrection_UpdateCenterStageTransform((uint64_t)&v18, a1);
  long long v11 = v18;
  v16[0] = objc_msgSend(NSNumber, "numberWithFloat:");
  HIDWORD(v6) = DWORD1(v11);
  LODWORD(v6) = DWORD1(v11);
  v16[1] = [NSNumber numberWithFloat:v6];
  v16[2] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v11), DWORD2(v11))));
  v16[3] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v11), HIDWORD(v11))));
  v17[0] = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:4];
  long long v12 = v19;
  v15[0] = objc_msgSend(NSNumber, "numberWithFloat:");
  HIDWORD(v7) = DWORD1(v12);
  LODWORD(v7) = DWORD1(v12);
  v15[1] = [NSNumber numberWithFloat:v7];
  v15[2] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v12), DWORD2(v12))));
  v15[3] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v12), HIDWORD(v12))));
  v17[1] = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:4];
  long long v13 = v20;
  v14[0] = objc_msgSend(NSNumber, "numberWithFloat:");
  HIDWORD(v8) = DWORD1(v13);
  LODWORD(v8) = DWORD1(v13);
  v14[1] = [NSNumber numberWithFloat:v8];
  v14[2] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v13), DWORD2(v13))));
  v14[3] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v13), HIDWORD(v13))));
  v17[2] = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:4];
  CFArrayRef v9 = (const __CFArray *)[MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:3];
  return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9);
}

int32x4_t *_VCViewpointCorrection_UpdateCenterStageTransform(uint64_t a1, CMAttachmentBearerRef target)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  if (!target) {
    return 0;
  }
  result = (int32x4_t *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F51440], 0);
  if (result)
  {
    result = (int32x4_t *)CFDataGetBytePtr((CFDataRef)result);
    if (result)
    {
      unsigned __int8 v4 = 0;
      int32x4_t v5 = result[1];
      int32x4_t v6 = result[2];
      int32x4_t v7 = result[3];
      float32x2x2_t v8 = (float32x2x2_t)vzip1q_s32(*result, v6);
      v16.val[0] = (float32x2_t)vzip2q_s32(*result, v6).u64[0];
      int32x4_t v9 = vzip1q_s32(v5, v7);
      v16.val[1] = (float32x2_t)vzip2q_s32(v5, v7).u64[0];
      CFTypeRef v10 = (float *)v14;
      vst2_f32(v10, v8);
      v10 += 4;
      *(int32x4_t *)CFTypeRef v10 = vzip2q_s32((int32x4_t)v8, v9);
      long long v11 = (float *)v15;
      vst2_f32(v11, v16);
      do
      {
        for (uint64_t i = 0; i != 12; i += 4)
          *(_DWORD *)(a1 + i * 4 + 4 * v4) = v14[i + (v4 & 3)];
        unsigned int v13 = v4++;
      }
      while (v13 < 2);
      return (int32x4_t *)1;
    }
  }
  return result;
}

void _VCVideoCaptureServer_ProcessPreviewSampleBuffer(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)(a1 + 44);
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  if (*(int *)(a1 + 112) >= 1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      CFTypeRef v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(_DWORD *)(a1 + 112);
        *(_DWORD *)buf = 136315906;
        *(void *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "_VCVideoCaptureServer_ProcessPreviewSampleBuffer";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1752;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v11;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d snapshotRequestCount=%d", buf, 0x22u);
      }
    }
    CVPixelBufferRetain(ImageBuffer);
    long long v12 = *(NSObject **)(a1 + 312);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___VCVideoCaptureServer_SendSnapshotFromFrame_block_invoke;
    *(void *)&buf[24] = &unk_1E6DB4568;
    *(void *)&buf[32] = a1;
    *(void *)&buf[40] = ImageBuffer;
    dispatch_async(v12, buf);
    atomic_fetch_add((atomic_uint *volatile)(a1 + 112), 0xFFFFFFFF);
  }
  texture = CVPixelBufferRetain(ImageBuffer);
  int Width = CVPixelBufferGetWidth(ImageBuffer);
  int Height = CVPixelBufferGetHeight(ImageBuffer);
  [*(id *)(a1 + 152) ratio];
  if (v15 == 768.0)
  {
    [*(id *)(a1 + 152) ratio];
    if (v16 == 1024.0 && Width == 720 && Height == 1280)
    {
      int v17 = (unsigned char *)(a1 + 376);
LABEL_23:
      unsigned char *v17 = 0;
LABEL_24:
      char v31 = *(OpaqueVTPixelTransferSession **)(a1 + 360);
      if (v31)
      {
        VTPixelTransferSessionInvalidate(v31);
        uint64_t v32 = *(const void **)(a1 + 360);
        if (v32)
        {
          CFRelease(v32);
          *(void *)(a1 + 360) = 0;
        }
      }
      v33 = *(__CVPixelBufferPool **)(a1 + 368);
      if (v33)
      {
        CVPixelBufferPoolRelease(v33);
        *(void *)(a1 + 368) = 0;
      }
      goto LABEL_29;
    }
  }
  int v17 = (unsigned char *)(a1 + 376);
  if (Width < 720 || Height < 1024) {
    goto LABEL_23;
  }
  if (!*v17) {
    goto LABEL_24;
  }
  long long v18 = (VTSessionRef *)(a1 + 360);
  if (!*(void *)(a1 + 360))
  {
    VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)(a1 + 360));
    VTSessionSetProperty(*v18, (CFStringRef)*MEMORY[0x1E4F45168], (CFTypeRef)*MEMORY[0x1E4F45468]);
  }
  long long v19 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!*(void *)(a1 + 368))
  {
    id v20 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v21 = objc_msgSend(v20, "initWithObjectsAndKeys:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F2F0F8], @"AVConference:CaptureServer", *MEMORY[0x1E4F2F128], 0);
    __int16 v22 = (void *)[objc_alloc(NSNumber) initWithInt:576];
    char v23 = (void *)[objc_alloc(NSNumber) initWithInt:1024];
    __int16 v24 = (void *)[objc_alloc(NSNumber) initWithUnsignedInt:*(unsigned int *)(a1 + 40)];
    id v25 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    CFDictionaryRef v26 = (const __CFDictionary *)objc_msgSend(v25, "initWithObjectsAndKeys:", v22, *MEMORY[0x1E4F24E10], v23, *MEMORY[0x1E4F24D08], v24, *MEMORY[0x1E4F24D70], v21, *MEMORY[0x1E4F24D20], 0);
    CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v26, (CVPixelBufferPoolRef *)(a1 + 368));

    long long v19 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    long long v18 = (VTSessionRef *)(a1 + 360);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v27 = VRTraceErrorLogLevelToCSTR();
    uint64_t v28 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v29 = CVPixelBufferGetWidth(ImageBuffer);
      int v30 = CVPixelBufferGetHeight(ImageBuffer);
      *(_DWORD *)buf = 136316162;
      *(void *)&buf[4] = v27;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "_VCVideoCaptureServer_CreateResizedFrame";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = 2196;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v29;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v30;
      _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d Frame Transform resize, preview frame from %dx%d to 576x1024", buf, 0x28u);
    }
  }
  *(void *)buf = 0;
  CVPixelBufferPoolCreatePixelBuffer(*v19, *(CVPixelBufferPoolRef *)(a1 + 368), (CVPixelBufferRef *)buf);
  if (*(void *)buf)
  {
    VTPixelTransferSessionTransferImage((VTPixelTransferSessionRef)*v18, ImageBuffer, *(CVPixelBufferRef *)buf);
    CVPixelBufferRelease(ImageBuffer);
    texture = *(__CVBuffer **)buf;
  }
LABEL_29:
  uint64_t v34 = 416;
  if (a4)
  {
    uint64_t v35 = "back";
  }
  else
  {
    uint64_t v34 = 408;
    uint64_t v35 = "front";
  }
  uint64_t v36 = *(void *)(a1 + v34);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v36)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v38 = VRTraceErrorLogLevelToCSTR();
      v39 = *MEMORY[0x1E4F47A50];
      long long v40 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          *(void *)&buf[4] = v38;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "_VCVideoCaptureServer_EnqueueFrameToQueueFront";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 1588;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v35;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&buf[40] = v36;
          _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d FigImageQueueEnqueueImage [local] %sCameraQueue, imgQ %p", buf, 0x30u);
        }
      }
      else if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = v38;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "_VCVideoCaptureServer_EnqueueFrameToQueueFront";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1588;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v35;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&buf[40] = v36;
        _os_log_debug_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEBUG, "VCVideoCaptureServer [%s] %s:%d FigImageQueueEnqueueImage [local] %sCameraQueue, imgQ %p", buf, 0x30u);
      }
    }
    memset(&v110, 170, sizeof(v110));
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v110, HostTimeClock);
    *(CMTime *)buf = v110;
    double v42 = CMTimeGetSeconds((CMTime *)buf) - *(double *)(a1 + 640);
    double v43 = floor(1.0 / (double)*(int *)(a1 + 16) / 0.2) * 0.2 + 0.2;
    if (v42 > v43 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v44 = VRTraceErrorLogLevelToCSTR();
      v45 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = v44;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "_VCVideoCaptureServer_EnqueueFrameToQueueFront";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1599;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v43;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&buf[40] = v42;
        _os_log_impl(&dword_1E1EA4000, v45, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d Unexpected capture frame duration expectedFrameDurationWithThreshold=%f and currentFrameDuration=%f", buf, 0x30u);
      }
    }
    if (*(unsigned char *)(a1 + 731) != ((a5 >> 2) & 1))
    {
      VCImageQueue_EffectsEnabledForPreview(v36, (a5 & 4) != 0);
      *(unsigned char *)(a1 + 731) = (a5 & 4) != 0;
    }
    *(CMTime *)buf = v110;
    int v46 = VCImageQueue_EnqueueFrame(v36, texture, (CMTime *)buf);
    double v47 = micro();
    if (v46)
    {
      BOOL v48 = 0;
      *(void *)(a1 + 400) = 0;
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v49 = VRTraceErrorLogLevelToCSTR();
        v50 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          *(void *)&buf[4] = v49;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "_VCVideoCaptureServer_EnqueueFrameToQueueFront";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 1612;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v35;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&buf[40] = v36;
          _os_log_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d FigImageQueueEnqueueImage skipped [local -%s], imgQ %p!", buf, 0x30u);
        }
      }
      double v51 = *(double *)(a1 + 400);
      if (v51 == 0.0)
      {
        *(double *)(a1 + 400) = v47;
        double v51 = v47;
      }
      BOOL v48 = v47 - v51 >= 10.0;
    }
    if (*(unsigned char *)(a1 + 712))
    {
      *(CMTime *)buf = v110;
      *(Float64 *)(a1 + 672) = CMTimeGetSeconds((CMTime *)buf);
      *(double *)(a1 + 704) = v47;
      v52 = *(FILE **)(a1 + 648);
      double v53 = *(double *)(a1 + 720);
      double v54 = *(double *)(a1 + 640);
      *(void *)&long long v55 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v108 = v55;
      long long v109 = v55;
      long long v106 = v55;
      long long v107 = v55;
      *(_OWORD *)&buf[32] = v55;
      long long v105 = v55;
      *(_OWORD *)buf = v55;
      *(_OWORD *)&buf[16] = v55;
      Timestamp = VRLogfileGetTimestamp(buf, 0x80u);
      fprintf(v52, "%s\t%d\t%d\t%d\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n", Timestamp, *(_DWORD *)(a1 + 656), *(_DWORD *)(a1 + 660), *(unsigned __int8 *)(a1 + 664), *(double *)(a1 + 680), *(double *)(a1 + 688), *(double *)(a1 + 696), *(double *)(a1 + 672), *(double *)(a1 + 672) - v54, *(double *)(a1 + 704), *(double *)(a1 + 704) - v53);
      *(void *)(a1 + 720) = *(void *)(a1 + 704);
    }
    *(CMTime *)buf = v110;
    *(Float64 *)(a1 + 640) = CMTimeGetSeconds((CMTime *)buf);
    if (v48)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCVideoCaptureServer_ProcessPreviewSampleBuffer_cold_3();
        }
      }
      [(id)a1 stopPreview];
      if ((v46 & 1) == 0) {
        goto LABEL_108;
      }
    }
    else if (!v46)
    {
      goto LABEL_108;
    }
    if (!*(unsigned char *)(a1 + 108))
    {
      uint64_t v57 = [*(id *)(a1 + 96) deviceNameForToken:*(unsigned int *)(a1 + 104)];
      uint64_t v58 = *(void *)(a1 + 384);
      int v59 = VRTraceGetErrorLogLevelForModule();
      if (v58)
      {
        if (v59 >= 7)
        {
          uint64_t v60 = VRTraceErrorLogLevelToCSTR();
          v61 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = v60;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "_VCVideoCaptureServer_DidReceiveFirstPreviewFrame";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 1782;
            _os_log_impl(&dword_1E1EA4000, v61, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d notifying app of first preview frame", buf, 0x1Cu);
          }
        }
        v62 = *(NSObject **)(a1 + 296);
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___VCVideoCaptureServer_DidReceiveFirstPreviewFrame_block_invoke;
        *(void *)&buf[24] = &unk_1E6DB3E40;
        *(void *)&buf[32] = a1;
        *(void *)&buf[40] = v57;
        dispatch_async(v62, buf);
      }
      else
      {
        if (v59 >= 7)
        {
          uint64_t v63 = VRTraceErrorLogLevelToCSTR();
          v64 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = v63;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "_VCVideoCaptureServer_DidReceiveFirstPreviewFrame";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 1789;
            _os_log_impl(&dword_1E1EA4000, v64, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d notifying clients of first preview frame", buf, 0x1Cu);
          }
        }
        id v65 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        v66 = v65;
        if (v57)
        {
          [v65 setObject:v57 forKeyedSubscript:@"localCameraUIDString"];
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCVideoCaptureServer_ProcessPreviewSampleBuffer_cold_2();
          }
        }
        v67 = *(NSObject **)(a1 + 296);
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___VCVideoCaptureServer_DidReceiveFirstPreviewFrame_block_invoke_791;
        *(void *)&buf[24] = &unk_1E6DB3DC8;
        *(void *)&buf[32] = v66;
        dispatch_async(v67, buf);
      }
      *(unsigned char *)(a1 + 108) = 1;
    }
    int v68 = CVPixelBufferGetWidth(ImageBuffer);
    int v69 = CVPixelBufferGetHeight(ImageBuffer);
    [*(id *)(a1 + 152) ratio];
    int v71 = (int)v70;
    [*(id *)(a1 + 152) ratio];
    int v73 = (int)v72;
    if (v68 != v71 || v69 != v73)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v74 = VRTraceErrorLogLevelToCSTR();
        v75 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316674;
          *(void *)&buf[4] = v74;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "_VCVideoCaptureServer_ProcessFrameSizeChange";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 1812;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v71;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v73;
          *(_WORD *)&buf[40] = 1024;
          *(_DWORD *)&buf[42] = v68;
          *(_WORD *)&buf[46] = 1024;
          LODWORD(v105) = v69;
          _os_log_impl(&dword_1E1EA4000, v75, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d frame size changed from %dx%d to %dx%d", buf, 0x34u);
        }
      }
      v76 = [VideoAttributes alloc];
      double v77 = (double)v68;
      double v78 = (double)v69;
      [*(id *)(a1 + 152) contentsRect];
      LODWORD(v79) = 1.0;
      v84 = -[VideoAttributes initWithCameraStatusBits:aspectRatio:contentsRect:scaleFactor:](v76, "initWithCameraStatusBits:aspectRatio:contentsRect:scaleFactor:", a5, (double)v68, (double)v69, v80, v81, v82, v83, v79);
      if ([(id)a1 shouldSendVideoAttributeCallback:v84])
      {
        uint64_t v85 = *(void *)(a1 + 384);
        int v86 = VRTraceGetErrorLogLevelForModule();
        if (v85)
        {
          if (v86 >= 8)
          {
            uint64_t v87 = VRTraceErrorLogLevelToCSTR();
            v88 = *MEMORY[0x1E4F47A50];
            v89 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316674;
                *(void *)&buf[4] = v87;
                *(_WORD *)&buf[12] = 2080;
                *(void *)&buf[14] = "_VCVideoCaptureServer_ProcessFrameSizeChange";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = 1823;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v71;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v73;
                *(_WORD *)&buf[40] = 1024;
                *(_DWORD *)&buf[42] = v68;
                *(_WORD *)&buf[46] = 1024;
                LODWORD(v105) = v69;
                _os_log_impl(&dword_1E1EA4000, v88, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d notifying app of frame size change from %dx%d to %dx%d", buf, 0x34u);
              }
            }
            else if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136316674;
              *(void *)&buf[4] = v87;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "_VCVideoCaptureServer_ProcessFrameSizeChange";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = 1823;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v71;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v73;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v68;
              *(_WORD *)&buf[46] = 1024;
              LODWORD(v105) = v69;
              _os_log_debug_impl(&dword_1E1EA4000, v88, OS_LOG_TYPE_DEBUG, "VCVideoCaptureServer [%s] %s:%d notifying app of frame size change from %dx%d to %dx%d", buf, 0x34u);
            }
          }
          v93 = *(NSObject **)(a1 + 296);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___VCVideoCaptureServer_ProcessFrameSizeChange_block_invoke;
          *(void *)&buf[24] = &unk_1E6DB3E40;
          *(void *)&buf[32] = a1;
          *(void *)&buf[40] = v84;
          dispatch_async(v93, buf);
        }
        else
        {
          if (v86 >= 8)
          {
            uint64_t v90 = VRTraceErrorLogLevelToCSTR();
            v91 = *MEMORY[0x1E4F47A50];
            v92 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316674;
                *(void *)&buf[4] = v90;
                *(_WORD *)&buf[12] = 2080;
                *(void *)&buf[14] = "_VCVideoCaptureServer_ProcessFrameSizeChange";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = 1832;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v71;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v73;
                *(_WORD *)&buf[40] = 1024;
                *(_DWORD *)&buf[42] = v68;
                *(_WORD *)&buf[46] = 1024;
                LODWORD(v105) = v69;
                _os_log_impl(&dword_1E1EA4000, v91, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d notifying clients of frame size change from %dx%d to %dx%d", buf, 0x34u);
              }
            }
            else if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136316674;
              *(void *)&buf[4] = v90;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "_VCVideoCaptureServer_ProcessFrameSizeChange";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = 1832;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v71;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v73;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v68;
              *(_WORD *)&buf[46] = 1024;
              LODWORD(v105) = v69;
              _os_log_debug_impl(&dword_1E1EA4000, v91, OS_LOG_TYPE_DEBUG, "VCVideoCaptureServer [%s] %s:%d notifying clients of frame size change from %dx%d to %dx%d", buf, 0x34u);
            }
          }
          id v94 = [(VideoAttributes *)v84 copyEncodedDictionary];
          v95 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", v94, @"localVideoAttributes", 0);
          v96 = *(NSObject **)(a1 + 296);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = ___VCVideoCaptureServer_ProcessFrameSizeChange_block_invoke_793;
          *(void *)&buf[24] = &unk_1E6DB3DC8;
          *(void *)&buf[32] = v95;
          dispatch_async(v96, buf);
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v101 = VRTraceErrorLogLevelToCSTR();
        v102 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&buf[4] = v101;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "_VCVideoCaptureServer_ProcessFrameSizeChange";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 1819;
          _os_log_impl(&dword_1E1EA4000, v102, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d Skip sending", buf, 0x1Cu);
        }
      }
      objc_msgSend(*(id *)(a1 + 152), "setRatio:", v77, v78);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v97 = VRTraceErrorLogLevelToCSTR();
        v98 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          v99 = *(void **)(a1 + 152);
          if (v99) {
            v100 = (const char *)objc_msgSend((id)objc_msgSend(v99, "description"), "UTF8String");
          }
          else {
            v100 = "<nil>";
          }
          LODWORD(v110.value) = 136315906;
          *(CMTimeValue *)((char *)&v110.value + 4) = v97;
          LOWORD(v110.flags) = 2080;
          *(void *)((char *)&v110.flags + 2) = "_VCVideoCaptureServer_ProcessFrameSizeChange";
          HIWORD(v110.epoch) = 1024;
          int v111 = 1845;
          __int16 v112 = 2080;
          v113 = v100;
          _os_log_impl(&dword_1E1EA4000, v98, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d localVideoAttributes changed to %s", (uint8_t *)&v110, 0x26u);
        }
      }
    }
    if (!*(unsigned char *)(a1 + 456)) {
      VCVideoCaptureServer_ApplyPressureLevelChanges(a1);
    }
    goto LABEL_108;
  }
  if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCVideoCaptureServer_ProcessPreviewSampleBuffer_cold_1();
    }
  }
LABEL_108:
  CVPixelBufferRelease(texture);
}

double micro()
{
  double v0 = machTimeScale();
  return v0 * (double)(uint64_t)mach_absolute_time();
}

double machTimeScale()
{
  v3[1] = *(mach_timebase_info *)MEMORY[0x1E4F143B8];
  if ((machTimeScale_did_init & 1) == 0)
  {
    v3[0] = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
    mach_timebase_info(v3);
    LODWORD(v2) = v3[0].denom;
    LODWORD(v1) = v3[0].numer;
    *(double *)&machTimeScale_timeScale = (double)v1 / (double)v2 / 1000000000.0;
    __dmb(0xBu);
    machTimeScale_did_init = 1;
  }
  return *(double *)&machTimeScale_timeScale;
}

void VCVideoCaptureServer_ApplyPressureLevelChanges(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v41 = *(_DWORD *)(a1 + 444);
    int v42 = *(_DWORD *)(a1 + 448);
    int v2 = *(_DWORD *)(a1 + 16);
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    int v39 = *(_DWORD *)(a1 + 432);
    int v40 = *(_DWORD *)(a1 + 436);
    if (v40 == v39)
    {
      uint64_t v8 = *(unsigned int *)(a1 + 16);
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v4 = VRTraceErrorLogLevelToCSTR();
        int32x4_t v5 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v6 = *(_DWORD *)(a1 + 432);
          int v7 = *(_DWORD *)(a1 + 436);
          *(_DWORD *)buf = 136316162;
          uint64_t v54 = v4;
          __int16 v55 = 2080;
          v56 = "VCVideoCaptureServer_ApplyPressureLevelChanges";
          __int16 v57 = 1024;
          int v58 = 1915;
          __int16 v59 = 1024;
          int v60 = v6;
          __int16 v61 = 1024;
          int v62 = v7;
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d Notifying clients change in thermal level %d -> %d", buf, 0x28u);
        }
      }
      uint64_t v8 = [(id)a1 getFrameRateForThermalLevel:*(unsigned int *)(a1 + 436) peakPowerPressure:*(unsigned int *)(a1 + 448)];
      if (*(void *)(a1 + 336))
      {
        LODWORD(v3) = *(_DWORD *)(a1 + 20);
        int v9 = [(id)a1 getScreenFrameRateForThermalLevel:*(unsigned int *)(a1 + 436)];
        if ((int)v3 >= v9) {
          uint64_t v3 = v9;
        }
        else {
          uint64_t v3 = v3;
        }
      }
      CFTypeRef v10 = *(NSObject **)(a1 + 256);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __VCVideoCaptureServer_ApplyPressureLevelChanges_block_invoke;
      block[3] = &unk_1E6DB3DC8;
      block[4] = a1;
      dispatch_async(v10, block);
    }
    if (v42 != v41)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        long long v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *(_DWORD *)(a1 + 444);
          int v14 = *(_DWORD *)(a1 + 448);
          *(_DWORD *)buf = 136316162;
          uint64_t v54 = v11;
          __int16 v55 = 2080;
          v56 = "VCVideoCaptureServer_ApplyPressureLevelChanges";
          __int16 v57 = 1024;
          int v58 = 1936;
          __int16 v59 = 1024;
          int v60 = v13;
          __int16 v61 = 1024;
          int v62 = v14;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d Change in peak power level %d -> %d", buf, 0x28u);
        }
      }
      uint64_t v8 = [(id)a1 getFrameRateForThermalLevel:*(unsigned int *)(a1 + 436) peakPowerPressure:*(unsigned int *)(a1 + 448)];
      double v15 = *(NSObject **)(a1 + 256);
      v45[0] = MEMORY[0x1E4F143A8];
      v45[1] = 3221225472;
      v45[2] = __VCVideoCaptureServer_ApplyPressureLevelChanges_block_invoke_260;
      v45[3] = &unk_1E6DB3DC8;
      v45[4] = a1;
      dispatch_async(v15, v45);
    }
    if (v2 != v8)
    {
      [(id)a1 setCaptureFrameRate:v8];
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        int v17 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316674;
          uint64_t v54 = v16;
          __int16 v55 = 2080;
          v56 = "VCVideoCaptureServer_ApplyPressureLevelChanges";
          __int16 v57 = 1024;
          int v58 = 1945;
          __int16 v59 = 1024;
          int v60 = v2;
          __int16 v61 = 1024;
          int v62 = v8;
          __int16 v63 = 1024;
          BOOL v64 = v40 != v39;
          __int16 v65 = 1024;
          BOOL v66 = v42 != v41;
          _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d Throttling framerate:(%d -> %d) because of changes in levels thermalLevelDidChange:%d powerLevelDidChange:%d", buf, 0x34u);
        }
      }
      [(id)a1 notifyFrameRateBeingThrottledForClients:*(void *)(a1 + 120) newFrameRate:v8 thermalLevelDidChange:v40 != v39 powerLevelDidChange:v42 != v41];
    }
    if (*(void *)(a1 + 336) && *(_DWORD *)(a1 + 24) != v3)
    {
      [(id)a1 setScreenCaptureFrameRate:v3];
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v18 = VRTraceErrorLogLevelToCSTR();
        long long v19 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136316674;
          uint64_t v54 = v18;
          __int16 v55 = 2080;
          v56 = "VCVideoCaptureServer_ApplyPressureLevelChanges";
          __int16 v57 = 1024;
          int v58 = 1951;
          __int16 v59 = 1024;
          int v60 = v20;
          __int16 v61 = 1024;
          int v62 = v3;
          __int16 v63 = 1024;
          BOOL v64 = v40 != v39;
          __int16 v65 = 1024;
          BOOL v66 = v42 != v41;
          _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d Throttling screen framerate (old=%d -> new=%d) because of changes in levels thermalLevelDidChange=%d powerLevelDidChange=%d", buf, 0x34u);
        }
      }
      [(id)a1 notifyFrameRateBeingThrottledForClients:*(void *)(a1 + 128) newFrameRate:v3 thermalLevelDidChange:v40 != v39 powerLevelDidChange:v42 != v41];
    }
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id obj = *(id *)(a1 + 576);
    uint64_t v21 = [obj countByEnumeratingWithState:&v49 objects:v48 count:16];
    if (v21)
    {
      uint64_t v23 = v21;
      uint64_t v24 = *(void *)v50;
      id v25 = @"FrameRate";
      CFDictionaryRef v26 = @"CurrentFrameRate";
      *(void *)&long long v22 = 136316674;
      long long v38 = v22;
      do
      {
        uint64_t v27 = 0;
        uint64_t v43 = v23;
        do
        {
          if (*(void *)v50 != v24) {
            objc_enumerationMutation(obj);
          }
          uint64_t v28 = *(void *)(*((void *)&v49 + 1) + 8 * v27);
          int v29 = objc_msgSend(*(id *)(a1 + 584), "objectForKeyedSubscript:", v28, v38);
          int v30 = objc_msgSend((id)objc_msgSend(v29, "objectForKeyedSubscript:", v26), "intValue");
          uint64_t v31 = objc_msgSend((id)a1, "screenFrameRateForThermalLevel:configuredFrameRate:captureSourceID:", *(unsigned int *)(a1 + 436), objc_msgSend((id)objc_msgSend(v29, "objectForKeyedSubscript:", v25), "intValue"), v28);
          if (v31 != v30)
          {
            uint64_t v32 = v31;
            v33 = v25;
            uint64_t v34 = v24;
            uint64_t v35 = v26;
            [(id)a1 setScreenCaptureFrameRate:v31 captureSourceID:v28];
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v36 = VRTraceErrorLogLevelToCSTR();
              long long v37 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v38;
                uint64_t v54 = v36;
                __int16 v55 = 2080;
                v56 = "VCVideoCaptureServer_ApplyPressureLevelChanges";
                __int16 v57 = 1024;
                int v58 = 1962;
                __int16 v59 = 1024;
                int v60 = v30;
                __int16 v61 = 1024;
                int v62 = v32;
                __int16 v63 = 1024;
                BOOL v64 = v40 != v39;
                __int16 v65 = 1024;
                BOOL v66 = v42 != v41;
                _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, "VCVideoCaptureServer [%s] %s:%d Throttling screen framerate (old=%d -> new=%d) because of changes in levels thermalLevelDidChange=%d powerLevelDidChange=%d", buf, 0x34u);
              }
            }
            uint64_t v47 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 584), "objectForKeyedSubscript:", v28), "objectForKeyedSubscript:", @"Client");
            objc_msgSend((id)a1, "notifyFrameRateBeingThrottledForClients:newFrameRate:thermalLevelDidChange:powerLevelDidChange:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v47, 1), v32, v40 != v39, v42 != v41);
            CFDictionaryRef v26 = v35;
            uint64_t v24 = v34;
            id v25 = v33;
            uint64_t v23 = v43;
          }
          ++v27;
        }
        while (v23 != v27);
        uint64_t v23 = [obj countByEnumeratingWithState:&v49 objects:v48 count:16];
      }
      while (v23);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoCaptureServer_ApplyPressureLevelChanges_cold_1();
    }
  }
}

uint64_t VCImageQueue_EnqueueFrame(uint64_t a1, __CVBuffer *a2, CMTime *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  CMTime v37 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (a1 && a2)
  {
    if (objc_opt_class() == a1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        goto LABEL_23;
      }
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      long long v12 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_23;
        }
        uint64_t v13 = *(void *)(a1 + 16);
        CMTime time = *a3;
        Float64 Seconds = CMTimeGetSeconds(&time);
        LODWORD(time.value) = 136316162;
        *(CMTimeValue *)((char *)&time.value + 4) = v10;
        LOWORD(time.flags) = 2080;
        *(void *)((char *)&time.flags + 2) = "VCImageQueue_EnqueueFrame";
        HIWORD(time.epoch) = 1024;
        int v39 = 1167;
        __int16 v40 = 2048;
        uint64_t v41 = v13;
        __int16 v42 = 2048;
        Float64 v43 = Seconds;
        double v15 = " [%s] %s:%d _figQueue=%p，frameTime=%f";
        uint64_t v16 = v11;
        uint32_t v17 = 48;
LABEL_19:
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&time, v17);
        goto LABEL_23;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = *(void *)(a1 + 16);
        CMTime time = *a3;
        Float64 v36 = CMTimeGetSeconds(&time);
        LODWORD(time.value) = 136316162;
        *(CMTimeValue *)((char *)&time.value + 4) = v10;
        LOWORD(time.flags) = 2080;
        *(void *)((char *)&time.flags + 2) = "VCImageQueue_EnqueueFrame";
        HIWORD(time.epoch) = 1024;
        int v39 = 1167;
        __int16 v40 = 2048;
        uint64_t v41 = v35;
        __int16 v42 = 2048;
        Float64 v43 = v36;
        id v25 = " [%s] %s:%d _figQueue=%p，frameTime=%f";
        CFDictionaryRef v26 = v11;
        uint32_t v27 = 48;
        goto LABEL_41;
      }
    }
    else
    {
      if (objc_opt_respondsToSelector()) {
        int v6 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
      }
      else {
        int v6 = &stru_1F3D3E450;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v18 = VRTraceErrorLogLevelToCSTR();
        long long v19 = *MEMORY[0x1E4F47A50];
        int v20 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_23;
          }
          uint64_t v21 = *(void *)(a1 + 16);
          CMTime time = *a3;
          Float64 v22 = CMTimeGetSeconds(&time);
          LODWORD(time.value) = 136316674;
          *(CMTimeValue *)((char *)&time.value + 4) = v18;
          LOWORD(time.flags) = 2080;
          *(void *)((char *)&time.flags + 2) = "VCImageQueue_EnqueueFrame";
          HIWORD(time.epoch) = 1024;
          int v39 = 1167;
          __int16 v40 = 2112;
          uint64_t v41 = (uint64_t)v6;
          __int16 v42 = 2048;
          Float64 v43 = *(double *)&a1;
          __int16 v44 = 2048;
          uint64_t v45 = v21;
          __int16 v46 = 2048;
          Float64 v47 = v22;
          double v15 = " [%s] %s:%d %@(%p) _figQueue=%p，frameTime=%f";
          uint64_t v16 = v19;
          uint32_t v17 = 68;
          goto LABEL_19;
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = *(void *)(a1 + 16);
          CMTime time = *a3;
          Float64 v24 = CMTimeGetSeconds(&time);
          LODWORD(time.value) = 136316674;
          *(CMTimeValue *)((char *)&time.value + 4) = v18;
          LOWORD(time.flags) = 2080;
          *(void *)((char *)&time.flags + 2) = "VCImageQueue_EnqueueFrame";
          HIWORD(time.epoch) = 1024;
          int v39 = 1167;
          __int16 v40 = 2112;
          uint64_t v41 = (uint64_t)v6;
          __int16 v42 = 2048;
          Float64 v43 = *(double *)&a1;
          __int16 v44 = 2048;
          uint64_t v45 = v23;
          __int16 v46 = 2048;
          Float64 v47 = v24;
          id v25 = " [%s] %s:%d %@(%p) _figQueue=%p，frameTime=%f";
          CFDictionaryRef v26 = v19;
          uint32_t v27 = 68;
LABEL_41:
          _os_log_debug_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEBUG, v25, (uint8_t *)&time, v27);
        }
      }
    }
LABEL_23:
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    _VCImageQueue_DrawOverlayMessage(a1, a2);
    if (*(void *)(a1 + 152))
    {
      CFAllocatorRef v28 = *(const __CFAllocator **)(a1 + 160);
      CMTime time = *a3;
      SampleBufferWithPixelBuffer = VideoUtil_CreateSampleBufferWithPixelBuffer(a2, (uint64_t)&time, v28, v28);
      if (SampleBufferWithPixelBuffer)
      {
        int v30 = SampleBufferWithPixelBuffer;
        char v31 = VCStreamOutput_EnqueueSampleBuffer(*(void *)(a1 + 152), SampleBufferWithPixelBuffer);
        if ((v31 & 1) == 0) {
          VCImageQueue_CleanupStreamOutput(a1);
        }
        CFRelease(v30);
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCImageQueue_EnqueueFrame_cold_1();
          }
        }
        char v31 = 0;
      }
      if (*(void *)(a1 + 152))
      {
        uint64_t v9 = 1;
LABEL_37:
        CMTime time = *a3;
        *(double *)&uint64_t v33 = CMTimeGetSeconds(&time);
        CMTime time = v37;
        _VCImageQueue_EmitFrameEnqueuedSignposts(a1, v33, &time, a2);
LABEL_38:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
        return v9;
      }
    }
    else
    {
      char v31 = 0;
    }
    CMTime time = *a3;
    uint64_t v32 = _VCImageQueue_EnqueuePixelBuffer(a1, a2, (uint64_t)&time, (uint64_t)&v37);
    uint64_t v9 = v32;
    if ((v31 & 1) == 0 && !v32) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    uint64_t v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      LODWORD(time.value) = 136316162;
      *(CMTimeValue *)((char *)&time.value + 4) = v7;
      LOWORD(time.flags) = 2080;
      *(void *)((char *)&time.flags + 2) = "VCImageQueue_EnqueueFrame";
      HIWORD(time.epoch) = 1024;
      int v39 = 1164;
      __int16 v40 = 2048;
      uint64_t v41 = a1;
      __int16 v42 = 2048;
      Float64 v43 = *(double *)&a2;
      _os_log_error_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter. imageQueue=%p pixelBuffer=%p", (uint8_t *)&time, 0x30u);
    }
  }
  return 0;
}

uint64_t _VCImageQueue_EnqueuePixelBuffer(uint64_t a1, __CVBuffer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = *(void *)a3;
  CMTimeScale timescale = *(_DWORD *)(a3 + 8);
  CMTimeFlags flags = *(_DWORD *)(a3 + 12);
  CMTimeEpoch epoch = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(a1 + 440);
  uint64_t v13 = 416;
  if (!v12) {
    uint64_t v13 = 16;
  }
  uint64_t v14 = *(void *)(a1 + v13);
  if (v12)
  {
    long long v15 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
    *(_OWORD *)uint64_t v74 = *MEMORY[0x1E4F1DB28];
    *(_OWORD *)&v74[16] = v15;
    if (FigCFDictionaryGetCGRectIfPresent())
    {
      size_t Width = CVPixelBufferGetWidth(a2);
      size_t Height = CVPixelBufferGetHeight(a2);
      VisibleRectDictionary = VideoUtil_CreateVisibleRectDictionary(*(double *)v74 * (double)Width, *(double *)&v74[8] * (double)Height, *(double *)&v74[16] * (double)Width, *(double *)&v74[24] * (double)Height);
      CVBufferSetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24A78], VisibleRectDictionary, kCVAttachmentMode_ShouldPropagate);
      if (VisibleRectDictionary) {
        CFRelease(VisibleRectDictionary);
      }
    }
  }
  if (*(unsigned char *)(a1 + 352) && *(void *)(a1 + 184))
  {
    convertTimeoutToRelativeTimespec(0.033);
    *(void *)uint64_t v74 = v19;
    *(void *)&v74[8] = v20;
    if (pthread_cond_timedwait_relative_np((pthread_cond_t *)(a1 + 360), (pthread_mutex_t *)(a1 + 32), (const timespec *)v74) == 60)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCImageQueue_EnqueuePixelBuffer_cold_2();
        }
      }
      _VCImageQueue_applyLayerTransforms(a1, 0);
    }
    *(unsigned char *)(a1 + 352) = 0;
    int v21 = 1;
  }
  else
  {
    int v21 = 0;
  }
  int32_t v22 = *(_DWORD *)(a1 + 108);
  if ((v22 - 1) <= 0x1D)
  {
    memset(v74, 170, 24);
    CMTimeMake((CMTime *)v74, 1, v22);
    lhs.CMTimeValue value = value;
    lhs.CMTimeScale timescale = timescale;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    CMTime rhs = *(CMTime *)v74;
    CMTimeAdd(&v73, &lhs, &rhs);
    int32_t v23 = *(_DWORD *)(a1 + 108);
    CMTime lhs = v73;
    CMTimeConvertScale(&v73, &lhs, v23, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    CMTimeValue value = v73.value;
    CMTimeScale timescale = v73.timescale;
    CMTimeFlags flags = v73.flags;
    CMTimeEpoch epoch = v73.epoch;
  }
  if ((flags & 0x1D) != 1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 0;
    }
    uint64_t v67 = VRTraceErrorLogLevelToCSTR();
    int v68 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_OWORD *)uint64_t v74 = *(_OWORD *)a3;
    *(void *)&v74[16] = *(void *)(a3 + 16);
    Float64 Seconds = CMTimeGetSeconds((CMTime *)v74);
    *(void *)uint64_t v74 = value;
    *(_DWORD *)&v74[8] = timescale;
    *(_DWORD *)&v74[12] = flags;
    *(void *)&v74[16] = epoch;
    Float64 v70 = CMTimeGetSeconds((CMTime *)v74);
    *(_DWORD *)uint64_t v74 = 136316418;
    *(void *)&v74[4] = v67;
    *(_WORD *)&v74[12] = 2080;
    *(void *)&v74[14] = "_VCImageQueue_EnqueuePixelBuffer";
    *(_WORD *)&v74[22] = 1024;
    *(_DWORD *)&v74[24] = 1098;
    *(_WORD *)&v74[28] = 2048;
    *(Float64 *)&v74[30] = Seconds;
    *(_WORD *)&v74[38] = 2048;
    *(Float64 *)&v74[40] = v70;
    *(_WORD *)&v74[48] = 2112;
    *(void *)&v74[50] = a1;
    int v60 = " [%s] %s:%d Cannot enqueue, frameTime is invalid. inFrameTime=%f frameTime=%f VCImageQueue=(%@)";
    __int16 v61 = v68;
    uint32_t v62 = 58;
    goto LABEL_59;
  }
  if (!v14)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCImageQueue_EnqueuePixelBuffer_cold_1();
      }
    }
    return 0;
  }
  LODWORD(rhs.value) = 0;
  CMTime v73 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime lhs = v73;
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  CFDictionaryRef v26 = *(void (**)(uint64_t, CMTime *, CMTime *, CMTime *))(v25 + 64);
  if (v26) {
    v26(v14, &rhs, &v73, &lhs);
  }
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  int v29 = *(unsigned int (**)(uint64_t))(v28 + 24);
  if (!v29 || !v29(v14))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 0;
    }
    uint64_t v35 = VRTraceErrorLogLevelToCSTR();
    Float64 v36 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int CanEnqueueImage = FigImageQueueCanEnqueueImage(v14);
    *(void *)uint64_t v74 = value;
    *(_DWORD *)&v74[8] = timescale;
    *(_DWORD *)&v74[12] = flags;
    *(void *)&v74[16] = epoch;
    Float64 v56 = CMTimeGetSeconds((CMTime *)v74);
    int v57 = rhs.value;
    *(CMTime *)uint64_t v74 = v73;
    Float64 v58 = CMTimeGetSeconds((CMTime *)v74);
    *(CMTime *)uint64_t v74 = lhs;
    Float64 v59 = CMTimeGetSeconds((CMTime *)v74);
    *(_DWORD *)uint64_t v74 = 136317186;
    *(void *)&v74[4] = v35;
    *(_WORD *)&v74[12] = 2080;
    *(void *)&v74[14] = "_VCImageQueue_EnqueuePixelBuffer";
    *(_WORD *)&v74[22] = 1024;
    *(_DWORD *)&v74[24] = 1142;
    *(_WORD *)&v74[28] = 1024;
    *(_DWORD *)&v74[30] = CanEnqueueImage;
    *(_WORD *)&v74[34] = 2048;
    *(void *)&v74[36] = v14;
    *(_WORD *)&v74[44] = 2048;
    *(Float64 *)&v74[46] = v56;
    *(_WORD *)&v74[54] = 1024;
    *(_DWORD *)&v74[56] = v57;
    *(_WORD *)&v74[60] = 2048;
    *(Float64 *)&v74[62] = v58;
    __int16 v75 = 2048;
    Float64 v76 = v59;
    int v60 = " [%s] %s:%d Cannot enqueue. FigImageQueueCanEnqueueImage=%d for queue=%p frameTime=%f Unconsumed image count=%"
          "d minTime=%f maxTime=%f";
    __int16 v61 = v36;
    uint32_t v62 = 80;
LABEL_59:
    _os_log_error_impl(&dword_1E1EA4000, v61, OS_LOG_TYPE_ERROR, v60, v74, v62);
    return 0;
  }
  int v30 = *(unsigned __int8 *)(a1 + 113);
  if (*(unsigned char *)(a1 + 113))
  {
    CMTimeValue value = *MEMORY[0x1E4F1FA48];
    CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
    CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 12);
    CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    int v30 = 3;
  }
  unsigned int v31 = v30 | v21;
  if (*(unsigned __int8 *)(a1 + 425) == *(unsigned __int8 *)(a1 + 426)) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = v31 | 4;
  }
  atomic_fetch_add((atomic_uint *volatile)(a1 + 132), 1u);
  uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v33) {
    uint64_t v34 = v33;
  }
  else {
    uint64_t v34 = 0;
  }
  int v39 = *(void (**)(uint64_t, __CVBuffer *, void, unsigned char *, uint64_t))(v34 + 32);
  if (v39)
  {
    *(void *)uint64_t v74 = value;
    *(_DWORD *)&v74[8] = timescale;
    *(_DWORD *)&v74[12] = flags;
    *(void *)&v74[16] = epoch;
    v39(v14, a2, 0, v74, v32);
  }
  if (a4)
  {
    *(void *)a4 = value;
    *(_DWORD *)(a4 + 8) = timescale;
    *(_DWORD *)(a4 + 12) = flags;
    *(void *)(a4 + 16) = epoch;
  }
  int v40 = rhs.value;
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v40 < 16)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v49 = VRTraceErrorLogLevelToCSTR();
      Float64 v43 = *MEMORY[0x1E4F47A50];
      long long v50 = *MEMORY[0x1E4F47A50];
      if (!*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          *(void *)uint64_t v74 = value;
          *(_DWORD *)&v74[8] = timescale;
          *(_DWORD *)&v74[12] = flags;
          *(void *)&v74[16] = epoch;
          Float64 v63 = CMTimeGetSeconds((CMTime *)v74);
          int v64 = rhs.value;
          *(CMTime *)uint64_t v74 = v73;
          Float64 v65 = CMTimeGetSeconds((CMTime *)v74);
          *(CMTime *)uint64_t v74 = lhs;
          Float64 v66 = CMTimeGetSeconds((CMTime *)v74);
          *(_DWORD *)uint64_t v74 = 136316674;
          *(void *)&v74[4] = v49;
          *(_WORD *)&v74[12] = 2080;
          *(void *)&v74[14] = "_VCImageQueue_EnqueuePixelBuffer";
          *(_WORD *)&v74[22] = 1024;
          *(_DWORD *)&v74[24] = 1132;
          *(_WORD *)&v74[28] = 2048;
          *(Float64 *)&v74[30] = v63;
          *(_WORD *)&v74[38] = 1024;
          *(_DWORD *)&v74[40] = v64;
          *(_WORD *)&v74[44] = 2048;
          *(Float64 *)&v74[46] = v65;
          *(_WORD *)&v74[54] = 2048;
          *(Float64 *)&v74[56] = v66;
          _os_log_debug_impl(&dword_1E1EA4000, v43, OS_LOG_TYPE_DEBUG, " [%s] %s:%d frameTime=%f Unconsumed image count=%d minTime=%f maxTime=%f", v74, 0x40u);
        }
        goto LABEL_56;
      }
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)uint64_t v74 = value;
        *(_DWORD *)&v74[8] = timescale;
        *(_DWORD *)&v74[12] = flags;
        *(void *)&v74[16] = epoch;
        Float64 v51 = CMTimeGetSeconds((CMTime *)v74);
        int v52 = rhs.value;
        *(CMTime *)uint64_t v74 = v73;
        Float64 v53 = CMTimeGetSeconds((CMTime *)v74);
        *(CMTime *)uint64_t v74 = lhs;
        Float64 v54 = CMTimeGetSeconds((CMTime *)v74);
        *(_DWORD *)uint64_t v74 = 136316674;
        *(void *)&v74[4] = v49;
        *(_WORD *)&v74[12] = 2080;
        *(void *)&v74[14] = "_VCImageQueue_EnqueuePixelBuffer";
        *(_WORD *)&v74[22] = 1024;
        *(_DWORD *)&v74[24] = 1132;
        *(_WORD *)&v74[28] = 2048;
        *(Float64 *)&v74[30] = v51;
        *(_WORD *)&v74[38] = 1024;
        *(_DWORD *)&v74[40] = v52;
        *(_WORD *)&v74[44] = 2048;
        *(Float64 *)&v74[46] = v53;
        *(_WORD *)&v74[54] = 2048;
        *(Float64 *)&v74[56] = v54;
        uint64_t v48 = " [%s] %s:%d frameTime=%f Unconsumed image count=%d minTime=%f maxTime=%f";
        goto LABEL_53;
      }
    }
  }
  else if (ErrorLogLevelForModule >= 5)
  {
    uint64_t v42 = VRTraceErrorLogLevelToCSTR();
    Float64 v43 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(void *)uint64_t v74 = value;
      *(_DWORD *)&v74[8] = timescale;
      *(_DWORD *)&v74[12] = flags;
      *(void *)&v74[16] = epoch;
      Float64 v44 = CMTimeGetSeconds((CMTime *)v74);
      int v45 = rhs.value;
      *(CMTime *)uint64_t v74 = v73;
      Float64 v46 = CMTimeGetSeconds((CMTime *)v74);
      *(CMTime *)uint64_t v74 = lhs;
      Float64 v47 = CMTimeGetSeconds((CMTime *)v74);
      *(_DWORD *)uint64_t v74 = 136316674;
      *(void *)&v74[4] = v42;
      *(_WORD *)&v74[12] = 2080;
      *(void *)&v74[14] = "_VCImageQueue_EnqueuePixelBuffer";
      *(_WORD *)&v74[22] = 1024;
      *(_DWORD *)&v74[24] = 1130;
      *(_WORD *)&v74[28] = 2048;
      *(Float64 *)&v74[30] = v44;
      *(_WORD *)&v74[38] = 1024;
      *(_DWORD *)&v74[40] = v45;
      *(_WORD *)&v74[44] = 2048;
      *(Float64 *)&v74[46] = v46;
      *(_WORD *)&v74[54] = 2048;
      *(Float64 *)&v74[56] = v47;
      uint64_t v48 = " [%s] %s:%d Image queue at full capacity! frameTime=%f Unconsumed image count=%d minTime=%f maxTime=%f";
LABEL_53:
      _os_log_impl(&dword_1E1EA4000, v43, OS_LOG_TYPE_DEFAULT, v48, v74, 0x40u);
    }
  }
LABEL_56:
  uint64_t v37 = 1;
  if (*(unsigned __int8 *)(a1 + 425) != *(unsigned __int8 *)(a1 + 426))
  {
    _VCImageQueue_ApplyPreviewLayerTransforms(a1, 1);
    *(unsigned char *)(a1 + 426) = *(unsigned char *)(a1 + 425);
  }
  return v37;
}

uint64_t _VCImageQueue_EmitFrameEnqueuedSignposts(uint64_t a1, uint64_t a2, CMTime *a3, __CVBuffer *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (const void *)(a1 + 128);
  ++*(_DWORD *)(a1 + 128);
  if (*(void *)(a1 + 144))
  {
    double v8 = micro();
    double v18 = v8;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
    if (Count < 1)
    {
      if (Count)
      {
LABEL_17:
        _VCImageQueue_RemoveExpiredFrameCounts(a1, v8);
        goto LABEL_18;
      }
    }
    else
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), Count - 1);
      CFNumberRef v11 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      valuePtr.CMTimeValue value = 0;
      CFNumberGetValue(v11, kCFNumberDoubleType, &valuePtr);
      if (*(double *)&valuePtr.value + 1.0 > v8) {
        goto LABEL_17;
      }
    }
    *(void *)&valuePtr.CMTimeScale timescale = 0;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    valuePtr.CMTimeValue value = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &v18);
    if (valuePtr.value)
    {
      *(void *)&valuePtr.CMTimeScale timescale = CFNumberCreate(v12, kCFNumberSInt32Type, v7);
      if (*(void *)&valuePtr.timescale)
      {
        CFArrayRef v13 = CFArrayCreate(v12, (const void **)&valuePtr, 2, MEMORY[0x1E4F1D510]);
        if (v13)
        {
          CFArrayRef v14 = v13;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 136), v13);
LABEL_10:
          if (valuePtr.value) {
            CFRelease((CFTypeRef)valuePtr.value);
          }
          if (*(void *)&valuePtr.timescale) {
            CFRelease(*(CFTypeRef *)&valuePtr.timescale);
          }
          if (v14) {
            CFRelease(v14);
          }
          double v8 = v18;
          goto LABEL_17;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCImageQueue_EmitFrameEnqueuedSignposts_cold_3();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCImageQueue_EmitFrameEnqueuedSignposts_cold_2();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCImageQueue_EmitFrameEnqueuedSignposts_cold_1();
      }
    }
    CFArrayRef v14 = 0;
    goto LABEL_10;
  }
LABEL_18:
  CMTime valuePtr = *a3;
  CMTimeGetSeconds(&valuePtr);
  IOSurface = CVPixelBufferGetIOSurface(a4);
  IOSurfaceGetID(IOSurface);
  if (*(unsigned char *)(a1 + 113))
  {
    LODWORD(valuePtr.value) = -1431655766;
    CFNumberRef Attachment = (const __CFNumber *)CVBufferGetAttachment(a4, @"FrameSequenceNumber", (CVAttachmentMode *)&valuePtr);
    if (Attachment)
    {
      LOWORD(v18) = 0;
      CFNumberGetValue(Attachment, kCFNumberSInt16Type, &v18);
      if (CVBufferGetAttachment(a4, @"HIDTimeStamp", 0)) {
        FigCFNumberGetUInt64();
      }
      kdebug_trace();
    }
  }
  return kdebug_trace();
}

char *_VCImageQueue_DrawOverlayMessage(uint64_t a1, __CVBuffer *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  result = *(char **)(a1 + 144);
  if (result)
  {
    long long v11 = xmmword_1E259FA80;
    long long v12 = unk_1E259FA90;
    long long v13 = xmmword_1E259FAA0;
    long long v9 = xmmword_1E259FA60;
    long long v10 = unk_1E259FA70;
    [result currentDetails];
    _VCImageQueue_AverageFrameRate(a1);
    if (v5 <= 0.0) {
      float v5 = *((float *)&v9 + 1);
    }
    *(void *)((char *)&v9 + 4) = __PAIR64__((float)*(unsigned int *)(a1 + 108), LODWORD(v5));
    double Width = (float)CVPixelBufferGetWidth(a2);
    size_t Height = CVPixelBufferGetHeight(a2);
    *(double *)&long long v12 = Width;
    *((double *)&v12 + 1) = (float)Height;
    v8[0] = v9;
    v8[1] = v10;
    v8[2] = v11;
    v8[3] = v12;
    v8[4] = v13;
    [*(id *)(a1 + 144) setCurrentDetails:v8];
    return VCPixelBufferOverlay_updateOverlayWithPixelBuffer(*(char **)(a1 + 144), a2);
  }
  return result;
}

double VCHardwareSettings_FrontCameraOffsetFromDisplayCenter()
{
  if (VCHardwareSettings_FrontCameraOffsetFromDisplayCenter_sOnceToken != -1) {
    dispatch_once(&VCHardwareSettings_FrontCameraOffsetFromDisplayCenter_sOnceToken, &__block_literal_global_106);
  }
  return *(double *)&VCHardwareSettings_FrontCameraOffsetFromDisplayCenter_offset_0;
}

CFMutableDictionaryRef VideoAttributes_CreateEncodedCFDictionary(void *a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  VCCameraStatusBitsFromVideoAttributes(a1);
  FigCFDictionarySetInt16();
  FigCFDictionarySetCGRect();
  FigCFDictionarySetCGSize();
  return Mutable;
}

void sub_1E1EB40A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E1EB4340(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E1EB5498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCDispatchQueue_GetCustomRootQueue(uint64_t a1)
{
  id v2 = +[VCDispatchQueue defaultManager];

  return [v2 getCustomRootQueueWithPriority:a1 isFixedPriority:1];
}

void sub_1E1EB6984(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _VCAVFoundationCapture_compare(void *a1, void *a2, double *a3)
{
  double v6 = a3[1];
  float v7 = v6;
  unint64_t v8 = _VCAVFoundationCapture_effectiveResolution(a1, v7);
  float v9 = v6;
  unint64_t v10 = _VCAVFoundationCapture_effectiveResolution(a2, v9);
  if (v8 > v10) {
    return 1;
  }
  if (v8 < v10) {
    return -1;
  }
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)[a1 formatDescription]);
  int32_t v13 = Dimensions;
  unint64_t v14 = HIDWORD(Dimensions);
  CMVideoDimensions v15 = CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)[a2 formatDescription]);
  float v16 = v6 - (float)((float)v13 / (float)(int)v14);
  float v17 = fabsf(v16);
  float v18 = v6 - (float)((float)v15.width / (float)v15.height);
  float v19 = fabsf(v18);
  if (VCMU_CompareWithAccuracy(v17, v19, 0.01))
  {
    if (a2)
    {
      if (!a1) {
        return 1;
      }
      if (*(unsigned char *)(*(void *)a3 + 229) && !*(_DWORD *)(*(void *)a3 + 232))
      {
        if ([a1 isVideoHDRSupported]
          && ![a2 isVideoHDRSupported])
        {
          return -1;
        }
        if ([a1 isVideoHDRSupported] & 1) == 0 && (objc_msgSend(a2, "isVideoHDRSupported")) {
          return 1;
        }
      }
      if (![a1 isVideoBinned] || objc_msgSend(a2, "isVideoBinned")) {
        return ([a1 isVideoBinned] & 1) == 0 && (objc_msgSend(a2, "isVideoBinned") & 1) != 0;
      }
    }
    return -1;
  }
  if (v17 > v19) {
    return 1;
  }
  if (v17 >= v19) {
    return 0;
  }
  else {
    return -1;
  }
}

unint64_t _VCAVFoundationCapture_effectiveResolution(void *a1, float a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)[a1 formatDescription]);
  int32_t v4 = Dimensions;
  unint64_t v5 = HIDWORD(Dimensions);
  double v6 = a2;
  double v7 = round((double)Dimensions / v6);
  double v8 = v7 * (double)Dimensions;
  double v9 = round(v6 * (double)HIDWORD(Dimensions)) * (double)HIDWORD(Dimensions);
  if (v7 > (double)HIDWORD(Dimensions)) {
    double v8 = v9;
  }
  unint64_t v10 = (unint64_t)v8;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v11 = VRTraceErrorLogLevelToCSTR();
    long long v12 = *MEMORY[0x1E4F47A50];
    int32_t v13 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 136316674;
        uint64_t v16 = v11;
        __int16 v17 = 2080;
        float v18 = "_VCAVFoundationCapture_effectiveResolution";
        __int16 v19 = 1024;
        int v20 = 2761;
        __int16 v21 = 1024;
        int32_t v22 = v4;
        __int16 v23 = 1024;
        int v24 = v5;
        __int16 v25 = 2048;
        double v26 = v6;
        __int16 v27 = 2048;
        unint64_t v28 = v10;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %ux%u,AR:%f, res=%llu", (uint8_t *)&v15, 0x3Cu);
      }
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 136316674;
      uint64_t v16 = v11;
      __int16 v17 = 2080;
      float v18 = "_VCAVFoundationCapture_effectiveResolution";
      __int16 v19 = 1024;
      int v20 = 2761;
      __int16 v21 = 1024;
      int32_t v22 = v4;
      __int16 v23 = 1024;
      int v24 = v5;
      __int16 v25 = 2048;
      double v26 = v6;
      __int16 v27 = 2048;
      unint64_t v28 = v10;
      _os_log_debug_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEBUG, " [%s] %s:%d %ux%u,AR:%f, res=%llu", (uint8_t *)&v15, 0x3Cu);
    }
  }
  return v10;
}

uint64_t _VCAllocatorFirstComeCallback_Retain(uint64_t result)
{
  return result;
}

BOOL _VCDefaults_GetBoolValueForKey(const __CFString *a1, BOOL a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  Boolean keyExistsAndHasValidFormat = -86;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(a1, @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    int v7 = AppBooleanValue;
    a2 = AppBooleanValue != 0;
    if (a3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v8 = VRTraceErrorLogLevelToCSTR();
        double v9 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          uint64_t v13 = v8;
          __int16 v14 = 2080;
          int v15 = "_VCDefaults_GetBoolValueForKey";
          __int16 v16 = 1024;
          int v17 = 1051;
          __int16 v18 = 2112;
          CFStringRef v19 = a1;
          __int16 v20 = 1024;
          int v21 = v7;
          _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %@=%d", buf, 0x2Cu);
        }
      }
    }
  }
  return a2;
}

uint64_t VCDefaults_GetIntValueForKey(const __CFString *a1, uint64_t IntValue)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = (const __CFString *)CFPreferencesCopyAppValue(a1, @"com.apple.VideoConference");
  if (v4)
  {
    CFStringRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID())
    {
      IntValue = CFStringGetIntValue(v5);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        uint64_t v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 136316162;
          uint64_t v11 = v7;
          __int16 v12 = 2080;
          uint64_t v13 = "VCDefaults_GetIntValueForKey";
          __int16 v14 = 1024;
          int v15 = 1063;
          __int16 v16 = 2080;
          CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
          __int16 v18 = 1024;
          int v19 = IntValue;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Key %s: Value %d", (uint8_t *)&v10, 0x2Cu);
        }
      }
    }
    CFRelease(v5);
  }
  return IntValue;
}

void sub_1E1EB7E54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const void *VCDefaults_CopyValueForKey(const __CFString *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!VRTraceIsInternalOSInstalled()) {
    return 0;
  }
  CFPropertyListRef v4 = CFPreferencesCopyAppValue(a1, @"com.apple.VideoConference");
  CFStringRef v5 = v4;
  if (!v4) {
    return v5;
  }
  if (CFGetTypeID(v4) != a2)
  {
    CFRelease(v5);
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136316162;
      uint64_t v10 = v6;
      __int16 v11 = 2080;
      __int16 v12 = "VCDefaults_CopyValueForKey";
      __int16 v13 = 1024;
      int v14 = 1087;
      __int16 v15 = 2112;
      CFStringRef v16 = a1;
      __int16 v17 = 2112;
      __int16 v18 = v5;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %@=%@", (uint8_t *)&v9, 0x30u);
    }
  }
  return v5;
}

uint64_t VCVideoUtil_ShouldUseCompressedPixelFormat()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v0 = _os_feature_enabled_impl();
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  id v2 = (os_log_t *)MEMORY[0x1E4F47A50];
  if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    CFPropertyListRef v4 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315906;
      uint64_t v10 = v3;
      __int16 v11 = 2080;
      __int16 v12 = "VCVideoUtil_ShouldUseCompressedPixelFormat";
      __int16 v13 = 1024;
      int v14 = 1773;
      __int16 v15 = 1024;
      BOOL v16 = v0;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d compressed video buffers enabled=%d", (uint8_t *)&v9, 0x22u);
    }
  }
  BOOL v5 = +[VCHardwareSettings supportsCompressedPixelFormat];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315906;
      uint64_t v10 = v6;
      __int16 v11 = 2080;
      __int16 v12 = "VCVideoUtil_ShouldUseCompressedPixelFormat";
      __int16 v13 = 1024;
      int v14 = 1776;
      __int16 v15 = 1024;
      BOOL v16 = v5;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d compressed pixel format available=%d", (uint8_t *)&v9, 0x22u);
    }
  }
  return v0 & v5;
}

BOOL VCFeatureFlagManager_UseAvconferenced()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_UseAvconferenced_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_UseAvconferenced_onceToken, &__block_literal_global_12);
  }
  BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"useAvconferenced", VCFeatureFlagManager_UseAvconferenced_flag);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = BoolValueForKey;
    __int16 v3 = 1024;
    int v4 = VCFeatureFlagManager_UseAvconferenced_flag;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseAvconferenced=%d, featureFlag=%d", (uint8_t *)v2, 0xEu);
  }
  return BoolValueForKey;
}

uint64_t VCAllocatorFirstCome_Create(const __CFAllocator *a1, uint64_t a2, CFAllocatorRef *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  if (!a3)
  {
    uint64_t v9 = 1768846960;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAllocatorFirstCome_Create_cold_1(v11);
      }
    }
    goto LABEL_18;
  }
  CFAllocatorContext v13 = *(CFAllocatorContext *)byte_1F3D3E340;
  uint64_t v5 = CFAllocatorAllocate(a1, 144, 0);
  if (!v5)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAllocatorFirstCome_Create_cold_3(v12);
      }
    }
    uint64_t v9 = 1852663149;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAllocatorFirstCome_Create_cold_2();
      }
    }
LABEL_18:
    _VCAllocatorFirstCome_FinalizeInfo(0);
    _VCAllocatorMultiQueue_ReleaseInfo(&v14);
    return v9;
  }
  uint64_t v6 = v5;
  long long v15 = 0uLL;
  *((_OWORD *)v5 + 2) = 0uLL;
  *((unsigned char *)v5 + 24) = 1;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  if (a1) {
    CFAllocatorRef Default = a1;
  }
  else {
    CFAllocatorRef Default = CFAllocatorGetDefault();
  }
  *(void *)uint64_t v6 = CFRetain(Default);
  v6[2] = 0;
  *((void *)v6 + 15) = 0;
  *((unsigned char *)v6 + 118) = 0;
  __strlcpy_chk();
  v13.info = v6;
  CFAllocatorRef v8 = CFAllocatorCreate(a1, &v13);
  if (v8)
  {
    uint64_t v9 = 0;
    *a3 = v8;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAllocatorFirstCome_Create_cold_4();
      }
    }
    return 0;
  }
  return v9;
}

const void *VCDefaults_CopyStringValueForKey(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();

  return VCDefaults_CopyValueForKey(a1, TypeID);
}

uint64_t VCSingleLinkedListInitialize(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    result = 0;
    if (a2)
    {
      if (!*(unsigned char *)(v2 + 8))
      {
        *(void *)uint64_t v2 = 0;
        result = 1;
        *(unsigned char *)(v2 + 8) = 1;
        *(void *)(v2 + 16) = a2;
        *(void *)(v2 + 24) = 0;
      }
    }
  }
  return result;
}

uint64_t VCSingleLinkedListPush(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    result = 0;
    if (a2)
    {
      if (*(unsigned char *)(v3 + 8))
      {
        int v4 = (uint64_t *)v3;
        while (1)
        {
          uint64_t v5 = v4;
          int v4 = (uint64_t *)*v4;
          if (!v4)
          {
            uint64_t v7 = 0;
            goto LABEL_10;
          }
          int v6 = (*(uint64_t (**)(uint64_t *, void *))(v3 + 16))(v4, a2);
          if (v6 == 1) {
            return 0;
          }
          if (v6 == 2)
          {
            uint64_t v7 = *v5;
LABEL_10:
            ++*(void *)(v3 + 24);
            *a2 = v7;
            *uint64_t v5 = (uint64_t)a2;
            return 1;
          }
        }
      }
    }
  }
  return result;
}

void VCImageQueue_EnqueueAttributes(uint64_t a1, const void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    if (*(void *)(a1 + 184))
    {
      if (!*(unsigned char *)(a1 + 424))
      {
        int v12 = 0;
        if (FigCFDictionaryGetInt16IfPresent())
        {
          if (FigCFDictionaryGetInt16IfPresent())
          {
            if (*(unsigned char *)(a1 + 435) && (v12 & 3u) > 1
              || (float v13 = 0.0,
                  *(_DWORD *)buf = 0,
                  _VCImageQueue_computeVisibleFrameRatio(*(void *)(a1 + 24), (float *)buf),
                  v4)
              && (_VCImageQueue_computeVisibleFrameRatio((uint64_t)a2, &v13), (v5 & 1) != 0)
              && !VCMU_CompareWithAccuracy(v13, *(float *)buf, 0.01))
            {
              *(unsigned char *)(a1 + 352) = 1;
            }
          }
        }
      }
    }
    int v6 = *(const void **)(a1 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 24) = 0;
    }
    *(void *)(a1 + 24) = CFRetain(a2);
    uint64_t v7 = *(void **)(a1 + 144);
    if (v7)
    {
      long long v15 = unk_1E259FA90;
      long long v16 = xmmword_1E259FAA0;
      *(_OWORD *)buf = xmmword_1E259FA60;
      memset(&buf[16], 255, 32);
      [v7 currentDetails];
      *(void *)&long long v16 = *(void *)(a1 + 24);
      buf[2] = *(unsigned char *)(a1 + 424);
      v11[2] = *(_OWORD *)&buf[32];
      v11[3] = v15;
      v11[4] = v16;
      v11[0] = *(_OWORD *)buf;
      v11[1] = *(_OWORD *)&buf[16];
      [*(id *)(a1 + 144) setCurrentDetails:v11];
    }
    uint64_t v8 = *(void *)(a1 + 152);
    if (v8)
    {
      if ((VCStreamOutput_EnqueueAttributes(v8, *(void *)(a1 + 24)) & 1) == 0) {
        VCImageQueue_CleanupStreamOutput(a1);
      }
    }
    _VCImageQueue_ApplyPreviewLayerTransforms(a1, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "VCImageQueue_EnqueueAttributes";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = 1027;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a1;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = a2;
      _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter. imageQueue=%p attributes=%p", buf, 0x30u);
    }
  }
}

uint64_t _VCImageQueue_ApplyPreviewLayerTransforms(uint64_t result, int a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*(void *)(result + 184))
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 424))
    {
      __int16 v46 = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v4 = VRTraceErrorLogLevelToCSTR();
        char v5 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *(void *)(v2 + 24);
          LODWORD(buf.m11) = 136316418;
          *(void *)((char *)&buf.m11 + 4) = v4;
          WORD2(buf.m12) = 2080;
          *(void *)((char *)&buf.m12 + 6) = "_VCImageQueue_ApplyPreviewLayerTransforms";
          HIWORD(buf.m13) = 1024;
          LODWORD(buf.m14) = 1009;
          WORD2(buf.m14) = 1024;
          *(_DWORD *)((char *)&buf.m14 + 6) = 1009;
          WORD1(buf.m21) = 2048;
          *(void *)((char *)&buf.m21 + 4) = v2;
          WORD2(buf.m22) = 2112;
          *(void *)((char *)&buf.m22 + 6) = v6;
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: vcImageQueue=%p LocalVideoAttributes=%@", (uint8_t *)&buf, 0x36u);
        }
      }
      result = FigCFDictionaryGetInt16IfPresent();
      if (result)
      {
        unsigned int v7 = v46 & 3;
        *(void *)&long long v8 = -1;
        *((void *)&v8 + 1) = -1;
        *(_OWORD *)&v45.CGFloat m11 = v8;
        *(_OWORD *)&v45.CGFloat m13 = v8;
        *(_OWORD *)&v45.CGFloat m21 = v8;
        *(_OWORD *)&v45.m23 = v8;
        *(_OWORD *)&v45.m31 = v8;
        *(_OWORD *)&v45.m33 = v8;
        *(_OWORD *)&v45.m41 = v8;
        *(_OWORD *)&v45.m43 = v8;
        int v9 = *(unsigned __int8 *)(v2 + 434);
        CGFloat m11 = *MEMORY[0x1E4F1DAB8];
        CGFloat m12 = *(double *)(MEMORY[0x1E4F1DAB8] + 8);
        CGFloat m13 = *(double *)(MEMORY[0x1E4F1DAB8] + 16);
        CGFloat m14 = *(double *)(MEMORY[0x1E4F1DAB8] + 24);
        CGFloat m21 = *(double *)(MEMORY[0x1E4F1DAB8] + 32);
        CGFloat m22 = *(double *)(MEMORY[0x1E4F1DAB8] + 40);
        if ([+[VCHardwareSettingsEmbedded sharedInstance] deviceClass] != 1)
        {
          int v16 = VCFeatureFlagManager_PreviewMSROptimizationForEmbedded();
          if (v9)
          {
            int v17 = v16;
            if (+[VCHardwareSettings isExternalCameraSupported])
            {
              if (v17) {
                CGFloat v18 = 3.14159265;
              }
              else {
                CGFloat v18 = -1.57079633;
              }
              CGAffineTransformMakeRotation((CGAffineTransform *)&buf, v18);
              goto LABEL_18;
            }
          }
          switch(v46 & 3)
          {
            case 1:
              CGFloat v19 = 3.14159265;
              goto LABEL_16;
            case 2:
              CGFloat v19 = -1.57079633;
              goto LABEL_16;
            case 3:
              CGFloat v19 = 1.57079633;
LABEL_16:
              CGAffineTransformMakeRotation((CGAffineTransform *)&buf, v19);
              CGFloat m11 = buf.m11;
              CGFloat m12 = buf.m12;
              CGFloat m13 = buf.m13;
              CGFloat m14 = buf.m14;
              CGFloat m21 = buf.m21;
              CGFloat m22 = buf.m22;
              break;
            default:
              break;
          }
        }
        buf.CGFloat m11 = m11;
        buf.CGFloat m12 = m12;
        buf.CGFloat m13 = m13;
        buf.CGFloat m14 = m14;
        buf.CGFloat m21 = m21;
        buf.CGFloat m22 = m22;
LABEL_18:
        CATransform3DMakeAffineTransform(&v45, (CGAffineTransform *)&buf);
        if (!*(unsigned char *)(v2 + 434))
        {
          int64_t v20 = [+[VCHardwareSettingsEmbedded sharedInstance] deviceClass];
          int v21 = 0;
          if (v7 >= 2 && v20 == 1)
          {
            [*(id *)(v2 + 184) frame];
            double v23 = v22;
            [*(id *)(v2 + 184) frame];
            if (v23 <= v24)
            {
              int v21 = 0;
            }
            else
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v25 = VRTraceErrorLogLevelToCSTR();
                double v26 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  [*(id *)(v2 + 184) frame];
                  uint64_t v42 = v41;
                  [*(id *)(v2 + 184) frame];
                  LODWORD(buf.m11) = 136316674;
                  *(void *)((char *)&buf.m11 + 4) = v25;
                  WORD2(buf.m12) = 2080;
                  *(void *)((char *)&buf.m12 + 6) = "_VCImageQueue_IsPhoneInDominoMode";
                  HIWORD(buf.m13) = 1024;
                  LODWORD(buf.m14) = 997;
                  WORD2(buf.m14) = 1024;
                  *(_DWORD *)((char *)&buf.m14 + 6) = 997;
                  WORD1(buf.m21) = 1024;
                  HIDWORD(buf.m21) = v7;
                  LOWORD(buf.m22) = 2048;
                  *(void *)((char *)&buf.m22 + 2) = v42;
                  WORD1(buf.m23) = 2048;
                  *(void *)((char *)&buf.m23 + 4) = v43;
                  _os_log_error_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Detected iPhone in Domino mode orientation %d width %f height %f", (uint8_t *)&buf, 0x3Cu);
                }
              }
              int v21 = 1;
            }
          }
          int v27 = *(unsigned __int8 *)(v2 + 425);
          int v28 = *(_DWORD *)(v2 + 428);
          int64_t v29 = -[VCHardwareSettingsEmbedded deviceClass](+[VCHardwareSettingsEmbedded sharedInstance](VCHardwareSettingsEmbedded, "sharedInstance", *(void *)&v45.m11, *(void *)&v45.m12, *(void *)&v45.m13, *(void *)&v45.m14, *(void *)&v45.m21, *(void *)&v45.m22, *(void *)&v45.m23, *(void *)&v45.m24, *(void *)&v45.m31, *(void *)&v45.m32, *(void *)&v45.m33, *(void *)&v45.m34, *(void *)&v45.m41, *(void *)&v45.m42, *(void *)&v45.m43, *(void *)&v45.m44),
                  "deviceClass");
          if (VCFeatureFlagManager_PreviewMSROptimizationForEmbedded())
          {
            if (v7 < 2)
            {
              BOOL v35 = v28 != 1 && v27 == 0;
              float v32 = 1.0;
              if (v35) {
                float v33 = -1.0;
              }
              else {
                float v33 = 1.0;
              }
              double v31 = 1.57079633;
            }
            else
            {
              if (v27) {
                float v30 = -1.0;
              }
              else {
                float v30 = 1.0;
              }
              double v31 = dbl_1E259FA30[v28 == 1];
              if (v28 == 1) {
                float v32 = 1.0;
              }
              else {
                float v32 = -1.0;
              }
              if (v28 == 1) {
                float v33 = 1.0;
              }
              else {
                float v33 = v30;
              }
              if (v21)
              {
                if (v7 == 2) {
                  double v34 = -1.57079633;
                }
                else {
                  double v34 = 1.57079633;
                }
                double v31 = v31 + v34;
              }
            }
            *(void *)&long long v36 = -1;
            *((void *)&v36 + 1) = -1;
            *(_OWORD *)&v47.m41 = v36;
            *(_OWORD *)&v47.m43 = v36;
            *(_OWORD *)&v47.m31 = v36;
            *(_OWORD *)&v47.m33 = v36;
            *(_OWORD *)&v47.CGFloat m21 = v36;
            *(_OWORD *)&v47.m23 = v36;
            *(_OWORD *)&v47.CGFloat m11 = v36;
            *(_OWORD *)&v47.CGFloat m13 = v36;
            CATransform3D buf = v44;
            CATransform3DRotate(&v47, &buf, v31, 0.0, 0.0, 1.0);
            CATransform3D m = v47;
            CATransform3DScale(&buf, &m, v32, v33, 1.0);
            CATransform3D v47 = buf;
            CATransform3D v44 = buf;
          }
          else if (v29 == 4)
          {
            CATransform3D buf = v44;
            if (!v7)
            {
              CGAffineTransformMakeRotation((CGAffineTransform *)&m, 1.57079633);
              CATransform3DMakeAffineTransform(&buf, (CGAffineTransform *)&m);
            }
            CATransform3D v44 = buf;
          }
          CATransform3D v45 = v44;
        }
        long long v37 = *(_OWORD *)&v45.m33;
        *(_OWORD *)(v2 + 288) = *(_OWORD *)&v45.m31;
        *(_OWORD *)(v2 + 304) = v37;
        long long v38 = *(_OWORD *)&v45.m43;
        *(_OWORD *)(v2 + 320) = *(_OWORD *)&v45.m41;
        *(_OWORD *)(v2 + 336) = v38;
        long long v39 = *(_OWORD *)&v45.m13;
        *(_OWORD *)(v2 + 224) = *(_OWORD *)&v45.m11;
        *(_OWORD *)(v2 + 240) = v39;
        long long v40 = *(_OWORD *)&v45.m23;
        *(_OWORD *)(v2 + 256) = *(_OWORD *)&v45.m21;
        *(_OWORD *)(v2 + 272) = v40;
        return _VCImageQueue_applyLayerTransforms(v2, a2);
      }
    }
  }
  return result;
}

uint64_t VCAllocatorMultiQueue_Create(const __CFAllocator *a1, uint64_t a2, unsigned int a3, unint64_t *a4, CFAllocatorRef *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  double v23 = 0;
  if (!a3)
  {
    uint64_t v18 = 1768846960;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAllocatorMultiQueue_Create_cold_1();
      }
    }
    goto LABEL_38;
  }
  char v5 = a4;
  if (!a4)
  {
    uint64_t v18 = 1768846960;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAllocatorMultiQueue_Create_cold_2();
      }
    }
    goto LABEL_38;
  }
  if (!a5)
  {
    uint64_t v18 = 1768846960;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAllocatorMultiQueue_Create_cold_3();
      }
    }
    goto LABEL_38;
  }
  LODWORD(v7) = a3;
  CFAllocatorContext v22 = *(CFAllocatorContext *)byte_1F3D3E278;
  int v9 = CFAllocatorAllocate(a1, 48 * a3 + 112, 0);
  if (!v9)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAllocatorMultiQueue_Create_cold_5();
      }
    }
    uint64_t v18 = 1852663149;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAllocatorMultiQueue_Create_cold_4();
      }
    }
LABEL_38:
    uint64_t v10 = 0;
    goto LABEL_39;
  }
  uint64_t v10 = (uint64_t)v9;
  uint64_t v7 = v7;
  __strlcpy_chk();
  double v23 = (CFAllocatorRef *)v10;
  *(void *)(v10 + 16) = v7;
  if (a1) {
    CFAllocatorRef Default = a1;
  }
  else {
    CFAllocatorRef Default = CFAllocatorGetDefault();
  }
  CFTypeRef v12 = CFRetain(Default);
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  *(void *)uint64_t v10 = v12;
  *(_DWORD *)(v10 + 8) = 0;
  *(unsigned char *)(v10 + 104) = 0;
  *(_DWORD *)(v10 + 96) = 0;
  *(_DWORD *)(v10 + 100) = 0;
  while (1)
  {
    unint64_t v15 = *v5;
    if (v14 >= *v5) {
      break;
    }
    uint64_t v16 = v10 + v13;
    long long v24 = 0uLL;
    *(_OWORD *)(v16 + 144) = 0uLL;
    *(_DWORD *)(v16 + 120) = 0;
    *(_DWORD *)(v16 + 124) = 0;
    *(void *)(v16 + 112) = v15;
    *(void *)(v16 + 128) = 0;
    *(unsigned char *)(v16 + 136) = 1;
    ++v5;
    v13 += 48;
    unint64_t v14 = v15;
    if (!--v7)
    {
      v22.info = (void *)v10;
      CFAllocatorRef v17 = CFAllocatorCreate(a1, &v22);
      if (v17)
      {
        uint64_t v18 = 0;
        *a5 = v17;
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCAllocatorMultiQueue_Create_cold_6();
          }
        }
        return 0;
      }
      return v18;
    }
  }
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  int v21 = (os_log_t *)MEMORY[0x1E4F47A50];
  if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR)) {
      VCAllocatorMultiQueue_Create_cold_9();
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR)) {
      VCAllocatorMultiQueue_Create_cold_8();
    }
  }
  uint64_t v18 = 1936683620;
  _VCAllocatorMultiQueue_FinalizeInfo(v10);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR)) {
      VCAllocatorMultiQueue_Create_cold_7();
    }
  }
LABEL_39:
  _VCAllocatorMultiQueue_FinalizeInfo(v10);
  _VCAllocatorMultiQueue_ReleaseInfo(&v23);
  return v18;
}

void sub_1E1EBE780(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CVImageBufferRef _VCAVFoundationCapture_ProcessSampleBufferWithCaptureOutput(CVImageBufferRef result, opaqueCMSampleBuffer *a2, void *a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    char v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "connectionWithMediaType:", *MEMORY[0x1E4F15C18]), "inputPorts"), "firstObject");
    uint64_t v6 = objc_msgSend((id)objc_msgSend(v5, "input"), "device");
    [v5 clock];
    return _VCAVFoundationCapture_ProcessSampleBuffer(v4, a2, 0, 0, v6);
  }
  return result;
}

CVPixelBufferRef VCImageRotationConverterBase_CreateRotatedPixelBuffer(uint64_t a1, CVPixelBufferRef pixelBuffer, int a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CVPixelBufferRef pixelBufferOut = 0;
  if (pixelBuffer)
  {
    if (a1)
    {
      size_t Width = CVPixelBufferGetWidth(pixelBuffer);
      size_t Height = CVPixelBufferGetHeight(pixelBuffer);
      size_t v8 = Height;
      int v9 = *(_DWORD *)(a1 + 56);
      if (v9) {
        size_t v10 = Height;
      }
      else {
        size_t v10 = Width;
      }
      if (v9) {
        size_t v11 = Width;
      }
      else {
        size_t v11 = Height;
      }
      [(id)a1 ensureBufferPoolSupportsOutputWidth:v10 outputHeight:v11];
      CFTypeRef v12 = *(__CVPixelBufferPool **)(a1 + 8);
      if (v12)
      {
        if (*(void *)(a1 + 48))
        {
          if (CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, &pixelBufferOut))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_5();
              }
            }
          }
          else
          {
            uint64_t v13 = (void *)MEMORY[0x1E4F1CFC8];
            if (a3) {
              uint64_t v13 = (void *)MEMORY[0x1E4F1CFD0];
            }
            MEMORY[0x1E4E57710](*(void *)(a1 + 48), *MEMORY[0x1E4F44FF8], *v13);
            int v14 = MEMORY[0x1E4E57720](*(void *)(a1 + 48), pixelBuffer, pixelBufferOut);
            int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
            if (v14)
            {
              if (ErrorLogLevelForModule >= 3)
              {
                uint64_t v30 = VRTraceErrorLogLevelToCSTR();
                double v31 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  size_t v32 = CVPixelBufferGetWidth(pixelBufferOut);
                  size_t v33 = CVPixelBufferGetHeight(pixelBufferOut);
                  *(_DWORD *)CATransform3D buf = 136316930;
                  uint64_t v36 = v30;
                  __int16 v37 = 2080;
                  long long v38 = "VCImageRotationConverterBase_CreateRotatedPixelBuffer";
                  __int16 v39 = 1024;
                  int v40 = 58;
                  __int16 v41 = 1024;
                  *(_DWORD *)uint64_t v42 = v14;
                  *(_WORD *)&v42[4] = 2048;
                  *(void *)&v42[6] = Width;
                  *(_WORD *)&v42[14] = 2048;
                  *(void *)&v42[16] = v8;
                  *(_WORD *)&v42[24] = 2048;
                  *(void *)&v42[26] = v32;
                  *(_WORD *)&v42[34] = 2048;
                  *(void *)&v42[36] = v33;
                  _os_log_error_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_ERROR, " [%s] %s:%d Rotation session error %d. input size (%ldx%ld) output size (%ldx%ld)", buf, 0x4Au);
                }
              }
            }
            else if (ErrorLogLevelForModule >= 8)
            {
              uint64_t v16 = VRTraceErrorLogLevelToCSTR();
              CFAllocatorRef v17 = *MEMORY[0x1E4F47A50];
              uint64_t v18 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                {
                  CVPixelBufferRef v19 = pixelBufferOut;
                  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBufferOut);
                  int v21 = FourccToCStr(PixelFormatType);
                  size_t v22 = CVPixelBufferGetWidth(pixelBufferOut);
                  size_t v23 = CVPixelBufferGetHeight(pixelBufferOut);
                  *(_DWORD *)CATransform3D buf = 136316930;
                  uint64_t v36 = v16;
                  __int16 v37 = 2080;
                  long long v38 = "VCImageRotationConverterBase_CreateRotatedPixelBuffer";
                  __int16 v39 = 1024;
                  int v40 = 59;
                  __int16 v41 = 2048;
                  *(void *)uint64_t v42 = a1;
                  *(_WORD *)&v42[8] = 2048;
                  *(void *)&v42[10] = v19;
                  *(_WORD *)&v42[18] = 2080;
                  *(void *)&v42[20] = v21;
                  *(_WORD *)&v42[28] = 2048;
                  *(void *)&v42[30] = v22;
                  *(_WORD *)&v42[38] = 2048;
                  *(void *)&v42[40] = v23;
                  _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d pointer=%p, newPixelBuffer=%p, formatType=%s, width=%lu, height=%lu", buf, 0x4Eu);
                }
              }
              else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
              {
                CVPixelBufferRef v25 = pixelBufferOut;
                OSType v26 = CVPixelBufferGetPixelFormatType(pixelBufferOut);
                int v27 = FourccToCStr(v26);
                size_t v28 = CVPixelBufferGetWidth(pixelBufferOut);
                size_t v29 = CVPixelBufferGetHeight(pixelBufferOut);
                *(_DWORD *)CATransform3D buf = 136316930;
                uint64_t v36 = v16;
                __int16 v37 = 2080;
                long long v38 = "VCImageRotationConverterBase_CreateRotatedPixelBuffer";
                __int16 v39 = 1024;
                int v40 = 59;
                __int16 v41 = 2048;
                *(void *)uint64_t v42 = a1;
                *(_WORD *)&v42[8] = 2048;
                *(void *)&v42[10] = v25;
                *(_WORD *)&v42[18] = 2080;
                *(void *)&v42[20] = v27;
                *(_WORD *)&v42[28] = 2048;
                *(void *)&v42[30] = v28;
                *(_WORD *)&v42[38] = 2048;
                *(void *)&v42[40] = v29;
                _os_log_debug_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEBUG, " [%s] %s:%d pointer=%p, newPixelBuffer=%p, formatType=%s, width=%lu, height=%lu", buf, 0x4Eu);
              }
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_4();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_1();
    }
  }
  return pixelBufferOut;
}

CVImageBufferRef _VCAVFoundationCapture_ProcessSampleBuffer(CVImageBufferRef result, CMSampleBufferRef sbuf, void *a3, void *a4, void *a5)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  if (sbuf)
  {
    uint64_t v9 = (uint64_t)result;
    result = CMSampleBufferGetImageBuffer(sbuf);
    if (result)
    {
      v99 = a3;
      CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
      int Width = CVPixelBufferGetWidth(ImageBuffer);
      int Height = CVPixelBufferGetHeight(ImageBuffer);
      unint64_t v101 = Height;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        uint64_t v13 = *MEMORY[0x1E4F47A50];
        int v14 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.value) = 136316162;
            *(CMTimeValue *)((char *)&buf.value + 4) = v12;
            LOWORD(buf.flags) = 2080;
            *(void *)((char *)&buf.flags + 2) = "_VCAVFoundationCapture_ProcessSampleBuffer";
            HIWORD(buf.epoch) = 1024;
            int v111 = 1059;
            __int16 v112 = 2048;
            *(void *)&double v113 = Width;
            __int16 v114 = 2048;
            uint64_t v115 = Height;
            _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d width=%lu, height=%lu", (uint8_t *)&buf, 0x30u);
          }
        }
        else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.value) = 136316162;
          *(CMTimeValue *)((char *)&buf.value + 4) = v12;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "_VCAVFoundationCapture_ProcessSampleBuffer";
          HIWORD(buf.epoch) = 1024;
          int v111 = 1059;
          __int16 v112 = 2048;
          *(void *)&double v113 = Width;
          __int16 v114 = 2048;
          uint64_t v115 = Height;
          _os_log_debug_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEBUG, " [%s] %s:%d width=%lu, height=%lu", (uint8_t *)&buf, 0x30u);
        }
      }
      ++*(_DWORD *)(v9 + 292);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        VCVideoUtil_AttachMetadata((const __CFArray *)[a4 metadataObjects], ImageBuffer);
      }
      else
      {
        CFArrayRef v15 = *(const __CFArray **)(v9 + 376);
        CFIndex Count = CFArrayGetCount(v15);
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (Count < 1)
        {
          if (ErrorLogLevelForModule >= 8)
          {
            uint64_t v21 = VRTraceErrorLogLevelToCSTR();
            size_t v22 = *MEMORY[0x1E4F47A50];
            size_t v23 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf.value) = 136315650;
                *(CMTimeValue *)((char *)&buf.value + 4) = v21;
                LOWORD(buf.flags) = 2080;
                *(void *)((char *)&buf.flags + 2) = "_VCAVFoundationCapture_ProcessSampleBuffer";
                HIWORD(buf.epoch) = 1024;
                int v111 = 1080;
                _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d No synchronizer available, No cached meta data, not attaching any meta data to pixel buffer", (uint8_t *)&buf, 0x1Cu);
              }
            }
            else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              _VCAVFoundationCapture_ProcessSampleBuffer_cold_5();
            }
          }
        }
        else
        {
          if (ErrorLogLevelForModule >= 8)
          {
            uint64_t v18 = VRTraceErrorLogLevelToCSTR();
            CVPixelBufferRef v19 = *MEMORY[0x1E4F47A50];
            int64_t v20 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf.value) = 136315650;
                *(CMTimeValue *)((char *)&buf.value + 4) = v18;
                LOWORD(buf.flags) = 2080;
                *(void *)((char *)&buf.flags + 2) = "_VCAVFoundationCapture_ProcessSampleBuffer";
                HIWORD(buf.epoch) = 1024;
                int v111 = 1071;
                _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d No synchronizer available, attempting to attach meta data to pixel buffer for face rec", (uint8_t *)&buf, 0x1Cu);
              }
            }
            else if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              _VCAVFoundationCapture_ProcessSampleBuffer_cold_4();
            }
          }
          CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v15, 0);
          VCVideoUtil_AttachMetadata(ValueAtIndex, ImageBuffer);
          CFArrayRemoveValueAtIndex(v15, 0);
        }
      }
      if (*(unsigned char *)(v9 + 241))
      {
        LOWORD(buf.value) = 255;
        CFNumberRef v25 = CFNumberCreate(*(CFAllocatorRef *)(v9 + 432), kCFNumberSInt16Type, &buf);
        CVBufferSetAttachment(ImageBuffer, @"CaptureMediaPriorirty", v25, kCVAttachmentMode_ShouldPropagate);
        if (v25) {
          CFRelease(v25);
        }
      }
      memset(&v104, 170, sizeof(v104));
      CMSampleBufferGetPresentationTimeStamp(&v104, sbuf);
      if (*(unsigned char *)(v9 + 344))
      {
        *(CMTime *)v116 = v104;
        OSType v26 = CMSampleBufferGetImageBuffer(sbuf);
        CVPixelBufferRef ResizedPixelBuffer = VCImageResizingConverter_CreateResizedPixelBuffer(*(void *)(v9 + 392), v26);
        if (ResizedPixelBuffer)
        {
          size_t v28 = ResizedPixelBuffer;
          size_t v29 = CVPixelBufferGetWidth(v26);
          size_t v30 = CVPixelBufferGetHeight(v26);
          VCVideoUtil_AdjustFaceMetadata(v28, v29, v30);
          CMTime buf = *(CMTime *)v116;
          CMSampleBufferRef SampleBufferWithPixelBuffer = createSampleBufferWithPixelBuffer(v28, (long long *)&buf.value);
          CMPropagateAttachments(sbuf, SampleBufferWithPixelBuffer);
          CVPixelBufferRelease(v28);
          if (SampleBufferWithPixelBuffer)
          {
            size_t v32 = (opaqueCMSampleBuffer *)CFRetain(SampleBufferWithPixelBuffer);
            goto LABEL_43;
          }
        }
        else if (objc_opt_class() == v9)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCAVFoundationCapture_ProcessSampleBuffer_cold_3();
            }
          }
        }
        else
        {
          if (objc_opt_respondsToSelector()) {
            *(double *)&size_t v33 = COERCE_DOUBLE([(id)v9 performSelector:sel_logPrefix]);
          }
          else {
            *(double *)&size_t v33 = COERCE_DOUBLE(&stru_1F3D3E450);
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v34 = VRTraceErrorLogLevelToCSTR();
            BOOL v35 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.value) = 136316162;
              *(CMTimeValue *)((char *)&buf.value + 4) = v34;
              LOWORD(buf.flags) = 2080;
              *(void *)((char *)&buf.flags + 2) = "VCAVFoundationCapture_CopyResizedFrame";
              HIWORD(buf.epoch) = 1024;
              int v111 = 739;
              __int16 v112 = 2112;
              double v113 = *(double *)&v33;
              __int16 v114 = 2048;
              uint64_t v115 = v9;
              _os_log_error_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_ERROR, " [%s] %s:%d %@(%p) newResizedPixelBuffer failed", (uint8_t *)&buf, 0x30u);
            }
          }
        }
      }
      [*(id *)(v9 + 384) ensureBufferPoolSupportsOutputWidth:Width outputHeight:Height];
      uint64_t v36 = *(void *)(v9 + 384);
      CMTime buf = v104;
      size_t v32 = VCImageResizingConverter_CreateResizedSampleBuffer(v36, sbuf, &buf);
LABEL_43:
      CMSampleBufferRef v103 = v32;
      if (v32)
      {
        uint64_t v37 = VCEffectsManager_SharedManager();
        int IsEffectsOn = VCEffectsManager_IsEffectsOn(v37);
        if (*(void *)(v9 + 408) && a5 && *(unsigned char *)(v9 + 225) && [a5 position] == 2)
        {
          BOOL v39 = !VCDefaults_GetBoolValueForKey(@"VPCDisableDuringCenterStage", 0);
          if ((IsEffectsOn | v39)) {
            int v40 = v39 & ~IsEffectsOn;
          }
          else {
            int v40 = *(unsigned char *)(v9 + 228) == 0;
          }
          ++*(_DWORD *)(v9 + 284);
          LOBYTE(v105.value) = 0;
          memset(v116, 170, 24);
          HostTimeClock = CMClockGetHostTimeClock();
          CMClockGetTime((CMTime *)v116, HostTimeClock);
          VCViewpointCorrection_CorrectViewpoint(*(void *)(v9 + 408), v32, (void *)[*(id *)(v9 + 216) activeFormat], v40, (uint64_t)&v105);
          memset(&v108, 170, sizeof(v108));
          uint64_t v42 = CMClockGetHostTimeClock();
          CMClockGetTime(&v108, v42);
          if (LOBYTE(v105.value)) {
            ++*(_DWORD *)(v9 + 288);
          }
          CMTime buf = v108;
          CMTime rhs = *(CMTime *)v116;
          CMTimeSubtract(&time, &buf, &rhs);
          double Seconds = CMTimeGetSeconds(&time);
          float v44 = Seconds + *(float *)(v9 + 364);
          *(float *)(v9 + 364) = v44;
          if (Seconds > 0.0167 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v45 = VRTraceErrorLogLevelToCSTR();
            __int16 v46 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.value) = 136315906;
              *(CMTimeValue *)((char *)&buf.value + 4) = v45;
              LOWORD(buf.flags) = 2080;
              *(void *)((char *)&buf.flags + 2) = "_VCAVFoundationCapture_ProcessViewPointCorrection";
              HIWORD(buf.epoch) = 1024;
              int v111 = 1183;
              __int16 v112 = 2048;
              double v113 = Seconds;
              _os_log_impl(&dword_1E1EA4000, v46, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Viewpoint frame took longer than real time: %f", (uint8_t *)&buf, 0x26u);
            }
          }
        }
        if (IsEffectsOn)
        {
          if (*(unsigned char *)(v9 + 448))
          {
            if (!*(void *)(v9 + 456))
            {
              VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)(v9 + 456));
              VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)(v9 + 472));
            }
            CATransform3D v47 = CMSampleBufferGetImageBuffer(v32);
            int v48 = CVPixelBufferGetWidth(v47);
            int v49 = CVPixelBufferGetHeight(v47);
            if (!VCMediaRecorderUtil_PixelBufferPoolMatchDimensions(*(__CVPixelBufferPool **)(v9 + 464), v48, v49)|| (VCMediaRecorderUtil_PixelBufferPoolMatchDimensions(*(__CVPixelBufferPool **)(v9 + 480), v48, v49) & 1) == 0)
            {
              *(void *)&double v50 = v48;
              uint64_t v51 = v49;
              CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(v9 + 464));
              CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(v9 + 480));
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v52 = VRTraceErrorLogLevelToCSTR();
                Float64 v53 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf.value) = 136316162;
                  *(CMTimeValue *)((char *)&buf.value + 4) = v52;
                  LOWORD(buf.flags) = 2080;
                  *(void *)((char *)&buf.flags + 2) = "_VCAVFoundationCapture_CreateBufferPools";
                  HIWORD(buf.epoch) = 1024;
                  int v111 = 827;
                  __int16 v112 = 2048;
                  double v113 = v50;
                  __int16 v114 = 2048;
                  uint64_t v115 = v51;
                  _os_log_impl(&dword_1E1EA4000, v53, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d width=%zu height=%zu", (uint8_t *)&buf, 0x30u);
                }
              }
              Float64 v54 = objc_opt_new();
              [v54 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F2F0F8]];
              [v54 setObject:@"AVConference:FoundationCapture" forKeyedSubscript:*MEMORY[0x1E4F2F128]];
              __int16 v55 = objc_opt_new();
              uint64_t v56 = [NSNumber numberWithUnsignedLong:*(void *)&v50];
              [v55 setObject:v56 forKeyedSubscript:*MEMORY[0x1E4F24E10]];
              uint64_t v57 = [NSNumber numberWithUnsignedLong:v51];
              [v55 setObject:v57 forKeyedSubscript:*MEMORY[0x1E4F24D08]];
              [v55 setObject:v54 forKeyedSubscript:*MEMORY[0x1E4F24D20]];
              uint64_t v58 = *MEMORY[0x1E4F24D70];
              [v55 setObject:&unk_1F3DC4998 forKeyedSubscript:*MEMORY[0x1E4F24D70]];
              CFAllocatorRef v59 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)v55, (CVPixelBufferPoolRef *)(v9 + 464));
              objc_msgSend(v55, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v9 + 444)), v58);
              CVPixelBufferPoolCreate(v59, 0, (CFDictionaryRef)v55, (CVPixelBufferPoolRef *)(v9 + 480));
            }
            int v60 = *(OpaqueVTPixelTransferSession **)(v9 + 456);
            __int16 v61 = *(__CVPixelBufferPool **)(v9 + 464);
            CMTime buf = v104;
            _VCAVFoundationCapture_ConvertPixelFormat(v60, v61, &v103, (uint64_t)&buf);
            size_t v32 = v103;
          }
          if (VCAVFoundationGetARImageData_onceToken != -1) {
            dispatch_once(&VCAVFoundationGetARImageData_onceToken, &__block_literal_global_5);
          }
          uint32_t v62 = (void *)[objc_alloc((Class)VCAVFoundationGetARImageData_cls) initWithSampleBuffer:v32 captureFramePerSecond:*(int *)(v9 + 272) captureDevice:a5 captureSession:*(void *)(v9 + 176)];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            Float64 v63 = (void *)[v99 depthData];
            if (v63) {
              [v62 setDepthData:v63];
            }
          }
          else
          {
            Float64 v63 = 0;
          }
          if (VCAVFoundationGetARFaceData_onceToken != -1) {
            dispatch_once(&VCAVFoundationGetARFaceData_onceToken, &__block_literal_global_8);
          }
          Float64 v66 = objc_opt_new();
          uint64_t v67 = objc_opt_new();
          [v66 setDetectedFaces:v67];
          [v62 setFaceData:v66];
          CVImageBufferRef v68 = CMSampleBufferGetImageBuffer(v32);
          if (v68)
          {
            int v69 = v68;
            double v70 = (double)(unint64_t)Width;
            double v71 = (double)v101;
            CFRetain(v68);
            memset(&v108, 170, sizeof(v108));
            CMSampleBufferGetPresentationTimeStamp(&v108, v32);
            double v72 = (double)CVPixelBufferGetWidth(v69);
            double v73 = (double)CVPixelBufferGetHeight(v69);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v97 = v69;
              v100 = v63;
              v102 = v62;
              long long v117 = 0u;
              long long v118 = 0u;
              memset(v116, 0, sizeof(v116));
              uint64_t v74 = (void *)[a4 metadataObjects];
              uint64_t v75 = [v74 countByEnumeratingWithState:v116 objects:&buf count:16];
              if (v75)
              {
                uint64_t v76 = v75;
                uint64_t v77 = **(void **)&v116[16];
                uint64_t v78 = *MEMORY[0x1E4F15E48];
                uint64_t v79 = *MEMORY[0x1E4F15E30];
                BOOL v80 = v71 == v73 && v70 == v72;
                v96 = v66;
                while (2)
                {
                  uint64_t v81 = 0;
                  do
                  {
                    if (**(void **)&v116[16] != v77) {
                      objc_enumerationMutation(v74);
                    }
                    double v82 = *(void **)(*(void *)&v116[8] + 8 * v81);
                    if (objc_msgSend((id)objc_msgSend(v82, "type"), "isEqual:", v78))
                    {
                      Float64 v66 = v96;
                      objc_msgSend(v96, "setFaceMeshPayload:", objc_msgSend(v82, "payload"));
                      goto LABEL_108;
                    }
                    if (objc_msgSend((id)objc_msgSend(v82, "type"), "isEqual:", v79))
                    {
                      if (VCGetARHWFaceDetection_onceToken != -1) {
                        dispatch_once(&VCGetARHWFaceDetection_onceToken, &__block_literal_global_11_0);
                      }
                      double v83 = objc_opt_new();
                      objc_msgSend(v83, "setID:", objc_msgSend(v82, "faceID"));
                      int v84 = [v82 hasRollAngle];
                      double v85 = 0.0;
                      if (v84) {
                        objc_msgSend(v82, "rollAngle", 0.0);
                      }
                      [v83 setRollAngleInDegrees:v85];
                      [v82 bounds];
                      if (!v80) {
                        double v86 = VCVideoUtil_AdjustFaceBounds(v86, v87, v88, v89, v70, v71, v72, v73);
                      }
                      [v83 setBoundingBox:v86];
                      [v83 setDetectionOrientation:4];
                      if (v82) {
                        [v82 time];
                      }
                      else {
                        memset(&time, 0, sizeof(time));
                      }
                      CMTime rhs = time;
                      [v83 setTime:&rhs];
                      [v67 addObject:v83];
                    }
                    ++v81;
                  }
                  while (v76 != v81);
                  uint64_t v76 = [v74 countByEnumeratingWithState:v116 objects:&buf count:16];
                  Float64 v66 = v96;
                  if (v76) {
                    continue;
                  }
                  break;
                }
              }
LABEL_108:
              uint32_t v62 = v102;
              Float64 v63 = v100;
              int v69 = v97;
              if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v102, "faceData"), "detectedFaces"), "count"))
              {
                uint64_t v90 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v102, "faceData"), "faceMeshPayload"), "objectForKeyedSubscript:", VCGetCVAFaceTracking_DetectedFacesArray());
                if (VCGetARHWFaceDetection_onceToken != -1) {
                  dispatch_once(&VCGetARHWFaceDetection_onceToken, &__block_literal_global_11_0);
                }
                uint64_t v91 = objc_msgSend((id)VCGetARHWFaceDetection_cls, "faceDetectionFromDictionary:", objc_msgSend(v90, "firstObject"));
                if (v91)
                {
                  uint64_t v109 = v91;
                  uint64_t v92 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v109 count:1];
                }
                else
                {
                  uint64_t v92 = 0;
                }
                objc_msgSend((id)objc_msgSend(v102, "faceData"), "setDetectedFaces:", v92);
              }
            }
            if (v70 != v72 || v71 != v73)
            {
              ((void (*)(uint64_t))sVC_ARAdjustIntrinsicsForViewportSize)([v62 cameraIntrinsics]);
              objc_msgSend(v62, "setCameraIntrinsics:");
            }
            uint64_t v93 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v62 requiringSecureCoding:1 error:0];
            id v94 = +[VCEffectsManager sharedManager];
            v95 = (__CVBuffer *)[v63 depthDataMap];
            CMTime v105 = v108;
            VCEffectsManager_CapturedPixelBuffer((uint64_t)v94, v69, v95, (long long *)&v105.value, v93);
            CVPixelBufferRelease(v69);
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCAVFoundationCapture_ProcessSampleBuffer_cold_2();
            }
          }

          size_t v32 = v103;
          if (!v103) {
            return (CVImageBufferRef)FigSampleBufferRelease();
          }
        }
        else
        {
          memset(&buf, 170, sizeof(buf));
          CMSampleBufferGetPresentationTimeStamp(&buf, v32);
          if (*(unsigned char *)(v9 + 418))
          {
            uint64_t v64 = *(void *)(v9 + 424);
            *(_DWORD *)uint64_t v64 = Width;
            *(_DWORD *)(v64 + 4) = Height;
            *(CMTime *)v116 = buf;
            *(Float64 *)(v64 + 32) = CMTimeGetSeconds((CMTime *)v116);
            *(unsigned char *)(v64 + 8) = 0;
          }
          BOOL v65 = ([(id)v9 captureDevicePosition] & 0xFFFFFFFFFFFFFFFDLL) != 0;
          *(CMTime *)v116 = buf;
          _VCAVFoundationCapture_PushFrameToCaptureServer((_DWORD *)v9, v32, (long long *)v116, v65, 0);
        }
        CFRelease(v32);
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAVFoundationCapture_ProcessSampleBuffer_cold_1();
        }
      }
      return (CVImageBufferRef)FigSampleBufferRelease();
    }
  }
  return result;
}

BOOL VCDefaults_GetBoolValueForKey(const __CFString *a1, BOOL a2)
{
  if (!VRTraceIsInternalOSInstalled()) {
    return a2;
  }

  return _VCDefaults_GetBoolValueForKey(a1, a2, 1);
}

BOOL VCEffectsManager_IsEffectsOn(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  if (a1)
  {
    unint64_t v1 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __VCEffectsManager_IsEffectsOn_block_invoke;
    block[3] = &unk_1E6DB3EB8;
    block[4] = a1;
    void block[5] = &v5;
    dispatch_sync(v1, block);
    BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  }
  else
  {
    BOOL v2 = 0;
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t VCEffectsManager_SharedManager()
{
  if (VCEffectsManager_SharedManager_onceToken != -1) {
    dispatch_once(&VCEffectsManager_SharedManager_onceToken, &__block_literal_global_104);
  }
  return VCEffectsManager_SharedManager__vcEffectsManager;
}

uint64_t VCViewpointCorrection_CorrectViewpoint(uint64_t a1, opaqueCMSampleBuffer *a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v12 = Mutable;
    CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a2);
    CFDictionarySetValue(v12, (const void *)sVC_CVAViewpointCorrection_Image, ImageBuffer);
    *(_DWORD *)CMTime valuePtr = a4;
    CFNumberRef v14 = CFNumberCreate(v10, kCFNumberIntType, valuePtr);
    if (v14)
    {
      CFNumberRef v15 = v14;
      CFDictionarySetValue(v12, (const void *)sVC_CVAViewpointCorrection_EnableCorrection, v14);
      CFRelease(v15);
    }
    CFDataRef v16 = (const __CFData *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F218], 0);
    long long v17 = *(_OWORD *)(MEMORY[0x1E4F14998] + 16);
    *(_OWORD *)CMTime valuePtr = *MEMORY[0x1E4F14998];
    *(_OWORD *)&valuePtr[16] = v17;
    *(_OWORD *)&valuePtr[32] = *(_OWORD *)(MEMORY[0x1E4F14998] + 32);
    if (v16 && (CFDataRef v18 = v16, CFDataGetLength(v16) >= 48))
    {
      v69.location = 0;
      v69.length = 48;
      CFDataGetBytes(v18, v69, valuePtr);
    }
    else
    {
      if ((void *)_VCViewpointCorrection_CreateCameraIntrinsicsArray_format != a3)
      {
        _VCViewpointCorrection_CreateCameraIntrinsicsArray_format = (uint64_t)a3;
        CMVideoDimensions cfa = CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)[a3 formatDescription]);
        [a3 videoFieldOfView];
        long double v20 = tan(v19 * 3.14159265 / 180.0 * 0.5);
        *(float *)&long double v20 = (double)cfa.width / (v20 + v20);
        LODWORD(v21) = 0;
        HIDWORD(v21) = LODWORD(v20);
        DWORD2(_VCViewpointCorrection_CreateCameraIntrinsicsArray_fallbackIntrinsics) = 0;
        *(void *)&_VCViewpointCorrection_CreateCameraIntrinsicsArray_fallbackIntrinsics = LODWORD(v20);
        dword_1EADC89F8 = 0;
        qword_1EADC89F0 = v21;
        DWORD2(xmmword_1EADC8A00) = 1065353216;
        *(float32x2_t *)&xmmword_1EADC8A00 = vadd_f32(vmul_f32(vcvt_f32_s32((int32x2_t)cfa), (float32x2_t)0x3F0000003F000000), (float32x2_t)0xBF000000BF000000);
      }
      *(_OWORD *)CMTime valuePtr = _VCViewpointCorrection_CreateCameraIntrinsicsArray_fallbackIntrinsics;
      *(_OWORD *)&valuePtr[16] = *(_OWORD *)&qword_1EADC89F0;
      *(_OWORD *)&valuePtr[32] = xmmword_1EADC8A00;
    }
    double v62 = *(float *)valuePtr;
    CFNumberRef v22 = CFNumberCreate(v10, kCFNumberCGFloatType, &v62);
    if (!v22)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCViewpointCorrection_CorrectViewpoint_cold_3();
        }
      }
      goto LABEL_37;
    }
    CFNumberRef v23 = v22;
    double v62 = *(float *)&valuePtr[20];
    CFNumberRef v24 = CFNumberCreate(v10, kCFNumberCGFloatType, &v62);
    if (v24)
    {
      CFNumberRef v25 = v24;
      double v62 = *(float *)&valuePtr[32];
      CFNumberRef v26 = CFNumberCreate(v10, kCFNumberCGFloatType, &v62);
      uint64_t v57 = a5;
      uint64_t v58 = a1;
      uint64_t v56 = a2;
      CFNumberRef v53 = v25;
      CFNumberRef cf = v23;
      if (v26)
      {
        double v62 = *(float *)&valuePtr[36];
        CFNumberRef v27 = CFNumberCreate(v10, kCFNumberCGFloatType, &v62);
        double v62 = 0.0;
        CFNumberRef v28 = CFNumberCreate(v10, kCFNumberCGFloatType, &v62);
        if (v28)
        {
          CFNumberRef v29 = v28;
          double v62 = 1.0;
          CFNumberRef v30 = CFNumberCreate(v10, kCFNumberCGFloatType, &v62);
          if (v30)
          {
            CFNumberRef v31 = v30;
            values[0] = v23;
            values[1] = v29;
            values[2] = v26;
            v65[0] = v29;
            v65[1] = v25;
            v65[2] = v27;
            v64[0] = v29;
            v64[1] = v29;
            v64[2] = v30;
            CFArrayRef v32 = CFArrayCreate(v10, (const void **)values, 3, MEMORY[0x1E4F1D510]);
            if (v32)
            {
              CFArrayRef v33 = v32;
              CFArrayRef v34 = CFArrayCreate(v10, (const void **)v65, 3, MEMORY[0x1E4F1D510]);
              if (v34)
              {
                CFArrayRef v35 = v34;
                CFArrayRef v36 = CFArrayCreate(v10, (const void **)v64, 3, MEMORY[0x1E4F1D510]);
                if (v36)
                {
                  CFArrayRef v37 = v36;
                  v63[0] = v33;
                  v63[1] = v35;
                  v63[2] = v36;
                  CFArrayRef v38 = CFArrayCreate(v10, (const void **)v63, 3, MEMORY[0x1E4F1D510]);
                  if (v38)
                  {
                    CFNumberRef v23 = v38;
                  }
                  else
                  {
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        VCViewpointCorrection_CorrectViewpoint_cold_11();
                      }
                    }
                    CFNumberRef v23 = 0;
                  }
                }
                else
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCViewpointCorrection_CorrectViewpoint_cold_10();
                    }
                  }
                  CFNumberRef v23 = 0;
                  CFArrayRef v37 = 0;
                }
              }
              else
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VCViewpointCorrection_CorrectViewpoint_cold_9();
                  }
                }
                CFNumberRef v23 = 0;
                CFArrayRef v37 = 0;
                CFArrayRef v35 = 0;
              }
            }
            else
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VCViewpointCorrection_CorrectViewpoint_cold_8();
                }
              }
              CFNumberRef v23 = 0;
              CFArrayRef v37 = 0;
              CFArrayRef v35 = 0;
              CFArrayRef v33 = 0;
            }
          }
          else
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCViewpointCorrection_CorrectViewpoint_cold_7();
              }
            }
            CFNumberRef v23 = 0;
            CFArrayRef v37 = 0;
            CFArrayRef v35 = 0;
            CFArrayRef v33 = 0;
            CFNumberRef v31 = 0;
          }
        }
        else
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCViewpointCorrection_CorrectViewpoint_cold_6();
            }
          }
          CFNumberRef v23 = 0;
          CFArrayRef v37 = 0;
          CFArrayRef v35 = 0;
          CFArrayRef v33 = 0;
          CFNumberRef v31 = 0;
          CFNumberRef v29 = 0;
        }
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCViewpointCorrection_CorrectViewpoint_cold_5();
          }
        }
        CFNumberRef v23 = 0;
        CFArrayRef v37 = 0;
        CFArrayRef v35 = 0;
        CFArrayRef v33 = 0;
        CFNumberRef v31 = 0;
        CFNumberRef v29 = 0;
        CFNumberRef v27 = 0;
      }
      CFRelease(cf);
      CFRelease(v53);
      if (v26) {
        CFRelease(v26);
      }
      if (v27) {
        CFRelease(v27);
      }
      if (v33) {
        CFRelease(v33);
      }
      a2 = v56;
      if (v35) {
        CFRelease(v35);
      }
      if (v37) {
        CFRelease(v37);
      }
      a5 = v57;
      if (v29) {
        CFRelease(v29);
      }
      a1 = v58;
      if (v31) {
        CFRelease(v31);
      }
      if (!v23) {
        goto LABEL_37;
      }
      CFDictionarySetValue(v12, (const void *)sVC_CVAViewpointCorrection_Intrinsics, v23);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCViewpointCorrection_CorrectViewpoint_cold_4();
      }
    }
    CFRelease(v23);
LABEL_37:
    CFArrayRef CameraExtrinsicsArray = _VCViewpointCorrection_CreateCameraExtrinsicsArray(a2);
    if (CameraExtrinsicsArray)
    {
      CFArrayRef v40 = CameraExtrinsicsArray;
      CFDictionarySetValue(v12, (const void *)sVC_CVAViewpointCorrection_VirtualCameraExtrinsics, CameraExtrinsicsArray);
      CFRelease(v40);
    }
    int v61 = 0;
    CFNumberRef v41 = (const __CFNumber *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F51448], 0);
    if (v41)
    {
      CFNumberGetValue(v41, kCFNumberFloatType, &v61);
      CFNumberRef v42 = CFNumberCreate(v10, kCFNumberFloatType, &v61);
      CFDictionarySetValue(v12, (const void *)sVC_CVAViewpointCorrection_StereographicFisheyeStrength, v42);
      CFRelease(v42);
    }
    memset(&v60, 170, sizeof(v60));
    CMSampleBufferGetPresentationTimeStamp(&v60, a2);
    *(CMTime *)CMTime valuePtr = v60;
    CFDictionaryRef v43 = CMTimeCopyAsDictionary((CMTime *)valuePtr, 0);
    if (v43)
    {
      CFDictionaryRef v44 = v43;
      CFDictionarySetValue(v12, (const void *)sVC_CVAViewpointCorrection_Timestamp, v43);
      CFRelease(v44);
    }
    uint64_t v45 = dispatch_semaphore_create(0);
    value[0] = MEMORY[0x1E4F143A8];
    value[1] = 3221225472;
    value[2] = __VCViewpointCorrection_CorrectViewpoint_block_invoke;
    value[3] = &unk_1E6DB8448;
    value[4] = v45;
    value[5] = a5;
    CFDictionarySetValue(v12, (const void *)sVC_CVAViewpointCorrection_Callback, value);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v46 = VRTraceErrorLogLevelToCSTR();
      CATransform3D v47 = *MEMORY[0x1E4F47A50];
      int v48 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(CMTime *)CMTime valuePtr = v60;
          Float64 Seconds = CMTimeGetSeconds((CMTime *)valuePtr);
          *(_DWORD *)CMTime valuePtr = 136315906;
          *(void *)&valuePtr[4] = v46;
          *(_WORD *)&valuePtr[12] = 2080;
          *(void *)&valuePtr[14] = "VCViewpointCorrection_CorrectViewpoint";
          *(_WORD *)&valuePtr[22] = 1024;
          *(_DWORD *)&valuePtr[24] = 314;
          *(_WORD *)&valuePtr[28] = 2048;
          *(Float64 *)&valuePtr[30] = Seconds;
          _os_log_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Viewpoint Correction for timestamp: %f", valuePtr, 0x26u);
        }
      }
      else if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        *(CMTime *)CMTime valuePtr = v60;
        Float64 v52 = CMTimeGetSeconds((CMTime *)valuePtr);
        *(_DWORD *)CMTime valuePtr = 136315906;
        *(void *)&valuePtr[4] = v46;
        *(_WORD *)&valuePtr[12] = 2080;
        *(void *)&valuePtr[14] = "VCViewpointCorrection_CorrectViewpoint";
        *(_WORD *)&valuePtr[22] = 1024;
        *(_DWORD *)&valuePtr[24] = 314;
        *(_WORD *)&valuePtr[28] = 2048;
        *(Float64 *)&valuePtr[30] = v52;
        _os_log_debug_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Viewpoint Correction for timestamp: %f", valuePtr, 0x26u);
      }
    }
    uint64_t v50 = sVC_CVAViewpointCorrectionProcessFunc(*(void *)(a1 + 8), v12);
    if (v50)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCViewpointCorrection_CorrectViewpoint_cold_2();
        }
      }
    }
    else
    {
      dispatch_semaphore_wait(v45, 0xFFFFFFFFFFFFFFFFLL);
    }
    CFRelease(v12);
    goto LABEL_55;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCViewpointCorrection_CorrectViewpoint_cold_1();
    }
  }
  uint64_t v50 = 0;
  uint64_t v45 = 0;
LABEL_55:
  dispatch_release(v45);
  return v50;
}

CMSampleBufferRef VCImageResizingConverter_CreateResizedSampleBuffer(uint64_t a1, CMSampleBufferRef sbuf, CMTime *a3)
{
  uint64_t v4 = sbuf;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  if (CVPixelBufferGetPixelFormatType(ImageBuffer) != *(_DWORD *)(a1 + 16)
    || CVPixelBufferGetWidth(ImageBuffer) != *(void *)(a1 + 24)
    || CVPixelBufferGetHeight(ImageBuffer) != *(void *)(a1 + 32))
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __VCImageResizingConverter_CreateResizedSampleBuffer_block_invoke;
    v18[3] = &unk_1E6DB6D78;
    v18[4] = a1;
    CMTime buf = *a3;
    return VCImageConverterBase_CreateConvertedSampleBuffer(a1, v4, (uint64_t)&buf, (uint64_t)v18);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    char v8 = *MEMORY[0x1E4F47A50];
    uint64_t v9 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        CFAllocatorRef v10 = FourccToCStr(*(_DWORD *)(a1 + 16));
        uint64_t v11 = *(void *)(a1 + 24);
        uint64_t v12 = *(void *)(a1 + 32);
        LODWORD(buf.value) = 136316930;
        *(CMTimeValue *)((char *)&buf.value + 4) = v7;
        LOWORD(buf.flags) = 2080;
        *(void *)((char *)&buf.flags + 2) = "VCImageResizingConverter_CreateResizedSampleBuffer";
        HIWORD(buf.epoch) = 1024;
        int v21 = 91;
        __int16 v22 = 2048;
        uint64_t v23 = a1;
        __int16 v24 = 2048;
        CFNumberRef v25 = ImageBuffer;
        __int16 v26 = 2080;
        CFNumberRef v27 = v10;
        __int16 v28 = 2048;
        uint64_t v29 = v11;
        __int16 v30 = 2048;
        uint64_t v31 = v12;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Skipping resizing -- input/output sizes are the same; pointer=%p, pixelBuffer=%p, formatType=%s, w"
          "idth=%lu, height=%lu",
          (uint8_t *)&buf,
          0x4Eu);
      }
    }
    else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      CFNumberRef v15 = FourccToCStr(*(_DWORD *)(a1 + 16));
      uint64_t v16 = *(void *)(a1 + 24);
      uint64_t v17 = *(void *)(a1 + 32);
      LODWORD(buf.value) = 136316930;
      *(CMTimeValue *)((char *)&buf.value + 4) = v7;
      LOWORD(buf.flags) = 2080;
      *(void *)((char *)&buf.flags + 2) = "VCImageResizingConverter_CreateResizedSampleBuffer";
      HIWORD(buf.epoch) = 1024;
      int v21 = 91;
      __int16 v22 = 2048;
      uint64_t v23 = a1;
      __int16 v24 = 2048;
      CFNumberRef v25 = ImageBuffer;
      __int16 v26 = 2080;
      CFNumberRef v27 = v15;
      __int16 v28 = 2048;
      uint64_t v29 = v16;
      __int16 v30 = 2048;
      uint64_t v31 = v17;
      _os_log_debug_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Skipping resizing -- input/output sizes are the same; pointer=%p, pixelBuffer=%p, formatType=%s, wid"
        "th=%lu, height=%lu",
        (uint8_t *)&buf,
        0x4Eu);
    }
  }
  CMSampleBufferGetPresentationTimeStamp(&time2, v4);
  CMTime buf = *a3;
  if (CMTimeCompare(&buf, &time2))
  {
    CMTime buf = *a3;
    return _VCImageResizingConverter_CreateSampleBufferWithNewTiming(v4, (uint64_t)&buf);
  }
  if (v4) {
    CFRetain(v4);
  }
  return v4;
}

void VCVideoUtil_AttachMetadata(const __CFArray *a1, __CVBuffer *a2)
{
  valuePtr[1] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoUtil_AttachMetadata_cold_1();
      }
    }
    return;
  }
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoUtil_AttachMetadata_cold_2();
      }
    }
    return;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoUtil_AttachMetadata_cold_3();
      }
    }
    return;
  }
  buffer = a2;
  CFMutableDictionaryRef theDict = Mutable;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    char v8 = 0;
LABEL_28:
    CFMutableDictionaryRef v25 = theDict;
    CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F51480], theDict, kCVAttachmentMode_ShouldPropagate);
    goto LABEL_29;
  }
  CFIndex v7 = Count;
  char v8 = 0;
  CFIndex v9 = 0;
  uint64_t v10 = *MEMORY[0x1E4F15E30];
  uint64_t v11 = *MEMORY[0x1E4F15E48];
  key = (void *)*MEMORY[0x1E4F52700];
  uint64_t v32 = (void *)*MEMORY[0x1E4F52708];
  uint64_t v29 = (void *)*MEMORY[0x1E4F52718];
  __int16 v28 = (void *)*MEMORY[0x1E4F52720];
  uint64_t v31 = (void *)*MEMORY[0x1E4F52710];
  while (1)
  {
    CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, v9);
    if (!objc_msgSend((id)objc_msgSend(ValueAtIndex, "type"), "isEqual:", v10)) {
      break;
    }
    if (!v8)
    {
      CFMutableArrayRef v13 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
      if (!v13)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCVideoUtil_AttachMetadata_cold_4();
          }
        }
        CFMutableDictionaryRef v26 = theDict;
        goto LABEL_31;
      }
      char v8 = v13;
      CFDictionarySetValue(theDict, key, v13);
    }
    CFNumberRef v14 = CFDictionaryCreateMutable(v4, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    valuePtr[0] = [ValueAtIndex faceID];
    CFNumberRef v15 = CFNumberCreate(v4, kCFNumberNSIntegerType, valuePtr);
    if (v15)
    {
      CFNumberRef v16 = v15;
      CFDictionarySetValue(v14, v32, v15);
      CFRelease(v16);
    }
    if ([ValueAtIndex hasRollAngle])
    {
      [ValueAtIndex rollAngle];
      valuePtr[0] = v17;
      CFNumberRef v18 = CFNumberCreate(v4, kCFNumberCGFloatType, valuePtr);
      if (v18)
      {
        CFNumberRef v19 = v18;
        CFDictionarySetValue(v14, v29, v18);
        CFRelease(v19);
      }
    }
    if ([ValueAtIndex hasYawAngle])
    {
      [ValueAtIndex yawAngle];
      valuePtr[0] = v20;
      CFNumberRef v21 = CFNumberCreate(v4, kCFNumberCGFloatType, valuePtr);
      if (v21)
      {
        CFNumberRef v22 = v21;
        CFDictionarySetValue(v14, v28, v21);
        CFRelease(v22);
      }
    }
    [ValueAtIndex bounds];
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v35);
    if (DictionaryRepresentation)
    {
      CFDictionaryRef v24 = DictionaryRepresentation;
      CFDictionaryAddValue(v14, v31, DictionaryRepresentation);
      CFRelease(v24);
    }
    if (v14)
    {
      CFArrayAppendValue(v8, v14);
      CFRelease(v14);
    }
LABEL_25:
    if (v7 == ++v9) {
      goto LABEL_28;
    }
  }
  if (!objc_msgSend((id)objc_msgSend(ValueAtIndex, "type"), "isEqual:", v11)) {
    goto LABEL_25;
  }
  if ([ValueAtIndex payload])
  {
    CFDictionarySetValue(theDict, @"MetadataCVA", (const void *)[ValueAtIndex payload]);
    goto LABEL_25;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 3)
  {
    CFMutableDictionaryRef v25 = theDict;
  }
  else
  {
    VRTraceErrorLogLevelToCSTR();
    CFMutableDictionaryRef v25 = theDict;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoUtil_AttachMetadata_cold_5();
    }
  }
LABEL_29:
  CFRelease(v25);
  if (v8)
  {
    CFMutableDictionaryRef v26 = v8;
LABEL_31:
    CFRelease(v26);
  }
}

char *FourccToCStr(int a1)
{
  unint64_t v1 = FourccToCStr_ix++;
  BOOL v2 = (char *)&FourccToCStr_str + 5 * (v1 % 0xA);
  *BOOL v2 = HIBYTE(a1);
  v2[1] = BYTE2(a1);
  _DWORD v2[2] = BYTE1(a1);
  v2[3] = a1;
  v2[4] = 0;
  return v2;
}

void sub_1E1EC7E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double VCDefaults_GetDoubleValueForKey(const __CFString *a1, double DoubleValue)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = (const __CFString *)CFPreferencesCopyAppValue(a1, @"com.apple.VideoConference");
  if (v4)
  {
    CFStringRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID())
    {
      DoubleValue = CFStringGetDoubleValue(v5);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        char v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 136316162;
          uint64_t v11 = v7;
          __int16 v12 = 2080;
          CFMutableArrayRef v13 = "VCDefaults_GetDoubleValueForKey";
          __int16 v14 = 1024;
          int v15 = 1033;
          __int16 v16 = 2080;
          CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
          __int16 v18 = 2048;
          double v19 = DoubleValue;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d key=%s Value=%.3f", (uint8_t *)&v10, 0x30u);
        }
      }
    }
    CFRelease(v5);
  }
  return DoubleValue;
}

uint64_t AVConferenceServer_ProcessIsAVConferenceServer()
{
  return processIsAVConferenceServer;
}

uint64_t RTCPGetSummaryReportBlock(uint64_t a1, int32x2_t *a2, int a3)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 2147549201;
  CFTypeID v6 = (_DWORD *)CheckInHandleDebug();
  if (!v6) {
    return 2147549186;
  }
  uint64_t v8 = (uint64_t)v6;
  if (v6[47])
  {
    if (v6[1751])
    {
      int v9 = v6[1214];
      int v10 = (v9 - a3) & ~((v9 - a3) >> 31);
      v6[1215] = v10;
      int v11 = v6[1212];
      a2[1].i16[2] = v11;
      unsigned __int16 v12 = v11 + v10 + 1;
      a2[1].i16[3] = v12;
      unsigned int v13 = (unsigned __int16)v11;
      if (~(unsigned __int16)v11 + v12 >= 320) {
        int v14 = 320;
      }
      else {
        int v14 = ~(unsigned __int16)v11 + v12;
      }
      if ((_WORD)v11)
      {
        int v15 = 0;
      }
      else if (v6[179] == 1)
      {
        int v15 = 1;
      }
      else
      {
        int v15 = -1;
      }
      unsigned int v16 = v12;
      int v17 = 0;
      if ((v14 & 0x80000000) == 0)
      {
        int v18 = v14 + 1;
        do
        {
          v11 &= 0x3FFu;
          unsigned int v19 = v6[v11 + 179];
          if (v19) {
            BOOL v20 = v19 >= v13;
          }
          else {
            BOOL v20 = 0;
          }
          if (!v20) {
            ++v17;
          }
          LOWORD(v11) = v11 + 1;
          --v18;
        }
        while (v18);
      }
      uint64_t v21 = v6[1749];
      unsigned int v22 = v6[v21 + 1698];
      if (v22) {
        BOOL v23 = v22 >= v16;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23)
      {
        __int32 v24 = 0;
      }
      else
      {
        __int32 v24 = 0;
        CFMutableDictionaryRef v25 = v6 + 1698;
        do
        {
          v25[v21] = 0;
          ++v24;
          LODWORD(v21) = (*(_DWORD *)(v8 + 6996) + 1) % 0x32u;
          *(_DWORD *)(v8 + 6996) = v21;
          unsigned int v26 = v25[v21];
          if (v26) {
            BOOL v27 = v26 >= v16;
          }
          else {
            BOOL v27 = 1;
          }
        }
        while (!v27);
      }
      a2->i16[0] = 257;
      a2[2].i32[0] = v17 + v15;
      a2[2].i32[1] = v24;
      a2[1].i32[0] = *(_DWORD *)(v8 + 4832);
      a2->i8[2] = 1;
      if (*(_DWORD *)(v8 + 12)) {
        int v28 = 2;
      }
      else {
        int v28 = 1;
      }
      a2->i32[1] = v28;
      unsigned int v29 = *(_DWORD *)(v8 + 4852);
      if ((v9 + 1) % 0x140u == v29)
      {
        _RTCPGetMeanAndStandardDeviationOfJitter(v8, a2, 0, v7);
        unsigned int v30 = 0;
      }
      else
      {
        _RTCPGetMeanAndStandardDeviationOfJitter(v8, a2, v29, v7);
        unsigned int v30 = *(_DWORD *)(v8 + 4852);
      }
      unsigned int v31 = *(_DWORD *)(v8 + 4860);
      if (v31 > 0x13F || (LOBYTE(v32) = -2, v31 - v30 > 0x7FFFFFFE))
      {
        a2[5].i16[1] = 0;
      }
      else
      {
        BOOL v20 = v31 >= v30;
        unsigned int v33 = v31 - v30;
        if (v20)
        {
          int v35 = 0;
          int v36 = 0;
          uint64_t v37 = v30;
          unsigned int v38 = v33 + 1;
          BOOL v39 = (unsigned char *)(v8 + v30 + 6152);
          do
          {
            unsigned int v40 = *v39;
            if (*v39)
            {
              ++v35;
              v36 += v40;
              if (*(unsigned __int8 *)(v8 + 6480) < v40) {
                LOBYTE(v40) = *(unsigned char *)(v8 + 6480);
              }
              *(unsigned char *)(v8 + 6480) = v40;
              unsigned int v41 = *(unsigned __int8 *)(v8 + 6481);
              if (v41 <= *v39) {
                LOBYTE(v41) = *v39;
              }
              *(unsigned char *)(v8 + 6481) = v41;
            }
            ++v39;
            --v38;
          }
          while (v38);
          double v42 = (double)v35;
          int v32 = (int)((double)v36 / (double)v35);
          unsigned int v43 = v33 + 1;
          CFDictionaryRef v44 = (unsigned char *)(v37 + v8 + 6152);
          double v45 = 0.0;
          do
          {
            if (*v44)
            {
              double v45 = v45 + (double)(*v44 - v32) * (double)(*v44 - v32);
              *CFDictionaryRef v44 = 0;
            }
            ++v44;
            --v43;
          }
          while (v43);
          double v34 = v45 / v42;
        }
        else
        {
          double v34 = NAN;
        }
        a2[5].i8[3] = llround(sqrt(v34));
        a2[5].i8[2] = v32;
        a2[5].i16[0] = *(_WORD *)(v8 + 6480);
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v46 = VRTraceErrorLogLevelToCSTR();
        CATransform3D v47 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v48 = a2[1].u16[2];
          int v49 = a2[1].u16[3];
          __int32 v50 = a2[3].i32[0];
          __int32 v51 = a2[3].i32[1];
          __int32 v52 = a2[4].i32[0];
          __int32 v53 = a2[4].i32[1];
          int v54 = a2[5].u8[2];
          int v55 = a2[5].u8[3];
          int v56 = a2[5].u8[0];
          int v57 = a2[5].u8[1];
          __int32 v58 = a2[2].i32[0];
          __int32 v59 = a2[2].i32[1];
          int v60 = *(_DWORD *)(v8 + 704);
          int v69 = 136318978;
          uint64_t v70 = v46;
          __int16 v71 = 2080;
          double v72 = "_RTCPGetSummaryReportBlock";
          __int16 v73 = 1024;
          int v74 = 143;
          __int16 v75 = 1024;
          int v76 = v48;
          __int16 v77 = 1024;
          int v78 = v49;
          __int16 v79 = 1024;
          __int32 v80 = v50;
          __int16 v81 = 1024;
          __int32 v82 = v51;
          __int16 v83 = 1024;
          __int32 v84 = v52;
          __int16 v85 = 1024;
          __int32 v86 = v53;
          __int16 v87 = 1024;
          int v88 = v54;
          __int16 v89 = 1024;
          int v90 = v55;
          __int16 v91 = 1024;
          int v92 = v56;
          __int16 v93 = 1024;
          int v94 = v57;
          __int16 v95 = 1024;
          __int32 v96 = v58;
          __int16 v97 = 1024;
          __int32 v98 = v59;
          __int16 v99 = 1024;
          int v100 = v60;
          _os_log_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTCP XR Summary report Start sequence=%d End sequence=%d minJitter=%d maxJitter=%d meanJitter=%d stdevJitter=%d meanHopLimt=%d devHopLimit=%d minHopLimt=%d maxHopLimit=%d lostPackets=%d duplicatePackets=%d dwPacketsRecv=%d", (uint8_t *)&v69, 0x6Au);
        }
      }
      int v61 = *(_DWORD *)(v8 + 4860);
      *(_DWORD *)(v8 + 4848) += v61 + 1;
      *(_DWORD *)(v8 + 4844) = *(_DWORD *)(v8 + 4840);
      size_t v62 = (*(_DWORD *)(v8 + 4856) - v61) & ~((*(_DWORD *)(v8 + 4856) - v61) >> 31);
      memmove((void *)(v8 + 4872), (const void *)(v8 + 4872 + 4 * (v61 + 1)), 4 * v62);
      Float64 v63 = (void *)(v8 + 6152 + (*(_DWORD *)(v8 + 4860) + 1));
      memcpy((void *)(v8 + 6152), v63, v62);
      bzero(v63, v62);
      uint64_t v5 = 0;
      *(void *)(v8 + 4852) = 0;
      *(void *)(v8 + 6472) = 0x800000007FFFFFFFLL;
      *(_WORD *)(v8 + 6480) = 255;
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v67 = VRTraceErrorLogLevelToCSTR();
      uint64_t v68 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v69 = 136315650;
        uint64_t v70 = v67;
        __int16 v71 = 2080;
        double v72 = "RTCPGetSummaryReportBlock";
        __int16 v73 = 1024;
        int v74 = 154;
        _os_log_impl(&dword_1E1EA4000, v68, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Haven't received any RTP packet yet", (uint8_t *)&v69, 0x1Cu);
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v65 = VRTraceErrorLogLevelToCSTR();
      Float64 v66 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v69 = 136315650;
        uint64_t v70 = v65;
        __int16 v71 = 2080;
        double v72 = "RTCPGetSummaryReportBlock";
        __int16 v73 = 1024;
        int v74 = 153;
        _os_log_impl(&dword_1E1EA4000, v66, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTCP XR is not enabled", (uint8_t *)&v69, 0x1Cu);
      }
    }
    uint64_t v5 = 67;
  }
  CheckOutHandleDebug();
  return v5;
}

int32x2_t _RTCPGetMeanAndStandardDeviationOfJitter(uint64_t a1, int32x2_t *a2, unsigned int a3, int32x2_t result)
{
  unsigned int v4 = *(_DWORD *)(a1 + 4860);
  unsigned int v5 = v4 - a3;
  if (v4 > 0x13F || v5 > 0x7FFFFFFE)
  {
    a2[4] = 0;
  }
  else
  {
    uint64_t v7 = v5 + 1;
    double v8 = 0.0;
    double v9 = 0.0;
    BOOL v10 = v4 >= a3;
    unsigned int v11 = v4 - a3;
    if (v10)
    {
      uint64_t v12 = 0;
      int v13 = *(_DWORD *)(a1 + 6472);
      int v14 = *(_DWORD *)(a1 + 6476);
      int v15 = (int *)(a1 + 4 * a3 + 4872);
      unsigned int v16 = v11 + 1;
      do
      {
        uint64_t v17 = *v15;
        v12 += v17;
        if (v13 >= (int)v17) {
          int v13 = *v15;
        }
        *(_DWORD *)(a1 + 6472) = v13;
        int v19 = *v15++;
        int v18 = v19;
        if (v14 <= v19) {
          int v14 = v18;
        }
        *(_DWORD *)(a1 + 6476) = v14;
        --v16;
      }
      while (v16);
      BOOL v20 = (int *)(a1 + 4 * a3 + 4872);
      unsigned int v21 = v11 + 1;
      double v9 = 0.0;
      uint64_t v22 = v12 / v7;
      do
      {
        int v23 = *v20++;
        double v9 = v9 + (double)(v23 - (int)v22) * (double)(v23 - (int)v22);
        --v21;
      }
      while (v21);
      double v8 = (double)(int)v22;
    }
    double v24 = *(double *)(a1 + 27608);
    a2[4].i32[0] = llround(v24 * v8);
    a2[4].i32[1] = llround(sqrt(v9 / (double)(int)v7) * v24);
    uint64_t v25 = *(void *)(a1 + 6472);
    v26.i64[0] = (int)v25;
    v26.i64[1] = SHIDWORD(v25);
    result = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_s64(v26), v24))));
    a2[3] = result;
  }
  return result;
}

double convertTimeoutToRelativeTimespec(double a1)
{
  return (a1 - (double)(int)a1) * 1000000000.0;
}

uint64_t VCUniqueIDGenerator_GenerateID()
{
  uint64_t result = _VCUniqueIDGenerator_GenerateIDInternal();
  if (!result)
  {
    return _VCUniqueIDGenerator_GenerateIDInternal();
  }
  return result;
}

uint64_t _VCUniqueIDGenerator_GenerateIDInternal()
{
  if (_VCUniqueIDGenerator_GenerateIDInternal_onceToken != -1) {
    dispatch_once(&_VCUniqueIDGenerator_GenerateIDInternal_onceToken, &__block_literal_global);
  }
  pthread_mutex_lock(&generateIDLock);
  currentID += 1 + (((currentID + 1) / 0x7FFFFFFFu) | (((currentID + 1) / 0x7FFFFFFFu) << 31));
  uint64_t v0 = currentID;
  pthread_mutex_unlock(&generateIDLock);
  return v0;
}

uint64_t WRMInitialize(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  uint64_t v3 = (pthread_mutex_t *)(a1 + 128);
  *(_DWORD *)(a1 + 16) = 50;
  *(void *)(a1 + 8) = a2;
  v6.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v6.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v6, 0);
  __darwin_time_t tv_sec = v6.tv_sec;
  srand(v6.tv_sec);
  *(void *)(a1 + 64) = arc4random() | (unint64_t)(tv_sec << 32);
  uint64_t result = pthread_mutex_init(v3, 0);
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t WRMUninitialize(uint64_t result)
{
  if (*(unsigned char *)result)
  {
    unint64_t v1 = (unsigned char *)result;
    uint64_t result = pthread_mutex_destroy((pthread_mutex_t *)(result + 128));
    *unint64_t v1 = 0;
  }
  return result;
}

uint64_t WRMSetReportingCallback(uint64_t result, uint64_t a2, long long *a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*(unsigned char *)result)
    {
      pthread_mutex_lock((pthread_mutex_t *)(result + 128));
      *(void *)(v3 + 96) = a2;
      if (a3)
      {
        long long v6 = *a3;
        *(void *)(v3 + 120) = *((void *)a3 + 2);
        *(_OWORD *)(v3 + 104) = v6;
      }
      return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 128));
    }
  }
  return result;
}

uint64_t WRMSetCallId(uint64_t result, uint64_t a2)
{
  if (result && a2)
  {
    if (*(unsigned char *)result) {
      *(void *)(result + 64) = a2;
    }
  }
  return result;
}

uint64_t WRMIncrementTime(uint64_t result)
{
  if (result) {
    ++*(_DWORD *)(result + 20);
  }
  return result;
}

uint64_t WRMGenerateReport(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *((unsigned int *)a1 + 5);
    if (v3 % *((_DWORD *)a1 + 4)) {
      return 0;
    }
    *(void *)(a2 + 168) = *((void *)a1 + 8);
    *(void *)a2 = v3;
    uint64_t v4 = *((void *)a1 + 32);
    *(void *)&long long v5 = v4;
    *((void *)&v5 + 1) = HIDWORD(v4);
    *(_OWORD *)(a2 + 264) = v5;
    uint64_t v6 = *((unsigned int *)a1 + 14);
    uint64_t v7 = *((unsigned int *)a1 + 15);
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
    uint64_t v8 = v6 - v7;
    uint64_t v9 = *((unsigned int *)a1 + 8);
    uint64_t v10 = *((unsigned int *)a1 + 9);
    *(void *)(a2 + 40) = v8;
    *(void *)(a2 + 48) = v9;
    *(void *)(a2 + 56) = v10;
    *(void *)(a2 + 64) = v9 - v10;
    uint64_t v11 = *((unsigned int *)a1 + 12);
    LODWORD(v8) = *((_DWORD *)a1 + 13);
    LODWORD(v10) = *((_DWORD *)a1 + 48);
    uint64_t v12 = *((unsigned int *)a1 + 49);
    uint64_t v13 = *((unsigned int *)a1 + 11);
    *(void *)(a2 + 72) = *((unsigned int *)a1 + 10);
    *(void *)(a2 + 80) = (unint64_t)((double)v8 * 1000.0 / (double)v10);
    uint64_t v14 = v3 - v13;
    int v15 = 100 * *((_DWORD *)a1 + 22);
    uint64_t v16 = *((void *)a1 + 3);
    *(void *)&long long v5 = v16;
    *((void *)&v5 + 1) = HIDWORD(v16);
    *(_OWORD *)(a2 + 8) = v5;
    uint64_t v17 = *((void *)a1 + 30);
    uint64_t v18 = *((void *)a1 + 31);
    *(void *)&long long v5 = v17;
    *((void *)&v5 + 1) = HIDWORD(v17);
    *(_OWORD *)(a2 + 232) = v5;
    *(void *)&long long v5 = v18;
    *((void *)&v5 + 1) = HIDWORD(v18);
    *(_OWORD *)(a2 + 248) = v5;
    *(void *)(a2 + 96) = (uint64_t)v15 >> 8;
    *(void *)(a2 + 104) = v14;
    *(void *)(a2 + 128) = v14;
    *(void *)(a2 + 136) = v11;
    *(void *)(a2 + 144) = v14;
    *(void *)(a2 + 112) = v12;
    *(void *)(a2 + 120) = ((1000 * v8) >> 4) / v10;
    *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 72);
    uint64_t v2 = 1;
    if (*((_DWORD *)a1 + 50)) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = 2;
    }
    *(void *)(a2 + 176) = v19;
    uint64_t v20 = *(void *)(a1 + 204);
    *(void *)&long long v21 = v20;
    *((void *)&v21 + 1) = HIDWORD(v20);
    *(_OWORD *)(a2 + 184) = v21;
    uint64_t v22 = *(void *)(a1 + 212);
    *(void *)&long long v21 = v22;
    *((void *)&v21 + 1) = HIDWORD(v22);
    *(_OWORD *)(a2 + 200) = v21;
    uint64_t v23 = *((unsigned int *)a1 + 56);
    *(void *)(a2 + 216) = *((_DWORD *)a1 + 55) == 0;
    *(void *)(a2 + 224) = v23;
  }
  return v2;
}

uint64_t WRMSubmitReport(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)result)
    {
      pthread_mutex_lock((pthread_mutex_t *)(result + 128));
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96);
      if (v4)
      {
        uint64_t v6 = *(void *)(v2 + 104);
        long long v5 = *(void (**)(uint64_t))(v2 + 112);
        uint64_t v7 = *(uint64_t (**)(uint64_t))(v2 + 120);
        if (v5 && v6) {
          v5(v6);
        }
        pthread_mutex_unlock((pthread_mutex_t *)(v2 + 128));
        uint64_t result = v4(v6, a2);
        if (v7 && v6)
        {
          return v7(v6);
        }
      }
      else
      {
        return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 128));
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void OUTLINED_FUNCTION_4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x22u);
}

void PowerMeter::PowerMeter(PowerMeter *this)
{
  *(void *)this = 0;
  *((void *)this + 2) = 0x3F789374BC6A7EFALL;
  *((void *)this + 4) = 0x3F90624DD2F1A9FCLL;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 12) = 0;
}

void PowerMeter::SetSampleRate(PowerMeter *this, double a2)
{
  *(double *)this = a2;
  *((long double *)this + 1) = CalcDecayConstant(2.5, a2);
  *((long double *)this + 3) = CalcDecayConstant(1.24, a2);
}

BOOL VCMediaNegotiationBlobMultiwayVideoStreamReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__ssrc;
    uint64_t v8 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v9 = 0x1EADBA000uLL;
    uint64_t v10 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__maxNetworkBitrate;
    uint64_t v11 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__payload;
    uint64_t v12 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__streamID;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *v3;
        unint64_t v17 = *(void *)(a2 + v16);
        if (v17 == -1 || v17 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + *v8) + v17);
        *(void *)(a2 + v16) = v17 + 1;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        if (v14++ >= 9)
        {
          unint64_t v15 = 0;
          int v20 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v20 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            uint64_t v25 = *v3;
            unint64_t v26 = *(void *)(a2 + v25);
            if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = v7;
              goto LABEL_125;
            }
            char v27 = *(unsigned char *)(*(void *)(a2 + *v8) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if ((v27 & 0x80) == 0) {
              break;
            }
            int v28 = 0;
            v22 += 7;
            unsigned int v29 = v7;
            BOOL v30 = v23++ > 8;
            if (v30) {
              goto LABEL_129;
            }
          }
          unsigned int v29 = v7;
          goto LABEL_126;
        case 2u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + *(int *)(v9 + 2208)) |= 2u;
          while (2)
          {
            uint64_t v39 = *v3;
            unint64_t v40 = *(void *)(a2 + v39);
            if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = v10;
              goto LABEL_125;
            }
            char v41 = *(unsigned char *)(*(void *)(a2 + *v8) + v40);
            *(void *)(a2 + v39) = v40 + 1;
            v24 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              int v28 = 0;
              v37 += 7;
              unsigned int v29 = v10;
              BOOL v30 = v38++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = v10;
          goto LABEL_126;
        case 3u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v24 = 0;
          while (2)
          {
            uint64_t v44 = *v3;
            unint64_t v45 = *(void *)(a2 + v44);
            if (v45 == -1 || v45 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = v11;
              goto LABEL_125;
            }
            char v46 = *(unsigned char *)(*(void *)(a2 + *v8) + v45);
            *(void *)(a2 + v44) = v45 + 1;
            v24 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              int v28 = 0;
              v42 += 7;
              unsigned int v29 = v11;
              BOOL v30 = v43++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = v11;
          goto LABEL_126;
        case 4u:
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v24 = 0;
          while (2)
          {
            uint64_t v49 = *v3;
            unint64_t v50 = *(void *)(a2 + v49);
            if (v50 == -1 || v50 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = v12;
              goto LABEL_125;
            }
            char v51 = *(unsigned char *)(*(void *)(a2 + *v8) + v50);
            *(void *)(a2 + v49) = v50 + 1;
            v24 |= (unint64_t)(v51 & 0x7F) << v47;
            if (v51 < 0)
            {
              int v28 = 0;
              v47 += 7;
              unsigned int v29 = v12;
              BOOL v30 = v48++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = v12;
          goto LABEL_126;
        case 5u:
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + *(int *)(v9 + 2208)) |= 8u;
          while (2)
          {
            uint64_t v54 = *v3;
            unint64_t v55 = *(void *)(a2 + v54);
            if (v55 == -1 || v55 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__metadata;
              goto LABEL_125;
            }
            char v56 = *(unsigned char *)(*(void *)(a2 + *v8) + v55);
            *(void *)(a2 + v54) = v55 + 1;
            v24 |= (unint64_t)(v56 & 0x7F) << v52;
            if (v56 < 0)
            {
              int v28 = 0;
              v52 += 7;
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__metadata;
              BOOL v30 = v53++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__metadata;
          goto LABEL_126;
        case 6u:
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v24 = 0;
          while (2)
          {
            uint64_t v59 = *v3;
            unint64_t v60 = *(void *)(a2 + v59);
            if (v60 == -1 || v60 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__qualityIndex;
              goto LABEL_125;
            }
            char v61 = *(unsigned char *)(*(void *)(a2 + *v8) + v60);
            *(void *)(a2 + v59) = v60 + 1;
            v24 |= (unint64_t)(v61 & 0x7F) << v57;
            if (v61 < 0)
            {
              int v28 = 0;
              v57 += 7;
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__qualityIndex;
              BOOL v30 = v58++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__qualityIndex;
          goto LABEL_126;
        case 7u:
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v24 = 0;
          while (2)
          {
            uint64_t v64 = *v3;
            unint64_t v65 = *(void *)(a2 + v64);
            if (v65 == -1 || v65 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__supportedVideoFormats;
              goto LABEL_125;
            }
            char v66 = *(unsigned char *)(*(void *)(a2 + *v8) + v65);
            *(void *)(a2 + v64) = v65 + 1;
            v24 |= (unint64_t)(v66 & 0x7F) << v62;
            if (v66 < 0)
            {
              int v28 = 0;
              v62 += 7;
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__supportedVideoFormats;
              BOOL v30 = v63++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__supportedVideoFormats;
          goto LABEL_126;
        case 8u:
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v24 = 0;
          while (2)
          {
            uint64_t v69 = *v3;
            unint64_t v70 = *(void *)(a2 + v69);
            if (v70 == -1 || v70 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__frameRate;
              goto LABEL_125;
            }
            char v71 = *(unsigned char *)(*(void *)(a2 + *v8) + v70);
            *(void *)(a2 + v69) = v70 + 1;
            v24 |= (unint64_t)(v71 & 0x7F) << v67;
            if (v71 < 0)
            {
              int v28 = 0;
              v67 += 7;
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__frameRate;
              BOOL v30 = v68++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__frameRate;
          goto LABEL_126;
        case 9u:
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v24 = 0;
          while (2)
          {
            uint64_t v74 = *v3;
            unint64_t v75 = *(void *)(a2 + v74);
            if (v75 == -1 || v75 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__keyFrameInterval;
              goto LABEL_125;
            }
            char v76 = *(unsigned char *)(*(void *)(a2 + *v8) + v75);
            *(void *)(a2 + v74) = v75 + 1;
            v24 |= (unint64_t)(v76 & 0x7F) << v72;
            if (v76 < 0)
            {
              int v28 = 0;
              v72 += 7;
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__keyFrameInterval;
              BOOL v30 = v73++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__keyFrameInterval;
          goto LABEL_126;
        case 0xAu:
          char v77 = 0;
          unsigned int v78 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + *(int *)(v9 + 2208)) |= 1u;
          while (2)
          {
            uint64_t v79 = *v3;
            unint64_t v80 = *(void *)(a2 + v79);
            if (v80 == -1 || v80 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__maxMediaBitrate;
              goto LABEL_125;
            }
            char v81 = *(unsigned char *)(*(void *)(a2 + *v8) + v80);
            *(void *)(a2 + v79) = v80 + 1;
            v24 |= (unint64_t)(v81 & 0x7F) << v77;
            if (v81 < 0)
            {
              int v28 = 0;
              v77 += 7;
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__maxMediaBitrate;
              BOOL v30 = v78++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__maxMediaBitrate;
          goto LABEL_126;
        case 0xBu:
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + *(int *)(v9 + 2208)) |= 4u;
          while (2)
          {
            uint64_t v84 = *v3;
            unint64_t v85 = *(void *)(a2 + v84);
            if (v85 == -1 || v85 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__maxPacketsPerSecond;
              goto LABEL_125;
            }
            char v86 = *(unsigned char *)(*(void *)(a2 + *v8) + v85);
            *(void *)(a2 + v84) = v85 + 1;
            v24 |= (unint64_t)(v86 & 0x7F) << v82;
            if (v86 < 0)
            {
              int v28 = 0;
              v82 += 7;
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__maxPacketsPerSecond;
              BOOL v30 = v83++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__maxPacketsPerSecond;
          goto LABEL_126;
        case 0xCu:
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + *(int *)(v9 + 2208)) |= 0x20u;
          while (2)
          {
            uint64_t v89 = *v3;
            unint64_t v90 = *(void *)(a2 + v89);
            if (v90 == -1 || v90 >= *(void *)(a2 + *v4))
            {
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__repairedStreamID;
              goto LABEL_125;
            }
            char v91 = *(unsigned char *)(*(void *)(a2 + *v8) + v90);
            *(void *)(a2 + v89) = v90 + 1;
            v24 |= (unint64_t)(v91 & 0x7F) << v87;
            if (v91 < 0)
            {
              int v28 = 0;
              v87 += 7;
              unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__repairedStreamID;
              BOOL v30 = v88++ > 8;
              if (v30) {
                goto LABEL_129;
              }
              continue;
            }
            break;
          }
          unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__repairedStreamID;
          goto LABEL_126;
        case 0xDu:
          char v92 = 0;
          unsigned int v93 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + *(int *)(v9 + 2208)) |= 0x10u;
          break;
        default:
          unsigned int v31 = v7;
          unint64_t v32 = v9;
          unsigned int v33 = v10;
          double v34 = v11;
          int v35 = v12;
          uint64_t v98 = a1;
          char v36 = PBReaderSkipValueWithTag();
          a1 = v98;
          uint64_t v12 = v35;
          long long v5 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v11 = v34;
          uint64_t v10 = v33;
          unint64_t v9 = v32;
          uint64_t v7 = v31;
          if (v36) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v94 = *v3;
        unint64_t v95 = *(void *)(a2 + v94);
        if (v95 == -1 || v95 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v96 = *(unsigned char *)(*(void *)(a2 + *v8) + v95);
        *(void *)(a2 + v94) = v95 + 1;
        v24 |= (unint64_t)(v96 & 0x7F) << v92;
        if ((v96 & 0x80) == 0)
        {
          unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__repairedMaxNetworkBitrate;
          goto LABEL_126;
        }
        int v28 = 0;
        v92 += 7;
        unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__repairedMaxNetworkBitrate;
        BOOL v30 = v93++ > 8;
        if (v30) {
          goto LABEL_129;
        }
      }
      unsigned int v29 = &OBJC_IVAR___VCMediaNegotiationBlobMultiwayVideoStream__repairedMaxNetworkBitrate;
LABEL_125:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_126:
      int v28 = *(unsigned char *)(a2 + *v5) ? 0 : v24;
LABEL_129:
      *(_DWORD *)(a1 + *v29) = v28;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void VCAudioManager_PullAudioSamples(uint64_t a1, uint64_t a2)
{
  v43[2] = *MEMORY[0x1E4F143B8];
  int v41 = *(_DWORD *)(a1 + 104);
  *(void *)(a1 + 112) = 0;
  _VCAudioManager_ProcessEventQueue(a1);
  VCAudioBufferList_InvalidateStats(a2);
  v43[0] = 0xAAAAAAAAAAAAAAAALL;
  v43[1] = 0xAAAAAAAAAAAAAAAALL;
  AudioBufferList = (unsigned int *)VCAudioBufferList_GetAudioBufferList(a2);
  VCAudioIOControllerIOState_GetControllerTimestamp(a2, a1, (uint64_t)v43);
  ChannelCFIndex Count = VCAudioBufferList_GetChannelCount(a2);
  double HostTime = VCAudioBufferList_GetHostTime(a2);
  SampleCFIndex Count = VCAudioBufferList_GetSampleCount(a2);
  int Timestamp = VCAudioBufferList_GetTimestamp(a2);
  int v7 = VCAudioBufferList_GetChannelCount(*(void *)(a1 + 88));
  uint64_t v8 = *(void **)(a1 + 40);
  unsigned int v38 = (uint64_t *)a1;
  uint64_t v35 = a2;
  if (v8)
  {
    BOOL v34 = 0;
    BOOL v9 = 0;
    unsigned int v42 = 0;
    uint64_t v10 = (uint64_t *)(a1 + 96);
    if (v7 == ChannelCount) {
      uint64_t v10 = (uint64_t *)(a1 + 88);
    }
    uint64_t v36 = a2;
    char v37 = v10;
    float v11 = 0.0;
    uint64_t v12 = a2;
    while (1)
    {
      uint64_t v13 = v8[1];
      unsigned int v14 = VCAudioBufferList_GetChannelCount(*(void *)(v13 + 40));
      unsigned int v15 = v14;
      BOOL v17 = *(_DWORD *)(v13 + 24) == v41 || ChannelCount == v14;
      VCAudioBufferList_Reset(*(void *)(v13 + 40));
      uint64_t v18 = *(void *)(v13 + 40);
      if (!v17) {
        goto LABEL_23;
      }
      int v19 = *(_DWORD *)(v13 + 28);
      uint64_t v20 = 1 << v19;
      if (ChannelCount == v15)
      {
        BOOL v9 = v12 != v35;
        uint64_t v21 = *v37;
        BOOL v34 = v12 != v35;
      }
      else
      {
        if (!(v19 + v15)) {
          goto LABEL_21;
        }
        uint64_t v22 = VCAudioBufferList_GetAudioBufferList(*(void *)(v13 + 40));
        if (v15)
        {
          int v23 = *(_DWORD *)(v13 + 28);
          uint64_t v24 = v15;
          uint64_t v25 = (void *)(v22 + 16);
          do
          {
            *uint64_t v25 = *(void *)&AudioBufferList[4 * v23 + 4];
            v25 += 2;
            ++v23;
            --v24;
          }
          while (v24);
        }
        if ((v38[14] & v20) == 0)
        {
          BOOL v9 = 0;
LABEL_21:
          uint64_t v21 = v12;
          uint64_t v12 = v18;
          goto LABEL_22;
        }
        uint64_t v21 = v12;
        uint64_t v12 = *v37;
        uint64_t v36 = *(void *)(v13 + 40);
        BOOL v9 = 1;
      }
LABEL_22:
      uint64_t v18 = v12;
      v38[14] |= v20;
      ++v42;
      uint64_t v12 = v21;
LABEL_23:
      VCAudioBufferList_SetTime(v18, Timestamp, HostTime);
      VCAudioBufferList_SetSampleCount(v18, SampleCount);
      VCAudioBufferList_InvalidateNetworkTimestamp(v18);
      (*(void (**)(void, void *, uint64_t))(v13 + 8))(*(void *)v13, v43, v18);
      if (v17)
      {
        float v11 = v11 + VCAudioBufferList_GetAveragePower(v18);
        if (v9) {
          VCAudioBufferList_Mix(v36, v18);
        }
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_29;
      }
    }
  }
  unsigned int v42 = 0;
  BOOL v34 = 0;
  float v11 = 0.0;
LABEL_29:
  uint64_t v26 = v38[14];
  uint64_t v27 = v38[15];
  unint64_t v28 = v27 & ~v26;
  if (v28)
  {
    unsigned int v29 = (void **)(AudioBufferList + 4);
    uint64_t v30 = -1;
    uint64_t v31 = v35;
    do
    {
      if (++v30 >= (unint64_t)*AudioBufferList) {
        break;
      }
      if (v28) {
        bzero(*v29, *((unsigned int *)v29 - 1));
      }
      v29 += 2;
      BOOL v32 = v28 >= 2;
      v28 >>= 1;
    }
    while (v32);
    uint64_t v26 = v38[14];
    uint64_t v27 = v38[15];
  }
  else
  {
    uint64_t v31 = v35;
  }
  v38[15] = v26 | v27;
  if (v34) {
    VCAudioLimiter_Process(v38[10], v31);
  }
  if (v42) {
    float v33 = v11 / (float)v42;
  }
  else {
    float v33 = -120.0;
  }
  VCAudioBufferList_SetAveragePower(v31, v33);
}

void _VCAudioManager_ProcessEventQueue(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  double v2 = 0.0;
  if (VRTraceIsInternalOSInstalled()) {
    double v2 = micro();
  }
  uint64_t v3 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 72));
  if (v3)
  {
    float v11 = v3;
    int v12 = 0;
    while (1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        unsigned int v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = v11[1];
          int v16 = *((_DWORD *)v11 + 4);
          *(_DWORD *)CMTime buf = 136316674;
          uint64_t v19 = v13;
          __int16 v20 = 2080;
          uint64_t v21 = "_VCAudioManager_ProcessEventQueue";
          __int16 v22 = 1024;
          int v23 = 144;
          __int16 v24 = 2080;
          uint64_t v25 = a1 + 128;
          __int16 v26 = 2048;
          uint64_t v27 = a1;
          __int16 v28 = 2048;
          uint64_t v29 = v15;
          __int16 v30 = 1024;
          int v31 = v16;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %sProcess event: controllerIO=%p clientIO=%p type=%d", buf, 0x40u);
        }
      }
      int v17 = *((_DWORD *)v11 + 4);
      if (v17 == 2) {
        goto LABEL_13;
      }
      if (v17 == 1) {
        break;
      }
      if (!v17)
      {
        _VCAudioManager_RegisterClientIO(a1, v11);
LABEL_13:
        _VCAudioManager_CheckVoiceDetectorEnabled(a1);
      }
      float v11 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 72));
      ++v12;
      if (!v11) {
        goto LABEL_15;
      }
    }
    _VCAudioManager_UnregisterClientIO(a1, (uint64_t)v11);
    goto LABEL_13;
  }
LABEL_15:
  LogProfileTimeOverLimit(v2, 0, v4, v5, v6, v7, v8, v9, v10, (char)"_VCAudioManager_ProcessEventQueue");
}

void VCAudioManager_PushAudioSamples(uint64_t a1, uint64_t a2)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  _VCAudioManager_ProcessEventQueue(a1);
  v11[0] = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = 0xAAAAAAAAAAAAAAAALL;
  VCAudioIOControllerIOState_GetControllerTimestamp(a2, a1, (uint64_t)v11);
  if (!*(void *)(a1 + 192)) {
    goto LABEL_10;
  }
  double HostTime = VCAudioBufferList_GetHostTime(a2);
  if (*(unsigned char *)(a1 + 184))
  {
    double v5 = HostTime;
    if (HostTime - *(double *)(a1 + 176) <= 1.0)
    {
      unsigned int v6 = *(unsigned __int8 *)(a1 + 185);
    }
    else
    {
      unsigned int v6 = [+[VCDefaults sharedInstance] forceAudioPriorityValue];
      *(unsigned char *)(a1 + 185) = v6;
      *(double *)(a1 + 176) = v5;
      if (!*(unsigned char *)(a1 + 184)) {
        goto LABEL_5;
      }
    }
    BOOL v7 = v6 > 1;
    VCAudioBufferList_SetPriority(a2, v6);
    VCAudioBufferList_SetVoiceActivity(a2, v7);
    LOBYTE(v8) = *(unsigned char *)(a1 + 185);
    VCAudioBufferList_SetVoiceProbability(a2, (double)v8 / 255.0);
    goto LABEL_10;
  }
LABEL_5:
  if (!VCAudioBufferList_GetPriority(a2))
  {
    if (*(unsigned char *)(a1 + 170))
    {
      VCVoiceDetector_ProcessSampleBuffer(*(void **)(a1 + 192), a2, *(unsigned char *)(a1 + 168));
    }
    else
    {
      if (VCAudioBufferList_GetVoiceActivity(a2)) {
        char v10 = 0x80;
      }
      else {
        char v10 = 1;
      }
      VCAudioBufferList_SetPriority(a2, v10);
    }
  }
LABEL_10:
  for (uint64_t i = *(void **)(a1 + 40); i; uint64_t i = (void *)*i)
    (*(void (**)(void, void *, uint64_t))(i[1] + 8))(*(void *)i[1], v11, a2);
}

void VCAudioManager_InputDeviceSelectionCallback(void *a1, uint64_t a2)
{
  id v4 = +[AVAudioDeviceList deviceForDeviceID:a2];
  id v3 = v4;
  [a1 updateCurrentInputDevice:v4];
}

void VCAudioManager_OutputDeviceSelectionCallback(void *a1, uint64_t a2)
{
  id v4 = +[AVAudioDeviceList deviceForDeviceID:a2];
  id v3 = v4;
  [a1 updateCurrentOutputDevice:v4];
}

uint64_t _VCAudioManger_CompareControllerEntries(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v2 == v3;
  unsigned int v5 = 2 * (v2 >= v3);
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

void VCAudioManager_ReleaseAudioEvent(uint64_t *a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      *a1 = 0;
      if (*(void *)(v2 + 8))
      {
        if (a2) {
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 24));
        }
        dispatch_release(*(dispatch_object_t *)(v2 + 24));
      }
      free((void *)v2);
    }
  }
}

void LogProfileTimeOverLimit(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (VRTraceIsInternalOSInstalled())
  {
    double v11 = micro() - a1;
    if (v11 > 0.00300000003)
    {
      *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v39 = v12;
      long long v40 = v12;
      long long v37 = v12;
      long long v38 = v12;
      long long v35 = v12;
      long long v36 = v12;
      long long v33 = v12;
      long long v34 = v12;
      long long v31 = v12;
      long long v32 = v12;
      long long v30 = v12;
      long long v28 = v12;
      long long v29 = v12;
      long long v26 = v12;
      long long v27 = v12;
      *(_OWORD *)__str = v12;
      vsnprintf(__str, 0x100uLL, "%s: Iterations=%d", &a10);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        unsigned int v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v16 = v13;
          __int16 v17 = 2080;
          uint64_t v18 = "_LogProfileTimeLimitHelper";
          __int16 v19 = 1024;
          int v20 = 36;
          __int16 v21 = 2080;
          __int16 v22 = __str;
          __int16 v23 = 2048;
          double v24 = v11;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

_DWORD *VCAudioManager_NewAudioEvent(int a1, uint64_t a2)
{
  BOOL v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A00405C5CD52DuLL);
  unsigned int v5 = v4;
  v4[4] = a1;
  if (a2)
  {
    *((void *)v4 + 1) = a2;
    unsigned int v6 = *(NSObject **)(a2 + 16);
    *((void *)v5 + 3) = v6;
    dispatch_retain(v6);
  }
  return v5;
}

void _VCAudioManager_RegisterClientIO(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  BOOL v7 = a2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    unsigned int v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a2[1];
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v9 = v4;
      __int16 v10 = 2080;
      double v11 = "_VCAudioManager_RegisterClientIO";
      __int16 v12 = 1024;
      int v13 = 131;
      __int16 v14 = 2080;
      uint64_t v15 = a1 + 128;
      __int16 v16 = 2048;
      uint64_t v17 = v6;
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %sRegistering clientIO[%p]", buf, 0x30u);
    }
  }
  if ((VCSingleLinkedListPush(a1 + 40, a2) & 1) == 0) {
    VCAudioManager_ReleaseAudioEvent((uint64_t *)&v7, 0);
  }
}

void _VCAudioManager_UnregisterClientIO(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    unsigned int v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v4;
      __int16 v9 = 2080;
      __int16 v10 = "_VCAudioManager_UnregisterClientIO";
      __int16 v11 = 1024;
      int v12 = 121;
      __int16 v13 = 2080;
      uint64_t v14 = a1 + 128;
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %sUnregistering clientIO[%p]", buf, 0x30u);
    }
  }
  *(void *)CMTime buf = VCSingleLinkedListRemove(a1 + 40, a2);
  if (*(void *)buf) {
    VCAudioManager_ReleaseAudioEvent((uint64_t *)buf, 0);
  }
  VCAudioManager_ReleaseAudioEvent(&v7, 1);
}

uint64_t _VCAudioManager_CheckVoiceDetectorEnabled(uint64_t result)
{
  unint64_t v1 = *(void **)(result + 40);
  if (v1)
  {
    BOOL v2 = 0;
    BOOL v3 = 0;
    while (1)
    {
      uint64_t v4 = v1[1];
      if (v2)
      {
        BOOL v2 = 1;
        if (v3) {
          goto LABEL_7;
        }
      }
      else
      {
        BOOL v2 = *(unsigned char *)(v4 + 48) != 0;
        if (v3)
        {
LABEL_7:
          BOOL v3 = 1;
          goto LABEL_8;
        }
      }
      BOOL v3 = *(unsigned char *)(v4 + 49) != 0;
LABEL_8:
      unint64_t v1 = (void *)*v1;
      if (!v1) {
        goto LABEL_11;
      }
    }
  }
  BOOL v3 = 0;
  BOOL v2 = 0;
LABEL_11:
  *(unsigned char *)(result + 169) = v2;
  *(unsigned char *)(result + 170) = v3;
  return result;
}

void OUTLINED_FUNCTION_10(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x26u);
}

uint64_t _AVCRateController_ConfigureInternal(uint64_t a1, int *a2)
{
  uint64_t v433 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (int *)(a1 + 56);
  int v4 = *(_DWORD *)(a1 + 56);
  uint64_t v6 = *(void **)(a1 + 24);
  int v7 = *a2;
  if (v4 != *a2)
  {
    *(_DWORD *)(a1 + 56) = v7;
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8 && (v7 - 1) <= 2) {
      VCRateControlMediaController_SetAudioOnly(v8, (v7 - 1) & 1);
    }
    if ((!*(void *)(a1 + 1288) || !*(void *)(a1 + 1296)) && *(unsigned char *)(a1 + 1328))
    {
      int v9 = *(_DWORD *)(a1 + 56);
      __int16 v10 = "VCRateControl";
      if (v9 == 5) {
        __int16 v10 = "VCRC-DL";
      }
      if (v9 == 4) {
        __int16 v11 = "VCRC-UL";
      }
      else {
        __int16 v11 = v10;
      }
      int v12 = VRLogfileAlloc(0, [*(id *)(a1 + 1336) UTF8String], (uint64_t)v11, (uint64_t)".afrcdump", "com.apple.VideoConference.VCRClog", 9);
      *(void *)(a1 + 1288) = v12;
      VRLogfilePrintSync(v12, "STime\t\tdTime/ETxTS\tOWRD\tNOWRD\tNOWRDS\tNOWRDA\tUp\tRTT\tPLR/FEC\tRRx\tMBL\tLRx\tBR/TR\tMQIn: A/V\tMQOut: A/V\tABRL\tQD\tBDL\tTxAT\tMODE\tTxSTATE\tLBAWall\tWallConf\tBadTrend\tECNRate\tSBProb\tSBBW\tSBBWE\n", v13, v14, v15, v16, v17, v18, v323);
      __int16 v19 = VRLogfileAlloc(0, [*(id *)(a1 + 1336) UTF8String], (uint64_t)v11, (uint64_t)".fbdump", "com.apple.VideoConference.VCRClogFB", 9);
      *(void *)(a1 + 1296) = v19;
      unsigned int v26 = *(_DWORD *)(a1 + 56) - 1;
      if (v26 <= 8 && ((0x1DFu >> v26) & 1) != 0) {
        VRLogfilePrintSync(v19, off_1E6DB4060[v26], v20, v21, v22, v23, v24, v25, v324);
      }
    }
    if (!*(void *)(a1 + 1320))
    {
      if (*(unsigned char *)(a1 + 1329) && (*v5 | 2) == 3)
      {
        long long v27 = VRLogfileAlloc(0, [*(id *)(a1 + 1336) UTF8String], (uint64_t)"VCRateControl", (uint64_t)".bwedump", "com.apple.VideoConference.VCRClog", 9);
        *(void *)(a1 + 1320) = v27;
      }
      else
      {
        long long v27 = 0;
      }
      VCRateControlMediaController_EnableBWELogDump(*(void *)(a1 + 48), (uint64_t)v27);
      VCStatisticsCollector_EnableBWELogDump(*(void *)(a1 + 24), *(void *)(a1 + 1320));
    }
    VCStatisticsCollector_SetMode((uint64_t)v6, *(unsigned int *)(a1 + 56));
    VCRateControlFeedbackController_SetMode(*(void *)(a1 + 1824), *(_DWORD *)(a1 + 56));
    uint64_t v28 = *(void *)(a1 + 1832);
    if (v28) {
      VCBasebandCongestionDetector_SetMode(v28, *v5);
    }
  }
  unsigned int v29 = a2[1];
  unsigned int v30 = a2[2];
  unsigned int v31 = (v29 < 7) & (0x1Eu >> v29);
  unsigned int v32 = (v30 < 7) & (0x1Eu >> v30);
  BOOL v33 = v4 != v7;
  if (*(_DWORD *)(a1 + 60) != v29)
  {
    *(_DWORD *)(a1 + 60) = v29;
    unsigned int v34 = (v29 < 7) & (0x7Cu >> v29);
    if (*(unsigned __int8 *)(a1 + 1345) != v34)
    {
      *(unsigned char *)(a1 + 1345) = v34;
      VCRateControlMediaController_SetAudioFractionTier(*(void *)(a1 + 48), 0);
      if (*(_DWORD *)(a1 + 56) != 2) {
        VCRateControlMediaController_ResumeVideo(*(unsigned __int8 **)(a1 + 48));
      }
    }
    [*(id *)(a1 + 1832) setRadioAccessTechnology:*(unsigned int *)(a1 + 60)];
    if (v31 | v32) {
      uint64_t v35 = 1;
    }
    else {
      uint64_t v35 = 5;
    }
    VCStatisticsCollector_SetRadioAccessTechnology(*(void *)(a1 + 24), v35);
    if (v31) {
      char v36 = a2[1] != 3;
    }
    else {
      char v36 = 0;
    }
    VCRateControlMediaController_SetSenderProbingEnabled(*(void *)(a1 + 48), v36);
    unsigned int v30 = a2[2];
    BOOL v33 = 1;
  }
  if (*(_DWORD *)(a1 + 64) != v30)
  {
    *(_DWORD *)(a1 + 64) = v30;
    if (v31 | v32) {
      uint64_t v37 = 1;
    }
    else {
      uint64_t v37 = 5;
    }
    VCStatisticsCollector_SetRadioAccessTechnology(*(void *)(a1 + 24), v37);
    BOOL v33 = 1;
  }
  unsigned int v38 = *(_DWORD *)(a1 + 1372);
  if (a2[3] <= v38 || (int)v38 <= 0) {
    unsigned int v40 = a2[3];
  }
  else {
    unsigned int v40 = *(_DWORD *)(a1 + 1372);
  }
  if (*(_DWORD *)(a1 + 68) != v40)
  {
    *(_DWORD *)(a1 + 68) = v40;
    BOOL v33 = 1;
  }
  unsigned int v41 = *(_DWORD *)(a1 + 72);
  unsigned int v42 = a2[4];
  if (v41 != v42)
  {
    *(_DWORD *)(a1 + 72) = v42;
    BOOL v33 = 1;
    unsigned int v41 = v42;
  }
  int v43 = a2[5];
  if (*(_DWORD *)(a1 + 76) != v43)
  {
    *(_DWORD *)(a1 + 76) = v43;
    BOOL v33 = 1;
  }
  int v44 = *(_DWORD *)(a1 + 96);
  int v45 = a2[10];
  if (v44 == v45)
  {
    char v46 = (unsigned char *)(a1 + 80);
    int v47 = *((unsigned __int8 *)a2 + 24);
    if (*(unsigned __int8 *)(a1 + 80) == v47)
    {
      if (!v33) {
        goto LABEL_377;
      }
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  int v48 = *(unsigned __int8 *)(a1 + 80);
  char v46 = (unsigned char *)(a1 + 80);
  *(_DWORD *)(a1 + 96) = v45;
  int v47 = *((unsigned __int8 *)a2 + 24);
  if (v48 != v47) {
LABEL_57:
  }
    *char v46 = v47;
LABEL_58:
  bzero(&v328, 0x3F0uLL);
  v329 = vcRateControlTierBitrates;
  uint64_t v49 = 34;
  if (!*v46) {
    uint64_t v49 = 31;
  }
  do
    unsigned int v50 = vcRateControlTierBitrates[v49--];
  while (v50 > v40);
  v326 = v5;
  unsigned int v51 = (v49 + 1) & ~(((int)v49 + 1) >> 31);
  HIDWORD(v330) = v51;
  int v52 = -1;
  unsigned int v53 = vcRateControlTierBitrates;
  do
  {
    unsigned int v54 = *v53++;
    ++v52;
  }
  while (v54 < v41);
  if (v52 >= 31) {
    int v52 = 31;
  }
  int v331 = v52;
  int v56 = *(_DWORD *)(a1 + 60);
  int v55 = *(_DWORD *)(a1 + 64);
  if (v51 <= 0x11) {
    int v57 = 10;
  }
  else {
    int v57 = 13;
  }
  if (v51 <= 0x19) {
    int v58 = v57;
  }
  else {
    int v58 = 17;
  }
  uint64_t v59 = vcRateControlTierBitrates[v58];
  int v60 = *(_DWORD *)(a1 + 56);
  if (v60 == 7 || v60 == 1) && (objc_opt_respondsToSelector())
  {
    id v61 = [NSString alloc];
    if ((v56 - 1) > 3) {
      char v62 = @"S";
    }
    else {
      char v62 = off_1E6DB40A8[v56 - 1];
    }
    if ((v55 - 1) > 3) {
      char v66 = @"S";
    }
    else {
      char v66 = off_1E6DB40A8[v55 - 1];
    }
    char v67 = (void *)[v61 initWithFormat:@"%@:%@", v62, v66];
    unsigned int v68 = [*(id *)(a1 + 16) learntBitrateForSegment:v67 defaultValue:v59];

    uint64_t v69 = 26;
    do
      unsigned int v70 = vcRateControlTierBitrates[v69--];
    while (v70 > v68);
    int v58 = (v69 + 1) & ~(((int)v69 + 1) >> 31);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v325 = v6;
      uint64_t v71 = VRTraceErrorLogLevelToCSTR();
      char v72 = *MEMORY[0x1E4F47A50];
      unsigned int v73 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136316674;
          *(void *)((char *)buf + 4) = v71;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_InitialBitrateTierFromLearntBitrate";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1219;
          WORD6(buf[1]) = 2112;
          *(void *)((char *)&buf[1] + 14) = v67;
          WORD3(buf[2]) = 1024;
          DWORD2(buf[2]) = v68;
          WORD6(buf[2]) = 1024;
          *(_DWORD *)((char *)&buf[2] + 14) = v58;
          WORD1(buf[3]) = 1024;
          DWORD1(buf[3]) = v59;
          _os_log_impl(&dword_1E1EA4000, v72, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d AdaptiveLearning(AVCRateController): Setting up initial bitrate for segment %@ - learnt target bitrate %d, selected tier %d, default bitrate %d", (uint8_t *)buf, 0x38u);
        }
      }
      else if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136316674;
        *(void *)((char *)buf + 4) = v71;
        WORD6(buf[0]) = 2080;
        *(void *)((char *)buf + 14) = "_AVCRateController_InitialBitrateTierFromLearntBitrate";
        WORD3(buf[1]) = 1024;
        DWORD2(buf[1]) = 1219;
        WORD6(buf[1]) = 2112;
        *(void *)((char *)&buf[1] + 14) = v67;
        WORD3(buf[2]) = 1024;
        DWORD2(buf[2]) = v68;
        WORD6(buf[2]) = 1024;
        *(_DWORD *)((char *)&buf[2] + 14) = v58;
        WORD1(buf[3]) = 1024;
        DWORD1(buf[3]) = v59;
        _os_log_debug_impl(&dword_1E1EA4000, v72, OS_LOG_TYPE_DEBUG, "AVCRC [%s] %s:%d AdaptiveLearning(AVCRateController): Setting up initial bitrate for segment %@ - learnt target bitrate %d, selected tier %d, default bitrate %d", (uint8_t *)buf, 0x38u);
      }
      uint64_t v6 = v325;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v63 = VRTraceErrorLogLevelToCSTR();
    uint64_t v64 = *MEMORY[0x1E4F47A50];
    unint64_t v65 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315906;
        *(void *)((char *)buf + 4) = v63;
        WORD6(buf[0]) = 2080;
        *(void *)((char *)buf + 14) = "_AVCRateController_InitialBitrateTierFromLearntBitrate";
        WORD3(buf[1]) = 1024;
        DWORD2(buf[1]) = 1221;
        WORD6(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 14) = v59;
        _os_log_impl(&dword_1E1EA4000, v64, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d AdaptiveLearning(AVCRateController): Initial bitrate defaulted to %d", (uint8_t *)buf, 0x22u);
      }
    }
    else if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
    {
      _AVCRateController_ConfigureInternal_cold_2();
    }
  }
  int v74 = v331;
  if (v58 > v331) {
    int v74 = v58;
  }
  if (v74 >= SHIDWORD(v330)) {
    int v74 = HIDWORD(v330);
  }
  LODWORD(v330) = v74;
  int IntValueForKey = VCDefaults_GetIntValueForKey(@"forcedSoftMaxTierLowIndex", 18);
  int v75 = VCDefaults_GetIntValueForKey(@"forcedSoftMaxTierMediumIndex", 26);
  *(void *)&long long v76 = 0x100000001;
  *((void *)&v76 + 1) = 0x100000001;
  long long v337 = v76;
  float64x2_t v342 = (float64x2_t)xmmword_1E259BC80;
  float64x2_t v343 = (float64x2_t)xmmword_1E259BC90;
  uint64_t v344 = 0x4000000000000000;
  char v77 = *(unsigned char *)(a1 + 80);
  double v78 = 6.0;
  if (!v77) {
    double v78 = 2.0;
  }
  double v345 = v78;
  long long v347 = xmmword_1E259BCA0;
  *(_OWORD *)v346 = xmmword_1E259BCB0;
  __asm { FMOV            V0.2D, #2.0 }
  *(_OWORD *)&v346[16] = _Q0;
  int v349 = 1;
  long long v348 = xmmword_1E259BCC0;
  long long v354 = xmmword_1E259BCD0;
  *(_OWORD *)v355 = xmmword_1E259BCE0;
  *(void *)&v355[16] = 0x3FD0000000000000;
  long long v356 = xmmword_1E259BCF0;
  long long v357 = xmmword_1E259BD00;
  if (_ZF) {
    int v83 = 4;
  }
  else {
    int v83 = 7;
  }
  int v358 = v83;
  int v84 = *(_DWORD *)(a1 + 96);
  BOOL v362 = (v84 & 2) == 0;
  unsigned __int8 v369 = BYTE1(v84) & 1;
  int v333 = v75;
  int v335 = 3;
  uint64_t v390 = 0x4008000000000000;
  char v370 = v77;
  int v385 = 1;
  BOOL BoolValueForKey = 1;
  __int16 v363 = 256;
  char v402 = 0;
  BOOL v364 = (v84 & 0x40) != 0;
  unsigned __int8 v365 = (v84 & 0x80) != 0;
  uint64_t v383 = 0x300000004;
  long long v384 = xmmword_1E259BD20;
  unsigned __int8 v366 = (v84 & 8) != 0;
  int v376 = 26;
  int v378 = 3;
  uint64_t v377 = 0x4034000000000000;
  long long v397 = xmmword_1E259BD30;
  long long v398 = xmmword_1E259BD10;
  long long v404 = xmmword_1E259BD40;
  char v374 = (v84 & 0x400) != 0;
  long long v375 = xmmword_1E259BD50;
  BOOL v372 = (v84 & 0x1000) != 0;
  int v373 = 17;
  unsigned __int8 v367 = (v84 & 0x20) != 0;
  BOOL v368 = (v84 & 0x800) != 0;
  long long v379 = xmmword_1E259BD60;
  uint64_t v380 = 0x4008000000000000;
  int v381 = 5;
  uint64_t v382 = 0x3F60624DD2F1A9FCLL;
  BOOL v85 = [+[VCDefaults sharedInstance] rateControlAllowBurstyLossRampDown];
  int v86 = *(_DWORD *)(a1 + 96);
  if (v85)
  {
    int v338 = 0;
    if (*v46) {
      int v87 = 18;
    }
    else {
      int v87 = 13;
    }
    int v339 = v87;
    double v88 = 0.9;
    if ((v86 & 0x2000) == 0) {
      double v88 = 0.0;
    }
    double v351 = v88;
    uint64_t v350 = 0x300000004;
    long long v352 = xmmword_1E259BD70;
  }
  uint64_t v89 = 0;
  long long v405 = xmmword_1E259BD80;
  long long v406 = xmmword_1E259BD90;
  int v340 = ((__int16)v86 >> 15) & 0x11;
  BOOL BoolValueForKey = (v86 & 0x4000) != 0;
  unsigned __int8 v361 = BoolValueForKey;
  do
  {
    *(double *)&v359[v89] = VCRateControlCongestionLevel_RampUpTimeFactor(v89);
    ++v89;
  }
  while (v89 != 5);
  __asm { FMOV            V0.2D, #1.0 }
  long long v393 = _Q0;
  uint64_t v409 = 0x3F847AE147AE147BLL;
  long long v410 = xmmword_1E259BDA0;
  int v412 = 228000;
  uint64_t v411 = 2576980378800000;
  uint64_t v414 = 0x3FE0000000000000;
  long long v413 = xmmword_1E259BDB0;
  switch(*v326)
  {
    case 1:
    case 3:
      goto LABEL_168;
    case 2:
      *(int32x2_t *)&long long v357 = vadd_s32(*(int32x2_t *)&v357, *(int32x2_t *)&v357);
      *(float64x2_t *)&v355[8] = vaddq_f64(*(float64x2_t *)&v355[8], *(float64x2_t *)&v355[8]);
      float64x2_t v342 = vaddq_f64(v342, v342);
      float64x2_t v343 = vaddq_f64(v343, v343);
      BOOL v362 = 0;
      LODWORD(v330) = 3;
      uint64_t v124 = 12;
      do
        unsigned int v125 = vcRateControlTierBitrates[v124--];
      while (v125 > *(_DWORD *)(a1 + 68));
      HIDWORD(v330) = (v124 + 1) & ~(((int)v124 + 1) >> 31);
      unsigned int v126 = *(_DWORD *)(a1 + 72);
      if ((*(_DWORD *)(a1 + 60) - 2) >= 5)
      {
        int v132 = -1;
        v133 = vcRateControlTierBitrates;
        do
        {
          unsigned int v134 = *v133++;
          ++v132;
        }
        while (v134 < v126);
        if (v132 >= 12) {
          int v135 = 12;
        }
        else {
          int v135 = v132;
        }
        int v331 = v135;
      }
      else
      {
        int v127 = -1;
        v128 = vcRateControlTierBitrates;
        do
        {
          unsigned int v129 = *v128++;
          ++v127;
        }
        while (v129 < v126);
        if (v127 >= 12) {
          int v130 = 12;
        }
        else {
          int v130 = v127;
        }
        LOBYTE(v363) = (*(_DWORD *)(a1 + 96) & 0x200) == 0;
        uint64_t v386 = 0x3FC999999999999ALL;
        long long v387 = xmmword_1E259BDE0;
        long long v388 = xmmword_1E259BDC0;
        long long v394 = xmmword_1E259BDD0;
        *(void *)&long long v395 = 0x3FE0000000000000;
        int v331 = v130;
        int v334 = 2;
        uint64_t v389 = 0x4008000000000000;
      }
      *((void *)&v337 + 1) = 0;
      *((void *)&v357 + 1) = 0;
      int v341 = 7;
      BOOL BoolValueForKey = 0;
      goto LABEL_197;
    case 4:
    case 5:
      unsigned int v91 = *(_DWORD *)(a1 + 68);
      int v92 = _AVCRateController_MultiwayMaxTierFromServerBag(a1);
      int v93 = v92 + 1;
      uint64_t v94 = &vcRateControlTierBitrates[v92];
      do
      {
        unsigned int v95 = *v94--;
        --v93;
      }
      while (v95 > v91);
      uint64_t v96 = 7;
      if (v93 <= 7) {
        int v93 = 7;
      }
      HIDWORD(v330) = v93;
      unsigned int v97 = *(_DWORD *)(a1 + 72);
      int v98 = _AVCRateController_MultiwayMaxTierFromServerBag(a1);
      do
        unsigned int v99 = vcRateControlTierBitrates[v96++];
      while (v99 < v97);
      int v100 = v96 - 1;
      if ((int)v96 - 1 >= v98) {
        int v100 = v98;
      }
      int v331 = v100;
      int IntValueForKey = VCDefaults_GetIntValueForKey(@"forcedSoftMaxTierLowIndex", 22);
      BOOL IsAudioOnly = VCRateControlMediaController_IsAudioOnly(*(void *)(a1 + 48));
      unsigned int v102 = *(_DWORD *)(a1 + 76);
      if (!v102)
      {
        uint64_t v103 = 12;
        if (IsAudioOnly) {
          uint64_t v103 = 6;
        }
        unsigned int v102 = vcRateControlTierBitrates[v103];
      }
      int v104 = v331 - 1;
      CMTime v105 = &vcRateControlTierBitrates[v331];
      do
      {
        unsigned int v106 = *v105++;
        ++v104;
      }
      while (v106 < v102);
      if (v104 >= SHIDWORD(v330)) {
        int v107 = HIDWORD(v330);
      }
      else {
        int v107 = v104;
      }
      LODWORD(v330) = v107;
      *(void *)&v346[24] = 0x4000000000000000;
      LODWORD(v350) = 4;
      uint64_t v353 = 0x3FE0000000000000;
      HIDWORD(v357) = 64000;
      HIBYTE(v363) = 0;
      *((void *)&v397 + 1) = 0x4000000000000000;
      uint64_t v336 = 0xE00000009;
      char v399 = 1;
      uint64_t v400 = 0x4024000000000000;
      uint64_t v401 = 0x200000002;
      if (*v326 == 4 && (*(_DWORD *)(a1 + 60) - 2) <= 4)
      {
        LOBYTE(v363) = (*(_DWORD *)(a1 + 96) & 0x200) == 0;
        uint64_t v386 = 0x3FC999999999999ALL;
        *((void *)&v387 + 1) = 0x3FD999999999999ALL;
        long long v388 = xmmword_1E259BDC0;
        long long v394 = xmmword_1E259BDD0;
        *(void *)&long long v395 = 0x3FE0000000000000;
        int v334 = 7;
        uint64_t v389 = 0x4008000000000000;
      }
      goto LABEL_197;
    case 7:
      int v385 = 2;
LABEL_168:
      int v131 = *(_DWORD *)(a1 + 60);
      if ((v131 - 2) > 4)
      {
        if ((*(_DWORD *)(a1 + 64) - 2) > 4) {
          goto LABEL_172;
        }
      }
      else
      {
        LOBYTE(v363) = (*(_DWORD *)(a1 + 96) & 0x200) == 0;
        uint64_t v386 = 0x3FC999999999999ALL;
        long long v387 = xmmword_1E259BDE0;
        long long v388 = xmmword_1E259BDC0;
        long long v394 = xmmword_1E259BDD0;
        long long v395 = xmmword_1E259BDF0;
        long long v396 = xmmword_1E259BDF0;
      }
      int v339 = 9;
      HIDWORD(v350) = 8;
LABEL_172:
      if ((v131 & 0xFFFFFFFE) == 2) {
        goto LABEL_176;
      }
      switch(v131)
      {
        case 6:
          goto LABEL_195;
        case 5:
          __asm { FMOV            V1.2D, #0.5 }
          *(float64x2_t *)&v346[8] = vmulq_f64(*(float64x2_t *)&v346[8], _Q1);
          BOOL v362 = 0;
          HIDWORD(v357) = 64000;
          LODWORD(v330) = 5;
          DWORD2(v337) = 0;
LABEL_196:
          int v338 = 0;
          goto LABEL_197;
        case 4:
LABEL_176:
          char v402 = 1;
          int v338 = 0;
          int v403 = [+[VCDefaults sharedInstance] rateControlBasebandSlowDownFactor];
          goto LABEL_197;
      }
      if (*(_DWORD *)(a1 + 64) == 6)
      {
LABEL_195:
        __asm { FMOV            V0.2D, #0.5 }
        *(float64x2_t *)&v346[8] = vmulq_f64(*(float64x2_t *)&v346[8], _Q0);
        *(int32x2_t *)&long long v357 = vadd_s32(*(int32x2_t *)&v357, *(int32x2_t *)&v357);
        *(float64x2_t *)&v355[8] = vaddq_f64(*(float64x2_t *)&v355[8], *(float64x2_t *)&v355[8]);
        float64x2_t v342 = vaddq_f64(v342, v342);
        float64x2_t v343 = vaddq_f64(v343, v343);
        BOOL v362 = 0;
        HIDWORD(v357) = 0;
        LODWORD(v330) = 3;
        DWORD2(v337) = 0;
        *((void *)&v347 + 1) = 0x3FB999999999999ALL;
        goto LABEL_196;
      }
LABEL_197:
      v142 = *(void **)(a1 + 1504);
      int v143 = [v142 containsAllSecondaryKeysWithPrimaryKey:@"profile"];
      if (v143) {
        LODWORD(v328) = objc_msgSend((id)objc_msgSend(v142, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"profile", @"profileNumber", 0), "unsignedIntValue");
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v144 = VRTraceErrorLogLevelToCSTR();
        v145 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v146 = [@"profile" UTF8String];
          LODWORD(buf[0]) = 136316674;
          *(void *)((char *)buf + 4) = v144;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagProfileConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1556;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v146;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v143;
          WORD3(buf[3]) = 1024;
          DWORD2(buf[3]) = v328;
          _os_log_impl(&dword_1E1EA4000, v145, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d serverBagProfileNumber=%d", (uint8_t *)buf, 0x3Cu);
        }
      }
      v147 = *(void **)(a1 + 1504);
      int v148 = [v147 containsAllSecondaryKeysWithPrimaryKey:@"fastRampUp"];
      if (v148)
      {
        unsigned __int8 v366 = objc_msgSend((id)objc_msgSend(v147, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"fastRampUp", @"enabled", 0), "BOOLValue");
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1504), "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"fastRampUp", @"networkStableDuration", 1), "doubleValue");
        *(void *)&long long v379 = v149;
        int v378 = objc_msgSend((id)objc_msgSend(v147, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"fastRampUp", @"minTierGap", 0), "integerValue");
        objc_msgSend((id)objc_msgSend(v147, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"fastRampUp", @"RTTRatio", 0), "doubleValue");
        uint64_t v377 = v150;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v151 = VRTraceErrorLogLevelToCSTR();
        v152 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v153 = [@"fastRampUp" UTF8String];
          LODWORD(buf[0]) = 136317442;
          *(void *)((char *)buf + 4) = v151;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagFastRampUpConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1568;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v153;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v148;
          WORD3(buf[3]) = 1024;
          DWORD2(buf[3]) = v366;
          WORD6(buf[3]) = 2048;
          *(void *)((char *)&buf[3] + 14) = v379;
          WORD3(buf[4]) = 1024;
          DWORD2(buf[4]) = v378;
          WORD6(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 14) = v377;
          _os_log_impl(&dword_1E1EA4000, v152, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d fastRampUpEnabled=%d fastRampUpNetworkStableDuration=%f fastRampUpTierGap=%d fastRampUpRTTRatio=%F", (uint8_t *)buf, 0x56u);
        }
      }
      v154 = *(void **)(a1 + 1504);
      int v155 = [v154 containsAllSecondaryKeysWithPrimaryKey:@"oscillationAvoidance"];
      if (v155)
      {
        unsigned __int8 v365 = objc_msgSend((id)objc_msgSend(v154, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"oscillationAvoidance", @"enabled", 0), "BOOLValue");
        HIDWORD(v383) = objc_msgSend((id)objc_msgSend(v154, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"oscillationAvoidance", @"tiersHit", 0), "intValue");
        LODWORD(v383) = objc_msgSend((id)objc_msgSend(v154, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"oscillationAvoidance", @"tierChange", 0), "intValue");
        objc_msgSend((id)objc_msgSend(v154, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"oscillationAvoidance", @"durationRatio", 0), "doubleValue");
        *(void *)&long long v384 = v156;
        objc_msgSend((id)objc_msgSend(v154, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"oscillationAvoidance", @"aggDurationRatio", 0), "doubleValue");
        *((void *)&v384 + 1) = v157;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v158 = VRTraceErrorLogLevelToCSTR();
        v159 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v160 = [@"oscillationAvoidance" UTF8String];
          LODWORD(buf[0]) = 136317698;
          *(void *)((char *)buf + 4) = v158;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagOscillationAvoidanceConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1581;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v160;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v155;
          WORD3(buf[3]) = 1024;
          DWORD2(buf[3]) = v365;
          WORD6(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 14) = HIDWORD(v383);
          WORD1(buf[4]) = 1024;
          DWORD1(buf[4]) = v383;
          WORD4(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 10) = v384;
          WORD1(buf[5]) = 2048;
          *(void *)((char *)&buf[5] + 4) = *((void *)&v384 + 1);
          _os_log_impl(&dword_1E1EA4000, v159, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d oscillationAvoidanceEnabled=%d oscillationAvoidanceTiersHitThreshold=%d oscillationAvoidanceTierChangeThreshold=%d oscillationAvoidanceDurationRatio=%f oscillationAvoidanceDurationRatioAggressive=%f", (uint8_t *)buf, 0x5Cu);
        }
      }
      v161 = *(void **)(a1 + 1504);
      int v162 = [v161 containsAllSecondaryKeysWithPrimaryKey:@"emergencyTier"];
      if (v162)
      {
        unsigned __int8 v369 = objc_msgSend((id)objc_msgSend(v161, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"emergencyTier", @"enabled", 0), "BOOLValue");
        objc_msgSend((id)objc_msgSend(v161, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"emergencyTier", @"coolDownTimeWiFi", 1), "doubleValue");
        uint64_t v390 = v163;
        int v335 = objc_msgSend((id)objc_msgSend(v161, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"emergencyTier", @"minNonEmergTierWiFi", 0), "integerValue");
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v164 = VRTraceErrorLogLevelToCSTR();
        v165 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v166 = [@"emergencyTier" UTF8String];
          LODWORD(buf[0]) = 136317186;
          *(void *)((char *)buf + 4) = v164;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagEmergencyTierConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1592;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v166;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v162;
          WORD3(buf[3]) = 1024;
          DWORD2(buf[3]) = v369;
          WORD6(buf[3]) = 2048;
          *(void *)((char *)&buf[3] + 14) = v390;
          WORD3(buf[4]) = 1024;
          DWORD2(buf[4]) = v335;
          _os_log_impl(&dword_1E1EA4000, v165, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d wifiEmergencyTierEnabled=%d rampDownWiFiEmergencyTierCoolDownTime=%f lowestNonEmergencyTierIndexWiFi=%d", (uint8_t *)buf, 0x4Cu);
        }
      }
      v167 = *(void **)(a1 + 1504);
      int v168 = [v167 containsAllSecondaryKeysWithPrimaryKey:@"pauseResume"];
      if (v168)
      {
        objc_msgSend((id)objc_msgSend(v167, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"pauseResume", @"offChannelHighRatio", 2), "doubleValue");
        *(void *)&long long v398 = v169;
        objc_msgSend((id)objc_msgSend(v167, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"pauseResume", @"offChannelLowRatio", 2), "doubleValue");
        *((void *)&v398 + 1) = v170;
        objc_msgSend((id)objc_msgSend(v167, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"pauseResume", @"autoResumeTime", 1), "doubleValue");
        *((void *)&v397 + 1) = v171;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v172 = VRTraceErrorLogLevelToCSTR();
        v173 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v174 = [@"pauseResume" UTF8String];
          LODWORD(buf[0]) = 136317186;
          *(void *)((char *)buf + 4) = v172;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagPauseResumeConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1603;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v174;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v168;
          WORD3(buf[3]) = 2048;
          *((void *)&buf[3] + 1) = v398;
          LOWORD(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 2) = *((void *)&v398 + 1);
          WORD5(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 12) = *((void *)&v397 + 1);
          _os_log_impl(&dword_1E1EA4000, v173, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d offChannelHighRatio=%f offChannelLowRatio=%f autoResumeTime=%f", (uint8_t *)buf, 0x54u);
        }
      }
      v175 = *(void **)(a1 + 1504);
      int v176 = [v175 containsAllSecondaryKeysWithPrimaryKey:@"noRampUp-networkSaturation"];
      if (v176)
      {
        unsigned __int8 v367 = objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-networkSaturation", @"enabled", 0), "BOOLValue");
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-networkSaturation", @"RTTtoMinRTTRatio", 0), "doubleValue");
        *((void *)&v379 + 1) = v177;
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-networkSaturation", @"OWRDtoMinRTTRatio", 0), "doubleValue");
        uint64_t v380 = v178;
        int v381 = objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-networkSaturation", @"saturationPersistFeedbackNum", 0), "integerValue");
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-networkSaturation", @"RTTDecreasingThreshold", 1), "doubleValue");
        uint64_t v382 = v179;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v180 = VRTraceErrorLogLevelToCSTR();
        v181 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v182 = [@"noRampUp-networkSaturation" UTF8String];
          LODWORD(buf[0]) = 136317698;
          *(void *)((char *)buf + 4) = v180;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagNoRampUpGroupConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1465;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v182;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v176;
          WORD3(buf[3]) = 1024;
          DWORD2(buf[3]) = v367;
          WORD6(buf[3]) = 2048;
          *(void *)((char *)&buf[3] + 14) = *((void *)&v379 + 1);
          WORD3(buf[4]) = 2048;
          *((void *)&buf[4] + 1) = v380;
          LOWORD(buf[5]) = 1024;
          *(_DWORD *)((char *)&buf[5] + 2) = v381;
          WORD3(buf[5]) = 2048;
          *((void *)&buf[5] + 1) = v382;
          _os_log_impl(&dword_1E1EA4000, v181, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s config serverBagContainsGroup=%d blockRampUpInSaturatedNetworkEnabled=%d networkSaturatedRTTToMinRTTRatio=%f networkSaturatedOWRDToMinRTTRatio=%f networkSaturatedPersistFeedbackNumber=%d networkSaturatedRTTDecreasingThreshold=%f", (uint8_t *)buf, 0x60u);
        }
      }
      int v183 = [v175 containsAllSecondaryKeysWithPrimaryKey:@"noRampUp-source"];
      if (v183)
      {
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-source", @"rateLimitedPercentage", 2), "doubleValue");
        *(void *)&long long v354 = v184;
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-source", @"blockedTimeout", 1), "doubleValue");
        *((void *)&v348 + 1) = v185;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v186 = VRTraceErrorLogLevelToCSTR();
        v187 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v188 = [@"noRampUp-source" UTF8String];
          LODWORD(buf[0]) = 136316930;
          *(void *)((char *)buf + 4) = v186;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagNoRampUpGroupConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1472;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v188;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v183;
          WORD3(buf[3]) = 2048;
          *((void *)&buf[3] + 1) = v354;
          LOWORD(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 2) = *((void *)&v348 + 1);
          _os_log_impl(&dword_1E1EA4000, v187, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s config serverBagContainsGroup=%d rateLimitedPercentage=%f blockedTimeout=%f", (uint8_t *)buf, 0x4Au);
        }
      }
      int v189 = [v175 containsAllSecondaryKeysWithPrimaryKey:@"noRampUp-network"];
      if (v189)
      {
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-network", @"networkUnstableCoolDownTime", 1), "doubleValue");
        *(void *)&long long v397 = v190;
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-network", @"RTTThreshold", 1), "doubleValue");
        *(void *)&long long v404 = v191;
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-network", @"PLRThreshold", 2), "doubleValue");
        *((void *)&v404 + 1) = v192;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v193 = VRTraceErrorLogLevelToCSTR();
        v194 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v195 = [@"noRampUp-source" UTF8String];
          LODWORD(buf[0]) = 136317186;
          *(void *)((char *)buf + 4) = v193;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagNoRampUpGroupConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1480;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v195;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v189;
          WORD3(buf[3]) = 2048;
          *((void *)&buf[3] + 1) = v397;
          LOWORD(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 2) = v404;
          WORD5(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 12) = *((void *)&v404 + 1);
          _os_log_impl(&dword_1E1EA4000, v194, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s config serverBagContainsGroup=%d networkUnstableCoolDownTime=%f RTTThreshold=%f PLRThreshold=%f", (uint8_t *)buf, 0x54u);
        }
      }
      int v196 = [v175 containsAllSecondaryKeysWithPrimaryKey:@"noRampUp-delay"];
      if (v196)
      {
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-delay", @"OWRD", 1), "doubleValue");
        *(void *)&v346[24] = v197;
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-delay", @"NOWRD", 1), "doubleValue");
        *(void *)&long long v347 = v198;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v199 = VRTraceErrorLogLevelToCSTR();
        v200 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v201 = [@"noRampUp-delay" UTF8String];
          LODWORD(buf[0]) = 136316930;
          *(void *)((char *)buf + 4) = v199;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagNoRampUpGroupConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1487;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v201;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v196;
          WORD3(buf[3]) = 2048;
          *((void *)&buf[3] + 1) = *(void *)&v346[24];
          LOWORD(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 2) = v347;
          _os_log_impl(&dword_1E1EA4000, v200, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d rampUpOWRDThreshold=%f rampUpNOWRDThreshold=%f", (uint8_t *)buf, 0x4Au);
        }
      }
      int v202 = [v175 containsAllSecondaryKeysWithPrimaryKey:@"noRampUp-bw"];
      if (v202)
      {
        objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-bw", @"overGuardTierCalmDuration", 1), "doubleValue");
        *(void *)&long long v348 = v203;
        int v349 = objc_msgSend((id)objc_msgSend(v175, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-bw", @"guardTierDiff", 0), "integerValue");
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v204 = VRTraceErrorLogLevelToCSTR();
        v205 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v206 = [@"noRampUp-bw" UTF8String];
          LODWORD(buf[0]) = 136316930;
          *(void *)((char *)buf + 4) = v204;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagNoRampUpGroupConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1494;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v206;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v202;
          WORD3(buf[3]) = 2048;
          *((void *)&buf[3] + 1) = v348;
          LOWORD(buf[4]) = 1024;
          *(_DWORD *)((char *)&buf[4] + 2) = v349;
          _os_log_impl(&dword_1E1EA4000, v205, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d rampUpOverBandwidthCalmDuration=%f rampUpOverBandwidthTierNumber=%d", (uint8_t *)buf, 0x46u);
        }
      }
      v207 = *(void **)(a1 + 1504);
      int v208 = [v207 containsAllSecondaryKeysWithPrimaryKey:@"rampDown-delay"];
      if (v208)
      {
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-delay", @"NOWRD", 1), "doubleValue");
        v342.f64[0] = v209;
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-delay", @"NOWRDAcc", 1), "doubleValue");
        v342.f64[1] = v210;
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-delay", @"aggNOWRD", 1), "doubleValue");
        v343.f64[0] = v211;
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-delay", @"aggNOWRDAcc", 1), "doubleValue");
        v343.f64[1] = v212;
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-delay", @"constantOWRDDuration", 1), "doubleValue");
        uint64_t v344 = v213;
        char v374 = objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-delay", @"suppressionEnabled", 0), "BOOLValue");
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-delay", @"suppressionMinRTT", 1), "doubleValue");
        *(void *)&long long v375 = v214;
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-delay", @"suppressionFactor", 2), "doubleValue");
        *((void *)&v375 + 1) = v215;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v216 = VRTraceErrorLogLevelToCSTR();
        v217 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v218 = [@"rampDown-delay" UTF8String];
          LODWORD(buf[0]) = 136317698;
          *(void *)((char *)buf + 4) = v216;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagRampDownGroupConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1510;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v218;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v208;
          WORD3(buf[3]) = 2048;
          *((void *)&buf[3] + 1) = *(void *)&v342.f64[0];
          LOWORD(buf[4]) = 2048;
          *(float64_t *)((char *)&buf[4] + 2) = v342.f64[1];
          WORD5(buf[4]) = 2048;
          *(float64_t *)((char *)&buf[4] + 12) = v343.f64[0];
          WORD2(buf[5]) = 2048;
          *(float64_t *)((char *)&buf[5] + 6) = v343.f64[1];
          HIWORD(buf[5]) = 2048;
          *(void *)&buf[6] = v344;
          _os_log_impl(&dword_1E1EA4000, v217, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d rampDownNOWRDThreshold=%f rampDownNOWRDAccThreshold=%f rampDownAggressiveNOWRDThreshold=%f rampDownAggressiveNOWRDAccThreshold=%f rampDownConstantOWRDDuration=%f", (uint8_t *)buf, 0x68u);
        }
      }
      int v219 = [v207 containsAllSecondaryKeysWithPrimaryKey:@"rampDown-loss"];
      if (v219)
      {
        int v338 = objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-loss", @"MBL", 0), "integerValue");
        int v339 = objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-loss", @"lowestTier", 0), "integerValue");
        LODWORD(v350) = objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-loss", @"lossEvent", 0), "integerValue");
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-loss", @"lossEventNOWRD", 1), "doubleValue");
        *((void *)&v352 + 1) = v220;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v221 = VRTraceErrorLogLevelToCSTR();
        v222 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v223 = [@"rampDown-loss" UTF8String];
          LODWORD(buf[0]) = 136317442;
          *(void *)((char *)buf + 4) = v221;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagRampDownGroupConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1519;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v223;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v219;
          WORD3(buf[3]) = 1024;
          DWORD2(buf[3]) = v338;
          WORD6(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 14) = v339;
          WORD1(buf[4]) = 1024;
          DWORD1(buf[4]) = v350;
          WORD4(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 10) = *((void *)&v352 + 1);
          _os_log_impl(&dword_1E1EA4000, v222, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d rampDownBurstyLossThreshold=%d lowestTierForBurstyLossRampDown=%d rampDownLossEventThreshold=%d rampDownLossEventNOWRDThreshold=%f", (uint8_t *)buf, 0x52u);
        }
      }
      int v224 = [v207 containsAllSecondaryKeysWithPrimaryKey:@"rampDown-bw"];
      if (v224)
      {
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-bw", @"keepOvershootDuration", 1), "doubleValue");
        double v345 = v225;
        objc_msgSend((id)objc_msgSend(v207, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-bw", @"nextTierPercentage", 2), "doubleValue");
        *(void *)v346 = v226;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v227 = VRTraceErrorLogLevelToCSTR();
        v228 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v229 = [@"rampDown-bw" UTF8String];
          LODWORD(buf[0]) = 136316930;
          *(void *)((char *)buf + 4) = v227;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagRampDownGroupConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1526;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v229;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v224;
          WORD3(buf[3]) = 2048;
          *((double *)&buf[3] + 1) = v345;
          LOWORD(buf[4]) = 2048;
          *(void *)((char *)&buf[4] + 2) = *(void *)v346;
          _os_log_impl(&dword_1E1EA4000, v228, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d rampDownOvershootDuration=%f rampDownOvershootNextTierRatio=%f", (uint8_t *)buf, 0x4Au);
        }
      }
      AVCRateController_ApplyServerBagLossBasedAdaptationConfig(a1, &v328);
      _AVCRateController_ApplyServerBagBasebandConfig(a1, (uint64_t)&v328);
      v230 = *(void **)(a1 + 1504);
      int v231 = [v230 containsAllSecondaryKeysWithPrimaryKey:@"mainControl"];
      if (v231)
      {
        objc_msgSend((id)objc_msgSend(v230, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"mainControl", @"rampDown-loss-ratio", 0), "doubleValue");
        double v351 = v232;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v233 = VRTraceErrorLogLevelToCSTR();
        v234 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v235 = [@"mainControl" UTF8String];
          LODWORD(buf[0]) = 136316674;
          *(void *)((char *)buf + 4) = v233;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagMainControlConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1636;
          WORD6(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 14) = a1;
          WORD3(buf[2]) = 2080;
          *((void *)&buf[2] + 1) = v235;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v231;
          WORD3(buf[3]) = 2048;
          *((double *)&buf[3] + 1) = v351;
          _os_log_impl(&dword_1E1EA4000, v234, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d rampDownLossEventThresholdRatio=%f", (uint8_t *)buf, 0x40u);
        }
      }
      _AVCRateController_ApplyServerBagECNConfig((void *)a1, (uint64_t)&v328);
      _AVCRateController_ApplyServerBagBIFConfig((void *)a1, (uint64_t)&v328);
      _AVCRateController_ApplyServerBagContinuousAdaptationConfig((void *)a1, (uint64_t)&v328);
      if (![+[VCHardwareSettingsEmbedded sharedInstance] isSmartBrakeSupported])
      {
        unsigned int v415 = 0;
        goto LABEL_276;
      }
      if (_os_feature_enabled_impl()) {
        int v236 = 2;
      }
      else {
        int v236 = 0;
      }
      unsigned int v415 = v236;
      _AVCRateController_ApplyServerBagSmartBrakeConfig((void *)a1, (uint64_t)&v328);
      unsigned int v415 = VCDefaults_GetIntValueForKey(@"smartBrakeRateControlStrategy", v415);
      if (!*(unsigned char *)(a1 + 80)) {
        goto LABEL_276;
      }
      unsigned int v415 = 0;
      if (objc_opt_class() == a1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v257 = VRTraceErrorLogLevelToCSTR();
          v258 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf[0]) = 136315906;
            *(void *)((char *)buf + 4) = v257;
            WORD6(buf[0]) = 2080;
            *(void *)((char *)buf + 14) = "_AVCRateController_ApplySmartBrakeConfig";
            WORD3(buf[1]) = 1024;
            DWORD2(buf[1]) = 1903;
            WORD6(buf[1]) = 1024;
            *(_DWORD *)((char *)&buf[1] + 14) = v415;
            v259 = "AVCRC [%s] %s:%d Forced smart brake off with smartBrakeStrategy=%u when bursty traffic is sent";
            v260 = v258;
            uint32_t v261 = 34;
LABEL_310:
            _os_log_impl(&dword_1E1EA4000, v260, OS_LOG_TYPE_DEFAULT, v259, (uint8_t *)buf, v261);
          }
        }
      }
      else
      {
        if (objc_opt_respondsToSelector()) {
          v237 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
        }
        else {
          v237 = &stru_1F3D3E450;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v267 = VRTraceErrorLogLevelToCSTR();
          v268 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf[0]) = 136316418;
            *(void *)((char *)buf + 4) = v267;
            WORD6(buf[0]) = 2080;
            *(void *)((char *)buf + 14) = "_AVCRateController_ApplySmartBrakeConfig";
            WORD3(buf[1]) = 1024;
            DWORD2(buf[1]) = 1903;
            WORD6(buf[1]) = 2112;
            *(void *)((char *)&buf[1] + 14) = v237;
            WORD3(buf[2]) = 2048;
            *((void *)&buf[2] + 1) = a1;
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = v415;
            v259 = "AVCRC [%s] %s:%d %@(%p) Forced smart brake off with smartBrakeStrategy=%u when bursty traffic is sent";
            v260 = v268;
            uint32_t v261 = 54;
            goto LABEL_310;
          }
        }
      }
LABEL_276:
      if ((*(_DWORD *)(a1 + 60) - 2) <= 4)
      {
        v238 = *(void **)(a1 + 1504);
        int v239 = [v238 containsAllSecondaryKeysWithPrimaryKey:@"noRampUp-notification"];
        if (v239)
        {
          objc_msgSend((id)objc_msgSend(v238, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-notification", @"BBDelay", 1), "doubleValue");
          *((void *)&v394 + 1) = v240;
          objc_msgSend((id)objc_msgSend(v238, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-notification", @"NBDCD", 1), "doubleValue");
          *(void *)&long long v394 = v241;
          objc_msgSend((id)objc_msgSend(v238, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"noRampUp-notification", @"highNBDCDCoolDuration", 1), "doubleValue");
          *(void *)&long long v395 = v242;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v243 = VRTraceErrorLogLevelToCSTR();
          v244 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v245 = [@"noRampUp-notification" UTF8String];
            LODWORD(buf[0]) = 136317186;
            *(void *)((char *)buf + 4) = v243;
            WORD6(buf[0]) = 2080;
            *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagNotificationGroupConfig";
            WORD3(buf[1]) = 1024;
            DWORD2(buf[1]) = 1537;
            WORD6(buf[1]) = 2048;
            *(void *)((char *)&buf[1] + 14) = a1;
            WORD3(buf[2]) = 2080;
            *((void *)&buf[2] + 1) = v245;
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = v239;
            WORD3(buf[3]) = 2048;
            *((void *)&buf[3] + 1) = *((void *)&v394 + 1);
            LOWORD(buf[4]) = 2048;
            *(void *)((char *)&buf[4] + 2) = v394;
            WORD5(buf[4]) = 2048;
            *(void *)((char *)&buf[4] + 12) = v395;
            _os_log_impl(&dword_1E1EA4000, v244, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d rampUpQueuingDelayThreshold=%f rampUpNBDCDThreshold=%f rampUpNBDCDCoolDownTime=%f", (uint8_t *)buf, 0x54u);
          }
        }
        int v246 = [v238 containsAllSecondaryKeysWithPrimaryKey:@"rampDown-notification"];
        if (v246)
        {
          objc_msgSend((id)objc_msgSend(v238, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-notification", @"highBBDelay", 1), "doubleValue");
          *((void *)&v388 + 1) = v247;
          objc_msgSend((id)objc_msgSend(v238, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-notification", @"mediumBBDelay", 1), "doubleValue");
          *(void *)&long long v388 = v248;
          objc_msgSend((id)objc_msgSend(v238, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-notification", @"normalizedBBDelay", 1), "doubleValue");
          *((void *)&v387 + 1) = v249;
          objc_msgSend((id)objc_msgSend(v238, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-notification", @"NBDCD", 1), "doubleValue");
          uint64_t v386 = v250;
          objc_msgSend((id)objc_msgSend(v238, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"rampDown-notification", @"aggNBDCD", 1), "doubleValue");
          *(void *)&long long v387 = v251;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v252 = VRTraceErrorLogLevelToCSTR();
          v253 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v254 = [@"rampDown-notification" UTF8String];
            LODWORD(buf[0]) = 136317698;
            *(void *)((char *)buf + 4) = v252;
            WORD6(buf[0]) = 2080;
            *(void *)((char *)buf + 14) = "_AVCRateController_ApplyServerBagNotificationGroupConfig";
            WORD3(buf[1]) = 1024;
            DWORD2(buf[1]) = 1547;
            WORD6(buf[1]) = 2048;
            *(void *)((char *)&buf[1] + 14) = a1;
            WORD3(buf[2]) = 2080;
            *((void *)&buf[2] + 1) = v254;
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = v246;
            WORD3(buf[3]) = 2048;
            *((void *)&buf[3] + 1) = *((void *)&v388 + 1);
            LOWORD(buf[4]) = 2048;
            *(void *)((char *)&buf[4] + 2) = v388;
            WORD5(buf[4]) = 2048;
            *(void *)((char *)&buf[4] + 12) = *((void *)&v387 + 1);
            WORD2(buf[5]) = 2048;
            *(void *)((char *)&buf[5] + 6) = v386;
            HIWORD(buf[5]) = 2048;
            *(void *)&buf[6] = v387;
            _os_log_impl(&dword_1E1EA4000, v253, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d rampDownHighQueuingDelayThreshold=%f rampDownMediumQueuingDelayThreshold=%f rampDownNormalizedQueuingDelayThreshold=%f rampDownNBDCDThreshold=%f rampDownAggressiveNBDCDThreshold=%f", (uint8_t *)buf, 0x68u);
          }
        }
      }
      if (*v326 == 8) {
        _AVCRateController_ApplyServerBagLowLatencyContinuousAdaptationConfig((void *)a1, (uint64_t)&v328);
      }
      if (!*(unsigned char *)(a1 + 1112)) {
        goto LABEL_320;
      }
      if (*v326 == 10)
      {
        uint64_t v407 = *(void *)(a1 + 856);
        long long v408 = *(_OWORD *)(a1 + 864);
        if (objc_opt_class() == a1)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v262 = VRTraceErrorLogLevelToCSTR();
            v263 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136316674;
              *(void *)((char *)buf + 4) = v262;
              WORD6(buf[0]) = 2080;
              *(void *)((char *)buf + 14) = "_AVCRateController_ApplyCachedAlgorithmConfig";
              WORD3(buf[1]) = 1024;
              DWORD2(buf[1]) = 1828;
              WORD6(buf[1]) = 1024;
              *(_DWORD *)((char *)&buf[1] + 14) = v407;
              WORD1(buf[2]) = 1024;
              DWORD1(buf[2]) = HIDWORD(v407);
              WORD4(buf[2]) = 2048;
              *(void *)((char *)&buf[2] + 10) = v408;
              WORD1(buf[3]) = 2048;
              *(void *)((char *)&buf[3] + 4) = *((void *)&v408 + 1);
              v264 = "AVCRC [%s] %s:%d Apply algorithm config rampUpUplinkBLERThreshold=%u, rampDownUplinkBLERThreshold=%"
                     "u, rampUpUplinkBLERDuration=%f, rampDownUplinkBLERDuration=%f";
              v265 = v263;
              uint32_t v266 = 60;
LABEL_315:
              _os_log_impl(&dword_1E1EA4000, v265, OS_LOG_TYPE_DEFAULT, v264, (uint8_t *)buf, v266);
            }
          }
        }
        else
        {
          if (objc_opt_respondsToSelector()) {
            v255 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
          }
          else {
            v255 = &stru_1F3D3E450;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v269 = VRTraceErrorLogLevelToCSTR();
            v270 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136317186;
              *(void *)((char *)buf + 4) = v269;
              WORD6(buf[0]) = 2080;
              *(void *)((char *)buf + 14) = "_AVCRateController_ApplyCachedAlgorithmConfig";
              WORD3(buf[1]) = 1024;
              DWORD2(buf[1]) = 1828;
              WORD6(buf[1]) = 2112;
              *(void *)((char *)&buf[1] + 14) = v255;
              WORD3(buf[2]) = 2048;
              *((void *)&buf[2] + 1) = a1;
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = v407;
              WORD3(buf[3]) = 1024;
              DWORD2(buf[3]) = HIDWORD(v407);
              WORD6(buf[3]) = 2048;
              *(void *)((char *)&buf[3] + 14) = v408;
              WORD3(buf[4]) = 2048;
              *((void *)&buf[4] + 1) = *((void *)&v408 + 1);
              v264 = "AVCRC [%s] %s:%d %@(%p) Apply algorithm config rampUpUplinkBLERThreshold=%u, rampDownUplinkBLERThre"
                     "shold=%u, rampUpUplinkBLERDuration=%f, rampDownUplinkBLERDuration=%f";
              v265 = v270;
              uint32_t v266 = 80;
              goto LABEL_315;
            }
          }
        }
      }
      else if (objc_opt_class() == a1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _AVCRateController_ConfigureInternal_cold_1();
          }
        }
      }
      else
      {
        if (objc_opt_respondsToSelector()) {
          v256 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
        }
        else {
          v256 = &stru_1F3D3E450;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v271 = VRTraceErrorLogLevelToCSTR();
          v272 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v322 = *(_DWORD *)(a1 + 56);
            LODWORD(buf[0]) = 136316418;
            *(void *)((char *)buf + 4) = v271;
            WORD6(buf[0]) = 2080;
            *(void *)((char *)buf + 14) = "_AVCRateController_ApplyCachedAlgorithmConfig";
            WORD3(buf[1]) = 1024;
            DWORD2(buf[1]) = 1832;
            WORD6(buf[1]) = 2112;
            *(void *)((char *)&buf[1] + 14) = v256;
            WORD3(buf[2]) = 2048;
            *((void *)&buf[2] + 1) = a1;
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = v322;
            _os_log_error_impl(&dword_1E1EA4000, v272, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d %@(%p) Not allowed to force algorithm config for mode=%d yet!", (uint8_t *)buf, 0x36u);
          }
        }
      }
LABEL_320:
      *(_DWORD *)(a1 + 1140) = v329[(int)v330];
      *(double *)(a1 + 1152) = micro();
      unsigned int v273 = VCDefaults_GetIntValueForKey(@"forcedInitialBitrate", *(unsigned int *)(a1 + 1140));
      if (v273 == *(_DWORD *)(a1 + 1140)) {
        goto LABEL_334;
      }
      int v274 = v331;
      int v275 = HIDWORD(v330) + 1;
      v276 = &vcRateControlTierBitrates[SHIDWORD(v330)];
      do
      {
        unsigned int v277 = *v276--;
        --v275;
      }
      while (v277 > v273);
      if (v275 > v331) {
        int v274 = v275;
      }
      LODWORD(v330) = v274;
      *(_DWORD *)(a1 + 1140) = v329[v274];
      if (objc_opt_class() == a1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          goto LABEL_334;
        }
        uint64_t v279 = VRTraceErrorLogLevelToCSTR();
        v280 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_334;
        }
        int v281 = *(_DWORD *)(a1 + 1140);
        LODWORD(buf[0]) = 136316162;
        *(void *)((char *)buf + 4) = v279;
        WORD6(buf[0]) = 2080;
        *(void *)((char *)buf + 14) = "_AVCRateController_UpdateInitialBitrateFromDefault";
        WORD3(buf[1]) = 1024;
        DWORD2(buf[1]) = 1873;
        WORD6(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 14) = v281;
        WORD1(buf[2]) = 1024;
        DWORD1(buf[2]) = v330;
        v282 = "AVCRC [%s] %s:%d Forced the initialBitrate=%u, initialTierIndex=%d";
        v283 = v280;
        uint32_t v284 = 40;
LABEL_381:
        _os_log_error_impl(&dword_1E1EA4000, v283, OS_LOG_TYPE_ERROR, v282, (uint8_t *)buf, v284);
        goto LABEL_334;
      }
      if (objc_opt_respondsToSelector()) {
        v278 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
      }
      else {
        v278 = &stru_1F3D3E450;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v285 = VRTraceErrorLogLevelToCSTR();
        v286 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v321 = *(_DWORD *)(a1 + 1140);
          LODWORD(buf[0]) = 136316674;
          *(void *)((char *)buf + 4) = v285;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_UpdateInitialBitrateFromDefault";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1873;
          WORD6(buf[1]) = 2112;
          *(void *)((char *)&buf[1] + 14) = v278;
          WORD3(buf[2]) = 2048;
          *((void *)&buf[2] + 1) = a1;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v321;
          WORD3(buf[3]) = 1024;
          DWORD2(buf[3]) = v330;
          v282 = "AVCRC [%s] %s:%d %@(%p) Forced the initialBitrate=%u, initialTierIndex=%d";
          v283 = v286;
          uint32_t v284 = 60;
          goto LABEL_381;
        }
      }
LABEL_334:
      if (*(double *)&v413 >= 0.01) {
        goto LABEL_344;
      }
      _AVCRateController_ChangeECNSupport(a1, 0, 0);
      if (objc_opt_class() == a1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          goto LABEL_344;
        }
        uint64_t v288 = VRTraceErrorLogLevelToCSTR();
        v289 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_344;
        }
        int v290 = *(unsigned __int8 *)(a1 + 1624);
        LODWORD(buf[0]) = 136316930;
        *(void *)((char *)buf + 4) = v288;
        WORD6(buf[0]) = 2080;
        *(void *)((char *)buf + 14) = "_AVCRateController_ForceECNSupportToAlgorithmConfig";
        WORD3(buf[1]) = 1024;
        DWORD2(buf[1]) = 1843;
        WORD6(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 14) = v290;
        WORD1(buf[2]) = 2048;
        *(void *)((char *)&buf[2] + 4) = v413;
        WORD6(buf[2]) = 1024;
        *(_DWORD *)((char *)&buf[2] + 14) = v412;
        WORD1(buf[3]) = 1024;
        DWORD1(buf[3]) = HIDWORD(v411);
        WORD4(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 10) = v411;
        v291 = "AVCRC [%s] %s:%d Forced the default ECN settings to=%d with ceRatioDurationToRTTFactor=%f, rampDownECNBit"
               "rateLow=%u, rampDownECNBitrateMedium=%u, rampDownECNBitrateHigh=%u";
        v292 = v289;
        uint32_t v293 = 62;
LABEL_379:
        _os_log_error_impl(&dword_1E1EA4000, v292, OS_LOG_TYPE_ERROR, v291, (uint8_t *)buf, v293);
        goto LABEL_344;
      }
      if (objc_opt_respondsToSelector()) {
        v287 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
      }
      else {
        v287 = &stru_1F3D3E450;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v294 = VRTraceErrorLogLevelToCSTR();
        v295 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v320 = *(unsigned __int8 *)(a1 + 1624);
          LODWORD(buf[0]) = 136317442;
          *(void *)((char *)buf + 4) = v294;
          WORD6(buf[0]) = 2080;
          *(void *)((char *)buf + 14) = "_AVCRateController_ForceECNSupportToAlgorithmConfig";
          WORD3(buf[1]) = 1024;
          DWORD2(buf[1]) = 1843;
          WORD6(buf[1]) = 2112;
          *(void *)((char *)&buf[1] + 14) = v287;
          WORD3(buf[2]) = 2048;
          *((void *)&buf[2] + 1) = a1;
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v320;
          WORD3(buf[3]) = 2048;
          *((void *)&buf[3] + 1) = v413;
          LOWORD(buf[4]) = 1024;
          *(_DWORD *)((char *)&buf[4] + 2) = v412;
          WORD3(buf[4]) = 1024;
          DWORD2(buf[4]) = HIDWORD(v411);
          WORD6(buf[4]) = 1024;
          *(_DWORD *)((char *)&buf[4] + 14) = v411;
          v291 = "AVCRC [%s] %s:%d %@(%p) Forced the default ECN settings to=%d with ceRatioDurationToRTTFactor=%f, rampD"
                 "ownECNBitrateLow=%u, rampDownECNBitrateMedium=%u, rampDownECNBitrateHigh=%u";
          v292 = v295;
          uint32_t v293 = 82;
          goto LABEL_379;
        }
      }
LABEL_344:
      uint64_t v296 = v361;
      BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"enableBytesInFlightAdaptation", BoolValueForKey);
      unsigned __int8 v361 = VCDefaults_GetBoolValueForKey(@"rateControlContinuousTierAlgorithm", v296);
      VCRateControlCongestionLevel_PopulateCongestionLevelThresholds(buf);
      long long v422 = buf[6];
      long long v423 = buf[7];
      long long v424 = buf[8];
      long long v425 = buf[9];
      long long v418 = buf[2];
      long long v419 = buf[3];
      long long v420 = buf[4];
      long long v421 = buf[5];
      long long v416 = buf[0];
      long long v417 = buf[1];
      uint64_t v297 = *(void *)(a1 + 1808);
      if (v297)
      {
        VCRateControlAlgorithm_Configure(v297, (uint64_t)&v328);
        uint64_t v298 = *(void *)(a1 + 1808);
        if (v298)
        {
          uint64_t v299 = *(void *)(a1 + 1304);
          if (v299) {
            VCRateControlAlgorithm_EnableBasebandDump(v298, v299);
          }
        }
      }
      else
      {
        switch(*v326)
        {
          case 1:
          case 3:
          case 7:
            BOOL v300 = BoolValueForKey;
            if (v361)
            {
              v301 = objc_alloc_init(VCRateControlAlgorithmLayeredContinuousTier);
              *(void *)(a1 + 1808) = v301;
              _ZF = !v300;
              int v303 = 3;
            }
            else
            {
              v301 = objc_alloc_init(VCRateControlAlgorithmStabilizedNOWRD);
              *(void *)(a1 + 1808) = v301;
              _ZF = !v300;
              int v303 = 1;
            }
            if (_ZF) {
              ++v303;
            }
            *(_DWORD *)(a1 + 1800) = v303;
            goto LABEL_362;
          case 2:
            v304 = VCRateControlAlgorithmStabilizedNOWRD;
            goto LABEL_361;
          case 4:
          case 5:
            v304 = VCRateControlAlgorithmSparseNOWRD;
            goto LABEL_361;
          case 8:
          case 9:
            v305 = off_1E6DB3058;
            if (v361) {
              v305 = off_1E6DB3050;
            }
            *(void *)(a1 + 1808) = objc_alloc_init(*v305);
            objc_msgSend((id)objc_msgSend((id)a1, "statisticsCollector"), "setMaxBitrate:", *(unsigned int *)(a1 + 68));
            v301 = *(VCRateControlAlgorithmLayeredContinuousTier **)(a1 + 1808);
            goto LABEL_362;
          case 10:
            v304 = VCRateControlAlgorithmTelephony;
LABEL_361:
            v301 = (VCRateControlAlgorithmLayeredContinuousTier *)objc_alloc_init(v304);
            *(void *)(a1 + 1808) = v301;
LABEL_362:
            if (v301)
            {
              VCRateControlAlgorithm_Configure((uint64_t)v301, (uint64_t)&v328);
              VCRateControlAlgorithm_EnableLogDump(*(void *)(a1 + 1808), *(void *)(a1 + 1288), *(unsigned char *)(a1 + 1344));
              if (*(void *)(a1 + 48)) {
                objc_msgSend(*(id *)(a1 + 1808), "setMediaController:");
              }
              _AVCRateController_RegisterStatisticsChangeHandlers(a1);
            }
            break;
          default:
            break;
        }
      }
      _AVCRateController_NotifyTargetBitrateChange(a1);
      v306 = *(void **)(a1 + 1808);
      if (!v306) {
        goto LABEL_376;
      }
      [v306 config];
      v307 = *(void **)(a1 + 1808);
      int v308 = v432;
      if (v307)
      {
        [v307 reportStatistics];
        if (!v308 || DWORD1(v430[0])) {
          goto LABEL_376;
        }
        v309 = *(void **)(a1 + 1808);
        v428 = @"SBVERS";
        v310 = NSNumber;
        if (v309)
        {
          [v309 reportStatistics];
          uint64_t v311 = BYTE12(v427);
LABEL_375:
          uint64_t v429 = [v310 numberWithUnsignedChar:v311];
          [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v429 forKeys:&v428 count:1];
          reportingGenericEvent();
          goto LABEL_376;
        }
LABEL_374:
        uint64_t v311 = 0;
        long long v427 = 0u;
        long long v426 = 0u;
        goto LABEL_375;
      }
      memset(v430, 0, sizeof(v430));
      if (v432)
      {
        v428 = @"SBVERS";
        v310 = NSNumber;
        goto LABEL_374;
      }
LABEL_376:
      uint64_t v312 = v331;
      *(_DWORD *)(a1 + 1144) = vcRateControlTierBitrates[SHIDWORD(v330)];
      *(_DWORD *)(a1 + 1148) = vcRateControlTierBitrates[v312];
      *(void *)&long long v426 = @"maxTargetBitrate";
      *(void *)&v430[0] = [NSNumber numberWithDouble:(double)(*(_DWORD *)(a1 + 68) / 0x3E8u)];
      [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v430 forKeys:&v426 count:1];
      reportingGenericEvent();
      unsigned int v313 = *(_DWORD *)(a1 + 1800);
      unsigned int v314 = *(_DWORD *)(a1 + 56);
      uint64_t v327 = *(void *)(a1 + 60);
      int32x2_t v315 = *(int32x2_t *)(a1 + 1144);
      double v316 = micro();
      unsigned int v317 = *(_DWORD *)(a1 + 1140);
      memset((char *)&buf[4] + 8, 0, 72);
      *(void *)&buf[0] = 0xAAAAAAAA00000004;
      BYTE8(buf[0]) = 0;
      *(_DWORD *)((char *)buf + 9) = -1431655766;
      HIDWORD(buf[0]) = -1431655766;
      buf[1] = *(unint64_t *)&v316;
      *(void *)&buf[2] = v317;
      BYTE8(buf[2]) = 0;
      *(_DWORD *)((char *)&buf[2] + 9) = -1431655766;
      HIDWORD(buf[2]) = -1431655766;
      *(void *)&buf[3] = __PAIR64__(v314, v313);
      *(void *)&long long v318 = v327;
      *((int32x2_t *)&v318 + 1) = vrev64_s32(v315);
      *(_OWORD *)((char *)&buf[3] + 8) = v318;
      VCReporting_DumpIntoDataStore();
      int v44 = *(_DWORD *)(a1 + 96);
LABEL_377:
      VCStatisticsCollector_SetFastSuddenBandwidthDetectionEnabled((uint64_t)v6, (v44 & 0x10) != 0);
      return [v6 setServerBag:*(void *)(a1 + 1504)];
    case 8:
    case 9:
      uint64_t v108 = 53;
      do
        unsigned int v109 = vcRateControlTierBitrates[v108--];
      while (v109 > *(_DWORD *)(a1 + 68));
      uint64_t v110 = 3;
      if ((int)v108 + 1 > 3) {
        int v111 = v108 + 1;
      }
      else {
        int v111 = 3;
      }
      HIDWORD(v330) = v111;
      do
        unsigned int v112 = vcRateControlTierBitrates[v110++];
      while (v112 < *(_DWORD *)(a1 + 72));
      int v113 = v110 - 1;
      uint64_t v114 = 53;
      if ((int)v110 - 1 >= 53) {
        int v115 = 53;
      }
      else {
        int v115 = v110 - 1;
      }
      int v331 = v115;
      unsigned int v116 = *(_DWORD *)(a1 + 76);
      if (!v116) {
        unsigned int v116 = 11500000;
      }
      if (v113 < 53) {
        uint64_t v114 = v113;
      }
      int v117 = v114 - 1;
      long long v118 = &vcRateControlTierBitrates[v114];
      do
      {
        unsigned int v119 = *v118++;
        ++v117;
      }
      while (v119 < v116);
      if (v117 < v111) {
        int v111 = v117;
      }
      LODWORD(v330) = v111;
      double DoubleValueForKey = VCDefaults_GetDoubleValueForKey(@"rampDownNWConnectionDelayThresholdMin", 0.02);
      uint64_t v392 = 0x4000000000000000;
      int v338 = 4;
      DWORD2(v337) = 0;
      *(void *)&long long v354 = 0x3FE8000000000000;
      if (*v326 == 8)
      {
        unsigned int v120 = *(_DWORD *)(a1 + 68);
        unsigned int v121 = *(_DWORD *)(a1 + 72);
        if (v121)
        {
          if (v120 == 105566000) {
            unsigned int v122 = 6;
          }
          else {
            unsigned int v122 = 4;
          }
          BOOL v123 = v120 / v121 > v122;
        }
        else
        {
          BOOL v123 = 1;
        }
        HIBYTE(v363) = v123;
        unsigned int v136 = v120 >> 1;
        uint64_t v137 = 53;
        do
          unsigned int v138 = vcRateControlTierBitrates[v137--];
        while (v138 > v136);
        if ((int)v137 + 1 > 3) {
          int v139 = v137 + 1;
        }
        else {
          int v139 = 3;
        }
        int v340 = v139;
        unsigned __int8 v361 = *(unsigned char *)(a1 + 98) & 1;
      }
      else
      {
        char v371 = 1;
        HIBYTE(v363) = 1;
        int v340 = 23;
      }
      goto LABEL_197;
    case 10:
      v329 = (int *)&vcTelephonyTierBitrates;
      int v331 = 0;
      uint64_t v330 = 0x100000001;
      *(void *)&long long v408 = 0x4024000000000000;
      uint64_t v407 = 0xA00000000;
      *((void *)&v408 + 1) = 0x4014000000000000;
      goto LABEL_197;
    default:
      goto LABEL_197;
  }
}

uint64_t _AVCRateController_RegisterStatisticsChangeHandlers(uint64_t result)
{
  v19[5] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = result;
  switch(*(_DWORD *)(result + 56))
  {
    case 1:
    case 2:
    case 3:
    case 7:
      BOOL v2 = *(void **)(result + 24);
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke;
      v19[3] = &unk_1E6DB3FA8;
      v19[4] = v1;
      [v2 registerStatisticsChangeHandlerWithType:2 handler:v19];
      BOOL v3 = *(void **)(v1 + 24);
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke_2;
      v18[3] = &unk_1E6DB3FA8;
      v18[4] = v1;
      [v3 registerStatisticsChangeHandlerWithType:1 handler:v18];
      int v4 = *(void **)(v1 + 24);
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke_3;
      void v17[3] = &unk_1E6DB3FA8;
      v17[4] = v1;
      [v4 registerStatisticsChangeHandlerWithType:11 handler:v17];
      unsigned int v5 = *(void **)(v1 + 24);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke_4;
      v16[3] = &unk_1E6DB3FA8;
      void v16[4] = v1;
      uint64_t v6 = v16;
      uint64_t v7 = 14;
      goto LABEL_7;
    case 4:
      int v9 = *(void **)(result + 24);
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke_7;
      v13[3] = &unk_1E6DB3FA8;
      v13[4] = v1;
      [v9 registerStatisticsChangeHandlerWithType:5 handler:v13];
      unsigned int v5 = *(void **)(v1 + 24);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke_8;
      v12[3] = &unk_1E6DB3FA8;
      v12[4] = v1;
      uint64_t v6 = v12;
      uint64_t v7 = 1;
      goto LABEL_7;
    case 5:
      unsigned int v5 = *(void **)(result + 24);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke_9;
      void v11[3] = &unk_1E6DB3FA8;
      v11[4] = v1;
      uint64_t v6 = v11;
      uint64_t v7 = 5;
      goto LABEL_7;
    case 8:
    case 9:
      uint64_t v8 = *(void **)(result + 24);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke_5;
      v15[3] = &unk_1E6DB3FA8;
      void v15[4] = v1;
      [v8 registerStatisticsChangeHandlerWithType:2 handler:v15];
      unsigned int v5 = *(void **)(v1 + 24);
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      v14[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke_6;
      v14[3] = &unk_1E6DB3FA8;
      void v14[4] = v1;
      uint64_t v6 = v14;
      uint64_t v7 = 11;
      goto LABEL_7;
    case 0xA:
      unsigned int v5 = *(void **)(result + 24);
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = ___AVCRateController_RegisterStatisticsChangeHandlers_block_invoke_10;
      v10[3] = &unk_1E6DB3FA8;
      v10[4] = v1;
      uint64_t v6 = v10;
      uint64_t v7 = 12;
LABEL_7:
      uint64_t result = [v5 registerStatisticsChangeHandlerWithType:v7 handler:v6];
      break;
    default:
      return result;
  }
  return result;
}

void sub_1E1EF1078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AVCRateController_ApplyServerBagLossBasedAdaptationConfig(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a1 + 1504);
  int v5 = [v4 containsAllSecondaryKeysWithPrimaryKey:@"lossBasedAdaptation"];
  if (v5)
  {
    objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"lossBasedAdaptation", @"packetLossRateThresholdInitial", 0), "doubleValue");
    a2[90] = v6;
    objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"lossBasedAdaptation", @"packetLossRateThresholdMin", 0), "doubleValue");
    a2[91] = v7;
    objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"lossBasedAdaptation", @"packetLossRateThresholdMax", 0), "doubleValue");
    a2[92] = v8;
    objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"lossBasedAdaptation", @"packetLossRateThresholdTarget", 0), "doubleValue");
    a2[93] = v9;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v10 = VRTraceErrorLogLevelToCSTR();
    __int16 v11 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = [@"lossBasedAdaptation" UTF8String];
      uint64_t v13 = a2[90];
      uint64_t v14 = a2[91];
      uint64_t v15 = a2[92];
      uint64_t v16 = a2[93];
      int v17 = 136317442;
      uint64_t v18 = v10;
      __int16 v19 = 2080;
      uint64_t v20 = "AVCRateController_ApplyServerBagLossBasedAdaptationConfig";
      __int16 v21 = 1024;
      int v22 = 1616;
      __int16 v23 = 2048;
      uint64_t v24 = a1;
      __int16 v25 = 2080;
      uint64_t v26 = v12;
      __int16 v27 = 1024;
      int v28 = v5;
      __int16 v29 = 2048;
      uint64_t v30 = v13;
      __int16 v31 = 2048;
      uint64_t v32 = v14;
      __int16 v33 = 2048;
      uint64_t v34 = v15;
      __int16 v35 = 2048;
      uint64_t v36 = v16;
      _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d packetLossRateThresholdInitial=%f packetLossRateThresholdMin=%f packetLossRateThresholdMax=%f packetLossRateThresholdTarget=%f", (uint8_t *)&v17, 0x5Eu);
    }
  }
}

void _AVCRateController_ApplyServerBagBasebandConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a1 + 1504);
  int v5 = [v4 containsAllSecondaryKeysWithPrimaryKey:@"baseband"];
  if (v5)
  {
    int v6 = objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"baseband", @"disableBBAdaptation", 0), "BOOLValue") ^ 1;
    if (!*(unsigned char *)(a2 + 371)) {
      LOBYTE(v6) = 0;
    }
    *(unsigned char *)(a2 + 371) = v6;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    uint64_t v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = [@"baseband" UTF8String];
      int v10 = *(unsigned __int8 *)(a2 + 371);
      int v11 = 136316674;
      uint64_t v12 = v7;
      __int16 v13 = 2080;
      uint64_t v14 = "_AVCRateController_ApplyServerBagBasebandConfig";
      __int16 v15 = 1024;
      int v16 = 1626;
      __int16 v17 = 2048;
      uint64_t v18 = a1;
      __int16 v19 = 2080;
      uint64_t v20 = v9;
      __int16 v21 = 1024;
      int v22 = v5;
      __int16 v23 = 1024;
      int v24 = v10;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d basebandAdaptationEnabled=%d", (uint8_t *)&v11, 0x3Cu);
    }
  }
}

void _AVCRateController_ApplyServerBagSmartBrakeConfig(void *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)a1[188];
  int v5 = [v4 containsAllSecondaryKeysWithPrimaryKey:@"smartBrake"];
  if (v5) {
    *(_DWORD *)(a2 + 840) = objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"smartBrake", @"strategyNum", 0), "intValue");
  }
  if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [@"smartBrake" UTF8String];
        int v10 = *(_DWORD *)(a2 + 840);
        int v18 = 136316418;
        uint64_t v19 = v7;
        __int16 v20 = 2080;
        __int16 v21 = "_AVCRateController_ApplyServerBagSmartBrakeConfig";
        __int16 v22 = 1024;
        int v23 = 1646;
        __int16 v24 = 2080;
        uint64_t v25 = v9;
        __int16 v26 = 1024;
        *(_DWORD *)__int16 v27 = v5;
        *(_WORD *)&v27[4] = 1024;
        *(_DWORD *)&v27[6] = v10;
        int v11 = "AVCRC [%s] %s:%d Config for key=%s serverBagContainsGroup=%d smartBrakeStrategy=%u";
        uint64_t v12 = v8;
        uint32_t v13 = 50;
LABEL_13:
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v18, v13);
      }
    }
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      int v6 = (__CFString *)[a1 performSelector:sel_logPrefix];
    }
    else {
      int v6 = &stru_1F3D3E450;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      __int16 v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = [@"smartBrake" UTF8String];
        int v17 = *(_DWORD *)(a2 + 840);
        int v18 = 136316930;
        uint64_t v19 = v14;
        __int16 v20 = 2080;
        __int16 v21 = "_AVCRateController_ApplyServerBagSmartBrakeConfig";
        __int16 v22 = 1024;
        int v23 = 1646;
        __int16 v24 = 2112;
        uint64_t v25 = (uint64_t)v6;
        __int16 v26 = 2048;
        *(void *)__int16 v27 = a1;
        *(_WORD *)&v27[8] = 2080;
        uint64_t v28 = v16;
        __int16 v29 = 1024;
        int v30 = v5;
        __int16 v31 = 1024;
        int v32 = v17;
        int v11 = "AVCRC [%s] %s:%d %@(%p) Config for key=%s serverBagContainsGroup=%d smartBrakeStrategy=%u";
        uint64_t v12 = v15;
        uint32_t v13 = 70;
        goto LABEL_13;
      }
    }
  }
}

void _AVCRateController_ApplyServerBagECNConfig(void *a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)a1[188];
  int v5 = [v4 containsAllSecondaryKeysWithPrimaryKey:@"l4secn"];
  if (v5)
  {
    *(_DWORD *)(a2 + 808) = 1000
                          * objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"l4secn", @"ecnBitrateLow", 0), "intValue");
    *(_DWORD *)(a2 + 804) = 1000
                          * objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"l4secn", @"ecnBitrateMedium", 0), "intValue");
    *(_DWORD *)(a2 + 800) = 1000
                          * objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"l4secn", @"ecnBitrateHigh", 0), "intValue");
    *(double *)(a2 + 816) = (double)(int)objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"l4secn", @"ecnCEDurationToRTT", 0), "intValue");
  }
  if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [@"l4secn" UTF8String];
        uint64_t v10 = *(void *)(a2 + 816);
        int v11 = *(_DWORD *)(a2 + 808);
        int v12 = *(_DWORD *)(a2 + 804);
        int v13 = *(_DWORD *)(a2 + 800);
        int v24 = 136317186;
        uint64_t v25 = v7;
        __int16 v26 = 2080;
        __int16 v27 = "_AVCRateController_ApplyServerBagECNConfig";
        __int16 v28 = 1024;
        int v29 = 1658;
        __int16 v30 = 2080;
        uint64_t v31 = v9;
        __int16 v32 = 1024;
        *(_DWORD *)uint64_t v33 = v5;
        *(_WORD *)&v33[4] = 2048;
        *(void *)&v33[6] = v10;
        *(_WORD *)&v33[14] = 1024;
        *(_DWORD *)&v33[16] = v11;
        *(_WORD *)uint64_t v34 = 1024;
        *(_DWORD *)&v34[2] = v12;
        LOWORD(v35) = 1024;
        *(_DWORD *)((char *)&v35 + 2) = v13;
        uint64_t v14 = "AVCRC [%s] %s:%d Config for key=%s serverBagContainsGroup=%d ceRatioDurationToRTTFactor=%f, rampDownECNBit"
              "rateLow=%u, rampDownECNBitrateMedium=%u, rampDownECNBitrateHigh=%u";
        __int16 v15 = v8;
        uint32_t v16 = 72;
LABEL_13:
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v24, v16);
      }
    }
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      int v6 = (__CFString *)[a1 performSelector:sel_logPrefix];
    }
    else {
      int v6 = &stru_1F3D3E450;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      int v18 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = [@"l4secn" UTF8String];
        uint64_t v20 = *(void *)(a2 + 816);
        int v21 = *(_DWORD *)(a2 + 808);
        int v22 = *(_DWORD *)(a2 + 804);
        int v23 = *(_DWORD *)(a2 + 800);
        int v24 = 136317698;
        uint64_t v25 = v17;
        __int16 v26 = 2080;
        __int16 v27 = "_AVCRateController_ApplyServerBagECNConfig";
        __int16 v28 = 1024;
        int v29 = 1658;
        __int16 v30 = 2112;
        uint64_t v31 = (uint64_t)v6;
        __int16 v32 = 2048;
        *(void *)uint64_t v33 = a1;
        *(_WORD *)&v33[8] = 2080;
        *(void *)&v33[10] = v19;
        *(_WORD *)&v33[18] = 1024;
        *(_DWORD *)uint64_t v34 = v5;
        *(_WORD *)&v34[4] = 2048;
        uint64_t v35 = v20;
        __int16 v36 = 1024;
        int v37 = v21;
        __int16 v38 = 1024;
        int v39 = v22;
        __int16 v40 = 1024;
        int v41 = v23;
        uint64_t v14 = "AVCRC [%s] %s:%d %@(%p) Config for key=%s serverBagContainsGroup=%d ceRatioDurationToRTTFactor=%f, rampDow"
              "nECNBitrateLow=%u, rampDownECNBitrateMedium=%u, rampDownECNBitrateHigh=%u";
        __int16 v15 = v18;
        uint32_t v16 = 92;
        goto LABEL_13;
      }
    }
  }
}

void _AVCRateController_ApplyServerBagBIFConfig(void *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)a1[188];
  int v5 = [v4 containsAllSecondaryKeysWithPrimaryKey:@"bif"];
  if (v5) {
    *(unsigned char *)(a2 + 368) &= objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"bif", @"enabled", 0), "intValue");
  }
  if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [@"bif" UTF8String];
        int v10 = *(unsigned __int8 *)(a2 + 368);
        int v18 = 136316418;
        uint64_t v19 = v7;
        __int16 v20 = 2080;
        int v21 = "_AVCRateController_ApplyServerBagBIFConfig";
        __int16 v22 = 1024;
        int v23 = 1667;
        __int16 v24 = 2080;
        uint64_t v25 = v9;
        __int16 v26 = 1024;
        *(_DWORD *)__int16 v27 = v5;
        *(_WORD *)&v27[4] = 1024;
        *(_DWORD *)&v27[6] = v10;
        int v11 = "AVCRC [%s] %s:%d Config for key=%s serverBagContainsGroup=%d bytesInFlightAdaptationEnabled=%d";
        int v12 = v8;
        uint32_t v13 = 50;
LABEL_13:
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v18, v13);
      }
    }
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      int v6 = (__CFString *)[a1 performSelector:sel_logPrefix];
    }
    else {
      int v6 = &stru_1F3D3E450;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      __int16 v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = [@"bif" UTF8String];
        int v17 = *(unsigned __int8 *)(a2 + 368);
        int v18 = 136316930;
        uint64_t v19 = v14;
        __int16 v20 = 2080;
        int v21 = "_AVCRateController_ApplyServerBagBIFConfig";
        __int16 v22 = 1024;
        int v23 = 1667;
        __int16 v24 = 2112;
        uint64_t v25 = (uint64_t)v6;
        __int16 v26 = 2048;
        *(void *)__int16 v27 = a1;
        *(_WORD *)&v27[8] = 2080;
        uint64_t v28 = v16;
        __int16 v29 = 1024;
        int v30 = v5;
        __int16 v31 = 1024;
        int v32 = v17;
        int v11 = "AVCRC [%s] %s:%d %@(%p) Config for key=%s serverBagContainsGroup=%d bytesInFlightAdaptationEnabled=%d";
        int v12 = v15;
        uint32_t v13 = 70;
        goto LABEL_13;
      }
    }
  }
}

void _AVCRateController_ApplyServerBagContinuousAdaptationConfig(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)a1[188];
  int v5 = [v4 containsAllSecondaryKeysWithPrimaryKey:@"continuous"];
  if (v5)
  {
    objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"continuous", @"timeFactorMedium", 0), "doubleValue");
    *(void *)(a2 + 344) = v6;
    objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"continuous", @"timeFactorHigh", 0), "doubleValue");
    *(void *)(a2 + 352) = v7;
    objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"continuous", @"timeFactorExcellent", 0), "doubleValue");
    *(void *)(a2 + 360) = v8;
    *(unsigned char *)(a2 + 369) = *(double *)(a2 + 344) > 0.5;
  }
  if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      int v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = [@"continuous" UTF8String];
        int v13 = *(unsigned __int8 *)(a2 + 369);
        int v21 = 136316418;
        uint64_t v22 = v10;
        __int16 v23 = 2080;
        __int16 v24 = "_AVCRateController_ApplyServerBagContinuousAdaptationConfig";
        __int16 v25 = 1024;
        int v26 = 1680;
        __int16 v27 = 2080;
        uint64_t v28 = v12;
        __int16 v29 = 1024;
        *(_DWORD *)int v30 = v5;
        *(_WORD *)&v30[4] = 1024;
        *(_DWORD *)&v30[6] = v13;
        uint64_t v14 = "AVCRC [%s] %s:%d Config for key=%s serverBagContainsGroup=%d useContinuousAdaptationAlgorithm=%d";
        __int16 v15 = v11;
        uint32_t v16 = 50;
LABEL_13:
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v21, v16);
      }
    }
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      uint64_t v9 = (__CFString *)[a1 performSelector:sel_logPrefix];
    }
    else {
      uint64_t v9 = &stru_1F3D3E450;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      int v18 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = [@"continuous" UTF8String];
        int v20 = *(unsigned __int8 *)(a2 + 369);
        int v21 = 136316930;
        uint64_t v22 = v17;
        __int16 v23 = 2080;
        __int16 v24 = "_AVCRateController_ApplyServerBagContinuousAdaptationConfig";
        __int16 v25 = 1024;
        int v26 = 1680;
        __int16 v27 = 2112;
        uint64_t v28 = (uint64_t)v9;
        __int16 v29 = 2048;
        *(void *)int v30 = a1;
        *(_WORD *)&v30[8] = 2080;
        uint64_t v31 = v19;
        __int16 v32 = 1024;
        int v33 = v5;
        __int16 v34 = 1024;
        int v35 = v20;
        uint64_t v14 = "AVCRC [%s] %s:%d %@(%p) Config for key=%s serverBagContainsGroup=%d useContinuousAdaptationAlgorithm=%d";
        __int16 v15 = v18;
        uint32_t v16 = 70;
        goto LABEL_13;
      }
    }
  }
}

void _AVCRateController_ApplyServerBagLowLatencyContinuousAdaptationConfig(void *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)a1[188];
  int v5 = [v4 containsAllSecondaryKeysWithPrimaryKey:@"continuousLL"];
  if (v5)
  {
    objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"continuousLL", @"speedFactorRampUp", 0), "doubleValue");
    *(void *)(a2 + 584) = v6;
    objc_msgSend((id)objc_msgSend(v4, "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"continuousLL", @"speedFactorRampDown", 0), "doubleValue");
    *(void *)(a2 + 576) = v7;
    *(unsigned char *)(a2 + 369) = *(double *)(a2 + 584) > 0.0;
  }
  if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = [@"continuousLL" UTF8String];
        int v12 = *(unsigned __int8 *)(a2 + 369);
        uint64_t v13 = *(void *)(a2 + 584);
        uint64_t v14 = *(void *)(a2 + 576);
        int v24 = 136316930;
        uint64_t v25 = v9;
        __int16 v26 = 2080;
        __int16 v27 = "_AVCRateController_ApplyServerBagLowLatencyContinuousAdaptationConfig";
        __int16 v28 = 1024;
        int v29 = 1692;
        __int16 v30 = 2080;
        uint64_t v31 = v11;
        __int16 v32 = 1024;
        *(_DWORD *)int v33 = v5;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = v12;
        *(_WORD *)__int16 v34 = 2048;
        *(void *)&v34[2] = v13;
        *(_WORD *)int v35 = 2048;
        *(void *)&v35[2] = v14;
        __int16 v15 = "AVCRC [%s] %s:%d Config for key=%s serverBagContainsGroup=%d useContinuousAdaptationAlgorithm=%d, rampUpCo"
              "ntinuousTierSpeedFactor=%f, rampDownContinuousTierSpeedFactor=%f";
        uint32_t v16 = v10;
        uint32_t v17 = 70;
LABEL_13:
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v24, v17);
      }
    }
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      uint64_t v8 = (__CFString *)[a1 performSelector:sel_logPrefix];
    }
    else {
      uint64_t v8 = &stru_1F3D3E450;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v18 = VRTraceErrorLogLevelToCSTR();
      uint64_t v19 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = [@"continuousLL" UTF8String];
        int v21 = *(unsigned __int8 *)(a2 + 369);
        uint64_t v22 = *(void *)(a2 + 584);
        uint64_t v23 = *(void *)(a2 + 576);
        int v24 = 136317442;
        uint64_t v25 = v18;
        __int16 v26 = 2080;
        __int16 v27 = "_AVCRateController_ApplyServerBagLowLatencyContinuousAdaptationConfig";
        __int16 v28 = 1024;
        int v29 = 1692;
        __int16 v30 = 2112;
        uint64_t v31 = (uint64_t)v8;
        __int16 v32 = 2048;
        *(void *)int v33 = a1;
        *(_WORD *)&v33[8] = 2080;
        *(void *)__int16 v34 = v20;
        *(_WORD *)&v34[8] = 1024;
        *(_DWORD *)int v35 = v5;
        *(_WORD *)&v35[4] = 1024;
        *(_DWORD *)&v35[6] = v21;
        __int16 v36 = 2048;
        uint64_t v37 = v22;
        __int16 v38 = 2048;
        uint64_t v39 = v23;
        __int16 v15 = "AVCRC [%s] %s:%d %@(%p) Config for key=%s serverBagContainsGroup=%d useContinuousAdaptationAlgorithm=%d, r"
              "ampUpContinuousTierSpeedFactor=%f, rampDownContinuousTierSpeedFactor=%f";
        uint32_t v16 = v19;
        uint32_t v17 = 90;
        goto LABEL_13;
      }
    }
  }
}

void _AVCRateController_NotifyTargetBitrateChange(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  double v2 = micro();
  if (v2 - *(double *)(a1 + 1352) > 3.0)
  {
    *(double *)(a1 + 1352) = v2;
    BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"forceBBFlush", 0);
    if (*(double *)(a1 + 1360) != (double)BoolValueForKey)
    {
      *(double *)(a1 + 1360) = (double)BoolValueForKey;
      VCRateControlMediaController_SetForceBBFlush(*(void *)(a1 + 48), BoolValueForKey, v2);
    }
    if (*(_DWORD *)(a1 + 56) == 5)
    {
      *(_DWORD *)(a1 + 1372) = [+[VCDefaults sharedInstance] rateControlForceRxCap];
      int v4 = [+[VCDefaults sharedInstance] rateControlForceRxRate];
    }
    else
    {
      *(_DWORD *)(a1 + 1372) = [+[VCDefaults sharedInstance] rateControlForceTxCap];
      int v4 = [+[VCDefaults sharedInstance] rateControlForceTxRate];
    }
    *(_DWORD *)(a1 + 1368) = v4;
    if (*(int *)(a1 + 1372) >= 10000)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v5 = VRTraceErrorLogLevelToCSTR();
        uint64_t v6 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v7 = *(_DWORD *)(a1 + 1372);
          *(_DWORD *)__int16 v34 = 136316162;
          *(void *)&v34[4] = v5;
          *(_WORD *)&v34[12] = 2080;
          *(void *)&v34[14] = "AVCRateController_LoadDefaultSettings";
          *(_WORD *)&v34[22] = 1024;
          *(_DWORD *)&v34[24] = 2781;
          *(_WORD *)&v34[28] = 2048;
          *(void *)&v34[30] = a1;
          *(_WORD *)&v34[38] = 1024;
          *(_DWORD *)&v34[40] = v7;
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d (%p) Forcing VCRateControl TxCap to %u from defaults", v34, 0x2Cu);
        }
      }
      long long v8 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)__int16 v34 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)&v34[16] = v8;
      *(_OWORD *)&v34[32] = *(_OWORD *)(a1 + 88);
      *(_DWORD *)&v34[12] = *(_DWORD *)(a1 + 1372);
      _AVCRateController_ConfigureInternal(a1, v34);
      int v4 = *(_DWORD *)(a1 + 1368);
    }
    if ((v4 & 0x80000000) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(_DWORD *)(a1 + 1368);
        *(_DWORD *)__int16 v34 = 136316162;
        *(void *)&v34[4] = v9;
        *(_WORD *)&v34[12] = 2080;
        *(void *)&v34[14] = "AVCRateController_LoadDefaultSettings";
        *(_WORD *)&v34[22] = 1024;
        *(_DWORD *)&v34[24] = 2787;
        *(_WORD *)&v34[28] = 2048;
        *(void *)&v34[30] = a1;
        *(_WORD *)&v34[38] = 1024;
        *(_DWORD *)&v34[40] = v11;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d (%p) Forcing VCRateControl TxRate to %u from defaults", v34, 0x2Cu);
      }
    }
    uint64_t v12 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a1 + 60) == 6) {
      char v13 = 1;
    }
    else {
      char v13 = [+[VCDefaults sharedInstance] rateControlAllowVideoStop];
    }
    VCRateControlMediaController_SetAllowVideoStop(v12, v13);
  }
  if (*(void *)(a1 + 16))
  {
    LODWORD(v14) = [*(id *)(a1 + 1808) targetBitrate];
    uint64_t v15 = [*(id *)(a1 + 1808) rateChangeCounter];
    int v16 = [*(id *)(a1 + 1808) targetBitrateTier];
    int v17 = v16;
    int v18 = *(_DWORD *)(a1 + 1368);
    if (v18 >= 0) {
      uint64_t v14 = v18;
    }
    else {
      uint64_t v14 = v14;
    }
    BOOL v19 = !v16
       || ([*(id *)(a1 + 1808) isRampingDown] & 1) != 0
       || *(_DWORD *)(a1 + 1172) != v17
       || (v15 - *(_DWORD *)(a1 + 1176)) > 9;
    if (*(_DWORD *)(a1 + 1164) == v14)
    {
      if (*(_DWORD *)(a1 + 1176) == v15) {
        LOBYTE(v19) = 0;
      }
      if (!v19) {
        return;
      }
    }
    else if (!v19)
    {
      return;
    }
    if (objc_opt_class() == a1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        goto LABEL_49;
      }
      uint64_t v21 = VRTraceErrorLogLevelToCSTR();
      uint64_t v22 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_49;
      }
      int v23 = *(_DWORD *)(a1 + 56);
      int v24 = *(_DWORD *)(a1 + 1164);
      int v25 = *(_DWORD *)(a1 + 1176);
      *(_DWORD *)__int16 v34 = 136317186;
      *(void *)&v34[4] = v21;
      *(_WORD *)&v34[12] = 2080;
      *(void *)&v34[14] = "_AVCRateController_NotifyTargetBitrateChange";
      *(_WORD *)&v34[22] = 1024;
      *(_DWORD *)&v34[24] = 2747;
      *(_WORD *)&v34[28] = 1024;
      *(_DWORD *)&v34[30] = v23;
      *(_WORD *)&v34[34] = 1024;
      *(_DWORD *)&v34[36] = v24;
      *(_WORD *)&v34[40] = 1024;
      *(_DWORD *)&v34[42] = v14;
      *(_WORD *)&v34[46] = 1024;
      *(_DWORD *)int v35 = v25;
      *(_WORD *)&v35[4] = 1024;
      *(_DWORD *)&v35[6] = v15;
      *(_WORD *)&unsigned char v35[10] = 1024;
      *(_DWORD *)&v35[12] = v17;
      __int16 v26 = "AVCRC [%s] %s:%d Notify target bitrate change for mode=%d oldTargetBitrate=%u to newTargetBitrate=%u, oldRat"
            "eChangeCounter=%u to newRateChangeCounter=%u, targetBitrateTier=%u";
      __int16 v27 = v22;
      uint32_t v28 = 64;
    }
    else
    {
      if (objc_opt_respondsToSelector()) {
        uint64_t v20 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
      }
      else {
        uint64_t v20 = &stru_1F3D3E450;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        goto LABEL_49;
      }
      uint64_t v29 = VRTraceErrorLogLevelToCSTR();
      __int16 v30 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_49;
      }
      int v31 = *(_DWORD *)(a1 + 56);
      int v32 = *(_DWORD *)(a1 + 1164);
      int v33 = *(_DWORD *)(a1 + 1176);
      *(_DWORD *)__int16 v34 = 136317698;
      *(void *)&v34[4] = v29;
      *(_WORD *)&v34[12] = 2080;
      *(void *)&v34[14] = "_AVCRateController_NotifyTargetBitrateChange";
      *(_WORD *)&v34[22] = 1024;
      *(_DWORD *)&v34[24] = 2747;
      *(_WORD *)&v34[28] = 2112;
      *(void *)&v34[30] = v20;
      *(_WORD *)&v34[38] = 2048;
      *(void *)&v34[40] = a1;
      *(_WORD *)int v35 = 1024;
      *(_DWORD *)&v35[2] = v31;
      *(_WORD *)&v35[6] = 1024;
      *(_DWORD *)&v35[8] = v32;
      *(_WORD *)&v35[12] = 1024;
      *(_DWORD *)&v35[14] = v14;
      *(_WORD *)&v35[18] = 1024;
      *(_DWORD *)&v35[20] = v33;
      LOWORD(v36) = 1024;
      *(_DWORD *)((char *)&v36 + 2) = v15;
      HIWORD(v36) = 1024;
      LODWORD(v37) = v17;
      __int16 v26 = "AVCRC [%s] %s:%d %@(%p) Notify target bitrate change for mode=%d oldTargetBitrate=%u to newTargetBitrate=%u,"
            " oldRateChangeCounter=%u to newRateChangeCounter=%u, targetBitrateTier=%u";
      __int16 v27 = v30;
      uint32_t v28 = 84;
    }
    _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, v26, v34, v28);
LABEL_49:
    *(_DWORD *)(a1 + 1164) = v14;
    *(_DWORD *)(a1 + 1168) = v17;
    objc_msgSend(*(id *)(a1 + 1832), "setTargetBitrate:", v14, *(_OWORD *)v34, *(void *)&v34[16], *(_OWORD *)&v34[24], *(void *)&v34[40], *(_OWORD *)v35, *(void *)&v35[16], v36, v37, v38);
    VCRateControlMediaController_SetTargetBitrate(*(void *)(a1 + 48), *(_DWORD *)(a1 + 1164));
    *(_DWORD *)(a1 + 1176) = v15;
    [*(id *)(a1 + 16) rateController:a1 targetBitrateDidChange:v14 rateChangeCounter:v15];
    *(_DWORD *)(a1 + 1172) = *(_DWORD *)(a1 + 1168);
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _AVCRateController_NotifyTargetBitrateChange_cold_1();
    }
  }
}

uint64_t _AVCRateController_MultiwayMaxTierFromServerBag(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 80)) {
    return 31;
  }
  int v2 = [*(id *)(a1 + 1504) containsAllSecondaryKeysWithPrimaryKey:@"maxBitrate"];
  if (v2)
  {
    unsigned int v3 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1504), "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"maxBitrate", @"burstyTrafficUplink", 0), "integerValue");
    unsigned int v4 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1504), "valueForSecondaryKeyWithPrimaryKey:secondaryKey:type:", @"maxBitrate", @"burstyTrafficDownlink", 0), "integerValue");
  }
  else
  {
    unsigned int v4 = 37;
    unsigned int v3 = 34;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    int v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136316930;
      uint64_t v9 = v6;
      __int16 v10 = 2080;
      int v11 = "_AVCRateController_MultiwayMaxTierFromServerBag";
      __int16 v12 = 1024;
      int v13 = 1815;
      __int16 v14 = 2048;
      uint64_t v15 = a1;
      __int16 v16 = 2080;
      uint64_t v17 = [@"maxBitrate" UTF8String];
      __int16 v18 = 1024;
      int v19 = v2;
      __int16 v20 = 1024;
      unsigned int v21 = v3;
      __int16 v22 = 1024;
      unsigned int v23 = v4;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d [%p] config for key=%s serverBagContainsGroup=%d burstyTrafficUplink=%d burstyTrafficDownlink=%d", (uint8_t *)&v8, 0x42u);
    }
  }
  if (*(_DWORD *)(a1 + 56) == 4) {
    return v3;
  }
  else {
    return v4;
  }
}

uint64_t _AVCRateController_ChangeECNSupport(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 1624) = a2;
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v6 = *(void **)(a1 + 16);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 1624);
    return [v6 rateController:a1 isECNEnabled:v7 isECNCapable:a3];
  }
  return result;
}

void _AVCRateController_DoRateControlWithStatistics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 1296);
  if (v10)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 56);
    if (v11 <= 9)
    {
      if (((1 << v11) & 0x8E) != 0)
      {
        __int16 v115 = *(_WORD *)(a2 + 68);
        RTPPackDouble(*(double *)(a2 + 80));
        VRLogfilePrint(v10, "%04X\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t%04X\t%u\n", v19, v20, v21, v22, v23, v24, v115);
        goto LABEL_9;
      }
      if (((1 << v11) & 0x30) != 0)
      {
        VRLogfilePrint(v10, "%04X\t%04X\t%u\t%u\t%u\t%u\t%u\t%.2f\t%u\t%u\t%.3f\t%u\t%f\n", a3, a4, a5, a6, a7, a8, *(_WORD *)(a2 + 28));
        goto LABEL_9;
      }
      if (((1 << v11) & 0x300) != 0)
      {
        __int16 v12 = *(_WORD *)(a2 + 68);
        RTPPackDouble(*(double *)(a2 + 80));
        VRLogfilePrint(v10, "%04X\t%u\t%u\t%u\t%u\t%u\t%04X\t%u\n", v13, v14, v15, v16, v17, v18, v12);
        goto LABEL_9;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v77 = VRTraceErrorLogLevelToCSTR();
      double v78 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v79 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v77;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_AVCRateController_PrintFeedbackMessage";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v137) = 2957;
        WORD2(v137) = 2048;
        *(void *)((char *)&v137 + 6) = a1;
        HIWORD(v137) = 1024;
        LODWORD(v138) = v79;
        _os_log_error_impl(&dword_1E1EA4000, v78, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d (%p) Configuration mode %d not supported", buf, 0x2Cu);
      }
    }
  }
LABEL_9:
  if (!_AVCRateController_DoRateControl(a1, a2)) {
    goto LABEL_17;
  }
  *(_DWORD *)(a1 + 1128) = [*(id *)(a1 + 1808) actualBitrate];
  if (*(_DWORD *)a2 == 2)
  {
    *(_DWORD *)(a1 + 1484) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 1488) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 1492) = *(unsigned __int16 *)(a2 + 184);
    int v25 = *(unsigned __int16 *)(a2 + 186);
    uint64_t v26 = 1496;
  }
  else
  {
    if (*(_DWORD *)a2 != 5) {
      goto LABEL_15;
    }
    *(_DWORD *)(a1 + 1264) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 1268) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 1260) = *(_DWORD *)(a2 + 36);
    int v25 = *(_DWORD *)(a2 + 40);
    uint64_t v26 = 1256;
  }
  *(_DWORD *)(a1 + v26) = v25;
LABEL_15:
  int v27 = *(unsigned __int8 *)(a2 + 192);
  if (v27 != *(unsigned __int8 *)(a1 + 1624)) {
    _AVCRateController_ChangeECNSupport(a1, v27 != 0, 1);
  }
LABEL_17:
  uint32_t v28 = *(void **)(a1 + 1808);
  if (v28)
  {
    [v28 reportStatistics];
    int v29 = v123;
  }
  else
  {
    int v29 = 0;
  }
  if (v29 != *(_DWORD *)(a1 + 1628))
  {
    *(_DWORD *)(a1 + 1628) = v29;
    __int16 v30 = *(void **)(a1 + 1808);
    if (!v30 || ([v30 reportStatistics], !v122))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        int v32 = NSNumber;
        int v33 = *(void **)(a1 + 1808);
        if (v33)
        {
          [v33 reportStatistics];
          uint64_t v34 = v121;
        }
        else
        {
          uint64_t v34 = 0;
        }
        CFDictionaryAddValue(Mutable, @"CongestionIndex", (const void *)[v32 numberWithUnsignedInt:v34]);
        int v35 = NSNumber;
        uint64_t v36 = *(void **)(a1 + 1808);
        if (v36)
        {
          [v36 reportStatistics];
          double v37 = v120 * 1000.0;
        }
        else
        {
          double v37 = 0.0;
        }
        CFDictionaryAddValue(Mutable, @"CongestionDuration", (const void *)[v35 numberWithDouble:ceil(v37)]);
        uint64_t v38 = NSNumber;
        uint64_t v39 = *(void **)(a1 + 1808);
        if (v39)
        {
          [v39 reportStatistics];
          double v40 = (double)(v119 / 1000);
        }
        else
        {
          double v40 = 0.0;
        }
        CFDictionaryAddValue(Mutable, @"StartTargetTxR", (const void *)[v38 numberWithDouble:v40]);
        int v41 = NSNumber;
        uint64_t v42 = *(void **)(a1 + 1808);
        if (v42)
        {
          [v42 reportStatistics];
          double v43 = (double)(v118 / 1000);
        }
        else
        {
          double v43 = 0.0;
        }
        CFDictionaryAddValue(Mutable, @"StartBWE", (const void *)[v41 numberWithDouble:v43]);
        int v44 = NSNumber;
        int v45 = *(void **)(a1 + 1808);
        if (v45)
        {
          [v45 reportStatistics];
          double v46 = (double)(v117 / 1000);
        }
        else
        {
          double v46 = 0.0;
        }
        CFDictionaryAddValue(Mutable, @"EndBWE", (const void *)[v44 numberWithDouble:v46]);
        reportingGenericEvent();
        CFRelease(Mutable);
        int v47 = *(void **)(a1 + 1808);
        if (v47)
        {
          [v47 reportStatistics];
          unsigned int v48 = v116;
          int v47 = *(void **)(a1 + 1808);
        }
        else
        {
          unsigned int v48 = 0;
        }
        v134[0] = 0;
        v134[1] = v134;
        v134[2] = 0x2020000000;
        int v135 = 0;
        v132[0] = 0;
        v132[1] = v132;
        v132[2] = 0x2020000000;
        int v133 = 0;
        v130[0] = 0;
        v130[1] = v130;
        v130[2] = 0x2020000000;
        int v131 = 0;
        if (v47)
        {
          [v47 reportStatistics];
          unsigned int v49 = v128;
        }
        else
        {
          unsigned int v49 = 0;
          long long v128 = 0u;
          long long v129 = 0u;
        }
        uint64_t v50 = *(void *)(a1 + 1640);
        dispatch_time_t v51 = dispatch_time(0, 5000000000);
        int v52 = *(NSObject **)(a1 + 1632);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___AVCRateController_SetupDelayedReportingSmartBrake_block_invoke;
        block[3] = &unk_1E6DB4018;
        block[4] = v50;
        void block[5] = v134;
        unsigned int v127 = v48;
        dispatch_after(v51, v52, block);
        dispatch_time_t v53 = dispatch_time(0, 15000000000);
        unsigned int v54 = *(NSObject **)(a1 + 1632);
        v124[0] = MEMORY[0x1E4F143A8];
        v124[1] = 3221225472;
        v124[2] = ___AVCRateController_SetupDelayedReportingSmartBrake_block_invoke_2;
        v124[3] = &unk_1E6DB4018;
        v124[4] = v50;
        v124[5] = v132;
        unsigned int v125 = v48;
        dispatch_after(v53, v54, v124);
        dispatch_time_t v55 = dispatch_time(0, 30000000000);
        int v56 = *(NSObject **)(a1 + 1632);
        *(void *)CMTime buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___AVCRateController_SetupDelayedReportingSmartBrake_block_invoke_3;
        *(void *)&long long v137 = &unk_1E6DB4040;
        *((void *)&v137 + 1) = v50;
        double v138 = COERCE_DOUBLE(v130);
        *(void *)&long long v140 = __PAIR64__(v49, v48);
        *(void *)&long long v139 = v134;
        *((void *)&v139 + 1) = v132;
        dispatch_after(v55, v56, buf);
        _Block_object_dispose(v130, 8);
        _Block_object_dispose(v132, 8);
        _Block_object_dispose(v134, 8);
      }
    }
  }
  _AVCRateController_ReportInitialRampUpDeltas(a1);
  if (*(int *)(a1 + 1372) > 0 || *(int *)(a1 + 1368) > 0) {
    goto LABEL_137;
  }
  double v57 = micro();
  int v58 = *(void **)(a1 + 1808);
  BOOL v59 = *(double *)(a1 + 1648) > (double)[v58 targetBitrate];
  *(double *)(a1 + 1648) = (double)[*(id *)(a1 + 1808) targetBitrate];
  if (v59
    || [v58 targetBitrate] < 0x8CA1
    || (unsigned int v60 = [v58 actualBitrate],
        (double)[*(id *)(a1 + 1808) targetBitrate] * 1.05 >= (double)v60))
  {
    *(void *)(a1 + 1416) = 0;
    goto LABEL_56;
  }
  double v61 = *(double *)(a1 + 1416);
  if (v61 == 0.0) {
    goto LABEL_54;
  }
  if (v57 - v61 >= 2.0)
  {
    reportingSymptom();
LABEL_54:
    *(double *)(a1 + 1416) = v57;
  }
LABEL_56:
  [v58 roundTripTime];
  if (v62 <= 0.001
    || ([v58 roundTripTime], v63 >= 0.02)
    || ([v58 packetLossRate], v64 >= 0.01)
    || ([v58 isSendBitrateLimited] & 1) != 0
    || [v58 targetBitrate] >= 0x2BF20
    || *(_DWORD *)(a1 + 68) < 0x37AA1u)
  {
    *(void *)(a1 + 1424) = 0;
    goto LABEL_67;
  }
  double v65 = *(double *)(a1 + 1424);
  if (v65 == 0.0) {
    goto LABEL_65;
  }
  if (v57 - v65 >= 10.0)
  {
    reportingSymptom();
LABEL_65:
    *(double *)(a1 + 1424) = v57;
  }
LABEL_67:
  [v58 roundTripTime];
  if (v66 >= 0.02
    || ([v58 packetLossRate], v67 >= 0.01)
    || ([v58 isSendBitrateLimited] & 1) != 0
    || [v58 targetBitrate] != *(_DWORD *)(a1 + 1440)
    || (unsigned int v68 = [v58 targetBitrate], v69 = *(_DWORD *)(a1 + 68), v69 <= 0x2BF20)
    || (double)v69 * 0.7 <= (double)v68)
  {
    *(void *)(a1 + 1432) = 0;
  }
  else
  {
    double v70 = *(double *)(a1 + 1432);
    if (v70 == 0.0)
    {
      *(double *)(a1 + 1432) = v57;
      *(_DWORD *)(a1 + 1440) = [v58 targetBitrate];
      double v70 = *(double *)(a1 + 1432);
    }
    if (v57 - v70 > 30.0) {
      reportingSymptom();
    }
  }
  [*(id *)(a1 + 1808) roundTripTime];
  if (v71 > 30.0)
  {
    unsigned int v72 = *(_DWORD *)(a1 + 1804);
    if (!v72 || v57 - (double)v72 > 30.0)
    {
      reportingSymptom();
      *(_DWORD *)(a1 + 1804) = v57;
    }
  }
  unsigned int v73 = *(void **)(a1 + 1808);
  int v74 = *(_DWORD *)(a1 + 56);
  if (v74 == 4)
  {
    [*(id *)(a1 + 1808) packetLossRate];
    if (v75 <= 0.5)
    {
      *(void *)(a1 + 1456) = 0;
    }
    else
    {
      double v76 = *(double *)(a1 + 1456);
      if (v76 == 0.0)
      {
        *(double *)(a1 + 1456) = v57;
        double v76 = v57;
      }
      if (v57 - v76 > 5.0) {
        reportingSymptom();
      }
    }
    int v74 = *(_DWORD *)(a1 + 56);
  }
  if (v74 == 5)
  {
    [v73 packetLossRate];
    if (v80 <= 0.5)
    {
      *(void *)(a1 + 1464) = 0;
    }
    else
    {
      double v81 = *(double *)(a1 + 1464);
      if (v81 == 0.0)
      {
        *(double *)(a1 + 1464) = v57;
        double v81 = v57;
      }
      if (v57 - v81 > 5.0) {
        reportingSymptom();
      }
    }
  }
  if ((*(_DWORD *)(a1 + 56) & 0xFFFFFFFE) != 4) {
    goto LABEL_137;
  }
  if (VCRateControlAlgorithmSparseNOWRD_NoServerStatsActivityDetected(*(void *)(a1 + 1808)))
  {
    double v82 = *(double *)(a1 + 1472);
    if (v82 == 0.0)
    {
      *(double *)(a1 + 1472) = v57;
      double v82 = v57;
    }
    if (v57 - v82 > 5.0) {
      reportingSymptom();
    }
    if (*(unsigned char *)(a1 + 1480))
    {
LABEL_109:
      uint64_t v84 = 1528;
      if (!*(unsigned char *)(a1 + 1347)) {
        uint64_t v84 = 1536;
      }
      BOOL v85 = (void **)(a1 + v84);
      if (!*(void *)(a1 + v84)) {
        goto LABEL_120;
      }
      goto LABEL_137;
    }
    if (v57 - *(double *)(a1 + 1472) > 30.0)
    {
      int v83 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryAddValue(v83, @"VCSErrorDetected", &unk_1F3DC2BE0);
      reportingGenericEvent();
      *(unsigned char *)(a1 + 1480) = 1;
      goto LABEL_109;
    }
    BOOL v86 = 0;
  }
  else
  {
    *(void *)(a1 + 1472) = 0;
    BOOL v86 = *(unsigned char *)(a1 + 1480) != 0;
  }
  uint64_t v87 = 1528;
  if (!*(unsigned char *)(a1 + 1347)) {
    uint64_t v87 = 1536;
  }
  BOOL v85 = (void **)(a1 + v87);
  uint64_t v88 = *(void *)(a1 + v87);
  if (v86 || v88)
  {
    if (!v88 && v86)
    {
LABEL_120:
      uint64_t v89 = nw_activity_create();
      *BOOL v85 = (void *)v89;
      if (v89)
      {
        if (*(void *)(a1 + 1520)) {
          nw_activity_set_parent_activity();
        }
        nw_activity_activate();
      }
      else if (objc_opt_class() == a1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _AVCRateController_DoRateControlWithStatistics_cold_1();
          }
        }
      }
      else
      {
        if (objc_opt_respondsToSelector()) {
          unint64_t v90 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
        }
        else {
          unint64_t v90 = &stru_1F3D3E450;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v91 = VRTraceErrorLogLevelToCSTR();
          int v92 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v91;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_AVCRateController_PushNoServerStatsToNwActivity";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v137) = 2534;
            WORD2(v137) = 2112;
            *(void *)((char *)&v137 + 6) = v90;
            HIWORD(v137) = 2048;
            double v138 = *(double *)&a1;
            _os_log_error_impl(&dword_1E1EA4000, v92, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d %@(%p) Failed to create nwActivity", buf, 0x30u);
          }
        }
      }
      goto LABEL_137;
    }
    if (!v86)
    {
      nw_activity_complete_with_reason();
      nw_release(*v85);
      *BOOL v85 = 0;
    }
  }
LABEL_137:
  _AVCRateController_NotifyTargetBitrateChange(a1);
  objc_msgSend(*(id *)(a1 + 1832), "setIsTargetBitrateStabilized:", objc_msgSend(*(id *)(a1 + 1808), "isNewRateSentOut"));
  [*(id *)(a1 + 1808) setLocalBandwidthEstimation:VCStatisticsCollector_SharedEstimatedBandwidth(*(void *)(a1 + 24))];
  if (!*(unsigned char *)(a1 + 1346))
  {
    uint64_t v93 = *(void *)(a2 + 8);
    uint64_t v94 = *(void **)(a1 + 1808);
    [v94 packetLossRate];
    double v96 = v95;
    [v94 packetLossRateAudio];
    double v98 = v97;
    [v94 packetLossRateVideo];
    double v100 = v99;
    unsigned int v101 = [v94 mostBurstLoss];
    [v94 roundTripTime];
    double v103 = v102;
    [v94 owrd];
    double v105 = v104;
    int v106 = [v94 isCongested];
    int v107 = v106;
    if (*(unsigned char *)(a1 + 1625)) {
      char v108 = 1;
    }
    else {
      char v108 = v106;
    }
    *(unsigned char *)(a1 + 1625) = v108;
    *(_DWORD *)(a1 + 1180) = (v103 * 1000.0);
    [v94 roundTripTime];
    if (v109 > 0.0)
    {
      double v110 = v98 * 100.0;
      double v111 = v100 * 100.0;
      unsigned int v112 = (v105 * 1000.0);
      if (v96 * 100.0 != *(double *)(a1 + 1184)
        || v110 != *(double *)(a1 + 1200)
        || v111 != *(double *)(a1 + 1192)
        || v101 != *(_DWORD *)(a1 + 1272)
        || *(unsigned __int8 *)(a1 + 1280) != v107
        || *(_DWORD *)(a1 + 1276) != v112)
      {
        *(double *)(a1 + 1184) = v96 * 100.0;
        *(double *)(a1 + 1200) = v110;
        *(double *)(a1 + 1192) = v111;
        *(_DWORD *)(a1 + 1272) = v101;
        *(unsigned char *)(a1 + 1280) = v107;
        *(_DWORD *)(a1 + 1276) = v112;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(void *)&buf[16] = 1;
        long long v139 = 0u;
        uint64_t v148 = 0;
        long long v146 = 0u;
        long long v147 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        long long v142 = 0u;
        long long v143 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        *(_DWORD *)CMTime buf = 3;
        *(void *)&buf[8] = v93;
        *(double *)&long long v137 = v96 * 100.0;
        *((double *)&v137 + 1) = v98 * 100.0;
        double v138 = v100 * 100.0;
        *(void *)&long long v139 = __PAIR64__(*(_DWORD *)(a1 + 1180), v101);
        int v113 = *(_DWORD *)(a1 + 1164);
        DWORD2(v139) = v107;
        HIDWORD(v139) = (v105 * 1000.0);
        int v114 = *(_DWORD *)(a1 + 1488);
        LODWORD(v140) = v113;
        LODWORD(v141) = v114;
        AVCStatisticsCollector_SetVCStatistics(*(void *)(a1 + 24), (uint64_t)buf);
      }
    }
  }
}

void sub_1E1EF40E4(_Unwind_Exception *a1)
{
}

void _AVCRateController_DoRateControlWithBasebandStatistics(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 1345))
  {
    if (*(void *)(a1 + 1832))
    {
      char v3 = (char)a2;
      if (*a2 == 1)
      {
        unsigned int v4 = *(void **)(a1 + 1808);
        _AVCRateController_DoRateControl(a1, (uint64_t)a2);
        _AVCRateController_ReportInitialRampUpDeltas(a1);
        _AVCRateController_NotifyTargetBitrateChange(a1);
        objc_msgSend(*(id *)(a1 + 1832), "setIsTargetBitrateStabilized:", objc_msgSend(v4, "isNewRateSentOut"));
        uint64_t v5 = *(void *)(a1 + 1304);
        if (v5)
        {
          VCRateControlMediaController_AudioFractionTier(*(void *)(a1 + 48));
          VCRateControlMediaController_IsAudioOnly(*(void *)(a1 + 48));
          VCRateControlMediaController_IsVideoStopped(*(unsigned char **)(a1 + 48));
          VCRateControlMediaController_IsVideoStoppedByVCRateControl(*(void *)(a1 + 48));
          VCRateControlMediaController_BasebandFlushCount(*(void *)(a1 + 48));
          VRLogfilePrintWithTimestamp(v5, "%s %4u\t%4u\t%4u\t%4u\t%4u\t%4d\t%.4f\t%.4f\t%4u %d %c(%1d,%1d) FC:%d\t%.1f\n", v6, v7, v8, v9, v10, v11, v3 + 96);
        }
      }
    }
  }
}

void _AVCRateController_DoRateControlWithNWConnectionStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 1544))
  {
    if ((*(_DWORD *)a2 - 11) < 2)
    {
      if (*(_DWORD *)a2 != 11)
      {
LABEL_43:
        _AVCRateController_DoRateControl(a1, a2);
        _AVCRateController_NotifyTargetBitrateChange(a1);
        uint64_t v26 = *(void *)(a1 + 1312);
        if (v26) {
          VRLogfilePrintWithTimestamp(v26, "%f\t%llu\t%u\t%u\t%llu\t%llu\t%u\t%u\t%u\t%llu\t%u\t%d\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t%2.4f\t%d\n", *(unsigned __int16 *)(a2 + 100), *(unsigned __int8 *)(a2 + 102), *(unsigned __int8 *)(a2 + 105), *(unsigned __int8 *)(a2 + 104), *(unsigned __int8 *)(a2 + 107), *(unsigned __int8 *)(a2 + 106), *(void *)(a2 + 8));
        }
        ++*(_DWORD *)(a1 + 1816);
        return;
      }
      unsigned int v4 = *(_DWORD *)(a2 + 128) + *(_DWORD *)(a2 + 132);
      *(_DWORD *)(a1 + 1132) = v4;
      unsigned int v5 = *(_DWORD *)(a1 + 1128);
      BOOL v6 = v4 >= v5;
      unsigned int v7 = v4 - v5;
      if (v7 == 0 || !v6 || v5 == 0) {
        unsigned int v7 = 0;
      }
      *(_DWORD *)(a1 + 1136) = v7;
      if (!*(unsigned char *)(a1 + 1348))
      {
        double v22 = *(float *)(a2 + 112);
        uint64_t v23 = *(void **)(a1 + 1808);
        if (v23)
        {
          [v23 config];
          double v24 = v40;
        }
        else
        {
          bzero(buf, 0x3F0uLL);
          double v24 = 0.0;
        }
        if (v24 < v22)
        {
          char v25 = 1;
LABEL_42:
          *(unsigned char *)(a1 + 134_Block_object_dispose(&STACK[0x250], 8) = v25;
          goto LABEL_43;
        }
        if (!*(unsigned char *)(a1 + 1348)) {
          goto LABEL_43;
        }
      }
      double v9 = *(float *)(a2 + 112);
      uint64_t v10 = *(void **)(a1 + 1808);
      if (v10)
      {
        [v10 config];
        double v11 = v27;
      }
      else
      {
        double v11 = 0.0;
      }
      if (v11 <= v9) {
        goto LABEL_43;
      }
      char v25 = 0;
      goto LABEL_42;
    }
    if (objc_opt_class() == a1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _AVCRateController_DoRateControlWithNWConnectionStatistics_cold_2();
        }
      }
    }
    else
    {
      if (objc_opt_respondsToSelector()) {
        uint64_t v13 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
      }
      else {
        uint64_t v13 = &stru_1F3D3E450;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        uint64_t v20 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v21 = *(_DWORD *)a2;
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v29 = v19;
          __int16 v30 = 2080;
          int v31 = "_AVCRateController_DoRateControlWithNWConnectionStatistics";
          __int16 v32 = 1024;
          int v33 = 2606;
          __int16 v34 = 2112;
          int v35 = v13;
          __int16 v36 = 2048;
          uint64_t v37 = a1;
          __int16 v38 = 1024;
          int v39 = v21;
          uint64_t v16 = "AVCRC [%s] %s:%d %@(%p) Wrong statistics type=%d";
          uint64_t v17 = v20;
          uint32_t v18 = 54;
          goto LABEL_33;
        }
      }
    }
  }
  else if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _AVCRateController_DoRateControlWithNWConnectionStatistics_cold_1();
      }
    }
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      __int16 v12 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
    }
    else {
      __int16 v12 = &stru_1F3D3E450;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      uint64_t v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v29 = v14;
        __int16 v30 = 2080;
        int v31 = "_AVCRateController_DoRateControlWithNWConnectionStatistics";
        __int16 v32 = 1024;
        int v33 = 2602;
        __int16 v34 = 2112;
        int v35 = v12;
        __int16 v36 = 2048;
        uint64_t v37 = a1;
        uint64_t v16 = "AVCRC [%s] %s:%d %@(%p) Not using nwConnectionNotification";
        uint64_t v17 = v15;
        uint32_t v18 = 48;
LABEL_33:
        _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
      }
    }
  }
}

BOOL _AVCRateController_DoRateControl(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    *(double *)(a1 + 1672) = micro();
    *(void *)(a1 + 1680) = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 1664) = [*(id *)(a1 + 1808) isFirstInitialRampUpDone];
    int v4 = *(_DWORD *)a2;
    if (*(int *)a2 > 10)
    {
      if (v4 == 11)
      {
        *(void *)(a1 + 1704) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 1712) = *(unsigned char *)(a2 + 96);
        *(unsigned char *)(a1 + 1713) = *(unsigned char *)(a2 + 97);
        *(_WORD *)(a1 + 1714) = *(_WORD *)(a2 + 98);
        *(_WORD *)(a1 + 1716) = *(_WORD *)(a2 + 100);
        *(unsigned char *)(a1 + 171_Block_object_dispose(&STACK[0x250], 8) = *(unsigned char *)(a2 + 102);
        *(unsigned char *)(a1 + 1719) = *(unsigned char *)(a2 + 103);
        *(unsigned char *)(a1 + 1720) = *(unsigned char *)(a2 + 104);
        *(unsigned char *)(a1 + 1721) = *(unsigned char *)(a2 + 105);
        *(unsigned char *)(a1 + 1722) = *(unsigned char *)(a2 + 106);
        *(unsigned char *)(a1 + 1723) = *(unsigned char *)(a2 + 107);
        *(unsigned char *)(a1 + 1724) = *(unsigned char *)(a2 + 108);
        *(_DWORD *)(a1 + 172_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a2 + 112);
        *(_WORD *)(a1 + 1732) = *(_WORD *)(a2 + 118);
        long long v7 = *(_OWORD *)(a2 + 120);
        *(void *)(a1 + 1752) = *(void *)(a2 + 136);
        *(_OWORD *)(a1 + 1736) = v7;
      }
      else if (v4 == 14)
      {
        *(_DWORD *)(a1 + 1704) = *(_DWORD *)(a2 + 40);
      }
    }
    else if (v4 == 1)
    {
      *(_DWORD *)(a1 + 1704) = *(_DWORD *)(a2 + 160);
      *(_DWORD *)(a1 + 170_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 1712) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a1 + 1716) = *(_DWORD *)(a2 + 36);
      *(_DWORD *)(a1 + 1720) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 1724) = *(_DWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 172_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a2 + 32);
      *(void *)(a1 + 1736) = *(void *)(a2 + 56);
      *(void *)(a1 + 1744) = *(void *)(a2 + 64);
      *(void *)(a1 + 1752) = *(void *)(a2 + 72);
      *(void *)(a1 + 1760) = *(void *)(a2 + 80);
      *(void *)(a1 + 176_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a2 + 88);
    }
    else if (v4 == 2)
    {
      *(void *)(a1 + 1712) = *(void *)(a2 + 80);
      *(_DWORD *)(a1 + 1792) = *(_DWORD *)(a2 + 32);
    }
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      int v9 = VCRateControlMediaController_BasebandFlushCount(v8);
    }
    else {
      int v9 = 0;
    }
    int v10 = VCRateControlAlgorithm_DoRateControl(*(void *)(a1 + 1808), a2);
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      BOOL v12 = (int)VCRateControlMediaController_BasebandFlushCount(v11) > v9;
    }
    else {
      BOOL v12 = 0;
    }
    uint64_t v13 = (long long *)(a1 + 1664);
    *(unsigned char *)(a1 + 1656) = v12;
    if (!v10)
    {
      BOOL result = 0;
      *(void *)(a1 + 1792) = 0;
      *(_OWORD *)(a1 + 1760) = 0u;
      *(_OWORD *)(a1 + 1776) = 0u;
      *(_OWORD *)(a1 + 172_Block_object_dispose(&STACK[0x250], 8) = 0u;
      *(_OWORD *)(a1 + 1744) = 0u;
      *(_OWORD *)(a1 + 1696) = 0u;
      *(_OWORD *)(a1 + 1712) = 0u;
      *uint64_t v13 = 0u;
      *(_OWORD *)(a1 + 1680) = 0u;
      return result;
    }
    double v35 = NAN;
    uint64_t v36 = -1;
    double v33 = NAN;
    uint64_t v34 = -1;
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14)
    {
      VCRateControlMediaController_MediaQueueSettings(v14, (double *)&v36, &v35, (double *)&v34, &v33);
      *(_DWORD *)(a1 + 1692) = (v33 + v35);
      *(unsigned char *)(a1 + 1696) = *(unsigned char *)(a1 + 1656);
    }
    *(_DWORD *)(a1 + 168_Block_object_dispose(&STACK[0x250], 8) = objc_msgSend(*(id *)(a1 + 1808), "targetBitrate", *(void *)&v33, v34);
    int v15 = *(_DWORD *)a2;
    if (*(int *)a2 > 10)
    {
      if (v15 == 11)
      {
        int v15 = 2;
        goto LABEL_41;
      }
      if (v15 == 14)
      {
        *(_DWORD *)(a1 + 170_Block_object_dispose(&STACK[0x250], 8) = [*(id *)(a1 + 1808) bytesInFlight];
        int v15 = 3;
        goto LABEL_41;
      }
    }
    else
    {
      if (v15 == 1)
      {
LABEL_41:
        long long v29 = *(_OWORD *)(a1 + 1728);
        long long v42 = *(_OWORD *)(a1 + 1744);
        long long v30 = *(_OWORD *)(a1 + 1776);
        long long v43 = *(_OWORD *)(a1 + 1760);
        long long v44 = v30;
        long long v31 = *v13;
        long long v39 = *(_OWORD *)(a1 + 1680);
        long long v32 = *(_OWORD *)(a1 + 1712);
        *(_OWORD *)double v40 = *(_OWORD *)(a1 + 1696);
        *(_OWORD *)&v40[16] = v32;
        long long v41 = v29;
        uint64_t v45 = *(void *)(a1 + 1792);
        *(_OWORD *)&v38[4] = v31;
        *(_DWORD *)CMTime buf = v15;
        *(_DWORD *)__int16 v38 = -1431655766;
        VCReporting_DumpIntoDataStore();
        return 1;
      }
      if (v15 == 2)
      {
        uint64_t v16 = *(void **)(a1 + 1808);
        [v16 rateControlTime];
        *(void *)(a1 + 1704) = v17;
        [v16 nowrd];
        *(void *)(a1 + 1720) = v18;
        [v16 nowrdAcc];
        *(void *)(a1 + 172_Block_object_dispose(&STACK[0x250], 8) = v19;
        [v16 mostRecentRoundTripTime];
        *(void *)(a1 + 1736) = v20;
        [v16 roundTripTimeMinEnvelope];
        *(void *)(a1 + 1752) = v21;
        [v16 packetLossRate];
        *(void *)(a1 + 1760) = v22;
        [v16 packetLossRateAudio];
        *(void *)(a1 + 176_Block_object_dispose(&STACK[0x250], 8) = v23;
        [v16 packetLossRateVideo];
        *(void *)(a1 + 1776) = v24;
        [v16 roundTripTime];
        *(void *)(a1 + 1744) = v25;
        [v16 ecnCERatio];
        int v15 = 0;
        *(void *)(a1 + 1784) = v26;
        goto LABEL_41;
      }
    }
    *(void *)(a1 + 1792) = 0;
    *(_OWORD *)(a1 + 1760) = 0u;
    *(_OWORD *)(a1 + 1776) = 0u;
    *(_OWORD *)(a1 + 172_Block_object_dispose(&STACK[0x250], 8) = 0u;
    *(_OWORD *)(a1 + 1744) = 0u;
    *(_OWORD *)(a1 + 1696) = 0u;
    *(_OWORD *)(a1 + 1712) = 0u;
    *uint64_t v13 = 0u;
    *(_OWORD *)(a1 + 1680) = 0u;
    return 1;
  }
  if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _AVCRateController_DoRateControl_cold_1();
    }
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      unsigned int v5 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
    }
    else {
      unsigned int v5 = &stru_1F3D3E450;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      uint32_t v28 = *MEMORY[0x1E4F47A50];
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)CMTime buf = 136316418;
      *(void *)__int16 v38 = v27;
      *(_WORD *)&v38[8] = 2080;
      *(void *)&v38[10] = "_AVCRateController_DoRateControl";
      *(_WORD *)&v38[18] = 1024;
      LODWORD(v39) = 2632;
      WORD2(v39) = 2112;
      *(void *)((char *)&v39 + 6) = v5;
      HIWORD(v39) = 2048;
      *(void *)double v40 = a1;
      *(_WORD *)&v40[8] = 2048;
      *(void *)&v40[10] = 0;
      _os_log_error_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d %@(%p) Invalid statistics=%p", buf, 0x3Au);
    }
  }
  return 0;
}

void _AVCRateController_ReportInitialRampUpDeltas(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 56) - 1) <= 2 && !*(unsigned char *)(a1 + 1160))
  {
    if ([*(id *)(a1 + 1808) isFirstInitialRampUpDone])
    {
      double v2 = micro() - *(double *)(a1 + 1152);
      int v3 = [*(id *)(a1 + 1808) targetBitrate] - *(_DWORD *)(a1 + 1140);
      reportingAdaptiveLearningStats();
      *(unsigned char *)(a1 + 1160) = 1;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v4 = VRTraceErrorLogLevelToCSTR();
        unsigned int v5 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v6 = *(_DWORD *)(a1 + 1140);
          int v7 = 136316674;
          uint64_t v8 = v4;
          __int16 v9 = 2080;
          int v10 = "_AVCRateController_ReportInitialRampUpDeltas";
          __int16 v11 = 1024;
          int v12 = 2677;
          __int16 v13 = 2048;
          uint64_t v14 = a1;
          __int16 v15 = 1024;
          int v16 = v3;
          __int16 v17 = 2048;
          double v18 = v2;
          __int16 v19 = 1024;
          int v20 = v6;
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d (%p) Report initial ramp up done with bitrateDelta:%d, timeDelta:%f, initialBitrate:%d", (uint8_t *)&v7, 0x3Cu);
        }
      }
    }
  }
}

uint64_t _AVCRateControlFeedbackController_ProcessRateControlFeedbackMessage(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(double *)(a1 + 72) = a4;
  memset(v23, 0, 200);
  int v5 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v5;
  if (a3 != 3)
  {
    if (a3 != 1) {
      return 0;
    }
    long long v6 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)((char *)&v23[8] + _Block_object_dispose(&STACK[0x250], 8) = *(_OWORD *)(a2 + 112);
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)((char *)&v23[9] + _Block_object_dispose(&STACK[0x250], 8) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)&v23[10] + _Block_object_dispose(&STACK[0x250], 8) = v7;
    *(_OWORD *)((char *)&v23[11] + _Block_object_dispose(&STACK[0x250], 8) = *(_OWORD *)(a2 + 160);
    long long v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)((char *)&v23[4] + _Block_object_dispose(&STACK[0x250], 8) = *(_OWORD *)(a2 + 48);
    long long v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)((char *)&v23[5] + _Block_object_dispose(&STACK[0x250], 8) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)((char *)&v23[6] + _Block_object_dispose(&STACK[0x250], 8) = v9;
    *(_OWORD *)((char *)&v23[7] + _Block_object_dispose(&STACK[0x250], 8) = v6;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)((char *)&v23[1] + _Block_object_dispose(&STACK[0x250], 8) = *(_OWORD *)a2;
    *(_OWORD *)((char *)&v23[2] + _Block_object_dispose(&STACK[0x250], 8) = v10;
    LODWORD(v23[0]) = 2;
    BYTE2(v23[1]) = 1;
    *((double *)v23 + 1) = a4;
    *(_OWORD *)((char *)&v23[3] + _Block_object_dispose(&STACK[0x250], 8) = v8;
    uint64_t v11 = *(unsigned int *)(a1 + 52);
    uint64_t v12 = *(unsigned int *)(a1 + 40);
    if (BYTE1(v23[12])) {
      unsigned __int8 v13 = 2;
    }
    else {
      unsigned __int8 v13 = 1;
    }
    int v14 = *(unsigned __int8 *)(a1 + 89);
    if (v14 == 4 || v14 == v13)
    {
      if (v11 > *(_DWORD *)(a1 + 56) && *(unsigned char *)(a1 + 90))
      {
        if (*(_DWORD *)(a1 + 44) == v12)
        {
          if (a4 - *(double *)(a1 + 80) >= 1800.0)
          {
            *(unsigned char *)(a1 + 64) = 0;
          }
          else
          {
            unsigned int v15 = ++*(unsigned char *)(a1 + 64);
            if (v15 >= 0x64)
            {
              *(unsigned char *)(a1 + 90) = 0;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v16 = VRTraceErrorLogLevelToCSTR();
                __int16 v17 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  int v18 = *(unsigned __int8 *)(a1 + 90);
                  int v19 = *(unsigned __int8 *)(a1 + 64);
                  *(_DWORD *)CMTime buf = 136317186;
                  uint64_t v25 = v16;
                  __int16 v26 = 2080;
                  uint64_t v27 = "_AVCRateControlFeedbackController_VerifyECNStatus";
                  __int16 v28 = 1024;
                  int v29 = 402;
                  __int16 v30 = 1024;
                  int v31 = v18;
                  __int16 v32 = 2048;
                  uint64_t v33 = v12;
                  __int16 v34 = 2048;
                  uint64_t v35 = v11;
                  __int16 v36 = 1024;
                  int v37 = v19;
                  __int16 v38 = 2080;
                  long long v39 = "YES";
                  __int16 v40 = 2048;
                  uint64_t v41 = a1;
                  _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Set isECNEnabled=%d with totalECT1Count=%ld, totalReceivedPackets=%ld, numBadECNEvents=%d, isECNBleached=%s for controller [%p]", buf, 0x50u);
                }
              }
            }
          }
          *(void *)(a1 + 80) = *(void *)(a1 + 72);
          LODWORD(v11) = *(_DWORD *)(a1 + 52);
        }
        else
        {
          *(_DWORD *)(a1 + 44) = v12;
        }
      }
      *(_DWORD *)(a1 + 56) = v11;
      LOBYTE(v23[12]) = *(unsigned char *)(a1 + 90);
    }
    goto LABEL_23;
  }
  HIDWORD(v20) = -858993459 * v5;
  LODWORD(v20) = -858993459 * v5;
  if ((v20 >> 1) <= 0x19999999)
  {
    LODWORD(v23[0]) = 5;
    *((double *)v23 + 1) = a4;
    int v21 = *(_DWORD *)(a2 + 28);
    HIDWORD(v23[1]) = *(_DWORD *)a2;
    DWORD1(v23[2]) = v21;
LABEL_23:
    AVCStatisticsCollector_SetVCStatistics(*(void *)(a1 + 16), (uint64_t)v23);
  }
  return 1;
}

void VCRateControlFeedbackController_SetMode(uint64_t a1, int a2)
{
  if (a1)
  {
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlFeedbackController_SetMode_cold_1();
    }
  }
}

void VCRateControlFeedbackController_UpdateTxLinkType(unsigned __int8 *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1[88] != a2)
    {
      _AVCRateControlFeedbackController_SetTxLink((uint64_t)a1, a2, 0);
      int v4 = a1[90];
      int v5 = a1[89];
      BOOL v7 = v5 == 4 || v5 == a2;
      a1[90] = v7;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v8 = VRTraceErrorLogLevelToCSTR();
        long long v9 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v10 = a1[90];
          int v11 = 136316418;
          uint64_t v12 = v8;
          __int16 v13 = 2080;
          int v14 = "_AVCRateControlFeedbackController_SetECNEnabled";
          __int16 v15 = 1024;
          int v16 = 379;
          __int16 v17 = 2048;
          int v18 = a1;
          __int16 v19 = 1024;
          int v20 = v4;
          __int16 v21 = 1024;
          int v22 = v10;
          _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d [%p] _isECNEnabled changed from=%d to=%d", (uint8_t *)&v11, 0x32u);
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlFeedbackController_UpdateTxLinkType_cold_1();
    }
  }
}

void _AVCRateControlFeedbackController_SetTxLink(uint64_t a1, char a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
  uint64_t v5 = 88;
  if (a3) {
    uint64_t v5 = 89;
  }
  *(unsigned char *)(a1 + v5) = a2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    BOOL v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(a1 + 88);
      int v9 = *(unsigned __int8 *)(a1 + 89);
      int v10 = *(unsigned __int8 *)(a1 + 90);
      int v11 = 136316930;
      uint64_t v12 = v6;
      __int16 v13 = 2080;
      int v14 = "_AVCRateControlFeedbackController_SetTxLink";
      __int16 v15 = 1024;
      int v16 = 372;
      __int16 v17 = 2048;
      uint64_t v18 = a1;
      __int16 v19 = 1024;
      int v20 = v8;
      __int16 v21 = 1024;
      int v22 = v9;
      __int16 v23 = 1024;
      int v24 = v10;
      __int16 v25 = 1024;
      int v26 = a3;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d [%p] _txLinkType changed to=%d ecnLinkType=%d with isECNEnabled=%d, isECNLinkType=%d", (uint8_t *)&v11, 0x3Eu);
    }
  }
}

void VCRateControlFeedbackController_SetLinkTypeToSupportECN(uint64_t a1, char a2)
{
  if (a1)
  {
    if (VCDefaults_GetBoolValueForKey(@"ecnEnabled", 0)) {
      char v4 = 4;
    }
    else {
      char v4 = a2;
    }
    _AVCRateControlFeedbackController_SetTxLink(a1, v4, 1);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlFeedbackController_SetLinkTypeToSupportECN_cold_1();
    }
  }
}

uint64_t VCRateControlProcessFeedbackControlInfo(uint64_t result, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  if (!a2) {
    return 0;
  }
  uint64_t v3 = result;
  if (VCMediaControlInfoHasInfo(a2, 0))
  {
    memset(buf, 0, 40);
    VCMediaControlInfoGetInfoUnserialized(a2, (const char *)buf, 0);
    DWORD2(v16) = WORD1(buf[0]);
    HIDWORD(v1_Block_object_dispose(&STACK[0x250], 8) = LOWORD(buf[0]);
    HIDWORD(v17) = WORD5(buf[0]);
    LODWORD(v1_Block_object_dispose(&STACK[0x250], 8) = WORD3(buf[0]);
    LODWORD(v17) = WORD2(buf[0]);
    DWORD1(v17) = WORD4(buf[0]);
    DWORD2(v21) = buf[1];
    LODWORD(v26) = DWORD1(buf[2]);
  }
  if (VCMediaControlInfoHasInfo(a2, (const char *)1))
  {
    memset(buf, 0, 40);
    VCMediaControlInfoGetInfoUnserialized(a2, (const char *)buf, 1);
    LODWORD(v16) = WORD4(buf[1]);
    DWORD1(v16) = DWORD1(buf[1]);
    *((void *)&v19 + 1) = RTPUnpackDouble(HIDWORD(buf[1]));
  }
  VCMediaControlInfoGetInfo(a2, (const char *)0x11, (uint64_t)&v19, 4, 0);
  if (*(unsigned char *)(v3 + 36))
  {
    if ((v19 - *(_DWORD *)(v3 + 28)) <= 0x7FFFFFFE)
    {
      int v4 = 0;
      *(_DWORD *)(v3 + 2_Block_object_dispose(&STACK[0x250], 8) = v19;
      uint64_t v5 = 32;
      goto LABEL_11;
    }
    int v6 = *(_DWORD *)(v3 + 32);
    *(_DWORD *)(v3 + 32) = v6 + 1;
    HIDWORD(v7) = -858993459 * v6;
    LODWORD(v7) = -858993459 * v6;
    if ((v7 >> 2) <= 0xCCCCCCC && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      int v9 = *MEMORY[0x1E4F47A50];
      BOOL v10 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (!v10) {
        return result;
      }
      int v11 = *(_DWORD *)(v3 + 28);
      LODWORD(buf[0]) = 136316162;
      *(void *)((char *)buf + 4) = v8;
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = "_AVCRateControlFeedbackController_DetectOutOfOrderFeedbackMessage";
      WORD3(buf[1]) = 1024;
      DWORD2(buf[1]) = 605;
      WORD6(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 14) = v19;
      WORD1(buf[2]) = 1024;
      DWORD1(buf[2]) = v11;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Out of order feedback message detected with timestamp=%u, controller mediaTimestamp=%u", (uint8_t *)buf, 0x28u);
    }
    return 0;
  }
  *(unsigned char *)(v3 + 36) = 1;
  int v4 = v19;
  uint64_t v5 = 28;
LABEL_11:
  *(_DWORD *)(v3 + v5) = v4;
  LOBYTE(buf[0]) = 0;
  if (!VCMediaControlInfoGetInfo(a2, (const char *)0x12, (uint64_t)buf, 1, 0))
  {
    if (LOBYTE(buf[0]) == 3)
    {
      ++*(_DWORD *)(v3 + 48);
LABEL_20:
      ++*(_DWORD *)(v3 + 40);
      goto LABEL_21;
    }
    if (buf[0]) {
      goto LABEL_20;
    }
  }
LABEL_21:
  WORD2(v26) = *(_DWORD *)(v3 + 40);
  WORD3(v26) = *(_DWORD *)(v3 + 48);
  int v12 = *(_DWORD *)(v3 + 8);
  if ((v12 - 1) <= 2)
  {
    *(void *)&long long v28 = 0;
    memset(buf, 0, sizeof(buf));
    DWORD1(buf[0]) = v19;
    VCMediaControlInfoGetInfo(a2, (const char *)0xA, (uint64_t)&buf[1] + 8, 8, 0);
    VCMediaControlInfoGetInfo(a2, (const char *)0xC, (uint64_t)&buf[1], 4, 0);
    VCMediaControlInfoGetInfo(a2, (const char *)0xB, (unint64_t)buf | 0xC, 4, 0);
    VCMediaControlInfoGetInfo(a2, (const char *)0xD, (uint64_t)&v25 + 8, 2, 0);
    VCMediaControlInfoGetInfo(a2, (const char *)0xE, (uint64_t)&v25 + 10, 1, 0);
    VCMediaControlInfoGetInfo(a2, (const char *)0xF, (uint64_t)&v25 + 11, 1, 0);
    if (VCMediaControlInfoHasInfo(a2, (const char *)2)) {
      VCMediaControlInfoGetInfo(a2, (const char *)2, (uint64_t)&v25 + 12, 4, 0);
    }
    if (VCMediaControlInfoHasInfo(a2, (const char *)0x15))
    {
      char v15 = 0;
      VCMediaControlInfoGetInfo(a2, (const char *)0x15, (uint64_t)&v15, 1, 0);
      BYTE9(v26) = v15;
    }
    LODWORD(buf[0]) = 3;
    BYTE12(v21) = 1;
    long long v24 = buf[2];
    *(void *)&long long v25 = v28;
    long long v22 = buf[0];
    long long v23 = buf[1];
    *(_DWORD *)(v3 + 52) = HIDWORD(buf[0]);
  }
  if ((v12 & 0xFFFFFFFE) == 4) {
    int v13 = 3;
  }
  else {
    int v13 = 1;
  }
  double v14 = micro();
  long long v33 = v24;
  long long v34 = v25;
  long long v35 = v26;
  long long v29 = v20;
  long long v30 = v21;
  long long v31 = v22;
  long long v32 = v23;
  buf[0] = v16;
  buf[1] = v17;
  buf[2] = v18;
  long long v28 = v19;
  _AVCRateControlFeedbackController_ProcessRateControlFeedbackMessage(v3, (uint64_t)buf, v13, v14);
  return 1;
}

uint64_t VCRateControlProcessProbingControlInfo(_DWORD *a1, void *a2, char a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    uint64_t v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    VCMediaControlInfoGetInfo(a2, (const char *)0x10, (unint64_t)&v16 | 0xC, 4, 0);
    VCMediaControlInfoGetInfo(a2, (const char *)0xA, (uint64_t)&v17, 8, 0);
    VCMediaControlInfoGetInfo(a2, (const char *)0x11, (uint64_t)&v17 + 8, 4, 0);
    if ((a3 & 1) == 0)
    {
      VCMediaControlInfoGetInfo(a2, (const char *)8, (uint64_t)&v16 + 8, 4, 0);
      int v8 = DWORD2(v16);
      DWORD2(v16) = bswap32(DWORD2(v16));
      BYTE5(v16) = v8 != 0;
      if ([a1 mode] == 1
        || [a1 mode] == 2
        || [a1 mode] == 3)
      {
        *(void *)&long long v13 = 0;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v10 = 0u;
        VCMediaControlInfoGetInfo(a2, (const char *)0xB, (unint64_t)&v10 | 0xC, 4, 0);
        VCMediaControlInfoGetInfo(a2, (const char *)0xC, (uint64_t)&v11, 4, 0);
        LODWORD(v10) = 4;
        BYTE12(v17) = 1;
        long long v19 = v11;
        long long v20 = v12;
        uint64_t v21 = v13;
        long long v18 = v10;
        a1[15] = HIDWORD(v10);
      }
    }
    long long v12 = v18;
    long long v13 = v19;
    long long v14 = v20;
    uint64_t v15 = v21;
    long long v10 = v16;
    long long v11 = v17;
    [a1 processRateControlProbingMessage:&v10 type:2 error:0];
  }
  return v4;
}

uint64_t VCRateControlSetFeedbackControlInfo(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    uint64_t v25 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    memset(v14, 0, sizeof(v14));
    [a1 getVCStatisticsFeedbackMessage:v14 time:micro()];
    v8[0] = WORD2(v17);
    v8[1] = v15;
    v8[2] = WORD4(v15);
    v8[4] = WORD6(v15);
    _OWORD v8[5] = WORD2(v16);
    v8[3] = WORD4(v16);
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    int v9 = HIDWORD(v16);
    int v10 = v20;
    int v13 = HIDWORD(v24);
    int v7 = [a1 getConnectionStatsBlob];
    if (v7) {
      VCMediaControlInfoSetInfo(a2, (const char *)2, (uint64_t)&v7, 4);
    }
    [a1 resetBurstyLossStatistics];
    VCMediaControlInfoSetInfoUnserialized(a2, (const char *)v8, 0);
  }
  return v3;
}

uint64_t VCMediaNegotiationBlobV2VideoPayloadReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 0x10u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_58;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_60;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_60:
          uint64_t v45 = 36;
          goto LABEL_77;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 4u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_64;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_64:
          uint64_t v45 = 28;
          goto LABEL_77;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_68;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_68:
          uint64_t v45 = 24;
          goto LABEL_77;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v19 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_72;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_72:
          uint64_t v45 = 8;
          goto LABEL_77;
        case 5u:
          Data = (void *)PBReaderReadData();

          *(void *)(a1 + 16) = Data;
          continue;
        case 6u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0) {
          goto LABEL_74;
        }
        v40 += 7;
        BOOL v14 = v41++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_76;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_74:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_76:
      uint64_t v45 = 32;
LABEL_77:
      *(_DWORD *)(a1 + v45) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL VCVideoHardwareDumpWriter_OpenDumpFile(uint64_t a1)
{
  BOOL v2 = VRLogfileAlloc(0, 0, (uint64_t)"VCVideoHardwareTests_DumpFile", 0, "com.apple.AVConference.VCVideoHardwareDumpWriter", 44);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = v2;
  if (!v2 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoHardwareDumpWriter_OpenDumpFile_cold_1();
    }
  }
  return v2 != 0;
}

void VCVideoHardwareDumpWriter_CloseDumpFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = (uint64_t *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    VRLogfilePrint(v8, "-- EOF --", a3, a4, a5, a6, a7, a8, v10);
    VRLogfileFree(v9);
  }
}

BOOL VCVideoHardwareDumpWriter_RegisterSource(uint64_t a1, const void *a2)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCVideoHardwareDumpWriter_RegisterSource_cold_1();
    }
    return 0;
  }
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCVideoHardwareDumpWriter_RegisterSource_cold_2();
    }
    return 0;
  }
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  uint64_t v5 = *(__CFSet **)(a1 + 16);
  if (CFSetGetCount(v5) || *(void *)(a1 + 8) || VCVideoHardwareDumpWriter_OpenDumpFile(a1))
  {
    CFSetAddValue(v5, a2);
    os_unfair_lock_unlock(v4);
    return 1;
  }
  os_unfair_lock_unlock(v4);
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  VRTraceErrorLogLevelToCSTR();
  BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    VCVideoHardwareDumpWriter_RegisterSource_cold_3();
    return 0;
  }
  return result;
}

void VCVideoHardwareDumpWriter_UnregisterSource(uint64_t a1, const void *a2)
{
  if (a2)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
    uint64_t v5 = *(__CFSet **)(a1 + 16);
    if (CFSetGetCountOfValue(v5, a2) >= 1) {
      CFSetRemoveValue(v5, a2);
    }
    if (!CFSetGetCount(v5) && *(void *)(a1 + 8)) {
      VCVideoHardwareDumpWriter_CloseDumpFile(a1, v6, v7, v8, v9, v10, v11, v12);
    }
    os_unfair_lock_unlock(v4);
  }
}

void VCVideoHardwareDumpWriter_Write(uint64_t a1, CFStringRef theString)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(theString);
  size_t v5 = Length + 1;
  MEMORY[0x1F4188790](Length);
  if ((v6 & 1) == 0) {
    memset((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), 170, v5);
  }
  if (a1)
  {
    if (CFStringGetCString(theString, (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v5, 0x8000100u))
    {
      VRLogfilePrint(*(void *)(a1 + 8), "%s\n", v7, v8, v9, v10, v11, v12, (char)v13 - ((v5 + 15) & 0xF0));
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoHardwareDumpWriter_Write_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoHardwareDumpWriter_Write_cold_1();
    }
  }
}

uint64_t AVConferenceServer_ProcessIsAvconferenced()
{
  return processIsAvconferenced;
}

uint64_t AVConferenceServerStartInternal(char a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  processIsAvconferenced = a1;
  processIsAVConferenceServer = 1;
  if (!VCFeatureFlagManager_UseAvconferenced()) {
    goto LABEL_9;
  }
  if ((_set_user_dir_suffix() & 1) == 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    AVConferenceServerStartInternal_cold_5();
  }
  memset(__b, 170, 0x400uLL);
  if (!confstr(65537, (char *)__b, 0x400uLL))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      AVConferenceServerStartInternal_cold_2();
    }
LABEL_20:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      AVConferenceServerStartInternal_cold_1();
    }
    exit(78);
  }
  memset(v10, 170, sizeof(v10));
  if (!realpath_DARWIN_EXTSN((const char *)__b, v10))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      AVConferenceServerStartInternal_cold_3();
    }
    goto LABEL_20;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG)) {
    AVConferenceServerStartInternal_cold_4();
  }
LABEL_9:
  VRTraceReset();
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  BOOL v2 = (os_log_t *)MEMORY[0x1E4F47A50];
  if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      __b[0] = 136316162;
      *(void *)&__b[1] = v3;
      LOWORD(__b[3]) = 2080;
      *(void *)((char *)&__b[3] + 2) = "AVConferenceServerStartInternal";
      HIWORD(__b[5]) = 1024;
      __b[6] = 190;
      LOWORD(__b[7]) = 1024;
      *(_DWORD *)((char *)&__b[7] + 2) = processIsAvconferenced;
      HIWORD(__b[8]) = 1024;
      __b[9] = 1;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Started: processIsAvconferenced=%d, processIsAVConferenceServer=%d", (uint8_t *)__b, 0x28u);
    }
  }
  uint64_t v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "infoDictionary"), "objectForKey:", @"CFBundleIdentifier");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      __b[0] = 136315906;
      *(void *)&__b[1] = v6;
      LOWORD(__b[3]) = 2080;
      *(void *)((char *)&__b[3] + 2) = "AVConferenceServerStartInternal";
      HIWORD(__b[5]) = 1024;
      __b[6] = 192;
      LOWORD(__b[7]) = 2112;
      *(void *)((char *)&__b[7] + 2) = v5;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d CFBundleIdentifier=%@", (uint8_t *)__b, 0x26u);
    }
  }
  VCFeatureFlagManager_DaemonCrashRecovery();
  VCSignalHandler_Initialize();
  VCRegisterSignalHandler((uint64_t)"daemoninfo", (uint64_t)&__block_literal_global_4);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_15);
  +[VCVideoCaptureServer VCVideoCaptureServerSingleton];
  objc_msgSend(+[VideoConferenceManager defaultVideoConferenceManager](VideoConferenceManager, "defaultVideoConferenceManager"), "registerBlocksForConference");
  [+[VCSessionManager sharedInstance] registerBlocksForService];
  objc_msgSend(+[VCMediaStreamManager defaultManager](VCMediaStreamManager, "defaultManager"), "registerBlocksForService");
  [(id)VCRemoteVideoManager_DefaultManager() registerBlocksForService];
  [+[VCStreamOutputManager sharedInstance] registerBlocksForService];
  objc_msgSend(+[VCCaptionsManager defaultManager](VCCaptionsManager, "defaultManager"), "registerBlocksForService");
  [+[VCAudioClientManager sharedInstance] registerBlocksForService];
  objc_msgSend(+[VCAudioManager sharedVoiceChatInstance](VCAudioManager, "sharedVoiceChatInstance"), "setIsInDaemon:", 1);
  objc_msgSend(+[VCAudioManager sharedSystemAudioOutputInstance](VCAudioManager, "sharedSystemAudioOutputInstance"), "setIsInDaemon:", 1);
  objc_msgSend(+[VCScreenCaptureManager sharedManager](VCScreenCaptureManager, "sharedManager"), "registerBlocksForService");
  [+[VCMediaRecorderManager sharedInstance] registerBlocksForService];
  [+[VCAudioPowerSpectrumManager sharedInstance] registerBlocksForService];
  objc_msgSend(+[VCEffectsManager sharedManager](VCEffectsManager, "sharedManager"), "registerBlocksForService");
  objc_msgSend(+[VCTestMonitorManager sharedManager](VCTestMonitorManager, "sharedManager"), "registerBlocksForService");
  objc_msgSend(+[VCDaemonProcessInfoManager sharedManager](VCDaemonProcessInfoManager, "sharedManager"), "registerBlocksForService");
  [+[VCStreamInputManager sharedInstance] registerBlocksForService];
  +[VCQoSMonitorManager sharedInstance];
  +[VCAnsweringMachineManager registerBlocksForService];
  objc_msgSend(+[VCAudioHALPluginDevice sharedAudioHALPluginNullDevice](VCAudioHALPluginDevice, "sharedAudioHALPluginNullDevice"), "start");
  +[VCAirPlayAudioHALPlugin sharedAirPlayAudioHALPluginNullDevice];
  objc_msgSend(+[AVConferenceXPCServer AVConferenceXPCServerSingleton](AVConferenceXPCServer, "AVConferenceXPCServerSingleton"), "_xpc_start_listening_for_connections");
  SoundDec_PrepareAudioConverter();
  return 0;
}

void __AVConferenceServerStartInternal_block_invoke()
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v0 = +[AVCDaemonProcessInfo getDaemonProcessInfo];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    __str = 0;
    uint64_t v1 = v0 ? (const char *)objc_msgSend((id)objc_msgSend(v0, "description"), "UTF8String") : "<nil>";
    asprintf(&__str, "mediaserverdProcessInfo=%s", v1);
    if (__str)
    {
      __lasts = 0;
      BOOL v2 = strtok_r(__str, "\n", &__lasts);
      uint64_t v3 = (os_log_t *)MEMORY[0x1E4F47A50];
      do
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v4 = VRTraceErrorLogLevelToCSTR();
          uint64_t v5 = *v3;
          if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v15 = v4;
            __int16 v16 = 2080;
            char v17 = "AVConferenceServerStartInternal_block_invoke";
            __int16 v18 = 1024;
            int v19 = 199;
            __int16 v20 = 2080;
            unint64_t v21 = "daemoninfo";
            __int16 v22 = 2080;
            long long v23 = v2;
            _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s %s", buf, 0x30u);
          }
        }
        BOOL v2 = strtok_r(0, "\n", &__lasts);
      }
      while (v2);
      free(__str);
    }
  }
  id v6 = +[VCDaemonProcessInfoManager copyProcessInfo];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    __str = 0;
    uint64_t v7 = v6 ? (const char *)objc_msgSend((id)objc_msgSend(v6, "description"), "UTF8String") : "<nil>";
    asprintf(&__str, "avconferencedProcessInfo=%s", v7);
    if (__str)
    {
      __lasts = 0;
      uint64_t v8 = strtok_r(__str, "\n", &__lasts);
      uint64_t v9 = (os_log_t *)MEMORY[0x1E4F47A50];
      do
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v10 = VRTraceErrorLogLevelToCSTR();
          uint64_t v11 = *v9;
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v15 = v10;
            __int16 v16 = 2080;
            char v17 = "AVConferenceServerStartInternal_block_invoke";
            __int16 v18 = 1024;
            int v19 = 201;
            __int16 v20 = 2080;
            unint64_t v21 = "daemoninfo";
            __int16 v22 = 2080;
            long long v23 = v8;
            _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s %s", buf, 0x30u);
          }
        }
        uint64_t v8 = strtok_r(0, "\n", &__lasts);
      }
      while (v8);
      free(__str);
    }
  }
}

uint64_t __AVConferenceServerStartInternal_block_invoke_13()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  +[VCServerBag pullStoreBagKeys];
  uint64_t result = VCFeatureFlagManager_UseAvconferenced();
  if (result)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v1 = VRTraceErrorLogLevelToCSTR();
      BOOL v2 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v3 = 136315906;
        uint64_t v4 = v1;
        __int16 v5 = 2080;
        id v6 = "AVConferenceServer_RegisterWithControlCenter";
        __int16 v7 = 1024;
        int v8 = 173;
        __int16 v9 = 2112;
        uint64_t v10 = @"com.apple.facetime";
        _os_log_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d STDynamicActivityAttributionPublisher app=%@", (uint8_t *)&v3, 0x26u);
      }
    }
    return [MEMORY[0x1E4FA9388] setCurrentAttributionKey:0 andApp:@"com.apple.facetime"];
  }
  return result;
}

uint64_t AVConferenceServerStart()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_UseAvconferenced())
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "AVConferenceServerStart called within mediaserverd.  UseAvconferenced is ON.", v1, 2u);
    }
    VRTraceReset();
    objc_msgSend(+[AVConferenceXPCServer AVConferenceXPCServerSingleton](AVConferenceXPCServer, "AVConferenceXPCServerSingleton"), "_xpc_start_listening_for_connections");
    objc_msgSend(+[VCDaemonProcessInfoManager sharedManager](VCDaemonProcessInfoManager, "sharedManager"), "registerBlocksForService");
  }
  else
  {
    AVConferenceServerStartInternal(0);
  }
  return 0;
}

uint64_t VCHardwareSettingsMac_CompareCPUFamilies(uint64_t a1, uint64_t a2)
{
  int v3 = a1;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend(&unk_1F3DC70C8, "indexOfObject:", objc_msgSend(NSNumber, "numberWithInt:", a1));
  uint64_t v5 = objc_msgSend(&unk_1F3DC70C8, "indexOfObject:", objc_msgSend(NSNumber, "numberWithInt:", a2));
  uint64_t v6 = v5;
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = 1;
  }
  else if (v5 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = -1;
  }
  else
  {
    int v8 = (void *)[NSNumber numberWithUnsignedInteger:v4];
    uint64_t v7 = objc_msgSend(v8, "compare:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", v6));
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136316930;
      uint64_t v13 = v9;
      __int16 v14 = 2080;
      uint64_t v15 = "VCHardwareSettingsMac_CompareCPUFamilies";
      __int16 v16 = 1024;
      int v17 = 394;
      __int16 v18 = 1024;
      int v19 = v4;
      __int16 v20 = 1024;
      int v21 = v3;
      __int16 v22 = 1024;
      int v23 = v6;
      __int16 v24 = 1024;
      int v25 = a2;
      __int16 v26 = 1024;
      int v27 = v7;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Comparing %d (0x%x) and %d (0x%x), result=%d", (uint8_t *)&v12, 0x3Au);
    }
  }
  return v7;
}

void sub_1E1F088EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _VCAudioPowerSpectrum_CleanUp(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 64) = 0;
  }
  int v3 = *(void **)(a1 + 88);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x250], 8) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v5 = *(void **)(a1 + 128);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 36))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        _VCAudioPowerSpectrum_CleanupChannel((void *)(*(void *)(a1 + 128) + v6));
        ++v7;
        v6 += 112;
      }
      while (v7 < *(unsigned int *)(a1 + 36));
      uint64_t v5 = *(void **)(a1 + 128);
    }
    free(v5);
  }

  VCAudioBufferList_Destroy((uint64_t *)(a1 + 120));
}

uint64_t VCAudioPowerSpectrum_ChannelCount(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 36);
  }
  return result;
}

uint64_t VCAudioPowerSpectrum_GetFrequencyBins(uint64_t result, void *a2, _DWORD *a3, unsigned int a4)
{
  if (a2 && a3)
  {
    if (result && *(unsigned char *)result && *(_DWORD *)(result + 36) > a4)
    {
      uint64_t v4 = *(void *)(result + 128) + 112 * a4;
      *a2 = *(void *)(v4 + 104);
      int v5 = *(_DWORD *)(v4 + 96);
    }
    else
    {
      int v5 = 0;
      *a2 = 0;
    }
    *a3 = v5;
  }
  return result;
}

double VCAudioPowerSpectrum_LogHealth(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 104);
      double v6 = *(float *)(a1 + 112);
      int v7 = 136316162;
      uint64_t v8 = v3;
      __int16 v9 = 2080;
      uint64_t v10 = "VCAudioPowerSpectrum_LogHealth";
      __int16 v11 = 1024;
      int v12 = 479;
      __int16 v13 = 1024;
      int v14 = v5;
      __int16 v15 = 2048;
      double v16 = v6;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d @=@ Health: VCAudioPowerSpectrum Power spectrum for streamToken=%u averageLevel=%.02f", (uint8_t *)&v7, 0x2Cu);
    }
  }
  return result;
}

void VCAudioPowerSpectrum_PushAudioSamples(uint64_t a1, uint64_t a2)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  if (a1 && *(void *)(a1 + 144) && *(void *)(a1 + 136))
  {
    uint64_t v3 = a2;
    if (*(unsigned char *)a1) {
      goto LABEL_83;
    }
    uint64_t SampleFormat = VCAudioBufferList_GetSampleFormat(a2);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      double v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(a1 + 84);
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCAudioPowerSpectrum_SetupAudioPowerSpectrumWithBinCount";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 348;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v7;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d binCount:%d", buf, 0x22u);
      }
    }
    long long v8 = *(_OWORD *)SampleFormat;
    long long v9 = *(_OWORD *)(SampleFormat + 16);
    *(void *)(a1 + 40) = *(void *)(SampleFormat + 32);
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = v8;
    if (*(_DWORD *)(SampleFormat + 8) != 1819304813)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioPowerSpectrum_PushAudioSamples_cold_23();
        }
      }
      goto LABEL_121;
    }
    int v10 = *(_DWORD *)(SampleFormat + 12);
    if ((v10 & 9) == 0 || (v10 & 0x20) == 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioPowerSpectrum_PushAudioSamples_cold_22();
        }
      }
      goto LABEL_121;
    }
    *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
    double v11 = *(double *)SampleFormat;
    float v12 = *(double *)SampleFormat * 0.5;
    *(float *)(a1 + 52) = v12;
    unsigned int v13 = (v12 / 6.25);
    float v14 = 1.0 / (double)(2 * v13);
    *(float *)(a1 + 96) = v14;
    *(_DWORD *)(a1 + 56) = v11;
    *(_DWORD *)(a1 + 60) = v13;
    long long v15 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)CMTime buf = *(_OWORD *)(a1 + 8);
    *(_OWORD *)&buf[16] = v15;
    *(void *)&buf[32] = *(void *)(a1 + 40);
    if ((VCAudioBufferList_Allocate((long long *)buf, 2 * v13, (void *)(a1 + 120)) & 1) == 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioPowerSpectrum_PushAudioSamples_cold_21();
        }
      }
      goto LABEL_121;
    }
    VCAudioBufferList_SetSampleCount(*(void *)(a1 + 120), 2 * *(_DWORD *)(a1 + 60));
    unsigned int v16 = *(_DWORD *)(a1 + 60);
    if (v16 < 7)
    {
      unsigned int v17 = 0;
    }
    else
    {
      unsigned int v17 = 0;
      unsigned int v18 = *(_DWORD *)(a1 + 60);
      do
      {
        v17 += 6;
        BOOL v19 = v18 > 0xD;
        v18 >>= 1;
      }
      while (v19);
    }
    unsigned int v27 = *(_DWORD *)(a1 + 84);
    long long v140 = (_DWORD *)(a1 + 84);
    float v28 = expf((float)v17 * 0.11552);
    if (v17 >= v27) {
      unsigned int v29 = v27;
    }
    else {
      unsigned int v29 = v17;
    }
    if (!v27) {
      unsigned int v29 = v17;
    }
    size_t v30 = v29 + 1;
    *(_DWORD *)(a1 + 80) = v30;
    uint64_t v31 = (_DWORD *)(a1 + 80);
    unint64_t v32 = malloc_type_calloc(v30, 4uLL, 0x100004052888210uLL);
    *(void *)(a1 + 72) = v32;
    if (!v32)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioPowerSpectrum_PushAudioSamples_cold_3();
        }
      }
      unsigned int v136 = *(void **)(a1 + 72);
      if (v136)
      {
        free(v136);
        *(void *)(a1 + 72) = 0;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioPowerSpectrum_PushAudioSamples_cold_2();
        }
      }
      goto LABEL_121;
    }
    LODWORD(v33) = *v31;
    if (*v31 >= 2u)
    {
      char v34 = v32;
      float v35 = (float)v16 / v28;
      unsigned int v36 = *v32;
      unint64_t v37 = 1;
      unsigned int v38 = v17;
      do
      {
        unsigned int v39 = (float)(v35 * expf((float)((float)v38 * 0.11552) / (float)(v33 - 1)));
        if (v36 >= v39) {
          ++v36;
        }
        else {
          unsigned int v36 = v39;
        }
        v34[v37++] = v36;
        unint64_t v33 = *v31;
        v38 += v17;
      }
      while (v37 < v33);
    }
    long long v139 = (_DWORD *)(a1 + 80);
    size_t v40 = *v140;
    int v41 = v33 - 1;
    if (v40)
    {
      if (v41 == v40) {
        goto LABEL_50;
      }
      uint64_t v42 = malloc_type_calloc(v40, 4uLL, 0x100004052888210uLL);
      *(void *)(a1 + 8_Block_object_dispose(&STACK[0x250], 8) = v42;
      if (v42)
      {
        LODWORD(v43) = *v140;
        if (*v140)
        {
          unint64_t v44 = 0;
          uint64_t v45 = (os_log_t *)MEMORY[0x1E4F47A50];
          do
          {
            *(float *)(*(void *)(a1 + 88) + 4 * v44) = (float)((float)v44
                                                               * (float)(*(_DWORD *)(a1 + 80) - 2))
                                                       / (float)(v43 - 1);
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v46 = VRTraceErrorLogLevelToCSTR();
              int v47 = *v45;
              if (os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
              {
                double v48 = *(float *)(*(void *)(a1 + 88) + 4 * v44);
                *(_DWORD *)CMTime buf = 136316162;
                *(void *)&uint8_t buf[4] = v46;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VCAudioPowerSpectrum_SetupBinInterpolationWithBinCount";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = 145;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v44;
                *(_WORD *)&buf[34] = 2048;
                *(double *)&buf[36] = v48;
                _os_log_error_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_ERROR, " [%s] %s:%d lerp[%d] : %f", buf, 0x2Cu);
              }
            }
            ++v44;
            unint64_t v43 = *v140;
          }
          while (v44 < v43);
        }
LABEL_50:
        unsigned int v49 = (float *)malloc_type_calloc((2 * *(_DWORD *)(a1 + 60)), 4uLL, 0x100004052888210uLL);
        *(void *)(a1 + 64) = v49;
        if (v49 && (vDSP_hann_window(v49, (2 * *(_DWORD *)(a1 + 60)), 0), *(void *)(a1 + 64)))
        {
          uint64_t v50 = malloc_type_calloc(*(unsigned int *)(SampleFormat + 28), 0x70uLL, 0x10A0040938ACEBEuLL);
          *(void *)(a1 + 12_Block_object_dispose(&STACK[0x250], 8) = v50;
          if (v50)
          {
            if (*(_DWORD *)(SampleFormat + 28))
            {
              uint64_t v51 = 0;
              LODWORD(v52) = *(_DWORD *)(a1 + 80);
              __asm { FMOV            V1.2D, #6.25 }
              float64x2_t v137 = _Q1;
              while (1)
              {
                uint64_t v58 = *(void *)(a1 + 128);
                BOOL v59 = (void *)(v58 + 112 * v51);
                size_t v60 = (v52 - 1);
                *(_DWORD *)BOOL v59 = v60;
                double v61 = malloc_type_calloc(v60, 4uLL, 0x100004052888210uLL);
                v59[2] = v61;
                double v62 = (void **)(v59 + 2);
                if (!v61) {
                  break;
                }
                double v63 = malloc_type_calloc(*(unsigned int *)v59, 4uLL, 0x100004052888210uLL);
                uint64_t v64 = v58 + 112 * v51;
                *(void *)(v64 + _Block_object_dispose(&STACK[0x250], 8) = v63;
                double v65 = (_DWORD **)(v64 + 8);
                if (!v63)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_11();
                    }
                  }
                  goto LABEL_138;
                }
                double v66 = malloc_type_calloc((*(_DWORD *)v59 + 1), 4uLL, 0x100004052888210uLL);
                uint64_t v67 = v58 + 112 * v51;
                *(void *)(v67 + 24) = v66;
                unsigned int v68 = (_DWORD **)(v67 + 24);
                if (!v66)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_12();
                    }
                  }
                  goto LABEL_138;
                }
                unsigned int v69 = malloc_type_calloc(*v140, 4uLL, 0x100004052888210uLL);
                *(void *)(v58 + 112 * v51 + 32) = v69;
                if (!v69)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_13();
                    }
                  }
                  goto LABEL_138;
                }
                uint64_t v70 = *(unsigned int *)v59;
                if (v70)
                {
                  double v71 = *v62;
                  unsigned int v72 = *v65;
                  uint64_t v73 = *(unsigned int *)v59;
                  int v74 = *v68;
                  do
                  {
                    *v71++ = -1024458752;
                    *v72++ = -1024458752;
                    *v74++ = -1024458752;
                    --v73;
                  }
                  while (v73);
                }
                uint64_t v75 = *v140;
                if (v75) {
                  memset_pattern16(v69, &unk_1E259BFD0, 4 * v75);
                }
                uint64_t v76 = v58 + 112 * v51;
                *(_DWORD *)(v76 + 72) = 730643660;
                v76 += 72;
                memset_pattern4(*v62, (const void *)v76, 4 * v70);
                uint64_t v77 = malloc_type_calloc((2 * *(_DWORD *)(a1 + 60)), 4uLL, 0x100004052888210uLL);
                *(void *)(v76 + 16) = v77;
                if (!v77)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_15();
                    }
                  }
                  goto LABEL_150;
                }
                double v78 = malloc_type_calloc((2 * *(_DWORD *)(a1 + 60)), 4uLL, 0x100004052888210uLL);
                uint64_t v79 = v58 + 112 * v51;
                *(void *)(v79 + 64) = v78;
                double v80 = (uint64_t *)(v79 + 64);
                if (!v78)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_16();
                    }
                  }
LABEL_150:
                  _VCAudioPowerSpectrum_CleanupFFTForChannel(v59);
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_14();
                    }
                  }
                  goto LABEL_112;
                }
                double v81 = malloc_type_calloc(*(unsigned int *)(a1 + 60), 4uLL, 0x100004052888210uLL);
                *(void *)(v58 + 112 * v51 + 80) = v81;
                if (!v81)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_17();
                    }
                  }
                  goto LABEL_150;
                }
                uint64_t v82 = *v80;
                int v83 = (void *)(v58 + 112 * v51);
                v83[6] = v82;
                uint64_t v84 = *(unsigned int *)(a1 + 60);
                v83[7] = v82 + 4 * v84;
                v83[5] = vDSP_DFT_zrop_CreateSetup(0, (2 * v84), vDSP_DFT_FORWARD);
                size_t v85 = *(unsigned int *)(a1 + 84);
                if (!v85)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_19();
                    }
                  }
                  goto LABEL_109;
                }
                uint64_t v86 = v58 + 112 * v51;
                int v88 = *(_DWORD *)(v86 + 96);
                uint64_t v87 = (int *)(v86 + 96);
                if (v88)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_20();
                    }
                  }
LABEL_109:
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioPowerSpectrum_PushAudioSamples_cold_18();
                    }
                  }
                  goto LABEL_112;
                }
                uint64_t v89 = (float *)malloc_type_calloc(v85, 0xCuLL, 0x10000403E1C8BA9uLL);
                *(void *)(v58 + 112 * v51 + 104) = v89;
                if (!v89) {
                  goto LABEL_109;
                }
                uint64_t v92 = *(void *)(a1 + 88);
                if (v92)
                {
                  uint64_t v93 = *(void *)(a1 + 72);
                  int v94 = *v87;
                  uint64_t v95 = (*(_DWORD *)(a1 + 84) - 1);
                  if (*(_DWORD *)(a1 + 84) == 1)
                  {
                    unint64_t v97 = 0;
                  }
                  else
                  {
                    double v96 = (float *)(v92 + 4);
                    unint64_t v97 = 0;
                    do
                    {
                      float v98 = *v96++;
                      unsigned int v99 = vcvtms_u32_f32(v98);
                      float v100 = v98 - (float)floorf(v98);
                      LODWORD(v90) = *(_DWORD *)(v93 + 4 * v99);
                      double v90 = (double)*(unint64_t *)&v90 * 6.25;
                      *(float *)&double v90 = v90;
                      LODWORD(v91) = *(_DWORD *)(v93 + 4 * (v99 + 1));
                      double v91 = (double)*(unint64_t *)&v91 * 6.25;
                      *(float *)&double v91 = v91;
                      *(_DWORD *)uint64_t v89 = v97;
                      *(float *)&unint64_t v97 = (float)(v100 * *(float *)&v91) + (float)((float)(1.0 - v100) * *(float *)&v90);
                      *((_DWORD *)v89 + 1) = v97;
                      v89 += 3;
                      *uint64_t v87 = ++v94;
                      --v95;
                    }
                    while (v95);
                  }
                  *(_DWORD *)uint64_t v89 = v97;
                  LODWORD(v52) = *v139;
                  LODWORD(v97) = *(_DWORD *)(v93 + 4 * (*v139 - 1));
                  float v106 = (double)v97 * 6.25;
                  v89[1] = v106;
                  *uint64_t v87 = v94 + 1;
                }
                else
                {
                  uint64_t v52 = *v139;
                  if (v52 > 1)
                  {
                    unsigned int v101 = *(uint64_t **)(a1 + 72);
                    int v102 = *v87;
                    for (uint64_t i = 1; i != v52; ++i)
                    {
                      uint64_t v104 = *v101;
                      unsigned int v101 = (uint64_t *)((char *)v101 + 4);
                      v105.i64[0] = v104;
                      v105.i64[1] = HIDWORD(v104);
                      *(float32x2_t *)uint64_t v89 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v105), v137));
                      v89 += 3;
                      *uint64_t v87 = v102 + i;
                    }
                  }
                }
                if (++v51 >= (unint64_t)*(unsigned int *)(SampleFormat + 28)) {
                  goto LABEL_82;
                }
              }
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VCAudioPowerSpectrum_PushAudioSamples_cold_10();
                }
              }
LABEL_138:
              _VCAudioPowerSpectrum_CleanupOctave2IndexTableForChannel(v59);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VCAudioPowerSpectrum_PushAudioSamples_cold_9();
                }
              }
LABEL_112:
              _VCAudioPowerSpectrum_CleanupChannel(v59);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VCAudioPowerSpectrum_PushAudioSamples_cold_8();
                }
              }
              goto LABEL_121;
            }
LABEL_82:
            *(unsigned char *)a1 = 1;
            uint64_t v3 = a2;
LABEL_83:
            SampleCFIndex Count = VCAudioBufferList_GetSampleCount(v3);
            VCAudioBufferList_Shift(*(void *)(a1 + 120), SampleCount);
            VCAudioBufferList_Append(*(void *)(a1 + 120), v3, 0);
            if (VCAudioBufferList_GetChannelCount(*(void *)(a1 + 120)))
            {
              unint64_t v108 = 0;
              do
              {
                if (v108 < *(unsigned int *)(a1 + 36))
                {
                  *(_DWORD *)CMTime buf = -1431655766;
                  vDSP_Length v109 = *(unsigned int *)(a1 + 60);
                  uint64_t v110 = *(void *)(a1 + 128);
                  double v111 = (unsigned int *)(v110 + 112 * v108);
                  BufferAtIndex = (const float *)VCAudioBufferList_GetBufferAtIndex(*(void *)(a1 + 120), v108, buf);
                  vDSP_vmul(BufferAtIndex, 1, *(const float **)(a1 + 64), 1, *((float **)v111 + 11), 1, (2 * v109));
                  vDSP_ctoz(*((const DSPComplex **)v111 + 11), 2, (const DSPSplitComplex *)v111 + 3, 1, v109);
                  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)v111 + 5), *((const float **)v111 + 6), *((const float **)v111 + 7), *((float **)v111 + 6), *((float **)v111 + 7));
                  vDSP_vsmul(*((const float **)v111 + 6), 1, (const float *)(a1 + 96), *((float **)v111 + 6), 1, v109);
                  vDSP_vsmul(*((const float **)v111 + 7), 1, (const float *)(a1 + 96), *((float **)v111 + 7), 1, v109);
                  vDSP_zvmags((const DSPSplitComplex *)v111 + 3, 1, *((float **)v111 + 10), 1, v109);
                  int v113 = (_DWORD *)*((void *)v111 + 10);
                  _DWORD *v113 = 0;
                  uint64_t v114 = (*(_DWORD *)(a1 + 80) - 1);
                  if (*(_DWORD *)(a1 + 80) == 1)
                  {
                    int v117 = *(float **)(v110 + 112 * v108 + 8);
                  }
                  else
                  {
                    uint64_t v115 = 0;
                    unsigned int v116 = *(int **)(a1 + 72);
                    int v117 = *(float **)(v110 + 112 * v108 + 8);
                    int v118 = *v116;
                    do
                    {
                      uint64_t v119 = v115 + 1;
                      int v120 = v116[v115 + 1];
                      float v121 = 1.0e-12;
                      if (v120 > v118)
                      {
                        uint64_t v122 = v120 - (uint64_t)v118;
                        float v121 = 1.0e-12;
                        int v123 = (float *)&v113[v118];
                        do
                        {
                          float v124 = *v123++;
                          float v121 = v121 + v124;
                          --v122;
                        }
                        while (v122);
                      }
                      v117[v115] = v121 / (float)(v120 - v118);
                      int v118 = v120;
                      ++v115;
                    }
                    while (v119 != v114);
                  }
                  float __B = 1.0;
                  unsigned int v125 = (const float **)(v110 + 112 * v108);
                  vDSP_vdbcon(v117, 1, &__B, v117, 1, *v111, 0);
                  float v141 = 0.72654;
                  float __C = 0.13673;
                  vDSP_vasm(v125[1], 1, v125[2], 1, &__C, (float *)v125[2], 1, *v111);
                  vDSP_vsma(v125[3], 1, &v141, v125[2], 1, (float *)v125[3], 1, *v111);
                  memcpy((void *)v125[2], v125[1], 4 * *v111);
                  unsigned int v126 = v125[3];
                  vDSP_Length v127 = *v111;
                  v126[v127] = v126[(v127 - 1)];
                  long long v128 = *(const float **)(a1 + 88);
                  if (v128)
                  {
                    uint64_t v129 = v110 + 112 * v108;
                    vDSP_vlint(v126, v128, 1, *(float **)(v129 + 32), 1, *(unsigned int *)(a1 + 84), v127);
                    unsigned int v126 = *(const float **)(v129 + 32);
                  }
                  unsigned int v130 = *(_DWORD *)(v110 + 112 * v108 + 96);
                  if (v130)
                  {
                    int v131 = (_DWORD *)(*(void *)(v110 + 112 * v108 + 104) + 8);
                    int v132 = v126;
                    uint64_t v133 = *(unsigned int *)(v110 + 112 * v108 + 96);
                    do
                    {
                      int v134 = *(_DWORD *)v132++;
                      *int v131 = v134;
                      v131 += 3;
                      --v133;
                    }
                    while (v133);
                  }
                  VCUtil_ExponentialMovingAverage((float *)(a1 + 112), v126[v130 >> 1], 1.0);
                  *(_DWORD *)(a1 + 112) = v135;
                }
                ++v108;
              }
              while (v108 < VCAudioBufferList_GetChannelCount(*(void *)(a1 + 120)));
            }
            (*(void (**)(void, uint64_t))(a1 + 144))(*(void *)(a1 + 136), a2);
            return;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCAudioPowerSpectrum_PushAudioSamples_cold_7();
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCAudioPowerSpectrum_PushAudioSamples_cold_6();
          }
        }
LABEL_121:
        _VCAudioPowerSpectrum_CleanUp(a1);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCAudioPowerSpectrum_PushAudioSamples_cold_1();
          }
        }
        return;
      }
    }
    else
    {
      *long long v140 = v41;
      if (v41) {
        goto LABEL_50;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioPowerSpectrum_PushAudioSamples_cold_5();
        }
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioPowerSpectrum_PushAudioSamples_cold_4();
      }
    }
    goto LABEL_121;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v20 = VRTraceErrorLogLevelToCSTR();
    int v21 = *MEMORY[0x1E4F47A50];
    __int16 v22 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        if (a1)
        {
          uint64_t v24 = *(void *)(a1 + 136);
          uint64_t v23 = *(void *)(a1 + 144);
        }
        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
        }
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCAudioPowerSpectrum_PushAudioSamples";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 485;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a1;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&buf[40] = v23;
        __int16 v145 = 2048;
        uint64_t v146 = v24;
        _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Power spectrum is not correctly configured: context[%p] sincCallback[%p] sinkContext[%p]", buf, 0x3Au);
      }
    }
    else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      if (a1)
      {
        uint64_t v26 = *(void *)(a1 + 136);
        uint64_t v25 = *(void *)(a1 + 144);
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
      }
      *(_DWORD *)CMTime buf = 136316418;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VCAudioPowerSpectrum_PushAudioSamples";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 485;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a1;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = v25;
      __int16 v145 = 2048;
      uint64_t v146 = v26;
      _os_log_debug_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Power spectrum is not correctly configured: context[%p] sincCallback[%p] sinkContext[%p]", buf, 0x3Au);
    }
  }
}

void _VCAudioPowerSpectrum_CleanupChannel(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[13];
    if (v2)
    {
      free(v2);
      a1[13] = 0;
    }
  }
  _VCAudioPowerSpectrum_CleanupFFTForChannel(a1);

  _VCAudioPowerSpectrum_CleanupOctave2IndexTableForChannel(a1);
}

void _VCAudioPowerSpectrum_CleanupFFTForChannel(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[11];
    if (v2)
    {
      free(v2);
      a1[11] = 0;
    }
    uint64_t v3 = (void *)a1[8];
    if (v3)
    {
      free(v3);
      a1[8] = 0;
    }
    uint64_t v4 = (void *)a1[10];
    if (v4)
    {
      free(v4);
      a1[10] = 0;
    }
    uint64_t v5 = (vDSP_DFT_SetupStruct *)a1[5];
    if (v5)
    {
      vDSP_DFT_DestroySetup(v5);
      a1[5] = 0;
    }
  }
}

void _VCAudioPowerSpectrum_CleanupOctave2IndexTableForChannel(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0;
    }
    uint64_t v3 = (void *)a1[2];
    if (v3)
    {
      free(v3);
      a1[2] = 0;
    }
    uint64_t v4 = (void *)a1[3];
    if (v4)
    {
      free(v4);
      a1[3] = 0;
    }
    uint64_t v5 = (void *)a1[4];
    if (v5)
    {
      free(v5);
      a1[4] = 0;
    }
  }
}

void OUTLINED_FUNCTION_7_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x250], 8) = a1;
}

void CARingBuffer::CARingBuffer(CARingBuffer *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 0;
}

void CARingBuffer::Deallocate(CARingBuffer *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    free(v2);
    *(void *)this = 0;
  }
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 4) = 0;
}

void CARingBuffer::~CARingBuffer(CARingBuffer *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    free(v2);
    *(void *)this = 0;
  }
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 4) = 0;
}

void CARingBuffer::Allocate(CARingBuffer *this, int a2, int a3, int a4)
{
  long long v8 = *(void **)this;
  if (v8)
  {
    free(v8);
    *(void *)this = 0;
  }
  uint64_t v9 = 1 << (32 - __clz(a4 - 1));
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = v9;
  *((_DWORD *)this + 5) = v9 - 1;
  LODWORD(v9) = v9 * a3;
  *((_DWORD *)this + 6) = v9;
  size_t v10 = ((v9 + 8) * a2);
  double v11 = (char *)malloc_type_malloc(v10, 0x119EDC6DuLL);
  bzero(v11, v10);
  *(void *)this = v11;
  if (a2 > 0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *((unsigned int *)this + 6);
    float v14 = &v11[8 * a2];
    do
    {
      *(void *)(*(void *)this + 8 * v12) = v14;
      v14 += v13;
      ++v12;
    }
    while (a2 != v12);
  }
  for (uint64_t i = 0; i != 768; i += 24)
  {
    unsigned int v16 = (char *)this + i;
    *((void *)v16 + 4) = 0;
    *((void *)v16 + 5) = 0;
    *((_DWORD *)v16 + 12) = 0;
  }
  *((_DWORD *)this + 200) = 0;
}

uint64_t CARingBuffer::Store(CARingBuffer *this, const AudioBufferList *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *((unsigned int *)this + 4);
  if (v4 < a3) {
    return 3;
  }
  uint64_t v8 = a4 + a3;
  int v9 = *((_DWORD *)this + 200);
  size_t v10 = (char *)this + 24 * (v9 & 0x1F);
  uint64_t v12 = *((void *)v10 + 5);
  double v11 = (uint64_t *)(v10 + 40);
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  if (v12 > a4) {
    goto LABEL_8;
  }
  if (v8 - *((void *)this + 3 * (v9 & 0x1F) + 4) > v4)
  {
    uint64_t v13 = v8 - v4;
    if (v8 - v4 <= *v11) {
      uint64_t v14 = *v11;
    }
    else {
      uint64_t v14 = v8 - v4;
    }
LABEL_8:
    long long v15 = (char *)this + 24 * ((v9 + 1) & 0x1F);
    *((void *)v15 + 4) = v13;
    *((void *)v15 + 5) = v14;
    *((_DWORD *)v15 + 12) = v9 + 1;
    atomic_compare_exchange_strong((atomic_uint *volatile)this + 200, &v16, v9 + 1);
  }
  unsigned int v17 = *(void ***)this;
  uint64_t v18 = *((void *)this + 3 * (*((_DWORD *)this + 200) & 0x1F) + 5);
  int v19 = *((_DWORD *)this + 5);
  int v21 = *((_DWORD *)this + 2);
  int v20 = *((_DWORD *)this + 3);
  if (v18 >= a4)
  {
    int v23 = (v19 & a4) * v20;
  }
  else
  {
    int v22 = (v19 & v18) * v20;
    int v23 = (v19 & a4) * v20;
    if (v23 <= v22)
    {
      if (v21 >= 1)
      {
        uint64_t v29 = v22;
        size_t v30 = *((_DWORD *)this + 6) - v22;
        unsigned int v31 = v21 + 1;
        unint64_t v32 = *(uint64_t **)this;
        do
        {
          uint64_t v33 = *v32++;
          bzero((void *)(v33 + v29), v30);
          --v31;
        }
        while (v31 > 1);
        unsigned int v34 = v21 + 1;
        float v35 = v17;
        do
        {
          unsigned int v36 = *v35++;
          bzero(v36, v23);
          --v34;
        }
        while (v34 > 1);
      }
    }
    else if (v21 >= 1)
    {
      uint64_t v24 = v22;
      size_t v25 = v23 - v22;
      unsigned int v26 = v21 + 1;
      unsigned int v27 = *(uint64_t **)this;
      do
      {
        uint64_t v28 = *v27++;
        bzero((void *)(v28 + v24), v25);
        --v26;
      }
      while (v26 > 1);
    }
  }
  int v37 = (*((_DWORD *)this + 5) & v8) * *((_DWORD *)this + 3);
  signed int mNumberBuffers = a2->mNumberBuffers;
  if (v37 <= v23)
  {
    if (mNumberBuffers >= 1)
    {
      size_t v45 = *((_DWORD *)this + 6) - v23;
      unsigned int v46 = mNumberBuffers + 1;
      uint64_t v47 = 16;
      double v48 = v17;
      do
      {
        uint64_t v49 = (uint64_t)*v48++;
        memcpy((void *)(v49 + v23), *(const void **)((char *)&a2->mNumberBuffers + v47), v45);
        v47 += 16;
        --v46;
      }
      while (v46 > 1);
      UInt32 v50 = a2->mNumberBuffers;
      if ((int)a2->mNumberBuffers >= 1)
      {
        size_t v51 = v37;
        p_mData = &a2->mBuffers[0].mData;
        unsigned int v53 = v50 + 1;
        do
        {
          dispatch_time_t v55 = *v17++;
          unsigned int v54 = v55;
          int v56 = (char *)*p_mData;
          p_mData += 2;
          memcpy(v54, &v56[v45], v51);
          --v53;
        }
        while (v53 > 1);
      }
    }
  }
  else if (mNumberBuffers >= 1)
  {
    size_t v39 = v37 - v23;
    size_t v40 = &a2->mBuffers[0].mData;
    unsigned int v41 = mNumberBuffers + 1;
    do
    {
      uint64_t v42 = (uint64_t)*v17++;
      unint64_t v43 = (void *)(v42 + v23);
      unint64_t v44 = *v40;
      v40 += 2;
      memcpy(v43, v44, v39);
      --v41;
    }
    while (v41 > 1);
  }
  uint64_t result = 0;
  int v57 = *((_DWORD *)this + 200);
  uint64_t v58 = (char *)this + 24 * ((v57 + 1) & 0x1F) + 32;
  *(void *)uint64_t v58 = *((void *)this + 3 * (v57 & 0x1F) + 4);
  *((void *)v58 + 1) = v8;
  *((_DWORD *)v58 + 4) = v57 + 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)this + 200, (unsigned int *)&v57, v57 + 1);
  return result;
}

uint64_t CARingBuffer::Fetch(CARingBuffer *this, AudioBufferList *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v6 = a4 + a3;
  int v7 = *((_DWORD *)this + 200);
  uint64_t v8 = (char *)this + 24 * (v7 & 0x1F);
  int v9 = (uint64_t *)(v8 + 32);
  size_t v10 = (uint64_t *)(v8 + 40);
  double v11 = v8 + 48;
  int v12 = 8;
  while (*v11 != v7)
  {
    if (!--v12) {
      return 4;
    }
  }
  if (a4 <= *v9) {
    uint64_t v14 = *v9;
  }
  else {
    uint64_t v14 = a4;
  }
  if (*v10 >= v6) {
    uint64_t v15 = a4 + a3;
  }
  else {
    uint64_t v15 = *v10;
  }
  if (v15 <= v14) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v15;
  }
  int v17 = v14 - a4;
  if ((int)v14 - (int)a4 > (int)a3) {
    return 5;
  }
  int v18 = v6 - v16;
  uint64_t v19 = v16 - v14 + v17;
  if (v19 + (int)v6 - (int)v16 > a3) {
    return 5;
  }
  if (v17 >= 1 && (int)a2->mNumberBuffers >= 1)
  {
    size_t v20 = *((_DWORD *)this + 3) * v17;
    p_mData = &a2->mBuffers[0].mData;
    UInt32 v22 = a2->mNumberBuffers + 1;
    do
    {
      int v23 = *p_mData;
      p_mData += 2;
      bzero(v23, v20);
      --v22;
    }
    while (v22 > 1);
  }
  if (v18 >= 1 && (int)v4->mNumberBuffers >= 1)
  {
    int v24 = *((_DWORD *)this + 3);
    int v25 = v24 * v18;
    uint64_t v26 = v24 * (int)v19;
    size_t v27 = v25;
    uint64_t v28 = &v4->mBuffers[0].mData;
    unsigned int v29 = v4->mNumberBuffers + 1;
    do
    {
      size_t v30 = (char *)*v28;
      v28 += 2;
      bzero(&v30[v26], v27);
      --v29;
    }
    while (v29 > 1);
  }
  unsigned int v31 = *(const void ***)this;
  int v32 = *((_DWORD *)this + 5);
  int v33 = *((_DWORD *)this + 3);
  int v34 = (v32 & v14) * v33;
  int v35 = (v32 & v16) * v33;
  signed int v36 = v35 - v34;
  if (v35 <= v34)
  {
    int v44 = *((_DWORD *)this + 6) - v34;
    if ((int)v4->mNumberBuffers >= 1)
    {
      int v62 = *((_DWORD *)this + 6) - v34;
      int v63 = (v32 & v16) * v33;
      uint64_t v45 = v33 * v17;
      uint64_t v46 = v34;
      size_t v47 = v44;
      double v48 = v4;
      unsigned int v49 = v4->mNumberBuffers + 1;
      uint64_t v50 = 16;
      size_t v51 = *(uint64_t **)this;
      do
      {
        uint64_t v52 = *v51++;
        memcpy((void *)(*(void *)((char *)&v48->mNumberBuffers + v50) + v45), (const void *)(v52 + v46), v47);
        v50 += 16;
        --v49;
      }
      while (v49 > 1);
      int mNumberBuffers = v48->mNumberBuffers;
      uint64_t v4 = v48;
      int v44 = v62;
      int v35 = v63;
      if (mNumberBuffers >= 1)
      {
        uint64_t v54 = v62 + *((_DWORD *)this + 3) * v17;
        dispatch_time_t v55 = &v4->mBuffers[0].mData;
        unsigned int v56 = mNumberBuffers + 1;
        do
        {
          int v57 = (char *)*v55;
          v55 += 2;
          uint64_t v58 = &v57[v54];
          BOOL v59 = *v31++;
          memcpy(v58, v59, v63);
          --v56;
        }
        while (v56 > 1);
      }
    }
    signed int v36 = v44 + v35;
    goto LABEL_37;
  }
  if ((int)v4->mNumberBuffers >= 1)
  {
    uint64_t v37 = v33 * v17;
    uint64_t v38 = v34;
    size_t v39 = &v4->mBuffers[0].mData;
    unsigned int v40 = v4->mNumberBuffers + 1;
    do
    {
      unsigned int v41 = (char *)*v39;
      v39 += 2;
      uint64_t v42 = &v41[v37];
      uint64_t v43 = (uint64_t)*v31++;
      memcpy(v42, (const void *)(v43 + v38), v36);
      --v40;
    }
    while (v40 > 1);
LABEL_37:
    if ((int)v4->mNumberBuffers >= 1)
    {
      p_mDataByteSize = &v4->mBuffers[0].mDataByteSize;
      unsigned int v61 = v4->mNumberBuffers + 1;
      do
      {
        UInt32 *p_mDataByteSize = v36;
        p_mDataByteSize += 4;
        --v61;
      }
      while (v61 > 1);
    }
  }
  return 0;
}

uint64_t _AVCStatisticsCollectorHandlerList_CompareListEntries(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  BOOL v4 = v2 == v3;
  unsigned int v5 = 2 * (v2 >= v3);
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t _AVCStatisticsCollector_CleanupChangeHandlers(uint64_t a1)
{
  v5[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MEMORY[0x1E4F143A8];
  for (uint64_t i = 360; i != 840; i += 32)
  {
    v5[0] = v2;
    v5[1] = 3221225472;
    v5[2] = ___AVCStatisticsCollector_CleanupChangeHandlers_block_invoke;
    v5[3] = &unk_1E6DB4470;
    v5[4] = a1;
    uint64_t result = VCSingleLinkedListClear(a1 + i, (uint64_t)v5);
  }
  return result;
}

void _AVCStatisticsCollector_ProcessVCStatisticsInternal(uint64_t a1, unsigned int *a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 68);
  uint64_t v5 = *(void *)(a1 + 32);
  if ((v4 & 0xFFFFFFFE) == 8)
  {
    if (*a2 == 2)
    {
      _AVCStatisticsCollector_UpdatePacketReceivedCount(a1, (uint64_t)a2);
      uint64_t SendHistoryElement = VCStatisticsHistory_GetSendHistoryElement(v5, a2[17]);
      if (SendHistoryElement)
      {
        long long v76 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        *((void *)&v76 + 1) = *((void *)a2 + 1);
        LODWORD(v77) = a2[6];
        unsigned int v13 = *(_DWORD *)(SendHistoryElement + 16);
        *(void *)&long long v78 = *(void *)(SendHistoryElement + 24);
        *(void *)((char *)&v77 + 4) = __PAIR64__(*(_DWORD *)(a1 + 100), v13);
        DWORD2(v79) = a2[10];
        VCStatisticsHistory_AddStatsHistory(v5, (unsigned __int8 *)&v76);
        a2[16] = DWORD1(v77);
      }
      goto LABEL_20;
    }
    if (*a2 != 6 || !a2[6]) {
      goto LABEL_20;
    }
    double v8 = *((double *)a2 + 1);
LABEL_19:
    uint64_t v14 = (double *)malloc_type_calloc(1uLL, 0x38uLL, 0x102004094C8A1BEuLL);
    *(_DWORD *)uint64_t v14 = a2[6];
    v14[1] = v8;
    *((_DWORD *)v14 + 4) = a2[7];
    *((void *)v14 + 3) = a2[8];
    VCStatisticsHistory_AddAndPruneSendHistory(v5, (int *)v14, v8 + -5.0);
    goto LABEL_20;
  }
  if ((v4 & 0xFFFFFFFE) == 4)
  {
    if (*a2 == 5 && a2[8])
    {
      long long v76 = 0u;
      long long v77 = 0u;
      LOBYTE(v76) = *((unsigned char *)a2 + 24);
      *((void *)&v76 + 1) = *((void *)a2 + 1);
      LODWORD(v77) = a2[7];
      *(void *)((char *)&v77 + 4) = *(void *)(a2 + 9);
      uint64_t v6 = *(void *)(a2 + 11);
      *(void *)&long long v7 = v6;
      *((void *)&v7 + 1) = HIDWORD(v6);
      long long v78 = v7;
      long long v79 = 0u;
      *(void *)&long long v79 = a2[13];
LABEL_15:
      VCStatisticsHistory_AddStatsHistory(v5, (unsigned __int8 *)&v76);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  if (v4 != 7) {
    goto LABEL_20;
  }
  if (*a2 == 6)
  {
    double v8 = *((double *)a2 + 5);
    goto LABEL_19;
  }
  if (*a2 == 2)
  {
    _AVCStatisticsCollector_UpdatePacketReceivedCount(a1, (uint64_t)a2);
    uint64_t v9 = VCStatisticsHistory_GetSendHistoryElement(v5, a2[17]);
    if (v9)
    {
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      *((void *)&v76 + 1) = *((void *)a2 + 1);
      unsigned int v10 = *(_DWORD *)(v9 + 16);
      unsigned int v11 = a2[13];
      LODWORD(v77) = a2[6];
      *(void *)((char *)&v77 + 4) = __PAIR64__(v11, v10);
      DWORD2(v79) = a2[10];
      goto LABEL_15;
    }
  }
LABEL_20:
  unsigned int v15 = *(_DWORD *)(a1 + 68);
  if (v15 <= 9)
  {
    if (((1 << v15) & 0x38A) != 0)
    {
      if (*a2 == 2)
      {
        int v17 = *(_DWORD *)(a1 + 84);
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 84), (unsigned int *)&v17, 1000 * a2[8], memory_order_relaxed, memory_order_relaxed);
        a2[9] = a2[8] & 7;
        goto LABEL_43;
      }
      if (*a2 != 4)
      {
LABEL_43:
        unsigned int v15 = *(_DWORD *)(a1 + 68);
        goto LABEL_44;
      }
LABEL_24:
      _AVCStatisticsCollector_ComputeBWEstimation(a1, (double *)a2);
      goto LABEL_43;
    }
    if (v15 == 4)
    {
      int v16 = *a2;
      if (*a2 != 5)
      {
        unsigned int v15 = 4;
        goto LABEL_49;
      }
      _AVCStatisticsCollector_ComputeBWEstimation(a1, (double *)a2);
      goto LABEL_33;
    }
    if (v15 == 5)
    {
      int v16 = *a2;
      if (*a2 != 5)
      {
        if (v16 != 4)
        {
          unsigned int v15 = 5;
          goto LABEL_49;
        }
        a2[12] = a2[8];
        goto LABEL_24;
      }
      double v18 = *((double *)a2 + 1);
      VCRateControlBandwidthEstimatorMap_EstimatedBandwidthWithArrivalTime(*(void *)(a1 + 16), v18);
      unsigned int v20 = *(_DWORD *)(a1 + 104);
      if (v20 >= v19 || v20 == 0) {
        unsigned int v22 = v19;
      }
      else {
        unsigned int v22 = *(_DWORD *)(a1 + 104);
      }
      VCRateControlBandwidthEstimatorMap_EstimatedBandwidthUncappedWithArrivalTime(*(void *)(a1 + 16), v18);
      int v24 = *(_DWORD *)(a1 + 76);
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 76), (unsigned int *)&v24, v22, memory_order_relaxed, memory_order_relaxed);
      int v25 = *(_DWORD *)(a1 + 80);
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v25, v23, memory_order_relaxed, memory_order_relaxed);
      if (a2[15])
      {
LABEL_42:
        a2[27] = *(_DWORD *)(a1 + 108);
        goto LABEL_43;
      }
LABEL_33:
      a2[15] = *(_DWORD *)(a1 + 76);
      goto LABEL_42;
    }
  }
LABEL_44:
  if (v15 > 9 || ((1 << v15) & 0x3B0) == 0) {
    goto LABEL_79;
  }
  int v16 = *a2;
LABEL_49:
  if (v16 == 7)
  {
    if (a2[6] != 4) {
      goto LABEL_79;
    }
    [*(id *)(a1 + 24) relativeSendTimeWithTimestamp:a2[7] timestampRate:a2[8]];
    double v34 = v33;
    [*(id *)(a1 + 24) relativeReceiveTimeWithTimestamp:(*((double *)a2 + 6) * 1000.0) timestampRate:1000];
    [*(id *)(a1 + 24) calculateOWRDWithSendTime:v34 receiveTime:v35 roundTripTime:0.0];
    [*(id *)(a1 + 24) owrd];
    *((void *)a2 + 7) = v36;
  }
  else
  {
    if (v16 != 5) {
      goto LABEL_63;
    }
    if (a2[8])
    {
      if (v15 == 5) {
        uint64_t v27 = 1000;
      }
      else {
        uint64_t v27 = 1024;
      }
      if (v15 == 5) {
        uint64_t v28 = 1024;
      }
      else {
        uint64_t v28 = 1000;
      }
      [*(id *)(a1 + 24) relativeSendTimeWithTimestamp:a2[7] timestampRate:v27];
      double v30 = v29;
      [*(id *)(a1 + 24) relativeReceiveTimeWithTimestamp:a2[8] timestampRate:v28];
      [*(id *)(a1 + 24) calculateOWRDWithSendTime:v30 receiveTime:v31 roundTripTime:*((double *)a2 + 8)];
    }
    [*(id *)(a1 + 24) owrd];
    *((void *)a2 + 9) = v32;
  }
  int v16 = *a2;
LABEL_63:
  if (v16 == 2)
  {
    uint64_t v37 = *(void *)(a1 + 32);
    double v38 = *((double *)a2 + 1);
    double v39 = 5.0;
  }
  else
  {
    if (v16 != 5) {
      goto LABEL_68;
    }
    *((double *)a2 + 10) = VCStatisticsHistory_PacketLossRate(*(void *)(a1 + 32), *((double *)a2 + 1), 5.0);
    uint64_t v37 = *(void *)(a1 + 32);
    double v38 = *((double *)a2 + 1);
    double v39 = 1.0;
  }
  *((double *)a2 + 11) = VCStatisticsHistory_PacketLossRate(v37, v38, v39);
  int v16 = *a2;
LABEL_68:
  if (v16 == 2)
  {
    a2[24] = VCStatisticsHistory_SendingBitrate(*(void *)(a1 + 32), *((double *)a2 + 1), 5.0);
    a2[25] = VCStatisticsHistory_SendingBitrate(*(void *)(a1 + 32), *((double *)a2 + 1), 0.5);
    goto LABEL_79;
  }
  if (v16 == 5 && !a2[24])
  {
    int v40 = *(_DWORD *)(a1 + 68);
    if (v40 == 4)
    {
      a2[24] = VCStatisticsHistory_SendingBitrate(*(void *)(a1 + 32), *((double *)a2 + 1), 5.0);
      double v41 = VCStatisticsHistory_SendingBitrate(*(void *)(a1 + 32), *((double *)a2 + 1), 0.5);
    }
    else
    {
      if (v40 != 5)
      {
LABEL_78:
        a2[26] = VCStatisticsHistory_ServerStatsBitrate(*(void *)(a1 + 32), *((double *)a2 + 1), 5.0);
        goto LABEL_79;
      }
      a2[24] = VCStatisticsHistory_ReceivingBitrate(*(void *)(a1 + 32), *((double *)a2 + 1), 5.0);
      double v41 = VCStatisticsHistory_ReceivingBitrate(*(void *)(a1 + 32), *((double *)a2 + 1), 0.5);
    }
    a2[25] = v41;
    goto LABEL_78;
  }
LABEL_79:
  int v42 = *a2;
  if ((*(_DWORD *)(a1 + 68) - 7) > 2)
  {
    if (v42 == 2)
    {
      _AVCStatisticsCollector_UpdatePacketReceivedCount(a1, (uint64_t)a2);
LABEL_88:
      int v42 = *a2;
    }
  }
  else if (v42 == 2)
  {
    double v43 = VCStatisticsHistory_RoundTripTimeWithPacketId(*(void *)(a1 + 32), a2[17], *((double *)a2 + 1));
    double v44 = 0.0;
    if (v43 <= 65.535)
    {
      LODWORD(v44) = a2[7];
      double v44 = fmax(v43 + (double)*(unint64_t *)&v44 / -1000.0, 0.0);
    }
    *((double *)a2 + 13) = v44;
    int v42 = *a2;
    if (*a2 == 2)
    {
      unsigned int BurstyLoss = VCStatisticsHistory_GetBurstyLoss(*(void *)(a1 + 32), *((double *)a2 + 1), 5.0, 0.9);
      if (BurstyLoss != -1) {
        a2[12] = BurstyLoss;
      }
      goto LABEL_88;
    }
  }
  if (*(_DWORD *)(a1 + 68) == 7 && v42 == 14)
  {
    VCStatisticsHistory_BytesInFlight(*(void *)(a1 + 32), (double *)a2 + 4, (double *)a2 + 3);
    a2[10] = v46;
    int v42 = *a2;
  }
  uint64_t v47 = *(void *)(a1 + 8);
  switch(v42)
  {
    case 2:
      double v48 = (pthread_rwlock_t *)(a1 + 144);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 144));
      long long v49 = *(_OWORD *)(a2 + 14);
      long long v50 = *(_OWORD *)(a2 + 10);
      *(_OWORD *)uint64_t v47 = *(_OWORD *)(a2 + 6);
      *(_OWORD *)(v47 + 16) = v50;
      *(_OWORD *)(v47 + 32) = v49;
      long long v51 = *(_OWORD *)(a2 + 22);
      long long v52 = *(_OWORD *)(a2 + 30);
      long long v53 = *(_OWORD *)(a2 + 18);
      *(_OWORD *)(v47 + 80) = *(_OWORD *)(a2 + 26);
      *(_OWORD *)(v47 + 96) = v52;
      *(_OWORD *)(v47 + 4_Block_object_dispose(&STACK[0x250], 8) = v53;
      *(_OWORD *)(v47 + 64) = v51;
      long long v54 = *(_OWORD *)(a2 + 38);
      long long v55 = *(_OWORD *)(a2 + 46);
      long long v56 = *(_OWORD *)(a2 + 34);
      *(_OWORD *)(v47 + 144) = *(_OWORD *)(a2 + 42);
      *(_OWORD *)(v47 + 160) = v55;
      *(_OWORD *)(v47 + 112) = v56;
      *(_OWORD *)(v47 + 12_Block_object_dispose(&STACK[0x250], 8) = v54;
      if (*((unsigned char *)a2 + 116))
      {
        int v57 = a2 + 30;
        if (a2[30] == 3)
        {
LABEL_106:
          long long v68 = *(_OWORD *)v57;
          long long v69 = *((_OWORD *)v57 + 1);
          long long v70 = *((_OWORD *)v57 + 2);
          *(void *)(v47 + 400) = *((void *)v57 + 6);
          *(_OWORD *)(v47 + 36_Block_object_dispose(&STACK[0x250], 8) = v69;
          *(_OWORD *)(v47 + 384) = v70;
          *(_OWORD *)(v47 + 352) = v68;
        }
      }
      goto LABEL_115;
    case 3:
      double v48 = (pthread_rwlock_t *)(a1 + 144);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 144));
      long long v58 = *(_OWORD *)(a2 + 10);
      long long v59 = *(_OWORD *)(a2 + 18);
      long long v60 = *(_OWORD *)(a2 + 6);
      *(_OWORD *)(v47 + 20_Block_object_dispose(&STACK[0x250], 8) = *(_OWORD *)(a2 + 14);
      *(_OWORD *)(v47 + 224) = v59;
      *(_OWORD *)(v47 + 176) = v60;
      *(_OWORD *)(v47 + 192) = v58;
      goto LABEL_115;
    case 4:
      double v48 = (pthread_rwlock_t *)(a1 + 144);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 144));
      if (*((unsigned char *)a2 + 52))
      {
        int v57 = a2 + 14;
        if (a2[14] == 4)
        {
LABEL_107:
          long long v71 = *(_OWORD *)v57;
          long long v72 = *((_OWORD *)v57 + 1);
          long long v73 = *((_OWORD *)v57 + 2);
          *(void *)(v47 + 456) = *((void *)v57 + 6);
          *(_OWORD *)(v47 + 424) = v72;
          *(_OWORD *)(v47 + 440) = v73;
          *(_OWORD *)(v47 + 40_Block_object_dispose(&STACK[0x250], 8) = v71;
        }
      }
      goto LABEL_115;
    case 5:
      double v48 = (pthread_rwlock_t *)(a1 + 144);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 144));
      long long v61 = *(_OWORD *)(a2 + 10);
      *(_OWORD *)(v47 + 240) = *(_OWORD *)(a2 + 6);
      *(_OWORD *)(v47 + 256) = v61;
      long long v62 = *(_OWORD *)(a2 + 18);
      long long v63 = *(_OWORD *)(a2 + 22);
      long long v64 = *(_OWORD *)(a2 + 14);
      *(void *)(v47 + 320) = *((void *)a2 + 13);
      *(_OWORD *)(v47 + 28_Block_object_dispose(&STACK[0x250], 8) = v62;
      *(_OWORD *)(v47 + 304) = v63;
      *(_OWORD *)(v47 + 272) = v64;
      goto LABEL_115;
    case 7:
      double v48 = (pthread_rwlock_t *)(a1 + 144);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 144));
      int v57 = a2 + 6;
      switch(a2[6])
      {
        case 1u:
          unsigned int v65 = a2[19];
          uint64_t v66 = a1;
          int v67 = 1;
          goto LABEL_112;
        case 2u:
          unsigned int v65 = a2[19];
          uint64_t v66 = a1;
          int v67 = 0;
LABEL_112:
          _AVCStatisticsCollector_UpdateMaxLocalBurstyLoss(v66, v65, v67);
          break;
        case 3u:
          goto LABEL_106;
        case 4u:
          goto LABEL_107;
        case 5u:
          *(void *)(a1 + 12_Block_object_dispose(&STACK[0x250], 8) = *((void *)a2 + 7);
          break;
        case 6u:
          *(unsigned char *)(a1 + 140) = 1;
          break;
        default:
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _AVCStatisticsCollector_ProcessVCStatisticsInternal_cold_1();
            }
          }
          break;
      }
      goto LABEL_115;
    case 10:
      if (a2[6] != 4) {
        goto LABEL_116;
      }
      double v48 = (pthread_rwlock_t *)(a1 + 144);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 144));
      *(_DWORD *)(v47 + 464) = a2[6];
      *(_DWORD *)(v47 + 504) = a2[16];
LABEL_115:
      pthread_rwlock_unlock(v48);
LABEL_116:
      if (!*((unsigned char *)a2 + 19))
      {
        if (!*((unsigned char *)a2 + 16)) {
          _AVCStatisticsCollector_UpdateStatisticChangeHandlerDictionaryCache(a1);
        }
        pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 840));
        uint64_t v74 = a1 + 32 * *a2 + 360;
        v75[0] = MEMORY[0x1E4F143A8];
        v75[1] = 3221225472;
        v75[2] = ___AVCStatisticsCollector_ProcessVCStatisticsInternal_block_invoke;
        v75[3] = &__block_descriptor_40_e66_v24__0___VCSingleLinkedListEntry____VCSingleLinkedListEntry__8_B16l;
        v75[4] = a2;
        VCSingleLinkedListEnumerate(v74, (uint64_t)v75);
        pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 840));
      }
      return;
    case 13:
      double v48 = (pthread_rwlock_t *)(a1 + 144);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 144));
      *(void *)(v47 + 52_Block_object_dispose(&STACK[0x250], 8) = *((void *)a2 + 3);
      goto LABEL_115;
    default:
      goto LABEL_116;
  }
}

uint64_t _AVCStatisticsCollector_UpdateStatisticChangeHandlerDictionaryCache(uint64_t a1)
{
  v10[1] = *(void **)MEMORY[0x1E4F143B8];
  v10[0] = 0;
  uint64_t v2 = (pthread_rwlock_t *)(a1 + 840);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 840));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1080));
  unsigned int v3 = (void *)(a1 + 1048);
  int v4 = *(void **)(a1 + 1048);
  if (v4 != (void *)(a1 + 1048))
  {
    uint64_t v5 = a1 + 360;
    do
    {
      *unsigned int v3 = *v4;
      *(void *)(*v4 + _Block_object_dispose(&STACK[0x250], 8) = v4[1];
      *int v4 = v4;
      v4[1] = v4;
      v10[0] = v4;
      int v6 = *((_DWORD *)v4 + 4);
      if (v6 == 2)
      {
        _AVCStatisticsCollector_CleanupChangeHandlers(a1);
      }
      else if (v6 == 1)
      {
        uint64_t v7 = v5 + 32 * *((unsigned int *)v4 + 5);
        uint64_t v9 = (void *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v9 = VCSingleLinkedListRemove(v7, v4[3]);
        _AVCStatisticsCollector_DestroyChangeHandlerEntry(a1, &v9);
      }
      else if (!v6 && VCSingleLinkedListPush(v5 + 32 * *((unsigned int *)v4 + 5), (void *)v4[3]))
      {
        *((void *)v10[0] + 3) = 0;
      }
      _AVCStatisticsCollector_DestroyChangeHandlerRequest(a1, v10);
      int v4 = *(void **)(a1 + 1048);
    }
    while (v4 != v3);
  }
  v10[0] = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1080));
  return pthread_rwlock_unlock(v2);
}

BOOL _AVCStatisticsCollector_PushChangeHandlerRequest(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unsigned int v10 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 344), 24, 0);
  if (v10)
  {
    unsigned int v11 = v10;
    *unsigned int v10 = 0;
    if (a5) {
      int v12 = _Block_copy(a5);
    }
    else {
      int v12 = 0;
    }
    v11[2] = v12;
    *((_DWORD *)v11 + 2) = a4;
    unsigned int v22 = v11;
    unsigned int v13 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 1040), 32, 0);
    if (v13)
    {
      *unsigned int v13 = v13;
      v13[1] = v13;
      *((_DWORD *)v13 + 4) = a2;
      *((_DWORD *)v13 + 5) = a3;
      v13[3] = v11;
      uint64_t v14 = *(void **)(a1 + 1056);
      v13[1] = v14;
      *unsigned int v13 = *v14;
      *uint64_t v14 = v13;
      *(void *)(a1 + 1056) = v13;
      return 1;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v20 = VRTraceErrorLogLevelToCSTR();
      int v21 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v24 = v20;
        __int16 v25 = 2080;
        uint64_t v26 = "_AVCStatisticsCollector_PushChangeHandlerRequest";
        __int16 v27 = 1024;
        int v28 = 311;
        __int16 v29 = 2048;
        uint64_t v30 = a1;
        __int16 v31 = 1024;
        int v32 = a2;
        __int16 v33 = 1024;
        int v34 = a3;
        _os_log_error_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d statisticsCollector[%p] Failed to create the request. requestType=%d handlerType=%d", buf, 0x32u);
      }
    }
    _AVCStatisticsCollector_DestroyChangeHandlerEntry(a1, &v22);
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    int v17 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v24 = v16;
      __int16 v25 = 2080;
      uint64_t v26 = "_AVCStatisticsCollector_NewChangeHandlerEntry";
      __int16 v27 = 1024;
      int v28 = 269;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      __int16 v31 = 1024;
      int v32 = a4;
      _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d statisticsCollector[%p] Failed to create the entry. identifier=%d", buf, 0x2Cu);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  uint64_t v18 = VRTraceErrorLogLevelToCSTR();
  double v19 = *MEMORY[0x1E4F47A50];
  BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)CMTime buf = 136316418;
    uint64_t v24 = v18;
    __int16 v25 = 2080;
    uint64_t v26 = "_AVCStatisticsCollector_PushChangeHandlerRequest";
    __int16 v27 = 1024;
    int v28 = 308;
    __int16 v29 = 2048;
    uint64_t v30 = a1;
    __int16 v31 = 1024;
    int v32 = a2;
    __int16 v33 = 1024;
    int v34 = a3;
    _os_log_error_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d statisticsCollector[%p] Failed to create the entry. requestType=%d handlerType=%d", buf, 0x32u);
    return 0;
  }
  return result;
}

void AVCStatisticsCollector_SetVCStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if (*(unsigned char *)(a2 + 17))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v4 = VRTraceErrorLogLevelToCSTR();
        uint64_t v5 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 136315906;
          uint64_t v9 = v4;
          __int16 v10 = 2080;
          unsigned int v11 = "AVCStatisticsCollector_SetVCStatistics";
          __int16 v12 = 1024;
          int v13 = 424;
          __int16 v14 = 2048;
          uint64_t v15 = a1;
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d statisticsCollector=%p should flush all message", (uint8_t *)&v8, 0x26u);
        }
      }
      VCStatisticsCollectorQueue_FlushAllStatistics(*(void *)(a1 + 40));
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1088));
    if (*(unsigned char *)(a1 + 73))
    {
      if (*(unsigned char *)(a2 + 16))
      {
LABEL_10:
        _AVCStatisticsCollector_ProcessVCStatisticsInternal(a1, (unsigned int *)a2);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1088));
        return;
      }
      if (*(unsigned char *)(a2 + 18)
        && *(unsigned char *)(a1 + 72)
        && [(id)a1 shouldProcessAtTime:*(double *)(a2 + 8)])
      {
        VCStatisticsCollectorQueue_DrainAndProcessAllStatistics(*(void *)(a1 + 40));
        goto LABEL_10;
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1088));
    VCStatisticsCollectorQueue_AddStatisticsMessage(*(void *)(a1 + 40), a2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v8 = 136316162;
      uint64_t v9 = v6;
      __int16 v10 = 2080;
      unsigned int v11 = "AVCStatisticsCollector_SetVCStatistics";
      __int16 v12 = 1024;
      int v13 = 420;
      __int16 v14 = 2048;
      uint64_t v15 = a1;
      __int16 v16 = 2048;
      uint64_t v17 = a2;
      _os_log_error_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector=%p message=%p", (uint8_t *)&v8, 0x30u);
    }
  }
}

void _AVCStatisticsCollector_GetVCStatisticsWithType(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v4 = (int *)(a1 + 68);
  uint64_t v8 = *(void *)(a1 + 8);
  switch(*(_DWORD *)(a1 + 68))
  {
    case 1:
    case 2:
    case 3:
      switch(a2)
      {
        case 10:
          unsigned int v11 = (pthread_rwlock_t *)(a1 + 144);
          pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 144));
          *(_DWORD *)a3 = 10;
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(v8 + 464);
          *(_DWORD *)(a3 + 64) = *(_DWORD *)(v8 + 504);
          goto LABEL_20;
        case 3:
          unsigned int v11 = (pthread_rwlock_t *)(a1 + 144);
          pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 144));
          *(_DWORD *)a3 = 3;
          *(double *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = a4;
          *(_DWORD *)(a3 + 56) = *(_DWORD *)(v8 + 208);
          *(_DWORD *)(a3 + 4_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(v8 + 200);
          *(void *)(a3 + 24) = *(void *)(v8 + 176);
          *(_DWORD *)(a3 + 52) = *(_DWORD *)(v8 + 204);
          *(_DWORD *)(a3 + 64) = *(_DWORD *)(v8 + 216);
          *(_DWORD *)(a3 + 60) = *(_DWORD *)(v8 + 212);
          goto LABEL_20;
        case 2:
          uint64_t v9 = (pthread_rwlock_t *)(a1 + 144);
          pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 144));
          *(_DWORD *)a3 = 2;
          *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = *(void *)(v8 + 376);
          *(_DWORD *)(a3 + 6_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)v8;
          *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 76) / 0x3E8u;
          *(_DWORD *)(a3 + 52) = *(_DWORD *)(v8 + 364);
          *(_DWORD *)(a3 + 56) = *(_DWORD *)(v8 + 420);
          *(_DWORD *)(a3 + 60) = *(_DWORD *)(v8 + 424) + *(_DWORD *)(v8 + 368);
          *(_DWORD *)(a3 + 44) = *(_DWORD *)(a1 + 92);
          *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 88);
          *(void *)(a3 + 80) = *(void *)(a1 + 128);
          if (*(_DWORD *)(v8 + 4)) {
            int v10 = *(_DWORD *)(v8 + 44);
          }
          else {
            int v10 = -1;
          }
          *(_DWORD *)(a3 + 24) = v10;
          *(_WORD *)(a3 + 18_Block_object_dispose(&STACK[0x250], 8) = *(_WORD *)(v8 + 164);
          *(_WORD *)(a3 + 190) = *(_WORD *)(v8 + 166);
          goto LABEL_23;
      }
      break;
    case 4:
    case 5:
      if (a2 == 5)
      {
        unsigned int v11 = (pthread_rwlock_t *)(a1 + 144);
        pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 144));
        *(_DWORD *)a3 = 5;
        long long v12 = *(_OWORD *)(v8 + 256);
        *(_OWORD *)(a3 + 24) = *(_OWORD *)(v8 + 240);
        *(_OWORD *)(a3 + 40) = v12;
        long long v14 = *(_OWORD *)(v8 + 288);
        long long v13 = *(_OWORD *)(v8 + 304);
        uint64_t v15 = *(void *)(v8 + 320);
        *(_OWORD *)(a3 + 56) = *(_OWORD *)(v8 + 272);
        *(void *)(a3 + 104) = v15;
        *(_OWORD *)(a3 + 8_Block_object_dispose(&STACK[0x250], 8) = v13;
        *(_OWORD *)(a3 + 72) = v14;
LABEL_20:
        double v19 = v11;
        goto LABEL_24;
      }
      break;
    case 7:
      if (a2 == 2)
      {
        uint64_t v9 = (pthread_rwlock_t *)(a1 + 144);
        pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 144));
        *(_DWORD *)a3 = 2;
        *(_DWORD *)(a3 + 6_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(v8 + 244);
        *(void *)(a3 + 80) = *(void *)(v8 + 288);
        *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 76) / 0x3E8u;
        unint64_t v18 = MicroToNTP(a4);
        *(_DWORD *)(a3 + 24) = (unsigned __int16)(NTPToMiddle32(v18) >> 6);
        *(_DWORD *)(a3 + 52) = *(_DWORD *)(v8 + 256);
        *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 88);
        goto LABEL_16;
      }
      break;
    case 8:
    case 9:
      if (a2 == 7)
      {
        uint64_t v9 = (pthread_rwlock_t *)(a1 + 144);
        pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 144));
        *(_DWORD *)a3 = 7;
        *(_DWORD *)(a3 + 2_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(v8 + 412);
        *(void *)(a3 + 4_Block_object_dispose(&STACK[0x250], 8) = *(void *)(v8 + 432);
        *(_DWORD *)(a3 + 36) = *(_DWORD *)(v8 + 420);
        *(void *)(a3 + 56) = *(void *)(v8 + 440);
        *(_DWORD *)(a3 + 72) = *(_DWORD *)(a1 + 76) / 0x3E8u;
        *(_DWORD *)(a3 + 76) = *(_DWORD *)(a1 + 88);
LABEL_16:
        *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x250], 8) = 0;
LABEL_23:
        double v19 = v9;
LABEL_24:
        pthread_rwlock_unlock(v19);
      }
      break;
    default:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        uint64_t v17 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _AVCStatisticsCollector_GetVCStatisticsWithType_cold_1(v16, v4, v17);
        }
      }
      break;
  }
}

void VCStatisticsCollector_EnableBWELogDump(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    VCRateControlBandwidthEstimatorMap_EnableBWELogDump(v2, a2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCStatisticsCollector_EnableBWELogDump_cold_1();
    }
  }
}

uint64_t VCStatisticsCollector_Mode(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 68);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCStatisticsCollector_Mode_cold_1();
  }
  return 0;
}

void VCStatisticsCollector_SetMode(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x250], 8) = a2;
    [*(id *)(a1 + 16) setMode:a2];
    uint64_t v4 = *(void **)(a1 + 24);
    [v4 setMode:a2];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCStatisticsCollector_SetMode_cold_1();
    }
  }
}

void VCStatisticsCollector_SetFastSuddenBandwidthDetectionEnabled(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 113) = a2;
    uint64_t v2 = *(void *)(a1 + 16);
    VCRateControlBandwidthEstimatorMap_SetFastSuddenBandwidthDetectionEnabled(v2, a2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCStatisticsCollector_SetFastSuddenBandwidthDetectionEnabled_cold_1();
    }
  }
}

void VCStatisticsCollector_SetRadioAccessTechnology(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 64) = a2;
    VCRateControlBandwidthEstimatorMap_SetRadioAccessTechnology(*(void *)(a1 + 16), a2);
    uint64_t v3 = *(void *)(a1 + 16);
    VCRateControlBandwidthEstimatorMap_SetEstimatedBandwidth(v3, 0.0);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCStatisticsCollector_SetRadioAccessTechnology_cold_1();
    }
  }
}

uint64_t VCStatisticsCollector_SharedEstimatedBandwidth(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 76);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCStatisticsCollector_SharedEstimatedBandwidth_cold_1();
  }
  return 0;
}

void *VCRateControlGetBWEstimation(void *result, _DWORD *a2)
{
  if (a2)
  {
    uint64_t result = (void *)[result sharedEstimatedBandwidth];
    *a2 = result;
  }
  return result;
}

void VCRateControlGetStatistics(uint64_t a1, int a2, uint64_t a3)
{
  if (a1 && a3)
  {
    double v6 = micro();
    _AVCStatisticsCollector_GetVCStatisticsWithType(a1, a2, a3, v6);
  }
}

uint64_t VCRateControlRegisterStatisticsChangeHandler(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a1 && a3) {
    return [a1 registerStatisticsChangeHandlerWithType:a2 handler:a3];
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t VCRateControlUnregisterStatisticsChangeHandler(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a3 & 0x80000000) != 0) {
    return 0;
  }
  else {
    return [a1 unregisterStatisticsChangeHandlerWithType:a2 handlerIndex:a3];
  }
}

void _AVCStatisticsCollector_DestroyChangeHandlerEntry(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2)
    {
      uint64_t v4 = (const void *)v2[2];
      if (v4) {
        _Block_release(v4);
      }
      CFAllocatorRef v5 = *(const __CFAllocator **)(a1 + 344);
      CFAllocatorDeallocate(v5, v2);
    }
  }
}

void _AVCStatisticsCollector_DestroyChangeHandlerRequest(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      CFAllocatorRef v5 = (void *)v3[1];
      *CFAllocatorRef v5 = *v3;
      *(void *)(*v3 + _Block_object_dispose(&STACK[0x250], 8) = v5;
      *uint64_t v3 = v3;
      v3[1] = v3;
      _AVCStatisticsCollector_DestroyChangeHandlerEntry(a1, (void **)v3 + 3);
      CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 1040), v3);
      *a2 = 0;
    }
  }
}

void _AVCStatisticsCollector_UpdateMaxLocalBurstyLoss(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (!a2 && !*(_DWORD *)(a1 + 92))
    {
      unsigned int v12 = 0;
      uint64_t v11 = 92;
      goto LABEL_23;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      double v6 = *MEMORY[0x1E4F47A50];
      uint64_t v7 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = 136315906;
          uint64_t v14 = v5;
          __int16 v15 = 2080;
          uint64_t v16 = "_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss";
          __int16 v17 = 1024;
          int v18 = 865;
          __int16 v19 = 1024;
          unsigned int v20 = a2;
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d update audio loss: %d", (uint8_t *)&v13, 0x22u);
        }
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        _AVCStatisticsCollector_UpdateMaxLocalBurstyLoss_cold_1();
      }
    }
    uint64_t v11 = 92;
    if (!a2) {
      goto LABEL_17;
    }
  }
  else
  {
    if (!a2 && !*(_DWORD *)(a1 + 88))
    {
      unsigned int v12 = 0;
      uint64_t v11 = 88;
      goto LABEL_23;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      int v10 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = 136315906;
          uint64_t v14 = v8;
          __int16 v15 = 2080;
          uint64_t v16 = "_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss";
          __int16 v17 = 1024;
          int v18 = 870;
          __int16 v19 = 1024;
          unsigned int v20 = a2;
          _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d update video loss: %d", (uint8_t *)&v13, 0x22u);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        _AVCStatisticsCollector_UpdateMaxLocalBurstyLoss_cold_2();
      }
    }
    uint64_t v11 = 88;
    if (!a2)
    {
LABEL_17:
      unsigned int v12 = 0;
      goto LABEL_23;
    }
  }
  unsigned int v12 = *(_DWORD *)(a1 + v11);
  if (v12 <= a2) {
    unsigned int v12 = a2;
  }
LABEL_23:
  *(_DWORD *)(a1 + v11) = v12;
}

void _AVCStatisticsCollector_UpdatePacketReceivedCount(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 140))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(a1 + 96);
        int v7 = *(_DWORD *)(a2 + 52);
        int v24 = 136316162;
        uint64_t v25 = v4;
        __int16 v26 = 2080;
        __int16 v27 = "_AVCStatisticsCollector_UpdatePacketReceivedCount";
        __int16 v28 = 1024;
        int v29 = 841;
        __int16 v30 = 1024;
        int v31 = v6;
        __int16 v32 = 1024;
        int v33 = v7;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Reset remotePAcketReceivedAudio from current=%d to feedback=%d", (uint8_t *)&v24, 0x28u);
      }
    }
    int v8 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 96) = v8;
    *(unsigned char *)(a1 + 140) = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 96);
  }
  int v9 = *(_DWORD *)(a2 + 52);
  __int16 v10 = v9 - v8;
  if ((((_WORD)v9 - (_WORD)v8) & 0x800) == 0)
  {
    if ((v8 & 0xFFFu) > (unsigned __int16)v9) {
      v8 += 4096;
    }
    *(_DWORD *)(a1 + 96) = v8 & 0xFFFFF000 | (unsigned __int16)*(_DWORD *)(a2 + 52);
  }
  if (VCMediaControlInfo_IsLossStatsEnabled(*(unsigned __int8 *)(a1 + 112)))
  {
    unsigned int v11 = *(_DWORD *)(a2 + 56);
LABEL_18:
    *(_DWORD *)(a1 + 100) = v11;
    goto LABEL_19;
  }
  int v12 = *(_DWORD *)(a2 + 56);
  int v13 = *(_DWORD *)(a1 + 100);
  if (((v12 - v13) & 0x800) == 0)
  {
    if ((*(_DWORD *)(a1 + 100) & 0xFFFu) <= (unsigned __int16)v12) {
      int v14 = *(_DWORD *)(a1 + 100);
    }
    else {
      int v14 = v13 + 4096;
    }
    unsigned int v11 = v14 & 0xFFFFF000 | (unsigned __int16)*(_DWORD *)(a2 + 56);
    goto LABEL_18;
  }
LABEL_19:
  if ((v10 & 0x800) != 0)
  {
    int v15 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v15 + 1;
    HIDWORD(v16) = -1030792151 * v15;
    LODWORD(v16) = -1030792151 * v15;
    if ((v16 >> 1) <= 0x51EB851 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      int v18 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v19 = *(_DWORD *)(a1 + 136);
        int v21 = *(_DWORD *)(a1 + 96);
        int v20 = *(_DWORD *)(a1 + 100);
        int v23 = *(_DWORD *)(a2 + 52);
        int v22 = *(_DWORD *)(a2 + 56);
        int v24 = 136316930;
        uint64_t v25 = v17;
        __int16 v26 = 2080;
        __int16 v27 = "_AVCStatisticsCollector_UpdatePacketReceivedCount";
        __int16 v28 = 1024;
        int v29 = 855;
        __int16 v30 = 1024;
        int v31 = v19;
        __int16 v32 = 1024;
        int v33 = v20;
        __int16 v34 = 1024;
        int v35 = v22;
        __int16 v36 = 1024;
        int v37 = v21;
        __int16 v38 = 1024;
        int v39 = v23;
        _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Feedback out of order count=%d with packet receive count video:[current=%d, feedback=%d], audio:[current=%d, feedback=%d]", (uint8_t *)&v24, 0x3Au);
      }
    }
  }
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 100);
}

void _AVCStatisticsCollector_ComputeBWEstimation(uint64_t a1, double *a2)
{
  double v4 = a2[1];
  int v5 = *(_DWORD *)a2;
  if (*(_DWORD *)(a1 + 68) == 4 && v5 == 5)
  {
    uint64_t v9 = VCRateControlBandwidthEstimatorMap_BandwidthEstimator(*(void *)(a1 + 16), 1, 1, 0);
    VCRateControlBandwidthEstimator_CalculateBandwidthEstimationForBandwidthSample(v9, (double)(1000 * *((_DWORD *)a2 + 14)), v4);
  }
  else if (v5 == 4)
  {
    uint64_t v7 = *((unsigned int *)a2 + 6);
    if (*((unsigned char *)a2 + 28))
    {
      uint64_t v8 = *(void *)(a1 + 16);
      VCRateControlBandwidthEstimatorMap_DeregisterBandwidthEstimator(v8, v7);
      return;
    }
    int v18 = *((unsigned __int8 *)a2 + 30);
    int v19 = *((unsigned __int8 *)a2 + 29);
    int v20 = *((_DWORD *)a2 + 8);
    unsigned int v21 = *((_DWORD *)a2 + 9);
    int v22 = *((_DWORD *)a2 + 12);
    uint64_t v23 = VCRateControlBandwidthEstimatorMap_BandwidthEstimator(*(void *)(a1 + 16), v7, v19, v18);
    VCRateControlBandwidthEstimator_CalculateBandwidthEstimation(v23, v22, v21, v19, v20, v4);
  }
  if (*(_DWORD *)(a1 + 68) != 5)
  {
    [*(id *)(a1 + 16) estimatedBandwidth];
    unsigned int v11 = *(_DWORD *)(a1 + 104);
    if (v11 >= v10 || v11 == 0) {
      unsigned int v13 = v10;
    }
    else {
      unsigned int v13 = *(_DWORD *)(a1 + 104);
    }
    int v14 = [*(id *)(a1 + 16) bandwidthEstimationState];
    if (v13) {
      unsigned int v13 = 1000 * ((v13 / 0x3E8) & 0x7FFFF8 | (v14 == 1));
    }
    [*(id *)(a1 + 16) estimatedBandwidthUncapped];
    int v16 = *(_DWORD *)(a1 + 76);
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 76), (unsigned int *)&v16, v13, memory_order_relaxed, memory_order_relaxed);
    int v17 = *(_DWORD *)(a1 + 80);
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v17, v15, memory_order_relaxed, memory_order_relaxed);
  }
}

void OUTLINED_FUNCTION_4_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x22u);
}

unsigned char *fuzz_packet(unsigned char *result, int a2)
{
  if (a2) {
    char *result = ~*result;
  }
  for (uint64_t i = 0; i != 15; ++i)
  {
    if ((a2 & 2) != 0) {
      result[i + 1] ^= result[i];
    }
    a2 >>= 1;
  }
  return result;
}

ssize_t comm_send(int a1, const sockaddr *a2, long long *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v7 = *a3;
  LOWORD(v7) = bswap32((unsigned __int16)v7) >> 16;
  WORD1(v7) = bswap32(WORD1(v7)) >> 16;
  DWORD2(v7) = bswap32(~DWORD2(v7));
  WORD6(v7) = bswap32(~WORD6(v7)) >> 16;
  HIWORD(v7) = bswap32(~HIWORD(v7)) >> 16;
  signed int v5 = arc4random();
  if (v5 % 100 < 0) {
    fuzz_packet(&v7, v5 >> 4);
  }
  return sendto(a1, &v7, 0x10uLL, 0, a2, a2->sa_len);
}

uint64_t CommTest(uint64_t a1, double a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  *(void *)&v4.sa_len = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v4.sa_data[6] = 0xAAAAAAAAAAAAAAAALL;
  *(sockaddr *)&v61.fds_bits[24] = v4;
  *(sockaddr *)&v61.fds_bits[28] = v4;
  *(sockaddr *)&v61.fds_bits[16] = v4;
  *(sockaddr *)&v61.fds_bits[20] = v4;
  *(sockaddr *)&v61.fds_bits[8] = v4;
  *(sockaddr *)&v61.fds_bits[12] = v4;
  *(sockaddr *)v61.fds_bits = v4;
  *(sockaddr *)&v61.fds_bits[4] = v4;
  memset(v46, 170, sizeof(v46));
  sockaddr v59 = v4;
  sockaddr v60 = v4;
  sockaddr v57 = v4;
  sockaddr v58 = v4;
  sockaddr v55 = v4;
  sockaddr v56 = v4;
  sockaddr v53 = v4;
  sockaddr v54 = v4;
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  double v5 = micro();
  if (a2 <= 0.0) {
    a2 = 6.0;
  }
  char v6 = 0;
  uint32_t v7 = arc4random() & 0xFFFFF000;
  int v8 = v7 ^ 0x55555000;
  unsigned int v42 = v7 ^ 0xAAAAA000;
  long long v45 = 0x10001uLL;
  int v9 = 1;
  int v10 = 1;
  int v11 = 1;
  while (1)
  {
    if (micro() - v5 >= a2) {
      return 0;
    }
    if (!*(_DWORD *)(a1 + 136) || !*(_DWORD *)(a1 + 436))
    {
      DWORD1(v45) = v7;
      comm_send(*(_DWORD *)a1, (const sockaddr *)(a1 + 8), &v45);
    }
    if (!*(_DWORD *)(a1 + 280) || !*(_DWORD *)(a1 + 448))
    {
      DWORD1(v45) = v7 ^ 0x55555000;
      comm_send(*(_DWORD *)a1, (const sockaddr *)(a1 + 152), &v45);
    }
    if (!*(_DWORD *)(a1 + 424) || !*(_DWORD *)(a1 + 460))
    {
      DWORD1(v45) = v7 ^ 0xAAAAA000;
      comm_send(*(_DWORD *)a1, (const sockaddr *)(a1 + 296), &v45);
    }
    v6 += (v11 & v10 & v9 & 1) == 0;
    double v12 = micro() - v5;
    if (v12 < a2) {
      break;
    }
    LOBYTE(v10) = 0;
    char v14 = 0;
    char v13 = 0;
LABEL_70:
    char v29 = 1;
LABEL_71:
    int v11 = v10;
    int v10 = v14 & 1;
    int v9 = v13 & 1;
    if ((v29 & 1) == 0) {
      return 0;
    }
  }
  char v13 = 0;
  char v14 = 0;
  LOBYTE(v10) = 0;
  while (1)
  {
    double v15 = a2 - v12;
    if (v15 >= (double)(2 << v6)) {
      double v15 = (double)(2 << v6);
    }
    *(void *)&v46[1] = (uint64_t)v15;
    v46[3] = (int)((v15 - (double)(uint64_t)v15) * 1000000.0);
    memset(&v61, 0, sizeof(v61));
    int v16 = *(_DWORD *)a1;
    if (__darwin_check_fd_set_overflow(*(_DWORD *)a1, &v61, 0)) {
      *(__int32_t *)((char *)v61.fds_bits + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v16;
    }
    int v17 = select(*(_DWORD *)a1 + 1, &v61, 0, 0, (timeval *)&v46[1]);
    if (v17 < 0)
    {
      if (*__error() == 4)
      {
        if (a2 > micro() - v5) {
          goto LABEL_70;
        }
        goto LABEL_67;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        return 1;
      }
      uint64_t v39 = VRTraceErrorLogLevelToCSTR();
      __int16 v36 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      int v40 = *__error();
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = v39;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "CommTest";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 269;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v40;
      __int16 v32 = " [%s] %s:%d CommTest: select() failed (%d)";
LABEL_84:
      int v33 = v36;
      uint32_t v34 = 34;
      goto LABEL_85;
    }
    if (!v17) {
      goto LABEL_70;
    }
    v46[0] = 128;
    int v18 = recvfrom(*(_DWORD *)a1, &v43, 0x10uLL, 0, &v53, v46);
    if (!v18) {
      break;
    }
    if (v18 == -1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        return 1;
      }
      uint64_t v35 = VRTraceErrorLogLevelToCSTR();
      __int16 v36 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      int v37 = *__error();
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = v35;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "CommTest";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 280;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v37;
      __int16 v32 = " [%s] %s:%d CommTest: recvfrom() failed (%d)";
      goto LABEL_84;
    }
    WORD1(v43) = bswap32(WORD1(v43)) >> 16;
    LOWORD(v43) = bswap32((unsigned __int16)v43) >> 16;
    int v19 = HIDWORD(v43);
    LODWORD(v44) = bswap32(~v44);
    WORD2(v44) = bswap32(~WORD2(v44)) >> 16;
    if (!*(_DWORD *)(a1 + 472) && (HIDWORD(v43) == v42 || HIDWORD(v43) == v7 || HIDWORD(v43) == v8))
    {
      *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v51 = v20;
      long long v52 = v20;
      long long v50 = v20;
      long long v48 = v20;
      long long v49 = v20;
      *(_OWORD *)&buf[16] = v20;
      *(_OWORD *)&buf[32] = v20;
      *(_OWORD *)CMTime buf = v20;
      DWORD1(v45) = v7 ^ 0xFFFFF000;
      FillSockAddrStorage();
      comm_send(*(_DWORD *)a1, (const sockaddr *)buf, &v45);
      int v19 = HIDWORD(v43);
    }
    unsigned int v21 = v19 & 0xFFFFF000;
    if (v21 == v7)
    {
      int v22 = IsSameAddressAndPort();
      int v23 = v44;
      if (v22)
      {
        *(_WORD *)(a1 + 144) = WORD2(v44);
        int v24 = *(_DWORD *)(a1 + 136) + 1;
        *(_DWORD *)(a1 + 136) = v24;
        *(_DWORD *)(a1 + 140) = v23;
        LOBYTE(v10) = 1;
        if (!v24) {
          goto LABEL_67;
        }
        goto LABEL_51;
      }
      *(_DWORD *)(a1 + 440) = v44;
      *(_WORD *)(a1 + 444) = WORD2(v44);
      ++*(_DWORD *)(a1 + 436);
    }
    else if (v21 == v8)
    {
      if (IsSameAddressAndPort())
      {
        *(_DWORD *)(a1 + 284) = v44;
        *(_WORD *)(a1 + 28_Block_object_dispose(&STACK[0x250], 8) = WORD2(v44);
        ++*(_DWORD *)(a1 + 280);
        char v14 = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 452) = v44;
        *(_WORD *)(a1 + 456) = WORD2(v44);
        ++*(_DWORD *)(a1 + 448);
      }
    }
    else if (v21 == v42)
    {
      if (IsSameAddressAndPort())
      {
        *(_DWORD *)(a1 + 42_Block_object_dispose(&STACK[0x250], 8) = v44;
        *(_WORD *)(a1 + 432) = WORD2(v44);
        ++*(_DWORD *)(a1 + 424);
        char v13 = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 464) = v44;
        *(_WORD *)(a1 + 46_Block_object_dispose(&STACK[0x250], 8) = WORD2(v44);
        ++*(_DWORD *)(a1 + 460);
      }
    }
    else if (v21 == (v7 ^ 0xFFFFF000))
    {
      ++*(_DWORD *)(a1 + 472);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v41 = VRTraceErrorLogLevelToCSTR();
      uint64_t v25 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v41;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "CommTest";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 366;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = HIDWORD(v43);
        _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d CommTest: bad seq# %08X.", buf, 0x22u);
      }
    }
    int v24 = *(_DWORD *)(a1 + 136);
    if (!v24) {
      goto LABEL_67;
    }
LABEL_51:
    int v26 = *(_DWORD *)(a1 + 436);
    if (v26
      && *(_DWORD *)(a1 + 280)
      && *(_DWORD *)(a1 + 448)
      && *(_DWORD *)(a1 + 424)
      && *(_DWORD *)(a1 + 460)
      && *(_DWORD *)(a1 + 472))
    {
LABEL_73:
      char v29 = 0;
      goto LABEL_71;
    }
    if (v24 < 4)
    {
      if (v24 != 3) {
        goto LABEL_67;
      }
      int v27 = *(_DWORD *)(a1 + 280);
LABEL_63:
      if (v27 < 3) {
        goto LABEL_67;
      }
      int v28 = *(_DWORD *)(a1 + 424);
      goto LABEL_65;
    }
    int v27 = *(_DWORD *)(a1 + 280);
    if (v27 <= 3) {
      goto LABEL_63;
    }
    int v28 = *(_DWORD *)(a1 + 424);
    if (v28 > 3) {
      goto LABEL_73;
    }
LABEL_65:
    if (v28 >= 3 && v28 + v24 + v27 + v26 + *(_DWORD *)(a1 + 448) + *(_DWORD *)(a1 + 460) > 15) {
      goto LABEL_73;
    }
LABEL_67:
    double v12 = micro() - v5;
    if (v12 >= a2) {
      goto LABEL_70;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v30 = VRTraceErrorLogLevelToCSTR();
    int v31 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "CommTest";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 283;
      __int16 v32 = " [%s] %s:%d CommTest: recvfrom() returns 0";
      int v33 = v31;
      uint32_t v34 = 28;
LABEL_85:
      _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, v32, buf, v34);
    }
  }
  return 1;
}

uint64_t CommReport(int *a1, unsigned int a2, double a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  *(void *)&v6.sa_len = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v6.sa_data[6] = 0xAAAAAAAAAAAAAAAALL;
  *(sockaddr *)&v50.fds_bits[24] = v6;
  *(sockaddr *)&v50.fds_bits[28] = v6;
  *(sockaddr *)&v50.fds_bits[16] = v6;
  *(sockaddr *)&v50.fds_bits[20] = v6;
  *(sockaddr *)&v50.fds_bits[8] = v6;
  *(sockaddr *)&v50.fds_bits[12] = v6;
  *(sockaddr *)v50.fds_bits = v6;
  *(sockaddr *)&v50.fds_bits[4] = v6;
  memset(v33, 170, sizeof(v33));
  sockaddr v48 = v6;
  sockaddr v49 = v6;
  sockaddr v46 = v6;
  sockaddr v47 = v6;
  sockaddr v44 = v6;
  sockaddr v45 = v6;
  sockaddr v42 = v6;
  sockaddr v43 = v6;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  double v7 = micro();
  if (a3 <= 0.0) {
    a3 = 1.0;
  }
  LODWORD(v32) = 65538;
  DWORD1(v32) = arc4random();
  *((void *)&v32 + 1) = a2;
  double v8 = micro();
  uint64_t result = 0;
  if (v8 - v7 >= a3) {
    return result;
  }
  int v10 = 0;
  int v11 = (const sockaddr *)(a1 + 2);
  while (1)
  {
    unsigned int v12 = (DWORD1(v32) + v10) % 3u;
    if (v12 == 2)
    {
      int v11 = (const sockaddr *)(a1 + 74);
    }
    else
    {
      char v13 = v11;
      int v11 = (const sockaddr *)(a1 + 38);
      if (v12 != 1)
      {
        int v11 = v13;
        if (!v12) {
          int v11 = (const sockaddr *)(a1 + 2);
        }
      }
    }
    comm_send(*a1, v11, &v32);
    double v14 = micro() - v7;
    if (v14 < a3) {
      break;
    }
LABEL_25:
    ++v10;
    if (micro() - v7 >= a3) {
      return 0;
    }
  }
  int v15 = DWORD1(v32);
  while (1)
  {
    double v16 = a3 - v14;
    if (v16 > 1.0) {
      double v16 = 1.0;
    }
    *(void *)&v33[1] = (uint64_t)v16;
    v33[3] = (int)((v16 - (double)(uint64_t)v16) * 1000000.0);
    memset(&v50, 0, sizeof(v50));
    int v17 = *a1;
    if (__darwin_check_fd_set_overflow(*a1, &v50, 0)) {
      *(__int32_t *)((char *)v50.fds_bits + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v17;
    }
    int v18 = select(*a1 + 1, &v50, 0, 0, (timeval *)&v33[1]);
    if (v18 < 0)
    {
      if (*__error() == 4)
      {
        if (a3 > micro() - v7) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        return 1;
      }
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      int v26 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      int v29 = *__error();
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v35 = v28;
      __int16 v36 = 2080;
      int v37 = "CommReport";
      __int16 v38 = 1024;
      int v39 = 472;
      __int16 v40 = 1024;
      int v41 = v29;
      int v22 = " [%s] %s:%d CommTest: select() failed (%d)";
LABEL_36:
      int v23 = v26;
      uint32_t v24 = 34;
      goto LABEL_37;
    }
    if (!v18) {
      goto LABEL_25;
    }
    v33[0] = 128;
    int v19 = recvfrom(*a1, &v30, 0x10uLL, 0, &v42, v33);
    if (!v19) {
      break;
    }
    if (v19 == -1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        return 1;
      }
      uint64_t v25 = VRTraceErrorLogLevelToCSTR();
      int v26 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      int v27 = *__error();
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v35 = v25;
      __int16 v36 = 2080;
      int v37 = "CommReport";
      __int16 v38 = 1024;
      int v39 = 483;
      __int16 v40 = 1024;
      int v41 = v27;
      int v22 = " [%s] %s:%d CommTest: recvfrom() failed (%d)";
      goto LABEL_36;
    }
    WORD1(v30) = bswap32(WORD1(v30)) >> 16;
    LOWORD(v30) = bswap32((unsigned __int16)v30) >> 16;
    LODWORD(v31) = bswap32(~v31);
    WORD2(v31) = bswap32(~WORD2(v31)) >> 16;
    if (HIDWORD(v30) == v15) {
      return 0;
    }
LABEL_24:
    double v14 = micro() - v7;
    if (v14 >= a3) {
      goto LABEL_25;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v20 = VRTraceErrorLogLevelToCSTR();
    unsigned int v21 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v35 = v20;
      __int16 v36 = 2080;
      int v37 = "CommReport";
      __int16 v38 = 1024;
      int v39 = 486;
      int v22 = " [%s] %s:%d CommTest: recvfrom() returns 0";
      int v23 = v21;
      uint32_t v24 = 28;
LABEL_37:
      _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, v22, buf, v24);
    }
  }
  return 1;
}

int *CommNAT_Test(int *a1, unsigned int a2, socklen_t a3, double a4, uint64_t a5, uint64_t a6, socklen_t a7)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  v58[1] = a7;
  v58[2] = a3;
  double v10 = micro();
  int v11 = *a1;
  unsigned int v12 = (int *)malloc_type_malloc(0x14uLL, 0x1000040C36A4E17uLL);
  char v13 = v12;
  if (!v12) {
    return v13;
  }
  *(void *)&v14.sa_len = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v14.sa_data[6] = 0xAAAAAAAAAAAAAAAALL;
  sockaddr v73 = v14;
  sockaddr v74 = v14;
  sockaddr v71 = v14;
  sockaddr v72 = v14;
  sockaddr v69 = v14;
  sockaddr v70 = v14;
  sockaddr v67 = v14;
  sockaddr v68 = v14;
  *(void *)unsigned int v12 = 0;
  *((void *)v12 + 1) = 0;
  v12[4] = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  memset(v75, 0, sizeof(v75));
  if (v11) {
    int v15 = 30;
  }
  else {
    int v15 = 2;
  }
  FillSockAddrStorage();
  FillSockAddrStorage();
  FillSockAddrStorage();
  int v16 = socket(v15, 2, 17);
  LODWORD(v75[0]) = v16;
  if (v16 == -1)
  {
    free(v13);
    int v18 = __error();
    printf("socket() failed (%d)\n", *v18);
    return 0;
  }
  *(_DWORD *)&v59.sa_len = 1;
  setsockopt(v16, 0xFFFF, 4130, &v59, 4u);
  FillSockAddrStorage();
  int v17 = bind(v75[0], &v67, v67.sa_len);
  if (a2 && v17)
  {
    FillSockAddrStorage();
    if (!bind(v75[0], &v67, v67.sa_len)) {
      goto LABEL_14;
    }
LABEL_12:
    free(v13);
    __error();
    printf("socket() failed (%d)\n");
LABEL_16:
    close(v75[0]);
    return 0;
  }
  if (v17) {
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_14:
    *(void *)&v19.sa_len = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&v19.sa_data[6] = 0xAAAAAAAAAAAAAAAALL;
    sockaddr v65 = v19;
    sockaddr v66 = v19;
    sockaddr v63 = v19;
    sockaddr v64 = v19;
    sockaddr v61 = v19;
    sockaddr v62 = v19;
    sockaddr v59 = v19;
    sockaddr v60 = v19;
    v58[0] = 128;
    if (getsockname(v75[0], &v59, v58))
    {
      free(v13);
      __error();
      printf("getsockname() failed (%d)\n");
      goto LABEL_16;
    }
    a2 = bswap32(*(unsigned __int16 *)v59.sa_data) >> 16;
  }
  CommTest((uint64_t)v75, a4);
  int v21 = DWORD1(v95);
  int v22 = DWORD2(v76);
  int v23 = DWORD2(v85);
  int v24 = v96;
  int v25 = DWORD2(v94);
  int v26 = HIDWORD(v96);
  if (!DWORD2(v76) && !DWORD1(v95) && !DWORD2(v85) && !v96 && !DWORD2(v94) && !HIDWORD(v96))
  {
    free(v13);
    goto LABEL_16;
  }
  v13[1] = HIDWORD(v76);
  unsigned int v27 = (unsigned __int16)v77;
  *((_WORD *)v13 + 4) = v77;
  unsigned int v28 = (unsigned __int16)v86;
  *((_WORD *)v13 + 5) = v86;
  unsigned int v29 = (unsigned __int16)v95;
  *((_WORD *)v13 + 6) = v95;
  int v30 = *v13;
  if (!v22 || !v23 || !v25)
  {
    v30 |= 1u;
    *char v13 = v30;
  }
  if (v27 == v28 && v27 == v29)
  {
    int v31 = v30;
  }
  else
  {
    int v31 = v30 | 4;
    *char v13 = v30 | 4;
    if (v27 != v28)
    {
      int v31 = v30 | 0xC;
      *char v13 = v30 | 0xC;
    }
  }
  int v32 = v31 | 0x100;
  if (!DWORD2(v97)) {
    int v32 = v31;
  }
  if (v22) {
    BOOL v33 = v21 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  char v38 = !v33 && v23 != 0 && v24 != 0 && v25 != 0 && v26 != 0;
  char v39 = v38 & ((v32 & 4) == 0);
  if (v39) {
    int v40 = v32 | 2;
  }
  else {
    int v40 = v32;
  }
  BOOL v42 = a2 == v27 || a2 == v28 || a2 == v29;
  char v43 = v42;
  if (v42) {
    v40 |= 0x10u;
  }
  char v44 = v39 | v43;
  if (DWORD2(v97) || (v44 & 1) != 0)
  {
    if (v44) {
      int v45 = v40;
    }
    else {
      int v45 = v32;
    }
    *char v13 = v45;
  }
  if ((v40 & 4) != 0)
  {
    unsigned int v46 = v28 - v27;
    if (v27 > v28) {
      unsigned int v46 = v27 - v28;
    }
    unsigned int v47 = v29 - v28;
    BOOL v48 = v28 >= v29;
    unsigned int v49 = v28 - v29;
    if (v49 == 0 || !v48) {
      unsigned int v49 = v47;
    }
    unsigned int v50 = v27 - v29;
    BOOL v48 = v29 >= v27;
    unsigned int v51 = v29 - v27;
    if (v51 == 0 || !v48) {
      unsigned int v51 = v50;
    }
    if (v46 == 1 || v49 == 1 || v51 == 1)
    {
      v40 |= 0x20u;
      *char v13 = v40;
    }
  }
  BOOL v52 = (v21 | v24) != 0;
  if (!v26 || !v52)
  {
    if (v52) {
      int v53 = v40;
    }
    else {
      int v53 = v40 | 0x40;
    }
    if (v26) {
      int v54 = v53;
    }
    else {
      int v54 = v53 | 0x80;
    }
    *char v13 = v54;
  }
  double v55 = micro() - v10;
  if (v55 <= a4)
  {
    double v57 = a4 - v55;
    unsigned int v56 = *v13;
    if (v57 > 1.0) {
      double v57 = 1.0;
    }
  }
  else
  {
    unsigned int v56 = *v13;
    double v57 = 0.1;
  }
  CommReport((int *)v75, v56, v57);
  close(v75[0]);
  return v13;
}

uint64_t VCMediaNegotiationBlobMultiwayAudioStreamReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  sockaddr v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          while (1)
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_81;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_83;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_81:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_83:
          uint64_t v71 = 32;
          goto LABEL_112;
        case 2u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          while (2)
          {
            uint64_t v28 = *v3;
            uint64_t v29 = *(void *)(a2 + v28);
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x250], 8) = v30;
              v20 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v15 = v27++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_87:
          uint64_t v71 = 12;
          goto LABEL_112;
        case 3u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 44) |= 0x20u;
          while (2)
          {
            uint64_t v34 = *v3;
            uint64_t v35 = *(void *)(a2 + v34);
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v36;
              v20 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                BOOL v15 = v33++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_91:
          uint64_t v71 = 40;
          goto LABEL_112;
        case 4u:
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v20 = 0;
          while (2)
          {
            uint64_t v40 = *v3;
            uint64_t v41 = *(void *)(a2 + v40);
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
              *(void *)(a2 + v40) = v42;
              v20 |= (unint64_t)(v43 & 0x7F) << v38;
              if (v43 < 0)
              {
                v38 += 7;
                BOOL v15 = v39++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_95:
          uint64_t v71 = 36;
          goto LABEL_112;
        case 5u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v20 = 0;
          while (2)
          {
            uint64_t v46 = *v3;
            uint64_t v47 = *(void *)(a2 + v46);
            unint64_t v48 = v47 + 1;
            if (v47 == -1 || v48 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
              *(void *)(a2 + v46) = v48;
              v20 |= (unint64_t)(v49 & 0x7F) << v44;
              if (v49 < 0)
              {
                v44 += 7;
                BOOL v15 = v45++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_99;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_99:
          uint64_t v71 = 20;
          goto LABEL_112;
        case 6u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (2)
          {
            uint64_t v52 = *v3;
            uint64_t v53 = *(void *)(a2 + v52);
            unint64_t v54 = v53 + 1;
            if (v53 == -1 || v54 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v55 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
              *(void *)(a2 + v52) = v54;
              v20 |= (unint64_t)(v55 & 0x7F) << v50;
              if (v55 < 0)
              {
                v50 += 7;
                BOOL v15 = v51++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_103:
          uint64_t v71 = 8;
          goto LABEL_112;
        case 7u:
          *(unsigned char *)(a1 + 44) |= 4u;
          uint64_t v56 = *v3;
          unint64_t v57 = *(void *)(a2 + v56);
          if (v57 <= 0xFFFFFFFFFFFFFFFBLL && v57 + 4 <= *(void *)(a2 + *v4))
          {
            int v58 = *(_DWORD *)(*(void *)(a2 + *v7) + v57);
            *(void *)(a2 + v56) = v57 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v58 = 0;
          }
          *(_DWORD *)(a1 + 16) = v58;
          continue;
        case 8u:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 44) |= 0x10u;
          while (2)
          {
            uint64_t v61 = *v3;
            uint64_t v62 = *(void *)(a2 + v61);
            unint64_t v63 = v62 + 1;
            if (v62 == -1 || v63 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
              *(void *)(a2 + v61) = v63;
              v20 |= (unint64_t)(v64 & 0x7F) << v59;
              if (v64 < 0)
              {
                v59 += 7;
                BOOL v15 = v60++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_107:
          uint64_t v71 = 28;
          goto LABEL_112;
        case 9u:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 44) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v67 = *v3;
        uint64_t v68 = *(void *)(a2 + v67);
        unint64_t v69 = v68 + 1;
        if (v68 == -1 || v69 > *(void *)(a2 + *v4)) {
          break;
        }
        char v70 = *(unsigned char *)(*(void *)(a2 + *v7) + v68);
        *(void *)(a2 + v67) = v69;
        v20 |= (unint64_t)(v70 & 0x7F) << v65;
        if ((v70 & 0x80) == 0) {
          goto LABEL_109;
        }
        v65 += 7;
        BOOL v15 = v66++ >= 9;
        if (v15)
        {
          LODWORD(v20) = 0;
          goto LABEL_111;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_109:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v20) = 0;
      }
LABEL_111:
      uint64_t v71 = 24;
LABEL_112:
      *(_DWORD *)(a1 + v71) = v20;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t GKNATObserverDynamicStoreCallback(int a1, void *a2, id obj)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  objc_sync_enter(obj);
  id v5 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    double v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315906;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      BOOL v15 = "GKNATObserverDynamicStoreCallback";
      __int16 v16 = 1024;
      int v17 = 179;
      __int16 v18 = 2080;
      uint64_t v19 = objc_msgSend((id)objc_msgSend(a2, "description"), "UTF8String");
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d GKNATObserver_SCContext: GKNATObserverDynamicStoreCallback(): changedKeys = %s", (uint8_t *)&v12, 0x26u);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    unsigned int v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_msgSend((id)objc_msgSend(obj, "description"), "UTF8String");
      int v12 = 136315906;
      uint64_t v13 = v8;
      __int16 v14 = 2080;
      BOOL v15 = "GKNATObserverDynamicStoreCallback";
      __int16 v16 = 1024;
      int v17 = 180;
      __int16 v18 = 2080;
      uint64_t v19 = v10;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d GKNATObserver_SCContext: GKNATObserverDynamicStoreCallback(): self.observer = %s", (uint8_t *)&v12, 0x26u);
    }
  }
  objc_msgSend((id)objc_msgSend(obj, "observer"), "clearRetries");
  objc_msgSend((id)objc_msgSend(obj, "observer"), "tryNATCheckWithDelay:", 0.25);
  [v5 drain];
  return objc_sync_exit(obj);
}

void sub_1E1F1267C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E1F12E18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E1F12EC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E1F1405C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E1F14150(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t NAT64ResolverCallBack(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315906;
      uint64_t v9 = v5;
      __int16 v10 = 2080;
      uint64_t v11 = "NAT64ResolverCallBack";
      __int16 v12 = 1024;
      int v13 = 1323;
      __int16 v14 = 2080;
      uint64_t v15 = a2;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NAT64ResolverCallBack: got prefix for %s", (uint8_t *)&v8, 0x26u);
    }
  }
  [a1 clearRetries];
  [a1 tryNATCheckWithDelay:0.0];
  return [v4 drain];
}

void sub_1E1F183F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_6_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x28u);
}

void OUTLINED_FUNCTION_8_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x26u);
}

uint64_t VCAudioStreamReceiveGroup_PullAudioSamples(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 316) == 2)
  {
    VCAudioBufferList_ZeroMemory(a2);
    unsigned int v4 = 1;
  }
  else
  {
    double HostTime = VCAudioBufferList_GetHostTime(a2);
    int Timestamp = VCAudioBufferList_GetTimestamp(a2);
    uint64_t v7 = *(void *)(*(void *)(a1 + 472) + 184);
    SampleCFIndex Count = VCAudioBufferList_GetSampleCount(a2);
    VCAudioBufferList_SetSampleCount(v7, SampleCount);
    VCAudioBufferList_SetTime(*(void *)(*(void *)(a1 + 472) + 184), Timestamp, HostTime);
    uint64_t v9 = *(uint64_t ***)(*(void *)(a1 + 472) + 176);
    if (v9)
    {
      LOBYTE(v4) = 0;
      uint64_t v10 = a2;
      do
      {
        ((void (*)(uint64_t *, uint64_t))v9[3])(v9[2], v10);
        unsigned int Priority = VCAudioBufferList_GetPriority(v10);
        if (v4 <= Priority) {
          unsigned int v4 = Priority;
        }
        else {
          unsigned int v4 = v4;
        }
        if (v10 != a2) {
          VCAudioBufferList_Mix(a2, v10);
        }
        uint64_t v10 = *(void *)(*(void *)(a1 + 472) + 184);
        uint64_t v9 = (uint64_t **)*v9;
      }
      while (v9);
    }
    else
    {
      unsigned int v4 = 0;
    }
    *(float *)(a1 + 532) = VCAudioBufferList_GetAveragePower(a2);
    ++*(void *)(a1 + 536);
    memset(v38, 170, sizeof(v38));
    VCAudioBufferList_GetNetworkTimestamp(a2, (uint64_t)v38);
    if (v38[12])
    {
      *(void *)&buf[16] = *(void *)&v38[16];
      *(_OWORD *)CMTime buf = *(_OWORD *)v38;
      uint64_t v12 = *(void *)(a1 + 472);
      *(double *)&long long v40 = HostTime;
      for (uint64_t i = *(uint64_t **)(v12 + 192); i; uint64_t i = (uint64_t *)i[2])
      {
        ++*(void *)(a1 + 544);
        VCVideoStreamReceiveGroup_UpdateSourcePlayoutTime(*i, buf);
      }
    }
    __int16 v14 = *(void (**)(uint64_t, void, uint64_t))(a1 + 512);
    if (v14) {
      v14(a1, *(void *)(a1 + 520), a2);
    }
    if (*(unsigned char *)(a1 + 528)) {
      VCMediaRecorder_AddRemoteAudioSampleBuffer(*(void *)(a1 + 336), a2, Timestamp);
    }
  }
  int v15 = *(_DWORD *)(a1 + 508);
  HIDWORD(v16) = -1030792151 * v15;
  LODWORD(v16) = -1030792151 * v15;
  if ((v16 >> 3) <= 0x147AE14)
  {
    *(_DWORD *)(a1 + 492) = [+[VCDefaults sharedInstance] prominenceActiveAccumulationThreshold];
    *(_DWORD *)(a1 + 484) = [+[VCDefaults sharedInstance] prominenceActiveProbabilityThreshold];
    *(_DWORD *)(a1 + 496) = [+[VCDefaults sharedInstance] prominenceInactiveAccumulationThreshold];
    *(_DWORD *)(a1 + 48_Block_object_dispose(&STACK[0x250], 8) = [+[VCDefaults sharedInstance] prominenceInactiveProbabilityThreshold];
    int v15 = *(_DWORD *)(a1 + 508);
  }
  *(_DWORD *)(a1 + 50_Block_object_dispose(&STACK[0x250], 8) = v15 + 1;
  if (v4 <= 1) {
    unsigned int v4 = 1;
  }
  int v17 = (unsigned char *)(a1 + 480);
  unsigned int v18 = *(_DWORD *)(a1 + 500);
  if (*(unsigned char *)(a1 + 480))
  {
    if (*(_DWORD *)(a1 + 488) > v4)
    {
      if (!v18 || (unsigned int v19 = v18 - 1, (*(_DWORD *)(a1 + 500) = v19) == 0)) {
        unsigned char *v17 = 0;
      }
      goto LABEL_38;
    }
    if (v18 >= *(_DWORD *)(a1 + 496)) {
      goto LABEL_38;
    }
    unsigned int v21 = v18 + 1;
LABEL_37:
    *(_DWORD *)(a1 + 500) = v21;
    goto LABEL_38;
  }
  if (*(_DWORD *)(a1 + 484) >= v4)
  {
    if (!v18) {
      goto LABEL_38;
    }
    int v20 = -1;
  }
  else
  {
    int v20 = 1;
  }
  unsigned int v22 = v20 + v18;
  *(_DWORD *)(a1 + 500) = v22;
  if (v22 > *(_DWORD *)(a1 + 492))
  {
    unsigned char *v17 = 1;
    unsigned int v21 = *(_DWORD *)(a1 + 496);
    goto LABEL_37;
  }
LABEL_38:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v23 = VRTraceErrorLogLevelToCSTR();
    char v24 = *MEMORY[0x1E4F47A50];
    int v25 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = *(_DWORD *)(a1 + 500);
        int v27 = *v17;
        *(_DWORD *)CMTime buf = 136316674;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCAudioStreamReceiveGroup_DebounceAudioPriority";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v40) = 384;
        WORD2(v40) = 1024;
        *(_DWORD *)((char *)&v40 + 6) = 384;
        WORD5(v40) = 1024;
        HIDWORD(v40) = v26;
        LOWORD(v41) = 1024;
        *(_DWORD *)((char *)&v41 + 2) = v4;
        HIWORD(v41) = 1024;
        int v42 = v27;
        _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCAudioStreamReceiveGroup.m:%d: ActiveCount:%d audioPriority:%d audioActive:%d", buf, 0x34u);
      }
    }
    else if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      int v36 = *(_DWORD *)(a1 + 500);
      int v37 = *v17;
      *(_DWORD *)CMTime buf = 136316674;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VCAudioStreamReceiveGroup_DebounceAudioPriority";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v40) = 384;
      WORD2(v40) = 1024;
      *(_DWORD *)((char *)&v40 + 6) = 384;
      WORD5(v40) = 1024;
      HIDWORD(v40) = v36;
      LOWORD(v41) = 1024;
      *(_DWORD *)((char *)&v41 + 2) = v4;
      HIWORD(v41) = 1024;
      int v42 = v37;
      _os_log_debug_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEBUG, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCAudioStreamReceiveGroup.m:%d: ActiveCount:%d audioPriority:%d audioActive:%d", buf, 0x34u);
    }
  }
  if (*(unsigned char *)(a1 + 480)) {
    char v28 = -1;
  }
  else {
    char v28 = 1;
  }
  if (*(unsigned char *)(a1 + 480)) {
    int v29 = 255;
  }
  else {
    int v29 = 1;
  }
  if (*(_DWORD *)(a1 + 504) != v29)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v30 = VRTraceErrorLogLevelToCSTR();
      char v31 = *MEMORY[0x1E4F47A50];
      char v32 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v30;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "VCAudioStreamReceiveGroup_UpdateAudioPriority";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v40) = 397;
          WORD2(v40) = 1024;
          *(_DWORD *)((char *)&v40 + 6) = 397;
          WORD5(v40) = 1024;
          HIDWORD(v40) = v29;
          _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCAudioStreamReceiveGroup.m:%d: Updating audio priority %d", buf, 0x28u);
        }
      }
      else if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        VCAudioStreamReceiveGroup_PullAudioSamples_cold_1();
      }
    }
    uint64_t v33 = MEMORY[0x1E4E56580](a1 + 296);
    if (v33)
    {
      uint64_t v34 = *(NSObject **)(a1 + 304);
      *(void *)CMTime buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __VCAudioStreamReceiveGroup_UpdateAudioPriority_block_invoke;
      *(void *)&long long v40 = &unk_1E6DB3E18;
      *((void *)&v40 + 1) = v33;
      uint64_t v41 = a1;
      LOBYTE(v42) = v28;
      dispatch_async(v34, buf);
    }
    *(_DWORD *)(a1 + 504) = v29;
  }
  VCAudioBufferList_GetVoiceActivity(a2);
  return kdebug_trace();
}

uint64_t VCAudioRelayThread(void *a1)
{
  return 0;
}

void _VCAudioRelay_UpdateWakeupInterval(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 464);
  if (v2 || *(void *)(a1 + 472))
  {
    double v3 = *(double *)(a1 + 136);
    if (*(void *)(a1 + 440))
    {
      *(void *)(a1 + 496) = (unint64_t)((double)*(unint64_t *)(a1 + 496) + v3 * 1000000000.0);
      uint64_t HostTimeAndGrandmasterIdentityLocalPortForClockTime = TimeSyncClockGetHostTimeAndGrandmasterIdentityLocalPortForClockTime();
      if (*(unsigned __int16 *)(a1 + 456) != 43690
        || (unint64_t v5 = HostTimeAndGrandmasterIdentityLocalPortForClockTime, *(void *)(a1 + 448) != 0xAAAAAAAAAAAAAAAALL))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v6 = VRTraceErrorLogLevelToCSTR();
          uint64_t v7 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v8 = *(unsigned __int16 *)(a1 + 456);
            uint64_t v9 = *(void *)(a1 + 448);
            *(_DWORD *)CMTime buf = 136316674;
            *(void *)&uint8_t buf[4] = v6;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCAudioRelay_UpdateWakeupIntervalWithPTPClock";
            __int16 v38 = 1024;
            int v39 = 904;
            __int16 v40 = 1024;
            *(_DWORD *)uint64_t v41 = v8;
            *(_WORD *)&v41[4] = 1024;
            *(_DWORD *)&v41[6] = 43690;
            *(_WORD *)int v42 = 2048;
            *(void *)&v42[2] = v9;
            *(_WORD *)uint64_t v43 = 2048;
            *(void *)&v43[2] = 0xAAAAAAAAAAAAAAAALL;
            _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Reinitializing PTP time. old local port=%u, new local port=%u, old GM identity=%llu, new GM identity=%llu", buf, 0x3Cu);
          }
        }
        _VCAudioRelay_InitializePTPClockTime(a1, *(void *)(a1 + 504));
        *(void *)(a1 + 496) = (unint64_t)((double)*(unint64_t *)(a1 + 496)
                                                 + *(double *)(a1 + 136) * 1000000000.0);
        unint64_t v5 = TimeSyncClockGetHostTimeAndGrandmasterIdentityLocalPortForClockTime();
      }
      if (v5 == *MEMORY[0x1E4FAF2E8])
      {
        double v10 = (double)*(unint64_t *)(a1 + 504);
        double v11 = *(double *)(a1 + 136);
        unint64_t v5 = (unint64_t)(v11 / machTimeScale() + v10);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v12 = VRTraceErrorLogLevelToCSTR();
          int v13 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = *(void *)(a1 + 504);
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v12;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCAudioRelay_UpdateWakeupIntervalWithPTPClock";
            __int16 v38 = 1024;
            int v39 = 913;
            __int16 v40 = 2048;
            *(void *)uint64_t v41 = v5;
            *(_WORD *)&v41[8] = 2048;
            *(void *)int v42 = v14;
            _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Invalid wakeUpHostTime computed from PTP clock, following local clock instead. newWakeUpHostMachTime=%llu, oldWakeUpHostMachTime=%llu", buf, 0x30u);
          }
        }
      }
      *(void *)(a1 + 504) = v5;
      uint64_t v15 = mach_absolute_time();
      if (v5 >= v15)
      {
        double v16 = machTimeScale() * (double)(v5 - v15);
      }
      else
      {
        double v16 = 0.0;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v17 = VRTraceErrorLogLevelToCSTR();
          unsigned int v18 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = *(void *)(a1 + 496);
            *(_DWORD *)CMTime buf = 136316418;
            *(void *)&uint8_t buf[4] = v17;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCAudioRelay_UpdateWakeupIntervalWithPTPClock";
            __int16 v38 = 1024;
            int v39 = 921;
            __int16 v40 = 2048;
            *(void *)uint64_t v41 = v5;
            *(_WORD *)&v41[8] = 2048;
            *(void *)int v42 = v15;
            *(_WORD *)&v42[8] = 2048;
            *(void *)uint64_t v43 = v19;
            _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Realtime miss: wakeUpHostMachTime=%llu, currentMachHostTime=%llu, ptpWakeUpTime=%llu", buf, 0x3Au);
          }
        }
      }
      *(void *)(a1 + 480) = (int)v16;
      *(void *)(a1 + 48_Block_object_dispose(&STACK[0x250], 8) = (uint64_t)((v16 - (double)(int)v16) * 1000000000.0);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v26 = VRTraceErrorLogLevelToCSTR();
        int v27 = *MEMORY[0x1E4F47A50];
        char v28 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v29 = *(void *)(a1 + 480);
            uint64_t v30 = *(void *)(a1 + 488);
            uint64_t v31 = *(void *)(a1 + 496);
            *(_DWORD *)CMTime buf = 136317186;
            *(void *)&uint8_t buf[4] = v26;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCAudioRelay_UpdateWakeupIntervalWithPTPClock";
            __int16 v38 = 1024;
            int v39 = 929;
            __int16 v40 = 2048;
            *(void *)uint64_t v41 = v29;
            *(_WORD *)&v41[8] = 2048;
            *(void *)int v42 = v30;
            *(_WORD *)&v42[8] = 2048;
            *(void *)uint64_t v43 = v5;
            *(_WORD *)&v43[8] = 2048;
            uint64_t v44 = v15;
            __int16 v45 = 2048;
            uint64_t v46 = v31;
            __int16 v47 = 2048;
            double v48 = v16;
            _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d _nextWakeUpInterval.sec=%ld, _nextWakeUpInterval.nsec=%ld, wakeUpHostMachTime=%llu, currentMachHostTime=%llu, ptpWakeUpTime=%llu, timeInSeconds=%f", buf, 0x58u);
          }
        }
        else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v34 = *(void *)(a1 + 480);
          uint64_t v35 = *(void *)(a1 + 488);
          uint64_t v36 = *(void *)(a1 + 496);
          *(_DWORD *)CMTime buf = 136317186;
          *(void *)&uint8_t buf[4] = v26;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VCAudioRelay_UpdateWakeupIntervalWithPTPClock";
          __int16 v38 = 1024;
          int v39 = 929;
          __int16 v40 = 2048;
          *(void *)uint64_t v41 = v34;
          *(_WORD *)&v41[8] = 2048;
          *(void *)int v42 = v35;
          *(_WORD *)&v42[8] = 2048;
          *(void *)uint64_t v43 = v5;
          *(_WORD *)&v43[8] = 2048;
          uint64_t v44 = v15;
          __int16 v45 = 2048;
          uint64_t v46 = v36;
          __int16 v47 = 2048;
          double v48 = v16;
          _os_log_debug_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEBUG, " [%s] %s:%d _nextWakeUpInterval.sec=%ld, _nextWakeUpInterval.nsec=%ld, wakeUpHostMachTime=%llu, currentMachHostTime=%llu, ptpWakeUpTime=%llu, timeInSeconds=%f", buf, 0x58u);
        }
      }
    }
    else
    {
      unint64_t v20 = *(void *)(a1 + 472) + 1000000000 * v2 + (unint64_t)(v3 * 1000000000.0);
      unint64_t v21 = v20 / 0x3B9ACA00;
      unint64_t v22 = v20 % 0x3B9ACA00;
      *(void *)(a1 + 464) = v20 / 0x3B9ACA00;
      *(void *)(a1 + 472) = v20 % 0x3B9ACA00;
      memset(buf, 170, 16);
      gettimeofday((timeval *)buf, 0);
      uint64_t v23 = v22 + 1000000000 * (v21 - *(void *)buf) - 1000 * *(int *)&buf[8];
      if (v23 < 1)
      {
        unint64_t v24 = 0;
        unint64_t v25 = 0;
      }
      else
      {
        unint64_t v24 = v23 / 0x3B9ACA00uLL;
        unint64_t v25 = v23 % 0x3B9ACA00uLL;
      }
      *(void *)(a1 + 480) = v24;
      *(void *)(a1 + 48_Block_object_dispose(&STACK[0x250], 8) = v25;
    }
  }
  else
  {
    memset(buf, 170, 16);
    gettimeofday((timeval *)buf, 0);
    uint64_t v32 = 1000 * *(int *)&buf[8];
    *(void *)(a1 + 464) = *(void *)buf;
    *(void *)(a1 + 472) = v32;
    uint64_t v33 = mach_absolute_time();
    _VCAudioRelay_InitializePTPClockTime(a1, v33);
  }
}

void _VCAudioRelay_InitializePTPClockTime(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 440))
  {
    *(void *)(a1 + 496) = TimeSyncClockGetClockTimeAndGrandmasterIdentityLocalPortForHostTime();
    *(void *)(a1 + 504) = a2;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      unint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 496);
        uint64_t v6 = *(void *)(a1 + 504);
        int v8 = *(unsigned __int16 *)(a1 + 456);
        uint64_t v9 = *(void *)(a1 + 448);
        int v10 = 136316674;
        uint64_t v11 = v4;
        __int16 v12 = 2080;
        int v13 = "_VCAudioRelay_InitializePTPClockTime";
        __int16 v14 = 1024;
        int v15 = 889;
        __int16 v16 = 2048;
        uint64_t v17 = v6;
        __int16 v18 = 2048;
        uint64_t v19 = v7;
        __int16 v20 = 1024;
        int v21 = v8;
        __int16 v22 = 2048;
        uint64_t v23 = v9;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d hostMachTime=%llu, ptpTime=%llu, port=%u, GMidentity=%llu", (uint8_t *)&v10, 0x40u);
      }
    }
  }
}

void VCCaptionsStreamSendGroup_PushAudioSamples(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 312))
  {
    uint64_t v2 = *(void **)(a1 + 744);
    [v2 pushAudioSamples:a2];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    unint64_t v5 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315650;
        uint64_t v7 = v3;
        __int16 v8 = 2080;
        uint64_t v9 = "VCCaptionsStreamSendGroup_PushAudioSamples";
        __int16 v10 = 1024;
        int v11 = 312;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d audio no-op no MKM", (uint8_t *)&v6, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      VCCaptionsStreamSendGroup_PushAudioSamples_cold_1(v3);
    }
  }
}

void sub_1E1F208B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCCaptionsStream_CreateSampleBuffer(void *memoryBlock, size_t blockLength, const CMSampleTimingInfo *a3, CMSampleBufferRef *a4)
{
  blockBufferOut[1] = *(CMBlockBufferRef *)MEMORY[0x1E4F143B8];
  CMFormatDescriptionRef formatDescriptionOut = 0;
  blockBufferOut[0] = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v7 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], memoryBlock, blockLength, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, blockLength, 0, blockBufferOut);
  if (v7)
  {
    uint64_t v9 = v7;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCCaptionsStream_CreateSampleBuffer_cold_2();
      }
    }
  }
  else
  {
    uint64_t v8 = CMFormatDescriptionCreate(v6, 0x6D657461u, 0x63617074u, 0, &formatDescriptionOut);
    if (v8)
    {
      uint64_t v9 = v8;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCCaptionsStream_CreateSampleBuffer_cold_1();
        }
      }
    }
    else
    {
      uint64_t v9 = CMSampleBufferCreate(v6, blockBufferOut[0], 1u, 0, 0, formatDescriptionOut, 1, 1, a3, 0, 0, a4);
    }
  }
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (blockBufferOut[0]) {
    CFRelease(blockBufferOut[0]);
  }
  return v9;
}

double VCMediaChannelMetrics_Reset(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  return result;
}

uint64_t VCMediaChannelMetrics_Sum(uint64_t result, uint64_t a2)
{
  *(_DWORD *)result += *(_DWORD *)a2;
  *(_DWORD *)(result + 24) += *(_DWORD *)(a2 + 24);
  *(double *)(result + 32) = *(double *)(a2 + 32) + *(double *)(result + 32);
  for (uint64_t i = 4; i != 24; i += 4)
    *(_DWORD *)(result + i) += *(_DWORD *)(a2 + i);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  double v3 = *(double *)(a2 + 56);
  if (v3 == 0.0) {
    double v3 = *(double *)(result + 56);
  }
  *(double *)(result + 56) = v3;
  double v4 = *(double *)(a2 + 72);
  if (v4 == 0.0) {
    double v4 = *(double *)(result + 72);
  }
  *(double *)(result + 72) = v4;
  int v5 = *(_DWORD *)(a2 + 64);
  if (!v5) {
    int v5 = *(_DWORD *)(result + 64);
  }
  *(_DWORD *)(result + 64) = v5;
  int v6 = *(_DWORD *)(a2 + 80);
  if (!v6) {
    int v6 = *(_DWORD *)(result + 80);
  }
  int v7 = *(_DWORD *)(result + 84) + *(_DWORD *)(a2 + 84);
  *(_DWORD *)(result + 80) = v6;
  *(_DWORD *)(result + 84) = v7;
  return result;
}

char *VCVideoJitterBuffer_Create(uint64_t a1)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoJitterBuffer_Create_cold_1();
      }
    }
    return 0;
  }
  uint64_t v2 = (char *)malloc_type_calloc(1uLL, 0x14070uLL, 0x10B00403E9CE963uLL);
  double v3 = v2;
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoJitterBuffer_Create_cold_3();
      }
    }
    goto LABEL_64;
  }
  if (!*(_DWORD *)(a1 + 216))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoJitterBuffer_Create_cold_4();
      }
    }
    goto LABEL_64;
  }
  double v4 = v2 + 81880;
  long long v5 = *(_OWORD *)a1;
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v7 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v7;
  *(_OWORD *)uint64_t v2 = v5;
  *((_OWORD *)v2 + 1) = v6;
  long long v8 = *(_OWORD *)(a1 + 64);
  long long v9 = *(_OWORD *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v2 + 7) = v10;
  *((_OWORD *)v2 + 4) = v8;
  *((_OWORD *)v2 + 5) = v9;
  long long v11 = *(_OWORD *)(a1 + 128);
  long long v12 = *(_OWORD *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 176);
  *((_OWORD *)v2 + 10) = *(_OWORD *)(a1 + 160);
  *((_OWORD *)v2 + 11) = v13;
  *((_OWORD *)v2 + _Block_object_dispose(&STACK[0x250], 8) = v11;
  *((_OWORD *)v2 + 9) = v12;
  long long v14 = *(_OWORD *)(a1 + 192);
  long long v15 = *(_OWORD *)(a1 + 208);
  long long v16 = *(_OWORD *)(a1 + 224);
  *((void *)v2 + 30) = *(void *)(a1 + 240);
  *((_OWORD *)v2 + 13) = v15;
  *((_OWORD *)v2 + 14) = v16;
  *((_OWORD *)v2 + 12) = v14;
  *((void *)v2 + 10241) = LogDump_OpenLog(a1, (uint64_t)"JitterBuffer", (uint64_t)".vjbdump", (char)"STime\tTimestamp\tSPF\tBundling\tDTX\tNetworkType\tFirstTimestamp\tWraps\tIsRed\tLag\tAvgLag\tMaxLag\tMinLag\tJumpThresh\tSlopeThresh\tFlat\tClippedLag\tMinLagAdjustment\tMinClipThreshold\tJB\tJBMin\tJBMax\tTargetJ\tRedOverheadInTargetJ\tTargetJQSize\tJQSize\tAvgJQSize\tERASURE\tMODE\tPayload Type\tSeq Number\tDON\tOUTTS\tLeftOverSamples\tProminence\tStreamID\tTargetSizeIndependent\tAVSyncOffset\tEncodedBufferLength\n", 9, (char)"2.7");
  *((void *)v3 + 10246) = 0x7FEFFFFFFFFFFFFFLL;
  *double v4 = 0;
  *((void *)v3 + 10251) = 0x3FF0000000000000;
  int v18 = *(_DWORD *)(a1 + 200);
  switch(v18)
  {
    case 0:
      LODWORD(v17) = *(_DWORD *)(a1 + 216);
      double v19 = (double)v17;
      double v20 = 3.0;
      goto LABEL_13;
    case 3:
      double v21 = *(double *)(a1 + 240);
      break;
    case 1:
      LODWORD(v17) = *(_DWORD *)(a1 + 216);
      double v19 = (double)v17;
      double v20 = 0.0;
LABEL_13:
      double v21 = v20 / v19;
      break;
    default:
      double v21 = 0.1;
      break;
  }
  *((double *)v3 + 10253) = VCDefaults_GetDoubleValueForKey(@"videoJitterBufferMinQueueSize", v21);
  *((void *)&v61 + 1) = *((void *)v3 + 10241);
  *(void *)&long long v61 = 1;
  if ((JLagProcessor_Initialize((uint64_t)(v3 + 248), &v61) & 1) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoJitterBuffer_Create_cold_7();
      }
    }
    goto LABEL_64;
  }
  long long v60 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v22 = *((void *)v3 + 10253);
  uint64_t v51 = v22;
  int v23 = *(_DWORD *)(a1 + 200);
  if (!v23)
  {
    double v25 = (double)*(unsigned int *)(a1 + 216);
    double v26 = 6.0;
LABEL_22:
    double v24 = v26 / v25;
    goto LABEL_24;
  }
  if (v23 != 3)
  {
    double v24 = 0.5;
    if (v23 != 1) {
      goto LABEL_24;
    }
    LODWORD(v24) = *(_DWORD *)(a1 + 216);
    double v25 = (double)*(unint64_t *)&v24;
    double v26 = 5.0;
    goto LABEL_22;
  }
  double v24 = *(double *)(a1 + 240);
LABEL_24:
  double DoubleValueForKey = VCDefaults_GetDoubleValueForKey(@"maxVideoJitterBufferSize", v24);
  double v28 = DoubleValueForKey;
  *((double *)&v52 + 1) = DoubleValueForKey;
  double v29 = 0.25;
  if (*((_DWORD *)v3 + 50) != 2)
  {
    LODWORD(DoubleValueForKey) = *(_DWORD *)(a1 + 216);
    double v29 = 3.0 / (double)*(unint64_t *)&DoubleValueForKey;
  }
  *(double *)&long long v53 = v29;
  int v30 = *(unsigned __int8 *)(a1 + 204);
  DWORD2(v53) = v30;
  int IntValueForKey = VCDefaults_GetIntValueForKey(@"numberOfBinsPerFrameJitterBufferCdf", 4);
  if (!IntValueForKey)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoJitterBuffer_Create_cold_6();
      }
    }
    int IntValueForKey = 4;
  }
  double v32 = 1000.0 / (double)(*(_DWORD *)(a1 + 216) * IntValueForKey);
  *(double *)&long long v54 = v32;
  BYTE1(v55) = 1;
  *((void *)&v55 + 1) = *((void *)v3 + 10241);
  int v33 = *(_DWORD *)(a1 + 200);
  if (v33 == 3)
  {
    double v34 = 0.95;
    if (*(double *)(a1 + 240) == 0.0) {
      double v34 = 0.0;
    }
  }
  else if (v33 == 1)
  {
    double v34 = 0.95;
  }
  else
  {
    double v34 = 0.98;
  }
  double v35 = VCDefaults_GetDoubleValueForKey(@"percentToCoverInJitterBufferCdf", v34);
  *((double *)&v54 + 1) = v35;
  LOBYTE(v55) = 1;
  BYTE8(v57) = 1;
  BYTE9(v57) = *((_DWORD *)v3 + 50) == 2;
  BYTE11(v57) = 1;
  LOBYTE(v56) = VCDefaults_GetBoolValueForKey(@"jitterBufferHistoryUseShortTermWindowForTargetExpansion", *(unsigned __int8 *)(a1 + 224));
  double v36 = 2.0;
  if (*((_DWORD *)v3 + 50) == 2) {
    double v36 = 5.0;
  }
  double v37 = VCDefaults_GetDoubleValueForKey(@"jitterBufferHistoryShortTermWindowSize", v36);
  *((double *)&v56 + 1) = v37;
  double v38 = 10.0;
  if (*((_DWORD *)v3 + 50) != 2) {
    double v38 = 5.0;
  }
  double v39 = VCDefaults_GetDoubleValueForKey(@"jitterBufferHistoryLongTermWindowSize", v38);
  *(double *)&long long v57 = v39;
  BYTE10(v57) = 0;
  CFTypeRef v40 = (CFTypeRef)*((void *)v3 + 29);
  if (v40) {
    CFTypeRef v40 = CFRetain(v40);
  }
  *(void *)&long long v58 = v40;
  int v41 = *((_DWORD *)v3 + 57);
  LODWORD(v59) = v41;
  BYTE8(v60) = 0;
  *((void *)&v59 + 1) = _VCVideoJitterBuffer_GetJBTargetFromEstimatedTarget;
  *(void *)&long long v60 = v3;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v42 = VRTraceErrorLogLevelToCSTR();
    uint64_t v43 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v44 = *((void *)v3 + 29);
      __int16 v45 = FourccToCStr(v41);
      *(_DWORD *)CMTime buf = 136318466;
      uint64_t v63 = v42;
      __int16 v64 = 2080;
      char v65 = "VCVideoJitterBuffer_Create";
      __int16 v66 = 1024;
      int v67 = 228;
      __int16 v68 = 2048;
      unint64_t v69 = v3;
      __int16 v70 = 2048;
      uint64_t v71 = v22;
      __int16 v72 = 2048;
      double v73 = v28;
      __int16 v74 = 2048;
      double v75 = v29;
      __int16 v76 = 1024;
      int v77 = v30;
      __int16 v78 = 2048;
      double v79 = v32;
      __int16 v80 = 2048;
      double v81 = v35;
      __int16 v82 = 2048;
      double v83 = v37;
      __int16 v84 = 2048;
      double v85 = v39;
      __int16 v86 = 2048;
      uint64_t v87 = v44;
      __int16 v88 = 2080;
      long long v89 = v45;
      _os_log_impl(&dword_1E1EA4000, v43, OS_LOG_TYPE_DEFAULT, "VCVideoJitterBuffer [%s] %s:%d VCVideoJitterBuffer[%p] Video jitter buffer configured with minQ size %f maxQ size %f highStartQ size %f highstart %d jitterDistributionBucketSize %f targetPercentileToCover %f shortTermWindowSize %f longTermWindowSize %f jbTargetEstimatorSynchronizer=%p streamGroupID=%s", buf, 0x86u);
    }
  }
  BOOL v46 = JTargetJBEstimator_Initialize((uint64_t)(v3 + 704), (long long *)&v51);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (!v46)
  {
    if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoJitterBuffer_Create_cold_5();
      }
    }
LABEL_64:
    VCVideoJitterBuffer_Finalize(v3);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoJitterBuffer_Create_cold_2();
      }
    }
    return 0;
  }
  if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v48 = VRTraceErrorLogLevelToCSTR();
    uint64_t v49 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v63 = v48;
      __int16 v64 = 2080;
      char v65 = "VCVideoJitterBuffer_Create";
      __int16 v66 = 1024;
      int v67 = 233;
      _os_log_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_DEFAULT, "VCVideoJitterBuffer [%s] %s:%d Video Jitter Buffer Created Successfully", buf, 0x1Cu);
    }
  }
  return v3;
}

uint64_t _VCVideoJitterBuffer_GetJBTargetFromEstimatedTarget(uint64_t a1, float *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    double v4 = (double *)(a1 + 82008);
    if (*(_DWORD *)(a1 + 200) == 3)
    {
      uint64_t result = 0;
      double v10 = v4[2];
    }
    else
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      float v5 = *a2;
      JTargetJBEstimator_GetSharedSettings(a1 + 704, (uint64_t)&v12);
      uint64_t result = 0;
      double v7 = v4[2];
      float v8 = fmax(v7, (double)(int)(ceil(fmax(v5 + 0.000005, 0.0) * (double)*(unsigned int *)(a1 + 216)) - *v4)/ (double)*(unsigned int *)(a1 + 216));
      float v9 = fmax(v8, fmax(*(double *)&v13, v7));
      double v10 = fmin(v9, *((double *)&v13 + 1));
    }
    float v11 = v10;
    *a2 = v11;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCVideoJitterBuffer_GetJBTargetFromEstimatedTarget_cold_1();
      }
    }
    return 4;
  }
  return result;
}

void VCVideoJitterBuffer_Finalize(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      double v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315906;
        uint64_t v7 = v3;
        __int16 v8 = 2080;
        float v9 = "VCVideoJitterBuffer_Finalize";
        __int16 v10 = 1024;
        int v11 = 293;
        __int16 v12 = 2048;
        long long v13 = a1;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCVideoJitterBuffer [%s] %s:%d Cleaning up Video JitterBuffer (0x%p)", (uint8_t *)&v6, 0x26u);
      }
    }
    JTargetJBEstimator_Finalize((uint64_t)(a1 + 88));
    LogDump_CloseLog(a1[10241]);
    float v5 = (const void *)a1[29];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoJitterBuffer_Finalize_cold_1();
    }
  }
}

void VCVideoJitterBuffer_UpdateMode(uint64_t a1, unsigned int a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = a1 + 81880;
    long long v40 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    *(_DWORD *)(a1 + 200) = a2;
    double v5 = 0.1;
    double v6 = 0.1;
    if (a2 <= 3) {
      double v6 = dbl_1E259C088[a2];
    }
    double DoubleValueForKey = VCDefaults_GetDoubleValueForKey(@"videoJitterBufferMinQueueSize", v6);
    *(double *)(v4 + 144) = DoubleValueForKey;
    int v8 = *(_DWORD *)(a1 + 200);
    if (v8)
    {
      if (v8 == 3)
      {
        double v5 = *(double *)(a1 + 240);
LABEL_14:
        *(double *)&unint64_t v11 = VCDefaults_GetDoubleValueForKey(@"videoJitterBufferMinQueueSize", v5);
        unint64_t v31 = v11;
        int v12 = *(_DWORD *)(a1 + 200);
        if (v12)
        {
          if (v12 == 3)
          {
            double v13 = *(double *)(a1 + 240);
LABEL_21:
            double v16 = VCDefaults_GetDoubleValueForKey(@"maxVideoJitterBufferSize", v13);
            *((double *)&v32 + 1) = v16;
            int v17 = *(_DWORD *)(a1 + 200);
            if (v17 == 2)
            {
              *(void *)&long long v33 = 0x3FD0000000000000;
            }
            else
            {
              LODWORD(v16) = *(_DWORD *)(a1 + 216);
              *(double *)&long long v33 = 3.0 / (double)*(unint64_t *)&v16;
              if (v17 == 3)
              {
                double v18 = 0.95;
                if (*(double *)(a1 + 240) == 0.0) {
                  double v18 = 0.0;
                }
                goto LABEL_29;
              }
              if (v17 == 1)
              {
                double v18 = 0.95;
                goto LABEL_29;
              }
            }
            double v18 = 0.98;
LABEL_29:
            *((void *)&v34 + 1) = VCDefaults_GetDoubleValueForKey(@"percentToCoverInJitterBufferCdf", v18);
            JTargetJBEstimator_UpdateJitterBufferParams(a1 + 704, (uint64_t *)&v31);
            *(_DWORD *)uint64_t v4 = 1;
            JTargetJBEstimator_NewStream(a1 + 704, *(_DWORD *)(a1 + 220), *(_WORD *)(v4 + 12));
            int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
            double v26 = (os_log_t *)MEMORY[0x1E4F47A50];
            if (ErrorLogLevelForModule >= 7)
            {
              uint64_t v27 = VRTraceErrorLogLevelToCSTR();
              double v28 = *v26;
              if (os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315906;
                uint64_t v42 = v27;
                __int16 v43 = 2080;
                uint64_t v44 = "VCVideoJitterBuffer_UpdateMode";
                __int16 v45 = 1024;
                int v46 = 284;
                __int16 v47 = 2048;
                *(void *)uint64_t v48 = a1;
                _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "VCVideoJitterBuffer [%s] %s:%d [%p] JBState NEWSTREAM -> SETTLE", buf, 0x26u);
              }
            }
            VRLogfilePrint(*(void *)(v4 + 48), "State = STATE_NEWSTREAM, iSampleRate = %d\nState = SETTLE\n", v20, v21, v22, v23, v24, v25, *(_DWORD *)(a1 + 220));
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v29 = VRTraceErrorLogLevelToCSTR();
              int v30 = *v26;
              if (os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136316674;
                uint64_t v42 = v29;
                __int16 v43 = 2080;
                uint64_t v44 = "VCVideoJitterBuffer_UpdateMode";
                __int16 v45 = 1024;
                int v46 = 287;
                __int16 v47 = 1024;
                *(_DWORD *)uint64_t v48 = a2;
                *(_WORD *)&v48[4] = 2048;
                *(void *)&v48[6] = v31;
                __int16 v49 = 2048;
                uint64_t v50 = *((void *)&v32 + 1);
                __int16 v51 = 2048;
                uint64_t v52 = *((void *)&v34 + 1);
                _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, "VCVideoJitterBuffer [%s] %s:%d Video jitter buffer reconfigured with new mode %d. minQ size %f maxQ size %f targetPercentileToCover %f", buf, 0x40u);
              }
            }
            return;
          }
          double v13 = 0.5;
          if (v12 != 1) {
            goto LABEL_21;
          }
          LODWORD(v13) = *(_DWORD *)(a1 + 216);
          double v14 = (double)*(unint64_t *)&v13;
          double v15 = 5.0;
        }
        else
        {
          LODWORD(v11) = *(_DWORD *)(a1 + 216);
          double v14 = (double)v11;
          double v15 = 6.0;
        }
        double v13 = v15 / v14;
        goto LABEL_21;
      }
      if (v8 != 1) {
        goto LABEL_14;
      }
      LODWORD(DoubleValueForKey) = *(_DWORD *)(a1 + 216);
      double v9 = (double)*(unint64_t *)&DoubleValueForKey;
      double v10 = 0.0;
    }
    else
    {
      LODWORD(DoubleValueForKey) = *(_DWORD *)(a1 + 216);
      double v9 = (double)*(unint64_t *)&DoubleValueForKey;
      double v10 = 3.0;
    }
    double v5 = v10 / v9;
    goto LABEL_14;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoJitterBuffer_UpdateMode_cold_1();
    }
  }
}

double VCVideoJitterBuffer_GetTargetJitterQueueSize(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 81912);
  }
  double v1 = 0.0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoJitterBuffer_GetTargetJitterQueueSize_cold_1();
    }
  }
  return v1;
}

double VCVideoJitterBuffer_GetJitterBufferMaxQueueSize(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 736);
  }
  double v1 = 0.0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoJitterBuffer_GetJitterBufferMaxQueueSize_cold_1();
    }
  }
  return v1;
}

double VCVideoJitterBuffer_GetReferenceFrame@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (a1)
  {
    long long v3 = *(_OWORD *)(a1 + 81936);
    long long v4 = *(_OWORD *)(a1 + 81952);
    *a2 = v3;
    a2[1] = v4;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoJitterBuffer_GetReferenceFrame_cold_1();
      }
    }
    *(void *)&long long v3 = 0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return *(double *)&v3;
}

void VCVideoJitterBuffer_EnqueueFrame(uint64_t a1, uint64_t a2, long long *a3)
{
  buf[7] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      uint64_t v6 = a1 + 81880;
      if (!*(unsigned char *)(a2 + 75) || *(_DWORD *)v6 >= 4u && *(unsigned char *)(a1 + 81920))
      {
        uint64_t v68 = 0;
        long long v66 = 0u;
        long long v67 = 0u;
        unsigned int v8 = *(_DWORD *)(a1 + 216);
        unsigned int v7 = *(_DWORD *)(a1 + 220);
        int v9 = *(_DWORD *)(a2 + 8);
        int v10 = *(_DWORD *)(a1 + 81888);
        unsigned int v11 = *(unsigned __int16 *)(a2 + 40);
        int v12 = *(unsigned __int16 *)(a1 + 81892);
        int v13 = *(unsigned __int8 *)(a2 + 38);
        BYTE12(v67) = *(unsigned char *)(a2 + 38);
        __int16 v14 = v11;
        if (!*(unsigned char *)(a2 + 39))
        {
          __int16 v14 = *(_WORD *)(a1 + 82016);
          *(_WORD *)(a1 + 82016) = v14 + 1;
        }
        unsigned int v15 = v12 + 1;
        unsigned int v16 = v9 - v10;
        BOOL v18 = (v15 < v11 || v16 <= 0x960) && v15 >= v11;
        LOWORD(v66) = v14;
        *(void *)&long long v67 = *(void *)(a2 + 48);
        DWORD1(v66) = v9;
        int v19 = v7 / v8;
        if (v18) {
          int v20 = v16;
        }
        else {
          int v20 = v19;
        }
        DWORD2(v67) = v20;
        LODWORD(v6_Block_object_dispose(&STACK[0x250], 8) = 1;
        *(_DWORD *)(a1 + 8188_Block_object_dispose(&STACK[0x250], 8) = v9;
        *(_WORD *)(a1 + 81892) = v14;
        if (v13 || !*(_DWORD *)v6)
        {
          JLagProcessor_NewStream(a1 + 248, (__int16 *)&v66, v7, v20);
          JTargetJBEstimator_NewStream(a1 + 704, *(_DWORD *)(a1 + 220), v66);
          *(_DWORD *)uint64_t v6 = 1;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v27 = VRTraceErrorLogLevelToCSTR();
            double v28 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0]) = 136315906;
              *(void *)((char *)buf + 4) = v27;
              WORD2(buf[1]) = 2080;
              *(void *)((char *)&buf[1] + 6) = "VCVideoJitterBuffer_EnqueueFrame";
              HIWORD(buf[2]) = 1024;
              LODWORD(buf[3]) = 471;
              WORD2(buf[3]) = 2048;
              *(void *)((char *)&buf[3] + 6) = a1;
              _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "VCVideoJitterBuffer [%s] %s:%d [%p] JBState NEWSTREAM -> SETTLE", (uint8_t *)buf, 0x26u);
            }
          }
          VRLogfilePrint(*(void *)(v6 + 48), "State = STATE_NEWSTREAM, iSampleRate = %d\nState = SETTLE\n", v21, v22, v23, v24, v25, v26, *(_DWORD *)(a1 + 220));
        }
        else
        {
          double v29 = JLagProcessor_Process(a1 + 248, (unsigned __int16 *)&v66, v20, 0, *(_DWORD *)v6);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v36 = VRTraceErrorLogLevelToCSTR();
            long long v37 = *MEMORY[0x1E4F47A50];
            long long v38 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0]) = 136316162;
                *(void *)((char *)buf + 4) = v36;
                WORD2(buf[1]) = 2080;
                *(void *)((char *)&buf[1] + 6) = "VCVideoJitterBuffer_EnqueueFrame";
                HIWORD(buf[2]) = 1024;
                LODWORD(buf[3]) = 478;
                WORD2(buf[3]) = 2048;
                *(double *)((char *)&buf[3] + 6) = v29;
                HIWORD(buf[4]) = 1024;
                LODWORD(buf[5]) = DWORD1(v66);
                _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, "VCVideoJitterBuffer [%s] %s:%d video lag is %f for RTPTimestamp=%u", (uint8_t *)buf, 0x2Cu);
              }
            }
            else if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0]) = 136316162;
              *(void *)((char *)buf + 4) = v36;
              WORD2(buf[1]) = 2080;
              *(void *)((char *)&buf[1] + 6) = "VCVideoJitterBuffer_EnqueueFrame";
              HIWORD(buf[2]) = 1024;
              LODWORD(buf[3]) = 478;
              WORD2(buf[3]) = 2048;
              *(double *)((char *)&buf[3] + 6) = v29;
              HIWORD(buf[4]) = 1024;
              LODWORD(buf[5]) = DWORD1(v66);
              _os_log_debug_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEBUG, "VCVideoJitterBuffer [%s] %s:%d video lag is %f for RTPTimestamp=%u", (uint8_t *)buf, 0x2Cu);
            }
          }
          long long v39 = *a3;
          long long v40 = a3[1];
          *(_OWORD *)(v6 + 96) = *a3;
          *(_OWORD *)(v6 + 112) = v40;
          if (*(_DWORD *)v6 == 1)
          {
            LODWORD(v39) = *(_DWORD *)(a1 + 216);
            if (fabs(v29) >= 1.0 / (double)(unint64_t)v39) {
              return;
            }
            *(_DWORD *)uint64_t v6 = 2;
            VRLogfilePrint(*(void *)(v6 + 48), "State = FILL\n", v30, v31, v32, v33, v34, v35, v65);
          }
          if (*(_DWORD *)v6 <= 3u) {
            *(_DWORD *)(v6 + 4) += DWORD2(v67);
          }
          if (*(_DWORD *)v6 == 2)
          {
            JTargetJBEstimator_GetMinJBSize(a1 + 704);
            LODWORD(v47) = *(_DWORD *)(v6 + 4);
            if ((double)v47 / (double)*(int *)(a1 + 220) > v48)
            {
              *(_DWORD *)uint64_t v6 = 4;
              VRLogfilePrint(*(void *)(v6 + 48), "State = RUN\n", v41, v42, v43, v44, v45, v46, v65);
            }
          }
          memset(&buf[2], 0, 32);
          buf[0] = (unsigned __int16)v66;
          buf[1] = v67;
          buf[2] = DWORD2(v67) | 0x100000000;
          LODWORD(buf[3]) = DWORD1(v66);
          uint8_t buf[4] = *(void *)(a2 + 64);
          JTargetJBEstimator_Process(a1 + 704, (double *)buf, v29);
          if (!*(unsigned char *)(a1 + 80360))
          {
            double v51 = *(double *)(a1 + 66776);
            if (v51 != *(double *)(v6 + 88))
            {
              uint64_t v52 = *(int *)(a1 + 66828);
              int v53 = *(_DWORD *)(a1 + 760 + 4 * v52 + 36000);
              *(_DWORD *)(v6 + 64) = v53;
              uint64_t v54 = a1 + 760 + 8 * v52;
              *(void *)(v6 + 56) = *(void *)(v54 + 42000);
              double v55 = *(double *)(v54 + 54000);
              *(double *)(v6 + 72) = v55;
              BOOL v56 = v55 != 0.0 || v53 == 0;
              BOOL v57 = v56;
              *(unsigned char *)(v6 + 80) = v57;
              *(double *)(v6 + 8_Block_object_dispose(&STACK[0x250], 8) = v51;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v58 = VRTraceErrorLogLevelToCSTR();
                long long v59 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v60 = *(void *)(v6 + 88);
                  int v61 = *(_DWORD *)(v6 + 64);
                  *(_DWORD *)unint64_t v69 = 136316162;
                  *(void *)&v69[4] = v58;
                  *(_WORD *)&v69[12] = 2080;
                  *(void *)&v69[14] = "VCVideoJitterBuffer_EnqueueFrame";
                  __int16 v70 = 1024;
                  int v71 = 523;
                  __int16 v72 = 2048;
                  uint64_t v73 = v60;
                  __int16 v74 = 1024;
                  int v75 = v61;
                  _os_log_impl(&dword_1E1EA4000, v59, OS_LOG_TYPE_DEFAULT, "VCVideoJitterBuffer [%s] %s:%d Found new lowest minLag of %f for RTPTimestamp=%u", v69, 0x2Cu);
                }
              }
            }
          }
          double v49 = *(double *)(a1 + 81288);
          if (*(_DWORD *)(a1 + 200) == 3) {
            double v49 = *(double *)(v6 + 144);
          }
          double v50 = fmax(*(double *)(v6 + 144), (double)(int)(ceil(fmax(v49 + 0.000005, 0.0) * (double)*(unsigned int *)(a1 + 216))- *(double *)(v6 + 128))/ (double)*(unsigned int *)(a1 + 216));
          *(double *)(v6 + 24) = v50;
          *(double *)(v6 + 32) = v50;
          *(double *)(v6 + 16) = v49;
          memset(v69, 170, 20);
          if (*(void *)(v6 + 48))
          {
            LogDump_GetTimestampString(*(double *)&v67);
            JTargetJBEstimator_GetStatistics(a1 + 704);
            JLagProcessor_GetStatistics(a1 + 248);
            double v63 = *(double *)(v6 + 24);
            double v62 = *(double *)(v6 + 32);
            if (v62 == v63)
            {
              uint64_t v64 = 0;
            }
            else if (v62 <= v63)
            {
              if (v62 >= v63) {
                uint64_t v64 = 3;
              }
              else {
                uint64_t v64 = 1;
              }
            }
            else
            {
              uint64_t v64 = 2;
            }
            VRLogfilePrint(*(void *)(v6 + 48), "%s\t%u\t%u\t%d\t%d\t%d\t%u\t%u\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%6d\t%6d\t%d\t%d\t%s\t%d\t%u\t%u\t%u\t%d\t%d\t%d\t%02.4f\t%02.4f\t%zu\n", (uint64_t)jitterBufferPlaybackMode[v64], (unsigned __int16)v66, *(unsigned __int16 *)(a2 + 16), *(unsigned __int8 *)(a2 + 14), *(unsigned __int16 *)(a2 + 12), *(void *)(a2 + 80), (char)v69);
          }
          if (!*(unsigned char *)(v6 + 40) && *(unsigned char *)(a2 + 15)) {
            *(unsigned char *)(v6 + 40) = 1;
          }
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoJitterBuffer_EnqueueFrame_cold_1();
    }
  }
}

void VCVideoJitterBuffer_HealthPrint(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t Statistics = JTargetJBEstimator_GetStatistics(a1 + 704);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      long long v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(Statistics + 16);
        uint64_t v5 = *(void *)(Statistics + 24);
        uint64_t v7 = *(void *)(Statistics + 8);
        int v8 = *(_DWORD *)(Statistics + 48);
        uint64_t v9 = *(void *)(Statistics + 56);
        uint64_t v10 = *(void *)(Statistics + 64);
        uint64_t v11 = *(void *)(a1 + 81912);
        uint64_t v12 = *(void *)(Statistics + 72);
        uint64_t v13 = *(void *)(Statistics + 80);
        uint64_t v14 = *(void *)(Statistics + 88);
        int v15 = 136318210;
        uint64_t v16 = v3;
        __int16 v17 = 2080;
        BOOL v18 = "VCVideoJitterBuffer_HealthPrint";
        __int16 v19 = 1024;
        int v20 = 547;
        __int16 v21 = 2048;
        uint64_t v22 = v7;
        __int16 v23 = 2048;
        uint64_t v24 = v5;
        __int16 v25 = 2048;
        uint64_t v26 = v6;
        __int16 v27 = 1024;
        int v28 = v8;
        __int16 v29 = 2048;
        uint64_t v30 = v9;
        __int16 v31 = 2048;
        uint64_t v32 = v10;
        __int16 v33 = 2048;
        uint64_t v34 = v12;
        __int16 v35 = 2048;
        uint64_t v36 = v13;
        __int16 v37 = 2048;
        uint64_t v38 = v11;
        __int16 v39 = 2048;
        uint64_t v40 = v14;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCVideoJitterBuffer [%s] %s:%d @=@ Health: VideoJitterBuffer avgLag=%f maxLag=%f minLag=%f flat=%d clippedLag=%f minLagAdj=%f minClipThresh=%f targetSize=%f quantizedTargetQueueSizeInSeconds=%f targetSizeIndependent=%f", (uint8_t *)&v15, 0x7Cu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoJitterBuffer_HealthPrint_cold_1();
    }
  }
}

uint64_t _VCAudioPowerSpectrumSource_CompareListEntries(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v2 == v3;
  unsigned int v5 = 2 * (v2 >= v3);
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

void VCAudioPowerSpectrumSource_FreeClient(id **a1)
{
  double v1 = *a1;
  *a1 = 0;
  if (v1)
  {

    free(v1);
  }
}

id *VCAudioPowerSpectrumSource_PushAudioSamples(id *result, uint64_t a2)
{
  if (result) {
    return VCAudioPowerSpectrumSource_ProcessAudioSamples((uint64_t)(result + 22), a2);
  }
  return result;
}

id *VCAudioPowerSpectrumSource_ProcessAudioSamples(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t result = (id *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 32));
  int v15 = result;
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t v6 = (os_log_t *)MEMORY[0x1E4F47A50];
    while (1)
    {
      int v7 = *(_DWORD *)(v5 + 32);
      if (v7 == 2) {
        break;
      }
      if (v7 != 1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v11 = VRTraceErrorLogLevelToCSTR();
          uint64_t v12 = *v6;
          if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
          {
            int v13 = *(_DWORD *)(v5 + 32);
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v11;
            __int16 v18 = 2080;
            __int16 v19 = "_VCAudioPowerSpectrumSource_ProcessEventQueue";
            __int16 v20 = 1024;
            int v21 = 146;
            __int16 v22 = 1024;
            LODWORD(v23) = v13;
            _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid operation: %d", buf, 0x22u);
          }
        }
        VCAudioPowerSpectrumSource_FreeClient(&v15);
        goto LABEL_20;
      }
      uint64_t v16 = (id *)v5;
      if ((VCSingleLinkedListPush(v3, (void *)v5) & 1) == 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v8 = VRTraceErrorLogLevelToCSTR();
          uint64_t v9 = *v6;
          if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
          {
            uint64_t v14 = *(void *)(v5 + 8);
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v8;
            __int16 v18 = 2080;
            __int16 v19 = "_VCAudioPowerSpectrumSource_ProcessAddEvent";
            __int16 v20 = 1024;
            int v21 = 113;
            __int16 v22 = 2048;
            uint64_t v23 = v14;
            _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d error powerSpectrum[%p] already registered", buf, 0x26u);
          }
        }
        VCAudioPowerSpectrumSource_FreeClient(&v16);
      }
      uint64_t v10 = (void *)MEMORY[0x1E4E56580](v3 + 40);
      [v10 audioPowerSpectrumSinkDidRegister];
      if (v10) {
        goto LABEL_15;
      }
LABEL_20:
      uint64_t result = (id *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(v3 + 32));
      uint64_t v5 = (uint64_t)result;
      int v15 = result;
      if (!result) {
        goto LABEL_23;
      }
    }
    *(void *)CMTime buf = v5;
    uint64_t v16 = (id *)VCSingleLinkedListRemove(v3, v5);
    if (v16) {
      VCAudioPowerSpectrumSource_FreeClient(&v16);
    }
    VCAudioPowerSpectrumSource_FreeClient((id **)buf);
    uint64_t v10 = (void *)MEMORY[0x1E4E56580](v3 + 40);
    [v10 audioPowerSpectrumSinkDidUnregister];
    if (!v10) {
      goto LABEL_20;
    }
LABEL_15:
    CFRelease(v10);
    goto LABEL_20;
  }
LABEL_23:
  while (1)
  {
    uint64_t v3 = *(void *)v3;
    if (!v3) {
      break;
    }
    uint64_t result = (id *)(*(uint64_t (**)(void, uint64_t))(v3 + 16))(*(void *)(v3 + 8), a2);
  }
  return result;
}

void VCAudioPowerSpectrumSource_RegisterAudioPowerSpectrumSink(CMSimpleQueueRef *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a2 && a1 && a3 && a5)
  {
    uint64_t v10 = (id *)malloc_type_calloc(1uLL, 0x30uLL, 0x10A00401D15B2DDuLL);
    __int16 v18 = v10;
    v10[1] = a2;
    v10[2] = a5;
    v10[3] = a3;
    *((_DWORD *)v10 + _Block_object_dispose(&STACK[0x250], 8) = 1;
    void v10[5] = a4;
    OSStatus v11 = CMSimpleQueueEnqueue(a1[4], v10);
    if (v11)
    {
      OSStatus v12 = v11;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        uint64_t v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          CMSimpleQueueRef v17 = a1[4];
          *(_DWORD *)CMTime buf = 136316930;
          uint64_t v20 = v13;
          __int16 v21 = 2080;
          __int16 v22 = "VCAudioPowerSpectrumSource_RegisterAudioPowerSpectrumSink";
          __int16 v23 = 1024;
          int v24 = 170;
          __int16 v25 = 2048;
          uint64_t v26 = v10;
          __int16 v27 = 2048;
          int v28 = a1;
          __int16 v29 = 2048;
          uint64_t v30 = a2;
          __int16 v31 = 2048;
          CMSimpleQueueRef v32 = v17;
          __int16 v33 = 1024;
          OSStatus v34 = v12;
          _os_log_error_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to enqueue cient=%p realtimeContext=%p clientContext=%p queue=%p status=%d", buf, 0x4Au);
        }
      }
      VCAudioPowerSpectrumSource_FreeClient(&v18);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v15 = VRTraceErrorLogLevelToCSTR();
    uint64_t v16 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v20 = v15;
      __int16 v21 = 2080;
      __int16 v22 = "VCAudioPowerSpectrumSource_RegisterAudioPowerSpectrumSink";
      __int16 v23 = 1024;
      int v24 = 156;
      __int16 v25 = 2048;
      uint64_t v26 = (id *)a1;
      __int16 v27 = 2048;
      int v28 = (CMSimpleQueueRef *)a2;
      __int16 v29 = 2048;
      uint64_t v30 = a5;
      __int16 v31 = 2048;
      CMSimpleQueueRef v32 = (CMSimpleQueueRef)a3;
      _os_log_error_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid client registration. RealtimeContext[%p] clientContext[%p] callback[%p] sinkObject[%p]", buf, 0x44u);
    }
  }
}

void VCAudioPowerSpectrumSource_UnregisterAudioPowerSpectrumSink(CMSimpleQueueRef *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    BOOL v4 = (id *)malloc_type_calloc(1uLL, 0x30uLL, 0x10A00401D15B2DDuLL);
    OSStatus v12 = v4;
    v4[1] = a2;
    v4[3] = 0;
    *((_DWORD *)v4 + _Block_object_dispose(&STACK[0x250], 8) = 2;
    OSStatus v5 = CMSimpleQueueEnqueue(a1[4], v4);
    if (v5)
    {
      OSStatus v6 = v5;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        uint64_t v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          CMSimpleQueueRef v11 = a1[4];
          *(_DWORD *)CMTime buf = 136316930;
          uint64_t v14 = v7;
          __int16 v15 = 2080;
          uint64_t v16 = "VCAudioPowerSpectrumSource_UnregisterAudioPowerSpectrumSink";
          __int16 v17 = 1024;
          int v18 = 188;
          __int16 v19 = 2048;
          uint64_t v20 = v4;
          __int16 v21 = 2048;
          __int16 v22 = a1;
          __int16 v23 = 2048;
          int v24 = a2;
          __int16 v25 = 2048;
          CMSimpleQueueRef v26 = v11;
          __int16 v27 = 1024;
          OSStatus v28 = v6;
          _os_log_error_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to enqueue client=%p realtimeContext=%p clientContext=%p queue=%p status=%d", buf, 0x4Au);
        }
      }
      VCAudioPowerSpectrumSource_FreeClient(&v12);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v14 = v9;
      __int16 v15 = 2080;
      uint64_t v16 = "VCAudioPowerSpectrumSource_UnregisterAudioPowerSpectrumSink";
      __int16 v17 = 1024;
      int v18 = 178;
      __int16 v19 = 2048;
      uint64_t v20 = (id *)a1;
      __int16 v21 = 2048;
      __int16 v22 = (CMSimpleQueueRef *)a2;
      _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid client unregistration: RealtimeContext[%p] clientContext[%p]", buf, 0x30u);
    }
  }
}

void sub_1E1F25B30(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x1080C400355024FLL);
  _Unwind_Resume(a1);
}

void sub_1E1F25C08(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x1080C400355024FLL);
  _Unwind_Resume(a1);
}

CFDictionaryRef VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray(const void *a1)
{
  if (!a1 || (CFTypeID TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray_cold_1();
      }
    }
    return 0;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
  if (Count < 1)
  {
LABEL_9:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray_cold_2();
      }
    }
    return 0;
  }
  CFIndex v4 = Count;
  CFIndex v5 = 0;
  OSStatus v6 = (const void *)*MEMORY[0x1E4F76888];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a1, v5);
    if (ValueAtIndex)
    {
      CFDictionaryRef v8 = ValueAtIndex;
      CFTypeID v9 = CFDictionaryGetTypeID();
      if (v9 == CFGetTypeID(v8))
      {
        CFDictionaryGetValue(v8, v6);
        if (FigCFEqual()) {
          return v8;
        }
      }
    }
    if (v4 == ++v5) {
      goto LABEL_9;
    }
  }
}

BOOL VCMicrophonePreferencesCMS_GetDataSourcesFromPortDictionary(const void *a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!a1 || (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 0;
    }
    VRTraceErrorLogLevelToCSTR();
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (result)
    {
      VCMicrophonePreferencesCMS_GetDataSourcesFromPortDictionary_cold_1();
      return 0;
    }
    return result;
  }
  if (!a2 || !a3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 0;
    }
    uint64_t v21 = VRTraceErrorLogLevelToCSTR();
    __int16 v22 = *MEMORY[0x1E4F47A50];
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (result)
    {
      int valuePtr = 136316162;
      uint64_t v28 = v21;
      __int16 v29 = 2080;
      uint64_t v30 = "VCMicrophonePreferencesCMS_GetDataSourcesFromPortDictionary";
      __int16 v31 = 1024;
      int v32 = 48;
      __int16 v33 = 2048;
      OSStatus v34 = a2;
      __int16 v35 = 2048;
      uint64_t v36 = a3;
      _os_log_error_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_ERROR, " [%s] %s:%d frontDataSource(%p) or backDataSource(%p) == NULL", (uint8_t *)&valuePtr, 0x30u);
      return 0;
    }
    return result;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E4F76840]);
  if (!Value)
  {
    OSStatus v12 = 0;
    goto LABEL_32;
  }
  CFTypeID v8 = CFArrayGetTypeID();
  if (v8 != CFGetTypeID(Value) || (CFIndex Count = CFArrayGetCount((CFArrayRef)Value), Count < 1))
  {
    OSStatus v12 = 0;
    Value = 0;
    goto LABEL_32;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  OSStatus v12 = 0;
  CMSimpleQueueRef v26 = 0;
  uint64_t v13 = (const void *)*MEMORY[0x1E4F76798];
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v11);
    if (!ValueAtIndex) {
      goto LABEL_20;
    }
    __int16 v15 = ValueAtIndex;
    CFTypeID v16 = CFDictionaryGetTypeID();
    if (v16 != CFGetTypeID(v15)) {
      goto LABEL_20;
    }
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v15, v13);
    if (!v17) {
      goto LABEL_20;
    }
    CFNumberRef v18 = v17;
    CFTypeID v19 = CFGetTypeID(v17);
    if (v19 != CFNumberGetTypeID()) {
      goto LABEL_20;
    }
    int valuePtr = 0;
    CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr == 1718775412)
    {
      CMSimpleQueueRef v26 = v15;
      if (!v12) {
        goto LABEL_20;
      }
    }
    else
    {
      if (valuePtr == 1650549611) {
        OSStatus v12 = v15;
      }
      if (!v12) {
        goto LABEL_20;
      }
    }
    if (v26) {
      break;
    }
LABEL_20:
    ++v11;
  }
  while (v10 != v11);
  Value = v26;
  if (v26 && v12)
  {
    *a2 = v26;
    *a3 = v12;
    return 1;
  }
LABEL_32:
  if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
    return 0;
  }
  uint64_t v23 = VRTraceErrorLogLevelToCSTR();
  int v24 = *MEMORY[0x1E4F47A50];
  BOOL v25 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v25)
  {
    int valuePtr = 136316162;
    uint64_t v28 = v23;
    __int16 v29 = 2080;
    uint64_t v30 = "VCMicrophonePreferencesCMS_GetDataSourcesFromPortDictionary";
    __int16 v31 = 1024;
    int v32 = 79;
    __int16 v33 = 2048;
    OSStatus v34 = Value;
    __int16 v35 = 2048;
    uint64_t v36 = v12;
    _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Did not find both orientations: front = %p, back = %p", (uint8_t *)&valuePtr, 0x30u);
    return 0;
  }
  return result;
}

__CFDictionary *VCMicrophonePreferencesCMS_CreateSelectedInputDictWithPolarPattern(const __CFDictionary *a1, CFTypeRef cf)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1 && cf)
  {
    int v19 = 0;
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFDictionaryGetTypeID()
      && (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F767A0])) != 0
      && (CFArrayRef v6 = Value, v7 = CFGetTypeID(Value), v7 == CFArrayGetTypeID())
      && (CFIndex Count = CFArrayGetCount(v6), Count >= 1))
    {
      CFIndex v9 = Count;
      CFIndex v10 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v10);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &v19);
        if (v19 != 1869442665) {
          break;
        }
        if (v9 == ++v10) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCMicrophonePreferencesCMS_CreateSelectedInputDictWithPolarPattern_cold_1();
        }
      }
      CFNumberRef ValueAtIndex = 0;
    }
    OSStatus v12 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F76858]);
    uint64_t v13 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F76790]);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v15 = Mutable;
    if (v12) {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F768D8], v12);
    }
    if (v13) {
      CFDictionaryAddValue(v15, (const void *)*MEMORY[0x1E4F768C8], v13);
    }
    if (ValueAtIndex) {
      CFDictionaryAddValue(v15, (const void *)*MEMORY[0x1E4F768D0], ValueAtIndex);
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      CFNumberRef v17 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v19 = 136316162;
        uint64_t v20 = v16;
        __int16 v21 = 2080;
        __int16 v22 = "VCMicrophonePreferencesCMS_CreateSelectedInputDictWithPolarPattern";
        __int16 v23 = 1024;
        int v24 = 112;
        __int16 v25 = 2048;
        CFDictionaryRef v26 = a1;
        __int16 v27 = 2048;
        CFTypeRef v28 = cf;
        _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, " [%s] %s:%d inPortDictionary(%p) or inSourceDict(%p) == NULL", (uint8_t *)&v19, 0x30u);
      }
    }
    return 0;
  }
  return v15;
}

void VCMicrophonePreferencesCMS_ApplyMicrophonePreferences(int a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, theDict);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v2, 1, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(Mutable, MutableCopy);
    CFIndex v5 = (const void *)*MEMORY[0x1E4F768D0];
    if (CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x1E4F768D0]))
    {
      if (CMSessionSetProperty())
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCMicrophonePreferencesCMS_ApplyMicrophonePreferences_cold_3();
          }
        }
      }
      CFDictionaryRemoveValue(MutableCopy, v5);
    }
    if (CMSessionSetProperty() && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMicrophonePreferencesCMS_ApplyMicrophonePreferences_cold_2();
      }
    }
    CFRelease(MutableCopy);
    CFRelease(Mutable);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMicrophonePreferencesCMS_ApplyMicrophonePreferences_cold_1();
    }
  }
}

void OUTLINED_FUNCTION_4_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x2Cu);
}

double GKSConnectivitySettings_GetICETimeout()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  objc_msgSend(+[GKSConnectivitySettings getClientOption:](GKSConnectivitySettings, "getClientOption:", @"gk-p2p-ice-timeout"), "doubleValue");
  double v2 = v1;
  [v0 drain];
  return v2;
}

double GKSConnectivitySettings_GetNoRemotePacketsTimeout()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  objc_msgSend(+[GKSConnectivitySettings getClientOption:](GKSConnectivitySettings, "getClientOption:", @"gk-p2p-remote-packets-timeout"), "doubleValue");
  double v2 = v1;
  [v0 drain];
  return v2;
}

double GKSConnectivitySettings_GetNetworkConditionsTimeout()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  objc_msgSend(+[GKSConnectivitySettings getClientOption:](GKSConnectivitySettings, "getClientOption:", @"gk-p2p-network-conditions-timeout"), "doubleValue");
  double v2 = v1;
  [v0 drain];
  return v2;
}

double GKSConnectivitySettings_GetMinQueueSizeOverride5G()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  objc_msgSend(+[GKSConnectivitySettings getClientOption:](GKSConnectivitySettings, "getClientOption:", @"gk-min-jitter-queue-size-5g"), "doubleValue");
  double v2 = v1;
  [v0 drain];
  return v2;
}

double _VCRedundancyControlAlgorithmVideo_ApplyEnveloppe(double *a1, double a2)
{
  double result = *a1 * (1.0 - dbl_1E259C0C0[*a1 < a2]) + a2 * dbl_1E259C0C0[*a1 < a2];
  *a1 = result;
  return result;
}

uint64_t _VCRedundancyControlAlgorithmVideo_GetRedundancyLevelFromPLR(double a1)
{
  if (a1 < 0.05) {
    return 0;
  }
  if (a1 < 2.0) {
    return 25;
  }
  if (a1 < 5.0) {
    return 50;
  }
  if (a1 >= 30.0) {
    unsigned int v2 = 300;
  }
  else {
    unsigned int v2 = 200;
  }
  if (a1 >= 20.0) {
    return v2;
  }
  else {
    return 100;
  }
}

uint64_t _VCScreenCaptureVirtualDisplay_conduitPushFrame(uint64_t result)
{
  double v1 = *(uint64_t (**)(void))(result + 192);
  if (v1) {
    return v1(*(void *)(result + 184));
  }
  return result;
}

uint64_t _VCScreenCaptureVirtualDisplay_conduitClearScreen(void *a1, const char *a2)
{
  return [a1 shouldClearScreen:1];
}

void _VCAudioStreamGroup_ApplyAudioPlayoutDelay(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(void **)(a1 + 176);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    CFIndex v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 384);
      CFTypeID v7 = FourccToCStr(*(_DWORD *)(a1 + 312));
      int v8 = 136316674;
      uint64_t v9 = v4;
      __int16 v10 = 2080;
      CFIndex v11 = "_VCAudioStreamGroup_ApplyAudioPlayoutDelay";
      __int16 v12 = 1024;
      int v13 = 707;
      __int16 v14 = 2048;
      uint64_t v15 = v6;
      __int16 v16 = 2048;
      uint64_t v17 = a1;
      __int16 v18 = 2080;
      int v19 = v7;
      __int16 v20 = 1024;
      BOOL v21 = v2 != 0;
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Apply audioPlayoutDelay=%f on streamGroup=%p streamGroupID=%s streamsConfigured=%d", (uint8_t *)&v8, 0x40u);
    }
  }
  for (; v2; unsigned int v2 = (void *)*v2)
    VCAudioStream_SetAudioPlayoutDelay(v2[5], *(double *)(a1 + 384), v3);
}

id *VCAudioStreamGroup_ProcessAudioSamples(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void **)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 344));
  if (v4)
  {
    CFIndex v5 = v4;
    do
    {
      int v6 = *(_DWORD *)v5;
      if (*(_DWORD *)v5 == 1)
      {
        _VCAudioStreamGroup_AddSyncDestination(a1, v5[1]);
        int v6 = *(_DWORD *)v5;
      }
      if (v6 == 2) {
        _VCAudioStreamGroup_RemoveSyncDestination(a1, (uint64_t)v5[1]);
      }
      VCMemoryPool_Free(*(OSQueueHead **)(a1 + 352), v5);
      CFIndex v5 = (const void **)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 344));
    }
    while (v5);
  }
  ++*(_DWORD *)(a1 + 340);
  double result = (id *)(*(uint64_t (**)(void, uint64_t))(a1 + 320))(*(void *)(a1 + 304), a2);
  if (*(unsigned char *)(a1 + 336))
  {
    int v8 = *(id **)(a1 + 328);
    return VCAudioPowerSpectrumSource_PushAudioSamples(v8, a2);
  }
  return result;
}

BOOL _VCAudioStreamGroup_AddSyncDestination(uint64_t a1, const void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(const void ***)(a1 + 192);
  if (v4)
  {
    while (*v4 != a2)
    {
      uint64_t v4 = (const void **)v4[2];
      if (!v4) {
        goto LABEL_4;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
      return 1;
    }
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    uint64_t v17 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    int v18 = 136316162;
    uint64_t v19 = v16;
    __int16 v20 = 2080;
    BOOL v21 = "_VCAudioStreamGroup_AddSyncDestination";
    __int16 v22 = 1024;
    int v23 = 732;
    __int16 v24 = 2048;
    __int16 v25 = a2;
    __int16 v26 = 2048;
    uint64_t v27 = a1;
    __int16 v12 = " [%s] %s:%d syncDestination[%p] is already in the list for streamGroup[%p]";
    int v13 = v17;
    uint32_t v14 = 48;
    goto LABEL_11;
  }
LABEL_4:
  CFIndex v5 = (const void **)malloc_type_calloc(1uLL, 0x18uLL, 0x10A0040319E9F20uLL);
  if (v5)
  {
    int v6 = v5;
    *((double *)v5 + 1) = VCMediaStreamGroup_ExternalRenderLatency((uint64_t)a2);
    if (a2) {
      CFTypeRef v7 = CFRetain(a2);
    }
    else {
      CFTypeRef v7 = 0;
    }
    *int v6 = v7;
    v6[2] = *(const void **)(a1 + 192);
    *(void *)(a1 + 192) = v6;
    _VCAudioStreamGroup_ComputeAndApplyAudioPlayoutDelay(a1);
    if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
      return 1;
    }
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    uint64_t v9 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    __int16 v10 = *v6;
    CFIndex v11 = v6[1];
    int v18 = 136316418;
    uint64_t v19 = v8;
    __int16 v20 = 2080;
    BOOL v21 = "_VCAudioStreamGroup_AddSyncDestination";
    __int16 v22 = 1024;
    int v23 = 742;
    __int16 v24 = 2048;
    __int16 v25 = v10;
    __int16 v26 = 2048;
    uint64_t v27 = a1;
    __int16 v28 = 2048;
    uint64_t v29 = v11;
    __int16 v12 = " [%s] %s:%d Added syncDestination[%p] from list, on streamGroup[%p]. externalRenderLatency=%f";
    int v13 = v9;
    uint32_t v14 = 58;
LABEL_11:
    _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v18, v14);
    return 1;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  VRTraceErrorLogLevelToCSTR();
  BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    _VCAudioStreamGroup_AddSyncDestination_cold_1();
    return 0;
  }
  return result;
}

uint64_t _VCAudioStreamGroup_RemoveSyncDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (void *)(a1 + 192);
  double v3 = *(uint64_t **)(a1 + 192);
  if (!v3) {
    return 0;
  }
  CFIndex v5 = *(uint64_t **)(a1 + 192);
  while (*v5 != a2)
  {
    CFIndex v5 = (uint64_t *)v5[2];
    if (!v5) {
      return 0;
    }
  }
  if (v3 != v5)
  {
    do
    {
      CFTypeRef v7 = v3;
      double v3 = (uint64_t *)v3[2];
    }
    while (v3 != v5);
    unsigned int v2 = v7 + 2;
    double v3 = v5;
  }
  *unsigned int v2 = v3[2];
  _VCAudioStreamGroup_ComputeAndApplyAudioPlayoutDelay(a1);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    uint64_t v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      CFTypeRef v10 = (CFTypeRef)*v5;
      int v11 = 136316162;
      uint64_t v12 = v8;
      __int16 v13 = 2080;
      uint32_t v14 = "_VCAudioStreamGroup_RemoveSyncDestination";
      __int16 v15 = 1024;
      int v16 = 756;
      __int16 v17 = 2048;
      CFTypeRef v18 = v10;
      __int16 v19 = 2048;
      uint64_t v20 = a1;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Removed syncDestination[%p] from list, on streamGroup[%p]", (uint8_t *)&v11, 0x30u);
    }
  }
  if (*v5)
  {
    CFRelease((CFTypeRef)*v5);
    *CFIndex v5 = 0;
  }
  free(v5);
  return 1;
}

uint64_t VCAudioStreamGroup_OverlayToken(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  if (v1)
  {
    unsigned int v3 = 0;
    while (1)
    {
      uint64_t v4 = *(void *)(v1 + 16);
      id v5 = *(id *)v1;
      int v6 = *(_DWORD *)(a1 + 312);
      if (v6 == 1835623282)
      {
        if ([*(id *)v1 streamGroupID] == 1667329381) {
          return [*(id *)v1 streamToken];
        }
        int v6 = *(_DWORD *)(a1 + 312);
      }
      if (v6 == 1835623287)
      {
        if ([v5 streamGroupID] == 1667329399) {
          return [*(id *)v1 streamToken];
        }
        int v6 = *(_DWORD *)(a1 + 312);
      }
      if (v6 == 1937339233 && [v5 streamGroupID] == 1935897189) {
        break;
      }
      if (!v3) {
        unsigned int v3 = [*(id *)v1 streamToken];
      }
      uint64_t v1 = v4;
      if (!v4) {
        return v3;
      }
    }
    return [*(id *)v1 streamToken];
  }
  else
  {
    return 0;
  }
}

void _VCAudioStreamGroup_ComputeAndApplyAudioPlayoutDelay(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 192);
  if (v1)
  {
    double v2 = 0.0;
    do
    {
      if (v2 < *(double *)(v1 + 8)) {
        double v2 = *(double *)(v1 + 8);
      }
      uint64_t v1 = *(void *)(v1 + 16);
    }
    while (v1);
  }
  else
  {
    double v2 = 0.0;
  }
  if (*(double *)(a1 + 384) != v2)
  {
    *(double *)(a1 + 384) = v2;
    _VCAudioStreamGroup_ApplyAudioPlayoutDelay(a1);
  }
}

void OUTLINED_FUNCTION_4_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x30u);
}

void DynamicStoreCallbackForWifiChanges(const __SCDynamicStore *a1, CFArrayRef theArray, void *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v3 = a3;
    if (a3)
    {
      if (CFArrayGetCount(theArray) < 1) {
        return;
      }
      CFIndex v6 = 0;
      char v29 = 0;
      __int16 v28 = v3;
      while (1)
      {
        CFNumberRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(theArray, v6);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v8 = VRTraceErrorLogLevelToCSTR();
          uint64_t v9 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            CStringPtr = CFStringGetCStringPtr(ValueAtIndex, 0x8000100u);
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v31 = v8;
            __int16 v32 = 2080;
            __int16 v33 = "DynamicStoreCallbackForWifiChanges";
            __int16 v34 = 1024;
            int v35 = 98;
            __int16 v36 = 1024;
            *(_DWORD *)uint64_t v37 = v6;
            *(_WORD *)&v37[4] = 2080;
            *(void *)&v37[6] = CStringPtr;
            _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d DynamicStoreCallbackForWifiChanges: key[%d]=%s", buf, 0x2Cu);
          }
        }
        CFPropertyListRef v11 = SCDynamicStoreCopyValue(a1, ValueAtIndex);
        uint64_t v12 = (void *)v11;
        if (!ValueAtIndex) {
          break;
        }
        __int16 v13 = (void *)MEMORY[0x1E4E589F0]();
        uint32_t v14 = (void *)[(__CFString *)ValueAtIndex componentsSeparatedByString:@"/"];
        if ((unint64_t)[v14 count] >= 2
          && objc_msgSend((id)objc_msgSend(v14, "lastObject"), "isEqualToString:", @"LinkIssues"))
        {
          __int16 v15 = objc_msgSend(v14, "objectAtIndexedSubscript:", objc_msgSend(v14, "count") - 2);
          int v16 = (void *)[v12 objectForKeyedSubscript:@"TimeStamp"];
          uint64_t v27 = (void *)[v12 objectForKeyedSubscript:@"ModuleID"];
          uint64_t v17 = [v12 objectForKeyedSubscript:@"Info"];
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            __int16 v26 = (void *)v17;
            uint64_t v18 = VRTraceErrorLogLevelToCSTR();
            __int16 v19 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              uint64_t v21 = "<nil>";
              if (v15) {
                uint64_t v21 = (const char *)objc_msgSend((id)objc_msgSend(v15, "description"), "UTF8String");
              }
              __int16 v25 = v21;
              __int16 v22 = "<nil>";
              if (v16) {
                __int16 v22 = (const char *)objc_msgSend((id)objc_msgSend(v16, "description"), "UTF8String");
              }
              int v23 = "<nil>";
              if (v27) {
                int v23 = (const char *)objc_msgSend((id)objc_msgSend(v27, "description"), "UTF8String");
              }
              __int16 v24 = "<nil>";
              if (v26) {
                __int16 v24 = (const char *)objc_msgSend((id)objc_msgSend(v26, "description"), "UTF8String");
              }
              *(_DWORD *)CMTime buf = 136317442;
              uint64_t v31 = v18;
              __int16 v32 = 2080;
              __int16 v33 = "checkForLinkIssues";
              __int16 v34 = 1024;
              int v35 = 63;
              __int16 v36 = 2080;
              *(void *)uint64_t v37 = v25;
              *(_WORD *)&v37[8] = 2080;
              *(void *)&v37[10] = "TimeStamp";
              __int16 v38 = 2080;
              __int16 v39 = v22;
              __int16 v40 = 2080;
              uint64_t v41 = "ModuleID";
              __int16 v42 = 2080;
              uint64_t v43 = v23;
              __int16 v44 = 2080;
              uint64_t v45 = "Info";
              __int16 v46 = 2080;
              unint64_t v47 = v24;
              _os_log_error_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_ERROR, " [%s] %s:%d Link issues with interface %s \n %s=%s \n %s=%s \n %s=%s", buf, 0x62u);
            }
          }
          char v20 = 1;
          unsigned int v3 = v28;
        }
        else
        {
          char v20 = 0;
        }
        if (v12) {
          goto LABEL_16;
        }
LABEL_17:
        if ((v20 & 1) != 0
          || !CFStringHasSuffix(ValueAtIndex, @"/IPv4") && !CFStringHasSuffix(ValueAtIndex, @"/IPv6"))
        {
          goto LABEL_27;
        }
        if (CFStringHasPrefix(ValueAtIndex, @"State:/Network/Interface/pdp_ip"))
        {
          objc_msgSend(v3, "set_isCellUp:", v12 != 0);
LABEL_26:
          char v29 = 1;
          goto LABEL_27;
        }
        if (CFStringHasPrefix(ValueAtIndex, @"State:/Network/Interface/"))
        {
          objc_msgSend(v3, "set_isWifiUp:", v12 != 0);
          goto LABEL_26;
        }
LABEL_27:
        if (CFArrayGetCount(theArray) <= ++v6)
        {
          if (v29) {
            objc_msgSend((id)objc_msgSend(v3, "interfaceListenerDelegate"), "interfaceStateDidChangeWithWifiUp:cellUp:", objc_msgSend(v3, "_isWifiUp"), objc_msgSend(v3, "_isCellUp"));
          }
          return;
        }
      }
      char v20 = 0;
      if (!v11) {
        goto LABEL_17;
      }
LABEL_16:
      CFRelease(v12);
      goto LABEL_17;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      DynamicStoreCallbackForWifiChanges_cold_1();
    }
  }
}

BOOL VCMediaNegotiationBlobBandwidthSettingsReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    CFTypeRef v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v2_Block_object_dispose(&STACK[0x250], 8) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            __int16 v25 = &OBJC_IVAR___VCMediaNegotiationBlobBandwidthSettings__configuration;
            goto LABEL_48;
          }
          v26 += 7;
          BOOL v24 = v27++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            __int16 v25 = &OBJC_IVAR___VCMediaNegotiationBlobBandwidthSettings__configuration;
            goto LABEL_50;
          }
        }
        __int16 v25 = &OBJC_IVAR___VCMediaNegotiationBlobBandwidthSettings__configuration;
LABEL_47:
        *(unsigned char *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if (v17 == 3) {
        break;
      }
      if (v17 == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            __int16 v25 = &OBJC_IVAR___VCMediaNegotiationBlobBandwidthSettings__maxBandwidth;
            goto LABEL_47;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            break;
          }
          v18 += 7;
          BOOL v24 = v19++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            __int16 v25 = &OBJC_IVAR___VCMediaNegotiationBlobBandwidthSettings__maxBandwidth;
            goto LABEL_50;
          }
        }
        __int16 v25 = &OBJC_IVAR___VCMediaNegotiationBlobBandwidthSettings__maxBandwidth;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_51:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v31 = 0;
    unsigned int v32 = 0;
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 20) |= 1u;
    while (1)
    {
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
      {
        __int16 v25 = &OBJC_IVAR___VCMediaNegotiationBlobBandwidthSettings__configurationExtension;
        goto LABEL_47;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
      *(void *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v31 += 7;
      BOOL v24 = v32++ > 8;
      if (v24)
      {
        LODWORD(v20) = 0;
        __int16 v25 = &OBJC_IVAR___VCMediaNegotiationBlobBandwidthSettings__configurationExtension;
        goto LABEL_50;
      }
    }
    __int16 v25 = &OBJC_IVAR___VCMediaNegotiationBlobBandwidthSettings__configurationExtension;
LABEL_48:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v20) = 0;
    }
LABEL_50:
    *(_DWORD *)(a1 + *v25) = v20;
    goto LABEL_51;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL VCRateControlUtil_CalculateCongestionMetrics(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      char v18 = *MEMORY[0x1E4F47A50];
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      int v19 = 136316162;
      uint64_t v20 = v17;
      __int16 v21 = 2080;
      unint64_t v22 = "VCRateControlUtil_CalculateCongestionMetrics";
      __int16 v23 = 1024;
      int v24 = 19;
      __int16 v25 = 2048;
      uint64_t v26 = a1;
      __int16 v27 = 2048;
      uint64_t v28 = a2;
      _os_log_error_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter. owrdList=%p config=%p", (uint8_t *)&v19, 0x30u);
    }
    return 0;
  }
  if (a4 >= 8.0) {
    return 0;
  }
  signed int v8 = *(_DWORD *)(a1 + 1604);
  if (a4 > 0.0 && a5 - *(double *)(a1 + 8 * v8) < *(double *)(a2 + 288)) {
    return 0;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 304);
  unsigned int v10 = *(_DWORD *)(a1 + 1608);
  if (v10)
  {
    signed int v8 = (v8 + 1) % v9;
    *(_DWORD *)(a1 + 1604) = v8;
  }
  uint64_t v11 = (double *)(a1 + 8 * v8);
  v11[100] = a4;
  *uint64_t v11 = a5;
  if (v10 < v9) {
    ++v10;
  }
  *(_DWORD *)(a1 + 160_Block_object_dispose(&STACK[0x250], 8) = v10;
  if (v8 == *(_DWORD *)(a1 + 1600) && v10 != 1) {
    *(_DWORD *)(a1 + 1600) = (v8 + 1) % v9;
  }
  unsigned int v12 = *(_DWORD *)(a2 + 308);
  if (v10 < v12) {
    return 0;
  }
  _VCRateControlUtil_CalculateNOWRDDetailed(a1, v9, v12, a3, *(double *)(a2 + 272), *(double *)(a2 + 296));
  *(void *)(a1 + 1616) = v13;
  _VCRateControlUtil_CalculateNOWRDDetailed(a1, *(_DWORD *)(a2 + 304), *(_DWORD *)(a2 + 308), a3, *(double *)(a2 + 280), *(double *)(a2 + 296));
  *(void *)(a1 + 1624) = v14;
  double v15 = *(double *)(a1 + 1632)
      + *(double *)(a1 + 1616)
      * (*(double *)(a1 + 8 * *(int *)(a1 + 1604))
       - *(double *)(a1
                   + 8
                   * (int)((*(_DWORD *)(a1 + 1604) + *(_DWORD *)(a2 + 304) - 1) % *(_DWORD *)(a2 + 304))))
      / *(double *)(a2 + 272);
  if (v15 < 0.0) {
    double v15 = 0.0;
  }
  *(double *)(a1 + 1632) = v15;
  return 1;
}

void _VCRateControlUtil_CalculateNOWRDDetailed(uint64_t a1, unsigned int a2, int a3, int a4, double a5, double a6)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v11 = *(_DWORD *)(a1 + 1604);
  unsigned int v12 = *(_DWORD *)(a1 + 1600);
  signed int v13 = (v11 - a3 + a2 + 1) % a2;
  if (v13 == v12)
  {
LABEL_8:
    if (!a4) {
      goto LABEL_15;
    }
  }
  else
  {
    int v14 = 0;
    while (1)
    {
      if (*(double *)(a1 + 8 * v11) - *(double *)(a1 + 8 * v13) > a5)
      {
        unsigned int v12 = v13;
        goto LABEL_8;
      }
      int v15 = (unsigned __int16)++v14;
      if ((unsigned __int16)v14 > a2) {
        break;
      }
      signed int v13 = (v13 + a2 - 1) % a2;
      if (v13 == v12) {
        goto LABEL_8;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      uint64_t v17 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(_DWORD *)(a1 + 1600);
        uint64_t v19 = *(int *)(a1 + 1604);
        uint64_t v20 = *(void *)(a1 + 8 * v13);
        uint64_t v21 = *(void *)(a1 + 8 * v19);
        int v36 = 136317442;
        uint64_t v37 = v16;
        __int16 v38 = 2080;
        __int16 v39 = "_VCRateControlUtil_CalculateNOWRDDetailed";
        __int16 v40 = 1024;
        int v41 = 86;
        __int16 v42 = 1024;
        int v43 = v15;
        __int16 v44 = 1024;
        signed int v45 = v13;
        __int16 v46 = 1024;
        int v47 = v18;
        __int16 v48 = 1024;
        int v49 = v19;
        __int16 v50 = 2048;
        uint64_t v51 = v20;
        __int16 v52 = 2048;
        uint64_t v53 = v21;
        __int16 v54 = 2048;
        double v55 = a5;
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d calculateNOWRDWithDuration exceeded max possible iterations iterationCount=%d first=%d frontIndex=%d rearIndex=%d time@first=%f time@rearIndex=%f  duration=%f", (uint8_t *)&v36, 0x52u);
      }
    }
    unsigned int v12 = *(_DWORD *)(a1 + 1600);
    int v11 = *(_DWORD *)(a1 + 1604);
    if (!a4) {
      goto LABEL_15;
    }
  }
  if (*(double *)(a1 + 8 * v11) - *(double *)(a1 + 8 * (int)v12) < a6)
  {
    *(unsigned char *)(a1 + 1640) = 1;
    return;
  }
LABEL_15:
  BOOL v22 = __OFSUB__(v11, v12);
  int v23 = v11 - v12;
  if ((v23 < 0) ^ v22 | (v23 == 0)) {
    unsigned int v24 = a2;
  }
  else {
    unsigned int v24 = 0;
  }
  unsigned int v25 = v23 + v24;
  unsigned int v26 = v25 + 2;
  if ((int)(v25 + 1) >= 0) {
    int v27 = v25 + 1;
  }
  else {
    int v27 = v25 + 2;
  }
  if (v25 <= 0x7FFFFFFD)
  {
    int v28 = 0;
    unsigned int v29 = (v12 + (v27 >> 1)) % a2;
    unsigned int v30 = v26 >> 1;
    double v31 = 0.0;
    double v32 = 0.0;
    double v33 = 0.0;
    double v34 = 0.0;
    do
    {
      double v34 = v34 + *(double *)(a1 + 800 + 8 * (v12 % a2));
      unsigned int v35 = (v28 + v29) % a2;
      double v33 = v33 + *(double *)(a1 + 800 + 8 * v35);
      double v32 = v32 + *(double *)(a1 + 8 * (v12 % a2));
      double v31 = v31 + *(double *)(a1 + 8 * v35);
      ++v28;
      ++v12;
      --v30;
    }
    while (v30);
  }
  *(unsigned char *)(a1 + 1640) = 0;
}

const void *VCMediaRecorderHistory_GetFigFormat(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t SampleFormat = (_OWORD *)VCAudioBufferList_GetSampleFormat(a2);
  CFIndex v6 = SampleFormat;
  uint64_t v7 = 224;
  if (a3) {
    uint64_t v7 = 176;
  }
  uint64_t v8 = a1 + v7;
  unsigned int v9 = *(const void **)(a1 + v7);
  if (!v9) {
    goto LABEL_6;
  }
  if (memcmp(SampleFormat, (const void *)(v8 + 8), 0x28uLL))
  {
    CFRelease(v9);
    *(void *)uint64_t v8 = 0;
LABEL_6:
    long long v10 = *v6;
    long long v11 = v6[1];
    *(void *)(v8 + 40) = *((void *)v6 + 4);
    *(_OWORD *)(v8 + 24) = v11;
    *(_OWORD *)(v8 + _Block_object_dispose(&STACK[0x250], 8) = v10;
    CMAudioFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const AudioStreamBasicDescription *)v6, 0, 0, 0, 0, 0, (CMAudioFormatDescriptionRef *)v8);
    return *(const void **)v8;
  }
  return v9;
}

void VCMediaRecorderHistory_AddAudioSampleBuffer(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      char v5 = a4;
      FigFormat = (const opaqueCMFormatDescription *)VCMediaRecorderHistory_GetFigFormat(a1, a2, a4);
      if (FigFormat)
      {
        CMSampleBufferRef SampleBufferWithFormat = VCAudioBufferList_CreateSampleBufferWithFormat(a2, FigFormat, *(const __CFAllocator **)(a1 + 168));
        if (SampleBufferWithFormat)
        {
          long long v10 = *(NSObject **)(a1 + 8);
          v11[0] = MEMORY[0x1E4F143A8];
          v11[1] = 3221225472;
          v11[2] = __VCMediaRecorderHistory_AddAudioSampleBuffer_block_invoke;
          void v11[3] = &unk_1E6DB4F10;
          char v13 = v5;
          v11[4] = a1;
          void v11[5] = SampleBufferWithFormat;
          int v12 = a3;
          dispatch_async(v10, v11);
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCMediaRecorderHistory_AddAudioSampleBuffer_cold_4();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCMediaRecorderHistory_AddAudioSampleBuffer_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaRecorderHistory_AddAudioSampleBuffer_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaRecorderHistory_AddAudioSampleBuffer_cold_1();
    }
  }
}

void VCMediaRecorderHistory_AddLocalVideoSampleBuffer(uint64_t a1, CMSampleBufferRef sbuf, char a3, int a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1 && sbuf)
  {
    if (*(unsigned char *)(a1 + 161))
    {
      CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
      *(_DWORD *)(a1 + 156) = CVPixelBufferGetWidth(ImageBuffer);
      *(_DWORD *)(a1 + 152) = CVPixelBufferGetHeight(ImageBuffer);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        long long v10 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *(_DWORD *)(a1 + 152);
          int v11 = *(_DWORD *)(a1 + 156);
          LODWORD(buf.value) = 136316162;
          *(CMTimeValue *)((char *)&buf.value + 4) = v9;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "_VCMediaRecorderHistory_UpdateCaptureSizesWithFirstFrame";
          HIWORD(buf.epoch) = 1024;
          int v32 = 1264;
          __int16 v33 = 1024;
          *(_DWORD *)double v34 = v11;
          *(_WORD *)&v34[4] = 1024;
          *(_DWORD *)&unsigned char v34[6] = v12;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d captureWidth=%d, captureHeight=%d", (uint8_t *)&buf, 0x28u);
        }
      }
      VCMediaRecorderHistory_UpdateResizeFlag(a1);
    }
    CMSampleBufferRef sampleBufferOut = 0;
    if (*(unsigned char *)(a1 + 280))
    {
      OSStatus v13 = CMSampleBufferCreateCopy(*(CFAllocatorRef *)(a1 + 272), sbuf, &sampleBufferOut);
      if (!v13)
      {
        CMTimeValue value = *MEMORY[0x1E4F1F9F8];
        uint64_t v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 8);
        CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        uint64_t v17 = CMSampleBufferGetImageBuffer(sampleBufferOut);
        _VCMediaRecorderHistory_SetVisibleRect(a1, v17);
        _VCMediaRecorderHistory_EmitSetVisibleRectSignpost(sampleBufferOut);
        CVPixelBufferRef ResizeFrame = 0;
        CMSampleBufferRef v19 = sampleBufferOut;
LABEL_15:
        int v23 = *(NSObject **)(a1 + 8);
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 3221225472;
        v27[2] = __VCMediaRecorderHistory_AddLocalVideoSampleBuffer_block_invoke;
        v27[3] = &unk_1E6DB4F38;
        v27[4] = a1;
        v27[5] = ResizeFrame;
        v27[8] = v15;
        v27[9] = epoch;
        v27[6] = v19;
        v27[7] = value;
        char v29 = a3;
        int v28 = a4;
        dispatch_async(v23, v27);
        return;
      }
      OSStatus v24 = v13;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v25 = VRTraceErrorLogLevelToCSTR();
        unsigned int v26 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.value) = 136316162;
          *(CMTimeValue *)((char *)&buf.value + 4) = v25;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "VCMediaRecorderHistory_AddLocalVideoSampleBuffer";
          HIWORD(buf.epoch) = 1024;
          int v32 = 275;
          __int16 v33 = 2048;
          *(void *)double v34 = sbuf;
          *(_WORD *)&v34[8] = 1024;
          OSStatus v35 = v24;
          _os_log_error_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to CMSampleBufferCreateCopy for sampleBuffer=%p status=%d", (uint8_t *)&buf, 0x2Cu);
        }
      }
      FigSampleBufferRelease();
    }
    else
    {
      uint64_t v20 = CMSampleBufferGetImageBuffer(sbuf);
      int Width = CVPixelBufferGetWidth(v20);
      int Height = CVPixelBufferGetHeight(v20);
      if ((VCMediaRecorderUtil_PixelBufferPoolMatchDimensions(*(__CVPixelBufferPool **)(a1 + 128), Width, Height) & 1) == 0)
      {
        CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a1 + 128));
        VCMediaRecorderUtil_SetupBufferPool(@"AVConference:MediaRecorderCopy", (CVPixelBufferPoolRef *)(a1 + 128), (double)Width, (double)Height);
      }
      CVPixelBufferRef ResizeFrame = VCMediaRecorderUtil_CreateResizeFrame(v20, *(OpaqueVTPixelTransferSession **)(a1 + 144), *(CVPixelBufferPoolRef *)(a1 + 128));
      CMSampleBufferGetPresentationTimeStamp(&buf, sbuf);
      if (ResizeFrame)
      {
        CMSampleBufferRef v19 = 0;
        CMTimeValue value = buf.value;
        CMTimeEpoch epoch = buf.epoch;
        uint64_t v15 = *(void *)&buf.timescale;
        goto LABEL_15;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCMediaRecorderHistory_AddLocalVideoSampleBuffer_cold_1();
        }
      }
    }
  }
}

void _VCMediaRecorderHistory_SetVisibleRect(uint64_t a1, __CVBuffer *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 284);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 284));
  [*(id *)(a1 + 96) ratio];
  int v6 = (int)v5;
  [*(id *)(a1 + 96) ratio];
  int v8 = (int)v7;
  os_unfair_lock_unlock(v4);
  if (v6) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    VideoUtil_SetVisibleRectAttachment(a2, 2, v6, v8);
  }
}

void _VCMediaRecorderHistory_EmitSetVisibleRectSignpost(opaqueCMSampleBuffer *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  memset(&v3, 170, sizeof(v3));
  CMSampleBufferGetPresentationTimeStamp(&v3, a1);
  if (*MEMORY[0x1E4F47A58])
  {
    os_signpost_id_t value = v3.value;
    if ((unint64_t)(v3.value - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      double v2 = *MEMORY[0x1E4F47A50];
      if (os_signpost_enabled((os_log_t)*MEMORY[0x1E4F47A50]))
      {
        *(_WORD *)CMTime buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1E1EA4000, v2, OS_SIGNPOST_EVENT, value, "VCMediaRecorderHistory_SetVisibleRect", (const char *)&unk_1E2635D2D, buf, 2u);
      }
    }
  }
}

void VCMediaRecorderHistory_PrepareVideoSampleBuffer(uint64_t a1, CMSampleBufferRef sbuf)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 && sbuf)
  {
    if (*(unsigned char *)(a1 + 280))
    {
      CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
      _VCMediaRecorderHistory_SetVisibleRect(a1, ImageBuffer);
      _VCMediaRecorderHistory_EmitSetVisibleRectSignpost(sbuf);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    int v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v7 = 136316162;
      uint64_t v8 = v5;
      __int16 v9 = 2080;
      long long v10 = "VCMediaRecorderHistory_PrepareVideoSampleBuffer";
      __int16 v11 = 1024;
      int v12 = 297;
      __int16 v13 = 2048;
      uint64_t v14 = a1;
      __int16 v15 = 2048;
      CMSampleBufferRef v16 = sbuf;
      _os_log_error_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter(s): history=%p, sampleBuffer=%p", (uint8_t *)&v7, 0x30u);
    }
  }
}

void VCMediaRecorderHistory_UpdateTargetScreenAttributes(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 284);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 284));
    uint64_t v5 = *(const void **)(a1 + 96);
    if (v5) {
      CFRelease(v5);
    }
    if (a2) {
      CFTypeRef v6 = CFRetain(a2);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(a1 + 96) = v6;
    os_unfair_lock_unlock(v4);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        [a2 ratio];
        uint64_t v10 = v9;
        [a2 ratio];
        int v12 = 136316162;
        uint64_t v13 = v7;
        __int16 v14 = 2080;
        __int16 v15 = "VCMediaRecorderHistory_UpdateTargetScreenAttributes";
        __int16 v16 = 1024;
        int v17 = 318;
        __int16 v18 = 2048;
        uint64_t v19 = v10;
        __int16 v20 = 2048;
        uint64_t v21 = v11;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d targetScreenAttributes ratio=%fx%f", (uint8_t *)&v12, 0x30u);
      }
    }
    VCMediaRecorderHistory_UpdateResizeFlag(a1);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaRecorderHistory_UpdateTargetScreenAttributes_cold_1();
    }
  }
}

void VCMediaRecorderHistory_UpdateResizeFlag(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  double v2 = (os_unfair_lock_s *)(a1 + 284);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 284));
  [*(id *)(a1 + 96) ratio];
  double v4 = v3;
  [*(id *)(a1 + 96) ratio];
  float v6 = v5;
  os_unfair_lock_unlock(v2);
  if (v6 == 0.0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaRecorderHistory_UpdateResizeFlag_cold_1();
      }
    }
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 156);
    if (v7)
    {
      int v8 = *(_DWORD *)(a1 + 152);
      if (v8)
      {
        float v9 = v4;
        float v10 = v9 / v6;
        *(unsigned char *)(a1 + 160) = vabds_f32(v10, (float)v7 / (float)v8) >= 0.0001
                            && vabds_f32(v10, (float)v8 / (float)v7) >= 0.0001;
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCMediaRecorderHistory_UpdateResizeFlag_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaRecorderHistory_UpdateResizeFlag_cold_2();
      }
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    uint64_t v11 = VRTraceErrorLogLevelToCSTR();
    int v12 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 160);
      int v14 = 136315906;
      uint64_t v15 = v11;
      __int16 v16 = 2080;
      int v17 = "VCMediaRecorderHistory_UpdateResizeFlag";
      __int16 v18 = 1024;
      int v19 = 349;
      __int16 v20 = 1024;
      int v21 = v13;
      _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Should resize frames for media recording:%d", (uint8_t *)&v14, 0x22u);
    }
  }
}

void VCMediaRecorderHistory_StopProcessingAllRequests(uint64_t a1)
{
  v2[5] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    _DWORD v2[2] = __VCMediaRecorderHistory_StopProcessingAllRequests_block_invoke;
    v2[3] = &unk_1E6DB3DC8;
    v2[4] = a1;
    dispatch_async(v1, v2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaRecorderHistory_StopProcessingAllRequests_cold_1();
    }
  }
}

void VCMediaRecorderHistory_ClearHistoryBuffer(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __VCMediaRecorderHistory_ClearHistoryBuffer_block_invoke;
    block[3] = &unk_1E6DB3DC8;
    block[4] = a1;
    dispatch_async(v1, block);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    double v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v6 = v2;
      __int16 v7 = 2080;
      int v8 = "VCMediaRecorderHistory_ClearHistoryBuffer";
      __int16 v9 = 1024;
      int v10 = 691;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", buf, 0x1Cu);
    }
  }
}

void OUTLINED_FUNCTION_10_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void VCEmulatedNetworkAlgorithm_UpdateIndexWithIntervalArray(void *a1, int *a2, double *a3, int a4, double a5)
{
  if (a1 && a2 && a3 && (int v10 = *a2, v10 < (int)[a1 count]))
  {
    if (*a3 == 0.0)
    {
      *a2 = 0;
    }
    else
    {
      double v13 = a5 - *a3;
      objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", *a2), "doubleValue");
      if (v13 <= v14) {
        return;
      }
      *a2 = (*a2 + 1) % a4;
    }
    *a3 = a5;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v11 = VRTraceErrorLogLevelToCSTR();
    int v12 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCEmulatedNetworkAlgorithm_UpdateIndexWithIntervalArray_cold_1(v11, v12);
    }
  }
}

BOOL VCMediaNegotiationBlobMomentsSettingsReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    __int16 v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__capabilities;
              goto LABEL_53;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__capabilities;
              goto LABEL_56;
            }
          }
          OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__capabilities;
          goto LABEL_54;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__supportedVideoCodecs;
              goto LABEL_53;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__supportedVideoCodecs;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__supportedVideoCodecs;
          goto LABEL_54;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__supportedImageTypes;
              goto LABEL_53;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__supportedImageTypes;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__supportedImageTypes;
          goto LABEL_54;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v19 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
        {
          OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__multiwayCapabilities;
          goto LABEL_54;
        }
        v35 += 7;
        BOOL v23 = v36++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__multiwayCapabilities;
          goto LABEL_56;
        }
      }
      OSStatus v24 = &OBJC_IVAR___VCMediaNegotiationBlobMomentsSettings__multiwayCapabilities;
LABEL_53:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_56:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _VCOverlaySourceClassRegister(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t VCOverlaySource_Create(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (VCOverlaySource_GetTypeID_initOnce != -1) {
      dispatch_once_f(&VCOverlaySource_GetTypeID_initOnce, &VCOverlaySource_GetTypeID_typeID, (dispatch_function_t)_VCOverlaySourceClassRegister);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v4 = Instance;
      double v5 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10620403D7EC478uLL);
      if (v5)
      {
        *(void *)(v4 + 4_Block_object_dispose(&STACK[0x250], 8) = v5;
        uint64_t v6 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10620403D7EC478uLL);
        if (v6)
        {
          *(void *)(v4 + 40) = v6;
          __int16 v7 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10620403D7EC478uLL);
          if (v7)
          {
            uint64_t v8 = 0;
            *(void *)(v4 + 56) = v7;
            *(void *)(v4 + 32) = 0;
            *a2 = v4;
            return v8;
          }
          free(*(void **)(v4 + 48));
          free(*(void **)(v4 + 40));
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCOverlaySource_Create_cold_5();
            }
          }
        }
        else
        {
          free(*(void **)(v4 + 48));
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCOverlaySource_Create_cold_4();
            }
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCOverlaySource_Create_cold_3();
        }
      }
      CFRelease((CFTypeRef)v4);
      return 2;
    }
    uint64_t v8 = 3;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCOverlaySource_Create_cold_2();
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCOverlaySource_Create_cold_1();
      }
    }
    return 1;
  }
  return v8;
}

uint64_t VCOverlaySource_Write(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 32) + 1;
  *(_DWORD *)(result + 32) = v1;
  uint64_t v2 = *(int **)(result + 40);
  *uint64_t v2 = v1;
  do
  {
    uint64_t v3 = *(void *)(result + 56);
    uint64_t v4 = v3;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 56), (unint64_t *)&v4, (unint64_t)v2, memory_order_relaxed, memory_order_relaxed);
  }
  while (v4 != v3);
  *(void *)(result + 40) = v3;
  return result;
}

uint64_t VCOverlaySource_Read(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 32) - *(_DWORD *)(result + 36);
  if (v1) {
    BOOL v2 = v1 > 0x7FFFFFFE;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    unint64_t v3 = *(void *)(result + 48);
    do
    {
      uint64_t v4 = *(_DWORD **)(result + 56);
      double v5 = v4;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 56), (unint64_t *)&v5, v3, memory_order_relaxed, memory_order_relaxed);
    }
    while (v5 != v4);
    *(void *)(result + 4_Block_object_dispose(&STACK[0x250], 8) = v4;
    *(_DWORD *)(result + 36) = *v4;
  }
  return result;
}

double _VCOverlaySource_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void _VCOverlaySource_Finalize(uint64_t a1)
{
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 48));
  BOOL v2 = *(void **)(a1 + 56);

  free(v2);
}

void _VCRateControlAlgorithmSparseNOWRD_Configure(uint64_t a1, const void *a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  memcpy((void *)(a1 + 40), a2, 0x3F0uLL);
  *(unsigned char *)(a1 + 1153) = 0;
  *(unsigned char *)(a1 + 5136) = 0;
  *(void *)(a1 + 4992) = 0;
  *(void *)(a1 + 5040) = *(void *)(a1 + 760);
  VCRateControlAlgorithmBasePriv_ResetLossEventBuffer(a1);
  *(_DWORD *)(a1 + 630_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(_DWORD *)(a1 + 6312) = 0;
  *(_DWORD *)(a1 + 6316) = 0;
  *(void *)(a1 + 632_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a1 + 1128);
  if (a3)
  {
    *(_DWORD *)(a1 + 1072) = 1;
    *(_DWORD *)(a1 + 1084) = *(_DWORD *)(a1 + 56);
  }
  *(unsigned char *)(a1 + 6436) = *(unsigned char *)(a1 + 411);
  int v5 = *(_DWORD *)(a1 + 1084);
  if (v5 >= *(_DWORD *)(a1 + 60)) {
    int v5 = *(_DWORD *)(a1 + 60);
  }
  if (v5 <= *(_DWORD *)(a1 + 64)) {
    int v5 = *(_DWORD *)(a1 + 64);
  }
  *(_DWORD *)(a1 + 1084) = v5;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    *(_DWORD *)(a1 + 1104) = *(_DWORD *)(v6 + 4 * *(int *)(a1 + 1084));
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      double v14 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(_DWORD *)(a1 + 1104);
        uint64_t v16 = *(void *)(a1 + 48);
        int v17 = *(_DWORD *)(v16 + 4 * *(int *)(a1 + 64));
        LODWORD(v16) = *(_DWORD *)(v16 + 4 * *(int *)(a1 + 60));
        int v18 = *(unsigned __int8 *)(a1 + 419);
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v20 = v13;
        __int16 v21 = 2080;
        char v22 = "_VCRateControlAlgorithmSparseNOWRD_Configure";
        __int16 v23 = 1024;
        int v24 = 163;
        __int16 v25 = 1024;
        int v26 = v15;
        __int16 v27 = 1024;
        int v28 = v17;
        __int16 v29 = 1024;
        int v30 = v16;
        __int16 v31 = 1024;
        int v32 = v18;
        _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Configuring VCRateControl algorithm with targetBitrate=%d, minBitrate=%d, maxBitrate=%d, burstyTraffic=%d", buf, 0x34u);
      }
    }
    VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "Configure with targetBitrate=%d, minBitrate=%d, maxBitrate=%d, burstyTraffic=%d", v7, v8, v9, v10, v11, v12, *(_DWORD *)(a1 + 1104));
  }
  *(unsigned char *)(a1 + 1152) = 1;
  VCRateControlAlgorithmBasePriv_ResetOWRDList(a1);
}

BOOL _VCRateControlAlgorithmSparseNOWRD_DoRateControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  int v10 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    *(void *)(a1 + 6360) = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 636_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 6372) = *(_DWORD *)(a2 + 28) + *(_DWORD *)(a2 + 24);
    *(void *)(a1 + 6376) = *(void *)(a2 + 64);
    *(void *)(a1 + 6384) = *(void *)(a2 + 80);
    *(void *)(a1 + 6392) = *(void *)(a2 + 88);
    if (*(unsigned char *)(a1 + 6436) && *(_DWORD *)(a2 + 160) == 8) {
      VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "Disable baseband adaptation due to FR2 RATType", a3, a4, a5, a6, a7, a8, v81);
    }
    char v17 = *(unsigned char *)(a1 + 411);
    if (v17) {
      char v17 = *(_DWORD *)(a2 + 160) != 8;
    }
    *(unsigned char *)(a1 + 6436) = v17;
    VCRateControlAlgorithmBasePriv_CheckPaused(a1);
    if (*(unsigned char *)(a1 + 6436))
    {
      if (*(double *)(a1 + 6384) <= *(double *)(a1 + 544) && *(double *)(a1 + 6392) <= *(double *)(a1 + 560)
        || *(double *)(a1 + 6376) <= *(double *)(a1 + 568))
      {
        int v18 = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 1080) |= 0x40u;
        *(void *)(a1 + 2912) = 0;
        int v18 = 1;
      }
      if (*(double *)(a1 + 6376) > *(double *)(a1 + 576))
      {
        *(_DWORD *)(a1 + 1080) |= 0x80u;
        *(void *)(a1 + 2912) = 0;
        if (*(double *)(a1 + 6384) > *(double *)(a1 + 544)) {
          *(void *)(a1 + 6416) = *(void *)(a1 + 6360);
        }
LABEL_52:
        if (*(_DWORD *)(a1 + 1072) && *(double *)(a1 + 1128) > 0.0)
        {
          *(unsigned char *)(a1 + 6400) = 1;
          VCRateControlAlgorithmBasePriv_UpdateCongestionStatusWhenRampDown(a1, *(double *)(a1 + 1128));
          uint64_t v32 = 0;
          int v33 = *(_DWORD *)(a1 + 1084);
          while (*(_DWORD *)(*(void *)(a1 + 48) + 4 * v33 + 4 * v32) > *(_DWORD *)(a1 + 6368))
          {
            uint64_t v34 = *(int *)(a1 + 64);
            --v32;
            if (v33 + v32 <= v34) {
              goto LABEL_63;
            }
          }
          LODWORD(v34) = v33 + v32;
LABEL_63:
          if ((int)v34 < *(_DWORD *)(a1 + 76))
          {
            double v35 = *(double *)(a1 + 1128);
            if (v35 - *(double *)(a1 + 6424) <= *(double *)(a1 + 584))
            {
              LODWORD(v34) = *(_DWORD *)(a1 + 1084);
            }
            else
            {
              LODWORD(v34) = v33 - 1;
              *(double *)(a1 + 6424) = v35;
              int v33 = *(_DWORD *)(a1 + 1084);
            }
          }
          if ((int)v34 <= *(_DWORD *)(a1 + 64)) {
            int v39 = *(_DWORD *)(a1 + 64);
          }
          else {
            int v39 = v34;
          }
          if (v33 > v39)
          {
            VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] Congestion due to baseband!!! New bitrate down to %u", v26, v27, v28, v29, v30, v31, *(_DWORD *)(a1 + 1116));
            int v33 = *(_DWORD *)(a1 + 1084);
          }
          *(_DWORD *)(a1 + 108_Block_object_dispose(&STACK[0x250], 8) = v33;
          *(_DWORD *)(a1 + 1084) = v39;
          VCRateControlAlgorithmBasePriv_StateChange(a1, 3);
        }
        goto LABEL_86;
      }
      if (*(double *)(a1 + 6384) <= *(double *)(a1 + 544))
      {
        if (v18) {
          goto LABEL_52;
        }
      }
      else
      {
        *(void *)(a1 + 6416) = *(void *)(a1 + 6360);
        if (v18) {
          goto LABEL_52;
        }
      }
    }
    if (*(double *)(a1 + 6384) <= *(double *)(a1 + 632)
      && *(double *)(a1 + 6376) <= *(double *)(a1 + 640)
      && *(double *)(a1 + 6360) - *(double *)(a1 + 6416) >= *(double *)(a1 + 648))
    {
      *(_DWORD *)(a1 + 6432) = *(_DWORD *)(a1 + 92);
    }
LABEL_86:
    *(_DWORD *)(a1 + 1104) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 1084));
    if (*(unsigned char *)(a1 + 6436)) {
      VCRateControlMediaController_UpdateBasebandSuggestion(*(void *)(a1 + 1048), a2);
    }
    return 1;
  }
  if (v10 != 11)
  {
    if (v10 == 5)
    {
      unsigned int v11 = *(unsigned __int16 *)(a2 + 28);
      *(void *)(a1 + 288_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a2 + 72);
      *(_DWORD *)(a1 + 5132) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 6344) = *(_DWORD *)(a2 + 36);
      *(void *)(a1 + 5104) = *(void *)(a2 + 64);
      *(void *)(a1 + 5024) = *(void *)(a2 + 80);
      *(void *)(a1 + 5080) = *(void *)(a2 + 80);
      *(void *)(a1 + 508_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a2 + 88);
      *(_DWORD *)(a1 + 5272) = *(_DWORD *)(a2 + 96);
      *(_DWORD *)(a1 + 5276) = *(_DWORD *)(a2 + 100);
      *(_DWORD *)(a1 + 1200) = *(_DWORD *)(a2 + 60);
      *(_DWORD *)(a1 + 1204) = *(_DWORD *)(a1 + 1200);
      *(_DWORD *)(a1 + 5280) = *(_DWORD *)(a2 + 108);
      *(_DWORD *)(a1 + 1112) = *(_DWORD *)(a1 + 5272);
      *(void *)(a1 + 5232) = *(void *)(a2 + 8);
      double v12 = *(double *)(a1 + 6352);
      if (v12 == 0.0) {
        double v13 = *(double *)(a1 + 5104);
      }
      else {
        double v13 = *(double *)(a1 + 5104) * 0.1 + v12 * 0.9;
      }
      *(double *)(a1 + 6352) = v13;
      if (*(_DWORD *)(a1 + 1200) < *(_DWORD *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 84))) {
        *(_DWORD *)(a1 + 1200) = 0;
      }
      if (!*(unsigned char *)(a1 + 1155))
      {
        BOOL result = 0;
        *(unsigned char *)(a1 + 1155) = 1;
        *(_WORD *)(a1 + 5224) = v11;
        return result;
      }
      unsigned int v14 = *(unsigned __int16 *)(a1 + 5224);
      if (v11 != v14 && (unsigned __int16)(v11 - v14) < 0x7FFFu)
      {
        if (v14 > v11) {
          ++*(_DWORD *)(a1 + 5228);
        }
        *(_WORD *)(a1 + 5224) = v11;
        *(double *)(a1 + 112_Block_object_dispose(&STACK[0x250], 8) = VCRateControlAlgorithmBasePriv_GetDoubleTimeFromTimestamp(v11, 0x400u, *(_DWORD *)(a1 + 5228));
        double v15 = VCRateControlAlgorithmBasePriv_CalculateCongestionMetrics(a1, *(double *)(a1 + 2888), *(double *)(a1 + 1128));
        LODWORD(v15) = *(_DWORD *)(a1 + 5272);
        LODWORD(v16) = *(_DWORD *)(a1 + 1104);
        if (*(double *)(a1 + 288) * (double)v16 <= (double)*(unint64_t *)&v15
          || *(_DWORD *)(a1 + 1084) <= *(_DWORD *)(a1 + 64))
        {
          if (*(unsigned char *)(a1 + 1153)) {
            *(unsigned char *)(a1 + 1153) = 0;
          }
        }
        else
        {
          *(unsigned char *)(a1 + 1153) = 1;
        }
        VCRateControlAlgorithmBasePriv_CheckBandwidthOvershoot(a1, *(_DWORD *)(a1 + 1200));
        VCRateControlAlgorithmBasePriv_UpdateLossEvent(a1);
        VCRateControlAlgorithmBasePriv_CheckPaused(a1);
        if (*(unsigned char *)(a1 + 1144) && *(double *)(a1 + 1128) - *(double *)(a1 + 5248) > *(double *)(a1 + 304))
        {
          *(unsigned char *)(a1 + 1144) = 0;
          *(unsigned char *)(a1 + 6400) = 0;
        }
        switch(*(_DWORD *)(a1 + 1072))
        {
          case 0:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v24 = VRTraceErrorLogLevelToCSTR();
              __int16 v25 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315650;
                uint64_t v88 = v24;
                __int16 v89 = 2080;
                uint64_t v90 = "_VCRateControlAlgorithmSparseNOWRD_DoRateControlWithVCRCStatistics";
                __int16 v91 = 1024;
                int v92 = 278;
                _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Rate controller is paused", buf, 0x1Cu);
              }
            }
            goto LABEL_93;
          case 1:
            if (_VCRateControlAlgorithmSparseNOWRD_ShouldRampDown(a1)) {
              goto LABEL_71;
            }
            if (_VCRateControlAlgorithmSparseNOWRD_ShouldRampUp(a1))
            {
              *(_DWORD *)(a1 + 1084) = _VCRateControlAlgorithmSparseNOWRD_RrampUpTier(a1);
              if (*(_DWORD *)(a1 + 1084) == *(_DWORD *)(a1 + 60)) {
                goto LABEL_91;
              }
            }
            goto LABEL_93;
          case 2:
            if (_VCRateControlAlgorithmSparseNOWRD_ShouldRampDown(a1))
            {
LABEL_71:
              int v36 = _VCRateControlAlgorithmSparseNOWRD_RampDownTier(a1);
              goto LABEL_90;
            }
            if (_VCRateControlAlgorithmSparseNOWRD_ShouldRampUp(a1))
            {
              int v36 = _VCRateControlAlgorithmSparseNOWRD_RrampUpTier(a1);
LABEL_90:
              *(_DWORD *)(a1 + 1084) = v36;
LABEL_91:
              uint64_t v37 = a1;
              int v38 = 3;
              goto LABEL_92;
            }
LABEL_93:
            *(_DWORD *)(a1 + 1104) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 1084));
            if (*(unsigned char *)(a1 + 712))
            {
              unsigned int v40 = *(_DWORD *)(a1 + 6308);
              if (v40 > 0xFF) {
                *(_DWORD *)(a1 + 6316) -= *(_DWORD *)(a1 + 5284 + 4 * *(unsigned int *)(a1 + 6312));
              }
              else {
                *(_DWORD *)(a1 + 630_Block_object_dispose(&STACK[0x250], 8) = v40 + 1;
              }
              *(_DWORD *)(a1 + 6316) += *(_DWORD *)(a1 + 1084);
              *(_DWORD *)(a1 + 5284 + 4 * *(unsigned int *)(a1 + 6312)) = *(_DWORD *)(a1 + 1084);
              *(_DWORD *)(a1 + 6312) = (*(_DWORD *)(a1 + 6312) + 1);
              if (*(_DWORD *)(a1 + 6308) == 256)
              {
                int v41 = 0;
                int v42 = 0;
                int v43 = 0;
                unsigned int v44 = *(_DWORD *)(a1 + 6316) >> 8;
                *(double *)(a1 + 6320) = (double)v44;
                int v45 = *(_DWORD *)(a1 + 728);
                int v46 = v45 + v44;
                if ((signed int)(v45 + v44) >= *(_DWORD *)(a1 + 60)) {
                  int v46 = *(_DWORD *)(a1 + 60);
                }
                int v47 = v44 - v45;
                if (v47 <= *(_DWORD *)(a1 + 64)) {
                  int v47 = *(_DWORD *)(a1 + 64);
                }
                do
                {
                  int v48 = *(_DWORD *)(a1 + 5284 + 4 * (*(_DWORD *)(a1 + 6312) + v41));
                  if (v42 == 1) {
                    int v49 = v43 + 1;
                  }
                  else {
                    int v49 = v43;
                  }
                  if (v48 < v47)
                  {
                    int v50 = -1;
                  }
                  else
                  {
                    int v49 = v43;
                    int v50 = v42;
                  }
                  if (v42 == -1) {
                    ++v43;
                  }
                  if (v48 > v46)
                  {
                    int v42 = 1;
                  }
                  else
                  {
                    int v43 = v49;
                    int v42 = v50;
                  }
                  ++v41;
                }
                while (v41 != 256);
                *(_DWORD *)(a1 + 6340) = v43;
                if (*(_DWORD *)(a1 + 6340) >= *(_DWORD *)(a1 + 732))
                {
                  *(unsigned char *)(a1 + 6336) = 1;
                }
                else
                {
                  *(unsigned char *)(a1 + 6336) = 0;
                  *(void *)(a1 + 632_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a1 + 1128);
                }
              }
              if (*(unsigned char *)(a1 + 6336))
              {
                double v51 = *(double *)(a1 + 6328);
                if (v51 != 0.0 && *(double *)(a1 + 1128) - v51 > *(double *)(a1 + 720)) {
                  *(_DWORD *)(a1 + 1084) = (int)*(double *)(a1 + 6320);
                }
              }
            }
            uint64_t v52 = *(void *)(a1 + 48);
            uint64_t v53 = *(int *)(a1 + 1084);
            unsigned int v54 = *(_DWORD *)(v52 + 4 * v53) - *(_DWORD *)(a2 + 104);
            uint64_t v55 = *(int *)(a1 + 64);
            if ((int)v55 >= (int)v53) {
              int v56 = *(_DWORD *)(a1 + 1084);
            }
            else {
              int v56 = *(_DWORD *)(a1 + 64);
            }
            int v57 = v53 + 1;
            while (v53 > v55)
            {
              unsigned int v58 = *(_DWORD *)(v52 - 4 + 4 * v53--);
              --v57;
              if (v58 <= v54) {
                goto LABEL_129;
              }
            }
            int v57 = v56;
LABEL_129:
            *(_DWORD *)(a1 + 1104) = *(_DWORD *)(v52 + 4 * v57);
            if (*(unsigned char *)(a1 + 5160))
            {
              int v59 = *(_DWORD *)(a1 + 1120);
              *(_DWORD *)(a1 + 1120) = v59 + 1;
              if ((v59 & 0xF) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v86 = VRTraceErrorLogLevelToCSTR();
                uint64_t v60 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v61 = *(void *)(a1 + 1128);
                  int v62 = *(unsigned __int16 *)(a1 + 5224);
                  uint64_t v85 = *(void *)(a1 + 2888);
                  uint64_t v84 = *(void *)(a1 + 2896);
                  uint64_t v83 = *(void *)(a1 + 2904);
                  uint64_t v82 = *(void *)(a1 + 2912);
                  int v63 = (int)(*(double *)(a1 + 5104) * 1000.0);
                  if (*(_DWORD *)(a1 + 1076)) {
                    int v64 = 88;
                  }
                  else {
                    int v64 = 79;
                  }
                  double v65 = *(double *)(a1 + 5088);
                  double v66 = *(double *)(a1 + 5024) * 100.0;
                  int v67 = *(_DWORD *)(a1 + 5016);
                  unsigned int v68 = *(_DWORD *)(a1 + 1200) / 0x3E8u;
                  unsigned int v69 = *(_DWORD *)(a1 + 5272) / 0x3E8u;
                  unsigned int v70 = *(_DWORD *)(a1 + 1104) / 0x3E8u;
                  int v71 = (unsigned __int16)*(_DWORD *)(a1 + 1076);
                  int v72 = *(unsigned __int16 *)(a1 + 1080);
                  int v73 = *(_DWORD *)(a1 + 1116);
                  int v74 = *(_DWORD *)(a1 + 6372);
                  double v75 = *(double *)(a1 + 6376);
                  unsigned int v76 = *(_DWORD *)(a1 + 6368) / 0x3E8u;
                  unsigned __int8 v77 = atomic_load((unsigned __int8 *)(a1 + 1056));
                  if (v77)
                  {
                    __int16 v78 = "_";
                  }
                  else
                  {
                    __int16 v78 = "<";
                    if (!*(unsigned char *)(a1 + 1153)) {
                      __int16 v78 = "-";
                    }
                  }
                  int v79 = *(_DWORD *)(a1 + 1072);
                  *(_DWORD *)CMTime buf = 136321282;
                  uint64_t v137 = a1;
                  uint64_t v88 = v86;
                  __int16 v89 = 2080;
                  uint64_t v90 = "_VCRateControlAlgorithmSparseNOWRD_PrintRateControlInfoToLogDump";
                  __int16 v91 = 1024;
                  int v92 = 770;
                  __int16 v93 = 2048;
                  *(void *)long long v94 = v61;
                  *(_WORD *)&v94[8] = 1024;
                  int v95 = v62;
                  __int16 v96 = 2048;
                  uint64_t v97 = v85;
                  __int16 v98 = 2048;
                  uint64_t v99 = v84;
                  __int16 v100 = 2048;
                  uint64_t v101 = v83;
                  __int16 v102 = 2048;
                  uint64_t v103 = v82;
                  __int16 v104 = 1024;
                  int v105 = v64;
                  __int16 v106 = 1024;
                  int v107 = v63;
                  __int16 v108 = 2048;
                  double v109 = v66;
                  __int16 v110 = 2048;
                  double v111 = v65 * 100.0;
                  __int16 v112 = 1024;
                  unsigned int v113 = v68;
                  __int16 v114 = 1024;
                  int v115 = v67;
                  __int16 v116 = 1024;
                  unsigned int v117 = v69;
                  __int16 v118 = 1024;
                  unsigned int v119 = v70;
                  __int16 v120 = 1024;
                  int v121 = v71;
                  __int16 v122 = 1024;
                  int v123 = v72;
                  __int16 v124 = 1024;
                  int v125 = v73;
                  __int16 v126 = 1024;
                  unsigned int v127 = v76;
                  __int16 v128 = 1024;
                  int v129 = v74;
                  __int16 v130 = 1024;
                  unsigned int v131 = (v75 * 1000.0);
                  __int16 v132 = 2080;
                  uint64_t v133 = v78;
                  __int16 v134 = 1024;
                  int v135 = v79;
                  _os_log_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d %8.3f/%04X:\t%.4f\t%.4f\t%.4f\t%.4f %c\tRTT:%-4u\tPLR:%4.2f@%.1f\tRRx:%4u\tMBL:%d\t%4u/%4u\t  CS:%04X %04X %u BB: %3u\t%4u\t%3u\t UAT %s _\t%d", buf, 0xC0u);
                }
              }
            }
            uint64_t v80 = *(void *)(a1 + 5144);
            if (v80)
            {
              atomic_load((unsigned __int8 *)(a1 + 1056));
              VRLogfilePrintWithTimestamp(v80, "%8.3f/%04X:\t%.4f\t%.4f\t%.4f\t%.4f %c\tRTT:%-4u\tPLR:%4.2f@%.1f\tRRx:%u\tMBL:%d %u\t%4u/%4u\t %4u:%4u/%4u  %4u:%4u/%4u  CS: %04X %04X %u BB: %3u\t%4u\t%3u\t%s UAT %s\t%d\t%d\t%d\t%d\t%.3f\t%.3f\t%u\t%u\n", *(unsigned int *)(a1 + 5276) / 0x3E8uLL, (unsigned __int16)*(_DWORD *)(a1 + 1076), *(unsigned int *)(a1 + 5280) / 0x3E8uLL, *(unsigned __int16 *)(a1 + 1080), *(unsigned int *)(a1 + 5004) / 0x3E8uLL, *(unsigned int *)(a1 + 1116), *(void *)(a1 + 1128));
            }
            *(_DWORD *)(a1 + 1076) = 0;
            *(_DWORD *)(a1 + 1080) = 0;
            break;
          case 3:
            *(_DWORD *)(a1 + 1076) |= 1u;
            if (_VCRateControlAlgorithmSparseNOWRD_ShouldRampDown(a1)) {
              *(_DWORD *)(a1 + 1084) = _VCRateControlAlgorithmSparseNOWRD_RampDownTier(a1);
            }
            if (*(double *)(a1 + 1128) - *(double *)(a1 + 1136) > *(double *)(a1 + 184))
            {
              uint64_t v37 = a1;
              int v38 = 2;
LABEL_92:
              VCRateControlAlgorithmBasePriv_StateChange(v37, v38);
            }
            goto LABEL_93;
          default:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCRateControlAlgorithmSparseNOWRD_DoRateControl_cold_2();
              }
            }
            goto LABEL_93;
        }
        return 1;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v20 = VRTraceErrorLogLevelToCSTR();
        __int16 v21 = *MEMORY[0x1E4F47A50];
        BOOL v22 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v22) {
          return result;
        }
        int v23 = *(unsigned __int16 *)(a1 + 5224);
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v88 = v20;
        __int16 v89 = 2080;
        uint64_t v90 = "_VCRateControlAlgorithmSparseNOWRD_DoRateControlWithVCRCStatistics";
        __int16 v91 = 1024;
        int v92 = 230;
        __int16 v93 = 1024;
        *(_DWORD *)long long v94 = v11;
        *(_WORD *)&v94[4] = 1024;
        *(_DWORD *)&v94[6] = v23;
        _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Duplicated feedback or out-of-order feedback messages! timestamp:0x%04X, previousTimestamp:0x%04X", buf, 0x28u);
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _VCRateControlAlgorithmSparseNOWRD_DoRateControl_cold_1();
    }
    return 0;
  }
  return 1;
}

BOOL VCRateControlAlgorithmSparseNOWRD_NoServerStatsActivityDetected(uint64_t a1)
{
  if (a1)
  {
    if (*(double *)(a1 + 5104) == 0.0 && *(double *)(a1 + 2888) > 0.0 && *(_DWORD *)(a1 + 1072) != 1) {
      return *(_DWORD *)(a1 + 1084) >= *(_DWORD *)(a1 + 88);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    unint64_t v3 = *MEMORY[0x1E4F47A50];
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCRateControlAlgorithmSparseNOWRD_NoServerStatsActivityDetected_cold_1(v2, v3);
  }
  return 0;
}

uint64_t _VCRateControlAlgorithmSparseNOWRD_ShouldRampDown(uint64_t a1)
{
  double v1 = *(double *)(a1 + 5232);
  if (v1 - *(double *)(a1 + 5240) < 0.05) {
    return 0;
  }
  *(double *)(a1 + 5240) = v1;
  if (!*(unsigned char *)(a1 + 2880) || *(unsigned char *)(a1 + 6400)) {
    return 0;
  }
  BOOL v3 = VCRateControlAlgorithmBasePriv_KeepOvershootingRampDownBandwidth(a1);
  if (v3)
  {
    *(void *)(a1 + 120_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a1 + 1128);
    *(_DWORD *)(a1 + 1080) |= 0x10u;
    *(void *)(a1 + 2912) = 0;
  }
  if (*(double *)(a1 + 2896) > *(double *)(a1 + 128))
  {
    *(_DWORD *)(a1 + 1080) |= 4u;
    *(void *)(a1 + 2912) = 0;
    BOOL v3 = 1;
  }
  if (*(double *)(a1 + 2912) > *(double *)(a1 + 136) && *(_DWORD *)(a1 + 1084) > *(_DWORD *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 1080) |= 8u;
    *(double *)(a1 + 2912) = *(double *)(a1 + 2912) - *(double *)(a1 + 136);
    if (*(double *)(a1 + 2912) < 0.0) {
      *(void *)(a1 + 2912) = 0;
    }
    BOOL v3 = 1;
  }
  if (*(_DWORD *)(a1 + 1072) != 1 && *(double *)(a1 + 1128) - *(double *)(a1 + 2920) > *(double *)(a1 + 160))
  {
    *(_DWORD *)(a1 + 1080) |= 1u;
    *(void *)(a1 + 2920) = *(void *)(a1 + 1128);
    *(void *)(a1 + 2912) = 0;
    BOOL v3 = 1;
  }
  if (VCRateControlAlgorithmBasePriv_ShouldRampDownDueToLossEvent(a1, v5, v6, v7, v8, v9, v10, v11))
  {
    *(_DWORD *)(a1 + 1080) |= 0x20u;
    *(void *)(a1 + 4984) = *(void *)(a1 + 1128);
    VCRateControlAlgorithmBasePriv_ResetLossEventBuffer(a1);
    *(void *)(a1 + 2912) = 0;
    BOOL v3 = 1;
  }
  if (VCRateControlAlgorithmSparseNOWRD_NoServerStatsActivityDetected(a1))
  {
    *(_DWORD *)(a1 + 1080) |= 0x100u;
    *(void *)(a1 + 2912) = 0;
    return 1;
  }
  return v3;
}

uint64_t _VCRateControlAlgorithmSparseNOWRD_RampDownTier(uint64_t a1)
{
  VCRateControlAlgorithmBasePriv_UpdateCongestionStatusWhenRampDown(a1, *(double *)(a1 + 1128));
  int v8 = *(_DWORD *)(a1 + 1084);
  int v9 = v8 - *(_DWORD *)(a1 + 96);
  if ((*(unsigned char *)(a1 + 1080) & 0x20) != 0 && *(double *)(a1 + 4992) > 0.0) {
    --v9;
  }
  int v10 = *(_DWORD *)(a1 + 64);
  if (v9 <= v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v8 > (int)v11) {
    VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] Congestion!!! New bitrate down to %u", v2, v3, v4, v5, v6, v7, *(_DWORD *)(a1 + 1116));
  }
  if (*(_DWORD *)(a1 + 76) > (int)v11) {
    *(void *)(a1 + 6424) = *(void *)(a1 + 1128);
  }
  *(_DWORD *)(a1 + 108_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a1 + 1084);
  return v11;
}

uint64_t _VCRateControlAlgorithmSparseNOWRD_ShouldRampUp(uint64_t a1)
{
  BOOL v2 = *(unsigned char *)(a1 + 2880) != 0;
  if (!*(unsigned char *)(a1 + 2880)) {
    *(_DWORD *)(a1 + 1076) |= 0x40u;
  }
  double v3 = *(double *)(a1 + 312);
  if (v3 >= *(double *)(a1 + 6352)) {
    double v3 = *(double *)(a1 + 6352);
  }
  if (*(_DWORD *)(a1 + 1072) == 1)
  {
    double v4 = *(double *)(a1 + 5256);
    if (v4 == 0.0
      || *(double *)(a1 + 1128) - v4 >= v3
      || (BOOL v2 = 0, *(_DWORD *)(a1 + 1076) |= 0x40u, *(_DWORD *)(a1 + 1072) == 1))
    {
      if (*(_DWORD *)(a1 + 1084) >= *(_DWORD *)(a1 + 68) && !*(_DWORD *)(a1 + 5272))
      {
        BOOL v2 = 0;
        *(_DWORD *)(a1 + 1076) |= 0x1000u;
      }
    }
  }
  if (VCRateControlAlgorithmBasePriv_RecentlyGoAboveRampUpBandwidth(a1))
  {
    BOOL v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x80u;
  }
  if (*(unsigned char *)(a1 + 2881))
  {
    BOOL v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x20u;
  }
  if (*(unsigned char *)(a1 + 412) && *(unsigned char *)(a1 + 1153))
  {
    BOOL v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 2u;
  }
  if (*(double *)(a1 + 2888) > *(double *)(a1 + 200))
  {
    BOOL v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 4u;
  }
  if (*(double *)(a1 + 2896) > *(double *)(a1 + 208))
  {
    BOOL v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 8u;
  }
  if (*(double *)(a1 + 2912) > *(double *)(a1 + 216))
  {
    BOOL v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x10u;
  }
  int v12 = *(_DWORD *)(a1 + 1084);
  if (v12 >= *(_DWORD *)(a1 + 60))
  {
    BOOL v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x100u;
    int v12 = *(_DWORD *)(a1 + 1084);
  }
  if (v12 >= *(_DWORD *)(a1 + 448) && *(_DWORD *)(a1 + 1072) == 1 && !*(_DWORD *)(a1 + 1200))
  {
    BOOL v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x1000u;
  }
  BOOL v13 = *(double *)(a1 + 1128) - *(double *)(a1 + 4984) < *(double *)(a1 + 184) && *(_DWORD *)(a1 + 1072) != 1;
  BOOL v14 = !*(_DWORD *)(a1 + 1200) && (v15 = *(double *)(a1 + 280), v15 != 0.0) && *(double *)(a1 + 5024) > v15;
  if (v13
    || v14
    || VCRateControlAlgorithmBasePriv_ShouldBlockRampUpDueToLossEventThreshold(a1, v5, v6, v7, v8, v9, v10, v11))
  {
    BOOL v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x200u;
  }
  if (*(unsigned char *)(a1 + 6436) && *(_DWORD *)(a1 + 1072) != 1 && !*(_DWORD *)(a1 + 6432))
  {
    *(_DWORD *)(a1 + 1076) |= 0x400u;
    if (*(double *)(a1 + 5104) != 0.0) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }
  if (*(double *)(a1 + 5104) == 0.0)
  {
LABEL_45:
    *(_DWORD *)(a1 + 1076) |= 0x800u;
    goto LABEL_49;
  }
  if (v2)
  {
    *(void *)(a1 + 5264) = *(void *)(a1 + 1128);
    return 1;
  }
LABEL_49:
  double v16 = *(double *)(a1 + 232);
  if (v16 != 0.0)
  {
    double v17 = *(double *)(a1 + 5264);
    if (v17 != 0.0 && *(double *)(a1 + 1128) - v17 >= v16)
    {
      int v18 = *(_DWORD *)(a1 + 1076);
      if (v18 == 1024 || v18 == 2)
      {
        *(_DWORD *)(a1 + 1076) = 0;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t _VCRateControlAlgorithmSparseNOWRD_RrampUpTier(uint64_t a1)
{
  VCRateControlAlgorithmBasePriv_UpdateCongestionStatusWhenRampUp(a1);
  int v9 = VCRateControlAlgorithmBasePriv_AllowRampUpWithContinuousTargetBitrate(a1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v16 = *(unsigned int *)(a1 + 1084);
  if (v9)
  {
    unsigned int v17 = *(_DWORD *)(a1 + 92) + v16;
    if (*(_DWORD *)(a1 + 1072) == 1)
    {
      v17 += *(_DWORD *)(a1 + 100);
    }
    else if (*(unsigned char *)(a1 + 411))
    {
      unsigned int v18 = *(_DWORD *)(a1 + 356);
      if (v18)
      {
        int v19 = *(_DWORD *)(a1 + 6432);
        int v20 = *(_DWORD *)(a1 + 1104);
        uint64_t v21 = *(void *)(a1 + 48);
        if (*(_DWORD *)(v21 + 4 * (int)v17) - v20 < v18 && v19 >= 1)
        {
          int v23 = (int *)(v21 + 4 * (int)v17 + 4);
          do
          {
            int v24 = *v23++;
            BOOL v25 = v24 - v20 < v18 && v19-- > 1;
            ++v17;
          }
          while (v25);
        }
      }
    }
    unsigned int v26 = *(_DWORD *)(a1 + 60);
    if ((int)v17 >= (int)v26) {
      uint64_t v16 = v26;
    }
    else {
      uint64_t v16 = v17;
    }
    *(void *)(a1 + 5256) = *(void *)(a1 + 1128);
    *(_DWORD *)(a1 + 6432) = 0;
    *(_DWORD *)(a1 + 5000) = 0;
    VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] Ramp up bitrate to %u", v10, v11, v12, v13, v14, v15, *(_DWORD *)(a1 + 1116));
    if (*(_DWORD *)(a1 + 76) > (int)v16) {
      *(void *)(a1 + 6424) = *(void *)(a1 + 1128);
    }
    *(_DWORD *)(a1 + 108_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a1 + 1084);
  }
  return v16;
}

uint64_t LoopbackTunnelReceiveProc(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  [a1 serverLoopProc];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v1 = VRTraceErrorLogLevelToCSTR();
    uint64_t v2 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v1;
      __int16 v6 = 2080;
      uint64_t v7 = "LoopbackTunnelReceiveProc";
      __int16 v8 = 1024;
      int v9 = 157;
      _os_log_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d LoopbackTunnelReceiveProc stopped", (uint8_t *)&v4, 0x1Cu);
    }
  }
  return 0;
}

uint64_t VCMediaNegotiationBlobAudioSettingsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_66:
          uint64_t v50 = 16;
          goto LABEL_83;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_70:
          uint64_t v50 = 8;
          goto LABEL_83;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_74:
          uint64_t v50 = 24;
          goto LABEL_83;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v19 = 0;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v19 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_78:
          uint64_t v50 = 12;
          goto LABEL_83;
        case 5u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v19 = 0;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v19 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v14 = v40++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_82:
          uint64_t v50 = 20;
LABEL_83:
          *(_DWORD *)(a1 + v50) = v19;
          continue;
        case 6u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v46 = 0;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v46 |= (unint64_t)(v49 & 0x7F) << v44;
        if ((v49 & 0x80) == 0) {
          goto LABEL_87;
        }
        v44 += 7;
        BOOL v14 = v45++ >= 9;
        if (v14)
        {
          uint64_t v46 = 0;
          goto LABEL_89;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_87:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v46 = 0;
      }
LABEL_89:
      *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x250], 8) = v46 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void _VCAudioCaptions_DestroyCopyBufferAllocator(uint64_t a1)
{
  uint64_t v2 = *(OpaqueAudioConverter **)(a1 + 336);
  if (v2)
  {
    AudioConverterDispose(v2);
    *(void *)(a1 + 336) = 0;
  }
  CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 160), *(void **)(a1 + 328));
  *(void *)(a1 + 32_Block_object_dispose(&STACK[0x250], 8) = 0;
  uint64_t v3 = *(const void **)(a1 + 160);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 160) = 0;
  }
}

uint64_t captionsAudioConverterCallback(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3 && a5)
  {
    uint64_t v8 = *a5;
    if (*a5)
    {
      uint64_t v9 = (*(_DWORD *)(v8 + 12) / *((_DWORD *)a5 + 6));
      if (v9 < *a2 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v10 = VRTraceErrorLogLevelToCSTR();
        uint64_t v11 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v14 = *a2;
          int v15 = 136316162;
          uint64_t v16 = v10;
          __int16 v17 = 2080;
          unsigned int v18 = "captionsAudioConverterCallback";
          __int16 v19 = 1024;
          int v20 = 379;
          __int16 v21 = 1024;
          int v22 = v14;
          __int16 v23 = 2048;
          uint64_t v24 = v9;
          _os_log_error_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_ERROR, " [%s] %s:%d Insufficent input samples: needed = %d, available = %lu", (uint8_t *)&v15, 0x2Cu);
        }
      }
      uint64_t v12 = 0;
      *a2 = v9;
      *(void *)(a3 + 16) = *(void *)(v8 + 16);
      *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = *(void *)(v8 + 8);
      *a5 = 0;
    }
    else
    {
      *a2 = 0;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v12 = 2003329396;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        captionsAudioConverterCallback_cold_1();
      }
    }
  }
  return v12;
}

void sub_1E1F51954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E1F51DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E1F52424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _VCNetworkConditionMonitorClassRegister(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t VCNetworkConditionMonitor_Create(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (*(void *)a3)
    {
      if (*(void *)(a3 + 8))
      {
        if (VCNetworkConditionMonitorGetTypeID_initOnce != -1) {
          dispatch_once_f(&VCNetworkConditionMonitorGetTypeID_initOnce, &VCNetworkConditionMonitorGetTypeID_typeID, (dispatch_function_t)_VCNetworkConditionMonitorClassRegister);
        }
        uint64_t Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          uint64_t v6 = Instance;
          CustomRootQueue = VCDispatchQueue_GetCustomRootQueue(37);
          dispatch_queue_t v8 = dispatch_queue_create_with_target_V2("com.apple.AVConference.VCNetworkConditionMonitor.stateQueue", 0, CustomRootQueue);
          *(void *)(v6 + 32) = v8;
          if (v8)
          {
            *(_OWORD *)(v6 + 104) = xmmword_1E259BD60;
            *(void *)(v6 + 56) = 0x4010000000000000;
            *(_OWORD *)(v6 + 16) = *(_OWORD *)a3;
            *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 16);
            *(_OWORD *)(v6 + 64) = *(_OWORD *)(a3 + 32);
            *(_OWORD *)(v6 + 80) = *(_OWORD *)(a3 + 48);
            *(void *)(v6 + 96) = *(void *)(a3 + 64);
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v9 = VRTraceErrorLogLevelToCSTR();
              uint64_t v10 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v15 = 136315906;
                uint64_t v16 = v9;
                __int16 v17 = 2080;
                unsigned int v18 = "VCNetworkConditionMonitor_Create";
                __int16 v19 = 1024;
                int v20 = 172;
                __int16 v21 = 2048;
                uint64_t v22 = v6;
                _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NetworkConditionMonitor: New instance created=%p", (uint8_t *)&v15, 0x26u);
              }
            }
            uint64_t v11 = *(const void **)(v6 + 128);
            uint64_t v12 = *(const void **)(a3 + 72);
            *(void *)(v6 + 12_Block_object_dispose(&STACK[0x250], 8) = v12;
            if (v12) {
              CFRetain(v12);
            }
            if (v11) {
              CFRelease(v11);
            }
            uint64_t v13 = 0;
            *a2 = v6;
          }
          else
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCNetworkConditionMonitor_Create_cold_5();
              }
            }
            CFRelease((CFTypeRef)v6);
            return 2150170627;
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() < 3)
        {
          return 2150170627;
        }
        else
        {
          VRTraceErrorLogLevelToCSTR();
          uint64_t v13 = 2150170627;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNetworkConditionMonitor_Create_cold_4();
          }
        }
      }
      else
      {
        uint64_t v13 = 2150170625;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNetworkConditionMonitor_Create_cold_3();
          }
        }
      }
    }
    else
    {
      uint64_t v13 = 2150170625;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCNetworkConditionMonitor_Create_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v13 = 2150170625;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNetworkConditionMonitor_Create_cold_1();
      }
    }
  }
  return v13;
}

void VCNetworkConditionMonitor_Invalidate(uint64_t a1)
{
  v2[5] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 32);
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    _DWORD v2[2] = __VCNetworkConditionMonitor_Invalidate_block_invoke;
    v2[3] = &__block_descriptor_tmp_0;
    v2[4] = a1;
    dispatch_sync(v1, v2);
  }
}

uint64_t VCNetworkConditionMonitor_SetBrokenNetworkStatus(uint64_t a1, char a2, char a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = *(NSObject **)(a1 + 32);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = __VCNetworkConditionMonitor_SetBrokenNetworkStatus_block_invoke;
    v9[3] = &__block_descriptor_tmp_3;
    char v10 = a2;
    v9[4] = a1;
    char v11 = a3;
    dispatch_async(v3, v9);
    return 0;
  }
  else
  {
    uint64_t v4 = 2150170625;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      uint64_t v7 = *MEMORY[0x1E4F47A50];
      dispatch_queue_t v8 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v13 = v6;
          __int16 v14 = 2080;
          int v15 = "VCNetworkConditionMonitor_SetBrokenNetworkStatus";
          __int16 v16 = 1024;
          int v17 = 195;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        VCNetworkConditionMonitor_SetBrokenNetworkStatus_cold_1();
      }
    }
  }
  return v4;
}

void _VCNetworkConditionMonitor_RunLocalNetworkDetectionAlgorithm(unsigned char *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v2 = a1[124];
  if (a1[122] || a1[120])
  {
    int v3 = 1;
  }
  else
  {
    int v3 = a1[121];
    if (a1[121]) {
      int v3 = a1[126] != 0;
    }
  }
  a1[124] = v3;
  if (v2 != v3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = "yes";
        int v7 = a1[122];
        int v8 = a1[120];
        if (!a1[124]) {
          uint64_t v6 = "no";
        }
        int v9 = a1[121];
        int v10 = 136316674;
        uint64_t v11 = v4;
        __int16 v12 = 2080;
        uint64_t v13 = "_VCNetworkConditionMonitor_RunLocalNetworkDetectionAlgorithm";
        __int16 v14 = 1024;
        int v15 = 132;
        __int16 v16 = 2080;
        int v17 = v6;
        __int16 v18 = 1024;
        int v19 = v7;
        __int16 v20 = 1024;
        int v21 = v8;
        __int16 v22 = 1024;
        int v23 = v9;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NetworkConditionMonitor: isLocalNetworkQualityBadOrBroken=%s. isLocalNetworkBroken=%d isLocalWiFiQualityBad=%d isLocalCellQualityBad=%d", (uint8_t *)&v10, 0x38u);
      }
    }
    _VCNetworkConditionMonitor_triggerNetworkConditionCallback((uint64_t)a1, 1);
  }
}

void _VCNetworkConditionMonitor_triggerNetworkConditionCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (*(unsigned char *)(a1 + 125)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(unsigned char *)(a1 + 123) != 0;
  }
  (*(void (**)(void, BOOL, BOOL, uint64_t))(a1 + 16))(*(void *)(a1 + 24), *(unsigned char *)(a1 + 124) != 0, v4, a2);
  int valuePtr = 0;
  if (*(unsigned char *)(a1 + 122))
  {
    int v5 = 1;
LABEL_8:
    int valuePtr = v5;
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 123))
  {
    int v5 = 2;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 121) && *(unsigned char *)(a1 + 126))
  {
    int v5 = 4;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 120))
  {
    int v5 = 3;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 125))
  {
    int v5 = 5;
    goto LABEL_8;
  }
LABEL_9:
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v8 = CFNumberCreate(v6, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"NetworkQualityStatus", v8);
  reportingGenericEvent();
  if (v8) {
    CFRelease(v8);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t VCNetworkConditionMonitor_SetWiFiChannelQualityScore(uint64_t a1, char a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = *(NSObject **)(a1 + 32);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    v8[2] = __VCNetworkConditionMonitor_SetWiFiChannelQualityScore_block_invoke;
    v8[3] = &__block_descriptor_tmp_6;
    char v9 = a2;
    v8[4] = a1;
    dispatch_async(v2, v8);
    return 0;
  }
  else
  {
    uint64_t v3 = 2150170625;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      CFAllocatorRef v6 = *MEMORY[0x1E4F47A50];
      int v7 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v11 = v5;
          __int16 v12 = 2080;
          uint64_t v13 = "VCNetworkConditionMonitor_SetWiFiChannelQualityScore";
          __int16 v14 = 1024;
          int v15 = 213;
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        VCNetworkConditionMonitor_SetWiFiChannelQualityScore_cold_1();
      }
    }
  }
  return v3;
}

uint64_t VCNetworkConditionMonitor_SetCellSignalStrengthBars(uint64_t a1, char a2, char a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = *(NSObject **)(a1 + 32);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = __VCNetworkConditionMonitor_SetCellSignalStrengthBars_block_invoke;
    v9[3] = &__block_descriptor_tmp_7;
    char v10 = a2;
    v9[4] = a1;
    char v11 = a3;
    dispatch_async(v3, v9);
    return 0;
  }
  else
  {
    uint64_t v4 = 2150170625;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      int v7 = *MEMORY[0x1E4F47A50];
      CFNumberRef v8 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v13 = v6;
          __int16 v14 = 2080;
          int v15 = "VCNetworkConditionMonitor_SetCellSignalStrengthBars";
          __int16 v16 = 1024;
          int v17 = 235;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        VCNetworkConditionMonitor_SetCellSignalStrengthBars_cold_1();
      }
    }
  }
  return v4;
}

uint64_t VCNetworkConditionMonitor_SetRemoteNetworkQuality(uint64_t a1, char a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = *(NSObject **)(a1 + 32);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    v8[2] = __VCNetworkConditionMonitor_SetRemoteNetworkQuality_block_invoke;
    v8[3] = &__block_descriptor_tmp_8;
    v8[4] = a1;
    char v9 = a2;
    dispatch_async(v2, v8);
    return 0;
  }
  else
  {
    uint64_t v3 = 2150170625;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      int v7 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v11 = v5;
          __int16 v12 = 2080;
          uint64_t v13 = "VCNetworkConditionMonitor_SetRemoteNetworkQuality";
          __int16 v14 = 1024;
          int v15 = 258;
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        VCNetworkConditionMonitor_SetRemoteNetworkQuality_cold_1();
      }
    }
  }
  return v3;
}

uint64_t VCNetworkConditionMonitor_SetIsLocalActiveOnCellular(uint64_t a1, char a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = *(NSObject **)(a1 + 32);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    v8[2] = __VCNetworkConditionMonitor_SetIsLocalActiveOnCellular_block_invoke;
    v8[3] = &__block_descriptor_tmp_9;
    v8[4] = a1;
    char v9 = a2;
    dispatch_async(v2, v8);
    return 0;
  }
  else
  {
    uint64_t v3 = 2150170625;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      int v7 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v11 = v5;
          __int16 v12 = 2080;
          uint64_t v13 = "VCNetworkConditionMonitor_SetIsLocalActiveOnCellular";
          __int16 v14 = 1024;
          int v15 = 273;
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        VCNetworkConditionMonitor_SetIsLocalActiveOnCellular_cold_1();
      }
    }
  }
  return v3;
}

double _VCNetworkConditionMonitor_Init(uint64_t a1)
{
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x250], 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void _VCNetworkConditionMonitor_Finalize(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 128);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x250], 8) = 0;
  }
  uint64_t v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    dispatch_sync(v3, &__block_literal_global_10);
    uint64_t v4 = *(NSObject **)(a1 + 32);
    dispatch_release(v4);
  }
}

void OUTLINED_FUNCTION_3_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x1Cu);
}

double VCRedundancyControllerVideo_ConvertRedundancyPercentageToRatio(unsigned int a1)
{
  double result = 3.0;
  if (a1 <= 0x12C) {
    return (double)a1 / 100.0;
  }
  return result;
}

void sub_1E1F579A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E1F58058(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL VCMediaKeyIndex_isValid(void *a1)
{
  if (!a1) {
    return 0;
  }
  objc_sync_enter(a1);
  BOOL v2 = (a1[1] & a1[2]) != -1;
  objc_sync_exit(a1);
  return v2;
}

BOOL VCMediaKeyIndex_isEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    size_t v3 = *(unsigned int *)(a1 + 24);
    return v3 == *(_DWORD *)(a2 + 24)
        && *(void *)(a1 + 32) == *(void *)(a2 + 32)
        && memcmp((const void *)(a1 + 8), (const void *)(a2 + 8), v3) == 0;
  }
  return v2;
}

BOOL VCMediaKeyIndex_isStartingWithPrefix(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (a1 && a2)
  {
    size_t v4 = *(unsigned int *)(a2 + 24);
    return *(_DWORD *)(a1 + 24) >= v4 && memcmp((const void *)(a1 + 8), (const void *)(a2 + 8), v4) == 0;
  }
  return result;
}

void sub_1E1F5844C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id VCMediaKeyIndex_CreateMKIWithBytes(uint64_t a1, uint64_t a2)
{
  return +[VCMediaKeyIndex newMKIWithBytes:a1 bufferSize:a2];
}

void VCMediaKeyIndex_Release(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
}

uint64_t VCMediaKeyIndex_ReleaseAndCopyNewValue(const void **a1, void *a2)
{
  size_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t result = [a2 copy];
  *a1 = (const void *)result;
  return result;
}

uint64_t VCMediaKeyIndex_FullKeyBytes(void *a1, const char *a2)
{
  return [a1 fullKeyBytes:a2];
}

uint64_t VCMediaKeyIndex_UniquePrefixBytes(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1 && a2 && (uint64_t v4 = a3, a3))
  {
    bzero(a2, a3);
    objc_sync_enter((id)a1);
    memcpy(a2, (const void *)(a1 + 8), v4);
    objc_sync_exit((id)a1);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaKeyIndex_UniquePrefixBytes_cold_1();
      }
    }
    return 0;
  }
  return v4;
}

uint64_t VCMediaKeyIndex_UniquePrefixSize(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  objc_sync_enter((id)a1);
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
  }
  objc_sync_exit((id)a1);
  return v2;
}

const char *VCMediaKeyIndex_Description(void *a1)
{
  CFStringRef v1 = (const __CFString *)[a1 description];

  return CFStringGetCStringPtr(v1, 0x8000100u);
}

void StallModeTracePrint_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v21[1] = *(char **)MEMORY[0x1E4F143B8];
  if (g_fpStallModeDump)
  {
    v21[0] = 0;
    memset(v20, 170, sizeof(v20));
    gettimeofday((timeval *)v20, 0);
    *(void *)&v20[16] = &a9;
    vasprintf(v21, a5, &a9);
    if (v21[0])
    {
      v19.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v19.tm_mon = v10;
      *(_OWORD *)&v19.tm_isdst = v10;
      *(_OWORD *)&v19.tm_sec = v10;
      localtime_r((const time_t *)v20, &v19);
      uint64_t v11 = g_fpStallModeDump;
      char tm_hour = v19.tm_hour;
      VRTraceErrorLogLevelToCSTR();
      VRLogfilePrint(v11, "%02d:%02d:%02d.%06d <%s> %s: %s\n", v13, v14, v15, v16, v17, v18, tm_hour);
      free(v21[0]);
    }
  }
}

uint64_t initialBitrateTierFromLearntBitrateWithCellTech(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if ((a3 - 5) > 4) {
      uint64_t v6 = @"S";
    }
    else {
      uint64_t v6 = (__CFString *)*((void *)&off_1E6DB53B0 + a3 - 5);
    }
  }
  else
  {
    uint64_t v6 = @"W";
  }
  int v7 = g_adwTxRateTiers[a6];
  if (a4)
  {
    if ((a5 - 5) > 4) {
      CFNumberRef v8 = @"S";
    }
    else {
      CFNumberRef v8 = (__CFString *)*((void *)&off_1E6DB53B0 + a5 - 5);
    }
  }
  else
  {
    CFNumberRef v8 = @"W";
  }
  CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"%@:%@", v6, v8);
  unsigned int LearntBitrateForSegment = reportingGetLearntBitrateForSegment();
  CFRelease(v9);
  LODWORD(v11) = 38;
  while (1)
  {
    uint64_t v11 = (v11 - 1);
    if (g_adwTxRateTiers[v11] <= LearntBitrateForSegment) {
      break;
    }
    if (v11 <= 1)
    {
      uint64_t v11 = 0;
      break;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    uint64_t v13 = *MEMORY[0x1E4F47A50];
    uint64_t v14 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v17 = v12;
        __int16 v18 = 2080;
        tm v19 = "initialBitrateTierFromLearntBitrateWithCellTech";
        __int16 v20 = 1024;
        int v21 = 1160;
        __int16 v22 = 2112;
        CFStringRef v23 = v9;
        __int16 v24 = 1024;
        unsigned int v25 = LearntBitrateForSegment;
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 1024;
        int v29 = v7;
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AdaptiveLearning(AFRC): Setting up initial bitrate for segment %@ - learnt target bitrate %d, selected tier %d, default bitrate %d", buf, 0x38u);
      }
    }
    else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v17 = v12;
      __int16 v18 = 2080;
      tm v19 = "initialBitrateTierFromLearntBitrateWithCellTech";
      __int16 v20 = 1024;
      int v21 = 1160;
      __int16 v22 = 2112;
      CFStringRef v23 = v9;
      __int16 v24 = 1024;
      unsigned int v25 = LearntBitrateForSegment;
      __int16 v26 = 1024;
      int v27 = v11;
      __int16 v28 = 1024;
      int v29 = v7;
      _os_log_debug_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d AdaptiveLearning(AFRC): Setting up initial bitrate for segment %@ - learnt target bitrate %d, selected tier %d, default bitrate %d", buf, 0x38u);
    }
  }
  return v11;
}

uint64_t AFRCCreateHandle(uint64_t *a1, uint64_t a2, const void *a3, int *a4)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  CFNumberRef v8 = malloc_type_calloc(1uLL, 0x2680uLL, 0x10E00404730A826uLL);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    long long v10 = (char *)(v8 + 1203);
    v8[351] = a2;
    MediaQueue_SetAudioFECLevel(1.0);
    *(void *)(v9 + 2736) = 0x3FF0000000000000;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v9 + 2720) = _Q0;
    *(_OWORD *)(v9 + 2700) = 0u;
    if (!*((unsigned char *)a4 + 54))
    {
      *(void *)uint64_t v9 = a3;
      if (a3)
      {
        CFRetain(a3);
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        uint64_t v17 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          *(void *)&uint8_t buf[4] = v16;
          __int16 v127 = 2080;
          __int16 v128 = "AFRCCreateHandle";
          __int16 v129 = 1024;
          int v130 = 1189;
          _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRCCreateHandle: RTCReportingAgent is nil", buf, 0x1Cu);
        }
      }
    }
    int v18 = *a4;
    *(_DWORD *)(v9 + 292_Block_object_dispose(&STACK[0x250], 8) = *a4;
    int v19 = a4[1];
    *(_DWORD *)(v9 + 2932) = v19;
    int v20 = a4[2];
    *(_DWORD *)(v9 + 2936) = v20;
    int v21 = a4[3];
    *(_DWORD *)(v9 + 2940) = v21;
    int v22 = a4[4];
    *(_DWORD *)(v9 + 9696) = v22;
    int v23 = a4[5];
    *(_DWORD *)(v9 + 2944) = v23;
    *(_DWORD *)(v9 + 2632) = a4[8];
    v10[77] = a4[10] != 0;
    *(unsigned char *)(v9 + 2696) = a4[11] != 0;
    *(_DWORD *)(v9 + 2824) = a4[12];
    *((_WORD *)v10 + 107) = *((_WORD *)a4 + 26);
    v10[228] = *((unsigned char *)a4 + 55);
    double v24 = 0.5;
    if (v23) {
      double v24 = 1.0;
    }
    *(double *)(v9 + 2456) = v24;
    if (v18)
    {
      if (v20 == 2)
      {
LABEL_20:
        *(_DWORD *)(v9 + 294_Block_object_dispose(&STACK[0x250], 8) = 1;
        goto LABEL_22;
      }
      if (v20 != 7)
      {
        if (v20 != 4) {
          goto LABEL_22;
        }
        goto LABEL_20;
      }
      *(_DWORD *)(v9 + 2952) = 1;
    }
LABEL_22:
    v10[76] = 0;
    if (v22)
    {
      int v25 = 0;
      int v26 = 3;
      *(_DWORD *)(v9 + 2_Block_object_dispose(&STACK[0x250], 8) = 3;
      *(void *)(v9 + 36) = 3;
      *(void *)(v9 + 2464) = 0x4000000000000000;
      *(void *)(v9 + 2456) = 0x3FF0000000000000;
      goto LABEL_33;
    }
    if (!*(_DWORD *)(v9 + 2948))
    {
      if (*(_DWORD *)(v9 + 2952))
      {
        int v27 = 5;
        *(_DWORD *)(v9 + 2_Block_object_dispose(&STACK[0x250], 8) = 5;
        double v28 = 1.0;
        int v26 = 5;
        goto LABEL_32;
      }
      if (!v19 || v21 != 4 && v21 != 2)
      {
        int v27 = 10;
        int v26 = initialBitrateTierFromLearntBitrateWithCellTech((uint64_t)a3, v18 != 0, v20, v19 != 0, v21, 10);
        *(_DWORD *)(v9 + 2_Block_object_dispose(&STACK[0x250], 8) = v26;
        *(_DWORD *)(v9 + 32) = v26;
        double v28 = 1.0;
        goto LABEL_32;
      }
    }
    int v27 = 3;
    *(_DWORD *)(v9 + 2_Block_object_dispose(&STACK[0x250], 8) = 3;
    double v28 = 2.0;
    int v26 = 3;
LABEL_32:
    *(double *)(v9 + 2464) = v28;
    int v25 = 1;
    *(_DWORD *)(v9 + 36) = v27;
    *(_DWORD *)(v9 + 40) = 0;
LABEL_33:
    *(_DWORD *)(v9 + 2480) = v25;
    int v29 = g_adwTxRateTiers[v26];
    *(_DWORD *)(v9 + 44) = v29;
    *(_DWORD *)(v9 + 9816) = v29;
    *(double *)(v9 + 980_Block_object_dispose(&STACK[0x250], 8) = micro();
    v10[176] = 0;
    *(int32x2_t *)(v9 + 20) = vdup_n_s32(0x927C0u);
    *(void *)(v9 + 1400) = 0x100000001;
    *(_DWORD *)(v9 + 1396) = 5;
    *(_OWORD *)(v9 + 80) = xmmword_1E259C290;
    *(void *)(v9 + 96) = 0x3FC3333333333333;
    *(double *)(v9 + 104) = micro();
    *(void *)(v9 + 6_Block_object_dispose(&STACK[0x250], 8) = -1;
    ConfigureAFRCDefaults(v9);
    *(void *)(v9 + 9576) = 0x3FF0000000000000;
    *long long v10 = -1;
    *(void *)(v9 + 152) = 0;
    *(void *)(v9 + 2504) = 0;
    *(void *)(v9 + 2520) = 0;
    *(void *)(v9 + 2512) = 0;
    *(_DWORD *)(v9 + 2632) = 2;
    *(_DWORD *)(v9 + 9704) = 0;
    *(void *)(v9 + 9712) = 0;
    *(_DWORD *)(v9 + 140) = 0;
    double v30 = micro();
    *(double *)(v9 + 9672) = v30;
    *(double *)(v9 + 9680) = v30;
    uint64_t v31 = (double *)RateMonitorCreateWithHistoryLength(300);
    *(void *)(v9 + 976_Block_object_dispose(&STACK[0x250], 8) = v31;
    RateMonitorConfigureWithThresholds(v31, 228000.0, 0.1, 0.15, 0.5);
    RateMonitorStart(*(unsigned char **)(v9 + 9768));
    *(_DWORD *)(v9 + 9796) = 0;
    unint64_t v32 = (double *)RateMonitorCreateWithHistoryLength(300);
    *(void *)(v9 + 9784) = v32;
    RateMonitorConfigureWithThresholds(v32, 0.0, 0.1, 0.1, 0.5);
    RateMonitorStart(*(unsigned char **)(v9 + 9784));
    *(_DWORD *)(v9 + 68_Block_object_dispose(&STACK[0x250], 8) = 0;
    pthread_mutex_init((pthread_mutex_t *)(v9 + 280), 0);
    pthread_mutex_init((pthread_mutex_t *)(v9 + 2560), 0);
    pthread_mutex_init((pthread_mutex_t *)(v9 + 2744), 0);
    pthread_mutex_init((pthread_mutex_t *)(v9 + 2864), 0);
    uint64_t Handle = CreateHandle();
    *a1 = Handle;
    if (Handle == 0xFFFFFFFFLL)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          AFRCCreateHandle_cold_3();
        }
      }
      pthread_mutex_destroy((pthread_mutex_t *)(v9 + 280));
      pthread_mutex_destroy((pthread_mutex_t *)(v9 + 2560));
      pthread_mutex_destroy((pthread_mutex_t *)(v9 + 2744));
      pthread_mutex_destroy((pthread_mutex_t *)(v9 + 2864));
      free((void *)v9);
      return 2149646341;
    }
    else
    {
      reportingRegisterPeriodicTask();
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      unsigned int v35 = (os_log_t *)MEMORY[0x1E4F47A50];
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v36 = VRTraceErrorLogLevelToCSTR();
        unint64_t v37 = *v35;
        if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
        {
          char v38 = "YES";
          int v39 = *(_DWORD *)(v9 + 2936);
          if (*(_DWORD *)(v9 + 2928)) {
            unsigned int v40 = "YES";
          }
          else {
            unsigned int v40 = "NO";
          }
          int v41 = *(_DWORD *)(v9 + 2940);
          if (!*(_DWORD *)(v9 + 2932)) {
            char v38 = "NO";
          }
          *(_DWORD *)CMTime buf = 136316674;
          *(void *)&uint8_t buf[4] = v36;
          __int16 v127 = 2080;
          __int16 v128 = "AFRCCreateHandle";
          __int16 v129 = 1024;
          int v130 = 1503;
          __int16 v131 = 2080;
          *(void *)__int16 v132 = v40;
          *(_WORD *)&v132[8] = 1024;
          LODWORD(v133) = v39;
          WORD2(v133) = 2080;
          *(void *)((char *)&v133 + 6) = v38;
          HIWORD(v133) = 1024;
          *(_DWORD *)__int16 v134 = v41;
          _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRCCreateHandle (CellTech local[%s:%d] remote[%s:%d]).", buf, 0x3Cu);
        }
      }
      int v43 = a4[6];
      int v42 = a4[7];
      int v44 = a4[9];
      *(_DWORD *)(v9 + 2816) = v43;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v45 = VRTraceErrorLogLevelToCSTR();
        uint64_t v46 = *v35;
        if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v47 = "enabled";
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = v45;
          __int16 v127 = 2080;
          __int16 v128 = "AFRCLog_OpenLogs";
          if (!v43) {
            uint64_t v47 = "disabled";
          }
          __int16 v129 = 1024;
          int v130 = 823;
          __int16 v131 = 2080;
          *(void *)__int16 v132 = v47;
          _os_log_impl(&dword_1E1EA4000, v46, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ### AFRC log %s", buf, 0x26u);
        }
      }
      if (v42
        && (memset(buf, 170, sizeof(buf)),
            __sprintf_chk((char *)buf, 0, 0xCuLL, "%010u", *(_DWORD *)(v9 + 2824)),
            unint64_t v48 = VRLogfileAlloc(0, (uint64_t)buf, (uint64_t)"AFRC", (uint64_t)".afrcdump", "com.apple.VideoConference.AFRClog", 9), *(void *)(v9 + 2832) = v48, VRLogfilePrintSync(v48, "STime\t\tdTime/ETxTS\tOWRD\tNOWRD\tNOWRDS\tNOWRDA\tUp\tRTT\tPLR/FEC\tRRx\tMBL\tLRx\tBR/TR\tMQIn: A/V\tMQOut: A/V\tABRL\tQD\tBDL\tTxAT\tMODE\tTxSTATE\tAudio:PL/Rate\n", v49, v50, v51, v52, v53, v54, v123), VRLogfilePrintSync(
              *(FILE ***)(v9 + 2832),
              "connection #: %d.\n",
              v55,
              v56,
              v57,
              v58,
              v59,
              v60,
              *(_DWORD *)(v9 + 2632)),
            *(void *)(v9 + 2832)))
      {
        int v61 = *(_DWORD *)(v9 + 2824);
        if (AFRCLog_OpenStallModeLog_once != -1) {
          dispatch_once(&AFRCLog_OpenStallModeLog_once, &__block_literal_global_11);
        }
        pthread_mutex_lock(&g_fpStallModeDumpOpenCloseLock);
        VRLogfileFree(&g_fpStallModeDump);
        memset(buf, 170, sizeof(buf));
        __sprintf_chk((char *)buf, 0, 0xCuLL, "%010u", v61);
        g_fpStallModeDump = (uint64_t)VRLogfileAlloc(0, (uint64_t)buf, (uint64_t)"AFRC", (uint64_t)".stalldump", "com.apple.VideoConference.StallModeDump", 32);
        pthread_mutex_unlock(&g_fpStallModeDumpOpenCloseLock);
        memset(buf, 170, sizeof(buf));
        __sprintf_chk((char *)buf, 0, 0xCuLL, "%010u", *(_DWORD *)(v9 + 2824));
        int v62 = VRLogfileAlloc(0, (uint64_t)buf, (uint64_t)"AFRC", (uint64_t)".fbdump", "com.apple.VideoConference.AFRClogFB", 32);
        *(void *)(v9 + 2840) = v62;
        VRLogfilePrintSync(v62, "MyTxTS\tDelay\tRecvKb\tBLoss\tAudioRecvPkt\tVideoRecvPkt\tYrTxTS\tOWRD\n", v63, v64, v65, v66, v67, v68, v124);
        AFRCLog_OpenBBLog((FILE **)v9, v44, 0, v69, v70, v71, v72, v73);
        int v74 = 1;
      }
      else
      {
        int v74 = 0;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v75 = VRTraceErrorLogLevelToCSTR();
        unsigned int v76 = *v35;
        if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
        {
          unsigned __int8 v77 = "disabled";
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = v75;
          __int16 v127 = 2080;
          __int16 v128 = "AFRCLog_OpenLogs";
          if (v74) {
            unsigned __int8 v77 = "enabled";
          }
          __int16 v129 = 1024;
          int v130 = 834;
          __int16 v131 = 2080;
          *(void *)__int16 v132 = v77;
          _os_log_impl(&dword_1E1EA4000, v76, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ### AFRC dump %s", buf, 0x26u);
        }
      }
      *(void *)(v9 + 672) = 0;
      *(void *)(v9 + 96_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(unsigned char *)(v9 + 980) = 0;
      *(void *)(v9 + 984) = 0;
      *(_DWORD *)(v9 + 992) = 0;
      *(_DWORD *)(v9 + 976) = 0;
      *(void *)(v9 + 1120) = 0;
      *(void *)(v9 + 920) = 0;
      *(void *)(v9 + 912) = 0;
      *(_DWORD *)(v9 + 92_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(void *)(v9 + 936) = 0;
      *(void *)(v9 + 952) = 0;
      *(void *)(v9 + 944) = 0;
      *(_DWORD *)(v9 + 960) = 0;
      *(_DWORD *)(v9 + 1040) = 0;
      *(unsigned char *)(v9 + 1104) = 1;
      *(_DWORD *)(v9 + 112_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(_WORD *)(v9 + 1132) = 0;
      *(void *)(v9 + 1136) = 0;
      *(_WORD *)(v9 + 1144) = 0;
      *(void *)(v9 + 1156) = 0;
      *(void *)(v9 + 114_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(_OWORD *)(v9 + 1196) = 0u;
      *(_OWORD *)(v9 + 1184) = 0u;
      *(_OWORD *)(v9 + 116_Block_object_dispose(&STACK[0x250], 8) = 0u;
      *(_OWORD *)(v9 + 1216) = 0u;
      *(_OWORD *)(v9 + 1232) = 0u;
      Boolean keyExistsAndHasValidFormat = 0;
      AppIntegerCFArrayRef Value = CFPreferencesGetAppIntegerValue(@"BWEstEnableNewEstSenderSide", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat) {
        _ZF = AppIntegerValue == 0;
      }
      else {
        _ZF = 0;
      }
      char v80 = !_ZF;
      *(unsigned char *)(v9 + 724) = v80;
      CFIndex v81 = CFPreferencesGetAppIntegerValue(@"BWEstEnableNewEstRecvrSide", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat) {
        BOOL v82 = v81 == 0;
      }
      else {
        BOOL v82 = 0;
      }
      char v83 = !v82;
      *(unsigned char *)(v9 + 725) = v83;
      double v84 = (double)(int)CFPreferencesGetAppIntegerValue(@"BWEstProbeInterval", @"com.apple.VideoConference", &keyExistsAndHasValidFormat)/ 1000000.0;
      if (!keyExistsAndHasValidFormat) {
        double v84 = 0.666;
      }
      *(double *)(v9 + 864) = v84;
      int v85 = CFPreferencesGetAppIntegerValue(@"BWEstLogType", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat) {
        int v86 = v85;
      }
      else {
        int v86 = 0;
      }
      *(_DWORD *)(v9 + 1112) = v86;
      int v87 = CFPreferencesGetAppIntegerValue(@"BWEstLogLevel", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat) {
        int v88 = v87;
      }
      else {
        int v88 = 0;
      }
      g_iBWEstLogLevel = v88;
      int v89 = CFPreferencesGetAppIntegerValue(@"BWEstDemoLogInterval", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat) {
        int v90 = v89;
      }
      else {
        int v90 = 1000000;
      }
      *(_DWORD *)(v9 + 1116) = v90;
      CFIndex v91 = CFPreferencesGetAppIntegerValue(@"HackUploadBW", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat) {
        BOOL v92 = v91 == 0;
      }
      else {
        BOOL v92 = 1;
      }
      char v93 = !v92;
      *(unsigned char *)(v9 + 1037) = v93;
      CFIndex v94 = CFPreferencesGetAppIntegerValue(@"V1BWE", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat) {
        BOOL v95 = v94 == 0;
      }
      else {
        BOOL v95 = 1;
      }
      char v96 = !v95;
      *(unsigned char *)(v9 + 1036) = v96;
      int v97 = VRTraceGetErrorLogLevelForModule();
      __int16 v98 = (unsigned char *)MEMORY[0x1E4F47A40];
      if (v97 > 7)
      {
        uint64_t v99 = VRTraceErrorLogLevelToCSTR();
        __int16 v100 = *v35;
        uint64_t v101 = *v35;
        if (*v98)
        {
          if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
          {
            int v102 = *(unsigned __int8 *)(v9 + 1037);
            int v103 = *(unsigned __int8 *)(v9 + 1036);
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v99;
            __int16 v127 = 2080;
            __int16 v128 = "BWEstConfigureDefaults";
            __int16 v129 = 1024;
            int v130 = 5830;
            __int16 v131 = 1024;
            *(_DWORD *)__int16 v132 = v102;
            *(_WORD *)&v132[4] = 1024;
            *(_DWORD *)&v132[6] = v103;
            _os_log_impl(&dword_1E1EA4000, v100, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d HackUploadBW: %d  V1BWE: %d ", buf, 0x28u);
          }
        }
        else if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
        {
          int v116 = *(unsigned __int8 *)(v9 + 1037);
          int v117 = *(unsigned __int8 *)(v9 + 1036);
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v99;
          __int16 v127 = 2080;
          __int16 v128 = "BWEstConfigureDefaults";
          __int16 v129 = 1024;
          int v130 = 5830;
          __int16 v131 = 1024;
          *(_DWORD *)__int16 v132 = v116;
          *(_WORD *)&v132[4] = 1024;
          *(_DWORD *)&v132[6] = v117;
          _os_log_debug_impl(&dword_1E1EA4000, v100, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d HackUploadBW: %d  V1BWE: %d ", buf, 0x28u);
        }
      }
      *(_DWORD *)(v9 + 720) = 0;
      *(unsigned char *)(v9 + 124_Block_object_dispose(&STACK[0x250], 8) = (*MEMORY[0x1E4F47A38] | g_iBWEstLogLevel) != 0;
      Throttling_AFRC_Init((BOOL *)(v9 + 872));
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v104 = VRTraceErrorLogLevelToCSTR();
        int v105 = *v35;
        __int16 v106 = *v35;
        if (*v98)
        {
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
          {
            int v107 = *(unsigned __int8 *)(v9 + 725);
            int v108 = *(unsigned __int8 *)(v9 + 724);
            uint64_t v109 = *(void *)(v9 + 864);
            int v110 = *(_DWORD *)(v9 + 1116);
            int v111 = *(_DWORD *)(v9 + 1112);
            *(_DWORD *)CMTime buf = 136317186;
            *(void *)&uint8_t buf[4] = v104;
            __int16 v127 = 2080;
            __int16 v128 = "BWEstInit";
            __int16 v129 = 1024;
            int v130 = 5939;
            __int16 v131 = 1024;
            *(_DWORD *)__int16 v132 = v107;
            *(_WORD *)&v132[4] = 1024;
            *(_DWORD *)&v132[6] = v108;
            LOWORD(v133) = 2048;
            *(void *)((char *)&v133 + 2) = v109;
            WORD5(v133) = 1024;
            HIDWORD(v133) = v110;
            *(_WORD *)__int16 v134 = 1024;
            *(_DWORD *)&v134[2] = v111;
            __int16 v135 = 1024;
            int v136 = g_iBWEstLogLevel;
            _os_log_impl(&dword_1E1EA4000, v105, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ////^^^^ Initial BWEstEnableNewst_Recvr/_Sender %d/%d  \t BWEstProbeInterval: %f  BWEstDemoLogInterval: %d  BWEstLogType: %d  BWEstLogLevel: %x \n", buf, 0x44u);
          }
        }
        else if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
        {
          int v118 = *(unsigned __int8 *)(v9 + 725);
          int v119 = *(unsigned __int8 *)(v9 + 724);
          uint64_t v120 = *(void *)(v9 + 864);
          int v121 = *(_DWORD *)(v9 + 1116);
          int v122 = *(_DWORD *)(v9 + 1112);
          *(_DWORD *)CMTime buf = 136317186;
          *(void *)&uint8_t buf[4] = v104;
          __int16 v127 = 2080;
          __int16 v128 = "BWEstInit";
          __int16 v129 = 1024;
          int v130 = 5939;
          __int16 v131 = 1024;
          *(_DWORD *)__int16 v132 = v118;
          *(_WORD *)&v132[4] = 1024;
          *(_DWORD *)&v132[6] = v119;
          LOWORD(v133) = 2048;
          *(void *)((char *)&v133 + 2) = v120;
          WORD5(v133) = 1024;
          HIDWORD(v133) = v121;
          *(_WORD *)__int16 v134 = 1024;
          *(_DWORD *)&v134[2] = v122;
          __int16 v135 = 1024;
          int v136 = g_iBWEstLogLevel;
          _os_log_debug_impl(&dword_1E1EA4000, v105, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d ////^^^^ Initial BWEstEnableNewst_Recvr/_Sender %d/%d  \t BWEstProbeInterval: %f  BWEstDemoLogInterval: %d  BWEstLogType: %d  BWEstLogLevel: %x \n", buf, 0x44u);
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v112 = VRTraceErrorLogLevelToCSTR();
        unsigned int v113 = *v35;
        __int16 v114 = *v35;
        if (*v98)
        {
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v112;
            __int16 v127 = 2080;
            __int16 v128 = "BWEstInit";
            __int16 v129 = 1024;
            int v130 = 5940;
            __int16 v131 = 2048;
            *(void *)__int16 v132 = v9;
            _os_log_impl(&dword_1E1EA4000, v113, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ///////////////////////AFRCCreateHandle startAFRC//////////////////////// %p", buf, 0x26u);
          }
        }
        else if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
        {
          AFRCCreateHandle_cold_4();
        }
      }
      if (*(unsigned char *)(v9 + 1037) || *(unsigned char *)(v9 + 1036))
      {
        uint64_t v15 = 0;
        *(void *)(v9 + 1024) = 0;
        *(_DWORD *)(v9 + 1032) = 0;
        *(void *)(v9 + 100_Block_object_dispose(&STACK[0x250], 8) = 0;
        *(void *)(v9 + 1000) = 0;
        *(_DWORD *)(v9 + 1016) = 0;
      }
      else
      {
        return 0;
      }
    }
    return v15;
  }
  uint64_t v15 = 2149646339;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
  {
    VRTraceErrorLogLevelToCSTR();
    if (VRTraceIsOSFaultDisabled())
    {
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        AFRCCreateHandle_cold_1();
      }
    }
    else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
    {
      AFRCCreateHandle_cold_2();
    }
  }
  return v15;
}

BOOL ConfigureAFRCDefaults(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t ForcedCapBitrate = VCTestMonitorManager_GetForcedCapBitrate();
  *(_DWORD *)(a1 + 72) = VCDefaults_GetIntValueForKey(@"forcedTxCap", ForcedCapBitrate);
  uint64_t ForcedTargetBitrate = VCTestMonitorManager_GetForcedTargetBitrate();
  *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x250], 8) = VCDefaults_GetIntValueForKey(@"forcedTxRate", ForcedTargetBitrate);
  AppIntegerCFArrayRef Value = CFPreferencesGetAppIntegerValue(@"forcedPLRForAudioFEC100", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
  double v5 = -1.0;
  double v6 = -1.0;
  if (keyExistsAndHasValidFormat) {
    double v6 = (double)AppIntegerValue / 100.0;
  }
  unsigned int v7 = CFPreferencesGetAppIntegerValue(@"forcedPLRForAudioFEC150", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    double v5 = (double)v7 / 100.0;
  }
  unsigned int v8 = CFPreferencesGetAppIntegerValue(@"forcedPLRForAudioFEC200", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    double v9 = (double)v8 / 100.0;
  }
  else {
    double v9 = -1.0;
  }
  if (v6 > 0.0 && v5 > 0.0 && v9 > 0.0 && v5 >= v6 && v9 >= v5 && v9 <= 1.0)
  {
    *(double *)(a1 + 80) = v6;
    *(double *)(a1 + 8_Block_object_dispose(&STACK[0x250], 8) = v5;
    *(double *)(a1 + 96) = v9;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v24 = v10;
        __int16 v25 = 2080;
        int v26 = "ConfigureAFRCDefaults";
        __int16 v27 = 1024;
        int v28 = 5771;
        __int16 v29 = 2048;
        double v30 = v6;
        __int16 v31 = 2048;
        double v32 = v5;
        __int16 v33 = 2048;
        double v34 = v9;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Forcing Audio FEC Level 100,150,200 at PLR:(%.2f, %.2f, %.2f) from defaults", buf, 0x3Au);
      }
    }
  }
  int v12 = *(_DWORD *)(a1 + 72);
  if (v12 >= 10000)
  {
    *(_DWORD *)(a1 + 20) = v12;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      uint64_t v14 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v24 = v13;
        __int16 v25 = 2080;
        int v26 = "ConfigureAFRCDefaults";
        __int16 v27 = 1024;
        int v28 = 5775;
        __int16 v29 = 1024;
        LODWORD(v30) = v15;
        _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Forcing AFRC TxCap to %u from defaults", buf, 0x22u);
      }
    }
  }
  int v16 = *(_DWORD *)(a1 + 68);
  if ((v16 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 44) = v16;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      int v18 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v19 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v24 = v17;
        __int16 v25 = 2080;
        int v26 = "ConfigureAFRCDefaults";
        __int16 v27 = 1024;
        int v28 = 5779;
        __int16 v29 = 1024;
        LODWORD(v30) = v19;
        _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Forcing AFRC TxRate to %u from defaults", buf, 0x22u);
      }
    }
  }
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"rateControlAllowVideoStop", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat) {
    int AppBooleanValue = *(unsigned __int8 *)(a1 + 9839);
  }
  *(unsigned char *)(a1 + 9836) = (*(_DWORD *)(a1 + 2948) | AppBooleanValue) != 0;
  BOOL result = VCDefaults_GetBoolValueForKey(@"rateControlAllowBurstyLossRampDown", *(unsigned __int8 *)(a1 + 9838));
  *(unsigned char *)(a1 + 9837) = result;
  return result;
}

uint64_t __AFRCCreateHandle_block_invoke(uint64_t a1, __CFDictionary *a2)
{
  uint64_t result = CheckInHandleDebug();
  if (result)
  {
    uint64_t v5 = result;
    if (a2)
    {
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v7 = *(unsigned int *)(result + 240);
      if (v7) {
        uint64_t v7 = (*(double *)(result + 192) / (double)v7);
      }
      CFStringRef v8 = CFStringCreateWithFormat(v6, 0, @"%u", v7);
      CFDictionaryAddValue(a2, @"PLR", v8);
      CFRelease(v8);
      uint64_t v9 = *(unsigned int *)(v5 + 240);
      if (v9) {
        uint64_t v9 = (*(double *)(v5 + 200) / (double)v9);
      }
      CFStringRef v10 = CFStringCreateWithFormat(v6, 0, @"%u", v9);
      CFDictionaryAddValue(a2, @"VPLR", v10);
      CFRelease(v10);
      CFStringRef v11 = CFStringCreateWithFormat(v6, 0, @"%u", *(unsigned int *)(v5 + 52));
      CFDictionaryAddValue(a2, @"RTT", v11);
      CFRelease(v11);
      CFStringRef v12 = CFStringCreateWithFormat(v6, 0, @"%u", *(unsigned int *)(v5 + 44) / 0x3E8uLL);
      CFDictionaryAddValue(a2, @"TTxR", v12);
      CFRelease(v12);
      CFStringRef v13 = CFStringCreateWithFormat(v6, 0, @"%u", (*(double *)(v5 + 680) / 1000.0));
      CFDictionaryAddValue(a2, @"DBE", v13);
      CFRelease(v13);
      if (*(unsigned char *)(v5 + 1037)) {
        uint64_t v14 = (*(double *)(v5 + 1000) / 1000.0);
      }
      else {
        uint64_t v14 = *(unsigned int *)(v5 + 252);
      }
      CFStringRef v20 = CFStringCreateWithFormat(v6, 0, @"%u", v14);
      CFDictionaryAddValue(a2, @"UBE", v20);
      CFRelease(v20);
      unsigned int v21 = (*(double *)(v5 + 672) / 1000.0);
      unsigned int v22 = *(_DWORD *)(v5 + 9824);
      if (v22 && v21 && (double)v22 / (double)v21 > 2.0 && v22 - v21 >= 0x2EF) {
        ++*(_DWORD *)(v5 + 9828);
      }
      *(_DWORD *)(v5 + 9824) = v21;
      CFStringRef v23 = CFStringCreateWithFormat(v6, 0, @"%u", *(unsigned int *)(v5 + 9828));
      CFDictionaryAddValue(a2, @"SBWD", v23);
      CFRelease(v23);
      uint64_t v24 = *(unsigned int *)(v5 + 9832);
      if (*(unsigned char *)(v5 + 9820))
      {
        uint64_t v24 = (v24 + 1);
        *(_DWORD *)(v5 + 9832) = v24;
      }
      *(unsigned char *)(v5 + 9820) = 0;
      CFStringRef v25 = CFStringCreateWithFormat(v6, 0, @"%u", v24);
      CFDictionaryAddValue(a2, @"RDMBL", v25);
      CFRelease(v25);
      CFStringRef v26 = CFStringCreateWithFormat(v6, 0, @"%u", *(unsigned int *)(v5 + 2980));
      CFDictionaryAddValue(a2, @"BbD", v26);
      CFRelease(v26);
      CFStringRef v27 = CFStringCreateWithFormat(v6, 0, @"%u", (*(_DWORD *)(v5 + 3036) + *(_DWORD *)(v5 + 3032)));
      CFDictionaryAddValue(a2, @"BbQ", v27);
      CFRelease(v27);
      CFStringRef v28 = CFStringCreateWithFormat(v6, 0, @"%d", *(char *)(v5 + 3031));
      CFDictionaryAddValue(a2, @"BTPw", v28);
      CFRelease(v28);
      LODWORD(v29) = *(_DWORD *)(v5 + 2968);
      CFStringRef v30 = CFStringCreateWithFormat(v6, 0, @"%5.1f", (double)v29 / 1000.0);
      CFDictionaryAddValue(a2, @"BbTx", v30);
      CFRelease(v30);
      LODWORD(v31) = *(_DWORD *)(v5 + 2964);
      CFStringRef v32 = CFStringCreateWithFormat(v6, 0, @"%5.1f", (double)v31 / 1000.0);
      CFDictionaryAddValue(a2, @"InTxR", v32);
      CFRelease(v32);
      CFStringRef v33 = CFStringCreateWithFormat(v6, 0, @"%u", *(unsigned int *)(v5 + 9616));
      CFDictionaryAddValue(a2, @"VPF", v33);
      CFRelease(v33);
      CFStringRef v34 = CFStringCreateWithFormat(v6, 0, @"%u", *(unsigned int *)(v5 + 9620));
      CFDictionaryAddValue(a2, @"APF", v34);
      CFRelease(v34);
      CFStringRef v35 = CFStringCreateWithFormat(v6, 0, @"%u", *(unsigned int *)(v5 + 268));
      CFDictionaryAddValue(a2, @"APRR", v35);
      CFRelease(v35);
      CFStringRef v36 = CFStringCreateWithFormat(v6, 0, @"%u", *(unsigned int *)(v5 + 272));
      CFDictionaryAddValue(a2, @"VPRR", v36);
      CFRelease(v36);
      uint64_t v37 = *(unsigned int *)(v5 + 240);
      if (v37) {
        uint64_t v37 = *(_DWORD *)(v5 + 224) / v37;
      }
      CFStringRef v38 = CFStringCreateWithFormat(v6, 0, @"%u", v37);
      CFDictionaryAddValue(a2, @"OVSBR", v38);
      CFRelease(v38);
      uint64_t v39 = *(unsigned int *)(v5 + 240);
      if (v39) {
        uint64_t v39 = *(_DWORD *)(v5 + 228) / v39;
      }
      CFStringRef v40 = CFStringCreateWithFormat(v6, 0, @"%u", v39);
      CFDictionaryAddValue(a2, @"UNSBR", v40);
      CFRelease(v40);
      uint64_t v41 = *(unsigned int *)(v5 + 240);
      if (v41) {
        uint64_t v41 = *(_DWORD *)(v5 + 232) / v41;
      }
      CFStringRef v42 = CFStringCreateWithFormat(v6, 0, @"%u", v41);
      CFDictionaryAddValue(a2, @"OVBWE", v42);
      CFRelease(v42);
      uint64_t v43 = *(unsigned int *)(v5 + 240);
      if (v43) {
        uint64_t v43 = *(_DWORD *)(v5 + 236) / v43;
      }
      CFStringRef v44 = CFStringCreateWithFormat(v6, 0, @"%u", v43);
      CFDictionaryAddValue(a2, @"UNBWE", v44);
      CFRelease(v44);
      uint64_t v45 = *(unsigned int *)(v5 + 240);
      if (v45) {
        uint64_t v45 = (*(double *)(v5 + 208) / (double)v45);
      }
      CFStringRef v46 = CFStringCreateWithFormat(v6, 0, @"%u", v45);
      CFDictionaryAddValue(a2, @"WRRTT", v46);
      CFRelease(v46);
      uint64_t v47 = *(unsigned int *)(v5 + 240);
      if (v47) {
        uint64_t v47 = (*(double *)(v5 + 216) / (double)v47);
      }
      CFStringRef v48 = CFStringCreateWithFormat(v6, 0, @"%u", v47);
      CFDictionaryAddValue(a2, @"WRBPL", v48);
      CFRelease(v48);
      pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 40) + 2560));
      unsigned int v49 = *(_DWORD *)(v5 + 2652);
      if (v49)
      {
        CFStringRef v50 = CFStringCreateWithFormat(v6, 0, @"%u", *(_DWORD *)(v5 + 2636) / v49);
        CFDictionaryAddValue(a2, @"RxPC", v50);
        CFRelease(v50);
        uint64_t v51 = (*(_DWORD *)(v5 + 2640) / *(_DWORD *)(v5 + 2652));
      }
      else
      {
        CFStringRef v52 = CFStringCreateWithFormat(v6, 0, @"%u", 0);
        CFDictionaryAddValue(a2, @"RxPC", v52);
        CFRelease(v52);
        uint64_t v51 = 0;
      }
      CFStringRef v53 = CFStringCreateWithFormat(v6, 0, @"%u", v51);
      CFDictionaryAddValue(a2, @"RxSC", v53);
      CFRelease(v53);
      if (v49)
      {
        CFStringRef v54 = CFStringCreateWithFormat(v6, 0, @"%u", (*(_DWORD *)(v5 + 2644) / *(_DWORD *)(v5 + 2652)));
        CFDictionaryAddValue(a2, @"TxPC", v54);
        CFRelease(v54);
        uint64_t v55 = (*(_DWORD *)(v5 + 2644) / *(_DWORD *)(v5 + 2652));
      }
      else
      {
        CFStringRef v56 = CFStringCreateWithFormat(v6, 0, @"%u", 0);
        CFDictionaryAddValue(a2, @"TxPC", v56);
        CFRelease(v56);
        uint64_t v55 = 0;
      }
      CFStringRef v57 = CFStringCreateWithFormat(v6, 0, @"%u", v55);
      CFDictionaryAddValue(a2, @"TxSC", v57);
      CFRelease(v57);
      *(_DWORD *)(v5 + 2636) = 0;
      *(void *)(v5 + 2640) = 0;
      *(_DWORD *)(v5 + 2652) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)(*(void *)(a1 + 40) + 2560));
      *(_OWORD *)(v5 + 192) = 0u;
      *(_OWORD *)(v5 + 20_Block_object_dispose(&STACK[0x250], 8) = 0u;
      *(_OWORD *)(v5 + 224) = 0u;
      *(_DWORD *)(v5 + 240) = 0;
      *(_OWORD *)(v5 + 960_Block_object_dispose(&STACK[0x250], 8) = 0u;
    }
    else
    {
      float64x2_t v15 = vmlaq_f64(*(float64x2_t *)(result + 192), (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL), *(float64x2_t *)(result + 176));
      double v16 = *(double *)(result + 216);
      double v17 = *(double *)(result + 208) + *(double *)(result + 56) * 1000.0;
      *(float64x2_t *)(result + 192) = v15;
      *(void *)(result + 56) = 0;
      LODWORD(v15.f64[0]) = *(_DWORD *)(result + 64);
      *(double *)(result + 20_Block_object_dispose(&STACK[0x250], 8) = v17;
      *(double *)(result + 216) = v16 + (double)*(unint64_t *)&v15.f64[0];
      *(_DWORD *)(result + 64) = 0;
      if (!*(_DWORD *)(result + 2404))
      {
        unsigned int v18 = 1000 * *(_DWORD *)(result + 252);
        unsigned int v19 = *(_DWORD *)(result + 44);
        if (v19 >= v18) {
          *(_DWORD *)(result + 232) += (v19 - v18) / 0x3E8;
        }
        else {
          *(_DWORD *)(result + 236) += (v18 - v19) / 0x3E8;
        }
        unsigned int v58 = *(_DWORD *)(*(void *)(a1 + 40) + 1392) + *(_DWORD *)(*(void *)(a1 + 40) + 1388);
        if (v58 >= v19) {
          *(_DWORD *)(result + 224) += (v58 - v19) / 0x3E8;
        }
        else {
          *(_DWORD *)(result + 228) += (v19 - v58) / 0x3E8;
        }
      }
      ++*(_DWORD *)(result + 240);
    }
    return CheckOutHandleDebug();
  }
  return result;
}

uint64_t AFRCUpdateOperatingMode(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t v7 = CheckInHandleDebug();
  if (!v7) {
    return 2149646338;
  }
  *(_DWORD *)(v7 + 2944) = a3;
  *(_DWORD *)(v7 + 9696) = a2;
  *(unsigned char *)(v7 + 9701) = a4;
  if (a2)
  {
    *(_DWORD *)(v7 + 40) = 0;
    *(void *)(v7 + 2464) = 0x4000000000000000;
    *(void *)(v7 + 2456) = 0x3FF0000000000000;
    *(_DWORD *)(v7 + 2480) = 0;
  }
  else
  {
    double v9 = 2.0;
    if (!*(_DWORD *)(v7 + 2948))
    {
      double v9 = 1.0;
      if (!*(_DWORD *)(v7 + 2952) && *(_DWORD *)(v7 + 2932) && ((*(_DWORD *)(v7 + 2940) - 2) & 0xFFFFFFFD) == 0) {
        double v9 = 2.0;
      }
    }
    *(double *)(v7 + 2464) = v9;
    *(_DWORD *)(v7 + 40) = 0;
    *(_DWORD *)(v7 + 2480) = 1;
    if (*(_DWORD *)(v7 + 1400) != 1 && (*(unsigned char *)(v7 + 1396) & 2) == 0) {
      *(void *)(v7 + 1396) = 0x100000005;
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCCloseHandle()
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149646338;
  }
  uint64_t v1 = v0;
  CheckOutHandleDebug();
  reportingUnregisterPeriodicTask();
  if (*(void *)(v1 + 2832) || *(void *)(v1 + 2840) || *(void *)(v1 + 2848))
  {
    *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v87 = v2;
    *(_OWORD *)&buf[80] = v2;
    long long v86 = v2;
    *(_OWORD *)&unsigned char buf[48] = v2;
    *(_OWORD *)&buf[64] = v2;
    *(_OWORD *)&buf[16] = v2;
    *(_OWORD *)&buf[32] = v2;
    *(_OWORD *)CMTime buf = v2;
    micro();
    cStr = (char *)0xAAAAAAAAAAAAAAAALL;
    VRLogfileGetTimestamp(buf, 0x80u);
    memset(v84, 170, 12);
    __sprintf_chk(v84, 0, 0xCuLL, "%010u", *(_DWORD *)(v1 + 2824));
    double v9 = reportingGetUploadFlag()
       ? openLogDump(0, (uint64_t)v84, 0, (uint64_t)"AFRC-DashBoard.dump", 0, &cStr)
       : 0;
    VRLogfilePrintSync(*(FILE ***)(v1 + 2832), "%s\t%8.3f\tEndOfFile\n", v3, v4, v5, v6, v7, v8, (char)buf);
    VRLogfileGetFilePointer(*(void *)(v1 + 2832));
    AFRCLog_TailFile((uint64_t)v9);
    VRLogfileFree((uint64_t *)(v1 + 2832));
    VRLogfilePrintSync(*(FILE ***)(v1 + 2840), "%s\t%8.3f\tEndOfFile\n", v11, v12, v13, v14, v15, v16, (char)buf);
    VRLogfileGetFilePointer(*(void *)(v1 + 2840));
    AFRCLog_TailFile((uint64_t)v9);
    VRLogfileFree((uint64_t *)(v1 + 2840));
    VRLogfilePrintSync(*(FILE ***)(v1 + 2848), "%s\t%8.3f\tEndOfFile\n", v17, v18, v19, v20, v21, v22, (char)buf);
    VRLogfileGetFilePointer(*(void *)(v1 + 2848));
    AFRCLog_TailFile((uint64_t)v9);
    VRLogfileFree((uint64_t *)(v1 + 2848));
    pthread_mutex_lock(&g_fpStallModeDumpOpenCloseLock);
    VRLogfileFree(&g_fpStallModeDump);
    pthread_mutex_unlock(&g_fpStallModeDumpOpenCloseLock);
    if (v9)
    {
      fclose(v9);
      CFStringRef v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
      reportingUploadFileWithName();
      if (v23) {
        CFRelease(v23);
      }
      free(cStr);
    }
  }
  RateMonitorDestroy(*(void ***)(v1 + 9768));
  RateMonitorDestroy(*(void ***)(v1 + 9784));
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 2864));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 2560));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 2744));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 280));
  if (g_iBWEstLogLevel)
  {
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    CFStringRef v26 = (unsigned char *)MEMORY[0x1E4F47A40];
    CFStringRef v27 = (NSObject **)MEMORY[0x1E4F47A50];
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      unint64_t v29 = *v27;
      CFStringRef v30 = *v27;
      if (*v26)
      {
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = *(_DWORD *)(v1 + 1128);
          int v32 = *(_DWORD *)(v1 + 1136);
          int v33 = *(unsigned __int16 *)(v1 + 1132);
          int v34 = *(_DWORD *)(v1 + 1140);
          int v35 = *(_DWORD *)(v1 + 1148);
          int v36 = *(unsigned __int16 *)(v1 + 1144);
          double v37 = *(double *)(v1 + 1152);
          int v38 = *(_DWORD *)(v1 + 1160);
          *(_DWORD *)CMTime buf = 136317698;
          *(void *)&uint8_t buf[4] = v28;
          *(_WORD *)&uint8_t buf[12] = 2080;
          *(void *)&buf[14] = "BWEstUninit";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 5966;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v31;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v32;
          *(_WORD *)&buf[40] = 1024;
          *(_DWORD *)&buf[42] = v33;
          *(_WORD *)&buf[46] = 1024;
          *(_DWORD *)&unsigned char buf[48] = v34;
          *(_WORD *)&_OWORD buf[52] = 1024;
          *(_DWORD *)&buf[54] = v35;
          *(_WORD *)&buf[58] = 1024;
          *(_DWORD *)&buf[60] = v36;
          *(_WORD *)&buf[64] = 2048;
          *(double *)&buf[66] = v37 / (double)v38;
          *(_WORD *)&buf[74] = 1024;
          *(_DWORD *)&buf[76] = v38;
          _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ////////////////// Loss event reports //////////////////////////\n///// Video: %d/%d\tlast seq#: %d \t\t Audio: %d/%d last seq#: %d\n///// Avg. BW: %f  \t  with %d reports\n///////////////////////////////////////////////////////\n", buf, 0x50u);
        }
      }
      else if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        AFRCCloseHandle_cold_1();
      }
    }
    double v39 = *(double *)(v1 + 1192);
    double v40 = *(double *)(v1 + 1184);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      double v41 = v39 - v40;
      uint64_t v42 = VRTraceErrorLogLevelToCSTR();
      uint64_t v43 = *v27;
      CFStringRef v44 = *v27;
      if (*v26)
      {
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v45 = *(void *)(v1 + 1168);
          int v46 = *(_DWORD *)(v1 + 1136);
          int v47 = (int)((double)v45 / (double)v46);
          double v48 = (double)v45 * 0.0009765625;
          double v49 = (double)(8 * v45) / v41;
          uint64_t v50 = *(void *)(v1 + 1176);
          int v51 = *(_DWORD *)(v1 + 1148);
          *(_DWORD *)CMTime buf = 136318466;
          *(void *)&uint8_t buf[4] = v42;
          *(_WORD *)&uint8_t buf[12] = 2080;
          *(void *)&buf[14] = "BWEstUninit";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 5975;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v41;
          *(_WORD *)&buf[38] = 2048;
          *(double *)&buf[40] = v48;
          *(_WORD *)&unsigned char buf[48] = 1024;
          *(_DWORD *)&buf[50] = v46;
          *(_WORD *)&buf[54] = 1024;
          *(_DWORD *)&buf[56] = v47;
          *(_WORD *)&buf[60] = 2048;
          *(double *)&buf[62] = v49;
          *(_WORD *)&buf[70] = 2048;
          *(double *)&buf[72] = (double)v46 / v41;
          *(_WORD *)&buf[80] = 2048;
          *(double *)&buf[82] = (double)v50 * 0.0009765625;
          *(_WORD *)&buf[90] = 1024;
          *(_DWORD *)&buf[92] = v51;
          LOWORD(v86) = 1024;
          *(_DWORD *)((char *)&v86 + 2) = (int)((double)v50 / (double)v51);
          WORD3(v86) = 2048;
          *((double *)&v86 + 1) = (double)(8 * v50) / v41;
          LOWORD(v87) = 2048;
          *(double *)((char *)&v87 + 2) = (double)v51 / v41;
          _os_log_impl(&dword_1E1EA4000, v43, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d //////\n////// In %.1f seconds: Video: %f KB/%d = %d B  avg. %.1f kbits/s  %.1f pkts/s \n//////                  Audio: %f KB/%d = %d B  avg. %.1f kbits/s  %.1f pkts/s \n", buf, 0x7Au);
        }
      }
      else if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v67 = *(void *)(v1 + 1168);
        int v68 = *(_DWORD *)(v1 + 1136);
        int v69 = (int)((double)v67 / (double)v68);
        double v70 = (double)v67 * 0.0009765625;
        double v71 = (double)(8 * v67) / v41;
        uint64_t v72 = *(void *)(v1 + 1176);
        int v73 = *(_DWORD *)(v1 + 1148);
        *(_DWORD *)CMTime buf = 136318466;
        *(void *)&uint8_t buf[4] = v42;
        *(_WORD *)&uint8_t buf[12] = 2080;
        *(void *)&buf[14] = "BWEstUninit";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 5975;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v41;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&buf[40] = v70;
        *(_WORD *)&unsigned char buf[48] = 1024;
        *(_DWORD *)&buf[50] = v68;
        *(_WORD *)&buf[54] = 1024;
        *(_DWORD *)&buf[56] = v69;
        *(_WORD *)&buf[60] = 2048;
        *(double *)&buf[62] = v71;
        *(_WORD *)&buf[70] = 2048;
        *(double *)&buf[72] = (double)v68 / v41;
        *(_WORD *)&buf[80] = 2048;
        *(double *)&buf[82] = (double)v72 * 0.0009765625;
        *(_WORD *)&buf[90] = 1024;
        *(_DWORD *)&buf[92] = v73;
        LOWORD(v86) = 1024;
        *(_DWORD *)((char *)&v86 + 2) = (int)((double)v72 / (double)v73);
        WORD3(v86) = 2048;
        *((double *)&v86 + 1) = (double)(8 * v72) / v41;
        LOWORD(v87) = 2048;
        *(double *)((char *)&v87 + 2) = (double)v73 / v41;
        _os_log_debug_impl(&dword_1E1EA4000, v43, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d //////\n////// In %.1f seconds: Video: %f KB/%d = %d B  avg. %.1f kbits/s  %.1f pkts/s \n//////                  Audio: %f KB/%d = %d B  avg. %.1f kbits/s  %.1f pkts/s \n", buf, 0x7Au);
      }
    }
    double v52 = *(double *)(v1 + 1224);
    double v53 = *(double *)(v1 + 1216);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      double v54 = v52 - v53;
      uint64_t v55 = VRTraceErrorLogLevelToCSTR();
      CFStringRef v56 = *v27;
      CFStringRef v57 = *v27;
      if (*v26)
      {
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          int v58 = *(_DWORD *)(v1 + 1208);
          double v59 = *(double *)(v1 + 1200) / (double)v58;
          int v60 = *(_DWORD *)(v1 + 1232);
          double v61 = (double)v60 * 0.0009765625;
          int v62 = *(_DWORD *)(v1 + 1236);
          int v63 = (int)((double)v60 / (double)v62);
          double v64 = (double)(8 * v60) / v54;
          int v65 = *(_DWORD *)(v1 + 1240);
          int v66 = *(_DWORD *)(v1 + 1244);
          *(_DWORD *)CMTime buf = 136318978;
          *(void *)&uint8_t buf[4] = v55;
          *(_WORD *)&uint8_t buf[12] = 2080;
          *(void *)&buf[14] = "BWEstUninit";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 5987;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v59;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v58;
          *(_WORD *)&buf[44] = 2048;
          *(double *)&buf[46] = v54;
          *(_WORD *)&buf[54] = 2048;
          *(double *)&buf[56] = v61;
          *(_WORD *)&buf[64] = 1024;
          *(_DWORD *)&buf[66] = v62;
          *(_WORD *)&buf[70] = 1024;
          *(_DWORD *)&buf[72] = v63;
          *(_WORD *)&buf[76] = 2048;
          *(double *)&buf[78] = v64;
          *(_WORD *)&buf[86] = 2048;
          *(double *)&buf[88] = (double)v62 / v54;
          LOWORD(v86) = 2048;
          *(double *)((char *)&v86 + 2) = (double)v65 * 0.0009765625;
          WORD5(v86) = 1024;
          HIDWORD(v86) = v66;
          LOWORD(v87) = 1024;
          *(_DWORD *)((char *)&v87 + 2) = (int)((double)v65 / (double)v66);
          WORD3(v87) = 2048;
          *((double *)&v87 + 1) = (double)(8 * v65) / v54;
          __int16 v88 = 2048;
          double v89 = (double)v66 / v54;
          _os_log_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d \n///// Avg. BW (ORG Scheme): %f  \t  with %d reports\n////// In %.1f seconds: Video: %f KB/%d = %d B  avg. %.1f kbits/s  %.1f pkts/s \n//////                  Audio: %f KB/%d = %d B  avg. %.1f kbits/s  %.1f pkts/s \n///////////////////////////////////////////////////////\n", buf, 0x8Au);
        }
      }
      else if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        int v74 = *(_DWORD *)(v1 + 1208);
        double v75 = *(double *)(v1 + 1200) / (double)v74;
        int v76 = *(_DWORD *)(v1 + 1232);
        double v77 = (double)v76 * 0.0009765625;
        int v78 = *(_DWORD *)(v1 + 1236);
        int v79 = (int)((double)v76 / (double)v78);
        double v80 = (double)(8 * v76) / v54;
        int v81 = *(_DWORD *)(v1 + 1240);
        int v82 = *(_DWORD *)(v1 + 1244);
        *(_DWORD *)CMTime buf = 136318978;
        *(void *)&uint8_t buf[4] = v55;
        *(_WORD *)&uint8_t buf[12] = 2080;
        *(void *)&buf[14] = "BWEstUninit";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 5987;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v75;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v74;
        *(_WORD *)&buf[44] = 2048;
        *(double *)&buf[46] = v54;
        *(_WORD *)&buf[54] = 2048;
        *(double *)&buf[56] = v77;
        *(_WORD *)&buf[64] = 1024;
        *(_DWORD *)&buf[66] = v78;
        *(_WORD *)&buf[70] = 1024;
        *(_DWORD *)&buf[72] = v79;
        *(_WORD *)&buf[76] = 2048;
        *(double *)&buf[78] = v80;
        *(_WORD *)&buf[86] = 2048;
        *(double *)&buf[88] = (double)v78 / v54;
        LOWORD(v86) = 2048;
        *(double *)((char *)&v86 + 2) = (double)v81 * 0.0009765625;
        WORD5(v86) = 1024;
        HIDWORD(v86) = v82;
        LOWORD(v87) = 1024;
        *(_DWORD *)((char *)&v87 + 2) = (int)((double)v81 / (double)v82);
        WORD3(v87) = 2048;
        *((double *)&v87 + 1) = (double)(8 * v81) / v54;
        __int16 v88 = 2048;
        double v89 = (double)v82 / v54;
        _os_log_debug_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d \n///// Avg. BW (ORG Scheme): %f  \t  with %d reports\n////// In %.1f seconds: Video: %f KB/%d = %d B  avg. %.1f kbits/s  %.1f pkts/s \n//////                  Audio: %f KB/%d = %d B  avg. %.1f kbits/s  %.1f pkts/s \n///////////////////////////////////////////////////////\n", buf, 0x8Au);
      }
    }
  }
  VCPacketFilterGetCMBaseObject(v1 + 872, v24);
  free((void *)v1);
  return 0;
}

uint64_t AFRCSetTxCap(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a2 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      AFRCSetTxCap_cold_1();
    }
  }
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  int v5 = *(_DWORD *)(v3 + 72);
  if (v5 >= 10000)
  {
    if (*(_DWORD *)(v3 + 2816))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        uint64_t v7 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v18 = 136315906;
          uint64_t v19 = v6;
          __int16 v20 = 2080;
          uint64_t v21 = "AFRCSetTxCap";
          __int16 v22 = 1024;
          int v23 = 1594;
          __int16 v24 = 1024;
          int v25 = v5;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: Forcing AFRC TxCap to %u from defaults", (uint8_t *)&v18, 0x22u);
        }
      }
    }
    unsigned int v2 = v5;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    double v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(v4 + 20);
      int v18 = 136316162;
      uint64_t v19 = v8;
      __int16 v20 = 2080;
      uint64_t v21 = "AFRCSetTxCap";
      __int16 v22 = 1024;
      int v23 = 1597;
      __int16 v24 = 1024;
      int v25 = v10;
      __int16 v26 = 1024;
      unsigned int v27 = v2;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ### AFRCSetTxCap: (%u->%u)", (uint8_t *)&v18, 0x28u);
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 2560));
  *(_DWORD *)(v4 + 20) = v2;
  *(_DWORD *)(v4 + 24) = v2;
  int v11 = *(_DWORD *)(v4 + 28);
  unsigned int v12 = g_adwTxRateTiers[v11];
  if (v12 <= v2)
  {
    int v14 = *(_DWORD *)(v4 + 28);
  }
  else
  {
    uint64_t v13 = *(int *)(v4 + 40);
    if (v11 >= (int)v13) {
      int v14 = *(_DWORD *)(v4 + 40);
    }
    else {
      int v14 = *(_DWORD *)(v4 + 28);
    }
    if (v11 > (int)v13)
    {
      uint64_t v15 = v11;
      int v16 = v11 - 1;
      while (1)
      {
        *(_DWORD *)(v4 + 2_Block_object_dispose(&STACK[0x250], 8) = v16;
        unsigned int v12 = g_adwTxRateTiers[v15 - 1];
        if (v12 <= v2) {
          break;
        }
        --v15;
        --v16;
        if (v15 <= v13) {
          goto LABEL_27;
        }
      }
      int v14 = v16;
    }
  }
LABEL_27:
  *(_DWORD *)(v4 + 36) = v14;
  *(_DWORD *)(v4 + 44) = v12;
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 2560));
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetLastEchoedMyTxTS(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  if (a2) {
    *a2 = *(_DWORD *)(v3 + 260);
  }
  CheckOutHandleDebug();
  return 0;
}

void UpdateRxEstimate(uint64_t a1, int a2, int a3, int *a4, int a5, double a6, double a7, double a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 316))
  {
    UpdateRxEstimate_v1(a1, a2, a3, a4, a6, a7, a8);
    *(void *)(a1 + 224) = *(void *)(a1 + 280);
    return;
  }
  if (*(unsigned char *)(a1 + 317))
  {
    int v56 = -1;
    UpdateRxEstimate_v1(a1, a2, a3, &v56, a6, a7, a8);
  }
  int v16 = *(_DWORD *)(a1 + 8);
  if (v16 == 2) {
    int v17 = 0;
  }
  else {
    int v17 = 3;
  }
  double v18 = *(double *)(a1 + 224);
  if (v18 != 0.0)
  {
    if (!a2 || a3 <= 249)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v31 = VRTraceErrorLogLevelToCSTR();
        int v32 = *MEMORY[0x1E4F47A50];
        int v33 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            int v56 = 136316418;
            uint64_t v57 = v31;
            __int16 v58 = 2080;
            double v59 = "UpdateRxEstimate";
            __int16 v60 = 1024;
            int v61 = 1909;
            __int16 v62 = 1024;
            int v63 = a3;
            __int16 v64 = 2048;
            double v65 = a7;
            __int16 v66 = 1024;
            int v67 = a2;
            _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d *!*!*!* UpdateRxEstimate: too short Seq; ------ dBWD: 0 (%d/%f/%d) ",
              (uint8_t *)&v56,
              0x32u);
          }
        }
        else if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          int v56 = 136316418;
          uint64_t v57 = v31;
          __int16 v58 = 2080;
          double v59 = "UpdateRxEstimate";
          __int16 v60 = 1024;
          int v61 = 1909;
          __int16 v62 = 1024;
          int v63 = a3;
          __int16 v64 = 2048;
          double v65 = a7;
          __int16 v66 = 1024;
          int v67 = a2;
          _os_log_debug_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d *!*!*!* UpdateRxEstimate: too short Seq; ------ dBWD: 0 (%d/%f/%d) ",
            (uint8_t *)&v56,
            0x32u);
        }
      }
      return;
    }
    if (dbl_1E259C2A0[v16 == 2] <= a7)
    {
      *(_DWORD *)(a1 + 256) = 0;
    }
    else
    {
      int v25 = *(_DWORD *)(a1 + 256);
      if (v25 < v17) {
        *(_DWORD *)(a1 + 256) = ++v25;
      }
      if (v25 < v17) {
        return;
      }
    }
  }
  if (a6 <= 0.0) {
    return;
  }
  double v19 = 400000.0;
  if (a5) {
    double v19 = 800000.0;
  }
  if (v16 != 2) {
    double v19 = 5000000.0;
  }
  if (v19 >= a6) {
    double v20 = a6;
  }
  else {
    double v20 = v19;
  }
  *(double *)(a1 + 432) = *(double *)(a1 + 432) + a6;
  ++*(_DWORD *)(a1 + 440);
  if (v16 == 2)
  {
    if (!*(unsigned char *)(a1 + 13))
    {
      double v35 = v19 * 0.5;
      if (v20 <= v19 * 0.5) {
        double v35 = v20;
      }
      double v36 = v35 + *(double *)(a1 + 232);
      *(double *)(a1 + 232) = v36;
      int v37 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)(a1 + 240) = v37 + 1;
      if (v37 > 8 || a8 - *(double *)(a1 + 248) >= 7.0)
      {
        *(unsigned char *)(a1 + 13) = 1;
        *(double *)(a1 + 224) = v36 / (double)(v37 + 1);
        *(void *)(a1 + 24_Block_object_dispose(&STACK[0x250], 8) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      return;
    }
    double v21 = 7.0;
    double v22 = 10.0;
    unsigned int v23 = 6;
    double v24 = 100000.0;
  }
  else
  {
    if (v16 == 1) {
      unsigned int v23 = 4;
    }
    else {
      unsigned int v23 = 3;
    }
    double v24 = 0.0;
    double v22 = 4.0;
    if (v16 != 1) {
      double v22 = 0.0;
    }
    double v21 = v22;
  }
  BOOL v26 = v20 <= v18 * 0.5;
  if (v18 - v20 > 200000.0) {
    BOOL v26 = 1;
  }
  BOOL v27 = v20 - v18 > 200000.0 || v20 >= v18 * 1.5;
  BOOL v28 = v18 - v20 > v24 && v26;
  BOOL v29 = v20 - v18 > v24 && v27;
  if (v18 == 0.0)
  {
    double v30 = 100000.0;
    if (v20 >= 100000.0) {
      double v30 = v20;
    }
    *(double *)(a1 + 224) = v30;
    *a4 = 0;
    return;
  }
  if (!v28 && !v29)
  {
    if (v16 == 2)
    {
      uint64_t v38 = *(unsigned int *)(a1 + 136);
      if ((int)v38 >= 1)
      {
        double v39 = (int *)(a1 + 16);
        do
        {
          int v40 = *v39++;
          double v18 = (double)v40 * 0.05 + v18 * 0.95;
          --v38;
        }
        while (v38);
        *(_DWORD *)(a1 + 136) = 0;
      }
      double v41 = v20 * 0.075;
      double v42 = 0.925;
    }
    else
    {
      double v41 = v20 * 0.1;
      double v42 = 0.9;
    }
    *(double *)(a1 + 224) = v41 + v18 * v42;
    *(_DWORD *)(a1 + 240) = 0;
    *(void *)(a1 + 232) = 0;
    int v45 = 1;
    goto LABEL_108;
  }
  if ((v16 - 1) > 1)
  {
    BOOL v34 = 0;
  }
  else
  {
    if (*(int *)(a1 + 240) < 0) {
      double v22 = v21;
    }
    BOOL v34 = a8 - *(double *)(a1 + 248) < v22;
  }
  if (v28)
  {
    int v43 = *(_DWORD *)(a1 + 240);
    if (v43 < 0)
    {
      int v44 = v43 - 1;
    }
    else
    {
      *(void *)(a1 + 232) = 0;
      *(double *)(a1 + 24_Block_object_dispose(&STACK[0x250], 8) = a8;
      int v44 = -1;
    }
    *(_DWORD *)(a1 + 240) = v44;
    int v48 = -10;
  }
  else
  {
    if (!v29) {
      goto LABEL_86;
    }
    int v46 = *(_DWORD *)(a1 + 240);
    if (v46 <= 0)
    {
      *(void *)(a1 + 232) = 0;
      *(double *)(a1 + 24_Block_object_dispose(&STACK[0x250], 8) = a8;
      int v47 = 1;
    }
    else
    {
      int v47 = v46 + 1;
    }
    *(_DWORD *)(a1 + 240) = v47;
    int v48 = 10;
  }
  *a4 = v48;
LABEL_86:
  double v49 = v20 + *(double *)(a1 + 232);
  *(double *)(a1 + 232) = v49;
  int v50 = *(_DWORD *)(a1 + 240);
  if (v50 < 0) {
    int v50 = -v50;
  }
  if (v16 == 2)
  {
    uint64_t v51 = *(int *)(a1 + 136);
    if ((int)v51 <= 29)
    {
      *(_DWORD *)(a1 + 4 * v51 + 16) = (int)v20;
      ++*(_DWORD *)(a1 + 136);
    }
    char v52 = v50 < v23 || v34;
    if ((v52 & 1) == 0)
    {
      double v53 = v49 / (double)v50;
      if ((*(_DWORD *)(a1 + 240) & 0x80000000) == 0) {
        double v53 = v53 * 0.9 + v18 * 0.1;
      }
      goto LABEL_102;
    }
  }
  else
  {
    char v54 = v50 < v23 || v34;
    if ((v54 & 1) == 0)
    {
      double v53 = v49 / (double)v50;
LABEL_102:
      *(double *)(a1 + 224) = v53;
      *(_DWORD *)(a1 + 240) = 0;
      *(void *)(a1 + 232) = 0;
      if (*a4 == -10) {
        int v55 = -100;
      }
      else {
        int v55 = 200;
      }
      if (*a4 == 10) {
        int v45 = 100;
      }
      else {
        int v45 = v55;
      }
LABEL_108:
      *a4 = v45;
    }
  }
}

uint64_t UpdateRxEstimate_v1(uint64_t result, int a2, int a3, int *a4, double a5, double a6, double a7)
{
  double v8 = *(double *)(result + 280);
  if (v8 != 0.0)
  {
    if (!a2 || a3 < 250) {
      return result;
    }
    if (a6 >= 0.008)
    {
      *(_DWORD *)(result + 312) = 0;
    }
    else
    {
      int v14 = *(_DWORD *)(result + 312);
      if (v14 <= 2)
      {
        *(_DWORD *)(result + 312) = v14 + 1;
        if (v14 != 2) {
          return result;
        }
      }
    }
  }
  if (a5 <= 0.0) {
    return result;
  }
  double v9 = 2300000.0;
  if (a5 <= 2300000.0) {
    double v9 = a5;
  }
  BOOL v10 = v9 <= v8 * 0.5;
  if (v8 - v9 > 200000.0) {
    BOOL v10 = 1;
  }
  BOOL v11 = v9 >= v8 * 1.5;
  if (v9 - v8 > 200000.0) {
    BOOL v11 = 1;
  }
  if (v8 == 0.0)
  {
    int v12 = 0;
    double v13 = 100000.0;
    if (v9 >= 100000.0) {
      double v13 = v9;
    }
    *(double *)(result + 280) = v13;
    goto LABEL_43;
  }
  if (!v10 && !v11)
  {
    *(double *)(result + 280) = v9 * 0.1 + v8 * 0.9;
    *(_DWORD *)(result + 296) = 0;
    *(void *)(result + 28_Block_object_dispose(&STACK[0x250], 8) = 0;
    int v12 = 1;
LABEL_43:
    *a4 = v12;
    return result;
  }
  if (v10)
  {
    int v15 = *(_DWORD *)(result + 296);
    if (v15 < 0)
    {
      int v16 = v15 - 1;
    }
    else
    {
      *(void *)(result + 28_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(double *)(result + 304) = a7;
      int v16 = -1;
    }
    *(_DWORD *)(result + 296) = v16;
    int v19 = -10;
  }
  else
  {
    if (!v11) {
      goto LABEL_34;
    }
    int v17 = *(_DWORD *)(result + 296);
    if (v17 <= 0)
    {
      *(void *)(result + 28_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(double *)(result + 304) = a7;
      int v18 = 1;
    }
    else
    {
      int v18 = v17 + 1;
    }
    *(_DWORD *)(result + 296) = v18;
    int v19 = 10;
  }
  *a4 = v19;
LABEL_34:
  double v20 = v9 + *(double *)(result + 288);
  *(double *)(result + 28_Block_object_dispose(&STACK[0x250], 8) = v20;
  int v21 = *(_DWORD *)(result + 296);
  if (v21 < 0) {
    int v21 = -v21;
  }
  if (v21 >= 3)
  {
    *(double *)(result + 280) = v20 / (double)v21;
    *(_DWORD *)(result + 296) = 0;
    *(void *)(result + 28_Block_object_dispose(&STACK[0x250], 8) = 0;
    if (*a4 == -10) {
      int v22 = -100;
    }
    else {
      int v22 = 200;
    }
    if (*a4 == 10) {
      int v12 = 100;
    }
    else {
      int v12 = v22;
    }
    goto LABEL_43;
  }
  return result;
}

uint64_t AFRCCalcRxEstimate(double a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = CheckInHandleDebug();
  if (!v14) {
    return 2149646338;
  }
  uint64_t v15 = v14;
  int v16 = (pthread_mutex_t *)(v14 + 280);
  pthread_mutex_lock((pthread_mutex_t *)(v14 + 280));
  bzero(v138, 0x400uLL);
  if (!*(unsigned char *)(v15 + 721))
  {
    BOOL v43 = 1;
    goto LABEL_94;
  }
  if (!*(unsigned char *)(v15 + 980))
  {
    int v17 = a8 - 1;
    if (!a7) {
      int v17 = a4;
    }
    *(_DWORD *)(v15 + 984) = v17;
    *(_DWORD *)(v15 + 1256) = a4 - 1;
    *(_DWORD *)(v15 + 1260) = a4 - 1;
    *(double *)(v15 + 1264) = a1;
    *(_DWORD *)(v15 + 1356) = 0;
    *(void *)(v15 + 1272) = 0;
    *(unsigned char *)(v15 + 733) = 0;
    *(double *)(v15 + 96_Block_object_dispose(&STACK[0x250], 8) = a1;
    *(_DWORD *)(v15 + 960) = 0;
    *(_DWORD *)(v15 + 856) = 0;
    *(unsigned char *)(v15 + 980) = 1;
  }
  int v18 = (_DWORD *)&unk_1EADC8000;
  if (*(unsigned char *)(v15 + 1248))
  {
    int v19 = *(_DWORD *)(v15 + 1256);
    if (v19 == a4 || v19 == *(_DWORD *)(v15 + 1260))
    {
LABEL_44:
      if (a3 == 1)
      {
        int v48 = *(_DWORD *)(v15 + 1356);
        if (!v48) {
          *(double *)(v15 + 1360) = a1;
        }
        *(double *)(v15 + 136_Block_object_dispose(&STACK[0x250], 8) = a1;
        *(_DWORD *)(v15 + 1356) = v48 + a6;
        *(unsigned char *)(v15 + 1376) = a7;
        *(_DWORD *)(v15 + 1256) = a4;
      }
      goto LABEL_48;
    }
    double v20 = *(double *)(v15 + 944);
    double v21 = *(double *)(v15 + 1368) - *(double *)(v15 + 1360);
    double v22 = 0.0;
    if (v20 > 0.0) {
      double v22 = (double)(8 * *(_DWORD *)(v15 + 1356)) / v20;
    }
    if (v22 > v21) {
      double v21 = v22;
    }
    if (v21 >= 0.1)
    {
      uint64_t v23 = *(int *)(v15 + 1272);
      if ((int)v23 <= 14)
      {
        uint64_t v24 = v15 + 1256 + 2 * v23;
        *(_WORD *)(v24 + 24) = *(_DWORD *)(v15 + 1356);
        *(_WORD *)(v24 + 54) = (int)(v21 * 1000.0);
        *(unsigned char *)(v15 + 1256 + v23 + 84) = *(unsigned char *)(v15 + 1376);
        int v18 = (_DWORD *)&unk_1EADC8000;
      }
      *(_DWORD *)(v15 + 1272) = v23 + 1;
    }
    ++*(_DWORD *)(v15 + 1276);
    if (a1 - *(double *)(v15 + 1264) <= 5.0)
    {
LABEL_43:
      *(_DWORD *)(v15 + 1260) = v19;
      *(_DWORD *)(v15 + 1356) = 0;
      goto LABEL_44;
    }
    int v25 = *(_DWORD *)(v15 + 1272);
    if (v25 < 1)
    {
LABEL_42:
      *(_DWORD *)(v15 + 1276) = 0;
      *(double *)(v15 + 1264) = a1;
      goto LABEL_43;
    }
    __int16 v134 = v16;
    int v135 = a6;
    uint64_t v26 = 0;
    memset(v155, 170, 18);
    *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v154 = v27;
    *(_OWORD *)&v154[15] = v27;
    *(_OWORD *)&v153[241] = v27;
    *(_OWORD *)&v153[225] = v27;
    *(_OWORD *)&v153[209] = v27;
    *(_OWORD *)&v153[193] = v27;
    *(_OWORD *)&v153[177] = v27;
    *(_OWORD *)&v153[161] = v27;
    *(_OWORD *)&v153[145] = v27;
    *(_OWORD *)&v153[129] = v27;
    *(_OWORD *)&v153[113] = v27;
    *(_OWORD *)&v153[97] = v27;
    *(_OWORD *)&v153[81] = v27;
    *(_OWORD *)&v153[65] = v27;
    *(_OWORD *)&v153[49] = v27;
    *(_OWORD *)&v153[33] = v27;
    *(_OWORD *)&v153[17] = v27;
    if (v25 >= 0xF) {
      uint64_t v28 = 15;
    }
    else {
      uint64_t v28 = v25;
    }
    uint64_t v29 = v15 + 1340;
    *(_OWORD *)&v153[1] = v27;
    v153[0] = 0;
    do
    {
      uint64_t v30 = v29 + 2 * v26;
      int v31 = *(unsigned __int16 *)(v30 - 30);
      int v32 = *(unsigned __int16 *)(v30 - 60);
      if (*(unsigned char *)(v29 + v26)) {
        uint64_t v33 = 33;
      }
      else {
        uint64_t v33 = 32;
      }
      __sprintf_chk(v155, 0, 0x12uLL, "%ums(%u)%c ", v31, v32, v33);
      __strlcat_chk();
      ++v26;
    }
    while (v28 != v26);
    int v34 = g_iBWEstLogLevel;
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v34)
    {
      int v16 = v134;
      if (ErrorLogLevelForModule < 8) {
        goto LABEL_41;
      }
      uint64_t v36 = VRTraceErrorLogLevelToCSTR();
      int v37 = *MEMORY[0x1E4F47A50];
      uint64_t v38 = *MEMORY[0x1E4F47A50];
      if (!*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          int v132 = *(_DWORD *)(v15 + 1272);
          int v133 = *(_DWORD *)(v15 + 1276);
          *(_DWORD *)CMTime buf = 136316674;
          uint64_t v140 = v36;
          __int16 v141 = 2080;
          long long v142 = "UpdateBigFrameReporter";
          __int16 v143 = 1024;
          int v144 = 1670;
          __int16 v145 = 2048;
          double v146 = a1;
          __int16 v147 = 1024;
          int v148 = v132;
          __int16 v149 = 1024;
          int v150 = v133;
          __int16 v151 = 2080;
          v152 = v153;
          _os_log_debug_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d \t\tBIG FRAME report at %.3f, %d/%d frames: %s", buf, 0x3Cu);
        }
        goto LABEL_41;
      }
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
LABEL_41:
        *(_DWORD *)(v15 + 1272) = 0;
        int v19 = *(_DWORD *)(v15 + 1256);
        a6 = v135;
        int v18 = &unk_1EADC8000;
        goto LABEL_42;
      }
      int v39 = *(_DWORD *)(v15 + 1272);
      int v40 = *(_DWORD *)(v15 + 1276);
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v140 = v36;
      __int16 v141 = 2080;
      long long v142 = "UpdateBigFrameReporter";
      __int16 v143 = 1024;
      int v144 = 1670;
      __int16 v145 = 2048;
      double v146 = a1;
      __int16 v147 = 1024;
      int v148 = v39;
      __int16 v149 = 1024;
      int v150 = v40;
      __int16 v151 = 2080;
      v152 = v153;
      double v41 = v37;
    }
    else
    {
      int v16 = v134;
      if (ErrorLogLevelForModule < 7) {
        goto LABEL_41;
      }
      uint64_t v44 = VRTraceErrorLogLevelToCSTR();
      int v45 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_41;
      }
      int v46 = *(_DWORD *)(v15 + 1272);
      int v47 = *(_DWORD *)(v15 + 1276);
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v140 = v44;
      __int16 v141 = 2080;
      long long v142 = "UpdateBigFrameReporter";
      __int16 v143 = 1024;
      int v144 = 1673;
      __int16 v145 = 2048;
      double v146 = a1;
      __int16 v147 = 1024;
      int v148 = v46;
      __int16 v149 = 1024;
      int v150 = v47;
      __int16 v151 = 2080;
      v152 = v153;
      double v41 = v45;
    }
    _os_log_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d \t\tBIG FRAME report at %.3f, %d/%d frames: %s", buf, 0x3Cu);
    goto LABEL_41;
  }
LABEL_48:
  int v49 = *(_DWORD *)(v15 + 988);
  int v50 = *(_DWORD *)(v15 + 992);
  if (a7 && *(_DWORD *)(v15 + 984) == a8)
  {
    double v51 = *(double *)(v15 + 920);
    if (v51 < a1) {
      double v51 = a1;
    }
    *(double *)(v15 + 920) = v51;
    *(_DWORD *)(v15 + 98_Block_object_dispose(&STACK[0x250], 8) = v49 + a6;
    *(_DWORD *)(v15 + 992) = v50 + 1;
    *(_DWORD *)CMTime buf = -1;
    double v52 = 0.0;
  }
  else
  {
    double v53 = 0.0;
    if (v49)
    {
      double v54 = *(double *)(v15 + 920) - *(double *)(v15 + 912);
      if (v49 >= 251) {
        double v53 = (double)(8 * v49) / v54;
      }
    }
    else
    {
      double v54 = 0.0;
    }
    *(_DWORD *)(v15 + 984) = a4;
    *(void *)(v15 + 98_Block_object_dispose(&STACK[0x250], 8) = 0;
    *(double *)(v15 + 912) = a1;
    *(_DWORD *)(v15 + 92_Block_object_dispose(&STACK[0x250], 8) = a6;
    *(void *)(v15 + 920) = 0;
    *(_DWORD *)CMTime buf = -1;
    if (v53 <= 0.0)
    {
      double v52 = v53;
    }
    else
    {
      *(double *)(v15 + 680) = v53;
      UpdateRxEstimate(v15 + 720, v50, v49, (int *)buf, *(unsigned __int8 *)(v15 + 9701), v53, v54, a1);
      double v52 = v55;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        int v136 = a6;
        int v56 = v16;
        uint64_t v57 = VRTraceErrorLogLevelToCSTR();
        __int16 v58 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v59 = *(_DWORD *)(v15 + 960);
          uint64_t v60 = *(void *)(v15 + 944);
          *(_DWORD *)uint64_t v153 = 136317698;
          *(void *)&v153[4] = v57;
          *(_WORD *)&v153[12] = 2080;
          *(void *)&v153[14] = "AFRCCalcRxEstimate_New";
          *(_WORD *)&v153[22] = 1024;
          *(_DWORD *)&v153[24] = 2309;
          *(_WORD *)&v153[28] = 2048;
          *(double *)&v153[30] = a1;
          *(_WORD *)&v153[38] = 2048;
          *(double *)&v153[40] = v52;
          *(_WORD *)&v153[48] = 1024;
          *(_DWORD *)&v153[50] = *(_DWORD *)buf;
          *(_WORD *)&v153[54] = 1024;
          *(_DWORD *)&v153[56] = v59;
          *(_WORD *)&v153[60] = 2048;
          *(double *)&v153[62] = v54;
          *(_WORD *)&v153[70] = 1024;
          *(_DWORD *)&v153[72] = v49;
          *(_WORD *)&v153[76] = 1024;
          *(_DWORD *)&v153[78] = v50;
          *(_WORD *)&v153[82] = 2048;
          *(void *)&v153[84] = v60;
          _os_log_impl(&dword_1E1EA4000, v58, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ArrivalTime:%.4f, BWD:%.2f, state:%d, divergeCount:%d prob_seq:[duration:%.4f, size:%d, count:%d], EstimatedBandwidth:%.2f", v153, 0x5Cu);
        }
        int v16 = v56;
        a6 = v136;
      }
      int v18 = (_DWORD *)&unk_1EADC8000;
    }
  }
  if (!v18[810]) {
    goto LABEL_92;
  }
  int v61 = *(_DWORD *)(v15 + 1116);
  if (!v61)
  {
LABEL_68:
    uint64_t v62 = *(unsigned int *)(v15 + 1384);
    *(_DWORD *)(v15 + 1384) = v62 + 1;
    int v63 = a6;
    __sprintf_chk(v138, 0, 0x400uLL, "NEW AFRCCalcRxEstimate [%d]: [%f] //////\n/////tp: %d  ts/arr: %d/%f \t seq: %d sz: %d \t Probe: %d/%d \t path: %d (%d)  BWD: %f/%f  Est: %f\n///// \t TS: %d  \t arrival: %f/%f \t total: %d/%d (%.1f ms) ref_size: %d\n", v62, *(void *)&a1, a3, a4, *(void *)&a1);
    goto LABEL_72;
  }
  if (v61 != -2)
  {
    if (v61 != -3)
    {
      int v63 = a6;
      __sprintf_chk(v138, 0, 0x400uLL, "NEW AFRCCalcRxEstimate: [%d]  //////\n");
      goto LABEL_72;
    }
    goto LABEL_68;
  }
  int v63 = a6;
  if (v52 == 0.0) {
    v138[0] = 0;
  }
  else {
    __sprintf_chk(v138, 0, 0x400uLL, "NEW AFRCCalcRxEstimate: [%d]  (%d %d)  //////\n");
  }
LABEL_72:
  if (a3 == 1) {
    uint64_t v64 = 1128;
  }
  else {
    uint64_t v64 = 1140;
  }
  uint64_t v65 = 1148;
  if (a3 == 1) {
    uint64_t v65 = 1136;
  }
  int v66 = *(_DWORD *)(v15 + v65);
  if (a3 == 1) {
    uint64_t v67 = 1132;
  }
  else {
    uint64_t v67 = 1144;
  }
  *(_DWORD *)(v15 + v65) = v66 + 1;
  if (*(_WORD *)(v15 + v67) && a5 - *(unsigned __int16 *)(v15 + v67) >= 2)
  {
    if (*(int *)(v15 + 1116) <= 0)
    {
      *(void *)&long long v68 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v68 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v153[240] = v68;
      *(_OWORD *)&v153[224] = v68;
      *(_OWORD *)&v153[208] = v68;
      *(_OWORD *)&v153[192] = v68;
      *(_OWORD *)&v153[176] = v68;
      *(_OWORD *)&v153[160] = v68;
      *(_OWORD *)&v153[144] = v68;
      *(_OWORD *)&v153[128] = v68;
      *(_OWORD *)&v153[112] = v68;
      *(_OWORD *)&v153[96] = v68;
      *(_OWORD *)&v153[80] = v68;
      *(_OWORD *)&v153[64] = v68;
      *(_OWORD *)&v153[48] = v68;
      *(_OWORD *)&v153[32] = v68;
      *(_OWORD *)&v153[16] = v68;
      *(_OWORD *)uint64_t v153 = v68;
      __sprintf_chk(v153, 0, 0x100uLL, "///// \t LOSS [%d/%d] @ %d: //////\n", *(_DWORD *)(v15 + v64), v66 + 1, a5);
      __strlcat_chk();
    }
    ++*(_DWORD *)(v15 + v64);
  }
  *(_WORD *)(v15 + v67) = a5;
  if (*(double *)(v15 + 1184) == 0.0) {
    *(double *)(v15 + 1184) = a1;
  }
  *(double *)(v15 + 1192) = a1;
  a6 = v63;
  int v18 = &unk_1EADC8000;
  if (a3 == 1)
  {
    int v69 = (void *)(v15 + 1168);
LABEL_91:
    *v69 += v63;
    goto LABEL_92;
  }
  if (!a3)
  {
    int v69 = (void *)(v15 + 1176);
    goto LABEL_91;
  }
LABEL_92:
  BOOL v43 = *(unsigned char *)(v15 + 721) == 0;
  if (*(unsigned char *)(v15 + 721) && !v18[810]) {
    goto LABEL_224;
  }
LABEL_94:
  double v70 = (double *)(v15 + 352);
  double v71 = *(double *)(v15 + 936);
  if (a3 == 1 && *(_DWORD *)(v15 + 704) == a4)
  {
    double v72 = 0.0;
    int v73 = 0;
    if ((unsigned __int16)(a5 - *(_WORD *)(v15 + 344)) <= 0x13u)
    {
      int v74 = &v70[2 * (unsigned __int16)(a5 - *(_WORD *)(v15 + 344))];
      *int v74 = a1;
      *((_DWORD *)v74 + 2) += a6;
    }
    goto LABEL_110;
  }
  double v72 = 0.0;
  if (*(int *)(v15 + 360) < 1)
  {
    int v73 = 0;
  }
  else
  {
    uint64_t v75 = 0;
    int v73 = 0;
    double v76 = *v70;
    do
    {
      int v77 = *(_DWORD *)(v15 + v75 + 376);
      if (v77 < 1) {
        break;
      }
      v73 += v77;
      if (*(double *)(v15 + v75 + 368) > v76) {
        double v76 = *(double *)(v15 + v75 + 368);
      }
      v75 += 16;
    }
    while (v75 != 304);
    double v78 = v76 - *v70;
    if (v78 > 0.0 && v73 >= 251) {
      double v72 = (double)(8 * v73) / v78;
    }
  }
  *(_OWORD *)(v15 + 640) = 0u;
  *(_OWORD *)(v15 + 656) = 0u;
  *(_OWORD *)(v15 + 60_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(v15 + 624) = 0u;
  *(_OWORD *)(v15 + 576) = 0u;
  *(_OWORD *)(v15 + 592) = 0u;
  *(_OWORD *)(v15 + 544) = 0u;
  *(_OWORD *)(v15 + 560) = 0u;
  *(_OWORD *)(v15 + 512) = 0u;
  *(_OWORD *)(v15 + 52_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(v15 + 480) = 0u;
  *(_OWORD *)(v15 + 496) = 0u;
  *(_OWORD *)(v15 + 44_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(v15 + 464) = 0u;
  *(_OWORD *)(v15 + 416) = 0u;
  *(_OWORD *)(v15 + 432) = 0u;
  *(_OWORD *)(v15 + 384) = 0u;
  *(_OWORD *)(v15 + 400) = 0u;
  *(_OWORD *)double v70 = 0u;
  *(_OWORD *)(v15 + 36_Block_object_dispose(&STACK[0x250], 8) = 0u;
  if (a3 == 1)
  {
    *(double *)(v15 + 352) = a1;
    *(_DWORD *)(v15 + 360) = a6;
    *(_DWORD *)(v15 + 34_Block_object_dispose(&STACK[0x250], 8) = 1;
    *(_WORD *)(v15 + 344) = a5;
LABEL_110:
    *(_DWORD *)(v15 + 704) = a4;
  }
  if (v72 <= 0.0)
  {
    if (!g_iBWEstLogLevel) {
      goto LABEL_223;
    }
    int v82 = v16;
    int v83 = *(_DWORD *)(v15 + 708);
    int v79 = -1;
    double v81 = v72;
  }
  else
  {
    if (v71 == 0.0)
    {
      int v79 = 0;
      double v80 = 100000.0;
      if (v72 >= 100000.0) {
        double v80 = v72;
      }
      if (v72 <= 1000000.0) {
        double v71 = v80;
      }
      else {
        double v71 = 1000000.0;
      }
      double v81 = v72;
    }
    else
    {
      double v84 = v71 * 0.5;
      double v85 = v71 * 1.5;
      if (v72 > v71 * 0.5 && v72 < v85)
      {
        if (v71 <= 300000.0)
        {
          int v90 = (int)(v71 * 0.02 * 0.125);
          if (v90 <= 250) {
            int v90 = 250;
          }
        }
        else
        {
          int v90 = 750;
        }
        double v91 = 1000000.0;
        if (v72 <= 1000000.0) {
          double v91 = v72;
        }
        if (v73 <= v90)
        {
          double v81 = v72;
        }
        else
        {
          double v71 = v91 * 0.05 + v71 * 0.95;
          double v81 = v91;
        }
        *(_DWORD *)(v15 + 70_Block_object_dispose(&STACK[0x250], 8) = 0;
        *(void *)(v15 + 696) = 0;
        int v79 = 1;
      }
      else
      {
        if (v72 > v84)
        {
          int v89 = *(_DWORD *)(v15 + 708);
          if (v72 >= v85)
          {
            if (v89 <= 0)
            {
              *(void *)(v15 + 696) = 0;
              int v89 = 1;
              *(_DWORD *)(v15 + 70_Block_object_dispose(&STACK[0x250], 8) = 1;
              *(double *)(v15 + 712) = a1;
            }
            else
            {
              *(_DWORD *)(v15 + 70_Block_object_dispose(&STACK[0x250], 8) = ++v89;
            }
            int v79 = 10;
            int v88 = 1;
          }
          else
          {
            int v88 = 0;
            int v79 = -1;
          }
        }
        else
        {
          int v87 = *(_DWORD *)(v15 + 708);
          int v88 = 0;
          if (v87 < 0)
          {
            int v89 = v87 - 1;
            *(_DWORD *)(v15 + 70_Block_object_dispose(&STACK[0x250], 8) = v89;
          }
          else
          {
            *(void *)(v15 + 696) = 0;
            int v89 = -1;
            *(_DWORD *)(v15 + 70_Block_object_dispose(&STACK[0x250], 8) = -1;
            *(double *)(v15 + 712) = a1;
          }
          int v79 = -10;
        }
        if (v72 <= 1000000.0) {
          double v81 = v72;
        }
        else {
          double v81 = 1000000.0;
        }
        double v92 = v81 + *(double *)(v15 + 696);
        *(double *)(v15 + 696) = v92;
        if (v89 < 0) {
          int v89 = -v89;
        }
        double v93 = a1 - *(double *)(v15 + 712);
        if (v93 <= 5.0)
        {
          if (v89 > 9 || v89 >= 5 && v93 > 3.0)
          {
            double v71 = v92 / (double)v89;
            *(_DWORD *)(v15 + 70_Block_object_dispose(&STACK[0x250], 8) = 0;
            *(void *)(v15 + 696) = 0;
            if (v72 > v84) {
              int v94 = 200;
            }
            else {
              int v94 = -100;
            }
            if (v88) {
              int v79 = 100;
            }
            else {
              int v79 = v94;
            }
          }
        }
        else
        {
          *(_DWORD *)(v15 + 70_Block_object_dispose(&STACK[0x250], 8) = 0;
          *(void *)(v15 + 696) = 0;
        }
      }
    }
    if (!g_iBWEstLogLevel) {
      goto LABEL_223;
    }
    int v82 = v16;
    int v83 = *(_DWORD *)(v15 + 708);
    *(double *)(v15 + 1200) = v72 + *(double *)(v15 + 1200);
    ++*(_DWORD *)(v15 + 1208);
  }
  if (*(double *)(v15 + 1216) == 0.0) {
    *(double *)(v15 + 1216) = a1;
  }
  *(double *)(v15 + 1224) = a1;
  if (a3)
  {
    if (a3 != 1) {
      goto LABEL_172;
    }
    *(_DWORD *)(v15 + 1232) += a6;
    BOOL v95 = (_DWORD *)(v15 + 1236);
  }
  else
  {
    *(_DWORD *)(v15 + 1240) += a6;
    BOOL v95 = (_DWORD *)(v15 + 1244);
  }
  ++*v95;
LABEL_172:
  int v96 = *(_DWORD *)(v15 + 1116);
  if (v43)
  {
    if (v96)
    {
      if (v96 == -2 && v138[0])
      {
        int v16 = v82;
        if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
          goto LABEL_223;
        }
        uint64_t v97 = VRTraceErrorLogLevelToCSTR();
        __int16 v98 = *MEMORY[0x1E4F47A50];
        uint64_t v99 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_223;
          }
          *(_DWORD *)uint64_t v153 = 136316162;
          *(void *)&v153[4] = v97;
          *(_WORD *)&v153[12] = 2080;
          *(void *)&v153[14] = "AFRCCalcRxEstimate";
          *(_WORD *)&v153[22] = 1024;
          *(_DWORD *)&v153[24] = 2638;
          *(_WORD *)&v153[28] = 1024;
          *(_DWORD *)&v153[30] = (int)v71;
          *(_WORD *)&v153[34] = 2080;
          *(void *)&v153[36] = v138;
          __int16 v100 = "VCRC [%s] %s:%d \t\t\t\t AFRCCalcRxEstimate [%d]: //////\t\t%s\n";
LABEL_192:
          _os_log_impl(&dword_1E1EA4000, v98, OS_LOG_TYPE_DEFAULT, v100, v153, 0x2Cu);
          goto LABEL_223;
        }
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v153 = 136316162;
          *(void *)&v153[4] = v97;
          *(_WORD *)&v153[12] = 2080;
          *(void *)&v153[14] = "AFRCCalcRxEstimate";
          *(_WORD *)&v153[22] = 1024;
          *(_DWORD *)&v153[24] = 2638;
          *(_WORD *)&v153[28] = 1024;
          *(_DWORD *)&v153[30] = (int)v71;
          *(_WORD *)&v153[34] = 2080;
          *(void *)&v153[36] = v138;
          __int16 v126 = "VCRC [%s] %s:%d \t\t\t\t AFRCCalcRxEstimate [%d]: //////\t\t%s\n";
LABEL_218:
          _os_log_debug_impl(&dword_1E1EA4000, v98, OS_LOG_TYPE_DEBUG, v126, v153, 0x2Cu);
          goto LABEL_223;
        }
        goto LABEL_223;
      }
      int v16 = v82;
      if (v96 != -1 && a1 - *(double *)(v15 + 1120) <= (double)v96 / 1000000.0) {
        goto LABEL_223;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        goto LABEL_220;
      }
      uint64_t v116 = VRTraceErrorLogLevelToCSTR();
      int v117 = *MEMORY[0x1E4F47A50];
      int v118 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v153 = 136316162;
          *(void *)&v153[4] = v116;
          *(_WORD *)&v153[12] = 2080;
          *(void *)&v153[14] = "AFRCCalcRxEstimate";
          *(_WORD *)&v153[22] = 1024;
          *(_DWORD *)&v153[24] = 2644;
          *(_WORD *)&v153[28] = 1024;
          *(_DWORD *)&v153[30] = (int)v71;
          *(_WORD *)&v153[34] = 2080;
          *(void *)&v153[36] = v138;
          int v119 = "VCRC [%s] %s:%d \t\t\t\t AFRCCalcRxEstimate [%d]: //////\t\t%s\n";
LABEL_209:
          _os_log_impl(&dword_1E1EA4000, v117, OS_LOG_TYPE_DEFAULT, v119, v153, 0x2Cu);
          goto LABEL_220;
        }
        goto LABEL_220;
      }
      if (!os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_220;
      }
      *(_DWORD *)uint64_t v153 = 136316162;
      *(void *)&v153[4] = v116;
      *(_WORD *)&v153[12] = 2080;
      *(void *)&v153[14] = "AFRCCalcRxEstimate";
      *(_WORD *)&v153[22] = 1024;
      *(_DWORD *)&v153[24] = 2644;
      *(_WORD *)&v153[28] = 1024;
      *(_DWORD *)&v153[30] = (int)v71;
      *(_WORD *)&v153[34] = 2080;
      *(void *)&v153[36] = v138;
      __int16 v127 = "VCRC [%s] %s:%d \t\t\t\t AFRCCalcRxEstimate [%d]: //////\t\t%s\n";
      goto LABEL_231;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      goto LABEL_222;
    }
    int v111 = a6;
    uint64_t v112 = VRTraceErrorLogLevelToCSTR();
    unsigned int v113 = *MEMORY[0x1E4F47A50];
    __int16 v114 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        int v115 = *(_DWORD *)(v15 + 1384);
        *(_DWORD *)(v15 + 1384) = v115 + 1;
        *(_DWORD *)uint64_t v153 = 136318466;
        *(void *)&v153[4] = v112;
        *(_WORD *)&v153[12] = 2080;
        *(void *)&v153[14] = "AFRCCalcRxEstimate";
        *(_WORD *)&v153[22] = 1024;
        *(_DWORD *)&v153[24] = 2630;
        *(_WORD *)&v153[28] = 1024;
        *(_DWORD *)&v153[30] = v115;
        *(_WORD *)&v153[34] = 1024;
        *(_DWORD *)&v153[36] = a3;
        *(_WORD *)&v153[40] = 1024;
        *(_DWORD *)&v153[42] = a4;
        *(_WORD *)&v153[46] = 2048;
        *(double *)&v153[48] = a1;
        *(_WORD *)&v153[56] = 1024;
        *(_DWORD *)&v153[58] = a5;
        *(_WORD *)&v153[62] = 1024;
        *(_DWORD *)&v153[64] = v111;
        *(_WORD *)&v153[68] = 1024;
        *(_DWORD *)&v153[70] = v79;
        *(_WORD *)&v153[74] = 1024;
        *(_DWORD *)&v153[76] = v83;
        *(_WORD *)&v153[80] = 2048;
        *(double *)&v153[82] = v72;
        *(_WORD *)&v153[90] = 2048;
        *(double *)&v153[92] = v81;
        *(_WORD *)&v153[100] = 2048;
        *(double *)&v153[102] = v71;
        __int16 v106 = "VCRC [%s] %s:%d AFRCCalcRxEstimate [%d]: //////\n"
               "/////tp: %d  ts/arr: %d/%f \t seq: %d sz: %d \t path: %d (%d)  BWD: %f/%f  Est: %f\n";
        int v107 = v113;
        uint32_t v108 = 110;
        goto LABEL_197;
      }
      goto LABEL_222;
    }
    if (!os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_222;
    }
    int v122 = *(_DWORD *)(v15 + 1384);
    *(_DWORD *)(v15 + 1384) = v122 + 1;
    *(_DWORD *)uint64_t v153 = 136318466;
    *(void *)&v153[4] = v112;
    *(_WORD *)&v153[12] = 2080;
    *(void *)&v153[14] = "AFRCCalcRxEstimate";
    *(_WORD *)&v153[22] = 1024;
    *(_DWORD *)&v153[24] = 2630;
    *(_WORD *)&v153[28] = 1024;
    *(_DWORD *)&v153[30] = v122;
    *(_WORD *)&v153[34] = 1024;
    *(_DWORD *)&v153[36] = a3;
    *(_WORD *)&v153[40] = 1024;
    *(_DWORD *)&v153[42] = a4;
    *(_WORD *)&v153[46] = 2048;
    *(double *)&v153[48] = a1;
    *(_WORD *)&v153[56] = 1024;
    *(_DWORD *)&v153[58] = a5;
    *(_WORD *)&v153[62] = 1024;
    *(_DWORD *)&v153[64] = v111;
    *(_WORD *)&v153[68] = 1024;
    *(_DWORD *)&v153[70] = v79;
    *(_WORD *)&v153[74] = 1024;
    *(_DWORD *)&v153[76] = v83;
    *(_WORD *)&v153[80] = 2048;
    *(double *)&v153[82] = v72;
    *(_WORD *)&v153[90] = 2048;
    *(double *)&v153[92] = v81;
    *(_WORD *)&v153[100] = 2048;
    *(double *)&v153[102] = v71;
    char v123 = "VCRC [%s] %s:%d AFRCCalcRxEstimate [%d]: //////\n"
           "/////tp: %d  ts/arr: %d/%f \t seq: %d sz: %d \t path: %d (%d)  BWD: %f/%f  Est: %f\n";
    char v124 = v113;
    uint32_t v125 = 110;
    goto LABEL_233;
  }
  if ((v96 + 3) >= 2)
  {
    if (v96 != -1)
    {
      if (!v96)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
          goto LABEL_222;
        }
        int v101 = a6;
        uint64_t v102 = VRTraceErrorLogLevelToCSTR();
        int v103 = *MEMORY[0x1E4F47A50];
        uint64_t v104 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
          {
            int v105 = *(_DWORD *)(v15 + 1384);
            *(_DWORD *)(v15 + 1384) = v105 + 1;
            *(_DWORD *)uint64_t v153 = 136318722;
            *(void *)&v153[4] = v102;
            *(_WORD *)&v153[12] = 2080;
            *(void *)&v153[14] = "AFRCCalcRxEstimate";
            *(_WORD *)&v153[22] = 1024;
            *(_DWORD *)&v153[24] = 2598;
            *(_WORD *)&v153[28] = 1024;
            *(_DWORD *)&v153[30] = v105;
            *(_WORD *)&v153[34] = 1024;
            *(_DWORD *)&v153[36] = a3;
            *(_WORD *)&v153[40] = 1024;
            *(_DWORD *)&v153[42] = a4;
            *(_WORD *)&v153[46] = 2048;
            *(double *)&v153[48] = a1;
            *(_WORD *)&v153[56] = 1024;
            *(_DWORD *)&v153[58] = a5;
            *(_WORD *)&v153[62] = 1024;
            *(_DWORD *)&v153[64] = v101;
            *(_WORD *)&v153[68] = 1024;
            *(_DWORD *)&v153[70] = v79;
            *(_WORD *)&v153[74] = 1024;
            *(_DWORD *)&v153[76] = v83;
            *(_WORD *)&v153[80] = 2048;
            *(double *)&v153[82] = v72;
            *(_WORD *)&v153[90] = 2048;
            *(double *)&v153[92] = v81;
            *(_WORD *)&v153[100] = 2048;
            *(double *)&v153[102] = v71;
            *(_WORD *)&v153[110] = 2080;
            *(void *)&v153[112] = v138;
            __int16 v106 = "VCRC [%s] %s:%d AFRCCalcRxEstimate [%d]: //////\n"
                   "/////tp: %d  ts/arr: %d/%f \t seq: %d sz: %d \t path: %d (%d)  BWD: %f/%f  Est: %f\n"
                   "%s";
            int v107 = v103;
            uint32_t v108 = 120;
LABEL_197:
            _os_log_impl(&dword_1E1EA4000, v107, OS_LOG_TYPE_DEFAULT, v106, v153, v108);
          }
LABEL_222:
          int v16 = v82;
          goto LABEL_223;
        }
        if (!os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_222;
        }
        int v131 = *(_DWORD *)(v15 + 1384);
        *(_DWORD *)(v15 + 1384) = v131 + 1;
        *(_DWORD *)uint64_t v153 = 136318722;
        *(void *)&v153[4] = v102;
        *(_WORD *)&v153[12] = 2080;
        *(void *)&v153[14] = "AFRCCalcRxEstimate";
        *(_WORD *)&v153[22] = 1024;
        *(_DWORD *)&v153[24] = 2598;
        *(_WORD *)&v153[28] = 1024;
        *(_DWORD *)&v153[30] = v131;
        *(_WORD *)&v153[34] = 1024;
        *(_DWORD *)&v153[36] = a3;
        *(_WORD *)&v153[40] = 1024;
        *(_DWORD *)&v153[42] = a4;
        *(_WORD *)&v153[46] = 2048;
        *(double *)&v153[48] = a1;
        *(_WORD *)&v153[56] = 1024;
        *(_DWORD *)&v153[58] = a5;
        *(_WORD *)&v153[62] = 1024;
        *(_DWORD *)&v153[64] = v101;
        *(_WORD *)&v153[68] = 1024;
        *(_DWORD *)&v153[70] = v79;
        *(_WORD *)&v153[74] = 1024;
        *(_DWORD *)&v153[76] = v83;
        *(_WORD *)&v153[80] = 2048;
        *(double *)&v153[82] = v72;
        *(_WORD *)&v153[90] = 2048;
        *(double *)&v153[92] = v81;
        *(_WORD *)&v153[100] = 2048;
        *(double *)&v153[102] = v71;
        *(_WORD *)&v153[110] = 2080;
        *(void *)&v153[112] = v138;
        char v123 = "VCRC [%s] %s:%d AFRCCalcRxEstimate [%d]: //////\n"
               "/////tp: %d  ts/arr: %d/%f \t seq: %d sz: %d \t path: %d (%d)  BWD: %f/%f  Est: %f\n"
               "%s";
        char v124 = v103;
        uint32_t v125 = 120;
LABEL_233:
        _os_log_debug_impl(&dword_1E1EA4000, v124, OS_LOG_TYPE_DEBUG, v123, v153, v125);
        goto LABEL_222;
      }
      if (a1 - *(double *)(v15 + 1120) <= (double)v96 / 1000000.0) {
        goto LABEL_222;
      }
    }
    int v16 = v82;
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      goto LABEL_220;
    }
    uint64_t v120 = VRTraceErrorLogLevelToCSTR();
    int v117 = *MEMORY[0x1E4F47A50];
    int v121 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v153 = 136316162;
        *(void *)&v153[4] = v120;
        *(_WORD *)&v153[12] = 2080;
        *(void *)&v153[14] = "AFRCCalcRxEstimate";
        *(_WORD *)&v153[22] = 1024;
        *(_DWORD *)&v153[24] = 2613;
        *(_WORD *)&v153[28] = 1024;
        *(_DWORD *)&v153[30] = (int)v71;
        *(_WORD *)&v153[34] = 2080;
        *(void *)&v153[36] = v138;
        int v119 = "VCRC [%s] %s:%d AFRCCalcRxEstimate [%d]: //////\t\t%s";
        goto LABEL_209;
      }
LABEL_220:
      *(double *)(v15 + 1120) = a1;
      goto LABEL_223;
    }
    if (!os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_220;
    }
    *(_DWORD *)uint64_t v153 = 136316162;
    *(void *)&v153[4] = v120;
    *(_WORD *)&v153[12] = 2080;
    *(void *)&v153[14] = "AFRCCalcRxEstimate";
    *(_WORD *)&v153[22] = 1024;
    *(_DWORD *)&v153[24] = 2613;
    *(_WORD *)&v153[28] = 1024;
    *(_DWORD *)&v153[30] = (int)v71;
    *(_WORD *)&v153[34] = 2080;
    *(void *)&v153[36] = v138;
    __int16 v127 = "VCRC [%s] %s:%d AFRCCalcRxEstimate [%d]: //////\t\t%s";
LABEL_231:
    _os_log_debug_impl(&dword_1E1EA4000, v117, OS_LOG_TYPE_DEBUG, v127, v153, 0x2Cu);
    goto LABEL_220;
  }
  if (!v138[0]) {
    goto LABEL_222;
  }
  int v16 = v82;
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    goto LABEL_223;
  }
  uint64_t v109 = VRTraceErrorLogLevelToCSTR();
  __int16 v98 = *MEMORY[0x1E4F47A50];
  int v110 = *MEMORY[0x1E4F47A50];
  if (*MEMORY[0x1E4F47A40])
  {
    if (!os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_223;
    }
    *(_DWORD *)uint64_t v153 = 136316162;
    *(void *)&v153[4] = v109;
    *(_WORD *)&v153[12] = 2080;
    *(void *)&v153[14] = "AFRCCalcRxEstimate";
    *(_WORD *)&v153[22] = 1024;
    *(_DWORD *)&v153[24] = 2606;
    *(_WORD *)&v153[28] = 1024;
    *(_DWORD *)&v153[30] = (int)v71;
    *(_WORD *)&v153[34] = 2080;
    *(void *)&v153[36] = v138;
    __int16 v100 = "VCRC [%s] %s:%d AFRCCalcRxEstimate [%d]: //////\t\t%s\n";
    goto LABEL_192;
  }
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t v153 = 136316162;
    *(void *)&v153[4] = v109;
    *(_WORD *)&v153[12] = 2080;
    *(void *)&v153[14] = "AFRCCalcRxEstimate";
    *(_WORD *)&v153[22] = 1024;
    *(_DWORD *)&v153[24] = 2606;
    *(_WORD *)&v153[28] = 1024;
    *(_DWORD *)&v153[30] = (int)v71;
    *(_WORD *)&v153[34] = 2080;
    *(void *)&v153[36] = v138;
    __int16 v126 = "VCRC [%s] %s:%d AFRCCalcRxEstimate [%d]: //////\t\t%s\n";
    goto LABEL_218;
  }
LABEL_223:
  int v128 = *(unsigned __int8 *)(v15 + 721);
  *(double *)(v15 + 936) = v71;
  if (v128) {
LABEL_224:
  }
    double v71 = *(double *)(v15 + 944);
  *(double *)(v15 + 672) = v71;
  unsigned int v129 = *(_DWORD *)(v15 + 1040);
  if (v129)
  {
    double v130 = (double)v129;
    if (v71 < (double)v129) {
      double v130 = v71;
    }
    *(double *)(v15 + 672) = v130;
  }
  pthread_mutex_unlock(v16);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetAudioBitRate(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  int v5 = (void *)(v3 + 2700);
  uint64_t v6 = (pthread_mutex_t *)(v3 + 2744);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 2744));
  double v7 = *(double *)(v4 + 2728);
  if (*(double *)(v4 + 2720) != v7)
  {
    *(double *)(v4 + 2720) = v7;
    MediaQueue_SetAudioFECLevel(v7);
  }
  *int v5 = v5[1];
  pthread_mutex_unlock(v6);
  VRLogfilePrintWithTimestamp(*(void *)(v4 + 2848), "New audio rate [%ukbps], fraction [%.2f], FEC [%.2f], RED[%u %u]\n", v8, v9, v10, v11, v12, v13, a2 / 1000);
  if (a2 >= 1) {
    *(_DWORD *)(v4 + _Block_object_dispose(&STACK[0x250], 8) = a2;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetAudioPayload(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149646338;
  }
  *(_DWORD *)(v5 + 12) = a2;
  *(_DWORD *)(v5 + 16) = a3;
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetAudioPauseTime(uint64_t a1, void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  if (a2) {
    *a2 = *(void *)(v3 + 2664);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetAudioMaxPauseTimes(uint64_t a1, void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  if (a2) {
    *a2 = *(void *)(v3 + 2688);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCMarkSpecialAudioFlush(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  if (a2)
  {
    double v5 = micro();
    *(double *)(v4 + 9840) = v5;
    pthread_mutex_lock((pthread_mutex_t *)(v4 + 2560));
    int v6 = *(_DWORD *)(v4 + 2988) + 1;
    *(_DWORD *)(v4 + 298_Block_object_dispose(&STACK[0x250], 8) = v6;
    *(double *)(v4 + 2992) = v5;
    VRLogfilePrintWithTimestamp(*(void *)(v4 + 2848), "Add special audio flush(%u).\n", v7, v8, v9, v10, v11, v12, v6);
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 2560));
  }
  *(_DWORD *)(v4 + 984_Block_object_dispose(&STACK[0x250], 8) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetKeyFrameTimestamp(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  *a2 = *(_DWORD *)(v3 + 2496);
  if ((int)*MEMORY[0x1E4F47A38] >= 5) {
    StallModeTracePrint_(5, (uint64_t)"VCRC", v4, v5, " RTPSetCellularAudioStallState -> AFRCGetKeyFrameTimestamp: %d (seq: %x) ", v6, v7, v8, *(_DWORD *)(v3 + 2496));
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCMarkSpecialVideoFlush(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v4 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v4) {
    return 2149646338;
  }
  uint64_t v5 = v4;
  uint64_t v6 = v4 + 40;
  pthread_mutex_lock(v4 + 40);
  ++*(_DWORD *)&v5[46].__opaque[36];
  *(_WORD *)&v5[46].__opaque[54] = a3;
  *(double *)&v5[46].__opaque[40] = micro();
  VRLogfilePrintWithTimestamp(*(void *)&v5[44].__opaque[24], "Add special video flush(%u)%s.\n", v7, v8, v9, v10, v11, v12, *(_DWORD *)&v5[46].__opaque[36]);
  pthread_mutex_unlock(v6);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCLogMQFlushedPackets(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  VRLogfilePrintWithTimestamp(*(void *)(v3 + 2848), "MQ flushed %d video packets. [%.512s]\n", v4, v5, v6, v7, v8, v9, a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetQualityIndication(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  if (a2) {
    *a2 = *(double *)(v3 + 9576) >= 1.0;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetAudioTxInfo(uint64_t a1, _DWORD *a2, int *a3, void *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, uint64_t a10)
{
  uint64_t v17 = CheckInHandleDebug();
  if (!v17) {
    return 2149646338;
  }
  uint64_t v18 = v17;
  if (a2)
  {
    if (!*(_DWORD *)(v17 + 2928) || (int v19 = *(_DWORD *)(v17 + 48)) == 0) {
      int v19 = *(_DWORD *)(v17 + 44);
    }
    *a2 = v19;
  }
  if (a3)
  {
    unsigned int v20 = (*(double *)(v17 + 2728) * 100.0);
    if (v20 == 150) {
      int v21 = 150;
    }
    else {
      int v21 = 200;
    }
    if (v20 == 100) {
      int v22 = 100;
    }
    else {
      int v22 = v21;
    }
    *a3 = v22;
  }
  if (a4) {
    *a4 = *(void *)(v17 + 9576);
  }
  if (a5) {
    *a5 = *(_DWORD *)(v17 + 2708);
  }
  if (a6) {
    *a6 = *(_DWORD *)(v17 + 2712);
  }
  if (a7) {
    *a7 = *(_DWORD *)(v17 + 2680);
  }
  if (a8) {
    *a8 = *(_DWORD *)(v17 + 1404);
  }
  if (a9) {
    *a9 = *(_DWORD *)(v17 + 2656);
  }
  if (a10)
  {
    *(_DWORD *)a10 = 3;
    *(double *)(a10 + 24) = *(double *)(v17 + 176) * 100.0;
    *(double *)(a10 + 40) = *(double *)(v17 + 184) * 100.0;
    *(_DWORD *)(a10 + 4_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(v17 + 256);
    *(_DWORD *)(a10 + 64) = *(_DWORD *)(v17 + 44);
    *(_DWORD *)(a10 + 56) = *(_DWORD *)(v17 + 2408);
    if (VCMediaControlInfo_IsLossStatsEnabled(*(unsigned __int8 *)(v17 + 9852))) {
      *(_DWORD *)(a10 + 80) = *(_DWORD *)(v18 + 272);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetTxInfo(uint64_t a1, _DWORD *a2, void *a3, _DWORD *a4, _DWORD *a5, void *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, BOOL *a11, _DWORD *a12)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = CheckInHandleDebug();
  if (!v17) {
    return 2149646338;
  }
  uint64_t v18 = v17;
  int v19 = a10;
  if (a9)
  {
    *a9 = 0;
    if (*(unsigned char *)(v17 + 720))
    {
      double v20 = *(double *)(v17 + 864);
      double v21 = micro();
      if (*(double *)(v18 + 1048) == 0.0)
      {
        *(double *)(v18 + 104_Block_object_dispose(&STACK[0x250], 8) = v21;
        *(double *)(v18 + 1056) = v21;
        *(double *)(v18 + 108_Block_object_dispose(&STACK[0x250], 8) = v21;
      }
      if (*(unsigned char *)(v18 + 1104))
      {
        if (*(_DWORD *)(v18 + 2404)) {
          BOOL v22 = v21 - *(double *)(v18 + 2416) > 0.5;
        }
        else {
          BOOL v22 = 0;
        }
        BOOL v24 = 0;
        if ((*(unsigned char *)(v18 + 1396) & 1) != 0 && !v22) {
          BOOL v24 = g_adwTxRateTiers[*(int *)(v18 + 28) + 1] <= *(_DWORD *)(v18 + 20);
        }
        double v25 = v21 - *(double *)(v18 + 1088);
        if (v25 < 3.0) {
          BOOL v24 = 1;
        }
        if (!v24 || v25 >= 10.0)
        {
          *(unsigned char *)(v18 + 1104) = 0;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v126 = VRTraceErrorLogLevelToCSTR();
            long long v27 = *MEMORY[0x1E4F47A50];
            uint64_t v28 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315650;
                uint64_t v132 = v126;
                __int16 v133 = 2080;
                __int16 v134 = "BWEstCheckIfLargeFrameNeeded";
                __int16 v135 = 1024;
                int v136 = 6160;
                _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Enabling LF", buf, 0x1Cu);
              }
            }
            else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              AFRCGetTxInfo_cold_2(v126);
            }
          }
        }
      }
      int v29 = 0;
      *(_DWORD *)(v18 + 106_Block_object_dispose(&STACK[0x250], 8) = BWEstCalcLargeFrameSize(v18, 0);
      if (*(unsigned char *)(v18 + 1104)) {
        goto LABEL_39;
      }
      double v30 = v21 - *(double *)(v18 + 1056);
      if (v21 - *(double *)(v18 + 1048) >= v20 && v30 >= v20 * 0.5)
      {
        if (*(_DWORD *)(v18 + 2404) && v21 - *(double *)(v18 + 2416) > 0.5)
        {
LABEL_224:
          int v29 = *(_DWORD *)(v18 + 1068);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v125 = VRTraceErrorLogLevelToCSTR();
            int v117 = *MEMORY[0x1E4F47A50];
            int v128 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315906;
                uint64_t v132 = v125;
                __int16 v133 = 2080;
                __int16 v134 = "BWEstCheckIfLargeFrameNeeded";
                __int16 v135 = 1024;
                int v136 = 6199;
                __int16 v137 = 1024;
                LODWORD(v13_Block_object_dispose(&STACK[0x250], 8) = v29;
                _os_log_impl(&dword_1E1EA4000, v128, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ^^^^^ LARGE frame req'd of %d ", buf, 0x22u);
              }
            }
            else if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
            {
              AFRCGetTxInfo_cold_1();
            }
          }
          goto LABEL_39;
        }
        if (v30 > v20 * 3.0)
        {
          *(_DWORD *)(v18 + 106_Block_object_dispose(&STACK[0x250], 8) = BWEstCalcLargeFrameSize(v18, 1);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v127 = VRTraceErrorLogLevelToCSTR();
            int v32 = *MEMORY[0x1E4F47A50];
            uint64_t v33 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                int v34 = *(_DWORD *)(v18 + 1068);
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v132 = v127;
                __int16 v133 = 2080;
                __int16 v134 = "BWEstCheckIfLargeFrameNeeded";
                __int16 v135 = 1024;
                int v136 = 6189;
                __int16 v137 = 2048;
                double v138 = *(const char **)&v30;
                __int16 v139 = 1024;
                *(_DWORD *)uint64_t v140 = v34;
                _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ^ %.3f since last LF; CRITICAL: letting it go; size is %d ",
                  buf,
                  0x2Cu);
              }
            }
            else if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
            {
              int v118 = *(_DWORD *)(v18 + 1068);
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v132 = v127;
              __int16 v133 = 2080;
              __int16 v134 = "BWEstCheckIfLargeFrameNeeded";
              __int16 v135 = 1024;
              int v136 = 6189;
              __int16 v137 = 2048;
              double v138 = *(const char **)&v30;
              __int16 v139 = 1024;
              *(_DWORD *)uint64_t v140 = v118;
              _os_log_debug_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d ^ %.3f since last LF; CRITICAL: letting it go; size is %d ",
                buf,
                0x2Cu);
            }
          }
          goto LABEL_224;
        }
      }
      int v29 = 0;
LABEL_39:
      *(_DWORD *)(v18 + 1064) = v29;
      *a9 = v29;
    }
  }
  if (a10 && *(_DWORD *)(v18 + 2928))
  {
    uint64_t v120 = a4;
    int v35 = *(_DWORD *)(v18 + 2960);
    double v36 = micro();
    pthread_mutex_lock((pthread_mutex_t *)(v18 + 2560));
    unsigned int v124 = *(_DWORD *)(v18 + 1392);
    int v43 = *(unsigned __int8 *)(v18 + 3026);
    int v44 = *(unsigned __int8 *)(v18 + 9624);
    int v45 = v44 != 255 && v43 != v44;
    if (v44 == 255 || v43 != v44)
    {
      reportingLog();
      LOBYTE(v43) = *(unsigned char *)(v18 + 3026);
    }
    *(unsigned char *)(v18 + 9624) = v43;
    int v122 = a6;
    char v123 = a7;
    int v121 = a5;
    if (v45 && *(unsigned char *)(v18 + 9664))
    {
      *(unsigned char *)(v18 + 9664) = 0;
      *(_DWORD *)(v18 + 968_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(double *)(v18 + 9680) = v36;
      if (v35)
      {
        if (*(_DWORD *)(v18 + 9692) && *(double *)(v18 + 9656) >= 1.0) {
          int v47 = 8;
        }
        else {
          int v47 = 9;
        }
      }
      else
      {
        if (*(_DWORD *)(v18 + 28) >= *(_DWORD *)(v18 + 9648) || *(_DWORD *)(v18 + 9572))
        {
          int v47 = 0;
LABEL_102:
          *(void *)(v18 + 296_Block_object_dispose(&STACK[0x250], 8) = *(void *)(v18 + 9632);
          *(void *)(v18 + 2980) = *(void *)(v18 + 9640);
          *(_DWORD *)(v18 + 2480) = *(_DWORD *)(v18 + 9692);
          if ((v47 & v35 & 1) == 0)
          {
            *(_DWORD *)(v18 + 1400) = 6;
            int v56 = *(_DWORD *)(v18 + 1404) + 1;
            *(_DWORD *)(v18 + 1404) = v56;
            *(_DWORD *)(v18 + 956_Block_object_dispose(&STACK[0x250], 8) = v56;
          }
          *(_DWORD *)(v18 + 36) = *(_DWORD *)(v18 + 28);
          uint64_t v57 = *(int *)(v18 + 9648);
          *(_DWORD *)(v18 + 2_Block_object_dispose(&STACK[0x250], 8) = v57;
          *(_DWORD *)(v18 + 44) = g_adwTxRateTiers[v57];
          *(_DWORD *)(v18 + 2956) = 0;
          double v58 = *(double *)(v18 + 9656);
          if (*(double *)(v18 + 9576) >= v58
            || (*(double *)(v18 + 9576) = v58,
                *(double *)(v18 + 9584) = v36,
                MediaQueue_SetAudioFraction(v58),
                (int)VRTraceGetErrorLogLevelForModule() < 7))
          {
            int v52 = 0;
            int v53 = 0;
            BOOL v51 = 1;
          }
          else
          {
            int v119 = v35;
            uint64_t v59 = VRTraceErrorLogLevelToCSTR();
            uint64_t v60 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v61 = *(const char **)(v18 + 9656);
              uint64_t v62 = *(void *)(v18 + 9576);
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v132 = v59;
              __int16 v133 = 2080;
              __int16 v134 = "UpdateBBAction";
              __int16 v135 = 1024;
              int v136 = 3261;
              __int16 v137 = 2048;
              double v138 = v61;
              __int16 v139 = 2048;
              *(void *)uint64_t v140 = v62;
              _os_log_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Audio fraction change [%.2f->%.2f].", buf, 0x30u);
            }
            int v52 = 0;
            int v53 = 0;
            BOOL v51 = 1;
            int v35 = v119;
          }
LABEL_110:
          if (*(_DWORD *)(v18 + 2472))
          {
            if ((v47 & 8) == 0) {
              goto LABEL_118;
            }
          }
          else if ((v47 & 8) == 0 || !*(_DWORD *)(v18 + 2476))
          {
            goto LABEL_118;
          }
          if ((v47 & 2) == 0 && v36 - *(double *)(v18 + 9592) > 0.1)
          {
            v47 |= 2u;
            *(double *)(v18 + 9592) = v36;
            BOOL v51 = 1;
          }
LABEL_118:
          if ((v47 & 8) != 0)
          {
            if (!*(_DWORD *)(v18 + 3032))
            {
              v47 &= 7u;
              if ((v47 & 2) == 0)
              {
LABEL_122:
                if (*(_DWORD *)(v18 + 3000))
                {
                  v47 |= 0x10u;
                  *(_DWORD *)(v18 + 3000) = 0;
                }
LABEL_128:
                if ((v52 | v53) == 1)
                {
                  int v63 = v35;
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                  {
                    uint64_t v64 = VRTraceErrorLogLevelToCSTR();
                    uint64_t v65 = *MEMORY[0x1E4F47A50];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v66 = *(void *)(v18 + 9576);
                      uint64_t v67 = "";
                      uint64_t v68 = *(void *)(v18 + 2720);
                      int v69 = *(_DWORD *)(v18 + 2700);
                      int v70 = *(_DWORD *)(v18 + 2704);
                      if (v52) {
                        uint64_t v67 = "AWM";
                      }
                      if (v53) {
                        uint64_t v67 = "HWM";
                      }
                      *(_DWORD *)CMTime buf = 136317698;
                      uint64_t v132 = v64;
                      __int16 v133 = 2080;
                      __int16 v134 = "UpdateBBAction";
                      __int16 v135 = 1024;
                      int v136 = 3379;
                      __int16 v137 = 2080;
                      double v138 = v67;
                      __int16 v139 = 1024;
                      *(_DWORD *)uint64_t v140 = v124 / 0x3E8;
                      *(_WORD *)&v140[4] = 2048;
                      *(void *)&v140[6] = v66;
                      __int16 v141 = 2048;
                      uint64_t v142 = v68;
                      __int16 v143 = 1024;
                      int v144 = v69;
                      __int16 v145 = 1024;
                      int v146 = v70;
                      __int16 v147 = 1024;
                      int v148 = v63;
                      __int16 v149 = 1024;
                      int v150 = v47;
                      _os_log_impl(&dword_1E1EA4000, v65, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d %s is hit, [audio:%u, factor:%.2f, FEC:%.2f, RED:%u, %u, %02X->%02X]", buf, 0x58u);
                    }
                  }
                }
                else if ((!v51 & ~v45) != 0)
                {
                  goto LABEL_142;
                }
                double v71 = "AWM is hit! ";
                if (!v52) {
                  double v71 = "";
                }
                if (v53) {
                  double v71 = "HWM is hit! ";
                }
                VRLogfilePrintWithTimestamp(*(void *)(v18 + 2848), "%s%sAudio[%u %.2f %.2f %u %u], Action[%02X->%02X(%u)]%s.\n", v37, v38, v39, v40, v41, v42, (char)v71);
LABEL_142:
                int v19 = a10;
                a5 = v121;
                if (*(_DWORD *)(v18 + 2956))
                {
                  int v72 = *(_DWORD *)(v18 + 28);
                  uint64_t v73 = *(int *)(v18 + 40);
                  uint64_t v74 = v72;
                  while (g_adwTxRateTiers[v74] > *(_DWORD *)(v18 + 2968))
                  {
                    --v74;
                    if (*(_DWORD *)(v18 + 9696) || v74 <= v73)
                    {
                      if ((int)v74 <= (int)v73) {
                        LODWORD(v74) = *(_DWORD *)(v18 + 40);
                      }
                      break;
                    }
                  }
                  if (v72 != v74)
                  {
                    *(_DWORD *)(v18 + 1400) = 3;
                    int v75 = *(_DWORD *)(v18 + 1404) + 1;
                    *(_DWORD *)(v18 + 1404) = v75;
                    *(_DWORD *)(v18 + 36) = v72;
                    *(_DWORD *)(v18 + 2_Block_object_dispose(&STACK[0x250], 8) = v74;
                    *(_DWORD *)(v18 + 44) = g_adwTxRateTiers[(int)v74];
                    *(_DWORD *)(v18 + 956_Block_object_dispose(&STACK[0x250], 8) = v75;
                    *(_DWORD *)(v18 + 2484) = 1;
                    if (*(_DWORD *)(v18 + 2816))
                    {
                      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                      {
                        uint64_t v76 = VRTraceErrorLogLevelToCSTR();
                        int v77 = *MEMORY[0x1E4F47A50];
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                        {
                          int v78 = *(_DWORD *)(v18 + 44);
                          *(_DWORD *)CMTime buf = 136315906;
                          uint64_t v132 = v76;
                          __int16 v133 = 2080;
                          __int16 v134 = "RampDownTxRate";
                          __int16 v135 = 1024;
                          int v136 = 3170;
                          __int16 v137 = 1024;
                          LODWORD(v13_Block_object_dispose(&STACK[0x250], 8) = v78;
                          _os_log_impl(&dword_1E1EA4000, v77, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: Congestion!!! TxRate v %u, Baseband.", buf, 0x22u);
                        }
                      }
                    }
                    VRLogfilePrint(*(void *)(v18 + 2832), "Congestion!!! TxRate v %u, Baseband.\n", v37, v38, v39, v40, v41, v42, *(_DWORD *)(v18 + 44));
                    VRLogfilePrintWithTimestamp(*(void *)(v18 + 2848), "Rate change [%u] (Ramp Down to %u, Baseband).\n", v79, v80, v81, v82, v83, v84, *(_DWORD *)(v18 + 9568));
                  }
                  int v85 = *(_DWORD *)(v18 + 1396);
                  if (v85)
                  {
                    *(_DWORD *)(v18 + 1396) = v85 & 0xFFFFFFFE;
                    calculateInitialRampUpDeltas(v18);
                    if (*(_DWORD *)(v18 + 2816))
                    {
                      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                      {
                        uint64_t v92 = VRTraceErrorLogLevelToCSTR();
                        double v93 = *MEMORY[0x1E4F47A50];
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)CMTime buf = 136315906;
                          uint64_t v132 = v92;
                          __int16 v133 = 2080;
                          __int16 v134 = "RampDownTxRate";
                          __int16 v135 = 1024;
                          int v136 = 3179;
                          __int16 v137 = 2080;
                          double v138 = "Initial Rampup done!";
                          _os_log_impl(&dword_1E1EA4000, v93, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: %s", buf, 0x26u);
                        }
                      }
                    }
                    VRLogfilePrint(*(void *)(v18 + 2832), "%s", v86, v87, v88, v89, v90, v91, (char)"Initial Rampup done!\n");
                    VRLogfilePrintWithTimestamp(*(void *)(v18 + 2848), "%s", v94, v95, v96, v97, v98, v99, (char)"Initial Rampup done!\n");
                    int v85 = *(_DWORD *)(v18 + 1396);
                  }
                  if ((v85 & 4) != 0) {
                    *(_DWORD *)(v18 + 1396) = v85 & 0xFFFFFFFB;
                  }
                  if (*(_DWORD *)(v18 + 1400) == 3)
                  {
                    unsigned int v100 = *(_DWORD *)(v18 + 2552) + 1;
                    *(_DWORD *)(v18 + 2552) = v100;
                    double v101 = *(double *)(v18 + 2544);
                    if (v101 == 0.0)
                    {
                      *(double *)(v18 + 2544) = v36;
                    }
                    else if (v36 - v101 >= 2.0)
                    {
                      *(_DWORD *)(v18 + 2552) = 0;
                      *(void *)(v18 + 2544) = 0;
                    }
                    else if (v100 >= 4)
                    {
                      *(_DWORD *)(v18 + 240_Block_object_dispose(&STACK[0x250], 8) = 1;
                    }
                  }
                  *(double *)(v18 + 2520) = v36;
                }
                if (v47)
                {
                  if (*(unsigned char *)(v18 + 9836))
                  {
                    if (*(_DWORD *)(v18 + 2480))
                    {
                      *(_DWORD *)(v18 + 2480) = 0;
                      int v102 = 1;
                      goto LABEL_181;
                    }
                    int v103 = 1;
                    int v102 = 1;
                    goto LABEL_180;
                  }
                  v47 &= ~1u;
                }
                if (*(_DWORD *)(v18 + 2480))
                {
                  int v102 = 0;
                  goto LABEL_181;
                }
                int v102 = 0;
                int v103 = *(unsigned __int8 *)(v18 + 9836);
LABEL_180:
                v47 |= v103;
LABEL_181:
                int v104 = *(_DWORD *)(v18 + 2960);
                if (!*(_DWORD *)(v18 + 2472) && (v47 & 1) == 0 && (v104 & 1) != 0)
                {
                  *(_DWORD *)(v18 + 1400) = 5;
                  int v105 = *(_DWORD *)(v18 + 1404) + 1;
                  *(_DWORD *)(v18 + 1404) = v105;
                  *(_DWORD *)(v18 + 956_Block_object_dispose(&STACK[0x250], 8) = v105;
                }
                if (((v104 ^ v47) & 1) != 0 && *(unsigned char *)(v18 + 9836))
                {
                  if (v47) {
                    *(_DWORD *)(v18 + 138_Block_object_dispose(&STACK[0x250], 8) = 0;
                  }
                  __int16 v106 = "Resumed";
                  if (*(_DWORD *)(v18 + 2816))
                  {
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                    {
                      uint64_t v107 = VRTraceErrorLogLevelToCSTR();
                      uint32_t v108 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                      {
                        if (v47) {
                          uint64_t v109 = "Stopped";
                        }
                        else {
                          uint64_t v109 = "Resumed";
                        }
                        *(_DWORD *)CMTime buf = 136315906;
                        uint64_t v132 = v107;
                        __int16 v133 = 2080;
                        __int16 v134 = "UpdateBBAction";
                        __int16 v135 = 1024;
                        int v136 = 3435;
                        __int16 v137 = 2080;
                        double v138 = v109;
                        _os_log_impl(&dword_1E1EA4000, v108, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: Video %s...", buf, 0x26u);
                      }
                    }
                  }
                  if (v47) {
                    __int16 v106 = "Stopped";
                  }
                  VRLogfilePrint(*(void *)(v18 + 2832), "Video %s...\n", v37, v38, v39, v40, v41, v42, (char)v106);
                  VRLogfilePrintWithTimestamp(*(void *)(v18 + 2848), "Video %s...\n", v110, v111, v112, v113, v114, v115, (char)v106);
                }
                *(_DWORD *)(v18 + 2476) = v102;
                *(_DWORD *)(v18 + 2960) = v47;
                pthread_mutex_unlock((pthread_mutex_t *)(v18 + 2560));
                a6 = v122;
                a7 = v123;
                a4 = v120;
                goto LABEL_200;
              }
LABEL_125:
              if (*(_DWORD *)(v18 + 3032))
              {
                ++*(_DWORD *)(v18 + 2988);
                *(double *)(v18 + 2992) = v36;
              }
              else
              {
                v47 &= ~2u;
              }
              goto LABEL_128;
            }
            ++*(_DWORD *)(v18 + 2988);
            *(double *)(v18 + 2992) = v36;
          }
          if ((v47 & 2) == 0) {
            goto LABEL_122;
          }
          goto LABEL_125;
        }
        *(double *)(v18 + 9592) = v36;
        int v47 = 10;
      }
      *(double *)(v18 + 9600) = v36;
      goto LABEL_102;
    }
    unsigned int v48 = *(_DWORD *)(v18 + 2980);
    if (v48 < 0x7D1 || ((double v49 = *(double *)(v18 + 2504), v49 != 0.0) ? (v50 = v36 - v49 <= 0.5) : (v50 = 1), v50))
    {
      if (!*(_DWORD *)(v18 + 2956))
      {
        if ((v35 & 1) != 0
          && (*(double *)(v18 + 9576) < 1.0
           || v36 - *(double *)(v18 + 9584) <= 2.0
           || v36 - *(double *)(v18 + 9552) <= 2.0))
        {
          BOOL v51 = 0;
          int v52 = 0;
          int v53 = 0;
          int v47 = 1;
        }
        else
        {
          BOOL v51 = 0;
          int v52 = 0;
          int v53 = 0;
          int v47 = 0;
        }
        goto LABEL_110;
      }
      int v47 = v35 & 1;
      if (v48 <= 0x1F3)
      {
        BOOL v51 = (v35 & 1) != 0
           && (*(double *)(v18 + 9576) < 1.0
            || v36 - *(double *)(v18 + 9584) <= 2.0
            || v36 - *(double *)(v18 + 9552) <= 2.0);
        int v53 = 0;
        *(_DWORD *)(v18 + 2956) = 0;
        int v52 = 1;
        int v47 = v51;
        goto LABEL_110;
      }
      BOOL v51 = 0;
LABEL_98:
      int v52 = 0;
      int v53 = 0;
      goto LABEL_110;
    }
    unsigned int v54 = *(_DWORD *)(v18 + 2968);
    if (v54 >= v124)
    {
      if (v54 >= g_adwTxRateTiers[*(int *)(v18 + 40)])
      {
        if ((v35 & 1) == 0)
        {
          if (*(_DWORD *)(v18 + 3036) + *(_DWORD *)(v18 + 3032) > 2 * (v54 >> 3) && v36 - *(double *)(v18 + 9592) > 0.1)
          {
            double v55 = (double *)(v18 + 9592);
            int v47 = 2;
            goto LABEL_95;
          }
          BOOL v51 = 0;
          int v47 = 0;
LABEL_97:
          if (!*(_DWORD *)(v18 + 2956))
          {
            int v52 = 0;
            int v53 = 1;
            *(_DWORD *)(v18 + 2956) = 1;
            goto LABEL_110;
          }
          goto LABEL_98;
        }
      }
      else if ((v35 & 1) == 0)
      {
        double v55 = (double *)(v18 + 9592);
        int v47 = 3;
        goto LABEL_95;
      }
    }
    else
    {
      if ((v35 & 1) == 0)
      {
        *(double *)(v18 + 9592) = v36;
        double v55 = (double *)(v18 + 9600);
        int v47 = 11;
LABEL_95:
        *double v55 = v36;
        BOOL v51 = 1;
        goto LABEL_97;
      }
      if (*(_DWORD *)(v18 + 3036) + *(_DWORD *)(v18 + 3032) > ((v124 >> 2) & 0x1FFFFFFF)
        && v36 - *(double *)(v18 + 9600) > 0.1)
      {
        double v55 = (double *)(v18 + 9600);
        int v47 = 9;
        goto LABEL_95;
      }
    }
    BOOL v51 = 0;
    int v47 = 1;
    goto LABEL_97;
  }
LABEL_200:
  if (a2) {
    *a2 = *(_DWORD *)(v18 + 44);
  }
  if (a8) {
    *a8 = *(_DWORD *)(v18 + 1392);
  }
  if (a3) {
    *a3 = *(void *)(v18 + 2720);
  }
  if (a4) {
    *a4 = *(_DWORD *)(v18 + 2700);
  }
  if (a5) {
    *a5 = *(_DWORD *)(v18 + 2704);
  }
  if (a6) {
    *a6 = *(void *)(v18 + 2736);
  }
  if (a7) {
    *a7 = *(_DWORD *)(v18 + 1404);
  }
  if (v19) {
    *int v19 = *(_DWORD *)(v18 + 2960);
  }
  BOOL v116 = Throttling_AFRC_IsInThrottlingMode((unsigned char *)(v18 + 872), *(_DWORD *)(v18 + 44));
  *(unsigned char *)(v18 + 884) = v116;
  if (a11) {
    *a11 = v116;
  }
  if (a12) {
    *a12 = *(_DWORD *)(v18 + 252);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCRecordMaxBurstyLoss(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (pthread_mutex_t *)(v3 + 2864);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 2864));
  if (*(_DWORD *)(v4 + 140) < a2) {
    *(_DWORD *)(v4 + 140) = a2;
  }
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCRecordMaxAudioConsecutiveLoss(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (pthread_mutex_t *)(v3 + 2864);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 2864));
  if (*(_DWORD *)(v4 + 144) < a2) {
    *(_DWORD *)(v4 + 144) = a2;
  }
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCUpdateVideoSendingBitrate(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  *(_DWORD *)(v3 + 138_Block_object_dispose(&STACK[0x250], 8) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCUpdateAudioSendingBitrate(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  *(_DWORD *)(v3 + 1392) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetFeedbackControlInfo(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v5 = (pthread_mutex_t *)(v3 + 2864);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 2864));
  if (a2)
  {
    double v6 = *(double *)(v4 + 672) / 1000.0;
    int v7 = *(_DWORD *)(v4 + 116);
    LOWORD(v22) = *(_DWORD *)(v4 + 112);
    WORD1(v22) = (int)v6;
    int v8 = *(_DWORD *)(v4 + 136);
    WORD2(v22) = *(_DWORD *)(v4 + 140);
    WORD5(v22) = *(_DWORD *)(v4 + 128);
    WORD3(v22) = v8;
    int v9 = *(_DWORD *)(v4 + 164);
    HIDWORD(v22) = (*(_DWORD *)(v4 + 120) + v7) >> 3;
    LODWORD(v23) = v9;
    WORD4(v22) = *(_DWORD *)(v4 + 144);
    *(_DWORD *)(v4 + 140) = 0;
    *(_DWORD *)(v4 + 144) = 0;
    pthread_mutex_unlock(v5);
    VCMediaControlInfoSetInfoUnserialized(a2, (const char *)&v22, 0);
  }
  else
  {
    *(_DWORD *)(v4 + 140) = 0;
    *(_DWORD *)(v4 + 144) = 0;
    pthread_mutex_unlock(v5);
  }
  uint64_t v11 = (unsigned char *)(v4 + 9776);
  VCRateControlGetBWEstimation(*(void **)(v4 + 9760), (_DWORD *)(v4 + 688));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    uint64_t v14 = *MEMORY[0x1E4F47A50];
    uint64_t v15 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v16 = *(_DWORD *)(v4 + 688);
        double v17 = *(double *)(v4 + 672) / 1000.0;
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v26 = v13;
        __int16 v27 = 2080;
        uint64_t v28 = "AFRCSetFeedbackControlInfo";
        __int16 v29 = 1024;
        int v30 = 3621;
        __int16 v31 = 1024;
        unsigned int v32 = v16 / 0x3E8;
        __int16 v33 = 1024;
        unsigned int v34 = v17;
        _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Bandwidth estimation new: %d, afrc:%d", buf, 0x28u);
      }
    }
    else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v20 = *(_DWORD *)(v4 + 688);
      double v21 = *(double *)(v4 + 672) / 1000.0;
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v26 = v13;
      __int16 v27 = 2080;
      uint64_t v28 = "AFRCSetFeedbackControlInfo";
      __int16 v29 = 1024;
      int v30 = 3621;
      __int16 v31 = 1024;
      unsigned int v32 = v20 / 0x3E8;
      __int16 v33 = 1024;
      unsigned int v34 = v21;
      _os_log_debug_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d Bandwidth estimation new: %d, afrc:%d", buf, 0x28u);
    }
  }
  unsigned int v18 = *(_DWORD *)(v4 + 9796);
  if (v18)
  {
    LODWORD(v12) = *(_DWORD *)(v4 + 44);
    if (RateMonitorUpdateDataSamples(*(void *)(v4 + 9768), (double)v12, (double)v18))
    {
      if (!*v11)
      {
        reportingSymptom();
        *uint64_t v11 = 1;
      }
    }
  }
  unsigned int v19 = *(_DWORD *)(v4 + 688);
  if (v19
    && RateMonitorUpdateDataSamples(*(void *)(v4 + 9784), *(double *)(v4 + 672), (double)v19)
    && !*(unsigned char *)(v4 + 9792))
  {
    reportingSymptom();
    *(unsigned char *)(v4 + 9792) = 1;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetPeerArrivalTime(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149646338;
  }
  if (!a2)
  {
    uint64_t v6 = v5;
    int v7 = (pthread_mutex_t *)(v5 + 2864);
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 2864));
    *a3 = *(void *)(v6 + 152);
    pthread_mutex_unlock(v7);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGenerateFeedbackWithControlInfo(void *a1, int32x4_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 2149580801;
  }
  if (!a1) {
    return 0;
  }
  if (VCMediaControlInfoHasInfo(a1, 0))
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    VCMediaControlInfoGetInfoUnserialized(a1, (const char *)&v8, 0);
    a2->i32[0] = (unsigned __int16)v8;
    a2->i32[2] = WORD1(v8);
    int32x4_t v4 = (int32x4_t)vmovl_u16(*(uint16x4_t *)((char *)&v8 + 4));
    a2[1] = vuzp1q_s32(v4, (int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL));
    a2[2].i32[0] = v9;
  }
  if (VCMediaControlInfoHasInfo(a1, (const char *)1))
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    VCMediaControlInfoGetInfoUnserialized(a1, (const char *)&v8, 1);
    a2->i32[1] = DWORD1(v9);
    __int32 v5 = HIDWORD(v9);
    a2[2].i32[1] = WORD4(v9);
    a2[2].i32[2] = v5;
  }
  uint64_t result = VCMediaControlInfoHasInfo(a1, (const char *)2);
  if (result)
  {
    LODWORD(v_Block_object_dispose(&STACK[0x250], 8) = -1431655766;
    VCMediaControlInfoGetInfo(a1, (const char *)2, (uint64_t)&v8, 4, 0);
    uint64_t result = 0;
    unsigned int v7 = bswap32(v8);
  }
  else
  {
    unsigned int v7 = -1;
  }
  a2[2].i32[3] = v7;
  return result;
}

uint64_t AFRCProcessVideoReceiveMetric(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149646338;
  }
  uint64_t v6 = v5;
  unsigned int v7 = (pthread_mutex_t *)(v5 + 2864);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 2864));
  *(_DWORD *)(v6 + 132) = a2;
  *(_DWORD *)(v6 + 120) = a3;
  pthread_mutex_unlock(v7);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCProcessFeedbackPacket(double a1, double a2, double a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  unint64_t v19 = MicroToNTP(a1);
  unsigned int v20 = NTPToMiddle32(v19);
  uint64_t v21 = CheckInHandleDebug();
  if (!v21) {
    return 2149646338;
  }
  uint64_t v22 = v21;
  int v137 = a9;
  long long v23 = (void *)(v21 + 268);
  uint64_t v24 = (pthread_mutex_t *)(v21 + 2864);
  pthread_mutex_lock((pthread_mutex_t *)(v21 + 2864));
  int v25 = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(v22 + 252) = *(_DWORD *)(a5 + 8);
  uint64_t v26 = (_DWORD *)(v22 + 252);
  *(_DWORD *)(v22 + 12_Block_object_dispose(&STACK[0x250], 8) = a7;
  *(_DWORD *)(v22 + 112) = v25;
  *(_DWORD *)(v22 + 116) = a8;
  *(_DWORD *)(v22 + 160) = a6;
  *(_DWORD *)(v22 + 136) = *(_DWORD *)(v22 + 132);
  *long long v23 = *(void *)(a5 + 24);
  *(_DWORD *)(v22 + 264) = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(v22 + 276) = *(_DWORD *)(a5 + 16);
  pthread_mutex_unlock(v24);
  pthread_mutex_lock((pthread_mutex_t *)(v22 + 2560));
  *(double *)(v22 + 152) = a1;
  pthread_mutex_unlock((pthread_mutex_t *)(v22 + 2560));
  Throttling_AFRC_OverrideRxEstimate(v22 + 872, (_DWORD *)(v22 + 252));
  unsigned int v27 = *(_DWORD *)(a5 + 36);
  if (*(_DWORD *)(v22 + 168))
  {
    int v28 = *(_DWORD *)(v22 + 172);
    if (v27 == (unsigned __int16)v28 || (unsigned __int16)(v27 - v28) >= 0x7FFFu) {
      goto LABEL_139;
    }
    if ((unsigned __int16)*(_DWORD *)(a5 + 36) < (unsigned __int16)v28) {
      v28 += 0x10000;
    }
    v27 |= v28 & 0xFFFF0000;
    *(_DWORD *)(v22 + 172) = v27;
  }
  else
  {
    *(_DWORD *)(v22 + 16_Block_object_dispose(&STACK[0x250], 8) = 1;
    *(_DWORD *)(v22 + 172) = v27;
  }
  unsigned int v30 = *(_DWORD *)(a5 + 4);
  if (v30)
  {
    unsigned int v31 = (unsigned __int16)(v20 >> 6);
    int v32 = *(_DWORD *)a5;
    if (v31 < *(_DWORD *)a5) {
      v31 |= 0x10000u;
    }
    unsigned int v33 = v31 - v32;
    BOOL v34 = v33 >= v30;
    unsigned int v35 = v33 - v30;
    if (v35 == 0 || !v34) {
      unsigned int v35 = 1;
    }
    int v36 = *(_DWORD *)(v22 + 52);
    if (v36) {
      unsigned int v35 = (9 * v36 + v35) / 0xA;
    }
    *(_DWORD *)(v22 + 52) = v35;
  }
  else
  {
    unsigned int v35 = *(_DWORD *)(v22 + 52);
    int v32 = -1;
  }
  *(_DWORD *)(v22 + 260) = v32;
  double v37 = (double)v35 * 0.0009765625;
  double v38 = *(double *)(v22 + 56);
  if (v38 <= v37) {
    double v38 = (double)v35 * 0.0009765625;
  }
  *(double *)(v22 + 56) = v38;
  unsigned int v39 = *(_DWORD *)(v22 + 64);
  if (v39 <= *(_DWORD *)(a5 + 16)) {
    unsigned int v39 = *(_DWORD *)(a5 + 16);
  }
  *(_DWORD *)(v22 + 64) = v39;
  double v46 = RTPUnpackDouble(*(_DWORD *)(a5 + 40));
  if (a2 >= 0.0) {
    *(double *)(v22 + 176) = a2;
  }
  if (a3 >= 0.0) {
    *(double *)(v22 + 184) = a3;
  }
  if (v137 != -1) {
    *(_DWORD *)(v22 + 24_Block_object_dispose(&STACK[0x250], 8) = v137;
  }
  if (a10 != -1) {
    *(_DWORD *)(v22 + 256) = a10;
  }
  double v47 = (double)v27 * 0.0009765625;
  VRLogfilePrint(*(void *)(v22 + 2840), "%04X\t%u\t%u\t%u\t%u\t%u\t%04X\t%u\n", v40, v41, v42, v43, v44, v45, *(_WORD *)a5);
  UpdateFECLevel(v22);
  BOOL v48 = *(_DWORD *)(a5 + 40) != 0xFFFF;
  int v138 = -1431655766;
  double v49 = micro();
  pthread_mutex_lock((pthread_mutex_t *)(v22 + 2560));
  if (!*(_DWORD *)(v22 + 2472))
  {
    if ((*(unsigned char *)(v22 + 1396) & 1) == 0
      || *(_DWORD *)(v22 + 2948)
      || *(_DWORD *)(v22 + 2952)
      || *(_DWORD *)(v22 + 9696))
    {
      int v50 = *(_DWORD *)(v22 + 28) + 1;
    }
    else
    {
      int v105 = *(_DWORD *)(v22 + 28);
      if (g_adwTxRateTiers[v105 + 2] > *(_DWORD *)(v22 + 20)) {
        int v50 = v105 + 1;
      }
      else {
        int v50 = v105 + 2;
      }
    }
    BOOL v51 = v50 <= 36 && g_adwTxRateTiers[v50] <= *(_DWORD *)(v22 + 20);
    int v138 = v51;
    DetectCongestion(v22, v32, &v138, v48, v47, v46, v37);
    int v58 = *(_DWORD *)(v22 + 1396);
    if ((v58 & 2) == 0)
    {
      if ((v58 & 9) != 0 && v138)
      {
        if (*(unsigned char *)(v22 + 2960))
        {
          double v99 = *(double *)(v22 + 9576);
          if (v99 >= 1.0)
          {
            *(_DWORD *)(v22 + 2480) = 1;
          }
          else if (*(int *)(v22 + 9572) >= 1 && v49 - *(double *)(v22 + 9584) > 2.0)
          {
            double v100 = fmin(v99 + v99, 1.0);
            *(double *)(v22 + 9576) = v100;
            *(double *)(v22 + 9584) = v49;
            MediaQueue_SetAudioFraction(v100);
            *(_DWORD *)(v22 + 9572) = 0;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v101 = VRTraceErrorLogLevelToCSTR();
              int v102 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v103 = *(void *)(v22 + 9576);
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v140 = v101;
                __int16 v141 = 2080;
                uint64_t v142 = "DoRateControl";
                __int16 v143 = 1024;
                int v144 = 4282;
                __int16 v145 = 2048;
                int v146 = *(const char **)&v99;
                __int16 v147 = 2048;
                uint64_t v148 = v103;
                _os_log_impl(&dword_1E1EA4000, v102, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Audio fraction change [%.2f->%.2f].", buf, 0x30u);
              }
            }
          }
          int v104 = *(_DWORD *)(v22 + 1396);
          if (v104)
          {
            *(_DWORD *)(v22 + 1396) = v104 & 0xFFFFFFFE;
            calculateInitialRampUpDeltas(v22);
            int v104 = *(_DWORD *)(v22 + 1396);
          }
          if ((v104 & 8) == 0) {
            goto LABEL_134;
          }
        }
        else
        {
          if ((v58 & 1) == 0)
          {
            if (*(_DWORD *)(v22 + 2944))
            {
              if (v50 <= 35 && *v26)
              {
                uint64_t v59 = v50 - 36;
                uint64_t v60 = &g_adwTxRateTiers[v50 + 1];
                while (*v60 < *(_DWORD *)(v22 + 20)
                     && (*(v60 - 1) - *(_DWORD *)(v22 + 44)) >> 8 <= 0x7C
                     && 1000 * *v26 > v60[1])
                {
                  ++v50;
                  ++v60;
                  BOOL v34 = __CFADD__(v59++, 1);
                  if (v34)
                  {
                    int v50 = 36;
                    break;
                  }
                }
              }
            }
            else
            {
              if (!*(_DWORD *)(v22 + 2948)
                && !*(_DWORD *)(v22 + 2952)
                && !*(_DWORD *)(v22 + 9696)
                && v50 <= 35
                && *(double *)(v22 + 2512) <= *(double *)(v22 + 2520))
              {
                int v133 = *(_DWORD *)(v22 + 9572);
                uint64_t v134 = v50 + 1;
                while (1)
                {
                  unsigned int v135 = g_adwTxRateTiers[v134];
                  if (v135 >= *(_DWORD *)(v22 + 20)) {
                    break;
                  }
                  if (v135 - *(_DWORD *)(v22 + 44) > 0xFA00 || v133 <= 0) {
                    break;
                  }
                  --v133;
                  ++v50;
                  ++v134;
                  int v106 = 36;
                  if (v134 == 37) {
                    goto LABEL_119;
                  }
                }
              }
              int v106 = v50;
LABEL_119:
              *(_DWORD *)(v22 + 9572) = 0;
              int v50 = v106;
            }
          }
          *(_DWORD *)(v22 + 36) = *(_DWORD *)(v22 + 28);
          *(_DWORD *)(v22 + 2_Block_object_dispose(&STACK[0x250], 8) = v50;
          *(_DWORD *)(v22 + 44) = g_adwTxRateTiers[v50];
          *(_DWORD *)(v22 + 1400) = 2;
          int v107 = *(_DWORD *)(v22 + 1404) + 1;
          *(_DWORD *)(v22 + 1404) = v107;
          *(_DWORD *)(v22 + 956_Block_object_dispose(&STACK[0x250], 8) = v107;
          *(_DWORD *)(v22 + 2552) = 0;
          *(void *)(v22 + 2544) = 0;
          if (*(_DWORD *)(v22 + 2816))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v108 = VRTraceErrorLogLevelToCSTR();
              uint64_t v109 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v110 = *(_DWORD *)(v22 + 44);
                *(_DWORD *)CMTime buf = 136315906;
                uint64_t v140 = v108;
                __int16 v141 = 2080;
                uint64_t v142 = "DoRateControl";
                __int16 v143 = 1024;
                int v144 = 4250;
                __int16 v145 = 1024;
                LODWORD(v146) = v110;
                _os_log_impl(&dword_1E1EA4000, v109, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: TxRate ^ %u", buf, 0x22u);
              }
            }
          }
          VRLogfilePrint(*(void *)(v22 + 2832), "TxRate ^ %u\n", v52, v53, v54, v55, v56, v57, *(_DWORD *)(v22 + 44));
          VRLogfilePrintWithTimestamp(*(void *)(v22 + 2848), "Rate change [%u] (Ramp Up to %u).\n", v111, v112, v113, v114, v115, v116, *(_DWORD *)(v22 + 9568));
          if (v50 > 35 || g_adwTxRateTiers[v50 + 1] >= *(_DWORD *)(v22 + 20))
          {
            int v117 = *(_DWORD *)(v22 + 1396);
            if (v117)
            {
              *(_DWORD *)(v22 + 1396) = v117 & 0xFFFFFFFE;
              calculateInitialRampUpDeltas(v22);
              if (*(_DWORD *)(v22 + 2816))
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                {
                  uint64_t v124 = VRTraceErrorLogLevelToCSTR();
                  uint64_t v125 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)CMTime buf = 136315906;
                    uint64_t v140 = v124;
                    __int16 v141 = 2080;
                    uint64_t v142 = "DoRateControl";
                    __int16 v143 = 1024;
                    int v144 = 4260;
                    __int16 v145 = 2080;
                    int v146 = "Initial Rampup Done!";
                    _os_log_impl(&dword_1E1EA4000, v125, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: %s", buf, 0x26u);
                  }
                }
              }
              VRLogfilePrint(*(void *)(v22 + 2832), "%s", v118, v119, v120, v121, v122, v123, (char)"Initial Rampup Done!\n");
              VRLogfilePrintWithTimestamp(*(void *)(v22 + 2848), "%s", v126, v127, v128, v129, v130, v131, (char)"Initial Rampup Done!\n");
            }
          }
          int v104 = *(_DWORD *)(v22 + 1396);
        }
        *(_DWORD *)(v22 + 1396) = v104 & 0xFFFFFFF7;
      }
LABEL_134:
      if (v49 - *(double *)(v22 + 104) > 3.0)
      {
        ConfigureAFRCDefaults(v22);
        *(double *)(v22 + 104) = v49;
      }
      int v132 = *(_DWORD *)(v22 + 68);
      if ((v132 & 0x80000000) == 0) {
        *(_DWORD *)(v22 + 44) = v132;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v22 + 2560));
      goto LABEL_139;
    }
    int v61 = *(_DWORD *)(v22 + 28);
    if (v61 <= 0)
    {
      *(_DWORD *)(v22 + 1396) = v58 & 0xFFFFFFED;
    }
    else
    {
      if ((v58 & 1) != 0 && !*(_DWORD *)(v22 + 9696))
      {
        if (v61 == *(_DWORD *)(v22 + 32)) {
          int v62 = -3;
        }
        else {
          int v62 = -2;
        }
      }
      else
      {
        int v62 = -1;
      }
      int v63 = v62 + v61;
      if ((v58 & 0x10) == 0 && !*(_DWORD *)(v22 + 9696)) {
        int v63 = (__PAIR64__(v63, (*(_DWORD *)(v22 + 44) - g_adwTxRateTiers[v63]) >> 8) - 125) >> 32;
      }
      if (v63 <= *(_DWORD *)(v22 + 40)) {
        int v63 = *(_DWORD *)(v22 + 40);
      }
      *(_DWORD *)(v22 + 1396) = v58 & 0xFFFFFFED;
      if (v61 > v63)
      {
        *(_DWORD *)(v22 + 1400) = 3;
        int v64 = *(_DWORD *)(v22 + 1404) + 1;
        *(_DWORD *)(v22 + 1404) = v64;
        *(_DWORD *)(v22 + 36) = v61;
        *(_DWORD *)(v22 + 2_Block_object_dispose(&STACK[0x250], 8) = v63;
        *(_DWORD *)(v22 + 44) = g_adwTxRateTiers[v63];
        *(_DWORD *)(v22 + 956_Block_object_dispose(&STACK[0x250], 8) = v64;
        if (!v63 && *(_DWORD *)(v22 + 9696)) {
          *(double *)(v22 + 2520) = v49;
        }
        if (*(_DWORD *)(v22 + 2816))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v65 = VRTraceErrorLogLevelToCSTR();
            uint64_t v66 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v67 = *(_DWORD *)(v22 + 44);
              *(_DWORD *)CMTime buf = 136315906;
              uint64_t v140 = v65;
              __int16 v141 = 2080;
              uint64_t v142 = "DoRateControl";
              __int16 v143 = 1024;
              int v144 = 4177;
              __int16 v145 = 1024;
              LODWORD(v146) = v67;
              _os_log_impl(&dword_1E1EA4000, v66, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: Congestion!!! TxRate v %u", buf, 0x22u);
            }
          }
        }
        VRLogfilePrint(*(void *)(v22 + 2832), "Congestion!!! TxRate v %u\n", v52, v53, v54, v55, v56, v57, *(_DWORD *)(v22 + 44));
        VRLogfilePrintWithTimestamp(*(void *)(v22 + 2848), "Rate change [%u] (Ramp Down to %u, AFRC).\n", v68, v69, v70, v71, v72, v73, *(_DWORD *)(v22 + 9568));
LABEL_83:
        *(double *)(v22 + 2512) = v49;
        int v82 = *(_DWORD *)(v22 + 1396);
        if (v82)
        {
          *(_DWORD *)(v22 + 1396) = v82 & 0xFFFFFFFE;
          calculateInitialRampUpDeltas(v22);
          if (*(_DWORD *)(v22 + 2816))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v89 = VRTraceErrorLogLevelToCSTR();
              uint64_t v90 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315906;
                uint64_t v140 = v89;
                __int16 v141 = 2080;
                uint64_t v142 = "DoRateControl";
                __int16 v143 = 1024;
                int v144 = 4197;
                __int16 v145 = 2080;
                int v146 = "Initial Rampup done!";
                _os_log_impl(&dword_1E1EA4000, v90, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: %s", buf, 0x26u);
              }
            }
          }
          VRLogfilePrint(*(void *)(v22 + 2832), "%s", v83, v84, v85, v86, v87, v88, (char)"Initial Rampup done!\n");
          VRLogfilePrintWithTimestamp(*(void *)(v22 + 2848), "%s", v91, v92, v93, v94, v95, v96, (char)"Initial Rampup Done!\n");
          int v82 = *(_DWORD *)(v22 + 1396);
        }
        if ((v82 & 4) != 0) {
          *(_DWORD *)(v22 + 1396) = v82 & 0xFFFFFFFB;
        }
        if (*(_DWORD *)(v22 + 1400) == 3)
        {
          unsigned int v97 = *(_DWORD *)(v22 + 2552) + 1;
          *(_DWORD *)(v22 + 2552) = v97;
          double v98 = *(double *)(v22 + 2544);
          if (v98 == 0.0)
          {
            *(double *)(v22 + 2544) = v49;
          }
          else if (v49 - v98 >= 2.0)
          {
            *(_DWORD *)(v22 + 2552) = 0;
            *(void *)(v22 + 2544) = 0;
          }
          else if (v97 >= 4)
          {
            *(_DWORD *)(v22 + 240_Block_object_dispose(&STACK[0x250], 8) = 1;
          }
        }
        goto LABEL_134;
      }
    }
    if (*(_DWORD *)(v22 + 2480) && *(unsigned char *)(v22 + 9836))
    {
      *(_DWORD *)(v22 + 2480) = 0;
      if (*(_DWORD *)(v22 + 2816))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v74 = VRTraceErrorLogLevelToCSTR();
          int v75 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v140 = v74;
            __int16 v141 = 2080;
            uint64_t v142 = "DoRateControl";
            __int16 v143 = 1024;
            int v144 = 4185;
            __int16 v145 = 2080;
            int v146 = "Congestion!!! Pause video.";
            _os_log_impl(&dword_1E1EA4000, v75, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: %s", buf, 0x26u);
          }
        }
      }
      VRLogfilePrint(*(void *)(v22 + 2832), "%s", v52, v53, v54, v55, v56, v57, (char)"Congestion!!! Pause video.\n");
      VRLogfilePrintWithTimestamp(*(void *)(v22 + 2848), "%s", v76, v77, v78, v79, v80, v81, (char)"AFRC: Congestion!!! Pause video.\n");
    }
    goto LABEL_83;
  }
  DetectCongestion(v22, v32, &v138, 0, v47, v46, v37);
  pthread_mutex_unlock((pthread_mutex_t *)(v22 + 2560));
LABEL_139:
  CheckOutHandleDebug();
  return 0;
}

uint64_t UpdateFECLevel(uint64_t a1)
{
  unsigned int v2 = (pthread_mutex_t *)(a1 + 2744);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2744));
  int v3 = *(_DWORD *)(a1 + 2408);
  double v4 = *(double *)(a1 + 176);
  int v5 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 9696))
  {
    if (v5 > 2) {
      goto LABEL_12;
    }
  }
  else if (v5 >= 8 && *(double *)(a1 + 9576) >= 1.0)
  {
LABEL_12:
    if (*(unsigned char *)(a1 + 2696))
    {
      unsigned int v7 = *(_DWORD *)(a1 + 2700);
      unsigned int v8 = fmin(v4 * 10.0, 10.0);
      int v9 = *(_DWORD *)(a1 + 2704);
      int v10 = *(_DWORD *)(a1 + 256);
      if (v10 + 1 > v8) {
        unsigned int v11 = v10 + 1;
      }
      else {
        unsigned int v11 = v8;
      }
      if (v11 <= v7) {
        unsigned int v11 = *(_DWORD *)(a1 + 2700);
      }
      if (v7 >= v8) {
        unsigned int v12 = v8;
      }
      else {
        unsigned int v12 = *(_DWORD *)(a1 + 2700);
      }
      if (v3) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v8;
      }
      if (v13 != v7) {
        *(_DWORD *)(a1 + 270_Block_object_dispose(&STACK[0x250], 8) = v13;
      }
      if (v11 != v9) {
        *(_DWORD *)(a1 + 2712) = v11;
      }
    }
    else
    {
      double v14 = *(double *)(a1 + 2720);
      double v15 = 1.0;
      if (v14 == 1.0)
      {
        if (!v3)
        {
          double v15 = 1.5;
          if (v4 <= *(double *)(a1 + 88))
          {
            double v15 = 2.0;
            if (v4 <= *(double *)(a1 + 96)) {
              double v15 = 1.0;
            }
          }
        }
      }
      else if (v14 == 1.5)
      {
        if (v4 <= *(double *)(a1 + 96))
        {
          double v15 = 1.0;
          if (v4 >= *(double *)(a1 + 80)) {
            double v15 = 1.5;
          }
        }
        else
        {
          double v15 = 2.0;
          if (v3) {
            double v15 = 1.5;
          }
        }
      }
      else
      {
        double v15 = 1.0;
        if (v4 >= *(double *)(a1 + 80))
        {
          if (v4 >= *(double *)(a1 + 88)) {
            double v15 = *(double *)(a1 + 2720);
          }
          else {
            double v15 = 1.5;
          }
        }
      }
      if (v15 != v14) {
        *(double *)(a1 + 272_Block_object_dispose(&STACK[0x250], 8) = v15;
      }
    }
    goto LABEL_9;
  }
  if (*(double *)(a1 + 2720) != 1.0) {
    MediaQueue_SetAudioFECLevel(1.0);
  }
  *(void *)(a1 + 2720) = 0x3FF0000000000000;
  *(void *)(a1 + 2700) = 0;
LABEL_9:

  return pthread_mutex_unlock(v2);
}

uint64_t AFRCGetStat(uint64_t a1, double *a2, _DWORD *a3, _DWORD *a4, int *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v13 = CheckInHandleDebug();
  if (!v13) {
    return 2149646338;
  }
  if (a2)
  {
    double v14 = *(double *)(v13 + 176);
    if (!*(unsigned char *)(v13 + 244)) {
      double v14 = v14 * *(double *)(v13 + 2720);
    }
    *a2 = v14;
  }
  if (a3) {
    *a3 = *(_DWORD *)(v13 + 256);
  }
  if (a4) {
    *a4 = *(_DWORD *)(v13 + 52);
  }
  if (a5)
  {
    int v15 = *(_DWORD *)(v13 + 1412);
    int v16 = 0xFFFF;
    BOOL v17 = __OFSUB__(v15, 1);
    int v18 = v15 - 1;
    if (v18 < 0 == v17)
    {
      double v19 = *(double *)(v13 + 8 * v18 + 1896);
      unsigned int v20 = vcvtd_n_s64_f64(v19, 0xDuLL);
      if (v19 == 0.0) {
        int v16 = 0xFFFF;
      }
      else {
        int v16 = v20;
      }
    }
    *a5 = v16;
  }
  if (a8) {
    *a8 = *(_DWORD *)(v13 + 1400) == 3;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCRecordKeyFrame(uint64_t a1, char a2, int a3, int a4, int a5, int a6)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v11) {
    return 2149646338;
  }
  unsigned int v12 = v11;
  uint64_t v13 = v11 + 40;
  pthread_mutex_lock(v11 + 40);
  *(_WORD *)&v12[38].__opaque[48] = a3;
  *(_DWORD *)&v12[38].__opaque[52] = a4;
  LODWORD(v12[39].__sig) = a5;
  if (a6)
  {
    *(double *)v12[39].__opaque = micro();
    v12[46].__opaque[52] = a2;
  }
  *(_DWORD *)&v12[46].__opaque[20] = *(_DWORD *)&v12->__opaque[36];
  pthread_mutex_unlock(v13);
  uint64_t v20 = *(void *)&v12[44].__opaque[24];
  if (v20)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)int v25 = 0u;
    long long v26 = 0u;
    if (a4 >= 1)
    {
      if (a4 >= 102) {
        int v21 = 102;
      }
      else {
        int v21 = a4;
      }
      uint64_t v22 = v25;
      do
      {
        sprintf(v22, "%04X ", a3);
        v22 += 5;
        ++a3;
        --v21;
      }
      while (v21);
      uint64_t v20 = *(void *)&v12[44].__opaque[24];
    }
    long long v23 = "Key";
    if (!a6) {
      long long v23 = "Refresh";
    }
    VRLogfilePrintWithTimestamp(v20, "%s frame (%08X) is generated PT (%u), %d packets. [%s]\n", v14, v15, v16, v17, v18, v19, (char)v23);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCMarkAdditionalFlushes(uint64_t a1, int a2)
{
  int v3 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  double v4 = v3;
  int v5 = v3 + 40;
  pthread_mutex_lock(v3 + 40);
  *(_DWORD *)&v4[46].__opaque[36] += a2;
  *(double *)&v4[46].__opaque[40] = micro();
  VRLogfilePrintWithTimestamp(*(void *)&v4[44].__opaque[24], "Add additional flush(%u).\n", v6, v7, v8, v9, v10, v11, *(_DWORD *)&v4[46].__opaque[36]);
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCCancelFlush()
{
  uint64_t v0 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v0) {
    return 2149646338;
  }
  uint64_t v1 = v0;
  unsigned int v2 = v0 + 40;
  pthread_mutex_lock(v0 + 40);
  double v9 = micro();
  int v10 = *(_DWORD *)&v1[46].__opaque[36] - 1;
  *(_DWORD *)&v1[46].__opaque[36] = v10;
  if (v10)
  {
    *(_DWORD *)v1[149].__opaque = 0;
    *(double *)&v1[149].__opaque[8] = v9;
    *(_DWORD *)&v1[149].__opaque[28] = 0;
  }
  *(double *)&v1[46].__opaque[40] = v9;
  VRLogfilePrintWithTimestamp(*(void *)&v1[44].__opaque[24], "Pending baseband flush (%u) is cancelled%s.\n", v3, v4, v5, v6, v7, v8, v10);
  pthread_mutex_unlock(v2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCProcessBasebandNotification(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  __dst[756] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 2149646370;
  if (v3 >= 8)
  {
    uint64_t v6 = v4;
    unsigned int v7 = v3;
    uint64_t v8 = v2;
    uint64_t v9 = v1;
    memcpy(__dst, &unk_1E259C348, 0x17A0uLL);
    WORD2(__dst[0]) = bswap32(*(unsigned __int16 *)(v8 + 6)) >> 16;
    unsigned int v10 = bswap32(*(unsigned __int16 *)(v8 + 4)) >> 16;
    if (v10 == 51966)
    {
      if (v7 >= 0x24)
      {
        LODWORD(__dst[0]) = 1;
        __dst[1] = v6;
        LOWORD(__dst[2]) = *(unsigned __int8 *)(v8 + 12);
        BYTE2(__dst[2]) = *(unsigned char *)(v8 + 13);
        WORD2(__dst[2]) = bswap32(*(unsigned __int16 *)(v8 + 14)) >> 16;
        HIWORD(__dst[2]) = *(_WORD *)(v8 + 16);
        *(int8x16_t *)&__dst[3] = vrev32q_s8(*(int8x16_t *)(v8 + 20));
        return AFRCUpdateBBNote(v9, (uint64_t)__dst);
      }
    }
    else if (v10 == 57005)
    {
      if (v7 >= 0x10)
      {
        LODWORD(__dst[0]) = 2;
        __dst[1] = v6;
        LOWORD(__dst[2]) = bswap32(*(unsigned __int16 *)(v8 + 12)) >> 16;
        unsigned int v11 = *(unsigned __int16 *)(v8 + 14);
        WORD1(__dst[2]) = __rev16(v11);
        if (v11 != 0xFFFF)
        {
          uint64_t v37 = v9;
          uint64_t v12 = 0;
          uint64_t v13 = (char *)&__dst[3] + 2;
          int v14 = 16;
          do
          {
            int v15 = v14 + 3;
            signed int v16 = v7 - (v14 + 3);
            if ((int)v7 < v14 + 3) {
              goto LABEL_34;
            }
            uint64_t v17 = (unsigned __int8 *)(v8 + v14);
            uint64_t v18 = (unsigned __int8 *)&__dst[2] + 1004 * v12 + 6;
            *uint64_t v18 = *v17;
            unsigned int v19 = bswap32(*(unsigned __int16 *)(v17 + 1));
            unsigned int v20 = HIWORD(v19);
            *((_WORD *)v18 + 1) = HIWORD(v19);
            int v21 = v18 + 2;
            signed int v22 = v16;
            int v23 = v16 / 2;
            if (v16 / 2 < (int)HIWORD(v19))
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v24 = VRTraceErrorLogLevelToCSTR();
                int v25 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  int v34 = (unsigned __int16)*v21;
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v39 = v24;
                  __int16 v40 = 2080;
                  long long v41 = "AFRCProcessBasebandNotification";
                  __int16 v42 = 1024;
                  int v43 = 4988;
                  __int16 v44 = 1024;
                  int v45 = 4988;
                  __int16 v46 = 1024;
                  int v47 = v22 / 2;
                  __int16 v48 = 1024;
                  int v49 = v34;
                  _os_log_error_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: Bad ACK, #dropped SN doesn't match(%d != %u).", buf, 0x2Eu);
                }
              }
              *int v21 = v23;
              LOWORD(v20) = v23;
            }
            if ((unsigned __int16)v20 >= 0x1F5u)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v26 = VRTraceErrorLogLevelToCSTR();
                long long v27 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v39 = v26;
                  __int16 v40 = 2080;
                  long long v41 = "AFRCProcessBasebandNotification";
                  __int16 v42 = 1024;
                  int v43 = 4993;
                  __int16 v44 = 1024;
                  int v45 = 4993;
                  __int16 v46 = 1024;
                  int v47 = 57005;
                  __int16 v48 = 1024;
                  int v49 = 500;
                  _os_log_error_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: Bad ACK, #dropped SN exceeds limit(%d > %d).", buf, 0x2Eu);
                }
              }
              *int v21 = 500;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v28 = VRTraceErrorLogLevelToCSTR();
              long long v29 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v30 = (unsigned __int16)*v21;
                int v31 = *v18;
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v39 = v28;
                __int16 v40 = 2080;
                long long v41 = "AFRCProcessBasebandNotification";
                __int16 v42 = 1024;
                int v43 = 4997;
                __int16 v44 = 1024;
                int v45 = v30;
                __int16 v46 = 1024;
                int v47 = v31;
                _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Baseband dropped %u packet(s) for PT %u.", buf, 0x28u);
              }
            }
            unint64_t v32 = (unsigned __int16)*v21;
            if (*v21)
            {
              unint64_t v33 = 0;
              do
              {
                *(_WORD *)&v13[2 * v33] = bswap32(*(unsigned __int16 *)(v8 + v15)) >> 16;
                v15 += 2;
                ++v33;
              }
              while (v33 < v32);
            }
            ++v12;
            v13 += 1004;
            int v14 = v15;
          }
          while (v12 != 6);
          int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
          if (ErrorLogLevelForModule < 3)
          {
            LOWORD(v12) = 6;
LABEL_34:
            uint64_t v9 = v37;
            goto LABEL_35;
          }
          VRTraceErrorLogLevelToCSTR();
          uint64_t v9 = v37;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            AFRCProcessBasebandNotification_cold_1();
          }
          LOWORD(v12) = 6;
LABEL_35:
          WORD2(__dst[2]) = v12;
        }
        return AFRCUpdateBBNote(v9, (uint64_t)__dst);
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t AFRCUpdateBBNote(uint64_t a1, uint64_t a2)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  uint64_t v143 = 0;
  double v3 = micro();
  uint64_t v4 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v4) {
    return 2149646338;
  }
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = v4 + 40;
  pthread_mutex_lock(v4 + 40);
  if (!*(_DWORD *)(v5 + 2928)) {
    goto LABEL_168;
  }
  uint64_t v142 = v5;
  if (*(_DWORD *)a2 == 2)
  {
    int v7 = *(_DWORD *)(v5 + 2988) - 1;
    *(_DWORD *)(v5 + 298_Block_object_dispose(&STACK[0x250], 8) = v7;
    if (v7)
    {
      *(_DWORD *)(v5 + 9544) = 0;
      *(double *)(v5 + 9552) = v3;
      *(_DWORD *)(v5 + 9572) = 0;
    }
    *(double *)(v5 + 2992) = v3;
    if (*(__int16 *)(a2 + 18) >= 1 && *(_WORD *)(a2 + 20))
    {
      unint64_t v8 = 0;
      unsigned int v9 = *(unsigned __int16 *)(a2 + 16);
      int v10 = *(unsigned __int8 *)(v5 + 3004);
      unsigned int v11 = (unsigned __int16 *)(a2 + 24);
      do
      {
        int v12 = *v11;
        if (*((unsigned __int8 *)v11 - 2) == v10)
        {
          *(_DWORD *)(v5 + 9616) += v12;
          if (v9 > *(unsigned __int16 *)(v5 + 3006))
          {
            if (v12) {
              *(_DWORD *)(v5 + 3000) = 1;
            }
            break;
          }
        }
        else
        {
          *(_DWORD *)(v5 + 9620) += v12;
        }
        v11 += 502;
        ++v8;
      }
      while (v8 < *(unsigned __int16 *)(a2 + 20));
    }
    if (!*(void *)(v5 + 2848)) {
      goto LABEL_61;
    }
    __int16 v139 = v6;
    *(void *)&long long v48 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v174[6] = v48;
    v174[7] = v48;
    v174[4] = v48;
    v174[5] = v48;
    v174[2] = v48;
    v174[3] = v48;
    v174[0] = v48;
    v174[1] = v48;
    VRLogfileGetTimestamp((char *)v174, 0x80u);
    if (*(__int16 *)(a2 + 18) <= 0)
    {
      *(_WORD *)(a2 + 20) = 1;
      *(unsigned char *)(a2 + 22) = 0;
      *(_WORD *)(a2 + 24) = 0;
    }
    else if (!*(_WORD *)(a2 + 20))
    {
LABEL_58:
      if (*(_DWORD *)(v5 + 3000)) {
        VRLogfilePrint(*(void *)(v5 + 2848), "%s Request video refresh for PT (%u).\n", v49, v50, v51, v52, v53, v54, (char)v174);
      }
      uint64_t v6 = v139;
LABEL_61:
      pthread_mutex_unlock(v6);
      if (*(_DWORD *)(v5 + 2680) && *(_WORD *)(a2 + 20))
      {
        unint64_t v63 = 0;
        int v64 = *(unsigned __int16 *)(a2 + 16);
        uint64_t v65 = a2 + 26;
        do
        {
          MediaQueue_BBFlushAcked(*(void *)(v5 + 2808), *(unsigned __int16 *)(v65 - 2), v65, v64);
          ++v63;
          v65 += 1004;
        }
        while (v63 < *(unsigned __int16 *)(a2 + 20));
      }
      goto LABEL_77;
    }
    unint64_t v55 = 0;
    uint64_t v140 = a2 + 22;
    uint64_t v141 = a2;
    long long v56 = (unsigned __int16 *)(a2 + 26);
    do
    {
      if (*(_WORD *)(a2 + 18))
      {
        if (*(unsigned __int16 *)(a2 + 18) == 0xFFFF)
        {
          VRLogfilePrint(*(void *)(v5 + 2848), "%s TID[%04X] Drop ACK reported a failure%s\n", v49, v50, v51, v52, v53, v54, (char)v174);
        }
        else
        {
          unsigned int v57 = *(unsigned __int16 *)(v140 + 1004 * v55 + 2);
          long long v172 = 0u;
          long long v173 = 0u;
          long long v170 = 0u;
          long long v171 = 0u;
          long long v168 = 0u;
          long long v169 = 0u;
          long long v166 = 0u;
          long long v167 = 0u;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v160 = 0u;
          long long v161 = 0u;
          long long v158 = 0u;
          long long v159 = 0u;
          long long v156 = 0u;
          long long v157 = 0u;
          long long v154 = 0u;
          long long v155 = 0u;
          long long v152 = 0u;
          long long v153 = 0u;
          long long v150 = 0u;
          long long v151 = 0u;
          long long v148 = 0u;
          long long v149 = 0u;
          long long v146 = 0u;
          long long v147 = 0u;
          *(_OWORD *)&buf[32] = 0u;
          long long v145 = 0u;
          if (v57 >= 0x66) {
            unsigned int v58 = 102;
          }
          else {
            unsigned int v58 = v57;
          }
          memset(buf, 0, 32);
          if (v58)
          {
            uint64_t v59 = 0;
            uint64_t v60 = 5 * v58;
            int v61 = v56;
            do
            {
              int v62 = *v61++;
              sprintf((char *)&buf[v59], "%04X ", v62);
              v59 += 5;
            }
            while (v60 != v59);
            if (v59) {
              buf[v59 - 1] = 0;
            }
          }
          a2 = v141;
          uint64_t v5 = v142;
          VRLogfilePrint(*(void *)(v142 + 2848), "%s TID[%04X] Drop ACK for PT %u: %2u packets dropped [%s]%s\n", v49, v50, v51, v52, v53, v54, (char)v174);
        }
      }
      else
      {
        VRLogfilePrint(*(void *)(v5 + 2848), "%s TID[%04X] Drop ACK, no packet dropped%s\n", v49, v50, v51, v52, v53, v54, (char)v174);
      }
      ++v55;
      v56 += 502;
    }
    while (v55 < *(unsigned __int16 *)(a2 + 20));
    goto LABEL_58;
  }
  if (!*(_DWORD *)(v5 + 9568))
  {
    int v23 = 0;
    goto LABEL_24;
  }
  *(void *)CMTime buf = -1;
  LODWORD(v174[0]) = -1431655766;
  MediaQueue_GetTimeRateChanged(*(void *)(v5 + 2808), buf, v174);
  if (*(_DWORD *)(v5 + 2476))
  {
    unsigned int v20 = v174[0];
    unsigned int v21 = *(_DWORD *)(v5 + 9568);
    goto LABEL_19;
  }
  unsigned int v20 = v174[0];
  unsigned int v21 = *(_DWORD *)(v5 + 9568);
  if (!*(_DWORD *)(v5 + 2472) && LODWORD(v174[0]) < v21)
  {
LABEL_168:
    if (CalculateBasebandRate(v5, a2, (unsigned int *)&v143 + 1, (unsigned int *)&v143, 0)) {
      goto LABEL_69;
    }
    goto LABEL_32;
  }
LABEL_19:
  if (v20 >= v21)
  {
    char v22 = buf[0];
  }
  else
  {
    LODWORD(v174[0]) = v21;
    *(double *)CMTime buf = v3;
    char v22 = LOBYTE(v3);
  }
  VRLogfilePrintWithTimestamp(*(void *)(v5 + 2848), "Rate change done, [%.6f %u>=%d %u%s], taking new samples.\n", v14, v15, v16, v17, v18, v19, v22);
  uint64_t v24 = *(void *)buf;
  *(void *)(v5 + 9560) = *(void *)buf;
  *(void *)(v5 + 9552) = v24;
  *(void *)(v5 + 956_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(_DWORD *)(v5 + 9544) = 0;
  int v23 = 1;
LABEL_24:
  if (CalculateBasebandRate(v5, a2, (unsigned int *)&v143 + 1, (unsigned int *)&v143, v23))
  {
    int v32 = (*(_DWORD *)(v5 + 2980) - *(_DWORD *)(v5 + 2984)) & ~((*(_DWORD *)(v5 + 2980) - *(_DWORD *)(v5 + 2984)) >> 31);
    if (*(_DWORD *)(v5 + 2988))
    {
      VRLogfilePrintWithTimestamp(*(void *)(v5 + 2848), "Still trying to flush baseband with flush counter: %d. Stop ramp-up and possibly decrease audio fraction based on BBAvgTxRate: %d\n", v26, v27, v28, v29, v30, v31, *(_DWORD *)(v5 + 2988));
      if (v3 - *(double *)(v5 + 2992) <= 3.0 || *(_DWORD *)(v5 + 2980)) {
        goto LABEL_68;
      }
      uint64_t v39 = (double *)(v5 + 2992);
      VRLogfilePrintWithTimestamp(*(void *)(v5 + 2848), "Flush counter: %d stuck for more than %d seconds. And baseband shows TxRate:%d, TxDelay:%d. Reset the flush counter.\n", v33, v34, v35, v36, v37, v38, *(_DWORD *)(v5 + 2988));
      *(_DWORD *)(v5 + 298_Block_object_dispose(&STACK[0x250], 8) = 0;
LABEL_67:
      double *v39 = v3;
LABEL_68:
      RampDownAudio(v5, v3);
      *(_DWORD *)(v5 + 9544) = 0;
      goto LABEL_69;
    }
    if (!*(_DWORD *)(v5 + 2968))
    {
      uint64_t v39 = (double *)(v5 + 2992);
      goto LABEL_67;
    }
    uint64_t v46 = *(int *)(v5 + 9544);
    if ((int)v46 > 14)
    {
      memmove((void *)(v5 + 9304), (const void *)(v5 + 9312), 0x70uLL);
      long long v76 = *(_OWORD *)(v5 + 9428);
      *(_OWORD *)(v5 + 9440) = *(_OWORD *)(v5 + 9444);
      *(_OWORD *)(v5 + 9424) = v76;
      *(_OWORD *)(v5 + 9456) = *(_OWORD *)(v5 + 9460);
      *(void *)(v5 + 9472) = *(void *)(v5 + 9476);
      long long v77 = *(_OWORD *)(v5 + 9504);
      *(_OWORD *)(v5 + 9484) = *(_OWORD *)(v5 + 9488);
      *(_OWORD *)(v5 + 9500) = v77;
      *(_OWORD *)(v5 + 9516) = *(_OWORD *)(v5 + 9520);
      *(void *)(v5 + 9532) = *(void *)(v5 + 9536);
      *(void *)(v5 + 9416) = *(void *)(a2 + 8);
      *(_DWORD *)(v5 + 9480) = v32;
      *(_DWORD *)(v5 + 9540) = *(_DWORD *)(v5 + 2980);
      int v47 = *(_DWORD *)(v5 + 9544);
    }
    else
    {
      *(void *)(v5 + 8 * v46 + 9304) = *(void *)(a2 + 8);
      *(_DWORD *)(v5 + 4 * v46 + 9424) = v32;
      *(_DWORD *)(v5 + 4 * *(int *)(v5 + 9544) + 9484) = *(_DWORD *)(v5 + 2980);
      int v47 = *(_DWORD *)(v5 + 9544) + 1;
      *(_DWORD *)(v5 + 9544) = v47;
    }
    uint64_t v78 = (v47 - 4);
    if (v47 < 4) {
      goto LABEL_69;
    }
    if (v47 == 4)
    {
LABEL_84:
      LODWORD(v7_Block_object_dispose(&STACK[0x250], 8) = 0;
    }
    else
    {
      while (*(double *)(v5 + 9304 + 8 * (v47 - 1)) - *(double *)(v5 + 9304 + 8 * v78) < 0.5)
      {
        BOOL v109 = v78-- <= 1;
        if (v109) {
          goto LABEL_84;
        }
      }
    }
    int v79 = v47 - v78;
    if (v79 < 1)
    {
      double v96 = 0.0;
      double v97 = 0.0;
      double v98 = 0.0;
    }
    else
    {
      int v80 = v78 + (v79 >> 1);
      unsigned int v81 = v79 + 1;
      int v82 = (double *)(v5 + 8 * v80 + 9304);
      uint64_t v83 = (_DWORD *)(v5 + 4 * v80 + 9484);
      uint64_t v84 = (_DWORD *)(v5 + 4 * (int)v78 + 9484);
      uint64_t v85 = (double *)(v5 + 8 * (int)v78 + 9304);
      double v86 = 0.0;
      double v87 = 0.0;
      double v88 = 0.0;
      double v89 = 0.0;
      double v90 = 0.0;
      double v91 = 0.0;
      uint64_t v92 = v81 >> 1;
      do
      {
        double v91 = v91 + (double)(int)*(v84 - 15);
        double v90 = v90 + (double)(int)*(v83 - 15);
        double v93 = *v85++;
        double v89 = v89 + v93;
        double v94 = *v82++;
        double v88 = v88 + v94;
        LODWORD(v94) = *v84++;
        *(double *)&unint64_t v95 = (double)*(unint64_t *)&v94;
        double v87 = v87 + (double)*(unint64_t *)&v94;
        LODWORD(v94) = *v83++;
        LODWORD(v95) = LODWORD(v94);
        double v86 = v86 + (double)v95;
        --v92;
      }
      while (v92);
      double v96 = v90 - v91;
      double v97 = v88 - v89;
      double v98 = v86 - v87;
    }
    double v99 = v96 * 0.001 / v97 * 0.5;
    double v100 = v98 * 0.001 / v97 * 0.5;
    if ((*(unsigned char *)(v5 + 1396) & 4) != 0)
    {
      int v103 = *(_DWORD *)(v5 + 28);
      LODWORD(v104) = *(_DWORD *)(v5 + 36);
      if (v103 <= (int)v104)
      {
        uint64_t v104 = v103;
        uint64_t v101 = *(int *)(v5 + 40);
        int v105 = *(_DWORD *)(v5 + 9696);
        double v106 = 0.12;
        while (g_adwTxRateTiers[v104] > *(_DWORD *)(v5 + 2968))
        {
          --v104;
          if (v105 || v104 <= v101)
          {
LABEL_106:
            if ((int)v104 <= (int)v101) {
              LODWORD(v104) = v101;
            }
            break;
          }
        }
      }
      else
      {
        int v105 = *(_DWORD *)(v5 + 9696);
        double v106 = 0.12;
      }
    }
    else
    {
      uint64_t v101 = *(int *)(v5 + 40);
      if (*(_DWORD *)(v5 + 2968) >= *(_DWORD *)(v5 + 44)) {
        unsigned int v102 = *(_DWORD *)(v5 + 44);
      }
      else {
        unsigned int v102 = *(_DWORD *)(v5 + 2968);
      }
      int v103 = *(_DWORD *)(v5 + 28);
      uint64_t v104 = v103;
      int v105 = *(_DWORD *)(v5 + 9696);
      double v106 = 0.2;
      while (g_adwTxRateTiers[v104] > v102)
      {
        --v104;
        if (v105 || v104 <= v101) {
          goto LABEL_106;
        }
      }
    }
    BOOL v107 = v99 > v106;
    if (v100 > 0.4) {
      BOOL v107 = 1;
    }
    if (v105)
    {
      if (!v107 || *(_DWORD *)(v5 + 2980) <= 0x320u) {
        goto LABEL_144;
      }
      if (v103 == v104) {
        goto LABEL_129;
      }
    }
    else
    {
      if (!v107 && !*(_DWORD *)(v5 + 2472) && (*(unsigned char *)(v5 + 2960) & 1) == 0) {
        goto LABEL_144;
      }
      if (*(_DWORD *)(v5 + 2980) < 0x321u) {
        goto LABEL_144;
      }
      double v108 = *(double *)(v5 + 2504);
      BOOL v109 = v108 == 0.0 || v3 - v108 <= 0.5;
      if (v109) {
        goto LABEL_144;
      }
      if (v103 == v104)
      {
        RampDownAudio(v5, v3);
        *(double *)(v5 + 2520) = v3;
LABEL_129:
        int v118 = *(_DWORD *)(v5 + 1396);
        if (v118)
        {
          *(_DWORD *)(v5 + 1396) = v118 & 0xFFFFFFFE;
          calculateInitialRampUpDeltas(v5);
          if (*(_DWORD *)(v5 + 2816))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v125 = VRTraceErrorLogLevelToCSTR();
              uint64_t v126 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315906;
                *(void *)&uint8_t buf[4] = v125;
                *(_WORD *)&uint8_t buf[12] = 2080;
                *(void *)&buf[14] = "AFRCUpdateBBNote";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = 5308;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = "Initial Rampup done!";
                _os_log_impl(&dword_1E1EA4000, v126, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: %s", buf, 0x26u);
              }
            }
          }
          uint64_t v5 = v142;
          VRLogfilePrint(*(void *)(v142 + 2832), "%s", v119, v120, v121, v122, v123, v124, (char)"Initial Rampup done!\n");
          VRLogfilePrintWithTimestamp(*(void *)(v142 + 2848), "%s", v127, v128, v129, v130, v131, v132, (char)"Initial Rampup done!\n");
          int v118 = *(_DWORD *)(v142 + 1396);
        }
        if ((v118 & 4) != 0) {
          *(_DWORD *)(v5 + 1396) = v118 & 0xFFFFFFFB;
        }
        if (*(_DWORD *)(v5 + 1400) == 3)
        {
          unsigned int v133 = *(_DWORD *)(v5 + 2552) + 1;
          *(_DWORD *)(v5 + 2552) = v133;
          double v134 = *(double *)(v5 + 2544);
          if (v134 == 0.0)
          {
            *(double *)(v5 + 2544) = v3;
          }
          else if (v3 - v134 >= 2.0)
          {
            *(_DWORD *)(v5 + 2552) = 0;
            *(void *)(v5 + 2544) = 0;
          }
          else if (v133 >= 4)
          {
            *(_DWORD *)(v5 + 240_Block_object_dispose(&STACK[0x250], 8) = 1;
          }
        }
LABEL_144:
        if (v99 >= 0.2) {
          *(void *)(v5 + 9552) = *(void *)(a2 + 8);
        }
        *(_DWORD *)(v5 + 9572) = 0;
        if (*(double *)(v5 + 9576) >= 1.0)
        {
          if (v99 < 0.1 && *(_DWORD *)(v5 + 2980) <= 0x1F3u)
          {
            unsigned int v137 = *(_DWORD *)(v5 + 20);
            if (*(_DWORD *)(v5 + 44) < v137)
            {
              double v138 = *(double *)(a2 + 8);
              if (v138 - *(double *)(v5 + 9552) > 0.5
                && v138 - *(double *)(v5 + 9560) > 0.5
                && v138 - *(double *)(v5 + 9584) > 0.5)
              {
                if (!*(_DWORD *)(v5 + 9696))
                {
                  if (*(unsigned char *)(v5 + 2960)) {
                    int v136 = 1;
                  }
                  else {
                    int v136 = 2;
                  }
                  uint64_t v5 = v142;
                  goto LABEL_152;
                }
                if (v137 < g_adwTxRateTiers[*(int *)(v5 + 28) + 1]) {
                  goto LABEL_69;
                }
LABEL_151:
                int v136 = 1;
LABEL_152:
                *(_DWORD *)(v5 + 9572) = v136;
              }
            }
          }
        }
        else if (v99 < 0.1 && *(_DWORD *)(v5 + 2980) <= 0x1F3u)
        {
          double v135 = *(double *)(a2 + 8);
          if (v135 - *(double *)(v5 + 9584) > 2.0 && v135 - *(double *)(v5 + 9552) > 2.0) {
            goto LABEL_151;
          }
        }
LABEL_69:
        memcpy((void *)(v5 + 3008), (const void *)a2, 0x17A0uLL);
        UpdateAudioTxInfo(v5, v66, v67, v68, v69, v70, v71, v72);
        uint64_t v73 = *(unsigned int *)(v5 + 2480);
        if (*(_DWORD *)(v5 + 2476)) {
          unsigned int v74 = 65;
        }
        else {
          unsigned int v74 = 86;
        }
        if (v73) {
          uint64_t v75 = v74;
        }
        else {
          uint64_t v75 = 65;
        }
        VRLogfilePrintWithTimestamp(*(void *)(v5 + 2848), "%2u%2u%2u%2u%2u %6u\t%6u\t%u\t%u %4u\t%4u\t%4u\t%4u\t%4u\t%4d\t%.4f\t%.4f\t%4u %.2f %c(%1d,%1d) %1d %4d\n", v73, v75, *(char *)(a2 + 23), *(unsigned int *)(a2 + 24), *(unsigned int *)(a2 + 28), *(unsigned int *)(a2 + 32), *(_WORD *)(a2 + 4));
        goto LABEL_76;
      }
    }
    if ((v104 & 0x80000000) == 0 || v3 - *(double *)(v5 + 2520) > 3.0)
    {
      *(_DWORD *)(v5 + 1400) = 3;
      int v110 = *(_DWORD *)(v5 + 1404) + 1;
      *(_DWORD *)(v5 + 1404) = v110;
      *(_DWORD *)(v5 + 36) = v103;
      *(_DWORD *)(v5 + 2_Block_object_dispose(&STACK[0x250], 8) = v104;
      int v111 = g_adwTxRateTiers[(int)v104];
      *(_DWORD *)(v5 + 44) = v111;
      *(_DWORD *)(v5 + 956_Block_object_dispose(&STACK[0x250], 8) = v110;
      *(_DWORD *)(v5 + 2484) = 1;
      *(double *)(v5 + 2520) = v3;
      VRLogfilePrint(*(void *)(v5 + 2832), "Congestion!!! TxRate v %u, BaseBand.\n", v26, v27, v28, v29, v30, v31, v111);
      VRLogfilePrintWithTimestamp(*(void *)(v5 + 2848), "Rate change [%u] (Ramp Down to %u, Baseband).\n", v112, v113, v114, v115, v116, v117, *(_DWORD *)(v5 + 9568));
    }
    UpdateFECLevel(v5);
    goto LABEL_129;
  }
LABEL_32:
  UpdateAudioTxInfo(v5, v25, v26, v27, v28, v29, v30, v31);
  VRLogfilePrintWithTimestamp(*(void *)(v5 + 2848), "%2u%2u%2u%2u%2u %6u\t%6u\t%u\t%u [Bogus notification, discard]\n", v40, v41, v42, v43, v44, v45, *(_WORD *)(a2 + 4));
LABEL_76:
  pthread_mutex_unlock(v6);
LABEL_77:
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetReceiveQueueSize(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (pthread_mutex_t *)(v3 + 2864);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 2864));
  *(_DWORD *)(v4 + 164) = a2;
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetVideoPaused(uint64_t a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 40;
  pthread_mutex_lock(v3 + 40);
  int v12 = *(_DWORD *)&v4[38].__opaque[32];
  if (!a2 && v12 && (v4[46].__opaque[8] & 1) == 0)
  {
    *(_DWORD *)&v4[21].__opaque[48] = 5;
    int v13 = *(_DWORD *)&v4[21].__opaque[52] + 1;
    *(_DWORD *)&v4[21].__opaque[52] = v13;
    *(_DWORD *)&v4[149].__opaque[24] = v13;
  }
  if (v12 != a2)
  {
    if (a2) {
      *(_DWORD *)&v4[21].__opaque[36] = 0;
    }
    if (LODWORD(v4[44].__sig))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v14 = VRTraceErrorLogLevelToCSTR();
        uint64_t v15 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          if (a2) {
            uint64_t v16 = "Paused";
          }
          else {
            uint64_t v16 = "Unpaused";
          }
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v26 = v14;
          __int16 v27 = 2080;
          uint64_t v28 = "AFRCSetVideoPaused";
          __int16 v29 = 1024;
          int v30 = 5455;
          __int16 v31 = 2080;
          int v32 = v16;
          _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: Video %s...", buf, 0x26u);
        }
      }
    }
    if (a2) {
      uint64_t v17 = "Paused";
    }
    else {
      uint64_t v17 = "Unpaused";
    }
    VRLogfilePrint(*(void *)&v4[44].__opaque[8], "Video %s...\n", v6, v7, v8, v9, v10, v11, (char)v17);
    VRLogfilePrintWithTimestamp(*(void *)&v4[44].__opaque[24], "Rate change [%u] (%s), new rate %ukbps...\n", v18, v19, v20, v21, v22, v23, *(_DWORD *)&v4[149].__opaque[24]);
  }
  *(_DWORD *)&v4[38].__opaque[32] = a2;
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetAudioPaused(uint64_t a1, int a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v5) {
    return 2149646338;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 40;
  pthread_mutex_lock(v5 + 40);
  if (a3)
  {
    LODWORD(v6[41].__sig) = a2;
  }
  else
  {
    if (!a2 && HIDWORD(v6[41].__sig)) {
      *(double *)&v6[2].__opaque[16] = micro();
    }
    HIDWORD(v6[41].__sig) = a2;
  }
  pthread_mutex_unlock(v7);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136316162;
      uint64_t v12 = v9;
      __int16 v13 = 2080;
      uint64_t v14 = "AFRCSetAudioPaused";
      __int16 v15 = 1024;
      int v16 = 5488;
      __int16 v17 = 1024;
      int v18 = a3;
      __int16 v19 = 1024;
      int v20 = a2;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRCSetAudioPaused: local? %d, audio paused? %d", (uint8_t *)&v11, 0x28u);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetAudioSilent(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  *(unsigned char *)(v3 + 9700) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetPLCalc(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  *(unsigned char *)(v3 + 244) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCUpdateCellTech(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = CheckInHandleDebug();
  if (!v13) {
    return 2149646338;
  }
  uint64_t v14 = v13;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v22 = VRTraceErrorLogLevelToCSTR();
    __int16 v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136317186;
      uint64_t v24 = v22;
      __int16 v25 = 2080;
      uint64_t v26 = "AFRCUpdateCellTech";
      __int16 v27 = 1024;
      int v28 = 5532;
      __int16 v29 = 2080;
      uint64_t v30 = CelltechToStr();
      __int16 v31 = 2080;
      uint64_t v32 = CelltechToStr();
      __int16 v33 = 2080;
      uint64_t v34 = CelltechToStr();
      __int16 v35 = 2080;
      uint64_t v36 = CelltechToStr();
      __int16 v37 = 1024;
      int v38 = a6;
      __int16 v39 = 1024;
      int v40 = a7;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRCUpdateCellTech: iLocalCellTech: %s -> %s  iRemoteCellTech: %s -> %s  fEnableRRx: %d  didHandover: %d", buf, 0x50u);
    }
  }
  *(_DWORD *)(v14 + 2936) = a3;
  *(_DWORD *)(v14 + 2940) = a5;
  pthread_mutex_lock((pthread_mutex_t *)(v14 + 2560));
  *(void *)(v14 + 268_Block_object_dispose(&STACK[0x250], 8) = 0;
  if (*(_DWORD *)(v14 + 2928) != a2)
  {
    *(_DWORD *)(v14 + 2960) = 0;
    *(_DWORD *)(v14 + 2476) = 0;
    *(void *)(v14 + 9576) = 0x3FF0000000000000;
    *(_DWORD *)(v14 + 9056) = 0;
    if (!*(_DWORD *)(v14 + 9696)) {
      *(_DWORD *)(v14 + 2480) = 1;
    }
  }
  *(_DWORD *)(v14 + 292_Block_object_dispose(&STACK[0x250], 8) = a2;
  *(_DWORD *)(v14 + 2932) = a4;
  if (a2)
  {
    int v16 = *(_DWORD *)(v14 + 2936);
    BOOL v18 = a3 == 4 || v16 == 2;
    *(_DWORD *)(v14 + 294_Block_object_dispose(&STACK[0x250], 8) = v18;
    *(_DWORD *)(v14 + 2952) = v16 == 7;
  }
  if (*(_DWORD *)(v14 + 9696))
  {
    *(void *)(v14 + 2464) = 0x4000000000000000;
    *(_DWORD *)(v14 + 2944) = a6;
    double v19 = 1.0;
  }
  else
  {
    double v21 = 2.0;
    if (!*(_DWORD *)(v14 + 2948)) {
      double v21 = 1.0;
    }
    *(double *)(v14 + 2464) = v21;
    *(_DWORD *)(v14 + 2944) = a6;
    double v19 = 0.5;
    if (a6) {
      double v19 = 1.0;
    }
  }
  *(double *)(v14 + 2456) = v19;
  pthread_mutex_unlock((pthread_mutex_t *)(v14 + 2560));
  if (!*(_DWORD *)(v14 + 9696))
  {
    BWEUpdateSenderRecvrEnabledStates(v14);
    BWEUpdateFilterType(v14);
  }
  CheckOutHandleDebug();
  return 0;
}

void BWEUpdateSenderRecvrEnabledStates(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 2928)) {
    char IsLTEOrNewer = NetworkUtils_IsLTEOrNewer(*(_DWORD *)(a1 + 2936));
  }
  else {
    char IsLTEOrNewer = 1;
  }
  if (*(unsigned char *)(a1 + 722)) {
    char v3 = IsLTEOrNewer;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 720) = v3;
  if (*(_DWORD *)(a1 + 2932))
  {
    char v4 = NetworkUtils_IsLTEOrNewer(*(_DWORD *)(a1 + 2940));
    int v5 = *(unsigned __int8 *)(a1 + 723);
    *(unsigned char *)(a1 + 721) = v5;
    if (v5 && (v4 & 1) == 0) {
      BWEstResetRecvrBWState(a1, 0);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 721) = *(unsigned char *)(a1 + 723);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(a1 + 720);
      int v9 = *(unsigned __int8 *)(a1 + 721);
      int v10 = 136316674;
      uint64_t v11 = v6;
      __int16 v12 = 2080;
      uint64_t v13 = "BWEUpdateSenderRecvrEnabledStates";
      __int16 v14 = 1024;
      int v15 = 6316;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 2080;
      uint64_t v21 = CelltechToStr();
      __int16 v22 = 2080;
      uint64_t v23 = CelltechToStr();
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ////^^^^ BWEUpdateSenderRecvrEnabledStates: Sender/Recvr %d/%d iLocalCellTech: %s  iRemoteCellTech: %s", (uint8_t *)&v10, 0x3Cu);
    }
  }
}

void BWEUpdateFilterType(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 2928) && !NetworkUtils_IsLTEOrNewer(*(_DWORD *)(a1 + 2936))
    || *(_DWORD *)(a1 + 2932) && !NetworkUtils_IsLTEOrNewer(*(_DWORD *)(a1 + 2940)))
  {
    int v2 = 2;
  }
  else
  {
    if ((!*(_DWORD *)(a1 + 2928) || (NetworkUtils_IsLTEOrNewer(*(_DWORD *)(a1 + 2936)) & 1) == 0)
      && *(_DWORD *)(a1 + 2932))
    {
      NetworkUtils_IsLTEOrNewer(*(_DWORD *)(a1 + 2940));
    }
    int v2 = 1;
  }
  *(_DWORD *)(a1 + 72_Block_object_dispose(&STACK[0x250], 8) = v2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    char v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = *(_DWORD *)(a1 + 728);
      if (v5 > 3) {
        uint64_t v6 = "UNEXPECTED";
      }
      else {
        uint64_t v6 = off_1E6DB53D8[v5];
      }
      int v7 = *(_DWORD *)(a1 + 2928);
      uint64_t v8 = CelltechToStr();
      int v9 = *(_DWORD *)(a1 + 2932);
      uint64_t v10 = CelltechToStr();
      int v11 = *(unsigned __int8 *)(a1 + 732);
      int v12 = 136317442;
      uint64_t v13 = v3;
      __int16 v14 = 2080;
      int v15 = "BWEUpdateFilterType";
      __int16 v16 = 1024;
      int v17 = 6281;
      __int16 v18 = 1024;
      unsigned int v19 = v5;
      __int16 v20 = 2080;
      uint64_t v21 = v6;
      __int16 v22 = 1024;
      int v23 = v7;
      __int16 v24 = 2080;
      uint64_t v25 = v8;
      __int16 v26 = 1024;
      int v27 = v9;
      __int16 v28 = 2080;
      uint64_t v29 = v10;
      __int16 v30 = 1024;
      int v31 = v11;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d BWEst FilterType: %d/%s <-- ImOnCellular: %d/%s  RemoteOnCellular: %d/%s  PeerIsOnIOS: %d ", (uint8_t *)&v12, 0x52u);
    }
  }
}

uint64_t AFRCUpdateRateTier(uint64_t a1, int a2)
{
  uint64_t v3 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  char v4 = v3;
  unsigned int v5 = v3 + 40;
  pthread_mutex_lock(v3 + 40);
  HIDWORD(v4[153].__sig) = a2;
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCProcessWCMSetCallConfig(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v5) {
    return 2149646338;
  }
  uint64_t v6 = v5;
  int v7 = v5 + 40;
  pthread_mutex_lock(v5 + 40);
  if (!a2) {
    a2 = *(_DWORD *)&v6->__opaque[16];
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    int v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)&v6->__opaque[12];
      int v11 = *(_DWORD *)&v6->__opaque[16];
      int v19 = 136316674;
      uint64_t v20 = v8;
      __int16 v21 = 2080;
      __int16 v22 = "AFRCProcessWCMSetCallConfig";
      __int16 v23 = 1024;
      int v24 = 5637;
      __int16 v25 = 1024;
      int v26 = v10;
      __int16 v27 = 1024;
      unsigned int v28 = a2;
      __int16 v29 = 1024;
      int v30 = a3;
      __int16 v31 = 1024;
      int v32 = v11;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ProcessWCMSetCallConfig: (%u->%u), interference: (%u), clientTxCap: %u", (uint8_t *)&v19, 0x34u);
    }
  }
  *(_DWORD *)&v6->__opaque[12] = a2;
  int v12 = *(_DWORD *)&v6->__opaque[20];
  unsigned int v13 = g_adwTxRateTiers[v12];
  if (v13 <= a2)
  {
    int v15 = *(_DWORD *)&v6->__opaque[20];
  }
  else
  {
    uint64_t v14 = *(int *)&v6->__opaque[32];
    if (v12 >= (int)v14) {
      int v15 = *(_DWORD *)&v6->__opaque[32];
    }
    else {
      int v15 = *(_DWORD *)&v6->__opaque[20];
    }
    if (v12 > (int)v14)
    {
      uint64_t v16 = v12;
      int v17 = v12 - 1;
      while (1)
      {
        *(_DWORD *)&v6->__opaque[20] = v17;
        unsigned int v13 = g_adwTxRateTiers[v16 - 1];
        if (v13 <= a2) {
          break;
        }
        --v16;
        --v17;
        if (v16 <= v14) {
          goto LABEL_19;
        }
      }
      int v15 = v17;
    }
  }
LABEL_19:
  *(_DWORD *)&v6->__opaque[28] = v15;
  *(_DWORD *)&v6->__opaque[36] = v13;
  pthread_mutex_unlock(v7);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCProcessWCMGetCallConfig(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149646338;
  }
  uint64_t v6 = v5;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    uint64_t v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(v6 + 20);
      int v10 = *(_DWORD *)(v6 + 44);
      int v12 = 136316162;
      uint64_t v13 = v7;
      __int16 v14 = 2080;
      int v15 = "AFRCProcessWCMGetCallConfig";
      __int16 v16 = 1024;
      int v17 = 5660;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 1024;
      int v21 = v10;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ProcessWCMGetCallConfig: (TxCap %u, TxRate %u).", (uint8_t *)&v12, 0x28u);
    }
  }
  if (a2) {
    *a2 = *(_DWORD *)(v6 + 20);
  }
  if (a3) {
    *a3 = *(_DWORD *)(v6 + 44);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCMarkNetworkChange()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149646338;
  }
  VRLogfilePrintWithTimestamp(*(void *)(v0 + 2832), "%s", v1, v2, v3, v4, v5, v6, (char)"network state changed.\n");
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCAddBBDump()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149646338;
  }
  uint64_t v6 = v0;
  AFRCLog_OpenBBLog((FILE **)v0, *(void *)(v0 + 2832) != 0, 1, v1, v2, v3, v4, v5);
  if (*(void *)(v6 + 2848) && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    uint64_t v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315650;
      uint64_t v11 = v7;
      __int16 v12 = 2080;
      uint64_t v13 = "AFRCAddBBDump";
      __int16 v14 = 1024;
      int v15 = 5699;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ### Add BB dump for AFRC", (uint8_t *)&v10, 0x1Cu);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

FILE **AFRCLog_OpenBBLog(FILE **result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v8 = a3;
    int v9 = result;
    int v10 = (FILE **)result[356];
    if (!v10)
    {
      memset(v13, 170, 12);
      __sprintf_chk(v13, 0, 0xCuLL, "%010u", *((_DWORD *)v9 + 706));
      int v10 = VRLogfileAlloc(0, (uint64_t)v13, (uint64_t)"AFRC", (uint64_t)".bbdump", "com.apple.VideoConference.AFRClogBB", 32);
      v9[356] = (FILE *)v10;
    }
    if (v8) {
      uint64_t v11 = "STime\t\tATime\t\tV-R-A-F-T\tQD\tQD2\tXmitB\tLTxTS\tIBR\tABRS\tABRL\tBDS\tBDL\tBDCD\tNBDCD\tND\tHT\tTR\tAF\n";
    }
    else {
      uint64_t v11 = "STime\t\tV-R-A-F-T\tQD\tQD2\tXmitB\tLTxTS\tIBR\tIBR_OLD\tABRS\tABRL\tBDS\tBDCD\tNBDCD\tND\tTR\tAF\n";
    }
    return VRLogfilePrintSync(v10, v11, a3, a4, a5, a6, a7, a8, v12);
  }
  return result;
}

uint64_t AFRCMarkResetCS()
{
  uint64_t v0 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v0) {
    return 2149646338;
  }
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 40;
  pthread_mutex_lock(v0 + 40);
  *(_DWORD *)&v1[41].__opaque[24] = 0;
  pthread_mutex_unlock(v2);
  VRLogfilePrintWithTimestamp(*(void *)&v1[44].__opaque[8], "%s", v3, v4, v5, v6, v7, v8, (char)"reset connection stats.\n");
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetConnectionNumber(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 40;
  pthread_mutex_lock(v3 + 40);
  int v6 = *(_DWORD *)v4[41].__opaque;
  if (v6 != a2)
  {
    *(_DWORD *)v4[41].__opaque = a2;
    *(_DWORD *)&v4[41].__opaque[24] = 1;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v17 = v7;
        __int16 v18 = 2080;
        int v19 = "AFRCSetConnectionNumber";
        __int16 v20 = 1024;
        int v21 = 5739;
        __int16 v22 = 1024;
        int v23 = v6;
        __int16 v24 = 1024;
        int v25 = a2;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRCSetConnectionNumber (%d->%d)", buf, 0x28u);
      }
    }
  }
  pthread_mutex_unlock(v5);
  VRLogfilePrintWithTimestamp(*(void *)&v4[44].__opaque[8], "connection #: (%d->%d).\n", v9, v10, v11, v12, v13, v14, v6);
  CheckOutHandleDebug();
  return 0;
}

void BWEstResetRecvrBWState(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 96_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(unsigned char *)(a1 + 980) = 0;
  *(void *)(a1 + 984) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 976) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 92_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 960) = 0;
  if (a2)
  {
    *(_DWORD *)(a1 + 1040) = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      uint64_t v7 = "BWEstResetRecvrBWState";
      __int16 v8 = 1024;
      int v9 = 5870;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d BWEstResetRecvrBWState", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

uint64_t AFRCSetBWEstMode(uint64_t a1, int a2, unsigned __int8 a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149646338;
  }
  __int16 v6 = (unsigned __int8 *)v5;
  if (a2)
  {
    *(_WORD *)(v5 + 722) = *(_WORD *)(v5 + 724);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      __int16 v8 = *MEMORY[0x1E4F47A50];
      int v9 = *MEMORY[0x1E4F47A50];
      if (!*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          int v19 = v6[722];
          int v20 = v6[723];
          int v21 = 136316162;
          uint64_t v22 = v7;
          __int16 v23 = 2080;
          __int16 v24 = "AFRCSetBWEstMode";
          __int16 v25 = 1024;
          int v26 = 6522;
          __int16 v27 = 1024;
          int v28 = v19;
          __int16 v29 = 1024;
          int v30 = v20;
          _os_log_debug_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d ////^^^^ AFRCSetBWEstMode: Sender/Recvr (master) %d/%d ", (uint8_t *)&v21, 0x28u);
        }
        goto LABEL_17;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = v6[722];
        int v11 = v6[723];
        int v21 = 136316162;
        uint64_t v22 = v7;
        __int16 v23 = 2080;
        __int16 v24 = "AFRCSetBWEstMode";
        __int16 v25 = 1024;
        int v26 = 6522;
        __int16 v27 = 1024;
        int v28 = v10;
        __int16 v29 = 1024;
        int v30 = v11;
        uint64_t v12 = "VCRC [%s] %s:%d ////^^^^ AFRCSetBWEstMode: Sender/Recvr (master) %d/%d ";
        uint64_t v13 = v8;
        uint32_t v14 = 40;
LABEL_12:
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v21, v14);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    uint64_t v17 = *MEMORY[0x1E4F47A50];
    __int16 v18 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        AFRCSetBWEstMode_cold_1(v16);
      }
      goto LABEL_17;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 136315650;
      uint64_t v22 = v16;
      __int16 v23 = 2080;
      __int16 v24 = "AFRCSetBWEstMode";
      __int16 v25 = 1024;
      int v26 = 6525;
      uint64_t v12 = "VCRC [%s] %s:%d ////^^^^ AFRCSetBWEstMode: FALLING TO BW-EST BACKWARD COMPATIBLITY MODE";
      uint64_t v13 = v17;
      uint32_t v14 = 28;
      goto LABEL_12;
    }
  }
LABEL_17:
  BWEUpdateSenderRecvrEnabledStates((uint64_t)v6);
  v6[732] = a3;
  BWEUpdateFilterType((uint64_t)v6);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetSendersLogState(uint64_t a1, BOOL *a2, BOOL *a3)
{
  if (!CheckInHandleDebug()) {
    return 2149646338;
  }
  *a2 = g_iBWEstLogLevel > 6;
  *a3 = g_iBWEstLogLevel > 0;
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCGetSenderRecvrModes(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149646338;
  }
  *a2 = *(unsigned char *)(v5 + 720);
  *a3 = *(unsigned char *)(v5 + 721);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetBWECap(uint64_t a1, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  uint64_t v4 = v3;
  if (a2)
  {
    for (uint64_t i = 0; i != 38; ++i)
    {
      if (g_adwTxRateTiers[i] >= a2) {
        break;
      }
    }
    if (i >= 0x24) {
      LODWORD(i) = 36;
    }
    int v6 = g_adwTxRateTiers[(i + 1)];
  }
  else
  {
    int v6 = 0;
  }
  *(_DWORD *)(v3 + 1040) = v6;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    int v9 = *MEMORY[0x1E4F47A50];
    int v10 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(_DWORD *)(v4 + 1040);
        int v13 = 136316162;
        uint64_t v14 = v8;
        __int16 v15 = 2080;
        uint64_t v16 = "AFRCSetBWECap";
        __int16 v17 = 1024;
        int v18 = 6597;
        __int16 v19 = 1024;
        unsigned int v20 = a2;
        __int16 v21 = 1024;
        int v22 = v11;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRCSetBWECap newBitrateCap: %d -> dwFakeBitrateCap: %d  ", (uint8_t *)&v13, 0x28u);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(_DWORD *)(v4 + 1040);
      int v13 = 136316162;
      uint64_t v14 = v8;
      __int16 v15 = 2080;
      uint64_t v16 = "AFRCSetBWECap";
      __int16 v17 = 1024;
      int v18 = 6597;
      __int16 v19 = 1024;
      unsigned int v20 = a2;
      __int16 v21 = 1024;
      int v22 = v12;
      _os_log_debug_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d AFRCSetBWECap newBitrateCap: %d -> dwFakeBitrateCap: %d  ", (uint8_t *)&v13, 0x28u);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetWrmMetrics(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 2149580801;
  }
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  int v4 = *(_DWORD *)(v3 + 252);
  a2[50] = *(_DWORD *)(v3 + 9696);
  a2[51] = v4;
  a2[52] = *(_DWORD *)(v3 + 44) / 0x3E8u;
  int v5 = *(_DWORD *)(v3 + 2928);
  a2[54] = (*(double *)(v3 + 176) * 100.0);
  a2[55] = v5;
  if (*(_DWORD *)(v3 + 2472)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = *(_DWORD *)(v3 + 2476) != 0;
  }
  a2[56] = v6;
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCSetStatisticsCollector(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 2149580801;
  }
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149646338;
  }
  *(void *)(v3 + 9760) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t AFRCLog_TailFile(uint64_t a1)
{
  uint64_t result = MEMORY[0x1F4188790](a1);
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    int v5 = v2;
    if (v2)
    {
      int v6 = v4;
      uint64_t v7 = (FILE *)result;
      fprintf((FILE *)result, "========== Start logging from File %d ==========\n", v3);
      memset(__b, 170, sizeof(__b));
      uint64_t v8 = (1500 * v6);
      uint64_t v9 = MEMORY[0x1E4E58140](v5);
      if (v9 <= v8)
      {
        uint64_t v11 = v9;
        uint64_t result = fseek(v5, 0, 0);
        uint64_t v8 = v11;
LABEL_9:
        if (v8 >= 1)
        {
          do
          {
            uint64_t result = fread(__b, 1uLL, 0x1000uLL, v5);
            if (!result) {
              break;
            }
            uint64_t v12 = result;
            uint64_t result = fwrite(__b, 1uLL, result, v7);
            BOOL v10 = v8 <= v12;
            v8 -= v12;
          }
          while (!v10);
        }
      }
      else
      {
        uint64_t result = fseek(v5, -v8, 2);
        while (1)
        {
          BOOL v10 = v8-- < 1;
          if (v10) {
            break;
          }
          uint64_t result = fgetc(v5);
          if (result == 10) {
            goto LABEL_9;
          }
        }
      }
    }
  }
  return result;
}

uint64_t calculateInitialRampUpDeltas(uint64_t result)
{
  uint64_t v1 = (unsigned char *)(result + 9800);
  if (!*(unsigned char *)(result + 9800))
  {
    micro();
    uint64_t result = reportingAdaptiveLearningStats();
    *uint64_t v1 = 1;
  }
  return result;
}

void DetectCongestion(uint64_t a1, int a2, int *a3, int a4, double a5, double a6, double a7)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  double v20 = micro();
  unsigned int v21 = *(_DWORD *)(a1 + 1392) + *(_DWORD *)(a1 + 1388);
  if (!a4
    || (double v22 = v20, v23 = *(int *)(a1 + 1412), (int)v23 >= 1)
    && a5 - *(double *)(a1 + 8 * (v23 - 1) + 1416) < 0.01)
  {
    *a3 = 0;
    double v24 = 0.0;
    double v25 = -1.0;
    double v26 = 0.0;
LABEL_5:
    int v27 = *a3;
    if (*(_DWORD *)(a1 + 2816))
    {
      int v28 = *(_DWORD *)(a1 + 2820);
      *(_DWORD *)(a1 + 2820) = v28 + 1;
      if ((v28 & 0xF) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v29 = VRTraceErrorLogLevelToCSTR();
        int v30 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          double v31 = v25;
          if (v25 == -1.0) {
            double v31 = *(double *)(a1 + 2448);
          }
          if (v27) {
            int v32 = 79;
          }
          else {
            int v32 = 88;
          }
          double v33 = *(double *)(a1 + 176) * 100.0;
          double v34 = *(double *)(a1 + 184) * 100.0;
          int v35 = *(_DWORD *)(a1 + 2700);
          int v36 = *(_DWORD *)(a1 + 2704);
          int v38 = *(_DWORD *)(a1 + 252);
          int v37 = *(_DWORD *)(a1 + 256);
          unsigned int v39 = *(_DWORD *)(a1 + 44) / 0x3E8u;
          uint64_t v40 = *((void *)&g_apszStMode + *(int *)(a1 + 1400));
          unsigned int v41 = *(_DWORD *)(a1 + 2968) / 0x3E8u;
          int v42 = *(_DWORD *)(a1 + 3036) + *(_DWORD *)(a1 + 3032);
          int v43 = *(_DWORD *)(a1 + 2980);
          uint64_t v44 = " UAT";
          if (!*(unsigned char *)(a1 + 3026)) {
            uint64_t v44 = " LAT";
          }
          if (*(_DWORD *)(a1 + 2472))
          {
            uint64_t v45 = " _";
          }
          else if (*(_DWORD *)(a1 + 2476))
          {
            uint64_t v45 = " -";
          }
          else if (*(_DWORD *)(a1 + 2404))
          {
            uint64_t v45 = " <";
          }
          else if (*(_DWORD *)(a1 + 2400))
          {
            uint64_t v45 = " >";
          }
          else
          {
            uint64_t v45 = "";
          }
          *(_DWORD *)CMTime buf = 136321282;
          *(void *)&uint8_t buf[4] = v29;
          __int16 v159 = 2080;
          long long v160 = "AFRCLog_PrintCongestionFullInfo";
          __int16 v161 = 1024;
          int v162 = 1018;
          __int16 v163 = 2048;
          *(double *)long long v164 = a5;
          *(_WORD *)&v164[8] = 1024;
          *(_DWORD *)long long v165 = (unsigned __int16)a2;
          *(_WORD *)&v165[4] = 2048;
          *(double *)&v165[6] = a6;
          __int16 v166 = 2048;
          double v167 = v26;
          __int16 v168 = 2048;
          *(double *)long long v169 = v24;
          *(_WORD *)&v169[8] = 2048;
          *(double *)long long v170 = v31;
          *(_WORD *)&v170[8] = 1024;
          *(_DWORD *)long long v171 = v32;
          *(_WORD *)&v171[4] = 1024;
          *(_DWORD *)&v171[6] = (a7 * 1000.0);
          __int16 v172 = 2048;
          *(double *)long long v173 = v33;
          *(_WORD *)&v173[8] = 2048;
          double v174 = v34;
          *(_WORD *)uint64_t v175 = 1024;
          *(_DWORD *)&v175[2] = v35;
          LOWORD(v176) = 1024;
          *(_DWORD *)((char *)&v176 + 2) = v36;
          HIWORD(v176) = 1024;
          int v177 = v38;
          __int16 v178 = 1024;
          int v179 = v37;
          __int16 v180 = 1024;
          unsigned int v181 = v21 / 0x3E8;
          __int16 v182 = 1024;
          unsigned int v183 = v39;
          __int16 v184 = 2080;
          uint64_t v185 = v40;
          __int16 v186 = 1024;
          unsigned int v187 = v41;
          __int16 v188 = 1024;
          int v189 = v42;
          __int16 v190 = 1024;
          int v191 = v43;
          __int16 v192 = 2080;
          uint64_t v193 = v44;
          __int16 v194 = 2080;
          uint64_t v195 = v45;
          _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: %8.3f/%04X: %.4f %.4f %.4f %.4f %c RTT:%u PLR:%4.1f@%.1f %u %u RRx:%u MBL:%d %3u/%3u%s\tBB: %u\t%u\t%u\t%s%s", buf, 0xC8u);
        }
      }
    }
    if (*(void *)(a1 + 2832))
    {
      double v157 = 0.0;
      *(void *)CMTime buf = 0;
      double v155 = 0.0;
      double v156 = 0.0;
      MediaQueue_RetrieveAudioVideoRates(*(void *)(a1 + 2808), (double *)buf, &v157, &v156, &v155);
      VRLogfilePrintWithTimestamp(*(void *)(a1 + 2832), "%8.3f/%04X:\t%.4f\t%.4f\t%.4f\t%.4f %c\tRTT:%-4u\tPLR:%4.1f@%.1f\tRRx:%u\tMBL:%d %u\t%3u/%3u\t %3u:%3u/%3u  %3u:%3u/%3u CS: %1d %3u %3u BB: %u\t%u\t%u\t%s%s%s\t%d\t%d/%d\n", ((v156 + v155) / 1000.0), (v156 / 1000.0), (v155 / 1000.0), *(unsigned int *)(a1 + 2968) / 0x3E8uLL, (*(_DWORD *)(a1 + 3036) + *(_DWORD *)(a1 + 3032)), *(unsigned int *)(a1 + 2980), SLOBYTE(a5));
    }
    return;
  }
  double v46 = *(double *)(a1 + 2464) * 30.0;
  int v47 = (int)v46;
  if ((int)v23 >= (int)v46)
  {
    if ((int)v23 <= v47)
    {
      memmove((void *)(a1 + 1416), (const void *)(a1 + 1424), 8 * (v47 - 1));
      memmove((void *)(a1 + 1896), (const void *)(a1 + 1904), 8 * ((int)(*(double *)(a1 + 2464) * 30.0) - 1));
      *(double *)(a1 + 1416 + 8 * (int)(*(double *)(a1 + 2464) * 30.0) - _Block_object_dispose(&STACK[0x250], 8) = a5;
      double v46 = *(double *)(a1 + 2464) * 30.0;
      *(double *)(a1 + 1896 + 8 * (int)v46 - _Block_object_dispose(&STACK[0x250], 8) = a6;
    }
    else
    {
      int v49 = v23 - v47 + 1;
      memmove((void *)(a1 + 1416), (const void *)(a1 + 1416 + 8 * v49), 8 * (v47 - 1));
      memmove((void *)(a1 + 1896), (const void *)(a1 + 1896 + 8 * v49), 8 * ((int)(*(double *)(a1 + 2464) * 30.0) - 1));
      *(double *)(a1 + 1416 + 8 * (int)(*(double *)(a1 + 2464) * 30.0) - _Block_object_dispose(&STACK[0x250], 8) = a5;
      *(double *)(a1 + 1896 + 8 * (int)(*(double *)(a1 + 2464) * 30.0) - _Block_object_dispose(&STACK[0x250], 8) = a6;
      double v46 = *(double *)(a1 + 2464) * 30.0;
      *(_DWORD *)(a1 + 1412) = (int)v46;
    }
  }
  else
  {
    uint64_t v48 = a1 + 8 * v23;
    *(double *)(v48 + 1416) = a5;
    *(double *)(v48 + 1896) = a6;
    *(_DWORD *)(a1 + 1412) = v23 + 1;
    *(double *)(a1 + 2384) = a5;
    *(double *)(a1 + 2392) = a5;
  }
  LODWORD(v46) = *(_DWORD *)(a1 + 44);
  double v50 = (double)*(unint64_t *)&v46 * 0.75;
  if (v50 <= (double)v21 || (int v51 = *(_DWORD *)(a1 + 28), v51 <= *(_DWORD *)(a1 + 40)))
  {
    if (*(_DWORD *)(a1 + 2404))
    {
      double v50 = v22 - *(double *)(a1 + 2416);
      if (v50 > 1.0 && (*(unsigned char *)(a1 + 2960) & 1) == 0)
      {
        if (*(_DWORD *)(a1 + 1400) != 3)
        {
          *(_DWORD *)(a1 + 1400) = 4;
          ++*(_DWORD *)(a1 + 1404);
          if (*(_DWORD *)(a1 + 2816))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v52 = VRTraceErrorLogLevelToCSTR();
              uint64_t v53 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v54 = *(_DWORD *)(a1 + 1404);
                *(_DWORD *)CMTime buf = 136315906;
                *(void *)&uint8_t buf[4] = v52;
                __int16 v159 = 2080;
                long long v160 = "DetectCongestion";
                __int16 v161 = 1024;
                int v162 = 3720;
                __int16 v163 = 1024;
                *(_DWORD *)long long v164 = v54;
                _os_log_impl(&dword_1E1EA4000, v53, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: [%u] Rate was limited", buf, 0x22u);
              }
            }
          }
          VRLogfilePrint(*(void *)(a1 + 2832), "[%u] Rate was limited\n", v14, v15, v16, v17, v18, v19, *(_DWORD *)(a1 + 1404));
          VRLogfilePrintWithTimestamp(*(void *)(a1 + 2848), "Rate is limited(%ukbps).\n", v55, v56, v57, v58, v59, v60, *(_DWORD *)(a1 + 44) / 0x3E8u);
        }
        *(double *)(a1 + 2384) = a5;
        *(double *)(a1 + 2392) = a5;
      }
      *(_DWORD *)(a1 + 2404) = 0;
    }
  }
  else if (v51 < 7 || !*(_DWORD *)(a1 + 9696))
  {
    *a3 = 0;
    if (!*(_DWORD *)(a1 + 2404)) {
      *(double *)(a1 + 2416) = v22;
    }
    *(_DWORD *)(a1 + 2404) = 1;
  }
  LODWORD(v50) = *(_DWORD *)(a1 + 44);
  if ((double)*(unint64_t *)&v50 * 1.25 >= (double)v21)
  {
    if (!*(_DWORD *)(a1 + 2400)) {
      goto LABEL_46;
    }
    int v61 = 0;
  }
  else
  {
    int v61 = 1;
  }
  *(_DWORD *)(a1 + 2400) = v61;
LABEL_46:
  if (!*(_DWORD *)(a1 + 1400)) {
    goto LABEL_73;
  }
  double v157 = NAN;
  LODWORD(v156) = -1431655766;
  if (*(_DWORD *)(a1 + 1408) != *(_DWORD *)(a1 + 1404))
  {
    MediaQueue_GetTimeRateChanged(*(void *)(a1 + 2808), &v157, &v156);
    if (LODWORD(v156) < *(_DWORD *)(a1 + 1404)
      || (v62 = MicroToNTP(v157), unsigned int v63 = NTPToMiddle32(v62), a2 == -1)
      || (unsigned __int16)(a2 - (v63 >> 6)) > 0x7FFEu)
    {
      *(_DWORD *)(a1 + 2424) = 0;
    }
    else
    {
      double v64 = a5 + 1.0;
      if (!*(_DWORD *)(a1 + 2948)) {
        double v64 = a5;
      }
      *(double *)(a1 + 2432) = v64;
      *(_DWORD *)(a1 + 2424) = 1;
      *(_DWORD *)(a1 + 140_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a1 + 1404);
      *(_DWORD *)(a1 + 2484) = 0;
      int v65 = (unsigned __int16)(v63 >> 6);
      if (*(_DWORD *)(a1 + 2816))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v66 = VRTraceErrorLogLevelToCSTR();
          uint64_t v67 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316418;
            *(void *)&uint8_t buf[4] = v66;
            __int16 v159 = 2080;
            long long v160 = "DetectCongestion";
            __int16 v161 = 1024;
            int v162 = 3776;
            __int16 v163 = 1024;
            *(_DWORD *)long long v164 = LODWORD(v156);
            *(_WORD *)&v164[4] = 1024;
            *(_DWORD *)&v164[6] = a2;
            *(_WORD *)long long v165 = 1024;
            *(_DWORD *)&v165[2] = v65;
            _os_log_impl(&dword_1E1EA4000, v67, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: [%u] Stabilized (TxTS %u >= %u FB). now collecting samples...", buf, 0x2Eu);
          }
        }
      }
      VRLogfilePrint(*(void *)(a1 + 2832), "[%u] Stabilized (TxTS %u >= %u FB). now collecting samples...\n", v14, v15, v16, v17, v18, v19, SLOBYTE(v156));
      VRLogfilePrintWithTimestamp(*(void *)(a1 + 2848), "Rate(%ukbps) stabilized.\n", v68, v69, v70, v71, v72, v73, *(_DWORD *)(a1 + 44) / 0x3E8u);
    }
  }
  int v74 = *(_DWORD *)(a1 + 2424);
  if (v74 >= 1)
  {
    double v75 = *(double *)(a1 + 2464);
    signed int v76 = vcvtd_n_s64_f64(v75, 2uLL);
    if (a5 - *(double *)(a1 + 2432) >= v75 * 0.5 && v74 >= v76)
    {
      if (*(_DWORD *)(a1 + 2816))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v78 = VRTraceErrorLogLevelToCSTR();
          int v79 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v80 = *(_DWORD *)(a1 + 1404);
            int v81 = *(_DWORD *)(a1 + 2424);
            *(_DWORD *)CMTime buf = 136316418;
            *(void *)&uint8_t buf[4] = v78;
            __int16 v159 = 2080;
            long long v160 = "DetectCongestion";
            __int16 v161 = 1024;
            int v162 = 3797;
            __int16 v163 = 1024;
            *(_DWORD *)long long v164 = v80;
            *(_WORD *)&v164[4] = 1024;
            *(_DWORD *)&v164[6] = v81;
            *(_WORD *)long long v165 = 1024;
            *(_DWORD *)&v165[2] = a2;
            _os_log_impl(&dword_1E1EA4000, v79, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: [%u] Collected %d samples (TxTS %u)", buf, 0x2Eu);
          }
        }
      }
      VRLogfilePrint(*(void *)(a1 + 2832), "[%u] Collected %d samples (TxTS %u)\n", v14, v15, v16, v17, v18, v19, *(_DWORD *)(a1 + 1404));
      VRLogfilePrintWithTimestamp(*(void *)(a1 + 2848), "AFRC collected %d samples.\n", v82, v83, v84, v85, v86, v87, *(_DWORD *)(a1 + 2424));
      *(_DWORD *)(a1 + 2424) = 0;
      *(_DWORD *)(a1 + 1400) = 0;
      goto LABEL_73;
    }
    *(_DWORD *)(a1 + 2424) = v74 + 1;
  }
  if (*(_DWORD *)(a1 + 1400)) {
    *a3 = 0;
  }
LABEL_73:
  if (*(_DWORD *)(a1 + 2408) && *(_DWORD *)(a1 + 1400) != 3 && a5 - *(double *)(a1 + 2432) > 2.0) {
    *(_DWORD *)(a1 + 240_Block_object_dispose(&STACK[0x250], 8) = 0;
  }
  int v88 = *(_DWORD *)(a1 + 1412);
  double v89 = *(double *)(a1 + 2464);
  signed int v90 = vcvtd_n_s64_f64(v89, 2uLL);
  int v91 = v88 - v90;
  if (v88 >= v90)
  {
    int v104 = v88 - v90;
    if (v91 >= 1)
    {
      int v105 = (double *)(a1 + 1416 + 8 * v91);
      int v104 = v91;
      while (*(double *)(a1 + 1416 + 8 * (v88 - 1)) - *v105 <= v89 * 0.5)
      {
        --v105;
        BOOL v106 = __OFSUB__(v104--, 1);
        if ((v104 < 0) ^ v106 | (v104 == 0))
        {
          int v104 = 0;
          break;
        }
      }
    }
    int v107 = *(_DWORD *)(a1 + 1396);
    if ((v107 & 1) == 0
      || (double v26 = 0.0, *(double *)(a1 + 1416 + 8 * (v88 - 1)) - *(double *)(a1 + 1416 + 8 * v104) >= 0.2))
    {
      unsigned int v108 = v88 - v104;
      if (v88 - v104 < 1)
      {
        double v119 = NAN;
      }
      else
      {
        int v109 = v104 + (v108 >> 1);
        uint64_t v110 = (v108 + 1) >> 1;
        int v111 = (double *)(a1 + 8 * v109 + 1416);
        uint64_t v112 = (double *)(a1 + 8 * v104 + 1416);
        double v113 = 0.0;
        double v114 = 0.0;
        double v115 = 0.0;
        double v116 = 0.0;
        do
        {
          double v116 = v116 + v112[60];
          double v115 = v115 + v111[60];
          double v117 = *v112++;
          double v114 = v114 + v117;
          double v118 = *v111++;
          double v113 = v113 + v118;
          --v110;
        }
        while (v110);
        double v119 = (v115 - v116) / (v113 - v114);
      }
      double v26 = v89 * 0.5 * v119;
    }
    if (v91 >= 1)
    {
      uint64_t v120 = (double *)(a1 + 1416 + 8 * v91);
      while (*(double *)(a1 + 1416 + 8 * (v88 - 1)) - *v120 <= v89 * 0.25)
      {
        --v120;
        BOOL v106 = __OFSUB__(v91--, 1);
        if ((v91 < 0) ^ v106 | (v91 == 0))
        {
          int v91 = 0;
          break;
        }
      }
    }
    if ((v107 & 1) == 0
      || (double v24 = 0.0, *(double *)(a1 + 1416 + 8 * (v88 - 1)) - *(double *)(a1 + 1416 + 8 * v91) >= 0.2))
    {
      unsigned int v121 = v88 - v91;
      if (v88 - v91 < 1)
      {
        double v132 = NAN;
      }
      else
      {
        int v122 = v91 + (v121 >> 1);
        uint64_t v123 = (v121 + 1) >> 1;
        uint64_t v124 = (double *)(a1 + 8 * v122 + 1416);
        uint64_t v125 = (double *)(a1 + 8 * v91 + 1416);
        double v126 = 0.0;
        double v127 = 0.0;
        double v128 = 0.0;
        double v129 = 0.0;
        do
        {
          double v129 = v129 + v125[60];
          double v128 = v128 + v124[60];
          double v130 = *v125++;
          double v127 = v127 + v130;
          double v131 = *v124++;
          double v126 = v126 + v131;
          --v123;
        }
        while (v123);
        double v132 = (v128 - v129) / (v126 - v127);
      }
      double v24 = v89 * 0.25 * v132;
      if (a6 > 0.0 && v24 == 0.0)
      {
        double v133 = *(double *)(a1 + 2376);
        if (v133 == 0.0)
        {
          *(double *)(a1 + 2376) = a5;
        }
        else if (a5 - v133 > 2.0)
        {
          *(_DWORD *)(a1 + 1396) = v107 | 2;
          *(double *)(a1 + 2384) = a5;
          *(double *)(a1 + 2392) = a5;
          *(void *)(a1 + 244_Block_object_dispose(&STACK[0x250], 8) = 0;
          *(void *)(a1 + 2376) = 0;
          *a3 = 0;
          int v88 = *(_DWORD *)(a1 + 1412);
        }
      }
      else
      {
        *(void *)(a1 + 2376) = 0;
      }
    }
    double v134 = *(double *)(a1 + 2448)
         + v26 * (*(double *)(a1 + 8 * v88 + 1408) - *(double *)(a1 + 8 * v88 + 1400)) / (v89 * 0.5);
    if (v134 < 0.0) {
      double v134 = 0.0;
    }
    *(double *)(a1 + 244_Block_object_dispose(&STACK[0x250], 8) = v134;
    if (a6 > 2.0 || v26 > 0.001 || a6 > 0.0 && v24 == 0.0) {
      *a3 = 0;
    }
    int v135 = *(_DWORD *)(a1 + 1396);
    double v136 = 0.0;
    if ((v135 & 4) != 0)
    {
      int v137 = *(_DWORD *)(a1 + 2404);
      if (v24 <= 0.0) {
        goto LABEL_136;
      }
      double v138 = v89 * *((double *)&xmmword_1E259BC90 + (v137 != 0));
      if (v26 <= v138) {
        goto LABEL_136;
      }
      if (*(double *)(a1 + 2440) <= v138 || v137 != 0) {
        goto LABEL_136;
      }
      double v136 = v26;
      if (!*(_DWORD *)(a1 + 2484))
      {
        v135 |= 2u;
        *(_DWORD *)(a1 + 1396) = v135;
        *(double *)(a1 + 2384) = a5;
        *(double *)(a1 + 2392) = a5;
        *(void *)(a1 + 244_Block_object_dispose(&STACK[0x250], 8) = 0;
        double v134 = 0.0;
LABEL_136:
        double v136 = v26;
      }
    }
    *(double *)(a1 + 2440) = v136;
    int v140 = *(_DWORD *)(a1 + 1400);
    if (v140 && v140 != 3)
    {
      double v25 = -1.0;
      if (!*(_DWORD *)(a1 + 2424))
      {
LABEL_153:
        if (a6 <= 0.0)
        {
          double v146 = *(double *)(a1 + 2536);
        }
        else
        {
          *(double *)(a1 + 2536) = a5;
          double v146 = a5;
        }
        if (v146 > 0.0)
        {
          double v147 = a5 - v146;
          if (v147 > 1.0)
          {
            *(void *)(a1 + 244_Block_object_dispose(&STACK[0x250], 8) = 0;
            *(double *)(a1 + 2536) = a5;
            VRLogfilePrint(*(void *)(a1 + 2832), "OWRD has been 0 for %f seconds, reset NOWRDAcc\n", v14, v15, v16, v17, v18, v19, SLOBYTE(v147));
          }
        }
        if (*(_DWORD *)(a1 + 2948) && *(double *)(a1 + 2448) > *(double *)(a1 + 2464) * 0.1 * 0.5) {
          *a3 = 0;
        }
        if (*(_DWORD *)(a1 + 9696) && *(unsigned char *)(a1 + 9700) && (*(unsigned char *)(a1 + 1396) & 1) == 0) {
          *a3 = 0;
        }
        int v148 = *(_DWORD *)(a1 + 252);
        int v149 = *(_DWORD *)(a1 + 28);
        if (!v148
          || (v149 >= 35 ? (int v150 = 35) : (int v150 = *(_DWORD *)(a1 + 28)),
              long long v151 = (unsigned int *)&g_adwTxRateTiers[v150 + 1],
              1000 * v148 < ((double)*v151 + (double)(v151[1] - *v151) * 0.25)))
        {
          *(double *)(a1 + 2384) = a5;
        }
        if (v149 >= 36) {
          int v152 = 36;
        }
        else {
          int v152 = v149;
        }
        int v153 = *(_DWORD *)(a1 + 2944);
        if (!v153
          || *(_DWORD *)(a1 + 2928)
          || !v148
          || 1000 * v148 > ((double)*(unsigned int *)(a1 + 44)
                                        + (double)(g_adwTxRateTiers[v152 + 1] - *(_DWORD *)(a1 + 44))
                                        * 0.25))
        {
          *(double *)(a1 + 2392) = a5;
        }
        int v154 = *(_DWORD *)(a1 + 1396);
        if ((v154 & 2) == 0 && a5 - *(double *)(a1 + 2392) > 2.0)
        {
          v154 |= 0x12u;
          *(_DWORD *)(a1 + 1396) = v154;
          *(double *)(a1 + 2384) = a5;
          *(double *)(a1 + 2392) = a5;
          *(void *)(a1 + 244_Block_object_dispose(&STACK[0x250], 8) = 0;
        }
        if (*(unsigned char *)(a1 + 9837) && *(_DWORD *)(a1 + 256) >= 7u && *(_DWORD *)(a1 + 276) && v149 >= 13)
        {
          v154 |= 2u;
          *(_DWORD *)(a1 + 1396) = v154;
          *(double *)(a1 + 2384) = a5;
          *(double *)(a1 + 2392) = a5;
          *(void *)(a1 + 244_Block_object_dispose(&STACK[0x250], 8) = 0;
          *(unsigned char *)(a1 + 9820) = 1;
        }
        if ((v154 & 3) == 0 && (!*(_DWORD *)(a1 + 2928) || *(int *)(a1 + 9572) >= 1))
        {
          if ((v154 & 4) != 0)
          {
            if (!*(_DWORD *)(a1 + 1400)
              && a5 - *(double *)(a1 + 2432) > *(double *)(a1 + 2456) + *(double *)(a1 + 2456))
            {
              *(_DWORD *)(a1 + 1396) = v154 & 0xFFFFFFFB;
            }
          }
          else if (*a3 {
                 && (!v153
          }
                  || (*(unsigned char *)(a1 + 2960) & 1) != 0
                  || a5 - *(double *)(a1 + 2384) > (*(double *)(a1 + 2464) + *(double *)(a1 + 2464))
                                                 * *(double *)(a1 + 2456)))
          {
            *(_DWORD *)(a1 + 1396) = v154 | 0xC;
            *(double *)(a1 + 2384) = a5;
            *(double *)(a1 + 2392) = a5;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      double v25 = -1.0;
    }
    if (v136 <= v26 && !*(_DWORD *)(a1 + 2484))
    {
      double v141 = (v135 & 4) != 0 && !*(_DWORD *)(a1 + 2404) ? 0.1 : 0.15;
      double v142 = v89 * v141;
      if (v134 > v142)
      {
        int v143 = *(_DWORD *)(a1 + 28);
        int v144 = *(_DWORD *)(a1 + 40);
        if (v143 > v144)
        {
          *(_DWORD *)(a1 + 1396) = v135 | 2;
          *(double *)(a1 + 2384) = a5;
          *(double *)(a1 + 2392) = a5;
          if (!*(_DWORD *)(a1 + 2948) || v143 > v144 + 1)
          {
            double v145 = v134 - v142;
            *(double *)(a1 + 244_Block_object_dispose(&STACK[0x250], 8) = v145;
            if (v145 < 0.0) {
              *(void *)(a1 + 244_Block_object_dispose(&STACK[0x250], 8) = 0;
            }
          }
          double v25 = v134;
        }
      }
    }
    goto LABEL_153;
  }
  *a3 = 0;
  if (*(_DWORD *)(a1 + 2816))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v92 = VRTraceErrorLogLevelToCSTR();
      double v93 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        double v94 = micro();
        int v95 = *(_DWORD *)(a1 + 1412);
        uint64_t v96 = *(void *)(a1 + 176);
        uint64_t v97 = *(void *)(a1 + 184);
        int v98 = *(_DWORD *)(a1 + 2700);
        int v99 = *(_DWORD *)(a1 + 2704);
        int v100 = *(_DWORD *)(a1 + 252);
        int v101 = *(_DWORD *)(a1 + 256);
        uint64_t v102 = *((void *)&g_apszStMode + *(int *)(a1 + 1400));
        *(_DWORD *)CMTime buf = 136318978;
        *(void *)&uint8_t buf[4] = v92;
        __int16 v159 = 2080;
        long long v160 = "AFRCLog_PrintCongestionInfo";
        __int16 v161 = 1024;
        int v162 = 938;
        __int16 v163 = 2048;
        *(double *)long long v164 = v94;
        *(_WORD *)&v164[8] = 2048;
        *(double *)long long v165 = a5;
        *(_WORD *)&v165[8] = 1024;
        *(_DWORD *)&v165[10] = (unsigned __int16)a2;
        __int16 v166 = 2048;
        double v167 = a6;
        __int16 v168 = 1024;
        *(_DWORD *)long long v169 = v95;
        *(_WORD *)&v169[4] = 1024;
        *(_DWORD *)&v169[6] = v21;
        *(_WORD *)long long v170 = 2048;
        *(void *)&v170[2] = v96;
        *(_WORD *)long long v171 = 2048;
        *(void *)&v171[2] = v97;
        __int16 v172 = 1024;
        *(_DWORD *)long long v173 = v98;
        *(_WORD *)&v173[4] = 1024;
        *(_DWORD *)&v173[6] = v99;
        LOWORD(v174) = 1024;
        *(_DWORD *)((char *)&v174 + 2) = v100;
        HIWORD(v174) = 1024;
        *(_DWORD *)uint64_t v175 = v101;
        *(_WORD *)&v175[4] = 2080;
        uint64_t v176 = v102;
        _os_log_impl(&dword_1E1EA4000, v93, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d AFRC: %8.3f %.3f/%04X %.4f(%d) %u %.4f %.4f %u %u %u %u%s", buf, 0x82u);
      }
    }
  }
  if (*(void *)(a1 + 2832))
  {
    double v157 = 0.0;
    *(void *)CMTime buf = 0;
    double v155 = 0.0;
    double v156 = 0.0;
    MediaQueue_RetrieveAudioVideoRates(*(void *)(a1 + 2808), (double *)buf, &v157, &v156, &v155);
    if (*(unsigned char *)(a1 + 3026)) {
      int v103 = " UAT";
    }
    else {
      int v103 = " LAT";
    }
    VRLogfilePrintWithTimestamp(*(void *)(a1 + 2832), "%8.3f\t%8.3f/%04X:\t%.4f(%d)\t\t\t\tRTT:%-4u\tPLR:%4.1f@%.1f\t%2u\t%2u\tRRx:%u\tMBL:%u\t%3u/%3u\t %3u:%3u/%3u  %3u:%3u/%3u\tBB: %u\t%u\t%u\t%s%s\n", (*(_DWORD *)(a1 + 3036) + *(_DWORD *)(a1 + 3032)), (uint64_t)v103, *((void *)&g_apszStMode + *(int *)(a1 + 1400)), *(unsigned int *)(a1 + 1412), *(unsigned int *)(a1 + 2700), *(unsigned int *)(a1 + 2704), SLOBYTE(v22));
  }
}

uint64_t CalculateBasebandRate(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, int a5)
{
  double v10 = (double)(*(_DWORD *)(a2 + 36) - *(_DWORD *)(a1 + 3044)) * 0.001;
  int v11 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a1 + 3040);
  int v12 = v11 & ~(v11 >> 31);
  if (v11 < 1)
  {
    unsigned int v13 = 0;
  }
  else
  {
    if (v10 == 0.0) {
      return 0;
    }
    unsigned int v13 = ((double)(8 * v12) / v10);
  }
  int v14 = v12
      - ((*(_DWORD *)(a2 + 28) - *(_DWORD *)(a1 + 3036)) & ~((*(_DWORD *)(a2 + 28) - *(_DWORD *)(a1 + 3036)) >> 31));
  if (v14 >= 1)
  {
    if (v10 != 0.0)
    {
      unsigned int v15 = ((double)(8 * (v14 & ~(v14 >> 31))) / v10);
      goto LABEL_9;
    }
    return 0;
  }
  unsigned int v15 = 0;
LABEL_9:
  if (!*(_DWORD *)(a1 + 2928)) {
    goto LABEL_17;
  }
  uint64_t v16 = (unsigned char *)(a1 + 9664);
  uint64_t v17 = (void *)(a1 + 2980);
  double v24 = micro();
  if (*(unsigned char *)(a1 + 1396))
  {
    unsigned char *v16 = 0;
    goto LABEL_16;
  }
  if (*v16)
  {
    if (v24 - *(double *)(a1 + 9672) > 3.0)
    {
      unsigned char *v16 = 0;
      *(_DWORD *)(a1 + 968_Block_object_dispose(&STACK[0x250], 8) = 0;
      uint64_t v25 = *(void *)(a1 + 2832);
      double v26 = "Get Out of Antenna Imbalance Mode!\n";
LABEL_14:
      VRLogfilePrint(v25, "%s", v18, v19, v20, v21, v22, v23, (char)v26);
      VRLogfilePrintWithTimestamp(*(void *)(a1 + 2848), "%s", v27, v28, v29, v30, v31, v32, (char)v26);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  if (v15 >= 0x3E8)
  {
LABEL_16:
    *(void *)&long long v33 = *(void *)(a1 + 2968);
    *(_DWORD *)(a1 + 964_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a1 + 28);
    *((void *)&v33 + 1) = *v17;
    *(_OWORD *)(a1 + 9632) = v33;
    *(void *)(a1 + 9656) = *(void *)(a1 + 9576);
    *(_DWORD *)(a1 + 968_Block_object_dispose(&STACK[0x250], 8) = 0;
    *(_DWORD *)(a1 + 9692) = *(_DWORD *)(a1 + 2480);
    goto LABEL_17;
  }
  unsigned int v50 = *(_DWORD *)(a1 + 9688) + 1;
  *(_DWORD *)(a1 + 968_Block_object_dispose(&STACK[0x250], 8) = v50;
  if (v50 >= 5 && v24 - *(double *)(a1 + 9680) > 3.0)
  {
    unsigned char *v16 = 1;
    *(double *)(a1 + 9672) = v24;
    uint64_t v25 = *(void *)(a1 + 2832);
    double v26 = "Get Into of Antenna Imbalance Mode!\n";
    goto LABEL_14;
  }
LABEL_17:
  if (v10 <= 0.005 && v10 != 0.0) {
    return 0;
  }
  *a3 = v15;
  *a4 = v13;
  *(_DWORD *)(a1 + 2964) = v15;
  *(_DWORD *)(a1 + 2976) = *(_DWORD *)(a1 + 2968);
  uint64_t v35 = *(int *)(a1 + 9056);
  if ((int)v35 > 14)
  {
    memmove((void *)(a1 + 9064), (const void *)(a1 + 9072), 0x70uLL);
    long long v37 = *(_OWORD *)(a1 + 9188);
    *(_OWORD *)(a1 + 9200) = *(_OWORD *)(a1 + 9204);
    *(_OWORD *)(a1 + 9184) = v37;
    *(_OWORD *)(a1 + 9216) = *(_OWORD *)(a1 + 9220);
    *(void *)(a1 + 9232) = *(void *)(a1 + 9236);
    long long v38 = *(_OWORD *)(a1 + 9264);
    *(_OWORD *)(a1 + 9244) = *(_OWORD *)(a1 + 9248);
    *(_OWORD *)(a1 + 9260) = v38;
    *(_OWORD *)(a1 + 9276) = *(_OWORD *)(a1 + 9280);
    *(void *)(a1 + 9292) = *(void *)(a1 + 9296);
    *(void *)(a1 + 9176) = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 9240) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 9300) = *(_DWORD *)(a2 + 28);
    LODWORD(v36) = *(_DWORD *)(a1 + 9056);
  }
  else
  {
    *(void *)(a1 + 8 * v35 + 9064) = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 4 * v35 + 9184) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 4 * *(int *)(a1 + 9056) + 9244) = *(_DWORD *)(a2 + 28);
    LODWORD(v36) = *(_DWORD *)(a1 + 9056) + 1;
    *(_DWORD *)(a1 + 9056) = v36;
  }
  if ((int)v36 >= 2)
  {
    uint64_t v39 = (v36 - 1);
    uint64_t v36 = v36;
    double v40 = *(double *)(a1 + 8 * v39 + 9064);
    while (v36-- > 1)
    {
      double v42 = v40 - *(double *)(a1 + 8 * v36 + 9064);
      if (v42 >= 0.5)
      {
        uint64_t v36 = v36;
        goto LABEL_30;
      }
    }
    uint64_t v36 = 0;
    double v42 = v40 - *(double *)(a1 + 9064);
LABEL_30:
    int v44 = *(_DWORD *)(a1 + 9184 + 4 * v39) - *(_DWORD *)(a1 + 9184 + 4 * v36);
    int v45 = *(_DWORD *)(a1 + 9244 + 4 * v39) - *(_DWORD *)(a1 + 9244 + 4 * v36);
    unsigned int v43 = ((double)(8
                                * (((v44 & ~(v44 >> 31)) - (v45 & ~(v45 >> 31))) & ~(((v44 & ~(v44 >> 31))
                                                                                    - (v45 & ~(v45 >> 31))) >> 31)))
                       / v42);
    HIDWORD(v46) = 1069757235;
    if (v42 < 0.15 && v43 - 1 >= *(_DWORD *)(a1 + 44)) {
      unsigned int v43 = *(_DWORD *)(a1 + 44);
    }
    *(_DWORD *)(a1 + 296_Block_object_dispose(&STACK[0x250], 8) = v43;
    if (a5 && v43)
    {
      unsigned int v47 = *(_DWORD *)(a1 + 44);
      if (v47 >= v43) {
        unsigned int v47 = v43;
      }
      *(_DWORD *)(a1 + 2972) = v47;
    }
    else
    {
      LODWORD(v46) = *(_DWORD *)(a1 + 2972);
      unsigned int v47 = ((double)v43 * 0.025 + (double)v46 * 0.975);
      *(_DWORD *)(a1 + 2972) = v47;
      if (!v43)
      {
        if (!(*(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 28)))
        {
          unsigned int v43 = 0;
          goto LABEL_44;
        }
        if (v42 >= 0.5 && *(double *)(a1 + 2504) > 0.0)
        {
          unsigned int v51 = *(_DWORD *)(a1 + 2980);
          if (v51 <= 0x7D1) {
            unsigned int v51 = 2001;
          }
          *(_DWORD *)(a1 + 2980) = v51;
        }
        unsigned int v43 = 0;
        if (!v47)
        {
          unsigned int v49 = *(_DWORD *)(a1 + 2980);
          if (v49 <= 0x7D1) {
            unsigned int v49 = 2001;
          }
          goto LABEL_43;
        }
        int v48 = *(_DWORD *)(a2 + 28) + *(_DWORD *)(a2 + 24);
LABEL_42:
        unsigned int v49 = ((double)(8000 * v48) / (double)v47);
LABEL_43:
        *(_DWORD *)(a1 + 2984) = v49;
        goto LABEL_44;
      }
    }
    if (!*(_DWORD *)(a1 + 2976))
    {
      *(_DWORD *)(a1 + 2972) = v43;
      unsigned int v47 = v43;
    }
    *(_DWORD *)(a1 + 2980) = ((double)(8000 * (*(_DWORD *)(a2 + 28) + *(_DWORD *)(a2 + 24)))
                                          / (double)v43);
    int v48 = *(_DWORD *)(a2 + 28) + *(_DWORD *)(a2 + 24);
    goto LABEL_42;
  }
  unsigned int v43 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 296_Block_object_dispose(&STACK[0x250], 8) = v43;
  *(_DWORD *)(a1 + 2972) = v43;
LABEL_44:
  if (v43 >= *(_DWORD *)(a1 + 8)
    || !(*(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 28)) && !(*(_DWORD *)(a1 + 3032) + *(_DWORD *)(a1 + 3036))
    || (*(unsigned char *)(a1 + 2960) & 1) == 0)
  {
    *(double *)(a1 + 252_Block_object_dispose(&STACK[0x250], 8) = micro();
  }
  return 1;
}

uint64_t RampDownAudio(uint64_t result, double a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)(result + 2472) || (*(unsigned char *)(result + 2960)) && a2 - *(double *)(result + 2528) >= 2.0)
  {
    double v3 = 0.333333333;
    if (*(double *)(result + 9576) > 0.333333333)
    {
      unsigned int v4 = *(_DWORD *)(result + 2968);
      double v5 = 0.666666667;
      if (v4 >> 5 >= 0x271) {
        double v5 = 1.0;
      }
      if (v4 >> 3 >= 0x753) {
        double v3 = v5;
      }
      *(double *)(result + 9576) = v3;
      *(double *)(result + 252_Block_object_dispose(&STACK[0x250], 8) = a2;
      *(double *)(result + 9584) = a2;
      MediaQueue_SetAudioFraction(v3);
      return UpdateFECLevel(v2);
    }
  }
  return result;
}

void UpdateAudioTxInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  double v9 = *(double *)(a1 + 9576);
  if (v9 >= 1.0)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 44);
  }
  else if (v9 == 0.333333333)
  {
    unsigned int v10 = 12000;
  }
  else
  {
    unsigned int v10 = 16000;
  }
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = v10;
  unsigned int v11 = *(_DWORD *)(a1 + 1392);
  unsigned int v12 = *(_DWORD *)(a1 + 2968);
  unsigned int v13 = *(_DWORD *)(a1 + 3036) + *(_DWORD *)(a1 + 3032);
  unsigned int v14 = 8 * v13;
  int v15 = *(_DWORD *)(a1 + 2680);
  if (v15)
  {
    if (*(_DWORD *)(a1 + 9848)) {
      unsigned int v16 = *(_DWORD *)(a1 + 9848);
    }
    else {
      unsigned int v16 = *(_DWORD *)(a1 + 1392);
    }
    double v17 = micro();
    if ((double)v16 * 1.5 <= (double)v12
      || (v17 - *(double *)(a1 + 9840) >= 0.25 ? (BOOL v18 = v12 >= v16) : (BOOL v18 = 0),
          v18 ? (BOOL v19 = v14 > 2 * v12) : (BOOL v19 = 1),
          !v19))
    {
      *(_DWORD *)(a1 + 2680) = 0;
      double v20 = micro() - *(double *)(a1 + 2672);
      *(double *)(a1 + 2664) = *(double *)(a1 + 2664) + v20;
      if (v20 <= *(double *)(a1 + 2688)) {
        double v20 = *(double *)(a1 + 2688);
      }
      *(double *)(a1 + 268_Block_object_dispose(&STACK[0x250], 8) = v20;
    }
  }
  else
  {
    if (v10 >= v11) {
      unsigned int v16 = *(_DWORD *)(a1 + 1392);
    }
    else {
      unsigned int v16 = v10;
    }
    if (v12 < v16 && v13 > ((v11 >> 2) & 0x1FFFFFFF))
    {
      *(double *)(a1 + 2672) = micro();
      *(_DWORD *)(a1 + 2680) = 1;
    }
  }
  int v22 = *(_DWORD *)(a1 + 2680);
  if (v22 | v15 && (int)*MEMORY[0x1E4F47A38] >= 5)
  {
    StallModeTracePrint_(5, (uint64_t)"VCRC", a3, a4, " fAudioPaused: %d BBAvgTxRate: %10d txTarget: %10d (%d)   QDepth_bits: %10d ", a6, a7, a8, v22);
    int v22 = *(_DWORD *)(a1 + 2680);
  }
  if ((v15 != 0) == (v22 == 0) && (int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v23 = VRTraceErrorLogLevelToCSTR();
    double v24 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(a1 + 2680);
      int v26 = *(_DWORD *)(a1 + 2968);
      *(_DWORD *)CMTime buf = 136316930;
      uint64_t v28 = v23;
      __int16 v29 = 2080;
      uint64_t v30 = "UpdateAudioTxInfo";
      __int16 v31 = 1024;
      int v32 = 3033;
      __int16 v33 = 1024;
      int v34 = v25;
      __int16 v35 = 1024;
      int v36 = v26;
      __int16 v37 = 1024;
      unsigned int v38 = v16;
      __int16 v39 = 1024;
      unsigned int v40 = v11;
      __int16 v41 = 1024;
      unsigned int v42 = v14;
      _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d  fAudioPaused: %d BBAvgTxRate: %10d txTarget: %10d (%d)   QDepth_bits: %10d ", buf, 0x3Au);
    }
  }
}

uint64_t BWEstCalcLargeFrameSize(uint64_t a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 1104)) {
    a2 = 1;
  }
  double v5 = 0.1;
  if (a2) {
    double v5 = 0.05;
  }
  unsigned int v6 = (v5 * (double)((*(_DWORD *)(a1 + 44) - *(_DWORD *)(a1 + 1392)) >> 3));
  unsigned int v3 = 5 * *(_DWORD *)(a1 + 252);
  int v7 = (v3 >> 1) & 0x1FFFFFFF;
  if (v6 >= (20 * *(_DWORD *)(a1 + 252)) >> 3) {
    unsigned int v8 = (v3 >> 1) & 0x1FFFFFFF;
  }
  else {
    unsigned int v8 = (v5 * (double)((*(_DWORD *)(a1 + 44) - *(_DWORD *)(a1 + 1392)) >> 3));
  }
  if (v8 <= 0x101) {
    unsigned int v9 = 257;
  }
  else {
    unsigned int v9 = v8;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v10 = VRTraceErrorLogLevelToCSTR();
    unsigned int v11 = *MEMORY[0x1E4F47A50];
    unsigned int v12 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(_DWORD *)(a1 + 252);
        int v19 = 136316674;
        uint64_t v20 = v10;
        __int16 v21 = 2080;
        int v22 = "setCapOnLF";
        __int16 v23 = 1024;
        int v24 = 6011;
        __int16 v25 = 1024;
        unsigned int v26 = v9;
        __int16 v27 = 1024;
        int v28 = v7;
        __int16 v29 = 1024;
        unsigned int v30 = v6;
        __int16 v31 = 1024;
        int v32 = v13;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d ^^^^^ LARGE frame req'd of %d (%d, %d, R %d)", (uint8_t *)&v19, 0x34u);
      }
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      int v18 = *(_DWORD *)(a1 + 252);
      int v19 = 136316674;
      uint64_t v20 = v10;
      __int16 v21 = 2080;
      int v22 = "setCapOnLF";
      __int16 v23 = 1024;
      int v24 = 6011;
      __int16 v25 = 1024;
      unsigned int v26 = v9;
      __int16 v27 = 1024;
      int v28 = v7;
      __int16 v29 = 1024;
      unsigned int v30 = v6;
      __int16 v31 = 1024;
      int v32 = v18;
      _os_log_debug_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d ^^^^^ LARGE frame req'd of %d (%d, %d, R %d)", (uint8_t *)&v19, 0x34u);
    }
  }
  if (v9 < 0xABE)
  {
    if (v9 < 0x6D6)
    {
      if (v9 < 0x1F4)
      {
        if (v9 <= 0x112) {
          int v15 = 257;
        }
        else {
          int v15 = v9;
        }
        unsigned int v14 = 1;
      }
      else
      {
        int v16 = v9 >> 1;
        if (v9 >> 1 <= 0x100) {
          int v16 = 256;
        }
        int v15 = v16 + 1;
        unsigned int v14 = 2;
      }
    }
    else
    {
      int v15 = (unsigned __int16)v9 / 3u + 1;
      unsigned int v14 = 3;
    }
  }
  else
  {
    unsigned int v14 = 2;
    do
      ++v14;
    while (v9 / v14 > 0x564);
    int v15 = v9 / v14 + 1;
  }
  *(_DWORD *)(a1 + 1076) = v15;
  *(_DWORD *)(a1 + 1080) = v14;
  return v15 * v14;
}

uint64_t MediaQueue_CreateHandle(uint64_t *a1, uint64_t a2)
{
  unsigned int v4 = (char *)malloc_type_calloc(1uLL, 0x6400uLL, 0x102004011FBE5E6uLL);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    *((_DWORD *)v4 + 2) = 1;
    *((_DWORD *)v4 + 186) = 1;
    *((_WORD *)v4 + 432) = 257;
    *((void *)v4 + 109) = 0x3FF0000000000000;
    *((_DWORD *)v4 + 220) = 1;
    *((void *)v4 + 111) = 0x3FF0000000000000;
    *((void *)v4 + 112) = 0x3FF0000000000000;
    *((void *)v4 + 117) = a2;
    v4[208] = 0;
    *(_OWORD *)(v4 + 920) = 0u;
    *((void *)v4 + 3193) = 0x7FF8000000000000;
    *((void *)v4 + 91) = 0;
    unsigned int v9 = (pthread_mutex_t *)(v4 + 24);
    pthread_mutex_init((pthread_mutex_t *)(v4 + 24), 0);
    pthread_mutex_init((pthread_mutex_t *)(v5 + 144), 0);
    pthread_mutex_init((pthread_mutex_t *)(v5 + 248), 0);
    pthread_mutex_init((pthread_mutex_t *)(v5 + 312), 0);
    pthread_mutex_init((pthread_mutex_t *)(v5 + 392), 0);
    pthread_cond_init((pthread_cond_t *)(v5 + 456), 0);
    pthread_mutex_init((pthread_mutex_t *)(v5 + 512), 0);
    pthread_mutex_init((pthread_mutex_t *)(v5 + 752), 0);
    pthread_cond_init((pthread_cond_t *)(v5 + 816), 0);
    *(void *)(v5 + 592) = 0;
    *(unsigned char *)(v5 + 584) = 0;
    *(unsigned char *)(v5 + 600) = 0;
    *(void *)(v5 + 604) = 0;
    *(_WORD *)(v5 + 612) = 0;
    *(void *)(v5 + 624) = 0;
    *(void *)(v5 + 616) = 0;
    Throttling_MediaQueue_Init(v5 + 632);
    uint64_t Handle = CreateHandle();
    uint64_t v7 = 0;
    *a1 = Handle;
    if (Handle == 0xFFFFFFFFLL)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          MediaQueue_CreateHandle_cold_2();
        }
      }
      pthread_mutex_destroy(v9);
      pthread_mutex_destroy((pthread_mutex_t *)(v5 + 144));
      pthread_mutex_destroy((pthread_mutex_t *)(v5 + 248));
      pthread_mutex_destroy((pthread_mutex_t *)(v5 + 312));
      pthread_mutex_destroy((pthread_mutex_t *)(v5 + 392));
      pthread_cond_destroy((pthread_cond_t *)(v5 + 456));
      pthread_mutex_destroy((pthread_mutex_t *)(v5 + 512));
      pthread_mutex_destroy((pthread_mutex_t *)(v5 + 752));
      pthread_cond_destroy((pthread_cond_t *)(v5 + 816));
      ActiveProbing_Uninit(v5);
      free((void *)v5);
      return 2149580802;
    }
  }
  else
  {
    uint64_t v7 = 2149580803;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        MediaQueue_CreateHandle_cold_1();
      }
    }
  }
  return v7;
}

void ActiveProbing_Uninit(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (pthread_mutex_t *)(a1 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  unsigned int v3 = *(void **)(a1 + 592);
  if (v3)
  {
    do
    {
      unsigned int v4 = (void *)v3[196];
      VCMediaControlInfoDispose(v3[198]);
      free(v3);
      unsigned int v3 = v4;
    }
    while (v4);
  }
  *(void *)(a1 + 592) = 0;
  pthread_mutex_unlock(v2);
  if (*(unsigned char *)(a1 + 613) && (int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    unsigned int v6 = *MEMORY[0x1E4F47A50];
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(_DWORD *)(a1 + 616);
        int v9 = *(_DWORD *)(a1 + 620);
        int v10 = 136316162;
        uint64_t v11 = v5;
        __int16 v12 = 2080;
        int v13 = "ActiveProbing_Uninit";
        __int16 v14 = 1024;
        int v15 = 1435;
        __int16 v16 = 1024;
        int v17 = v8;
        __int16 v18 = 1024;
        int v19 = v9;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ^^^^^^ \t\tActiveProbing_Uninit  V/A packets sent: %d/%d", (uint8_t *)&v10, 0x28u);
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      ActiveProbing_Uninit_cold_1();
    }
  }
  Throttling_MediaQueue_Uninit(a1 + 632, v2);
}

uint64_t MediaQueue_CloseHandle()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149580802;
  }
  uint64_t v1 = v0;
  _MediaQueue_Stop(v0);
  CheckOutHandleDebug();
  SetCellularAudioStallState_Internal(v1, 0, 1, v2, v3, v4, v5, v6);
  io_object_t v7 = *(_DWORD *)(v1 + 728);
  if (v7)
  {
    IOObjectRelease(v7);
    *(_DWORD *)(v1 + 72_Block_object_dispose(&STACK[0x250], 8) = 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 312));
  int v8 = *(void **)(v1 + 376);
  if (v8)
  {
    do
    {
      int v9 = (void *)v8[196];
      free(v8);
      int v8 = v9;
    }
    while (v9);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 312));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 392));
  int v10 = *(void **)(v1 + 504);
  if (v10)
  {
    do
    {
      uint64_t v11 = (void *)v10[196];
      VCMediaControlInfoDispose(v10[198]);
      free(v10);
      int v10 = v11;
    }
    while (v11);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 392));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 512));
  __int16 v12 = *(void **)(v1 + 576);
  if (v12)
  {
    do
    {
      int v13 = (void *)v12[2];
      free(v12);
      __int16 v12 = v13;
    }
    while (v13);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 512));
  ActiveProbing_Uninit(v1);
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 24));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 144));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 248));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 312));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 392));
  pthread_cond_destroy((pthread_cond_t *)(v1 + 456));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 512));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 752));
  pthread_cond_destroy((pthread_cond_t *)(v1 + 816));
  free((void *)v1);
  return 0;
}

uint64_t _MediaQueue_Stop(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 752);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 752));
  if (*(_DWORD *)(a1 + 732))
  {
    *(_DWORD *)(a1 + 732) = 0;
    *(_DWORD *)(a1 + 744) = 0;
    pthread_cond_signal((pthread_cond_t *)(a1 + 816));
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = 0;
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 456));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 392));
  uint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t result = FigThreadJoin();
    *(void *)a1 = 0;
  }
  return result;
}

uint64_t SetCellularAudioStallState_Internal(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = (unsigned __int8 *)(a1 + 25552);
  uint64_t v11 = (int *)MEMORY[0x1E4F47A38];
  if ((int)*MEMORY[0x1E4F47A38] >= 5) {
    StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2245, "MediaQueue_ThrottlingSetCellularAudioStallState stalled: %d (old: %d close: %d) pMediaQueue: %p %d/%p ", a6, a7, a8, a2);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  if (*v10 != a2)
  {
    double v19 = micro();
    if (a2)
    {
      *(_OWORD *)(a1 + 2556_Block_object_dispose(&STACK[0x250], 8) = 0u;
      *(double *)(a1 + 25560) = v19;
      *((_DWORD *)v10 + _Block_object_dispose(&STACK[0x250], 8) = 0;
      v10[36] = 1;
      *((_DWORD *)v10 + 10) = 0;
    }
    else
    {
      if (v10[1])
      {
        if (*v10) {
          drainOldPackets(a1, v19 + -1.0, v12, v13, v14, v15, v16, v17, v18);
        }
        dropWaitingPkts(a1, *(void *)(a1 + 25576), v13, v14, v15, v16, v17, v18);
        *(void *)(a1 + 25576) = 0;
        pushOutQueuedAudioPkts(a1, 1, v20, v21, v22, v23, v24, v25);
        v10[1] = 0;
      }
      else
      {
        drainOldPackets(a1, v19, v12, v13, v14, v15, v16, v17, v18);
      }
      *(void *)(a1 + 2556_Block_object_dispose(&STACK[0x250], 8) = 0;
      v10[36] = 0;
      *((_DWORD *)v10 + 10) = 0;
      if (*v11 >= 5) {
        StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2308, " ------------------", v26, v27, v28, v30);
      }
    }
    *int v10 = a2;
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 392));
}

uint64_t MediaQueue_Start()
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v0 = 2149580820;
  uint64_t v1 = (void *)CheckInHandleDebug();
  if (!v1) {
    return 2149580802;
  }
  if (*v1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v2 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        MediaQueue_Start_cold_2(v2);
      }
    }
  }
  else
  {
    uint64_t v3 = (void *)*MEMORY[0x1E4F21EB0];
    keys[0] = *(void **)MEMORY[0x1E4F21EA8];
    keys[1] = v3;
    uint64_t v4 = (void *)*MEMORY[0x1E4F1CFC8];
    values[0] = @"com.apple.avconference.mediaqueue.sendproc";
    values[1] = v4;
    CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v6 = FigThreadCreate();
    if (v5) {
      CFRelease(v5);
    }
    if (v6)
    {
      uint64_t v0 = v6 | 0xA0200000;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          MediaQueue_Start_cold_1();
        }
      }
    }
    else
    {
      uint64_t v0 = 0;
    }
    CheckOutHandleDebug();
  }
  return v0;
}

uint64_t MediaQueueSendProc()
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  uint64_t v1 = (NSObject **)MEMORY[0x1E4F47A50];
  if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *v1;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v37 = v2;
      __int16 v38 = 2080;
      __int16 v39 = "MediaQueueSendProc";
      __int16 v40 = 1024;
      int v41 = 381;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d MediaQueueSendProc Thread start...", buf, 0x1Cu);
    }
  }
  uint64_t v4 = CheckInHandleDebug();
  if (!v4) {
    return -2145386494;
  }
  uint64_t v5 = v4;
  int v6 = (pthread_mutex_t *)(v4 + 392);
  io_object_t v7 = (uint64_t *)(v4 + 504);
  int v8 = (pthread_cond_t *)(v4 + 456);
  int v9 = (pthread_mutex_t *)(v4 + 752);
  while (1)
  {
    pthread_mutex_lock(v6);
    while (1)
    {
      uint64_t v10 = *v7;
      if (*v7) {
        break;
      }
      if (!*(_DWORD *)(v5 + 8)) {
        goto LABEL_28;
      }
      pthread_cond_wait(v8, v6);
    }
    if (!*(_DWORD *)(v5 + 8)) {
      break;
    }
    uint64_t v11 = v7;
    uint64_t v12 = *v7;
    if (*(unsigned char *)(v10 + 1576))
    {
LABEL_12:
      uint64_t v11 = v7;
    }
    else
    {
      while (*(_DWORD *)(v12 + 1516))
      {
        uint64_t v24 = *(void *)(v12 + 1568);
        if (v24)
        {
          uint64_t v11 = (uint64_t *)(v12 + 1568);
          uint64_t v12 = *(void *)(v12 + 1568);
          if (!*(unsigned char *)(v24 + 1576)) {
            continue;
          }
        }
        goto LABEL_12;
      }
      uint64_t v10 = v12;
    }
    *uint64_t v11 = *(void *)(v10 + 1568);
    *(void *)(v10 + 156_Block_object_dispose(&STACK[0x250], 8) = 0;
    --*(_DWORD *)(v5 + 624);
    pthread_mutex_unlock(v6);
    if (*(unsigned char *)(v5 + 613) && (int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      uint64_t v14 = *MEMORY[0x1E4F47A50];
      uint64_t v15 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          double v16 = micro();
          int v17 = *(_DWORD *)(v10 + 1516);
          unsigned int v18 = bswap32(*(_DWORD *)(v10 + 1508));
          unsigned int v19 = bswap32(*(unsigned __int16 *)(v10 + 1506));
          int v20 = *(_DWORD *)v10;
          int v21 = *(_DWORD *)(v5 + 624);
          int v22 = *(_DWORD *)(v5 + 628);
          int v23 = *(unsigned __int8 *)(v10 + 1576);
          *(_DWORD *)CMTime buf = 136317698;
          uint64_t v37 = v13;
          __int16 v38 = 2080;
          __int16 v39 = "MediaQueueSendProc";
          __int16 v40 = 1024;
          int v41 = 446;
          __int16 v42 = 2048;
          double v43 = v16;
          __int16 v44 = 1024;
          int v45 = v17;
          __int16 v46 = 1024;
          unsigned int v47 = v18;
          __int16 v48 = 1024;
          unsigned int v49 = HIWORD(v19);
          __int16 v50 = 1024;
          int v51 = v20;
          __int16 v52 = 1024;
          int v53 = v21;
          __int16 v54 = 1024;
          int v55 = v22;
          __int16 v56 = 1024;
          int v57 = v23;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SENDPROC: ^^^^^^ @%.3f\t\tMP %d  %d/%d/%d  QLen: %d/%d  Probe: %d\n", buf, 0x50u);
        }
      }
      else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        double v25 = micro();
        int v26 = *(_DWORD *)(v10 + 1516);
        unsigned int v27 = bswap32(*(_DWORD *)(v10 + 1508));
        unsigned int v28 = bswap32(*(unsigned __int16 *)(v10 + 1506));
        int v29 = *(_DWORD *)v10;
        int v30 = *(_DWORD *)(v5 + 624);
        int v31 = *(_DWORD *)(v5 + 628);
        int v32 = *(unsigned __int8 *)(v10 + 1576);
        *(_DWORD *)CMTime buf = 136317698;
        uint64_t v37 = v13;
        __int16 v38 = 2080;
        __int16 v39 = "MediaQueueSendProc";
        __int16 v40 = 1024;
        int v41 = 446;
        __int16 v42 = 2048;
        double v43 = v25;
        __int16 v44 = 1024;
        int v45 = v26;
        __int16 v46 = 1024;
        unsigned int v47 = v27;
        __int16 v48 = 1024;
        unsigned int v49 = HIWORD(v28);
        __int16 v50 = 1024;
        int v51 = v29;
        __int16 v52 = 1024;
        int v53 = v30;
        __int16 v54 = 1024;
        int v55 = v31;
        __int16 v56 = 1024;
        int v57 = v32;
        _os_log_debug_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEBUG, " [%s] %s:%d SENDPROC: ^^^^^^ @%.3f\t\tMP %d  %d/%d/%d  QLen: %d/%d  Probe: %d\n", buf, 0x50u);
      }
    }
    pthread_mutex_lock(v9);
    if (*(_DWORD *)(v10 + 1516) <= 1u) {
      MediaQueue_SendPacket(v5, (int *)v10);
    }
    pthread_mutex_unlock(v9);
    MediaQueue_Free(v5, v10);
  }
LABEL_28:
  pthread_mutex_unlock(v6);
  if ((int)VRTraceGetErrorLogLevelForModule() > 6)
  {
    uint64_t v33 = VRTraceErrorLogLevelToCSTR();
    int v34 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v37 = v33;
      __int16 v38 = 2080;
      __int16 v39 = "MediaQueueSendProc";
      __int16 v40 = 1024;
      int v41 = 491;
      _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d MediaQueueSendProc Thread end...", buf, 0x1Cu);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_Stop()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149580802;
  }
  _MediaQueue_Stop(v0);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_Malloc(double a1, uint64_t a2, int a3, double **a4)
{
  uint64_t v7 = 2149580803;
  uint64_t v8 = CheckInHandleDebug();
  if (v8)
  {
    uint64_t v9 = v8;
    if (a3 < 1501)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 312));
      uint64_t v10 = *(double **)(v9 + 376);
      if (v10 && a1 - v10[192] >= 1.0)
      {
        *(double *)(v9 + 376) = v10[196];
      }
      else
      {
        uint64_t v10 = (double *)malloc_type_calloc(1uLL, 0x6A8uLL, 0x10A0040768C7CCBuLL);
        if (!v10)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              MediaQueue_Malloc_cold_2();
            }
          }
          goto LABEL_14;
        }
        ++*(_DWORD *)(v9 + 12);
      }
      uint64_t v7 = 0;
      *a4 = v10;
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          MediaQueue_Malloc_cold_1();
        }
      }
      uint64_t v7 = 1;
    }
LABEL_14:
    pthread_mutex_unlock((pthread_mutex_t *)(v9 + 312));
    CheckOutHandleDebug();
    return v7;
  }
  return 2149580802;
}

uint64_t MediaQueue_Free(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a1 + 8))
    {
      *(void *)(a2 + 156_Block_object_dispose(&STACK[0x250], 8) = 0;
      VCMediaControlInfoDispose(*(void *)(a2 + 1584));
      *(void *)(a2 + 1584) = 0;
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
      if (*(_DWORD *)(a2 + 1544))
      {
        *(void *)(a2 + 1536) = 0;
        uint64_t v4 = (void *)(a1 + 376);
        uint64_t v5 = *(void *)(a1 + 376);
        *(void *)(a2 + 156_Block_object_dispose(&STACK[0x250], 8) = v5;
        if (v5)
        {
LABEL_11:
          *uint64_t v4 = a2;
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 312));
          return 0;
        }
        int v6 = (void *)(a1 + 384);
      }
      else
      {
        uint64_t v4 = (void *)(a1 + 384);
        if (*(void *)(a1 + 376))
        {
          int v6 = (void *)(*v4 + 1568);
        }
        else
        {
          int v6 = (void *)(a1 + 384);
          uint64_t v4 = (void *)(a1 + 376);
        }
      }
      *int v6 = a2;
      goto LABEL_11;
    }
    VCMediaControlInfoDispose(*(void *)(a2 + 1584));
    free((void *)a2);
  }
  return 0;
}

uint64_t MediaQueue_FreePacket(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149580802;
  }
  MediaQueue_Free(v3, a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_AddPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2149580802;
  uint64_t v4 = CheckInHandleDebug();
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = (pthread_mutex_t *)(v4 + 392);
    pthread_mutex_lock((pthread_mutex_t *)(v4 + 392));
    if (!*(_DWORD *)(v5 + 8))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          MediaQueue_AddPacket_cold_1();
        }
      }
      pthread_mutex_unlock(v6);
      uint64_t v3 = 2149580818;
      goto LABEL_37;
    }
    *(void *)(a2 + 156_Block_object_dispose(&STACK[0x250], 8) = 0;
    if (!*(_DWORD *)(a2 + 1516) && *(unsigned char *)(v5 + 25552)) {
      processAudioPktForCellularQueuing_new(v5, a2);
    }
    double v7 = micro();
    v9 = *(_DWORD *)(a2 + 1516) == 1 && (double v8 = *(double *)(v5 + 25536), v8 > 0.0) && v7 - v8 > 0.07;
    *(unsigned char *)(a2 + 1596) = v9;
    int active = Throttling_MediaQueue_AddPacket_ScheduleAndActiveProbing(v5 + 584, v5 + 632, (uint64_t *)(v5 + 504), a2, v7);
    if (active >= 1)
    {
      int v11 = *(_DWORD *)(v5 + 624) + active;
      *(_DWORD *)(v5 + 624) = v11;
      _MediaQueue_CheckActiveProbingQueueLength(v11);
      pthread_cond_signal((pthread_cond_t *)(v5 + 456));
    }
    pthread_mutex_unlock(v6);
    unsigned int v12 = *(_DWORD *)(a2 + 1512);
    unsigned int v13 = *(unsigned __int16 *)(a2 + 1506);
    uint64_t v14 = (pthread_mutex_t *)CheckInHandleDebug();
    if (!v14)
    {
LABEL_36:
      uint64_t v3 = 0;
LABEL_37:
      CheckOutHandleDebug();
      return v3;
    }
    uint64_t v15 = v14;
    unsigned int v16 = bswap32(v12);
    unsigned int v17 = __rev16(v13);
    unsigned int v18 = v14 + 8;
    pthread_mutex_lock(v14 + 8);
    uint64_t sig = v15[9].__sig;
    if (sig)
    {
      while (*(_DWORD *)sig != v16)
      {
        uint64_t sig = *(void *)(sig + 16);
        if (!sig) {
          goto LABEL_16;
        }
      }
      int v27 = *(_DWORD *)(sig + 8);
      int v28 = v17 | (v27 << 16);
      *(_DWORD *)(a2 + 1532) = v28;
      *(_DWORD *)(sig + 4) = v28;
      if (v13 == 0xFFFF)
      {
        *(_DWORD *)(sig + _Block_object_dispose(&STACK[0x250], 8) = v27 + 1;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v29 = VRTraceErrorLogLevelToCSTR();
          int v30 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v31 = *(_DWORD *)(sig + 8);
            int v33 = 136316162;
            uint64_t v34 = v29;
            __int16 v35 = 2080;
            int v36 = "MediaQueue_UpdateSeqNumber";
            __int16 v37 = 1024;
            int v38 = 810;
            __int16 v39 = 1024;
            unsigned int v40 = v16;
            __int16 v41 = 1024;
            int v42 = v31;
            _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP(%08X): seq number wc %d", (uint8_t *)&v33, 0x28u);
          }
        }
      }
    }
    else
    {
LABEL_16:
      int v20 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200406E52F545uLL);
      if (!v20)
      {
        pthread_mutex_unlock(v18);
LABEL_35:
        CheckOutHandleDebug();
        goto LABEL_36;
      }
      int v21 = v20;
      _DWORD *v20 = v16;
      *(_DWORD *)(a2 + 1532) = v17;
      v20[1] = v17;
      if (v13 == 0xFFFF)
      {
        ++v20[2];
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v22 = VRTraceErrorLogLevelToCSTR();
          int v23 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v24 = v21[2];
            int v33 = 136316162;
            uint64_t v34 = v22;
            __int16 v35 = 2080;
            int v36 = "MediaQueue_UpdateSeqNumber";
            __int16 v37 = 1024;
            int v38 = 830;
            __int16 v39 = 1024;
            unsigned int v40 = v16;
            __int16 v41 = 1024;
            int v42 = v24;
            _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP(%08X): seq number wc %d", (uint8_t *)&v33, 0x28u);
          }
        }
      }
      uint64_t v25 = v15[9].__sig;
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = *(void *)(v25 + 16);
        }
        while (v25);
        *(void *)(v26 + 16) = v21;
      }
      else
      {
        v15[9].__uint64_t sig = (uint64_t)v21;
      }
    }
    pthread_mutex_unlock(v18);
    goto LABEL_35;
  }
  return v3;
}

uint64_t processAudioPktForCellularQueuing_new(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 25553;
  if (*(unsigned char *)(a1 + 25588))
  {
    *(unsigned char *)(a1 + 2558_Block_object_dispose(&STACK[0x250], 8) = 0;
    *(_DWORD *)(a1 + 25592) = bswap32(*(_DWORD *)(a2 + 1508));
  }
  if (*(unsigned char *)(a2 + 1528)) {
    int v5 = 48;
  }
  else {
    int v5 = 28;
  }
  *(_DWORD *)(a1 + 25584) += *(_DWORD *)a2 + v5;
  double v6 = micro();
  double v7 = v6 - *(double *)(a1 + 25560);
  if (v7 > 1.0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      unsigned int v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 25560);
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v18 = v11;
        __int16 v19 = 2080;
        int v20 = "processAudioPktForCellularQueuing_new";
        __int16 v21 = 1024;
        int v22 = 2516;
        __int16 v23 = 2048;
        double v24 = v6;
        __int16 v25 = 2048;
        uint64_t v26 = v13;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d processAudioPktForCellularQueuing_new: UNEXPECTED pending flush not acked yet: dNow: %f lastFlush: %f ", buf, 0x30u);
      }
    }
    int v14 = ((double)(8 * *(_DWORD *)(v4 + 31)) / v7);
    *(_DWORD *)(v4 + 31) = 0;
    if ((int)*MEMORY[0x1E4F47A38] >= 5) {
      StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2523, "processAudioPktForCellularQueuing: issuing AUDIO FLUSH @%f cur: TS/sq: %d/%d  rate: %d ", v8, v9, v10, SLOBYTE(v6));
    }
    int v15 = *(_DWORD *)(v4 + 39) + 1;
    *(_WORD *)CMTime buf = 0;
    RTPFlushBaseband_SpecialMQAudioTS(*(void *)(a1 + 936), v15, v14, buf);
    *(_WORD *)(v4 + 43) = *(_WORD *)buf;
    *(double *)(a1 + 25560) = v6;
    *(unsigned char *)uint64_t v4 = 1;
    *(void *)(a1 + 25576) = *(void *)(a1 + 25568);
    *(void *)(a1 + 2556_Block_object_dispose(&STACK[0x250], 8) = 0;
    *(_DWORD *)(v4 + 39) = bswap32(*(_DWORD *)(a2 + 1508));
  }
  return 0;
}

void _MediaQueue_CheckActiveProbingQueueLength(int a1)
{
  if (a1 >= 200 && !(a1 % 0x14u) && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _MediaQueue_CheckActiveProbingQueueLength_cold_1();
    }
  }
}

uint64_t MediaQueue_RexmitPacket(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 2149580802;
  uint64_t v8 = CheckInHandleDebug();
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_DWORD *)(v8 + 8))
    {
      uint64_t v10 = (pthread_mutex_t *)CheckInHandleDebug();
      if (!v10) {
        goto LABEL_53;
      }
      uint64_t v11 = v10;
      unsigned int v12 = v10 + 8;
      pthread_mutex_lock(v10 + 8);
      uint64_t sig = v11[9].__sig;
      if (sig)
      {
        while (*(_DWORD *)sig != a2)
        {
          uint64_t sig = *(void *)(sig + 16);
          if (!sig) {
            goto LABEL_7;
          }
        }
        int v15 = 0;
        uint64_t v7 = 0;
        int v14 = *(_DWORD *)(sig + 4);
      }
      else
      {
LABEL_7:
        int v14 = 0;
        uint64_t v7 = 2149580822;
        int v15 = 1;
      }
      pthread_mutex_unlock(v12);
      CheckOutHandleDebug();
      if (!v15)
      {
        int v16 = a3 - (unsigned __int16)v14 + v14;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v34 = VRTraceErrorLogLevelToCSTR();
          unsigned int v17 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v36 = v34;
            __int16 v37 = 2080;
            int v38 = "MediaQueue_RexmitPacket";
            __int16 v39 = 1024;
            int v40 = 1004;
            __int16 v41 = 1024;
            int v42 = v14;
            __int16 v43 = 1024;
            int v44 = a3;
            __int16 v45 = 1024;
            int v46 = a3 - (unsigned __int16)v14 + v14;
            _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d MQ_Rexmit iLastSN(%08X) wSN(%04X) iSN(%08X)", buf, 0x2Eu);
          }
        }
        pthread_mutex_lock((pthread_mutex_t *)(v9 + 312));
        uint64_t v18 = *(void *)(v9 + 376);
        if (v18)
        {
          unsigned int v19 = bswap32(*(_DWORD *)(v18 + 1512));
          int v20 = *(_DWORD *)(v18 + 1532);
          BOOL v21 = v19 == a2;
          if (v16 == v20 && v19 == a2)
          {
            uint64_t v23 = 0;
            uint64_t v26 = (void *)(v9 + 376);
LABEL_39:
            if (*(void *)(v9 + 384) == v18) {
              *(void *)(v9 + 384) = v23;
            }
            *uint64_t v26 = *(void *)(v18 + 1568);
            *a4 = *(_DWORD *)v18;
            *(_DWORD *)(v18 + 1544) = 1;
            *(void *)(v18 + 156_Block_object_dispose(&STACK[0x250], 8) = 0;
            pthread_mutex_unlock((pthread_mutex_t *)(v9 + 312));
            pthread_mutex_lock((pthread_mutex_t *)(v9 + 392));
            uint64_t v29 = (void *)(v9 + 504);
            uint64_t v30 = *(void *)(v9 + 504);
            if (v30)
            {
              double v31 = *(double *)(v18 + 1536);
              if (*(double *)(v30 + 1536) > v31)
              {
LABEL_46:
                *uint64_t v29 = v18;
                *(void *)(v18 + 156_Block_object_dispose(&STACK[0x250], 8) = v30;
              }
              else
              {
                while (1)
                {
                  uint64_t v32 = v30;
                  uint64_t v30 = *(void *)(v30 + 1568);
                  if (!v30) {
                    break;
                  }
                  if (*(double *)(v30 + 1536) > v31)
                  {
                    uint64_t v29 = (void *)(v32 + 1568);
                    goto LABEL_46;
                  }
                }
              }
            }
            else
            {
              *uint64_t v29 = v18;
            }
            pthread_mutex_unlock((pthread_mutex_t *)(v9 + 392));
            goto LABEL_49;
          }
          while (1)
          {
            uint64_t v23 = v18;
            if (v16 < v20 && v21) {
              break;
            }
            uint64_t v18 = *(void *)(v18 + 1568);
            if (!v18) {
              break;
            }
            unsigned int v24 = bswap32(*(_DWORD *)(v18 + 1512));
            int v20 = *(_DWORD *)(v18 + 1532);
            BOOL v21 = v24 == a2;
            if (v16 == v20 && v24 == a2)
            {
              uint64_t v26 = (void *)(v23 + 1568);
              goto LABEL_39;
            }
          }
        }
        pthread_mutex_unlock((pthread_mutex_t *)(v9 + 312));
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v27 = VRTraceErrorLogLevelToCSTR();
          int v28 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v36 = v27;
            __int16 v37 = 2080;
            int v38 = "MediaQueue_RexmitPacket";
            __int16 v39 = 1024;
            int v40 = 1049;
            __int16 v41 = 1024;
            int v42 = 1049;
            __int16 v43 = 1024;
            int v44 = a3;
            __int16 v45 = 1024;
            int v46 = v16;
            _os_log_error_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: MQ_Rexmit: missing packet wSN(%04X) iSN(%08X)\n", buf, 0x2Eu);
          }
        }
      }
      else
      {
LABEL_53:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            MediaQueue_RexmitPacket_cold_2();
          }
        }
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          MediaQueue_RexmitPacket_cold_1();
        }
      }
      uint64_t v7 = 18;
    }
LABEL_49:
    CheckOutHandleDebug();
  }
  return v7;
}

uint64_t MediaQueue_SetRedundantAudio(uint64_t a1, int a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149580802;
  }
  uint64_t v6 = v5;
  if (*(unsigned __int8 *)(v5 + 864) != a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(unsigned __int8 *)(v6 + 864);
        int v14 = 136316162;
        uint64_t v15 = v7;
        __int16 v16 = 2080;
        unsigned int v17 = "MediaQueue_SetRedundantAudio";
        __int16 v18 = 1024;
        int v19 = 1067;
        __int16 v20 = 1024;
        int v21 = v9;
        __int16 v22 = 1024;
        int v23 = a2;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d MediaQueue_SetRedundantAudio fRedundantAudio (%d->%d)", (uint8_t *)&v14, 0x28u);
      }
    }
    *(unsigned char *)(v6 + 864) = a2;
  }
  if (*(unsigned __int8 *)(v6 + 865) != a3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(unsigned __int8 *)(v6 + 865);
        int v14 = 136316162;
        uint64_t v15 = v10;
        __int16 v16 = 2080;
        unsigned int v17 = "MediaQueue_SetRedundantAudio";
        __int16 v18 = 1024;
        int v19 = 1073;
        __int16 v20 = 1024;
        int v21 = v12;
        __int16 v22 = 1024;
        int v23 = a3;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d MediaQueue_SetRedundantAudio isRedEnabled (%d->%d)", (uint8_t *)&v14, 0x28u);
      }
    }
    *(unsigned char *)(v6 + 865) = a3;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_SetAudioFraction(double a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2149580802;
  }
  uint64_t v3 = (double *)v2;
  uint64_t v4 = (pthread_mutex_t *)(v2 + 752);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 752));
  if (v3[112] != a1)
  {
    double v5 = micro();
    if (a1 < 1.0 && v3[112] == 1.0)
    {
      v3[114] = v5;
    }
    else if (a1 == 1.0 && v3[112] < 1.0)
    {
      v3[113] = v3[113] + v5 - v3[114];
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *((void *)v3 + 112);
        int v10 = 136316162;
        uint64_t v11 = v7;
        __int16 v12 = 2080;
        uint64_t v13 = "MediaQueue_SetAudioFraction";
        __int16 v14 = 1024;
        int v15 = 1102;
        __int16 v16 = 2048;
        uint64_t v17 = v9;
        __int16 v18 = 2048;
        double v19 = a1;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d MediaQueue_SetdAudioFraction (%.2f->%.2f)", (uint8_t *)&v10, 0x30u);
      }
    }
    v3[112] = a1;
  }
  pthread_mutex_unlock(v4);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_SetAudioFECLevel(double a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2149580802;
  }
  uint64_t v3 = v2;
  if (*(double *)(v2 + 872) != a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      double v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(v3 + 872);
        int v8 = 136316162;
        uint64_t v9 = v4;
        __int16 v10 = 2080;
        uint64_t v11 = "MediaQueue_SetAudioFECLevel";
        __int16 v12 = 1024;
        int v13 = 1122;
        __int16 v14 = 2048;
        uint64_t v15 = v6;
        __int16 v16 = 2048;
        double v17 = a1;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d MediaQueue_SetAudioFECLevel (%.3f->%.3f)", (uint8_t *)&v8, 0x30u);
      }
    }
    *(double *)(v3 + 872) = a1;
    *(void *)(v3 + 920) = 0;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_GetTimeRateChanged(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149580802;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (pthread_mutex_t *)(v5 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 24));
  *a2 = *(void *)(v6 + 88);
  *a3 = *(_DWORD *)(v6 + 96);
  pthread_mutex_unlock(v7);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_GetTimeRefreshFrame(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149580802;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (pthread_mutex_t *)(v5 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 24));
  if (a2) {
    *a2 = *(void *)(v6 + 112);
  }
  if (a3) {
    *a3 = *(_DWORD *)(v6 + 120);
  }
  pthread_mutex_unlock(v7);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_UpdateAudioOnlyRateChange(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149580802;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (pthread_mutex_t *)(v3 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 24));
  if (*(_DWORD *)(v4 + 100) < a2)
  {
    *(_DWORD *)(v4 + 16) = 1;
    *(_DWORD *)(v4 + 100) = a2;
  }
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_RecordNewPacketWithSize(uint64_t a1, int a2, int a3, _DWORD *a4, unsigned int *a5)
{
  uint64_t v9 = CheckInHandleDebug();
  if (!v9) {
    return 2149580802;
  }
  uint64_t v10 = v9;
  if (a3) {
    uint64_t v11 = 224;
  }
  else {
    uint64_t v11 = 212;
  }
  if (a3) {
    uint64_t v12 = 232;
  }
  else {
    uint64_t v12 = 216;
  }
  int v13 = (pthread_mutex_t *)(v9 + 248);
  pthread_mutex_lock((pthread_mutex_t *)(v9 + 248));
  if (*(unsigned char *)(v10 + 208))
  {
    int v14 = *(_DWORD *)(v10 + v11) + 1;
    *(_DWORD *)(v10 + v11) = v14;
    unint64_t v15 = *(void *)(v10 + v12);
    if (a2 <= 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  int v14 = *(_DWORD *)(v10 + v11);
  unint64_t v15 = *(void *)(v10 + v12);
  if (a2 >= 1)
  {
    *(_DWORD *)(v10 + v11) = ++v14;
LABEL_14:
    v15 += a2;
    *(void *)(v10 + v12) = v15;
  }
LABEL_15:
  pthread_mutex_unlock(v13);
  if (a4) {
    *a4 = (unsigned __int16)v14;
  }
  if (a5) {
    *a5 = ((((v15 >> 3) * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 1) & 0xFFF8;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_FindPacketInTxHistory(uint64_t a1, unsigned __int16 a2, int a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = CheckInHandleDebug();
  if (!v18) {
    return 2149580802;
  }
  uint64_t v19 = v18;
  BOOL IsLossStatsEnabled = VCMediaControlInfo_IsLossStatsEnabled(*(unsigned __int8 *)(v18 + 25528));
  if (*(unsigned char *)(v19 + 864))
  {
    double v21 = 1.0;
    if (!*(unsigned char *)(v19 + 865)) {
      double v21 = 5.0;
    }
  }
  else
  {
    double v21 = 5.0;
  }
  v24[0] = a2;
  v24[1] = a3;
  v24[2] = a8;
  v24[3] = a5;
  unint64_t v25 = a4 / 0x3E8;
  uint64_t v26 = a7;
  uint64_t v27 = a6;
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  uint64_t v30 = a9;
  v23[0] = v19 + 952;
  v23[1] = *(void *)(v19 + 944);
  VCMediaQueueUtil_FindPacketInTxHistory((unsigned __int16 *)v24, v23, (pthread_mutex_t *)(v19 + 144), IsLossStatsEnabled, v21, 5.0);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_CleanupTxHistory()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149580802;
  }
  uint64_t v1 = v0;
  uint64_t v2 = (pthread_mutex_t *)(v0 + 144);
  pthread_mutex_lock((pthread_mutex_t *)(v0 + 144));
  bzero((void *)(v1 + 952), 0x6000uLL);
  *(void *)(v1 + 944) = 0;
  pthread_mutex_unlock(v2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_SetPLCalc(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149580802;
  }
  *(unsigned char *)(v3 + 20_Block_object_dispose(&STACK[0x250], 8) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_SetActiveProbingLog(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149580802;
  }
  *(unsigned char *)(v3 + 613) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_SetAFRCSendMode(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149580802;
  }
  *(unsigned char *)(v3 + 612) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_ResetRefreshFrameState()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149580802;
  }
  uint64_t v1 = v0;
  uint64_t v2 = (pthread_mutex_t *)(v0 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v0 + 24));
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0;
  pthread_mutex_unlock(v2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_SetRTPHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149580802;
  }
  *(void *)(v3 + 936) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t ActiveProbing_ProcessIncomingPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 29) && (int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    uint64_t v5 = *MEMORY[0x1E4F47A50];
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a2 + 1516);
        unsigned int v8 = bswap32(*(_DWORD *)(a2 + 1508));
        unsigned int v9 = bswap32(*(unsigned __int16 *)(a2 + 1506));
        unsigned int v10 = *(_DWORD *)a2;
        int v61 = 136316674;
        uint64_t v62 = v4;
        __int16 v63 = 2080;
        double v64 = "ActiveProbing_ProcessIncomingPacket";
        __int16 v65 = 1024;
        int v66 = 1469;
        __int16 v67 = 1024;
        unsigned int v68 = v7;
        __int16 v69 = 1024;
        unsigned int v70 = v8;
        __int16 v71 = 1024;
        unsigned int v72 = HIWORD(v9);
        __int16 v73 = 1024;
        unsigned int v74 = v10;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AddPacket: ^^^^^^\t\t incoming %d %d/%d/%d ", (uint8_t *)&v61, 0x34u);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      ActiveProbing_ProcessIncomingPacket_cold_3();
    }
  }
  if (!*(unsigned char *)(a1 + 16) && *(_DWORD *)(a2 + 1516) == 1)
  {
    *(_DWORD *)(a1 + 20) = bswap32(*(_DWORD *)(a2 + 1508)) - 1;
    *(unsigned char *)(a1 + 16) = 1;
  }
  if (*(unsigned char *)(a2 + 1576))
  {
    unsigned int v11 = *(unsigned __int8 *)(a2 + 1578);
    unsigned int v12 = bswap32(*(_DWORD *)(a2 + 1508));
    int v13 = *(_DWORD *)(a1 + 20);
    if (*(unsigned char *)(a1 + 29) && (int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      unint64_t v15 = *MEMORY[0x1E4F47A50];
      __int16 v16 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v17 = *(_DWORD *)(a2 + 1508);
          unsigned int v18 = bswap32(*(unsigned __int16 *)(a2 + 1506));
          int v61 = 136316674;
          uint64_t v62 = v14;
          __int16 v63 = 2080;
          double v64 = "ActiveProbing_ProcessIncomingPacket";
          __int16 v65 = 1024;
          int v66 = 1526;
          __int16 v67 = 1024;
          unsigned int v68 = bswap32(v17);
          __int16 v69 = 1024;
          unsigned int v70 = HIWORD(v18);
          __int16 v71 = 1024;
          unsigned int v72 = v11;
          __int16 v73 = 1024;
          unsigned int v74 = v12 == v13;
          _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AddPacket: ^^^^^^\t\t ProbeSeq %d/%d bNewProbeSeq %d bVideoPacketPartOfActiveProbeSeq %d ", (uint8_t *)&v61, 0x34u);
          if (!v11)
          {
LABEL_49:
            if (v12 == v13)
            {
              ActiveProbing_UpdateRTPProbeSeqId(a2, *(_DWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 29));
              if (*(unsigned char *)(a1 + 29) && (int)VRTraceGetErrorLogLevelForModule() >= 8)
              {
                uint64_t v47 = VRTraceErrorLogLevelToCSTR();
                __int16 v48 = *MEMORY[0x1E4F47A50];
                unsigned int v49 = *MEMORY[0x1E4F47A50];
                if (*MEMORY[0x1E4F47A40])
                {
                  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                  {
                    int v61 = 136315650;
                    uint64_t v62 = v47;
                    __int16 v63 = 2080;
                    double v64 = "ActiveProbing_ProcessIncomingPacket";
                    __int16 v65 = 1024;
                    int v66 = 1641;
                    _os_log_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AddPacket: ^^^^^^\t\t MP belonging to an active Probe. Going to the main list", (uint8_t *)&v61, 0x1Cu);
                  }
                }
                else if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
                {
                  ActiveProbing_ProcessIncomingPacket_cold_2(v47);
                }
              }
              return 1;
            }
            goto LABEL_55;
          }
          goto LABEL_42;
        }
      }
      else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v45 = *(_DWORD *)(a2 + 1508);
        unsigned int v46 = bswap32(*(unsigned __int16 *)(a2 + 1506));
        int v61 = 136316674;
        uint64_t v62 = v14;
        __int16 v63 = 2080;
        double v64 = "ActiveProbing_ProcessIncomingPacket";
        __int16 v65 = 1024;
        int v66 = 1526;
        __int16 v67 = 1024;
        unsigned int v68 = bswap32(v45);
        __int16 v69 = 1024;
        unsigned int v70 = HIWORD(v46);
        __int16 v71 = 1024;
        unsigned int v72 = v11;
        __int16 v73 = 1024;
        unsigned int v74 = v12 == v13;
        _os_log_debug_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEBUG, " [%s] %s:%d AddPacket: ^^^^^^\t\t ProbeSeq %d/%d bNewProbeSeq %d bVideoPacketPartOfActiveProbeSeq %d ", (uint8_t *)&v61, 0x34u);
        if (!v11) {
          goto LABEL_49;
        }
        goto LABEL_42;
      }
    }
    if (!v11) {
      goto LABEL_49;
    }
LABEL_42:
    if (!*(unsigned char *)a1) {
      *(unsigned char *)a1 = 1;
    }
    goto LABEL_55;
  }
  if (!*(unsigned char *)a1) {
    return 1;
  }
  if (!*(_DWORD *)(a2 + 1516))
  {
    uint64_t v23 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = bswap32(*(_DWORD *)(a2 + 1508));
    *(_DWORD *)(a1 + 20) = bswap32(*(_DWORD *)(v23 + 1508));
    int v24 = 1;
    uint64_t v25 = v23;
    while (1)
    {
      uint64_t v26 = v25;
      if (*(unsigned char *)(v25 + 1576)) {
        ActiveProbing_UpdateRTPProbeSeqId(v25, *(_DWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 29));
      }
      uint64_t v25 = *(void *)(v26 + 1568);
      if (!v25) {
        break;
      }
      ++v24;
      if (bswap32(*(_DWORD *)(v25 + 1508)) != *(_DWORD *)(a1 + 20))
      {
        if (*(unsigned char *)(v25 + 1576))
        {
LABEL_31:
          --v24;
          *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = v25;
          goto LABEL_35;
        }
        while (1)
        {
          uint64_t v26 = v25;
          uint64_t v25 = *(void *)(v25 + 1568);
          if (!v25) {
            goto LABEL_34;
          }
          ++v24;
          if (*(unsigned char *)(v25 + 1576)) {
            goto LABEL_31;
          }
        }
      }
    }
LABEL_34:
    *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = 0;
    *(unsigned char *)a1 = 0;
LABEL_35:
    *(_DWORD *)(a1 + 44) -= v24;
    *(void *)(a2 + 156_Block_object_dispose(&STACK[0x250], 8) = v23;
    uint64_t v27 = (v24 + 1);
    *(void *)(v26 + 156_Block_object_dispose(&STACK[0x250], 8) = 0;
    *(unsigned char *)(a2 + 1576) = 1;
    if (*(unsigned char *)(a1 + 29) && (int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      uint64_t v29 = *MEMORY[0x1E4F47A50];
      uint64_t v30 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v31 = *(_DWORD *)(a1 + 24);
          unsigned int v32 = bswap32(*(_DWORD *)(v23 + 1508));
          unsigned int v33 = bswap32(*(unsigned __int16 *)(v23 + 1506));
          int v34 = *(unsigned __int8 *)(v23 + 1576);
          unsigned int v35 = bswap32(*(_DWORD *)(v26 + 1508));
          unsigned int v36 = bswap32(*(unsigned __int16 *)(v26 + 1506));
          int v37 = *(unsigned __int8 *)(v26 + 1576);
          int v61 = 136317698;
          uint64_t v62 = v28;
          __int16 v63 = 2080;
          double v64 = "ActiveProbing_ProcessIncomingPacket";
          __int16 v65 = 1024;
          int v66 = 1795;
          __int16 v67 = 1024;
          unsigned int v68 = v31;
          __int16 v69 = 1024;
          unsigned int v70 = v27;
          __int16 v71 = 1024;
          unsigned int v72 = v32;
          __int16 v73 = 1024;
          unsigned int v74 = HIWORD(v33);
          __int16 v75 = 1024;
          int v76 = v34;
          __int16 v77 = 1024;
          unsigned int v78 = v35;
          __int16 v79 = 1024;
          unsigned int v80 = HIWORD(v36);
          __int16 v81 = 1024;
          int v82 = v37;
          _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AddPacket: ^^^^^^\t\t Audio %d CAME. KICKING ProbeSeq (%d) from %d/%d/%d to %d/%d/%d ", (uint8_t *)&v61, 0x4Cu);
        }
      }
      else if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v38 = *(_DWORD *)(a1 + 24);
        unsigned int v39 = bswap32(*(_DWORD *)(v23 + 1508));
        unsigned int v40 = bswap32(*(unsigned __int16 *)(v23 + 1506));
        int v41 = *(unsigned __int8 *)(v23 + 1576);
        unsigned int v42 = bswap32(*(_DWORD *)(v26 + 1508));
        unsigned int v43 = bswap32(*(unsigned __int16 *)(v26 + 1506));
        int v44 = *(unsigned __int8 *)(v26 + 1576);
        int v61 = 136317698;
        uint64_t v62 = v28;
        __int16 v63 = 2080;
        double v64 = "ActiveProbing_ProcessIncomingPacket";
        __int16 v65 = 1024;
        int v66 = 1795;
        __int16 v67 = 1024;
        unsigned int v68 = v38;
        __int16 v69 = 1024;
        unsigned int v70 = v27;
        __int16 v71 = 1024;
        unsigned int v72 = v39;
        __int16 v73 = 1024;
        unsigned int v74 = HIWORD(v40);
        __int16 v75 = 1024;
        int v76 = v41;
        __int16 v77 = 1024;
        unsigned int v78 = v42;
        __int16 v79 = 1024;
        unsigned int v80 = HIWORD(v43);
        __int16 v81 = 1024;
        int v82 = v44;
        _os_log_debug_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEBUG, " [%s] %s:%d AddPacket: ^^^^^^\t\t Audio %d CAME. KICKING ProbeSeq (%d) from %d/%d/%d to %d/%d/%d ", (uint8_t *)&v61, 0x4Cu);
      }
    }
    return v27;
  }
  if (*(unsigned char *)(a1 + 29) && (int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v19 = VRTraceErrorLogLevelToCSTR();
    uint64_t v20 = *MEMORY[0x1E4F47A50];
    double v21 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v22 = bswap32(*(_DWORD *)(a2 + 1508));
        int v61 = 136315906;
        uint64_t v62 = v19;
        __int16 v63 = 2080;
        double v64 = "ActiveProbing_ProcessIncomingPacket";
        __int16 v65 = 1024;
        int v66 = 1809;
        __int16 v67 = 1024;
        unsigned int v68 = v22;
        _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AddPacket: ^^^^^^\t\t Regular frame %d is blocked in the waiting list...", (uint8_t *)&v61, 0x22u);
      }
    }
    else if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      ActiveProbing_ProcessIncomingPacket_cold_1();
    }
  }
LABEL_55:
  __int16 v50 = (uint64_t *)(a1 + 8);
  uint64_t v51 = *(void *)(a1 + 8);
  if (v51)
  {
    do
    {
      uint64_t v52 = v51;
      uint64_t v51 = *(void *)(v51 + 1568);
    }
    while (v51);
    __int16 v50 = (uint64_t *)(v52 + 1568);
  }
  uint64_t *v50 = a2;
  ++*(_DWORD *)(a1 + 44);
  if (!*(unsigned char *)(a1 + 29) || (int)VRTraceGetErrorLogLevelForModule() < 8) {
    return 0;
  }
  uint64_t v53 = VRTraceErrorLogLevelToCSTR();
  __int16 v54 = *MEMORY[0x1E4F47A50];
  int v55 = *MEMORY[0x1E4F47A50];
  if (!*MEMORY[0x1E4F47A40])
  {
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v59 = bswap32(*(_DWORD *)(a2 + 1508));
      unsigned int v60 = *(unsigned __int8 *)(a2 + 1576);
      int v61 = 136316162;
      uint64_t v62 = v53;
      __int16 v63 = 2080;
      double v64 = "ActiveProbing_ProcessIncomingPacket";
      __int16 v65 = 1024;
      int v66 = 1837;
      __int16 v67 = 1024;
      unsigned int v68 = v59;
      __int16 v69 = 1024;
      unsigned int v70 = v60;
      _os_log_debug_impl(&dword_1E1EA4000, v54, OS_LOG_TYPE_DEBUG, " [%s] %s:%d AddPacket: ^^^^^^\t\t ProbeSeq/Regular frame %d (%d) waiting for the next Audio", (uint8_t *)&v61, 0x28u);
    }
    return 0;
  }
  uint64_t v27 = 0;
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v56 = bswap32(*(_DWORD *)(a2 + 1508));
    unsigned int v57 = *(unsigned __int8 *)(a2 + 1576);
    int v61 = 136316162;
    uint64_t v62 = v53;
    __int16 v63 = 2080;
    double v64 = "ActiveProbing_ProcessIncomingPacket";
    __int16 v65 = 1024;
    int v66 = 1837;
    __int16 v67 = 1024;
    unsigned int v68 = v56;
    __int16 v69 = 1024;
    unsigned int v70 = v57;
    _os_log_impl(&dword_1E1EA4000, v54, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AddPacket: ^^^^^^\t\t ProbeSeq/Regular frame %d (%d) waiting for the next Audio", (uint8_t *)&v61, 0x28u);
    return 0;
  }
  return v27;
}

void ActiveProbing_UpdateRTPProbeSeqId(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 1584);
  if (v4)
  {
    unsigned int v14 = bswap32(a2);
    VCMediaControlInfoSetInfo(v4, (const char *)8, (uint64_t)&v14, 4);
    if (a3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        unsigned int v8 = *MEMORY[0x1E4F47A50];
        unsigned int v9 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v10 = bswap32(*(_DWORD *)(a1 + 1508));
            unsigned int v11 = bswap32(*(unsigned __int16 *)(a1 + 1506));
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v16 = v7;
            __int16 v17 = 2080;
            unsigned int v18 = "ActiveProbing_UpdateRTPProbeSeqId";
            __int16 v19 = 1024;
            int v20 = 1453;
            __int16 v21 = 1024;
            unsigned int v22 = v10;
            __int16 v23 = 1024;
            unsigned int v24 = HIWORD(v11);
            __int16 v25 = 1024;
            unsigned int v26 = a2;
            _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ^^^^ SeqId for VMP TS/seq %d/%d to %d", buf, 0x2Eu);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v12 = bswap32(*(_DWORD *)(a1 + 1508));
          unsigned int v13 = bswap32(*(unsigned __int16 *)(a1 + 1506));
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v16 = v7;
          __int16 v17 = 2080;
          unsigned int v18 = "ActiveProbing_UpdateRTPProbeSeqId";
          __int16 v19 = 1024;
          int v20 = 1453;
          __int16 v21 = 1024;
          unsigned int v22 = v12;
          __int16 v23 = 1024;
          unsigned int v24 = HIWORD(v13);
          __int16 v25 = 1024;
          unsigned int v26 = a2;
          _os_log_debug_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ^^^^ SeqId for VMP TS/seq %d/%d to %d", buf, 0x2Eu);
        }
      }
    }
  }
}

uint64_t ActiveProbing_FlushPendingPackets(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      __int16 v17 = *MEMORY[0x1E4F47A50];
      uint64_t v5 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return v5;
      }
      int v19 = 136315650;
      uint64_t v20 = v16;
      __int16 v21 = 2080;
      unsigned int v22 = "ActiveProbing_FlushPendingPackets";
      __int16 v23 = 1024;
      int v24 = 1904;
      _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d \t\t *** ActiveProbing_FlushPendingPackets: flushed 0 pkts; alraedy empty",
        (uint8_t *)&v19,
        0x1Cu);
    }
    return 0;
  }
  LODWORD(v5) = 0;
  int v6 = *(_DWORD *)(a1 + 20);
  int v7 = *(_DWORD *)(a1 + 24);
  do
  {
    uint64_t v8 = v2;
    uint64_t v5 = (v5 + 1);
    uint64_t v2 = *(void *)(v2 + 1568);
  }
  while (v2);
  *(_DWORD *)(a1 + 20) = bswap32(*(_DWORD *)(v8 + 1508));
  *(_DWORD *)(a1 + 24) = v7 - 1;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    unsigned int v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(_DWORD *)(a1 + 20);
      int v11 = *(_DWORD *)(a1 + 24);
      int v19 = 136316930;
      uint64_t v20 = v9;
      __int16 v21 = 2080;
      unsigned int v22 = "ActiveProbing_FlushPendingPackets";
      __int16 v23 = 1024;
      int v24 = 1888;
      __int16 v25 = 1024;
      int v26 = v5;
      __int16 v27 = 1024;
      int v28 = v7;
      __int16 v29 = 1024;
      int v30 = v11;
      __int16 v31 = 1024;
      int v32 = v6;
      __int16 v33 = 1024;
      int v34 = v12;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d \t\t *** ActiveProbing_FlushPendingPackets: flushed %d pkts; ProbeSeqId: %d->%d, VideoFrameTS: %d->%d ",
        (uint8_t *)&v19,
        0x3Au);
    }
  }
  if (*(_DWORD *)(a1 + 44) != v5 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    unsigned int v14 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(_DWORD *)(a1 + 44);
      int v19 = 136316162;
      uint64_t v20 = v13;
      __int16 v21 = 2080;
      unsigned int v22 = "ActiveProbing_FlushPendingPackets";
      __int16 v23 = 1024;
      int v24 = 1895;
      __int16 v25 = 1024;
      int v26 = v5;
      __int16 v27 = 1024;
      int v28 = v15;
      _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d \t\t *** ActiveProbing_FlushPendingPackets: Unexpected: flushed %d pkts vs. %d queue length ", (uint8_t *)&v19, 0x28u);
    }
  }
  *a2 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = 0;
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 44) = 0;
  return v5;
}

uint64_t MediaQueue_SetThrottlingAudioInterval(double a1)
{
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2149580802;
  }
  Throttling_MediaQueue_SetAudioInterval(v2 + 632, a1);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_SetThrottlingIsIPv6(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149580802;
  }
  Throttling_MediaQueue_SetIsIPv6(v3 + 632, a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_RetrieveAudioVideoRates(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v9 = CheckInHandleDebug();
  if (!v9) {
    return 2149580802;
  }
  uint64_t v10 = *(void *)(v9 + 720);
  if (v10)
  {
    double v11 = micro();
    pthread_mutex_lock((pthread_mutex_t *)(v10 + 160));
    double v12 = *(double *)(v10 + 136);
    int v13 = *(_DWORD *)(v10 + 148);
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 160));
    double v14 = v11 - v12;
    double v15 = 0.0;
    double v16 = 0.0;
    if (v14 <= 0.5) {
      double v16 = (double)(8 * v13) / (v14 + 0.484375);
    }
    *a2 = v16;
    pthread_mutex_lock((pthread_mutex_t *)(v10 + 384));
    double v17 = *(double *)(v10 + 360);
    int v18 = *(_DWORD *)(v10 + 372);
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 384));
    if (v11 - v17 <= 0.5) {
      double v15 = (double)(8 * v18) / (v11 - v17 + 0.484375);
    }
    *a3 = v15;
    pthread_mutex_lock((pthread_mutex_t *)(v10 + 608));
    double v19 = *(double *)(v10 + 584);
    int v20 = *(_DWORD *)(v10 + 596);
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 608));
    double v21 = v11 - v19;
    double v22 = 0.0;
    double v23 = 0.0;
    if (v21 <= 0.5) {
      double v23 = (double)(8 * v20) / (v21 + 0.484375);
    }
    *a4 = v23;
    pthread_mutex_lock((pthread_mutex_t *)(v10 + 832));
    double v24 = *(double *)(v10 + 808);
    int v25 = *(_DWORD *)(v10 + 820);
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 832));
    if (v11 - v24 <= 0.5) {
      double v22 = (double)(8 * v25) / (v11 - v24 + 0.484375);
    }
    *a5 = v22;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_ThrottlingFlushThrottlingQueue()
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149580802;
  }
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 584;
  uint64_t v3 = (pthread_mutex_t *)(v0 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(v0 + 392));
  int v37 = *(_DWORD *)(v1 + 628);
  int v38 = *(_DWORD *)(v1 + 624);
  uint64_t v4 = (uint64_t *)(v1 + 504);
  int v36 = *(_DWORD *)(v1 + 664);
  int v5 = Throttling_MediaQueue_FlushThrottlingQueue(v2, v1 + 632, (uint64_t *)(v1 + 504));
  uint64_t v6 = *(void *)(v1 + 504);
  *(void *)(v1 + 504) = 0;
  uint64_t v41 = 0;
  if (v6)
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = &v41;
    do
    {
      uint64_t v10 = *(void *)(v6 + 1568);
      *(void *)(v6 + 156_Block_object_dispose(&STACK[0x250], 8) = 0;
      if (*(_DWORD *)(v6 + 1516) == 1)
      {
        *uint64_t v9 = v6;
        ++v8;
        uint64_t v9 = (uint64_t *)(v6 + 1568);
      }
      else
      {
        *uint64_t v4 = v6;
        ++v7;
        uint64_t v4 = (uint64_t *)(v6 + 1568);
      }
      uint64_t v6 = v10;
    }
    while (v10);
  }
  else
  {
    int v8 = 0;
    int v7 = 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    int v13 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "FlushVideoPktsFromPktList";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2066;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v7;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v8;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d \t\t *** MediaQueue_FlushVideoPktsFromPktList  iPktsInMainList/iPktsToBeFlushed %d/%d pkts ", buf, 0x28u);
    }
  }
  *(_DWORD *)(v1 + 624) = v7;
  uint64_t v14 = v41;
  if (v5 >= 1 && !v41 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      MediaQueue_ThrottlingFlushThrottlingQueue_cold_1();
    }
  }
  int v35 = *(_DWORD *)(v1 + 624);
  int v39 = *(_DWORD *)(v1 + 664);
  int v40 = *(_DWORD *)(v1 + 628);
  pthread_mutex_unlock(v3);
  if (v14)
  {
    unint64_t v15 = 0;
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v84 = v16;
    long long v85 = v16;
    long long v82 = v16;
    long long v83 = v16;
    long long v80 = v16;
    long long v81 = v16;
    long long v78 = v16;
    long long v79 = v16;
    long long v76 = v16;
    long long v77 = v16;
    long long v74 = v16;
    long long v75 = v16;
    long long v72 = v16;
    long long v73 = v16;
    long long v70 = v16;
    long long v71 = v16;
    long long v68 = v16;
    long long v69 = v16;
    long long v66 = v16;
    long long v67 = v16;
    long long v64 = v16;
    long long v65 = v16;
    long long v62 = v16;
    long long v63 = v16;
    long long v60 = v16;
    long long v61 = v16;
    long long v58 = v16;
    long long v59 = v16;
    double v17 = buf;
    *(_OWORD *)&buf[32] = v16;
    long long v57 = v16;
    *(_OWORD *)CMTime buf = v16;
    *(_OWORD *)&buf[16] = v16;
    do
    {
      uint64_t v18 = v14;
      uint64_t v14 = *(void *)(v14 + 1568);
      if (*(_DWORD *)(v18 + 1516) == 1)
      {
        if (v15 <= 0x63) {
          sprintf(v17, "%04X ", bswap32(*(unsigned __int16 *)(v18 + 1506)) >> 16);
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        int v20 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *(_DWORD *)(v18 + 1516);
          unsigned int v22 = bswap32(*(_DWORD *)(v18 + 1508));
          unsigned int v23 = bswap32(*(unsigned __int16 *)(v18 + 1506));
          int v24 = *(_DWORD *)v18;
          *(_DWORD *)unsigned int v42 = 136316674;
          uint64_t v43 = v19;
          __int16 v44 = 2080;
          unsigned int v45 = "RecycleFlushedPkts";
          __int16 v46 = 1024;
          int v47 = 2095;
          __int16 v48 = 1024;
          int v49 = v21;
          __int16 v50 = 1024;
          unsigned int v51 = v22;
          __int16 v52 = 1024;
          unsigned int v53 = HIWORD(v23);
          __int16 v54 = 1024;
          int v55 = v24;
          _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d \t\t *** MediaQueue_RecycleFlushedPkts: Unexpected: flushing non-video pkt %d %d/%d/%d ", v42, 0x34u);
        }
      }
      MediaQueue_Free(v1, v18);
      ++v15;
      v17 += 5;
    }
    while (v14);
    if (v15) {
      RTPLogMQFlushedPackets(*(void *)(v1 + 936), v15);
    }
    int v26 = v35;
    int v25 = v36;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      int v28 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unsigned int v42 = 136315906;
        uint64_t v43 = v27;
        __int16 v44 = 2080;
        unsigned int v45 = "RecycleFlushedPkts";
        __int16 v46 = 1024;
        int v47 = 2118;
        __int16 v48 = 1024;
        int v49 = v15;
        _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d \t\t *** MediaQueue_RecycleFlushedPkts %d pkts ", v42, 0x22u);
      }
    }
    int v30 = v37;
    int v29 = v38;
  }
  else
  {
    LODWORD(v15) = 0;
    int v30 = v37;
    int v29 = v38;
    int v26 = v35;
    int v25 = v36;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    uint64_t v31 = VRTraceErrorLogLevelToCSTR();
    int v32 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136317442;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "MediaQueue_ThrottlingFlushThrottlingQueue";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2016;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v5;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v30;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v25;
      *(_WORD *)&buf[46] = 1024;
      LODWORD(v57) = v29;
      WORD2(v57) = 1024;
      *(_DWORD *)((char *)&v57 + 6) = v40;
      WORD5(v57) = 1024;
      HIDWORD(v57) = v39;
      LOWORD(v5_Block_object_dispose(&STACK[0x250], 8) = 1024;
      *(_DWORD *)((char *)&v58 + 2) = v26;
      _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ***### MediaQueue_SetThrottlingFlushThrottlingQueue: Flushed Ap/Th %d pkts; QLen: %d/%d/%d -> %d/%d/%d ",
        buf,
        0x46u);
    }
  }
  if (v30 + v29 + v25 != v40 + v26 + v39 + v15 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v33 = VRTraceErrorLogLevelToCSTR();
    int v34 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      *(void *)&uint8_t buf[4] = v33;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "MediaQueue_ThrottlingFlushThrottlingQueue";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2022;
      _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d *** MediaQueue_SetThrottlingFlushThrottlingQueue: UNEXPECTED QUEUE LENGTHS", buf, 0x1Cu);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t dropWaitingPkts(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v9 = result;
    uint64_t v10 = (int *)MEMORY[0x1E4F47A38];
    do
    {
      if (*v10 >= 5) {
        StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2133, "\t\t\t dropWaitingPkts pMP: %p %d", a6, a7, a8, v8);
      }
      uint64_t v11 = *(void *)(v8 + 1568);
      uint64_t result = MediaQueue_Free(v9, v8);
      uint64_t v8 = v11;
    }
    while (v11);
  }
  return result;
}

uint64_t drainOldPackets(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 25568);
  if (!v9 || *(double *)(v9 + 1608) >= a2) {
    return 0;
  }
  uint64_t v12 = (int *)MEMORY[0x1E4F47A38];
  if ((int)*MEMORY[0x1E4F47A38] >= 5) {
    StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2152, "drainOldPackets: releasing OLD pHead: %d/%d/%d/%d/%f ", a7, a8, a9, *(_DWORD *)(v9 + 1516));
  }
  uint64_t v13 = *(void *)(v9 + 1568);
  if (v13 && *(double *)(v13 + 1608) < a2)
  {
    do
    {
      uint64_t v14 = v13;
      if (*v12 >= 5) {
        StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2158, "drainOldPackets: releasing OLD pMP: %d/%d/%d/%d/%f ", a7, a8, a9, *(_DWORD *)(v13 + 1516));
      }
      uint64_t v13 = *(void *)(v13 + 1568);
    }
    while (v13 && *(double *)(v13 + 1608) < a2);
  }
  else
  {
    uint64_t v14 = v9;
  }
  *(void *)(v14 + 156_Block_object_dispose(&STACK[0x250], 8) = 0;
  dropWaitingPkts(a1, v9, a4, a5, a6, a7, a8, a9);
  *(void *)(a1 + 2556_Block_object_dispose(&STACK[0x250], 8) = v13;
  return 1;
}

void pushOutQueuedAudioPkts(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 25568);
  if (a2) {
    *(void *)(a1 + 2556_Block_object_dispose(&STACK[0x250], 8) = 0;
  }
  uint64_t v10 = (int *)MEMORY[0x1E4F47A38];
  int v11 = 0;
  if (v9)
  {
    do
    {
      uint64_t v12 = *(void *)(v9 + 1568);
      *(void *)(v9 + 156_Block_object_dispose(&STACK[0x250], 8) = 0;
      if (*v10 >= 5) {
        StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2189, "pushOutQueuedAudioPkts: AddPacket pMP: %d/%d/%d/%d/%f ", a6, a7, a8, *(_DWORD *)(v9 + 1516));
      }
      double v13 = micro();
      v11 += Throttling_MediaQueue_AddPacket_ScheduleAndActiveProbing(a1 + 584, a1 + 632, (uint64_t *)(a1 + 504), v9, v13);
      uint64_t v9 = v12;
    }
    while (v12);
  }
  if (*v10 >= 5) {
    StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2204, "pushOutQueuedAudioPkts iPktsCount: %d ", a6, a7, a8, v11);
  }
  if (v11 >= 1)
  {
    int v14 = *(_DWORD *)(a1 + 624) + v11;
    *(_DWORD *)(a1 + 624) = v14;
    _MediaQueue_CheckActiveProbingQueueLength(v14);
    pthread_cond_signal((pthread_cond_t *)(a1 + 456));
  }
}

uint64_t MediaQueue_SetCellularAudioStallState(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149580802;
  }
  SetCellularAudioStallState_Internal(v3, a2, 0, v4, v5, v6, v7, v8);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_BBFlushAcked(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6 = CheckInHandleDebug();
  if (!v6) {
    return 2149580802;
  }
  uint64_t v7 = v6 + 25553;
  uint64_t v9 = (pthread_mutex_t *)(v6 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 392));
  int v13 = *(unsigned __int16 *)(v7 + 43);
  int v14 = (int *)MEMORY[0x1E4F47A38];
  if ((int)*MEMORY[0x1E4F47A38] >= 5) {
    StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2468, "AFRCUpdateBBNote calling MediaQueue_BBFlushAcked: flushed pkts: %d/%d bPendingCellularFlush: %d/%p  Trans: %d/%d/%d ", v10, v11, v12, a2);
  }
  if (v13 == a4)
  {
    if (*v14 >= 5)
    {
      StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2474, "MediaQueue_BBFlushAcked: wNumDropped: %d", v10, v11, v12, a2);
      if (a2)
      {
LABEL_9:
        uint64_t v15 = 0;
        int v16 = *v14;
        do
        {
          if (v16 >= 5)
          {
            StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 2476, "\t\t\t %d: %d  ", v10, v11, v12, v15);
            int v16 = *v14;
          }
          ++v15;
        }
        while (a2 != v15);
      }
    }
    else if (a2)
    {
      goto LABEL_9;
    }
    *(unsigned char *)uint64_t v7 = 0;
  }
  pthread_mutex_unlock(v9);
  CheckOutHandleDebug();
  return 0;
}

uint64_t MediaQueue_SetFECFeedbackVersion(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149580802;
  }
  *(unsigned char *)(v3 + 2552_Block_object_dispose(&STACK[0x250], 8) = a2;
  CheckOutHandleDebug();
  return 0;
}

void MediaQueue_SendPacket(uint64_t a1, int *a2)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  int v4 = a2[379];
  if (v4 == 1)
  {
    if (*(_DWORD *)(a1 + 880))
    {
      double v9 = *(double *)(a1 + 888);
      int v10 = (int)v9;
      double v11 = v9 - (double)(int)v9;
      if (v11 > 0.0)
      {
        double v12 = v11 + *(double *)(a1 + 928);
        *(double *)(a1 + 92_Block_object_dispose(&STACK[0x250], 8) = v12;
        if (v12 >= 1.0)
        {
          ++v10;
          *(double *)(a1 + 92_Block_object_dispose(&STACK[0x250], 8) = v12 + -1.0;
        }
      }
    }
    else
    {
      int v10 = 1;
    }
    if (a2[387] <= v10) {
      int v13 = v10;
    }
    else {
      int v13 = a2[387];
    }
    if (*(unsigned char *)(a1 + 208)) {
      int v16 = v13;
    }
    else {
      int v16 = 1;
    }
    *(_DWORD *)(a1 + 132) += v16;
    int v15 = 700;
  }
  else
  {
    if (v4)
    {
      unsigned int v75 = 0;
      if (a2[387] <= 1) {
        int v13 = 1;
      }
      else {
        int v13 = a2[387];
      }
      goto LABEL_31;
    }
    if (*(unsigned char *)(a1 + 864))
    {
      double v5 = *(double *)(a1 + 872);
      int v6 = (int)v5;
      double v7 = v5 - (double)(int)v5;
      if (v7 > 0.0)
      {
        double v8 = v7 + *(double *)(a1 + 920);
        *(double *)(a1 + 920) = v8;
        if (v8 >= 1.0)
        {
          ++v6;
          *(double *)(a1 + 920) = v8 + -1.0;
        }
      }
    }
    else
    {
      int v6 = 1;
    }
    if (a2[387] <= v6) {
      int v13 = v6;
    }
    else {
      int v13 = a2[387];
    }
    if (*(unsigned char *)(a1 + 208)) {
      int v14 = v13;
    }
    else {
      int v14 = 1;
    }
    *(_DWORD *)(a1 + 128) += v14;
    int v15 = 800;
  }
  unsigned int v75 = v15;
LABEL_31:
  if (*((unsigned char *)a2 + 1528)) {
    uint64_t v17 = 48;
  }
  else {
    uint64_t v17 = 28;
  }
  *(void *)(a1 + 136) += *a2 + v17;
  if (v13 >= 1)
  {
    int v18 = 0;
    uint64_t v66 = a1 + 952;
    long long v68 = (pthread_mutex_t *)(a1 + 144);
    long long v69 = (pthread_mutex_t *)(a1 + 24);
    uint64_t v19 = a2 + 1;
    long long v70 = (long long *)(a2 + 406);
    long long v74 = (unsigned char *)(a1 + 25552);
    long long v71 = a2 + 1;
    int v72 = v13;
    while (1)
    {
      double v20 = micro();
      __int16 v76 = -21846;
      int v21 = (void *)*((void *)a2 + 198);
      if (v21)
      {
        if (VCMediaControlInfoHasInfo(v21, 0))
        {
          if ((RTPSetAFRCProcessingDelay(*(void *)(a1 + 936), &v76, *((void **)a2 + 198), *((double *)a2 + 194), v20) & 0x80000000) != 0) {
            goto LABEL_89;
          }
          if (*(_DWORD *)(a1 + 16))
          {
            *(_DWORD *)(a1 + 16) = 0;
            pthread_mutex_lock(v69);
            *(double *)(a1 + 8_Block_object_dispose(&STACK[0x250], 8) = v20;
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 100);
            pthread_mutex_unlock(v69);
          }
          if (*(_DWORD *)(a1 + 104))
          {
            *(_DWORD *)(a1 + 104) = 0;
            pthread_mutex_lock(v69);
            *(double *)(a1 + 112) = v20;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 124);
            pthread_mutex_unlock(v69);
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v22 = VRTraceErrorLogLevelToCSTR();
              unsigned int v23 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v24 = *(_DWORD *)(a1 + 120);
                uint64_t v25 = *(void *)(a1 + 112);
                *(_DWORD *)CMTime buf = 136316162;
                *(void *)&uint8_t buf[4] = v22;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "MediaQueue_SendPacket";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = 274;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v24;
                *(_WORD *)&buf[34] = 2048;
                *(void *)&buf[36] = v25;
                _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Refresh frame counter[%d], time[%.4f].", buf, 0x2Cu);
              }
            }
          }
          if (!v18)
          {
            int v26 = *(_DWORD *)(a1 + 944);
            pthread_mutex_lock(v68);
            uint64_t v27 = v66 + 48 * v26;
            *(_WORD *)(v27 + 2) = v76;
            *(double *)(v27 + 40) = v20;
            *(void *)(v27 + 4) = *(void *)(a1 + 128);
            uint64_t v28 = *(void *)(a1 + 136);
            *(_WORD *)uint64_t v27 = 0;
            *(_DWORD *)(v27 + 12) = 0;
            *(_DWORD *)(v27 + 16) = 0;
            *(void *)(v27 + 24) = v28;
            *(void *)(v27 + 32) = 0;
            *(_DWORD *)(a1 + 944) = ((_WORD)v26 + 1) & 0x1FF;
            int v29 = *(_DWORD *)(a1 + 948);
            if (v29 <= 511) {
              *(_DWORD *)(a1 + 94_Block_object_dispose(&STACK[0x250], 8) = v29 + 1;
            }
            pthread_mutex_unlock(v68);
          }
        }
        uint64_t v30 = *((void *)a2 + 198);
        if (v30)
        {
          *(void *)CMTime buf = 0xAAAAAAAAAAAAAAAALL;
          if ((VCMediaControlInfoSerialize(v30) & 0x80000000) != 0) {
            break;
          }
        }
      }
      uint64_t v95 = 0;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      memset(buf, 0, sizeof(buf));
      *(_DWORD *)&uint8_t buf[8] = a2[380];
      uint64_t v31 = bswap32(*((unsigned __int16 *)a2 + 753)) >> 16;
      long long v78 = 0u;
      VTP_SetPktTag((uint64_t)buf, 0, v31);
      VTP_SetPktTag((uint64_t)buf, 1u, bswap32(a2[378]));
      VTP_SetPktTag((uint64_t)buf, 2u, bswap32(a2[377]));
      char v32 = *((unsigned char *)a2 + 1621);
      if (v32)
      {
        long long v33 = v70[3];
        long long v88 = v70[2];
        long long v89 = v33;
        long long v90 = v70[4];
        long long v34 = v70[1];
        long long v86 = *v70;
        long long v87 = v34;
        BYTE8(v85) = v32;
      }
      if (a2[379]) {
        int v35 = 32;
      }
      else {
        int v35 = 16;
      }
      DWORD1(v85) = v35;
      VTP_Send(a2[381], v19, *a2, v75, (uint64_t)buf);
      uint64_t v36 = kdebug_trace();
      *(double *)(a1 + 25536) = v20;
      if (!a2[379])
      {
        LogProfileTimeOverLimitCompare(*(double *)(a1 + 25544), v20, v36, v37, v38, v39, v40, v41, v42, v43, *(void *)(a1 + 25544));
        *(double *)(a1 + 25544) = v20;
      }
      uint64_t v44 = *(void *)(a1 + 720);
      if (v44)
      {
        int v45 = *(_DWORD *)(a1 + 684);
        int v46 = *a2;
        uint64_t v47 = 448;
        if (a2[379])
        {
          uint64_t v47 = 672;
          uint64_t v48 = v44 + 672;
        }
        else
        {
          uint64_t v48 = v44 + 448;
        }
        int v49 = *(_DWORD *)(v48 + 148);
        int v50 = vcvtd_n_s64_f64(v20 - *(double *)(v48 + 136), 6uLL);
        uint64_t v73 = v47;
        if (v50)
        {
          if (v50 > 15)
          {
            if (v50 > 0x1F)
            {
              int v49 = 0;
              unsigned int v53 = 0;
              *(_OWORD *)(v48 + 120) = 0u;
              *(_OWORD *)(v48 + 104) = 0u;
              *(_OWORD *)(v48 + 8_Block_object_dispose(&STACK[0x250], 8) = 0u;
              *(_OWORD *)(v48 + 72) = 0u;
              *(_OWORD *)(v48 + 56) = 0u;
              *(_OWORD *)(v48 + 40) = 0u;
              *(_OWORD *)(v48 + 24) = 0u;
              *(_OWORD *)(v48 + _Block_object_dispose(&STACK[0x250], 8) = 0u;
            }
            else
            {
              int v56 = *(unsigned __int16 *)(v48 + 144);
              int v67 = v56 + v50;
              unsigned int v53 = (v56 + v50) & 0x1F;
              uint64_t v57 = ((_BYTE)v56 + 1) & 0x1F;
              if (v53 >= v57)
              {
                long long v58 = (void *)(v48 + 4 * v57 + 8);
                uint64_t v59 = (int)(v53 - v57 + 1);
              }
              else
              {
                bzero((void *)(v48 + 8 + 4 * (((_BYTE)v56 + 1) & 0x1F)), 128 - 4 * (((_BYTE)v56 + 1) & 0x1Fu));
                long long v58 = (void *)(v48 + 8);
                uint64_t v59 = v53 + 1;
              }
              bzero(v58, 4 * v59);
              unsigned int v60 = (v67 + 1) & 0x1F;
              if (v60 == v57)
              {
                int v49 = 0;
              }
              else
              {
                int v49 = 0;
                do
                {
                  v49 += *(_DWORD *)(v48 + 4 * v60 + 8);
                  unsigned int v60 = ((_BYTE)v60 + 1) & 0x1F;
                }
                while (v60 != v57);
              }
            }
          }
          else
          {
            LOWORD(v51) = *(_WORD *)(v48 + 144);
            char v52 = v51 + v50;
            unsigned int v53 = v52 & 0x1F;
            int v54 = (v52 + 1) & 0x1F;
            while (1)
            {
              unsigned int v51 = ((_BYTE)v51 + 1) & 0x1F;
              if (v51 == v54) {
                break;
              }
              uint64_t v55 = v48 + 4 * v51;
              v49 -= *(_DWORD *)(v55 + 8);
              *(_DWORD *)(v55 + _Block_object_dispose(&STACK[0x250], 8) = 0;
            }
          }
        }
        else
        {
          unsigned int v53 = -1;
        }
        int v61 = v46 + v45;
        int v62 = v49 + v46 + v45;
        pthread_mutex_lock((pthread_mutex_t *)(v48 + 160));
        *(_DWORD *)(v48 + 14_Block_object_dispose(&STACK[0x250], 8) = v62;
        if (v53 != -1)
        {
          *(double *)(v48 + 136) = *(double *)(v44 + v73)
                                 + (double)vcvtd_n_u64_f64(v20 - *(double *)(v44 + v73), 6uLL) * 0.015625;
          *(_WORD *)(v48 + 144) = v53;
        }
        pthread_mutex_unlock((pthread_mutex_t *)(v48 + 160));
        uint64_t v63 = v48 + 4 * *(__int16 *)(v48 + 144);
        *(_DWORD *)(v63 + 8) += v61;
        int v13 = v72;
        uint64_t v19 = v71;
      }
      if (*v74 && !a2[379] && (int)*MEMORY[0x1E4F47A38] >= 5) {
        StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c", 347, "\t\t\t\t\t\t\t\t\t\t\t Sending: %d/%d ", v41, v42, v43, bswap32(a2[377]));
      }
      if (++v18 == v13) {
        goto LABEL_89;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        MediaQueue_SendPacket_cold_1();
      }
    }
  }
LABEL_89:
  unsigned int v64 = a2[390];
  if (v64 > *(_DWORD *)(a1 + 100))
  {
    *(_DWORD *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + 100) = v64;
  }
  unsigned int v65 = a2[391];
  if (v65 > *(_DWORD *)(a1 + 124))
  {
    *(_DWORD *)(a1 + 104) = 1;
    *(_DWORD *)(a1 + 124) = v65;
  }
}

void LogProfileTimeOverLimitCompare(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (VRTraceIsInternalOSInstalled())
  {
    double v13 = a2 - a1;
    if (v13 > 0.100000001)
    {
      *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v41 = v14;
      long long v42 = v14;
      long long v39 = v14;
      long long v40 = v14;
      long long v37 = v14;
      long long v38 = v14;
      long long v35 = v14;
      long long v36 = v14;
      long long v33 = v14;
      long long v34 = v14;
      long long v32 = v14;
      long long v30 = v14;
      long long v31 = v14;
      long long v28 = v14;
      long long v29 = v14;
      *(_OWORD *)__str = v14;
      vsnprintf(__str, 0x100uLL, "MediaQueue - Last sent audio delayed. lastSentAudioPacketTime=%f currentTime=%f delta=%f", &a11);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        int v16 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v18 = v15;
          __int16 v19 = 2080;
          double v20 = "_LogProfileTimeLimitHelper";
          __int16 v21 = 1024;
          int v22 = 36;
          __int16 v23 = 2080;
          int v24 = __str;
          __int16 v25 = 2048;
          double v26 = v13;
          _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

void OUTLINED_FUNCTION_2_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x28u);
}

void OUTLINED_FUNCTION_5_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

uint64_t _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer(uint64_t a1, unint64_t a2, char *a3, size_t *a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 2151809055;
  CFTypeRef cf = 0;
  if (!a2) {
    return v4;
  }
  size_t v48 = 0;
  size_t v49 = 0;
  int v6 = 0;
  __src = 0;
  unint64_t v7 = 0;
  while (1)
  {
    double v8 = (const void *)(a1 + v7);
    uint64_t v9 = bswap32(*(_DWORD *)(a1 + v7));
    size_t v10 = v9 + 4;
    unint64_t v11 = v9 + 4 + v7;
    if (v11 > a2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        goto LABEL_63;
      }
      uint64_t v36 = VRTraceErrorLogLevelToCSTR();
      long long v37 = *MEMORY[0x1E4F47A50];
      uint64_t v4 = 2151809055;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        goto LABEL_64;
      }
      *(_DWORD *)CMTime buf = 136316418;
      uint64_t v55 = v36;
      __int16 v56 = 2080;
      uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
      __int16 v58 = 1024;
      int v59 = 107;
      __int16 v60 = 2048;
      *(void *)int v61 = v10;
      *(_WORD *)&v61[8] = 2048;
      *(void *)&v61[10] = v7;
      *(_WORD *)&v61[18] = 2048;
      *(void *)&v61[20] = a2;
      long long v38 = " [%s] %s:%d _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer: Failed to parse, next nalu offset in"
            "valid:%zu offset:%zu total length:%zu";
      long long v39 = v37;
      uint32_t v40 = 58;
      goto LABEL_77;
    }
    if (v7 + 4 > a2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        goto LABEL_63;
      }
      uint64_t v41 = VRTraceErrorLogLevelToCSTR();
      long long v42 = *MEMORY[0x1E4F47A50];
      uint64_t v4 = 2151809055;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
LABEL_64:
        if (!v6) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v55 = v41;
      __int16 v56 = 2080;
      uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
      __int16 v58 = 1024;
      int v59 = 111;
      __int16 v60 = 2048;
      *(void *)int v61 = v7 + 4;
      *(_WORD *)&v61[8] = 2048;
      *(void *)&v61[10] = a2;
      long long v38 = " [%s] %s:%d _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer: Failed to parse nalu header, offset "
            "invalid:%zu total length:%zu";
      long long v39 = v42;
      uint32_t v40 = 48;
LABEL_77:
      _os_log_error_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_ERROR, v38, buf, v40);
      goto LABEL_64;
    }
    int FrameSliceHeader = ReadFrameSliceHeader(123, (uint64_t)v8 + 4, v9, (CFDictionaryRef *)&cf);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      long long v14 = *MEMORY[0x1E4F47A50];
      uint64_t v15 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316674;
          uint64_t v55 = v13;
          __int16 v56 = 2080;
          uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
          __int16 v58 = 1024;
          int v59 = 118;
          __int16 v60 = 1024;
          *(_DWORD *)int v61 = FrameSliceHeader;
          *(_WORD *)&v61[4] = 2048;
          *(void *)&v61[6] = v7;
          *(_WORD *)&v61[14] = 2048;
          *(void *)&v61[16] = v9 + 4;
          *(_WORD *)&v61[24] = 2048;
          *(void *)&v61[26] = v9;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Frame type %d offset %zu nextNaluOffset %zu dataPointerLength %zu", buf, 0x40u);
        }
      }
      else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v55 = v13;
        __int16 v56 = 2080;
        uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
        __int16 v58 = 1024;
        int v59 = 118;
        __int16 v60 = 1024;
        *(_DWORD *)int v61 = FrameSliceHeader;
        *(_WORD *)&v61[4] = 2048;
        *(void *)&v61[6] = v7;
        *(_WORD *)&v61[14] = 2048;
        *(void *)&v61[16] = v9 + 4;
        *(_WORD *)&v61[24] = 2048;
        *(void *)&v61[26] = v9;
        _os_log_debug_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Frame type %d offset %zu nextNaluOffset %zu dataPointerLength %zu", buf, 0x40u);
      }
    }
    if (FrameSliceHeader == 4)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        int v22 = *MEMORY[0x1E4F47A50];
        __int16 v23 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v55 = v21;
            __int16 v56 = 2080;
            uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
            __int16 v58 = 1024;
            int v59 = 137;
            __int16 v60 = 1024;
            *(_DWORD *)int v61 = 4;
            _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d PPS NALU found: %d", buf, 0x22u);
          }
        }
        else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v55 = v21;
          __int16 v56 = 2080;
          uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
          __int16 v58 = 1024;
          int v59 = 137;
          __int16 v60 = 1024;
          *(_DWORD *)int v61 = 4;
          _os_log_debug_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEBUG, " [%s] %s:%d PPS NALU found: %d", buf, 0x22u);
        }
      }
      if (__src) {
        free(__src);
      }
      long long v32 = malloc_type_malloc(v10, 0x100004077774924uLL);
      if (!v32)
      {
        uint64_t v4 = 2151809027;
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
        {
          __src = 0;
        }
        else
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer_cold_2();
          }
          __src = 0;
          uint64_t v4 = 2151809027;
        }
        goto LABEL_64;
      }
      __src = v32;
      memcpy(v32, v8, v10);
      if (v6)
      {
        size_t v49 = v10;
LABEL_57:
        if (v6)
        {
LABEL_58:
          if (__src)
          {
            size_t v34 = v49 + v48;
            if (*a4 < v49 + v48)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3
                && (uint64_t v43 = VRTraceErrorLogLevelToCSTR(),
                    uint64_t v44 = *MEMORY[0x1E4F47A50],
                    os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
              {
                size_t v45 = *a4;
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v55 = v43;
                __int16 v56 = 2080;
                uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
                __int16 v58 = 1024;
                int v59 = 156;
                __int16 v60 = 2048;
                *(void *)int v61 = v45;
                *(_WORD *)&v61[8] = 2048;
                *(void *)&v61[10] = v49 + v48;
                _os_log_error_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_ERROR, " [%s] %s:%d Output SPSPPS buffer size:%zu is less than the SPSPPS size:%zu", buf, 0x30u);
                size_t v34 = 0;
                unsigned int v51 = -2143158209;
              }
              else
              {
                size_t v34 = 0;
                unsigned int v51 = -2143158209;
              }
            }
            else
            {
              memcpy(a3, v6, v48);
              memcpy(&a3[v48], __src, v49);
              unsigned int v51 = 0;
            }
            *a4 = v34;
            uint64_t v4 = v51;
LABEL_65:
            free(v6);
            goto LABEL_66;
          }
        }
LABEL_63:
        uint64_t v4 = 2151809055;
        goto LABEL_64;
      }
      size_t v49 = v10;
      goto LABEL_47;
    }
    if (FrameSliceHeader == 3) {
      break;
    }
    if (FrameSliceHeader == 1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        uint64_t v17 = *MEMORY[0x1E4F47A50];
        uint64_t v18 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v55 = v16;
            __int16 v56 = 2080;
            uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
            __int16 v58 = 1024;
            int v59 = 121;
            __int16 v60 = 1024;
            *(_DWORD *)int v61 = 1;
            __int16 v19 = v17;
            double v20 = " [%s] %s:%d Slice NALU: %d, ignoring";
LABEL_31:
            _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0x22u);
          }
        }
        else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v55 = v16;
          __int16 v56 = 2080;
          uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
          __int16 v58 = 1024;
          int v59 = 121;
          __int16 v60 = 1024;
          *(_DWORD *)int v61 = 1;
          long long v30 = v17;
          long long v31 = " [%s] %s:%d Slice NALU: %d, ignoring";
LABEL_53:
          _os_log_debug_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEBUG, v31, buf, 0x22u);
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      long long v28 = *MEMORY[0x1E4F47A50];
      long long v29 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v55 = v27;
          __int16 v56 = 2080;
          uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
          __int16 v58 = 1024;
          int v59 = 151;
          __int16 v60 = 1024;
          *(_DWORD *)int v61 = FrameSliceHeader;
          __int16 v19 = v28;
          double v20 = " [%s] %s:%d Unknown NALU Type: %d, ignoring";
          goto LABEL_31;
        }
      }
      else if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v55 = v27;
        __int16 v56 = 2080;
        uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
        __int16 v58 = 1024;
        int v59 = 151;
        __int16 v60 = 1024;
        *(_DWORD *)int v61 = FrameSliceHeader;
        long long v30 = v28;
        long long v31 = " [%s] %s:%d Unknown NALU Type: %d, ignoring";
        goto LABEL_53;
      }
    }
LABEL_47:
    if (cf) {
      CFRelease(cf);
    }
    unint64_t v7 = v11;
    if (v11 >= a2) {
      goto LABEL_57;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    goto LABEL_42;
  }
  uint64_t v24 = VRTraceErrorLogLevelToCSTR();
  __int16 v25 = *MEMORY[0x1E4F47A50];
  double v26 = *MEMORY[0x1E4F47A50];
  if (*MEMORY[0x1E4F47A40])
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v55 = v24;
      __int16 v56 = 2080;
      uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
      __int16 v58 = 1024;
      int v59 = 123;
      __int16 v60 = 1024;
      *(_DWORD *)int v61 = 3;
      _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SPS NALU found: %d", buf, 0x22u);
      if (!v6) {
        goto LABEL_44;
      }
LABEL_43:
      free(v6);
      goto LABEL_44;
    }
LABEL_42:
    if (!v6) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_42;
  }
  *(_DWORD *)CMTime buf = 136315906;
  uint64_t v55 = v24;
  __int16 v56 = 2080;
  uint64_t v57 = "_VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer";
  __int16 v58 = 1024;
  int v59 = 123;
  __int16 v60 = 1024;
  *(_DWORD *)int v61 = 3;
  _os_log_debug_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEBUG, " [%s] %s:%d SPS NALU found: %d", buf, 0x22u);
  if (v6) {
    goto LABEL_43;
  }
LABEL_44:
  long long v33 = malloc_type_malloc(v10, 0x100004077774924uLL);
  if (v33)
  {
    int v6 = v33;
    memcpy(v33, v8, v10);
    if (__src)
    {
      size_t v48 = v10;
      goto LABEL_58;
    }
    __src = 0;
    size_t v48 = v10;
    goto LABEL_47;
  }
  uint64_t v4 = 2151809027;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer_cold_1();
    }
  }
LABEL_66:
  if (__src) {
    free(__src);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

uint64_t _VCSFrameCryptorH264_CreateAndGetBlockBufferPtr(uint64_t a1, CMBlockBufferRef *blockBufferOut, size_t dataLength, char **a4)
{
  uint64_t v6 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 8), 0, dataLength, *(CFAllocatorRef *)(a1 + 16), 0, 0, dataLength, 1u, blockBufferOut);
  if (v6)
  {
    uint64_t DataPointer = v6;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCSFrameCryptorH264_CreateAndGetBlockBufferPtr_cold_2();
      }
    }
  }
  else
  {
    uint64_t DataPointer = CMBlockBufferGetDataPointer(*blockBufferOut, 0, 0, 0, a4);
    if (DataPointer)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSFrameCryptorH264_CreateAndGetBlockBufferPtr_cold_1();
        }
      }
    }
  }
  return DataPointer;
}

uint64_t _VCSFrameCryptorH264_ExtractSFramePayloadFromSlice(uint64_t a1, unsigned int *a2, CMBlockBufferRef sourceBuffer, CMBlockBufferRef *blockBufferOut, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = bswap32(*a2);
  int v9 = HIBYTE(v8) & 0x1F;
  int v10 = BYTE2(v8);
  if (v9 == 5 && BYTE2(v8) == 184 || v9 == 1 && BYTE2(v8) == 224)
  {
    uint64_t v11 = a6 + 6;
    uint64_t v12 = a7 - 6;
    if (a7 != 6)
    {
      if (CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(a1 + 8), sourceBuffer, *(CFAllocatorRef *)(a1 + 16), 0, a6 + 6, a7 - 6, 0, blockBufferOut))
      {
        uint64_t v16 = 2151809027;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCSFrameCryptorH264_ExtractSFramePayloadFromSlice_cold_1();
          }
        }
        return v16;
      }
      *a5 = v12;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return 0;
    }
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    long long v14 = *MEMORY[0x1E4F47A50];
    uint64_t v15 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v20 = 136316162;
        uint64_t v21 = v13;
        __int16 v22 = 2080;
        __int16 v23 = "_VCSFrameCryptorH264_ExtractSFramePayloadFromSlice";
        __int16 v24 = 1024;
        int v25 = 209;
        __int16 v26 = 2048;
        *(void *)uint64_t v27 = v11;
        *(_WORD *)&v27[8] = 2048;
        uint64_t v28 = v12;
        _os_log_debug_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEBUG, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu: Found SFrame slice offset %zu length %zu", (uint8_t *)&v20, 0x30u);
      }
      return 0;
    }
    uint64_t v16 = 0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 136316162;
      uint64_t v21 = v13;
      __int16 v22 = 2080;
      __int16 v23 = "_VCSFrameCryptorH264_ExtractSFramePayloadFromSlice";
      __int16 v24 = 1024;
      int v25 = 209;
      __int16 v26 = 2048;
      *(void *)uint64_t v27 = v11;
      *(_WORD *)&v27[8] = 2048;
      uint64_t v28 = v12;
      _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu: Found SFrame slice offset %zu length %zu", (uint8_t *)&v20, 0x30u);
      return 0;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() < 3)
  {
    return 2151809055;
  }
  else
  {
    uint64_t v17 = VRTraceErrorLogLevelToCSTR();
    uint64_t v18 = *MEMORY[0x1E4F47A50];
    uint64_t v16 = 2151809055;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v20 = 136316162;
      uint64_t v21 = v17;
      __int16 v22 = 2080;
      __int16 v23 = "_VCSFrameCryptorH264_ExtractSFramePayloadFromSlice";
      __int16 v24 = 1024;
      int v25 = 211;
      __int16 v26 = 1024;
      *(_DWORD *)uint64_t v27 = v9;
      *(_WORD *)&v27[4] = 1024;
      *(_DWORD *)&v27[6] = v10;
      _os_log_error_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_ERROR, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu failed as fake nalu and slice header missing in SFrame, nalu hdr %d slice hdr %d", (uint8_t *)&v20, 0x28u);
    }
  }
  return v16;
}

uint64_t _VCSFrameCryptorH264_FindAndExtractSliceNalu(uint64_t a1, CMBlockBufferRef theBuffer, unint64_t a3, CMBlockBufferRef *a4, void *a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t SFramePayloadFromSlice = 2151809055;
  CFTypeRef cf = 0;
  if (!a3) {
    return SFramePayloadFromSlice;
  }
  size_t v8 = 0;
  while (1)
  {
    size_t lengthAtOffsetOut = 0xAAAAAAAAAAAAAAAALL;
    dataPointerOut = 0;
    size_t totalLengthOut = 0xAAAAAAAAAAAAAAAALL;
    if (CMBlockBufferGetDataPointer(theBuffer, v8, &lengthAtOffsetOut, 0, &dataPointerOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v27 = VRTraceErrorLogLevelToCSTR();
        uint64_t v28 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v43 = v27;
          __int16 v44 = 2080;
          size_t v45 = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
          __int16 v46 = 1024;
          int v47 = 232;
          __int16 v48 = 2048;
          *(void *)size_t v49 = v8;
          *(_WORD *)&v49[8] = 2048;
          *(void *)&v49[10] = a3;
          uint64_t v29 = " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu: Failed to access block buffer data at offset %zu, bufferLength is %zu";
          long long v30 = v28;
          uint32_t v31 = 48;
          goto LABEL_51;
        }
      }
LABEL_58:
      uint64_t SFramePayloadFromSlice = 2151809055;
      goto LABEL_59;
    }
    if (v8 + 4 > a3 || lengthAtOffsetOut <= 3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_1();
        }
      }
      goto LABEL_58;
    }
    size_t v9 = bswap32(*(_DWORD *)dataPointerOut);
    uint64_t v10 = v9 + 4;
    size_t v11 = v9 + 4 + v8;
    if (v11 > a3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v32 = VRTraceErrorLogLevelToCSTR();
        long long v33 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v43 = v32;
          __int16 v44 = 2080;
          size_t v45 = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
          __int16 v46 = 1024;
          int v47 = 237;
          __int16 v48 = 2048;
          *(void *)size_t v49 = v10;
          *(_WORD *)&v49[8] = 2048;
          *(void *)&v49[10] = v8;
          *(_WORD *)&v49[18] = 2048;
          *(void *)&v49[20] = a3;
          uint64_t v29 = " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu: Failed to parse, next nalu offset invalid:%zu offset:%z"
                "u total buffer length:%zu";
          long long v30 = v33;
          uint32_t v31 = 58;
LABEL_51:
          _os_log_error_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_ERROR, v29, buf, v31);
        }
      }
      goto LABEL_58;
    }
    if (CMBlockBufferGetDataPointer(theBuffer, v8 + 4, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_5();
        }
      }
      goto LABEL_58;
    }
    int v12 = lengthAtOffsetOut;
    if (lengthAtOffsetOut >= v9)
    {
      long long v14 = 0;
      goto LABEL_13;
    }
    size_t lengthAtOffsetOut = v9;
    uint64_t v13 = malloc_type_malloc(v9, 0x100004077774924uLL);
    if (!v13)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_2();
        }
      }
      goto LABEL_58;
    }
    long long v14 = v13;
    if (CMBlockBufferAccessDataBytes(theBuffer, v8 + 4, lengthAtOffsetOut, v13, &dataPointerOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_4();
        }
      }
      uint64_t SFramePayloadFromSlice = 2151809055;
      goto LABEL_41;
    }
    int v12 = lengthAtOffsetOut;
LABEL_13:
    int FrameSliceHeader = ReadFrameSliceHeader(123, (uint64_t)dataPointerOut, v12, (CFDictionaryRef *)&cf);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      uint64_t v17 = *MEMORY[0x1E4F47A50];
      uint64_t v18 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316674;
          uint64_t v43 = v16;
          __int16 v44 = 2080;
          size_t v45 = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
          __int16 v46 = 1024;
          int v47 = 256;
          __int16 v48 = 1024;
          *(_DWORD *)size_t v49 = FrameSliceHeader;
          *(_WORD *)&v49[4] = 2048;
          *(void *)&v49[6] = v8;
          *(_WORD *)&v49[14] = 2048;
          *(void *)&v49[16] = v10;
          *(_WORD *)&v49[24] = 2048;
          *(void *)&v49[26] = lengthAtOffsetOut;
          _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Frame type %d offset %zu nextNaluOffset %zu dataPointerLength %zu", buf, 0x40u);
        }
      }
      else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v43 = v16;
        __int16 v44 = 2080;
        size_t v45 = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
        __int16 v46 = 1024;
        int v47 = 256;
        __int16 v48 = 1024;
        *(_DWORD *)size_t v49 = FrameSliceHeader;
        *(_WORD *)&v49[4] = 2048;
        *(void *)&v49[6] = v8;
        *(_WORD *)&v49[14] = 2048;
        *(void *)&v49[16] = v10;
        *(_WORD *)&v49[24] = 2048;
        *(void *)&v49[26] = lengthAtOffsetOut;
        _os_log_debug_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Frame type %d offset %zu nextNaluOffset %zu dataPointerLength %zu", buf, 0x40u);
      }
    }
    if (FrameSliceHeader == 1) {
      break;
    }
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if ((FrameSliceHeader - 3) > 1)
    {
      if (ErrorLogLevelForModule >= 5)
      {
        uint64_t v25 = VRTraceErrorLogLevelToCSTR();
        __int16 v26 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v43 = v25;
          __int16 v44 = 2080;
          size_t v45 = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
          __int16 v46 = 1024;
          int v47 = 265;
          __int16 v48 = 1024;
          *(_DWORD *)size_t v49 = FrameSliceHeader;
          __int16 v23 = v26;
          __int16 v24 = " [%s] %s:%d Unknown NALU Type: %d, drop it";
LABEL_28:
          _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, v24, buf, 0x22u);
          if (!v14) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }
      }
    }
    else if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v20 = VRTraceErrorLogLevelToCSTR();
      uint64_t v21 = *MEMORY[0x1E4F47A50];
      __int16 v22 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v43 = v20;
          __int16 v44 = 2080;
          size_t v45 = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
          __int16 v46 = 1024;
          int v47 = 263;
          __int16 v48 = 1024;
          *(_DWORD *)size_t v49 = FrameSliceHeader;
          __int16 v23 = v21;
          __int16 v24 = " [%s] %s:%d SPS/PPS NALU Type in clear: %d, drop it";
          goto LABEL_28;
        }
      }
      else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v43 = v20;
        __int16 v44 = 2080;
        size_t v45 = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
        __int16 v46 = 1024;
        int v47 = 263;
        __int16 v48 = 1024;
        *(_DWORD *)size_t v49 = FrameSliceHeader;
        _os_log_debug_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEBUG, " [%s] %s:%d SPS/PPS NALU Type in clear: %d, drop it", buf, 0x22u);
        if (!v14) {
          goto LABEL_33;
        }
LABEL_32:
        free(v14);
        goto LABEL_33;
      }
    }
    if (v14) {
      goto LABEL_32;
    }
LABEL_33:
    if (cf) {
      CFRelease(cf);
    }
    size_t v8 = v11;
    if (v11 >= a3) {
      goto LABEL_58;
    }
  }
  uint64_t SFramePayloadFromSlice = _VCSFrameCryptorH264_ExtractSFramePayloadFromSlice(a1, (unsigned int *)dataPointerOut, theBuffer, a4, a5, v8, v10);
  if (SFramePayloadFromSlice)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_3();
      }
    }
  }
  if (v14) {
LABEL_41:
  }
    free(v14);
LABEL_59:
  if (cf) {
    CFRelease(cf);
  }
  return SFramePayloadFromSlice;
}

uint64_t _VCSFrameCryptroH264_EscapeEncryptedBuffer(uint64_t a1, uint64_t a2, unint64_t a3, CMBlockBufferRef *blockBufferOut, size_t dataLength, uint64_t a6, char **a7)
{
  uint64_t BlockBufferPtr = _VCSFrameCryptorH264_CreateAndGetBlockBufferPtr(a1, blockBufferOut, dataLength, a7);
  if (BlockBufferPtr)
  {
    uint64_t v13 = BlockBufferPtr;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCSFrameCryptroH264_EscapeEncryptedBuffer_cold_2();
      }
    }
  }
  else
  {
    uint64_t v13 = VideoUtil_PerformEscapingForBuffer(a2, a3, (uint64_t)&(*a7)[a6], dataLength - a6);
    if (v13)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSFrameCryptroH264_EscapeEncryptedBuffer_cold_1();
        }
      }
    }
  }
  return v13;
}

uint64_t _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, CMBlockBufferRef *a5)
{
  theBuffer[1] = *(CMBlockBufferRef *)MEMORY[0x1E4F143B8];
  theBuffer[0] = 0;
  size_t v8 = a3 - a4;
  uint64_t v9 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 8), 0, v8, *(CFAllocatorRef *)(a1 + 16), 0, 0, v8, 1u, theBuffer);
  if (v9)
  {
    uint64_t v11 = v9;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer_cold_3();
      }
    }
  }
  else
  {
    dataPointerOut = 0;
    uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer[0], 0, 0, 0, &dataPointerOut);
    if (DataPointer)
    {
      uint64_t v11 = DataPointer;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer_cold_2();
        }
      }
    }
    else
    {
      uint64_t v11 = VideoUtil_RemoveEmulationBytesFromBuffer(a2, a3, (uint64_t)dataPointerOut, v8);
      if (!v11)
      {
        *a5 = theBuffer[0];
        return v11;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer_cold_1();
        }
      }
    }
  }
  if (theBuffer[0]) {
    CFRelease(theBuffer[0]);
  }
  return v11;
}

uint64_t VCSFrameCryptorH264_Create(const void *a1, CFAllocatorRef **a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = (CFAllocatorRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x6004082687C62uLL);
    if (v4)
    {
      double v5 = v4;
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (VCAllocatorFirstCome_Create((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (uint64_t)"VCSFrameCryptorH264BlockBufferHeaderAllocator", v4 + 1))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCSFrameCryptorH264_Create_cold_4();
          }
        }
      }
      else
      {
        v10[0] = xmmword_1E259DAF8;
        v10[1] = unk_1E259DB08;
        if (!VCAllocatorMultiQueue_Create(v6, (uint64_t)"VCSFrameCryptorH264BlockBufferDataAllocator", 4u, (unint64_t *)v10, v5 + 2))
        {
          CFAllocatorRef v7 = (const __CFAllocator *)CFRetain(a1);
          uint64_t v8 = 0;
          *double v5 = v7;
          *a2 = v5;
          return v8;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCSFrameCryptorH264_Create_cold_3();
          }
        }
      }
      free(v5);
      return 0;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    {
      return 2151809027;
    }
    else
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = 2151809027;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCSFrameCryptorH264_Create_cold_2();
      }
    }
  }
  else
  {
    uint64_t v8 = 2151809025;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCSFrameCryptorH264_Create_cold_1();
      }
    }
  }
  return v8;
}

void VCSFrameCryptorH264_Destroy(CFTypeRef **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v2[1])
    {
      CFRelease(v2[1]);
      uint64_t v2 = *a1;
    }
    if (v2[2])
    {
      CFRelease(v2[2]);
      uint64_t v2 = *a1;
    }
    if (*v2)
    {
      CFRelease(*v2);
      uint64_t v2 = *a1;
    }
    free(v2);
    *a1 = 0;
  }
}

uint64_t VCSFrameCryptorH264_Encrypt(uint64_t a1, int a2, CMBlockBufferRef theBuffer, CMBlockBufferRef *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef bufferReference = 0;
  CFTypeRef cf = 0;
  size_t totalLengthOut = CMBlockBufferGetDataLength(theBuffer);
  uint64_t v8 = _VCSFrameCryptorH264_ValidateInputParameters(a1, (uint64_t)theBuffer, totalLengthOut, (uint64_t)a4);
  if (v8)
  {
    uint64_t v25 = v8;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCSFrameCryptorH264_Encrypt_cold_13();
      }
    }
    goto LABEL_81;
  }
  dataPointerOut = 0;
  if (CMBlockBufferGetDataPointer(theBuffer, 0, &totalLengthOut, &totalLengthOut, &dataPointerOut))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCSFrameCryptorH264_Encrypt_cold_12();
      }
    }
  }
  else
  {
    size_t v33 = 400;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __src[0] = v9;
    __src[1] = v9;
    __src[2] = v9;
    __src[3] = v9;
    __src[4] = v9;
    __src[5] = v9;
    __src[6] = v9;
    __src[7] = v9;
    __src[8] = v9;
    __src[9] = v9;
    __src[10] = v9;
    __src[11] = v9;
    __src[12] = v9;
    __src[13] = v9;
    __src[14] = v9;
    __src[15] = v9;
    __src[16] = v9;
    __src[17] = v9;
    __src[18] = v9;
    __src[19] = v9;
    __src[20] = v9;
    __src[21] = v9;
    __src[22] = v9;
    __src[23] = v9;
    __src[24] = v9;
    if (a2)
    {
      uint64_t v10 = _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer((uint64_t)dataPointerOut, totalLengthOut, (char *)__src, &v33);
      if (v10)
      {
        uint64_t v25 = v10;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCSFrameCryptorH264_Encrypt_cold_11();
          }
        }
        goto LABEL_81;
      }
      size_t v11 = v33;
      uint64_t v12 = v33 + 6;
    }
    else
    {
      size_t v11 = 0;
      size_t v33 = 0;
      uint64_t v12 = 6;
    }
    uint64_t started = VideoUtil_ReplaceNALLengthWithStartCode((uint64_t)dataPointerOut, totalLengthOut);
    if (started)
    {
      uint64_t v25 = started;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCSFrameCryptorH264_Encrypt_cold_10();
        }
      }
      goto LABEL_81;
    }
    dataCFIndex Length = 0;
    uint64_t EncryptedBufferSize = VCCryptor_GetEncryptedBufferSize(*(void *)a1, totalLengthOut, &dataLength);
    if (EncryptedBufferSize)
    {
      uint64_t v25 = EncryptedBufferSize;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCSFrameCryptorH264_Encrypt_cold_9();
        }
      }
      goto LABEL_81;
    }
    size_t v15 = dataLength + v12;
    __dst = 0;
    uint64_t BlockBufferPtr = _VCSFrameCryptorH264_CreateAndGetBlockBufferPtr(a1, &bufferReference, dataLength + v12, (char **)&__dst);
    if (BlockBufferPtr)
    {
      uint64_t v25 = BlockBufferPtr;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCSFrameCryptorH264_Encrypt_cold_8();
        }
      }
      goto LABEL_81;
    }
    if (CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 8), bufferReference, v12, dataLength, 0, &blockBufferOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      {
        uint64_t v25 = 2151809027;
      }
      else
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t v25 = 2151809027;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCSFrameCryptorH264_Encrypt_cold_7();
        }
      }
      goto LABEL_81;
    }
    uint64_t v17 = VCCryptor_Encrypt(*(void *)a1, theBuffer, (CFTypeRef *)&blockBufferOut);
    if (v17)
    {
      uint64_t v25 = v17;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCSFrameCryptorH264_Encrypt_cold_6();
        }
      }
      goto LABEL_81;
    }
    long long v30 = 0;
    if (!CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &v30))
    {
      uint64_t EscapeCountForBuffer = VideoUtil_GetEscapeCountForBuffer((unsigned __int8 *)v30, dataLength);
      int v19 = EscapeCountForBuffer;
      uint64_t v29 = 0;
      if (EscapeCountForBuffer)
      {
        v15 += EscapeCountForBuffer;
        uint64_t v20 = _VCSFrameCryptroH264_EscapeEncryptedBuffer(a1, (uint64_t)v30, dataLength, (CMBlockBufferRef *)&cf, v15, v12, &v29);
        if (v20)
        {
          uint64_t v25 = v20;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCSFrameCryptorH264_Encrypt_cold_4();
            }
          }
          goto LABEL_81;
        }
        __dst = v29;
        if (bufferReference) {
          CFRelease(bufferReference);
        }
        CMBlockBufferRef bufferReference = (CMBlockBufferRef)cf;
        CFTypeRef cf = 0;
      }
      if (v11 + 6 > v15)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
        {
          uint64_t v25 = 2151809087;
        }
        else
        {
          uint64_t v27 = VRTraceErrorLogLevelToCSTR();
          uint64_t v28 = *MEMORY[0x1E4F47A50];
          uint64_t v25 = 2151809087;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v41 = v27;
            __int16 v42 = 2080;
            uint64_t v43 = "_VCSFrameCryptorH264_AppendPrefixNalusForSFramePacketization";
            __int16 v44 = 1024;
            int v45 = 67;
            __int16 v46 = 2048;
            size_t v47 = v15;
            __int16 v48 = 2048;
            size_t v49 = v11 + 6;
            _os_log_error_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_ERROR, " [%s] %s:%d _VCSFrameCryptorH264_AppendPrefixNalusForSFramePacketization failed due to invalid block buffer size:%zu, minimum required size:%zu", buf, 0x30u);
          }
        }
      }
      else
      {
        uint64_t v21 = (char *)__dst;
        if (__dst)
        {
          unsigned int v22 = v19 + dataLength + 2;
          if (v11 && a2)
          {
            memcpy(__dst, __src, v11);
            v21 += v11;
          }
          *(_DWORD *)uint64_t v21 = bswap32(v22);
          if (a2) {
            char v23 = 37;
          }
          else {
            char v23 = 33;
          }
          if (a2) {
            char v24 = -72;
          }
          else {
            char v24 = -32;
          }
          v21[4] = v23;
          v21[5] = v24;
          if (CMBlockBufferIsRangeContiguous(bufferReference, 0, v15))
          {
            uint64_t v25 = 0;
            *a4 = bufferReference;
            CMBlockBufferRef bufferReference = 0;
            goto LABEL_31;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCSFrameCryptorH264_Encrypt_cold_3();
            }
          }
          goto LABEL_69;
        }
        uint64_t v25 = 2151809025;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCSFrameCryptorH264_Encrypt_cold_2();
          }
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCSFrameCryptorH264_Encrypt_cold_1();
        }
      }
      goto LABEL_81;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCSFrameCryptorH264_Encrypt_cold_5();
      }
    }
  }
LABEL_69:
  uint64_t v25 = 0;
LABEL_81:
  if (bufferReference) {
    CFRelease(bufferReference);
  }
LABEL_31:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v25;
}

uint64_t _VCSFrameCryptorH264_ValidateInputParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        if (a3)
        {
          return 0;
        }
        else
        {
          uint64_t v4 = 2151677953;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCSFrameCryptorH264_ValidateInputParameters_cold_4();
            }
          }
        }
      }
      else
      {
        uint64_t v4 = 2151677953;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCSFrameCryptorH264_ValidateInputParameters_cold_3();
          }
        }
      }
    }
    else
    {
      uint64_t v4 = 2151677953;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSFrameCryptorH264_ValidateInputParameters_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 2151677953;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCSFrameCryptorH264_ValidateInputParameters_cold_1();
      }
    }
  }
  return v4;
}

uint64_t VCSFrameCryptorH264_Decrypt(uint64_t *a1, CMBlockBufferRef theBuffer, CMBlockBufferRef *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  CMBlockBufferRef v22 = 0;
  CMBlockBufferRef theBuffera = 0;
  CFTypeRef cf = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
  uint64_t v7 = _VCSFrameCryptorH264_ValidateInputParameters((uint64_t)a1, (uint64_t)theBuffer, DataLength, (uint64_t)a3);
  if (v7)
  {
    uint64_t started = v7;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCSFrameCryptorH264_Decrypt_cold_7();
      }
    }
  }
  else
  {
    size_t totalLengthOut = 0;
    uint64_t v8 = _VCSFrameCryptorH264_FindAndExtractSliceNalu((uint64_t)a1, theBuffer, DataLength, &theBuffera, &totalLengthOut);
    if (v8)
    {
      uint64_t started = v8;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCSFrameCryptorH264_Decrypt_cold_6();
        }
      }
    }
    else
    {
      dataPointerOut = 0;
      if (CMBlockBufferGetDataPointer(theBuffera, 0, &totalLengthOut, &totalLengthOut, &dataPointerOut))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCSFrameCryptorH264_Decrypt_cold_5();
          }
        }
        goto LABEL_40;
      }
      uint64_t EmulationByteCountForBuffer = VideoUtil_GetEmulationByteCountForBuffer((uint64_t)dataPointerOut, totalLengthOut);
      if (EmulationByteCountForBuffer)
      {
        uint64_t v10 = _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer((uint64_t)a1, (uint64_t)dataPointerOut, totalLengthOut, EmulationByteCountForBuffer, (CMBlockBufferRef *)&cf);
        if (v10)
        {
          uint64_t started = v10;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCSFrameCryptorH264_Decrypt_cold_4();
            }
          }
          goto LABEL_15;
        }
        if (theBuffera) {
          CFRelease(theBuffera);
        }
        size_t v11 = (OpaqueCMBlockBuffer *)cf;
        CMBlockBufferRef theBuffera = (CMBlockBufferRef)cf;
        CFTypeRef cf = 0;
      }
      else
      {
        size_t v11 = theBuffera;
      }
      uint64_t v12 = VCCryptor_Decrypt(*a1, v11, &v22);
      if (!v12)
      {
        uint64_t v18 = 0;
        if (CMBlockBufferGetDataPointer(v22, 0, 0, 0, &v18))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCSFrameCryptorH264_Decrypt_cold_2();
            }
          }
        }
        else
        {
          size_t v13 = CMBlockBufferGetDataLength(v22);
          if (v13 <= totalLengthOut)
          {
            uint64_t started = VideoUtil_ReplaceStartCodeWithNALLength((uint64_t)v18, v13);
            if (started)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VCSFrameCryptorH264_Decrypt_cold_1();
                }
              }
            }
            else
            {
              *a3 = v22;
              CMBlockBufferRef v22 = 0;
            }
            goto LABEL_15;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v16 = VRTraceErrorLogLevelToCSTR();
            uint64_t v17 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v25 = v16;
              __int16 v26 = 2080;
              uint64_t v27 = "VCSFrameCryptorH264_Decrypt";
              __int16 v28 = 1024;
              int v29 = 502;
              __int16 v30 = 2048;
              size_t v31 = v13;
              __int16 v32 = 2048;
              size_t v33 = totalLengthOut;
              _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, " [%s] %s:%d Decrypted buffer size(%zu) cannot be larger than payload size(%zu)", buf, 0x30u);
            }
          }
        }
LABEL_40:
        uint64_t started = 0;
        goto LABEL_15;
      }
      uint64_t started = v12;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCSFrameCryptorH264_Decrypt_cold_3();
        }
      }
    }
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (theBuffera) {
    CFRelease(theBuffera);
  }
  return started;
}

uint64_t RS_SetOptimizationEnabled(uint64_t result)
{
  _RS_isOptimizationEnabled = result;
  return result;
}

void RSEncode(unsigned __int8 *a1, unsigned char *a2, int a3)
{
  if (_RS_isOptimizationEnabled)
  {
    int8x16_t v3 = 0uLL;
    if (gGenPolyDegree <= 0xEuLL)
    {
      uint64_t v4 = gGenPolyDegree - 15;
      do
      {
        unsigned __int8 v5 = *a1++;
        uint64_t v6 = gIndexTable[(v5 ^ v3.i8[0]) & 0xF];
        int8x16_t v3 = (int8x16_t)vshrq_n_u64((uint64x2_t)v3, 8uLL);
        if (v6 != 15) {
          int8x16_t v3 = veorq_s8(vqtbl1q_s8(*(int8x16_t *)&gAlphaTable[v6], (int8x16_t)xmmword_1E259DB20), v3);
        }
      }
      while (!__CFADD__(v4++, 1));
    }
    if (a3 >= 1)
    {
      for (uint64_t i = 0; i != a3; ++i)
      {
        int8x16_t v9 = v3;
        a2[i] = *(unsigned char *)((unint64_t)&v9 | i & 0xF);
      }
    }
  }
  else
  {
    _RS_Encode_Original((uint64_t)a1, a2, a3);
  }
}

void _RS_Encode_Original(uint64_t a1, unsigned char *a2, int a3)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  size_t v6 = gGenPolyDegree;
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (unsigned __int8 *)v21 - v7;
  int8x16_t v9 = (char *)v21 - v7;
  if (v6)
  {
    memset(v9, 170, v6);
    bzero(v8, v6);
    if (v6 > 0xE) {
      goto LABEL_16;
    }
  }
  else
  {
    bzero(v9, v6);
  }
  uint64_t v10 = 0;
  uint64_t v11 = gGenPoly[v6];
  uint64_t v12 = gGenPoly[0];
  do
  {
    uint64_t v13 = gIndexTable[v8[v6 - 1] ^ *(unsigned char *)(a1 + v10)] - v11;
    if (v13 == 15)
    {
      uint64_t v14 = (v6 - 1);
      if (v6 >= 2)
      {
        do
        {
          BOOL v15 = v14 <= 1;
          v8[v14] = v8[(v14 - 1)];
          --v14;
        }
        while (!v15);
      }
      unsigned __int8 v16 = 0;
    }
    else
    {
      uint64_t v17 = (v6 - 1);
      if (v6 >= 2)
      {
        do
        {
          BOOL v15 = v17 <= 1;
          v8[v17] = gAlphaTable[v13 + gGenPoly[v17]] ^ v8[(v17 - 1)];
          --v17;
        }
        while (!v15);
      }
      unsigned __int8 v16 = gAlphaTable[v12 + (int)v13];
    }
    *uint64_t v8 = v16;
    ++v10;
  }
  while (v10 != 15 - v6);
LABEL_16:
  if (a3 >= 1)
  {
    uint64_t v18 = a3;
    int v19 = &v8[v6 - 1];
    do
    {
      char v20 = *v19--;
      *a2++ = v20;
      --v18;
    }
    while (v18);
  }
}

unsigned __int8 *RSEncode2Nibbles(unsigned __int8 *result, uint64_t a2, int a3)
{
  int8x16_t v3 = 0uLL;
  if (gGenPolyDegree <= 0xEuLL)
  {
    uint64_t v4 = 15 - gGenPolyDegree;
    do
    {
      unsigned __int8 v5 = *result++;
      unsigned __int8 v6 = v5 ^ v3.i8[0];
      uint64_t v7 = gIndexTable[(v5 ^ v3.i8[0]) & 0xF];
      int8x16_t v3 = (int8x16_t)vshrq_n_u64((uint64x2_t)v3, 8uLL);
      if (v7 != 15) {
        int8x16_t v3 = veorq_s8(vqtbl1q_s8(*(int8x16_t *)((char *)&gAlphaTable + v7), (int8x16_t)xmmword_1E259DB20), v3);
      }
      uint64_t v8 = gIndexTable[v6 >> 4];
      if (v8 != 15) {
        int8x16_t v3 = veorq_s8(vshlq_n_s8(vqtbl1q_s8(*(int8x16_t *)((char *)&gAlphaTable + v8), (int8x16_t)xmmword_1E259DB20), 4uLL), v3);
      }
      --v4;
    }
    while (v4);
  }
  if (a3 >= 1)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      int8x16_t v10 = v3;
      *(unsigned char *)(a2 + i) = *(unsigned char *)((unint64_t)&v10 | i & 0xF);
    }
  }
  return result;
}

int8x16_t RSEncodeSimd(uint64_t a1, int a2, int8x16_t result)
{
  result.i64[0] = 0;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x250], 8) = 0u;
  if (a2 >= 1)
  {
    uint64_t v3 = 8 - a2;
    do
    {
      int8x16_t v4 = veorq_s8(*(int8x16_t *)(a1 + 128), *(int8x16_t *)(a1 + 16 * v3));
      uint64_t v5 = 6u;
      unsigned __int8 v6 = (int8x16_t *)(a1 + 144);
      do
      {
        v6[-1] = veorq_s8(vqtbl1q_s8((int8x16_t)gPolyMulTable[v5], v4), *v6);
        ++v6;
        --v5;
      }
      while (v5 * 16);
      uint64_t result = vqtbl1q_s8((int8x16_t)gPolyMulTable[0], v4);
      *(int8x16_t *)(a1 + 224) = result;
      ++v3;
    }
    while (v3 != 8);
  }
  return result;
}

uint64_t RSEncodeSimd2Nibbles(uint64_t result, int a2)
{
  *(_OWORD *)(result + 20_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 12_Block_object_dispose(&STACK[0x250], 8) = 0u;
  if (a2 >= 1)
  {
    uint64_t v2 = 8 - a2;
    v3.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v3.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    do
    {
      int8x16_t v4 = veorq_s8(*(int8x16_t *)(result + 128), *(int8x16_t *)(result + 16 * v2));
      int8x16_t v5 = vandq_s8(v4, v3);
      int8x16_t v6 = (int8x16_t)vshrq_n_u8((uint8x16_t)v4, 4uLL);
      uint64_t v7 = 6u;
      uint64_t v8 = (int8x16_t *)(result + 128);
      int8x16_t v9 = (int8x16_t *)(result + 128);
      do
      {
        int8x16_t v10 = v9[1];
        ++v9;
        int8x16_t v11 = veorq_s8(vqtbl1q_s8((int8x16_t)gPolyMulTable[v7], v5), v10);
        *uint64_t v8 = v11;
        *uint64_t v8 = veorq_s8(vshlq_n_s8(vqtbl1q_s8((int8x16_t)gPolyMulTable[v7], v6), 4uLL), v11);
        uint64_t v8 = v9;
        --v7;
      }
      while (v7 * 16);
      *(int8x16_t *)(result + 224) = vsliq_n_s8(vqtbl1q_s8((int8x16_t)gPolyMulTable[0], v5), vqtbl1q_s8((int8x16_t)gPolyMulTable[0], v6), 4uLL);
      ++v2;
    }
    while (v2 != 8);
  }
  return result;
}

uint64_t Decode(int8x16_t *a1, uint64_t a2, int a3, unsigned __int8 *a4, uint64_t a5, int8x16_t *a6)
{
  v60[2] = *MEMORY[0x1E4F143B8];
  if (_RS_isOptimizationEnabled)
  {
    *(_DWORD *)((char *)v60 + 3) = 0;
    LODWORD(v60[0]) = 0;
    uint64_t v6 = gGenPolyDegree;
    if (gGenPolyDegree)
    {
      int v7 = 0;
      uint64_t v8 = 0;
      int8x16_t v9 = vqtbl1q_s8((int8x16_t)xmmword_1E259DB30, *a1);
      v10.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v10.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      int8x16_t v11 = vbicq_s8(vtstq_s8(*a6, *a6), vceqq_s8(v9, v10));
      v12.i64[0] = 0x8989898989898989;
      v12.i64[1] = 0x8989898989898989;
      uint64_t v13 = v60;
      do
      {
        if ((int)v8 <= (int)v6) {
          int v14 = v6;
        }
        else {
          int v14 = v8;
        }
        int8x16_t v15 = vaddq_s8(v9, (int8x16_t)xmmword_1E259DB40);
        int8x16_t v9 = vmlsq_s8(v15, (int8x16_t)vshrq_n_u8((uint8x16_t)vuzp2q_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v12.i8), (int8x16_t)vmull_high_u8((uint8x16_t)v15, v12)), 3uLL), v10);
        if ((a3 & 0x80000000) == 0)
        {
          int8x16_t v16 = vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_1E259DB50, v9), v11);
          unint64_t v17 = v16.i64[1] & 0xFFFFFFFFFFFFFFLL ^ v16.i64[0] ^ ((v16.i64[1] & 0xFFFFFFFFFFFFFFuLL ^ v16.i64[0]) >> 32);
          uint64_t v18 = gIndexTable[(BYTE2(v17) ^ v17 ^ ((unsigned __int16)(WORD1(v17) ^ v17) >> 8))];
          if (v18 != 15)
          {
            uint64_t v19 = (v14 + v7);
            char v20 = v13;
            uint64_t v21 = a4;
            uint64_t v22 = (a3 + 1);
            do
            {
              if (!v19) {
                break;
              }
              uint64_t v23 = *v21;
              if (v23 != 15) {
                *v20 ^= gAlphaTable[v23 + v18];
              }
              ++v21;
              --v19;
              ++v20;
              --v22;
            }
            while (v22);
          }
        }
        if (v8) {
          *((unsigned char *)v60 + v_Block_object_dispose(&STACK[0x250], 8) = gIndexTable[*((unsigned __int8 *)v60 + v8)];
        }
        ++v8;
        --v7;
        uint64_t v13 = (void *)((char *)v13 + 1);
      }
      while (v8 != v6);
    }
    if (a3 >= 1)
    {
      uint64_t v24 = 0;
      int v25 = LOBYTE(v60[0]);
      do
      {
        uint64_t v26 = *(unsigned __int8 *)(a2 + v24);
        if (v26 > 7) {
          break;
        }
        int v27 = v25;
        if (v6 >= 2)
        {
          __int16 v28 = (char *)&gAlphaTable[v26 + 1];
          int v29 = (unsigned __int8 *)v60 + 1;
          uint64_t v30 = v6 - 1;
          int v27 = v25;
          do
          {
            unsigned int v32 = *v29++;
            uint64_t v31 = v32;
            if (v32 != 15) {
              v27 ^= v28[v31];
            }
            v28 += v26 + 1;
            --v30;
          }
          while (v30);
        }
        if (v27) {
          LOBYTE(v27) = gAlphaTable[gIndexTable[v27] - *(unsigned __int8 *)(a5 + v24) + 15];
        }
        a1->i8[v26] = v27;
        ++v24;
      }
      while (v24 != a3);
    }
  }
  else
  {
    uint64_t v33 = 0;
    memset(v59, 0, 7);
    memset(v60, 170, 15);
    do
    {
      *((unsigned char *)v60 + v33) = gIndexTable[a1->u8[v33]];
      ++v33;
    }
    while (v33 != 15);
    uint64_t v34 = gGenPolyDegree;
    if (gGenPolyDegree)
    {
      int v35 = 0;
      uint64_t v36 = 0;
      long long v37 = v59;
      do
      {
        uint64_t v38 = 0;
        unint64_t v39 = 0;
        uint64_t v40 = v36;
        if ((int)v36 <= (int)v34) {
          LODWORD(v36) = v34;
        }
        uint64_t v41 = (v36 + v35);
        uint64_t v36 = v40 + 1;
        int v42 = 14 * (v40 + 1);
        do
        {
          if (a6->i8[v38])
          {
            int v43 = *((unsigned __int8 *)v60 + v38);
            if (v43 != 15) {
              v39 ^= gAlphaTable[v42 + v43];
            }
          }
          v42 -= v36;
          ++v38;
        }
        while (v38 != 15);
        if ((a3 & 0x80000000) == 0)
        {
          uint64_t v44 = gIndexTable[v39];
          if (v44 != 15)
          {
            int v45 = v37;
            __int16 v46 = a4;
            uint64_t v47 = (a3 + 1);
            do
            {
              if (!v41) {
                break;
              }
              uint64_t v48 = *v46;
              if (v48 != 15) {
                *v45 ^= gAlphaTable[v48 + v44];
              }
              ++v46;
              --v41;
              ++v45;
              --v47;
            }
            while (v47);
          }
        }
        if (v40) {
          v59[v40] = gIndexTable[v59[v40]];
        }
        --v35;
        ++v37;
      }
      while (v36 != v34);
    }
    if (a3 >= 1)
    {
      uint64_t v49 = 0;
      int v50 = v59[0];
      do
      {
        uint64_t v51 = *(unsigned __int8 *)(a2 + v49);
        if (v51 > 7) {
          break;
        }
        int v52 = v50;
        if (v34 >= 2)
        {
          unsigned int v53 = (char *)&gAlphaTable[v51 + 1];
          int v54 = &v59[1];
          uint64_t v55 = v34 - 1;
          int v52 = v50;
          do
          {
            unsigned int v57 = *v54++;
            uint64_t v56 = v57;
            if (v57 != 15) {
              v52 ^= v53[v56];
            }
            v53 += v51 + 1;
            --v55;
          }
          while (v55);
        }
        if (v52) {
          LOBYTE(v52) = gAlphaTable[gIndexTable[v52] - *(unsigned __int8 *)(a5 + v49) + 15];
        }
        a1->i8[v51] = v52;
        ++v49;
      }
      while (v49 != a3);
    }
  }
  return 0;
}

unsigned char *RSCalculateGammaPoly(unsigned char *result, int a2, uint64_t a3)
{
  id *result = 1;
  if (a2 >= 1)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      uint64_t v4 = (14 - *(unsigned char *)(a3 + i));
      uint64_t v5 = i;
      do
      {
        if (result[v5]) {
          result[v5 + 1] ^= gAlphaTable[gIndexTable[result[v5]] + v4];
        }
        uint64_t v6 = v5-- + 1;
      }
      while (v6 > 1);
    }
  }
  return result;
}

uint64_t RSCalculateGammaDerEvalAtErasures(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 >= 1)
  {
    for (uint64_t i = 0; i != a3; *(unsigned char *)(result + i++) = gIndexTable[v5])
    {
      unint64_t v5 = *(unsigned __int8 *)(a2 + 1);
      if (a3 >= 3)
      {
        int v6 = 2 * *(unsigned __int8 *)(a4 + i) + 2;
        for (unint64_t j = 3; j <= a3; j += 2)
        {
          if (*(unsigned char *)(a2 + j)) {
            v5 ^= gAlphaTable[v6 + gIndexTable[*(unsigned __int8 *)(a2 + j)]];
          }
          v6 += 2 * *(unsigned __int8 *)(a4 + i) + 2;
        }
      }
    }
  }
  return result;
}

unsigned char *RSConvertToAlphaPow(unsigned char *result, unsigned __int8 *a2, int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v3 = (a3 + 1);
    do
    {
      int v4 = *a2++;
      *result++ = gIndexTable[v4];
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t RSDecodeSimd(uint64_t result, uint64_t a2, int a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  memset(v30, 0, sizeof(v30));
  int8x16_t v29 = 0u;
  uint64_t v5 = gGenPolyDegree;
  if (gGenPolyDegree)
  {
    int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = -1;
    int8x16_t v9 = &v29;
    uint64_t v10 = 14;
    do
    {
      uint64_t v11 = 0;
      if ((int)v7 <= (int)v5) {
        int v12 = v5;
      }
      else {
        int v12 = v7;
      }
      uint64_t v13 = (v12 + v6);
      int8x16_t v14 = 0uLL;
      int8x16_t v15 = gAlphaTable;
      do
      {
        int8x16_t v14 = veorq_s8(vqtbl1q_s8(gGFMulTable[v15[v10]], *(int8x16_t *)(result + v11)), v14);
        v15 += v8;
        v11 += 16;
      }
      while (v11 != 240);
      if ((a3 & 0x80000000) == 0)
      {
        int8x16_t v16 = v9;
        unint64_t v17 = a4;
        uint64_t v18 = (a3 + 1);
        do
        {
          if (!v13) {
            break;
          }
          uint64_t v19 = *v17;
          if (v19 != 15) {
            int8x16_t *v16 = veorq_s8(*v16, vqtbl1q_s8(gGFMulTable[gAlphaTable[v19]], v14));
          }
          ++v17;
          --v13;
          ++v16;
          --v18;
        }
        while (v18);
      }
      ++v7;
      v10 += 14;
      --v8;
      --v6;
      ++v9;
    }
    while (v7 != v5);
  }
  if (a3 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = a3;
    int8x16_t v22 = v29;
    do
    {
      uint64_t v23 = *(unsigned __int8 *)(a2 + v20);
      if (v23 > 7) {
        break;
      }
      int8x16_t v24 = v22;
      if (v5 >= 2)
      {
        int v25 = &gAlphaTable[v23 + 1];
        uint64_t v26 = (int8x16_t *)v30;
        uint64_t v27 = v5 - 1;
        int8x16_t v24 = v22;
        do
        {
          int8x16_t v28 = *v26++;
          int8x16_t v24 = veorq_s8(vqtbl1q_s8(gGFMulTable[*v25], v28), v24);
          v25 += v23 + 1;
          --v27;
        }
        while (v27);
      }
      *(int8x16_t *)(result + 16 * v23) = vqtbl1q_s8(gGFMulTable[gInverseTable[gAlphaTable[*(unsigned __int8 *)(a5 + v20++)]]], v24);
    }
    while (v20 != v21);
  }
  return result;
}

void OUTLINED_FUNCTION_9_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x250], 8) = a1;
}

uint64_t RSUtil_SetOptimizationModeForFECUnit(int a1, unsigned int a2)
{
  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2;
  _RSU_FECOptimizationMode[a2] = a1;
  char v7 = 1;
  do
  {
    char v8 = v7;
    v5 |= _RSU_FECOptimizationMode[v4] != 0;
    uint64_t v4 = 1;
    char v7 = 0;
  }
  while ((v8 & 1) != 0);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136316674;
      uint64_t v13 = v9;
      __int16 v14 = 2080;
      int8x16_t v15 = "RSUtil_SetOptimizationModeForFECUnit";
      __int16 v16 = 1024;
      int v17 = 83;
      __int16 v18 = 1024;
      unsigned int v19 = a2;
      __int16 v20 = 1024;
      int v21 = a1;
      __int16 v22 = 1024;
      int v23 = v5 & 1;
      __int16 v24 = 1024;
      int v25 = 1;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Selected FEC Optimization: unit %d, finalFECMode: %d, RSOptimization: %d, interleaved SIMD load/store instr available: %d", (uint8_t *)&v12, 0x34u);
    }
  }
  _RSU_FECOptimizationMode[v6] = a1;
  return RS_SetOptimizationEnabled(v5 & 1);
}

uint64_t RSUtil_SetOptimizationMode(int a1)
{
  RSUtil_SetOptimizationModeForFECUnit(a1, 0);

  return RSUtil_SetOptimizationModeForFECUnit(a1, 1u);
}

uint64_t RSU_Encode(uint64_t a1, __int16 *a2, int a3, void *a4, _DWORD *a5, _DWORD *a6, int *a7, int *a8, _WORD *a9, char a10)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  if (a3 >= 9)
  {
    uint64_t v36 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RSU_Encode_cold_1();
      }
    }
  }
  else
  {
    uint64_t v38 = a7;
    unint64_t v39 = a8;
    __int16 v18 = a9;
    int v19 = 8 / a3;
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v47[12] = v20;
    v46[1] = v20;
    *(_OWORD *)uint64_t v47 = v20;
    int v21 = 8 % a3;
    v46[0] = v20;
    if (8 / a3 * a3 >= 1)
    {
      uint64_t v22 = 0;
      do
      {
        *((_DWORD *)v46 + v21 + v22) = (int)v22 / v19;
        int v23 = v21 + 1 + v22++;
      }
      while (v23 != 8);
    }
    if (!a9 || !a10) {
      goto LABEL_15;
    }
    memset(v45, 0, sizeof(v45));
    memset(v44, 0, sizeof(v44));
    memset(v43, 0, sizeof(v43));
    if (a3 >= 1)
    {
      uint64_t v24 = a3;
      int v25 = v43;
      uint64_t v26 = v44;
      uint64_t v27 = v45;
      int8x16_t v28 = a2;
      int8x16_t v29 = v45;
      do
      {
        __int16 v30 = *v28;
        v28 += 2;
        *int8x16_t v29 = v30;
        v29 += 16;
        *v26++ = 2;
        *v25++ = v27;
        uint64_t v27 = v29;
        --v24;
      }
      while (v24);
    }
    uint64_t v31 = 0;
    memset(v42, 0, sizeof(v42));
    unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v40[1] = v32;
    v40[2] = v32;
    uint64_t v33 = v42;
    v40[0] = v32;
    do
    {
      *(void *)((char *)v40 + v31) = v33;
      v31 += 8;
      v33 += 2;
    }
    while (v31 != 56);
    uint64_t v34 = _RSU_EncodeByteBuffer((uint64_t)v43, v44, a3, v40, 0, 0, 8 / a3, v21, (uint64_t)v46);
    if (!v34)
    {
      for (uint64_t i = 0; i != 14; i += 2)
        *v18++ = v42[i];
LABEL_15:
      uint64_t v36 = _RSU_EncodeByteBuffer(a1, a2, a3, a4, a5, a6, 8 / a3, v21, (uint64_t)v46);
      if (v36)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RSU_Encode_cold_2();
          }
        }
      }
      else
      {
        *uint64_t v38 = v19;
        int *v39 = v21;
      }
      goto LABEL_17;
    }
    uint64_t v36 = v34;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RSU_Encode_cold_3();
      }
    }
  }
LABEL_17:
  kdebug_trace();
  return v36;
}

uint64_t _RSU_EncodeByteBuffer(uint64_t a1, _DWORD *a2, int a3, void *a4, _DWORD *a5, _DWORD *a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9 = a6;
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  LODWORD(v14) = *a2;
  if (a3 >= 2)
  {
    int8x16_t v15 = a2 + 1;
    uint64_t v16 = a3 - 1;
    do
    {
      int v18 = *v15++;
      int v17 = v18;
      if (v18 > (int)v14) {
        LODWORD(v14) = v17;
      }
      --v16;
    }
    while (v16);
  }
  switch(a7)
  {
    case 4:
      uint64_t v14 = (v14 & 1) + v14;
      memset(v154, 0, 15);
      v40.i64[0] = 0xAAAAAAAAAAAAAAAALL;
      v40.i64[1] = 0xAAAAAAAAAAAAAAAALL;
      int8x16_t v152 = v40;
      int8x16_t v153 = v40;
      int8x16_t v150 = v40;
      int8x16_t v151 = v40;
      int8x16_t v148 = v40;
      int8x16_t v149 = v40;
      int8x16_t v146 = v40;
      int8x16_t v147 = v40;
      int8x16_t v144 = v40;
      int8x16_t v145 = v40;
      int8x16_t v142 = v40;
      int8x16_t v143 = v40;
      int8x16_t v140 = v40;
      int8x16_t v141 = v40;
      int8x16_t v139 = v40;
      if (_RSU_FECOptimizationMode[0] < 2u)
      {
        if ((int)v14 >= 1)
        {
          uint64_t v41 = 0;
          do
          {
            uint64_t v42 = v41 | 1;
            if (a8 <= 7)
            {
              uint64_t v43 = a8;
              do
              {
                uint64_t v44 = *(int *)(a9 + 4 * v43);
                uint64_t v45 = (int)a2[v44];
                if (v41 >= v45)
                {
                  char v47 = 0;
                  *((unsigned char *)v154 + v43) = 0;
                }
                else
                {
                  uint64_t v46 = *(void *)(a1 + 8 * v44);
                  *((unsigned char *)v154 + v43) = *(unsigned char *)(v46 + v41) >> 4;
                  char v47 = *(unsigned char *)(v46 + v41) & 0xF;
                }
                uint64_t v48 = (char *)v154 + v43 + 3;
                *((unsigned char *)v154 + v43 + 1) = v47;
                if (v42 >= v45)
                {
                  char v50 = 0;
                  *(v48 - 1) = 0;
                }
                else
                {
                  uint64_t v49 = *(void *)(a1 + 8 * v44);
                  *(v48 - 1) = *(unsigned char *)(v49 + v42) >> 4;
                  char v50 = *(unsigned char *)(v49 + v42) & 0xF;
                }
                *((unsigned char *)v154 + v43 + 3) = v50;
                v43 += 4;
              }
              while (v43 < 8);
            }
            RSEncode((unsigned __int8 *)v154, &v154[1], 7);
            *(unsigned char *)(*a4 + v41) = 16 * LOBYTE(v154[1]);
            *(unsigned char *)(*a4 + v41) |= BYTE1(v154[1]) & 0xF;
            *(unsigned char *)(*a4 + v42) = 16 * BYTE2(v154[1]);
            *(unsigned char *)(*a4 + v42) |= BYTE3(v154[1]) & 0xF;
            v41 += 2;
          }
          while ((int)v14 > (int)v41);
        }
        goto LABEL_105;
      }
      if (_RSU_FECOptimizationMode[0] != 2)
      {
LABEL_178:
        uint64_t v20 = 2150825985;
LABEL_179:
        LODWORD(v101) = 1;
        uint64_t v9 = a6;
        if (!a6) {
          goto LABEL_181;
        }
        goto LABEL_180;
      }
      if ((int)v14 < 1)
      {
LABEL_105:
        uint64_t v20 = 0;
        goto LABEL_179;
      }
      uint64_t v57 = 0;
      int v125 = 4 * a3;
      v58.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v58.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      while (1)
      {
        int v59 = v57 + 32;
        if (a8 <= 7) {
          break;
        }
LABEL_95:
        int8x16_t v40 = RSEncodeSimd((uint64_t)&v139, v125, v40);
        if ((int)v14 >= v59)
        {
          v169.val[0] = vsliq_n_s8(v148, v147, 4uLL);
          int8x16_t v40 = v149;
          v169.val[1] = vsliq_n_s8(v150, v149, 4uLL);
          long long v78 = (char *)(*a4 + v57);
          vst2q_s8(v78, v169);
          v58.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v58.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        }
        else
        {
          int v75 = 0;
          uint64_t v76 = 0;
          v58.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v58.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          do
          {
            uint64_t v77 = v57 + v76;
            if (v57 + v76 >= v14) {
              break;
            }
            int8x16_t v135 = v147;
            *(unsigned char *)(v77 + *a4) = 16 * *(unsigned char *)((unint64_t)&v135 | v75 & 0xF);
            int8x16_t v136 = v148;
            *(unsigned char *)(v77 + *a4) |= *(unsigned char *)((unint64_t)&v136 | v75 & 0xF) & 0xF;
            if (v77 + 1 >= v14)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v116 = VRTraceErrorLogLevelToCSTR();
                double v117 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v156 = v116;
                  __int16 v157 = 2080;
                  long long v158 = "_RSU_GatherToParityFourSymbols";
                  __int16 v159 = 1024;
                  int v160 = 369;
                  __int16 v161 = 1024;
                  int v162 = v14;
                  __int16 v163 = 1024;
                  int v164 = v57;
                  __int16 v165 = 1024;
                  int v166 = v75;
                  _os_log_error_impl(&dword_1E1EA4000, v117, OS_LOG_TYPE_ERROR, " [%s] %s:%d Cannot fit all parity into packet. Size=%d, offset=%d, codewordIdx=%d", buf, 0x2Eu);
                }
              }
              goto LABEL_178;
            }
            int8x16_t v133 = v149;
            *(unsigned char *)(*a4 + v57 + v76 + 1) = 16 * *(unsigned char *)((unint64_t)&v133 | v75 & 0xF);
            int8x16_t v40 = v150;
            int8x16_t v134 = v150;
            *(unsigned char *)(*a4 + v57 + v76 + 1) |= *(unsigned char *)((unint64_t)&v134 | v75 & 0xF) & 0xF;
            v76 += 2;
            ++v75;
          }
          while (v76 != 32);
        }
        v57 += 32;
        BOOL v79 = (int)v14 <= v59;
        uint64_t v20 = 0;
        if (v79) {
          goto LABEL_179;
        }
      }
      uint64_t v60 = a8;
      while (1)
      {
        uint64_t v61 = *(int *)(a9 + 4 * v60);
        uint64_t v62 = (int)a2[v61];
        if (v57 >= v62) {
          int v63 = 2;
        }
        else {
          int v63 = (int)v62 < v59;
        }
        if (v63)
        {
          if (v63 != 2)
          {
            uint64_t v64 = 0;
            uint64_t v65 = v60 + 2;
            int8x16_t v40 = *(&v139 + v60 + 1);
            long long v66 = *((_OWORD *)&v139 + v60 + 3);
            uint64_t v67 = v57;
            do
            {
              if (v67 >= v62)
              {
                char v69 = 0;
                v139.i8[16 * v60 + v64] = 0;
              }
              else
              {
                uint64_t v68 = *(void *)(a1 + 8 * v61);
                v139.i8[16 * v60 + v64] = *(unsigned char *)(v68 + v67) >> 4;
                char v69 = *(unsigned char *)(v68 + v67) & 0xF;
              }
              int8x16_t v138 = v40;
              *(unsigned char *)((unint64_t)&v138 | v64 & 0xF) = v69;
              int8x16_t v40 = v138;
              *(&v139 + v60 + 1) = v138;
              if (v67 + 1 >= v62)
              {
                char v71 = 0;
                v139.i8[16 * v65 + v64] = 0;
              }
              else
              {
                uint64_t v70 = *(void *)(a1 + 8 * v61) + v67;
                v139.i8[16 * v65 + v64] = *(unsigned char *)(v70 + 1) >> 4;
                char v71 = *(unsigned char *)(v70 + 1) & 0xF;
              }
              long long v137 = v66;
              *(unsigned char *)((unint64_t)&v137 | v64 & 0xF) = v71;
              long long v66 = v137;
              *((_OWORD *)&v139 + v60 + 3) = v137;
              ++v64;
              v67 += 2;
            }
            while (v64 != 16);
            goto LABEL_94;
          }
          long long v74 = &v139.i8[16 * v60];
          int8x16_t v40 = 0uLL;
          *(_OWORD *)long long v74 = 0u;
          *((_OWORD *)v74 + 1) = 0u;
          *((_OWORD *)v74 + 2) = 0u;
        }
        else
        {
          int v72 = (const char *)(*(void *)(a1 + 8 * v61) + v57);
          int8x16x2_t v168 = vld2q_s8(v72);
          uint64_t v73 = &v139.i8[16 * v60];
          *(uint8x16_t *)uint64_t v73 = vshrq_n_u8((uint8x16_t)v168.val[0], 4uLL);
          *((int8x16_t *)v73 + 1) = vandq_s8(v168.val[0], v58);
          *((uint8x16_t *)v73 + 2) = vshrq_n_u8((uint8x16_t)v168.val[1], 4uLL);
          int8x16_t v40 = vandq_s8(v168.val[1], v58);
        }
        *(&v142 + v60) = v40;
LABEL_94:
        v60 += 4;
        if (v60 >= 8) {
          goto LABEL_95;
        }
      }
    case 2:
      memset(v154, 0, 15);
      v51.i64[0] = 0xAAAAAAAAAAAAAAAALL;
      v51.i64[1] = 0xAAAAAAAAAAAAAAAALL;
      int8x16_t v152 = v51;
      int8x16_t v153 = v51;
      int8x16_t v150 = v51;
      int8x16_t v151 = v51;
      int8x16_t v148 = v51;
      int8x16_t v149 = v51;
      int8x16_t v146 = v51;
      int8x16_t v147 = v51;
      int8x16_t v144 = v51;
      int8x16_t v145 = v51;
      int8x16_t v142 = v51;
      int8x16_t v143 = v51;
      int8x16_t v140 = v51;
      int8x16_t v141 = v51;
      int8x16_t v139 = v51;
      if (_RSU_FECOptimizationMode[0] < 2u)
      {
        if ((int)v14 >= 1)
        {
          unsigned int v121 = a6;
          uint64_t v52 = 0;
          do
          {
            if (a8 <= 7)
            {
              uint64_t v53 = a8;
              do
              {
                uint64_t v54 = *(int *)(a9 + 4 * v53);
                if (v52 >= (int)a2[v54])
                {
                  char v56 = 0;
                  *((unsigned char *)v154 + v53) = 0;
                }
                else
                {
                  uint64_t v55 = *(void *)(a1 + 8 * v54);
                  *((unsigned char *)v154 + v53) = *(unsigned char *)(v55 + v52) >> 4;
                  char v56 = *(unsigned char *)(v55 + v52) & 0xF;
                }
                *((unsigned char *)v154 + v53 + 1) = v56;
                v53 += 2;
              }
              while (v53 < 8);
            }
            RSEncode((unsigned __int8 *)v154, &v154[1], 7);
            *(unsigned char *)(*a4 + v52) = 16 * LOBYTE(v154[1]);
            *(unsigned char *)(*a4 + v52) |= BYTE1(v154[1]) & 0xF;
            *(unsigned char *)(a4[1] + v52) = 16 * BYTE2(v154[1]);
            *(unsigned char *)(a4[1] + v52) |= BYTE3(v154[1]) & 0xF;
            *(unsigned char *)(a4[2] + v52) = 16 * BYTE4(v154[1]);
            *(unsigned char *)(a4[2] + v52++) |= BYTE5(v154[1]) & 0xF;
          }
          while (v52 != v14);
LABEL_68:
          uint64_t v20 = 0;
          uint64_t v9 = v121;
LABEL_140:
          LODWORD(v101) = 3;
          if (!v9) {
            goto LABEL_181;
          }
          goto LABEL_180;
        }
LABEL_139:
        uint64_t v20 = 0;
        goto LABEL_140;
      }
      uint64_t v20 = 2150825985;
      if (_RSU_FECOptimizationMode[0] != 2) {
        goto LABEL_140;
      }
      if ((int)v14 < 1) {
        goto LABEL_139;
      }
      int v80 = 0;
      uint64_t v81 = 0;
      int v123 = 2 * a3;
      unsigned int v121 = a6;
      v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      while (1)
      {
        int v83 = v81 + 16;
        int v84 = (int)v14 <= (int)v81 ? v81 : v14;
        if (a8 <= 7) {
          break;
        }
LABEL_129:
        int v93 = v84;
        int v126 = v80;
        int8x16_t v51 = RSEncodeSimd((uint64_t)&v139, v123, v51);
        if ((int)v14 >= v83)
        {
          *(int8x16_t *)(*a4 + v81) = vshlq_n_s8(v147, 4uLL);
          v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          *(int8x16_t *)(*a4 + v81) = vorrq_s8(*(int8x16_t *)(*a4 + v81), vandq_s8(v148, v82));
          *(int8x16_t *)(a4[1] + v81) = vshlq_n_s8(v149, 4uLL);
          *(int8x16_t *)(a4[1] + v81) = vorrq_s8(*(int8x16_t *)(a4[1] + v81), vandq_s8(v150, v82));
          *(int8x16_t *)(a4[2] + v81) = vshlq_n_s8(v151, 4uLL);
          uint64_t v100 = a4[2];
          int8x16_t v51 = vorrq_s8(*(int8x16_t *)(v100 + v81), vandq_s8(v152, v82));
          *(int8x16_t *)(v100 + v81) = v51;
          int v95 = v126;
        }
        else
        {
          uint64_t v94 = 0;
          int v95 = v126;
          v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          do
          {
            uint64_t v96 = 0;
            uint64_t v97 = 2 * (int)v94;
            uint64_t v98 = (int)v97 + 8;
            uint64_t v99 = v97 + 9;
            do
            {
              if (v93 + v126 == v96) {
                break;
              }
              long long v130 = *((_OWORD *)&v139 + v98);
              *(unsigned char *)(a4[v94] + v81 + v96) = 16 * *(unsigned char *)((unint64_t)&v130 | v96 & 0xF);
              int8x16_t v51 = *(&v139 + v99);
              int8x16_t v131 = v51;
              *(unsigned char *)(a4[v94] + v81 + v96) |= *(unsigned char *)((unint64_t)&v131 | v96 & 0xF) & 0xF;
              ++v96;
            }
            while (v96 != 16);
            ++v94;
          }
          while (v94 != 3);
        }
        int v80 = v95 - 16;
        v81 += 16;
        if ((int)v14 <= v83) {
          goto LABEL_68;
        }
      }
      uint64_t v85 = a8;
      while (1)
      {
        uint64_t v86 = *(int *)(a9 + 4 * v85);
        uint64_t v87 = (int)a2[v86];
        if (v81 >= v87) {
          int v88 = 2;
        }
        else {
          int v88 = (int)v87 < v83;
        }
        if (v88)
        {
          if (v88 != 2)
          {
            uint64_t v89 = 0;
            int8x16_t v51 = *(&v139 + v85 + 1);
            do
            {
              if (v81 + v89 >= v87)
              {
                char v91 = 0;
                v139.i8[16 * v85 + v89] = 0;
              }
              else
              {
                uint64_t v90 = *(void *)(a1 + 8 * v86) + v81;
                v139.i8[16 * v85 + v89] = *(unsigned char *)(v90 + v89) >> 4;
                char v91 = *(unsigned char *)(v90 + v89) & 0xF;
              }
              int8x16_t v132 = v51;
              *(unsigned char *)((unint64_t)&v132 | v89 & 0xF) = v91;
              int8x16_t v51 = v132;
              *(&v139 + v85 + 1) = v132;
              ++v89;
            }
            while (v89 != 16);
            goto LABEL_128;
          }
          int8x16_t v51 = 0uLL;
          *((_OWORD *)&v139 + v85) = 0u;
        }
        else
        {
          uint64_t v92 = *(void *)(a1 + 8 * v86);
          *((uint8x16_t *)&v139 + v85) = vshrq_n_u8(*(uint8x16_t *)(v92 + v81), 4uLL);
          int8x16_t v51 = vandq_s8(*(int8x16_t *)(v92 + v81), v82);
        }
        *(&v139 + v85 + 1) = v51;
LABEL_128:
        v85 += 2;
        if (v85 >= 8) {
          goto LABEL_129;
        }
      }
    case 1:
      memset(v154, 0, 15);
      v19.i64[0] = 0xAAAAAAAAAAAAAAAALL;
      v19.i64[1] = 0xAAAAAAAAAAAAAAAALL;
      int8x16_t v152 = v19;
      int8x16_t v153 = v19;
      int8x16_t v150 = v19;
      int8x16_t v151 = v19;
      int8x16_t v148 = v19;
      int8x16_t v149 = v19;
      int8x16_t v146 = v19;
      int8x16_t v147 = v19;
      int8x16_t v144 = v19;
      int8x16_t v145 = v19;
      int8x16_t v142 = v19;
      int8x16_t v143 = v19;
      int8x16_t v140 = v19;
      int8x16_t v141 = v19;
      int8x16_t v139 = v19;
      if (_RSU_FECOptimizationMode[0])
      {
        if (_RSU_FECOptimizationMode[0] != 1)
        {
          uint64_t v20 = 2150825985;
          if (_RSU_FECOptimizationMode[0] != 2) {
            goto LABEL_185;
          }
          if ((int)v14 >= 1)
          {
            int v21 = 0;
            uint64_t v22 = 0;
            double v119 = a6;
            int v122 = a3;
            while (1)
            {
              int v23 = (int)v14 <= (int)v22 ? v22 : v14;
              int v24 = v22 + 16;
              if (a8 <= 7) {
                break;
              }
LABEL_33:
              int v124 = v23;
              int v35 = v21;
              RSEncodeSimd2Nibbles((uint64_t)&v139, a3);
              if ((int)v14 >= v24)
              {
                uint64_t v39 = 0;
                a3 = v122;
                int v37 = v35;
                do
                {
                  *(int8x16_t *)(a4[v39] + v22) = *(&v147 + v39);
                  ++v39;
                }
                while (v39 != 7);
              }
              else
              {
                uint64_t v36 = 0;
                int v37 = v35;
                a3 = v122;
                do
                {
                  for (uint64_t i = 0; i != 16; ++i)
                  {
                    if (v124 + v35 == i) {
                      break;
                    }
                    long long v128 = *((_OWORD *)&v139 + v36 + 8);
                    *(unsigned char *)(a4[v36] + v22 + i) = *(unsigned char *)((unint64_t)&v128 | i & 0xF);
                  }
                  ++v36;
                }
                while (v36 != 7);
              }
              int v21 = v37 - 16;
              v22 += 16;
              if ((int)v14 <= v24) {
                goto LABEL_173;
              }
            }
            uint64_t v25 = a8;
            while (1)
            {
              uint64_t v26 = *(int *)(a9 + 4 * v25);
              uint64_t v27 = (int)a2[v26];
              if (v22 >= v27) {
                int v28 = 2;
              }
              else {
                int v28 = (int)v27 < v24;
              }
              if (v28)
              {
                long long v29 = 0uLL;
                if (v28 != 2)
                {
                  uint64_t v30 = 0;
                  long long v31 = *((_OWORD *)&v139 + v25);
                  int v32 = v21 + v27;
                  do
                  {
                    BOOL v33 = __OFSUB__(v32--, 1);
                    if (v32 < 0 != v33) {
                      char v34 = 0;
                    }
                    else {
                      char v34 = *(unsigned char *)(*(void *)(a1 + 8 * v26) + (int)v22 + v30);
                    }
                    long long v129 = v31;
                    *(unsigned char *)((unint64_t)&v129 | v30 & 0xF) = v34;
                    long long v31 = v129;
                    *((_OWORD *)&v139 + v25) = v129;
                    ++v30;
                  }
                  while (v30 != 16);
                  goto LABEL_32;
                }
              }
              else
              {
                long long v29 = *(_OWORD *)(*(void *)(a1 + 8 * v26) + v22);
              }
              *((_OWORD *)&v139 + v25) = v29;
LABEL_32:
              if (++v25 == 8) {
                goto LABEL_33;
              }
            }
          }
          goto LABEL_174;
        }
        if ((int)v14 >= 1)
        {
          double v119 = a6;
          uint64_t v102 = 0;
          do
          {
            if (a8 <= 7)
            {
              uint64_t v103 = a8;
              do
              {
                uint64_t v104 = *(int *)(a9 + 4 * v103);
                if (v102 >= (int)a2[v104]) {
                  char v105 = 0;
                }
                else {
                  char v105 = *(unsigned char *)(*(void *)(a1 + 8 * v104) + v102);
                }
                *((unsigned char *)v154 + v103++) = v105;
              }
              while (v103 != 8);
            }
            RSEncode2Nibbles((unsigned __int8 *)v154, (uint64_t)&v154[1], 7);
            for (uint64_t j = 0; j != 7; ++j)
              *(unsigned char *)(a4[j] + v102) = *((unsigned char *)&v154[1] + j);
            ++v102;
          }
          while (v102 != v14);
LABEL_173:
          uint64_t v20 = 0;
          uint64_t v9 = v119;
          goto LABEL_185;
        }
      }
      else if ((int)v14 >= 1)
      {
        double v119 = a6;
        uint64_t v107 = 0;
        do
        {
          if (a8 <= 7)
          {
            uint64_t v108 = a8;
            do
            {
              uint64_t v109 = *(int *)(a9 + 4 * v108);
              if (v107 >= (int)a2[v109]) {
                LOBYTE(v110) = 0;
              }
              else {
                int v110 = *(unsigned __int8 *)(*(void *)(a1 + 8 * v109) + v107) >> 4;
              }
              *((unsigned char *)v154 + v108++) = v110;
            }
            while (v108 != 8);
          }
          RSEncode((unsigned __int8 *)v154, &v154[1], 7);
          for (uint64_t k = 0; k != 7; ++k)
            *(unsigned char *)(a4[k] + v107) = 16 * *((unsigned char *)&v154[1] + k);
          if (a8 <= 7)
          {
            uint64_t v112 = a8;
            do
            {
              uint64_t v113 = *(int *)(a9 + 4 * v112);
              if (v107 >= (int)a2[v113]) {
                char v114 = 0;
              }
              else {
                char v114 = *(unsigned char *)(*(void *)(a1 + 8 * v113) + v107) & 0xF;
              }
              *((unsigned char *)v154 + v112++) = v114;
            }
            while (v112 != 8);
          }
          RSEncode((unsigned __int8 *)v154, &v154[1], 7);
          for (uint64_t m = 0; m != 7; ++m)
            *(unsigned char *)(a4[m] + v107) |= *((unsigned char *)&v154[1] + m) & 0xF;
          ++v107;
        }
        while (v107 != v14);
        goto LABEL_173;
      }
LABEL_174:
      uint64_t v20 = 0;
LABEL_185:
      LODWORD(v101) = 7;
      if (!v9)
      {
LABEL_181:
        if (a5)
        {
          uint64_t v101 = v101;
          do
          {
            *a5++ = v14;
            --v101;
          }
          while (v101);
        }
        return v20;
      }
LABEL_180:
      *uint64_t v9 = v101;
      goto LABEL_181;
  }
  uint64_t v20 = 2150825985;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _RSU_EncodeByteBuffer_cold_1();
    }
  }
  return v20;
}

uint64_t _RSU_DecodeByteBuffer(uint64_t a1, int *a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, uint64_t a10, int8x16_t *a11)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 2150825985;
  if (a1 && a2)
  {
    *(void *)CMTime buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    int v17 = *a2;
    if (a5 >= 1)
    {
      uint64_t v18 = a5;
      int8x16_t v19 = a2;
      do
      {
        int v21 = *v19++;
        int v20 = v21;
        if (v21 > v17) {
          int v17 = v20;
        }
        --v18;
      }
      while (v18);
    }
    int v65 = a6 / a3 * a3;
    switch(a3)
    {
      case 4:
        if (!a4)
        {
          if (v17 >= 1)
          {
            uint64_t v48 = 0;
            do
            {
              unint64_t v49 = 0;
              uint64_t v50 = v48 | 1;
              do
              {
                uint64_t v51 = *(int *)(a7 + 4 * v49);
                uint64_t v52 = a2[v51];
                if (v48 >= v52)
                {
                  char v55 = 0;
                  buf[v49 + 1] = 0;
                  uint64_t v54 = v49;
                }
                else
                {
                  uint64_t v53 = *(void *)(a1 + 8 * v51);
                  buf[v49] = a11->i8[v49] & (*(unsigned char *)(v53 + v48) >> 4);
                  uint64_t v54 = v49 | 1;
                  char v55 = *(unsigned char *)(v53 + v48) & a11->i8[v49 + 1] & 0xF;
                }
                buf[v54] = v55;
                if (v50 >= v52)
                {
                  char v58 = 0;
                  buf[v49 + 3] = 0;
                  uint64_t v57 = v49 | 2;
                }
                else
                {
                  uint64_t v56 = *(void *)(a1 + 8 * v51);
                  buf[v49 + 2] = a11->i8[v49 + 2] & (*(unsigned char *)(v56 + v50) >> 4);
                  uint64_t v57 = v49 + 3;
                  char v58 = *(unsigned char *)(v56 + v50) & a11->i8[v49 + 3] & 0xF;
                }
                buf[v57] = v58;
                BOOL v46 = v49 >= 0xB;
                v49 += 4;
              }
              while (!v46);
              Decode((int8x16_t *)buf, a8, a6, a9, a10, a11);
              if (v65 >= 1)
              {
                for (uint64_t i = 0; i < v65; i += 4)
                {
                  uint64_t v60 = *(unsigned __int8 *)(a8 + i);
                  uint64_t v61 = *(int *)(a7 + 4 * v60);
                  *(unsigned char *)(*(void *)(a1 + 8 * v61) + v4_Block_object_dispose(&STACK[0x250], 8) = buf[*(unsigned __int8 *)(a8 + i + 1)] | (16 * buf[v60]);
                  *(unsigned char *)(*(void *)(a1 + 8 * v61) + v50) = buf[*(unsigned __int8 *)(a8 + i + 3)] | (16 * buf[*(unsigned __int8 *)(a8 + i + 2)]);
                }
              }
              v48 += 2;
            }
            while (v17 > (int)v48);
          }
          return 0;
        }
        break;
      case 2:
        if ((a4 & 0xFFFFFFFD) == 0)
        {
          if (v17 >= 1)
          {
            uint64_t v39 = 0;
            unint64_t v40 = a4;
            do
            {
              unint64_t v41 = v40;
              do
              {
                uint64_t v42 = *(int *)(a7 + 4 * v41);
                if (v39 >= a2[v42])
                {
                  char v45 = 0;
                  buf[v41 + 1] = 0;
                  unint64_t v44 = v41;
                }
                else
                {
                  uint64_t v43 = *(void *)(a1 + 8 * v42);
                  buf[v41] = a11->i8[v41] & (*(unsigned char *)(v43 + v39) >> 4);
                  unint64_t v44 = v41 + 1;
                  char v45 = *(unsigned char *)(v43 + v39) & a11->i8[v41 + 1] & 0xF;
                }
                buf[v44] = v45;
                BOOL v46 = v41 >= 0xD;
                v41 += 2;
              }
              while (!v46);
              Decode((int8x16_t *)buf, a8, a6, a9, a10, a11);
              if (v65 >= 1)
              {
                for (uint64_t j = 0; j < v65; j += 2)
                  *(unsigned char *)(*(void *)(a1 + 8 * *(int *)(a7 + 4 * *(unsigned __int8 *)(a8 + j))) + v39) = buf[*(unsigned __int8 *)(a8 + j + 1)] | (16 * buf[*(unsigned __int8 *)(a8 + j)]);
              }
              ++v39;
            }
            while (v39 != v17);
          }
          return 0;
        }
        break;
      case 1:
        if (a4 <= 3)
        {
          if (v17 >= 1)
          {
            uint64_t v22 = 0;
            uint64_t v23 = a4;
            uint64_t v66 = a6;
            do
            {
              uint64_t v24 = v23;
              do
              {
                uint64_t v25 = *(int *)(a7 + 4 * v24);
                if (v22 >= a2[v25]) {
                  LOBYTE(v26) = 0;
                }
                else {
                  int v26 = a11->u8[v24] & (*(unsigned __int8 *)(*(void *)(a1 + 8 * v25) + v22) >> 4);
                }
                buf[v24++] = v26;
              }
              while (v24 != 15);
              Decode((int8x16_t *)buf, a8, a6, a9, a10, a11);
              if (a6 >= 1)
              {
                uint64_t v27 = v66;
                int v28 = (unsigned __int8 *)a8;
                do
                {
                  unsigned int v29 = *v28++;
                  *(unsigned char *)(*(void *)(a1 + 8 * *(int *)(a7 + 4 * v29)) + v22) = 16 * buf[v29];
                  --v27;
                }
                while (v27);
              }
              uint64_t v30 = v23;
              do
              {
                uint64_t v31 = *(int *)(a7 + 4 * v30);
                if (v22 >= a2[v31]) {
                  char v32 = 0;
                }
                else {
                  char v32 = *(unsigned char *)(*(void *)(a1 + 8 * v31) + v22) & a11->i8[v30] & 0xF;
                }
                buf[v30++] = v32;
              }
              while (v30 != 15);
              Decode((int8x16_t *)buf, a8, a6, a9, a10, a11);
              if (a6 >= 1)
              {
                uint64_t v33 = v66;
                char v34 = (unsigned __int8 *)a8;
                do
                {
                  unsigned int v35 = *v34++;
                  uint64_t v36 = *(void *)(a1 + 8 * *(int *)(a7 + 4 * v35));
                  *(unsigned char *)(v36 + v22) |= buf[v35];
                  --v33;
                }
                while (v33);
              }
              ++v22;
            }
            while (v22 != v17);
          }
          return 0;
        }
        break;
      default:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RSU_DecodeByteBuffer_cold_1();
          }
        }
        break;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v37 = VRTraceErrorLogLevelToCSTR();
    uint64_t v38 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_RSU_DecodeByteBuffer";
      __int16 v68 = 1024;
      int v69 = 698;
      __int16 v70 = 2048;
      uint64_t v71 = a1;
      __int16 v72 = 2048;
      uint64_t v73 = a2;
      _os_log_error_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid input argument recoveryPacketBuffers[%p] recoveryPacketSizes[%p]", buf, 0x30u);
    }
  }
  return v13;
}

uint64_t RSU_Decode(uint64_t a1, int *a2, int *a3, int a4, int a5, int a6, uint64_t a7, int a8)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v162 + 12) = v16;
  v161[1] = v16;
  v162[0] = v16;
  v161[0] = v16;
  memset(v154, 170, 7);
  uint64_t v17 = (7 % a5) ^ 0xFu;
  v160.i64[0] = -1;
  v160.i64[1] = -1;
  if (a6 <= 14)
  {
    uint64_t v18 = 0;
    do
    {
      *((_DWORD *)v161 + a6 + v1_Block_object_dispose(&STACK[0x250], 8) = (int)v18 / a5;
      int v19 = a6 + 1 + v18++;
    }
    while (v19 != 15);
  }
  int v20 = 0;
  int v21 = v17 - a6;
  if ((int)v17 > a6)
  {
    uint64_t v22 = a6;
    do
    {
      if (!a2[*((int *)v161 + v22)])
      {
        if (v20 >= 7)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RSU_Decode_cold_2();
            }
          }
          goto LABEL_100;
        }
        v154[v20++] = v22;
        v160.i8[v22] = 0;
      }
      ++v22;
      --v21;
    }
    while (v21);
  }
  if (7 % a5)
  {
    if (v20 <= 7) {
      uint64_t v23 = 7;
    }
    else {
      uint64_t v23 = v20;
    }
    if (v17 <= 0xE) {
      int v24 = 14;
    }
    else {
      int v24 = (7 % a5) ^ 0xF;
    }
    uint64_t v25 = (v24 + 1);
    int v26 = (char *)&v154[v20];
    uint64_t v27 = v23 - v20;
    while (v27)
    {
      *v26++ = v17;
      v160.i8[v17++] = 0;
      ++v20;
      --v27;
      if (v25 == v17) {
        goto LABEL_20;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RSU_Decode_cold_6();
      }
    }
LABEL_100:
    uint64_t v75 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RSU_Decode_cold_1();
      }
    }
    goto LABEL_159;
  }
LABEL_20:
  uint64_t v159 = 0;
  RSCalculateGammaPoly(&v159, v20, (uint64_t)v154);
  *(_DWORD *)((char *)v153 + 3) = -1431655766;
  v153[0] = -1431655766;
  RSCalculateGammaDerEvalAtErasures((uint64_t)v153, (uint64_t)&v159, v20, (uint64_t)v154);
  uint64_t v158 = 0;
  RSConvertToAlphaPow(&v158, (unsigned __int8 *)&v159, 7);
  if (a7 && a8)
  {
    v156[0] = 0;
    v156[1] = 0;
    *(void *)((char *)v157 + 6) = 0;
    v157[0] = 0;
    memset(v155, 0, 60);
    *(void *)&long long v168 = 0;
    long long v166 = 0u;
    long long v167 = 0u;
    long long v164 = 0u;
    long long v165 = 0u;
    uint64_t v28 = (a4 - 7 / a5);
    memset(buf, 0, sizeof(buf));
    if (a4 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v156;
      uint64_t v31 = a7 - 2 * (int)v28;
      while (v29 >= (int)v28)
      {
        int v32 = *(unsigned __int16 *)(v31 + 2 * v29);
        if (*(_WORD *)(v31 + 2 * v29)) {
          goto LABEL_28;
        }
LABEL_29:
        v155[v29] = v32;
        *(void *)&buf[8 * v29++] = v30++;
        if (a4 == v29) {
          goto LABEL_30;
        }
      }
      int v32 = a2[v29];
      if (!v32) {
        goto LABEL_29;
      }
LABEL_28:
      *uint64_t v30 = v32;
      int v32 = 2;
      goto LABEL_29;
    }
LABEL_30:
    uint64_t v33 = _RSU_DecodeByteBuffer((uint64_t)buf, v155, a5, a6, a4, v20, (uint64_t)v161, (uint64_t)v154, (unsigned __int8 *)&v158, (uint64_t)v153, &v160);
    if (v33)
    {
      uint64_t v75 = v33;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RSU_Decode_cold_5();
        }
      }
      goto LABEL_159;
    }
    if ((int)v28 >= 1)
    {
      char v34 = (unsigned __int16 *)v156;
      unsigned int v35 = a2;
      do
      {
        int v37 = *v34++;
        int v36 = v37;
        int v38 = *a3++;
        if (v38 < v36)
        {
          uint64_t v75 = 2150825985;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RSU_Decode_cold_3();
            }
          }
          goto LABEL_159;
        }
        *v35++ = v36;
        --v28;
      }
      while (v28);
    }
  }
  if (dword_1EADC1B84 != 2)
  {
    uint64_t v75 = _RSU_DecodeByteBuffer(a1, a2, a5, a6, a4, v20, (uint64_t)v161, (uint64_t)v154, (unsigned __int8 *)&v158, (uint64_t)v153, &v160);
    goto LABEL_159;
  }
  if (!a1 || !a2)
  {
    uint64_t v75 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v76 = VRTraceErrorLogLevelToCSTR();
      uint64_t v77 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v76;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_RSU_DecodeByteBufferSimd";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1139;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a1;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&buf[40] = a2;
        _os_log_error_impl(&dword_1E1EA4000, v77, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid input argument recoveryPacketBuffers[%p] recoveryPacketSizes[%p]", buf, 0x30u);
      }
    }
    goto LABEL_159;
  }
  long long v174 = 0u;
  long long v175 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  memset(buf, 0, sizeof(buf));
  int v39 = *a2;
  if (a4 >= 1)
  {
    uint64_t v40 = a4;
    unint64_t v41 = a2;
    do
    {
      int v43 = *v41++;
      int v42 = v43;
      if (v43 > v39) {
        int v39 = v42;
      }
      --v40;
    }
    while (v40);
  }
  uint64_t v44 = (v20 / a5 * a5);
  if (a5 == 1)
  {
    if (a6 > 3) {
      goto LABEL_158;
    }
    if (v39 < 1) {
      goto LABEL_205;
    }
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v137 = a6;
    long long v80 = 0uLL;
    v81.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v81.i64[1] = 0xF0F0F0F0F0F0F0FLL;
LABEL_106:
    int v82 = v79 + 16;
    char v83 = 1;
LABEL_107:
    char v84 = v83;
    uint64_t v85 = v137;
    while (1)
    {
      if (v160.i8[v85])
      {
        uint64_t v86 = *((int *)v161 + v85);
        uint64_t v87 = a2[v86];
        if (v79 >= v87) {
          int v88 = 2;
        }
        else {
          int v88 = (int)v87 < v82;
        }
        if (!v88)
        {
          int8x16_t v92 = *(int8x16_t *)(*(void *)(a1 + 8 * v86) + v79);
          if (v84) {
            int8x16_t v93 = (int8x16_t)vshrq_n_u8((uint8x16_t)v92, 4uLL);
          }
          else {
            int8x16_t v93 = vandq_s8(v92, v81);
          }
          *(int8x16_t *)&buf[16 * v85] = v93;
          goto LABEL_127;
        }
        if (v88 != 2)
        {
          uint64_t v89 = 0;
          long long v90 = *(_OWORD *)&buf[16 * v85];
          do
          {
            if (v79 + v89 >= v87)
            {
              long long v142 = v90;
              *(unsigned char *)((unint64_t)&v142 | v89 & 0xF) = 0;
              long long v90 = v142;
            }
            else
            {
              unsigned int v91 = *(unsigned __int8 *)(*(void *)(a1 + 8 * v86) + v79 + v89);
              if (v84)
              {
                long long v140 = v90;
                *(unsigned char *)((unint64_t)&v140 | v89 & 0xF) = v91 >> 4;
                long long v90 = v140;
              }
              else
              {
                long long v141 = v90;
                *(unsigned char *)((unint64_t)&v141 | v89 & 0xF) = v91 & 0xF;
                long long v90 = v141;
              }
            }
            *(_OWORD *)&buf[16 * v85] = v90;
            ++v89;
          }
          while (v89 != 16);
          goto LABEL_127;
        }
      }
      *(_OWORD *)&buf[16 * v85] = v80;
LABEL_127:
      if (++v85 == 15)
      {
        uint64_t v94 = v44;
        uint64_t v95 = v78;
        RSDecodeSimd((uint64_t)buf, (uint64_t)v154, v20, (unsigned __int8 *)&v158, (uint64_t)v153);
        v81.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v81.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        uint64_t v78 = v95;
        uint64_t v44 = v94;
        if ((int)v94 >= 1)
        {
          uint64_t v96 = 0;
          do
          {
            unint64_t v97 = v154[v96];
            if (v97 <= 7)
            {
              uint64_t v98 = *((int *)v161 + v97);
              if (a2[v98]) {
                int v99 = a2[v98];
              }
              else {
                int v99 = v39;
              }
              if (v79 >= v99) {
                int v100 = 2;
              }
              else {
                int v100 = v99 < v82;
              }
              if (v100)
              {
                if (v100 != 2)
                {
                  uint64_t v101 = 0;
                  if (v99 <= (int)v79) {
                    int v102 = v79;
                  }
                  else {
                    int v102 = v99;
                  }
                  uint64_t v103 = (v78 + v102);
                  do
                  {
                    if (v103 == v101) {
                      break;
                    }
                    long long v139 = *(_OWORD *)&buf[16 * v154[v96]];
                    char v104 = *(unsigned char *)((unint64_t)&v139 | v101 & 0xF);
                    uint64_t v105 = *(void *)(a1 + 8 * v98) + v79;
                    char v106 = (v84 & 1) != 0 ? 16 * v104 : *(unsigned char *)(v105 + v101) | v104 & 0xF;
                    *(unsigned char *)(v105 + v101++) = v106;
                  }
                  while (v101 != 16);
                }
              }
              else
              {
                int8x16_t v107 = *(int8x16_t *)&buf[16 * v97];
                uint64_t v108 = *(void *)(a1 + 8 * v98);
                if (v84) {
                  int8x16_t v109 = vshlq_n_s8(v107, 4uLL);
                }
                else {
                  int8x16_t v109 = vorrq_s8(*(int8x16_t *)(v108 + v79), vandq_s8(v107, v81));
                }
                *(int8x16_t *)(v108 + v79) = v109;
              }
            }
            ++v96;
          }
          while (v96 != v44);
        }
        char v83 = 0;
        long long v80 = 0uLL;
        if ((v84 & 1) == 0)
        {
          uint64_t v75 = 0;
          uint64_t v78 = (v78 - 16);
          v79 += 16;
          if (v39 <= v82) {
            goto LABEL_159;
          }
          goto LABEL_106;
        }
        goto LABEL_107;
      }
    }
  }
  if (a5 == 2)
  {
    if ((a6 & 0xFFFFFFFD) != 0) {
      goto LABEL_158;
    }
    if (v39 < 1) {
      goto LABEL_205;
    }
    int v111 = 0;
    uint64_t v112 = 0;
    v113.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v113.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    unint64_t v138 = a6;
LABEL_165:
    unint64_t v114 = v138;
    while (1)
    {
      if (v160.i8[v114])
      {
        uint64_t v115 = *((int *)v161 + v114);
        uint64_t v116 = a2[v115];
        if (v112 >= v116) {
          int v117 = 2;
        }
        else {
          int v117 = (int)v112 + 16 > (int)v116;
        }
        if (!v117)
        {
          uint64_t v122 = *(void *)(a1 + 8 * v115);
          *(uint8x16_t *)&buf[16 * v114] = vshrq_n_u8(*(uint8x16_t *)(v122 + v112), 4uLL);
          int8x16_t v121 = vandq_s8(*(int8x16_t *)(v122 + v112), v113);
          goto LABEL_180;
        }
        if (v117 != 2)
        {
          uint64_t v118 = 0;
          long long v119 = *(_OWORD *)&buf[16 * v114 + 16];
          do
          {
            if (v112 + v118 >= v116)
            {
              buf[16 * v114 + v118] = 0;
              long long v146 = v119;
              *(unsigned char *)((unint64_t)&v146 | v118 & 0xF) = 0;
              long long v119 = v146;
            }
            else
            {
              uint64_t v120 = *(void *)(a1 + 8 * v115) + v112;
              buf[16 * v114 + v118] = *(unsigned char *)(v120 + v118) >> 4;
              LOBYTE(v120) = *(unsigned char *)(v120 + v118) & 0xF;
              long long v145 = v119;
              *(unsigned char *)((unint64_t)&v145 | v118 & 0xF) = v120;
              long long v119 = v145;
            }
            *(_OWORD *)&buf[16 * v114 + 16] = v119;
            ++v118;
          }
          while (v118 != 16);
          goto LABEL_181;
        }
      }
      int8x16_t v121 = 0uLL;
      *(_OWORD *)&buf[16 * v114] = 0u;
LABEL_180:
      *(int8x16_t *)&buf[16 * v114 + 16] = v121;
LABEL_181:
      BOOL v62 = v114 >= 0xC;
      v114 += 2;
      if (v62)
      {
        int v123 = v111;
        uint64_t v124 = v44;
        RSDecodeSimd((uint64_t)buf, (uint64_t)v154, v20, (unsigned __int8 *)&v158, (uint64_t)v153);
        v113.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v113.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        int v125 = v123;
        uint64_t v44 = v124;
        int v126 = v112 + 16;
        if ((int)v124 >= 1)
        {
          uint64_t v127 = 0;
          do
          {
            unint64_t v128 = v154[v127];
            if (v128 <= 7)
            {
              uint64_t v129 = *((int *)v161 + v128);
              if (a2[v129]) {
                int v130 = a2[v129];
              }
              else {
                int v130 = v39;
              }
              if (v112 >= v130) {
                int v131 = 2;
              }
              else {
                int v131 = v130 < v126;
              }
              if (v131)
              {
                if (v131 != 2)
                {
                  uint64_t v132 = 0;
                  if (v130 <= (int)v112) {
                    int v133 = v112;
                  }
                  else {
                    int v133 = v130;
                  }
                  uint64_t v134 = (v125 + v133);
                  do
                  {
                    if (v134 == v132) {
                      break;
                    }
                    long long v143 = *(_OWORD *)&buf[16 * v154[v127]];
                    *(unsigned char *)(*(void *)(a1 + 8 * v129) + v112 + v132) = 16
                                                                         * *(unsigned char *)((unint64_t)&v143 | v132 & 0xF);
                    long long v144 = *(_OWORD *)&buf[16 * v154[v127 | 1]];
                    *(unsigned char *)(*(void *)(a1 + 8 * v129) + v112 + v132) |= *(unsigned char *)((unint64_t)&v144 | v132 & 0xF) & 0xF;
                    ++v132;
                  }
                  while (v132 != 16);
                }
              }
              else
              {
                *(int8x16_t *)(*(void *)(a1 + 8 * v129) + v112) = vshlq_n_s8(*(int8x16_t *)&buf[16 * v128], 4uLL);
                *(int8x16_t *)(*(void *)(a1 + 8 * v129) + v112) = vorrq_s8(*(int8x16_t *)(*(void *)(a1 + 8 * v129) + v112), vandq_s8(*(int8x16_t *)&buf[16 * v154[v127 | 1]], v113));
              }
            }
            v127 += 2;
          }
          while ((int)v44 > (int)v127);
        }
        uint64_t v75 = 0;
        int v111 = v125 - 16;
        v112 += 16;
        if (v39 <= v126) {
          goto LABEL_159;
        }
        goto LABEL_165;
      }
    }
  }
  if (a5 != 4)
  {
    uint64_t v75 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RSU_Decode_cold_4();
      }
    }
    goto LABEL_159;
  }
  if (a6)
  {
LABEL_158:
    uint64_t v75 = 2150825985;
    goto LABEL_159;
  }
  if (v39 < 1)
  {
LABEL_205:
    uint64_t v75 = 0;
    goto LABEL_159;
  }
  uint64_t v45 = 0;
  v46.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v46.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  do
  {
    unint64_t v47 = 0;
    do
    {
      if (!v160.i8[v47 * 4])
      {
LABEL_65:
        int8x16_t v60 = 0uLL;
        *(_OWORD *)&buf[4 * v47] = 0u;
        *(_OWORD *)&buf[(4 * v47) | 0x10] = 0u;
        *(_OWORD *)&buf[(4 * v47) | 0x20] = 0u;
LABEL_67:
        *(int8x16_t *)&buf[(4 * v47) | 0x30] = v60;
        goto LABEL_68;
      }
      uint64_t v48 = SLODWORD(v161[v47]);
      uint64_t v49 = a2[v48];
      if (v45 >= v49) {
        int v50 = 2;
      }
      else {
        int v50 = (int)v45 + 32 > (int)v49;
      }
      if (!v50)
      {
        uint64_t v61 = (const char *)(*(void *)(a1 + 8 * v48) + v45);
        int8x16x2_t v177 = vld2q_s8(v61);
        *(uint8x16_t *)&buf[4 * v47] = vshrq_n_u8((uint8x16_t)v177.val[0], 4uLL);
        *(int8x16_t *)&buf[(4 * v47) | 0x10] = vandq_s8(v177.val[0], v46);
        *(uint8x16_t *)&buf[(4 * v47) | 0x20] = vshrq_n_u8((uint8x16_t)v177.val[1], 4uLL);
        int8x16_t v60 = vandq_s8(v177.val[1], v46);
        goto LABEL_67;
      }
      if (v50 == 2) {
        goto LABEL_65;
      }
      uint64_t v51 = 0;
      uint64_t v52 = (v47 * 4) | 2;
      long long v53 = *(_OWORD *)&buf[16 * ((v47 * 4) | 1)];
      long long v54 = *(_OWORD *)&buf[16 * ((v47 * 4) | 3)];
      uint64_t v55 = v45;
      do
      {
        if (v55 >= v49)
        {
          char v57 = 0;
          buf[4 * v47 + v51] = 0;
        }
        else
        {
          uint64_t v56 = *(void *)(a1 + 8 * v48);
          buf[4 * v47 + v51] = *(unsigned char *)(v56 + v55) >> 4;
          char v57 = *(unsigned char *)(v56 + v55) & 0xF;
        }
        long long v152 = v53;
        *(unsigned char *)((unint64_t)&v152 | v51 & 0xF) = v57;
        long long v53 = v152;
        *(_OWORD *)&buf[16 * ((v47 * 4) | 1)] = v152;
        if (v55 + 1 >= v49)
        {
          char v59 = 0;
          buf[16 * v52 + v51] = 0;
        }
        else
        {
          uint64_t v58 = *(void *)(a1 + 8 * v48) + v55;
          buf[16 * v52 + v51] = *(unsigned char *)(v58 + 1) >> 4;
          char v59 = *(unsigned char *)(v58 + 1) & 0xF;
        }
        long long v151 = v54;
        *(unsigned char *)((unint64_t)&v151 | v51 & 0xF) = v59;
        long long v54 = v151;
        *(_OWORD *)&buf[16 * ((v47 * 4) | 3)] = v151;
        ++v51;
        v55 += 2;
      }
      while (v51 != 16);
LABEL_68:
      BOOL v62 = v47++ >= 2;
    }
    while (!v62);
    uint64_t v63 = v44;
    RSDecodeSimd((uint64_t)buf, (uint64_t)v154, v20, (unsigned __int8 *)&v158, (uint64_t)v153);
    v46.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v46.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    uint64_t v44 = v63;
    int v64 = v45 + 32;
    if ((int)v63 >= 1)
    {
      unint64_t v65 = 0;
      do
      {
        unint64_t v66 = v154[v65];
        if (v66 <= 7)
        {
          uint64_t v67 = *((int *)v161 + v66);
          if (a2[v67]) {
            int v68 = a2[v67];
          }
          else {
            int v68 = v39;
          }
          if (v45 >= v68) {
            int v69 = 2;
          }
          else {
            int v69 = v68 < v64;
          }
          if (v69)
          {
            if (v69 != 2)
            {
              int v70 = 0;
              for (uint64_t i = 0; i != 32; i += 2)
              {
                uint64_t v72 = v45 + i;
                if (v45 + i >= v68) {
                  break;
                }
                long long v149 = *(_OWORD *)&buf[16 * v154[v65]];
                *(unsigned char *)(v72 + *(void *)(a1 + 8 * v67)) = 16 * *(unsigned char *)((unint64_t)&v149 | v70 & 0xF);
                long long v150 = *(_OWORD *)&buf[16 * v154[v65 | 1]];
                *(unsigned char *)(v72 + *(void *)(a1 + 8 * v67)) |= *(unsigned char *)((unint64_t)&v150 | v70 & 0xF) & 0xF;
                if (v72 + 1 >= v68)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    uint64_t v135 = VRTraceErrorLogLevelToCSTR();
                    int8x16_t v136 = *MEMORY[0x1E4F47A50];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                    {
                      v155[0] = 136316418;
                      *(void *)&v155[1] = v135;
                      LOWORD(v155[3]) = 2080;
                      *(void *)((char *)&v155[3] + 2) = "_RSU_GatherDecodedDataFourSymbols";
                      HIWORD(v155[5]) = 1024;
                      v155[6] = 1088;
                      LOWORD(v155[7]) = 1024;
                      *(_DWORD *)((char *)&v155[7] + 2) = v68;
                      HIWORD(v155[8]) = 1024;
                      v155[9] = v45 + i + 1;
                      LOWORD(v155[10]) = 1024;
                      *(_DWORD *)((char *)&v155[10] + 2) = v70;
                      _os_log_error_impl(&dword_1E1EA4000, v136, OS_LOG_TYPE_ERROR, " [%s] %s:%d Cannot gather all parity from packet. Size=%d, offset=%d, codewordIdx=%d", (uint8_t *)v155, 0x2Eu);
                    }
                  }
                  goto LABEL_158;
                }
                long long v147 = *(_OWORD *)&buf[16 * v154[v65 | 2]];
                *(unsigned char *)(*(void *)(a1 + 8 * v67) + v45 + i + 1) = 16
                                                                    * *(unsigned char *)((unint64_t)&v147 | v70 & 0xF);
                long long v148 = *(_OWORD *)&buf[16 * v154[v65 | 3]];
                uint64_t v73 = *(void *)(a1 + 8 * v67) + v45 + i;
                *(unsigned char *)(v73 + 1) |= *(unsigned char *)((unint64_t)&v148 | v70++ & 0xF) & 0xF;
              }
            }
          }
          else
          {
            v178.val[0] = vsliq_n_s8(*(int8x16_t *)&buf[16 * v154[v65 | 1]], *(int8x16_t *)&buf[16 * v66], 4uLL);
            v178.val[1] = vsliq_n_s8(*(int8x16_t *)&buf[16 * v154[v65 | 3]], *(int8x16_t *)&buf[16 * v154[v65 | 2]], 4uLL);
            uint64_t v74 = (char *)(*(void *)(a1 + 8 * v67) + v45);
            vst2q_s8(v74, v178);
          }
        }
        v65 += 4;
      }
      while ((int)v44 > (int)v65);
    }
    uint64_t v75 = 0;
    v45 += 32;
  }
  while (v39 > v64);
LABEL_159:
  kdebug_trace();
  return v75;
}

uint64_t RSU_GetPacketLayout(uint64_t result, int a2, int *a3, int *a4)
{
  *a3 = (8 - a2) / (int)result;
  *a4 = 7 / (int)result;
  return result;
}

BOOL RSU_IsRecoverable(int a1)
{
  return a1 < 8;
}

uint64_t EncCreateHandle(uint64_t *a1, _DWORD *a2)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2148007937;
  if (*a2 && a2[1])
  {
    char v5 = (char *)malloc_type_calloc(1uLL, 0x188uLL, 0x10E00402095C4D0uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      *(void *)char v5 = *((void *)a2 + 12);
      *((void *)v5 + 1) = *((void *)a2 + 14);
      *((_DWORD *)v5 + 62) = a2[30];
      if (!*((_DWORD *)v5 + 4))
      {
        if (a2[16]) {
          int v7 = 1;
        }
        else {
          int v7 = 2;
        }
        *((_DWORD *)v5 + 4) = v7;
      }
      int v8 = a2[31];
      if ((v8 - 10) <= 0xFFFFFFF6)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            EncCreateHandle_cold_2();
          }
        }
LABEL_116:
        free(v6);
        return v3;
      }
      uint64_t v116 = a1;
      *((_DWORD *)v5 + 94) = v8;
      *((_DWORD *)v5 + 96) = a2[50];
      int v11 = *((unsigned __int8 *)a2 + 84);
      int v12 = a2[20];
      if (*((unsigned char *)a2 + 84) || (v12 - 1) <= 1)
      {
        uint64_t v13 = (const char *)*((void *)a2 + 7);
        int v14 = *a2;
        int v15 = a2[1];
        memset(valuePtr, 170, 20);
        *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v131 = v16;
        long long v132 = v16;
        long long v129 = v16;
        long long v130 = v16;
        long long v127 = v16;
        long long v128 = v16;
        long long v125 = v16;
        long long v126 = v16;
        long long v123 = v16;
        long long v124 = v16;
        *(_OWORD *)&__str[64] = v16;
        *(_OWORD *)&__str[80] = v16;
        *(_OWORD *)&__str[32] = v16;
        *(_OWORD *)&__str[48] = v16;
        *(_OWORD *)__str = v16;
        *(_OWORD *)&char __str[16] = v16;
        time_t v120 = 0xAAAAAAAAAAAAAAAALL;
        setlocale(0, "");
        time(&v120);
        uint64_t v17 = localtime(&v120);
        strftime(valuePtr, 0x14uLL, "%m%d%g_%H%M%S", v17);
        *((_DWORD *)v6 + 11) = v12;
        VCDiskUtils_CreateDirectory();
        if (v12 == 1)
        {
          snprintf(__str, 0x100uLL, "%s%s-txSourceYuv.%dx%d.%s.yuv", "/tmp/vcp/", valuePtr, v14, v15, "420v");
          uint64_t v18 = fopen(__str, "wb");
          *((void *)v6 + 43) = 0;
          *((void *)v6 + 44) = 0;
          *((void *)v6 + 42) = v18;
        }
        if (v11)
        {
          snprintf(__str, 0x100uLL, "%s%s-txBitstream.26l", "/tmp/vcp/", valuePtr);
          int v19 = fopen(__str, "wb");
          *((void *)v6 + 45) = v19;
          int __ptr = 50331648;
          fwrite(&__ptr, 1uLL, 4uLL, v19);
          if (v13)
          {
            size_t v20 = strlen(v13);
            fwrite(v13, 1uLL, v20 + 1, *((FILE **)v6 + 45));
          }
        }
      }
      *((void *)v6 + 14) = 0xC024000000000000;
      pthread_mutex_init((pthread_mutex_t *)(v6 + 120), 0);
      pthread_mutex_init((pthread_mutex_t *)(v6 + 184), 0);
      *((_DWORD *)v6 + 82) = 0;
      int v21 = a2[10];
      *((_DWORD *)v6 + _Block_object_dispose(&STACK[0x250], 8) = v21;
      *((_DWORD *)v6 + 9) = v21;
      *((_DWORD *)v6 + 10) = 1;
      CFDictionaryRef v22 = (const __CFDictionary *)*((void *)a2 + 6);
      if (v22)
      {
        *((void *)v6 + 32) = CFDictionaryGetValue(v22, (const void *)*MEMORY[0x1E4F44868]);
        *((void *)v6 + 33) = CFDictionaryGetValue(*((CFDictionaryRef *)a2 + 6), (const void *)*MEMORY[0x1E4F44B58]);
        *((void *)v6 + 34) = CFDictionaryGetValue(*((CFDictionaryRef *)a2 + 6), (const void *)*MEMORY[0x1E4F44BB0]);
      }
      uint64_t v23 = MEMORY[0x1E4F1FA48];
      *(_OWORD *)(v6 + 280) = *MEMORY[0x1E4F1FA48];
      *((void *)v6 + 37) = *(void *)(v23 + 16);
      *((_DWORD *)v6 + 92) = 1;
      unsigned int v24 = a2[3];
      *((void *)v6 + 6) = v24;
      int v25 = *a2;
      *((_WORD *)v6 + 29) = *a2;
      *((_WORD *)v6 + 2_Block_object_dispose(&STACK[0x250], 8) = a2[1];
      if (v24 == 1752589105 || v24 == 1635148593)
      {
        int32x2_t v26 = vdup_n_s32(v25 == 176);
        v27.i64[0] = v26.u32[0];
        v27.i64[1] = v26.u32[1];
        *((int8x16_t *)a2 + 1) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v27, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x2BCuLL), (int8x16_t)xmmword_1E259DB80);
      }
      int v28 = a2[8];
      *((_DWORD *)v6 + 15) = v28;
      *((_WORD *)v6 + 126) = 2 * (v28 < 2200001);
      *((_DWORD *)v6 + 16) = 0;
      int v29 = a2[9];
      if (v29) {
        int v29 = 1000 / v29;
      }
      *((_DWORD *)v6 + 1_Block_object_dispose(&STACK[0x250], 8) = 0x7FFFFFFF;
      *((_DWORD *)v6 + 17) = v29;
      *(int32x2_t *)(v6 + 76) = vmovn_s64(*((int64x2_t *)a2 + 1));
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int v31 = VCFeatureFlagManager_UseAvconferencedOniOSSpecficFeatures();
      int v32 = (const void **)MEMORY[0x1E4F1CFD0];
      if (v31)
      {
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        char v34 = (const void **)MEMORY[0x1E4F44BD0];
        if (ErrorLogLevelForModule <= 6)
        {
          int v38 = (const void *)*MEMORY[0x1E4F44BD0];
        }
        else
        {
          uint64_t v35 = VRTraceErrorLogLevelToCSTR();
          int v36 = *MEMORY[0x1E4F47A50];
          BOOL v37 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
          int v38 = *v34;
          if (v37)
          {
            *(_DWORD *)__str = 136315906;
            *(void *)&__str[4] = v35;
            *(_WORD *)&__str[12] = 2080;
            *(void *)&__str[14] = "VCVideoEncoder_SetEncoderSpecification";
            *(_WORD *)&__str[22] = 1024;
            *(_DWORD *)&__str[24] = 362;
            *(_WORD *)&__str[28] = 2112;
            *(void *)&__str[30] = v38;
            _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Adding kVTCompressionSessionOption_AllowClientProcessEncode=%@ to encoderSpecification", __str, 0x26u);
          }
        }
        CFDictionaryAddValue(Mutable, v38, *v32);
      }
      else
      {
        int v39 = (const void *)VCAudioSessionCMS_SessionReference();
        if (v39) {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45640], v39);
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v40 = VRTraceErrorLogLevelToCSTR();
        unint64_t v41 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v42 = a2[18];
          *(_DWORD *)__str = 136316162;
          *(void *)&__str[4] = v40;
          *(_WORD *)&__str[12] = 2080;
          *(void *)&__str[14] = "VCVideoEncoder_SetEncoderSpecification";
          *(_WORD *)&__str[22] = 1024;
          *(_DWORD *)&__str[24] = 371;
          *(_WORD *)&__str[28] = 1024;
          *(_DWORD *)&__str[30] = 371;
          *(_WORD *)&__str[34] = 1024;
          *(_DWORD *)&__str[36] = v42;
          _os_log_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: HandoverReport: fUsingCellular=%d", __str, 0x28u);
        }
      }
      CFNumberRef v43 = CFNumberCreate(0, kCFNumberIntType, a2 + 18);
      CFDictionaryAddValue(Mutable, @"UsingCellular", v43);
      CFRelease(v43);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44AC0], *v32);
      FigCFDictionarySetInt64();
      FigCFDictionarySetInt64();
      uint64_t v44 = (const void *)*((void *)a2 + 17);
      if (v44) {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44AA0], v44);
      }
      int v45 = *((__int16 *)v6 + 29);
      int v46 = *((__int16 *)v6 + 28);
      long long v119 = Mutable;
      int v47 = a2[32];
      uint64_t v48 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(_DWORD *)__str = v45;
      CFNumberRef v49 = CFNumberCreate(0, kCFNumberIntType, __str);
      CFDictionaryAddValue(v48, (const void *)*MEMORY[0x1E4F24E10], v49);
      CFRelease(v49);
      *(_DWORD *)__str = v46;
      CFNumberRef v50 = CFNumberCreate(0, kCFNumberIntType, __str);
      CFDictionaryAddValue(v48, (const void *)*MEMORY[0x1E4F24D08], v50);
      CFRelease(v50);
      *(_DWORD *)__str = v47;
      uint64_t v51 = v119;
      CFNumberRef v52 = CFNumberCreate(0, kCFNumberIntType, __str);
      CFDictionaryAddValue(v48, (const void *)*MEMORY[0x1E4F24D70], v52);
      CFRelease(v52);
      long long v53 = (CFTypeRef *)(v6 + 304);
      CFTypeRef cf = v48;
      __int16 v54 = VCPCompressionSessionCreate();
      int v55 = VRTraceGetErrorLogLevelForModule();
      if (v54)
      {
        if (v55 >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            EncCreateHandle_cold_3();
          }
        }
        uint64_t v3 = -v54 | 0xA0080000;
      }
      else
      {
        if (v55 >= 7)
        {
          uint64_t v56 = VRTraceErrorLogLevelToCSTR();
          char v57 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v115 = *((void *)v6 + 38);
            int v58 = a2[31];
            int8x16_t v113 = FourccToCStr(a2[32]);
            int v59 = *a2;
            int v114 = a2[1];
            int8x16_t v60 = FourccToCStr(*((_DWORD *)v6 + 12));
            uint64_t v61 = *((void *)a2 + 14);
            *(_DWORD *)__str = 136317698;
            *(void *)&__str[4] = v56;
            *(_WORD *)&__str[12] = 2080;
            *(void *)&__str[14] = "EncCreateHandle";
            *(_WORD *)&__str[22] = 1024;
            *(_DWORD *)&__str[24] = 691;
            *(_WORD *)&__str[28] = 1024;
            *(_DWORD *)&__str[30] = 691;
            *(_WORD *)&__str[34] = 2048;
            *(void *)&__str[36] = v115;
            *(_WORD *)&__str[44] = 1024;
            *(_DWORD *)&__str[46] = v58;
            *(_WORD *)&__str[50] = 2080;
            *(void *)&__str[52] = v113;
            *(_WORD *)&__str[60] = 1024;
            *(_DWORD *)&__str[62] = v59;
            *(_WORD *)&__str[66] = 1024;
            *(_DWORD *)&__str[68] = v114;
            *(_WORD *)&__str[72] = 2080;
            *(void *)&__str[74] = v60;
            *(_WORD *)&__str[82] = 1024;
            *(_DWORD *)&__str[84] = v61;
            _os_log_impl(&dword_1E1EA4000, v57, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: Created encoder session=%p with tilesPerframe=%d, pixelFormat=%s, width=%d, height=%d codec=%s videoTransmitterHandle=0x%x", __str, 0x58u);
          }
        }
        CFNumberRef v62 = CFNumberCreate(0, kCFNumberIntType, a2 + 22);
        VCPCompressionSessionSetProperty();
        CFRelease(v62);
        if (a2[32] == 2016686640) {
          VCPCompressionSessionSetProperty();
        }
        if (*((void *)v6 + 32)) {
          VCPCompressionSessionSetProperty();
        }
        if (*((void *)v6 + 33)) {
          VCPCompressionSessionSetProperty();
        }
        if (*((void *)v6 + 34)) {
          VCPCompressionSessionSetProperty();
        }
        int v63 = *((_DWORD *)v6 + 62);
        *(_DWORD *)int valuePtr = v63;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v64 = VRTraceErrorLogLevelToCSTR();
          unint64_t v65 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v66 = *a2;
            int v67 = a2[1];
            *(_DWORD *)__str = 136316418;
            *(void *)&__str[4] = v64;
            *(_WORD *)&__str[12] = 2080;
            *(void *)&__str[14] = "_Enc_SetCompressionSessionProperties";
            *(_WORD *)&__str[22] = 1024;
            *(_DWORD *)&__str[24] = 470;
            *(_WORD *)&__str[28] = 1024;
            *(_DWORD *)&__str[30] = v66;
            *(_WORD *)&__str[34] = 1024;
            *(_DWORD *)&__str[36] = v67;
            *(_WORD *)&__str[40] = 1024;
            *(_DWORD *)&__str[42] = v63;
            _os_log_impl(&dword_1E1EA4000, v65, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d width=%d, height=%d, encodingMode=%d", __str, 0x2Eu);
          }
        }
        CFNumberRef v68 = CFNumberCreate(allocator, kCFNumberSInt32Type, valuePtr);
        VCPCompressionSessionSetProperty();
        CFRelease(v68);
        VCPCompressionSessionSetProperty();
        uint64_t v51 = v119;
        if (*((void *)a2 + 7))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v69 = VRTraceErrorLogLevelToCSTR();
            int v70 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              CFTypeRef v71 = *v53;
              uint64_t v72 = *((void *)a2 + 7);
              *(_DWORD *)__str = 136316162;
              *(void *)&__str[4] = v69;
              *(_WORD *)&__str[12] = 2080;
              *(void *)&__str[14] = "_Enc_SetCompressionSessionProperties";
              *(_WORD *)&__str[22] = 1024;
              *(_DWORD *)&__str[24] = 482;
              *(_WORD *)&__str[28] = 2048;
              *(void *)&__str[30] = v71;
              *(_WORD *)&__str[38] = 2080;
              *(void *)&__str[40] = v72;
              _os_log_impl(&dword_1E1EA4000, v70, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [FLS] Encoder[%p] featureListString=[%s]", __str, 0x30u);
            }
          }
          CFStringRef v73 = CFStringCreateWithCString(0, *((const char **)a2 + 7), 0);
          VCPCompressionSessionSetProperty();
          if (v73) {
            CFRelease(v73);
          }
        }
        CFNumberRef v74 = CFNumberCreate(0, kCFNumberIntType, v6 + 60);
        VCPCompressionSessionSetProperty();
        CFRelease(v74);
        CFNumberRef v75 = CFNumberCreate(0, kCFNumberIntType, v6 + 72);
        VCPCompressionSessionSetProperty();
        CFRelease(v75);
        CFNumberRef v76 = CFNumberCreate(0, kCFNumberIntType, a2 + 23);
        VCPCompressionSessionSetProperty();
        CFRelease(v76);
        CFNumberRef v77 = CFNumberCreate(0, kCFNumberIntType, a2 + 2);
        VCPCompressionSessionSetProperty();
        CFRelease(v77);
        CFNumberRef v78 = CFNumberCreate(0, kCFNumberIntType, a2 + 9);
        VCPCompressionSessionSetProperty();
        CFRelease(v78);
        uint64_t v79 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionaryAddValue(v79, (const void *)*MEMORY[0x1E4F45168], (const void *)*MEMORY[0x1E4F45468]);
        VCPCompressionSessionSetProperty();
        CFRelease(v79);
        CFNumberRef v80 = CFNumberCreate(0, kCFNumberIntType, a2 + 19);
        VCPCompressionSessionSetProperty();
        CFRelease(v80);
        if (*((void *)a2 + 17))
        {
          int v81 = VCPCompressionSessionSetProperty();
          if (v81)
          {
            int v82 = v81;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v83 = VRTraceErrorLogLevelToCSTR();
              char v84 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                uint64_t v112 = *((void *)a2 + 17);
                *(_DWORD *)__str = 136316162;
                *(void *)&__str[4] = v83;
                *(_WORD *)&__str[12] = 2080;
                *(void *)&__str[14] = "_Enc_SetCompressionSessionProperties";
                *(_WORD *)&__str[22] = 1024;
                *(_DWORD *)&__str[24] = 523;
                *(_WORD *)&__str[28] = 2112;
                *(void *)&__str[30] = v112;
                *(_WORD *)&__str[38] = 1024;
                *(_DWORD *)&__str[40] = v82;
                _os_log_error_impl(&dword_1E1EA4000, v84, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to set profile level property to %@ with error status=%d", __str, 0x2Cu);
              }
            }
          }
        }
        int v85 = a2[32];
        if (v85 == 875836518 || v85 == 875836534 || v85 == 2019963956)
        {
          int v86 = VCPCompressionSessionSetProperty();
          if (v86)
          {
            int v87 = v86;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v88 = VRTraceErrorLogLevelToCSTR();
              uint64_t v89 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                int v111 = FourccToCStr(a2[32]);
                *(_DWORD *)__str = 136316162;
                *(void *)&__str[4] = v88;
                *(_WORD *)&__str[12] = 2080;
                *(void *)&__str[14] = "_Enc_SetCompressionSessionProperties";
                *(_WORD *)&__str[22] = 1024;
                *(_DWORD *)&__str[24] = 534;
                *(_WORD *)&__str[28] = 2080;
                *(void *)&__str[30] = v111;
                *(_WORD *)&__str[38] = 1024;
                *(_DWORD *)&__str[40] = v87;
                _os_log_error_impl(&dword_1E1EA4000, v89, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to set profile level property for pixelFormat=%s with error status=%d", __str, 0x2Cu);
              }
            }
          }
        }
        LODWORD(v120) = 60;
        CFNumberRef v90 = CFNumberCreate(allocator, kCFNumberIntType, &v120);
        if (v90)
        {
          CFNumberRef v91 = v90;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v92 = VRTraceErrorLogLevelToCSTR();
            int8x16_t v93 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__str = 136315906;
              *(void *)&__str[4] = v92;
              *(_WORD *)&__str[12] = 2080;
              *(void *)&__str[14] = "_Enc_SetCompressionSessionProperties";
              *(_WORD *)&__str[22] = 1024;
              *(_DWORD *)&__str[24] = 545;
              *(_WORD *)&__str[28] = 1024;
              *(_DWORD *)&__str[30] = v120;
              _os_log_impl(&dword_1E1EA4000, v93, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setting priority %d on encoder", __str, 0x22u);
            }
          }
          VCPCompressionSessionSetProperty();
          CFRelease(v91);
        }
        if (*((unsigned char *)a2 + 144))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v94 = VRTraceErrorLogLevelToCSTR();
            uint64_t v95 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__str = 136315650;
              *(void *)&__str[4] = v94;
              *(_WORD *)&__str[12] = 2080;
              *(void *)&__str[14] = "_Enc_SetCompressionSessionProperties";
              *(_WORD *)&__str[22] = 1024;
              *(_DWORD *)&__str[24] = 551;
              _os_log_impl(&dword_1E1EA4000, v95, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setting temporal scaling properties on the encoder", __str, 0x1Cu);
            }
          }
          uint64_t v96 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          if (a2[37])
          {
            unint64_t v97 = 0;
            uint64_t v98 = (char *)(a2 + 38);
            do
            {
              CFNumberRef v99 = CFNumberCreate(0, kCFNumberSInt32Type, v98);
              CFArrayAppendValue(v96, v99);
              CFRelease(v99);
              ++v97;
              v98 += 4;
            }
            while (v97 < a2[37]);
          }
          int v100 = _Enc_CopyTemporalArray(v96, *((_DWORD *)v6 + 96));
          VCPCompressionSessionSetProperty();
          *(void *)__str = CFArrayGetCount(v100);
          CFRelease(v100);
          CFRelease(v96);
          CFNumberRef v101 = CFNumberCreate(allocator, kCFNumberCFIndexType, __str);
          if (v101)
          {
            CFNumberRef v102 = v101;
            VCPCompressionSessionSetProperty();
            CFRelease(v102);
          }
          uint64_t v51 = v119;
        }
        if (a2[51])
        {
          CFNumberRef v103 = CFNumberCreate(0, kCFNumberSInt32Type, a2 + 51);
          if (v103)
          {
            CFNumberRef v104 = v103;
            VCPCompressionSessionSetProperty();
            CFRelease(v104);
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v105 = VRTraceErrorLogLevelToCSTR();
            char v106 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v107 = a2[51];
              *(_DWORD *)__str = 136315906;
              *(void *)&__str[4] = v105;
              *(_WORD *)&__str[12] = 2080;
              *(void *)&__str[14] = "_Enc_SetCompressionSessionProperties";
              *(_WORD *)&__str[22] = 1024;
              *(_DWORD *)&__str[24] = 578;
              *(_WORD *)&__str[28] = 1024;
              *(_DWORD *)&__str[30] = v107;
              _os_log_impl(&dword_1E1EA4000, v106, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Set bitrateAveragingInterval=%u", __str, 0x22u);
            }
          }
        }
        VCPCompressionSessionSetProperty();
        uint64_t Handle = CreateHandle();
        *uint64_t v116 = Handle;
        if (Handle == 0xFFFFFFFFLL)
        {
          uint64_t v3 = 2148007941;
        }
        else
        {
          uint64_t v3 = 0;
          *((_DWORD *)v6 + 93) = *((unsigned __int8 *)a2 + 68);
          v6[380] = *((unsigned char *)a2 + 144);
          *((_DWORD *)v6 + 96) = a2[50];
        }
      }
      int8x16_t v109 = (const void *)*((void *)v6 + 40);
      if (v109) {
        CFRelease(v109);
      }
      if (v51) {
        CFRelease(v51);
      }
      if (cf) {
        CFRelease(cf);
      }
      if ((v3 & 0x80000000) != 0)
      {
        if (*v53)
        {
          CFRelease(*v53);
          *long long v53 = 0;
        }
        pthread_mutex_destroy((pthread_mutex_t *)(v6 + 120));
        pthread_mutex_destroy((pthread_mutex_t *)(v6 + 184));
        goto LABEL_116;
      }
      return 0;
    }
    else
    {
      return 2148007939;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      EncCreateHandle_cold_1(v9, a2, v10);
    }
  }
  return v3;
}

uint64_t EncCloseHandle()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2148007938;
  }
  uint64_t v1 = v0;
  CheckOutHandleDebug();
  uint64_t v2 = *(const void **)(v1 + 320);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)(v1 + 304))
  {
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 184));
    uint64_t v3 = *(const void **)(v1 + 304);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v1 + 304) = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 184));
  }
  uint64_t v4 = *(FILE **)(v1 + 336);
  if (v4) {
    fclose(v4);
  }
  char v5 = *(FILE **)(v1 + 360);
  if (v5) {
    fclose(v5);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 120));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 184));
  free((void *)v1);
  return 0;
}

uint64_t EncSetThermalLevel(uint64_t a1, int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int valuePtr = a2;
  if (!CheckInHandleDebug()) {
    return 2148007938;
  }
  CFNumberRef v2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  VCPCompressionSessionSetProperty();
  CFRelease(v2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t EncSetBitRate(uint64_t a1, const __CFArray *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2148007937;
  int valuePtr = 0;
  uint64_t v4 = CheckInHandleDebug();
  if (v4)
  {
    if (a2)
    {
      uint64_t v5 = v4;
      if (CFArrayGetCount(a2) != 1)
      {
        if (*(unsigned char *)(v5 + 380))
        {
          int v7 = _Enc_CopyTemporalArray(a2, *(_DWORD *)(v5 + 384));
          VCPCompressionSessionSetProperty();
          CFRelease(v7);
        }
        uint64_t v3 = 0;
        goto LABEL_10;
      }
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, 0);
      if (ValueAtIndex)
      {
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
        uint64_t v3 = _Enc_SetAverageBitRate(v5, valuePtr);
LABEL_10:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v8 = VRTraceErrorLogLevelToCSTR();
          uint64_t v9 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(unsigned __int16 *)(v5 + 252);
            int v11 = *(_DWORD *)(v5 + 60);
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v15 = v8;
            __int16 v16 = 2080;
            uint64_t v17 = "EncSetBitRate";
            __int16 v18 = 1024;
            int v19 = 1204;
            __int16 v20 = 1024;
            int v21 = valuePtr;
            __int16 v22 = 1024;
            int v23 = v10;
            __int16 v24 = 1024;
            int v25 = v11;
            _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Done Set encoder bitrate: %d limitFrameSize: %d dataRate: %d", buf, 0x2Eu);
          }
        }
      }
    }
    CheckOutHandleDebug();
    return v3;
  }
  return 2148007938;
}

uint64_t EncEncodeFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2148007957;
  uint64_t v4 = CheckInHandleDebug();
  if (v4)
  {
    uint64_t v5 = v4;
    if (!*(void *)v4)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          EncEncodeFrame_cold_1();
        }
      }
      goto LABEL_144;
    }
    if (*(_DWORD *)a2 != *(__int16 *)(v4 + 58) || *(_DWORD *)(a2 + 4) != *(__int16 *)(v4 + 56))
    {
LABEL_144:
      CheckOutHandleDebug();
      return v3;
    }
    uint64_t v6 = (pthread_mutex_t *)(v4 + 120);
    pthread_mutex_lock((pthread_mutex_t *)(v4 + 120));
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v8 = *(_DWORD *)(v5 + 32);
    if (v8 < 1)
    {
      if (v8) {
        goto LABEL_9;
      }
    }
    else
    {
      *(_DWORD *)(v5 + 32) = v8 - 1;
      if (v8 <= *(_DWORD *)(v5 + 40))
      {
        *(_DWORD *)(v5 + 104) = 0;
        *(_DWORD *)(v5 + 2_Block_object_dispose(&STACK[0x250], 8) = 1;
      }
      if (v8 != 1)
      {
LABEL_9:
        __int16 v9 = *(_WORD *)(v5 + 252);
        if (*(_DWORD *)a2 > *(_DWORD *)(a2 + 4)
          && *(_WORD *)(v5 + 252)
          && ((int v10 = *(_DWORD *)(a2 + 8), v10 > 0) || *(int *)(v5 + 84) >= 1))
        {
          v9 *= 2;
        }
        else
        {
          int v10 = *(_DWORD *)(a2 + 8);
        }
        LOWORD(valuePtr.value) = v9;
        *(_DWORD *)(v5 + 84) = v10;
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberShortType, &valuePtr);
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44EF8], v12);
        CFRelease(v12);
        if (*(_DWORD *)(a2 + 236))
        {
          LODWORD(buf.value) = 2;
          int v13 = 4;
        }
        else
        {
          LODWORD(buf.value) = 13;
          int v13 = 9;
        }
        LODWORD(time2.value) = v13;
        CFNumberRef v14 = CFNumberCreate(v11, kCFNumberSInt32Type, &buf);
        CFNumberRef v15 = CFNumberCreate(v11, kCFNumberSInt32Type, &time2);
        CFDictionaryAddValue(Mutable, @"RemoteDisplayWidth", v14);
        CFDictionaryAddValue(Mutable, @"RemoteDisplayHeight", v15);
        CFRelease(v14);
        CFRelease(v15);
        if (*(int *)(a2 + 120) >= 1 && *(void *)(a2 + 112))
        {
          CFAllocatorRef v118 = v11;
          LODWORD(time2.value) = -1431655766;
          __int16 v16 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          if (*(int *)(a2 + 120) >= 1)
          {
            uint64_t v17 = 0;
            __int16 v18 = (unsigned char *)MEMORY[0x1E4F47A40];
            int v19 = (NSObject **)MEMORY[0x1E4F47A50];
            do
            {
              LODWORD(time2.value) = *(_DWORD *)(*(void *)(a2 + 112) + 4 * v17);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
              {
                uint64_t v20 = VRTraceErrorLogLevelToCSTR();
                int v21 = *v19;
                __int16 v22 = *v19;
                if (*v18)
                {
                  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf.value) = 136315906;
                    *(CMTimeValue *)((char *)&buf.value + 4) = v20;
                    LOWORD(buf.flags) = 2080;
                    *(void *)((char *)&buf.flags + 2) = "_Enc_SetupFrameProperties";
                    HIWORD(buf.epoch) = 1024;
                    int v123 = 824;
                    __int16 v124 = 1024;
                    LODWORD(v125) = time2.value;
                    _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Updating encoder LTR ACK token=%d", (uint8_t *)&buf, 0x22u);
                  }
                }
                else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
                {
                  LODWORD(buf.value) = 136315906;
                  *(CMTimeValue *)((char *)&buf.value + 4) = v20;
                  LOWORD(buf.flags) = 2080;
                  *(void *)((char *)&buf.flags + 2) = "_Enc_SetupFrameProperties";
                  HIWORD(buf.epoch) = 1024;
                  int v123 = 824;
                  __int16 v124 = 1024;
                  LODWORD(v125) = time2.value;
                  _os_log_debug_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Updating encoder LTR ACK token=%d", (uint8_t *)&buf, 0x22u);
                }
              }
              CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt32Type, &time2);
              CFArrayAppendValue(v16, v23);
              CFRelease(v23);
              ++v17;
            }
            while (v17 < *(int *)(a2 + 120));
          }
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44DC0], v16);
          CFRelease(v16);
          uint64_t v6 = (pthread_mutex_t *)(v5 + 120);
          CFAllocatorRef v11 = v118;
        }
        int v24 = *(_DWORD *)(a2 + 128);
        if (v24 >= 1)
        {
          LODWORD(buf.value) = 8 * v24;
          CFNumberRef v25 = CFNumberCreate(0, kCFNumberSInt32Type, &buf);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44F10], v25);
          CFRelease(v25);
        }
        int v26 = *(_DWORD *)(a2 + 124);
        if (v26 >= 1)
        {
          LODWORD(buf.value) = 8 * v26;
          CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, &buf);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44EB0], v27);
          CFRelease(v27);
        }
        int v28 = *(_DWORD *)(a2 + 280);
        if (v28)
        {
          LODWORD(buf.value) = 8 * v28;
          CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt32Type, &buf);
          if (v29)
          {
            CFNumberRef v30 = v29;
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44F28], v29);
            CFRelease(v30);
          }
        }
        if (*(_DWORD *)(a2 + 288))
        {
          CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a2 + 288));
          if (v31)
          {
            CFNumberRef v32 = v31;
            CFDictionaryAddValue(Mutable, @"MediaQueueDelayLimit", v31);
            CFRelease(v32);
          }
        }
        if (*(_DWORD *)(a2 + 284))
        {
          CFNumberRef v33 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a2 + 284));
          if (v33)
          {
            CFNumberRef v34 = v33;
            CFDictionaryAddValue(Mutable, @"MediaQueueDelay", v33);
            CFRelease(v34);
          }
        }
        if (*(double *)(a2 + 136) > 0.0)
        {
          CFNumberRef v35 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a2 + 136));
          if (v35)
          {
            CFNumberRef v36 = v35;
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F45438], v35);
            CFRelease(v36);
          }
        }
        if (*(double *)(a2 + 144) > 0.0)
        {
          CFNumberRef v37 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a2 + 144));
          if (v37)
          {
            CFNumberRef v38 = v37;
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F453F8], v37);
            CFRelease(v38);
          }
        }
        if (*(double *)(a2 + 152) > 0.0)
        {
          CFNumberRef v39 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a2 + 152));
          if (v39)
          {
            CFNumberRef v40 = v39;
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F453D8], v39);
            CFRelease(v40);
          }
        }
        CFNumberRef v41 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a2 + 168));
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44F50], v41);
        if (v41) {
          CFRelease(v41);
        }
        CFNumberRef v42 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a2 + 160));
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44F08], v42);
        if (v42) {
          CFRelease(v42);
        }
        CFNumberRef v43 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a2 + 164));
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44DD8], v43);
        if (v43) {
          CFRelease(v43);
        }
        CFNumberRef v44 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a2 + 192));
        CFDictionaryAddValue(Mutable, @"CaptureFrameDrop", v44);
        CFRelease(v44);
        CFNumberRef v45 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a2 + 196));
        if (v45)
        {
          CFNumberRef v46 = v45;
          CFDictionaryAddValue(Mutable, @"LocalPIPStatus", v45);
          CFRelease(v46);
        }
        CFNumberRef v47 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a2 + 200));
        if (v47)
        {
          CFNumberRef v48 = v47;
          CFDictionaryAddValue(Mutable, @"RemotePIPStatus", v47);
          CFRelease(v48);
        }
        if (!*(_DWORD *)(a2 + 204) || !*(_DWORD *)(a2 + 208))
        {
LABEL_74:
          if (!*(_DWORD *)(a2 + 212) || !*(_DWORD *)(a2 + 216))
          {
LABEL_83:
            CFNumberRef v55 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a2 + 188));
            CFDictionaryAddValue(Mutable, @"Use2GNetwork", v55);
            CFRelease(v55);
            if (!*(_DWORD *)(v5 + 372))
            {
              CFNumberRef v56 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a2 + 172));
              CFDictionaryAddValue(Mutable, @"PadFrameToMinimumSize", v56);
              CFRelease(v56);
            }
            int v57 = *(_DWORD *)(v5 + 28);
            if (v57)
            {
              *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 0;
              if (*(_DWORD *)(v5 + 24))
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                {
                  uint64_t v58 = VRTraceErrorLogLevelToCSTR();
                  int v59 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf.value) = 136315650;
                    *(CMTimeValue *)((char *)&buf.value + 4) = v58;
                    LOWORD(buf.flags) = 2080;
                    *(void *)((char *)&buf.flags + 2) = "_Enc_SetupFrameProperties";
                    HIWORD(buf.epoch) = 1024;
                    int v123 = 971;
                    _os_log_impl(&dword_1E1EA4000, v59, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Requesting kVTEncodeFrameOptionKey_ForceKeyFrame", (uint8_t *)&buf, 0x1Cu);
                  }
                }
                CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44ED8], (const void *)*MEMORY[0x1E4F1CFD0]);
              }
              else
              {
                CFDataRef v60 = CFDataCreate(v11, (const UInt8 *)(v5 + 88), 2 * *(int *)(v5 + 104));
                if (v60)
                {
                  CFDataRef v61 = v60;
                  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44EC8], v60);
                  CFRelease(v61);
                }
              }
            }
            uint64_t v62 = *(unsigned int *)(a2 + 8);
            if ((int)v62 >= 1)
            {
              CFDataRef v63 = CFDataCreate(v11, *(const UInt8 **)(a2 + 16), 2 * v62);
              if (v63)
              {
                CFDataRef v64 = v63;
                CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44ED0], v63);
                CFRelease(v64);
              }
            }
            uint64_t v65 = *(unsigned int *)(a2 + 24);
            if ((int)v65 >= 1)
            {
              CFDataRef v66 = CFDataCreate(v11, *(const UInt8 **)(a2 + 32), 2 * v65);
              if (v66)
              {
                CFDataRef v67 = v66;
                CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44EC0], v66);
                CFRelease(v67);
              }
            }
            CFNumberRef v68 = CFNumberCreate(0, kCFNumberIntType, (const void *)(v5 + 368));
            if (v68)
            {
              CFNumberRef v69 = v68;
              CFDictionaryAddValue(Mutable, @"AutoExposureState", v68);
              CFRelease(v69);
            }
            CFArrayRef Attachment = (const __CFArray *)CVBufferGetAttachment(*(CVBufferRef *)(a2 + 88), @"FVDWindowRectangles", 0);
            if (Attachment)
            {
              CFArrayRef v71 = Attachment;
              if (CFArrayGetCount(Attachment))
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v71, 0);
                uint64_t v73 = *(void *)(a2 + 248);
                CFNumberRef v74 = (float64x2_t *)(a2 + 264);
                uint64_t v76 = *(void *)(a2 + 256);
                uint64_t v75 = *(void *)(a2 + 264);
                uint64_t v77 = *(void *)(a2 + 272);
                CGRectMakeWithDictionaryRepresentation(ValueAtIndex, (CGRect *)(a2 + 248));
                double v78 = CVBufferGetAttachment(*(CVBufferRef *)(a2 + 88), @"FVDWindowScaleFactor", 0)
                    ? (float)(int)FigCFNumberGetSInt32()
                    : 2.0;
                double v119 = v78;
                int32x2_t v79 = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(*v74, v78)));
                v80.i64[0] = v79.i32[0];
                v80.i64[1] = v79.i32[1];
                *CFNumberRef v74 = vcvtq_f64_s64(v80);
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  uint64_t v81 = VRTraceErrorLogLevelToCSTR();
                  int v82 = *MEMORY[0x1E4F47A50];
                  uint64_t v83 = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v84 = *(void *)(a2 + 248);
                      uint64_t v85 = *(void *)(a2 + 256);
                      uint64_t v86 = *(void *)(a2 + 264);
                      uint64_t v87 = *(void *)(a2 + 272);
                      LODWORD(buf.value) = 136317954;
                      *(CMTimeValue *)((char *)&buf.value + 4) = v81;
                      LOWORD(buf.flags) = 2080;
                      *(void *)((char *)&buf.flags + 2) = "_Enc_SetupFrameProperties";
                      HIWORD(buf.epoch) = 1024;
                      int v123 = 1034;
                      __int16 v124 = 2048;
                      uint64_t v125 = v73;
                      __int16 v126 = 2048;
                      uint64_t v127 = v76;
                      __int16 v128 = 2048;
                      uint64_t v129 = v75;
                      __int16 v130 = 2048;
                      uint64_t v131 = v77;
                      __int16 v132 = 2048;
                      uint64_t v133 = v84;
                      __int16 v134 = 2048;
                      uint64_t v135 = v85;
                      __int16 v136 = 2048;
                      uint64_t v137 = v86;
                      __int16 v138 = 2048;
                      uint64_t v139 = v87;
                      __int16 v140 = 2048;
                      double v141 = v119;
                      _os_log_impl(&dword_1E1EA4000, v82, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Replacing visibleRect from (%f, %f, %f, %f) to update window (%f, %f, %f, %f) resolutionScale=%f", (uint8_t *)&buf, 0x76u);
                    }
                  }
                  else if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v114 = *(void *)(a2 + 248);
                    uint64_t v115 = *(void *)(a2 + 256);
                    uint64_t v116 = *(void *)(a2 + 264);
                    uint64_t v117 = *(void *)(a2 + 272);
                    LODWORD(buf.value) = 136317954;
                    *(CMTimeValue *)((char *)&buf.value + 4) = v81;
                    LOWORD(buf.flags) = 2080;
                    *(void *)((char *)&buf.flags + 2) = "_Enc_SetupFrameProperties";
                    HIWORD(buf.epoch) = 1024;
                    int v123 = 1034;
                    __int16 v124 = 2048;
                    uint64_t v125 = v73;
                    __int16 v126 = 2048;
                    uint64_t v127 = v76;
                    __int16 v128 = 2048;
                    uint64_t v129 = v75;
                    __int16 v130 = 2048;
                    uint64_t v131 = v77;
                    __int16 v132 = 2048;
                    uint64_t v133 = v114;
                    __int16 v134 = 2048;
                    uint64_t v135 = v115;
                    __int16 v136 = 2048;
                    uint64_t v137 = v116;
                    __int16 v138 = 2048;
                    uint64_t v139 = v117;
                    __int16 v140 = 2048;
                    double v141 = v119;
                    _os_log_debug_impl(&dword_1E1EA4000, v82, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Replacing visibleRect from (%f, %f, %f, %f) to update window (%f, %f, %f, %f) resolutionScale=%f", (uint8_t *)&buf, 0x76u);
                  }
                }
              }
            }
            if (!CGRectIsNull(*(CGRect *)(a2 + 248)))
            {
              VisibleRectDictionary = VideoUtil_CreateVisibleRectDictionary(*(double *)(a2 + 248), *(double *)(a2 + 256), *(double *)(a2 + 264), *(double *)(a2 + 272));
              if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
              {
                uint64_t v89 = VRTraceErrorLogLevelToCSTR();
                CFNumberRef v90 = *MEMORY[0x1E4F47A50];
                CFNumberRef v91 = *MEMORY[0x1E4F47A50];
                if (*MEMORY[0x1E4F47A40])
                {
                  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v92 = *(void *)(a2 + 248);
                    uint64_t v93 = *(void *)(a2 + 256);
                    uint64_t v94 = *(void *)(a2 + 264);
                    uint64_t v95 = *(void *)(a2 + 272);
                    LODWORD(buf.value) = 136316674;
                    *(CMTimeValue *)((char *)&buf.value + 4) = v89;
                    LOWORD(buf.flags) = 2080;
                    *(void *)((char *)&buf.flags + 2) = "_Enc_SetupFrameProperties";
                    HIWORD(buf.epoch) = 1024;
                    int v123 = 1038;
                    __int16 v124 = 2048;
                    uint64_t v125 = v92;
                    __int16 v126 = 2048;
                    uint64_t v127 = v93;
                    __int16 v128 = 2048;
                    uint64_t v129 = v94;
                    __int16 v130 = 2048;
                    uint64_t v131 = v95;
                    _os_log_impl(&dword_1E1EA4000, v90, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setting kVTEncodeFrameOptionKey_VisibleRectangle to (%f, %f, %f, %f)", (uint8_t *)&buf, 0x44u);
                  }
                }
                else if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v110 = *(void *)(a2 + 248);
                  uint64_t v111 = *(void *)(a2 + 256);
                  uint64_t v112 = *(void *)(a2 + 264);
                  uint64_t v113 = *(void *)(a2 + 272);
                  LODWORD(buf.value) = 136316674;
                  *(CMTimeValue *)((char *)&buf.value + 4) = v89;
                  LOWORD(buf.flags) = 2080;
                  *(void *)((char *)&buf.flags + 2) = "_Enc_SetupFrameProperties";
                  HIWORD(buf.epoch) = 1024;
                  int v123 = 1038;
                  __int16 v124 = 2048;
                  uint64_t v125 = v110;
                  __int16 v126 = 2048;
                  uint64_t v127 = v111;
                  __int16 v128 = 2048;
                  uint64_t v129 = v112;
                  __int16 v130 = 2048;
                  uint64_t v131 = v113;
                  _os_log_debug_impl(&dword_1E1EA4000, v90, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Setting kVTEncodeFrameOptionKey_VisibleRectangle to (%f, %f, %f, %f)", (uint8_t *)&buf, 0x44u);
                }
              }
              CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F44F90], VisibleRectDictionary);
              CFRelease(VisibleRectDictionary);
            }
            uint64_t v96 = (const void *)*MEMORY[0x1E4F44F40];
            CFTypeRef v97 = CVBufferGetAttachment(*(CVBufferRef *)(a2 + 88), (CFStringRef)*MEMORY[0x1E4F44F40], 0);
            if (v97) {
              CFDictionaryAddValue(Mutable, v96, v97);
            }
            CFNumberRef v98 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a2 + 232));
            if (v98)
            {
              CFNumberRef v99 = v98;
              CFDictionaryAddValue(Mutable, @"CameraFacingType", v98);
              CFRelease(v99);
            }
            CFTypeRef v100 = CVBufferGetAttachment(*(CVBufferRef *)(a2 + 88), @"DirtyRegion", 0);
            if (v100) {
              CFDictionaryAddValue(Mutable, @"DirtyRegionArray", v100);
            }
            CFTypeRef v101 = CVBufferGetAttachment(*(CVBufferRef *)(a2 + 88), @"HIDEventTimestamp", 0);
            if (v101) {
              CFDictionaryAddValue(Mutable, @"HIDTimeStamp", v101);
            }
            CFTypeRef v102 = CVBufferGetAttachment(*(CVBufferRef *)(a2 + 88), @"EncodingROIArray", 0);
            if (v102) {
              CFDictionaryAddValue(Mutable, @"RegionOfInterestArray", v102);
            }
            pthread_mutex_unlock(v6);
            CFNumberRef v103 = (_OWORD *)(v5 + 280);
            CMTime buf = *(CMTime *)(v5 + 280);
            CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
            if (CMTimeCompare(&buf, &time2))
            {
              CMTime time2 = *(CMTime *)(a2 + 40);
              *(_OWORD *)&valuePtr.CMTimeValue value = *v103;
              valuePtr.CMTimeEpoch epoch = *(void *)(v5 + 296);
              CMTimeSubtract(&buf, &time2, &valuePtr);
            }
            else
            {
              CMTimeMakeWithSeconds(&buf, (double)(*(_DWORD *)(v5 + 68) / 1000), *(_DWORD *)(a2 + 48));
            }
            CMTimeValue value = buf.value;
            uint64_t v105 = *(void *)&buf.timescale;
            CMTimeEpoch epoch = buf.epoch;
            long long v107 = *(_OWORD *)(a2 + 40);
            *(void *)(v5 + 296) = *(void *)(a2 + 56);
            *CFNumberRef v103 = v107;
            if (*(void *)(v5 + 336)) {
              DumpFrameYuv((size_t *)(v5 + 352), (size_t *)(v5 + 344), (FILE **)(v5 + 336), 0, *(CVPixelBufferRef *)(a2 + 88));
            }
            if (*(_DWORD *)(v5 + 44) == 2) {
              DumpFrameYuvWithTimestamp(0, *(__CVBuffer **)(a2 + 88), *(_DWORD *)(a2 + 180));
            }
            pthread_mutex_lock((pthread_mutex_t *)(v5 + 184));
            CMTime buf = *(CMTime *)(a2 + 40);
            time2.CMTimeValue value = value;
            *(void *)&time2.CMTimeScale timescale = v105;
            time2.CMTimeEpoch epoch = epoch;
            int v108 = VCPCompressionSessionEncodeFrame();
            pthread_mutex_unlock((pthread_mutex_t *)(v5 + 184));
            if (v57)
            {
              *(void *)(v5 + 24) = 0;
              *(_DWORD *)(v5 + 104) = 0;
              *(double *)(v5 + 112) = micro();
            }
            ++*(_DWORD *)(v5 + 328);
            CFRelease(Mutable);
            if (v108 << 16)
            {
              uint64_t v3 = -(__int16)v108 | 0xA0080000;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  EncEncodeFrame_cold_2();
                }
              }
            }
            else
            {
              uint64_t v3 = 0;
            }
            goto LABEL_144;
          }
          CFNumberRef v52 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a2 + 212));
          CFNumberRef v53 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a2 + 216));
          CFNumberRef v54 = v53;
          if (v52 && v53)
          {
            CFDictionaryAddValue(Mutable, @"RemotePIPWidth", v52);
            CFDictionaryAddValue(Mutable, @"RemotePIPHeight", v54);
          }
          else if (!v52)
          {
            goto LABEL_81;
          }
          CFRelease(v52);
LABEL_81:
          if (v54) {
            CFRelease(v54);
          }
          goto LABEL_83;
        }
        CFNumberRef v49 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a2 + 204));
        CFNumberRef v50 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a2 + 208));
        CFNumberRef v51 = v50;
        if (v49 && v50)
        {
          CFDictionaryAddValue(Mutable, @"LocalPIPWidth", v49);
          CFDictionaryAddValue(Mutable, @"LocalPIPHeight", v51);
        }
        else if (!v49)
        {
          goto LABEL_72;
        }
        CFRelease(v49);
LABEL_72:
        if (v51) {
          CFRelease(v51);
        }
        goto LABEL_74;
      }
    }
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v5 + 36);
    goto LABEL_9;
  }
  return 2148007938;
}

uint64_t EncGenerateKeyFrameNow(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2148007938;
  }
  uint64_t v6 = v5;
  if (*(int *)(v5 + 36) <= 0)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 120));
    if (!*(_DWORD *)(v6 + 24))
    {
      uint64_t v7 = *(unsigned int *)(v6 + 104);
      if ((int)v7 < 1)
      {
        if (a3 > 1)
        {
          *(_DWORD *)(v6 + 104) = a3 - 2;
          memcpy((void *)(v6 + 88), (const void *)(a2 + 4), 2 * (a3 - 2));
          goto LABEL_28;
        }
        *(_DWORD *)(v6 + 104) = 0;
      }
      else
      {
        if (a3 >= 3)
        {
          uint64_t v8 = 2;
          do
          {
            int v9 = *(unsigned __int16 *)(a2 + 2 * v8);
            uint64_t v10 = v7;
            CFAllocatorRef v11 = (_WORD *)(v6 + 88);
            while (v9 != (unsigned __int16)*v11)
            {
              ++v11;
              if (!--v10) {
                goto LABEL_12;
              }
            }
            *CFAllocatorRef v11 = v9 | 0x8000;
LABEL_12:
            ++v8;
          }
          while (v8 != a3);
        }
        int v12 = 0;
        do
        {
          uint64_t v13 = v6 + 2 * v12;
          int v16 = *(__int16 *)(v13 + 88);
          CFNumberRef v14 = (_WORD *)(v13 + 88);
          __int16 v15 = v16;
          if (v16 < 0)
          {
            *CFNumberRef v14 = v15 & 0x7FFF;
          }
          else
          {
            if (v12 + 1 < (int)v7)
            {
              uint64_t v17 = (__int16 *)(v6 + 88 + 2 * (v12 + 1));
              int v18 = v12;
              do
              {
                __int16 v19 = *v17++;
                *(_WORD *)(v6 + 2 * v18++ + 8_Block_object_dispose(&STACK[0x250], 8) = v19;
              }
              while (v7 - 1 != v18);
            }
            LODWORD(v7) = v7 - 1;
            *(_DWORD *)(v6 + 104) = v7;
            --v12;
          }
          ++v12;
        }
        while (v12 < (int)v7);
        if (a3 > 1) {
          goto LABEL_28;
        }
      }
      *(void *)(v6 + 24) = 0x100000001;
LABEL_28:
      if (!*(_DWORD *)(v6 + 20))
      {
        *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v27[15] = v21;
        *(_OWORD *)CFNumberRef v27 = v21;
        *(_OWORD *)&buf[33] = v21;
        *(_OWORD *)&buf[17] = v21;
        *(_OWORD *)&buf[1] = v21;
        memset(v25, 170, 10);
        *(_DWORD *)(v6 + 2_Block_object_dispose(&STACK[0x250], 8) = 1;
        buf[0] = 0;
        if (*(int *)(v6 + 104) >= 1)
        {
          uint64_t v22 = 0;
          do
          {
            __sprintf_chk(v25, 0, 0xAuLL, " %d", *(unsigned __int16 *)(v6 + 88 + 2 * v22));
            __strlcat_chk();
            ++v22;
          }
          while (v22 < *(int *)(v6 + 104));
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v23 = VRTraceErrorLogLevelToCSTR();
        int v24 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "EncGenerateKeyFrameNow";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 1353;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = a3;
          _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Generated a key frame for FIR(%d)", buf, 0x22u);
        }
      }
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 120));
  CheckOutHandleDebug();
  return 0;
}

uint64_t EncSendImgDesc()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2148007938;
  }
  uint64_t v1 = v0;
  CFNumberRef v2 = (pthread_mutex_t *)(v0 + 120);
  pthread_mutex_lock((pthread_mutex_t *)(v0 + 120));
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 24) = 0x100000001;
  pthread_mutex_unlock(v2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t EncPixelBufferFromPool(uint64_t a1, CVPixelBufferRef *a2)
{
  if (!CheckInHandleDebug()) {
    return 2148007938;
  }
  PixelBufferPool = (__CVPixelBufferPool *)VCPCompressionSessionGetPixelBufferPool();
  CVReturn PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, a2);
  if (PixelBuffer << 16) {
    uint64_t v5 = -(__int16)PixelBuffer | 0xA0080000;
  }
  else {
    uint64_t v5 = 0;
  }
  CheckOutHandleDebug();
  return v5;
}

uint64_t EncSetEncodingMode(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int valuePtr = a2;
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148007938;
  }
  *(_DWORD *)(v3 + 24_Block_object_dispose(&STACK[0x250], 8) = a2;
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  VCPCompressionSessionSetProperty();
  CFRelease(v4);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VCVideoEncoderVCPInitialize(uint64_t result)
{
  *(void *)uint64_t result = EncoderVCP_VTable;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(result + 16) = 0xFFFFFFFFLL;
  return result;
}

void _DumpParameterSetsBitstream(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  if (FormatDescription)
  {
    CFDataRef AvcCFromFormatDescriptionForLog = extractAvcCFromFormatDescriptionForLog(FormatDescription);
    if (AvcCFromFormatDescriptionForLog)
    {
      CFDataRef v5 = AvcCFromFormatDescriptionForLog;
      BytePtr = CFDataGetBytePtr(AvcCFromFormatDescriptionForLog);
      CFIndex Length = CFDataGetLength(v5);
      if (BytePtr && (int)Length >= 1)
      {
        size_t v8 = Length;
        MEMORY[0x1F4188790](Length);
        memset((char *)v9 - ((v8 + 15) & 0x1FFFFFFF0), 170, v8);
        if ((unsigned __int16)readAVCCAndEncodeH264SPSPPS((uint64_t)BytePtr, v8, (uint64_t)v9 - ((v8 + 15) & 0x1FFFFFFF0), v9))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _DumpParameterSetsBitstream_cold_3();
            }
          }
        }
        else
        {
          fwrite((char *)v9 - ((v8 + 15) & 0x1FFFFFFF0), 1uLL, v9[0], *(FILE **)(a2 + 360));
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _DumpParameterSetsBitstream_cold_4();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _DumpParameterSetsBitstream_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _DumpParameterSetsBitstream_cold_1();
    }
  }
}

void _DumpFrameBitstream(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int __ptr = 0x1000000;
  CFNumberRef v14 = 0;
  if (a1)
  {
    int SampleSize = CMSampleBufferGetSampleSize(a1, 0);
    if (SampleSize >= 1)
    {
      DataBuffer = CMSampleBufferGetDataBuffer(a1);
      if (DataBuffer)
      {
        if (CMBlockBufferGetDataPointer(DataBuffer, 0, 0, 0, &v14))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
            return;
          }
          uint64_t v6 = VRTraceErrorLogLevelToCSTR();
          uint64_t v7 = *MEMORY[0x1E4F47A50];
          size_t v8 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
              return;
            }
            *(_DWORD *)CMTime buf = 136315650;
            uint64_t v17 = v6;
            __int16 v18 = 2080;
            __int16 v19 = "_DumpFrameBitstream";
            __int16 v20 = 1024;
            int v21 = 223;
            int v9 = " [%s] %s:%d VCPCompressionSession Error: Error getting data buffer";
LABEL_13:
            _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, v9, buf, 0x1Cu);
            return;
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
            _DumpFrameBitstream_cold_2();
          }
        }
        else
        {
          for (int i = 0; i < SampleSize; i += v13 + 4)
          {
            signed int v13 = bswap32(*(_DWORD *)&v14[i]);
            fwrite(&__ptr, 1uLL, 4uLL, *(FILE **)(a2 + 360));
            fwrite(&v14[i + 4], 1uLL, v13, *(FILE **)(a2 + 360));
            fflush(*(FILE **)(a2 + 360));
          }
        }
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return;
    }
    uint64_t v10 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    CFAllocatorRef v11 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v17 = v10;
      __int16 v18 = 2080;
      __int16 v19 = "_DumpFrameBitstream";
      __int16 v20 = 1024;
      int v21 = 241;
      int v9 = " [%s] %s:%d VCPCompressionSession Error: Encoder returned a NULL frame";
      goto LABEL_13;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      _DumpFrameBitstream_cold_1();
    }
  }
}

void _EncDumpBitStream(CMSampleBufferRef sbuf, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 48);
  if ((v5 == 1752589105 || v5 == 1635148593) && sbuf != 0)
  {
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
    if (SampleAttachmentsArray)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      if (CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1A8]) == (const void *)*MEMORY[0x1E4F1CFC8]) {
        _DumpParameterSetsBitstream(sbuf, a3);
      }
    }
  }

  _DumpFrameBitstream(sbuf, a3);
}

uint64_t vtEncCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CMSampleBufferRef sbuf)
{
  if (a3 == -12912 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      vtEncCallback_cold_2();
    }
  }
  if (*(void *)(a1 + 360)) {
    _EncDumpBitStream(sbuf, a2, a1);
  }
  if (*(void *)a1)
  {
    (*(void (**)(void, uint64_t, uint64_t, CMSampleBufferRef))a1)(*(void *)(a1 + 8), a2, a3, sbuf);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      vtEncCallback_cold_1();
    }
  }
  return 0;
}

uint64_t _Enc_SetAverageBitRate(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 60) = a2;
  CFNumberRef v4 = (const void *)(a1 + 60);
  *(_WORD *)(a1 + 252) = 2 * (a2 < 2200001);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int16 *)(a1 + 252);
      int v8 = *(_DWORD *)(a1 + 60);
      int v12 = 136316418;
      uint64_t v13 = v5;
      __int16 v14 = 2080;
      __int16 v15 = "_Enc_SetAverageBitRate";
      __int16 v16 = 1024;
      int v17 = 1162;
      __int16 v18 = 1024;
      int v19 = a2;
      __int16 v20 = 1024;
      int v21 = v7;
      __int16 v22 = 1024;
      int v23 = v8;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Set encoder bitrate: %d limitFrameSize: %d dataRate: %d", (uint8_t *)&v12, 0x2Eu);
    }
  }
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, v4);
  int v10 = VCPCompressionSessionSetProperty();
  CFRelease(v9);
  if (v10) {
    return -v10 | 0xA0080000;
  }
  else {
    return 0;
  }
}

__CFArray *_Enc_CopyTemporalArray(const __CFArray *a1, int Count)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (CFArrayGetCount(a1) < Count) {
    CFIndex Count = CFArrayGetCount(a1);
  }
  if (Count >= 1)
  {
    CFIndex v5 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
      CFArrayAppendValue(Mutable, ValueAtIndex);
      ++v5;
    }
    while (Count != v5);
  }
  return Mutable;
}

void VCVideoStreamEncoderProc(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 192), 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(unsigned char *)(a1 + 184))
    {
      *(unsigned char *)(a1 + 184) = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v5 = VRTraceErrorLogLevelToCSTR();
        uint64_t v6 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.value) = 136315906;
          *(CMTimeValue *)((char *)&buf.value + 4) = v5;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "VCVideoStreamEncoderProc";
          HIWORD(buf.epoch) = 1024;
          int v12 = 97;
          __int16 v13 = 2080;
          __int16 v14 = "com.apple.AVConference.VCVideoStreamTransmitter.encoderThread";
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Encoder thread \"%s\" terminated", (uint8_t *)&buf, 0x26u);
        }
      }
      *a3 = 1;
    }
    else if (CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(a1 + 200)) >= 1)
    {
      int v7 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 200));
      memset(&buf, 170, sizeof(buf));
      CMSampleBufferGetPresentationTimeStamp(&buf, v7);
      if (*MEMORY[0x1E4F47A58])
      {
        os_signpost_id_t value = buf.value;
        if ((unint64_t)(buf.value - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          CFNumberRef v9 = *MEMORY[0x1E4F47A50];
          if (os_signpost_enabled((os_log_t)*MEMORY[0x1E4F47A50]))
          {
            *(_WORD *)int v10 = 0;
            _os_signpost_emit_with_name_impl(&dword_1E1EA4000, v9, OS_SIGNPOST_EVENT, value, "VideoTransmitter_FrameDequeue", (const char *)&unk_1E2635D2D, v10, 2u);
          }
        }
      }
      if (v7)
      {
        [(id)a1 encodeVideoFrame:v7];
        CFRelease(v7);
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCVideoStreamEncoderProc_cold_1();
        }
      }
    }
  }
}

uint64_t VCVideoStreamTransmitter_EnqueueVideoFrame(uint64_t a1, const void *a2)
{
  uint64_t result = 0;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if ((int)CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(a1 + 200)) < 1)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetInt32();
      CMSetAttachments(a2, Mutable, 0);
      CFRelease(Mutable);
      OSStatus v9 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a1 + 200), a2);
      uint64_t result = 0;
      if (!v9)
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 192));
        return 1;
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v5 = VRTraceErrorLogLevelToCSTR();
        uint64_t v6 = *MEMORY[0x1E4F47A50];
        BOOL v7 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v7) {
          return result;
        }
        int v10 = 136315650;
        uint64_t v11 = v5;
        __int16 v12 = 2080;
        __int16 v13 = "VCVideoStreamTransmitter_EnqueueVideoFrame";
        __int16 v14 = 1024;
        int v15 = 262;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Drop a pending frame (encoder). Already has a frame for encoder", (uint8_t *)&v10, 0x1Cu);
      }
      return 0;
    }
  }
  return result;
}

void VCVideoStreamTransmitter_SetFECRatio()
{
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoStreamTransmitter_SetFECRatio_cold_1();
    }
  }
}

void VCVideoStreamTransmitter_SetMediaQueueSize()
{
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoStreamTransmitter_SetMediaQueueSize_cold_1();
    }
  }
}

void encoderFrameCallback(OSQueueHead **a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v8 = a2[328];
    VCMemoryPool_Free(a1[55], a2);
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (a3)
    {
LABEL_3:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          encoderFrameCallback_cold_1();
        }
      }
      return;
    }
  }
  if (a5)
  {
    [a1 transmitEncodedVideoFrame:a5 cameraStatusBits:v8];
  }
}

double JitterQueue_Create()
{
  uint64_t v0 = malloc_type_malloc(0x48uLL, 0x1020040320C0723uLL);
  if (v0)
  {
    v0[16] = 0;
    double result = 0.0;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *(_OWORD *)uint64_t v0 = 0u;
    *((_OWORD *)v0 + 1) = 0u;
  }
  return result;
}

uint64_t *JitterQueue_SetMaxPacketTimeDelta(uint64_t *result, unsigned int a2, double a3)
{
  unsigned int v3 = ((double)a2 * a3);
  *((_DWORD *)result + 4) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    int v5 = *(_DWORD *)(v4 + 1172);
    uint64_t v6 = *(void *)(v4 + 1248);
    if (v6)
    {
      int v7 = *(_DWORD *)(v4 + 12);
      do
      {
        int v8 = *(_DWORD *)(v6 + 12);
        if (v7 - v8 - *(_DWORD *)(v6 + 1172) > v3 || v7 == v8) {
          int v10 = *(_DWORD *)(v6 + 1172);
        }
        else {
          int v10 = v7 - v8;
        }
        v5 += v10;
        uint64_t v6 = *(void *)(v6 + 1248);
        int v7 = v8;
      }
      while (v6);
    }
    *((_DWORD *)result + 5) = v5;
  }
  else
  {
    *((_DWORD *)result + 5) = 0;
    *((_DWORD *)result + 13) = 0;
    *((_DWORD *)result + 14) = 0;
  }
  return result;
}

uint64_t JitterQueue_SetLastDecodedFrameTimestamp(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = 1;
  return result;
}

uint64_t JitterQueue_SetLastDecodedDTMFFrameTimestamp(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2_Block_object_dispose(&STACK[0x250], 8) = a2;
  *(_DWORD *)(result + 36) = 1;
  return result;
}

void JitterQueue_Destroy(uint64_t *a1)
{
  JitterQueue_Reset(a1);

  free(a1);
}

void JitterQueue_Reset(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  *a1 = 0;
  a1[1] = 0;
  *(uint64_t *)((char *)a1 + 20) = 0;
  *(uint64_t *)((char *)a1 + 36) = 0;
  *(uint64_t *)((char *)a1 + 2_Block_object_dispose(&STACK[0x250], 8) = 0;
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  if (v1)
  {
    do
    {
      uint64_t v2 = *(void *)(v1 + 1248);
      (*(void (**)(void))(v1 + 1200))(*(void *)(v1 + 1208));
      uint64_t v1 = v2;
    }
    while (v2);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315650;
      uint64_t v6 = v3;
      __int16 v7 = 2080;
      int v8 = "JitterQueue_Reset";
      __int16 v9 = 1024;
      int v10 = 386;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Jitter Queue was reset", (uint8_t *)&v5, 0x1Cu);
    }
  }
}

uint64_t JitterQueue_Insert(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a3) {
    *a3 = 0;
  }
  ++*(_DWORD *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    if (*(_DWORD *)(a2 + 1196) == 117)
    {
      int v5 = 0;
    }
    else
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a1 + 24);
      if (v6) {
        BOOL v7 = v6 > 0x7FFFFFFE;
      }
      else {
        BOOL v7 = 1;
      }
      int v5 = v7;
    }
  }
  int v8 = *(_DWORD *)(a1 + 36);
  if (v8) {
    int v8 = *(_DWORD *)(a2 + 1196) == 117 && (*(_DWORD *)(a2 + 12) - *(_DWORD *)(a1 + 28)) > 0x7FFFFFFE;
  }
  if ((v5 | v8) != 1)
  {
    int v19 = (unint64_t *)(a1 + 8);
    for (int i = (unint64_t *)a1; ; int i = (unint64_t *)(v21 + 1248))
    {
      unint64_t v21 = *i;
      if (!*i) {
        break;
      }
      unint64_t v22 = v21 + 1272;
      unsigned int v23 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(v21 + 12);
      if (v23)
      {
        if (v23 < 0x7FFFFFFF) {
          break;
        }
      }
      else
      {
        if (*(_DWORD *)(v21 + 1196) != 117)
        {
          if (a3) {
            *a3 = 1;
          }
          if (*(unsigned char *)(a2 + 8) || !*(unsigned char *)(v21 + 8))
          {
            unint64_t v21 = a2;
          }
          else
          {
            unint64_t v54 = a2 + 1272;
            *int i = a2;
            uint64_t v55 = *(void *)(v21 + 1248);
            *(void *)(a2 + 124_Block_object_dispose(&STACK[0x250], 8) = v55;
            uint64_t v56 = *(void *)(v21 + 1240);
            *(void *)(a2 + 1240) = v56;
            if (!v55) {
              goto LABEL_88;
            }
            if (v54 <= a2) {
              goto LABEL_106;
            }
            *(void *)(v55 + 1240) = a2;
            uint64_t v56 = *(void *)(a2 + 1240);
LABEL_88:
            if (v56)
            {
              if (v54 > a2)
              {
                *(void *)(v56 + 124_Block_object_dispose(&STACK[0x250], 8) = a2;
                goto LABEL_91;
              }
              goto LABEL_106;
            }
LABEL_91:
            if (*(void *)a1 == v21)
            {
              if (v54 <= a2) {
                goto LABEL_106;
              }
              *(void *)a1 = a2;
            }
            if (*v19 == v21)
            {
              if (v54 <= a2) {
                goto LABEL_106;
              }
              *int v19 = a2;
            }
            if (v21 >= v22) {
LABEL_106:
            }
              __break(0x5519u);
            *(_DWORD *)(v21 + 1264) = 0;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v57 = VRTraceErrorLogLevelToCSTR();
            uint64_t v58 = *MEMORY[0x1E4F47A50];
            int v59 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
              {
                int v60 = *(unsigned __int8 *)(v21 + 8);
                int v61 = *(_DWORD *)(v21 + 12);
                int v64 = 136316162;
                uint64_t v65 = v57;
                __int16 v66 = 2080;
                CFDataRef v67 = "JitterQueue_Insert";
                __int16 v68 = 1024;
                int v69 = 212;
                __int16 v70 = 1024;
                int v71 = v60;
                __int16 v72 = 1024;
                int v73 = v61;
                _os_log_impl(&dword_1E1EA4000, v58, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Discarding duplicate audio frame isRedAudio:%d timestamp:%u", (uint8_t *)&v64, 0x28u);
              }
            }
            else if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
            {
              JitterQueue_Insert_cold_2(v57, v21, v58);
            }
          }
          (*(void (**)(void, unint64_t))(v21 + 1200))(*(void *)(v21 + 1208), v21);
          return 0;
        }
        unsigned int v24 = *(unsigned __int16 *)(a2 + 10) - *(unsigned __int16 *)(v21 + 10);
        if (v24) {
          BOOL v25 = v24 >= 0x7FFFFFFF;
        }
        else {
          BOOL v25 = 1;
        }
        if (!v25) {
          break;
        }
      }
      if (v21 >= v22) {
        goto LABEL_106;
      }
    }
    *(void *)(a2 + 124_Block_object_dispose(&STACK[0x250], 8) = *i;
    *int i = a2;
    uint64_t v26 = *(void *)(a2 + 1248);
    if (v26) {
      int v19 = (unint64_t *)(v26 + 1240);
    }
    *(void *)(a2 + 1240) = *v19;
    *int v19 = a2;
    if (!*(_DWORD *)(a1 + 16) && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      uint64_t v28 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        JitterQueue_Insert_cold_1(v27, v28);
      }
    }
    if (*(unsigned char *)(a2 + 8)) {
      *(_DWORD *)(a2 + 1264) = *(_DWORD *)(a2 + 1260) - *(_DWORD *)(a2 + 12);
    }
    int v29 = *(_DWORD *)(a2 + 1172);
    int v30 = *(_DWORD *)(a1 + 20);
    int v31 = v30 + v29;
    *(_DWORD *)(a1 + 20) = v30 + v29;
    int v32 = *(_DWORD *)(a1 + 56) + 1;
    *(_DWORD *)(a1 + 56) = v32;
    uint64_t v33 = *(void *)(a2 + 1240);
    uint64_t v34 = *(void *)(a2 + 1248);
    if (v33)
    {
      int v35 = *(_DWORD *)(v33 + 12);
      if (v34)
      {
        int v36 = *(_DWORD *)(v34 + 12);
        int v37 = *(_DWORD *)(v34 + 1172);
        unsigned int v38 = *(_DWORD *)(a1 + 16);
        if (v35 == v36 || v35 - (v36 + v37) > v38)
        {
          int v39 = *(_DWORD *)(a2 + 12);
          int v40 = v35 - v39;
          if (v40 - v29 > v38) {
            int v40 = 0;
          }
          int v41 = v39 - v36;
          if (v41 - v37 > v38) {
            int v41 = 0;
          }
          if (v40) {
            int v42 = (v40 - v29) & ~((v40 - v29) >> 31);
          }
          else {
            int v42 = 0;
          }
          int v43 = (v41 - v37) & ~((v41 - v37) >> 31);
          if (v41) {
            int v44 = v43;
          }
          else {
            int v44 = 0;
          }
          int v30 = v44 + v31 + v42;
        }
        goto LABEL_75;
      }
      int v52 = *(_DWORD *)(a2 + 12);
      if (v35 == v52)
      {
LABEL_76:
        uint64_t result = 1;
        if (v31 >= 1 && v29 >= 1) {
          *(_DWORD *)(a1 + 52) = (v31 - v32 * v29) / v29;
        }
        return result;
      }
      int v51 = v35 - (v29 + v52);
    }
    else
    {
      if (!v34) {
        goto LABEL_76;
      }
      int v49 = *(_DWORD *)(a2 + 12);
      int v50 = *(_DWORD *)(v34 + 12);
      if (v49 == v50) {
        goto LABEL_76;
      }
      int v51 = v49 - (v50 + *(_DWORD *)(v34 + 1172));
    }
    if (v51 <= *(_DWORD *)(a1 + 16))
    {
      int v30 = (v51 & ~(v51 >> 31)) + v31;
LABEL_75:
      *(_DWORD *)(a1 + 20) = v30;
      int v31 = v30;
      goto LABEL_76;
    }
    goto LABEL_76;
  }
  BOOL v9 = v5 == 0;
  uint64_t v10 = 28;
  if (!v9) {
    uint64_t v10 = 24;
  }
  int v11 = *(_DWORD *)(a1 + v10);
  int v12 = *(unsigned __int8 *)(a2 + 8);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v12)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      int v15 = *MEMORY[0x1E4F47A50];
      uint64_t v16 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = *(_DWORD *)(a2 + 12);
          int v18 = *(unsigned __int16 *)(a2 + 10);
          int v64 = 136316418;
          uint64_t v65 = v14;
          __int16 v66 = 2080;
          CFDataRef v67 = "JitterQueue_Insert";
          __int16 v68 = 1024;
          int v69 = 189;
          __int16 v70 = 1024;
          int v71 = v17;
          __int16 v72 = 1024;
          int v73 = v11;
          __int16 v74 = 1024;
          int v75 = v18;
          _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Discarding an old redundant frame, timestamp %u, last Decoded %u sequence number %d", (uint8_t *)&v64, 0x2Eu);
        }
      }
      else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        int v62 = *(_DWORD *)(a2 + 12);
        int v63 = *(unsigned __int16 *)(a2 + 10);
        int v64 = 136316418;
        uint64_t v65 = v14;
        __int16 v66 = 2080;
        CFDataRef v67 = "JitterQueue_Insert";
        __int16 v68 = 1024;
        int v69 = 189;
        __int16 v70 = 1024;
        int v71 = v62;
        __int16 v72 = 1024;
        int v73 = v11;
        __int16 v74 = 1024;
        int v75 = v63;
        _os_log_debug_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Discarding an old redundant frame, timestamp %u, last Decoded %u sequence number %d", (uint8_t *)&v64, 0x2Eu);
      }
    }
  }
  else
  {
    if (ErrorLogLevelForModule >= 5)
    {
      uint64_t v45 = VRTraceErrorLogLevelToCSTR();
      CFNumberRef v46 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v47 = *(_DWORD *)(a2 + 1196);
        int v48 = *(_DWORD *)(a2 + 12);
        int v64 = 136316418;
        uint64_t v65 = v45;
        __int16 v66 = 2080;
        CFDataRef v67 = "JitterQueue_Insert";
        __int16 v68 = 1024;
        int v69 = 183;
        __int16 v70 = 1024;
        int v71 = v47;
        __int16 v72 = 1024;
        int v73 = v48;
        __int16 v74 = 1024;
        int v75 = v11;
        _os_log_impl(&dword_1E1EA4000, v46, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Discarding an old primary frame, payloadType=%d, timestamp=%u, lastDecoded=%u", (uint8_t *)&v64, 0x2Eu);
      }
    }
    ++*(_DWORD *)(a1 + 40);
    if (!*(_DWORD *)(a2 + 1176)) {
      ++*(_DWORD *)(a1 + 44);
    }
  }
  (*(void (**)(void, unint64_t))(a2 + 1200))(*(void *)(a2 + 1208), a2);
  return 0;
}

unint64_t JitterQueue_Pop(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    unint64_t v3 = result + 1272;
    uint64_t v4 = *(void *)(result + 1240);
    if (v4)
    {
      *(void *)(v4 + 124_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = v4;
      if (result >= v3) {
        goto LABEL_16;
      }
      int v5 = *(_DWORD *)(v4 + 12);
      int v6 = *(_DWORD *)(result + 12);
      int v7 = *(_DWORD *)(result + 1172);
      unsigned int v8 = *(_DWORD *)(a1 + 16);
      int v9 = *(_DWORD *)(a1 + 20);
      int v10 = *(_DWORD *)(a1 + 56) - 1;
      *(_DWORD *)(a1 + 56) = v10;
      if (v5 - v6 - v7 > v8 || v5 == v6) {
        int v12 = v7;
      }
      else {
        int v12 = v5 - v6;
      }
      int v13 = v9 - v12;
      *(_DWORD *)(a1 + 20) = v13;
      if (v13 >= 1)
      {
        int v14 = *(_DWORD *)(result + 1172);
        if (v14 >= 1) {
          *(_DWORD *)(a1 + 52) = (v13 - v10 * v14) / v14;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 20) = 0;
      *(_DWORD *)(a1 + 52) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = 0;
    }
    if (result < v3) {
      return result;
    }
LABEL_16:
    __break(0x5519u);
  }
  return result;
}

unint64_t JitterQueue_Purge(unint64_t result, uint64_t (*a2)(void))
{
  if (a2)
  {
    uint64_t v2 = result;
    for (unint64_t result = *(void *)(result + 8); result; unint64_t result = *(void *)(v2 + 8))
    {
      unint64_t result = a2();
      if (!result) {
        break;
      }
      unint64_t result = JitterQueue_Pop(v2);
      if (result && result >= result + 1272)
      {
        __break(0x5519u);
        return result;
      }
      (*(void (**)(void))(result + 1200))(*(void *)(result + 1208));
    }
  }
  return result;
}

uint64_t JitterQueue_CheckQSizeBeforePop(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 1240);
  if (!v2) {
    return 0;
  }
  if (v1 >= v1 + 1272)
  {
    __break(0x5519u);
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 12);
    int v4 = *(_DWORD *)(v1 + 12);
    int v5 = *(_DWORD *)(v1 + 1172);
    unsigned int v6 = v3 - v4 - v5;
    int v7 = v3 - v4;
    int v8 = *(_DWORD *)(result + 20);
    if (v7) {
      BOOL v9 = v6 > *(_DWORD *)(result + 16);
    }
    else {
      BOOL v9 = 1;
    }
    if (v9) {
      return (v8 - v5);
    }
    else {
      return (v8 - v7);
    }
  }
  return result;
}

BOOL JitterQueue_IsEmpty(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t JitterQueue_GetSizeOfNextFrame(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return *(unsigned int *)(v1 + 1172);
  }
  else {
    return 0;
  }
}

BOOL JitterQueue_GetOldestArrivalTimeStamp(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    *a2 = *(_DWORD *)(v2 + 1192);
  }
  return v2 != 0;
}

BOOL JitterQueue_HasDTXPacket(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  do
  {
    int v2 = *(_DWORD *)(v1 + 1176);
    BOOL result = v2 != 0;
    if (v2) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 1240);
  }
  while (v1);
  return result;
}

uint64_t JitterQueue_QueueEmptyOrAllDTX(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 8);
    if (v1)
    {
      do
        uint64_t v1 = *(void *)(v1 + 1240);
      while (v1);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL JitterQueue_IsNextFrameDTX(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return !v1 || *(_DWORD *)(v1 + 1176);
}

BOOL JitterQueue_IsNextFrameDTMF(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return v1 && *(_DWORD *)(v1 + 1196) == 117;
}

BOOL JitterQueue_IsNextFrameMarkerSet(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return v1 && *(_DWORD *)(v1 + 4) == 1;
}

uint64_t JitterQueue_QueuedSamples(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void JitterQueue_DiscardExcess(uint64_t *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (*a1)
  {
    while (1)
    {
      int v5 = *(_DWORD *)(v3 + 1172);
      int v6 = *(_DWORD *)(v3 + 12);
      unint64_t v7 = a1[1];
      if (v6 + v5 - *(_DWORD *)(v7 + 12) <= (*(_DWORD *)(v7 + 1172) + a2)) {
        break;
      }
      uint64_t v8 = *(void *)(v7 + 1240);
      BOOL v9 = (void *)(v8 + 1248);
      if (!v8) {
        BOOL v9 = a1;
      }
      *BOOL v9 = 0;
      a1[1] = v8;
      if (v7 >= v7 + 1272) {
        __break(0x5519u);
      }
      (*(void (**)(void))(v7 + 1200))(*(void *)(v7 + 1208));
      uint64_t v3 = *a1;
      if (!*a1) {
        goto LABEL_7;
      }
    }
    for (i = *(void *)(v3 + 1248); i; int v6 = v11)
    {
      int v11 = *(_DWORD *)(i + 12);
      if ((v6 - v11 - *(_DWORD *)(i + 1172)) > *((_DWORD *)a1 + 4) || v6 == v11) {
        int v13 = *(_DWORD *)(i + 1172);
      }
      else {
        int v13 = v6 - v11;
      }
      v5 += v13;
      uint64_t i = *(void *)(i + 1248);
    }
    *((_DWORD *)a1 + 5) = v5;
  }
  else
  {
LABEL_7:
    *((_DWORD *)a1 + 5) = 0;
    *((_DWORD *)a1 + 13) = 0;
    *((_DWORD *)a1 + 14) = 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *((_DWORD *)a1 + 5);
      int v17 = 136315906;
      uint64_t v18 = v14;
      __int16 v19 = 2080;
      __int16 v20 = "JitterQueue_DiscardExcess";
      __int16 v21 = 1024;
      int v22 = 408;
      __int16 v23 = 1024;
      int v24 = v16;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Discard excess performed. New size=%d", (uint8_t *)&v17, 0x22u);
    }
  }
}

_DWORD *JitterQueue_GetUnderflowRateForInterval(_DWORD *result)
{
  int v1 = result[10];
  result[15] = result[12];
  result[16] = v1;
  return result;
}

double JitterQueue_GetUnderflowRate(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (!v1) {
    return 0.0;
  }
  *(float *)&double result = (float)*(int *)(a1 + 40) / (float)v1;
  return result;
}

_DWORD *JitterQueue_ResetUnderflowRate(_DWORD *result)
{
  if (result)
  {
    result[10] = 0;
    result[12] = 0;
    result[15] = 0;
    result[16] = 0;
  }
  return result;
}

uint64_t JitterQueue_GetSpeechUnderflowCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

BOOL JitterQueue_GetNextFrameTimestamp(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    *a2 = *(_DWORD *)(v2 + 12);
  }
  return v2 != 0;
}

uint64_t JitterQueue_GetLastFramePriority(uint64_t result, unsigned char *a2, BOOL *a3)
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (v3)
    {
      if (a2) {
        *a2 = *(unsigned char *)(v3 + 1232);
      }
      if (a3) {
        *a3 = *(void *)(*(void *)(result + 8) + 1240) == 0;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t JitterQueue_GetTimestampDeltaToNextDTXPacket(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      int v5 = *(_DWORD *)(v4 + 12);
      while (!*(_DWORD *)(v4 + 1176))
      {
        uint64_t v4 = *(void *)(v4 + 1240);
        if (!v4) {
          goto LABEL_7;
        }
      }
      LODWORD(v4) = *(_DWORD *)(v4 + 12) - v5;
      uint64_t result = 1;
    }
    else
    {
LABEL_7:
      uint64_t result = 0;
    }
    *a2 = v4;
  }
  return result;
}

uint64_t VCNWConnectionMonitor_Create(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1 && *a1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = &v6;
    uint64_t v8 = 0x2000000000;
    uint64_t v9 = 0;
    uint64_t v2 = VTP_NWConnectionQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __VCNWConnectionMonitor_Create_block_invoke;
    block[3] = &unk_1E6DB54C8;
    block[4] = &v6;
    void block[5] = a1;
    dispatch_sync(v2, block);
    uint64_t v3 = v7[3];
    _Block_object_dispose(&v6, 8);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNWConnectionMonitor_Create_cold_1();
      }
    }
    return 0;
  }
  return v3;
}

uint64_t VCNWConnectionMonitor_CreateWithInterfaceName(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    *(void *)CMTime buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    uint64_t v17 = 0;
    uint64_t v9 = VTP_NWConnectionQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __VCNWConnectionMonitor_CreateWithInterfaceName_block_invoke;
    block[3] = &unk_1E6DB54F0;
    char v15 = a3;
    block[4] = a5;
    void block[5] = buf;
    void block[6] = a1;
    block[7] = a4;
    dispatch_sync(v9, block);
    uint64_t v10 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      int v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCNWConnectionMonitor_CreateWithInterfaceName";
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v17) = 174;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Monitor cannot be created with an invalid interfaceName", buf, 0x1Cu);
      }
    }
    return 0;
  }
  return v10;
}

void VCNWConnectionMonitor_Destroy(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v10 = v3;
        __int16 v11 = 2080;
        int v12 = "VCNWConnectionMonitor_Destroy";
        __int16 v13 = 1024;
        int v14 = 205;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Destroying monitor=%p", buf, 0x26u);
      }
    }
    int v5 = VTP_NWConnectionQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __VCNWConnectionMonitor_Destroy_block_invoke;
    block[3] = &__block_descriptor_tmp_3_0;
    block[4] = a1;
    dispatch_sync(v5, block);
  }
  else if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    unint64_t v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v10 = v6;
      __int16 v11 = 2080;
      int v12 = "VCNWConnectionMonitor_Destroy";
      __int16 v13 = 1024;
      int v14 = 210;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d monitor is null!", buf, 0x1Cu);
    }
  }
}

void _VCNWConnectionMonitor_DispatchedProcessInterfaceAdvisoryNotification(uint64_t a1, void (*a2)(uint64_t, void *), long long *a3)
{
  uint64_t v6 = VTP_NWConnectionQueue();
  dispatch_assert_queue_V2(v6);
  if (a1 && a2)
  {
    unint64_t v7 = malloc_type_calloc(1uLL, 0x68uLL, 0x10000405DD82A02uLL);
    if (v7)
    {
      uint64_t v8 = v7;
      VCNWConnectionMonitorUtils_GetNotificationFromAdvisory(a3, (uint64_t)v7);
      a2(a1, v8);
      free(v8);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCNWConnectionMonitor_DispatchedProcessInterfaceAdvisoryNotification_cold_1();
      }
    }
  }
}

void VCNWConnectionMonitor_SetNotificationHandler(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1 && a3 && a4 && *a1)
  {
    uint64_t v8 = VTP_NWConnectionQueue();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    v12[2] = __VCNWConnectionMonitor_SetNotificationHandler_block_invoke;
    v12[3] = &__block_descriptor_tmp_4;
    v12[4] = a1;
    void v12[5] = a2;
    v12[6] = a3;
    v12[7] = a4;
    dispatch_async(v8, v12);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      if (a1) {
        uint64_t v11 = *a1;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v14 = v9;
      __int16 v15 = 2080;
      uint64_t v16 = "VCNWConnectionMonitor_SetNotificationHandler";
      __int16 v17 = 1024;
      int v18 = 270;
      __int16 v19 = 2048;
      __int16 v20 = a1;
      __int16 v21 = 2048;
      uint64_t v22 = a4;
      __int16 v23 = 2048;
      uint64_t v24 = a3;
      __int16 v25 = 2048;
      uint64_t v26 = v11;
      _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, " [%s] %s:%d Monitor, handler or context cannot be NULL, monitor=%p, handler=%p, context=%p, monitor->nwMonitor=%p", buf, 0x44u);
    }
  }
}

void VCNWConnectionMonitor_SetPacketEventHandler(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1 && a3 && a4 && *a1)
  {
    uint64_t v8 = VTP_NWConnectionQueue();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    v12[2] = __VCNWConnectionMonitor_SetPacketEventHandler_block_invoke;
    v12[3] = &__block_descriptor_tmp_5;
    v12[4] = a1;
    void v12[5] = a2;
    v12[6] = a3;
    v12[7] = a4;
    dispatch_async(v8, v12);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      if (a1) {
        uint64_t v11 = *a1;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v14 = v9;
      __int16 v15 = 2080;
      uint64_t v16 = "VCNWConnectionMonitor_SetPacketEventHandler";
      __int16 v17 = 1024;
      int v18 = 314;
      __int16 v19 = 2048;
      __int16 v20 = a1;
      __int16 v21 = 2048;
      uint64_t v22 = a4;
      __int16 v23 = 2048;
      uint64_t v24 = a3;
      __int16 v25 = 2048;
      uint64_t v26 = v11;
      _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, " [%s] %s:%d monitor, handler or context cannot be NULL, monitor=%p, handler=%p, context=%p monitor->nwMonitor=%p", buf, 0x44u);
    }
  }
}

void _VCNWConnectionMonitor_AddNotification(uint64_t a1, long long *a2)
{
  if (a1)
  {
    long long v2 = *a2;
    *(_OWORD *)(a1 + 2404_Block_object_dispose(&STACK[0x250], 8) = a2[1];
    *(_OWORD *)(a1 + 24032) = v2;
    long long v3 = a2[2];
    long long v4 = a2[3];
    long long v5 = a2[4];
    *(_OWORD *)(a1 + 24112) = a2[5];
    *(_OWORD *)(a1 + 24096) = v5;
    *(_OWORD *)(a1 + 24080) = v4;
    *(_OWORD *)(a1 + 24064) = v3;
    uint64_t v6 = (_OWORD *)(a1 + 96 * *(__int16 *)(a1 + 26));
    long long v7 = a2[1];
    v6[2] = *a2;
    v6[3] = v7;
    long long v9 = a2[4];
    long long v8 = a2[5];
    long long v10 = a2[3];
    v6[4] = a2[2];
    v6[5] = v10;
    v6[6] = v9;
    v6[7] = v8;
    *(_WORD *)(a1 + 26) = (*(__int16 *)(a1 + 26) + 1) % 250;
    int v11 = *(__int16 *)(a1 + 24);
    if (v11 < 249) {
      __int16 v12 = v11 + 1;
    }
    else {
      __int16 v12 = 250;
    }
    *(_WORD *)(a1 + 24) = v12;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCNWConnectionMonitor_AddNotification_cold_1();
    }
  }
}

void _VCNWConnectionMonitor_LogSignalsAndMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned __int8 *)(a2 + 2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 72);
  if (v8 == 2)
  {
    __int16 v12 = "%llu\t%u\t%u\t%llu\t%llu\t%u\t%u\t%u\t%llu\t%u\t%u\t%u\n";
  }
  else
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 73);
    a5 = *(unsigned __int16 *)(a2 + 74);
    a6 = *(unsigned __int16 *)(a2 + 76);
    a7 = *(unsigned __int8 *)(a2 + 78);
    a8 = *(unsigned __int8 *)(a2 + 79);
    __int16 v12 = "%llu\t%u\t%u\t%llu\t%llu\t%u\t%u\t%u\t%llu\t%u\t%d\t%u\t%u\t%u\t%u\t0x%x\t%u\t%u\t%u\t%u\t%u\t%2.4f\t%u\t%u\t%"
          "u\t%u\t%u\t%u\t%u\n";
  }
  VRLogfilePrintWithTimestamp(v9, v12, v11, v8, a5, a6, a7, a8, v10);
}

double _VCNWConnectionMonitor_ComputeMetrics(uint64_t a1, uint64_t a2, double result, double a4, float32x4_t a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 2) != 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    int v9 = 0;
    unsigned __int8 v10 = 0;
    float32x4_t v11 = 0uLL;
    float v12 = 0.0;
    unint64_t v13 = 250;
    while (1)
    {
      uint64_t v14 = a1
          + 96
          * (__int16)(*(_WORD *)(a1 + 26)
                    + 249
                    + v6
                    - 250
                    * (((unint64_t)(274877907 * (*(__int16 *)(a1 + 26) + 249 + (int)v6)) >> 36)
                     + ((unint64_t)(274877907 * (*(__int16 *)(a1 + 26) + 249 + (int)v6)) >> 63)));
      uint64_t v15 = *(void *)(v14 + 40);
      if (!v7) {
        uint64_t v7 = *(void *)(v14 + 40);
      }
      uint64_t v16 = v7 - v15;
      if (v7 - v15 > *(unsigned int *)(a1 + 24164)) {
        break;
      }
      uint64_t v17 = v14 + 32;
      a5.i32[0] = *(unsigned __int8 *)(v17 + 59);
      a5.i32[1] = *(unsigned __int8 *)(v17 + 60);
      uint32x4_t v18 = (uint32x4_t)vzip1q_s32((int32x4_t)a5, (int32x4_t)a5);
      a5 = vcvtq_f32_s32(vtrn2q_s32(vrev64q_s32((int32x4_t)vshrq_n_u32(v18, 4uLL)), (int32x4_t)(*(_OWORD *)&v18 & __PAIR128__(0xFFFFFF0FFFFFFF0FLL, 0xFFFFFF0FFFFFFF0FLL))));
      float32x4_t v11 = vaddq_f32(v11, a5);
      a5.i8[0] = *(unsigned char *)(v17 + 61);
      float v12 = v12 + (float)a5.u32[0];
      BOOL v20 = v9 == 1;
      int v9 = *(unsigned __int8 *)(v17 + 53);
      uint64_t v19 = *(unsigned __int16 *)(v17 + 54);
      BOOL v20 = !v20 && v9 == 1;
      BOOL v21 = !v20 || v19 == 0xFFFF;
      char v22 = v21;
      v10 += v22 ^ 1;
      if (v21) {
        uint64_t v19 = 0;
      }
      v8 += v19;
      if (--v6 == -250) {
        goto LABEL_21;
      }
    }
    if (v6)
    {
      unint64_t v13 = -v6;
LABEL_21:
      float64x2_t v23 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v13), 0);
      float32x4_t v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v11.f32), v23)), vdivq_f64(vcvt_hight_f64_f32(v11), v23));
      float v25 = v12 / (double)v13;
      goto LABEL_22;
    }
    float32x4_t v24 = 0uLL;
    float v25 = 0.0;
LABEL_22:
    *(float32x4_t *)(a2 + 140) = v24;
    *(float *)(a2 + 156) = v25;
    float v26 = 0.0;
    if (v7 != v15) {
      float v26 = (float)v8 / (float)v16;
    }
    *(float *)(a2 + 8_Block_object_dispose(&STACK[0x250], 8) = v26;
    int v27 = v10;
    BOOL v29 = v10 > 2u || v8 > 4999;
    *(unsigned char *)(a2 + 92) = v29;
    uint64_t v30 = *(void *)(a1 + 24152) + v8;
    *(void *)(a1 + 24152) = v30;
    *(void *)(a2 + 12_Block_object_dispose(&STACK[0x250], 8) = v30;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v31 = VRTraceErrorLogLevelToCSTR();
      int v32 = *MEMORY[0x1E4F47A50];
      uint64_t v33 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          double v34 = *(float *)(a2 + 88);
          int v35 = *(unsigned __int8 *)(a2 + 92);
          int v38 = 136316930;
          uint64_t v39 = v31;
          __int16 v40 = 2080;
          int v41 = "_VCNWConnectionMonitor_ComputeMetrics";
          __int16 v42 = 1024;
          int v43 = 505;
          __int16 v44 = 2048;
          uint64_t v45 = v16;
          __int16 v46 = 2048;
          uint64_t v47 = v8;
          __int16 v48 = 2048;
          double v49 = v34;
          __int16 v50 = 1024;
          int v51 = v27;
          __int16 v52 = 1024;
          int v53 = v35;
          _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Off Channel Metrics currentTimeDelta=%llu accumulatedOffChannelTime=%llu statistics->offChannelTimeRatio=%4.4f offChannelSwitchCount=%u statistics->detectedFrequentOffChannelActivity=%d", (uint8_t *)&v38, 0x46u);
        }
      }
      else if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        double v36 = *(float *)(a2 + 88);
        int v37 = *(unsigned __int8 *)(a2 + 92);
        int v38 = 136316930;
        uint64_t v39 = v31;
        __int16 v40 = 2080;
        int v41 = "_VCNWConnectionMonitor_ComputeMetrics";
        __int16 v42 = 1024;
        int v43 = 505;
        __int16 v44 = 2048;
        uint64_t v45 = v16;
        __int16 v46 = 2048;
        uint64_t v47 = v8;
        __int16 v48 = 2048;
        double v49 = v36;
        __int16 v50 = 1024;
        int v51 = v27;
        __int16 v52 = 1024;
        int v53 = v37;
        _os_log_debug_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Off Channel Metrics currentTimeDelta=%llu accumulatedOffChannelTime=%llu statistics->offChannelTimeRatio=%4.4f offChannelSwitchCount=%u statistics->detectedFrequentOffChannelActivity=%d", (uint8_t *)&v38, 0x46u);
      }
    }
  }
  return result;
}

void _VCNWConnectionMonitor_ProcessNotification(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a3 + 12_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x250], 8) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a2)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      int v9 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(a2 + 8);
          *(_DWORD *)uint64_t v33 = 136315906;
          *(void *)&v33[4] = v7;
          *(_WORD *)&v33[12] = 2080;
          *(void *)&v33[14] = "_VCNWConnectionMonitor_ProcessNotification";
          *(_WORD *)&v33[22] = 1024;
          *(_DWORD *)&v33[24] = 514;
          *(_WORD *)&v33[28] = 2048;
          *(void *)&v33[30] = v10;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d  timestamp%llu", v33, 0x26u);
        }
      }
      else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        _VCNWConnectionMonitor_ProcessNotification_cold_3();
      }
    }
    if (*(unsigned char *)a2 == 2)
    {
      long long v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v33[32] = *(_OWORD *)(a2 + 32);
      long long v34 = v11;
      long long v12 = *(_OWORD *)(a2 + 80);
      long long v35 = *(_OWORD *)(a2 + 64);
      long long v36 = v12;
      long long v13 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)a2;
      *(_OWORD *)&v33[16] = v13;
      _VCNWConnectionMonitor_AddNotification(a1, (long long *)v33);
      *(_WORD *)a3 = *(_WORD *)(a1 + 24032);
      int v16 = *(unsigned __int8 *)(a1 + 24034);
      *(unsigned char *)(a3 + 2) = v16;
      *(_OWORD *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = *(_OWORD *)(a1 + 24040);
      *(void *)(a3 + 24) = *(void *)(a1 + 24056);
      *(void *)&long long v17 = *(void *)(a1 + 24072);
      *(void *)(a3 + 32) = v17;
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 24080);
      *(void *)(a3 + 4_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a1 + 24064);
      *(_DWORD *)(a3 + 56) = *(_DWORD *)(a1 + 24036);
      if (v16 == 1)
      {
        *(_DWORD *)(a3 + 72) = *(_DWORD *)(a1 + 24084);
        unsigned int v18 = *(unsigned __int16 *)(a1 + 24088);
        if (v18 == 0xFFFF) {
          unsigned int v18 = 0;
        }
        *(_WORD *)(a3 + 76) = v18;
        *(unsigned char *)(a3 + 7_Block_object_dispose(&STACK[0x250], 8) = *(unsigned char *)(a1 + 24090);
        unsigned int v19 = *(unsigned __int8 *)(a1 + 24091);
        *(unsigned char *)(a3 + 81) = v19 & 0xF;
        *(unsigned char *)(a3 + 80) = v19 >> 4;
        unsigned int v20 = *(unsigned __int8 *)(a1 + 24092);
        *(unsigned char *)(a3 + 83) = v20 & 0xF;
        *(unsigned char *)(a3 + 82) = v20 >> 4;
        *(unsigned char *)(a3 + 84) = *(unsigned char *)(a1 + 24093);
        unsigned int v21 = *(unsigned __int8 *)(a1 + 24094);
        *(unsigned char *)(a3 + 79) = v21;
        if (*(_DWORD *)(a1 + 24144) > v21) {
          unsigned int v21 = *(_DWORD *)(a1 + 24144);
        }
        *(_DWORD *)(a1 + 24144) = v21;
        *(unsigned char *)(a3 + 120) = v21;
        if (*(unsigned __int16 *)(a1 + 24160) > v18) {
          LOWORD(v1_Block_object_dispose(&STACK[0x250], 8) = *(_WORD *)(a1 + 24160);
        }
        *(_WORD *)(a1 + 24160) = v18;
        *(_WORD *)(a3 + 136) = v18;
        *(_WORD *)(a3 + 94) = *(_WORD *)(a1 + 24095);
        long long v17 = *(_OWORD *)(a1 + 24097);
        *(_OWORD *)(a3 + 96) = v17;
        *(void *)(a3 + 112) = *(void *)(a1 + 24113);
      }
      else if (v16 == 2)
      {
        *(unsigned char *)(a3 + 3) = *(unsigned char *)(a1 + 24035);
        *(unsigned char *)(a3 + 72) = *(unsigned char *)(a1 + 24084);
      }
      _VCNWConnectionMonitor_ComputeMetrics(a1, a3, *(double *)&v17, v14, v15);
      long long v22 = *(_OWORD *)(a3 + 112);
      long long v37 = *(_OWORD *)(a3 + 96);
      long long v38 = v22;
      long long v23 = *(_OWORD *)(a3 + 144);
      long long v39 = *(_OWORD *)(a3 + 128);
      long long v40 = v23;
      long long v24 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)&v33[32] = *(_OWORD *)(a3 + 32);
      long long v34 = v24;
      long long v25 = *(_OWORD *)(a3 + 80);
      long long v35 = *(_OWORD *)(a3 + 64);
      long long v36 = v25;
      long long v26 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)a3;
      *(_OWORD *)&v33[16] = v26;
      _VCNWConnectionMonitor_LogSignalsAndMetrics(a1, (uint64_t)v33, v27, v28, v29, v30, v31, v32);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCNWConnectionMonitor_ProcessNotification_cold_2();
      }
    }
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCNWConnectionMonitor_ProcessNotification_cold_1();
    }
  }
}

void VCNWConnectionMonitor_SetStatisticsHandler(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1 && a3 && a4 && *a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      int v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v16 = v8;
        __int16 v17 = 2080;
        unsigned int v18 = "VCNWConnectionMonitor_SetStatisticsHandler";
        __int16 v19 = 1024;
        int v20 = 574;
        __int16 v21 = 2048;
        long long v22 = a1;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d monitor=%p", buf, 0x26u);
      }
    }
    uint64_t v10 = VTP_NWConnectionQueue();
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    _OWORD v14[2] = __VCNWConnectionMonitor_SetStatisticsHandler_block_invoke;
    v14[3] = &__block_descriptor_tmp_8_0;
    void v14[4] = a1;
    void v14[5] = a2;
    v14[6] = a3;
    v14[7] = a4;
    dispatch_async(v10, v14);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v11 = VRTraceErrorLogLevelToCSTR();
    long long v12 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      if (a1) {
        uint64_t v13 = *a1;
      }
      else {
        uint64_t v13 = 0;
      }
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v16 = v11;
      __int16 v17 = 2080;
      unsigned int v18 = "VCNWConnectionMonitor_SetStatisticsHandler";
      __int16 v19 = 1024;
      int v20 = 571;
      __int16 v21 = 2048;
      long long v22 = a1;
      __int16 v23 = 2048;
      uint64_t v24 = a4;
      __int16 v25 = 2048;
      uint64_t v26 = a3;
      __int16 v27 = 2048;
      uint64_t v28 = v13;
      _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Monitor, handler or context cannot be NULL, monitor=%p, handler=%p, context=%p, monitor->nwMonitor=%p", buf, 0x44u);
    }
  }
}

void VCNWConnectionMonitor_ResetWlanStats(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 24152) = 0;
    *(_DWORD *)(a1 + 24144) = 0;
    *(_WORD *)(a1 + 24160) = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCNWConnectionMonitor_ResetWlanStats_cold_1();
    }
  }
}

void _VCNWConnectionMonitor_CheckAndReleaseNWMonitor(void **a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v2 = VTP_NWConnectionQueue();
  dispatch_assert_queue_V2(v2);
  long long v3 = *a1;
  if (*a1 && !v3[1] && !*v3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      long long v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        uint64_t v8 = v4;
        __int16 v9 = 2080;
        uint64_t v10 = "_VCNWConnectionMonitor_CheckAndReleaseNWMonitor";
        __int16 v11 = 1024;
        int v12 = 52;
        __int16 v13 = 2048;
        double v14 = v3;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d monitor=%p is released", (uint8_t *)&v7, 0x26u);
      }
    }
    uint64_t v6 = v3[3017];
    if (v6) {
      dispatch_release(v6);
    }
    free(v3);
    *a1 = 0;
  }
}

uint64_t videoOrientationForCameraStatusBits(char a1)
{
  if ((a1 & 0x80) == 0) {
    return 0;
  }
  unsigned int v3 = a1 & 8;
  uint64_t result = 1;
  switch(a1 & 3)
  {
    case 1:
      uint64_t result = 3;
      break;
    case 2:
      uint64_t result = (v3 >> 2) ^ 2;
      break;
    case 3:
      uint64_t result = v3 >> 2;
      break;
    default:
      return result;
  }
  return result;
}

CGAffineTransform *videoOrientationInRadiansForCameraStatusBits@<X0>(CGAffineTransform *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1DAB8];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  if ((result & 0x80) != 0)
  {
    double v4 = 1.57079633;
    switch(result & 3)
    {
      case 1:
        double v4 = 4.71238898;
        break;
      case 2:
        double v4 = 3.14159265;
        if ((result & 8) != 0) {
          double v4 = 0.0;
        }
        break;
      case 3:
        double v4 = 3.14159265;
        if ((result & 8) == 0) {
          double v4 = 0.0;
        }
        break;
      default:
        return CGAffineTransformMakeRotation((CGAffineTransform *)a2, v4);
    }
    return CGAffineTransformMakeRotation((CGAffineTransform *)a2, v4);
  }
  return result;
}

void OUTLINED_FUNCTION_6_4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x26u);
}

uint64_t _VCFECGenerator_Encode_GetParityPacketsCount(uint64_t a1, int a2, float *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  BOOL IsLossStatsEnabled = VCMediaControlInfo_IsLossStatsEnabled(*(unsigned __int8 *)(a1 + 140));
  uint64_t ParityPacketCount_BasedOnPLR = _VCFECGenerator_GetParityPacketCount_BasedOnPLR(a1, a2, a3);
  int v8 = ParityPacketCount_BasedOnPLR;
  if (a2 < 2 || !IsLossStatsEnabled) {
    return ParityPacketCount_BasedOnPLR;
  }
  __int16 v9 = (pthread_mutex_t *)(a1 + 96592);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96592));
  unint64_t v10 = *(void *)(a1 + 96520);
  if (v10)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = v11;
      uint64_t v14 = a1 + 2 * v11;
      if (*(unsigned __int8 *)(v14 + 96528) >= a2) {
        break;
      }
      uint64_t v11 = (unsigned __int16)++v12;
      if (v10 <= (unsigned __int16)v12)
      {
        int v15 = *(unsigned __int8 *)(a1 + 2 * v13 + 96529);
        goto LABEL_10;
      }
    }
    int v17 = *(unsigned __int8 *)(v14 + 96529);
    pthread_mutex_unlock(v9);
    if (v17 >= 7) {
      int v15 = 7;
    }
    else {
      int v15 = v17;
    }
  }
  else
  {
    int v15 = 0;
LABEL_10:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 96592));
  }
  if (v15 >= a2) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = v15;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v18 = VRTraceErrorLogLevelToCSTR();
    __int16 v19 = *MEMORY[0x1E4F47A50];
    int v20 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        double v21 = *a3;
        int v24 = 136316930;
        uint64_t v25 = v18;
        __int16 v26 = 2080;
        __int16 v27 = "_VCFECGenerator_GetParityPacketCount_BasedOnFECFeedback";
        __int16 v28 = 1024;
        int v29 = 248;
        __int16 v30 = 1024;
        int v31 = a2;
        __int16 v32 = 1024;
        int v33 = v15;
        __int16 v34 = 1024;
        int v35 = v16;
        __int16 v36 = 1024;
        int v37 = v8;
        __int16 v38 = 2048;
        double v39 = v21;
        _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Parity Packet Count Based on FEC Feedback inputPacketCount=%d foundFECLevel=%d parityPacketsCount=%d parityPacketsCountPlrBased=%d transmissionFactor=%2.2f ", (uint8_t *)&v24, 0x3Eu);
      }
    }
    else if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      double v23 = *a3;
      int v24 = 136316930;
      uint64_t v25 = v18;
      __int16 v26 = 2080;
      __int16 v27 = "_VCFECGenerator_GetParityPacketCount_BasedOnFECFeedback";
      __int16 v28 = 1024;
      int v29 = 248;
      __int16 v30 = 1024;
      int v31 = a2;
      __int16 v32 = 1024;
      int v33 = v15;
      __int16 v34 = 1024;
      int v35 = v16;
      __int16 v36 = 1024;
      int v37 = v8;
      __int16 v38 = 2048;
      double v39 = v23;
      _os_log_debug_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Parity Packet Count Based on FEC Feedback inputPacketCount=%d foundFECLevel=%d parityPacketsCount=%d parityPacketsCountPlrBased=%d transmissionFactor=%2.2f ", (uint8_t *)&v24, 0x3Eu);
    }
  }
  return v16;
}

uint64_t _VCFECGenerator_GetParityPacketCount_BasedOnPLR(uint64_t a1, int a2, float *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(int *)(a1 + 132) >= 100) {
    unsigned int v6 = 100;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a1 + 132);
  }
  uint64_t v7 = FECUtil_FECPercentageToLevelofProtection(v6);
  uint64_t RealNumParity = FECUtil_GetRealNumParity(a2, v7);
  if (a3)
  {
    int v9 = *(_DWORD *)(a1 + 132);
    float v10 = 1.0;
    if (v9 >= 101)
    {
      float v10 = (float)v9 / 100.0;
      if (v10 < 1.0) {
        float v10 = 1.0;
      }
    }
    *a3 = v10;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      int v12 = *MEMORY[0x1E4F47A50];
      uint64_t v13 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          double v14 = *a3;
          int v17 = 136316418;
          uint64_t v18 = v11;
          __int16 v19 = 2080;
          int v20 = "_VCFECGenerator_GetParityPacketCount_BasedOnPLR";
          __int16 v21 = 1024;
          int v22 = 217;
          __int16 v23 = 1024;
          int v24 = a2;
          __int16 v25 = 1024;
          int v26 = RealNumParity;
          __int16 v27 = 2048;
          double v28 = v14;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Parity Packet Count Based on PLR inputPacketCount=%d parityPacketsCount=%d transmissionFactor=%2.2f", (uint8_t *)&v17, 0x32u);
        }
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        double v16 = *a3;
        int v17 = 136316418;
        uint64_t v18 = v11;
        __int16 v19 = 2080;
        int v20 = "_VCFECGenerator_GetParityPacketCount_BasedOnPLR";
        __int16 v21 = 1024;
        int v22 = 217;
        __int16 v23 = 1024;
        int v24 = a2;
        __int16 v25 = 1024;
        int v26 = RealNumParity;
        __int16 v27 = 2048;
        double v28 = v16;
        _os_log_debug_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Parity Packet Count Based on PLR inputPacketCount=%d parityPacketsCount=%d transmissionFactor=%2.2f", (uint8_t *)&v17, 0x32u);
      }
    }
  }
  return RealNumParity;
}

uint64_t _VCFECGeneratorClassRegister(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t VCFECGenerator_Create(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, const void *a5, const void *a6, const void *a7)
{
  if (a2)
  {
    if (VCFECGeneratorGetTypeID_initOnce != -1) {
      dispatch_once_f(&VCFECGeneratorGetTypeID_initOnce, &VCFECGeneratorGetTypeID_typeID, (dispatch_function_t)_VCFECGeneratorClassRegister);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v14 = Instance;
      if (a3 >= 2)
      {
        uint64_t v20 = 2150825985;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCFECGenerator_Create_cold_3();
          }
        }
      }
      else
      {
        *(_DWORD *)(Instance + 136) = a3;
        if (a4 >= 3)
        {
          uint64_t v20 = 2150825985;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCFECGenerator_Create_cold_4();
            }
          }
        }
        else
        {
          *(unsigned char *)(Instance + 140) = a4;
          int v15 = VCMemoryPool_Create(0x30uLL);
          *(void *)(v14 + 16) = v15;
          if (v15)
          {
            if (VCSingleLinkedListInitialize(v14 + 24, (uint64_t)VCFECPacketList_CompareEntries))
            {
              if (VCSingleLinkedListInitialize(v14 + 56, (uint64_t)VCFECPacketList_CompareEntries))
              {
                if (VCSingleLinkedListInitialize(v14 + 88, (uint64_t)VCFECPacketList_CompareEntries))
                {
                  double v16 = *(const void **)(v14 + 160);
                  *(void *)(v14 + 160) = a5;
                  if (a5) {
                    CFRetain(a5);
                  }
                  if (v16) {
                    CFRelease(v16);
                  }
                  int v17 = (const void **)(v14 + 96656);
                  uint64_t v18 = *(const void **)(v14 + 152);
                  *(void *)(v14 + 152) = a6;
                  if (a6) {
                    CFRetain(a6);
                  }
                  if (v18) {
                    CFRelease(v18);
                  }
                  *(_DWORD *)(v14 + 132) = -1;
                  *(void *)(v14 + 16_Block_object_dispose(&STACK[0x250], 8) = 0;
                  *(_DWORD *)(v14 + 176) = 0;
                  pthread_mutex_init((pthread_mutex_t *)(v14 + 96592), 0);
                  __int16 v19 = *v17;
                  __int16 *v17 = a7;
                  if (a7) {
                    CFRetain(a7);
                  }
                  if (v19) {
                    CFRelease(v19);
                  }
                  if (a7)
                  {
                    *(_DWORD *)(v14 + 96664) = VCReporting_GetDynamicReportingModuleID();
                    reportingRegisterPeriodicTaskWeak();
                  }
                  uint64_t v20 = 0;
                  *a2 = v14;
                  return v20;
                }
                uint64_t v20 = 2150825987;
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VCFECGenerator_Create_cold_6();
                  }
                }
              }
              else
              {
                uint64_t v20 = 2150825987;
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VCFECGenerator_Create_cold_7();
                  }
                }
              }
            }
            else
            {
              uint64_t v20 = 2150825987;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VCFECGenerator_Create_cold_8();
                }
              }
            }
          }
          else
          {
            uint64_t v20 = 2150825987;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCFECGenerator_Create_cold_5();
              }
            }
          }
        }
      }
      CFRelease((CFTypeRef)v14);
      return v20;
    }
    uint64_t v20 = 2150825987;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCFECGenerator_Create_cold_2();
      }
    }
  }
  else
  {
    uint64_t v20 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCFECGenerator_Create_cold_1();
      }
    }
  }
  return v20;
}

uint64_t VCFECGenerator_PushPacket(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 16));
      if (v4)
      {
        long long v5 = v4;
        int v6 = *(_DWORD *)(a1 + 120);
        *(_DWORD *)(a1 + 120) = v6 + 1;
        *((_DWORD *)v4 + 2) = v6;
        v4[4] = 0;
        v4[5] = 0;
        v4[3] = 0;
        CFRetain(a2);
        v5[2] = a2;
        VCSingleLinkedListPush(a1 + 24, v5);
        return 0;
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      {
        return 2150825987;
      }
      else
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t v7 = 2150825987;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCFECGenerator_PushPacket_cold_3();
        }
      }
    }
    else
    {
      uint64_t v7 = 2150825985;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCFECGenerator_PushPacket_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v7 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCFECGenerator_PushPacket_cold_1();
      }
    }
  }
  return v7;
}

uint64_t VCFECGenerator_PopPacket(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      *a2 = 0;
      int v6 = VCSingleLinkedListPop((uint64_t *)(a1 + 56));
      if (v6)
      {
        *a2 = v6[2];
        if (a3)
        {
          long long v7 = *(_OWORD *)(v6 + 3);
          *(void *)(a3 + 16) = v6[5];
          *(_OWORD *)a3 = v7;
        }
        *(_DWORD *)(a1 + 144) = ((*((unsigned __int16 *)v6 + 13) >> 12) & 1) + *(_DWORD *)(a1 + 144) - 1;
        VCMemoryPool_Free(*(OSQueueHead **)(a1 + 16), v6);
        return 0;
      }
      else
      {
        uint64_t v8 = 2150826006;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            VCFECGenerator_PopPacket_cold_3();
            return 2150826006;
          }
        }
      }
    }
    else
    {
      uint64_t v8 = 2150825985;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCFECGenerator_PopPacket_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCFECGenerator_PopPacket_cold_1();
      }
    }
  }
  return v8;
}

uint64_t VCFECGenerator_GetNumberOutputPackets(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = a1 + 56;
    return VCSingleLinkedGetNumberEntries(v2);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCFECGenerator_GetNumberOutputPackets_cold_1();
      }
    }
    return 0;
  }
}

uint64_t VCFECGenerator_GetNumberOutputMediaPackets(uint64_t a1)
{
  if (a1) {
    return *(int *)(a1 + 144);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCFECGenerator_GetNumberOutputMediaPackets_cold_1();
    }
  }
  return 0;
}

uint64_t VCFECGenerator_PerformAction(unint64_t a1, int a2)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 2150825985;
  double v5 = micro();
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCFECGenerator_PerformAction_cold_1();
      }
    }
    return v4;
  }
  double v6 = v5;
  switch(a2)
  {
    case -1:
    case 0:
    case 3:
      uint64_t v7 = 2150826005;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          VCFECGenerator_PerformAction_cold_2();
          goto LABEL_6;
        }
      }
      goto LABEL_110;
    case 1:
      VCFECPacketList_Flush(*(OSQueueHead **)(a1 + 16), (uint64_t *)(a1 + 24));
      VCFECPacketList_Flush(*(OSQueueHead **)(a1 + 16), (uint64_t *)(a1 + 56));
      uint64_t v7 = 0;
      *(_DWORD *)(a1 + 144) = 0;
      goto LABEL_110;
    case 2:
      uint64_t v8 = (uint64_t *)(a1 + 24);
      unint64_t NumberEntries = VCSingleLinkedGetNumberEntries(a1 + 24);
      float v10 = (uint64_t *)(a1 + 88);
      *(unsigned char *)(a1 + 12_Block_object_dispose(&STACK[0x250], 8) = 0;
      uint64_t v105 = (_DWORD *)(a1 + 212);
      int64x2_t v103 = vdupq_n_s64(2uLL);
      int64x2_t v104 = vaddq_s64(vdupq_n_s64(a1), vdupq_n_s64(0x1F8uLL));
      break;
    case 4:
      CFNumberRef v98 = VCSingleLinkedListPop((uint64_t *)(a1 + 24));
      if (v98)
      {
        CFNumberRef v99 = v98;
        do
        {
          *((unsigned char *)v99 + 24) = 3;
          *(uint64_t *)((char *)v99 + 33) = 0;
          *(uint64_t *)((char *)v99 + 25) = 0;
          v99[5] = 0;
          VCSingleLinkedListPush(a1 + 56, v99);
          int v100 = *(_DWORD *)(a1 + 144);
          if ((*((_WORD *)v99 + 13) & 0x1000) == 0) {
            ++v100;
          }
          *(_DWORD *)(a1 + 144) = v100;
          CFNumberRef v99 = VCSingleLinkedListPop((uint64_t *)(a1 + 24));
        }
        while (v99);
      }
LABEL_109:
      uint64_t v7 = 0;
      goto LABEL_110;
    default:
LABEL_6:
      uint64_t v7 = 2150826005;
      goto LABEL_110;
  }
  while (1)
  {
    if (!NumberEntries) {
      goto LABEL_109;
    }
    unint64_t v11 = 8;
    if (NumberEntries - 9 < 4) {
      unint64_t v11 = (unint64_t)(double)(NumberEntries >> 1);
    }
    unint64_t v12 = v11 >= NumberEntries ? NumberEntries : v11;
    if (v12) {
      break;
    }
LABEL_19:
    uint64_t v14 = VCSingleLinkedGetNumberEntries((uint64_t)v8);
    int v108 = VCSingleLinkedGetNumberEntries((uint64_t)v10);
    uint64_t v112 = 0;
    int v111 = 0;
    int v15 = VCSingleLinkedListPop(v10);
    if (v15)
    {
      double v16 = v15;
      unsigned __int16 v17 = 0;
      do
      {
        uint64_t v18 = (OpaqueCMBlockBuffer *)v16[2];
        unint64_t v19 = a1 + 8 * v17;
        *(void *)(v19 + 24_Block_object_dispose(&STACK[0x250], 8) = v18;
        *(_DWORD *)(a1 + 4 * v17 + 180) = CMBlockBufferGetDataLength(v18);
        CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v19 + 248), 0, 0, 0, (char **)(v19 + 376));
        VCMemoryPool_Free(*(OSQueueHead **)(a1 + 16), v16);
        ++v17;
        double v16 = VCSingleLinkedListPop(v10);
      }
      while (v16);
    }
    else
    {
      unsigned __int16 v17 = 0;
    }
    *(_OWORD *)uint64_t v105 = 0u;
    *(_OWORD *)(a1 + 22_Block_object_dispose(&STACK[0x250], 8) = 0u;
    uint64_t v20 = 440;
    int64x2_t v21 = (int64x2_t)xmmword_1E259DC60;
    do
    {
      v22.i64[0] = 12000 * v21.i64[0];
      v22.i64[1] = 12000 * v21.i64[1];
      *(int64x2_t *)(a1 + v20) = vaddq_s64(v104, v22);
      int64x2_t v21 = vaddq_s64(v21, v103);
      v20 += 16;
    }
    while (v20 != 504);
    unint64_t v106 = v14;
    if (v17 == 1)
    {
      uint64_t v130 = 0;
      long long v129 = xmmword_1E259DC70;
      if (VCMediaControlInfo_IsLossStatsEnabled(*(unsigned __int8 *)(a1 + 140)))
      {
        int v23 = *(_DWORD *)(a1 + 132);
        if (v23 >= 1)
        {
          int v24 = *(_DWORD *)(a1 + 136);
          LOBYTE(v129) = v24 & 3;
          WORD1(v129) = 0;
          if (v24 == 1) {
            WORD2(v129) = v23 & 0x3FF;
          }
        }
      }
      __int16 v25 = *(OSQueueHead **)(a1 + 16);
      int v26 = *(const void **)(a1 + 248);
      int v27 = *(_DWORD *)(a1 + 124);
      *(_DWORD *)(a1 + 124) = v27 + 1;
      if ((VCFECPacketList_AllocateAndPush(v25, v26, v27, a1 + 56, &v129) & 0x80000000) == 0)
      {
        uint64_t v7 = 0;
        ++*(_DWORD *)(a1 + 144);
        goto LABEL_69;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v90 = VRTraceErrorLogLevelToCSTR();
        CFNumberRef v91 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v114 = v90;
          __int16 v115 = 2080;
          uint64_t v116 = "_VCFECGenerator_Encode_PrepareOutputSinglePacketFrame";
          __int16 v117 = 1024;
          int v118 = 332;
          _os_log_error_impl(&dword_1E1EA4000, v91, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failure in allocating an entry list", buf, 0x1Cu);
        }
      }
      uint64_t v7 = 2150825985;
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        goto LABEL_69;
      }
      uint64_t v92 = VRTraceErrorLogLevelToCSTR();
      uint64_t v93 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        goto LABEL_69;
      }
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v114 = v92;
      __int16 v115 = 2080;
      uint64_t v116 = "_VCFECGenerator_EncodeCurrentGroup";
      __int16 v117 = 1024;
      int v118 = 357;
      double v78 = v93;
      int32x2_t v79 = " [%s] %s:%d Error in preparing single packet frame output";
      goto LABEL_82;
    }
    int v110 = 1065353216;
    ParityPacketsCFIndex Count = _VCFECGenerator_Encode_GetParityPacketsCount(a1, v108, (float *)&v110);
    int v109 = ParityPacketsCount;
    if (ParityPacketsCount > v108)
    {
      uint64_t v7 = 2150825998;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v94 = VRTraceErrorLogLevelToCSTR();
        uint64_t v95 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v114 = v94;
          __int16 v115 = 2080;
          uint64_t v116 = "_VCFECGenerator_EncodeCurrentGroup";
          __int16 v117 = 1024;
          int v118 = 362;
          __int16 v119 = 1024;
          int v120 = v109;
          __int16 v121 = 1024;
          int v122 = v108;
          _os_log_error_impl(&dword_1E1EA4000, v95, OS_LOG_TYPE_ERROR, " [%s] %s:%d Number of parity can't be larger than input packets parityPacketsNeeded=%d numPacketsInGroup=%d", buf, 0x28u);
          uint64_t v7 = 2150825998;
        }
      }
      goto LABEL_69;
    }
    if (ParityPacketsCount < 1)
    {
      char v29 = v111;
      char v30 = v112;
      float v31 = *(float *)&v110;
      long long v129 = xmmword_1E259DC70;
      uint64_t v130 = 0;
      goto LABEL_42;
    }
    if ((RSU_Encode(a1 + 376, (__int16 *)(a1 + 180), v108, (void *)(a1 + 440), v105, (_DWORD *)&v112 + 1, (int *)&v112, &v111, (_WORD *)(a1 + 96504), 1) & 0x80000000) == 0)
    {
      char v29 = v111;
      char v30 = v112;
      float v31 = *(float *)&v110;
      long long v129 = xmmword_1E259DC70;
      uint64_t v130 = 0;
      int v32 = *(_DWORD *)(a1 + 136);
      LOBYTE(v129) = v32 & 3 | (4 * (v112 & 7));
      char v33 = *(unsigned char *)(a1 + 128);
      *(unsigned char *)(a1 + 12_Block_object_dispose(&STACK[0x250], 8) = v33 + 1;
      WORD1(v129) = ((v14 == 0) << 7) | ((v29 & 0xF) << 8) | v33 & 0x7F;
      if (v32 == 1)
      {
        if (*(unsigned char *)(a1 + 140)) {
          int v34 = (int)(float)((float)(v31 * (float)v109) * 100.0) / v108;
        }
        else {
          int v34 = *(_DWORD *)(a1 + 132);
        }
        WORD2(v129) = v34 & 0x3FF;
      }
LABEL_42:
      if (v108 < 1)
      {
LABEL_46:
        int v41 = v109;
        if (v109 < 1)
        {
LABEL_68:
          uint64_t v7 = 0;
          float v10 = (uint64_t *)(a1 + 88);
          uint64_t v8 = (uint64_t *)(a1 + 24);
          goto LABEL_69;
        }
        int v42 = 0;
        unsigned __int16 v43 = 0;
        if (v108 >= 8) {
          unsigned __int16 v44 = 8;
        }
        else {
          unsigned __int16 v44 = v108;
        }
        uint64_t v107 = v44;
        int v45 = (int)v31;
        while (1)
        {
          uint64_t v46 = v43;
          unint64_t v47 = a1 + 4 * v43;
          int v50 = *(_DWORD *)(v47 + 212);
          double v49 = (int *)(v47 + 212);
          __int16 v48 = v50;
          if (v50 >= 1)
          {
            WORD1(v129) |= 0x1000u;
            BYTE1(v129) = BYTE1(v129) & 0xF0 | (v42 * v30) & 0xF;
            int v51 = *(_DWORD *)(a1 + 136);
            if (v51 == 1)
            {
              int v56 = *(unsigned __int16 *)(a1 + 2 * v46 + 96504);
              int v57 = *(unsigned __int16 *)(a1 + 130);
              *(_WORD *)(a1 + 130) = v57 + 1;
              *(_DWORD *)((char *)&v129 + 6) = v56 | (v57 << 16);
            }
            else if (v51)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v58 = VRTraceErrorLogLevelToCSTR();
                int v59 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  int v68 = *(_DWORD *)(a1 + 136);
                  *(_DWORD *)CMTime buf = 136315906;
                  uint64_t v114 = v58;
                  __int16 v115 = 2080;
                  uint64_t v116 = "_VCFECGenerator_FillHeaderVersionSpecific";
                  __int16 v117 = 1024;
                  int v118 = 196;
                  __int16 v119 = 1024;
                  int v120 = v68;
                  _os_log_error_impl(&dword_1E1EA4000, v59, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid FEC Header Version=%d", buf, 0x22u);
                }
              }
            }
            else
            {
              WORD3(v129) = v108;
              WORD2(v129) = WORD2(v129) & 0xF800 | v48 & 0x7FF;
              if (v107)
              {
                __int16 v52 = (OpaqueCMBlockBuffer **)(a1 + 248);
                int v53 = (_WORD *)&v129 + 4;
                uint64_t v54 = v107;
                do
                {
                  uint64_t v55 = *v52++;
                  *v53++ = CMBlockBufferGetDataLength(v55);
                  --v54;
                }
                while (v54);
              }
            }
            unint64_t v60 = a1 + 8 * v46;
            int v61 = (CMBlockBufferRef *)(v60 + 312);
            OSStatus v62 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 160), 0, 0x5DCuLL, *(CFAllocatorRef *)(a1 + 152), 0, 0, *v49, 1u, (CMBlockBufferRef *)(v60 + 312));
            if (v62)
            {
              OSStatus v85 = v62;
              float v10 = (uint64_t *)(a1 + 88);
              uint64_t v8 = (uint64_t *)(a1 + 24);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v86 = VRTraceErrorLogLevelToCSTR();
                uint64_t v87 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  int v88 = *v49;
                  *(_DWORD *)CMTime buf = 136316930;
                  uint64_t v114 = v86;
                  __int16 v115 = 2080;
                  uint64_t v116 = "_VCFECGenerator_Encode_PrepareOutput";
                  __int16 v117 = 1024;
                  int v118 = 306;
                  __int16 v119 = 1024;
                  int v120 = v85;
                  __int16 v121 = 1024;
                  int v122 = v42;
                  __int16 v123 = 1024;
                  int v124 = v88;
                  __int16 v125 = 1024;
                  int v126 = v108;
                  __int16 v127 = 1024;
                  int v128 = v109;
                  uint64_t v83 = v87;
                  uint64_t v84 = " [%s] %s:%d Failure allocating output buffer status=%d parityPacketSize[%d]=%d inputPacketCount="
                        "%d parityPacketsCount=%d";
                  uint32_t v89 = 58;
                  goto LABEL_91;
                }
              }
              goto LABEL_79;
            }
            CMBlockBufferReplaceDataBytes(*(const void **)(v60 + 440), *v61, 0, *v49);
            int v41 = v109;
            if (v45 >= 1) {
              break;
            }
          }
LABEL_67:
          unsigned __int16 v43 = v46 + 1;
          int v42 = (unsigned __int16)(v46 + 1);
          if (v41 <= v42) {
            goto LABEL_68;
          }
        }
        int v63 = 0;
        while (1)
        {
          int v64 = *(OSQueueHead **)(a1 + 16);
          CMBlockBufferRef v65 = *v61;
          int v66 = *(_DWORD *)(a1 + 124);
          *(_DWORD *)(a1 + 124) = v66 + 1;
          int v67 = VCFECPacketList_AllocateAndPush(v64, v65, v66, a1 + 56, &v129);
          if (v67) {
            break;
          }
          if (v45 <= (unsigned __int16)++v63) {
            goto LABEL_67;
          }
        }
        int v73 = v67;
        float v10 = (uint64_t *)(a1 + 88);
        uint64_t v8 = (uint64_t *)(a1 + 24);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v74 = VRTraceErrorLogLevelToCSTR();
          int v75 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v114 = v74;
            __int16 v115 = 2080;
            uint64_t v116 = "_VCFECGenerator_Encode_PrepareOutput";
            __int16 v117 = 1024;
            int v118 = 311;
            __int16 v119 = 1024;
            int v120 = v73;
            uint64_t v83 = v75;
            uint64_t v84 = " [%s] %s:%d Failure in allocating an entry list result=%d";
            goto LABEL_90;
          }
        }
      }
      else
      {
        char v35 = 0;
        unsigned __int16 v36 = 0;
        while (1)
        {
          WORD1(v129) &= ~0x1000u;
          BYTE1(v129) = BYTE1(v129) & 0xF0 | (v29 + v35 * v30) & 0xF;
          int v37 = *(OSQueueHead **)(a1 + 16);
          __int16 v38 = *(const void **)(a1 + 8 * v36 + 248);
          int v39 = *(_DWORD *)(a1 + 124);
          *(_DWORD *)(a1 + 124) = v39 + 1;
          int v40 = VCFECPacketList_AllocateAndPush(v37, v38, v39, a1 + 56, &v129);
          if (v40) {
            break;
          }
          ++*(_DWORD *)(a1 + 144);
          char v35 = ++v36;
          if (v36 >= v108) {
            goto LABEL_46;
          }
        }
        int v80 = v40;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v81 = VRTraceErrorLogLevelToCSTR();
          int v82 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v114 = v81;
            __int16 v115 = 2080;
            uint64_t v116 = "_VCFECGenerator_Encode_PrepareOutput";
            __int16 v117 = 1024;
            int v118 = 293;
            __int16 v119 = 1024;
            int v120 = v80;
            uint64_t v83 = v82;
            uint64_t v84 = " [%s] %s:%d Failure in allocating an entry list result=%d";
LABEL_90:
            uint32_t v89 = 34;
LABEL_91:
            _os_log_error_impl(&dword_1E1EA4000, v83, OS_LOG_TYPE_ERROR, v84, buf, v89);
          }
        }
      }
LABEL_79:
      uint64_t v7 = 2150825985;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v76 = VRTraceErrorLogLevelToCSTR();
        uint64_t v77 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v114 = v76;
          __int16 v115 = 2080;
          uint64_t v116 = "_VCFECGenerator_EncodeCurrentGroup";
          __int16 v117 = 1024;
          int v118 = 368;
          double v78 = v77;
          int32x2_t v79 = " [%s] %s:%d Error in preparing output";
LABEL_82:
          _os_log_error_impl(&dword_1E1EA4000, v78, OS_LOG_TYPE_ERROR, v79, buf, 0x1Cu);
          goto LABEL_69;
        }
      }
      goto LABEL_69;
    }
    uint64_t v7 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v96 = VRTraceErrorLogLevelToCSTR();
      CFTypeRef v97 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v114 = v96;
        __int16 v115 = 2080;
        uint64_t v116 = "_VCFECGenerator_EncodeCurrentGroup";
        __int16 v117 = 1024;
        int v118 = 365;
        double v78 = v97;
        int32x2_t v79 = " [%s] %s:%d Failure RSU Encode";
        goto LABEL_82;
      }
    }
LABEL_69:
    uint64_t v69 = 0;
    unint64_t NumberEntries = v106;
    do
    {
      uint64_t v70 = a1 + v69;
      int v71 = *(const void **)(a1 + v69 + 248);
      if (v71)
      {
        CFRelease(v71);
        *(void *)(v70 + 24_Block_object_dispose(&STACK[0x250], 8) = 0;
      }
      __int16 v72 = *(const void **)(v70 + 312);
      if (v72)
      {
        CFRelease(v72);
        *(void *)(v70 + 312) = 0;
      }
      v69 += 8;
    }
    while (v69 != 64);
    if (v7)
    {
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCFECGenerator_PerformAction_cold_3();
        }
      }
      goto LABEL_110;
    }
  }
  while (1)
  {
    uint64_t v13 = VCSingleLinkedListPop(v8);
    if (!v13) {
      break;
    }
    if ((VCSingleLinkedListPush((uint64_t)v10, v13) & 1) == 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCFECGenerator_PerformAction_cold_5();
        }
      }
      goto LABEL_118;
    }
    if (!--v12) {
      goto LABEL_19;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCFECGenerator_PerformAction_cold_4();
    }
  }
LABEL_118:
  uint64_t v7 = 2150825985;
LABEL_110:
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 168), vcvtd_n_s64_f64(micro() - v6, 0x20uLL));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 176), 1u);
  return v7;
}

uint64_t VCFECGenerator_SetFixedFECLevel(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    if (a2 >= 0x12D)
    {
      uint64_t v2 = 2150825985;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCFECGenerator_SetFixedFECLevel_cold_2();
        }
      }
    }
    else
    {
      uint64_t v2 = 0;
      *(_DWORD *)(a1 + 132) = a2;
    }
  }
  else
  {
    uint64_t v2 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCFECGenerator_SetFixedFECLevel_cold_1();
      }
    }
  }
  return v2;
}

uint64_t VCFECGenerator_SetFECLevelPerGroupSizeVector(uint64_t a1, unint64_t a2, const void *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2 >= 0x21)
    {
      uint64_t v13 = 2150825985;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCFECGenerator_SetFECLevelPerGroupSizeVector_cold_2();
        }
      }
    }
    else
    {
      double v6 = (pthread_mutex_t *)(a1 + 96592);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 96592));
      *(void *)(a1 + 96520) = a2;
      memcpy((void *)(a1 + 96528), a3, 2 * a2);
      long long v51 = 0u;
      memset(v52, 0, sizeof(v52));
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      long long v43 = 0u;
      long long v42 = 0u;
      long long v41 = 0u;
      long long v40 = 0u;
      long long v39 = 0u;
      long long v38 = 0u;
      long long v37 = 0u;
      long long v36 = 0u;
      long long v35 = 0u;
      long long v34 = 0u;
      long long v33 = 0u;
      long long v32 = 0u;
      long long v31 = 0u;
      long long v30 = 0u;
      long long v29 = 0u;
      char v28 = 10;
      if (a2)
      {
        uint64_t v7 = 0;
        int v8 = 0;
        do
        {
          __sprintf_chk(&v28, 0, 0x190uLL, "%s(%02d,%02d)\t", &v28, *(unsigned __int8 *)(a1 + 2 * v7 + 96528), *(unsigned __int8 *)(a1 + 2 * v7 + 96529));
          uint64_t v7 = (unsigned __int16)++v8;
        }
        while (*(void *)(a1 + 96520) > (unint64_t)(unsigned __int16)v8);
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        __str = 0;
        asprintf(&__str, " _fecLevelPerGroupSizeVector=\n%s\n", &v28);
        if (__str)
        {
          int v15 = v6;
          __lasts = 0;
          int v9 = strtok_r(__str, "\n", &__lasts);
          float v10 = (os_log_t *)MEMORY[0x1E4F47A50];
          do
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v11 = VRTraceErrorLogLevelToCSTR();
              unint64_t v12 = *v10;
              if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v19 = v11;
                __int16 v20 = 2080;
                int64x2_t v21 = "_VCFECGenerator_PrintFECLevelVector";
                __int16 v22 = 1024;
                int v23 = 641;
                __int16 v24 = 2080;
                __int16 v25 = "histogram";
                __int16 v26 = 2080;
                int v27 = v9;
                _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s %s", buf, 0x30u);
              }
            }
            int v9 = strtok_r(0, "\n", &__lasts);
          }
          while (v9);
          free(__str);
          double v6 = v15;
        }
      }
      pthread_mutex_unlock(v6);
      return 0;
    }
  }
  else
  {
    uint64_t v13 = 2150825985;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCFECGenerator_SetFECLevelPerGroupSizeVector_cold_1();
      }
    }
  }
  return v13;
}

double VCFECGenerator_GetProcessingAverageTime(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (unsigned __int16)atomic_exchange((atomic_uint *volatile)(a1 + 176), 0);
    if (v1) {
      return (double)(uint64_t)atomic_exchange((atomic_ullong *volatile)(a1 + 168), 0)
    }
           / (double)(unint64_t)(v1 << 32);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCFECGenerator_GetProcessingAverageTime_cold_1();
    }
  }
  return NAN;
}

void _VCFECGenerator_Init(uint64_t a1)
{
}

void _VCFECGenerator_Finalize(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (CFTypeRef *)(a1 + 96656);
  VCFECPacketList_Flush(*(OSQueueHead **)(a1 + 16), (uint64_t *)(a1 + 24));
  VCFECPacketList_Flush(*(OSQueueHead **)(a1 + 16), (uint64_t *)(a1 + 56));
  *(_DWORD *)(a1 + 144) = 0;
  VCMemoryPool_Destroy(*(OSQueueHead **)(a1 + 16));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 96592));
  long long v3 = *(const void **)(a1 + 152);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 160);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 160) = 0;
  }
  if (*v2)
  {
    reportingUnregisterPeriodicTask();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    double v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315650;
      uint64_t v8 = v5;
      __int16 v9 = 2080;
      float v10 = "_VCFECGenerator_DeregisterPeriodicReportingTask";
      __int16 v11 = 1024;
      int v12 = 441;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d fecGenerator->_reportingAgent is NULL!", (uint8_t *)&v7, 0x1Cu);
    }
  }
  if (*v2)
  {
    CFRelease(*v2);
    *uint64_t v2 = 0;
  }
}

void sub_1E1F8A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

AudioComponent RegisterCodec(OSType a1, const char *__symbol, int a3)
{
  inFactory[1] = *(AudioComponentFactoryFunction *)MEMORY[0x1E4F143B8];
  if (a3) {
    OSType v4 = 1634037347;
  }
  else {
    OSType v4 = 1633969507;
  }
  inDesc.componentType = v4;
  inDesc.componentSubType = a1;
  *(void *)&inDesc.componentManufacturer = 1634758764;
  inDesc.componentFlagsMasuint64_t k = 0;
  AudioComponent result = (AudioComponent)GetAudioCodecFactory(AudioComponentDescription const*,char const*)::libHandle;
  if (GetAudioCodecFactory(AudioComponentDescription const*,char const*)::libHandle
    || (AudioComponent result = (AudioComponent)dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioCodecs", 1),
        (GetAudioCodecFactory(AudioComponentDescription const*,char const*)::libuint64_t Handle = (uint64_t)result) != 0))
  {
    AudioComponent result = (AudioComponent)dlsym(result, __symbol);
    if (result)
    {
      inFactory[0] = (AudioComponentFactoryFunction)&inDesc;
      ((void (*)(AudioComponentFactoryFunction *))result)(inFactory);
      if (inFactory[0]) {
        return AudioComponentRegister(&inDesc, &stru_1F3D3E450, 0, inFactory[0]);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

BOOL RegisterG722Encoder()
{
  AudioComponent v0 = (AudioComponent)RegisterG722Encoder::gG722Encoder;
  if (!RegisterG722Encoder::gG722Encoder)
  {
    AudioComponent v0 = RegisterCodec(0x676B6363u, "RegisterExternalAudioCodecs", 1);
    RegisterG722Encoder::gG722Encoder = (uint64_t)v0;
  }
  return v0 != 0;
}

BOOL RegisterG722Decoder()
{
  AudioComponent v0 = (AudioComponent)RegisterG722Decoder::gG722Decoder;
  if (!RegisterG722Decoder::gG722Decoder)
  {
    AudioComponent v0 = RegisterCodec(0x676B6363u, "RegisterExternalAudioCodecs", 0);
    RegisterG722Decoder::gG722Decoder = (uint64_t)v0;
  }
  return v0 != 0;
}

void VCMediaQueueUtil_FindPacketInTxHistory(unsigned __int16 *a1, uint64_t *a2, pthread_mutex_t *a3, int a4, double a5, double a6)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (*((void *)a1 + 3) && *((void *)a1 + 4) && *((void *)a1 + 5) && *((void *)a1 + 6) && *((void *)a1 + 7))
  {
    __int16 v9 = a3;
    memset(v87, 0, sizeof(v87));
    pthread_mutex_lock(a3);
    int v15 = *((_DWORD *)a2 + 3);
    uint64_t v16 = *a2;
    if (v15 >= 1)
    {
      int v17 = 0;
      int v18 = *((_DWORD *)a2 + 2);
      __int16 v19 = v18 - 1;
      __int16 v20 = v18 - 2;
      int v21 = *a1;
      do
      {
        int v22 = (v20 + 1) & 0x1FF;
        int v23 = *(unsigned __int16 *)(v16 + 48 * ((v20 + 1) & 0x1FF) + 2);
        int v24 = (unsigned __int16)(v23 - v21) >= 0x7FFFu ? 2 : 4;
        int v25 = v23 == v21 ? 1 : v24;
        if (v25 == 2) {
          break;
        }
        if (v25 == 1)
        {
          uint64_t v57 = v16 + 48 * ((v20 + 1) & 0x1FF);
          double v58 = *(double *)(v57 + 40);
          unsigned int v59 = *((_DWORD *)a1 + 3);
          if (v59 >= 0xF) {
            LOWORD(v59) = 15;
          }
          *(_WORD *)uint64_t v57 = v59;
          double v11 = *(double *)(a1 + 2);
          *(double *)(v57 + 12) = v11;
          *(void *)(v57 + 32) = *((void *)a1 + 2);
          unint64_t v60 = (void *)(v57 + 32);
          int v61 = v17 + 1;
          if (v17 + 1 >= v15)
          {
            unsigned int v26 = 0;
            unsigned int v27 = 0;
            int v28 = -1;
            int v29 = -1;
            int v30 = -1;
            goto LABEL_18;
          }
          __int16 v74 = v19;
          int v73 = v60;
          int v75 = v9;
          int v62 = 0;
          int v63 = 0;
          int v64 = 0;
          int v65 = 0;
          int v66 = 0;
          unsigned int v27 = 0;
          unsigned int v26 = 0;
          int v67 = -1;
          int v30 = -1;
          int v29 = -1;
          int v28 = -1;
          int v31 = a4;
          do
          {
            if (*(_DWORD *)(v16 + 48 * (v20 & 0x1FF) + 12))
            {
              int v68 = (unsigned __int16 *)(v16 + 48 * (v20 & 0x1FF));
              if (v31)
              {
                int v69 = *((_DWORD *)v68 + 4);
                int v85 = -1431655766;
                int v86 = -1431655766;
                if (!(v65 & 1 | (v69 == 0)))
                {
                  int v78 = v62;
                  int v79 = v66;
                  int v76 = v64;
                  int v77 = v63;
                  int v82 = v29;
                  unsigned int v83 = v26;
                  int v80 = v65;
                  int v81 = v28;
                  FECUtil_UnpackFrameLoss((unsigned __int16)v69, &v86, &v85);
                  int v64 = v76;
                  int v63 = v77;
                  int v62 = v78;
                  int v66 = v79;
                  int v65 = v80;
                  int v28 = v81;
                  int v29 = v82;
                  unsigned int v26 = v86 + v83;
                  int v31 = a4;
                  v27 += v85;
                }
              }
              ++*((_DWORD *)v87 + *v68);
              double v11 = v58 - *(double *)(v16 + 48 * (v20 & 0x1FF) + 40);
              if (!(v63 & 1 | (v11 <= 1.0)))
              {
                double v12 = (double)(unint64_t)(*((void *)a1 + 2) - *(void *)(v16 + 48 * (v20 & 0x1FF) + 32))
                    / v11;
                **((_DWORD **)a1 + 4) = vcvtd_n_u64_f64(v12, 3uLL);
                int v63 = 1;
              }
              if (!(v62 & 1 | (v11 <= a5))) {
                int v28 = v20 & 0x1FF;
              }
              v62 |= (v62 | (v11 <= a5)) ^ 1;
              if (!(v66 & 1 | (v11 <= a6))) {
                int v29 = v20 & 0x1FF;
              }
              v66 |= (v66 | (v11 <= a6)) ^ 1;
              if (!(v65 & 1 | (v11 < 1.0))) {
                int v30 = v20 & 0x1FF;
              }
              v65 |= (v65 | (v11 < 1.0)) ^ 1;
              if (v11 > 5.0 && (v64 & 1) == 0) {
                int v64 = 1;
              }
              if (v62 & 1) != 0 && (v66 & 1) != 0 && (v65 & 1) != 0 && (v64)
              {
                int v67 = v61;
                if (v63)
                {
                  int v67 = v61;
                  goto LABEL_107;
                }
              }
              else
              {
                int v67 = v61;
              }
            }
            ++v61;
            --v20;
          }
          while (v15 != v61);
          int v61 = v15;
LABEL_107:
          __int16 v9 = v75;
          if (v15 >= 128 && v61 == v15)
          {
            if (v67 == -1) {
              goto LABEL_19;
            }
            unsigned int v71 = (v74 - (_WORD)v67) & 0x1FF;
            if ((v63 & 1) == 0)
            {
              double v11 = v58 - *(double *)(v16 + 48 * v71 + 40);
              if (v11 > 0.0)
              {
                double v12 = (double)(unint64_t)(*((void *)a1 + 2) - *(void *)(v16 + 48 * v71 + 32));
                double v11 = v12 / v11;
                **((_DWORD **)a1 + 4) = vcvtd_n_u64_f64(v11, 3uLL);
              }
            }
            if ((v62 & 1) == 0) {
              int v28 = v71;
            }
            if ((v66 & 1) == 0) {
              int v29 = v71;
            }
            if ((v65 & 1) == 0) {
              int v30 = v71;
            }
          }
          else
          {
            if (v67 == -1) {
              goto LABEL_19;
            }
            unsigned int v71 = (v74 - (_WORD)v67) & 0x1FF;
          }
          unint64_t v72 = *(void *)(v16 + 48 * v71 + 32) / 0x3E8uLL;
          if ((unsigned __int16)(*((void *)a1 + 2) / 0x3E8uLL) < (unsigned __int16)v72
            && (unsigned __int16)(*((void *)a1 + 2) / 0x3E8uLL - v72) <= 0x7FFEu)
          {
            *int v73 = 1000 * (v72 & 0x7FFFFFFFFF0000 | (unsigned __int16)(*((void *)a1 + 2) / 0x3E8uLL)) + 65536000;
          }
          goto LABEL_19;
        }
        ++v17;
        --v20;
      }
      while (v15 != v17);
    }
    unsigned int v26 = 0;
    unsigned int v27 = 0;
    int v28 = -1;
    int v29 = -1;
    int v30 = -1;
    int v22 = -1;
LABEL_18:
    int v31 = a4;
LABEL_19:
    LODWORD(v32) = 0;
    for (uint64_t i = 4; i != 64; i += 4)
      LODWORD(v32) = *(_DWORD *)((char *)v87 + i) + v32;
    if (v32)
    {
      unsigned int v34 = 0;
      double v11 = (double)v32;
      uint64_t v32 = 1;
      HIDWORD(v12) = 1072483532;
      do
      {
        v34 += *((_DWORD *)v87 + v32);
        if ((double)v34 / v11 > 0.9) {
          break;
        }
        ++v32;
      }
      while (v32 != 16);
    }
    **((_DWORD **)a1 + 3) = v32;
    if (((v22 | v28) & 0x80000000) == 0)
    {
      long long v35 = (double *)*((void *)a1 + 5);
      if (v35)
      {
        unsigned int v36 = *(_DWORD *)(v16 + 48 * (v22 & 0x1FF) + 12);
        if (v36)
        {
          unsigned int v37 = *(_DWORD *)(v16 + 48 * (v28 & 0x1FF) + 12);
          if (v37 && (v22 & 0x1FF) != (v28 & 0x1FF))
          {
            LODWORD(v11) = *(_DWORD *)(v16 + 48 * (v22 & 0x1FF) + 4);
            LODWORD(v12) = *(_DWORD *)(v16 + 48 * (v28 & 0x1FF) + 4);
            double v12 = (double)*(unint64_t *)&v12;
            double v11 = (double)*(unint64_t *)&v11 - v12;
            if (v11 > 0.0)
            {
              double v12 = (double)v36 - (double)v37;
              if (v12 >= 0.0)
              {
                double v11 = 1.0 - v12 / v11;
                HIDWORD(v12) = 0;
                if (v11 < 0.0) {
                  double v11 = 0.0;
                }
                *long long v35 = v11;
              }
            }
          }
        }
      }
    }
    if (((v22 | v29) & 0x80000000) == 0)
    {
      long long v39 = (double *)*((void *)a1 + 6);
      if (v39)
      {
        unsigned int v40 = *(_DWORD *)(v16 + 48 * (v22 & 0x1FF) + 12);
        if (v40)
        {
          unsigned int v41 = *(_DWORD *)(v16 + 48 * (v29 & 0x1FF) + 12);
          if (v41 && (v22 & 0x1FF) != (v29 & 0x1FF))
          {
            LODWORD(v11) = *(_DWORD *)(v16 + 48 * (v22 & 0x1FF) + 4);
            LODWORD(v12) = *(_DWORD *)(v16 + 48 * (v29 & 0x1FF) + 4);
            double v43 = (double)*(unint64_t *)&v11 - (double)*(unint64_t *)&v12;
            if (v43 > 0.0)
            {
              double v44 = (double)v40 - (double)v41;
              if (v44 >= 0.0)
              {
                double v45 = 1.0 - v44 / v43;
                if (v45 < 0.0) {
                  double v45 = 0.0;
                }
                double *v39 = v45;
              }
            }
          }
        }
      }
    }
    long long v46 = (double *)*((void *)a1 + 7);
    if (v31)
    {
      *long long v46 = 0.0;
      if (!v26)
      {
LABEL_74:
        pthread_mutex_unlock(v9);
        return;
      }
      double v47 = (double)v27 / (double)v26;
    }
    else
    {
      if ((v22 | v30) < 0 || !v46) {
        goto LABEL_74;
      }
      char v50 = 0;
      int v51 = 0;
      double v47 = NAN;
      do
      {
        unsigned int v52 = *(_DWORD *)(v16 + 48 * (((_WORD)v22 - (_WORD)v51) & 0x1FF) + 16);
        if (v52)
        {
          int v53 = 0;
          double v54 = (double)v52;
          do
          {
            unsigned int v55 = *(_DWORD *)(v16 + 48 * (((_WORD)v30 + (_WORD)v53) & 0x1FF) + 16);
            if (v55)
            {
              if ((((_WORD)v22 - (_WORD)v51) & 0x1FF) == (((_WORD)v30 + (_WORD)v53) & 0x1FF)) {
                break;
              }
              LODWORD(v13) = *(_DWORD *)(v16 + 48 * (((_WORD)v22 - (_WORD)v51) & 0x1FF) + 8);
              LODWORD(v14) = *(_DWORD *)(v16 + 48 * (((_WORD)v30 + (_WORD)v53) & 0x1FF) + 8);
              double v14 = (double)*(unint64_t *)&v14;
              double v13 = (double)*(unint64_t *)&v13 - v14;
              if (v13 > 0.0)
              {
                double v14 = v54 - (double)v55;
                if (v14 >= 0.0)
                {
                  double v13 = 1.0 - v14 / v13;
                  if (v13 < 0.0) {
                    double v13 = 0.0;
                  }
                  BOOL v56 = v47 > v13;
                  if (v47 > v13) {
                    double v47 = v13;
                  }
                  v50 |= v56;
                }
              }
            }
            ++v53;
          }
          while (v53 != 3);
        }
        ++v51;
      }
      while (v51 != 3);
      if ((v50 & 1) == 0) {
        goto LABEL_74;
      }
    }
    *long long v46 = v47;
    goto LABEL_74;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v48 = VRTraceErrorLogLevelToCSTR();
    long long v49 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaQueueUtil_FindPacketInTxHistory_cold_1(v48, v49);
    }
  }
}

uint64_t VCPayloadUtils_AudioCodecRateModeForBitrate(int a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1 > 106)
  {
    if ((a1 - 107) < 2 || a1 == 111)
    {
      if (a2 > 24399)
      {
        if (a2 > 63999)
        {
          switch(a2)
          {
            case 64000:
              return 19;
            case 96000:
              return 20;
            case 128000:
              return 21;
          }
        }
        else
        {
          switch(a2)
          {
            case 24400:
              return 16;
            case 32000:
              return 17;
            case 48000:
              return 18;
          }
        }
      }
      else if (a2 > 9599)
      {
        switch(a2)
        {
          case 9600:
            return 13;
          case 13200:
            return 14;
          case 16400:
            return 15;
        }
      }
      else
      {
        switch(a2)
        {
          case 5900:
            return 10;
          case 7200:
            return 11;
          case 8000:
            return 12;
        }
      }
      goto LABEL_12;
    }
    goto LABEL_25;
  }
  if (a1 == 97)
  {
    if (a2 > 7399)
    {
      if (a2 > 10199)
      {
        if (a2 == 10200) {
          return 6;
        }
        if (a2 == 12200) {
          return 7;
        }
      }
      else
      {
        if (a2 == 7400) {
          return 4;
        }
        if (a2 == 7950) {
          return 5;
        }
      }
    }
    else if (a2 > 5899)
    {
      if (a2 == 5900) {
        return 2;
      }
      if (a2 == 6700) {
        return 3;
      }
    }
    else
    {
      if (a2 == 4750) {
        return 0;
      }
      if (a2 == 5150) {
        return 1;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315906;
        uint64_t v7 = v4;
        __int16 v8 = 2080;
        __int16 v9 = "_VCPayloadUtils_AudioCodecRateModeForAMRBitrate";
        __int16 v10 = 1024;
        int v11 = 938;
        __int16 v12 = 1024;
        int v13 = a2;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Unsupported bitrate %d", (uint8_t *)&v6, 0x22u);
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (a1 != 98)
  {
LABEL_25:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCPayloadUtils_AudioCodecRateModeForBitrate_cold_1();
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_12:

  return _VCPayloadUtils_AudioCodecRateModeForAMRWBBitrate(a2);
}

uint64_t VCPayloadUtils_CodecTypeForPayload(int a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1 <= 96)
  {
    if (a1)
    {
      if (a1 == 8)
      {
        return 6;
      }
      else if (a1 == 13)
      {
        return 9;
      }
      else
      {
LABEL_30:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v3 = VRTraceErrorLogLevelToCSTR();
          uint64_t v4 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v5 = 136315906;
            uint64_t v6 = v3;
            __int16 v7 = 2080;
            __int16 v8 = "VCPayloadUtils_CodecTypeForPayload";
            __int16 v9 = 1024;
            int v10 = 1275;
            __int16 v11 = 1024;
            int v12 = a1;
            _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Unsupported payload %d", (uint8_t *)&v5, 0x22u);
          }
        }
        return 0;
      }
    }
    else
    {
      return 5;
    }
  }
  else
  {
    switch(a1)
    {
      case 'a':
        uint64_t result = 1;
        break;
      case 'b':
        uint64_t result = 2;
        break;
      case 'c':
        uint64_t result = 13;
        break;
      case 'd':
        uint64_t result = 102;
        break;
      case 'e':
        uint64_t result = 16;
        break;
      case 'h':
        uint64_t result = 8;
        break;
      case 'j':
        uint64_t result = 7;
        break;
      case 'k':
        uint64_t result = 3;
        break;
      case 'l':
        uint64_t result = 4;
        break;
      case 'n':
        uint64_t result = 300;
        break;
      case 'o':
        uint64_t result = 17;
        break;
      case 'p':
        uint64_t result = 18;
        break;
      case 'q':
        uint64_t result = 20;
        break;
      case 'u':
        uint64_t result = 10;
        break;
      case 'w':
        uint64_t result = 11;
        break;
      case 'y':
        uint64_t result = 15;
        break;
      case 'z':
        uint64_t result = 14;
        break;
      case '{':
        uint64_t result = 100;
        break;
      case '|':
        uint64_t result = 301;
        break;
      case '}':
        uint64_t result = 302;
        break;
      case '~':
        uint64_t result = 101;
        break;
      default:
        goto LABEL_30;
    }
  }
  return result;
}

uint64_t VCPayloadUtils_supportsInternalDTXForPayload(int a1)
{
  return ((a1 - 97) < 0xF) & (0x4C03u >> (a1 - 97));
}

uint64_t _VCPayloadUtils_AudioCodecRateModeForAMRWBBitrate(int a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1 <= 15849)
  {
    if (a1 > 12649)
    {
      if (a1 == 12650) {
        return 2;
      }
      if (a1 == 14250) {
        return 3;
      }
    }
    else
    {
      if (a1 == 6600) {
        return 0;
      }
      if (a1 == 8850) {
        return 1;
      }
    }
  }
  else if (a1 <= 19849)
  {
    if (a1 == 15850) {
      return 4;
    }
    if (a1 == 18250) {
      return 5;
    }
  }
  else
  {
    switch(a1)
    {
      case 19850:
        return 6;
      case 23050:
        return 7;
      case 23850:
        return 8;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315906;
      uint64_t v6 = v3;
      __int16 v7 = 2080;
      __int16 v8 = "_VCPayloadUtils_AudioCodecRateModeForAMRWBBitrate";
      __int16 v9 = 1024;
      int v10 = 964;
      __int16 v11 = 1024;
      int v12 = a1;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Unsupported bitrate %d", (uint8_t *)&v5, 0x22u);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t VCPayloadUtils_DefaultAudioCodecBandwidthCodecForSampleRate(int a1)
{
  if (a1 == 16000) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 8000) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t VCPayloadUtils_BitrateForAudioCodecRateMode(uint64_t a1, uint64_t a2)
{
  int64_t v3 = +[VCPayloadUtils codecTypeForPayload:a1];

  return +[VCPayloadUtils bitrateForCodecType:v3 mode:a2];
}

float VCPayloadUtils_BlockSizeForPayload(uint64_t a1, uint64_t a2)
{
  +[VCPayloadUtils blockSizeForPayload:a1 sampleRate:a2];
  return v2;
}

uint64_t VCPayloadUtils_CodecSamplesPerFrameWithSampleRate(uint64_t a1, uint64_t a2)
{
  return +[VCPayloadUtils codecSamplesPerFrameForPayload:blockSize:sampleRate:](VCPayloadUtils, "codecSamplesPerFrameForPayload:blockSize:sampleRate:", a1, a2);
}

uint64_t VCPayloadUtils_AudioCodecBandwidthForBandwidth(uint64_t a1)
{
  return +[VCPayloadUtils vcAudioCodecBandwidthForAudioCodecBandwidth:a1];
}

uint64_t VCPayloadUtils_AudioCodecBandwidthForVCAudioCodecBandwidth(uint64_t a1)
{
  return +[VCPayloadUtils audioCodecBandwidthForVCAudioCodecBandwidth:a1];
}

const char *VCPayloadUtils_AmrNbBitRateStringForBitRate(int a1)
{
  if (a1 > 7399)
  {
    if (a1 > 10199)
    {
      if (a1 == 10200) {
        return "AMR-NB 10.2";
      }
      if (a1 == 12200) {
        return "AMR-NB 12.2";
      }
    }
    else
    {
      if (a1 == 7400) {
        return "AMR-NB 7.4";
      }
      if (a1 == 7950) {
        return "AMR-NB 7.95";
      }
    }
  }
  else if (a1 > 5899)
  {
    if (a1 == 5900) {
      return "AMR-NB 5.9";
    }
    if (a1 == 6700) {
      return "AMR-NB 6.7";
    }
  }
  else
  {
    if (a1 == 4750) {
      return "AMR-NB 4.75";
    }
    if (a1 == 5150) {
      return "AMR-NB 5.15";
    }
  }
  return "";
}

const char *VCPayloadUtils_AmrWbBitRateStringForBitRate(int a1)
{
  if (a1 <= 15849)
  {
    if (a1 > 12649)
    {
      if (a1 == 12650) {
        return "AMR-WB 12.65";
      }
      if (a1 == 14250) {
        return "AMR-WB 14.25";
      }
    }
    else
    {
      if (a1 == 6600) {
        return "AMR-WB 6.6";
      }
      if (a1 == 8850) {
        return "AMR-WB 8.85";
      }
    }
  }
  else if (a1 <= 19849)
  {
    if (a1 == 15850) {
      return "AMR-WB 15.85";
    }
    if (a1 == 18250) {
      return "AMR-WB 18.25";
    }
  }
  else
  {
    switch(a1)
    {
      case 19850:
        return "AMR-WB 19.85";
      case 23050:
        return "AMR-WB 23.05";
      case 23850:
        return "AMR-WB 23.85";
    }
  }
  return "";
}

const char *VCPayloadUtils_EvsBitRateStringForBitRate(int a1)
{
  if (a1 <= 16399)
  {
    if (a1 > 9599)
    {
      if (a1 <= 13199)
      {
        if (a1 == 9600) {
          return "EVS PRI 9.6";
        }
        if (a1 == 12650) {
          return "EVS IO 12.65";
        }
      }
      else
      {
        switch(a1)
        {
          case 13200:
            return "EVS PRI 13.2";
          case 14250:
            return "EVS IO 14.25";
          case 15850:
            return "EVS IO 15.85";
        }
      }
    }
    else if (a1 <= 7199)
    {
      if (a1 == 5900) {
        return "EVS PRI 5.9";
      }
      if (a1 == 6600) {
        return "EVS IO 6.6";
      }
    }
    else
    {
      switch(a1)
      {
        case 7200:
          return "EVS PRI 7.2";
        case 8000:
          return "EVS PRI 8";
        case 8850:
          return "EVS IO 8.85";
      }
    }
  }
  else if (a1 <= 24399)
  {
    if (a1 <= 19849)
    {
      if (a1 == 16400) {
        return "EVS PRI 16.4";
      }
      if (a1 == 18250) {
        return "EVS IO 18.25";
      }
    }
    else
    {
      switch(a1)
      {
        case 19850:
          return "EVS IO 19.85";
        case 23050:
          return "EVS IO 23.05";
        case 23850:
          return "EVS IO 23.85";
      }
    }
  }
  else if (a1 > 63999)
  {
    switch(a1)
    {
      case 64000:
        return "EVS PRI 64";
      case 96000:
        return "EVS PRI 96";
      case 128000:
        return "EVS PRI 128";
    }
  }
  else
  {
    switch(a1)
    {
      case 24400:
        return "EVS PRI 24.4";
      case 32000:
        return "EVS PRI 32";
      case 48000:
        return "EVS PRI 48";
    }
  }
  return "";
}

uint64_t VCPayloadUtils_SupportsShortREDForPayload()
{
  return 0;
}

uint64_t VCPayloadUtils_ShortREDBitrateForPayload(int a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a1 == 113) {
    return 4800;
  }
  if (a1 == 112) {
    return 2000;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCPayloadUtils_ShortREDBitrateForPayload_cold_1();
  }
  return 0;
}

uint64_t RTCPCopySendControlParameters(long long *a1, uint64_t a2, OSQueueHead *a3, char **a4)
{
  void v43[3] = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2 || !a3 || !a4)
  {
    uint64_t v41 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTCPCopySendControlParameters_cold_2();
      }
    }
    goto LABEL_50;
  }
  long long v8 = *a1;
  long long v9 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)a2 = v8;
  long long v10 = a1[3];
  long long v11 = a1[4];
  long long v12 = a1[6];
  *(_OWORD *)(a2 + 80) = a1[5];
  *(_OWORD *)(a2 + 96) = v12;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = v10;
  *(_OWORD *)(a2 + 64) = v11;
  long long v13 = a1[7];
  long long v14 = a1[8];
  long long v15 = a1[9];
  *(void *)(a2 + 160) = *((void *)a1 + 20);
  *(_OWORD *)(a2 + 12_Block_object_dispose(&STACK[0x250], 8) = v14;
  *(_OWORD *)(a2 + 144) = v15;
  *(_OWORD *)(a2 + 112) = v13;
  uint64_t v16 = (void *)(a2 + 8);
  if (!*(void *)(a2 + 8)
    && !*((void *)a1 + 4)
    && !*((void *)a1 + 7)
    && !*((void *)a1 + 9)
    && !*((void *)a1 + 19))
  {
    int v18 = 0;
    goto LABEL_40;
  }
  int v17 = (char *)VCMemoryPool_Alloc(a3);
  if (!v17)
  {
    uint64_t v41 = 2147549187;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTCPCopySendControlParameters_cold_1();
      }
    }
LABEL_50:
    int v18 = 0;
    goto LABEL_41;
  }
  int v18 = v17;
  unint64_t opaque1 = (unint64_t)a3[1].opaque1;
  __int16 v20 = &v17[opaque1];
  memset(v43, 170, 24);
  if (v17 > &v17[opaque1]) {
    goto LABEL_52;
  }
  v43[0] = (unint64_t)v17;
  v43[1] = opaque1;
  v43[2] = 0;
  size_t v21 = *((void *)a1 + 2);
  if (v21)
  {
    int v22 = (const void *)*((void *)a1 + 1);
    if (v22)
    {
      int v23 = RTCPPackSendControlParameter(v43, v22, v21);
      if (!v23) {
        goto LABEL_42;
      }
      if (v24 < (unint64_t)v23) {
        goto LABEL_52;
      }
      unint64_t v25 = *((void *)a1 + 2);
      if (v25 > v24 - (unint64_t)v23) {
        goto LABEL_52;
      }
      *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v23;
      *(void *)(a2 + 16) = v25;
    }
  }
  unsigned int v26 = (const void *)*((void *)a1 + 4);
  if (v26)
  {
    uint64_t v27 = *((unsigned int *)a1 + 10);
    if ((int)v27 >= 1)
    {
      int v28 = RTCPPackSendControlParameter(v43, v26, 2 * v27);
      if (!v28) {
        goto LABEL_42;
      }
      if ((unint64_t)v28 > v29) {
        goto LABEL_52;
      }
      int v30 = *((_DWORD *)a1 + 10);
      if (v30 < 0 || (uint64_t)(v29 - (void)v28) >> 1 < v30) {
        goto LABEL_52;
      }
      *(void *)(a2 + 32) = v28;
      *(_DWORD *)(a2 + 40) = v30;
    }
  }
  int v31 = (const void *)*((void *)a1 + 7);
  if (v31 && *((unsigned char *)a1 + 64))
  {
    uint64_t v32 = RTCPPackSendControlParameter(v43, v31, 36 * *((unsigned __int8 *)a1 + 64));
    if (!v32) {
      goto LABEL_42;
    }
    if ((unint64_t)v32 > v33) {
      goto LABEL_52;
    }
    int64_t v34 = *((unsigned __int8 *)a1 + 64);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v33 - (void)v32) >> 2)) < v34) {
      goto LABEL_52;
    }
    *(void *)(a2 + 56) = v32;
    *(unsigned char *)(a2 + 64) = v34;
  }
  long long v35 = (const void *)*((void *)a1 + 9);
  if (!v35) {
    goto LABEL_35;
  }
  unsigned int v36 = RTCPPackSendControlParameter(v43, v35, 0x14uLL);
  if (!v36)
  {
LABEL_42:
    if (v18 < v20)
    {
      uint64_t v41 = 2147549187;
      VCMemoryPool_Free(a3, v18);
      int v18 = 0;
      *(void *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 152) = 0;
      void *v16 = 0;
      *(void *)(a2 + 16) = 0;
      goto LABEL_41;
    }
LABEL_52:
    __break(0x5519u);
  }
  if ((unint64_t)v36 >= v37) {
    goto LABEL_52;
  }
  *(void *)(a2 + 72) = v36;
LABEL_35:
  long long v38 = (const void *)*((void *)a1 + 19);
  if (!v38) {
    goto LABEL_39;
  }
  long long v39 = RTCPPackSendControlParameter(v43, v38, 8uLL);
  if (!v39) {
    goto LABEL_42;
  }
  if ((unint64_t)v39 >= v40) {
    goto LABEL_52;
  }
  *(void *)(a2 + 152) = v39;
LABEL_39:
  if (v18 >= v20) {
    goto LABEL_52;
  }
LABEL_40:
  uint64_t v41 = 0;
LABEL_41:
  *a4 = v18;
  return v41;
}

unint64_t *RTCPPackSendControlParameter(unint64_t *result, const void *a2, size_t __n)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!result)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTCPPackSendControlParameter_cold_1();
      }
    }
    return 0;
  }
  uint64_t v4 = (uint64_t *)result;
  unint64_t v5 = result[1];
  unint64_t v6 = result[2];
  if (v5 - v6 < __n)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      long long v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *v4;
        uint64_t v9 = v4[1];
        uint64_t v11 = v4[2];
        int v16 = 136316930;
        uint64_t v17 = v7;
        __int16 v18 = 2080;
        __int16 v19 = "RTCPPackSendControlParameter";
        __int16 v20 = 1024;
        int v21 = 100;
        __int16 v22 = 2048;
        uint64_t v23 = v10;
        __int16 v24 = 2048;
        uint64_t v25 = v9;
        __int16 v26 = 2048;
        uint64_t v27 = v11;
        __int16 v28 = 2048;
        uint64_t v29 = v9 - v11;
        __int16 v30 = 2048;
        size_t v31 = __n;
        _os_log_error_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_ERROR, " [%s] %s:%d Insufficient space in buffer {base=%p count=%zu offset=%zu size=%zu}, requesting %zu bytes ", (uint8_t *)&v16, 0x4Eu);
      }
    }
    return 0;
  }
  unint64_t v13 = *result + v5;
  unint64_t v12 = *result + v6;
  if (v13 < v12 || *result > v12 || v13 - v12 < __n)
  {
    __break(0x5519u);
    return result;
  }
  memcpy((void *)(*result + v6), a2, __n);
  v4[2] += __n;
  return (unint64_t *)v12;
}

CFTypeRef RTCPShallowCopyPacketList(void *__src, void *__dst)
{
  memcpy(__dst, __src, 0x668uLL);
  int64_t v3 = (const void *)*((void *)__dst + 12);

  return CFRetain(v3);
}

uint64_t RTCPReducedSizePackets(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(unsigned char *)(v3 + 10460) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTCPSetHopByHopEncryptionEnabled(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(unsigned char *)(v3 + 10462) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPGetRTCPHasPendingPLI(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 2147549185;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *a2 = *(_DWORD *)(v4 + 104);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147549186;
    }
  }
  return v2;
}

uint64_t RTPGetRecvStats(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = 2147549185;
  if (a2 && a3)
  {
    uint64_t v6 = CheckInHandleDebug();
    if (v6)
    {
      *a2 = *(_DWORD *)(v6 + 320);
      *a3 = *(_DWORD *)(v6 + 324);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147549186;
    }
  }
  return v3;
}

uint64_t RTCPSetSendPLI()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 2147549239;
  uint64_t v1 = CheckInHandleDebug();
  if (!v1) {
    return 2147549186;
  }
  uint64_t v2 = v1;
  int v3 = *(_DWORD *)(v1 + 104);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v3)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136315650;
        uint64_t v11 = v5;
        __int16 v12 = 2080;
        unint64_t v13 = "RTCPSetSendPLI";
        __int16 v14 = 1024;
        int v15 = 256;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d PSFB PLI is already scheduled to be sent in the next RTCP interval", (uint8_t *)&v10, 0x1Cu);
      }
    }
  }
  else
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      long long v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136315650;
        uint64_t v11 = v7;
        __int16 v12 = 2080;
        unint64_t v13 = "RTCPSetSendPLI";
        __int16 v14 = 1024;
        int v15 = 253;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d PSFB PLI will be sent in the next RTCP interval", (uint8_t *)&v10, 0x1Cu);
      }
    }
    uint64_t v0 = 0;
    *(_DWORD *)(v2 + 104) = 1;
  }
  CheckOutHandleDebug();
  return v0;
}

uint64_t RTCPSetSendTMMBR(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147549239;
  uint64_t v4 = CheckInHandleDebug();
  if (!v4) {
    return 2147549186;
  }
  if (*(_DWORD *)(v4 + 128) && *(_DWORD *)(v4 + 132) == a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136315650;
        uint64_t v11 = v5;
        __int16 v12 = 2080;
        unint64_t v13 = "RTCPSetSendTMMBR";
        __int16 v14 = 1024;
        int v15 = 315;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPFB TMMBR is already scheduled to be sent in the next RTCP interval", (uint8_t *)&v10, 0x1Cu);
      }
    }
    goto LABEL_11;
  }
  *(_DWORD *)(v4 + 12_Block_object_dispose(&STACK[0x250], 8) = 1;
  *(_DWORD *)(v4 + 132) = a2;
  if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
    goto LABEL_10;
  }
  uint64_t v7 = VRTraceErrorLogLevelToCSTR();
  long long v8 = *MEMORY[0x1E4F47A50];
  uint64_t v3 = 0;
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315906;
    uint64_t v11 = v7;
    __int16 v12 = 2080;
    unint64_t v13 = "RTCPSetSendTMMBR";
    __int16 v14 = 1024;
    int v15 = 313;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPFB TMMBR bitrate:%d, will be sent in the next RTCP interval", (uint8_t *)&v10, 0x22u);
LABEL_10:
    uint64_t v3 = 0;
  }
LABEL_11:
  CheckOutHandleDebug();
  return v3;
}

uint64_t RTPCheckRTCPSendIntervalElapsed(uint64_t a1, _DWORD *a2, double *a3)
{
  uint64_t v3 = 2147549185;
  if (a2)
  {
    uint64_t v6 = CheckInHandleDebug();
    if (v6)
    {
      uint64_t v7 = v6;
      double v8 = micro();
      double v9 = *(double *)(v7 + 160);
      double v10 = v8 + 0.001 - v9;
      double v11 = *(double *)(v7 + 176);
      *a2 = v10 > v11;
      double v12 = v11 - (v8 - v9);
      if (v10 > v11) {
        double v12 = 0.0;
      }
      *a3 = v12;
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147549186;
    }
  }
  return v3;
}

uint64_t RTPSendControlPacket(uint64_t a1, int *a2)
{
  uint64_t v4 = CheckInHandleDebug();
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(_DWORD *)(v4 + 184))
    {
      double v6 = micro();
      double v7 = v6;
      int v8 = *a2;
      if ((*a2 & 0x50) != 0)
      {
        if ((v8 & 0x10) != 0)
        {
          int v9 = a2[12];
          *(_DWORD *)(v5 + 136) = 1;
          *(_DWORD *)(v5 + 140) = v9;
        }
        if ((v8 & 0x40) != 0)
        {
          *(_DWORD *)(v5 + 96) = 1;
          *(unsigned char *)(v5 + 100) = *((unsigned char *)a2 + 24);
        }
        uint64_t v10 = RTPSendRTCP(a1);
        if ((v10 & 0x80000000) != 0) {
          goto LABEL_15;
        }
        double v11 = (double *)(v5 + 160);
        goto LABEL_13;
      }
      double v12 = *(double *)(v5 + 160);
      double v11 = (double *)(v5 + 160);
      if (v6 + 0.001 - v12 > v11[2])
      {
        uint64_t v10 = RTPSendRTCP(a1);
        if ((v10 & 0x80000000) != 0)
        {
LABEL_15:
          CheckOutHandleDebug();
          return v10;
        }
LABEL_13:
        *double v11 = v7;
        goto LABEL_15;
      }
    }
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  return 2147549186;
}

uint64_t RTPSendRTCP(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  unint64_t v192 = 0xAAAAAAAAAAAAAAAALL;
  int v190 = 0;
  memset(v189, 0, sizeof(v189));
  memset(__b, 170, sizeof(__b));
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  unint64_t v4 = v3;
  if (v3 == 0xFFFFFFFFLL) {
    return 2147549190;
  }
  memset(v203, 170, sizeof(v203));
  memset(__src, 170, sizeof(__src));
  if ((*(_WORD *)v2 & 0xE27) != 0)
  {
    BOOL v186 = 0;
LABEL_7:
    char v6 = 1;
    goto LABEL_11;
  }
  BOOL v186 = *(_DWORD *)(v4 + 204) != 0;
  if (!*(_DWORD *)(v4 + 4832) && !*(unsigned char *)(v2 + 64)) {
    goto LABEL_7;
  }
  char v6 = 0;
LABEL_11:
  bzero(v201, 0x402uLL);
  int v7 = strnlen((const char *)(v4 + 360), 0x100uLL);
  int v8 = v7;
  if (v7 >= 256)
  {
    CheckOutHandleDebug();
    return 2147549192;
  }
  uint64_t v184 = 2863311530;
  signed int v193 = -1431655766;
  unsigned int v9 = v7 + 6;
  if (v7 < -6) {
    unsigned int v9 = v7 + 9;
  }
  v197[0] = -13695;
  unsigned int v179 = (v9 >> 2) + 1;
  v197[1] = bswap32(v179) >> 16;
  unsigned int v198 = bswap32(*(_DWORD *)(v4 + 200));
  char v199 = 1;
  char v200 = v7;
  __strncpy_chk();
  uint64_t v10 = (uint64_t *)&v201[v8];
  if (v10 >= &v202 || v10 < (uint64_t *)v201) {
    goto LABEL_381;
  }
  *(unsigned char *)uint64_t v10 = 0;
  int v182 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 1) == 0)
  {
    if ((*(_DWORD *)v2 & 8) == 0)
    {
      LOWORD(v185) = 0;
      goto LABEL_70;
    }
    if (*(_DWORD *)(v4 + 148))
    {
      LOWORD(__src[0]) = __src[0] & 0x1F | 0xCE80;
      int v12 = *(_DWORD *)(v2 + 40);
      if (v12)
      {
        if (v12 < 2)
        {
          __int16 v16 = 0;
        }
        else
        {
          unint64_t v13 = *(unsigned __int16 **)(v2 + 32);
          int v14 = *v13;
          LODWORD(v13) = v13[1];
          LOWORD(__src[0]) = -12670;
          unsigned int v15 = bswap32(*(_DWORD *)(v4 + 4832));
          __src[1] = bswap32(*(_DWORD *)(v4 + 200));
          __src[2] = v15;
          __src[3] = bswap32(((v13 * v14) >> 2) & 0x7FC0 | 0x80000);
          __int16 v16 = 3;
        }
      }
      else
      {
        LOWORD(__src[0]) = -12671;
        unsigned int v48 = bswap32(*(_DWORD *)(v4 + 4832));
        __src[1] = bswap32(*(_DWORD *)(v4 + 200));
        __src[2] = v48;
        __int16 v16 = 2;
      }
      LOWORD(v185) = v16;
      HIWORD(__src[0]) = v16 << 8;
      goto LABEL_70;
    }
    LODWORD(v17) = *(_DWORD *)(v2 + 40);
    LOWORD(__src[0]) = -16256;
    unsigned int v185 = ((v17 + 1) >> 1) + 1;
    HIWORD(__src[0]) = bswap32(v185) >> 16;
    __src[1] = bswap32(*(_DWORD *)(v4 + 200));
    if ((int)v17 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      __int16 v20 = (os_log_t *)MEMORY[0x1E4F47A50];
      while (1)
      {
        if (v18 == 20) {
          goto LABEL_381;
        }
        *(_WORD *)((char *)&__src[2] + v1_Block_object_dispose(&STACK[0x250], 8) = bswap32(*(unsigned __int16 *)(*(void *)(v2 + 32) + v18)) >> 16;
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        int v22 = *(_DWORD *)(v4 + 10456);
        if (v22 > ErrorLogLevelForModule || v22 < 1) {
          goto LABEL_33;
        }
        uint64_t v24 = VRTraceErrorLogLevelToCSTR();
        int v25 = *(_DWORD *)(v4 + 10456);
        if (v25 > 2)
        {
          if (v25 > 4)
          {
            if (v25 > 7)
            {
              if (v25 == 8)
              {
                unint64_t v37 = *v20;
                unint64_t v40 = *v20;
                if (!*MEMORY[0x1E4F47A40])
                {
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                  {
                    unint64_t v44 = *(void *)(v2 + 32);
                    double v45 = (unsigned __int16 *)(v44 + v18);
                    if (v44 + v18 >= v44 + 2 * *(int *)(v2 + 40) || (unint64_t)v45 < v44) {
                      goto LABEL_381;
                    }
                    int v46 = *(unsigned __int16 *)((char *)&__src[2] + v18);
                    int v47 = *v45;
                    *(_DWORD *)CMTime buf = 136316418;
                    *(void *)&uint8_t buf[4] = v24;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "RTPSendRTCP";
                    *(_WORD *)&unsigned char buf[22] = 1024;
                    int v205 = 1862;
                    __int16 v206 = 1024;
                    int v207 = v19;
                    __int16 v208 = 1024;
                    int v209 = v46;
                    __int16 v210 = 1024;
                    int v211 = v47;
                    _os_log_debug_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEBUG, " [%s] %s:%d i=%d awSizeAndFirstMBs=%d paramSizeAndFirstMBs=%d", buf, 0x2Eu);
                  }
                  goto LABEL_33;
                }
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                {
                  unint64_t v41 = *(void *)(v2 + 32);
                  long long v39 = (unsigned __int16 *)(v41 + v18);
                  if (v41 + v18 >= v41 + 2 * *(int *)(v2 + 40) || (unint64_t)v39 < v41) {
                    goto LABEL_381;
                  }
                  goto LABEL_60;
                }
              }
            }
            else
            {
              unint64_t v37 = *v20;
              if (os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v38 = *(void *)(v2 + 32);
                long long v39 = (unsigned __int16 *)(v38 + v18);
                if (v38 + v18 >= v38 + 2 * *(int *)(v2 + 40) || (unint64_t)v39 < v38) {
                  goto LABEL_381;
                }
LABEL_60:
                int v42 = *(unsigned __int16 *)((char *)&__src[2] + v18);
                int v43 = *v39;
                *(_DWORD *)CMTime buf = 136316418;
                *(void *)&uint8_t buf[4] = v24;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "RTPSendRTCP";
                *(_WORD *)&unsigned char buf[22] = 1024;
                int v205 = 1862;
                __int16 v206 = 1024;
                int v207 = v19;
                __int16 v208 = 1024;
                int v209 = v42;
                __int16 v210 = 1024;
                int v211 = v43;
                _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d i=%d awSizeAndFirstMBs=%d paramSizeAndFirstMBs=%d", buf, 0x2Eu);
              }
            }
          }
          else
          {
            uint64_t v27 = *v20;
            if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
            {
              unint64_t v30 = *(void *)(v2 + 32);
              uint64_t v29 = (unsigned __int16 *)(v30 + v18);
              if (v30 + v18 >= v30 + 2 * *(int *)(v2 + 40) || (unint64_t)v29 < v30) {
                goto LABEL_381;
              }
              goto LABEL_45;
            }
          }
        }
        else
        {
          char IsOSFaultDisabled = VRTraceIsOSFaultDisabled();
          uint64_t v27 = *v20;
          if ((IsOSFaultDisabled & 1) == 0)
          {
            if (os_log_type_enabled(*v20, OS_LOG_TYPE_FAULT))
            {
              unint64_t v33 = *(void *)(v2 + 32);
              int64_t v34 = (unsigned __int16 *)(v33 + v18);
              if (v33 + v18 >= v33 + 2 * *(int *)(v2 + 40) || (unint64_t)v34 < v33) {
                goto LABEL_381;
              }
              int v35 = *(unsigned __int16 *)((char *)&__src[2] + v18);
              int v36 = *v34;
              *(_DWORD *)CMTime buf = 136316418;
              *(void *)&uint8_t buf[4] = v24;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "RTPSendRTCP";
              *(_WORD *)&unsigned char buf[22] = 1024;
              int v205 = 1862;
              __int16 v206 = 1024;
              int v207 = v19;
              __int16 v208 = 1024;
              int v209 = v35;
              __int16 v210 = 1024;
              int v211 = v36;
              _os_log_fault_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_FAULT, " [%s] %s:%d i=%d awSizeAndFirstMBs=%d paramSizeAndFirstMBs=%d", buf, 0x2Eu);
            }
            goto LABEL_33;
          }
          if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
          {
            unint64_t v28 = *(void *)(v2 + 32);
            uint64_t v29 = (unsigned __int16 *)(v28 + v18);
            if (v28 + v18 >= v28 + 2 * *(int *)(v2 + 40) || (unint64_t)v29 < v28) {
              goto LABEL_381;
            }
LABEL_45:
            int v31 = *(unsigned __int16 *)((char *)&__src[2] + v18);
            int v32 = *v29;
            *(_DWORD *)CMTime buf = 136316418;
            *(void *)&uint8_t buf[4] = v24;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "RTPSendRTCP";
            *(_WORD *)&unsigned char buf[22] = 1024;
            int v205 = 1862;
            __int16 v206 = 1024;
            int v207 = v19;
            __int16 v208 = 1024;
            int v209 = v31;
            __int16 v210 = 1024;
            int v211 = v32;
            _os_log_error_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_ERROR, " [%s] %s:%d i=%d awSizeAndFirstMBs=%d paramSizeAndFirstMBs=%d", buf, 0x2Eu);
          }
        }
LABEL_33:
        ++v19;
        uint64_t v17 = *(int *)(v2 + 40);
        v18 += 2;
        if (v19 >= v17) {
          goto LABEL_69;
        }
      }
    }
    LODWORD(v19) = 0;
LABEL_69:
    if (v17)
    {
      long long v148 = (_WORD *)&__src[2] + v19;
      if (v148 >= (_WORD *)&__src[7]) {
        goto LABEL_381;
      }
      *long long v148 = -1;
      int v149 = VRTraceGetErrorLogLevelForModule();
      int v150 = *(_DWORD *)(v4 + 10456);
      if (v150 <= v149 && v150 >= 1)
      {
        uint64_t v151 = VRTraceErrorLogLevelToCSTR();
        int v152 = *(_DWORD *)(v4 + 10456);
        if (v152 > 2)
        {
          if (v152 <= 4)
          {
            int v154 = *MEMORY[0x1E4F47A50];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              goto LABEL_70;
            }
            goto LABEL_310;
          }
          if (v152 > 7)
          {
            if (v152 != 8) {
              goto LABEL_70;
            }
            __int16 v161 = *MEMORY[0x1E4F47A50];
            long long v164 = *MEMORY[0x1E4F47A50];
            if (!*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v164, OS_LOG_TYPE_DEBUG))
              {
                int v167 = (unsigned __int16)*v148;
                int v168 = *(_DWORD *)(v2 + 40);
                *(_DWORD *)CMTime buf = 136316418;
                *(void *)&uint8_t buf[4] = v151;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "RTPSendRTCP";
                *(_WORD *)&unsigned char buf[22] = 1024;
                int v205 = 1866;
                __int16 v206 = 1024;
                int v207 = v19;
                __int16 v208 = 1024;
                int v209 = v167;
                __int16 v210 = 1024;
                int v211 = v168;
                _os_log_debug_impl(&dword_1E1EA4000, v161, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Invalid Slice! i=%d awSizeAndFirstMBs=%d paramSizeAndFirstMBs=%d", buf, 0x2Eu);
              }
              goto LABEL_70;
            }
            if (!os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_70;
            }
          }
          else
          {
            __int16 v161 = *MEMORY[0x1E4F47A50];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_70;
            }
          }
          int v165 = (unsigned __int16)*v148;
          int v166 = *(_DWORD *)(v2 + 40);
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v151;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "RTPSendRTCP";
          *(_WORD *)&unsigned char buf[22] = 1024;
          int v205 = 1866;
          __int16 v206 = 1024;
          int v207 = v19;
          __int16 v208 = 1024;
          int v209 = v165;
          __int16 v210 = 1024;
          int v211 = v166;
          _os_log_impl(&dword_1E1EA4000, v161, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Invalid Slice! i=%d awSizeAndFirstMBs=%d paramSizeAndFirstMBs=%d", buf, 0x2Eu);
          goto LABEL_70;
        }
        char v153 = VRTraceIsOSFaultDisabled();
        int v154 = *MEMORY[0x1E4F47A50];
        if (v153)
        {
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_70;
          }
LABEL_310:
          int v157 = (unsigned __int16)*v148;
          int v158 = *(_DWORD *)(v2 + 40);
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v151;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "RTPSendRTCP";
          *(_WORD *)&unsigned char buf[22] = 1024;
          int v205 = 1866;
          __int16 v206 = 1024;
          int v207 = v19;
          __int16 v208 = 1024;
          int v209 = v157;
          __int16 v210 = 1024;
          int v211 = v158;
          _os_log_error_impl(&dword_1E1EA4000, v154, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid Slice! i=%d awSizeAndFirstMBs=%d paramSizeAndFirstMBs=%d", buf, 0x2Eu);
          goto LABEL_70;
        }
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
        {
          int v159 = (unsigned __int16)*v148;
          int v160 = *(_DWORD *)(v2 + 40);
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v151;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "RTPSendRTCP";
          *(_WORD *)&unsigned char buf[22] = 1024;
          int v205 = 1866;
          __int16 v206 = 1024;
          int v207 = v19;
          __int16 v208 = 1024;
          int v209 = v159;
          __int16 v210 = 1024;
          int v211 = v160;
          _os_log_fault_impl(&dword_1E1EA4000, v154, OS_LOG_TYPE_FAULT, " [%s] %s:%d Invalid Slice! i=%d awSizeAndFirstMBs=%d paramSizeAndFirstMBs=%d", buf, 0x2Eu);
        }
      }
    }
LABEL_70:
    int v49 = *(_DWORD *)v2;
    if ((*(_DWORD *)v2 & 4) != 0)
    {
      unsigned int v50 = bswap32(*(_DWORD *)(v4 + 200));
      __b[0] = 33603968;
      __b[1] = v50;
      LOWORD(__b[2]) = bswap32(*(unsigned __int16 *)(v2 + 46)) >> 16;
      HIWORD(__b[2]) = bswap32(*(unsigned __int16 *)(v2 + 44)) >> 16;
      int v183 = 2;
      if ((v49 & 0x800) == 0)
      {
LABEL_75:
        uint64_t v181 = 2863267840;
        uint64_t v11 = 43690;
        goto LABEL_76;
      }
    }
    else
    {
      int v183 = 0;
      if ((v49 & 0x800) == 0) {
        goto LABEL_75;
      }
    }
    unsigned int v51 = bswap32(*(_DWORD *)(v4 + 200));
    __b[0] = 50384257;
    __b[1] = v51;
    __b[2] = bswap32(*(_DWORD *)(v4 + 4832));
    LOWORD(__b[3]) = bswap32(*(unsigned __int16 *)(v2 + 46)) >> 16;
    HIWORD(__b[3]) = bswap32(*(unsigned __int16 *)(v2 + 44)) >> 16;
    int v183 = 3;
    goto LABEL_75;
  }
  int v183 = 0;
  LOWORD(v185) = 0;
  uint64_t v184 = bswap32(*(_DWORD *)(v4 + 200));
  uint64_t v181 = 0x1000000;
  uint64_t v11 = 52097;
LABEL_76:
  uint64_t v180 = v11;
  unint64_t v187 = v4 + 27616;
  if (v6)
  {
    unsigned int v52 = 0;
    int v53 = 0;
    double v54 = 0;
  }
  else
  {
    unsigned int v52 = *(unsigned __int8 *)(v2 + 64);
    if (*(unsigned char *)(v2 + 64) || *(unsigned char *)(v4 + 10461))
    {
      double v54 = *(char **)(v2 + 56);
      int v53 = &v54[36 * *(unsigned __int8 *)(v2 + 64)];
    }
    else
    {
      if (v4 >= v187) {
        goto LABEL_381;
      }
      double v54 = (char *)v189;
      int v53 = (char *)&v191;
      _RTCPInitializeReceptionReportBlock(v4, (uint64_t)v189);
      if (*(_DWORD *)(v4 + 28) <= 1u)
      {
        kdebug_trace();
        double v54 = (char *)v189;
      }
      unsigned int v52 = 1;
    }
  }
  int v55 = *(_DWORD *)v2;
  BOOL v57 = (*(_DWORD *)v2 & 0xEFE) != 0 && *(unsigned char *)(v4 + 10460) != 0;
  signed int v193 = 0;
  if ((v55 & 0x20) != 0)
  {
    unint64_t v194 = 1472;
    uint64_t v60 = *(void *)(v2 + 72);
    buf[5] = 0;
    *(_WORD *)&buf[6] = 0;
    strcpy((char *)buf, "LTCR");
    *(void *)&uint8_t buf[8] = v60;
    *(void *)&buf[16] = 0;
    if (v4 >= v187) {
      goto LABEL_381;
    }
    unint64_t v61 = _RTCPAddCustomReportPacket(v4, (unint64_t)v203, 0x5C0uLL, &v194, (uint64_t)buf);
    if ((v61 & 0x80000000) != 0)
    {
      unint64_t v5 = v61;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPSendRTCP_cold_22();
        }
      }
      goto LABEL_306;
    }
LABEL_101:
    int v62 = v194;
    signed int v193 = v194;
    goto LABEL_102;
  }
  if (*(unsigned char *)(v4 + 10461))
  {
    unint64_t v194 = 1472;
    memset(buf, 0, sizeof(buf));
    if (v186) {
      int v58 = 1297568594;
    }
    else {
      int v58 = 1297568338;
    }
    *(_DWORD *)CMTime buf = v58;
    if (v54 > v53) {
      goto LABEL_381;
    }
    if ((uint64_t)(0x8E38E38E38E38E39 * ((v53 - v54) >> 2)) < v52) {
      goto LABEL_381;
    }
    *(void *)&uint8_t buf[8] = v54;
    *(_DWORD *)&buf[16] = v52;
    if (v4 >= v187) {
      goto LABEL_381;
    }
    unint64_t v59 = _RTCPAddCustomReportPacket(v4, (unint64_t)v203, 0x5C0uLL, &v194, (uint64_t)buf);
    if ((v59 & 0x80000000) != 0)
    {
      unint64_t v5 = v59;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPSendRTCP_cold_21();
        }
      }
      goto LABEL_306;
    }
    goto LABEL_101;
  }
  if (v57)
  {
    int v62 = 0;
    goto LABEL_102;
  }
  signed int v118 = 0;
  int v119 = 0;
  if (v54) {
    int v120 = v53;
  }
  else {
    int v120 = 0;
  }
  do
  {
    if (v52 - v119 >= 0x1F) {
      uint64_t v121 = 31;
    }
    else {
      uint64_t v121 = v52 - v119;
    }
    unint64_t v122 = 1472 - v118;
    unint64_t v192 = v122;
    BOOL v123 = v186;
    if (v119) {
      BOOL v123 = 0;
    }
    if (v54) {
      int v124 = &v54[36 * v119];
    }
    else {
      int v124 = 0;
    }
    if (v124 > v120 || v54 > v124) {
      goto LABEL_381;
    }
    int v126 = &v203[v118];
    BOOL v127 = 0x8E38E38E38E38E39 * ((v120 - v124) >> 2) < v121 || v126 > (char *)buf;
    if (v127 || v203 > v126 || v4 >= v187) {
      goto LABEL_381;
    }
    if (v122 < 4) {
      goto LABEL_279;
    }
    if (v123) {
      __int16 v128 = -14208;
    }
    else {
      __int16 v128 = -13952;
    }
    *(_WORD *)&v203[v118] = v128 | v121 | *(_WORD *)&v203[v118] & 0x20;
    unint64_t v129 = 1468 - v118;
    if (v123)
    {
      if (v129 < 0x18) {
        goto LABEL_279;
      }
      signed int v177 = v118;
      int8x16x2_t v178 = v120;
      double v130 = micro();
      unint64_t v131 = MicroToNTP(v130);
      LODWORD(v132) = *(_DWORD *)(v4 + 312);
      double v133 = (double)v132;
      LODWORD(v132) = *(_DWORD *)(v4 + 700);
      double v134 = (double)v132;
      double v135 = NTPToMicro(*(void *)(v4 + 304));
      unsigned int v136 = _RTPSendTimestampWithMediaSampleTime(v4, (v133 + v134 * (v130 - v135)));
      if (v126 + 52 > (char *)buf) {
        goto LABEL_381;
      }
      unint64_t v175 = HIDWORD(v131);
      *((_DWORD *)v126 + 1) = bswap32(*(_DWORD *)(v4 + 200));
      *((_DWORD *)v126 + 2) = bswap32(HIDWORD(v131));
      unsigned int v176 = v136;
      *((_DWORD *)v126 + 3) = bswap32(v131);
      *((_DWORD *)v126 + 4) = bswap32(v136);
      *(int8x8_t *)(v126 + 20) = vrev32_s8(*(int8x8_t *)(v4 + 204));
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v174 = VRTraceErrorLogLevelToCSTR();
        uint64_t v137 = *MEMORY[0x1E4F47A50];
        __int16 v138 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            int v139 = *(_DWORD *)(v4 + 28);
            *(_DWORD *)CMTime buf = 136316674;
            *(void *)&uint8_t buf[4] = v174;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_RTCPAddSenderReportHeader";
            *(_WORD *)&unsigned char buf[22] = 1024;
            int v205 = 1428;
            __int16 v206 = 1024;
            int v207 = 1428;
            __int16 v208 = 1024;
            int v209 = v139;
            __int16 v210 = 1024;
            int v211 = v175;
            __int16 v212 = 1024;
            unsigned int v213 = v176;
            _os_log_impl(&dword_1E1EA4000, v137, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Sending RTCP SR packet PayloadType=%d NTP Seconds=%u RTPTimestamp=%u", buf, 0x34u);
          }
        }
        else if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
        {
          int v147 = *(_DWORD *)(v4 + 28);
          *(_DWORD *)CMTime buf = 136316674;
          *(void *)&uint8_t buf[4] = v174;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_RTCPAddSenderReportHeader";
          *(_WORD *)&unsigned char buf[22] = 1024;
          int v205 = 1428;
          __int16 v206 = 1024;
          int v207 = 1428;
          __int16 v208 = 1024;
          int v209 = v147;
          __int16 v210 = 1024;
          int v211 = v175;
          __int16 v212 = 1024;
          unsigned int v213 = v176;
          _os_log_debug_impl(&dword_1E1EA4000, v137, OS_LOG_TYPE_DEBUG, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Sending RTCP SR packet PayloadType=%d NTP Seconds=%u RTPTimestamp=%u", buf, 0x34u);
        }
      }
      unint64_t v140 = (unint64_t)(v126 + 28);
      if (v126 + 4 > v126 + 28 || v140 > (unint64_t)buf) {
        goto LABEL_381;
      }
      uint64_t v141 = -28;
      signed int v118 = v177;
      int v120 = v178;
    }
    else
    {
      if (v129 < 4)
      {
LABEL_279:
        unint64_t v5 = 2147549187;
LABEL_290:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPSendRTCP_cold_20();
          }
        }
        goto LABEL_306;
      }
      if (v126 + 32 > (char *)buf) {
        goto LABEL_381;
      }
      *((_DWORD *)v126 + 1) = bswap32(*(_DWORD *)(v4 + 200));
      unint64_t v140 = (unint64_t)(v126 + 8);
      uint64_t v141 = -8;
    }
    if (v121)
    {
      unint64_t v142 = v141 + v122;
      uint64_t v143 = v121;
      while (v124)
      {
        if (v142 <= 0x17) {
          goto LABEL_279;
        }
        *(_DWORD *)unint64_t v140 = bswap32(*(_DWORD *)v124);
        int v144 = *((_DWORD *)v124 + 1);
        *(unsigned char *)(v140 + 4) = v144;
        *(_DWORD *)(v140 + 4) = v144 | (*((_DWORD *)v124 + 2) << 8);
        *(_DWORD *)(v140 + 4) = bswap32(*((_DWORD *)v124 + 2) & 0xFFFFFF) & 0xFFFFFF00 | v144;
        *(int8x16_t *)(v140 + _Block_object_dispose(&STACK[0x250], 8) = vrev32q_s8(*(int8x16_t *)(v124 + 12));
        v140 += 24;
        v142 -= 24;
        v124 += 36;
        if (!--v143) {
          goto LABEL_273;
        }
      }
      if (v142 <= 0x17) {
        unint64_t v5 = 2147549187;
      }
      else {
        unint64_t v5 = 2147549185;
      }
      goto LABEL_290;
    }
LABEL_273:
    long long v145 = v120;
    unint64_t v146 = _RTCPFinalizePacket((unint64_t)v126, v122, &v192, v140 - (void)v126);
    if ((v146 & 0x80000000) != 0)
    {
      unint64_t v5 = v146;
      goto LABEL_290;
    }
    v118 += v192;
    signed int v193 = v118;
    v119 += v121;
    int v120 = v145;
  }
  while (v52 != v119);
  size_t v162 = 4 * (unsigned __int16)v179 + 4;
  int v62 = v118 + v162;
  if (v118 + (int)v162 >= 1473)
  {
    unint64_t v5 = 2147549192;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      goto LABEL_306;
    }
    uint64_t v173 = VRTraceErrorLogLevelToCSTR();
    long long v170 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      goto LABEL_306;
    }
    *(_DWORD *)CMTime buf = 136316418;
    *(void *)&uint8_t buf[4] = v173;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "RTPSendRTCP";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v205 = 1989;
    __int16 v206 = 1024;
    int v207 = v118;
    __int16 v208 = 1024;
    int v209 = 4 * (unsigned __int16)v179 + 4;
    __int16 v210 = 1024;
    int v211 = 1472;
    long long v171 = " [%s] %s:%d RTCP buffer too small. Unable to add SDES: %d + %d > %d";
    goto LABEL_347;
  }
  __int16 v163 = &v203[v118];
  if (v203 > v163 || (unsigned __int16)v179 > 0x102u || v163 > (char *)buf || 1472 - v118 < v162) {
    goto LABEL_381;
  }
  memcpy(v163, v197, v162);
  signed int v193 = v118 + v162;
LABEL_102:
  int v63 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100) != 0)
  {
    unint64_t v65 = 1472 - v62;
    *(void *)CMTime buf = v65;
    int v66 = (uint8_t *)&v203[v62];
    if (v66 > buf) {
      goto LABEL_381;
    }
    if (v203 > (char *)v66) {
      goto LABEL_381;
    }
    uint64_t v67 = *(void *)(v2 + 80);
    int v68 = *(unsigned __int8 *)(v2 + 88);
    uint64_t v69 = *(void *)(v2 + 96);
    int v70 = *(unsigned __int8 *)(v2 + 104);
    if (v4 >= v187) {
      goto LABEL_381;
    }
    if (v65 <= 3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPSendRTCP_cold_19();
        }
      }
    }
    else
    {
      *(_WORD *)int v66 = *(_WORD *)v66 & 0x20 | 0xCF80;
      unsigned int v71 = v66 + 4;
      if ((v65 & 0x7FFFFFFFFFFFFFFCLL) != 4)
      {
        int v109 = v66 + 8;
        if (v66 + 8 > buf) {
          goto LABEL_381;
        }
        *unsigned int v71 = *(_DWORD *)(v4 + 4832);
        if (v71 > (_DWORD *)v109) {
          goto LABEL_381;
        }
        unint64_t v110 = 1464 - v62;
        if (v67 && v68)
        {
          while (1)
          {
            BOOL v111 = v110 >= 0x28;
            v110 -= 40;
            if (!v111) {
              break;
            }
            unsigned int v112 = *(_DWORD *)(v4 + 4832);
            *(unsigned char *)int v109 = 6;
            char v113 = *((unsigned char *)v109 + 1) & 0x7F | (*(unsigned char *)v67 << 7);
            *((unsigned char *)v109 + 1) = v113;
            char v114 = v113 & 0xBF | (*(unsigned char *)(v67 + 1) << 6);
            *((unsigned char *)v109 + 1) = v114;
            char v115 = v114 & 0xDF | (32 * *(unsigned char *)(v67 + 2));
            *((unsigned char *)v109 + 1) = v115;
            *((unsigned char *)v109 + 1) = v115 & 0xE0 | (8 * (*(unsigned char *)(v67 + 4) & 3));
            v109[1] = 2304;
            *((_DWORD *)v109 + 1) = bswap32(v112);
            v109[4] = bswap32(*(unsigned __int16 *)(v67 + 12)) >> 16;
            v109[5] = bswap32(*(unsigned __int16 *)(v67 + 14)) >> 16;
            *(int8x16_t *)(v109 + 6) = vrev32q_s8(*(int8x16_t *)(v67 + 16));
            *(int8x8_t *)(v109 + 14) = vrev32_s8(*(int8x8_t *)(v67 + 32));
            *((_DWORD *)v109 + 9) = *(_DWORD *)(v67 + 40);
            v109 += 20;
            if (!--v68) {
              goto LABEL_222;
            }
          }
          int v155 = VRTraceGetErrorLogLevelForModule();
          if (v155 >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendRTCP_cold_18();
            }
          }
        }
        else
        {
LABEL_222:
          if (!v69 || !v70)
          {
LABEL_226:
            unint64_t v117 = _RTCPFinalizePacket((unint64_t)v66, v65, (unint64_t *)buf, (char *)v109 - (char *)v66);
            if ((v117 & 0x80000000) == 0)
            {
              v62 += *(_DWORD *)buf;
              signed int v193 = v62;
              int v63 = *(_DWORD *)v2;
              goto LABEL_103;
            }
            unint64_t v5 = v117;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                RTPSendRTCP_cold_16();
              }
            }
            goto LABEL_303;
          }
          while (v110 > 0x23)
          {
            unsigned int v116 = bswap32(*(_DWORD *)(v4 + 4832));
            *(_DWORD *)int v109 = 134217735;
            *((_DWORD *)v109 + 1) = v116;
            *((_DWORD *)v109 + 2) = *(_DWORD *)v69;
            *(int8x8_t *)(v109 + 6) = vrev16_s8(*(int8x8_t *)(v69 + 4));
            *(void *)(v109 + 10) = *(void *)(v69 + 12);
            *((unsigned char *)v109 + 2_Block_object_dispose(&STACK[0x250], 8) = *(unsigned char *)(v69 + 20);
            *((unsigned char *)v109 + 29) = 0;
            v109[15] = bswap32(*(unsigned __int16 *)(v69 + 22)) >> 16;
            v109[16] = bswap32(*(unsigned __int16 *)(v69 + 24)) >> 16;
            v109[17] = bswap32(*(unsigned __int16 *)(v69 + 26)) >> 16;
            v109 += 18;
            v110 -= 36;
            if (!--v70) {
              goto LABEL_226;
            }
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendRTCP_cold_17();
            }
          }
        }
        goto LABEL_302;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPSendRTCP_cold_15();
        }
LABEL_302:
        unint64_t v5 = 2147549187;
        goto LABEL_303;
      }
    }
    unint64_t v5 = 2147549187;
LABEL_303:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSendRTCP_cold_14();
      }
    }
    goto LABEL_306;
  }
LABEL_103:
  if ((v63 & 0x600) == 0) {
    goto LABEL_134;
  }
  unint64_t v64 = 1472 - v62;
  if (v64 > 0x5C0 || v4 >= v187) {
    goto LABEL_381;
  }
  *(void *)CMTime buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  if ((v63 & 0x200) != 0)
  {
    *(_DWORD *)CMTime buf = 6;
    *(void *)&uint8_t buf[8] = *(void *)(v2 + 152);
    unint64_t v194 = 0;
    unint64_t v72 = &v203[v62];
    if (v72 < v203 || v72 > &v203[v64] || &v203[v64] - v72 < v64) {
      goto LABEL_381;
    }
    unint64_t v73 = _RTCPAddPSFBAlfbPacket(v4, (unint64_t)v72, 1472 - v62, &v194, (unsigned int *)buf);
    if ((v73 & 0x80000000) == 0)
    {
      unint64_t v5 = 0;
      v62 += v194;
      signed int v193 = v62;
      if ((*(_DWORD *)v2 & 0x400) == 0) {
        goto LABEL_133;
      }
      goto LABEL_128;
    }
    unint64_t v5 = v73;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSendRTCP_cold_13();
      }
    }
LABEL_373:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSendRTCP_cold_11();
      }
    }
    goto LABEL_306;
  }
  unint64_t v5 = 2147549192;
  if ((v63 & 0x400) == 0) {
    goto LABEL_133;
  }
LABEL_128:
  int v74 = *(_DWORD *)(v2 + 160);
  *(_DWORD *)CMTime buf = 5;
  *(_DWORD *)&uint8_t buf[8] = v74;
  unint64_t v194 = 0;
  int v75 = &v203[v62];
  if (&v203[v64] < v75) {
    goto LABEL_381;
  }
  if (v75 < v203) {
    goto LABEL_381;
  }
  unint64_t v76 = v64 - v62;
  if (v76 > &v203[v64] - v75) {
    goto LABEL_381;
  }
  unint64_t v5 = _RTCPAddPSFBAlfbPacket(v4, (unint64_t)v75, v76, &v194, (unsigned int *)buf);
  if ((v5 & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSendRTCP_cold_12();
      }
    }
  }
  else
  {
    v62 += v194;
    signed int v193 = v62;
  }
LABEL_133:
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_373;
  }
LABEL_134:
  uint64_t v77 = *(void *)(v2 + 16);
  if (!v77) {
    goto LABEL_140;
  }
  unint64_t v194 = 1472 - v62;
  int v78 = *(_DWORD *)(v2 + 4);
  uint64_t v79 = *(void *)(v2 + 8);
  *(_DWORD *)&uint8_t buf[4] = 0;
  *(void *)&uint8_t buf[8] = v79;
  *(_DWORD *)CMTime buf = v78;
  *(void *)&buf[16] = v77;
  int v80 = &v203[v62];
  if (v80 > (char *)buf || v203 > v80 || v4 >= v187) {
    goto LABEL_381;
  }
  unint64_t v81 = _RTCPAddAppPacket(v4, (unint64_t)v80, 1472 - v62, &v194, (uint64_t)buf);
  if ((v81 & 0x80000000) != 0)
  {
    unint64_t v5 = v81;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSendRTCP_cold_10();
      }
    }
    goto LABEL_306;
  }
  v62 += v194;
  signed int v193 = v62;
LABEL_140:
  if (!(_WORD)v185)
  {
LABEL_147:
    if (!v183)
    {
LABEL_153:
      if (*(_DWORD *)(v4 + 96))
      {
        int v86 = 1472 - v62;
        *(_DWORD *)CMTime buf = 1472 - v62;
        uint64_t v87 = &v203[v62];
        if (v87 > (char *)buf || v203 > v87 || v4 >= v187 || v86 < 0 || 1472 - v62 < v86) {
          goto LABEL_381;
        }
        uint64_t v88 = RTCPAddFIR(v4, (uint64_t)v87, v86, buf);
        if ((v88 & 0x80000000) != 0)
        {
          unint64_t v5 = v88;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendRTCP_cold_9();
            }
          }
          goto LABEL_306;
        }
        v62 += *(_DWORD *)buf;
        signed int v193 = v62;
        *(_DWORD *)(v4 + 96) = 0;
      }
      if (*(_DWORD *)(v4 + 104))
      {
        int v89 = 1472 - v62;
        *(_DWORD *)CMTime buf = 1472 - v62;
        uint64_t v90 = (uint8_t *)&v203[v62];
        if (v90 > buf || v203 > (char *)v90 || v4 >= v187 || v89 < 0 || 1472 - v62 < v89) {
          goto LABEL_381;
        }
        uint64_t v91 = RTCPAddPLI(v4, v90, v89, buf);
        if ((v91 & 0x80000000) != 0)
        {
          unint64_t v5 = v91;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendRTCP_cold_8();
            }
          }
          goto LABEL_306;
        }
        v62 += *(_DWORD *)buf;
        signed int v193 = v62;
        *(_DWORD *)(v4 + 104) = 0;
      }
      if (*(_DWORD *)(v4 + 112))
      {
        int v92 = 1472 - v62;
        *(_DWORD *)CMTime buf = 1472 - v62;
        uint64_t v93 = &v203[v62];
        if (v93 > (char *)buf || v203 > v93 || v4 >= v187 || v92 < 0 || 1472 - v62 < v92) {
          goto LABEL_381;
        }
        uint64_t v94 = RTCPAddTST(v4, (uint64_t)v93, v92, buf, 0);
        if ((v94 & 0x80000000) != 0)
        {
          unint64_t v5 = v94;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendRTCP_cold_7();
            }
          }
          goto LABEL_306;
        }
        v62 += *(_DWORD *)buf;
        signed int v193 = v62;
        *(_DWORD *)(v4 + 112) = 0;
      }
      if (*(_DWORD *)(v4 + 120))
      {
        int v95 = 1472 - v62;
        *(_DWORD *)CMTime buf = 1472 - v62;
        uint64_t v96 = &v203[v62];
        if (v96 > (char *)buf || v203 > v96 || v4 >= v187 || v95 < 0 || 1472 - v62 < v95) {
          goto LABEL_381;
        }
        uint64_t v97 = RTCPAddTST(v4, (uint64_t)v96, v95, buf, 1);
        if ((v97 & 0x80000000) != 0)
        {
          unint64_t v5 = v97;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendRTCP_cold_6();
            }
          }
          goto LABEL_306;
        }
        v62 += *(_DWORD *)buf;
        signed int v193 = v62;
        *(_DWORD *)(v4 + 120) = 0;
      }
      if (*(_DWORD *)(v4 + 128))
      {
        int v98 = 1472 - v62;
        *(_DWORD *)CMTime buf = 1472 - v62;
        CFNumberRef v99 = &v203[v62];
        if (v99 > (char *)buf || v203 > v99 || v4 >= v187 || v98 < 0 || 1472 - v62 < v98) {
          goto LABEL_381;
        }
        uint64_t v100 = RTCPAddTMMB((_DWORD *)v4, (uint64_t)v99, v98, buf, 0);
        if ((v100 & 0x80000000) != 0)
        {
          unint64_t v5 = v100;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendRTCP_cold_5();
            }
          }
          goto LABEL_306;
        }
        v62 += *(_DWORD *)buf;
        signed int v193 = v62;
        *(_DWORD *)(v4 + 12_Block_object_dispose(&STACK[0x250], 8) = 0;
      }
      if (*(_DWORD *)(v4 + 136))
      {
        int v101 = 1472 - v62;
        *(_DWORD *)CMTime buf = 1472 - v62;
        CFTypeRef v102 = &v203[v62];
        if (v102 > (char *)buf || v203 > v102 || v4 >= v187 || v101 < 0 || 1472 - v62 < v101) {
          goto LABEL_381;
        }
        uint64_t v103 = RTCPAddTMMB((_DWORD *)v4, (uint64_t)v102, v101, buf, 1);
        if ((v103 & 0x80000000) != 0)
        {
          unint64_t v5 = v103;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendRTCP_cold_4();
            }
          }
          goto LABEL_306;
        }
        v62 += *(_DWORD *)buf;
        signed int v193 = v62;
        *(_DWORD *)(v4 + 136) = 0;
      }
      if ((v182 & 1) == 0) {
        goto LABEL_206;
      }
      if (v62 < 1465)
      {
        int64x2_t v104 = (uint64_t *)&v203[v62];
        if (v104 > (uint64_t *)buf || v203 > (char *)v104) {
          goto LABEL_381;
        }
        *int64x2_t v104 = v181 | (v184 << 32) | v180;
        v62 += 8;
        signed int v193 = v62;
LABEL_206:
        int v188 = v62 - 8;
        if (v4 >= v187) {
          goto LABEL_381;
        }
        uint64_t v105 = SRTCPEncrypt(v4 + 7960, (unint64_t)&v203[8], v62 - 8, 1464, &v188);
        if ((v105 & 0x80000000) != 0 && (unint64_t v5 = v105, v105 != -2145255368))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendRTCP_cold_1();
            }
          }
        }
        else
        {
          signed int v193 = v188 + 8;
          uint64_t v106 = SRTCPAddAuthenticationTag((_DWORD *)(v4 + 7960), 1472, v203, v188 + 8, &v193);
          if ((v106 & 0x80000000) != 0 && (unint64_t v5 = v106, v106 != -2145255368))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                RTPSendRTCP_cold_2();
              }
            }
          }
          else
          {
            char v107 = (*(_DWORD *)v2 & 0x48) != 0;
            if (*(void *)(v4 + 11112)) {
              uint64_t v108 = _RTCPSendWithTransportStream(v4, v203, v193, v107, v2);
            }
            else {
              uint64_t v108 = _RTCPSendWithSocket(v4, v203, v193, v107);
            }
            unint64_t v5 = v108;
          }
        }
        goto LABEL_306;
      }
      unint64_t v5 = 2147549192;
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        goto LABEL_306;
      }
      VRTraceErrorLogLevelToCSTR();
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        goto LABEL_306;
      }
      RTPSendRTCP_cold_3();
LABEL_369:
      unint64_t v5 = 2147549192;
      goto LABEL_306;
    }
    size_t v84 = (4 * v183 + 4);
    if (v62 + (int)v84 < 1473)
    {
      int v85 = &v203[v62];
      if (v85 > (char *)buf || v203 > v85 || 1472 - v62 < v84) {
        goto LABEL_381;
      }
      memcpy(v85, __b, v84);
      signed int v193 = v62 + v84;
      v62 += v84;
      goto LABEL_153;
    }
    unint64_t v5 = 2147549192;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      goto LABEL_306;
    }
    uint64_t v172 = VRTraceErrorLogLevelToCSTR();
    long long v170 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      goto LABEL_306;
    }
    *(_DWORD *)CMTime buf = 136316418;
    *(void *)&uint8_t buf[4] = v172;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "RTPSendRTCP";
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v205 = 2031;
    __int16 v206 = 1024;
    int v207 = v62;
    __int16 v208 = 1024;
    int v209 = 4 * v183 + 4;
    __int16 v210 = 1024;
    int v211 = 1472;
    long long v171 = " [%s] %s:%d RTCP buffer too small. Unable to add NACK: %d + %d > %d";
LABEL_347:
    _os_log_error_impl(&dword_1E1EA4000, v170, OS_LOG_TYPE_ERROR, v171, buf, 0x2Eu);
    goto LABEL_369;
  }
  size_t v82 = 4 * (unsigned __int16)v185 + 4;
  if (v62 + (int)v82 < 1473)
  {
    unsigned int v83 = &v203[v62];
    if (v203 <= v83 && (unsigned __int16)v185 <= 0x102u && v83 <= (char *)buf && 1472 - v62 >= v82)
    {
      memcpy(v83, __src, v82);
      signed int v193 = v62 + v82;
      v62 += v82;
      goto LABEL_147;
    }
LABEL_381:
    __break(0x5519u);
  }
  unint64_t v5 = 2147549192;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v169 = VRTraceErrorLogLevelToCSTR();
    long long v170 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 136316418;
      *(void *)&uint8_t buf[4] = v169;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "RTPSendRTCP";
      *(_WORD *)&unsigned char buf[22] = 1024;
      int v205 = 2023;
      __int16 v206 = 1024;
      int v207 = v62;
      __int16 v208 = 1024;
      int v209 = 4 * (unsigned __int16)v185 + 4;
      __int16 v210 = 1024;
      int v211 = 1472;
      long long v171 = " [%s] %s:%d RTCP buffer too small. Unable to add FIR: %d + %d > %d";
      goto LABEL_347;
    }
  }
LABEL_306:
  CheckOutHandleDebug();
  return v5;
}

uint64_t RTPSendRateControlPacket(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = 2147549186;
  uint64_t v5 = CheckInHandleDebug();
  if (v5)
  {
    if (*(_DWORD *)(v5 + 184))
    {
      if ((*a2 & 0x20) != 0) {
        uint64_t v4 = RTPSendRTCP(a1);
      }
      else {
        uint64_t v4 = 2147549200;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    CheckOutHandleDebug();
  }
  return v4;
}

uint64_t RTCPGetVoIPMetricsReportBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147549201;
  uint64_t v4 = CheckInHandleDebug();
  if (!v4) {
    return 2147549186;
  }
  if (*(_DWORD *)(v4 + 188))
  {
    if (*(_DWORD *)(v4 + 7004))
    {
      uint64_t v5 = *(unsigned int *)(v4 + 704);
      if (v5)
      {
        uint64_t v6 = *(_DWORD *)(v4 + 692) - *(unsigned __int16 *)(v4 + 688) + 1;
        uint64_t v7 = ((v6 - v5) << 8) / v6;
      }
      else
      {
        LOBYTE(v7) = -1;
      }
      uint64_t v3 = 0;
      *(unsigned char *)a2 = v7;
      unsigned int v8 = *(_DWORD *)(*(void *)(v4 + 10408) + 48);
      if (v8 > 0xFFFE) {
        LOWORD(v_Block_object_dispose(&STACK[0x250], 8) = -1;
      }
      *(_WORD *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v8;
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      unint64_t v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315650;
        uint64_t v15 = v12;
        __int16 v16 = 2080;
        uint64_t v17 = "RTCPGetVoIPMetricsReportBlock";
        __int16 v18 = 1024;
        int v19 = 1613;
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Haven't received any RTP packet yet", (uint8_t *)&v14, 0x1Cu);
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315650;
        uint64_t v15 = v10;
        __int16 v16 = 2080;
        uint64_t v17 = "RTCPGetVoIPMetricsReportBlock";
        __int16 v18 = 1024;
        int v19 = 1612;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTCP XR is not enabled", (uint8_t *)&v14, 0x1Cu);
      }
    }
    uint64_t v3 = 67;
  }
  CheckOutHandleDebug();
  return v3;
}

unint64_t _RTCPInitializeReceptionReportBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD *)(a1 + 692) - *(unsigned __int16 *)(a1 + 688) + 1;
  uint64_t v5 = *(unsigned int *)(a1 + 704);
  uint64_t v6 = v4 - v5 + 0x1000000;
  if (v4 >= v5) {
    uint64_t v6 = v4 - v5;
  }
  if (v4 - v5 >= 0x7FFFFF) {
    uint64_t v7 = 0x7FFFFFLL;
  }
  else {
    uint64_t v7 = v6;
  }
  int v8 = *(_DWORD *)(a1 + 708);
  unint64_t v9 = (v4 - v8);
  uint64_t v10 = v9 - (v5 - *(_DWORD *)(a1 + 712));
  int v11 = v4 - v8;
  *(_DWORD *)(a1 + 70_Block_object_dispose(&STACK[0x250], 8) = v4;
  *(_DWORD *)(a1 + 712) = v5;
  if (v4 == v8 || v10 < 1) {
    int v13 = 0;
  }
  else {
    int v13 = ((v10 << 8) / v9);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v15 = VRTraceErrorLogLevelToCSTR();
    __int16 v16 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(_DWORD *)(a1 + 200);
      int v18 = *(_DWORD *)(a1 + 4832);
      int v21 = 136317442;
      uint64_t v22 = v15;
      __int16 v23 = 2080;
      uint64_t v24 = "_RTCPInitializeReceptionReportBlock";
      __int16 v25 = 1024;
      int v26 = 762;
      __int16 v27 = 1024;
      int v28 = v17;
      __int16 v29 = 1024;
      int v30 = v18;
      __int16 v31 = 1024;
      int v32 = v4;
      __int16 v33 = 2048;
      uint64_t v34 = v7;
      __int16 v35 = 1024;
      int v36 = v11;
      __int16 v37 = 2048;
      uint64_t v38 = v10;
      __int16 v39 = 1024;
      int v40 = v13;
      _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d localSSRC:%X remoteSSRC:%X dwPacketExp = %u lPacketLost = %ld, dwPacketExpInt = %d, lPacketLostInt = %ld, fraction = %d", (uint8_t *)&v21, 0x4Eu);
    }
  }
  if (*(_DWORD *)(a1 + 6500)) {
    unint64_t v19 = GetNTPTime() - *(void *)(a1 + 6496);
  }
  else {
    unint64_t v19 = 0;
  }
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 4832);
  *(_DWORD *)(a2 + 4) = v13;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v7;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 692);
  LODWORD(v14) = *(_DWORD *)(a1 + 4828);
  *(_DWORD *)(a2 + 16) = vcvtad_u64_f64(*(double *)(a1 + 27608) * (double)v14);
  *(_DWORD *)(a2 + 20) = NTPToMiddle32(*(void *)(a1 + 6504));
  unint64_t result = NTPToMiddle32(v19);
  *(_DWORD *)(a2 + 24) = result;
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 617);
  return result;
}

unint64_t _RTCPAddCustomReportPacket(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  _OWORD v14[2] = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x8000000000000000) != 0) {
    __break(0x5519u);
  }
  unint64_t result = 2147549187;
  if (a3 > 3)
  {
    *(_WORD *)a2 = *(_WORD *)a2 & 0x20 | 0xCC80;
    if (a3 - 12 <= 0xFFFFFFFFFFFFFFF7)
    {
      unsigned int v10 = *(_DWORD *)a5;
      *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 200));
      *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = bswap32(v10);
      int v11 = (_OWORD *)(a2 + 12);
      v14[0] = a2 + 12;
      v14[1] = a3 - 12;
      if (v10 == 1297568338 || v10 == 1297568594)
      {
        unint64_t result = _RTCPAddCustomReport(v14, a1, a5);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        int v11 = (_OWORD *)v14[0];
      }
      else if (v10 == 1380144204)
      {
        if (a3 - 12 < 0x14) {
          return result;
        }
        uint64_t v12 = *(long long **)(a5 + 8);
        long long v13 = *v12;
        *(_DWORD *)(a2 + 2_Block_object_dispose(&STACK[0x250], 8) = *((_DWORD *)v12 + 4);
        *int v11 = v13;
        int v11 = (_OWORD *)(a2 + 32);
      }
      return _RTCPFinalizePacket(a2, a3, a4, (unint64_t)v11 - a2);
    }
  }
  return result;
}

unint64_t _RTCPAddAppPacket(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  if (a3 < 4) {
    return 2147549187;
  }
  *(_WORD *)a2 = *(_WORD *)a2 & 0x20 | 0xCC80;
  size_t v7 = a3 - 12;
  if (a3 - 12 > 0xFFFFFFFFFFFFFFF7) {
    return 2147549187;
  }
  unsigned int v9 = bswap32(*(_DWORD *)a5);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 200));
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v9;
  size_t v10 = *(void *)(a5 + 16);
  if (v7 < v10) {
    return 2147549187;
  }
  unint64_t v13 = a2 + 12;
  unint64_t result = (unint64_t)memcpy((void *)(a2 + 12), *(const void **)(a5 + 8), v10);
  uint64_t v14 = *(void *)(a5 + 16);
  unint64_t v15 = v13 + v14;
  if (a2 + a3 < v13 + v14 || v13 > v15 || v7 - v14 > a3 - (v14 + 12))
  {
    __break(0x5519u);
  }
  else
  {
    return _RTCPFinalizePacket(a2, a3, a4, v15 - a2);
  }
  return result;
}

uint64_t RTCPAddFIR(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 200);
  unsigned int v5 = *(_DWORD *)(a1 + 4832);
  char v6 = *(unsigned char *)(a1 + 100);
  if (a3 < 20)
  {
    uint64_t v7 = 2147549192;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTCPAddFIR_cold_1();
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    *(_DWORD *)a2 = 67161732;
    *(void *)(a2 + 4) = bswap32(v4);
    *(_DWORD *)(a2 + 12) = bswap32(v5);
    *(unsigned char *)(a2 + 16) = v6;
    *(_WORD *)(a2 + 17) = 0;
    *(unsigned char *)(a2 + 19) = 0;
    *a4 = 20;
  }
  return v7;
}

uint64_t RTCPAddPLI(uint64_t a1, _DWORD *a2, int a3, _DWORD *a4)
{
  if (a3 < 12)
  {
    uint64_t v4 = 2147549192;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTCPAddPLI_cold_1();
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = bswap32(*(_DWORD *)(a1 + 4832));
    unsigned int v6 = bswap32(*(_DWORD *)(a1 + 200));
    *a2 = 33607297;
    a2[1] = v6;
    a2[2] = v5;
    *a4 = 12;
  }
  return v4;
}

uint64_t RTCPAddTST(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a3 < 20)
  {
    uint64_t v6 = 2147549192;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      __int16 v16 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v18 = "TSTR";
        int v19 = 136316418;
        uint64_t v20 = v15;
        __int16 v21 = 2080;
        uint64_t v22 = "RTCPAddTST";
        if (a5 == 1) {
          int v18 = "TSTN";
        }
        __int16 v23 = 1024;
        int v24 = 549;
        __int16 v25 = 2080;
        int v26 = v18;
        __int16 v27 = 1024;
        int v28 = 20;
        __int16 v29 = 1024;
        int v30 = a3;
        _os_log_error_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unable to add %s, buffer too small: %d > %d", (uint8_t *)&v19, 0x32u);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 108;
    if (a5 == 1) {
      uint64_t v7 = 117;
    }
    int v8 = *(unsigned __int8 *)(a1 + v7);
    uint64_t v9 = 116;
    if (a5 == 1) {
      uint64_t v9 = 124;
    }
    char v10 = *(unsigned char *)(a1 + v9);
    unsigned int v11 = *(_DWORD *)(a1 + 4832);
    unsigned int v12 = *(_DWORD *)(a1 + 200);
    if (a5 == 1) {
      __int16 v13 = -12666;
    }
    else {
      __int16 v13 = -12667;
    }
    *(_WORD *)a2 = v13;
    *(_WORD *)(a2 + 2) = 1024;
    *(void *)(a2 + 4) = bswap32(v12);
    *(_DWORD *)(a2 + 12) = bswap32(v11);
    *(_DWORD *)(a2 + 16) = bswap32(v10 & 0x1F | (v8 << 24));
    *a4 = 20;
  }
  return v6;
}

uint64_t RTCPAddTMMB(_DWORD *a1, uint64_t a2, int a3, _DWORD *a4, int a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a5 == 1) {
    __int16 v7 = -12924;
  }
  else {
    __int16 v7 = -12925;
  }
  uint64_t v8 = 33;
  if (a5 == 1) {
    uint64_t v8 = 35;
  }
  unsigned int v9 = a1[v8];
  if (v9 >= 0x20000)
  {
    LOBYTE(v10) = 0;
    unsigned int v11 = v9 >> 17;
    do
    {
      LOBYTE(v10) = v10 + 1;
      BOOL v12 = v11 > 1;
      v11 >>= 1;
    }
    while (v12);
    int v10 = v10;
  }
  else
  {
    int v10 = 0;
  }
  if (a3 < 20)
  {
    uint64_t v13 = 2147549192;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v19 = VRTraceErrorLogLevelToCSTR();
      uint64_t v20 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = "TMMBR";
        int v23 = 136316418;
        uint64_t v24 = v19;
        __int16 v25 = 2080;
        int v26 = "RTCPAddTMMB";
        if (a5 == 1) {
          uint64_t v22 = "TMMBN";
        }
        __int16 v27 = 1024;
        int v28 = 623;
        __int16 v29 = 2080;
        int v30 = v22;
        __int16 v31 = 1024;
        int v32 = 20;
        __int16 v33 = 1024;
        int v34 = a3;
        _os_log_error_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unable to add %s, buffer too small: %d > %d", (uint8_t *)&v23, 0x32u);
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = (v9 >> v10 << 9) | (v10 << 26);
    unsigned int v15 = bswap32(a1[50]);
    unsigned int v16 = bswap32(a1[1208]);
    BOOL v17 = a1[3] == 0;
    *(_WORD *)a2 = v7;
    if (v17) {
      int v18 = 40;
    }
    else {
      int v18 = 60;
    }
    *(_WORD *)(a2 + 2) = 1024;
    *(_DWORD *)(a2 + 4) = v15;
    *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 0;
    *(_DWORD *)(a2 + 12) = v16;
    *(_DWORD *)(a2 + 16) = bswap32(v14 | v18);
    *a4 = 20;
  }
  return v13;
}

uint64_t _RTCPSendWithTransportStream(uint64_t a1, void *a2, size_t a3, char a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v17 = unk_1E259DDC0;
  long long v18 = xmmword_1E259DDD0;
  memset(v19, 170, sizeof(v19));
  memset(blockBufferOut, 170, sizeof(blockBufferOut));
  VCPacketInitialize((uint64_t)blockBufferOut);
  if (!a5)
  {
    uint64_t v14 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTCPSendWithTransportStream_cold_1();
      }
    }
    goto LABEL_12;
  }
  if (*(unsigned __int8 *)(a5 + 130) >= 0xDu)
  {
    uint64_t v14 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTCPSendWithTransportStream_cold_2();
      }
    }
    goto LABEL_12;
  }
  uint64_t result = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 10480), a2, a3, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, a3, 0, blockBufferOut);
  if (result)
  {
    if ((int)result >= 0) {
      int v15 = result;
    }
    else {
      int v15 = -(int)result;
    }
    uint64_t v14 = v15 | 0xD0010000;
    goto LABEL_12;
  }
  LOWORD(blockBufferOut[1]) = 257;
  v19[8] = a4;
  v19[9] = 1;
  BYTE4(blockBufferOut[4]) = *(unsigned char *)(a5 + 131);
  blockBufferOut[5] = *(CMBlockBufferRef *)(a5 + 136);
  BYTE2(blockBufferOut[4]) = *(unsigned char *)(a5 + 130);
  LOBYTE(blockBufferOut[6]) = *(unsigned char *)(a1 + 10462);
  BYTE1(blockBufferOut[6]) = *(unsigned char *)(a5 + 144);
  if (!BYTE2(blockBufferOut[4]))
  {
LABEL_7:
    uint64_t v11 = _RTPEnsureTransportStreamsActivated(a1);
    if ((v11 & 0x80000000) == 0)
    {
      uint64_t v12 = *(void *)(a1 + 11112);
      uint64_t v13 = *(uint64_t (**)(uint64_t, CMBlockBufferRef *))(*(void *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v13)
      {
        uint64_t v14 = 4294954514;
        goto LABEL_12;
      }
      uint64_t v11 = v13(v12, blockBufferOut);
    }
    uint64_t v14 = v11;
LABEL_12:
    VCPacketInvalidate((uint64_t *)blockBufferOut);
    return v14;
  }
  if (BYTE2(blockBufferOut[4]) <= 0xCu)
  {
    __memcpy_chk();
    goto LABEL_7;
  }
  __break(0x5519u);
  return result;
}

uint64_t _RTCPSendWithSocket(uint64_t a1, _OWORD *a2, size_t a3, char a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  memset(v8, 0, sizeof(v8));
  DWORD2(v8[0]) = *(_DWORD *)(a1 + 10400);
  BYTE9(v9) = a4;
  BYTE10(v9) = 1;
  uint64_t v4 = 0;
  if (VTP_Send(*(_DWORD *)(a1 + 8), a2, a3, 0, (uint64_t)v8) == -1)
  {
    uint64_t v4 = *__error() | 0xC0010000;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTCPSendWithSocket_cold_1(v5, v6);
      }
    }
  }
  return v4;
}

uint64_t _RTCPTransport_ParsePacket(unint64_t a1, uint64_t *a2, int a3)
{
  unint64_t v4 = 0;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (_WORD *)a2[13];
  unint64_t v6 = (unint64_t)v5 + a2[14];
  unint64_t v7 = (unint64_t)v5 + a3;
  *((unsigned char *)a2 + _Block_object_dispose(&STACK[0x250], 8) = 0;
  unint64_t v96 = (unint64_t)(a2 + 2);
  uint64_t v8 = v5;
  do
  {
    if ((unint64_t)(v8 + 2) > v7)
    {
      uint64_t v13 = 2147549191;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTCPTransport_ParsePacket_cold_1();
        }
      }
      return v13;
    }
    if (v8 && ((unint64_t)v8 >= v6 || v8 < v5)) {
      goto LABEL_224;
    }
    unsigned int v9 = bswap32((unsigned __int16)v8[1]) >> 16;
    v8[1] = v9;
    if (v9 >= 0x103)
    {
      uint64_t v13 = 2147549191;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTCPTransport_ParsePacket_cold_2();
        }
      }
      return v13;
    }
    unint64_t v10 = (unint64_t)&v8[2 * v9 + 2];
    if (v10 > v7)
    {
      if ((_BYTE)v4) {
        goto LABEL_30;
      }
      return 0;
    }
    if ((*v8 & 0xC0) != 0x80)
    {
      uint64_t v13 = 2147549191;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTCPTransport_ParsePacket_cold_14();
        }
      }
      return v13;
    }
    char v11 = v4 + 1;
    *((unsigned char *)a2 + _Block_object_dispose(&STACK[0x250], 8) = v4 + 1;
    a2[v4 + 2] = (uint64_t)v8;
    BOOL v12 = v10 >= v7 || v4++ >= 9;
    uint64_t v8 = (_WORD *)v10;
  }
  while (!v12);
  if (v10 != v7)
  {
    uint64_t v13 = 2147549191;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTCPTransport_ParsePacket_cold_13();
      }
    }
    return v13;
  }
  if (!v11) {
    return 0;
  }
LABEL_30:
  unsigned int v14 = 0;
  uint64_t v92 = *a2;
  unint64_t v95 = (unint64_t)(a2 + 12);
  unint64_t v90 = (unint64_t)a2 + 124;
  unint64_t v94 = (unint64_t)a2 + 1596;
  if (a1) {
    BOOL v15 = a1 + 27616 > a1;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = v15;
  int v91 = v16;
  while (2)
  {
    unsigned int v97 = v14;
    long long v17 = (__int16 **)(v96 + 8 * v14);
    if ((unint64_t)v17 >= v95 || (unint64_t)v17 < v96) {
      goto LABEL_224;
    }
    uint64_t v19 = *v17;
    unsigned int v20 = (unsigned __int16)**v17;
    unint64_t v21 = (unint64_t)(*v17 + 518);
    switch(v20 >> 8)
    {
      case 0xC0u:
        if ((unsigned __int16)v19[1] - 7 > 0xFFFFFFF9)
        {
          *((_DWORD *)v19 + 1) = bswap32(*((_DWORD *)v19 + 1));
          BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"enableLTRPLogging", 0);
          if (BoolValueForKey) {
            int v23 = 7;
          }
          else {
            int v23 = 8;
          }
          if ((unint64_t)v19 >= v21) {
            goto LABEL_224;
          }
          if (((2 * v19[1] + 254) & 0xFELL) != 0)
          {
            BOOL v24 = BoolValueForKey;
            uint64_t v25 = 0;
            unint64_t v26 = 0;
            __int16 v27 = v19 + 4;
            do
            {
              if (&v27[v25] >= v19 + 14 || &v27[v25] < v27) {
                goto LABEL_224;
              }
              v27[v26] = bswap32((unsigned __int16)v27[v26]) >> 16;
              if (v23 <= (int)VRTraceGetErrorLogLevelForModule())
              {
                uint64_t v29 = VRTraceErrorLogLevelToCSTR();
                if (v24)
                {
                  int v30 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_61;
                  }
                }
                else
                {
                  int v30 = *MEMORY[0x1E4F47A50];
                  __int16 v31 = *MEMORY[0x1E4F47A50];
                  if (!*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
                    {
                      unsigned int v33 = (unsigned __int16)v27[v26];
                      *(_DWORD *)CMTime buf = 136316162;
                      *(void *)&uint8_t buf[4] = v29;
                      *(_WORD *)&unsigned char buf[12] = 2080;
                      *(void *)&buf[14] = "_RTCPTransport_ParsePacket";
                      __int16 v101 = 1024;
                      int v102 = 2215;
                      __int16 v103 = 1024;
                      int v104 = v97;
                      __int16 v105 = 1024;
                      unsigned int v106 = v33;
                      _os_log_debug_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEBUG, " [%s] %s:%d j=%d awSizeAndFirstMBs=%d", buf, 0x28u);
                    }
                    goto LABEL_64;
                  }
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                  {
LABEL_61:
                    unsigned int v32 = (unsigned __int16)v27[v26];
                    *(_DWORD *)CMTime buf = 136316162;
                    *(void *)&uint8_t buf[4] = v29;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "_RTCPTransport_ParsePacket";
                    __int16 v101 = 1024;
                    int v102 = 2215;
                    __int16 v103 = 1024;
                    int v104 = v97;
                    __int16 v105 = 1024;
                    unsigned int v106 = v32;
                    _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d j=%d awSizeAndFirstMBs=%d", buf, 0x28u);
                  }
                }
              }
LABEL_64:
              ++v26;
              ++v25;
            }
            while (v26 < ((2 * v19[1] - 2) & 0xFEu));
          }
LABEL_188:
          unsigned int v14 = (v97 + 1);
          if (v14 >= *((unsigned __int8 *)a2 + 8)) {
            return 0;
          }
          continue;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTCPTransport_ParsePacket_cold_8();
          }
        }
        return 2147549191;
      case 0xC1u:
        if (v19[1] == 2)
        {
          *((_DWORD *)v19 + 1) = bswap32(*((_DWORD *)v19 + 1));
          v19[4] = bswap32((unsigned __int16)v19[4]) >> 16;
          v19[5] = bswap32((unsigned __int16)v19[5]) >> 16;
          goto LABEL_188;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTCPTransport_ParsePacket_cold_9();
          }
        }
        return 2147549191;
      case 0xC8u:
        uint64_t v34 = 24 * (v20 & 0x1F);
        if (4 * (unsigned __int16)v19[1] + 4 == v34 + 28)
        {
          *(int8x16_t *)(v19 + 2) = vrev32q_s8(*(int8x16_t *)(v19 + 2));
          *(int8x8_t *)(v19 + 10) = vrev32_s8(*(int8x8_t *)(v19 + 10));
          if ((v20 & 0x1F) == 0)
          {
LABEL_74:
            if ((int)VRTraceGetErrorLogLevelForModule() > 7)
            {
              uint64_t v39 = VRTraceErrorLogLevelToCSTR();
              int v40 = *MEMORY[0x1E4F47A50];
              uint64_t v41 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v42 = *(_DWORD *)(a1 + 28);
                  int v43 = *((_DWORD *)v19 + 2);
                  int v44 = *((_DWORD *)v19 + 4);
                  *(_DWORD *)CMTime buf = 136316674;
                  *(void *)&uint8_t buf[4] = v39;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "_RTCPProcessSenderReportPacket";
                  __int16 v101 = 1024;
                  int v102 = 1459;
                  __int16 v103 = 1024;
                  int v104 = 1459;
                  __int16 v105 = 1024;
                  unsigned int v106 = v42;
                  __int16 v107 = 1024;
                  int v108 = v43;
                  __int16 v109 = 1024;
                  int v110 = v44;
                  _os_log_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Received RTCP SR packet PayloadType=%d NTP Seconds=%u RTPTimestamp=%u", buf, 0x34u);
                }
              }
              else if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v85 = *(_DWORD *)(a1 + 28);
                int v86 = *((_DWORD *)v19 + 2);
                int v87 = *((_DWORD *)v19 + 4);
                *(_DWORD *)CMTime buf = 136316674;
                *(void *)&uint8_t buf[4] = v39;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_RTCPProcessSenderReportPacket";
                __int16 v101 = 1024;
                int v102 = 1459;
                __int16 v103 = 1024;
                int v104 = 1459;
                __int16 v105 = 1024;
                unsigned int v106 = v85;
                __int16 v107 = 1024;
                int v108 = v86;
                __int16 v109 = 1024;
                int v110 = v87;
                _os_log_debug_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEBUG, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Received RTCP SR packet PayloadType=%d NTP Seconds=%u RTPTimestamp=%u", buf, 0x34u);
              }
            }
            *(void *)(a1 + 6496) = v92;
            *(_DWORD *)(a1 + 650_Block_object_dispose(&STACK[0x250], 8) = *((_DWORD *)v19 + 2);
            *(_DWORD *)(a1 + 6504) = *((_DWORD *)v19 + 3);
            if (!v91) {
              goto LABEL_224;
            }
            int v74 = _RTPMediaSampleTimeWithReceiveTimestamp(a1, *((_DWORD *)v19 + 4), 0);
            *((_DWORD *)v19 + 4) = v74;
            *(_DWORD *)(a1 + 4824) = v74;
            goto LABEL_188;
          }
          unint64_t v35 = (unint64_t)v19 + v34 + 28;
          uint64_t v36 = v20 & 0x1F;
          unint64_t v37 = (unint64_t)(v19 + 14);
          while (v37 < v35 && v37 >= (unint64_t)(v19 + 14))
          {
            unsigned int v38 = *(_DWORD *)(v37 + 4) | (bswap32(*(_DWORD *)(v37 + 4)) << 8);
            *(_DWORD *)unint64_t v37 = bswap32(*(_DWORD *)v37);
            *(_DWORD *)(v37 + 4) = v38;
            *(int8x16_t *)(v37 + _Block_object_dispose(&STACK[0x250], 8) = vrev32q_s8(*(int8x16_t *)(v37 + 8));
            v37 += 24;
            if (!--v36) {
              goto LABEL_74;
            }
          }
          goto LABEL_224;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTCPTransport_ParsePacket_cold_3();
          }
        }
        return 2147549191;
      case 0xC9u:
        uint64_t v45 = 24 * (v20 & 0x1F);
        if (4 * (unsigned __int16)v19[1] + 4 == v45 + 8)
        {
          *((_DWORD *)v19 + 1) = bswap32(*((_DWORD *)v19 + 1));
          if ((v20 & 0x1F) == 0) {
            goto LABEL_188;
          }
          unint64_t v46 = (unint64_t)v19 + v45 + 8;
          uint64_t v47 = v20 & 0x1F;
          unint64_t v48 = (unint64_t)(v19 + 4);
          while (v48 < v46 && v48 >= (unint64_t)(v19 + 4))
          {
            unsigned int v49 = *(_DWORD *)(v48 + 4) | (bswap32(*(_DWORD *)(v48 + 4)) << 8);
            *(_DWORD *)unint64_t v48 = bswap32(*(_DWORD *)v48);
            *(_DWORD *)(v48 + 4) = v49;
            *(int8x16_t *)(v48 + _Block_object_dispose(&STACK[0x250], 8) = vrev32q_s8(*(int8x16_t *)(v48 + 8));
            v48 += 24;
            if (!--v47) {
              goto LABEL_188;
            }
          }
LABEL_224:
          __break(0x5519u);
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTCPTransport_ParsePacket_cold_4();
          }
        }
        return 2147549191;
      case 0xCAu:
        if ((unsigned __int16)v19[1] - 67 > 0xFFFFFFBD) {
          goto LABEL_88;
        }
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (ErrorLogLevelForModule >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTCPTransport_ParsePacket_cold_5();
          }
        }
        return 2147549191;
      case 0xCBu:
        if (v19[1] == 1)
        {
LABEL_88:
          *((_DWORD *)v19 + 1) = bswap32(*((_DWORD *)v19 + 1));
          goto LABEL_188;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTCPTransport_ParsePacket_cold_6();
          }
        }
        return 2147549191;
      case 0xCCu:
        if ((unint64_t)v19 >= v21) {
          goto LABEL_224;
        }
        unint64_t v50 = (unsigned __int16)v19[1];
        if (v50 > 0x102) {
          goto LABEL_224;
        }
        unint64_t v51 = 4 * v50 + 4;
        *(void *)CMTime buf = *v17;
        *(void *)&uint8_t buf[8] = v51;
        uint64_t v52 = _RTCPProcessCommonHeader((__int16 **)buf);
        if ((v52 & 0x80000000) != 0) {
          return v52;
        }
        uint64_t v53 = *(void *)&buf[8];
        unint64_t v54 = *(void *)&buf[8] - 8;
        if (*(void *)&buf[8] < 8uLL) {
          return 2147549192;
        }
        uint64_t v55 = *(void *)buf;
        unsigned int v56 = *(_DWORD *)(*(void *)buf + 4);
        int v57 = bswap32(v56);
        **(_DWORD **)CMTime buf = bswap32(**(_DWORD **)buf);
        *(_DWORD *)(v55 + 4) = v57;
        if (v57 <= 1297568593)
        {
          if (v57 != 5)
          {
            unsigned __int16 v58 = 21074;
            goto LABEL_113;
          }
          if (v54 <= 3)
          {
            uint64_t v13 = 2147549192;
          }
          else
          {
            unint64_t v54 = v53 - 12;
            uint64_t v13 = 0;
          }
          if (v54)
          {
LABEL_216:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTCPTransport_ParsePacket_cold_7();
              }
            }
            return 2147549191;
          }
LABEL_175:
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
          goto LABEL_188;
        }
        if (v57 == 1380144204)
        {
          if (v54 >= 0x14)
          {
            if (*((unsigned char *)a2 + 8) != 1 || v53 != 28) {
              goto LABEL_216;
            }
            goto LABEL_188;
          }
          uint64_t v13 = 2147549192;
          if (v54) {
            goto LABEL_216;
          }
          goto LABEL_175;
        }
        unsigned __int16 v58 = 21330;
LABEL_113:
        if (v57 != (v58 | 0x4D570000)) {
          goto LABEL_188;
        }
        if (v56 == 1381193549) {
          char v63 = -10;
        }
        else {
          char v63 = -11;
        }
        *((unsigned char *)v19 + 1) = v63;
        uint64_t v64 = *((unsigned int *)a2 + 30);
        unint64_t v65 = (char *)(v90 + v64);
        if (v90 + v64 > v94) {
          goto LABEL_224;
        }
        if (v90 > (unint64_t)v65) {
          goto LABEL_224;
        }
        unint64_t v66 = 1472 - v64;
        if (v66 > v94 - (unint64_t)v65) {
          goto LABEL_224;
        }
        unint64_t v67 = v55 + 8 - (void)v19;
        unint64_t v68 = v66 - v67;
        if (v66 < v67) {
          return 2147549192;
        }
        if (v67 > v51) {
          goto LABEL_224;
        }
        memcpy(v65, v19, v55 + 8 - (void)v19);
        uint64_t v69 = &v65[v67];
        if (v94 < (unint64_t)&v65[v67] || v65 > v69 || v68 > v94 - (unint64_t)&v65[v67]) {
          goto LABEL_224;
        }
        if (v68 < 4) {
          return 2147549192;
        }
        *(_DWORD *)uint64_t v69 = 0;
        unint64_t v70 = (unint64_t)(v69 + 4);
        if ((unint64_t)(v69 + 4) > v94 || (unint64_t)v69 > v70) {
          goto LABEL_224;
        }
        if (!v54) {
          return 2147549192;
        }
        LODWORD(v9_Block_object_dispose(&STACK[0x250], 8) = v68 - 4;
        if ((v54 & 0x80000000) != 0 || (int)v54 > (uint64_t)v54) {
          goto LABEL_224;
        }
        uint64_t v52 = CompressionUtils_DecompressWithZlib();
        if ((v52 & 0x80000000) != 0) {
          return v52;
        }
        uint64_t v71 = (int)v98;
        if (v68 - 4 < (int)v98) {
          goto LABEL_224;
        }
        if (v56 == 1381193549)
        {
          if (v98 < 0x11) {
            return 2147549192;
          }
          *(int8x16_t *)(v69 + 4) = vrev32q_s8(*(int8x16_t *)(v69 + 4));
          *(void *)(a1 + 6496) = v92;
          *(_DWORD *)(a1 + 650_Block_object_dispose(&STACK[0x250], 8) = *((_DWORD *)v69 + 1);
          *(_DWORD *)(a1 + 6504) = *((_DWORD *)v69 + 2);
          *(unsigned char *)(a1 + 617) = v69[20] & 0xF;
          unint64_t v72 = v69 + 21;
          if (v70 > (unint64_t)(v69 + 21) || (unint64_t)v72 > v70 + v71) {
            goto LABEL_224;
          }
          uint64_t v73 = -17;
        }
        else
        {
          if (!v98) {
            return 2147549192;
          }
          unint64_t v72 = v69 + 5;
          uint64_t v73 = -1;
        }
        unint64_t v80 = v73 + v71;
        if (!v80)
        {
LABEL_170:
          unint64_t v81 = (__int16 *)(1472 - *((unsigned int *)a2 + 30));
          int v98 = (int8x8_t *)v81;
          if ((unint64_t)v81 > v94 - (unint64_t)v65) {
            goto LABEL_224;
          }
          _RTCPFinalizePacket((unint64_t)v65, (unint64_t)v81, (unint64_t *)&v98, v72 - v65);
          if ((unint64_t)(v65 + 1036) > v94) {
            goto LABEL_224;
          }
          *((_WORD *)v65 + 1) = bswap32(*((unsigned __int16 *)v65 + 1)) >> 16;
          *((_DWORD *)a2 + 30) += v98;
          if ((unint64_t)v65 >= v94) {
            goto LABEL_224;
          }
          const char *v17 = (__int16 *)v65;
          goto LABEL_188;
        }
        while (v80 >= 0xC)
        {
          *(_DWORD *)unint64_t v72 = bswap32(*(_DWORD *)v72);
          *((_WORD *)v72 + 3) = bswap32(*((unsigned __int16 *)v72 + 3)) >> 16;
          *((_WORD *)v72 + 4) = bswap32(*((unsigned __int16 *)v72 + 4)) >> 16;
          v72 += 12;
          ++*(_DWORD *)v69;
          v80 -= 12;
          if (!v80) {
            goto LABEL_170;
          }
        }
        return 2147549192;
      case 0xCDu:
        int v59 = v20 & 0x1F;
        if (v59 == 4 || v59 == 3)
        {
          if (v19[1] != 4) {
            goto LABEL_192;
          }
LABEL_110:
          *(int8x16_t *)(v19 + 2) = vrev32q_s8(*(int8x16_t *)(v19 + 2));
          goto LABEL_188;
        }
        if (v59 == 1)
        {
          int v60 = (unsigned __int16)v19[1];
          if ((v60 - 3) <= 0xFF)
          {
            if ((unint64_t)v19 < v21)
            {
              *(int8x8_t *)(v19 + 2) = vrev32_s8(*(int8x8_t *)(v19 + 2));
              uint64_t v61 = (v60 - 2);
              int v62 = (unsigned __int16 *)(v19 + 6);
              while ((unint64_t)v62 < v21 && v62 >= (unsigned __int16 *)v19 + 6)
              {
                unsigned __int16 *v62 = bswap32(*v62) >> 16;
                v62[1] = bswap32(v62[1]) >> 16;
                v62 += 2;
                if (!--v61) {
                  goto LABEL_188;
                }
              }
            }
            goto LABEL_224;
          }
        }
LABEL_192:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTCPTransport_ParsePacket_cold_12();
          }
        }
        return 2147549191;
      case 0xCEu:
        switch(v20 & 0x1F)
        {
          case 1u:
            if (v19[1] != 2) {
              goto LABEL_213;
            }
            *(int8x8_t *)(v19 + 2) = vrev32_s8(*(int8x8_t *)(v19 + 2));
            goto LABEL_188;
          case 2u:
            if (v19[1] != 3) {
              goto LABEL_213;
            }
            *(int8x8_t *)(v19 + 2) = vrev32_s8(*(int8x8_t *)(v19 + 2));
            *((_DWORD *)v19 + 3) = bswap32(*((_DWORD *)v19 + 3));
            goto LABEL_188;
          case 4u:
            if (v19[1] != 4) {
              goto LABEL_213;
            }
            *(int8x8_t *)(v19 + 2) = vrev32_s8(*(int8x8_t *)(v19 + 2));
            *(void *)(v19 + 6) = bswap32(*((_DWORD *)v19 + 3));
            goto LABEL_188;
          case 5u:
          case 6u:
            if (v19[1] != 4) {
              goto LABEL_213;
            }
            goto LABEL_110;
          case 0xFu:
            if ((unint64_t)v19 >= v21) {
              goto LABEL_224;
            }
            unint64_t v75 = (unsigned __int16)v19[1];
            if (v75 > 0x102) {
              goto LABEL_224;
            }
            int v98 = (int8x8_t *)*v17;
            unint64_t v99 = 4 * v75 + 4;
            uint64_t v52 = _RTCPProcessCommonHeader((__int16 **)&v98);
            if ((v52 & 0x80000000) != 0) {
              return v52;
            }
            unint64_t v76 = v99;
            unint64_t v77 = v99 - 12;
            if (v99 < 0xC) {
              return 2147549192;
            }
            int v78 = v98;
            int8x8_t *v98 = vrev32_s8(*v98);
            unsigned int v79 = bswap32(v78[1].u32[0]);
            v78[1].i32[0] = v79;
            if (v79 == 5)
            {
              if (v77 >= 4)
              {
                uint64_t v13 = 0;
                v78[1].i32[1] = bswap32(v78[1].u32[1]);
                unint64_t v77 = v76 - 16;
                goto LABEL_183;
              }
              char v84 = 0;
              uint64_t v13 = 2147549192;
            }
            else
            {
              if (v79 != 6)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  uint64_t v82 = VRTraceErrorLogLevelToCSTR();
                  unsigned int v83 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)CMTime buf = 136316162;
                    *(void *)&uint8_t buf[4] = v82;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "_RTCPProcessPSFBAlfbPacket";
                    __int16 v101 = 1024;
                    int v102 = 1393;
                    __int16 v103 = 1024;
                    int v104 = 1393;
                    __int16 v105 = 1024;
                    unsigned int v106 = v79;
                    _os_log_error_impl(&dword_1E1EA4000, v83, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Unsupported PSFB ALFB app type=%u", buf, 0x28u);
                  }
                }
                uint64_t v13 = 0;
                goto LABEL_183;
              }
              if (v77 >= 8)
              {
                uint64_t v13 = 0;
                v78[1].i32[1] = bswap32(v78[1].u32[1]);
                v78[2].i16[0] = bswap32(v78[2].u16[0]) >> 16;
                unint64_t v77 = v76 - 20;
LABEL_183:
                char v84 = 1;
                goto LABEL_186;
              }
              char v84 = 0;
              uint64_t v13 = 2147549187;
            }
LABEL_186:
            if (!v77)
            {
              if ((v84 & 1) == 0) {
                return v13;
              }
              goto LABEL_188;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTCPTransport_ParsePacket_cold_11();
              }
            }
            return 2147549191;
          default:
LABEL_213:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTCPTransport_ParsePacket_cold_10();
              }
            }
            return 2147549191;
        }
      default:
        goto LABEL_188;
    }
  }
}

uint64_t RTCPPacketByteSize(uint64_t a1)
{
  return 4 * *(unsigned __int16 *)(a1 + 2) + 4;
}

uint64_t RTCPPacketFIREntryCount(uint64_t a1)
{
  return (2 * *(unsigned __int8 *)(a1 + 2) - 2) & 0xFE;
}

uint64_t _RTCPPacketCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147549187;
  unint64_t v4 = (const __CFAllocator **)CheckInHandleDebug();
  if (!v4) {
    return 2147549186;
  }
  unint64_t v5 = (unint64_t)v4;
  unint64_t v6 = _RTCPPacketCreate(v4);
  unsigned int v14 = v6;
  if (!v6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      uint64_t v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v16 = v12;
        __int16 v17 = 2080;
        long long v18 = "_RTCPPacketCallback";
        __int16 v19 = 1024;
        int v20 = 2412;
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Failed to allocate RTCP packet list", buf, 0x1Cu);
      }
    }
    goto LABEL_7;
  }
  unint64_t v7 = v6;
  uint64_t v8 = _RTCPParseVTPPacket(v5, a2, (uint64_t)v6);
  uint64_t v9 = v8;
  if ((v8 & 0x80000000) != 0)
  {
    uint64_t v3 = 2149711929;
    if (v8 == -2145255367) {
      goto LABEL_7;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTCPPacketCallback_cold_1();
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v5 + 10664);
    if (v10) {
      (*(void (**)(uint64_t, void, const __CFAllocator **))(v10 + 16))(v10, *(void *)(v5 + 10656), v7);
    }
  }
  uint64_t v3 = v9;
LABEL_7:
  _RTCPPacketForget(v5, (uint64_t)&v14);
  CheckOutHandleDebug();
  return v3;
}

const __CFAllocator **_RTCPPacketCreate(const __CFAllocator **result)
{
  if (result)
  {
    uint64_t result = (const __CFAllocator **)VCBoundsSafety_AllocatorAllocate(result[1330], 1640, 0);
    if (result)
    {
      if ((unint64_t)(result + 205) > v1
        || (*((unsigned char *)result + 1620) = 0,
            result[13] = 0,
            result[14] = 0,
            result[12] = 0,
            (unint64_t)result >= v1))
      {
        __break(0x5519u);
      }
    }
  }
  return result;
}

uint64_t _RTCPParseVTPPacket(unint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[21] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&v8[14] = unk_1E259DDC0;
  *(_OWORD *)&v8[16] = xmmword_1E259DDD0;
  memset(&v8[18], 170, 24);
  memset(v8, 170, 112);
  VCPacketInitialize((uint64_t)v8);
  VCGetVCPacketWithVTPPacket(a2, (uint64_t)v8);
  uint64_t v6 = _RTCPParseVCPacket(a1, (uint64_t)v8, a3);
  VCPacketInvalidate(v8);
  return v6;
}

void _RTCPPacketForget(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = *(void **)a2;
      if (*(void *)a2)
      {
        unint64_t v5 = (const void *)v3[12];
        if (v5)
        {
          CFRelease(v5);
          *(void *)(*(void *)a2 + 96) = 0;
          uint64_t v3 = *(void **)a2;
        }
        CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 10640), v3);
        *(void *)a2 = 0;
      }
    }
  }
}

unint64_t RTCPRegisterPacketCallback(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1 == 0xFFFFFFFFLL)
  {
    uint64_t v8 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTCPRegisterPacketCallback_cold_1();
      }
    }
    return v8;
  }
  unint64_t result = CheckInHandleDebug();
  if (!result)
  {
    uint64_t v8 = 2147549186;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        RTCPRegisterPacketCallback_cold_2();
        return 2147549186;
      }
    }
    return v8;
  }
  uint64_t v7 = result;
  if (*(void *)(result + 10664))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTCPRegisterPacketCallback_cold_4();
      }
    }
    CheckOutHandleDebug();
    return 2147549233;
  }
  if (result < result + 27616)
  {
    uint64_t v9 = _Block_copy(a3);
    *(void *)(v7 + 10664) = v9;
    if (v9)
    {
      *(void *)(v7 + 10656) = a2;
      unint64_t v10 = *(unsigned int *)(v7 + 8);
      if (v10 > 0x3FF)
      {
        if (*(void *)(v7 + 11112))
        {
          uint64_t v8 = _RTPEnsureTransportStreamsActivated(v7);
        }
        else
        {
          uint64_t v8 = 2147549226;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v14 = VRTraceErrorLogLevelToCSTR();
            BOOL v15 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              int v16 = *(_DWORD *)(v7 + 8);
              int v17 = 136316162;
              uint64_t v18 = v14;
              __int16 v19 = 2080;
              int v20 = "RTCPRegisterPacketCallback";
              __int16 v21 = 1024;
              int v22 = 2468;
              __int16 v23 = 2048;
              uint64_t v24 = a1;
              __int16 v25 = 1024;
              int v26 = v16;
              _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, " [%s] %s:%d RTPHandle[%p], Socket[%d] is invalid", (uint8_t *)&v17, 0x2Cu);
              uint64_t v8 = 2147549226;
            }
          }
        }
      }
      else
      {
        *(_OWORD *)(v7 + 10784) = 0u;
        unint64_t v11 = v7 + 10672;
        *(_OWORD *)(v7 + 1076_Block_object_dispose(&STACK[0x250], 8) = 0u;
        *(_OWORD *)(v7 + 10752) = 0u;
        *(_OWORD *)(v7 + 10736) = 0u;
        *(_OWORD *)(v7 + 10720) = 0u;
        *(_OWORD *)(v7 + 10704) = 0u;
        *(_OWORD *)(v7 + 1068_Block_object_dispose(&STACK[0x250], 8) = 0u;
        *(_OWORD *)(v7 + 10672) = 0u;
        unint64_t result = __darwin_check_fd_set_overflow(v10, (const void *)(v7 + 10672), 0);
        if (result)
        {
          uint64_t v12 = (_DWORD *)(v11 + ((v10 >> 3) & 0x1FFFFFFC));
          if ((unint64_t)v12 >= v7 + 10800 || (unint64_t)v12 < v11) {
            goto LABEL_35;
          }
          *v12 |= 1 << v10;
        }
        uint64_t v8 = 0;
        *(_DWORD *)(v7 + 1064_Block_object_dispose(&STACK[0x250], 8) = VTP_RegisterPacketCallback((_OWORD *)(v7 + 10672), a1, &__block_literal_global_17);
      }
    }
    else
    {
      uint64_t v8 = 2147549188;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          RTCPRegisterPacketCallback_cold_3();
          uint64_t v8 = 2147549188;
        }
      }
    }
    CheckOutHandleDebug();
    return v8;
  }
LABEL_35:
  __break(0x5519u);
  return result;
}

uint64_t __RTCPRegisterPacketCallback_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _RTCPPacketCallback(a3, a4);
}

void _RTCPUnregisterPacketCallback(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 10664);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 10648) != -1)
    {
      VTP_UnregisterPacketCallback(*(_DWORD *)(a1 + 10648));
      *(_DWORD *)(a1 + 1064_Block_object_dispose(&STACK[0x250], 8) = -1;
      uint64_t v2 = *(const void **)(a1 + 10664);
    }
    _Block_release(v2);
    *(void *)(a1 + 10664) = 0;
    *(void *)(a1 + 10656) = 0;
  }
}

uint64_t RTCPUnregisterPacketCallback()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2147549186;
  }
  if (*(void *)(v0 + 10664))
  {
    _RTCPUnregisterPacketCallback(v0);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTCPUnregisterPacketCallback_cold_1();
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPRecvRTCP(uint64_t a1, void *a2)
{
  v12[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147549186;
  uint64_t v4 = CheckInHandleDebug();
  if (v4)
  {
    unint64_t v5 = (void *)v4;
    if (v4 == 0xFFFFFFFFLL) {
      return 2147549190;
    }
    if (!*(void *)(v4 + 11112))
    {
      v12[0] = 0;
      if ((VTP_Recvfrom(*(_DWORD *)(v4 + 8), v12) & 0x80000000) != 0)
      {
        uint64_t v3 = *__error() | 0xC0010000;
LABEL_19:
        RTCPCleanupPacketList((uint64_t)a2);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPRecvRTCP_cold_1();
          }
        }
        goto LABEL_22;
      }
      uint64_t v3 = _RTCPParseVTPPacket((unint64_t)v5, (uint64_t)v12[0], (uint64_t)a2);
      VTP_ReleasePacket(v12);
      if ((v3 & 0x80000000) != 0) {
        goto LABEL_19;
      }
LABEL_22:
      CheckOutHandleDebug();
      return v3;
    }
    v12[0] = 0;
    uint64_t v3 = _RTPEnsureTransportStreamsActivated(v4);
    if ((v3 & 0x80000000) == 0)
    {
      uint64_t v6 = v5 + 1397;
      uint64_t v7 = (void *)v5[1397];
      v12[0] = v7;
      if (v7)
      {
LABEL_10:
        uint64_t v10 = v7[204];
        *uint64_t v6 = v10;
        if (!v10) {
          v5[1398] = v6;
        }
        memcpy(a2, v7, 0x668uLL);
        v7[12] = 0;
LABEL_13:
        RTCPCleanupPacketList((uint64_t)v7);
        _RTCPPacketForget((uint64_t)v5, (uint64_t)v12);
        if ((v3 & 0x80000000) != 0) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
      uint64_t v8 = v5[1389];
      uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 48);
      if (!v9)
      {
        uint64_t v7 = 0;
        uint64_t v3 = 4294954514;
        goto LABEL_13;
      }
      uint64_t v3 = v9(v8);
      if ((v3 & 0x80000000) == 0)
      {
        uint64_t v7 = (void *)*v6;
        v12[0] = *(void **)v6;
        goto LABEL_10;
      }
    }
    uint64_t v7 = 0;
    goto LABEL_13;
  }
  return v3;
}

uint64_t RTPGetLatestRTCPTimestamp(uint64_t a1, void *a2)
{
  uint64_t v2 = 2147549185;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *a2 = *(void *)(v4 + 168);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147549186;
    }
  }
  return v2;
}

uint64_t RTCPComputeRoundTripTimeMiddle32(uint64_t a1, unint64_t a2)
{
  if (!*(_DWORD *)(a1 + 20)) {
    return 0;
  }
  int v3 = NTPToMiddle32(a2);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  unsigned int v5 = v3 - *(_DWORD *)(a1 + 16);
  BOOL v6 = v5 >= v4;
  unsigned int v7 = v5 - v4;
  if (v6) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t RTCPInitializeReceptionReportBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  _RTCPInitializeReceptionReportBlock(v3, a2);
  CheckOutHandleDebug();
  return 0;
}

void RTCPCleanupPacketList(uint64_t a1)
{
  if (a1)
  {
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    uint64_t v2 = *(const void **)(a1 + 96);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 96) = 0;
    }
  }
}

uint64_t _RTPTransportStreamRTCPCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v17 = 0;
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = CheckInHandleDebug();
    if (v3)
    {
      unint64_t v4 = v3;
      unint64_t v5 = v3 + 27616;
      BOOL v6 = (os_log_t *)MEMORY[0x1E4F47A50];
      while (1)
      {
        unsigned int v7 = _RTCPPacketCreate((const __CFAllocator **)v4);
        int v17 = v7;
        if (!v7) {
          break;
        }
        uint64_t v8 = _RTCPParseVCPacket(v4, v2, (uint64_t)v7);
        uint64_t v9 = v8;
        if ((v8 & 0x80000000) != 0)
        {
          if (v8 != -2145255367 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v11 = VRTraceErrorLogLevelToCSTR();
            uint64_t v12 = *v6;
            if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136315906;
              uint64_t v19 = v11;
              __int16 v20 = 2080;
              __int16 v21 = "_RTPTransportStreamRTCPCallback";
              __int16 v22 = 1024;
              int v23 = 2682;
              __int16 v24 = 1024;
              int v25 = v9;
              _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d RTCP error[%x]", buf, 0x22u);
            }
          }
        }
        else
        {
          uint64_t v10 = *(void *)(v4 + 10664);
          if (v10)
          {
            (*(void (**)(uint64_t, void, const __CFAllocator **))(v10 + 16))(v10, *(void *)(v4 + 10656), v17);
          }
          else
          {
            uint64_t v13 = v17;
            v17[204] = 0;
            **(void **)(v4 + 11184) = v13;
            *(void *)(v4 + 11184) = v17 + 204;
            int v17 = 0;
          }
        }
        if (v4 >= v5) {
          goto LABEL_28;
        }
        _RTCPPacketForget(v4, (uint64_t)&v17);
        uint64_t v2 = *(void *)(v2 + 160);
        if (!v2) {
          goto LABEL_15;
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        int v16 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v19 = v15;
          __int16 v20 = 2080;
          __int16 v21 = "_RTPTransportStreamRTCPCallback";
          __int16 v22 = 1024;
          int v23 = 2671;
          _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Failed to allocate RTCP packet", buf, 0x1Cu);
        }
      }
      if (v4 >= v5) {
LABEL_28:
      }
        __break(0x5519u);
      uint64_t v9 = 2147549187;
LABEL_15:
      _RTCPPacketForget(v4, (uint64_t)&v17);
      CheckOutHandleDebug();
    }
    else
    {
      uint64_t v9 = 2147549186;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          _RTPTransportStreamRTCPCallback_cold_2();
          return 2147549186;
        }
      }
    }
  }
  else
  {
    uint64_t v9 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPTransportStreamRTCPCallback_cold_1();
      }
    }
  }
  return v9;
}

uint64_t _RTCPParseVCPacket(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int v30 = -1431655766;
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 2147549195;
    }
    VRTraceErrorLogLevelToCSTR();
    uint64_t v9 = 2147549195;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _RTCPParseVCPacket_cold_1();
    }
    return v9;
  }
  dataPointerOut = 0;
  size_t lengthAtOffsetOut = 0;
  OSStatus DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)a2, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (DataPointer)
  {
    int v7 = DataPointer;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTCPParseVCPacket_cold_6();
      }
    }
    if (v7 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = -v7;
    }
    return v8 | (v7 << 31) | 0x50010000u;
  }
  size_t v10 = lengthAtOffsetOut;
  if (lengthAtOffsetOut < 4) {
    return 2147549192;
  }
  *(void *)(a3 + 104) = dataPointerOut;
  *(void *)(a3 + 112) = v10;
  uint64_t result = MicroToNTP(*(double *)(a2 + 128));
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 120) = 0;
  *(unsigned char *)(a3 + 1621) = *(unsigned char *)(a2 + 36);
  *(void *)(a3 + 1624) = *(void *)(a2 + 40);
  uint64_t v12 = *(unsigned __int8 *)(a2 + 34);
  if (*(unsigned char *)(a2 + 34))
  {
    *(unsigned char *)(a3 + 1620) = v12;
    if (v12 > 0xC) {
      goto LABEL_60;
    }
    uint64_t result = (uint64_t)memcpy((void *)(a3 + 1596), (const void *)(a2 + 10), 2 * v12);
  }
  uint64_t v14 = *(unsigned __int16 **)(a3 + 104);
  uint64_t v13 = *(void *)(a3 + 112);
  if (v13 || !v14)
  {
    unsigned int v15 = *v14;
    if ((v15 & 0xFEE0) != 0xC880 && (v15 & 0xFF80) != 0xCC80)
    {
      int v16 = (unsigned __int8 *)(a1 + 10460);
      if (!*(unsigned char *)(a1 + 10460)
        || (v15 >> 8) - 192 > 0xE
        || ((1 << (BYTE1(v15) + 64)) & 0x7003) == 0
        || (v15 & 0xC0) != 0x80)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v17 = VRTraceErrorLogLevelToCSTR();
          uint64_t v18 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            unsigned int v26 = *v14;
            int v27 = *v16;
            *(_DWORD *)CMTime buf = 136317186;
            uint64_t v32 = v17;
            __int16 v33 = 2080;
            uint64_t v34 = "_RTCPIsValidPacket";
            __int16 v35 = 1024;
            int v36 = 2316;
            __int16 v37 = 1024;
            int v38 = 2316;
            __int16 v39 = 1024;
            unsigned int v40 = v26 >> 8;
            __int16 v41 = 1024;
            int v42 = v26 >> 6;
            __int16 v43 = 1024;
            int v44 = v26 & 0x1F;
            __int16 v45 = 1024;
            int v46 = (v26 >> 5) & 1;
            __int16 v47 = 1024;
            int v48 = v27;
            _os_log_error_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP Packet(packetType=%d, version=%d, count=%d, padding=%d) useReducedSizePackets=%d", buf, 0x40u);
          }
        }
        uint64_t v9 = 2147549191;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTCPParseVCPacket_cold_5();
          }
        }
        return v9;
      }
    }
    if ((v13 & 0x80000000) == 0 && (int)v13 <= v13)
    {
      uint64_t result = SRTCPVerifyAuthenticationTag((_DWORD *)(a1 + 8400), *(char **)(a3 + 104), v13, &v30);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v9 = result;
        if (result != -2145255368)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _RTCPParseVCPacket_cold_4();
            }
          }
          return v9;
        }
      }
      if (v30 <= 7)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTCPParseVCPacket_cold_2();
          }
        }
        return 2147549192;
      }
      uint64_t v19 = (v30 - 8);
      *(_DWORD *)CMTime buf = v30 - 8;
      if (v30 == 8)
      {
        int v20 = 8;
LABEL_56:
        int v30 = v20;
        uint64_t v9 = _RTCPTransport_ParsePacket(a1, (uint64_t *)a3, v20);
        if ((v9 & 0x80000000) == 0)
        {
          int v25 = *(const void **)a2;
          if (*(void *)a2) {
            int v25 = CFRetain(v25);
          }
          *(void *)(a3 + 96) = v25;
          *(void *)(a1 + 16_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a2 + 128);
        }
        return v9;
      }
      unint64_t v22 = *(void *)(a3 + 104);
      uint64_t v21 = *(void *)(a3 + 112);
      unint64_t v23 = v22 + 8;
      if (v22 + 8 <= v22 + v21 && v22 <= v23 && v21 - 8 >= v19)
      {
        uint64_t v24 = SRTCPDecrypt(a1 + 8400, v23, v19, (int *)buf);
        if ((v24 & 0x80000000) != 0)
        {
          uint64_t v9 = v24;
          if (v24 != -2145255368)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTCPParseVCPacket_cold_3();
              }
            }
            return v9;
          }
        }
        int v20 = *(_DWORD *)buf + 8;
        goto LABEL_56;
      }
    }
  }
LABEL_60:
  __break(0x5519u);
  return result;
}

uint64_t _RTCPAddCustomReport(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  size_t v6 = a1[1];
  unint64_t v7 = v6;
  MEMORY[0x1F4188790](a1);
  int v8 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v6)
  {
    memset(&v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], 170, v6);
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_44;
    }
  }
  if (*(_DWORD *)a3 != 1297568338)
  {
    uint64_t v9 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
    if (*(_DWORD *)a3 != 1297568594) {
      goto LABEL_17;
    }
    unint64_t v7 = v6 - 17;
    if (v6 >= 0x11)
    {
      double v10 = micro();
      unint64_t v11 = MicroToNTP(v10);
      LODWORD(v12) = *(_DWORD *)(a2 + 312);
      double v13 = (double)v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 700);
      double v14 = (double)v12;
      double v15 = NTPToMicro(*(void *)(a2 + 304));
      unsigned int v16 = _RTPSendTimestampWithMediaSampleTime(a2, (v13 + v14 * (v10 - v15)));
      *(_DWORD *)int v8 = bswap32(HIDWORD(v11));
      *((_DWORD *)v8 + 1) = bswap32(v11);
      unsigned int v17 = bswap32(*(_DWORD *)(a2 + 204));
      *((_DWORD *)v8 + 2) = bswap32(v16);
      *((_DWORD *)v8 + 3) = v17;
      v8[16] = v8[16] & 0xF0 | *(unsigned char *)(a2 + 616) & 0xF;
      int v18 = NTPToMiddle32(v11);
      uint64_t v19 = *(unsigned __int8 *)(a2 + 616);
      int v20 = (_DWORD *)(a2 + 620 + 4 * v19);
      if ((unint64_t)v20 >= a2 + 684) {
        goto LABEL_44;
      }
      if ((unint64_t)v20 < a2 + 620) {
        goto LABEL_44;
      }
      _DWORD *v20 = v18;
      *(unsigned char *)(a2 + 616) = (v19 + 1) & 0xF;
      uint64_t v9 = v8 + 17;
      if (v8 + 17 > &v8[v6] || v8 > v9) {
        goto LABEL_44;
      }
      goto LABEL_17;
    }
    return 2147549187;
  }
  if (!v6) {
    return 2147549187;
  }
  double v21 = micro();
  unint64_t v22 = MicroToNTP(v21);
  uint64_t v9 = v8 + 1;
  if (v8 + 1 > &v8[v6]) {
    goto LABEL_44;
  }
  *int v8 = *v8 & 0xF0 | *(unsigned char *)(a2 + 616) & 0xF;
  int v23 = NTPToMiddle32(v22);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 616);
  int v25 = (_DWORD *)(a2 + 620 + 4 * v24);
  if ((unint64_t)v25 >= a2 + 684) {
    goto LABEL_44;
  }
  if ((unint64_t)v25 < a2 + 620) {
    goto LABEL_44;
  }
  *int v25 = v23;
  *(unsigned char *)(a2 + 616) = (v24 + 1) & 0xF;
  if (v8 > v9) {
    goto LABEL_44;
  }
  unint64_t v7 = v6 - 1;
LABEL_17:
  uint64_t v26 = *(unsigned int *)(a3 + 16);
  if (v26)
  {
    unint64_t v27 = (unint64_t)&v9[v7];
    uint64_t v28 = v7 - 12 * (v26 - 1) - 12;
    uint64_t v29 = *(void *)(a3 + 8) + 16;
    do
    {
      BOOL v30 = v7 >= 0xC;
      v7 -= 12;
      if (!v30) {
        return 2147549187;
      }
      *(_DWORD *)uint64_t v9 = bswap32(*(_DWORD *)(v29 - 16));
      char v31 = *(unsigned char *)(v29 + 16);
      *((_WORD *)v9 + 2) = *((_WORD *)v9 + 2) & 0xFFF0 | v31 & 0xF;
      *((_WORD *)v9 + 3) = bswap32(1000 * *(_DWORD *)(v29 + 8));
      v9[10] = *(_DWORD *)(v29 - 12);
      *((_WORD *)v9 + 4) = bswap32(*(unsigned __int16 *)(v29 - 4)) >> 16;
      int v32 = 16 * *(_DWORD *)v29;
      if (HIWORD(*(_DWORD *)v29)) {
        LOWORD(v32) = -16;
      }
      *((_WORD *)v9 + 2) = v32 & 0xFFF0 | v31 & 0xF;
      unsigned int v33 = *(_DWORD *)(v29 + 12);
      if (v33 >= 0xFF) {
        LOBYTE(v33) = -1;
      }
      v9[11] = v33;
      if ((unint64_t)(v9 + 12) > v27 || v9 > v9 + 12) {
        goto LABEL_44;
      }
      v29 += 36;
      v9 += 12;
      --v26;
    }
    while (v26);
    unint64_t v7 = v28;
  }
  int64_t v34 = v6 - v7;
  if (v6 < v7) {
LABEL_44:
  }
    __break(0x5519u);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v36 = a1[1];
  int v43 = v36;
  if ((v34 & 0x80000000) != 0 || (int)v34 > v34 || (v36 & 0x80000000) != 0 || (int)v36 > v36) {
    goto LABEL_44;
  }
  uint64_t result = CompressionUtils_CompressWithZLib();
  if ((result & 0x80000000) == 0)
  {
    unint64_t v37 = a1[1];
    unint64_t v38 = *a1 + v37;
    unint64_t v39 = *a1 + v43;
    BOOL v30 = v38 >= v39;
    unint64_t v40 = v38 - v39;
    if (!v30) {
      goto LABEL_44;
    }
    if (*a1 > v39) {
      goto LABEL_44;
    }
    unint64_t v41 = v37 - v43;
    if (v41 > v40) {
      goto LABEL_44;
    }
    uint64_t result = 0;
    *a1 = v39;
    a1[1] = v41;
  }
  return result;
}

unint64_t _RTCPFinalizePacket(unint64_t result, unint64_t a2, unint64_t *a3, unint64_t a4)
{
  if (result + 4 <= result + a2)
  {
    unsigned int v4 = a4 + 3;
    unint64_t v5 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    *(_WORD *)uint64_t result = *(_WORD *)result & 0xFFDF | (32 * (v5 != a4));
    if (v5 == a4)
    {
LABEL_8:
      uint64_t v6 = 0;
      *a3 = a4;
      *(_WORD *)(result + 2) = bswap32((v4 >> 2) - 1) >> 16;
      return v6;
    }
    if (v5 > a2) {
      return 2147549187;
    }
    unint64_t v7 = (unsigned char *)(v5 + result - 1);
    if ((unint64_t)v7 < result + a2 && (unint64_t)v7 >= result)
    {
      unsigned char *v7 = v5 - a4;
      a4 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_8;
    }
  }
  __break(0x5519u);
  return result;
}

unint64_t _RTCPAddPSFBAlfbPacket(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = 2147549187;
  if (a3 < 4) {
    return v5;
  }
  *(_WORD *)a2 = *(_WORD *)a2 & 0x20 | 0xCE8F;
  unint64_t v6 = a3 - 16;
  if (a3 - 16 > 0xFFFFFFFFFFFFFFF3) {
    return v5;
  }
  unsigned int v7 = *a5;
  unsigned int v8 = bswap32(*(_DWORD *)(a1 + 4832));
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 200));
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v8;
  *(_DWORD *)(a2 + 12) = bswap32(v7);
  if (v7 == 5)
  {
    if (v6 >= 4)
    {
      *(_DWORD *)(a2 + 16) = bswap32(a5[2]);
      unint64_t v9 = 20;
      goto LABEL_9;
    }
    return v5;
  }
  if (v7 != 6)
  {
    uint64_t v5 = 2147549191;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        _RTCPAddPSFBAlfbPacket_cold_1();
        return 2147549191;
      }
    }
    return v5;
  }
  if (v6 < 8) {
    return v5;
  }
  *(unsigned char *)(a2 + 22) = *(unsigned char *)(*((void *)a5 + 1) + 6);
  *(unsigned char *)(a2 + 23) = *(unsigned char *)(*((void *)a5 + 1) + 7);
  *(_DWORD *)(a2 + 16) = bswap32(**((_DWORD **)a5 + 1));
  *(_WORD *)(a2 + 20) = bswap32(*(unsigned __int16 *)(*((void *)a5 + 1) + 4)) >> 16;
  unint64_t v9 = 24;
LABEL_9:

  return _RTCPFinalizePacket(a2, a3, a4, v9);
}

uint64_t _RTCPProcessCommonHeader(__int16 **a1)
{
  uint64_t result = 2147549192;
  unint64_t v3 = (unint64_t)a1[1];
  if (v3 >= 4)
  {
    unsigned int v4 = *a1;
    __int16 v5 = **a1;
    if ((v5 & 0xC0) != 0x80) {
      return 2147549193;
    }
    uint64_t v6 = 4 * (unsigned __int16)v4[1];
    if (v3 >= v6 + 4)
    {
      if ((v5 & 0x20) != 0)
      {
        unint64_t v7 = *((unsigned __int8 *)v4 + (v6 | 3));
        if (v3 - 4 < v7) {
          return 2147549191;
        }
        BOOL v8 = v3 >= v7;
        v3 -= v7;
        if (!v8) {
          goto LABEL_14;
        }
        a1[1] = (__int16 *)v3;
      }
      unint64_t v9 = (char *)v4 + v3;
      double v10 = (char *)(v4 + 2);
      if (v10 > v9)
      {
LABEL_14:
        __break(0x5519u);
        return result;
      }
      uint64_t result = 0;
      *a1 = (__int16 *)v10;
      a1[1] = (__int16 *)(v3 - 4);
    }
  }
  return result;
}

void OUTLINED_FUNCTION_5_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x22u);
}

uint64_t VCFBOUtils_ObjectCreate(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a2) {
    return (a5 << 16) | 0x80000001;
  }
  int v7 = CMDerivedObjectCreate();
  if (v7)
  {
    if (v7 >= 0) {
      int v10 = v7;
    }
    else {
      int v10 = -v7;
    }
    return v10 | (a5 << 16) | 0xD0000000;
  }
  else
  {
    uint64_t v8 = 0;
    *a2 = 0;
  }
  return v8;
}

BOOL VCFBOUtils_IsKindOfClass(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return CMBaseObjectGetVTable() == a2;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  uint64_t v3 = VRTraceErrorLogLevelToCSTR();
  unsigned int v4 = *MEMORY[0x1E4F47A50];
  BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    VCFBOUtils_IsKindOfClass_cold_1(v3, v4);
    return 0;
  }
  return result;
}

void OUTLINED_FUNCTION_6_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void OUTLINED_FUNCTION_7_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x26u);
}

void sub_1E1FA938C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E1FA9D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _VCAudioStreamSourceContextTransportCompare(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v2 == v3;
  unsigned int v5 = 2 * (v2 >= v3);
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t _VCAudioStreamSyncDelegateCompare(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v2 == v3;
  unsigned int v5 = 2 * (v2 >= v3);
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

void _VCAudioStream_NWConnectionNotificationHandler(uint64_t a1, unsigned char *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (+[VCAudioStream isVoLTE:](VCAudioStream, "isVoLTE:", objc_msgSend((id)objc_msgSend((id)a1, "defaultStreamConfig"), "audioStreamMode")))
  {
    if (a1)
    {
      if (a2)
      {
        if (*a2 == 2)
        {
          if (a2[2] == 2)
          {
            [(id)a1 updateRateAdaptationWithNetworkNotification:a2];
            switch(*((_DWORD *)a2 + 1))
            {
              case 0:
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  uint64_t v4 = VRTraceErrorLogLevelToCSTR();
                  unsigned int v5 = *MEMORY[0x1E4F47A50];
                  uint64_t v6 = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v7 = *((void *)a2 + 2);
                      int v8 = a2[60];
                      int v9 = *(__int16 *)(a2 + 61);
                      int v10 = *(__int16 *)(a2 + 63);
                      int v11 = (char)a2[65];
                      int v12 = a2[66];
                      int v13 = a2[68];
                      int v14 = *((unsigned __int16 *)a2 + 35);
                      int v15 = a2[69];
                      int v16 = a2[67];
                      *(_DWORD *)uint64_t v64 = 136318466;
                      *(void *)&v64[4] = v4;
                      *(_WORD *)&v64[12] = 2080;
                      *(void *)&v64[14] = "_VCAudioStream_LogNWConnectionNotification";
                      *(_WORD *)&v64[22] = 1024;
                      LODWORD(v65) = 2475;
                      WORD2(v65) = 2048;
                      *(void *)((char *)&v65 + 6) = a1;
                      HIWORD(v65) = 2048;
                      *(void *)&long long v66 = v7;
                      WORD4(v66) = 1024;
                      *(_DWORD *)((char *)&v66 + 10) = v8;
                      HIWORD(v66) = 1024;
                      LODWORD(v67) = v9;
                      WORD2(v67) = 1024;
                      *(_DWORD *)((char *)&v67 + 6) = v10;
                      WORD5(v67) = 1024;
                      HIDWORD(v67) = v11;
                      LOWORD(v6_Block_object_dispose(&STACK[0x250], 8) = 1024;
                      *(_DWORD *)((char *)&v68 + 2) = v12;
                      HIWORD(v6_Block_object_dispose(&STACK[0x250], 8) = 1024;
                      LODWORD(v69) = v13;
                      WORD2(v69) = 1024;
                      *(_DWORD *)((char *)&v69 + 6) = v14;
                      WORD5(v69) = 1024;
                      HIDWORD(v69) = v15;
                      LOWORD(v70) = 1024;
                      *(_DWORD *)((char *)&v70 + 2) = v16;
                      unsigned int v17 = "VCAudioStream [%s] %s:%d VCAudioStream[%p] Cellular Network Notification: timestamp=%llu rad"
                            "ioAccessTechnology=%u referenceSignalLevel=%d signalLevel=%d signalQuality=%d uplinkBler=%u "
                            "bandwidthLimitationIndication=%u cdrxCycleLength=%u cdrxState=%u downlinkBLER=%u";
                      int v18 = v5;
                      uint32_t v19 = 102;
                      goto LABEL_24;
                    }
                  }
                  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v35 = *((void *)a2 + 2);
                    int v36 = a2[60];
                    int v37 = *(__int16 *)(a2 + 61);
                    int v38 = *(__int16 *)(a2 + 63);
                    int v39 = (char)a2[65];
                    int v40 = a2[66];
                    int v41 = a2[68];
                    int v42 = *((unsigned __int16 *)a2 + 35);
                    int v43 = a2[69];
                    int v44 = a2[67];
                    *(_DWORD *)uint64_t v64 = 136318466;
                    *(void *)&v64[4] = v4;
                    *(_WORD *)&v64[12] = 2080;
                    *(void *)&v64[14] = "_VCAudioStream_LogNWConnectionNotification";
                    *(_WORD *)&v64[22] = 1024;
                    LODWORD(v65) = 2475;
                    WORD2(v65) = 2048;
                    *(void *)((char *)&v65 + 6) = a1;
                    HIWORD(v65) = 2048;
                    *(void *)&long long v66 = v35;
                    WORD4(v66) = 1024;
                    *(_DWORD *)((char *)&v66 + 10) = v36;
                    HIWORD(v66) = 1024;
                    LODWORD(v67) = v37;
                    WORD2(v67) = 1024;
                    *(_DWORD *)((char *)&v67 + 6) = v38;
                    WORD5(v67) = 1024;
                    HIDWORD(v67) = v39;
                    LOWORD(v6_Block_object_dispose(&STACK[0x250], 8) = 1024;
                    *(_DWORD *)((char *)&v68 + 2) = v40;
                    HIWORD(v6_Block_object_dispose(&STACK[0x250], 8) = 1024;
                    LODWORD(v69) = v41;
                    WORD2(v69) = 1024;
                    *(_DWORD *)((char *)&v69 + 6) = v42;
                    WORD5(v69) = 1024;
                    HIDWORD(v69) = v43;
                    LOWORD(v70) = 1024;
                    *(_DWORD *)((char *)&v70 + 2) = v44;
                    __int16 v45 = "VCAudioStream [%s] %s:%d VCAudioStream[%p] Cellular Network Notification: timestamp=%llu radio"
                          "AccessTechnology=%u referenceSignalLevel=%d signalLevel=%d signalQuality=%d uplinkBler=%u band"
                          "widthLimitationIndication=%u cdrxCycleLength=%u cdrxState=%u downlinkBLER=%u";
                    int v46 = v5;
                    uint32_t v47 = 102;
                    goto LABEL_47;
                  }
                }
                break;
              case 2:
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  uint64_t v20 = VRTraceErrorLogLevelToCSTR();
                  double v21 = *MEMORY[0x1E4F47A50];
                  unint64_t v22 = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                    {
                      int v23 = *((_DWORD *)a2 + 2);
                      int v24 = *((__int16 *)a2 + 6);
                      int v25 = *((__int16 *)a2 + 7);
                      int v26 = (char)a2[16];
                      int v27 = a2[17];
                      *(_DWORD *)uint64_t v64 = 136317186;
                      *(void *)&v64[4] = v20;
                      *(_WORD *)&v64[12] = 2080;
                      *(void *)&v64[14] = "_VCAudioStream_LogNWConnectionNotification";
                      *(_WORD *)&v64[22] = 1024;
                      LODWORD(v65) = 2479;
                      WORD2(v65) = 2048;
                      *(void *)((char *)&v65 + 6) = a1;
                      HIWORD(v65) = 1024;
                      LODWORD(v66) = v23;
                      WORD2(v66) = 1024;
                      *(_DWORD *)((char *)&v66 + 6) = v24;
                      WORD5(v66) = 1024;
                      HIDWORD(v66) = v25;
                      LOWORD(v67) = 1024;
                      *(_DWORD *)((char *)&v67 + 2) = v26;
                      WORD3(v67) = 1024;
                      DWORD2(v67) = v27;
                      unsigned int v17 = "VCAudioStream [%s] %s:%d VCAudioStream[%p] Cellular Link Measurement Notification: radioAcce"
                            "ssTechnology=%u referenceSignalLevel=%d signalLevel=%d signalQuality=%d uplinkBler=%u";
                      int v18 = v21;
                      uint32_t v19 = 68;
                      goto LABEL_24;
                    }
                  }
                  else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
                  {
                    int v48 = *((_DWORD *)a2 + 2);
                    int v49 = *((__int16 *)a2 + 6);
                    int v50 = *((__int16 *)a2 + 7);
                    int v51 = (char)a2[16];
                    int v52 = a2[17];
                    *(_DWORD *)uint64_t v64 = 136317186;
                    *(void *)&v64[4] = v20;
                    *(_WORD *)&v64[12] = 2080;
                    *(void *)&v64[14] = "_VCAudioStream_LogNWConnectionNotification";
                    *(_WORD *)&v64[22] = 1024;
                    LODWORD(v65) = 2479;
                    WORD2(v65) = 2048;
                    *(void *)((char *)&v65 + 6) = a1;
                    HIWORD(v65) = 1024;
                    LODWORD(v66) = v48;
                    WORD2(v66) = 1024;
                    *(_DWORD *)((char *)&v66 + 6) = v49;
                    WORD5(v66) = 1024;
                    HIDWORD(v66) = v50;
                    LOWORD(v67) = 1024;
                    *(_DWORD *)((char *)&v67 + 2) = v51;
                    WORD3(v67) = 1024;
                    DWORD2(v67) = v52;
                    __int16 v45 = "VCAudioStream [%s] %s:%d VCAudioStream[%p] Cellular Link Measurement Notification: radioAccess"
                          "Technology=%u referenceSignalLevel=%d signalLevel=%d signalQuality=%d uplinkBler=%u";
                    int v46 = v21;
                    uint32_t v47 = 68;
                    goto LABEL_47;
                  }
                }
                break;
              case 3:
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  uint64_t v28 = VRTraceErrorLogLevelToCSTR();
                  uint64_t v29 = *MEMORY[0x1E4F47A50];
                  BOOL v30 = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                    {
                      int v31 = a2[8];
                      *(_DWORD *)uint64_t v64 = 136316162;
                      *(void *)&v64[4] = v28;
                      *(_WORD *)&v64[12] = 2080;
                      *(void *)&v64[14] = "_VCAudioStream_LogNWConnectionNotification";
                      *(_WORD *)&v64[22] = 1024;
                      LODWORD(v65) = 2477;
                      WORD2(v65) = 2048;
                      *(void *)((char *)&v65 + 6) = a1;
                      HIWORD(v65) = 1024;
                      LODWORD(v66) = v31;
                      unsigned int v17 = "VCAudioStream [%s] %s:%d VCAudioStream[%p] Cellular BW Limitation: bandwidthLimitationIndication=%u";
                      goto LABEL_23;
                    }
                  }
                  else if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                  {
                    int v53 = a2[8];
                    *(_DWORD *)uint64_t v64 = 136316162;
                    *(void *)&v64[4] = v28;
                    *(_WORD *)&v64[12] = 2080;
                    *(void *)&v64[14] = "_VCAudioStream_LogNWConnectionNotification";
                    *(_WORD *)&v64[22] = 1024;
                    LODWORD(v65) = 2477;
                    WORD2(v65) = 2048;
                    *(void *)((char *)&v65 + 6) = a1;
                    HIWORD(v65) = 1024;
                    LODWORD(v66) = v53;
                    __int16 v45 = "VCAudioStream [%s] %s:%d VCAudioStream[%p] Cellular BW Limitation: bandwidthLimitationIndication=%u";
                    goto LABEL_46;
                  }
                }
                break;
              case 4:
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  uint64_t v32 = VRTraceErrorLogLevelToCSTR();
                  uint64_t v29 = *MEMORY[0x1E4F47A50];
                  unsigned int v33 = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                    {
                      int v34 = *((unsigned __int16 *)a2 + 5);
                      *(_DWORD *)uint64_t v64 = 136316162;
                      *(void *)&v64[4] = v32;
                      *(_WORD *)&v64[12] = 2080;
                      *(void *)&v64[14] = "_VCAudioStream_LogNWConnectionNotification";
                      *(_WORD *)&v64[22] = 1024;
                      LODWORD(v65) = 2481;
                      WORD2(v65) = 2048;
                      *(void *)((char *)&v65 + 6) = a1;
                      HIWORD(v65) = 1024;
                      LODWORD(v66) = v34;
                      unsigned int v17 = "VCAudioStream [%s] %s:%d VCAudioStream[%p] Cellular CDRX Notification: cdrxCycleLength=%u";
LABEL_23:
                      int v18 = v29;
                      uint32_t v19 = 44;
LABEL_24:
                      _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, v17, v64, v19);
                    }
                  }
                  else if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                  {
                    int v63 = *((unsigned __int16 *)a2 + 5);
                    *(_DWORD *)uint64_t v64 = 136316162;
                    *(void *)&v64[4] = v32;
                    *(_WORD *)&v64[12] = 2080;
                    *(void *)&v64[14] = "_VCAudioStream_LogNWConnectionNotification";
                    *(_WORD *)&v64[22] = 1024;
                    LODWORD(v65) = 2481;
                    WORD2(v65) = 2048;
                    *(void *)((char *)&v65 + 6) = a1;
                    HIWORD(v65) = 1024;
                    LODWORD(v66) = v63;
                    __int16 v45 = "VCAudioStream [%s] %s:%d VCAudioStream[%p] Cellular CDRX Notification: cdrxCycleLength=%u";
LABEL_46:
                    int v46 = v29;
                    uint32_t v47 = 44;
LABEL_47:
                    _os_log_debug_impl(&dword_1E1EA4000, v46, OS_LOG_TYPE_DEBUG, v45, v64, v47);
                  }
                }
                break;
              default:
                break;
            }
            if (memcmp(a2, (const void *)(a1 + 1576), 0x68uLL))
            {
              long long v54 = *(_OWORD *)a2;
              long long v55 = *((_OWORD *)a2 + 2);
              *(_OWORD *)(a1 + 1592) = *((_OWORD *)a2 + 1);
              *(_OWORD *)(a1 + 160_Block_object_dispose(&STACK[0x250], 8) = v55;
              *(_OWORD *)(a1 + 1576) = v54;
              long long v56 = *((_OWORD *)a2 + 3);
              long long v57 = *((_OWORD *)a2 + 4);
              long long v58 = *((_OWORD *)a2 + 5);
              *(void *)(a1 + 1672) = *((void *)a2 + 12);
              *(_OWORD *)(a1 + 1640) = v57;
              *(_OWORD *)(a1 + 1656) = v58;
              *(_OWORD *)(a1 + 1624) = v56;
              uint64_t v59 = *(void *)(a1 + 1280);
              if (v59) {
                VCAudioReceiver_ProcessCellularNetworkNotification(v59, a1 + 1576);
              }
              objc_msgSend((id)objc_msgSend((id)a1, "audioTransmitter", *(_OWORD *)v64, *(void *)&v64[16], v65, (void)v66, *((void *)&v66 + 1), v67, v68, v69, v70), "processNWConnectionNotification:", a1 + 1576);
              int v60 = *(_DWORD *)(*(void *)(a1 + 1280) + 388);
              int RATFromNWNotification = VCNWConnectionMonitorUtils_GetRATFromNWNotification(a1 + 1576);
              if (RATFromNWNotification == 5)
              {
                int v62 = 2;
              }
              else if (VCNWConnectionMonitorUtils_IsBasebandRAT5G(RATFromNWNotification))
              {
                int v62 = 6;
              }
              else
              {
                int v62 = v60;
              }
              if (v60 != v62)
              {
                VCAudioTransmitter_ProcessConnectionType(*(void *)(a1 + 1160), v62);
                VCAudioReceiver_ProcessConnectionType(*(void *)(a1 + 1280), v62);
              }
              if (*((_DWORD *)a2 + 1) == 6) {
                [(id)a1 handleBasebandRateTrendSuggestion:*((unsigned int *)a2 + 2)];
              }
            }
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCAudioStream_NWConnectionNotificationHandler_cold_3();
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioStream_NWConnectionNotificationHandler_cold_4();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioStream_NWConnectionNotificationHandler_cold_2();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioStream_NWConnectionNotificationHandler_cold_1();
      }
    }
  }
}

void _VCAudioStream_ProcessDelegateEventQueue(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  double v2 = 0.0;
  if (VRTraceIsInternalOSInstalled()) {
    double v2 = micro();
  }
  unint64_t v3 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 1688));
  if (v3)
  {
    int v11 = v3;
    int v12 = 0;
    int v13 = (os_log_t *)MEMORY[0x1E4F47A50];
    do
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v14 = VRTraceErrorLogLevelToCSTR();
        int v15 = *v13;
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = v11[4];
          uint64_t v17 = *((void *)v11 + 1);
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v20 = v14;
          __int16 v21 = 2080;
          unint64_t v22 = "_VCAudioStream_ProcessDelegateEventQueue";
          __int16 v23 = 1024;
          int v24 = 3222;
          __int16 v25 = 2048;
          uint64_t v26 = a1;
          __int16 v27 = 1024;
          int v28 = v16;
          __int16 v29 = 2048;
          uint64_t v30 = v17;
          _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d Process event: stream=%p type=%d entry delegate=%p", buf, 0x36u);
        }
      }
      int v18 = v11[4];
      if (v18 == 1)
      {
        _VCAudioStream_DeregisterSyncDelegateEvent(a1, (uint64_t)v11);
      }
      else if (!v18)
      {
        _VCAudioStream_RegisterSyncDelegateEvent(a1, (uint64_t)v11);
      }
      int v11 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 1688));
      ++v12;
    }
    while (v11);
  }
  LogProfileTimeOverLimit_0(v2, 0, v4, v5, v6, v7, v8, v9, v10, (char)"_VCAudioStream_ProcessDelegateEventQueue");
}

void _VCAudioStream_ReleaseSyncDelegateEvent(uint64_t *a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      *a1 = 0;
      if (a2) {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 24));
      }

      dispatch_release(*(dispatch_object_t *)(v2 + 24));
      free((void *)v2);
    }
  }
}

void _VCAudioStream_UpdateSourceNTPToRTPTimeMappingCallback(uint64_t a1, int a2, double a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1696));
    CFIndex v7 = (Count - 1);
    if (Count - 1 >= 0)
    {
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1696), v7);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v9 = VRTraceErrorLogLevelToCSTR();
          uint64_t v10 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316674;
            uint64_t v12 = v9;
            __int16 v13 = 2080;
            uint64_t v14 = "_VCAudioStream_UpdateSourceNTPToRTPTimeMappingCallback";
            __int16 v15 = 1024;
            int v16 = 3389;
            __int16 v17 = 1024;
            int v18 = 3389;
            __int16 v19 = 2112;
            uint64_t v20 = ValueAtIndex;
            __int16 v21 = 2048;
            double v22 = a3;
            __int16 v23 = 1024;
            int v24 = a2;
            _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCAudioStream.m:%d: updating syncSourceDelegates=(%@) with ntpTime=%.6f and rtpTimestamp=%u", buf, 0x3Cu);
          }
        }
        VCMediaStreamSyncSourceDelegate_updateSourceNTPTimeWithRTPTimeStamp((uint64_t)ValueAtIndex, a2, a3);
        --Count;
        --v7;
      }
      while (Count > 0);
    }
  }
}

void _VCAudioStream_StreamSwitchCallback(uint64_t a1, int a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    CFIndex v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136316418;
      uint64_t v9 = v6;
      __int16 v10 = 2080;
      int v11 = "_VCAudioStream_StreamSwitchCallback";
      __int16 v12 = 1024;
      int v13 = 3433;
      __int16 v14 = 2048;
      uint64_t v15 = a1;
      __int16 v16 = 1024;
      int v17 = a2;
      __int16 v18 = 1024;
      int v19 = a3;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d audioStream=%p switched from streamID=%u to streamID=%u", (uint8_t *)&v8, 0x32u);
    }
  }
}

void _VCAudioStream_DTMFEventCallback(uint64_t a1, char a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 168);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___VCAudioStream_DTMFEventCallback_block_invoke;
    block[3] = &unk_1E6DB3DF0;
    block[4] = a1;
    char v4 = a2;
    dispatch_async(v2, block);
  }
}

void VCAudioStream_PullAudioSamples(uint64_t a1, unsigned int *a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 184);
  _VCAudioStream_ProcessDelegateEventQueue(v4);
  int v55 = 0;
  int v56 = -1431655766;
  double v54 = 0.0;
  VCAudioReceiver_PullAudioSamples(*(void *)(a1 + 24), (uint64_t)a2, &v55, &v54, 0, &v56, 0);
  float v5 = *(float *)(a1 + 36);
  if (v5 != -1.0) {
    VCAudioBufferList_ApplyGain((uint64_t)a2, v5);
  }
  double v6 = v54;
  double v7 = micro();
  double v8 = *(double *)(a1 + 48);
  double v9 = v7 - v6;
  if (v8 == 0.0 && v9 > 0.0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    __int16 v10 = *(void **)(a1 + 168);
    uint64_t v11 = *(void *)(a1 + 184);
    *(_OWORD *)CMTime buf = *MEMORY[0x1E4F1FA48];
    *(void *)&buf[16] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    [v10 vcMediaStream:v11 didReceiveFirstFrameWithTime:buf];
    [*(id *)(a1 + 184) reportingAlgosAudioStreamEvent:0];
  }
  if (v8 < v6)
  {
    if (*(unsigned char *)(a1 + 42)) {
      ++*(_DWORD *)(a1 + 56);
    }
    *(double *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = v6;
  }
  if (v9 <= *(double *)(a1 + 64) * (double)(*(unsigned __int8 *)(a1 + 76) + 1) / 3.0)
  {
    if (*(int *)(a1 + 56) >= 2 && *(unsigned char *)(a1 + 42))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        uint64_t v20 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v19;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VCAudioStream_UpdateRemoteMediaStallState";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&uint8_t buf[24] = 424;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v6;
          *(_WORD *)&buf[38] = 2048;
          *(double *)&buf[40] = v7;
          LOWORD(v70) = 1024;
          *(_DWORD *)((char *)&v70 + 2) = v21;
          _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d Unstalling lastReceivedPacketTime %f currentTime %f packetCount %d", buf, 0x36u);
        }
      }
      *(unsigned char *)(a1 + 42) = 0;
      *(unsigned char *)(a1 + 76) = 0;
      if (objc_opt_respondsToSelector())
      {
        uint64_t v15 = *(void **)(a1 + 168);
        uint64_t v16 = *(void *)(a1 + 184);
        uint64_t v17 = *(unsigned __int8 *)(a1 + 42);
        double v18 = 0.0;
        goto LABEL_26;
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      int v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCAudioStream_UpdateRemoteMediaStallState";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = 414;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v6;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&buf[40] = v7;
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d Stalling lastReceivedPacketTime %f currentTime %f", buf, 0x30u);
      }
    }
    char v14 = *(unsigned char *)(a1 + 76);
    if (!v14)
    {
      *(unsigned char *)(a1 + 42) = 1;
      *(_DWORD *)(a1 + 56) = 0;
    }
    *(unsigned char *)(a1 + 76) = v14 + 1;
    if (objc_opt_respondsToSelector())
    {
      uint64_t v15 = *(void **)(a1 + 168);
      uint64_t v16 = *(void *)(a1 + 184);
      uint64_t v17 = *(unsigned __int8 *)(a1 + 42);
      double v18 = v7 - v6;
LABEL_26:
      [v15 vcMediaStream:v16 remoteMediaStalled:v17 duration:v18];
    }
  }
  if (*(unsigned char *)(a1 + 41)) {
    VCAudioBufferList_ZeroMemory((uint64_t)a2);
  }
  double v22 = micro();
  uint64_t v23 = *(void *)(a1 + 184);
  if (v23)
  {
    int v24 = *(void **)(v23 + 1368);
    if (v24)
    {
      int v25 = v55;
      do
      {
        VCMediaStreamSyncSourceDelegate_updateSourcePlayoutSampleRTPTimestamp(v24[1], v25, v22);
        int v24 = (void *)*v24;
      }
      while (v24);
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    [*(id *)(a1 + 192) stream:*(void *)(a1 + 184) addAudioSampleBuffer:a2 timestamp:(micro() * 1000.0)];
    memset(buf, 0, 40);
    VCAudioReceiver_GetJitterBufferMetrics(*(void *)(a1 + 24), (uint64_t)buf);
    for (uint64_t i = *(void **)(a1 + 80); i; uint64_t i = (void *)*i)
      VCAudioStreamTransport_SubmitWRMReportWithJitterBufferMetrics(i[1], (uint64_t)buf);
  }
  __int16 v53 = -21846;
  if (!VCAudioReceiver_GetActiveStreamId(*(void *)(a1 + 24), &v53)
    && v53 == *(_WORD *)(a1 + 144)
    && *(unsigned char *)(a1 + 160))
  {
    uint64_t v27 = *(void *)(a1 + 184);
    if (v27)
    {
      double v28 = v54;
      double v29 = v54 - *(double *)(v27 + 1496);
      if (v29 > 1.0 || v22 - *(double *)(v27 + 1504) > 1.0)
      {
        uint64_t v31 = *(void *)(a1 + 152);
        if (v31)
        {
          *(void *)&long long v79 = 0;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v70 = 0u;
          memset(buf, 0, sizeof(buf));
          VCRateControlGetStatistics(v31, 3, (uint64_t)buf);
          LODWORD(v32) = DWORD1(v70);
          double v33 = (double)v32 / 1000.0;
          float OWRD = VCAudioReceiver_GetOWRD(*(void *)(a1 + 24));
          int v35 = v71;
          *(double *)(v27 + 1512) = *(double *)&buf[24] / 100.0 + *(double *)(v27 + 1512);
          ++*(_DWORD *)(v27 + 1520);
          *(double *)(v27 + 1504) = v22;
          float PercentPacketsLateAndMissing = VCAudioReceiver_GetPercentPacketsLateAndMissing(*(void *)(a1 + 24));
          if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
          {
            uint64_t v37 = VRTraceErrorLogLevelToCSTR();
            int v38 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              double v39 = *(double *)(v27 + 1528);
              *(_DWORD *)long long v57 = 136316674;
              uint64_t v58 = v37;
              __int16 v59 = 2080;
              int v60 = "_VCAudioStream_CheckAbnormalOWRDAndResetLagReference";
              __int16 v61 = 1024;
              int v62 = 458;
              __int16 v63 = 2048;
              double v64 = v33;
              __int16 v65 = 1024;
              *(_DWORD *)long long v66 = v35;
              *(_WORD *)&v66[4] = 2048;
              *(double *)&v66[6] = v39 * 100.0;
              __int16 v67 = 2048;
              double v68 = PercentPacketsLateAndMissing * 100.0;
              _os_log_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d RTT=%.3f, TxBW=%ub/sec, PLR=%.2f%%, PLaMR=%.2f%%", v57, 0x40u);
            }
          }
          if (v29 > 1.0)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v40 = VRTraceErrorLogLevelToCSTR();
              int v41 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v42 = *(_DWORD *)(v27 + 1488);
                *(_DWORD *)long long v57 = 136316418;
                uint64_t v58 = v40;
                __int16 v59 = 2080;
                int v60 = "_VCAudioStream_CheckAbnormalOWRDAndResetLagReference";
                __int16 v61 = 1024;
                int v62 = 463;
                __int16 v63 = 2048;
                double v64 = v33;
                __int16 v65 = 2048;
                *(double *)long long v66 = OWRD;
                *(_WORD *)&v66[8] = 1024;
                *(_DWORD *)&v66[10] = v42;
                _os_log_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d Abnormal OWRD Verification: rtt=%f, owrd=%f, _abnormalOWRDCount=%d", v57, 0x36u);
              }
            }
            *(double *)(v27 + 1496) = v28;
            BOOL v43 = v33 <= 0.0 || OWRD <= 2.0;
            double v44 = OWRD;
            if (!v43 && v33 * 5.0 < v44)
            {
              ++*(_DWORD *)(v27 + 1488);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v50 = VRTraceErrorLogLevelToCSTR();
                int v51 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  int v52 = *(_DWORD *)(v27 + 1488);
                  *(_DWORD *)long long v57 = 136316418;
                  uint64_t v58 = v50;
                  __int16 v59 = 2080;
                  int v60 = "_VCAudioStream_CheckAbnormalOWRDAndResetLagReference";
                  __int16 v61 = 1024;
                  int v62 = 470;
                  __int16 v63 = 2048;
                  double v64 = v33;
                  __int16 v65 = 2048;
                  *(double *)long long v66 = v44;
                  *(_WORD *)&v66[8] = 1024;
                  *(_DWORD *)&v66[10] = v52;
                  _os_log_error_impl(&dword_1E1EA4000, v51, OS_LOG_TYPE_ERROR, "VCAudioStream [%s] %s:%d Abnormal OWRD detected: rtt=%f, owrd=%f, _abnormalOWRDCount=%d", v57, 0x36u);
                }
              }
            }
            else
            {
              *(_DWORD *)(v27 + 148_Block_object_dispose(&STACK[0x250], 8) = 0;
            }
            if (*(_DWORD *)(v27 + 1488) >= 4u)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VCAudioStream_PullAudioSamples_cold_3();
                }
              }
              VCAudioReceiver_ResetLagReference(*(void *)(a1 + 24));
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCAudioStream_PullAudioSamples_cold_2();
          }
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioStream_PullAudioSamples_cold_1();
      }
    }
    if (v22 - *(double *)(v27 + 1536) >= 5.0)
    {
      *(double *)(v27 + 152_Block_object_dispose(&STACK[0x250], 8) = *(double *)(v27 + 1512) / (double)*(int *)(v27 + 1520);
      *(void *)(v27 + 1512) = 0;
      *(_DWORD *)(v27 + 1520) = 0;
      *(double *)(v27 + 1536) = v22;
    }
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    memset(buf, 0, sizeof(buf));
    uint64_t v46 = *(void *)(a1 + 200);
    if (v46)
    {
      WRMIncrementTime(v46);
      VCAudioTransmitter_UpdateWrmMetrics(*(void *)(a1 + 208), *(void *)(a1 + 200));
      VCAudioReceiver_UpdateWrmMetrics(*(void *)(a1 + 24), *(void *)(a1 + 200));
      if (WRMGenerateReport(*(unsigned __int8 **)(a1 + 200), (uint64_t)buf)) {
        WRMSubmitReport(*(void *)(a1 + 200), (uint64_t)buf);
      }
    }
  }
  if (*(unsigned char *)a1) {
    VCAudioBufferList_ZeroMemory((uint64_t)a2);
  }
  _VCAudioStream_UpdateSoundMeter(v4, a1 + 8, 0, (uint64_t)a2);
  if (*(unsigned char *)(v4 + 1784)) {
    VCAudioPowerSpectrumSource_PushAudioSamples(*(id **)(v4 + 1480), (uint64_t)a2);
  }
  uint64_t v47 = *(void *)(v4 + 1896);
  if (v47) {
    VCAudioCaptionsCoordinator_PushAudioSamples(v47, *(void *)(v4 + 632), a2);
  }
  uint64_t v48 = *(void *)(v4 + 1832);
  if (v48)
  {
    int Timestamp = VCAudioBufferList_GetTimestamp((uint64_t)a2);
    VCMediaRecorder_AddRemoteAudioSampleBuffer(v48, (uint64_t)a2, Timestamp);
  }
  VCMediaStream_CheckForDecryptionTimeout(v4);
}

void VCAudioStream_SetAllowedCodecConfigurations(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 1160);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v4)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        double v7 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)(a1 + 1160);
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v24 = v6;
          __int16 v25 = 2080;
          uint64_t v26 = "VCAudioStream_SetAllowedCodecConfigurations";
          __int16 v27 = 1024;
          int v28 = 2010;
          __int16 v29 = 2048;
          uint64_t v30 = a1;
          __int16 v31 = 2048;
          uint64_t v32 = v8;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d stream=%p audioTransmitter=%p", buf, 0x30u);
        }
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        __int16 v10 = Mutable;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        uint64_t v11 = *(void **)(a1 + 1744);
        uint64_t v12 = [v11 countByEnumeratingWithState:&v19 objects:v18 count:16];
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = *(void *)v20;
          do
          {
            for (uint64_t i = 0; i != v13; ++i)
            {
              if (*(void *)v20 != v14) {
                objc_enumerationMutation(v11);
              }
              uint64_t v16 = *(void **)(*((void *)&v19 + 1) + 8 * i);
              uint64_t v17 = (const void *)objc_msgSend(NSNumber, "numberWithInteger:", VCPayloadUtils_CodecTypeForPayload(objc_msgSend((id)objc_msgSend(v16, "config"), "payload")));
              if (CFDictionaryContainsKey(a2, v17)) {
                CFArrayAppendValue(v10, v16);
              }
            }
            uint64_t v13 = [v11 countByEnumeratingWithState:&v19 objects:v18 count:16];
          }
          while (v13);
        }
        VCAudioTransmitter_SetAllowedPayloads(*(void *)(a1 + 1160), v10);
        CFRelease(v10);
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioStream_SetAllowedCodecConfigurations_cold_3();
        }
      }
    }
    else if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioStream_SetAllowedCodecConfigurations_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioStream_SetAllowedCodecConfigurations_cold_1();
    }
  }
}

void VCAudioStream_SetAudioPlayoutDelay(uint64_t a1, double a2, double a3)
{
  if (a1)
  {
    *(double *)(a1 + 1816) = a2;
    uint64_t v3 = *(void *)(a1 + 1280);
    if (v3)
    {
      VCAudioReceiver_SetAudioPlayoutDelay(v3, a2, a3);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioStream_SetAudioPlayoutDelay_cold_1();
    }
  }
}

void VCAudioStream_PushAudioSamples(uint64_t a1, unsigned int *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 864)))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v4 = VRTraceErrorLogLevelToCSTR();
        float v5 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v35 = v4;
          __int16 v36 = 2080;
          uint64_t v37 = "VCAudioStream_PushAudioSamples";
          __int16 v38 = 1024;
          int v39 = 3188;
          __int16 v40 = 2048;
          int v41 = (const char *)a1;
          __int16 v42 = 1024;
          int Timestamp = VCAudioBufferList_GetTimestamp((uint64_t)a2);
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d VCAudioStream[%p] IOProc:  Missing grabbing lock onCaptureSound at %u", buf, 0x2Cu);
        }
      }
    }
    else
    {
      uint64_t v6 = a1 + 1240;
      if (*(_DWORD *)(a1 + 408) == 2)
      {
        uint64_t v7 = VCAudioBufferList_GetTimestamp((uint64_t)a2);
        double HostTime = VCAudioBufferList_GetHostTime((uint64_t)a2);
        Sampleint Count = VCAudioBufferList_GetSampleCount((uint64_t)a2);
        double HostTimeJumpSize = VCAudioBufferList_GetHostTimeJumpSize((uint64_t)a2);
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionaryAddValue(Mutable, @"VCASHostTimeJumpSize", (const void *)[NSNumber numberWithDouble:HostTimeJumpSize * 1000.0]);
        reportingAudioStreamEvent();
        if (Mutable) {
          CFRelease(Mutable);
        }
        uint64_t v12 = &OBJC_IVAR___VCRedundancyControlAlgorithmVideo__offChannelTimeRatio;
        uint64_t v13 = v7;
        if (*(_DWORD *)(a1 + 432) != 6)
        {
          double v14 = *(double *)(a1 + 824);
          if (v14 == 0.0)
          {
            int v24 = 0;
          }
          else
          {
            double v15 = HostTime - v14;
            float v16 = *(double *)(a1 + 1072) / (double)SampleCount;
            unsigned int v17 = SampleCount * llround(v15 * v16);
            if (v17 != SampleCount)
            {
              unsigned int v18 = v7 - *(_DWORD *)(a1 + 852);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v33 = VRTraceErrorLogLevelToCSTR();
                long long v19 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  int v31 = *(_DWORD *)(a1 + 852);
                  uint64_t v32 = *(void *)(a1 + 824);
                  *(_DWORD *)CMTime buf = 136317954;
                  uint64_t v35 = v33;
                  __int16 v36 = 2080;
                  uint64_t v37 = "_VCAudioStream_ComputePacketTimestampWithInputTimestamp";
                  __int16 v38 = 1024;
                  int v39 = 223;
                  __int16 v40 = 2080;
                  int v41 = "_VCAudioStream_ComputePacketTimestampWithInputTimestamp";
                  __int16 v42 = 1024;
                  int Timestamp = v18;
                  __int16 v44 = 1024;
                  int v45 = v31;
                  __int16 v46 = 1024;
                  int v47 = v7;
                  __int16 v48 = 2048;
                  double v49 = v15;
                  __int16 v50 = 1024;
                  unsigned int v51 = v17;
                  __int16 v52 = 2048;
                  uint64_t v53 = v32;
                  __int16 v54 = 2048;
                  double v55 = HostTime;
                  __int16 v56 = 1024;
                  unsigned int v57 = v17;
                  _os_log_error_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_ERROR, "VCAudioStream [%s] %s:%d %s Timestamp jumped=%u (%u to %u), host time=%f (samples=%d) (%f to %f). Adjustment=%d", buf, 0x62u);
                }
              }
              double v20 = *(double *)(a1 + 1072);
              if (v20 != 0.0)
              {
                double v21 = (double)(1000 * (unint64_t)v18) / v20;
                unint64_t v22 = atomic_load((unint64_t *)(a1 + 1736));
                double v23 = (double)v22;
                if (v21 >= (double)v22) {
                  double v23 = v21;
                }
                atomic_fetch_add((atomic_uint *volatile)(a1 + 1720), 1u);
                atomic_fetch_add((atomic_ullong *volatile)(a1 + 1728), (unint64_t)v21);
                atomic_store((unint64_t)v23, (unint64_t *)(a1 + 1736));
              }
              Sampleint Count = v17;
            }
            int v24 = (int)((double)(objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1160), "currentAudioPayloadConfig", v33), "codecSampleRate")* (uint64_t)SampleCount)/ *(double *)(a1 + 1072));
            uint64_t v12 = &OBJC_IVAR___VCRedundancyControlAlgorithmVideo__offChannelTimeRatio;
          }
          uint64_t v13 = (*(_DWORD *)(a1 + v12[474]) + v24);
        }
        if ([*(id *)(a1 + 1128) shouldTransmitDTMFWithTimestamp:v13])
        {
          objc_msgSend(*(id *)(a1 + 1128), "sendingDTMFEventWithTimeStamp:interval:RTPHandle:", v13, (int)(*(double *)(a1 + 1072)* (double)(v13 - *(_DWORD *)(a1 + v12[474]))/ (double)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1160), "currentAudioPayloadConfig"), "codecSampleRate")), objc_msgSend((id)objc_msgSend((id)a1, "defaultTransport"), "rtpHandle"));
        }
        else
        {
          VCAudioBufferList_SetTime((uint64_t)a2, v13, HostTime);
          int v25 = *(unsigned __int8 *)(a1 + 1221);
          if (v25 != [*(id *)(a1 + 1160) isCurrentDTXEnabled]) {
            [*(id *)(a1 + 1160) setCurrentDTXEnable:*(unsigned __int8 *)(a1 + 1221)];
          }
          VCAudioTransmitter_PushAudioSamples(*(void *)(a1 + 1160), (uint64_t)a2);
          VCAudioBufferList_SetTime((uint64_t)a2, v7, HostTime);
        }
        *(_DWORD *)(a1 + v12[474]) = v13;
        *(_DWORD *)(a1 + 852) = v7;
        *(double *)(a1 + 824) = HostTime;
        int v26 = *(_DWORD *)(a1 + 1680) + 1;
        *(_DWORD *)(a1 + 1680) = v26;
        HIDWORD(v27) = 652835029 * v26;
        LODWORD(v27) = 652835029 * v26;
        uint64_t v6 = a1 + 1240;
        if ((v27 >> 2) <= 0x83126E) {
          VCAudioTransmitter_ReportAWDMetrics(*(void *)(a1 + 1160));
        }
      }
      _VCAudioStream_UpdateSoundMeter(a1, v6, 1, (uint64_t)a2);
      if (*(unsigned char *)(a1 + 1784)) {
        VCAudioPowerSpectrumSource_PushAudioSamples(*(id **)(a1 + 1472), (uint64_t)a2);
      }
      uint64_t v28 = *(void *)(a1 + 1896);
      if (v28) {
        VCAudioCaptionsCoordinator_PushAudioSamples(v28, *(void *)(a1 + 624), a2);
      }
      uint64_t v29 = *(void *)(a1 + 1832);
      if (v29)
      {
        int v30 = VCAudioBufferList_GetTimestamp((uint64_t)a2);
        VCMediaRecorder_AddLocalAudioSampleBuffer(v29, (uint64_t)a2, v30);
      }
      pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 864));
    }
  }
}

void _VCAudioStream_UpdateSoundMeter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)a2)
  {
    float v5 = VCFFTMeter_Compute(*(void *)(a2 + 8), a4);
    if (*(void *)(a1 + 256))
    {
      uint64_t v6 = *(void (**)(void))(a1 + 264);
      if (v6) {
        v6();
      }
    }
    if (v5)
    {
      CFRelease(v5);
    }
  }
}

void VCAudioStream_PushRemainingSamples(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (pthread_rwlock_tryrdlock((pthread_rwlock_t *)(a1 + 864)))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v2 = VRTraceErrorLogLevelToCSTR();
      uint64_t v3 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 136315906;
        uint64_t v5 = v2;
        __int16 v6 = 2080;
        uint64_t v7 = "VCAudioStream_PushRemainingSamples";
        __int16 v8 = 1024;
        int v9 = 3201;
        __int16 v10 = 2048;
        uint64_t v11 = a1;
        _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d VCAudioStream[%p] IOProc: Missing grabbing lock onCaptureSound", (uint8_t *)&v4, 0x26u);
      }
    }
  }
  else
  {
    VCAudioTransmitter_PushRemainingSamples(*(void *)(a1 + 1160));
    pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 864));
  }
}

_DWORD *_VCAudioStream_NewSyncDelegateEvent(int a1, uint64_t a2, void *a3)
{
  __int16 v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A0040F8598106uLL);
  v6[4] = a1;
  *((void *)v6 + 1) = a3;
  id v7 = a3;
  __int16 v8 = *(NSObject **)(a2 + 1800);
  *((void *)v6 + 3) = v8;
  dispatch_retain(v8);
  return v6;
}

void _VCAudioStream_RegisterSyncDelegateEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    uint64_t v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v10 = v4;
      __int16 v11 = 2080;
      uint64_t v12 = "_VCAudioStream_RegisterSyncDelegateEvent";
      __int16 v13 = 1024;
      int v14 = 3268;
      __int16 v15 = 2048;
      uint64_t v16 = a1;
      __int16 v17 = 2048;
      uint64_t v18 = a2;
      __int16 v19 = 1024;
      int v20 = v6;
      __int16 v21 = 2048;
      uint64_t v22 = v7;
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d Registering audioStream=%p entry=%p entryType=%d delegate=%p", buf, 0x40u);
    }
  }
  if ((VCSingleLinkedListPush(a1 + 1368, (void *)a2) & 1) == 0) {
    _VCAudioStream_ReleaseSyncDelegateEvent(&v8, 0);
  }
}

void _VCAudioStream_DeregisterSyncDelegateEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    uint64_t v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)CMTime buf = 136316674;
      *(void *)&uint8_t buf[4] = v4;
      __int16 v10 = 2080;
      __int16 v11 = "_VCAudioStream_DeregisterSyncDelegateEvent";
      __int16 v12 = 1024;
      int v13 = 3259;
      __int16 v14 = 2048;
      uint64_t v15 = a1;
      __int16 v16 = 2048;
      uint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v6;
      __int16 v20 = 2048;
      uint64_t v21 = v7;
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d Deregistering audioStream=%p entry=%p entryType=%d delegate=%p", buf, 0x40u);
    }
  }
  *(void *)CMTime buf = VCSingleLinkedListRemove(a1 + 1368, a2);
  if (*(void *)buf) {
    _VCAudioStream_ReleaseSyncDelegateEvent((uint64_t *)buf, 0);
  }
  _VCAudioStream_ReleaseSyncDelegateEvent(&v8, 1);
}

void CodecRateModeChangeNotificationCallback(void *a1, long long *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4E589F0]();
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  [a1 handleCodecModeChangeEvent:&v5];
}

void _VCAudioStream_ActiveStreamChangeCallback(uint64_t a1, __int16 a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4E589F0]();
  if (a1)
  {
    long long v5 = *(NSObject **)(a1 + 168);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___VCAudioStream_ActiveStreamChangeCallback_block_invoke;
    v8[3] = &unk_1E6DB4658;
    v8[4] = a1;
    __int16 v9 = a2;
    dispatch_async(v5, v8);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v11 = v6;
      __int16 v12 = 2080;
      int v13 = "_VCAudioStream_ActiveStreamChangeCallback";
      __int16 v14 = 1024;
      int v15 = 3410;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d stream is nil", buf, 0x1Cu);
    }
  }
}

void LogProfileTimeOverLimit_0(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (VRTraceIsInternalOSInstalled())
  {
    double v11 = micro() - a1;
    if (v11 > 0.00300000003)
    {
      *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v39 = v12;
      long long v40 = v12;
      long long v37 = v12;
      long long v38 = v12;
      long long v35 = v12;
      long long v36 = v12;
      long long v33 = v12;
      long long v34 = v12;
      long long v31 = v12;
      long long v32 = v12;
      long long v30 = v12;
      long long v28 = v12;
      long long v29 = v12;
      long long v26 = v12;
      long long v27 = v12;
      *(_OWORD *)__str = v12;
      vsnprintf(__str, 0x100uLL, "%s: Iterations=%d", &a10);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        __int16 v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v16 = v13;
          __int16 v17 = 2080;
          __int16 v18 = "_LogProfileTimeLimitHelper";
          __int16 v19 = 1024;
          int v20 = 36;
          __int16 v21 = 2080;
          uint64_t v22 = __str;
          __int16 v23 = 2048;
          double v24 = v11;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VCAudioStream [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

uint64_t VCMediaNegotiationBlobV2ReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        __int16 v17 = objc_alloc_init(VCMediaNegotiationBlobV2GeneralInfo);

        a1[4] = v17;
        if (!PBReaderPlaceMark()
          || (VCMediaNegotiationBlobV2GeneralInfoReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_41;
      case 2u:
        __int16 v19 = objc_alloc_init(VCMediaNegotiationBlobV2BandwidthSettings);

        a1[1] = v19;
        if (!PBReaderPlaceMark() || !VCMediaNegotiationBlobV2BandwidthSettingsReadFrom((uint64_t)v19, a2)) {
          return 0;
        }
        goto LABEL_41;
      case 3u:
        int v20 = objc_alloc_init(VCMediaNegotiationBlobV2CodecFeatures);

        a1[3] = v20;
        if (!PBReaderPlaceMark()
          || (VCMediaNegotiationBlobV2CodecFeaturesReadFrom((uint64_t)v20, a2) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_41;
      case 4u:
        __int16 v21 = objc_alloc_init(VCMediaNegotiationBlobV2MicrophoneSettingsU1);

        a1[5] = v21;
        if (!PBReaderPlaceMark()
          || !VCMediaNegotiationBlobV2MicrophoneSettingsU1ReadFrom((uint64_t)v21, a2))
        {
          return 0;
        }
        goto LABEL_41;
      case 5u:
        uint64_t v22 = objc_alloc_init(VCMediaNegotiationBlobV2CameraSettingsU1);

        a1[2] = v22;
        if (!PBReaderPlaceMark() || (VCMediaNegotiationBlobV2CameraSettingsU1ReadFrom(v22, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_41;
      case 6u:
        __int16 v23 = objc_alloc_init(VCMediaNegotiationBlobV2MomentsSettings);

        a1[6] = v23;
        if (!PBReaderPlaceMark() || !VCMediaNegotiationBlobV2MomentsSettingsReadFrom((uint64_t)v23, a2)) {
          return 0;
        }
        goto LABEL_41;
      case 7u:
        double v24 = objc_alloc_init(VCMediaNegotiationBlobV2StreamGroup);
        [a1 addStreamGroups:v24];

        if (PBReaderPlaceMark()
          && (VCMediaNegotiationBlobV2StreamGroupReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_41:
          PBReaderRecallMark();
LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_42;
    }
  }
}

void _VCScreenCapture_setRepeatFrameAttributes(opaqueCMSampleBuffer *a1, int a2)
{
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  if (ImageBuffer)
  {
    CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F44F40];
    long long v5 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!a2) {
      long long v5 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    uint64_t v6 = *v5;
    CVBufferSetAttachment(ImageBuffer, v4, v6, kCVAttachmentMode_ShouldPropagate);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCScreenCapture_setRepeatFrameAttributes_cold_1();
    }
  }
}

void _VCScreenCapture_handleFrameInternal(uint64_t a1, CMSampleBufferRef cf, int a3, char a4)
{
  v73[3] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 464) != a3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      unsigned int v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(_DWORD *)(a1 + 464);
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCScreenCapture_handleFrameInternal";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = 493;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v10;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = a3;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d Source frame transform has changed. old transform=%d -> new transform=%d", buf, 0x28u);
      }
    }
    *(_DWORD *)(a1 + 464) = a3;
  }
  if ((a4 & 1) == 0) {
    _VCScreenCapture_UpdateShouldClearScreen(a1, 0);
  }
  CFRetain(cf);
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(cf);
  if (!ImageBuffer) {
    goto LABEL_103;
  }
  unint64_t v12 = ImageBuffer;
  memset(&v66, 170, sizeof(v66));
  CMSampleBufferGetOutputPresentationTimeStamp(&v66, cf);
  CFStringRef v13 = (const __CFString *)*MEMORY[0x1E4F44F40];
  CFTypeRef v14 = CMGetAttachment(cf, (CFStringRef)*MEMORY[0x1E4F44F40], 0);
  if ((a4 & 1) == 0 && !*(unsigned char *)(a1 + 476))
  {
    *(unsigned char *)(a1 + 476) = 1;
    extraColumnsOnRight.os_signpost_id_t value = 0xAAAAAAAAAAAAAAAALL;
    extraRowsOnBottom.os_signpost_id_t value = 0xAAAAAAAAAAAAAAAALL;
    CVPixelBufferGetExtendedPixels(v12, 0, (size_t *)&extraColumnsOnRight, 0, (size_t *)&extraRowsOnBottom);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      uint64_t v16 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        size_t Width = CVPixelBufferGetWidth(v12);
        size_t Height = CVPixelBufferGetHeight(v12);
        *(_DWORD *)CMTime buf = 136316930;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCScreenCapture_handleFrameInternal";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = 513;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = Width;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&buf[40] = Height;
        LOWORD(v72) = 1024;
        *(_DWORD *)((char *)&v72 + 2) = a3;
        WORD3(v72) = 2048;
        *((void *)&v72 + 1) = extraColumnsOnRight.value;
        LOWORD(v73[0]) = 2048;
        *(void *)((char *)v73 + 2) = extraRowsOnBottom.value;
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d Captured first frame with source width %.1zu x height:%.1zu transform=%d extendedPixelsRight=%zu  extendedPixelsBottom=%zu", buf, 0x4Au);
      }
    }
  }
  if (!*(unsigned char *)(a1 + 468))
  {
    int v31 = 0;
    int v32 = 1;
    goto LABEL_48;
  }
  *(CMTime *)CMTime buf = v66;
  double Seconds = CMTimeGetSeconds((CMTime *)buf);
  *(_OWORD *)CMTime buf = *(_OWORD *)(a1 + 396);
  *(void *)&buf[16] = *(void *)(a1 + 412);
  double v19 = Seconds - CMTimeGetSeconds((CMTime *)buf);
  int v20 = CMSampleBufferGetImageBuffer(cf);
  if (v14)
  {
    CVBufferSetAttachment(v20, v13, v14, kCVAttachmentMode_ShouldPropagate);
    CMTimeMake(&v68, 2, 60);
    CMTime v67 = v66;
    long long v21 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
    long long v72 = v21;
    v73[0] = *(void *)(MEMORY[0x1E4F1FA70] + 64);
    long long v22 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
    *(_OWORD *)CMTime buf = *MEMORY[0x1E4F1FA70];
    *(_OWORD *)&buf[16] = v22;
    CMTime extraColumnsOnRight = v66;
    extraRowsOnBottouint64_t m = v68;
    CMTimeAdd((CMTime *)&buf[24], &extraColumnsOnRight, &extraRowsOnBottom);
    CMTime extraColumnsOnRight = *(CMTime *)&buf[24];
    CMSampleBufferSetOutputPresentationTimeStamp(cf, &extraColumnsOnRight);
    CMTime extraColumnsOnRight = *(CMTime *)&buf[24];
    double v23 = CMTimeGetSeconds(&extraColumnsOnRight);
    CMTime extraColumnsOnRight = v67;
    double v24 = CMTimeGetSeconds(&extraColumnsOnRight);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      double v25 = v23 - v24;
      uint64_t v26 = VRTraceErrorLogLevelToCSTR();
      long long v27 = *MEMORY[0x1E4F47A50];
      long long v28 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(CMTime *)CMTime buf = v66;
          Float64 v29 = CMTimeGetSeconds((CMTime *)buf);
          *(CMTime *)CMTime buf = v66;
          Float64 v30 = CMTimeGetSeconds((CMTime *)buf);
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v26;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VCScreenCapture_performIdleTimeAdjustments";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&uint8_t buf[24] = 437;
          *(_WORD *)&buf[28] = 2048;
          *(Float64 *)&buf[30] = v29;
          *(_WORD *)&buf[38] = 2048;
          *(double *)&buf[40] = v25 + v30;
          LOWORD(v72) = 2048;
          *(double *)((char *)&v72 + 2) = v25;
          _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d Idle frame, moving time forward. BeforeTime=%f, AfterTime=%f, Delta=%f ", buf, 0x3Au);
        }
      }
      else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(CMTime *)CMTime buf = v66;
        Float64 v62 = CMTimeGetSeconds((CMTime *)buf);
        *(CMTime *)CMTime buf = v66;
        Float64 v63 = CMTimeGetSeconds((CMTime *)buf);
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v26;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCScreenCapture_performIdleTimeAdjustments";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = 437;
        *(_WORD *)&buf[28] = 2048;
        *(Float64 *)&buf[30] = v62;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&buf[40] = v25 + v63;
        LOWORD(v72) = 2048;
        *(double *)((char *)&v72 + 2) = v25;
        _os_log_debug_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEBUG, "VCScreenCapture [%s] %s:%d Idle frame, moving time forward. BeforeTime=%f, AfterTime=%f, Delta=%f ", buf, 0x3Au);
      }
    }
    CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)buf, cf);
    CMTime v66 = *(CMTime *)buf;
    *(unsigned char *)(a1 + 486) = 1;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v33 = VRTraceErrorLogLevelToCSTR();
    long long v34 = *MEMORY[0x1E4F47A50];
    long long v35 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(CMTime *)CMTime buf = v66;
        Float64 v36 = CMTimeGetSeconds((CMTime *)buf);
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v33;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCScreenCapture_performIdleTimeAdjustments";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = 442;
        *(_WORD *)&buf[28] = 2048;
        *(Float64 *)&buf[30] = v36;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&buf[40] = v19;
        _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d Non idle frame. PresentationTime=%f, interArrivalTime=%f ", buf, 0x30u);
      }
    }
    else if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(CMTime *)CMTime buf = v66;
      Float64 v42 = CMTimeGetSeconds((CMTime *)buf);
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v33;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VCScreenCapture_performIdleTimeAdjustments";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&uint8_t buf[24] = 442;
      *(_WORD *)&buf[28] = 2048;
      *(Float64 *)&buf[30] = v42;
      *(_WORD *)&buf[38] = 2048;
      *(double *)&buf[40] = v19;
      _os_log_debug_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEBUG, "VCScreenCapture [%s] %s:%d Non idle frame. PresentationTime=%f, interArrivalTime=%f ", buf, 0x30u);
    }
  }
  extraRowsOnBottouint64_t m = v66;
  *(_OWORD *)CMTime buf = *(_OWORD *)(a1 + 396);
  *(void *)&buf[16] = *(void *)(a1 + 412);
  CMTime extraColumnsOnRight = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  int32_t v37 = CMTimeCompare((CMTime *)buf, &extraColumnsOnRight);
  int v32 = 1;
  if (!v14)
  {
    if (v37)
    {
      if (v19 < 0.00833333333)
      {
        if (*(unsigned char *)(a1 + 486))
        {
          *(unsigned char *)(a1 + 486) = 0;
          int v32 = 0;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v38 = VRTraceErrorLogLevelToCSTR();
            long long v39 = *MEMORY[0x1E4F47A50];
            long long v40 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              int v32 = 0;
              if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_41;
              }
              *(CMTime *)CMTime buf = extraRowsOnBottom;
              Float64 v41 = CMTimeGetSeconds((CMTime *)buf);
              *(_DWORD *)CMTime buf = 136316162;
              *(void *)&uint8_t buf[4] = v38;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VCScreenCapture_validateFrameTime";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = 400;
              *(_WORD *)&buf[28] = 2048;
              *(Float64 *)&buf[30] = v41;
              *(_WORD *)&buf[38] = 2048;
              *(double *)&buf[40] = v19;
              _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d First non idle frame received within 1/120 sec of the last idle frame, not adding frame capture signpost. PresentationTime=%f, interArrivalTime=%f ", buf, 0x30u);
            }
            else if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
            {
              *(CMTime *)CMTime buf = extraRowsOnBottom;
              Float64 v64 = CMTimeGetSeconds((CMTime *)buf);
              *(_DWORD *)CMTime buf = 136316162;
              *(void *)&uint8_t buf[4] = v38;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VCScreenCapture_validateFrameTime";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = 400;
              *(_WORD *)&buf[28] = 2048;
              *(Float64 *)&buf[30] = v64;
              *(_WORD *)&buf[38] = 2048;
              *(double *)&buf[40] = v19;
              _os_log_debug_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEBUG, "VCScreenCapture [%s] %s:%d First non idle frame received within 1/120 sec of the last idle frame, not adding frame capture signpost. PresentationTime=%f, interArrivalTime=%f ", buf, 0x30u);
            }
            int v32 = 0;
          }
        }
      }
    }
  }
LABEL_41:
  *(CMTime *)CMTime buf = extraRowsOnBottom;
  CMTime extraColumnsOnRight = *(CMTime *)(a1 + 396);
  if (CMTimeCompare((CMTime *)buf, &extraColumnsOnRight) < 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v43 = VRTraceErrorLogLevelToCSTR();
      __int16 v44 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(CMTime *)CMTime buf = extraRowsOnBottom;
        Float64 v45 = CMTimeGetSeconds((CMTime *)buf);
        *(_OWORD *)CMTime buf = *(_OWORD *)(a1 + 396);
        *(void *)&buf[16] = *(void *)(a1 + 412);
        Float64 v46 = CMTimeGetSeconds((CMTime *)buf);
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v43;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCScreenCapture_validateFrameTime";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = 410;
        *(_WORD *)&buf[28] = 2048;
        *(Float64 *)&buf[30] = v45;
        *(_WORD *)&buf[38] = 2048;
        *(Float64 *)&buf[40] = v46;
        _os_log_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d Frame PresentationTime %f going backwards with respect to previous frame PresentationTime %f. Dropping frame and not adding frame capture signpost.", buf, 0x30u);
      }
    }
    int v32 = 0;
    int v31 = 1;
    if (!cf) {
      goto LABEL_103;
    }
  }
  else
  {
    int v31 = 0;
    if (!cf) {
      goto LABEL_103;
    }
  }
LABEL_48:
  int v47 = *(_DWORD *)(a1 + 480);
  if (v47 == 2)
  {
    int v49 = 2 * a3;
    if (2 * a3 != 14)
    {
      if (v49 != 8)
      {
        if (v49 == 6) {
          goto LABEL_74;
        }
        goto LABEL_75;
      }
LABEL_73:
      CMTimeFlags v55 = 3;
      goto LABEL_84;
    }
LABEL_76:
    CMTimeFlags v55 = 2;
    goto LABEL_84;
  }
  if (v47 == 3)
  {
    int v48 = 2 * a3;
    if (2 * a3 != 14)
    {
      if (v48 != 8)
      {
        if (v48 == 6) {
          goto LABEL_76;
        }
        goto LABEL_73;
      }
LABEL_74:
      CMTimeFlags v55 = 1;
      goto LABEL_84;
    }
LABEL_75:
    CMTimeFlags v55 = 0;
    goto LABEL_84;
  }
  if (!*(unsigned char *)(a1 + 485))
  {
    size_t v50 = CVPixelBufferGetWidth(v12);
    if (vabds_f32((float)(v50 / CVPixelBufferGetHeight(v12)), (float)*(int *)(a1 + 456) / (float)*(int *)(a1 + 460)) > 0.0001)
    {
      *(unsigned char *)(a1 + 484) = 1;
      *(unsigned char *)(a1 + 485) = 1;
    }
  }
  if (*(unsigned char *)(a1 + 484))
  {
    CFRelease(cf);
    CVPixelBufferRef ResizeFrame = VCMediaRecorderUtil_CreateResizeFrame(v12, *(OpaqueVTPixelTransferSession **)(a1 + 432), *(CVPixelBufferPoolRef *)(a1 + 424));
    *(CMTime *)CMTime buf = v66;
    CFTypeRef cf = createSampleBufferWithPixelBuffer(ResizeFrame, (long long *)buf);
    CVPixelBufferRelease(ResizeFrame);
    if (!cf)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCScreenCapture_handleFrameInternal_cold_5();
        }
      }
      goto LABEL_115;
    }
  }
  size_t v52 = CVPixelBufferGetWidth(v12);
  size_t v53 = CVPixelBufferGetHeight(v12);
  int v54 = 2 * a3;
  if (v52 >= v53)
  {
    switch(v54)
    {
      case 14:
        goto LABEL_74;
      case 8:
        goto LABEL_75;
      case 6:
        goto LABEL_73;
    }
    goto LABEL_76;
  }
  if (v54 == 14)
  {
    CMTimeFlags v55 = 2;
  }
  else if (v54 == 8)
  {
    CMTimeFlags v55 = 3;
  }
  else
  {
    CMTimeFlags v55 = v54 == 6;
  }
  extraRowsOnBottom.os_signpost_id_t value = 0xAAAAAAAAAAAAAAAALL;
  if (!CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CVPixelBufferPoolRef *)(a1 + 448), (CVPixelBufferRef *)&extraRowsOnBottom))
  {
    MEMORY[0x1E4E57720](*(void *)(a1 + 440), v12, extraRowsOnBottom.value);
    memset(buf, 170, 24);
    CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)buf, cf);
    CFRelease(cf);
    CMTime extraColumnsOnRight = *(CMTime *)buf;
    CFTypeRef cf = createSampleBufferWithPixelBuffer((__CVBuffer *)extraRowsOnBottom.value, (long long *)&extraColumnsOnRight.value);
    CVBufferRelease((CVBufferRef)extraRowsOnBottom.value);
    if (cf) {
      goto LABEL_84;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCScreenCapture_handleFrameInternal_cold_1();
      }
    }
LABEL_115:
    CFTypeRef cf = 0;
    goto LABEL_103;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCScreenCapture_handleFrameInternal_cold_4();
    }
  }
LABEL_84:
  if (*(unsigned char *)(a1 + 376) && (a4 & 1) == 0)
  {
    __int16 v56 = *(const void **)(a1 + 384);
    if (v56) {
      CFRelease(v56);
    }
    if (cf) {
      CFTypeRef v57 = CFRetain(cf);
    }
    else {
      CFTypeRef v57 = 0;
    }
    *(void *)(a1 + 384) = v57;
    *(_DWORD *)(a1 + 392) = a3;
    *(unsigned char *)(a1 + 377) = 0;
  }
  IOSurface = CVPixelBufferGetIOSurface(v12);
  if (!v32 || !IOSurface || v14) {
    goto LABEL_99;
  }
  IOSurfaceGetID(IOSurface);
  IOSurfaceGetIndexedTimestamp();
  IOSurfaceGetIndexedTimestamp();
  *(CMTime *)CMTime buf = v66;
  CMTimeGetSeconds((CMTime *)buf);
  kdebug_trace();
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (FigCFDictionarySetInt32())
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCScreenCapture_handleFrameInternal_cold_3();
      }
    }
  }
  else
  {
    if (!FigCFDictionarySetInt64())
    {
      CMSetAttachments(cf, Mutable, 0);
      if (Mutable) {
        CFRelease(Mutable);
      }
LABEL_99:
      if (!v31)
      {
        if ((a4 & 1) == 0) {
          VCScreenCapture_attachUpdateWindowToPixelBuffer(v12);
        }
        long long v60 = *(_OWORD *)&v66.value;
        *(_OWORD *)(a1 + 396) = *(_OWORD *)&v66.value;
        CMTimeEpoch epoch = v66.epoch;
        *(void *)(a1 + 412) = v66.epoch;
        extraColumnsOnRight.os_signpost_id_t value = 0x3AAAA0000;
        extraColumnsOnRight.CMTimeScale timescale = -1431699456;
        extraColumnsOnRight.CMTimeFlags flags = v55;
        LODWORD(extraColumnsOnRight.epoch) = -1431655766;
        LOBYTE(extraColumnsOnRight.epoch) = v55 | 0x90;
        *(_OWORD *)CMTime buf = v60;
        *(void *)&buf[16] = epoch;
        VCVideoCapture_DistributeVideoFrame(a1, (uint64_t)cf, (long long *)buf, (uint64_t)&extraColumnsOnRight);
        ++*(_DWORD *)(a1 + 472);
      }
      goto LABEL_103;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCScreenCapture_handleFrameInternal_cold_2();
      }
    }
  }
LABEL_103:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t VCScreenCapture_attachUpdateWindowToPixelBuffer(__CVBuffer *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFArrayRef Attachment = (const __CFArray *)CVBufferGetAttachment(a1, @"FVDWindowRectangles", 0);
  if (Attachment && CFArrayGetCount(Attachment))
  {
    CFDictionaryRef DictionaryRepresentation = 0;
    CFMutableArrayRef v4 = 0;
    goto LABEL_13;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableArrayRef v4 = Mutable;
    double Width = (double)CVPixelBufferGetWidth(a1);
    double Height = (double)CVPixelBufferGetHeight(a1);
    v30.origin.x = 0.0;
    v30.origin.y = 0.0;
    v30.size.width = Width;
    v30.size.height = Height;
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v30);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (!DictionaryRepresentation)
    {
      uint64_t v13 = 2148073475;
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCScreenCapture_attachUpdateWindowToPixelBuffer_cold_2();
        }
      }
      CFNumberRef v12 = 0;
LABEL_21:
      CFRelease(v4);
LABEL_22:
      if (v12) {
        CFRelease(v12);
      }
      return v13;
    }
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      int v10 = *MEMORY[0x1E4F47A50];
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136316674;
          uint64_t v16 = v9;
          __int16 v17 = 2080;
          __int16 v18 = "VCScreenCapture_attachUpdateWindowToPixelBuffer";
          __int16 v19 = 1024;
          int v20 = 466;
          __int16 v21 = 2048;
          double v22 = Width;
          __int16 v23 = 2048;
          double v24 = Height;
          __int16 v25 = 2048;
          uint64_t v26 = 0;
          __int16 v27 = 2048;
          uint64_t v28 = 0;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d visibleRect=%.2fx%.2f@(%.2f, %.2f)", (uint8_t *)&v15, 0x44u);
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 136316674;
        uint64_t v16 = v9;
        __int16 v17 = 2080;
        __int16 v18 = "VCScreenCapture_attachUpdateWindowToPixelBuffer";
        __int16 v19 = 1024;
        int v20 = 466;
        __int16 v21 = 2048;
        double v22 = Width;
        __int16 v23 = 2048;
        double v24 = Height;
        __int16 v25 = 2048;
        uint64_t v26 = 0;
        __int16 v27 = 2048;
        uint64_t v28 = 0;
        _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, "VCScreenCapture [%s] %s:%d visibleRect=%.2fx%.2f@(%.2f, %.2f)", (uint8_t *)&v15, 0x44u);
      }
    }
    CFArrayAppendValue(v4, DictionaryRepresentation);
    CVBufferSetAttachment(a1, @"FVDWindowRectangles", v4, kCVAttachmentMode_ShouldPropagate);
LABEL_13:
    if (CVBufferGetAttachment(a1, @"FVDWindowScaleFactor", 0))
    {
      CFNumberRef v12 = 0;
    }
    else
    {
      int v15 = 1;
      CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v15);
      if (!v12)
      {
        uint64_t v13 = 2148073475;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCScreenCapture_attachUpdateWindowToPixelBuffer_cold_3();
          }
        }
LABEL_18:
        if (DictionaryRepresentation) {
          CFRelease(DictionaryRepresentation);
        }
        if (!v4) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      CVBufferSetAttachment(a1, @"FVDWindowScaleFactor", v12, kCVAttachmentMode_ShouldPropagate);
    }
    uint64_t v13 = 0;
    goto LABEL_18;
  }
  uint64_t v13 = 2148073475;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCScreenCapture_attachUpdateWindowToPixelBuffer_cold_1();
    }
  }
  return v13;
}

uint64_t createPixelBufferPool(CVPixelBufferPoolRef *a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v7 = objc_msgSend(v6, "initWithObjectsAndKeys:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F2F0F8], @"AVConference:ScreenCaptureResize", *MEMORY[0x1E4F2F128], 0);
  id v8 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v9 = [NSNumber numberWithInt:a2];
  uint64_t v10 = *MEMORY[0x1E4F24E10];
  uint64_t v11 = [NSNumber numberWithInt:a3];
  CFDictionaryRef v12 = (const __CFDictionary *)objc_msgSend(v8, "initWithObjectsAndKeys:", v9, v10, v11, *MEMORY[0x1E4F24D08], &unk_1F3DC3828, *MEMORY[0x1E4F24D70], v7, *MEMORY[0x1E4F24D20], 0);
  uint64_t v13 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v12, a1);

  return v13;
}

void _VCScreenCapture_handleFrame(uint64_t a1, opaqueCMSampleBuffer *a2, int a3)
{
}

uint64_t _VCScreenCapture_clearScreenProc(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  v13.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v13.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  v12.__darwin_time_t tv_sec = 0;
  v12.tv_nsec = 0;
  pthread_setname_np("com.apple.vcscreencapture.clearscreenproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v15 = v2;
      __int16 v16 = 2080;
      __int16 v17 = "_VCScreenCapture_clearScreenProc";
      __int16 v18 = 1024;
      int v19 = 309;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d Clear Screen Thread Started", buf, 0x1Cu);
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
  if ([(id)a1 isClearScreenThreadRunning])
  {
    do
    {
      CFMutableArrayRef v4 = (pthread_cond_t *)(a1 + 248);
      long long v5 = (pthread_mutex_t *)(a1 + 312);
      if (*(unsigned char *)(a1 + 420))
      {
        pthread_cond_timedwait(v4, v5, &v12);
      }
      else
      {
        pthread_cond_wait(v4, v5);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v6 = VRTraceErrorLogLevelToCSTR();
          uint64_t v7 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            uint64_t v15 = v6;
            __int16 v16 = 2080;
            __int16 v17 = "_VCScreenCapture_clearScreenProc";
            __int16 v18 = 1024;
            int v19 = 319;
            _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d Clear Screen Signalled", buf, 0x1Cu);
          }
        }
        gettimeofday(&v13, 0);
        v12.__darwin_time_t tv_sec = v13.tv_sec;
        v12.tv_nsec = 1000 * v13.tv_usec;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 312));
      [(id)a1 processAndSendIdleBlackFrame];
      unint64_t v8 = v12.tv_nsec + 1000000000 * v12.tv_sec + 33333333;
      v12.__darwin_time_t tv_sec = v8 / 0x3B9ACA00;
      v12.tv_nsec = v8 % 0x3B9ACA00;
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
    }
    while (([(id)a1 isClearScreenThreadRunning] & 1) != 0);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 312));
  if ((int)VRTraceGetErrorLogLevelForModule() > 6)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v15 = v9;
      __int16 v16 = 2080;
      __int16 v17 = "_VCScreenCapture_clearScreenProc";
      __int16 v18 = 1024;
      int v19 = 334;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VCScreenCapture [%s] %s:%d Clear Screen Thread Ended", buf, 0x1Cu);
    }
  }
  return a1;
}

uint64_t _VCScreenCapture_UpdateShouldClearScreen(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
  if (*(unsigned __int8 *)(a1 + 420) != a2)
  {
    *(unsigned char *)(a1 + 420) = a2;
    uint64_t v4 = *(void *)(a1 + 160);
    if (v4) {
      VCScreenCaptureManager_ScreenShareDidClearScreen(v4, a2);
    }
    if (a2)
    {
      pthread_cond_signal((pthread_cond_t *)(a1 + 248));
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v5 = VRTraceErrorLogLevelToCSTR();
        uint64_t v6 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 136315650;
          uint64_t v11 = v5;
          __int16 v12 = 2080;
          timeval v13 = "_VCScreenCapture_UpdateShouldClearScreen";
          __int16 v14 = 1024;
          int v15 = 347;
          uint64_t v7 = "VCScreenCapture [%s] %s:%d Enter Clear Screen";
LABEL_11:
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v10, 0x1Cu);
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136315650;
        uint64_t v11 = v8;
        __int16 v12 = 2080;
        timeval v13 = "_VCScreenCapture_UpdateShouldClearScreen";
        __int16 v14 = 1024;
        int v15 = 349;
        uint64_t v7 = "VCScreenCapture [%s] %s:%d Exit Clear Screen";
        goto LABEL_11;
      }
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 312));
}

_OWORD *VCAudioDucker_Allocate(long long *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x38uLL, 0x102004047CAF6D5uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    long long v4 = *a1;
    long long v5 = a1[2];
    v2[1] = a1[1];
    _DWORD v2[2] = v5;
    *uint64_t v2 = v4;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioDucker_Allocate_cold_1();
    }
  }
  return v3;
}

void VCAudioDucker_Destroy(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    *a1 = 0;
    if (v2) {
      free(v2);
    }
  }
}

OpaqueAudioComponentInstance *VCAudioDucker_Start(AudioComponentInstance *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t result = (OpaqueAudioComponentInstance *)os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCAudioDucker_Start_cold_1();
    }
    return 0;
  }
  uint64_t v2 = a1 + 6;
  if (!VCAudioUnit_NewInstance(a1 + 6, 0x6479646Bu))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t result = (OpaqueAudioComponentInstance *)os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCAudioDucker_Start_cold_15();
    }
    return 0;
  }
  OSStatus v3 = AudioUnitSetProperty(a1[6], 0xEu, 0, 0, a1 + 5, 4u);
  if (v3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_14();
      }
    }
LABEL_33:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_13();
      }
    }
    goto LABEL_36;
  }
  do
  {
    OSStatus v4 = AudioUnitSetProperty(a1[6], 8u, 1u, v3, a1, 0x28u);
    if (v4)
    {
      OSStatus v10 = v4;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        __int16 v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v16 = 136316162;
          uint64_t v17 = v11;
          __int16 v18 = 2080;
          int v19 = "_VCAudioDucker_SetProperties";
          __int16 v20 = 1024;
          int v21 = 89;
          __int16 v22 = 1024;
          OSStatus v23 = v10;
          __int16 v24 = 1024;
          AudioUnitElement v25 = v3;
          timeval v13 = " [%s] %s:%d AudioUnitSetProperty kAudioUnitProperty_StreamFormat for kAudioUnitScope_Input err=%d inputNum=%d";
LABEL_75:
          _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0x28u);
        }
      }
      goto LABEL_33;
    }
    ++v3;
  }
  while (v3 != 5);
  AudioUnitElement v5 = 0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    OSStatus v8 = AudioUnitSetProperty(a1[6], 8u, 2u, v5, a1, 0x28u);
    if (v8)
    {
      OSStatus v14 = v8;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        __int16 v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v16 = 136316162;
          uint64_t v17 = v15;
          __int16 v18 = 2080;
          int v19 = "_VCAudioDucker_SetProperties";
          __int16 v20 = 1024;
          int v21 = 94;
          __int16 v22 = 1024;
          OSStatus v23 = v14;
          __int16 v24 = 1024;
          AudioUnitElement v25 = v5;
          timeval v13 = " [%s] %s:%d AudioUnitSetProperty kAudioUnitProperty_StreamFormat for kAudioUnitScope_Output err=%d outputNum=%d";
          goto LABEL_75;
        }
      }
      goto LABEL_33;
    }
    char v6 = 0;
    AudioUnitElement v5 = 1;
  }
  while ((v7 & 1) != 0);
  if (AudioUnitSetParameter(*v2, 2u, 0, 0, -15.0, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_12();
      }
    }
    goto LABEL_68;
  }
  if (AudioUnitSetParameter(*v2, 4u, 0, 0, -32.0, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_11();
      }
    }
    goto LABEL_68;
  }
  if (AudioUnitSetParameter(*v2, 5u, 0, 0, -30.0, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_10();
      }
    }
    goto LABEL_68;
  }
  if (AudioUnitSetParameter(*v2, 7u, 0, 0, -30.0, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_9();
      }
    }
    goto LABEL_68;
  }
  if (AudioUnitSetParameter(*v2, 8u, 0, 0, 0.0, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_8();
      }
    }
    goto LABEL_68;
  }
  if (AudioUnitSetParameter(*v2, 0xDu, 0, 0, 0.15, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_7();
      }
    }
    goto LABEL_68;
  }
  if (AudioUnitSetParameter(*v2, 0xEu, 0, 0, 0.8, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_6();
      }
    }
    goto LABEL_68;
  }
  if (AudioUnitSetParameter(*v2, 0xFu, 0, 0, 1.3, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_5();
      }
    }
    goto LABEL_68;
  }
  if (AudioUnitSetParameter(*v2, 0x10u, 0, 0, 1.0, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_4();
      }
    }
LABEL_68:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDucker_Start_cold_3();
      }
    }
    goto LABEL_36;
  }
  if (!AudioUnitInitialize(*v2)) {
    return (OpaqueAudioComponentInstance *)1;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioDucker_Start_cold_2();
    }
  }
LABEL_36:
  uint64_t result = *v2;
  if (*v2)
  {
    AudioComponentInstanceDispose(result);
    uint64_t result = 0;
    *uint64_t v2 = 0;
  }
  return result;
}

void VCAudioDucker_Stop(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(OpaqueAudioComponentInstance **)(a1 + 48);
    if (v2)
    {
      AudioComponentInstanceDispose(v2);
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioDucker_Stop_cold_1();
    }
  }
}

BOOL VCAudioDucker_Process(UInt64 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3)
  {
    AudioUnitRenderActionFlags ioActionFlags = 512;
    Sampleint Count = VCAudioBufferList_GetSampleCount(a2);
    inTimeStamp.mSampleTime = NAN;
    inTimeStamp.mdouble HostTime = 0xAAAAAAAAAAAAAAAALL;
    inTimeStamp.mRateScalar = NAN;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&inTimeStamp.mWordClockTime = v7;
    *(_OWORD *)&inTimeStamp.mSMPTETime.mType = v7;
    *(void *)&inTimeStamp.mFlags = 0xAAAAAAAAAAAAAAAALL;
    VCAudioBufferList_GetAudioTimestamp(a2, (uint64_t)&inTimeStamp);
    inInputBufferLists[0] = (AudioBufferList *)VCAudioBufferList_GetAudioBufferList(a2);
    inInputBufferLists[1] = 0;
    inInputBufferLists[2] = 0;
    AudioBufferList = (AudioBufferList *)VCAudioBufferList_GetAudioBufferList(a3);
    uint64_t v17 = 0;
    ioOutputBufferLists[0] = inInputBufferLists[0];
    ioOutputBufferLists[1] = AudioBufferList;
    OSStatus v8 = AudioUnitProcessMultiple(*(AudioUnit *)(a1 + 48), &ioActionFlags, &inTimeStamp, SampleCount, 5u, (const AudioBufferList **)inInputBufferLists, 2u, ioOutputBufferLists);
    BOOL v9 = v8 == 0;
    if (v8)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioDucker_Process_cold_1();
        }
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        LODWORD(inTimeStamp.mSampleTime) = 136316418;
        *(void *)((char *)&inTimeStamp.mSampleTime + 4) = v10;
        WORD2(inTimeStamp.mHostTime) = 2080;
        *(UInt64 *)((char *)&inTimeStamp.mHostTime + 6) = (UInt64)"VCAudioDucker_Process";
        HIWORD(inTimeStamp.mRateScalar) = 1024;
        LODWORD(inTimeStamp.mWordClockTime) = 177;
        WORD2(inTimeStamp.mWordClockTime) = 2048;
        *(UInt64 *)((char *)&inTimeStamp.mWordClockTime + 6) = a1;
        HIWORD(inTimeStamp.mSMPTETime.mCounter) = 2048;
        *(void *)&inTimeStamp.mSMPTETime.mType = a2;
        inTimeStamp.mSMPTETime.mHours = 2048;
        *(void *)&inTimeStamp.mSMPTETime.mMinutes = a3;
        _os_log_error_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_ERROR, " [%s] %s:%d invalid parameter, audioDucker=%p sampleBuffer=%p sysaSampleBuffer=%p", (uint8_t *)&inTimeStamp, 0x3Au);
      }
    }
    return 0;
  }
  return v9;
}

uint64_t RTPSendH263Packet(uint64_t a1, char a2, int a3, char a4, char a5, int a6, int a7, char a8, double a9, char a10, void *a11, signed int a12, _DWORD *a13, const void *a14, unsigned __int8 a15, int a16, int a17, unsigned __int8 a18, _DWORD *a19, int a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,long long *a25)
{
  uint64_t v25 = a23;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v39 = -1431655766;
  if (a13)
  {
    *a13 = 0;
    uint64_t v35 = CheckInHandleDebug();
    if (v35 == 0xFFFFFFFFLL)
    {
      VCMediaControlInfoDispose(a23);
      return 2147549190;
    }
    else if (v35)
    {
      int v37 = a7;
      unint64_t v36 = 2147549185;
      *(_WORD *)(v35 + 16) = *(_WORD *)(v35 + 16) & 0x80FF | ((a2 & 0x7F) << 8);
      if ((a2 & 0x7F) == 0x7E)
      {
        if (!a3)
        {
          if (a12 <= 1456)
          {
            LOBYTE(v39) = a10 & 7 | (8 * (a8 & 7));
            BYTE1(v39) = (32 * a4) | (16 * (a5 & 1));
            HIWORD(v39) = 0;
            unint64_t v36 = SendRTP(a1, v35, a6, v37, &v39, 4u, a11, a12, a9, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
                    a23,
                    a24,
                    a25,
                    0,
                    0);
            uint64_t v25 = 0;
          }
          else
          {
            unint64_t v36 = 2147549198;
          }
        }
      }
      else
      {
        unint64_t v36 = 2147549199;
      }
      VCMediaControlInfoDispose(v25);
      CheckOutHandleDebug();
    }
    else
    {
      VCMediaControlInfoDispose(a23);
      return 2147549186;
    }
  }
  else
  {
    unint64_t v36 = 2147549185;
    VCMediaControlInfoDispose(a23);
  }
  return v36;
}

uint64_t RTPProcessH263Packet(uint64_t a1, int *a2, int *a3, unsigned char *a4, unsigned char *a5, CFAllocatorRef structureAllocator, CMBlockBufferRef *blockBufferOut)
{
  uint64_t v7 = 2147549185;
  if (a1 && blockBufferOut)
  {
    OSStatus v8 = (uint64_t *)(a1 + 152);
    if (!*(void *)(a1 + 152)) {
      return 2147549199;
    }
    BOOL v9 = *(unsigned char **)(a1 + 160);
    if ((*v9 & 0xC0) == 0x80)
    {
      *a4 = (*v9 >> 3) & 7;
      *a5 = *v9 & 7;
      *a2 = v9[1] >> 5;
      *a3 = v9[4] >> 7;
      uint64_t v10 = *v8;
      if ((unint64_t)*v8 <= 7)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPProcessH263Packet_cold_3();
          }
        }
        return 2147549199;
      }
      size_t v11 = 8;
    }
    else
    {
      if ((*v9 & 0xC0) != 0) {
        return 2147549200;
      }
      *a4 = (*v9 >> 3) & 7;
      *a5 = *v9 & 7;
      *a2 = v9[1] >> 5;
      *a3 = (v9[1] >> 4) & 1;
      uint64_t v10 = *v8;
      if ((unint64_t)*v8 <= 3)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPProcessH263Packet_cold_1();
          }
        }
        return 2147549199;
      }
      size_t v11 = 4;
    }
    __int16 v12 = (OpaqueCMBlockBuffer *)(v10 - v11);
    timeval v13 = (OpaqueCMBlockBuffer *)(*(void *)(a1 + 160) + v11);
    blockBufferOut[1] = v12;
    CMBlockBufferRef blockBufferOut[2] = v13;
    OSStatus v14 = CMBlockBufferCreateWithBufferReference(structureAllocator, *(CMBlockBufferRef *)(a1 + 144), v11, (size_t)v12, 0, blockBufferOut);
    if (v14)
    {
      int v15 = v14;
      uint64_t v7 = 2147549187;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        uint64_t v17 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPProcessH263Packet_cold_2(v16, v15, v17);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t VCTimescale_InitializeTimescaleAlgo(int *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  __int16 v12 = a1 + 8675;
  int v13 = HasMulticore();
  if (a4 < 5)
  {
    int v18 = v13;
    int v19 = a6;
    if (a4 >= 2)
    {
      int v19 = a6;
      if (a6 == 1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 5)
        {
          int v19 = 0;
        }
        else
        {
          uint64_t v20 = VRTraceErrorLogLevelToCSTR();
          int v21 = *MEMORY[0x1E4F47A50];
          BOOL v22 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
          int v19 = 0;
          if (v22)
          {
            int v48 = 136315906;
            uint64_t v49 = v20;
            __int16 v50 = 2080;
            unsigned int v51 = "_VCTimescale_TimescaleEnablement";
            __int16 v52 = 1024;
            int v53 = 46;
            __int16 v54 = 1024;
            LODWORD(v55) = a4;
            _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Disable WSOLA Timescale selected for channelCount=%d", (uint8_t *)&v48, 0x22u);
            int v19 = 0;
            int v17 = 0;
            if (!v18) {
              goto LABEL_15;
            }
LABEL_13:
            int v17 = v19;
            goto LABEL_15;
          }
        }
      }
    }
    if (!v18) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 7)
  {
LABEL_14:
    int v17 = 0;
    goto LABEL_15;
  }
  uint64_t v14 = VRTraceErrorLogLevelToCSTR();
  int v15 = *MEMORY[0x1E4F47A50];
  BOOL v16 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
  int v17 = 0;
  if (v16)
  {
    int v48 = 136315906;
    uint64_t v49 = v14;
    __int16 v50 = 2080;
    unsigned int v51 = "_VCTimescale_TimescaleEnablement";
    __int16 v52 = 1024;
    int v53 = 44;
    __int16 v54 = 1024;
    LODWORD(v55) = a4;
    _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Timescale Disabled channelCount[%d]", (uint8_t *)&v48, 0x22u);
    goto LABEL_14;
  }
LABEL_15:
  *a1 = v17;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v23 = VRTraceErrorLogLevelToCSTR();
    __int16 v24 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *a1;
      int v48 = 136315906;
      uint64_t v49 = v23;
      __int16 v50 = 2080;
      unsigned int v51 = "_VCTimescale_TimescaleEnablement";
      __int16 v52 = 1024;
      int v53 = 51;
      __int16 v54 = 1024;
      LODWORD(v55) = v25;
      _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Timescale algorithm selected is %d", (uint8_t *)&v48, 0x22u);
    }
  }
  *(unsigned char *)__int16 v12 = a4;
  uint64_t v26 = malloc_type_malloc(0x40uLL, 0x80040A284212CuLL);
  *(void *)(v12 + 1) = v26;
  if (v26)
  {
    int v27 = *a1 - 1;
    if (v27 >= 3)
    {
      v26[2] = 0u;
      v26[3] = 0u;
      *uint64_t v26 = 0u;
      v26[1] = 0u;
      if (!**(void **)(v12 + 1))
      {
        uint64_t v36 = 0;
LABEL_35:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v43 = VRTraceErrorLogLevelToCSTR();
          __int16 v44 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v45 = *a1;
            if (*a1 == 1)
            {
              Float64 v46 = "WSOLA";
            }
            else
            {
              Float64 v46 = "PSOLA";
              if (v45 != 2 && v45 != 3) {
                Float64 v46 = "Empty";
              }
            }
            int v48 = 136315906;
            uint64_t v49 = v43;
            __int16 v50 = 2080;
            unsigned int v51 = "VCTimescale_InitializeTimescaleAlgo";
            __int16 v52 = 1024;
            int v53 = 127;
            __int16 v54 = 2080;
            CMTimeFlags v55 = v46;
            _os_log_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s Timescale successfully initialized ", (uint8_t *)&v48, 0x26u);
          }
        }
        return v36;
      }
    }
    else
    {
      uint64_t v28 = off_1F3D3E190[v27];
      uint64_t v29 = off_1F3D3E1A8[v27];
      CGRect v30 = off_1F3D3E1C0[v27];
      int v31 = off_1F3D3E1D8[v27];
      int v32 = off_1F3D3E1F0[v27];
      uint64_t v33 = off_1F3D3E208[v27];
      long long v34 = off_1F3D3E220[v27];
      uint64_t v35 = (uint64_t)*(&off_1F3D3E238 + v27);
      *(void *)uint64_t v26 = v28;
      *((void *)v26 + 1) = v29;
      *((void *)v26 + 4) = v32;
      *((void *)v26 + 5) = v31;
      *((void *)v26 + 2) = v30;
      *((void *)v26 + 3) = v33;
      *((void *)v26 + 6) = v34;
      *((void *)v26 + 7) = v35;
    }
    BOOL v40 = a6 == 2 || (a6 & 0xFFFFFFFD) == 1;
    BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"audioTimescalingHysteresisEnabled", v40);
    uint64_t v36 = (**(uint64_t (***)(int *, uint64_t, uint64_t, uint64_t, BOOL))(v12 + 1))(a1, a2, a3, a5, BoolValueForKey);
    if ((v36 & 0x80000000) != 0)
    {
      Float64 v42 = *(_OWORD **)(v12 + 1);
      if (v42)
      {
        v42[2] = 0u;
        v42[3] = 0u;
        *Float64 v42 = 0u;
        v42[1] = 0u;
      }
    }
    goto LABEL_35;
  }
  uint64_t v36 = 2147549187;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v37 = VRTraceErrorLogLevelToCSTR();
    uint64_t v38 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCTimescale_InitializeTimescaleAlgo_cold_1(v37, v38);
    }
  }
  return v36;
}

uint64_t VCTimescale_UpdateTimescaleHistoryBuffer(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = *(uint64_t (**)(void))(*(void *)(result + 34704) + 24);
    if (v1)
    {
      if (*(_DWORD *)result) {
        return v1();
      }
    }
  }
  return result;
}

uint64_t VCTimescale_ActiveSpeechAdapt(uint64_t a1)
{
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(a1 + 34704) + 32);
  if (v1 && *(_DWORD *)a1) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t VCTimescale_IsCompressionNeeded(uint64_t a1)
{
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(a1 + 34704) + 40);
  if (v1 && *(_DWORD *)a1) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t VCTimescale_TailSize(uint64_t a1)
{
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(a1 + 34704) + 16);
  if (v1 && *(_DWORD *)a1) {
    return v1();
  }
  else {
    return 0;
  }
}

void VCTimescale_Finalize(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 34704);
  OSStatus v3 = *(void **)(a1 + 34704);
  if (v3)
  {
    OSStatus v4 = (void (*)(uint64_t))v3[1];
    if (v4)
    {
      if (*(_DWORD *)a1)
      {
        v4(a1);
        OSStatus v3 = *v2;
      }
    }
    free(v3);
    *uint64_t v2 = 0;
  }
}

uint64_t VCTimescale_TailExtractAvailable(uint64_t a1)
{
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(a1 + 34704) + 48);
  if (v1 && *(_DWORD *)a1) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t VCTimescale_WarpFrameSize(uint64_t a1)
{
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(a1 + 34704) + 56);
  if (v1 && *(_DWORD *)a1) {
    return v1();
  }
  else {
    return 0;
  }
}

uint64_t RTPSendH264Packet(uint64_t a1, char a2, unsigned int a3, int a4, int a5, void *a6, signed int a7, _DWORD *a8, double a9, const void *a10, unsigned __int8 a11, int a12, int a13, unsigned __int8 a14, _DWORD *a15, int a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,long long *a21,char a22,int a23)
{
  uint64_t v23 = a19;
  unint64_t v24 = 2147549198;
  if (a8)
  {
    *a8 = 0;
    uint64_t v34 = CheckInHandleDebug();
    if (v34 == 0xFFFFFFFFLL)
    {
      VCMediaControlInfoDispose(a19);
      return 2147549190;
    }
    else if (v34)
    {
      if (a7 >= 1
        && ((*(_WORD *)(v34 + 16) = *(_WORD *)(v34 + 16) & 0x80FF | ((a2 & 0x7F) << 8), (a2 & 0x7F) == 0x7B)
         || (a2 & 0x7F) == 0x64))
      {
        if (a3 <= 1)
        {
          if (a7 < 0x5B5)
          {
            unint64_t v24 = SendRTP(a1, v34, a4, a5, 0, 0, a6, a7, a9, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23);
            uint64_t v23 = 0;
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSendH264Packet_cold_1();
            }
          }
        }
        else
        {
          unint64_t v24 = 2147549185;
        }
      }
      else
      {
        unint64_t v24 = 2147549199;
      }
      VCMediaControlInfoDispose(v23);
      CheckOutHandleDebug();
    }
    else
    {
      VCMediaControlInfoDispose(a19);
      return 2147549186;
    }
  }
  else
  {
    VCMediaControlInfoDispose(a19);
    return 2147549185;
  }
  return v24;
}

uint64_t RTPProcessH264FragmentationHeader(uint64_t a1, int a2, int *a3, int *a4, _WORD *a5, unsigned char *a6, int *a7, int a8)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2 > 0)
  {
    int v13 = *(unsigned char *)a1 & 0x1F;
    if (a7) {
      *a7 = v13;
    }
    if (a6) {
      *a6 = 0;
    }
    switch(v13)
    {
      case 25:
        if (a3) {
          *a3 = 1;
        }
        if (a4) {
          *a4 = 1;
        }
        uint64_t v14 = 0;
        if (!a5 || !a6) {
          goto LABEL_47;
        }
        if (a2 < 3)
        {
          uint64_t v14 = 2147549199;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPProcessH264FragmentationHeader_cold_6();
            }
          }
          goto LABEL_47;
        }
        *a5 = bswap32(*(unsigned __int16 *)(a1 + 1)) >> 16;
        *a6 = 1;
        if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
          goto LABEL_46;
        }
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        BOOL v16 = *MEMORY[0x1E4F47A50];
        int v17 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
            RTPProcessH264FragmentationHeader_cold_5();
          }
          goto LABEL_46;
        }
        uint64_t v14 = 0;
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v18 = (unsigned __int16)*a5;
        int v24 = 136315906;
        uint64_t v25 = v15;
        __int16 v26 = 2080;
        int v27 = "RTPProcessH264FragmentationHeader";
        __int16 v28 = 1024;
        int v29 = 197;
        __int16 v30 = 1024;
        int v31 = v18;
        int v19 = " [%s] %s:%d STAP-B Decoding order is %hu";
        break;
      case 29:
        _RTPProcessH264FragmentationHeaderStartEndBits(a1, a2, a3, a4);
        uint64_t v14 = 0;
        if (!a5 || !a6) {
          goto LABEL_47;
        }
        if (a2 < 4)
        {
          uint64_t v14 = 2147549199;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPProcessH264FragmentationHeader_cold_4();
            }
          }
          goto LABEL_47;
        }
        *a5 = bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
        *a6 = 1;
        if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
          goto LABEL_46;
        }
        uint64_t v20 = VRTraceErrorLogLevelToCSTR();
        BOOL v16 = *MEMORY[0x1E4F47A50];
        int v21 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
            RTPProcessH264FragmentationHeader_cold_3();
          }
          goto LABEL_46;
        }
        uint64_t v14 = 0;
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        int v22 = (unsigned __int16)*a5;
        int v24 = 136315906;
        uint64_t v25 = v20;
        __int16 v26 = 2080;
        int v27 = "RTPProcessH264FragmentationHeader";
        __int16 v28 = 1024;
        int v29 = 180;
        __int16 v30 = 1024;
        int v31 = v22;
        int v19 = " [%s] %s:%d FU-B Decoding order is %hu";
        break;
      case 28:
        _RTPProcessH264FragmentationHeaderStartEndBits(a1, a2, a3, a4);
LABEL_46:
        uint64_t v14 = 0;
        goto LABEL_47;
      default:
        if (a3) {
          *a3 = 1;
        }
        if (!a4) {
          goto LABEL_46;
        }
        uint64_t v14 = 0;
        *a4 = 1;
LABEL_47:
        if (a6)
        {
          if (a8)
          {
            if (!*a6 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                RTPProcessH264FragmentationHeader_cold_2();
              }
            }
          }
        }
        return v14;
    }
    _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v24, 0x22u);
    goto LABEL_46;
  }
  uint64_t v14 = 2147549199;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTPProcessH264FragmentationHeader_cold_1();
    }
  }
  return v14;
}

void _RTPProcessH264FragmentationHeaderStartEndBits(uint64_t a1, int a2, int *a3, int *a4)
{
  if (a2 > 1)
  {
    if (a3) {
      *a3 = *(unsigned __int8 *)(a1 + 1) >> 7;
    }
    if (a4) {
      *a4 = (*(unsigned __int8 *)(a1 + 1) >> 6) & 1;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _RTPProcessH264FragmentationHeaderStartEndBits_cold_1();
    }
  }
}

uint64_t RTPProcessH264Packet(uint64_t a1, uint64_t a2)
{
  targetBBuf[1] = *(CMBlockBufferRef *)MEMORY[0x1E4F143B8];
  OSStatus v4 = *(unsigned char **)(a2 + 24);
  if (v4) {
    *OSStatus v4 = 0;
  }
  uint64_t appended = 2147549187;
  size_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    return 2147549199;
  }
  char v7 = **(unsigned char **)(a1 + 16);
  switch(v7 & 0x1F)
  {
    case 0x18:
      int v8 = 0;
      goto LABEL_9;
    case 0x19:
      int v8 = 1;
LABEL_9:
      return _RTPProcessSTAPPacket(a1, a2, v8);
    case 0x1C:
      int v10 = 0;
      goto LABEL_19;
    case 0x1D:
      int v10 = 1;
LABEL_19:
      return _RTPProcessFUPacket(a1, a2, v10, v7);
    default:
      **(unsigned char **)a2 = 1;
      **(unsigned char **)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1;
      targetBBuf[0] = 0;
      OSStatus DataPointer = VCBlockBufferUtilities_CreateAndGetDataPointer(*(const __CFAllocator **)(a2 + 32), 0, 4uLL, *(const __CFAllocator **)(a2 + 40), 0, 0, 4uLL, 1u, targetBBuf);
      if (DataPointer)
      {
        *(_DWORD *)OSStatus DataPointer = bswap32(v6);
        uint64_t appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a2 + 48), targetBBuf[0], 0, 4uLL, 0);
        if (appended)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPProcessH264Packet_cold_3();
            }
          }
        }
        else
        {
          if (!CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a2 + 48), *(CMBlockBufferRef *)a1, 0, v6, 0)) {
            goto LABEL_16;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPProcessH264Packet_cold_2();
            }
          }
        }
        uint64_t appended = 2147549187;
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPProcessH264Packet_cold_1();
        }
      }
LABEL_16:
      if (targetBBuf[0]) {
        CFRelease(targetBBuf[0]);
      }
      break;
  }
  return appended;
}

uint64_t _RTPProcessSTAPPacket(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(a1 + 8);
  CMBlockBufferRef targetBBuf = 0;
  if (v3)
  {
    uint64_t v6 = 1;
    **(unsigned char **)a2 = 1;
    **(unsigned char **)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1;
    unint64_t v7 = v3 - 1;
    if (!a3) {
      goto LABEL_13;
    }
    if (v3 > 2)
    {
      BOOL v9 = (unsigned __int16 **)(a2 + 16);
      int v8 = *(_WORD **)(a2 + 16);
      if (v8)
      {
        int v10 = *(unsigned char **)(a2 + 24);
        if (v10)
        {
          *int v8 = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 16) + 1)) >> 16;
          *int v10 = 1;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v11 = VRTraceErrorLogLevelToCSTR();
            __int16 v12 = *MEMORY[0x1E4F47A50];
            int v13 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                int v14 = **v9;
                *(_DWORD *)CMTime buf = 136315906;
                uint64_t v26 = v11;
                __int16 v27 = 2080;
                __int16 v28 = "_RTPProcessSTAPPacket";
                __int16 v29 = 1024;
                int v30 = 238;
                __int16 v31 = 1024;
                int v32 = v14;
                _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d STAP-B Decoding order is %hu", buf, 0x22u);
              }
            }
            else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              _RTPProcessSTAPPacket_cold_8();
            }
          }
        }
      }
      unint64_t v7 = v3 - 3;
      uint64_t v6 = 3;
LABEL_13:
      if (v7)
      {
        while (v7 != 1)
        {
          unint64_t v15 = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 16) + v6)) >> 16;
          BOOL v16 = v7 - 2 >= v15;
          unint64_t v7 = v7 - 2 - v15;
          if (!v16)
          {
            uint64_t v21 = 2147549199;
            int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
            if (ErrorLogLevelForModule >= 3)
            {
              uint64_t v23 = VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTPProcessSTAPPacket_cold_3(v23);
              }
            }
            goto LABEL_24;
          }
          CFAllocatorRef v17 = *(const __CFAllocator **)(a2 + 32);
          CFAllocatorRef v18 = *(const __CFAllocator **)(a2 + 40);
          CMBlockBufferRef targetBBuf = 0;
          OSStatus DataPointer = VCBlockBufferUtilities_CreateAndGetDataPointer(v17, 0, 4uLL, v18, 0, 0, 4uLL, 1u, &targetBBuf);
          if (!DataPointer)
          {
            uint64_t v21 = 2147549187;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTPProcessSTAPPacket_cold_4();
              }
            }
            goto LABEL_24;
          }
          *(_DWORD *)OSStatus DataPointer = bswap32(v15);
          if (CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a2 + 48), targetBBuf, 0, 4uLL, 0))
          {
            uint64_t v21 = 2147549187;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTPProcessSTAPPacket_cold_6();
              }
            }
            goto LABEL_24;
          }
          if (CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a2 + 48), *(CMBlockBufferRef *)a1, v6 + 2, v15, 0))
          {
            uint64_t v21 = 2147549187;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTPProcessSTAPPacket_cold_5();
              }
            }
            goto LABEL_24;
          }
          if (targetBBuf)
          {
            CFRelease(targetBBuf);
            CMBlockBufferRef targetBBuf = 0;
          }
          v6 += 2 + v15;
          if (!v7) {
            goto LABEL_23;
          }
        }
        uint64_t v21 = 2147549199;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTPProcessSTAPPacket_cold_7();
          }
        }
      }
      else
      {
LABEL_23:
        uint64_t v21 = 0;
      }
      goto LABEL_24;
    }
    uint64_t v21 = 2147549199;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPProcessSTAPPacket_cold_2();
      }
    }
  }
  else
  {
    uint64_t v21 = 2147549199;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return v21;
    }
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _RTPProcessSTAPPacket_cold_1();
    }
  }
LABEL_24:
  if (targetBBuf) {
    CFRelease(targetBBuf);
  }
  return v21;
}

uint64_t _RTPProcessFUPacket(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 8);
  CMBlockBufferRef targetBBuf = 0;
  if (v4 <= 1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 2147549199;
    }
    VRTraceErrorLogLevelToCSTR();
    uint64_t v5 = 2147549199;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _RTPProcessFUPacket_cold_1();
    }
    return v5;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  int v10 = *(unsigned char **)a2;
  if (a3)
  {
    *int v10 = *(unsigned char *)(v9 + 1) >> 7;
    **(unsigned char **)(a2 + _Block_object_dispose(&STACK[0x250], 8) = (*(unsigned char *)(v9 + 1) & 0x40) != 0;
    unsigned __int8 v11 = *(unsigned char *)(v9 + 1);
    int v13 = (unsigned __int16 **)(a2 + 16);
    __int16 v12 = *(_WORD **)(a2 + 16);
    if (v12)
    {
      int v14 = *(unsigned char **)(a2 + 24);
      if (v14)
      {
        *__int16 v12 = bswap32(*(unsigned __int16 *)(v9 + 2)) >> 16;
        *int v14 = 1;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v15 = VRTraceErrorLogLevelToCSTR();
          BOOL v16 = *MEMORY[0x1E4F47A50];
          CFAllocatorRef v17 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              int v18 = **v13;
              *(_DWORD *)CMTime buf = 136315906;
              uint64_t v26 = v15;
              __int16 v27 = 2080;
              __int16 v28 = "_RTPProcessFUPacket";
              __int16 v29 = 1024;
              int v30 = 306;
              __int16 v31 = 1024;
              int v32 = v18;
              _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d FU-B Decoding order is %hu", buf, 0x22u);
            }
          }
          else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            _RTPProcessFUPacket_cold_5();
          }
        }
      }
    }
    int v19 = -3;
    size_t v20 = 4;
  }
  else
  {
    unsigned __int8 v11 = *(unsigned char *)(v9 + 1);
    *int v10 = v11 >> 7;
    **(unsigned char **)(a2 + _Block_object_dispose(&STACK[0x250], 8) = (v11 & 0x40) != 0;
    int v19 = -1;
    size_t v20 = 2;
  }
  if (!**(unsigned char **)a2) {
    goto LABEL_20;
  }
  OSStatus DataPointer = VCBlockBufferUtilities_CreateAndGetDataPointer(*(const __CFAllocator **)(a2 + 32), 0, 5uLL, *(const __CFAllocator **)(a2 + 40), 0, 0, 5uLL, 1u, &targetBBuf);
  if (!DataPointer)
  {
    uint64_t v5 = 2147549187;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPProcessFUPacket_cold_3();
      }
    }
    goto LABEL_21;
  }
  *(_DWORD *)OSStatus DataPointer = bswap32(v19 + v4);
  DataPointer[4] = v11 & 0x1F | a4 & 0xE0;
  if (CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a2 + 48), targetBBuf, 0, 5uLL, 0))
  {
    uint64_t v5 = 2147549187;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPProcessFUPacket_cold_4();
      }
    }
  }
  else
  {
LABEL_20:
    OSStatus appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a2 + 48), *(CMBlockBufferRef *)a1, v20, v4 - v20, 0);
    uint64_t v5 = 0;
    if (appended)
    {
      uint64_t v5 = 2147549187;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTPProcessFUPacket_cold_2();
        }
      }
    }
  }
LABEL_21:
  if (targetBBuf) {
    CFRelease(targetBBuf);
  }
  return v5;
}

uint64_t _VCCannedVideoPacketSource_InjectionThread(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1);
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  char v41 = 0;
  bzero(v44, 0x17B8uLL);
  v40.__darwin_time_t tv_sec = 0;
  *(void *)&v40.__darwin_suseconds_t tv_usec = 0;
  gettimeofday(&v40, 0);
  setRealTimeConstraints(0.0);
  bzero(&v55, 0x17B8uLL);
  char v42 = 0;
  do
  {
    _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers(v2, (uint64_t)&v55, &v42);
    if (v42)
    {
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      uint64_t v38 = (os_log_t *)MEMORY[0x1E4F47A50];
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR)) {
          _VCCannedVideoPacketSource_InjectionThread_cold_2();
        }
      }
      [*(id *)(v2 + 16) seekToFileOffset:0];
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR)) {
          _VCCannedVideoPacketSource_InjectionThread_cold_1();
        }
      }
      return 0;
    }
  }
  while (LOBYTE(v55.value) != 1 || v55.timescale != 0);
  LODWORD(v1) = v57;
  memset(&v43, 170, sizeof(v43));
  HostTimeClocuint64_t k = CMClockGetHostTimeClock();
  CMClockGetTime(&v43, HostTimeClock);
  id v5 = +[VCCannedAVSync sharedCannedAVSync];
  VCCannedAVSync_SetBase((uint64_t)v5, (double)v43.value / (double)v43.timescale);
  double v6 = (double)v1 / 90000.0;
  double v7 = VCCannedAVSync_AddDrift((uint64_t)v5, v6);
  if (LOBYTE(v55.value) == 2)
  {
    double v7 = NTPToMicro(*(uint64_t *)&v55.timescale);
    double v8 = v7;
  }
  else
  {
    if (LOBYTE(v55.value) != 1) {
      goto LABEL_13;
    }
    if (v55.timescale == 1)
    {
      double v8 = v56;
    }
    else
    {
      if (!v55.timescale)
      {
        double v8 = v58;
        goto LABEL_16;
      }
LABEL_13:
      double v8 = NAN;
    }
  }
LABEL_16:
  objc_msgSend(*(id *)(v2 + 16), "seekToFileOffset:", 0, v7);
  _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers(v2, (uint64_t)v44, &v41);
  int v39 = (pthread_mutex_t *)(v2 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 88));
  if (!*(unsigned char *)(v2 + 80))
  {
    __darwin_time_t tv_sec = v40.tv_sec;
    __darwin_suseconds_t tv_usec = v40.tv_usec;
    while (1)
    {
      v43.CMTimeValue value = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&v43.CMTimeScale timescale = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&v55.CMTimeScale timescale = 0;
      v55.CMTimeValue value = 0;
      gettimeofday((timeval *)&v55, 0);
      CMTimeValue value = tv_sec;
      do
      {
        while (1)
        {
          if (tv_usec <= 979999)
          {
            int v12 = 20000;
          }
          else
          {
            __darwin_time_t tv_sec = ++value;
            int v12 = -980000;
          }
          tv_usec += v12;
          double v8 = v8 + 0.02;
          if (value == v55.value) {
            break;
          }
          if (value >= v55.value) {
            goto LABEL_26;
          }
        }
      }
      while (tv_usec < v55.timescale);
      CMTimeValue value = v55.value;
LABEL_26:
      v43.CMTimeValue value = value;
      *(void *)&v43.CMTimeScale timescale = 1000 * tv_usec;
      if (pthread_cond_timedwait((pthread_cond_t *)(v2 + 152), v39, (const timespec *)&v43) == 60) {
        break;
      }
LABEL_86:
      if (*(unsigned char *)(v2 + 80)) {
        goto LABEL_87;
      }
    }
    double v13 = micro();
    while (2)
    {
      if (v44[0] == 2)
      {
        double v14 = NTPToMicro(v45);
      }
      else
      {
        if (v44[0] != 1) {
          goto LABEL_86;
        }
        if (v45 == 1)
        {
          double v14 = v47[0];
        }
        else
        {
          if (v45) {
            goto LABEL_86;
          }
          double v14 = v48;
        }
      }
      if (v14 >= v8) {
        goto LABEL_86;
      }
      int v15 = v44[0];
      if (v44[0] == 2)
      {
        unint64_t v45 = MicroToNTP(v13);
        int v15 = v44[0];
        unint64_t v16 = 0x1E4F28000;
      }
      else
      {
        unint64_t v16 = 0x1E4F28000uLL;
        if (v44[0] == 1)
        {
          CFAllocatorRef v17 = &v48;
          if (!v45 || (CFAllocatorRef v17 = v47, v45 == 1))
          {
            double *v17 = v13;
            goto LABEL_45;
          }
LABEL_51:
          int v19 = 0;
          LOBYTE(v1_Block_object_dispose(&STACK[0x250], 8) = 0;
          goto LABEL_52;
        }
      }
      if (v15 == 1)
      {
LABEL_45:
        if (v45) {
          int v19 = 0;
        }
        else {
          int v19 = v49;
        }
        if (v45) {
          LOBYTE(v1_Block_object_dispose(&STACK[0x250], 8) = 0;
        }
        else {
          LOBYTE(v1_Block_object_dispose(&STACK[0x250], 8) = v49[24];
        }
      }
      else
      {
        if (v15 != 2) {
          goto LABEL_51;
        }
        LOBYTE(v1_Block_object_dispose(&STACK[0x250], 8) = v54[24];
        int v19 = v54;
      }
LABEL_52:
      size_t v20 = (void *)[objc_alloc(*(Class *)(v16 + 3792)) initWithInt:0];
      uint64_t v21 = [*(id *)(v2 + 56) objectForKeyedSubscript:v20];
      uint64_t v22 = [*(id *)(v2 + 64) objectForKeyedSubscript:v20];

      int v23 = v44[0];
      if (v44[0] == 2)
      {
        if (!(_BYTE)v18)
        {
          uint64_t v21 = v22;
          if (v22) {
            goto LABEL_62;
          }
        }
        if ((_BYTE)v18)
        {
          uint64_t v18 = v18;
          do
          {
            id v28 = objc_alloc(NSNumber);
            unsigned int v29 = *(unsigned __int16 *)v19;
            v19 += 2;
            int v30 = (void *)[v28 initWithInt:v29];
            uint64_t v31 = [*(id *)(v2 + 64) objectForKeyedSubscript:v30];
            (*(void (**)(uint64_t, unint64_t *))(v31 + 16))(v31, &v45);

            --v18;
          }
          while (v18);
        }
LABEL_66:
        int v23 = v44[0];
      }
      else if (v44[0] == 1)
      {
        if ((_BYTE)v18 || !v21)
        {
          if ((_BYTE)v18)
          {
            uint64_t v18 = v18;
            do
            {
              id v24 = objc_alloc(NSNumber);
              unsigned int v25 = *(unsigned __int16 *)v19;
              v19 += 2;
              uint64_t v26 = (void *)[v24 initWithInt:v25];
              uint64_t v27 = [*(id *)(v2 + 56) objectForKeyedSubscript:v26];
              (*(void (**)(uint64_t, unint64_t *))(v27 + 16))(v27, &v45);

              --v18;
            }
            while (v18);
          }
          goto LABEL_66;
        }
LABEL_62:
        (*(void (**)(uint64_t, unint64_t *))(v21 + 16))(v21, &v45);
        goto LABEL_66;
      }
      if (v23 == 1)
      {
        if (!v45)
        {
          VCBlockBuffer_Clear((uint64_t)v51);
          VCBlockBuffer_Clear((uint64_t)v52);
          VCBlockBuffer_Clear((uint64_t)v53);
        }
      }
      else if (v23 == 2)
      {
        if (v46)
        {
          for (unint64_t i = 0; i < v46; v47[i++] = 0.0)
            CFAllocatorDeallocate(*(CFAllocatorRef *)(v2 + 40), *(void **)&v47[i]);
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers(v2, (uint64_t)v44, &v41);
      if (v41)
      {
        if (v44[0] == 2)
        {
          double v8 = NTPToMicro(v45);
        }
        else
        {
          if (v44[0] != 1) {
            goto LABEL_82;
          }
          if (v45 == 1)
          {
            double v8 = v47[0];
            goto LABEL_85;
          }
          if (v45) {
LABEL_82:
          }
            double v8 = NAN;
          else {
            double v8 = v48;
          }
        }
LABEL_85:
        memset(&v55, 170, sizeof(v55));
        uint64_t v33 = CMClockGetHostTimeClock();
        CMClockGetTime(&v55, v33);
        id v34 = +[VCCannedAVSync sharedCannedAVSync];
        VCCannedAVSync_SetBase((uint64_t)v34, (double)v55.value / (double)v55.timescale);
        VCCannedAVSync_AddDrift((uint64_t)v34, v6);
        goto LABEL_86;
      }
      continue;
    }
  }
LABEL_87:
  if (v44[0] == 1)
  {
    if (!v45)
    {
      VCBlockBuffer_Clear((uint64_t)v51);
      VCBlockBuffer_Clear((uint64_t)v52);
      VCBlockBuffer_Clear((uint64_t)v53);
    }
  }
  else if (v44[0] == 2)
  {
    if (v46)
    {
      for (unint64_t j = 0; j < v46; v47[j++] = 0.0)
        CFAllocatorDeallocate(*(CFAllocatorRef *)(v2 + 40), *(void **)&v47[j]);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  pthread_mutex_unlock(v39);
  return 0;
}

uint64_t VCCannedVideoPacketSource_RegisterForCannedReplay(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  if (v4 == 1)
  {
    if (!a2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCCannedVideoPacketSource_RegisterForCannedReplay_cold_4();
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCCannedVideoPacketSource_RegisterForCannedReplay_cold_3();
        }
      }
      return 2147549183;
    }
    aBlocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v17 = 3221225472;
    uint64_t v18 = ___VCCannedVideoPacketSource_RegisterRTPCallback_block_invoke;
    int v19 = &unk_1E6DB5930;
    size_t v20 = a3;
    uint64_t v21 = a2;
    int v12 = _Block_copy(&aBlock);
    objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v12, objc_msgSend(NSNumber, "numberWithUnsignedShort:", *a2));
    _Block_release(v12);
    aBlocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v17 = 3221225472;
    uint64_t v18 = ___VCCannedVideoPacketSource_RegisterRTCPCallback_block_invoke;
    int v19 = &unk_1E6DB5958;
    size_t v20 = a4;
    uint64_t v21 = a2;
    double v13 = _Block_copy(&aBlock);
    objc_msgSend(*(id *)(a1 + 64), "setObject:forKeyedSubscript:", v13, objc_msgSend(NSNumber, "numberWithUnsignedShort:", *a2));
    _Block_release(v13);
    return 0;
  }
  if (v4 != 2) {
    return 2147549183;
  }
  uint64_t v8 = *((void *)a2 + 6);
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  uint64_t v18 = ___VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks_block_invoke;
  int v19 = &unk_1E6DB58E0;
  size_t v20 = (unsigned __int16 *)a1;
  uint64_t v21 = a3;
  uint64_t v9 = RTPRegisterPacketCallback(v8, (uint64_t)a2, &aBlock);
  if ((v9 & 0x80000000) != 0)
  {
    unint64_t v11 = v9;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCCannedVideoPacketSource_RegisterForCannedReplay_cold_1();
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a2 + 6);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = ___VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks_block_invoke_49;
    v15[3] = &unk_1E6DB5908;
    void v15[4] = a1;
    void v15[5] = a4;
    unint64_t v11 = RTCPRegisterPacketCallback(v10, (uint64_t)a2, v15);
    if ((v11 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCCannedVideoPacketSource_RegisterForCannedReplay_cold_2();
      }
    }
  }
  return v11;
}

uint64_t VCCannedVideoPacketSource_UnregisterForCannedReplay(uint64_t a1, unsigned __int16 *a2)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCCannedVideoPacketSource_UnregisterForCannedReplay_cold_1();
      }
    }
    return 2147549183;
  }
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", 0, objc_msgSend(NSNumber, "numberWithUnsignedShort:", *a2));
      objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", 0, objc_msgSend(NSNumber, "numberWithUnsignedShort:", *a2));
      return 0;
    }
    return 2147549183;
  }
  unint64_t v6 = RTPUnregisterPacketCallback();
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v5 = v6;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCCannedVideoPacketSource_UnregisterForCannedReplay_cold_2();
      }
    }
  }
  else
  {
    uint64_t v5 = RTCPUnregisterPacketCallback();
    if ((v5 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCCannedVideoPacketSource_UnregisterForCannedReplay_cold_3();
      }
    }
  }
  return v5;
}

void _VCCannedVideoPacketSource_WriteBytes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void block[6] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a2 length:a3];
    if (v4)
    {
      uint64_t v5 = *(NSObject **)(a1 + 48);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___VCCannedVideoPacketSource_WriteBytes_block_invoke;
      block[3] = &unk_1E6DB3E40;
      block[4] = a1;
      void block[5] = v4;
      dispatch_async(v5, block);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCCannedVideoPacketSource_WriteBytes_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCCannedVideoPacketSource_WriteBytes_cold_1();
    }
  }
}

void _VCCannedVideoPacketSource_WriteBlockBuffer(uint64_t a1, uint64_t a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (a2 && (size_t v3 = *(void *)(a2 + 8)) != 0)
  {
    CMBlockBufferRef blockBufferOut = 0;
    if (CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(a1 + 32), *(CMBlockBufferRef *)a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v3, 0, &blockBufferOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCCannedVideoPacketSource_WriteBlockBuffer_cold_2();
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if (CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &v4))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCCannedVideoPacketSource_WriteBlockBuffer_cold_1();
          }
        }
      }
      else
      {
        v6[0] = CMBlockBufferGetDataLength(blockBufferOut);
        _VCCannedVideoPacketSource_WriteBytes(a1, (uint64_t)v6, 8);
        _VCCannedVideoPacketSource_WriteBytes(a1, (uint64_t)v4, v6[0]);
      }
    }
    if (blockBufferOut) {
      CFRelease(blockBufferOut);
    }
  }
  else
  {
    _VCCannedVideoPacketSource_WriteBytes(a1, (uint64_t)v6, 8);
  }
}

void _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  if (a3) {
    *a3 = 0;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    int PacketTypeFromFile = _VCCannedVideoPacketSource_ReadPacketTypeFromFile(a1);
    if (PacketTypeFromFile) {
      goto LABEL_5;
    }
    if (a3) {
      *a3 = 1;
    }
    [*(id *)(a1 + 16) seekToFileOffset:0];
    int PacketTypeFromFile = _VCCannedVideoPacketSource_ReadPacketTypeFromFile(a1);
    if (PacketTypeFromFile)
    {
LABEL_5:
      if (PacketTypeFromFile == 2)
      {
        _VCCannedVideoPacketSource_ReadDataFromFile(*(void **)(a1 + 16), 0x668uLL, (void *)(a2 + 8));
        if (*(unsigned char *)(a2 + 16))
        {
          unint64_t v7 = 0;
          do
          {
            uint64_t v8 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 40), 1036, 0);
            *(void *)(a2 + 24 + 8 * v7) = v8;
            _VCCannedVideoPacketSource_ReadDataFromFile(*(void **)(a1 + 16), 0x40CuLL, v8);
            ++v7;
          }
          while (v7 < *(unsigned __int8 *)(a2 + 16));
        }
        memset(v9, 0, 24);
        _VCCannedVideoPacketSource_ReadBlockBufferFromFile(a1, *(void **)(a1 + 16), (uint64_t)v9);
        *(void *)(a2 + 104) = v9[0];
      }
      else if (PacketTypeFromFile == 1)
      {
        _VCCannedVideoPacketSource_ReadDataFromFile(*(void **)(a1 + 16), 0x17B0uLL, (void *)(a2 + 8));
        if (!*(_DWORD *)(a2 + 8))
        {
          *(_OWORD *)(a2 + 184) = 0u;
          *(void *)(a2 + 200) = 0;
          *(_OWORD *)(a2 + 152) = 0u;
          *(_OWORD *)(a2 + 16_Block_object_dispose(&STACK[0x250], 8) = 0u;
          *(_OWORD *)(a2 + 136) = 0u;
          _VCCannedVideoPacketSource_ReadBlockBufferFromFile(a1, *(void **)(a1 + 16), a2 + 136);
          _VCCannedVideoPacketSource_ReadBlockBufferFromFile(a1, *(void **)(a1 + 16), a2 + 160);
          _VCCannedVideoPacketSource_ReadBlockBufferFromFile(a1, *(void **)(a1 + 16), a2 + 184);
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers_cold_1();
      }
    }
    *(unsigned char *)a2 = PacketTypeFromFile;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers_cold_2();
    }
  }
}

uint64_t _VCCannedVideoPacketSource_ReadPacketTypeFromFile(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = 0;
  uint64_t result = _VCCannedVideoPacketSource_ReadDataFromFile(*(void **)(a1 + 16), 1uLL, &v2);
  if (result)
  {
    uint64_t result = v2;
    if (v2 - 3 <= 0xFFFFFFFD)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        _VCCannedVideoPacketSource_ReadPacketTypeFromFile_cold_1();
      }
      return 0;
    }
  }
  return result;
}

void _VCCannedVideoPacketSource_ReadBlockBufferFromFile(uint64_t a1, void *a2, uint64_t a3)
{
  dataLength[1] = *MEMORY[0x1E4F143B8];
  dataLength[0] = 0;
  _VCCannedVideoPacketSource_ReadDataFromFile(*(void **)(a1 + 16), 8uLL, dataLength);
  if (dataLength[0])
  {
    uint64_t v12 = 0;
    unint64_t v6 = (void *)[a2 readDataUpToLength:dataLength[0] error:&v12];
    if ([v6 length]) {
      BOOL v7 = v12 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      if (CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 32), 0, dataLength[0], (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, dataLength[0], 1u, (CMBlockBufferRef *)a3))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_4();
          }
        }
      }
      else
      {
        uint64_t v8 = (const void *)[v6 bytes];
        if (CMBlockBufferReplaceDataBytes(v8, *(CMBlockBufferRef *)a3, 0, dataLength[0]))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_3();
            }
          }
        }
        else
        {
          dataPointerOut = 0;
          if (!CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)a3, 0, 0, 0, &dataPointerOut))
          {
            uint64_t v9 = dataPointerOut;
            if (dataPointerOut)
            {
              *(void *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = dataLength[0];
              *(void *)(a3 + 16) = v9;
              return;
            }
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_2();
            }
          }
        }
      }
    }
    else
    {
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_1();
        }
      }
    }
  }
  if (*(void *)a3)
  {
    CFRelease(*(CFTypeRef *)a3);
    *(void *)a3 = 0;
  }
}

uint64_t _VCCannedVideoPacketSource_ReadDataFromFile(void *a1, size_t a2, void *a3)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = (void *)[a1 readDataUpToLength:a2 error:v8];
  if (v8[0])
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _VCCannedVideoPacketSource_ReadDataFromFile_cold_1();
    }
    return 0;
  }
  unint64_t v6 = v5;
  uint64_t result = [v5 length];
  if (result)
  {
    memcpy(a3, (const void *)[v6 bytes], a2);
    return 1;
  }
  return result;
}

void OUTLINED_FUNCTION_12_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x250], 8) = a1;
}

FILE **LogDump_OpenLog(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  keyExistsAndHasValidFormat[0] = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"enableTFRCDump", @"com.apple.VideoConference", keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat[0])
  {
    if (VCDefaults_DefaultDumpEnablementValue()) {
      goto LABEL_3;
    }
LABEL_5:
    double v13 = 0;
    goto LABEL_6;
  }
  if (!AppBooleanValue) {
    goto LABEL_5;
  }
LABEL_3:
  double v13 = VRLogfileAlloc(0, a1, a2, a3, "com.apple.VideoConference.Jitterlog", a5);
  VRLogfilePrintSync(v13, "VERSION = %s, DTX Support\n", v14, v15, v16, v17, v18, v19, a6);
  VRLogfilePrintSync(v13, "CALLID = %s\n", v20, v21, v22, v23, v24, v25, a1);
  VRLogfilePrintSync(v13, "%s", v26, v27, v28, v29, v30, v31, a4);
LABEL_6:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v32 = VRTraceErrorLogLevelToCSTR();
    uint64_t v33 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      id v34 = "Enabled";
      uint64_t v37 = v32;
      *(_DWORD *)Boolean keyExistsAndHasValidFormat = 136315906;
      int v39 = "LogDump_OpenLog";
      __int16 v38 = 2080;
      if (!v13) {
        id v34 = "Disabled";
      }
      __int16 v40 = 1024;
      int v41 = 69;
      __int16 v42 = 2080;
      CMTime v43 = v34;
      _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Log Dump is %s", keyExistsAndHasValidFormat, 0x26u);
    }
  }
  return v13;
}

uint64_t LogDump_CloseLog(uint64_t a1)
{
  v2[1] = *MEMORY[0x1E4F143B8];
  v2[0] = a1;
  VRLogfileFree(v2);
  return VRLogfileRemoveOldFilesInDefaultLogDumpPath();
}

unint64_t GetNTPTime()
{
  double v0 = micro();
  if (!dword_1EADC827C) {
    TimeZeroInit();
  }
  return (unint64_t)((double)TimeZero + v0 * 4294967300.0);
}

unint64_t MicroToNTP(double a1)
{
  if (!dword_1EADC827C) {
    TimeZeroInit();
  }
  return (unint64_t)((double)TimeZero + a1 * 4294967300.0);
}

void TimeZeroInit()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  memset(v2, 170, sizeof(v2));
  double v0 = micro();
  gettimeofday(&v2[1], 0);
  double v1 = micro();
  gettimeofday(v2, 0);
  if (micro() - v1 < v1 - v0)
  {
    v2[1] = v2[0];
    double v0 = v1;
  }
  TimeZero = vcvtd_n_u64_f64((double)v2[1].tv_sec + (double)v2[1].tv_usec * 0.000001 + 2208988800.0 - v0, 0x20uLL);
}

double NTPToMicro(uint64_t a1)
{
  if (!dword_1EADC827C) {
    TimeZeroInit();
  }
  return (double)(unint64_t)(a1 - TimeZero) * 2.32830644e-10;
}

unint64_t NTPToMiddle32(unint64_t a1)
{
  return a1 >> 16;
}

unint64_t Middle32ToMilliSeconds(int a1)
{
  return (unint64_t)((double)(a1 << 16) * 2.32830644e-10 * 1000.0);
}

void _VCStreamIOAudioController_SampleBufferCallback(uint64_t a1, CMSampleBufferRef sbuf)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CMItemCount NumSamples = CMSampleBufferGetNumSamples(sbuf);
    unsigned int SampleCapacity = VCAudioBufferList_GetSampleCapacity(*(void *)(a1 + 248));
    if (NumSamples > SampleCapacity)
    {
      unsigned int v24 = SampleCapacity;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v25 = VRTraceErrorLogLevelToCSTR();
        uint64_t v26 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 224), "streamInputID"), "longValue");
          LODWORD(lhs.value) = 136316418;
          *(CMTimeValue *)((char *)&lhs.value + 4) = v25;
          LOWORD(lhs.flags) = 2080;
          *(void *)((char *)&lhs.flags + 2) = "_VCStreamIOAudioController_SampleBufferCallback";
          HIWORD(lhs.epoch) = 1024;
          int v40 = 501;
          __int16 v41 = 2048;
          *(void *)__int16 v42 = NumSamples;
          *(_WORD *)&v42[8] = 1024;
          *(_DWORD *)&unsigned char v42[10] = v24;
          *(_WORD *)&_OWORD v42[14] = 2048;
          *(void *)&v42[16] = v27;
          uint64_t v28 = "VCStreamIOAudioController [%s] %s:%d Frame size=%ld changed unexpectedly and sample buffer size=%u is no"
                "t big enough for streamInputID=%ld.";
          uint64_t v29 = v26;
LABEL_23:
          _os_log_error_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&lhs, 0x36u);
        }
      }
    }
    else
    {
      memset(&v36, 170, sizeof(v36));
      CMSampleBufferGetPresentationTimeStamp(&v36, sbuf);
      CMTime v35 = v36;
      if (*(unsigned char *)(a1 + 296))
      {
        double v6 = *(double *)[*(id *)(a1 + 232) clientFormat];
        CMTime lhs = v35;
        CMTime rhs = *(CMTime *)(a1 + 304);
        memset(&v38, 170, sizeof(v38));
        CMTimeSubtract(&v38, &lhs, &rhs);
        int v7 = *(_DWORD *)(a1 + 328);
        CMTime lhs = v38;
        Float64 Seconds = CMTimeGetSeconds(&lhs);
        uint64_t v9 = *(void *)(a1 + 328);
        uint64_t v10 = llround(Seconds * (v6 / (double)v9)) * v7;
        if (v9 == v10)
        {
          double v11 = NAN;
        }
        else
        {
          CMTime lhs = v38;
          double v11 = CMTimeGetSeconds(&lhs);
          CMTime lhs = v38;
          *(_DWORD *)(a1 + 300) += llround(v6 * CMTimeGetSeconds(&lhs)) - *(_DWORD *)(a1 + 328);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v34 = VRTraceErrorLogLevelToCSTR();
            double v13 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              CMTime lhs = v38;
              Float64 v14 = CMTimeGetSeconds(&lhs);
              CMTime lhs = *(CMTime *)(a1 + 304);
              Float64 v15 = CMTimeGetSeconds(&lhs);
              CMTime lhs = v35;
              Float64 v16 = CMTimeGetSeconds(&lhs);
              uint64_t v17 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 224), "streamInputID"), "longValue");
              uint64_t v18 = *(void *)(a1 + 328);
              int v19 = *(_DWORD *)(a1 + 300);
              LODWORD(lhs.value) = 136317698;
              *(CMTimeValue *)((char *)&lhs.value + 4) = v34;
              LOWORD(lhs.flags) = 2080;
              *(void *)((char *)&lhs.flags + 2) = "_VCStreamIOAudioController_GetSampleBufferTimestamp";
              HIWORD(lhs.epoch) = 1024;
              int v40 = 476;
              __int16 v41 = 2048;
              *(void *)__int16 v42 = a1;
              *(_WORD *)&v42[8] = 2048;
              *(Float64 *)&unsigned char v42[10] = v14;
              *(_WORD *)&v42[18] = 1024;
              *(_DWORD *)&v42[20] = v10;
              __int16 v43 = 2048;
              Float64 v44 = v15;
              __int16 v45 = 2048;
              Float64 v46 = v16;
              __int16 v47 = 2048;
              uint64_t v48 = v17;
              __int16 v49 = 2048;
              uint64_t v50 = v18;
              __int16 v51 = 1024;
              int v52 = v19;
              _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VCStreamIOAudioController [%s] %s:%d controller=%p Real time miss. host time jumped: %f (%u samples) (%f to %f) for streamInputID=%ld. lastSampleCount=%lu -> nextExpectedSampleTime=%u", (uint8_t *)&lhs, 0x64u);
            }
          }
        }
        int v12 = *(_DWORD *)(a1 + 300);
      }
      else
      {
        int v12 = 0;
        double v11 = NAN;
      }
      *(CMTime *)(a1 + 304) = v35;
      *(void *)(a1 + 32_Block_object_dispose(&STACK[0x250], 8) = NumSamples;
      *(_DWORD *)(a1 + 300) += NumSamples;
      *(unsigned char *)(a1 + 296) = 1;
      VCAudioBufferList_Reset(*(void *)(a1 + 248));
      AudioBufferList = (AudioBufferList *)VCAudioBufferList_GetAudioBufferList(*(void *)(a1 + 248));
      OSStatus v21 = CMSampleBufferCopyPCMDataIntoAudioBufferList(sbuf, 0, NumSamples, AudioBufferList);
      if (!v21)
      {
        uint64_t v22 = *(void *)(a1 + 248);
        CMTime lhs = v36;
        double v23 = CMTimeGetSeconds(&lhs);
        VCAudioBufferList_SetTime(v22, v12, v23);
        VCAudioBufferList_SetSampleCount(*(void *)(a1 + 248), NumSamples);
        VCAudioBufferList_SetPriority(*(void *)(a1 + 248), 255);
        VCAudioBufferList_SetVoiceActivity(*(void *)(a1 + 248), 1);
        VCAudioBufferList_SetHostTimeJumpSize(*(void *)(a1 + 248), v11);
        PacketThread_SendSampleBuffer(*(void *)(a1 + 240), *(const void **)(a1 + 248));
        return;
      }
      OSStatus v30 = v21;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v31 = VRTraceErrorLogLevelToCSTR();
        uint64_t v32 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          uint64_t v33 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 224), "streamInputID"), "longValue");
          LODWORD(lhs.value) = 136316418;
          *(CMTimeValue *)((char *)&lhs.value + 4) = v31;
          LOWORD(lhs.flags) = 2080;
          *(void *)((char *)&lhs.flags + 2) = "_VCStreamIOAudioController_SampleBufferCallback";
          HIWORD(lhs.epoch) = 1024;
          int v40 = 510;
          __int16 v41 = 1024;
          *(_DWORD *)__int16 v42 = v30;
          *(_WORD *)&unsigned char v42[4] = 2048;
          *(void *)&v42[6] = a1;
          *(_WORD *)&_OWORD v42[14] = 2048;
          *(void *)&v42[16] = v33;
          uint64_t v28 = "VCStreamIOAudioController [%s] %s:%d CMSampleBufferCopyPCMDataIntoAudioBufferList failed with err=%d for"
                " controller=%p streamInputID=%ld";
          uint64_t v29 = v32;
          goto LABEL_23;
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCStreamIOAudioController_SampleBufferCallback_cold_1();
    }
  }
}

void _VCStreamIOAudioController_PullAudioSamples(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 280);
  v12[0] = 0xAAAAAAAAAAAAAAAALL;
  VCAudioBufferList_ZeroMemory(a2);
  uint64_t SampleFormat = (double *)VCAudioBufferList_GetSampleFormat(a2);
  if (SampleFormat)
  {
    LODWORD(v12[0]) = *SampleFormat;
    v12[1] = VCAudioBufferList_GetTimestamp(a2);
    (*(void (**)(void, void *, uint64_t))(v4 + 8))(*(void *)v4, v12, a2);
    memset(v14, 170, sizeof(v14));
    VCAudioBufferList_GetNetworkTimestamp(a2, (uint64_t)v14);
    if ((v14[1] & 0x100000000) != 0)
    {
      CMSampleBufferRef v6 = VCAudioBufferList_CreateSampleBufferAllocateWithAllocator(a2, *(CFAllocatorRef *)(a1 + 256), *(const __CFAllocator **)(a1 + 288));
      uint64_t valuePtr = v14[0];
      CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
      if (v7)
      {
        CFNumberRef v8 = v7;
        CMSetAttachment(v6, @"networkTimestamp", v7, 1u);
        CFRelease(v8);
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 272));
        uint64_t v9 = *(void *)(a1 + 264);
        if (v9)
        {
          if ((VCStreamOutput_EnqueueSampleBuffer(v9, v6) & 1) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v10 = VRTraceErrorLogLevelToCSTR();
            double v11 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315650;
              uint64_t v16 = v10;
              __int16 v17 = 2080;
              uint64_t v18 = "_VCStreamIOAudioController_EnqueueSampleBuffer";
              __int16 v19 = 1024;
              int v20 = 557;
              _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "VCStreamIOAudioController [%s] %s:%d Enqueue failed", buf, 0x1Cu);
            }
          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 272));
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCStreamIOAudioController_PullAudioSamples_cold_1();
        }
      }
      if (v6) {
        CFRelease(v6);
      }
    }
  }
}

void VCVirtualAVCaptureDeviceInput_OnMediaSample(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  CMSampleBufferRef v6 = *(void **)(a1 + 24);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v12 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        double v11 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v11, "mediaType"), "isEqual:", a3)) {
          VCVirtualAVCaptureInputPort_OnMediaSample((uint64_t)v11, a2, a3);
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v12 count:16];
    }
    while (v8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
}

uint64_t _VCConnectionStatisticsCollector_ComparePacketCounts(void *a1, void *a2)
{
  unsigned int v3 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"PktCnt"), "unsignedIntValue");
  unsigned int v4 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"PktCnt"), "unsignedIntValue");
  if (v3 <= v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (v3 < v4) {
    return 1;
  }
  else {
    return v5;
  }
}

char *RTPMapCreate()
{
  double v0 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x102004089B94702uLL);
  double v1 = v0;
  if (v0) {
    pthread_mutex_init((pthread_mutex_t *)(v0 + 16), 0);
  }
  return v1;
}

void RTPMapDestroy(void **a1)
{
  uint64_t v2 = (uint64_t)*a1;
  if (v2)
  {
    RTPMapResetMapping(v2);
    pthread_mutex_destroy((pthread_mutex_t *)((char *)*a1 + 16));
    free(*a1);
    *a1 = 0;
  }
}

void RTPMapResetMapping(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (pthread_mutex_t *)(a1 + 16);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    free(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = 0;
    pthread_mutex_unlock(v2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTPMapResetMapping_cold_1();
    }
  }
}

void RTPMapAddMappingForPayload(char **a1, int a2, int a3, int a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a4 == 128)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v39 = v4;
        __int16 v40 = 2080;
        __int16 v41 = "RTPMapAddMappingForPayload";
        __int16 v42 = 1024;
        int v43 = 63;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d internalPayload is invalid.", buf, 0x1Cu);
      }
    }
  }
  else if (a1)
  {
    uint64_t v37 = (pthread_mutex_t *)(a1 + 2);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 2));
    uint64_t v10 = *((unsigned int *)a1 + 3);
    uint64_t v11 = *((int *)a1 + 2);
    if ((int)v10 < 1)
    {
      int v18 = 0;
LABEL_22:
      if (v10 == v11)
      {
        unsigned int v19 = v10 + 5;
        int v20 = (char *)malloc_type_malloc(6 * ((int)v10 + 5), 0x1000040274DC3F3uLL);
        uint64_t v21 = v20;
        if (v20) {
          uint64_t v22 = &v20[6 * (int)v10 + 30];
        }
        else {
          uint64_t v22 = 0;
        }
        if (v20)
        {
          if ((int)v10 < -5) {
            goto LABEL_63;
          }
          uint64_t v23 = *((int *)a1 + 2);
          if ((v23 & 0x80000000) != 0) {
            goto LABEL_63;
          }
          size_t v24 = 6 * *((int *)a1 + 3);
          if (v24 > 6 * v23 || v24 > 6 * ((int)v10 + 5)) {
            goto LABEL_63;
          }
          memcpy(v20, *a1, v24);
          free(*a1);
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        else
        {
          unsigned int v19 = 0;
        }
        if (v21 > v22 || (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 1)) < v19) {
          goto LABEL_63;
        }
        uint64_t v11 = v19;
        *a1 = v21;
        *((_DWORD *)a1 + 2) = v19;
      }
      else
      {
        uint64_t v21 = *a1;
      }
      uint64_t v33 = &v21[6 * v11];
      uint64_t v34 = &v21[6 * v18];
      if (v34 >= v33 || v34 < v21) {
LABEL_63:
      }
        __break(0x5519u);
      *(_WORD *)uint64_t v34 = a4;
      CMTime v36 = &v21[6 * v18];
      *((_WORD *)v36 + 1) = a2;
      *((_WORD *)v36 + 2) = a3;
      ++*((_DWORD *)a1 + 3);
      pthread_mutex_unlock(v37);
    }
    else
    {
      uint64_t v12 = 0;
      long long v13 = (unsigned __int16 *)*a1;
      while (1)
      {
        long long v14 = &v13[v12];
        if (&v13[v12] >= (unsigned __int16 *)&(*a1)[6 * (int)v11] || v14 < v13) {
          goto LABEL_63;
        }
        int v16 = *v14;
        int v17 = v14[1];
        if (v16 == a4)
        {
          if (v17 != a2 || v13[v12 + 2] != a3)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v25 = VRTraceErrorLogLevelToCSTR();
              uint64_t v26 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315906;
                uint64_t v39 = v25;
                __int16 v40 = 2080;
                __int16 v41 = "RTPMapAddMappingForPayload";
                __int16 v42 = 1024;
                int v43 = 79;
                __int16 v44 = 1024;
                int v45 = a4;
                _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Internal payload(%d)'s mapping is overwriten", buf, 0x22u);
              }
            }
            unint64_t v27 = (unint64_t)&(*a1)[v12 * 2];
            if (v27 < (unint64_t)&(*a1)[6 * *((int *)a1 + 2)] && v27 >= (unint64_t)*a1)
            {
              *(_WORD *)(v27 + 2) = a2;
              *(_WORD *)(v27 + 4) = a3;
              goto LABEL_49;
            }
            goto LABEL_63;
          }
          goto LABEL_49;
        }
        if (v17 == a2 && v13[v12 + 2] == a3) {
          break;
        }
        v12 += 3;
        if (3 * v10 == v12)
        {
          int v18 = *((_DWORD *)a1 + 3);
          goto LABEL_22;
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v29 = VRTraceErrorLogLevelToCSTR();
        OSStatus v30 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = (unsigned __int16 *)&(*a1)[v12 * 2];
          if (v31 < (unsigned __int16 *)&(*a1)[6 * *((int *)a1 + 2)] && v31 >= (unsigned __int16 *)*a1)
          {
            int v32 = *v31;
            *(_DWORD *)CMTime buf = 136316674;
            uint64_t v39 = v29;
            __int16 v40 = 2080;
            __int16 v41 = "RTPMapAddMappingForPayload";
            __int16 v42 = 1024;
            int v43 = 95;
            __int16 v44 = 1024;
            int v45 = a2;
            __int16 v46 = 1024;
            int v47 = a3;
            __int16 v48 = 1024;
            int v49 = v32;
            __int16 v50 = 1024;
            int v51 = a4;
            _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d External payloads send(%d), recv(%d) are used twice by existing internal payload %d and new internal payload %d. Treated as no-op", buf, 0x34u);
            goto LABEL_49;
          }
          goto LABEL_63;
        }
      }
LABEL_49:
      pthread_mutex_unlock(v37);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTPMapAddMappingForPayload_cold_1();
    }
  }
}

void RTPMapPrintMapping(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (pthread_mutex_t *)(a1 + 16);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    if (*(int *)(a1 + 12) >= 1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v5 = (unsigned char *)MEMORY[0x1E4F47A40];
      CMSampleBufferRef v6 = (NSObject **)MEMORY[0x1E4F47A50];
      do
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v7 = VRTraceErrorLogLevelToCSTR();
          uint64_t v8 = *v6;
          uint64_t v9 = *v6;
          if (*v5)
          {
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v10 = (unsigned __int16 *)(*(void *)a1 + v3);
              if ((unint64_t)v10 >= *(void *)a1 + 6 * *(int *)(a1 + 8)
                || (unint64_t)v10 < *(void *)a1)
              {
                goto LABEL_27;
              }
              int v12 = v10[2];
              int v13 = *v10;
              int v14 = v10[1];
              *(_DWORD *)CMTime buf = 136316418;
              uint64_t v21 = v7;
              __int16 v22 = 2080;
              uint64_t v23 = "RTPMapPrintMapping";
              __int16 v24 = 1024;
              int v25 = 155;
              __int16 v26 = 1024;
              int v27 = v12;
              __int16 v28 = 1024;
              int v29 = v13;
              __int16 v30 = 1024;
              int v31 = v14;
              _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d *** RTPPrintRTPMapping *** external payload receive %d -> internal payload %d -> external payload send %d", buf, 0x2Eu);
            }
          }
          else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            long long v15 = (unsigned __int16 *)(*(void *)a1 + v3);
            if ((unint64_t)v15 >= *(void *)a1 + 6 * *(int *)(a1 + 8)
              || (unint64_t)v15 < *(void *)a1)
            {
LABEL_27:
              __break(0x5519u);
            }
            int v17 = v15[2];
            int v18 = *v15;
            int v19 = v15[1];
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v21 = v7;
            __int16 v22 = 2080;
            uint64_t v23 = "RTPMapPrintMapping";
            __int16 v24 = 1024;
            int v25 = 155;
            __int16 v26 = 1024;
            int v27 = v17;
            __int16 v28 = 1024;
            int v29 = v18;
            __int16 v30 = 1024;
            int v31 = v19;
            _os_log_debug_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEBUG, " [%s] %s:%d *** RTPPrintRTPMapping *** external payload receive %d -> internal payload %d -> external payload send %d", buf, 0x2Eu);
          }
        }
        ++v4;
        v3 += 6;
      }
      while (v4 < *(int *)(a1 + 12));
    }
    pthread_mutex_unlock(v2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTPMapPrintMapping_cold_1();
    }
  }
}

uint64_t RTPMapGetInternalPayload(unsigned __int16 **a1, unsigned int a2)
{
  if (a1)
  {
    if (a2 > 0x5F || a2 == 20)
    {
      uint64_t v4 = (pthread_mutex_t *)(a1 + 2);
      uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(a1 + 2));
      uint64_t v6 = *((unsigned int *)a1 + 3);
      if ((int)v6 < 1)
      {
LABEL_10:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2));
      }
      else
      {
        uint64_t v7 = *a1;
        while (1)
        {
          if (v7 >= &(*a1)[3 * *((int *)a1 + 2)] || v7 < *a1)
          {
            __break(0x5519u);
            return result;
          }
          if (v7[2] == a2) {
            break;
          }
          v7 += 3;
          if (!--v6) {
            goto LABEL_10;
          }
        }
        unsigned __int16 v8 = *v7;
        int v9 = *v7;
        pthread_mutex_unlock(v4);
        if (v9 != 128) {
          return v8;
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTPMapGetInternalPayload_cold_1();
    }
  }
  return (unsigned __int16)a2;
}

uint64_t RTPMapGetExternalPayload(unsigned __int16 **a1, unsigned int a2)
{
  if (a1)
  {
    if (a2 > 0x5F || a2 == 20)
    {
      uint64_t v4 = (pthread_mutex_t *)(a1 + 2);
      uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(a1 + 2));
      uint64_t v6 = *((unsigned int *)a1 + 3);
      if ((int)v6 < 1)
      {
LABEL_10:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2));
      }
      else
      {
        uint64_t v7 = *a1;
        while (1)
        {
          if (v7 >= &(*a1)[3 * *((int *)a1 + 2)] || v7 < *a1)
          {
            __break(0x5519u);
            return result;
          }
          if (*v7 == a2) {
            break;
          }
          v7 += 3;
          if (!--v6) {
            goto LABEL_10;
          }
        }
        unsigned __int16 v8 = v7[1];
        pthread_mutex_unlock(v4);
        if (v8 != 128) {
          return v8;
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTPMapGetExternalPayload_cold_1();
    }
  }
  return (unsigned __int16)a2;
}

double _VCRateControlAlgorithmLayeredContinuousTier_Configure(uint64_t a1, void *a2, int a3)
{
  VCRateControlAlgorithmStabilizedNOWRDPriv_Configure(a1, a2, a3);
  *(void *)(a1 + 25624) = 0;
  *(_DWORD *)(a1 + 25632) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 1104);
  double result = (double)v4;
  *(double *)(a1 + 1096) = result;
  *(_DWORD *)(a1 + 110_Block_object_dispose(&STACK[0x250], 8) = vcRateControlTierBitrates[*(int *)(a1 + 1084)];
  return result;
}

BOOL _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 > 10)
  {
    if (v12 != 11)
    {
      if (v12 != 14)
      {
LABEL_22:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_1();
        }
        return 0;
      }
      if (!*(_DWORD *)(a1 + 1072))
      {
        VCRateControlAlgorithmStabilizedNOWRDPriv_ResetBytesInFlight(a1);
        return 0;
      }
      unint64_t v22 = *(void *)(a2 + 8);
      *(void *)(a1 + 5344) = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + 5316);
      LODWORD(a10) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 5316) = ((double)*(unint64_t *)&a10 * 0.1 + (double)v22 * 0.9);
      VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateBytesInFlightThreshold(a1);
      if (!*(unsigned char *)(a1 + 5324))
      {
        BOOL result = 0;
        *(unsigned char *)(a1 + 5314) = 1;
        return result;
      }
      if (VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToLocalRCEvent(a1))
      {
        double v30 = (double)(*(_DWORD *)(a1 + 5316) - *(_DWORD *)(a1 + 5320))
            / (double)*(unsigned int *)(a1 + 5320);
        if (v30 < 0.25) {
          double v30 = 0.25;
        }
        *(double *)(a1 + 2564_Block_object_dispose(&STACK[0x250], 8) = v30;
        VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "congestionSeverity=%f, bytesInFlight=%u, bytesInFlightThreshold=%u", v23, v24, v25, v26, v27, v28, SLOBYTE(v30));
        *(double *)(a1 + 1096) = (double)_VCRateControlAlgorithmLayeredContinuousTier_RampDown(a1);
        VCRateControlAlgorithmBasePriv_StateChange(a1, 6);
      }
      else
      {
        *(unsigned char *)(a1 + 5314) = VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToLocalRCEvent(a1, v29);
      }
      _VCRateControlAlgorithmLayeredContinuousTier_UpdateTargetBitrate(a1, *(double *)(a1 + 1096));
      return 1;
    }
    return VCRateControlAlgorithmStabilizedNOWRDPriv_DoRateControlWithNWStatistics(a1, a2);
  }
  else
  {
    if (v12 != 1)
    {
      if (v12 == 2)
      {
        BOOL result = VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateInternalStatistics(a1, a2);
        if (!result) {
          return result;
        }
        VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateSmartBrakeOutputWithVCRCStatistics(a1, a2);
        int ShouldRampDown = VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDown(a1);
        if (ShouldRampDown) {
          int ShouldRampUp = 0;
        }
        else {
          int ShouldRampUp = VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUp(a1);
        }
        switch(*(_DWORD *)(a1 + 1072))
        {
          case 0:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v32 = VRTraceErrorLogLevelToCSTR();
              uint64_t v33 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315650;
                *(void *)&uint8_t buf[4] = v32;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VCRateControlAlgorithmLayeredContinuousTier_RunRateControlStateTransition";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&uint8_t buf[24] = 356;
                _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d VCRateControl is paused", buf, 0x1Cu);
              }
            }
            break;
          case 1:
            if (ShouldRampDown) {
              goto LABEL_71;
            }
            if (ShouldRampUp)
            {
              *(double *)(a1 + 1096) = (double)_VCRateControlAlgorithmLayeredContinuousTier_RampUp(a1);
              int v37 = *(_DWORD *)(a1 + 60) >= *(_DWORD *)(a1 + 72) ? *(_DWORD *)(a1 + 72) : *(_DWORD *)(a1 + 60);
              LODWORD(v36) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v37);
              if (*(double *)(a1 + 1096) >= (double)v36) {
                goto LABEL_61;
              }
            }
            break;
          case 2:
            if (ShouldRampDown)
            {
              int v34 = *(double *)(a1 + 1096);
              double v35 = *(double *)(a1 + 25624);
              if (v35 == 0.0)
              {
                *(double *)(a1 + 25624) = (double)v34;
                ++*(_DWORD *)(a1 + 25632);
              }
              else
              {
                int v42 = (int)((double)v34 - v35);
                if (v42 >= 0) {
                  int v43 = (int)((double)v34 - v35);
                }
                else {
                  int v43 = -v42;
                }
                if (v35 * 0.15 <= (double)v43)
                {
                  *(_DWORD *)(a1 + 25632) = 0;
                }
                else
                {
                  int v44 = ++*(_DWORD *)(a1 + 25632);
                  if (v44 >= 10) {
                    int v44 = 10;
                  }
                  *(_DWORD *)(a1 + 25632) = v44;
                }
                double v45 = (double)v34 * 0.5 + *(double *)(a1 + 25624) * 0.5;
                *(double *)(a1 + 25624) = v45;
                VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "VCRC update bandwidthWall=%f, confidence=%u, diff=%d", v14, v15, v16, v17, v18, v19, SLOBYTE(v45));
              }
LABEL_71:
              *(double *)(a1 + 1096) = (double)_VCRateControlAlgorithmLayeredContinuousTier_RampDown(a1);
              uint64_t v40 = a1;
              int v41 = 6;
              goto LABEL_72;
            }
            if (ShouldRampUp)
            {
              *(double *)(a1 + 1096) = (double)_VCRateControlAlgorithmLayeredContinuousTier_RampUp(a1);
              if (VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldFastRampUp(a1))
              {
                int v39 = *(_DWORD *)(a1 + 60);
                if (v39 >= *(_DWORD *)(a1 + 72)) {
                  int v39 = *(_DWORD *)(a1 + 72);
                }
                LODWORD(v3_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v39);
                if (*(double *)(a1 + 1096) < (double)v38)
                {
                  uint64_t v40 = a1;
                  int v41 = 1;
                  goto LABEL_72;
                }
              }
            }
            break;
          case 6:
            if (ShouldRampDown)
            {
              *(double *)(a1 + 1096) = (double)_VCRateControlAlgorithmLayeredContinuousTier_RampDown(a1);
            }
            else if (ShouldRampUp)
            {
              *(double *)(a1 + 1096) = (double)_VCRateControlAlgorithmLayeredContinuousTier_RampUp(a1);
LABEL_61:
              uint64_t v40 = a1;
              int v41 = 2;
LABEL_72:
              VCRateControlAlgorithmBasePriv_StateChange(v40, v41);
            }
            break;
          default:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_2();
              }
            }
            break;
        }
        _VCRateControlAlgorithmLayeredContinuousTier_UpdateTargetBitrate(a1, *(double *)(a1 + 1096));
        if (*(_DWORD *)(a1 + 1076) != 2 || *(_DWORD *)(a1 + 1080)) {
          *(void *)(a1 + 25616) = *(void *)(a1 + 1128);
        }
        VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateVCRateControlHistory(a1);
        uint64_t v46 = *(void *)(a1 + 1048);
        if (v46)
        {
          if (*(unsigned char *)(a1 + 1153)) {
            char v47 = *(double *)(a1 + 1128) - *(double *)(a1 + 5224) > 0.5;
          }
          else {
            char v47 = 0;
          }
          if (*(_DWORD *)(a1 + 1072) == 1) {
            char v48 = v47 ^ 1;
          }
          else {
            char v48 = 0;
          }
          VCRateControlMediaController_SetShouldDisableLargeFrameRequestsWhenInitialRampUp(v46, v48);
          VCRateControlMediaController_SetRateLimitedMaxTimeExceeded(*(void *)(a1 + 1048), v47);
        }
        long long v147 = 0u;
        long long v148 = 0u;
        long long v145 = 0u;
        long long v146 = 0u;
        long long v143 = 0u;
        long long v144 = 0u;
        long long v141 = 0u;
        long long v142 = 0u;
        long long v139 = 0u;
        long long v140 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v130 = 0u;
        double v49 = *(double *)(a1 + 1128);
        int v50 = *(unsigned __int16 *)(a1 + 5218);
        long long v128 = 0u;
        long long v129 = 0u;
        double v51 = *(double *)(a1 + 2888);
        double v52 = *(double *)(a1 + 2896);
        long long v126 = 0u;
        long long v127 = 0u;
        double v53 = *(double *)(a1 + 2904);
        double v54 = *(double *)(a1 + 2912);
        memset(buf, 0, sizeof(buf));
        int v55 = (int)(*(double *)(a1 + 5104) * 1000.0);
        int v56 = *(_DWORD *)(a1 + 1200);
        double v57 = *(double *)(a1 + 5248);
        double v58 = *(double *)(a1 + 5232);
        unsigned int v59 = ((v57 + v58) / 1000.0);
        unsigned int v60 = (v57 / 1000.0);
        unsigned int v61 = (v58 / 1000.0);
        if (*(unsigned char *)(a1 + 5136)) {
          uint64_t v62 = 79;
        }
        else {
          uint64_t v62 = 88;
        }
        double v63 = *(double *)(a1 + 5256);
        double v64 = *(double *)(a1 + 5240);
        int v65 = *(_DWORD *)(a1 + 5016);
        int v66 = *(_DWORD *)(a1 + 1204);
        unsigned int v67 = ((v63 + v64) / 1000.0);
        double v68 = *(double *)(a1 + 5024) * 100.0;
        unsigned int v69 = (v63 / 1000.0);
        unsigned int v70 = (v64 / 1000.0);
        int v71 = *(_DWORD *)(a1 + 1076);
        int v72 = *(_DWORD *)(a1 + 1080);
        double v73 = *(double *)(a1 + 5088) * 100.0;
        int v115 = *(_DWORD *)(a1 + 1116);
        int v114 = *(_DWORD *)(a1 + 5292);
        unsigned int v74 = *(_DWORD *)(a1 + 1112) / 0x3E8u;
        double v75 = *(double *)(a1 + 5296) * 1000.0;
        unsigned int v76 = v75;
        unsigned int v116 = *(_DWORD *)(a1 + 1104) / 0x3E8u;
        long long v77 = "ON";
        int v113 = *(_DWORD *)(a1 + 5316);
        int v111 = *(_DWORD *)(a1 + 5320);
        if (!*(unsigned char *)(a1 + 5312)) {
          long long v77 = "OFF";
        }
        int v110 = v77;
        unsigned int v112 = *(_DWORD *)(a1 + 5288) / 0x3E8u;
        if (*(unsigned char *)(a1 + 5220)) {
          long long v78 = "S";
        }
        else {
          long long v78 = "U";
        }
        __int16 v109 = v78;
        if (*(unsigned char *)(a1 + 1153))
        {
          long long v79 = "<";
        }
        else
        {
          unsigned int v107 = ((v63 + v64) / 1000.0);
          int v108 = (int)(*(double *)(a1 + 5104) * 1000.0);
          int v80 = v50;
          int v81 = *(_DWORD *)(a1 + 1200);
          unsigned int v105 = (v64 / 1000.0);
          unsigned int v106 = (v63 / 1000.0);
          unsigned int v101 = v75;
          uint64_t v102 = v62;
          unsigned int v82 = v59;
          unsigned int v83 = v60;
          int v103 = *(_DWORD *)(a1 + 1076);
          unsigned int v104 = *(_DWORD *)(a1 + 1112) / 0x3E8u;
          int v84 = *(_DWORD *)(a1 + 5016);
          int v85 = *(_DWORD *)(a1 + 1204);
          unsigned int v86 = v61;
          BOOL IsVideoStopped = VCRateControlMediaController_IsVideoStopped(*(unsigned char **)(a1 + 1048));
          unsigned int v61 = v86;
          int v66 = v85;
          int v65 = v84;
          int v71 = v103;
          unsigned int v74 = v104;
          unsigned int v60 = v83;
          unsigned int v76 = v101;
          uint64_t v62 = v102;
          unsigned int v59 = v82;
          unsigned int v70 = v105;
          unsigned int v69 = v106;
          int v56 = v81;
          int v50 = v80;
          BOOL v88 = !IsVideoStopped;
          unsigned int v67 = v107;
          int v55 = v108;
          if (v88) {
            long long v79 = "-";
          }
          else {
            long long v79 = "_";
          }
        }
        snprintf((char *)buf, 0x190uLL, "%8.3f/%04X:\t%.4f\t%.4f\t%.4f\t%.4f %c\tRTT:%-4u\tPLR:%4.2f@%.1f\tRRx:%u\tMBL:%d %u\t%4u/%4u\t %4u:%4u/%4u  %4u:%4u/%4u  CS: %05X %05X %u BB: %3u\t%4u\t%3u\t%s UAT %u\t%u\t%s\t%s\t%d\t%d\t%d\t%d\t%.3f\t%.3f\t%u\t%u\t%.3f\t%u\t%u", v49, v50, v51, v52, v53, v54, v62, v55, v68, v73, v56, v65, v66, v74, v116,
          v59,
          v60,
          v61,
          v67,
          v69,
          v70,
          v71,
          v72,
          v115,
          v112,
          v114,
          v76,
          v110,
          v113,
          v111,
          v109,
          v79,
          *(_DWORD *)(a1 + 1072),
          *(_DWORD *)(a1 + 5004) / 0x3E8u,
          *(_DWORD *)(a1 + 5008),
          *(_DWORD *)(a1 + 5000),
          *(double *)(a1 + 5168),
          *(float *)(a1 + 5328),
          *(_DWORD *)(a1 + 5332) / 0x3E8u,
          *(_DWORD *)(a1 + 5336) / 0x3E8u,
          *(double *)(a1 + 25640),
          *(double *)(a1 + 25624) / 0x3E8,
          *(_DWORD *)(a1 + 25632));
        if (*(unsigned char *)(a1 + 5160))
        {
          int v95 = *(_DWORD *)(a1 + 1120);
          *(_DWORD *)(a1 + 1120) = v95 + 1;
          if ((v95 & 0xF) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v96 = VRTraceErrorLogLevelToCSTR();
            unsigned int v97 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)unint64_t v117 = 136315906;
              uint64_t v118 = v96;
              __int16 v119 = 2080;
              int v120 = "_VCRateControlAlgorithmLayeredContinuousTier_PrintRateControlInfoToLogDump";
              __int16 v121 = 1024;
              int v122 = 575;
              __int16 v123 = 2080;
              int v124 = buf;
              _os_log_impl(&dword_1E1EA4000, v97, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d %s", v117, 0x26u);
            }
          }
        }
        uint64_t v98 = *(void *)(a1 + 5144);
        if (v98) {
          VRLogfilePrintWithTimestamp(v98, "%s\n", v89, v90, v91, v92, v93, v94, (char)buf);
        }
        *(_DWORD *)(a1 + 1076) = 0;
        *(_DWORD *)(a1 + 1080) = 0;
        return 1;
      }
      goto LABEL_22;
    }
    if (*(_DWORD *)(a1 + 1072))
    {
      if (*(void *)(a1 + 1048))
      {
        VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateAlgorithmWithBasebandStatistics(a1, a2, a3, a4, a5, a6, a7, a8);
        if (VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToBaseband(a1))
        {
          *(_DWORD *)(a1 + 1084) = VCRateControlAlgorithmStabilizedNOWRDPriv_RampDownTierDueToBaseband(a1, *(double *)(a1 + 5264));
          LODWORD(v31) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 1084));
          *(double *)(a1 + 1096) = (double)v31;
          VCRateControlAlgorithmBasePriv_StateChange(a1, 6);
        }
        else if (VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToBaseband((double *)a1))
        {
          *(_DWORD *)(a1 + 530_Block_object_dispose(&STACK[0x250], 8) = VCRateControlAlgorithmStabilizedNOWRDPriv_BasebandAdditionalTiersForRampUp(a1);
        }
        _VCRateControlAlgorithmLayeredContinuousTier_UpdateTargetBitrate(a1, *(double *)(a1 + 1096));
        if (*(unsigned char *)(a1 + 5312)) {
          VCRateControlMediaController_UpdateBasebandSuggestion(*(void *)(a1 + 1048), a2);
        }
        return 1;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        return 0;
      }
      uint64_t v99 = VRTraceErrorLogLevelToCSTR();
      uint64_t v100 = *MEMORY[0x1E4F47A50];
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (result)
      {
        _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_4(v99, v100);
        return 0;
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        return 0;
      }
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (result)
      {
        _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_3();
        return 0;
      }
    }
  }
  return result;
}

uint64_t _VCRateControlAlgorithmLayeredContinuousTier_UpdateTargetBitrate(uint64_t result, unsigned int a2)
{
  int v2 = *(_DWORD *)(result + 60);
  if ((v2 & 0x80000000) == 0)
  {
    while (vcRateControlTierBitrates[v2] > a2)
    {
      if (v2-- <= 0)
      {
        int v2 = -1;
        break;
      }
    }
  }
  int v4 = *(_DWORD *)(result + 1084);
  int v5 = *(_DWORD *)(result + 64);
  if (v2 > v5) {
    int v5 = v2;
  }
  *(_DWORD *)(result + 1084) = v5;
  if (*(_DWORD *)(result + 1084) < v4) {
    *(void *)(result + 1176) = *(void *)(result + 1128);
  }
  *(_DWORD *)(result + 1104) = a2;
  *(_DWORD *)(result + 110_Block_object_dispose(&STACK[0x250], 8) = vcRateControlTierBitrates[*(int *)(result + 1084)];
  return result;
}

uint64_t _VCRateControlAlgorithmLayeredContinuousTier_RampDown(uint64_t a1)
{
  VCRateControlAlgorithmStabilizedNOWRDPriv_SetBitrateUnstable(a1);
  VCRateControlAlgorithmBasePriv_UpdateCongestionStatusWhenRampDown(a1, *(double *)(a1 + 1128));
  double v8 = *(double *)(a1 + 1096);
  HIDWORD(v9) = 1091294464;
  if (v8 <= 228000.0)
  {
    LODWORD(v9) = vcRateControlTierBitrates[*(int *)(a1 + 80)];
    double v22 = (double)v9;
    double v23 = 1.0;
    if (v8 >= v22 && (*(unsigned char *)(a1 + 1081) & 2) == 0 && !*(unsigned char *)(a1 + 419)) {
      double v23 = 3.0;
    }
    double v24 = v23 * *(double *)(a1 + 25648);
    *(double *)(a1 + 25640) = v24;
    double v25 = *(double *)(a1 + 1096);
    if (v25 >= 50000.0)
    {
      if (v25 >= 132000.0) {
        double v26 = 32000.0;
      }
      else {
        double v26 = 16000.0;
      }
    }
    else
    {
      double v26 = 8000.0;
    }
    double v27 = v8 - v26 * v24;
    LODWORD(v26) = vcRateControlTierBitrates[*(int *)(a1 + 64)];
    double v28 = (double)*(unint64_t *)&v26;
    if (v27 <= v28) {
      double v21 = v28;
    }
    else {
      double v21 = v27;
    }
    VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] Congestion!!! New bitrate down linearly newTargetBitrate=%f, congestionSeverity=%f", v2, v3, v4, v5, v6, v7, *(_DWORD *)(a1 + 1116));
  }
  else
  {
    double v10 = 1.0;
    if ((*(unsigned char *)(a1 + 1081) & 2) == 0 && !*(unsigned char *)(a1 + 419)) {
      double v10 = 3.0;
    }
    long double v11 = v10 * *(double *)(a1 + 25648);
    *(long double *)(a1 + 25640) = v11;
    double v18 = v8 / pow(1.159, v11);
    LODWORD(v19) = vcRateControlTierBitrates[*(int *)(a1 + 64)];
    double v20 = (double)v19;
    if (v18 <= v20) {
      double v21 = v20;
    }
    else {
      double v21 = v18;
    }
    VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] Congestion!!! New bitrate down exponentially to newTargetBitrate=%f, congestionSeverity=%f", v12, v13, v14, v15, v16, v17, *(_DWORD *)(a1 + 1116));
  }
  uint64_t result = v21;
  *(void *)(a1 + 2564_Block_object_dispose(&STACK[0x250], 8) = 0x3FF0000000000000;
  return result;
}

uint64_t _VCRateControlAlgorithmLayeredContinuousTier_RampUp(uint64_t a1)
{
  VCRateControlAlgorithmStabilizedNOWRDPriv_SetBitrateUnstable(a1);
  VCRateControlAlgorithmBasePriv_UpdateCongestionStatusWhenRampUp(a1);
  *(_DWORD *)(a1 + 5000) = 0;
  double v2 = *(double *)(a1 + 1096);
  double v3 = *(double *)(a1 + 1128) - *(double *)(a1 + 25616);
  double v4 = _VCRateControlAlgorithmLayeredContinuousTier_RampUpSpeedFactor(a1);
  *(double *)(a1 + 25640) = v4;
  double v5 = v3 * v4;
  if (v2 <= 228000.0) {
    double v6 = v2 + v5 * 32000.0;
  }
  else {
    double v6 = v2 * pow(1.159, v5);
  }
  LODWORD(v5) = vcRateControlTierBitrates[*(int *)(a1 + 60)];
  double v7 = (double)*(unint64_t *)&v5;
  if (v6 >= v7) {
    return v7;
  }
  return v6;
}

double _VCRateControlAlgorithmLayeredContinuousTier_RampUpSpeedFactor(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1072) == 1)
  {
    double v2 = (double *)(a1 + 5112);
LABEL_6:
    double v3 = *v2;
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a1 + 5222) || (double v3 = 30.0, *(_DWORD *)(a1 + 1084) <= *(_DWORD *)(a1 + 68)))
  {
    double v2 = (double *)(a1
                  + 40
                  + 8 * VCRateControlCongestionLevel_BitrateRange(*(double *)(a1 + 1096))
                  + 328);
    goto LABEL_6;
  }
LABEL_7:
  double v4 = *(double *)(a1 + 1096);
  unsigned int v5 = 1000 * *(_DWORD *)(a1 + 1200);
  double v6 = *(double *)(a1 + 25624);
  int v7 = 3;
  if (v6 == 0.0 || v4 < 76000.0 || v5 && v6 > (double)v5) {
    double v6 = (double)v5;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 25632);
  }
  double v8 = 1.0 / v3;
  double v9 = v6 - v4;
  double v10 = -(v6 - v4);
  if (v9 < 0.0) {
    double v9 = v10;
  }
  if (v7 >= 3 && v9 < v6 * 0.15) {
    double v8 = v9 / (v6 * 0.15) / (double)(v7 - 2);
  }
  return fmin(fmax(v8, 0.0166666667), 2.0);
}

uint64_t RTPGenerateSSRC()
{
  do
  {
    unsigned int v0 = vcvtd_n_s64_f64((double)hwrandom() * 4.65661287e-10, 0x10uLL);
    uint64_t result = vcvtd_n_s64_f64((double)hwrandom() * 4.65661287e-10, 0x10uLL) | (v0 << 16);
  }
  while (!result);
  return result;
}

uint64_t RTPCreateHandle(uint64_t *a1, unsigned int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (a2 >= 2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 2147549199;
    }
    VRTraceErrorLogLevelToCSTR();
    uint64_t v9 = 2147549199;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTPCreateHandle_cold_1();
    }
    return v9;
  }
  uint64_t v16 = (char *)malloc_type_calloc(1uLL, 0x6BE0uLL, 0x10F00409C7AC759uLL);
  if (v16)
  {
    uint64_t v17 = v16;
    *((_DWORD *)v16 + 2) = -1;
    *(void *)uint64_t v16 = 0xFFFFFFFF00000001;
    *((_WORD *)v16 + _Block_object_dispose(&STACK[0x250], 8) = 128;
    *((void *)v16 + _Block_object_dispose(&STACK[0x250], 8) = RTPMapCreate();
    *((_DWORD *)v17 + 7) = a2;
    *((void *)v17 + 129_Block_object_dispose(&STACK[0x250], 8) = a6;
    *((void *)v17 + 1299) = a7;
    *((_DWORD *)v17 + 3_Block_object_dispose(&STACK[0x250], 8) = -1;
    *((_DWORD *)v17 + 2600) = a5;
    *((_DWORD *)v17 + 1750) = 3;
    *((void *)v17 + 23) = 1;
    *(_OWORD *)(v17 + 10424) = 0u;
    *((void *)v17 + 1306) = 0;
    *((void *)v17 + 1305) = 0;
    *(_OWORD *)(v17 + 16_Block_object_dispose(&STACK[0x250], 8) = xmmword_1E259DF10;
    *((_DWORD *)v17 + 2622) = -1;
    *((_DWORD *)v17 + 2662) = -1;
    *((_DWORD *)v17 + 6900) = 0;
    *((_DWORD *)v17 + 2211) = 0;
    bzero(v17 + 7080, 0x6E0uLL);
    *((_DWORD *)v17 + 179) = 1;
    if (!*((_WORD *)v17 + 96))
    {
      do
      {
        int v18 = hwrandom16();
        *((_WORD *)v17 + 96) = v18;
      }
      while (!v18);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v19 = VRTraceErrorLogLevelToCSTR();
      double v20 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *((unsigned __int16 *)v17 + 96);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v44 = v19;
        __int16 v45 = 2080;
        uint64_t v46 = "RTPCreateHandle";
        __int16 v47 = 1024;
        int v48 = 216;
        __int16 v49 = 2048;
        int v50 = v17;
        __int16 v51 = 1024;
        unsigned int v52 = a2;
        __int16 v53 = 1024;
        int v54 = v21;
        _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %p Starting SeqNum for PayloadType %d = %d", buf, 0x32u);
      }
    }
    if (!a8) {
      a8 = RTPGenerateSSRC();
    }
    *((_DWORD *)v17 + 50) = a8;
    unsigned int v22 = *((_DWORD *)v17 + 49);
    if (a4 && !v22)
    {
      do
      {
        unsigned int v23 = hwrandom();
        unsigned int v22 = vcvtd_n_s64_f64((double)hwrandom() * 4.65661287e-10, 0x10uLL) | (vcvtd_n_s64_f64((double)v23* 4.65661287e-10, 0x10uLL) << 16);
        *((_DWORD *)v17 + 49) = v22;
      }
      while (!v22);
      a8 = *((_DWORD *)v17 + 50);
    }
    *((void *)v17 + 37) = 0;
    *((void *)v17 + 3451) = 0x3FF0000000000000;
    *((void *)v17 + 29) = v22;
    *((void *)v17 + 30) = v22;
    *((void *)v17 + 31) = v22;
    *((void *)v17 + 32) = v22;
    *((_DWORD *)v17 + 79) = 24000;
    *((_DWORD *)v17 + 6) = bswap32(a8);
    pthread_mutex_init((pthread_mutex_t *)(v17 + 7016), 0);
    double v24 = VCMemoryPool_Create(0x17B0uLL);
    *((void *)v17 + 1309) = v24;
    if (v24)
    {
      CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (VCAllocatorFirstCome_Create((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (uint64_t)"RTCPPacketAllocator", (CFAllocatorRef *)v17 + 1330))
      {
        uint64_t v9 = 2147549187;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPCreateHandle_cold_9();
          }
        }
      }
      else if (VCAllocatorFirstCome_Create(v25, (uint64_t)"RTCPBlockBufferHeaderAllocator", (CFAllocatorRef *)v17 + 1310))
      {
        uint64_t v9 = 2147549187;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPCreateHandle_cold_8();
          }
        }
      }
      else if (VCAllocatorFirstCome_Create(v25, (uint64_t)"RTPPacketBlockBufferAllocator", (CFAllocatorRef *)v17 + 1350))
      {
        uint64_t v9 = 2147549187;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPCreateHandle_cold_7();
          }
        }
      }
      else
      {
        CFAllocatorRef v26 = (const __CFAllocator *)*((void *)v17 + 1350);
        CMBlockBufferRef blockBufferOut = 0;
        OSStatus v27 = CMBlockBufferCreateWithMemoryBlock(v26, 0, 0x5DCuLL, 0, 0, 0, 0x5DCuLL, 1u, &blockBufferOut);
        if (v27)
        {
          if (v27 >= 0) {
            int v34 = v27;
          }
          else {
            int v34 = -v27;
          }
          uint64_t v9 = v34 | 0xD0010000;
        }
        else
        {
          if (blockBufferOut)
          {
            CFRelease(blockBufferOut);
            CMBlockBufferRef blockBufferOut = 0;
          }
          if (VCAllocatorFirstCome_Create(v25, (uint64_t)"channelDataFormatAllocator", (CFAllocatorRef *)v17 + 1352))
          {
            uint64_t v9 = 2147549187;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                RTPCreateHandle_cold_6();
              }
            }
          }
          else
          {
            long long v42 = xmmword_1E259DF40;
            if (VCAllocatorMultiQueue_Create(v25, (uint64_t)"RTPPacketMetadataAllocator", 2u, (unint64_t *)&v42, (CFAllocatorRef *)v17 + 1351))
            {
              uint64_t v9 = 2147549187;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  RTPCreateHandle_cold_5();
                }
              }
            }
            else
            {
              uint64_t Handle = CreateHandle();
              if (Handle != 0xFFFFFFFFLL)
              {
                uint64_t v29 = Handle;
                *((void *)v17 + 1294) = 0xFFFFFFFFLL;
                *((void *)v17 + 1295) = 0xFFFFFFFFLL;
                *((void *)v17 + 1296) = 0;
                *((_DWORD *)v17 + 2594) = 0;
                *((_DWORD *)v17 + 2616) = -1;
                if (VCDefaults_GetBoolValueForKey(@"enableLTRPLogging", 0)) {
                  int v30 = 7;
                }
                else {
                  int v30 = 8;
                }
                *((_DWORD *)v17 + 2614) = v30;
                *((void *)v17 + 1395) = 0;
                *((void *)v17 + 1396) = v17 + 11160;
                *((void *)v17 + 1397) = 0;
                *((void *)v17 + 139_Block_object_dispose(&STACK[0x250], 8) = v17 + 11176;
                *((void *)v17 + 1399) = 0;
                bzero(v17 + 11208, 0x4000uLL);
                uint64_t v9 = 0;
                *a1 = v29;
                return v9;
              }
              uint64_t v9 = 2147549189;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  RTPCreateHandle_cold_4();
                  uint64_t v9 = 2147549189;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      uint64_t v9 = 2147549187;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPCreateHandle_cold_3();
        }
      }
    }
    pthread_mutex_destroy((pthread_mutex_t *)(v17 + 7016));
    double v35 = (const void *)*((void *)v17 + 1330);
    if (v35) {
      CFRelease(v35);
    }
    unint64_t v36 = (OSQueueHead *)*((void *)v17 + 1309);
    if (v36) {
      VCMemoryPool_Destroy(v36);
    }
    int v37 = (const void *)*((void *)v17 + 1310);
    if (v37) {
      CFRelease(v37);
    }
    unint64_t v38 = (const void *)*((void *)v17 + 1350);
    if (v38) {
      CFRelease(v38);
    }
    int v39 = (const void *)*((void *)v17 + 1352);
    if (v39) {
      CFRelease(v39);
    }
    uint64_t v40 = (const void *)*((void *)v17 + 1351);
    if (v40) {
      CFRelease(v40);
    }
    free(v17);
  }
  else
  {
    uint64_t v9 = 2147549187;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v31 = VRTraceErrorLogLevelToCSTR();
      uint64_t v32 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPCreateHandle_cold_2(v31, v32);
      }
    }
  }
  return v9;
}

uint64_t RTPGetTimestampBase()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = *(unsigned int *)(v0 + 196);
  CheckOutHandleDebug();
  return v1;
}

void RTPCloseHandle()
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return;
  }
  unint64_t v1 = v0;
  _RTPUnregisterPacketCallback(v0);
  _RTCPUnregisterPacketCallback(v1);
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 != -1) {
    VTP_Close(v2);
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if (v3 != -1) {
    VTP_Close(v3);
  }
  CheckOutHandleDebug();
  if (*(void *)(v1 + 10424))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      unsigned int v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(v1 + 10424);
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v4;
        __int16 v41 = 2080;
        long long v42 = "RTPCloseHandle";
        __int16 v43 = 1024;
        int v44 = 406;
        __int16 v45 = 2048;
        uint64_t v46 = v6;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Releasing the statisticsCollector:%p", buf, 0x26u);
      }
    }
    CFRelease(*(CFTypeRef *)(v1 + 10424));
  }
  if (*(void *)(v1 + 10432))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      double v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(v1 + 10432);
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v7;
        __int16 v41 = 2080;
        long long v42 = "RTPCloseHandle";
        __int16 v43 = 1024;
        int v44 = 410;
        __int16 v45 = 2048;
        uint64_t v46 = v9;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Releasing the basebandCongestionDetector:%p", buf, 0x26u);
      }
    }
    CFRelease(*(CFTypeRef *)(v1 + 10432));
  }
  if (*(void *)(v1 + 10440))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      long double v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(v1 + 10440);
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v10;
        __int16 v41 = 2080;
        long long v42 = "RTPCloseHandle";
        __int16 v43 = 1024;
        int v44 = 414;
        __int16 v45 = 2048;
        uint64_t v46 = v12;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Releasing the mediaQueue:%p", buf, 0x26u);
      }
    }
    CFRelease(*(CFTypeRef *)(v1 + 10440));
  }
  if (v1 >= v1 + 27616)
  {
    __break(0x5519u);
    return;
  }
  int v13 = 0;
  do
  {
    unsigned int v14 = (unsigned __int16)v13;
    _RTPTransportMediaPacketHistoryCleanUp(v1, (unsigned __int16)v13++);
  }
  while (v14 < 0x3FF);
  if (*(_DWORD *)(v1 + 28) <= 1u)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(v1 + 7016));
    SRTPCleanUp(v1 + 7080);
    SRTPCleanUp(v1 + 7520);
    SRTPCleanUp(v1 + 7960);
    SRTPCleanUp(v1 + 8400);
    uint64_t v15 = *(void **)(v1 + 40);
    if (v15)
    {
      free(v15);
      *(void *)(v1 + 40) = 0;
      *(_DWORD *)(v1 + 32) = 0;
    }
    uint64_t v16 = *(void **)(v1 + 56);
    if (v16)
    {
      free(v16);
      *(void *)(v1 + 56) = 0;
      *(_DWORD *)(v1 + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
    }
  }
  if (*(void *)(v1 + 64)) {
    RTPMapDestroy((void **)(v1 + 64));
  }
  uint64_t v17 = *(void **)(v1 + 80);
  if (v17) {
    free(v17);
  }
  int v18 = *(const void **)(v1 + 10448);
  if (v18) {
    CFRelease(v18);
  }
  _RTPClearTransportStreamsInternal((void *)v1);
  uint64_t v19 = *(const void **)(v1 + 11128);
  if (v19) {
    CFRelease(v19);
  }
  double v20 = *(const void **)(v1 + 11136);
  if (v20) {
    CFRelease(v20);
  }
  int v21 = *(const void **)(v1 + 11144);
  if (v21) {
    CFRelease(v21);
  }
  unsigned int v22 = *(const void **)(v1 + 11152);
  if (v22) {
    CFRelease(v22);
  }
  unsigned int v23 = *(const void **)(v1 + 11192);
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = *(void *)(v1 + 11160);
  *(void *)CMTime buf = v24;
  if (!v24) {
    goto LABEL_55;
  }
  CFAllocatorRef v25 = (uint64_t *)(v1 + 11160);
  while (1)
  {
    uint64_t v26 = *(void *)(v24 + 6056);
    uint64_t v27 = *v25;
    if (*v25 != v24) {
      break;
    }
    *CFAllocatorRef v25 = v26;
    if (!v26) {
      goto LABEL_54;
    }
LABEL_52:
    _RTPReleaseRTPPacketInternal(v1, (_DWORD **)buf);
    *(void *)CMTime buf = v26;
    uint64_t v24 = v26;
  }
  do
  {
    uint64_t v28 = v27;
    uint64_t v27 = *(void *)(v27 + 6056);
  }
  while (v27 != v24);
  *(void *)(v28 + 6056) = v26;
  if (v26) {
    goto LABEL_52;
  }
  CFAllocatorRef v25 = (uint64_t *)(v28 + 6056);
LABEL_54:
  *(void *)(v1 + 1116_Block_object_dispose(&STACK[0x250], 8) = v25;
  _RTPReleaseRTPPacketInternal(v1, (_DWORD **)buf);
  *(void *)CMTime buf = v26;
LABEL_55:
  uint64_t v29 = *(void *)(v1 + 11176);
  uint64_t v39 = v29;
  if (!v29) {
    goto LABEL_64;
  }
  int v30 = (uint64_t *)(v1 + 11176);
  while (2)
  {
    uint64_t v31 = *(void *)(v29 + 1632);
    uint64_t v32 = *v30;
    if (*v30 == v29)
    {
      *int v30 = v31;
      if (!v31) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    do
    {
      uint64_t v33 = v32;
      uint64_t v32 = *(void *)(v32 + 1632);
    }
    while (v32 != v29);
    *(void *)(v33 + 1632) = v31;
    if (v31)
    {
LABEL_62:
      _RTCPPacketForget(v1, (uint64_t)&v39);
      uint64_t v39 = v31;
      uint64_t v29 = v31;
      continue;
    }
    break;
  }
  int v30 = (uint64_t *)(v33 + 1632);
LABEL_63:
  *(void *)(v1 + 11184) = v30;
  _RTCPPacketForget(v1, (uint64_t)&v39);
  uint64_t v39 = v31;
LABEL_64:
  int v34 = *(const void **)(v1 + 10640);
  if (v34) {
    CFRelease(v34);
  }
  VCMemoryPool_Destroy(*(OSQueueHead **)(v1 + 10472));
  double v35 = *(const void **)(v1 + 10480);
  if (v35) {
    CFRelease(v35);
  }
  unint64_t v36 = *(const void **)(v1 + 10800);
  if (v36) {
    CFRelease(v36);
  }
  int v37 = *(const void **)(v1 + 10816);
  if (v37) {
    CFRelease(v37);
  }
  unint64_t v38 = *(const void **)(v1 + 10808);
  if (v38) {
    CFRelease(v38);
  }
  free((void *)v1);
}

void _RTPUnregisterPacketCallback(uint64_t a1)
{
  if (*(void *)(a1 + 10504))
  {
    int v2 = *(_DWORD *)(a1 + 10488);
    if (v2 == -1)
    {
      if (*(void *)(a1 + 11104)) {
        _RTPEnsureTransportStreamsDeactivated(a1);
      }
    }
    else
    {
      VTP_UnregisterPacketCallback(v2);
      *(_DWORD *)(a1 + 1048_Block_object_dispose(&STACK[0x250], 8) = -1;
    }
    _Block_release(*(const void **)(a1 + 10504));
    *(void *)(a1 + 10504) = 0;
    *(void *)(a1 + 10496) = 0;
  }
}

uint64_t _RTPClearTransportStreamsInternal(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _RTPEnsureTransportStreamsDeactivated((uint64_t)a1);
  if ((v2 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315906;
      uint64_t v12 = v3;
      __int16 v13 = 2080;
      unsigned int v14 = "_RTPClearTransportStreamsInternal";
      __int16 v15 = 1024;
      int v16 = 5514;
      __int16 v17 = 1024;
      int v18 = v2;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d _RTPEnsureTransportStreamsDeactivated failed %d", (uint8_t *)&v11, 0x22u);
    }
  }
  unsigned int v5 = (const void *)a1[1388];
  if (v5)
  {
    CFRelease(v5);
    a1[1388] = 0;
  }
  uint64_t v6 = (const void *)a1[1389];
  if (v6)
  {
    CFRelease(v6);
    a1[1389] = 0;
  }
  uint64_t v7 = (const void *)a1[1390];
  if (v7)
  {
    CFRelease(v7);
    a1[1390] = 0;
  }
  double v8 = (const void *)a1[984];
  if (v8)
  {
    CFRelease(v8);
    a1[984] = 0;
  }
  uint64_t v9 = (const void *)a1[985];
  if (v9)
  {
    CFRelease(v9);
    a1[985] = 0;
  }
  return v2;
}

void _RTPReleaseRTPPacketInternal(uint64_t a1, _DWORD **a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2)
    {
      if (!*v2)
      {
        VCBlockBuffer_Clear((uint64_t)(v2 + 32));
        VCBlockBuffer_Clear((uint64_t)(v2 + 38));
        VCBlockBuffer_Clear((uint64_t)(v2 + 44));
      }
      if (v2 >= v2 + 1516)
      {
        __break(0x5519u);
      }
      else
      {
        uint64_t v4 = *(OSQueueHead **)(a1 + 10472);
        VCMemoryPool_Free(v4, v2);
      }
    }
  }
}

uint64_t RTPGetJitter(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = 2147549185;
  if (a2 && a3 && a4)
  {
    uint64_t v8 = CheckInHandleDebug();
    if (v8)
    {
      *a2 = *(_DWORD *)(v8 + 4828);
      *a3 = *(_DWORD *)(v8 + 6776);
      *a4 = vcvtad_u64_f64(*(double *)(v8 + 6784));
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147549186;
    }
  }
  return v4;
}

uint64_t RTPGetPacketSent(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 2147549185;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *a2 = *(_DWORD *)(v4 + 204);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147549186;
    }
  }
  return v2;
}

uint64_t RTPSetAudioReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(void *)(v3 + 10416) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetWRMInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2147549185;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *(void *)(v4 + 1040_Block_object_dispose(&STACK[0x250], 8) = a2;
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147549186;
    }
  }
  return v2;
}

uint64_t RTPGetPacketLossMetrics(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = CheckInHandleDebug();
  if (!v7) {
    return 2147549186;
  }
  if (*(_DWORD *)(v7 + 7004))
  {
    unsigned int v8 = *(_DWORD *)(v7 + 704) - *(_DWORD *)(v7 + 712);
    unsigned int v9 = *(_DWORD *)(v7 + 692) - (*(_DWORD *)(v7 + 708) + *(unsigned __int16 *)(v7 + 688)) + 1;
    if (a2) {
      *a2 = v8;
    }
    if (a3) {
      *a3 = v9;
    }
    if (!a4) {
      goto LABEL_19;
    }
    unsigned int v10 = v9 - v8;
    if (v9 >= v8) {
      goto LABEL_18;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      uint64_t v12 = *MEMORY[0x1E4F47A50];
      __int16 v13 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        unsigned int v10 = 0;
        if (!v14)
        {
LABEL_18:
          *a4 = v10;
          goto LABEL_19;
        }
        int v16 = 136316162;
        uint64_t v17 = v11;
        __int16 v18 = 2080;
        uint64_t v19 = "RTPGetPacketLossMetrics";
        __int16 v20 = 1024;
        int v21 = 587;
        __int16 v22 = 1024;
        unsigned int v23 = v8;
        __int16 v24 = 1024;
        unsigned int v25 = v9;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Negative packetsLostForInterval detected. receivedForInterval=%d expectedForInterval=%d. Reset to 0", (uint8_t *)&v16, 0x28u);
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        int v16 = 136316162;
        uint64_t v17 = v11;
        __int16 v18 = 2080;
        uint64_t v19 = "RTPGetPacketLossMetrics";
        __int16 v20 = 1024;
        int v21 = 587;
        __int16 v22 = 1024;
        unsigned int v23 = v8;
        __int16 v24 = 1024;
        unsigned int v25 = v9;
        _os_log_debug_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Negative packetsLostForInterval detected. receivedForInterval=%d expectedForInterval=%d. Reset to 0", (uint8_t *)&v16, 0x28u);
      }
    }
    unsigned int v10 = 0;
    goto LABEL_18;
  }
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
LABEL_19:
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPResetHandle()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2147549186;
  }
  RTPReset(v0, *(_DWORD *)(v0 + 4832));
  CheckOutHandleDebug();
  return 0;
}

void RTPReset(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 6480;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315906;
      uint64_t v8 = v5;
      __int16 v9 = 2080;
      unsigned int v10 = "RTPReset";
      __int16 v11 = 1024;
      int v12 = 603;
      __int16 v13 = 1024;
      int v14 = a2;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SSRC:%X", (uint8_t *)&v7, 0x22u);
    }
  }
  *(_WORD *)(a1 + 68_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(a1 + 692) = 0;
  *(void *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(void *)(a1 + 4816) = 0;
  *(_DWORD *)(a1 + 482_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(_DWORD *)(a1 + 4832) = a2;
  *(void *)(a1 + 4852) = 0;
  *(void *)(a1 + 4840) = 0;
  *(void *)(a1 + 6472) = 0x800000007FFFFFFFLL;
  *(_WORD *)uint64_t v4 = 255;
  *(void *)(a1 + 648_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(_DWORD *)(a1 + 7004) = 0;
  *(_DWORD *)(a1 + 10464) = -1;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8844));
  *(unsigned char *)(v4 + 2360) = 0;
  *(_DWORD *)(a1 + 7640) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8844));
  *(_WORD *)(a1 + 7650) = 0;
}

uint64_t RTPResetDecryptionStatus()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2147549186;
  }
  *(_DWORD *)(v0 + 10464) = -1;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetDestinationWithToken(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147549186;
  }
  uint64_t v6 = v5;
  *(_DWORD *)(v5 + 144) = a3;
  VTP_SetSourceDestinationWithToken(*(_DWORD *)(v5 + 4), a2);
  VTP_SetSourceDestinationWithToken(*(_DWORD *)(v6 + 8), a2);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    uint64_t v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(v6 + 28);
      int v11 = 136316162;
      uint64_t v12 = v7;
      __int16 v13 = 2080;
      int v14 = "RTPSetDestinationWithToken";
      __int16 v15 = 1024;
      int v16 = 683;
      __int16 v17 = 1024;
      int v18 = v9;
      __int16 v19 = 1024;
      int v20 = a2;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP/RTCP Destination for PT%d = [IDS datagram channel token %u]", (uint8_t *)&v11, 0x28u);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetDestination(uint64_t a1, int a2, const char *a3, int a4, int a5, int a6, int a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  memset(v31, 170, 6);
  uint64_t v29 = 0;
  uint64_t v13 = CheckInHandleDebug();
  if (!v13) {
    return 2147549186;
  }
  uint64_t v14 = v13;
  if (!a7) {
    *(_DWORD *)(v13 + 144) = a6;
  }
  *(_DWORD *)(v13 + 12) = a2;
  memset(&v30, 0, sizeof(v30));
  if (a2) {
    int v15 = 30;
  }
  else {
    int v15 = 2;
  }
  v30.ai_family = v15;
  v30.ai_socktype = 2;
  __sprintf_chk(v31, 0, 6uLL, "%u", a4);
  int v16 = getaddrinfo(a3, v31, &v30, &v29);
  if (v16 == -1 || !v29)
  {
    uint64_t v24 = v16 | 0xB0010000;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v25 = VRTraceErrorLogLevelToCSTR();
      uint64_t v26 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v33 = v25;
        __int16 v34 = 2080;
        double v35 = "RTPSetDestination";
        __int16 v36 = 1024;
        int v37 = 718;
        __int16 v38 = 1024;
        int v39 = 718;
        __int16 v40 = 2080;
        *(void *)__int16 v41 = a3;
        *(_WORD *)&v41[8] = 2080;
        *(void *)&unsigned char v41[10] = v31;
        *(_WORD *)&v41[18] = 1024;
        v42[0] = v24;
        _os_log_error_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: getaddrinfo(%s,%s) failed(%08X)", buf, 0x3Cu);
      }
    }
    goto LABEL_29;
  }
  uint64_t result = *(unsigned int *)(v14 + 4);
  ai_addr = v29->ai_addr;
  if (!ai_addr || ai_addr < (sockaddr *)((char *)ai_addr + v29->ai_addrlen))
  {
    VTP_SetSourceDestinationWithIPPort(result);
    freeaddrinfo(v29);
    __sprintf_chk(v31, 0, 6uLL, "%u", a5);
    if (getaddrinfo(a3, v31, &v30, &v29) == -1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      {
        uint64_t v24 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v27 = VRTraceErrorLogLevelToCSTR();
        uint64_t v28 = *MEMORY[0x1E4F47A50];
        uint64_t v24 = 0xFFFFFFFFLL;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316674;
          uint64_t v33 = v27;
          __int16 v34 = 2080;
          double v35 = "RTPSetDestination";
          __int16 v36 = 1024;
          int v37 = 734;
          __int16 v38 = 1024;
          int v39 = 734;
          __int16 v40 = 2080;
          *(void *)__int16 v41 = a3;
          *(_WORD *)&v41[8] = 2080;
          *(void *)&unsigned char v41[10] = v31;
          *(_WORD *)&v41[18] = 1024;
          v42[0] = -1;
          _os_log_error_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: getaddrinfo(%s,%s) failed(%08X)", buf, 0x3Cu);
        }
      }
      goto LABEL_29;
    }
    uint64_t result = *(unsigned int *)(v14 + 8);
    __int16 v19 = v29->ai_addr;
    if (!v19 || v19 < (sockaddr *)((char *)v19 + v29->ai_addrlen))
    {
      VTP_SetSourceDestinationWithIPPort(result);
      freeaddrinfo(v29);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v20 = VRTraceErrorLogLevelToCSTR();
        uint64_t v21 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v22 = *(_DWORD *)(v14 + 28);
          *(_DWORD *)CMTime buf = 136316930;
          uint64_t v33 = v20;
          __int16 v34 = 2080;
          double v35 = "RTPSetDestination";
          __int16 v36 = 1024;
          int v37 = 745;
          __int16 v38 = 1024;
          int v39 = v22;
          __int16 v40 = 1024;
          *(_DWORD *)__int16 v41 = a7;
          *(_WORD *)&v41[4] = 2080;
          *(void *)&v41[6] = a3;
          *(_WORD *)&v41[14] = 1024;
          *(_DWORD *)&v41[16] = a4;
          LOWORD(v42[0]) = 1024;
          *(_DWORD *)((char *)v42 + 2) = a5;
          _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP/RTCP Destination for PT%d(%d) = [%s:%u/%u]", buf, 0x3Eu);
        }
      }
      uint64_t v23 = *(void *)(v14 + 10352);
      if (v23 != 0xFFFFFFFFLL) {
        MediaQueue_SetThrottlingIsIPv6(v23, *(_DWORD *)(v14 + 12) != 0);
      }
      uint64_t v24 = 0;
LABEL_29:
      CheckOutHandleDebug();
      return v24;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t RTPPayloads_PayloadProperties(int a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6, int *a7, _DWORD *a8, int *a9)
{
  uint64_t v9 = 0x10u;
  while (1)
  {
    unsigned int v10 = (int *)((char *)&g_payloadInfo + v9);
    if (*(_DWORD *)((char *)&g_payloadInfo + v9 - 16) == a5) {
      break;
    }
    v9 += 20;
    if (v9 == 496) {
      return 2147549199;
    }
  }
  int v12 = *(v10 - 2);
  int v13 = *v10;
  if (a5 > 118)
  {
    if (a5 == 119)
    {
      if (a4)
      {
        int v12 = a4;
        int v13 = a4 | 0x200000;
      }
      goto LABEL_23;
    }
    if (a5 != 123 && a5 != 126) {
      goto LABEL_23;
    }
LABEL_12:
    if (a7) {
      BOOL v14 = a2 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      int v12 = 8000;
    }
    else {
      int v12 = 90000;
    }
    goto LABEL_23;
  }
  if (a5 == 3)
  {
    if (a1) {
      int v13 = 458753;
    }
    else {
      int v13 = 458754;
    }
    goto LABEL_23;
  }
  if (a5 == 100) {
    goto LABEL_12;
  }
LABEL_23:
  int v15 = *(v10 - 1);
  if (a6) {
    *a6 = *(v10 - 3);
  }
  if (a7) {
    *a7 = v12;
  }
  if (a8)
  {
    if (v15 == -1) {
      int v15 = *(_DWORD *)(a3 + 40);
    }
    *a8 = v15;
  }
  uint64_t result = 0;
  if (a9) {
    *a9 = v13;
  }
  return result;
}

uint64_t RTPSetRTCPFB(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(_DWORD *)(v3 + 14_Block_object_dispose(&STACK[0x250], 8) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetTxPayloadList(uint64_t a1, int a2, const void *a3)
{
  uint64_t v3 = 2147549187;
  uint64_t result = 2147549185;
  if (a2 >= 1 && a3)
  {
    uint64_t v7 = CheckInHandleDebug();
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void **)(v7 + 56);
      if (v9)
      {
        free(v9);
        *(void *)(v8 + 56) = 0;
        *(_DWORD *)(v8 + 4_Block_object_dispose(&STACK[0x250], 8) = 0;
      }
      unsigned int v10 = malloc_type_malloc(4 * a2, 0x2E3CE8E9uLL);
      if (v10)
      {
        int v11 = v10;
        memcpy(v10, a3, 4 * a2);
        uint64_t v3 = 0;
        *(void *)(v8 + 56) = v11;
        *(_DWORD *)(v8 + 4_Block_object_dispose(&STACK[0x250], 8) = a2;
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPSetTxPayloadList_cold_1();
        }
      }
      CheckOutHandleDebug();
      return v3;
    }
    else
    {
      return 2147549186;
    }
  }
  return result;
}

uint64_t RTPSetRxPayloadList(uint64_t a1, int a2, const void *a3)
{
  uint64_t v3 = 2147549185;
  if (a2 < 1 || !a3) {
    return v3;
  }
  uint64_t v6 = CheckInHandleDebug();
  if (!v6) {
    return 2147549186;
  }
  unint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 40);
  if (v8)
  {
    free(v8);
    *(void *)(v7 + 40) = 0;
    *(_DWORD *)(v7 + 32) = 0;
  }
  uint64_t v9 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  if (!v9)
  {
    uint64_t v26 = 2147549187;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      goto LABEL_28;
    }
    VRTraceErrorLogLevelToCSTR();
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    RTPSetRxPayloadList_cold_1();
    goto LABEL_33;
  }
  unsigned int v10 = v9;
  memcpy(v9, a3, 4 * a2);
  *(void *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 32) = a2;
  uint64_t result = *(unsigned int *)(v7 + 4);
  if (result != -1) {
    uint64_t result = VTP_SetPayloadList(result, a2, v10);
  }
  if (v7 < v7 + 27616)
  {
    if (*(void *)(v7 + 40))
    {
      CFIndex v12 = *(int *)(v7 + 32);
      if ((int)v12 > 0)
      {
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          int v16 = Mutable;
          if (*(int *)(v7 + 32) >= 1)
          {
            uint64_t v17 = 0;
            uint64_t v18 = 0;
            do
            {
              CFNumberRef v19 = CFNumberCreate(v13, kCFNumberIntType, (const void *)(*(void *)(v7 + 40) + v17));
              CFArrayAppendValue(v16, v19);
              CFRelease(v19);
              ++v18;
              v17 += 4;
            }
            while (v18 < *(int *)(v7 + 32));
          }
          uint64_t v20 = *(void *)(v7 + 11128);
          if (!v20)
          {
            uint64_t v21 = VCPacketFilterRTPCreate((uint64_t)v13, (void *)(v7 + 11128));
            if ((v21 & 0x80000000) != 0) {
              goto LABEL_25;
            }
            uint64_t v20 = *(void *)(v7 + 11128);
          }
          uint64_t CMBaseObject = VCPacketFilterGetCMBaseObject(v20, v15);
          uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v23) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = *(uint64_t (**)(uint64_t, __CFString *, __CFArray *))(v24 + 56);
          if (!v25)
          {
            uint64_t v26 = 4294954514;
            goto LABEL_27;
          }
          uint64_t v21 = v25(CMBaseObject, @"RTPPayloadList", v16);
LABEL_25:
          uint64_t v26 = v21;
LABEL_27:
          CFRelease(v16);
LABEL_28:
          CheckOutHandleDebug();
          return v26;
        }
LABEL_33:
        uint64_t v26 = 2147549187;
        goto LABEL_28;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPSetRxPayloadList_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSetRxPayloadList_cold_2();
      }
    }
    uint64_t v26 = 2147549185;
    goto LABEL_28;
  }
  __break(0x5519u);
  return result;
}

uint64_t RTPAddMappingForPayload(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7 = CheckInHandleDebug();
  if (!v7) {
    return 2147549186;
  }
  uint64_t v8 = v7;
  RTPMapAddMappingForPayload(*(char ***)(v7 + 64), a2, a3, a4);
  RTPMapPrintMapping(*(void *)(v8 + 64));
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPResetPayloadMapping()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2147549186;
  }
  RTPMapResetMapping(*(void *)(v0 + 64));
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPGetInternalPayload(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (v3)
  {
    uint64_t InternalPayload = RTPMapGetInternalPayload(*(unsigned __int16 ***)(v3 + 64), a2);
    CheckOutHandleDebug();
    return InternalPayload;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPGetInternalPayload_cold_1();
      }
    }
    return 128;
  }
}

uint64_t RTPGetExternalPayload(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (v3)
  {
    uint64_t ExternalPayload = RTPMapGetExternalPayload(*(unsigned __int16 ***)(v3 + 64), a2);
    CheckOutHandleDebug();
    return ExternalPayload;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPGetExternalPayload_cold_1();
      }
    }
    return 128;
  }
}

uint64_t RTPSetSourceRate(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  uint64_t v4 = v3;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(v4 + 28);
      int v9 = 136316162;
      uint64_t v10 = v5;
      __int16 v11 = 2080;
      CFIndex v12 = "RTPSetSourceRate";
      __int16 v13 = 1024;
      int v14 = 1003;
      __int16 v15 = 1024;
      int v16 = v7;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d payloadType=%d, sourceRate=%u", (uint8_t *)&v9, 0x28u);
    }
  }
  *(_DWORD *)(v4 + 700) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPGetPacketMultiplexMode()
{
  uint64_t v0 = (unsigned int *)CheckInHandleDebug();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = *v0;
  CheckOutHandleDebug();
  return v1;
}

uint64_t RTPSetPacketMultiplexMode(uint64_t a1, int a2)
{
  uint64_t v3 = (_DWORD *)CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *uint64_t v3 = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetThrottlingAudioInterval(double a1)
{
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2147549186;
  }
  if (*(void *)(v2 + 10352) != 0xFFFFFFFFLL) {
    MediaQueue_SetThrottlingAudioInterval(a1);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetRTCPEnabled(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(_DWORD *)(v3 + 184) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetRTCPXREnabled(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(_DWORD *)(v3 + 18_Block_object_dispose(&STACK[0x250], 8) = a2;
  uint64_t v4 = *(void *)(v3 + 11104);
  if (v4) {
    _RTPSetTransportStreamReceiveHopLimitEnabled(v4, a2 != 0);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t _RTPSetTransportStreamReceiveHopLimitEnabled(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v2 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t CMBaseObject = VCPacketFilterGetCMBaseObject(a1, a2);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
  if (v9)
  {
    uint64_t v10 = *v2;
    return v9(CMBaseObject, @"ReceiveHopLimitEnabled", v10);
  }
  return result;
}

uint64_t RTPSetRTCPSendInterval(double a1)
{
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2147549186;
  }
  double v3 = 5.0;
  if (a1 > 0.0) {
    double v3 = a1;
  }
  *(double *)(v2 + 176) = v3;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPGetSequenceNumber(uint64_t a1, _WORD *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  if (a2) {
    *a2 = *(_WORD *)(v3 + 18);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPGetSendROCWithSequenceNumber(uint64_t a1, int *a2, unsigned int a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147549186;
  }
  SRTPGetSendROC(v5 + 7080, __rev16(a3), a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTCPGetReportNTPTimeMiddle32(uint64_t a1, char a2, _DWORD *a3)
{
  uint64_t result = CheckInHandleDebug();
  if (!result) {
    return 2147549186;
  }
  uint64_t v6 = (_DWORD *)(result + 620 + 4 * (a2 & 0xF));
  if ((unint64_t)v6 < result + 684 && (unint64_t)v6 >= result + 620)
  {
    *a3 = *v6;
    CheckOutHandleDebug();
    return 0;
  }
  else
  {
    __break(0x5519u);
  }
  return result;
}

uint64_t RTPGetExtendedSequenceNumber(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147549186;
  }
  int v6 = *(_DWORD *)(v5 + 224);
  if (a2 < (unsigned __int16)v6) {
    v6 -= 0x10000;
  }
  *a3 = v6 & 0xFFFF0000 | a2;
  CheckOutHandleDebug();
  return 0;
}

unint64_t RTPSendRTP(uint64_t a1, char a2, int a3, int a4, void *a5, unsigned int a6, _DWORD *a7, const void *a8, double a9, float a10, unsigned __int8 a11, int a12, uint64_t a13, uint64_t a14, char a15, int a16)
{
  uint64_t v26 = a13;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v27 = 2147549186;
  unint64_t v28 = CheckInHandleDebug();
  if (v28)
  {
    if (v28 == 0xFFFFFFFF)
    {
      unint64_t v27 = 2147549190;
    }
    else
    {
      *(_WORD *)(v28 + 16) = *(_WORD *)(v28 + 16) & 0x80FF | ((a2 & 0x7F) << 8);
      v30[1] = 0;
      int v31 = 0;
      v30[0] = 0;
      int v33 = 0;
      float v32 = a10;
      if ((a6 & 0x80000000) != 0 || v28 >= v28 + 27616) {
        __break(0x5519u);
      }
      unint64_t v27 = SendRTP(a1, v28, a3, a4, 0, 0, a5, a6, a9, a7, a8, a11, a12, 0, 0, 0, 0, (uint64_t)v30, 0,
              a13,
              a14,
              0,
              a15,
              a16);
      CheckOutHandleDebug();
      uint64_t v26 = 0;
    }
  }
  VCMediaControlInfoDispose(v26);
  return v27;
}

unint64_t SendRTP(uint64_t a1, uint64_t a2, int a3, int a4, void *a5, unsigned int a6, void *a7, unsigned int a8, double a9, _DWORD *a10, const void *a11, unsigned __int8 a12, int a13, int a14, unsigned __int8 a15, _DWORD *a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,long long *a22,char a23,int a24)
{
  uint64_t v245 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)dataCFIndex Length = 12;
  double v225 = 0;
  double v33 = micro();
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v224 = 0;
  long long v227 = 0u;
  memset(&dataLength[4], 0, 64);
  unint64_t v222 = 0;
  if (a10) {
    *a10 = 0;
  }
  uint64_t v34 = (uint64_t)src;
  uint64_t v214 = (void *)a20;
  ++*(void *)(a2 + 352);
  if ((a6 & 0x80000000) != 0)
  {
    unint64_t v44 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      goto LABEL_298;
    }
    uint64_t v171 = VRTraceErrorLogLevelToCSTR();
    uint64_t v172 = *MEMORY[0x1E4F47A50];
    uint64_t v55 = a20;
    uint64_t v173 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v173, OS_LOG_TYPE_DEBUG)) {
        SendRTP_cold_1();
      }
      goto LABEL_334;
    }
    if (!os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_334;
    }
    *(_DWORD *)CMTime buf = 136315906;
    *(void *)&uint8_t buf[4] = v171;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "SendRTP";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = 1576;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = a8;
    uint64_t v174 = " [%s] %s:%d Header size is negative: %d";
LABEL_263:
    _os_log_impl(&dword_1E1EA4000, v172, OS_LOG_TYPE_DEFAULT, v174, buf, 0x22u);
    goto LABEL_334;
  }
  if ((a8 & 0x80000000) != 0)
  {
    unint64_t v44 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      goto LABEL_298;
    }
    uint64_t v175 = VRTraceErrorLogLevelToCSTR();
    uint64_t v172 = *MEMORY[0x1E4F47A50];
    uint64_t v55 = a20;
    unsigned int v176 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v176, OS_LOG_TYPE_DEBUG)) {
        SendRTP_cold_2();
      }
      goto LABEL_334;
    }
    if (!os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_334;
    }
    *(_DWORD *)CMTime buf = 136315906;
    *(void *)&uint8_t buf[4] = v175;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "SendRTP";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = 1577;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = a8;
    uint64_t v174 = " [%s] %s:%d Data size is negative: %d";
    goto LABEL_263;
  }
  if ((*(_DWORD *)(a2 + 7000) & 0xFFFFFFFD) == 0)
  {
    unint64_t v44 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      goto LABEL_298;
    }
    signed int v177 = (int *)(a2 + 7000);
    uint64_t v178 = VRTraceErrorLogLevelToCSTR();
    uint64_t v172 = *MEMORY[0x1E4F47A50];
    uint64_t v55 = a20;
    unsigned int v179 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG)) {
        SendRTP_cold_3();
      }
      goto LABEL_334;
    }
    if (!os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_334;
    }
    int v180 = *v177;
    *(_DWORD *)CMTime buf = 136315906;
    *(void *)&uint8_t buf[4] = v178;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "SendRTP";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = 1578;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v180;
    uint64_t v174 = " [%s] %s:%d RTP SendRTP direction[%d] dropping packet";
    goto LABEL_263;
  }
  __src = a5;
  if (!*(void *)(a2 + 10440))
  {
    int v35 = *(_DWORD *)(a2 + 7500);
    if ((v35 - 10) >= 0xFFFFFFFE)
    {
      unint64_t v44 = 2149711924;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v181 = VRTraceErrorLogLevelToCSTR();
        int v182 = *MEMORY[0x1E4F47A50];
        uint64_t v55 = a20;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          uint64_t v183 = *(void *)(a2 + 10440);
          int v184 = *(_DWORD *)(a2 + 200);
          *(_DWORD *)CMTime buf = 136316674;
          *(void *)&uint8_t buf[4] = v181;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "SendRTP";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&uint8_t buf[24] = 1585;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a1;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&buf[40] = v183;
          *(_WORD *)&unsigned char buf[48] = 1024;
          *(_DWORD *)&buf[50] = v35;
          *(_WORD *)&buf[54] = 1024;
          *(_DWORD *)&buf[56] = v184;
          _os_log_error_impl(&dword_1E1EA4000, v182, OS_LOG_TYPE_ERROR, " [%s] %s:%d Attempt to send un-encrypted packet with rtpHandle=%p, VCMediaQueue=%p, cipherSuite=%d, and ssrc=%u", buf, 0x3Cu);
        }
        goto LABEL_334;
      }
      goto LABEL_298;
    }
  }
  v217 = a7;
  if (a11) {
    unint64_t v36 = a12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (a16 && *a16)
  {
    unsigned int v37 = a16[2];
    if (v37 >> 30) {
      int v38 = 0x400000;
    }
    else {
      int v38 = 0x800000;
    }
    BOOL v39 = (v38 & v37) == 0;
  }
  else
  {
    BOOL v39 = 0;
  }
  uint64_t v208 = a1;
  unint64_t v40 = MicroToNTP(a9);
  unsigned int v41 = *(_DWORD *)(a2 + 196) + a4;
  *(void *)(a2 + 304) = v40;
  *(_DWORD *)(a2 + 312) = v41;
  if (!*(_DWORD *)(a2 + 220)) {
    *(void *)(a2 + 216) = v40;
  }
  long long v42 = (_WORD *)(a2 + 16);
  *(_WORD *)(a2 + 16) = ((a3 != 0) << 15) | (32 * (v36 != 0)) | *(_WORD *)(a2 + 16) & 0x7FCF;
  unsigned int v43 = *(unsigned __int16 *)(a2 + 192);
  BOOL blockAllocator = v39;
  if (v39) {
    *(_WORD *)(a2 + 192) = --v43;
  }
  unint64_t v44 = 2147549198;
  *(_WORD *)(a2 + 1_Block_object_dispose(&STACK[0x250], 8) = bswap32(v43) >> 16;
  unsigned int v219 = _RTPSendTimestampWithMediaSampleTime(a2, v41);
  *(_DWORD *)(a2 + 20) = bswap32(v219);
  int v45 = *(_DWORD *)(a2 + 224);
  unsigned int v46 = *(unsigned __int16 *)(a2 + 192);
  if (v46 >= (unsigned __int16)v45) {
    unsigned int v47 = v45 & 0xFFFF0000;
  }
  else {
    unsigned int v47 = (v45 & 0xFFFF0000) + 0x10000;
  }
  *(_DWORD *)(a2 + 224) = v47 | v46;
  *(_WORD *)(a2 + 192) = v46 + 1;
  uint64_t v48 = *(void *)(a2 + 10352);
  BOOL v205 = v48 != 0xFFFFFFFFLL;
  uint64_t v204 = v48;
  int v216 = a3;
  if (v48 == 0xFFFFFFFFLL)
  {
    __int16 v49 = *(double **)(a2 + 80);
    if (v49)
    {
      unint64_t v52 = *(int *)(a2 + 72);
      int v50 = (double *)((char *)v49 + v52);
    }
    else
    {
      unint64_t v52 = 1500;
      __int16 v49 = (double *)malloc_type_calloc(0x5DCuLL, 1uLL, 0x100004077774924uLL);
      if (!v49)
      {
        uint64_t v55 = a20;
        unint64_t v44 = 2147549187;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SendRTP_cold_18();
          }
        }
        goto LABEL_334;
      }
      int v50 = (double *)((char *)v49 + 1500);
      *(void *)(a2 + 80) = v49;
      *(_DWORD *)(a2 + 72) = 1500;
    }
    int v51 = 12;
  }
  else
  {
    MediaQueue_Malloc(v33, v48, 12, &v225);
    if (!v225)
    {
      unint64_t v44 = 2147549187;
      goto LABEL_298;
    }
    __int16 v49 = (double *)((char *)v225 + 4);
    int v50 = v225 + 188;
    int v51 = *(_DWORD *)dataLength;
    unint64_t v52 = 1500;
  }
  uint64_t v213 = a21;
  int v215 = v51 + 4 * (*(_WORD *)(a2 + 16) & 0xF);
  *(_DWORD *)dataCFIndex Length = v215;
  sourceBytes = v49;
  if (*(_DWORD *)(a2 + 28))
  {
    uint64_t v53 = 0x7FF8000000000000;
  }
  else
  {
    uint64_t v54 = *(void *)(a2 + 10424);
    if (v54)
    {
      *(void *)&long long v237 = 0;
      long long v236 = 0u;
      memset(v235, 0, sizeof(v235));
      long long v234 = 0u;
      memset(buf, 0, sizeof(buf));
      VCRateControlGetStatistics(v54, 2, (uint64_t)buf);
      uint64_t v224 = *(void *)&buf[8];
      uint64_t v34 = (uint64_t)src;
      uint64_t v53 = *(void *)&buf[80];
    }
    else
    {
      AFRCGetPeerArrivalTime(*(void *)(a2 + 10360), 0, &v224);
      uint64_t v53 = 0x7FF8000000000000;
    }
    __int16 v49 = sourceBytes;
  }
  uint64_t v55 = a20;
  if (*(void *)(a2 + 10360) == 0xFFFFFFFFLL && !*(void *)(a2 + 10424))
  {
LABEL_44:
    if (a20)
    {
      *v42 |= 0x10u;
      *(void *)CMTime buf = 0xAAAAAAAAAAAAAAAALL;
      int v56 = (char *)v49 + *(int *)dataLength;
      if (v56 && (v56 >= (char *)v50 || v56 < (char *)sourceBytes)) {
        goto LABEL_359;
      }
      uint64_t v34 = VCMediaControlInfoSerialize(a20);
      VCMediaControlInfoDispose(a20);
      if ((v34 & 0x80000000) == 0) {
        *(_DWORD *)dataLength += *(_DWORD *)buf;
      }
    }
    goto LABEL_56;
  }
  if (a21)
  {
    if (!a20 || *(unsigned char *)(a21 + 24)) {
      goto LABEL_44;
    }
  }
  else if (!a20)
  {
LABEL_56:
    LOBYTE(v210) = 0;
    uint64_t v214 = 0;
    goto LABEL_62;
  }
  uint64_t Size = VCMediaControlInfoGetSize(a20);
  uint64_t v34 = Size;
  if ((Size & 3) != 0)
  {
    unint64_t v44 = 2147549227;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v190 = VRTraceErrorLogLevelToCSTR();
      int v191 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v190;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "SendRTP";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = 1659;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 1659;
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = v34;
        _os_log_error_impl(&dword_1E1EA4000, v191, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Bad RTP extension length (%ld)", buf, 0x2Cu);
        unint64_t v44 = 2147549227;
        if (v204 == 0xFFFFFFFFLL) {
          goto LABEL_334;
        }
        goto LABEL_296;
      }
    }
    BOOL v96 = 0;
    BOOL v133 = 0;
    goto LABEL_343;
  }
  int v58 = *(_DWORD *)(a2 + 28);
  if (v58 == 1)
  {
    if (!a13 && !Size)
    {
      unsigned int v210 = a15 & ((char)a15 >> 7) & 0xB | (16 * a14);
      goto LABEL_62;
    }
  }
  else if (!Size || v58)
  {
    LOBYTE(v210) = 0;
    goto LABEL_62;
  }
  *v42 |= 0x10u;
  if (Size + *(int *)dataLength > v52)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3
      || (uint64_t v195 = VRTraceErrorLogLevelToCSTR(),
          uint64_t v196 = *MEMORY[0x1E4F47A50],
          !os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
    {
LABEL_323:
      BOOL v96 = 0;
      BOOL v133 = 0;
      goto LABEL_342;
    }
    char v187 = SendRTP_cold_17(v195, v196, v204 != 0xFFFFFFFFLL);
LABEL_365:
    uint64_t v55 = (uint64_t)v214;
    if ((v187 & 1) == 0)
    {
LABEL_333:
      VCTerminateProcess(@"Failed to add data into RTP packet", @"SendRTP", 0);
      goto LABEL_334;
    }
    goto LABEL_296;
  }
  LOBYTE(v210) = 0;
  *(_DWORD *)dataLength += Size;
LABEL_62:
  unint64_t v44 = *(int *)dataLength;
  *(_WORD *)(a2 + 16) = *(_WORD *)(a2 + 16) & 0x80FF | ((RTPMapGetExternalPayload(*(unsigned __int16 ***)(a2 + 64), *(unsigned char *)(a2 + 17) & 0x7F) & 0x7F) << 8);
  if (sourceBytes > v50) {
    goto LABEL_359;
  }
  unint64_t v218 = (char *)v50 - (char *)sourceBytes;
  if ((unint64_t)((char *)v50 - (char *)sourceBytes) < 0xC) {
    goto LABEL_359;
  }
  uint64_t v59 = *(void *)v42;
  unsigned int v60 = sourceBytes;
  *((_DWORD *)sourceBytes + 2) = *(_DWORD *)(a2 + 24);
  *(void *)sourceBytes = v59;
  unsigned int v61 = *(_DWORD *)dataLength;
  if (a6)
  {
    if (v52 < (int)(*(_DWORD *)dataLength + a6))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v188 = VRTraceErrorLogLevelToCSTR();
        uint64_t v189 = *MEMORY[0x1E4F47A50];
        unint64_t v44 = 2147549198;
        BOOL v94 = v205;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          char v187 = SendRTP_cold_16(v188, v189, v204 != 0xFFFFFFFFLL);
          goto LABEL_365;
        }
        goto LABEL_279;
      }
LABEL_280:
      BOOL v96 = 0;
      BOOL v133 = 0;
      uint64_t v55 = (uint64_t)v214;
      unint64_t v44 = 2147549198;
LABEL_343:
      BOOL v94 = v205;
      goto LABEL_185;
    }
    uint64_t v62 = (double *)((char *)sourceBytes + *(int *)dataLength);
    if (v50 < v62 || sourceBytes > v62 || (char *)v50 - (char *)v62 < (unint64_t)a6) {
      goto LABEL_359;
    }
    memcpy(v62, __src, a6);
    unsigned int v61 = *(_DWORD *)dataLength + a6;
    *(_DWORD *)dataLength += a6;
    unsigned int v60 = sourceBytes;
  }
  if (v52 < (int)(v61 + a8))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v185 = VRTraceErrorLogLevelToCSTR();
      uint64_t v186 = *MEMORY[0x1E4F47A50];
      unint64_t v44 = 2147549198;
      BOOL v94 = v205;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        char v187 = SendRTP_cold_4(v185, v186, v204 != 0xFFFFFFFFLL);
        goto LABEL_365;
      }
      goto LABEL_279;
    }
    goto LABEL_280;
  }
  double v63 = (double *)((char *)v60 + (int)v61);
  if (v50 < v63 || sourceBytes > v63 || (char *)v50 - (char *)v63 < (unint64_t)a8) {
    goto LABEL_359;
  }
  memcpy(v63, v217, a8);
  uint64_t v64 = *(int *)dataLength + (uint64_t)(int)a8;
  *(_DWORD *)dataLength += a8;
  if (!v36) {
    goto LABEL_83;
  }
  if (v52 < (int)v36 + (int)v64 + 1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v34 = VRTraceErrorLogLevelToCSTR();
      unint64_t v36 = *MEMORY[0x1E4F47A50];
      unint64_t v44 = 2147549198;
      BOOL v94 = v205;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
LABEL_360:
        char v187 = SendRTP_cold_15(v34, v36, v204 != 0xFFFFFFFFLL);
        goto LABEL_365;
      }
LABEL_279:
      BOOL v96 = 0;
      BOOL v133 = 0;
LABEL_184:
      uint64_t v55 = (uint64_t)v214;
      goto LABEL_185;
    }
    goto LABEL_280;
  }
  int v65 = (double *)((char *)sourceBytes + v64);
  BOOL v66 = v50 >= (double *)((char *)sourceBytes + v64);
  unint64_t v67 = (char *)v50 - ((char *)sourceBytes + v64);
  if (!v66) {
    goto LABEL_359;
  }
  if (sourceBytes > v65) {
    goto LABEL_359;
  }
  if (v67 < v36) {
    goto LABEL_359;
  }
  memcpy(v65, a11, v36);
  unint64_t v68 = *(int *)dataLength + (unint64_t)v36;
  *(_DWORD *)dataCFIndex Length = v68 + 1;
  unsigned int v69 = (double *)((char *)sourceBytes + v68);
  if (v69 >= v50 || v69 < sourceBytes) {
    goto LABEL_359;
  }
  *(unsigned char *)unsigned int v69 = v36 + 1;
LABEL_83:
  if (*(_DWORD *)(a2 + 28) == 1 && !*(_DWORD *)(a2 + 7084) && *(_DWORD *)(a2 + 7080) == 1)
  {
    BOOL v96 = 0;
    BOOL v133 = 0;
    unint64_t v44 = 2147549204;
    goto LABEL_342;
  }
  unsigned int v70 = *(_DWORD *)(a2 + 7488) - 3;
  uint64_t v71 = SRTPCalculateTotalSuffixBytes(a2 + 7080, *(void *)(a2 + 10448), bswap32(*(unsigned __int16 *)(a2 + 18)) >> 16);
  if (v71 == -1)
  {
    BOOL v96 = 0;
    BOOL v133 = 0;
    unint64_t v44 = 2149711873;
LABEL_342:
    uint64_t v55 = (uint64_t)v214;
    goto LABEL_343;
  }
  uint64_t v34 = v71;
  if (v70 <= 1)
  {
    *(_DWORD *)dataLength += v71;
    goto LABEL_99;
  }
  unint64_t v72 = (unint64_t)sourceBytes + v44;
  if ((double *)((char *)sourceBytes + v44) > v50) {
    goto LABEL_359;
  }
  if ((unint64_t)sourceBytes > v72) {
    goto LABEL_359;
  }
  int64_t v73 = *(int *)dataLength - v44;
  if ((v73 & 0x80000000) != 0 || (uint64_t)((uint64_t)v50 - v72) < v73) {
    goto LABEL_359;
  }
  SRTPEncrypt(a2 + 7080, bswap32(*(unsigned __int16 *)(a2 + 18)) >> 16, v72, v73);
  if ((v74 & 0x80000000) != 0)
  {
    unint64_t v36 = v74;
    if (v74 != -2145255368)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t v55 = (uint64_t)v214;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SendRTP_cold_13();
        }
LABEL_288:
        unint64_t v44 = v36;
        if (v204 == 0xFFFFFFFFLL) {
          goto LABEL_331;
        }
        goto LABEL_296;
      }
LABEL_287:
      uint64_t v55 = (uint64_t)v214;
      goto LABEL_288;
    }
  }
  if ((v52 & 0x80000000) != 0 || (uint64_t)v52 > (uint64_t)v218)
  {
LABEL_359:
    __break(0x5519u);
    goto LABEL_360;
  }
  uint64_t v75 = SRTPAddAuthenticationTag(a2 + 7080, *(void *)(a2 + 10448), bswap32(*(unsigned __int16 *)(a2 + 18)) >> 16, v52, (char *)sourceBytes, *(signed int *)dataLength, (signed int *)dataLength);
  if ((v75 & 0x80000000) != 0)
  {
    unint64_t v36 = v75;
    if (v75 != -2145255368)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t v55 = (uint64_t)v214;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SendRTP_cold_14();
        }
        goto LABEL_288;
      }
      goto LABEL_287;
    }
  }
LABEL_99:
  int v221 = -1;
  uint64_t v76 = _RTPGetRTPSocketForMediaQueue(a2, &v221);
  unsigned int v77 = v76;
  if ((v76 & 0x80000000) != 0)
  {
    BOOL v96 = 0;
    BOOL v133 = 0;
    unint64_t v44 = v76;
    goto LABEL_342;
  }
  long long v78 = v225;
  if (v225 && *(void *)(a2 + 10352) != 0xFFFFFFFFLL)
  {
    uint64_t v79 = a21;
    if (!a21)
    {
      char v83 = 0;
      int v80 = v214;
      int v81 = a10;
      unsigned int v82 = a16;
LABEL_115:
      *((unsigned char *)v78 + 1621) = v83;
      *((_DWORD *)v78 + 39_Block_object_dispose(&STACK[0x250], 8) = v215;
      *(_DWORD *)long long v78 = *(_DWORD *)dataLength;
      uint64_t v91 = *(void *)v42;
      *((_DWORD *)v78 + 37_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a2 + 24);
      *((void *)v78 + 18_Block_object_dispose(&STACK[0x250], 8) = v91;
      *((_DWORD *)v78 + 379) = *(_DWORD *)(a2 + 28);
      *((_DWORD *)v78 + 380) = *(_DWORD *)(a2 + 10400);
      *((_DWORD *)v78 + 381) = v221;
      *((unsigned char *)v78 + 152_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a2 + 12) != 0;
      v78[192] = v33;
      *((_DWORD *)v78 + 386) = 0;
      *((void *)v78 + 194) = v224;
      *((_DWORD *)v78 + 390) = a17;
      *((_DWORD *)v78 + 391) = a19;
      if (!v82 || (int v92 = v82[12], v92 <= 1)) {
        int v92 = 1;
      }
      *((_DWORD *)v78 + 387) = v92;
      *((void *)v78 + 19_Block_object_dispose(&STACK[0x250], 8) = v80;
      v78[196] = 0.0;
      *((unsigned char *)v78 + 157_Block_object_dispose(&STACK[0x250], 8) = a13 != 0;
      *((unsigned char *)v78 + 1579) = v216 != 0;
      Throttling_RTP_SendRTP_SetThrottlingParams((uint64_t)v78, a18);
      uint64_t v93 = v225;
      *((unsigned char *)v225 + 1620) = v210;
      unsigned int v209 = MediaQueue_AddPacket(*(void *)(a2 + 10352), (uint64_t)v93);
      if ((v209 & 0x80000000) == 0)
      {
        uint64_t v214 = 0;
        if (v81)
        {
          BOOL v94 = 0;
          int v95 = 0;
          BOOL v96 = 0;
          int v97 = *((_DWORD *)v225 + 387);
          LODWORD(v9_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)dataLength;
LABEL_160:
          if (v98 == -1)
          {
            uint64_t v129 = *__error() | 0xC0010000;
            BOOL v96 = v96;
            BOOL v133 = v95 != 0;
            goto LABEL_181;
          }
          kdebug_trace();
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v121 = VRTraceErrorLogLevelToCSTR();
            int v122 = *MEMORY[0x1E4F47A50];
            __int16 v123 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v124 = *(unsigned __int16 *)(a2 + 16);
                unsigned int v125 = bswap32(*(unsigned __int16 *)(a2 + 18));
                int v126 = *(_DWORD *)(a2 + 200);
                *(_DWORD *)CMTime buf = 136316930;
                *(void *)&uint8_t buf[4] = v121;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SendRTP";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&uint8_t buf[24] = 1896;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v124 >> 15;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = (v124 >> 8) & 0x7F;
                *(_WORD *)&buf[40] = 1024;
                *(_DWORD *)&buf[42] = HIWORD(v125);
                *(_WORD *)&buf[46] = 1024;
                *(_DWORD *)&unsigned char buf[48] = v219;
                *(_WORD *)&_OWORD buf[52] = 1024;
                *(_DWORD *)&buf[54] = v126;
                _os_log_impl(&dword_1E1EA4000, v122, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Sent RTP packet with marker: %u, payload type: %u, sequence number: %u, timestamp: %u, ssrc: %u", buf, 0x3Au);
              }
            }
            else if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v168 = *(unsigned __int16 *)(a2 + 16);
              unsigned int v169 = bswap32(*(unsigned __int16 *)(a2 + 18));
              int v170 = *(_DWORD *)(a2 + 200);
              *(_DWORD *)CMTime buf = 136316930;
              *(void *)&uint8_t buf[4] = v121;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "SendRTP";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = 1896;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v168 >> 15;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = (v168 >> 8) & 0x7F;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = HIWORD(v169);
              *(_WORD *)&buf[46] = 1024;
              *(_DWORD *)&unsigned char buf[48] = v219;
              *(_WORD *)&_OWORD buf[52] = 1024;
              *(_DWORD *)&buf[54] = v170;
              _os_log_debug_impl(&dword_1E1EA4000, v122, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Sent RTP packet with marker: %u, payload type: %u, sequence number: %u, timestamp: %u, ssrc: %u", buf, 0x3Au);
            }
          }
          int v127 = *(_DWORD *)(a2 + 208) + *(_DWORD *)dataLength;
          ++*(_DWORD *)(a2 + 204);
          *(_DWORD *)(a2 + 20_Block_object_dispose(&STACK[0x250], 8) = v127;
          if (v79) {
            int IDSAttributeSizeWithChannelDataFormat = VCIDSChannelData_GetIDSAttributeSizeWithChannelDataFormat(v79);
          }
          else {
            int IDSAttributeSizeWithChannelDataFormat = 0;
          }
          uint64_t v129 = v209;
          int v130 = *(_DWORD *)(a2 + 27600);
          if (!v130)
          {
            if (*(_DWORD *)(a2 + 12)) {
              int v130 = 48;
            }
            else {
              int v130 = 28;
            }
          }
          int v131 = IDSAttributeSizeWithChannelDataFormat + v98 + v130;
          *int v81 = v131;
          uint64_t v132 = *(void *)(a2 + 27592);
          if (v132)
          {
            *(void *)CMTime buf = 0xAAAAAAAAAAAAAAAALL;
            *(_DWORD *)CMTime buf = *(_DWORD *)(a2 + 200);
            *(_WORD *)&uint8_t buf[4] = bswap32(*(unsigned __int16 *)(a2 + 18)) >> 16;
            *(double *)&uint8_t buf[8] = v33;
            *(void *)&buf[16] = v131;
            VCNACKConsumer_UpdateTransmissionStatus(v132, (int *)buf);
          }
          BOOL v96 = v96;
          BOOL v133 = v95 != 0;
          if (*(_DWORD *)(a2 + 28) == 1)
          {
            if (*(void *)(a2 + 10352) == 0xFFFFFFFFLL) {
              int v134 = 1;
            }
            else {
              int v134 = v97;
            }
            _RTPUpdateAFRCVideoSendingBitrate(a2, v134 * *v81, a13 != 0, v33);
LABEL_181:
            uint64_t v55 = (uint64_t)v214;
            if (!v94) {
              goto LABEL_325;
            }
LABEL_186:
            MediaQueue_FreePacket(*(void *)(a2 + 10352), (uint64_t)v225);
            unint64_t v44 = v129;
            if (!v133) {
              goto LABEL_329;
            }
            goto LABEL_326;
          }
          unint64_t v44 = v209;
          goto LABEL_184;
        }
        unint64_t v44 = 2147549185;
LABEL_298:
        uint64_t v55 = (uint64_t)v214;
        goto LABEL_334;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3
        && (VRTraceErrorLogLevelToCSTR(), os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
      {
        unint64_t v44 = v209;
        SendRTP_cold_11();
        uint64_t v55 = 0;
      }
      else
      {
        uint64_t v55 = 0;
        unint64_t v44 = v209;
      }
LABEL_296:
      MediaQueue_FreePacket(*(void *)(a2 + 10352), (uint64_t)v225);
      goto LABEL_331;
    }
    int v80 = v214;
    int v81 = a10;
    unsigned int v82 = a16;
    if (!*(unsigned char *)(a21 + 24))
    {
      char v83 = *(unsigned char *)(a21 + 30);
      if (v83)
      {
        *(_OWORD *)(v225 + 203) = *(_OWORD *)a21;
        long long v84 = *(_OWORD *)(a21 + 16);
        long long v85 = *(_OWORD *)(a21 + 32);
        long long v86 = *(_OWORD *)(a21 + 64);
        *(_OWORD *)(v78 + 209) = *(_OWORD *)(a21 + 48);
        *(_OWORD *)(v78 + 211) = v86;
        *(_OWORD *)(v78 + 205) = v84;
        *(_OWORD *)(v78 + 207) = v85;
        char v83 = 1;
      }
      goto LABEL_115;
    }
    unint64_t v44 = 2147549194;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    {
      BOOL v96 = 0;
      BOOL v133 = 0;
      BOOL v94 = v205;
      uint64_t v55 = (uint64_t)v214;
LABEL_185:
      uint64_t v129 = v44;
      if (!v94) {
        goto LABEL_325;
      }
      goto LABEL_186;
    }
    uint64_t v193 = VRTraceErrorLogLevelToCSTR();
    uint64_t v194 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      uint64_t v55 = (uint64_t)v214;
      if ((SendRTP_cold_12(v193, v194, v204 != 0xFFFFFFFFLL) & 1) == 0) {
        goto LABEL_334;
      }
      goto LABEL_296;
    }
    goto LABEL_323;
  }
  uint64_t v87 = *(void *)(a2 + 10440);
  BOOL v88 = (unsigned char *)a21;
  BOOL v203 = v87 != 0;
  if (!v87)
  {
    unsigned int v209 = v77;
    if (a16)
    {
      int v90 = a16[12];
      if (v90 <= 1) {
        unint64_t v36 = 1;
      }
      else {
        unint64_t v36 = v90;
      }
    }
    else
    {
      unint64_t v36 = 1;
    }
    unint64_t v44 = a21 + 80;
    CFAllocatorRef blockAllocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    int v211 = (pthread_mutex_t *)(a2 + 7016);
    unint64_t v143 = a21;
    long long v144 = (long long *)a21;
    while (1)
    {
      size_t v98 = *(int *)dataLength;
      if (v218 < *(int *)dataLength || v144 && ((unint64_t)v144 >= v44 || (unint64_t)v144 < v143)) {
        goto LABEL_359;
      }
      uint64_t v34 = bswap32(*(unsigned __int16 *)(a2 + 18)) >> 16;
      if (!*(void *)(a2 + 11104))
      {
        if (!*(_DWORD *)dataLength) {
          goto LABEL_359;
        }
        int v152 = *(_DWORD *)(a2 + 4);
        uint64_t v244 = 0;
        memset(v243, 0, sizeof(v243));
        long long v241 = 0u;
        long long v242 = 0u;
        long long v239 = 0u;
        long long v240 = 0u;
        long long v237 = 0u;
        long long v238 = 0u;
        long long v236 = 0u;
        memset(v235, 0, sizeof(v235));
        long long v234 = 0u;
        memset(buf, 0, sizeof(buf));
        *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(a2 + 10400);
        if (v144)
        {
          long long v153 = v144[3];
          long long v238 = v144[2];
          long long v239 = v153;
          long long v240 = v144[4];
          long long v154 = v144[1];
          long long v236 = *v144;
          long long v237 = v154;
          BYTE13(v237) = 1;
        }
        v243[0] = a24;
        int v155 = *(_DWORD *)(a2 + 200);
        char v156 = *(unsigned char *)(a2 + 17) & 0x7F;
        *(_DWORD *)&src[12] = 0;
        src[0] = 1;
        src[1] = v156;
        *(_WORD *)&src[2] = v34;
        *(_DWORD *)&src[4] = v219;
        *(_DWORD *)&src[8] = v155;
        uuid_copy((unsigned __int8 *)&v243[1], src);
        pthread_mutex_lock(v211);
        VTP_SetPktTag((uint64_t)buf, 0, v34);
        VTP_SetPktTag((uint64_t)buf, 1u, *(unsigned int *)(a2 + 200));
        VTP_SetPktTag((uint64_t)buf, 2u, v219);
        uint64_t v34 = VTP_Send(v152, sourceBytes, v98, 0x320u, (uint64_t)buf);
        pthread_mutex_unlock(v211);
        LODWORD(v9_Block_object_dispose(&STACK[0x250], 8) = v34;
        goto LABEL_242;
      }
      long long v234 = unk_1E259E1C0;
      v235[0] = xmmword_1E259E1D0;
      memset(&v235[1], 170, 24);
      memset(buf, 170, sizeof(buf));
      VCPacketInitialize((uint64_t)buf);
      if (!*(void *)(a2 + 11104))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          goto LABEL_241;
        }
        uint64_t v162 = VRTraceErrorLogLevelToCSTR();
        uint64_t v34 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_241;
        }
        *(_DWORD *)src = 136315650;
        *(void *)&src[4] = v162;
        *(_WORD *)&src[12] = 2080;
        *(void *)&src[14] = "_RTPSendWithTransportStream";
        __int16 v229 = 1024;
        int v230 = 5638;
        int v150 = v34;
        uint64_t v151 = " [%s] %s:%d NULL transportStream";
        goto LABEL_239;
      }
      if (!v98)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          goto LABEL_241;
        }
        uint64_t v163 = VRTraceErrorLogLevelToCSTR();
        uint64_t v34 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_241;
        }
        *(_DWORD *)src = 136315650;
        *(void *)&src[4] = v163;
        *(_WORD *)&src[12] = 2080;
        *(void *)&src[14] = "_RTPSendWithTransportStream";
        __int16 v229 = 1024;
        int v230 = 5640;
        int v150 = v34;
        uint64_t v151 = " [%s] %s:%d data length <= 0";
        goto LABEL_239;
      }
      CFAllocatorRef v145 = *(const __CFAllocator **)(a2 + 10480);
      if (*(void *)(a2 + 27592))
      {
        OSStatus v146 = CMBlockBufferCreateWithMemoryBlock(v145, 0, v98, 0, 0, 0, v98, 1u, (CMBlockBufferRef *)buf);
        if (v146)
        {
          OSStatus v164 = v146;
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            goto LABEL_241;
          }
          uint64_t v165 = VRTraceErrorLogLevelToCSTR();
          uint64_t v34 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_241;
          }
          *(_DWORD *)src = 136315906;
          *(void *)&src[4] = v165;
          *(_WORD *)&src[12] = 2080;
          *(void *)&src[14] = "_RTPSendWithTransportStream";
          __int16 v229 = 1024;
          int v230 = 5645;
          __int16 v231 = 1024;
          OSStatus v232 = v164;
          int v150 = v34;
          uint64_t v151 = " [%s] %s:%d Failed to create a CMBlockBuffer. Error=%d!";
LABEL_235:
          uint32_t v166 = 34;
          goto LABEL_240;
        }
        OSStatus v147 = CMBlockBufferReplaceDataBytes(sourceBytes, *(CMBlockBufferRef *)buf, 0, v98);
        if (v147)
        {
          OSStatus v148 = v147;
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            goto LABEL_241;
          }
          uint64_t v149 = VRTraceErrorLogLevelToCSTR();
          uint64_t v34 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_241;
          }
          *(_DWORD *)src = 136315906;
          *(void *)&src[4] = v149;
          *(_WORD *)&src[12] = 2080;
          *(void *)&src[14] = "_RTPSendWithTransportStream";
          __int16 v229 = 1024;
          int v230 = 5648;
          __int16 v231 = 1024;
          OSStatus v232 = v148;
          int v150 = v34;
          uint64_t v151 = " [%s] %s:%d Failed to copy data bytes. Error=%d!";
          goto LABEL_235;
        }
      }
      else if (CMBlockBufferCreateWithMemoryBlock(v145, sourceBytes, v98, blockAllocatora, 0, 0, v98, 0, (CMBlockBufferRef *)buf))
      {
        goto LABEL_241;
      }
      *(_WORD *)&uint8_t buf[8] = 257;
      *((double *)&v234 + 1) = v33;
      uint64_t v157 = *(unsigned int *)(a2 + 200);
      *(void *)&buf[56] = v34;
      *(void *)&buf[64] = v157;
      *(void *)&buf[72] = v219;
      DWORD1(v235[0]) = a24;
      char v158 = *(unsigned char *)(a2 + 17) & 0x7F;
      *(_DWORD *)&src[12] = 0;
      src[0] = 1;
      src[1] = v158;
      *(_WORD *)&src[2] = v34;
      *(_DWORD *)&src[4] = v219;
      *(_DWORD *)&src[8] = v157;
      uuid_copy((unsigned __int8 *)v235 + 8, src);
      if ((_RTPEnsureTransportStreamsActivated(a2) & 0x80000000) == 0)
      {
        if (*(void *)(a2 + 27592))
        {
          LOWORD(v234) = v98;
          int v159 = VCBoundsSafety_AllocatorAllocate(*(const __CFAllocator **)(a2 + 10808), 80, 0);
          if (!v159)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
              goto LABEL_241;
            }
            uint64_t v167 = VRTraceErrorLogLevelToCSTR();
            uint64_t v34 = *MEMORY[0x1E4F47A50];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              goto LABEL_241;
            }
            *(_DWORD *)src = 136315650;
            *(void *)&src[4] = v167;
            *(_WORD *)&src[12] = 2080;
            *(void *)&src[14] = "_RTPSendWithTransportStream";
            __int16 v229 = 1024;
            int v230 = 5669;
            int v150 = v34;
            uint64_t v151 = " [%s] %s:%d Could not update media packet history";
LABEL_239:
            uint32_t v166 = 28;
LABEL_240:
            _os_log_error_impl(&dword_1E1EA4000, v150, OS_LOG_TYPE_ERROR, v151, src, v166);
            goto LABEL_241;
          }
          if ((unint64_t)v159 >= v160) {
            goto LABEL_359;
          }
          *(_WORD *)int v159 = *(_WORD *)&buf[56];
          v159[1] = *(_DWORD *)&buf[64];
          v159[4] = *(_DWORD *)&buf[72];
          v159[13] = DWORD1(v235[0]);
          v159[2] = (unsigned __int16)v234;
          *((unsigned char *)v159 + 56) = 0;
          *((void *)v159 + _Block_object_dispose(&STACK[0x250], 8) = *((void *)&v234 + 1);
          *((_WORD *)v159 + 36) = 0;
          *(void *)src = v159;
          *(void *)&src[8] = *(void *)buf;
          _RTPTransportAddMediaPacketHistory(a2, (_WORD **)src);
        }
        uint64_t v34 = *(void *)(a2 + 11104);
        __int16 v161 = *(uint64_t (**)(uint64_t, uint8_t *))(*(void *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v161)
        {
          uint64_t v34 = v161(v34, buf);
          VCPacketInvalidate((uint64_t *)buf);
          if ((int)v34 < 0) {
            LODWORD(v9_Block_object_dispose(&STACK[0x250], 8) = -1;
          }
          goto LABEL_242;
        }
      }
LABEL_241:
      VCPacketInvalidate((uint64_t *)buf);
      LODWORD(v9_Block_object_dispose(&STACK[0x250], 8) = -1;
LABEL_242:
      if (a22)
      {
        unint64_t v143 = (unint64_t)a22;
        unint64_t v44 = (unint64_t)(a22 + 5);
        long long v144 = a22;
      }
      unint64_t v36 = (v36 - 1);
      if (!v36)
      {
        BOOL v96 = 0;
        int v95 = 0;
        BOOL v94 = v205;
        goto LABEL_246;
      }
    }
  }
  if (a21)
  {
    if (a18)
    {
LABEL_109:
      BOOL v89 = *(unsigned char *)(a18 + 1) != 0;
      goto LABEL_124;
    }
  }
  else
  {
    if (*(_DWORD *)(a2 + 28))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v198 = VRTraceErrorLogLevelToCSTR();
        uint64_t v199 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          uint64_t v55 = (uint64_t)v214;
          unint64_t v44 = 2147549194;
          if ((SendRTP_cold_10(v198, v199, v204 != 0xFFFFFFFFLL) & 1) == 0) {
            goto LABEL_334;
          }
          goto LABEL_296;
        }
      }
      BOOL v96 = 0;
      BOOL v133 = 0;
      uint64_t v55 = (uint64_t)v214;
      unint64_t v44 = 2147549194;
      goto LABEL_343;
    }
    HIBYTE(v227) = 1;
    BOOL v88 = &dataLength[4];
    if (a18) {
      goto LABEL_109;
    }
  }
  BOOL v89 = 0;
LABEL_124:
  uint64_t v213 = (uint64_t)v88;
  if (v88[42])
  {
    int v99 = 0;
  }
  else if (!v214 || *(_DWORD *)(a2 + 28) || (int v99 = 0, (VCMediaControlInfoHasInfo(v214, 0) & 1) == 0))
  {
    int v99 = 1;
  }
  if (*(unsigned char *)(v213 + 72)) {
    uint64_t v100 = (_WORD *)(v213 + 74);
  }
  else {
    uint64_t v100 = (_WORD *)v213;
  }
  int v101 = (unsigned __int16)*v100;
  if (!*(unsigned char *)(v213 + 24) && !*v100) {
    int v101 = *(_DWORD *)(a2 + 200);
  }
  uint64_t v102 = VCMediaQueue_AllocMediaPacket(*(void *)(a2 + 10440), v101, 0, (uint64_t)&v222);
  BOOL v96 = v102 == 0;
  if (v102)
  {
    uint64_t v129 = v102;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SendRTP_cold_9();
      }
    }
    BOOL v133 = 0;
  }
  else
  {
    OSStatus v103 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a2 + 10800), 0, 0x5DCuLL, 0, 0, 0, *(int *)dataLength, 1u, &blockBufferOut);
    if (v103)
    {
      BOOL v133 = 0;
      if (v103 >= 0) {
        int v192 = v103;
      }
      else {
        int v192 = -v103;
      }
      uint64_t v129 = v192 | 0xD0010000;
    }
    else
    {
      uint64_t v105 = v222;
      unsigned int v104 = blockBufferOut;
      *(void *)(v222 + _Block_object_dispose(&STACK[0x250], 8) = blockBufferOut;
      *(double *)(v105 + 272) = v33;
      unsigned int v106 = (_OWORD *)v213;
      *(_OWORD *)(v105 + 16) = *(_OWORD *)v213;
      long long v107 = *(_OWORD *)(v213 + 64);
      long long v109 = *(_OWORD *)(v213 + 16);
      long long v108 = *(_OWORD *)(v213 + 32);
      *(_OWORD *)(v105 + 64) = *(_OWORD *)(v213 + 48);
      *(_OWORD *)(v105 + 80) = v107;
      *(_OWORD *)(v105 + 32) = v109;
      *(_OWORD *)(v105 + 4_Block_object_dispose(&STACK[0x250], 8) = v108;
      if (a22) {
        unsigned int v106 = a22;
      }
      long long v111 = v106[3];
      long long v110 = v106[4];
      long long v112 = v106[2];
      *(_OWORD *)(v105 + 112) = v106[1];
      *(_OWORD *)(v105 + 12_Block_object_dispose(&STACK[0x250], 8) = v112;
      *(_OWORD *)(v105 + 144) = v111;
      *(_OWORD *)(v105 + 160) = v110;
      *(_OWORD *)(v105 + 96) = *v106;
      size_t v113 = *(int *)dataLength;
      *(_WORD *)(v105 + 4) = *(_WORD *)dataLength;
      *(void *)(v105 + 200) = 0xFFFFFFFFLL;
      *(unsigned char *)(v105 + 297) = v70 < 2;
      if (v70 <= 1)
      {
        *(void *)(v105 + 192) = RTPMediaQueueSecurityCallback;
        *(void *)(v105 + 200) = v208;
        *(_DWORD *)(v105 + 300) = (unsigned __int16)v113 - (v34 + v44);
      }
      int v81 = a10;
      if ((unsigned __int16)v113 >= 0x5DDu)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SendRTP_cold_5();
          }
        }
        BOOL v133 = 1;
        uint64_t v129 = 2147549198;
      }
      else
      {
        if (!CMBlockBufferReplaceDataBytes(sourceBytes, v104, 0, v113))
        {
          int IDSHeaderSizeWithChannelDataFormatArray = VCIDSChannelData_GetIDSHeaderSizeWithChannelDataFormatArray(v213, 1u);
          uint64_t v115 = v222;
          *(_DWORD *)unint64_t v222 = IDSHeaderSizeWithChannelDataFormatArray;
          *(_DWORD *)(v115 + 176) = v99;
          uint64_t v79 = v213;
          *(void *)(v115 + 184) = v214;
          *(_DWORD *)(v115 + 244) = v215;
          uint64_t v116 = v224;
          *(void *)(v115 + 20_Block_object_dispose(&STACK[0x250], 8) = v53;
          *(void *)(v115 + 216) = v116;
          *(unsigned char *)(v115 + 224) = 0;
          int v117 = *(unsigned __int8 *)(v213 + 77);
          *(unsigned char *)(v115 + 225) = v117 ^ 1;
          if (v117) {
            char v118 = 1;
          }
          else {
            char v118 = v89;
          }
          *(unsigned char *)(v115 + 28_Block_object_dispose(&STACK[0x250], 8) = v118;
          *(unsigned char *)(v115 + 226) = v117;
          *(unsigned char *)(v115 + 289) = a23;
          *(unsigned char *)(v115 + 293) = *(_DWORD *)(a2 + 12) != 0;
          unint64_t v44 = 2147549198;
          if (a16) {
            BOOL v119 = *a16 != 0;
          }
          else {
            BOOL v119 = 0;
          }
          *(unsigned char *)(v115 + 290) = v119;
          *(unsigned char *)(v115 + 291) = a13 != 0;
          *(unsigned char *)(v115 + 292) = v216 != 0;
          *(void *)(v115 + 304) = 0;
          *(_DWORD *)(v115 + 232) = *(_DWORD *)(a2 + 10400);
          *(_WORD *)(v115 + 24_Block_object_dispose(&STACK[0x250], 8) = bswap32(*(unsigned __int16 *)(a2 + 18)) >> 16;
          *(_DWORD *)(v115 + 264) = v221;
          *(_DWORD *)(v115 + 236) = v219;
          *(_DWORD *)(v115 + 240) = *(_DWORD *)(a2 + 316);
          *(_DWORD *)(v115 + 252) = *(_DWORD *)(a2 + 200);
          *(unsigned char *)(v115 + 227) = *(_DWORD *)(a2 + 28) == 0;
          *(_DWORD *)(v115 + 256) = a17;
          *(_DWORD *)(v115 + 260) = a19;
          *(_WORD *)(v115 + 294) = 1;
          if (a16 && (int v120 = a16[12], v120 >= 2))
          {
            *(_DWORD *)(v115 + 26_Block_object_dispose(&STACK[0x250], 8) = v120;
            *(unsigned char *)(v115 + 28_Block_object_dispose(&STACK[0x250], 8) = 1;
          }
          else
          {
            *(_DWORD *)(v115 + 26_Block_object_dispose(&STACK[0x250], 8) = 1;
          }
          BOOL v94 = v205;
          unsigned int v209 = VCMediaQueue_AddPacket(*(void *)(a2 + 10440), v115);
          if (v209)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                SendRTP_cold_7();
              }
            }
            LODWORD(v9_Block_object_dispose(&STACK[0x250], 8) = -1;
            BOOL v96 = 1;
            int v95 = 1;
            if (a10) {
              goto LABEL_159;
            }
LABEL_247:
            uint64_t v129 = 2147549185;
            if (v204 == 0xFFFFFFFFLL)
            {
              uint64_t v55 = (uint64_t)v214;
              BOOL v133 = v203;
              goto LABEL_325;
            }
            uint64_t v55 = (uint64_t)v214;
            LOBYTE(v133) = v203;
            goto LABEL_186;
          }
          uint64_t v214 = 0;
          BOOL v96 = 0;
          LODWORD(v9_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)dataLength;
          int v95 = 1;
          if (blockAllocator || !*(void *)(a2 + 27592))
          {
            unsigned int v209 = 0;
            if (!a10) {
              goto LABEL_247;
            }
            goto LABEL_159;
          }
          unint64_t v36 = v222;
          long long v135 = VCBoundsSafety_AllocatorAllocate(*(const __CFAllocator **)(a2 + 10808), 80, 0);
          if (!v135)
          {
LABEL_355:
            unsigned int v209 = -2147418109;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v200 = VRTraceErrorLogLevelToCSTR();
              uint64_t v201 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                uint64_t v202 = *(void *)(a2 + 27592);
                *(_DWORD *)CMTime buf = 136316162;
                *(void *)&uint8_t buf[4] = v200;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SendRTP";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&uint8_t buf[24] = 1868;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = v222;
                *(_WORD *)&buf[38] = 2048;
                *(void *)&buf[40] = v202;
                _os_log_error_impl(&dword_1E1EA4000, v201, OS_LOG_TYPE_ERROR, " [%s] %s:%d Could not update media packet history for packet=%pfor nackConsumer=%p", buf, 0x30u);
              }
            }
            BOOL v96 = 0;
            uint64_t v214 = 0;
            int v95 = 1;
LABEL_246:
            int v81 = a10;
            uint64_t v79 = v213;
            if (a10) {
              goto LABEL_159;
            }
            goto LABEL_247;
          }
          uint64_t v34 = (uint64_t)v135;
          if ((unint64_t)v135 < v136)
          {
            *(_WORD *)long long v135 = *(_WORD *)(v36 + 248);
            v135[1] = *(_DWORD *)(a2 + 200);
            *((_WORD *)v135 + 10) = *(_WORD *)(v36 + 291);
            v135[2] = *(unsigned __int16 *)(v36 + 4);
            v135[3] = *(_DWORD *)(v36 + 244);
            v135[4] = *(_DWORD *)(v36 + 236);
            *((unsigned char *)v135 + 22) = *(unsigned char *)(v36 + 290);
            v135[6] = *(_DWORD *)(v36 + 256);
            *((unsigned char *)v135 + 2_Block_object_dispose(&STACK[0x250], 8) = *(unsigned char *)(v36 + 288);
            v135[8] = *(_DWORD *)(v36 + 260);
            *((void *)v135 + 5) = 0;
            long long v137 = VCBoundsSafety_AllocatorAllocate(*(const __CFAllocator **)(a2 + 10816), 80, 0);
            if (!v137 || (unint64_t)v137 < v138)
            {
              *(void *)(v34 + 40) = v137;
              if (v137)
              {
                *long long v137 = *(_OWORD *)(v36 + 16);
                long long v139 = *(_OWORD *)(v36 + 32);
                long long v140 = *(_OWORD *)(v36 + 48);
                long long v141 = *(_OWORD *)(v36 + 80);
                v137[3] = *(_OWORD *)(v36 + 64);
                v137[4] = v141;
                v137[1] = v139;
                v137[2] = v140;
                *(unsigned char *)(v34 + 4_Block_object_dispose(&STACK[0x250], 8) = *(unsigned char *)(v36 + 289);
                *(unsigned char *)(v34 + 56) = 1;
                *(void *)(v34 + 64) = *(void *)(v36 + 272);
                *(_WORD *)(v34 + 72) = 0;
                uint64_t v142 = *(void *)(v36 + 8);
                *(void *)CMTime buf = v34;
                *(void *)&uint8_t buf[8] = v142;
                _RTPTransportAddMediaPacketHistory(a2, (_WORD **)buf);
                BOOL v96 = 0;
                unsigned int v209 = 0;
                uint64_t v214 = 0;
                if (!a10) {
                  goto LABEL_247;
                }
LABEL_159:
                int v97 = 0;
                goto LABEL_160;
              }
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  SendRTP_cold_6();
                }
              }
              CFAllocatorDeallocate(*(CFAllocatorRef *)(a2 + 10808), (void *)v34);
              goto LABEL_355;
            }
          }
          goto LABEL_359;
        }
        uint64_t v129 = 2147549188;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SendRTP_cold_8();
          }
        }
        BOOL v133 = 1;
      }
    }
  }
  uint64_t v55 = (uint64_t)v214;
  if (v204 != 0xFFFFFFFFLL) {
    goto LABEL_186;
  }
LABEL_325:
  unint64_t v44 = v129;
  if (!v133) {
    goto LABEL_329;
  }
LABEL_326:
  if (blockBufferOut)
  {
    CFRelease(blockBufferOut);
    CMBlockBufferRef blockBufferOut = 0;
    if (v96) {
      goto LABEL_330;
    }
    goto LABEL_331;
  }
LABEL_329:
  if (v96) {
LABEL_330:
  }
    VCMediaQueue_FreeMediaPacket(*(void *)(a2 + 10440), v222);
LABEL_331:
  if (v44 == -2145255410 || v44 == -2147418098) {
    goto LABEL_333;
  }
LABEL_334:
  VCMediaControlInfoDispose(v55);
  return v44;
}

uint64_t _RTPUpdateAFRCVideoSendingBitrate(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t result = *(void *)(a1 + 10360);
  if (result != 0xFFFFFFFFLL)
  {
    if (a3)
    {
      double v8 = *(double *)(a1 + 11088);
      if (v8 <= 0.0)
      {
LABEL_26:
        *(double *)(a1 + 1108_Block_object_dispose(&STACK[0x250], 8) = a4;
        *(_DWORD *)(a1 + 11096) = a2;
      }
      else
      {
        unint64_t v9 = a1 + 10824;
        int v10 = *(_DWORD *)(a1 + 11080);
        __int16 v11 = (double *)(a1 + 10824 + 16 * v10);
        if ((unint64_t)v11 < a1 + 11080 && (unint64_t)v11 >= v9)
        {
          *(_DWORD *)(v9 + 16 * v10 + _Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a1 + 11096);
          *__int16 v11 = a4 - v8;
          *(_DWORD *)(a1 + 11080) = ((_BYTE)v10 + 1) & 0xF;
          unsigned int v13 = *(_DWORD *)(a1 + 11084);
          if (v13 > 0xF)
          {
            int v14 = 16;
          }
          else
          {
            int v14 = v13 + 1;
            *(_DWORD *)(a1 + 11084) = v13 + 1;
          }
          int v15 = 0;
          int v16 = v14 - 1;
          double v17 = 0.0;
          while (1)
          {
            int v18 = (double *)(v9 + 16 * (v10 & 0xF));
            if ((unint64_t)v18 >= a1 + 11080 || (unint64_t)v18 < v9) {
              break;
            }
            v15 += *(_DWORD *)(v9 + 16 * (v10 & 0xF) + 8);
            double v17 = v17 + *v18;
            BOOL v20 = v17 > 0.5 || v16-- == 0;
            LOBYTE(v10) = v10 - 1;
            if (v20)
            {
              if (v17 > 0.0) {
                uint64_t result = AFRCUpdateVideoSendingBitrate(result, (int)((double)(8 * v15) / v17));
              }
              goto LABEL_26;
            }
          }
        }
        __break(0x5519u);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 11096) += a2;
    }
  }
  return result;
}

uint64_t RTPMediaQueueSecurityCallback(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a1 == 0xFFFFFFFFLL)
  {
    uint64_t v15 = 2149711873;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPMediaQueueSecurityCallback_cold_1();
      }
    }
  }
  else if (a2)
  {
    if (a3)
    {
      uint64_t v9 = CheckInHandleDebug();
      if (v9)
      {
        uint64_t v10 = v9;
        if ((*(_DWORD *)(v9 + 7488) - 5) <= 0xFFFFFFFD)
        {
          uint64_t v15 = 2149711876;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              RTPMediaQueueSecurityCallback_cold_5();
              uint64_t v15 = 2149711876;
            }
          }
          goto LABEL_16;
        }
        unint64_t v11 = a2 + a3;
        if (a2 + 12 <= a2 + a3)
        {
          unint64_t v12 = a2 + a4;
          if (a2 + a4 <= v11 && v12 >= a2 && (a5 & 0x80000000) == 0 && a5 <= (uint64_t)(v11 - v12))
          {
            unsigned int v13 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
            SRTPEncrypt(v9 + 7080, v13, v12, a5);
            if ((v14 & 0x80000000) != 0)
            {
              uint64_t v15 = v14;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  RTPMediaQueueSecurityCallback_cold_6();
                }
              }
              goto LABEL_16;
            }
            signed int v19 = 0;
            if ((a3 & 0x80000000) == 0 && (int)a3 <= a3)
            {
              uint64_t v15 = SRTPAddAuthenticationTag(v10 + 7080, *(void *)(v10 + 10448), v13, a3, (char *)a2, a5 + (int)a4, &v19);
              if ((v15 & 0x80000000) != 0)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    RTPMediaQueueSecurityCallback_cold_7();
                  }
                }
              }
              else if (v19 != a3 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v17 = VRTraceErrorLogLevelToCSTR();
                int v18 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CMTime buf = 136316162;
                  uint64_t v21 = v17;
                  __int16 v22 = 2080;
                  uint64_t v23 = "RTPMediaQueueSecurityCallback";
                  __int16 v24 = 1024;
                  int v25 = 1527;
                  __int16 v26 = 2048;
                  uint64_t v27 = a3;
                  __int16 v28 = 1024;
                  signed int v29 = v19;
                  _os_log_error_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_ERROR, " [%s] %s:%d SRTP authentication tag generation size mismatch: expected size=%zu, authenticated size=%d", buf, 0x2Cu);
                }
              }
LABEL_16:
              CheckOutHandleDebug();
              return v15;
            }
          }
        }
        __break(0x5519u);
      }
      uint64_t v15 = 2147549186;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPMediaQueueSecurityCallback_cold_4();
        }
      }
    }
    else
    {
      uint64_t v15 = 2149711873;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPMediaQueueSecurityCallback_cold_3();
        }
      }
    }
  }
  else
  {
    uint64_t v15 = 2149711873;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPMediaQueueSecurityCallback_cold_2();
      }
    }
  }
  return v15;
}

unint64_t _RTPSendTimestampWithMediaSampleTime(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 232);
  uint64_t v4 = *(void *)(a1 + 240);
  unint64_t v5 = v3 & 0xFFFFFFFF00000000;
  if (v3 - a2 >= 0x7FFFFFFF) {
    unint64_t v6 = v3 & 0xFFFFFFFF00000000;
  }
  else {
    unint64_t v6 = (v3 & 0xFFFFFFFF00000000) - 0x100000000;
  }
  if (v3 >= a2) {
    unint64_t v6 = v3 & 0xFFFFFFFF00000000;
  }
  if (a2 - v3 < 0x7FFFFFFF) {
    v5 += 0x100000000;
  }
  if (v3 > a2) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = v6;
  }
  unint64_t v8 = v7 + a2;
  *(void *)(a1 + 232) = v8;
  unint64_t v9 = v8 - v4;
  uint64_t v10 = (unsigned int *)(a1 + 296);
  unsigned int v11 = *(_DWORD *)(a1 + 296);
  if (v11 >= 7)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPSendTimestampWithMediaSampleTime_cold_2();
      }
    }
    unsigned int v11 = *v10;
  }
  switch(v11)
  {
    case 1u:
      v9 >>= 1;
      break;
    case 2u:
      v9 -= v9 >> 2;
      break;
    case 3u:
    case 5u:
    case 6u:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTPSendTimestampWithMediaSampleTime_cold_1();
        }
      }
      break;
    case 4u:
      v9 *= 2;
      break;
    default:
      break;
  }
  unint64_t result = *(void *)(a1 + 256) + v9;
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x250], 8) = result;
  return result;
}

uint64_t _RTPGetRTPSocketForMediaQueue(uint64_t a1, _DWORD *a2)
{
  number[1] = *(CFNumberRef *)MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = *(void *)(a1 + 11104);
      if (v3)
      {
        number[0] = 0;
        uint64_t CMBaseObject = VCPacketFilterGetCMBaseObject(v3, a2);
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v5) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = 0;
        }
        unint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFNumberRef *))(v6 + 48);
        if (v8)
        {
          uint64_t v7 = v8(CMBaseObject, @"UnderlyingVFD", *MEMORY[0x1E4F1CF80], number);
          if ((v7 & 0x80000000) == 0)
          {
            CFNumberGetValue(number[0], kCFNumberIntType, a2);
            CFRelease(number[0]);
          }
        }
        else
        {
          return 4294954514;
        }
      }
      else
      {
        uint64_t v7 = 0;
        *a2 = *(_DWORD *)(a1 + 4);
      }
    }
    else
    {
      uint64_t v7 = 2147549185;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTPGetRTPSocketForMediaQueue_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v7 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPGetRTPSocketForMediaQueue_cold_1();
      }
    }
  }
  return v7;
}

uint64_t RTPTransportResendRTP(double a1, uint64_t a2, int a3, int a4, int *a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 2147549188;
  uint64_t v68 = 0;
  unint64_t v10 = CheckInHandleDebug();
  if (!v10) {
    return 2147549186;
  }
  uint64_t v11 = v10;
  if (v10 != 0xFFFFFFFF)
  {
    unsigned int v61 = a5;
    if (v10 >= v10 + 27616) {
      goto LABEL_97;
    }
    ++*(void *)(v10 + 352);
    int v62 = a3;
    __int16 v63 = a4;
    __int16 v64 = 1;
    double v65 = a1;
    unint64_t v66 = 0xAAAAAAAAAAAA0000;
    uint64_t v67 = 0;
    uint64_t v12 = a4 & 0x3FF;
    unint64_t v13 = v10 + 11208;
    uint64_t v14 = (unsigned __int16 **)(v10 + 11208 + 16 * v12);
    if (!v14)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v54 = VRTraceErrorLogLevelToCSTR();
        uint64_t v55 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v54;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_RTPTransportRetrieveMediaPacketHistory";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&uint8_t buf[24] = 1358;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v11;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = a4 & 0x3FF;
          _os_log_error_impl(&dword_1E1EA4000, v55, OS_LOG_TYPE_ERROR, " [%s] %s:%d mediaPacketHistory retrieval failed for rtpInfo=%p with seqNumHash=%d", buf, 0x2Cu);
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v56 = VRTraceErrorLogLevelToCSTR();
        double v57 = *MEMORY[0x1E4F47A50];
        int v58 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            *(void *)&uint8_t buf[4] = v56;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "RTPTransportResendRTP";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = 1971;
            _os_log_impl(&dword_1E1EA4000, v57, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Couldn't retrieve media packet from cache for retransmission", buf, 0x1Cu);
          }
        }
        else if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
        {
          RTPTransportResendRTP_cold_1();
        }
      }
      LOBYTE(v64) = 0;
      goto LABEL_92;
    }
    if ((unint64_t)v14 >= v10 + 27592
      || v13 > (unint64_t)v14
      || (unint64_t)(v14 + 2) > v10 + 27592)
    {
      goto LABEL_97;
    }
    uint64_t v15 = *v14;
    if (!*v14)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPTransportResendRTP_cold_2();
        }
      }
      goto LABEL_92;
    }
    int v16 = v15 + 40;
    if (*v15 != a4)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPTransportResendRTP_cold_10();
        }
      }
      goto LABEL_92;
    }
    if (*((_DWORD *)v15 + 1) != a3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPTransportResendRTP_cold_9();
        }
      }
      goto LABEL_92;
    }
    int v60 = *((unsigned __int8 *)v15 + 56);
    if (*((unsigned char *)v15 + 56))
    {
      uint64_t v17 = *((void *)v15 + 5);
      if (v17)
      {
        *(unsigned char *)(v17 + 76) = 1;
        uint64_t v18 = 74;
        if (!*(unsigned char *)(v17 + 72)) {
          uint64_t v18 = 0;
        }
        int v19 = *(unsigned __int16 *)(v17 + v18);
        if (*(unsigned char *)(v17 + 24)) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v19 == 0;
        }
        if (v20) {
          int v19 = *(_DWORD *)(v10 + 200);
        }
        *(_DWORD *)CMTime buf = -1;
        uint64_t v21 = _RTPGetRTPSocketForMediaQueue(v10, buf);
        if ((v21 & 0x80000000) == 0)
        {
          __int16 v22 = (int *)(v15 + 4);
          if (*((int *)v15 + 2) >= 1501)
          {
            uint64_t v9 = 2147549198;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                RTPTransportResendRTP_cold_6();
                uint64_t v9 = 2147549198;
              }
            }
            goto LABEL_92;
          }
          uint64_t v23 = VCMediaQueue_AllocMediaPacket(*(void *)(v11 + 10440), v19, 2, (uint64_t)&v68);
          if ((v23 & 0x80000000) != 0)
          {
            uint64_t v9 = v23;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                RTPTransportResendRTP_cold_7();
              }
            }
            goto LABEL_92;
          }
          uint64_t v24 = *(void *)(v13 + 16 * v12 + 8);
          uint64_t v25 = v68;
          *(void *)(v68 + _Block_object_dispose(&STACK[0x250], 8) = v24;
          *(double *)(v25 + 272) = a1;
          long long v26 = *(_OWORD *)(v17 + 16);
          long long v27 = *(_OWORD *)(v17 + 32);
          long long v28 = *(_OWORD *)(v17 + 48);
          *(_OWORD *)(v25 + 80) = *(_OWORD *)(v17 + 64);
          long long v29 = *(_OWORD *)v17;
          *(_OWORD *)(v25 + 4_Block_object_dispose(&STACK[0x250], 8) = v27;
          *(_OWORD *)(v25 + 64) = v28;
          *(_OWORD *)(v25 + 16) = v29;
          *(_OWORD *)(v25 + 32) = v26;
          *(_DWORD *)(v25 + 176) = 3;
          *(unsigned char *)(v25 + 295) = 1;
          *(unsigned char *)(v25 + 94) = 0;
          *(_WORD *)(v25 + 24_Block_object_dispose(&STACK[0x250], 8) = a4;
          *(_WORD *)(v25 + 4) = *((_DWORD *)v15 + 2);
          *(_DWORD *)(v25 + 264) = *(_DWORD *)buf;
          if (v15 < v16)
          {
            *(_DWORD *)uint64_t v25 = VCIDSChannelData_GetIDSHeaderSizeWithChannelDataFormatArray(v25 + 16, 1u);
            *(_DWORD *)(v25 + 244) = *((_DWORD *)v15 + 3);
            *(_OWORD *)(v25 + 20_Block_object_dispose(&STACK[0x250], 8) = xmmword_1E259DF20;
            *(unsigned char *)(v25 + 224) = 0;
            char v30 = *(unsigned char *)(v25 + 93);
            *(unsigned char *)(v25 + 225) = v30 ^ 1;
            *(unsigned char *)(v25 + 28_Block_object_dispose(&STACK[0x250], 8) = *((unsigned char *)v15 + 28);
            *(unsigned char *)(v25 + 226) = v30;
            *(unsigned char *)(v25 + 289) = *((unsigned char *)v15 + 48);
            *(unsigned char *)(v25 + 293) = *(_DWORD *)(v11 + 12) != 0;
            *(unsigned char *)(v25 + 290) = *((unsigned char *)v15 + 22);
            *(unsigned char *)(v25 + 291) = *((unsigned char *)v15 + 20);
            float v32 = (int *)(v15 + 8);
            int v31 = *((_DWORD *)v15 + 4);
            *(unsigned char *)(v25 + 292) = *((unsigned char *)v15 + 21);
            *(void *)(v25 + 304) = 0;
            *(_DWORD *)(v25 + 232) = *(_DWORD *)(v11 + 10400);
            *(_DWORD *)(v25 + 236) = v31;
            *(_DWORD *)(v25 + 240) = *(_DWORD *)(v11 + 316);
            *(_DWORD *)(v25 + 252) = *(_DWORD *)(v11 + 200);
            *(unsigned char *)(v25 + 227) = *(_DWORD *)(v11 + 28) == 0;
            *(_DWORD *)(v25 + 256) = *((_DWORD *)v15 + 6);
            *(_DWORD *)(v25 + 260) = *((_DWORD *)v15 + 8);
            *(unsigned char *)(v25 + 294) = 1;
            uint64_t v9 = VCMediaQueue_AddPacket(*(void *)(v11 + 10440), v68);
            if ((v9 & 0x80000000) != 0)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  RTPTransportResendRTP_cold_8();
                }
              }
              goto LABEL_92;
            }
            int v33 = *(unsigned __int16 *)(v68 + 4);
            goto LABEL_37;
          }
LABEL_97:
          __break(0x5519u);
        }
        uint64_t v9 = v21;
      }
LABEL_92:
      VCNACKConsumer_UpdateRetransmissionStatus(*(void *)(v11 + 27592), &v62);
      CheckOutHandleDebug();
      return v9;
    }
    if (v15 >= v16) {
      goto LABEL_97;
    }
    uint64_t v34 = *(const void **)(v13 + 16 * v12 + 8);
    long long v75 = unk_1E259E1C0;
    v76[0] = xmmword_1E259E1D0;
    memset(&v76[1], 170, 24);
    memset(buf, 170, sizeof(buf));
    if ((VCPacketInitialize((uint64_t)buf) & 0x80000000) == 0)
    {
      if (*(void *)(v11 + 11104))
      {
        if (v34)
        {
          __int16 v22 = (int *)(v15 + 4);
          if (*((int *)v15 + 2) <= 0)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                RTPTransportResendRTP_cold_5();
              }
            }
          }
          else
          {
            *(void *)CMTime buf = v34;
            CFRetain(v34);
            *(_WORD *)&uint8_t buf[8] = 257;
            *(void *)&buf[56] = *v15;
            *(void *)&buf[64] = *((unsigned int *)v15 + 1);
            float v32 = (int *)(v15 + 8);
            *(void *)&buf[72] = *((unsigned int *)v15 + 4);
            DWORD1(v76[0]) = *((_DWORD *)v15 + 13);
            unsigned __int8 v35 = *(unsigned char *)(v11 + 17) & 0x7F;
            int v72 = *(_DWORD *)&buf[64];
            int v73 = 0;
            src[0] = 1;
            src[1] = v35;
            __int16 v70 = *(_WORD *)&buf[56];
            int v71 = *(_DWORD *)&buf[72];
            uuid_copy((unsigned __int8 *)v76 + 8, src);
            if ((_RTPEnsureTransportStreamsActivated(v11) & 0x80000000) == 0)
            {
              uint64_t v36 = *(void *)(v11 + 11104);
              unsigned int v37 = *(uint64_t (**)(uint64_t, uint8_t *))(*(void *)(CMBaseObjectGetVTable() + 16) + 16);
              if (v37)
              {
                int v38 = v37(v36, buf);
                VCPacketInvalidate((uint64_t *)buf);
                if ((v38 & 0x80000000) == 0)
                {
                  int v33 = *v22;
                  if (*v22 != -1)
                  {
                    uint64_t v9 = 0;
                    uint64_t v17 = 0;
LABEL_37:
                    kdebug_trace();
                    HIBYTE(v64) = 1;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                    {
                      uint64_t v39 = VRTraceErrorLogLevelToCSTR();
                      unint64_t v40 = *MEMORY[0x1E4F47A50];
                      unsigned int v41 = *MEMORY[0x1E4F47A50];
                      if (*MEMORY[0x1E4F47A40])
                      {
                        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                        {
                          unsigned int v42 = *(unsigned __int16 *)(v11 + 16);
                          unsigned int v43 = bswap32(*(unsigned __int16 *)(v11 + 18));
                          int v44 = *v32;
                          int v45 = *(_DWORD *)(v11 + 200);
                          *(_DWORD *)CMTime buf = 136316930;
                          *(void *)&uint8_t buf[4] = v39;
                          *(_WORD *)&unsigned char buf[12] = 2080;
                          *(void *)&buf[14] = "RTPTransportResendRTP";
                          *(_WORD *)&unsigned char buf[22] = 1024;
                          *(_DWORD *)&uint8_t buf[24] = 2027;
                          *(_WORD *)&buf[28] = 1024;
                          *(_DWORD *)&buf[30] = v42 >> 15;
                          *(_WORD *)&buf[34] = 1024;
                          *(_DWORD *)&buf[36] = (v42 >> 8) & 0x7F;
                          *(_WORD *)&buf[40] = 1024;
                          *(_DWORD *)&buf[42] = HIWORD(v43);
                          *(_WORD *)&buf[46] = 1024;
                          *(_DWORD *)&unsigned char buf[48] = v44;
                          *(_WORD *)&_OWORD buf[52] = 1024;
                          *(_DWORD *)&buf[54] = v45;
                          _os_log_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Resent RTP packet with marker=%u, payload type=%u, sequence number=%u, timestamp=%u, ssrc=%u", buf, 0x3Au);
                        }
                      }
                      else if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
                      {
                        unsigned int v50 = *(unsigned __int16 *)(v11 + 16);
                        unsigned int v51 = bswap32(*(unsigned __int16 *)(v11 + 18));
                        int v52 = *v32;
                        int v53 = *(_DWORD *)(v11 + 200);
                        *(_DWORD *)CMTime buf = 136316930;
                        *(void *)&uint8_t buf[4] = v39;
                        *(_WORD *)&unsigned char buf[12] = 2080;
                        *(void *)&buf[14] = "RTPTransportResendRTP";
                        *(_WORD *)&unsigned char buf[22] = 1024;
                        *(_DWORD *)&uint8_t buf[24] = 2027;
                        *(_WORD *)&buf[28] = 1024;
                        *(_DWORD *)&buf[30] = v50 >> 15;
                        *(_WORD *)&buf[34] = 1024;
                        *(_DWORD *)&buf[36] = (v50 >> 8) & 0x7F;
                        *(_WORD *)&buf[40] = 1024;
                        *(_DWORD *)&buf[42] = HIWORD(v51);
                        *(_WORD *)&buf[46] = 1024;
                        *(_DWORD *)&unsigned char buf[48] = v52;
                        *(_WORD *)&_OWORD buf[52] = 1024;
                        *(_DWORD *)&buf[54] = v53;
                        _os_log_debug_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Resent RTP packet with marker=%u, payload type=%u, sequence number=%u, timestamp=%u, ssrc=%u", buf, 0x3Au);
                      }
                    }
                    int v46 = *(_DWORD *)(v11 + 208);
                    ++*(_DWORD *)(v11 + 204);
                    *(_DWORD *)(v11 + 20_Block_object_dispose(&STACK[0x250], 8) = v46 + *v22;
                    if (v60) {
                      int IDSAttributeSizeWithChannelDataFormat = VCIDSChannelData_GetIDSAttributeSizeWithChannelDataFormat(v17);
                    }
                    else {
                      int IDSAttributeSizeWithChannelDataFormat = 0;
                    }
                    if (*(_DWORD *)(v11 + 12)) {
                      int v48 = 48;
                    }
                    else {
                      int v48 = 28;
                    }
                    int v49 = IDSAttributeSizeWithChannelDataFormat + v33 + v48;
                    uint64_t v67 = v49;
                    if (v61) {
                      int *v61 = v49;
                    }
                    if (*(_DWORD *)(v11 + 28) == 1) {
                      _RTPUpdateAFRCVideoSendingBitrate(v11, v49, *((unsigned __int8 *)v15 + 20), a1);
                    }
                    goto LABEL_92;
                  }
                }
                goto LABEL_91;
              }
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPTransportResendRTP_cold_4();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPTransportResendRTP_cold_3();
        }
      }
    }
    VCPacketInvalidate((uint64_t *)buf);
LABEL_91:
    uint64_t v9 = *__error() | 0xC0010000;
    goto LABEL_92;
  }
  return 2147549190;
}

uint64_t RTPRexmitRTP(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 2147549186;
  uint64_t v7 = CheckInHandleDebug();
  if (v7)
  {
    uint64_t v8 = v7;
    if (*(void *)(v7 + 10352) != 0xFFFFFFFFLL)
    {
      if (v7 == 0xFFFFFFFFLL)
      {
        return 2147549190;
      }
      else
      {
        *a4 = 0;
        int v9 = bswap32(*(_DWORD *)(v7 + 24));
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v10 = VRTraceErrorLogLevelToCSTR();
          uint64_t v11 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v13 = 136315906;
            uint64_t v14 = v10;
            __int16 v15 = 2080;
            int v16 = "RTPRexmitRTP";
            __int16 v17 = 1024;
            int v18 = 2072;
            __int16 v19 = 1024;
            int v20 = a2;
            _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPRexmitRTP rexmit packet (%04X)", (uint8_t *)&v13, 0x22u);
          }
        }
        MediaQueue_RexmitPacket(*(void *)(v8 + 10352), v9, a2, a4);
        CheckOutHandleDebug();
        if (*a4) {
          return 0;
        }
        else {
          return 2147549196;
        }
      }
    }
  }
  return v6;
}

unint64_t _RTPMediaSampleTimeWithReceiveTimestamp(uint64_t a1, unsigned int a2, int a3)
{
  if (a3)
  {
    unint64_t v4 = a2;
    *(void *)(a1 + 280) = a2;
    *(void *)(a1 + 28_Block_object_dispose(&STACK[0x250], 8) = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = v5 & 0xFFFFFFFF00000000;
    if (v5 - a2 >= 0x7FFFFFFF) {
      unint64_t v7 = v5 & 0xFFFFFFFF00000000;
    }
    else {
      unint64_t v7 = (v5 & 0xFFFFFFFF00000000) - 0x100000000;
    }
    if (v5 >= a2) {
      unint64_t v7 = v5 & 0xFFFFFFFF00000000;
    }
    if (a2 - v5 < 0x7FFFFFFF) {
      v6 += 0x100000000;
    }
    if (v5 > a2) {
      unint64_t v8 = v6;
    }
    else {
      unint64_t v8 = v7;
    }
    unint64_t v4 = v8 + a2;
    *(void *)(a1 + 280) = v4;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 300);
  if (v9 >= 7)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPMediaSampleTimeWithReceiveTimestamp_cold_2();
      }
    }
    unsigned int v9 = *(_DWORD *)(a1 + 300);
    unint64_t v4 = *(void *)(a1 + 280);
  }
  unint64_t v10 = v4 - *(void *)(a1 + 288);
  switch(v9)
  {
    case 1u:
      v10 >>= 1;
      break;
    case 2u:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTPMediaSampleTimeWithReceiveTimestamp_cold_1();
        }
      }
      break;
    case 3u:
      v10 += v10 / 3;
      break;
    case 4u:
      v10 *= 2;
      break;
    case 5u:
      v10 += v10 >> 1;
      break;
    case 6u:
      v10 *= 3;
      break;
    default:
      break;
  }
  unint64_t result = *(void *)(a1 + 272) + v10;
  *(void *)(a1 + 264) = result;
  return result;
}

uint64_t RTPProcessDecryptionStatusChange(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  uint64_t v4 = _RTPProcessDecryptionStatusChange(v3, a2);
  CheckOutHandleDebug();
  return v4;
}

uint64_t _RTPProcessDecryptionStatusChange(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v8 = a2;
  int v2 = *(_DWORD *)(a1 + 10464);
  if (v2 != -1 && v2 == a2) {
    return 0;
  }
  *(_DWORD *)(a1 + 10464) = a2;
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, char *, void))(a1 + 10384);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4(5, *(void *)(a1 + 10392), &v8, 0);
  if ((v5 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v6 = v5;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _RTPProcessDecryptionStatusChange_cold_1();
    }
  }
  return v6;
}

uint64_t RTPReleaseRTPPacket(uint64_t a1, _DWORD **a2)
{
  uint64_t result = CheckInHandleDebug();
  if (result)
  {
    _RTPReleaseRTPPacketInternal(result, a2);
    return CheckOutHandleDebug();
  }
  return result;
}

uint64_t RTPRecvRTP(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 2147549186;
  uint64_t v5 = CheckInHandleDebug();
  if (v5)
  {
    uint64_t v6 = v5;
    if (v5 == 0xFFFFFFFFLL)
    {
      return 2147549190;
    }
    else
    {
      int v18 = 0;
      uint64_t v4 = (uint64_t)RecvRTP(a1, v5, &v18);
      if ((v4 & 0x80000000) != 0 || (unint64_t v7 = v18) == 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v16 = VRTraceErrorLogLevelToCSTR();
          __int16 v17 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v20 = v16;
            __int16 v21 = 2080;
            __int16 v22 = "RTPRecvRTP";
            __int16 v23 = 1024;
            int v24 = 2293;
            __int16 v25 = 1024;
            int v26 = v4;
            _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Failed to parse RTP packet: %d", buf, 0x22u);
          }
        }
      }
      else
      {
        if (!*v18 && !*(_DWORD *)(v6 + 28))
        {
          int v8 = *((unsigned __int8 *)v18 + 104);
          int v9 = *(_DWORD *)(v6 + 152);
          if (v9 != v8)
          {
            if (*((unsigned char *)v18 + 104))
            {
              (*(void (**)(uint64_t, void, _DWORD *, void))(v6 + 10384))(2, *(void *)(v6 + 10392), v18 + 25, 0);
            }
            else
            {
              if (v9 == -1)
              {
                uint64_t v11 = v18 + 25;
                uint64_t v10 = 0;
              }
              else
              {
                uint64_t v10 = 1;
                uint64_t v11 = 0;
              }
              (*(void (**)(uint64_t, void, _DWORD *, void))(v6 + 10384))(v10, *(void *)(v6 + 10392), v11, 0);
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v12 = VRTraceErrorLogLevelToCSTR();
              int v13 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v14 = *(_DWORD *)(v6 + 152);
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v20 = v12;
                __int16 v21 = 2080;
                __int16 v22 = "RTPRecvRTP";
                __int16 v23 = 1024;
                int v24 = 2311;
                __int16 v25 = 1024;
                int v26 = v14;
                __int16 v27 = 1024;
                int v28 = v8;
                _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP relay flag (%d->%d).", buf, 0x28u);
              }
            }
            *(_DWORD *)(v6 + 152) = v8;
          }
        }
        *a2 = v7;
        int v18 = 0;
      }
      _RTPReleaseRTPPacketInternal(v6, &v18);
      CheckOutHandleDebug();
    }
  }
  return v4;
}

_DWORD *RecvRTP(uint64_t a1, uint64_t a2, void *a3)
{
  v15[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 11104))
  {
    v15[0] = 0;
    uint64_t v5 = _RTPEnsureTransportStreamsActivated(a2);
    if ((v5 & 0x80000000) == 0)
    {
      uint64_t v6 = (uint64_t *)(a2 + 11160);
      uint64_t v7 = *(void *)(a2 + 11160);
      v15[0] = (_DWORD *)v7;
      if (v7)
      {
LABEL_14:
        uint64_t v13 = *(void *)(v7 + 6056);
        *uint64_t v6 = v13;
        if (!v13) {
          *(void *)(a2 + 1116_Block_object_dispose(&STACK[0x250], 8) = v6;
        }
        *a3 = v7;
        v15[0] = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(a2 + 11152);
      if (!v8)
      {
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        CFArrayAppendValue(Mutable, *(const void **)(a2 + 11104));
        uint64_t v11 = *(const void **)(a2 + 11120);
        if (v11) {
          CFArrayAppendValue(Mutable, v11);
        }
        uint64_t v5 = VCTransportStreamRunLoopCreateWithTransportStreams(v9, Mutable, (CFTypeRef *)(a2 + 11152));
        if (Mutable) {
          CFRelease(Mutable);
        }
        if ((v5 & 0x80000000) != 0) {
          goto LABEL_17;
        }
        uint64_t v8 = *(void *)(a2 + 11152);
      }
      uint64_t v12 = *(uint64_t (**)(uint64_t, double))(*(void *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v12)
      {
        uint64_t v5 = v12(v8, 0.0);
        if ((v5 & 0x80000000) == 0)
        {
          uint64_t v7 = *v6;
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v5 = 4294954514;
      }
    }
LABEL_17:
    _RTPReleaseRTPPacketInternal(a2, v15);
    return (_DWORD *)v5;
  }

  return _RTPRecvWithSocket(a1, a2, a3);
}

uint64_t _RTPTransport_EstimateRTCPXRSummaryJitter(uint64_t result, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  int v7 = *(_DWORD *)(result + 4836) - *(_DWORD *)(a4 + 4);
  if (v7)
  {
    double v8 = *(double *)(a2 + 128);
    unsigned int v9 = *(unsigned __int16 *)(a4 + 2);
    unsigned int v10 = *(_DWORD *)(result + 4848);
    if (v10 >= v9) {
      unsigned int v10 = *(unsigned __int16 *)(a4 + 2);
    }
    unsigned int v11 = v9 - v10;
    if (v9 - v10 <= 0x13F) {
      unsigned int v9 = v10;
    }
    *(_DWORD *)(result + 484_Block_object_dispose(&STACK[0x250], 8) = v9;
    if (v11 <= 0x13F) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (unsigned int *)(result + 4872 + 4 * v12);
    if ((unint64_t)v13 < result + 6152 && (unint64_t)v13 >= result + 4872)
    {
      LODWORD(a7) = *(_DWORD *)(result + 700);
      unsigned int v15 = v7 + vcvtad_u64_f64((v8 - *(double *)(result + 4864)) * (double)*(unint64_t *)&a7);
      if (a3) {
        unsigned int v15 = 0;
      }
      *uint64_t v13 = v15;
      *(_DWORD *)(result + 4836) = *(_DWORD *)(a4 + 4);
      *(double *)(result + 4864) = v8;
      *(unsigned char *)(result + 6152 + v12) = *(unsigned char *)(a2 + 136);
      unsigned int v16 = *(_DWORD *)(result + 4856);
      if (v12 > v16) {
        unsigned int v16 = v12;
      }
      *(_DWORD *)(result + 4856) = v16;
    }
    else
    {
      __break(0x5519u);
    }
  }
  return result;
}

uint64_t _RTPTransport_ParseMediaPacket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 + 88;
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    uint64_t v10 = 2147549195;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        _RTPTransport_ParseMediaPacket_cold_1();
        return 2147549195;
      }
    }
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 4832);
    dataPointerOut = 0;
    size_t lengthAtOffsetOut = 0;
    OSStatus DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)a2, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
    if (!DataPointer)
    {
      *(_DWORD *)a3 = 0;
      if (dataPointerOut && !lengthAtOffsetOut) {
        goto LABEL_304;
      }
      uint64_t v9 = 2147549191;
      if (lengthAtOffsetOut < 0xC)
      {
        uint64_t v9 = 2147549192;
        goto LABEL_23;
      }
      uint64_t v11 = *(void *)dataPointerOut;
      uint64_t v184 = v11;
      unsigned int v12 = *((_DWORD *)dataPointerOut + 2);
      int v13 = WORD1(v11);
      unsigned int v14 = __rev16(WORD1(v11));
      WORD1(v184) = v14;
      unsigned int v15 = bswap32(HIDWORD(v11));
      unsigned int v16 = bswap32(v12);
      unsigned int v185 = v16;
      if (*(_DWORD *)(a1 + 7004)) {
        BOOL v17 = *(_DWORD *)(a1 + 4832) != v16;
      }
      else {
        BOOL v17 = 1;
      }
      unsigned int v179 = _RTPMediaSampleTimeWithReceiveTimestamp(a1, v15, v17);
      HIDWORD(v184) = v179;
      unsigned int v18 = (unsigned __int16)v184;
      if ((v184 & 0xC0) != 0x80)
      {
        uint64_t v9 = 2147549193;
LABEL_23:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTPTransport_ParseMediaPacket_cold_2();
          }
        }
        return v9;
      }
      if (!*(_DWORD *)(a1 + 7004) && !v13 && !*(_DWORD *)(a1 + 188))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTPTransport_ParseMediaPacket_cold_3();
          }
        }
        goto LABEL_23;
      }
      unsigned int v165 = BYTE1(v184) & 0x7F;
      char InternalPayload = RTPMapGetInternalPayload(*(unsigned __int16 ***)(a1 + 64), v165);
      LOWORD(v184) = ((InternalPayload & 0x7F) << 8) | v18 & 0x80FF;
      if (!*(_DWORD *)(a1 + 28)) {
        kdebug_trace();
      }
      int v176 = v7;
      unsigned int v180 = v14;
      unsigned int v171 = v16;
      unsigned int v178 = v18;
      if (*(_DWORD *)(a1 + 7004) && *(_DWORD *)(a1 + 4832) == v16)
      {
        int v170 = 0;
      }
      else
      {
        double v20 = *(double *)(a2 + 128);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v21 = VRTraceErrorLogLevelToCSTR();
          __int16 v22 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v23 = *(_DWORD *)(a1 + 28);
            int v24 = *(_DWORD *)(a1 + 4832);
            *(_DWORD *)CMTime buf = 136317186;
            *(void *)&uint8_t buf[4] = v21;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_RTPTransport_ReinitializeStream";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = 2361;
            LOWORD(v192[0]) = 1024;
            *(_DWORD *)((char *)v192 + 2) = v23;
            WORD3(v192[0]) = 1024;
            DWORD2(v192[0]) = v171;
            WORD6(v192[0]) = 1024;
            *(_DWORD *)((char *)v192 + 14) = v24;
            WORD1(v192[1]) = 1024;
            DWORD1(v192[1]) = InternalPayload & 0x7F;
            WORD4(v192[1]) = 1024;
            *(_DWORD *)((char *)&v192[1] + 10) = v14;
            HIWORD(v192[1]) = 1024;
            LODWORD(v193) = v179;
            _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP(%d): recv started(%X,%X, %d) SeqNuuint64_t m = %u, TimeStamp = %u", buf, 0x40u);
          }
        }
        *(_WORD *)(a1 + 68_Block_object_dispose(&STACK[0x250], 8) = v14;
        *(_DWORD *)(a1 + 692) = v14;
        *(_DWORD *)(a1 + 696) = v179;
        *(void *)(a1 + 4816) = 0;
        *(_DWORD *)(a1 + 482_Block_object_dispose(&STACK[0x250], 8) = 0;
        *(_DWORD *)(a1 + 4832) = v171;
        bzero((void *)(a1 + 716), 0x1000uLL);
        *(_OWORD *)(a1 + 704) = xmmword_1E259DF30;
        *(void *)(a1 + 648_Block_object_dispose(&STACK[0x250], 8) = MicroToNTP(v20);
        *(_DWORD *)(a1 + 7004) = 1;
        *(_OWORD *)(a1 + 6792) = 0u;
        *(_OWORD *)(a1 + 680_Block_object_dispose(&STACK[0x250], 8) = 0u;
        *(_OWORD *)(a1 + 6824) = 0u;
        *(_OWORD *)(a1 + 6840) = 0u;
        *(_OWORD *)(a1 + 6856) = 0u;
        *(_OWORD *)(a1 + 6872) = 0u;
        *(_OWORD *)(a1 + 688_Block_object_dispose(&STACK[0x250], 8) = 0u;
        *(_OWORD *)(a1 + 6904) = 0u;
        *(_OWORD *)(a1 + 6920) = 0u;
        *(_OWORD *)(a1 + 6936) = 0u;
        *(_OWORD *)(a1 + 6952) = 0u;
        *(_OWORD *)(a1 + 696_Block_object_dispose(&STACK[0x250], 8) = 0u;
        *(void *)(a1 + 6984) = 0;
        *(void *)(a1 + 6992) = 0;
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8844));
        __int16 v25 = (_DWORD *)(a1 + 7520);
        *(_DWORD *)(a1 + 7640) = v171;
        *(unsigned char *)(a1 + 8840) = 1;
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8844));
        *(_DWORD *)(a1 + 8520) = v171;
        *(_WORD *)(a1 + 7650) = v14;
        if ((int)VRTraceGetErrorLogLevelForModule() > 6)
        {
          uint64_t v26 = VRTraceErrorLogLevelToCSTR();
          __int16 v27 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v28 = *v25 & 1;
            int v29 = (*v25 >> 2) & 1;
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v26;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_RTPTransport_ReinitializeStream";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = 2395;
            LOWORD(v192[0]) = 1024;
            *(_DWORD *)((char *)v192 + 2) = v28;
            WORD3(v192[0]) = 1024;
            DWORD2(v192[0]) = v29;
            _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPTransport: need to wait for SRTP to init? (%d/%d)", buf, 0x28u);
          }
        }
        if (*v25 == 1)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v30 = VRTraceErrorLogLevelToCSTR();
            int v31 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315650;
              *(void *)&uint8_t buf[4] = v30;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_RTPTransport_ReinitializeStream";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = 2398;
              _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPTransport: Need to wait for SRTP to init...", buf, 0x1Cu);
            }
          }
          uint64_t v190 = 0x4034000000000000;
          double v32 = micro();
          int v33 = SRTPWaitUseEncryptionRTP(a1 + 7520, &v190);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v34 = VRTraceErrorLogLevelToCSTR();
            unsigned __int8 v35 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              double v36 = micro();
              *(_DWORD *)CMTime buf = 136316162;
              *(void *)&uint8_t buf[4] = v34;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_RTPTransport_ReinitializeStream";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = 2404;
              LOWORD(v192[0]) = 2048;
              *(double *)((char *)v192 + 2) = v36 - v32;
              WORD5(v192[0]) = 1024;
              HIDWORD(v192[0]) = v33;
              _os_log_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPTransport: end wait SRTP @ %.3f seconds (%08X)", buf, 0x2Cu);
            }
          }
          int v7 = v176;
          if (v33 < 0)
          {
            uint64_t v10 = 2147549199;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                _RTPTransport_ParseMediaPacket_cold_17();
                uint64_t v10 = 2147549199;
              }
            }
LABEL_285:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v153 = VRTraceErrorLogLevelToCSTR();
              long long v154 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315906;
                *(void *)&uint8_t buf[4] = v153;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "RTPUninitialize";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&uint8_t buf[24] = 635;
                LOWORD(v192[0]) = 1024;
                *(_DWORD *)((char *)v192 + 2) = v10;
                _os_log_impl(&dword_1E1EA4000, v154, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Uninitializing RTP with error %X", buf, 0x22u);
              }
            }
            RTPReset(a1, v7);
            return v10;
          }
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v37 = VRTraceErrorLogLevelToCSTR();
          int v38 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v39 = *v25 & 1;
            int v40 = (*v25 >> 2) & 1;
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v37;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_RTPTransport_ReinitializeStream";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = 2411;
            LOWORD(v192[0]) = 1024;
            *(_DWORD *)((char *)v192 + 2) = v39;
            WORD3(v192[0]) = 1024;
            DWORD2(v192[0]) = v40;
            _os_log_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPTransport: done waiting for SRTP to init. (%d/%d)", buf, 0x28u);
          }
        }
        int v170 = 1;
        unsigned int v14 = v180;
      }
      if (*(_DWORD *)(a1 + 12)) {
        uint64_t v41 = 48;
      }
      else {
        uint64_t v41 = 28;
      }
      unsigned int v42 = (unsigned int *)(a1 + 716 + 4 * (v14 & 0x3FF));
      if ((unint64_t)v42 >= a1 + 4812 || (unint64_t)v42 < a1 + 716) {
        goto LABEL_304;
      }
      uint64_t v43 = *(void *)(a2 + 104);
      size_t v44 = lengthAtOffsetOut;
      if (*v42 == v14)
      {
        if (!*(_DWORD *)(a1 + 28))
        {
          if (*(_DWORD *)(a1 + 188))
          {
            ++*(_DWORD *)(a1 + 4840);
            unsigned int v51 = (unsigned int *)(a1 + 6792 + 4 * *(unsigned int *)(a1 + 6992));
            if ((unint64_t)v51 >= a1 + 6992 || (unint64_t)v51 < a1 + 6792) {
              goto LABEL_304;
            }
            unsigned int v14 = v180;
            *unsigned int v51 = v180;
            *(_DWORD *)(a1 + 6992) = (*(_DWORD *)(a1 + 6992) + 1) % 0x32u;
            int log = 1;
            int v45 = 1;
          }
          else
          {
            int log = 1;
            int v45 = 1;
          }
          goto LABEL_91;
        }
        int v45 = 1;
      }
      else
      {
        *unsigned int v42 = v14;
        ++*(_DWORD *)(a1 + 704);
        uint64_t v46 = *(void *)(a1 + 10408);
        if (v46) {
          ++*(_DWORD *)(v46 + 56);
        }
        int v45 = 0;
        ++*(void *)(a1 + 328);
      }
      if (*(unsigned char *)(a1 + 11100))
      {
        int log = 0;
        goto LABEL_91;
      }
      int v47 = *(_DWORD *)(a1 + 692);
      if (v14 == (unsigned __int16)v47 || (unsigned __int16)(v14 - v47) > 0x7FFEu)
      {
        if ((unsigned __int16)(v47 - v14) < 0x33u)
        {
LABEL_90:
          int log = 0;
          int v7 = v176;
          goto LABEL_91;
        }
      }
      else
      {
        int v48 = v47 + 0x10000;
        if (v14 >= (unsigned __int16)v47) {
          int v48 = *(_DWORD *)(a1 + 692);
        }
        *(_DWORD *)(a1 + 692) = v48 & 0xFFFF0000 | v14;
        if ((unsigned __int16)(v14 - v47) < 2u) {
          goto LABEL_90;
        }
        int loga = (unsigned __int16)(v14 - v47);
        unsigned __int16 offsetToData = v14 - v47;
        uint64_t v162 = v43;
        uint64_t v167 = v41;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v158 = VRTraceErrorLogLevelToCSTR();
          int v49 = *MEMORY[0x1E4F47A50];
          unsigned int v50 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315906;
              *(void *)&uint8_t buf[4] = v158;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_RTPTransport_DetectPacketLoss";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = 2710;
              LOWORD(v192[0]) = 1024;
              *(_DWORD *)((char *)v192 + 2) = loga - 1;
              _os_log_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %d packets lost", buf, 0x22u);
            }
          }
          else if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            _RTPTransport_ParseMediaPacket_cold_16();
          }
        }
        uint64_t v52 = *(void *)(a1 + 10360);
        unsigned int logc = loga - 1;
        if (*(_DWORD *)(a1 + 28) == 1)
        {
          AFRCRecordMaxBurstyLoss(v52, logc);
          *(void *)&buf[11] = 0;
          *(void *)&uint8_t buf[4] = 0;
          memset(v192, 0, sizeof(v192));
          long long v193 = 0u;
          long long v195 = 0u;
          long long v196 = 0u;
          long long v197 = 0u;
          long long v198 = 0u;
          long long v199 = 0u;
          long long v200 = 0u;
          long long v201 = 0u;
          uint64_t v202 = 0;
          uint64_t v53 = *(void *)(a1 + 10424);
          *(_DWORD *)CMTime buf = 7;
          buf[19] = 1;
          uint64_t v54 = 0x200000000;
        }
        else
        {
          AFRCRecordMaxAudioConsecutiveLoss(v52, logc);
          *(void *)&buf[11] = 0;
          *(void *)&uint8_t buf[4] = 0;
          memset(v192, 0, sizeof(v192));
          long long v193 = 0u;
          long long v195 = 0u;
          long long v196 = 0u;
          long long v197 = 0u;
          long long v198 = 0u;
          long long v199 = 0u;
          long long v200 = 0u;
          long long v201 = 0u;
          uint64_t v202 = 0;
          uint64_t v53 = *(void *)(a1 + 10424);
          *(_DWORD *)CMTime buf = 7;
          buf[19] = 1;
          uint64_t v54 = 0x100000000;
        }
        *(void *)&buf[20] = v54;
        unsigned int v194 = logc;
        VCRateControlSetStatistics(v53, buf);
        unsigned int v14 = v180;
        uint64_t v41 = v167;
        uint64_t v43 = v162;
        if (offsetToData <= 0x5DCu) {
          goto LABEL_90;
        }
      }
      uint64_t v163 = v43;
      uint64_t v168 = v41;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        size_t offsetToDataa = VRTraceErrorLogLevelToCSTR();
        logb = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = offsetToDataa;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_RTPTransport_DetectPacketLoss";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&uint8_t buf[24] = 2744;
          LOWORD(v192[0]) = 1024;
          *(_DWORD *)((char *)v192 + 2) = (unsigned __int16)v47;
          WORD3(v192[0]) = 1024;
          DWORD2(v192[0]) = v14;
          _os_log_impl(&dword_1E1EA4000, logb, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Big jump in sequence Number! LastSeq:%d CurrentSeq:%d", buf, 0x28u);
        }
      }
      int log = 0;
      int v7 = v176;
      uint64_t v41 = v168;
      uint64_t v43 = v163;
LABEL_91:
      int v55 = *(_DWORD *)v3;
      uint64_t v56 = *(_DWORD **)(a1 + 10408);
      int v57 = *(_DWORD *)(a1 + 28);
      if (v56)
      {
        if (v57)
        {
          if (v57 == 1) {
            v56[64] = *(_DWORD *)(a1 + 692) - *(unsigned __int16 *)(a1 + 688) + 1;
          }
          goto LABEL_102;
        }
        if (!v55)
        {
          ++v56[61];
          v56[65] = *(_DWORD *)(a1 + 692) - *(unsigned __int16 *)(a1 + 688) + 1;
        }
        ++v56[63];
      }
      else if (v57)
      {
        goto LABEL_102;
      }
      if (v55 >= 2)
      {
        uint64_t v10 = 2147549199;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v92 = VRTraceErrorLogLevelToCSTR();
          uint64_t v93 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v94 = *(_DWORD *)v3;
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v92;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_RTPTransport_ParseMediaPacket";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = 2918;
            LOWORD(v192[0]) = 1024;
            *(_DWORD *)((char *)v192 + 2) = 2918;
            WORD3(v192[0]) = 1024;
            DWORD2(v192[0]) = v94;
            _os_log_error_impl(&dword_1E1EA4000, v93, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Wrong connection index: %d.", buf, 0x28u);
            uint64_t v10 = 2147549199;
            goto LABEL_265;
          }
        }
        goto LABEL_284;
      }
      int v57 = 0;
LABEL_102:
      size_t v58 = v44 + v43 + v41;
      if (v45) {
        size_t v59 = 0;
      }
      else {
        size_t v59 = v58;
      }
      uint64_t v60 = *(void *)(a1 + 10352);
      if (v60 == 0xFFFFFFFFLL)
      {
        if (v59)
        {
          ++*(_DWORD *)(a1 + 320);
          HIDWORD(v61) = 1083129856;
          LODWORD(v61) = *(_DWORD *)(a1 + 324);
          *(_DWORD *)(a1 + 324) = ((double)(8 * v59) / 1000.0 + (double)v61);
        }
      }
      else
      {
        MediaQueue_RecordNewPacketWithSize(v60, v59, v57, (_DWORD *)(a1 + 320), (unsigned int *)(a1 + 324));
      }
      if (!*(_DWORD *)(a1 + 10376)) {
        AFRCCalcRxEstimate(*(double *)(a2 + 128), *(void *)(a1 + 10360), *(unsigned int *)(a1 + 28), v179, v14, v58, 0, 0);
      }
      uint64_t v62 = *(void *)(a1 + 11192);
      if (v62) {
        VCConnectionManager_UpdateConnectionHealthWithIndicator(v62, *(_DWORD *)v3 == 0, v14, log);
      }
      size_t v164 = v58;
      uint64_t v181 = 0;
      unint64_t v63 = _RTPTransport_PacketExtensionLength((unint64_t)dataPointerOut, lengthAtOffsetOut, &v184, &v181);
      if ((v63 & 0x80000000) != 0)
      {
        uint64_t v10 = v63;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v90 = VRTraceErrorLogLevelToCSTR();
          uint64_t v91 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v90;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_RTPTransport_ParseMediaPacket";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = 2928;
            LOWORD(v192[0]) = 1024;
            *(_DWORD *)((char *)v192 + 2) = v10;
            _os_log_error_impl(&dword_1E1EA4000, v91, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to retrieve extension size: %d", buf, 0x22u);
            goto LABEL_264;
          }
        }
LABEL_296:
        int v7 = v176;
        goto LABEL_284;
      }
      uint64_t v64 = v181;
      size_t v65 = lengthAtOffsetOut;
      unsigned int v169 = dataPointerOut;
      char v187 = 0;
      signed int v186 = 0;
      uint64_t v66 = a1 + 8840;
      if (*(_DWORD *)(a1 + 7928) == 1)
      {
        if (*(unsigned char *)(a1 + 11200))
        {
          if (*(unsigned __int16 *)(a1 + 11202) + 1 != v180)
          {
            uint64_t v190 = 0;
            pthread_mutex_lock((pthread_mutex_t *)(a1 + 7808));
            VCMediaKeyIndex_ReleaseAndCopyNewValue((const void **)&v190, *(void **)(a1 + 7872));
            pthread_mutex_unlock((pthread_mutex_t *)(a1 + 7808));
            uint64_t v67 = *(uint64_t (**)(uint64_t, void, uint64_t, void))(a1 + 10384);
            if (v67)
            {
              if ((v67(6, *(void *)(a1 + 10392), v190, 0) & 0x80000000) != 0
                && (int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  _RTPTransport_ParseMediaPacket_cold_15();
                }
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v68 = VRTraceErrorLogLevelToCSTR();
              unsigned int v69 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                int v87 = *(unsigned __int16 *)(a1 + 11202) + 1;
                uint64_t v88 = *(void *)(a1 + 10392);
                *(_DWORD *)CMTime buf = 136316674;
                *(void *)&uint8_t buf[4] = v68;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_RTPTransport_DetectSequenceNumberGap";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&uint8_t buf[24] = 2128;
                LOWORD(v192[0]) = 1024;
                *(_DWORD *)((char *)v192 + 2) = v87;
                WORD3(v192[0]) = 1024;
                DWORD2(v192[0]) = v180;
                WORD6(v192[0]) = 2048;
                *(void *)((char *)v192 + 14) = v88;
                WORD3(v192[1]) = 2112;
                *((void *)&v192[1] + 1) = v190;
                _os_log_error_impl(&dword_1E1EA4000, v69, OS_LOG_TYPE_ERROR, " [%s] %s:%d Detected gap in RTP sequence number: expected=%u, received=%u, for stream=%p with MKI=%@", buf, 0x3Cu);
              }
            }
            VCMediaKeyIndex_Release((const void **)&v190);
            uint64_t v66 = a1 + 8840;
            *(unsigned char *)(a1 + 11200) = 0;
          }
          *(_WORD *)(v66 + 2362) = v180;
        }
        if (!*(void *)(a1 + 7872))
        {
          *(unsigned char *)(v66 + 2360) = 1;
          *(_WORD *)(v66 + 2362) = v180;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v70 = VRTraceErrorLogLevelToCSTR();
            int v71 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v72 = *(void *)(a1 + 10392);
              *(_DWORD *)CMTime buf = 136315906;
              *(void *)&uint8_t buf[4] = v70;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_RTPTransport_DetectSequenceNumberGap";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = 2139;
              LOWORD(v192[0]) = 2048;
              *(void *)((char *)v192 + 2) = v72;
              _os_log_impl(&dword_1E1EA4000, v71, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Started RTP sequence number gap detection for stream=%p", buf, 0x26u);
            }
          }
        }
      }
      int v73 = v169;
      if ((v65 & 0x80000000) != 0 || (int)v65 > (uint64_t)v65) {
        goto LABEL_304;
      }
      uint64_t offsetToDatab = 4 * (v18 & 0xF) + 12;
      size_t v177 = v64 + offsetToDatab;
      uint64_t v74 = 2149711929;
      uint64_t v75 = SRTPVerifyAuthenticationTag(a1 + 7520, v180, v169, v65, (unsigned int *)&v186, &v187);
      if ((v75 & 0x80000000) != 0)
      {
        uint64_t v10 = v75;
        if (v75 != -2145255368)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            int v7 = v176;
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _RTPTransport_ParseMediaPacket_cold_6();
            }
            goto LABEL_202;
          }
          int v86 = 0;
LABEL_206:
          int v7 = v176;
          goto LABEL_207;
        }
      }
      if (!v187)
      {
LABEL_193:
        unint64_t v101 = (unint64_t)&v73[v177];
        if (&v73[v177] > &v73[v65]) {
          goto LABEL_304;
        }
        if (v101 < (unint64_t)v73) {
          goto LABEL_304;
        }
        int v102 = v186 - v177;
        if (v186 - v177 < 0 || (uint64_t)(v65 - v177) < v102) {
          goto LABEL_304;
        }
        uint64_t v103 = SRTPDecrypt(a1 + 7520, v180, v101, v102);
        if ((v103 & 0x80000000) == 0 || (uint64_t v10 = v103, v103 == -2145255368))
        {
          uint64_t v10 = 0;
          size_t v65 = v186;
          int v7 = v176;
          if (!*(_DWORD *)(a1 + 7912))
          {
LABEL_208:
            if (v65 > lengthAtOffsetOut) {
              goto LABEL_304;
            }
            size_t lengthAtOffsetOut = v65;
            if ((v10 & 0x80000000) != 0) {
              goto LABEL_284;
            }
            unsigned int v104 = v178;
            if ((v178 & 0x20) != 0)
            {
              unsigned int v106 = &dataPointerOut[v65 - 1];
              if (v106 >= &dataPointerOut[v65] || v106 < dataPointerOut) {
                goto LABEL_304;
              }
              int v105 = *v106;
            }
            else
            {
              int v105 = 0;
            }
            if ((v65 - v105 - v177) < 0x5C1)
            {
              __int16 v107 = v180;
              if (log)
              {
LABEL_217:
                *(void *)(a3 + 120) = v164;
                *(void *)(a3 + 40) = *(void *)(a2 + 128);
                uint64_t v108 = *(unsigned __int8 *)(a2 + 34);
                if (!*(unsigned char *)(a2 + 34))
                {
LABEL_220:
                  uint64_t v10 = 0;
                  *(unsigned char *)(a3 + 50) = *(unsigned char *)(a2 + 36);
                  *(void *)(a3 + 56) = *(void *)(a2 + 40);
                  *(unsigned char *)(a3 + 89) = *(unsigned char *)(a2 + 35);
                  long long v109 = *(_OWORD *)v3;
                  *(void *)(a3 + 112) = *(void *)(v3 + 16);
                  *(_OWORD *)(a3 + 96) = v109;
                  *(unsigned char *)(a3 + 49) = *(unsigned char *)(a2 + 9);
                  *(unsigned char *)(a3 + 4_Block_object_dispose(&STACK[0x250], 8) = v170;
                  *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x250], 8) = v104 >> 15;
                  *(_DWORD *)(a3 + 12) = InternalPayload & 0x7F;
                  *(_DWORD *)(a3 + 16) = v165;
                  *(_WORD *)(a3 + 20) = v107;
                  *(_DWORD *)(a3 + 24) = v179;
                  *(_DWORD *)(a3 + 2_Block_object_dispose(&STACK[0x250], 8) = v171;
                  *(unsigned char *)(a3 + 200) = log;
                  *(unsigned char *)(a3 + 201) = *(_DWORD *)(a2 + 88) == 0;
                  *(unsigned char *)(a3 + 202) = *(unsigned char *)(a2 + 137);
                  *(unsigned char *)(a3 + 203) = *(unsigned char *)(a2 + 138);
                  return v10;
                }
                *(unsigned char *)(a3 + 8_Block_object_dispose(&STACK[0x250], 8) = v108;
                if (v108 <= 0xC)
                {
                  memcpy((void *)(a3 + 64), (const void *)(a2 + 10), 2 * v108);
                  __int16 v107 = v180;
                  unsigned int v104 = v178;
                  goto LABEL_220;
                }
LABEL_304:
                __break(0x5519u);
              }
              double v110 = *(double *)(a2 + 128);
              unsigned int v111 = *(_DWORD *)(a1 + 696);
              unsigned int v112 = *(_DWORD *)(a1 + 700);
              double v113 = NTPToMicro(*(void *)(a1 + 6488));
              if (v179 != *(_DWORD *)(a1 + 4824))
              {
                unsigned int v114 = ((double)v111 + (double)v112 * (v110 - v113)) - v179;
                if (v170)
                {
                  int v115 = 0;
                }
                else
                {
                  int v115 = v114 - *(_DWORD *)(a1 + 4816);
                  if (v115 < 0) {
                    int v115 = *(_DWORD *)(a1 + 4816) - v114;
                  }
                }
                *(void *)(a1 + 4816) = (int)v114;
                unsigned int v116 = v115 - ((*(_DWORD *)(a1 + 4828) + 8) >> 4) + *(_DWORD *)(a1 + 4828);
                *(_DWORD *)(a1 + 482_Block_object_dispose(&STACK[0x250], 8) = v116;
                *(_DWORD *)(a1 + 4824) = v179;
                *(double *)(a1 + 6784) = ((double)(v116 >> 4)
                                        + *(double *)(a1 + 6784) * (double)(*(_DWORD *)(a1 + 704) - 1))
                                       / (double)*(unsigned int *)(a1 + 704);
                if (*(_DWORD *)(a1 + 6776) <= v116 >> 4) {
                  unsigned int v117 = v116 >> 4;
                }
                else {
                  unsigned int v117 = *(_DWORD *)(a1 + 6776);
                }
                *(_DWORD *)(a1 + 6776) = v117;
              }
              if (a3 + 8 >= (unint64_t)(a3 + 208)) {
                goto LABEL_304;
              }
              char v118 = *(OpaqueCMBlockBuffer **)a2;
              int v120 = dataPointerOut;
              size_t v119 = lengthAtOffsetOut;
              VCBlockBuffer_Clear(a3 + 128);
              unsigned int v124 = v178;
              if ((v178 & 0x10) == 0)
              {
LABEL_242:
                long long v128 = *(OpaqueCMBlockBuffer **)a2;
                uint64_t v129 = dataPointerOut;
                int v130 = &dataPointerOut[lengthAtOffsetOut];
                unsigned int v104 = v124;
                if ((v124 & 0x20) != 0)
                {
                  BOOL v133 = &dataPointerOut[lengthAtOffsetOut - 1];
                  int v7 = v176;
                  size_t v132 = v177;
                  if (v133 >= v130 || v133 < dataPointerOut) {
                    goto LABEL_304;
                  }
                  uint64_t v131 = *v133;
                }
                else
                {
                  uint64_t v131 = 0;
                  int v7 = v176;
                  size_t v132 = v177;
                }
                uint64_t v134 = 0;
                long long v135 = 0;
                unint64_t v136 = 0;
                long long v137 = 0;
                size_t v138 = v131 + v132;
                *(void *)CMTime buf = 0;
                unint64_t v139 = lengthAtOffsetOut - v138;
                if (lengthAtOffsetOut != v138)
                {
                  size_t v140 = v132;
                  if (CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 10480), v128, v132, lengthAtOffsetOut - v138, 0, (CMBlockBufferRef *)buf))
                  {
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        _RTPTransport_ParseMediaPacket_cold_4();
                      }
                    }
                    if (*(void *)buf) {
                      CFRelease(*(CFTypeRef *)buf);
                    }
                    uint64_t v10 = 2147549188;
                    goto LABEL_264;
                  }
                  long long v137 = &v129[v140];
                  uint64_t v134 = *(void *)buf;
                  long long v135 = v129;
                  unint64_t v136 = v130;
                  unsigned int v104 = v178;
                }
                *(void *)(a3 + 152) = v134;
                if (v136 < v137 || v135 > v137 || v139 > v136 - v137) {
                  goto LABEL_304;
                }
                *(void *)(a3 + 160) = v139;
                *(void *)(a3 + 16_Block_object_dispose(&STACK[0x250], 8) = v137;
                __int16 v107 = v180;
                if ((v104 & 0x20) == 0)
                {
LABEL_254:
                  if (*(_DWORD *)(a1 + 188))
                  {
                    if (v170) {
                      *(_DWORD *)(a1 + 484_Block_object_dispose(&STACK[0x250], 8) = 0;
                    }
                    _RTPTransport_EstimateRTCPXRSummaryJitter(a1, a2, v170, (uint64_t)&v184, v121, v122, v123);
                  }
                  goto LABEL_217;
                }
                long long v141 = dataPointerOut;
                uint64_t v142 = &dataPointerOut[lengthAtOffsetOut];
                unint64_t v143 = &dataPointerOut[lengthAtOffsetOut - 1];
                if (v143 >= &dataPointerOut[lengthAtOffsetOut] || v143 < dataPointerOut) {
                  goto LABEL_304;
                }
                uint64_t v144 = *v143;
                size_t v145 = lengthAtOffsetOut - v144;
                unsigned __int8 v146 = v144 - 1;
                if (*(_DWORD *)(a1 + 28))
                {
                  if ((v144 - 1) > 3u)
                  {
LABEL_262:
                    uint64_t v10 = 2147549191;
                    goto LABEL_284;
                  }
                  if ((_BYTE)v144 != 1)
                  {
                    uint64_t v147 = (v144 - 1);
                    OSStatus v148 = &dataPointerOut[v145];
                    while (v148 < v142 && v148 >= dataPointerOut)
                    {
                      int v149 = *v148;
                      BOOL v151 = v149 == 255 && v146 > 2u;
                      if ((v149 - 4) < 0xFB || v151) {
                        goto LABEL_262;
                      }
                      ++v148;
                      if (!--v147) {
                        goto LABEL_282;
                      }
                    }
                    goto LABEL_304;
                  }
LABEL_282:
                  unint64_t v152 = v146;
                  if (!CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 10480), *(CMBlockBufferRef *)a2, v145, v146, 0, (CMBlockBufferRef *)(a3 + 176)))
                  {
                    int v155 = &v141[v145];
                    if (v142 < &v141[v145] || v155 < v141 || v142 - &v141[v145] < v152) {
                      goto LABEL_304;
                    }
                    *(void *)(a3 + 184) = v152;
                    *(void *)(a3 + 192) = v155;
                    __int16 v107 = v180;
                    unsigned int v104 = v178;
                    goto LABEL_254;
                  }
                  uint64_t v10 = 2147549187;
                  goto LABEL_284;
                }
                uint64_t v10 = 2147549191;
                if ((v144 - 1) <= 0xAu) {
                  goto LABEL_282;
                }
LABEL_284:
                if (!v170) {
                  return v10;
                }
                goto LABEL_285;
              }
              *(void *)CMTime buf = 0;
              unint64_t v125 = _RTPTransport_PacketExtensionLength((unint64_t)v120, v119, &v184, (uint64_t *)buf);
              if ((v125 & 0x80000000) == 0)
              {
                size_t v126 = *(void *)buf;
                if (*(void *)buf)
                {
                  int v127 = &v120[offsetToDatab];
                  if (&v120[offsetToDatab] < v120 || v127 > &v120[v119] || *(void *)buf > v119 - offsetToDatab) {
                    goto LABEL_304;
                  }
                  *(void *)(a3 + 136) = *(void *)buf;
                  *(void *)(a3 + 144) = v127;
                  if (CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 10480), v118, offsetToDatab, v126, 0, (CMBlockBufferRef *)(a3 + 128)))
                  {
                    uint64_t v10 = 2147549188;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        _RTPTransport_ParseMediaPacket_cold_5();
                      }
                    }
                    goto LABEL_264;
                  }
                }
                unsigned int v124 = v178;
                goto LABEL_242;
              }
              uint64_t v10 = v125;
LABEL_264:
              int v7 = v176;
LABEL_265:
              if ((v170 & 1) == 0) {
                return v10;
              }
              goto LABEL_285;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v156 = VRTraceErrorLogLevelToCSTR();
              uint64_t v157 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CMTime buf = 136316674;
                *(void *)&uint8_t buf[4] = v156;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_RTPTransport_ParseMediaPacket";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&uint8_t buf[24] = 2940;
                LOWORD(v192[0]) = 1024;
                *(_DWORD *)((char *)v192 + 2) = lengthAtOffsetOut;
                WORD3(v192[0]) = 1024;
                DWORD2(v192[0]) = lengthAtOffsetOut;
                WORD6(v192[0]) = 1024;
                *(_DWORD *)((char *)v192 + 14) = v177;
                WORD1(v192[1]) = 1024;
                DWORD1(v192[1]) = (v178 >> 5) & 1;
                _os_log_error_impl(&dword_1E1EA4000, v157, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid packet! length:%d iRet:%d iOffset:%d padding:%d, ", buf, 0x34u);
                uint64_t v10 = 2147549191;
                goto LABEL_264;
              }
            }
            uint64_t v10 = 2147549191;
            goto LABEL_296;
          }
          int v86 = 1;
LABEL_207:
          _RTPProcessDecryptionStatusChange(a1, v86);
          goto LABEL_208;
        }
        int v7 = v176;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTPTransport_ParseMediaPacket_cold_7();
          }
        }
LABEL_202:
        int v86 = 0;
        goto LABEL_207;
      }
      uint64_t v189 = 0;
      uint64_t v190 = 0;
      CFArrayRef theArray = 0;
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 7808));
      VCMediaKeyIndex_ReleaseAndCopyNewValue((const void **)&v190, *(void **)(a1 + 7872));
      VCMediaKeyIndex_ReleaseAndCopyNewValue((const void **)&v189, *(void **)(a1 + 7880));
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 7808));
      unsigned int v76 = *(_DWORD *)(a1 + 7928);
      if (v76 <= 4 && ((1 << v76) & 0x1A) != 0)
      {
        if ((VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex(*(void *)(a1 + 10448), (const char *)v189, (uint64_t *)&theArray) & 0x80000000) != 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v95 = VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _RTPTransport_ParseMediaPacket_cold_8(v95, &v189);
            }
          }
        }
        else if (theArray)
        {
          uint64_t v77 = *(uint64_t (**)(uint64_t, void, void *, void))(a1 + 10384);
          if (v77 && (v77(4, *(void *)(a1 + 10392), v189, 0) & 0x80000000) != 0)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTPTransport_ParseMediaPacket_cold_14();
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTPTransport_ParseMediaPacket_cold_13();
              }
            }
          }
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
          CFArrayRef Value = (const char *)CFDictionaryGetValue(ValueAtIndex, @"SecurityKeyIndex");
          if (Value)
          {
            if ((VCSecurityKeyHolder_AssociateKeyIndex(*(void *)(a1 + 10448), Value) & 0x80000000) != 0)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  _RTPTransport_ParseMediaPacket_cold_11();
                }
              }
            }
            else
            {
              int v80 = SRTPUpdateKeyMaterialForRTPInfo(a1, ValueAtIndex);
              int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
              if (!v80)
              {
                if (ErrorLogLevelForModule >= 7)
                {
                  uint64_t v82 = VRTraceErrorLogLevelToCSTR();
                  char v83 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    long long v84 = VCMediaKeyIndex_Description(v189);
                    *(_DWORD *)CMTime buf = 136316162;
                    *(void *)&uint8_t buf[4] = v82;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "_RTPTransport_HandleMKIChanged";
                    *(_WORD *)&unsigned char buf[22] = 1024;
                    *(_DWORD *)&uint8_t buf[24] = 2681;
                    LOWORD(v192[0]) = 2048;
                    *(void *)((char *)v192 + 2) = a1;
                    WORD5(v192[0]) = 2080;
                    *(void *)((char *)v192 + 12) = v84;
                    _os_log_impl(&dword_1E1EA4000, v83, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d rtpInfo=%p: SRTP has been updated with new key material with index=%s", buf, 0x30u);
                  }
                }
                uint64_t v74 = 0;
                int v85 = 1;
                goto LABEL_190;
              }
              if (ErrorLogLevelForModule >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  _RTPTransport_ParseMediaPacket_cold_12();
                }
              }
            }
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _RTPTransport_ParseMediaPacket_cold_10();
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v96 = VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTPTransport_ParseMediaPacket_cold_9(v96, &v189);
          }
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v97 = VRTraceErrorLogLevelToCSTR();
        size_t v98 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v99 = VCMediaKeyIndex_Description(v189);
          uint64_t v100 = VCMediaKeyIndex_Description((void *)v190);
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v97;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_RTPTransport_HandleMKIChanged";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&uint8_t buf[24] = 2684;
          LOWORD(v192[0]) = 2048;
          *(void *)((char *)v192 + 2) = a1;
          WORD5(v192[0]) = 2080;
          *(void *)((char *)v192 + 12) = v99;
          WORD2(v192[1]) = 2080;
          *(void *)((char *)&v192[1] + 6) = v100;
          _os_log_impl(&dword_1E1EA4000, v98, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d rtpInfo=%p: SRTP drop packet due to media key index changed [new:%s, old:%s]", buf, 0x3Au);
        }
      }
      int v85 = 0;
LABEL_190:
      int v73 = v169;
      if (theArray) {
        CFRelease(theArray);
      }
      VCMediaKeyIndex_Release((const void **)&v190);
      VCMediaKeyIndex_Release((const void **)&v189);
      if (!v85)
      {
        int v86 = 0;
        uint64_t v10 = v74;
        goto LABEL_206;
      }
      goto LABEL_193;
    }
    if (DataPointer >= 0) {
      int v89 = DataPointer;
    }
    else {
      int v89 = -DataPointer;
    }
    uint64_t v10 = v89 | (DataPointer << 31) | 0x50010000u;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPTransport_ParseMediaPacket_cold_18();
      }
    }
  }
  return v10;
}

unint64_t _RTPTransport_PacketExtensionLength(unint64_t result, unint64_t a2, _WORD *a3, uint64_t *a4)
{
  if (a4)
  {
    *a4 = 0;
    if ((*a3 & 0x10) != 0)
    {
      unint64_t v5 = 4 * (*a3 & 0xFLL) + 12;
      if (v5 >= a2)
      {
        uint64_t v4 = 2147549191;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTPTransport_PacketExtensionLength_cold_4();
          }
        }
      }
      else if (4 * (*a3 & 0xFuLL) + 16 <= a2)
      {
        uint64_t v6 = (unsigned __int16 *)(result + v5 + 2);
        if ((unint64_t)v6 >= result + a2 || (unint64_t)v6 < result)
        {
          __break(0x5519u);
          return result;
        }
        uint64_t v8 = 4 * (bswap32(*v6) >> 16) + 4;
        if (v8 + v5 <= a2)
        {
          uint64_t v4 = 0;
          *a4 = v8;
        }
        else
        {
          uint64_t v4 = 2147549191;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _RTPTransport_PacketExtensionLength_cold_3();
            }
          }
        }
      }
      else
      {
        uint64_t v4 = 2147549191;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTPTransport_PacketExtensionLength_cold_2();
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 2147549188;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPTransport_PacketExtensionLength_cold_1();
      }
    }
  }
  return v4;
}

_DWORD *_RTPRecvWithSocket(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  uint64_t v4 = *(void *)(a2 + 10472);
  if (!v4)
  {
    unsigned int v18 = 0;
    goto LABEL_12;
  }
  uint64_t result = VCMemoryPool_Alloc(*(OSQueueHead **)(a2 + 10472));
  if (result) {
    BOOL v7 = result >= (_DWORD *)((char *)result + *(void *)(v4 + 16));
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    uint64_t v8 = result;
    unsigned int v18 = result;
    if (result)
    {
      if ((VTP_Recvfrom(*(_DWORD *)(a2 + 4), &v19) & 0x80000000) != 0)
      {
        uint64_t v9 = *__error() | 0xC0010000;
        goto LABEL_10;
      }
      uint64_t v9 = _RTPTransport_ParseVTPPacket(a2, v19, v8);
      if ((v9 & 0x80000000) == 0)
      {
        *a3 = v8;
        unsigned int v18 = 0;
        goto LABEL_10;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        goto LABEL_10;
      }
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      unsigned int v16 = *MEMORY[0x1E4F47A50];
      BOOL v17 = *MEMORY[0x1E4F47A50];
      if (!*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
          _RTPRecvWithSocket_cold_1();
        }
        goto LABEL_10;
      }
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
LABEL_10:
        _RTPReleaseRTPPacketInternal(a2, &v18);
        VTP_ReleasePacket((void **)&v19);
        return (_DWORD *)v9;
      }
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v21 = v15;
      __int16 v22 = 2080;
      int v23 = "_RTPRecvWithSocket";
      __int16 v24 = 1024;
      int v25 = 3025;
      __int16 v26 = 1024;
      int v27 = v9;
      unsigned int v12 = " [%s] %s:%d RTP packet parsing failed: %d";
      int v13 = v16;
      uint32_t v14 = 34;
LABEL_20:
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
      goto LABEL_10;
    }
LABEL_12:
    uint64_t v9 = 2147549187;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_10;
    }
    uint64_t v10 = VRTraceErrorLogLevelToCSTR();
    uint64_t v11 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    *(_DWORD *)CMTime buf = 136315650;
    uint64_t v21 = v10;
    __int16 v22 = 2080;
    int v23 = "_RTPRecvWithSocket";
    __int16 v24 = 1024;
    int v25 = 3019;
    unsigned int v12 = " [%s] %s:%d Failed to allocate RTP packet";
    int v13 = v11;
    uint32_t v14 = 28;
    goto LABEL_20;
  }
  __break(0x5519u);
  return result;
}

uint64_t _RTPTransport_ParseVTPPacket(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  v9[21] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&v9[14] = unk_1E259E1C0;
  *(_OWORD *)&v9[16] = xmmword_1E259E1D0;
  memset(&v9[18], 170, 24);
  memset(v9, 170, 112);
  VCGetVCPacketWithVTPPacket(a2, (uint64_t)v9);
  if (*(_DWORD *)(a1 + 28) || *(_DWORD *)(a2 + 348) != 256) {
    uint64_t v6 = _RTPTransport_ParseMediaPacket(a1, (uint64_t)v9, (uint64_t)a3);
  }
  else {
    uint64_t v6 = _RTPTransport_ParseBasebandNotification(a1, (uint64_t)v9, a3);
  }
  uint64_t v7 = v6;
  VCPacketInvalidate(v9);
  return v7;
}

void RTPGetUplinkReportingStats(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = CheckInHandleDebug();
    if (v3)
    {
      *a2 = *(void *)(v3 + 352);
      CheckOutHandleDebug();
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPGetUplinkReportingStats_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTPGetUplinkReportingStats_cold_1();
    }
  }
}

void RTPGetDownlinkReportingStats(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = CheckInHandleDebug();
    if (v3)
    {
      long long v4 = *(_OWORD *)(v3 + 328);
      *(void *)(a2 + 16) = *(void *)(v3 + 344);
      *(_OWORD *)a2 = v4;
      CheckOutHandleDebug();
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPGetDownlinkReportingStats_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      RTPGetDownlinkReportingStats_cold_1();
    }
  }
}

uint64_t _RTPSocketRTPAndBBNoteCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (v3)
  {
    unint64_t v4 = v3;
    uint64_t v5 = *(void *)(v3 + 10472);
    if (v5)
    {
      uint64_t v6 = VCMemoryPool_Alloc(*(OSQueueHead **)(v3 + 10472));
      if (v6) {
        BOOL v7 = v6 >= (_DWORD *)((char *)v6 + *(void *)(v5 + 16));
      }
      else {
        BOOL v7 = 0;
      }
      if (v7) {
        goto LABEL_33;
      }
      uint64_t v8 = v6;
      unsigned int v18 = v6;
      if (v6)
      {
        if (v4 < v4 + 27616)
        {
          uint64_t v9 = _RTPTransport_ParseVTPPacket(v4, a2, v6);
          uint64_t v10 = v9;
          if ((v9 & 0x80000000) != 0)
          {
            if (v9 != -2147418057 && v9 != -2145255367 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _RTPSocketRTPAndBBNoteCallback_cold_2();
              }
            }
            goto LABEL_19;
          }
          uint64_t v11 = *(void *)(v4 + 10504);
          if (v11)
          {
            (*(void (**)(uint64_t, void, _DWORD *))(v11 + 16))(v11, *(void *)(v4 + 10496), v8);
            goto LABEL_19;
          }
          uint64_t v10 = 2147549186;
          if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
            goto LABEL_19;
          }
          uint64_t v17 = VRTraceErrorLogLevelToCSTR();
          uint64_t v15 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v20 = v17;
          __int16 v21 = 2080;
          __int16 v22 = "_RTPSocketRTPAndBBNoteCallback";
          __int16 v23 = 1024;
          int v24 = 3087;
          unsigned int v16 = " [%s] %s:%d callback is NULL";
          goto LABEL_31;
        }
LABEL_33:
        __break(0x5519u);
      }
    }
    else
    {
      unsigned int v18 = 0;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 5)
    {
      uint64_t v10 = 2147549187;
      goto LABEL_19;
    }
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    uint64_t v15 = *MEMORY[0x1E4F47A50];
    uint64_t v10 = 2147549187;
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
LABEL_19:
      _RTPReleaseRTPPacketInternal(v4, &v18);
      CheckOutHandleDebug();
      return v10;
    }
    *(_DWORD *)CMTime buf = 136315650;
    uint64_t v20 = v14;
    __int16 v21 = 2080;
    __int16 v22 = "_RTPSocketRTPAndBBNoteCallback";
    __int16 v23 = 1024;
    int v24 = 3081;
    unsigned int v16 = " [%s] %s:%d Failed to allocate RTP packet";
LABEL_31:
    _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 0x1Cu);
    goto LABEL_19;
  }
  uint64_t v10 = 2147549186;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _RTPSocketRTPAndBBNoteCallback_cold_1();
    }
  }
  return v10;
}

uint64_t RTPGetReceiveStatus(uint64_t a1, unsigned int *a2, int a3, unsigned int a4)
{
  *(void *)&long long v37 = *MEMORY[0x1E4F143B8];
  uint64_t result = 2147549186;
  if (a1)
  {
    uint64_t v6 = a2;
    if (a2)
    {
      if (a3)
      {
        memset(v36, 0, sizeof(v36));
        if (a3 >= 1)
        {
          unsigned int v33 = -2147418110;
          uint64_t v7 = 0;
          *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v35[7] = v8;
          v35[8] = v8;
          v35[5] = v8;
          v35[6] = v8;
          v35[3] = v8;
          v35[4] = v8;
          uint64_t v9 = a3;
          uint64_t v10 = 8 * a3;
          v35[1] = v8;
          v35[2] = v8;
          int v34 = -1;
          uint64_t v11 = a2;
          v35[0] = v8;
          do
          {
            uint64_t v12 = CheckInHandleDebug();
            int v13 = (char *)v35 + v7;
            if ((_OWORD *)((char *)v35 + v7) >= v36 || (_OWORD *)((char *)v35 + v7) < v35) {
              goto LABEL_68;
            }
            *(void *)int v13 = v12;
            if (v12)
            {
              unsigned int v14 = *v11;
              if ((*v11 & 0x10) != 0)
              {
                unint64_t v15 = *(unsigned int *)(v12 + 4);
                if (v15 <= 0x3FF)
                {
                  if (__darwin_check_fd_set_overflow(*(_DWORD *)(v12 + 4), v36, 0))
                  {
                    unsigned int v16 = (long long *)((char *)v36 + ((v15 >> 3) & 0x1FFFFFFC));
                    if (v16 >= &v37 || v16 < v36) {
                      goto LABEL_68;
                    }
                    *(_DWORD *)v16 |= 1 << v15;
                  }
                  uint64_t v12 = *(void *)v13;
                  int v17 = v34;
                  if (*(_DWORD *)(*(void *)v13 + 4) > v34) {
                    int v17 = *(_DWORD *)(*(void *)v13 + 4);
                  }
                  int v34 = v17;
                  unsigned int v14 = *v11;
                }
              }
              if ((v14 & 0x20) != 0)
              {
                unint64_t v18 = *(unsigned int *)(v12 + 8);
                if (v18 <= 0x3FF)
                {
                  if (__darwin_check_fd_set_overflow(*(_DWORD *)(v12 + 8), v36, 0))
                  {
                    uint64_t v19 = (long long *)((char *)v36 + ((v18 >> 3) & 0x1FFFFFFC));
                    if (v19 >= &v37 || v19 < v36) {
                      goto LABEL_68;
                    }
                    *(_DWORD *)v19 |= 1 << v18;
                  }
                  int v20 = v34;
                  if (*(_DWORD *)(*(void *)v13 + 8) > v34) {
                    int v20 = *(_DWORD *)(*(void *)v13 + 8);
                  }
                  int v34 = v20;
                }
              }
            }
            else
            {
              *uint64_t v11 = 0;
            }
            ++v11;
            v7 += 8;
          }
          while (v10 != v7);
          unsigned int v21 = v34;
          if (v34 != -1)
          {
            if (a4 <= 0x3FF)
            {
              if (v34 <= (int)a4) {
                unsigned int v21 = a4;
              }
              if (__darwin_check_fd_set_overflow(a4, v36, 0))
              {
                __int16 v22 = (long long *)((char *)v36 + 4 * (a4 >> 5));
                if (v22 >= &v37 || v22 < v36) {
LABEL_68:
                }
                  __break(0x5519u);
                *(_DWORD *)v22 |= 1 << a4;
              }
            }
            if (VTP_Select(v21 + 1, v36, 0, 0, 0) == -1)
            {
              unsigned int v33 = *__error() | 0xC0010000;
              goto LABEL_60;
            }
            uint64_t v23 = v9;
            int v24 = v35;
            while (1)
            {
              if (v24 >= v36 || v24 < v35) {
                goto LABEL_68;
              }
              if (!*(void *)v24) {
                goto LABEL_57;
              }
              unsigned int v25 = *v6;
              if ((*v6 & 0x10) == 0) {
                goto LABEL_49;
              }
              unint64_t v26 = *(unsigned int *)(*(void *)v24 + 4);
              if (v26 > 0x3FF) {
                goto LABEL_49;
              }
              if (__darwin_check_fd_set_overflow(*(_DWORD *)(*(void *)v24 + 4), v36, 0))
              {
                int v27 = (long long *)((char *)v36 + ((v26 >> 3) & 0x1FFFFFFC));
                if (v27 >= &v37 || v27 < v36) {
                  goto LABEL_68;
                }
                if ((*(_DWORD *)v27 >> v26)) {
                  break;
                }
              }
              unsigned int v30 = *v6 & 0xFFFFFFEF;
              *uint64_t v6 = v30;
              if ((v30 & 0x20) != 0)
              {
LABEL_50:
                unint64_t v28 = *(unsigned int *)(*(void *)v24 + 8);
                if (v28 <= 0x3FF)
                {
                  if (!__darwin_check_fd_set_overflow(*(_DWORD *)(*(void *)v24 + 8), v36, 0)) {
                    goto LABEL_55;
                  }
                  int v29 = (long long *)((char *)v36 + ((v28 >> 3) & 0x1FFFFFFC));
                  if (v29 >= &v37 || v29 < v36) {
                    goto LABEL_68;
                  }
                  if (((*(_DWORD *)v29 >> v28) & 1) == 0) {
LABEL_55:
                  }
                    *v6 &= ~0x20u;
                }
              }
LABEL_57:
              ++v6;
              int v24 = (long long *)((char *)v24 + 8);
              if (!--v23)
              {
                unsigned int v33 = 0;
                goto LABEL_60;
              }
            }
            unsigned int v25 = *v6;
LABEL_49:
            if ((v25 & 0x20) != 0) {
              goto LABEL_50;
            }
            goto LABEL_57;
          }
LABEL_60:
          int v31 = v35;
          do
          {
            if (v31 >= v36 || v31 < v35) {
              goto LABEL_68;
            }
            if (*(void *)v31) {
              CheckOutHandleDebug();
            }
            a1 += 8;
            int v31 = (long long *)((char *)v31 + 8);
            --v9;
          }
          while (v9);
          return v33;
        }
      }
    }
  }
  return result;
}

uint64_t RTPGetLocalSSRC(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  if (a2) {
    *a2 = *(_DWORD *)(v3 + 200);
  }
  CheckOutHandleDebug();
  return 0;
}

unint64_t RTPSetRemoteSSRC(uint64_t a1, int a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147549185;
  unint64_t result = CheckInHandleDebug();
  if (!result) {
    return 2147549186;
  }
  unint64_t v5 = result;
  *(_DWORD *)(result + 8_Block_object_dispose(&STACK[0x250], 8) = 1;
  *(_DWORD *)(result + 4832) = a2;
  if (result < result + 27616)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(result + 8844));
    *(_DWORD *)(v5 + 7640) = a2;
    *(unsigned char *)(v5 + 8840) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 8844));
    *(_DWORD *)(v5 + 8520) = a2;
    *(_DWORD *)(v5 + 7004) = 0;
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6 != -1)
    {
      VTP_SetRemoteSSRC(v6, a2);
      VTP_SetRemoteSSRC(*(_DWORD *)(v5 + 8), a2);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        long long v8 = *MEMORY[0x1E4F47A50];
        uint64_t v3 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
LABEL_33:
          CheckOutHandleDebug();
          return v3;
        }
        int v9 = *(_DWORD *)(v5 + 4);
        int v10 = *(_DWORD *)(v5 + 8);
        int v30 = 136316674;
        uint64_t v31 = v7;
        __int16 v32 = 2080;
        unsigned int v33 = "RTPSetRemoteSSRC";
        __int16 v34 = 1024;
        int v35 = 3220;
        __int16 v36 = 1024;
        int v37 = v9;
        __int16 v38 = 1024;
        int v39 = v10;
        __int16 v40 = 1024;
        int v41 = a2;
        __int16 v42 = 1024;
        int v43 = a2;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPSetRemoteSSRC [%d/%d]: SSRC = 0x%X(%u)", (uint8_t *)&v30, 0x34u);
      }
      uint64_t v3 = 0;
      goto LABEL_33;
    }
    if (!*(_DWORD *)(v5 + 4832))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPSetRemoteSSRC_cold_1();
        }
      }
      goto LABEL_30;
    }
    uint64_t v11 = *MEMORY[0x1E4F1CF80];
    CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(v5 + 4832));
    if (!v12)
    {
      uint64_t v3 = 2147549187;
LABEL_30:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v28 = VRTraceErrorLogLevelToCSTR();
        int v29 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v30 = 136316162;
          uint64_t v31 = v28;
          __int16 v32 = 2080;
          unsigned int v33 = "RTPSetRemoteSSRC";
          __int16 v34 = 1024;
          int v35 = 3223;
          __int16 v36 = 1024;
          int v37 = a2;
          __int16 v38 = 1024;
          int v39 = a2;
          _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPSetRemoteSSRC: SSRC = 0x%X(%u)", (uint8_t *)&v30, 0x28u);
        }
      }
      goto LABEL_33;
    }
    CFNumberRef v14 = v12;
    uint64_t v15 = *(void *)(v5 + 11128);
    if (!v15)
    {
      uint64_t v16 = VCPacketFilterRTPCreate(v11, (void *)(v5 + 11128));
      if ((v16 & 0x80000000) != 0) {
        goto LABEL_27;
      }
      uint64_t v15 = *(void *)(v5 + 11128);
    }
    uint64_t CMBaseObject = VCPacketFilterGetCMBaseObject(v15, v13);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    int v20 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v19 + 56);
    if (!v20) {
      goto LABEL_28;
    }
    uint64_t v16 = v20(CMBaseObject, @"RTPRemoteSSRC", v14);
    if ((v16 & 0x80000000) == 0)
    {
      uint64_t v22 = *(void *)(v5 + 11136);
      if (v22) {
        goto LABEL_22;
      }
      uint64_t v23 = (uint64_t *)(v5 + 11136);
      uint64_t v16 = VCPacketFilterRTCPCreate(v11, v23);
      if ((v16 & 0x80000000) == 0)
      {
        uint64_t v22 = *v23;
LABEL_22:
        uint64_t v24 = VCPacketFilterGetCMBaseObject(v22, v21);
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        int v27 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v26 + 56);
        if (v27)
        {
          uint64_t v16 = v27(v24, @"RTCPRemoteSSRC", v14);
          goto LABEL_27;
        }
LABEL_28:
        uint64_t v3 = 4294954514;
        goto LABEL_29;
      }
    }
LABEL_27:
    uint64_t v3 = v16;
LABEL_29:
    CFRelease(v14);
    goto LABEL_30;
  }
  __break(0x5519u);
  return result;
}

void RTPSetCellularUniqueTag(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (v3)
  {
    unint64_t v4 = v3;
    if (*(_DWORD *)(v3 + 28)) {
      goto LABEL_11;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      int v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(v4 + 4);
        int v9 = 136316418;
        uint64_t v10 = v5;
        __int16 v11 = 2080;
        CFNumberRef v12 = "RTPSetCellularUniqueTag";
        __int16 v13 = 1024;
        int v14 = 3241;
        __int16 v15 = 1024;
        int v16 = v7;
        __int16 v17 = 1024;
        int v18 = a2;
        __int16 v19 = 1024;
        int v20 = a2;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPSetCellularUniqueTag vfd = %d tag = 0x%X(%u)", (uint8_t *)&v9, 0x2Eu);
      }
    }
    *(_DWORD *)(v4 + 92) = a2;
    if (!*(void *)(v4 + 11120))
    {
      int v8 = *(_DWORD *)(v4 + 4);
      if (v8 != -1) {
        VTP_SetCellularUniqueTag(v8, a2);
      }
      goto LABEL_11;
    }
    if (v4 < v4 + 27616)
    {
      _RTPSetCellularUniqueTagOnPacketFilters(v4);
LABEL_11:
      CheckOutHandleDebug();
      return;
    }
    __break(0x5519u);
  }
}

uint64_t _RTPSetCellularUniqueTagOnPacketFilters(uint64_t a1)
{
  uint64_t v1 = 2147549185;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 92))
    {
      uint64_t v3 = *MEMORY[0x1E4F1CF80];
      CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(a1 + 92));
      if (!v4) {
        return 2147549187;
      }
      CFNumberRef v6 = v4;
      uint64_t v7 = *(void *)(a1 + 11144);
      if (!v7)
      {
        int v8 = (uint64_t *)(a1 + 11144);
        uint64_t v9 = VCPacketFilterBasebandNotificationCreate(v3, v8);
        if ((v9 & 0x80000000) != 0) {
          goto LABEL_12;
        }
        uint64_t v7 = *v8;
      }
      uint64_t CMBaseObject = VCPacketFilterGetCMBaseObject(v7, v5);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      __int16 v13 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v12 + 56);
      if (!v13)
      {
        uint64_t v1 = 4294954514;
        goto LABEL_14;
      }
      uint64_t v9 = v13(CMBaseObject, @"CellularUniqueTag", v6);
LABEL_12:
      uint64_t v1 = v9;
LABEL_14:
      CFRelease(v6);
      return v1;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPSetCellularUniqueTagOnPacketFilters_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _RTPSetCellularUniqueTagOnPacketFilters_cold_1();
    }
  }
  return v1;
}

uint64_t RTPSetStreamDirection(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  uint64_t v4 = v3;
  *(_DWORD *)(v3 + 7000) = a2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    CFNumberRef v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(v4 + 4);
      int v8 = *(_DWORD *)(v4 + 8);
      int v10 = 136316674;
      uint64_t v11 = v5;
      __int16 v12 = 2080;
      __int16 v13 = "RTPSetStreamDirection";
      __int16 v14 = 1024;
      int v15 = 3266;
      __int16 v16 = 2048;
      uint64_t v17 = v4;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v8;
      __int16 v22 = 1024;
      int v23 = a2;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPSetStreamDirection [%p] [%d/%d]: Direction[%d]", (uint8_t *)&v10, 0x38u);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

unint64_t RTPTransport_SetNACKConsumer(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t result = CheckInHandleDebug();
  if (!result) {
    return 2147549186;
  }
  uint64_t v4 = (_DWORD *)result;
  *(void *)(result + 27592) = a2;
  if (!a2)
  {
    if (result >= result + 27616)
    {
      __break(0x5519u);
      return result;
    }
    int v5 = 0;
    do
    {
      unsigned int v6 = (unsigned __int16)v5;
      _RTPTransportMediaPacketHistoryCleanUp((uint64_t)v4, (unsigned __int16)v5++);
    }
    while (v6 < 0x3FF);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    int v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v9 = v4[1];
      int v10 = v4[2];
      int v11 = v4[50];
      int v12 = 136316930;
      uint64_t v13 = v7;
      __int16 v14 = 2080;
      int v15 = "RTPTransport_SetNACKConsumer";
      __int16 v16 = 1024;
      int v17 = 3332;
      __int16 v18 = 2048;
      int v19 = v4;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 1024;
      int v23 = v10;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      __int16 v26 = 1024;
      int v27 = v11;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPTransport_SetNACKConsumer [%p] [%d/%d]: nackConsumer[%p] ssrc=%u", (uint8_t *)&v12, 0x42u);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t _RTPConfigureVirtualSockets(unsigned int *a1, int a2, int a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  memset(v49, 0, sizeof(v49));
  v49[0].sa_len = 0x80;
  BOOL v6 = RTPMapPacketMultiplexModeToVTPMode(*a1);
  VTP_SetSocketMode(a2, v6);
  socklen_t v34 = 128;
  if (VTP_Getsockname(a2, v49, &v34))
  {
    uint64_t v32 = *__error() | 0xC0010000;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPConfigureVirtualSockets_cold_2();
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      int v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v38 = v7;
        __int16 v39 = 2080;
        __int16 v40 = "_RTPConfigureVirtualSockets";
        __int16 v41 = 1024;
        int v42 = 3430;
        __int16 v43 = 1024;
        int v44 = a2;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Start listening RTP on sock %d", buf, 0x22u);
      }
    }
    BOOL v9 = RTPMapPacketMultiplexModeToVTPMode(*a1);
    VTP_SetSocketMode(a3, v9);
    socklen_t v34 = 128;
    if (!VTP_Getsockname(a3, v49, &v34))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v10 = VRTraceErrorLogLevelToCSTR();
        int v11 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v38 = v10;
          __int16 v39 = 2080;
          __int16 v40 = "_RTPConfigureVirtualSockets";
          __int16 v41 = 1024;
          int v42 = 3437;
          __int16 v43 = 1024;
          int v44 = a3;
          _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Start listening RTCP on sock %d", buf, 0x22u);
        }
      }
      int v12 = a1[1];
      if (v12 != -1) {
        VTP_Close(v12);
      }
      int v13 = a1[2];
      if (v13 != -1) {
        VTP_Close(v13);
      }
      a1[1] = a2;
      a1[2] = a3;
      if (a1[7])
      {
        VTP_SetPktType(a2, 32);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v14 = VRTraceErrorLogLevelToCSTR();
          int v15 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v38 = v14;
            __int16 v39 = 2080;
            __int16 v40 = "_RTPConfigureVirtualSockets";
            __int16 v41 = 1024;
            int v42 = 3456;
            __int16 v43 = 1024;
            int v44 = a2;
            __int16 v45 = 1024;
            int v46 = 32;
            _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP  vfd (%d) accepts pkt (%04X)", buf, 0x28u);
          }
        }
        VTP_SetPktType(a3, 128);
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_27;
        }
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        int v17 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_27;
        }
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v38 = v16;
        __int16 v39 = 2080;
        __int16 v40 = "_RTPConfigureVirtualSockets";
        __int16 v41 = 1024;
        int v42 = 3458;
        __int16 v43 = 1024;
        int v44 = a3;
        __int16 v45 = 1024;
        int v46 = 128;
      }
      else
      {
        VTP_SetPktType(a2, 272);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v18 = VRTraceErrorLogLevelToCSTR();
          int v19 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v38 = v18;
            __int16 v39 = 2080;
            __int16 v40 = "_RTPConfigureVirtualSockets";
            __int16 v41 = 1024;
            int v42 = 3451;
            __int16 v43 = 1024;
            int v44 = a2;
            __int16 v45 = 1024;
            int v46 = 272;
            _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP  vfd (%d) accepts pkt (%04X)", buf, 0x28u);
          }
        }
        VTP_SetPktType(a3, 64);
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_27;
        }
        uint64_t v20 = VRTraceErrorLogLevelToCSTR();
        int v17 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_27;
        }
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v38 = v20;
        __int16 v39 = 2080;
        __int16 v40 = "_RTPConfigureVirtualSockets";
        __int16 v41 = 1024;
        int v42 = 3453;
        __int16 v43 = 1024;
        int v44 = a3;
        __int16 v45 = 1024;
        int v46 = 64;
      }
      _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTCP vfd (%d) accepts pkt (%04X)", buf, 0x28u);
LABEL_27:
      int v21 = a1[8];
      __int16 v22 = (const void *)*((void *)a1 + 5);
      if (v22 && v21 < 1) {
        __break(0x5519u);
      }
      VTP_SetPayloadList(a2, v21, v22);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v23 = VRTraceErrorLogLevelToCSTR();
        __int16 v24 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v25 = a1[7];
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v38 = v23;
          __int16 v39 = 2080;
          __int16 v40 = "_RTPConfigureVirtualSockets";
          __int16 v41 = 1024;
          int v42 = 3464;
          __int16 v43 = 1024;
          int v44 = v25;
          __int16 v45 = 1024;
          int v46 = a2;
          __int16 v47 = 1024;
          int v48 = a3;
          _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP/RTCP sockets for PayloadType %d are %d and %d", buf, 0x2Eu);
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v26 = VRTraceErrorLogLevelToCSTR();
        int v27 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v28 = a1[1];
          int v29 = a1[1208];
          unsigned int v30 = a1[23];
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v38 = v26;
          __int16 v39 = 2080;
          __int16 v40 = "_RTPConfigureVirtualSockets";
          __int16 v41 = 1024;
          int v42 = 3466;
          __int16 v43 = 1024;
          int v44 = v28;
          __int16 v45 = 1024;
          int v46 = v29;
          __int16 v47 = 1024;
          int v48 = v30;
          _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Configure RTP sockets: iSocRTP %d, dwRemoteSSRC %08X, cellularUniqueTag %d", buf, 0x2Eu);
        }
      }
      if (a1[22])
      {
        VTP_SetRemoteSSRC(a1[1], a1[1208]);
        VTP_SetRemoteSSRC(a1[2], a1[1208]);
      }
      int v31 = a1[23];
      if (v31) {
        VTP_SetCellularUniqueTag(a1[1], v31);
      }
      uint64_t v36 = 0;
      memset(v35, 0, sizeof(v35));
      SAToIPPORT();
      RTPSetDefaultCNAME((uint64_t)a1, 0, (int *)v35);
      return 0;
    }
    uint64_t v32 = *__error() | 0xC0010000;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPConfigureVirtualSockets_cold_1();
      }
    }
  }
  return v32;
}

BOOL RTPMapPacketMultiplexModeToVTPMode(BOOL result)
{
  if (!result && result != 2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      unint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      RTPMapPacketMultiplexModeToVTPMode_cold_1();
    }
    return 0;
  }
  return result;
}

void RTPSetDefaultCNAME(uint64_t a1, int *a2, int *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v40 = v6;
  long long v41 = v6;
  long long v38 = v6;
  long long v39 = v6;
  long long v36 = v6;
  long long v37 = v6;
  long long v34 = v6;
  long long v35 = v6;
  long long v32 = v6;
  long long v33 = v6;
  long long v30 = v6;
  long long v31 = v6;
  long long v28 = v6;
  long long v29 = v6;
  *(_OWORD *)__dst = v6;
  long long v27 = v6;
  uint64_t v7 = getlogin();
  if (v7) {
    int v8 = v7;
  }
  else {
    int v8 = "user";
  }
  if (a2 && IsIPPORTValid())
  {
    IPToString();
    int v9 = *a2;
LABEL_10:
    int v10 = v9 & 1;
    goto LABEL_12;
  }
  if (a3 && IsIPPORTValid())
  {
    IPToString();
    int v9 = *a3;
    goto LABEL_10;
  }
  strncpy(__dst, "hostname", 0x100uLL);
  int v10 = 0;
LABEL_12:
  int v11 = hwrandom();
  int v12 = "[";
  if (v10)
  {
    int v13 = "]";
  }
  else
  {
    int v12 = "";
    int v13 = "";
  }
  __sprintf_chk((char *)(a1 + 360), 0, 0x100uLL, "%s%08X@%s%s%s", v8, v11, v12, __dst, v13);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v17 = v14;
      __int16 v18 = 2080;
      int v19 = "RTPSetDefaultCNAME";
      __int16 v20 = 1024;
      int v21 = 3317;
      __int16 v22 = 2048;
      uint64_t v23 = a1;
      __int16 v24 = 2080;
      uint64_t v25 = a1 + 360;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d CNAME for RTP(%p) is [%s]", buf, 0x30u);
    }
  }
}

uint64_t RTPSetSockets(uint64_t a1, int a2, int a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *(void *)&v5.sa_len = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v5.sa_data[6] = 0xAAAAAAAAAAAAAAAALL;
  sockaddr v33 = v5;
  sockaddr v34 = v5;
  sockaddr v31 = v5;
  sockaddr v32 = v5;
  sockaddr v29 = v5;
  sockaddr v30 = v5;
  sockaddr v27 = v5;
  sockaddr v28 = v5;
  if (a2 == -1 || a3 == -1)
  {
    uint64_t v13 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      int v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        socklen_t v17 = 136316162;
        uint64_t v18 = v14;
        __int16 v19 = 2080;
        __int16 v20 = "RTPSetSockets";
        __int16 v21 = 1024;
        int v22 = 3492;
        __int16 v23 = 1024;
        int v24 = a2;
        __int16 v25 = 1024;
        int v26 = a3;
        _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, " [%s] %s:%d RTPSetSockets: Invalid sockets passed: rtp(%d) rtcp(%d)", (uint8_t *)&v17, 0x28u);
      }
    }
  }
  else
  {
    uint64_t v6 = CheckInHandleDebug();
    if (v6)
    {
      uint64_t v7 = (unsigned int *)v6;
      socklen_t v17 = 128;
      getsockname(a2, &v27, &v17);
      int v8 = VTP_SocketWithRealSocket(v27.sa_family, 2, 17, a2);
      if (v8 == -1)
      {
        uint64_t v13 = *__error() | 0xC0010000;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPSetSockets_cold_1();
          }
        }
        if (a2 != a3) {
          close(a2);
        }
      }
      else
      {
        int v9 = v8;
        socklen_t v17 = 128;
        getsockname(a3, &v27, &v17);
        int v10 = VTP_SocketWithRealSocket(v27.sa_family, 2, 17, a3);
        if (v10 != -1)
        {
          int v11 = v10;
          uint64_t v12 = _RTPConfigureVirtualSockets(v7, v9, v10);
          if ((v12 & 0x80000000) != 0)
          {
            uint64_t v13 = v12;
            VTP_Close(v9);
            VTP_Close(v11);
          }
          else
          {
            uint64_t v13 = 0;
          }
          goto LABEL_13;
        }
        uint64_t v13 = *__error() | 0xC0010000;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPSetSockets_cold_2();
          }
        }
        VTP_Close(v9);
      }
      close(a3);
LABEL_13:
      CheckOutHandleDebug();
      return v13;
    }
    return 2147549186;
  }
  return v13;
}

uint64_t RTPSetNWConnections(uint64_t a1, NSObject *a2)
{
  if (a2)
  {
    uint64_t v3 = CheckInHandleDebug();
    if (v3)
    {
      uint64_t v4 = (unsigned int *)v3;
      int v5 = VTP_SocketWithNWConnection(2u, 17, a2);
      if (v5 == -1)
      {
        uint64_t v10 = *__error() | 0xC0010000;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPSetNWConnections_cold_2();
          }
        }
        goto LABEL_13;
      }
      int v6 = v5;
      int v7 = VTP_SocketWithNWConnection(2u, 17, a2);
      if (v7 == -1)
      {
        uint64_t v10 = *__error() | 0xC0010000;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPSetNWConnections_cold_3();
          }
        }
        int v11 = v6;
      }
      else
      {
        int v8 = v7;
        uint64_t v9 = _RTPConfigureVirtualSockets(v4, v6, v7);
        if ((v9 & 0x80000000) == 0)
        {
          uint64_t v10 = 0;
LABEL_13:
          CheckOutHandleDebug();
          return v10;
        }
        uint64_t v10 = v9;
        VTP_Close(v6);
        int v11 = v8;
      }
      VTP_Close(v11);
      goto LABEL_13;
    }
    return 2147549186;
  }
  else
  {
    uint64_t v10 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSetNWConnections_cold_1();
      }
    }
  }
  return v10;
}

void RTPCreateSocketsForIDSInternal(unsigned int *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v2 = VTP_SocketForIDS();
  if (v2 == -1)
  {
    __error();
    if ((int)VRTraceGetErrorLogLevelForModule() > 2)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPCreateSocketsForIDSInternal_cold_1();
      }
    }
  }
  else
  {
    int v3 = v2;
    BOOL v4 = RTPMapPacketMultiplexModeToVTPMode(*a1);
    VTP_SetSocketMode(v3, v4);
    VTP_SetTransportSessionID(v3, a1[2600]);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      int v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v30 = 136315906;
        uint64_t v31 = v5;
        __int16 v32 = 2080;
        sockaddr v33 = "RTPCreateSocketsForIDSInternal";
        __int16 v34 = 1024;
        int v35 = 3588;
        __int16 v36 = 1024;
        int v37 = v3;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Start listening RTP on virtual socket %d", (uint8_t *)&v30, 0x22u);
      }
    }
    int v7 = VTP_SocketForIDS();
    if (v7 != -1)
    {
      int v8 = v7;
      BOOL v9 = RTPMapPacketMultiplexModeToVTPMode(*a1);
      VTP_SetSocketMode(v8, v9);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v10 = VRTraceErrorLogLevelToCSTR();
        int v11 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v30 = 136315906;
          uint64_t v31 = v10;
          __int16 v32 = 2080;
          sockaddr v33 = "RTPCreateSocketsForIDSInternal";
          __int16 v34 = 1024;
          int v35 = 3602;
          __int16 v36 = 1024;
          int v37 = v8;
          _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Start listening RTCP on virtual socket %d", (uint8_t *)&v30, 0x22u);
        }
      }
      int v12 = a1[1];
      if (v12 != -1) {
        VTP_Close(v12);
      }
      int v13 = a1[2];
      if (v13 != -1) {
        VTP_Close(v13);
      }
      a1[1] = v3;
      a1[2] = v8;
      if (a1[7])
      {
        VTP_SetPktType(v3, 32);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v14 = VRTraceErrorLogLevelToCSTR();
          int v15 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v30 = 136316162;
            uint64_t v31 = v14;
            __int16 v32 = 2080;
            sockaddr v33 = "RTPCreateSocketsForIDSInternal";
            __int16 v34 = 1024;
            int v35 = 3621;
            __int16 v36 = 1024;
            int v37 = v3;
            __int16 v38 = 1024;
            int v39 = 32;
            _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP  vfd (%d) accepts pkt (%04X)", (uint8_t *)&v30, 0x28u);
          }
        }
        VTP_SetPktType(v8, 128);
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_34;
        }
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        socklen_t v17 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        int v30 = 136316162;
        uint64_t v31 = v16;
        __int16 v32 = 2080;
        sockaddr v33 = "RTPCreateSocketsForIDSInternal";
        __int16 v34 = 1024;
        int v35 = 3623;
        __int16 v36 = 1024;
        int v37 = v8;
        __int16 v38 = 1024;
        int v39 = 128;
      }
      else
      {
        VTP_SetPktType(v3, 272);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v18 = VRTraceErrorLogLevelToCSTR();
          __int16 v19 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v30 = 136316162;
            uint64_t v31 = v18;
            __int16 v32 = 2080;
            sockaddr v33 = "RTPCreateSocketsForIDSInternal";
            __int16 v34 = 1024;
            int v35 = 3616;
            __int16 v36 = 1024;
            int v37 = v3;
            __int16 v38 = 1024;
            int v39 = 272;
            _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP  vfd (%d) accepts pkt (%04X)", (uint8_t *)&v30, 0x28u);
          }
        }
        VTP_SetPktType(v8, 64);
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_34;
        }
        uint64_t v20 = VRTraceErrorLogLevelToCSTR();
        socklen_t v17 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        int v30 = 136316162;
        uint64_t v31 = v20;
        __int16 v32 = 2080;
        sockaddr v33 = "RTPCreateSocketsForIDSInternal";
        __int16 v34 = 1024;
        int v35 = 3618;
        __int16 v36 = 1024;
        int v37 = v8;
        __int16 v38 = 1024;
        int v39 = 64;
      }
      _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTCP vfd (%d) accepts pkt (%04X)", (uint8_t *)&v30, 0x28u);
LABEL_34:
      int v21 = a1[8];
      int v22 = (const void *)*((void *)a1 + 5);
      if (v22 && v21 < 1)
      {
        __break(0x5519u);
      }
      else
      {
        VTP_SetPayloadList(v3, v21, v22);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v23 = VRTraceErrorLogLevelToCSTR();
          int v24 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v25 = a1[1];
            int v26 = a1[2];
            unsigned int v27 = a1[1208];
            unsigned int v28 = a1[23];
            int v30 = 136316674;
            uint64_t v31 = v23;
            __int16 v32 = 2080;
            sockaddr v33 = "RTPCreateSocketsForIDSInternal";
            __int16 v34 = 1024;
            int v35 = 3627;
            __int16 v36 = 1024;
            int v37 = v25;
            __int16 v38 = 1024;
            int v39 = v26;
            __int16 v40 = 1024;
            unsigned int v41 = v27;
            __int16 v42 = 1024;
            unsigned int v43 = v28;
            _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPCreateSocketsForIDS iSocRTP %d, iSocRTCP %d, dwRemoteSSRC %08X, cellularUniqueTag %d", (uint8_t *)&v30, 0x34u);
          }
        }
        if (a1[22])
        {
          VTP_SetRemoteSSRC(a1[1], a1[1208]);
          VTP_SetRemoteSSRC(a1[2], a1[1208]);
        }
        int v29 = a1[23];
        if (v29) {
          VTP_SetCellularUniqueTag(a1[1], v29);
        }
      }
      return;
    }
    __error();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPCreateSocketsForIDSInternal_cold_2();
      }
    }
    VTP_Close(v3);
  }
}

uint64_t RTPCreateSocketsForIDS()
{
  uint64_t v0 = (unsigned int *)CheckInHandleDebug();
  if (!v0) {
    return 2147549186;
  }
  RTPCreateSocketsForIDSInternal(v0);
  uint64_t v2 = v1;
  CheckOutHandleDebug();
  return v2;
}

void RTPCreateSocketsRetryBind(uint64_t a1, long long *a2, uint64_t a3, int *a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  int v52 = -1;
  int v53 = -1;
  memset(v69, 0, sizeof(v69));
  v69[0].sa_len = 0x80;
  if (!a2) {
    return;
  }
  socklen_t v51 = -1431655766;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v66 = v5;
  long long v67 = v5;
  unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
  if (*((unsigned char *)a2 + 36))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPCreateSocketsRetryBind_cold_1();
      }
    }
  }
  else
  {
    uint64_t v8 = CheckInHandleDebug();
    if (!v8) {
      return;
    }
    unint64_t v9 = v8;
    int v49 = a4;
    unint64_t v50 = v8 + 27616;
    long long v10 = a2[1];
    long long v66 = *a2;
    long long v67 = v10;
    unint64_t v68 = *((void *)a2 + 4);
    int v11 = 100;
    do
    {
      int v12 = CreateSocket((unsigned int *)v9, (int *)&v66, &v53);
      if (v12 < 0)
      {
        int v18 = v12;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v19 = VRTraceErrorLogLevelToCSTR();
          uint64_t v20 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v55 = v19;
            __int16 v56 = 2080;
            int v57 = "RTPCreateSocketsRetryBind";
            __int16 v58 = 1024;
            int v59 = 3692;
            __int16 v60 = 1024;
            *(_DWORD *)unint64_t v61 = v18;
            *(_WORD *)&v61[4] = 1024;
            *(_DWORD *)&v61[6] = WORD2(v68);
            _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPCreateSocketsRetryBind failed to create RTP socket: hResult(%x) port(%d)", buf, 0x28u);
          }
        }
        __int16 v17 = 2;
      }
      else
      {
        ++WORD2(v68);
        int v13 = CreateSocket((unsigned int *)v9, (int *)&v66, &v52);
        if ((v13 & 0x80000000) == 0) {
          break;
        }
        int v14 = v13;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v15 = VRTraceErrorLogLevelToCSTR();
          uint64_t v16 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v55 = v15;
            __int16 v56 = 2080;
            int v57 = "RTPCreateSocketsRetryBind";
            __int16 v58 = 1024;
            int v59 = 3687;
            __int16 v60 = 1024;
            *(_DWORD *)unint64_t v61 = v14;
            *(_WORD *)&v61[4] = 1024;
            *(_DWORD *)&v61[6] = WORD2(v68);
            _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPCreateSocketsRetryBind failed to create RTCP socket: hResult(%x) port(%d)", buf, 0x28u);
          }
        }
        VTP_Close(v53);
        __int16 v17 = 1;
      }
      WORD2(v68) += v17;
      --v11;
    }
    while (v11);
    int v21 = v52;
    int v22 = v53;
    if (v53 != -1 && v52 != -1)
    {
      socklen_t v51 = 128;
      VTP_Getsockname(v53, v69, &v51);
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v25 = VRTraceErrorLogLevelToCSTR();
        int v26 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v55 = v25;
          __int16 v56 = 2080;
          int v57 = "RTPCreateSocketsRetryBind";
          __int16 v58 = 1024;
          int v59 = 3703;
          __int16 v60 = 1024;
          *(_DWORD *)unint64_t v61 = v22;
          _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Start listening RTP on sock %d", buf, 0x22u);
        }
      }
      socklen_t v51 = 128;
      VTP_Getsockname(v21, v69, &v51);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v27 = VRTraceErrorLogLevelToCSTR();
        unsigned int v28 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v55 = v27;
          __int16 v56 = 2080;
          int v57 = "RTPCreateSocketsRetryBind";
          __int16 v58 = 1024;
          int v59 = 3707;
          __int16 v60 = 1024;
          *(_DWORD *)unint64_t v61 = v21;
          _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Start listening RTCP on sock %d", buf, 0x22u);
        }
      }
      int v29 = *(_DWORD *)(v9 + 4);
      if (v29 != -1) {
        VTP_Close(v29);
      }
      int v30 = *(_DWORD *)(v9 + 8);
      if (v30 != -1) {
        VTP_Close(v30);
      }
      *(_DWORD *)(v9 + 4) = v22;
      *(_DWORD *)(v9 + _Block_object_dispose(&STACK[0x250], 8) = v21;
      if (*(_DWORD *)(v9 + 28))
      {
        VTP_SetPktType(v22, 32);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v31 = VRTraceErrorLogLevelToCSTR();
          __int16 v32 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v55 = v31;
            __int16 v56 = 2080;
            int v57 = "RTPCreateSocketsRetryBind";
            __int16 v58 = 1024;
            int v59 = 3726;
            __int16 v60 = 1024;
            *(_DWORD *)unint64_t v61 = v22;
            *(_WORD *)&v61[4] = 1024;
            *(_DWORD *)&v61[6] = 32;
            _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP  vfd (%d) accepts pkt (%04X)", buf, 0x28u);
          }
        }
        VTP_SetPktType(v21, 128);
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_55;
        }
        uint64_t v33 = VRTraceErrorLogLevelToCSTR();
        __int16 v34 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_55;
        }
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v55 = v33;
        __int16 v56 = 2080;
        int v57 = "RTPCreateSocketsRetryBind";
        __int16 v58 = 1024;
        int v59 = 3728;
        __int16 v60 = 1024;
        *(_DWORD *)unint64_t v61 = v21;
        *(_WORD *)&v61[4] = 1024;
        *(_DWORD *)&v61[6] = 128;
      }
      else
      {
        VTP_SetPktType(v22, 272);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v35 = VRTraceErrorLogLevelToCSTR();
          __int16 v36 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v55 = v35;
            __int16 v56 = 2080;
            int v57 = "RTPCreateSocketsRetryBind";
            __int16 v58 = 1024;
            int v59 = 3721;
            __int16 v60 = 1024;
            *(_DWORD *)unint64_t v61 = v22;
            *(_WORD *)&v61[4] = 1024;
            *(_DWORD *)&v61[6] = 272;
            _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP  vfd (%d) accepts pkt (%04X)", buf, 0x28u);
          }
        }
        VTP_SetPktType(v21, 64);
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_55;
        }
        uint64_t v37 = VRTraceErrorLogLevelToCSTR();
        __int16 v34 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_55;
        }
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v55 = v37;
        __int16 v56 = 2080;
        int v57 = "RTPCreateSocketsRetryBind";
        __int16 v58 = 1024;
        int v59 = 3723;
        __int16 v60 = 1024;
        *(_DWORD *)unint64_t v61 = v21;
        *(_WORD *)&v61[4] = 1024;
        *(_DWORD *)&v61[6] = 64;
      }
      _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTCP vfd (%d) accepts pkt (%04X)", buf, 0x28u);
LABEL_55:
      int v38 = *(_DWORD *)(v9 + 32);
      int v39 = *(const void **)(v9 + 40);
      if (v39 && v38 < 1) {
        goto LABEL_70;
      }
      VTP_SetPayloadList(v22, v38, v39);
      if ((int)VRTraceGetErrorLogLevelForModule() > 6)
      {
        uint64_t v40 = VRTraceErrorLogLevelToCSTR();
        unsigned int v41 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v42 = *(_DWORD *)(v9 + 28);
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v55 = v40;
          __int16 v56 = 2080;
          int v57 = "RTPCreateSocketsRetryBind";
          __int16 v58 = 1024;
          int v59 = 3733;
          __int16 v60 = 1024;
          *(_DWORD *)unint64_t v61 = v42;
          *(_WORD *)&v61[4] = 1024;
          *(_DWORD *)&v61[6] = v22;
          *(_WORD *)uint64_t v62 = 1024;
          *(_DWORD *)&v62[2] = v21;
          _os_log_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP/RTCP sockets for PayloadType %d are %d and %d", buf, 0x2Eu);
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v43 = VRTraceErrorLogLevelToCSTR();
        uint64_t v44 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v45 = *(_DWORD *)(v9 + 4);
          int v46 = *(_DWORD *)(v9 + 4832);
          int v47 = *(_DWORD *)(v9 + 92);
          *(_DWORD *)CMTime buf = 136316674;
          uint64_t v55 = v43;
          __int16 v56 = 2080;
          int v57 = "RTPCreateSocketsRetryBind";
          __int16 v58 = 1024;
          int v59 = 3735;
          __int16 v60 = 2048;
          *(void *)unint64_t v61 = a1;
          *(_WORD *)&v61[8] = 1024;
          *(_DWORD *)uint64_t v62 = v45;
          *(_WORD *)&v62[4] = 1024;
          int v63 = v46;
          __int16 v64 = 1024;
          int v65 = v47;
          _os_log_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPCreateSockets hRTP %p, iSocRTP %d, dwRemoteSSRC %08X cellularUniqueTag %d", buf, 0x38u);
        }
      }
      if (*(_DWORD *)(v9 + 88))
      {
        VTP_SetRemoteSSRC(*(_DWORD *)(v9 + 4), *(_DWORD *)(v9 + 4832));
        VTP_SetRemoteSSRC(*(_DWORD *)(v9 + 8), *(_DWORD *)(v9 + 4832));
      }
      int v48 = *(_DWORD *)(v9 + 92);
      if (v48) {
        VTP_SetCellularUniqueTag(*(_DWORD *)(v9 + 4), v48);
      }
      if (v9 >= v50)
      {
LABEL_70:
        __break(0x5519u);
      }
      else
      {
        RTPSetDefaultCNAME(v9, (int *)a2, v49);
        CheckOutHandleDebug();
      }
      return;
    }
    if (v53 != -1) {
      VTP_Close(v53);
    }
    if (v21 != -1) {
      VTP_Close(v21);
    }
    CheckOutHandleDebug();
  }
}

uint64_t CreateSocket(unsigned int *a1, int *a2, int *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45[1] = v6;
  v45[2] = v6;
  v45[0] = v6;
  memset(v30, 170, 6);
  unsigned int v28 = (addrinfo *)0xAAAAAAAAAAAAAAAALL;
  int v7 = *a2;
  if (*a2) {
    int ai_family = 30;
  }
  else {
    int ai_family = 2;
  }
  if (v7) {
    int v9 = 125;
  }
  else {
    int v9 = 25;
  }
  memset(&v29.ai_socktype, 0, 40);
  v29.ai_CMTimeFlags flags = 1;
  v29.int ai_family = ai_family;
  v29.ai_socktype = 2;
  IPToString();
  __sprintf_chk(v30, 0, 6uLL, "%u", *((unsigned __int16 *)a2 + 18));
  int v10 = getaddrinfo((const char *)v45, v30, &v29, &v28);
  if (v10 || (int v11 = v28) == 0)
  {
    uint64_t v14 = v10 | 0xB0010000;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      uint64_t v16 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v32 = v15;
        __int16 v33 = 2080;
        __int16 v34 = "CreateSocket";
        __int16 v35 = 1024;
        int v36 = 3363;
        __int16 v37 = 1024;
        int v38 = 3363;
        __int16 v39 = 2080;
        uint64_t v40 = (char *)v45;
        __int16 v41 = 2080;
        int v42 = v30;
        __int16 v43 = 1024;
        int v44 = v14;
        _os_log_error_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: getaddrinfo(%s,%s) failed(%08X)", buf, 0x3Cu);
      }
    }
    return v14;
  }
  int v12 = (v7 << 31 >> 31) & 0x29;
  int v13 = v28;
  while (v13->ai_family != ai_family)
  {
    int v13 = v13->ai_next;
    if (!v13)
    {
      int ai_family = v28->ai_family;
      goto LABEL_17;
    }
  }
  int v11 = v13;
LABEL_17:
  int v17 = VTP_Socket(ai_family, v11->ai_socktype, v11->ai_protocol);
  if (v17 == -1)
  {
    uint64_t v14 = *__error() | 0xC0010000;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateSocket_cold_1();
      }
    }
    freeaddrinfo(v28);
    return v14;
  }
  int v18 = v17;
  BOOL v19 = RTPMapPacketMultiplexModeToVTPMode(*a1);
  uint64_t result = VTP_SetSocketMode(v18, v19);
  unint64_t ai_addr = (unint64_t)v11->ai_addr;
  uint64_t ai_addrlen = v11->ai_addrlen;
  if (!ai_addr || ai_addr < ai_addr + ai_addrlen)
  {
    int v23 = VTP_BindNew(v18, ai_addr, ai_addrlen);
    int v24 = (const char *)(a2 + 1);
    VTP_DetectNAT64Prefix(v18, v24);
    freeaddrinfo(v28);
    if (v23 == -1)
    {
      uint64_t v14 = *__error() | 0xC0010000;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v25 = VRTraceErrorLogLevelToCSTR();
        int v26 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v32 = v25;
          __int16 v33 = 2080;
          __int16 v34 = "CreateSocket";
          __int16 v35 = 1024;
          int v36 = 3392;
          __int16 v37 = 1024;
          int v38 = 3392;
          __int16 v39 = 2080;
          uint64_t v40 = v30;
          __int16 v41 = 1024;
          LODWORD(v42) = v14;
          _os_log_error_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: bind on %s failed(%08X)", buf, 0x32u);
        }
      }
    }
    else
    {
      if (!*v24 || (unsigned int v27 = if_nametoindex(v24)) == 0 || !VTP_Setsockopt(v18, v12, v9, &v27, 4u))
      {
        uint64_t v14 = 0;
        *a3 = v18;
        return v14;
      }
      uint64_t v14 = *__error() | 0xC0010000;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          CreateSocket_cold_2();
        }
      }
    }
    VTP_Close(v18);
    return v14;
  }
  __break(0x5519u);
  return result;
}

uint64_t RTPSetCName(int a1, unsigned char *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = CheckInHandleDebug();
  if (!v4) {
    return 2147549186;
  }
  if (*a2)
  {
    uint64_t v5 = v4 + 360;
    __strlcpy_chk();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      int v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136316162;
        uint64_t v10 = v6;
        __int16 v11 = 2080;
        int v12 = "RTPSetCName";
        __int16 v13 = 1024;
        int v14 = 3775;
        __int16 v15 = 1024;
        int v16 = a1;
        __int16 v17 = 2080;
        uint64_t v18 = v5;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d CNAME for RTP Handle(%d) is [%s]", (uint8_t *)&v9, 0x2Cu);
      }
    }
  }
  CheckOutHandleDebug();
  return 0;
}

void RTPCreateSockets(uint64_t a1, uint64_t a2, int *a3, int *a4, int *a5)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  memset(v63, 170, 6);
  memset(v73, 0, sizeof(v73));
  v73[0].sa_len = 0x80;
  uint64_t v10 = CheckInHandleDebug();
  if (!v10) {
    return;
  }
  __int16 v11 = (unsigned int *)v10;
  socklen_t v62 = -1431655766;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v74[0] = v12;
  v74[1] = v12;
  v74[2] = v12;
  __int16 v60 = (addrinfo *)0xAAAAAAAAAAAAAAAALL;
  if (*(_DWORD *)a2) {
    int v13 = 30;
  }
  else {
    int v13 = 2;
  }
  memset(&v61.ai_socktype, 0, 40);
  v61.ai_CMTimeFlags flags = 1;
  v61.int ai_family = v13;
  v61.ai_socktype = 2;
  IPToString();
  __sprintf_chk(v63, 0, 6uLL, "%u", *(unsigned __int16 *)(a2 + 36));
  int v14 = getaddrinfo((const char *)v74, v63, &v61, &v60);
  if (v14 || (__int16 v15 = v60) == 0)
  {
    unsigned int v18 = v14 | 0xB0010000;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v19 = VRTraceErrorLogLevelToCSTR();
      uint64_t v20 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v65 = v19;
        __int16 v66 = 2080;
        long long v67 = "RTPCreateSockets";
        __int16 v68 = 1024;
        int v69 = 3815;
        __int16 v70 = 1024;
        LODWORD(v71) = 3815;
        WORD2(v71) = 2080;
        *(void *)((char *)&v71 + 6) = v74;
        HIWORD(v71) = 2080;
        *(void *)uint64_t v72 = v63;
        *(_WORD *)&v72[8] = 1024;
        *(_DWORD *)&v72[10] = v18;
        _os_log_error_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: getaddrinfo(%s,%s) failed(%08X)", buf, 0x3Cu);
      }
    }
    goto LABEL_48;
  }
  int v16 = v60;
  while (v16->ai_family != v13)
  {
    int v16 = v16->ai_next;
    if (!v16)
    {
      int ai_family = v60->ai_family;
      goto LABEL_16;
    }
  }
  int ai_family = v13;
  __int16 v15 = v16;
LABEL_16:
  int v21 = VTP_Socket(ai_family, v15->ai_socktype, v15->ai_protocol);
  if (v21 == -1)
  {
    __error();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPCreateSockets_cold_1();
      }
    }
    freeaddrinfo(v60);
    goto LABEL_48;
  }
  int v22 = v21;
  BOOL v23 = RTPMapPacketMultiplexModeToVTPMode(*v11);
  VTP_SetSocketMode(v22, v23);
  VTP_DetectNAT64Prefix(v22, (const char *)(a2 + 4));
  freeaddrinfo(v60);
  __sprintf_chk(v63, 0, 6uLL, "%u", *(unsigned __int16 *)(a2 + 36));
  int v24 = getaddrinfo((const char *)v74, v63, &v61, &v60);
  if (v24 || (uint64_t v25 = v60) == 0)
  {
    unsigned int v27 = v24 | 0xB0010000;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      addrinfo v29 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v65 = v28;
        __int16 v66 = 2080;
        long long v67 = "RTPCreateSockets";
        __int16 v68 = 1024;
        int v69 = 3853;
        __int16 v70 = 1024;
        LODWORD(v71) = 3853;
        WORD2(v71) = 2080;
        *(void *)((char *)&v71 + 6) = v74;
        HIWORD(v71) = 2080;
        *(void *)uint64_t v72 = v63;
        *(_WORD *)&v72[8] = 1024;
        *(_DWORD *)&v72[10] = v27;
        _os_log_error_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: getaddrinfo(%s,%s) failed(%08X)", buf, 0x3Cu);
      }
    }
    goto LABEL_47;
  }
  int v26 = v60;
  while (v26->ai_family != v13)
  {
    int v26 = v26->ai_next;
    if (!v26)
    {
      int v13 = v60->ai_family;
      goto LABEL_31;
    }
  }
  uint64_t v25 = v26;
LABEL_31:
  int v30 = VTP_Socket(v13, v25->ai_socktype, v25->ai_protocol);
  if (v30 == -1)
  {
    __error();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPCreateSockets_cold_2();
      }
    }
    freeaddrinfo(v60);
LABEL_47:
    VTP_Close(v22);
LABEL_48:
    CheckOutHandleDebug();
    return;
  }
  int v31 = v30;
  BOOL v32 = RTPMapPacketMultiplexModeToVTPMode(*v11);
  VTP_SetSocketMode(v31, v32);
  VTP_DetectNAT64Prefix(v31, (const char *)(a2 + 4));
  freeaddrinfo(v60);
  int v33 = v11[1];
  if (v33 != -1) {
    VTP_Close(v33);
  }
  int v34 = v11[2];
  if (v34 != -1) {
    VTP_Close(v34);
  }
  v11[1] = v22;
  v11[2] = v31;
  socklen_t v62 = 128;
  VTP_Getsockname(v22, v73, &v62);
  socklen_t v62 = 128;
  VTP_Getsockname(v31, v73, &v62);
  if (v11[7])
  {
    VTP_SetPktType(v22, 32);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v35 = VRTraceErrorLogLevelToCSTR();
      int v36 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v65 = v35;
        __int16 v66 = 2080;
        long long v67 = "RTPCreateSockets";
        __int16 v68 = 1024;
        int v69 = 3911;
        __int16 v70 = 1024;
        LODWORD(v71) = v22;
        WORD2(v71) = 1024;
        *(_DWORD *)((char *)&v71 + 6) = 32;
        _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP  vfd (%d) accepts pkt (%04X)", buf, 0x28u);
      }
    }
    VTP_SetPktType(v31, 128);
    if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
      goto LABEL_56;
    }
    uint64_t v37 = VRTraceErrorLogLevelToCSTR();
    int v38 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    *(_DWORD *)CMTime buf = 136316162;
    uint64_t v65 = v37;
    __int16 v66 = 2080;
    long long v67 = "RTPCreateSockets";
    __int16 v68 = 1024;
    int v69 = 3914;
    __int16 v70 = 1024;
    LODWORD(v71) = v31;
    WORD2(v71) = 1024;
    *(_DWORD *)((char *)&v71 + 6) = 128;
  }
  else
  {
    VTP_SetPktType(v22, 272);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v39 = VRTraceErrorLogLevelToCSTR();
      uint64_t v40 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v65 = v39;
        __int16 v66 = 2080;
        long long v67 = "RTPCreateSockets";
        __int16 v68 = 1024;
        int v69 = 3904;
        __int16 v70 = 1024;
        LODWORD(v71) = v22;
        WORD2(v71) = 1024;
        *(_DWORD *)((char *)&v71 + 6) = 16;
        _os_log_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP  vfd (%d) accepts pkt (%04X)", buf, 0x28u);
      }
    }
    VTP_SetPktType(v31, 64);
    if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
      goto LABEL_56;
    }
    uint64_t v41 = VRTraceErrorLogLevelToCSTR();
    int v38 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    *(_DWORD *)CMTime buf = 136316162;
    uint64_t v65 = v41;
    __int16 v66 = 2080;
    long long v67 = "RTPCreateSockets";
    __int16 v68 = 1024;
    int v69 = 3907;
    __int16 v70 = 1024;
    LODWORD(v71) = v31;
    WORD2(v71) = 1024;
    *(_DWORD *)((char *)&v71 + 6) = 64;
  }
  _os_log_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTCP vfd (%d) accepts pkt (%04X)", buf, 0x28u);
LABEL_56:
  int v42 = v11[8];
  __int16 v43 = (const void *)*((void *)v11 + 5);
  if (!v43 || v42 >= 1)
  {
    VTP_SetPayloadList(v22, v42, v43);
    if ((int)VRTraceGetErrorLogLevelForModule() > 6)
    {
      uint64_t v44 = VRTraceErrorLogLevelToCSTR();
      int v45 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v46 = v11[7];
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v65 = v44;
        __int16 v66 = 2080;
        long long v67 = "RTPCreateSockets";
        __int16 v68 = 1024;
        int v69 = 3919;
        __int16 v70 = 1024;
        LODWORD(v71) = v46;
        WORD2(v71) = 1024;
        *(_DWORD *)((char *)&v71 + 6) = v22;
        WORD5(v71) = 1024;
        HIDWORD(v71) = v31;
        _os_log_impl(&dword_1E1EA4000, v45, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP/RTCP sockets for PayloadType %d are %d and %d", buf, 0x2Eu);
      }
    }
    *a4 = v31;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v47 = VRTraceErrorLogLevelToCSTR();
      int v48 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v49 = v11[1];
        unsigned int v50 = v11[1208];
        unsigned int v51 = v11[23];
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v65 = v47;
        __int16 v66 = 2080;
        long long v67 = "RTPCreateSockets";
        __int16 v68 = 1024;
        int v69 = 3923;
        __int16 v70 = 2048;
        *(void *)&long long v71 = a1;
        WORD4(v71) = 1024;
        *(_DWORD *)((char *)&v71 + 10) = v49;
        HIWORD(v71) = 1024;
        *(_DWORD *)uint64_t v72 = v50;
        *(_WORD *)&v72[4] = 1024;
        *(_DWORD *)&v72[6] = v51;
        _os_log_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPCreateSockets hRTP %p, iSocRTP %d, dwRemoteSSRC %08X cellularUniquetag %d", buf, 0x38u);
      }
    }
    if (v11[22])
    {
      VTP_SetRemoteSSRC(v11[1], v11[1208]);
      VTP_SetRemoteSSRC(v11[2], v11[1208]);
    }
    int v52 = v11[23];
    if (v52) {
      VTP_SetCellularUniqueTag(v11[1], v52);
    }
    uint64_t v53 = *((void *)v11 + 1295);
    if (v53 != 0xFFFFFFFFLL)
    {
      int v54 = VTP_SetAFRC(v11[1], v53);
      if (v54)
      {
        int v55 = v54;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v56 = VRTraceErrorLogLevelToCSTR();
          int v57 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v58 = v11[1];
            uint64_t v59 = *((void *)v11 + 1295);
            *(_DWORD *)CMTime buf = 136316674;
            uint64_t v65 = v56;
            __int16 v66 = 2080;
            long long v67 = "RTPCreateSockets";
            __int16 v68 = 1024;
            int v69 = 3940;
            __int16 v70 = 1024;
            LODWORD(v71) = v55;
            WORD2(v71) = 2048;
            *(void *)((char *)&v71 + 6) = a1;
            HIWORD(v71) = 1024;
            *(_DWORD *)uint64_t v72 = v58;
            *(_WORD *)&v72[4] = 2048;
            *(void *)&v72[6] = v59;
            _os_log_impl(&dword_1E1EA4000, v57, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPCreateSocket:VTP_SetAFRC failed with %d for hRTP/iSocRTP: %p/%d hAFRC %p ", buf, 0x3Cu);
          }
        }
      }
    }
    if (v11 < v11 + 6904)
    {
      RTPSetDefaultCNAME((uint64_t)v11, a3, a5);
      goto LABEL_48;
    }
  }
  __break(0x5519u);
}

uint64_t RTPSetMediaQueue(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147549186;
  }
  uint64_t v6 = v5;
  *(void *)(v5 + 10352) = a3;
  if (!*(_DWORD *)(v5 + 28))
  {
    MediaQueue_SetThrottlingAudioInterval(a1);
    MediaQueue_SetThrottlingIsIPv6(*(void *)(v6 + 10352), *(_DWORD *)(v6 + 12) != 0);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetVCMediaQueue(uint64_t a1, const void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v3 + 10440), a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetStatisticsCollector(uint64_t a1, const void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v3 + 10424), a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetBasebandCongestionDetector(uint64_t a1, const void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v3 + 10432), a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetAFRCHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = CheckInHandleDebug();
  if (!v4) {
    return 2147549186;
  }
  uint64_t v5 = v4;
  *(void *)(v4 + 10360) = a2;
  int v6 = *(_DWORD *)(v4 + 4);
  if (v6 != -1)
  {
    int v7 = VTP_SetAFRC(v6, a2);
    if (v7)
    {
      int v8 = v7;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        uint64_t v10 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *(_DWORD *)(v5 + 4);
          int v13 = 136316674;
          uint64_t v14 = v9;
          __int16 v15 = 2080;
          int v16 = "RTPSetAFRCHandle";
          __int16 v17 = 1024;
          int v18 = 4054;
          __int16 v19 = 1024;
          int v20 = v8;
          __int16 v21 = 2048;
          uint64_t v22 = a1;
          __int16 v23 = 1024;
          int v24 = v11;
          __int16 v25 = 2048;
          uint64_t v26 = a2;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTPSetAFRCHandle:VTP_SetAFRC failed with %d for hRTP/iSockRTP: %p/%d  hAFRC %p ", (uint8_t *)&v13, 0x3Cu);
        }
      }
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPGetAFRCTxInfo(uint64_t a1, _DWORD *a2, void *a3, _DWORD *a4, _DWORD *a5, void *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, BOOL *a11, _DWORD *a12)
{
  uint64_t v19 = CheckInHandleDebug();
  if (!v19) {
    return 2147549186;
  }
  uint64_t v20 = AFRCGetTxInfo(*(void *)(v19 + 10360), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  CheckOutHandleDebug();
  return v20;
}

uint64_t RTPSetAFRCTxCap(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  uint64_t v4 = *(void *)(v3 + 10360);
  if (v4 != 0xFFFFFFFFLL) {
    AFRCSetTxCap(v4, a2);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetAFRCVideoPaused(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  uint64_t v4 = *(void *)(v3 + 10360);
  if (v4 != 0xFFFFFFFFLL) {
    AFRCSetVideoPaused(v4, a2);
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetRedundantAudio(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147549186;
  }
  uint64_t v6 = MediaQueue_SetRedundantAudio(*(void *)(v5 + 10352), a2, a3);
  CheckOutHandleDebug();
  return v6;
}

uint64_t RTPGetOWRD(uint64_t a1, double *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147549185;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v4 + 10424);
      if (v6)
      {
        uint64_t v18 = 0;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v12 = 0u;
        long long v13 = 0u;
        long long v11 = 0u;
        memset(v10, 0, sizeof(v10));
        VCRateControlGetStatistics(v6, 2, (uint64_t)v10);
        uint64_t v2 = 0;
        double OWRD = *(double *)&v11;
      }
      else
      {
        uint64_t v8 = *(void *)(v5 + 10416);
        if (!v8)
        {
          uint64_t v2 = 2147549188;
          goto LABEL_9;
        }
        uint64_t v2 = 0;
        double OWRD = VCAudioReceiver_GetOWRD(v8);
      }
      *a2 = OWRD;
LABEL_9:
      CheckOutHandleDebug();
      return v2;
    }
    return 2147549186;
  }
  return v2;
}

uint64_t RTPSetOWRD(double a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CheckInHandleDebug();
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 10424);
    if (v3)
    {
      memset(&v6[2], 0, 14);
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v21 = 0;
      *(_DWORD *)uint64_t v6 = 7;
      v6[9] = 257;
      uint64_t v7 = 0x500000000;
      uint64_t v8 = 0;
      uint64_t v10 = 0;
      uint64_t v9 = 0;
      int v11 = 0;
      double v12 = a1;
      VCRateControlSetStatistics(v3, v6);
    }
    CheckOutHandleDebug();
    return 0;
  }
  else
  {
    uint64_t v4 = 2147549186;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSetOWRD_cold_1();
      }
    }
  }
  return v4;
}

uint64_t RTPSetAFRCProcessingDelay(uint64_t a1, _WORD *a2, void *a3, double a4, double a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  if (!a3) {
    return 2147549185;
  }
  double v15 = NAN;
  RTPGetOWRD(a1, &v15);
  unsigned int v9 = vcvtd_n_u64_f64(v15, 0xDuLL);
  if (v15 < 0.0) {
    unsigned int v9 = 0;
  }
  unsigned int v10 = v9;
  unsigned int v11 = vcvtd_n_u64_f64(a5 - a4, 0xAuLL);
  if (v11 <= 1) {
    unsigned int v11 = 1;
  }
  if (a4 == 0.0) {
    unsigned int v11 = 0;
  }
  HIDWORD(v17) = v10;
  DWORD1(v17) = v11;
  unint64_t v12 = MicroToNTP(a5);
  unsigned int v13 = NTPToMiddle32(v12);
  *a2 = v13 >> 6;
  WORD4(v17) = v13 >> 6;
  VCMediaControlInfoSetInfoUnserialized(a3, (const char *)&v16, 1);
  return 0;
}

uint64_t RTPPackDouble(double a1)
{
  unsigned int v1 = vcvtd_n_u64_f64(a1, 0xDuLL);
  if (a1 < 0.0) {
    return 0;
  }
  return v1;
}

uint64_t RTPGetAFRCStat(uint64_t a1, double *a2, _DWORD *a3, _DWORD *a4, int *a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v13 = 2147549186;
  uint64_t v14 = CheckInHandleDebug();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)(v14 + 10416);
    if (v16)
    {
      float AverageInterarrivalTimeForWindow = VCAudioReceiver_GetAverageInterarrivalTimeForWindow(v16);
      uint64_t v13 = AFRCGetStat(*(void *)(v15 + 10360), a2, a3, a4, a5, (int)(AverageInterarrivalTimeForWindow * 10000.0), a6, a7);
    }
    else
    {
      uint64_t v13 = 2147549201;
    }
    CheckOutHandleDebug();
  }
  return v13;
}

uint64_t RTPRecordFrameRate(double a1)
{
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2147549186;
  }
  *(double *)(v2 + 1036_Block_object_dispose(&STACK[0x250], 8) = a1;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetAFRCRecvMode(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(_DWORD *)(v3 + 10376) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPRecordKeyFrame(uint64_t a1, char a2, int a3, int a4, int a5)
{
  uint64_t v9 = CheckInHandleDebug();
  if (!v9) {
    return 2147549186;
  }
  uint64_t v10 = AFRCRecordKeyFrame(*(void *)(v9 + 10360), a2, (unsigned __int16)(*(_WORD *)(v9 + 192) + 1), a3, a4, a5);
  CheckOutHandleDebug();
  return v10;
}

uint64_t RTPGetTimeRefreshFrame(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147549186;
  }
  if (*(void *)(v5 + 10352) == 0xFFFFFFFFLL) {
    uint64_t TimeRefreshFrame = VCMediaQueue_GetTimeRefreshFrame(*(void *)(v5 + 10440), a2, a3);
  }
  else {
    uint64_t TimeRefreshFrame = MediaQueue_GetTimeRefreshFrame(*(void *)(v5 + 10352), a2, a3);
  }
  uint64_t v7 = TimeRefreshFrame;
  CheckOutHandleDebug();
  return v7;
}

uint64_t RTPGetLastEchoedMyTxTS(uint64_t a1, _DWORD *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 10424);
  if (v5)
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    VCRateControlGetStatistics(v5, 2, (uint64_t)&v8);
    if (a2) {
      *a2 = DWORD2(v9);
    }
    uint64_t EchoedMyTxTS = 0;
  }
  else
  {
    uint64_t EchoedMyTxTS = AFRCGetLastEchoedMyTxTS(*(void *)(v4 + 10360), a2);
  }
  CheckOutHandleDebug();
  return EchoedMyTxTS;
}

uint64_t RTPUpdateAudioOnlyRateChange(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  if (*(void *)(v3 + 10352) == 0xFFFFFFFFLL) {
    uint64_t v4 = VCMediaQueue_UpdateAudioOnlyRateChange(*(void *)(v3 + 10440), a2);
  }
  else {
    uint64_t v4 = MediaQueue_UpdateAudioOnlyRateChange(*(void *)(v3 + 10352), a2);
  }
  uint64_t v5 = v4;
  CheckOutHandleDebug();
  return v5;
}

uint64_t RTPResetConnectionStats()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2147549186;
  }
  if (!*(_DWORD *)(v0 + 28)) {
    AFRCMarkResetCS();
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPUpdateIsIPv6(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(_DWORD *)(v3 + 12) = a2;
  IsIPuint64_t v6 = MediaQueue_SetThrottlingIsIPv6(*(void *)(v3 + 10352), a2);
  CheckOutHandleDebug();
  return IsIPv6;
}

uint64_t RTPGetIsIPv6(uint64_t a1, BOOL *a2)
{
  if (a2)
  {
    uint64_t v3 = CheckInHandleDebug();
    if (v3)
    {
      *a2 = *(_DWORD *)(v3 + 12) != 0;
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      uint64_t v4 = 2147549186;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          RTPGetIsIPv6_cold_2();
          return 2147549186;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPGetIsIPv6_cold_1();
      }
    }
  }
  return v4;
}

uint64_t RTPUpdateConstantTransportOverhead(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(_DWORD *)(v3 + 27600) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPMarkSpecialVideoFlush(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147549186;
  }
  unint64_t v6 = v5;
  unint64_t v7 = v5 + 27616;
  uint64_t result = AFRCMarkSpecialVideoFlush(*(void *)(v5 + 10360), a2, a3);
  if (v6 < v7)
  {
    uint64_t v9 = result;
    _RTPMarkSpecialVCRCVideoFlush(v6, a3);
    CheckOutHandleDebug();
    return v9;
  }
  __break(0x5519u);
  return result;
}

uint64_t _RTPMarkSpecialVCRCVideoFlush(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)(a1 + 10424);
  if (result)
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    int v6 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    int v19 = 0;
    int v3 = 10;
    uint64_t v7 = 2;
    int v8 = a2;
    return VCRateControlSetStatistics(result, &v3);
  }
  return result;
}

uint64_t RTPLogMQFlushedPackets(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  AFRCLogMQFlushedPackets(*(void *)(v3 + 10360), a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPFlushBaseband(int a1, int a2, int a3, unsigned __int16 a4, int a5, int a6, _WORD *a7)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int v47 = a3;
  unsigned __int16 v46 = a4;
  uint64_t v12 = CheckInHandleDebug();
  if (!v12) {
    return 2147549186;
  }
  unint64_t v16 = v12;
  int v40 = a1;
  if (a2 && *(_DWORD *)(v12 + 28) == 1) {
    MediaQueue_ThrottlingFlushThrottlingQueue();
  }
  CFMutableArrayRef Mutable = (__CFDictionary *)(v16 + 27616);
  unsigned __int8 v45 = -86;
  if (*(unsigned char *)(v16 + 10380))
  {
    if (a5)
    {
      AFRCMarkSpecialAudioFlush(*(void *)(v16 + 10360), a6);
      if (v16 >= (unint64_t)Mutable) {
        goto LABEL_47;
      }
      _RTPMarkSpecialVCRCAudioFlush(v16, a6);
    }
    else
    {
      if ((int)*MEMORY[0x1E4F47A38] >= 5)
      {
        if (*(_DWORD *)(v16 + 28) == 1) {
          uint64_t v37 = "PT_VIDEO";
        }
        else {
          uint64_t v37 = "PT_AUDIO";
        }
        StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c", 4598, "RTPFlushBaseband flush from non-MQ sources for %s ", v13, v14, v15, (char)v37);
      }
      if (!*(_DWORD *)(v16 + 28)) {
        goto LABEL_39;
      }
    }
  }
  CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!theArray)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
    }
    goto LABEL_39;
  }
  int v38 = a7;
  unint64_t v39 = v16 + 27616;
  int v19 = 1;
  atomic_fetch_add_explicit(&RTPFlushBaseband_s_iTransactionID, 1u, memory_order_relaxed);
  unsigned __int8 v45 = 1;
  if (*(_DWORD *)(v16 + 28) || (int v19 = *(_DWORD *)(v16 + 48), v19 >= 1))
  {
    uint64_t v20 = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    for (uint64_t i = v19; i; --i)
    {
      if (*(_DWORD *)(v16 + 28))
      {
        LOBYTE(v22) = *(unsigned char *)(v16 + 17) & 0x7F;
      }
      else
      {
        unint64_t v23 = *(void *)(v16 + 56);
        int v24 = (int *)(v23 + v20);
        if (v23 + v20 >= v23 + 4 * *(int *)(v16 + 48) || (unint64_t)v24 < v23) {
          goto LABEL_47;
        }
        int v22 = *v24;
      }
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      char valuePtr = v22;
      CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt8Type, &valuePtr);
      CFDictionaryAddValue(Mutable, @"transportSessionBasebandQueueFlushPayloadType", v26);
      CFRelease(v26);
      CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt8Type, &v45);
      CFDictionaryAddValue(Mutable, @"transportSessionBasebandQueueFlushPayloadTypeFieldOffset", v27);
      CFRelease(v27);
      *(_WORD *)CMTime buf = RTPFlushBaseband_s_iTransactionID;
      CFNumberRef v28 = CFNumberCreate(0, kCFNumberSInt16Type, buf);
      CFDictionaryAddValue(Mutable, @"transportSessionBasebandQueueFlushTransactionID", v28);
      CFRelease(v28);
      CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt16Type, &v46);
      CFDictionaryAddValue(Mutable, @"transportSessionBasebandQueueFlushCriterion", v29);
      CFRelease(v29);
      CFNumberRef v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v47);
      CFDictionaryAddValue(Mutable, @"transportSessionBasebandQueueFlushTimestamp", v30);
      CFRelease(v30);
      CFArrayAppendValue(theArray, Mutable);
      CFRelease(Mutable);
      v20 += 4;
    }
  }
  unsigned int v43 = 1;
  int v31 = (*(uint64_t (**)(uint64_t, void, __CFArray *, unsigned int *))(v16 + 10384))(3, *(void *)(v16 + 10392), theArray, &v43);
  CFRelease(theArray);
  if (v31 < 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      CFMutableArrayRef Mutable = (__CFDictionary *)*MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPFlushBaseband_cold_2();
      }
    }
    AFRCCancelFlush();
    if (v16 < v39)
    {
LABEL_40:
      uint64_t v36 = *(void *)(v16 + 10424);
      if (v36)
      {
        long long v50 = 0uLL;
        uint64_t v49 = 0;
        memset(v51, 0, sizeof(v51));
        *(_DWORD *)CMTime buf = 10;
        VCRateControlSetStatistics(v36, buf);
      }
      goto LABEL_42;
    }
    do
    {
LABEL_47:
      __break(0x5519u);
LABEL_48:
      RTPFlushBaseband_cold_1();
LABEL_39:
      AFRCCancelFlush();
    }
    while (v16 >= (unint64_t)Mutable);
    goto LABEL_40;
  }
  if (v43 >= 2)
  {
    AFRCMarkAdditionalFlushes(*(void *)(v16 + 10360), v43 - 1);
    if (v16 < v39)
    {
      uint64_t v32 = *(void *)(v16 + 10424);
      if (v32)
      {
        *(void *)&long long v50 = 0;
        uint64_t v49 = 0;
        *((void *)&v50 + 1) = 0x100000000;
        memset(&v51[4], 0, 168);
        *(_DWORD *)CMTime buf = 10;
        *(_DWORD *)unsigned int v51 = v43 - 1;
        VCRateControlSetStatistics(v32, buf);
      }
      goto LABEL_30;
    }
    goto LABEL_47;
  }
LABEL_30:
  if (v38) {
    *int v38 = RTPFlushBaseband_s_iTransactionID;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v33 = VRTraceErrorLogLevelToCSTR();
    int v34 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = "video";
      if (!*(_DWORD *)(v16 + 28)) {
        uint64_t v35 = "audio";
      }
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v49 = v33;
      LOWORD(v50) = 2080;
      *(void *)((char *)&v50 + 2) = "RTPFlushBaseband";
      WORD5(v50) = 1024;
      HIDWORD(v50) = 4691;
      *(_WORD *)unsigned int v51 = 1024;
      *(_DWORD *)&v51[2] = v40;
      *(_WORD *)&v51[6] = 1024;
      *(_DWORD *)&v51[8] = v46;
      *(_WORD *)&v51[12] = 2080;
      *(void *)&v51[14] = v35;
      *(_WORD *)&v51[22] = 1024;
      *(_DWORD *)&unsigned char v51[24] = v45;
      _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d RTP(%08X) flushes baseband: OP(%u) PL(%s) Offset(%u) ", buf, 0x38u);
    }
  }
LABEL_42:
  CheckOutHandleDebug();
  return 0;
}

uint64_t _RTPMarkSpecialVCRCAudioFlush(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)(a1 + 10424);
  if (result)
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    uint64_t v6 = 0x300000000;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    int v3 = 10;
    uint64_t v7 = 0;
    int v8 = a2;
    return VCRateControlSetStatistics(result, &v3);
  }
  return result;
}

uint64_t RTPFlushBaseband_SpecialMQAudioTS(int a1, int a2, int a3, _WORD *a4)
{
  char v4 = a2;
  uint64_t v8 = RTPFlushBaseband(a1, 0, a2, 2u, 1, a3, a4);
  if ((int)*MEMORY[0x1E4F47A38] >= 5) {
    StallModeTracePrint_(5, (uint64_t)"", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c", 4711, "RTPFlushBaseband_SpecialMQAudioTS: issuing special AUDIO FLUSH TS %d ID: %d rate: %d ", v5, v6, v7, v4);
  }
  return v8;
}

uint64_t RTPSetCellularAudioStallState(uint64_t a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = CheckInHandleDebug();
  if (!v4) {
    return 2147549186;
  }
  unint64_t v5 = v4;
  unint64_t v6 = v4 + 27616;
  if (a2 && *(_DWORD *)(v4 + 28) == 1)
  {
    int v13 = 0;
    uint64_t result = AFRCGetKeyFrameTimestamp(*(void *)(v4 + 10360), &v13);
    if (v5 >= v6) {
      goto LABEL_20;
    }
    uint64_t v8 = *(void *)(v5 + 10424);
    if (v8)
    {
      uint64_t v26 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      VCRateControlGetStatistics(v8, 10, (uint64_t)&v14);
      if (DWORD2(v15) == 4) {
        int v13 = v18;
      }
    }
    RTPFlushBaseband(a1, 1, v13, 1u, 0, 0, 0);
    AFRCMarkSpecialVideoFlush(*(void *)(v5 + 10360), 0, 0);
    _RTPMarkSpecialVCRCVideoFlush(v5, 0);
  }
  *(unsigned char *)(v5 + 10380) = a2;
  if (*(_DWORD *)(v5 + 28))
  {
LABEL_10:
    uint64_t v9 = 0;
LABEL_18:
    CheckOutHandleDebug();
    return v9;
  }
  uint64_t result = AFRCMarkSpecialAudioFlush(*(void *)(v5 + 10360), 0);
  if (v5 < v6)
  {
    _RTPMarkSpecialVCRCAudioFlush(v5, 0);
    uint64_t v10 = *(void *)(v5 + 10352);
    if (v10 == 0xFFFFFFFFLL)
    {
      uint64_t v12 = *(void *)(v5 + 10440);
      if (!v12) {
        goto LABEL_10;
      }
      uint64_t v11 = VCMediaQueue_SetAudioStallBasebandFlushState(v12, a2, a1);
    }
    else
    {
      uint64_t v11 = MediaQueue_SetCellularAudioStallState(v10, a2);
    }
    uint64_t v9 = v11;
    goto LABEL_18;
  }
LABEL_20:
  __break(0x5519u);
  return result;
}

uint64_t RTPGetAFRCProbeSeqId(uint64_t a1, unint64_t a2, int a3, int a4, int a5, _DWORD *a6, _WORD *a7, int *a8, unsigned char *a9, int *a10)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  *a9 = 0;
  *a10 = 0;
  if (a3 < 12) {
    return 2147549192;
  }
  __int16 v12 = *(_WORD *)a2;
  if ((*(_WORD *)a2 & 0xC0) != 0x80) {
    return 2147549193;
  }
  uint64_t result = 0;
  unsigned int v17 = *(_DWORD *)(a2 + 4);
  if (a4) {
    int v18 = 48;
  }
  else {
    int v18 = 28;
  }
  unsigned int v19 = *(unsigned __int16 *)(a2 + 2);
  *a6 = v18 + a3;
  *a7 = bswap32(v19) >> 16;
  *a8 = bswap32(v17);
  if (a1 != 0xFFFFFFFFLL && a5 && (v12 & 0x10) != 0)
  {
    unint64_t v20 = a2 + a3;
    uint64_t v21 = 4 * (v12 & 0xF);
    long long v22 = (unsigned char *)(v21 + a2 + 12);
    if ((unint64_t)v22 >= v20 || (unint64_t)v22 < a2) {
      goto LABEL_42;
    }
    uint64_t result = VCMediaControlInfoRTPExtensionVersionIsValid(*v22 >> 6);
    if ((result & 1) == 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPGetAFRCProbeSeqId_cold_2();
        }
      }
      return 2147549227;
    }
    if (v21 + a2 + 13 >= v20 || (unint64_t)a3 - (v21 + 14) < 2) {
      goto LABEL_42;
    }
    unsigned int v23 = bswap32(*(unsigned __int16 *)(v21 + a2 + 14)) >> 16;
    if (a3 + (int)v21 - 12 < v23)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPGetAFRCProbeSeqId_cold_1();
        }
      }
      return 2147549227;
    }
    if ((*(unsigned char *)(v21 + a2 + 13) & 8) == 0) {
      return 0;
    }
    long long v24 = (unsigned int *)&v22[4 * (v23 - 1) + 4];
    BOOL v25 = v20 >= (unint64_t)v24 && (unint64_t)v24 >= a2;
    if (!v25 || v20 - (unint64_t)v24 < 4)
    {
LABEL_42:
      __break(0x5519u);
      return result;
    }
    unsigned int v27 = *v24;
    *a10 = bswap32(*v24);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      CFNumberRef v29 = *MEMORY[0x1E4F47A50];
      CFNumberRef v30 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = *a8;
          int v32 = (unsigned __int16)*a7;
          int v33 = *a10;
          int v37 = 136316674;
          uint64_t v38 = v28;
          __int16 v39 = 2080;
          int v40 = "RTPGetAFRCProbeSeqId";
          __int16 v41 = 1024;
          int v42 = 4862;
          __int16 v43 = 1024;
          int v44 = v31;
          __int16 v45 = 1024;
          int v46 = v32;
          __int16 v47 = 1024;
          unsigned int v48 = v27;
          __int16 v49 = 1024;
          int v50 = v33;
          _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d \t\t RTPGetAFRCProbeSeqId for VP %d/%d: net %x   id %d \n ", (uint8_t *)&v37, 0x34u);
        }
      }
      else if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        int v34 = *a8;
        int v35 = (unsigned __int16)*a7;
        int v36 = *a10;
        int v37 = 136316674;
        uint64_t v38 = v28;
        __int16 v39 = 2080;
        int v40 = "RTPGetAFRCProbeSeqId";
        __int16 v41 = 1024;
        int v42 = 4862;
        __int16 v43 = 1024;
        int v44 = v34;
        __int16 v45 = 1024;
        int v46 = v35;
        __int16 v47 = 1024;
        unsigned int v48 = v27;
        __int16 v49 = 1024;
        int v50 = v36;
        _os_log_debug_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEBUG, " [%s] %s:%d \t\t RTPGetAFRCProbeSeqId for VP %d/%d: net %x   id %d \n ", (uint8_t *)&v37, 0x34u);
      }
    }
    uint64_t result = 0;
    *a9 = 1;
  }
  return result;
}

uint64_t RTPNotifyAFRCRxEstimate(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int a5, double a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  unsigned __int16 v13 = 0;
  uint64_t v12 = 0;
  unsigned __int8 v11 = 0;
  if (a4 < 0) {
    __break(0x5519u);
  }
  uint64_t v9 = RTPGetAFRCProbeSeqId(a1, a3, a4, a5 != 0, a2 == 1, &v14, &v13, (int *)&v12 + 1, &v11, (int *)&v12);
  if (!v9) {
    AFRCCalcRxEstimate(a6, a1, a2, HIDWORD(v12), v13, v14, v11, v12);
  }
  return v9;
}

uint64_t RTPInsertAFRCProbeSeqId(int *a1, unsigned int a2, int a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (a3) {
    uint64_t v6 = 4;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = a1 + 376;
  uint64_t v8 = v6 + 4 * (a1[376] & 0xF) + 12;
  uint64_t v9 = *((void *)a1 + 198);
  if (v9)
  {
    int v10 = v8 + VCMediaControlInfoGetSize(v9);
    unsigned __int8 v11 = a1 + 1;
    uint64_t v12 = (int *)((char *)a1 + v10 + 4);
    BOOL v13 = v12 > v7 || v11 > v12;
    if (v13
      || ((int v14 = v12 + 1, v15 = *a1 - (uint64_t)v10, (char *)v7 - (char *)v12 >= v15) ? (v16 = v14 > v7) : (v16 = 1),
          !v16 ? (BOOL v17 = v11 > v14) : (BOOL v17 = 1),
          !v17 ? (BOOL v18 = (char *)v7 - (char *)(v12 + 1) >= v15) : (BOOL v18 = 0),
          !v18))
    {
LABEL_52:
      __break(0x5519u);
    }
    memmove(v14, v12, v15);
    unsigned int v54 = bswap32(a2);
    VCMediaControlInfoSetInfo(*((void **)a1 + 198), (const char *)8, (uint64_t)&v54, 4);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v19 = VRTraceErrorLogLevelToCSTR();
      unint64_t v20 = *MEMORY[0x1E4F47A50];
      uint64_t v21 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v22 = bswap32(a1[377]);
          unsigned int v23 = bswap32(*((unsigned __int16 *)a1 + 753));
          int v24 = *a1;
          int v25 = *((unsigned __int8 *)a1 + 1576);
          *(_DWORD *)CMTime buf = 136316930;
          uint64_t v56 = v19;
          __int16 v57 = 2080;
          unsigned int v58 = "RTPInsertAFRCProbeSeqId";
          __int16 v59 = 1024;
          int v60 = 4930;
          __int16 v61 = 1024;
          unsigned int v62 = v22;
          __int16 v63 = 1024;
          unsigned int v64 = HIWORD(v23);
          __int16 v65 = 1024;
          int v66 = v24;
          __int16 v67 = 1024;
          int v68 = v25;
          __int16 v69 = 1024;
          unsigned int v70 = a2;
          _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d INSERT: ^^^^^^ MP %d/%d/%d P: %d  PROBE_id: %d", buf, 0x3Au);
        }
      }
      else if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v46 = bswap32(a1[377]);
        unsigned int v47 = bswap32(*((unsigned __int16 *)a1 + 753));
        int v48 = *a1;
        int v49 = *((unsigned __int8 *)a1 + 1576);
        *(_DWORD *)CMTime buf = 136316930;
        uint64_t v56 = v19;
        __int16 v57 = 2080;
        unsigned int v58 = "RTPInsertAFRCProbeSeqId";
        __int16 v59 = 1024;
        int v60 = 4930;
        __int16 v61 = 1024;
        unsigned int v62 = v46;
        __int16 v63 = 1024;
        unsigned int v64 = HIWORD(v47);
        __int16 v65 = 1024;
        int v66 = v48;
        __int16 v67 = 1024;
        int v68 = v49;
        __int16 v69 = 1024;
        unsigned int v70 = a2;
        _os_log_debug_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEBUG, " [%s] %s:%d INSERT: ^^^^^^ MP %d/%d/%d P: %d  PROBE_id: %d", buf, 0x3Au);
      }
    }
    int v44 = 4;
    if (a3) {
      goto LABEL_46;
    }
  }
  else
  {
    char Version = VCMediaControlInfoGetVersion(0);
    char v27 = *((unsigned char *)a1 + 1620);
    *((_WORD *)a1 + 752) |= 0x10u;
    uint64_t v28 = a1 + 1;
    unint64_t v29 = (unint64_t)a1 + v6 + 4;
    if (v29 > (unint64_t)v7) {
      goto LABEL_52;
    }
    if ((unint64_t)v28 > v29) {
      goto LABEL_52;
    }
    if ((unint64_t)v7 - v29 < 0xC) {
      goto LABEL_52;
    }
    *(void *)unint64_t v29 = *(void *)v7;
    *(_DWORD *)(v29 + _Block_object_dispose(&STACK[0x250], 8) = v7[2];
    CFNumberRef v30 = (int *)((char *)v28 + v8);
    if (v7 < v30) {
      goto LABEL_52;
    }
    if (v28 > v30) {
      goto LABEL_52;
    }
    size_t v31 = *a1 - v8;
    if ((char *)v7 - (char *)v30 < v31) {
      goto LABEL_52;
    }
    char v32 = Version;
    int v33 = (int *)((char *)v28 + (v8 + 8));
    if (v33 > v7) {
      goto LABEL_52;
    }
    if (v28 > v33) {
      goto LABEL_52;
    }
    if ((char *)v7 - (char *)v33 < v31) {
      goto LABEL_52;
    }
    memmove(v33, (char *)v28 + v8, v31);
    if (v30 >= v7) {
      goto LABEL_52;
    }
    *(unsigned char *)CFNumberRef v30 = v27 & 0xF | (v32 << 6);
    int v34 = (int *)((char *)v28 + (v8 | 1));
    if (v34 >= v7) {
      goto LABEL_52;
    }
    if (v34 < v28) {
      goto LABEL_52;
    }
    *(unsigned char *)int v34 = v27 & 0xF0 | 8;
    int v35 = (char *)v28 + (v8 | 2);
    if ((unint64_t)((char *)v7 - v35) < 2) {
      goto LABEL_52;
    }
    *(_WORD *)int v35 = 256;
    int v36 = (int *)((char *)v28 + (v8 + 4));
    if (v7 < v36 || (unint64_t)((char *)v7 - (char *)v36) < 4) {
      goto LABEL_52;
    }
    *int v36 = bswap32(a2);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v37 = VRTraceErrorLogLevelToCSTR();
      uint64_t v38 = *MEMORY[0x1E4F47A50];
      __int16 v39 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v40 = bswap32(a1[377]);
          unsigned int v41 = bswap32(*((unsigned __int16 *)a1 + 753));
          int v42 = *a1;
          int v43 = *((unsigned __int8 *)a1 + 1576);
          *(_DWORD *)CMTime buf = 136316930;
          uint64_t v56 = v37;
          __int16 v57 = 2080;
          unsigned int v58 = "RTPInsertAFRCProbeSeqId";
          __int16 v59 = 1024;
          int v60 = 4980;
          __int16 v61 = 1024;
          unsigned int v62 = v40;
          __int16 v63 = 1024;
          unsigned int v64 = HIWORD(v41);
          __int16 v65 = 1024;
          int v66 = v42;
          __int16 v67 = 1024;
          int v68 = v43;
          __int16 v69 = 1024;
          unsigned int v70 = a2;
          _os_log_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d INSERT: ^^^^^^ MP %d/%d/%d P: %d  PROBE_id: %d ", buf, 0x3Au);
        }
      }
      else if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v50 = bswap32(a1[377]);
        unsigned int v51 = bswap32(*((unsigned __int16 *)a1 + 753));
        int v52 = *a1;
        int v53 = *((unsigned __int8 *)a1 + 1576);
        *(_DWORD *)CMTime buf = 136316930;
        uint64_t v56 = v37;
        __int16 v57 = 2080;
        unsigned int v58 = "RTPInsertAFRCProbeSeqId";
        __int16 v59 = 1024;
        int v60 = 4980;
        __int16 v61 = 1024;
        unsigned int v62 = v50;
        __int16 v63 = 1024;
        unsigned int v64 = HIWORD(v51);
        __int16 v65 = 1024;
        int v66 = v52;
        __int16 v67 = 1024;
        int v68 = v53;
        __int16 v69 = 1024;
        unsigned int v70 = a2;
        _os_log_debug_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEBUG, " [%s] %s:%d INSERT: ^^^^^^ MP %d/%d/%d P: %d  PROBE_id: %d ", buf, 0x3Au);
      }
    }
    int v44 = 8;
    if (a3) {
LABEL_46:
    }
      *((_WORD *)a1 + 3) = bswap32(v44 + (bswap32(*((unsigned __int16 *)a1 + 3)) >> 16)) >> 16;
  }
  *a1 += v44;
  return 1;
}

uint64_t RTPSetWRMMetricConfig(uint64_t a1, uint64_t *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147549185;
  if (a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      unint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *a2;
        int v12 = 136315906;
        uint64_t v13 = v4;
        __int16 v14 = 2080;
        size_t v15 = "RTPSetWRMMetricConfig";
        __int16 v16 = 1024;
        int v17 = 5013;
        __int16 v18 = 1024;
        int v19 = v6;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WRM: Set metric reportInterval=%d", (uint8_t *)&v12, 0x22u);
      }
    }
    uint64_t v7 = CheckInHandleDebug();
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(pthread_mutex_t **)(v7 + 10408);
      if (v9)
      {
        pthread_mutex_lock(v9 + 2);
        uint64_t v10 = *(void *)(v8 + 10408);
        *(_DWORD *)(v10 + 16) = *a2;
        pthread_mutex_unlock((pthread_mutex_t *)(v10 + 128));
      }
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147549186;
    }
  }
  return v2;
}

uint64_t RTPSetWRMMetricsCallback(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147549186;
  }
  WRMSetReportingCallback(*(void *)(v5 + 10408), a2, a3);
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetWRMCallId(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  WRMSetCallId(*(void *)(v3 + 10408), a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPUpdateWRMInfo(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7 = CheckInHandleDebug();
  if (!v7) {
    return 2147549186;
  }
  uint64_t v8 = v7;
  *(_DWORD *)(*(void *)(v7 + 10408) + 44) = *(_DWORD *)(*(void *)(v7 + 10408) + 20);
  int v9 = Middle32ToMilliSeconds(a2);
  uint64_t v10 = *(_DWORD **)(v8 + 10408);
  v10[12] = v9;
  v10[13] = a3;
  v10[22] = a4;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPSetSendTimestampRate(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  *(_DWORD *)(v3 + 316) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPProcessMediaControlInfo(uint64_t a1, void *a2, int a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147549186;
  }
  unint64_t v6 = v5;
  uint64_t v29 = 0;
  VCMediaControlInfoGetInfo(a2, (const char *)0xB, (uint64_t)&v29 + 4, 4, 0);
  VCMediaControlInfoGetInfo(a2, (const char *)0xC, (uint64_t)&v29, 4, 0);
  int v7 = 8 * v29;
  LODWORD(v29) = 8 * v29;
  if (!a3)
  {
    AFRCProcessVideoReceiveMetric(*(void *)(v6 + 10360), SHIDWORD(v29), v7);
    goto LABEL_36;
  }
  long long v27 = 0u;
  long long v28 = 0u;
  int32x4_t v26 = 0u;
  AFRCGenerateFeedbackWithControlInfo(a2, &v26);
  if (*(void *)(v6 + 10360) == 0xFFFFFFFFLL)
  {
LABEL_36:
    CheckOutHandleDebug();
    return 0;
  }
  FECFeedbackchar Version = VCMediaControlInfoGetFECFeedbackVersion(a2);
  uint64_t result = VCMediaControlInfo_IsLossStatsEnabled(FECFeedbackVersion);
  if (!*(_DWORD *)(v6 + 10336))
  {
    *(_DWORD *)(v6 + 10336) = 1;
    unsigned int v10 = DWORD2(v27);
    *(_DWORD *)(v6 + 10340) = DWORD2(v27);
    unsigned int v11 = 0;
    if ((result & 1) == 0) {
      *(_DWORD *)(v6 + 1034_Block_object_dispose(&STACK[0x250], 8) = HIDWORD(v27);
    }
    goto LABEL_22;
  }
  if (v6 < v6 + 27616)
  {
    unsigned int v10 = *(_DWORD *)(v6 + 10340);
    unsigned int v11 = ((DWORD2(v27) - v10) >> 11) & 1;
    if (((DWORD2(v27) - v10) & 0x800) == 0)
    {
      if ((*(_DWORD *)(v6 + 10340) & 0xFFFu) <= WORD4(v27)) {
        unsigned int v12 = *(_DWORD *)(v6 + 10340);
      }
      else {
        unsigned int v12 = v10 + 4096;
      }
      unsigned int v10 = v12 & 0xFFFFF000 | WORD4(v27);
      *(_DWORD *)(v6 + 10340) = v10;
    }
    DWORD2(v27) = v10;
    if ((result & 1) == 0)
    {
      unsigned int v13 = *(_DWORD *)(v6 + 10348);
      if (((HIDWORD(v27) - v13) & 0x800) == 0)
      {
        if ((*(_DWORD *)(v6 + 10348) & 0xFFFu) > WORD6(v27)) {
          v13 += 4096;
        }
        unsigned int v13 = v13 & 0xFFFFF000 | WORD6(v27);
        *(_DWORD *)(v6 + 1034_Block_object_dispose(&STACK[0x250], 8) = v13;
      }
      HIDWORD(v27) = v13;
    }
LABEL_22:
    double v25 = -1.0;
    double v14 = -1.0;
    if (result) {
      double v14 = 0.0;
    }
    double v24 = v14;
    int v22 = -1;
    int v23 = -1;
    if (v26.i32[1])
    {
      size_t v15 = &v24;
      if (result) {
        size_t v15 = 0;
      }
      MediaQueue_FindPacketInTxHistory(*(void *)(v6 + 10352), v26.u16[0], v10, 0, v27, (uint64_t)&v23, (uint64_t)&v22, *(_DWORD *)(v6 + 10348), (uint64_t)v15, (uint64_t)&v25, 0);
    }
    int v21 = 0;
    VCMediaControlInfoGetInfo(a2, (const char *)0x10, (uint64_t)&v21, 4, 0);
    double v20 = 0.0;
    VCMediaControlInfoGetInfo(a2, (const char *)0xA, (uint64_t)&v20, 8, 0);
    int v19 = 0;
    VCMediaControlInfoGetInfo(a2, (const char *)0x11, (uint64_t)&v19, 4, 0);
    if (v21) {
      char v16 = v11;
    }
    else {
      char v16 = 1;
    }
    if (v16)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v17 = VRTraceErrorLogLevelToCSTR();
        __int16 v18 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v31 = v17;
          __int16 v32 = 2080;
          int v33 = "RTPProcessMediaControlInfo";
          __int16 v34 = 1024;
          int v35 = 5178;
          __int16 v36 = 1024;
          unsigned int v37 = v11;
          __int16 v38 = 1024;
          int v39 = v21;
          _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Skip AFRCProcessFeedbackPacket, due to isFeedbackOOO = %d, receivedBytes = %d,", buf, 0x28u);
        }
      }
    }
    else
    {
      AFRCProcessFeedbackPacket(v20, v25, v24, *(void *)(v6 + 10360), (uint64_t)&v26, v19, SHIDWORD(v29), v29, v23, v22);
    }
    goto LABEL_36;
  }
  __break(0x5519u);
  return result;
}

uint64_t RTPRegisterPacketCallback(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1 == 0xFFFFFFFFLL)
  {
    uint64_t v8 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPRegisterPacketCallback_cold_1();
      }
    }
    return v8;
  }
  uint64_t v6 = CheckInHandleDebug();
  if (!v6)
  {
    uint64_t v8 = 2147549186;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        RTPRegisterPacketCallback_cold_2();
        return 2147549186;
      }
    }
    return v8;
  }
  unint64_t v7 = v6;
  if (*(void *)(v6 + 10504))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPRegisterPacketCallback_cold_4();
      }
    }
    CheckOutHandleDebug();
    return 2147549233;
  }
  uint64_t result = (uint64_t)_Block_copy(a3);
  *(void *)(v7 + 10504) = result;
  if (!result)
  {
    uint64_t v8 = 2147549188;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        RTPRegisterPacketCallback_cold_3();
        uint64_t v8 = 2147549188;
      }
    }
    goto LABEL_30;
  }
  *(void *)(v7 + 10496) = a2;
  unint64_t v10 = *(unsigned int *)(v7 + 4);
  if (v10 <= 0x3FF)
  {
    *(_OWORD *)(v7 + 10624) = 0u;
    unint64_t v11 = v7 + 10512;
    *(_OWORD *)(v7 + 1060_Block_object_dispose(&STACK[0x250], 8) = 0u;
    *(_OWORD *)(v7 + 10592) = 0u;
    *(_OWORD *)(v7 + 10576) = 0u;
    *(_OWORD *)(v7 + 10560) = 0u;
    *(_OWORD *)(v7 + 10544) = 0u;
    *(_OWORD *)(v7 + 1052_Block_object_dispose(&STACK[0x250], 8) = 0u;
    *(_OWORD *)(v7 + 10512) = 0u;
    uint64_t result = __darwin_check_fd_set_overflow(v10, (const void *)(v7 + 10512), 0);
    if (result)
    {
      unsigned int v12 = (_DWORD *)(v11 + ((v10 >> 3) & 0x1FFFFFFC));
      if ((unint64_t)v12 >= v7 + 10640 || (unint64_t)v12 < v11) {
        goto LABEL_35;
      }
      *v12 |= 1 << v10;
    }
    uint64_t v8 = 0;
    *(_DWORD *)(v7 + 1048_Block_object_dispose(&STACK[0x250], 8) = VTP_RegisterPacketCallback((_OWORD *)(v7 + 10512), a1, &__block_literal_global_20);
LABEL_30:
    CheckOutHandleDebug();
    return v8;
  }
  if (!*(void *)(v7 + 11104))
  {
    uint64_t v8 = 2147549226;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      size_t v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v16 = *(_DWORD *)(v7 + 4);
        int v17 = 136316162;
        uint64_t v18 = v14;
        __int16 v19 = 2080;
        double v20 = "RTPRegisterPacketCallback";
        __int16 v21 = 1024;
        int v22 = 5230;
        __int16 v23 = 2048;
        uint64_t v24 = a1;
        __int16 v25 = 1024;
        int v26 = v16;
        _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, " [%s] %s:%d RTPHandle[%p], Socket[%d] is invalid", (uint8_t *)&v17, 0x2Cu);
        uint64_t v8 = 2147549226;
      }
    }
    goto LABEL_30;
  }
  if (v7 < v7 + 27616)
  {
    uint64_t v8 = _RTPEnsureTransportStreamsActivated(v7);
    goto LABEL_30;
  }
LABEL_35:
  __break(0x5519u);
  return result;
}

uint64_t __RTPRegisterPacketCallback_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _RTPSocketRTPAndBBNoteCallback(a3, a4);
}

uint64_t _RTPEnsureTransportStreamsActivated(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v17 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPEnsureTransportStreamsActivated_cold_1();
      }
    }
    return v17;
  }
  uint64_t v2 = (unsigned char *)(a1 + 11101);
  if (*(unsigned char *)(a1 + 11101)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 11128);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 11104);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v5) {
      return 4294954514;
    }
    uint64_t v6 = v5(v4, v3);
    if ((v6 & 0x80000000) != 0) {
      return v6;
    }
  }
  uint64_t v7 = *(void *)(a1 + 11136);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 11112);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v9) {
      return 4294954514;
    }
    uint64_t v6 = v9(v8, v7);
    if ((v6 & 0x80000000) != 0) {
      return v6;
    }
  }
  if (*(void *)(a1 + 11120))
  {
    uint64_t v6 = _RTPSetCellularUniqueTagOnPacketFilters(a1);
    if ((v6 & 0x80000000) != 0) {
      return v6;
    }
    uint64_t v10 = *(void *)(a1 + 11120);
    uint64_t v11 = *(void *)(a1 + 11144);
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v12) {
      return 4294954514;
    }
    uint64_t v6 = v12(v10, v11);
    if ((v6 & 0x80000000) != 0) {
      return v6;
    }
  }
  uint64_t v13 = *(void *)(a1 + 11104);
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v14) {
    return 4294954514;
  }
  uint64_t v6 = v14(v13);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  uint64_t v15 = *(void *)(a1 + 11112);
  int v16 = *(uint64_t (**)(uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v16) {
    return 4294954514;
  }
  uint64_t v17 = v16(v15);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v18 = *(void *)(a1 + 11120);
  if (!v18)
  {
LABEL_20:
    *uint64_t v2 = 1;
    return v17;
  }
  __int16 v19 = *(uint64_t (**)(uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v19) {
    return 4294954514;
  }
  uint64_t v17 = v19(v18);
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_20;
  }
  return v17;
}

unint64_t RTPUnregisterPacketCallback()
{
  unint64_t result = CheckInHandleDebug();
  if (!result) {
    return 2147549186;
  }
  if (!*(void *)(result + 10504))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPUnregisterPacketCallback_cold_1();
      }
    }
    goto LABEL_9;
  }
  if (result < result + 27616)
  {
    _RTPUnregisterPacketCallback(result);
LABEL_9:
    CheckOutHandleDebug();
    return 0;
  }
  __break(0x5519u);
  return result;
}

uint64_t RTPSetTimestampRateScale(uint64_t a1, signed int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  uint64_t v4 = (_DWORD *)v3;
  if (a2 <= 7)
  {
    int v5 = dword_1E259E218[a2];
    uint64_t v6 = qword_1E259E238[a2];
    *(_DWORD *)(v3 + 296) = dword_1E259E1F8[a2];
    *(_DWORD *)(v3 + 300) = v5;
    *(void *)(v3 + 2760_Block_object_dispose(&STACK[0x250], 8) = v6;
  }
  *(void *)(v3 + 256) = *(void *)(v3 + 248);
  *(void *)(v3 + 240) = *(void *)(v3 + 232);
  *(void *)(v3 + 28_Block_object_dispose(&STACK[0x250], 8) = *(void *)(v3 + 280);
  *(void *)(v3 + 272) = *(void *)(v3 + 264);
  if (*(_DWORD *)(v3 + 228) != a2 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    uint64_t v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v9 = v4[74];
      int v10 = v4[75];
      int v12 = 136316418;
      uint64_t v13 = v7;
      __int16 v14 = 2080;
      uint64_t v15 = "RTPSetTimestampRateScale";
      __int16 v16 = 1024;
      int v17 = 5334;
      __int16 v18 = 2048;
      __int16 v19 = v4;
      __int16 v20 = 1024;
      int v21 = v9;
      __int16 v22 = 1024;
      int v23 = v10;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] Updating the network sample rate shift factors. send[%d] receive[%d]", (uint8_t *)&v12, 0x32u);
    }
  }
  v4[57] = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPCopyPreferredSendQueue(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147549185;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      if (*(void *)(v4 + 11104))
      {
        uint64_t CMBaseObject = VCPacketFilterGetCMBaseObject(*(void *)(v4 + 11104), v5);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        int v12 = *(uint64_t (**)(uint64_t, __CFString *, void, void *))(v8 + 48);
        if (v12)
        {
          uint64_t v2 = v12(CMBaseObject, @"PreferredSendQueue", *MEMORY[0x1E4F1CF80], a2);
          if ((v2 & 0x80000000) == 0)
          {
LABEL_21:
            CheckOutHandleDebug();
            return v2;
          }
        }
        else
        {
          uint64_t v2 = 4294954514;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
          goto LABEL_21;
        }
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        int v10 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_21;
        }
        int v15 = 136315906;
        uint64_t v16 = v13;
        __int16 v17 = 2080;
        __int16 v18 = "RTPCopyPreferredSendQueue";
        __int16 v19 = 1024;
        int v20 = 5379;
        __int16 v21 = 1024;
        int v22 = v2;
        uint64_t v11 = " [%s] %s:%d Getting kVCTransportStreamProperty_PreferredSendQueue failed - %x";
      }
      else
      {
        if (!VTP_CopyPreferredSendQueue(*(_DWORD *)(v4 + 4), a2))
        {
          uint64_t v2 = 0;
          goto LABEL_21;
        }
        uint64_t v2 = *__error() | 0xC0010000;
        if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
          goto LABEL_21;
        }
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        int v10 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_21;
        }
        int v15 = 136315906;
        uint64_t v16 = v9;
        __int16 v17 = 2080;
        __int16 v18 = "RTPCopyPreferredSendQueue";
        __int16 v19 = 1024;
        int v20 = 5387;
        __int16 v21 = 1024;
        int v22 = v2;
        uint64_t v11 = " [%s] %s:%d VTP_GetPreferredSendQueue failed - %x";
      }
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v15, 0x22u);
      goto LABEL_21;
    }
    return 2147549186;
  }
  return v2;
}

uint64_t RTPSetTransportStreams(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a3)
    {
      uint64_t v9 = CheckInHandleDebug();
      if (v9)
      {
        unint64_t v10 = v9;
        if (*(unsigned char *)(v9 + 11101))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          {
            uint64_t v4 = 2147549233;
          }
          else
          {
            VRTraceErrorLogLevelToCSTR();
            uint64_t v4 = 2147549233;
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              RTPSetTransportStreams_cold_4();
            }
          }
          goto LABEL_39;
        }
        v35[0] = MEMORY[0x1E4F143A8];
        v35[1] = 0x40000000;
        _OWORD v35[2] = __RTPSetTransportStreams_block_invoke;
        v35[3] = &__block_descriptor_tmp_23;
        v35[4] = a1;
        uint64_t v11 = *(uint64_t (**)(const void *, void *))(*(void *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v11)
        {
          uint64_t v12 = v11(a2, v35);
          if ((v12 & 0x80000000) != 0) {
            goto LABEL_55;
          }
          v34[0] = MEMORY[0x1E4F143A8];
          v34[1] = 0x40000000;
          v34[2] = __RTPSetTransportStreams_block_invoke_2;
          v34[3] = &__block_descriptor_tmp_24_0;
          v34[4] = a1;
          uint64_t v13 = *(uint64_t (**)(const void *, void *))(*(void *)(CMBaseObjectGetVTable() + 16) + 40);
          if (v13)
          {
            uint64_t v12 = v13(a3, v34);
            if ((v12 & 0x80000000) == 0)
            {
              CFNumberRef v14 = (CFNumberRef)(v10 + 27616);
              int v15 = (__CFString *)(v10 + 11136);
              if (*(void *)(v10 + 11136))
              {
                CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                goto LABEL_14;
              }
              if (v10 >= (unint64_t)v14) {
                goto LABEL_56;
              }
              CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              uint64_t v12 = VCPacketFilterRTCPCreate(*MEMORY[0x1E4F1CF80], (void *)(v10 + 11136));
              if ((v12 & 0x80000000) == 0)
              {
LABEL_14:
                if (v10 < (unint64_t)v14)
                {
                  CFNumberRef v17 = CFNumberCreate(v16, kCFNumberIntType, (const void *)(v10 + 200));
                  if (!v17)
                  {
                    uint64_t v4 = 2147549187;
                    goto LABEL_39;
                  }
                  CFNumberRef v14 = v17;
                  uint64_t CMBaseObject = VCPacketFilterGetCMBaseObject(v15->isa, v18);
                  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v20) {
                    uint64_t v21 = v20;
                  }
                  else {
                    uint64_t v21 = 0;
                  }
                  int v22 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v21 + 56);
                  if (v22)
                  {
                    uint64_t v4 = v22(CMBaseObject, @"RTCPLocalSSRC", v14);
                    if ((v4 & 0x80000000) != 0) {
                      goto LABEL_38;
                    }
                    if (!a4)
                    {
LABEL_24:
                      _RTPSetTransportStreamReceiveHopLimitEnabled((uint64_t)a2, *(_DWORD *)(v10 + 188) != 0);
                      CFBooleanRef BOOLean = 0;
                      uint64_t v25 = VCPacketFilterGetCMBaseObject(a2, v24);
                      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v26) {
                        uint64_t v27 = v26;
                      }
                      else {
                        uint64_t v27 = 0;
                      }
                      int v15 = @"IsIPv6";
                      long long v28 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFBooleanRef *))(v27 + 48);
                      if (!v28)
                      {
                        int v29 = -12782;
LABEL_32:
                        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                        {
                          uint64_t v32 = VRTraceErrorLogLevelToCSTR();
                          CFNumberRef v30 = *MEMORY[0x1E4F47A50];
                          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)CMTime buf = 136316162;
                            uint64_t v38 = v32;
                            __int16 v39 = 2080;
                            uint64_t v40 = "_RTPSetIsIPv6WithTransportStream";
                            __int16 v41 = 1024;
                            int v42 = 5400;
                            __int16 v43 = 2112;
                            int v44 = v15;
                            __int16 v45 = 1024;
                            int v46 = v29;
                            _os_log_error_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCTransportStreamCopyProperty %@ failed %d", buf, 0x2Cu);
                          }
                        }
                        goto LABEL_35;
                      }
                      LODWORD(v12) = v28(v25, @"IsIPv6", v16, &BOOLean);
                      if ((v12 & 0x80000000) == 0)
                      {
                        *(_DWORD *)(v10 + 12) = CFBooleanGetValue(BOOLean);
LABEL_35:
                        if (BOOLean) {
                          CFRelease(BOOLean);
                        }
                        _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v10 + 11104), a2);
                        _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v10 + 11112), a3);
                        _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v10 + 11120), a4);
                        goto LABEL_38;
                      }
LABEL_57:
                      int v29 = v12;
                      goto LABEL_32;
                    }
                    v33[0] = MEMORY[0x1E4F143A8];
                    v33[1] = 0x40000000;
                    v33[2] = __RTPSetTransportStreams_block_invoke_3;
                    v33[3] = &__block_descriptor_tmp_25;
                    v33[4] = a1;
                    uint64_t v23 = *(uint64_t (**)(const void *, void *))(*(void *)(CMBaseObjectGetVTable() + 16)
                                                                           + 40);
                    if (v23)
                    {
                      uint64_t v4 = v23(a4, v33);
                      if ((v4 & 0x80000000) == 0) {
                        goto LABEL_24;
                      }
LABEL_38:
                      CFRelease(v14);
                      goto LABEL_39;
                    }
                  }
                  uint64_t v4 = 4294954514;
                  goto LABEL_38;
                }
LABEL_56:
                __break(0x5519u);
                goto LABEL_57;
              }
            }
LABEL_55:
            uint64_t v4 = v12;
            goto LABEL_39;
          }
        }
        uint64_t v4 = 4294954514;
LABEL_39:
        CheckOutHandleDebug();
        return v4;
      }
      uint64_t v4 = 2147549186;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          RTPSetTransportStreams_cold_3();
          return 2147549186;
        }
      }
    }
    else
    {
      uint64_t v4 = 2147549185;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPSetTransportStreams_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSetTransportStreams_cold_1();
      }
    }
  }
  return v4;
}

void __RTPSetTransportStreams_block_invoke(uint64_t a1, uint64_t a2)
{
}

void _RTPTransportStreamRTPAndBBNoteCallback(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  __int16 v19 = 0;
  if (!a2)
  {
LABEL_33:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPTransportStreamRTPAndBBNoteCallback_cold_1();
      }
    }
    return;
  }
  uint64_t v4 = a2;
  uint64_t v5 = CheckInHandleDebug();
  if (v5)
  {
    unint64_t v6 = v5;
    unint64_t v7 = v5 + 27616;
    while (1)
    {
      uint64_t v8 = *(void *)(v6 + 10472);
      if (!v8) {
        break;
      }
      uint64_t v9 = VCMemoryPool_Alloc(*(OSQueueHead **)(v6 + 10472));
      if (v9) {
        BOOL v10 = v9 >= (_DWORD *)((char *)v9 + *(void *)(v8 + 16));
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        goto LABEL_32;
      }
      __int16 v19 = v9;
      if (!v9) {
        goto LABEL_28;
      }
      if (a3)
      {
        if (v6 >= v7) {
          goto LABEL_32;
        }
        int v11 = _RTPTransport_ParseBasebandNotification(v6, v4, v9);
      }
      else
      {
        if (v6 >= v7) {
          goto LABEL_32;
        }
        ++*(void *)(v6 + 336);
        int v11 = _RTPTransport_ParseMediaPacket(v6, v4, (uint64_t)v9);
      }
      int v12 = v11;
      if (v11 < 0)
      {
        if (v11 != -2147418057 && v11 != -2145255367 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v14 = VRTraceErrorLogLevelToCSTR();
          int v15 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v21 = v14;
            __int16 v22 = 2080;
            uint64_t v23 = "_RTPTransportStreamRTPAndBBNoteCallback";
            __int16 v24 = 1024;
            int v25 = 5775;
            __int16 v26 = 1024;
            int v27 = v12;
            _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, " [%s] %s:%d RTP error[%x]", buf, 0x22u);
          }
        }
      }
      else
      {
        uint64_t v13 = *(void *)(v6 + 10504);
        if (v13)
        {
          ++*(void *)(v6 + 344);
          (*(void (**)(uint64_t, void, _DWORD *))(v13 + 16))(v13, *(void *)(v6 + 10496), v19);
        }
        else
        {
          CFAllocatorRef v16 = v19;
          *((void *)v19 + 757) = 0;
          **(void **)(v6 + 1116_Block_object_dispose(&STACK[0x250], 8) = v16;
          *(void *)(v6 + 1116_Block_object_dispose(&STACK[0x250], 8) = v19 + 1514;
          __int16 v19 = 0;
        }
      }
      _RTPReleaseRTPPacketInternal(v6, &v19);
      uint64_t v4 = *(void *)(v4 + 160);
      if (!v4) {
        goto LABEL_25;
      }
    }
    __int16 v19 = 0;
LABEL_28:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      uint64_t v18 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v21 = v17;
        __int16 v22 = 2080;
        uint64_t v23 = "_RTPTransportStreamRTPAndBBNoteCallback";
        __int16 v24 = 1024;
        int v25 = 5758;
        _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Failed to allocate RTP packet", buf, 0x1Cu);
      }
    }
    if (v6 < v7)
    {
LABEL_25:
      _RTPReleaseRTPPacketInternal(v6, &v19);
      CheckOutHandleDebug();
      return;
    }
LABEL_32:
    __break(0x5519u);
    goto LABEL_33;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _RTPTransportStreamRTPAndBBNoteCallback_cold_2();
    }
  }
}

uint64_t __RTPSetTransportStreams_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return _RTPTransportStreamRTCPCallback(*(void *)(a1 + 32), a2);
}

void __RTPSetTransportStreams_block_invoke_3(uint64_t a1, uint64_t a2)
{
}

uint64_t RTPClearTransportStreams()
{
  uint64_t v0 = (void *)CheckInHandleDebug();
  if (v0)
  {
    uint64_t v1 = _RTPClearTransportStreamsInternal(v0);
    CheckOutHandleDebug();
    return v1;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPClearTransportStreams_cold_1();
      }
    }
    return 2147549186;
  }
}

uint64_t RTPGetReceiveStatusWithRunLoop(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  v44[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[7] = v4;
  v43[8] = v4;
  v43[5] = v4;
  v43[6] = v4;
  void v43[3] = v4;
  unint64_t v43[4] = v4;
  v43[1] = v4;
  v43[2] = v4;
  v43[0] = v4;
  if (a1)
  {
    if (a2)
    {
      if (a3 <= 0)
      {
        uint64_t v16 = 2147549185;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPGetReceiveStatusWithRunLoop_cold_3();
          }
        }
      }
      else
      {
        if (a4)
        {
          uint64_t v6 = a1;
          uint64_t v8 = 0;
          uint64_t v38 = a3;
          uint64_t v9 = a3;
          uint64_t v10 = 8 * a3;
          int v11 = a2;
          do
          {
            uint64_t v12 = CheckInHandleDebug();
            if ((void *)((char *)v43 + v8) >= v44 || (_OWORD *)((char *)v43 + v8) < v43) {
              goto LABEL_71;
            }
            *(void *)((char *)v43 + v_Block_object_dispose(&STACK[0x250], 8) = v12;
            if (!v12) {
              *int v11 = 0;
            }
            ++v11;
            v8 += 8;
          }
          while (v10 != v8);
          unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __unsigned __int8 src[2] = v13;
          __src[3] = v13;
          __src[0] = v13;
          __src[1] = v13;
          char v40 = 0;
          if (a3 < 0x13)
          {
            uint64_t v14 = a2;
            uint64_t v15 = _RTPSetReceiveStatusFlags(v43, a2, a3, (unsigned int *)__src, &v40);
            if ((v15 & 0x80000000) != 0)
            {
              uint64_t v16 = v15;
            }
            else if (v40)
            {
              if ((unint64_t)(4 * v38) > 0x48) {
                goto LABEL_71;
              }
              memcpy(a2, __src, 4 * v38);
              uint64_t v16 = 0;
            }
            else
            {
              CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
              if (Mutable)
              {
                uint64_t v18 = Mutable;
                for (uint64_t i = 0; i != v9; ++i)
                {
                  uint64_t v20 = (const void **)*((void *)v43 + i);
                  if (v20)
                  {
                    unsigned int v21 = v14[i];
                    uint64_t v22 = _RTPEnsureTransportStreamsActivated(*((void *)v43 + i));
                    if ((v22 & 0x80000000) != 0) {
                      goto LABEL_53;
                    }
                    if ((v21 & 0x10) != 0)
                    {
                      uint64_t v23 = v20[1388];
                      if (v23)
                      {
                        __int16 v24 = *(uint64_t (**)(uint64_t, const void *))(*(void *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
                        if (!v24) {
                          goto LABEL_39;
                        }
                        uint64_t v22 = v24(a4, v23);
                        if ((v22 & 0x80000000) != 0) {
                          goto LABEL_53;
                        }
                        CFArrayAppendValue(v18, v20[1388]);
                      }
                      int v25 = v20[1390];
                      if (v25)
                      {
                        __int16 v26 = *(uint64_t (**)(uint64_t, const void *))(*(void *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
                        if (!v26) {
                          goto LABEL_39;
                        }
                        uint64_t v22 = v26(a4, v25);
                        if ((v22 & 0x80000000) != 0) {
                          goto LABEL_53;
                        }
                        CFArrayAppendValue(v18, v20[1390]);
                      }
                    }
                    if ((v21 & 0x20) != 0)
                    {
                      int v27 = v20[1389];
                      if (v27)
                      {
                        uint64_t v28 = *(uint64_t (**)(uint64_t, const void *))(*(void *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
                        if (!v28) {
                          goto LABEL_39;
                        }
                        uint64_t v22 = v28(a4, v27);
                        if ((v22 & 0x80000000) != 0)
                        {
LABEL_53:
                          uint64_t v16 = v22;
                          goto LABEL_40;
                        }
                        CFArrayAppendValue(v18, v20[1389]);
                      }
                    }
                  }
                }
                int v29 = *(uint64_t (**)(uint64_t, double))(*(void *)(CMBaseObjectGetVTable() + 16) + 24);
                if (v29)
                {
                  uint64_t v30 = v29(a4, 0.0);
                  if ((v30 & 0x80000000) == 0) {
                    uint64_t v30 = _RTPSetReceiveStatusFlags(v43, v14, a3, v14, 0);
                  }
                  uint64_t v16 = v30;
                }
                else
                {
LABEL_39:
                  uint64_t v16 = 4294954514;
                }
LABEL_40:
                int Count = CFArrayGetCount(v18);
                if (Count >= 1)
                {
                  CFIndex v32 = 0;
                  uint64_t v33 = Count;
                  do
                  {
                    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v18, v32);
                    int v35 = *(void (**)(uint64_t, const void *))(*(void *)(CMBaseObjectGetVTable() + 16) + 16);
                    if (v35) {
                      v35(a4, ValueAtIndex);
                    }
                    ++v32;
                  }
                  while (v33 != v32);
                }
                CFRelease(v18);
              }
              else if ((int)VRTraceGetErrorLogLevelForModule() < 3)
              {
                uint64_t v16 = 2147549187;
              }
              else
              {
                VRTraceErrorLogLevelToCSTR();
                uint64_t v16 = 2147549187;
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  RTPGetReceiveStatusWithRunLoop_cold_5();
                }
              }
            }
            for (unint64_t j = v43; j < v44 && j >= (void *)v43; ++j)
            {
              if (*j) {
                CheckOutHandleDebug();
              }
              v6 += 8;
              if (!--v9) {
                return v16;
              }
            }
          }
LABEL_71:
          __break(0x5519u);
        }
        uint64_t v16 = 2147549185;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPGetReceiveStatusWithRunLoop_cold_4();
          }
        }
      }
    }
    else
    {
      uint64_t v16 = 2147549185;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RTPGetReceiveStatusWithRunLoop_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v16 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPGetReceiveStatusWithRunLoop_cold_1();
      }
    }
  }
  return v16;
}

uint64_t _RTPSetReceiveStatusFlags(void *a1, unsigned int *a2, int a3, unsigned int *a4, unsigned char *a5)
{
  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        if (a3 >= 1)
        {
          char v5 = 0;
          uint64_t v6 = a3;
          while (1)
          {
            unint64_t v7 = (void *)*a1;
            if (!*a1) {
              goto LABEL_18;
            }
            unsigned int v8 = *a2;
            *a4 = *a2;
            if ((*a2 & 0x10) == 0 || !v7[1388]) {
              goto LABEL_11;
            }
            if (v7[1395]) {
              break;
            }
            v8 &= ~0x10u;
            *a4 = v8;
            if ((*a2 & 0x20) != 0)
            {
LABEL_12:
              if (v7[1389])
              {
                if (v7[1397]) {
                  char v5 = 1;
                }
                else {
                  *a4 = v8 & 0xFFFFFFDF;
                }
              }
            }
LABEL_18:
            ++a4;
            ++a2;
            ++a1;
            if (!--v6)
            {
              uint64_t v9 = 0;
              if (a5) {
                *a5 = v5 & 1;
              }
              return v9;
            }
          }
          char v5 = 1;
LABEL_11:
          if ((*a2 & 0x20) != 0) {
            goto LABEL_12;
          }
          goto LABEL_18;
        }
        uint64_t v9 = 2147549185;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTPSetReceiveStatusFlags_cold_4();
          }
        }
      }
      else
      {
        uint64_t v9 = 2147549185;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _RTPSetReceiveStatusFlags_cold_3();
          }
        }
      }
    }
    else
    {
      uint64_t v9 = 2147549185;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTPSetReceiveStatusFlags_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v9 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPSetReceiveStatusFlags_cold_1();
      }
    }
  }
  return v9;
}

double RTPUnpackDouble(unsigned int a1)
{
  double result = (double)a1 * 0.000122070312;
  if (a1 == 0xFFFF) {
    return 0.0;
  }
  return result;
}

uint64_t RTPSetConnectionManager(uint64_t a1, const void *a2)
{
  if (a2)
  {
    uint64_t v3 = CheckInHandleDebug();
    if (v3)
    {
      _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v3 + 11192), a2);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      uint64_t v4 = 2147549186;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          RTPSetConnectionManager_cold_2();
          return 2147549186;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        RTPSetConnectionManager_cold_1();
      }
    }
  }
  return v4;
}

unint64_t RTPIgnorePacketLossAccounting(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t result = CheckInHandleDebug();
  if (!result) {
    return 2147549186;
  }
  unint64_t v4 = result;
  char v5 = (unsigned char *)(result + 11100);
  if (*(unsigned __int8 *)(result + 11100) == a2)
  {
LABEL_8:
    CheckOutHandleDebug();
    return 0;
  }
  if (result < result + 27616)
  {
    RTPReset(result, *(_DWORD *)(result + 4832));
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      unint64_t v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136316162;
        uint64_t v9 = v6;
        __int16 v10 = 2080;
        int v11 = "RTPIgnorePacketLossAccounting";
        __int16 v12 = 1024;
        int v13 = 6041;
        __int16 v14 = 2048;
        unint64_t v15 = v4;
        __int16 v16 = 1024;
        int v17 = a2;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setting RTP(%p) ignorePacketLossAccounting = %d", (uint8_t *)&v8, 0x2Cu);
      }
    }
    *char v5 = a2;
    goto LABEL_8;
  }
  __break(0x5519u);
  return result;
}

uint64_t RTPSetVCSecurityKeyHolder(uint64_t a1, const void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147549186;
  }
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v3 + 10448), a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTPGetFramingOverhead(uint64_t a1, void *a2)
{
  uint64_t v2 = 2147549185;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      __int16 v5 = *(_WORD *)(v4 + 16);
      CheckOutHandleDebug();
      uint64_t v2 = 0;
      uint64_t v6 = 16;
      if ((v5 & 0x10) == 0) {
        uint64_t v6 = 12;
      }
      *a2 = v6 + 4 * (v5 & 0xF);
    }
    else
    {
      return 2147549186;
    }
  }
  return v2;
}

void _RTPTransportMediaPacketHistoryCleanUp(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = a1 + 11208;
  unint64_t v3 = a1 + 11208 + 16 * a2;
  if (v3)
  {
    unint64_t v5 = a1 + 27592;
    if (v2 > v3 || v3 + 16 > v5) {
      goto LABEL_17;
    }
    unint64_t v7 = v2 + 16 * a2;
    __int16 v10 = *(const void **)(v7 + 8);
    uint64_t v9 = (void *)(v7 + 8);
    int v8 = v10;
    if (v10)
    {
      if (v3 >= v5) {
        goto LABEL_17;
      }
      CFRelease(v8);
      *uint64_t v9 = 0;
    }
    int v11 = *(void **)v3;
    if (*(void *)v3)
    {
      __int16 v12 = (void *)v11[5];
      if (v12) {
        CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 10816), v12);
      }
      CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 10808), v11);
    }
    if (v5 >= v3 && v5 - v3 >= 0x10)
    {
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + _Block_object_dispose(&STACK[0x250], 8) = 0;
      return;
    }
LABEL_17:
    __break(0x5519u);
  }
}

uint64_t _RTPTransportAddMediaPacketHistory(uint64_t a1, _WORD **a2)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a2;
  uint64_t v4 = **a2 & 0x3FF;
  v17[0] = 0;
  v17[1] = *((void *)v3 + 8);
  unint64_t v5 = a1 + 11208;
  uint64_t v6 = (uint64_t *)(a1 + 27592);
  unint64_t v7 = (uint64_t *)(a1 + 11208 + 16 * v4);
  if (v7)
  {
    if (v7 >= v6 || (unint64_t)v7 < v5) {
LABEL_24:
    }
      __break(0x5519u);
    uint64_t v9 = *v7;
    if (*v7)
    {
      int v10 = *(_DWORD *)(v9 + 4);
      if (v10)
      {
        if (*(void *)(v5 + 16 * v4 + 8))
        {
          if (v7 + 2 > v6) {
            goto LABEL_24;
          }
          WORD2(v17[0]) = *(_WORD *)v9;
          LODWORD(v17[0]) = v10;
          VCNACKConsumer_UpdatePacketCacheStatus(*(void *)(a1 + 27592), (int *)v17);
          _RTPTransportMediaPacketHistoryCleanUp(a1, v4);
        }
      }
    }
  }
  if (v6 < v7 || v5 > (unint64_t)v7 || (unint64_t)((char *)v6 - (char *)v7) < 0x10) {
    goto LABEL_24;
  }
  *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
  if (v7 + 2 > v6) {
    goto LABEL_24;
  }
  __int16 v14 = *(const void **)(v5 + 16 * v4 + 8);
  if (v14) {
    CFRetain(v14);
  }
  unint64_t v15 = *a2;
  WORD2(v17[0]) = **a2;
  LODWORD(v17[0]) = *((_DWORD *)v15 + 1);
  return VCNACKConsumer_UpdatePacketCacheStatus(*v6, (int *)v17);
}

uint64_t _RTPTransport_ParseBasebandNotification(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *a3 = 1;
  uint64_t v6 = a3 + 2;
  __int16 v19 = 0;
  size_t lengthAtOffsetOut = 0;
  uint64_t result = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)a2, 0, &lengthAtOffsetOut, 0, &v19);
  if (result)
  {
    int v8 = result;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPTransport_ParseBasebandNotification_cold_4();
      }
    }
    if (v8 >= 0) {
      int v9 = v8;
    }
    else {
      int v9 = -v8;
    }
    return v9 | (v8 << 31) | 0x50010000u;
  }
  if ((lengthAtOffsetOut & 0x80000000) == 0 && (int)lengthAtOffsetOut <= (uint64_t)lengthAtOffsetOut && v6 < a3 + 1514)
  {
    if (!VCBasebandNotificationParser_ParseNotification((unint64_t)v19, lengthAtOffsetOut, (uint64_t)v6, *(double *)(a2 + 128))|| !*v6)
    {
      uint64_t v10 = 2147549191;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTPTransport_ParseBasebandNotification_cold_1();
        }
      }
      return v10;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      int v13 = *MEMORY[0x1E4F47A50];
      __int16 v14 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = *v6;
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v22 = v12;
          __int16 v23 = 2080;
          __int16 v24 = "_RTPTransport_ParseBasebandNotification";
          __int16 v25 = 1024;
          int v26 = 2343;
          __int16 v27 = 1024;
          int v28 = v15;
          _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Received baseband notification with type %d", buf, 0x22u);
        }
      }
      else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        _RTPTransport_ParseBasebandNotification_cold_3();
      }
    }
    if (*v6 == 3 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      int v17 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *v6;
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v22 = v16;
        __int16 v23 = 2080;
        __int16 v24 = "_RTPTransport_ParseBasebandNotification";
        __int16 v25 = 1024;
        int v26 = 2345;
        __int16 v27 = 1024;
        int v28 = v18;
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Received codec rate mode change request with suggested bitrate %d", buf, 0x22u);
      }
    }
    uint64_t result = *(void *)(a1 + 10360);
    if (result == 0xFFFFFFFFLL)
    {
      uint64_t v10 = 0;
LABEL_38:
      VCRateControlProcessBasebandNotification(*(void **)(a1 + 10432), (uint64_t)v6);
      return v10;
    }
    if (!v19 || lengthAtOffsetOut)
    {
      uint64_t v10 = AFRCProcessBasebandNotification(result);
      if ((v10 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _RTPTransport_ParseBasebandNotification_cold_2();
        }
      }
      goto LABEL_38;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t _RTPEnsureTransportStreamsDeactivated(uint64_t a1)
{
  if (a1)
  {
    unint64_t v2 = (unsigned char *)(a1 + 11101);
    if (!*(unsigned char *)(a1 + 11101)) {
      return 0;
    }
    uint64_t v3 = *(void *)(a1 + 11104);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 64);
    if (!v4) {
      return 4294954514;
    }
    uint64_t v5 = v4(v3);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    uint64_t v6 = *(void *)(a1 + 11112);
    unint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 64);
    if (!v7) {
      return 4294954514;
    }
    uint64_t v8 = v7(v6);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v9 = *(void *)(a1 + 11120);
    if (!v9)
    {
LABEL_10:
      *unint64_t v2 = 0;
      return v8;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)(CMBaseObjectGetVTable() + 16) + 64);
    if (!v10) {
      return 4294954514;
    }
    uint64_t v8 = v10(v9);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _RTPEnsureTransportStreamsDeactivated_cold_1();
      }
    }
  }
  return v8;
}

double Format_Float(uint64_t a1, int a2, int a3)
{
  *(double *)a1 = (double)a3;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = xmmword_1E259BB10;
  *(_DWORD *)(a1 + 24) = 4;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x250], 8) = a2;
  *(void *)&double result = 32;
  *(void *)(a1 + 32) = 32;
  return result;
}

double Format_Short(uint64_t a1, int a2, int a3)
{
  *(double *)a1 = (double)a3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x250], 8) = 0x2C6C70636DLL;
  *(_DWORD *)(a1 + 16) = 2 * a2;
  *(_DWORD *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 24) = 2 * a2;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x250], 8) = a2;
  *(void *)&double result = 16;
  *(void *)(a1 + 32) = 16;
  return result;
}

float BitrateToQuality(int a1, unsigned int a2, int a3, int a4)
{
  if (a1 < 1179648)
  {
    if (a1 != 720896 && a1 != 0x100000)
    {
      if (a1 != 1114112) {
        goto LABEL_59;
      }
      return (float)a2;
    }
    if (a3 == 16000)
    {
      float v4 = -9.0;
      if (a2 < 0x2329) {
        return v4;
      }
      float v4 = 0.0;
      if (a2 < 0x2EE1) {
        return v4;
      }
      float v4 = 9.0;
      if (a2 < 0x36B1) {
        return v4;
      }
      float v4 = 18.0;
      if (a2 < 0x3E81) {
        return v4;
      }
      float v4 = 27.0;
      if (a2 < 0x4651) {
        return v4;
      }
      if (a2 >= 0x4E21)
      {
        if (a2 >= 0x5DC1)
        {
          BOOL v6 = a2 >= 0x6D61;
          float v7 = 63.0;
          goto LABEL_66;
        }
LABEL_63:
        int v9 = 1110704128;
        return *(float *)&v9;
      }
    }
    else
    {
      float v4 = -18.0;
      if (a2 < 0x2329) {
        return v4;
      }
      float v4 = -9.0;
      if (a2 < 0x2EE1) {
        return v4;
      }
      float v4 = 0.0;
      if (a2 < 0x3E81) {
        return v4;
      }
      float v4 = 9.0;
      if (a2 < 0x4E21) {
        return v4;
      }
      float v4 = 18.0;
      if (a2 < 0x5DC1) {
        return v4;
      }
      float v4 = 27.0;
      if (a2 < 0x6D61) {
        return v4;
      }
      if (a2 >= 0x7D01)
      {
        if (a2 >= 0x8CA1)
        {
          BOOL v6 = a2 >= 0x9C41;
          float v7 = 64.0;
LABEL_66:
          if (v6) {
            return v7;
          }
          else {
            return 54.0;
          }
        }
        goto LABEL_63;
      }
    }
    int v9 = 1108344832;
    return *(float *)&v9;
  }
  if (a1 < 0x400000)
  {
    if (a1 != 1179648)
    {
      if (a1 == 0x200000)
      {
        if (a3 == 48000 && a4 == 4) {
          return (float)((float)(a2 >> 2) / 300000.0) * 127.0;
        }
        if (a2 <= 0x1388) {
          unsigned int v10 = 5000;
        }
        else {
          unsigned int v10 = a2;
        }
        if (v10 >= 0xBB80) {
          unsigned int v11 = 48000;
        }
        else {
          unsigned int v11 = v10;
        }
        return (double)v11 / 1000.0;
      }
      goto LABEL_59;
    }
    return (float)a2;
  }
  if (a1 == 0x400000)
  {
    float v4 = 0.0;
    if (a3 == 16000)
    {
      if (a2 < 0x19C9) {
        return v4;
      }
      float v4 = 1.0;
      if (a2 < 0x2293) {
        return v4;
      }
      float v4 = 2.0;
      if (a2 < 0x316B) {
        return v4;
      }
      float v4 = 3.0;
      if (a2 < 0x37AB) {
        return v4;
      }
      float v4 = 4.0;
      if (a2 < 0x3DEB) {
        return v4;
      }
      float v4 = 5.0;
      if (a2 < 0x474B) {
        return v4;
      }
      float v4 = 6.0;
      if (a2 < 0x4D8B) {
        return v4;
      }
      float v4 = 7.0;
      if (a2 < 0x5A0B) {
        return v4;
      }
      float v4 = 8.0;
      unsigned int v8 = 23851;
    }
    else
    {
      if (a2 < 0x128F) {
        return v4;
      }
      float v4 = 1.0;
      if (a2 < 0x141F) {
        return v4;
      }
      float v4 = 2.0;
      if (a2 < 0x170D) {
        return v4;
      }
      float v4 = 3.0;
      if (a2 < 0x1A2D) {
        return v4;
      }
      float v4 = 4.0;
      if (a2 < 0x1CE9) {
        return v4;
      }
      float v4 = 5.0;
      if (a2 < 0x1F0F) {
        return v4;
      }
      float v4 = 6.0;
      if (a2 < 0x27D9) {
        return v4;
      }
      float v4 = 7.0;
      unsigned int v8 = 12201;
    }
    if (a2 < v8) {
      return v4;
    }
    goto LABEL_59;
  }
  if (a1 == 5242880) {
    return (float)a2;
  }
LABEL_59:
  float v4 = 0.0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      BitrateToQuality_cold_1();
    }
  }
  return v4;
}

void FileUtil_PrintBasicDesc(uint64_t a1, uint64_t *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  uint64_t v5 = (os_log_t *)MEMORY[0x1E4F47A50];
  if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    float v7 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 136315906;
      uint64_t v19 = v6;
      __int16 v20 = 2080;
      unsigned int v21 = "FileUtil_PrintBasicDesc";
      __int16 v22 = 1024;
      int v23 = 433;
      __int16 v24 = 2080;
      uint64_t v25 = a1;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s mSampleRate : mFormatID : mFormatFlags : mBytesPerPacket : mFramesPerPacket : mBytesPerFrame : mChannelsPerFrame : mBitsPerChannel :", (uint8_t *)&v18, 0x26u);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    int v9 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *a2;
      unsigned int v11 = FourccToCStr(*((_DWORD *)a2 + 2));
      int v12 = *((_DWORD *)a2 + 3);
      int v13 = *((_DWORD *)a2 + 4);
      int v14 = *((_DWORD *)a2 + 5);
      int v15 = *((_DWORD *)a2 + 6);
      int v16 = *((_DWORD *)a2 + 7);
      int v17 = *((_DWORD *)a2 + 8);
      int v18 = 136317954;
      uint64_t v19 = v8;
      __int16 v20 = 2080;
      unsigned int v21 = "FileUtil_PrintBasicDesc";
      __int16 v22 = 1024;
      int v23 = 443;
      __int16 v24 = 2080;
      uint64_t v25 = a1;
      __int16 v26 = 2048;
      uint64_t v27 = v10;
      __int16 v28 = 2080;
      uint64_t v29 = v11;
      __int16 v30 = 1024;
      int v31 = v12;
      __int16 v32 = 1024;
      int v33 = v13;
      __int16 v34 = 1024;
      int v35 = v14;
      __int16 v36 = 1024;
      int v37 = v15;
      __int16 v38 = 1024;
      int v39 = v16;
      __int16 v40 = 1024;
      int v41 = v17;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s %8.0f    : %7s   :  0x%08x  : %8u        : %9u        : %8u       : %9u         : %9u       :", (uint8_t *)&v18, 0x5Eu);
    }
  }
}

void SoundDec_PrepareAudioConverter()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  BOOL v0 = VCFeatureFlagManager_UseOutOfProcessAudioDecoding();
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v0)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v2 = VRTraceErrorLogLevelToCSTR();
      uint64_t v3 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315650;
        uint64_t v7 = v2;
        __int16 v8 = 2080;
        int v9 = "SoundDec_PrepareAudioConverter";
        __int16 v10 = 1024;
        int v11 = 628;
        _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Calling AudioConverterPrepare()", (uint8_t *)&v6, 0x1Cu);
      }
    }
    AudioConverterPrepare();
  }
  else if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    uint64_t v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315650;
      uint64_t v7 = v4;
      __int16 v8 = 2080;
      int v9 = "SoundDec_PrepareAudioConverter";
      __int16 v10 = 1024;
      int v11 = 631;
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d UseOutOfProcessAudioDecoding is OFF; Not calling AudioConverterPrepare()",
        (uint8_t *)&v6,
        0x1Cu);
    }
  }
}

uint64_t SoundDec_Create(void *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t result = 2147811329;
  if (!a1 || !a2) {
    return result;
  }
  uint64_t v5 = malloc_type_calloc(1uLL, 0x110uLL, 0x1030040C827E633uLL);
  if (!v5) {
    return 2147811331;
  }
  int v6 = v5;
  uint64_t result = (uint64_t)malloc_type_malloc(0x2328uLL, 0x7ADA61D3uLL);
  uint64_t v7 = result + 9000;
  if (!result) {
    uint64_t v7 = 0;
  }
  if (v7 - result <= 8999)
  {
    __break(0x5519u);
    return result;
  }
  *((void *)v6 + 20) = result;
  *((_DWORD *)v6 + 43) = 9000;
  if (!result)
  {
LABEL_24:
    free(v6);
    return 2147811331;
  }
  *((_DWORD *)v6 + 42) = 0;
  *((_DWORD *)v6 + 47) = 0;
  long long v8 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  *((void *)v6 + 4) = *(void *)(a2 + 32);
  *int v6 = v8;
  v6[1] = v9;
  long long v10 = *(_OWORD *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 56);
  *((void *)v6 + 9) = *(void *)(a2 + 72);
  *(_OWORD *)((char *)v6 + 56) = v11;
  *(_OWORD *)((char *)v6 + 40) = v10;
  *((_DWORD *)v6 + 20) = TranslateASBDToPayloadFormat(a2);
  *((_DWORD *)v6 + 21) = TranslateASBDToPayloadFormat(a2 + 40);
  if (*((_WORD *)v6 + 41) != 256) {
    goto LABEL_11;
  }
  uint64_t v12 = malloc_type_malloc(0x64uLL, 0xF28CA9BFuLL);
  if (!v12)
  {
    free(*((void **)v6 + 20));
    goto LABEL_24;
  }
  *((unsigned char *)v6 + 120) = 1;
  *((void *)v6 + 12) = v12;
  *(_OWORD *)((char *)v6 + 104) = xmmword_1E259E280;
LABEL_11:
  *((void *)v6 + 19) = malloc_type_calloc(1uLL, (16 * *(unsigned int *)(a2 + 68)) | 8, 0x28FF24FAuLL);
  int v13 = *((unsigned __int16 *)v6 + 41) << 16;
  if (v13 < 0x200000)
  {
    if (v13 >= 1114112)
    {
      if (v13 != 1114112 && v13 != 1179648) {
        goto LABEL_34;
      }
    }
    else if (v13 != 655360)
    {
      if (v13 != 0x100000) {
        goto LABEL_34;
      }
      keyExistsAndHasValidFormat[0] = 0;
      int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"useZeroSignaling", @"com.apple.VideoConference", keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0]) {
        int v15 = AppBooleanValue;
      }
      else {
        int v15 = 1;
      }
LABEL_33:
      *((_DWORD *)v6 + 45) = v15;
      goto LABEL_34;
    }
LABEL_32:
    int v15 = 1;
    goto LABEL_33;
  }
  if (v13 >= 5242880)
  {
    if (v13 != 5242880 && v13 != 0x800000 && v13 != 0x1000000) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v13 == 0x200000 || v13 == 0x400000) {
    goto LABEL_32;
  }
LABEL_34:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    int v17 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *((_DWORD *)v6 + 20);
      int v19 = *((_DWORD *)v6 + 21);
      *(_DWORD *)Boolean keyExistsAndHasValidFormat = 136316162;
      uint64_t v37 = v16;
      __int16 v38 = 2080;
      int v39 = "SoundDec_Create";
      __int16 v40 = 1024;
      int v41 = 700;
      __int16 v42 = 1024;
      int v43 = v18;
      __int16 v44 = 1024;
      int v45 = v19;
      _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SoundDec_Create(%08x --> %08x)", keyExistsAndHasValidFormat, 0x28u);
    }
  }
  FileUtil_PrintBasicDesc((uint64_t)"in  format:", (uint64_t *)v6);
  FileUtil_PrintBasicDesc((uint64_t)"out format:", (uint64_t *)v6 + 5);
  if (*((unsigned __int16 *)v6 + 43) << 16 == 983040)
  {
    if (!RegisterG722Encoder())
    {
LABEL_47:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v25 = VRTraceErrorLogLevelToCSTR();
        __int16 v26 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)Boolean keyExistsAndHasValidFormat = 136315906;
          uint64_t v37 = v25;
          __int16 v38 = 2080;
          int v39 = "SoundDec_Create";
          __int16 v40 = 1024;
          int v41 = 706;
          __int16 v42 = 1024;
          int v43 = -2147155964;
          _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Failed to register: %X", keyExistsAndHasValidFormat, 0x22u);
        }
      }
      SoundDec_Destroy((uint64_t)v6);
      return 2147811332;
    }
  }
  else if (*((unsigned __int16 *)v6 + 41) << 16 == 983040 && !RegisterG722Decoder())
  {
    goto LABEL_47;
  }
  __int16 v20 = (AudioConverterRef *)v6 + 11;
  int v21 = SoundDec_AudioConverterInstantiate((uint64_t)v6, (uint64_t)v6 + 40, *(unsigned __int8 *)(a2 + 80), (OpaqueAudioConverter **)v6 + 11);
  if (v21)
  {
    int v22 = v21;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v23 = VRTraceErrorLogLevelToCSTR();
      __int16 v24 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SoundDec_Create_cold_6(v23, v22, v24);
      }
    }
    SoundDec_Destroy((uint64_t)v6);
    return -v22 | 0xA0050000;
  }
  int v27 = *((unsigned __int16 *)v6 + 43) << 16;
  if (v27 == 655360)
  {
    *(_DWORD *)Boolean keyExistsAndHasValidFormat = 127;
    if (AudioConverterSetProperty(*v20, 0x73726371u, 4u, keyExistsAndHasValidFormat))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SoundDec_Create_cold_5();
        }
      }
    }
    if (*((_DWORD *)v6 + 21) == 671360) {
      int v28 = 2;
    }
    else {
      int v28 = 1;
    }
    int inPropertyData = v28;
    if (AudioConverterSetProperty(*((AudioConverterRef *)v6 + 11), 0x7365716Cu, 4u, &inPropertyData))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SoundDec_Create_cold_4();
        }
      }
    }
    goto LABEL_94;
  }
  if (v27 == 983040)
  {
    *(_DWORD *)Boolean keyExistsAndHasValidFormat = 0;
    if (AudioConverterSetProperty(*v20, 0x65736164u, 4u, keyExistsAndHasValidFormat))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SoundDec_Create_cold_3();
        }
      }
    }
    goto LABEL_94;
  }
  if (v27 >= 0x200000)
  {
    if (v27 != 0x200000)
    {
      if (v27 == 5242880)
      {
        int v29 = *((_DWORD *)v6 + 12);
        int v30 = 1936029299;
LABEL_92:
        if (v29 == v30) {
          goto LABEL_93;
        }
        goto LABEL_94;
      }
      if (v27 != 0x400000) {
        goto LABEL_94;
      }
    }
LABEL_76:
    *(_DWORD *)Boolean keyExistsAndHasValidFormat = 1;
    int v31 = *((_DWORD *)v6 + 12);
    if (v31 == 1633772390
      || (v31 != 1633772389 || (int)*((double *)v6 + 5) != 48000 ? (BOOL v32 = 0) : (BOOL v32 = *((_DWORD *)v6 + 17) == 2),
          v27 == 0x200000 || v32 || v31 == 1935764850 || v31 == 1936029299 || v31 == 1935767394))
    {
      *(_DWORD *)Boolean keyExistsAndHasValidFormat = 3;
      *((_DWORD *)v6 + 47) = 1;
    }
    if (AudioConverterSetProperty(*v20, 0x61636266u, 4u, keyExistsAndHasValidFormat))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SoundDec_Create_cold_2();
        }
      }
    }
    goto LABEL_94;
  }
  switch(v27)
  {
    case 1048576:
      goto LABEL_76;
    case 1114112:
LABEL_93:
      *((_DWORD *)v6 + 47) = 1;
      break;
    case 1179648:
      int v29 = *((_DWORD *)v6 + 12);
      int v30 = 1633903462;
      goto LABEL_92;
  }
LABEL_94:
  if (*(double *)v6 != *((double *)v6 + 5))
  {
    *(_DWORD *)Boolean keyExistsAndHasValidFormat = 2;
    if (AudioConverterSetProperty(*v20, 0x70726D6Du, 4u, keyExistsAndHasValidFormat))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SoundDec_Create_cold_1();
        }
      }
    }
    if (*(unsigned char *)(a2 + 81)) {
      _SoundDec_ConfigureRamStadSRC((uint64_t)v6);
    }
  }
  int inPropertyData = 1;
  AudioConverterSetProperty(*((AudioConverterRef *)v6 + 11), 0x646D6F64u, 4u, &inPropertyData);
  *a1 = v6;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v33 = VRTraceErrorLogLevelToCSTR();
    __int16 v34 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)Boolean keyExistsAndHasValidFormat = 136315650;
      uint64_t v37 = v33;
      __int16 v38 = 2080;
      int v39 = "SoundDec_Create";
      __int16 v40 = 1024;
      int v41 = 788;
      _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Leaving SoundDec_Create", keyExistsAndHasValidFormat, 0x1Cu);
    }
  }
  return 0;
}

uint64_t TranslateASBDToPayloadFormat(uint64_t a1)
{
  uint64_t v1 = (int)*(double *)a1;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 <= 1819304812)
  {
    if (v2 <= 1633903461)
    {
      if ((v2 - 1633772389) < 3) {
        return v1 | 0x100000;
      }
      if (v2 == 1633772396)
      {
        int v3 = 720896;
        return v1 | v3;
      }
      goto LABEL_42;
    }
    if (v2 > 1685354615)
    {
      if (v2 == 1685354616) {
        return v1 | 0x800000;
      }
      if (v2 == 1735091043) {
        return v1 | 0xF0000;
      }
    }
    else
    {
      if (v2 == 1633903462)
      {
        int v3 = 1179648;
        return v1 | v3;
      }
      if (v2 == 1634492791)
      {
        int v3 = 327680;
        return v1 | v3;
      }
    }
    goto LABEL_42;
  }
  if (v2 > 1936029298)
  {
    if (v2 > 1953790319)
    {
      if (v2 == 1953790320) {
        return v1 | 0x1000000;
      }
      if (v2 == 1970037111) {
        return v1 | 0x40000;
      }
    }
    else
    {
      if (v2 == 1936029299)
      {
        int v3 = 5242880;
        return v1 | v3;
      }
      if (v2 == 1936745848)
      {
        int v3 = 655360;
        return v1 | v3;
      }
    }
LABEL_42:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        TranslateASBDToPayloadFormat_cold_1();
      }
    }
    return v1;
  }
  if (v2 > 1935764849)
  {
    if (v2 == 1935764850 || v2 == 1935767394) {
      return v1 | 0x400000;
    }
    goto LABEL_42;
  }
  if (v2 != 1819304813)
  {
    if (v2 == 1869641075) {
      return v1 | 0x200000;
    }
    goto LABEL_42;
  }
  if ((~*(_DWORD *)(a1 + 12) & 9) != 0)
  {
    int v6 = *(_DWORD *)(a1 + 24);
    unsigned int v7 = v1 | 0xD0000;
    if (v6 != 4) {
      unsigned int v7 = (int)*(double *)a1;
    }
    if (v6 == 2) {
      return v1 | 0x30000;
    }
    else {
      return v7;
    }
  }
  else if (*(_DWORD *)(a1 + 28) == 2)
  {
    return v1 | 0x20000;
  }
  else
  {
    return v1 | 0x10000;
  }
}

uint64_t SoundDec_Destroy(uint64_t a1)
{
  if (!a1) {
    return 2147811329;
  }
  int v2 = *(OpaqueAudioConverter **)(a1 + 88);
  if (v2)
  {
    AudioConverterDispose(v2);
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x250], 8) = 0;
  }
  free(*(void **)(a1 + 160));
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  if (*(_WORD *)(a1 + 82) == 256)
  {
    int v3 = *(void **)(a1 + 96);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 120))
      {
        free(v3);
        *(unsigned char *)(a1 + 120) = 0;
      }
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
    }
  }
  uint64_t v4 = *(void **)(a1 + 152);
  if (v4) {
    free(v4);
  }
  free((void *)a1);
  return 0;
}

uint64_t SoundDec_AudioConverterInstantiate(uint64_t a1, uint64_t a2, int a3, OpaqueAudioConverter **a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a4)
  {
    if (a3)
    {
      int v8 = 1;
    }
    else
    {
      BOOL v12 = *(_DWORD *)(a1 + 8) != 1819304813 && *(_DWORD *)(a2 + 8) == 1819304813;
      BOOL v13 = VCFeatureFlagManager_UseOutOfProcessAudioDecoding();
      int v8 = v12 && v13;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v14 = VRTraceErrorLogLevelToCSTR();
        int v15 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = FourccToCStr(*(_DWORD *)(a1 + 8));
          int v17 = FourccToCStr(*(_DWORD *)(a2 + 8));
          *(_DWORD *)CMTime buf = 136316930;
          uint64_t v34 = v14;
          __int16 v35 = 2080;
          __int16 v36 = "SoundDec_AudioConverterInstantiate";
          __int16 v37 = 1024;
          int v38 = 1874;
          __int16 v39 = 2080;
          __int16 v40 = v16;
          __int16 v41 = 2080;
          __int16 v42 = v17;
          __int16 v43 = 1024;
          *(_DWORD *)__int16 v44 = v12;
          *(_WORD *)&void v44[4] = 1024;
          *(_DWORD *)&v44[6] = v13;
          __int16 v45 = 1024;
          int v46 = v12 && v13;
          _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d sourceFormat=%s, destinationFormat=%s, decoding=%d, useOutOfProcessAudioDecoding=%d, instantiationOptions=%d", buf, 0x42u);
        }
      }
    }
    uint64_t v18 = AudioConverterInstantiate();
    uint64_t v11 = v18;
    if (v8)
    {
      if (!v18)
      {
        int v19 = *a4;
        if (*a4)
        {
          int inPropertyData = 1;
          OSStatus v20 = AudioConverterSetProperty(v19, 0x756D6662u, 4u, &inPropertyData);
          int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
          if (v20)
          {
            if (ErrorLogLevelForModule >= 3)
            {
              uint64_t v22 = VRTraceErrorLogLevelToCSTR();
              uint64_t v23 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                SoundDec_AudioConverterInstantiate_cold_1(v22, v20, v23);
              }
            }
          }
          else if (ErrorLogLevelForModule >= 7)
          {
            uint64_t v24 = VRTraceErrorLogLevelToCSTR();
            uint64_t v25 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              __int16 v26 = FourccToCStr(1970103906);
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v34 = v24;
              __int16 v35 = 2080;
              __int16 v36 = "SoundDec_AudioConverterInstantiate";
              __int16 v37 = 1024;
              int v38 = 1881;
              __int16 v39 = 2080;
              __int16 v40 = v26;
              __int16 v41 = 1024;
              LODWORD(v42) = inPropertyData;
              _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioConverterPropertyUseMessengerForBundleData=%s useMessengerForBundleData=%u", buf, 0x2Cu);
            }
          }
        }
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      int v28 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v29 = FourccToCStr(*(_DWORD *)(a1 + 8));
        int v30 = FourccToCStr(*(_DWORD *)(a2 + 8));
        *(_DWORD *)CMTime buf = 136316930;
        uint64_t v34 = v27;
        __int16 v35 = 2080;
        __int16 v36 = "SoundDec_AudioConverterInstantiate";
        __int16 v37 = 1024;
        int v38 = 1886;
        __int16 v39 = 2080;
        __int16 v40 = v29;
        __int16 v41 = 2080;
        __int16 v42 = v30;
        __int16 v43 = 1024;
        *(_DWORD *)__int16 v44 = a3;
        *(_WORD *)&void v44[4] = 1024;
        *(_DWORD *)&v44[6] = v8;
        __int16 v45 = 1024;
        int v46 = v11;
        _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d sourceFormat=%s, destinationFormat=%s, loadConverterOutOfProcess=%d, instantiationOptions=%d, status=%d", buf, 0x42u);
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      long long v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v34 = v9;
        __int16 v35 = 2080;
        __int16 v36 = "SoundDec_AudioConverterInstantiate";
        __int16 v37 = 1024;
        int v38 = 1866;
        __int16 v39 = 2048;
        __int16 v40 = (char *)a1;
        __int16 v41 = 2048;
        __int16 v42 = (char *)a2;
        __int16 v43 = 2048;
        *(void *)__int16 v44 = a4;
        _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid paramter(s): sourceFormat=%p, destinationFormat=%p, audioConverter=%p", buf, 0x3Au);
      }
    }
    return 1;
  }
  return v11;
}

void _SoundDec_ConfigureRamStadSRC(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    int v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v15 = v2;
      __int16 v16 = 2080;
      int v17 = "_SoundDec_ConfigureRamStadSRC";
      __int16 v18 = 1024;
      int v19 = 607;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Configuring Ramstad SRC", buf, 0x1Cu);
    }
  }
  int inPropertyData = 1835626096;
  OSStatus v4 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x73726361u, 4u, &inPropertyData);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v4)
  {
    if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _SoundDec_ConfigureRamStadSRC_cold_2();
      }
    }
  }
  else if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    unsigned int v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v15 = v6;
      __int16 v16 = 2080;
      int v17 = "_SoundDec_ConfigureRamStadSRC";
      __int16 v18 = 1024;
      int v19 = 614;
      __int16 v20 = 1024;
      int v21 = inPropertyData;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set kAudioConverterSampleRateConverterComplexity=%u", buf, 0x22u);
    }
  }
  int v12 = 34;
  OSStatus v8 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x73726371u, 4u, &v12);
  int v9 = VRTraceGetErrorLogLevelForModule();
  if (v8)
  {
    if (v9 >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _SoundDec_ConfigureRamStadSRC_cold_1();
      }
    }
  }
  else if (v9 >= 7)
  {
    uint64_t v10 = VRTraceErrorLogLevelToCSTR();
    uint64_t v11 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v15 = v10;
      __int16 v16 = 2080;
      int v17 = "_SoundDec_ConfigureRamStadSRC";
      __int16 v18 = 1024;
      int v19 = 622;
      __int16 v20 = 1024;
      int v21 = v12;
      _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set kAudioConverterSampleRateConverterQuality=%u", buf, 0x22u);
    }
  }
}

uint64_t SoundDec_ShouldRampDownMissingPackets(uint64_t a1, int *a2)
{
  uint64_t result = 2147811329;
  if (a1 && a2)
  {
    int v4 = 0;
    int v5 = *(unsigned __int16 *)(a1 + 82) << 16;
    if (v5 < 1114112)
    {
      if (v5 >= 983040)
      {
        if (v5 == 983040 || v5 == 0x100000) {
          goto LABEL_19;
        }
      }
      else if (v5 == 655360 || v5 == 720896)
      {
        goto LABEL_19;
      }
    }
    else if (v5 < 0x400000)
    {
      if (v5 == 1114112 || v5 == 1179648) {
        goto LABEL_19;
      }
    }
    else if (v5 == 0x400000 || v5 == 5242880 || v5 == 0x800000)
    {
      goto LABEL_19;
    }
    int v4 = 1;
LABEL_19:
    uint64_t result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t NilDecodeProc(uint64_t a1, _DWORD *a2, uint64_t a3, void *a4, uint64_t a5)
{
  *(void *)(a5 + 12_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(a5 + 136) = 0;
  *a2 = 1;
  *(_DWORD *)(a3 + 12) = 4;
  *(void *)(a3 + 16) = &NilDecodeProc_tmpArry;
  *(_DWORD *)a3 = 1;
  *a4 = a5 + 128;
  return 0;
}

uint64_t DecodeNilPacket(unsigned int *inInputDataProcUserData, char *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = inInputDataProcUserData[17];
  unsigned int v9 = a3 / (inInputDataProcUserData[16] * v8);
  ioOutputDataPacketuint64_t Size = v9;
  uint64_t v10 = (AudioBufferList *)*((void *)inInputDataProcUserData + 19);
  v10->int mNumberBuffers = v8;
  if (v8)
  {
    int v11 = 0;
    signed int v12 = a3 / v8;
    BOOL v13 = &a2[a3];
    uint64_t v14 = v8;
    unint64_t mBuffers = (unint64_t)v10->mBuffers;
    while (1)
    {
      __int16 v16 = &a2[v12 * v11];
      BOOL v17 = v16 <= v13 && v16 >= a2;
      if (!v17
        || v12 < 0
        || v13 - v16 < v12
        || mBuffers < (unint64_t)v10->mBuffers
        || mBuffers >= (unint64_t)&v10->mBuffers[v8])
      {
        break;
      }
      *(void *)(mBuffers + _Block_object_dispose(&STACK[0x250], 8) = v16;
      ++v11;
      *(_DWORD *)unint64_t mBuffers = 1;
      *(_DWORD *)(mBuffers + 4) = v12;
      mBuffers += 16;
      if (!--v14) {
        goto LABEL_13;
      }
    }
LABEL_19:
    __break(0x5519u);
  }
LABEL_13:
  if (AudioConverterFillComplexBuffer(*((AudioConverterRef *)inInputDataProcUserData + 11), (AudioConverterComplexInputDataProc)NilDecodeProc, inInputDataProcUserData, &ioOutputDataPacketSize, v10, 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        DecodeNilPacket_cold_1();
      }
    }
  }
  *a4 = v9 * v8 * inInputDataProcUserData[16];
  if ((a3 & 0x80000000) != 0) {
    goto LABEL_19;
  }
  FillGap(a2, a3, v9, ioOutputDataPacketSize, inInputDataProcUserData[16], v8);
  return 0;
}

void FillGap(char *__src, unsigned int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = __src;
  if (a4)
  {
    uint64_t v20 = (a3 - a4);
    if ((int)v20 >= 1)
    {
      int v7 = 0;
      size_t v8 = a5;
      uint64_t v19 = (int)v20 * (uint64_t)a5;
      size_t v9 = a5 * a4;
      uint64_t v22 = a5 * (uint64_t)a3;
LABEL_4:
      if (v7 != a6)
      {
        size_t v10 = a2;
        if (v9 <= a2)
        {
          int v11 = &v6[a2];
          signed int v12 = &v6[v19];
          if (&v6[v19] <= v11 && v6 <= v12 && v11 - v12 >= v9)
          {
            memmove(&v6[v19], v6, v9);
            if (v11 - v12 >= v8)
            {
              uint64_t v14 = v20;
              size_t v15 = v10;
              __int16 v16 = v6;
              while (v16 <= v11)
              {
                if (v6 > v16) {
                  break;
                }
                BOOL v17 = v15 >= v8;
                v15 -= v8;
                if (!v17) {
                  break;
                }
                memcpy(v16, v12, v8);
                v16 += v8;
                if (!--v14)
                {
                  __int16 v18 = &v6[v22];
                  if (&v6[v22] <= v11 && v6 <= v18)
                  {
                    a2 = v10 - v22;
                    if (((v10 - v22) & 0x80000000) == 0)
                    {
                      ++v7;
                      v6 += v22;
                      if (v11 - v18 >= (int)a2) {
                        goto LABEL_4;
                      }
                    }
                  }
                  break;
                }
              }
            }
          }
        }
        __break(0x5519u);
      }
    }
  }
  else
  {
    bzero(__src, a2);
  }
}

uint64_t SoundDec_Decode(uint64_t a1, const void *a2, unsigned int a3, char *a4, signed int a5, int *a6, int a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  ioOutputDataPacketuint64_t Size = -1431655766;
  if (a1 && (size_t v10 = *(OpaqueAudioConverter **)(a1 + 88)) != 0)
  {
    int v14 = *(_DWORD *)(a1 + 80);
    unsigned int v15 = v14 & 0xFFFF0000;
    unsigned int v58 = v14 & 0xFFFF0000;
    if (a7)
    {
      uint64_t v16 = AudioConverterReset(v10);
      if (a2)
      {
        if (v15 == 0x100000 || v15 == 655360)
        {
          if (*(_DWORD *)(a1 + 180))
          {
            size_t v17 = *a6;
            MEMORY[0x1F4188790](v16);
            if (v17)
            {
              memset(&v54[-((v17 + 15) & 0x1FFFFFFF0)], 170, v17);
              if ((v17 & 0x80000000) != 0) {
                goto LABEL_75;
              }
            }
            DecodeNilPacket((unsigned int *)a1, &v54[-((v17 + 15) & 0x1FFFFFFF0)], v17, buf);
          }
          uint64_t v18 = (int)a3;
LABEL_21:
          if ((a3 & 0x80000000) != 0) {
            goto LABEL_75;
          }
          *(void *)(a1 + 104) = v18;
          *(void *)(a1 + 112) = v18;
          *(void *)(a1 + 96) = a2;
          goto LABEL_25;
        }
LABEL_15:
        uint64_t v18 = (int)a3;
        if (v15 == 0x1000000)
        {
          if ((a3 & 0x80000000) != 0) {
            goto LABEL_75;
          }
          unint64_t v20 = *(void *)(a1 + 96);
          unint64_t v21 = v20 + *(void *)(a1 + 104);
          uint64_t v22 = (void *)(v20 + *(void *)(a1 + 112));
          if ((unint64_t)v22 > v21 || v20 > (unint64_t)v22 || v21 - (unint64_t)v22 < (int)a3) {
            goto LABEL_75;
          }
          memcpy(v22, a2, (int)a3);
          *(void *)(a1 + 112) += (int)a3;
          goto LABEL_25;
        }
        goto LABEL_21;
      }
    }
    else if (a2)
    {
      goto LABEL_15;
    }
    if (*(void *)(a1 + 112) && v15 == 0x1000000)
    {
LABEL_25:
      unsigned int v23 = (v14 - 0x10000) >> 16;
      if (v23 > 4 || v23 == 2)
      {
        unsigned int v30 = *a6;
        unsigned int v29 = *(_DWORD *)(a1 + 64);
        UInt32 v28 = *a6 / v29 / *(_DWORD *)(a1 + 68);
      }
      else
      {
        double v24 = *(double *)(a1 + 40);
        double v25 = v24 * (double)(a3 / *(_DWORD *)(a1 + 28));
        LODWORD(v24) = *(_DWORD *)(a1 + 60);
        double v26 = v25 / (double)*(unint64_t *)&v24;
        unint64_t v27 = *(void *)a1;
        LODWORD(v27) = *(_DWORD *)(a1 + 24);
        UInt32 v28 = (v26 / *(double *)a1 / (double)v27);
        unsigned int v29 = *(_DWORD *)(a1 + 64);
        unsigned int v30 = *a6;
      }
      ioOutputDataPacketuint64_t Size = v28;
      if (v29)
      {
        UInt32 v35 = v30 / v29;
        if (v28 > v35)
        {
          ioOutputDataPacketuint64_t Size = v35;
          UInt32 v28 = v35;
        }
      }
      __int16 v36 = *(AudioBufferList **)(a1 + 152);
      uint64_t v37 = *(unsigned int *)(a1 + 68);
      v36->int mNumberBuffers = v37;
      if (v37)
      {
        int v38 = 0;
        signed int v39 = v30 / v37;
        __int16 v40 = &a4[a5];
        uint64_t v41 = v37;
        unint64_t mBuffers = (unint64_t)v36->mBuffers;
        while (1)
        {
          __int16 v43 = &a4[v39 * v38];
          BOOL v44 = v43 <= v40 && v43 >= a4;
          if (!v44
            || v39 < 0
            || v40 - v43 < v39
            || mBuffers < (unint64_t)v36->mBuffers
            || mBuffers >= (unint64_t)&v36->mBuffers[v37])
          {
            break;
          }
          *(void *)(mBuffers + _Block_object_dispose(&STACK[0x250], 8) = v43;
          ++v38;
          *(_DWORD *)unint64_t mBuffers = 1;
          *(_DWORD *)(mBuffers + 4) = v39;
          mBuffers += 16;
          if (!--v41) {
            goto LABEL_51;
          }
        }
LABEL_75:
        __break(0x5519u);
      }
LABEL_51:
      OSStatus v45 = AudioConverterFillComplexBuffer(*(AudioConverterRef *)(a1 + 88), (AudioConverterComplexInputDataProc)SoundDec_DataProc, (void *)a1, &ioOutputDataPacketSize, v36, 0);
      if (v45)
      {
        OSStatus v46 = v45;
        uint64_t v19 = 2147811332;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v57 = VRTraceErrorLogLevelToCSTR();
          uint64_t v47 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v56 = FourccToCStr(*(_DWORD *)(a1 + 8));
            int v55 = (int)*(double *)a1;
            int v48 = FourccToCStr(*(_DWORD *)(a1 + 48));
            int v49 = (int)*(double *)(a1 + 40);
            unsigned int v50 = " (AVC Out of Data error)";
            if (v46 != 95) {
              unsigned int v50 = "";
            }
            *(_DWORD *)CMTime buf = 136317186;
            uint64_t v61 = v57;
            __int16 v62 = 2080;
            __int16 v63 = "SoundDec_Decode";
            __int16 v64 = 1024;
            int v65 = 1159;
            __int16 v66 = 2080;
            *(void *)__int16 v67 = v56;
            *(_WORD *)&v67[8] = 1024;
            int v68 = v55;
            __int16 v69 = 2080;
            unsigned int v70 = v48;
            __int16 v71 = 1024;
            int v72 = v49;
            __int16 v73 = 1024;
            OSStatus v74 = v46;
            __int16 v75 = 2080;
            unsigned int v76 = v50;
            _os_log_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverter (%s/%d -> %s/%d) returned error %d%s during FillComplexBuffer.", buf, 0x4Cu);
          }
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      if (ioOutputDataPacketSize < v28)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v51 = VRTraceErrorLogLevelToCSTR();
          int v52 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v61 = v51;
            __int16 v62 = 2080;
            __int16 v63 = "SoundDec_Decode";
            __int16 v64 = 1024;
            int v65 = 1164;
            __int16 v66 = 1024;
            *(_DWORD *)__int16 v67 = ioOutputDataPacketSize;
            *(_WORD *)&v67[4] = 1024;
            *(_DWORD *)&v67[6] = v28;
            _os_log_impl(&dword_1E1EA4000, v52, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Error filling a gap? packets[%d] < full_packets[%d]", buf, 0x28u);
          }
        }
        if (v28 - ioOutputDataPacketSize < 2)
        {
          UInt32 v28 = ioOutputDataPacketSize;
        }
        else
        {
          if (a5 < 0) {
            goto LABEL_75;
          }
          FillGap(a4, a5, v28, ioOutputDataPacketSize, *(_DWORD *)(a1 + 56), v37);
        }
      }
      int v34 = *(_DWORD *)(a1 + 56) * v28 * *(_DWORD *)(a1 + 68);
      if (v58 == 655360)
      {
        if (a4 && a5 < 1) {
          goto LABEL_75;
        }
        _SoundDec_ScaleSpeex(a1, (float *)a4, v28);
      }
      goto LABEL_70;
    }
    unsigned int v31 = (v14 - 0x10000) >> 16;
    BOOL v32 = v31 > 4 || v31 == 2;
    if (!v32 || !*(_DWORD *)(a1 + 180))
    {
      if (a5 < 0) {
        goto LABEL_75;
      }
      size_t v33 = *a6;
      if (v33 > a5) {
        goto LABEL_75;
      }
      bzero(a4, v33);
      uint64_t v19 = 0;
      int v34 = *a6;
LABEL_70:
      *a6 = v34;
      return v19;
    }
    if (a5 < 0) {
      goto LABEL_75;
    }
    DecodeNilPacket((unsigned int *)a1, a4, a5, a6);
    return 0;
  }
  else
  {
    if (a5 < 0) {
      goto LABEL_75;
    }
    bzero(a4, a5);
    return 2147811329;
  }
}

uint64_t SoundDec_DataProc(uint64_t a1, signed int *a2, unsigned int *a3, void *a4, unint64_t a5)
{
  *(void *)&__n[1] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = a5 + 272;
  signed int v10 = *a2;
  size_t v11 = *(void *)(a5 + 112);
  if (v11)
  {
    if (*(_DWORD *)(a5 + 172) <= (int)v11)
    {
      __n[0] = *(void *)(a5 + 112);
      if (v9 <= a5) {
        goto LABEL_72;
      }
      ExpandCallbackBuffer(a5, __n);
      size_t v11 = __n[0];
      *(void *)(a5 + 112) = __n[0];
    }
    size_t v12 = *(int *)(a5 + 172);
    BOOL v13 = *(unsigned char **)(a5 + 160);
    if (*(_DWORD *)(a5 + 8) == 1953790320)
    {
      if (!*(void *)(a5 + 104)) {
        goto LABEL_72;
      }
      if ((v12 & 0x80000000) != 0) {
        goto LABEL_72;
      }
      if (!v12) {
        goto LABEL_72;
      }
      *BOOL v13 = **(unsigned char **)(a5 + 96);
      *(_DWORD *)(a5 + 16_Block_object_dispose(&STACK[0x250], 8) = 1;
      int v14 = *(char **)(a5 + 96);
      unsigned int v15 = v14 + 1;
      if (v14 >= v14 + 1) {
        goto LABEL_72;
      }
      size_t v16 = *(void *)(a5 + 104);
      if (v15 > &v14[v16]) {
        goto LABEL_72;
      }
      size_t v17 = *(void *)(a5 + 112) - 1;
      if (v17 > v16 - 1 || v17 > v16) {
        goto LABEL_72;
      }
      memmove(v14, v15, v17);
      --*(void *)(a5 + 112);
    }
    else
    {
      if (v11 > *(void *)(a5 + 104) || (v12 & 0x80000000) != 0 || v11 > v12) {
        goto LABEL_72;
      }
      memcpy(v13, *(const void **)(a5 + 96), v11);
      *(_DWORD *)(a5 + 16_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a5 + 112);
      *(void *)(a5 + 96) = 0;
      *(void *)(a5 + 104) = 0;
      *(void *)(a5 + 112) = 0;
    }
  }
  else if (*(int *)(a5 + 168) <= 0)
  {
    *a2 = 0;
    return 95;
  }
  int v19 = *(unsigned __int16 *)(a5 + 82) << 16;
  if (v19 != 720896 && v19 != 0x100000)
  {
    int v20 = *(_DWORD *)(a5 + 8);
    if (v20 <= 1935764849)
    {
      if (v20 > 1735091042)
      {
        if (v20 == 1735091043) {
          goto LABEL_35;
        }
        int v21 = 1869641075;
      }
      else
      {
        if (v20 == 1633903462) {
          goto LABEL_35;
        }
        int v21 = 1685354616;
      }
      goto LABEL_34;
    }
    if (v20 <= 1936029298)
    {
      if (v20 == 1935764850) {
        goto LABEL_35;
      }
      int v21 = 1935767394;
      goto LABEL_34;
    }
    if (v20 != 1936029299 && v20 != 1953790320)
    {
      int v21 = 1936745848;
LABEL_34:
      if (v20 == v21) {
        goto LABEL_35;
      }
      signed int v23 = (*(_DWORD *)(a5 + 168) / *(_DWORD *)(a5 + 16)) / *(_DWORD *)(a5 + 28);
      *a2 = v23;
      if (v23 >= v10 || *(_DWORD *)(a5 + 176) || (*(_DWORD *)(a5 + 80) & 0xFFFE0000 | 0x10000) == 0x50000)
      {
LABEL_47:
        uint64_t v26 = *a3;
        if (v26)
        {
          uint64_t v27 = 0;
          int v28 = 0;
          signed int v29 = *(_DWORD *)(a5 + 168) / v26;
          unsigned int v30 = *(unsigned int **)(a5 + 144);
          unsigned int v31 = a3 + 2;
          BOOL v32 = v30 + 2;
          unint64_t v33 = (unint64_t)&a3[4 * v26 + 2];
          do
          {
            if (v30)
            {
              int v34 = &v30[v27 + 2];
              BOOL v35 = v34 < v32 || v34 >= &v32[4 * *v30];
              __int16 v36 = &a3[v27 + 2];
              if (v35 || v36 < v31 || (unint64_t)v36 >= v33) {
                goto LABEL_72;
              }
              *(void *)&a3[v27 + 4] = *(void *)&v30[v27 + 4];
              *(void *)__int16 v36 = *(void *)v34;
            }
            else
            {
              unint64_t v39 = *(void *)(a5 + 160);
              unint64_t v40 = v39 + *(int *)(a5 + 172);
              unint64_t v41 = v39 + v28 * v29;
              if (v41 > v40 || v39 > v41) {
                goto LABEL_72;
              }
              if (v29 < 0) {
                goto LABEL_72;
              }
              if ((uint64_t)(v40 - v41) < v29) {
                goto LABEL_72;
              }
              unint64_t v43 = (unint64_t)&a3[v27 + 2];
              if (v43 < (unint64_t)v31 || v43 >= v33) {
                goto LABEL_72;
              }
              BOOL v44 = &a3[v27];
              *((void *)v44 + 2) = v41;
              v44[3] = v29;
            }
            ++v28;
            v27 += 4;
            LODWORD(v26) = v26 - 1;
          }
          while (v26);
        }
        uint64_t result = 0;
        goto LABEL_37;
      }
      unsigned int v24 = *(_DWORD *)(a5 + 16) * v10;
      __n[0] = v24;
      unsigned int v25 = *(_DWORD *)(a5 + 172);
      if ((int)v24 > (int)v25)
      {
        if (v9 <= a5) {
          goto LABEL_72;
        }
        ExpandCallbackBuffer(a5, __n);
        unsigned int v25 = *(_DWORD *)(a5 + 172);
        unsigned int v24 = __n[0];
      }
      if ((v25 & 0x80000000) == 0 && v24 <= v25)
      {
        bzero(*(void **)(a5 + 160), v24);
        *(_DWORD *)(a5 + 16_Block_object_dispose(&STACK[0x250], 8) = v24;
        *a2 = v24 / *(_DWORD *)(a5 + 16);
        *(_DWORD *)(a5 + 176) = 1;
        goto LABEL_47;
      }
LABEL_72:
      __break(0x5519u);
    }
  }
LABEL_35:
  a3[2] = 1;
  unsigned int v22 = *(_DWORD *)(a5 + 168);
  a3[3] = v22;
  *((void *)a3 + 2) = *(void *)(a5 + 160);
  *(void *)(a5 + 12_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(_DWORD *)(a5 + 140) = v22;
  if (v9 <= a5) {
    goto LABEL_72;
  }
  uint64_t result = 0;
  *a4 = a5 + 128;
  *a2 = 1;
LABEL_37:
  *(_DWORD *)(a5 + 16_Block_object_dispose(&STACK[0x250], 8) = 0;
  return result;
}

void _SoundDec_ScaleSpeex(uint64_t a1, float *__A, int a3)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 52))
  {
    vDSP_vsmul(__A, 1, &_SoundDec_ScaleSpeex_speexScale, __A, 1, a3);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v6 = (char *)v7 - v5;
    if (a3)
    {
      memset(v6, 170, 2 * a3);
      VSMUL_Q15_Portable((__int16 *)__A, 0x2000, v6, a3);
      VADD_Q15_Portable((__int16 *)__A, (__int16 *)v6, (__int16 *)__A, a3);
    }
    else
    {
      __break(0x5519u);
    }
  }
}

uint64_t _SoundDec_HandleCodecModeRequest(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 220))
  {
    uint64_t v4 = 0;
    goto LABEL_18;
  }
  long long v9 = *(_OWORD *)(a1 + 204);
  if (*(_DWORD *)(a1 + 48) == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299)
  {
    OSStatus v2 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x5E636D72u, 0x10u, &v9);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (!v2)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v5 = VRTraceErrorLogLevelToCSTR();
        uint64_t v6 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316674;
          uint64_t v11 = v5;
          __int16 v12 = 2080;
          BOOL v13 = "_SoundDec_SetEVSCMRInternal";
          __int16 v14 = 1024;
          int v15 = 1837;
          __int16 v16 = 1024;
          int v17 = v9;
          __int16 v18 = 1024;
          int v19 = DWORD1(v9);
          __int16 v20 = 1024;
          int v21 = DWORD2(v9);
          __int16 v22 = 1024;
          int v23 = HIDWORD(v9);
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyCMR mode=%u bandwidth=%u offset=%u indicator=%u", buf, 0x34u);
        }
      }
      uint64_t v4 = 0;
      goto LABEL_17;
    }
    uint64_t v4 = 2147811332;
    if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _SoundDec_HandleCodecModeRequest_cold_4();
      }
    }
  }
  else
  {
    uint64_t v4 = 2147811329;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _SoundDec_HandleCodecModeRequest_cold_3();
    }
  }
LABEL_17:
  *(unsigned char *)(a1 + 220) = 0;
LABEL_18:
  if (*(unsigned char *)(a1 + 222))
  {
    uint64_t v4 = _SoundDec_SetAMRCMRInternal(a1, *(unsigned char *)(a1 + 221));
    if ((v4 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _SoundDec_HandleCodecModeRequest_cold_2();
      }
    }
    int v7 = (*(unsigned char *)(a1 + 223))++ + 1;
    if (v7 == 4)
    {
      uint64_t v4 = _SoundDec_SetAMRCMRInternal(a1, 0xFu);
      if ((v4 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _SoundDec_HandleCodecModeRequest_cold_1();
        }
      }
      *(unsigned char *)(a1 + 222) = 0;
    }
  }
  return v4;
}

uint64_t _SoundDec_SetAMRCMRInternal(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811332;
  unsigned __int8 inPropertyData = a2;
  if (!a1) {
    return 2147811329;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3 != 1935764850 && v3 != 1935767394)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    if (v5 != 1935767394 && v5 != 1935764850) {
      return 2147811329;
    }
  }
  OSStatus v7 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x5E636D72u, 1u, &inPropertyData);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (!v7)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      signed int v10 = *MEMORY[0x1E4F47A50];
      uint64_t v2 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return v2;
      }
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v14 = v9;
      __int16 v15 = 2080;
      __int16 v16 = "_SoundDec_SetAMRCMRInternal";
      __int16 v17 = 1024;
      int v18 = 1854;
      __int16 v19 = 1024;
      int v20 = inPropertyData;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyCMR mode=%u", buf, 0x22u);
    }
    return 0;
  }
  if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _SoundDec_SetAMRCMRInternal_cold_1();
    }
  }
  return v2;
}

void SoundDec_Encode(uint64_t a1, uint64_t a2, int a3, void *a4, unsigned int a5, UInt32 *a6, AudioStreamPacketDescription *a7, int a8)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  ioOutputDataPacketuint64_t Size = -1431655766;
  if (a1 && a7 && a2 && (__int16 v12 = *(OpaqueAudioConverter **)(a1 + 88)) != 0)
  {
    if (a8) {
      AudioConverterReset(v12);
    }
    if (*(_DWORD *)(a1 + 240) != *(_DWORD *)(a1 + 232) || *(_DWORD *)(a1 + 244) != *(_DWORD *)(a1 + 236)) {
      _SoundDec_SetEVSRFParams(a1, (OSStatus *)(a1 + 232));
    }
    if (*(unsigned char *)(a1 + 228))
    {
      int inPropertyData = *(_DWORD *)(a1 + 224);
      if (*(_DWORD *)(a1 + 48) == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299)
      {
        OSStatus v15 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x5E626477u, 4u, &inPropertyData);
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v15)
        {
          if (ErrorLogLevelForModule >= 3)
          {
            uint64_t v17 = VRTraceErrorLogLevelToCSTR();
            int v18 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v82 = v17;
              __int16 v83 = 2080;
              long long v84 = "_SoundDec_SetEVSAudioCodecPropertyMaxBandwidth";
              __int16 v85 = 1024;
              int v86 = 1754;
              __int16 v87 = 1024;
              *(_DWORD *)uint64_t v88 = inPropertyData;
              *(_WORD *)&v88[4] = 1024;
              *(_DWORD *)&v88[6] = v15;
              _os_log_error_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyAdjustMaxBandwidth for bandwidth=%u with error %08x", buf, 0x28u);
            }
          }
        }
        else if (ErrorLogLevelForModule >= 6)
        {
          uint64_t v19 = VRTraceErrorLogLevelToCSTR();
          int v20 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v82 = v19;
            __int16 v83 = 2080;
            long long v84 = "_SoundDec_SetEVSAudioCodecPropertyMaxBandwidth";
            __int16 v85 = 1024;
            int v86 = 1757;
            __int16 v87 = 1024;
            *(_DWORD *)uint64_t v88 = inPropertyData;
            _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyAdjustMaxBandwidth bandwidth=%u", buf, 0x22u);
          }
        }
      }
      *(unsigned char *)(a1 + 22_Block_object_dispose(&STACK[0x250], 8) = 0;
    }
    unsigned int v21 = *(_DWORD *)(a1 + 200);
    if (v21 != *(_DWORD *)(a1 + 196))
    {
      int v22 = *(unsigned __int8 *)(a1 + 184);
      int inPropertyData = *(_DWORD *)(a1 + 200);
      if (*(_DWORD *)(a1 + 188))
      {
        int v79 = (int)BitrateToQuality(*(unsigned __int16 *)(a1 + 86) << 16, v21, *(double *)(a1 + 40), *(_DWORD *)(a1 + 68));
        OSStatus v23 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x5E71616Cu, 4u, &v79);
        if (v22)
        {
          LODWORD(v24) = *(_DWORD *)(a1 + 60);
          unsigned int v78 = ((double)v21 / (*(double *)(a1 + 40) / (double)v24));
          OSStatus v25 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x70616B6Cu, 4u, &v78);
          if (v25)
          {
            OSStatus v26 = v25;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v75 = VRTraceErrorLogLevelToCSTR();
              int log = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CMTime buf = 136316674;
                uint64_t v82 = v75;
                __int16 v83 = 2080;
                long long v84 = "_SoundDec_SetBitrateInternal";
                __int16 v85 = 1024;
                int v86 = 1381;
                __int16 v87 = 1024;
                *(_DWORD *)uint64_t v88 = 1381;
                *(_WORD *)&v88[4] = 1024;
                *(_DWORD *)&v88[6] = v78;
                LOWORD(v89) = 1024;
                *(_DWORD *)((char *)&v89 + 2) = v21;
                HIWORD(v89) = 1024;
                *(_DWORD *)uint64_t v90 = v26;
                _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: Failed to set max packet size[%d] for bitrate[%d] with err[%d]", buf, 0x34u);
              }
            }
          }
        }
      }
      else
      {
        OSStatus v23 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x62726174u, 4u, &inPropertyData);
      }
      int v27 = VRTraceGetErrorLogLevelForModule();
      if (v23)
      {
        if (v27 >= 3)
        {
          uint64_t v28 = VRTraceErrorLogLevelToCSTR();
          signed int v29 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v82 = v28;
            __int16 v83 = 2080;
            long long v84 = "_SoundDec_SetBitrateInternal";
            __int16 v85 = 1024;
            int v86 = 1390;
            __int16 v87 = 1024;
            *(_DWORD *)uint64_t v88 = 1390;
            *(_WORD *)&v88[4] = 1024;
            *(_DWORD *)&v88[6] = inPropertyData;
            LOWORD(v89) = 1024;
            *(_DWORD *)((char *)&v89 + 2) = v23;
            _os_log_error_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: Failed to set bitrate[%d]: %d", buf, 0x2Eu);
          }
        }
      }
      else
      {
        if (v27 >= 7)
        {
          uint64_t v30 = VRTraceErrorLogLevelToCSTR();
          unsigned int v31 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v32 = *(_DWORD *)(a1 + 188);
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v82 = v30;
            __int16 v83 = 2080;
            long long v84 = "_SoundDec_SetBitrateInternal";
            __int16 v85 = 1024;
            int v86 = 1394;
            __int16 v87 = 1024;
            *(_DWORD *)uint64_t v88 = inPropertyData;
            *(_WORD *)&v88[4] = 1024;
            *(_DWORD *)&v88[6] = v32;
            LOWORD(v89) = 1024;
            *(_DWORD *)((char *)&v89 + 2) = v22;
            _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NEW AUDIO BITRATE (vbr)=%d fvbrcodec=%d enablePacketSizeLimit=%d", buf, 0x2Eu);
          }
        }
        *(_DWORD *)(a1 + 196) = inPropertyData;
      }
    }
    int v33 = *(unsigned __int8 *)(a1 + 260);
    if (*(unsigned __int8 *)(a1 + 248) != v33)
    {
      int v34 = *(unsigned __int8 *)(a1 + 248);
      int v35 = *(_DWORD *)(a1 + 252);
      int v36 = *(_DWORD *)(a1 + 256);
      if (v33 != v34 || *(_DWORD *)(a1 + 264) != v35 || *(_DWORD *)(a1 + 268) != v36)
      {
        if (!*(unsigned char *)(a1 + 248)) {
          int v36 = 0;
        }
        int inPropertyData = v36;
        OSStatus v37 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x5E737262u, 4u, &inPropertyData);
        int v38 = VRTraceGetErrorLogLevelForModule();
        if (v37)
        {
          if (v38 >= 3)
          {
            uint64_t v39 = VRTraceErrorLogLevelToCSTR();
            unint64_t v40 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v82 = v39;
              __int16 v83 = 2080;
              long long v84 = "_SoundDec_EnableShortREDInternal";
              __int16 v85 = 1024;
              int v86 = 1915;
              __int16 v87 = 1024;
              *(_DWORD *)uint64_t v88 = inPropertyData;
              *(_WORD *)&v88[4] = 1024;
              *(_DWORD *)&v88[6] = v37;
              _os_log_error_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioCodecPrivatePropertyShortREDBitrate to shortREDBitrate=%u with error=%d", buf, 0x28u);
            }
          }
        }
        else
        {
          if (v38 >= 7)
          {
            uint64_t v41 = VRTraceErrorLogLevelToCSTR();
            __int16 v42 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315906;
              uint64_t v82 = v41;
              __int16 v83 = 2080;
              long long v84 = "_SoundDec_EnableShortREDInternal";
              __int16 v85 = 1024;
              int v86 = 1918;
              __int16 v87 = 1024;
              *(_DWORD *)uint64_t v88 = inPropertyData;
              _os_log_impl(&dword_1E1EA4000, v42, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyShortREDBitrate shortREDBitrate=%u", buf, 0x22u);
            }
          }
          *(unsigned char *)(a1 + 260) = v34;
          if (v34) {
            int v43 = v35;
          }
          else {
            int v43 = 0;
          }
          *(_DWORD *)(a1 + 264) = v43;
        }
      }
    }
    _SoundDec_HandleCodecModeRequest(a1);
    int v44 = *(_DWORD *)(a1 + 84);
    unsigned int v45 = v44 & 0xFFFF0000;
    int v46 = *(_DWORD *)(a1 + 16) * a3 * *(_DWORD *)(a1 + 28);
    if ((v44 & 0xFFFF0000) != 0x1000000)
    {
      *(void *)(a1 + 144) = a2;
      *(_DWORD *)(a1 + 16_Block_object_dispose(&STACK[0x250], 8) = v46;
      goto LABEL_63;
    }
    unint64_t v47 = *(void *)(a2 + 16);
    unint64_t v48 = *(unsigned int *)(a2 + 12);
    if (*(unsigned char *)(a1 + 120))
    {
      free(*(void **)(a1 + 96));
      *(unsigned char *)(a1 + 120) = 0;
    }
    if (v47 <= v47 + v48 && v46 <= v48)
    {
      *(void *)(a1 + 104) = v46;
      *(void *)(a1 + 112) = v46;
      *(void *)(a1 + 96) = v47;
LABEL_63:
      unsigned int v49 = (v44 - 0x10000) >> 16;
      UInt32 v50 = 1;
      if (v49 <= 4 && v49 != 2)
      {
        double v51 = *(double *)(a1 + 40);
        double v52 = v51 * (double)(v46 / *(_DWORD *)(a1 + 28));
        LODWORD(v51) = *(_DWORD *)(a1 + 60);
        double v53 = v52 / (double)*(unint64_t *)&v51;
        double v54 = *(double *)a1;
        LODWORD(v54) = *(_DWORD *)(a1 + 24);
        UInt32 v50 = (v53 / *(double *)a1 / (double)*(unint64_t *)&v54);
      }
      ioOutputDataPacketuint64_t Size = v50;
      unsigned int v55 = *(_DWORD *)(a1 + 64);
      if (v55)
      {
        UInt32 v56 = *a6 / v55;
        if (v50 > v56) {
          ioOutputDataPacketuint64_t Size = v56;
        }
      }
      uint64_t v57 = *(void *)(a1 + 152);
      *(_DWORD *)uint64_t v57 = 1;
      *(_DWORD *)(v57 + _Block_object_dispose(&STACK[0x250], 8) = 1;
      *(_DWORD *)(v57 + 12) = *a6;
      *(void *)(v57 + 16) = a4;
      OSStatus v58 = AudioConverterFillComplexBuffer(*(AudioConverterRef *)(a1 + 88), (AudioConverterComplexInputDataProc)SoundDec_DataProc, (void *)a1, &ioOutputDataPacketSize, (AudioBufferList *)v57, a7);
      if (!v58) {
        goto LABEL_86;
      }
      OSStatus v59 = v58;
      int v60 = v45 == 0x1000000 ? 8 : 7;
      if (v60 > (int)VRTraceGetErrorLogLevelForModule()) {
        goto LABEL_86;
      }
      uint64_t v61 = VRTraceErrorLogLevelToCSTR();
      if (v45 == 0x1000000)
      {
        __int16 v62 = *MEMORY[0x1E4F47A50];
        __int16 v63 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v70 = FourccToCStr(*(_DWORD *)(a1 + 8));
            int v71 = (int)*(double *)a1;
            int v72 = FourccToCStr(*(_DWORD *)(a1 + 48));
            int v73 = (int)*(double *)(a1 + 40);
            OSStatus v74 = " (AVC Out of Data error)";
            if (v59 != 95) {
              OSStatus v74 = "";
            }
            *(_DWORD *)CMTime buf = 136317954;
            uint64_t v82 = v61;
            __int16 v83 = 2080;
            long long v84 = "SoundDec_Encode";
            __int16 v85 = 1024;
            int v86 = 1293;
            __int16 v87 = 2080;
            *(void *)uint64_t v88 = "SoundDec_Encode";
            *(_WORD *)&v88[8] = 2080;
            int v89 = v70;
            *(_WORD *)uint64_t v90 = 1024;
            *(_DWORD *)&v90[2] = v71;
            __int16 v91 = 2080;
            uint64_t v92 = v72;
            __int16 v93 = 1024;
            int v94 = v73;
            __int16 v95 = 1024;
            OSStatus v96 = v59;
            __int16 v97 = 2080;
            size_t v98 = v74;
            __int16 v99 = 1024;
            int v100 = v46;
            __int16 v101 = 1024;
            UInt32 v102 = ioOutputDataPacketSize;
            _os_log_debug_impl(&dword_1E1EA4000, v62, OS_LOG_TYPE_DEBUG, " [%s] %s:%d %s AudioConverter (%s/%d -> %s/%d) returned error %d%s during FillComplexBuffer inBytes[%d] packets[%d].", buf, 0x62u);
          }
          goto LABEL_86;
        }
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v64 = FourccToCStr(*(_DWORD *)(a1 + 8));
          int v65 = (int)*(double *)a1;
          __int16 v66 = FourccToCStr(*(_DWORD *)(a1 + 48));
          int v67 = (int)*(double *)(a1 + 40);
          int v68 = " (AVC Out of Data error)";
          UInt32 v69 = ioOutputDataPacketSize;
          if (v59 != 95) {
            int v68 = "";
          }
LABEL_84:
          *(_DWORD *)CMTime buf = 136317954;
          uint64_t v82 = v61;
          __int16 v83 = 2080;
          long long v84 = "SoundDec_Encode";
          __int16 v85 = 1024;
          int v86 = 1293;
          __int16 v87 = 2080;
          *(void *)uint64_t v88 = "SoundDec_Encode";
          *(_WORD *)&v88[8] = 2080;
          int v89 = v64;
          *(_WORD *)uint64_t v90 = 1024;
          *(_DWORD *)&v90[2] = v65;
          __int16 v91 = 2080;
          uint64_t v92 = v66;
          __int16 v93 = 1024;
          int v94 = v67;
          __int16 v95 = 1024;
          OSStatus v96 = v59;
          __int16 v97 = 2080;
          size_t v98 = v68;
          __int16 v99 = 1024;
          int v100 = v46;
          __int16 v101 = 1024;
          UInt32 v102 = v69;
          _os_log_impl(&dword_1E1EA4000, v62, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s AudioConverter (%s/%d -> %s/%d) returned error %d%s during FillComplexBuffer inBytes[%d] packets[%d].", buf, 0x62u);
        }
      }
      else
      {
        __int16 v62 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          __int16 v64 = FourccToCStr(*(_DWORD *)(a1 + 8));
          int v65 = (int)*(double *)a1;
          __int16 v66 = FourccToCStr(*(_DWORD *)(a1 + 48));
          int v67 = (int)*(double *)(a1 + 40);
          int v68 = " (AVC Out of Data error)";
          UInt32 v69 = ioOutputDataPacketSize;
          if (v59 != 95) {
            int v68 = "";
          }
          goto LABEL_84;
        }
      }
LABEL_86:
      *a6 = ioOutputDataPacketSize;
      return;
    }
  }
  else if ((a5 & 0x80000000) == 0)
  {
    bzero(a4, a5);
    return;
  }
  __break(0x5519u);
}

uint64_t _SoundDec_SetEVSRFParams(uint64_t a1, OSStatus *inPropertyData)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811329;
  if (a1 && (*(_DWORD *)(a1 + 48) == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299))
  {
    OSStatus v5 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x5E726670u, 8u, inPropertyData);
    if (!v5)
    {
      *(void *)(a1 + 240) = *(void *)inPropertyData;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v10 = VRTraceErrorLogLevelToCSTR();
        uint64_t v11 = *MEMORY[0x1E4F47A50];
        uint64_t v2 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          return v2;
        }
        OSStatus v12 = *inPropertyData;
        OSStatus v13 = inPropertyData[1];
        int v15 = 136316162;
        uint64_t v16 = v10;
        __int16 v17 = 2080;
        int v18 = "_SoundDec_SetEVSRFParams";
        __int16 v19 = 1024;
        int v20 = 1516;
        __int16 v21 = 1024;
        OSStatus v22 = v12;
        __int16 v23 = 1024;
        OSStatus v24 = v13;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyEVSRFParams offset=%d indicator=%d", (uint8_t *)&v15, 0x28u);
      }
      return 0;
    }
    OSStatus v6 = v5;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      size_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        OSStatus v9 = *inPropertyData;
        int v15 = 136316162;
        uint64_t v16 = v7;
        __int16 v17 = 2080;
        int v18 = "_SoundDec_SetEVSRFParams";
        __int16 v19 = 1024;
        int v20 = 1511;
        __int16 v21 = 1024;
        OSStatus v22 = v9;
        __int16 v23 = 1024;
        OSStatus v24 = v6;
        _os_log_error_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyEVSRFParams %d with error %08x", (uint8_t *)&v15, 0x28u);
      }
    }
  }
  return v2;
}

uint64_t SoundDec_Reset(uint64_t a1)
{
  uint64_t result = 2147811329;
  if (a1)
  {
    int v3 = *(OpaqueAudioConverter **)(a1 + 88);
    if (v3)
    {
      AudioConverterReset(v3);
      return 0;
    }
  }
  return result;
}

uint64_t SoundDec_SetDTXPrimerSamples(uint64_t a1, void *inPropertyData, UInt32 a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147811329;
  if (a1)
  {
    uint64_t v4 = *(OpaqueAudioConverter **)(a1 + 88);
    if (v4)
    {
      OSStatus v7 = AudioConverterSetProperty(v4, 0x5E636E70u, a3, inPropertyData);
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (!v7)
      {
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v11 = VRTraceErrorLogLevelToCSTR();
          OSStatus v12 = *MEMORY[0x1E4F47A50];
          uint64_t v3 = 0;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            return v3;
          }
          int v14 = 136316162;
          uint64_t v15 = v11;
          __int16 v16 = 2080;
          __int16 v17 = "SoundDec_SetDTXPrimerSamples";
          __int16 v18 = 1024;
          int v19 = 1357;
          __int16 v20 = 2048;
          *(void *)__int16 v21 = inPropertyData;
          *(_WORD *)&v21[8] = 1024;
          *(_DWORD *)&v21[10] = a3;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded with dtx encoder primer sample buffer=%p bytes=%u", (uint8_t *)&v14, 0x2Cu);
        }
        return 0;
      }
      if (ErrorLogLevelForModule >= 3)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        uint64_t v10 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v14 = 136316674;
          uint64_t v15 = v9;
          __int16 v16 = 2080;
          __int16 v17 = "SoundDec_SetDTXPrimerSamples";
          __int16 v18 = 1024;
          int v19 = 1354;
          __int16 v20 = 1024;
          *(_DWORD *)__int16 v21 = 1354;
          *(_WORD *)&v21[4] = 2048;
          *(void *)&v21[6] = inPropertyData;
          __int16 v22 = 1024;
          UInt32 v23 = a3;
          __int16 v24 = 1024;
          OSStatus v25 = v7;
          _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: Failed to set DTX encoder primer sample buffer[%p] bytes[%d] err[%d]", (uint8_t *)&v14, 0x38u);
        }
      }
    }
  }
  return v3;
}

uint64_t SoundDec_SetDTX(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811329;
  if (a1)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    BOOL v4 = v3 == 1935764850 || v3 == 1935767394;
    if (v4
      || ((int v5 = *(_DWORD *)(a1 + 8), v5 != 1935764850) ? (v6 = v3 == 1936029299) : (v6 = 1),
          !v6 ? (BOOL v7 = v5 == 1935767394) : (BOOL v7 = 1),
          !v7 ? (BOOL v8 = v5 == 1936029299) : (BOOL v8 = 1),
          v8))
    {
      BOOL inPropertyData = a2 != 0;
      OSStatus v9 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x65736164u, 4u, &inPropertyData);
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (!v9)
      {
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v11 = VRTraceErrorLogLevelToCSTR();
          OSStatus v12 = *MEMORY[0x1E4F47A50];
          uint64_t v2 = 0;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            return v2;
          }
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v16 = v11;
          __int16 v17 = 2080;
          __int16 v18 = "SoundDec_SetDTX";
          __int16 v19 = 1024;
          int v20 = 1441;
          __int16 v21 = 1024;
          BOOL v22 = inPropertyData;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyEnableSAD dtxEnabled=%u", buf, 0x22u);
        }
        return 0;
      }
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SoundDec_SetDTX_cold_1();
        }
      }
    }
  }
  return v2;
}

uint64_t SoundDec_SetEVSSIDPeriod(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811329;
  int inPropertyData = a2;
  if (a1 && (*(_DWORD *)(a1 + 48) == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299))
  {
    OSStatus v3 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x73696470u, 4u, &inPropertyData);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (!v3)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        BOOL v8 = *MEMORY[0x1E4F47A50];
        uint64_t v2 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          return v2;
        }
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v12 = v7;
        __int16 v13 = 2080;
        int v14 = "SoundDec_SetEVSSIDPeriod";
        __int16 v15 = 1024;
        int v16 = 1457;
        __int16 v17 = 1024;
        int v18 = inPropertyData;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyEVSSIDPeriod evsSIDPeriod=%u ", buf, 0x22u);
      }
      return 0;
    }
    if (ErrorLogLevelForModule >= 3)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      BOOL v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v12 = v5;
        __int16 v13 = 2080;
        int v14 = "SoundDec_SetEVSSIDPeriod";
        __int16 v15 = 1024;
        int v16 = 1454;
        __int16 v17 = 1024;
        int v18 = inPropertyData;
        __int16 v19 = 1024;
        OSStatus v20 = v3;
        _os_log_error_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyEVSSIDPeriod %d with error %08x", buf, 0x28u);
      }
    }
  }
  return v2;
}

uint64_t SoundDec_SetEVSCodecCMRMode(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811329;
  int inPropertyData = a2;
  if (a1 && (*(_DWORD *)(a1 + 48) == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299))
  {
    OSStatus v3 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x63657673u, 4u, &inPropertyData);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (!v3)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        BOOL v8 = *MEMORY[0x1E4F47A50];
        uint64_t v2 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          return v2;
        }
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v12 = v7;
        __int16 v13 = 2080;
        int v14 = "SoundDec_SetEVSCodecCMRMode";
        __int16 v15 = 1024;
        int v16 = 1472;
        __int16 v17 = 1024;
        int v18 = inPropertyData;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyEVSCMRSettingInSDPOffer evsCMRMode=%d ", buf, 0x22u);
      }
      return 0;
    }
    if (ErrorLogLevelForModule >= 3)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      BOOL v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v12 = v5;
        __int16 v13 = 2080;
        int v14 = "SoundDec_SetEVSCodecCMRMode";
        __int16 v15 = 1024;
        int v16 = 1469;
        __int16 v17 = 1024;
        int v18 = inPropertyData;
        __int16 v19 = 1024;
        OSStatus v20 = v3;
        _os_log_error_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyEVSCMRSettingInSDPOffer with evsCMRMode=%d with error=%08x", buf, 0x28u);
      }
    }
  }
  return v2;
}

uint64_t SoundDec_SetCodecInitialBitrate(uint64_t a1, int a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int inPropertyData = a2;
  OSStatus v5 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x62726174u, 4u, &inPropertyData);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v5)
  {
    uint64_t v9 = 2147811329;
    if (ErrorLogLevelForModule >= 3)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v25 = v10;
        __int16 v26 = 2080;
        int v27 = "SoundDec_SetCodecInitialBitrate";
        __int16 v28 = 1024;
        int v29 = 1485;
        __int16 v30 = 1024;
        int v31 = inPropertyData;
        __int16 v32 = 1024;
        unsigned int v33 = v5;
        _os_log_error_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPropertyCurrentTargetBitRate for bitrate=%u with error %08x", buf, 0x28u);
      }
    }
  }
  else
  {
    if (ErrorLogLevelForModule >= 6)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      __int16 v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v25 = v12;
        __int16 v26 = 2080;
        int v27 = "SoundDec_SetCodecInitialBitrate";
        __int16 v28 = 1024;
        int v29 = 1488;
        __int16 v30 = 1024;
        int v31 = inPropertyData;
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPropertyCurrentTargetBitRate bitrate=%u", buf, 0x22u);
      }
    }
    if (a3)
    {
      LODWORD(v7) = inPropertyData;
      LODWORD(v_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a1 + 60);
      unsigned int v22 = ((double)v7 / (*(double *)(a1 + 40) / (double)v8));
      OSStatus v14 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x70616B6Cu, 4u, &v22);
      int v15 = VRTraceGetErrorLogLevelForModule();
      if (v14)
      {
        if (v15 >= 3)
        {
          uint64_t v16 = VRTraceErrorLogLevelToCSTR();
          __int16 v17 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136316674;
            uint64_t v25 = v16;
            __int16 v26 = 2080;
            int v27 = "SoundDec_SetCodecInitialBitrate";
            __int16 v28 = 1024;
            int v29 = 1494;
            __int16 v30 = 1024;
            int v31 = 1494;
            __int16 v32 = 1024;
            unsigned int v33 = v22;
            __int16 v34 = 1024;
            int v35 = inPropertyData;
            __int16 v36 = 1024;
            OSStatus v37 = v14;
            _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: Failed to set max packet size[%d] for bitrate[%d] with err[%d]", buf, 0x34u);
          }
        }
      }
      else if (v15 >= 7)
      {
        uint64_t v18 = VRTraceErrorLogLevelToCSTR();
        __int16 v19 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v25 = v18;
          __int16 v26 = 2080;
          int v27 = "SoundDec_SetCodecInitialBitrate";
          __int16 v28 = 1024;
          int v29 = 1496;
          __int16 v30 = 1024;
          int v31 = v22;
          _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set kAudioCodecPropertyPacketSizeLimitForVBR value=%d", buf, 0x22u);
        }
      }
    }
    uint64_t v9 = 0;
    int v20 = inPropertyData;
    *(_DWORD *)(a1 + 196) = inPropertyData;
    *(_DWORD *)(a1 + 200) = v20;
  }
  return v9;
}

uint64_t SoundDec_SetEVSChannelAwareOffset(uint64_t a1, int *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = 2147811329;
  if (a1 && (*(_DWORD *)(a1 + 48) == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299))
  {
    *(void *)(a1 + 232) = *(void *)a2;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      BOOL v6 = *MEMORY[0x1E4F47A50];
      BOOL v7 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v7) {
        return result;
      }
      int v8 = *a2;
      int v9 = a2[1];
      int v10 = 136316162;
      uint64_t v11 = v5;
      __int16 v12 = 2080;
      __int16 v13 = "SoundDec_SetEVSChannelAwareOffset";
      __int16 v14 = 1024;
      int v15 = 1525;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SoundDec_SetEVSChannelAwareOffset Requested EVSRFParams offset=%d indicator=%d", (uint8_t *)&v10, 0x28u);
    }
    return 0;
  }
  return result;
}

uint64_t SoundDec_SetEVSFormatHandling(uint64_t a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811329;
  if (!a1 || *(_DWORD *)(a1 + 48) != 1936029299 && *(_DWORD *)(a1 + 8) != 1936029299) {
    return v2;
  }
  int inPropertyData = 0;
  switch(a2)
  {
    case 3:
      int v3 = 3;
      goto LABEL_10;
    case 2:
      int v3 = 2;
      goto LABEL_10;
    case 1:
      int v3 = 1;
LABEL_10:
      int inPropertyData = v3;
      break;
  }
  OSStatus v4 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x66657673u, 4u, &inPropertyData);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (!v4)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      int v9 = *MEMORY[0x1E4F47A50];
      uint64_t v2 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return v2;
      }
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v13 = v8;
      __int16 v14 = 2080;
      int v15 = "SoundDec_SetEVSFormatHandling";
      __int16 v16 = 1024;
      int v17 = 1555;
      __int16 v18 = 1024;
      int v19 = inPropertyData;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyEVSFormatHandling evsFormatHandling=%u", buf, 0x22u);
    }
    return 0;
  }
  if (ErrorLogLevelForModule >= 3)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    BOOL v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v13 = v6;
      __int16 v14 = 2080;
      int v15 = "SoundDec_SetEVSFormatHandling";
      __int16 v16 = 1024;
      int v17 = 1552;
      __int16 v18 = 1024;
      int v19 = inPropertyData;
      __int16 v20 = 1024;
      OSStatus v21 = v4;
      _os_log_error_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyEVSFormatHandling %d with error %08x", buf, 0x28u);
    }
  }
  return v2;
}

uint64_t SoundDec_SetEVSDecodeRF(uint64_t a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811329;
  if (a1 && (*(_DWORD *)(a1 + 48) == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299))
  {
    inPropertyData[0] = -1431655935;
    inPropertyData[1] = a2;
    OSStatus v4 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x5E647066u, 8u, inPropertyData);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (!v4)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v8 = VRTraceErrorLogLevelToCSTR();
        int v9 = *MEMORY[0x1E4F47A50];
        uint64_t v2 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          return v2;
        }
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v13 = v8;
        __int16 v14 = 2080;
        int v15 = "SoundDec_SetEVSDecodeRF";
        __int16 v16 = 1024;
        int v17 = 1571;
        __int16 v18 = 1024;
        int v19 = a2;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyEVSDecodeRF frameType=%u", buf, 0x22u);
      }
      return 0;
    }
    if (ErrorLogLevelForModule >= 3)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      BOOL v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v13 = v6;
        __int16 v14 = 2080;
        int v15 = "SoundDec_SetEVSDecodeRF";
        __int16 v16 = 1024;
        int v17 = 1568;
        __int16 v18 = 1024;
        int v19 = a2;
        __int16 v20 = 1024;
        OSStatus v21 = v4;
        _os_log_error_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyEVSDecodeRF %d with error %08x", buf, 0x28u);
      }
    }
  }
  return v2;
}

uint64_t SoundDec_SetAMRPayloadFormat(uint64_t a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811329;
  if (a1)
  {
    int v4 = *(_DWORD *)(a1 + 48);
    BOOL v5 = v4 == 1935764850 || v4 == 1935767394;
    if (v5 || ((int v6 = *(_DWORD *)(a1 + 8), v6 != 1935767394) ? (v7 = v6 == 1935764850) : (v7 = 1), v7))
    {
      int inPropertyData = 1;
      if (a2)
      {
        int inPropertyData = 2;
        *(_DWORD *)(a1 + 18_Block_object_dispose(&STACK[0x250], 8) = 1;
      }
      OSStatus v8 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x73617066u, 4u, &inPropertyData);
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (!v8)
      {
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v12 = VRTraceErrorLogLevelToCSTR();
          uint64_t v13 = *MEMORY[0x1E4F47A50];
          uint64_t v2 = 0;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            return v2;
          }
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v17 = v12;
          __int16 v18 = 2080;
          int v19 = "SoundDec_SetAMRPayloadFormat";
          __int16 v20 = 1024;
          int v21 = 1592;
          __int16 v22 = 1024;
          int v23 = a2;
          _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyAMRPayloadFormat isOctetAligned=%u", buf, 0x22u);
        }
        return 0;
      }
      if (ErrorLogLevelForModule >= 3)
      {
        uint64_t v10 = VRTraceErrorLogLevelToCSTR();
        uint64_t v11 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v17 = v10;
          __int16 v18 = 2080;
          int v19 = "SoundDec_SetAMRPayloadFormat";
          __int16 v20 = 1024;
          int v21 = 1589;
          __int16 v22 = 1024;
          int v23 = 1589;
          __int16 v24 = 1024;
          int v25 = inPropertyData;
          __int16 v26 = 1024;
          OSStatus v27 = v8;
          _os_log_error_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyAMRPayloadFormat %d with error %08x", buf, 0x2Eu);
        }
      }
    }
  }
  return v2;
}

uint64_t SoundDec_SetAACELDPacketLossConcealmentAlgorithm(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = 2147811329;
  if (a1)
  {
    int v3 = *(unsigned __int16 *)(a1 + 82) << 16;
    if (v3 == 0x100000 || v3 == 720896)
    {
      int inPropertyData = VCHardwareSettingsEmbedded_AACELDPacketLossConcealmentAlgorithm();
      if (inPropertyData == 6 && *(double *)a1 > 24000.0 && *(_DWORD *)(a1 + 28) == 2) {
        int inPropertyData = 5;
      }
      OSStatus v4 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x636F6E6Du, 4u, &inPropertyData);
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (!v4)
      {
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v8 = VRTraceErrorLogLevelToCSTR();
          int v9 = *MEMORY[0x1E4F47A50];
          uint64_t v1 = 0;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            return v1;
          }
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v13 = v8;
          __int16 v14 = 2080;
          int v15 = "SoundDec_SetAACELDPacketLossConcealmentAlgorithm";
          __int16 v16 = 1024;
          int v17 = 1617;
          __int16 v18 = 1024;
          int v19 = inPropertyData;
          _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPropertyConcealmentMode plcMode=%u", buf, 0x22u);
        }
        return 0;
      }
      if (ErrorLogLevelForModule >= 3)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        BOOL v7 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v13 = v6;
          __int16 v14 = 2080;
          int v15 = "SoundDec_SetAACELDPacketLossConcealmentAlgorithm";
          __int16 v16 = 1024;
          int v17 = 1614;
          __int16 v18 = 1024;
          int v19 = 1614;
          __int16 v20 = 1024;
          int v21 = inPropertyData;
          __int16 v22 = 1024;
          OSStatus v23 = v4;
          _os_log_error_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: AudioConverterSetProperty failed to set property kAudioCodecPropertyConcealmentMode %d with error %08x", buf, 0x2Eu);
        }
      }
    }
  }
  return v1;
}

uint64_t SoundDec_SetEnablePacketSizeLimitForVBR(uint64_t a1, char a2)
{
  if (!a1) {
    return 2147811329;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 184) = a2;
  return result;
}

uint64_t SoundDec_SetBitrate(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 2147811329;
  }
  *(_DWORD *)(a1 + 200) = a2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    OSStatus v4 = *MEMORY[0x1E4F47A50];
    BOOL v5 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
    int v7 = 136315906;
    uint64_t v8 = v3;
    __int16 v9 = 2080;
    uint64_t v10 = "SoundDec_SetBitrate";
    __int16 v11 = 1024;
    int v12 = 1635;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SoundDec_SetBitrate Requested bitrate: %d", (uint8_t *)&v7, 0x22u);
  }
  return 0;
}

uint64_t SoundDec_GetMagicCookie(uint64_t a1, void *outPropertyData, UInt32 *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147811329;
  if (a1)
  {
    OSStatus Property = AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 88), 0x6B756B69u, a3, outPropertyData);
    if (Property)
    {
      OSStatus v7 = Property;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v8 = VRTraceErrorLogLevelToCSTR();
        __int16 v9 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          UInt32 v10 = *a3;
          int v12 = 136316418;
          uint64_t v13 = v8;
          __int16 v14 = 2080;
          uint64_t v15 = "SoundDec_GetMagicCookie";
          __int16 v16 = 1024;
          int v17 = 1648;
          __int16 v18 = 2048;
          int v19 = outPropertyData;
          __int16 v20 = 1024;
          UInt32 v21 = v10;
          __int16 v22 = 1024;
          OSStatus v23 = v7;
          _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d SoundDec_GetMagicCookie Failed to retrieve cookie [%p, %u] %d", (uint8_t *)&v12, 0x32u);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t SoundDec_GetSpeechCodecBundleData(uint64_t a1, uint64_t *outPropertyData)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147811332;
  uint64_t result = 2147811329;
  if (a1 && outPropertyData)
  {
    ioPropertyDatauint64_t Size = 336;
    OSStatus Property = AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 88), 0x626E6464u, &ioPropertyDataSize, outPropertyData);
    if (!Property) {
      return 0;
    }
    OSStatus v7 = Property;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      __int16 v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *outPropertyData;
        int v11 = *((_DWORD *)outPropertyData + 2);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v14 = v8;
        __int16 v15 = 2080;
        __int16 v16 = "SoundDec_GetSpeechCodecBundleData";
        __int16 v17 = 1024;
        int v18 = 1665;
        __int16 v19 = 2048;
        uint64_t v20 = v10;
        __int16 v21 = 1024;
        int v22 = v11;
        __int16 v23 = 1024;
        OSStatus v24 = v7;
        _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d SoundDec_GetSpeechCodecBundleData Failed to get bundle data [%p, %u] %d", buf, 0x32u);
      }
    }
    return v3;
  }
  return result;
}

uint64_t SoundDec_SetMagicCookie(uint64_t a1, void *inPropertyData, UInt32 inPropertyDataSize)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147811329;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 192)
      || (OSStatus v10 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x6B756B69u, inPropertyDataSize, inPropertyData), *(_DWORD *)(a1 + 192) = 1, !v10))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        OSStatus v7 = *MEMORY[0x1E4F47A50];
        uint64_t v3 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          return v3;
        }
        int v14 = 136315906;
        uint64_t v15 = v6;
        __int16 v16 = 2080;
        __int16 v17 = "SoundDec_SetMagicCookie";
        __int16 v18 = 1024;
        int v19 = 1687;
        __int16 v20 = 1024;
        LODWORD(v21) = inPropertyDataSize;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SoundDec_SetMagicCookie succeeded %d", (uint8_t *)&v14, 0x22u);
      }
      return 0;
    }
    OSStatus v11 = v10;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      uint64_t v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v14 = 136316418;
        uint64_t v15 = v12;
        __int16 v16 = 2080;
        __int16 v17 = "SoundDec_SetMagicCookie";
        __int16 v18 = 1024;
        int v19 = 1684;
        __int16 v20 = 2048;
        __int16 v21 = inPropertyData;
        __int16 v22 = 1024;
        UInt32 v23 = inPropertyDataSize;
        __int16 v24 = 1024;
        OSStatus v25 = v11;
        _os_log_error_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_ERROR, " [%s] %s:%d SoundDec_SetMagicCookie Failed to set cookie [%p, %u] %d", (uint8_t *)&v14, 0x32u);
      }
    }
  }
  return v3;
}

uint64_t SoundDec_FormatASBD(int a1, uint64_t a2, int a3, unsigned int a4, int a5, float a6)
{
  signed int v6 = a1 & 0xFFFF0000;
  if ((int)(a1 & 0xFFFF0000) >= 851968)
  {
    if (v6 < 0x400000)
    {
      if (v6 >= 0x100000)
      {
        if (v6 == 0x100000)
        {
          int v7 = 0;
          *(double *)a2 = (double)(unsigned __int16)a1;
          if (a5 == 1) {
            int v19 = 1633772390;
          }
          else {
            int v19 = 1633772389;
          }
          *(_DWORD *)(a2 + 12) = 0;
          *(_DWORD *)(a2 + 16) = 0;
          *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v19;
        }
        else
        {
          if (v6 != 0x200000) {
            return 0;
          }
          int v7 = 0;
          *(double *)a2 = (double)(unsigned __int16)a1;
          *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1869641075;
          *(_DWORD *)(a2 + 16) = 0;
          a3 = (float)((float)((float)(unsigned __int16)a1 * a6) * (float)a5);
        }
        uint64_t v8 = a4;
        goto LABEL_61;
      }
      if (v6 != 851968)
      {
        if (v6 == 983040)
        {
          int v7 = 0;
          *(void *)a2 = 0x40CF400000000000;
          *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1735091043;
          *(_DWORD *)(a2 + 16) = 0;
          uint64_t v8 = 1;
          a3 = 320;
LABEL_61:
          *(_DWORD *)(a2 + 20) = a3;
          goto LABEL_62;
        }
        return 0;
      }
      double v14 = (double)(unsigned __int16)a1;
      uint64_t v15 = 0xC0C6C70636DLL;
      goto LABEL_43;
    }
    if (v6 >= 0x800000)
    {
      if (v6 == 0x800000)
      {
        int v7 = 0;
        *(void *)a2 = 0x40D7700000000000;
        *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1685354616;
        *(_DWORD *)(a2 + 16) = 0;
        uint64_t v8 = 1;
        a3 = 480;
        goto LABEL_61;
      }
      if (v6 != 0x1000000) {
        return 0;
      }
      int v7 = 0;
      *(double *)a2 = (double)(unsigned __int16)a1;
      *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1953790320;
      *(_DWORD *)(a2 + 16) = 0;
      goto LABEL_35;
    }
    if (v6 != 0x400000)
    {
      if (v6 != 5242880) {
        return 0;
      }
      int v7 = 0;
      if ((unsigned __int16)a1 == 32000) {
        int v11 = 640;
      }
      else {
        int v11 = 160;
      }
      *(_DWORD *)(a2 + 16) = 0;
      *(double *)a2 = (double)(unsigned __int16)a1;
      *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1936029299;
      if ((unsigned __int16)a1 == 16000) {
        int v12 = 320;
      }
      else {
        int v12 = v11;
      }
      a3 = v12 * a5;
LABEL_35:
      uint64_t v13 = (void *)&unk_1E259D000;
LABEL_60:
      uint64_t v8 = v13[366];
      goto LABEL_61;
    }
    int v16 = 1935764850;
    *(double *)a2 = (double)(unsigned __int16)a1;
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    uint64_t v13 = &unk_1E259D000;
    if ((unsigned __int16)a1 == 8000)
    {
      int v17 = 160;
      goto LABEL_57;
    }
    if ((unsigned __int16)a1 == 16000)
    {
      int v16 = 1935767394;
      int v17 = 320;
LABEL_57:
      int v7 = 0;
      *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v16;
      a3 = v17 * a5;
      goto LABEL_60;
    }
LABEL_55:
    int v7 = 0;
    uint64_t v8 = 1;
LABEL_62:
    *(_DWORD *)(a2 + 24) = v7;
    *(void *)(a2 + 2_Block_object_dispose(&STACK[0x250], 8) = v8;
    *(_DWORD *)(a2 + 36) = 0;
    return 0;
  }
  if (v6 < 0x40000)
  {
    if (v6 != 0x10000)
    {
      if (v6 == 0x20000)
      {
        *(double *)a2 = (double)(unsigned __int16)a1;
        *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 0x296C70636DLL;
        int v7 = 4;
        *(_DWORD *)(a2 + 16) = 4;
        uint64_t v8 = 0x2000000002;
      }
      else
      {
        if (v6 != 196608) {
          return 0;
        }
        *(double *)a2 = (double)(unsigned __int16)a1;
        *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 0x2C6C70636DLL;
        int v7 = 2;
        *(_DWORD *)(a2 + 16) = 2;
        uint64_t v8 = 0x1000000001;
      }
LABEL_45:
      a3 = 1;
      goto LABEL_61;
    }
    double v14 = (double)(unsigned __int16)a1;
    uint64_t v15 = 0x296C70636DLL;
LABEL_43:
    *(double *)a2 = v14;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v15;
    int v7 = 4;
    *(_DWORD *)(a2 + 16) = 4;
    uint64_t v8 = 0x2000000001;
    goto LABEL_45;
  }
  if (v6 < 655360)
  {
    if (v6 == 0x40000)
    {
      double v9 = (double)(unsigned __int16)a1;
      uint64_t v10 = 1970037111;
    }
    else
    {
      if (v6 != 327680) {
        return 0;
      }
      double v9 = (double)(unsigned __int16)a1;
      uint64_t v10 = 1634492791;
    }
    *(double *)a2 = v9;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v10;
    a3 = 1;
    *(_DWORD *)(a2 + 16) = 1;
    uint64_t v8 = 0x800000001;
    int v7 = 1;
    goto LABEL_61;
  }
  if (v6 == 655360)
  {
    *(double *)a2 = (double)(unsigned __int16)a1;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1936745848;
    *(_DWORD *)(a2 + 16) = 0;
    uint64_t v13 = &unk_1E259D000;
    if ((unsigned __int16)a1 == 8000)
    {
      int v18 = 160;
    }
    else
    {
      if ((unsigned __int16)a1 != 16000) {
        goto LABEL_55;
      }
      int v18 = 320;
    }
    int v7 = 0;
    a3 = v18 * a5;
    goto LABEL_60;
  }
  if (v6 == 720896)
  {
    int v7 = 0;
    *(double *)a2 = (double)(unsigned __int16)a1;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = 1633772396;
    *(_DWORD *)(a2 + 16) = 0;
    uint64_t v8 = 1;
    a3 = 512;
    goto LABEL_61;
  }
  return 0;
}

uint64_t SoundDec_SetOpusInBandFecEnabled(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811329;
  int inPropertyData = a2;
  if (a1 && (*(_DWORD *)(a1 + 8) == 1869641075 || *(_DWORD *)(a1 + 48) == 1869641075))
  {
    OSStatus v3 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x70666563u, 4u, &inPropertyData);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (!v3)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        uint64_t v8 = *MEMORY[0x1E4F47A50];
        uint64_t v2 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          return v2;
        }
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v12 = v7;
        __int16 v13 = 2080;
        double v14 = "SoundDec_SetOpusInBandFecEnabled";
        __int16 v15 = 1024;
        int v16 = 1709;
        __int16 v17 = 1024;
        int v18 = inPropertyData;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyEnableFEC opusInBandFecEnabled=%u", buf, 0x22u);
      }
      return 0;
    }
    if (ErrorLogLevelForModule >= 3)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      signed int v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v12 = v5;
        __int16 v13 = 2080;
        double v14 = "SoundDec_SetOpusInBandFecEnabled";
        __int16 v15 = 1024;
        int v16 = 1706;
        __int16 v17 = 1024;
        int v18 = inPropertyData;
        __int16 v19 = 1024;
        OSStatus v20 = v3;
        _os_log_error_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyEnableFEC %d with error %08x", buf, 0x28u);
      }
    }
  }
  return v2;
}

uint64_t SoundDec_SetPacketLossPercentage(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147811329;
  int inPropertyData = a2;
  if (a1 && (*(_DWORD *)(a1 + 8) == 1869641075 || *(_DWORD *)(a1 + 48) == 1869641075))
  {
    OSStatus v3 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x5E6C7370u, 4u, &inPropertyData);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (!v3)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        uint64_t v8 = *MEMORY[0x1E4F47A50];
        uint64_t v2 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          return v2;
        }
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v12 = v7;
        __int16 v13 = 2080;
        double v14 = "SoundDec_SetPacketLossPercentage";
        __int16 v15 = 1024;
        int v16 = 1725;
        __int16 v17 = 1024;
        int v18 = inPropertyData;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyPacketLossPercentage packetLossPercentage=%u", buf, 0x22u);
      }
      return 0;
    }
    if (ErrorLogLevelForModule >= 3)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      signed int v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v12 = v5;
        __int16 v13 = 2080;
        double v14 = "SoundDec_SetPacketLossPercentage";
        __int16 v15 = 1024;
        int v16 = 1722;
        __int16 v17 = 1024;
        int v18 = inPropertyData;
        __int16 v19 = 1024;
        OSStatus v20 = v3;
        _os_log_error_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyPacketLossPercentage %d with error %08x", buf, 0x28u);
      }
    }
  }
  return v2;
}

uint64_t SoundDec_GetOpusDecodeFECStatus(uint64_t a1, void *outPropertyData)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2147811332;
  uint64_t result = 2147811329;
  if (a1 && (*(_DWORD *)(a1 + 8) == 1869641075 || *(_DWORD *)(a1 + 48) == 1869641075))
  {
    ioPropertyDatauint64_t Size = 4;
    if (!AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 88), 0x66737473u, &ioPropertyDataSize, outPropertyData)) {
      return 0;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SoundDec_GetOpusDecodeFECStatus_cold_1();
      }
    }
    return v3;
  }
  return result;
}

uint64_t SoundDec_SetEVSAudioCodecBandwidth(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = 2147811329;
  if (a1 && (*(_DWORD *)(a1 + 48) == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299))
  {
    int inPropertyData = a2;
    OSStatus v4 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 88), 0x626E6477u, 4u, &inPropertyData);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v4)
    {
      uint64_t v6 = (os_log_t *)MEMORY[0x1E4F47A50];
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR)) {
          SoundDec_SetEVSAudioCodecBandwidth_cold_1();
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        uint64_t v8 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v13 = v7;
          __int16 v14 = 2080;
          __int16 v15 = "SoundDec_SetEVSAudioCodecBandwidth";
          __int16 v16 = 1024;
          int v17 = 1787;
          __int16 v18 = 1024;
          int v19 = -2147155964;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Failed to set EVS audio codec bandwidth. result=%X", buf, 0x22u);
        }
      }
      return 2147811332;
    }
    else
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        uint64_t v10 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v13 = v9;
          __int16 v14 = 2080;
          __int16 v15 = "_SoundDec_SetEVSAudioCodecPropertyBandwidth";
          __int16 v16 = 1024;
          int v17 = 1773;
          __int16 v18 = 1024;
          int v19 = inPropertyData;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AudioConverterSetProperty succeeded to set property kAudioCodecPrivatePropertyBandwidth codecBandwidth=%u", buf, 0x22u);
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t SoundDec_SetEVSAudioCodecBandwidthUpdate(uint64_t a1, int a2)
{
  uint64_t result = 2147811329;
  if (a1 && (*(_DWORD *)(a1 + 48) == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299))
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 224) = a2;
    *(unsigned char *)(a1 + 22_Block_object_dispose(&STACK[0x250], 8) = 1;
  }
  return result;
}

uint64_t SoundDec_SetCMR(uint64_t a1, int a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t result = 2147811329;
  if (a1)
  {
    int v7 = *(_DWORD *)(a1 + 48);
    if (v7 == 1936029299
      || ((int v8 = *(_DWORD *)(a1 + 8), v8 != 1936029299) ? (v9 = v7 == 1935764850) : (v9 = 1),
          !v9 ? (BOOL v10 = v7 == 1935767394) : (BOOL v10 = 1),
          !v10 ? (BOOL v11 = v8 == 1935767394) : (BOOL v11 = 1),
          !v11 ? (BOOL v12 = v8 == 1935764850) : (BOOL v12 = 1),
          v12))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        __int16 v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v17 = 136316162;
          uint64_t v18 = v13;
          __int16 v19 = 2080;
          uint64_t v20 = "SoundDec_SetCMR";
          __int16 v21 = 1024;
          int v22 = 1810;
          __int16 v23 = 1024;
          int v24 = a2;
          __int16 v25 = 1024;
          int v26 = a3;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SoundDec_SetCMR mode=%u bandwidth=%u", (uint8_t *)&v17, 0x28u);
        }
      }
      int v15 = *(_DWORD *)(a1 + 48);
      if (v15 == 1936029299 || *(_DWORD *)(a1 + 8) == 1936029299)
      {
        *(_DWORD *)(a1 + 204) = a2;
        *(_DWORD *)(a1 + 20_Block_object_dispose(&STACK[0x250], 8) = a3;
        *(unsigned char *)(a1 + 220) = 1;
      }
      if (v15 == 1935764850 || v15 == 1935767394 || (int v16 = *(_DWORD *)(a1 + 8), v16 == 1935767394) || v16 == 1935764850)
      {
        uint64_t result = 0;
        *(unsigned char *)(a1 + 221) = a2;
        *(_WORD *)(a1 + 222) = 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t SoundDec_EnableShortRED(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t result = 2147811329;
  if (a1 && (*(_DWORD *)(a1 + 48) == 1633903462 || *(_DWORD *)(a1 + 8) == 1633903462))
  {
    *(_DWORD *)(a1 + 252) = a3;
    *(_DWORD *)(a1 + 256) = a4;
    *(unsigned char *)(a1 + 24_Block_object_dispose(&STACK[0x250], 8) = a2;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      BOOL v10 = *MEMORY[0x1E4F47A50];
      BOOL v11 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v11) {
        return result;
      }
      int v12 = 136316418;
      uint64_t v13 = v9;
      __int16 v14 = 2080;
      int v15 = "SoundDec_EnableShortRED";
      __int16 v16 = 1024;
      int v17 = 1902;
      __int16 v18 = 1024;
      int v19 = a2;
      __int16 v20 = 1024;
      int v21 = a3;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SoundDec_EnableShortRED Requested shortREDEnabled=%d shortREDBytesPerFrame=%u shortREDBitrate=%u", (uint8_t *)&v12, 0x2Eu);
    }
    return 0;
  }
  return result;
}

uint64_t SoundDec_IsShortREDEnabled(uint64_t a1, unsigned char *a2)
{
  uint64_t result = 2147811329;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = *(unsigned char *)(a1 + 260);
    }
  }
  return result;
}

uint64_t SoundDec_GetShortREDBytesPerFrame(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 2147811329;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = *(_DWORD *)(a1 + 264);
    }
  }
  return result;
}

char *ExpandCallbackBuffer(uint64_t a1, int *a2)
{
  int v4 = *(_DWORD *)(a1 + 172);
  uint64_t v5 = *(void **)(a1 + 160);
  int v6 = (int)((double)*a2 * 1.25);
  uint64_t result = (char *)malloc_type_realloc(v5, v6, 0x7A91EAE3uLL);
  int v8 = &result[v6];
  if (!result) {
    int v8 = 0;
  }
  if (result > v8 || v6 < 0 || v8 - result < v6) {
    goto LABEL_10;
  }
  *(void *)(a1 + 160) = result;
  *(_DWORD *)(a1 + 172) = v6;
  if (result) {
    return result;
  }
  if (v4 < 0)
  {
LABEL_10:
    __break(0x5519u);
    return result;
  }
  *(_DWORD *)(a1 + 172) = v4;
  *(void *)(a1 + 160) = v5;
  *a2 = v4;
  return result;
}

uint64_t VCDatagramChannelIDS_Token(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(unsigned int *)(a1 + 168);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    BOOL v4 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
    int v5 = 136315650;
    uint64_t v6 = v2;
    __int16 v7 = 2080;
    int v8 = "VCDatagramChannelIDS_Token";
    __int16 v9 = 1024;
    int v10 = 36;
    _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
  }
  return 0;
}

uint64_t VCTimescalePSOLA_VectorBitShiftW32ToW16(uint64_t result, int a2, int *a3, int a4)
{
  char v4 = a4;
  uint64_t v6 = (_WORD *)result;
  if (a4 < 0)
  {
    if (a2 >= 1)
    {
      __int16 v9 = -(__int16)a4;
      unsigned int v10 = a2 + 1;
      do
      {
        int v11 = *a3++;
        uint64_t result = VCTimescalePSOLA_SatW32ToW16(v11 << v9);
        *v6++ = result;
        --v10;
      }
      while (v10 > 1);
    }
  }
  else if (a2 >= 1)
  {
    unsigned int v7 = a2 + 1;
    do
    {
      int v8 = *a3++;
      uint64_t result = VCTimescalePSOLA_SatW32ToW16(v8 >> v4);
      *v6++ = result;
      --v7;
    }
    while (v7 > 1);
  }
  return result;
}

uint64_t VCTimescalePSOLA_DownsampleFast(uint64_t a1, int a2, _WORD *a3, int a4, __int16 *a5, int a6, int a7, int a8)
{
  uint64_t v8 = 61;
  int v9 = a4 - 1;
  if (a4 >= 1 && a6 >= 1)
  {
    int v10 = v9 * a7;
    int v11 = v9 * a7 + a8;
    if (v11 < a2)
    {
      if (v10 < 0)
      {
        return 0;
      }
      else
      {
        uint64_t v14 = a8;
        uint64_t v15 = a7;
        uint64_t v16 = v11;
        uint64_t v17 = a6;
        uint64_t v18 = 2 * a7;
        int v19 = (__int16 *)(a1 + 2 * a8);
        do
        {
          int v20 = 2048;
          uint64_t v21 = v17;
          __int16 v22 = a5;
          int v23 = v19;
          do
          {
            int v25 = *v22++;
            int v24 = v25;
            int v26 = *v23--;
            v20 += v26 * v24;
            --v21;
          }
          while (v21);
          *a3++ = VCTimescalePSOLA_SatW32ToW16(v20 >> 12);
          v14 += v15;
          int v19 = (__int16 *)((char *)v19 + v18);
        }
        while (v14 <= v16);
        return 0;
      }
    }
  }
  return v8;
}

_DWORD *VCTimescalePSOLA_CrossCorrelation(_DWORD *result, __int16 *a2, __int16 *a3, int a4, int a5, char a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      char *result = 0;
      if (a4 >= 1)
      {
        int v8 = 0;
        uint64_t v9 = a4;
        int v10 = a2;
        int v11 = a3;
        do
        {
          int v13 = *v10++;
          int v12 = v13;
          int v14 = *v11++;
          v8 += (v14 * v12) >> a6;
          --v9;
        }
        while (v9);
        char *result = v8;
      }
      ++result;
      ++v7;
      a3 += a7;
    }
    while (v7 != (unsigned __int16)a5);
  }
  return result;
}

uint64_t VCTimescalePSOLA_DivW32W16(int a1, int a2)
{
  if (a2) {
    return (a1 / a2);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t VCTimescalePSOLA_DivW32W16ResW16(int a1, int a2)
{
  if (a2) {
    int v2 = a1 / a2;
  }
  else {
    LOWORD(v2) = 0x7FFF;
  }
  return (__int16)v2;
}

uint64_t VCTimescalePSOLA_MaxAbsValueW16(__int16 *a1, int a2)
{
  LOWORD(v2) = -1;
  if (a1 && a2 >= 1)
  {
    int v2 = 0;
    uint64_t v3 = a2;
    do
    {
      int v5 = *a1++;
      int v4 = v5;
      if (v5 < 0) {
        int v4 = -v4;
      }
      if (v2 <= v4) {
        int v2 = v4;
      }
      --v3;
    }
    while (v3);
    if (v2 >= 0x7FFF) {
      LOWORD(v2) = 0x7FFF;
    }
  }
  return (__int16)v2;
}

uint64_t VCTimescalePSOLA_MaxAbsValueW32(int *a1, int a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 >= 1)
  {
    LODWORD(result) = 0;
    uint64_t v4 = a2;
    do
    {
      int v6 = *a1++;
      unsigned int v5 = v6;
      if (v6 < 0) {
        unsigned int v5 = -v5;
      }
      if (v5 <= result) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v5;
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t VCTimescalePSOLA_MaxIndexW16(uint64_t a1, int a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 >= 1)
  {
    uint64_t v4 = 0;
    LODWORD(result) = 0;
    __int16 v5 = 0x8000;
    do
    {
      int v6 = *(__int16 *)(a1 + 2 * v4);
      if (v6 <= v5) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v4;
      }
      if (v6 > v5) {
        __int16 v5 = *(_WORD *)(a1 + 2 * v4);
      }
      ++v4;
    }
    while (a2 != v4);
  }
  return result;
}

uint64_t VCTimescalePSOLA_DotProductWithScale(int16x4_t *a1, int16x4_t *a2, int a3, char a4)
{
  if (a3 < 4)
  {
    uint64_t result = 0;
    unsigned int v7 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    LODWORD(result) = 0;
    unsigned int v7 = a3 & 0xFFFFFFFC;
    int32x4_t v8 = vnegq_s32(vdupq_n_s32(a4));
    uint64_t v9 = a1;
    int v10 = a2;
    do
    {
      int16x4_t v11 = *v9++;
      int16x4_t v12 = v11;
      int16x4_t v13 = *v10++;
      uint64_t result = (vaddvq_s32(vshlq_s32(vmull_s16(v13, v12), v8)) + result);
      v5 += 4;
    }
    while (v5 < (a3 - 3));
  }
  if ((int)v7 < a3)
  {
    int v14 = (__int16 *)a2 + v7;
    uint64_t v15 = (__int16 *)a1 + v7;
    do
    {
      int v17 = *v15++;
      int v16 = v17;
      int v18 = *v14++;
      uint64_t result = (((v18 * v16) >> a4) + result);
      ++v7;
    }
    while ((int)v7 < a3);
  }
  return result;
}

double _VCVideoPlayer_GetDisplayTimestamp(uint64_t a1)
{
  return *(double *)(a1 + 632);
}

uint64_t _VCVideoPlayer_LogPlayoutTimeChange(uint64_t a1, uint64_t a2, uint64_t a3, double a4, Float64 a5, double a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    int16x4_t v13 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a3 + 160);
      int v15 = *(_DWORD *)(a3 + 168);
      uint64_t v16 = *(void *)(a3 + 112);
      int v17 = *(_DWORD *)(a1 + 24);
      int v18 = *(unsigned __int8 *)(a3 + 136);
      LODWORD(buf.value) = 136317954;
      *(CMTimeValue *)((char *)&buf.value + 4) = v12;
      LOWORD(buf.flags) = 2080;
      *(void *)((char *)&buf.flags + 2) = "_VCVideoPlayer_LogPlayoutTimeChange";
      HIWORD(buf.epoch) = 1024;
      int v23 = 201;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      __int16 v26 = 2048;
      uint64_t v27 = a3;
      __int16 v28 = 2048;
      uint64_t v29 = v14;
      __int16 v30 = 1024;
      int v31 = v15;
      __int16 v32 = 2048;
      uint64_t v33 = v16;
      __int16 v34 = 1024;
      int v35 = v17;
      __int16 v36 = 2048;
      double v37 = a4;
      __int16 v38 = 1024;
      int v39 = v18;
      __int16 v40 = 2048;
      double v41 = a6;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] playbackClient=%p reference changed lastFrame.presentationTime=%f lastFrame.rtpTimestamp=%u adjustedPresentationTime=%f current RTPTimeStamp=%u lastFrame.presentationTime changed by %f seconds preventBackward=%d delayOffsetInSeconds=%f", (uint8_t *)&buf, 0x6Au);
    }
  }
  CMTimeMakeWithSeconds(&v21, a5, 1000000000);
  CMTime buf = v21;
  CMTimeGetSeconds(&buf);
  CMTimeMakeWithSeconds(&v20, *(Float64 *)(a3 + 160), 1000000000);
  CMTime buf = v20;
  CMTimeGetSeconds(&buf);
  return kdebug_trace();
}

uint64_t _VCVideoPlayer_DoPlayoutTimeReAnchor(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  double v8 = *(double *)(a2 + 176);
  double v9 = *(double *)(a2 + 160);
  double v10 = *a3 - v8 + v9;
  double v11 = *a3 - *(double *)(a2 + 96) + *(double *)(a2 + 80) + a4;
  double v12 = v11 - v10;
  double v13 = vabdd_f64(v11, v10);
  if (v12 < 0.0 && v13 < 2.0) {
    *(unsigned char *)(a2 + 136) = 1;
  }
  *(double *)(a2 + 112) = v9 + v12;
  *(double *)(a2 + 12_Block_object_dispose(&STACK[0x250], 8) = v8;
  *(unsigned char *)(a2 + 104) = 1;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 96) = 0;
  Displayint Timestamp = _VCVideoPlayer_GetDisplayTimestamp(a1);

  return _VCVideoPlayer_LogPlayoutTimeChange((uint64_t)a3, a1, a2, v12, DisplayTimestamp, a4);
}

uint64_t _VCVideoPlayer_JitterAdaptation_HandleQueueSizeChange(uint64_t a1, uint64_t a2, uint64_t a3, Float64 a4, double a5)
{
  double v7 = *(double *)(a2 + 64);
  if (v7 < 0.0) {
    *(unsigned char *)(a2 + 136) = 1;
  }
  if (*(unsigned char *)(a2 + 104))
  {
    *(double *)(a2 + 112) = v7 + *(double *)(a2 + 112);
  }
  else
  {
    *(double *)(a2 + 112) = v7 + *(double *)(a2 + 160);
    *(void *)(a2 + 12_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a2 + 176);
  }
  *(unsigned char *)(a2 + 104) = 1;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 64) = 0;
  return _VCVideoPlayer_LogPlayoutTimeChange(a3, a1, a2, v7, a4, a5);
}

double _VCVideoPlayer_PreventBackwardPresentationTime(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v7 = a4;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  double v8 = *(double *)a2 - *(double *)(a3 + 128);
  double v9 = *(double *)(a3 + 160);
  if (v9 <= a4)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      *(unsigned char *)(a3 + 136) = 0;
      double v7 = v8 + *(double *)(a3 + 112);
      *(_DWORD *)(a3 + 120) = *(_DWORD *)(a2 + 24);
      *(unsigned char *)(a3 + 105) = 1;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        uint64_t v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v15 = *(_DWORD *)(a2 + 24);
          double v16 = *(double *)(a3 + 160);
          int v18 = 136317186;
          uint64_t v19 = v13;
          __int16 v20 = 2080;
          CMTime v21 = "_VCVideoPlayer_PreventBackwardPresentationTime";
          __int16 v22 = 1024;
          int v23 = 277;
          __int16 v24 = 2048;
          uint64_t v25 = a1;
          __int16 v26 = 2048;
          uint64_t v27 = a3;
          __int16 v28 = 2048;
          double v29 = v7;
          __int16 v30 = 1024;
          int v31 = v15;
          __int16 v32 = 2048;
          double v33 = v16;
          __int16 v34 = 2048;
          double v35 = v8;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] playbackClient=%p finished keeping presentationTime=%f the same rtpTimeStamp=%u lastFrame.presentationTime=%f durationSinceLastAdjustment=%f", (uint8_t *)&v18, 0x54u);
        }
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      double v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(a2 + 24);
        int v18 = 136316930;
        uint64_t v19 = v10;
        __int16 v20 = 2080;
        CMTime v21 = "_VCVideoPlayer_PreventBackwardPresentationTime";
        __int16 v22 = 1024;
        int v23 = 271;
        __int16 v24 = 2048;
        uint64_t v25 = a1;
        __int16 v26 = 2048;
        uint64_t v27 = a3;
        __int16 v28 = 2048;
        double v29 = v9;
        __int16 v30 = 1024;
        int v31 = v12;
        __int16 v32 = 2048;
        double v33 = v8;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] playbackClient=%p keeping presentationTime=%f the same to prevent it from going backward rtpTimestamp=%u durationSinceLastAdjustment=%f", (uint8_t *)&v18, 0x4Au);
      }
    }
    return v9;
  }
  return v7;
}

double _VCVideoPlayer_GetPresentationTime(uint64_t a1, uint64_t a2, uint64_t a3, Float64 a4, double a5)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 32))
  {
    if (*(_DWORD *)a2)
    {
      if (*(unsigned char *)(a1 + 560))
      {
        if (*(unsigned char *)(a2 + 72))
        {
          _VCVideoPlayer_DoPlayoutTimeReAnchor(a1, a2, (double *)a3, a5);
        }
        else if (*(unsigned char *)(a1 + 563) && *(unsigned char *)(a2 + 40))
        {
          _VCVideoPlayer_JitterAdaptation_HandleQueueSizeChange(a1, a2, a3, a4, a5);
        }
      }
      double v9 = *(double *)a3;
      if (*(unsigned char *)(a2 + 104))
      {
        double v10 = v9 - *(double *)(a2 + 128);
        double v11 = *(double *)(a2 + 112) + v10;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v12 = VRTraceErrorLogLevelToCSTR();
          uint64_t v13 = *MEMORY[0x1E4F47A50];
          uint64_t v14 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              int v15 = *(_DWORD *)(a3 + 24);
              double v16 = *(double *)(a2 + 112);
              uint64_t v17 = *(void *)(a2 + 128);
              int v37 = 136316930;
              uint64_t v38 = v12;
              __int16 v39 = 2080;
              __int16 v40 = "_VCVideoPlayer_GetPresentationTime";
              __int16 v41 = 1024;
              int v42 = 317;
              __int16 v43 = 2048;
              double v44 = v11;
              __int16 v45 = 1024;
              int v46 = v15;
              __int16 v47 = 2048;
              double v48 = v16;
              __int16 v49 = 2048;
              uint64_t v50 = v17;
              __int16 v51 = 2048;
              double v52 = v10;
              _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d Adjusting presentationTime=%f rtpTimestamp=%u adjustedPresentationTime=%f adjustedVideoFrameTimeInSeconds=%f durationInSeconds=%f", (uint8_t *)&v37, 0x4Au);
            }
          }
          else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            int v34 = *(_DWORD *)(a3 + 24);
            double v35 = *(double *)(a2 + 112);
            uint64_t v36 = *(void *)(a2 + 128);
            int v37 = 136316930;
            uint64_t v38 = v12;
            __int16 v39 = 2080;
            __int16 v40 = "_VCVideoPlayer_GetPresentationTime";
            __int16 v41 = 1024;
            int v42 = 317;
            __int16 v43 = 2048;
            double v44 = v11;
            __int16 v45 = 1024;
            int v46 = v34;
            __int16 v47 = 2048;
            double v48 = v35;
            __int16 v49 = 2048;
            uint64_t v50 = v36;
            __int16 v51 = 2048;
            double v52 = v10;
            _os_log_debug_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d Adjusting presentationTime=%f rtpTimestamp=%u adjustedPresentationTime=%f adjustedVideoFrameTimeInSeconds=%f durationInSeconds=%f", (uint8_t *)&v37, 0x4Au);
          }
        }
        if (!*(unsigned char *)(a2 + 105) && *(_DWORD *)(a3 + 32) == 1 && !*(unsigned char *)(a2 + 136))
        {
          *(_DWORD *)(a2 + 120) = *(_DWORD *)(a3 + 24);
          *(unsigned char *)(a2 + 105) = 1;
        }
      }
      else
      {
        double v11 = *(double *)(a2 + 160) + v9 - *(double *)(a2 + 176);
      }
      if (*(unsigned char *)(a2 + 136)) {
        double v11 = _VCVideoPlayer_PreventBackwardPresentationTime(a1, a3, a2, v11);
      }
    }
    else if (*(_DWORD *)(a3 + 24) == *(_DWORD *)(a2 + 16))
    {
      double v11 = *(double *)(a2 + 8);
    }
    else
    {
      double v11 = *(double *)(a2 + 8) + *(double *)a3 - *(double *)(a2 + 24);
    }
  }
  else
  {
    double v11 = *(double *)(a2 + 8);
    if (v11 == 0.0)
    {
      double v11 = micro();
      *(double *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = v11;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 24);
    }
    *(void *)(a2 + 24) = *(void *)a3;
    *(unsigned char *)(a2 + 32) = 1;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v18 = VRTraceErrorLogLevelToCSTR();
    uint64_t v19 = *MEMORY[0x1E4F47A50];
    __int16 v20 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *(_DWORD *)(a3 + 24);
        uint64_t v22 = *(void *)(a2 + 160);
        if (*(_DWORD *)a2)
        {
          double v23 = *(double *)a3 - *(double *)(a2 + 176);
          double v24 = *(double *)a3;
          uint64_t v25 = *(void *)(a2 + 176);
        }
        else
        {
          double v24 = *(double *)a3;
          uint64_t v25 = *(void *)(a2 + 176);
          double v23 = 0.0;
        }
        int v31 = *(_DWORD *)(a3 + 32);
        int v37 = 136317698;
        uint64_t v38 = v18;
        __int16 v39 = 2080;
        __int16 v40 = "_VCVideoPlayer_GetPresentationTime";
        __int16 v41 = 1024;
        int v42 = 333;
        __int16 v43 = 2048;
        double v44 = v11;
        __int16 v45 = 1024;
        int v46 = v21;
        __int16 v47 = 2048;
        double v48 = a5;
        __int16 v49 = 2048;
        uint64_t v50 = v22;
        __int16 v51 = 2048;
        double v52 = v23;
        __int16 v53 = 2048;
        double v54 = v24;
        __int16 v55 = 2048;
        uint64_t v56 = v25;
        __int16 v57 = 1024;
        int v58 = v31;
        _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d presentationTime=%f rtpTimestamp=%u delayOffsetInSeconds=%f lastFrame.presentationTime=%f durationInSeconds=%f videoFrameTimeInSeconds=%f lastFrame.videoFrameTimeInSeconds=%f alarmType=%d", (uint8_t *)&v37, 0x64u);
      }
    }
    else if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      int v26 = *(_DWORD *)(a3 + 24);
      uint64_t v27 = *(void *)(a2 + 160);
      if (*(_DWORD *)a2)
      {
        double v30 = *(double *)a3 - *(double *)(a2 + 176);
        double v28 = *(double *)a3;
        uint64_t v29 = *(void *)(a2 + 176);
      }
      else
      {
        double v28 = *(double *)a3;
        uint64_t v29 = *(void *)(a2 + 176);
        double v30 = 0.0;
      }
      int v33 = *(_DWORD *)(a3 + 32);
      int v37 = 136317698;
      uint64_t v38 = v18;
      __int16 v39 = 2080;
      __int16 v40 = "_VCVideoPlayer_GetPresentationTime";
      __int16 v41 = 1024;
      int v42 = 333;
      __int16 v43 = 2048;
      double v44 = v11;
      __int16 v45 = 1024;
      int v46 = v26;
      __int16 v47 = 2048;
      double v48 = a5;
      __int16 v49 = 2048;
      uint64_t v50 = v27;
      __int16 v51 = 2048;
      double v52 = v30;
      __int16 v53 = 2048;
      double v54 = v28;
      __int16 v55 = 2048;
      uint64_t v56 = v29;
      __int16 v57 = 1024;
      int v58 = v33;
      _os_log_debug_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d presentationTime=%f rtpTimestamp=%u delayOffsetInSeconds=%f lastFrame.presentationTime=%f durationInSeconds=%f videoFrameTimeInSeconds=%f lastFrame.videoFrameTimeInSeconds=%f alarmType=%d", (uint8_t *)&v37, 0x64u);
    }
  }
  return v11;
}

BOOL _VCVideoPlayer_ShouldProcessAlarmForExternalPlayout(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5)
{
  double v10 = micro();
  if (*(unsigned char *)(a1 + 808)) {
    double v11 = *(double *)(a2 + 152) + *(double *)a3 - *(double *)(a2 + 272);
  }
  else {
    double v11 = v10;
  }
  *a4 = v11;
  double v12 = *(double *)a3 - *(double *)(a2 + 144) + *(double *)(a2 + 152) - v10;
  *a5 = v12;
  if (!*(unsigned char *)(a2 + 32))
  {
    *(double *)(a2 + _Block_object_dispose(&STACK[0x250], 8) = *a4;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 24);
    *(void *)(a2 + 24) = *(void *)a3;
    *(unsigned char *)(a2 + 32) = 1;
    double v12 = *a5;
  }
  return v12 <= 0.001 || !*(_DWORD *)a2 || *(_DWORD *)(a2 + 36) != 0;
}

BOOL _VCVideoPlayer_ShouldProcessAlarmForDeferredDecode(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5)
{
  double v10 = *(double *)(a1 + 800) + *(double *)(a2 + 48) + *(double *)(a2 + 256);
  *(double *)(a2 + 56) = v10;
  double v11 = micro();
  double PresentationTime = _VCVideoPlayer_GetPresentationTime(a1, a2, a3, v11, v10);
  *a4 = PresentationTime;
  double v13 = PresentationTime - v11;
  *a5 = v13;
  return v13 <= 0.001 || !*(_DWORD *)a2 || *(_DWORD *)(a2 + 36) != 0;
}

uint64_t _VCVideoPlayer_ShouldProcessAlarmForDisplayLinkImmediateDecode(uint64_t a1, double *a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  double v12 = *(double *)(a1 + 800) + a2[6] + a2[32];
  a2[7] = v12;
  Displayint Timestamp = _VCVideoPlayer_GetDisplayTimestamp(a1);
  *a5 = DisplayTimestamp;
  double PresentationTime = _VCVideoPlayer_GetPresentationTime(a1, (uint64_t)a2, a3, DisplayTimestamp, v12);
  *a4 = PresentationTime;
  double v15 = PresentationTime - *a5 - *(double *)(a1 + 576);
  *a6 = v15;
  if (v15 > 0.001 && (int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    uint64_t v17 = *MEMORY[0x1E4F47A50];
    uint64_t v18 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        double v19 = *a6;
        int v22 = 136316162;
        uint64_t v23 = v16;
        __int16 v24 = 2080;
        uint64_t v25 = "_VCVideoPlayer_ShouldProcessAlarmForDisplayLinkImmediateDecode";
        __int16 v26 = 1024;
        int v27 = 439;
        __int16 v28 = 2048;
        uint64_t v29 = a1;
        __int16 v30 = 2048;
        double v31 = v19;
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] high leeway:%f, decoding anyways!", (uint8_t *)&v22, 0x30u);
      }
    }
    else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      double v21 = *a6;
      int v22 = 136316162;
      uint64_t v23 = v16;
      __int16 v24 = 2080;
      uint64_t v25 = "_VCVideoPlayer_ShouldProcessAlarmForDisplayLinkImmediateDecode";
      __int16 v26 = 1024;
      int v27 = 439;
      __int16 v28 = 2048;
      uint64_t v29 = a1;
      __int16 v30 = 2048;
      double v31 = v21;
      _os_log_debug_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] high leeway:%f, decoding anyways!", (uint8_t *)&v22, 0x30u);
    }
  }
  return 1;
}

uint64_t _VCVideoPlayer_ShouldProcessAlarmForDisplayLinkWithDisplayAlarms(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, Float64 *a5, double *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *a5 = _VCVideoPlayer_GetDisplayTimestamp(a1);
  double v12 = *(double *)(a1 + 800) + *(double *)(a2 + 48) + *(double *)(a2 + 256);
  *(double *)(a2 + 56) = v12;
  double PresentationTime = _VCVideoPlayer_GetPresentationTime(a1, a2, a3, *a5, v12);
  *a4 = PresentationTime;
  *a6 = PresentationTime - *a5;
  if (*a4 > *a5 && (int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    double v15 = *MEMORY[0x1E4F47A50];
    uint64_t v16 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        double v17 = *a6;
        double v18 = *a4;
        Float64 v19 = *a5;
        int v24 = 136316674;
        uint64_t v25 = v14;
        __int16 v26 = 2080;
        int v27 = "_VCVideoPlayer_ShouldProcessAlarmForDisplayLinkWithDisplayAlarms";
        __int16 v28 = 1024;
        int v29 = 451;
        __int16 v30 = 2048;
        uint64_t v31 = a1;
        __int16 v32 = 2048;
        double v33 = v17;
        __int16 v34 = 2048;
        double v35 = v18;
        __int16 v36 = 2048;
        Float64 v37 = v19;
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] leeway=%f waiting for next tick. presentationTime=%f displayTimestamp=%f", (uint8_t *)&v24, 0x44u);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      double v21 = *a6;
      double v22 = *a4;
      Float64 v23 = *a5;
      int v24 = 136316674;
      uint64_t v25 = v14;
      __int16 v26 = 2080;
      int v27 = "_VCVideoPlayer_ShouldProcessAlarmForDisplayLinkWithDisplayAlarms";
      __int16 v28 = 1024;
      int v29 = 451;
      __int16 v30 = 2048;
      uint64_t v31 = a1;
      __int16 v32 = 2048;
      double v33 = v21;
      __int16 v34 = 2048;
      double v35 = v22;
      __int16 v36 = 2048;
      Float64 v37 = v23;
      _os_log_debug_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] leeway=%f waiting for next tick. presentationTime=%f displayTimestamp=%f", (uint8_t *)&v24, 0x44u);
    }
  }
  if (*(_DWORD *)(a3 + 32))
  {
    if (*a4 > *a5 && *(_DWORD *)a2) {
      return *(_DWORD *)(a2 + 36) != 0;
    }
  }
  else if (*a4 > *a5 {
         && *(unsigned __int16 *)(a2 + 300) >= *(unsigned __int16 *)(a1 + 592)
  }
         && *(_DWORD *)a2
         && *(unsigned char *)(a2 + 302))
  {
    return *(_DWORD *)(a2 + 36) != 0;
  }
  return 1;
}

uint64_t _VCVideoPlayer_ShouldProcessAlarm(unsigned char *a1, double *a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  if (a1[560])
  {
    if (a1[561])
    {
      _VCVideoPlayer_ShouldProcessAlarmForDisplayLinkImmediateDecode((uint64_t)a1, a2, a3, a4, a5, a6);
      return 1;
    }
    else if (a1[562])
    {
      return _VCVideoPlayer_ShouldProcessAlarmForDisplayLinkWithDisplayAlarms((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6);
    }
    else
    {
      return _VCVideoPlayer_ShouldProcessAlarmForDeferredDecode((uint64_t)a1, (uint64_t)a2, a3, a4, a6);
    }
  }
  else
  {
    return _VCVideoPlayer_ShouldProcessAlarmForExternalPlayout((uint64_t)a1, (uint64_t)a2, a3, a4, a6);
  }
}

uint64_t _VCVideoPlayer_ProcessAlarmForDecode(uint64_t a1, uint64_t a2, _DWORD *a3, double a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 562))
  {
    *(double *)(a2 + 160) = a4;
    int v8 = a3[6];
    if (*(unsigned char *)(a2 + 104) && v8 == *(_DWORD *)(a2 + 120))
    {
      *(_WORD *)(a2 + 104) = 0;
      *(void *)(a2 + 12_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(void *)(a2 + 112) = 0;
      *(unsigned char *)(a2 + 136) = 0;
    }
    *(void *)(a2 + 176) = *(void *)a3;
    *(_DWORD *)(a2 + 16_Block_object_dispose(&STACK[0x250], 8) = v8;
    *(_OWORD *)(a2 + 184) = *(_OWORD *)(a2 + 160);
    *(void *)(a2 + 200) = *(void *)(a2 + 176);
    double v9 = micro();
    _VideoPlayer_UpdateReportedAVSyncOffset(a1, a2, v9);
    ++*(_DWORD *)(a1 + 720);
    if (*(double *)(a1 + 728) == 0.0) {
      *(void *)(a1 + 72_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a2 + 152);
    }
  }
  __int16 v10 = *((_WORD *)a3 + 14);
  *(_WORD *)(a2 + 296) = v10;
  if (*(unsigned char *)(a2 + 302)) {
    *(_WORD *)(a2 + 300) = v10 - *(_WORD *)(a2 + 298);
  }
  if (*(_DWORD *)a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      double v12 = *MEMORY[0x1E4F47A50];
      double v13 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = a3[6];
          int v15 = *(unsigned __int16 *)(a2 + 300);
          int v16 = *(unsigned __int16 *)(a2 + 296);
          int v17 = *(unsigned __int16 *)(a2 + 298);
          *(_DWORD *)double v35 = 136316930;
          *(void *)&v35[4] = v11;
          *(_WORD *)__int16 v36 = 2080;
          *(void *)&v36[2] = "_VCVideoPlayer_ProcessAlarmForDecode";
          *(_WORD *)&v36[10] = 1024;
          int v37 = 527;
          __int16 v38 = 2048;
          uint64_t v39 = a1;
          __int16 v40 = 1024;
          int v41 = v14;
          __int16 v42 = 1024;
          int v43 = v15;
          __int16 v44 = 1024;
          int v45 = v16;
          __int16 v46 = 1024;
          int v47 = v17;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] rtpTimestamp=%u alarmsSentForDecodeButNotDisplayedCount=%u lastFrameSequenceNumberSentForDecode=%u lastFrameSequenceNumberSentForDisplay=%u", v35, 0x3Eu);
        }
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        int v26 = a3[6];
        int v27 = *(unsigned __int16 *)(a2 + 300);
        int v28 = *(unsigned __int16 *)(a2 + 296);
        int v29 = *(unsigned __int16 *)(a2 + 298);
        *(_DWORD *)double v35 = 136316930;
        *(void *)&v35[4] = v11;
        *(_WORD *)__int16 v36 = 2080;
        *(void *)&v36[2] = "_VCVideoPlayer_ProcessAlarmForDecode";
        *(_WORD *)&v36[10] = 1024;
        int v37 = 527;
        __int16 v38 = 2048;
        uint64_t v39 = a1;
        __int16 v40 = 1024;
        int v41 = v26;
        __int16 v42 = 1024;
        int v43 = v27;
        __int16 v44 = 1024;
        int v45 = v28;
        __int16 v46 = 1024;
        int v47 = v29;
        _os_log_debug_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] rtpTimestamp=%u alarmsSentForDecodeButNotDisplayedCount=%u lastFrameSequenceNumberSentForDecode=%u lastFrameSequenceNumberSentForDisplay=%u", v35, 0x3Eu);
      }
    }
    if (*(unsigned __int16 *)(a2 + 300) >= *(unsigned __int16 *)(a1 + 592))
    {
      if (*(unsigned char *)(a2 + 302))
      {
        if (*(unsigned char *)(a1 + 562))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v18 = VRTraceErrorLogLevelToCSTR();
            Float64 v19 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              int v30 = *(unsigned __int16 *)(a2 + 300);
              int v31 = *(unsigned __int16 *)(a1 + 592);
              int v32 = a3[6];
              int v33 = *(unsigned __int16 *)(a2 + 296);
              int v34 = *(unsigned __int16 *)(a2 + 298);
              *(_DWORD *)double v35 = 136317186;
              *(void *)&v35[4] = v18;
              *(_WORD *)__int16 v36 = 2080;
              *(void *)&v36[2] = "_VCVideoPlayer_ProcessAlarmForDecode";
              *(_WORD *)&v36[10] = 1024;
              int v37 = 529;
              __int16 v38 = 2048;
              uint64_t v39 = a1;
              __int16 v40 = 1024;
              int v41 = v30;
              __int16 v42 = 1024;
              int v43 = v31;
              __int16 v44 = 1024;
              int v45 = v32;
              __int16 v46 = 1024;
              int v47 = v33;
              __int16 v48 = 1024;
              int v49 = v34;
              _os_log_error_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_ERROR, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] alarmsSentForDecodeButNotDisplayedCount=%u is excessively high, at or above the threshold of %u. rtpTimestamp=%u lastFrameSequenceNumberSentForDecode=%u lastFrameSequenceNumberSentForDisplay=%u", v35, 0x44u);
            }
          }
        }
      }
    }
  }
  *(void *)(a2 + 240) = *((void *)a3 + 5);
  int v20 = a3[6];
  uint64_t v21 = *(void *)a3;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  Float64 v23 = (void (*)(uint64_t, unsigned char *, uint64_t, void))*((void *)a3 + 1);
  uint64_t v22 = *((void *)a3 + 2);
  uint64_t v24 = *((unsigned __int8 *)a3 + 30);
  *(double *)double v35 = a4;
  *(_DWORD *)&v35[8] = v20;
  *(_DWORD *)__int16 v36 = -1431655766;
  *(void *)&v36[4] = v21;
  v23(v22, v35, v24, 0);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  Release(*(void *)(a1 + 552), a3);
  ++*(_DWORD *)(a1 + 692);
  if (!*(unsigned char *)(a1 + 562))
  {
    *(_DWORD *)a2 = 1;
    *(_DWORD *)(a2 + 36) = 0;
  }
  return 1;
}

double _VideoPlayer_UpdateReportedAVSyncOffset(uint64_t a1, uint64_t a2, double a3)
{
  double v3 = *(double *)(a2 + 272) + a3 - *(double *)(a2 + 152) - *(double *)(a2 + 176);
  double v4 = *(double *)(a1 + 768);
  if (v4 <= v3)
  {
    double v6 = *(double *)(a1 + 776);
    if (v6 >= v3) {
      int v5 = 0;
    }
    else {
      int v5 = vcvtpd_s64_f64((v6 - v3) * 60.0);
    }
  }
  else
  {
    int v5 = vcvtmd_s64_f64((v4 - v3) * 60.0);
  }
  double v7 = v3 * 1000.0;
  double v8 = (double)v5 / 60.0 * 1000.0;
  double v9 = *(double *)(a2 + 344);
  double v10 = *(double *)(a2 + 352);
  double v11 = fabs(v8);
  if (fabs(v9) >= v11) {
    double v9 = (double)v5 / 60.0 * 1000.0;
  }
  ++*(_DWORD *)(a2 + 376);
  if (fabs(v10) <= v11) {
    double v10 = (double)v5 / 60.0 * 1000.0;
  }
  *(double *)(a2 + 344) = v9;
  *(double *)(a2 + 352) = v10;
  double v12 = v11 + *(double *)(a2 + 368);
  *(double *)(a2 + 360) = v8 + *(double *)(a2 + 360);
  *(double *)(a2 + 36_Block_object_dispose(&STACK[0x250], 8) = v12;
  ++*(_DWORD *)(a2 + 416);
  double v13 = *(double *)(a2 + 384);
  double v14 = *(double *)(a2 + 392);
  double v15 = fabs(v7);
  if (fabs(v13) >= v15) {
    double v13 = v7;
  }
  if (fabs(v14) <= v15) {
    double v14 = v7;
  }
  *(double *)(a2 + 384) = v13;
  *(double *)(a2 + 392) = v14;
  double result = v7 + *(double *)(a2 + 400);
  double v17 = v15 + *(double *)(a2 + 408);
  *(double *)(a2 + 400) = result;
  *(double *)(a2 + 40_Block_object_dispose(&STACK[0x250], 8) = v17;
  return result;
}

BOOL _VCVideoPlayer_ProcessAlarmForDisplay(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, double a5)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int8 *)(a1 + 562);
  if (*(unsigned char *)(a1 + 562))
  {
    double v8 = a5;
    *(double *)(a2 + 160) = a5;
    int v11 = a3[6];
    if (*(unsigned char *)(a2 + 104) && v11 == *(_DWORD *)(a2 + 120))
    {
      *(_WORD *)(a2 + 104) = 0;
      *(void *)(a2 + 12_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(void *)(a2 + 112) = 0;
      *(unsigned char *)(a2 + 136) = 0;
    }
    *(void *)(a2 + 176) = *(void *)a3;
    *(_DWORD *)(a2 + 16_Block_object_dispose(&STACK[0x250], 8) = v11;
    if (a4)
    {
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a2 + 160);
      *(void *)(a2 + 200) = *(void *)(a2 + 176);
      ++*(_DWORD *)(a1 + 720);
      if (*(double *)(a1 + 728) == 0.0) {
        *(void *)(a1 + 72_Block_object_dispose(&STACK[0x250], 8) = *(void *)(a2 + 152);
      }
    }
    unsigned int v12 = *((unsigned __int16 *)a3 + 14);
    *(_WORD *)(a2 + 29_Block_object_dispose(&STACK[0x250], 8) = v12;
    if (!*((unsigned char *)a3 + 30) || *(unsigned char *)(a2 + 302))
    {
      unsigned int v13 = *(unsigned __int16 *)(a2 + 296);
      BOOL v14 = v13 >= v12;
      unsigned int v15 = v13 - v12;
      if (v15 != 0 && v14)
      {
        *(_WORD *)(a2 + 300) = v15;
        *(unsigned char *)(a2 + 302) = 1;
      }
    }
    double v16 = micro();
    double v17 = v16;
    if (*(unsigned char *)(a1 + 760))
    {
      double v124 = v8;
      double v18 = *(double *)(a2 + 272);
      double v19 = v18 + v16 - *(double *)(a2 + 152);
      double v20 = *(double *)(a2 + 176);
      double v21 = *(double *)(a2 + 48);
      int v22 = *(_DWORD *)(a1 + 564);
      double v23 = *(double *)a3;
      Displayint Timestamp = _VCVideoPlayer_GetDisplayTimestamp(a1);
      double v26 = *(double *)(a2 + 280);
      double v25 = *(double *)(a2 + 288);
      double v27 = *(double *)(a2 + 272);
      double v28 = *(double *)(a2 + 152);
      BOOL v29 = v25 != 0.0 && vabdd_f64(v27 + v17 - v28, v26 + v17 - v25) >= *(double *)(a1 + 784);
      double v32 = v19 - v20;
      double v33 = *(double *)(a1 + 792);
      *(double *)(a2 + 280) = v27;
      *(double *)(a2 + 28_Block_object_dispose(&STACK[0x250], 8) = v28;
      double v123 = v32;
      if (!*(_DWORD *)a2
        || *((unsigned char *)a3 + 30)
        || !a4
        || v27 == 0.0
        || (*(unsigned char *)(a2 + 136) ? (char v34 = 1) : (char v34 = v29),
            (v34 & 1) != 0 || v26 == v27 || v33 <= v21 || v26 == 0.0 || v22 == 3))
      {
        double v122 = DisplayTimestamp;
        double v38 = 0.0;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          double v18 = v23 - v18;
          uint64_t v39 = VRTraceErrorLogLevelToCSTR();
          __int16 v40 = *MEMORY[0x1E4F47A50];
          int v41 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              int v42 = a3[8];
              int v43 = a3[6];
              int v44 = *(_DWORD *)a2;
              int v45 = *(unsigned __int8 *)(a2 + 136);
              int v46 = *(unsigned __int8 *)(a2 + 72);
              int v47 = *(unsigned __int8 *)(a2 + 104);
              int v48 = *(unsigned __int8 *)(a2 + 40);
              int v49 = *(_DWORD *)(a2 + 212);
              int v50 = *(_DWORD *)(a2 + 224);
              uint64_t v51 = *(void *)a3;
              uint64_t v52 = *(void *)(a2 + 160);
              uint64_t v53 = *(void *)(a2 + 272);
              uint64_t v54 = *(void *)(a2 + 216);
              uint64_t v55 = *(void *)(a2 + 256);
              *(_DWORD *)CMTime buf = 136321794;
              *(void *)&uint8_t buf[4] = v39;
              *(_WORD *)size_t v126 = 2080;
              *(void *)&v126[2] = "_VCVideoPlayer_ShouldProcessAVSyncOffset";
              *(_WORD *)&v126[10] = 1024;
              int v127 = 381;
              __int16 v128 = 2048;
              uint64_t v129 = a1;
              __int16 v130 = 2048;
              *(void *)uint64_t v131 = a2;
              *(_WORD *)&v131[8] = 1024;
              *(_DWORD *)size_t v132 = v42;
              *(_WORD *)&v132[4] = 1024;
              *(_DWORD *)&v132[6] = v43;
              *(_WORD *)&unsigned char v132[10] = 1024;
              *(_DWORD *)&v132[12] = v44;
              *(_WORD *)&v132[16] = 1024;
              *(_DWORD *)&v132[18] = v45;
              *(_WORD *)&v132[22] = 1024;
              *(_DWORD *)BOOL v133 = v46;
              *(_WORD *)&v133[4] = 1024;
              *(_DWORD *)&v133[6] = v47;
              __int16 v134 = 1024;
              *(_DWORD *)long long v135 = v48;
              *(_WORD *)&v135[4] = 1024;
              *(_DWORD *)&v135[6] = v29;
              LOWORD(v136) = 1024;
              *(_DWORD *)((char *)&v136 + 2) = v26 == v27;
              HIWORD(v136) = 1024;
              *(_DWORD *)long long v137 = v33 <= v21;
              *(_WORD *)&v137[4] = 1024;
              *(_DWORD *)size_t v138 = v43;
              *(_WORD *)&v138[4] = 1024;
              *(_DWORD *)unint64_t v139 = v49;
              *(_WORD *)&v139[4] = 1024;
              *(_DWORD *)size_t v140 = v50;
              *(_WORD *)&v140[4] = 2048;
              *(void *)&v140[6] = v51;
              *(_WORD *)&unsigned char v140[14] = 2048;
              *(void *)&v140[16] = v52;
              *(_WORD *)&v140[24] = 2048;
              *(void *)&v140[26] = v53;
              *(_WORD *)&v140[34] = 2048;
              *(double *)&v140[36] = v122;
              *(_WORD *)&v140[44] = 2048;
              *(void *)&v140[46] = v54;
              *(_WORD *)&v140[54] = 2048;
              *(double *)&v140[56] = v18;
              *(_WORD *)&v140[64] = 2048;
              *(double *)&v140[66] = v21;
              *(_WORD *)&v140[74] = 2048;
              uint64_t v141 = v55;
              __int16 v142 = 1024;
              BOOL v143 = v22 == 3;
              _os_log_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d videoPlayer[%p] playbackClient[%p] Skipping avsync offset calculation. alarmType=%d rtpTimestamp=%u firstFramePresented=%d preventBackwardPresentationTime=%d shouldResetReferenceRTPTimestamp=%d shouldUseAdjustedReference=%d shouldResetPlaybackOffset=%d, isAudioTimestampJumpDetected=%d isAudioStalled=%d isDelayOffsetLagerThanAVSyncMaxJBThreshold=%d | videoFrameRTPTimestamp=%u playoutRTPTimestamp=%u timestampWraps=%u |videoFrameTimeInSeconds=%f lastFrame.presentationTime=%f ExternalSrcPlayoutTimeInSeconds=%f displayLinkTimestamp=%f lastPlayoutRTPTimestampInSeconds=%f | videoAlarmToAudioLeeway=%f | delayOffsetInSeconds=%f avSyncOffset=%f skipAVSyncDueToFixedMode=%d", buf, 0xD4u);
            }
          }
          else if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            int v108 = a3[8];
            int v109 = a3[6];
            int v110 = *(_DWORD *)a2;
            int v111 = *(unsigned __int8 *)(a2 + 136);
            int v112 = *(unsigned __int8 *)(a2 + 72);
            int v113 = *(unsigned __int8 *)(a2 + 104);
            int v114 = *(unsigned __int8 *)(a2 + 40);
            int v115 = *(_DWORD *)(a2 + 212);
            int v116 = *(_DWORD *)(a2 + 224);
            uint64_t v117 = *(void *)a3;
            uint64_t v118 = *(void *)(a2 + 160);
            uint64_t v119 = *(void *)(a2 + 272);
            uint64_t v120 = *(void *)(a2 + 216);
            uint64_t v121 = *(void *)(a2 + 256);
            *(_DWORD *)CMTime buf = 136321794;
            *(void *)&uint8_t buf[4] = v39;
            *(_WORD *)size_t v126 = 2080;
            *(void *)&v126[2] = "_VCVideoPlayer_ShouldProcessAVSyncOffset";
            *(_WORD *)&v126[10] = 1024;
            int v127 = 381;
            __int16 v128 = 2048;
            uint64_t v129 = a1;
            __int16 v130 = 2048;
            *(void *)uint64_t v131 = a2;
            *(_WORD *)&v131[8] = 1024;
            *(_DWORD *)size_t v132 = v108;
            *(_WORD *)&v132[4] = 1024;
            *(_DWORD *)&v132[6] = v109;
            *(_WORD *)&unsigned char v132[10] = 1024;
            *(_DWORD *)&v132[12] = v110;
            *(_WORD *)&v132[16] = 1024;
            *(_DWORD *)&v132[18] = v111;
            *(_WORD *)&v132[22] = 1024;
            *(_DWORD *)BOOL v133 = v112;
            *(_WORD *)&v133[4] = 1024;
            *(_DWORD *)&v133[6] = v113;
            __int16 v134 = 1024;
            *(_DWORD *)long long v135 = v114;
            *(_WORD *)&v135[4] = 1024;
            *(_DWORD *)&v135[6] = v29;
            LOWORD(v136) = 1024;
            *(_DWORD *)((char *)&v136 + 2) = v26 == v27;
            HIWORD(v136) = 1024;
            *(_DWORD *)long long v137 = v33 <= v21;
            *(_WORD *)&v137[4] = 1024;
            *(_DWORD *)size_t v138 = v109;
            *(_WORD *)&v138[4] = 1024;
            *(_DWORD *)unint64_t v139 = v115;
            *(_WORD *)&v139[4] = 1024;
            *(_DWORD *)size_t v140 = v116;
            *(_WORD *)&v140[4] = 2048;
            *(void *)&v140[6] = v117;
            *(_WORD *)&unsigned char v140[14] = 2048;
            *(void *)&v140[16] = v118;
            *(_WORD *)&v140[24] = 2048;
            *(void *)&v140[26] = v119;
            *(_WORD *)&v140[34] = 2048;
            *(double *)&v140[36] = v122;
            *(_WORD *)&v140[44] = 2048;
            *(void *)&v140[46] = v120;
            *(_WORD *)&v140[54] = 2048;
            *(double *)&v140[56] = v18;
            *(_WORD *)&v140[64] = 2048;
            *(double *)&v140[66] = v21;
            *(_WORD *)&v140[74] = 2048;
            uint64_t v141 = v121;
            __int16 v142 = 1024;
            BOOL v143 = v22 == 3;
            _os_log_debug_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d videoPlayer[%p] playbackClient[%p] Skipping avsync offset calculation. alarmType=%d rtpTimestamp=%u firstFramePresented=%d preventBackwardPresentationTime=%d shouldResetReferenceRTPTimestamp=%d shouldUseAdjustedReference=%d shouldResetPlaybackOffset=%d, isAudioTimestampJumpDetected=%d isAudioStalled=%d isDelayOffsetLagerThanAVSyncMaxJBThreshold=%d | videoFrameRTPTimestamp=%u playoutRTPTimestamp=%u timestampWraps=%u |videoFrameTimeInSeconds=%f lastFrame.presentationTime=%f ExternalSrcPlayoutTimeInSeconds=%f displayLinkTimestamp=%f lastPlayoutRTPTimestampInSeconds=%f | videoAlarmToAudioLeeway=%f | delayOffsetInSeconds=%f avSyncOffset=%f skipAVSyncDueToFixedMode=%d", buf, 0xD4u);
          }
        }
        double v8 = v124;
      }
      else
      {
        double v35 = v32 * 0.2 + *(double *)(a2 + 264) * 0.8;
        *(double *)(a2 + 264) = v35;
        double v36 = *(double *)(a1 + 768);
        if (v36 <= v35)
        {
          double v89 = *(double *)(a1 + 776);
          double v8 = v124;
          if (v89 >= v35) {
            int v37 = 0;
          }
          else {
            int v37 = vcvtpd_s64_f64((v89 - v35) * 60.0);
          }
        }
        else
        {
          int v37 = vcvtmd_s64_f64((v36 - v35) * 60.0);
          double v8 = v124;
        }
        double v38 = (double)v37 / 60.0;
        if (v38 != 0.0)
        {
          *(double *)(a2 + 64) = v38 + *(double *)(a2 + 64);
          *(double *)(a2 + 264) = v35 + v38;
          *(unsigned char *)(a2 + 40) = 1;
          ++*(_DWORD *)(a2 + 336);
          *(double *)(a2 + 320) = *(double *)(a2 + 320) + (double)(int)((fabs(v38) + 0.0005) * 1000.0);
        }
        *(double *)(a2 + 256) = v38;
        double v90 = v38 * 1000.0;
        double v91 = *(double *)(a2 + 304);
        if (v91 >= v38 * 1000.0) {
          double v91 = v38 * 1000.0;
        }
        if (*(double *)(a2 + 312) > v90) {
          double v90 = *(double *)(a2 + 312);
        }
        *(double *)(a2 + 304) = v91;
        *(double *)(a2 + 312) = v90;
      }
      double v56 = *(double *)(a2 + 272) + v17 - *(double *)(a2 + 152);
      double v57 = *(double *)(a2 + 176);
      double v58 = v56 - (v57 - v38);
      BOOL v59 = v58 <= 0.0343333333 && v58 >= -0.0176666667;
      LODWORD(v1_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(a1 + 568);
      int v60 = *(_DWORD *)(a2 + 168);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        double v61 = v57 - v56;
        int v62 = (int)(v56 * (double)*(unint64_t *)&v18) - v60;
        uint64_t v63 = VRTraceErrorLogLevelToCSTR();
        __int16 v64 = *MEMORY[0x1E4F47A50];
        int v65 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
          {
            int v66 = *((unsigned __int16 *)a3 + 14);
            double v67 = v17 - *(double *)(a2 + 152);
            uint64_t v68 = *(void *)(a2 + 56);
            int v69 = *(_DWORD *)(a2 + 168);
            uint64_t v70 = *(void *)(a2 + 176);
            uint64_t v72 = *(void *)(a2 + 264);
            uint64_t v71 = *(void *)(a2 + 272);
            *(_DWORD *)CMTime buf = 136320770;
            *(void *)&uint8_t buf[4] = v63;
            *(_WORD *)size_t v126 = 2080;
            *(void *)&v126[2] = "_VCVideoPlayer_DumpAVSyncState";
            *(_WORD *)&v126[10] = 1024;
            int v127 = 399;
            __int16 v128 = 2048;
            uint64_t v129 = a1;
            __int16 v130 = 2048;
            *(void *)uint64_t v131 = a2;
            *(_WORD *)&v131[8] = 2048;
            *(void *)size_t v132 = a3;
            *(_WORD *)&v132[8] = 1024;
            *(_DWORD *)&unsigned char v132[10] = v66;
            *(_WORD *)&v132[14] = 2048;
            *(void *)&v132[16] = v71;
            *(_WORD *)BOOL v133 = 2048;
            *(double *)&v133[2] = v17;
            __int16 v134 = 2048;
            *(double *)long long v135 = v67;
            *(_WORD *)&v135[8] = 2048;
            uint64_t v136 = v68;
            *(_WORD *)long long v137 = 1024;
            *(_DWORD *)&v137[2] = v69;
            *(_WORD *)size_t v138 = 1024;
            *(_DWORD *)&v138[2] = (int)(v56 * (double)*(unint64_t *)&v18);
            *(_WORD *)unint64_t v139 = 1024;
            *(_DWORD *)&v139[2] = v62;
            *(_WORD *)size_t v140 = 2048;
            *(void *)&v140[2] = v70;
            *(_WORD *)&v140[10] = 2048;
            *(double *)&v140[12] = v56;
            *(_WORD *)&v140[20] = 2048;
            *(double *)&v140[22] = v123;
            *(_WORD *)&v140[30] = 2048;
            *(void *)&v140[32] = v72;
            *(_WORD *)&v140[40] = 2048;
            *(void *)&v140[42] = 0;
            *(_WORD *)&v140[50] = 2048;
            *(double *)&v140[52] = v38;
            *(_WORD *)&v140[60] = 2048;
            *(double *)&v140[62] = v58;
            *(_WORD *)&v140[70] = 1024;
            *(_DWORD *)&v140[72] = v59;
            LOWORD(v141) = 1024;
            *(_DWORD *)((char *)&v141 + 2) = v61 > 0.0;
            _os_log_impl(&dword_1E1EA4000, v64, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d videoPlayer[%p] playbackClient[%p] displayAlarm[%p] frameSequenceNumber=%u ExternalSrcPlayoutTimeInSeconds=%f currentTime=%f HostTimeOffset=%f playbackOffsetInSeconds=%f | Math: lastFrame.rtpTimestamp=%u externalSourcePlayoutTimestamp=%u avSyncDeltaInSamples=%d, videoTimeInSeconds=%f, audioTimeInSeconds=%f playoutOffset=%f avPlayoutOffsetAverage=%f avSyncOffset=%f avSyncOffsetQuantized=%f | Validation: avSyncOffsetValidation=%f isNewPresentationTimeInLineWithAVSyncOffset=%d | isVideoEarly=%d", buf, 0xCCu);
          }
        }
        else if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
        {
          int v101 = *((unsigned __int16 *)a3 + 14);
          double v102 = v17 - *(double *)(a2 + 152);
          uint64_t v103 = *(void *)(a2 + 56);
          int v104 = *(_DWORD *)(a2 + 168);
          uint64_t v105 = *(void *)(a2 + 176);
          uint64_t v107 = *(void *)(a2 + 264);
          uint64_t v106 = *(void *)(a2 + 272);
          *(_DWORD *)CMTime buf = 136320770;
          *(void *)&uint8_t buf[4] = v63;
          *(_WORD *)size_t v126 = 2080;
          *(void *)&v126[2] = "_VCVideoPlayer_DumpAVSyncState";
          *(_WORD *)&v126[10] = 1024;
          int v127 = 399;
          __int16 v128 = 2048;
          uint64_t v129 = a1;
          __int16 v130 = 2048;
          *(void *)uint64_t v131 = a2;
          *(_WORD *)&v131[8] = 2048;
          *(void *)size_t v132 = a3;
          *(_WORD *)&v132[8] = 1024;
          *(_DWORD *)&unsigned char v132[10] = v101;
          *(_WORD *)&v132[14] = 2048;
          *(void *)&v132[16] = v106;
          *(_WORD *)BOOL v133 = 2048;
          *(double *)&v133[2] = v17;
          __int16 v134 = 2048;
          *(double *)long long v135 = v102;
          *(_WORD *)&v135[8] = 2048;
          uint64_t v136 = v103;
          *(_WORD *)long long v137 = 1024;
          *(_DWORD *)&v137[2] = v104;
          *(_WORD *)size_t v138 = 1024;
          *(_DWORD *)&v138[2] = (int)(v56 * (double)*(unint64_t *)&v18);
          *(_WORD *)unint64_t v139 = 1024;
          *(_DWORD *)&v139[2] = v62;
          *(_WORD *)size_t v140 = 2048;
          *(void *)&v140[2] = v105;
          *(_WORD *)&v140[10] = 2048;
          *(double *)&v140[12] = v56;
          *(_WORD *)&v140[20] = 2048;
          *(double *)&v140[22] = v123;
          *(_WORD *)&v140[30] = 2048;
          *(void *)&v140[32] = v107;
          *(_WORD *)&v140[40] = 2048;
          *(void *)&v140[42] = 0;
          *(_WORD *)&v140[50] = 2048;
          *(double *)&v140[52] = v38;
          *(_WORD *)&v140[60] = 2048;
          *(double *)&v140[62] = v58;
          *(_WORD *)&v140[70] = 1024;
          *(_DWORD *)&v140[72] = v59;
          LOWORD(v141) = 1024;
          *(_DWORD *)((char *)&v141 + 2) = v61 > 0.0;
          _os_log_debug_impl(&dword_1E1EA4000, v64, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d videoPlayer[%p] playbackClient[%p] displayAlarm[%p] frameSequenceNumber=%u ExternalSrcPlayoutTimeInSeconds=%f currentTime=%f HostTimeOffset=%f playbackOffsetInSeconds=%f | Math: lastFrame.rtpTimestamp=%u externalSourcePlayoutTimestamp=%u avSyncDeltaInSamples=%d, videoTimeInSeconds=%f, audioTimeInSeconds=%f playoutOffset=%f avPlayoutOffsetAverage=%f avSyncOffset=%f avSyncOffsetQuantized=%f | Validation: avSyncOffsetValidation=%f isNewPresentationTimeInLineWithAVSyncOffset=%d | isVideoEarly=%d", buf, 0xCCu);
        }
      }
    }
    _VideoPlayer_UpdateReportedAVSyncOffset(a1, a2, v17);
    if (*(unsigned __int16 *)(a2 + 300) >= *(unsigned __int16 *)(a1 + 592)
      && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v73 = VRTraceErrorLogLevelToCSTR();
      OSStatus v74 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v92 = *(unsigned __int16 *)(a2 + 300);
        int v93 = *(unsigned __int16 *)(a1 + 592);
        int v94 = a3[6];
        int v95 = *(unsigned __int16 *)(a2 + 296);
        int v96 = *(unsigned __int16 *)(a2 + 298);
        *(_DWORD *)CMTime buf = 136317186;
        *(void *)&uint8_t buf[4] = v73;
        *(_WORD *)size_t v126 = 2080;
        *(void *)&v126[2] = "_VCVideoPlayer_ProcessAlarmForDisplay";
        *(_WORD *)&v126[10] = 1024;
        int v127 = 636;
        __int16 v128 = 2048;
        uint64_t v129 = a1;
        __int16 v130 = 1024;
        *(_DWORD *)uint64_t v131 = v92;
        *(_WORD *)&v131[4] = 1024;
        *(_DWORD *)&v131[6] = v93;
        *(_WORD *)size_t v132 = 1024;
        *(_DWORD *)&v132[2] = v94;
        *(_WORD *)&v132[6] = 1024;
        *(_DWORD *)&v132[8] = v95;
        *(_WORD *)&v132[12] = 1024;
        *(_DWORD *)&v132[14] = v96;
        _os_log_error_impl(&dword_1E1EA4000, v74, OS_LOG_TYPE_ERROR, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] alarmsSentForDecodeButNotDisplayedCount=%u is excessively high, at or above the threshold of %u. rtpTimestamp=%u lastFrameSequenceNumberSentForDecode=%u lastFrameSequenceNumberSentForDisplay=%u", buf, 0x44u);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v75 = VRTraceErrorLogLevelToCSTR();
      unsigned int v76 = *MEMORY[0x1E4F47A50];
      uint64_t v77 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          int v78 = a3[6];
          int v79 = *(unsigned __int16 *)(a2 + 300);
          int v80 = *(unsigned __int16 *)(a2 + 296);
          int v81 = *(unsigned __int16 *)(a2 + 298);
          *(_DWORD *)CMTime buf = 136316930;
          *(void *)&uint8_t buf[4] = v75;
          *(_WORD *)size_t v126 = 2080;
          *(void *)&v126[2] = "_VCVideoPlayer_ProcessAlarmForDisplay";
          *(_WORD *)&v126[10] = 1024;
          int v127 = 638;
          __int16 v128 = 2048;
          uint64_t v129 = a1;
          __int16 v130 = 1024;
          *(_DWORD *)uint64_t v131 = v78;
          *(_WORD *)&v131[4] = 1024;
          *(_DWORD *)&v131[6] = v79;
          *(_WORD *)size_t v132 = 1024;
          *(_DWORD *)&v132[2] = v80;
          *(_WORD *)&v132[6] = 1024;
          *(_DWORD *)&v132[8] = v81;
          _os_log_impl(&dword_1E1EA4000, v76, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] rtpTimestamp=%u alarmsSentForDecodeButNotDisplayedCount=%u lastFrameSequenceNumberSentForDecode=%u lastFrameSequenceNumberSentForDisplay=%u", buf, 0x3Eu);
        }
      }
      else if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
      {
        int v97 = a3[6];
        int v98 = *(unsigned __int16 *)(a2 + 300);
        int v99 = *(unsigned __int16 *)(a2 + 296);
        int v100 = *(unsigned __int16 *)(a2 + 298);
        *(_DWORD *)CMTime buf = 136316930;
        *(void *)&uint8_t buf[4] = v75;
        *(_WORD *)size_t v126 = 2080;
        *(void *)&v126[2] = "_VCVideoPlayer_ProcessAlarmForDisplay";
        *(_WORD *)&v126[10] = 1024;
        int v127 = 638;
        __int16 v128 = 2048;
        uint64_t v129 = a1;
        __int16 v130 = 1024;
        *(_DWORD *)uint64_t v131 = v97;
        *(_WORD *)&v131[4] = 1024;
        *(_DWORD *)&v131[6] = v98;
        *(_WORD *)size_t v132 = 1024;
        *(_DWORD *)&v132[2] = v99;
        *(_WORD *)&v132[6] = 1024;
        *(_DWORD *)&v132[8] = v100;
        _os_log_debug_impl(&dword_1E1EA4000, v76, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] rtpTimestamp=%u alarmsSentForDecodeButNotDisplayedCount=%u lastFrameSequenceNumberSentForDecode=%u lastFrameSequenceNumberSentForDisplay=%u", buf, 0x3Eu);
      }
    }
    *(void *)(a2 + 24_Block_object_dispose(&STACK[0x250], 8) = *((void *)a3 + 5);
    int v82 = a3[6];
    uint64_t v83 = *(void *)a3;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    __int16 v85 = (void (*)(uint64_t, unsigned char *, uint64_t, void, uint64_t, uint64_t))*((void *)a3 + 1);
    uint64_t v84 = *((void *)a3 + 2);
    uint64_t v86 = *((unsigned __int8 *)a3 + 30);
    uint64_t v87 = *((unsigned __int16 *)a3 + 14);
    *(double *)CMTime buf = v8;
    *(_DWORD *)&uint8_t buf[8] = v82;
    *(_DWORD *)size_t v126 = -1431655766;
    *(void *)&v126[4] = v83;
    v85(v84, buf, v86, 0, a4, v87);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    Release(*(void *)(a1 + 552), a3);
    ++*(_DWORD *)(a1 + 700);
    *(_DWORD *)a2 = 1;
    *(_DWORD *)(a2 + 36) = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v30 = VRTraceErrorLogLevelToCSTR();
    int v31 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCVideoPlayer_ProcessAlarmForDisplay_cold_1(v30, a1, v31);
    }
  }
  return v6 != 0;
}

BOOL _VCVideoPlayer_IsNextDisplayAlarmReadyToShow(uint64_t a1, double *a2, uint64_t a3, double a4)
{
  BOOL result = 0;
  if (a3)
  {
    uint64_t v4 = *(void *)(a3 + 40);
    if (v4)
    {
      double v5 = *(double *)(a1 + 800) + a2[6] + a2[32];
      a2[7] = v5;
      if (_VCVideoPlayer_GetPresentationTime(a1, (uint64_t)a2, v4, a4, v5) <= a4) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t _VCVideoPlayer_CheckForNoVideoDisplayedTimeout(uint64_t a1, _DWORD *a2, double a3)
{
  int v6 = (pthread_mutex_t *)(a1 + 824);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 824));
  double v7 = *(double *)(a1 + 624);
  if (a3 - *(double *)(a1 + 888) >= v7 && *(void *)(a1 + 904))
  {
    uint64_t v8 = 46;
    if (!*a2) {
      uint64_t v8 = 2;
    }
    double v9 = a3 - *(double *)&a2[v8];
    if (v9 > v7)
    {
      *(double *)(a1 + 88_Block_object_dispose(&STACK[0x250], 8) = a3;
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
      (*(void (**)(void, double))(a1 + 904))(*(void *)(a1 + 896), v9);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    }
  }

  return pthread_mutex_unlock(v6);
}

BOOL _VCVideoPlayer_CheckAndProcessAlarm(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  double v30 = 0.0;
  double v31 = 0.0;
  ShouldProcessAlaruint64_t m = _VCVideoPlayer_ShouldProcessAlarm((unsigned char *)a1, (double *)a2, (uint64_t)a3, &v31, &v30, a4);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (!ShouldProcessAlarm)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      double v16 = *MEMORY[0x1E4F47A50];
      double v17 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        BOOL v18 = 0;
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        int v19 = a3[8];
        int v20 = a3[6];
        int v21 = *(unsigned __int16 *)(a2 + 300);
        *(_DWORD *)CMTime buf = 136317186;
        uint64_t v33 = v15;
        __int16 v34 = 2080;
        double v35 = "_VCVideoPlayer_CheckAndProcessAlarm";
        __int16 v36 = 1024;
        int v37 = 714;
        __int16 v38 = 2048;
        uint64_t v39 = a1;
        __int16 v40 = 1024;
        int v41 = v19;
        __int16 v42 = 2048;
        double v43 = v31;
        __int16 v44 = 2048;
        double v45 = v30;
        __int16 v46 = 1024;
        int v47 = v20;
        __int16 v48 = 1024;
        int v49 = v21;
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] NOT Processing alarmType=%d, presentationTime=%f displayTime=%f rtpTimeStamp=%u alarmsSentForDecodeButNotDisplayedCount=%d", buf, 0x4Cu);
      }
      else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v27 = a3[8];
        int v28 = a3[6];
        int v29 = *(unsigned __int16 *)(a2 + 300);
        *(_DWORD *)CMTime buf = 136317186;
        uint64_t v33 = v15;
        __int16 v34 = 2080;
        double v35 = "_VCVideoPlayer_CheckAndProcessAlarm";
        __int16 v36 = 1024;
        int v37 = 714;
        __int16 v38 = 2048;
        uint64_t v39 = a1;
        __int16 v40 = 1024;
        int v41 = v27;
        __int16 v42 = 2048;
        double v43 = v31;
        __int16 v44 = 2048;
        double v45 = v30;
        __int16 v46 = 1024;
        int v47 = v28;
        __int16 v48 = 1024;
        int v49 = v29;
        _os_log_debug_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] NOT Processing alarmType=%d, presentationTime=%f displayTime=%f rtpTimeStamp=%u alarmsSentForDecodeButNotDisplayedCount=%d", buf, 0x4Cu);
      }
    }
    BOOL v18 = 0;
    goto LABEL_19;
  }
  if (ErrorLogLevelForModule >= 8)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    double v10 = *MEMORY[0x1E4F47A50];
    int v11 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = a3[8];
        int v13 = a3[6];
        int v14 = *(unsigned __int16 *)(a2 + 300);
        *(_DWORD *)CMTime buf = 136317186;
        uint64_t v33 = v9;
        __int16 v34 = 2080;
        double v35 = "_VCVideoPlayer_CheckAndProcessAlarm";
        __int16 v36 = 1024;
        int v37 = 701;
        __int16 v38 = 2048;
        uint64_t v39 = a1;
        __int16 v40 = 1024;
        int v41 = v12;
        __int16 v42 = 2048;
        double v43 = v31;
        __int16 v44 = 2048;
        double v45 = v30;
        __int16 v46 = 1024;
        int v47 = v13;
        __int16 v48 = 1024;
        int v49 = v14;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Processing alarmType=%d, presentationTime=%f displayTime=%f rtpTimeStamp=%u alarmsSentForDecodeButNotDisplayedCount=%d", buf, 0x4Cu);
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v24 = a3[8];
      int v25 = a3[6];
      int v26 = *(unsigned __int16 *)(a2 + 300);
      *(_DWORD *)CMTime buf = 136317186;
      uint64_t v33 = v9;
      __int16 v34 = 2080;
      double v35 = "_VCVideoPlayer_CheckAndProcessAlarm";
      __int16 v36 = 1024;
      int v37 = 701;
      __int16 v38 = 2048;
      uint64_t v39 = a1;
      __int16 v40 = 1024;
      int v41 = v24;
      __int16 v42 = 2048;
      double v43 = v31;
      __int16 v44 = 2048;
      double v45 = v30;
      __int16 v46 = 1024;
      int v47 = v25;
      __int16 v48 = 1024;
      int v49 = v26;
      _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Processing alarmType=%d, presentationTime=%f displayTime=%f rtpTimeStamp=%u alarmsSentForDecodeButNotDisplayedCount=%d", buf, 0x4Cu);
    }
  }
  if (a3[8])
  {
    BOOL v22 = !_VCVideoPlayer_IsNextDisplayAlarmReadyToShow(a1, (double *)a2, (uint64_t)a3, v30);
    BOOL v18 = _VCVideoPlayer_ProcessAlarmForDisplay(a1, a2, a3, v22, v31);
    if (!v22) {
      ++*(_DWORD *)(a1 + 704);
    }
  }
  else
  {
    _VCVideoPlayer_ProcessAlarmForDecode(a1, a2, a3, v31);
    BOOL v18 = 1;
  }
LABEL_19:
  _VCVideoPlayer_CheckForNoVideoDisplayedTimeout(a1, (_DWORD *)a2, v31);
  return v18;
}

void _VCVideoPlayer_SetTargetQueueSizeInSeconds(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)(a2 + 48);
  if (v4 != a3)
  {
    *(double *)(a2 + 64) = a3 - v4 + *(double *)(a2 + 64);
    *(double *)(a2 + 4_Block_object_dispose(&STACK[0x250], 8) = a3;
    *(unsigned char *)(a2 + 40) = 1;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136316418;
        uint64_t v10 = v7;
        __int16 v11 = 2080;
        int v12 = "_VCVideoPlayer_SetTargetQueueSizeInSeconds";
        __int16 v13 = 1024;
        int v14 = 726;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        double v20 = a3;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] playbackClient=%p targetQueueSizeInSeconds=%f", (uint8_t *)&v9, 0x3Au);
      }
    }
  }
}

void _VCVideoPlayer_CheckAndProcessDisplayAlarms(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 562))
  {
    int v2 = *(_DWORD **)(a1 + 376);
    if (v2)
    {
      while (1)
      {
        uint64_t v8 = 0;
        BOOL v3 = _VCVideoPlayer_CheckAndProcessAlarm(a1, a1 + 128, v2, (double *)&v8);
        if (!v3) {
          break;
        }
        int v2 = *(_DWORD **)(a1 + 376);
        if (v2) {
          BOOL v4 = v3;
        }
        else {
          BOOL v4 = 0;
        }
        if (!v4) {
          goto LABEL_8;
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v5 = VRTraceErrorLogLevelToCSTR();
        int v6 = *MEMORY[0x1E4F47A50];
        uint64_t v7 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v10 = v5;
            __int16 v11 = 2080;
            int v12 = "_VCVideoPlayer_CheckAndProcessDisplayAlarms";
            __int16 v13 = 1024;
            int v14 = 739;
            __int16 v15 = 2048;
            uint64_t v16 = a1;
            __int16 v17 = 2048;
            uint64_t v18 = v8;
            _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Not processing display alarm, wait until next leeway=%f", buf, 0x30u);
          }
        }
        else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v10 = v5;
          __int16 v11 = 2080;
          int v12 = "_VCVideoPlayer_CheckAndProcessDisplayAlarms";
          __int16 v13 = 1024;
          int v14 = 739;
          __int16 v15 = 2048;
          uint64_t v16 = a1;
          __int16 v17 = 2048;
          uint64_t v18 = v8;
          _os_log_debug_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Not processing display alarm, wait until next leeway=%f", buf, 0x30u);
        }
      }
    }
    else
    {
LABEL_8:
      if (*(unsigned char *)a1)
      {
        pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      }
    }
  }
}

uint64_t _VCVideoPlayer_QueueAlarm(double a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 2147680258;
  uint64_t v15 = CheckInHandleDebug();
  if (v15)
  {
    uint64_t v16 = v15;
    if (a3 == 1 && !*(unsigned char *)(v15 + 562))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v20 = VRTraceErrorLogLevelToCSTR();
        uint64_t v21 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v45 = v20;
          __int16 v46 = 2080;
          int v47 = "_VCVideoPlayer_QueueAlarm";
          __int16 v48 = 1024;
          int v49 = 827;
          __int16 v50 = 2048;
          uint64_t v51 = v16;
          _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Ignoring QueueAlarmForDisplay.", buf, 0x26u);
        }
      }
      uint64_t v14 = 0;
      goto LABEL_56;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      uint64_t v18 = *MEMORY[0x1E4F47A50];
      uint64_t v19 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136317186;
          uint64_t v45 = v17;
          __int16 v46 = 2080;
          int v47 = "_VCVideoPlayer_QueueAlarm";
          __int16 v48 = 1024;
          int v49 = 832;
          __int16 v50 = 2048;
          uint64_t v51 = v16;
          __int16 v52 = 1024;
          *(_DWORD *)uint64_t v53 = a3;
          *(_WORD *)&v53[4] = 2048;
          *(double *)&v53[6] = a1;
          __int16 v54 = 1024;
          int v55 = a6;
          __int16 v56 = 1024;
          int v57 = a7;
          __int16 v58 = 1024;
          int v59 = a8;
          _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] alarmType=%d videoFrameTimeInSeconds=%f rtpTimestamp=%u frameSequenceNumber=%u didAssembleFail=%d", buf, 0x48u);
        }
      }
      else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CMTime buf = 136317186;
        uint64_t v45 = v17;
        __int16 v46 = 2080;
        int v47 = "_VCVideoPlayer_QueueAlarm";
        __int16 v48 = 1024;
        int v49 = 832;
        __int16 v50 = 2048;
        uint64_t v51 = v16;
        __int16 v52 = 1024;
        *(_DWORD *)uint64_t v53 = a3;
        *(_WORD *)&v53[4] = 2048;
        *(double *)&v53[6] = a1;
        __int16 v54 = 1024;
        int v55 = a6;
        __int16 v56 = 1024;
        int v57 = a7;
        __int16 v58 = 1024;
        int v59 = a8;
        _os_log_debug_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] alarmType=%d videoFrameTimeInSeconds=%f rtpTimestamp=%u frameSequenceNumber=%u didAssembleFail=%d", buf, 0x48u);
      }
    }
    pthread_mutex_lock((pthread_mutex_t *)(v16 + 16));
    BOOL v22 = Alloc(*(int **)(v16 + 552));
    if (!v22)
    {
      uint64_t v14 = 2147680259;
      goto LABEL_55;
    }
    *(double *)BOOL v22 = a1;
    v22[6] = a6;
    *((_WORD *)v22 + 14) = a7;
    *((unsigned char *)v22 + 30) = a8;
    v22[8] = a3;
    *((void *)v22 + 1) = a4;
    *((void *)v22 + 2) = a5;
    double v23 = (void *)(v16 + 368);
    uint64_t v24 = 696;
    if (!a3) {
      uint64_t v24 = 688;
    }
    uint64_t v25 = 376;
    if (a3) {
      double v23 = (void *)(v16 + 376);
    }
    else {
      uint64_t v25 = 368;
    }
    ++*(_DWORD *)(v16 + v24);
    uint64_t v26 = *(void *)(v16 + v25);
    if (v26 && *(double *)v26 <= a1)
    {
      do
      {
        uint64_t v27 = v26;
        uint64_t v26 = *(void *)(v26 + 40);
      }
      while (v26 && *(double *)v26 <= a1);
      double v23 = (void *)(v27 + 40);
    }
    *((void *)v22 + 5) = v26;
    *double v23 = v22;
    if (a8)
    {
      if (a3)
      {
LABEL_36:
        if (a3 != 1 || *(unsigned char *)(v16 + 745)) {
          goto LABEL_54;
        }
        if (*(unsigned __int16 *)(v16 + 428) < *(unsigned __int16 *)(v16 + 592) || !*(unsigned char *)(v16 + 430))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v33 = VRTraceErrorLogLevelToCSTR();
            __int16 v34 = *MEMORY[0x1E4F47A50];
            double v35 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v36 = "Decode";
                int v37 = *(unsigned __int16 *)(v16 + 428);
                *(_DWORD *)CMTime buf = 136316674;
                if (a8) {
                  __int16 v36 = "Player";
                }
                uint64_t v45 = v33;
                __int16 v46 = 2080;
                int v47 = "_VCVideoPlayer_QueueAlarm";
                __int16 v48 = 1024;
                int v49 = 878;
                __int16 v50 = 2048;
                uint64_t v51 = v16;
                __int16 v52 = 2080;
                *(void *)uint64_t v53 = v36;
                *(_WORD *)&v53[8] = 1024;
                *(_DWORD *)&v53[10] = a6;
                __int16 v54 = 1024;
                int v55 = v37;
                _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Processing on %s Thread. rtpTimeStamp=%u alarmsSentForDecodeButNotDisplayedCount=%u", buf, 0x3Cu);
              }
            }
            else if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            {
              int v41 = "Decode";
              int v42 = *(unsigned __int16 *)(v16 + 428);
              *(_DWORD *)CMTime buf = 136316674;
              if (a8) {
                int v41 = "Player";
              }
              uint64_t v45 = v33;
              __int16 v46 = 2080;
              int v47 = "_VCVideoPlayer_QueueAlarm";
              __int16 v48 = 1024;
              int v49 = 878;
              __int16 v50 = 2048;
              uint64_t v51 = v16;
              __int16 v52 = 2080;
              *(void *)uint64_t v53 = v41;
              *(_WORD *)&v53[8] = 1024;
              *(_DWORD *)&v53[10] = a6;
              __int16 v54 = 1024;
              int v55 = v42;
              _os_log_debug_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Processing on %s Thread. rtpTimeStamp=%u alarmsSentForDecodeButNotDisplayedCount=%u", buf, 0x3Cu);
            }
          }
          _VCVideoPlayer_CheckAndProcessDisplayAlarms(v16);
          goto LABEL_54;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 8)
        {
LABEL_54:
          uint64_t v14 = 0;
          goto LABEL_55;
        }
        uint64_t v28 = VRTraceErrorLogLevelToCSTR();
        int v29 = *MEMORY[0x1E4F47A50];
        double v30 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v39 = "Decode";
            int v40 = *(unsigned __int16 *)(v16 + 428);
            *(_DWORD *)CMTime buf = 136316674;
            if (a8) {
              uint64_t v39 = "Player";
            }
            uint64_t v45 = v28;
            __int16 v46 = 2080;
            int v47 = "_VCVideoPlayer_QueueAlarm";
            __int16 v48 = 1024;
            int v49 = 881;
            __int16 v50 = 2048;
            uint64_t v51 = v16;
            __int16 v52 = 2080;
            *(void *)uint64_t v53 = v39;
            *(_WORD *)&v53[8] = 1024;
            *(_DWORD *)&v53[10] = a6;
            __int16 v54 = 1024;
            int v55 = v40;
            _os_log_debug_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] NOT processing on %s Thread. rtpTimeStamp=%u alarmsSentForDecodeButNotDisplayedCount=%u", buf, 0x3Cu);
          }
          goto LABEL_54;
        }
        uint64_t v14 = 0;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          double v31 = "Decode";
          int v32 = *(unsigned __int16 *)(v16 + 428);
          *(_DWORD *)CMTime buf = 136316674;
          if (a8) {
            double v31 = "Player";
          }
          uint64_t v45 = v28;
          __int16 v46 = 2080;
          int v47 = "_VCVideoPlayer_QueueAlarm";
          __int16 v48 = 1024;
          int v49 = 881;
          __int16 v50 = 2048;
          uint64_t v51 = v16;
          __int16 v52 = 2080;
          *(void *)uint64_t v53 = v31;
          *(_WORD *)&v53[8] = 1024;
          *(_DWORD *)&v53[10] = a6;
          __int16 v54 = 1024;
          int v55 = v32;
          _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] NOT processing on %s Thread. rtpTimeStamp=%u alarmsSentForDecodeButNotDisplayedCount=%u", buf, 0x3Cu);
          goto LABEL_54;
        }
LABEL_55:
        pthread_mutex_unlock((pthread_mutex_t *)(v16 + 16));
LABEL_56:
        CheckOutHandleDebug();
        return v14;
      }
    }
    else if (a3 || *(unsigned __int16 *)(v16 + 424) >= *(unsigned __int16 *)(v16 + 426))
    {
      goto LABEL_33;
    }
    if (*(unsigned char *)(v16 + 562))
    {
      *(_WORD *)(v16 + 42_Block_object_dispose(&STACK[0x250], 8) = 0;
      *(unsigned char *)(v16 + 430) = 0;
    }
LABEL_33:
    if (!a3 && *(unsigned char *)v16)
    {
      pthread_cond_signal((pthread_cond_t *)(v16 + 80));
      goto LABEL_54;
    }
    goto LABEL_36;
  }
  return v14;
}

uint64_t VCVideoPlayer_QueueAlarmForDecode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  return _VCVideoPlayer_QueueAlarm(a7, a1, 0, a2, a3, a4, a5, a6);
}

uint64_t VCVideoPlayer_QueueAlarmForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  return _VCVideoPlayer_QueueAlarm(a7, a1, 1, a2, a3, a4, a5, a6);
}

uint64_t VCVideoPlayer_CallAlarms(uint64_t a1, double a2, double a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = CheckInHandleDebug();
  if (!v6) {
    return 2147680258;
  }
  uint64_t v7 = v6;
  if (!*(unsigned char *)(v6 + 808)) {
    a2 = micro();
  }
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 16));
  if (a2 - *(double *)(v7 + 360) > 5.0)
  {
    _VCVideoPlayer_HealthPrint(v7, v7 + 128, NAN);
    *(double *)(v7 + 360) = a2;
  }
  if (!*(unsigned char *)(v7 + 560))
  {
    if (a3 == 0.0) {
      *(_DWORD *)(v7 + 164) = 1;
    }
    double v8 = *(double *)(v7 + 600) + *(double *)(v7 + 608) + *(double *)(v7 + 816);
    if (a3 == 0.0 || a3 - *(double *)(v7 + 272) > v8) {
      pthread_cond_signal((pthread_cond_t *)(v7 + 80));
    }
    *(double *)(v7 + 272) = v8 + a3;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      __int16 v11 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(v7 + 272);
          int v15 = 136316674;
          uint64_t v16 = v9;
          __int16 v17 = 2080;
          uint64_t v18 = "VCVideoPlayer_CallAlarms";
          __int16 v19 = 1024;
          int v20 = 924;
          __int16 v21 = 2048;
          uint64_t v22 = v7;
          __int16 v23 = 2048;
          uint64_t v24 = a1;
          __int16 v25 = 2048;
          uint64_t v26 = v12;
          __int16 v27 = 2048;
          double v28 = a2;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] PlayerHandle=%p nextPlayoutTimeInSeconds=%.6f hostTimeForPlayout=%.6f", (uint8_t *)&v15, 0x44u);
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *(void *)(v7 + 272);
        int v15 = 136316674;
        uint64_t v16 = v9;
        __int16 v17 = 2080;
        uint64_t v18 = "VCVideoPlayer_CallAlarms";
        __int16 v19 = 1024;
        int v20 = 924;
        __int16 v21 = 2048;
        uint64_t v22 = v7;
        __int16 v23 = 2048;
        uint64_t v24 = a1;
        __int16 v25 = 2048;
        uint64_t v26 = v14;
        __int16 v27 = 2048;
        double v28 = a2;
        _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] PlayerHandle=%p nextPlayoutTimeInSeconds=%.6f hostTimeForPlayout=%.6f", (uint8_t *)&v15, 0x44u);
      }
    }
  }
  *(double *)(v7 + 280) = a2;
  *(double *)(v7 + 400) = a3;
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 16));
  CheckOutHandleDebug();
  return 0;
}

void _VCVideoPlayer_HealthPrint(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a1 + 640);
  int v7 = *(_DWORD *)(a1 + 644);
  int v8 = *(_DWORD *)(a1 + 648);
  int v9 = *(_DWORD *)(a1 + 652);
  int v10 = *(_DWORD *)(a1 + 656);
  long long v11 = *(_OWORD *)(a1 + 704);
  long long v12 = *(_OWORD *)(a1 + 720);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 688);
  *(_OWORD *)(a1 + 656) = v11;
  int v13 = *(_DWORD *)(a1 + 688) - v6;
  int v41 = *(_DWORD *)(a1 + 692) - v7;
  int v14 = *(_DWORD *)(a1 + 696);
  int v15 = *(_DWORD *)(a1 + 700);
  int v16 = *(_DWORD *)(a1 + 704);
  *(_OWORD *)(a1 + 672) = v12;
  int v17 = *(unsigned __int8 *)(a1 + 562);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v17)
  {
    if (ErrorLogLevelForModule >= 6)
    {
      uint64_t v40 = VRTraceErrorLogLevelToCSTR();
      __int16 v19 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *(_DWORD *)(a1 + 736);
        int v21 = *(unsigned __int16 *)(a2 + 300);
        uint64_t v22 = *(void *)(a1 + 632);
        uint64_t v23 = *(void *)(a2 + 160);
        int v24 = *(_DWORD *)(a2 + 168);
        uint64_t v25 = *(void *)(a2 + 176);
        uint64_t v27 = *(void *)(a2 + 48);
        uint64_t v26 = *(void *)(a2 + 56);
        uint64_t v28 = *(void *)(a2 + 256);
        *(_DWORD *)CMTime buf = 136319746;
        uint64_t v43 = v40;
        __int16 v44 = 2080;
        uint64_t v45 = "_VCVideoPlayer_HealthPrint";
        __int16 v46 = 1024;
        int v47 = 810;
        __int16 v48 = 2048;
        uint64_t v49 = a1;
        __int16 v50 = 1024;
        int v51 = v20;
        __int16 v52 = 1024;
        int v53 = v13;
        __int16 v54 = 1024;
        int v55 = v41;
        __int16 v56 = 1024;
        *(_DWORD *)int v57 = v14 - v8;
        *(_WORD *)&uint8_t v57[4] = 1024;
        *(_DWORD *)&v57[6] = v15 - v9;
        LOWORD(v5_Block_object_dispose(&STACK[0x250], 8) = 1024;
        *(_DWORD *)((char *)&v58 + 2) = v16 - v10;
        HIWORD(v5_Block_object_dispose(&STACK[0x250], 8) = 1024;
        LODWORD(v59) = v21;
        WORD2(v59) = 2048;
        *(double *)((char *)&v59 + 6) = a3;
        HIWORD(v59) = 2048;
        *(void *)uint64_t v60 = v22;
        *(_WORD *)&v60[8] = 2048;
        *(void *)double v61 = v23;
        *(_WORD *)&v61[8] = 1024;
        *(_DWORD *)int v62 = v24;
        *(_WORD *)&v62[4] = 2048;
        *(void *)&unsigned char v62[6] = v25;
        __int16 v63 = 2048;
        uint64_t v64 = v27;
        __int16 v65 = 2048;
        uint64_t v66 = v26;
        __int16 v67 = 2048;
        uint64_t v68 = v28;
        uint64_t v29 = "VCVideoPlayer [%s] %s:%d @=@ Health: VCVideoPlayer [%p] Health displayLinkTickCount=%d numAlarmsEnqueuedFo"
              "rDecode=%d numAlarmsProcessedForDecode=%d numAlarmsEnqueuedForDisplay=%d numAlarmsProcessedForDisplay=%d n"
              "umAlarmsDropped=%d alarmsSentForDecodeButNotDisplayedCount=%d tickInterval=%f displayLinkTimestamp=%f last"
              "PresentationTime=%f lastRTPTimestamp=%u lastFrameTimeInSeconds=%f targetJitterBufferInSeconds=%f playbackO"
              "ffsetInSeconds=%f avSyncOffset=%f";
        double v30 = v19;
        uint32_t v31 = 156;
LABEL_8:
        _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
      }
    }
  }
  else if (ErrorLogLevelForModule >= 6)
  {
    uint64_t v32 = VRTraceErrorLogLevelToCSTR();
    uint64_t v33 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v34 = *(_DWORD *)(a1 + 736);
      uint64_t v35 = *(void *)(a1 + 632);
      uint64_t v36 = *(void *)(a2 + 160);
      int v37 = *(_DWORD *)(a2 + 168);
      double v38 = *(double *)(a2 + 176);
      double v39 = *(double *)(a2 + 144);
      *(_DWORD *)CMTime buf = 136318466;
      uint64_t v43 = v32;
      __int16 v44 = 2080;
      uint64_t v45 = "_VCVideoPlayer_HealthPrint";
      __int16 v46 = 1024;
      int v47 = 812;
      __int16 v48 = 2048;
      uint64_t v49 = a1;
      __int16 v50 = 1024;
      int v51 = v34;
      __int16 v52 = 1024;
      int v53 = v13;
      __int16 v54 = 1024;
      int v55 = v41;
      __int16 v56 = 2048;
      *(double *)int v57 = a3;
      *(_WORD *)&v57[8] = 2048;
      uint64_t v58 = v35;
      LOWORD(v59) = 2048;
      *(void *)((char *)&v59 + 2) = v36;
      WORD5(v59) = 1024;
      HIDWORD(v59) = v37;
      *(_WORD *)uint64_t v60 = 2048;
      *(double *)&v60[2] = v38;
      *(_WORD *)double v61 = 2048;
      *(double *)&v61[2] = v39;
      *(_WORD *)int v62 = 2048;
      *(double *)&v62[2] = v38 - v39;
      uint64_t v29 = "VCVideoPlayer [%s] %s:%d @=@ Health: VCVideoPlayer [%p] Health displayLinkTickCount=%d numAlarmsEnqueuedForD"
            "ecode=%d numAlarmsProcessedForDecode=%d tickInterval=%f displayLinkTimestamp=%f lastPresentationTime=%f last"
            "RTPTimestamp=%u lastFrameTimeInSeconds=%f externalSourcePlayoutTimeInSeconds=%f lastFrameTimeInSeconds-exter"
            "nalSourcePlayoutTimeInSeconds=%f";
      double v30 = v33;
      uint32_t v31 = 122;
      goto LABEL_8;
    }
  }
}

uint64_t VCVideoPlayer_DisplayLinkTick(double a1, double a2, double a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = CheckInHandleDebug();
  if (!v6) {
    return 2147680259;
  }
  uint64_t v7 = v6;
  int v8 = (pthread_mutex_t *)(v6 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
  int v9 = *(_DWORD *)(v7 + 736);
  if (v9)
  {
    signed int v10 = *(_DWORD *)(v7 + 740);
  }
  else
  {
    *(double *)(v7 + 752) = a1;
    signed int v10 = vcvtpd_s64_f64(5.0 / a1);
    *(_DWORD *)(v7 + 740) = v10;
  }
  if (!(v9 % v10)) {
    _VCVideoPlayer_HealthPrint(v7, v7 + 128, a1);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    int v13 = *MEMORY[0x1E4F47A50];
    int v14 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 136316674;
        uint64_t v16 = v12;
        __int16 v17 = 2080;
        uint64_t v18 = "VCVideoPlayer_DisplayLinkTick";
        __int16 v19 = 1024;
        int v20 = 953;
        __int16 v21 = 2048;
        uint64_t v22 = v7;
        __int16 v23 = 2048;
        double v24 = a1;
        __int16 v25 = 2048;
        double v26 = a2;
        __int16 v27 = 2048;
        double v28 = a3;
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] duration=%f currentDisplayTime=%f targetDisplayTime=%f ", (uint8_t *)&v15, 0x44u);
      }
    }
    else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 136316674;
      uint64_t v16 = v12;
      __int16 v17 = 2080;
      uint64_t v18 = "VCVideoPlayer_DisplayLinkTick";
      __int16 v19 = 1024;
      int v20 = 953;
      __int16 v21 = 2048;
      uint64_t v22 = v7;
      __int16 v23 = 2048;
      double v24 = a1;
      __int16 v25 = 2048;
      double v26 = a2;
      __int16 v27 = 2048;
      double v28 = a3;
      _os_log_debug_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] duration=%f currentDisplayTime=%f targetDisplayTime=%f ", (uint8_t *)&v15, 0x44u);
    }
  }
  *(double *)(v7 + 632) = a3;
  ++*(_DWORD *)(v7 + 736);
  _VCVideoPlayer_CheckAndProcessDisplayAlarms(v7);
  pthread_mutex_unlock(v8);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VCVideoPlayer_GetPlayoutInfo(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2147680258;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (pthread_mutex_t *)(v5 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 16));
  if (*(_DWORD *)(v6 + 128) && *(unsigned char *)(v6 + 560))
  {
    Displayint Timestamp = _VCVideoPlayer_GetDisplayTimestamp(v6);
    double v9 = *(double *)(v6 + 312);
    double v10 = DisplayTimestamp - v9;
    if (v9 == 0.0) {
      double v11 = 0.0;
    }
    else {
      double v11 = DisplayTimestamp - v9;
    }
    int v12 = *(_DWORD *)(v6 + 320);
    if (v11 >= 0.0)
    {
      double v13 = v11 * (double)*(unsigned int *)(v6 + 568);
      unsigned int v14 = v12 + v13;
      unsigned int v15 = *(_DWORD *)(v6 + 340);
      if (v14 >= v15 || v14 - v15 >= 0x7FFFFFFF) {
        goto LABEL_20;
      }
      int v17 = 1;
    }
    else
    {
      LODWORD(v10) = *(_DWORD *)(v6 + 568);
      double v13 = (v11 + *(double *)(v6 + 752)) * (double)*(unint64_t *)&v10;
      unsigned int v14 = v12 + v13;
      unsigned int v15 = *(_DWORD *)(v6 + 340);
      if (v15 >= v14 || v15 - v14 > 0x7FFFFFFE) {
        goto LABEL_20;
      }
      int v17 = -1;
    }
    *(_DWORD *)(v6 + 352) += v17;
LABEL_20:
    if (!*(unsigned char *)(v6 + 336)) {
      *(unsigned char *)(v6 + 336) = 1;
    }
    if (v15 == v14 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v20 = VRTraceErrorLogLevelToCSTR();
      __int16 v21 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(v6 + 312);
        int v23 = *(_DWORD *)(v6 + 320);
        int v33 = 136317442;
        uint64_t v34 = v20;
        __int16 v35 = 2080;
        uint64_t v36 = "_VCVideoPlayer_GetPlayoutRTPTimestamp";
        __int16 v37 = 1024;
        int v38 = 993;
        __int16 v39 = 2048;
        *(void *)uint64_t v40 = v6;
        *(_WORD *)&v40[8] = 2048;
        *(void *)&v40[10] = v6 + 128;
        __int16 v41 = 2048;
        double v42 = DisplayTimestamp;
        __int16 v43 = 2048;
        uint64_t v44 = v22;
        __int16 v45 = 2048;
        double v46 = v11;
        __int16 v47 = 1024;
        int v48 = v23;
        __int16 v49 = 1024;
        unsigned int v50 = v15;
        _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] playbackClient:%p displayTimestamp:%f lastDisplayedFrame.presentationTime:%f timeDiff:%f lastDisplayedFrame.rtpTimestamp:%u playoutRTPTimestamp:%u", (uint8_t *)&v33, 0x5Au);
      }
    }
    *(_DWORD *)(v6 + 340) = v14;
    LODWORD(v13) = *(_DWORD *)(v6 + 352);
    *(double *)&unint64_t v24 = (double)v14;
    LODWORD(v24) = *(_DWORD *)(v6 + 568);
    *(double *)(v6 + 344) = ((double)v14 + (double)*(unint64_t *)&v13 * 4294967300.0) / (double)v24;
    *a2 = v14;
    *a3 = *(void *)(v6 + 384);
  }
  pthread_mutex_unlock(v7);
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    return 0;
  }
  uint64_t v25 = VRTraceErrorLogLevelToCSTR();
  double v26 = *MEMORY[0x1E4F47A50];
  __int16 v27 = *MEMORY[0x1E4F47A50];
  if (*MEMORY[0x1E4F47A40])
  {
    BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v28)
    {
      unsigned int v29 = *a2;
      uint64_t v30 = *a3;
      int v33 = 136316162;
      uint64_t v34 = v25;
      __int16 v35 = 2080;
      uint64_t v36 = "VCVideoPlayer_GetPlayoutInfo";
      __int16 v37 = 1024;
      int v38 = 1018;
      __int16 v39 = 1024;
      *(_DWORD *)uint64_t v40 = v29;
      *(_WORD *)&v40[4] = 2048;
      *(void *)&v40[6] = v30;
      _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer_GetPlayoutInfo setting PlayoutRTPTimestamp: %u, avSyncOffset: %.4f", (uint8_t *)&v33, 0x2Cu);
      return 0;
    }
  }
  else
  {
    uint64_t result = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      unsigned int v31 = *a2;
      uint64_t v32 = *a3;
      int v33 = 136316162;
      uint64_t v34 = v25;
      __int16 v35 = 2080;
      uint64_t v36 = "VCVideoPlayer_GetPlayoutInfo";
      __int16 v37 = 1024;
      int v38 = 1018;
      __int16 v39 = 1024;
      *(_DWORD *)uint64_t v40 = v31;
      *(_WORD *)&v40[4] = 2048;
      *(void *)&v40[6] = v32;
      _os_log_debug_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer_GetPlayoutInfo setting PlayoutRTPTimestamp: %u, avSyncOffset: %.4f", (uint8_t *)&v33, 0x2Cu);
      return 0;
    }
  }
  return result;
}

uint64_t VCVideoPlayer_SetReferenceRTPTimestamp(double a1, double a2, uint64_t a3, int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = CheckInHandleDebug();
  if (!v7) {
    return 2147680258;
  }
  uint64_t v8 = v7;
  if (*(_DWORD *)(v7 + 564) != 3)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v7 + 16));
    if (!*(unsigned char *)(v8 + 160))
    {
      *(double *)(v8 + 136) = a1;
      *(_DWORD *)(v8 + 144) = a4;
    }
    if (*(_DWORD *)(v8 + 216) != a4)
    {
      *(_DWORD *)(v8 + 216) = a4;
      *(unsigned char *)(v8 + 200) = 1;
      *(double *)(v8 + 20_Block_object_dispose(&STACK[0x250], 8) = a1;
      *(double *)(v8 + 224) = a2;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        double v10 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(v8 + 208);
          uint64_t v12 = *(void *)(v8 + 224);
          int v14 = 136316674;
          uint64_t v15 = v9;
          __int16 v16 = 2080;
          int v17 = "VCVideoPlayer_SetReferenceRTPTimestamp";
          __int16 v18 = 1024;
          int v19 = 1045;
          __int16 v20 = 2048;
          uint64_t v21 = v8;
          __int16 v22 = 1024;
          int v23 = a4;
          __int16 v24 = 2048;
          uint64_t v25 = v11;
          __int16 v26 = 2048;
          uint64_t v27 = v12;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] referenceRTPTimestamp=%u referencePresentationTime=%f videoFrameTimeInSeconds=%f", (uint8_t *)&v14, 0x40u);
        }
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 16));
    CheckOutHandleDebug();
  }
  return 0;
}

uint64_t VCVideoPlayer_SetTargetQueueSizeInSeconds(double a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2147680258;
  }
  uint64_t v3 = v2;
  if (!*(unsigned char *)(v2 + 563)) {
    goto LABEL_11;
  }
  if (fabs(a1) <= 2.0)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 16));
    _VCVideoPlayer_SetTargetQueueSizeInSeconds(v3, v3 + 128, a1);
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 16));
LABEL_11:
    CheckOutHandleDebug();
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    uint64_t v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v7 = 136316162;
      uint64_t v8 = v4;
      __int16 v9 = 2080;
      double v10 = "VCVideoPlayer_SetTargetQueueSizeInSeconds";
      __int16 v11 = 1024;
      int v12 = 1068;
      __int16 v13 = 2048;
      uint64_t v14 = v3;
      __int16 v15 = 2048;
      double v16 = a1;
      _os_log_error_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_ERROR, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] invalid targetQueueSizeInSeconds:%f!", (uint8_t *)&v7, 0x30u);
    }
  }
  CheckOutHandleDebug();
  return 14;
}

uint64_t VCVideoPlayer_Create(uint64_t *a1, uint64_t a2)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t result = 2147680257;
  if (!a1 || !a2) {
    return result;
  }
  uint64_t v5 = (char *)malloc_type_calloc(1uLL, 0x390uLL, 0x10A00406DABCD5FuLL);
  if (!v5) {
    return 2147680259;
  }
  uint64_t v6 = v5;
  Alloc = CreateAlloc(48, 0);
  *((void *)v6 + 69) = Alloc;
  if (!Alloc)
  {
    free(v6);
    return 2147680259;
  }
  uint64_t Handle = CreateHandle();
  *a1 = Handle;
  if (Handle == 0xFFFFFFFFLL)
  {
    DestroyAlloc(*((void *)v6 + 69));
    free(v6);
    return 2147680261;
  }
  pthread_mutex_init((pthread_mutex_t *)(v6 + 824), 0);
  pthread_mutex_init((pthread_mutex_t *)(v6 + 16), 0);
  pthread_cond_init((pthread_cond_t *)(v6 + 80), 0);
  v6[808] = _os_feature_enabled_impl();
  long long v9 = *(_OWORD *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 64);
  long long v11 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 37) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 35) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 36) = v11;
  *((void *)v6 + 7_Block_object_dispose(&STACK[0x250], 8) = v10;
  *((_OWORD *)v6 + 3_Block_object_dispose(&STACK[0x250], 8) = v9;
  if (*((double *)v6 + 75) == 0.0) {
    *((void *)v6 + 75) = 0x3F947AE147AE147BLL;
  }
  if (*((double *)v6 + 78) == 0.0) {
    *((void *)v6 + 7_Block_object_dispose(&STACK[0x250], 8) = 0x4014000000000000;
  }
  *((void *)v6 + 102) = 0;
  *((void *)v6 + 79) = 0x7FF8000000000000;
  int v12 = (void *)*MEMORY[0x1E4F1CFC8];
  if (v6[616]) {
    __int16 v13 = (void *)*MEMORY[0x1E4F1CFC8];
  }
  else {
    __int16 v13 = (void *)*MEMORY[0x1E4F1CFD0];
  }
  uint64_t v14 = (void *)*MEMORY[0x1E4F21EB0];
  keys[0] = *(void **)MEMORY[0x1E4F21EA8];
  keys[1] = v14;
  keys[2] = *(void **)MEMORY[0x1E4F21EA0];
  values[0] = @"com.apple.avconference.VCVideoPlayer.alarmproc";
  values[1] = v12;
  values[2] = v13;
  CFDictionaryRef v15 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v16 = FigThreadCreate();
  if (v15) {
    CFRelease(v15);
  }
  if (v16)
  {
    CheckOutHandleDebug();
    DestroyAlloc(*((void *)v6 + 69));
    pthread_mutex_destroy((pthread_mutex_t *)(v6 + 824));
    pthread_mutex_destroy((pthread_mutex_t *)(v6 + 16));
    pthread_cond_destroy((pthread_cond_t *)(v6 + 80));
    free(v6);
    return v16 | 0xA0030000;
  }
  double v17 = 0.0166666667;
  if ((*((_DWORD *)v6 + 141) & 0xFFFFFFFD) != 0) {
    double v17 = 0.0;
  }
  *((double *)v6 + 100) = VCDefaults_GetDoubleValueForKey(@"videoPlayerAverageDecodeTime", v17);
  v6[760] = *(unsigned char *)(a2 + 34);
  v6[745] = VCDefaults_GetBoolValueForKey(@"videoPlayerProcessDisplayFramesOnlyOnDisplayLinkThread", 0);
  *((double *)v6 + 96) = VCDefaults_GetDoubleValueForKey(@"avSyncAudioEarlyThreshold", -0.0166666667);
  *((double *)v6 + 97) = VCDefaults_GetDoubleValueForKey(@"avSyncAudioLateThreshold", 0.0333333333);
  *((double *)v6 + 9_Block_object_dispose(&STACK[0x250], 8) = VCDefaults_GetDoubleValueForKey(@"avSyncAudioTimestampJumpDetectionThreshold", 0.06);
  *((double *)v6 + 99) = VCDefaults_GetDoubleValueForKey(@"avSyncMaxAudioJitterBufferLevelThreshold", 0.5);
  *((_OWORD *)v6 + 27) = xmmword_1E259E370;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v18 = VRTraceErrorLogLevelToCSTR();
    int v19 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *((void *)v6 + 96);
      uint64_t v21 = *((void *)v6 + 97);
      uint64_t v22 = *((void *)v6 + 98);
      uint64_t v23 = *((void *)v6 + 99);
      int v36 = 136317186;
      uint64_t v37 = v18;
      __int16 v38 = 2080;
      __int16 v39 = "VCVideoPlayer_Create";
      __int16 v40 = 1024;
      int v41 = 1175;
      __int16 v42 = 2048;
      __int16 v43 = v6;
      __int16 v44 = 2048;
      *(void *)__int16 v45 = v20;
      *(_WORD *)&v45[8] = 2048;
      *(void *)&v45[10] = v21;
      *(_WORD *)&v45[18] = 2048;
      *(void *)&v45[20] = v22;
      *(_WORD *)&v45[28] = 2048;
      *(void *)double v46 = v23;
      *(_WORD *)&v46[8] = 2048;
      __int16 v47 = a1;
      _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Defaults: avSyncAudioEarlyThreshold=%f, avSyncAudioLateThreshold=%f avSyncAudioTimestampJumpThreshold=%f avSyncAudioMaxJBThreshold=%f videoPlayerHandlePtr=%p", (uint8_t *)&v36, 0x58u);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
    return 0;
  }
  uint64_t v24 = VRTraceErrorLogLevelToCSTR();
  uint64_t v25 = *MEMORY[0x1E4F47A50];
  BOOL v26 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v26)
  {
    int v27 = v6[760];
    uint64_t v28 = *((void *)v6 + 75);
    uint64_t v29 = *((void *)v6 + 76);
    int v30 = v6[808];
    uint64_t v31 = *((void *)v6 + 102);
    int v32 = v6[562];
    int v33 = v6[561];
    int v34 = v6[560];
    int v35 = v6[563];
    int v36 = 136318210;
    uint64_t v37 = v24;
    __int16 v38 = 2080;
    __int16 v39 = "VCVideoPlayer_Create";
    __int16 v40 = 1024;
    int v41 = 1176;
    __int16 v42 = 2048;
    __int16 v43 = v6;
    __int16 v44 = 1024;
    *(_DWORD *)__int16 v45 = v27;
    *(_WORD *)&v45[4] = 2048;
    *(void *)&v45[6] = v28;
    *(_WORD *)&v45[14] = 2048;
    *(void *)&_OWORD v45[16] = v29;
    *(_WORD *)&v45[24] = 1024;
    *(_DWORD *)&v45[26] = v30;
    *(_WORD *)double v46 = 2048;
    *(void *)&_OWORD v46[2] = v31;
    LOWORD(v47) = 1024;
    *(_DWORD *)((char *)&v47 + 2) = v32;
    HIWORD(v47) = 1024;
    int v48 = v33;
    __int16 v49 = 1024;
    int v50 = v34;
    __int16 v51 = 1024;
    int v52 = v35;
    _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d Created VCVideoPlayer[%p] successfully with enableAVLooseSync=%d minPlaybackInterval=%f minRenderingDelay=%f useAudioHostTimeForAVSync=%d outputLatency=%f, enableQueueAlarmForDisplay=%d, enableImmediateDecode=%d, useInternalClockForPresentation=%d, enableJitterBuffer=%d", (uint8_t *)&v36, 0x68u);
    return 0;
  }
  return result;
}

uint64_t VCVideoPlaybackAlarmThread()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return -2147287038;
  }
  uint64_t v1 = v0;
  uint64_t v2 = (pthread_mutex_t *)(v0 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v0 + 16));
  convertTimeoutToRelativeTimespec(*(double *)(v1 + 624));
  v15.__darwin_time_t tv_sec = v3;
  v15.tv_nsec = v4;
  while (!*(_DWORD *)(v1 + 4))
  {
    uint64_t v6 = *(_DWORD **)(v1 + 368);
    if (v6)
    {
      double v14 = 0.0;
      if (!_VCVideoPlayer_CheckAndProcessAlarm(v1, v1 + 128, v6, &v14))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v7 = VRTraceErrorLogLevelToCSTR();
          uint64_t v8 = *MEMORY[0x1E4F47A50];
          long long v9 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136316162;
              *(void *)&uint8_t buf[4] = v7;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "VCVideoPlaybackAlarmThread";
              __int16 v17 = 1024;
              int v18 = 776;
              __int16 v19 = 2048;
              uint64_t v20 = v1;
              __int16 v21 = 2048;
              double v22 = v14;
              _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Not processing decode alarm, wait until next leeway=%f", buf, 0x30u);
            }
          }
          else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v7;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "VCVideoPlaybackAlarmThread";
            __int16 v17 = 1024;
            int v18 = 776;
            __int16 v19 = 2048;
            uint64_t v20 = v1;
            __int16 v21 = 2048;
            double v22 = v14;
            _os_log_debug_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Not processing decode alarm, wait until next leeway=%f", buf, 0x30u);
          }
        }
        memset(buf, 170, 16);
        convertTimeoutToRelativeTimespec(v14);
        *(void *)CMTime buf = v12;
        *(void *)&uint8_t buf[8] = v13;
        *(unsigned char *)uint64_t v1 = 1;
        pthread_cond_timedwait_relative_np((pthread_cond_t *)(v1 + 80), v2, (const timespec *)buf);
        *(unsigned char *)uint64_t v1 = 0;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 1;
      int v10 = pthread_cond_timedwait_relative_np((pthread_cond_t *)(v1 + 80), v2, &v15);
      *(unsigned char *)uint64_t v1 = 0;
      if (v10 == 60)
      {
        double v11 = micro();
        _VCVideoPlayer_CheckForNoVideoDisplayedTimeout(v1, (_DWORD *)(v1 + 128), v11);
      }
    }
  }
  pthread_mutex_unlock(v2);
  CheckOutHandleDebug();
  return 0;
}

void _VCVideoPlayer_FlushQueuedAlarms(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  double v4 = micro();
  uint64_t v5 = *(void **)(a2 + 240);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)v5[5];
      int v7 = *((_DWORD *)v5 + 6);
      uint64_t v8 = *v5;
      int v10 = (void (*)(uint64_t, double *, uint64_t, uint64_t))v5[1];
      uint64_t v9 = v5[2];
      uint64_t v11 = *((unsigned __int8 *)v5 + 30);
      double v20 = v4;
      int v21 = v7;
      int v22 = -1431655766;
      uint64_t v23 = v8;
      v10(v9, &v20, v11, 1);
      Release(*(void *)(a1 + 552), v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  *(void *)(a2 + 240) = 0;
  uint64_t v12 = *(void **)(a2 + 248);
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)v12[5];
      int v14 = *((_DWORD *)v12 + 6);
      uint64_t v15 = *v12;
      __int16 v17 = (void (*)(uint64_t, double *, uint64_t, uint64_t, void, uint64_t))v12[1];
      uint64_t v16 = v12[2];
      uint64_t v18 = *((unsigned __int8 *)v12 + 30);
      uint64_t v19 = *((unsigned __int16 *)v12 + 14);
      double v20 = v4;
      int v21 = v14;
      int v22 = -1431655766;
      uint64_t v23 = v15;
      v17(v16, &v20, v18, 1, 0, v19);
      Release(*(void *)(a1 + 552), v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  *(void *)(a2 + 24_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(_WORD *)(a2 + 300) = 0;
  *(_DWORD *)(a2 + 296) = 0;
}

uint64_t VCVideoPlayer_UpdateJitterBufferMode(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147680258;
  }
  uint64_t v4 = v3;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136316162;
      uint64_t v10 = v5;
      __int16 v11 = 2080;
      uint64_t v12 = "VCVideoPlayer_UpdateJitterBufferMode";
      __int16 v13 = 1024;
      int v14 = 1209;
      __int16 v15 = 2048;
      uint64_t v16 = v4;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Jitter buffer mode reconfigured to %d", (uint8_t *)&v9, 0x2Cu);
    }
  }
  *(_DWORD *)(v4 + 564) = a2;
  *(unsigned char *)(v4 + 80_Block_object_dispose(&STACK[0x250], 8) = a2 != 3;
  double v7 = 0.0166666667;
  if ((a2 & 0xFFFFFFFD) != 0) {
    double v7 = 0.0;
  }
  *(double *)(v4 + 800) = VCDefaults_GetDoubleValueForKey(@"videoPlayerAverageDecodeTime", v7);
  *(void *)(v4 + 384) = 0;
  *(void *)(v4 + 392) = 0;
  CheckOutHandleDebug();
  return 0;
}

uint64_t VCVideoPlayer_CollectVideoPlayerStatsForReporting(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 2147680257;
  if (a3)
  {
    uint64_t v6 = CheckInHandleDebug();
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = (pthread_mutex_t *)(v6 + 16);
      pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
      uint64_t v9 = *(void *)(v7 + 464);
      long long v10 = *(_OWORD *)(v7 + 448);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v7 + 432);
      *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x250], 8) = v10;
      *(void *)(a3 + 64) = v9;
      if (*(double *)(a3 + 32) == 2147483650.0) {
        *(void *)(a3 + 32) = 0;
      }
      if (*(double *)(a3 + 40) == -2147483650.0) {
        *(void *)(a3 + 40) = 0;
      }
      long long v11 = *(_OWORD *)(v7 + 472);
      long long v12 = *(_OWORD *)(v7 + 488);
      *(void *)(a3 + 104) = *(void *)(v7 + 504);
      *(_OWORD *)(a3 + 8_Block_object_dispose(&STACK[0x250], 8) = v12;
      *(_OWORD *)(a3 + 72) = v11;
      long long v13 = *(_OWORD *)(v7 + 512);
      long long v14 = *(_OWORD *)(v7 + 528);
      *(void *)(a3 + 144) = *(void *)(v7 + 544);
      *(_OWORD *)(a3 + 112) = v13;
      *(_OWORD *)(a3 + 12_Block_object_dispose(&STACK[0x250], 8) = v14;
      int v15 = *(_DWORD *)(v7 + 700) - *(_DWORD *)(v7 + 716);
      *(_DWORD *)(a3 + 152) = *(_DWORD *)(v7 + 692) - *(_DWORD *)(v7 + 712);
      *(_DWORD *)(a3 + 156) = v15;
      *(_WORD *)a3 = *(_WORD *)(v7 + 428);
      *(void *)&long long v14 = *(void *)(v7 + 272);
      *(void *)(a3 + 16) = *(void *)(v7 + 304);
      *(void *)(a3 + 24) = v14;
      double v16 = *(double *)(v7 + 728);
      if (v16 != 0.0)
      {
        double v17 = a1 - v16;
        if (v17 >= 2.0)
        {
          *(double *)(a3 + 160) = (double)*(int *)(v7 + 720);
          *(double *)(a3 + 16_Block_object_dispose(&STACK[0x250], 8) = v17;
        }
      }
      pthread_mutex_unlock(v8);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147680258;
    }
  }
  return v3;
}

uint64_t VCVideoPlayer_ResetVideoPlayerStatsForReporting(double a1)
{
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2147680258;
  }
  uint64_t v3 = v2;
  uint64_t v4 = (pthread_mutex_t *)(v2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 16));
  *(void *)(v3 + 472) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(void *)(v3 + 512) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_OWORD *)(v3 + 536) = 0u;
  *(_OWORD *)(v3 + 432) = xmmword_1E259E380;
  *(void *)(v3 + 44_Block_object_dispose(&STACK[0x250], 8) = 0;
  *(void *)(v3 + 456) = 0;
  *(_DWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 712) = *(_DWORD *)(v3 + 692);
  *(void *)(v3 + 716) = *(unsigned int *)(v3 + 700);
  *(double *)(v3 + 72_Block_object_dispose(&STACK[0x250], 8) = a1;
  pthread_mutex_unlock(v4);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VCVideoPlayer_GetVideoPlayerStatsForJB(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2147680257;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (pthread_mutex_t *)(v4 + 16);
      pthread_mutex_lock((pthread_mutex_t *)(v4 + 16));
      *(_WORD *)a2 = *(_WORD *)(v5 + 428);
      *(unsigned char *)(a2 + 4) = 1;
      *(_DWORD *)(v5 + 70_Block_object_dispose(&STACK[0x250], 8) = *(_DWORD *)(v5 + 704);
      uint64_t v7 = *(void *)(v5 + 272);
      *(void *)(a2 + 16) = *(void *)(v5 + 304);
      *(void *)(a2 + 24) = v7;
      pthread_mutex_unlock(v6);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147680258;
    }
  }
  return v2;
}

double VCVideoPlayer_GetPlaybackTimeOffset()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return -2147287040.0;
  }
  uint64_t v1 = v0;
  uint64_t v2 = (pthread_mutex_t *)(v0 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v0 + 16));
  double v3 = *(double *)(v1 + 184);
  pthread_mutex_unlock(v2);
  CheckOutHandleDebug();
  return v3;
}

uint64_t VCVideoPlayer_SetOutputLatency(double a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2147680258;
  }
  uint64_t v3 = v2;
  if (*(double *)(v2 + 816) != a1)
  {
    *(double *)(v2 + 816) = a1;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 136316162;
          uint64_t v9 = v4;
          __int16 v10 = 2080;
          long long v11 = "VCVideoPlayer_SetOutputLatency";
          __int16 v12 = 1024;
          int v13 = 1363;
          __int16 v14 = 2048;
          uint64_t v15 = v3;
          __int16 v16 = 2048;
          double v17 = a1;
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Updating outputLatency=%f", (uint8_t *)&v8, 0x30u);
        }
      }
      else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136316162;
        uint64_t v9 = v4;
        __int16 v10 = 2080;
        long long v11 = "VCVideoPlayer_SetOutputLatency";
        __int16 v12 = 1024;
        int v13 = 1363;
        __int16 v14 = 2048;
        uint64_t v15 = v3;
        __int16 v16 = 2048;
        double v17 = a1;
        _os_log_debug_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEBUG, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] Updating outputLatency=%f", (uint8_t *)&v8, 0x30u);
      }
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VCVideoPlayer_Destroy(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2147680258;
  if (*a1 != 0xFFFFFFFFLL)
  {
    uint64_t v3 = CheckInHandleDebug();
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (pthread_mutex_t *)(v3 + 16);
      pthread_mutex_lock((pthread_mutex_t *)(v3 + 16));
      _VCVideoPlayer_FlushQueuedAlarms(v4, v4 + 128);
      *(_DWORD *)(v4 + 4) = 1;
      pthread_cond_signal((pthread_cond_t *)(v4 + 80));
      pthread_mutex_unlock(v5);
      FigThreadJoin();
      CheckOutHandleDebug();
      DestroyAlloc(*(void *)(v4 + 552));
      pthread_mutex_destroy((pthread_mutex_t *)(v4 + 824));
      pthread_mutex_destroy(v5);
      pthread_cond_destroy((pthread_cond_t *)(v4 + 80));
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        uint64_t v7 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v10 = v6;
          __int16 v11 = 2080;
          __int16 v12 = "VCVideoPlayer_Destroy";
          __int16 v13 = 1024;
          int v14 = 1400;
          __int16 v15 = 2048;
          uint64_t v16 = v4;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCVideoPlayer [%s] %s:%d Destroying VCVideoPlayer[%p]", buf, 0x26u);
        }
      }
      free((void *)v4);
      uint64_t v2 = 0;
      *a1 = 0xFFFFFFFFLL;
    }
  }
  return v2;
}

uint64_t VCVideoPlayer_RegisterForNoVideoDisplayedTimeoutCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 2147680257;
  if (a2 && a3)
  {
    uint64_t v6 = CheckInHandleDebug();
    if (v6)
    {
      uint64_t v7 = v6;
      int v8 = (pthread_mutex_t *)(v6 + 824);
      pthread_mutex_lock((pthread_mutex_t *)(v6 + 824));
      *(void *)(v7 + 904) = a2;
      *(void *)(v7 + 896) = a3;
      pthread_mutex_unlock(v8);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2147680258;
    }
  }
  return v3;
}

uint64_t VCVideoPlayer_UnregisterForNoVideoDisplayedTimeoutCallbacks()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2147680258;
  }
  uint64_t v1 = (void *)v0;
  uint64_t v2 = (pthread_mutex_t *)(v0 + 824);
  pthread_mutex_lock((pthread_mutex_t *)(v0 + 824));
  v1[111] = 0;
  v1[113] = 0;
  v1[112] = 0;
  pthread_mutex_unlock(v2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VCVideoPlayer_SetLooseAVSyncEnabled(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147680258;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (pthread_mutex_t *)(v3 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 16));
  if (*(unsigned __int8 *)(v4 + 760) != a2)
  {
    *(unsigned char *)(v4 + 760) = a2;
    *(void *)(v4 + 384) = 0;
    *(void *)(v4 + 392) = 0;
  }
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t CStrToFourcc(char *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = a1[3];
  uint64_t v3 = (a1[1] << 16) | (*a1 << 24) | (a1[2] << 8) | v2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    char v4 = v2;
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v8 = FourccToCStr_ix++;
        uint64_t v9 = (char *)&FourccToCStr_str + 5 * (v8 % 0xA);
        *uint64_t v9 = BYTE3(v3);
        v9[1] = BYTE2(v3);
        size_t v9[2] = BYTE1(v3);
        v9[3] = v4;
        void v9[4] = 0;
        int v13 = 136316418;
        uint64_t v14 = v5;
        __int16 v15 = 2080;
        uint64_t v16 = "CStrToFourcc";
        __int16 v17 = 1024;
        int v18 = 154;
        __int16 v19 = 2080;
        double v20 = a1;
        __int16 v21 = 2080;
        int v22 = v9;
        __int16 v23 = 1024;
        int v24 = v3;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d CStrToFourcc: input %s, output %s(%X)", (uint8_t *)&v13, 0x36u);
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v11 = FourccToCStr_ix++;
      __int16 v12 = (char *)&FourccToCStr_str + 5 * (v11 % 0xA);
      *__int16 v12 = BYTE3(v3);
      v12[1] = BYTE2(v3);
      void v12[2] = BYTE1(v3);
      v12[3] = v4;
      v12[4] = 0;
      int v13 = 136316418;
      uint64_t v14 = v5;
      __int16 v15 = 2080;
      uint64_t v16 = "CStrToFourcc";
      __int16 v17 = 1024;
      int v18 = 154;
      __int16 v19 = 2080;
      double v20 = a1;
      __int16 v21 = 2080;
      int v22 = v12;
      __int16 v23 = 1024;
      int v24 = v3;
      _os_log_debug_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEBUG, " [%s] %s:%d CStrToFourcc: input %s, output %s(%X)", (uint8_t *)&v13, 0x36u);
    }
  }
  return v3;
}

char *FormatToCStr(uint64_t a1, char *__str, size_t __size)
{
  if (a1)
  {
    uint64_t v4 = *(double *)a1;
    int v5 = *(_DWORD *)(a1 + 8);
    if (v5)
    {
      unint64_t v6 = FourccToCStr_ix++;
      uint64_t v7 = (char *)&FourccToCStr_str + 5 * (v6 % 0xA);
      char *v7 = HIBYTE(v5);
      v7[1] = BYTE2(v5);
      void v7[2] = BYTE1(v5);
      v7[3] = v5;
      v7[4] = 0;
    }
    else
    {
      uint64_t v7 = "nope";
    }
    snprintf(__str, __size, "{ %u, %s, %x, %d, %d, %d, %d, %d }", v4, v7);
  }
  else
  {
    snprintf(__str, __size, "<NULL>");
  }
  return __str;
}

char *CreateAlloc(int a1, uint64_t a2)
{
  uint64_t v4 = (char *)malloc_type_malloc(0x60uLL, 0x1080040CF619488uLL);
  int v5 = v4;
  if (v4)
  {
    *(_DWORD *)uint64_t v4 = a1;
    *((void *)v4 + 1) = a2;
    *((void *)v4 + 3) = 0xA00000000;
    unint64_t v6 = malloc_type_malloc(0x50uLL, 0x10040436913F5uLL);
    *((void *)v5 + 2) = v6;
    if (v6)
    {
      pthread_mutex_init((pthread_mutex_t *)(v5 + 32), 0);
    }
    else
    {
      free(v5);
      return 0;
    }
  }
  return v5;
}

void DestroyAlloc(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  BOOL v3 = __OFSUB__(v2, 1);
  int v4 = v2 - 1;
  *(_DWORD *)(a1 + 24) = v4;
  if (v4 < 0 == v3)
  {
    do
    {
      free(*(void **)(*(void *)(a1 + 16) + 8 * v4));
      int v5 = *(_DWORD *)(a1 + 24);
      int v4 = v5 - 1;
      *(_DWORD *)(a1 + 24) = v5 - 1;
    }
    while (v5 > 0);
  }
  free(*(void **)(a1 + 16));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));

  free((void *)a1);
}

void *Alloc(int *a1)
{
  int v2 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  int v3 = a1[6];
  if (v3)
  {
    uint64_t v4 = *((void *)a1 + 2);
    int v5 = v3 - 1;
    a1[6] = v5;
    unint64_t v6 = *(void **)(v4 + 8 * v5);
    pthread_mutex_unlock(v2);
    if (v6) {
      return v6;
    }
  }
  else
  {
    pthread_mutex_unlock(v2);
  }
  uint64_t v7 = malloc_type_malloc(*a1, 0xD6EBE52uLL);
  unint64_t v6 = v7;
  if (v7)
  {
    unint64_t v8 = (void (*)(void *))*((void *)a1 + 1);
    if (v8) {
      v8(v7);
    }
    else {
      bzero(v7, *a1);
    }
  }
  return v6;
}

void Release(uint64_t a1, void *a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 != *(_DWORD *)(a1 + 28))
  {
    uint64_t v7 = *(void **)(a1 + 16);
    goto LABEL_5;
  }
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x250], 8) = 2 * v5;
  unint64_t v6 = malloc_type_malloc(16 * v5, 0x10040436913F5uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    memcpy(v6, *(const void **)(a1 + 16), 8 * *(int *)(a1 + 24));
    free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = v7;
    int v5 = *(_DWORD *)(a1 + 24);
LABEL_5:
    *(_DWORD *)(a1 + 24) = v5 + 1;
    v7[v5] = a2;
    pthread_mutex_unlock(v4);
    return;
  }
  pthread_mutex_unlock(v4);

  free(a2);
}

uint64_t SummerCreateHandle(uint64_t *a1, int a2)
{
  uint64_t v4 = malloc_type_malloc(0x28uLL, 0x1080040B7564605uLL);
  if (v4)
  {
    int v5 = v4;
    *uint64_t v4 = malloc_type_calloc(1uLL, 8 * a2, 0x100004000313F17uLL);
    unint64_t v6 = malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
    v5[2] = 0;
    v5[3] = 0;
    v5[1] = v6;
    *((_DWORD *)v5 + _Block_object_dispose(&STACK[0x250], 8) = a2;
    uint64_t Handle = CreateHandle();
    *a1 = Handle;
    if (Handle == 0xFFFFFFFFLL)
    {
      uint64_t v8 = 2148728837;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          SummerCreateHandle_cold_2();
          return 2148728837;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = 2148728835;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SummerCreateHandle_cold_1(v9, v10);
      }
    }
  }
  return v8;
}

uint64_t SummerReset()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2148728834;
  }
  int v1 = *(_DWORD *)(v0 + 28);
  if (v1)
  {
    int v2 = *(_DWORD *)(v0 + 24);
    int v3 = *(_DWORD *)(v0 + 32);
    uint64_t v4 = *(void *)v0;
    uint64_t v5 = *(void *)(v0 + 8);
    do
    {
      int v2 = (v3 - 1 + v2) % v3;
      *(void *)(v4 + 8 * v2) = 0;
      *(void *)(v5 + 8 * v2) = 0;
      --v1;
    }
    while (v1);
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = 0;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t SummerCloseHandle()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2148728834;
  }
  int v1 = (void **)v0;
  CheckOutHandleDebug();
  free(v1[1]);
  free(*v1);
  free(v1);
  return 0;
}

uint64_t SummerAdd(double a1, double a2)
{
  uint64_t v4 = CheckInHandleDebug();
  if (!v4) {
    return 2148728834;
  }
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  int v7 = *(_DWORD *)(v4 + 28);
  uint64_t v8 = *(int *)(v4 + 24);
  *(double *)(v4 + 16) = *(double *)(v4 + 16) + a1 - *(double *)(*(void *)v4 + 8 * v8);
  *(double *)(v5 + 8 * v_Block_object_dispose(&STACK[0x250], 8) = a1;
  *(double *)(v6 + 8 * v_Block_object_dispose(&STACK[0x250], 8) = a2;
  LODWORD(v6) = *(_DWORD *)(v4 + 32);
  *(_DWORD *)(v4 + 24) = ((int)v8 + 1) % (int)v6;
  if (v7 < (int)v6) {
    *(_DWORD *)(v4 + 2_Block_object_dispose(&STACK[0x250], 8) = v7 + 1;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t SummerLengthPred(double a1, uint64_t a2, uint64_t (*a3)(double, double, double), double *a4, int *a5)
{
  uint64_t v5 = 2148728833;
  if (a3 && a4 && a5)
  {
    uint64_t v10 = CheckInHandleDebug();
    if (v10)
    {
      uint64_t v11 = v10;
      int v12 = *(_DWORD *)(v10 + 28);
      if (v12)
      {
        *a5 = 0;
        int v13 = (*(_DWORD *)(v10 + 24) + *(_DWORD *)(v10 + 32) - 1) % *(_DWORD *)(v10 + 32);
        double v14 = *(double *)(*(void *)(v10 + 8) + 8 * v13);
        while (1)
        {
          int v15 = a3(a1, *(double *)(*(void *)v11 + 8 * v13), *(double *)(*(void *)(v11 + 8) + 8 * v13));
          int v16 = *a5;
          if (!v15) {
            break;
          }
          *a5 = ++v16;
          int v17 = *(_DWORD *)(v11 + 32);
          int v13 = (v13 + v17 - 1) % v17;
          if (!--v12) {
            goto LABEL_13;
          }
        }
        int v17 = *(_DWORD *)(v11 + 32);
LABEL_13:
        double v18 = *(double *)(*(void *)(v11 + 8) + 8 * ((v13 + 1) % v17));
        double v19 = v14 - v18;
        BOOL v20 = v14 > v18;
        double v21 = 1.0;
        if (v20) {
          double v21 = v19;
        }
        *a4 = v21;
        uint64_t v5 = 0;
        BOOL v22 = __OFSUB__(v16, 1);
        int v23 = v16 - 1;
        if (v23 < 0 == v22) {
          *a5 = v23;
        }
      }
      else
      {
        uint64_t v5 = 2148728849;
      }
      CheckOutHandleDebug();
    }
    else
    {
      return 2148728834;
    }
  }
  return v5;
}

uint64_t SummerSumPred(double a1, double a2, uint64_t a3, unsigned int (*a4)(double, double, double), double (*a5)(double, double, double), double *a6, double *a7)
{
  uint64_t v7 = 2148728833;
  if (a4 && a5 && a6 && a7)
  {
    uint64_t v14 = CheckInHandleDebug();
    if (v14)
    {
      uint64_t v15 = v14;
      *a7 = 0.0;
      int v16 = *(_DWORD *)(v14 + 28);
      if (v16)
      {
        int v17 = (*(_DWORD *)(v14 + 24) + *(_DWORD *)(v14 + 32) - 1) % *(_DWORD *)(v14 + 32);
        double v18 = *(double *)(*(void *)(v14 + 8) + 8 * v17);
        while (a4(a1, *(double *)(*(void *)v15 + 8 * v17), *(double *)(*(void *)(v15 + 8) + 8 * v17)))
        {
          --v16;
          *a7 = a5(a2, *(double *)(*(void *)v15 + 8 * v17), *(double *)(*(void *)(v15 + 8) + 8 * v17)) + *a7;
          int v19 = *(_DWORD *)(v15 + 32);
          int v17 = (v17 + v19 - 1) % v19;
          if (!v16) {
            goto LABEL_14;
          }
        }
        int v19 = *(_DWORD *)(v15 + 32);
LABEL_14:
        int v20 = (v17 + 1) % v19;
        uint64_t v21 = *(void *)(v15 + 8);
        double v22 = *(double *)(v21 + 8 * v20);
        double v23 = v18 - v22;
        BOOL v24 = v18 > v22;
        double v25 = 1.0;
        if (v24) {
          double v25 = v23;
        }
        *a6 = v25;
        uint64_t v7 = 0;
        if (*a7 > 0.0) {
          *a7 = *a7 - a5(a2, *(double *)(*(void *)v15 + 8 * v20), *(double *)(v21 + 8 * v20));
        }
      }
      else
      {
        uint64_t v7 = 2148728849;
      }
      CheckOutHandleDebug();
    }
    else
    {
      return 2148728834;
    }
  }
  return v7;
}

double SummerIdentity(double a1, double a2)
{
  return a2;
}

BOOL SummerGreaterThan(double a1, double a2, double a3)
{
  return a3 > a1;
}

uint64_t HasAltivec()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t result = HasAltivec_result;
  if (HasAltivec_result == -1)
  {
    unsigned int v2 = 0;
    size_t v1 = 4;
    if (sysctlbyname("hw.optional.altivec", &v2, &v1, 0, 0)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = v2;
    }
    HasAltivec_uint64_t result = result;
  }
  return result;
}

uint64_t HasMMX()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t result = HasMMX_result;
  if (HasMMX_result == -1)
  {
    unsigned int v2 = 0;
    size_t v1 = 4;
    if (sysctlbyname("hw.optional.mmx", &v2, &v1, 0, 0)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = v2;
    }
    HasMMX_uint64_t result = result;
  }
  return result;
}

uint64_t HasSSE()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t result = HasSSE_result;
  if (HasSSE_result == -1)
  {
    unsigned int v2 = 0;
    size_t v1 = 4;
    if (sysctlbyname("hw.optional.sse", &v2, &v1, 0, 0)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = v2;
    }
    HasSSE_uint64_t result = result;
  }
  return result;
}

uint64_t HasSSE2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t result = HasSSE2_result;
  if (HasSSE2_result == -1)
  {
    unsigned int v2 = 0;
    size_t v1 = 4;
    if (sysctlbyname("hw.optional.sse2", &v2, &v1, 0, 0)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = v2;
    }
    HasSSE2_uint64_t result = result;
  }
  return result;
}

uint64_t HasSSE3()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t result = HasSSE3_result;
  if (HasSSE3_result == -1)
  {
    unsigned int v2 = 0;
    size_t v1 = 4;
    if (sysctlbyname("hw.optional.sse3", &v2, &v1, 0, 0)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = v2;
    }
    HasSSE3_uint64_t result = result;
  }
  return result;
}

uint64_t HasMulticore()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t result = HasMulticore_result;
  if (HasMulticore_result == -1)
  {
    int v4 = 0;
    size_t v3 = 4;
    if (!sysctlbyname("hw.activecpu", &v4, &v3, 0, 0))
    {
      uint64_t result = v4 > 1;
      goto LABEL_8;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v1 = VRTraceErrorLogLevelToCSTR();
      unsigned int v2 = *MEMORY[0x1E4F47A50];
      uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result)
      {
LABEL_8:
        HasMulticore_uint64_t result = result;
        return result;
      }
      HasMulticore_cold_1(v1, v2);
    }
    uint64_t result = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t GetVectorTypeAvailable()
{
  uint64_t result = GetVectorTypeAvailable_result;
  if (GetVectorTypeAvailable_result == -1)
  {
    if (HasAltivec())
    {
      uint64_t result = 1;
    }
    else if (HasSSE3())
    {
      uint64_t result = 5;
    }
    else if (HasSSE2())
    {
      uint64_t result = 4;
    }
    else if (HasSSE())
    {
      uint64_t result = 3;
    }
    else
    {
      uint64_t result = 2 * (HasMMX() != 0);
    }
    GetVectorTypeAvailable_uint64_t result = result;
  }
  return result;
}

uint64_t ProcessorSpeedMHz()
{
  return 0;
}

uint64_t CPUCountPhysical()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t result = CPUCountPhysical_result;
  if (CPUCountPhysical_result == -1)
  {
    unsigned int v2 = 0;
    size_t v1 = 4;
    if (sysctlbyname("hw.physicalcpu", &v2, &v1, 0, 0)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = v2;
    }
    CPUCountPhysical_uint64_t result = result;
  }
  return result;
}

uint64_t VCCPUCount()
{
  uint64_t result = VCCPUCount_result;
  if (VCCPUCount_result == -1)
  {
    uint64_t result = CPUCountPhysical();
    VCCPUCount_uint64_t result = result;
  }
  return result;
}

uint64_t MachineType()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = MachineType_machine_type;
  if (!MachineType_machine_type)
  {
    size_t size = 0xAAAAAAAAAAAAAAAALL;
    *(void *)uint64_t v10 = 0x200000006;
    sysctl(v10, 2u, 0, &size, 0, 0);
    size_t v1 = (unsigned __int8 *)malloc_type_malloc(size, 0x1109974BuLL);
    sysctl(v10, 2u, v1, &size, 0, 0);
    for (uint64_t i = 0; i != 123; i += 3)
    {
      if (!strcasecmp((const char *)v1, MachineType_models[i]))
      {
        uint64_t v0 = LODWORD(MachineType_models[i + 2]);
        goto LABEL_28;
      }
    }
    signed __int8 v3 = *v1;
    if (*v1)
    {
      int v4 = v1 + 1;
      do
      {
        *(v4 - 1) = __tolower(v3);
        int v5 = *v4++;
        signed __int8 v3 = v5;
      }
      while (v5);
    }
    if (strstr((char *)v1, "powerbook1,")) {
      goto LABEL_9;
    }
    if (strstr((char *)v1, "powerbook2,")) {
      goto LABEL_12;
    }
    if (!strstr((char *)v1, "powerbook3,"))
    {
      if (strstr((char *)v1, "powerbook4,"))
      {
LABEL_12:
        int v6 = 132;
        goto LABEL_13;
      }
      if (!strstr((char *)v1, "powerbook5,") && !strstr((char *)v1, "powerbook6,"))
      {
        if (strstr((char *)v1, "powermac7,"))
        {
          uint64_t v0 = 288;
        }
        else if (strstr((char *)v1, "powermac8,"))
        {
          uint64_t v0 = 784;
        }
        else
        {
          if (!strstr((char *)v1, "powermac12,"))
          {
            if (strstr((char *)v1, "book")) {
              int v6 = 4;
            }
            else {
              int v6 = 32;
            }
LABEL_13:
            if (HasSSE3())
            {
              uint64_t v0 = v6 | 0x400u;
            }
            else
            {
              int v7 = VCCPUCount_result;
              if (VCCPUCount_result == -1)
              {
                int v7 = CPUCountPhysical();
                VCCPUCount_uint64_t result = v7;
              }
              if (v7 < 3)
              {
                if (HasAltivec()) {
                  uint64_t v0 = v6 | 2u;
                }
                else {
                  uint64_t v0 = v6 | 1u;
                }
              }
              else
              {
                uint64_t v0 = v6 | 0x100u;
              }
            }
            goto LABEL_28;
          }
          uint64_t v0 = 2320;
        }
LABEL_28:
        free(v1);
        MachineType_machine_type = v0;
        return v0;
      }
    }
LABEL_9:
    int v6 = 68;
    goto LABEL_13;
  }
  return v0;
}

BOOL hasG5()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if ((MachineType() & 0x100) != 0) {
    return 1;
  }
  *(void *)&long long v0 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v0 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v6 = v0;
  long long v7 = v0;
  *(_OWORD *)host_info_out = v0;
  mach_msg_type_number_t host_info_outCnt = 12;
  host_t v1 = MEMORY[0x1E4E582E0]();
  host_info(v1, 1, host_info_out, &host_info_outCnt);
  return host_info_out[3] == 18 && v6 == 100;
}

uint64_t ReadFirstMBAndSliceType(uint64_t a1, unsigned int a2, _WORD *a3, _WORD *a4, uint64_t a5)
{
  uint64_t result = 0;
  videoDesc[1] = *(CMVideoFormatDescriptionRef *)MEMORY[0x1E4F143B8];
  if (a2 >= 4 && a1 && a3 && a4 && a5)
  {
    if (*(_DWORD *)a1 == -1547639150)
    {
      uint64_t v9 = (const uint8_t *)(a1 + 4);
      videoDesc[0] = (CMVideoFormatDescriptionRef)0xAAAAAAAAAAAAAAAALL;
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      size_t v11 = (int)(a2 - 4);
      CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
      if (CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(v10, v9, v11, SystemEncoding, 0, videoDesc)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = videoDesc[0] == 0;
      }
      if (!v13)
      {
        CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(videoDesc[0]);
        *a3 = Dimensions.width;
        *a4 = Dimensions.height;
        FigFormatDescriptionRelease();
        return 2;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        ReadFirstMBAndSliceType_cold_1();
      }
      return 0;
    }
    unsigned int v14 = bswap32(*(_DWORD *)a1);
    int v15 = HIBYTE(v14) & 0x1F;
    if (v15 == 7) {
      return 3;
    }
    if (v15 == 8) {
      return 4;
    }
    if ((v14 & 0x1E000000) == 0x1C000000) {
      return 6;
    }
    if ((v14 & 0x9B000000) != 0x1000000) {
      return 0;
    }
    if (a2 <= 0xB)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        ReadFirstMBAndSliceType_cold_2();
      }
      return 0;
    }
    unsigned int v17 = bswap32(*(_DWORD *)(a1 + 4));
    unsigned int v18 = __PAIR64__(v14, v17) >> 24;
    if (v18 < 0x80000) {
      return 0;
    }
    uint64_t result = 0;
    unsigned int v19 = __clz(v18);
    unsigned int v20 = *(unsigned __int8 *)(a1 + 8) | (v17 << 8);
    if (v19) {
      __int16 v21 = v18 << (v19 + 1) >> -(char)v19;
    }
    else {
      __int16 v21 = 0;
    }
    *a3 = v21 + ~(-1 << v19);
    unsigned int v22 = (v20 >> -((2 * v19) | 1)) | (v18 << ((2 * v19) | 1));
    if (v22 >= 0x80000)
    {
      unsigned int v23 = __clz(v22);
      unsigned int v24 = v22 << (v23 + 1) >> -(char)v23;
      if (!v23) {
        LOWORD(v24) = 0;
      }
      *a4 = v24 + ~(-1 << v23);
      return 1;
    }
  }
  return result;
}

uint64_t hwrandom()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  unsigned int bytes = -1431655766;
  if (!SecRandomCopyBytes((SecRandomRef)*MEMORY[0x1E4F3BC60], 4uLL, &bytes)) {
    return bytes;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      hwrandom_cold_1();
    }
  }
  return arc4random();
}

uint64_t hwrandom16()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  __int16 bytes = -21846;
  if (SecRandomCopyBytes((SecRandomRef)*MEMORY[0x1E4F3BC60], 2uLL, &bytes))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        hwrandom16_cold_1();
      }
    }
    LOWORD(result) = arc4random();
  }
  else
  {
    LOWORD(result) = bytes;
  }
  return (unsigned __int16)result;
}

uint64_t ReadFrameSliceHeader(int32_t a1, uint64_t a2, int a3, CFDictionaryRef *a4)
{
  uint64_t v4 = 0;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (!a2 || a3 < 4) {
    return v4;
  }
  if (*(_DWORD *)a2 == -1547639150)
  {
    if (!a4) {
      return 2;
    }
    CMVideoFormatDescriptionRef formatDescriptionOut = (CMVideoFormatDescriptionRef)0xAAAAAAAAAAAAAAAALL;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    size_t v9 = a3 - 4;
    CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
    if (CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(v8, (const uint8_t *)(a2 + 4), v9, SystemEncoding, 0, &formatDescriptionOut))
    {
      BOOL v11 = 1;
    }
    else
    {
      BOOL v11 = formatDescriptionOut == 0;
    }
    if (!v11)
    {
      CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(formatDescriptionOut);
      int32_t height = Dimensions.height;
      int32_t valuePtr = Dimensions.width;
      FigFormatDescriptionRelease();
      *(_OWORD *)keys = xmmword_1E6DB5E48;
      values = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFNumberRef v65 = CFNumberCreate(0, kCFNumberIntType, &height);
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (ErrorLogLevelForModule > 6)
      {
        uint64_t v17 = VRTraceErrorLogLevelToCSTR();
        unsigned int v18 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v55 = v17;
          __int16 v56 = 2080;
          int v57 = "ReadFrameSliceHeader";
          __int16 v58 = 1024;
          int v59 = 1140;
          __int16 v60 = 1024;
          int32_t v61 = valuePtr;
          __int16 v62 = 1024;
          int32_t v63 = height;
          _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %dx%d", buf, 0x28u);
        }
      }
      CFDictionaryRef v19 = CFDictionaryCreate(v8, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v20 = 0;
      *a4 = v19;
      char v21 = 1;
      do
      {
        char v22 = v21;
        unsigned int v23 = *(&values + v20);
        if (v23) {
          CFRelease(v23);
        }
        char v21 = 0;
        uint64_t v20 = 1;
      }
      while ((v22 & 1) != 0);
      return 2;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ReadFrameSliceHeader_cold_1();
      }
    }
    return 0;
  }
  char v13 = a1 - 100;
  if ((a1 - 100) > 0x1A) {
    goto LABEL_35;
  }
  if (((1 << v13) & 0x3000400) != 0) {
    return 0;
  }
  if (((1 << v13) & 0x4800000) != 0)
  {
    unsigned __int16 v50 = -21846;
    __int16 v49 = -21846;
    __int16 v48 = -21846;
    uint64_t v14 = ReadFirstMBAndSliceType(a2, a3, &v50, &v49, (uint64_t)&v48);
    uint64_t v4 = v14;
    if (a4)
    {
      if (v14 == 1)
      {
        LODWORD(formatDescriptionOut) = v50;
        if (v49 == 7 || v49 == 2) {
          int v29 = 2;
        }
        else {
          int v29 = 0;
        }
        int32_t valuePtr = v29;
        *(_OWORD *)keys = xmmword_1E6DB5E58;
        values = CFNumberCreate(0, kCFNumberIntType, &formatDescriptionOut);
        CFNumberRef v65 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v30 = VRTraceErrorLogLevelToCSTR();
          uint64_t v31 = *MEMORY[0x1E4F47A50];
          int v32 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v55 = v30;
              __int16 v56 = 2080;
              int v57 = "ReadFrameSliceHeader";
              __int16 v58 = 1024;
              int v59 = 1219;
              __int16 v60 = 1024;
              int32_t v61 = (int)formatDescriptionOut;
              __int16 v62 = 1024;
              int32_t v63 = valuePtr;
              _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d FirstMB=%d sliceType=%d", buf, 0x28u);
            }
          }
          else if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v55 = v30;
            __int16 v56 = 2080;
            int v57 = "ReadFrameSliceHeader";
            __int16 v58 = 1024;
            int v59 = 1219;
            __int16 v60 = 1024;
            int32_t v61 = (int)formatDescriptionOut;
            __int16 v62 = 1024;
            int32_t v63 = valuePtr;
            _os_log_debug_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEBUG, " [%s] %s:%d FirstMB=%d sliceType=%d", buf, 0x28u);
          }
        }
        CFDictionaryRef v40 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v41 = 0;
        *a4 = v40;
        char v42 = 1;
        do
        {
          char v43 = v42;
          __int16 v44 = *(&values + v41);
          if (v44) {
            CFRelease(v44);
          }
          char v42 = 0;
          uint64_t v41 = 1;
        }
        while ((v43 & 1) != 0);
      }
      else if (v14 == 3 {
             && (LODWORD(formatDescriptionOut) = -1431655766,
      }
                 int32_t height = -1431655766,
                 int32_t valuePtr = -1431655766,
                 memset(v47, 170, sizeof(v47)),
                 !readSPSAndGetDecoderParams((unsigned int *)a2, a3, &formatDescriptionOut, &valuePtr, &height, &v47[4], &v47[3], &v47[2], &v47[1], v47)))
      {
        int v45 = 16 * valuePtr;
        int v46 = 16 * formatDescriptionOut;
        *(_OWORD *)keys = xmmword_1E6DB5E48;
        values = CFNumberCreate(0, kCFNumberIntType, &v46);
        CFNumberRef v65 = CFNumberCreate(0, kCFNumberIntType, &v45);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v33 = VRTraceErrorLogLevelToCSTR();
          int v34 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v55 = v33;
            __int16 v56 = 2080;
            int v57 = "ReadFrameSliceHeader";
            __int16 v58 = 1024;
            int v59 = 1198;
            __int16 v60 = 1024;
            int32_t v61 = v46;
            __int16 v62 = 1024;
            int32_t v63 = v45;
            _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %dx%d", buf, 0x28u);
          }
        }
        CFDictionaryRef v35 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v36 = 0;
        *a4 = v35;
        char v37 = 1;
        do
        {
          char v38 = v37;
          __int16 v39 = *(&values + v36);
          if (v39) {
            CFRelease(v39);
          }
          char v37 = 0;
          uint64_t v36 = 1;
        }
        while ((v38 & 1) != 0);
      }
      else
      {
        *a4 = 0;
      }
    }
    return v4;
  }
  if (a1 != 100)
  {
LABEL_35:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v25 = VRTraceErrorLogLevelToCSTR();
      BOOL v26 = *MEMORY[0x1E4F47A50];
      uint64_t v4 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return v4;
      }
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v55 = v25;
      __int16 v56 = 2080;
      int v57 = "ReadFrameSliceHeader";
      __int16 v58 = 1024;
      int v59 = 1245;
      __int16 v60 = 1024;
      int32_t v61 = a1;
      _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ReadFrameSliceHeader: UNEXPECTED payload %d", buf, 0x22u);
    }
    return 0;
  }
  uint64_t v24 = VCPReadHEVCSliceHeader();
  uint64_t v4 = v24;
  if ((v24 - 4) > 0xFFFFFFFD) {
    return v4;
  }
  if (a3 < 1) {
    return 0;
  }
  if ((*(unsigned char *)a2 & 0x7E) == 0x62) {
    return 6;
  }
  else {
    return v24;
  }
}

uint64_t RetrieveResolutionFromFrameInfoDict(CFDictionaryRef theDict, _WORD *a2, _WORD *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t result = 0xFFFFFFFFLL;
  if (theDict && a2 && a3)
  {
    int valuePtr = -1431655766;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Width");
    if (Value
      && (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr),
          *a2 = valuePtr,
          (CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Height")) != 0))
    {
      CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
      uint64_t result = 0;
      *a3 = valuePtr;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t RetrieveMBSliceTypeFromFrameInfoDict(CFDictionaryRef theDict, _WORD *a2, _WORD *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t result = 0xFFFFFFFFLL;
  if (theDict && a2 && a3)
  {
    unsigned int valuePtr = -1431655766;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"FirstMB");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      *a2 = valuePtr;
    }
    CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SliceType");
    if (v8)
    {
      CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
      __int16 v9 = valuePtr;
      if (valuePtr >= 3 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          RetrieveMBSliceTypeFromFrameInfoDict_cold_1();
        }
      }
      *a3 = v9;
    }
    return 0;
  }
  return result;
}

uint64_t ReadCodecConfigParams(int a1, uint64_t a2, unint64_t a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7, int *a8)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  switch(a1)
  {
    case 'd':
      goto LABEL_4;
    case '~':
      int v28 = 15;
      LODWORD(cf) = 20;
      int v26 = 1;
      int v27 = 1;
      int v25 = 0;
      uint64_t DecoderParams = readAVCCAndGetDecoderParams(a2, a3, &cf, &v28, &v27, &v26, a6, a7, a8, &v25);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v17 = VRTraceErrorLogLevelToCSTR();
        unsigned int v18 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *a6;
          int v20 = *a7;
          int v21 = *a8;
          *(_DWORD *)CMTime buf = 136317954;
          uint64_t v31 = v17;
          __int16 v32 = 2080;
          uint64_t v33 = "ReadCodecConfigParams";
          __int16 v34 = 1024;
          int v35 = 1338;
          __int16 v36 = 1024;
          int v37 = DecoderParams;
          __int16 v38 = 1024;
          int v39 = (int)cf;
          __int16 v40 = 1024;
          int v41 = v28;
          __int16 v42 = 1024;
          int v43 = v27;
          __int16 v44 = 1024;
          int v45 = v26;
          __int16 v46 = 1024;
          int v47 = v19;
          __int16 v48 = 1024;
          int v49 = v20;
          __int16 v50 = 1024;
          int v51 = v21;
          __int16 v52 = 1024;
          int v53 = v25;
          _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Parsing SPS for H.264: %d, %u, %u, %u, %u, %u, %u, %u, %u", buf, 0x52u);
        }
      }
      *a4 = 16 * cf;
      *a5 = 16 * v28;
      break;
    case '{':
LABEL_4:
      CFTypeRef cf = 0;
      VCPReadCodecConfigParams();
      LOWORD(v2_Block_object_dispose(&STACK[0x250], 8) = 0;
      LOWORD(v27) = 0;
      uint64_t DecoderParams = RetrieveResolutionFromFrameInfoDict(0, &v28, &v27);
      if (!DecoderParams)
      {
        *a4 = (unsigned __int16)v28;
        *a5 = (unsigned __int16)v27;
      }
      if (cf) {
        CFRelease(cf);
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        char v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v31 = v12;
          __int16 v32 = 2080;
          uint64_t v33 = "ReadCodecConfigParams";
          __int16 v34 = 1024;
          int v35 = 1320;
          __int16 v36 = 1024;
          int v37 = DecoderParams;
          __int16 v38 = 1024;
          int v39 = (unsigned __int16)v28;
          __int16 v40 = 1024;
          int v41 = (unsigned __int16)v27;
          _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Parsing SPS: %d, %u, %u", buf, 0x2Eu);
        }
      }
      return DecoderParams;
    default:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v22 = VRTraceErrorLogLevelToCSTR();
        unsigned int v23 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v31 = v22;
          __int16 v32 = 2080;
          uint64_t v33 = "ReadCodecConfigParams";
          __int16 v34 = 1024;
          int v35 = 1346;
          __int16 v36 = 1024;
          int v37 = a1;
          _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ReadCodecConfigParams: UNEXPECTED payload %d", buf, 0x22u);
        }
      }
      return 4294954396;
  }
  return DecoderParams;
}

double __nanosecondsToAbsoluteTime_block_invoke()
{
  v3[1] = *(mach_timebase_info *)MEMORY[0x1E4F143B8];
  v3[0] = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(v3);
  LODWORD(v0) = v3[0].denom;
  LODWORD(v1) = v3[0].numer;
  double result = (double)v0 / (double)v1;
  nanosecondsToAbsoluteTime_conversionRatio = *(void *)&result;
  return result;
}

uint64_t setRealTimeConstraints(double a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = pthread_self();
  thread_act_t v3 = pthread_mach_thread_np(v2);
  if (nanosecondsToAbsoluteTime_onceToken != -1) {
    dispatch_once(&nanosecondsToAbsoluteTime_onceToken, &__block_literal_global_22);
  }
  policy_info[0] = (unint64_t)(*(double *)&nanosecondsToAbsoluteTime_conversionRatio
                                    * (double)(unint64_t)(a1 * 1000000000.0));
  policy_info[1] = (unint64_t)(*(double *)&nanosecondsToAbsoluteTime_conversionRatio * 500000.0);
  policy_info[2] = policy_info[0];
  policy_info[3] = 1;
  return thread_policy_set(v3, 2u, policy_info, 4u);
}

uint64_t Util_BinaryGCD(int a1, int a2)
{
  uint64_t v2 = a2 | a1;
  if (a1 && a2)
  {
    if ((a2 | a1))
    {
      char v3 = 0;
    }
    else
    {
      char v3 = 0;
      int v4 = a1;
      do
      {
        a1 = v4 >> 1;
        a2 >>= 1;
        ++v3;
        int v5 = a2 | (v4 >> 1);
        v4 >>= 1;
      }
      while ((v5 & 1) == 0);
    }
    do
    {
      int v6 = a1;
      a1 >>= 1;
    }
    while ((v6 & 1) == 0);
    do
    {
      do
      {
        int v7 = a2;
        a2 >>= 1;
      }
      while ((v7 & 1) == 0);
      unsigned int v9 = v6 - v7;
      BOOL v8 = v6 - v7 < 0;
      if (v6 >= v7) {
        int v6 = v7;
      }
      if (v8) {
        unsigned int v10 = -v9;
      }
      else {
        unsigned int v10 = v9;
      }
      a2 = v10 >> 1;
    }
    while (v10 > 1);
    return (v6 << v3);
  }
  return v2;
}

void SimplifyRatio(int *a1, int *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  int v5 = Util_BinaryGCD(*a1, *a2);
  if (v5)
  {
    *a1 = v4 / v5;
    int v6 = *a2 / v5;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      BOOL v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *a1;
        int v10 = *a2;
        int v11 = 136316162;
        uint64_t v12 = v7;
        __int16 v13 = 2080;
        uint64_t v14 = "SimplifyRatio";
        __int16 v15 = 1024;
        int v16 = 1425;
        __int16 v17 = 1024;
        int v18 = v9;
        __int16 v19 = 1024;
        int v20 = v10;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Resetting the ratio from %d:%d to 3:4", (uint8_t *)&v11, 0x28u);
      }
    }
    *a1 = 3;
    int v6 = 4;
  }
  *a2 = v6;
}

double SimplifyFixedPointRatio(double *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = (int)*a1;
    int v5 = (int)a1[1];
    int v6 = v2;
    SimplifyRatio(&v6, &v5);
    double result = (double)v6;
    double v4 = (double)v5;
    *a1 = (double)v6;
    a1[1] = v4;
  }
  return result;
}

float *VCUtil_ExponentialMovingAverage(float *result, float a2, float a3)
{
  float v3 = (float)((float)(2.0 / (float)(a3 + 1.0)) * a2) + *result * (1.0 - (float)(2.0 / (float)(a3 + 1.0)));
  char *result = v3;
  return result;
}

size_t VCUtil_ConvertStreamIDArrayToString(size_t result, unsigned int a2, char *a3, size_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)__source = 0u;
  long long v12 = 0u;
  if (a2)
  {
    size_t v6 = result;
    uint64_t v7 = 0;
    uint64_t v8 = 2 * a2;
    size_t v9 = a4;
    while (1)
    {
      __sprintf_chk(__source, 0, 0x60uLL, " %u,", *(unsigned __int16 *)(v6 + v7));
      if (v7) {
        strlcat(a3, __source, v9);
      }
      else {
        strncpy(a3, __source, v9);
      }
      double result = strlen(__source);
      BOOL v10 = v9 > result;
      v9 -= result;
      if (!v10) {
        break;
      }
      v7 += 2;
      if (v8 == v7) {
        return result;
      }
    }
    a3[a4 - 1] = 0;
  }
  return result;
}

void VCUtil_AppendFromDictionary(__CFDictionary *a1, CFDictionaryRef theDict)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFIndex Count = CFDictionaryGetCount(theDict);
  size_t v5 = 8 * Count;
  unint64_t v6 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = (const void **)((char *)values - v6);
  if (MEMORY[0x1F4188790](Count))
  {
    uint64_t v8 = memset((char *)values - v6, 170, v5);
    MEMORY[0x1F4188790](v8);
    size_t v9 = (const void **)((char *)values - v6);
    memset(v9, 170, v5);
    CFDictionaryGetKeysAndValues(theDict, v7, v9);
    if (Count >= 1)
    {
      do
      {
        int v11 = *v7++;
        BOOL v10 = v11;
        long long v12 = *v9++;
        CFDictionaryAddValue(a1, v10, v12);
        --Count;
      }
      while (Count);
    }
  }
  else
  {
    CFDictionaryGetKeysAndValues(theDict, (const void **)((char *)values - v6), (const void **)values);
  }
}

uint64_t VCUtil_BinaryPrefix(unint64_t a1, double *a2)
{
  if (a1 >= 0x400)
  {
    unint64_t v2 = 0;
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v2++;
      if (v4 > 4) {
        break;
      }
      unint64_t v5 = v3 >> 20;
      v3 >>= 10;
    }
    while (v5);
  }
  else
  {
    unint64_t v2 = 0;
  }
  if (a2) {
    *a2 = (double)a1 / (double)(unint64_t)(1 << (10 * v2));
  }
  return VCUtil_BinaryPrefix_prefixes[v2];
}

BOOL VCUtil_AuditTokenValid(uint64_t a1)
{
  BOOL result = 0;
  if (a1)
  {
    if ((_UNKNOWN *)a1 != &VCUtil_InvalidAuditToken) {
      return (*(void *)a1 & *(void *)(a1 + 8) & *(void *)(a1 + 16) & *(void *)(a1 + 24)) != -1;
    }
  }
  return result;
}

double VCUtil_AuditTokenForCurrentProcess@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = -1;
  *((void *)&v2 + 1) = -1;
  *(_OWORD *)task_info_out = v2;
  long long v8 = v2;
  mach_msg_type_number_t task_info_outCnt = 8;
  if ((*MEMORY[0x1E4F14960] - 1) > 0xFFFFFFFD)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCUtil_AuditTokenForCurrentProcess_cold_2();
      }
    }
  }
  else
  {
    if (!task_info(*MEMORY[0x1E4F14960], 0xFu, task_info_out, &task_info_outCnt))
    {
      *(void *)&long long v3 = *(void *)task_info_out;
      long long v4 = v8;
      *a1 = *(_OWORD *)task_info_out;
      a1[1] = v4;
      return *(double *)&v3;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCUtil_AuditTokenForCurrentProcess_cold_1();
      }
    }
  }
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *a1 = v3;
  a1[1] = v3;
  return *(double *)&v3;
}

void _VCUtil_GenerateTailspin(int a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  __int16 v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = (void *)0xAAAAAAAAAAAAAAAALL;
  _VCUtil_DiagnosticsAtomicSharedInstance();
  uint64_t v21 = &_VCUtil_DiagnosticsAtomicSharedInstance_tailspinOrSpinDumpInProgress;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[6] = v4;
  v27[7] = v4;
  v27[4] = v4;
  v27[5] = v4;
  v27[2] = v4;
  v27[3] = v4;
  v27[0] = v4;
  v27[1] = v4;
  VRLogfileGetTimestamp((char *)v27, 0x80u);
  memset(__b, 170, sizeof(__b));
  VCDiskUtils_CreateDirectory();
  snprintf(__b, 0x400uLL, "/private/var/mobile/Library/Logs/CrashReporter/avconferenced_blockage_%s.XXXXXX.tailspin", (const char *)v27);
  int v5 = mkostemps(__b, 9, 0);
  if (v5 != -1)
  {
    int v6 = v5;
    *(void *)CMTime buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    *(void *)unsigned int v23 = strndup(__b, 0x400uLL);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    long long v12 = ___VCUtil_GenerateTailspin_block_invoke;
    long long v13 = &unk_1E6DB5E90;
    int v17 = v6;
    long long v15 = &v18;
    uint64_t v16 = a2;
    long long v14 = buf;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3
      && (VRTraceErrorLogLevelToCSTR(), os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
    {
      _VCUtil_GenerateTailspin_cold_1();
      if (a1) {
        goto LABEL_5;
      }
    }
    else if (a1)
    {
LABEL_5:
      v12((uint64_t)block);
LABEL_12:
      _Block_object_dispose(buf, 8);
      goto LABEL_13;
    }
    global_queue = dispatch_get_global_queue(-32768, 0);
    dispatch_async(global_queue, block);
    goto LABEL_12;
  }
  int v7 = *__error();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    uint64_t v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VCUtil_GenerateTailspin";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)unsigned int v23 = 1586;
      *(_WORD *)&v23[4] = 2080;
      *(void *)&v23[6] = __b;
      __int16 v24 = 1024;
      int v25 = v7;
      _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to open file=%s: %{darwin.errno}d", buf, 0x2Cu);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v19[3], 0xFFFFFFFF);
LABEL_13:
  _Block_object_dispose(&v18, 8);
}

void _VCUtil_DiagnosticsAtomicSharedInstance()
{
  v0[5] = *MEMORY[0x1E4F143B8];
  v0[0] = MEMORY[0x1E4F143A8];
  v0[1] = 0x40000000;
  v0[2] = ___VCUtil_DiagnosticsAtomicSharedInstance_block_invoke;
  v0[3] = &__block_descriptor_tmp_123;
  v0[4] = &_VCUtil_DiagnosticsAtomicSharedInstance_tailspinOrSpinDumpInProgress;
  if (_VCUtil_DiagnosticsAtomicSharedInstance_onceToken != -1) {
    dispatch_once(&_VCUtil_DiagnosticsAtomicSharedInstance_onceToken, v0);
  }
}

void _VCUtil_GenerateStackshot(int a1, const char *a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  if (VRTraceIsInternalOSInstalled())
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCUtil_GenerateStackshot_cold_1();
      }
    }
    size_t v4 = strlen(a2);
    v7[0] = 0;
    v7[1] = v7;
    void v7[2] = 0x2000000000;
    v7[3] = strndup(a2, v4 + 1);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    uint64_t v6[2] = ___VCUtil_GenerateStackshot_block_invoke;
    v6[3] = &unk_1E6DB5EB8;
    v6[4] = v7;
    if (a1)
    {
      ___VCUtil_GenerateStackshot_block_invoke((uint64_t)v6);
    }
    else
    {
      global_queue = dispatch_get_global_queue(-32768, 0);
      dispatch_async(global_queue, v6);
    }
    _Block_object_dispose(v7, 8);
  }
}

void _VCUtil_GenerateSpindump(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v8[0] = 0;
  v8[1] = v8;
  void v8[2] = 0x2000000000;
  uint64_t v9 = (void *)0xAAAAAAAAAAAAAAAALL;
  _VCUtil_DiagnosticsAtomicSharedInstance();
  uint64_t v9 = &_VCUtil_DiagnosticsAtomicSharedInstance_tailspinOrSpinDumpInProgress;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___VCUtil_GenerateSpindump_block_invoke;
  v7[3] = &unk_1E6DB5F00;
  void v7[5] = a2;
  v7[6] = a3;
  v7[4] = v8;
  if (a1)
  {
    ___VCUtil_GenerateSpindump_block_invoke((uint64_t)v7);
  }
  else
  {
    global_queue = dispatch_get_global_queue(-32768, 0);
    dispatch_async(global_queue, v7);
  }
  _Block_object_dispose(v8, 8);
}

uint64_t _VCUtil_GenerateDiagnosticsInternal(int a1, char a2, const char *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (!a4) {
      return 0;
    }
  }
  else
  {
    BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"isGenerateStackshotEnabled", 0);
    uint64_t result = 0;
    if (!a4 || !BoolValueForKey) {
      return result;
    }
  }
  uint64_t result = VRTraceIsInternalOSInstalled();
  if (!result) {
    return result;
  }
  if (a4) {
    _VCUtil_GenerateStackshot(a1, a3);
  }
  _VCUtil_DiagnosticsAtomicSharedInstance();
  int v11 = 0;
  atomic_compare_exchange_strong(_VCUtil_DiagnosticsAtomicSharedInstance_tailspinOrSpinDumpInProgress, (unsigned int *)&v11, ((a4 >> 1) & 1) + ((a4 & 4) >> 2));
  if (!v11)
  {
    if ((a4 & 2) != 0) {
      _VCUtil_GenerateTailspin(a1, (uint64_t)a3);
    }
    if ((a4 & 4) != 0) {
      _VCUtil_GenerateSpindump(a1, (uint64_t)a3, a5);
    }
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    long long v13 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315650;
      uint64_t v15 = v12;
      __int16 v16 = 2080;
      int v17 = "_VCUtil_GenerateDiagnosticsInternal";
      __int16 v18 = 1024;
      int v19 = 1714;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Tailspin/spindump already in progress. Skipping.", (uint8_t *)&v14, 0x1Cu);
    }
  }
  return 1;
}

uint64_t VCUtil_GenerateDiagnostics(int a1, char a2, const char *a3, unsigned int a4)
{
  return _VCUtil_GenerateDiagnosticsInternal(a1, a2, a3, a4, 0);
}

void OUTLINED_FUNCTION_9_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x250], 8) = a1;
}

BOOL VCMediaNegotiationBlobV2MomentsSettingsReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  size_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            __int16 v24 = &OBJC_IVAR___VCMediaNegotiationBlobV2MomentsSettings__capabilities;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            __int16 v24 = &OBJC_IVAR___VCMediaNegotiationBlobV2MomentsSettings__capabilities;
            goto LABEL_41;
          }
        }
        __int16 v24 = &OBJC_IVAR___VCMediaNegotiationBlobV2MomentsSettings__capabilities;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 2u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        __int16 v24 = &OBJC_IVAR___VCMediaNegotiationBlobV2MomentsSettings__supportedCodecs;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        __int16 v24 = &OBJC_IVAR___VCMediaNegotiationBlobV2MomentsSettings__supportedCodecs;
        goto LABEL_41;
      }
    }
    __int16 v24 = &OBJC_IVAR___VCMediaNegotiationBlobV2MomentsSettings__supportedCodecs;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t VCSingleLinkedListClear(uint64_t result, uint64_t a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    v6[0] = 0;
    if (*(unsigned char *)(result + 8))
    {
      int v4 = 1;
      do
      {
        int v5 = *(void **)v2;
        if (!*(void *)v2) {
          break;
        }
        *(void *)uint64_t v2 = *v5;
        *int v5 = 0;
        --*(void *)(v2 + 24);
        v6[0] = v5;
        if (a2)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void *))(a2 + 16))(a2, v6);
          int v4 = *(unsigned __int8 *)(v2 + 8);
        }
      }
      while (v4);
    }
  }
  return result;
}

uint64_t *VCSingleLinkedListPop(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*((unsigned char *)result + 8))
    {
      uint64_t result = (uint64_t *)*result;
      if (*v1)
      {
        *uint64_t v1 = *result;
        char *result = 0;
        --v1[3];
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *VCSingleLinkedListRemove(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  long long v3 = 0;
  if (a2 && *(unsigned char *)(a1 + 8))
  {
    long long v3 = (void *)a1;
    while (1)
    {
      int v5 = v3;
      long long v3 = (void *)*v3;
      if (!v3) {
        break;
      }
      if ((*(unsigned int (**)(void *, uint64_t))(a1 + 16))(v3, a2) == 1)
      {
        *int v5 = *v3;
        *long long v3 = 0;
        --*(void *)(a1 + 24);
        return v3;
      }
    }
  }
  return v3;
}

uint64_t VCSingleLinkedGetNumberEntries(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 8)) {
      return *(void *)(result + 24);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t VCSingleLinkedListEnumerate(uint64_t result, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0;
    if (a2)
    {
      if (*(unsigned char *)(v3 + 8))
      {
        char v6 = 0;
        int v4 = *(void **)v3;
        if (*(void *)v3)
        {
          do
          {
            (*(void (**)(uint64_t, void *, char *))(a2 + 16))(a2, v4, &v6);
            int v4 = (void *)*v4;
            if (v4) {
              BOOL v5 = v6 == 0;
            }
            else {
              BOOL v5 = 0;
            }
          }
          while (v5);
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t VCSessionOneToOneSystemAudioTierTable()
{
  timeval v2[2] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC3840;
  v1[1] = &unk_1F3DC3870;
  v2[0] = &unk_1F3DC3858;
  v2[1] = &unk_1F3DC3888;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:2];
}

uint64_t VCSessionOneToOneCameraTierTable()
{
  void v2[6] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC38A0;
  v1[1] = &unk_1F3DC38D0;
  v2[0] = &unk_1F3DC38B8;
  v2[1] = &unk_1F3DC38E8;
  void v1[2] = &unk_1F3DC3900;
  v1[3] = &unk_1F3DC3930;
  timeval v2[2] = &unk_1F3DC3918;
  void v2[3] = &unk_1F3DC3948;
  v1[4] = &unk_1F3DC3960;
  v1[5] = &unk_1F3DC3990;
  v2[4] = &unk_1F3DC3978;
  v2[5] = &unk_1F3DC39A8;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:6];
}