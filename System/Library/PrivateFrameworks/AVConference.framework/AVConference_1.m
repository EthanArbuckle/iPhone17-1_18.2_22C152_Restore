uint64_t VCSessionOneToOneScreenTierTable()
{
  void v1[8];
  void v2[9];

  v2[8] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC39C0;
  v1[1] = &unk_1F3DC39F0;
  v2[0] = &unk_1F3DC39D8;
  v2[1] = &unk_1F3DC3A08;
  v1[2] = &unk_1F3DC3A20;
  v1[3] = &unk_1F3DC3A50;
  v2[2] = &unk_1F3DC3A38;
  v2[3] = &unk_1F3DC3A68;
  v1[4] = &unk_1F3DC3A80;
  v1[5] = &unk_1F3DC3AB0;
  v2[4] = &unk_1F3DC3A98;
  v2[5] = &unk_1F3DC3AC8;
  v1[6] = &unk_1F3DC3AE0;
  v1[7] = &unk_1F3DC3B10;
  v2[6] = &unk_1F3DC3AF8;
  v2[7] = &unk_1F3DC3B28;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:8];
}

uint64_t VCSessionOneToOneScreenTierTableForegroundCamera()
{
  v2[5] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC39C0;
  v1[1] = &unk_1F3DC39F0;
  v2[0] = &unk_1F3DC39D8;
  v2[1] = &unk_1F3DC3A08;
  v1[2] = &unk_1F3DC3A50;
  v1[3] = &unk_1F3DC3AB0;
  v2[2] = &unk_1F3DC3A38;
  v2[3] = &unk_1F3DC3A68;
  v1[4] = &unk_1F3DC3AE0;
  v2[4] = &unk_1F3DC3A98;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:5];
}

uint64_t VCSessionOneToOneReducedMicTierTable()
{
  v2[3] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC3B40;
  v1[1] = &unk_1F3DC3B70;
  v2[0] = &unk_1F3DC3B58;
  v2[1] = &unk_1F3DC3B88;
  v1[2] = &unk_1F3DC3BA0;
  v2[2] = &unk_1F3DC3BB8;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:3];
}

uint64_t VCSessionOneToOneFullMicTierTable()
{
  v2[8] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC3BD0;
  v1[1] = &unk_1F3DC3B40;
  v2[0] = &unk_1F3DC3BE8;
  v2[1] = &unk_1F3DC3B58;
  v1[2] = &unk_1F3DC3C00;
  void v1[3] = &unk_1F3DC3C18;
  v2[2] = &unk_1F3DC38B8;
  v2[3] = &unk_1F3DC3C30;
  v1[4] = &unk_1F3DC3C48;
  void v1[5] = &unk_1F3DC3B70;
  void v2[4] = &unk_1F3DC3C60;
  v2[5] = &unk_1F3DC3B88;
  v1[6] = &unk_1F3DC3BA0;
  v1[7] = &unk_1F3DC3C78;
  void v2[6] = &unk_1F3DC3BB8;
  v2[7] = &unk_1F3DC3C90;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:8];
}

uint64_t VCSessionOneToOneFTXTTierTable()
{
  v2[3] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC3CA8;
  v1[1] = &unk_1F3DC3CD8;
  v2[0] = &unk_1F3DC3CC0;
  v2[1] = &unk_1F3DC3CF0;
  v1[2] = &unk_1F3DC3D08;
  v2[2] = &unk_1F3DC3D20;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:3];
}

uint64_t VCSessionOneToOneFTXTTierTableWithRedundancy()
{
  v2[3] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC3CA8;
  v1[1] = &unk_1F3DC3CD8;
  v2[0] = &unk_1F3DC3D38;
  v2[1] = &unk_1F3DC3D50;
  v1[2] = &unk_1F3DC3D08;
  v2[2] = &unk_1F3DC3D68;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:3];
}

uint64_t VCSessionOneToOneBDATTierTable()
{
  v2[2] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC3D80;
  v1[1] = &unk_1F3DC3DB0;
  v2[0] = &unk_1F3DC3D98;
  v2[1] = &unk_1F3DC3DC8;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:2];
}

uint64_t VCSessionLowLatencyVideoCallMicrophoneBandwidthTable()
{
  v2[10] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC3DE0;
  v1[1] = &unk_1F3DC3E10;
  v2[0] = &unk_1F3DC3DF8;
  v2[1] = &unk_1F3DC3BE8;
  void v1[2] = &unk_1F3DC3B88;
  void v1[3] = &unk_1F3DC3E40;
  v2[2] = &unk_1F3DC3E28;
  void v2[3] = &unk_1F3DC3B58;
  v1[4] = &unk_1F3DC3E58;
  void v1[5] = &unk_1F3DC3E70;
  void v2[4] = &unk_1F3DC38B8;
  v2[5] = &unk_1F3DC3C30;
  v1[6] = &unk_1F3DC3E88;
  v1[7] = &unk_1F3DC3EA0;
  void v2[6] = &unk_1F3DC3C60;
  v2[7] = &unk_1F3DC3B88;
  void v1[8] = &unk_1F3DC3EB8;
  v1[9] = &unk_1F3DC3ED0;
  v2[8] = &unk_1F3DC3BB8;
  void v2[9] = &unk_1F3DC3C90;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:10];
}

uint64_t VCSessionVideoCallMicrophoneBandwidthTable()
{
  void v2[9] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC3DE0;
  v1[1] = &unk_1F3DC3E10;
  v2[0] = &unk_1F3DC3DF8;
  v2[1] = &unk_1F3DC3BE8;
  void v1[2] = &unk_1F3DC3B88;
  void v1[3] = &unk_1F3DC3E40;
  v2[2] = &unk_1F3DC3E28;
  void v2[3] = &unk_1F3DC3B58;
  v1[4] = &unk_1F3DC3E58;
  void v1[5] = &unk_1F3DC3E70;
  void v2[4] = &unk_1F3DC38B8;
  v2[5] = &unk_1F3DC3C30;
  v1[6] = &unk_1F3DC3E88;
  v1[7] = &unk_1F3DC3EA0;
  void v2[6] = &unk_1F3DC3C60;
  v2[7] = &unk_1F3DC3B88;
  void v1[8] = &unk_1F3DC3EB8;
  v2[8] = &unk_1F3DC3EE8;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:9];
}

uint64_t VCSessionLowLatencyMicrophoneOnlyBandwidthTable()
{
  void v2[9] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC39D8;
  v1[1] = &unk_1F3DC3E28;
  v2[0] = &unk_1F3DC3DF8;
  v2[1] = &unk_1F3DC3BE8;
  void v1[2] = &unk_1F3DC3E10;
  void v1[3] = &unk_1F3DC3C60;
  v2[2] = &unk_1F3DC3F00;
  void v2[3] = &unk_1F3DC3F18;
  v1[4] = &unk_1F3DC3B88;
  void v1[5] = &unk_1F3DC3F48;
  void v2[4] = &unk_1F3DC3F30;
  v2[5] = &unk_1F3DC3F60;
  v1[6] = &unk_1F3DC3E58;
  v1[7] = &unk_1F3DC3F78;
  void v2[6] = &unk_1F3DC3EE8;
  v2[7] = &unk_1F3DC3C90;
  void v1[8] = &unk_1F3DC3F90;
  v2[8] = &unk_1F3DC3FA8;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:9];
}

uint64_t VCSessionMicrophoneOnlyBandwidthTable()
{
  void v2[9] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F3DC39D8;
  v1[1] = &unk_1F3DC3E28;
  v2[0] = &unk_1F3DC3DF8;
  v2[1] = &unk_1F3DC3BE8;
  void v1[2] = &unk_1F3DC3E10;
  void v1[3] = &unk_1F3DC3C60;
  v2[2] = &unk_1F3DC3F00;
  void v2[3] = &unk_1F3DC3F18;
  v1[4] = &unk_1F3DC3B88;
  void v1[5] = &unk_1F3DC3F48;
  void v2[4] = &unk_1F3DC3F30;
  v2[5] = &unk_1F3DC3F60;
  v1[6] = &unk_1F3DC3E58;
  v1[7] = &unk_1F3DC3F78;
  void v2[6] = &unk_1F3DC3EE8;
  v2[7] = &unk_1F3DC3FC0;
  void v1[8] = &unk_1F3DC3E70;
  v2[8] = &unk_1F3DC3FD8;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:9];
}

uint64_t _NACKConsumer_CloseSummerHandles(uint64_t a1)
{
  uint64_t v1 = a1 + 1054736;
  if (*(void *)(a1 + 1054736) != 0xFFFFFFFFLL) {
    SummerCloseHandle();
  }
  uint64_t result = *(void *)(v1 + 8);
  if (result != 0xFFFFFFFFLL)
  {
    return SummerCloseHandle();
  }
  return result;
}

uint64_t _VCNACKConsumerClassRegister(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t VCNACKConsumer_Create(uint64_t a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (VCNACKConsumerGetTypeID_initOnce != -1) {
      dispatch_once_f(&VCNACKConsumerGetTypeID_initOnce, &VCNACKConsumerGetTypeID_typeID, (dispatch_function_t)_VCNACKConsumerClassRegister);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v4 = Instance;
      if ((SummerCreateHandle((uint64_t *)(Instance + 1054736), 400) & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNACKConsumer_Create_cold_3();
          }
        }
      }
      else
      {
        uint64_t Handle = SummerCreateHandle((uint64_t *)(v4 + 1054744), 400);
        if ((Handle & 0x80000000) == 0)
        {
          uint64_t v6 = Handle;
          SummerAdd(0.0, 0.0);
          *(_DWORD *)(v4 + 1054764) = 10;
          *(unsigned char *)(v4 + 1054760) = 1;
          *(_DWORD *)(v4 + 1054768) = reportingDefaultRealtimePeriod();
          *(unsigned char *)(v4 + 1054772) = VCDefaults_GetBoolValueForKey(@"ignoreRetransmissionBudget", 0);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v7 = VRTraceErrorLogLevelToCSTR();
            v8 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v10 = 136315906;
              uint64_t v11 = v7;
              __int16 v12 = 2080;
              v13 = "VCNACKConsumer_Create";
              __int16 v14 = 1024;
              int v15 = 166;
              __int16 v16 = 2048;
              uint64_t v17 = v4;
              _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d New instance created=%p", (uint8_t *)&v10, 0x26u);
            }
          }
          *a2 = v4;
          return v6;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNACKConsumer_Create_cold_4();
          }
        }
      }
      _NACKConsumer_CloseSummerHandles(v4);
      CFRelease((CFTypeRef)v4);
      return 2152071172;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    {
      return 2152071171;
    }
    else
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = 2152071171;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKConsumer_Create_cold_2();
      }
    }
  }
  else
  {
    uint64_t v6 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKConsumer_Create_cold_1();
      }
    }
  }
  return v6;
}

uint64_t VCNACKConsumer_GetRetransmissionRequestInfoFromNACK(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v6 = a1 + 1054760;
        if (*(unsigned char *)(a1 + 1054760))
        {
          int v7 = *a2;
          unsigned int v8 = *a2 & 0x3F;
          uint64_t v9 = a1 + 16480 * v8;
          int v11 = *(_DWORD *)(v9 + 16);
          int v10 = (_DWORD *)(v9 + 16);
          if (v11 != *a2)
          {
            bzero(v10, 0x4060uLL);
            *int v10 = v7;
          }
          unsigned int v12 = *((unsigned __int16 *)a2 + 3);
          __int16 v13 = *((_WORD *)a2 + 2);
          int v15 = (int *)(v6 + 4);
          int v14 = *(_DWORD *)(v6 + 4);
          if (v14 > 0 || *(unsigned char *)(v6 + 12))
          {
            *(_WORD *)(a3 + 10) = v13;
            *int v15 = --v14;
            unsigned __int8 v16 = 1;
            if (v12)
            {
LABEL_10:
              while (v14 > 0 || *(unsigned char *)(v6 + 12))
              {
                ++v13;
                if (v12)
                {
                  *(_WORD *)(a3 + 2 * v16 + 10) = v13;
                  *int v15 = --v14;
                  ++v16;
                }
                BOOL v17 = v12 > 1;
                v12 >>= 1;
                if (!v17) {
                  goto LABEL_15;
                }
              }
              goto LABEL_17;
            }
          }
          else
          {
            unsigned __int8 v16 = 0;
            if (v12) {
              goto LABEL_10;
            }
          }
LABEL_15:
          if (v14 > 0 || *(unsigned char *)(v6 + 12))
          {
LABEL_25:
            *(_WORD *)(a3 + 4) = v16;
            uint64_t v22 = a1 + 16480 * v8;
            *(void *)(v22 + 24) += v16;
            ++*(void *)(v22 + 56);
            return 0;
          }
LABEL_17:
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v18 = VRTraceErrorLogLevelToCSTR();
            v19 = *MEMORY[0x1E4F47A50];
            v20 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                int v21 = *v15;
                int v27 = 136315906;
                uint64_t v28 = v18;
                __int16 v29 = 2080;
                v30 = "VCNACKConsumer_GetRetransmissionRequestInfoFromNACK";
                __int16 v31 = 1024;
                int v32 = 233;
                __int16 v33 = 1024;
                int v34 = v21;
                _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Retransmission packet count exceeded allotted budget. retransmissionBudget=%d", (uint8_t *)&v27, 0x22u);
              }
            }
            else if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_5(v18, v15, v19);
            }
          }
          goto LABEL_25;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v24 = VRTraceErrorLogLevelToCSTR();
          v25 = *MEMORY[0x1E4F47A50];
          v26 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              int v27 = 136315650;
              uint64_t v28 = v24;
              __int16 v29 = 2080;
              v30 = "VCNACKConsumer_GetRetransmissionRequestInfoFromNACK";
              __int16 v31 = 1024;
              int v32 = 212;
              _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Cannot retransmit - retransmission bitrate exceeded allotted quota", (uint8_t *)&v27, 0x1Cu);
            }
          }
          else if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_4();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_1();
    }
  }
  return 0;
}

uint64_t _VCNACKConsumer_CheckBitrateLimits(uint64_t a1, double a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 1054736;
  double v20 = 0.0;
  double v21 = 0.0;
  double v5 = *(double *)(a1 + 1054752);
  if (v5 != 0.0)
  {
    double v6 = a2 - v5;
    if (a2 - v5 <= 0.1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v17 = VRTraceErrorLogLevelToCSTR();
        uint64_t v18 = *MEMORY[0x1E4F47A50];
        v19 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          uint64_t v11 = 0;
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
            return v11;
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = v17;
          __int16 v24 = 2080;
          v25 = "_VCNACKConsumer_CheckBitrateLimits";
          __int16 v26 = 1024;
          int v27 = 291;
          __int16 v28 = 2048;
          double v29 = v6;
          _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Use cached canSendNACK, timeSinceLastCheck=%f", buf, 0x26u);
        }
        else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          _VCNACKConsumer_CheckBitrateLimits_cold_1();
        }
      }
      return 0;
    }
  }
  if ((_VCNACKConsumer_GetBitrate(a1, &v21, &v20, a2 + -1.0) & 0x80000000) != 0)
  {
    uint64_t v11 = 2152071172;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCNACKConsumer_CheckBitrateLimits_cold_2();
      }
    }
  }
  else
  {
    if (v21 == 0.0) {
      double v7 = 0.0;
    }
    else {
      double v7 = v20 / v21;
    }
    int v8 = v7 < 0.2;
    uint64_t v9 = *(void *)v4;
    int v22 = 0;
    *(void *)buf = 0;
    uint64_t v10 = SummerLengthPred(a2 + -0.1, v9, (uint64_t (*)(double, double, double))SummerGreaterThan, (double *)buf, &v22);
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v11 = 2152071172;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCNACKConsumer_CheckBitrateLimits_cold_3();
        }
      }
    }
    else
    {
      uint64_t v11 = v10;
      *(_DWORD *)(v4 + 28) = vcvtpd_s64_f64((double)v22 * 0.2);
      if (*(unsigned __int8 *)(v4 + 24) != v8 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        __int16 v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v14 = *(unsigned __int8 *)(v4 + 24);
          int v15 = *(_DWORD *)(v4 + 28);
          *(_DWORD *)buf = 136317442;
          *(void *)&buf[4] = v12;
          __int16 v24 = 2080;
          v25 = "_VCNACKConsumer_CheckBitrateLimits";
          __int16 v26 = 1024;
          int v27 = 304;
          __int16 v28 = 2048;
          double v29 = *(double *)&a1;
          __int16 v30 = 1024;
          int v31 = v14;
          __int16 v32 = 1024;
          BOOL v33 = v7 < 0.2;
          __int16 v34 = 2048;
          double v35 = v21;
          __int16 v36 = 2048;
          double v37 = v20;
          __int16 v38 = 2048;
          double v39 = v7;
          __int16 v40 = 1024;
          int v41 = v15;
          _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNACKConsumer[%p] Based on bitrate limits, canRetransmit changed from before=%d to after=%d, mediaBitrate=%3.3f, retransmittedBitrate=%3.3f, overhead=%3.3f retransmissionBudget=%d", buf, 0x56u);
        }
      }
      *(double *)(v4 + 16) = a2;
      *(unsigned char *)(v4 + 24) = v8;
    }
  }
  return v11;
}

uint64_t _VCNACKConsumer_GetBitrate(uint64_t a1, double *a2, double *a3, double a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  double v6 = (uint64_t *)(a1 + 1054736);
  if (!a2)
  {
    uint64_t v7 = 0;
    if (!a3) {
      return v7;
    }
    goto LABEL_6;
  }
  uint64_t v7 = _VCNACKConsumer_ComputeSummerBitrate(*v6, a2, a4);
  if ((v7 & 0x80000000) == 0)
  {
    if (!a3) {
      return v7;
    }
LABEL_6:
    uint64_t v7 = _VCNACKConsumer_ComputeSummerBitrate(v6[1], a3, a4);
    if ((v7 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      __int16 v13 = *MEMORY[0x1E4F47A50];
      log = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v16 = v12;
          __int16 v17 = 2080;
          uint64_t v18 = "_VCNACKConsumer_GetBitrate";
          __int16 v19 = 1024;
          int v20 = 263;
          uint64_t v11 = " [%s] %s:%d Failed to compute summer bitrate for retransmitted bytes";
          goto LABEL_16;
        }
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        _VCNACKConsumer_GetBitrate_cold_1();
      }
    }
    return v7;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    log = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v16 = v9;
        __int16 v17 = 2080;
        uint64_t v18 = "_VCNACKConsumer_GetBitrate";
        __int16 v19 = 1024;
        int v20 = 259;
        uint64_t v11 = " [%s] %s:%d Failed to compute summer bitrate for media bytes";
LABEL_16:
        _os_log_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEFAULT, v11, buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      _VCNACKConsumer_GetBitrate_cold_2();
    }
  }
  return v7;
}

uint64_t VCNACKConsumer_UpdateRetransmissionStatus(uint64_t a1, int *a2)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKConsumer_UpdateRetransmissionStatus_cold_1();
      }
    }
    return 0;
  }
  int v4 = *a2;
  unsigned int v5 = *a2 & 0x3F;
  uint64_t v6 = a1 + 16480 * v5;
  int v8 = *(_DWORD *)(v6 + 16);
  uint64_t v7 = (_DWORD *)(v6 + 16);
  if (v8 != *a2)
  {
    bzero(v7, 0x4060uLL);
    *uint64_t v7 = v4;
  }
  uint64_t v9 = a2[1] & 0x7FF;
  double v10 = *((double *)a2 + 1);
  if (*((unsigned char *)a2 + 6))
  {
    uint64_t v11 = a1 + 16480 * v5;
    ++*(void *)(v11 + 40);
    double v12 = *(double *)(v11 + 8 * v9 + 96);
    double v13 = v10 - v12;
    BOOL v15 = v12 <= 0.0 || v10 <= v12 || v13 > 5.0;
    if (!v15 && v10 > 0.0) {
      *(double *)(a1 + 16480 * v5 + 16480) = v13;
    }
  }
  else
  {
    uint64_t v16 = a1 + 16480 * v5;
    double v17 = *(double *)(v16 + 8 * (a2[1] & 0x7FF) + 96);
    ++*(void *)(v16 + 48);
    double v18 = v10 - v17;
    BOOL v20 = v17 <= 0.0 || v10 <= v17 || v18 > 5.0;
    if (!v20 && v10 > 0.0) {
      *(double *)(a1 + 16480 * v5 + 16488) = v18;
    }
  }
  if (*((unsigned char *)a2 + 7)) {
    ++*(void *)(a1 + 16480 * v5 + 32);
  }
  unsigned int v21 = *((unsigned __int16 *)a2 + 8);
  if (v21 >= 2) {
    ++*(void *)(a1 + 16480 * v5 + 64);
  }
  uint64_t v22 = a1 + 16480 * v5;
  unsigned int v24 = *(unsigned __int16 *)(v22 + 72);
  v23 = (_WORD *)(v22 + 72);
  if (v21 > v24) {
    _WORD *v23 = v21;
  }
  unint64_t v25 = *((void *)a2 + 3);
  if (!v25) {
    return 0;
  }
  *(void *)(a1 + 16480 * v5 + 80) += v25;
  uint64_t v26 = SummerAdd((double)v25, v10);
  if ((v26 & 0x80000000) != 0)
  {
    uint64_t v27 = 2152071172;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKConsumer_UpdateRetransmissionStatus_cold_2();
      }
    }
  }
  else
  {
    uint64_t v27 = v26;
    _VCNACKConsumer_CheckBitrateLimits(a1, v10);
  }
  return v27;
}

uint64_t VCNACKConsumer_UpdateTransmissionStatus(uint64_t a1, int *a2)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKConsumer_UpdateTransmissionStatus_cold_1();
      }
    }
    return 0;
  }
  int v4 = *a2;
  unsigned int v5 = *a2 & 0x3F;
  uint64_t v6 = a1 + 16480 * v5;
  int v8 = *(_DWORD *)(v6 + 16);
  uint64_t v7 = (_DWORD *)(v6 + 16);
  if (v8 != *a2)
  {
    bzero(v7, 0x4060uLL);
    *uint64_t v7 = v4;
  }
  unint64_t v9 = *((void *)a2 + 2);
  if (!v9) {
    return 0;
  }
  *(void *)(a1 + 16480 * v5 + 88) += v9;
  uint64_t v10 = SummerAdd((double)v9, *((double *)a2 + 1));
  if ((v10 & 0x80000000) != 0)
  {
    uint64_t v11 = 2152071172;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKConsumer_UpdateTransmissionStatus_cold_2();
      }
    }
  }
  else
  {
    uint64_t v11 = v10;
    _VCNACKConsumer_CheckBitrateLimits(a1, *((double *)a2 + 1));
  }
  return v11;
}

uint64_t VCNACKConsumer_UpdatePacketCacheStatus(uint64_t a1, int *a2)
{
  if (a2)
  {
    int v4 = *a2;
    unsigned int v5 = *a2 & 0x3F;
    uint64_t v6 = a1 + 16480 * v5;
    int v8 = *(_DWORD *)(v6 + 16);
    uint64_t v7 = (_DWORD *)(v6 + 16);
    if (v8 != *a2)
    {
      bzero(v7, 0x4060uLL);
      *uint64_t v7 = v4;
    }
    uint64_t v9 = 0;
    *(void *)(a1 + 16480 * v5 + 8 * (a2[1] & 0x7FF) + 96) = *((void *)a2 + 1);
  }
  else
  {
    uint64_t v9 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKConsumer_UpdatePacketCacheStatus_cold_1();
      }
    }
  }
  return v9;
}

void VCNACKConsumer_GetStatistics(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    LOWORD(v6) = 0;
    double v7 = 0.0;
    uint64_t v8 = 64;
    double v9 = 0.0;
    uint64_t v10 = a1;
    int64x2_t v11 = 0uLL;
    int64x2_t v12 = 0uLL;
    do
    {
      int64x2_t v12 = vaddq_s64(*(int64x2_t *)(v10 + 40), v12);
      int64x2_t v11 = vaddq_s64(*(int64x2_t *)(v10 + 24), v11);
      v4 += *(void *)(v10 + 56);
      v5 += *(void *)(v10 + 64);
      if (*(unsigned __int16 *)(v10 + 72) <= (unsigned __int16)v6) {
        unsigned int v6 = (unsigned __int16)v6;
      }
      else {
        unsigned int v6 = *(unsigned __int16 *)(v10 + 72);
      }
      double v13 = *(double *)(v10 + 16480);
      double v14 = *(double *)(v10 + 16488);
      *(void *)(v10 + 16480) = 0;
      *(_OWORD *)(v10 + 40) = 0uLL;
      *(_OWORD *)(v10 + 24) = 0uLL;
      *(_OWORD *)(v10 + 56) = 0uLL;
      *(_WORD *)(v10 + 72) = 0;
      v10 += 16480;
      double v7 = v7 + v13;
      double v9 = v9 + v14;
      --v8;
    }
    while (v8);
    uint64_t v34 = v11.i64[0];
    unsigned int valuePtr = v11.i32[0];
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v35 = v11.i64[1];
    int64x2_t v36 = v12;
    CFNumberRef v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(a2, @"UNRPC", v16);
    CFRelease(v16);
    unsigned int valuePtr = v35;
    CFNumberRef v17 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(a2, @"UNFPC", v17);
    CFRelease(v17);
    unsigned int valuePtr = v36.i32[0];
    CFNumberRef v18 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(a2, @"UNCHPC", v18);
    CFRelease(v18);
    unsigned int valuePtr = v36.u32[2];
    CFNumberRef v19 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(a2, @"UNCMPC", v19);
    CFRelease(v19);
    unsigned int valuePtr = v4;
    CFNumberRef v20 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(a2, @"UNTRC", v20);
    CFRelease(v20);
    unsigned int valuePtr = v5;
    CFNumberRef v21 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(a2, @"UNRRC", v21);
    CFRelease(v21);
    unsigned int valuePtr = v6;
    CFNumberRef v22 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(a2, @"UNRRMC", v22);
    CFRelease(v22);
    double v23 = 0.0;
    if (v36.i64[0]) {
      double v24 = v7 / (double)v36.u64[0];
    }
    else {
      double v24 = 0.0;
    }
    *(float *)&unsigned int v25 = v24;
    unsigned int valuePtr = v25;
    CFNumberRef v26 = CFNumberCreate(v15, kCFNumberFloat32Type, &valuePtr);
    CFDictionaryAddValue(a2, @"UNART", v26);
    CFRelease(v26);
    if (v36.i64[1]) {
      double v23 = v9 / (double)v36.u64[1];
    }
    *(float *)&unsigned int v27 = v23;
    unsigned int valuePtr = v27;
    CFNumberRef v28 = CFNumberCreate(v15, kCFNumberFloat32Type, &valuePtr);
    CFDictionaryAddValue(a2, @"UNALT", v28);
    CFRelease(v28);
    long long v37 = 0uLL;
    LODWORD(v29) = *(_DWORD *)(a1 + 1054768);
    if ((_VCNACKConsumer_GetBitrate(a1, (double *)&v37 + 1, (double *)&v37, (double)v29) & 0x80000000) == 0)
    {
      unsigned int valuePtr = (*((double *)&v37 + 1) / 1000.0 + 0.5);
      CFNumberRef v30 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"UNMB", v30);
      CFRelease(v30);
      unsigned int valuePtr = (*(double *)&v37 / 1000.0 + 0.5);
      CFNumberRef v31 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"UNRB", v31);
      CFRelease(v31);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v32 = VRTraceErrorLogLevelToCSTR();
      BOOL v33 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        unsigned int valuePtr = 136318722;
        uint64_t v39 = v32;
        __int16 v40 = 2080;
        int v41 = "VCNACKConsumer_GetStatistics";
        __int16 v42 = 1024;
        int v43 = 442;
        __int16 v44 = 2048;
        uint64_t v45 = a1;
        __int16 v46 = 2048;
        uint64_t v47 = v34;
        __int16 v48 = 2048;
        uint64_t v49 = v35;
        __int16 v50 = 2048;
        uint64_t v51 = v36.i64[0];
        __int16 v52 = 2048;
        uint64_t v53 = v36.i64[1];
        __int16 v54 = 2048;
        uint64_t v55 = v4;
        __int16 v56 = 2048;
        uint64_t v57 = v5;
        __int16 v58 = 1024;
        unsigned int v59 = v6;
        __int16 v60 = 2048;
        double v61 = v24;
        __int16 v62 = 2048;
        double v63 = v23;
        __int16 v64 = 2048;
        uint64_t v65 = *((void *)&v37 + 1);
        __int16 v66 = 2048;
        uint64_t v67 = v37;
        _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d @=@ Health: VCNACKConsumer [%p] RTX health report retransmissionRequestPacketCount=%llu retransmissionFulfilledPacketCount=%llu aggregatedRetransmissionCacheHitCount=%llu aggregatedRetransmissionCacheMissCount=%llu aggregatedRetransmissionNACKReceivedCount=%llu aggregatedRetransmissionRepeatedRequestCount=%llu retransmissionRepeatedRequestMaxCount=%u averageResponseTime=%f averageLateTime=%f mediaBitrate=%f retransmittedBitrate=%f", (uint8_t *)&valuePtr, 0x90u);
      }
    }
  }
}

void _VCNACKConsumer_Init(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 1054736);
  bzero((void *)(a1 + 16), 0x101828uLL);
  *uint64_t v1 = 0xFFFFFFFFLL;
  v1[1] = 0xFFFFFFFFLL;
}

uint64_t _VCNACKConsumer_ComputeSummerBitrate(uint64_t a1, double *a2, double a3)
{
  v5[1] = *(double *)MEMORY[0x1E4F143B8];
  *a2 = 0.0;
  if (a1 == 0xFFFFFFFFLL) {
    return 2149515266;
  }
  v5[0] = NAN;
  uint64_t result = SummerSumPred(a3, 0.0, a1, (unsigned int (*)(double, double, double))SummerGreaterThan, (double (*)(double, double, double))SummerIdentity, v5, a2);
  if ((result & 0x80000000) == 0 && v5[0] >= 0.5) {
    *a2 = *a2 * 8.0 / v5[0];
  }
  return result;
}

__int16 *VADD_Q15_Portable(__int16 *result, __int16 *a2, __int16 *a3, int a4)
{
  for (; a4; --a4)
  {
    int v5 = *result++;
    int v4 = v5;
    int v6 = *a2++;
    int v7 = v6 + v4;
    if (v7 >= 0x7FFF) {
      __int16 v8 = 0x7FFF;
    }
    else {
      __int16 v8 = v7;
    }
    if (v7 <= -32768) {
      __int16 v9 = 0x8000;
    }
    else {
      __int16 v9 = v7;
    }
    if (v7 <= 0) {
      __int16 v10 = v9;
    }
    else {
      __int16 v10 = v8;
    }
    *a3++ = v10;
  }
  return result;
}

__int16 *VSMUL_Q15_Portable(__int16 *result, int a2, _WORD *a3, int a4)
{
  for (; a4; --a4)
  {
    int v4 = *result++;
    *a3++ = (v4 * a2) >> 15;
  }
  return result;
}

__int16 *SVESQ_Q15_Portable(__int16 *result, int a2, _DWORD *a3, char a4)
{
  for (int i = 0; a2; --a2)
  {
    int v5 = *result++;
    i += (v5 * v5) >> (a4 - 1);
  }
  *a3 = i;
  return result;
}

void _FECUtil_SetupFECHeaderV0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, void *a7, int a8, __int16 a9, __int16 a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  int v33 = 0;
  if (RSU_Encode(a6, (__int16 *)(a4 + 12), a5, a7, (_DWORD *)(a2 + 12016), (_DWORD *)&v34 + 1, (int *)&v34, &v33, 0, 0))
  {
    *(_DWORD *)a4 = 0;
  }
  else
  {
    uint64_t v32 = a2;
    if (a5 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = a3 + 4 * a8;
      do
      {
        *(_DWORD *)(a12 + 4 * v19) = ((a11 & 0x7F) << 16) | 0x800000 | (((a1 << 6) | (8 * v34) | ((_BYTE)v33 + (_BYTE)v34 * (_BYTE)v19) & 7) << 24) | *(_DWORD *)(v20 + 4 * v19) & 0x1FFF | (unsigned __int16)((a9 << 15) | ((_WORD)v33 << 11));
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v21 = VRTraceErrorLogLevelToCSTR();
          CFNumberRef v22 = *MEMORY[0x1E4F47A50];
          double v23 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              int v24 = *(_DWORD *)(a12 + 4 * v19);
              *(_DWORD *)buf = 136316162;
              uint64_t v36 = v21;
              __int16 v37 = 2080;
              __int16 v38 = "_FECUtil_SetupFECHeaderV0";
              __int16 v39 = 1024;
              int v40 = 73;
              __int16 v41 = 1024;
              int v42 = v19;
              __int16 v43 = 1024;
              int v44 = v24;
              _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setup FEC Main header (data packet %d) = %08x", buf, 0x28u);
            }
          }
          else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            int v25 = *(_DWORD *)(a12 + 4 * v19);
            *(_DWORD *)buf = 136316162;
            uint64_t v36 = v21;
            __int16 v37 = 2080;
            __int16 v38 = "_FECUtil_SetupFECHeaderV0";
            __int16 v39 = 1024;
            int v40 = 73;
            __int16 v41 = 1024;
            int v42 = v19;
            __int16 v43 = 1024;
            int v44 = v25;
            _os_log_debug_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Setup FEC Main header (data packet %d) = %08x", buf, 0x28u);
          }
        }
        ++v19;
      }
      while (a5 != v19);
    }
    if (SHIDWORD(v34) >= 1)
    {
      uint64_t v26 = 0;
      do
      {
        *(_DWORD *)(a13 + 4 * v26) = ((a11 & 0x7F) << 16) | (((a1 << 6) | (8 * v34) | ((_BYTE)v34 * (_BYTE)v26) & 7) << 24) | *(_DWORD *)(v32 + 12016 + 4 * v26) & 0x1FFF | (unsigned __int16)((a9 << 15) | ((_WORD)v33 << 11));
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v27 = VRTraceErrorLogLevelToCSTR();
          CFNumberRef v28 = *MEMORY[0x1E4F47A50];
          unint64_t v29 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              int v30 = *(_DWORD *)(a12 + 4 * v26);
              *(_DWORD *)buf = 136316162;
              uint64_t v36 = v27;
              __int16 v37 = 2080;
              __int16 v38 = "_FECUtil_SetupFECHeaderV0";
              __int16 v39 = 1024;
              int v40 = 84;
              __int16 v41 = 1024;
              int v42 = v26;
              __int16 v43 = 1024;
              int v44 = v30;
              _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setup FEC Main header (parity packet %d) = %08x", buf, 0x28u);
            }
          }
          else if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            int v31 = *(_DWORD *)(a12 + 4 * v26);
            *(_DWORD *)buf = 136316162;
            uint64_t v36 = v27;
            __int16 v37 = 2080;
            __int16 v38 = "_FECUtil_SetupFECHeaderV0";
            __int16 v39 = 1024;
            int v40 = 84;
            __int16 v41 = 1024;
            int v42 = v26;
            __int16 v43 = 1024;
            int v44 = v31;
            _os_log_debug_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Setup FEC Main header (parity packet %d) = %08x", buf, 0x28u);
          }
        }
        ++v26;
      }
      while (v26 < SHIDWORD(v34));
    }
  }
}

void _FECUtil_SetupFECHeaderV1(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, void *a8, int a9, __int16 a10, __int16 a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = 0;
  int v31 = 0;
  if (RSU_Encode(a7, (__int16 *)(a4 + 12), a5, a8, (_DWORD *)(a2 + 12016), (_DWORD *)&v32 + 1, (int *)&v32, &v31, (_WORD *)(a2 + 12044), 1))
  {
    *(_DWORD *)a4 = 0;
  }
  else
  {
    int v18 = a1 << 7;
    if (a5 >= 1)
    {
      uint64_t v19 = 0;
      do
      {
        *(_DWORD *)(a13 + 4 * v19) = (unsigned __int16)((a10 << 14) | ((_WORD)v31 << 10)) | FECUtil_FECLevelofProtectionToFECPercentage(a6) | ((a12 & 0x7F) << 15) | 0x400000 | ((((_BYTE)v31 + (_BYTE)v32 * (_BYTE)v19) & 0xF | v18 | (16 * v32)) << 23);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v20 = VRTraceErrorLogLevelToCSTR();
          uint64_t v21 = *MEMORY[0x1E4F47A50];
          CFNumberRef v22 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              int v23 = *(_DWORD *)(a13 + 4 * v19);
              *(_DWORD *)buf = 136316162;
              uint64_t v34 = v20;
              __int16 v35 = 2080;
              uint64_t v36 = "_FECUtil_SetupFECHeaderV1";
              __int16 v37 = 1024;
              int v38 = 124;
              __int16 v39 = 1024;
              int v40 = v19;
              __int16 v41 = 1024;
              int v42 = v23;
              _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setup FEC Main header (data packet %d) = %08x", buf, 0x28u);
            }
          }
          else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            int v24 = *(_DWORD *)(a13 + 4 * v19);
            *(_DWORD *)buf = 136316162;
            uint64_t v34 = v20;
            __int16 v35 = 2080;
            uint64_t v36 = "_FECUtil_SetupFECHeaderV1";
            __int16 v37 = 1024;
            int v38 = 124;
            __int16 v39 = 1024;
            int v40 = v19;
            __int16 v41 = 1024;
            int v42 = v24;
            _os_log_debug_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Setup FEC Main header (data packet %d) = %08x", buf, 0x28u);
          }
        }
        ++v19;
      }
      while (a5 != v19);
    }
    if (SHIDWORD(v32) >= 1)
    {
      uint64_t v25 = 0;
      do
      {
        *(_DWORD *)(a14 + 4 * v25) = (unsigned __int16)((a10 << 14) | ((_WORD)v31 << 10)) | FECUtil_FECLevelofProtectionToFECPercentage(a6) | ((a12 & 0x7F) << 15) | ((v18 & 0xF0 | (16 * v32) | ((_BYTE)v32 * (_BYTE)v25) & 0xF) << 23);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v26 = VRTraceErrorLogLevelToCSTR();
          uint64_t v27 = *MEMORY[0x1E4F47A50];
          CFNumberRef v28 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              int v29 = *(_DWORD *)(a13 + 4 * v25);
              *(_DWORD *)buf = 136316162;
              uint64_t v34 = v26;
              __int16 v35 = 2080;
              uint64_t v36 = "_FECUtil_SetupFECHeaderV1";
              __int16 v37 = 1024;
              int v38 = 135;
              __int16 v39 = 1024;
              int v40 = v25;
              __int16 v41 = 1024;
              int v42 = v29;
              _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setup FEC Main header (parity packet %d) = %08x", buf, 0x28u);
            }
          }
          else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            int v30 = *(_DWORD *)(a13 + 4 * v25);
            *(_DWORD *)buf = 136316162;
            uint64_t v34 = v26;
            __int16 v35 = 2080;
            uint64_t v36 = "_FECUtil_SetupFECHeaderV1";
            __int16 v37 = 1024;
            int v38 = 135;
            __int16 v39 = 1024;
            int v40 = v25;
            __int16 v41 = 1024;
            int v42 = v30;
            _os_log_debug_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Setup FEC Main header (parity packet %d) = %08x", buf, 0x28u);
          }
        }
        ++v25;
      }
      while (v25 < SHIDWORD(v32));
    }
  }
}

uint64_t FECUtil_FECLevelofProtectionToFECPercentage(unsigned int a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1 < 6) {
    return dword_1E259E3D8[a1];
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    int v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315906;
      uint64_t v6 = v3;
      __int16 v7 = 2080;
      __int16 v8 = "FECUtil_FECLevelofProtectionToFECPercentage";
      __int16 v9 = 1024;
      int v10 = 550;
      __int16 v11 = 1024;
      unsigned int v12 = a1;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Unsupported iFECLevelOfProtection: %d", (uint8_t *)&v5, 0x22u);
    }
  }
  return 1;
}

void FECUtil_SetupFECHeader(int a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int a5, signed int a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a5 - 2 <= 6 && a6 >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v27 = v14;
    long long v28 = v14;
    long long v26 = v14;
    unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v25 = a7;
    v23[1] = v14;
    v23[2] = v14;
    *a4 = 1;
    a4[1] = a1;
    a4[11] = a5;
    CFAllocatorRef v15 = (int *)(a3 + 4 * a8);
    int v17 = *v15;
    CFNumberRef v16 = v15 + 1;
    v23[0] = v14;
    a4[3] = v17;
    do
    {
      uint64_t v18 = *(v16 - 1);
      int v19 = *v16++;
      a7 += v18;
      *(&v25 + v13 + 1) = a7;
      a4[v13++ + 4] = v19;
    }
    while (a5 - 1 != v13);
    uint64_t v20 = 0;
    uint64_t v21 = a2 + 16;
    do
    {
      *(void *)((char *)v23 + v20) = v21;
      v20 += 8;
      v21 += 1500;
    }
    while (v20 != 56);
    if (a1 == 1)
    {
      _FECUtil_SetupFECHeaderV1(1, a2, a3, (uint64_t)a4, a5, a6, (uint64_t)&v25, v23, v22, a9, a10, a11, a12, a13);
    }
    else if (a1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          FECUtil_SetupFECHeader_cold_1();
        }
      }
    }
    else
    {
      _FECUtil_SetupFECHeaderV0(0, a2, a3, (uint64_t)a4, a5, (uint64_t)&v25, v23, a8, a9, a10, a11, a12, a13);
    }
  }
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer(_DWORD *a1, unsigned __int16 *a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if (a3 > 1)
    {
      unsigned int v4 = *a2;
      unsigned int v5 = __rev16(v4);
      a1[11] = v5;
      uint64_t v6 = a1 + 11;
      if (v5 < 9)
      {
        if (a3 - 2 >= 2 * (unint64_t)v5)
        {
          if (v4)
          {
            uint64_t v7 = 0;
            do
            {
              a1[v7 + 3] = bswap32(a2[v7 + 1]) >> 16;
              ++v7;
            }
            while (v7 < *v6);
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v8 = VRTraceErrorLogLevelToCSTR();
            __int16 v9 = *MEMORY[0x1E4F47A50];
            int v10 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              {
                int v11 = *v6;
                int v12 = 136315906;
                uint64_t v13 = v8;
                __int16 v14 = 2080;
                CFAllocatorRef v15 = "_FECHeader_UnpackV0ParitySubHeaderFromBuffer";
                __int16 v16 = 1024;
                int v17 = 211;
                __int16 v18 = 1024;
                int v19 = v11;
                _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Unpack legacy parity subheader wNumPkt=%d", (uint8_t *)&v12, 0x22u);
              }
            }
            else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            {
              _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_5();
            }
          }
        }
        else
        {
          *uint64_t v6 = 0;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_4();
            }
          }
        }
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_3();
          }
        }
        *a1 = 0;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_1();
    }
  }
}

void _FECHeader_UnpackV1ParitySubHeaderFromBuffer(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 8);
    unsigned int v5 = (v4 >> 27) & 7;
    if (v5)
    {
      if (v4 >> 30) {
        int v6 = (v4 >> 10) & 0xF;
      }
      else {
        int v6 = (v4 >> 11) & 7;
      }
      *(_DWORD *)(a1 + 44) = (8 - v6) / v5;
      if (a3 > 1)
      {
        *(_WORD *)(a1 + 52) = bswap32(*a2) >> 16;
        if (a3 - 2 > 1)
        {
          *(_WORD *)(a1 + 54) = bswap32(a2[1]) >> 16;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v7 = VRTraceErrorLogLevelToCSTR();
            uint64_t v8 = *MEMORY[0x1E4F47A50];
            __int16 v9 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
              {
                int v10 = *(unsigned __int16 *)(a1 + 52);
                int v11 = *(unsigned __int16 *)(a1 + 54);
                int v14 = 136316162;
                uint64_t v15 = v7;
                __int16 v16 = 2080;
                int v17 = "_FECHeader_UnpackV1ParitySubHeaderFromBuffer";
                __int16 v18 = 1024;
                int v19 = 246;
                __int16 v20 = 1024;
                int v21 = v10;
                __int16 v22 = 1024;
                int v23 = v11;
                _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Unpack parity subheader redundantBitsForPayloadSize=%d, paritySequenceNumber=%d", (uint8_t *)&v14, 0x28u);
              }
            }
            else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
            {
              int v12 = *(unsigned __int16 *)(a1 + 52);
              int v13 = *(unsigned __int16 *)(a1 + 54);
              int v14 = 136316162;
              uint64_t v15 = v7;
              __int16 v16 = 2080;
              int v17 = "_FECHeader_UnpackV1ParitySubHeaderFromBuffer";
              __int16 v18 = 1024;
              int v19 = 246;
              __int16 v20 = 1024;
              int v21 = v12;
              __int16 v22 = 1024;
              int v23 = v13;
              _os_log_debug_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Unpack parity subheader redundantBitsForPayloadSize=%d, paritySequenceNumber=%d", (uint8_t *)&v14, 0x28u);
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_4();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_1();
    }
  }
}

void FECHeader_UnpackHeaderFromBuffer(_DWORD *a1, int a2, unsigned int *a3, unint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a1 && a3)
  {
    if (a4 <= 3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          FECHeader_UnpackHeaderFromBuffer_cold_2();
        }
      }
      return;
    }
    unsigned int v7 = *a3;
    int v6 = (unsigned __int16 *)(a3 + 1);
    unsigned int v8 = bswap32(v7);
    a1[2] = v8;
    *a1 = 1;
    unsigned int v9 = v8 >> 30;
    if (v8 >> 30) {
      int v10 = 0x400000;
    }
    else {
      int v10 = 0x800000;
    }
    if (v9 != a2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        int v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v14 = 136316162;
          uint64_t v15 = v12;
          __int16 v16 = 2080;
          int v17 = "FECHeader_UnpackHeaderFromBuffer";
          __int16 v18 = 1024;
          int v19 = 271;
          __int16 v20 = 1024;
          int v21 = a2;
          __int16 v22 = 1024;
          unsigned int v23 = v9;
          _os_log_error_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_ERROR, " [%s] %s:%d FEC Header version mismatch expected %d, but got %d", (uint8_t *)&v14, 0x28u);
        }
      }
      goto LABEL_30;
    }
    int v11 = v10 & v8;
    if (a2 != 1)
    {
      if (!a2)
      {
        if (!v11)
        {
          _FECHeader_UnpackV0ParitySubHeaderFromBuffer(a1, v6, a4 - 4);
        }
        return;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          FECHeader_UnpackHeaderFromBuffer_cold_3();
        }
      }
LABEL_30:
      *a1 = 0;
      return;
    }
    if (!v11)
    {
      _FECHeader_UnpackV1ParitySubHeaderFromBuffer((uint64_t)a1, v6, a4 - 4);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      FECHeader_UnpackHeaderFromBuffer_cold_1();
    }
  }
}

void _FECHeader_PackV0ParitySubHeaderToBuffer(uint64_t a1, _WORD *a2, unint64_t a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a4)
  {
    if (a3 > 1)
    {
      *a2 = bswap32(*(unsigned __int16 *)(a1 + 44)) >> 16;
      uint64_t v6 = *(int *)(a1 + 44);
      if (a3 - 2 >= 2 * v6)
      {
        if ((int)v6 >= 1)
        {
          uint64_t v7 = 0;
          do
          {
            a2[v7 + 1] = bswap32(*(_DWORD *)(a1 + 12 + 4 * v7)) >> 16;
            ++v7;
          }
          while (v7 < *(int *)(a1 + 44));
          LODWORD(v6) = *(_DWORD *)(a1 + 44);
        }
        uint64_t v8 = (int)(((2 * (v6 + ((int)v6 < 0))) & 0xFFFFFFFC) + 4);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v9 = VRTraceErrorLogLevelToCSTR();
          int v10 = *MEMORY[0x1E4F47A50];
          int v11 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              int v12 = *(_DWORD *)(a1 + 44);
              int v14 = 136316162;
              uint64_t v15 = v9;
              __int16 v16 = 2080;
              int v17 = "_FECHeader_PackV0ParitySubHeaderToBuffer";
              __int16 v18 = 1024;
              int v19 = 362;
              __int16 v20 = 1024;
              int v21 = v12;
              __int16 v22 = 2048;
              uint64_t v23 = v8;
              _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Pack legacy parity sub header wPktLen=%d, length=%ld", (uint8_t *)&v14, 0x2Cu);
            }
          }
          else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            int v13 = *(_DWORD *)(a1 + 44);
            int v14 = 136316162;
            uint64_t v15 = v9;
            __int16 v16 = 2080;
            int v17 = "_FECHeader_PackV0ParitySubHeaderToBuffer";
            __int16 v18 = 1024;
            int v19 = 362;
            __int16 v20 = 1024;
            int v21 = v13;
            __int16 v22 = 2048;
            uint64_t v23 = v8;
            _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Pack legacy parity sub header wPktLen=%d, length=%ld", (uint8_t *)&v14, 0x2Cu);
          }
        }
        *a4 += v8;
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _FECHeader_PackV0ParitySubHeaderToBuffer_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _FECHeader_PackV0ParitySubHeaderToBuffer_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _FECHeader_PackV0ParitySubHeaderToBuffer_cold_1();
    }
  }
}

void _FECHeader_PackV1ParitySubHeaderToBuffer(uint64_t a1, _WORD *a2, unint64_t a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a4)
  {
    if (a3 > 1)
    {
      *a2 = bswap32(*(unsigned __int16 *)(a1 + 52)) >> 16;
      if (a3 - 2 > 1)
      {
        a2[1] = bswap32(*(unsigned __int16 *)(a1 + 54)) >> 16;
        *a4 += 4;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v5 = VRTraceErrorLogLevelToCSTR();
          uint64_t v6 = *MEMORY[0x1E4F47A50];
          uint64_t v7 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              int v8 = *(unsigned __int16 *)(a1 + 52);
              int v9 = *(unsigned __int16 *)(a1 + 54);
              int v12 = 136316162;
              uint64_t v13 = v5;
              __int16 v14 = 2080;
              uint64_t v15 = "_FECHeader_PackV1ParitySubHeaderToBuffer";
              __int16 v16 = 1024;
              int v17 = 400;
              __int16 v18 = 1024;
              int v19 = v8;
              __int16 v20 = 1024;
              int v21 = v9;
              _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Pack fec data sub header redundantBitsForPayloadSize=%d, paritySequenceNumber=%d", (uint8_t *)&v12, 0x28u);
            }
          }
          else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            int v10 = *(unsigned __int16 *)(a1 + 52);
            int v11 = *(unsigned __int16 *)(a1 + 54);
            int v12 = 136316162;
            uint64_t v13 = v5;
            __int16 v14 = 2080;
            uint64_t v15 = "_FECHeader_PackV1ParitySubHeaderToBuffer";
            __int16 v16 = 1024;
            int v17 = 400;
            __int16 v18 = 1024;
            int v19 = v10;
            __int16 v20 = 1024;
            int v21 = v11;
            _os_log_debug_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Pack fec data sub header redundantBitsForPayloadSize=%d, paritySequenceNumber=%d", (uint8_t *)&v12, 0x28u);
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _FECHeader_PackV1ParitySubHeaderToBuffer_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _FECHeader_PackV1ParitySubHeaderToBuffer_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _FECHeader_PackV1ParitySubHeaderToBuffer_cold_1();
    }
  }
}

void FECHeader_PackHeaderToBuffer(_DWORD *a1, int a2, _DWORD *a3, unint64_t a4, void *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a5 && (*a5 = 0, a1) && a3 && a4 > 0x23)
  {
    *a3 = bswap32(a1[2]);
    uint64_t v6 = a3 + 1;
    *a5 += 4;
    unsigned int v7 = a1[2];
    unsigned int v8 = v7 >> 30;
    int v9 = HIWORD(v7) & 0x80;
    int v10 = v7 & 0x400000;
    if (!v8) {
      int v10 = v9;
    }
    BOOL v11 = v10 == 0;
    if (*a1) {
      BOOL v12 = v11;
    }
    else {
      BOOL v12 = 0;
    }
    if (v8 == a2)
    {
      if (a2 == 1)
      {
        if (v12)
        {
          _FECHeader_PackV1ParitySubHeaderToBuffer((uint64_t)a1, v6, a4 - 4, a5);
        }
      }
      else if (a2)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            FECHeader_PackHeaderToBuffer_cold_2();
          }
        }
      }
      else if (v12)
      {
        _FECHeader_PackV0ParitySubHeaderToBuffer((uint64_t)a1, v6, a4 - 4, a5);
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      __int16 v14 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v15 = 136316162;
        uint64_t v16 = v13;
        __int16 v17 = 2080;
        __int16 v18 = "FECHeader_PackHeaderToBuffer";
        __int16 v19 = 1024;
        int v20 = 424;
        __int16 v21 = 1024;
        int v22 = a2;
        __int16 v23 = 1024;
        unsigned int v24 = v8;
        _os_log_error_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_ERROR, " [%s] %s:%d FEC Header version mismatch expected %d, but got %d", (uint8_t *)&v15, 0x28u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      FECHeader_PackHeaderToBuffer_cold_1();
    }
  }
}

uint64_t FECUtil_GetRealNumParity(int a1, uint64_t a2)
{
  if (a2)
  {
    unsigned int v2 = a1 - 1;
    if (a2 == 2)
    {
      if (v2 < 8)
      {
        uint64_t v3 = (unsigned int *)&unk_1E259E410;
        return v3[v2];
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          FECUtil_GetRealNumParity_cold_3();
        }
      }
    }
    else if (a2 == 1)
    {
      if (v2 < 8)
      {
        uint64_t v3 = (unsigned int *)&unk_1E259E3F0;
        return v3[v2];
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          FECUtil_GetRealNumParity_cold_2();
        }
      }
    }
    else
    {
      if (v2 < 8)
      {
        uint64_t v3 = (unsigned int *)&unk_1E259E430;
        return v3[v2];
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          FECUtil_GetRealNumParity_cold_1();
        }
      }
    }
    return 0;
  }
  return a2;
}

float FECUtil_FECLevelofProtectionToRateRatio(int a1)
{
  float result = 1.0;
  if ((a1 - 1) <= 4) {
    return flt_1E259E450[a1 - 1];
  }
  return result;
}

uint64_t FECUtil_FECPercentageToLevelofProtection(unsigned int a1)
{
  if (a1 < 0xC9) {
    int v1 = 4;
  }
  else {
    int v1 = 5;
  }
  if (a1 >= 0x65) {
    int v2 = v1;
  }
  else {
    int v2 = 3;
  }
  if (a1 >= 0x33) {
    int v3 = v2;
  }
  else {
    int v3 = 2;
  }
  if ((int)a1 >= 26) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 1;
  }
  if (a1) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t FECUtil_FECRatioToLevelofProtection(float a1)
{
  unsigned int v1 = (int)(float)(a1 * 100.0);
  if (!v1) {
    return 0;
  }
  if ((int)v1 < 26) {
    return 1;
  }
  if (v1 < 0x33) {
    return 2;
  }
  if (v1 < 0x65) {
    return 3;
  }
  if (v1 < 0xC9) {
    return 4;
  }
  return 5;
}

uint64_t FECUtil_ParityGroupTransmissionCountForFECLevel(int a1)
{
  if ((a1 - 1) > 4) {
    return 0;
  }
  else {
    return dword_1E259E464[a1 - 1];
  }
}

uint64_t FECUtil_GetExpectedParityPacketCount(uint64_t a1)
{
  if (*(_DWORD *)a1 == 1) {
    return *(_DWORD *)(a1 + 8) - *(unsigned __int16 *)(a1 + 6) + 1;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    FECUtil_GetExpectedParityPacketCount_cold_1();
  }
  return 0;
}

void FECUtil_UpdateParitySequenceNumberHistory(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 4))
    {
      int v2 = *(_DWORD *)(a1 + 8);
      if (a2 != (unsigned __int16)v2 && (unsigned __int16)(a2 - v2) <= 0x7FFEu)
      {
        if (a2 < (unsigned __int16)v2) {
          v2 += 0x10000;
        }
        *(_DWORD *)(a1 + 8) = v2 & 0xFFFF0000 | a2;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 4) = 1;
      *(_WORD *)(a1 + 6) = a2;
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      FECUtil_UpdateParitySequenceNumberHistory_cold_1();
    }
  }
}

uint64_t FECUtil_ConvertNumberOfSymbolsToPackets(uint64_t a1, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = a1;
    if (a1 < 9)
    {
      LODWORD(v3) = vcvtps_u32_f32((float)a1 / (float)a2);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v7 = 136316162;
        uint64_t v8 = v4;
        __int16 v9 = 2080;
        int v10 = "FECUtil_ConvertNumberOfSymbolsToPackets";
        __int16 v11 = 1024;
        int v12 = 706;
        __int16 v13 = 1024;
        int v14 = v3;
        __int16 v15 = 1024;
        unsigned int v16 = a2;
        _os_log_error_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_ERROR, " [%s] %s:%d Number of symbols is larger than supported. numberOfSymbols=%d symbolsPerPacket=%d", (uint8_t *)&v7, 0x28u);
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        FECUtil_ConvertNumberOfSymbolsToPackets_cold_1();
      }
    }
    return 0;
  }
  return v3;
}

void FECUtil_PackFrameLoss(_WORD *a1, int a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *a1 = a3 & 0x3F | ((a2 & 0x3F) << 6);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      int v7 = *MEMORY[0x1E4F47A50];
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = (unsigned __int16)*a1;
          int v11 = 136316418;
          uint64_t v12 = v6;
          __int16 v13 = 2080;
          int v14 = "FECUtil_PackFrameLoss";
          __int16 v15 = 1024;
          int v16 = 720;
          __int16 v17 = 1024;
          int v18 = v9;
          __int16 v19 = 1024;
          int v20 = a2;
          __int16 v21 = 1024;
          int v22 = a3;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d FECv2 loss signal pack=%d size=%d loss=%d", (uint8_t *)&v11, 0x2Eu);
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = (unsigned __int16)*a1;
        int v11 = 136316418;
        uint64_t v12 = v6;
        __int16 v13 = 2080;
        int v14 = "FECUtil_PackFrameLoss";
        __int16 v15 = 1024;
        int v16 = 720;
        __int16 v17 = 1024;
        int v18 = v10;
        __int16 v19 = 1024;
        int v20 = a2;
        __int16 v21 = 1024;
        int v22 = a3;
        _os_log_debug_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEBUG, " [%s] %s:%d FECv2 loss signal pack=%d size=%d loss=%d", (uint8_t *)&v11, 0x2Eu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      FECUtil_PackFrameLoss_cold_1();
    }
  }
}

void FECUtil_UnpackFrameLoss(unsigned int a1, int *a2, int *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2 && a3)
  {
    *a2 = (a1 >> 6) & 0x3F;
    *a3 = a1 & 0x3F;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      int v7 = *MEMORY[0x1E4F47A50];
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = *a2;
          int v10 = *a3;
          int v13 = 136316418;
          uint64_t v14 = v6;
          __int16 v15 = 2080;
          int v16 = "FECUtil_UnpackFrameLoss";
          __int16 v17 = 1024;
          int v18 = 730;
          __int16 v19 = 1024;
          unsigned int v20 = a1;
          __int16 v21 = 1024;
          int v22 = v9;
          __int16 v23 = 1024;
          int v24 = v10;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d FECv2 loss signal unpack=%d size=%d loss=%d", (uint8_t *)&v13, 0x2Eu);
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v11 = *a2;
        int v12 = *a3;
        int v13 = 136316418;
        uint64_t v14 = v6;
        __int16 v15 = 2080;
        int v16 = "FECUtil_UnpackFrameLoss";
        __int16 v17 = 1024;
        int v18 = 730;
        __int16 v19 = 1024;
        unsigned int v20 = a1;
        __int16 v21 = 1024;
        int v22 = v11;
        __int16 v23 = 1024;
        int v24 = v12;
        _os_log_debug_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEBUG, " [%s] %s:%d FECv2 loss signal unpack=%d size=%d loss=%d", (uint8_t *)&v13, 0x2Eu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      FECUtil_UnpackFrameLoss_cold_1();
    }
  }
}

__CFString *VCSessionMediaState_Name(uint64_t a1)
{
  if (a1 >= 3) {
    return (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"Unknown (%d)", a1);
  }
  else {
    return off_1E6DB5F88[(int)a1];
  }
}

uint64_t VCSessionMediaState_FromAVCSessionMediaState(uint64_t result)
{
  if (result >= 3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return result;
  }
}

void VCMediaRecorderHistoryBuffer_UpdateBufferWithSample(CFIndex a1, const void *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      int Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 32));
      int v7 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
      if (v7 == Count)
      {
        if (*(_DWORD *)(a1 + 16) == Count) {
          VCMediaRecorderHistoryBuffer_DequeueOneFrame(a1);
        }
        int v16 = 0;
        CFArrayRef v8 = *(const __CFArray **)(a1 + 24);
        int v9 = CFArrayGetCount(v8);
        if (v9)
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v8, (v9 - 1));
          CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &v16);
          int v11 = v16;
        }
        else
        {
          int v11 = 0;
        }
        if ((*(_DWORD *)(a1 + 40) - a3) > 0x7FFFFFFE)
        {
          if ((v11 - a3) > 0x7FFFFFFE)
          {
            *(_DWORD *)(a1 + 40) = a3;
LABEL_14:
            int v16 = a3;
            CFNumberRef v12 = CFNumberCreate(*(CFAllocatorRef *)(a1 + 48), kCFNumberIntType, &v16);
            if (v12)
            {
              CFNumberRef v13 = v12;
              if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), v12))
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_4();
                  }
                }
              }
              else
              {
                CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), v13);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v13, a2);
              }
              CFRelease(v13);
            }
            else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_3();
              }
            }
            return;
          }
          *(_DWORD *)(a1 + 40) = a3;
        }
        a3 = v11 + 480;
        goto LABEL_14;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v14 = VRTraceErrorLogLevelToCSTR();
        __int16 v15 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v16 = 136316162;
          uint64_t v17 = v14;
          __int16 v18 = 2080;
          __int16 v19 = "VCMediaRecorderHistoryBuffer_UpdateBufferWithSample";
          __int16 v20 = 1024;
          int v21 = 68;
          __int16 v22 = 1024;
          int v23 = v7;
          __int16 v24 = 1024;
          int v25 = Count;
          _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, " [%s] %s:%d timestampQueue length=%u != sampleMap length=%u, sizes are inconsistent", (uint8_t *)&v16, 0x28u);
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_1();
    }
  }
}

CFIndex VCMediaRecorderHistoryBuffer_DequeueOneFrame(CFIndex result)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    unsigned int v1 = (CFDictionaryRef *)result;
    CFArrayRef v2 = *(const __CFArray **)(result + 24);
    uint64_t result = CFArrayGetCount(v2);
    if (result)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
      CFRetain(ValueAtIndex);
      unsigned int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberIntType, &valuePtr);
      CFArrayRemoveValueAtIndex(v2, 0);
      Value = CFDictionaryGetValue(v1[4], ValueAtIndex);
      if (!Value && (int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v5 = VRTraceErrorLogLevelToCSTR();
        uint64_t v6 = *MEMORY[0x1E4F47A50];
        int v7 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            uint64_t v11 = v5;
            __int16 v12 = 2080;
            CFNumberRef v13 = "VCMediaRecorderHistoryBuffer_DequeueOneFrame";
            __int16 v14 = 1024;
            int v15 = 148;
            __int16 v16 = 2080;
            uint64_t v17 = "_Bool VCMediaRecorderHistoryBuffer_DequeueOneFrame(VCMediaRecorderHistoryBuffer *const)";
            _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCMediaRecorderHistoryBuffer %s the old frame does not in buffer, something is wrong", buf, 0x26u);
          }
        }
        else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          VCMediaRecorderHistoryBuffer_DequeueOneFrame_cold_1();
        }
      }
      CFArrayRef v8 = (void *)[(CFDictionaryRef *)v1 delegate];
      [v8 historyBuffer:v1 didDequeueSample:Value timestamp:valuePtr];
      CFDictionaryRemoveValue(v1[4], ValueAtIndex);
      CFRelease(ValueAtIndex);
      return 1;
    }
  }
  return result;
}

uint64_t VCCarrierBundle_QueryCarrierBundleValueForKey(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t)a2;
  v10[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    *a2 = 0;
    id v4 = objc_alloc_init(MEMORY[0x1E4F23A80]);
    v10[0] = 0;
    uint64_t v5 = [v4 getCurrentDataSubscriptionContextSync:v10];
    if (v5
      && (uint64_t v6 = v5,
          int v7 = (void *)[objc_alloc(MEMORY[0x1E4F23938]) initWithBundleType:1],
          uint64_t v8 = [v4 copyCarrierBundleValueWithDefault:v6 key:a1 bundleType:v7 error:v10],
          v7,
          v8))
    {
      *(void *)uint64_t v2 = v8;
      uint64_t v2 = 1;
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  return v2;
}

uint64_t VCCarrierBundle_GetPSVoiceOnAPEnabled()
{
  v1[1] = *(id *)MEMORY[0x1E4F143B8];
  v1[0] = (id)MEMORY[0x1E4F1CC28];
  uint64_t result = _VCCarrierBundle_GetValueforKeyHierarchy((uint64_t)&unk_1F3DC7218, (uint64_t *)v1);
  if (result) {
    return [v1[0] BOOLValue];
  }
  return result;
}

uint64_t _VCCarrierBundle_GetValueforKeyHierarchy(uint64_t a1, uint64_t *a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCCarrierBundle_GetValueforKeyHierarchy_cold_1(v12);
      }
    }
    goto LABEL_21;
  }
  id v4 = objc_alloc_init(MEMORY[0x1E4F23A80]);
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCCarrierBundle_GetValueforKeyHierarchy_cold_2(v13);
      }
    }
LABEL_21:
    uint64_t v5 = 0;
LABEL_22:
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  uint64_t v5 = v4;
  v17[0] = 0;
  uint64_t v6 = [v4 getCurrentDataSubscriptionContextSync:v17];
  if (v6) {
    BOOL v7 = v17[0] == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (ErrorLogLevelForModule >= 3)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      __int16 v16 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCCarrierBundle_GetValueforKeyHierarchy_cold_3(v15, v17, v16);
      }
    }
    goto LABEL_22;
  }
  uint64_t v8 = [v5 context:v6 getCarrierBundleValue:a1 error:v17];
  if (v8) {
    BOOL v9 = v17[0] == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    goto LABEL_22;
  }
  *a2 = v8;
  uint64_t v10 = 1;
LABEL_14:

  return v10;
}

uint64_t VCCarrierBundle_GetForceJBLatencySensitiveModeForVoWiFi()
{
  v1[1] = *(id *)MEMORY[0x1E4F143B8];
  v1[0] = (id)MEMORY[0x1E4F1CC28];
  uint64_t result = _VCCarrierBundle_GetValueforKeyHierarchy((uint64_t)&unk_1F3DC7230, (uint64_t *)v1);
  if (result) {
    return [v1[0] BOOLValue];
  }
  return result;
}

void _VCMediaStreamManager_UpdateFrequencyLevel(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    id v4 = "vcMediaStreamUpdateInputFrequencyMetering";
  }
  else {
    id v4 = "vcMediaStreamUpdateOutputFrequencyMetering";
  }
  if (a3) {
    uint64_t v5 = @"vcMediaStreamInputFreqMetering";
  }
  else {
    uint64_t v5 = @"vcMediaStreamOutputFreqMetering";
  }
  id v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", a2, v5, 0);
  objc_msgSend(+[AVConferenceXPCServer AVConferenceXPCServerSingleton](AVConferenceXPCServer, "AVConferenceXPCServerSingleton"), "sendMessageAsync:arguments:context:", v4, v6, a1);
}

uint64_t RTPPackGenericDataPacket(char *__src, _DWORD *a2, unsigned int a3, __int16 a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  size_t v5 = *a2;
  if ((int)v5 + 8 > a3)
  {
    uint64_t v12 = 2147549198;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      uint64_t v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v16 = 136316162;
        uint64_t v17 = v14;
        __int16 v18 = 2080;
        __int16 v19 = "RTPPackGenericDataPacket";
        __int16 v20 = 1024;
        int v21 = 60;
        __int16 v22 = 1024;
        unsigned int v23 = a3;
        __int16 v24 = 1024;
        int v25 = v5 + 8;
        _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, " [%s] %s:%d Data buffer is too small. currentSize=%u needed=%u", (uint8_t *)&v16, 0x28u);
      }
    }
  }
  else
  {
    BOOL v7 = __src + 8;
    if (v7 < __src
      || (v5 <= a3 ? (BOOL v8 = v7 > &__src[a3]) : (BOOL v8 = 1),
          !v8 ? (BOOL v9 = (unint64_t)a3 - 8 >= v5) : (BOOL v9 = 0),
          !v9 || (memmove(v7, __src, v5), a3 < 8)))
    {
      __break(0x5519u);
    }
    uint64_t v12 = 0;
    *(void *)__src = (v5 << 16) | ((unint64_t)(a4 & 0x7FFF) << 32);
    *a2 = v5 + 8;
  }
  return v12;
}

uint64_t RTPUnpackGenericDataPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(a1 + 8);
  **(unsigned char **)a2 = 1;
  **(unsigned char **)(a2 + 8) = 1;
  if (v2 < 8)
  {
    uint64_t v8 = 2147549192;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        RTPUnpackGenericDataPacket_cold_1(v10);
        return 2147549192;
      }
    }
  }
  else
  {
    unint64_t v3 = *(void *)(a1 + 16);
    id v4 = (unsigned __int16 *)(v3 + 2);
    if (v3 + 2 >= v3 + *(void *)(a1 + 8) || (unint64_t)v4 < v3) {
      __break(0x5519u);
    }
    size_t v6 = *v4;
    if (v2 < v6 + 8)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      {
        return 2147549199;
      }
      else
      {
        int v14 = v6;
        size_t v15 = v6 + 8;
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        uint64_t v12 = *MEMORY[0x1E4F47A50];
        uint64_t v8 = 2147549199;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          uint64_t v17 = v11;
          __int16 v18 = 2080;
          __int16 v19 = "RTPUnpackGenericDataPacket";
          __int16 v20 = 1024;
          int v21 = 88;
          __int16 v22 = 2048;
          unint64_t v23 = v2;
          __int16 v24 = 1024;
          int v25 = v14;
          __int16 v26 = 2048;
          size_t v27 = v15;
          _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid data length. inDataLength:%zu, payloadLength:%hu totalLength=%zu", buf, 0x36u);
        }
      }
    }
    else
    {
      OSStatus appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a2 + 48), *(CMBlockBufferRef *)a1, 8uLL, v6, 0);
      uint64_t v8 = 0;
      if (appended)
      {
        uint64_t v8 = 2147549187;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v13 = VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            RTPUnpackGenericDataPacket_cold_2(v13);
          }
        }
      }
    }
  }
  return v8;
}

uint64_t VCMediaNegotiationBlobV2StreamGroupReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  size_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  BOOL v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_38;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 24) = v19;
        goto LABEL_41;
      case 2u:
        __int16 v24 = objc_alloc_init(VCMediaNegotiationBlobV2StreamGroupPayload);
        [(id)a1 addPayloads:v24];

        if (!PBReaderPlaceMark()
          || (VCMediaNegotiationBlobV2StreamGroupPayloadReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_36;
      case 3u:
        int v25 = objc_alloc_init(VCMediaNegotiationBlobV2StreamGroupStream);
        [(id)a1 addStreams:v25];

        if (!PBReaderPlaceMark()
          || (VCMediaNegotiationBlobV2StreamGroupStreamReadFrom((uint64_t)v25, a2) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_36;
      case 4u:
        __int16 v26 = objc_alloc_init(VCMediaNegotiationBlobV2SettingsU1);

        *(void *)(a1 + 16) = v26;
        if (PBReaderPlaceMark()
          && (VCMediaNegotiationBlobV2SettingsU1ReadFrom((uint64_t)v26, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();
LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

void _VideoPacketBuffer_ClearFrameList(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    do
    {
      uint64_t v5 = *(void *)(v3 + 112);
      *(unsigned char *)(v3 + 161) = _VideoPacketBuffer_IsFrameComplete(v3, 0);
      _VideoPacketBuffer_FreeFrame(a1, (void *)v3);
      uint64_t v3 = v5;
    }
    while (v5);
  }
  *a2 = 0;
}

BOOL _VideoPacketBuffer_IsFrameComplete(uint64_t a1, _WORD *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned __int16 **)(a1 + 96);
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    goto LABEL_7;
  }
  uint64_t v4 = VRTraceErrorLogLevelToCSTR();
  uint64_t v5 = *MEMORY[0x1E4F47A50];
  size_t v6 = *MEMORY[0x1E4F47A50];
  if (!*MEMORY[0x1E4F47A40])
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      _VideoPacketBuffer_IsFrameComplete_cold_4();
      if (!v3) {
        goto LABEL_44;
      }
LABEL_8:
      if (*((_DWORD *)v3 + 2))
      {
        BOOL v7 = (unsigned char *)MEMORY[0x1E4F47A40];
        char v8 = (NSObject **)MEMORY[0x1E4F47A50];
        do
        {
          if (a2)
          {
            int v9 = *v3;
            int v10 = v9 - (unsigned __int16)*a2;
            if (v10)
            {
              if ((unsigned __int16)v10 <= 0x7FFEu) {
                *a2 = v9;
              }
            }
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v11 = VRTraceErrorLogLevelToCSTR();
            unint64_t v12 = *v8;
            char v13 = *v8;
            if (*v7)
            {
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                int v14 = *v3;
                *(_DWORD *)buf = 136315906;
                uint64_t v42 = v11;
                __int16 v43 = 2080;
                int v44 = "_VideoPacketBuffer_IsFrameComplete";
                __int16 v45 = 1024;
                int v46 = 1771;
                __int16 v47 = 1024;
                int v48 = v14;
                _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d Packet seq:%d", buf, 0x22u);
              }
            }
            else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              int v17 = *v3;
              *(_DWORD *)buf = 136315906;
              uint64_t v42 = v11;
              __int16 v43 = 2080;
              int v44 = "_VideoPacketBuffer_IsFrameComplete";
              __int16 v45 = 1024;
              int v46 = 1771;
              __int16 v47 = 1024;
              int v48 = v17;
              _os_log_debug_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d Packet seq:%d", buf, 0x22u);
            }
          }
          if (*((_DWORD *)v3 + 4))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v27 = VRTraceErrorLogLevelToCSTR();
              uint64_t v28 = *v8;
              unint64_t v29 = *v8;
              if (*v7)
              {
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315650;
                  uint64_t v42 = v27;
                  __int16 v43 = 2080;
                  int v44 = "_VideoPacketBuffer_IsFrameComplete";
                  __int16 v45 = 1024;
                  int v46 = 1773;
                  _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d END", buf, 0x1Cu);
                }
              }
              else if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              {
                _VideoPacketBuffer_IsFrameComplete_cold_3();
              }
            }
            return 1;
          }
          int v15 = (unsigned __int16 *)*((void *)v3 + 13);
          if (!v15) {
            goto LABEL_44;
          }
          int v16 = *v3;
          uint64_t v3 = (unsigned __int16 *)*((void *)v3 + 13);
        }
        while (*v15 - v16 < 2);
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (ErrorLogLevelForModule < 8) {
          return 0;
        }
        uint64_t v31 = VRTraceErrorLogLevelToCSTR();
        uint64_t v32 = *v8;
        int v33 = *v8;
        if (!*v7)
        {
          BOOL result = os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG);
          if (!result) {
            return result;
          }
          int v36 = *v15;
          *(_DWORD *)buf = 136316162;
          uint64_t v42 = v31;
          __int16 v43 = 2080;
          int v44 = "_VideoPacketBuffer_IsFrameComplete";
          __int16 v45 = 1024;
          int v46 = 1779;
          __int16 v47 = 1024;
          int v48 = v16;
          __int16 v49 = 1024;
          int v50 = v36;
          _os_log_debug_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d Error! Missing middle frames, beforeSeq:%d afterSeq:%d", buf, 0x28u);
          return 0;
        }
        BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v34) {
          return result;
        }
        int v35 = *v15;
        *(_DWORD *)buf = 136316162;
        uint64_t v42 = v31;
        __int16 v43 = 2080;
        int v44 = "_VideoPacketBuffer_IsFrameComplete";
        __int16 v45 = 1024;
        int v46 = 1779;
        __int16 v47 = 1024;
        int v48 = v16;
        __int16 v49 = 1024;
        int v50 = v35;
        __int16 v24 = "VideoPacketBuffer [%s] %s:%d Error! Missing middle frames, beforeSeq:%d afterSeq:%d";
        int v25 = v32;
        uint32_t v26 = 40;
        goto LABEL_48;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v18 = VRTraceErrorLogLevelToCSTR();
        uint64_t v19 = *MEMORY[0x1E4F47A50];
        uint64_t v20 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          BOOL result = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
          if (!result) {
            return result;
          }
          _VideoPacketBuffer_IsFrameComplete_cold_2();
          return 0;
        }
        BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v21) {
          return result;
        }
        int v23 = *v3;
        *(_DWORD *)buf = 136315906;
        uint64_t v42 = v18;
        __int16 v43 = 2080;
        int v44 = "_VideoPacketBuffer_IsFrameComplete";
        __int16 v45 = 1024;
        int v46 = 1763;
        __int16 v47 = 1024;
        int v48 = v23;
        __int16 v24 = "VideoPacketBuffer [%s] %s:%d Error! Missing inital frames, seq:%d";
        int v25 = v19;
        uint32_t v26 = 34;
        goto LABEL_48;
      }
      return 0;
    }
LABEL_7:
    if (!v3) {
      goto LABEL_44;
    }
    goto LABEL_8;
  }
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_7;
  }
  *(_DWORD *)buf = 136315650;
  uint64_t v42 = v4;
  __int16 v43 = 2080;
  int v44 = "_VideoPacketBuffer_IsFrameComplete";
  __int16 v45 = 1024;
  int v46 = 1761;
  _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d BEGIN", buf, 0x1Cu);
  if (v3) {
    goto LABEL_8;
  }
LABEL_44:
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    return 0;
  }
  uint64_t v37 = VRTraceErrorLogLevelToCSTR();
  int v38 = *MEMORY[0x1E4F47A50];
  __int16 v39 = *MEMORY[0x1E4F47A50];
  if (*MEMORY[0x1E4F47A40])
  {
    BOOL v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v40) {
      return result;
    }
    *(_DWORD *)buf = 136315650;
    uint64_t v42 = v37;
    __int16 v43 = 2080;
    int v44 = "_VideoPacketBuffer_IsFrameComplete";
    __int16 v45 = 1024;
    int v46 = 1783;
    __int16 v24 = "VideoPacketBuffer [%s] %s:%d Error! Missing end of frame";
    int v25 = v38;
    uint32_t v26 = 28;
LABEL_48:
    _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, v24, buf, v26);
    return 0;
  }
  BOOL result = os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    _VideoPacketBuffer_IsFrameComplete_cold_1();
    return 0;
  }
  return result;
}

void _VideoPacketBuffer_FreeFrame(uint64_t a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (OSQueueHead **)(a1 + 146024);
  uint64_t v4 = (void *)a2[12];
  char v5 = *((unsigned char *)a2 + 161);
  if (v5)
  {
    size_t v6 = *(void (**)(uint64_t, _DWORD *))(a1 + 272);
    if (v6)
    {
      __int16 v7 = *(unsigned __int8 *)(a1 + 240);
      char v8 = *((unsigned char *)a2 + 152);
      if (v8) {
        char v8 = *((unsigned char *)a2 + 153) == 0;
      }
      int v9 = *((_DWORD *)a2 + 3);
      char v10 = *((unsigned char *)a2 + 120);
      char v11 = *((unsigned char *)a2 + 149);
      __int16 v12 = *((_WORD *)a2 + 75);
      uint64_t v13 = a2[3];
      if (*(unsigned char *)(a1 + 240))
      {
        __int16 v7 = *((_WORD *)a2 + 73);
        char v14 = *((unsigned char *)a2 + 148);
      }
      else
      {
        char v14 = 0;
      }
      uint64_t v15 = *(void *)(a1 + 264);
      v18[0] = *(_DWORD *)a2;
      v18[1] = 0;
      v18[2] = v9;
      __int16 v19 = 0;
      char v20 = v10;
      char v21 = 0;
      __int16 v22 = v7;
      char v23 = v14;
      uint64_t v25 = 0;
      uint64_t v24 = 0;
      int v26 = 0;
      char v27 = v11;
      __int16 v28 = v12;
      int v29 = 0;
      __int16 v30 = 0;
      uint64_t v31 = v13;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      char v34 = v8;
      __int16 v35 = 0;
      char v36 = v5;
      uint64_t v38 = 0;
      uint64_t v37 = 0;
      int v39 = 0;
      v6(v15, v18);
    }
  }
  VCBlockBuffer_Clear((uint64_t)(a2 + 9));
  VCMemoryPool_Free(*v3, a2);
  if (v4)
  {
    do
    {
      int v16 = (void *)v4[13];
      VCBlockBuffer_Clear((uint64_t)(v4 + 15));
      int v17 = v3[1];
      if (v17) {
        VCMemoryPool_Free(v17, v4);
      }
      uint64_t v4 = v16;
    }
    while (v16);
  }
}

unsigned __int16 *VideoPacketBuffer_Create(void *a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = malloc_type_calloc(1uLL, 0x23AC0uLL, 0x10F0040CC05F6CAuLL);
  uint64_t v3 = (unsigned __int16 *)v2;
  if (!v2) {
    return v3;
  }
  uint64_t v4 = v2 + 18242;
  memcpy(v2, a1, 0x168uLL);
  *((void *)v3 + 18251) = a1[2];
  if (*((_DWORD *)v3 + 56))
  {
    *((void *)v3 + 18250) = 0x10000;
    char v5 = malloc_type_calloc(1uLL, 0x2000uLL, 0x100004077774924uLL);
  }
  else
  {
    char v5 = 0;
  }
  *((void *)v3 + 18249) = v5;
  pthread_mutex_init((pthread_mutex_t *)(v3 + 180), 0);
  int v6 = *v3;
  int v7 = *((_DWORD *)v3 + 1);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    int v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VideoPacketBuffer_Reset";
      __int16 v29 = 1024;
      int v30 = 514;
      __int16 v31 = 2048;
      uint64_t v32 = v3;
      __int16 v33 = 1024;
      int v34 = v6;
      __int16 v35 = 1024;
      int v36 = v7;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] wFirstSeqNumber:%d, dwFirstTimestamp=%d", buf, 0x32u);
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 180));
  _VideoPacketBuffer_FreeAllFrames((uint64_t)v3);
  *((void *)v3 + 18243) = 0;
  *((_DWORD *)v3 + 36493) = 0;
  *((_DWORD *)v3 + 106) = v7 - 1;
  v3[214] = v6 - 1;
  double v10 = micro();
  uint64_t v11 = 0;
  *((double *)v3 + 55) = v10;
  *((double *)v3 + 56) = v10;
  *uint64_t v4 = 0;
  *((unsigned char *)v3 + 146080) = 0;
  *((void *)v3 + 18247) = 0;
  *((unsigned char *)v3 + 145984) = 0;
  v3[216] = 0;
  *((void *)v3 + 57) = 0x3FD0000000000000;
  do
  {
    VideoPacketBuffer_ResetBurstLossStatistics((char *)&v3[v11 + 21348]);
    v11 += 400;
  }
  while (v11 != 51200);
  int v17 = (FILE **)*((void *)v3 + 18251);
  if (v17) {
    VRDump_AddEvent(v17, 3u, 0, v12, v13, v14, v15, v16, v26);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 180));
  *((void *)v3 + 18253) = VCMemoryPool_Create(0xB0uLL);
  *((void *)v3 + 18254) = VCMemoryPool_Create(0x90uLL);
  uint64_t v18 = CMMemoryPoolCreate(0);
  *((void *)v3 + 18255) = v18;
  if (!v18)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_Create_cold_1();
      }
    }
    goto LABEL_56;
  }
  if (*((void *)v3 + 29))
  {
    *((void *)v3 + 18256) = CFRetain(*((CFTypeRef *)v3 + 29));
    *((void *)v3 + 18258) = CFRetain(*((CFTypeRef *)v3 + 29));
    *((void *)v3 + 18257) = CFRetain(*((CFTypeRef *)v3 + 29));
    *((void *)v3 + 18259) = CFRetain(*((CFTypeRef *)v3 + 29));
    return v3;
  }
  CFAllocatorRef Allocator = CMMemoryPoolGetAllocator(v18);
  *((void *)v3 + 18256) = Allocator;
  if (!Allocator)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_Create_cold_2();
      }
    }
    goto LABEL_56;
  }
  CFRetain(Allocator);
  *(_OWORD *)buf = xmmword_1E259E490;
  CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (VCAllocatorMultiQueue_Create((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (uint64_t)"VideoPacketBufferBlockBufferAllocator", 2u, (unint64_t *)buf, (CFAllocatorRef *)v3 + 18257))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_Create_cold_9();
      }
    }
    goto LABEL_56;
  }
  if (VCAllocatorFirstCome_Create(v21, (uint64_t)"VPBSampleBufferAllocator", (CFAllocatorRef *)v3 + 18258))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_Create_cold_8();
      }
    }
    goto LABEL_56;
  }
  if (VCUseFigMemoryPoolForDataBlockBuffer())
  {
    __int16 v22 = CMMemoryPoolCreate(0);
    *((void *)v3 + 18263) = v22;
    if (v22)
    {
      CFAllocatorRef v23 = CMMemoryPoolGetAllocator(v22);
      *((void *)v3 + 18259) = v23;
      if (v23)
      {
        CFRetain(v23);
        goto LABEL_24;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
      {
        VRTraceErrorLogLevelToCSTR();
        if (VRTraceIsOSFaultDisabled())
        {
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoPacketBuffer_Create_cold_5();
          }
        }
        else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
        {
          VideoPacketBuffer_Create_cold_6();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
    {
      VRTraceErrorLogLevelToCSTR();
      if (VRTraceIsOSFaultDisabled())
      {
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoPacketBuffer_Create_cold_3();
        }
      }
      else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
      {
        VideoPacketBuffer_Create_cold_4();
      }
    }
LABEL_56:
    VideoPacketBuffer_Destroy((uint64_t)v3);
    return 0;
  }
  unint64_t v27 = 6;
  if (VCAllocatorMultiQueue_Create(v21, (uint64_t)"VideoPacketBufferSliceHeaderAllocator", 1u, &v27, (CFAllocatorRef *)v3 + 18259))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_Create_cold_7();
      }
    }
    goto LABEL_56;
  }
LABEL_24:
  if (*((unsigned char *)v3 + 280))
  {
    uint64_t v24 = (const void *)*((void *)v3 + 18262);
    uint64_t v25 = (const void *)*((void *)v3 + 36);
    *((void *)v3 + 18262) = v25;
    if (v25) {
      CFRetain(v25);
    }
    if (v24) {
      CFRelease(v24);
    }
  }
  return v3;
}

void VideoPacketBuffer_Destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = a1 + 145992;
    uint64_t v3 = (pthread_mutex_t *)(a1 + 360);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
    if (*(void *)v2)
    {
      free(*(void **)v2);
      *(void *)uint64_t v2 = 0;
    }
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    _VideoPacketBuffer_FreeAllFrames(a1);
    uint64_t v4 = *(OSQueueHead **)(v2 + 32);
    if (v4)
    {
      VCMemoryPool_Destroy(v4);
      *(void *)(v2 + 32) = 0;
    }
    char v5 = *(OSQueueHead **)(v2 + 40);
    if (v5)
    {
      VCMemoryPool_Destroy(v5);
      *(void *)(v2 + 40) = 0;
    }
    int v6 = *(const void **)(v2 + 104);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v2 + 104) = 0;
    }
    int v7 = *(const void **)(v2 + 56);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v2 + 56) = 0;
    }
    uint64_t v8 = *(OpaqueCMMemoryPool **)(v2 + 48);
    if (v8)
    {
      CMMemoryPoolInvalidate(v8);
      int v9 = *(const void **)(v2 + 48);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(v2 + 48) = 0;
      }
    }
    double v10 = *(const void **)(v2 + 64);
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = *(const void **)(v2 + 72);
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = *(const void **)(v2 + 80);
    if (v12) {
      CFRelease(v12);
    }
    uint64_t v13 = *(OpaqueCMMemoryPool **)(v2 + 112);
    if (v13)
    {
      CMMemoryPoolInvalidate(v13);
      uint64_t v14 = *(const void **)(v2 + 112);
      if (v14)
      {
        CFRelease(v14);
        *(void *)(v2 + 112) = 0;
      }
    }
    pthread_mutex_unlock(v3);
    pthread_mutex_destroy(v3);
    free((void *)a1);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_Destroy_cold_1();
    }
  }
}

void _VideoPacketBuffer_FreeAllFrames(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(a1 + 145920);
  _VideoPacketBuffer_ClearFrameList(a1, (uint64_t *)(a1 + 145904));
  _VideoPacketBuffer_ClearFrameList(a1, (uint64_t *)(a1 + 145912));
  *uint64_t v2 = 0;
  v2[12] = 0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315906;
      uint64_t v6 = v3;
      __int16 v7 = 2080;
      uint64_t v8 = "_VideoPacketBuffer_FreeAllFrames";
      __int16 v9 = 1024;
      int v10 = 346;
      __int16 v11 = 2048;
      uint64_t v12 = a1;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Freed all frames", (uint8_t *)&v5, 0x26u);
    }
  }
}

void VideoPacketBuffer_NeedRefreshFrame(uint64_t a1, int a2, int a3, unsigned int a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v8 = a1 + 145944;
    __int16 v9 = (pthread_mutex_t *)(a1 + 360);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
    BOOL v11 = a4 == 27 || a4 - 17 < 2;
    if (*(_DWORD *)(v8 + 36)) {
      BOOL v12 = a4 > 0x1B;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12 || ((1 << a4) & 0x8060000) == 0 || (a2 & ~a3) == 0)
    {
      _VideoPacketBuffer_FreeAllFrames(a1);
      *(void *)uint64_t v8 = 0;
      if (a4 == 27) {
        int v15 = *(_DWORD *)(v8 + 28);
      }
      else {
        int v15 = 0;
      }
      *(_DWORD *)(v8 + 28) = v15;
      *(unsigned char *)(v8 + 40) = v11;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        int v17 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = kVCKeyFrameRequestReasonStrings[a4];
          int v19 = *(unsigned __int8 *)(v8 + 40);
          int v22 = 136316930;
          uint64_t v23 = v16;
          __int16 v24 = 2080;
          uint64_t v25 = "VideoPacketBuffer_NeedRefreshFrame";
          __int16 v26 = 1024;
          int v27 = 496;
          __int16 v28 = 2048;
          uint64_t v29 = a1;
          __int16 v30 = 1024;
          int v31 = a2;
          __int16 v32 = 2080;
          __int16 v33 = v18;
          __int16 v34 = 1024;
          int v35 = a3;
          __int16 v36 = 1024;
          int v37 = v19;
          _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] needIntraframe=%d reason=%s, needImageDescription=%d, isDecoderOutOfSync=%d", (uint8_t *)&v22, 0x42u);
        }
      }
      if (a2)
      {
        *(_DWORD *)(v8 + 36) = 1;
        *(_DWORD *)(v8 + 44) = a4;
      }
      if (a3) {
        *(_DWORD *)(v8 + 32) = 0;
      }
      pthread_mutex_unlock(v9);
    }
    else
    {
      pthread_mutex_unlock(v9);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v20 = VRTraceErrorLogLevelToCSTR();
        CFAllocatorRef v21 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v22 = 136315906;
          uint64_t v23 = v20;
          __int16 v24 = 2080;
          uint64_t v25 = "VideoPacketBuffer_NeedRefreshFrame";
          __int16 v26 = 1024;
          int v27 = 486;
          __int16 v28 = 2048;
          uint64_t v29 = a1;
          _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Already in need refresh state, no need to clear buffers again.", (uint8_t *)&v22, 0x26u);
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_NeedRefreshFrame_cold_1();
    }
  }
}

void VideoPacketBuffer_GetCachedBurstLossStatistics(uint64_t a1, void *__dst)
{
  if (a1 && __dst)
  {
    memcpy(__dst, (const void *)(a1 + 145096), 0x320uLL);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_GetCachedBurstLossStatistics_cold_1();
    }
  }
}

void VideoPacketBuffer_ResetBurstLossStatistics(char *a1)
{
  if (a1)
  {
    bzero(a1, 0x320uLL);
    for (uint64_t i = 0; i != 768; i += 6)
      *(_DWORD *)&a1[i + 34] = 524296;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_ResetBurstLossStatistics_cold_1();
    }
  }
}

void _VideoPacketBuffer_ProcessFrameStats(uint64_t a1, double a2)
{
  uint64_t v3 = 0;
  char v4 = 0;
  __int16 v5 = 0;
  __int16 v6 = 0;
  LOWORD(v7) = 0;
  unsigned __int16 v8 = 0;
  __int16 v9 = 0;
  unsigned __int16 v10 = 0;
  unsigned int v11 = 0;
  int v12 = 0;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a1 + 145096;
  uint64_t v14 = (void *)(a1 + 42720);
  unsigned int v15 = *(_DWORD *)(a1 + 145896);
  float v16 = *(float *)(a1 + 356);
  uint64_t v17 = a1 + 1076;
  uint64_t v18 = a1 + 21884;
  double v19 = 0.0;
  float v20 = 0.0;
  int v21 = -1;
  do
  {
    unsigned int v22 = *((unsigned __int16 *)v14 - 7);
    int v23 = *((_DWORD *)v14 - 6);
    unsigned int v24 = *((_DWORD *)v14 - 5);
    if (v16 == 0.0) {
      double v25 = *(float *)(a1 + 352);
    }
    else {
      double v25 = *(double *)(a1 + 456) * v16;
    }
    double v26 = *(double *)v14;
    double v27 = fmin(v25, 0.15);
    if (*((_WORD *)v14 - 7)) {
      BOOL v28 = v23 == -1;
    }
    else {
      BOOL v28 = 1;
    }
    if (!v28 && v24 <= v15 && a2 - *(double *)v14 > v27)
    {
      unsigned int v31 = *((unsigned __int16 *)v14 - 5);
      float v32 = (double)v31 / (double)v22;
      if (v20 <= v32)
      {
        if (v22 >= 0x66) {
          unsigned int v33 = 102;
        }
        else {
          unsigned int v33 = *((unsigned __int16 *)v14 - 7);
        }
        if (v31 >= v33) {
          unsigned int v34 = v33;
        }
        else {
          unsigned int v34 = *((unsigned __int16 *)v14 - 5);
        }
        int v35 = (_WORD *)(v17 + 204 * v33 + 2 * v34);
        int v36 = (unsigned __int16)*v35;
        if (v36 != 0xFFFF) {
          *int v35 = v36 + 1;
        }
        if (*((unsigned __int16 *)v14 - 8) <= 0x66u) {
          unsigned int v37 = *((_WORD *)v14 - 8);
        }
        else {
          unsigned int v37 = 102;
        }
        unsigned int v7 = *((unsigned __int16 *)v14 - 4);
        if (v37 >= v7) {
          char v38 = *((_WORD *)v14 - 4);
        }
        else {
          char v38 = v37;
        }
        int v39 = (_WORD *)(v18 + 204 * (v37 + v33) + 2 * (v38 + v34));
        int v40 = (unsigned __int16)*v39;
        if (v40 == 0xFFFF)
        {
          unsigned __int16 v8 = v31;
          unsigned __int16 v10 = v22;
        }
        else
        {
          *int v39 = v40 + 1;
          unsigned __int16 v10 = *((_WORD *)v14 - 7);
          unsigned __int16 v8 = *((_WORD *)v14 - 5);
          LOWORD(v7) = *((_WORD *)v14 - 4);
        }
        __int16 v9 = *((_WORD *)v14 - 6);
        char v4 = *((unsigned char *)v14 - 2);
        int v12 = v23;
        unsigned int v11 = v24;
        __int16 v6 = *((_WORD *)v14 - 3);
        double v19 = v26;
        float v20 = (double)v31 / (double)v22;
        int v21 = v3;
        __int16 v5 = *((_WORD *)v14 - 2);
      }
      *((_DWORD *)v14 - 6) = -1;
    }
    ++v3;
    v14 += 100;
  }
  while (v3 != 128);
  if (v21 != -1)
  {
    unsigned __int16 v46 = v8;
    uint64_t v47 = v13;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v44 = VRTraceErrorLogLevelToCSTR();
      __int16 v41 = *MEMORY[0x1E4F47A50];
      log = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          int v42 = *(_DWORD *)(v47 + 800);
          *(_DWORD *)buf = 136317954;
          uint64_t v49 = v44;
          __int16 v50 = 2080;
          uint64_t v51 = "_VideoPacketBuffer_ProcessFrameStats";
          __int16 v52 = 1024;
          int v53 = 708;
          __int16 v54 = 2048;
          uint64_t v55 = a1;
          __int16 v56 = 1024;
          int v57 = v21;
          __int16 v58 = 1024;
          int v59 = v12;
          __int16 v60 = 1024;
          int v61 = v42;
          __int16 v62 = 1024;
          unsigned int v63 = v11;
          __int16 v64 = 1024;
          int v65 = v10;
          __int16 v66 = 1024;
          int v67 = v46;
          __int16 v68 = 2048;
          double v69 = v20;
          __int16 v70 = 2048;
          double v71 = v19;
          _os_log_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Feedback computed maxLossFrameIndex=%d frameSequenceNumber=%d playoutRTPTimestamp=%u rtpTimestamp=%u frameSize=%u VideoPacketsLostPerFrame=%u lossRatio=%2.2f arrivalTime=%2.3f", buf, 0x5Eu);
        }
      }
      else if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        int v43 = *(_DWORD *)(v47 + 800);
        *(_DWORD *)buf = 136317954;
        uint64_t v49 = v44;
        __int16 v50 = 2080;
        uint64_t v51 = "_VideoPacketBuffer_ProcessFrameStats";
        __int16 v52 = 1024;
        int v53 = 708;
        __int16 v54 = 2048;
        uint64_t v55 = a1;
        __int16 v56 = 1024;
        int v57 = v21;
        __int16 v58 = 1024;
        int v59 = v12;
        __int16 v60 = 1024;
        int v61 = v43;
        __int16 v62 = 1024;
        unsigned int v63 = v11;
        __int16 v64 = 1024;
        int v65 = v10;
        __int16 v66 = 1024;
        int v67 = v46;
        __int16 v68 = 2048;
        double v69 = v20;
        __int16 v70 = 2048;
        double v71 = v19;
        _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Feedback computed maxLossFrameIndex=%d frameSequenceNumber=%d playoutRTPTimestamp=%u rtpTimestamp=%u frameSize=%u VideoPacketsLostPerFrame=%u lossRatio=%2.2f arrivalTime=%2.3f", buf, 0x5Eu);
      }
    }
    *(_WORD *)(v47 + 10) = v10;
    *(_WORD *)(v47 + 12) = v9;
    *(_DWORD *)uint64_t v47 = v12;
    *(_DWORD *)(v47 + 4) = v11;
    *(unsigned char *)(v47 + 22) = v4;
    *(double *)(v47 + 24) = v19;
    *(_WORD *)(v47 + 14) = v46;
    *(_WORD *)(v47 + 16) = v7;
    *(_WORD *)(v47 + 18) = v6;
    *(_WORD *)(v47 + 20) = v5;
  }
}

void VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics(uint64_t a1, unsigned int a2, unsigned __int16 *a3, int a4, int a5, char a6, double a7)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a3)
    {
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v14 = (unsigned __int16 *)(a1 + 800 * a2 + 42696);
        bzero(v14, 0x320uLL);
        unsigned int v15 = *a3;
        v14[5] = v15;
        float v16 = v14 + 5;
        v14[4] = a3[1];
        *(_DWORD *)uint64_t v14 = a4;
        *((_DWORD *)v14 + 1) = a5;
        *((unsigned char *)v14 + 22) = a6;
        *((double *)v14 + 3) = a7;
        if (v15 < 2) {
          return;
        }
        unsigned int v17 = a2;
        int v18 = v15 - a3[2];
        if (v18 < 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v19 = VRTraceErrorLogLevelToCSTR();
            float v20 = *MEMORY[0x1E4F47A50];
            int v21 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              int v18 = 0;
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_13;
              }
              int v49 = 136315650;
              uint64_t v50 = v19;
              __int16 v51 = 2080;
              __int16 v52 = "VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics";
              __int16 v53 = 1024;
              int v54 = 754;
              _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d Received more video packets than expected.", (uint8_t *)&v49, 0x1Cu);
            }
            else if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_4();
            }
          }
          int v18 = 0;
        }
LABEL_13:
        unsigned int v22 = (_WORD *)(a1 + 800 * v17 + 42710);
        *unsigned int v22 = v18;
        int v23 = a3[1] - a3[3];
        if (v23 >= 0) {
          goto LABEL_21;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v24 = VRTraceErrorLogLevelToCSTR();
          double v25 = *MEMORY[0x1E4F47A50];
          double v26 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            int v23 = 0;
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_21;
            }
            int v49 = 136315650;
            uint64_t v50 = v24;
            __int16 v51 = 2080;
            __int16 v52 = "VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics";
            __int16 v53 = 1024;
            int v54 = 761;
            _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d Received more parity packets than expected.", (uint8_t *)&v49, 0x1Cu);
          }
          else if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_3();
          }
        }
        int v23 = 0;
LABEL_21:
        double v27 = (_WORD *)(a1 + 800 * v17 + 42712);
        *double v27 = v23;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v28 = VRTraceErrorLogLevelToCSTR();
          uint64_t v29 = *MEMORY[0x1E4F47A50];
          __int16 v30 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              int v31 = *(_DWORD *)v14;
              int v32 = *v16;
              int v33 = (unsigned __int16)*v22;
              int v34 = (unsigned __int16)*v27;
              int v35 = *a3;
              int v36 = a3[1];
              int v37 = a3[2];
              int v38 = a3[3];
              int v49 = 136318210;
              uint64_t v50 = v28;
              __int16 v51 = 2080;
              __int16 v52 = "VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics";
              __int16 v53 = 1024;
              int v54 = 766;
              __int16 v55 = 1024;
              *(_DWORD *)__int16 v56 = v31;
              *(_WORD *)&v56[4] = 1024;
              *(_DWORD *)&v56[6] = v32;
              *(_WORD *)int v57 = 1024;
              *(_DWORD *)&v57[2] = v33;
              __int16 v58 = 1024;
              int v59 = v34;
              __int16 v60 = 1024;
              int v61 = v18;
              __int16 v62 = 1024;
              int v63 = v23;
              __int16 v64 = 1024;
              int v65 = v35;
              __int16 v66 = 1024;
              int v67 = v36;
              __int16 v68 = 1024;
              int v69 = v37;
              __int16 v70 = 1024;
              int v71 = v38;
              _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d frameSequenceNumber=%d size=%d maxVideoPacketsLostPerFrame=%d, maxParityPacketsLostPerFrame=%d, videoPacketsLost=%d, parityPacketsLost=%d, videoPacketsExpected=%d, parityPacketsExpected=%d, videoPacketsReceived=%d, parityPacketsReceived=%d", (uint8_t *)&v49, 0x58u);
            }
          }
          else if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            int v39 = *(_DWORD *)v14;
            int v40 = *v16;
            int v41 = (unsigned __int16)*v22;
            int v42 = (unsigned __int16)*v27;
            int v43 = *a3;
            int v44 = a3[1];
            int v45 = a3[2];
            int v46 = a3[3];
            int v49 = 136318210;
            uint64_t v50 = v28;
            __int16 v51 = 2080;
            __int16 v52 = "VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics";
            __int16 v53 = 1024;
            int v54 = 766;
            __int16 v55 = 1024;
            *(_DWORD *)__int16 v56 = v39;
            *(_WORD *)&v56[4] = 1024;
            *(_DWORD *)&v56[6] = v40;
            *(_WORD *)int v57 = 1024;
            *(_DWORD *)&v57[2] = v41;
            __int16 v58 = 1024;
            int v59 = v42;
            __int16 v60 = 1024;
            int v61 = v18;
            __int16 v62 = 1024;
            int v63 = v23;
            __int16 v64 = 1024;
            int v65 = v43;
            __int16 v66 = 1024;
            int v67 = v44;
            __int16 v68 = 1024;
            int v69 = v45;
            __int16 v70 = 1024;
            int v71 = v46;
            _os_log_debug_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d frameSequenceNumber=%d size=%d maxVideoPacketsLostPerFrame=%d, maxParityPacketsLostPerFrame=%d, videoPacketsLost=%d, parityPacketsLost=%d, videoPacketsExpected=%d, parityPacketsExpected=%d, videoPacketsReceived=%d, parityPacketsReceived=%d", (uint8_t *)&v49, 0x58u);
          }
        }
        return;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v47 = VRTraceErrorLogLevelToCSTR();
        int v48 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v49 = 136316162;
          uint64_t v50 = v47;
          __int16 v51 = 2080;
          __int16 v52 = "VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics";
          __int16 v53 = 1024;
          int v54 = 737;
          __int16 v55 = 2048;
          *(void *)__int16 v56 = a1;
          *(_WORD *)&v56[8] = 1024;
          *(_DWORD *)int v57 = a2;
          _os_log_error_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d Invalid frameIndex for updating max frame burst loss for VideoPacketBuffer=%p, frameIndex=%d", (uint8_t *)&v49, 0x2Cu);
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_1();
    }
  }
}

void VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((int)a2 >= 9)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        int v12 = *MEMORY[0x1E4F47A50];
        uint64_t v13 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            int v25 = 136315650;
            uint64_t v26 = v11;
            __int16 v27 = 2080;
            uint64_t v28 = "VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics";
            __int16 v29 = 1024;
            int v30 = 780;
            _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d Lost more video symbols than expected.", (uint8_t *)&v25, 0x1Cu);
          }
        }
        else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics_cold_2();
        }
      }
      a2 = 8;
    }
    int v14 = FECUtil_ConvertNumberOfSymbolsToPackets(a2, a4);
    int v15 = v14;
    uint64_t v16 = a1 + 6 * a6;
    int v19 = *(unsigned __int16 *)(v16 + 34);
    unsigned int v17 = (_WORD *)(v16 + 34);
    int v18 = v19;
    if (v19 == 8 || v14 <= v18)
    {
      uint64_t v21 = a1 + 6 * a6;
      *(_WORD *)(v21 + 32) = a5;
      *unsigned int v17 = v14;
      *(_WORD *)(v21 + 36) = a3;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v22 = VRTraceErrorLogLevelToCSTR();
      int v23 = *MEMORY[0x1E4F47A50];
      uint64_t v24 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          int v25 = 136316930;
          uint64_t v26 = v22;
          __int16 v27 = 2080;
          uint64_t v28 = "VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics";
          __int16 v29 = 1024;
          int v30 = 793;
          __int16 v31 = 1024;
          int v32 = a6;
          __int16 v33 = 1024;
          int v34 = v15;
          __int16 v35 = 1024;
          int v36 = a3;
          __int16 v37 = 1024;
          unsigned int v38 = a4;
          __int16 v39 = 1024;
          int v40 = a5;
          _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d groupID=%d videoPacketsLost=%d parityPacketsLostPerGroup=%d numberOfSymbolsPerPacket=%d numberOfDataPackets=%d", (uint8_t *)&v25, 0x3Au);
        }
      }
      else if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        int v25 = 136316930;
        uint64_t v26 = v22;
        __int16 v27 = 2080;
        uint64_t v28 = "VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics";
        __int16 v29 = 1024;
        int v30 = 793;
        __int16 v31 = 1024;
        int v32 = a6;
        __int16 v33 = 1024;
        int v34 = v15;
        __int16 v35 = 1024;
        int v36 = a3;
        __int16 v37 = 1024;
        unsigned int v38 = a4;
        __int16 v39 = 1024;
        int v40 = a5;
        _os_log_debug_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d groupID=%d videoPacketsLost=%d parityPacketsLostPerGroup=%d numberOfSymbolsPerPacket=%d numberOfDataPackets=%d", (uint8_t *)&v25, 0x3Au);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics_cold_1();
    }
  }
}

void VideoPacketBuffer_GetStatistics(uint64_t a1, void *__dst)
{
  if (a1)
  {
    if (__dst)
    {
      memcpy(__dst, (const void *)(a1 + 464), 0xA4F8uLL);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_GetStatistics_cold_1();
    }
  }
}

void VideoPacketBuffer_ResetStatistics(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)(a1 + 464);
    bzero(v2, 0xA4F8uLL);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_ResetStatistics_cold_1();
    }
  }
}

uint64_t VideoPacketBuffer_AddPacket(uint64_t a1, int *a2, int a3, int a4, char a5)
{
  uint64_t v225 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      unsigned int v17 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VideoPacketBuffer_AddPacket";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1444;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = a4;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = a3;
        _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null, isBaseLayerStream=%d, isTemporalScaledStream=%d", buf, 0x28u);
      }
    }
    return 0;
  }
  if (!*((void *)a2 + 7))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_AddPacket_cold_1();
      }
    }
    return 0;
  }
  unsigned __int16 v10 = (int *)*((void *)a2 + 8);
  int v11 = *v10;
  int v214 = v10[1];
  int v215 = *((unsigned __int16 *)v10 + 6);
  uint64_t v216 = v10[4];
  int v12 = *((unsigned __int8 *)v10 + 81);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    int v14 = *MEMORY[0x1E4F47A50];
    int v15 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VideoPacketBuffer_AddPacket";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1466;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v12;
        _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d [Media Priority] Received video priority=%u", buf, 0x22u);
      }
    }
    else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      VideoPacketBuffer_AddPacket_cold_3();
    }
  }
  char v206 = v12;
  int v208 = a3;
  unsigned int v18 = *((unsigned __int8 *)v10 + 80);
  int v19 = *((unsigned __int16 *)v10 + 12);
  int v207 = *((unsigned __int8 *)v10 + 26);
  if (v18 < 0xD)
  {
    unsigned int v210 = *((unsigned __int8 *)v10 + 80);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v20 = VRTraceErrorLogLevelToCSTR();
      uint64_t v21 = *MEMORY[0x1E4F47A50];
      unsigned int v210 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VideoPacketBuffer_AddPacket";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&buf[24] = 1474;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v18;
      _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d Invalid Stream Id Count %d", buf, 0x22u);
    }
    unsigned int v210 = 0;
  }
LABEL_21:
  double v22 = micro();
  int v23 = (_DWORD *)*((void *)a2 + 7);
  if (v23)
  {
    if (*v23)
    {
      unsigned int v24 = v23[2];
      if (v24 >> 30) {
        int v25 = 0x400000;
      }
      else {
        int v25 = 0x800000;
      }
      BOOL v26 = (v25 & v24) == 0;
    }
    else
    {
      BOOL v26 = 0;
    }
    BOOL v27 = *v23 != 0;
  }
  else
  {
    BOOL v26 = 0;
    BOOL v27 = 0;
  }
  unsigned int v28 = v23[2];
  if (v28 >> 30) {
    int v29 = (v28 >> 23) & 0xF;
  }
  else {
    int v29 = HIBYTE(v28) & 7;
  }
  double v30 = (double)(v23[2] & 0x3FF) / 100.0;
  float v31 = v30;
  if (v27)
  {
    if (v28 >> 30)
    {
      float v33 = v30;
      unsigned int v213 = FECUtil_FECRatioToLevelofProtection(v33);
      BOOL v32 = *((unsigned __int16 *)a2 + 24) == 1;
    }
    else
    {
      BOOL v32 = 0;
      unsigned int v213 = 2 * (v210 > 1);
    }
  }
  else
  {
    unsigned int v213 = 0;
    BOOL v32 = 0;
  }
  if ((v214 - 100) > 0x1A || ((1 << (v214 - 100)) & 0x7800401) == 0) {
    return 0;
  }
  BOOL v203 = v32;
  uint64_t v35 = a1 + 145896;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  uint64_t v42 = *(void *)(a1 + 146096);
  if (v42) {
    char v43 = v26;
  }
  else {
    char v43 = 1;
  }
  if ((v43 & 1) == 0)
  {
    *(_OWORD *)buf = xmmword_1E259E4E8;
    *(_OWORD *)&buf[16] = unk_1E259E4F8;
    __int16 v44 = *((_WORD *)v10 + 6);
    buf[16] = *((unsigned char *)v10 + 194);
    int v45 = v10[4];
    *(_DWORD *)buf = v10[5];
    *(_WORD *)&uint8_t buf[4] = v44;
    *(void *)&buf[8] = *((void *)v10 + 4);
    *(_DWORD *)&buf[20] = v45;
    buf[24] = v27;
    *(_WORD *)&buf[26] = *((_WORD *)a2 + 23);
    *(_WORD *)&buf[28] = *((void *)v10 + 14);
    buf[30] = 0;
    buf[31] = a5;
    VCNACKGenerator_AddPacketInfo(v42, (double *)buf, v36, v37, v38, v39, v40, v41);
  }
  int v204 = v11;
  if (v27)
  {
    uint64_t v46 = *(void *)(*((void *)a2 + 2) + 8);
    __int16 v47 = v215;
    uint64_t v48 = a1 + 40 * v213;
    if (v26) {
      int v49 = (void *)(v48 + 488);
    }
    else {
      int v49 = (void *)(v48 + 480);
    }
  }
  else
  {
    uint64_t v46 = *(void *)(*((void *)a2 + 2) + 8);
    __int16 v47 = v215;
    if (*((unsigned char *)a2 + 72)) {
      int v49 = (void *)(a1 + 608);
    }
    else {
      int v49 = (void *)(a1 + 480);
    }
  }
  *v49 += v46;
  if (*((unsigned char *)a2 + 72)) {
    int v50 = 1;
  }
  else {
    int v50 = v26;
  }
  *(double *)(a1 + 448) = v22;
  unsigned int v51 = v216 - *(_DWORD *)(a1 + 424);
  BOOL v52 = v51 > 0x7FFFFFFE;
  BOOL v53 = v51 > 0x7FFFFFFE || v216 == *(_DWORD *)(a1 + 424);
  int v54 = v50 ^ 1;
  __int16 v205 = v50 ^ 1;
  if (!v52) {
    int v54 = 0;
  }
  int v211 = v54;
  int v212 = v50;
  if (!*(void *)(a1 + 146008)) {
    goto LABEL_79;
  }
  uint64_t v55 = *((void *)a2 + 8);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v62 = VRTraceErrorLogLevelToCSTR();
    int v63 = *MEMORY[0x1E4F47A50];
    __int16 v64 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        int v65 = *((unsigned __int16 *)a2 + 23);
        int v66 = *(unsigned __int16 *)(v55 + 12);
        *(_DWORD *)buf = 136317186;
        *(void *)&uint8_t buf[4] = v62;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoPacketBuffer_LogNewPacket";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1370;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a1;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)v218 = v65;
        *(_WORD *)&v218[4] = 1024;
        *(_DWORD *)&v218[6] = v212;
        *(_WORD *)&v218[10] = 1024;
        *(_DWORD *)&v218[12] = v27;
        *(_WORD *)&v218[16] = 1024;
        *(_DWORD *)&v218[18] = v66;
        *(_WORD *)&v218[22] = 1024;
        *(_DWORD *)&v218[24] = v29;
        _os_log_impl(&dword_1E1EA4000, v63, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Add Packet frameSequenceNumber=%d fParityPacket=%d fecProtected=%d seq=%d startPosition=%d", buf, 0x44u);
      }
    }
    else if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      int v199 = *((unsigned __int16 *)a2 + 23);
      int v200 = *(unsigned __int16 *)(v55 + 12);
      *(_DWORD *)buf = 136317186;
      *(void *)&uint8_t buf[4] = v62;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoPacketBuffer_LogNewPacket";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&buf[24] = 1370;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a1;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)v218 = v199;
      *(_WORD *)&v218[4] = 1024;
      *(_DWORD *)&v218[6] = v212;
      *(_WORD *)&v218[10] = 1024;
      *(_DWORD *)&v218[12] = v27;
      *(_WORD *)&v218[16] = 1024;
      *(_DWORD *)&v218[18] = v200;
      *(_WORD *)&v218[22] = 1024;
      *(_DWORD *)&v218[24] = v29;
      _os_log_debug_impl(&dword_1E1EA4000, v63, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Add Packet frameSequenceNumber=%d fParityPacket=%d fecProtected=%d seq=%d startPosition=%d", buf, 0x44u);
    }
  }
  int v67 = v211;
  if (!v211) {
    goto LABEL_76;
  }
  uint64_t v35 = a1 + 145896;
  __int16 v47 = v215;
  if (*(_DWORD *)(a1 + 145980))
  {
    int v67 = 0;
    goto LABEL_77;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v68 = VRTraceErrorLogLevelToCSTR();
    int v69 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v70 = *(_DWORD *)(a1 + 424);
      int v71 = *(_DWORD *)(v55 + 16);
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = v68;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoPacketBuffer_LogNewPacket";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&buf[24] = 1373;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a1;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)v218 = v70;
      *(_WORD *)&v218[4] = 1024;
      *(_DWORD *)&v218[6] = v71;
      _os_log_impl(&dword_1E1EA4000, v69, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Received a packet out of order. lastAssembledTimestamp=%d packetTimestamp=%d", buf, 0x32u);
    }
    int v67 = 1;
LABEL_76:
    __int16 v47 = v215;
    uint64_t v35 = a1 + 145896;
    goto LABEL_77;
  }
  int v67 = 1;
LABEL_77:
  uint64_t v72 = *(FILE ***)(v35 + 112);
  if (v72)
  {
    *(_OWORD *)buf = xmmword_1E259E4A0;
    *(_OWORD *)&buf[16] = unk_1E259E4B0;
    *(void *)buf = *(void *)(v55 + 32);
    HIDWORD(v73) = *(_DWORD *)&buf[4];
    *(_DWORD *)&buf[8] = *(unsigned __int16 *)(v55 + 12);
    LODWORD(v73) = *(_DWORD *)(v55 + 16);
    *(double *)&buf[16] = (double)v73;
    *(_DWORD *)&buf[24] = *(void *)(v55 + 152);
    buf[28] = (a2[10] & 2) != 0;
    *(_DWORD *)&buf[32] = *(unsigned __int16 *)(v55 + 56);
    *(_DWORD *)&buf[36] = 0;
    *(_DWORD *)v218 = 0;
    *(_DWORD *)&v218[4] = v27;
    *(_DWORD *)&v218[8] = v213;
    *(_DWORD *)&v218[12] = 0;
    *(_DWORD *)&v218[16] = *(unsigned __int8 *)(v55 + 194);
    *(_DWORD *)&v218[20] = v53;
    *(_DWORD *)&v218[24] = v67;
    *(_DWORD *)&v218[28] = *(_DWORD *)&v218[16];
    VRDump_AddPacket(v72, (uint64_t)buf, v56, v57, v58, v59, v60, v61);
  }
LABEL_79:
  if (v53)
  {
    __int16 v74 = v47;
    if (*((unsigned char *)a2 + 45)) {
      __int16 v74 = *((_WORD *)a2 + 23);
    }
    if (*(unsigned char *)(a1 + 241))
    {
      uint64_t v75 = 432;
      if (!*((unsigned char *)a2 + 45)) {
        uint64_t v75 = 430;
      }
      if (*(_DWORD *)(v35 + 84) && (unsigned __int16)(v74 - *(_WORD *)(a1 + v75)) <= 0x7FFEu)
      {
        int v76 = v19;
        BOOL v77 = v27;
        BOOL v78 = v53;
        int v202 = v76;
        v79 = (void **)(v35 + 16);
        kdebug_trace();
        _VideoPacketBuffer_CorrectFrameStats(a1, *((unsigned __int16 *)a2 + 23), v212);
        goto LABEL_89;
      }
    }
    int v93 = *(_DWORD *)(a1 + 424);
    uint64_t v94 = (v93 - v216);
    if (v93 == v216) {
      char v95 = 1;
    }
    else {
      char v95 = v212;
    }
    if ((v95 & 1) == 0)
    {
      uint64_t v96 = *(int *)(a1 + 8);
      double v97 = *(double *)(a1 + 440);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v98 = VRTraceErrorLogLevelToCSTR();
        v99 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136317954;
          int v100 = *(_DWORD *)(a1 + 424);
          int v101 = *((unsigned __int16 *)a2 + 23);
          *(void *)&uint8_t buf[4] = v98;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "VideoPacketBuffer_AddPacket";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&buf[24] = 1542;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a1;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)v218 = v27;
          *(_WORD *)&v218[4] = 1024;
          *(_DWORD *)&v218[6] = v216;
          *(_WORD *)&v218[10] = 1024;
          *(_DWORD *)&v218[12] = v100;
          *(_WORD *)&v218[16] = 1024;
          *(_DWORD *)&v218[18] = v215;
          *(_WORD *)&v218[22] = 2048;
          *(double *)&v218[24] = v22 - v97 + (double)(v94 / v96);
          __int16 v219 = 1024;
          int v220 = v101;
          __int16 v221 = 1024;
          int v222 = v208;
          __int16 v223 = 1024;
          int v224 = a4;
          _os_log_impl(&dword_1E1EA4000, v99, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Discarding packet fecProtected=%d TS=%d lastTS=%d seq=%d that arrived late [%f]s frameSequenceNumber=%d isTemporalStreamEnabled=%d isBaseLayerStream=%d", buf, 0x5Au);
        }
      }
    }
    _VideoPacketBuffer_CorrectFrameStats(a1, *((unsigned __int16 *)a2 + 23), v212);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 360));
    return 0;
  }
  int v80 = v19;
  BOOL v77 = v27;
  BOOL v78 = v53;
  int v202 = v80;
  v79 = (void **)(v35 + 8);
LABEL_89:
  v81 = (char *)*v79;
  if (!*v79)
  {
    uint64_t v83 = 0;
    int v103 = 0;
LABEL_125:
    v81 = (char *)VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 146024));
    *(_DWORD *)v81 = v214;
    *(void *)(v81 + 4) = *(void *)a2;
    *((_DWORD *)v81 + 3) = v216;
    *((_DWORD *)v81 + 4) = v10[5];
    *((_DWORD *)v81 + 8) = a2[10];
    v81[36] = *((unsigned char *)a2 + 44);
    v81[149] = *((unsigned char *)a2 + 45);
    *((_WORD *)v81 + 75) = *((_WORD *)a2 + 23);
    unsigned int v104 = *((unsigned __int16 *)a2 + 24);
    *((_WORD *)v81 + 52) = v104;
    *((_WORD *)v81 + 53) = (int)(float)(v31 * (float)v104);
    *((_DWORD *)v81 + 10) = v77;
    *((_WORD *)v81 + 26) = 0;
    v81[55] = v78;
    v81[56] = v211;
    *((_DWORD *)v81 + 15) = 0;
    *((_DWORD *)v81 + 16) = v213;
    v81[120] = v206;
    v81[121] = v210;
    v81[152] = v208;
    v81[153] = a4;
    v81[57] |= *((unsigned char *)v10 + 194);
    *((void *)v81 + 21) = 0;
    memcpy(v81 + 122, v10 + 14, 2 * v210);
    VCBlockBuffer_Copy(*((void *)a2 + 4), (uint64_t)(v81 + 72));
    if (v81[55])
    {
      LODWORD(v105) = *(_DWORD *)(a1 + 145896);
      LODWORD(v106) = *((_DWORD *)v81 + 3);
      _VideoPacketBuffer_StartTrackingEvictedFrameStats(a1, (uint64_t)v81, v22 - ((double)v105 - (double)v106) / (double)*(int *)(a1 + 8));
    }
    *((void *)v81 + 14) = *v79;
    _VideoPacketBuffer_UpdatePreviousFrameSequenceNumber((uint64_t)v81, v83, v103);
    *v79 = v81;
    uint64_t v107 = *(void *)(a1 + 145912);
    do
    {
      uint64_t v108 = v107;
      if (!v107) {
        break;
      }
      uint64_t v107 = *(void *)(v107 + 112);
    }
    while (v107);
    *(void *)(a1 + 145920) = v108;
    if (v78) {
      ++*(_DWORD *)(a1 + 146020);
    }
    else {
      ++*(_DWORD *)(a1 + 146016);
    }
    goto LABEL_133;
  }
  int v82 = *((_DWORD *)v81 + 3);
  if ((v82 - v216) < 0x7FFFFFFF)
  {
    uint64_t v83 = 0;
    goto LABEL_95;
  }
  do
  {
    uint64_t v83 = (uint64_t)v81;
    v81 = (char *)*((void *)v81 + 14);
    if (!v81)
    {
      int v103 = 0;
      v79 = (void **)(v83 + 112);
      goto LABEL_125;
    }
    int v82 = *((_DWORD *)v81 + 3);
  }
  while ((v82 - v216) >= 0x7FFFFFFF);
  v79 = (void **)(v83 + 112);
LABEL_95:
  if (v82 != v216)
  {
    int v103 = 1;
    goto LABEL_125;
  }
  if (!v81[36]) {
    v81[36] = *((unsigned char *)a2 + 44);
  }
  v81[55] = v78;
  v81[56] |= v211;
  v81[57] |= *((unsigned char *)v10 + 194);
  if (*(_DWORD *)v81 == v214) {
    char v84 = 1;
  }
  else {
    char v84 = v212;
  }
  if ((v84 & 1) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
      goto LABEL_228;
    }
    uint64_t v157 = VRTraceErrorLogLevelToCSTR();
    v88 = *MEMORY[0x1E4F47A50];
    v89 = (pthread_mutex_t *)(a1 + 360);
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_227;
    }
    int v158 = *(_DWORD *)v81;
    *(_DWORD *)buf = 136316930;
    *(void *)&uint8_t buf[4] = v157;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "VideoPacketBuffer_AddPacket";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&buf[24] = 1635;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = a1;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)v218 = v215;
    *(_WORD *)&v218[4] = 2048;
    *(void *)&v218[6] = v216;
    *(_WORD *)&v218[14] = 1024;
    *(_DWORD *)&v218[16] = v158;
    *(_WORD *)&v218[20] = 1024;
    *(_DWORD *)&v218[22] = v214;
    v92 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] $ Discarding packet %d, frame %lu.  Packet.payload disagree"
          ", first %d, then %d";
LABEL_226:
    _os_log_impl(&dword_1E1EA4000, v88, OS_LOG_TYPE_DEFAULT, v92, buf, 0x42u);
    goto LABEL_227;
  }
  if (*((_DWORD *)v81 + 1) == *a2) {
    char v85 = 1;
  }
  else {
    char v85 = v212;
  }
  if ((v85 & 1) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
      goto LABEL_228;
    }
    uint64_t v175 = VRTraceErrorLogLevelToCSTR();
    v88 = *MEMORY[0x1E4F47A50];
    v89 = (pthread_mutex_t *)(a1 + 360);
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_227;
    }
    int v176 = *((_DWORD *)v81 + 1);
    int v177 = *a2;
    *(_DWORD *)buf = 136316930;
    *(void *)&uint8_t buf[4] = v175;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "VideoPacketBuffer_AddPacket";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&buf[24] = 1640;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = a1;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)v218 = v215;
    *(_WORD *)&v218[4] = 2048;
    *(void *)&v218[6] = v216;
    *(_WORD *)&v218[14] = 1024;
    *(_DWORD *)&v218[16] = v176;
    *(_WORD *)&v218[20] = 1024;
    *(_DWORD *)&v218[22] = v177;
    v92 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] $ Discarding packet %d, frame %lu.  Packet.srcfmt disagree,"
          " first %d, then %d";
    goto LABEL_226;
  }
  if (*((_DWORD *)v81 + 2) == a2[1]) {
    char v86 = 1;
  }
  else {
    char v86 = v212;
  }
  if ((v86 & 1) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v87 = VRTraceErrorLogLevelToCSTR();
      v88 = *MEMORY[0x1E4F47A50];
      v89 = (pthread_mutex_t *)(a1 + 360);
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v90 = *((_DWORD *)v81 + 2);
        int v91 = a2[1];
        *(_DWORD *)buf = 136316930;
        *(void *)&uint8_t buf[4] = v87;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VideoPacketBuffer_AddPacket";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1645;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a1;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)v218 = v215;
        *(_WORD *)&v218[4] = 2048;
        *(void *)&v218[6] = v216;
        *(_WORD *)&v218[14] = 1024;
        *(_DWORD *)&v218[16] = v90;
        *(_WORD *)&v218[20] = 1024;
        *(_DWORD *)&v218[22] = v91;
        v92 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] $ Discarding packet %d, frame %lu.  Packet.pctype disag"
              "ree, first %d, then %d";
        goto LABEL_226;
      }
LABEL_227:
      uint64_t v102 = 0;
      goto LABEL_221;
    }
LABEL_228:
    uint64_t v102 = 0;
    v89 = (pthread_mutex_t *)(a1 + 360);
    goto LABEL_221;
  }
LABEL_133:
  if (*((unsigned char *)v10 + 194))
  {
    if (*(unsigned char *)(a1 + 242))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v109 = VRTraceErrorLogLevelToCSTR();
        v110 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v111 = v10[5];
          int v112 = *((unsigned __int16 *)v10 + 6);
          uint64_t v113 = *((void *)v10 + 14);
          int v114 = *((unsigned __int8 *)v10 + 194);
          int v115 = *((unsigned __int16 *)v81 + 75);
          *(_DWORD *)buf = 136316930;
          *(void *)&uint8_t buf[4] = v109;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "VideoPacketBuffer_AddPacket";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&buf[24] = 1651;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v111;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v112;
          *(_WORD *)v218 = 1024;
          *(_DWORD *)&v218[2] = v113;
          *(_WORD *)&v218[6] = 1024;
          *(_DWORD *)&v218[8] = v114;
          *(_WORD *)&v218[12] = 1024;
          *(_DWORD *)&v218[14] = v115;
          _os_log_impl(&dword_1E1EA4000, v110, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d Retransmitted packet arrived ssrc=%u seqNum=%u packetLen=%d isRetransmitted=%d frameSequenceNumber=%d", buf, 0x3Au);
        }
      }
    }
  }
  if (v81[54]) {
    BOOL v116 = 1;
  }
  else {
    BOOL v116 = *((unsigned char *)v10 + 40) != 0;
  }
  LODWORD(v117) = v215;
  v81[54] = v116;
  double v118 = *((double *)v10 + 4);
  if (v118 > *((double *)v81 + 3)) {
    *((double *)v81 + 3) = v118;
  }
  if (v207 && *(unsigned char *)(a1 + 240))
  {
    if (v81[148])
    {
      if (*((unsigned __int16 *)v81 + 73) != v202)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v119 = VRTraceErrorLogLevelToCSTR();
          v120 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v201 = *((unsigned __int16 *)v81 + 73);
            *(_DWORD *)buf = 136316418;
            *(void *)&uint8_t buf[4] = v119;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoPacketBuffer_UpdateFrameDecodingOrder";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 1237;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a1;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)v218 = v201;
            *(_WORD *)&v218[4] = 1024;
            *(_DWORD *)&v218[6] = v202;
            _os_log_error_impl(&dword_1E1EA4000, v120, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Decoding order is different within a frame. Previous:%d New:%d", buf, 0x32u);
          }
        }
        *((_WORD *)v81 + 73) = v202;
        LODWORD(v117) = v215;
      }
    }
    else
    {
      *((_WORD *)v81 + 73) = v202;
      v81[148] = 1;
    }
  }
  v122 = v81 + 96;
  v121 = (unsigned __int16 *)*((void *)v81 + 12);
  if (!v121) {
    goto LABEL_186;
  }
  v123 = (_DWORD *)*((void *)a2 + 7);
  while (2)
  {
    int v124 = *v121;
    if (v124 != v117 && (unsigned __int16)(v124 - v117) < 0x7FFFu) {
      goto LABEL_186;
    }
    if (v124 != v117) {
      goto LABEL_185;
    }
    if (v123 && *v123)
    {
      unsigned int v125 = v123[2];
      int v126 = HIWORD(v125) & 0x80;
      if (v125 >> 30) {
        int v126 = v125 & 0x400000;
      }
      if (!v126)
      {
        if (v125 >> 30) {
          char v127 = 15;
        }
        else {
          char v127 = 16;
        }
        if (v125 >> 30) {
          unsigned int v128 = (v125 >> 23) & 0xF;
        }
        else {
          unsigned int v128 = HIBYTE(v125) & 7;
        }
        if (*((_DWORD *)v121 + 6))
        {
          unsigned int v129 = *((_DWORD *)v121 + 8);
          unsigned int v130 = v129 >> 23;
          unsigned int v131 = v129 >> 30;
          if (v129 >> 30) {
            LOBYTE(v130) = v129 >> 22;
          }
          if ((v130 & 1) == 0)
          {
            unsigned int v132 = (v125 >> v127) & 0x7F;
            if (v131) {
              char v133 = 15;
            }
            else {
              char v133 = 16;
            }
            unsigned int v134 = (v129 >> v133) & 0x7F;
            unsigned int v135 = HIBYTE(v129) & 7;
            int v136 = (v129 >> 23) & 0xF;
            if (v131) {
              unsigned int v135 = v136;
            }
            if (v128 != v135 || v132 != v134)
            {
              BOOL v137 = v128 < v135;
              BOOL v138 = v132 >= v134;
              BOOL v139 = v132 == v134 && v137;
              if (v138 && !v139) {
                goto LABEL_185;
              }
              if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
                goto LABEL_186;
              }
              uint64_t v117 = VRTraceErrorLogLevelToCSTR();
              v189 = *MEMORY[0x1E4F47A50];
              v190 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136316674;
                  *(void *)&uint8_t buf[4] = v117;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "_VideoPacketBuffer_ShouldInsertParityPacketBeforePacket";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  *(_DWORD *)&buf[24] = 1265;
                  *(_WORD *)&buf[28] = 1024;
                  LOWORD(v117) = v215;
                  *(_DWORD *)&buf[30] = v215;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = 1;
                  *(_WORD *)v218 = 1024;
                  *(_DWORD *)&v218[2] = v132;
                  *(_WORD *)&v218[6] = 1024;
                  *(_DWORD *)&v218[8] = v128;
                  v168 = "VideoPacketBuffer [%s] %s:%d Out of order parity packet! Incoming packet with sequenceNumber=%d"
                         ", isParity=%d, groupID=%d, startPosition=%d";
                  v169 = v189;
LABEL_245:
                  _os_log_impl(&dword_1E1EA4000, v169, OS_LOG_TYPE_DEFAULT, v168, buf, 0x34u);
                  goto LABEL_186;
                }
                goto LABEL_256;
              }
              if (!os_log_type_enabled(v190, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_256;
              }
              *(_DWORD *)buf = 136316674;
              *(void *)&uint8_t buf[4] = v117;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoPacketBuffer_ShouldInsertParityPacketBeforePacket";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&buf[24] = 1265;
              *(_WORD *)&buf[28] = 1024;
              LOWORD(v117) = v215;
              *(_DWORD *)&buf[30] = v215;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = 1;
              *(_WORD *)v218 = 1024;
              *(_DWORD *)&v218[2] = v132;
              *(_WORD *)&v218[6] = 1024;
              *(_DWORD *)&v218[8] = v128;
              v197 = "VideoPacketBuffer [%s] %s:%d Out of order parity packet! Incoming packet with sequenceNumber=%d, is"
                     "Parity=%d, groupID=%d, startPosition=%d";
              v198 = v189;
LABEL_259:
              _os_log_debug_impl(&dword_1E1EA4000, v198, OS_LOG_TYPE_DEBUG, v197, buf, 0x34u);
              goto LABEL_186;
            }
            v89 = (pthread_mutex_t *)(a1 + 360);
            if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
              goto LABEL_254;
            }
            uint64_t v186 = VRTraceErrorLogLevelToCSTR();
            v187 = *MEMORY[0x1E4F47A50];
            v188 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316674;
                *(void *)&uint8_t buf[4] = v186;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoPacketBuffer_ShouldInsertParityPacketBeforePacket";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&buf[24] = 1259;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v215;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = 1;
                *(_WORD *)v218 = 1024;
                *(_DWORD *)&v218[2] = v132;
                *(_WORD *)&v218[6] = 1024;
                *(_DWORD *)&v218[8] = v128;
                v155 = "VideoPacketBuffer [%s] %s:%d Duplicate parity packet! Incoming packet with sequenceNumber=%d, isP"
                       "arity=%d, groupID=%d, startPosition=%d";
                v156 = v187;
                goto LABEL_203;
              }
              goto LABEL_254;
            }
            if (!os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_254;
            }
            *(_DWORD *)buf = 136316674;
            *(void *)&uint8_t buf[4] = v186;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoPacketBuffer_ShouldInsertParityPacketBeforePacket";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 1259;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v215;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = 1;
            *(_WORD *)v218 = 1024;
            *(_DWORD *)&v218[2] = v132;
            *(_WORD *)&v218[6] = 1024;
            *(_DWORD *)&v218[8] = v128;
            v184 = "VideoPacketBuffer [%s] %s:%d Duplicate parity packet! Incoming packet with sequenceNumber=%d, isParit"
                   "y=%d, groupID=%d, startPosition=%d";
            v185 = v187;
            goto LABEL_236;
          }
        }
LABEL_185:
        v122 = v121 + 52;
        v121 = (unsigned __int16 *)*((void *)v121 + 13);
        if (!v121) {
          goto LABEL_186;
        }
        continue;
      }
    }
    break;
  }
  if (!*((_DWORD *)v121 + 6)) {
    goto LABEL_194;
  }
  unsigned int v145 = *((_DWORD *)v121 + 8);
  if (v145 >> 30)
  {
    if ((v145 & 0x400000) == 0) {
      goto LABEL_209;
    }
LABEL_194:
    v89 = (pthread_mutex_t *)(a1 + 360);
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      goto LABEL_254;
    }
    uint64_t v146 = VRTraceErrorLogLevelToCSTR();
    v147 = *MEMORY[0x1E4F47A50];
    v148 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v149 = v123[2];
        BOOL v150 = v149 >> 30 == 0;
        if (v149 >> 30) {
          char v151 = 15;
        }
        else {
          char v151 = 16;
        }
        *(_DWORD *)buf = 136316674;
        int v152 = (v149 >> v151) & 0x7F;
        *(void *)&uint8_t buf[4] = v146;
        int v153 = HIBYTE(v149) & 7;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoPacketBuffer_ShouldInsertNonParityPacketBeforePacket";
        int v154 = (v149 >> 23) & 0xF;
        *(_WORD *)&unsigned char buf[22] = 1024;
        if (v150) {
          int v154 = v153;
        }
        *(_DWORD *)&buf[24] = 1280;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v215;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = 0;
        *(_WORD *)v218 = 1024;
        *(_DWORD *)&v218[2] = v152;
        *(_WORD *)&v218[6] = 1024;
        *(_DWORD *)&v218[8] = v154;
        v155 = "VideoPacketBuffer [%s] %s:%d Duplicate non-partity packet! Incoming packet with sequenceNumber=%d, isPari"
               "ty=%d, groupID=%d, startPosition=%d";
        v156 = v147;
LABEL_203:
        _os_log_impl(&dword_1E1EA4000, v156, OS_LOG_TYPE_DEFAULT, v155, buf, 0x34u);
      }
LABEL_254:
      uint64_t v102 = 0;
      ++*((_DWORD *)v121 + 24);
      goto LABEL_221;
    }
    if (!os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_254;
    }
    unsigned int v178 = v123[2];
    BOOL v179 = v178 >> 30 == 0;
    if (v178 >> 30) {
      char v180 = 15;
    }
    else {
      char v180 = 16;
    }
    *(_DWORD *)buf = 136316674;
    int v181 = (v178 >> v180) & 0x7F;
    *(void *)&uint8_t buf[4] = v146;
    int v182 = HIBYTE(v178) & 7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "_VideoPacketBuffer_ShouldInsertNonParityPacketBeforePacket";
    int v183 = (v178 >> 23) & 0xF;
    *(_WORD *)&unsigned char buf[22] = 1024;
    if (v179) {
      int v183 = v182;
    }
    *(_DWORD *)&buf[24] = 1280;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v215;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = 0;
    *(_WORD *)v218 = 1024;
    *(_DWORD *)&v218[2] = v181;
    *(_WORD *)&v218[6] = 1024;
    *(_DWORD *)&v218[8] = v183;
    v184 = "VideoPacketBuffer [%s] %s:%d Duplicate non-partity packet! Incoming packet with sequenceNumber=%d, isParity=%"
           "d, groupID=%d, startPosition=%d";
    v185 = v147;
LABEL_236:
    _os_log_debug_impl(&dword_1E1EA4000, v185, OS_LOG_TYPE_DEBUG, v184, buf, 0x34u);
    goto LABEL_254;
  }
  if ((v145 & 0x800000) != 0) {
    goto LABEL_194;
  }
LABEL_209:
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    goto LABEL_186;
  }
  uint64_t v159 = VRTraceErrorLogLevelToCSTR();
  v160 = *MEMORY[0x1E4F47A50];
  v161 = *MEMORY[0x1E4F47A50];
  if (!*MEMORY[0x1E4F47A40])
  {
    if (!os_log_type_enabled(v161, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_256;
    }
    unsigned int v191 = v123[2];
    BOOL v192 = v191 >> 30 == 0;
    if (v191 >> 30) {
      char v193 = 15;
    }
    else {
      char v193 = 16;
    }
    *(_DWORD *)buf = 136316674;
    int v194 = (v191 >> v193) & 0x7F;
    *(void *)&uint8_t buf[4] = v159;
    int v195 = HIBYTE(v191) & 7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "_VideoPacketBuffer_ShouldInsertNonParityPacketBeforePacket";
    int v196 = (v191 >> 23) & 0xF;
    *(_WORD *)&unsigned char buf[22] = 1024;
    if (v192) {
      int v196 = v195;
    }
    *(_DWORD *)&buf[24] = 1276;
    *(_WORD *)&buf[28] = 1024;
    LOWORD(v117) = v215;
    *(_DWORD *)&buf[30] = v215;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = 0;
    *(_WORD *)v218 = 1024;
    *(_DWORD *)&v218[2] = v194;
    *(_WORD *)&v218[6] = 1024;
    *(_DWORD *)&v218[8] = v196;
    v197 = "VideoPacketBuffer [%s] %s:%d Out of order non-parity packet. Incoming packet with sequenceNumber=%d, isParity"
           "=%d, groupID=%d, startPosition=%d";
    v198 = v160;
    goto LABEL_259;
  }
  if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v162 = v123[2];
    BOOL v163 = v162 >> 30 == 0;
    if (v162 >> 30) {
      char v164 = 15;
    }
    else {
      char v164 = 16;
    }
    *(_DWORD *)buf = 136316674;
    int v165 = (v162 >> v164) & 0x7F;
    *(void *)&uint8_t buf[4] = v159;
    int v166 = HIBYTE(v162) & 7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "_VideoPacketBuffer_ShouldInsertNonParityPacketBeforePacket";
    int v167 = (v162 >> 23) & 0xF;
    *(_WORD *)&unsigned char buf[22] = 1024;
    if (v163) {
      int v167 = v166;
    }
    *(_DWORD *)&buf[24] = 1276;
    *(_WORD *)&buf[28] = 1024;
    LOWORD(v117) = v215;
    *(_DWORD *)&buf[30] = v215;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = 0;
    *(_WORD *)v218 = 1024;
    *(_DWORD *)&v218[2] = v165;
    *(_WORD *)&v218[6] = 1024;
    *(_DWORD *)&v218[8] = v167;
    v168 = "VideoPacketBuffer [%s] %s:%d Out of order non-parity packet. Incoming packet with sequenceNumber=%d, isParity"
           "=%d, groupID=%d, startPosition=%d";
    v169 = v160;
    goto LABEL_245;
  }
LABEL_256:
  LOWORD(v117) = v215;
LABEL_186:
  v140 = (char *)VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 146032));
  *((_DWORD *)v140 + 20) = 0;
  *(_WORD *)v140 = v117;
  *((void *)v140 + 1) = *((void *)a2 + 1);
  *((_DWORD *)v140 + 4) = v204;
  *((void *)v140 + 11) = *((void *)v10 + 4);
  *((_DWORD *)v140 + 21) = v10[4];
  *((_DWORD *)v140 + 24) = 1;
  v140[112] = *((unsigned char *)v10 + 194);
  VCBlockBuffer_Copy(*((void *)a2 + 2), (uint64_t)(v140 + 120));
  v89 = (pthread_mutex_t *)(a1 + 360);
  if (v203)
  {
    **((_DWORD **)a2 + 7) = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v141 = VRTraceErrorLogLevelToCSTR();
      v142 = *MEMORY[0x1E4F47A50];
      v143 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
        {
          int v144 = *((unsigned __int16 *)a2 + 23);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = v141;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "VideoPacketBuffer_AddPacket";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&buf[24] = 1682;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v144;
          _os_log_impl(&dword_1E1EA4000, v142, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d invalidating fecHeader for frame with frameSequenceNumber:%d", buf, 0x22u);
        }
      }
      else if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
      {
        VideoPacketBuffer_AddPacket_cold_2();
      }
    }
  }
  v170 = (long long *)*((void *)a2 + 7);
  long long v171 = *v170;
  long long v172 = v170[1];
  long long v173 = v170[2];
  *((void *)v140 + 9) = *((void *)v170 + 6);
  *(_OWORD *)(v140 + 56) = v173;
  *(_OWORD *)(v140 + 40) = v172;
  *(_OWORD *)(v140 + 24) = v171;
  *((void *)v140 + 13) = *v122;
  void *v122 = v140;
  uint64_t v102 = 1;
LABEL_221:
  *((_WORD *)v81 + 55) += v212;
  *((_WORD *)v81 + 54) += v205;
  _VideoPacketBuffer_CorrectFrameStats(a1, *((unsigned __int16 *)a2 + 23), v212);
  pthread_mutex_unlock(v89);
  return v102;
}

void _VideoPacketBuffer_CorrectFrameStats(uint64_t a1, int a2, int a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a2 & 0x7F;
  if (*(_DWORD *)(a1 + 800 * (a2 & 0x7F) + 42696) == a2)
  {
    uint64_t v7 = a1 + 800 * (a2 & 0x7F);
    if (a3) {
      uint64_t v8 = 42712;
    }
    else {
      uint64_t v8 = 42710;
    }
    int v9 = *(unsigned __int16 *)(v7 + v8);
    BOOL v10 = v9 != 0;
    __int16 v11 = v9 - 1;
    if (!v10) {
      __int16 v11 = 0;
    }
    *(_WORD *)(v7 + v8) = v11;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      uint64_t v13 = *MEMORY[0x1E4F47A50];
      int v14 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = *(unsigned __int16 *)(a1 + 800 * v3 + 42710);
          int v16 = *(unsigned __int16 *)(a1 + 800 * v3 + 42712);
          int v19 = 136317186;
          uint64_t v20 = v12;
          __int16 v21 = 2080;
          double v22 = "_VideoPacketBuffer_CorrectFrameStats";
          __int16 v23 = 1024;
          int v24 = 730;
          __int16 v25 = 2048;
          uint64_t v26 = a1;
          __int16 v27 = 1024;
          int v28 = a2;
          __int16 v29 = 1024;
          int v30 = a3;
          __int16 v31 = 1024;
          unsigned int v32 = v3;
          __int16 v33 = 1024;
          int v34 = v15;
          __int16 v35 = 1024;
          int v36 = v16;
          _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Correct loss frameSequenceNumber=%d isParity=%d frameIndex=%d maxVideoPacketsLostPerFrame=%d maxParityPacketsLostPerFrame=%d", (uint8_t *)&v19, 0x44u);
        }
      }
      else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int v17 = *(unsigned __int16 *)(a1 + 800 * v3 + 42710);
        int v18 = *(unsigned __int16 *)(a1 + 800 * v3 + 42712);
        int v19 = 136317186;
        uint64_t v20 = v12;
        __int16 v21 = 2080;
        double v22 = "_VideoPacketBuffer_CorrectFrameStats";
        __int16 v23 = 1024;
        int v24 = 730;
        __int16 v25 = 2048;
        uint64_t v26 = a1;
        __int16 v27 = 1024;
        int v28 = a2;
        __int16 v29 = 1024;
        int v30 = a3;
        __int16 v31 = 1024;
        unsigned int v32 = v3;
        __int16 v33 = 1024;
        int v34 = v17;
        __int16 v35 = 1024;
        int v36 = v18;
        _os_log_debug_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Correct loss frameSequenceNumber=%d isParity=%d frameIndex=%d maxVideoPacketsLostPerFrame=%d maxParityPacketsLostPerFrame=%d", (uint8_t *)&v19, 0x44u);
      }
    }
  }
}

void _VideoPacketBuffer_StartTrackingEvictedFrameStats(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoPacketBuffer_StartTrackingEvictedFrameStats_cold_1();
      }
    }
    return;
  }
  if (*(double *)(a2 + 168) == 0.0)
  {
    ++*(_DWORD *)(a1 + 1044);
    *(double *)(a2 + 168) = a3;
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return;
    }
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    __int16 v6 = *MEMORY[0x1E4F47A50];
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a2 + 168);
        int v16 = 136316418;
        uint64_t v17 = v5;
        __int16 v18 = 2080;
        int v19 = "_VideoPacketBuffer_StartTrackingEvictedFrameStats";
        __int16 v20 = 1024;
        int v21 = 1328;
        __int16 v22 = 2048;
        uint64_t v23 = a1;
        __int16 v24 = 2048;
        uint64_t v25 = a2;
        __int16 v26 = 2048;
        uint64_t v27 = v8;
        int v9 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Starting to track late frame[%p] at t=%.4f";
LABEL_11:
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v16, 0x3Au);
        return;
      }
      return;
    }
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    uint64_t v13 = *(void *)(a2 + 168);
    int v16 = 136316418;
    uint64_t v17 = v5;
    __int16 v18 = 2080;
    int v19 = "_VideoPacketBuffer_StartTrackingEvictedFrameStats";
    __int16 v20 = 1024;
    int v21 = 1328;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 2048;
    uint64_t v25 = a2;
    __int16 v26 = 2048;
    uint64_t v27 = v13;
    int v14 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Starting to track late frame[%p] at t=%.4f";
LABEL_17:
    _os_log_debug_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEBUG, v14, (uint8_t *)&v16, 0x3Au);
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    return;
  }
  uint64_t v10 = VRTraceErrorLogLevelToCSTR();
  __int16 v6 = *MEMORY[0x1E4F47A50];
  __int16 v11 = *MEMORY[0x1E4F47A50];
  if (!*MEMORY[0x1E4F47A40])
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    uint64_t v15 = *(void *)(a2 + 168);
    int v16 = 136316418;
    uint64_t v17 = v10;
    __int16 v18 = 2080;
    int v19 = "_VideoPacketBuffer_StartTrackingEvictedFrameStats";
    __int16 v20 = 1024;
    int v21 = 1330;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 2048;
    uint64_t v25 = a2;
    __int16 v26 = 2048;
    uint64_t v27 = v15;
    int v14 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Already tracking frame=%p with t=%.4f";
    goto LABEL_17;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a2 + 168);
    int v16 = 136316418;
    uint64_t v17 = v10;
    __int16 v18 = 2080;
    int v19 = "_VideoPacketBuffer_StartTrackingEvictedFrameStats";
    __int16 v20 = 1024;
    int v21 = 1330;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 2048;
    uint64_t v25 = a2;
    __int16 v26 = 2048;
    uint64_t v27 = v12;
    int v9 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Already tracking frame=%p with t=%.4f";
    goto LABEL_11;
  }
}

void _VideoPacketBuffer_UpdatePreviousFrameSequenceNumber(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = *(void *)(a1 + 112);
    if (v5)
    {
      *(_DWORD *)(v5 + 156) = *(unsigned __int16 *)(a1 + 150);
      *(unsigned char *)(v5 + 160) = *(unsigned char *)(a1 + 149);
    }
  }
  if (a2)
  {
    *(_DWORD *)(a1 + 156) = *(unsigned __int16 *)(a2 + 150);
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a1 + 149);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    uint64_t v8 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(unsigned __int16 *)(a1 + 150);
        int v10 = *(_DWORD *)(a1 + 156);
        uint64_t v11 = *(void *)(a1 + 112);
        if (v11)
        {
          int v12 = *(unsigned __int16 *)(v11 + 150);
          LODWORD(v11) = *(_DWORD *)(v11 + 156);
        }
        else
        {
          int v12 = 0;
        }
        int v17 = 136316930;
        uint64_t v18 = v6;
        __int16 v19 = 2080;
        __int16 v20 = "_VideoPacketBuffer_UpdatePreviousFrameSequenceNumber";
        __int16 v21 = 1024;
        int v22 = 1422;
        __int16 v23 = 1024;
        int v24 = a3;
        __int16 v25 = 1024;
        int v26 = v9;
        __int16 v27 = 1024;
        int v28 = v10;
        __int16 v29 = 1024;
        int v30 = v12;
        __int16 v31 = 1024;
        int v32 = v11;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d isNewFrameOufOfOrder=%d, newFrame->seq=%d, newFrame->prevSeq=%d, newFrame->nextSeq=%d, newFrame->next->prevSeq=%d", (uint8_t *)&v17, 0x3Au);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(unsigned __int16 *)(a1 + 150);
      int v14 = *(_DWORD *)(a1 + 156);
      uint64_t v15 = *(void *)(a1 + 112);
      if (v15)
      {
        int v16 = *(unsigned __int16 *)(v15 + 150);
        LODWORD(v15) = *(_DWORD *)(v15 + 156);
      }
      else
      {
        int v16 = 0;
      }
      int v17 = 136316930;
      uint64_t v18 = v6;
      __int16 v19 = 2080;
      __int16 v20 = "_VideoPacketBuffer_UpdatePreviousFrameSequenceNumber";
      __int16 v21 = 1024;
      int v22 = 1422;
      __int16 v23 = 1024;
      int v24 = a3;
      __int16 v25 = 1024;
      int v26 = v13;
      __int16 v27 = 1024;
      int v28 = v14;
      __int16 v29 = 1024;
      int v30 = v16;
      __int16 v31 = 1024;
      int v32 = v15;
      _os_log_debug_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d isNewFrameOufOfOrder=%d, newFrame->seq=%d, newFrame->prevSeq=%d, newFrame->nextSeq=%d, newFrame->next->prevSeq=%d", (uint8_t *)&v17, 0x3Au);
    }
  }
}

BOOL VideoPacketBuffer_ScheduleFutureFrame(uint64_t a1, int a2, int a3, _DWORD *a4, unsigned int a5, int a6, int a7, double a8)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_ScheduleFutureFrame_cold_1();
      }
    }
    return 0;
  }
  if (!a4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_ScheduleFutureFrame_cold_2();
      }
    }
    return 0;
  }
  uint64_t v15 = (unsigned int *)(a1 + 145896);
  __int16 v74 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  *uint64_t v15 = a5;
  uint64_t v16 = *(void *)(a1 + 146096);
  if (v16) {
    VCNACKGenerator_UpdatePlayoutRTPTimestamp(v16, a2, a5);
  }
  uint64_t v17 = *(void *)(a1 + 145904);
  if (v17)
  {
    unint64_t v73 = (uint64_t *)(v15 + 2);
    BOOL v18 = 0;
    while (1)
    {
      *(unsigned char *)(v17 + 55) = 0;
      int v19 = *(_DWORD *)(v17 + 12);
      if (a3 == v19 || (a3 - v19) >= 0x7FFFFFFF)
      {
        if (a3 == v19 && !*(_DWORD *)(v17 + 48)) {
          BOOL v18 = _VideoPacketBuffer_ScheduleSingleFrame(a1, v17, a4, a5, a6, a7);
        }
        goto LABEL_83;
      }
      if (*(_DWORD *)(v17 + 48))
      {
        uint64_t v22 = *(void *)(v17 + 112);
      }
      else
      {
        BOOL v21 = _VideoPacketBuffer_ScheduleSingleFrame(a1, v17, a4, a5, a6, a7);
        if (a5 && a5 - *(_DWORD *)(v17 + 12) >= 0x7FFFFFFF)
        {
          if (v21)
          {
LABEL_17:
            BOOL v18 = v21;
            goto LABEL_83;
          }
          int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
          if (ErrorLogLevelForModule >= 8)
          {
            uint64_t v37 = VRTraceErrorLogLevelToCSTR();
            uint64_t v38 = *MEMORY[0x1E4F47A50];
            uint64_t v39 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              BOOL v18 = 0;
              if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_83;
              }
              unsigned int v40 = **(unsigned __int16 **)(v17 + 96);
              int v41 = *(_DWORD *)(v17 + 12);
              int v42 = *(unsigned __int16 *)(v17 + 150);
              int v43 = *(_DWORD *)(v17 + 156);
              *(_DWORD *)buf = 136317442;
              uint64_t v77 = v37;
              __int16 v78 = 2080;
              v79 = "VideoPacketBuffer_ScheduleFutureFrame";
              __int16 v80 = 1024;
              int v81 = 1926;
              __int16 v82 = 2048;
              uint64_t v83 = a1;
              __int16 v84 = 1024;
              unsigned int v85 = v40;
              __int16 v86 = 1024;
              unsigned int v87 = a5;
              __int16 v88 = 1024;
              *(_DWORD *)v89 = v41;
              *(_WORD *)&v89[4] = 1024;
              *(_DWORD *)&v89[6] = v41 - a5;
              __int16 v90 = 1024;
              int v91 = v42;
              __int16 v92 = 1024;
              int v93 = v43;
              __int16 v44 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] seq:%u playoutRTPTimestamp:%u frameTimestamp:%u d"
                    "iff:%d frameSequenceNumber=%d previousFrameSequenceNumber=%d";
              int v45 = v38;
              uint32_t v46 = 74;
LABEL_72:
              _os_log_impl(&dword_1E1EA4000, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
              break;
            }
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v61 = **(unsigned __int16 **)(v17 + 96);
              int v62 = *(_DWORD *)(v17 + 12);
              int v63 = *(unsigned __int16 *)(v17 + 150);
              int v64 = *(_DWORD *)(v17 + 156);
              *(_DWORD *)buf = 136317442;
              uint64_t v77 = v37;
              __int16 v78 = 2080;
              v79 = "VideoPacketBuffer_ScheduleFutureFrame";
              __int16 v80 = 1024;
              int v81 = 1926;
              __int16 v82 = 2048;
              uint64_t v83 = a1;
              __int16 v84 = 1024;
              unsigned int v85 = v61;
              __int16 v86 = 1024;
              unsigned int v87 = a5;
              __int16 v88 = 1024;
              *(_DWORD *)v89 = v62;
              *(_WORD *)&v89[4] = 1024;
              *(_DWORD *)&v89[6] = v62 - a5;
              __int16 v90 = 1024;
              int v91 = v63;
              __int16 v92 = 1024;
              int v93 = v64;
              int v65 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] seq:%u playoutRTPTimestamp:%u frameTimestamp:%u d"
                    "iff:%d frameSequenceNumber=%d previousFrameSequenceNumber=%d";
              int v66 = v38;
              uint32_t v67 = 74;
LABEL_81:
              _os_log_debug_impl(&dword_1E1EA4000, v66, OS_LOG_TYPE_DEBUG, v65, buf, v67);
              break;
            }
          }
          break;
        }
        if (v21) {
          goto LABEL_17;
        }
        if (*(unsigned char *)(a1 + 240))
        {
          if (*(unsigned char *)(v17 + 148))
          {
            if (a6)
            {
              int v23 = *(unsigned __int16 *)(v17 + 146) - a7;
              if (v23)
              {
                if ((unsigned __int16)v23 <= 0x7FFEu)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
                    break;
                  }
                  uint64_t v57 = VRTraceErrorLogLevelToCSTR();
                  uint64_t v58 = *MEMORY[0x1E4F47A50];
                  uint64_t v59 = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    BOOL v18 = 0;
                    if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_83;
                    }
                    unsigned int v60 = *(unsigned __int16 *)(v17 + 146);
                    *(_DWORD *)buf = 136316418;
                    uint64_t v77 = v57;
                    __int16 v78 = 2080;
                    v79 = "VideoPacketBuffer_ScheduleFutureFrame";
                    __int16 v80 = 1024;
                    int v81 = 1933;
                    __int16 v82 = 2048;
                    uint64_t v83 = a1;
                    __int16 v84 = 1024;
                    unsigned int v85 = v60;
                    __int16 v86 = 1024;
                    unsigned int v87 = a7;
                    __int16 v44 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] frameDecodingOrder:%hu, expectedDecodingOrder:%hu";
                    int v45 = v58;
                    uint32_t v46 = 50;
                    goto LABEL_72;
                  }
                  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
                  {
                    unsigned int v71 = *(unsigned __int16 *)(v17 + 146);
                    *(_DWORD *)buf = 136316418;
                    uint64_t v77 = v57;
                    __int16 v78 = 2080;
                    v79 = "VideoPacketBuffer_ScheduleFutureFrame";
                    __int16 v80 = 1024;
                    int v81 = 1933;
                    __int16 v82 = 2048;
                    uint64_t v83 = a1;
                    __int16 v84 = 1024;
                    unsigned int v85 = v71;
                    __int16 v86 = 1024;
                    unsigned int v87 = a7;
                    int v65 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] frameDecodingOrder:%hu, expectedDecodingOrder:%hu";
                    int v66 = v58;
                    uint32_t v67 = 50;
                    goto LABEL_81;
                  }
                  break;
                }
              }
            }
          }
        }
        if (*(_DWORD *)(v17 + 40)
          && !*(_DWORD *)(v17 + 44)
          && VideoPacketBuffer_FrameReadyForRecovery(v17))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v24 = VRTraceErrorLogLevelToCSTR();
            __int16 v25 = *MEMORY[0x1E4F47A50];
            int v26 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315906;
                uint64_t v77 = v24;
                __int16 v78 = 2080;
                v79 = "VideoPacketBuffer_ScheduleFutureFrame";
                __int16 v80 = 1024;
                int v81 = 1940;
                __int16 v82 = 2048;
                uint64_t v83 = a1;
                _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Protected Frame begin recovery", buf, 0x26u);
              }
            }
            else if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315906;
              uint64_t v77 = v24;
              __int16 v78 = 2080;
              v79 = "VideoPacketBuffer_ScheduleFutureFrame";
              __int16 v80 = 1024;
              int v81 = 1940;
              __int16 v82 = 2048;
              uint64_t v83 = a1;
              _os_log_debug_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Protected Frame begin recovery", buf, 0x26u);
            }
          }
          if (!RecoverOneFrame(a1, (int *)v17))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v68 = VRTraceErrorLogLevelToCSTR();
              int v69 = *MEMORY[0x1E4F47A50];
              int v70 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315906;
                  uint64_t v77 = v68;
                  __int16 v78 = 2080;
                  v79 = "VideoPacketBuffer_ScheduleFutureFrame";
                  __int16 v80 = 1024;
                  int v81 = 1943;
                  __int16 v82 = 2048;
                  uint64_t v83 = a1;
                  _os_log_impl(&dword_1E1EA4000, v69, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Scheduling FEC Protected Frame after successful recovery (when next frame come)", buf, 0x26u);
                }
              }
              else if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
              {
                VideoPacketBuffer_ScheduleFutureFrame_cold_3();
              }
            }
            BOOL v18 = 1;
            *(_DWORD *)(v17 + 44) = 1;
            *a4 = *(_DWORD *)(v17 + 12);
            *(_DWORD *)(v17 + 48) = 1;
            goto LABEL_83;
          }
        }
        *a4 = *(_DWORD *)(v17 + 12);
        *(_DWORD *)(v17 + 48) = 1;
        if (*(_DWORD *)(v17 + 40) && !*(_DWORD *)(v17 + 60)) {
          *(_DWORD *)(v17 + 60) = 2;
        }
        _VideoPacketBuffer_StartTrackingEvictedFrameStats(a1, v17, a8);
        kdebug_trace();
        LODWORD(v27) = *(_DWORD *)(v17 + 12);
        double v28 = ((double)a5 - (double)v27) / (double)*(int *)(a1 + 8);
        int v29 = VRTraceGetErrorLogLevelForModule();
        if (v28 <= 0.5)
        {
          if (v29 >= 5)
          {
            uint64_t v47 = VRTraceErrorLogLevelToCSTR();
            uint64_t v48 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v49 = *(_DWORD *)(v17 + 40);
              unsigned int v50 = **(unsigned __int16 **)(v17 + 96);
              int v51 = *(_DWORD *)(v17 + 12);
              int v52 = *(unsigned __int16 *)(v17 + 146);
              int v53 = *(unsigned __int8 *)(v17 + 148);
              int v54 = *(_DWORD *)(v17 + 60);
              int v55 = *(unsigned __int16 *)(v17 + 150);
              int v56 = *(_DWORD *)(v17 + 156);
              *(_DWORD *)buf = 136318978;
              uint64_t v77 = v47;
              __int16 v78 = 2080;
              v79 = "VideoPacketBuffer_ScheduleFutureFrame";
              __int16 v80 = 1024;
              int v81 = 1977;
              __int16 v82 = 2048;
              uint64_t v83 = a1;
              __int16 v84 = 1024;
              unsigned int v85 = v49;
              __int16 v86 = 1024;
              unsigned int v87 = v50;
              __int16 v88 = 1024;
              *(_DWORD *)v89 = a5;
              *(_WORD *)&v89[4] = 1024;
              *(_DWORD *)&v89[6] = v51;
              __int16 v90 = 1024;
              int v91 = v51 - a5;
              __int16 v92 = 1024;
              int v93 = v52;
              __int16 v94 = 1024;
              int v95 = v53;
              __int16 v96 = 1024;
              int v97 = a7;
              __int16 v98 = 1024;
              int v99 = a6;
              __int16 v100 = 1024;
              int v101 = v54;
              __int16 v102 = 1024;
              int v103 = v55;
              __int16 v104 = 1024;
              int v105 = v56;
              _os_log_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] scheduling incomplete frame! fecProtected:%d seq:%u playoutRTPTimestamp:%u frameTimestamp:%u diff:%d decodingOrder:%u isDecodingOrderValid:%d expectdDecodingOrder:%d isExpectedDecodingOrderValid:%d fecStatus=%d frameSequenceNumber=%d previousFrameSequenceNumber=%d", buf, 0x6Eu);
            }
          }
          BOOL v18 = 1;
          goto LABEL_83;
        }
        if (v29 >= 5)
        {
          uint64_t v30 = VRTraceErrorLogLevelToCSTR();
          __int16 v31 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v32 = *(_DWORD *)(v17 + 12);
            *(_DWORD *)buf = 136316674;
            uint64_t v77 = v30;
            __int16 v78 = 2080;
            v79 = "VideoPacketBuffer_ScheduleFutureFrame";
            __int16 v80 = 1024;
            int v81 = 1968;
            __int16 v82 = 2048;
            uint64_t v83 = a1;
            __int16 v84 = 1024;
            unsigned int v85 = a5;
            __int16 v86 = 1024;
            unsigned int v87 = v32;
            __int16 v88 = 2048;
            *(double *)v89 = v28;
            _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] discarding incomplete frame that is too old. playoutRTPTimestamp:%u frameTimestamp:%u missedPlayoutDelta:%g", buf, 0x3Cu);
          }
        }
        uint64_t v22 = *(void *)(v17 + 112);
        uint64_t v33 = (uint64_t *)(v15 + 2);
        uint64_t v34 = *v73;
        if (!*v73) {
          goto LABEL_49;
        }
        if (v34 != v17)
        {
          while (1)
          {
            uint64_t v35 = v34;
            uint64_t v34 = *(void *)(v34 + 112);
            if (!v34) {
              break;
            }
            if (v34 == v17)
            {
              uint64_t v33 = (uint64_t *)(v35 + 112);
              goto LABEL_48;
            }
          }
LABEL_49:
          BOOL v18 = 0;
          goto LABEL_19;
        }
LABEL_48:
        *uint64_t v33 = v22;
        _VideoPacketBuffer_FreeFrame(a1, (void *)v17);
        BOOL v18 = 0;
        --*(_DWORD *)(a1 + 146016);
      }
LABEL_19:
      uint64_t v17 = v22;
      if (!v22) {
        goto LABEL_83;
      }
    }
  }
  BOOL v18 = 0;
LABEL_83:
  pthread_mutex_unlock(v74);
  return v18;
}

BOOL _VideoPacketBuffer_ScheduleSingleFrame(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5, int a6)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 48))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      int v10 = *MEMORY[0x1E4F47A50];
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      int v12 = *(unsigned __int16 *)(a1 + 428) + 1;
      int v13 = **(unsigned __int16 **)(a2 + 96);
      int v14 = *(_DWORD *)(a2 + 12);
      int v15 = *(unsigned __int16 *)(a2 + 150);
      int v114 = 136317186;
      uint64_t v115 = v9;
      __int16 v116 = 2080;
      uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
      __int16 v118 = 1024;
      int v119 = 1817;
      __int16 v120 = 2048;
      uint64_t v121 = a1;
      __int16 v122 = 1024;
      int v123 = v12;
      __int16 v124 = 1024;
      int v125 = v13;
      __int16 v126 = 1024;
      int v127 = v14;
      __int16 v128 = 1024;
      int v129 = v15;
      __int16 v130 = 1024;
      int v131 = a4;
      _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Frame already scheduled! expectedSeq=%u seq=%u frameTimestamp=%u frameSequenceNumber=%u playoutRTPTimestamp=%u", (uint8_t *)&v114, 0x44u);
    }
    return 0;
  }
  if (!a3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _VideoPacketBuffer_ScheduleSingleFrame_cold_1();
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 434)) {
    goto LABEL_9;
  }
  if (!*(unsigned char *)(a2 + 152))
  {
    int v45 = **(unsigned __int16 **)(a2 + 96);
    if (v45 != (unsigned __int16)(*(_WORD *)(a1 + 428) + 1)
      && (unsigned __int16)(v45 - (*(_WORD *)(a1 + 428) + 1)) <= 0x7FFEu)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        return 0;
      }
      uint64_t v46 = VRTraceErrorLogLevelToCSTR();
      uint64_t v38 = *MEMORY[0x1E4F47A50];
      uint64_t v47 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        BOOL v48 = os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v48) {
          return result;
        }
        int v49 = *(unsigned __int16 *)(a1 + 428) + 1;
        int v50 = **(unsigned __int16 **)(a2 + 96);
        int v51 = *(_DWORD *)(a2 + 12);
        int v52 = *(unsigned __int16 *)(a2 + 150);
        int v114 = 136317186;
        uint64_t v115 = v46;
        __int16 v116 = 2080;
        uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
        __int16 v118 = 1024;
        int v119 = 1827;
        __int16 v120 = 2048;
        uint64_t v121 = a1;
        __int16 v122 = 1024;
        int v123 = v49;
        __int16 v124 = 1024;
        int v125 = v50;
        __int16 v126 = 1024;
        int v127 = v51;
        __int16 v128 = 1024;
        int v129 = v52;
        __int16 v130 = 1024;
        int v131 = a4;
        uint64_t v24 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Out of order. expectedSeq:%u seq:%u frameTimestamp:%u f"
              "rameSequenceNumber=%u playoutRTPTimestamp:%u";
        goto LABEL_36;
      }
      BOOL result = os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      int v67 = *(unsigned __int16 *)(a1 + 428) + 1;
      int v68 = **(unsigned __int16 **)(a2 + 96);
      int v69 = *(_DWORD *)(a2 + 12);
      int v70 = *(unsigned __int16 *)(a2 + 150);
      int v114 = 136317186;
      uint64_t v115 = v46;
      __int16 v116 = 2080;
      uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
      __int16 v118 = 1024;
      int v119 = 1827;
      __int16 v120 = 2048;
      uint64_t v121 = a1;
      __int16 v122 = 1024;
      int v123 = v67;
      __int16 v124 = 1024;
      int v125 = v68;
      __int16 v126 = 1024;
      int v127 = v69;
      __int16 v128 = 1024;
      int v129 = v70;
      __int16 v130 = 1024;
      int v131 = a4;
      int v64 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Out of order. expectedSeq:%u seq:%u frameTimestamp:%u fra"
            "meSequenceNumber=%u playoutRTPTimestamp:%u";
      goto LABEL_51;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 145980))
  {
LABEL_9:
    if (*(unsigned char *)(a1 + 240))
    {
      if (*(unsigned char *)(a2 + 148))
      {
        if (a5)
        {
          int v19 = *(unsigned __int16 *)(a2 + 146) - a6;
          if (v19)
          {
            if ((unsigned __int16)v19 <= 0x7FFEu)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
              {
                uint64_t v20 = VRTraceErrorLogLevelToCSTR();
                BOOL v21 = *MEMORY[0x1E4F47A50];
                BOOL v22 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
                BOOL result = 0;
                if (!v22) {
                  return result;
                }
                int v23 = *(unsigned __int16 *)(a2 + 146);
                int v114 = 136316418;
                uint64_t v115 = v20;
                __int16 v116 = 2080;
                uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
                __int16 v118 = 1024;
                int v119 = 1836;
                __int16 v120 = 2048;
                uint64_t v121 = a1;
                __int16 v122 = 1024;
                int v123 = v23;
                __int16 v124 = 1024;
                int v125 = a6;
                uint64_t v24 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] frameDecodingOrder:%hu, expectedDecodingOrder:%hu";
                __int16 v25 = v21;
                uint32_t v26 = 50;
                goto LABEL_37;
              }
              return 0;
            }
          }
        }
      }
    }
    if (*(_DWORD *)(a2 + 40))
    {
      if (!*(_DWORD *)(a2 + 44) && VideoPacketBuffer_FrameReadyForRecovery(a2))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v27 = VRTraceErrorLogLevelToCSTR();
          double v28 = *MEMORY[0x1E4F47A50];
          int v29 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              int v114 = 136315906;
              uint64_t v115 = v27;
              __int16 v116 = 2080;
              uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
              __int16 v118 = 1024;
              int v119 = 1842;
              __int16 v120 = 2048;
              uint64_t v121 = a1;
              _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Protected Frame begin recovery", (uint8_t *)&v114, 0x26u);
            }
          }
          else if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            _VideoPacketBuffer_ScheduleSingleFrame_cold_4();
          }
        }
        int v71 = RecoverOneFrame(a1, (int *)a2);
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v71)
        {
          if (ErrorLogLevelForModule < 8) {
            return 0;
          }
          uint64_t v73 = VRTraceErrorLogLevelToCSTR();
          __int16 v74 = *MEMORY[0x1E4F47A50];
          uint64_t v75 = *MEMORY[0x1E4F47A50];
          if (!*MEMORY[0x1E4F47A40])
          {
            BOOL result = os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG);
            if (!result) {
              return result;
            }
            _VideoPacketBuffer_ScheduleSingleFrame_cold_3();
            return 0;
          }
          BOOL v76 = os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT);
          BOOL result = 0;
          if (!v76) {
            return result;
          }
          int v114 = 136315906;
          uint64_t v115 = v73;
          __int16 v116 = 2080;
          uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
          __int16 v118 = 1024;
          int v119 = 1851;
          __int16 v120 = 2048;
          uint64_t v121 = a1;
          uint64_t v24 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Protected Frame unsuccessful recovery";
          __int16 v25 = v74;
          uint32_t v26 = 38;
          goto LABEL_37;
        }
        if (ErrorLogLevelForModule >= 8)
        {
          uint64_t v77 = VRTraceErrorLogLevelToCSTR();
          __int16 v78 = *MEMORY[0x1E4F47A50];
          v79 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            {
              int v114 = 136315906;
              uint64_t v115 = v77;
              __int16 v116 = 2080;
              uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
              __int16 v118 = 1024;
              int v119 = 1845;
              __int16 v120 = 2048;
              uint64_t v121 = a1;
              _os_log_impl(&dword_1E1EA4000, v78, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Scheduling FEC Protected Frame after successful recovery", (uint8_t *)&v114, 0x26u);
            }
          }
          else if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
          {
            _VideoPacketBuffer_ScheduleSingleFrame_cold_2();
          }
        }
        *a3 = *(_DWORD *)(a2 + 12);
        *(void *)(a2 + 44) = 0x100000001;
        return 1;
      }
    }
    else if (_VideoPacketBuffer_IsFrameComplete(a2, 0))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v30 = VRTraceErrorLogLevelToCSTR();
        __int16 v31 = *MEMORY[0x1E4F47A50];
        unsigned int v32 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            int v33 = **(unsigned __int16 **)(a2 + 96);
            int v34 = *(_DWORD *)(a2 + 12);
            int v35 = *(unsigned __int8 *)(a2 + 152);
            int v36 = *(unsigned __int8 *)(a2 + 153);
            int v114 = 136317186;
            uint64_t v115 = v30;
            __int16 v116 = 2080;
            uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
            __int16 v118 = 1024;
            int v119 = 1855;
            __int16 v120 = 2048;
            uint64_t v121 = a1;
            __int16 v122 = 1024;
            int v123 = v33;
            __int16 v124 = 1024;
            int v125 = v34;
            __int16 v126 = 1024;
            int v127 = a4;
            __int16 v128 = 1024;
            int v129 = v35;
            __int16 v130 = 1024;
            int v131 = v36;
            _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Scheduling Regular Frame seq:%u frameTimestamp:%u playoutRTPTimestamp:%u, isTemporalScaledStream=%d, isBaseLayerStream=%d", (uint8_t *)&v114, 0x44u);
          }
        }
        else if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          int v106 = **(unsigned __int16 **)(a2 + 96);
          int v107 = *(_DWORD *)(a2 + 12);
          int v108 = *(unsigned __int8 *)(a2 + 152);
          int v109 = *(unsigned __int8 *)(a2 + 153);
          int v114 = 136317186;
          uint64_t v115 = v30;
          __int16 v116 = 2080;
          uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
          __int16 v118 = 1024;
          int v119 = 1855;
          __int16 v120 = 2048;
          uint64_t v121 = a1;
          __int16 v122 = 1024;
          int v123 = v106;
          __int16 v124 = 1024;
          int v125 = v107;
          __int16 v126 = 1024;
          int v127 = a4;
          __int16 v128 = 1024;
          int v129 = v108;
          __int16 v130 = 1024;
          int v131 = v109;
          _os_log_debug_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Scheduling Regular Frame seq:%u frameTimestamp:%u playoutRTPTimestamp:%u, isTemporalScaledStream=%d, isBaseLayerStream=%d", (uint8_t *)&v114, 0x44u);
        }
      }
      *a3 = *(_DWORD *)(a2 + 12);
      BOOL result = 1;
      *(_DWORD *)(a2 + 48) = 1;
      return result;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return 0;
    }
    uint64_t v37 = VRTraceErrorLogLevelToCSTR();
    uint64_t v38 = *MEMORY[0x1E4F47A50];
    uint64_t v39 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      BOOL v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (!v40) {
        return result;
      }
      int v41 = **(unsigned __int16 **)(a2 + 96);
      int v42 = *(_DWORD *)(a2 + 12);
      int v43 = *(unsigned __int8 *)(a2 + 152);
      int v44 = *(unsigned __int8 *)(a2 + 153);
      int v114 = 136317186;
      uint64_t v115 = v37;
      __int16 v116 = 2080;
      uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
      __int16 v118 = 1024;
      int v119 = 1861;
      __int16 v120 = 2048;
      uint64_t v121 = a1;
      __int16 v122 = 1024;
      int v123 = v41;
      __int16 v124 = 1024;
      int v125 = v42;
      __int16 v126 = 1024;
      int v127 = a4;
      __int16 v128 = 1024;
      int v129 = v43;
      __int16 v130 = 1024;
      int v131 = v44;
      uint64_t v24 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Frame is not yet ready seq:%u frameTimestamp:%u playoutRT"
            "PTimestamp:%u, isTemporalScaledStream=%d, isBaseLayerStream=%d";
LABEL_36:
      __int16 v25 = v38;
      uint32_t v26 = 68;
LABEL_37:
      _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v114, v26);
      return 0;
    }
    BOOL result = os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    int v60 = **(unsigned __int16 **)(a2 + 96);
    int v61 = *(_DWORD *)(a2 + 12);
    int v62 = *(unsigned __int8 *)(a2 + 152);
    int v63 = *(unsigned __int8 *)(a2 + 153);
    int v114 = 136317186;
    uint64_t v115 = v37;
    __int16 v116 = 2080;
    uint64_t v117 = "_VideoPacketBuffer_ScheduleSingleFrame";
    __int16 v118 = 1024;
    int v119 = 1861;
    __int16 v120 = 2048;
    uint64_t v121 = a1;
    __int16 v122 = 1024;
    int v123 = v60;
    __int16 v124 = 1024;
    int v125 = v61;
    __int16 v126 = 1024;
    int v127 = a4;
    __int16 v128 = 1024;
    int v129 = v62;
    __int16 v130 = 1024;
    int v131 = v63;
    int v64 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Frame is not yet ready seq:%u frameTimestamp:%u playoutRTPT"
          "imestamp:%u, isTemporalScaledStream=%d, isBaseLayerStream=%d";
    goto LABEL_51;
  }
  if (!*(unsigned char *)(a2 + 160) && (int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v53 = VRTraceErrorLogLevelToCSTR();
    int v54 = *MEMORY[0x1E4F47A50];
    int v55 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        int v56 = *(_DWORD *)(a2 + 12);
        int v57 = *(unsigned __int16 *)(a2 + 150);
        int v58 = *(unsigned __int16 *)(a1 + 432);
        int v59 = *(unsigned __int8 *)(a1 + 146080);
        int v114 = 136317186;
        uint64_t v115 = v53;
        __int16 v116 = 2080;
        uint64_t v117 = "_VideoPacketBuffer_ShouldSkipTemporalFrameScheduling";
        __int16 v118 = 1024;
        int v119 = 1790;
        __int16 v120 = 2048;
        uint64_t v121 = a1;
        __int16 v122 = 1024;
        int v123 = v56;
        __int16 v124 = 1024;
        int v125 = v57;
        __int16 v126 = 1024;
        int v127 = v58;
        __int16 v128 = 1024;
        int v129 = v59;
        __int16 v130 = 1024;
        int v131 = a4;
        _os_log_impl(&dword_1E1EA4000, v54, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Previous frame is unknown. frameTimestamp=%u frameSequenceNumber=%d lastAssembledFrameSequenceNumber=%u baseLayerFrameAssemblyFailed=%d playoutRTPTimestamp=%u", (uint8_t *)&v114, 0x44u);
      }
    }
    else if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      int v110 = *(_DWORD *)(a2 + 12);
      int v111 = *(unsigned __int16 *)(a2 + 150);
      int v112 = *(unsigned __int16 *)(a1 + 432);
      int v113 = *(unsigned __int8 *)(a1 + 146080);
      int v114 = 136317186;
      uint64_t v115 = v53;
      __int16 v116 = 2080;
      uint64_t v117 = "_VideoPacketBuffer_ShouldSkipTemporalFrameScheduling";
      __int16 v118 = 1024;
      int v119 = 1790;
      __int16 v120 = 2048;
      uint64_t v121 = a1;
      __int16 v122 = 1024;
      int v123 = v110;
      __int16 v124 = 1024;
      int v125 = v111;
      __int16 v126 = 1024;
      int v127 = v112;
      __int16 v128 = 1024;
      int v129 = v113;
      __int16 v130 = 1024;
      int v131 = a4;
      _os_log_debug_impl(&dword_1E1EA4000, v54, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Previous frame is unknown. frameTimestamp=%u frameSequenceNumber=%d lastAssembledFrameSequenceNumber=%u baseLayerFrameAssemblyFailed=%d playoutRTPTimestamp=%u", (uint8_t *)&v114, 0x44u);
    }
  }
  if (!*(_WORD *)(a1 + 432) || !*(unsigned char *)(a2 + 160) || *(_DWORD *)(a2 + 156) == *(unsigned __int16 *)(a1 + 432))
  {
    if (*(unsigned char *)(a2 + 153))
    {
      int v80 = **(unsigned __int16 **)(a2 + 96);
      if (v80 != (unsigned __int16)(*(_WORD *)(a1 + 146088) + 1)
        && (unsigned __int16)(v80 - (*(_WORD *)(a1 + 146088) + 1)) <= 0x7FFEu)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
          return 0;
        }
        uint64_t v81 = VRTraceErrorLogLevelToCSTR();
        uint64_t v38 = *MEMORY[0x1E4F47A50];
        __int16 v82 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          BOOL v83 = os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT);
          BOOL result = 0;
          if (!v83) {
            return result;
          }
          int v84 = *(unsigned __int16 *)(a1 + 146088) + 1;
          int v85 = **(unsigned __int16 **)(a2 + 96);
          int v86 = *(_DWORD *)(a2 + 12);
          int v87 = *(unsigned __int16 *)(a2 + 150);
          int v114 = 136317186;
          uint64_t v115 = v81;
          __int16 v116 = 2080;
          uint64_t v117 = "_VideoPacketBuffer_ShouldSkipTemporalFrameScheduling";
          __int16 v118 = 1024;
          int v119 = 1801;
          __int16 v120 = 2048;
          uint64_t v121 = a1;
          __int16 v122 = 1024;
          int v123 = v84;
          __int16 v124 = 1024;
          int v125 = v85;
          __int16 v126 = 1024;
          int v127 = v86;
          __int16 v128 = 1024;
          int v129 = v87;
          __int16 v130 = 1024;
          int v131 = a4;
          uint64_t v24 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Temporal base layer frame out of order. expectedSeq=%"
                "u seq=%u frameTimestamp=%d baseLayerFrameSequenceNumber=%d playoutRTPTimestamp=%u";
          goto LABEL_36;
        }
        BOOL result = os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        int v97 = *(unsigned __int16 *)(a1 + 146088) + 1;
        int v98 = **(unsigned __int16 **)(a2 + 96);
        int v99 = *(_DWORD *)(a2 + 12);
        int v100 = *(unsigned __int16 *)(a2 + 150);
        int v114 = 136317186;
        uint64_t v115 = v81;
        __int16 v116 = 2080;
        uint64_t v117 = "_VideoPacketBuffer_ShouldSkipTemporalFrameScheduling";
        __int16 v118 = 1024;
        int v119 = 1801;
        __int16 v120 = 2048;
        uint64_t v121 = a1;
        __int16 v122 = 1024;
        int v123 = v97;
        __int16 v124 = 1024;
        int v125 = v98;
        __int16 v126 = 1024;
        int v127 = v99;
        __int16 v128 = 1024;
        int v129 = v100;
        __int16 v130 = 1024;
        int v131 = a4;
        int v64 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Temporal base layer frame out of order. expectedSeq=%u "
              "seq=%u frameTimestamp=%d baseLayerFrameSequenceNumber=%d playoutRTPTimestamp=%u";
LABEL_51:
        int v65 = v38;
        uint32_t v66 = 68;
LABEL_52:
        _os_log_debug_impl(&dword_1E1EA4000, v65, OS_LOG_TYPE_DEBUG, v64, (uint8_t *)&v114, v66);
        return 0;
      }
    }
    goto LABEL_9;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    return 0;
  }
  uint64_t v88 = VRTraceErrorLogLevelToCSTR();
  v89 = *MEMORY[0x1E4F47A50];
  __int16 v90 = *MEMORY[0x1E4F47A50];
  if (*MEMORY[0x1E4F47A40])
  {
    BOOL v91 = os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v91) {
      return result;
    }
    int v92 = *(_DWORD *)(a2 + 12);
    int v93 = *(unsigned __int16 *)(a2 + 150);
    int v94 = *(_DWORD *)(a2 + 156);
    int v95 = *(unsigned __int16 *)(a1 + 432);
    int v96 = *(unsigned __int8 *)(a1 + 146080);
    int v114 = 136317442;
    uint64_t v115 = v88;
    __int16 v116 = 2080;
    uint64_t v117 = "_VideoPacketBuffer_ShouldSkipTemporalFrameScheduling";
    __int16 v118 = 1024;
    int v119 = 1795;
    __int16 v120 = 2048;
    uint64_t v121 = a1;
    __int16 v122 = 1024;
    int v123 = v92;
    __int16 v124 = 1024;
    int v125 = v93;
    __int16 v126 = 1024;
    int v127 = v94;
    __int16 v128 = 1024;
    int v129 = v95;
    __int16 v130 = 1024;
    int v131 = v96;
    __int16 v132 = 1024;
    int v133 = a4;
    uint64_t v24 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Trying to assemble a frame while previous frame assembly is"
          " pending. frameTimestamp=%u frameSequenceNumber=%d previousFrameSequenceNumber=%d lastAssembledFrameSequenceNu"
          "mber=%u baseLayerFrameAssemblyFailed=%d playoutRTPTimestamp=%u";
    __int16 v25 = v89;
    uint32_t v26 = 74;
    goto LABEL_37;
  }
  BOOL result = os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    int v101 = *(_DWORD *)(a2 + 12);
    int v102 = *(unsigned __int16 *)(a2 + 150);
    int v103 = *(_DWORD *)(a2 + 156);
    int v104 = *(unsigned __int16 *)(a1 + 432);
    int v105 = *(unsigned __int8 *)(a1 + 146080);
    int v114 = 136317442;
    uint64_t v115 = v88;
    __int16 v116 = 2080;
    uint64_t v117 = "_VideoPacketBuffer_ShouldSkipTemporalFrameScheduling";
    __int16 v118 = 1024;
    int v119 = 1795;
    __int16 v120 = 2048;
    uint64_t v121 = a1;
    __int16 v122 = 1024;
    int v123 = v101;
    __int16 v124 = 1024;
    int v125 = v102;
    __int16 v126 = 1024;
    int v127 = v103;
    __int16 v128 = 1024;
    int v129 = v104;
    __int16 v130 = 1024;
    int v131 = v105;
    __int16 v132 = 1024;
    int v133 = a4;
    int v64 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Trying to assemble a frame while previous frame assembly is"
          " pending. frameTimestamp=%u frameSequenceNumber=%d previousFrameSequenceNumber=%d lastAssembledFrameSequenceNu"
          "mber=%u baseLayerFrameAssemblyFailed=%d playoutRTPTimestamp=%u";
    int v65 = v89;
    uint32_t v66 = 74;
    goto LABEL_52;
  }
  return result;
}

uint64_t VideoPacketBuffer_FrameReadyForRecovery(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 40)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 96);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    if (!*(_DWORD *)(v1 + 24)) {
      goto LABEL_8;
    }
    unsigned int v2 = *(_DWORD *)(v1 + 32);
    if (v2 >> 30) {
      break;
    }
    if ((v2 & 0x8000) != 0) {
      return 1;
    }
LABEL_8:
    uint64_t v1 = *(void *)(v1 + 104);
    if (!v1) {
      return 0;
    }
  }
  if ((v2 & 0x4000) == 0) {
    goto LABEL_8;
  }
  return 1;
}

uint64_t RecoverOneFrame(uint64_t a1, int *a2)
{
  v204[15] = *MEMORY[0x1E4F143B8];
  if (!a2[10]) {
    return 0;
  }
  unsigned int v2 = (unsigned int *)a2;
  char v4 = (uint64_t *)(a2 + 24);
  uint64_t v3 = *((void *)a2 + 12);
  if (!v3) {
    return 0;
  }
  int v5 = 0;
  uint64_t v183 = a1 + 146032;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 32);
    if (v6 >> 30) {
      char v7 = 15;
    }
    else {
      char v7 = 16;
    }
    int v8 = (v6 >> v7) & 0x7F;
    if (v8 >= v5) {
      int v5 = v8 + 1;
    }
    uint64_t v3 = *(void *)(v3 + 104);
  }
  while (v3);
  if (v5 < 1) {
    return 0;
  }
  int v9 = 0;
  uint64_t v10 = 0;
  structureCFAllocatorRef Allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v11 = *((void *)a2 + 12);
  BOOL v179 = (uint64_t *)(a2 + 24);
  while (2)
  {
    uint64_t v12 = 0;
    if (v11)
    {
      int v13 = v4;
      do
      {
        unsigned int v14 = *(_DWORD *)(v11 + 32);
        if (v14 >> 30) {
          char v15 = 15;
        }
        else {
          char v15 = 16;
        }
        int v16 = (v14 >> v15) & 0x7F;
        uint64_t v17 = (uint64_t *)(v11 + 104);
        if (v16 == v9)
        {
          uint64_t *v13 = *v17;
          *uint64_t v17 = 0;
          if (v12)
          {
            uint64_t v18 = v12;
            do
            {
              uint64_t v19 = v18;
              uint64_t v18 = *(void *)(v18 + 104);
            }
            while (v18);
            *(void *)(v19 + 104) = v11;
          }
          else
          {
            uint64_t v12 = v11;
          }
        }
        else
        {
          int v13 = (uint64_t *)(v11 + 104);
        }
        uint64_t v11 = *v13;
      }
      while (*v13);
    }
    unsigned int v20 = *v2;
    __int16 v184 = *((_WORD *)v2 + 75);
    unsigned int v21 = v2[3];
    unsigned int v180 = v2[4];
    memset(v204, 0, 120);
    memset(__b, 0, 15);
    v200[1] = 0;
    v200[0] = 0;
    *(void *)((char *)v201 + 6) = 0;
    v201[0] = 0;
    memset(v199, 0, 60);
    memset(v198, 0, 60);
    memset(v197, 0, 60);
    memset(v196, 0, 14);
    uint64_t v190 = 0;
    memset(v203, 0, 120);
    if (v12)
    {
      uint64_t v181 = v10;
      int v23 = (unsigned int *)(v12 + 32);
      unsigned int v22 = *(_DWORD *)(v12 + 32);
      BOOL v24 = v22 >> 30 == 0;
      unsigned int v25 = HIWORD(v22);
      unsigned int v26 = v22 >> 15;
      if (v22 >> 30) {
        LOBYTE(v25) = v22 >> 15;
      }
      if ((v25 & 0x7F) != v9)
      {
        unsigned int v187 = 0;
        int v189 = 0;
        int v56 = 0;
        goto LABEL_176;
      }
      unsigned int v175 = v21;
      unsigned int v176 = v20;
      int v189 = 0;
      int v185 = 0;
      int v27 = 0;
      LODWORD(v28) = 0;
      uint64_t v29 = 0;
      int v188 = -1431655766;
      uint64_t v30 = v12;
      while (1)
      {
        unsigned int v31 = v22;
        if (!v29)
        {
          unsigned int v32 = (v22 >> 11) & 7;
          BOOL v33 = *(_DWORD *)(v30 + 24) != 0;
          if (v24) {
            size_t v28 = v32;
          }
          else {
            size_t v28 = (v31 >> 10) & 0xF;
          }
          if (v24) {
            unsigned int v34 = v26;
          }
          else {
            unsigned int v34 = v31 >> 14;
          }
          if (v28) {
            memset(__b, 255, v28);
          }
          int v188 = v31 >> 30;
          int v185 = v34 & v33;
          RSU_GetPacketLayout((v31 >> 27) & 7, v28, (int *)&v190 + 1, (int *)&v190);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v186 = VRTraceErrorLogLevelToCSTR();
            int v35 = *MEMORY[0x1E4F47A50];
            int v36 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              {
                if (*(_DWORD *)(v30 + 24))
                {
                  if (*v23 >> 30) {
                    int v37 = 0x400000;
                  }
                  else {
                    int v37 = 0x800000;
                  }
                  uint64_t v38 = "data";
                  if ((v37 & *v23) == 0) {
                    uint64_t v38 = "parity";
                  }
                }
                else
                {
                  uint64_t v38 = "data";
                }
                *(_DWORD *)buf = 136316674;
                *(void *)&uint8_t buf[4] = v186;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "RecoverOneFECGroup";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&buf[24] = 842;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v38;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&unsigned char buf[40] = v31 >> 30;
                __int16 v192 = 1024;
                *(_DWORD *)char v193 = HIDWORD(v190);
                *(_WORD *)&v193[4] = 1024;
                *(_DWORD *)&v193[6] = v190;
                _os_log_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d Received %s packet FEC Header version %d with numberOfDataPackets: %d, numberOfParityPackets:%d", buf, 0x38u);
              }
            }
            else if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v39 = "data";
              if (*(_DWORD *)(v30 + 24))
              {
                int v40 = *v23 >> 30 ? 0x400000 : 0x800000;
                uint64_t v39 = "data";
                if ((v40 & *v23) == 0) {
                  uint64_t v39 = "parity";
                }
              }
              *(_DWORD *)buf = 136316674;
              *(void *)&uint8_t buf[4] = v186;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "RecoverOneFECGroup";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&buf[24] = 842;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = v39;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&unsigned char buf[40] = v31 >> 30;
              __int16 v192 = 1024;
              *(_DWORD *)char v193 = HIDWORD(v190);
              *(_WORD *)&v193[4] = 1024;
              *(_DWORD *)&v193[6] = v190;
              _os_log_debug_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d Received %s packet FEC Header version %d with numberOfDataPackets: %d, numberOfParityPackets:%d", buf, 0x38u);
            }
          }
          uint64_t v29 = (v31 >> 27) & 7;
        }
        unsigned int v41 = *v23;
        unsigned int v42 = *v23 >> 30;
        if (v42) {
          unsigned int v43 = (*v23 >> 23) & 0xF;
        }
        else {
          unsigned int v43 = HIBYTE(*v23) & 7;
        }
        if (*(_DWORD *)(v30 + 24))
        {
          unsigned int v44 = v41 >> 23;
          unsigned int v45 = v41 >> 22;
          if (!v42) {
            LOBYTE(v45) = v44;
          }
          if ((v45 & 1) == 0)
          {
            v189 += *(_DWORD *)(v30 + 96);
            if (v188 == 1)
            {
              v196[v43 / v29] = *(_WORD *)(v30 + 76);
            }
            else if (!v188 && !LODWORD(v197[0]))
            {
              uint64_t v46 = *(unsigned int *)(v30 + 68);
              if ((int)v46 >= 1)
              {
                uint64_t v47 = (unsigned int *)(v30 + 36);
                BOOL v48 = (unsigned int *)v197;
                do
                {
                  unsigned int v50 = *v47++;
                  unsigned int v49 = v50;
                  if (v50 >= 0x5DD)
                  {
                    unsigned int v187 = v29;
                    int v137 = v31 & 0x3FF;
                    unsigned int v2 = (unsigned int *)a2;
                    a2[15] = 3;
                    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
                    {
                      int v124 = 0;
                      uint64_t v58 = 0;
                      uint64_t v125 = 0xFFFFFFFFLL;
                      uint64_t v10 = v181;
                      int v57 = v137;
                      char v4 = v179;
                    }
                    else
                    {
                      uint64_t v138 = VRTraceErrorLogLevelToCSTR();
                      BOOL v139 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                      {
                        unsigned int v168 = *v48;
                        *(_DWORD *)buf = 136316418;
                        *(void *)&uint8_t buf[4] = v138;
                        *(_WORD *)&unsigned char buf[12] = 2080;
                        *(void *)&buf[14] = "RecoverOneFECGroup";
                        *(_WORD *)&unsigned char buf[22] = 1024;
                        *(_DWORD *)&buf[24] = 858;
                        *(_WORD *)&buf[28] = 1024;
                        *(_DWORD *)&buf[30] = 858;
                        *(_WORD *)&buf[34] = 2048;
                        *(void *)&buf[36] = a1;
                        __int16 v192 = 1024;
                        *(_DWORD *)char v193 = v168;
                        _os_log_error_impl(&dword_1E1EA4000, v139, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoPacketBuffer.c:%d: VideoPacketBuffer[%p] packet size (%d) is too big", buf, 0x32u);
                      }
                      int v124 = 0;
                      uint64_t v58 = 0;
                      uint64_t v125 = 0xFFFFFFFFLL;
                      int v57 = v137;
                      char v4 = v179;
                      uint64_t v10 = v181;
                      unsigned int v2 = (unsigned int *)a2;
                    }
                    goto LABEL_223;
                  }
                  *v48++ = v49;
                  --v46;
                }
                while (v46);
              }
            }
            v43 += 8;
          }
        }
        if ((int)v29 >= 1)
        {
          uint64_t v51 = v29;
          memset(&__b[v43], 255, v29);
          uint64_t v29 = v51;
        }
        uint64_t v52 = ((int)(v43 - v28) / (int)v29);
        if (v52 >= 0xF) {
          break;
        }
        uint64_t v53 = v204[v52];
        if (v53)
        {
          unsigned int v187 = v29;
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            goto LABEL_188;
          }
          uint64_t v131 = VRTraceErrorLogLevelToCSTR();
          __int16 v132 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_188;
          }
          int v160 = *(_DWORD *)(v53 + 24);
          unsigned int v161 = *(_DWORD *)(v53 + 32);
          unsigned int v162 = v161 >> 30;
          if (v161 >> 30) {
            char v163 = 22;
          }
          else {
            char v163 = 23;
          }
          BOOL v164 = ((v161 >> v163) & 1) == 0;
          *(_DWORD *)buf = 136316930;
          if (v160) {
            BOOL v165 = v164;
          }
          else {
            BOOL v165 = 0;
          }
          *(void *)&uint8_t buf[4] = v131;
          int v166 = HIBYTE(v161) & 7;
          int v167 = (v161 >> 23) & 0xF;
          *(_WORD *)&unsigned char buf[12] = 2080;
          if (!v162) {
            int v167 = v166;
          }
          *(void *)&buf[14] = "RecoverOneFECGroup";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&buf[24] = 891;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a1;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&unsigned char buf[40] = v9;
          __int16 v192 = 2048;
          *(void *)char v193 = v53;
          *(_WORD *)&v193[8] = 1024;
          *(_DWORD *)int v194 = v165;
          *(_WORD *)&v194[4] = 1024;
          int v195 = v167;
          __int16 v128 = v132;
          int v129 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Unexpected duplicate packet found! GroupID=%d packet"
                 "=%p parity=%d position=%d";
          uint32_t v130 = 66;
LABEL_250:
          _os_log_error_impl(&dword_1E1EA4000, v128, OS_LOG_TYPE_ERROR, v129, buf, v130);
LABEL_188:
          int v124 = 0;
          uint64_t v58 = 0;
          int v57 = v31 & 0x3FF;
          unsigned int v2 = (unsigned int *)a2;
          a2[15] = 3;
          uint64_t v125 = 0xFFFFFFFFLL;
          char v4 = v179;
          uint64_t v10 = v181;
          goto LABEL_223;
        }
        v203[v52] = *(void *)(v30 + 136);
        v204[v52] = v30;
        int v54 = *(_DWORD *)(v30 + 128);
        v199[v52] = v54;
        v198[v52] = v54;
        if (v27 <= v54) {
          int v27 = v54;
        }
        *((_WORD *)v200 + v52) = *(_WORD *)v30;
        *(_DWORD *)(v30 + 80) = 1;
        *(_DWORD *)(v30 + 20) = 0;
        uint64_t v30 = *(void *)(v30 + 104);
        if (!v30)
        {
          int v57 = v31 & 0x3FF;
          if ((int)v28 <= 7)
          {
            uint64_t v10 = v181;
            goto LABEL_89;
          }
          unsigned int v187 = v29;
          uint64_t v58 = 0;
          uint64_t v10 = v181;
LABEL_193:
          uint64_t v125 = 0;
          int v124 = 1;
          unsigned int v2 = (unsigned int *)a2;
          a2[15] = 1;
LABEL_194:
          char v4 = v179;
          goto LABEL_223;
        }
        int v23 = (unsigned int *)(v30 + 32);
        unsigned int v22 = *(_DWORD *)(v30 + 32);
        BOOL v24 = v22 >> 30 == 0;
        unsigned int v55 = HIWORD(v22);
        unsigned int v26 = v22 >> 15;
        if (v22 >> 30) {
          LOBYTE(v55) = v22 >> 15;
        }
        if ((v55 & 0x7F) != v9)
        {
          unsigned int v187 = v29;
          int v56 = v31 & 0x3FF;
          unsigned int v2 = (unsigned int *)a2;
LABEL_176:
          v2[15] = 3;
          uint64_t v10 = v181;
          if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          {
            int v124 = 0;
            uint64_t v58 = 0;
            uint64_t v125 = 0xFFFFFFFFLL;
          }
          else
          {
            uint64_t v122 = VRTraceErrorLogLevelToCSTR();
            int v123 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = v122;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "RecoverOneFECGroup";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&buf[24] = 826;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = a1;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&unsigned char buf[40] = v9;
              _os_log_error_impl(&dword_1E1EA4000, v123, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] group_id mismatch, expected (%d)", buf, 0x2Cu);
            }
            int v124 = 0;
            uint64_t v58 = 0;
            uint64_t v125 = 0xFFFFFFFFLL;
          }
          int v57 = v56;
          goto LABEL_194;
        }
      }
      unsigned int v187 = v29;
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        goto LABEL_188;
      }
      uint64_t v126 = VRTraceErrorLogLevelToCSTR();
      int v127 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        goto LABEL_188;
      }
      *(_DWORD *)buf = 136316930;
      *(void *)&uint8_t buf[4] = v126;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "RecoverOneFECGroup";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&buf[24] = 880;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a1;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&unsigned char buf[40] = v52;
      __int16 v192 = 1024;
      *(_DWORD *)char v193 = v43;
      *(_WORD *)&v193[4] = 1024;
      *(_DWORD *)&v193[6] = v28;
      *(_WORD *)int v194 = 1024;
      *(_DWORD *)&v194[2] = v187;
      __int16 v128 = v127;
      int v129 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Unexpected index index=%d startPosition=%d dataPacketOff"
             "set=%d numberOfSymbolsPerPacket=%d";
      uint32_t v130 = 62;
      goto LABEL_250;
    }
    unsigned int v175 = v21;
    unsigned int v176 = v20;
    LODWORD(v29) = 0;
    LODWORD(v28) = 0;
    int v27 = 0;
    int v185 = 0;
    int v189 = 0;
    int v57 = 0;
    int v188 = -1431655766;
LABEL_89:
    LODWORD(v58) = 0;
    int v59 = 0;
    uint64_t v60 = v28;
    uint64_t v61 = v183;
    do
    {
      if (__b[v60])
      {
        uint64_t v58 = v58;
      }
      else
      {
        ++v59;
        uint64_t v58 = (v58 + 1);
      }
      ++v60;
    }
    while (v60 != 8);
    unsigned int v187 = v29;
    if (!v59) {
      goto LABEL_193;
    }
    int v173 = v57;
    for (uint64_t i = 0; i != 7; ++i)
    {
      if (!__b[i + 8]) {
        ++v59;
      }
    }
    if (!RSU_IsRecoverable(v59))
    {
      int v124 = 0;
      unsigned int v2 = (unsigned int *)a2;
      a2[15] = 2;
      uint64_t v125 = 0xFFFFFFFFLL;
      char v4 = v179;
      goto LABEL_222;
    }
    uint64_t v182 = v10;
    int v63 = HIDWORD(v190);
    int v64 = v190;
    LODWORD(v65) = v190 + HIDWORD(v190);
    int v66 = v187;
    if ((int)v190 + HIDWORD(v190) < 1)
    {
LABEL_123:
      int v83 = RSU_Decode((uint64_t)v203, v199, v198, v65, v66, v28, (uint64_t)v196, v188 == 1);
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (v83 < 0)
      {
        char v4 = v179;
        unsigned int v2 = (unsigned int *)a2;
        if (ErrorLogLevelForModule < 3) {
          goto LABEL_220;
        }
        uint64_t v133 = VRTraceErrorLogLevelToCSTR();
        uint64_t v134 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_220;
        }
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = v133;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "RecoverOneFECGroup";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1021;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 1021;
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = a1;
        __int16 v192 = 1024;
        *(_DWORD *)char v193 = 0;
        unsigned int v135 = v134;
        int v136 = "VideoPacketBuffer [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sour"
               "ces/Others/VideoPacketBuffer.c:%d: VideoPacketBuffer[%p] RSU_Decode failed (%d)";
LABEL_254:
        _os_log_error_impl(&dword_1E1EA4000, v135, OS_LOG_TYPE_ERROR, v136, buf, 0x32u);
LABEL_220:
        uint64_t v125 = 0;
        v2[15] = 3;
        int v124 = 1;
        goto LABEL_221;
      }
      char v4 = v179;
      unsigned int v2 = (unsigned int *)a2;
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v91 = VRTraceErrorLogLevelToCSTR();
        int v92 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316674;
          *(void *)&uint8_t buf[4] = v91;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "RecoverOneFECGroup";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&buf[24] = 1028;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a1;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&unsigned char buf[40] = v175;
          __int16 v192 = 1024;
          *(_DWORD *)char v193 = v9;
          *(_WORD *)&v193[4] = 1024;
          *(_DWORD *)&v193[6] = v185;
          _os_log_impl(&dword_1E1EA4000, v92, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] recovered frame (%08X) group (%d:%d)", buf, 0x38u);
        }
      }
      int v93 = HIDWORD(v190);
      if (v188 == 1 && SHIDWORD(v190) >= 1)
      {
        int v94 = v199;
        int v95 = v204;
        uint64_t v96 = HIDWORD(v190);
        while (1)
        {
          uint64_t v97 = *v94;
          if ((int)v97 >= 1501) {
            break;
          }
          uint64_t v98 = *v95++;
          *(void *)(v98 + 128) = v97;
          ++v94;
          if (!--v96) {
            goto LABEL_132;
          }
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          goto LABEL_220;
        }
        uint64_t v153 = VRTraceErrorLogLevelToCSTR();
        int v154 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_220;
        }
        int v169 = *v94;
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = v153;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "RecoverOneFECGroup";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1034;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 1034;
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = a1;
        __int16 v192 = 1024;
        *(_DWORD *)char v193 = v169;
        unsigned int v135 = v154;
        int v136 = "VideoPacketBuffer [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sour"
               "ces/Others/VideoPacketBuffer.c:%d: VideoPacketBuffer[%p] payload size (%d) is too big";
        goto LABEL_254;
      }
LABEL_132:
      uint64_t v99 = (v190 + v93);
      if ((int)v190 >= 1)
      {
        uint64_t v100 = v93;
        do
          *(void *)(v204[v100++] + 128) = v27;
        while (v100 < (int)v99);
      }
      uint64_t v12 = v204[0];
      if ((int)v99 > 1)
      {
        uint64_t v101 = v99 - 1;
        int v102 = &v204[1];
        uint64_t v103 = v204[0];
        do
        {
          uint64_t v104 = *v102++;
          *(void *)(v103 + 104) = v104;
          uint64_t v103 = v104;
          --v101;
        }
        while (v101);
      }
      *(void *)(v204[(int)v99 - 1] + 104) = 0;
      uint64_t v105 = v176;
      if (v93 < 1)
      {
LABEL_191:
        uint64_t v125 = 0;
        a2[15] = 4;
        int v124 = 1;
        uint64_t v10 = v182;
        goto LABEL_222;
      }
      uint64_t v106 = 0;
      int v107 = v204;
      while (1)
      {
        uint64_t v108 = v204[v106];
        if (!*(_DWORD *)(v108 + 24)) {
          break;
        }
        unsigned int v109 = *(_DWORD *)(v108 + 32);
        if (v109 >> 30)
        {
          if ((v109 & 0x400000) != 0) {
            break;
          }
        }
        else if ((v109 & 0x800000) != 0)
        {
          break;
        }
        *(_DWORD *)(v108 + 80) = 4;
LABEL_172:
        ++v106;
        ++v107;
        if (v106 >= v93) {
          goto LABEL_191;
        }
      }
      if (v105 == 123 || v105 == 100)
      {
        if (*(_DWORD *)(v108 + 20))
        {
          *(_DWORD *)(v108 + 80) = 3;
          if (v106 == v93 - 1) {
            *(_DWORD *)(v108 + 16) = 1;
          }
        }
LABEL_169:
        uint64_t v120 = *(void *)(v183 + 64);
        if (v120 && *(_DWORD *)(v108 + 80) == 3)
        {
          *(_OWORD *)buf = xmmword_1E259E4E8;
          *(_OWORD *)&buf[16] = unk_1E259E4F8;
          *(_DWORD *)buf = *(_DWORD *)(v108 + 4);
          *(_WORD *)&uint8_t buf[4] = *(_WORD *)v108;
          *(void *)&buf[8] = *(void *)(v108 + 88);
          buf[16] = 0;
          *(_DWORD *)&buf[20] = *(_DWORD *)(v108 + 84);
          buf[24] = 1;
          *(_WORD *)&buf[26] = v184;
          *(_WORD *)&buf[28] = *(void *)(v108 + 128);
          *(_WORD *)&buf[30] = 1;
          uint64_t v121 = v105;
          VCNACKGenerator_AddPacketInfo(v120, (double *)buf, v85, v86, v87, v88, v89, v90);
          uint64_t v105 = v121;
          int v93 = HIDWORD(v190);
        }
        goto LABEL_172;
      }
      if (!*(_DWORD *)(v108 + 20))
      {
        if (v106)
        {
          if (*(_DWORD *)(v108 + 8))
          {
            uint64_t v113 = v204[(v106 - 1)];
            if (*(_DWORD *)(v113 + 20)) {
              *(_DWORD *)(v113 + 12) = 1;
            }
          }
        }
        goto LABEL_169;
      }
      *(_DWORD *)(v108 + 80) = 3;
      uint64_t v110 = v105;
      int FrameSliceHeader = ReadFrameSliceHeader(v105, *(void *)(v108 + 136) + 4, *(_DWORD *)(v108 + 128) - 4, 0);
      if (FrameSliceHeader == 1)
      {
        if (v106 >= SHIDWORD(v190))
        {
          unsigned int v114 = 0;
          uint64_t v105 = v110;
        }
        else
        {
          unsigned int v114 = 0;
          uint64_t v115 = HIDWORD(v190);
          __int16 v116 = v107;
          uint64_t v105 = v110;
          do
          {
            uint64_t v117 = *v116++;
            v114 += *(_DWORD *)(v117 + 128);
            --v115;
          }
          while (v106 != v115);
        }
        char v4 = v179;
        if (bswap32(**(_DWORD **)(v108 + 136)) + 4 > v114
          || (*(_DWORD *)(v108 + 8) = 1, !v106)
          || (v118 = v204[(v106 - 1)], v119 = *(_DWORD *)(v118 + 12), int v112 = (_DWORD *)(v118 + 12), v119))
        {
LABEL_167:
          int v93 = HIDWORD(v190);
          if (v106 == HIDWORD(v190) - 1) {
            *(void *)(v108 + 12) = 0x100000001;
          }
          goto LABEL_169;
        }
      }
      else
      {
        uint64_t v105 = v110;
        char v4 = v179;
        if (FrameSliceHeader != 2) {
          goto LABEL_167;
        }
        *(_DWORD *)(v108 + 8) = 1;
        int v112 = (_DWORD *)(v108 + 12);
      }
      *int v112 = 1;
      goto LABEL_167;
    }
    uint64_t v67 = 0;
    while (1)
    {
      if (v203[v67])
      {
        LODWORD(v65) = v63 + v64;
        goto LABEL_122;
      }
      int v68 = (char *)VCMemoryPool_Alloc(*(OSQueueHead **)v61);
      if (!v68) {
        break;
      }
      int v69 = v68;
      v204[v67] = v68;
      int v70 = (CFTypeRef *)(v68 + 120);
      OSStatus v71 = CMBlockBufferCreateWithMemoryBlock(structureAllocator, 0, 0x5DCuLL, *(CFAllocatorRef *)(v61 + 16), 0, 0, 0x5DCuLL, 1u, (CMBlockBufferRef *)v68 + 15);
      if (v71)
      {
        OSStatus v145 = v71;
        uint64_t v10 = v182;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v146 = VRTraceErrorLogLevelToCSTR();
          v147 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = v146;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "VideoPacketBuffer_CreateBlockBufferForPacket";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 543;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a1;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&unsigned char buf[40] = v145;
            _os_log_error_impl(&dword_1E1EA4000, v147, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create block buffer with error %d", buf, 0x2Cu);
          }
        }
LABEL_214:
        unsigned int v2 = (unsigned int *)a2;
        a2[15] = 3;
        VCMemoryPool_Free(*(OSQueueHead **)v183, v69);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v151 = VRTraceErrorLogLevelToCSTR();
          int v152 = *MEMORY[0x1E4F47A50];
          char v4 = v179;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_216;
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = v151;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "RecoverOneFECGroup";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&buf[24] = 966;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a1;
          v142 = v152;
          v143 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Block buffer init failed";
          uint32_t v144 = 38;
          goto LABEL_252;
        }
        int v124 = 0;
        uint64_t v125 = 0xFFFFFFFFLL;
        char v4 = v179;
        goto LABEL_222;
      }
      OSStatus DataPointer = CMBlockBufferGetDataPointer(*((CMBlockBufferRef *)v69 + 15), 0, 0, 0, (char **)v69 + 17);
      if (DataPointer)
      {
        OSStatus v148 = DataPointer;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v149 = VRTraceErrorLogLevelToCSTR();
          BOOL v150 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = v149;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "VideoPacketBuffer_CreateBlockBufferForPacket";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 549;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a1;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&unsigned char buf[40] = v148;
            _os_log_error_impl(&dword_1E1EA4000, v150, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to get data pointer with error %d", buf, 0x2Cu);
          }
        }
        uint64_t v10 = v182;
        if (*v70)
        {
          CFRelease(*v70);
          *int v70 = 0;
        }
        goto LABEL_214;
      }
      int DataLength = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)v69 + 15));
      v203[v67] = *((void *)v69 + 17);
      v198[v67] = DataLength;
      *((_DWORD *)v69 + 20) = 2;
      int v63 = HIDWORD(v190);
      uint64_t v74 = SHIDWORD(v190);
      int v64 = v190;
      uint64_t v65 = (v190 + HIDWORD(v190));
      uint64_t v61 = v183;
      int v66 = v187;
      if ((int)v65 >= 1)
      {
        uint64_t v75 = 0;
        while (!*((_WORD *)v200 + v75))
        {
          if (v65 == ++v75) {
            goto LABEL_116;
          }
        }
        if (v67 >= SHIDWORD(v190)) {
          __int16 v76 = *((_WORD *)v200 + HIDWORD(v190) - 1);
        }
        else {
          __int16 v76 = v67 - v75 + *((_WORD *)v200 + v75);
        }
        *((_WORD *)v200 + v67) = v76;
        *int v69 = v76;
      }
LABEL_116:
      uint64_t v77 = *((int *)v197 + v67);
      *((void *)v69 + 16) = v77;
      *((_DWORD *)v69 + 1) = v180;
      int v78 = v77 & 0x1FFF;
      BOOL v79 = v67 < v74;
      if (v67 >= v74) {
        char v80 = (v67 - v63) * v187;
      }
      else {
        char v80 = v28 + v187 * v67;
      }
      *((_DWORD *)v69 + 6) = 1;
      int v81 = v80 & 7 | (8 * (v187 & 0x1F));
      int v82 = (v9 & 0x7F) << 16;
      if (v79) {
        int v82 = ((v9 & 0x7F) << 16) | 0x800000;
      }
      *((_DWORD *)v69 + 8) = v82 | (v81 << 24) | v78 | (unsigned __int16)(((_WORD)v185 << 15) | ((_WORD)v28 << 11));
      *((_DWORD *)v69 + 17) = v63;
      *(_OWORD *)(v69 + 4) = xmmword_1E259DF30;
      *((void *)v69 + 13) = 0;
LABEL_122:
      if (++v67 >= (int)v65) {
        goto LABEL_123;
      }
    }
    unsigned int v2 = (unsigned int *)a2;
    a2[15] = 3;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v140 = VRTraceErrorLogLevelToCSTR();
      uint64_t v141 = *MEMORY[0x1E4F47A50];
      char v4 = v179;
      uint64_t v10 = v182;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
LABEL_216:
        int v124 = 0;
        uint64_t v125 = 0xFFFFFFFFLL;
        goto LABEL_222;
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = v140;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "RecoverOneFECGroup";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&buf[24] = 955;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 955;
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = a1;
      v142 = v141;
      v143 = "VideoPacketBuffer [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Source"
             "s/Others/VideoPacketBuffer.c:%d: VideoPacketBuffer[%p] malloc failed";
      uint32_t v144 = 44;
LABEL_252:
      _os_log_error_impl(&dword_1E1EA4000, v142, OS_LOG_TYPE_ERROR, v143, buf, v144);
      goto LABEL_216;
    }
    int v124 = 0;
    uint64_t v125 = 0xFFFFFFFFLL;
    char v4 = v179;
LABEL_221:
    uint64_t v10 = v182;
LABEL_222:
    int v57 = v173;
LABEL_223:
    if (v2[15] != 3 && SHIDWORD(v190) >= 1)
    {
      unsigned int v156 = vcvtps_s32_f32((float)(HIDWORD(v190) * v57) / 100.0);
      VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics(a1 + 800 * (v184 & 0x7F) + 42696, v58, (v156 - v189) & ~((int)(v156 - v189) >> 31), v187, SHIDWORD(v190), v9);
    }
    if (v10)
    {
      uint64_t v157 = v10;
      do
      {
        uint64_t v158 = v157;
        uint64_t v157 = *(void *)(v157 + 104);
      }
      while (v157);
      *(void *)(v158 + 104) = v12;
      if (!v124) {
        goto LABEL_257;
      }
LABEL_234:
      uint64_t v11 = *v4;
      ++v9;
      if (*v4) {
        BOOL v159 = v9 == v5;
      }
      else {
        BOOL v159 = 1;
      }
      if (v159)
      {
        uint64_t v125 = 0;
        goto LABEL_257;
      }
      continue;
    }
    break;
  }
  uint64_t v10 = v12;
  if (v124) {
    goto LABEL_234;
  }
LABEL_257:
  if (v10)
  {
    uint64_t v171 = v10;
    do
    {
      uint64_t v172 = v171;
      uint64_t v171 = *(void *)(v171 + 104);
    }
    while (v171);
    *(void *)(v172 + 104) = *v4;
    *char v4 = v10;
  }
  return v125;
}

uint64_t _VideoPacketBuffer_SchedulePastIncompleteFrame_InternalLoop(uint64_t a1, _DWORD *a2, int a3, int a4, int a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 + 145912;
  uint64_t v6 = *(void *)(a1 + 145912);
  if (v6)
  {
    uint64_t v11 = (_WORD *)(a1 + 432);
    uint64_t v12 = (_WORD *)(a1 + 430);
    int v13 = (uint64_t *)(a1 + 145912);
    do
    {
      uint64_t v14 = v6;
      while (1)
      {
        if (*(unsigned char *)(v14 + 149))
        {
          char v15 = (_WORD *)(v14 + 150);
          int v16 = v11;
        }
        else
        {
          char v15 = *(_WORD **)(v14 + 96);
          int v16 = v12;
        }
        if ((unsigned __int16)(*v15 - *v16) < 0x7FFFu) {
          break;
        }
        uint64_t *v13 = *(void *)(v14 + 112);
        *(unsigned char *)(v14 + 161) = _VideoPacketBuffer_IsFrameComplete(v14, 0);
        _VideoPacketBuffer_FreeFrame(a1, (void *)v14);
        --*(_DWORD *)(v5 + 108);
        uint64_t v14 = *v13;
        if (!*v13) {
          return 0;
        }
      }
      if (!*(unsigned char *)(v14 + 152) && **(unsigned __int16 **)(v14 + 96) != (unsigned __int16)(*v12 + 1)) {
        break;
      }
      if (!*(_DWORD *)(v14 + 48) && _VideoPacketBuffer_ScheduleSingleFrame(a1, v14, a2, a3, a4, a5))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v18 = VRTraceErrorLogLevelToCSTR();
          uint64_t v19 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v20 = *(_DWORD *)(a1 + 1040);
            int v21 = *(unsigned __int16 *)(v14 + 150);
            int v22 = *(_DWORD *)(v14 + 156);
            *(_DWORD *)buf = 136316930;
            uint64_t v25 = v18;
            __int16 v26 = 2080;
            int v27 = "_VideoPacketBuffer_SchedulePastIncompleteFrame_InternalLoop";
            __int16 v28 = 1024;
            int v29 = 2054;
            __int16 v30 = 2048;
            uint64_t v31 = a1;
            __int16 v32 = 1024;
            int v33 = v20;
            __int16 v34 = 1024;
            int v35 = a3;
            __int16 v36 = 1024;
            int v37 = v21;
            __int16 v38 = 1024;
            int v39 = v22;
            _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Late frame scheduled lateFramesScheduledCount=%d playoutRTPTimestamp=%u frameSequenceNumber=%u previousFrameSequenceNumber=%u", buf, 0x3Eu);
          }
        }
        ++*(_DWORD *)(a1 + 1040);
        kdebug_trace();
        *(_WORD *)(a1 + 428) = *(_WORD *)(a1 + 430);
        return 1;
      }
      uint64_t v6 = *(void *)(v14 + 112);
      int v13 = (uint64_t *)(v14 + 112);
    }
    while (v6);
  }
  return 0;
}

uint64_t VideoPacketBuffer_SchedulePastIncompleteFrame(uint64_t a1, int a2, _DWORD *a3, unsigned int a4, int a5, int a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a1 && a3)
  {
    uint64_t v12 = a1 + 145912;
    int v13 = (pthread_mutex_t *)(a1 + 360);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
    uint64_t v15 = *(void *)v12;
    if (*(void *)v12)
    {
      if (*(void *)(a1 + 145920)
        && ((double v16 = *(double *)(a1 + 448) - *(double *)(v15 + 24), v16 >= 0.5)
         || (LODWORD(v14) = *(_DWORD *)(v15 + 12), ((double)a4 - (double)v14) / (double)*(int *)(a1 + 8) >= 0.5)))
      {
        *(unsigned char *)(a1 + 145929) = 1;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v21 = VRTraceErrorLogLevelToCSTR();
          int v22 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v23 = *(unsigned __int16 *)(*(void *)v12 + 150);
            int v24 = *(unsigned __int16 *)(*(void *)(a1 + 145920) + 150);
            int v28 = 136317186;
            uint64_t v29 = v21;
            __int16 v30 = 2080;
            uint64_t v31 = "_VideoPacketBuffer_IsIncompleteFramesTooOld";
            __int16 v32 = 1024;
            int v33 = 2013;
            __int16 v34 = 2048;
            uint64_t v35 = a1;
            __int16 v36 = 1024;
            *(_DWORD *)int v37 = a2;
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = a4;
            __int16 v38 = 1024;
            int v39 = v23;
            __int16 v40 = 1024;
            int v41 = v24;
            __int16 v42 = 2048;
            double v43 = v16;
            _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Flushing incomplete frame bufer timestamp=%u playoutRTPTimestamp=%u frameSequenceNumberAtHead=%hu frameSequenceNumberAtTail=%hu diffTime=%5.5f", (uint8_t *)&v28, 0x48u);
          }
        }
        _VideoPacketBuffer_ClearFrameList(a1, (uint64_t *)(a1 + 145912));
        *(void *)(a1 + 145920) = 0;
        *(_DWORD *)(a1 + 146020) = 0;
      }
      else if (*(_DWORD *)(a1 + 145980))
      {
        uint64_t v17 = _VideoPacketBuffer_SchedulePastIncompleteFrame_InternalLoop(a1, a3, a4, a5, a6);
        pthread_mutex_unlock(v13);
        return v17;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v25 = VRTraceErrorLogLevelToCSTR();
      __int16 v26 = *MEMORY[0x1E4F47A50];
      int v27 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          int v28 = 136315906;
          uint64_t v29 = v25;
          __int16 v30 = 2080;
          uint64_t v31 = "VideoPacketBuffer_SchedulePastIncompleteFrame";
          __int16 v32 = 1024;
          int v33 = 2074;
          __int16 v34 = 2048;
          uint64_t v35 = a1;
          _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] schedule pointer is null", (uint8_t *)&v28, 0x26u);
        }
      }
      else if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        VideoPacketBuffer_SchedulePastIncompleteFrame_cold_1();
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 360));
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v19 = VRTraceErrorLogLevelToCSTR();
    int v20 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v28 = 136316162;
      uint64_t v29 = v19;
      __int16 v30 = 2080;
      uint64_t v31 = "VideoPacketBuffer_SchedulePastIncompleteFrame";
      __int16 v32 = 1024;
      int v33 = 2067;
      __int16 v34 = 2048;
      uint64_t v35 = a1;
      __int16 v36 = 2048;
      *(void *)int v37 = a3;
      _os_log_error_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] pointer is null scheduledFrameTimestamps=%p", (uint8_t *)&v28, 0x30u);
    }
  }
  return 0;
}

BOOL VideoPacketBuffer_GetFrameDecodingOrder(uint64_t a1, unsigned char *a2, _WORD *a3, _DWORD *a4)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VideoPacketBuffer_GetFrameDecodingOrder_cold_1();
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 240))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VideoPacketBuffer_GetFrameDecodingOrder_cold_2();
    }
    return 0;
  }
  *a2 = 0;
  *a3 = 0;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  uint64_t v8 = *(void *)(a1 + 145904);
  if (v8)
  {
    while (*(_DWORD *)(v8 + 48))
    {
      uint64_t v8 = *(void *)(v8 + 112);
      if (!v8) {
        goto LABEL_15;
      }
    }
    *a2 = *(unsigned char *)(v8 + 148);
    *a3 = *(_WORD *)(v8 + 146);
    *a4 = *(_DWORD *)(v8 + 12);
  }
LABEL_15:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 360));
  return 1;
}

uint64_t _VideoPacketBuffer_GetStreamIDsForFrameInBuffer(uint64_t a1, uint64_t a2, int a3, unsigned char *a4, void *a5)
{
  int v9 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  if (a2)
  {
    while (*(_DWORD *)(a2 + 12) != a3)
    {
      a2 = *(void *)(a2 + 112);
      if (!a2) {
        goto LABEL_4;
      }
    }
    *a4 = *(unsigned char *)(a2 + 121);
    *a5 = a2 + 122;
    uint64_t v10 = 1;
  }
  else
  {
LABEL_4:
    uint64_t v10 = 0;
  }
  pthread_mutex_unlock(v9);
  return v10;
}

uint64_t VideoPacketBuffer_GetFrameStreamIDs(uint64_t a1, int a2, unsigned char *a3, void *a4)
{
  if (a1)
  {
    uint64_t v8 = a1 + 145904;
    int StreamIDsForFrameInBuffer = _VideoPacketBuffer_GetStreamIDsForFrameInBuffer(a1, *(void *)(a1 + 145904), a2, a3, a4);
    return StreamIDsForFrameInBuffer | _VideoPacketBuffer_GetStreamIDsForFrameInBuffer(a1, *(void *)(v8 + 8), a2, a3, a4);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VideoPacketBuffer_GetFrameStreamIDs_cold_1();
  }
  return 0;
}

BOOL VideoPacketBuffer_FirstIDRReceived(uint64_t a1)
{
  if (a1) {
    return *(_DWORD *)(a1 + 145972) != 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VideoPacketBuffer_FirstIDRReceived_cold_1();
  }
  return 0;
}

void VideoPacketBuffer_SetFrameSize(uint64_t a1, int a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    char v7 = (_DWORD *)(a1 + 145936);
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      int v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136316418;
        uint64_t v12 = v8;
        __int16 v13 = 2080;
        unint64_t v14 = "VideoPacketBuffer_SetFrameSize";
        __int16 v15 = 1024;
        int v16 = 2876;
        __int16 v17 = 2048;
        uint64_t v18 = a1;
        __int16 v19 = 1024;
        int v20 = a2;
        __int16 v21 = 1024;
        int v22 = a3;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] %dx%d", (uint8_t *)&v11, 0x32u);
      }
    }
    uint64_t v10 = (pthread_mutex_t *)(a1 + 360);
    pthread_mutex_lock(v10);
    *char v7 = a2;
    v7[1] = a3;
    pthread_mutex_unlock(v10);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_SetFrameSize_cold_1();
    }
  }
}

uint64_t VideoPacketBuffer_GetNextFrame(uint64_t a1, int a2, uint64_t a3, int *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, unsigned char *a9, void *a10, unsigned __int16 a11, uint64_t a12)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketBuffer_GetNextFrame_cold_1();
      }
    }
    return 0;
  }
  uint64_t v18 = a1 + 145904;
  uint64_t v83 = 0;
  *a6 = 0;
  *a4 = -1;
  __int16 v19 = (pthread_mutex_t *)(a1 + 360);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
  uint64_t v20 = *(void *)v18;
  BOOL v21 = *(void *)v18 != 0;
  if (!*(void *)v18)
  {
    uint64_t v20 = *(void *)(v18 + 8);
    if (!v20)
    {
      pthread_mutex_unlock(v19);
      return 0;
    }
  }
  int v81 = v19;
  BOOL v79 = a4;
  unsigned int v22 = *(_WORD *)(v20 + 150) & 0x7F;
  uint64_t v82 = *(void *)(v20 + 104);
  double v23 = micro();
  if (*(unsigned char *)(v20 + 152)) {
    BOOL v24 = *(unsigned char *)(v20 + 153) == 0;
  }
  else {
    BOOL v24 = 0;
  }
  int v25 = *(_DWORD *)(v18 + 68);
  if (!v25)
  {
    if (!*(_DWORD *)(v20 + 8)) {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      BOOL v77 = v21;
      int v78 = a5;
      uint64_t v29 = 0;
      *(_DWORD *)(v18 + 76) = 1;
      goto LABEL_28;
    }
  }
  int v26 = *(_DWORD *)(v20 + 12) - a2;
  if (v26 < 1)
  {
LABEL_18:
    int v78 = a5;
    BOOL v77 = v21;
    if (!v25 && !*(unsigned char *)(v20 + 55) && *(_DWORD *)(v20 + 8))
    {
      uint64_t v29 = 0;
LABEL_28:
      *(_DWORD *)(v18 + 84) = 13;
LABEL_29:
      uint64_t v28 = 0;
      if (a12 && !v29)
      {
        *(_DWORD *)a12 = *(_DWORD *)v20;
        *(_DWORD *)(a12 + 8) = *(_DWORD *)(v20 + 12);
        *(unsigned char *)(a12 + 14) = *(unsigned char *)(v20 + 120);
        *(unsigned char *)(a12 + 39) = *(unsigned char *)(v20 + 149);
        *(_WORD *)(a12 + 40) = *(_WORD *)(v20 + 150);
        char v31 = *(unsigned char *)(v20 + 152);
        if (v31) {
          char v31 = *(unsigned char *)(v20 + 153) == 0;
        }
        *(unsigned char *)(a12 + 72) = v31;
        *(void *)(a12 + 48) = *(void *)(v20 + 24);
        *(unsigned char *)(a12 + 75) = *(unsigned char *)(v20 + 161);
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        if (a11 >= 2u)
        {
          *(_WORD *)(a12 + 16) = *(_WORD *)(v20 + 146);
          *(unsigned char *)(a12 + 18) = *(unsigned char *)(v20 + 148);
        }
      }
      goto LABEL_58;
    }
    BOOL v30 = _VCVideoPacketBuffer_AssembleFrame(a1, v20, &v83);
    *(unsigned char *)(a1 + 434) = v30;
    uint64_t v29 = v83;
    if (!v30 || !v83)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v70 = VRTraceErrorLogLevelToCSTR();
        OSStatus v71 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v72 = *(_DWORD *)(v20 + 12);
          int v73 = **(unsigned __int16 **)(v20 + 96);
          int v74 = *(unsigned __int16 *)(v20 + 150);
          int v75 = *(unsigned __int8 *)(v20 + 149);
          *(_DWORD *)buf = 136317186;
          uint64_t v85 = v70;
          __int16 v86 = 2080;
          uint64_t v87 = "VideoPacketBuffer_GetNextFrame";
          __int16 v88 = 1024;
          int v89 = 2994;
          __int16 v90 = 2048;
          uint64_t v91 = a1;
          __int16 v92 = 1024;
          int v93 = v72;
          __int16 v94 = 1024;
          int v95 = a2;
          __int16 v96 = 1024;
          int v97 = v73;
          __int16 v98 = 1024;
          int v99 = v74;
          __int16 v100 = 1024;
          int v101 = v75;
          _os_log_impl(&dword_1E1EA4000, v71, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Frame assembly failed frameTS:%u for timestamp:%u seq=%u frameSequenceNumber=%u isFrameSequenceNumberValid=%d", buf, 0x44u);
        }
      }
      goto LABEL_29;
    }
    *(_DWORD *)(v83 + 8) = *(_DWORD *)v20;
    *(_DWORD *)(v29 + 16) = *(_DWORD *)(v20 + 12);
    *(unsigned char *)(v29 + 22) = *(unsigned char *)(v20 + 120);
    *(_DWORD *)(v29 + 40) = *(_DWORD *)(v20 + 4);
    *(_DWORD *)(v29 + 12) = *(_DWORD *)(v18 + 72);
    *(_WORD *)(v29 + 24) = *(_WORD *)(v20 + 146);
    *(unsigned char *)(v29 + 26) = *(unsigned char *)(v20 + 148);
    *(unsigned char *)(v29 + 47) = *(unsigned char *)(v20 + 149);
    *(unsigned char *)(v29 + 82) = *(unsigned char *)(v20 + 56);
    *(_WORD *)(v29 + 48) = *(_WORD *)(v20 + 150);
    *(unsigned char *)(v29 + 46) = *(unsigned char *)(v20 + 54);
    *(void *)(v29 + 56) = *(void *)(v20 + 24);
    if (*(unsigned char *)(v20 + 52))
    {
      *(unsigned char *)(v29 + 23) = 1;
    }
    else
    {
      int v32 = *(unsigned __int8 *)(v20 + 53);
      *(unsigned char *)(v29 + 23) = v32;
      if (!v32)
      {
LABEL_39:
        char v33 = *(unsigned char *)(v20 + 152);
        if (v33) {
          char v33 = *(unsigned char *)(v20 + 153) == 0;
        }
        *(unsigned char *)(v29 + 80) = v33;
        *(unsigned char *)(v29 + 81) = *(_DWORD *)(v20 + 40) != 0;
        VCBlockBuffer_Copy(v20 + 72, v29 + 200);
        *a10 = v29;
        if ((*(unsigned char *)(v20 + 32) & 1) != 0 && !*(_DWORD *)(v18 + 76))
        {
          if (a7) {
            *a7 = 1;
          }
          if (a8)
          {
            if (*(unsigned char *)(a1 + 240)) {
              int v34 = *(unsigned __int16 *)(v20 + 146);
            }
            else {
              int v34 = *(_DWORD *)(v20 + 12);
            }
            *a8 = v34;
          }
        }
        if (a9) {
          *a9 = *(unsigned char *)(v20 + 36);
        }
        if (v26) {
          uint64_t v28 = 2;
        }
        else {
          uint64_t v28 = 1;
        }
        if (*(_DWORD *)(v18 + 72) == 2) {
          *(_DWORD *)(v18 + 72) = 1;
        }
LABEL_58:
        unsigned int v35 = *(_DWORD *)(v20 + 64);
        switch(*(_DWORD *)(v20 + 60))
        {
          case 0:
            break;
          case 1:
            ++*(_DWORD *)(a1 + 40 * v35 + 500);
            break;
          case 2:
            ++*(_DWORD *)(a1 + 40 * v35 + 504);
            break;
          case 3:
            ++*(_DWORD *)(a1 + 40 * v35 + 508);
            break;
          default:
            ++*(_DWORD *)(a1 + 40 * v35 + 512);
            break;
        }
        int v36 = *(unsigned __int8 *)(v20 + 55);
        if (!*(unsigned char *)(v20 + 55) || !*(_DWORD *)(v18 + 76)) {
          *(_DWORD *)(a1 + 424) = *(_DWORD *)(v20 + 12);
        }
        *(double *)(a1 + 440) = v23;
        if (*(unsigned char *)(v18 + 24))
        {
          a5 = v78;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v37 = VRTraceErrorLogLevelToCSTR();
            __int16 v38 = *MEMORY[0x1E4F47A50];
            int v39 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
              {
                int v40 = *(_DWORD *)(v20 + 12);
                int v41 = *(unsigned __int16 *)(v20 + 150);
                *(_DWORD *)buf = 136316418;
                uint64_t v85 = v37;
                __int16 v86 = 2080;
                uint64_t v87 = "VideoPacketBuffer_GetNextFrame";
                __int16 v88 = 1024;
                int v89 = 3063;
                __int16 v90 = 2048;
                uint64_t v91 = a1;
                __int16 v92 = 1024;
                int v93 = v40;
                __int16 v94 = 1024;
                int v95 = v41;
                _os_log_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Assembled incomplete frame with timestamp=%u, frameSequenceNumber=%d. Merging buffers!", buf, 0x32u);
              }
            }
            else if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
              int v63 = *(_DWORD *)(v20 + 12);
              int v64 = *(unsigned __int16 *)(v20 + 150);
              *(_DWORD *)buf = 136316418;
              uint64_t v85 = v37;
              __int16 v86 = 2080;
              uint64_t v87 = "VideoPacketBuffer_GetNextFrame";
              __int16 v88 = 1024;
              int v89 = 3063;
              __int16 v90 = 2048;
              uint64_t v91 = a1;
              __int16 v92 = 1024;
              int v93 = v63;
              __int16 v94 = 1024;
              int v95 = v64;
              _os_log_debug_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Assembled incomplete frame with timestamp=%u, frameSequenceNumber=%d. Merging buffers!", buf, 0x32u);
            }
          }
          uint64_t v44 = (uint64_t *)(v18 + 8);
          uint64_t v43 = *(void *)(v18 + 8);
          if (v43) {
            uint64_t v43 = *(void *)(v43 + 112);
          }
          *uint64_t v44 = v43;
          _VideoPacketBuffer_FreeFrame(a1, (void *)v20);
          uint64_t v45 = *v44;
          if (*v44)
          {
            do
            {
              uint64_t v46 = *(void *)(v45 + 112);
              _VideoPacketBuffer_AddFrameToBufferInOrder((uint64_t *)v18, v45);
              uint64_t v45 = v46;
            }
            while (v46);
          }
          *uint64_t v44 = 0;
          *(void *)(v18 + 16) = 0;
          *(void *)(v18 + 112) = (*(_DWORD *)(v18 + 116) + *(_DWORD *)(v18 + 112) - 1);
          *(unsigned char *)(v18 + 24) = 0;
        }
        else if (!*(unsigned char *)(a1 + 241) || v29 || !*(_DWORD *)(v18 + 76) || *(unsigned char *)(a1 + 434) || *(unsigned char *)(v18 + 25))
        {
          if (v77)
          {
            uint64_t v42 = *(void *)v18;
            a5 = v78;
            if (*(void *)v18) {
              uint64_t v42 = *(void *)(v42 + 112);
            }
            *(void *)uint64_t v18 = v42;
            _VideoPacketBuffer_FreeFrame(a1, (void *)v20);
            --*(_DWORD *)(v18 + 112);
          }
          else
          {
            a5 = v78;
          }
        }
        else
        {
          a5 = v78;
          if (!v36)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v59 = VRTraceErrorLogLevelToCSTR();
              uint64_t v60 = *MEMORY[0x1E4F47A50];
              uint64_t v61 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
                {
                  int v62 = *(unsigned __int16 *)(v20 + 150);
                  *(_DWORD *)buf = 136316162;
                  uint64_t v85 = v59;
                  __int16 v86 = 2080;
                  uint64_t v87 = "_VideoPacketBuffer_MoveEvictedFrameToIncompleteFrameBuffer";
                  __int16 v88 = 1024;
                  int v89 = 2888;
                  __int16 v90 = 2048;
                  uint64_t v91 = a1;
                  __int16 v92 = 1024;
                  int v93 = v62;
                  _os_log_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Moving Evicted frame with frameSequenceNumber=%u to incomplete buffer", buf, 0x2Cu);
                }
              }
              else if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
              {
                int v76 = *(unsigned __int16 *)(v20 + 150);
                *(_DWORD *)buf = 136316162;
                uint64_t v85 = v59;
                __int16 v86 = 2080;
                uint64_t v87 = "_VideoPacketBuffer_MoveEvictedFrameToIncompleteFrameBuffer";
                __int16 v88 = 1024;
                int v89 = 2888;
                __int16 v90 = 2048;
                uint64_t v91 = a1;
                __int16 v92 = 1024;
                int v93 = v76;
                _os_log_debug_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Moving Evicted frame with frameSequenceNumber=%u to incomplete buffer", buf, 0x2Cu);
              }
            }
            uint64_t v65 = *(void *)v18;
            if (*(void *)v18 == v20)
            {
              uint64_t v65 = *(void *)(v20 + 112);
              *(void *)uint64_t v18 = v65;
            }
            while (v65)
            {
              uint64_t v66 = v65;
              uint64_t v65 = *(void *)(v65 + 112);
              if (v65 == v20)
              {
                if (v20) {
                  uint64_t v67 = *(void *)(v20 + 112);
                }
                else {
                  uint64_t v67 = 0;
                }
                *(void *)(v66 + 112) = v67;
                break;
              }
            }
            _VideoPacketBuffer_AddFrameToBufferInOrder((uint64_t *)(v18 + 8), v20);
            *(int32x2_t *)(v18 + 112) = vadd_s32(*(int32x2_t *)(v18 + 112), (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v68 = *(void *)(v18 + 8);
            do
            {
              uint64_t v69 = v68;
              if (!v68) {
                break;
              }
              uint64_t v68 = *(void *)(v68 + 112);
            }
            while (v68);
            *(void *)(v18 + 16) = v69;
            *(unsigned char *)(v20 + 55) = 1;
            kdebug_trace();
          }
          *(_DWORD *)(v20 + 44) = 0;
          *(_DWORD *)(v20 + 48) = 0;
        }
        goto LABEL_88;
      }
    }
    *(_DWORD *)(v29 + 68) = *(_DWORD *)(v18 + 36) * *(_DWORD *)(v18 + 32);
    goto LABEL_39;
  }
  uint64_t v27 = *(void *)(v18 + 8);
  if (v27)
  {
    uint64_t v28 = 0;
    int v26 = *(_DWORD *)(v27 + 12) - a2;
    if (v26 <= 0)
    {
      BOOL v21 = 0;
      uint64_t v20 = *(void *)(v18 + 8);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
LABEL_88:
  VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics(a1, v22, (unsigned __int16 *)&v82, *(unsigned __int16 *)(v20 + 150), *(_DWORD *)(v20 + 12), *(_DWORD *)(v20 + 44) != 0, *(double *)(v20 + 24));
  uint64_t v47 = (_WORD *)(a1 + 800 * v22);
  BOOL v48 = v47 + 21357;
  unsigned int v49 = (unsigned __int16)v47[21357];
  unsigned int v50 = v47 + 21354;
  uint64_t v51 = v47 + 21358;
  uint64_t v52 = v47 + 21366;
  uint64_t v53 = 128;
  do
  {
    unsigned int v54 = (unsigned __int16)*(v52 - 1);
    if (v54 != 8 && v54 >= v49)
    {
      *unsigned int v50 = *(v52 - 2);
      *BOOL v48 = v54;
      *uint64_t v51 = *v52;
      unsigned int v49 = v54;
    }
    v52 += 3;
    --v53;
  }
  while (v53);
  memcpy((void *)(a1 + 145128), (const void *)(a1 + 800 * v22 + 42728), 0x300uLL);
  _VideoPacketBuffer_ProcessFrameStats(a1, v23);
  if (*(_DWORD *)(v18 + 76))
  {
    ++*(_DWORD *)(a1 + 464);
    int v56 = v81;
    *a6 = 1;
    if (v23 - *(double *)(v18 + 40) > 0.25)
    {
      if (*(_DWORD *)(v18 + 68) && *(_DWORD *)(v18 + 72)) {
        int v57 = 2;
      }
      else {
        int v57 = 0;
      }
      int *v79 = v57;
      *a5 = *(_DWORD *)(v18 + 84);
      *(double *)(v18 + 40) = v23;
    }
  }
  else
  {
    *(void *)(v18 + 40) = 0;
    int v56 = v81;
  }
  pthread_mutex_unlock(v56);
  return v28;
}

BOOL _VCVideoPacketBuffer_AssembleFrame(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v389 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 + 145896;
  CMBlockBufferRef theBuffer = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v355 = 0;
  uint64_t v356 = 0;
  size_t v357 = 0;
  v354 = 0;
  if (CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 146056), 0x1F4u, 0, &blockBufferOut))
  {
    char v33 = 0;
    LODWORD(v353) = 0;
    LOBYTE(v352) = 0;
    int v344 = 0;
    int v217 = 7;
    goto LABEL_364;
  }
  uint64_t v6 = *(void *)(a2 + 96);
  if (v6)
  {
    int v7 = 0;
    uint64_t v8 = *(void *)(a2 + 96);
    while (1)
    {
      if (!*(_DWORD *)(v8 + 24)) {
        goto LABEL_9;
      }
      unsigned int v9 = *(_DWORD *)(v8 + 32);
      if (!(v9 >> 30)) {
        break;
      }
      if ((v9 & 0x400000) != 0) {
        goto LABEL_9;
      }
LABEL_10:
      uint64_t v8 = *(void *)(v8 + 104);
      if (!v8)
      {
        int v10 = 0;
        while (1)
        {
          if (*(_DWORD *)(v6 + 24))
          {
            unsigned int v11 = *(_DWORD *)(v6 + 32);
            if (!(v11 >> 30))
            {
              if ((v11 & 0x800000) != 0) {
                goto LABEL_18;
              }
LABEL_17:
              ++v10;
              goto LABEL_18;
            }
            if ((v11 & 0x400000) == 0) {
              goto LABEL_17;
            }
          }
LABEL_18:
          uint64_t v6 = *(void *)(v6 + 104);
          if (!v6) {
            goto LABEL_21;
          }
        }
      }
    }
    if ((v9 & 0x800000) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    ++v7;
    goto LABEL_10;
  }
  int v7 = 0;
  int v10 = 0;
LABEL_21:
  int v343 = *(unsigned __int16 *)(a2 + 104);
  int v344 = v10;
  int v341 = v7;
  int v346 = v343 - v7;
  int v12 = v343 - v7 - v10;
  if (v343 - v7 > v10 && (int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    unint64_t v14 = *MEMORY[0x1E4F47A50];
    __int16 v15 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *(unsigned __int16 *)(a2 + 150);
        *(_DWORD *)buf = 136317186;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 2693;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v16;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v343;
        *(_WORD *)&unsigned char buf[40] = 1024;
        *(_DWORD *)&buf[42] = v346;
        *(_WORD *)&buf[46] = 1024;
        *(_DWORD *)&buf[48] = v341;
        *(_WORD *)&buf[52] = 1024;
        *(_DWORD *)&buf[54] = v344;
        *(_WORD *)&buf[58] = 1024;
        *(_DWORD *)&buf[60] = v12;
        _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d This frame has unrecoverable loss, consider checking why the FEC Feedback Analyzer did not provide enough protection frameSequenceNumber=%d videoPacketsExpected=%d missingMediaPacketsCount=%d mediaCount=%d parityCount=%d  extraParityPacketsNeededCount=%d", buf, 0x40u);
      }
    }
    else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v229 = *(unsigned __int16 *)(a2 + 150);
      *(_DWORD *)buf = 136317186;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&buf[24] = 2693;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v229;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v343;
      *(_WORD *)&unsigned char buf[40] = 1024;
      *(_DWORD *)&buf[42] = v346;
      *(_WORD *)&buf[46] = 1024;
      *(_DWORD *)&buf[48] = v341;
      *(_WORD *)&buf[52] = 1024;
      *(_DWORD *)&buf[54] = v344;
      *(_WORD *)&buf[58] = 1024;
      *(_DWORD *)&buf[60] = v12;
      _os_log_debug_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d This frame has unrecoverable loss, consider checking why the FEC Feedback Analyzer did not provide enough protection frameSequenceNumber=%d videoPacketsExpected=%d missingMediaPacketsCount=%d mediaCount=%d parityCount=%d  extraParityPacketsNeededCount=%d", buf, 0x40u);
    }
  }
  if (*(_DWORD *)(a2 + 40))
  {
    if (v346 >= 1 && *(_WORD *)(a2 + 104) != 0)
    {
      if (v346 >= 101) {
        unsigned int v18 = 101;
      }
      else {
        unsigned int v18 = v346;
      }
      ++*(_WORD *)(v4 + 2 * v18 + 720);
    }
  }
  __int16 v19 = *(unsigned __int16 **)(a2 + 96);
  if (!v19)
  {
    _VCVideoPacketBuffer_FinalizeGOBLengthAdjustement((uint64_t)&v355);
    LODWORD(v353) = 0;
    goto LABEL_508;
  }
  uint64_t v350 = v5;
  BOOL v20 = 0;
  uint64_t v352 = 0;
  unint64_t v353 = 0;
  int v348 = 0;
  v342 = (_DWORD *)(v4 + 42692);
  char v21 = 1;
  uint64_t v351 = v4;
  while (*((_DWORD *)v19 + 6))
  {
    unsigned int v22 = *((_DWORD *)v19 + 8);
    if (v22 >> 30)
    {
      if ((v22 & 0x400000) != 0) {
        break;
      }
    }
    else if ((v22 & 0x800000) != 0)
    {
      break;
    }
LABEL_107:
    __int16 v19 = (unsigned __int16 *)*((void *)v19 + 13);
    if (!v19)
    {
      _VCVideoPacketBuffer_FinalizeGOBLengthAdjustement((uint64_t)&v355);
      if (v20)
      {
        uint64_t v5 = v350;
        if (!*(unsigned char *)(a2 + 152))
        {
LABEL_119:
          if (*(unsigned char *)(v4 + 228))
          {
            *(void *)lengthAtOffsetOut = 0xAAAAAAAAAAAAAAAALL;
            __s2[0] = 0;
            if (CMBlockBufferGetDataPointer(blockBufferOut, v353 - 8, (size_t *)lengthAtOffsetOut, 0, (char **)__s2))
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  _VCVideoPacketBuffer_AssembleFrame_cold_7();
                }
              }
            }
            else if (*((_DWORD *)__s2[0] + 1) == 1357975584)
            {
              unsigned int v54 = *(_DWORD *)__s2[0];
              size_t v55 = 0;
              if (CMBlockBufferGetDataPointer(blockBufferOut, 0, (size_t *)lengthAtOffsetOut, 0, (char **)__s2))
              {
                LODWORD(v56) = 0;
                CMBlockBufferRef v57 = 0;
              }
              else
              {
                do
                {
                  CMBlockBufferRef v57 = __s2[0];
                  uint64_t v56 = bswap32(*(_DWORD *)__s2[0]);
                  v55 += v56 + 4;
                }
                while (!CMBlockBufferGetDataPointer(blockBufferOut, v55, (size_t *)lengthAtOffsetOut, 0, (char **)__s2));
              }
              if (v55 == v353)
              {
                unsigned int v58 = bswap32(v54);
                BOOL v59 = v56 >= v58;
                uint64_t v60 = v56 - v58;
                if (v60 != 0 && v59)
                {
                  *(_DWORD *)CMBlockBufferRef v57 = v54;
                  *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
                  unint64_t v61 = v353 - v60;
                  if (CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(v350 + 160), blockBufferOut, 0, v353 - v60, 0, (CMBlockBufferRef *)buf))
                  {
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        _VCVideoPacketBuffer_AssembleFrame_cold_6();
                      }
                    }
                  }
                  else
                  {
                    if (blockBufferOut) {
                      CFRelease(blockBufferOut);
                    }
                    CMBlockBufferRef blockBufferOut = *(CMBlockBufferRef *)buf;
                    unint64_t v353 = v61;
                  }
                }
              }
              else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v66 = VRTraceErrorLogLevelToCSTR();
                uint64_t v67 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136316418;
                  *(void *)&uint8_t buf[4] = v66;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "_VCVideoPacketBuffer_StripFakeLargeFramePadding";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  *(_DWORD *)&buf[24] = 264;
                  *(_WORD *)&buf[28] = 2048;
                  *(void *)&buf[30] = v4;
                  *(_WORD *)&buf[38] = 1024;
                  *(_DWORD *)&unsigned char buf[40] = v55;
                  *(_WORD *)&unsigned char buf[44] = 1024;
                  *(_DWORD *)&buf[46] = v353;
                  _os_log_error_impl(&dword_1E1EA4000, v67, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Found corrupted buffer. Offset:%d BufferLen:%d", buf, 0x32u);
                }
              }
            }
          }
          VCVideoReceiverSampleBuffer_Create(*(const __CFAllocator **)(v350 + 168), &v354);
          unsigned int v68 = *(_DWORD *)a2 - 110;
          if (v68 <= 0xF && ((1 << v68) & 0xC001) != 0)
          {
            CFAllocatorRef v69 = (const __CFAllocator *)CFRetain(blockBufferOut);
            v354[13] = v69;
            CFAllocatorRef DataLength = (const __CFAllocator *)CMBlockBufferGetDataLength(blockBufferOut);
            OSStatus v71 = v354;
            v354[14] = DataLength;
            OSStatus Contiguous = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v350 + 160), blockBufferOut, 0, 0, 0, (size_t)DataLength, 0, v71 + 15);
            if (Contiguous)
            {
              OSStatus v305 = Contiguous;
              if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
                goto LABEL_417;
              }
              uint64_t v306 = VRTraceErrorLogLevelToCSTR();
              v307 = *MEMORY[0x1E4F47A50];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                goto LABEL_417;
              }
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = v306;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&buf[24] = 2754;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = v4;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&unsigned char buf[40] = v305;
              v294 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] failed to create data frame. Status=%d";
              v295 = v307;
              uint32_t v296 = 44;
              goto LABEL_503;
            }
            *(_DWORD *)(v350 + 76) = 1;
            ++*v342;
LABEL_159:
            if (!*(unsigned char *)(v4 + 240) && !*(unsigned char *)(a2 + 152))
            {
              if (*(unsigned char *)(a2 + 149))
              {
                if (*(_WORD *)(v4 + 432))
                {
                  int v84 = *(unsigned __int16 *)(a2 + 150) - *(unsigned __int16 *)(v4 + 432);
                  if (v84 >= 2
                    && !*(unsigned char *)(a2 + 52)
                    && !*(unsigned char *)(a2 + 53)
                    && (int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    uint64_t v85 = VRTraceErrorLogLevelToCSTR();
                    __int16 v86 = *MEMORY[0x1E4F47A50];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                    {
                      int v87 = *(_DWORD *)(a2 + 12);
                      int v88 = *(unsigned __int8 *)(a2 + 53);
                      int v89 = *(unsigned __int8 *)(a2 + 52);
                      int v90 = *(unsigned __int16 *)(a2 + 150);
                      int v91 = *(unsigned __int16 *)(v4 + 432);
                      *(_DWORD *)buf = 136317442;
                      *(void *)&uint8_t buf[4] = v85;
                      *(_WORD *)&unsigned char buf[12] = 2080;
                      *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
                      *(_WORD *)&unsigned char buf[22] = 1024;
                      *(_DWORD *)&buf[24] = 2775;
                      *(_WORD *)&buf[28] = 2048;
                      *(void *)&buf[30] = v4;
                      *(_WORD *)&buf[38] = 1024;
                      *(_DWORD *)&unsigned char buf[40] = v87;
                      *(_WORD *)&unsigned char buf[44] = 1024;
                      *(_DWORD *)&buf[46] = v88;
                      *(_WORD *)&buf[50] = 1024;
                      *(_DWORD *)&buf[52] = v89;
                      *(_WORD *)&buf[56] = 1024;
                      *(_DWORD *)&buf[58] = v90;
                      *(_WORD *)&buf[62] = 1024;
                      *(_DWORD *)&buf[64] = v91;
                      *(_WORD *)&buf[68] = 1024;
                      *(_DWORD *)&buf[70] = v84;
                      _os_log_error_impl(&dword_1E1EA4000, v86, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Assembled after gap in Frame Sequence Number without Refresh Frame timestamp=%u isLTRPFrame=%u isIntraFrame=%u frameSequenceNumber=%u lastAssembledFrameSequenceNumber=%u gapFrameSequenceNumber=%d", buf, 0x4Au);
                    }
                  }
                }
              }
            }
            if (*(unsigned char *)(a2 + 52) || *(unsigned char *)(a2 + 53))
            {
              if (*(unsigned char *)(v5 + 33))
              {
                *(unsigned char *)(v5 + 33) = 0;
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  uint64_t v73 = VRTraceErrorLogLevelToCSTR();
                  int v74 = *MEMORY[0x1E4F47A50];
                  int v75 = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                    {
                      int v76 = *(unsigned __int8 *)(a2 + 52);
                      int v77 = *(unsigned __int8 *)(a2 + 53);
                      int v78 = *(unsigned __int16 *)(a2 + 150);
                      *(_DWORD *)buf = 136316674;
                      *(void *)&uint8_t buf[4] = v73;
                      *(_WORD *)&unsigned char buf[12] = 2080;
                      *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
                      *(_WORD *)&unsigned char buf[22] = 1024;
                      *(_DWORD *)&buf[24] = 2783;
                      *(_WORD *)&buf[28] = 2048;
                      *(void *)&buf[30] = v4;
                      *(_WORD *)&buf[38] = 1024;
                      *(_DWORD *)&unsigned char buf[40] = v76;
                      *(_WORD *)&unsigned char buf[44] = 1024;
                      *(_DWORD *)&buf[46] = v77;
                      *(_WORD *)&buf[50] = 1024;
                      *(_DWORD *)&buf[52] = v78;
                      _os_log_impl(&dword_1E1EA4000, v74, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Refresh frame has arrived and we can resume enqueueing late frames isIntraFrame=%d isLTRPFrame=%d frameSequenceNumber=%u", buf, 0x38u);
                    }
                  }
                  else if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                  {
                    int v236 = *(unsigned __int8 *)(a2 + 52);
                    int v237 = *(unsigned __int8 *)(a2 + 53);
                    int v238 = *(unsigned __int16 *)(a2 + 150);
                    *(_DWORD *)buf = 136316674;
                    *(void *)&uint8_t buf[4] = v73;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
                    *(_WORD *)&unsigned char buf[22] = 1024;
                    *(_DWORD *)&buf[24] = 2783;
                    *(_WORD *)&buf[28] = 2048;
                    *(void *)&buf[30] = v4;
                    *(_WORD *)&buf[38] = 1024;
                    *(_DWORD *)&unsigned char buf[40] = v236;
                    *(_WORD *)&unsigned char buf[44] = 1024;
                    *(_DWORD *)&buf[46] = v237;
                    *(_WORD *)&buf[50] = 1024;
                    *(_DWORD *)&buf[52] = v238;
                    _os_log_debug_impl(&dword_1E1EA4000, v74, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Refresh frame has arrived and we can resume enqueueing late frames isIntraFrame=%d isLTRPFrame=%d frameSequenceNumber=%u", buf, 0x38u);
                  }
                }
              }
            }
            char v33 = 0;
            int v92 = 0;
            int v93 = 1;
            goto LABEL_434;
          }
          BOOL v79 = *(uint64_t (**)(void, CMBlockBufferRef, CMBlockBufferRef *))(v4 + 256);
          if (!v79)
          {
            if (blockBufferOut) {
              uint64_t v83 = (OpaqueCMBlockBuffer *)CFRetain(blockBufferOut);
            }
            else {
              uint64_t v83 = 0;
            }
            CMBlockBufferRef theBuffer = v83;
            unint64_t v82 = v353;
LABEL_187:
            __int16 v94 = v354;
            __s2[0] = (CMBlockBufferRef)0xAAAAAAAAAAAAAAAALL;
            __s2[1] = (CMBlockBufferRef)0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v95 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v95 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v373[11] = v95;
            v373[12] = v95;
            v373[9] = v95;
            v373[10] = v95;
            v373[7] = v95;
            v373[8] = v95;
            v373[5] = v95;
            v373[6] = v95;
            v373[3] = v95;
            v373[4] = v95;
            v373[1] = v95;
            v373[2] = v95;
            long long v372 = v95;
            v373[0] = v95;
            long long v370 = v95;
            long long v371 = v95;
            long long v368 = v95;
            long long v369 = v95;
            *(_OWORD *)&buf[80] = v95;
            long long v367 = v95;
            *(_OWORD *)&buf[48] = v95;
            *(_OWORD *)&buf[64] = v95;
            *(_OWORD *)&buf[16] = v95;
            *(_OWORD *)&buf[32] = v95;
            *(_OWORD *)buf = v95;
            v94[13] = (const __CFAllocator *)CFRetain(v83);
            v94[14] = (const __CFAllocator *)CMBlockBufferGetDataLength(v83);
            v327 = v94;
            if ((int)v82 >= 1)
            {
              unsigned int v96 = 0;
              int v339 = 0;
              v336 = v94 + 22;
              size_t v337 = 0;
              v332 = (char **)(v94 + 24);
              v333 = (size_t *)(v94 + 23);
              v330 = (char **)(v94 + 18);
              v331 = (size_t *)(v94 + 17);
              v334 = v94 + 19;
              v335 = v94 + 16;
              v328 = (char **)(v94 + 21);
              v329 = (size_t *)(v94 + 20);
              unint64_t offsetToData = -1;
              int v340 = 1;
              v349 = v83;
              unint64_t v347 = v82;
              while (1)
              {
                size_t v364 = 0xAAAAAAAAAAAAAAAALL;
                dataPointerOut = 0;
                size_t totalLengthOut = 0xAAAAAAAAAAAAAAAALL;
                if (CMBlockBufferGetDataPointer(v83, v96, &v364, 0, &dataPointerOut)) {
                  break;
                }
                BOOL v97 = v364 < 4 || (unint64_t)v96 + 4 > v82;
                if (v97)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() < 3)
                  {
                    int v204 = 2;
                    goto LABEL_377;
                  }
                  VRTraceErrorLogLevelToCSTR();
                  uint64_t v5 = v350;
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    _VCVideoPacketBuffer_AssembleFrame_cold_3();
                  }
LABEL_395:
                  int v204 = 2;
                  goto LABEL_414;
                }
                size_t v98 = bswap32(*(_DWORD *)dataPointerOut);
                uint64_t v99 = (v98 + 4);
                int v100 = v99 + v96;
                if (v98 > 0x7FFFFFFB || v100 <= 3 || v100 > (int)v82)
                {
                  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
                  if (ErrorLogLevelForModule < 3)
                  {
                    int v204 = 2;
                    goto LABEL_336;
                  }
                  uint64_t v242 = VRTraceErrorLogLevelToCSTR();
                  v243 = *MEMORY[0x1E4F47A50];
                  uint64_t v5 = v350;
                  uint64_t v4 = v351;
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)lengthAtOffsetOut = 136316674;
                    *(void *)&lengthAtOffsetOut[4] = v242;
                    __int16 v376 = 2080;
                    v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                    __int16 v378 = 1024;
                    int v379 = 2354;
                    __int16 v380 = 2048;
                    uint64_t v381 = v351;
                    __int16 v382 = 1024;
                    LODWORD(v383) = v98 + 4;
                    WORD2(v383) = 1024;
                    *(_DWORD *)((char *)&v383 + 6) = v96;
                    WORD5(v383) = 1024;
                    HIDWORD(v383) = v82;
                    _os_log_error_impl(&dword_1E1EA4000, v243, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] jump=%d i=%d frameBufferLength=%u", lengthAtOffsetOut, 0x38u);
                  }
                  goto LABEL_395;
                }
                CFTypeRef cf = 0;
                if (CMBlockBufferGetDataPointer(v83, v96 + 4, &v364, &totalLengthOut, &dataPointerOut))
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    uint64_t v5 = v350;
                    uint64_t v4 = v351;
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      _VCVideoPacketBuffer_AssembleFrame_cold_4();
                    }
                    goto LABEL_413;
                  }
                  goto LABEL_411;
                }
                size_t v103 = v364;
                size_t v104 = v99 - 4;
                int v105 = v364;
                if (v364 < v99 - 4 && v364 <= 0x18F)
                {
                  if ((int)v98 >= 400) {
                    size_t v106 = 400;
                  }
                  else {
                    size_t v106 = v98;
                  }
                  size_t v364 = v106;
                  OSStatus v107 = CMBlockBufferAccessDataBytes(v349, v96 + 4, v106, buf, &dataPointerOut);
                  if (v107)
                  {
                    OSStatus v254 = v107;
                    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
                    {
LABEL_411:
                      uint64_t v5 = v350;
                      goto LABEL_412;
                    }
                    uint64_t v255 = VRTraceErrorLogLevelToCSTR();
                    v256 = *MEMORY[0x1E4F47A50];
                    uint64_t v5 = v350;
                    uint64_t v4 = v351;
                    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      goto LABEL_413;
                    }
                    *(_DWORD *)lengthAtOffsetOut = 136316418;
                    *(void *)&lengthAtOffsetOut[4] = v255;
                    __int16 v376 = 2080;
                    v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                    __int16 v378 = 1024;
                    int v379 = 2364;
                    __int16 v380 = 2048;
                    uint64_t v381 = v351;
                    __int16 v382 = 1024;
                    LODWORD(v383) = v254;
                    WORD2(v383) = 2048;
                    *(void *)((char *)&v383 + 6) = v364;
                    v247 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] CMBlockBufferAccessDataBytes failed with s"
                           "tatus=%d dataPointerLength=%lu";
                    v248 = v256;
LABEL_409:
                    uint32_t v257 = 54;
                    goto LABEL_410;
                  }
                  int v105 = v364;
                }
                int FrameSliceHeader = ReadFrameSliceHeader(*(_DWORD *)a2, (uint64_t)dataPointerOut, v105, (CFDictionaryRef *)&cf);
                switch(FrameSliceHeader)
                {
                  case 0:
                  case 6:
                  case 7:
                    goto LABEL_252;
                  case 1:
                    unint64_t v109 = offsetToData;
                    if (offsetToData >= v96) {
                      unint64_t v109 = v96;
                    }
                    unsigned __int16 v361 = -21846;
                    unsigned __int16 v360 = -21846;
                    if (RetrieveMBSliceTypeFromFrameInfoDict((CFDictionaryRef)cf, &v361, &v360))
                    {
                      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
                      {
                        uint64_t v110 = VRTraceErrorLogLevelToCSTR();
                        int v111 = *MEMORY[0x1E4F47A50];
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)lengthAtOffsetOut = 136315906;
                          *(void *)&lengthAtOffsetOut[4] = v110;
                          __int16 v376 = 2080;
                          v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                          __int16 v378 = 1024;
                          int v379 = 2377;
                          __int16 v380 = 2048;
                          uint64_t v381 = v351;
                          _os_log_impl(&dword_1E1EA4000, v111, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FRAMEHEADER_SLICEINFO bad dictHeaderInfo", lengthAtOffsetOut, 0x26u);
                        }
                      }
                    }
                    if (!v96 && v361)
                    {
                      int v204 = 14;
LABEL_336:
                      uint64_t v5 = v350;
LABEL_337:
                      uint64_t v4 = v351;
                      goto LABEL_414;
                    }
                    if (v339 >= 8)
                    {
                      uint64_t v4 = v351;
                      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
                      {
                        uint64_t v205 = VRTraceErrorLogLevelToCSTR();
                        char v206 = *MEMORY[0x1E4F47A50];
                        uint64_t v5 = v350;
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)lengthAtOffsetOut = 136316162;
                          *(void *)&lengthAtOffsetOut[4] = v205;
                          __int16 v376 = 2080;
                          v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                          __int16 v378 = 1024;
                          int v379 = 2388;
                          __int16 v380 = 2048;
                          uint64_t v381 = v351;
                          __int16 v382 = 1024;
                          LODWORD(v383) = v339;
                          _os_log_impl(&dword_1E1EA4000, v206, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] *** BAD FRAME -- %d: iSlices >= MAX_SLICES  Stop!", lengthAtOffsetOut, 0x2Cu);
                        }
                        int v204 = 15;
                        goto LABEL_414;
                      }
                      int v204 = 15;
LABEL_377:
                      uint64_t v5 = v350;
                      goto LABEL_414;
                    }
                    v337 += v99;
                    unint64_t offsetToData = v109;
                    int v340 = v340 & (v360 == 2);
                    *((_WORD *)__s2 + v339++) = v361;
LABEL_252:
                    if (cf) {
                      CFRelease(cf);
                    }
                    v96 += v99;
                    unint64_t v82 = v347;
                    BOOL v97 = v100 < (int)v347;
                    uint64_t v4 = v351;
                    uint64_t v83 = v349;
                    if (!v97) {
                      goto LABEL_257;
                    }
                    break;
                  case 2:
                    if (v103 < v104 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
                    {
                      uint64_t v130 = VRTraceErrorLogLevelToCSTR();
                      uint64_t v131 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)lengthAtOffsetOut = 136315906;
                        *(void *)&lengthAtOffsetOut[4] = v130;
                        __int16 v376 = 2080;
                        v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                        __int16 v378 = 1024;
                        int v379 = 2425;
                        __int16 v380 = 2048;
                        uint64_t v381 = v351;
                        _os_log_impl(&dword_1E1EA4000, v131, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] IMGDESC is in multiple chuncks, copy needed", lengthAtOffsetOut, 0x26u);
                      }
                    }
                    uint64_t v5 = v350;
                    OSStatus v132 = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v350 + 160), v349, *(CFAllocatorRef *)(v350 + 152), 0, v96 + 4, v98, 0, v335);
                    if (v132)
                    {
                      OSStatus v311 = v132;
                      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                      {
                        uint64_t v312 = VRTraceErrorLogLevelToCSTR();
                        v313 = *MEMORY[0x1E4F47A50];
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)lengthAtOffsetOut = 136316162;
                          *(void *)&lengthAtOffsetOut[4] = v312;
                          __int16 v376 = 2080;
                          v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                          __int16 v378 = 1024;
                          int v379 = 2429;
                          __int16 v380 = 2048;
                          uint64_t v4 = v351;
                          uint64_t v381 = v351;
                          __int16 v382 = 1024;
                          LODWORD(v383) = v311;
                          v247 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create contiguous IMGDESC "
                                 "buffer. Status:%d";
                          goto LABEL_531;
                        }
                      }
                      goto LABEL_412;
                    }
                    CMBlockBufferGetDataPointer(*v335, 0, v331, 0, v330);
                    unsigned __int16 v361 = -21846;
                    unsigned __int16 v360 = -21846;
                    if (RetrieveResolutionFromFrameInfoDict((CFDictionaryRef)cf, &v361, &v360))
                    {
                      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
                      {
                        uint64_t v133 = VRTraceErrorLogLevelToCSTR();
                        uint64_t v134 = *MEMORY[0x1E4F47A50];
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)lengthAtOffsetOut = 136315906;
                          *(void *)&lengthAtOffsetOut[4] = v133;
                          __int16 v376 = 2080;
                          v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                          __int16 v378 = 1024;
                          int v379 = 2436;
                          __int16 v380 = 2048;
                          uint64_t v381 = v351;
                          _os_log_impl(&dword_1E1EA4000, v134, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FRAMEHEADER_IMGDESC bad dictHeaderInfo", lengthAtOffsetOut, 0x26u);
                        }
                      }
                    }
                    int v135 = v360;
                    *(_DWORD *)(v350 + 40) = v361;
                    *(_DWORD *)(v350 + 44) = v135;
                    *(_DWORD *)(v350 + 80) = 1;
                    *(_DWORD *)(v350 + 56) = 0;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                    {
                      uint64_t v136 = VRTraceErrorLogLevelToCSTR();
                      int v137 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                      {
                        int v138 = *(_DWORD *)(v350 + 40);
                        int v139 = *(_DWORD *)(v350 + 44);
                        int v140 = *(_DWORD *)(a2 + 12);
                        int v141 = *(unsigned __int8 *)(a2 + 152);
                        int v142 = *(unsigned __int8 *)(a2 + 153);
                        *(_DWORD *)lengthAtOffsetOut = 136317186;
                        *(void *)&lengthAtOffsetOut[4] = v136;
                        __int16 v376 = 2080;
                        v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                        __int16 v378 = 1024;
                        int v379 = 2446;
                        __int16 v380 = 2048;
                        uint64_t v381 = v351;
                        __int16 v382 = 1024;
                        LODWORD(v383) = v138;
                        WORD2(v383) = 1024;
                        *(_DWORD *)((char *)&v383 + 6) = v139;
                        WORD5(v383) = 1024;
                        HIDWORD(v383) = v140;
                        __int16 v384 = 1024;
                        *(_DWORD *)v385 = v141;
                        *(_WORD *)&v385[4] = 1024;
                        *(_DWORD *)&v385[6] = v142;
                        unsigned int v114 = v137;
                        uint64_t v115 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] RECEIVED IMGDESC(%dx%d) TS:%08X, isTem"
                               "poralScaledStream=%d, isBaseLayerStream=%d";
                        uint32_t v116 = 68;
LABEL_251:
                        _os_log_impl(&dword_1E1EA4000, v114, OS_LOG_TYPE_DEFAULT, v115, lengthAtOffsetOut, v116);
                      }
                    }
                    goto LABEL_252;
                  case 3:
                    if (v103 < v104 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
                    {
                      uint64_t v117 = VRTraceErrorLogLevelToCSTR();
                      uint64_t v118 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)lengthAtOffsetOut = 136315906;
                        *(void *)&lengthAtOffsetOut[4] = v117;
                        __int16 v376 = 2080;
                        v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                        __int16 v378 = 1024;
                        int v379 = 2400;
                        __int16 v380 = 2048;
                        uint64_t v381 = v351;
                        _os_log_impl(&dword_1E1EA4000, v118, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] SPS is in multiple chuncks, copy needed", lengthAtOffsetOut, 0x26u);
                      }
                    }
                    uint64_t v5 = v350;
                    OSStatus v119 = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v350 + 160), v349, *(CFAllocatorRef *)(v350 + 152), 0, v96 + 4, v98, 0, v334);
                    if (v119)
                    {
                      OSStatus v314 = v119;
                      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                      {
                        uint64_t v315 = VRTraceErrorLogLevelToCSTR();
                        v313 = *MEMORY[0x1E4F47A50];
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)lengthAtOffsetOut = 136316162;
                          *(void *)&lengthAtOffsetOut[4] = v315;
                          __int16 v376 = 2080;
                          v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                          __int16 v378 = 1024;
                          int v379 = 2403;
                          __int16 v380 = 2048;
                          uint64_t v4 = v351;
                          uint64_t v381 = v351;
                          __int16 v382 = 1024;
                          LODWORD(v383) = v314;
                          v247 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create contiguous SPS buffer. Status:%d";
                          goto LABEL_531;
                        }
                      }
                      goto LABEL_412;
                    }
                    CMBlockBufferGetDataPointer(*v334, 0, v329, 0, v328);
                    unsigned __int16 v361 = -21846;
                    unsigned __int16 v360 = -21846;
                    int v120 = RetrieveResolutionFromFrameInfoDict((CFDictionaryRef)cf, &v361, &v360);
                    if (v120)
                    {
                      int v318 = v120;
                      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
                      {
                        uint64_t v319 = VRTraceErrorLogLevelToCSTR();
                        v320 = *MEMORY[0x1E4F47A50];
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)lengthAtOffsetOut = 136316162;
                          *(void *)&lengthAtOffsetOut[4] = v319;
                          __int16 v376 = 2080;
                          v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                          __int16 v378 = 1024;
                          int v379 = 2410;
                          __int16 v380 = 2048;
                          uint64_t v381 = v351;
                          __int16 v382 = 1024;
                          LODWORD(v383) = v318;
                          _os_log_impl(&dword_1E1EA4000, v320, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FRAMEHEADER_SPSPPS bad dictHeaderInfo. err=%d", lengthAtOffsetOut, 0x2Cu);
                        }
                      }
                      int v204 = 3;
                      goto LABEL_337;
                    }
                    int v121 = v360;
                    *(_DWORD *)(v350 + 40) = v361;
                    *(_DWORD *)(v350 + 44) = v121;
                    *(_DWORD *)(v350 + 80) = 2;
                    *(_DWORD *)(v350 + 56) = 0;
                    if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
                      goto LABEL_252;
                    }
                    uint64_t v122 = VRTraceErrorLogLevelToCSTR();
                    int v123 = *MEMORY[0x1E4F47A50];
                    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_252;
                    }
                    int v124 = *(_DWORD *)(a2 + 12);
                    int v125 = *(unsigned __int8 *)(a2 + 152);
                    int v126 = *(unsigned __int8 *)(a2 + 153);
                    *(_DWORD *)lengthAtOffsetOut = 136316674;
                    *(void *)&lengthAtOffsetOut[4] = v122;
                    __int16 v376 = 2080;
                    v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                    __int16 v378 = 1024;
                    int v379 = 2419;
                    __int16 v380 = 2048;
                    uint64_t v381 = v351;
                    __int16 v382 = 1024;
                    LODWORD(v383) = v124;
                    WORD2(v383) = 1024;
                    *(_DWORD *)((char *)&v383 + 6) = v125;
                    WORD5(v383) = 1024;
                    HIDWORD(v383) = v126;
                    unsigned int v114 = v123;
                    uint64_t v115 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] RECEIVED SPS/PPS TS: %08X, isTemporalScale"
                           "dStream=%d, isBaseLayerStream=%d";
                    uint32_t v116 = 56;
                    goto LABEL_251;
                  case 4:
                    if (v103 < v104 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
                    {
                      uint64_t v127 = VRTraceErrorLogLevelToCSTR();
                      __int16 v128 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)lengthAtOffsetOut = 136315906;
                        *(void *)&lengthAtOffsetOut[4] = v127;
                        __int16 v376 = 2080;
                        v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                        __int16 v378 = 1024;
                        int v379 = 2453;
                        __int16 v380 = 2048;
                        uint64_t v381 = v351;
                        _os_log_impl(&dword_1E1EA4000, v128, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] SPS is in multiple chuncks, copy needed", lengthAtOffsetOut, 0x26u);
                      }
                    }
                    uint64_t v5 = v350;
                    OSStatus v129 = CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v350 + 160), v349, *(CFAllocatorRef *)(v350 + 152), 0, v96 + 4, v98, 0, v336);
                    if (v129)
                    {
                      OSStatus v316 = v129;
                      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                      {
                        uint64_t v317 = VRTraceErrorLogLevelToCSTR();
                        v313 = *MEMORY[0x1E4F47A50];
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)lengthAtOffsetOut = 136316162;
                          *(void *)&lengthAtOffsetOut[4] = v317;
                          __int16 v376 = 2080;
                          v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                          __int16 v378 = 1024;
                          int v379 = 2456;
                          __int16 v380 = 2048;
                          uint64_t v4 = v351;
                          uint64_t v381 = v351;
                          __int16 v382 = 1024;
                          LODWORD(v383) = v316;
                          v247 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create contiguous PPS buffer. Status:%d";
LABEL_531:
                          v248 = v313;
                          uint32_t v257 = 44;
LABEL_410:
                          _os_log_error_impl(&dword_1E1EA4000, v248, OS_LOG_TYPE_ERROR, v247, lengthAtOffsetOut, v257);
LABEL_413:
                          int v204 = HIDWORD(v352);
LABEL_414:
                          HIDWORD(v352) = v204;
                          int v145 = -2145976286;
LABEL_415:
                          if ((int)VRTraceGetErrorLogLevelForModule() < 3
                            || (uint64_t v258 = VRTraceErrorLogLevelToCSTR(),
                                v259 = *MEMORY[0x1E4F47A50],
                                !os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
                          {
LABEL_417:
                            char v33 = 0;
                            goto LABEL_418;
                          }
                          if (HIDWORD(v352)) {
                            v290 = kVCKeyFrameRequestReasonStrings[HIDWORD(v352)];
                          }
                          else {
                            v290 = "NONE";
                          }
                          *(_DWORD *)buf = 136317442;
                          *(void *)&uint8_t buf[4] = v258;
                          *(_WORD *)&unsigned char buf[12] = 2080;
                          *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
                          *(_WORD *)&unsigned char buf[22] = 1024;
                          *(_DWORD *)&buf[24] = 2770;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = v4;
                          *(_WORD *)&buf[38] = 1024;
                          *(_DWORD *)&unsigned char buf[40] = v145;
                          *(_WORD *)&unsigned char buf[44] = 1024;
                          *(_DWORD *)&buf[46] = v343;
                          *(_WORD *)&buf[50] = 1024;
                          *(_DWORD *)&buf[52] = v341;
                          *(_WORD *)&buf[56] = 1024;
                          *(_DWORD *)&buf[58] = v344;
                          *(_WORD *)&buf[62] = 1024;
                          *(_DWORD *)&buf[64] = v346;
                          *(_WORD *)&buf[68] = 2080;
                          *(void *)&buf[70] = v290;
                          v294 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to parse reconstructed packet"
                                 " result=%d videoPacketsExpected=%d, mediaCount=%d parityCount=%d missingMediaPacketsCou"
                                 "nt=%d error.reason=%s";
                          v295 = v259;
                          uint32_t v296 = 78;
LABEL_503:
                          _os_log_error_impl(&dword_1E1EA4000, v295, OS_LOG_TYPE_ERROR, v294, buf, v296);
                          goto LABEL_417;
                        }
                      }
LABEL_412:
                      uint64_t v4 = v351;
                      goto LABEL_413;
                    }
                    CMBlockBufferGetDataPointer(*v336, 0, v333, 0, v332);
                    goto LABEL_252;
                  default:
                    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
                      goto LABEL_252;
                    }
                    uint64_t v112 = VRTraceErrorLogLevelToCSTR();
                    uint64_t v113 = *MEMORY[0x1E4F47A50];
                    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_252;
                    }
                    *(_DWORD *)lengthAtOffsetOut = 136316162;
                    *(void *)&lengthAtOffsetOut[4] = v112;
                    __int16 v376 = 2080;
                    v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                    __int16 v378 = 1024;
                    int v379 = 2466;
                    __int16 v380 = 2048;
                    uint64_t v381 = v351;
                    __int16 v382 = 1024;
                    LODWORD(v383) = FrameSliceHeader;
                    unsigned int v114 = v113;
                    uint64_t v115 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Unknown InfoType: %d";
                    uint32_t v116 = 44;
                    goto LABEL_251;
                }
              }
              if ((int)VRTraceGetErrorLogLevelForModule() < 3)
              {
                uint64_t v5 = v350;
                goto LABEL_413;
              }
              uint64_t v244 = VRTraceErrorLogLevelToCSTR();
              v245 = *MEMORY[0x1E4F47A50];
              uint64_t v5 = v350;
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                goto LABEL_413;
              }
              size_t v246 = CMBlockBufferGetDataLength(v83);
              *(_DWORD *)lengthAtOffsetOut = 136316418;
              *(void *)&lengthAtOffsetOut[4] = v244;
              __int16 v376 = 2080;
              v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
              __int16 v378 = 1024;
              int v379 = 2349;
              __int16 v380 = 2048;
              uint64_t v381 = v4;
              __int16 v382 = 2048;
              *(void *)&long long v383 = v246;
              WORD4(v383) = 1024;
              *(_DWORD *)((char *)&v383 + 10) = v96;
              v247 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to get length pointer, bufferLength is %zu, i is %d";
              v248 = v245;
              goto LABEL_409;
            }
            int v339 = 0;
            size_t v337 = 0;
            unint64_t offsetToData = -1;
            int v340 = 1;
LABEL_257:
            if (*(unsigned char *)(a2 + 152)) {
              BOOL v143 = *(unsigned char *)(a2 + 153) == 0;
            }
            else {
              BOOL v143 = 0;
            }
            uint64_t v5 = v350;
            int v144 = v340;
            if (!v143 && !*(_DWORD *)(v350 + 80))
            {
              *(_DWORD *)(v350 + 84) = 1;
              int v145 = -2145976303;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v146 = VRTraceErrorLogLevelToCSTR();
                v147 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  int v148 = *(_DWORD *)(a2 + 12);
                  int v149 = *(unsigned __int8 *)(a2 + 152);
                  int v150 = *(unsigned __int8 *)(a2 + 153);
                  *(_DWORD *)lengthAtOffsetOut = 136316674;
                  *(void *)&lengthAtOffsetOut[4] = v146;
                  __int16 v376 = 2080;
                  v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                  __int16 v378 = 1024;
                  int v379 = 2481;
                  __int16 v380 = 2048;
                  uint64_t v381 = v4;
                  __int16 v382 = 1024;
                  LODWORD(v383) = v148;
                  WORD2(v383) = 1024;
                  *(_DWORD *)((char *)&v383 + 6) = v149;
                  WORD5(v383) = 1024;
                  HIDWORD(v383) = v150;
                  _os_log_impl(&dword_1E1EA4000, v147, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] RECEIVED NO IMGDESC YET TS:%08X, isTemporalScaledStream=%d, isBaseLayerStream=%d", lengthAtOffsetOut, 0x38u);
                }
              }
              int v151 = 3;
              goto LABEL_266;
            }
            int v152 = *(_DWORD *)(v350 + 56);
            if (v152)
            {
              if (!*(unsigned char *)(v4 + 229))
              {
                if (v152 == v339)
                {
                  char v153 = !memcmp((const void *)(v4 + 145956), __s2, 2 * v339) || v143;
                  if ((v153 & 1) == 0) {
                    goto LABEL_354;
                  }
                }
                else if (!v143)
                {
LABEL_354:
                  *(_DWORD *)(v350 + 80) = 0;
                  *(_DWORD *)(v350 + 84) = 1;
                  *(_DWORD *)(v350 + 76) = 0;
                  int v145 = -2145976303;
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                  {
                    uint64_t v208 = VRTraceErrorLogLevelToCSTR();
                    v209 = *MEMORY[0x1E4F47A50];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                    {
                      int v210 = *(_DWORD *)(v350 + 56);
                      int v211 = *(unsigned __int8 *)(a2 + 152);
                      int v212 = *(unsigned __int8 *)(a2 + 153);
                      *(_DWORD *)lengthAtOffsetOut = 136316930;
                      *(void *)&lengthAtOffsetOut[4] = v208;
                      __int16 v376 = 2080;
                      v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                      __int16 v378 = 1024;
                      int v379 = 2496;
                      __int16 v380 = 2048;
                      uint64_t v381 = v4;
                      __int16 v382 = 1024;
                      LODWORD(v383) = v210;
                      WORD2(v383) = 1024;
                      *(_DWORD *)((char *)&v383 + 6) = v339;
                      WORD5(v383) = 1024;
                      HIDWORD(v383) = v211;
                      __int16 v384 = 1024;
                      *(_DWORD *)v385 = v212;
                      _os_log_impl(&dword_1E1EA4000, v209, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] RECEIVED A FRAME WITH NO MATCHING SLICES(%d -> %d), isTemporalScaledStream=%d, isBaseLayerStream=%d", lengthAtOffsetOut, 0x3Eu);
                    }
                  }
                  int v151 = 4;
                  goto LABEL_266;
                }
              }
            }
            else
            {
              *(_DWORD *)(v350 + 56) = v339;
              memcpy((void *)(v4 + 145956), __s2, 2 * v339);
            }
            if ((*(unsigned char *)(a2 + 32) & 2) != 0)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v154 = VRTraceErrorLogLevelToCSTR();
                v155 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  int v156 = **(unsigned __int16 **)(a2 + 96);
                  int v157 = *(_DWORD *)(a2 + 12);
                  int v158 = *(_DWORD *)(a2 + 32);
                  int v159 = *(unsigned __int8 *)(a2 + 152);
                  int v160 = *(unsigned __int8 *)(a2 + 153);
                  *(_DWORD *)lengthAtOffsetOut = 136317442;
                  *(void *)&lengthAtOffsetOut[4] = v154;
                  __int16 v376 = 2080;
                  v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                  __int16 v378 = 1024;
                  int v379 = 2502;
                  __int16 v380 = 2048;
                  uint64_t v381 = v4;
                  __int16 v382 = 1024;
                  LODWORD(v383) = v156;
                  WORD2(v383) = 1024;
                  *(_DWORD *)((char *)&v383 + 6) = v157;
                  WORD5(v383) = 1024;
                  HIDWORD(v383) = v158;
                  __int16 v384 = 1024;
                  *(_DWORD *)v385 = v339;
                  *(_WORD *)&v385[4] = 1024;
                  *(_DWORD *)&v385[6] = v159;
                  *(_WORD *)v386 = 1024;
                  *(_DWORD *)&v386[2] = v160;
                  _os_log_impl(&dword_1E1EA4000, v155, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] RECEIVED REFRESH FRAME seq:%d TS:%08X BITS:%04X SLICES:%d, isTemporalScaledStream=%d, isBaseLayerStream=%d", lengthAtOffsetOut, 0x4Au);
                }
              }
              *(unsigned char *)(a2 + 53) = 1;
            }
            if (v340)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v161 = VRTraceErrorLogLevelToCSTR();
                unsigned int v162 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  int v163 = *(_DWORD *)(a2 + 12);
                  int v164 = *(_DWORD *)(a2 + 32);
                  int v165 = *(unsigned __int8 *)(a2 + 152);
                  int v166 = *(unsigned __int8 *)(a2 + 153);
                  *(_DWORD *)lengthAtOffsetOut = 136317186;
                  *(void *)&lengthAtOffsetOut[4] = v161;
                  __int16 v376 = 2080;
                  v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                  __int16 v378 = 1024;
                  int v379 = 2508;
                  __int16 v380 = 2048;
                  uint64_t v381 = v4;
                  __int16 v382 = 1024;
                  LODWORD(v383) = v163;
                  WORD2(v383) = 1024;
                  *(_DWORD *)((char *)&v383 + 6) = v164;
                  WORD5(v383) = 1024;
                  HIDWORD(v383) = v339;
                  __int16 v384 = 1024;
                  *(_DWORD *)v385 = v165;
                  *(_WORD *)&v385[4] = 1024;
                  *(_DWORD *)&v385[6] = v166;
                  _os_log_impl(&dword_1E1EA4000, v162, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] RECEIVED INTRA FRAME TS:%08X BITS:%04X SLICES:%d, isTemporalScaledStream=%d, isBaseLayerStream=%d", lengthAtOffsetOut, 0x44u);
                }
              }
              *(unsigned char *)(a2 + 52) = 1;
            }
            if (!*(_DWORD *)(v350 + 84))
            {
              if (!v348 || *(_DWORD *)(a2 + 32) & 2 | v340 || *(unsigned char *)(a2 + 152))
              {
LABEL_321:
                double v189 = *(double *)(a2 + 168);
                if (v189 != 0.0)
                {
                  HIDWORD(v190) = 1083129856;
                  double v191 = (*(double *)(a2 + 24) - v189) * 1000.0;
                  if (v191 > 0.0)
                  {
                    uint64_t v192 = 0;
                    do
                    {
                      if (v192 == 92) {
                        goto LABEL_327;
                      }
                      LODWORD(v190) = *(_DWORD *)((char *)&LateFrameDelayHistBucketRanges + v192 + 4);
                      double v190 = (double)*(unint64_t *)&v190;
                      v192 += 4;
                    }
                    while (v191 >= v190);
                    ++*(_DWORD *)(v4 + v192 + 920);
LABEL_327:
                    double v193 = v191 + *(double *)(v4 + 1016);
                    *(double *)(v4 + 1016) = v193;
                    if (*(double *)(v4 + 1032) > v191) {
                      double v191 = *(double *)(v4 + 1032);
                    }
                    *(double *)(v4 + 1032) = v191;
                    unsigned int v194 = *(_DWORD *)(v4 + 1048) + 1;
                    *(_DWORD *)(v4 + 1048) = v194;
                    *(double *)(v4 + 1024) = v193 / (double)v194;
                    unsigned int v195 = *(_DWORD *)(v4 + 1044);
                    if (v195) {
                      *(double *)(v4 + 1056) = (double)(v194 / v195);
                    }
                  }
                }
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  uint64_t v196 = VRTraceErrorLogLevelToCSTR();
                  v197 = *MEMORY[0x1E4F47A50];
                  v198 = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
                    {
                      int v199 = *(_DWORD *)(a2 + 12);
                      int v200 = *(_DWORD *)(v4 + 1044);
                      int v201 = *(_DWORD *)(v4 + 1048);
                      uint64_t v202 = *(void *)(v4 + 1056);
                      uint64_t v203 = *(void *)(v4 + 1024);
                      *(_DWORD *)lengthAtOffsetOut = 136317186;
                      *(void *)&lengthAtOffsetOut[4] = v196;
                      __int16 v376 = 2080;
                      v377 = "_VideoPacketBuffer_ConfirmFrameAssembledAndCalculateStats";
                      __int16 v378 = 1024;
                      int v379 = 1361;
                      __int16 v380 = 2048;
                      uint64_t v381 = v4;
                      __int16 v382 = 1024;
                      LODWORD(v383) = v199;
                      WORD2(v383) = 1024;
                      *(_DWORD *)((char *)&v383 + 6) = v200;
                      WORD5(v383) = 1024;
                      HIDWORD(v383) = v201;
                      __int16 v384 = 2048;
                      *(void *)v385 = v202;
                      *(_WORD *)&v385[8] = 2048;
                      *(void *)v386 = v203;
                      _os_log_impl(&dword_1E1EA4000, v197, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FrameTimestamp=%d, evictedFramesTrackedCount=%d, evictedFramesRecoveredCount=%d, percOfEvictedFramesRecovered=%f, averageLatePacketDelayForEvictedFrames=%f,", lengthAtOffsetOut, 0x4Cu);
                    }
                  }
                  else if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG))
                  {
                    int v297 = *(_DWORD *)(a2 + 12);
                    int v298 = *(_DWORD *)(v4 + 1044);
                    int v299 = *(_DWORD *)(v4 + 1048);
                    uint64_t v300 = *(void *)(v4 + 1056);
                    uint64_t v301 = *(void *)(v4 + 1024);
                    *(_DWORD *)lengthAtOffsetOut = 136317186;
                    *(void *)&lengthAtOffsetOut[4] = v196;
                    __int16 v376 = 2080;
                    v377 = "_VideoPacketBuffer_ConfirmFrameAssembledAndCalculateStats";
                    __int16 v378 = 1024;
                    int v379 = 1361;
                    __int16 v380 = 2048;
                    uint64_t v381 = v4;
                    __int16 v382 = 1024;
                    LODWORD(v383) = v297;
                    WORD2(v383) = 1024;
                    *(_DWORD *)((char *)&v383 + 6) = v298;
                    WORD5(v383) = 1024;
                    HIDWORD(v383) = v299;
                    __int16 v384 = 2048;
                    *(void *)v385 = v300;
                    *(_WORD *)&v385[8] = 2048;
                    *(void *)v386 = v301;
                    _os_log_debug_impl(&dword_1E1EA4000, v197, OS_LOG_TYPE_DEBUG, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FrameTimestamp=%d, evictedFramesTrackedCount=%d, evictedFramesRecoveredCount=%d, percOfEvictedFramesRecovered=%f, averageLatePacketDelayForEvictedFrames=%f,", lengthAtOffsetOut, 0x4Cu);
                  }
                }
                *(_WORD *)(v4 + 430) = *(_WORD *)(v4 + 428);
                if (!*(unsigned char *)(a2 + 55)) {
                  kdebug_trace();
                }
                if (v144 && !*(_DWORD *)(a2 + 8)
                  || (unsigned int v207 = *(_DWORD *)a2 - 110, v207 <= 0xF) && ((1 << v207) & 0xC001) != 0)
                {
                  *(_DWORD *)(v350 + 76) = 1;
                  ++*v342;
                }
                if (v337)
                {
                  *((_DWORD *)v327 + 56) = offsetToData;
                  CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(v350 + 160), v83, offsetToData, v337, 0, v327 + 15);
                }
                goto LABEL_159;
              }
              int v145 = -2145976286;
              goto LABEL_403;
            }
            if (!*(unsigned char *)(a2 + 55))
            {
              if (*(_DWORD *)(a2 + 32) & 2 | v340)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                {
                  uint64_t v183 = VRTraceErrorLogLevelToCSTR();
                  __int16 v184 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    int v185 = *(unsigned __int16 *)(a2 + 122);
                    int v186 = *(unsigned __int16 *)(a2 + 150);
                    int v187 = *(unsigned __int8 *)(a2 + 152);
                    int v188 = *(unsigned __int8 *)(a2 + 153);
                    *(_DWORD *)lengthAtOffsetOut = 136316930;
                    *(void *)&lengthAtOffsetOut[4] = v183;
                    __int16 v376 = 2080;
                    v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                    __int16 v378 = 1024;
                    int v379 = 2547;
                    __int16 v380 = 2048;
                    uint64_t v381 = v4;
                    __int16 v382 = 1024;
                    LODWORD(v383) = v185;
                    WORD2(v383) = 1024;
                    *(_DWORD *)((char *)&v383 + 6) = v186;
                    WORD5(v383) = 1024;
                    HIDWORD(v383) = v187;
                    __int16 v384 = 1024;
                    *(_DWORD *)v385 = v188;
                    _os_log_impl(&dword_1E1EA4000, v184, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Received refresh frame for streamID=%d, frameSeqNumber=%d, isTemporalScalingStream=%d, isBaseLayerStream=%d", lengthAtOffsetOut, 0x3Eu);
                  }
                }
                _VideoPacketBuffer_ClearFrameList(v4, (uint64_t *)(v4 + 145912));
                *(void *)(v350 + 24) = 0;
                *(_DWORD *)(v350 + 124) = 0;
                *(_DWORD *)(v350 + 84) = 0;
                *(unsigned char *)(v350 + 88) = 0;
                *(unsigned char *)(v350 + 184) = 0;
                goto LABEL_321;
              }
              int v145 = -2145976286;
              int v151 = 5;
LABEL_266:
              HIDWORD(v352) = v151;
              goto LABEL_415;
            }
            if (v348 && !(*(_DWORD *)(a2 + 32) & 2 | v340))
            {
              int v145 = -2145976286;
              if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
                goto LABEL_403;
              }
              uint64_t v221 = VRTraceErrorLogLevelToCSTR();
              int v222 = *MEMORY[0x1E4F47A50];
              __int16 v223 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
                {
                  int v224 = *(_DWORD *)(a2 + 12);
                  int v225 = *(unsigned __int16 *)(a2 + 150);
                  *(_DWORD *)lengthAtOffsetOut = 136316418;
                  *(void *)&lengthAtOffsetOut[4] = v221;
                  __int16 v376 = 2080;
                  v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                  __int16 v378 = 1024;
                  int v379 = 2516;
                  __int16 v380 = 2048;
                  uint64_t v381 = v4;
                  __int16 v382 = 1024;
                  LODWORD(v383) = v224;
                  WORD2(v383) = 1024;
                  *(_DWORD *)((char *)&v383 + 6) = v225;
                  v226 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Late frame was discarded in parse stage time"
                         "stamp=%u frameSequenceNumber=%u";
                  v227 = v222;
                  uint32_t v228 = 50;
LABEL_382:
                  _os_log_impl(&dword_1E1EA4000, v227, OS_LOG_TYPE_DEFAULT, v226, lengthAtOffsetOut, v228);
                }
LABEL_403:
                int v151 = 6;
                goto LABEL_266;
              }
              if (!os_log_type_enabled(v223, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_403;
              }
              int v249 = *(_DWORD *)(a2 + 12);
              int v250 = *(unsigned __int16 *)(a2 + 150);
              *(_DWORD *)lengthAtOffsetOut = 136316418;
              *(void *)&lengthAtOffsetOut[4] = v221;
              __int16 v376 = 2080;
              v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
              __int16 v378 = 1024;
              int v379 = 2516;
              __int16 v380 = 2048;
              uint64_t v381 = v4;
              __int16 v382 = 1024;
              LODWORD(v383) = v249;
              WORD2(v383) = 1024;
              *(_DWORD *)((char *)&v383 + 6) = v250;
              v251 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Late frame was discarded in parse stage timestam"
                     "p=%u frameSequenceNumber=%u";
              v252 = v222;
              uint32_t v253 = 50;
            }
            else
            {
              if (v340 || (*(unsigned char *)(a2 + 32) & 2) != 0)
              {
                int v167 = 1;
              }
              else
              {
                if (*(unsigned char *)(v350 + 88))
                {
                  int v145 = -2145976286;
                  int v151 = 17;
                  goto LABEL_266;
                }
                int v167 = 0;
              }
              if (!*(unsigned char *)(a2 + 152) || !*(unsigned char *)(v350 + 184))
              {
LABEL_306:
                if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                {
                  uint64_t v175 = VRTraceErrorLogLevelToCSTR();
                  unsigned int v176 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    int v177 = *(_DWORD *)(a2 + 12);
                    int v178 = *(unsigned __int16 *)(a2 + 150);
                    int v179 = *(unsigned __int8 *)(a2 + 57);
                    *(_DWORD *)lengthAtOffsetOut = 136316930;
                    *(void *)&lengthAtOffsetOut[4] = v175;
                    __int16 v376 = 2080;
                    v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                    __int16 v378 = 1024;
                    int v379 = 2531;
                    __int16 v380 = 2048;
                    uint64_t v381 = v4;
                    __int16 v382 = 1024;
                    LODWORD(v383) = v177;
                    WORD2(v383) = 1024;
                    *(_DWORD *)((char *)&v383 + 6) = v178;
                    WORD5(v383) = 1024;
                    HIDWORD(v383) = v167;
                    __int16 v384 = 1024;
                    *(_DWORD *)v385 = v179;
                    _os_log_impl(&dword_1E1EA4000, v176, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Successfully assembled previously incomplete late frame timestamp=%u frameSequenceNumber=%u isRefreshFrame=%d hasRetransmittedPackets=%d", lengthAtOffsetOut, 0x3Eu);
                  }
                }
                int v144 = v340;
                if (*(unsigned char *)(a2 + 57) && *(unsigned char *)(v4 + 242))
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                  {
                    uint64_t v180 = VRTraceErrorLogLevelToCSTR();
                    uint64_t v181 = *MEMORY[0x1E4F47A50];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                    {
                      int v182 = *(unsigned __int16 *)(a2 + 150);
                      *(_DWORD *)lengthAtOffsetOut = 136316162;
                      *(void *)&lengthAtOffsetOut[4] = v180;
                      __int16 v376 = 2080;
                      v377 = "_VCVideoPacketBuffer_ParseCompletedPacket";
                      __int16 v378 = 1024;
                      int v379 = 2535;
                      __int16 v380 = 2048;
                      uint64_t v381 = v4;
                      __int16 v382 = 1024;
                      LODWORD(v383) = v182;
                      _os_log_impl(&dword_1E1EA4000, v181, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] late frame assembled with retransmitted packets frameSequenceNumber=%d", lengthAtOffsetOut, 0x2Cu);
                    }
                  }
                  ++*(_DWORD *)(v4 + 1064);
                }
                *(unsigned char *)(v350 + 32) = 1;
                *(_DWORD *)(v350 + 84) = 0;
                *(unsigned char *)(v350 + 88) = 0;
                kdebug_trace();
                goto LABEL_321;
              }
              BOOL v168 = *(_DWORD *)(v350 + 188) != *(unsigned __int16 *)(a2 + 150);
              int v169 = VRTraceGetErrorLogLevelForModule();
              if ((v168 & ~v167 & 1) == 0)
              {
                if (v169 >= 7)
                {
                  uint64_t v170 = VRTraceErrorLogLevelToCSTR();
                  uint64_t v171 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    int v172 = *(unsigned __int8 *)(a2 + 153);
                    int v173 = *(_DWORD *)(a2 + 12);
                    int v174 = *(unsigned __int16 *)(a2 + 150);
                    *(_DWORD *)lengthAtOffsetOut = 136316930;
                    *(void *)&lengthAtOffsetOut[4] = v170;
                    __int16 v376 = 2080;
                    v377 = "_VideoReceiver_HandlePrecedingLossOnBaseLayerOfTemporalStream";
                    __int16 v378 = 1024;
                    int v379 = 2318;
                    __int16 v380 = 2048;
                    uint64_t v381 = v4;
                    __int16 v382 = 1024;
                    LODWORD(v383) = v167;
                    WORD2(v383) = 1024;
                    *(_DWORD *)((char *)&v383 + 6) = v172;
                    WORD5(v383) = 1024;
                    HIDWORD(v383) = v173;
                    __int16 v384 = 1024;
                    *(_DWORD *)v385 = v174;
                    _os_log_impl(&dword_1E1EA4000, v171, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Exiting base layer preceding loss state. isRefreshFrame=%d isBaseLayerStream=%d timestamp=%u frameSequenceNumber=%u", lengthAtOffsetOut, 0x3Eu);
                  }
                }
                *(unsigned char *)(v350 + 184) = 0;
                goto LABEL_306;
              }
              int v145 = -2145976286;
              if (v169 < 8) {
                goto LABEL_403;
              }
              uint64_t v230 = VRTraceErrorLogLevelToCSTR();
              v231 = *MEMORY[0x1E4F47A50];
              v232 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
                {
                  int v233 = *(unsigned __int8 *)(a2 + 153);
                  int v234 = *(_DWORD *)(a2 + 12);
                  int v235 = *(unsigned __int16 *)(a2 + 150);
                  *(_DWORD *)lengthAtOffsetOut = 136316930;
                  *(void *)&lengthAtOffsetOut[4] = v230;
                  __int16 v376 = 2080;
                  v377 = "_VideoReceiver_HandlePrecedingLossOnBaseLayerOfTemporalStream";
                  __int16 v378 = 1024;
                  int v379 = 2321;
                  __int16 v380 = 2048;
                  uint64_t v381 = v4;
                  __int16 v382 = 1024;
                  LODWORD(v383) = 0;
                  WORD2(v383) = 1024;
                  *(_DWORD *)((char *)&v383 + 6) = v233;
                  WORD5(v383) = 1024;
                  HIDWORD(v383) = v234;
                  __int16 v384 = 1024;
                  *(_DWORD *)v385 = v235;
                  v226 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] VPB is still in preceding loss state, droppi"
                         "ng this frame. isRefreshFrame=%d isBaseLayerStream=%d timestamp=%u frameSequenceNumber=%u";
                  v227 = v231;
                  uint32_t v228 = 62;
                  goto LABEL_382;
                }
                goto LABEL_403;
              }
              if (!os_log_type_enabled(v232, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_403;
              }
              int v324 = *(unsigned __int8 *)(a2 + 153);
              int v325 = *(_DWORD *)(a2 + 12);
              int v326 = *(unsigned __int16 *)(a2 + 150);
              *(_DWORD *)lengthAtOffsetOut = 136316930;
              *(void *)&lengthAtOffsetOut[4] = v230;
              __int16 v376 = 2080;
              v377 = "_VideoReceiver_HandlePrecedingLossOnBaseLayerOfTemporalStream";
              __int16 v378 = 1024;
              int v379 = 2321;
              __int16 v380 = 2048;
              uint64_t v381 = v4;
              __int16 v382 = 1024;
              LODWORD(v383) = 0;
              WORD2(v383) = 1024;
              *(_DWORD *)((char *)&v383 + 6) = v324;
              WORD5(v383) = 1024;
              HIDWORD(v383) = v325;
              __int16 v384 = 1024;
              *(_DWORD *)v385 = v326;
              v251 = "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] VPB is still in preceding loss state, dropping t"
                     "his frame. isRefreshFrame=%d isBaseLayerStream=%d timestamp=%u frameSequenceNumber=%u";
              v252 = v231;
              uint32_t v253 = 62;
            }
            _os_log_debug_impl(&dword_1E1EA4000, v252, OS_LOG_TYPE_DEBUG, v251, lengthAtOffsetOut, v253);
            goto LABEL_403;
          }
          int v80 = v79(*(void *)(v4 + 248), blockBufferOut, &theBuffer);
          if (v80)
          {
            int v321 = v80;
            if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
              goto LABEL_541;
            }
            uint64_t v322 = VRTraceErrorLogLevelToCSTR();
            v323 = *MEMORY[0x1E4F47A50];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              goto LABEL_541;
            }
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = v322;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 2762;
            *(_WORD *)&buf[28] = 2048;
            uint64_t v4 = v351;
            *(void *)&buf[30] = v351;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&unsigned char buf[40] = v321;
            _os_log_error_impl(&dword_1E1EA4000, v323, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to decrypt the frame with frameDecryptionCallback result=%d", buf, 0x2Cu);
          }
          else
          {
            size_t v81 = CMBlockBufferGetDataLength(theBuffer);
            if (v81)
            {
              unint64_t v82 = v81;
              uint64_t v83 = theBuffer;
              goto LABEL_187;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() < 3
              || (VRTraceErrorLogLevelToCSTR(), !os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
            {
LABEL_541:
              char v33 = 0;
              uint64_t v5 = v350;
              uint64_t v4 = v351;
              goto LABEL_418;
            }
            uint64_t v4 = v351;
            _VCVideoPacketBuffer_AssembleFrame_cold_5();
          }
          char v33 = 0;
LABEL_366:
          uint64_t v5 = v350;
          goto LABEL_418;
        }
        *(_WORD *)lengthAtOffsetOut = 0;
        if (_VideoPacketBuffer_IsFrameComplete(a2, lengthAtOffsetOut))
        {
          if (*(unsigned char *)(a2 + 152) && *(unsigned char *)(a2 + 153)) {
            *(_WORD *)(v350 + 192) = *(_WORD *)lengthAtOffsetOut;
          }
          goto LABEL_119;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v309 = VRTraceErrorLogLevelToCSTR();
          v310 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316674;
            *(void *)&uint8_t buf[4] = v309;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 2734;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v343;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v341;
            *(_WORD *)&unsigned char buf[40] = 1024;
            *(_DWORD *)&buf[42] = v344;
            *(_WORD *)&buf[46] = 1024;
            *(_DWORD *)&buf[48] = v346;
            _os_log_error_impl(&dword_1E1EA4000, v310, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d Frame assembly failed because of lost packets videoPacketsExpected=%d mediaCount=%d parityCount=%d missingMediaPacketsCount=%d", buf, 0x34u);
          }
        }
        char v33 = 0;
        int v304 = 10;
LABEL_521:
        HIDWORD(v352) = v304;
        LOBYTE(v352) = 1;
        goto LABEL_418;
      }
      uint64_t v5 = v350;
LABEL_508:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v302 = VRTraceErrorLogLevelToCSTR();
        v303 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          *(void *)&uint8_t buf[4] = v302;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&buf[24] = 2728;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v343;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v341;
          *(_WORD *)&unsigned char buf[40] = 1024;
          *(_DWORD *)&buf[42] = v344;
          *(_WORD *)&buf[46] = 1024;
          *(_DWORD *)&buf[48] = v346;
          _os_log_error_impl(&dword_1E1EA4000, v303, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d Frame assembly failed because of no end of frame videoPacketsExpected=%d mediaCount=%d parityCount=%d missingMediaPacketsCount=%d", buf, 0x34u);
        }
      }
      char v33 = 0;
      int v304 = 12;
      goto LABEL_521;
    }
  }
  LOBYTE(v364) = 0;
  LOBYTE(totalLengthOut) = 0;
  LOWORD(dataPointerOut) = 0;
  LOBYTE(cf) = 0;
  __s2[0] = 0;
  double v23 = (const void *)*((void *)v19 + 15);
  if (!v23)
  {
    uint64_t v5 = v350;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      HIDWORD(v352) = 16;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        goto LABEL_140;
      }
      _VCVideoPacketBuffer_AssembleFrame_cold_2();
    }
    int v65 = 16;
LABEL_139:
    HIDWORD(v352) = v65;
LABEL_140:
    if (__s2[0]) {
      CFRelease(__s2[0]);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCVideoPacketBuffer_AssembleFrame_cold_1();
      }
    }
    goto LABEL_417;
  }
  unsigned int v24 = *(_DWORD *)a2 - 100;
  BOOL v97 = v24 > 0x19;
  int v25 = (1 << v24) & 0x3800401;
  BOOL v26 = v97 || v25 == 0;
  uint64_t v5 = v350;
  if (v26)
  {
    char v33 = (OpaqueCMBlockBuffer *)CFRetain(v23);
    goto LABEL_79;
  }
  OSStatus Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(v350 + 160), 0, 0, __s2);
  if (Empty)
  {
    OSStatus v218 = Empty;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v219 = VRTraceErrorLogLevelToCSTR();
      int v220 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)lengthAtOffsetOut = 136316162;
        *(void *)&lengthAtOffsetOut[4] = v219;
        __int16 v376 = 2080;
        v377 = "_VCVideoPacketBuffer_ProcessRTPPackets";
        __int16 v378 = 1024;
        int v379 = 2174;
        __int16 v380 = 2048;
        uint64_t v381 = v4;
        __int16 v382 = 1024;
        LODWORD(v383) = v218;
        _os_log_error_impl(&dword_1E1EA4000, v220, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create block buffer for packet. Status:%d", lengthAtOffsetOut, 0x2Cu);
      }
    }
    int v65 = 7;
    goto LABEL_139;
  }
  *(void *)buf = &v364;
  *(void *)&buf[8] = &totalLengthOut;
  *(void *)&buf[16] = &dataPointerOut;
  CFAllocatorRef v28 = *(const __CFAllocator **)(v350 + 160);
  CFAllocatorRef v29 = *(const __CFAllocator **)(v350 + 176);
  *(void *)&buf[24] = &cf;
  *(void *)&buf[32] = v28;
  *(void *)&unsigned char buf[40] = v29;
  *(CMBlockBufferRef *)&buf[48] = __s2[0];
  int32_t v30 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 - 124) >= 2)
  {
    if (v30 == 110)
    {
      int v31 = RTPUnpackGenericDataPacket((uint64_t)(v19 + 60), (uint64_t)buf);
    }
    else if (v30 == 100)
    {
      int v31 = RTPProcessHEVCPacket(100, &v364, (BOOL *)&totalLengthOut, &dataPointerOut, &cf, *(unsigned __int8 *)(v4 + 240), v28, v29, (uint64_t)(v19 + 60), __s2[0]);
    }
    else
    {
      int v31 = RTPProcessH264Packet((uint64_t)(v19 + 60), (uint64_t)buf);
    }
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_60;
    }
    OSStatus v62 = 0;
    goto LABEL_135;
  }
  LOBYTE(v364) = 1;
  LOBYTE(totalLengthOut) = 1;
  OSStatus appended = CMBlockBufferAppendBufferReference(__s2[0], *((CMBlockBufferRef *)v19 + 15), 0, 0, 0);
  if (appended)
  {
    OSStatus v62 = appended;
LABEL_135:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v63 = VRTraceErrorLogLevelToCSTR();
      int v64 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)lengthAtOffsetOut = 136316162;
        *(void *)&lengthAtOffsetOut[4] = v63;
        __int16 v376 = 2080;
        v377 = "_VCVideoPacketBuffer_ProcessRTPPackets";
        __int16 v378 = 1024;
        int v379 = 2202;
        __int16 v380 = 2048;
        uint64_t v381 = v4;
        __int16 v382 = 1024;
        LODWORD(v383) = v62;
        _os_log_error_impl(&dword_1E1EA4000, v64, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create block buffer for packet. Status:%d", lengthAtOffsetOut, 0x2Cu);
      }
    }
    int v65 = 8;
    goto LABEL_139;
  }
LABEL_60:
  int v34 = v364;
  int v35 = totalLengthOut;
  *((_DWORD *)v19 + 2) = v364;
  *((_DWORD *)v19 + 3) = v35;
  if (*(unsigned char *)(v4 + 240) && (_BYTE)cf)
  {
    int v36 = (unsigned __int16)dataPointerOut;
    if (*(unsigned char *)(a2 + 148))
    {
      if (*(unsigned __int16 *)(a2 + 146) != (unsigned __int16)dataPointerOut)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v37 = VRTraceErrorLogLevelToCSTR();
          __int16 v38 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v53 = *(unsigned __int16 *)(a2 + 146);
            *(_DWORD *)lengthAtOffsetOut = 136316418;
            *(void *)&lengthAtOffsetOut[4] = v37;
            __int16 v376 = 2080;
            v377 = "_VideoPacketBuffer_UpdateFrameDecodingOrder";
            __int16 v378 = 1024;
            int v379 = 1237;
            __int16 v380 = 2048;
            uint64_t v381 = v4;
            __int16 v382 = 1024;
            LODWORD(v383) = v53;
            WORD2(v383) = 1024;
            *(_DWORD *)((char *)&v383 + 6) = v36;
            _os_log_error_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Decoding order is different within a frame. Previous:%d New:%d", lengthAtOffsetOut, 0x32u);
          }
        }
        *(_WORD *)(a2 + 146) = v36;
        int v34 = v364;
        uint64_t v5 = v350;
      }
    }
    else
    {
      *(_WORD *)(a2 + 146) = (_WORD)dataPointerOut;
      *(unsigned char *)(a2 + 148) = 1;
    }
  }
  BOOL v39 = *(unsigned __int16 **)(a2 + 96) == v19 && v34 == 0;
  int v40 = v352;
  if (v39) {
    int v40 = 1;
  }
  LODWORD(v352) = v40;
  int v41 = HIDWORD(v352);
  if (v39) {
    int v41 = 9;
  }
  HIDWORD(v352) = v41;
  char v33 = __s2[0];
LABEL_79:
  size_t v42 = CMBlockBufferGetDataLength(v33);
  if (*(unsigned char *)(a2 + 152)) {
    goto LABEL_94;
  }
  unsigned __int16 v43 = *v19 + ~*(_WORD *)(v4 + 428);
  if ((__int16)v43 < 1)
  {
    int v48 = 0;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v44 = VRTraceErrorLogLevelToCSTR();
      uint64_t v45 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v46 = *v19;
        int v47 = *(unsigned __int16 *)(v351 + 428);
        *(_DWORD *)buf = 136316674;
        *(void *)&uint8_t buf[4] = v44;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCVideoPacketBuffer_DetectMissingPackets";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 2229;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v351;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&unsigned char buf[40] = v46;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v47;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v43;
        _os_log_impl(&dword_1E1EA4000, v45, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] PacketSeq:%d LastSeq:%d missingCount:%d", buf, 0x38u);
      }
    }
    if (v21)
    {
      int v48 = 0;
      int v348 = 1;
    }
    else
    {
      uint64_t v352 = 0xA00000001;
      int v48 = 1;
    }
    uint64_t v5 = v350;
    uint64_t v4 = v351;
  }
  int v49 = *v19;
  int v50 = v49 - *(unsigned __int16 *)(v4 + 428);
  if (v50 && (unsigned __int16)v50 <= 0x7FFEu) {
    *(_WORD *)(v4 + 428) = v49;
  }
  if (!v48)
  {
LABEL_94:
    if (*(_DWORD *)a2 == 123 || *(_DWORD *)a2 == 100)
    {
      if (v355 && *((_DWORD *)v19 + 2)) {
        _VCVideoPacketBuffer_FinalizeGOBLengthAdjustement((uint64_t)&v355);
      }
      if (*((_DWORD *)v19 + 2) && !*((_DWORD *)v19 + 3))
      {
        CFTypeRef v355 = CFRetain(v33);
        uint64_t v356 = 0;
        size_t v357 = v42;
        *(void *)buf = 0;
        *(void *)lengthAtOffsetOut = 0;
        __s2[0] = 0;
        CMBlockBufferGetDataPointer(v33, 4uLL, (size_t *)lengthAtOffsetOut, (size_t *)__s2, (char **)buf);
        if (*(void *)lengthAtOffsetOut >= 4uLL && **(_DWORD **)buf == -1547639150)
        {
          CMBlockBufferGetDataPointer(v33, 0, (size_t *)lengthAtOffsetOut, 0, (char **)buf);
          uint64_t v356 = bswap32(**(_DWORD **)buf) + 4;
          size_t v357 = v42 - v356;
          if (v42 == v356)
          {
            uint64_t v356 = 0;
            size_t v357 = v42;
          }
        }
      }
      else if (v355)
      {
        v357 += v42;
      }
    }
    size_t v51 = CMBlockBufferGetDataLength(blockBufferOut);
    OSStatus v52 = CMBlockBufferAppendBufferReference(blockBufferOut, v33, 0, v42, 0);
    if (v51 + v42 == CMBlockBufferGetDataLength(blockBufferOut))
    {
      uint64_t v4 = v351;
      if (!v52)
      {
        v353 += v42;
        BOOL v20 = *((_DWORD *)v19 + 4) != 0;
        if (v33) {
          CFRelease(v33);
        }
        char v21 = 0;
        goto LABEL_107;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v216 = VRTraceErrorLogLevelToCSTR();
        int v214 = *MEMORY[0x1E4F47A50];
        uint64_t v5 = v350;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_363;
        }
        size_t v308 = CMBlockBufferGetDataLength(blockBufferOut);
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = v216;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 2718;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v351;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&unsigned char buf[40] = v308;
        goto LABEL_516;
      }
    }
    else
    {
      uint64_t v4 = v351;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v213 = VRTraceErrorLogLevelToCSTR();
        int v214 = *MEMORY[0x1E4F47A50];
        uint64_t v5 = v350;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
LABEL_363:
          int v217 = 11;
LABEL_364:
          HIDWORD(v352) = v217;
          goto LABEL_418;
        }
        size_t v215 = CMBlockBufferGetDataLength(blockBufferOut);
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = v213;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 2717;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v351;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&unsigned char buf[40] = v215;
LABEL_516:
        _os_log_error_impl(&dword_1E1EA4000, v214, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Error appending packets, buffer size %zu", buf, 0x30u);
        goto LABEL_363;
      }
    }
    HIDWORD(v352) = 11;
    goto LABEL_366;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v239 = VRTraceErrorLogLevelToCSTR();
    v240 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(void *)&uint8_t buf[4] = v239;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&buf[24] = 2711;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v4;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&unsigned char buf[40] = v346;
      *(_WORD *)&unsigned char buf[44] = 1024;
      *(_DWORD *)&buf[46] = v341;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = v344;
      _os_log_error_impl(&dword_1E1EA4000, v240, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Error while detecting missing packets missingMediaPacketsCount=%d mediaCount=%d parityCount=%d", buf, 0x38u);
    }
  }
LABEL_418:
  int v93 = *(unsigned __int8 *)(v4 + 242);
  if (!*(unsigned char *)(v4 + 242)) {
    goto LABEL_433;
  }
  __int16 v260 = 0;
  long long v372 = 0u;
  memset(v373, 0, 28);
  long long v370 = 0u;
  long long v371 = 0u;
  long long v368 = 0u;
  long long v369 = 0u;
  long long v367 = 0u;
  memset(buf, 0, sizeof(buf));
  v261 = *(unsigned __int16 **)(a2 + 96);
  LOWORD(v262) = *v261;
  while (2)
  {
    if (*((_DWORD *)v261 + 6))
    {
      unsigned int v263 = *((_DWORD *)v261 + 8);
      if (v263 >> 30)
      {
        if ((v263 & 0x400000) == 0) {
          goto LABEL_428;
        }
      }
      else if ((v263 & 0x800000) == 0)
      {
        goto LABEL_428;
      }
    }
    unsigned __int16 v264 = v262 + 1;
    unsigned int v262 = *v261;
    if (v262 > v264)
    {
      unsigned int v265 = v264;
      do
      {
        snprintf((char *)buf, 0xDCuLL, "%s (%i)", (const char *)buf, v265);
        ++v260;
        ++v265;
        unsigned int v262 = *v261;
      }
      while (v265 < v262);
    }
LABEL_428:
    v261 = (unsigned __int16 *)*((void *)v261 + 13);
    if (v261) {
      continue;
    }
    break;
  }
  if (v260)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v266 = VRTraceErrorLogLevelToCSTR();
      v267 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v291 = *(unsigned __int16 *)(a2 + 150);
        int v292 = *(_DWORD *)(a2 + 16);
        if (HIDWORD(v352)) {
          v293 = kVCKeyFrameRequestReasonStrings[HIDWORD(v352)];
        }
        else {
          v293 = "NONE";
        }
        *(_DWORD *)lengthAtOffsetOut = 136317698;
        *(void *)&lengthAtOffsetOut[4] = v266;
        __int16 v376 = 2080;
        v377 = "_VideoPacketBuffer_PrintMissingSequenceNumbers";
        __int16 v378 = 1024;
        int v379 = 2660;
        __int16 v380 = 2048;
        uint64_t v381 = v4;
        __int16 v382 = 1024;
        LODWORD(v383) = v346;
        WORD2(v383) = 1024;
        *(_DWORD *)((char *)&v383 + 6) = v341;
        WORD5(v383) = 1024;
        HIDWORD(v383) = v344;
        __int16 v384 = 1024;
        *(_DWORD *)v385 = v291;
        *(_WORD *)&v385[4] = 1024;
        *(_DWORD *)&v385[6] = v292;
        *(_WORD *)v386 = 2080;
        *(void *)&v386[2] = buf;
        __int16 v387 = 2080;
        v388 = v293;
        _os_log_error_impl(&dword_1E1EA4000, v267, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Error in assembly missingMediaPacketsCount=%d mediaCount=%d parityCount=%d frameSequenceNumber=%d ssrc=%u missingPackets=%s reason=%s", lengthAtOffsetOut, 0x58u);
      }
    }
  }
  int v93 = 0;
LABEL_433:
  int v92 = 1;
LABEL_434:
  if (*(unsigned char *)(a2 + 152) && (*(_DWORD *)a2 & 0xFFFFFFFE) != 0x7C)
  {
    if (v92)
    {
      int v93 = *(unsigned __int8 *)(a2 + 153);
      if (*(unsigned char *)(a2 + 153))
      {
        if (*(unsigned char *)(v5 + 184) || *(unsigned char *)(v5 + 88)) {
          goto LABEL_440;
        }
        v284 = v354;
        *(_DWORD *)(v5 + 188) = *(unsigned __int16 *)(a2 + 150);
        *(_DWORD *)(v5 + 84) = 1;
        *(unsigned char *)(v5 + 184) = 1;
        *(_DWORD *)(v5 + 92) = 6;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v285 = VRTraceErrorLogLevelToCSTR();
          v286 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v287 = *(unsigned __int16 *)(a2 + 150);
            int v288 = *(_DWORD *)(a2 + 12);
            int v289 = *(_DWORD *)(v5 + 188);
            *(_DWORD *)buf = 136316674;
            *(void *)&uint8_t buf[4] = v285;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoPacketBuffer_CheckForMissingBaseLayerAssemblyOfTemporalStream";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 2625;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v4;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&unsigned char buf[40] = v287;
            *(_WORD *)&unsigned char buf[44] = 1024;
            *(_DWORD *)&buf[46] = v288;
            *(_WORD *)&buf[50] = 1024;
            *(_DWORD *)&buf[52] = v289;
            _os_log_impl(&dword_1E1EA4000, v286, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Assembly of base layer frame of temporal stream failed, refresh frame is needed. frameSequenceNumber=%d timestamp=%u baseLayerFrameAssemblyFailedSequenceNumber=%d", buf, 0x38u);
          }
        }
        if (!v284) {
LABEL_440:
        }
          int v93 = 0;
        else {
          int v93 = v284[16] != 0;
        }
      }
    }
    else
    {
      int v93 = 1;
    }
    if (!*(unsigned char *)(a2 + 153) && *(unsigned char *)(v5 + 184) && !*(unsigned char *)(a2 + 52) && !*(unsigned char *)(a2 + 53)) {
      int v93 = 0;
    }
  }
  if (v93)
  {
    BOOL v268 = 1;
  }
  else
  {
    unsigned int v269 = *(_DWORD *)a2 - 110;
    if (v269 <= 0xF && ((1 << v269) & 0xC001) != 0 || *(unsigned char *)(a2 + 152)) {
      goto LABEL_447;
    }
    *(_DWORD *)(v5 + 84) = 1;
    *(_DWORD *)(v5 + 92) = HIDWORD(v352);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v280 = VRTraceErrorLogLevelToCSTR();
      v281 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v282 = **(unsigned __int16 **)(a2 + 96);
        if (HIDWORD(v352)) {
          v283 = kVCKeyFrameRequestReasonStrings[HIDWORD(v352)];
        }
        else {
          v283 = "NONE";
        }
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = v280;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 2796;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v4;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&unsigned char buf[40] = v282;
        *(_WORD *)&unsigned char buf[44] = 2080;
        *(void *)&buf[46] = v283;
        _os_log_impl(&dword_1E1EA4000, v281, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] seq:%d Needs Refresh badFrame reason:%s ", buf, 0x36u);
      }
    }
    if ((_BYTE)v352) {
      ++*(_DWORD *)(v4 + 468);
    }
    if (!v354) {
LABEL_447:
    }
      BOOL v268 = 0;
    else {
      BOOL v268 = v354[16] != 0;
    }
  }
  if (!*(_DWORD *)(a2 + 40))
  {
    ++*(_DWORD *)(v4 + 476);
    if ((_BYTE)v352)
    {
      ++*(_DWORD *)(v4 + 504);
    }
    else
    {
      ++*(_DWORD *)(v4 + 472);
      ++*(_DWORD *)(v4 + 500);
    }
  }
  if (v268)
  {
    if (*(unsigned char *)(a2 + 57))
    {
      if (*(unsigned char *)(v4 + 242))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v270 = VRTraceErrorLogLevelToCSTR();
          v271 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v272 = *(unsigned __int16 *)(a2 + 150);
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = v270;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 2819;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v4;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&unsigned char buf[40] = v272;
            _os_log_impl(&dword_1E1EA4000, v271, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] frame recovered with retransmitted packets frameSequenceNumber=%d", buf, 0x2Cu);
          }
        }
      }
      ++*(_DWORD *)(v4 + 1068);
    }
    *(_WORD *)(v4 + 432) = *(_WORD *)(a2 + 150);
    *a3 = v354;
    v354 = 0;
  }
  else
  {
    if (*(unsigned char *)(a2 + 57))
    {
      if (*(unsigned char *)(v4 + 242))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v273 = VRTraceErrorLogLevelToCSTR();
          v274 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v275 = *(unsigned __int16 *)(a2 + 150);
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = v273;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCVideoPacketBuffer_AssembleFrame";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 2829;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v4;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&unsigned char buf[40] = v275;
            _os_log_impl(&dword_1E1EA4000, v274, OS_LOG_TYPE_DEFAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] frame with retransmitted packets failed to assemble frameSequenceNumber=%d", buf, 0x2Cu);
          }
        }
      }
      ++*(_DWORD *)(v4 + 1072);
    }
    *a3 = 0;
  }
  v276 = *(FILE ***)(v5 + 112);
  if (v276)
  {
    *(_OWORD *)buf = xmmword_1E259E508;
    *(_OWORD *)&buf[16] = unk_1E259E518;
    memset(&buf[32], 170, 64);
    *(void *)buf = *(void *)(a2 + 24);
    HIDWORD(v277) = *(_DWORD *)&buf[4];
    *(_DWORD *)&buf[8] = *(unsigned __int16 *)(a2 + 150);
    LODWORD(v277) = *(_DWORD *)(a2 + 12);
    *(double *)&buf[16] = (double)v277;
    *(_DWORD *)&buf[24] = v353;
    buf[28] = *(unsigned char *)(a2 + 52);
    *(void *)&long long v278 = *(void *)(v5 + 120);
    *((void *)&v278 + 1) = *(void *)(v5 + 40);
    *(_DWORD *)&buf[32] = *(unsigned __int16 *)(a2 + 122);
    *(_OWORD *)&buf[36] = v278;
    *(_DWORD *)&buf[52] = v343;
    *(_DWORD *)&buf[56] = v343 - v346;
    *(_DWORD *)&buf[60] = v346;
    *(_DWORD *)&buf[64] = v344;
    *(_DWORD *)&buf[68] = v346 - v344;
    *(_DWORD *)&buf[72] = v346;
    *(_DWORD *)&buf[76] = *(unsigned __int8 *)(a2 + 152);
    *(_DWORD *)&buf[80] = 0;
    *(void *)&buf[84] = __PAIR64__(HIDWORD(v352), v268);
    LODWORD(v278) = *(_DWORD *)v5;
    *(double *)&long long v367 = (double)(unint64_t)v278;
    VRDump_AssembleFrame(v276, (uint64_t)buf);
  }
  _VCVideoPacketBuffer_FinalizeGOBLengthAdjustement((uint64_t)&v355);
  if (v33) {
    CFRelease(v33);
  }
  VCVideoReceiverSampleBuffer_Destroy(&v354);
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v268;
}

void VideoPacketBuffer_SetRoundTripTime(uint64_t a1, double a2)
{
  if (a1)
  {
    uint64_t v4 = (pthread_mutex_t *)(a1 + 360);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 360));
    VCNACKGenerator_UpdateRTT(*(void *)(a1 + 146096), a2);
    *(double *)(a1 + 456) = a2;
    pthread_mutex_unlock(v4);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoPacketBuffer_SetRoundTripTime_cold_1();
    }
  }
}

void _VCVideoPacketBuffer_FinalizeGOBLengthAdjustement(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*(void *)(a1 + 16) == 4
      || (unsigned int sourceBytes = bswap32(*(_DWORD *)(a1 + 16) - 4),
          CMBlockBufferReplaceDataBytes(&sourceBytes, (CMBlockBufferRef)v2, *(void *)(a1 + 8), 4uLL),
          (unsigned int v2 = *(void **)a1) != 0))
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

void _VideoPacketBuffer_AddFrameToBufferInOrder(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(a2 + 12);
    int v6 = *(_DWORD *)(v4 + 12);
    if (v6 == v5 || (v6 - v5) >= 0x7FFFFFFF)
    {
      do
      {
        uint64_t v10 = v4;
        uint64_t v4 = *(void *)(v4 + 112);
        BOOL v11 = v4 != 0;
        if (!v4) {
          break;
        }
        unsigned int v8 = *(_DWORD *)(v4 + 12) - v5;
      }
      while (!v8 || v8 >= 0x7FFFFFFF);
      uint64_t v3 = (uint64_t *)(v10 + 112);
    }
    else
    {
      uint64_t v10 = 0;
      BOOL v11 = 1;
    }
  }
  else
  {
    uint64_t v10 = 0;
    BOOL v11 = 0;
  }
  *(void *)(a2 + 112) = v4;
  _VideoPacketBuffer_UpdatePreviousFrameSequenceNumber(a2, v10, v11);
  *uint64_t v3 = a2;
}

uint64_t VideoDecoder_Create(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 2147745793;
  if (a2)
  {
    if (*(void *)(a2 + 24))
    {
      int v5 = (char *)malloc_type_calloc(1uLL, 0xD0uLL, 0x10F004099750CEEuLL);
      if (v5)
      {
        int v6 = v5;
        pthread_mutex_init((pthread_mutex_t *)(v5 + 112), 0);
        *(void *)int v6 = *(void *)(a2 + 8);
        *((_DWORD *)v6 + 2) = VCReporting_GetDynamicReportingModuleID();
        *((_DWORD *)v6 + 3) = 0;
        if (*(unsigned char *)(a2 + 16)) {
          *((_DWORD *)v6 + 5) |= 4u;
        }
        if (*(unsigned char *)(a2 + 17)) {
          *((_DWORD *)v6 + 5) |= 1u;
        }
        *(_OWORD *)(v6 + 184) = *(_OWORD *)(a2 + 24);
        uint64_t Handle = CreateHandle();
        *a1 = Handle;
        if (Handle == 0xFFFFFFFFLL)
        {
          free(v6);
          return 2147745797;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 2147745795;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoDecoder_Create_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoDecoder_Create_cold_1();
    }
  }
  return v2;
}

uint64_t VideoDecoder_Destroy()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2147745794;
  }
  uint64_t v1 = v0;
  CheckOutHandleDebug();
  uint64_t v2 = *(void **)(v1 + 40);
  if (v2) {
    free(v2);
  }
  VideoDecoder_DecompClose(v1);
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 112));
  free((void *)v1);
  return 0;
}

void VideoDecoder_DecompClose(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    VCPDecompressionSessionWaitForAsynchronousFrames();
    uint64_t v2 = *(const void **)(a1 + 24);
    if (v2) {
      CFRelease(v2);
    }
    *(void *)(a1 + 24) = 0;
    FigFormatDescriptionRelease();
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  uint64_t v3 = *(OSQueueHead **)(a1 + 176);
  if (v3)
  {
    VCMemoryPool_Destroy(v3);
    *(void *)(a1 + 176) = 0;
  }
}

void VideoDecoder_SetDecoderSpecification(__CFDictionary *a1)
{
  char v2 = VCFeatureFlagManager_UseAvconferencedOniOSSpecficFeatures(a1);
  if (a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = (const void *)VCAudioSessionCMS_SessionReference();
      if (v3)
      {
        uint64_t v4 = (const void *)*MEMORY[0x1E4F455B8];
        CFDictionarySetValue(a1, v4, v3);
      }
    }
  }
}

uint64_t VideoDecoder_NewFormat_InitDecoder(unint64_t a1, char *a2, int *a3, const char *a4, int32_t *a5, int32_t *a6, char a7, int a8, char a9, __int16 a10, __int16 a11, ...)
{
  va_start(va, a11);
  parameterSetSizes[3] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 2147745796;
  uint64_t v18 = CheckInHandleDebug();
  if (!v18) {
    return 2147745794;
  }
  uint64_t v19 = v18;
  int v121 = a8;
  uint64_t v122 = (pthread_mutex_t *)(v18 + 112);
  pthread_mutex_lock((pthread_mutex_t *)(v18 + 112));
  VideoDecoder_DecompClose(v19);
  *(_DWORD *)(v19 + 16) = 1;
  *(_WORD *)(v19 + 56) = a11;
  CFStringRef v20 = (const __CFString *)CFPreferencesCopyAppValue(@"FaceTimeDecoder", @"com.apple.VideoConference");
  if (v20)
  {
    CFStringRef v21 = v20;
    if (CFEqual(v20, @"hw"))
    {
      *(_DWORD *)(v19 + 16) = 1;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v22 = VRTraceErrorLogLevelToCSTR();
        double v23 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315650;
          *(void *)((char *)buf + 4) = v22;
          WORD2(buf[1]) = 2080;
          *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
          HIWORD(buf[2]) = 1024;
          int v132 = 501;
          _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d 'com.apple.VideoConference FaceTimeDecoder hw' forcing hardware decode", (uint8_t *)buf, 0x1Cu);
        }
      }
    }
    if (CFEqual(v21, @"sw"))
    {
      *(_DWORD *)(v19 + 16) = 2;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v24 = VRTraceErrorLogLevelToCSTR();
        int v25 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315650;
          *(void *)((char *)buf + 4) = v24;
          WORD2(buf[1]) = 2080;
          *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
          HIWORD(buf[2]) = 1024;
          int v132 = 505;
          _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d 'com.apple.VideoConference FaceTimeDecoder sw' forcing software decode", (uint8_t *)buf, 0x1Cu);
        }
      }
    }
    CFRelease(v21);
  }
  BOOL v26 = *(void **)(v19 + 40);
  uint64_t v27 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if ((a7 & 1) == 0)
  {
    if (v26)
    {
      free(v26);
      *(void *)(v19 + 40) = 0;
    }
    size_t v32 = *a3;
    char v33 = malloc_type_calloc(1uLL, v32, 0x571227FCuLL);
    *(void *)(v19 + 40) = v33;
    unint64_t v34 = a1;
    if (v33)
    {
      memcpy(v33, a2, v32);
      *(void *)(v19 + 48) = v32;
      int v35 = *(const uint8_t **)(v19 + 40);
    }
    else
    {
      int v35 = 0;
      size_t v32 = *(void *)(v19 + 48);
    }
    int v126 = (void (*)(uint64_t, unsigned __int8 *, int, uint64_t, void *, CMTime *))0xAAAAAAAAAAAAAAAALL;
    unint64_t v127 = 0xAAAAAAAAAAAAAAAALL;
    CMVideoFormatDescriptionRef formatDescriptionOut = 0;
    CFAllocatorRef v36 = *v27;
    CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
    if (CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(v36, v35, v32, SystemEncoding, 0, &formatDescriptionOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoDecoder_NewFormat_InitDecoder_cold_8();
        }
      }
    }
    else
    {
      __int16 v38 = *(const void **)(v19 + 32);
      if (v38) {
        CFRelease(v38);
      }
      *(void *)(v19 + 32) = formatDescriptionOut;
    }
    CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v19 + 32));
    *(CMVideoDimensions *)(v19 + 60) = Dimensions;
    if (a5) {
      *a5 = Dimensions.width;
    }
    if (a6) {
      *a6 = Dimensions.height;
    }
    *(_DWORD *)(v19 + 68) = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(v19 + 32));
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(v19 + 32));
    if (Extensions)
    {
      CFDictionaryRef v41 = Extensions;
      size_t v42 = (const void *)*MEMORY[0x1E4F24A90];
      if (!CFDictionaryContainsKey(Extensions, (const void *)*MEMORY[0x1E4F24A90]))
      {
        buf[0] = 0xAAAAAAAAAAAAAAAALL;
        MutableCopy = CFDictionaryCreateMutableCopy(v36, 0, v41);
        CFDictionarySetValue(MutableCopy, v42, (const void *)*MEMORY[0x1E4F24AB0]);
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24BC8], (const void *)*MEMORY[0x1E4F24BE0]);
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24C18], (const void *)*MEMORY[0x1E4F24C48]);
        if (CMVideoFormatDescriptionCreate(v36, *(_DWORD *)(v19 + 68), *(_DWORD *)(v19 + 60), *(_DWORD *)(v19 + 64), MutableCopy, (CMVideoFormatDescriptionRef *)buf))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VideoDecoder_NewFormat_InitDecoder_cold_7();
            }
          }
        }
        else
        {
          FigFormatDescriptionRelease();
          *(void *)(v19 + 32) = buf[0];
        }
        CFRelease(MutableCopy);
      }
    }
LABEL_116:
    if (*(_DWORD *)(v19 + 16) == 2)
    {
      *(_DWORD *)(v19 + 68) = 1718908515;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v77 = VRTraceErrorLogLevelToCSTR();
        int v78 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315650;
          *(void *)((char *)buf + 4) = v77;
          WORD2(buf[1]) = 2080;
          *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
          HIWORD(buf[2]) = 1024;
          int v132 = 658;
          BOOL v79 = " [%s] %s:%d Using Software Video Decoder";
LABEL_123:
          _os_log_impl(&dword_1E1EA4000, v78, OS_LOG_TYPE_DEFAULT, v79, (uint8_t *)buf, 0x1Cu);
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v80 = VRTraceErrorLogLevelToCSTR();
      int v78 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315650;
        *(void *)((char *)buf + 4) = v80;
        WORD2(buf[1]) = 2080;
        *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
        HIWORD(buf[2]) = 1024;
        int v132 = 660;
        BOOL v79 = " [%s] %s:%d Using Hardware Video Decoder";
        goto LABEL_123;
      }
    }
    LODWORD(parameterSetSizes[0]) = -1431655766;
    LODWORD(parameterSetSizes[0]) = FigThreadGetMachThreadPriorityValue();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v81 = VRTraceErrorLogLevelToCSTR();
      unint64_t v82 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315906;
        *(void *)((char *)buf + 4) = v81;
        WORD2(buf[1]) = 2080;
        *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
        HIWORD(buf[2]) = 1024;
        int v132 = 665;
        __int16 v133 = 1024;
        LODWORD(v134) = parameterSetSizes[0];
        _os_log_impl(&dword_1E1EA4000, v82, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d machThreadPriority=%d", (uint8_t *)buf, 0x22u);
      }
    }
    CFAllocatorRef v83 = *v27;
    CFNumberRef v84 = CFNumberCreate(*v27, kCFNumberSInt32Type, parameterSetSizes);
    uint64_t v85 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    __int16 v86 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    Mutable = CFDictionaryCreateMutable(v83, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryRef v88 = CFDictionaryCreate(0, 0, 0, 0, v85, v86);
    if (v88)
    {
      CFDictionaryRef v89 = v88;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v88);
      CFRelease(v89);
    }
    int v90 = CFDictionaryCreateMutable(v83, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (VCFeatureFlagManager_UseOutOfProcessVideoDecoding())
    {
      if (!v84) {
        goto LABEL_142;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v91 = VRTraceErrorLogLevelToCSTR();
        int v92 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315906;
          *(void *)((char *)buf + 4) = v91;
          WORD2(buf[1]) = 2080;
          *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
          HIWORD(buf[2]) = 1024;
          int v132 = 680;
          __int16 v133 = 1024;
          LODWORD(v134) = parameterSetSizes[0];
          _os_log_impl(&dword_1E1EA4000, v92, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Adding machThreadPriority=%d as kVTDecompressionPropertyKey_MachThreadPriorityOfConsistentThreadCallingDecodeFrame", (uint8_t *)buf, 0x22u);
        }
      }
      int v93 = (const void *)*MEMORY[0x1E4F44C58];
      __int16 v94 = v90;
      CFNumberRef v95 = v84;
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() <= 6)
      {
        uint64_t v99 = (const void *)*MEMORY[0x1E4F44D78];
      }
      else
      {
        uint64_t v96 = VRTraceErrorLogLevelToCSTR();
        BOOL v97 = *MEMORY[0x1E4F47A50];
        BOOL v98 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
        uint64_t v99 = (const void *)*MEMORY[0x1E4F44D78];
        if (v98)
        {
          LODWORD(buf[0]) = 136315906;
          *(void *)((char *)buf + 4) = v96;
          WORD2(buf[1]) = 2080;
          *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
          HIWORD(buf[2]) = 1024;
          int v132 = 684;
          __int16 v133 = 2112;
          uint64_t v134 = (uint64_t)v99;
          _os_log_impl(&dword_1E1EA4000, v97, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Adding kVTDecompressionSessionOption_AllowClientProcessDecode=%@ to decoderSpecification", (uint8_t *)buf, 0x26u);
        }
        unint64_t v34 = a1;
      }
      CFNumberRef v95 = (CFNumberRef)*MEMORY[0x1E4F1CFD0];
      __int16 v94 = v90;
      int v93 = v99;
    }
    CFDictionarySetValue(v94, v93, v95);
LABEL_142:
    VideoDecoder_SetDecoderSpecification(v90);
    CFStringRef v100 = CFStringCreateWithCString(0, a4, 0);
    CFDictionarySetValue(v90, @"NegotiationDetails", v100);
    if (v100) {
      CFRelease(v100);
    }
    FigCFDictionarySetInt64();
    int v126 = VideoDecoder_VTDecompressionCallback;
    unint64_t v127 = v34;
    int v101 = VCPDecompressionSessionCreate();
    if (v90) {
      CFRelease(v90);
    }
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v101)
    {
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoDecoder_NewFormat_InitDecoder_cold_3();
        }
      }
      VideoUtil_PrintFormatDesc(*(const opaqueCMFormatDescription **)(v19 + 32));
      if (!v84) {
        goto LABEL_152;
      }
    }
    else
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v104 = VRTraceErrorLogLevelToCSTR();
        int v105 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v106 = *(void *)(v19 + 24);
          int v107 = *(_DWORD *)(v19 + 60);
          int v108 = *(_DWORD *)(v19 + 64);
          unint64_t v109 = FourccToCStr(*(_DWORD *)(v19 + 68));
          uint64_t v110 = *(void *)(v19 + 192);
          LODWORD(buf[0]) = 136317442;
          *(void *)((char *)buf + 4) = v104;
          WORD2(buf[1]) = 2080;
          *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
          HIWORD(buf[2]) = 1024;
          int v132 = 717;
          __int16 v133 = 2048;
          uint64_t v134 = v19;
          __int16 v135 = 2048;
          *(void *)uint64_t v136 = v106;
          *(_WORD *)&v136[8] = 1024;
          int v137 = v107;
          __int16 v138 = 1024;
          int v139 = v108;
          __int16 v140 = 2080;
          int v141 = v109;
          __int16 v142 = 2080;
          BOOL v143 = a4;
          __int16 v144 = 1024;
          int v145 = v110;
          _os_log_impl(&dword_1E1EA4000, v105, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [AR_RX][FLS] Created decoder=%p session=%p width=%d height=%d codec=%s featureListString=%s videoReceiverHandle=0x%x", (uint8_t *)buf, 0x56u);
        }
      }
      if (VCFeatureFlagManager_UseOutOfProcessVideoDecoding() && v84)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v111 = VRTraceErrorLogLevelToCSTR();
          uint64_t v112 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf[0]) = 136315906;
            *(void *)((char *)buf + 4) = v111;
            WORD2(buf[1]) = 2080;
            *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
            HIWORD(buf[2]) = 1024;
            int v132 = 721;
            __int16 v133 = 1024;
            LODWORD(v134) = parameterSetSizes[0];
            _os_log_impl(&dword_1E1EA4000, v112, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Adding machThreadPriority=%d as kVTDecompressionPropertyKey_MachThreadPriorityOfConsistentThreadCallingDecodeFrame", (uint8_t *)buf, 0x22u);
          }
        }
        VCPDecompressionSessionSetProperty();
      }
      CFNumberRef v113 = CFNumberCreate(0, kCFNumberIntType, va);
      if (v113)
      {
        CFNumberRef v114 = v113;
        VCPDecompressionSessionSetProperty();
        CFRelease(v114);
      }
      uint64_t v115 = *MEMORY[0x1E4F1CFD0];
      uint64_t v116 = *MEMORY[0x1E4F1CFC8];
      VCPDecompressionSessionSetProperty();
      if ((a9 & 2) != 0) {
        uint64_t v117 = v115;
      }
      else {
        uint64_t v117 = v116;
      }
      VCPDecompressionSessionSetProperty();
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v118 = VRTraceErrorLogLevelToCSTR();
        OSStatus v119 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 136315906;
          *(void *)((char *)buf + 4) = v118;
          WORD2(buf[1]) = 2080;
          *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
          HIWORD(buf[2]) = 1024;
          int v132 = 739;
          __int16 v133 = 2112;
          uint64_t v134 = v117;
          _os_log_impl(&dword_1E1EA4000, v119, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d kVCPDecompressionPropertyKey_MLEnhance=%@", (uint8_t *)buf, 0x26u);
        }
      }
      LODWORD(buf[1]) = 0;
      buf[0] = 0;
      snprintf((char *)buf, 0xCuLL, "%d", v121);
      reportingLog();
      if (!v84) {
        goto LABEL_152;
      }
    }
    CFRelease(v84);
LABEL_152:
    CFRelease(Mutable);
    if (v101) {
      uint64_t v17 = -v101 | 0xA0040000;
    }
    else {
      uint64_t v17 = 0;
    }
    *(_DWORD *)(v19 + 12) = v101 == 0;
    *(void *)(v19 + 176) = VCMemoryPool_Create(0x38uLL);
    pthread_mutex_unlock(v122);
LABEL_156:
    CheckOutHandleDebug();
    return v17;
  }
  if (v26)
  {
    free(v26);
    *(void *)(v19 + 40) = 0;
  }
  size_t v28 = *(void *)a3 + 64;
  *(void *)(v19 + 48) = v28;
  CFAllocatorRef v29 = (unint64_t *)(v19 + 48);
  int32_t v30 = malloc_type_calloc(v28, 1uLL, 0x100004077774924uLL);
  *(void *)(v19 + 40) = v30;
  if (v30)
  {
    if (v121 == 100) {
      int v31 = 1752589105;
    }
    else {
      int v31 = 1635148593;
    }
    if (gksVCPParseParameterSetsAndCreateConfigurationRecord() || (unint64_t v44 = *v29) == 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoDecoder_NewFormat_InitDecoder_cold_2();
        }
      }
      pthread_mutex_unlock(v122);
      goto LABEL_156;
    }
    int v126 = (void (*)(uint64_t, unsigned __int8 *, int, uint64_t, void *, CMTime *))0xAAAAAAAAAAAAAAAALL;
    unint64_t v127 = 0xAAAAAAAAAAAAAAAALL;
    CMVideoFormatDescriptionRef formatDescriptionOut = 0;
    *(_DWORD *)(v19 + 68) = v31;
    if (v121 == 100)
    {
      memset(buf, 0, sizeof(buf));
      memset(parameterSetSizes, 0, 24);
      unint64_t v45 = *(void *)a3;
      uint64_t v27 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      if (*(void *)a3)
      {
        unint64_t v46 = 0;
        unint64_t v47 = 0;
        do
        {
          size_t v48 = bswap32(*(_DWORD *)&a2[v47]);
          buf[v46] = &a2[v47 + 4];
          parameterSetSizes[v46] = v48;
          v47 += (v48 + 4);
        }
        while (v47 < v45 && v46++ < 2);
      }
      CMVideoFormatDescriptionCreateFromHEVCParameterSets(*v27, 3uLL, (const uint8_t *const *)buf, parameterSetSizes, 4, 0, &formatDescriptionOut);
      if (ReadCodecConfigParams(100, *(void *)(v19 + 40), *(void *)(v19 + 48), (_DWORD *)(v19 + 60), (_DWORD *)(v19 + 64), 0, 0, 0) << 16)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoDecoder_NewFormat_InitDecoder_cold_4();
          }
        }
        return v17;
      }
      unint64_t v34 = a1;
      size_t v51 = formatDescriptionOut;
      goto LABEL_111;
    }
    LODWORD(parameterSetSizes[0]) = 1;
    int v129 = 1;
    int v130 = 1;
    int v50 = ReadCodecConfigParams(v121, *(void *)(v19 + 40), v44, (_DWORD *)(v19 + 60), (_DWORD *)(v19 + 64), (int *)parameterSetSizes, &v130, &v129);
    uint64_t v27 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v50 << 16)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        unint64_t v34 = a1;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoDecoder_NewFormat_InitDecoder_cold_6();
        }
LABEL_109:
        size_t v51 = 0;
        goto LABEL_110;
      }
      size_t v51 = 0;
LABEL_107:
      unint64_t v34 = a1;
LABEL_110:
      CMVideoFormatDescriptionRef formatDescriptionOut = v51;
LABEL_111:
      if (v51)
      {
        FigFormatDescriptionRelease();
        *(void *)(v19 + 32) = formatDescriptionOut;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v72 = VRTraceErrorLogLevelToCSTR();
          uint64_t v73 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v74 = FourccToCStr(*(_DWORD *)(v19 + 68));
            int v75 = *(_DWORD *)(v19 + 60);
            int v76 = *(_DWORD *)(v19 + 64);
            LODWORD(buf[0]) = 136316418;
            *(void *)((char *)buf + 4) = v72;
            WORD2(buf[1]) = 2080;
            *(void *)((char *)&buf[1] + 6) = "VideoDecoder_NewFormat_InitDecoder";
            HIWORD(buf[2]) = 1024;
            int v132 = 592;
            __int16 v133 = 2080;
            uint64_t v134 = (uint64_t)v74;
            __int16 v135 = 1024;
            *(_DWORD *)uint64_t v136 = v75;
            *(_WORD *)&v136[4] = 1024;
            *(_DWORD *)&v136[6] = v76;
            _os_log_impl(&dword_1E1EA4000, v73, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Recreated format description: %s, %d, %d", (uint8_t *)buf, 0x32u);
          }
        }
        *a5 = *(_DWORD *)(v19 + 60);
        *a6 = *(_DWORD *)(v19 + 64);
      }
      goto LABEL_116;
    }
    Boolean keyExistsAndHasValidFormat = 0;
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"forceHDR10ColorInfo", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
    unint64_t v34 = a1;
    if (keyExistsAndHasValidFormat)
    {
      if (AppBooleanValue)
      {
        LODWORD(parameterSetSizes[0]) = 9;
        int v129 = 9;
        int v130 = 16;
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_81;
        }
        uint64_t v53 = VRTraceErrorLogLevelToCSTR();
        unsigned int v54 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_81;
        }
        LODWORD(buf[0]) = 136315650;
        *(void *)((char *)buf + 4) = v53;
        WORD2(buf[1]) = 2080;
        *(void *)((char *)&buf[1] + 6) = "recreateFormatDescription";
        HIWORD(buf[2]) = 1024;
        int v132 = 301;
        size_t v55 = " [%s] %s:%d ITU_R_2020 HDR color settings applied on the decoder";
      }
      else
      {
        LODWORD(parameterSetSizes[0]) = 12;
        int v129 = 1;
        int v130 = 16;
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_81;
        }
        uint64_t v56 = VRTraceErrorLogLevelToCSTR();
        unsigned int v54 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_81;
        }
        LODWORD(buf[0]) = 136315650;
        *(void *)((char *)buf + 4) = v56;
        WORD2(buf[1]) = 2080;
        *(void *)((char *)&buf[1] + 6) = "recreateFormatDescription";
        HIWORD(buf[2]) = 1024;
        int v132 = 306;
        size_t v55 = " [%s] %s:%d P3_D65 HDR color settings applied on the decoder";
      }
      _os_log_impl(&dword_1E1EA4000, v54, OS_LOG_TYPE_DEFAULT, v55, (uint8_t *)buf, 0x1Cu);
    }
LABEL_81:
    CMBlockBufferRef v57 = 0;
    switch(LODWORD(parameterSetSizes[0]))
    {
      case 1:
        unsigned int v58 = (const void **)MEMORY[0x1E4F24AB0];
        goto LABEL_87;
      case 5:
        unsigned int v58 = (const void **)MEMORY[0x1E4F24AA0];
        goto LABEL_87;
      case 6:
        unsigned int v58 = (const void **)MEMORY[0x1E4F24AC8];
        goto LABEL_87;
      case 9:
        unsigned int v58 = (const void **)MEMORY[0x1E4F1ECE8];
        goto LABEL_87;
      case 0xC:
        unsigned int v58 = (const void **)MEMORY[0x1E4F1ED00];
LABEL_87:
        CMBlockBufferRef v57 = *v58;
        break;
      default:
        break;
    }
    BOOL v59 = 0;
    switch(v130)
    {
      case 1:
      case 2:
      case 6:
        uint64_t v60 = (void **)MEMORY[0x1E4F24BE0];
        goto LABEL_93;
      case 3:
      case 4:
      case 5:
        goto LABEL_94;
      case 7:
        uint64_t v60 = (void **)MEMORY[0x1E4F24BF0];
        goto LABEL_93;
      default:
        if (v130 != 16) {
          goto LABEL_94;
        }
        uint64_t v60 = (void **)MEMORY[0x1E4F1EF18];
LABEL_93:
        BOOL v59 = *v60;
LABEL_94:
        unint64_t v61 = 0;
        switch(v129)
        {
          case 1:
            OSStatus v62 = (const void **)MEMORY[0x1E4F24C48];
            goto LABEL_99;
          case 6:
            OSStatus v62 = (const void **)MEMORY[0x1E4F24C40];
            goto LABEL_99;
          case 7:
            OSStatus v62 = (const void **)MEMORY[0x1E4F24C60];
            goto LABEL_99;
          case 9:
            OSStatus v62 = (const void **)MEMORY[0x1E4F1EF40];
LABEL_99:
            unint64_t v61 = *v62;
            break;
          default:
            break;
        }
        buf[0] = 0xAAAAAAAAAAAAAAAALL;
        CFAllocatorRef v63 = *v27;
        CFDataRef v64 = CFDataCreate(*v27, *(const UInt8 **)(v19 + 40), *(void *)(v19 + 48));
        if (!v64) {
          goto LABEL_109;
        }
        CFDataRef v65 = v64;
        value = v59;
        CFTypeID TypeID = CFDataGetTypeID();
        if (TypeID != CFGetTypeID(v65))
        {
          CFRelease(v65);
          goto LABEL_109;
        }
        uint64_t v67 = CFDictionaryCreateMutable(v63, 1, 0, 0);
        CFDictionarySetValue(v67, @"avcC", v65);
        unsigned int v68 = CFDictionaryCreateMutable(v63, 0, 0, 0);
        CFDictionarySetValue(v68, (const void *)*MEMORY[0x1E4F24A90], v57);
        CFDictionarySetValue(v68, (const void *)*MEMORY[0x1E4F24BC8], value);
        CFAllocatorRef v69 = v61;
        uint64_t v70 = v67;
        CFDictionarySetValue(v68, (const void *)*MEMORY[0x1E4F24C18], v69);
        CFDictionarySetValue(v68, (const void *)*MEMORY[0x1E4F1EE20], v67);
        if ((unsigned __int16)CMVideoFormatDescriptionCreate(v63, *(_DWORD *)(v19 + 68), *(_DWORD *)(v19 + 60), *(_DWORD *)(v19 + 64), v68, (CMVideoFormatDescriptionRef *)buf))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v71 = VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VideoDecoder_NewFormat_InitDecoder_cold_5(v71);
            }
          }
        }
        CFRelease(v65);
        CFRelease(v70);
        CFRelease(v68);
        size_t v51 = (const opaqueCMFormatDescription *)buf[0];
        break;
    }
    goto LABEL_107;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoDecoder_NewFormat_InitDecoder_cold_1();
    }
  }
  pthread_mutex_unlock(v122);
  CheckOutHandleDebug();
  return 2147745795;
}

void VideoDecoder_VTDecompressionCallback(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, void *a5, CMTime *a6)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = CheckInHandleDebug();
  if (v10)
  {
    uint64_t v11 = v10;
    if (a5)
    {
      CFRetain(a5);
      CFTypeID TypeID = CVPixelBufferGetTypeID();
      if (TypeID == CFGetTypeID(a5) && a2[42])
      {
        uint64_t v13 = CVPixelBufferRetain((CVPixelBufferRef)a5);
        int v14 = 1;
      }
      else
      {
        int v14 = 0;
        uint64_t v13 = 0;
      }
      CFRelease(a5);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        int v16 = *MEMORY[0x1E4F47A50];
        uint64_t v17 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = *(_DWORD *)a2;
            int v19 = a2[42];
            int v20 = *((unsigned __int16 *)a2 + 12);
            uint64_t v21 = (unsigned __int16)*((void *)a2 + 2);
            uint64_t v22 = HIDWORD(*((void *)a2 + 2));
            LODWORD(buf.value) = 136316930;
            *(CMTimeValue *)((char *)&buf.value + 4) = v15;
            LOWORD(buf.flags) = 2080;
            *(void *)((char *)&buf.flags + 2) = "VideoDecoder_VTDecompressionCallback";
            HIWORD(buf.epoch) = 1024;
            int v43 = 141;
            __int16 v44 = 1024;
            int v45 = v18;
            __int16 v46 = 1024;
            int v47 = v19;
            __int16 v48 = 1024;
            int v49 = v20;
            __int16 v50 = 2048;
            uint64_t v51 = v21;
            __int16 v52 = 2048;
            uint64_t v53 = v22;
            _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Decoder returned frame with RTPTimestamp=%u, showFrame %d, streamID %d, decoding order %llu, tileID %llu", (uint8_t *)&buf, 0x42u);
          }
        }
        else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          VideoDecoder_VTDecompressionCallback_cold_4();
        }
      }
      *(_DWORD *)(v11 + 200) = 0;
      if (v14)
      {
        if (CVBufferGetAttachment((CVBufferRef)a5, @"HIDTimeStamp", 0)) {
          FigCFNumberGetUInt64();
        }
        int v14 = 1;
      }
      goto LABEL_31;
    }
    int v23 = *(unsigned __int16 *)(v10 + 56);
    if (v23 == 1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoDecoder_VTDecompressionCallback_cold_2();
        }
      }
    }
    else
    {
      int v24 = *(_DWORD *)(v10 + 200) + 1;
      *(_DWORD *)(v10 + 200) = v24;
      if (v24 >= v23)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoDecoder_VTDecompressionCallback_cold_3();
          }
        }
        uint64_t v13 = 0;
        int v14 = 0;
        *(_DWORD *)(v11 + 200) = 0;
LABEL_31:
        CMTime buf = *a6;
        CMTimeGetSeconds(&buf);
        kdebug_trace();
        if (a3)
        {
          memset(&buf, 170, 12);
          __sprintf_chk((char *)&buf, 0, 0xCuLL, "%d", a3);
          reportingLog();
          if (a3 == -17694) {
            a2[44] = 1;
          }
          a2[43] = a2[49] ^ 1;
          a2[42] = 0;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v25 = VRTraceErrorLogLevelToCSTR();
            BOOL v26 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              int v27 = *((unsigned __int16 *)a2 + 12);
              int v28 = a2[43];
              int v29 = a2[49];
              LODWORD(buf.value) = 136316674;
              *(CMTimeValue *)((char *)&buf.value + 4) = v25;
              LOWORD(buf.flags) = 2080;
              *(void *)((char *)&buf.flags + 2) = "VideoDecoder_VTDecompressionCallback";
              HIWORD(buf.epoch) = 1024;
              int v43 = 173;
              __int16 v44 = 1024;
              int v45 = a3;
              __int16 v46 = 1024;
              int v47 = v27;
              __int16 v48 = 1024;
              int v49 = v28;
              __int16 v50 = 1024;
              LODWORD(v51) = v29;
              _os_log_error_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failure status=%d for streamId=%d, requestIntra=%d, isNonBaseLayerOfTemporalStream=%d", (uint8_t *)&buf, 0x34u);
            }
          }
        }
        else if (v14)
        {
          CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          int v31 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
          size_t v32 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          int v34 = *(_DWORD *)(v11 + 60);
          int v41 = *(_DWORD *)(v11 + 64);
          int v35 = CFDictionaryCreateMutable(v30, 0, v31, v32);
          CFAllocatorRef v36 = v35;
          if (v35)
          {
            setIntValue(v35, @"VCPixelBufferLeftX", 0);
            setIntValue(v36, @"VCPixelBufferTopY", 0);
            setIntValue(v36, @"VCPixelBufferWidth", v34);
            setIntValue(v36, @"VCPixelBufferHeight", v41);
          }
          CFStringRef v37 = CFStringCreateWithFormat(v30, 0, @"%d", *((void *)a2 + 4));
          CFDictionarySetValue(Mutable, v37, v36);
          if (a2[42])
          {
            CVBufferSetAttachment(v13, @"VCPixelBufferAttributes", Mutable, kCVAttachmentMode_ShouldPropagate);
            if (a2[45])
            {
              CFNumberRef v38 = CFNumberCreate(v30, kCFNumberSInt8Type, a2 + 46);
              CVBufferSetAttachment(v13, @"FramePriority", v38, kCVAttachmentMode_ShouldPropagate);
              CFRelease(v38);
            }
          }
          CFRelease(v37);
          CFRelease(v36);
          CFRelease(Mutable);
          goto LABEL_45;
        }
        a2[42] = 0;
LABEL_45:
        int v40 = *(void (**)(uint64_t, __CVBuffer *, unsigned __int8 *, CMTime *))(v11 + 184);
        uint64_t v39 = *(void *)(v11 + 192);
        CMTime buf = *a6;
        v40(v39, v13, a2, &buf);
        VCMemoryPool_Free(*(OSQueueHead **)(v11 + 176), a2);
        CVPixelBufferRelease(v13);
        CheckOutHandleDebug();
        return;
      }
    }
    uint64_t v13 = 0;
    int v14 = 0;
    goto LABEL_31;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoDecoder_VTDecompressionCallback_cold_1();
    }
  }
}

uint64_t VideoDecoder_NewFormat_SPSPPS(unint64_t a1, char *a2, int *a3, const char *a4, int32_t *a5, int32_t *a6, int a7, int a8, __int16 a9, int a10)
{
  return VideoDecoder_NewFormat_InitDecoder(a1, a2, a3, a4, a5, a6, 1, a7, a8, SHIWORD(a8), a9, a10);
}

uint64_t VideoDecoder_NewFormat_ImgDesc(unint64_t a1, char *a2, uint64_t a3, const char *a4, int32_t *a5, int32_t *a6, int a7, __int16 a8, int a9)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  v11[0] = a3;
  return VideoDecoder_NewFormat_InitDecoder(a1, a2, (int *)v11, a4, a5, a6, 0, 128, a7, SHIWORD(a7), a8, a9);
}

uint64_t VideoDecoder_IsFormatCompatible_SPSPPS(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, _DWORD *a6, _DWORD *a7)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 2147745824;
  uint64_t v12 = CheckInHandleDebug();
  if (!v12) {
    return 2147745794;
  }
  uint64_t v13 = v12;
  if (*(_DWORD *)(v12 + 72) == a5 && *(void *)(v12 + 40) && *(void *)(v12 + 48))
  {
    v20[0] = *a4 + 64;
    MEMORY[0x1F4188790](v12);
    unint64_t v16 = (v15 + 79) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v17 = (char *)v20 - v16;
    if (v14) {
      memset((char *)v20 - v16, 170, v14);
    }
    if (!(unsigned __int16)gksVCPParseParameterSetsAndCreateConfigurationRecord())
    {
      size_t v18 = *(void *)(v13 + 48);
      if (v18 == v20[0] && !memcmp(*(const void **)(v13 + 40), v17, v18))
      {
        uint64_t v11 = 0;
        *a6 = *(_DWORD *)(v13 + 60);
        *a7 = *(_DWORD *)(v13 + 64);
      }
    }
  }
  CheckOutHandleDebug();
  return v11;
}

uint64_t VideoDecoder_IsFormatCompatible_ImgDesc(uint64_t a1, const void *a2, int a3, int a4)
{
  uint64_t v7 = 2147745824;
  uint64_t v8 = CheckInHandleDebug();
  if (!v8) {
    return 2147745794;
  }
  uint64_t v9 = v8;
  if (*(_DWORD *)(v8 + 72) == a4)
  {
    uint64_t v10 = *(const void **)(v8 + 40);
    if (v10)
    {
      if (a2)
      {
        size_t v11 = *(void *)(v9 + 48);
        if (v11) {
          BOOL v12 = v11 == a3;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12)
        {
          if (!memcmp(v10, a2, v11)) {
            uint64_t v7 = 0;
          }
          else {
            uint64_t v7 = 2147745824;
          }
        }
      }
    }
  }
  CheckOutHandleDebug();
  return v7;
}

uint64_t VideoDecoder_DecodeFrame(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4, BOOL *a5, const void *a6, long long *a7)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 2147745794;
  uint64_t v13 = CheckInHandleDebug();
  if (v13)
  {
    if (!*(_DWORD *)(v13 + 12))
    {
      uint64_t v12 = 2147745809;
LABEL_33:
      CheckOutHandleDebug();
      return v12;
    }
    size_t v14 = VCMemoryPool_Alloc(*(OSQueueHead **)(v13 + 176));
    long long v16 = a7[1];
    long long v15 = a7[2];
    long long v17 = *a7;
    v14[6] = *((void *)a7 + 6);
    *((_OWORD *)v14 + 1) = v16;
    *((_OWORD *)v14 + 2) = v15;
    *(_OWORD *)size_t v14 = v17;
    int valuePtr = 0;
    CFNumberRef v18 = (const __CFNumber *)CMGetAttachment(a6, @"rtpTimestsamp", 0);
    if (v18)
    {
      CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
      *(_DWORD *)size_t v14 = valuePtr;
    }
    uint64_t v40 = 0;
    CFNumberRef v19 = (const __CFNumber *)CMGetAttachment(a6, @"subFrameIndentifier", 0);
    if (v19)
    {
      CFNumberGetValue(v19, kCFNumberSInt64Type, &v40);
      v14[2] = v40;
    }
    char v39 = 0;
    CFNumberRef v20 = (const __CFNumber *)CMGetAttachment(a6, @"FramePriority", 0);
    if (v20)
    {
      CFNumberGetValue(v20, kCFNumberSInt8Type, &v39);
      *((unsigned char *)v14 + 45) = 1;
      *((unsigned char *)v14 + 46) = v39;
    }
    kdebug_trace();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v21 = VRTraceErrorLogLevelToCSTR();
      uint64_t v22 = *MEMORY[0x1E4F47A50];
      int v23 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          int v24 = *(_DWORD *)v14;
          int v25 = *((unsigned __int8 *)v14 + 42);
          int v26 = *((unsigned __int16 *)v14 + 12);
          uint64_t v27 = HIDWORD(v14[2]);
          uint64_t v28 = (unsigned __int16)v14[2];
          int v29 = *((unsigned __int8 *)v14 + 48);
          *(_DWORD *)CMTime buf = 136317186;
          uint64_t v43 = v21;
          __int16 v44 = 2080;
          int v45 = "VideoDecoder_DecodeFrame";
          __int16 v46 = 1024;
          int v47 = 886;
          __int16 v48 = 1024;
          int v49 = v24;
          __int16 v50 = 1024;
          int v51 = v25;
          __int16 v52 = 1024;
          int v53 = v26;
          __int16 v54 = 2048;
          uint64_t v55 = v27;
          __int16 v56 = 2048;
          uint64_t v57 = v28;
          __int16 v58 = 1024;
          int v59 = v29;
          _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Decode frame with RTPTimestamp=%u, showFrame %d, streamID %d, tileID %llu, decoding order %llu, canStopVideoStall=%d", buf, 0x48u);
        }
      }
      else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        VideoDecoder_DecodeFrame_cold_1();
      }
    }
    int v30 = VCPDecompressionSessionDecodeFrame();
    __int16 v31 = v30;
    int v32 = v30 << 16;
    int v33 = (__int16)v30;
    if (v30 << 16 <= -587792385)
    {
      if (v32 != -1159593984 && v32 != -846004224) {
        goto LABEL_27;
      }
    }
    else if (v32 != -587792384)
    {
      if (!v32)
      {
LABEL_30:
        if (v31) {
          uint64_t v12 = -v33 | 0xA0040000;
        }
        else {
          uint64_t v12 = 0;
        }
        goto LABEL_33;
      }
      if (v32 != -6553600)
      {
LABEL_27:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v35 = VRTraceErrorLogLevelToCSTR();
          CFAllocatorRef v36 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v38 = *((unsigned __int16 *)v14 + 12);
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v43 = v35;
            __int16 v44 = 2080;
            int v45 = "VideoDecoder_DecodeFrame";
            __int16 v46 = 1024;
            int v47 = 902;
            __int16 v48 = 1024;
            int v49 = 902;
            __int16 v50 = 1024;
            int v51 = v33;
            __int16 v52 = 1024;
            int v53 = v38;
            _os_log_error_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: VCPDecompressionSessionDecodeFrame: error: %d for stream %d", buf, 0x2Eu);
          }
        }
        goto LABEL_30;
      }
    }
    *a3 = 1;
    *a4 = 1;
    *a5 = v32 == -1159593984;
    goto LABEL_27;
  }
  return v12;
}

uint64_t VideoDecoder_GetFormatDescription(uint64_t a1, void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147745794;
  }
  *a2 = *(void *)(v3 + 32);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoDecoder_GetBufferPool()
{
  if (!CheckInHandleDebug()) {
    return 2147745794;
  }
  VCPDecompressionSessionCopyProperty();
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoDecoder_SetShouldEnableFaceZoom()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2147745794;
  }
  uint64_t v1 = v0;
  char v2 = (pthread_mutex_t *)(v0 + 112);
  pthread_mutex_lock((pthread_mutex_t *)(v0 + 112));
  if (*(void *)(v1 + 24)) {
    VCPDecompressionSessionSetProperty();
  }
  pthread_mutex_unlock(v2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoDecoder_SetShouldEnableMLEnhance(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147745794;
  }
  uint64_t v4 = v3;
  int v5 = (pthread_mutex_t *)(v3 + 112);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 112));
  if (*(void *)(v4 + 24))
  {
    VCPDecompressionSessionSetProperty();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      uint64_t v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315906;
        uint64_t v10 = v6;
        __int16 v11 = 2080;
        uint64_t v12 = "VideoDecoder_SetShouldEnableMLEnhance";
        __int16 v13 = 1024;
        int v14 = 981;
        __int16 v15 = 1024;
        int v16 = a2;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d kVCPDecompressionPropertyKey_MLEnhance=%d", (uint8_t *)&v9, 0x22u);
      }
    }
  }
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoDecoder_IsLastSubframe(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = CheckInHandleDebug();
  if (v7)
  {
    if (a4)
    {
      *a4 = 0;
      if (a2)
      {
        if (*(void *)(v7 + 24))
        {
          int v8 = VCPDecompressionSessionCheckIfLastSubFrame();
          if (v8 << 16)
          {
            __int16 v9 = v8;
            uint64_t v10 = 2147745796;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v11 = VRTraceErrorLogLevelToCSTR();
              uint64_t v12 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                int v14 = 136316162;
                uint64_t v15 = v11;
                __int16 v16 = 2080;
                uint64_t v17 = "VideoDecoder_IsLastSubframe";
                __int16 v18 = 1024;
                int v19 = 1006;
                __int16 v20 = 1024;
                int v21 = v9;
                __int16 v22 = 1024;
                int v23 = a3;
                _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Error: %d calling VCPDecompressionSessionCheckIfLastSubFrame for tileIndex %u", (uint8_t *)&v14, 0x28u);
                uint64_t v10 = 2147745796;
              }
            }
          }
          else
          {
            uint64_t v10 = 0;
          }
        }
        else
        {
          uint64_t v10 = 2147745809;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              VideoDecoder_IsLastSubframe_cold_3();
              uint64_t v10 = 2147745809;
            }
          }
        }
        goto LABEL_11;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoDecoder_IsLastSubframe_cold_2();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoDecoder_IsLastSubframe_cold_1();
      }
    }
    uint64_t v10 = 2147745793;
LABEL_11:
    CheckOutHandleDebug();
    return v10;
  }
  return 2147745794;
}

void setIntValue(__CFDictionary *a1, const void *a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void OUTLINED_FUNCTION_10_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void _VCAnsweringMachine_PullAudioSamples(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int Timestamp = VCAudioBufferList_GetTimestamp(a2);
  uint64_t v5 = a1 + 200;
  uint64_t v6 = *(void *)(a1 + 200);
  if ((*(unsigned char *)(a1 + 216) & 8) == 0)
  {
    if (!v6)
    {
LABEL_5:
      Sampleint Count = VCAudioBufferList_GetSampleCount(a2);
      double HostTime = VCAudioBufferList_GetHostTime(a2);
      VCAudioBufferList_AppendSilence(a2, Timestamp, SampleCount, HostTime);
      goto LABEL_13;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 208);
    if (v7 < *(_DWORD *)(a1 + 212))
    {
      *(_DWORD *)(a1 + 208) = v7 + 1;
      goto LABEL_5;
    }
    *(unsigned char *)(a1 + 216) |= 8u;
    reportingGenericEvent();
    uint64_t v6 = *(void *)v5;
  }
  if (v6)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 208);
    if (v10 < *(_DWORD *)(a1 + 212)) {
      *(_DWORD *)(a1 + 208) = v10 + 1;
    }
  }
  BOOL v14 = 0;
  char v11 = *(unsigned char *)(a1 + 216);
  VCCannedAudioInjector_InjectSamples(v6, a2, 0, &v14);
  BOOL v12 = v14;
  *(unsigned char *)(a1 + 216) |= v14;
  if ((v11 & 1) == 0 && v12)
  {
    __int16 v13 = *(NSObject **)(a1 + 176);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___VCAnsweringMachine_DispatchFinishAnnouncementNotice_block_invoke;
    block[3] = &unk_1E6DB3E18;
    char v16 = 1;
    block[4] = a1;
    block[5] = 0;
    dispatch_async(v13, block);
  }
LABEL_13:
  *(_DWORD *)(v5 + 20) = Timestamp;
  *(float *)(v5 + 24) = VCAudioBufferList_GetAveragePower(a2);
}

void _VCAnsweringMachine_PushAudioSamples(uint64_t a1, unsigned int *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int Timestamp = VCAudioBufferList_GetTimestamp((uint64_t)a2);
  *(_DWORD *)(a1 + 244) = Timestamp;
  if ((*(unsigned char *)(a1 + 216) & 3) != 0)
  {
    VCAudioCaptionsCoordinator_PushAudioSamples(*(void *)(a1 + 232), *(void *)(a1 + 280), a2);
    if ((*(unsigned char *)(a1 + 240) & 0x10) == 0)
    {
      *(unsigned char *)(a1 + 240) |= 0x10u;
      reportingGenericEvent();
    }
  }
  if ((*(unsigned char *)(a1 + 240) & 0x20) == 0 && (*(unsigned char *)(a1 + 216) & 5) != 0 && *(void *)(a1 + 256))
  {
    VCMediaRecorder_ClearHistoryBuffer(*(void *)(a1 + 256));
    *(unsigned char *)(a1 + 240) |= 0x20u;
    int v5 = *(_DWORD *)(a1 + 244);
    uint64_t v6 = *(NSObject **)(a1 + 176);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___VCAnsweringMachine_StartMediaRecording_block_invoke;
    block[3] = &unk_1E6DB6128;
    block[4] = a1;
    int8x16_t v8 = vextq_s8(*(int8x16_t *)(a1 + 264), *(int8x16_t *)(a1 + 264), 8uLL);
    int v9 = v5;
    dispatch_async(v6, block);
  }
  VCMediaRecorder_AddLocalAudioSampleBuffer(*(void *)(a1 + 256), (uint64_t)a2, Timestamp);
  *(float *)(a1 + 248) = VCAudioBufferList_GetAveragePower((uint64_t)a2);
}

BOOL VCAudioDecoderList_GetDecoderSettings(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 0;
    int v9 = *(_DWORD **)a1;
    BOOL v10 = 1;
    while (*v9 != a2 || v9[1] != a3)
    {
      BOOL v10 = ++v8 < v7;
      v9 += 10;
      if (v7 == v8) {
        goto LABEL_6;
      }
    }
    *a4 = v9;
  }
  else
  {
LABEL_6:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      BOOL v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v14 = 136316418;
        uint64_t v15 = v11;
        __int16 v16 = 2080;
        uint64_t v17 = "VCAudioDecoderList_GetDecoderSettings";
        __int16 v18 = 1024;
        int v19 = 23;
        __int16 v20 = 2048;
        uint64_t v21 = a1;
        __int16 v22 = 1024;
        int v23 = a2;
        __int16 v24 = 1024;
        int v25 = a3;
        _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Audio decoder (%p) received a packet with unknown payload=%d networkPayload=%d", (uint8_t *)&v14, 0x32u);
      }
    }
    return 0;
  }
  return v10;
}

void VCAudioDecoderList_Cleanup(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  char v2 = *(void **)a1;
  if (v2)
  {
    unint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      uint64_t v6 = (os_log_t *)MEMORY[0x1E4F47A50];
      do
      {
        if (*(void *)(*(void *)a1 + v5))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v7 = VRTraceErrorLogLevelToCSTR();
            uint64_t v8 = *v6;
            if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v9 = *(void *)(*(void *)a1 + v5);
              *(_DWORD *)CMTime buf = 136316418;
              uint64_t v11 = v7;
              __int16 v12 = 2080;
              __int16 v13 = "VCAudioDecoderList_Cleanup";
              __int16 v14 = 1024;
              int v15 = 31;
              __int16 v16 = 2048;
              uint64_t v17 = a1;
              __int16 v18 = 2048;
              uint64_t v19 = v9;
              __int16 v20 = 1024;
              int v21 = v4;
              _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Found existing audio receiver (%p) decoder (%p) at index %u. Release decoder.", buf, 0x36u);
            }
          }
          SoundDec_Destroy(*(void *)(*(void *)a1 + v5));
          unint64_t v3 = *(unsigned int *)(a1 + 8);
        }
        ++v4;
        v5 += 40;
      }
      while (v4 < v3);
      char v2 = *(void **)a1;
    }
    free(v2);
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
}

uint64_t VCAudioDecoderList_SetMagicCookieForPayload(uint64_t a1, int a2, int a3, void *a4, UInt32 a5)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v8[0] = 0;
    uint64_t result = VCAudioDecoderList_GetDecoderSettings(a1, a2, a3, v8);
    if (result) {
      return SoundDec_SetMagicCookie(*(void *)(v8[0] + 8), a4, a5);
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDecoderList_SetMagicCookieForPayload_cold_1();
      }
    }
    return 56;
  }
  return result;
}

uint64_t VCAudioDecoderList_GetEVSHeaderFormat(uint64_t a1, int a2)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCAudioDecoderList_GetEVSHeaderFormat_cold_1();
    }
    return 0;
  }
  uint64_t result = *(unsigned __int8 *)(a1 + 32);
  if (*(_DWORD *)a1 == 98 && a2 == 107 && *(unsigned char *)(a1 + 17))
  {
    if (*(unsigned char *)(a1 + 16)) {
      return 3;
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t VCAudioDecoderList_Setup(uint64_t a1, uint64_t *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 1;
  }
  size_t v4 = *((unsigned int *)a2 + 2);
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_46;
  }
  uint64_t v5 = malloc_type_calloc(v4, 0x28uLL, 0x10200404FFF9C0CuLL);
  if (v5)
  {
    uint64_t v6 = v5;
    if (*((_DWORD *)a2 + 2))
    {
      uint64_t v54 = a1;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v55 = 0;
      __int16 v56 = 0;
      uint64_t v9 = -1;
      uint64_t v57 = v5;
      while (1)
      {
        int v58 = 393219;
        uint64_t v10 = *a2;
        uint64_t v11 = (uint64_t *)(*a2 + v8);
        __int16 v12 = &v6[v7];
        uint64_t v13 = *v11;
        *__int16 v12 = *v11;
        *((_DWORD *)v12 + 8) = *((_DWORD *)v11 + 5);
        *((unsigned char *)v12 + 28) = *((unsigned char *)v11 + 16);
        *((unsigned char *)v12 + 36) = *((unsigned char *)v11 + 25);
        *((_DWORD *)v12 + 5) = *((_DWORD *)v11 + 2);
        uint64_t v14 = v13;
        if ((int)v13 > 107) {
          break;
        }
        if (v13 != 13)
        {
          if (v13 == 98)
          {
            if (*(unsigned char *)(v10 + v8 + 17))
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v15 = VRTraceErrorLogLevelToCSTR();
                __int16 v16 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)CMTime buf = 136315650;
                  *(void *)&uint8_t buf[4] = v15;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "VCAudioDecoderList_Setup";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  *(_DWORD *)&buf[24] = 116;
                  _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Overriding AMR payload with EVS Decoder", buf, 0x1Cu);
                }
                uint64_t v14 = 107;
                uint64_t v55 = v12;
                uint64_t v6 = v57;
                goto LABEL_26;
              }
              uint64_t v14 = 107;
            }
            else
            {
              uint64_t v14 = 98;
            }
          }
          goto LABEL_25;
        }
LABEL_26:
        uint64_t v19 = &v6[v7];
        RTPPayloads_PayloadProperties(0, *((_DWORD *)a2 + 16), (uint64_t)(a2 + 2), *(_DWORD *)(*a2 + v8 + 28), v14, 0, (int *)&v6[v7 + 2], 0, &v58);
        int v20 = VCPayloadUtils_CodecSamplesPerFrameWithSampleRate(v14, LODWORD(v6[v7 + 2]));
        float v21 = VCPayloadUtils_BlockSizeForPayload(v14, *((unsigned int *)v19 + 4));
        memset(&v83[8], 170, 40);
        *(void *)CFAllocatorRef v83 = -1;
        memset(buf, 0, sizeof(buf));
        long long v22 = *((_OWORD *)a2 + 2);
        *(_OWORD *)CFAllocatorRef v83 = *((_OWORD *)a2 + 1);
        *(_OWORD *)&v83[16] = v22;
        *(void *)&v83[32] = a2[6];
        v83[40] = *((unsigned char *)a2 + 68);
        v83[41] = *((unsigned char *)a2 + 69);
        SoundDec_FormatASBD(v58, (uint64_t)buf, v20, *((_DWORD *)a2 + 11), *(_DWORD *)(*a2 + v8 + 12), v21);
        int v23 = v19 + 1;
        uint64_t v24 = SoundDec_Create(v19 + 1, (uint64_t)buf);
        if ((v24 & 0x80000000) != 0)
        {
          uint64_t v43 = v24;
          memset(__str, 0, sizeof(__str));
          long long v79 = 0u;
          long long v80 = 0u;
          *(_OWORD *)uint64_t v77 = 0u;
          long long v78 = 0u;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v48 = VRTraceErrorLogLevelToCSTR();
            int v49 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              int v51 = v83[40];
              __int16 v52 = FormatToCStr((uint64_t)buf, (char *)__str, 0x40uLL);
              int v53 = FormatToCStr((uint64_t)v83, v77, 0x40uLL);
              *(_DWORD *)int v59 = 136317186;
              uint64_t v60 = v48;
              __int16 v61 = 2080;
              OSStatus v62 = "VCAudioDecoderList_Setup";
              __int16 v63 = 1024;
              int v64 = 134;
              __int16 v65 = 1024;
              int v66 = v43;
              __int16 v67 = 2048;
              *(void *)unsigned int v68 = v54;
              *(_WORD *)&v68[8] = 1024;
              *(_DWORD *)CFAllocatorRef v69 = v51;
              *(_WORD *)&v69[4] = 2080;
              uint64_t v70 = v52;
              *(_WORD *)uint64_t v71 = 1024;
              *(_DWORD *)&v71[2] = v14;
              *(_WORD *)uint64_t v72 = 2080;
              *(void *)&v72[2] = v53;
              _os_log_error_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_ERROR, " [%s] %s:%d SoundDec_Create failed(%08X) for audio receiver (%p). outOfProcess=%{BOOL}d inputFormat=%s payload=%u outputFormat=%s", v59, 0x4Cu);
            }
          }
          if (v8)
          {
            do
            {
              uint64_t v50 = v9;
              SoundDec_Destroy(v57[5 * v9 + 1]);
              LODWORD(v9) = v9 - 1;
            }
            while (v50);
          }
          free(v57);
          return v43;
        }
        int v25 = v19 + 3;
        if ((SoundDec_ShouldRampDownMissingPackets(*v23, (int *)v19 + 6) & 0x80000000) != 0) {
          _DWORD *v25 = 1;
        }
        SoundDec_SetAMRPayloadFormat(*v23, *(unsigned __int8 *)(*a2 + v8 + 16));
        int EVSHeaderFormat = VCAudioDecoderList_GetEVSHeaderFormat(*a2 + v8, v14);
        SoundDec_SetEVSFormatHandling(*v23, EVSHeaderFormat);
        SoundDec_SetAACELDPacketLossConcealmentAlgorithm(*v23);
        if (*(unsigned char *)(*a2 + v8 + 25))
        {
          SoundDec_SetOpusInBandFecEnabled(*v23, 1);
          _DWORD *v25 = 0;
        }
        if (v14 == 111) {
          SoundDec_SetEVSAudioCodecBandwidth(*v23, 0);
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v27 = VRTraceErrorLogLevelToCSTR();
          uint64_t v28 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v29 = *((_DWORD *)a2 + 14);
            int v30 = *((_DWORD *)a2 + 16);
            __int16 v31 = (int *)(*a2 + v8);
            int v32 = *((unsigned __int8 *)v31 + 16);
            int v33 = *v31;
            int v34 = v31[1];
            int v36 = v31[2];
            int v35 = v31[3];
            LODWORD(v31) = *((unsigned __int8 *)v31 + 17);
            *(_DWORD *)int v59 = 136318210;
            uint64_t v60 = v27;
            __int16 v61 = 2080;
            OSStatus v62 = "VCAudioDecoderList_Setup";
            __int16 v63 = 1024;
            int v64 = 161;
            __int16 v65 = 1024;
            int v66 = v29;
            __int16 v67 = 1024;
            *(_DWORD *)unsigned int v68 = v30;
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)&v68[6] = v32;
            *(_WORD *)CFAllocatorRef v69 = 1024;
            *(_DWORD *)&v69[2] = v33;
            LOWORD(v70) = 1024;
            *(_DWORD *)((char *)&v70 + 2) = v14;
            HIWORD(v70) = 1024;
            *(_DWORD *)uint64_t v71 = v34;
            *(_WORD *)&v71[4] = 1024;
            *(_DWORD *)uint64_t v72 = v35;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = v36;
            __int16 v73 = 1024;
            int v74 = (int)v31;
            __int16 v75 = 1024;
            int v76 = EVSHeaderFormat;
            _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d InternalBlockSize=%d useRTC=%d amrOctetAligned=%d payload=%d selectedPayload=%d networkPayload=%d flags=%d blockSize=%d forceEVSWideBandforAMR=%d headerFormat=%d", v59, 0x58u);
          }
        }
        __int16 v12 = v56;
LABEL_37:
        unint64_t v37 = v9 + 2;
        ++v9;
        v8 += 36;
        v7 += 5;
        uint64_t v6 = v57;
        if (v37 >= *((unsigned int *)a2 + 2))
        {
          if (v12)
          {
            if (v55)
            {
              *((unsigned char *)v12 + 28) = *((unsigned char *)v55 + 28);
              v12[2] = v55[2];
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v38 = VRTraceErrorLogLevelToCSTR();
                char v39 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  int v40 = *((unsigned __int8 *)v12 + 28);
                  int v41 = *((_DWORD *)v12 + 4);
                  int v42 = *((_DWORD *)v12 + 5);
                  *(_DWORD *)CMTime buf = 136316418;
                  *(void *)&uint8_t buf[4] = v38;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "VCAudioDecoderList_Setup";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  *(_DWORD *)&buf[24] = 169;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v41;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v40;
                  *(_WORD *)CFAllocatorRef v83 = 1024;
                  *(_DWORD *)&v83[2] = v42;
                  _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Updated DTMF sampleRate=%d isOctedAligned=%d convertedSamples=%d", buf, 0x2Eu);
                }
              }
            }
          }
          a1 = v54;
          goto LABEL_46;
        }
      }
      if (v13 == 108)
      {
        if (*(unsigned char *)(v10 + v8 + 24)) {
          uint64_t v14 = 107;
        }
        else {
          uint64_t v14 = 108;
        }
      }
      else if (v13 == 117)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v17 = VRTraceErrorLogLevelToCSTR();
          __int16 v18 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            *(void *)&uint8_t buf[4] = v17;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "VCAudioDecoderList_Setup";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&buf[24] = 103;
            _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Skip creating decoder for DTMF", buf, 0x1Cu);
          }
        }
        __int16 v56 = v12;
        goto LABEL_37;
      }
LABEL_25:
      uint64_t v55 = &v6[v7];
      goto LABEL_26;
    }
LABEL_46:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v44 = VRTraceErrorLogLevelToCSTR();
      int v45 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v46 = *((_DWORD *)a2 + 2);
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v44;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCAudioDecoderList_Setup";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&buf[24] = 173;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a1;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)CFAllocatorRef v83 = v46;
        _os_log_impl(&dword_1E1EA4000, v45, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Update audio receiver (%p) decoders: count=%u", buf, 0x2Cu);
      }
    }
    VCAudioDecoderList_Cleanup(a1);
    uint64_t v43 = 0;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(void *)a1 = v6;
    return v43;
  }
  uint64_t v43 = 2150105091;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioDecoderList_Setup_cold_1();
    }
  }
  return v43;
}

BOOL VCAudioDecoderList_GetSpeechCodecBundleData(uint64_t a1, int a2, int a3, uint64_t a4)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a4 && *(void *)a4 && *(_DWORD *)(a4 + 8))
    {
      v6[0] = 0;
      BOOL result = VCAudioDecoderList_GetDecoderSettings(a1, a2, a3, v6);
      if (!result) {
        return result;
      }
      if ((SoundDec_GetSpeechCodecBundleData(*(void *)(v6[0] + 8), (uint64_t *)a4) & 0x80000000) == 0) {
        return 1;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        VCAudioDecoderList_GetSpeechCodecBundleData_cold_3();
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCAudioDecoderList_GetSpeechCodecBundleData_cold_2();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCAudioDecoderList_GetSpeechCodecBundleData_cold_1();
  }
  return 0;
}

uint64_t VCAudioDecoderList_IsDTXFrame(uint64_t a1, int a2, int a3, uint64_t a4, int a5, _DWORD *a6, unsigned char *a7)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!a6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDecoderList_IsDTXFrame_cold_1();
      }
    }
    goto LABEL_12;
  }
  if (!a7)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioDecoderList_IsDTXFrame_cold_2();
      }
    }
    goto LABEL_12;
  }
  if (a2 != 13)
  {
    if (VCPayloadUtils_supportsInternalDTXForPayload(a2))
    {
      *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v51 = v15;
      long long v52 = v15;
      long long v49 = v15;
      long long v50 = v15;
      unint64_t v53 = 0xAAAAAAAAAAAAAAAALL;
      long long v48 = v15;
      long long v47 = v15;
      long long v46 = v15;
      long long v45 = v15;
      long long v44 = v15;
      long long v43 = v15;
      long long v42 = v15;
      long long v41 = v15;
      long long v40 = v15;
      long long v39 = v15;
      long long v38 = v15;
      long long v37 = v15;
      long long v35 = v15;
      long long v36 = v15;
      long long v33 = v15;
      long long v34 = v15;
      uint64_t v32 = a4;
      LODWORD(v33) = a5;
      if (VCAudioDecoderList_GetSpeechCodecBundleData(a1, a2, a3, (uint64_t)&v32))
      {
        if (DWORD2(v34))
        {
          __int16 v16 = (char *)&v32 + 20 * (DWORD2(v34) - 1);
          int v17 = *((_DWORD *)v16 + 9);
          LOBYTE(v16) = v16[40];
          char v18 = v16 & 1;
          char v9 = v16 | (v17 == 0);
          *a6 = v17;
          *a7 = v18;
          return v9 & 1;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v19 = VRTraceErrorLogLevelToCSTR();
          int v20 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v22 = 136316162;
            uint64_t v23 = v19;
            __int16 v24 = 2080;
            int v25 = "VCAudioDecoderList_IsDTXFrame";
            __int16 v26 = 1024;
            int v27 = 229;
            __int16 v28 = 2048;
            uint64_t v29 = a4;
            __int16 v30 = 1024;
            int v31 = a5;
            _os_log_error_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_ERROR, " [%s] %s:%d No packets in the bundle data [%p, %u]", (uint8_t *)&v22, 0x2Cu);
          }
        }
      }
    }
LABEL_12:
    char v9 = 0;
    return v9 & 1;
  }
  char v9 = 1;
  return v9 & 1;
}

double _VCConnectionLegacy_SourceDestinationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 280);
  int v4 = *(_DWORD *)(v3 + 20);
  if (v4) {
    __int16 v5 = *(_WORD *)(v3 + 26);
  }
  else {
    __int16 v5 = 0;
  }
  VCSDInfoConstructWithIPPorts(v3 + 28, v3 + 148, v4 != 0, v5, (uint64_t)v10);
  long long v6 = v14;
  *(_OWORD *)(a2 + 64) = v13;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v15;
  *(void *)(a2 + 112) = v16;
  long long v7 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v7;
  double result = *(double *)&v11;
  long long v9 = v12;
  *(_OWORD *)(a2 + 32) = v11;
  *(_OWORD *)(a2 + 48) = v9;
  return result;
}

uint64_t _VCConnectionLegacy_IsLocalOnCellular(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 280) + 108) >> 2) & 1;
}

uint64_t _VCConnectionLegacy_IsRemoteOnCellular(uint64_t a1)
{
  int v2 = IsIPPORTValid();
  uint64_t v3 = 68;
  if (!v2) {
    uint64_t v3 = 148;
  }
  return (*(unsigned __int8 *)(*(void *)(a1 + 280) + v3) >> 2) & 1;
}

uint64_t _VCConnectionLegacy_IsIPv6(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 280) + 108) & 1;
}

BOOL _VCConnectionLegacy_IsRelay(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 280) + 20) != 0;
}

BOOL _VCConnectionLegacy_MatchesSourceDestinationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a2 == 5)
  {
    uint64_t v3 = nw_connection_copy_endpoint(*(nw_connection_t *)(a2 + 8));
    address = nw_endpoint_get_address(v3);
    uint64_t v11 = 0;
    int v12 = 0;
    int sa_family = address->sa_family;
    BOOL v6 = sa_family == 30;
    if (sa_family == 30)
    {
      int v7 = *(_DWORD *)&address->sa_data[6];
      uint64_t v11 = *(void *)&address->sa_data[10];
      int v12 = *(_DWORD *)&address[1].sa_data[2];
    }
    else
    {
      int v7 = 0;
      if (sa_family == 2) {
        int v7 = *(_DWORD *)&address->sa_data[2];
      }
    }
    uint16_t port = nw_endpoint_get_port(v3);
    nw_release(v3);
    *(_DWORD *)long long v13 = v6;
    *(void *)&v13[12] = 0;
    *(void *)&v13[4] = 0;
    *(_DWORD *)&v13[20] = v7;
    *(void *)&v13[24] = v11;
    LODWORD(v14) = v12;
    HIDWORD(v14) = port;
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v13[16] = v8;
    uint64_t v14 = *(void *)(a2 + 80);
  }
  return VCConnectionLegacy_IsRemoteIPPort(a1, (uint64_t)v13);
}

BOOL _VCConnectionLegacy_Equal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 280);
  int v3 = *(_DWORD *)(v2 + 20);
  uint64_t v4 = *(void *)(a2 + 280);
  int v5 = *(_DWORD *)(v4 + 20);
  if (v3) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (v3 | v5 || (*(_DWORD *)(v2 + 148) & 1) != (*(_DWORD *)(v4 + 148) & 1)) {
      return 0;
    }
    if (*(_DWORD *)(v2 + 148))
    {
      if (*(void *)(v2 + 168) != *(void *)(v4 + 168) || *(void *)(v2 + 176) != *(void *)(v4 + 176)) {
        return 0;
      }
    }
    else if (*(_DWORD *)(v2 + 168) != *(_DWORD *)(v4 + 168))
    {
      return 0;
    }
    if (*(unsigned __int16 *)(v2 + 184) != *(unsigned __int16 *)(v4 + 184)
      || (*(_DWORD *)(v2 + 108) & 1) != (*(_DWORD *)(v4 + 108) & 1))
    {
      return 0;
    }
    if (*(_DWORD *)(v2 + 108))
    {
      if (*(void *)(v2 + 128) != *(void *)(v4 + 128) || *(void *)(v2 + 136) != *(void *)(v4 + 136)) {
        return 0;
      }
    }
    else if (*(_DWORD *)(v2 + 128) != *(_DWORD *)(v4 + 128))
    {
      return 0;
    }
    int v7 = *(unsigned __int16 *)(v2 + 144);
    int v8 = *(unsigned __int16 *)(v4 + 144);
  }
  else
  {
    int v7 = *(unsigned __int16 *)(v2 + 26);
    int v8 = *(unsigned __int16 *)(v4 + 26);
  }
  return v7 == v8;
}

uint64_t _VCConnectionLegacy_LocalCellTech(uint64_t a1)
{
  uint64_t result = VCConnection_IsLocalOnCellular(a1);
  if (result) {
    return *(unsigned int *)(*(void *)(a1 + 280) + 280);
  }
  return result;
}

uint64_t _VCConnectionLegacy_SetLocalCellTech(uint64_t a1, int a2)
{
  uint64_t result = VCConnection_IsLocalOnCellular(a1);
  if (result) {
    *(_DWORD *)(*(void *)(a1 + 280) + 280) = a2;
  }
  return result;
}

uint64_t _VCConnectionLegacy_RemoteCellTech(uint64_t a1)
{
  uint64_t result = VCConnection_IsRemoteOnCellular(a1);
  if (result) {
    return *(unsigned int *)(*(void *)(a1 + 280) + 284);
  }
  return result;
}

uint64_t _VCConnectionLegacy_SetRemoteCellTech(uint64_t a1, int a2)
{
  uint64_t result = VCConnection_IsRemoteOnCellular(a1);
  if (result) {
    *(_DWORD *)(*(void *)(a1 + 280) + 284) = a2;
  }
  return result;
}

CFStringRef _VCConnectionLegacy_CopyDescription(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[15] = v2;
  v12[14] = v2;
  v12[13] = v2;
  v12[11] = v2;
  v12[12] = v2;
  v12[9] = v2;
  v12[10] = v2;
  v12[7] = v2;
  v12[8] = v2;
  v12[5] = v2;
  v12[6] = v2;
  v12[3] = v2;
  v12[4] = v2;
  v12[1] = v2;
  v12[2] = v2;
  v11[15] = v2;
  v12[0] = v2;
  v11[13] = v2;
  v11[14] = v2;
  v11[11] = v2;
  v11[12] = v2;
  v11[9] = v2;
  v11[10] = v2;
  v11[7] = v2;
  v11[8] = v2;
  v11[5] = v2;
  v11[6] = v2;
  v11[3] = v2;
  v11[4] = v2;
  v11[1] = v2;
  void v11[2] = v2;
  v10[15] = v2;
  v11[0] = v2;
  v10[13] = v2;
  v10[14] = v2;
  v10[11] = v2;
  v10[12] = v2;
  v10[9] = v2;
  v10[10] = v2;
  v10[7] = v2;
  v10[8] = v2;
  v10[5] = v2;
  v10[6] = v2;
  v10[3] = v2;
  v10[4] = v2;
  v10[1] = v2;
  _OWORD v10[2] = v2;
  v9[15] = v2;
  v10[0] = v2;
  v9[13] = v2;
  v9[14] = v2;
  v9[11] = v2;
  v9[12] = v2;
  v9[9] = v2;
  v9[10] = v2;
  v9[7] = v2;
  v9[8] = v2;
  v9[5] = v2;
  v9[6] = v2;
  v9[3] = v2;
  v9[4] = v2;
  v9[1] = v2;
  v9[2] = v2;
  uint64_t v3 = *(void *)(a1 + 280) + 28;
  v9[0] = v2;
  _VCConnectionLegacy_IPPortToString(v3, (char *)v12);
  _VCConnectionLegacy_IPPortToString(*(void *)(a1 + 280) + 108, (char *)v11);
  _VCConnectionLegacy_IPPortToString(*(void *)(a1 + 280) + 148, (char *)v10);
  _VCConnectionLegacy_IPPortToString(*(void *)(a1 + 280) + 68, (char *)v9);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (VCConnection_IsRelay(a1)) {
    int v5 = "RELAY";
  }
  else {
    int v5 = "NOT RELAY";
  }
  if (VCConnection_IsLocalOnWiFi(a1)) {
    BOOL v6 = "WiFi";
  }
  else {
    BOOL v6 = "Cell";
  }
  if (VCConnection_IsRemoteOnWiFi(a1)) {
    int v7 = "WiFi";
  }
  else {
    int v7 = "Cell";
  }
  return CFStringCreateWithFormat(v4, 0, @"[%s %s(%s)<>%s<===>%s<>%s(%s)]", v5, v12, v6, v11, v10, v9, v7);
}

BOOL _VCConnectionLegacy_IsLocalOnWiFiOrWired(uint64_t a1)
{
  return (*(unsigned char *)(*(void *)(a1 + 280) + 108) & 4) == 0;
}

BOOL _VCConnectionLegacy_IsRemoteOnWiFiOrWired(uint64_t a1)
{
  int v2 = IsIPPORTValid();
  uint64_t v3 = 68;
  if (!v2) {
    uint64_t v3 = 148;
  }
  return (*(unsigned char *)(*(void *)(a1 + 280) + v3) & 4) == 0;
}

BOOL _VCConnectionLegacy_IsLocalOnWiFi(uint64_t a1)
{
  return (*(unsigned char *)(*(void *)(a1 + 280) + 108) & 4) == 0;
}

BOOL _VCConnectionLegacy_IsRemoteOnWiFi(uint64_t a1)
{
  int v2 = IsIPPORTValid();
  uint64_t v3 = 68;
  if (!v2) {
    uint64_t v3 = 148;
  }
  return (*(unsigned char *)(*(void *)(a1 + 280) + v3) & 4) == 0;
}

BOOL _VCConnectionLegacy_IsLocalOnWired(uint64_t a1)
{
  return (*(unsigned char *)(*(void *)(a1 + 280) + 108) & 4) == 0;
}

BOOL _VCConnectionLegacy_IsRemoteOnWired(uint64_t a1)
{
  int v2 = IsIPPORTValid();
  uint64_t v3 = 68;
  if (!v2) {
    uint64_t v3 = 148;
  }
  return (*(unsigned char *)(*(void *)(a1 + 280) + v3) & 4) == 0;
}

uint64_t _VCConnectionLegacy_IsOnSameInterfacesWithConnection(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[35];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (!a2 || !v4)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        uint64_t v12 = 0;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          return v12;
        }
        int v19 = 136315650;
        uint64_t v20 = v9;
        __int16 v21 = 2080;
        int v22 = "_VCConnectionLegacy_IsOnSameInterfacesWithConnection";
        __int16 v23 = 1024;
        int v24 = 222;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: NO", (uint8_t *)&v19, 0x1Cu);
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        _VCConnectionLegacy_IsOnSameInterfacesWithConnection_cold_2();
      }
    }
    return 0;
  }
  if (ErrorLogLevelForModule >= 8)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    int v7 = *MEMORY[0x1E4F47A50];
    int v8 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 136316162;
        uint64_t v20 = v6;
        __int16 v21 = 2080;
        int v22 = "_VCConnectionLegacy_IsOnSameInterfacesWithConnection";
        __int16 v23 = 1024;
        int v24 = 226;
        __int16 v25 = 2080;
        uint64_t v26 = objc_msgSend((id)objc_msgSend(a1, "description"), "UTF8String");
        __int16 v27 = 2080;
        uint64_t v28 = objc_msgSend((id)objc_msgSend(a2, "description"), "UTF8String");
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: %s vs. %s", (uint8_t *)&v19, 0x30u);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v19 = 136316162;
      uint64_t v20 = v6;
      __int16 v21 = 2080;
      int v22 = "_VCConnectionLegacy_IsOnSameInterfacesWithConnection";
      __int16 v23 = 1024;
      int v24 = 226;
      __int16 v25 = 2080;
      uint64_t v26 = objc_msgSend((id)objc_msgSend(a1, "description"), "UTF8String");
      __int16 v27 = 2080;
      uint64_t v28 = objc_msgSend((id)objc_msgSend(a2, "description"), "UTF8String");
      _os_log_debug_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: %s vs. %s", (uint8_t *)&v19, 0x30u);
    }
  }
  IsLocalOnWiFuint64_t i = VCConnection_IsLocalOnWiFi((uint64_t)a1);
  if (IsLocalOnWiFi == VCConnection_IsLocalOnWiFi((uint64_t)a2))
  {
    IsRemoteOnWiFuint64_t i = VCConnection_IsRemoteOnWiFi((uint64_t)a1);
    uint64_t v12 = IsRemoteOnWiFi ^ VCConnection_IsRemoteOnWiFi((uint64_t)a2) ^ 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v15 = VRTraceErrorLogLevelToCSTR();
    uint64_t v16 = *MEMORY[0x1E4F47A50];
    uint64_t v17 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 136315906;
        uint64_t v20 = v15;
        __int16 v21 = 2080;
        int v22 = "_VCConnectionLegacy_IsOnSameInterfacesWithConnection";
        __int16 v23 = 1024;
        int v24 = 229;
        __int16 v25 = 1024;
        LODWORD(v26) = v12;
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: %{BOOL}d", (uint8_t *)&v19, 0x22u);
      }
    }
    else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      _VCConnectionLegacy_IsOnSameInterfacesWithConnection_cold_1(v15, v12, v16);
    }
  }
  return v12;
}

uint64_t _VCConnectionLegacy_IsEndToEndLink()
{
  return 1;
}

uint64_t _VCConnectionLegacy_ConnectionID(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 280) + 4);
}

uint64_t _VCConnectionLegacy_IsLocalExpensive()
{
  return 0;
}

uint64_t _VCConnectionLegacy_IsLocalConstrained()
{
  return 0;
}

uint64_t _VCConnectionLegacy_IsRemoteExpensive()
{
  return 0;
}

uint64_t _VCConnectionLegacy_IsRemoteConstrained()
{
  return 0;
}

uint64_t _VCConnectionLegacy_ReportingIPVersion(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 280) + 108)) {
    return 3;
  }
  else {
    return 1;
  }
}

uint64_t _VCConnectionLegacy_ReportingQRServerConfig()
{
  return 0;
}

uint64_t _VCConnectionLegacy_ReportingSliceStatus()
{
  return 0;
}

uint64_t _VCConnectionLegacy_IsHopByHopEncryptionSupported()
{
  return 0;
}

BOOL VCConnectionLegacy_IsRemoteIPPort(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return 0;
    }
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    int v7 = *MEMORY[0x1E4F47A50];
    BOOL v8 = 0;
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return v8;
    }
    int v22 = 136316162;
    uint64_t v23 = v6;
    __int16 v24 = 2080;
    __int16 v25 = "VCConnectionLegacy_IsRemoteIPPort";
    __int16 v26 = 1024;
    int v27 = 176;
    __int16 v28 = 2048;
    uint64_t v29 = (const char *)a1;
    __int16 v30 = 2048;
    uint64_t v31 = a2;
    uint64_t v9 = " [%s] %s:%d nil instance=%p or remoteIPPort=%p passed";
    uint64_t v10 = v7;
    uint32_t v11 = 48;
LABEL_11:
    _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v22, v11);
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 280);
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return 0;
    }
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    uint64_t v13 = *MEMORY[0x1E4F47A50];
    uint64_t v14 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        VCConnectionLegacy_IsRemoteIPPort_cold_1();
      }
      return 0;
    }
    BOOL v8 = 0;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      return v8;
    }
    int v22 = 136315650;
    uint64_t v23 = v12;
    __int16 v24 = 2080;
    __int16 v25 = "VCConnectionLegacy_IsRemoteIPPort";
    __int16 v26 = 1024;
    int v27 = 180;
    uint64_t v9 = " [%s] %s:%d VCConnection: isRemoteIPPort: NO";
    uint64_t v10 = v13;
    uint32_t v11 = 28;
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)a2 & 1;
  if ((*(_DWORD *)(v4 + 68) & 1) != v5) {
    goto LABEL_23;
  }
  if (*(_DWORD *)(v4 + 68))
  {
    if (*(void *)(v4 + 88) != *(void *)(a2 + 20) || *(void *)(v4 + 96) != *(void *)(a2 + 28)) {
      goto LABEL_23;
    }
  }
  else if (*(_DWORD *)(v4 + 88) != *(_DWORD *)(a2 + 20))
  {
    goto LABEL_23;
  }
  if (*(unsigned __int16 *)(v4 + 104) == *(unsigned __int16 *)(a2 + 36))
  {
    BOOL v8 = 1;
    goto LABEL_32;
  }
LABEL_23:
  if ((*(_DWORD *)(v4 + 188) & 1) == v5)
  {
    if (v5)
    {
      if (*(void *)(v4 + 208) == *(void *)(a2 + 20) && *(void *)(v4 + 216) == *(void *)(a2 + 28)) {
        goto LABEL_26;
      }
    }
    else if (*(_DWORD *)(v4 + 208) == *(_DWORD *)(a2 + 20))
    {
LABEL_26:
      BOOL v8 = *(unsigned __int16 *)(v4 + 224) == *(unsigned __int16 *)(a2 + 36);
      goto LABEL_32;
    }
  }
  BOOL v8 = 0;
LABEL_32:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v17 = VRTraceErrorLogLevelToCSTR();
    char v18 = *MEMORY[0x1E4F47A50];
    int v19 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = "NO";
        uint64_t v23 = v17;
        int v22 = 136315906;
        __int16 v25 = "VCConnectionLegacy_IsRemoteIPPort";
        __int16 v24 = 2080;
        if (v8) {
          uint64_t v20 = "YES";
        }
        __int16 v26 = 1024;
        int v27 = 186;
        __int16 v28 = 2080;
        uint64_t v29 = v20;
        _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCConnection: isRemoteIPPort: %s", (uint8_t *)&v22, 0x26u);
      }
    }
    else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      VCConnectionLegacy_IsRemoteIPPort_cold_2(v17);
    }
  }
  return v8;
}

uint64_t _VCConnectionLegacy_IPPortToString(uint64_t a1, char *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v15[14] = v4;
  *(_OWORD *)uint64_t v14 = v4;
  *(_OWORD *)uint64_t v15 = v4;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  FillSockAddrStorage();
  return snprintf(a2, 0x100uLL, "%s:%d", v14, *(unsigned __int16 *)(a1 + 36));
}

uint64_t _VideoReceiver_UpdateMediaControlInfo(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1 + 41552;
  uint64_t v3 = (uint64_t *)(a1 + 40664);
  uint64_t v4 = a1 + 40372;
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 40376);
    if (!v5 || (a1 = *(void *)(v5 + 80)) == 0) {
      a1 = *v3;
    }
  }
  unsigned int Version = VCMediaControlInfoGeneratorGetVersion(a1);
  if (*(unsigned char *)(v1 + 1187)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *(_DWORD *)v4 == 0;
  }
  if (Version <= 1) {
    BOOL v7 = 0;
  }
  *(_DWORD *)uint64_t v2 = v7;
  uint64_t v8 = *(void *)(v4 + 4);
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 80)) == 0) {
    uint64_t v9 = *v3;
  }
  uint64_t result = VCMediaControlInfoGeneratorGetFECFeedbackVersion(v9);
  *(unsigned char *)(v2 + 12) = result;
  return result;
}

void _VideoReceiver_DecoderCallback(uint64_t a1, __CVBuffer *a2, long long *a3, uint64_t a4)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  char v80 = 1;
  uint64_t v8 = CheckInHandleDebug();
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v8 + 40840;
    ++*(_WORD *)(v8 + 41052);
    CFTypeRef Attachment = CVBufferGetAttachment(a2, @"FrameMLEnahnced", 0);
    if (Attachment && CFEqual(Attachment, (CFTypeRef)*MEMORY[0x1E4F1CFD0])) {
      ++*(_WORD *)(v10 + 214);
    }
    uint64_t v12 = v9 + 40400;
    CFDictionaryRef v13 = (const __CFDictionary *)CMGetAttachment(a2, @"PropagatableAttachments", 0);
    if (v13)
    {
      Value = CFDictionaryGetValue(v13, @"wpar");
      if (Value)
      {
        uint64_t v15 = Value;
        uint64_t v77 = v9 + 40400;
        uint64_t v78 = v9;
        uint64_t v16 = a3;
        uint64_t v17 = a1;
        IOSurface = CVPixelBufferGetIOSurface(a2);
        IOSurfaceSetValue(IOSurface, @"wpar", v15);
        CFIndex Length = CFDataGetLength((CFDataRef)v15);
        int v20 = Length;
        MEMORY[0x1F4188790](Length);
        int v22 = (UInt8 *)&v77 - ((v21 + 15) & 0x1FFFFFFF0);
        if (v21) {
          memset((char *)&v77 - ((v21 + 15) & 0x1FFFFFFF0), 170, v21);
        }
        v87.location = 0;
        v87.length = v20;
        CFDataGetBytes((CFDataRef)v15, v87, v22);
        IOSurfaceSetDataProperty();
        a1 = v17;
        a3 = v16;
        uint64_t v9 = v78;
        uint64_t v12 = v77;
      }
    }
    double Width = (double)CVPixelBufferGetWidth(a2);
    double Height = (double)CVPixelBufferGetHeight(a2);
    if (*(double *)v10 != Width || *(double *)(v10 + 8) != Height)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v26 = VRTraceErrorLogLevelToCSTR();
        int v27 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          double v28 = *(double *)v10;
          uint64_t v29 = *(void *)(v10 + 8);
          *(_DWORD *)CMTime buf = 136316674;
          *(void *)&uint8_t buf[4] = v26;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_DecoderCallback";
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v84) = 660;
          WORD2(v84) = 2048;
          *(double *)((char *)&v84 + 6) = v28;
          HIWORD(v84) = 2048;
          *(void *)&v85[0] = v29;
          WORD4(v85[0]) = 2048;
          *(double *)((char *)v85 + 10) = Width;
          WORD1(v85[1]) = 2048;
          *(double *)((char *)&v85[1] + 4) = Height;
          _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d decoded frame size changed from %fx%f to %fx%f", buf, 0x44u);
        }
      }
      *(double *)uint64_t v10 = Width;
      *(double *)(v10 + 8) = Height;
    }
    *(_DWORD *)(v12 + 288) += VideoUtil_GetDecodedFrameSEINaluOverheadBytes(a2);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v30 = VRTraceErrorLogLevelToCSTR();
      uint64_t v31 = *MEMORY[0x1E4F47A50];
      uint64_t v32 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          int v33 = *(_DWORD *)a3;
          int v34 = *((unsigned __int8 *)a3 + 48);
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v30;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_DecoderCallback";
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v84) = 666;
          WORD2(v84) = 2048;
          *(void *)((char *)&v84 + 6) = v9;
          HIWORD(v84) = 1024;
          LODWORD(v85[0]) = v33;
          WORD2(v85[0]) = 1024;
          *(_DWORD *)((char *)v85 + 6) = v34;
          _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] RTPTimestamp=%u canStopVideoStall=%d", buf, 0x32u);
        }
      }
      else if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        int v46 = *(_DWORD *)a3;
        int v47 = *((unsigned __int8 *)a3 + 48);
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v30;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_DecoderCallback";
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v84) = 666;
        WORD2(v84) = 2048;
        *(void *)((char *)&v84 + 6) = v9;
        HIWORD(v84) = 1024;
        LODWORD(v85[0]) = v46;
        WORD2(v85[0]) = 1024;
        *(_DWORD *)((char *)v85 + 6) = v47;
        _os_log_debug_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] RTPTimestamp=%u canStopVideoStall=%d", buf, 0x32u);
      }
    }
    long long v79 = 0;
    CFAllocatorRef v35 = *(const __CFAllocator **)(v10 + 584);
    *(_OWORD *)CMTime buf = *(_OWORD *)a4;
    *(void *)&buf[16] = *(void *)(a4 + 16);
    if (!VCVideoReceiverDecodedFrame_Create(v35, &v79, 0, a2, a3, (long long *)buf))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v69 = VRTraceErrorLogLevelToCSTR();
        uint64_t v70 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v71 = *(_DWORD *)a3;
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v69;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_DecoderCallback";
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v84) = 670;
          WORD2(v84) = 2048;
          *(void *)((char *)&v84 + 6) = v9;
          HIWORD(v84) = 1024;
          LODWORD(v85[0]) = v71;
          _os_log_error_impl(&dword_1E1EA4000, v70, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to create VCVideoReceiverDecodedFrame for frame with timestamp=%u", buf, 0x2Cu);
        }
      }
      goto LABEL_85;
    }
    if (!v79 || !*((unsigned char *)a3 + 50) || *((unsigned char *)a3 + 43)) {
      goto LABEL_84;
    }
    long long v36 = (uint64_t *)v12;
    int v37 = *(unsigned __int8 *)(v10 + 368);
    if (*(unsigned char *)(v10 + 368)) {
      int v38 = 7;
    }
    else {
      int v38 = 8;
    }
    if (v38 <= (int)VRTraceGetErrorLogLevelForModule())
    {
      uint64_t v39 = VRTraceErrorLogLevelToCSTR();
      if (v37)
      {
        long long v40 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_43;
        }
LABEL_40:
        int v42 = *((_DWORD *)a3 + 13);
        int v43 = *((unsigned __int16 *)a3 + 12);
        int v44 = *((unsigned __int8 *)a3 + 47);
        uint64_t v45 = *((void *)a3 + 4);
        *(_DWORD *)CMTime buf = 136316674;
        *(void *)&uint8_t buf[4] = v39;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_DecoderCallback";
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v84) = 674;
        WORD2(v84) = 1024;
        *(_DWORD *)((char *)&v84 + 6) = v42;
        WORD5(v84) = 1024;
        HIDWORD(v84) = v43;
        LOWORD(v85[0]) = 1024;
        *(_DWORD *)((char *)v85 + 2) = v44;
        WORD3(v85[0]) = 2048;
        *((void *)&v85[0] + 1) = v45;
        _os_log_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Sending LTR ACK with timestamp=%d decodedargs->streamID=%u, decodedargs->isOneToOne=%u streamToken=%ld", buf, 0x38u);
        goto LABEL_43;
      }
      long long v40 = *MEMORY[0x1E4F47A50];
      long long v41 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_43;
        }
        goto LABEL_40;
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
        _VideoReceiver_DecoderCallback_cold_2();
      }
    }
LABEL_43:
    Stream = _VideoReceiver_GetStream((unsigned int *)v9, *((unsigned __int16 *)a3 + 12), *((unsigned __int8 *)a3 + 47));
    uint64_t v49 = *((unsigned int *)a3 + 13);
    double v50 = micro();
    unsigned int v82 = v49;
    if (v49)
    {
      double v51 = v50;
      long long v52 = a3;
      BOOL v81 = 0;
      int IsSafeViewMode = VideoTransmitter_IsSafeViewMode(*v36, &v81);
      int v54 = *(unsigned __int8 *)(v10 + 368);
      if (*(unsigned char *)(v10 + 368)) {
        int v55 = 7;
      }
      else {
        int v55 = 8;
      }
      if ((IsSafeViewMode & 0x80000000) == 0 && v81 || *((unsigned char *)Stream + 102))
      {
        unsigned int v56 = Stream[26];
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v56 == 2)
        {
          if (v55 <= ErrorLogLevelForModule)
          {
            uint64_t v58 = VRTraceErrorLogLevelToCSTR();
            if (v54)
            {
              int v59 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
LABEL_65:
                *(_DWORD *)CMTime buf = 136316162;
                *(void *)&uint8_t buf[4] = v58;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoReceiver_SendLTRACK";
                *(_WORD *)&unsigned char buf[22] = 1024;
                LODWORD(v84) = 2452;
                WORD2(v84) = 2048;
                *(void *)((char *)&v84 + 6) = v9;
                HIWORD(v84) = 1024;
                LODWORD(v85[0]) = v49;
                _os_log_impl(&dword_1E1EA4000, v59, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received RTCP request to send PSFB LTRP ACK for timestamp=%u", buf, 0x2Cu);
              }
            }
            else
            {
              int v59 = *MEMORY[0x1E4F47A50];
              int v64 = *MEMORY[0x1E4F47A50];
              if (!*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)CMTime buf = 136316162;
                  *(void *)&uint8_t buf[4] = v58;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "_VideoReceiver_SendLTRACK";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  LODWORD(v84) = 2452;
                  WORD2(v84) = 2048;
                  *(void *)((char *)&v84 + 6) = v9;
                  HIWORD(v84) = 1024;
                  LODWORD(v85[0]) = v49;
                  _os_log_debug_impl(&dword_1E1EA4000, v59, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received RTCP request to send PSFB LTRP ACK for timestamp=%u", buf, 0x2Cu);
                }
                goto LABEL_74;
              }
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_65;
              }
            }
          }
LABEL_74:
          _VideoReceiver_SendRTCPResiliencyInfo(v9, (uint64_t)Stream, v49, 1, 0, 0, v51);
LABEL_83:
          a3 = v52;
          goto LABEL_84;
        }
        if (v55 <= ErrorLogLevelForModule)
        {
          uint64_t v60 = VRTraceErrorLogLevelToCSTR();
          if (v54)
          {
            __int16 v61 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
LABEL_68:
              *(_DWORD *)CMTime buf = 136316162;
              *(void *)&uint8_t buf[4] = v60;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_SendLTRACK";
              *(_WORD *)&unsigned char buf[22] = 1024;
              LODWORD(v84) = 2455;
              WORD2(v84) = 2048;
              *(void *)((char *)&v84 + 6) = v9;
              HIWORD(v84) = 1024;
              LODWORD(v85[0]) = v49;
              _os_log_impl(&dword_1E1EA4000, v61, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Sending RTCP APP LTRP ACK for timestamp=%u", buf, 0x2Cu);
            }
          }
          else
          {
            __int16 v61 = *MEMORY[0x1E4F47A50];
            __int16 v65 = *MEMORY[0x1E4F47A50];
            if (!*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)CMTime buf = 136316162;
                *(void *)&uint8_t buf[4] = v60;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoReceiver_SendLTRACK";
                *(_WORD *)&unsigned char buf[22] = 1024;
                LODWORD(v84) = 2455;
                WORD2(v84) = 2048;
                *(void *)((char *)&v84 + 6) = v9;
                HIWORD(v84) = 1024;
                LODWORD(v85[0]) = v49;
                _os_log_debug_impl(&dword_1E1EA4000, v61, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Sending RTCP APP LTRP ACK for timestamp=%u", buf, 0x2Cu);
              }
              goto LABEL_77;
            }
            if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_68;
            }
          }
        }
LABEL_77:
        unsigned int v82 = bswap32(v49);
        memset(v85, 0, sizeof(v85));
        long long v84 = 0u;
        *(void *)CMTime buf = 0x500000002;
        *(void *)&buf[8] = &v82;
        *(void *)&buf[16] = 4;
        double v67 = micro();
        _VideoReceiver_SendRTCP(v9, (uint64_t)Stream, (long long *)buf, 0, v67);
        ++Stream[1067];
        goto LABEL_83;
      }
      if (v55 <= (int)VRTraceGetErrorLogLevelForModule())
      {
        uint64_t v62 = VRTraceErrorLogLevelToCSTR();
        if (v54)
        {
          __int16 v63 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
LABEL_71:
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v62;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_SendLTRACK";
            *(_WORD *)&unsigned char buf[22] = 1024;
            LODWORD(v84) = 2468;
            WORD2(v84) = 2048;
            *(void *)((char *)&v84 + 6) = v9;
            HIWORD(v84) = 1024;
            LODWORD(v85[0]) = v49;
            _os_log_impl(&dword_1E1EA4000, v63, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Sending VideoTransmitter LTRP ACK for %d", buf, 0x2Cu);
          }
        }
        else
        {
          __int16 v63 = *MEMORY[0x1E4F47A50];
          int v66 = *MEMORY[0x1E4F47A50];
          if (!*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)CMTime buf = 136316162;
              *(void *)&uint8_t buf[4] = v62;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_SendLTRACK";
              *(_WORD *)&unsigned char buf[22] = 1024;
              LODWORD(v84) = 2468;
              WORD2(v84) = 2048;
              *(void *)((char *)&v84 + 6) = v9;
              HIWORD(v84) = 1024;
              LODWORD(v85[0]) = v49;
              _os_log_debug_impl(&dword_1E1EA4000, v63, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Sending VideoTransmitter LTRP ACK for %d", buf, 0x2Cu);
            }
            goto LABEL_80;
          }
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_71;
          }
        }
      }
LABEL_80:
      unsigned int v68 = *(void (**)(void, uint64_t))(v9 + 1440);
      if (v68) {
        v68(*(void *)(v9 + 1432), v49);
      }
      VideoTransmitter_SendLTRACK(*v36, v49);
      goto LABEL_83;
    }
LABEL_84:
    if (!_VideoReceiver_EnqueueDecodedFrameForDisplay(a1, v9, (int *)a3, (uint64_t *)&v79, &v80)
      && (int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v72 = VRTraceErrorLogLevelToCSTR();
      __int16 v73 = *MEMORY[0x1E4F47A50];
      int v74 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          int v75 = *(_DWORD *)a3;
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v72;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_DecoderCallback";
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v84) = 680;
          WORD2(v84) = 2048;
          *(void *)((char *)&v84 + 6) = v9;
          HIWORD(v84) = 1024;
          LODWORD(v85[0]) = v75;
          _os_log_impl(&dword_1E1EA4000, v73, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to enqueue frame for display. timestamp=%u", buf, 0x2Cu);
        }
      }
      else if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        int v76 = *(_DWORD *)a3;
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v72;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_DecoderCallback";
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v84) = 680;
        WORD2(v84) = 2048;
        *(void *)((char *)&v84 + 6) = v9;
        HIWORD(v84) = 1024;
        LODWORD(v85[0]) = v76;
        _os_log_debug_impl(&dword_1E1EA4000, v73, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to enqueue frame for display. timestamp=%u", buf, 0x2Cu);
      }
    }
LABEL_85:
    _VideoReceiver_CheckAndRequestKeyFrame(v9, (uint64_t)v79);
    if (v79)
    {
      if (v80) {
        VCVideoReceiverDecodedFrame_Destroy(&v79);
      }
    }
    CheckOutHandleDebug();
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoReceiver_DecoderCallback_cold_1();
    }
  }
}

unsigned int *_VideoReceiver_GetStream(unsigned int *a1, int a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  if (!v5)
  {
LABEL_13:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      uint64_t v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v13 = 136316162;
        uint64_t v14 = v11;
        __int16 v15 = 2080;
        uint64_t v16 = "_VideoReceiver_GetStream";
        __int16 v17 = 1024;
        int v18 = 1453;
        __int16 v19 = 2048;
        int v20 = a1;
        __int16 v21 = 1024;
        int v22 = a2;
        _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] unknown streamID:%d", (uint8_t *)&v13, 0x2Cu);
      }
    }
    return 0;
  }
  uint64_t v6 = 0;
  BOOL v7 = a1 + 371;
  while (1)
  {
    uint64_t result = &a1[1080 * v6 + 368];
    if (a3)
    {
      if (BYTE1(a1[1080 * v6 + 385])) {
        return result;
      }
      goto LABEL_12;
    }
    if (*(unsigned __int16 *)result == a2 || HIWORD(a1[1080 * v6 + 368]) == a2) {
      return result;
    }
    uint64_t v9 = a1[1080 * v6 + 370];
    uint64_t v10 = v7;
    if (v9) {
      break;
    }
LABEL_12:
    ++v6;
    v7 += 1080;
    if (v6 == v5) {
      goto LABEL_13;
    }
  }
  while (*(unsigned __int16 *)v10 != a2 && *((unsigned __int16 *)v10 + 9) != a2)
  {
    uint64_t v10 = (unsigned int *)((char *)v10 + 2);
    if (!--v9) {
      goto LABEL_12;
    }
  }
  return result;
}

BOOL _VideoReceiver_EnqueueDecodedFrameForDisplay(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, unsigned char *a5)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  *a5 = 1;
  uint64_t v6 = *a4;
  if (!*(unsigned char *)(a2 + 1188))
  {
    if (!*(_DWORD *)(a2 + 1464))
    {
      if (*(unsigned char *)(v6 + 67)) {
        _VideoReceiver_UpdateVideoStallStatus(a2, 1);
      }
      _VideoReceiver_ShowFrame(a2, v6);
      return 1;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return 0;
    }
    uint64_t v39 = VRTraceErrorLogLevelToCSTR();
    long long v40 = *MEMORY[0x1E4F47A50];
    long long v41 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      BOOL result = os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        _VideoReceiver_EnqueueDecodedFrameForDisplay_cold_1();
        return 0;
      }
      return result;
    }
    BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v42) {
      return result;
    }
    *(_DWORD *)CMTime buf = 136315906;
    uint64_t v60 = v39;
    __int16 v61 = 2080;
    uint64_t v62 = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
    __int16 v63 = 1024;
    int v64 = 601;
    __int16 v65 = 2048;
    uint64_t v66 = a2;
    int v43 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] stopping";
    int v44 = v40;
    uint32_t v45 = 38;
LABEL_49:
    _os_log_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEFAULT, v43, buf, v45);
    return 0;
  }
  if (*(unsigned __int16 *)(a2 + 1162) >= 2u && !*(void *)(v6 + 16) && !*(void *)(v6 + 8))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return 0;
    }
    uint64_t v46 = VRTraceErrorLogLevelToCSTR();
    int v47 = *MEMORY[0x1E4F47A50];
    long long v48 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      BOOL result = os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        int v53 = *(_DWORD *)(v6 + 24);
        int v54 = *(unsigned __int8 *)(v6 + 67);
        int v55 = *(unsigned __int8 *)(v6 + 66);
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v60 = v46;
        __int16 v61 = 2080;
        uint64_t v62 = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
        __int16 v63 = 1024;
        int v64 = 586;
        __int16 v65 = 2048;
        uint64_t v66 = a2;
        __int16 v67 = 1024;
        BOOL v68 = v53;
        __int16 v69 = 1024;
        *(_DWORD *)uint64_t v70 = v54;
        *(_WORD *)&v70[4] = 1024;
        *(_DWORD *)&v70[6] = v55;
        _os_log_debug_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Empty frame from decoder for display with RTPTimestamp=%u requestIntra=%d showFrame=%d", buf, 0x38u);
        return 0;
      }
      return result;
    }
    BOOL v49 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v49) {
      return result;
    }
    int v50 = *(_DWORD *)(v6 + 24);
    int v51 = *(unsigned __int8 *)(v6 + 67);
    int v52 = *(unsigned __int8 *)(v6 + 66);
    *(_DWORD *)CMTime buf = 136316674;
    uint64_t v60 = v46;
    __int16 v61 = 2080;
    uint64_t v62 = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
    __int16 v63 = 1024;
    int v64 = 586;
    __int16 v65 = 2048;
    uint64_t v66 = a2;
    __int16 v67 = 1024;
    BOOL v68 = v50;
    __int16 v69 = 1024;
    *(_DWORD *)uint64_t v70 = v51;
    *(_WORD *)&v70[4] = 1024;
    *(_DWORD *)&v70[6] = v52;
    int v43 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Empty frame from decoder for display with RTPTimestamp=%u requestIn"
          "tra=%d showFrame=%d";
    int v44 = v47;
    uint32_t v45 = 56;
    goto LABEL_49;
  }
  uint64_t v10 = (uint64_t *)(a2 + 40448);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v11 = VRTraceErrorLogLevelToCSTR();
    uint64_t v12 = *MEMORY[0x1E4F47A50];
    int v13 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *(unsigned __int16 *)(v6 + 48);
        uint64_t v15 = *(void *)(v6 + 40);
        int v16 = *(_DWORD *)(v6 + 24);
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v60 = v11;
        __int16 v61 = 2080;
        uint64_t v62 = "_VideoReceiver_EnqueueForDisplay";
        __int16 v63 = 1024;
        int v64 = 467;
        __int16 v65 = 2048;
        uint64_t v66 = a2;
        __int16 v67 = 1024;
        BOOL v68 = v14;
        __int16 v69 = 2048;
        *(void *)uint64_t v70 = v15;
        *(_WORD *)&v70[8] = 1024;
        int v71 = v16;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] for streamID=%u enqueue frame for display. subframe=%llu RTPTimestamp=%u", buf, 0x3Cu);
      }
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v31 = *(unsigned __int16 *)(v6 + 48);
      uint64_t v32 = *(void *)(v6 + 40);
      int v33 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v60 = v11;
      __int16 v61 = 2080;
      uint64_t v62 = "_VideoReceiver_EnqueueForDisplay";
      __int16 v63 = 1024;
      int v64 = 467;
      __int16 v65 = 2048;
      uint64_t v66 = a2;
      __int16 v67 = 1024;
      BOOL v68 = v31;
      __int16 v69 = 2048;
      *(void *)uint64_t v70 = v32;
      *(_WORD *)&v70[8] = 1024;
      int v71 = v33;
      _os_log_debug_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] for streamID=%u enqueue frame for display. subframe=%llu RTPTimestamp=%u", buf, 0x3Cu);
    }
  }
  OSStatus v17 = CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a2 + 41312), (const void *)v6);
  if (v17)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v18 = VRTraceErrorLogLevelToCSTR();
      __int16 v19 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v29 = *(unsigned __int16 *)(v6 + 48);
        uint64_t v56 = *(void *)(v6 + 40);
        int v57 = *(_DWORD *)(v6 + 24);
        int32_t Count = CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a2 + 41312));
        *(_DWORD *)CMTime buf = 136317186;
        uint64_t v60 = v18;
        __int16 v61 = 2080;
        uint64_t v62 = "_VideoReceiver_EnqueueForDisplay";
        __int16 v63 = 1024;
        int v64 = 471;
        __int16 v65 = 2048;
        uint64_t v66 = a2;
        __int16 v67 = 1024;
        BOOL v68 = v29;
        __int16 v69 = 2048;
        *(void *)uint64_t v70 = v56;
        *(_WORD *)&v70[8] = 1024;
        int v71 = v57;
        __int16 v72 = 1024;
        OSStatus v73 = v17;
        __int16 v74 = 1024;
        int32_t v75 = Count;
        _os_log_error_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] for streamID=%d failed to enqueue frame for display. subframe=%llu RTPTimestamp=%u status=%d count=%d", buf, 0x48u);
      }
    }
    if (!*(unsigned char *)(a2 + 41284))
    {
      *(unsigned char *)(a2 + 41284) = 1;
      VCUtil_GenerateDiagnostics(0, 0, "VideoReceiver failed to enqueue frame into frameQueueForDisplay", 1u);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v20 = VRTraceErrorLogLevelToCSTR();
    __int16 v21 = *MEMORY[0x1E4F47A50];
    int v22 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *(_DWORD *)(v6 + 24);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v60 = v20;
        __int16 v61 = 2080;
        uint64_t v62 = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
        __int16 v63 = 1024;
        int v64 = 589;
        __int16 v65 = 2048;
        uint64_t v66 = a2;
        __int16 v67 = 1024;
        BOOL v68 = v17 == 0;
        __int16 v69 = 1024;
        *(_DWORD *)uint64_t v70 = v23;
        _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Finished _VideoReceiver_EnqueueForDisplay, result=%d RTPTimestamp=%u", buf, 0x32u);
        if (v17) {
          goto LABEL_38;
        }
        goto LABEL_28;
      }
    }
    else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)CMTime buf = 136316418;
      uint64_t v60 = v20;
      __int16 v61 = 2080;
      uint64_t v62 = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
      __int16 v63 = 1024;
      int v64 = 589;
      __int16 v65 = 2048;
      uint64_t v66 = a2;
      __int16 v67 = 1024;
      BOOL v68 = v17 == 0;
      __int16 v69 = 1024;
      *(_DWORD *)uint64_t v70 = v34;
      _os_log_debug_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Finished _VideoReceiver_EnqueueForDisplay, result=%d RTPTimestamp=%u", buf, 0x32u);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_38;
    }
  }
  if (!v17)
  {
LABEL_28:
    _VideoReceiver_GetStream((unsigned int *)a2, *(unsigned __int16 *)(v6 + 48), *(unsigned __int8 *)(v6 + 71));
    kdebug_trace();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v24 = VRTraceErrorLogLevelToCSTR();
      __int16 v25 = *MEMORY[0x1E4F47A50];
      uint64_t v26 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = *a3;
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v60 = v24;
          __int16 v61 = 2080;
          uint64_t v62 = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
          __int16 v63 = 1024;
          int v64 = 595;
          __int16 v65 = 2048;
          uint64_t v66 = a2;
          __int16 v67 = 1024;
          BOOL v68 = v27;
          _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Calling VCVideoPlayer_QueueAlarmForDisplay, RTPTimestamp=%u", buf, 0x2Cu);
        }
      }
      else if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        int v38 = *a3;
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v60 = v24;
        __int16 v61 = 2080;
        uint64_t v62 = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
        __int16 v63 = 1024;
        int v64 = 595;
        __int16 v65 = 2048;
        uint64_t v66 = a2;
        __int16 v67 = 1024;
        BOOL v68 = v38;
        _os_log_debug_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Calling VCVideoPlayer_QueueAlarmForDisplay, RTPTimestamp=%u", buf, 0x2Cu);
      }
    }
    VCVideoPlayer_QueueAlarmForDisplay(*v10, (uint64_t)VideoReceiver_VideoAlarmForDisplay, a1, *(_DWORD *)(v6 + 24), *(unsigned __int16 *)(v6 + 28), *(unsigned __int8 *)(v6 + 67), *(double *)(v6 + 32));
    *a5 = 0;
    *a4 = 0;
    return 1;
  }
LABEL_38:
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  uint64_t v35 = VRTraceErrorLogLevelToCSTR();
  long long v36 = *MEMORY[0x1E4F47A50];
  BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v37 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)CMTime buf = 136316162;
    uint64_t v60 = v35;
    __int16 v61 = 2080;
    uint64_t v62 = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
    __int16 v63 = 1024;
    int v64 = 590;
    __int16 v65 = 2048;
    uint64_t v66 = a2;
    __int16 v67 = 1024;
    BOOL v68 = v37;
    _os_log_error_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to enqueue frame for display with RTPTimestamp=%u", buf, 0x2Cu);
    return 0;
  }
  return result;
}

void _VideoReceiver_CheckAndRequestKeyFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 && *(unsigned char *)(a2 + 67))
  {
    if (*(unsigned __int16 *)(a1 + 1162) < 2u) {
      Stream = _VideoReceiver_GetStream((unsigned int *)a1, *(unsigned __int16 *)(a2 + 48), *(unsigned __int8 *)(a2 + 71));
    }
    else {
      Stream = _VideoReceiver_GetStreamWithTileIndex((unsigned int *)a1, *(unsigned __int16 *)(a2 + 44));
    }
    if (Stream)
    {
      int v5 = *(_DWORD *)(a2 + 24);
      int v6 = *((unsigned __int8 *)Stream + 100);
      int v7 = *(unsigned __int8 *)(a2 + 68);
      _VideoReceiver_DecoderRequestKeyFrame(a1, (unsigned __int16 *)Stream, 0x12u, v5, v6, v7);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v10 = *(unsigned __int16 *)(a2 + 48);
        int v11 = 136316162;
        uint64_t v12 = v8;
        __int16 v13 = 2080;
        int v14 = "_VideoReceiver_CheckAndRequestKeyFrame";
        __int16 v15 = 1024;
        int v16 = 1917;
        __int16 v17 = 2048;
        uint64_t v18 = a1;
        __int16 v19 = 1024;
        int v20 = v10;
        _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to find the VCVideoReceiverStream matching streamID=%d", (uint8_t *)&v11, 0x2Cu);
      }
    }
  }
}

int32x2_t *VideoReceiver_IncrementFIRCount(uint64_t a1, int a2)
{
  BOOL result = (int32x2_t *)CheckInHandleDebug();
  if (result)
  {
    result[5125] = vadd_s32(result[5125], (int32x2_t)0x100000001);
    if (a2 == 3) {
      ++result[5126].i32[0];
    }
    return (int32x2_t *)CheckOutHandleDebug();
  }
  return result;
}

uint64_t _VideoReceiver_HandleSendRTCPSuccess(uint64_t a1, unsigned char *a2, double a3)
{
  uint64_t result = CheckInHandleDebug();
  if (result)
  {
    *(double *)(result + 40744) = a3;
    if ((*a2 & 0x48) != 0)
    {
      ReportingEventDictionary = _VideoReceiver_CreateReportingEventDictionary(result);
      reportingVideoStreamEvent();
      VideoReceiver_IncrementFIRCount(a1, -1);
      if (ReportingEventDictionary) {
        CFRelease(ReportingEventDictionary);
      }
    }
    return CheckOutHandleDebug();
  }
  return result;
}

__CFDictionary *_VideoReceiver_CreateReportingEventDictionary(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v4 = FourccToCStr(*(_DWORD *)(a1 + 1248));
    CFStringRef v5 = CFStringCreateWithCString(v2, v4, 0x8000100u);
    int v6 = FourccToCStr(*(_DWORD *)(a1 + 1248));
    CFStringRef v7 = CFStringCreateWithCString(v2, v6, 0x8000100u);
    if (v5)
    {
      CFDictionaryAddValue(Mutable, @"VCMSStreamGroup", v5);
      CFRelease(v5);
    }
    if (v7)
    {
      CFDictionaryAddValue(Mutable, @"VCSPUUID", v7);
      CFRelease(v7);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoReceiver_CreateReportingEventDictionary_cold_1();
    }
  }
  return Mutable;
}

void _VideoReceiver_SendRTCP(uint64_t a1, uint64_t a2, long long *a3, int a4, double a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a3) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = a4 == 0;
  }
  if (!v5)
  {
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 128);
    int v10 = (NSObject **)(a1 + 40752);
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    int v16 = 0;
    int v11 = RTCPCopySendControlParameters(a3, (uint64_t)&v46, *(OSQueueHead **)(a1 + 41408), &v16);
    if (v11 < 0)
    {
      int v13 = v11;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v14 = VRTraceErrorLogLevelToCSTR();
        __int16 v15 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v35 = v14;
          __int16 v36 = 2080;
          int v37 = "_VideoReceiver_SendRTCP";
          __int16 v38 = 1024;
          int v39 = 1555;
          __int16 v40 = 1024;
          int v41 = 1555;
          __int16 v42 = 2048;
          uint64_t v43 = a1;
          __int16 v44 = 1024;
          int v45 = v13;
          _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoReceiver.c:%d: VideoReceiver[%p] deep copy of rtcp send control params failed (%08X)", buf, 0x32u);
        }
      }
    }
    else
    {
      uint64_t v12 = *v10;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___VideoReceiver_SendRTCP_block_invoke;
      block[3] = &__block_descriptor_tmp_7;
      long long v26 = v54;
      long long v27 = v55;
      long long v22 = v50;
      long long v23 = v51;
      long long v24 = v52;
      long long v25 = v53;
      long long v18 = v46;
      long long v19 = v47;
      long long v20 = v48;
      long long v21 = v49;
      uint64_t v28 = v56;
      uint64_t v29 = v8;
      uint64_t v30 = a1;
      uint64_t v31 = v9;
      double v32 = a5;
      int v33 = v16;
      dispatch_async(v12, block);
    }
  }
}

uint64_t _VideoReceiver_DecryptFrame(uint64_t a1, OpaqueCMBlockBuffer *a2, CMBlockBufferRef *a3)
{
  if (!a1) {
    return 2149515265;
  }
  uint64_t v4 = VCSFrameCryptorH264_Decrypt(*(uint64_t **)(a1 + 4272), a2, a3);
  if ((v4 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoReceiver_DecryptFrame_cold_1();
    }
  }
  RTPProcessDecryptionStatusChange(*(void *)(a1 + 48), (int)v4 >= 0);
  return v4;
}

uint64_t _VideoReceiver_GetAssemblyRTPTimestamp(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (int *)(a1 + 40704);
  uint64_t v2 = *(unsigned int *)(a1 + 40716);
  unsigned int v3 = *(_DWORD *)(a1 + 40704);
  if (v3 - 1 < v2 && *(unsigned char *)(a1 + 1078))
  {
    double v5 = (double)*(int *)(a1 + 1036);
    unsigned int v6 = v2 - (*(double *)(a1 + 1080) * v5);
    if (v6 <= v3) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v6;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      double v8 = (double)(v2 - v3) / v5;
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      int v10 = *MEMORY[0x1E4F47A50];
      int v11 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 1080);
          int v13 = v1[3];
          int v14 = *v1;
          int v19 = 136316930;
          uint64_t v20 = v9;
          __int16 v21 = 2080;
          long long v22 = "_VideoReceiver_GetAssemblyRTPTimestamp";
          __int16 v23 = 1024;
          int v24 = 3369;
          __int16 v25 = 2048;
          uint64_t v26 = v12;
          __int16 v27 = 1024;
          int v28 = v7;
          __int16 v29 = 1024;
          int v30 = v13;
          __int16 v31 = 1024;
          int v32 = v14;
          __int16 v33 = 2048;
          double v34 = v8;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d deferredAssemblyOffset=%f assemblyTimestamp=%u lastReceivedTimestamp=%u playoutRTPTimestamp=%u bufferDepth=%f", (uint8_t *)&v19, 0x42u);
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v16 = *(void *)(a1 + 1080);
        int v17 = v1[3];
        int v18 = *v1;
        int v19 = 136316930;
        uint64_t v20 = v9;
        __int16 v21 = 2080;
        long long v22 = "_VideoReceiver_GetAssemblyRTPTimestamp";
        __int16 v23 = 1024;
        int v24 = 3369;
        __int16 v25 = 2048;
        uint64_t v26 = v16;
        __int16 v27 = 1024;
        int v28 = v7;
        __int16 v29 = 1024;
        int v30 = v17;
        __int16 v31 = 1024;
        int v32 = v18;
        __int16 v33 = 2048;
        double v34 = v8;
        _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d deferredAssemblyOffset=%f assemblyTimestamp=%u lastReceivedTimestamp=%u playoutRTPTimestamp=%u bufferDepth=%f", (uint8_t *)&v19, 0x42u);
      }
    }
    return v7;
  }
  return v2;
}

uint64_t VideoReceiver_SetTargetStreamID(uint64_t a1, int a2)
{
  uint64_t v3 = 2149515265;
  uint64_t v4 = CheckInHandleDebug();
  if (!v4) {
    return 2149515266;
  }
  uint64_t v5 = v4;
  unsigned int v6 = (unsigned __int16 *)(v4 + 40352);
  if (*(unsigned __int16 *)(v4 + 40360) == a2 && *(unsigned char *)(v4 + 40366))
  {
    CheckOutHandleDebug();
    return 0;
  }
  else
  {
    Stream = _VideoReceiver_GetStream((unsigned int *)v4, a2, *(unsigned __int8 *)(v4 + 77));
    if (Stream)
    {
      uint64_t v8 = (uint64_t)Stream;
      _VideoReceiver_UpdateStreamSwitchContextForTargetStream(v5, a2, *((_WORD *)Stream + 1), *((_WORD *)Stream + 2));
      if (*((unsigned char *)v6 + 6))
      {
        uint64_t v9 = v6 + 2;
        uint64_t v10 = 6;
        if (!*(unsigned char *)(v8 + 70))
        {
          uint64_t v10 = 4;
          uint64_t v9 = v6;
        }
        if (*v9 != v6[v10] && *(unsigned char *)(v8 + 64))
        {
          double v11 = micro();
          _VideoReceiver_SendFIR(v5, v8, 0, 25, v11);
        }
      }
      uint64_t v3 = 0;
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_SetTargetStreamID_cold_1();
      }
    }
    CheckOutHandleDebug();
  }
  return v3;
}

void _VideoReceiver_UpdateStreamSwitchContextForTargetStream(uint64_t a1, __int16 a2, __int16 a3, __int16 a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (unsigned __int16 *)(a1 + 40360);
  *(_WORD *)(a1 + 40360) = a2;
  *(_WORD *)(a1 + 40364) = a4;
  *(_WORD *)(a1 + 40362) = a3;
  *(unsigned char *)(a1 + 40366) = 1;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 1152);
      int v9 = *v5;
      int v10 = v5[2];
      int v11 = 136316674;
      uint64_t v12 = v6;
      __int16 v13 = 2080;
      int v14 = "_VideoReceiver_UpdateStreamSwitchContextForTargetStream";
      __int16 v15 = 1024;
      int v16 = 3416;
      __int16 v17 = 2048;
      uint64_t v18 = a1;
      __int16 v19 = 2048;
      uint64_t v20 = v8;
      __int16 v21 = 1024;
      int v22 = v9;
      __int16 v23 = 1024;
      int v24 = v10;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] participantId[%llu]: Setting target stream info. targetStreamID=%d, targetBaseStreamID=%d", (uint8_t *)&v11, 0x3Cu);
    }
  }
}

uint64_t _VideoReceiver_SendFIR(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1 + 40672;
  if (a3)
  {
    double v10 = *(double *)(a1 + 41136);
    if (v10 == 0.0 || a5 - v10 <= 15.0)
    {
      int v12 = 2;
      int v13 = 1;
    }
    else
    {
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (ErrorLogLevelForModule >= 3)
      {
        uint64_t v20 = VRTraceErrorLogLevelToCSTR();
        __int16 v21 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          uint64_t v53 = *(void *)(a2 + 112);
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v20;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_SendFIR";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 1609;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a1;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&uint8_t buf[40] = v53;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = 15;
          _os_log_error_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoPacketBuffer[%p] Forcing Full IDR request since video quality has been bad for more than %d secs", buf, 0x36u);
        }
      }
      int v22 = *(FILE ***)(v9 + 1008);
      if (v22) {
        VRDump_AddEvent(v22, 7u, 0, v15, v16, v17, v18, v19, v55);
      }
      int v13 = 0;
      int v12 = 0;
      *(unsigned char *)(v9 + 1016) = 1;
    }
  }
  else
  {
    int v13 = 0;
    int v12 = 0;
  }
  uint64_t v23 = *(unsigned __int16 *)(a2 + 4 * *(unsigned __int8 *)(a2 + 70));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v29 = VRTraceErrorLogLevelToCSTR();
    int v30 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void *)(a2 + 112);
      int v32 = *(_DWORD *)(v9 + 140);
      int v33 = *(_DWORD *)(v9 + 144);
      double v34 = kVCKeyFrameRequestReasonStrings_0[a4];
      int v35 = *(unsigned __int8 *)(a2 + 70);
      *(_DWORD *)CMTime buf = 136317954;
      *(void *)&uint8_t buf[4] = v29;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoReceiver_SendFIR";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1621;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a1;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&uint8_t buf[40] = v31;
      *(_WORD *)&buf[48] = 1024;
      *(_DWORD *)&buf[50] = v12;
      *(_WORD *)&buf[54] = 1024;
      *(_DWORD *)&buf[56] = v32;
      *(_WORD *)&buf[60] = 1024;
      *(_DWORD *)&buf[62] = v33;
      *(_WORD *)&buf[66] = 2048;
      *(void *)&buf[68] = a2;
      *(_WORD *)&buf[76] = 1024;
      *(_DWORD *)&buf[78] = v23;
      *(_WORD *)&buf[82] = 2080;
      *(void *)&buf[84] = v34;
      *(_WORD *)&buf[92] = 1024;
      *(_DWORD *)&buf[94] = v35;
      _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoPacketBuffer[%p] Sending FIR(%d) %dx%d stream[%p] streamID=%d reason=%s isTemporalScalingEnabled=%d", buf, 0x62u);
    }
  }
  __int16 v36 = *(FILE ***)(v9 + 1008);
  if (v36) {
    VRDump_AddEvent(v36, 4u, 0, v24, v25, v26, v27, v28, v55);
  }
  *(double *)(a2 + 4312) = a5;
  if (*(unsigned char *)(a1 + 1189))
  {
    uint64_t v76 = 0;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v73 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v71, 170, 20);
    if (*(unsigned char *)(a1 + 1190))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v37 = VRTraceErrorLogLevelToCSTR();
        __int16 v38 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = *(void *)(a2 + 112);
          *(_DWORD *)uint64_t v57 = 136316418;
          uint64_t v58 = v37;
          __int16 v59 = 2080;
          uint64_t v60 = "_VideoReceiver_SendFIR";
          __int16 v61 = 1024;
          int v62 = 1642;
          __int16 v63 = 2048;
          uint64_t v64 = a1;
          __int16 v65 = 2048;
          uint64_t v66 = v39;
          __int16 v67 = 2048;
          *(void *)BOOL v68 = a2;
          _os_log_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoPacketBuffer[%p] stream[%p] Sending PSFB FIR", v57, 0x3Au);
        }
      }
      *(_DWORD *)CMTime buf = 64;
      uint8_t v40 = *(unsigned char *)(v9 + 912) + 1;
      *(unsigned char *)(v9 + 912) = v40;
      unsigned char buf[24] = v40;
      *((void *)&v74 + 1) = *(void *)(a1 + 1152);
      BYTE3(v74) = 1;
      goto LABEL_48;
    }
    *(_DWORD *)CMTime buf = 8;
    if (a3)
    {
      int v45 = *(_DWORD *)(v9 + 144);
      LOWORD(v71[0]) = *(_DWORD *)(v9 + 140);
      WORD1(v71[0]) = v45;
      *(void *)&buf[32] = v71;
      *(_DWORD *)&uint8_t buf[40] = v12;
      int v46 = *(unsigned __int8 *)(v9 + 536);
      int v47 = *(unsigned char *)(v9 + 536) ? 7 : 8;
      if (v47 <= (int)VRTraceGetErrorLogLevelForModule())
      {
        uint64_t v48 = VRTraceErrorLogLevelToCSTR();
        if (v46)
        {
          long long v49 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
LABEL_45:
            uint64_t v51 = *(void *)(a2 + 112);
            *(_DWORD *)uint64_t v57 = 136316930;
            uint64_t v58 = v48;
            __int16 v59 = 2080;
            uint64_t v60 = "_VideoReceiver_SendFIR";
            __int16 v61 = 1024;
            int v62 = 1655;
            __int16 v63 = 2048;
            uint64_t v64 = a1;
            __int16 v65 = 2048;
            uint64_t v66 = v51;
            __int16 v67 = 1024;
            *(_DWORD *)BOOL v68 = LOWORD(v71[0]);
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)&v68[6] = WORD1(v71[0]);
            __int16 v69 = 1024;
            int v70 = v12;
            _os_log_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoPacketBuffer[%p] %dx%d %d", v57, 0x42u);
          }
        }
        else
        {
          long long v49 = *MEMORY[0x1E4F47A50];
          long long v50 = *MEMORY[0x1E4F47A50];
          if (!*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v54 = *(void *)(a2 + 112);
              *(_DWORD *)uint64_t v57 = 136316930;
              uint64_t v58 = v48;
              __int16 v59 = 2080;
              uint64_t v60 = "_VideoReceiver_SendFIR";
              __int16 v61 = 1024;
              int v62 = 1655;
              __int16 v63 = 2048;
              uint64_t v64 = a1;
              __int16 v65 = 2048;
              uint64_t v66 = v54;
              __int16 v67 = 1024;
              *(_DWORD *)BOOL v68 = LOWORD(v71[0]);
              *(_WORD *)&v68[4] = 1024;
              *(_DWORD *)&v68[6] = WORD1(v71[0]);
              __int16 v69 = 1024;
              int v70 = v12;
              _os_log_debug_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoPacketBuffer[%p] %dx%d %d", v57, 0x42u);
            }
            goto LABEL_48;
          }
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_45;
          }
        }
      }
    }
LABEL_48:
    _VideoReceiver_SendRTCP(a1, a2, (long long *)buf, 0, a5);
    return kdebug_trace();
  }
  int v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 1424);
  if (v41 && *(unsigned char *)(a2 + 64))
  {
    if (v13 && *(unsigned char *)(a2 + 69))
    {
      uint64_t v42 = *(void *)(a1 + 1400);
      uint64_t v43 = v23;
      uint64_t v44 = 2;
LABEL_42:
      v41(v42, v43, v44);
      return kdebug_trace();
    }
    uint64_t v42 = *(void *)(a1 + 1400);
    uint64_t v43 = v23;
    if (a4 != 28)
    {
      uint64_t v44 = 0;
      goto LABEL_42;
    }
    v41(v42, v23, 3);
    reportingSymptom();
  }
  return kdebug_trace();
}

uint64_t VideoReceiver_SetShouldEnableFaceZoom(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149515266;
  }
  uint64_t v4 = v3 + 40456;
  VideoDecoder_SetShouldEnableFaceZoom();
  *(unsigned char *)(v4 + 1000) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoReceiver_SetShouldEnableMLEnhance(uint64_t a1, int a2, int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (unsigned int *)CheckInHandleDebug();
  if (!v5) {
    return 2149515266;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *v5;
  if (v7)
  {
    uint64_t v8 = (unsigned __int16 *)(v5 + 10088);
    uint64_t v9 = v5 + 395;
    while (*((unsigned __int16 *)v9 - 54) != a2)
    {
      v9 += 4320;
      if (!--v7) {
        goto LABEL_14;
      }
    }
    if (*v9 != a3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        int v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v13 = 136316418;
          uint64_t v14 = v11;
          __int16 v15 = 2080;
          uint64_t v16 = "VideoReceiver_SetShouldEnableMLEnhance";
          __int16 v17 = 1024;
          int v18 = 3509;
          __int16 v19 = 2048;
          uint64_t v20 = v6;
          __int16 v21 = 1024;
          int v22 = a3;
          __int16 v23 = 1024;
          int v24 = a2;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] ML Enhance setting shouldEnableMLEnhance=%u on streamID=%u", (uint8_t *)&v13, 0x32u);
        }
      }
      *uint64_t v9 = a3;
      if (*v8 == a2) {
        VideoDecoder_SetShouldEnableMLEnhance(*((void *)v6 + 5057), a3);
      }
    }
  }
LABEL_14:
  CheckOutHandleDebug();
  return 0;
}

void _VideoReceiver_ProcessRTTStatistics(unsigned int *a1, _DWORD *a2)
{
  if (*a2 == 3)
  {
    double v3 = (double)(a2[13] << (*((unsigned char *)a1 + 40368) == 0)) / 1000.0;
    if (v3 != 0.0)
    {
      unint64_t v4 = *a1;
      if (v4)
      {
        unint64_t v5 = 0;
        uint64_t v6 = 396;
        do
        {
          uint64_t v7 = *(void *)&a1[v6];
          if (v7)
          {
            VideoPacketBuffer_SetRoundTripTime(v7, v3);
            unint64_t v4 = *a1;
          }
          ++v5;
          v6 += 1080;
        }
        while (v5 < v4);
      }
    }
  }
}

void _VideoReceiver_RegisterStatistics(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 1260))
  {
    uint64_t v2 = (uint64_t *)(a1 + 41416);
    double v3 = *(void **)(a1 + 41416);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    void v8[2] = ___VideoReceiver_RegisterStatistics_block_invoke;
    v8[3] = &__block_descriptor_tmp_10;
    v8[4] = a1;
    *((_DWORD *)v2 + 59) = VCRateControlRegisterStatisticsChangeHandler(v3, 3, (uint64_t)v8);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      unint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *v2;
        int v7 = *((_DWORD *)v2 + 59);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v10 = v4;
        __int16 v11 = 2080;
        int v12 = "_VideoReceiver_RegisterStatistics";
        __int16 v13 = 1024;
        int v14 = 3753;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 2048;
        uint64_t v18 = v6;
        __int16 v19 = 1024;
        int v20 = v7;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Registered statisticsCollector[%p] with index=%d", buf, 0x36u);
      }
    }
  }
}

void _VideoReceiver_UnregisterStatistics(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 41416);
  VCRateControlUnregisterStatisticsChangeHandler(*(void **)(a1 + 41416), 3, *(unsigned int *)(a1 + 41652));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *v2;
      int v6 = *((_DWORD *)v2 + 59);
      int v7 = 136316418;
      uint64_t v8 = v3;
      __int16 v9 = 2080;
      uint64_t v10 = "_VideoReceiver_UnregisterStatistics";
      __int16 v11 = 1024;
      int v12 = 3759;
      __int16 v13 = 2048;
      uint64_t v14 = a1;
      __int16 v15 = 2048;
      uint64_t v16 = v5;
      __int16 v17 = 1024;
      int v18 = v6;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unregistered statisticsCollector[%p] with index=%d", (uint8_t *)&v7, 0x36u);
    }
  }
}

FILE **_VideoReceiver_SwitchIntoOneToOne(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 40368;
  *(void *)(a1 + 40376) = a3;
  *(_DWORD *)(a1 + 40372) = *(_DWORD *)(a3 + 96);
  *(unsigned char *)(a1 + 40368) = a2;
  _VideoReceiver_UnregisterStatistics(a1);
  int v7 = *(const void **)(v6 + 1048);
  if (v7) {
    CFRelease(v7);
  }
  CFTypeRef v8 = *(CFTypeRef *)(a3 + 88);
  if (v8) {
    CFTypeRef v8 = CFRetain(v8);
  }
  *(void *)(v6 + 1048) = v8;
  _VideoReceiver_RegisterStatistics(a1);
  _VideoReceiver_UpdateMediaControlInfo(a1);
  *(unsigned char *)(a1 + 1183) = *(unsigned char *)(a3 + 100);
  __int16 v9 = *(void (**)(void, void))(a1 + 1456);
  if (v9) {
    v9(*(void *)(a1 + 1400), *(unsigned int *)(a3 + 96));
  }
  if (*(unsigned char *)(a1 + 1260)) {
    _VideoReceiver_ReportRTXConfiguration((unsigned __int8 *)a1);
  }
  if (*(unsigned char *)(a3 + 102) && *(_DWORD *)(a3 + 104) == 2)
  {
    int v10 = *(unsigned __int8 *)(a3 + 101);
    int v11 = 1;
  }
  else
  {
    if (!*(unsigned char *)(a3 + 101)) {
      goto LABEL_15;
    }
    int v11 = 0;
    int v10 = 1;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int valuePtr = v10;
  CFNumberRef v14 = CFNumberCreate(v12, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"RtcpForLoss", v14);
  CFRelease(v14);
  int valuePtr = v11;
  CFNumberRef v15 = CFNumberCreate(v12, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"RtcpForLtrAck", v15);
  CFRelease(v15);
  reportingFeatureConfigEvent();
  CFRelease(Mutable);
LABEL_15:
  *(_DWORD *)(v6 + 760) = 0;
  *(_OWORD *)(a1 + 41104) = 0u;
  *(_OWORD *)(a1 + 41136) = 0u;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40536));
  if (*(void *)(v6 + 40) != 0xFFFFFFFFLL) {
    SummerReset();
  }
  if (*(void *)(v6 + 48) != 0xFFFFFFFFLL) {
    SummerReset();
  }
  if (*(void *)(v6 + 56) != 0xFFFFFFFFLL) {
    SummerReset();
  }
  if (*(void *)(v6 + 64) != 0xFFFFFFFFLL) {
    SummerReset();
  }
  if (*(void *)(v6 + 72) != 0xFFFFFFFFLL) {
    SummerReset();
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 40536));
  return VRDump_SwitchMode(*(FILE ***)(v6 + 1312), a2, v16, v17, v18, v19, v20, v21);
}

void _VideoReceiver_ReportRTXConfiguration(unsigned __int8 *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  LODWORD(valuePtr) = a1[1260];
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"NacksRTXEnabled", v4);
  CFRelease(v4);
  LODWORD(valuePtr) = a1[1276];
  CFNumberRef v5 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"NacksRTXDelayedEnabled", v5);
  CFRelease(v5);
  LOBYTE(v6) = a1[1264];
  float valuePtr = (float)v6;
  CFNumberRef v7 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionaryAddValue(Mutable, @"NacksRTXConfigVersion", v7);
  CFRelease(v7);
  reportingFeatureConfigEvent();
  CFRelease(Mutable);
}

uint64_t _VideoReceiver_GetVPBStats(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)MEMORY[0x1F4188790](a1);
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (v1)
  {
    uint64_t v4 = v2;
    if (v2)
    {
      CFNumberRef v5 = v3;
      if (v3)
      {
        unsigned int v6 = v1;
        if (*v1)
        {
          unint64_t v7 = 0;
          uint64_t v27 = v2 + 612;
          do
          {
            uint64_t v8 = *(void *)&v6[1080 * v7 + 396];
            if (v8)
            {
              bzero(__dst, 0xA4F8uLL);
              VideoPacketBuffer_GetStatistics(v8, __dst);
              *(int32x4_t *)uint64_t v4 = vaddq_s32(*(int32x4_t *)v4, __dst[0]);
              *(_DWORD *)(v4 + 42228) += v37[5202];
              *(double *)(v4 + 552) = v30 + *(double *)(v4 + 552);
              *(int32x2_t *)(v4 + 576) = vadd_s32(*(int32x2_t *)(v4 + 576), v32);
              *(_DWORD *)(v4 + 584) += v33;
              *(_DWORD *)(v4 + 608) += v35;
              uint64_t v9 = 115;
              *(int32x2_t *)(v4 + 600) = vadd_s32(*(int32x2_t *)(v4 + 600), v34);
              do
              {
                *(_DWORD *)(v4 + v9 * 4) += __dst[0].i32[v9];
                ++v9;
              }
              while (v9 != 138);
              uint64_t v10 = 0;
              double v11 = *(double *)(v4 + 568);
              if (v11 <= v31) {
                double v11 = v31;
              }
              *(double *)(v4 + 568) = v11;
              do
              {
                uint64_t v12 = v4 + v10;
                *(int64x2_t *)(v12 + 16) = vaddq_s64(*(int64x2_t *)(v4 + v10 + 16), *(int64x2_t *)((char *)&__dst[1] + v10));
                int32x4_t v13 = *(int32x4_t *)((char *)&__dst[2] + v10 + 4);
                *(int32x4_t *)(v12 + 36) = vaddq_s32(*(int32x4_t *)(v4 + v10 + 36), v13);
                *(_DWORD *)(v12 + 32) = vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v13.i8, 1), v13), vaddq_s32(vdupq_laneq_s32(v13, 2), vdupq_laneq_s32(v13, 3))).u32[0]+ *(_DWORD *)(v4 + v10 + 32);
                v10 += 40;
              }
              while (v10 != 240);
              for (uint64_t i = 128; i != 230; ++i)
              {
                unsigned int v15 = *(unsigned __int16 *)(v4 + i * 2);
                if (v15 <= __dst[0].u16[i]) {
                  LOWORD(v15) = __dst[0].i16[i];
                }
                *(_WORD *)(v4 + i * 2) = v15;
              }
              uint64_t v16 = 0;
              uint64_t v17 = v27;
              uint64_t v18 = &v36;
              do
              {
                for (uint64_t j = 0; j != 204; j += 2)
                  *(_WORD *)(v17 + j) += *(_WORD *)((char *)v18 + j);
                ++v16;
                v18 += 51;
                v17 += 204;
              }
              while (v16 != 102);
              uint64_t v20 = 0;
              uint64_t v21 = v4 + 21420;
              int v22 = v37;
              do
              {
                for (uint64_t k = 0; k != 204; k += 2)
                  *(_WORD *)(v21 + k) += *(_WORD *)((char *)v22 + k);
                ++v20;
                v22 += 51;
                v21 += 204;
              }
              while (v20 != 102);
            }
            unsigned int v24 = *(_DWORD *)(v4 + 584);
            if (v24) {
              *(double *)(v4 + 560) = *(double *)(v4 + 552) / (double)v24;
            }
            int v28 = 0;
            __dst[0].i32[0] = 0;
            RTPGetRecvStats(*(void *)&v6[1080 * v7 + 380], __dst, &v28);
            *v5 += __dst[0].i32[0];
            ++v7;
          }
          while (v7 < *v6);
        }
        return 0;
      }
      else
      {
        uint64_t v25 = 2149515265;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoReceiver_GetVPBStats_cold_3();
          }
        }
      }
    }
    else
    {
      uint64_t v25 = 2149515265;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoReceiver_GetVPBStats_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v25 = 2149515265;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoReceiver_GetVPBStats_cold_1();
      }
    }
  }
  return v25;
}

void _VideoReceiver_ReportVideoPlayerStatsForReporting(uint64_t a1, __CFDictionary *a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      LODWORD(v17[0]) = *(_DWORD *)(a1 + 144);
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, v17);
      CFDictionaryAddValue(a2, @"VPAVTDCount", v5);
      CFRelease(v5);
      v17[0] = *(void *)(a1 + 128);
      CFNumberRef v6 = CFNumberCreate(v4, kCFNumberDoubleType, v17);
      CFDictionaryAddValue(a2, @"VPAVTDSum", v6);
      CFRelease(v6);
      v17[0] = *(void *)(a1 + 136);
      CFNumberRef v7 = CFNumberCreate(v4, kCFNumberDoubleType, v17);
      CFDictionaryAddValue(a2, @"VPAVTDAbsSum", v7);
      CFRelease(v7);
      v17[0] = *(void *)(a1 + 120);
      CFNumberRef v8 = CFNumberCreate(v4, kCFNumberDoubleType, v17);
      CFDictionaryAddValue(a2, @"VPAVTDMax", v8);
      CFRelease(v8);
      v17[0] = *(void *)(a1 + 112);
      CFNumberRef v9 = CFNumberCreate(v4, kCFNumberDoubleType, v17);
      CFDictionaryAddValue(a2, @"VPAVTDMin", v9);
      CFRelease(v9);
      LODWORD(v17[0]) = *(_DWORD *)(a1 + 104);
      CFNumberRef v10 = CFNumberCreate(v4, kCFNumberIntType, v17);
      CFDictionaryAddValue(a2, @"VPAVSOCount", v10);
      CFRelease(v10);
      v17[0] = *(void *)(a1 + 88);
      CFNumberRef v11 = CFNumberCreate(v4, kCFNumberDoubleType, v17);
      CFDictionaryAddValue(a2, @"VPAVSOSum", v11);
      CFRelease(v11);
      v17[0] = *(void *)(a1 + 96);
      CFNumberRef v12 = CFNumberCreate(v4, kCFNumberDoubleType, v17);
      CFDictionaryAddValue(a2, @"VPAVSOAbsSum", v12);
      CFRelease(v12);
      v17[0] = *(void *)(a1 + 80);
      CFNumberRef v13 = CFNumberCreate(v4, kCFNumberDoubleType, v17);
      CFDictionaryAddValue(a2, @"VPAVSOMax", v13);
      CFRelease(v13);
      v17[0] = *(void *)(a1 + 72);
      CFNumberRef v14 = CFNumberCreate(v4, kCFNumberDoubleType, v17);
      CFDictionaryAddValue(a2, @"VPAVSOMin", v14);
      CFRelease(v14);
      LODWORD(v17[0]) = *(_DWORD *)(a1 + 152);
      CFNumberRef v15 = CFNumberCreate(v4, kCFNumberIntType, v17);
      CFDictionaryAddValue(a2, @"VPDECAC", v15);
      CFRelease(v15);
      LODWORD(v17[0]) = *(_DWORD *)(a1 + 156);
      CFNumberRef v16 = CFNumberCreate(v4, kCFNumberIntType, v17);
      CFDictionaryAddValue(a2, @"VPDISAC", v16);
      CFRelease(v16);
    }
  }
}

void VideoReceiverConfig_CleanupFeatureStrings(_DWORD *a1)
{
  unint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 16;
    do
    {
      CFNumberRef v5 = *(const void **)&a1[v4];
      if (v5)
      {
        CFRelease(v5);
        *(void *)&a1[v4] = 0;
        unint64_t v2 = *a1;
      }
      ++v3;
      v4 += 28;
    }
    while (v3 < v2);
  }
  *a1 = 0;
}

uint64_t _VideoReceiver_CloseSummers(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40408);
  if (*(void *)(a1 + 40408) != 0xFFFFFFFFLL) {
    SummerCloseHandle();
  }
  if (v1[1] != 0xFFFFFFFFLL) {
    SummerCloseHandle();
  }
  if (v1[4] != 0xFFFFFFFFLL) {
    SummerCloseHandle();
  }
  if (v1[2] != 0xFFFFFFFFLL) {
    SummerCloseHandle();
  }
  uint64_t result = v1[3];
  if (result != 0xFFFFFFFFLL)
  {
    return SummerCloseHandle();
  }
  return result;
}

uint64_t _VideoReceiver_CreateSummers(uint64_t *a1)
{
  if ((SummerCreateHandle(a1 + 5051, 400) & 0x80000000) == 0
    && (SummerCreateHandle(a1 + 5052, 400) & 0x80000000) == 0
    && (SummerCreateHandle(a1 + 5055, 400) & 0x80000000) == 0
    && (SummerCreateHandle(a1 + 5053, 400) & 0x80000000) == 0
    && (SummerCreateHandle(a1 + 5054, 400) & 0x80000000) == 0)
  {
    return 1;
  }
  _VideoReceiver_CloseSummers((uint64_t)a1);
  return 0;
}

uint64_t VideoReceiver_CreateHandle(uint64_t *a1, uint64_t a2, const void *a3, _OWORD *a4, const void *a5)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)a2 || !*(unsigned char *)(a2 + 1192) && !*(_DWORD *)(a2 + 1256)) {
    return 2149515265;
  }
  CFNumberRef v10 = (char *)malloc_type_calloc(1uLL, 0xA310uLL, 0x10E0040C735E53BuLL);
  if (v10)
  {
    CFNumberRef v11 = v10;
    CFNumberRef v113 = v10 + 40372;
    memcpy(v10, (const void *)a2, 0x578uLL);
    CFNumberRef v12 = (const void *)*((void *)v11 + 154);
    if (v12) {
      CFRetain(v12);
    }
    uint64_t v111 = a5;
    CFNumberRef v13 = (const void *)*((void *)v11 + 155);
    if (v13) {
      CFRetain(v13);
    }
    uint64_t v112 = a2;
    uint64_t v110 = a1;
    *(_DWORD *)CFNumberRef v113 = *((_DWORD *)v11 + 254);
    if (*(_DWORD *)v11)
    {
      unint64_t v14 = 0;
      CFNumberRef v15 = (const void **)(v11 + 80);
      CFNumberRef v16 = (CFAllocatorRef **)(v11 + 5744);
      uint64_t v17 = 2;
      while (1)
      {
        uint64_t v18 = *(v15 - 2);
        if (v18) {
          CFRetain(v18);
        }
        if (*v15)
        {
          uint64_t v17 = VCSFrameCryptorH264_Create(*v15, v16);
          unint64_t v19 = *(unsigned int *)v11;
          if (v17)
          {
            if (*(_DWORD *)v11)
            {
              unint64_t v39 = 0;
              uint8_t v40 = (CFTypeRef **)(v11 + 5744);
              do
              {
                VCSFrameCryptorH264_Destroy(v40);
                ++v39;
                v40 += 540;
              }
              while (v39 < *(unsigned int *)v11);
            }
            goto LABEL_121;
          }
        }
        else
        {
          unint64_t v19 = *(unsigned int *)v11;
        }
        ++v14;
        v15 += 14;
        v16 += 540;
        if (v14 >= v19) {
          goto LABEL_21;
        }
      }
    }
    uint64_t v17 = 2;
LABEL_21:
    if (VCDefaults_GetBoolValueForKey(@"SupportsOneToOneMode", 0) || *(_DWORD *)v113 || v11[1183])
    {
      if (*(_DWORD *)(a2 + 1068)) {
        unsigned int IsInternalOSInstalled = VRTraceIsInternalOSInstalled();
      }
      else {
        unsigned int IsInternalOSInstalled = 0;
      }
      uint64_t v21 = (CFTypeRef *)(v11 + 40664);
      *((_DWORD *)v11 + 267) = IsInternalOSInstalled;
      v11[1164] = VCDefaults_GetBoolValueForKey(@"forceUseInternalRTPThreading", *(unsigned __int8 *)(a2 + 1164));
      v11[1191] = VCDefaults_GetBoolValueForKey(@"enableDynamicVideoJitterBufferModeChange", 0);
      if (*(_DWORD *)(a2 + 1020) == 2) {
        __int16 v22 = 16;
      }
      else {
        __int16 v22 = 5;
      }
      *((_WORD *)v11 + 609) = v22;
      v11[1261] = VCDefaults_GetBoolValueForKey(@"useRTTForFIRThrottling", 0);
      if (*((double *)v11 + 172) == 0.0) {
        *((double *)v11 + 172) = VCDefaults_GetDoubleValueForKey(@"noVideoDisplayFailSafeTimeout", 5.0);
      }
      CFTypeRef v23 = (CFTypeRef)*((void *)v11 + 150);
      if (v23) {
        CFTypeRef v23 = CFRetain(v23);
      }
      *uint64_t v21 = v23;
      _VideoReceiver_UpdateMediaControlInfo((uint64_t)v11);
      *((_DWORD *)v11 + 10397) = *(_DWORD *)(a2 + 1212);
      if (a3) {
        CFTypeRef v24 = CFRetain(a3);
      }
      else {
        CFTypeRef v24 = 0;
      }
      *((void *)v11 + 5084) = v24;
      *((_DWORD *)v11 + 10362) = VCReporting_GetDynamicReportingModuleID();
      reportingInheritModuleSpecificInfoFromParent();
      *((void *)v11 + 182) = *(void *)(a2 + 1144);
      *((void *)v11 + 177) = *(void *)(a2 + 1104);
      *((void *)v11 + 178) = *(void *)(a2 + 1120);
      *(_OWORD *)(v11 + 1400) = *(_OWORD *)(a2 + 1088);
      *((void *)v11 + 179) = 0;
      *((_OWORD *)v11 + 90) = *(_OWORD *)(a2 + 1128);
      *(void *)(v113 + 76) = 0xFFFFFFFFLL;
      uint64_t v25 = (uint64_t *)(v113 + 76);
      *(void *)(v113 + 28) = 0xFFFFFFFFLL;
      *(void *)(v113 + 84) = 0xFFFFFFFFLL;
      *(void *)(v11 + 40828) = 0;
      *((_DWORD *)v11 + 10282) = 0;
      *((void *)v11 + 5145) = 0;
      *((_OWORD *)v11 + 2569) = 0u;
      *((_OWORD *)v11 + 2571) = 0u;
      v11[41168] = *(unsigned char *)(a2 + 1040);
      *((_DWORD *)v11 + 10322) = 0;
      v11[41292] = 0;
      *((_OWORD *)v11 + 2546) = 0u;
      *(_OWORD *)(v11 + 41080) = 0u;
      *((void *)v11 + 5137) = 0x7FEFFFFFFFFFFFFFLL;
      *((double *)v11 + 5098) = micro();
      *((void *)v11 + 5201) = 0x3FD0000000000000;
      v11[41689] = 1;
      *((_WORD *)v11 + 20758) = 0;
      v11[41456] = *(unsigned char *)(a2 + 1076);
      int v26 = 2 * *((unsigned __int16 *)v11 + 609);
      *((void *)v11 + 5199) = 0;
      *((double *)v11 + 5200) = (double)v26;
      v113[20] = 0;
      *((_DWORD *)v11 + 10413) = -1;
      *((void *)v11 + 5213) = 0;
      *((_DWORD *)v11 + 10293) = 0;
      v11[41712] = _os_feature_enabled_impl();
      *((void *)v11 + 5215) = 0x7FF8000000000000;
      CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMSimpleQueueCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2000, (CMSimpleQueueRef *)v11 + 5163);
      CMSimpleQueueCreate(v27, (int)*((double *)v11 + 5200), (CMSimpleQueueRef *)v11 + 5164);
      pthread_mutex_init((pthread_mutex_t *)(v11 + 41320), 0);
      int v28 = CMMemoryPoolCreate(0);
      *((void *)v11 + 5174) = v28;
      CFAllocatorRef Allocator = CMMemoryPoolGetAllocator(v28);
      *((void *)v11 + 5175) = Allocator;
      CFRetain(Allocator);
      v11[41520] = *(unsigned char *)(a2 + 1192);
      if (v111) {
        CFTypeRef v30 = CFRetain(v111);
      }
      else {
        CFTypeRef v30 = 0;
      }
      *((void *)v11 + 5177) = v30;
      *((void *)v11 + 5186) = 0x7FF8000000000000;
      *((void *)v11 + 5185) = 0x7FF8000000000000;
      *((void *)v11 + 5187) = 0x7FF8000000000000;
      if (a4) {
        *(_OWORD *)(v11 + 41256) = *a4;
      }
      v11[41176] = 0;
      v11[41192] = 0;
      *((void *)v11 + 5148) = 0;
      *((void *)v11 + 5150) = 0;
      *((void *)v11 + 5156) = 0;
      *((void *)v11 + 5152) = 0;
      double v31 = (const void *)*((void *)v11 + 5203);
      int32x2_t v32 = *(const void **)(a2 + 1224);
      *((void *)v11 + 5203) = v32;
      if (v32) {
        CFRetain(v32);
      }
      if (v31) {
        CFRelease(v31);
      }
      if (VRTraceIsInternalOSInstalled())
      {
        v11[41176] = CFPreferencesGetAppBooleanValue(@"enableReceiverPacketDump", @"com.apple.VideoConference", 0) != 0;
        v11[41192] = CFPreferencesGetAppBooleanValue(@"enableReceiverFrameDump", @"com.apple.VideoConference", 0) != 0;
        v11[41209] = CFPreferencesGetAppBooleanValue(@"enablePacketLogging", @"com.apple.VideoConference", 0) != 0;
        v11[41208] = VCDefaults_GetBoolValueForKey(@"enableLTRPLogging", 0);
        v11[41211] = CFPreferencesGetAppBooleanValue(@"enableReceiverRtpPacketDumpAsCsv", @"com.apple.VideoConference", 0) != 0;
        v11[41210] = VCDefaults_GetBoolValueForKey(@"enableNACKLogging", 0);
      }
      if (v11[41176])
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v33 = VRTraceErrorLogLevelToCSTR();
          int32x2_t v34 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v33;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "VideoReceiver_CreateHandle";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 4904;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v11;
            _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Found enableReceiverPacketDump YES. Log incoming video packets into AFRC folder", buf, 0x26u);
          }
        }
        memset(buf, 170, 12);
        __sprintf_chk(buf, 0, 0xCuLL, "%010u", *((_DWORD *)v11 + 262));
        int v35 = openLogDump(0, (uint64_t)buf, 1, (uint64_t)"in_pkt", (uint64_t)".txt", 0);
        *((void *)v11 + 5148) = v35;
        if (!v35 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoReceiver_CreateHandle_cold_13();
          }
        }
      }
      if (v11[41211])
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v36 = VRTraceErrorLogLevelToCSTR();
          uint64_t v37 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v36;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "VideoReceiver_CreateHandle";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 4914;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v11;
            _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Found enableReceiverRtpPacketDumpAsCsv YES. Log incoming video rtp packets into AFRC folder", buf, 0x26u);
          }
        }
        memset(buf, 170, 12);
        __sprintf_chk(buf, 0, 0xCuLL, "%010u", *((_DWORD *)v11 + 262));
        uint64_t v38 = openLogDump(0, (uint64_t)buf, 1, (uint64_t)"received_rtp_pkts", (uint64_t)".txt", 0);
        *((void *)v11 + 5152) = v38;
        if (v38)
        {
          fwrite("Video RTP Packet Dump File. Please modify the extension to .csv.\n\nInstructions:\nRTPMediaPacket header: One row per packet. Contains all the information relevant to the rtp header.\nRTPMediaPacket data: Several rows per packet. Carries the data dump.\nRTPMediaPacket extData: One row per packet. Dumps the extension data.\n\n", 0x140uLL, 1uLL, v38);
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoReceiver_CreateHandle_cold_12();
          }
        }
      }
      v11[41736] = 0;
      if (v11[41192])
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v41 = VRTraceErrorLogLevelToCSTR();
          uint64_t v42 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v41;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "VideoReceiver_CreateHandle";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 4927;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v11;
            _os_log_impl(&dword_1E1EA4000, v42, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Found enableReceiverFrameDump YES. Log incoming video frames into AFRC folder", buf, 0x26u);
          }
        }
        memset(buf, 170, 12);
        __sprintf_chk(buf, 0, 0xCuLL, "%010u", *((_DWORD *)v11 + 262));
        uint64_t v43 = openLogDump(0, (uint64_t)buf, 1, (uint64_t)"in_frame", (uint64_t)".txt", 0);
        *((void *)v11 + 5150) = v43;
        if (!v43 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoReceiver_CreateHandle_cold_11();
          }
        }
      }
      CStringPtr = CFStringGetCStringPtr(*((CFStringRef *)v11 + 154), 0x8000100u);
      int v45 = FourccToCStr(*((_DWORD *)v11 + 312));
      *((void *)v11 + 5210) = VRDump_OpenDumpFile(CStringPtr, v45, *((_DWORD *)v11 + 259), (char)v11, *(_DWORD *)v113);
      if (*(_DWORD *)v113 != 1) {
        VideoReceiver_DumpRecvCreate((uint64_t)v11, 0);
      }
      unsigned int v46 = *((_DWORD *)v11 + 265);
      if (v46 == 1)
      {
        *(void *)&long long v47 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v47 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&buf[224] = v47;
        *(_OWORD *)&buf[240] = v47;
        *(_OWORD *)&buf[192] = v47;
        *(_OWORD *)&buf[208] = v47;
        *(_OWORD *)&buf[160] = v47;
        *(_OWORD *)&buf[176] = v47;
        *(_OWORD *)&buf[128] = v47;
        *(_OWORD *)&buf[144] = v47;
        *(_OWORD *)&uint8_t buf[96] = v47;
        *(_OWORD *)&uint8_t buf[112] = v47;
        *(_OWORD *)&buf[64] = v47;
        *(_OWORD *)&buf[80] = v47;
        *(_OWORD *)&buf[32] = v47;
        *(_OWORD *)&buf[48] = v47;
        *(_OWORD *)CMTime buf = v47;
        *(_OWORD *)&buf[16] = v47;
        _VideoReceiverUtil_Generate2vuyName(buf, 0x100uLL);
        *((void *)v11 + 5155) = fopen(buf, "wb");
        unsigned int v46 = *((_DWORD *)v11 + 265);
      }
      if (v46 == 2) {
        VCDiskUtils_CreateDirectory();
      }
      if ((_VideoReceiver_CreateSummers((uint64_t *)v11) & 1) == 0)
      {
        VideoReceiverConfig_CleanupFeatureStrings(v11);
        if (*(_DWORD *)v11)
        {
          unint64_t v81 = 0;
          unsigned int v82 = (CFTypeRef **)(v11 + 5744);
          do
          {
            VCSFrameCryptorH264_Destroy(v82);
            ++v81;
            v82 += 540;
          }
          while (v81 < *(unsigned int *)v11);
        }
        goto LABEL_121;
      }
      if (v11[1181])
      {
        if (!v11[1077] && (int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v48 = VRTraceErrorLogLevelToCSTR();
          long long v49 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            *(void *)&uint8_t buf[4] = v48;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "VideoReceiver_CreateHandle";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 4960;
            _os_log_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Display link should be enabled for this configuration!", buf, 0x1Cu);
          }
        }
      }
      long long v121 = 0u;
      long long v122 = 0u;
      uint64_t v124 = 0;
      long long v123 = 0u;
      v119[0] = v11[41520];
      unsigned int v50 = *((_DWORD *)v11 + 259);
      v119[1] = v11[1182];
      v119[2] = v11[1188];
      v119[3] = v11[1181];
      *(void *)&long long v122 = *((void *)v11 + 5084);
      int v120 = *(_DWORD *)(v112 + 1020);
      LODWORD(v121) = v50;
      WORD4(v122) = *((_WORD *)v11 + 609);
      BYTE10(v122) = v11[1217];
      long long v123 = *((_OWORD *)v11 + 85);
      uint64_t v125 = *((void *)v11 + 172);
      uint64_t v17 = VCVideoPlayer_Create(v25, (uint64_t)v119);
      unint64_t v109 = (CFTypeRef *)(v11 + 41312);
      if ((v17 & 0x80000000) == 0)
      {
        VCVideoPlayer_RegisterForNoVideoDisplayedTimeoutCallbacks(*v25, (uint64_t)_VideoReceiver_NoVideoDisplayedTimeoutCallback, (uint64_t)v110);
        if (VCAllocatorFirstCome_Create(v27, (uint64_t)"VideoReceiverBlockBufferHeaderAllocator", (CFAllocatorRef *)v11 + 5188))
        {
          uint64_t v86 = (CFTypeRef *)(v11 + 41304);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VideoReceiver_CreateHandle_cold_10();
            }
          }
        }
        else if (VCAllocatorFirstCome_Create(v27, (uint64_t)"VideoReceiverNumberPropertyAllocator", (CFAllocatorRef *)v11 + 5191))
        {
          uint64_t v86 = (CFTypeRef *)(v11 + 41304);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VideoReceiver_CreateHandle_cold_9();
            }
          }
        }
        else
        {
          if (!VCAllocatorFirstCome_Create(v27, (uint64_t)"VideoReceiverDecodedFrameAllocator", (CFAllocatorRef *)v11 + 5178))
          {
            if (VCAllocatorFirstCome_Create(v27, (uint64_t)"VideoReceiverFormatDescriptionAllocator", (CFAllocatorRef *)v11 + 5179))
            {
              uint64_t v86 = (CFTypeRef *)(v11 + 41304);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VideoReceiver_CreateHandle_cold_7();
                }
              }
            }
            else if (VCAllocatorFirstCome_Create(v27, (uint64_t)"VideoReceiverSampleBufferAllocator", (CFAllocatorRef *)v11 + 5180))
            {
              uint64_t v86 = (CFTypeRef *)(v11 + 41304);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VideoReceiver_CreateHandle_cold_6();
                }
              }
            }
            else
            {
              uint64_t Handle = CreateHandle();
              if (Handle != 0xFFFFFFFFLL)
              {
                uint64_t v52 = Handle;
                pthread_mutex_init((pthread_mutex_t *)(v11 + 40472), 0);
                pthread_mutex_init((pthread_mutex_t *)(v11 + 40536), 0);
                pthread_mutex_init((pthread_mutex_t *)(v11 + 40600), 0);
                unint64_t v53 = *(unsigned int *)v11;
                if (v53)
                {
                  unint64_t v54 = 0;
                  char v55 = (uint64_t *)(v11 + 1600);
                  uint64_t v56 = v11 + 8;
                  do
                  {
                    long long v57 = v56[5];
                    long long v58 = v56[6];
                    long long v59 = v56[3];
                    *((_OWORD *)v55 - 4) = v56[4];
                    long long v60 = v56[1];
                    long long v61 = v56[2];
                    *((_OWORD *)v55 - 8) = *v56;
                    *((_OWORD *)v55 - 7) = v60;
                    *((_OWORD *)v55 - 3) = v57;
                    *((_OWORD *)v55 - 2) = v58;
                    *((_OWORD *)v55 - 6) = v61;
                    *((_OWORD *)v55 - 5) = v59;
                    *((unsigned char *)v55 - 60) = v54;
                    *char v55 = v52;
                    ++v54;
                    v55 += 540;
                    v56 += 7;
                  }
                  while (v54 < v53);
                }
                *(void *)(v113 + 4) = v11 + 1472;
                if ((int)VRTraceGetErrorLogLevelForModule() > 6)
                {
                  uint64_t v62 = VRTraceErrorLogLevelToCSTR();
                  __int16 v63 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    unsigned int v64 = *((_DWORD *)v11 + 259);
                    int v65 = v11[1180];
                    int v66 = v11[1181];
                    *(_DWORD *)CMTime buf = 136317186;
                    *(void *)&uint8_t buf[4] = v62;
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "VideoReceiver_CreateHandle";
                    *(_WORD *)&unsigned char buf[22] = 1024;
                    *(_DWORD *)&unsigned char buf[24] = 5018;
                    *(_WORD *)&buf[28] = 2048;
                    *(void *)&buf[30] = v52;
                    *(_WORD *)&buf[38] = 2048;
                    *(void *)&uint8_t buf[40] = v11;
                    *(_WORD *)&buf[48] = 1024;
                    *(_DWORD *)&buf[50] = v64;
                    *(_WORD *)&buf[54] = 1024;
                    *(_DWORD *)&buf[56] = v65;
                    *(_WORD *)&buf[60] = 1024;
                    *(_DWORD *)&buf[62] = v66;
                    *(_WORD *)&buf[66] = 2048;
                    *(void *)&buf[68] = v113 + 76;
                    _os_log_impl(&dword_1E1EA4000, v63, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Created VideoReceiver handle=%p for videoReceiver=%p, videoReceiver->config.videoTSRate=%d, videoReceiver->config.enableJitterBufferInReceiver=%d, videoReceiver->config.enableJitterBufferInPlayer=%d, videoPlayerHandlePtr=%p", buf, 0x4Cu);
                  }
                }
                if (v11[1180])
                {
                  uint64_t v67 = *((void *)v11 + 5203);
                  *(void *)&buf[224] = 0xAAAAAAAAAAAAAAAALL;
                  memset(&buf[32], 170, 192);
                  *(_DWORD *)&buf[200] = *((_DWORD *)v11 + 255);
                  *(void *)&buf[208] = *((void *)v11 + 5084);
                  unsigned int v68 = *((_DWORD *)v11 + 259);
                  *(_DWORD *)&buf[216] = *((_DWORD *)v11 + 294);
                  *(_DWORD *)&buf[220] = v68;
                  buf[224] = 1;
                  memset(buf, 0, 200);
                  buf[204] = 0;
                  *(void *)&buf[232] = v67;
                  *(_DWORD *)&buf[228] = *((_DWORD *)v11 + 312);
                  *(void *)&buf[240] = *((void *)v11 + 173);
                  _VCVideoReceiver_InitDumpFileName((uint64_t)v11, buf);
                  __int16 v69 = VCVideoJitterBuffer_Create((uint64_t)buf);
                  *((void *)v11 + 5192) = v69;
                  double JitterBufferMaxQueueSize = VCVideoJitterBuffer_GetJitterBufferMaxQueueSize((uint64_t)v69);
                  *((double *)v11 + 5202) = VCDefaults_GetDoubleValueForKey(@"framesForDecodeQueueHighWatermarkSeconds", JitterBufferMaxQueueSize + JitterBufferMaxQueueSize);
                }
                *((_DWORD *)v11 + 367) = -1;
                if (v11[1164])
                {
                  unsigned int v71 = VTP_Socket(2, 1, 6);
                  *((_DWORD *)v11 + 367) = v71;
                  if (v71 == -1)
                  {
                    uint64_t v86 = (CFTypeRef *)(v11 + 41304);
                    uint64_t v17 = *__error() | 0xC01F0000;
                    goto LABEL_155;
                  }
                }
                uint64_t v72 = *((void *)v11 + 128);
                uint64_t v115 = *((void *)v11 + 5084);
                uint64_t v116 = 0;
                uint64_t v117 = _VideoReceiver_DecoderCallback;
                uint64_t v118 = v52;
                int v73 = v11[1184];
                v114[0] = v72;
                v114[1] = v73;
                uint64_t v116 = v73 ^ 1u;
                BYTE1(v116) = v73;
                VCVideoDecoder_NewVideoDecoder(v113 + 84, v114);
                *((_DWORD *)v11 + 10363) = reportingDefaultRealtimePeriod();
                *(void *)CMTime buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 0x40000000;
                *(void *)&buf[16] = ___VideoReceiver_ReportingRegisterPeriodicTask_block_invoke;
                *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_426;
                *(void *)&buf[32] = v52;
                reportingRegisterPeriodicTask();
                if (*((_DWORD *)v11 + 261))
                {
                  *(void *)&buf[192] = 0xAAAAAAAAAAAAAAAALL;
                  *(void *)&long long v74 = 0xAAAAAAAAAAAAAAAALL;
                  *((void *)&v74 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  *(_OWORD *)&buf[160] = v74;
                  *(_OWORD *)&buf[176] = v74;
                  *(_OWORD *)&buf[128] = v74;
                  *(_OWORD *)&buf[144] = v74;
                  *(_OWORD *)&uint8_t buf[96] = v74;
                  *(_OWORD *)&uint8_t buf[112] = v74;
                  *(_OWORD *)&buf[64] = v74;
                  *(_OWORD *)&buf[80] = v74;
                  *(_OWORD *)&buf[32] = v74;
                  *(_OWORD *)&buf[48] = v74;
                  *(_OWORD *)CMTime buf = v74;
                  *(_OWORD *)&buf[16] = v74;
                  _VCVideoReceiver_InitDumpFileName((uint64_t)v11, buf);
                  *((void *)v11 + 5156) = VideoPacketDump_OpenRTPLog((uint64_t)buf);
                }
                CustomRootQueue = VCDispatchQueue_GetCustomRootQueue(56);
                dispatch_queue_t v76 = dispatch_queue_create_with_target_V2("com.apple.AVConference.VideoReceiver.rtcpSendQueue", 0, CustomRootQueue);
                *((void *)v11 + 5094) = v76;
                if (v76)
                {
                  uint64_t v77 = VCMemoryPool_Create(0x800uLL);
                  *((void *)v11 + 5176) = v77;
                  if (v77)
                  {
                    if (!v11[1260]) {
                      goto LABEL_113;
                    }
                    long long v127 = 0u;
                    memset(&buf[32], 0, 272);
                    *(void *)CMTime buf = _VideoReceiver_SendNACK;
                    *(void *)&buf[8] = v11;
                    *(_OWORD *)&buf[16] = 0uLL;
                    buf[32] = v11[41210];
                    long long v78 = *((_OWORD *)v11 + 82);
                    *(_OWORD *)&buf[268] = *((_OWORD *)v11 + 81);
                    *(_OWORD *)&buf[284] = v78;
                    *(_OWORD *)&buf[236] = *((_OWORD *)v11 + 79);
                    *(_OWORD *)&buf[252] = *((_OWORD *)v11 + 80);
                    *(_DWORD *)&buf[300] = *((_DWORD *)v11 + 259);
                    *(void *)&long long v127 = *((void *)v11 + 154);
                    DWORD2(v127) = *((_DWORD *)v11 + 312);
                    _VCVideoReceiver_InitDumpFileName((uint64_t)v11, &buf[33]);
                    if (!VCNACKGenerator_Create((uint64_t)v27, (uint64_t *)v11 + 5205, (uint64_t)buf))
                    {
                      _VideoReceiver_ReportRTXConfiguration((unsigned __int8 *)v11);
LABEL_113:
                      _VideoReceiver_RegisterStatistics((uint64_t)v11);
                      CFTypeRef v79 = *(CFTypeRef *)(v112 + 1336);
                      if (v79) {
                        CFTypeRef v79 = CFRetain(v79);
                      }
                      *((void *)v11 + 5207) = v79;
                      if (VCOverlayManager_isOverlayEnabled())
                      {
                        uint64_t OverlaySourceForToken = VCOverlayManager_createOverlaySourceForToken(*((void *)v11 + 169), 1u);
                        *((void *)v11 + 5209) = OverlaySourceForToken;
                        if (!OverlaySourceForToken) {
                          goto LABEL_124;
                        }
                      }
                      else
                      {
                        uint64_t OverlaySourceForToken = *((void *)v11 + 5209);
                        if (!OverlaySourceForToken)
                        {
LABEL_124:
                          uint64_t v17 = 0;
                          *((double *)v11 + 5216) = micro();
                          uint64_t *v110 = v52;
                          return v17;
                        }
                      }
                      *(void *)(*(void *)(OverlaySourceForToken + 40) + 16) = *((void *)v11 + 154);
                      *(void *)(*(void *)(*((void *)v11 + 5209) + 48) + 16) = *((void *)v11 + 154);
                      *(void *)(*(void *)(*((void *)v11 + 5209) + 56) + 16) = *((void *)v11 + 154);
                      goto LABEL_124;
                    }
                    uint64_t v86 = (CFTypeRef *)(v11 + 41304);
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        VideoReceiver_CreateHandle_cold_5();
                      }
                    }
                    goto LABEL_155;
                  }
                  uint64_t v86 = (CFTypeRef *)(v11 + 41304);
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VideoReceiver_CreateHandle_cold_4();
                    }
                  }
                }
                else
                {
                  uint64_t v86 = (CFTypeRef *)(v11 + 41304);
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VideoReceiver_CreateHandle_cold_3();
                    }
                  }
                }
                goto LABEL_144;
              }
              uint64_t v86 = (CFTypeRef *)(v11 + 41304);
              uint64_t v17 = 2149515269;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  VideoReceiver_CreateHandle_cold_2();
                  uint64_t v17 = 2149515269;
                }
              }
            }
LABEL_154:
            uint64_t v52 = 0xFFFFFFFFLL;
            goto LABEL_155;
          }
          uint64_t v86 = (CFTypeRef *)(v11 + 41304);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VideoReceiver_CreateHandle_cold_8();
            }
          }
        }
        uint64_t v52 = 0xFFFFFFFFLL;
LABEL_144:
        uint64_t v17 = 2149515267;
LABEL_155:
        uint64_t v87 = *((void *)v11 + 5156);
        if (v87) {
          VideoPacketDump_CloseRTPLog(v87);
        }
        if (v11[1164])
        {
          int v88 = *((_DWORD *)v11 + 367);
          if (v88 != -1) {
            VTP_Close(v88);
          }
        }
        CFDictionaryRef v89 = (void *)*((void *)v11 + 5192);
        if (v89) {
          VCVideoJitterBuffer_Finalize(v89);
        }
        unint64_t v90 = *(unsigned int *)v11;
        if (v90)
        {
          unint64_t v91 = 0;
          uint64_t v92 = 1584;
          do
          {
            uint64_t v93 = *(void *)&v11[v92];
            if (v93)
            {
              VideoPacketBuffer_Destroy(v93);
              *(void *)&v11[v92] = 0;
              unint64_t v90 = *(unsigned int *)v11;
            }
            ++v91;
            v92 += 4320;
          }
          while (v91 < v90);
          if (v90)
          {
            unint64_t v94 = 0;
            CFNumberRef v95 = (CFTypeRef **)(v11 + 5744);
            do
            {
              VCSFrameCryptorH264_Destroy(v95);
              ++v94;
              v95 += 540;
            }
            while (v94 < *(unsigned int *)v11);
          }
        }
        pthread_mutex_destroy((pthread_mutex_t *)(v11 + 40600));
        pthread_mutex_destroy((pthread_mutex_t *)(v11 + 40536));
        pthread_mutex_destroy((pthread_mutex_t *)(v11 + 40472));
        if (v52 != 0xFFFFFFFFLL) {
          VideoReceiver_CloseHandle();
        }
        uint64_t v96 = (const void *)*((void *)v11 + 5178);
        if (v96)
        {
          CFRelease(v96);
          *((void *)v11 + 5178) = 0;
        }
        BOOL v97 = (const void *)*((void *)v11 + 5191);
        if (v97)
        {
          CFRelease(v97);
          *((void *)v11 + 5191) = 0;
        }
        BOOL v98 = (const void *)*((void *)v11 + 5188);
        if (v98)
        {
          CFRelease(v98);
          *((void *)v11 + 5188) = 0;
        }
        VCVideoPlayer_Destroy(v25);
        _VideoReceiver_CloseSummers((uint64_t)v11);
        uint64_t v99 = (FILE *)*((void *)v11 + 5155);
        if (v99) {
          fclose(v99);
        }
        CFStringRef v100 = (FILE *)*((void *)v11 + 5150);
        if (v100) {
          fclose(v100);
        }
        int v101 = (FILE *)*((void *)v11 + 5148);
        if (v101) {
          fclose(v101);
        }
        uint64_t v102 = (FILE *)*((void *)v11 + 5152);
        if (v102) {
          fclose(v102);
        }
        size_t v103 = *((void *)v11 + 5094);
        if (v103) {
          dispatch_release(v103);
        }
        VideoReceiverConfig_CleanupFeatureStrings(v11);
        uint64_t v104 = (const void *)*((void *)v11 + 5177);
        if (v104)
        {
          CFRelease(v104);
          *((void *)v11 + 5177) = 0;
        }
        int v105 = (const void *)*((void *)v11 + 5175);
        if (v105)
        {
          CFRelease(v105);
          *((void *)v11 + 5175) = 0;
        }
        uint64_t v106 = (OpaqueCMMemoryPool *)*((void *)v11 + 5174);
        if (v106)
        {
          CMMemoryPoolInvalidate(v106);
          int v107 = (const void *)*((void *)v11 + 5174);
          if (v107)
          {
            CFRelease(v107);
            *((void *)v11 + 5174) = 0;
          }
        }
        if (*v109)
        {
          CFRelease(*v109);
          *unint64_t v109 = 0;
        }
        pthread_mutex_destroy((pthread_mutex_t *)(v11 + 41320));
        if (*v86)
        {
          CFRelease(*v86);
          *uint64_t v86 = 0;
        }
        reportingCacheModuleSpecificInfo();
        int v108 = (const void *)*((void *)v11 + 5084);
        if (v108)
        {
          CFRelease(v108);
          *((void *)v11 + 5084) = 0;
        }
        if (*v21)
        {
          CFRelease(*v21);
          *uint64_t v21 = 0;
        }
        VCMemoryPool_Destroy(*((OSQueueHead **)v11 + 5176));
LABEL_121:
        free(v11);
        return v17;
      }
      uint64_t v86 = (CFTypeRef *)(v11 + 41304);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoReceiver_CreateHandle_cold_1();
        }
      }
      goto LABEL_154;
    }
    if (*(_DWORD *)v11)
    {
      unint64_t v83 = 0;
      long long v84 = (CFTypeRef **)(v11 + 5744);
      do
      {
        VCSFrameCryptorH264_Destroy(v84);
        ++v83;
        v84 += 540;
      }
      while (v83 < *(unsigned int *)v11);
    }
    free(v11);
    return 2149515265;
  }
  return 2149515267;
}

void VideoReceiver_DumpRecvCreate(uint64_t a1, int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 1068))
  {
    uint64_t v4 = (FILE **)(a1 + 41232);
    uint64_t v5 = a1 + 40372;
    CFNumberRef v6 = *(FILE **)(a1 + 41232);
    if (v6) {
      fclose(v6);
    }
    *(void *)uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = 0;
    *(void *)int v28 = 0;
    if (*(_DWORD *)v5 == 1)
    {
      __sprintf_chk(v29, 0, 0x14uLL, "%llx_", a1);
      __sprintf_chk(v28, 0, 8uLL, "_%u", a2);
      *(_WORD *)(v5 + 852) = a2;
    }
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v26 = v7;
    long long v27 = v7;
    *(_OWORD *)__filename = v7;
    long long v25 = v7;
    _VideoReceiverUtil_GenerateBitStreamDumpName(__filename, 0x40uLL, v29, v28);
    VCDiskUtils_CreateDirectory();
    CFNumberRef v8 = fopen(__filename, "wb");
    *uint64_t v4 = v8;
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v8)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v10 = VRTraceErrorLogLevelToCSTR();
        CFNumberRef v11 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v15 = v10;
          __int16 v16 = 2080;
          uint64_t v17 = "VideoReceiver_DumpRecvCreate";
          __int16 v18 = 1024;
          int v19 = 727;
          __int16 v20 = 2048;
          uint64_t v21 = a1;
          __int16 v22 = 2080;
          CFTypeRef v23 = __filename;
          _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Created new video dump file: %s", buf, 0x30u);
        }
      }
    }
    else if (ErrorLogLevelForModule >= 3)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      CFNumberRef v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v15 = v12;
        __int16 v16 = 2080;
        uint64_t v17 = "VideoReceiver_DumpRecvCreate";
        __int16 v18 = 1024;
        int v19 = 725;
        __int16 v20 = 2048;
        uint64_t v21 = a1;
        __int16 v22 = 2080;
        CFTypeRef v23 = __filename;
        _os_log_error_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] failed to open %s", buf, 0x30u);
      }
    }
  }
}

void _VideoReceiver_NoVideoDisplayedTimeoutCallback(uint64_t a1, double a2)
{
  if (a1)
  {
    uint64_t v3 = CheckInHandleDebug();
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = v3 + 40376;
      double v6 = micro();
      double v7 = *(double *)(v4 + 1376);
      uint64_t v8 = *(void *)v5;
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 41704));
      if (*(unsigned char *)(v5 + 1313))
      {
        BOOL v9 = v7 >= a2 || v6 - *(double *)(v5 + 1320) <= v7;
        if (!v9 && v6 - *(double *)(v8 + 4312) >= v7)
        {
          _VideoReceiver_SendFIR(v4, v8, 0, 28, v6);
          _VideoReceiver_ResetExpectedDecodingOrder(v4);
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 41704));
      CheckOutHandleDebug();
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoReceiver_NoVideoDisplayedTimeoutCallback_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoReceiver_NoVideoDisplayedTimeoutCallback_cold_1();
    }
  }
}

uint64_t _VCVideoReceiver_InitDumpFileName(uint64_t a1, char *a2)
{
  CFStringRef v4 = *(const __CFString **)(a1 + 1240);
  if (v4)
  {
    CFStringGetCStringPtr(v4, 0x8000100u);
    CFStringGetCStringPtr(*(CFStringRef *)(a1 + 1232), 0x8000100u);
    FourccToCStr(*(_DWORD *)(a1 + 1248));
    return snprintf(a2, 0xC8uLL, "session_%s-participant_%s-groupid_%s");
  }
  else if (*(_DWORD *)(a1 + 1048))
  {
    return snprintf(a2, 0xC8uLL, "%010u");
  }
  else
  {
    return snprintf(a2, 0xC8uLL, "streamtoken_%ld");
  }
}

void _VideoReceiver_SendNACK(unsigned int *a1, int a2, int a3, int a4, double a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return;
  }
  int v10 = *((unsigned __int8 *)a1 + 41210);
  if (*((unsigned char *)a1 + 41210)) {
    int v11 = 7;
  }
  else {
    int v11 = 8;
  }
  if (v11 <= (int)VRTraceGetErrorLogLevelForModule())
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    if (v10)
    {
      CFNumberRef v13 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
    CFNumberRef v13 = *MEMORY[0x1E4F47A50];
    unint64_t v14 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v28 = v12;
        __int16 v29 = 2080;
        uint64_t v30 = "_VideoReceiver_SendNACK";
        __int16 v31 = 1024;
        int v32 = 2260;
        __int16 v33 = 2048;
        int32x2_t v34 = a1;
        __int16 v35 = 1024;
        int v36 = a2;
        __int16 v37 = 1024;
        int v38 = a3;
        __int16 v39 = 1024;
        int v40 = a4;
        _os_log_debug_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Sending NACK for ssrc=%u with highestSeqNum=%u bitMask_hex=%x", buf, 0x38u);
      }
      goto LABEL_14;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
LABEL_11:
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v28 = v12;
      __int16 v29 = 2080;
      uint64_t v30 = "_VideoReceiver_SendNACK";
      __int16 v31 = 1024;
      int v32 = 2260;
      __int16 v33 = 2048;
      int32x2_t v34 = a1;
      __int16 v35 = 1024;
      int v36 = a2;
      __int16 v37 = 1024;
      int v38 = a3;
      __int16 v39 = 1024;
      int v40 = a4;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Sending NACK for ssrc=%u with highestSeqNum=%u bitMask_hex=%x", buf, 0x38u);
    }
  }
LABEL_14:
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  LODWORD(v17[0]) = 2048;
  HIWORD(v18) = a3;
  WORD6(v18) = a4;
  LOBYTE(v25) = 1;
  if (*a1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      if (a1[v15 + 402] == a2) {
        uint64_t v16 = (uint64_t)&a1[v15 + 368];
      }
      v15 += 1080;
    }
    while (1080 * *a1 != v15);
    if (v16) {
      _VideoReceiver_SendRTCP((uint64_t)a1, v16, v17, 0, a5);
    }
  }
}

uint64_t VideoReceiver_CloseHandle()
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149515266;
  }
  uint64_t v1 = (unsigned int *)v0;
  uint64_t v2 = v0 + 40448;
  _VideoReceiver_UnregisterStatistics(v0);
  reportingUnregisterPeriodicTask();
  v1[366] = 1;
  uint64_t v3 = *(void *)(v2 + 1144);
  if (v3) {
    VCMediaStreamSynchronizer_setSourcePlayoutTimeUpdatedHandler(v3, 0);
  }
  CFStringRef v4 = (os_log_t *)MEMORY[0x1E4F47A50];
  if (*((unsigned char *)v1 + 1164))
  {
    int v5 = v1[367];
    if (v5 != -1) {
      VTP_Close(v5);
    }
    if (*(void *)(v2 + 16))
    {
      *(void *)CMTime buf = 0xAAAAAAAAAAAAAAAALL;
      FigThreadJoin();
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *v4;
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_UnregisterTransportCallbacks";
        *(_WORD *)&unsigned char buf[22] = 1024;
        int v68 = 1420;
        *(_WORD *)__int16 v69 = 2048;
        *(void *)&v69[2] = v1;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] unregister packet callback", buf, 0x26u);
      }
    }
    if (*v1)
    {
      unint64_t v9 = 0;
      int v10 = (unsigned __int16 *)(v1 + 368);
      do
      {
        uint64_t v11 = *(void *)(v2 + 1208);
        if (v11)
        {
          VCCannedVideoPacketSource_UnregisterForCannedReplay(v11, v10);
        }
        else
        {
          RTPUnregisterPacketCallback();
          RTCPUnregisterPacketCallback();
        }
        ++v9;
        v10 += 2160;
      }
      while (v9 < *v1);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    CFNumberRef v13 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VideoReceiver_CloseHandle";
      *(_WORD *)&unsigned char buf[22] = 1024;
      int v68 = 5247;
      *(_WORD *)__int16 v69 = 2048;
      *(void *)&v69[2] = v1;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Calling CheckOutHandle with BIT_CLOSE for VideoReceiver=%p", buf, 0x26u);
    }
  }
  double v14 = 0.0;
  if (VRTraceIsInternalOSInstalled()) {
    double v14 = micro();
  }
  uint64_t v15 = CheckOutHandleDebug();
  LogProfileTimeOverLimit_1(v14, v15, v16, v17, v18, v19, v20, v21, v22, (char)"VideoReceiver_CloseHandle");
  long long v23 = *(const void **)(v2 + 1208);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(v2 + 1208) = 0;
  }
  long long v24 = *(const void **)(v2 + 976);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(v2 + 976) = 0;
  }
  long long v25 = *(const void **)(v2 + 1080);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(v2 + 1080) = 0;
  }
  uint64_t v26 = *(const void **)(v2 + 1056);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(v2 + 1056) = 0;
  }
  long long v27 = *(const void **)(v2 + 984);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(v2 + 984) = 0;
  }
  uint64_t v28 = *(const void **)(v2 + 992);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(v2 + 992) = 0;
  }
  __int16 v29 = *(const void **)(v2 + 1176);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(v2 + 1176) = 0;
  }
  MEMORY[0x1E4E56550](v1 + 358);
  _VideoReceiver_CloseSummers((uint64_t)v1);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v30 = VRTraceErrorLogLevelToCSTR();
    __int16 v31 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VideoReceiver_CloseHandle";
      *(_WORD *)&unsigned char buf[22] = 1024;
      int v68 = 5263;
      *(_WORD *)__int16 v69 = 2048;
      *(void *)&v69[2] = v1;
      _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d About to Destroy VCVideoPlayer for VideoReceiver=%p", buf, 0x26u);
    }
  }
  VCVideoPlayer_UnregisterForNoVideoDisplayedTimeoutCallbacks();
  VCVideoPlayer_Destroy((void *)v2);
  VCVideoDecoder_ReleaseVideoDecoder(v1[256]);
  uint64_t v32 = *(void *)(v2 + 968);
  if (v32)
  {
    *(void *)&buf[11] = 0;
    *(void *)&uint8_t buf[4] = 0;
    *(_OWORD *)&v69[1] = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    memset(v78, 0, sizeof(v78));
    uint64_t v33 = *((void *)v1 + 128);
    *(_DWORD *)CMTime buf = 4;
    buf[19] = 1;
    *(_DWORD *)&buf[20] = 0;
    int v68 = v33;
    v69[0] = 1;
    VCRateControlSetStatistics(v32, buf);
  }
  int32x2_t v34 = *(void **)(v2 + 1088);
  if (v34)
  {
    VCVideoJitterBuffer_Finalize(v34);
    *(void *)(v2 + 1088) = 0;
  }
  unint64_t v35 = *v1;
  if (v35)
  {
    unint64_t v36 = 0;
    __int16 v37 = (uint64_t *)(v1 + 396);
    do
    {
      if (*v37)
      {
        if (!*((unsigned char *)v37 - 42) || *((unsigned __int16 *)v37 - 54) == *((unsigned __int16 *)v37 - 56))
        {
          VideoPacketBuffer_Destroy(*v37);
          unint64_t v35 = *v1;
        }
        *__int16 v37 = 0;
      }
      ++v36;
      v37 += 540;
    }
    while (v36 < v35);
    if (v35)
    {
      unint64_t v38 = 0;
      __int16 v39 = (CFTypeRef **)(v1 + 1436);
      do
      {
        VCSFrameCryptorH264_Destroy(v39);
        ++v38;
        v39 += 540;
      }
      while (v38 < *v1);
    }
  }
  int v40 = *(const void **)(v2 + 1192);
  if (v40)
  {
    CFRelease(v40);
    *(void *)(v2 + 1192) = 0;
  }
  _VideoReceiver_DrainAndReleaseQueue(*(opaqueCMSimpleQueue **)(v2 + 856), 1);
  _VideoReceiver_DrainAndReleaseQueue(*(opaqueCMSimpleQueue **)(v2 + 864), 0);
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 10330));
  uint64_t v41 = *(const void **)(v2 + 952);
  if (v41)
  {
    CFRelease(v41);
    *(void *)(v2 + 952) = 0;
  }
  uint64_t v42 = *(OpaqueCMMemoryPool **)(v2 + 944);
  if (v42)
  {
    CMMemoryPoolInvalidate(v42);
    uint64_t v43 = *(const void **)(v2 + 944);
    if (v43)
    {
      CFRelease(v43);
      *(void *)(v2 + 944) = 0;
    }
  }
  uint64_t v44 = *(__CVPixelBufferPool **)(v2 + 416);
  if (v44) {
    CVPixelBufferPoolRelease(v44);
  }
  int v45 = *(const void **)(v2 + 488);
  if (v45) {
    CFRelease(v45);
  }
  unsigned int v46 = *(const void **)(v2 + 968);
  if (v46) {
    CFRelease(v46);
  }
  long long v47 = *(const void **)(v2 + 424);
  if (v47) {
    CFRelease(v47);
  }
  uint64_t v48 = *(const void **)(v2 + 432);
  if (v48) {
    CFRelease(v48);
  }
  long long v49 = *(const void **)(v2 + 480);
  if (v49) {
    CFRelease(v49);
  }
  if (*(void *)(v2 + 456))
  {
    uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject();
    if (FigBaseObject)
    {
      uint64_t v51 = FigBaseObject;
      uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v53 = v52 ? v52 : 0;
      unint64_t v54 = *(void (**)(uint64_t))(v53 + 24);
      if (v54) {
        v54(v51);
      }
    }
    CFRelease(*(CFTypeRef *)(v2 + 456));
  }
  if (*(void *)(v2 + 440))
  {
    FigFileForkClose();
    *(void *)(v2 + 440) = 0;
    int v55 = *(_DWORD *)(v2 + 472);
    if (v55 >= 1) {
      close(v55);
    }
  }
  uint64_t v56 = *(const void **)(v2 + 448);
  if (v56) {
    CFRelease(v56);
  }
  long long v57 = (const void *)*((void *)v1 + 154);
  if (v57)
  {
    CFRelease(v57);
    *((void *)v1 + 154) = 0;
  }
  long long v58 = (const void *)*((void *)v1 + 155);
  if (v58)
  {
    CFRelease(v58);
    *((void *)v1 + 155) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 10118));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 10134));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 10150));
  long long v59 = *(FILE **)(v2 + 736);
  if (v59) {
    fclose(v59);
  }
  long long v60 = *(FILE **)(v2 + 752);
  if (v60) {
    fclose(v60);
  }
  if (v1[267])
  {
    long long v61 = *(FILE **)(v2 + 784);
    if (v61) {
      fclose(v61);
    }
  }
  uint64_t v62 = *(FILE **)(v2 + 768);
  if (v62) {
    fclose(v62);
  }
  VideoReceiverConfig_CleanupFeatureStrings(v1);
  __int16 v63 = *(const void **)(v2 + 216);
  if (v63) {
    CFRelease(v63);
  }
  unsigned int v64 = *(FILE **)(v2 + 792);
  if (v64) {
    fclose(v64);
  }
  int v65 = *(NSObject **)(v2 + 304);
  if (v65) {
    dispatch_release(v65);
  }
  VCMemoryPool_Destroy(*(OSQueueHead **)(v2 + 960));
  VideoPacketDump_CloseRTPLog(*(void *)(v2 + 800));
  reportingCacheModuleSpecificInfo();
  VRDump_CloseDumpFile((uint64_t *)v1 + 5210);
  int v66 = *(const void **)(v2 + 224);
  if (v66) {
    CFRelease(v66);
  }
  if (*(void *)(v2 + 1224))
  {
    VCOverlayManager_releaseOverlaySourceWithToken(*((void *)v1 + 169), 1u);
    CFRelease(*(CFTypeRef *)(v2 + 1224));
  }
  free(v1);
  return 0;
}

void LogProfileTimeOverLimit_1(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (VRTraceIsInternalOSInstalled())
  {
    double v11 = micro() - a1;
    if (v11 > 4.0)
    {
      *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v39 = v12;
      long long v40 = v12;
      long long v37 = v12;
      long long v38 = v12;
      long long v35 = v12;
      long long v36 = v12;
      long long v33 = v12;
      long long v34 = v12;
      long long v31 = v12;
      long long v32 = v12;
      long long v30 = v12;
      long long v28 = v12;
      long long v29 = v12;
      long long v26 = v12;
      long long v27 = v12;
      *(_OWORD *)__str = v12;
      vsnprintf(__str, 0x100uLL, "%s: CheckOutHandle with BIT_CLOSE for VideoReceiver=%p", &a10);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        double v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v16 = v13;
          __int16 v17 = 2080;
          uint64_t v18 = "_LogProfileTimeLimitHelper";
          __int16 v19 = 1024;
          int v20 = 36;
          __int16 v21 = 2080;
          uint64_t v22 = __str;
          __int16 v23 = 2048;
          double v24 = v11;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

void _VideoReceiver_DrainAndReleaseQueue(opaqueCMSimpleQueue *a1, int a2)
{
  v4[1] = *(const __CFAllocator ***)MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CMSimpleQueueGetCount(a1) >= 1)
    {
      do
      {
        v4[0] = (const __CFAllocator **)0xAAAAAAAAAAAAAAAALL;
        v4[0] = (const __CFAllocator **)CMSimpleQueueDequeue(a1);
        if (a2) {
          VCVideoReceiverSampleBuffer_Destroy(v4);
        }
        else {
          VCVideoReceiverDecodedFrame_Destroy(v4);
        }
      }
      while (CMSimpleQueueGetCount(a1) > 0);
    }
    CFRelease(a1);
  }
}

uint64_t VideoReceiver_DisplayLinkTick(double a1, double a2, double a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 2149515266;
  uint64_t v7 = CheckInHandleDebug();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = v7 + 40448;
    uint64_t v10 = VCVideoPlayer_DisplayLinkTick(a1, a2, a3);
    if (*(unsigned char *)(v9 + 1072)
      && (VCVideoPlayer_GetPlayoutInfo(*(void *)v9, (unsigned int *)(v8 + 40704), (uint64_t *)(v8 + 40728)) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoReceiver_DisplayLinkTick_cold_1();
        }
      }
    }
    else
    {
      CMTimeMakeWithSeconds(&v12, a3, 1000000000);
      CMTime time = v12;
      CMTimeGetSeconds(&time);
      kdebug_trace();
      uint64_t v6 = v10;
    }
    CheckOutHandleDebug();
  }
  return v6;
}

uint64_t _VideoReceiver_CallAlarms(uint64_t a1, int *a2, double a3)
{
  double v3 = a3;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 40448;
  int v5 = *a2;
  LODWORD(a3) = a2[1];
  double v6 = (double)*a2 + (double)*(unint64_t *)&a3 * 4294967300.0;
  double v7 = (double)*(int *)(a1 + 1032);
  if (!*(unsigned char *)(a1 + 1077))
  {
    if (*(unsigned char *)(a1 + 1192))
    {
      if ((VCVideoPlayer_GetPlayoutInfo(*(void *)v4, (unsigned int *)(a1 + 40704), (uint64_t *)(a1 + 40728)) & 0x80000000) != 0
        && (int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoReceiver_CallAlarms_cold_1();
        }
      }
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 41592);
      if (v14)
      {
        int v19 = 0;
        if (VCMediaStreamSynchronizer_destRTPTimestampFromSourceRTPTimestamp(v14, v5, (uint64_t)&v19))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v15 = VRTraceErrorLogLevelToCSTR();
            uint64_t v16 = *MEMORY[0x1E4F47A50];
            __int16 v17 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v21 = v15;
                __int16 v22 = 2080;
                __int16 v23 = "_VideoReceiver_SetPlayoutRTPTimestamp";
                __int16 v24 = 1024;
                int v25 = 5514;
                __int16 v26 = 1024;
                *(_DWORD *)long long v27 = v5;
                *(_WORD *)&v27[4] = 1024;
                *(_DWORD *)&v27[6] = v19;
                _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Converted audioPlayoutRTPTimestamp=%u into video domain with timestamp=%u", buf, 0x28u);
              }
            }
            else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v21 = v15;
              __int16 v22 = 2080;
              __int16 v23 = "_VideoReceiver_SetPlayoutRTPTimestamp";
              __int16 v24 = 1024;
              int v25 = 5514;
              __int16 v26 = 1024;
              *(_DWORD *)long long v27 = v5;
              *(_WORD *)&v27[4] = 1024;
              *(_DWORD *)&v27[6] = v19;
              _os_log_debug_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d Converted audioPlayoutRTPTimestamp=%u into video domain with timestamp=%u", buf, 0x28u);
            }
          }
          *(_DWORD *)(v4 + 256) = v19;
        }
      }
      else
      {
        *(_DWORD *)(v4 + 256) = v5;
      }
    }
  }
  double v8 = v6 / v7;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    double v11 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)v4;
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v21 = v9;
        __int16 v22 = 2080;
        __int16 v23 = "_VideoReceiver_CallAlarms";
        __int16 v24 = 1024;
        int v25 = 5533;
        __int16 v26 = 2048;
        *(void *)long long v27 = v12;
        *(_WORD *)&v27[8] = 2048;
        double v28 = v8;
        __int16 v29 = 1024;
        int v30 = v5;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Calling VCVideoPlayer_CallAlarms with PlayerHandle=%p with sourceTime=%.6f for audioPlayoutRTPTimestamp=%u", buf, 0x36u);
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)v4;
      *(_DWORD *)CMTime buf = 136316418;
      uint64_t v21 = v9;
      __int16 v22 = 2080;
      __int16 v23 = "_VideoReceiver_CallAlarms";
      __int16 v24 = 1024;
      int v25 = 5533;
      __int16 v26 = 2048;
      *(void *)long long v27 = v18;
      *(_WORD *)&v27[8] = 2048;
      double v28 = v8;
      __int16 v29 = 1024;
      int v30 = v5;
      _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d Calling VCVideoPlayer_CallAlarms with PlayerHandle=%p with sourceTime=%.6f for audioPlayoutRTPTimestamp=%u", buf, 0x36u);
    }
  }
  return VCVideoPlayer_CallAlarms(*(void *)v4, v3, v8);
}

uint64_t VideoReceiver_UpdateSourcePlayoutTime(uint64_t a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149515266;
  }
  uint64_t v4 = (os_unfair_lock_s *)v3;
  uint64_t v5 = v3 + 40448;
  double v6 = micro();
  CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (*(unsigned char *)(v5 + 1264))
  {
    os_unfair_lock_lock(v4 + 10427);
    double v7 = (unsigned char *)*a2;
    *(void *)(v5 + 1016) = a2[3];
    *(void *)(v5 + 248) = v7;
    VCVideoPlayer_SetOutputLatency(*(double *)(v5 + 1272));
    CMTimeMake(&v19, (unint64_t)((double)*(unint64_t *)(v5 + 248)+ (v6 - *(double *)(v5 + 1016)) * (double)(int)v4[258]._os_unfair_lock_opaque), v4[258]._os_unfair_lock_opaque);
    os_unfair_lock_unlock(v4 + 10427);
    os_unfair_lock_lock(v4 + 10293);
    if (*(unsigned char *)(v5 + 720))
    {
      double v8 = *(double *)(v5 + 712);
      if (v8 != 0.0)
      {
        double v9 = v6 - v8;
        if (v6 - v8 > *(double *)(v5 + 696) + 0.132)
        {
          _VideoReceiver_UpdateVideoStallTime((uint64_t)v4, v9, v6);
          ++*(_DWORD *)(v5 + 680);
          *(double *)(v5 + 696) = v9;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v10 = VRTraceErrorLogLevelToCSTR();
            double v11 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v12 = FourccToCStr(v4[312]._os_unfair_lock_opaque);
              int v13 = *(_DWORD *)(v5 + 680);
              double v14 = *(double *)(v5 + 656) * 1000.0;
              double v15 = *(double *)(v5 + 704) * 1000.0;
              *(_DWORD *)CMTime buf = 136317186;
              uint64_t v21 = v10;
              __int16 v22 = 2080;
              __int16 v23 = "_VideoReceiver_UpdateFrameDiscontinuityStatus";
              __int16 v24 = 1024;
              int v25 = 1323;
              __int16 v26 = 2048;
              long long v27 = v4;
              __int16 v28 = 2080;
              __int16 v29 = v12;
              __int16 v30 = 1024;
              int v31 = v13;
              __int16 v32 = 2048;
              double v33 = v9 * 1000.0;
              __int16 v34 = 2048;
              double v35 = v14;
              __int16 v36 = 2048;
              double v37 = v15;
              _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Frame Discontinuity Detected streamGroupID=%s count=%u frameDiscontinuityLength=%f frameDiscontinuityTime=%f frameDiscontinuityMaxSegment=%f", buf, 0x54u);
            }
          }
        }
      }
    }
    os_unfair_lock_unlock(v4 + 10293);
  }
  else
  {
    if (*(unsigned char *)(v5 + 1009))
    {
      __int16 v17 = (unsigned char *)*a2;
      *(double *)(v5 + 1016) = micro();
      *(void *)(v5 + 248) = v17;
    }
    CMTime v19 = *(CMTime *)a2;
  }
  uint64_t v16 = _VideoReceiver_CallAlarms((uint64_t)v4, (int *)&v19, v6);
  CheckOutHandleDebug();
  return v16;
}

uint64_t VideoReceiver_SetVTHandleAndStart(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (v3)
  {
    uint64_t v4 = (unsigned int *)v3;
    uint64_t v5 = v3 + 40400;
    *(void *)(v3 + 40400) = a2;
    *(unsigned char *)(v3 + 41457) = *(unsigned char *)(v3 + 1160);
    double v6 = (pthread_mutex_t *)(v3 + 40472);
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 40472));
    if (*((unsigned char *)v4 + 1164))
    {
      if (*(void *)(v5 + 64)) {
        goto LABEL_4;
      }
      *(void *)long long v40 = @"com.apple.avconference.videoreceiver.recvproc";
      CFDictionaryRef v29 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)v40, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int v30 = FigThreadCreate();
      if (v29) {
        CFRelease(v29);
      }
      if (!v30)
      {
LABEL_4:
        uint64_t v7 = 0;
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v31 = VRTraceErrorLogLevelToCSTR();
          __int16 v32 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136316418;
            *(void *)&uint8_t buf[4] = v31;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "VideoReceiver_SetVTHandleAndStart";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)double v37 = 5565;
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = 5565;
            *(_WORD *)&unsigned char v37[10] = 2048;
            *(void *)&v37[12] = v4;
            __int16 v38 = 1024;
            int v39 = v30;
            _os_log_error_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoReceiver.c:%d: VideoReceiver[%p] VideoReceiver_RecvProc thread create failed(%d)", buf, 0x32u);
          }
        }
        uint64_t v7 = v30 | 0xA01F0000;
      }
      goto LABEL_35;
    }
    double v35 = v6;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      double v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_RegisterTransportCallbacks";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)double v37 = 1398;
        *(_WORD *)&v37[4] = 2048;
        *(void *)&v37[6] = v4;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] register packet callback", buf, 0x26u);
      }
    }
    if (!*v4)
    {
LABEL_27:
      uint64_t v7 = 0;
      double v6 = v35;
LABEL_35:
      pthread_mutex_unlock(v6);
      CheckOutHandleDebug();
      return v7;
    }
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = MEMORY[0x1E4F143A8];
    __int16 v34 = v4 + 368;
    while (1)
    {
      int v13 = &v4[v10];
      *(void *)CMTime buf = v12;
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___VideoReceiver_RegisterTransportCallbacks_block_invoke;
      *(void *)double v37 = &__block_descriptor_tmp_475;
      *(void *)&v37[8] = v4;
      *(_DWORD *)&v37[16] = v11;
      uint64_t v14 = *(void *)(v5 + 1256);
      if (v14)
      {
        if ((VCCannedVideoPacketSource_RegisterForCannedReplay(v14, (unsigned __int16 *)&v4[v10 + 368], (unsigned __int16 *)buf, __block_literal_global_28) & 0x80000000) == 0)goto LABEL_18; {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
        }
          goto LABEL_18;
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        uint64_t v16 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_18;
        }
        *(_DWORD *)long long v40 = 136315906;
        *(void *)&v40[4] = v15;
        __int16 v41 = 2080;
        uint64_t v42 = "_VideoReceiver_RegisterTransportCallbacksForStream";
        __int16 v43 = 1024;
        int v44 = 1385;
        __int16 v45 = 2048;
        unsigned int v46 = &v34[v10];
        __int16 v17 = v16;
        uint64_t v18 = "VideoReceiver [%s] %s:%d Failed to register canned replay callbacks for stream[%p]";
      }
      else
      {
        _X8 = v13 + 2540;
        __asm { PRFM            #0, [X8] }
        if ((RTPRegisterPacketCallback(*((void *)v13 + 190), (uint64_t)&v4[v10 + 368], buf) & 0x80000000) != 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            goto LABEL_18;
          }
          uint64_t v25 = VRTraceErrorLogLevelToCSTR();
          __int16 v26 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_18;
          }
          *(_DWORD *)long long v40 = 136315906;
          *(void *)&v40[4] = v25;
          __int16 v41 = 2080;
          uint64_t v42 = "_VideoReceiver_RegisterTransportCallbacksForStream";
          __int16 v43 = 1024;
          int v44 = 1388;
          __int16 v45 = 2048;
          unsigned int v46 = &v34[v10];
          __int16 v17 = v26;
          uint64_t v18 = "VideoReceiver [%s] %s:%d Failed to register RTP packet callbacks for stream[%p]";
        }
        else
        {
          if ((RTCPRegisterPacketCallback(*((void *)v13 + 190), (uint64_t)&v4[v10 + 368], __block_literal_global_28) & 0x80000000) == 0) {
            goto LABEL_18;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            goto LABEL_18;
          }
          uint64_t v27 = VRTraceErrorLogLevelToCSTR();
          __int16 v28 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_18;
          }
          *(_DWORD *)long long v40 = 136315906;
          *(void *)&v40[4] = v27;
          __int16 v41 = 2080;
          uint64_t v42 = "_VideoReceiver_RegisterTransportCallbacksForStream";
          __int16 v43 = 1024;
          int v44 = 1391;
          __int16 v45 = 2048;
          unsigned int v46 = &v34[v10];
          __int16 v17 = v28;
          uint64_t v18 = "VideoReceiver [%s] %s:%d Failed to register RTCP packet callbacks for stream[%p]";
        }
      }
      _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, v18, v40, 0x26u);
LABEL_18:
      ++v11;
      v10 += 1080;
      if (v11 >= *v4) {
        goto LABEL_27;
      }
    }
  }
  return 2149515266;
}

uint64_t VideoReceiver_RecvProc(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v20 = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return -2145452030;
  }
  uint64_t v3 = (unsigned int *)v2;
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  uint64_t v5 = (NSObject **)MEMORY[0x1E4F47A50];
  if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *v5;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v22 = 2080;
      __int16 v23 = "VideoReceiver_RecvProc";
      __int16 v24 = 1024;
      int v25 = 4157;
      __int16 v26 = 2048;
      uint64_t v27 = v3;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] ##### VideoReceiver_RecvProc start", buf, 0x26u);
    }
  }
  while (!v3[366])
  {
    unint64_t v8 = *v3;
    if (v8)
    {
      unint64_t v9 = 0;
      uint64_t v10 = v3 + 380;
      do
      {
        *((_DWORD *)v19 + v9) = 48;
        *((void *)v17 + v9++) = *v10;
        v10 += 540;
      }
      while (v9 < v8);
    }
    if ((RTPGetReceiveStatus((uint64_t)v17, (unsigned int *)v19, v8, v3[367]) & 0x80000000) != 0)
    {
      usleep(0x2710u);
    }
    else
    {
      if (*v3)
      {
        unint64_t v11 = 0;
        uint64_t v12 = (uint64_t)(v3 + 368);
        do
        {
          int v13 = *((_DWORD *)v19 + v11);
          if ((v13 & 0x10) != 0)
          {
            *(void *)CMTime buf = 0;
            if ((RTPRecvRTP(*(void *)(v12 + 48), buf) & 0x80000000) == 0)
            {
              kdebug_trace();
              _VideoReceiver_ProcessVideoRTPInternal(a1, v3, (unsigned __int16 *)v12, *(uint64_t *)buf);
              RTPReleaseRTPPacket(*(void *)(v12 + 48), (_DWORD **)buf);
            }
            int v13 = *((_DWORD *)v19 + v11);
          }
          if ((v13 & 0x20) != 0)
          {
            bzero(buf, 0x668uLL);
            if ((RTPRecvRTCP(*(void *)(v12 + 48), buf) & 0x80000000) == 0)
            {
              _VideoReceiver_ProcessVideoRTCPInternal((uint64_t)v3, v12, (uint64_t)buf);
              RTCPCleanupPacketList((uint64_t)buf);
            }
          }
          ++v11;
          v12 += 4320;
        }
        while (v11 < *v3);
      }
      if (v3[10093] == 1 || *((unsigned char *)v3 + 40368)) {
        _VideoReceiver_ScheduleFramesForDecodingMultiway(a1, v3, v3[10179]);
      }
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    uint64_t v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v22 = 2080;
      __int16 v23 = "VideoReceiver_RecvProc";
      __int16 v24 = 1024;
      int v25 = 4185;
      __int16 v26 = 2048;
      uint64_t v27 = v3;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] ##### VideoReceiver_RecvProc end", buf, 0x26u);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoReceiver_SetVTHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149515266;
  }
  *(void *)(v3 + 40400) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoReceiver_SetFeedbackDelegate()
{
  if (!CheckInHandleDebug()) {
    return 2149515266;
  }
  FigCFWeakReferenceStore();
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoReceiver_GetFramerate(float a1, uint64_t a2, double *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149515266;
  }
  int v11 = -1431655766;
  double v10 = NAN;
  *a3 = 0.0;
  uint64_t v6 = *(void *)(v5 + 40408);
  double v7 = micro();
  uint64_t v8 = SummerLengthPred(v7 - a1, v6, (uint64_t (*)(double, double, double))SummerGreaterThan, &v10, &v11);
  if ((v8 & 0x80000000) == 0 && v10 >= 0.5) {
    *a3 = (double)v11 / v10;
  }
  CheckOutHandleDebug();
  return v8;
}

uint64_t VideoReceiver_GetBitrate(float a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7)
{
  uint64_t v13 = CheckInHandleDebug();
  if (!v13) {
    return 2149515266;
  }
  uint64_t v14 = (uint64_t *)(v13 + 40408);
  double v15 = micro() - a1;
  if (a3 && (a3 = _VCNACKConsumer_ComputeSummerBitrate(*v14, (double *)a3, v15), (a3 & 0x80000000) != 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_GetBitrate_cold_5();
      }
    }
  }
  else if (a4 && (a3 = _VCNACKConsumer_ComputeSummerBitrate(v14[1], a4, v15), (a3 & 0x80000000) != 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_GetBitrate_cold_4();
      }
    }
  }
  else if (a5 && (a3 = _VCNACKConsumer_ComputeSummerBitrate(v14[4], a5, v15), (a3 & 0x80000000) != 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_GetBitrate_cold_3();
      }
    }
  }
  else if (a6 && (a3 = _VCNACKConsumer_ComputeSummerBitrate(v14[2], a6, v15), (a3 & 0x80000000) != 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_GetBitrate_cold_2();
      }
    }
  }
  else if (a7)
  {
    a3 = _VCNACKConsumer_ComputeSummerBitrate(v14[3], a7, v15);
    if ((a3 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_GetBitrate_cold_1();
      }
    }
  }
  CheckOutHandleDebug();
  return a3;
}

uint64_t VideoReceiver_GetMediaChannelMetrics(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149515266;
  }
  uint64_t v6 = (uint64_t *)(v5 + 40408);
  int v18 = -1431655766;
  double v16 = 0.0;
  double v17 = NAN;
  double v7 = a1;
  double v8 = micro() - a1;
  double v9 = 0.0;
  if ((SummerSumPred(v8, 0.0, *v6, (unsigned int (*)(double, double, double))SummerGreaterThan, (double (*)(double, double, double))SummerIdentity, &v17, &v16) & 0x80000000) == 0&& v17 >= 0.5)
  {
    double v16 = v16 * 8.0 / v17;
  }
  uint64_t v10 = *v6;
  double v11 = micro();
  uint64_t v12 = SummerLengthPred(v11 - v7, v10, (uint64_t (*)(double, double, double))SummerGreaterThan, &v17, &v18);
  if ((v12 & 0x80000000) == 0 && v17 >= 0.5) {
    double v9 = (double)v18 / v17;
  }
  if (a3)
  {
    *(_DWORD *)a3 = (v16 / 1000.0);
    *(double *)(a3 + 32) = v9;
    uint64_t v13 = *(uint64_t *)((char *)v6 + 420);
    v14.i64[0] = (int)v13;
    v14.i64[1] = SHIDWORD(v13);
    *(float64x2_t *)(a3 + 40) = vcvtq_f64_s64(v14);
  }
  CheckOutHandleDebug();
  return v12;
}

uint64_t VideoReceiver_GetLastReceivedVideoRTPPacketTime(uint64_t a1, void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149515266;
  }
  *a2 = *(void *)(v3 + 41480);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoReceiver_GetLastReceivedVideoRTCPPacketTime(uint64_t a1, void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149515266;
  }
  *a2 = *(void *)(v3 + 41488);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoReceiver_GetActiveVideoStallDuration(uint64_t a1, double *a2)
{
  uint64_t v2 = 2149515265;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *a2 = 0.0;
      if (*(double *)(v4 + 41136) != 0.0) {
        *a2 = _VideoReceiver_GetVideoStallLength(v4);
      }
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2149515266;
    }
  }
  return v2;
}

double _VideoReceiver_GetVideoStallLength(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 40672;
  double v3 = micro() - *(double *)(a1 + 41136);
  if (v3 < 0.0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v7 = *(_DWORD *)(v2 + 456);
        uint64_t v8 = *(void *)(v2 + 432);
        uint64_t v9 = *(void *)(v2 + 464);
        uint64_t v10 = *(void *)(v2 + 472);
        int v11 = 136317186;
        uint64_t v12 = v4;
        __int16 v13 = 2080;
        int64x2_t v14 = "_VideoReceiver_GetVideoStallLength";
        __int16 v15 = 1024;
        int v16 = 1267;
        __int16 v17 = 2048;
        uint64_t v18 = a1;
        __int16 v19 = 1024;
        int v20 = v7;
        __int16 v21 = 2048;
        uint64_t v22 = v9;
        __int16 v23 = 2048;
        double v24 = v3;
        __int16 v25 = 2048;
        uint64_t v26 = v8;
        __int16 v27 = 2048;
        uint64_t v28 = v10;
        _os_log_error_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Invalid video stall time. count=%u stall start time=%f stall length=%f total stall time=%f stall time delta=%f", (uint8_t *)&v11, 0x54u);
      }
    }
    reportingSymptom();
    return 0.0;
  }
  return v3;
}

uint64_t VideoReceiver_GetLastVideoStallDuration(uint64_t a1, float *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149515266;
  }
  if (a2)
  {
    uint64_t v4 = (double *)(v3 + 41104);
    _VideoReceiver_CheckIfVideoStalling(v3);
    double v5 = *v4;
    float v6 = *v4 - v4[2];
    *a2 = v6;
    v4[2] = v5;
  }
  CheckOutHandleDebug();
  return 0;
}

void _VideoReceiver_CheckIfVideoStalling(uint64_t a1)
{
  uint64_t v1 = (double *)(a1 + 41104);
  if (!*(unsigned char *)(a1 + 41168))
  {
    if (*(double *)(a1 + 41136) == 0.0)
    {
      *(void *)(a1 + 41144) = 0;
    }
    else
    {
      VideoStallCFIndex Length = _VideoReceiver_GetVideoStallLength(a1);
      double v3 = v1[5];
      if (v3 == 0.0)
      {
        void v1[5] = VideoStallLength;
        *uint64_t v1 = VideoStallLength + *v1;
      }
      else
      {
        *uint64_t v1 = VideoStallLength - v3 + *v1;
        void v1[5] = VideoStallLength;
      }
      if (v1[6] > VideoStallLength) {
        VideoStallCFIndex Length = v1[6];
      }
      v1[6] = VideoStallLength;
    }
  }
}

uint64_t VideoReceiver_GetShowFrameRTPTimestamp()
{
  uint64_t v0 = CheckInHandleDebug();
  if (v0)
  {
    uint64_t v1 = *(unsigned int *)(v0 + 41280);
    CheckOutHandleDebug();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_GetShowFrameRTPTimestamp_cold_1();
      }
    }
    return 0;
  }
  return v1;
}

uint64_t VideoReceiver_CellTechChanged()
{
  uint64_t v0 = CheckInHandleDebug();
  if (v0)
  {
    *(void *)(v0 + 41152) = 0;
    CheckOutHandleDebug();
    return 0;
  }
  else
  {
    uint64_t v1 = 2149515266;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_CellTechChanged_cold_1();
      }
    }
  }
  return v1;
}

uint64_t VideoReceiver_SetSynchronizer(uint64_t a1, uint64_t a2)
{
  v10[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = CheckInHandleDebug();
  if (v4)
  {
    uint64_t v5 = v4 + 40392;
    if (*(_DWORD *)(v4 + 1256) == 2)
    {
      if (a2)
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 0x40000000;
        _OWORD v10[2] = __VideoReceiver_SetSynchronizer_block_invoke;
        v10[3] = &__block_descriptor_tmp_108;
        v10[4] = a1;
        float v6 = v10;
        uint64_t v7 = a2;
LABEL_10:
        VCMediaStreamSynchronizer_setSourcePlayoutTimeUpdatedHandler(v7, v6);
        goto LABEL_11;
      }
      uint64_t v7 = *(void *)(v4 + 41592);
      if (v7)
      {
        float v6 = 0;
        goto LABEL_10;
      }
    }
LABEL_11:
    *(void *)(v5 + 1200) = a2;
    *(unsigned char *)uint64_t v5 = a2 != 0;
    CheckOutHandleDebug();
    return 0;
  }
  uint64_t v8 = 2149515266;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoReceiver_SetSynchronizer_cold_1();
    }
  }
  return v8;
}

uint64_t _VideoReceiver_RTPPacketCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149515266;
  }
  float v6 = (unsigned int *)v5;
  uint64_t v7 = v5 + 40368;
  *(void *)(v5 + 41480) = *(void *)(a2 + 40);
  ++*(_DWORD *)(v5 + 41476);
  uint64_t v8 = _VideoReceiver_ProcessVideoRTPInternal(v4, (unsigned int *)v5, (unsigned __int16 *)a1, a2);
  if ((v8 & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      uint64_t v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v13 = 136316162;
        uint64_t v14 = v11;
        __int16 v15 = 2080;
        int v16 = "_VideoReceiver_RTPPacketCallback";
        __int16 v17 = 1024;
        int v18 = 3388;
        __int16 v19 = 2048;
        int v20 = v6;
        __int16 v21 = 1024;
        int v22 = v8;
        _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to process RTP packet. status[%x]", (uint8_t *)&v13, 0x2Cu);
      }
    }
  }
  else if (*(_DWORD *)(v7 + 4) == 1 || *(unsigned char *)v7)
  {
    AssemblyRTPint Timestamp = _VideoReceiver_GetAssemblyRTPTimestamp((uint64_t)v6);
    _VideoReceiver_ScheduleFramesForDecodingMultiway(v4, v6, AssemblyRTPTimestamp);
  }
  CheckOutHandleDebug();
  return v8;
}

void _VideoReceiverStreamStats_AddPacket(uint64_t a1, int a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 4) != a2)
  {
    *(_DWORD *)(a1 + 4) = a2;
    *(void *)(a1 + 16) = 0;
    bzero((void *)(a1 + 24), 0x1000uLL);
LABEL_5:
    *(unsigned char *)a1 = 1;
    *(_WORD *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 12) = a3;
    goto LABEL_6;
  }
  if (!*(unsigned char *)a1) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v5 = a1 + 4 * (a3 & 0x3FF);
  int v7 = *(_DWORD *)(v5 + 24);
  float v6 = (unsigned int *)(v5 + 24);
  if (v7 != a3)
  {
    *float v6 = a3;
    int v8 = *(_DWORD *)(a1 + 12);
    ++*(_DWORD *)(a1 + 16);
    if (a3 != (unsigned __int16)v8 && (unsigned __int16)(a3 - v8) <= 0x7FFEu)
    {
      if (a3 < (unsigned __int16)v8) {
        v8 += 0x10000;
      }
      *(_DWORD *)(a1 + 12) = v8 & 0xFFFF0000 | a3;
    }
  }
}

double _VideoReceiver_GetTotalPLR(unsigned int *a1)
{
  uint64_t v1 = *a1;
  if (!v1) {
    return 0.0;
  }
  unsigned int v2 = 0;
  double v3 = (int *)(a1 + 408);
  double result = 0.0;
  do
  {
    int v5 = *(v3 - 1);
    int v6 = *v3;
    int v7 = *((unsigned __int16 *)v3 - 4);
    int v8 = *((unsigned __int16 *)v3 - 6);
    int64_t v9 = (unsigned __int16)(v7 - v8) - (unint64_t)(v5 - *v3);
    int v10 = v7 - v8;
    if (v10) {
      BOOL v11 = v9 < 1;
    }
    else {
      BOOL v11 = 1;
    }
    double v12 = 0.0;
    if (!v11) {
      double v12 = (double)v9 / (double)(unsigned __int16)v10;
    }
    v3 += 1080;
    if (v5 == v6) {
      double v12 = -0.0;
    }
    double result = result + v12;
    if (v5 != v6) {
      ++v2;
    }
    --v1;
  }
  while (v1);
  if (v2) {
    return result / (double)v2;
  }
  return result;
}

unsigned int *_VideoReceiver_ResetStreamStats(unsigned int *result)
{
  uint64_t v1 = *result;
  if (v1)
  {
    do
    {
      result[408] = result[407];
      *((_WORD *)result + 810) = result[406];
      *(void *)(result + 1433) = 0;
      result[1435] = 0;
      result += 1080;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t VideoReceiver_SetJitterBufferMode(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2147680258;
  }
  _VideoReceiver_SetJitterBufferMode(v3, a2);
  CheckOutHandleDebug();
  return 0;
}

void _VideoReceiver_SetJitterBufferMode(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 1020) != a2)
  {
    uint64_t v4 = a1 + 40448;
    VCVideoPlayer_UpdateJitterBufferMode(*(void *)(a1 + 40448), a2);
    VCVideoJitterBuffer_UpdateMode(*(void *)(v4 + 1088), a2);
    *(_DWORD *)(a1 + 1020) = a2;
  }
}

uint64_t VideoReceiver_UpdateVideoExpected(uint64_t a1, int a2)
{
  uint64_t v3 = (os_unfair_lock_s *)CheckInHandleDebug();
  if (!v3) {
    return 2147680258;
  }
  uint64_t v4 = (char *)&v3[10422]._os_unfair_lock_opaque + 1;
  int v5 = v3 + 10426;
  os_unfair_lock_lock(v3 + 10426);
  *uint64_t v4 = a2;
  if (a2) {
    *(double *)(v4 + 7) = micro();
  }
  os_unfair_lock_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoReceiver_SetExternalOutputLatency(double a1)
{
  uint64_t v2 = CheckInHandleDebug();
  if (v2)
  {
    *(double *)(v2 + 41720) = a1;
    if (*(void *)(v2 + 40448) != 0xFFFFFFFFLL) {
      VCVideoPlayer_SetOutputLatency(a1);
    }
    CheckOutHandleDebug();
    return 0;
  }
  else
  {
    uint64_t v3 = 2147680258;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_SetExternalOutputLatency_cold_1();
      }
    }
  }
  return v3;
}

uint64_t VideoReceiver_SetDeferredAssemblyEnabled(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (v3)
  {
    *(unsigned char *)(v3 + 1078) = a2;
    CheckOutHandleDebug();
    return 0;
  }
  else
  {
    uint64_t v4 = 2147680258;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_SetDeferredAssemblyEnabled_cold_1();
      }
    }
  }
  return v4;
}

uint64_t VideoReceiver_SetLooseAVSyncEnabled(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (v3)
  {
    uint64_t v4 = VCVideoPlayer_SetLooseAVSyncEnabled(*(void *)(v3 + 40448), a2);
    CheckOutHandleDebug();
    return v4;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoReceiver_SetLooseAVSyncEnabled_cold_1();
      }
    }
    return 2147680258;
  }
}

void VideoReceiver_VideoAlarmForDisplay(uint64_t a1, long long *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  _VideoReceiver_VideoAlarmCommon(a1, (uint64_t)&v6, a3, a4, 1, a5, a6);
}

void _VideoReceiver_UpdateVideoStallStatus(uint64_t a1, int a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 40672;
  if (!*(unsigned char *)(a1 + 41168))
  {
    int v5 = (_DWORD *)(a1 + 40372);
    if (!a2 || *(double *)(a1 + 40944) == 0.0)
    {
      if (*(double *)(a1 + 41136) > 0.0)
      {
        VideoStallCFIndex Length = _VideoReceiver_GetVideoStallLength(a1);
        double v16 = micro();
        _VideoReceiver_UpdateVideoStallTime(a1, VideoStallLength, v16);
        int v22 = *(FILE ***)(v2 + 1008);
        if (v22) {
          VRDump_AddEvent(v22, 6u, 0, v17, v18, v19, v20, v21, v36);
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v28 = VRTraceErrorLogLevelToCSTR();
          uint64_t v29 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v30 = *(_DWORD *)(v2 + 456);
            uint64_t v31 = *(void *)(v2 + 432);
            int v36 = 136316674;
            uint64_t v37 = v28;
            __int16 v38 = 2080;
            int v39 = "_VideoReceiver_UpdateVideoStallStatus";
            __int16 v40 = 1024;
            int v41 = 1344;
            __int16 v42 = 2048;
            uint64_t v43 = a1;
            __int16 v44 = 1024;
            int v45 = v30;
            __int16 v46 = 2048;
            double v47 = VideoStallLength;
            __int16 v48 = 2048;
            uint64_t v49 = v31;
            _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Stopping video stall. count=%u stall length=%f total stall time=%f", (uint8_t *)&v36, 0x40u);
          }
        }
        if (*(unsigned char *)(v2 + 1016))
        {
          __int16 v32 = *(FILE ***)(v2 + 1008);
          if (v32) {
            VRDump_AddEvent(v32, 8u, 0, v23, v24, v25, v26, v27, v36);
          }
        }
      }
    }
    else if (*(double *)(a1 + 41136) == 0.0)
    {
      *(double *)(a1 + 41136) = micro();
      *(void *)(v2 + 472) = 0;
      ++*(_DWORD *)(v2 + 456);
      BOOL v11 = *(FILE ***)(v2 + 1008);
      if (v11) {
        VRDump_AddEvent(v11, 5u, 0, v6, v7, v8, v9, v10, v36);
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        int v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v14 = *(_DWORD *)(v2 + 456);
          int v36 = 136316162;
          uint64_t v37 = v12;
          __int16 v38 = 2080;
          int v39 = "_VideoReceiver_UpdateVideoStallStatus";
          __int16 v40 = 1024;
          int v41 = 1337;
          __int16 v42 = 2048;
          uint64_t v43 = a1;
          __int16 v44 = 1024;
          int v45 = v14;
          _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Starting video stall. count=%u", (uint8_t *)&v36, 0x2Cu);
        }
      }
    }
    if ((*v5 & 0xFFFFFFFE) == 2)
    {
      ReportingEventDictionary = _VideoReceiver_CreateReportingEventDictionary(a1);
      if (ReportingEventDictionary)
      {
        __int16 v34 = ReportingEventDictionary;
        int v36 = a2;
        CFNumberRef v35 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v36);
        CFDictionaryAddValue(v34, @"VCSPVideoDegraded", v35);
        CFRelease(v35);
        reportingGenericEvent();
        CFRelease(v34);
      }
    }
  }
}

void _VideoReceiver_ShowFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = a1 + 40376;
    CVPixelBufferRetain(*(CVPixelBufferRef *)(a2 + 16));
    if (*(unsigned char *)(a2 + 66))
    {
      if (*(unsigned char *)(a2 + 72)) {
        _VideoReceiver_UpdateVideoStallStatus(a1, 0);
      }
      int v5 = *(__CVBuffer **)(a2 + 16);
      CVAttachmentMode v58 = kCVAttachmentMode_ShouldNotPropagate;
      LODWORD(valuePtr.value) = 0;
      CVAttachmentMode attachmentMode = -1431655766;
      CFNumberRef Attachment = (const __CFNumber *)CVBufferGetAttachment(v5, @"VraWidth", &attachmentMode);
      if (!Attachment
        || (CFNumberGetValue(Attachment, kCFNumberIntType, &valuePtr),
            int Width = valuePtr.value,
            SLODWORD(valuePtr.value) <= 0))
      {
        int Width = CVPixelBufferGetWidth(v5);
      }
      CFNumberRef v8 = (const __CFNumber *)CVBufferGetAttachment(v5, @"VraHeight", &attachmentMode);
      if (!v8
        || (CFNumberGetValue(v8, kCFNumberIntType, &v58),
            int Height = v58,
            (int)v58 <= (int)kCVAttachmentMode_ShouldNotPropagate))
      {
        int Height = CVPixelBufferGetHeight(v5);
      }
      if (*(_DWORD *)(v4 + 452) != Width || *(_DWORD *)(v4 + 456) != Height)
      {
        ReportingEventDictionary = _VideoReceiver_CreateReportingEventDictionary(a1);
        reportingVideoProp();
        if (ReportingEventDictionary) {
          CFRelease(ReportingEventDictionary);
        }
        *(_DWORD *)(v4 + 452) = Width;
        *(_DWORD *)(v4 + 456) = Height;
      }
      BOOL v11 = *(__CVBuffer **)(a2 + 16);
      int v12 = *(_DWORD *)(a2 + 24);
      int v13 = *(_DWORD *)(a1 + 1060);
      if (v13 == 1)
      {
        if (*(_DWORD *)(a1 + 1056)) {
          goto LABEL_19;
        }
        int32_t v14 = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 16));
        int32_t v15 = CVPixelBufferGetHeight(v11);
        int BytesPerRow = CVPixelBufferGetBytesPerRow(v11);
        CVPixelBufferLockBaseAddress(v11, 0);
        BaseAddress = CVPixelBufferGetBaseAddress(v11);
        VideoReceiverUtil_Capture2vuyFile(BaseAddress, BytesPerRow * v15, v14, v15, *(int *)(a1 + 1036) >> 2, a1 + 40856, (v12 - *(_DWORD *)(v4 + 548)) >> 2);
        CVPixelBufferUnlockBaseAddress(v11, 0);
        int v13 = *(_DWORD *)(a1 + 1060);
        if (v13 == 1)
        {
LABEL_19:
          WriteYuvFrame(v11, *(void *)(v4 + 864), 0);
          int v13 = *(_DWORD *)(a1 + 1060);
        }
      }
      if (v13 == 2) {
        DumpFrameYuvWithTimestamp(1, v11, v12);
      }
      uint64_t v18 = *(__CVBuffer **)(a2 + 16);
      if (*(unsigned char *)(v4 + 833))
      {
        CVAttachmentMode v58 = -1431655766;
        CFArrayRef v19 = (const __CFArray *)CVBufferGetAttachment(v18, @"PSNRArray", &v58);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v20 = VRTraceErrorLogLevelToCSTR();
          uint64_t v21 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v22 = *(unsigned __int16 *)(a2 + 48);
            int v56 = *(_DWORD *)(a2 + 24);
            CMTime valuePtr = *(CMTime *)(a2 + 80);
            Float64 Seconds = CMTimeGetSeconds(&valuePtr);
            int v24 = *(unsigned __int8 *)(a2 + 66);
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v19, 0);
            uint64_t v26 = CFArrayGetValueAtIndex(v19, 1);
            uint64_t v27 = CFArrayGetValueAtIndex(v19, 2);
            LODWORD(valuePtr.value) = 136317698;
            *(CMTimeValue *)((char *)&valuePtr.value + 4) = v20;
            LOWORD(valuePtr.flags) = 2080;
            *(void *)((char *)&valuePtr.flags + 2) = "_VideoReceiver_ShowFrame";
            HIWORD(valuePtr.epoch) = 1024;
            int v60 = 1877;
            __int16 v61 = 2048;
            uint64_t v62 = a1;
            __int16 v63 = 1024;
            int v64 = v22;
            __int16 v65 = 1024;
            int v66 = v56;
            __int16 v67 = 2048;
            *(Float64 *)int v68 = Seconds;
            *(_WORD *)&v68[8] = 1024;
            int v69 = v24;
            __int16 v70 = 2112;
            long long v71 = ValueAtIndex;
            __int16 v72 = 2112;
            long long v73 = v26;
            __int16 v74 = 2112;
            long long v75 = v27;
            _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] for streamID=%d decoded frame with presentationTimestamp=%u frameTime=%f shouldShowFrame=%d Y-PSNR=%@ U-PSNR=%@ V-PSNR=%@", (uint8_t *)&valuePtr, 0x60u);
          }
        }
        uint64_t v18 = *(__CVBuffer **)(a2 + 16);
      }
      *(_DWORD *)(v4 + 904) = *(_DWORD *)(a2 + 24);
      ++*(_WORD *)(v4 + 660);
      ++*(_DWORD *)(v4 + 644);
      if (v18)
      {
        CFNumberRef v28 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, (const void *)(a2 + 28));
        CVBufferSetAttachment(*(CVBufferRef *)(a2 + 16), @"FrameSequenceNumber", v28, kCVAttachmentMode_ShouldPropagate);
        if (v28) {
          CFRelease(v28);
        }
        uint64_t v29 = *(void (**)(uint64_t, uint64_t, CMTime *, uint64_t, uint64_t))(a1 + 1408);
        uint64_t v30 = *(void *)(a1 + 1400);
        uint64_t v31 = *(void *)(a2 + 16);
        uint64_t v32 = *(unsigned __int8 *)(v4 + 1008);
        uint64_t v33 = *(unsigned __int8 *)(a2 + 71);
        CMTime valuePtr = *(CMTime *)(a2 + 80);
        v29(v30, v31, &valuePtr, v32, v33);
      }
      else if (*(void *)(a2 + 8))
      {
        (*(void (**)(void))(a1 + 1416))(*(void *)(a1 + 1400));
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v34 = VRTraceErrorLogLevelToCSTR();
        CFNumberRef v35 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v52 = *(unsigned __int16 *)(a2 + 48);
          int v53 = *(_DWORD *)(a2 + 24);
          CMTime valuePtr = *(CMTime *)(a2 + 80);
          Float64 v54 = CMTimeGetSeconds(&valuePtr);
          int v55 = *(unsigned __int8 *)(a2 + 66);
          LODWORD(valuePtr.value) = 136316930;
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = v34;
          LOWORD(valuePtr.flags) = 2080;
          *(void *)((char *)&valuePtr.flags + 2) = "_VideoReceiver_ShowFrame";
          HIWORD(valuePtr.epoch) = 1024;
          int v60 = 1893;
          __int16 v61 = 2048;
          uint64_t v62 = a1;
          __int16 v63 = 1024;
          int v64 = v52;
          __int16 v65 = 1024;
          int v66 = v53;
          __int16 v67 = 2048;
          *(Float64 *)int v68 = v54;
          *(_WORD *)&v68[8] = 1024;
          int v69 = v55;
          _os_log_error_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Trying to show a NULL frame for streamID=%d decoded frame with presentationTimestamp=%u frameTime=%f shouldShowFrame=%d", (uint8_t *)&valuePtr, 0x42u);
        }
      }
    }
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 16));
    int v36 = *(_DWORD *)(a2 + 24);
    double v37 = micro();
    *(_DWORD *)(v4 + 548) = v36;
    double v38 = *(double *)(v4 + 568);
    if (v38 != 0.0)
    {
      unsigned int v39 = (int)((v37 - v38) * 1000.0 + 0.5);
      if (*(unsigned __int16 *)(v4 + 576) < v39) {
        *(_WORD *)(v4 + 576) = v39;
      }
    }
    *(double *)(v4 + 568) = v37;
    uint64_t v40 = *(void *)(a1 + 1168);
    if (v40)
    {
      if (!*(void *)v4 || (uint64_t v41 = *(void *)(*(void *)v4 + 80)) == 0) {
        uint64_t v41 = *(void *)(v4 + 288);
      }
      if (VCMediaControlInfoGeneratorGetVersion(v41) == 2)
      {
        int v42 = *(_DWORD *)(v4 + 656) - *(unsigned __int16 *)(v4 + 648) + 1;
        *(_DWORD *)(v40 + 40) = v42 - *(_DWORD *)(v4 + 644);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v43 = VRTraceErrorLogLevelToCSTR();
          __int16 v44 = *MEMORY[0x1E4F47A50];
          int v45 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              int v46 = *(_DWORD *)(v40 + 40);
              int v47 = *(_DWORD *)(v4 + 656);
              int v48 = *(unsigned __int16 *)(v4 + 648);
              LODWORD(valuePtr.value) = 136316930;
              *(CMTimeValue *)((char *)&valuePtr.value + 4) = v43;
              LOWORD(valuePtr.flags) = 2080;
              *(void *)((char *)&valuePtr.flags + 2) = "_VideoReceiver_UpdateWRMFrameErasureMetrics";
              HIWORD(valuePtr.epoch) = 1024;
              int v60 = 1724;
              __int16 v61 = 2048;
              uint64_t v62 = a1;
              __int16 v63 = 1024;
              int v64 = v46;
              __int16 v65 = 1024;
              int v66 = v42;
              __int16 v67 = 1024;
              *(_DWORD *)int v68 = v47;
              *(_WORD *)&v68[4] = 1024;
              *(_DWORD *)&v68[6] = v48;
              _os_log_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] videoFrameErasureCount=%d videoFramesExpected=%d maxFrameSequenceNumber=%d baseFrameSequenceNumber=%d", (uint8_t *)&valuePtr, 0x3Eu);
            }
          }
          else if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            int v49 = *(_DWORD *)(v40 + 40);
            int v50 = *(_DWORD *)(v4 + 656);
            int v51 = *(unsigned __int16 *)(v4 + 648);
            LODWORD(valuePtr.value) = 136316930;
            *(CMTimeValue *)((char *)&valuePtr.value + 4) = v43;
            LOWORD(valuePtr.flags) = 2080;
            *(void *)((char *)&valuePtr.flags + 2) = "_VideoReceiver_UpdateWRMFrameErasureMetrics";
            HIWORD(valuePtr.epoch) = 1024;
            int v60 = 1724;
            __int16 v61 = 2048;
            uint64_t v62 = a1;
            __int16 v63 = 1024;
            int v64 = v49;
            __int16 v65 = 1024;
            int v66 = v42;
            __int16 v67 = 1024;
            *(_DWORD *)int v68 = v50;
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)&v68[6] = v51;
            _os_log_debug_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] videoFrameErasureCount=%d videoFramesExpected=%d maxFrameSequenceNumber=%d baseFrameSequenceNumber=%d", (uint8_t *)&valuePtr, 0x3Eu);
          }
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoReceiver_ShowFrame_cold_1();
    }
  }
}

void _VideoReceiver_VideoAlarmCommon(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = CheckInHandleDebug();
  if (v13)
  {
    uint64_t v14 = v13;
    int v15 = *(_DWORD *)(v13 + 1464);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v15) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = a4 == 0;
    }
    if (v17)
    {
      if (ErrorLogLevelForModule >= 8)
      {
        uint64_t v24 = VRTraceErrorLogLevelToCSTR();
        uint64_t v25 = *MEMORY[0x1E4F47A50];
        uint64_t v26 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            int v27 = *(_DWORD *)(a2 + 8);
            double v28 = *(double *)a2;
            LODWORD(buf.value) = 136317186;
            *(CMTimeValue *)((char *)&buf.value + 4) = v24;
            LOWORD(buf.flags) = 2080;
            *(void *)((char *)&buf.flags + 2) = "_VideoReceiver_VideoAlarmCommon";
            HIWORD(buf.epoch) = 1024;
            int v50 = 2147;
            __int16 v51 = 2048;
            uint64_t v52 = v14;
            __int16 v53 = 1024;
            int v54 = v27;
            __int16 v55 = 1024;
            int v56 = a5;
            __int16 v57 = 2048;
            double v58 = v28;
            __int16 v59 = 1024;
            int v60 = a6;
            __int16 v61 = 1024;
            int v62 = a3;
            _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] alarmRtpTimestamp=%u alarmType=%d presentationTime=%f shouldShowFrame=%d didAssembleFail=%d", (uint8_t *)&buf, 0x48u);
          }
        }
        else if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          int v44 = *(_DWORD *)(a2 + 8);
          double v45 = *(double *)a2;
          LODWORD(buf.value) = 136317186;
          *(CMTimeValue *)((char *)&buf.value + 4) = v24;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "_VideoReceiver_VideoAlarmCommon";
          HIWORD(buf.epoch) = 1024;
          int v50 = 2147;
          __int16 v51 = 2048;
          uint64_t v52 = v14;
          __int16 v53 = 1024;
          int v54 = v44;
          __int16 v55 = 1024;
          int v56 = a5;
          __int16 v57 = 2048;
          double v58 = v45;
          __int16 v59 = 1024;
          int v60 = a6;
          __int16 v61 = 1024;
          int v62 = a3;
          _os_log_debug_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] alarmRtpTimestamp=%u alarmType=%d presentationTime=%f shouldShowFrame=%d didAssembleFail=%d", (uint8_t *)&buf, 0x48u);
        }
      }
      CMTimeMake(&v47, (uint64_t)(*(double *)a2 * 1000000000.0), 1000000000);
      CMTime buf = v47;
      CMTimeGetSeconds(&buf);
      kdebug_trace();
      if (a3)
      {
        if (a5 == 1 || !*(unsigned char *)(v14 + 1188))
        {
          _VideoReceiver_UpdateVideoStallStatus(v14, 1);
        }
        else if (!a5)
        {
          VCVideoPlayer_QueueAlarmForDisplay(*(void *)(v14 + 40448), (uint64_t)VideoReceiver_VideoAlarmForDisplay, a1, *(_DWORD *)(a2 + 8), a7, 1, *(double *)(a2 + 16));
        }
      }
      if (_VideoReceiver_CanDequeue(v14, a5, *(_DWORD *)(a2 + 8)))
      {
        do
        {
          if (*(unsigned char *)(v14 + 41168))
          {
            double v29 = *(double *)a2;
            os_unfair_lock_lock((os_unfair_lock_t)(v14 + 41172));
            *(double *)(v14 + 41160) = v29;
            if (*(double *)(v14 + 41144) < v29) {
              *(void *)(v14 + 41144) = 0;
            }
            os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 41172));
          }
          if (a5)
          {
            double v30 = *(double *)a2;
            pthread_mutex_lock((pthread_mutex_t *)(v14 + 41320));
            uint64_t v31 = (char *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(v14 + 41312));
            int v48 = (const __CFAllocator **)v31;
            pthread_mutex_unlock((pthread_mutex_t *)(v14 + 41320));
            if (v31)
            {
              CMTimeMake(&buf, (uint64_t)(v30 * 1000000000.0), 1000000000);
              *(CMTime *)(v31 + 80) = buf;
              v31[66] = a6;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
              {
                uint64_t v32 = VRTraceErrorLogLevelToCSTR();
                uint64_t v33 = *MEMORY[0x1E4F47A50];
                uint64_t v34 = *MEMORY[0x1E4F47A50];
                if (*MEMORY[0x1E4F47A40])
                {
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                  {
                    int v35 = *((unsigned __int16 *)v31 + 24);
                    int v36 = *((_DWORD *)v31 + 6);
                    int v37 = v31[72];
                    LODWORD(buf.value) = 136317186;
                    *(CMTimeValue *)((char *)&buf.value + 4) = v32;
                    LOWORD(buf.flags) = 2080;
                    *(void *)((char *)&buf.flags + 2) = "_VideoReceiver_DequeueAndDisplayFrame";
                    HIWORD(buf.epoch) = 1024;
                    int v50 = 566;
                    __int16 v51 = 2048;
                    uint64_t v52 = v14;
                    __int16 v53 = 1024;
                    int v54 = v35;
                    __int16 v55 = 1024;
                    int v56 = v36;
                    __int16 v57 = 2048;
                    double v58 = v30;
                    __int16 v59 = 1024;
                    int v60 = a6;
                    __int16 v61 = 1024;
                    int v62 = v37;
                    _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] for streamID=%u dequeue and display frame. RTPTimestamp=%u presentationTime=%f shouldShowFrame=%d canStopVideoStall=%d", (uint8_t *)&buf, 0x48u);
                  }
                }
                else if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                {
                  int v38 = *((unsigned __int16 *)v31 + 24);
                  int v39 = *((_DWORD *)v31 + 6);
                  int v40 = v31[72];
                  LODWORD(buf.value) = 136317186;
                  *(CMTimeValue *)((char *)&buf.value + 4) = v32;
                  LOWORD(buf.flags) = 2080;
                  *(void *)((char *)&buf.flags + 2) = "_VideoReceiver_DequeueAndDisplayFrame";
                  HIWORD(buf.epoch) = 1024;
                  int v50 = 566;
                  __int16 v51 = 2048;
                  uint64_t v52 = v14;
                  __int16 v53 = 1024;
                  int v54 = v38;
                  __int16 v55 = 1024;
                  int v56 = v39;
                  __int16 v57 = 2048;
                  double v58 = v30;
                  __int16 v59 = 1024;
                  int v60 = a6;
                  __int16 v61 = 1024;
                  int v62 = v40;
                  _os_log_debug_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] for streamID=%u dequeue and display frame. RTPTimestamp=%u presentationTime=%f shouldShowFrame=%d canStopVideoStall=%d", (uint8_t *)&buf, 0x48u);
                }
              }
              _VideoReceiver_ShowFrame(v14, (uint64_t)v31);
              _VideoReceiver_CheckAndRequestKeyFrame(v14, (uint64_t)v31);
              VCVideoReceiverDecodedFrame_Destroy(&v48);
            }
            else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v41 = VRTraceErrorLogLevelToCSTR();
              int v42 = *MEMORY[0x1E4F47A50];
              uint64_t v43 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf.value) = 136315906;
                  *(CMTimeValue *)((char *)&buf.value + 4) = v41;
                  LOWORD(buf.flags) = 2080;
                  *(void *)((char *)&buf.flags + 2) = "_VideoReceiver_DequeueAndDisplayFrame";
                  HIWORD(buf.epoch) = 1024;
                  int v50 = 561;
                  __int16 v51 = 2048;
                  uint64_t v52 = v14;
                  _os_log_impl(&dword_1E1EA4000, v42, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to dequeue and display frame.  No frame returned from the queue.", (uint8_t *)&buf, 0x26u);
                }
              }
              else if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
              {
                LODWORD(buf.value) = 136315906;
                *(CMTimeValue *)((char *)&buf.value + 4) = v41;
                LOWORD(buf.flags) = 2080;
                *(void *)((char *)&buf.flags + 2) = "_VideoReceiver_DequeueAndDisplayFrame";
                HIWORD(buf.epoch) = 1024;
                int v50 = 561;
                __int16 v51 = 2048;
                uint64_t v52 = v14;
                _os_log_debug_impl(&dword_1E1EA4000, v42, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to dequeue and display frame.  No frame returned from the queue.", (uint8_t *)&buf, 0x26u);
              }
            }
          }
          else
          {
            _VideoReceiver_DequeueAndDecode(v14, *(_DWORD *)(a2 + 8), *(double *)a2, *(double *)(a2 + 16));
          }
        }
        while ((_VideoReceiver_CanDequeue(v14, a5, *(_DWORD *)(a2 + 8)) & 1) != 0);
      }
    }
    else if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v18 = VRTraceErrorLogLevelToCSTR();
      CFArrayRef v19 = *MEMORY[0x1E4F47A50];
      uint64_t v20 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.value) = 136315906;
          *(CMTimeValue *)((char *)&buf.value + 4) = v18;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "_VideoReceiver_VideoAlarmCommon";
          HIWORD(buf.epoch) = 1024;
          int v50 = 2142;
          __int16 v51 = 2048;
          uint64_t v52 = v14;
          _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] stopping", (uint8_t *)&buf, 0x26u);
        }
      }
      else if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        _VideoReceiver_VideoAlarmCommon_cold_2();
      }
    }
    CheckOutHandleDebug();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v21 = VRTraceErrorLogLevelToCSTR();
    int v22 = *MEMORY[0x1E4F47A50];
    uint64_t v23 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 136315906;
        *(CMTimeValue *)((char *)&buf.value + 4) = v21;
        LOWORD(buf.flags) = 2080;
        *(void *)((char *)&buf.flags + 2) = "_VideoReceiver_VideoAlarmCommon";
        HIWORD(buf.epoch) = 1024;
        int v50 = 2137;
        __int16 v51 = 1024;
        LODWORD(v52) = a5;
        _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver is null. alarmType=%d", (uint8_t *)&buf, 0x22u);
      }
    }
    else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      _VideoReceiver_VideoAlarmCommon_cold_1();
    }
  }
}

const void *_VideoReceiver_CanDequeue(uint64_t a1, int a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (opaqueCMSimpleQueue **)(a1 + 41304);
  if (a2) {
    uint64_t v6 = (opaqueCMSimpleQueue **)(a1 + 41312);
  }
  uint64_t v7 = *v6;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    uint64_t v9 = *MEMORY[0x1E4F47A50];
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 136316418;
        uint64_t v17 = v8;
        __int16 v18 = 2080;
        CFArrayRef v19 = "_VideoReceiver_CanDequeue";
        __int16 v20 = 1024;
        int v21 = 534;
        __int16 v22 = 2048;
        uint64_t v23 = a1;
        __int16 v24 = 1024;
        int v25 = a3;
        __int16 v26 = 1024;
        int32_t Count = CMSimpleQueueGetCount(v7);
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] alarmRTPTimestamp=%u count=%d", (uint8_t *)&v16, 0x32u);
        if (!a2) {
          goto LABEL_14;
        }
LABEL_10:
        BOOL v11 = (pthread_mutex_t *)(a1 + 41320);
        pthread_mutex_lock(v11);
        Head = CMSimpleQueueGetHead(v7);
        if (!Head)
        {
          pthread_mutex_unlock(v11);
          return 0;
        }
        int v13 = Head[6];
        pthread_mutex_unlock(v11);
        return (const void *)(v13 == a3 || (v13 - a3) > 0x7FFFFFFE);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v16 = 136316418;
      uint64_t v17 = v8;
      __int16 v18 = 2080;
      CFArrayRef v19 = "_VideoReceiver_CanDequeue";
      __int16 v20 = 1024;
      int v21 = 534;
      __int16 v22 = 2048;
      uint64_t v23 = a1;
      __int16 v24 = 1024;
      int v25 = a3;
      __int16 v26 = 1024;
      int32_t Count = CMSimpleQueueGetCount(v7);
      _os_log_debug_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] alarmRTPTimestamp=%u count=%d", (uint8_t *)&v16, 0x32u);
      if (a2) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
  }
  if (a2) {
    goto LABEL_10;
  }
LABEL_14:
  double result = CMSimpleQueueGetHead(v7);
  if (!result) {
    return result;
  }
  int v13 = *((_DWORD *)CMSimpleQueueGetHead(v7) + 4);
  return (const void *)(v13 == a3 || (v13 - a3) > 0x7FFFFFFE);
}

void _VideoReceiver_DequeueAndDecode(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v7 = a1;
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 40864;
  uint64_t v9 = (const __CFAllocator **)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 41304));
  int v199 = v9;
  if (!v9)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoReceiver_DequeueAndDecode_cold_1();
      }
    }
    goto LABEL_230;
  }
  uint64_t v10 = v9;
  *((double *)v9 + 4) = a3;
  unsigned int v11 = *(unsigned __int16 *)(v7 + 1162);
  if (v11 < 2) {
    Stream = _VideoReceiver_GetStream((unsigned int *)v7, *((unsigned __int16 *)v9 + 10), *((unsigned __int8 *)v9 + 64));
  }
  else {
    Stream = _VideoReceiver_GetStreamWithTileIndex((unsigned int *)v7, *((unsigned __int16 *)v9 + 22));
  }
  int v13 = Stream;
  if (!Stream)
  {
    uint64_t v177 = v7;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v178 = VRTraceErrorLogLevelToCSTR();
      int v179 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v180 = *((unsigned __int16 *)v10 + 10);
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v178;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_DequeueAndDecode";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2045;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v177;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v180;
        _os_log_error_impl(&dword_1E1EA4000, v179, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to find the VCVideoReceiverStream matching streamID %d", buf, 0x2Cu);
      }
    }
    goto LABEL_230;
  }
  uint64_t v14 = v7 + 40372;
  if (*(unsigned char *)(v7 + 1253)) {
    BOOL v15 = *((unsigned char *)v10 + 82) != 0;
  }
  else {
    BOOL v15 = 0;
  }
  int v189 = a2;
  unsigned int v16 = _VideoReceiver_CanDequeue(v7, 0, a2);
  char v190 = v15 | v16;
  unsigned int v191 = v11;
  int v17 = (v15 | v16) ^ 1;
  if (v11 > 1) {
    int v17 = 1;
  }
  double v193 = v13;
  uint64_t v194 = v7 + 40372;
  int v192 = v17;
  if ((v17 & 1) == 0)
  {
    unsigned int v18 = v16;
    int v19 = *(_DWORD *)(v7 + 40704);
    int v20 = *((_DWORD *)v10 + 4);
    uint64_t v21 = v7;
    int v22 = *(_DWORD *)(v7 + 1032);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v23 = VRTraceErrorLogLevelToCSTR();
      __int16 v24 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136318210;
        int v25 = *((_DWORD *)v10 + 2);
        int v26 = *((_DWORD *)v10 + 4);
        int v27 = *(_DWORD *)(v194 + 332);
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_DequeueAndDecode";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2063;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v21;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v25;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v26;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v189;
        *(_WORD *)&buf[56] = 1024;
        *(_DWORD *)&buf[58] = v27;
        *(_WORD *)&buf[62] = 2048;
        *(void *)&buf[64] = 96;
        *(_WORD *)&buf[72] = 1024;
        *(_DWORD *)&buf[74] = 0;
        *(_WORD *)&buf[78] = 1024;
        *(_DWORD *)&buf[80] = v15;
        *(_WORD *)&buf[84] = 1024;
        *(_DWORD *)&buf[86] = v18;
        *(_WORD *)&buf[90] = 2048;
        *(double *)&buf[92] = (double)(v19 - v20) / (double)v22;
        _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] decode but skip frame payload=%d sampleBuffer.timestamp=%u alarmRtpTimestamp=%u playoutRTPTimestamp=%u argsLength=%zu shouldShowFrame=%d didFrameArriveLate=%d canDequeue=%d exceededTime=%2.4f", buf, 0x64u);
      }
    }
    ++*(_DWORD *)(v8 + 180);
    uint64_t v7 = v21;
    int v13 = v193;
    uint64_t v14 = v194;
  }
  unsigned int v28 = *((unsigned __int16 *)v10 + 24);
  if (*(unsigned char *)(v8 + 148))
  {
    unsigned int v29 = *(_DWORD *)(v8 + 168);
    if (v28 != (unsigned __int16)v29 && (unsigned __int16)(v28 - v29) <= 0x7FFEu)
    {
      if (v28 < (unsigned __int16)v29) {
        v29 += 0x10000;
      }
      unsigned int v29 = v29 & 0xFFFF0000 | v28;
      *(_DWORD *)(v8 + 168) = v29;
    }
  }
  else
  {
    *(_DWORD *)(v8 + 168) = v28;
    *(_WORD *)(v8 + 160) = v28;
    *(unsigned char *)(v8 + 148) = 1;
    LOWORD(v29) = v28;
  }
  __int16 v30 = v29 - *(_WORD *)(v8 + 160);
  *(_WORD *)(v8 + 162) = v30 + 1;
  if (!*(_WORD *)(v8 + 164)) {
    *(_WORD *)(v8 + 164) = v30;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v31 = VRTraceErrorLogLevelToCSTR();
    uint64_t v32 = *MEMORY[0x1E4F47A50];
    uint64_t v33 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        int v34 = *(unsigned __int16 *)(v8 + 162);
        int v35 = *(unsigned __int16 *)(v8 + 164);
        int v36 = *(_DWORD *)(v8 + 168);
        int v37 = *(unsigned __int16 *)(v8 + 160);
        *(_DWORD *)CMTime buf = 136316930;
        *(void *)&uint8_t buf[4] = v31;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedNetworkFrameNumber";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2018;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v7;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v34;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v35;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v36;
        *(_WORD *)&buf[56] = 1024;
        *(_DWORD *)&buf[58] = v37;
        _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] expectedNetworkFrameNumber=%d lastReportedExpectedNetworkFrameNumber=%d maxFrameSequenceNumber=%d baseFrameSequenceNumber=%d", buf, 0x3Eu);
      }
    }
    else if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      int v137 = *(unsigned __int16 *)(v8 + 162);
      int v138 = *(unsigned __int16 *)(v8 + 164);
      int v139 = *(_DWORD *)(v8 + 168);
      int v140 = *(unsigned __int16 *)(v8 + 160);
      *(_DWORD *)CMTime buf = 136316930;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedNetworkFrameNumber";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2018;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v7;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&uint8_t buf[40] = v137;
      *(_WORD *)&unsigned char buf[44] = 1024;
      *(_DWORD *)&buf[46] = v138;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = v139;
      *(_WORD *)&buf[56] = 1024;
      *(_DWORD *)&buf[58] = v140;
      _os_log_debug_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] expectedNetworkFrameNumber=%d lastReportedExpectedNetworkFrameNumber=%d maxFrameSequenceNumber=%d baseFrameSequenceNumber=%d", buf, 0x3Eu);
    }
  }
  if (*(unsigned char *)(v8 + 345))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v38 = VRTraceErrorLogLevelToCSTR();
      int v39 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v40 = *((unsigned __int16 *)v10 + 10);
        int v41 = *((_DWORD *)v10 + 2);
        int v42 = *((_DWORD *)v10 + 4);
        *(_DWORD *)CMTime buf = 136317186;
        *(void *)&uint8_t buf[4] = v38;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_DequeueAndDecode";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2071;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v7;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v40;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v41;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v42;
        *(_WORD *)&buf[56] = 2048;
        *(void *)&buf[58] = 96;
        *(_WORD *)&buf[66] = 1024;
        *(_DWORD *)&buf[68] = v192;
        _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] for streamID:%d dequeue frame for decode payload:%d timestamp:%u argsLength:%zu shouldShowFrame:%d", buf, 0x48u);
      }
    }
  }
  int32_t v200 = -1431655766;
  int32_t v201 = -1431655766;
  double v43 = micro();
  if (*(unsigned char *)(v8 + 328) && *(void *)(v8 + 336))
  {
    int v44 = *((_DWORD *)v10 + 4);
    memset(md, 170, 20);
    size_t lengthAtOffsetOut = 0;
    dataPointerOut = 0;
    *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&c.data[9] = v45;
    *(_OWORD *)&c.data[13] = v45;
    *(_OWORD *)&c.data[1] = v45;
    *(_OWORD *)&c.data[5] = v45;
    *(_OWORD *)&c.h0 = v45;
    *(_OWORD *)&c.h4 = v45;
    CC_SHA1_Init(&c);
    if (CMBlockBufferGetDataPointer(v10[13], 0, &lengthAtOffsetOut, 0, &dataPointerOut))
    {
      int v46 = 0;
    }
    else
    {
      size_t v47 = 0;
      do
      {
        CC_SHA1_Update(&c, dataPointerOut, lengthAtOffsetOut);
        v47 += lengthAtOffsetOut;
      }
      while (!CMBlockBufferGetDataPointer(v10[13], v47, &lengthAtOffsetOut, 0, &dataPointerOut));
      int v46 = v47;
    }
    CC_SHA1_Final(md, &c);
    int v48 = *(FILE **)(v8 + 336);
    fprintf(v48, "[%08X:%dB SHA1:", v44, v46);
    for (uint64_t i = 0; i != 20; ++i)
      fprintf(v48, "%02X", md[i]);
    fwrite("]\n", 2uLL, 1uLL, v48);
    *(void *)&long long v50 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v50 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&buf[284] = v50;
    *(_OWORD *)&buf[257] = v50;
    *(_OWORD *)&buf[273] = v50;
    *(_OWORD *)&buf[241] = v50;
    *(_OWORD *)&buf[225] = v50;
    *(_OWORD *)&buf[209] = v50;
    *(_OWORD *)&buf[193] = v50;
    *(_OWORD *)&buf[177] = v50;
    *(_OWORD *)&buf[161] = v50;
    *(_OWORD *)&buf[145] = v50;
    *(_OWORD *)&buf[129] = v50;
    *(_OWORD *)&buf[113] = v50;
    *(_OWORD *)&buf[97] = v50;
    *(_OWORD *)&buf[81] = v50;
    *(_OWORD *)&buf[65] = v50;
    *(_OWORD *)&buf[49] = v50;
    *(_OWORD *)&buf[33] = v50;
    *(_OWORD *)&buf[17] = v50;
    *(_OWORD *)&buf[1] = v50;
    LODWORD(v209) = -1431655766;
    long long v207 = v50;
    long long v208 = v50;
    *(_OWORD *)&valuePtr[32] = v50;
    *(_OWORD *)&valuePtr[48] = v50;
    *(_OWORD *)CMTime valuePtr = v50;
    *(_OWORD *)&valuePtr[16] = v50;
    buf[0] = 0;
    size_t lengthAtOffsetOut = 0;
    dataPointerOut = 0;
    if (!CMBlockBufferGetDataPointer(v10[13], 0, &lengthAtOffsetOut, 0, &dataPointerOut))
    {
      char v51 = 0;
      size_t v52 = 0;
      do
      {
        size_t v53 = lengthAtOffsetOut;
        if (lengthAtOffsetOut)
        {
          for (size_t j = 0; j < lengthAtOffsetOut; ++j)
          {
            __sprintf_chk(valuePtr, 0, 0x64uLL, " %02X", dataPointerOut[j]);
            __strlcat_chk();
            if ((~(v51 + (_BYTE)j) & 0x1F) == 0)
            {
              fprintf(v48, "%s\n", buf);
              buf[0] = 0;
            }
            size_t v53 = lengthAtOffsetOut;
          }
          v51 += j;
        }
        v52 += v53;
      }
      while (!CMBlockBufferGetDataPointer(v10[13], v52, &lengthAtOffsetOut, 0, &dataPointerOut));
      int v13 = v193;
      uint64_t v14 = v194;
      if ((v51 & 0x1F) != 0) {
        fprintf(v48, "%s\n", buf);
      }
    }
  }
  CC_LONG v55 = *((_DWORD *)v10 + 2);
  if (v55 == 100) {
    uint64_t v56 = 1752589105;
  }
  else {
    uint64_t v56 = 1635148593;
  }
  *(_DWORD *)(v8 + 800) = v56;
  int v57 = *((_DWORD *)v10 + 3);
  int v58 = *((_DWORD *)v10 + 4);
  if (v55 - 110 <= 0xF && ((1 << (v55 - 110)) & 0xC001) != 0) {
    *(_DWORD *)(v14 + 448) = 1;
  }
  if (v57 == 2)
  {
    *(void *)md = 0;
    size_t v59 = *((int *)v10 + 56);
    dataPointerOut = (char *)v59;
    memset(buf, 170, sizeof(buf));
    if (v59 >= 0x801)
    {
      size_t v59 = 2048;
      dataPointerOut = (char *)2048;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v60 = VRTraceErrorLogLevelToCSTR();
        __int16 v61 = *MEMORY[0x1E4F47A50];
        size_t v59 = 2048;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime valuePtr = 136315906;
          *(void *)&valuePtr[4] = v60;
          *(_WORD *)&valuePtr[12] = 2080;
          *(void *)&valuePtr[14] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
          *(_WORD *)&valuePtr[22] = 1024;
          *(_DWORD *)&valuePtr[24] = 965;
          *(_WORD *)&valuePtr[28] = 2048;
          *(void *)&valuePtr[30] = 2048;
          _os_log_error_impl(&dword_1E1EA4000, v61, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d ParameterSet size=%zu too large", valuePtr, 0x26u);
          size_t v59 = (size_t)dataPointerOut;
        }
        int v13 = v193;
      }
    }
    OSStatus v62 = CMBlockBufferAccessDataBytes(v10[13], 0, v59, buf, (char **)md);
    if (v62)
    {
      OSStatus v63 = v62;
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        goto LABEL_70;
      }
      uint64_t v64 = VRTraceErrorLogLevelToCSTR();
      __int16 v65 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        goto LABEL_70;
      }
      *(_DWORD *)CMTime valuePtr = 136316162;
      *(void *)&valuePtr[4] = v64;
      *(_WORD *)&valuePtr[12] = 2080;
      *(void *)&valuePtr[14] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
      *(_WORD *)&valuePtr[22] = 1024;
      *(_DWORD *)&valuePtr[24] = 970;
      *(_WORD *)&valuePtr[28] = 2048;
      *(void *)&valuePtr[30] = v7;
      *(_WORD *)&valuePtr[38] = 1024;
      *(_DWORD *)&valuePtr[40] = v63;
      int v174 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] CMBlockBufferAccessDataBytes returned error:%i";
      p_CC_SHA1_CTX c = valuePtr;
LABEL_232:
      _os_log_error_impl(&dword_1E1EA4000, v65, OS_LOG_TYPE_ERROR, v174, p_c, 0x2Cu);
LABEL_70:
      int v66 = 1;
LABEL_71:
      SampleFromBuffer = 0;
      goto LABEL_72;
    }
    long long v75 = *(char **)md;
    uint64_t v76 = (_DWORD *)v194;
    if ((VideoDecoder_IsFormatCompatible_SPSPPS(*(void *)(v194 + 84), v56, *(uint64_t *)md, &dataPointerOut, 0, &v201, &v200) & 0x80000000) != 0)
    {
      *(void *)((char *)v211 + 14) = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v109 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v109 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v210 = v109;
      v211[0] = v109;
      long long v208 = v109;
      long long v209 = v109;
      *(_OWORD *)&valuePtr[48] = v109;
      long long v207 = v109;
      *(_OWORD *)&valuePtr[16] = v109;
      *(_OWORD *)&valuePtr[32] = v109;
      *(_OWORD *)CMTime valuePtr = v109;
      CFDictionaryRef v110 = (const __CFDictionary *)*((void *)v13 + 7);
      c.h0 = v55;
      CFNumberRef v111 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberIntType, &c);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v110, v111);
      CFRelease(v111);
      if (!Value || !CFStringGetCString(Value, valuePtr, 150, 0x8000100u) || !valuePtr[0])
      {
        valuePtr[0] = 0;
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        int v66 = 0;
        int v13 = v193;
        if (ErrorLogLevelForModule >= 3)
        {
          uint64_t v119 = VRTraceErrorLogLevelToCSTR();
          int v120 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            c.h0 = 136316162;
            *(void *)&c.h1 = v119;
            LOWORD(c.h3) = 2080;
            *(void *)((char *)&c.h3 + 2) = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
            HIWORD(c.Nl) = 1024;
            c.Nh = 984;
            LOWORD(c.data[0]) = 2048;
            *(void *)((char *)c.data + 2) = v7;
            HIWORD(c.data[2]) = 1024;
            c.data[3] = v55;
            _os_log_error_impl(&dword_1E1EA4000, v120, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] No matched feature list string for payload: %d", (uint8_t *)&c, 0x2Cu);
          }
          int v66 = 0;
        }
        goto LABEL_71;
      }
      int v13 = v193;
      if ((*(_DWORD *)v194 & 0xFFFFFFFE) == 2) {
        int v113 = 42;
      }
      else {
        int v113 = 1;
      }
      CC_LONG v114 = *(unsigned __int8 *)(v8 + 592) | (2 * *((unsigned __int8 *)v193 + 108));
      if ((VideoDecoder_NewFormat_SPSPPS(*(void *)(v194 + 84), v75, (int *)&dataPointerOut, valuePtr, &v201, &v200, v55, v114, *(_WORD *)(v7 + 1162), v113) & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          goto LABEL_70;
        }
        uint64_t v176 = VRTraceErrorLogLevelToCSTR();
        __int16 v65 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_70;
        }
        c.h0 = 136316162;
        *(void *)&c.h1 = v176;
        LOWORD(c.h3) = 2080;
        *(void *)((char *)&c.h3 + 2) = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
        HIWORD(c.Nl) = 1024;
        c.Nh = 994;
        LOWORD(c.data[0]) = 2048;
        *(void *)((char *)c.data + 2) = v7;
        HIWORD(c.data[2]) = 1024;
        c.data[3] = v114;
        int v174 = "VideoReceiver [%s] %s:%d VideoReceiver=%p decoderFlags=%d VideoDecoder_NewFormat_SPSPPS failed";
        p_CC_SHA1_CTX c = (uint8_t *)&c;
        goto LABEL_232;
      }
      uint64_t v76 = (_DWORD *)v194;
    }
    v76[110] = v201;
    v76[111] = v200;
    v76[112] = 1;
    *(_WORD *)(v8 + 362) = *(_WORD *)v13;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v77 = VRTraceErrorLogLevelToCSTR();
      long long v78 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v79 = *(void *)(v7 + 1152);
        int v80 = *(unsigned __int16 *)v13;
        *(_DWORD *)CMTime valuePtr = 136317186;
        *(void *)&valuePtr[4] = v77;
        *(_WORD *)&valuePtr[12] = 2080;
        *(void *)&valuePtr[14] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
        *(_WORD *)&valuePtr[22] = 1024;
        *(_DWORD *)&valuePtr[24] = 1004;
        *(_WORD *)&valuePtr[28] = 2048;
        *(void *)&valuePtr[30] = v7;
        *(_WORD *)&valuePtr[38] = 2048;
        *(void *)&valuePtr[40] = v79;
        *(_WORD *)&valuePtr[48] = 2048;
        *(void *)&valuePtr[50] = v13;
        *(_WORD *)&valuePtr[58] = 1024;
        *(_DWORD *)&valuePtr[60] = v80;
        LOWORD(v207) = 1024;
        *(_DWORD *)((char *)&v207 + 2) = v201;
        WORD3(v207) = 1024;
        DWORD2(v207) = v200;
        _os_log_impl(&dword_1E1EA4000, v78, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] participantId[%llu] stream[%p] streamId[%d] Got ImgDesc:%dx%d", valuePtr, 0x4Cu);
      }
    }
    unsigned int v82 = (CFTypeRef *)(v8 + 72);
    unint64_t v81 = *(const void **)(v8 + 72);
    if (!v81) {
      goto LABEL_86;
    }
LABEL_85:
    CFRelease(v81);
    *unsigned int v82 = 0;
LABEL_86:
    uint64_t v14 = v194;
    VideoDecoder_GetFormatDescription(*(void *)(v194 + 84), v82);
    if (*v82)
    {
      CFRetain(*v82);
      if (*(_DWORD *)(v7 + 1068)) {
        VideoReceiver_DumpRecvSPSPPS(v7, v55, (unsigned __int16 *)v13);
      }
    }
    if (*(void *)v8)
    {
      CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)v8);
      *(void *)uint64_t v8 = 0;
    }
    VideoDecoder_GetBufferPool();
    goto LABEL_92;
  }
  c.h0 = -1431655766;
  *(_DWORD *)md = -1431655766;
  if (!v10[16]) {
    goto LABEL_92;
  }
  int v68 = (char *)v10[18] + 4;
  uint64_t v69 = *(void *)(v14 + 84);
  int v70 = *((_DWORD *)v10 + 34) - 4;
  if ((VideoDecoder_IsFormatCompatible_ImgDesc(v69, v68, v70, 0) & 0x80000000) != 0)
  {
    *(void *)&buf[142] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v96 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v96 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&uint8_t buf[112] = v96;
    *(_OWORD *)&buf[128] = v96;
    *(_OWORD *)&buf[80] = v96;
    *(_OWORD *)&uint8_t buf[96] = v96;
    *(_OWORD *)&buf[48] = v96;
    *(_OWORD *)&buf[64] = v96;
    *(_OWORD *)&buf[16] = v96;
    *(_OWORD *)&buf[32] = v96;
    *(_OWORD *)CMTime buf = v96;
    CFDictionaryRef v97 = (const __CFDictionary *)*((void *)v13 + 7);
    *(_DWORD *)CMTime valuePtr = v55;
    CFNumberRef v98 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberIntType, valuePtr);
    CFStringRef v99 = (const __CFString *)CFDictionaryGetValue(v97, v98);
    CFRelease(v98);
    if (!v99 || !CFStringGetCString(v99, buf, 150, 0x8000100u) || !buf[0])
    {
      buf[0] = 0;
      if (v55 == 126)
      {
        CFDictionaryRef v100 = (const __CFDictionary *)*((void *)v193 + 7);
        *(_DWORD *)CMTime valuePtr = 123;
        CFNumberRef v101 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberIntType, valuePtr);
        CFStringRef v102 = (const __CFString *)CFDictionaryGetValue(v100, v101);
        CFRelease(v101);
        if (v102 && CFStringGetCString(v102, buf, 150, 0x8000100u) && buf[0]) {
          goto LABEL_132;
        }
        buf[0] = 0;
      }
      int v13 = v193;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v131 = VRTraceErrorLogLevelToCSTR();
        int v132 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime valuePtr = 136316162;
          *(void *)&valuePtr[4] = v131;
          *(_WORD *)&valuePtr[12] = 2080;
          *(void *)&valuePtr[14] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
          *(_WORD *)&valuePtr[22] = 1024;
          *(_DWORD *)&valuePtr[24] = 1038;
          *(_WORD *)&valuePtr[28] = 2048;
          *(void *)&valuePtr[30] = v7;
          *(_WORD *)&valuePtr[38] = 1024;
          *(_DWORD *)&valuePtr[40] = v55;
          _os_log_error_impl(&dword_1E1EA4000, v132, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] No matched feature list string for payload: %d", valuePtr, 0x2Cu);
        }
      }
      int v133 = 0;
      uint64_t v14 = v194;
      goto LABEL_178;
    }
LABEL_132:
    if ((*(_DWORD *)v194 & 0xFFFFFFFE) == 2) {
      int v103 = 42;
    }
    else {
      int v103 = 1;
    }
    int v104 = *(unsigned __int8 *)(v8 + 592) | (2 * *((unsigned __int8 *)v193 + 108));
    if ((VideoDecoder_NewFormat_ImgDesc(*(void *)(v194 + 84), v68, v70, buf, (int32_t *)&c, (int32_t *)md, v104, *(_WORD *)(v7 + 1162), v103) & 0x80000000) == 0)
    {
      *(_DWORD *)(v194 + 440) = c.h0;
      *(_DWORD *)(v194 + 444) = *(_DWORD *)md;
      *(_DWORD *)(v194 + 448) = 1;
      *(_WORD *)(v8 + 362) = *(_WORD *)v193;
      int v13 = v193;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v105 = VRTraceErrorLogLevelToCSTR();
        uint64_t v106 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v107 = *(void *)(v7 + 1152);
          int v108 = *(unsigned __int16 *)v193;
          *(_DWORD *)CMTime valuePtr = 136317186;
          *(void *)&valuePtr[4] = v105;
          *(_WORD *)&valuePtr[12] = 2080;
          *(void *)&valuePtr[14] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
          *(_WORD *)&valuePtr[22] = 1024;
          *(_DWORD *)&valuePtr[24] = 1057;
          *(_WORD *)&valuePtr[28] = 2048;
          *(void *)&valuePtr[30] = v7;
          *(_WORD *)&valuePtr[38] = 2048;
          *(void *)&valuePtr[40] = v107;
          *(_WORD *)&valuePtr[48] = 2048;
          *(void *)&valuePtr[50] = v193;
          *(_WORD *)&valuePtr[58] = 1024;
          *(_DWORD *)&valuePtr[60] = v108;
          LOWORD(v207) = 1024;
          *(_DWORD *)((char *)&v207 + 2) = c.h0;
          WORD3(v207) = 1024;
          DWORD2(v207) = *(_DWORD *)md;
          _os_log_impl(&dword_1E1EA4000, v106, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] participantId[%llu] stream[%p] streamId[%d] Got ImgDesc:%dx%d", valuePtr, 0x4Cu);
        }
      }
      unsigned int v82 = (CFTypeRef *)(v8 + 72);
      unint64_t v81 = *(const void **)(v8 + 72);
      if (!v81) {
        goto LABEL_86;
      }
      goto LABEL_85;
    }
    uint64_t v14 = v194;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v134 = VRTraceErrorLogLevelToCSTR();
      __int16 v135 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime valuePtr = 136316162;
        *(void *)&valuePtr[4] = v134;
        *(_WORD *)&valuePtr[12] = 2080;
        *(void *)&valuePtr[14] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
        *(_WORD *)&valuePtr[22] = 1024;
        *(_DWORD *)&valuePtr[24] = 1050;
        *(_WORD *)&valuePtr[28] = 2048;
        *(void *)&valuePtr[30] = v7;
        *(_WORD *)&valuePtr[38] = 1024;
        *(_DWORD *)&valuePtr[40] = v104;
        _os_log_error_impl(&dword_1E1EA4000, v135, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver=%p decoderFlags=%d VideoDecoder_NewFormat_SPSPPS failed", valuePtr, 0x2Cu);
      }
    }
    int v133 = 1;
    int v13 = v193;
LABEL_178:
    SampleFromBuffer = 0;
    if (v133) {
      goto LABEL_179;
    }
    goto LABEL_184;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v71 = VRTraceErrorLogLevelToCSTR();
    __int16 v72 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v73 = *(unsigned __int16 *)(v8 + 362);
      int v74 = *(unsigned __int16 *)v13;
      *(_DWORD *)CMTime buf = 136316418;
      *(void *)&uint8_t buf[4] = v71;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1078;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v7;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&uint8_t buf[40] = v73;
      *(_WORD *)&unsigned char buf[44] = 1024;
      *(_DWORD *)&buf[46] = v74;
      _os_log_impl(&dword_1E1EA4000, v72, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] update lastKeyFrameStreamId from %d to %d", buf, 0x32u);
    }
  }
  *(_WORD *)(v8 + 362) = *(_WORD *)v13;
  uint64_t v14 = v194;
LABEL_92:
  if (!*(_DWORD *)(v14 + 448))
  {
    SampleFromBuffer = 0;
    goto LABEL_179;
  }
  SampleFromBuffer = v10[15];
  if (!SampleFromBuffer) {
    goto LABEL_184;
  }
  if (*(_DWORD *)(v7 + 1068))
  {
    int v83 = *(unsigned __int16 *)v13;
    c.h0 = 0x1000000;
    if (*(_DWORD *)v14 == 1 && *(unsigned __int16 *)(v8 + 360) != v83) {
      VideoReceiver_DumpRecvCreate(v7, v83);
    }
    if (*(void *)(v8 + 368))
    {
      *(void *)CMTime buf = 0xAAAAAAAAAAAAAAAALL;
      *(void *)CMTime valuePtr = 0;
      if (!CMBlockBufferGetDataPointer(SampleFromBuffer, 0, (size_t *)buf, 0, (char **)valuePtr))
      {
        size_t v84 = 0;
        do
        {
          size_t v85 = bswap32(**(_DWORD **)valuePtr) + 4;
          fwrite(&c, 1uLL, 4uLL, *(FILE **)(v8 + 368));
          v84 += 4;
          if (v84 != v85)
          {
            do
            {
              CMBlockBufferGetDataPointer(SampleFromBuffer, v84, (size_t *)buf, 0, (char **)valuePtr);
              if (*(void *)buf >= v85 - v84) {
                size_t v86 = v85 - v84;
              }
              else {
                size_t v86 = *(void *)buf;
              }
              fwrite(*(const void **)valuePtr, 1uLL, v86, *(FILE **)(v8 + 368));
              v84 += v86;
            }
            while (v84 != v85);
            size_t v84 = v85;
            uint64_t v14 = v194;
          }
        }
        while (!CMBlockBufferGetDataPointer(SampleFromBuffer, v84, (size_t *)buf, 0, (char **)valuePtr));
      }
    }
  }
  if (*(_DWORD *)(v7 + 1056))
  {
    uint64_t v87 = *(const opaqueCMFormatDescription **)(v8 + 72);
    if (v87) {
      VideoReceiverUtil_CaptureBitstreamFile(v10[15], *(int *)(v7 + 1036) >> 2, v7 + 40856, v87, (v58 - *(_DWORD *)(v8 + 60)) >> 2);
    }
  }
  long long v88 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
  *(_OWORD *)&buf[32] = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
  *(_OWORD *)&buf[48] = v88;
  *(void *)&buf[64] = *(void *)(MEMORY[0x1E4F1FA70] + 64);
  long long v89 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
  *(_OWORD *)CMTime buf = *MEMORY[0x1E4F1FA70];
  *(_OWORD *)&buf[16] = v89;
  CMTimeMake((CMTime *)valuePtr, (uint64_t)(*((double *)v10 + 4) * 1000000000.0), 1000000000);
  *(_OWORD *)&unsigned char buf[24] = *(_OWORD *)valuePtr;
  *(void *)&uint8_t buf[40] = *(void *)&valuePtr[16];
  *(_OWORD *)&buf[48] = *MEMORY[0x1E4F1F9F8];
  *(void *)&buf[64] = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeMake((CMTime *)valuePtr, 1, 1);
  *(_OWORD *)CMTime buf = *(_OWORD *)valuePtr;
  *(void *)&buf[16] = *(void *)&valuePtr[16];
  unsigned int v90 = *((_DWORD *)v10 + 2) - 110;
  if (v90 > 0xF || ((1 << v90) & 0xC001) == 0)
  {
    if (*(unsigned __int16 *)v13 != *(unsigned __int16 *)(v8 + 362) && !*((unsigned char *)v13 + 70))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v141 = VRTraceErrorLogLevelToCSTR();
        __int16 v142 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v143 = *(unsigned __int16 *)v13;
          int v144 = *(unsigned __int16 *)(v8 + 362);
          int v145 = *((_DWORD *)v10 + 4);
          *(_DWORD *)CMTime valuePtr = 136316930;
          *(void *)&valuePtr[4] = v141;
          *(_WORD *)&valuePtr[12] = 2080;
          *(void *)&valuePtr[14] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
          *(_WORD *)&valuePtr[22] = 1024;
          *(_DWORD *)&valuePtr[24] = 1116;
          *(_WORD *)&valuePtr[28] = 2048;
          *(void *)&valuePtr[30] = v7;
          *(_WORD *)&valuePtr[38] = 1024;
          *(_DWORD *)&valuePtr[40] = v143;
          *(_WORD *)&valuePtr[44] = 1024;
          *(_DWORD *)&valuePtr[46] = v144;
          *(_WORD *)&valuePtr[50] = 1024;
          *(_DWORD *)&valuePtr[52] = v145;
          *(_WORD *)&valuePtr[56] = 1024;
          *(_DWORD *)&valuePtr[58] = v143;
          _os_log_impl(&dword_1E1EA4000, v142, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Skip frame due to mismatch with decoder. streamID=%d, lastKeyFrameStreamId=%d, timestamp=%u. Request key frame for streamID=%d", valuePtr, 0x3Eu);
        }
      }
      SampleFromBuffer = 0;
      goto LABEL_179;
    }
    uint64_t v115 = v10[13];
    uint64_t v116 = *(void *)(v8 + 536);
    uint64_t v117 = *(const opaqueCMFormatDescription **)(v8 + 72);
    *(_OWORD *)&valuePtr[32] = *(_OWORD *)&buf[32];
    *(_OWORD *)&valuePtr[48] = *(_OWORD *)&buf[48];
    *(void *)&long long v207 = *(void *)&buf[64];
    *(_OWORD *)CMTime valuePtr = *(_OWORD *)buf;
    *(_OWORD *)&valuePtr[16] = *(_OWORD *)&buf[16];
    SampleFromBuffer = VideoUtil_CreateSampleFromBuffer(v115, (const CMSampleTimingInfo *)valuePtr, v116, v117);
    if (SampleFromBuffer) {
      goto LABEL_119;
    }
    goto LABEL_152;
  }
  *(void *)CMTime valuePtr = 0;
  *(void *)&c.h0 = 0;
  if (CMFormatDescriptionCreate(*(CFAllocatorRef *)(v8 + 568), 0x6D657461u, 0x64617461u, 0, (CMFormatDescriptionRef *)&c))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoReceiver_DequeueAndDecode_cold_12();
      }
    }
  }
  else
  {
    if (!CMSampleBufferCreate(*(CFAllocatorRef *)(v8 + 576), v10[13], 1u, 0, 0, *(CMFormatDescriptionRef *)&c.h0, 1, 1, (const CMSampleTimingInfo *)buf, 0, 0, (CMSampleBufferRef *)valuePtr))
    {
      SampleFromBuffer = *(OpaqueCMBlockBuffer **)valuePtr;
      *(void *)CMTime valuePtr = 0;
      goto LABEL_116;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoReceiver_DequeueAndDecode_cold_11();
      }
    }
  }
  if (*(void *)valuePtr) {
    CFRelease(*(CFTypeRef *)valuePtr);
  }
  SampleFromBuffer = 0;
LABEL_116:
  if (*(void *)&c.h0) {
    CFRelease(*(CFTypeRef *)&c.h0);
  }
  if (!SampleFromBuffer)
  {
LABEL_152:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoReceiver_DequeueAndDecode_cold_3();
      }
      SampleFromBuffer = 0;
      int v66 = 0;
      int v13 = v193;
      goto LABEL_72;
    }
    SampleFromBuffer = 0;
LABEL_184:
    pthread_mutex_lock((pthread_mutex_t *)(v7 + 40536));
    SummerAdd((double)*(int *)(v14 + 308), v43);
    *(_DWORD *)(v14 + 308) = 0;
    SummerAdd((double)*(int *)(v14 + 312), v43);
    *(_DWORD *)(v14 + 312) = 0;
    SummerAdd((double)*(int *)(v14 + 320), v43);
    *(_DWORD *)(v14 + 320) = 0;
    SummerAdd((double)(unint64_t)v10[11], v43);
    SummerAdd((double)*(int *)(v14 + 316), v43);
    *(_DWORD *)(v14 + 316) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(v7 + 40536));
    char v136 = 1;
    goto LABEL_185;
  }
LABEL_119:
  LOBYTE(lengthAtOffsetOut) = *((unsigned char *)v10 + 22);
  CFNumberRef v91 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberCharType, &lengthAtOffsetOut);
  if (v91)
  {
    CFNumberRef v92 = v91;
    CMSetAttachment(SampleFromBuffer, @"FramePriority", v91, 1u);
    CFRelease(v92);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v93 = VRTraceErrorLogLevelToCSTR();
      unint64_t v94 = *MEMORY[0x1E4F47A50];
      CFNumberRef v95 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime valuePtr = 136316162;
          *(void *)&valuePtr[4] = v93;
          *(_WORD *)&valuePtr[12] = 2080;
          *(void *)&valuePtr[14] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
          *(_WORD *)&valuePtr[22] = 1024;
          *(_DWORD *)&valuePtr[24] = 908;
          *(_WORD *)&valuePtr[28] = 1024;
          *(_DWORD *)&valuePtr[30] = lengthAtOffsetOut;
          *(_WORD *)&valuePtr[34] = 2112;
          *(void *)&valuePtr[36] = @"FramePriority";
          _os_log_impl(&dword_1E1EA4000, v94, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d [Media Priority] Attaching video priority=%u as kVCPixelBufferOptionKey_FramePriority(%@)", valuePtr, 0x2Cu);
        }
      }
      else if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
      {
        _VideoReceiver_DequeueAndDecode_cold_10();
      }
    }
    *(_DWORD *)md = *((_DWORD *)v10 + 4);
    CFNumberRef v121 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberSInt32Type, md);
    if (v121)
    {
      CFNumberRef v122 = v121;
      CMSetAttachment(SampleFromBuffer, @"rtpTimestsamp", v121, 0);
      CFRelease(v122);
      *(void *)&c.h0 = VideoUtil_ConstructSubFrameIdentifer(*((unsigned __int16 *)v10 + 12), *((unsigned __int16 *)v10 + 22));
      CFNumberRef v123 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberSInt64Type, &c);
      int v13 = v193;
      if (v123)
      {
        CFNumberRef v124 = v123;
        CMSetAttachment(SampleFromBuffer, @"subFrameIndentifier", v123, 0);
        CFRelease(v124);
        uint64_t v14 = v194;
        kdebug_trace();
        if (*(unsigned __int16 *)(v7 + 1162) < 2u) {
          goto LABEL_184;
        }
        CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(SampleFromBuffer, 1u);
        CFNumberRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
        *(_DWORD *)CMTime valuePtr = *((unsigned __int16 *)v10 + 22);
        CFNumberRef v127 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberSInt32Type, valuePtr);
        if (v127)
        {
          CFNumberRef v128 = v127;
          CFDictionarySetValue(ValueAtIndex, @"TileID", v127);
          CFRelease(v128);
          LODWORD(dataPointerOut) = *((unsigned __int16 *)v10 + 12);
          CFNumberRef v129 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberSInt32Type, &dataPointerOut);
          if (v129)
          {
            CFNumberRef v130 = v129;
            CFDictionarySetValue(ValueAtIndex, @"TileOrder", v129);
            CFRelease(v130);
            uint64_t v14 = v194;
            goto LABEL_184;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VideoReceiver_DequeueAndDecode_cold_9();
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoReceiver_DequeueAndDecode_cold_8();
          }
        }
        int v13 = v193;
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoReceiver_DequeueAndDecode_cold_7();
        }
      }
    }
    else
    {
      int v13 = v193;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoReceiver_DequeueAndDecode_cold_6();
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoReceiver_DequeueAndDecode_cold_5();
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoReceiver_DequeueAndDecode_cold_4();
    }
  }
  CFRelease(SampleFromBuffer);
  SampleFromBuffer = 0;
  int v66 = 0;
LABEL_72:
  uint64_t v14 = v194;
  if (!v66) {
    goto LABEL_184;
  }
LABEL_179:
  char v136 = 0;
LABEL_185:
  if (*((_DWORD *)v10 + 3) == 2) {
    VideoPacketBuffer_SetFrameSize(*((void *)v13 + 14), v201, v200);
  }
  if ((v136 & 1) == 0 && !*((unsigned char *)v10 + 80))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v146 = VRTraceErrorLogLevelToCSTR();
      v147 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v148 = *(unsigned __int16 *)v13;
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v146;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_CreateSampleBufferForDecode";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1984;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v7;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v148;
        _os_log_impl(&dword_1E1EA4000, v147, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] CreateCompressedVideoFrameForDecode failed, request key frame for stream %d", buf, 0x2Cu);
      }
    }
    _VideoReceiver_DecoderNeedsRefresh(v7, (uint64_t)v13, 0, 19, v43);
  }
  if (SampleFromBuffer)
  {
    int v198 = *((_DWORD *)v199 + 4);
    CFNumberRef v149 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberSInt32Type, &v198);
    CMSetAttachment(SampleFromBuffer, @"rtpTimestsamp", v149, 0);
    unint64_t v197 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v197 = VideoUtil_ConstructSubFrameIdentifer(*((unsigned __int16 *)v199 + 12), *((unsigned __int16 *)v199 + 22));
    CFNumberRef v150 = CFNumberCreate(*(CFAllocatorRef *)(v8 + 664), kCFNumberSInt64Type, &v197);
    CMSetAttachment(SampleFromBuffer, @"subFrameIndentifier", v150, 0);
    kdebug_trace();
    if ((int)VRTraceGetErrorLogLevelForModule() <= 7)
    {
      char v153 = v199;
      char v154 = v190;
    }
    else
    {
      uint64_t v151 = VRTraceErrorLogLevelToCSTR();
      int v152 = *MEMORY[0x1E4F47A50];
      char v153 = v199;
      char v154 = v190;
      v155 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
        {
          CFAllocatorRef v156 = v153[4];
          int v157 = *((unsigned __int8 *)v153 + 23);
          int v158 = *((unsigned __int16 *)v153 + 22);
          *(_DWORD *)CMTime buf = 136316674;
          *(void *)&uint8_t buf[4] = v151;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_DequeueAndDecode";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 2086;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v198;
          *(_WORD *)&buf[34] = 2048;
          *(void *)&buf[36] = v156;
          *(_WORD *)&unsigned char buf[44] = 1024;
          *(_DWORD *)&buf[46] = v157;
          *(_WORD *)&buf[50] = 1024;
          *(_DWORD *)&buf[52] = v158;
          _os_log_impl(&dword_1E1EA4000, v152, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Start Decode RTPTimestamp=%u PresentationTime=%f isRefreshFrame=%d tileIndex=%u", buf, 0x38u);
        }
      }
      else if (os_log_type_enabled(v155, OS_LOG_TYPE_DEBUG))
      {
        CFAllocatorRef v171 = v153[4];
        int v172 = *((unsigned __int8 *)v153 + 23);
        int v173 = *((unsigned __int16 *)v153 + 22);
        *(_DWORD *)CMTime buf = 136316674;
        *(void *)&uint8_t buf[4] = v151;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_DequeueAndDecode";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2086;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v198;
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = v171;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v172;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v173;
        _os_log_debug_impl(&dword_1E1EA4000, v152, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d Start Decode RTPTimestamp=%u PresentationTime=%f isRefreshFrame=%d tileIndex=%u", buf, 0x38u);
      }
      int v13 = v193;
      uint64_t v14 = v194;
    }
    CFRelease(v150);
    CFRelease(v149);
    char v159 = *((unsigned char *)v153 + 22);
    int v160 = *((unsigned __int8 *)v153 + 23);
    char v161 = v154 ^ 1;
    if (v191 >= 2) {
      char v161 = 0;
    }
    unint64_t v196 = 0xAAAAAAAAAAAAAAAALL;
    if (v160) {
      char v161 = 1;
    }
    v195[0] = xmmword_1E259E7C8;
    memset(&v195[1], 170, 32);
    LODWORD(v195[0]) = v198;
    WORD2(v195[0]) = *((_WORD *)v153 + 24);
    *((double *)v195 + 1) = a4;
    *(void *)&v195[1] = v197;
    WORD4(v195[1]) = *(_WORD *)v13;
    uint64_t v162 = *(void *)(v7 + 1024);
    *(void *)&v195[2] = v162;
    unsigned __int16 v163 = *((_WORD *)v13 + 33);
    WORD4(v195[2]) = v163;
    BYTE10(v195[2]) = v192;
    *(_WORD *)((char *)&v195[2] + 11) = 0;
    BYTE13(v195[2]) = v159 != 0;
    BYTE14(v195[2]) = v159;
    HIBYTE(v195[2]) = *((unsigned char *)v13 + 69);
    LOBYTE(v196) = v161;
    BYTE1(v196) = *((unsigned char *)v153 + 80);
    BYTE2(v196) = *((unsigned char *)v153 + 96);
    HIDWORD(v196) = *((_DWORD *)v153 + 25);
    unsigned int v164 = *((_DWORD *)v153 + 2) - 110;
    if (v164 <= 0xF && ((1 << v164) & 0xC001) != 0)
    {
      *(void *)&c.h0 = 0;
      md[0] = 1;
      memset(valuePtr, 170, 24);
      CMSampleBufferGetPresentationTimeStamp((CMTime *)valuePtr, SampleFromBuffer);
      CFAllocatorRef v165 = *(const __CFAllocator **)(v8 + 560);
      *(_OWORD *)CMTime buf = *(_OWORD *)valuePtr;
      *(void *)&buf[16] = *(void *)&valuePtr[16];
      if (VCVideoReceiverDecodedFrame_Create(v165, &c, SampleFromBuffer, 0, v195, (long long *)buf))
      {
        if ((_VideoReceiver_EnqueueDecodedFrameForDisplay(*((void *)v13 + 16), v7, v195, &c, md) & 1) == 0)
        {
          uint64_t v185 = v7;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v186 = VRTraceErrorLogLevelToCSTR();
            uint64_t v183 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136316162;
              *(void *)&uint8_t buf[4] = v186;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_DecoderCallbackUncompressed";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 622;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = v185;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&uint8_t buf[40] = v195[0];
              __int16 v184 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to enqueue for display frame. timestamp=%u";
              goto LABEL_251;
            }
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v181 = v7;
        uint64_t v182 = VRTraceErrorLogLevelToCSTR();
        uint64_t v183 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v182;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_DecoderCallbackUncompressed";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 619;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v181;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&uint8_t buf[40] = v195[0];
          __int16 v184 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unable to create VCVideoReceiverDecodedFrame for frame with timestamp=%u";
LABEL_251:
          _os_log_error_impl(&dword_1E1EA4000, v183, OS_LOG_TYPE_ERROR, v184, buf, 0x2Cu);
        }
      }
      if (*(void *)&c.h0 && md[0]) {
        VCVideoReceiverDecodedFrame_Destroy((const __CFAllocator ***)&c);
      }
LABEL_229:
      CFRelease(SampleFromBuffer);
      goto LABEL_230;
    }
    valuePtr[0] = 0;
    LOBYTE(c.h0) = 0;
    md[0] = 0;
    *(_WORD *)(v8 + 176) = v163 * *(_WORD *)(v8 + 588);
    if (*(unsigned char *)(v8 + 149))
    {
      unsigned int v166 = v189 - *(_DWORD *)(v8 + 152);
      if (!v166 || v166 > 0x7FFFFFFE) {
        goto LABEL_219;
      }
    }
    else
    {
      *(unsigned char *)(v8 + 149) = 1;
    }
    *(_DWORD *)(v8 + 152) = v189;
    ++*(_WORD *)(v8 + 174);
LABEL_219:
    int v167 = VideoDecoder_DecodeFrame(*(void *)(v14 + 84), v162, valuePtr, &c, (BOOL *)md, SampleFromBuffer, v195);
    if (v167 < 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v168 = VRTraceErrorLogLevelToCSTR();
      int v169 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v168;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_DecodeFrame";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1827;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 1827;
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = v7;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v167;
        _os_log_error_impl(&dword_1E1EA4000, v169, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoReceiver.c:%d: VideoReceiver[%p] VideoPlayer_DecodeFrame failed (%08X)", buf, 0x32u);
      }
    }
    if (valuePtr[0] && !BYTE1(v196)) {
      _VideoReceiver_DecoderRequestKeyFrame(v7, (unsigned __int16 *)v13, 0x11u, v195[0], *((unsigned __int8 *)v13 + 100), md[0]);
    }
    uint64_t v170 = v7;
    if (LOBYTE(c.h0)) {
      ++*(_DWORD *)(v8 + 192);
    }
    if (v167 < 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v187 = VRTraceErrorLogLevelToCSTR();
      int v188 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v187;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_DequeueAndDecode";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2126;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v170;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v167;
        _os_log_error_impl(&dword_1E1EA4000, v188, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] _VideoReceiver_DecodeFrame failed (%08X)", buf, 0x2Cu);
      }
    }
    goto LABEL_229;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoReceiver_DequeueAndDecode_cold_2();
    }
  }
LABEL_230:
  VCVideoReceiverSampleBuffer_Destroy(&v199);
}

unsigned int *_VideoReceiver_GetStreamWithTileIndex(unsigned int *a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (v4)
  {
    double result = a1 + 368;
    while (*((unsigned __int8 *)result + 68) != a2)
    {
      result += 1080;
      if (!--v4) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      uint64_t v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v8 = 136316162;
        uint64_t v9 = v6;
        __int16 v10 = 2080;
        unsigned int v11 = "_VideoReceiver_GetStreamWithTileIndex";
        __int16 v12 = 1024;
        int v13 = 1464;
        __int16 v14 = 2048;
        BOOL v15 = a1;
        __int16 v16 = 1024;
        int v17 = a2;
        _os_log_error_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] unknown tileIndex:%u", (uint8_t *)&v8, 0x2Cu);
      }
    }
    return 0;
  }
  return result;
}

void _VideoReceiver_DecoderNeedsRefresh(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  _VideoReceiver_SendFIR(a1, a2, a3, a4, a5);
  if (a4 != 28) {
    _VideoReceiver_UpdateVideoStallStatus(a1, 1);
  }

  _VideoReceiver_ResetExpectedDecodingOrder(a1);
}

void VideoReceiver_DumpRecvSPSPPS(uint64_t a1, int a2, unsigned __int16 *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  size_t v26 = 0;
  if (*(_DWORD *)(a1 + 1068))
  {
    uint64_t v6 = a1 + 40936;
    if (*(_DWORD *)(a1 + 40372) == 1)
    {
      int v7 = *a3;
      if (*(unsigned __int16 *)(a1 + 41224) != v7) {
        VideoReceiver_DumpRecvCreate(a1, v7);
      }
    }
    if (*(void *)(v6 + 296))
    {
      CFDataRef AvcCFromFormatDescriptionForLog = extractAvcCFromFormatDescriptionForLog(*(const opaqueCMFormatDescription **)v6);
      if (AvcCFromFormatDescriptionForLog)
      {
        CFDataRef v9 = AvcCFromFormatDescriptionForLog;
        BytePtr = CFDataGetBytePtr(AvcCFromFormatDescriptionForLog);
        CFIndex Length = CFDataGetLength(v9);
        int v12 = Length;
        MEMORY[0x1F4188790](Length);
        __int16 v14 = (char *)&v26 - ((v13 + 15) & 0x1FFFFFFF0);
        if (v13) {
          memset((char *)&v26 - ((v13 + 15) & 0x1FFFFFFF0), 170, v13);
        }
        __int16 v15 = readAVCCAndEncodeH264SPSPPS((uint64_t)BytePtr, v12, (uint64_t)v14, &v26);
        if (v15)
        {
          __int16 v16 = v15;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v17 = VRTraceErrorLogLevelToCSTR();
            uint64_t v18 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136316418;
              *(void *)&uint8_t buf[4] = v17;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "VideoReceiver_DumpRecvSPSPPS";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 759;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = 759;
              *(_WORD *)&buf[34] = 2048;
              *(void *)&buf[36] = a1;
              *(_WORD *)&unsigned char buf[44] = 1024;
              *(_DWORD *)&buf[46] = v16;
              _os_log_error_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoReceiver.c:%d: VideoReceiver[%p] readAVCCAndEncodeH264SPSPPS %d", buf, 0x32u);
            }
          }
        }
        else
        {
          int __ptr = 50331648;
          fwrite(&__ptr, 1uLL, 4uLL, *(FILE **)(v6 + 296));
          *(void *)&v43[14] = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v42 = v19;
          *(_OWORD *)double v43 = v19;
          long long v40 = v19;
          long long v41 = v19;
          *(_OWORD *)&buf[48] = v19;
          long long v39 = v19;
          *(_OWORD *)&buf[16] = v19;
          *(_OWORD *)&buf[32] = v19;
          *(_OWORD *)CMTime buf = v19;
          CFDictionaryRef v20 = (const __CFDictionary *)*((void *)a3 + 7);
          int valuePtr = a2;
          CFNumberRef v21 = CFNumberCreate(*(CFAllocatorRef *)(v6 + 592), kCFNumberIntType, &valuePtr);
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v20, v21);
          CFRelease(v21);
          if (Value && CFStringGetCString(Value, buf, 150, 0x8000100u) && buf[0])
          {
            size_t v23 = strlen(buf);
            fwrite(buf, 1uLL, v23 + 1, *(FILE **)(v6 + 296));
          }
          else
          {
            buf[0] = 0;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v24 = VRTraceErrorLogLevelToCSTR();
              int v25 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                int valuePtr = 136316162;
                uint64_t v29 = v24;
                __int16 v30 = 2080;
                uint64_t v31 = "VideoReceiver_DumpRecvSPSPPS";
                __int16 v32 = 1024;
                int v33 = 781;
                __int16 v34 = 2048;
                uint64_t v35 = a1;
                __int16 v36 = 1024;
                int v37 = a2;
                _os_log_error_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] No matched feature list string for payload: %d", (uint8_t *)&valuePtr, 0x2Cu);
              }
            }
          }
          fwrite(v14, 1uLL, v26, *(FILE **)(v6 + 296));
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoReceiver_DumpRecvSPSPPS_cold_1();
        }
      }
    }
  }
}

void _VideoReceiver_ResetExpectedDecodingOrder(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int16 *)(a1 + 1162) >= 2u)
  {
    uint64_t v2 = a1 + 41512;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(unsigned __int16 *)(v2 + 6);
        int v6 = 136316162;
        uint64_t v7 = v3;
        __int16 v8 = 2080;
        CFDataRef v9 = "_VideoReceiver_ResetExpectedDecodingOrder";
        __int16 v10 = 1024;
        int v11 = 828;
        __int16 v12 = 2048;
        uint64_t v13 = a1;
        __int16 v14 = 1024;
        int v15 = v5;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Reset expectedDecodingOrder:%hu", (uint8_t *)&v6, 0x2Cu);
      }
    }
    *(unsigned char *)(v2 + 4) = 0;
    *(_DWORD *)uint64_t v2 = 0;
  }
}

void _VideoReceiver_DecoderRequestKeyFrame(uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  char v9 = a5 & a6;
  if ((a5 & a6) != 0) {
    unsigned int v10 = 27;
  }
  else {
    unsigned int v10 = a3;
  }
  if (*((unsigned char *)a2 + 70) && ((unsigned int v11 = a4 - *(_DWORD *)(a1 + 41632)) != 0 ? (v12 = v11 >= 0x7FFFFFFF) : (v12 = 1), v12))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v20 = VRTraceErrorLogLevelToCSTR();
      CFNumberRef v21 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v22 = *(_DWORD *)(a1 + 41632);
        int v23 = *a2;
        uint64_t v24 = kVCKeyFrameRequestReasonStrings_0[v10];
        int v25 = *((unsigned __int8 *)a2 + 70);
        BOOL v26 = v23 == a2[2];
        int v27 = 136317442;
        uint64_t v28 = v20;
        __int16 v29 = 2080;
        __int16 v30 = "_VideoReceiver_RequestKeyFrame";
        __int16 v31 = 1024;
        int v32 = 1779;
        __int16 v33 = 2048;
        uint64_t v34 = a1;
        __int16 v35 = 1024;
        int v36 = a4;
        __int16 v37 = 1024;
        int v38 = v22;
        __int16 v39 = 1024;
        *(_DWORD *)long long v40 = v23;
        *(_WORD *)&v40[4] = 2080;
        *(void *)&v40[6] = v24;
        __int16 v41 = 1024;
        BOOL v42 = v25;
        __int16 v43 = 1024;
        BOOL v44 = v26;
        _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Decoder requested a key frame for timestamp=%u, when a more recent key frame with timestamp=%u has already been assembled, skipping FIR. Stream %u reason=%s isTemporalScaledStream=%d isBaseLayer=%d", (uint8_t *)&v27, 0x4Eu);
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      __int16 v14 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *a2;
        uint64_t v16 = kVCKeyFrameRequestReasonStrings_0[v10];
        int v17 = *((unsigned __int8 *)a2 + 70);
        BOOL v18 = v15 == a2[2];
        int v27 = 136317186;
        uint64_t v28 = v13;
        __int16 v29 = 2080;
        __int16 v30 = "_VideoReceiver_RequestKeyFrame";
        __int16 v31 = 1024;
        int v32 = 1781;
        __int16 v33 = 2048;
        uint64_t v34 = a1;
        __int16 v35 = 1024;
        int v36 = a4;
        __int16 v37 = 1024;
        int v38 = v15;
        __int16 v39 = 2080;
        *(void *)long long v40 = v16;
        *(_WORD *)&v40[8] = 1024;
        *(_DWORD *)&v40[10] = v17;
        __int16 v41 = 1024;
        BOOL v42 = v18;
        _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Requested key frame for timestamp=%u stream=%u reason=%s isTemporalScaledStream=%d isBaseLayer=%d", (uint8_t *)&v27, 0x48u);
      }
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 40600));
    VideoPacketBuffer_NeedRefreshFrame(*((void *)a2 + 14), 1, 0, v10);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 40600));
    double v19 = micro();
    _VideoReceiver_DecoderNeedsRefresh(a1, (uint64_t)a2, v9 & 1, v10, v19);
  }
}

uint64_t _VideoReceiver_UpdateVideoStallTime(uint64_t result, double a2, double a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = result + 40672;
  double v5 = *(double *)(result + 41152);
  double v6 = *(double *)(result + 41104) + a2 - *(double *)(result + 41144);
  *(double *)(result + 41104) = v6;
  if (v5 < a2) {
    double v5 = a2;
  }
  *(double *)(result + 41152) = v5;
  *(_OWORD *)(result + 41136) = 0u;
  if (!*(unsigned char *)(result + 41736))
  {
    uint64_t v7 = result;
    unsigned int v8 = *(_DWORD *)(result + 1392);
    if (v8)
    {
      double v9 = *(double *)(result + 41728);
      double v10 = a3 - v9;
      if (v9 != 0.0 && v10 >= 5.0)
      {
        unsigned int v12 = (v6 * 10000.0 / v10);
        if (v8 < v12)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
          {
            uint64_t v13 = VRTraceErrorLogLevelToCSTR();
            __int16 v14 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v15 = *(_DWORD *)(v7 + 1392);
              int v16 = 136316418;
              uint64_t v17 = v13;
              __int16 v18 = 2080;
              double v19 = "_VideoReceiver_CheckAndReportRegressedVideoStallPercentage";
              __int16 v20 = 1024;
              int v21 = 1293;
              __int16 v22 = 2048;
              uint64_t v23 = v7;
              __int16 v24 = 1024;
              unsigned int v25 = v12;
              __int16 v26 = 1024;
              int v27 = v15;
              _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoStallPercentage=%d >= ReportingThresholdFromTelemetry=%d", (uint8_t *)&v16, 0x32u);
            }
          }
          double result = reportingSymptom();
          *(unsigned char *)(v4 + 1064) = 1;
        }
      }
    }
  }
  if (a2 > 3.0) {
    return reportingSymptom();
  }
  return result;
}

void _VideoReceiver_SendRTCPResiliencyInfo(uint64_t a1, uint64_t a2, int a3, int a4, __int16 a5, uint64_t a6, double a7)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  memset(v22, 0, sizeof(v22));
  long long v23 = 0u;
  uint64_t v24 = 0;
  uint64_t v20 = 0;
  if (a6)
  {
    __int16 v12 = *(_WORD *)(a6 + 14);
    if (v12)
    {
      int v13 = *(_DWORD *)(a6 + 4);
      if (v13 != *(_DWORD *)(a2 + 4304)) {
        goto LABEL_6;
      }
    }
    if (a7 - *(double *)(a2 + 4296) >= 0.1)
    {
      int v13 = *(_DWORD *)(a6 + 4);
LABEL_6:
      LODWORD(v20) = v13;
      WORD2(v20) = a5;
      char v14 = *(unsigned char *)(a6 + 10);
      goto LABEL_15;
    }
LABEL_11:
    *((void *)&v23 + 1) = 0;
    if (!a4) {
      return;
    }
    int v15 = 1024;
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a2 + 101)) {
    goto LABEL_11;
  }
  int v21 = 0;
  bzero(buf, 0x320uLL);
  VideoPacketBuffer_GetCachedBurstLossStatistics(*(void *)(a2 + 112), buf);
  _VideoReceiver_PackFrameLoss(a1, &v21, (unsigned __int16 *)buf);
  LOBYTE(v12) = (_BYTE)v28;
  if (!(_WORD)v28 || (int v13 = v26, v26 == *(_DWORD *)(a2 + 4304)))
  {
    if (a7 - *(double *)(a2 + 4296) < 0.1) {
      goto LABEL_11;
    }
    int v13 = v26;
  }
  LODWORD(v20) = v13;
  WORD2(v20) = v21;
  char v14 = BYTE6(v26);
LABEL_15:
  BYTE6(v20) = v14;
  HIBYTE(v20) = v12;
  *((void *)&v23 + 1) = &v20;
  LODWORD(v22[0]) = 512;
  *(_DWORD *)(a2 + 4304) = v13;
  *(double *)(a2 + 4296) = a7;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    uint64_t v17 = *MEMORY[0x1E4F47A50];
    __int16 v18 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v26 = v16;
        __int16 v27 = 2080;
        uint64_t v28 = "_VideoReceiver_SendRTCPResiliencyInfo";
        __int16 v29 = 1024;
        int v30 = 2340;
        __int16 v31 = 1024;
        int v32 = v20;
        __int16 v33 = 1024;
        int v34 = WORD2(v20);
        __int16 v35 = 1024;
        int v36 = BYTE6(v20);
        __int16 v37 = 1024;
        int v38 = HIBYTE(v20);
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d RTCP sending loss feedback: frameRTPTimestamp=%u, numReceivedPackets=%u, frameSize=%u, numLostPackets=%u", buf, 0x34u);
        if ((a4 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_22;
      }
    }
    else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      _VideoReceiver_SendRTCPResiliencyInfo_cold_1();
      if (a4) {
        goto LABEL_22;
      }
LABEL_25:
      uint64_t v19 = 4264;
      goto LABEL_26;
    }
  }
  if ((a4 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_22:
  int v15 = 1536;
LABEL_23:
  LODWORD(v22[0]) = v15;
  LODWORD(v24) = a3;
  uint64_t v19 = 4260;
LABEL_26:
  ++*(_DWORD *)(a2 + v19);
  _VideoReceiver_SendRTCP(a1, a2, v22, 0, a7);
}

void _VideoReceiver_PackFrameLoss(uint64_t a1, _WORD *a2, unsigned __int16 *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v5 = *(unsigned __int8 *)(a1 + 41564);
  if (v5 == 2)
  {
    FECUtil_PackFrameLoss(a2, a3[6], a3[9]);
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return;
    }
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    char v14 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      unsigned int v15 = a3[6];
      unsigned int v16 = a3[9];
      if (a3[5])
      {
        float v17 = (double)v16 / (double)a3[5];
        double v18 = v17;
      }
      else
      {
        double v18 = 0.0;
      }
      int v29 = 136316674;
      uint64_t v30 = v13;
      __int16 v31 = 2080;
      int v32 = "_VideoReceiver_PackFrameLoss";
      __int16 v33 = 1024;
      int v34 = 2288;
      __int16 v35 = 2048;
      uint64_t v36 = a1;
      __int16 v37 = 1024;
      unsigned int v38 = v15;
      __int16 v39 = 1024;
      unsigned int v40 = v16;
      __int16 v41 = 2048;
      double v42 = v18;
      uint64_t v28 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] FEC Feedback ready groupSize=%d loss=%d ratio=%2.2f";
      goto LABEL_26;
    }
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    unsigned int v24 = a3[6];
    unsigned int v25 = a3[9];
    double v26 = 0.0;
    if (a3[5])
    {
      float v27 = (double)v25 / (double)a3[5];
      double v26 = v27;
    }
    int v29 = 136316674;
    uint64_t v30 = v13;
    __int16 v31 = 2080;
    int v32 = "_VideoReceiver_PackFrameLoss";
    __int16 v33 = 1024;
    int v34 = 2288;
    __int16 v35 = 2048;
    uint64_t v36 = a1;
    __int16 v37 = 1024;
    unsigned int v38 = v24;
    __int16 v39 = 1024;
    unsigned int v40 = v25;
    __int16 v41 = 2048;
    double v42 = v26;
    long long v23 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] FEC Feedback ready groupSize=%d loss=%d ratio=%2.2f";
LABEL_21:
    _os_log_debug_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEBUG, v23, (uint8_t *)&v29, 0x3Cu);
    return;
  }
  if (v5 == 1)
  {
    FECUtil_PackFrameLoss(a2, a3[5], a3[7]);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      uint64_t v7 = *MEMORY[0x1E4F47A50];
      unsigned int v8 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        unsigned int v9 = a3[5];
        unsigned int v10 = a3[7];
        if (a3[5])
        {
          float v11 = (double)v10 / (double)v9;
          double v12 = v11;
        }
        else
        {
          double v12 = 0.0;
        }
        int v29 = 136316674;
        uint64_t v30 = v6;
        __int16 v31 = 2080;
        int v32 = "_VideoReceiver_PackFrameLoss";
        __int16 v33 = 1024;
        int v34 = 2285;
        __int16 v35 = 2048;
        uint64_t v36 = a1;
        __int16 v37 = 1024;
        unsigned int v38 = v9;
        __int16 v39 = 1024;
        unsigned int v40 = v10;
        __int16 v41 = 2048;
        double v42 = v12;
        uint64_t v28 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] FEC Feedback ready frameSize=%d loss=%d ratio=%2.2f";
LABEL_26:
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&v29, 0x3Cu);
        return;
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      unsigned int v19 = a3[5];
      unsigned int v20 = a3[7];
      double v21 = 0.0;
      if (a3[5])
      {
        float v22 = (double)v20 / (double)v19;
        double v21 = v22;
      }
      int v29 = 136316674;
      uint64_t v30 = v6;
      __int16 v31 = 2080;
      int v32 = "_VideoReceiver_PackFrameLoss";
      __int16 v33 = 1024;
      int v34 = 2285;
      __int16 v35 = 2048;
      uint64_t v36 = a1;
      __int16 v37 = 1024;
      unsigned int v38 = v19;
      __int16 v39 = 1024;
      unsigned int v40 = v20;
      __int16 v41 = 2048;
      double v42 = v21;
      long long v23 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] FEC Feedback ready frameSize=%d loss=%d ratio=%2.2f";
      goto LABEL_21;
    }
  }
}

void _VideoReceiver_ComputePacketLoss2DHistogram(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = 0;
  uint64_t v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  do
  {
    uint64_t v8 = 0;
    int v9 = 0;
    int v10 = 0;
    do
    {
      if (*(_WORD *)(a3 + 2 * v8)) {
        int v9 = v8;
      }
      v10 += *(unsigned __int16 *)(a3 + 2 * v8++);
    }
    while (v8 != 102);
    if (v10)
    {
      float v11 = CFArrayCreateMutable(v4, 0, v7);
      if ((v9 & 0x80000000) == 0)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 2 * (v9 + 1);
        while (1)
        {
          int valuePtr = *(unsigned __int16 *)(a3 + v12);
          CFNumberRef v14 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
          CFNumberRef v15 = v14;
          if (v11)
          {
            if (v14) {
              break;
            }
          }
          if (v14) {
            goto LABEL_13;
          }
LABEL_14:
          v12 += 2;
          if (v13 == v12) {
            goto LABEL_15;
          }
        }
        CFArrayAppendValue(v11, v14);
LABEL_13:
        CFRelease(v15);
        goto LABEL_14;
      }
LABEL_15:
      CFStringRef v16 = CFStringCreateWithFormat(v4, 0, @"%d", v6);
      CFStringRef v17 = v16;
      if (Mutable && v16 && v11)
      {
        CFDictionaryAddValue(Mutable, v16, v11);
      }
      else if (!v16)
      {
        goto LABEL_21;
      }
      CFRelease(v17);
LABEL_21:
      if (v11) {
        CFRelease(v11);
      }
    }
    ++v6;
    a3 += 204;
  }
  while (v6 != 102);
  if (a1 && Mutable)
  {
    CFDictionaryAddValue(a1, a2, Mutable);
    goto LABEL_28;
  }
  if (Mutable) {
LABEL_28:
  }
    CFRelease(Mutable);
}

void _VideoReceiver_ScheduleFramesForDecodingMultiway(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unsigned __int16 *)(a2 + 10088);
  if (*((unsigned char *)a2 + 40720))
  {
    unint64_t v4 = *a2;
    if (v4)
    {
      int v5 = a3;
      unsigned int v6 = 0;
      unint64_t v7 = 0;
      *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v76[3] = v8;
      v76[4] = v8;
      v76[1] = v8;
      v76[2] = v8;
      long long v75 = v8;
      v76[0] = v8;
      int v9 = a2;
      do
      {
        int v10 = &v9[1080 * v7];
        if (*((void *)v10 + 198))
        {
          if (v6 == 4) {
            goto LABEL_65;
          }
          float v11 = (unsigned __int16 *)(v10 + 368);
          if (!*((unsigned char *)v10 + 1542) || *((unsigned __int16 *)v10 + 738) == *v11)
          {
            unint64_t v70 = v7;
            uint64_t v12 = 0;
            uint64_t v13 = (uint64_t *)(v10 + 396);
            unint64_t v77 = 0xAAAAAAAAAAAAAAAALL;
            char v14 = 1;
            while (1)
            {
              char v15 = v14;
              if (v6 + v12 > 3
                || !VideoPacketBuffer_SchedulePastIncompleteFrame(*v13, v5, &buf[4 * v12 - 8], *((_DWORD *)v3 + 88), 0, 0))
              {
                break;
              }
              char v14 = 0;
              uint64_t v12 = 1;
              if ((v15 & 1) == 0)
              {
                uint64_t v16 = 2;
                goto LABEL_19;
              }
            }
            while (1)
            {
              uint64_t v17 = v12;
              if (v6 + v12 > 3
                || !VideoPacketBuffer_ScheduleFutureFrame(*v13, v9[1080 * v70 + 402], v5, &buf[4 * v12 - 8], *((_DWORD *)v3 + 88), 0, 0, *((double *)v3 + 141)))
              {
                break;
              }
              uint64_t v12 = 1;
              if (v17)
              {
                uint64_t v16 = 2;
                goto LABEL_19;
              }
            }
            if (v12)
            {
              uint64_t v16 = 1;
LABEL_19:
              for (uint64_t i = 0; i != v16; ++i)
              {
                int v74 = 0;
                unsigned __int8 v73 = 0;
                if (*((unsigned char *)v11 + 69))
                {
LABEL_21:
                  char v19 = 0;
                  LODWORD(v20) = 1;
LABEL_22:
                  int v21 = *(_DWORD *)&buf[4 * i - 8];
                  if (v6)
                  {
                    uint64_t v22 = 0;
                    uint64_t v23 = v6;
                    unsigned int v24 = (int *)&v75;
                    while (1)
                    {
                      int v26 = *v24;
                      v24 += 6;
                      int v25 = v26;
                      unsigned int v27 = v21 - v26;
                      if (v21 == v26 || v27 >= 0x7FFFFFFF) {
                        break;
                      }
                      --v22;
                      if (!(v6 + v22)) {
                        goto LABEL_58;
                      }
                    }
                    if (v21 == v25) {
                      uint64_t v20 = v20;
                    }
                    else {
                      uint64_t v20 = 0;
                    }
                    if (v6 <= (int)v20 - (int)v22)
                    {
                      uint64_t v23 = (v20 - v22);
                    }
                    else
                    {
                      uint64_t v39 = v20 - v22;
                      memmove((char *)&v76[-1] + 24 * (v20 - v22 + 1), (char *)&v76[-1] + 24 * (v20 - v22), 24 * (v6 - v20 + v22));
                      uint64_t v23 = v39;
                    }
                  }
                  else
                  {
                    uint64_t v23 = 0;
                  }
LABEL_58:
                  double v42 = (char *)&v76[-1] + 24 * v23;
                  *(_DWORD *)double v42 = v21;
                  *((_DWORD *)v42 + 1) = 0;
                  *((void *)v42 + 1) = v11;
                  v42[16] = v19;
                  *(_DWORD *)(v42 + 17) = 0;
                  *((_DWORD *)v42 + 5) = 0;
                  ++v6;
                }
                else
                {
                  VideoPacketBuffer_GetFrameStreamIDs(*v13, *(_DWORD *)&buf[4 * i - 8], &v73, &v74);
                  uint64_t v29 = v73;
                  if (v73)
                  {
                    char v30 = 0;
                    __int16 v31 = v74;
                    uint64_t v32 = *((void *)v3 + 1);
                    do
                    {
                      int v34 = *v31++;
                      int v33 = v34;
                      if ((v32 & 0x1000000000000) != 0
                        && (v33 == (unsigned __int16)*((void *)v3 + 1) || WORD1(v32) == v33))
                      {
                        LODWORD(v20) = 0;
                        char v19 = 1;
                        goto LABEL_22;
                      }
                      uint64_t v36 = *(void *)v3;
                      BOOL v37 = (*(void *)v3 & 0x1000000000000) != 0
                         && (v33 == (unsigned __int16)v36 || v33 == WORD1(v36));
                      v30 |= v37;
                      --v29;
                    }
                    while (v29);
                    if (v30) {
                      goto LABEL_21;
                    }
                  }
                  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    uint64_t v40 = VRTraceErrorLogLevelToCSTR();
                    __int16 v41 = *MEMORY[0x1E4F47A50];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)CMTime buf = 136315906;
                      uint64_t v79 = v40;
                      __int16 v80 = 2080;
                      unint64_t v81 = "_VideoReceiver_FindCurrentAndTargetFramesToBeScheduledForMultiway";
                      __int16 v82 = 1024;
                      int v83 = 3631;
                      __int16 v84 = 2048;
                      size_t v85 = a2;
                      _os_log_error_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] No valid stream id found in packet!", buf, 0x26u);
                    }
                  }
                }
              }
            }
            int v9 = a2;
            unint64_t v4 = *a2;
            int v5 = a3;
            unint64_t v7 = v70;
          }
        }
        ++v7;
      }
      while (v7 < v4);
      if (v6)
      {
LABEL_65:
        char v43 = 0;
        uint64_t v44 = v6;
        for (size_t j = v76; ; j += 24)
        {
          int v46 = (unsigned __int16 *)*((void *)j - 1);
          if (!*((unsigned char *)v46 + 69) && (v43 & 1) != 0 && !*j) {
            goto LABEL_76;
          }
          _VideoReceiver_AssembleAndEnqueueFrame(a1, (uint64_t)a2, *((unsigned __int16 **)j - 1), *((_DWORD *)j - 4));
          int v47 = *((unsigned __int8 *)v46 + 69);
          if (!*((unsigned char *)v46 + 69)) {
            break;
          }
          if (!*((unsigned char *)v3 + 16))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v48 = VRTraceErrorLogLevelToCSTR();
              int v49 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v50 = *((void *)a2 + 144);
                int v51 = *v3;
                *(_DWORD *)CMTime buf = 136316418;
                uint64_t v79 = v48;
                __int16 v80 = 2080;
                unint64_t v81 = "_VideoReceiver_ApplyMultiwaySchedule";
                __int16 v82 = 1024;
                int v83 = 3843;
                __int16 v84 = 2048;
                size_t v85 = a2;
                __int16 v86 = 2048;
                uint64_t v87 = v50;
                __int16 v88 = 1024;
                int v89 = v51;
                _os_log_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] participantId[%llu] Successfully switched stream %d -> 1:1", buf, 0x36u);
              }
            }
            uint64_t v52 = (uint64_t)a2;
            _VideoReceiver_UpdateStreamSwitchContextForTargetStream((uint64_t)a2, *v46, v46[1], v46[2]);
            _VideoReceiver_CompleteStreamSwitch(a2, (uint64_t)v46);
LABEL_75:
            _VideoReceiver_SwitchIntoOneToOne(v52, v47 != 0, (uint64_t)v46);
LABEL_76:
            char v43 = 1;
          }
LABEL_90:
          if (!--v44) {
            return;
          }
        }
        if (!*j) {
          goto LABEL_90;
        }
        BOOL v53 = *((unsigned char *)v3 + 16) || !*((unsigned char *)v3 + 6) || !*((unsigned char *)v3 + 14) || *v3 != v3[4];
        if (v43 & 1 | !v53) {
          goto LABEL_90;
        }
        if (!VideoPacketBuffer_FirstIDRReceived(*((void *)v46 + 14)))
        {
          char v43 = 0;
          goto LABEL_90;
        }
        int v54 = *((unsigned __int8 *)v3 + 16);
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v54)
        {
          if (ErrorLogLevelForModule >= 7)
          {
            uint64_t v56 = VRTraceErrorLogLevelToCSTR();
            int v57 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v58 = *((void *)a2 + 144);
              int v59 = v3[4];
              *(_DWORD *)CMTime buf = 136316418;
              uint64_t v79 = v56;
              __int16 v80 = 2080;
              unint64_t v81 = "_VideoReceiver_ApplyMultiwaySchedule";
              __int16 v82 = 1024;
              int v83 = 3856;
              __int16 v84 = 2048;
              size_t v85 = a2;
              __int16 v86 = 2048;
              uint64_t v87 = v58;
              __int16 v88 = 1024;
              int v89 = v59;
              uint64_t v60 = v57;
              __int16 v61 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] participantId[%llu] Successfully switched stream 1:1 -> %d";
              uint32_t v62 = 54;
LABEL_95:
              _os_log_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEFAULT, v61, buf, v62);
            }
          }
        }
        else if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v63 = VRTraceErrorLogLevelToCSTR();
          uint64_t v64 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v65 = *((void *)a2 + 144);
            int v66 = *v46;
            int v67 = *v3;
            int v68 = v3[4];
            *(_DWORD *)CMTime buf = 136316930;
            uint64_t v79 = v63;
            __int16 v80 = 2080;
            unint64_t v81 = "_VideoReceiver_ApplyMultiwaySchedule";
            __int16 v82 = 1024;
            int v83 = 3858;
            __int16 v84 = 2048;
            size_t v85 = a2;
            __int16 v86 = 2048;
            uint64_t v87 = v65;
            __int16 v88 = 1024;
            int v89 = v66;
            __int16 v90 = 1024;
            int v91 = v67;
            __int16 v92 = 1024;
            int v93 = v68;
            uint64_t v60 = v64;
            __int16 v61 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] participantId[%llu] streamId:[%d] Successfully switched stream %d -> %d";
            uint32_t v62 = 66;
            goto LABEL_95;
          }
        }
        uint64_t v52 = (uint64_t)a2;
        _VideoReceiver_CompleteStreamSwitch(a2, (uint64_t)v46);
        if (*((unsigned char *)v3 + 16)) {
          goto LABEL_75;
        }
        goto LABEL_76;
      }
    }
  }
}

uint64_t _VideoReceiver_ProcessVideoRTPInternal(uint64_t a1, unsigned int *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v238 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (unsigned __int16 *)(a2 + 10088);
  int v212 = *(_DWORD *)(a4 + 12);
  int v214 = *(unsigned __int16 *)(a4 + 20);
  int64_t v8 = *(unsigned int *)(a4 + 24);
  unsigned int v227 = 0;
  uint64_t v9 = *(void *)(a4 + 40);
  double v10 = micro();
  int v226 = 0;
  int v233 = 0;
  long long v232 = 0u;
  long long v231 = 0u;
  long long v230 = 0u;
  CMBlockBufferRef blockBufferOut = 0;
  unint64_t v224 = 0;
  uint64_t v225 = 0;
  __int16 v222 = -21846;
  *((void *)v7 + 141) = v9;
  BOOL v229 = 0;
  uint64_t v12 = *(void *)(a4 + 136);
  float v11 = *(unsigned __int16 **)(a4 + 144);
  long long v221 = 0u;
  long long v219 = 0u;
  memset(v220, 0, sizeof(v220));
  long long v218 = 0u;
  if (*((unsigned char *)v7 + 857))
  {
    if (*(unsigned char *)(a4 + 88))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        char v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v15 = *v7;
          int v16 = v7[4];
          int v17 = *(unsigned __int8 *)(a4 + 88);
          int v18 = *(unsigned __int16 *)(a4 + 64);
          *(_DWORD *)CMTime buf = 136316930;
          *(void *)&uint8_t buf[4] = v13;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTPInternal";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 3149;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a2;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&uint8_t buf[40] = v15;
          *(_WORD *)&unsigned char buf[44] = 1024;
          *(_DWORD *)&buf[46] = v16;
          *(_WORD *)&buf[50] = 1024;
          *(_DWORD *)&buf[52] = v17;
          *(_WORD *)&buf[56] = 1024;
          *(_DWORD *)&buf[58] = v18;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] currentStreamId:%u targetStreamId:%u received packet with numOfStreamIDs:%d streamID[0]:%u", buf, 0x3Eu);
        }
      }
    }
  }
  if ((_VideoReceiver_ShouldProcessPacket((uint64_t)a2, (uint64_t)a3, *(unsigned __int8 *)(a4 + 50), *(void *)(a4 + 56), (unsigned __int16 *)(a4 + 64), *(unsigned __int8 *)(a4 + 88)) & 1) == 0)
  {
    uint64_t v21 = 2149515265;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return v21;
    }
    uint64_t v22 = VRTraceErrorLogLevelToCSTR();
    uint64_t v23 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      return v21;
    }
    int v24 = *v7;
    int v25 = v7[4];
    int v26 = *(unsigned __int8 *)(a4 + 88);
    int v27 = *(unsigned __int16 *)(a4 + 64);
    int v28 = *(unsigned __int16 *)(a4 + 66);
    int v29 = *(unsigned __int16 *)(a4 + 68);
    int v30 = *(unsigned __int16 *)(a4 + 70);
    *(_DWORD *)CMTime buf = 136317698;
    *(void *)&uint8_t buf[4] = v22;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTPInternal";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = 3154;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = a2;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&uint8_t buf[40] = v24;
    *(_WORD *)&unsigned char buf[44] = 1024;
    *(_DWORD *)&buf[46] = v25;
    *(_WORD *)&buf[50] = 1024;
    *(_DWORD *)&buf[52] = v26;
    *(_WORD *)&buf[56] = 1024;
    *(_DWORD *)&buf[58] = v27;
    *(_WORD *)&buf[62] = 1024;
    *(_DWORD *)&unsigned char buf[64] = v28;
    *(_WORD *)&buf[68] = 1024;
    *(_DWORD *)&buf[70] = v29;
    *(_WORD *)&buf[74] = 1024;
    *(_DWORD *)&buf[76] = v30;
    __int16 v31 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Ignoring video packet (currentID:%d target:%d numOfStreamIDs:%d str"
          "eamIDs:[%d %d %d %d...]) !";
    uint64_t v32 = v23;
    uint32_t v33 = 80;
LABEL_193:
    _os_log_error_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_ERROR, v31, buf, v33);
    return v21;
  }
  uint64_t v216 = (uint64_t *)(a2 + 10166);
  kdebug_trace();
  char v19 = *((unsigned char *)a2 + 1209);
  if (v19)
  {
    uint64_t v20 = a3;
    if (*((unsigned char *)a3 + 69))
    {
      char v19 = 0;
    }
    else if (*(unsigned char *)(a4 + 88))
    {
      int v40 = *a3;
      uint64_t v41 = *(unsigned __int8 *)(a4 + 88) - 1;
      double v42 = (unsigned __int16 *)(a4 + 64);
      do
      {
        int v44 = *v42++;
        int v43 = v44;
        BOOL v46 = v41-- != 0;
        BOOL v150 = v43 == v40;
        char v19 = v43 != v40;
      }
      while (!v150 && v46);
    }
    else
    {
      char v19 = 1;
    }
  }
  else
  {
    uint64_t v20 = a3;
  }
  uint64_t v213 = (int *)(a2 + 10388);
  int v211 = a2 + 10093;
  long long v218 = xmmword_1E259C140;
  *(void *)&long long v219 = &blockBufferOut;
  DWORD2(v219) = 0;
  memset(v220, 0, 18);
  *((void *)&v220[1] + 1) = &v229;
  *(void *)&long long v221 = a4 + 8;
  BYTE8(v221) = v19;
  if (*((unsigned char *)a2 + 40720))
  {
    unsigned int v34 = a2[10179];
    if (v34 != v8 && v34 - v8 <= 0x7FFFFFFE)
    {
      ++a2[10368];
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v35 = VRTraceErrorLogLevelToCSTR();
        uint64_t v36 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v37 = a2[10179];
          unsigned int v38 = a2[10368];
          *(_DWORD *)CMTime buf = 136316674;
          *(void *)&uint8_t buf[4] = v35;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_CheckStartOfNewFrameAndOutOfOrderCondition";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 2815;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a2;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&uint8_t buf[40] = v37;
          *(_WORD *)&unsigned char buf[44] = 1024;
          *(_DWORD *)&buf[46] = v8;
          *(_WORD *)&buf[50] = 1024;
          *(_DWORD *)&buf[52] = v38;
          _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Video packet arrived out of order. lastReceivedPacketTimestamp=%u, packetTimestamp=%u, significantOutOfOrderPacketCount=%u", buf, 0x38u);
        }
      }
LABEL_23:
      char v39 = 1;
      if (!v12) {
        goto LABEL_87;
      }
      goto LABEL_34;
    }
    if (v34 == v8) {
      goto LABEL_23;
    }
    char v39 = 0;
    a2[10179] = v8;
    if (!v12) {
      goto LABEL_87;
    }
  }
  else
  {
    char v39 = 0;
    a2[10179] = v8;
    *((unsigned char *)a2 + 40720) = 1;
    if (!v12) {
      goto LABEL_87;
    }
  }
LABEL_34:
  uint64_t v217 = 0;
  RTPGetRecvStats(*((void *)v20 + 6), (_DWORD *)&v217 + 1, &v217);
  if (VCMediaControlInfo_IsLossStatsEnabled(*((unsigned __int8 *)a2 + 41564)) && (uint64_t v47 = *((void *)v20 + 14)) != 0)
  {
    memcpy(buf, &unk_1E259E800, sizeof(buf));
    VideoPacketBuffer_GetCachedBurstLossStatistics(v47, buf);
    memcpy(__dst, buf, sizeof(__dst));
    if (*((unsigned char *)v20 + 101)) {
      _VideoReceiver_SendRTCPResiliencyInfo((uint64_t)a2, (uint64_t)v20, 0, 0, SWORD2(v217), (uint64_t)__dst, v10);
    }
    _VideoReceiver_PackFrameLoss((uint64_t)a2, (_WORD *)&v217 + 2, (unsigned __int16 *)buf);
  }
  else if (*((unsigned char *)v20 + 109))
  {
    HIDWORD(v217) = 0;
  }
  uint64_t v48 = *((void *)v20 + 10);
  if (v48 || (uint64_t v59 = *((void *)a2 + 5047)) != 0 && *(void *)(v59 + 80) || *v216)
  {
    uint64_t v49 = v12;
    *(_OWORD *)((char *)__dst + 8) = 0u;
    *(_OWORD *)((char *)&__dst[1] + 8) = 0u;
    *(void *)&__dst[0] = v9;
    int v50 = *(_DWORD *)(a4 + 24);
    DWORD2(__dst[0]) = *(void *)(a4 + 120);
    DWORD1(__dst[1]) = HIDWORD(v217);
    HIDWORD(__dst[1]) = v50;
    DWORD2(__dst[1]) = v217 >> 3;
    if (!v48)
    {
      uint64_t v51 = *((void *)a2 + 5047);
      if (!v51 || (uint64_t v48 = *(void *)(v51 + 80)) == 0) {
        uint64_t v48 = *v216;
      }
    }
    uint64_t v21 = 2149515265;
    ControlInfoWithBuffer = VCMediaControlInfoGeneratorCreateControlInfoWithBuffer(v48, (uint64_t)v11, v49, (uint64_t)__dst);
    BOOL v53 = ControlInfoWithBuffer;
    if (!ControlInfoWithBuffer) {
      goto LABEL_62;
    }
    if (VCMediaControlInfoHasInfo(ControlInfoWithBuffer, (const char *)3))
    {
      VCMediaControlInfoGetInfo(v53, (const char *)3, (uint64_t)v220 + 12, 1, 0);
      BYTE12(v220[0]) |= 0x80u;
    }
    if (VCMediaControlInfoHasInfo(v53, (const char *)4)) {
      VCMediaControlInfoGetInfo(v53, (const char *)4, (uint64_t)v220 + 8, 4, 0);
    }
    if (VCMediaControlInfoHasInfo(v53, (const char *)6) && VCMediaControlInfoGetVersion(v53) == 2)
    {
      *(_DWORD *)CMTime buf = -1431655766;
      VCMediaControlInfoGetInfo(v53, (const char *)6, (uint64_t)buf, 4, 0);
      HIDWORD(v54) = *(_DWORD *)buf;
      LODWORD(v54) = *(_DWORD *)buf;
      BYTE13(v220[0]) = 1;
      *(_DWORD *)((char *)v220 + 14) = v54 >> 16;
    }
    if (VCMediaControlInfoHasInfo(v53, (const char *)5))
    {
      VCMediaControlInfoGetInfo(v53, (const char *)5, (uint64_t)&v227, 4, 0);
      unsigned int v227 = bswap32(v227);
    }
    if (VCMediaControlInfoHasInfo(v53, (const char *)7))
    {
      int v237 = 0;
      memset(v236, 0, sizeof(v236));
      double v228 = -3.72066208e-103;
      VCMediaControlInfoGetInfo(v53, (const char *)7, (uint64_t)v236, 36, (uint64_t)&v228);
      if (*(void *)&v228 <= 3uLL)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v55 = VRTraceErrorLogLevelToCSTR();
          uint64_t v56 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v55;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_ProcessVideoControlInfo";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 2708;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a2;
            *(_WORD *)&buf[38] = 2048;
            *(double *)&uint8_t buf[40] = v228;
            _os_log_error_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] FEC header size %ld too small!", buf, 0x30u);
          }
        }
        uint64_t v21 = 2149515307;
LABEL_62:
        VCMediaControlInfoDispose((uint64_t)v53);
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return v21;
        }
        uint64_t v57 = VRTraceErrorLogLevelToCSTR();
        uint64_t v58 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          return v21;
        }
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v57;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTPInternal";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 3184;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a2;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v21;
        __int16 v31 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] UNEXPECTED hResult:%d after processing video control Info";
        goto LABEL_173;
      }
      FECHeader_UnpackHeaderFromBuffer(&v229, *v213, (unsigned int *)v236, *(unint64_t *)&v228);
    }
    VCMediaControlInfoDispose((uint64_t)v53);
    goto LABEL_75;
  }
  if (a2[10397])
  {
    if ((VCCVOExtensionUtils_CameraStatusBitsFromCVOExtension(a2[10397], v11, v12, (unsigned char *)v220 + 12) & 1) == 0
      && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoReceiver_ProcessVideoRTPInternal_cold_6();
      }
    }
  }
LABEL_75:
  BOOL v60 = v229;
  if (v229)
  {
    if (DWORD1(v230) >> 30) {
      int v61 = 0x400000;
    }
    else {
      int v61 = 0x800000;
    }
    int v62 = v61 & DWORD1(v230);
    BOOL v60 = v62 == 0;
    uint64_t v63 = a2 + 10166;
    if (*v213 == 1 && !v62)
    {
      FECUtil_UpdateParitySequenceNumberHistory((uint64_t)v213, *(unsigned __int16 *)(*((void *)&v220[1] + 1) + 54));
      BOOL v60 = 1;
    }
  }
  else
  {
    uint64_t v63 = a2 + 10166;
  }
  if (LOWORD(v220[1]) == 1) {
    ++v63[96];
  }
  if (v60)
  {
    int v210 = 1;
    goto LABEL_90;
  }
LABEL_87:
  if (!*(unsigned char *)(a4 + 202)) {
    _VideoReceiverStreamStats_AddPacket((uint64_t)(v20 + 70), *(_DWORD *)(a4 + 28), *(unsigned __int16 *)(a4 + 20));
  }
  int v210 = 0;
LABEL_90:
  if (*((unsigned char *)a2 + 1183))
  {
    int v64 = v227;
    if (v227)
    {
      uint64_t v65 = (void (*)(void))*((void *)a2 + 181);
      if (v65)
      {
        v65(*((void *)a2 + 179));
        int v64 = v227;
      }
      VideoTransmitter_ACKLTRFrame(*((void *)a2 + 5050), v64);
    }
  }
  if (*((unsigned char *)a2 + 1186)) {
    char v66 = v39;
  }
  else {
    char v66 = 1;
  }
  if ((v66 & 1) == 0)
  {
    unsigned int v67 = a2[259];
    buf[23] = 0;
    *(_DWORD *)&buf[19] = 0;
    memset(&buf[72], 0, 128);
    unsigned int v68 = a2[10242];
    uint64_t v69 = *((void *)a2 + 5095);
    uint64_t v70 = *((void *)a2 + 5177);
    *(void *)CMTime buf = 7;
    *(void *)&buf[8] = v9;
    *(_WORD *)&buf[16] = 0;
    buf[18] = 1;
    *(_DWORD *)&unsigned char buf[24] = 4;
    *(_DWORD *)&buf[28] = v8;
    *(_DWORD *)&buf[32] = v67;
    *(_DWORD *)&buf[36] = v68;
    *(void *)&uint8_t buf[40] = 0;
    *(void *)&buf[48] = v9;
    *(void *)&buf[56] = 0;
    *(void *)&unsigned char buf[64] = v69;
    VCRateControlSetStatistics(v70, buf);
  }
  double v71 = *(double *)(a4 + 40);
  unsigned int v72 = *(_DWORD *)(a4 + 24);
  int v73 = *(_DWORD *)(a4 + 8);
  if ((*v211 - 2) < 2)
  {
    int v74 = 0;
    goto LABEL_105;
  }
  if (*v211 == 1 && *(unsigned char *)(a4 + 88))
  {
    int v74 = *(unsigned __int16 *)(a4 + 64);
LABEL_105:
    if (v71 - *((double *)a2 + 5162) < 2.0) {
      goto LABEL_142;
    }
    int v208 = v74;
    int v209 = *(_DWORD *)(a4 + 120);
    unsigned int FrameSliceHeader = ReadFrameSliceHeader(*(_DWORD *)(a4 + 12), *(void *)(a4 + 168), *(_DWORD *)(a4 + 160), 0);
    if (FrameSliceHeader <= 6 && ((1 << FrameSliceHeader) & 0x4C) != 0)
    {
      uint64_t v76 = a2 + 10166;
      a2[10322] = v72;
      *((unsigned char *)a2 + 41292) = 1;
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        goto LABEL_127;
      }
      uint64_t v205 = VRTraceErrorLogLevelToCSTR();
      unint64_t v77 = *MEMORY[0x1E4F47A50];
      long long v78 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        uint64_t v76 = a2 + 10166;
        if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_127;
        }
        unsigned int v79 = a2[10322];
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v205;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_ProcessProbingSequence";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2754;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a2;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v79;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v208;
        __int16 v80 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Receiving a packet of a probing sequence:%u, streamID:%u";
        unint64_t v81 = v77;
        uint32_t v82 = 50;
        goto LABEL_126;
      }
      uint64_t v76 = a2 + 10166;
      if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_127;
      }
      unsigned int v85 = a2[10322];
      *(_DWORD *)CMTime buf = 136316418;
      *(void *)&uint8_t buf[4] = v205;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoReceiver_ProcessProbingSequence";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2754;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a2;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&uint8_t buf[40] = v85;
      *(_WORD *)&unsigned char buf[44] = 1024;
      *(_DWORD *)&buf[46] = v208;
      __int16 v86 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Receiving a packet of a probing sequence:%u, streamID:%u";
      uint64_t v87 = v77;
      uint32_t v88 = 50;
      goto LABEL_139;
    }
    uint64_t v76 = a2 + 10166;
    if (v72 == a2[10322])
    {
      *((unsigned char *)a2 + 41292) = 1;
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        goto LABEL_127;
      }
      uint64_t v206 = VRTraceErrorLogLevelToCSTR();
      int v83 = *MEMORY[0x1E4F47A50];
      __int16 v84 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        uint64_t v76 = a2 + 10166;
        if (!os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_127;
        }
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v206;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_ProcessProbingSequence";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2758;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a2;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v208;
        __int16 v80 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Continue receiving a packet of the same probing sequence, streamID:%u";
LABEL_125:
        unint64_t v81 = v83;
        uint32_t v82 = 44;
LABEL_126:
        _os_log_impl(&dword_1E1EA4000, v81, OS_LOG_TYPE_DEFAULT, v80, buf, v82);
        goto LABEL_127;
      }
      uint64_t v76 = a2 + 10166;
      if (!os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_127;
      }
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v206;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoReceiver_ProcessProbingSequence";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2758;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a2;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&uint8_t buf[40] = v208;
      __int16 v86 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Continue receiving a packet of the same probing sequence, streamID:%u";
    }
    else
    {
      if (!*((unsigned char *)a2 + 41292)) {
        goto LABEL_142;
      }
      uint64_t v76 = a2 + 10166;
      *((unsigned char *)a2 + 41292) = 0;
      a2[10322] = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() < 8)
      {
LABEL_127:
        uint64_t v90 = *((void *)v76 + 94);
        if (v90)
        {
          uint64_t v91 = *((void *)a2 + 128);
          uint8_t v92 = *((unsigned char *)v76 + 628);
          *(void *)CMTime buf = 4;
          *(double *)&buf[8] = v71;
          *(_WORD *)&buf[16] = 0;
          buf[18] = v73 != 0;
          buf[19] = 1;
          *(_DWORD *)&buf[20] = 0;
          *(_DWORD *)&unsigned char buf[24] = v91;
          buf[28] = 0;
          buf[29] = v92;
          *(_WORD *)&buf[30] = v73 != 0;
          *(_DWORD *)&buf[32] = v72;
          *(_DWORD *)&buf[36] = v209;
          *(double *)&uint8_t buf[40] = v71;
          memset(&buf[52], 0, 148);
          *(_DWORD *)&buf[48] = v72;
          VCRateControlSetStatistics(v90, buf);
          uint64_t v20 = a3;
          if (v73) {
            goto LABEL_133;
          }
        }
        else
        {
          uint64_t v20 = a3;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3
            && (VRTraceErrorLogLevelToCSTR(), os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
          {
            _VideoReceiver_ProcessVideoRTPInternal_cold_5();
            if (v73) {
              goto LABEL_133;
            }
          }
          else if (v73)
          {
            goto LABEL_133;
          }
        }
        if (*((unsigned char *)a2 + 41292)) {
          goto LABEL_142;
        }
LABEL_133:
        *((double *)a2 + 5162) = v71;
        goto LABEL_142;
      }
      uint64_t v207 = VRTraceErrorLogLevelToCSTR();
      int v83 = *MEMORY[0x1E4F47A50];
      int v89 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        uint64_t v76 = a2 + 10166;
        if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_127;
        }
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v207;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_ProcessProbingSequence";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2763;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a2;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v208;
        __int16 v80 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Receiving a packet that is not a probing sequence, streamID:%u";
        goto LABEL_125;
      }
      uint64_t v76 = a2 + 10166;
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_127;
      }
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v207;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoReceiver_ProcessProbingSequence";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2763;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a2;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&uint8_t buf[40] = v208;
      __int16 v86 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Receiving a packet that is not a probing sequence, streamID:%u";
    }
    uint64_t v87 = v83;
    uint32_t v88 = 44;
LABEL_139:
    _os_log_debug_impl(&dword_1E1EA4000, v87, OS_LOG_TYPE_DEBUG, v86, buf, v88);
    goto LABEL_127;
  }
LABEL_142:
  ++a2[10242];
  int v93 = (_DWORD *)*((void *)a2 + 146);
  if (v93)
  {
    int v94 = *(_DWORD *)(a4 + 96);
    uint64_t v95 = *((void *)a2 + 5194);
    *(void *)CMTime buf = v95;
    *(_DWORD *)&buf[8] = a2[10390];
    if (v95)
    {
      if (v95 == 1)
      {
        if (!v94) {
          ++v93[60];
        }
        ++v93[62];
        v93[64] += FECUtil_GetExpectedParityPacketCount((uint64_t)buf);
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoReceiver_ProcessVideoRTPInternal_cold_4();
        }
      }
    }
    else if ((v210 & 1) == 0)
    {
      if (!v94) {
        ++v93[60];
      }
      ++v93[62];
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v96 = VRTraceErrorLogLevelToCSTR();
    CFDictionaryRef v97 = *MEMORY[0x1E4F47A50];
    CFNumberRef v98 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v96;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_UpdateWRMVideoPacketMetrics";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1692;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a2;
        _os_log_impl(&dword_1E1EA4000, v97, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Uninitialized wrmInfo: cannot update WRM video packet metrics!", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
    {
      _VideoReceiver_ProcessVideoRTPInternal_cold_3();
    }
  }
  int v99 = v212;
  CFDictionaryRef v100 = a2 + 10388;
  if ((v212 - 100) > 0x19) {
    goto LABEL_169;
  }
  int v101 = 1 << (v212 - 100);
  if ((v101 & 0x3000400) == 0)
  {
    if ((v101 & 0x800001) != 0)
    {
      uint64_t v21 = 0;
      __int16 v222 = 0;
      if (v210) {
        goto LABEL_177;
      }
      CFStringRef v102 = (int *)((unint64_t)&v218 | 0xC);
      unsigned int v103 = *((unsigned __int16 *)a2 + 581);
      if (v212 == 123)
      {
        uint64_t v104 = RTPProcessH264FragmentationHeader(*(void *)(a4 + 168), *(_DWORD *)(a4 + 160), (int *)&v218 + 2, v102, (_WORD *)(a4 + 32), (unsigned char *)(a4 + 34), &v226, v103 > 1);
      }
      else
      {
        if (v212 != 100)
        {
          uint64_t v21 = 0;
LABEL_177:
          VCBlockBuffer_Copy(a4 + 152, (uint64_t)&blockBufferOut);
          if ((v21 & 0x80000000) == 0) {
            goto LABEL_178;
          }
LABEL_170:
          VCBlockBuffer_Clear((uint64_t)&blockBufferOut);
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            return v21;
          }
          uint64_t v105 = VRTraceErrorLogLevelToCSTR();
          uint64_t v58 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            return v21;
          }
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v105;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTPInternal";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 3259;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a2;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&uint8_t buf[40] = v21;
          __int16 v31 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] UNEXPECTED hResult:%d";
LABEL_173:
          uint64_t v32 = v58;
          uint32_t v33 = 44;
          goto LABEL_193;
        }
        uint64_t v104 = RTPProcessHEVCFragmentationHeader(*(unsigned __int8 **)(a4 + 168), *(_DWORD *)(a4 + 160), (unsigned int *)&v218 + 2, v102, (_WORD *)(a4 + 32), (unsigned char *)(a4 + 34), v103 > 1, &v226);
      }
      uint64_t v21 = v104;
      goto LABEL_177;
    }
LABEL_169:
    uint64_t v21 = RTPProcessH263Packet(a4 + 8, (int *)&v218, (int *)&v218 + 1, (unsigned char *)&v222 + 1, &v222, *((CFAllocatorRef *)a2 + 5188), &blockBufferOut);
    DWORD2(v218) = (HIBYTE(v222) >> 1) & 1;
    HIDWORD(v218) = HIBYTE(v222) & 1;
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_178;
    }
    goto LABEL_170;
  }
  __int16 v222 = 0;
  *((void *)&v218 + 1) = 0x100000001;
  VCBlockBuffer_Copy(a4 + 152, (uint64_t)&blockBufferOut);
LABEL_178:
  uint64_t v106 = a2 + 10166;
  if (*((unsigned char *)a2 + 41176))
  {
    if (*((void *)a2 + 5148))
    {
      *(void *)&long long v107 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v107 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&buf[284] = v107;
      *(_OWORD *)&buf[257] = v107;
      *(_OWORD *)&buf[273] = v107;
      *(_OWORD *)&buf[241] = v107;
      *(_OWORD *)&buf[225] = v107;
      *(_OWORD *)&buf[209] = v107;
      *(_OWORD *)&buf[193] = v107;
      *(_OWORD *)&buf[177] = v107;
      *(_OWORD *)&buf[161] = v107;
      *(_OWORD *)&buf[145] = v107;
      *(_OWORD *)&buf[129] = v107;
      *(_OWORD *)&buf[113] = v107;
      *(_OWORD *)&buf[97] = v107;
      *(_OWORD *)&buf[81] = v107;
      *(_OWORD *)&buf[65] = v107;
      *(_OWORD *)&buf[49] = v107;
      *(_OWORD *)&buf[33] = v107;
      *(_OWORD *)&buf[17] = v107;
      *(_OWORD *)&buf[1] = v107;
      LODWORD(__dst[6]) = -1431655766;
      __dst[5] = v107;
      __dst[4] = v107;
      __dst[3] = v107;
      __dst[2] = v107;
      __dst[1] = v107;
      __dst[0] = v107;
      buf[0] = 0;
      double v108 = micro();
      fprintf(*((FILE **)a2 + 5148), "[%.6f:%04X:%08X:%d:%08X]\n", v108, v214, v8, v224, DWORD1(v230));
      if (v224)
      {
        for (unint64_t i = 0; i < v224; ++i)
        {
          __sprintf_chk((char *)__dst, 0, 0x64uLL, " %02X", *(unsigned __int8 *)(v225 + i));
          __strlcat_chk();
          if ((~(_BYTE)i & 0x1F) == 0)
          {
            fprintf(*((FILE **)a2 + 5148), "%s\n", (const char *)buf);
            buf[0] = 0;
          }
        }
        BOOL v150 = (i & 0x1F) == 0;
        uint64_t v20 = a3;
        CFDictionaryRef v100 = a2 + 10388;
        int v99 = v212;
        if (!v150) {
          fprintf(*((FILE **)a2 + 5148), "%s\n", (const char *)buf);
        }
      }
    }
  }
  if (!v224)
  {
    uint64_t v21 = 2149515265;
    VCBlockBuffer_Clear((uint64_t)&blockBufferOut);
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return v21;
    }
    uint64_t v111 = VRTraceErrorLogLevelToCSTR();
    uint64_t v112 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      return v21;
    }
    *(_DWORD *)CMTime buf = 136316674;
    *(void *)&uint8_t buf[4] = v111;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTPInternal";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = 3270;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = a2;
    *(_WORD *)&buf[38] = 1024;
    *(_DWORD *)&uint8_t buf[40] = v214;
    *(_WORD *)&unsigned char buf[44] = 1024;
    *(_DWORD *)&buf[46] = v8;
    *(_WORD *)&buf[50] = 1024;
    *(_DWORD *)&buf[52] = v99;
    __int16 v31 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] UNEXPECTED: Received 0-length pkt seq: %d ts: %d payload: %d ";
    uint64_t v32 = v112;
    uint32_t v33 = 56;
    goto LABEL_193;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 10134));
  int v110 = *(_DWORD *)(v221 + 112);
  a2[10170] += v110;
  if (v210) {
    a2[10171] += v110;
  }
  else {
    a2[10173] += *(_DWORD *)(v219 + 8);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a2 + 10134));
  *((unsigned char *)v100 + 96) = _VideoReceiver_HandleStreamSwitch((uint64_t)a2, v20, v113, v114, v115, v116, v117, v118);
  if (!*((unsigned char *)v20 + 120))
  {
    *((_DWORD *)v20 + 34) = *(_DWORD *)(a4 + 28);
    if (!*((void *)v20 + 14))
    {
      if (!*((unsigned char *)v20 + 70) || (int v119 = v20[2], *v20 == v119))
      {
        memset(&buf[224], 0, 136);
        memset(buf, 0, 224);
        *(_WORD *)CMTime buf = *(_WORD *)(a4 + 20);
        unsigned int v120 = a2[259];
        *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)(a4 + 24);
        *(_DWORD *)&buf[8] = v120;
        *(void *)&buf[16] = *((void *)v100 + 16);
        *(_DWORD *)&buf[224] = a2[266];
        buf[228] = a2[10316] != 0;
        buf[229] = *((unsigned char *)a2 + 1208);
        buf[240] = *((unsigned __int16 *)a2 + 581) > 1u;
        if (buf[240]) {
          BOOL v121 = 0;
        }
        else {
          BOOL v121 = *((unsigned char *)a2 + 1253) != 0;
        }
        buf[241] = v121;
        *(void *)&buf[248] = v20;
        if (*((void *)v20 + 534)) {
          CFNumberRef v122 = _VideoReceiver_DecryptFrame;
        }
        else {
          CFNumberRef v122 = 0;
        }
        *(void *)&buf[256] = v122;
        *(void *)&buf[264] = a2;
        if (*((unsigned char *)a2 + 1180)) {
          CFNumberRef v123 = _VideoReceiver_EnqueueFailedFrameToJitterBuffer;
        }
        else {
          CFNumberRef v123 = 0;
        }
        *(void *)&buf[272] = v123;
        int v124 = *((unsigned __int8 *)a2 + 1260);
        buf[280] = *((unsigned char *)a2 + 1260);
        *(void *)&buf[288] = *((void *)v100 + 11);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v125 = VRTraceErrorLogLevelToCSTR();
          int v126 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            CFNumberRef v127 = FourccToCStr(a2[312]);
            LODWORD(__dst[0]) = 136316418;
            *(void *)((char *)__dst + 4) = v125;
            WORD6(__dst[0]) = 2080;
            *(void *)((char *)__dst + 14) = "_VideoReceiver_NewVideoPacketBufferConfig";
            WORD3(__dst[1]) = 1024;
            DWORD2(__dst[1]) = 3059;
            WORD6(__dst[1]) = 2048;
            *(void *)((char *)&__dst[1] + 14) = a2;
            WORD3(__dst[2]) = 1024;
            DWORD2(__dst[2]) = v124;
            WORD6(__dst[2]) = 2080;
            *(void *)((char *)&__dst[2] + 14) = v127;
            _os_log_impl(&dword_1E1EA4000, v126, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d [%p] isServerPacketRetransmissionEnabled=%d streamGroupID=%s", (uint8_t *)__dst, 0x36u);
          }
        }
        _VCVideoReceiver_InitDumpFileName((uint64_t)a2, (char *)&buf[24]);
        long long v128 = *((_OWORD *)a2 + 80);
        *(_OWORD *)&buf[296] = *((_OWORD *)a2 + 79);
        *(_OWORD *)&buf[312] = v128;
        long long v129 = *((_OWORD *)a2 + 82);
        *(_OWORD *)&buf[328] = *((_OWORD *)a2 + 81);
        *(_OWORD *)&buf[344] = v129;
        *((void *)v20 + 14) = VideoPacketBuffer_Create(buf);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v130 = VRTraceErrorLogLevelToCSTR();
          uint64_t v131 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v132 = *((void *)v20 + 14);
            int v133 = *v20;
            int v134 = *((unsigned __int8 *)v20 + 70);
            BOOL v135 = v20[2] == v133;
            LODWORD(__dst[0]) = 136316930;
            *(void *)((char *)__dst + 4) = v130;
            WORD6(__dst[0]) = 2080;
            *(void *)((char *)__dst + 14) = "_VideoReceiver_CreateVPB";
            WORD3(__dst[1]) = 1024;
            DWORD2(__dst[1]) = 3083;
            WORD6(__dst[1]) = 2048;
            *(void *)((char *)&__dst[1] + 14) = a2;
            WORD3(__dst[2]) = 2048;
            *((void *)&__dst[2] + 1) = v132;
            LOWORD(__dst[3]) = 1024;
            *(_DWORD *)((char *)&__dst[3] + 2) = v133;
            WORD3(__dst[3]) = 1024;
            DWORD2(__dst[3]) = v134;
            WORD6(__dst[3]) = 1024;
            *(_DWORD *)((char *)&__dst[3] + 14) = v135;
            _os_log_impl(&dword_1E1EA4000, v131, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] created VideoPacketBuffer[%p] for stream:%d, isTemporalScalingEnabled=%d, isBaseLayerStream=%d", (uint8_t *)__dst, 0x42u);
          }
        }
        *((unsigned char *)v20 + 120) = 1;
LABEL_221:
        CFDictionaryRef v100 = a2 + 10388;
        goto LABEL_222;
      }
      Stream = _VideoReceiver_GetStream(a2, v119, *((unsigned __int8 *)v20 + 69));
      if (Stream)
      {
        int v137 = Stream;
        uint64_t v138 = *((void *)Stream + 14);
        if (v138)
        {
          *((void *)v20 + 14) = v138;
          int v139 = v20;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v140 = VRTraceErrorLogLevelToCSTR();
            uint64_t v141 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v142 = *v139;
              uint64_t v143 = *((void *)v139 + 14);
              int v144 = *(unsigned __int16 *)v137;
              *(_DWORD *)CMTime buf = 136316674;
              *(void *)&uint8_t buf[4] = v140;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_CreateVPB";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 3076;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = a2;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&uint8_t buf[40] = v142;
              *(_WORD *)&unsigned char buf[44] = 2048;
              *(void *)&buf[46] = v143;
              *(_WORD *)&buf[54] = 1024;
              *(_DWORD *)&buf[56] = v144;
              _os_log_impl(&dword_1E1EA4000, v141, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Higher layer in temporal scaling group with streamID %d, uses base layer's VPB[%p]. Base Layer streamID is %d", buf, 0x3Cu);
            }
          }
          *((unsigned char *)v139 + 120) = 1;
          uint64_t v20 = v139;
          goto LABEL_221;
        }
        CFDictionaryRef v100 = a2 + 10388;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoReceiver_ProcessVideoRTPInternal_cold_2();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoReceiver_ProcessVideoRTPInternal_cold_1();
        }
      }
    }
  }
LABEL_222:
  BOOL v145 = v20[2] == *v20;
  VideoPacketDump_RTPLog(*((void *)a2 + 5156));
  VideoPacketBuffer_AddPacket(*((void *)v20 + 14), (int *)&v218, *((unsigned __int8 *)v20 + 70), v145, *((unsigned char *)v100 + 96));
  VCBlockBuffer_Clear((uint64_t)&blockBufferOut);
  if (!*((unsigned char *)a2 + 1209) && *(unsigned char *)(a4 + 49))
  {
    if (*((unsigned __int16 *)a2 + 581) < 2u)
    {
      _VideoReceiver_ScheduleFramesForVideoPacketBuffer(a1, (uint64_t)a2, *((void *)v20 + 14), v8, (uint64_t)v20);
    }
    else
    {
      BYTE4(v217) = 0;
      LOWORD(v236[0]) = 0;
      LODWORD(__dst[0]) = 0;
      VideoPacketBuffer_GetFrameDecodingOrder(*((void *)v20 + 14), (unsigned char *)&v217 + 4, v236, __dst);
      if (BYTE4(v217))
      {
        if (*((unsigned char *)a2 + 41516))
        {
          int v146 = LOWORD(v236[0]) - *((unsigned __int16 *)a2 + 20759);
          if (v146)
          {
            if ((unsigned __int16)v146 <= 0x7FFEu && a2[10176] - LODWORD(__dst[0]) <= 0x7FFFFFFE)
            {
              unint64_t v147 = *a2;
              if (v147)
              {
                unint64_t v148 = 0;
                CFNumberRef v149 = a2 + 368;
                do
                {
                  if (v149 != (unsigned int *)v20)
                  {
                    LOBYTE(v217) = 0;
                    LOWORD(v228) = 0;
                    *(_DWORD *)CMTime buf = 0;
                    VideoPacketBuffer_GetFrameDecodingOrder(*((void *)v149 + 14), &v217, &v228, buf);
                    if ((_BYTE)v217) {
                      BOOL v150 = BYTE4(v217) == 0;
                    }
                    else {
                      BOOL v150 = 1;
                    }
                    if (!v150)
                    {
                      int v151 = LOWORD(v236[0]) - LOWORD(v228);
                      if (v151)
                      {
                        if ((unsigned __int16)v151 <= 0x7FFEu) {
                          goto LABEL_249;
                        }
                      }
                    }
                    unint64_t v147 = *a2;
                  }
                  ++v148;
                  v149 += 1080;
                }
                while (v148 < v147);
              }
              if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
              {
                uint64_t v152 = VRTraceErrorLogLevelToCSTR();
                char v153 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v154 = *((void *)v20 + 14);
                  int v155 = *((unsigned __int16 *)a2 + 20759);
                  int v156 = *((unsigned __int8 *)a2 + 41516);
                  *(_DWORD *)CMTime buf = 136316930;
                  *(void *)&uint8_t buf[4] = v152;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "_VideoReceiver_DetectFullSubFrameLoss";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  *(_DWORD *)&unsigned char buf[24] = 2884;
                  *(_WORD *)&buf[28] = 2048;
                  *(void *)&buf[30] = a2;
                  *(_WORD *)&buf[38] = 2048;
                  *(void *)&uint8_t buf[40] = v154;
                  *(_WORD *)&buf[48] = 1024;
                  *(_DWORD *)&buf[50] = LOWORD(v236[0]);
                  *(_WORD *)&buf[54] = 1024;
                  *(_DWORD *)&buf[56] = v155;
                  *(_WORD *)&buf[60] = 1024;
                  *(_DWORD *)&buf[62] = v156;
                  _os_log_impl(&dword_1E1EA4000, v153, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoPacketBuffer[%p] Needs refresh and reset DON due to sub frame loss in frameDecodingOrder:%hu expectedDecodingOrder:%hu isExpectedDecodingOrderValid:%d", buf, 0x42u);
                }
              }
              if (*((unsigned char *)a2 + 1183)) {
                BOOL v157 = a2[10205] != 0;
              }
              else {
                BOOL v157 = 0;
              }
              double v158 = micro();
              _VideoReceiver_DecoderNeedsRefresh((uint64_t)a2, (uint64_t)v20, v157, 23, v158);
            }
          }
        }
      }
LABEL_249:
      LODWORD(v159) = *a2;
      int v160 = (int)(exp2((double)*a2) + -1.0);
      while (v160)
      {
        if (v159)
        {
          unint64_t v161 = 0;
          uint64_t v162 = (uint64_t)(a2 + 368);
          do
          {
            if (_VideoReceiver_ScheduleFramesForVideoPacketBuffer(a1, (uint64_t)a2, *(void *)(v162 + 112), v8, v162))v160 |= 1 << v161; {
            else
            }
              v160 &= ~(1 << v161);
            ++v161;
            unint64_t v159 = *a2;
            v162 += 4320;
          }
          while (v161 < v159);
        }
      }
    }
    uint64_t v20 = a3;
    uint64_t v106 = a2 + 10166;
    double v163 = v10 - *((double *)a2 + 5093);
    memset(buf, 0, 168);
    _VideoReceiver_SendRTCP((uint64_t)a2, (uint64_t)a3, (long long *)buf, v163 > 5.0, v10);
    CFDictionaryRef v100 = a2 + 10388;
  }
  uint64_t v164 = *((void *)v100 + 5);
  if (v164 && *((unsigned char *)v106 + 793))
  {
    LODWORD(__dst[0]) = 0;
    if (!VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestamp(v164, v8, __dst))
    {
      *(_OWORD *)CMTime buf = *MEMORY[0x1E4F1FA48];
      *(void *)&buf[16] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      _VideoReceiver_CallAlarms((uint64_t)a2, (int *)buf, v10);
      goto LABEL_271;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v165 = VRTraceErrorLogLevelToCSTR();
      unsigned int v166 = *MEMORY[0x1E4F47A50];
      int v167 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v165;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTPInternal";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 3316;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v8;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = __dst[0];
          _os_log_impl(&dword_1E1EA4000, v166, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Converted video dwTimestamp=%u into audio domain with timestamp=%u", buf, 0x28u);
        }
      }
      else if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v165;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTPInternal";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 3316;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v8;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = __dst[0];
        _os_log_debug_impl(&dword_1E1EA4000, v166, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d Converted video dwTimestamp=%u into audio domain with timestamp=%u", buf, 0x28u);
      }
    }
    int64_t v169 = LODWORD(__dst[0]);
    uint64_t v168 = (uint64_t)a2;
  }
  else
  {
    uint64_t v168 = (uint64_t)a2;
    int64_t v169 = v8;
  }
  _VideoReceiver_ProcessInternalCallAlarms(v168, v169, v10);
LABEL_271:
  if (*((unsigned char *)a2 + 1276))
  {
    double v170 = *((double *)v20 + 536);
    if (v170 != 0.0)
    {
      double v171 = *((double *)v106 + 35);
      double v172 = v10 - v170;
      if (v171 == 0.0 || v172 > 0.15 && *((double *)v106 + 59) != 0.0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v173 = VRTraceErrorLogLevelToCSTR();
          int v174 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v175 = *((void *)v20 + 14);
            uint64_t v176 = *((void *)v100 + 7);
            *(_DWORD *)CMTime buf = 136317186;
            *(void *)&uint8_t buf[4] = v173;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_ShallSendCachedDelayedFIR";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 1596;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a2;
            *(_WORD *)&buf[38] = 2048;
            *(void *)&uint8_t buf[40] = v175;
            *(_WORD *)&buf[48] = 2048;
            *(double *)&buf[50] = v172;
            *(_WORD *)&buf[58] = 2048;
            *(void *)&buf[60] = 0x3FC3333333333333;
            *(_WORD *)&buf[68] = 2048;
            *(void *)&buf[70] = v176;
            *(_WORD *)&buf[78] = 1024;
            *(_DWORD *)&buf[80] = v171 == 0.0;
            _os_log_impl(&dword_1E1EA4000, v174, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoPacketBuffer[%p] Sending Delayed FIR timeSinceFIRRequest=%2.4f waitFIRTime=%2.4f roundTripTime=%2.4f noFramesDisplayed=%d", buf, 0x54u);
          }
        }
        _VideoReceiver_SendFIR((uint64_t)a2, (uint64_t)v20, *((unsigned __int8 *)v20 + 4280), *((_DWORD *)v20 + 1071), *((double *)v20 + 536));
        *((void *)v20 + 536) = 0;
      }
    }
  }
  if (*((void *)v100 + 15))
  {
    *(void *)&__dst[0] = 0;
    v236[0] = 0.0;
    double v228 = 0.0;
    VideoReceiver_GetBitrate(1.0, a1, (uint64_t)__dst, v236, &v228, 0, 0);
    memset(buf, 0, 32);
    VCVideoPlayer_GetVideoPlayerStatsForJB(*((void *)a2 + 5056), (uint64_t)buf);
    unsigned int v177 = (v228 / 1000.0 + 0.5);
    uint64_t v178 = *((void *)v100 + 15);
    uint64_t v179 = *(void *)(v178 + 40);
    int v180 = (unsigned __int16 *)*((void *)a2 + 5047);
    if (v180) {
      int v181 = *v180;
    }
    else {
      int v181 = *(_DWORD *)(v179 + 24);
    }
    float v182 = 0.0;
    float v183 = 0.0;
    if (*((_WORD *)v106 + 146))
    {
      LOWORD(v183) = *((_WORD *)v106 + 145);
      float v183 = (float)LODWORD(v183) / (float)*((unsigned __int16 *)v106 + 146);
    }
    double v184 = *((double *)v106 + 52) / 1000.0 + 0.5;
    double v185 = *(double *)__dst / 1000.0 + 0.5;
    unsigned int v186 = (v236[0] / 1000.0 + 0.5);
    if (v183 == 0.0) {
      float v187 = *(float *)(v179 + 128);
    }
    else {
      float v187 = v183;
    }
    int v188 = v100;
    unsigned int v189 = v100[28];
    double TotalPLR = _VideoReceiver_GetTotalPLR(a2);
    float v191 = *((double *)v106 + 51);
    float v192 = v191;
    if (v177) {
      float v182 = (float)(v186 / v177);
    }
    int v193 = (int)TotalPLR;
    float v194 = *((double *)v106 + 50);
    unsigned int v195 = v106[116];
    float v196 = *((double *)v106 + 55) * 1000.0;
    float v197 = *((double *)v106 + 12) * 1000.0;
    char v198 = *((unsigned char *)a2 + 1181);
    int v199 = v188[5] - v188[6];
    unsigned int v200 = v106[85];
    uint64_t v201 = *(void *)&buf[8];
    unsigned int v202 = v106[197];
    if (v202) {
      float v203 = *((double *)v106 + 17) / (double)v202 * 1000.0;
    }
    else {
      float v203 = 0.0;
    }
    *(_DWORD *)(v179 + 24) = v181;
    *(_DWORD *)(v179 + 28) = v189;
    *(_DWORD *)(v179 + 92) = v185;
    *(_DWORD *)(v179 + 96) = v177;
    *(_DWORD *)(v179 + 100) = v186;
    *(float *)(v179 + 104) = v182;
    *(_DWORD *)(v179 + 108) = v193;
    *(float *)(v179 + 120) = v192;
    *(float *)(v179 + 124) = v194;
    *(float *)(v179 + 128) = v187;
    *(_DWORD *)(v179 + 152) = v184;
    *(float *)(v179 + 156) = v196;
    *(_DWORD *)(v179 + 160) = v195;
    *(float *)(v179 + 164) = v197;
    *(unsigned char *)(v179 + 168) = v198;
    *(float *)(v179 + 172) = v203;
    *(_DWORD *)(v179 + 176) = v199;
    *(_DWORD *)(v179 + 188) = v200;
    *(void *)(v179 + 192) = v201;
    VCOverlaySource_Write(v178);
  }
  return 0;
}

uint64_t _VideoReceiver_ShouldProcessPacket(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned __int16 *a5, unsigned int a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 1209) || *(unsigned char *)(a2 + 69)) {
    return 1;
  }
  if (!a3 || *(void *)(a1 + 1152) == a4)
  {
    if (a6)
    {
      uint64_t v9 = *(void *)(a1 + 40352);
      uint64_t v10 = *(void *)(a1 + 40360);
      uint64_t v11 = a6 - 1;
      while (1)
      {
        uint64_t v12 = v11;
        int v14 = *a5++;
        int v13 = v14;
        if ((v9 & 0x1000000000000) != 0)
        {
          BOOL v15 = v13 == (unsigned __int16)v9 || WORD1(v9) == v13;
          if ((v10 & 0x1000000000000) != 0)
          {
LABEL_11:
            BOOL v17 = v13 == (unsigned __int16)v10 || WORD1(v10) == v13;
            goto LABEL_25;
          }
        }
        else
        {
          BOOL v15 = 0;
          if ((v10 & 0x1000000000000) != 0) {
            goto LABEL_11;
          }
        }
        BOOL v17 = 0;
LABEL_25:
        uint64_t result = v15 | v17;
        if (!v15 && !v17)
        {
          uint64_t v11 = v12 - 1;
          if (v12) {
            continue;
          }
        }
        return result;
      }
    }
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
    return 0;
  }
  uint64_t v19 = VRTraceErrorLogLevelToCSTR();
  uint64_t v20 = *MEMORY[0x1E4F47A50];
  BOOL v21 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 1152);
    int v23 = 136316418;
    uint64_t v24 = v19;
    __int16 v25 = 2080;
    int v26 = "_VideoReceiver_ShouldProcessPacket";
    __int16 v27 = 1024;
    int v28 = 2838;
    __int16 v29 = 2048;
    uint64_t v30 = a1;
    __int16 v31 = 2048;
    uint64_t v32 = a4;
    __int16 v33 = 2048;
    uint64_t v34 = v22;
    _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unexpected idsParticipantID=%llu, expected=%llu", (uint8_t *)&v23, 0x3Au);
    return 0;
  }
  return result;
}

BOOL _VideoReceiver_HandleStreamSwitch(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 1209)) {
    return 0;
  }
  uint64_t v10 = (unsigned __int16 *)(a1 + 40352);
  uint64_t v11 = *(void *)(a1 + 40384);
  if ((unsigned __int16 *)v11 == a2) {
    return 0;
  }
  if (v11 && (!*(unsigned char *)(v11 + 70) || !*((unsigned char *)a2 + 70)))
  {
    int v14 = (uint64_t *)(a1 + 40696);
    int v15 = *(unsigned __int8 *)(a1 + 40358);
    if (*((unsigned char *)a2 + 70))
    {
      if (*(unsigned char *)(a1 + 40358))
      {
        int v15 = *(unsigned __int8 *)(a1 + 40366);
        if (*(unsigned char *)(a1 + 40366))
        {
          int v16 = (unsigned __int16 *)(a1 + 40356);
          BOOL v17 = (unsigned __int16 *)(a1 + 40364);
LABEL_15:
          int v15 = *v16 == *v17;
        }
      }
    }
    else if (*(unsigned char *)(a1 + 40358))
    {
      int v15 = *(unsigned __int8 *)(a1 + 40366);
      if (*(unsigned char *)(a1 + 40366))
      {
        BOOL v17 = (unsigned __int16 *)(a1 + 40360);
        int v16 = (unsigned __int16 *)(a1 + 40352);
        goto LABEL_15;
      }
    }
    if (*(unsigned char *)(a1 + 40392))
    {
      VCMediaStreamSynchronizer_resetDestinationState(*(void *)(a1 + 41592));
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v18 = VRTraceErrorLogLevelToCSTR();
        uint64_t v19 = *MEMORY[0x1E4F47A50];
        uint64_t v20 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = *v14;
            int v22 = *(_DWORD *)(a1 + 40704);
            int v23 = *(_DWORD *)(a1 + 40708);
            int v24 = *(_DWORD *)(a1 + 40712);
            int v25 = *(_DWORD *)(a1 + 40716);
            int v26 = *(unsigned __int8 *)(a1 + 40720);
            int v34 = 136317186;
            uint64_t v35 = v18;
            __int16 v36 = 2080;
            unsigned int v37 = "_VideoReceiver_HandleStreamSwitch";
            __int16 v38 = 1024;
            int v39 = 2967;
            __int16 v40 = 2048;
            uint64_t v41 = v21;
            __int16 v42 = 1024;
            int v43 = v22;
            __int16 v44 = 1024;
            int v45 = v23;
            __int16 v46 = 1024;
            int v47 = v24;
            __int16 v48 = 1024;
            int v49 = v25;
            __int16 v50 = 1024;
            int v51 = v26;
            _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Before resetting playoutContext, soundAlarmReferenceTimestamp=%llu playoutRTPTimestamp=%u lastVideoTS=%u videoTSWraps=%u lastReceivedTimestamp=%u lastReceivedTimestampValid=%d", (uint8_t *)&v34, 0x44u);
          }
        }
        else if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          _VideoReceiver_HandleStreamSwitch_cold_1();
        }
      }
      *(void *)(a1 + 40728) = 0;
      *(_OWORD *)(a1 + 40696) = 0u;
      *(_OWORD *)(a1 + 40712) = 0u;
    }
    else if (!v15)
    {
      int v12 = 0;
LABEL_30:
      __int16 v33 = (FILE **)v14[123];
      if (v33)
      {
        int v34 = *a2;
        uint64_t v35 = *(uint64_t *)((char *)v14 + 116);
        VRDump_AddEvent(v33, 9u, &v34, a4, a5, a6, a7, a8, v34);
      }
      goto LABEL_32;
    }
    RTPResetHandle();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      int v28 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v29 = *v10;
        int v30 = v10[4];
        int v31 = **((unsigned __int16 **)v10 + 4);
        int v32 = *a2;
        int v34 = 136316930;
        uint64_t v35 = v27;
        __int16 v36 = 2080;
        unsigned int v37 = "_VideoReceiver_HandleStreamSwitch";
        __int16 v38 = 1024;
        int v39 = 2976;
        __int16 v40 = 2048;
        uint64_t v41 = a1;
        __int16 v42 = 1024;
        int v43 = v29;
        __int16 v44 = 1024;
        int v45 = v30;
        __int16 v46 = 1024;
        int v47 = v31;
        __int16 v48 = 1024;
        int v49 = v32;
        _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] currentStreamID:%u targetStreamID:%u, packet receive switched from stream:%u to stream:%u", (uint8_t *)&v34, 0x3Eu);
      }
    }
    int v12 = 1;
    goto LABEL_30;
  }
  int v12 = 0;
LABEL_32:
  *((void *)v10 + 4) = a2;
  return v12 != 0;
}

uint64_t _VideoReceiver_ProcessInternalCallAlarms(uint64_t result, int64_t value, double a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result + 40696;
  if (*(unsigned char *)(result + 41457))
  {
    unsigned int v5 = value;
    unsigned int v6 = (os_unfair_lock_s *)result;
    CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (*(unsigned char *)(result + 41712))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(result + 41708));
      double v7 = *(double *)(v3 + 768);
      if (v7 == 0.0)
      {
        unint64_t v8 = v5;
        *(double *)(v3 + 768) = a3;
        *(void *)uint64_t v3 = v5;
        double v7 = a3;
      }
      else
      {
        unint64_t v8 = *(void *)v3;
      }
      CMTimeMake(&v12, (unint64_t)((double)v8 + (a3 - v7) * (double)(int)v6[258]._os_unfair_lock_opaque), v6[258]._os_unfair_lock_opaque);
      os_unfair_lock_unlock(v6 + 10427);
    }
    else
    {
      double v9 = *(double *)(result + 41464);
      if (v9 == 0.0)
      {
        int64_t v11 = value;
        *(double *)(v3 + 768) = a3;
        *(void *)uint64_t v3 = value;
        int32_t os_unfair_lock_opaque = v6[258]._os_unfair_lock_opaque;
      }
      else
      {
        int32_t os_unfair_lock_opaque = *(_DWORD *)(result + 1032);
        int64_t v11 = (unint64_t)((double)*(unint64_t *)v3 + (a3 - v9) * (double)os_unfair_lock_opaque);
      }
      CMTimeMake(&v12, v11, os_unfair_lock_opaque);
    }
    return _VideoReceiver_CallAlarms((uint64_t)v6, (int *)&v12, a3);
  }
  return result;
}

void _VideoReceiver_EnqueueFailedFrameToJitterBuffer(uint64_t a1, uint64_t a2, double a3)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 1180) && *(void *)(a1 + 41536) && !*(unsigned char *)(a2 + 18))
    {
      *(double *)(a2 + 64) = _VideoReceiver_GetVideoFrameTimeInSeconds(a1, *(_DWORD *)(a2 + 8), a3);
      _VideoReceiver_EnqueueFrameToJitterBuffer(a1, a2);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoReceiver_EnqueueFailedFrameToJitterBuffer_cold_1();
    }
  }
}

double _VideoReceiver_GetVideoFrameTimeInSeconds(uint64_t a1, unsigned int a2, double a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (_DWORD *)(a1 + 40712);
  uint64_t v6 = *(void *)(a1 + 41592);
  if (v6)
  {
    double v7 = VCMediaStreamSynchronizer_scheduleTimeForDestinationRTPTimestamp(v6, a2);
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return v7;
    }
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    double v9 = *MEMORY[0x1E4F47A50];
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 136316418;
        uint64_t v17 = v8;
        __int16 v18 = 2080;
        uint64_t v19 = "_VideoReceiver_GetVideoFrameTimeInSeconds";
        __int16 v20 = 1024;
        int v21 = 2612;
        __int16 v22 = 2048;
        uint64_t v23 = a1;
        __int16 v24 = 2048;
        double v25 = v7;
        __int16 v26 = 1024;
        unsigned int v27 = a2;
        int64_t v11 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] videoFrameTimeInSeconds=%.6f from VCMediaStreamSynchronizer for"
              " RTPTimestamp=%u";
LABEL_10:
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, 0x36u);
        return v7;
      }
      return v7;
    }
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      return v7;
    }
    int v16 = 136316418;
    uint64_t v17 = v8;
    __int16 v18 = 2080;
    uint64_t v19 = "_VideoReceiver_GetVideoFrameTimeInSeconds";
    __int16 v20 = 1024;
    int v21 = 2612;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 2048;
    double v25 = v7;
    __int16 v26 = 1024;
    unsigned int v27 = a2;
    int v14 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] videoFrameTimeInSeconds=%.6f from VCMediaStreamSynchronizer for RTPTimestamp=%u";
LABEL_16:
    _os_log_debug_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEBUG, v14, (uint8_t *)&v16, 0x36u);
    return v7;
  }
  LODWORD(a3) = *v5;
  double v7 = ((double)a2 + (double)*(unint64_t *)&a3 * 4294967300.0) / (double)*(int *)(a1 + 1036);
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    return v7;
  }
  uint64_t v12 = VRTraceErrorLogLevelToCSTR();
  double v9 = *MEMORY[0x1E4F47A50];
  uint64_t v13 = *MEMORY[0x1E4F47A50];
  if (!*MEMORY[0x1E4F47A40])
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      return v7;
    }
    int v16 = 136316418;
    uint64_t v17 = v12;
    __int16 v18 = 2080;
    uint64_t v19 = "_VideoReceiver_GetVideoFrameTimeInSeconds";
    __int16 v20 = 1024;
    int v21 = 2615;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 2048;
    double v25 = v7;
    __int16 v26 = 1024;
    unsigned int v27 = a2;
    int v14 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] videoFrameTimeInSeconds=%.6f for RTPTimestamp=%u";
    goto LABEL_16;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136316418;
    uint64_t v17 = v12;
    __int16 v18 = 2080;
    uint64_t v19 = "_VideoReceiver_GetVideoFrameTimeInSeconds";
    __int16 v20 = 1024;
    int v21 = 2615;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 2048;
    double v25 = v7;
    __int16 v26 = 1024;
    unsigned int v27 = a2;
    int64_t v11 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] videoFrameTimeInSeconds=%.6f for RTPTimestamp=%u";
    goto LABEL_10;
  }
  return v7;
}

void _VideoReceiver_EnqueueFrameToJitterBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (*(double *)(a2 + 48) == 0.0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoReceiver_EnqueueFrameToJitterBuffer_cold_1();
        }
      }
    }
    else
    {
      uint64_t v3 = a1 + 40448;
      if (*(unsigned char *)(a2 + 75))
      {
        ++*(_DWORD *)(a1 + 41572);
        *(_WORD *)(a1 + 41566) = *(_WORD *)(a2 + 40);
      }
      long long v21 = 0u;
      long long v22 = 0u;
      VCVideoPlayer_GetVideoPlayerStatsForJB(*(void *)v3, (uint64_t)&v21);
      *((void *)&v21 + 1) = *(void *)(v3 + 280);
      int v4 = *(_DWORD *)(v3 + 1124);
      WORD1(v21) = v4 - *(_WORD *)(v3 + 1132);
      *(_DWORD *)(v3 + 1132) = v4;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v5 = VRTraceErrorLogLevelToCSTR();
        uint64_t v6 = *MEMORY[0x1E4F47A50];
        double v7 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            int v8 = *(unsigned __int16 *)(a2 + 16);
            int v9 = *(unsigned __int16 *)(a2 + 36);
            int v10 = *(unsigned __int8 *)(a2 + 39);
            int v11 = *(unsigned __int16 *)(a2 + 40);
            int v12 = *(_DWORD *)(a2 + 8);
            int v13 = *(unsigned __int8 *)(a2 + 75);
            *(_DWORD *)CMTime buf = 136317186;
            *(void *)&uint8_t buf[4] = v5;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_EnqueueFrameToJitterBuffer";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 2223;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v8;
            __int16 v24 = 1024;
            int v25 = v9;
            __int16 v26 = 1024;
            int v27 = v10;
            __int16 v28 = 1024;
            int v29 = v11;
            __int16 v30 = 1024;
            int v31 = v12;
            __int16 v32 = 1024;
            int v33 = v13;
            _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Sending frame to video jitter buffer with DON=%u tileIndex=%u for isFrameSequenceNumberValid=%d FrameSequenceNumber=%u rtpTimeStamp=%u isFailedCompleteFrame=%d", buf, 0x40u);
          }
        }
        else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          int v15 = *(unsigned __int16 *)(a2 + 16);
          int v16 = *(unsigned __int16 *)(a2 + 36);
          int v17 = *(unsigned __int8 *)(a2 + 39);
          int v18 = *(unsigned __int16 *)(a2 + 40);
          int v19 = *(_DWORD *)(a2 + 8);
          int v20 = *(unsigned __int8 *)(a2 + 75);
          *(_DWORD *)CMTime buf = 136317186;
          *(void *)&uint8_t buf[4] = v5;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_EnqueueFrameToJitterBuffer";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 2223;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v15;
          __int16 v24 = 1024;
          int v25 = v16;
          __int16 v26 = 1024;
          int v27 = v17;
          __int16 v28 = 1024;
          int v29 = v18;
          __int16 v30 = 1024;
          int v31 = v19;
          __int16 v32 = 1024;
          int v33 = v20;
          _os_log_debug_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d Sending frame to video jitter buffer with DON=%u tileIndex=%u for isFrameSequenceNumberValid=%d FrameSequenceNumber=%u rtpTimeStamp=%u isFailedCompleteFrame=%d", buf, 0x40u);
        }
      }
      uint64_t v14 = *(void *)(v3 + 1088);
      *(_OWORD *)CMTime buf = v21;
      *(_OWORD *)&buf[16] = v22;
      VCVideoJitterBuffer_EnqueueFrame(v14, a2, (long long *)buf);
    }
  }
}

uint64_t _VideoReceiver_ScheduleFramesForVideoPacketBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2 + 40704;
  unsigned int v17 = -1431655766;
  uint64_t v11 = VideoPacketBuffer_SchedulePastIncompleteFrame(a3, a4, &v17, *(_DWORD *)(a2 + 40704), *(unsigned __int8 *)(a2 + 41516), *(unsigned __int16 *)(a2 + 41518));
  if (v11)
  {
    char v12 = 0;
    unsigned int v13 = 0;
    do
    {
      unsigned int v14 = v17;
      if ((v12 & 1) != 0 && v13 == v17) {
        break;
      }
      _VideoReceiver_AssembleAndEnqueueFrame(a1, a2, (unsigned __int16 *)a5, v17);
      char v15 = VideoPacketBuffer_SchedulePastIncompleteFrame(a3, a4, &v17, *(_DWORD *)v10, *(unsigned __int8 *)(v10 + 812), *(unsigned __int16 *)(v10 + 814));
      char v12 = 1;
      unsigned int v13 = v14;
    }
    while ((v15 & 1) != 0);
  }
  if (VideoPacketBuffer_ScheduleFutureFrame(a3, *(_DWORD *)(a5 + 136), a4, &v17, *(_DWORD *)v10, *(unsigned __int8 *)(v10 + 812), *(unsigned __int16 *)(v10 + 814), *(double *)(v10 + 776)))
  {
    do
      _VideoReceiver_AssembleAndEnqueueFrame(a1, a2, (unsigned __int16 *)a5, v17);
    while (VideoPacketBuffer_ScheduleFutureFrame(a3, *(_DWORD *)(a5 + 136), a4, &v17, *(_DWORD *)v10, *(unsigned __int8 *)(v10 + 812), *(unsigned __int16 *)(v10 + 814), *(double *)(v10 + 776)));
    return 1;
  }
  return v11;
}

uint64_t _VideoReceiver_AssembleAndEnqueueFrame(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4)
{
  uint64_t v194 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2 + 40672;
  unsigned int v7 = *(_DWORD *)(a2 + 40708);
  BOOL v8 = a4 >= v7;
  unsigned int v9 = a4 - v7;
  if (!v8 && v9 <= 0x7FFFFFFE) {
    ++*(_DWORD *)(a2 + 40712);
  }
  uint64_t v148 = a2 + 40369;
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  char v12 = (unsigned __int8 *)MEMORY[0x1E4F47A40];
  if (ErrorLogLevelForModule >= 8)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    int v14 = *v12;
    char v15 = *MEMORY[0x1E4F47A50];
    int v16 = *MEMORY[0x1E4F47A50];
    if (v14)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_AssembleAndEnqueueFrame";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2624;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a2;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = a4;
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Got frame with RTPTimestamp=%u", buf, 0x2Cu);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoReceiver_AssembleAndEnqueueFrame";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2624;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = a2;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&uint8_t buf[40] = a4;
      _os_log_debug_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Got frame with RTPTimestamp=%u", buf, 0x2Cu);
    }
  }
  *(_DWORD *)(v6 + 36) = a4;
  long long v154 = 0u;
  long long v155 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  VideoFrameTimeInFloat64 Seconds = _VideoReceiver_GetVideoFrameTimeInSeconds(a2, a4, 0.0);
  int v161 = -1431655766;
  int v160 = -1431655766;
  int v159 = 0;
  int v156 = 0;
  int v158 = 1;
  while (1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 40600));
    int v160 = 0;
    double v18 = micro();
    int v156 = 0;
    int v161 = -1;
    element = 0;
    int v162 = -1431655936;
    int NextFrame = VideoPacketBuffer_GetNextFrame(*((void *)a3 + 14), a4, 0, &v161, &v158, &v156, &v160, &v159, &v162, &element, *(_WORD *)(a2 + 1162), (uint64_t)&v150);
    if ((char)v162 < 0) {
      *(unsigned char *)(v6 + 712) = v162;
    }
    if (v161 != -1)
    {
      BOOL v21 = v161 == 2 && *(unsigned char *)(a2 + 1183) != 0;
      int v22 = v158;
      if (*(unsigned char *)(a2 + 1276))
      {
        *((unsigned char *)a3 + 4280) = v21;
        *((_DWORD *)a3 + 1071) = v22;
        if (*((double *)a3 + 536) == 0.0) {
          *((double *)a3 + 536) = v18;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v23 = VRTraceErrorLogLevelToCSTR();
          __int16 v24 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = *((void *)a3 + 14);
            uint64_t v26 = *((void *)a3 + 536);
            *(_DWORD *)CMTime buf = 136316418;
            *(void *)&uint8_t buf[4] = v23;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_SendFIRWithDelay";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 1586;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a2;
            *(_WORD *)&buf[38] = 2048;
            *(void *)&uint8_t buf[40] = v25;
            *(_WORD *)&buf[48] = 2048;
            *(void *)&buf[50] = v26;
            _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoPacketBuffer[%p] Delay FIR cachedFIRcurrentTime=%2.4f", buf, 0x3Au);
          }
        }
      }
      else
      {
        _VideoReceiver_SendFIR(a2, (uint64_t)a3, v21, v158, v18);
      }
    }
    if (v156) {
      _VideoReceiver_ResetExpectedDecodingOrder(a2);
    }
    if (element)
    {
      if (*((unsigned char *)element + 23))
      {
        *(_WORD *)CMTime buf = (unsigned __int16)element[14];
        ReportingEventDictionary = _VideoReceiver_CreateReportingEventDictionary(a2);
        CFNumberRef v28 = CFNumberCreate(*(CFAllocatorRef *)(v6 + 856), kCFNumberSInt16Type, buf);
        CFDictionaryAddValue(ReportingEventDictionary, @"VCVSKeyFrameSize", v28);
        CFRelease(v28);
        reportingVideoStreamEvent();
        CFRelease(ReportingEventDictionary);
        memset(buf, 0, 96);
        memset(v187, 0, sizeof(v187));
        VCUtil_ConvertStreamIDArrayToString((size_t)(a3 + 6), a3[4], buf, 0x60uLL);
        VCUtil_ConvertStreamIDArrayToString((size_t)(a3 + 15), a3[4], (char *)v187, 0x60uLL);
        *(_DWORD *)(v6 + 960) = *((_DWORD *)element + 4);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v29 = VRTraceErrorLogLevelToCSTR();
          __int16 v30 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v31 = *(_DWORD *)(v6 + 960);
            CFAllocatorRef v32 = element[14];
            int v33 = *a3;
            int v34 = a3[1];
            int v35 = *((unsigned __int8 *)a3 + 70);
            BOOL v36 = v33 == a3[2];
            *(_DWORD *)double v163 = 136317954;
            uint64_t v164 = v29;
            __int16 v165 = 2080;
            unsigned int v166 = "_VideoReceiver_AssembleAndEnqueueForDecode";
            __int16 v167 = 1024;
            int v168 = 2522;
            __int16 v169 = 2048;
            uint64_t v170 = a2;
            __int16 v171 = 1024;
            int v172 = v31;
            __int16 v173 = 1024;
            int v174 = (int)v32;
            __int16 v175 = 1024;
            int v176 = v33;
            __int16 v177 = 1024;
            int v178 = v34;
            __int16 v179 = 2080;
            int v180 = buf;
            __int16 v181 = 2080;
            float v182 = v187;
            __int16 v183 = 1024;
            int v184 = v35;
            __int16 v185 = 1024;
            BOOL v186 = v36;
            _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received key frame timestamp=%u bytes=%d for streamID=%d, repairStreamID=%d, subStreamIDs=%s, repairSubStreamIDs=%s, isTemporalScaledStream=%d isBaseLayer=%d", v163, 0x5Eu);
          }
        }
      }
    }
    if (!NextFrame) {
      break;
    }
    unsigned int v37 = (char *)element;
    if (!element) {
      goto LABEL_148;
    }
    if (*(unsigned __int16 *)(a2 + 1162) >= 2u)
    {
      if (!*((unsigned char *)element + 26))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v62 = VRTraceErrorLogLevelToCSTR();
          uint64_t v63 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v62;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_AssembleAndEnqueueForDecode";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 2539;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a2;
            _os_log_error_impl(&dword_1E1EA4000, v63, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received a frame with invalid decoding order!", buf, 0x26u);
          }
        }
        goto LABEL_75;
      }
      int v38 = *((unsigned __int8 *)element + 23);
      int v39 = *((unsigned __int16 *)element + 12);
      if (*(unsigned char *)(v6 + 844))
      {
        int v40 = v39 - *(unsigned __int16 *)(v6 + 846);
        if (v40)
        {
          if ((unsigned __int16)v40 <= 0x7FFEu && (int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v41 = VRTraceErrorLogLevelToCSTR();
            __int16 v42 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v43 = *(unsigned __int16 *)(v6 + 846);
              *(_DWORD *)CMTime buf = 136316418;
              *(void *)&uint8_t buf[4] = v41;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedDecodingOrder";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 865;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = a2;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&uint8_t buf[40] = v39;
              *(_WORD *)&unsigned char buf[44] = 1024;
              *(_DWORD *)&buf[46] = v43;
              _os_log_impl(&dword_1E1EA4000, v42, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Jump in frameDecodingOrder:%hu expectedDecodingOrder:%hu", buf, 0x32u);
            }
          }
        }
        if ((unsigned __int16)(v39 - *(_WORD *)(v6 + 846)) >= 0x7FFFu && (int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v44 = VRTraceErrorLogLevelToCSTR();
          int v45 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v46 = *(unsigned __int16 *)(v6 + 846);
            *(_DWORD *)CMTime buf = 136316418;
            *(void *)&uint8_t buf[4] = v44;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedDecodingOrder";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 868;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a2;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&uint8_t buf[40] = v39;
            *(_WORD *)&unsigned char buf[44] = 1024;
            *(_DWORD *)&buf[46] = v46;
            _os_log_impl(&dword_1E1EA4000, v45, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] out of order in frameDecodingOrder:%hu expectedDecodingOrder:%hu", buf, 0x32u);
          }
        }
        if (*(unsigned char *)(v6 + 844))
        {
          if ((unsigned __int16)(v39 - *(_WORD *)(v6 + 846)) <= 0x7FFEu) {
            *(_WORD *)(v6 + 846) = v39 + 1;
          }
          goto LABEL_75;
        }
      }
      if (v38)
      {
        int v47 = *(_DWORD *)(v6 + 840) + 1;
        *(_DWORD *)(v6 + 840) = v47;
        if (!*(unsigned char *)(v6 + 845))
        {
          *(_WORD *)(v6 + 846) = v39 + 1;
          *(unsigned char *)(v6 + 844) = v47 == *(unsigned __int16 *)(a2 + 1162);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v64 = VRTraceErrorLogLevelToCSTR();
            uint64_t v65 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v66 = *(_DWORD *)(v6 + 840);
              int v67 = *(unsigned __int16 *)(v6 + 846);
              int v68 = *(unsigned __int8 *)(v6 + 844);
              *(_DWORD *)CMTime buf = 136316930;
              *(void *)&uint8_t buf[4] = v64;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedDecodingOrderForRefreshFrame";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 842;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = a2;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&uint8_t buf[40] = v39;
              *(_WORD *)&unsigned char buf[44] = 1024;
              *(_DWORD *)&buf[46] = v66;
              *(_WORD *)&buf[50] = 1024;
              *(_DWORD *)&buf[52] = v67;
              *(_WORD *)&buf[56] = 1024;
              *(_DWORD *)&buf[58] = v68;
              _os_log_impl(&dword_1E1EA4000, v65, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] First refresh frameDecodingOrder:%hu refreshFrameCount:%d expectedDecodingOrder:%hu isExpectedDecodingOrderValid:%d", buf, 0x3Eu);
            }
          }
          *(unsigned char *)(v6 + 845) = 1;
          goto LABEL_75;
        }
        int v48 = *(unsigned __int16 *)(v6 + 846);
        if ((unsigned __int16)(v39 - v48) <= 0x7FFEu)
        {
          if (v39 != v48)
          {
            *(_DWORD *)(v6 + 840) = 1;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v49 = VRTraceErrorLogLevelToCSTR();
              __int16 v50 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v51 = *(_DWORD *)(v6 + 840);
                int v52 = *(unsigned __int16 *)(v6 + 846);
                int v53 = *(unsigned __int8 *)(v6 + 844);
                *(_DWORD *)CMTime buf = 136316930;
                *(void *)&uint8_t buf[4] = v49;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedDecodingOrderForRefreshFrame";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = 851;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = a2;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&uint8_t buf[40] = v39;
                *(_WORD *)&unsigned char buf[44] = 1024;
                *(_DWORD *)&buf[46] = v51;
                *(_WORD *)&buf[50] = 1024;
                *(_DWORD *)&buf[52] = v52;
                *(_WORD *)&buf[56] = 1024;
                *(_DWORD *)&buf[58] = v53;
                _os_log_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Jump within refresh frameDecodingOrder:%hu refreshFrameCount:%d expectedDecodingOrder:%hu isExpectedDecodingOrderValid:%d", buf, 0x3Eu);
              }
            }
          }
          *(_WORD *)(v6 + 846) = v39 + 1;
          *(unsigned char *)(v6 + 844) = *(_DWORD *)(v6 + 840) == *(unsigned __int16 *)(a2 + 1162);
          if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
            goto LABEL_75;
          }
          uint64_t v54 = VRTraceErrorLogLevelToCSTR();
          uint64_t v55 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_75;
          }
          int v56 = *(_DWORD *)(v6 + 840);
          int v57 = *(unsigned __int16 *)(v6 + 846);
          int v58 = *(unsigned __int8 *)(v6 + 844);
          *(_DWORD *)CMTime buf = 136316930;
          *(void *)&uint8_t buf[4] = v54;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedDecodingOrderForRefreshFrame";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 856;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a2;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&uint8_t buf[40] = v39;
          *(_WORD *)&unsigned char buf[44] = 1024;
          *(_DWORD *)&buf[46] = v56;
          *(_WORD *)&buf[50] = 1024;
          *(_DWORD *)&buf[52] = v57;
          *(_WORD *)&buf[56] = 1024;
          *(_DWORD *)&buf[58] = v58;
          uint64_t v59 = v55;
          BOOL v60 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Refresh frameDecodingOrder:%d refreshFrameCount:%d expectedDe"
                "codingOrder:%hu isExpectedDecodingOrderValid:%d";
          uint32_t v61 = 62;
LABEL_74:
          _os_log_impl(&dword_1E1EA4000, v59, OS_LOG_TYPE_DEFAULT, v60, buf, v61);
LABEL_75:
          unsigned int v37 = (char *)element;
          *((_WORD *)element + 22) = *((unsigned __int8 *)a3 + 68);
          goto LABEL_76;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_75;
        }
        uint64_t v69 = VRTraceErrorLogLevelToCSTR();
        uint64_t v70 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_75;
        }
        int v71 = *(unsigned __int16 *)(v6 + 846);
        int v72 = *(unsigned __int8 *)(v6 + 844);
        *(_DWORD *)CMTime buf = 136316674;
        *(void *)&uint8_t buf[4] = v69;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedDecodingOrderForRefreshFrame";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 858;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a2;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v39;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v71;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v72;
        uint64_t v59 = v70;
        BOOL v60 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received out of order refresh frameDecodingOrder:%hu expectedDe"
              "codingOrder:%hu isExpectedDecodingOrderValid:%d";
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
          goto LABEL_75;
        }
        uint64_t v134 = VRTraceErrorLogLevelToCSTR();
        BOOL v135 = *MEMORY[0x1E4F47A50];
        char v136 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
          {
            int v139 = *(unsigned __int16 *)(v6 + 846);
            int v140 = *(unsigned __int8 *)(v6 + 844);
            *(_DWORD *)CMTime buf = 136316674;
            *(void *)&uint8_t buf[4] = v134;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedDecodingOrder";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 883;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a2;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&uint8_t buf[40] = v39;
            *(_WORD *)&unsigned char buf[44] = 1024;
            *(_DWORD *)&buf[46] = v139;
            *(_WORD *)&buf[50] = 1024;
            *(_DWORD *)&buf[52] = v140;
            _os_log_debug_impl(&dword_1E1EA4000, v135, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Not a refresh frameDecodingOrder:%hu expectedDecodingOrder:%hu isExpectedDecodingOrderValid:%d", buf, 0x38u);
          }
          goto LABEL_75;
        }
        if (!os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_75;
        }
        int v137 = *(unsigned __int16 *)(v6 + 846);
        int v138 = *(unsigned __int8 *)(v6 + 844);
        *(_DWORD *)CMTime buf = 136316674;
        *(void *)&uint8_t buf[4] = v134;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoReceiver_UpdateExpectedDecodingOrder";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 883;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a2;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v39;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v137;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v138;
        uint64_t v59 = v135;
        BOOL v60 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] Not a refresh frameDecodingOrder:%hu expectedDecodingOrder:%hu "
              "isExpectedDecodingOrderValid:%d";
      }
      uint32_t v61 = 56;
      goto LABEL_74;
    }
LABEL_76:
    *((_WORD *)v37 + 10) = *a3;
    v37[64] = *((unsigned char *)a3 + 69);
    *((double *)v37 + 9) = VideoFrameTimeInSeconds;
    *((void *)v37 + 11) = *((void *)v37 + 14);
    if (*(unsigned char *)(a2 + 1183)) {
      BOOL v73 = v160 == 0;
    }
    else {
      BOOL v73 = 1;
    }
    char v74 = !v73;
    v37[96] = v74;
    *((_DWORD *)v37 + 25) = v159;
    long long v75 = *(_OWORD *)(v37 + 24);
    long long v150 = *(_OWORD *)(v37 + 8);
    long long v151 = v75;
    long long v76 = *(_OWORD *)(v37 + 56);
    long long v77 = *(_OWORD *)(v37 + 88);
    long long v78 = *(_OWORD *)(v37 + 40);
    long long v154 = *(_OWORD *)(v37 + 72);
    long long v155 = v77;
    long long v152 = v78;
    long long v153 = v76;
    if (*(unsigned char *)(v6 + 537))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v79 = VRTraceErrorLogLevelToCSTR();
        __int16 v80 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v81 = *((unsigned __int16 *)v37 + 10);
          int v82 = *((_DWORD *)v37 + 2);
          int v83 = *((_DWORD *)v37 + 4);
          *(_DWORD *)CMTime buf = 136316930;
          *(void *)&uint8_t buf[4] = v79;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_EnqueueForDecode";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 2388;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a2;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&uint8_t buf[40] = v81;
          *(_WORD *)&unsigned char buf[44] = 1024;
          *(_DWORD *)&buf[46] = v82;
          *(_WORD *)&buf[50] = 1024;
          *(_DWORD *)&buf[52] = v83;
          *(_WORD *)&buf[56] = 2048;
          *(void *)&buf[58] = 96;
          _os_log_impl(&dword_1E1EA4000, v80, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] for streamID=%d enqueue encoded frame for later decode. payload=%d timestamp=%u argsLength=%zu", buf, 0x42u);
        }
      }
    }
    unsigned int v84 = *(unsigned __int16 *)(a2 + 1162);
    if (v84 >= 2)
    {
      if (!*(unsigned char *)(v6 + 844) && !v37[23])
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v118 = VRTraceErrorLogLevelToCSTR();
          int v119 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v120 = *(unsigned __int16 *)(v6 + 846);
            int v121 = v37[23];
            int v122 = v37[26];
            int v123 = *((unsigned __int16 *)v37 + 12);
            *(_DWORD *)CMTime buf = 136316930;
            *(void *)&uint8_t buf[4] = v118;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_EnqueueForDecode";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 2391;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a2;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&uint8_t buf[40] = v120;
            *(_WORD *)&unsigned char buf[44] = 1024;
            *(_DWORD *)&buf[46] = v121;
            *(_WORD *)&buf[50] = 1024;
            *(_DWORD *)&buf[52] = v122;
            *(_WORD *)&buf[56] = 1024;
            *(_DWORD *)&buf[58] = v123;
            _os_log_impl(&dword_1E1EA4000, v119, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Don't process sub frame when expectedDecodingOrder:%d is invalid! isRefreshFrame:%d frameDecodingOrderValid:%d frameDecodingOrder:%d", buf, 0x3Eu);
          }
        }
        int v104 = 20;
        goto LABEL_137;
      }
      if (*(unsigned __int16 *)(v6 + 846) != (unsigned __int16)(*((_WORD *)v37 + 12) + 1))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v97 = VRTraceErrorLogLevelToCSTR();
          CFNumberRef v98 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v99 = *(unsigned __int16 *)(v6 + 846);
            int v100 = *(unsigned __int8 *)(v6 + 844);
            int v101 = v37[23];
            int v102 = v37[26];
            int v103 = *((unsigned __int16 *)v37 + 12);
            *(_DWORD *)CMTime buf = 136317186;
            *(void *)&uint8_t buf[4] = v97;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_EnqueueForDecode";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 2397;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a2;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&uint8_t buf[40] = v99;
            *(_WORD *)&unsigned char buf[44] = 1024;
            *(_DWORD *)&buf[46] = v100;
            *(_WORD *)&buf[50] = 1024;
            *(_DWORD *)&buf[52] = v101;
            *(_WORD *)&buf[56] = 1024;
            *(_DWORD *)&buf[58] = v102;
            *(_WORD *)&buf[62] = 1024;
            *(_DWORD *)&unsigned char buf[64] = v103;
            _os_log_impl(&dword_1E1EA4000, v98, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Don't process sub frame when expectedDecodingOrder:%d isExpectedDecodingOrderValid:%d is jumping or out of order! isRefreshFrame:%d frameDecodingOrderValid:%d frameDecodingOrder:%d", buf, 0x44u);
          }
        }
        int v104 = 21;
LABEL_137:
        int v158 = v104;
LABEL_138:
        if (*(unsigned __int16 *)(a2 + 1162) >= 2u && !*(unsigned char *)(v6 + 844))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v124 = VRTraceErrorLogLevelToCSTR();
            uint64_t v125 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v126 = *((void *)a3 + 14);
              int v127 = *((unsigned __int16 *)element + 12);
              int v128 = *(unsigned __int16 *)(v6 + 846);
              int v129 = *(unsigned __int8 *)(v6 + 844);
              *(_DWORD *)CMTime buf = 136316930;
              *(void *)&uint8_t buf[4] = v124;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_AssembleAndEnqueueForDecode";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 2555;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = a2;
              *(_WORD *)&buf[38] = 2048;
              *(void *)&uint8_t buf[40] = v126;
              *(_WORD *)&buf[48] = 1024;
              *(_DWORD *)&buf[50] = v127;
              *(_WORD *)&buf[54] = 1024;
              *(_DWORD *)&buf[56] = v128;
              *(_WORD *)&buf[60] = 1024;
              *(_DWORD *)&buf[62] = v129;
              _os_log_impl(&dword_1E1EA4000, v125, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VideoPacketBuffer[%p] Needs refresh and reset DON due to failure to enqueue video frameDecodingOrder:%hu expectedDecodingOrder:%hu isExpectedDecodingOrderValid:%d", buf, 0x42u);
            }
          }
          if (*(unsigned char *)(a2 + 1183)) {
            BOOL v130 = *(_DWORD *)(v6 + 148) != 0;
          }
          else {
            BOOL v130 = 0;
          }
          _VideoReceiver_DecoderNeedsRefresh(a2, (uint64_t)a3, v130, v158, v18);
        }
        VCVideoReceiverSampleBuffer_Destroy(&element);
        goto LABEL_148;
      }
    }
    if (*(unsigned char *)(a2 + 1180))
    {
      if (*(unsigned char *)(a2 + 1191) && v37[23])
      {
        int v85 = *((_DWORD *)v37 + 17);
        if (v85 != *(_DWORD *)(v6 + 152))
        {
          unsigned int v86 = (int)VCDefaults_GetIntValueForKey(@"pixelCountThresholdForDynamicVideoJitterBufferMode", 8294400) > v85;
          _VideoReceiver_SetJitterBufferMode(a2, v86);
          unsigned int v84 = *(unsigned __int16 *)(a2 + 1162);
        }
        *(_DWORD *)(v6 + 152) = v85;
      }
      uint64_t v87 = (uint64_t)(v37 + 8);
      if (v84 >= 2)
      {
        buf[0] = 0;
        VideoDecoder_IsLastSubframe(*(void *)(v148 + 87), *((void *)v37 + 13), *((unsigned __int16 *)v37 + 22), buf);
        if (!buf[0]) {
          uint64_t v87 = 0;
        }
      }
      _VideoReceiver_EnqueueFrameToJitterBuffer(a2, v87);
    }
    if (!*((unsigned char *)a3 + 70) && *((unsigned __int16 *)v37 + 10) == *(unsigned __int16 *)(v6 + 896))
    {
      if (*(unsigned char *)(v6 + 340))
      {
        unsigned int v88 = (unsigned __int16)(*((_WORD *)v37 + 24) - *(_WORD *)(v6 + 894));
        if (v88 >= 2)
        {
          unsigned int v89 = v88 - 1;
          *(_DWORD *)(v6 + 900) += v88 - 1;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v90 = VRTraceErrorLogLevelToCSTR();
            uint64_t v91 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v92 = *((_DWORD *)v37 + 4);
              int v93 = *((unsigned __int16 *)v37 + 24);
              int v94 = *(unsigned __int16 *)(v6 + 894);
              *(_DWORD *)CMTime buf = 136316930;
              *(void *)&uint8_t buf[4] = v90;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_CalculateFrameErasures";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 2249;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = a2;
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&uint8_t buf[40] = v89;
              *(_WORD *)&unsigned char buf[44] = 1024;
              *(_DWORD *)&buf[46] = v92;
              *(_WORD *)&buf[50] = 1024;
              *(_DWORD *)&buf[52] = v93;
              *(_WORD *)&buf[56] = 1024;
              *(_DWORD *)&buf[58] = v94;
              _os_log_impl(&dword_1E1EA4000, v91, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Detected video frame erasure count of %u frames. rtpTimestamp=%u frameSequenceNumber=%u lastFrameSequenceNumber=%u", buf, 0x3Eu);
            }
          }
        }
      }
    }
    *(_WORD *)(v6 + 894) = *((_WORD *)v37 + 24);
    *(_WORD *)(v6 + 896) = *((_WORD *)v37 + 10);
    if (!v37[23])
    {
      if (*(unsigned char *)v148)
      {
        if (!v37[81])
        {
          uint64_t v95 = *((void *)v37 + 7);
          memset(&buf[28], 0, 82);
          long long v189 = 0u;
          long long v190 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          memset(v193, 0, sizeof(v193));
          uint64_t v96 = *(void *)(v6 + 744);
          *(void *)CMTime buf = 10;
          *(void *)&buf[8] = v95;
          *(void *)&buf[16] = 0;
          *(_DWORD *)&unsigned char buf[24] = 5;
          goto LABEL_117;
        }
      }
      else if (v37[81])
      {
        uint64_t v105 = *((void *)v37 + 7);
        *(void *)&buf[28] = 0;
        *(void *)&buf[36] = 0;
        *(_WORD *)&unsigned char buf[44] = 256;
        memset(&buf[46], 0, 64);
        long long v189 = 0u;
        long long v190 = 0u;
        long long v191 = 0u;
        long long v192 = 0u;
        memset(v193, 0, sizeof(v193));
        uint64_t v96 = *(void *)(v6 + 744);
        *(void *)CMTime buf = 10;
        *(void *)&buf[8] = v105;
        *(void *)&buf[16] = 0;
        *(_DWORD *)&unsigned char buf[24] = 5;
LABEL_117:
        VCRateControlSetStatistics(v96, buf);
      }
      *(unsigned char *)uint64_t v148 = v37[81];
    }
    if (*(unsigned char *)(a2 + 1254))
    {
      Head = (double *)CMSimpleQueueGetHead(*(CMSimpleQueueRef *)(v6 + 632));
      if (Head)
      {
        double v109 = Head[9];
        LODWORD(v107) = *(_DWORD *)(v6 + 32);
        LODWORD(v108) = *(_DWORD *)(v6 + 40);
        double v110 = ((double)v107 + (double)v108 * 4294967300.0) / (double)*(int *)(a2 + 1036);
        if (v110 - v109 > *(double *)(v6 + 944) && *(double *)(v6 + 808) - *(double *)(v6 + 824) > 30.0)
        {
          int32_t Count = CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(v6 + 632));
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v112 = VRTraceErrorLogLevelToCSTR();
            uint64_t v113 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136316930;
              *(void *)&uint8_t buf[4] = v112;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_CheckQueueDepthMeetsRealtime";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 2377;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = a2;
              *(_WORD *)&buf[38] = 2048;
              *(double *)&uint8_t buf[40] = v110 - v109;
              *(_WORD *)&buf[48] = 2048;
              *(double *)&buf[50] = v110;
              *(_WORD *)&buf[58] = 2048;
              *(double *)&buf[60] = v109;
              *(_WORD *)&buf[68] = 1024;
              *(_DWORD *)&buf[70] = Count;
              _os_log_impl(&dword_1E1EA4000, v113, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] High watermark exceeded in frameQueueForDecode. delay=%0.3f playoutTimeInSeconds=%0.6f, oldestVideoFrameTimeInSeconds=%0.6f, numFramesEnqueuedForDecode=%d", buf, 0x4Au);
            }
          }
          reportingSymptom();
          *(void *)(v6 + 824) = *(void *)(v6 + 808);
        }
      }
    }
    OSStatus v114 = CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v6 + 632), v37);
    if (v114)
    {
      OSStatus v115 = v114;
      int v158 = 22;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v116 = VRTraceErrorLogLevelToCSTR();
        uint64_t v117 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v131 = *((unsigned __int16 *)v37 + 10);
          int v132 = *((_DWORD *)v37 + 2);
          int v133 = *((_DWORD *)v37 + 4);
          *(_DWORD *)CMTime buf = 136316930;
          *(void *)&uint8_t buf[4] = v116;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_EnqueueForDecode";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 2435;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a2;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&uint8_t buf[40] = v131;
          *(_WORD *)&unsigned char buf[44] = 1024;
          *(_DWORD *)&buf[46] = v132;
          *(_WORD *)&buf[50] = 1024;
          *(_DWORD *)&buf[52] = v133;
          *(_WORD *)&buf[56] = 1024;
          *(_DWORD *)&buf[58] = v115;
          _os_log_error_impl(&dword_1E1EA4000, v117, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d VideoReceiver[%p] for streamID=%d failed to enqueue frame for decode. payload=%d timestamp=%u status=%d", buf, 0x3Eu);
        }
      }
      if (!*(unsigned char *)(v6 + 612))
      {
        *(unsigned char *)(v6 + 612) = 1;
        VCUtil_GenerateDiagnostics(0, 0, "VideoReceiver failed to enqueue frame into frameQueueForDecode", 1u);
      }
      goto LABEL_138;
    }
LABEL_148:
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40600));
  }
  VCVideoReceiverSampleBuffer_Destroy(&element);
  pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40600));
  if (*(unsigned char *)(a2 + 1180))
  {
    if (*(unsigned char *)(a2 + 1181) && (*(unsigned char *)(a2 + 1252) || !*(unsigned char *)(v6 + 876)))
    {
      *(_OWORD *)CMTime buf = xmmword_1E259EB20;
      *(_OWORD *)&buf[16] = unk_1E259EB30;
      VCVideoJitterBuffer_GetReferenceFrame(*(void *)(v6 + 864), buf);
      if (buf[24])
      {
        if (*(_DWORD *)&buf[8] != *(_DWORD *)(v6 + 872))
        {
          VCVideoPlayer_SetReferenceRTPTimestamp(*(double *)buf, *(double *)&buf[16], *(void *)(v148 + 79), *(int *)&buf[8]);
          *(_DWORD *)(v6 + 872) = *(_DWORD *)&buf[8];
          *(unsigned char *)(v6 + 876) = 1;
        }
      }
    }
    double v141 = micro();
    *(void *)(v6 + 96) = *(void *)(v6 + 88);
    double TargetJitterQueueSize = VCVideoJitterBuffer_GetTargetJitterQueueSize(*(void *)(v6 + 864));
    double DoubleValueForKey = VCDefaults_GetDoubleValueForKey(@"videoPlayerJitterQueueSize", TargetJitterQueueSize);
    *(double *)(v6 + 88) = DoubleValueForKey;
    double v144 = *(double *)(v6 + 96);
    if (v144 != DoubleValueForKey)
    {
      double v145 = v141 - *(double *)(v6 + 112);
      ++*(_WORD *)(v6 + 104);
      *(double *)(v6 + 128) = *(double *)(v6 + 128) + v145 * v144;
      if (DoubleValueForKey == 0.0 || v144 != 0.0) {
        *(double *)(v6 + 120) = v145 + *(double *)(v6 + 120);
      }
      *(double *)(v6 + 112) = v141;
    }
    VCVideoPlayer_SetTargetQueueSizeInSeconds(DoubleValueForKey);
  }
  VideoUtil_ConstructSubFrameIdentifer((unsigned __int16)v151, *((unsigned __int8 *)a3 + 68));
  kdebug_trace();
  return VCVideoPlayer_QueueAlarmForDecode(*(void *)(v148 + 79), (uint64_t)VideoReceiver_VideoAlarmForDecode, a1, a4, WORD4(v152), v156 != 0, VideoFrameTimeInSeconds);
}

void VideoReceiver_VideoAlarmForDecode(uint64_t a1, long long *a2, int a3, int a4)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  _VideoReceiver_VideoAlarmCommon(a1, (uint64_t)&v4, a3, a4, 0, 1, 0);
}

void _VideoReceiver_ProcessVideoRTCPInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)((char *)&v106[21] + 4) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 40400;
  v102[0] = 0;
  v102[1] = 0;
  int v103 = 0;
  double v7 = micro();
  *(double *)(v6 + 1088) = v7;
  if (!*(unsigned char *)(a3 + 8)) {
    return;
  }
  double v8 = v7;
  uint64_t v9 = 0;
  int v91 = 0;
  int v92 = 0;
  int v96 = -1431655766;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v93 = a2;
  while (2)
  {
    uint64_t v10 = *(void *)(a3 + 8 * v9 + 16);
    switch(*(unsigned char *)(v10 + 1))
    {
      case 0xC0:
        uint64_t v11 = RTCPPacketFIREntryCount(*(void *)(a3 + 8 * v9 + 16));
        uint64_t v12 = v11;
        if (!v11) {
          goto LABEL_13;
        }
        uint64_t v13 = (unsigned __int16 *)(v10 + 8);
        uint64_t v14 = v11;
        char v15 = v102;
        do
        {
          int v17 = *v13++;
          __int16 v16 = v17;
          if (v17 == 0xFFFF) {
            break;
          }
          *v15++ = v16;
          --v14;
        }
        while (v14);
        if (*(unsigned char *)(a1 + 1183)) {
          goto LABEL_13;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_12;
        }
        uint64_t v18 = VRTraceErrorLogLevelToCSTR();
        int v19 = *MEMORY[0x1E4F47A50];
        uint64_t v12 = 0;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTCPInternal";
          *(_WORD *)&unsigned char buf[22] = 1024;
          int v105 = 4071;
          LOWORD(v106[0]) = 2048;
          *(void *)((char *)v106 + 2) = a1;
          _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] LTRP is disabled. Converting refresh request to key frame request", buf, 0x26u);
LABEL_12:
          uint64_t v12 = 0;
        }
LABEL_13:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v20 = VRTraceErrorLogLevelToCSTR();
          BOOL v21 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316674;
            *(void *)&uint8_t buf[4] = v20;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTCPInternal";
            *(_WORD *)&unsigned char buf[22] = 1024;
            int v105 = 4075;
            LOWORD(v106[0]) = 2048;
            *(void *)((char *)v106 + 2) = a1;
            WORD1(v106[1]) = 1024;
            HIDWORD(v106[1]) = v12;
            LOWORD(v106[2]) = 1024;
            *(_DWORD *)((char *)&v106[2] + 2) = LOWORD(v102[0]);
            HIWORD(v106[2]) = 1024;
            LODWORD(v106[3]) = WORD1(v102[0]);
            _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received FIR(%d) %dx%d", buf, 0x38u);
          }
        }
        int v91 = 1;
        VideoTransmitter_GenerateKeyFrameNow(*(void *)v6, (unsigned __int16 *)v102, v12, 0, 1, 2 * (v12 != 0));
LABEL_66:
        if (++v9 < (unint64_t)*(unsigned __int8 *)(a3 + 8)) {
          continue;
        }
        if (v92)
        {
          VideoTransmitter_SetVideoLossFraction(*(void *)v6, *((unsigned __int8 *)v92 + 4));
          if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
          {
            uint64_t v83 = VRTraceErrorLogLevelToCSTR();
            unsigned int v84 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v85 = v92[1];
              int v86 = v92[1] >> 8;
              uint64_t v87 = v92[3];
              uint64_t v88 = *(void *)(v6 + 1208);
              *(_DWORD *)CMTime buf = 136317186;
              *(void *)&uint8_t buf[4] = v83;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTCPInternal";
              *(_WORD *)&unsigned char buf[22] = 1024;
              int v105 = 4112;
              LOWORD(v106[0]) = 2048;
              *(void *)((char *)v106 + 2) = a1;
              WORD1(v106[1]) = 1024;
              HIDWORD(v106[1]) = v85;
              LOWORD(v106[2]) = 1024;
              *(_DWORD *)((char *)&v106[2] + 2) = v86;
              HIWORD(v106[2]) = 2048;
              v106[3] = v87;
              LOWORD(v106[4]) = 2048;
              *(void *)((char *)&v106[4] + 2) = v88;
              WORD1(v106[5]) = 1024;
              HIDWORD(v106[5]) = v91;
              _os_log_impl(&dword_1E1EA4000, v84, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VRTCP: Fraction=%03d, Lost=%d, Jitter=%lu, RTT=%.3f, FIR=%d", buf, 0x4Cu);
            }
          }
        }
        return;
      case 0xC1:
        if (!*(unsigned char *)(a1 + 1260)
          && *(double *)(v6 + 1208) < 0.2
          && (RTPRexmitRTP(*(void *)(a2 + 48), *(unsigned __int16 *)(v10 + 8), *(unsigned __int16 *)(v10 + 10), &v96) & 0x80000000) == 0)
        {
          VideoTransmitter_AddRexmitBytes(*(void *)v6, v96);
        }
        goto LABEL_66;
      case 0xC8:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v34 = VRTraceErrorLogLevelToCSTR();
          int v35 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            *(void *)&uint8_t buf[4] = v34;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_ProcessRTCPSRPacket";
            *(_WORD *)&unsigned char buf[22] = 1024;
            int v105 = 3897;
            _os_log_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Received RTCP SR", buf, 0x1Cu);
          }
        }
        if (_VideoReceiver_ShouldProcessPacket(a1, a2, *(unsigned __int8 *)(a3 + 1621), *(void *)(a3 + 1624), (unsigned __int16 *)(a3 + 1596), *(unsigned __int8 *)(a3 + 1620)))
        {
          *(unsigned char *)(v6 + 1248) = _VideoReceiver_HandleStreamSwitch(a1, (unsigned __int16 *)a2, v36, v37, v38, v39, v40, v41);
          uint64_t v42 = a2;
          uint64_t v43 = *(unsigned int *)(v10 + 8);
          uint64_t v44 = *(unsigned int *)(v10 + 12);
          int v92 = (_DWORD *)(v10 + 28);
          _VideoReceiver_ProcessReceptionReportBlock(*(void *)(v42 + 48), *(_WORD *)v10 & 0x1F, (_DWORD *)(v10 + 28), *(void *)a3);
          uint64_t v45 = *(void *)(v6 + 1192);
          if (v45)
          {
            double v46 = NTPToMicro(v44 | (v43 << 32));
            VCMediaStreamSynchronizer_updateDestinationNTPTime(v45, *(_DWORD *)(v10 + 16), v46);
          }
          goto LABEL_65;
        }
        goto LABEL_66;
      case 0xC9:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v47 = VRTraceErrorLogLevelToCSTR();
          int v48 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            *(void *)&uint8_t buf[4] = v47;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTCPInternal";
            *(_WORD *)&unsigned char buf[22] = 1024;
            int v105 = 4023;
            _os_log_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d Received RTCP RR", buf, 0x1Cu);
          }
        }
        __int16 v50 = *(_WORD *)v10;
        uint64_t v49 = (_DWORD *)(v10 + 8);
        _VideoReceiver_ProcessReceptionReportBlock(*(void *)(a2 + 48), v50 & 0x1F, v49, *(void *)a3);
        int v92 = v49;
        goto LABEL_66;
      case 0xCC:
        int v51 = *(_DWORD *)(v10 + 8);
        if (v51 == 1380144204)
        {
          int v101 = -1431655766;
          *(void *)&long long v100 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v100 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v56 = *(_OWORD *)(v10 + 12);
          int v101 = *(_DWORD *)(v10 + 28);
          long long v100 = v56;
          uint64_t v99 = 0;
          long long v97 = 0u;
          long long v98 = 0u;
          __int16 v95 = 0;
          int v94 = 16843010;
          VCMediaControlInfoUnserializeWithData((uint64_t)&v97, (unsigned __int16 *)&v100, 0x14uLL, (unsigned __int8 *)&v94);
          double v57 = micro();
          int v58 = WORD4(v98);
          double v59 = RTPUnpackDouble(HIDWORD(v98));
          uint64_t v60 = *(void *)(v6 + 1016);
          *(void *)CMTime buf = 2;
          *(double *)&buf[8] = v57;
          *(_WORD *)&buf[16] = 0;
          buf[18] = 1;
          *(_DWORD *)&buf[19] = 0;
          buf[23] = 0;
          int v105 = v58;
          a2 = v93;
          LODWORD(v106[0]) = DWORD1(v98);
          HIDWORD(v106[0]) = WORD1(v97);
          LODWORD(v106[1]) = 0;
          HIDWORD(v106[2]) = 0;
          LODWORD(v106[3]) = 0;
          *(void *)((char *)&v106[1] + 4) = WORD2(v97);
          HIDWORD(v106[3]) = WORD3(v97);
          v106[4] = 0;
          LODWORD(v106[5]) = (unsigned __int16)v97;
          *(void *)((char *)&v106[5] + 4) = 0;
          *(double *)((char *)&v106[6] + 4) = v59;
          memset((char *)&v106[7] + 4, 0, 112);
          VCRateControlSetStatistics(v60, buf);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v61 = VRTraceErrorLogLevelToCSTR();
            uint64_t v62 = *MEMORY[0x1E4F47A50];
            uint64_t v63 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136316930;
                *(void *)&uint8_t buf[4] = v61;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTCPInternal";
                *(_WORD *)&unsigned char buf[22] = 1024;
                int v105 = 4053;
                LOWORD(v106[0]) = 2048;
                *(void *)((char *)v106 + 2) = a1;
                WORD1(v106[1]) = 1024;
                HIDWORD(v106[1]) = HIDWORD(v98);
                LOWORD(v106[2]) = 1024;
                *(_DWORD *)((char *)&v106[2] + 2) = WORD1(v97);
                HIWORD(v106[2]) = 1024;
                LODWORD(v106[3]) = WORD2(v97);
                WORD2(v106[3]) = 1024;
                *(_DWORD *)((char *)&v106[3] + 6) = v98;
                _os_log_impl(&dword_1E1EA4000, v62, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received APP_RTCL with owrd:%u, BWE:%u, burstyLoss:%u, JQSize:%u", buf, 0x3Eu);
              }
            }
            else if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)CMTime buf = 136316930;
              *(void *)&uint8_t buf[4] = v61;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTCPInternal";
              *(_WORD *)&unsigned char buf[22] = 1024;
              int v105 = 4053;
              LOWORD(v106[0]) = 2048;
              *(void *)((char *)v106 + 2) = a1;
              WORD1(v106[1]) = 1024;
              HIDWORD(v106[1]) = HIDWORD(v98);
              LOWORD(v106[2]) = 1024;
              *(_DWORD *)((char *)&v106[2] + 2) = WORD1(v97);
              HIWORD(v106[2]) = 1024;
              LODWORD(v106[3]) = WORD2(v97);
              WORD2(v106[3]) = 1024;
              *(_DWORD *)((char *)&v106[3] + 6) = v98;
              _os_log_debug_impl(&dword_1E1EA4000, v62, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received APP_RTCL with owrd:%u, BWE:%u, burstyLoss:%u, JQSize:%u", buf, 0x3Eu);
            }
          }
          VideoTransmitter_SetPacketExpirationTime(*(void *)v6, v98);
        }
        else if (v51 == 5)
        {
          uint64_t v52 = a1;
          uint64_t v53 = *(void *)(a3 + 8 * v9 + 16);
          int v54 = 204;
          goto LABEL_51;
        }
        goto LABEL_66;
      case 0xCD:
        if (*(double *)(v6 + 1208) < 0.2
          && (RTPRexmitRTP(*(void *)(a2 + 48), *(unsigned __int16 *)(v10 + 12), *(unsigned __int16 *)(v10 + 14), &v96) & 0x80000000) == 0)
        {
          VideoTransmitter_AddRexmitBytes(*(void *)v6, v96);
        }
        unint64_t v22 = *(unsigned __int16 *)(v10 + 2);
        if (v22 >= 3)
        {
          uint64_t v23 = (v22 - 2);
          __int16 v24 = (__int16 *)(v10 + 14);
          do
          {
            if ((VideoTransmitter_RetransmitPackets(v8, *(void *)v6, *(_DWORD *)(v10 + 8), *(v24 - 1), *v24) & 0x80000000) != 0
              && (int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v25 = VRTraceErrorLogLevelToCSTR();
              uint64_t v26 = *MEMORY[0x1E4F47A50];
              int v27 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  int v28 = *(_DWORD *)(v10 + 8);
                  int v29 = (unsigned __int16)*(v24 - 1);
                  int v30 = (unsigned __int16)*v24;
                  *(_DWORD *)CMTime buf = 136316930;
                  *(void *)&uint8_t buf[4] = v25;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTCPNACKPacket";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  int v105 = 4000;
                  LOWORD(v106[0]) = 2048;
                  *(void *)((char *)v106 + 2) = a1;
                  WORD1(v106[1]) = 1024;
                  HIDWORD(v106[1]) = v28;
                  LOWORD(v106[2]) = 1024;
                  *(_DWORD *)((char *)&v106[2] + 2) = v29;
                  HIWORD(v106[2]) = 1024;
                  LODWORD(v106[3]) = v30;
                  WORD2(v106[3]) = 2048;
                  *(double *)((char *)&v106[3] + 6) = v8;
                  _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VRTCP: Failed to retransmit packets ssrc=%u, firstSequenceNumber=%u, bitmask=%u, currentTime=%f", buf, 0x42u);
                }
              }
              else if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
              {
                int v31 = *(_DWORD *)(v10 + 8);
                int v32 = (unsigned __int16)*(v24 - 1);
                int v33 = (unsigned __int16)*v24;
                *(_DWORD *)CMTime buf = 136316930;
                *(void *)&uint8_t buf[4] = v25;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoReceiver_ProcessVideoRTCPNACKPacket";
                *(_WORD *)&unsigned char buf[22] = 1024;
                int v105 = 4000;
                LOWORD(v106[0]) = 2048;
                *(void *)((char *)v106 + 2) = a1;
                WORD1(v106[1]) = 1024;
                HIDWORD(v106[1]) = v31;
                LOWORD(v106[2]) = 1024;
                *(_DWORD *)((char *)&v106[2] + 2) = v32;
                HIWORD(v106[2]) = 1024;
                LODWORD(v106[3]) = v33;
                WORD2(v106[3]) = 2048;
                *(double *)((char *)&v106[3] + 6) = v8;
                _os_log_debug_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] VRTCP: Failed to retransmit packets ssrc=%u, firstSequenceNumber=%u, bitmask=%u, currentTime=%f", buf, 0x42u);
              }
            }
            v24 += 2;
            --v23;
          }
          while (v23);
          goto LABEL_65;
        }
        goto LABEL_66;
      case 0xCE:
        LODWORD(v98) = 0;
        long long v97 = 0uLL;
        int v55 = *(_DWORD *)(v10 + 12);
        if (v55 == 6)
        {
          int v64 = *(_DWORD *)(v10 + 16);
          int v65 = *(unsigned __int16 *)(v10 + 20);
          int v66 = *(unsigned __int8 *)(v10 + 22);
          int v67 = *(unsigned __int8 *)(v10 + 23);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v89 = VRTraceErrorLogLevelToCSTR();
            int v68 = *MEMORY[0x1E4F47A50];
            uint64_t v69 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136316674;
                *(void *)&uint8_t buf[4] = v89;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoReceiver_ProcessRtcpLossFeedback";
                *(_WORD *)&unsigned char buf[22] = 1024;
                int v105 = 3936;
                LOWORD(v106[0]) = 1024;
                *(_DWORD *)((char *)v106 + 2) = v64;
                HIWORD(v106[0]) = 1024;
                LODWORD(v106[1]) = v65;
                WORD2(v106[1]) = 1024;
                *(_DWORD *)((char *)&v106[1] + 6) = v66;
                WORD1(v106[2]) = 1024;
                HIDWORD(v106[2]) = v67;
                _os_log_impl(&dword_1E1EA4000, v68, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d RTCP received loss feedback: frameRTPTimestamp=%u, numReceivedPackets=%u, frameSize=%u, numLostPackets=%u", buf, 0x34u);
              }
            }
            else if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)CMTime buf = 136316674;
              *(void *)&uint8_t buf[4] = v89;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_ProcessRtcpLossFeedback";
              *(_WORD *)&unsigned char buf[22] = 1024;
              int v105 = 3936;
              LOWORD(v106[0]) = 1024;
              *(_DWORD *)((char *)v106 + 2) = v64;
              HIWORD(v106[0]) = 1024;
              LODWORD(v106[1]) = v65;
              WORD2(v106[1]) = 1024;
              *(_DWORD *)((char *)&v106[1] + 6) = v66;
              WORD1(v106[2]) = 1024;
              HIDWORD(v106[2]) = v67;
              _os_log_debug_impl(&dword_1E1EA4000, v68, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d RTCP received loss feedback: frameRTPTimestamp=%u, numReceivedPackets=%u, frameSize=%u, numLostPackets=%u", buf, 0x34u);
            }
          }
          double v76 = micro();
          uint64_t v77 = *(void *)(v6 + 1016);
          *(void *)CMTime buf = 13;
          *(double *)&buf[8] = v76;
          *(_WORD *)&buf[16] = 0;
          buf[18] = 1;
          *(_DWORD *)&buf[19] = 0;
          buf[23] = 0;
          int v105 = v64;
          LOWORD(v106[0]) = v65;
          BYTE2(v106[0]) = v66;
          BYTE3(v106[0]) = v67;
          memset((char *)v106 + 4, 0, 48);
          memset((char *)&v106[6] + 4, 0, 120);
          VCRateControlSetStatistics(v77, buf);
          a2 = v93;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v78 = VRTraceErrorLogLevelToCSTR();
            uint64_t v79 = *MEMORY[0x1E4F47A50];
            __int16 v80 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315906;
                *(void *)&uint8_t buf[4] = v78;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoReceiver_ProcessRtcpPSFBPacket";
                *(_WORD *)&unsigned char buf[22] = 1024;
                int v105 = 3981;
                LOWORD(v106[0]) = 2048;
                *(void *)((char *)v106 + 2) = a1;
                _os_log_impl(&dword_1E1EA4000, v79, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received PSFB LOSS FB", buf, 0x26u);
              }
            }
            else if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)CMTime buf = 136315906;
              *(void *)&uint8_t buf[4] = v78;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_ProcessRtcpPSFBPacket";
              *(_WORD *)&unsigned char buf[22] = 1024;
              int v105 = 3981;
              LOWORD(v106[0]) = 2048;
              *(void *)((char *)v106 + 2) = a1;
              _os_log_debug_impl(&dword_1E1EA4000, v79, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received PSFB LOSS FB", buf, 0x26u);
            }
          }
        }
        else if (v55 == 5)
        {
          uint64_t v52 = a1;
          uint64_t v53 = v10;
          int v54 = 206;
LABEL_51:
          _VideoReceiver_ProcessRtcpLTRAck(v52, v53, v54);
        }
        else
        {
          BOOL v70 = (*(_WORD *)v10 & 0x1F) == 2;
          int v71 = *(_DWORD *)(a1 + 1248);
          Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (Mutable)
          {
            BOOL v73 = Mutable;
            char v74 = *(const void **)(a1 + 1232);
            if (v74) {
              CFDictionaryAddValue(Mutable, @"VCSPUUID", v74);
            }
            *(_DWORD *)CMTime buf = v71;
            CFNumberRef v75 = CFNumberCreate(allocator, kCFNumberIntType, buf);
            CFDictionaryAddValue(v73, @"VCASStreamIDs", v75);
            CFRelease(v75);
            reportingVideoStreamEvent();
            CFRelease(v73);
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v81 = VRTraceErrorLogLevelToCSTR();
            int v82 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136315650;
              *(void *)&uint8_t buf[4] = v81;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoReceiver_ReportFIRFBReceived";
              *(_WORD *)&unsigned char buf[22] = 1024;
              int v105 = 3949;
              _os_log_error_impl(&dword_1E1EA4000, v82, OS_LOG_TYPE_ERROR, "VideoReceiver [%s] %s:%d Failed to create reporting dictionary", buf, 0x1Cu);
            }
          }
          VideoTransmitter_GenerateKeyFrameNow(*(void *)v6, (unsigned __int16 *)&v97, (2 * v70), 1, 1, 2 * v70);
LABEL_65:
          a2 = v93;
        }
        goto LABEL_66;
      default:
        goto LABEL_66;
    }
  }
}

void _VideoReceiver_ProcessReceptionReportBlock(uint64_t a1, int a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v15 = 0;
  if ((RTPGetLocalSSRC(a1, &v15) & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      double v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v17 = v7;
        __int16 v18 = 2080;
        int v19 = "_VideoReceiver_ProcessReceptionReportBlock";
        __int16 v20 = 1024;
        int v21 = 3882;
        uint64_t v9 = "VideoReceiver [%s] %s:%d Could not get the local SSRC";
        uint64_t v10 = v8;
        uint32_t v11 = 28;
LABEL_12:
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
      }
    }
  }
  else if (a2)
  {
    while (*a3 != v15)
    {
      a3 += 6;
      if (!--a2) {
        return;
      }
    }
    int v12 = RTCPComputeRoundTripTimeMiddle32((uint64_t)a3, a4);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      uint64_t v14 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v17 = v13;
        __int16 v18 = 2080;
        int v19 = "_VideoReceiver_ProcessReceptionReportBlock";
        __int16 v20 = 1024;
        int v21 = 3889;
        __int16 v22 = 1024;
        int v23 = v12;
        uint64_t v9 = "VideoReceiver [%s] %s:%d RTCP ReceptionReport RTT=%u";
        uint64_t v10 = v14;
        uint32_t v11 = 34;
        goto LABEL_12;
      }
    }
  }
}

void _VideoReceiver_ProcessRtcpLTRAck(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)(a1 + 40400);
  if (a3 == 204) {
    uint64_t v6 = bswap32(*(_DWORD *)(a2 + 12));
  }
  else {
    uint64_t v6 = *(unsigned int *)(a2 + 16);
  }
  int v7 = *(unsigned __int8 *)(a1 + 41208);
  if (*(unsigned char *)(a1 + 41208)) {
    int v8 = 7;
  }
  else {
    int v8 = 8;
  }
  if (v8 <= (int)VRTraceGetErrorLogLevelForModule())
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    if (v7)
    {
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      uint32_t v11 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
LABEL_13:
          int v13 = 136316418;
          uint64_t v14 = v9;
          __int16 v15 = 2080;
          __int16 v16 = "_VideoReceiver_ProcessRtcpLTRAck";
          __int16 v17 = 1024;
          int v18 = 3920;
          __int16 v19 = 2048;
          uint64_t v20 = a1;
          __int16 v21 = 1024;
          int v22 = v6;
          __int16 v23 = 1024;
          int v24 = a3;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received APP_LTRP_ACK timestamp=%u, RTCP packet type=%u", (uint8_t *)&v13, 0x32u);
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v13 = 136316418;
        uint64_t v14 = v9;
        __int16 v15 = 2080;
        __int16 v16 = "_VideoReceiver_ProcessRtcpLTRAck";
        __int16 v17 = 1024;
        int v18 = 3920;
        __int16 v19 = 2048;
        uint64_t v20 = a1;
        __int16 v21 = 1024;
        int v22 = v6;
        __int16 v23 = 1024;
        int v24 = a3;
        _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Received APP_LTRP_ACK timestamp=%u, RTCP packet type=%u", (uint8_t *)&v13, 0x32u);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1183) && v6)
  {
    int v12 = *(void (**)(void, uint64_t))(a1 + 1448);
    if (v12) {
      v12(*(void *)(a1 + 1432), v6);
    }
    VideoTransmitter_ACKLTRFrame(*v5, v6);
  }
}

void _VideoReceiver_CompleteStreamSwitch(unsigned int *a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  long long v4 = (unsigned __int16 *)(a1 + 10088);
  uint64_t v5 = (void (*)(void, void, void))*((void *)a1 + 139);
  if (v5) {
    v5(*((void *)a1 + 136), *((unsigned __int16 *)a1 + 20176), *((unsigned __int16 *)a1 + 20180));
  }
  if (*((unsigned char *)v4 + 6))
  {
    uint64_t v6 = v4 + 2;
    uint64_t v7 = 6;
    if (!*(unsigned char *)(a2 + 70))
    {
      uint64_t v7 = 4;
      uint64_t v6 = v4;
    }
    if (*v6 != v4[v7])
    {
      unint64_t v8 = *a1;
      if (v8)
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint32_t v11 = (unsigned __int16 *)&a1[v9 + 368];
          if (v11 != (unsigned __int16 *)a2) {
            break;
          }
LABEL_21:
          ++v10;
          v9 += 1080;
          if (v10 >= v8) {
            goto LABEL_22;
          }
        }
        _X23 = (char *)&a1[v9 + 3625] + 1;
        __asm { PRFM            #0, [X23] }
        int v17 = BYTE1(a1[v9 + 385]);
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v17)
        {
          if (ErrorLogLevelForModule < 7) {
            goto LABEL_18;
          }
          uint64_t v19 = VRTraceErrorLogLevelToCSTR();
          uint64_t v20 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v46 = v19;
          __int16 v47 = 2080;
          int v48 = "_VideoReceiver_ResetNonTargetStreams";
          __int16 v49 = 1024;
          int v50 = 3668;
          __int16 v51 = 2048;
          uint64_t v52 = a1;
          __int16 v21 = v20;
          int v22 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] resetting 1:1 stream";
          uint32_t v23 = 38;
        }
        else
        {
          if (ErrorLogLevelForModule < 7) {
            goto LABEL_18;
          }
          uint64_t v24 = VRTraceErrorLogLevelToCSTR();
          uint64_t v25 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
          _X8 = _X23 - 69;
          __asm { PRFM            #0, [X8] }
          LODWORD(_X8) = *v11;
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v46 = v24;
          __int16 v47 = 2080;
          int v48 = "_VideoReceiver_ResetNonTargetStreams";
          __int16 v49 = 1024;
          int v50 = 3670;
          __int16 v51 = 2048;
          uint64_t v52 = a1;
          __int16 v53 = 1024;
          LODWORD(v54) = _X8;
          __int16 v21 = v25;
          int v22 = "VideoReceiver [%s] %s:%d VideoReceiver[%p] resetting non target stream %d";
          uint32_t v23 = 44;
        }
        _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, v22, buf, v23);
LABEL_18:
        if (*(void *)&a1[v9 + 396])
        {
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 10150));
          VideoPacketBuffer_NeedRefreshFrame(*(void *)&a1[v9 + 396], 1, 1, 0x18u);
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 10150));
        }
        *((unsigned char *)v4 + 1296) = 1;
        RTPResetHandle();
        unint64_t v8 = *a1;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v28 = VRTraceErrorLogLevelToCSTR();
    int v29 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *((void *)a1 + 144);
      int v31 = *v4;
      int v32 = v4[4];
      int v33 = v4[6];
      *(_DWORD *)CMTime buf = 136316930;
      uint64_t v46 = v28;
      __int16 v47 = 2080;
      int v48 = "_VideoReceiver_UpdateStreamSwitchContextForCurrentStream";
      __int16 v49 = 1024;
      int v50 = 3691;
      __int16 v51 = 2048;
      uint64_t v52 = a1;
      __int16 v53 = 2048;
      uint64_t v54 = v30;
      __int16 v55 = 1024;
      int v56 = v31;
      __int16 v57 = 1024;
      int v58 = v32;
      __int16 v59 = 1024;
      int v60 = v33;
      _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, "VideoReceiver [%s] %s:%d VideoReceiver[%p] participantId[%llu]: Stream switch completed from (%d), to (%d). New baseStreamID is (%d)", buf, 0x42u);
    }
  }
  *long long v4 = v4[4];
  *(_DWORD *)(v4 + 1) = *(_DWORD *)(v4 + 5);
  *((unsigned char *)v4 + 6) = 1;
  if (a2)
  {
    unint64_t v34 = *(unsigned int *)(a2 + 8);
    if (!v34) {
      goto LABEL_40;
    }
    uint64_t v35 = 0;
    unsigned int v36 = WORD1(*(void *)v4);
    int v37 = (unsigned __int16)*(void *)v4;
    BOOL v38 = 1;
    do
    {
      if ((*(void *)v4 & 0x1000000000000) != 0)
      {
        uint64_t v39 = a2 + 2 * v35;
        int v40 = *(unsigned __int16 *)(v39 + 12);
        if (v40 == v37 || v36 == v40) {
          break;
        }
        int v42 = *(unsigned __int16 *)(v39 + 30);
        if (v42 == v37 || v36 == v42) {
          break;
        }
      }
      BOOL v38 = ++v35 < v34;
    }
    while (v34 != v35);
    if (v38) {
      int v44 = 1;
    }
    else {
LABEL_40:
    }
      int v44 = 0;
    RTPIgnorePacketLossAccounting(*(void *)(a2 + 48), v44);
  }
}

void OUTLINED_FUNCTION_8_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

CMSimpleQueueRef *VCAudioIssueDetectorUtil_Create(int a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (CMSimpleQueueRef *)malloc_type_calloc(1uLL, 0x4650uLL, 0x1020040E3657F74uLL);
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioIssueDetectorUtil_Create_cold_1();
      }
    }
    return 0;
  }
  uint64_t v3 = v2;
  *((_DWORD *)v2 + 4494) = a1;
  OSStatus v4 = CMSimpleQueueCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 25, v2 + 2246);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v4)
  {
    if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioIssueDetectorUtil_Create_cold_3();
      }
    }
    free(v3);
    return 0;
  }
  if (ErrorLogLevelForModule >= 8)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    unint64_t v8 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136315906;
        uint64_t v11 = v6;
        __int16 v12 = 2080;
        int v13 = "VCAudioIssueDetectorUtil_Create";
        __int16 v14 = 1024;
        int v15 = 1516;
        __int16 v16 = 1024;
        int v17 = a1;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio issue detector created for direction=%d", (uint8_t *)&v10, 0x22u);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      VCAudioIssueDetectorUtil_Create_cold_2();
    }
  }
  return v3;
}

void VCAudioIssueDetectorUtil_Configure(uint64_t a1, unsigned __int16 *a2)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return;
    }
    uint64_t v24 = VRTraceErrorLogLevelToCSTR();
    uint64_t v25 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v26 = 136316162;
    uint64_t v27 = v24;
    __int16 v28 = 2080;
    int v29 = "VCAudioIssueDetectorUtil_Configure";
    __int16 v30 = 1024;
    int v31 = 1529;
    __int16 v32 = 2048;
    *(void *)int v33 = a1;
    *(_WORD *)&v33[8] = 2048;
    v34[0] = a2;
    __int16 v21 = " [%s] %s:%d Invalid parameter issueDetectorUtil=%p config=%p";
    int v22 = v25;
    uint32_t v23 = 48;
LABEL_22:
    _os_log_error_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v26, v23);
    return;
  }
  if (!a2[1] || (__int16 v4 = *a2) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return;
    }
    uint64_t v17 = VRTraceErrorLogLevelToCSTR();
    uint64_t v18 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v19 = a2[1];
    int v20 = *a2;
    int v26 = 136316418;
    uint64_t v27 = v17;
    __int16 v28 = 2080;
    int v29 = "VCAudioIssueDetectorUtil_Configure";
    __int16 v30 = 1024;
    int v31 = 1530;
    __int16 v32 = 2048;
    *(void *)int v33 = a1;
    *(_WORD *)&v33[8] = 1024;
    LODWORD(v34[0]) = v19;
    WORD2(v34[0]) = 1024;
    *(_DWORD *)((char *)v34 + 6) = v20;
    __int16 v21 = " [%s] %s:%d Invalid parameter issueDetectorUtil=%p audioIOSampleRate=%d audioIOSampleCount=%d";
    int v22 = v18;
    uint32_t v23 = 50;
    goto LABEL_22;
  }
  uint64_t v5 = (int *)(a1 + 17976);
  *(_WORD *)(a1 + 17982) = a2[1];
  *(_WORD *)(a1 + 17980) = v4;
  uint64_t v6 = *(const void **)(a1 + 17984);
  uint64_t v7 = (const void *)*((void *)a2 + 1);
  *(void *)(a1 + 17984) = v7;
  if (v7) {
    CFRetain(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  *(void *)(a1 + 17992) = *((void *)a2 + 2);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    uint64_t v9 = *MEMORY[0x1E4F47A50];
    int v10 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *v5;
        int v12 = *a2;
        int v13 = a2[1];
        int v26 = 136316418;
        uint64_t v27 = v8;
        __int16 v28 = 2080;
        int v29 = "VCAudioIssueDetectorUtil_Configure";
        __int16 v30 = 1024;
        int v31 = 1536;
        __int16 v32 = 1024;
        *(_DWORD *)int v33 = v11;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = v12;
        LOWORD(v34[0]) = 1024;
        *(_DWORD *)((char *)v34 + 2) = v13;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio issue detector configured for direction=%d with audioIOSampleCount=%d, audioIOSampleRate=%d", (uint8_t *)&v26, 0x2Eu);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *v5;
      int v15 = *a2;
      int v16 = a2[1];
      int v26 = 136316418;
      uint64_t v27 = v8;
      __int16 v28 = 2080;
      int v29 = "VCAudioIssueDetectorUtil_Configure";
      __int16 v30 = 1024;
      int v31 = 1536;
      __int16 v32 = 1024;
      *(_DWORD *)int v33 = v14;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v15;
      LOWORD(v34[0]) = 1024;
      *(_DWORD *)((char *)v34 + 2) = v16;
      _os_log_debug_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Audio issue detector configured for direction=%d with audioIOSampleCount=%d, audioIOSampleRate=%d", (uint8_t *)&v26, 0x2Eu);
    }
  }
}

void VCAudioIssueDetectorUtil_UpdateRATType(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (int *)(a1 + 17976);
    if (*(_DWORD *)(a1 + 17996) != a2)
    {
      *(_DWORD *)(a1 + 17996) = a2;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v3 = VRTraceErrorLogLevelToCSTR();
        __int16 v4 = *MEMORY[0x1E4F47A50];
        uint64_t v5 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            int v6 = v2[5];
            int v7 = *v2;
            int v10 = 136316162;
            uint64_t v11 = v3;
            __int16 v12 = 2080;
            int v13 = "VCAudioIssueDetectorUtil_UpdateRATType";
            __int16 v14 = 1024;
            int v15 = 1545;
            __int16 v16 = 1024;
            int v17 = v6;
            __int16 v18 = 1024;
            int v19 = v7;
            _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio issue detector link type updated to %d for direction=%d", (uint8_t *)&v10, 0x28u);
          }
        }
        else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          int v8 = v2[5];
          int v9 = *v2;
          int v10 = 136316162;
          uint64_t v11 = v3;
          __int16 v12 = 2080;
          int v13 = "VCAudioIssueDetectorUtil_UpdateRATType";
          __int16 v14 = 1024;
          int v15 = 1545;
          __int16 v16 = 1024;
          int v17 = v8;
          __int16 v18 = 1024;
          int v19 = v9;
          _os_log_debug_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Audio issue detector link type updated to %d for direction=%d", (uint8_t *)&v10, 0x28u);
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioIssueDetectorUtil_UpdateRATType_cold_1();
    }
  }
}

void VCAudioIssueDetectorUtil_ProcessCellularNetworkNotification(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v2 = (void *)(a1 + 14736);
      int v3 = *(_DWORD *)(a2 + 4);
      if (!v3)
      {
        if (*(unsigned __int8 *)(a1 + 14737) != *(unsigned __int8 *)(a2 + 60))
        {
          *uint64_t v2 = 0;
          *(void *)(a1 + 14744) = 0;
          *(_WORD *)(a1 + 14752) = 0;
          *(unsigned char *)(a1 + 14737) = *(unsigned char *)(a2 + 60);
        }
        *(_WORD *)(a1 + 14738) = *(_WORD *)(a2 + 61);
        *(_WORD *)(a1 + 14740) = *(_WORD *)(a2 + 63);
        *(unsigned char *)(a1 + 14742) = *(unsigned char *)(a2 + 65);
        *(unsigned char *)(a1 + 14743) = *(unsigned char *)(a2 + 66);
        *(unsigned char *)(a1 + 14744) = *(unsigned char *)(a2 + 67);
        *(unsigned char *)(a1 + 14745) = *(unsigned char *)(a2 + 68) != 0;
        *(unsigned char *)(a1 + 14746) = *(unsigned char *)(a2 + 69) != 0;
        *(_WORD *)(a1 + 14748) = *(_WORD *)(a2 + 70);
        *(unsigned char *)(a1 + 14750) = *(unsigned char *)(a2 + 74) != 0;
        *(unsigned char *)uint64_t v2 = 1;
        int v3 = *(_DWORD *)(a2 + 4);
      }
      switch(v3)
      {
        case 2:
          *(unsigned char *)(a1 + 14737) = *(_DWORD *)(a2 + 8);
          *(unsigned char *)(a1 + 14742) = *(unsigned char *)(a2 + 16);
          *(unsigned char *)(a1 + 14744) = *(unsigned char *)(a2 + 18);
          break;
        case 5:
          *(unsigned char *)(a1 + 14737) = *(_DWORD *)(a2 + 8);
          *(_WORD *)(a1 + 14752) = *(_WORD *)(a2 + 12);
          *(unsigned char *)(a1 + 14750) = *(unsigned char *)(a2 + 74) != 0;
          break;
        case 4:
          *(_WORD *)(a1 + 14748) = *(_WORD *)(a2 + 10);
          *(unsigned char *)(a1 + 14746) = *(unsigned char *)(a2 + 8) != 0;
          break;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioIssueDetectorUtil_ProcessCellularNetworkNotification_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioIssueDetectorUtil_ProcessCellularNetworkNotification_cold_1();
    }
  }
}

void VCAudioIssueDetectorUtil_Finalize(int32x2_t **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      _VCAudioIssueDetectorUtil_StateMachine(v2, 5, 5, 0, 0.0);
    }
    *a1 = 0;
  }
}

void _VCAudioIssueDetectorUtil_StateMachine(int32x2_t *a1, int a2, int a3, unsigned int a4, float a5)
{
  int v8 = a1;
  v14[1] = *MEMORY[0x1E4F143B8];
  if (a3 != 5)
  {
    int v9 = a1->i32[1] + 1;
    a1->i32[1] = v9;
    a1[23].i32[1] = v9;
  }
  switch(a1->i32[0])
  {
    case 0:
      v14[0] = a1;
      if (a2 == 5)
      {
LABEL_51:
        _VCAudioIssueDetectorUtilDeInit(v14);
      }
      else if (a2)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioIssueDetectorUtil_StateMachine_cold_2();
          }
        }
      }
      else
      {
LABEL_24:
        _VCAudioIssueDetectorUtil_InitAndUseLatestConfig((uint64_t)a1);
LABEL_26:
        v8->i32[0] = 1;
      }
      break;
    case 1:
      v14[0] = a1;
      switch(a2)
      {
        case 0:
          goto LABEL_24;
        case 1:
        case 3:
          int v10 = 2;
          goto LABEL_28;
        case 2:
          int v10 = 3;
LABEL_28:
          a1->i32[0] = v10;
          _VCAudioIssueDetectorUtil_UpdateAggregatedStats(a1, a3);
          _VCAudioIssueDetectorUtil_UpdateRmsStats((uint64_t)v8, a5);
          break;
        case 5:
          _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded((uint64_t)a1);
          goto LABEL_51;
        default:
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCAudioIssueDetectorUtil_StateMachine_cold_3();
            }
          }
          break;
      }
      break;
    case 2:
      switch(a2)
      {
        case 0:
          goto LABEL_25;
        case 1:
        case 3:
          _VCAudioIssueDetectorUtil_UpdateAggregatedStats(a1, a3);
          if (v8[2247].i32[0])
          {
            ++v8[19].i32[0];
            if ((a3 & 0xFFFFFFFE) == 2) {
              ++v8[19].i32[1];
            }
          }
          else
          {
            ++v8[19].i16[0];
          }
          goto LABEL_54;
        case 2:
          a1->i32[0] = 3;
          _VCAudioIssueDetectorUtil_MonitorAndUpdateRmsSegmentStats((uint64_t)a1, 2, 2);
          _VCAudioIssueDetectorUtil_UpdateAggregatedStats(v8, a3);
          _VCAudioIssueDetectorUtil_UpdateRmsStats((uint64_t)v8, a5);
          _VCAudioIssueDetectorUtilFlushSilenceDistortionStats((uint64_t)v8);
          break;
        case 4:
          a1->i32[0] = 1;
          int v12 = 2;
          goto LABEL_46;
        case 5:
          v14[0] = a1;
          a1->i32[0] = 0;
          int v13 = 2;
          goto LABEL_50;
        default:
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCAudioIssueDetectorUtil_StateMachine_cold_4();
            }
          }
          break;
      }
      break;
    case 3:
      switch(a2)
      {
        case 0:
LABEL_25:
          bzero(a1, 0x4630uLL);
          v8[2].i32[1] = -956694528;
          v8[4].i32[0] = -956694528;
          v8[8].i32[1] = -956694528;
          v8[10].i32[0] = -956694528;
          goto LABEL_26;
        case 1:
          a1->i32[0] = 2;
          _VCAudioIssueDetectorUtil_MonitorAndUpdateRmsSegmentStats((uint64_t)a1, 1, 3);
          _VCAudioIssueDetectorUtil_UpdateAggregatedStats(v8, a3);
          _VCAudioIssueDetectorUtil_MonitorContinuousSpeechDistortion(v8, a3);
          _VCAudioIssueDetectorUtil_MonitorAverageSpeechDistortion(v8);
LABEL_54:
          _VCAudioIssueDetectorUtil_UpdateRmsStats((uint64_t)v8, a5);
          break;
        case 2:
        case 3:
          _VCAudioIssueDetectorUtil_UpdateAggregatedStats(a1, a3);
          _VCAudioIssueDetectorUtil_MonitorContinuousSpeechDistortion(v8, a3);
          _VCAudioIssueDetectorUtil_UpdateRmsStats((uint64_t)v8, a5);
          if (a4)
          {
            unsigned int v11 = v8[23].u16[1];
            if (v11 != a4 && (a4 > 0x960 || v11 <= 0x960)) {
              v8[23].i16[1] = a4;
            }
          }
          break;
        case 4:
          _VCAudioIssueDetectorUtil_MonitorContinuousSpeechDistortion(a1, a3);
          _VCAudioIssueDetectorUtil_MonitorAverageSpeechDistortion(v8);
          v8->i32[0] = 1;
          a1 = v8;
          int v12 = 3;
LABEL_46:
          _VCAudioIssueDetectorUtil_MonitorAndUpdateRmsSegmentStats((uint64_t)a1, 4, v12);
          _VCAudioIssueDetectorUtilFlushSilenceDistortionStats((uint64_t)v8);
          _VCAudioIssueDetectorUtil_StopZerosMonitoring((uint64_t)v8);
          _VCAudioIssueDetectorUtil_FlushRmsStats((uint64_t)v8);
          _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded((uint64_t)v8);
          VCAudioIssueDetectorUtil_FlushLogEvents((uint64_t)v8);
          break;
        case 5:
          v14[0] = a1;
          _VCAudioIssueDetectorUtil_MonitorContinuousSpeechDistortion(a1, a3);
          _VCAudioIssueDetectorUtil_MonitorAverageSpeechDistortion(v8);
          v8->i32[0] = 0;
          a1 = v8;
          int v13 = 3;
LABEL_50:
          _VCAudioIssueDetectorUtil_MonitorAndUpdateRmsSegmentStats((uint64_t)a1, 5, v13);
          _VCAudioIssueDetectorUtilFlushSilenceDistortionStats((uint64_t)v8);
          _VCAudioIssueDetectorUtil_StopZerosMonitoring((uint64_t)v8);
          _VCAudioIssueDetectorUtil_FlushRmsStats((uint64_t)v8);
          _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded((uint64_t)v8);
          VCAudioIssueDetectorUtil_FlushLogEvents((uint64_t)v8);
          goto LABEL_51;
        default:
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCAudioIssueDetectorUtil_StateMachine_cold_5();
            }
          }
          break;
      }
      break;
    default:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioIssueDetectorUtil_StateMachine_cold_1();
        }
      }
      break;
  }
}

void VCAudioIssueDetectorUtil_Start(int32x2_t *a1)
{
  if (a1)
  {
    _VCAudioIssueDetectorUtil_StateMachine(a1, 0, 5, 0, 0.0);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioIssueDetectorUtil_Start_cold_1();
    }
  }
}

void VCAudioIssueDetectorUtil_Stop(int32x2_t *a1)
{
  if (a1)
  {
    _VCAudioIssueDetectorUtil_StateMachine(a1, 4, 5, 0, 0.0);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioIssueDetectorUtil_Stop_cold_1();
    }
  }
}

void VCAudioIssueDetectorUtil_ProcessFrame(int32x2_t *a1, unsigned __int16 *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioIssueDetectorUtil_ProcessFrame_cold_1();
      }
    }
    return;
  }
  if (!a1->i32[0]) {
    _VCAudioIssueDetectorUtil_StateMachine(a1, 0, 5, 0, 0.0);
  }
  if (!a2[4])
  {
    int v6 = 3;
    char v5 = 1;
    int v4 = 4;
    goto LABEL_20;
  }
  if (a1[2247].i32[0] == 1)
  {
    int v4 = *((unsigned __int8 *)a2 + 20);
    if (*((unsigned char *)a2 + 18))
    {
      if (*((unsigned char *)a2 + 20)) {
        int v4 = 3;
      }
      else {
        int v4 = 2;
      }
      char v5 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    if (*((unsigned char *)a2 + 18))
    {
      char v5 = 1;
      int v4 = 2;
LABEL_17:
      int v6 = 1;
      goto LABEL_20;
    }
    int v4 = 0;
  }
  char v5 = 0;
  int v6 = 2;
LABEL_20:
  _VCAudioIssueDetectorUtil_StateMachine(a1, v6, v4, a2[2], *((float *)a2 + 3));
  __int32 v7 = *a2;
  if (a1[22].i32[1] != v7) {
    a1[22].i32[1] = v7;
  }
  int v8 = *((_DWORD *)a2 + 1);
  if ((_WORD)v8)
  {
    unsigned int v9 = a1[23].u16[1];
    if (v9 != (unsigned __int16)v8 && ((unsigned __int16)v8 > 0x960u || v9 <= 0x960)) {
      a1[23].i16[1] = v8;
    }
  }
  __int32 v10 = a2[8];
  if (a2[8] && a1[23].u16[0] != v10)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      int v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v24 = 136315906;
        uint64_t v25 = v11;
        __int16 v26 = 2080;
        uint64_t v27 = "_VCAudioIssueDetectorUtil_UpdateCodecSampleRate";
        __int16 v28 = 1024;
        int v29 = 844;
        __int16 v30 = 1024;
        __int32 v31 = v10;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio issue detector update codecSampleRate=%d", (uint8_t *)&v24, 0x22u);
      }
    }
    a1[23].i16[0] = v10;
    __int32 v7 = *a2;
    int v8 = *((_DWORD *)a2 + 1);
  }
  if (v8) {
    char v13 = v5;
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    __int16 v14 = (char *)&a1[41] + 4;
    int v15 = (char *)&a1[41] + 12 * a1[89].u8[4] + 4;
    int v18 = *((_DWORD *)v15 + 2);
    __int16 v16 = v15 + 8;
    int v17 = v18;
    if (v18 && *(unsigned __int16 *)&v14[12 * a1[89].u8[4]] == v7 && *(_DWORD *)&v14[12 * a1[89].u8[4] + 4] == v8)
    {
      *__int16 v16 = v17 + 1;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = (int *)&a1[42] + 1;
      do
      {
        if (!*v20)
        {
          *((_WORD *)v20 - 4) = v7;
          *(v20 - 1) = v8;
          int v23 = 1;
LABEL_51:
          int *v20 = v23;
          a1[89].i8[4] = v19;
          return;
        }
        if (*((unsigned __int16 *)v20 - 4) == v7 && *(v20 - 1) == v8)
        {
          int v23 = *v20 + 1;
          goto LABEL_51;
        }
        ++v19;
        v20 += 3;
      }
      while (v19 != 32);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        int v22 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v24 = 136316162;
          uint64_t v25 = v21;
          __int16 v26 = 2080;
          uint64_t v27 = "_VCAudioIssueDetectorUtil_AddOrUpdateBitRateCount";
          __int16 v28 = 1024;
          int v29 = 1406;
          __int16 v30 = 1024;
          __int32 v31 = v7;
          __int16 v32 = 1024;
          int v33 = v8;
          _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d BitRate counter out of entries for payload=%d, bitRate=%d", (uint8_t *)&v24, 0x28u);
        }
      }
    }
  }
}

void VCAudioIssueDetectorUtil_FlushLogEvents(uint64_t a1)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(opaqueCMSimpleQueue **)(a1 + 17968);
    if (v2)
    {
      int v3 = CMSimpleQueueDequeue(v2);
      if (v3)
      {
        int v4 = v3;
        int v5 = *(_DWORD *)(a1 + 17976);
        int v6 = (os_log_t *)MEMORY[0x1E4F47A50];
        do
        {
          switch(*v4)
          {
            case 0:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v7 = VRTraceErrorLogLevelToCSTR();
                os_log_t v8 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v9 = v4[1];
                  int v10 = v4[2];
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v96 = v7;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1452;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v9;
                  __int16 v105 = 1024;
                  int v106 = v10;
                  uint64_t v11 = v8;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: Continuous speech loss: direction=%d, disorti"
                        "onTimeMs=%d, distortionDurationMs=%d";
                  goto LABEL_36;
                }
              }
              break;
            case 1:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v15 = VRTraceErrorLogLevelToCSTR();
                os_log_t v16 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v17 = v4[1];
                  int v18 = v4[2];
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v96 = v15;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1455;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v17;
                  __int16 v105 = 1024;
                  int v106 = v18;
                  uint64_t v11 = v16;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: Average speech loss: direction=%d, disortionT"
                        "imeMs=%d, distortionDurationMs=%d";
                  goto LABEL_36;
                }
              }
              break;
            case 2:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v19 = VRTraceErrorLogLevelToCSTR();
                os_log_t v20 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v21 = v4[1];
                  int v22 = v4[2];
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v96 = v19;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1458;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v21;
                  __int16 v105 = 1024;
                  int v106 = v22;
                  uint64_t v11 = v20;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: Downlink link broken: direction=%d, disortion"
                        "TimeMs=%d, distortionDurationMs=%d";
                  goto LABEL_36;
                }
              }
              break;
            case 3:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v23 = VRTraceErrorLogLevelToCSTR();
                os_log_t v24 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v25 = v4[1];
                  int v26 = v4[2];
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v96 = v23;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1461;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v25;
                  __int16 v105 = 1024;
                  int v106 = v26;
                  uint64_t v11 = v24;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: Downlink silence > 5s: direction=%d, disortio"
                        "nTimeMs=%d, distortionDurationMs=%d";
                  goto LABEL_36;
                }
              }
              break;
            case 4:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v27 = VRTraceErrorLogLevelToCSTR();
                os_log_t v28 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v29 = v4[1];
                  int v30 = v4[2];
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v96 = v27;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1464;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v29;
                  __int16 v105 = 1024;
                  int v106 = v30;
                  uint64_t v11 = v28;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: Uplink silence > 5s: direction=%d, disortionT"
                        "imeMs=%d, distortionDurationMs=%d";
                  goto LABEL_36;
                }
              }
              break;
            case 5:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v31 = VRTraceErrorLogLevelToCSTR();
                os_log_t v32 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v33 = v4[1];
                  int v34 = v4[2];
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v96 = v31;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1467;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v33;
                  __int16 v105 = 1024;
                  int v106 = v34;
                  uint64_t v11 = v32;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: Continuous zero pcm samples > 5s in uplink: d"
                        "irection=%d, disortionTimeMs=%d, distortionDurationMs=%d";
                  goto LABEL_36;
                }
              }
              break;
            case 6:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v35 = VRTraceErrorLogLevelToCSTR();
                os_log_t v36 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v37 = v4[1];
                  int v38 = v4[2];
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v96 = v35;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1470;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v37;
                  __int16 v105 = 1024;
                  int v106 = v38;
                  uint64_t v11 = v36;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: Continuous zero pcm samples > 5s in downlink:"
                        " direction=%d, disortionTimeMs=%d, distortionDurationMs=%d";
                  goto LABEL_36;
                }
              }
              break;
            case 7:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v39 = VRTraceErrorLogLevelToCSTR();
                os_log_t v40 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v41 = v4[1];
                  int v42 = v4[2];
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v96 = v39;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1473;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v41;
                  __int16 v105 = 1024;
                  int v106 = v42;
                  uint64_t v11 = v40;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: Low energy in uplink: direction=%d, disortion"
                        "TimeMs=%d, distortionDurationMs=%d";
                  goto LABEL_36;
                }
              }
              break;
            case 8:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v43 = VRTraceErrorLogLevelToCSTR();
                os_log_t v44 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v45 = v4[1];
                  int v46 = v4[2];
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v96 = v43;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1476;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v45;
                  __int16 v105 = 1024;
                  int v106 = v46;
                  uint64_t v11 = v44;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: Low energy in downlink: direction=%d, disorti"
                        "onTimeMs=%d, distortionDurationMs=%d";
LABEL_36:
                  uint32_t v47 = 46;
                  goto LABEL_37;
                }
              }
              break;
            case 9:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v48 = VRTraceErrorLogLevelToCSTR();
                os_log_t v49 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v50 = v4[1];
                  int v51 = v4[2];
                  int v52 = v4[3];
                  *(_DWORD *)CMTime buf = 136316674;
                  uint64_t v96 = v48;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1479;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v50;
                  __int16 v105 = 1024;
                  int v106 = v51;
                  __int16 v107 = 1024;
                  int v108 = v52;
                  uint64_t v11 = v49;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: High noise floor in uplink: direction=%d, dis"
                        "ortionTimeMs=%d, distortionDurationMs=%d, segmentRmsMeanDb=%d";
                  goto LABEL_46;
                }
              }
              break;
            case 0xA:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v53 = VRTraceErrorLogLevelToCSTR();
                os_log_t v54 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v55 = v4[1];
                  int v56 = v4[2];
                  int v57 = v4[3];
                  *(_DWORD *)CMTime buf = 136316674;
                  uint64_t v96 = v53;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1482;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v55;
                  __int16 v105 = 1024;
                  int v106 = v56;
                  __int16 v107 = 1024;
                  int v108 = v57;
                  uint64_t v11 = v54;
                  int v12 = " [%s] %s:%d Audio issue detector: DistortionEvent: High noise floor in downlink: direction=%d, d"
                        "isortionTimeMs=%d, distortionDurationMs=%d, segmentRmsMeanDb=%d";
LABEL_46:
                  uint32_t v47 = 52;
                  goto LABEL_37;
                }
              }
              break;
            case 0xB:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v58 = VRTraceErrorLogLevelToCSTR();
                os_log_t v59 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v83 = v4[1];
                  int v84 = v4[2];
                  int v85 = *((unsigned __int16 *)v4 + 12);
                  int v86 = *((unsigned __int16 *)v4 + 13);
                  int v60 = v4[5];
                  int v88 = v4[4];
                  int v89 = v4[7];
                  int v92 = v4[10];
                  int v93 = v4[9];
                  int v90 = v4[8];
                  int v91 = v4[11];
                  int v94 = v4[12];
                  uint64_t v87 = _VCAudioIssueDetectorUtil_PayloadBitRateString(*((unsigned __int16 *)v4 + 86), v4[44]);
                  uint64_t v61 = _VCAudioIssueDetectorUtil_PayloadBitRateString(*((unsigned __int16 *)v4 + 92), v4[47]);
                  uint64_t v62 = _VCAudioIssueDetectorUtil_PayloadBitRateString(*((unsigned __int16 *)v4 + 98), v4[50]);
                  *(_DWORD *)CMTime buf = 136319746;
                  uint64_t v96 = v58;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1494;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v83;
                  __int16 v105 = 1024;
                  int v106 = v84;
                  __int16 v107 = 1024;
                  int v108 = v60;
                  int v6 = (os_log_t *)MEMORY[0x1E4F47A50];
                  __int16 v109 = 1024;
                  int v110 = v85;
                  __int16 v111 = 1024;
                  int v112 = v86;
                  __int16 v113 = 1024;
                  int v114 = v88;
                  __int16 v115 = 1024;
                  int v116 = v89;
                  __int16 v117 = 1024;
                  int v118 = v90;
                  __int16 v119 = 1024;
                  int v120 = v92;
                  __int16 v121 = 1024;
                  int v122 = v91;
                  __int16 v123 = 1024;
                  int v124 = v93;
                  __int16 v125 = 1024;
                  int v126 = v94;
                  __int16 v127 = 2080;
                  int v128 = v87;
                  __int16 v129 = 2080;
                  BOOL v130 = v61;
                  __int16 v131 = 2080;
                  int v132 = v62;
                  uint64_t v11 = v59;
                  int v12 = " [%s] %s:%d Audio issue detector: CallEndEvent: Call end stats: direction=%d, disortionTimeMs=%d"
                        ", distortionDurationMs=%d, payloadType=%d, codecSampleRate=%d, bitRateInBps=%d, ratType=%d, tota"
                        "lFrameCount=%d, speechFrameCount=%d, speechBadFrameCount=%d, speechLostFrameCount=%d, silenceFra"
                        "meCount=%d, noDataFrameCount=%d, top1UsedBitrate=%s, top2UsedBitrate=%s, top3UsedBitrate=%s";
                  uint32_t v47 = 136;
                  goto LABEL_37;
                }
              }
              break;
            case 0xC:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v63 = VRTraceErrorLogLevelToCSTR();
                os_log_t v64 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v65 = v4[1];
                  int v66 = v4[2];
                  int v67 = v4[3];
                  int v68 = v4[4];
                  int v69 = v4[5];
                  int v70 = v4[6];
                  int v72 = v4[7];
                  int v71 = v4[8];
                  *(_DWORD *)CMTime buf = 136317954;
                  uint64_t v96 = v63;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1485;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v65;
                  __int16 v105 = 1024;
                  int v106 = v66;
                  __int16 v107 = 1024;
                  int v108 = v67;
                  __int16 v109 = 1024;
                  int v110 = v69;
                  __int16 v111 = 1024;
                  int v112 = v68;
                  __int16 v113 = 1024;
                  int v114 = v70;
                  __int16 v115 = 1024;
                  int v116 = v71;
                  __int16 v117 = 1024;
                  int v118 = v72;
                  uint64_t v11 = v64;
                  int v12 = " [%s] %s:%d Audio issue detector: CallEndEvent: Speech state rms stats: direction=%d, disortionT"
                        "imeMs=%d, distortionDurationMs=%d, rmsMeanDb=%d, rmsMinDb=%d, rmsMaxDb=%d, rmsSegmentMeanDb=%d, "
                        "rmsSegmentMinDb=%d, rmsSegmentMaxDb=%d";
                  goto LABEL_56;
                }
              }
              break;
            case 0xD:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v73 = VRTraceErrorLogLevelToCSTR();
                os_log_t v74 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
                {
                  int v75 = v4[1];
                  int v76 = v4[2];
                  int v77 = v4[3];
                  int v78 = v4[4];
                  int v79 = v4[5];
                  int v80 = v4[6];
                  int v82 = v4[7];
                  int v81 = v4[8];
                  *(_DWORD *)CMTime buf = 136317954;
                  uint64_t v96 = v73;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1488;
                  __int16 v101 = 1024;
                  int v102 = v5;
                  __int16 v103 = 1024;
                  int v104 = v75;
                  __int16 v105 = 1024;
                  int v106 = v76;
                  __int16 v107 = 1024;
                  int v108 = v77;
                  __int16 v109 = 1024;
                  int v110 = v79;
                  __int16 v111 = 1024;
                  int v112 = v78;
                  __int16 v113 = 1024;
                  int v114 = v80;
                  __int16 v115 = 1024;
                  int v116 = v81;
                  __int16 v117 = 1024;
                  int v118 = v82;
                  uint64_t v11 = v74;
                  int v12 = " [%s] %s:%d Audio issue detector: CallEndEvent: Silence state rms stats: direction=%d, disortion"
                        "TimeMs=%d, distortionDurationMs=%d, rmsMeanDb=%d, rmsMinDb=%d, rmsMaxDb=%d, rmsSegmentMeanDb=%d,"
                        " rmsSegmentMinDb=%d, rmsSegmentMaxDb=%d";
LABEL_56:
                  uint32_t v47 = 82;
LABEL_37:
                  _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, v47);
                }
              }
              break;
            default:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v13 = VRTraceErrorLogLevelToCSTR();
                __int16 v14 = *v6;
                if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CMTime buf = 136315906;
                  uint64_t v96 = v13;
                  __int16 v97 = 2080;
                  long long v98 = "_VCAudioIssueDetectorUtil_HandleLogEvents";
                  __int16 v99 = 1024;
                  int v100 = 1497;
                  __int16 v101 = 1024;
                  int v102 = 1497;
                  _os_log_error_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCAudioIssueDetectorUtil.c:%d: Unexpected log event", buf, 0x22u);
                }
              }
              break;
          }
          int v4 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 17968));
        }
        while (v4);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioIssueDetectorUtil_FlushLogEvents_cold_1();
    }
  }
}

uint64_t VCAudioIssueDetectorUtil_RtpPacketIndication(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 14728) = *(_DWORD *)(a1 + 4) * *(unsigned __int16 *)(a1 + 8);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioIssueDetectorUtil_RtpPacketIndication_cold_1();
      }
    }
    return 4;
  }
  return result;
}

uint64_t VCAudioIssueDetectorUtil_RtpPacketTimeoutIndication(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(_DWORD *)(a1 + 4) * *(unsigned __int16 *)(a1 + 8);
    unsigned int v3 = v2 - *(_DWORD *)(a1 + 14728);
    *(_DWORD *)(a1 + 14732) = v3;
    if (v3 >= 0x1389 && !_VCAudioIssueDetectorUtil_IsReportingQueueFull(*(opaqueCMSimpleQueue **)(a1 + 17968)))
    {
      int v4 = *(unsigned __int16 *)(a1 + 720);
      *(_WORD *)(a1 + 720) = v4 + 1;
      uint64_t v5 = a1
         + 560
         * (unsigned __int16)(v4
                            - 25
                            * ((((unsigned __int16)(v4 - ((18351 * v4) >> 16)) >> 1)
                              + ((18351 * v4) >> 16)) >> 4));
      *(_DWORD *)(v5 + 724) = 14;
      *(void *)(v5 + 728) = *(void *)(a1 + 14728);
      _VCAudioIssueDetectorUtil_EnqueueDistortion(a1, (unsigned int *)(v5 + 724));
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 14728) = v2;
    *(_DWORD *)(a1 + 14732) = 0;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioIssueDetectorUtil_RtpPacketTimeoutIndication_cold_1();
      }
    }
    return 4;
  }
  return result;
}

void _VCAudioIssueDetectorUtil_InitAndUseLatestConfig(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v2 = (int *)(a1 + 17976);
  bzero((void *)a1, 0x4630uLL);
  *(_DWORD *)(a1 + 20) = -956694528;
  *(_DWORD *)(a1 + 32) = -956694528;
  *(_DWORD *)(a1 + 68) = -956694528;
  *(_DWORD *)(a1 + 80) = -956694528;
  if (*((_WORD *)v2 + 3) && (unsigned int v3 = *((unsigned __int16 *)v2 + 2), *((_WORD *)v2 + 2)))
  {
    *(_WORD *)(a1 + 8) = 0x3E8 / (*((unsigned __int16 *)v2 + 3) / v3);
    *(_WORD *)(a1 + 136) = v3;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    uint64_t v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v6 = *((unsigned __int16 *)v2 + 3);
      int v7 = *((unsigned __int16 *)v2 + 2);
      int v8 = *v2;
      int v9 = 136316418;
      uint64_t v10 = v4;
      __int16 v11 = 2080;
      int v12 = "_VCAudioIssueDetectorUtil_InitAndUseLatestConfig";
      __int16 v13 = 1024;
      int v14 = 1156;
      __int16 v15 = 1024;
      int v16 = v6;
      __int16 v17 = 1024;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v8;
      _os_log_error_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unexpected configuration audioIOSampleRate=%d, audioIOSampleCount=%d for direction=%d", (uint8_t *)&v9, 0x2Eu);
    }
  }
}

void _VCAudioIssueDetectorUtilDeInit(void *a1)
{
  if (a1 && (v2 = (void *)*a1) != 0 && (unsigned int v3 = (void *)v2[2246]) != 0)
  {
    free(v3);
    v2[2246] = 0;
    uint64_t v4 = (const void *)v2[2248];
    if (v4) {
      CFRelease(v4);
    }
    *a1 = 0;
    free(v2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCAudioIssueDetectorUtilDeInit_cold_1();
    }
  }
}

_DWORD *_VCAudioIssueDetectorUtil_UpdateAggregatedStats(_DWORD *result, int a2)
{
  if ((*result - 1) >= 2)
  {
    if (*result != 3) {
      return result;
    }
    ++result[48];
    if (a2 == 4)
    {
      int v2 = result + 51;
    }
    else
    {
      if (a2 != 1) {
        return result;
      }
      int v2 = result + 50;
    }
  }
  else
  {
    ++result[49];
    if (a2 != 4) {
      return result;
    }
    int v2 = result + 52;
  }
  ++*v2;
  return result;
}

void _VCAudioIssueDetectorUtil_UpdateRmsStats(uint64_t a1, float a2)
{
  *(float *)(a1 + 140) = log10f(a2) * 20.0;
  uint64_t v4 = *(unsigned __int16 *)(a1 + 17980);
  *(_WORD *)(a1 + 136) = v4;
  *(double *)(a1 + 144) = *(double *)(a1 + 144) + (float)((float)(a2 * a2) * (float)v4);
  *(void *)(a1 + 128) += v4;
  if (a2 == 0.0)
  {
    int v5 = *(_DWORD *)(a1 + 116);
    if (v5 == 1)
    {
      *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 4) * *(unsigned __int16 *)(a1 + 8) - *(_DWORD *)(a1 + 120);
    }
    else if (!v5)
    {
      int v6 = *(_DWORD *)a1;
      *(void *)(a1 + 120) = *(_DWORD *)(a1 + 4) * *(unsigned __int16 *)(a1 + 8);
      *(_DWORD *)(a1 + 112) = v6;
      *(_DWORD *)(a1 + 116) = 1;
    }
  }
  else
  {
    int v7 = *(_DWORD *)a1;
    _VCAudioIssueDetectorUtil_StopZerosMonitoring(a1);
    if (v7 == 2)
    {
      int v11 = *(unsigned __int16 *)(a1 + 196);
      *(_DWORD *)(a1 + 44) = v11;
      float v12 = *(float *)(a1 + 140);
      float v13 = *(float *)(a1 + 16);
      if (v12 <= *(float *)(a1 + 20))
      {
        if (v12 < *(float *)(a1 + 24)) {
          *(float *)(a1 + 24) = v12;
        }
      }
      else
      {
        *(float *)(a1 + 20) = v12;
      }
      *(float *)(a1 + 16) = (float)(v12 + (float)(v13 * (float)(v11 - 1))) / (float)v11;
    }
    else if (v7 == 3)
    {
      float v8 = *(float *)(a1 + 140);
      if (v8 > -75.0)
      {
        int v9 = *(_DWORD *)(a1 + 92) + 1;
        *(_DWORD *)(a1 + 92) = v9;
        float v10 = *(float *)(a1 + 64);
        if (v8 <= *(float *)(a1 + 68))
        {
          if (v8 < *(float *)(a1 + 72)) {
            *(float *)(a1 + 72) = v8;
          }
        }
        else
        {
          *(float *)(a1 + 68) = v8;
        }
        *(float *)(a1 + 64) = (float)(v8 + (float)(v10 * (float)((unsigned __int16)v9 - 1)))
                            / (float)(unsigned __int16)v9;
      }
    }
  }
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1 + 14724;
  if (*(unsigned char *)(a1 + 14724)) {
    return;
  }
  uint64_t v2 = a1;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 17996);
  if (*(void *)(a1 + 17984))
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v5 = Mutable;
    if (!Mutable)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_2();
        }
      }
      goto LABEL_11;
    }
    _VCAudioIssueDetectorUtil_AddAudioCommonStatToDictionary(Mutable, v2);
    int valuePtr = *(_DWORD *)(v2 + 188);
    CFNumberRef v6 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v5, @"AudioTotalFrameCount", v6);
    CFRelease(v6);
    int valuePtr = *(_DWORD *)(v2 + 192);
    CFNumberRef v7 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v5, @"AudioSpeechFrameCount", v7);
    CFRelease(v7);
    int valuePtr = *(_DWORD *)(v2 + 196);
    CFNumberRef v8 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v5, @"AudioSilenceFrameCount", v8);
    CFRelease(v8);
    int valuePtr = *(_DWORD *)(v2 + 200);
    CFNumberRef v9 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v5, @"AudioSpeechBadFrameCount", v9);
    CFRelease(v9);
    int valuePtr = *(_DWORD *)(v2 + 204);
    CFNumberRef v10 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v5, @"AudioSpeechLostFrameCount", v10);
    CFRelease(v10);
    int valuePtr = *(_DWORD *)(v2 + 208);
    CFNumberRef v11 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v5, @"AudioNoDataFrameCount", v11);
    CFRelease(v11);
    qsort((void *)(v2 + 332), 0x20uLL, 0xCuLL, (int (__cdecl *)(const void *, const void *))_VCAudioIssueDetectorUtil_CompareBitRateCount);
    float v12 = _VCAudioIssueDetectorUtil_PayloadBitRateString(*(unsigned __int16 *)(v2 + 332), *(_DWORD *)(v2 + 336));
    if (!v12)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_3();
        }
      }
      goto LABEL_11;
    }
    CFStringRef v13 = CFStringCreateWithCString(v3, v12, 0x8000100u);
    if (v13)
    {
      CFStringRef v14 = v13;
      CFDictionaryAddValue(v5, @"AudioTop1UsedBitrate", v13);
      CFRelease(v14);
      __int16 v15 = _VCAudioIssueDetectorUtil_PayloadBitRateString(*(unsigned __int16 *)(v2 + 344), *(_DWORD *)(v2 + 348));
      if (!v15)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_4();
          }
        }
        goto LABEL_11;
      }
      CFStringRef v16 = CFStringCreateWithCString(v3, v15, 0x8000100u);
      if (v16)
      {
        CFStringRef v17 = v16;
        CFDictionaryAddValue(v5, @"AudioTop2UsedBitrate", v16);
        CFRelease(v17);
        int v18 = _VCAudioIssueDetectorUtil_PayloadBitRateString(*(unsigned __int16 *)(v2 + 356), *(_DWORD *)(v2 + 360));
        if (!v18)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_5();
            }
          }
          goto LABEL_11;
        }
        CFStringRef v19 = CFStringCreateWithCString(v3, v18, 0x8000100u);
        if (v19)
        {
          CFStringRef v20 = v19;
          CFDictionaryAddValue(v5, @"AudioTop3UsedBitrate", v19);
          CFRelease(v20);
          reportingAudioStreamEvent();
LABEL_11:
          CFRelease(v5);
        }
      }
    }
    uint64_t v21 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v22 = v21;
    if (v21)
    {
      _VCAudioIssueDetectorUtil_AddAudioCommonStatToDictionary(v21, v2);
      uint64_t v23 = 0;
      uint64_t v36 = v2;
      os_log_t v24 = (int *)(v2 + 216);
      do
      {
        if (v23 <= 0xAu)
        {
          CFStringRef v25 = off_1E6DB62F0[v23];
          CStringPtr = CFStringGetCStringPtr(v25, 0x8000100u);
          CFStringRef v27 = CFStringCreateWithFormat(v3, 0, @"%sCount", CStringPtr);
          int valuePtr = *(v24 - 1);
          CFNumberRef v28 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
          CFDictionaryAddValue(v22, v27, v28);
          CFRelease(v28);
          CFRelease(v27);
          int v29 = CFStringGetCStringPtr(v25, 0x8000100u);
          CFStringRef v30 = CFStringCreateWithFormat(v3, 0, @"%sDuration", v29);
          int valuePtr = *v24;
          CFNumberRef v31 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
          CFDictionaryAddValue(v22, v30, v31);
          CFRelease(v31);
          CFRelease(v30);
        }
        ++v23;
        v24 += 2;
      }
      while (v23 != 11);
      uint64_t v2 = v36;
      int valuePtr = *(_DWORD *)(v36 + 188);
      CFNumberRef v32 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(v22, @"AudioTotalFrameCount", v32);
      CFRelease(v32);
      reportingAudioStreamEvent();
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_1();
      }
    }
    CFRelease(v22);
    if (*(_DWORD *)(v1 + 3272) != 3)
    {
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionContinuousSpeechLoss", 0);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionAverageSpeechLoss", 1u);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionRxLinkBroken", 2u);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionRxSilence", 3u);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionTxSilence", 4u);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionZerosTx", 5u);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionZerosRx", 6u);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionLowEnergyTx", 7u);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionLowEnergyRx", 8u);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionHighNoiseTx", 9u);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionHighNoiseRx", 0xAu);
      _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(v2, @"AudioDistortionDownlinkRtpTimeout", 0xEu);
    }
  }
  if (!_VCAudioIssueDetectorUtil_IsReportingQueueFull(*(opaqueCMSimpleQueue **)(v2 + 17968)))
  {
    int v33 = *(unsigned __int16 *)(v2 + 720);
    *(_WORD *)(v2 + 720) = v33 + 1;
    uint64_t v34 = v2
        + 560
        * (unsigned __int16)(v33
                           - 25
                           * ((((unsigned __int16)(v33 - ((18351 * v33) >> 16)) >> 1)
                             + ((18351 * v33) >> 16)) >> 4));
    uint64_t v35 = (unsigned int *)(v34 + 724);
    *(_DWORD *)(v34 + 724) = 11;
    *(void *)(v34 + 728) = *(_DWORD *)(v2 + 4) * *(unsigned __int16 *)(v2 + 8);
    memcpy((void *)(v34 + 736), (const void *)(v2 + 172), 0x224uLL);
    _VCAudioIssueDetectorUtil_EnqueueDistortion(v2, v35);
  }
  _VCAudioIssueDetectorUtil_ReportRmsStatEvents(v2, 0xCu, (float *)(v2 + 64));
  _VCAudioIssueDetectorUtil_ReportRmsStatEvents(v2, 0xDu, (float *)(v2 + 16));
  *(unsigned char *)uint64_t v1 = 1;
}

void _VCAudioIssueDetectorUtil_StopZerosMonitoring(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 116) == 1)
  {
    unsigned int v2 = *(_DWORD *)(a1 + 124);
    if (v2 >= 0x1389 && !_VCAudioIssueDetectorUtil_IsReportingQueueFull(*(opaqueCMSimpleQueue **)(a1 + 17968)))
    {
      int v3 = *(unsigned __int16 *)(a1 + 720);
      int v4 = v3
         - 25
         * ((((unsigned __int16)(v3 - ((18351 * v3) >> 16)) >> 1) + ((18351 * v3) >> 16)) >> 4);
      int v5 = *(_DWORD *)(a1 + 17976);
      *(_WORD *)(a1 + 720) = v3 + 1;
      if (v5) {
        int v6 = 6;
      }
      else {
        int v6 = 5;
      }
      CFNumberRef v7 = (unsigned int *)(a1 + 560 * (unsigned __int16)v4);
      v7[181] = v6;
      v7[182] = *(_DWORD *)(a1 + 120);
      v7[183] = v2;
      _VCAudioIssueDetectorUtil_EnqueueDistortion(a1, v7 + 181);
    }
    *(void *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 116) = 0;
  }
}

BOOL _VCAudioIssueDetectorUtil_IsReportingQueueFull(opaqueCMSimpleQueue *a1)
{
  int32_t Capacity = CMSimpleQueueGetCapacity(a1);
  return Capacity - CMSimpleQueueGetCount(a1) == 1 || CMSimpleQueueGetCount(a1) >= 25;
}

void _VCAudioIssueDetectorUtil_EnqueueDistortion(uint64_t a1, unsigned int *a2)
{
  if (CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 17968), a2))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioIssueDetectorUtil_EnqueueDistortion_cold_1();
      }
    }
  }
  uint64_t v4 = *a2;
  if (v4 <= 0xA)
  {
    uint64_t v5 = a1 + 8 * v4;
    int v6 = *(_DWORD *)(v5 + 216) + a2[2];
    ++*(_DWORD *)(v5 + 212);
    *(_DWORD *)(v5 + 216) = v6;
    if (*(_DWORD *)(a1 + 17996) != 3)
    {
      if (*(unsigned char *)(a1 + 14736))
      {
        uint64_t v7 = a1 + 292 * v4;
        int v8 = *(__int16 *)(a1 + 14738);
        if (v8 <= -45)
        {
          uint64_t v9 = 0;
          while (rsrpBinBoundaries[v9] < v8)
          {
            if (++v9 == 19) {
              goto LABEL_14;
            }
          }
        }
        else
        {
          uint64_t v9 = 19;
        }
        ++*(_WORD *)(v7 + 14756 + 2 * v9);
LABEL_14:
        int v10 = *(__int16 *)(a1 + 14740);
        if (v10 <= 0)
        {
          uint64_t v11 = 0;
          while (rssiBinBoundaries[v11] < v10)
          {
            if (++v11 == 11) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          uint64_t v11 = 11;
        }
        ++*(_WORD *)(a1 + 292 * v4 + 14796 + 2 * v11);
LABEL_17:
        int v12 = *(char *)(a1 + 14742);
        if (v12 <= 30)
        {
          uint64_t v13 = 0;
          while (snrBinBoundaries[v13] < v12)
          {
            if (++v13 == 21) {
              goto LABEL_23;
            }
          }
        }
        else
        {
          uint64_t v13 = 21;
        }
        ++*(_WORD *)(a1 + 292 * v4 + 14820 + 2 * v13);
LABEL_23:
        unsigned int v14 = *(unsigned __int8 *)(a1 + 14743);
        if (v14 <= 0x64)
        {
          uint64_t v15 = 0;
          while (blerBinBoundaries[v15] < (int)v14)
          {
            if (++v15 == 27) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          uint64_t v15 = 27;
        }
        ++*(_WORD *)(a1 + 292 * v4 + 14864 + 2 * v15);
LABEL_29:
        unsigned int v16 = *(unsigned __int8 *)(a1 + 14744);
        if (v16 <= 0x64)
        {
          uint64_t v17 = 0;
          while (blerBinBoundaries[v17] < (int)v16)
          {
            if (++v17 == 27) {
              goto LABEL_35;
            }
          }
        }
        else
        {
          uint64_t v17 = 27;
        }
        ++*(_WORD *)(a1 + 292 * v4 + 14920 + 2 * v17);
LABEL_35:
        int v18 = (unsigned char *)(v7 + 14754);
        uint64_t v19 = a1 + 292 * v4;
        uint64_t v20 = v19 + 14754 + 2 * *(unsigned __int8 *)(a1 + 14745);
        ++*(_WORD *)(v20 + 222);
        uint64_t v21 = v19 + 14754 + 2 * *(unsigned __int8 *)(a1 + 14746);
        ++*(_WORD *)(v21 + 228);
        unsigned int v22 = *(unsigned __int16 *)(a1 + 14748);
        if (v22 <= 0x500)
        {
          uint64_t v23 = 0;
          while (cdrxCycleBinBoundaries[v23] < (int)v22)
          {
            if (++v23 == 9) {
              goto LABEL_41;
            }
          }
        }
        else
        {
          uint64_t v23 = 9;
        }
        ++*(_WORD *)(v19 + 14988 + 2 * v23);
LABEL_41:
        uint64_t v24 = a1 + 292 * v4;
        uint64_t v25 = v24 + 2 * *(unsigned __int8 *)(a1 + 14750);
        ++*(_WORD *)(v25 + 15008);
        unsigned int v26 = *(unsigned __int16 *)(a1 + 14752);
        if (v26 <= 0x2710)
        {
          uint64_t v27 = 0;
          while (outageBinBoundaries[v27] < (int)v26)
          {
            if (++v27 == 15) {
              goto LABEL_47;
            }
          }
        }
        else
        {
          uint64_t v27 = 15;
        }
        ++*(_WORD *)(v24 + 15014 + 2 * v27);
LABEL_47:
        *int v18 = 1;
      }
    }
  }
}

void _VCAudioIssueDetectorUtil_AddAudioCommonStatToDictionary(__CFDictionary *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (_DWORD *)(a2 + 17976);
  int valuePtr = *(_DWORD *)(a2 + 17976);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(a1, @"AudioStatDirection", v6);
  CFRelease(v6);
  int v7 = *(_DWORD *)(a2 + 176) - 2;
  if (v7 > 4) {
    int v8 = 0;
  }
  else {
    int v8 = dword_1E259EC0C[v7];
  }
  int valuePtr = v8;
  CFNumberRef v9 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(a1, @"RATType", v9);
  CFRelease(v9);
  int valuePtr = *(unsigned __int16 *)(a2 + 184);
  CFNumberRef v10 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(a1, @"CodecSampleRate", v10);
  CFRelease(v10);
  if (*v4)
  {
    int valuePtr = *(unsigned __int16 *)(a2 + 186);
    CFNumberRef v11 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
    int v12 = @"DownlinkCodecBitRate";
  }
  else
  {
    int valuePtr = *(unsigned __int16 *)(a2 + 186);
    CFNumberRef v11 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
    int v12 = @"UplinkCodecBitRate";
  }
  CFDictionaryAddValue(a1, v12, v11);
  CFRelease(v11);
  int valuePtr = *(_DWORD *)(a2 + 180);
  CFNumberRef v13 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(a1, @"Payload", v13);
  CFRelease(v13);
}

const char *_VCAudioIssueDetectorUtil_PayloadBitRateString(int a1, int a2)
{
  if (a1 <= 106)
  {
    if (a1 == 97) {
      return VCPayloadUtils_AmrNbBitRateStringForBitRate(a2);
    }
    if (a1 == 98) {
      return VCPayloadUtils_AmrWbBitRateStringForBitRate(a2);
    }
  }
  else if ((a1 - 107) < 2 || a1 == 111)
  {
    return VCPayloadUtils_EvsBitRateStringForBitRate(a2);
  }
  return "";
}

void _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 292 * a3 + 14754))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v8 = Mutable;
    if (Mutable)
    {
      CFDictionaryAddValue(Mutable, @"AudioDistortionType", a2);
      unsigned int v9 = *(_DWORD *)(a1 + 176) - 2;
      if (v9 > 4) {
        int v10 = 0;
      }
      else {
        int v10 = dword_1E259EC0C[v9];
      }
      int valuePtr = v10;
      CFNumberRef v11 = CFNumberCreate(v6, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(v8, @"RATType", v11);
      CFRelease(v11);
      uint64_t v12 = a1 + 292 * a3;
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"RsrpHistogram", v12 + 14756, 0x13u);
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"RssiHistogram", v12 + 14796, 0xBu);
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"SnrHistogram", v12 + 14820, 0x15u);
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"UlBlerHistogram", v12 + 14864, 0x1Bu);
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"DlBlerHistogram", v12 + 14920, 0x1Bu);
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"TtiHistogram", v12 + 14976, 2u);
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"CdrxStateHistogram", v12 + 14982, 2u);
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"CdrxCycleHistogram", v12 + 14988, 9u);
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"OutageStateHistogram", v12 + 15008, 2u);
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(v8, @"OutagePeriodHistogram", v12 + 15014, 0xFu);
      reportingAudioStreamEvent();
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram_cold_1();
      }
    }
    CFRelease(v8);
  }
}

void _VCAudioIssueDetectorUtil_AddHistogramEntryToDict(__CFDictionary *a1, const void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    int v10 = Mutable;
    unsigned __int8 v11 = 0;
    do
    {
      int valuePtr = *(unsigned __int16 *)(a3 + 2 * v11);
      CFNumberRef v12 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
      if (v12)
      {
        CFNumberRef v13 = v12;
        CFArrayAppendValue(v10, v12);
        CFRelease(v13);
      }
      ++v11;
    }
    while (a4 >= v11);
    CFDictionaryAddValue(a1, a2, v10);
    CFRelease(v10);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCAudioIssueDetectorUtil_AddHistogramEntryToDict_cold_1();
    }
  }
}

void _VCAudioIssueDetectorUtil_ReportRmsStatEvents(uint64_t a1, unsigned int a2, float *a3)
{
  if (!_VCAudioIssueDetectorUtil_IsReportingQueueFull(*(opaqueCMSimpleQueue **)(a1 + 17968)))
  {
    int v6 = *(unsigned __int16 *)(a1 + 720);
    *(_WORD *)(a1 + 720) = v6 + 1;
    int v7 = (unsigned int *)(a1
                        + 560
                        * (unsigned __int16)(v6
                                           - 25
                                           * ((((unsigned __int16)(v6 - ((18351 * v6) >> 16)) >> 1)
                                             + ((18351 * v6) >> 16)) >> 4)));
    v7[181] = a2;
    v7[182] = *(_DWORD *)(a1 + 4) * *(unsigned __int16 *)(a1 + 8);
    v7[185] = llroundf(a3[1]);
    v7[184] = llroundf(*a3);
    v7[186] = llroundf(a3[2]);
    unsigned int v8 = llroundf(a3[4]);
    v7[183] = 0;
    v7[188] = v8;
    v7[189] = llroundf(a3[5]);
    v7[187] = llroundf(a3[3]);
    _VCAudioIssueDetectorUtil_EnqueueDistortion(a1, v7 + 181);
  }
}

void _VCAudioIssueDetectorUtil_MonitorAndUpdateRmsSegmentStats(uint64_t a1, int a2, int a3)
{
  long double v4 = *(double *)(a1 + 144);
  if (v4 != 0.0)
  {
    double v8 = log10(v4);
    CFAllocatorRef v5 = (void *)(a1 + 128);
    double v9 = (v8 - log10((double)*(unint64_t *)(a1 + 128))) * 10.0;
    float v10 = v9;
    if (*(_DWORD *)a1 == 3)
    {
      if (a2 != 2) {
        goto LABEL_13;
      }
    }
    else
    {
      if (*(_DWORD *)a1 == 2)
      {
        if (a2 != 1) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
      if (a3 == 3)
      {
LABEL_12:
        float v12 = v9;
        _VCAudioIssueDetectorUtil_UpdateRmsSegmentStats(a1 + 64, v12);
        _VCAudioIssueDetectorUtil_RmsMonitorThresholdSpeech(a1, v10);
        goto LABEL_13;
      }
      if (a3 != 2)
      {
LABEL_13:
        *(void *)(a1 + 144) = 0;
        goto LABEL_14;
      }
    }
    float v11 = v9;
    _VCAudioIssueDetectorUtil_UpdateRmsSegmentStats(a1 + 16, v11);
    _VCAudioIssueDetectorUtil_RmsMonitorSilenceThreshold(a1, v10);
    goto LABEL_13;
  }
  CFAllocatorRef v5 = (void *)(a1 + 128);
LABEL_14:
  *CFAllocatorRef v5 = 0;
}

void _VCAudioIssueDetectorUtilFlushSilenceDistortionStats(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 17976);
  if (v2 == 1)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 152) * *(unsigned __int16 *)(a1 + 8);
    if (v6 >> 3 >= 0x271 && !_VCAudioIssueDetectorUtil_IsReportingQueueFull(*(opaqueCMSimpleQueue **)(a1 + 17968)))
    {
      int v7 = *(unsigned __int16 *)(a1 + 720);
      *(_WORD *)(a1 + 720) = v7 + 1;
      double v8 = (unsigned int *)(a1
                          + 560
                          * (unsigned __int16)(v7
                                             - 25
                                             * ((((unsigned __int16)(v7 - ((18351 * v7) >> 16)) >> 1)
                                               + ((18351 * v7) >> 16)) >> 4)));
      if (*(_DWORD *)(a1 + 156)) {
        int v9 = 3;
      }
      else {
        int v9 = 2;
      }
      v8[181] = v9;
      v8[182] = *(_DWORD *)(a1 + 4) * *(unsigned __int16 *)(a1 + 8) - v6;
      v8[183] = v6;
      _VCAudioIssueDetectorUtil_EnqueueDistortion(a1, v8 + 181);
    }
    *(_DWORD *)(a1 + 152) = 0;
  }
  else if (!v2)
  {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 8) * *(unsigned __int16 *)(a1 + 152);
    if (v3 >> 3 >= 0x271 && !_VCAudioIssueDetectorUtil_IsReportingQueueFull(*(opaqueCMSimpleQueue **)(a1 + 17968)))
    {
      int v4 = *(unsigned __int16 *)(a1 + 720);
      *(_WORD *)(a1 + 720) = v4 + 1;
      CFAllocatorRef v5 = (unsigned int *)(a1
                          + 560
                          * (unsigned __int16)(v4
                                             - 25
                                             * ((((unsigned __int16)(v4 - ((18351 * v4) >> 16)) >> 1)
                                               + ((18351 * v4) >> 16)) >> 4)));
      v5[181] = 4;
      v5[182] = *(_DWORD *)(a1 + 4) * *(unsigned __int16 *)(a1 + 8) - v3;
      v5[183] = v3;
      _VCAudioIssueDetectorUtil_EnqueueDistortion(a1, v5 + 181);
    }
    *(_WORD *)(a1 + 152) = 0;
  }
}

void _VCAudioIssueDetectorUtil_FlushRmsStats(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 108) >= 0x1389u)
  {
    if (*(_DWORD *)(a1 + 17976)) {
      int v2 = 8;
    }
    else {
      int v2 = 7;
    }
    _VCAudioIssueDetectorUtil_ReportEnergybreach(a1, v2, a1 + 64, *(float *)(a1 + 76));
  }
  if (*(_DWORD *)(a1 + 60) >= 0x1389u)
  {
    if (*(_DWORD *)(a1 + 17976)) {
      int v3 = 10;
    }
    else {
      int v3 = 9;
    }
    _VCAudioIssueDetectorUtil_ReportEnergybreach(a1, v3, a1 + 16, *(float *)(a1 + 28));
  }
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 60) = 0;
}

uint64_t _VCAudioIssueDetectorUtil_UpdateRmsSegmentStats(uint64_t result, float a2)
{
  float v2 = *(float *)(result + 12);
  int v3 = *(_DWORD *)(result + 24);
  uint64_t v4 = (v3 + 1);
  *(_DWORD *)(result + 24) = v4;
  if (v3)
  {
    uint64_t v5 = *(unsigned __int16 *)(result + 32);
  }
  else
  {
    if (*(_DWORD *)(result + 28) < 5u)
    {
      *(_WORD *)(result + 32) = 2;
      return result;
    }
    uint64_t v5 = 1;
    *(_WORD *)(result + 32) = 1;
  }
  *(float *)(result + 12) = (float)(a2 + (float)(v2 * (float)(v4 - v5))) / (float)(v4 - v5 + 1);
  if (*(float *)(result + 16) < a2) {
    *(float *)(result + 16) = a2;
  }
  if (*(float *)(result + 20) > a2) {
    *(float *)(result + 20) = a2;
  }
  return result;
}

void _VCAudioIssueDetectorUtil_RmsMonitorThresholdSpeech(uint64_t a1, float a2)
{
  unint64_t v2 = *(void *)(a1 + 128) / (unint64_t)*(unsigned __int16 *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 100);
  int v4 = *(unsigned __int16 *)(a1 + 8);
  int v5 = v4 * v2;
  BOOL v7 = a2 >= -55.0 && v3 == 1;
  if (v3) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = a2 < -55.0;
  }
  if (v8 || v7)
  {
    _VCAudioIssueDetectorUtil_HandleBreachTransition(a1, (_DWORD *)(a1 + 64), (*(_DWORD *)(a1 + 4) - v2) * v4, v5, v3, 1, a2);
  }
  else if (a2 < -55.0 && v3 == 1)
  {
    *(_DWORD *)(a1 + 108) += v5;
  }
}

void _VCAudioIssueDetectorUtil_HandleBreachTransition(uint64_t a1, _DWORD *a2, int a3, int a4, int a5, int a6, float a7)
{
  if (a5 == 1)
  {
    if (a2[11] >= 0x1389u)
    {
      if (!a2[10]) {
        a2[10] = a3;
      }
      if (a6)
      {
        if (*(_DWORD *)(a1 + 17976)) {
          int v8 = 8;
        }
        else {
          int v8 = 7;
        }
        uint64_t v9 = a1 + 64;
      }
      else
      {
        if (*(_DWORD *)(a1 + 17976)) {
          int v8 = 10;
        }
        else {
          int v8 = 9;
        }
        uint64_t v9 = a1 + 16;
      }
      _VCAudioIssueDetectorUtil_ReportEnergybreach(a1, v8, v9, a7);
    }
    *((void *)a2 + 5) = 0;
    a2[9] = 0;
  }
  else if (!a5)
  {
    a2[9] = 1;
    a2[10] = a3;
    a2[11] += a4;
  }
}

void _VCAudioIssueDetectorUtil_ReportEnergybreach(uint64_t a1, int a2, uint64_t a3, float a4)
{
  if (!_VCAudioIssueDetectorUtil_IsReportingQueueFull(*(opaqueCMSimpleQueue **)(a1 + 17968)))
  {
    int v8 = *(unsigned __int16 *)(a1 + 720);
    *(_WORD *)(a1 + 720) = v8 + 1;
    uint64_t v9 = a1
       + 560
       * (unsigned __int16)(v8
                          - 25
                          * ((((unsigned __int16)(v8 - ((18351 * v8) >> 16)) >> 1)
                            + ((18351 * v8) >> 16)) >> 4));
    *(_DWORD *)(v9 + 724) = a2;
    *(void *)(v9 + 728) = *(void *)(a3 + 40);
    *(_DWORD *)(v9 + 736) = llroundf(a4);
    _VCAudioIssueDetectorUtil_EnqueueDistortion(a1, (unsigned int *)(v9 + 724));
  }
}

void _VCAudioIssueDetectorUtil_RmsMonitorSilenceThreshold(uint64_t a1, float a2)
{
  unint64_t v2 = *(void *)(a1 + 128) / (unint64_t)*(unsigned __int16 *)(a1 + 136);
  int v3 = *(_DWORD *)(a1 + 52);
  int v4 = *(unsigned __int16 *)(a1 + 8);
  int v5 = v4 * v2;
  BOOL v7 = a2 < -65.0 && v3 == 1;
  if (v3) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = a2 < -65.0;
  }
  if (!v8 || v7)
  {
    _VCAudioIssueDetectorUtil_HandleBreachTransition(a1, (_DWORD *)(a1 + 16), (*(_DWORD *)(a1 + 4) - v2) * v4, v5, v3, 0, a2);
  }
  else if (a2 > -65.0 && v3 == 1)
  {
    *(_DWORD *)(a1 + 60) += v5;
  }
}

void _VCAudioIssueDetectorUtil_MonitorContinuousSpeechDistortion(int32x2_t *a1, int a2)
{
  if (a1[2247].i32[0] == 1)
  {
    if (a1->i32[0] == 3 && ((a1[19] = 0, ++a1[21].i32[0], a2 == 4) || a2 == 1))
    {
      a1[20] = vadd_s32(a1[20], (int32x2_t)0x100000001);
    }
    else
    {
      unint64_t v2 = a1 + 20;
      if (a1[20].i32[0] >= 3u) {
        _VCAudioIssueDetectorUtil_LogDistortion((uint64_t)a1, &a1[20], &a1[20], 0);
      }
      v2->i32[0] = 0;
    }
  }
}

void _VCAudioIssueDetectorUtil_MonitorAverageSpeechDistortion(_DWORD *a1)
{
  if (a1[4494] == 1)
  {
    unsigned int v1 = a1[42];
    if (v1)
    {
      unint64_t v2 = a1 + 41;
      if (100 * a1[41] / v1 >= 0xA) {
        _VCAudioIssueDetectorUtil_LogDistortion((uint64_t)a1, a1 + 42, a1 + 41, 1u);
      }
      *unint64_t v2 = 0;
    }
  }
}

void _VCAudioIssueDetectorUtil_LogDistortion(uint64_t a1, _DWORD *a2, _DWORD *a3, unsigned int a4)
{
  if (!_VCAudioIssueDetectorUtil_IsReportingQueueFull(*(opaqueCMSimpleQueue **)(a1 + 17968)))
  {
    int v8 = *(unsigned __int16 *)(a1 + 720);
    *(_WORD *)(a1 + 720) = v8 + 1;
    uint64_t v9 = (unsigned int *)(a1
                        + 560
                        * (unsigned __int16)(v8
                                           - 25
                                           * ((((unsigned __int16)(v8 - ((18351 * v8) >> 16)) >> 1)
                                             + ((18351 * v8) >> 16)) >> 4)));
    v9[181] = a4;
    int v10 = *(unsigned __int16 *)(a1 + 8);
    v9[182] = (*(_DWORD *)(a1 + 4) - *a2) * v10;
    v9[183] = *a3 * v10;
    _VCAudioIssueDetectorUtil_EnqueueDistortion(a1, v9 + 181);
    *a3 = 0;
    *a2 = 0;
  }
}

uint64_t _VCAudioIssueDetectorUtil_CompareBitRateCount(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 8) - *(_DWORD *)(a1 + 8));
}

void OUTLINED_FUNCTION_10_4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t VideoTransmitter_CloseSummerHandles(uint64_t result)
{
  if (*(_DWORD *)(result + 1600))
  {
    uint64_t v1 = result;
    unint64_t v2 = 0;
    int v3 = (uint64_t *)(result + 560);
    do
    {
      if (*(v3 - 4) != 0xFFFFFFFFLL) {
        SummerCloseHandle();
      }
      if (*(v3 - 3) != 0xFFFFFFFFLL) {
        SummerCloseHandle();
      }
      if (*(v3 - 2) != 0xFFFFFFFFLL) {
        SummerCloseHandle();
      }
      if (*(v3 - 1) != 0xFFFFFFFFLL) {
        SummerCloseHandle();
      }
      uint64_t result = *v3;
      if (*v3 != 0xFFFFFFFFLL) {
        uint64_t result = SummerCloseHandle();
      }
      ++v2;
      v3 += 15;
    }
    while (v2 < *(unsigned int *)(v1 + 1600));
  }
  return result;
}

void VideoTransmitter_CleanupSframeCryptors(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1600))
  {
    unint64_t v2 = 0;
    int v3 = (CFTypeRef **)(a1 + 632);
    do
    {
      VCSFrameCryptorH264_Destroy(v3);
      ++v2;
      v3 += 15;
    }
    while (v2 < *(unsigned int *)(a1 + 1600));
  }
  int v4 = *(const void **)(a1 + 18200);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 18200) = 0;
  }
  int v5 = *(const void **)(a1 + 18192);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 18192) = 0;
  }
}

uint64_t VideoTransmitter_SetupSFrameCryptors(uint64_t a1, _DWORD *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = 0;
  int v4 = a2 + 110;
  int v5 = (CFAllocatorRef *)(a1 + 18200);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  BOOL v7 = (CFAllocatorRef *)(a1 + 18192);
  int v8 = (CFAllocatorRef **)(a1 + 632);
  for (uint64_t i = 8; ; i += 8)
  {
    int v10 = *(const void **)&a2[i];
    if (!v10) {
      goto LABEL_10;
    }
    if (*v4 != 123) {
      break;
    }
    uint64_t v11 = VCSFrameCryptorH264_Create(v10, v8);
    if (v11)
    {
      uint64_t v12 = v11;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoTransmitter_SetupSFrameCryptors_cold_3();
        }
      }
      return v12;
    }
    if (!*v5
      && VCAllocatorFirstCome_Create(v6, (uint64_t)"VideoTransmitterEncryptedBufferHeaderAllocator", v5))
    {
      uint64_t v12 = 2149449731;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoTransmitter_SetupSFrameCryptors_cold_2();
        }
      }
      return v12;
    }
    if (!*v7)
    {
      v14[0] = 0x2000;
      if (VCAllocatorMultiQueue_Create(v6, (uint64_t)"VideoTransmitterEncryptedBufferDataAllocator", 1u, v14, v7))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoTransmitter_SetupSFrameCryptors_cold_1();
          }
        }
        return 2149449731;
      }
    }
LABEL_10:
    ++v3;
    v8 += 15;
    if (v3 >= *a2) {
      return 0;
    }
  }
  uint64_t v12 = 2149515265;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoTransmitter_SetupSFrameCryptors_cold_4();
    }
  }
  return v12;
}

uint64_t VideoTransmitter_CreateHandle(uint64_t *a1, unsigned int *a2)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  int v4 = (char *)malloc_type_calloc(1uLL, 0x4788uLL, 0x10F004090508692uLL);
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_2();
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 2149449731;
    }
    VRTraceErrorLogLevelToCSTR();
    uint64_t v135 = 2149449731;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoTransmitter_CreateHandle_cold_1();
    }
    return v135;
  }
  uint64_t v5 = (uint64_t)v4;
  LODWORD(v6) = *a2;
  if (*a2 >= 0xA)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    {
      uint64_t v135 = 2149515265;
    }
    else
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t v135 = 2149515265;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_3();
      }
    }
    goto LABEL_216;
  }
  BOOL v7 = v4 + 16760;
  v4[18208] = 0;
  int v8 = (uint64_t *)MEMORY[0x1E4F1CF80];
  if (*((unsigned char *)a2 + 617))
  {
    uint64_t v9 = VCNACKConsumer_Create(*MEMORY[0x1E4F1CF80], (uint64_t *)v4 + 2284);
    *(unsigned char *)(v5 + 18186) = 1;
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v135 = v9;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoTransmitter_CreateHandle_cold_28();
        }
      }
      goto LABEL_216;
    }
    LODWORD(v6) = *a2;
  }
  if (v6)
  {
    uint64_t v6 = v6;
    int v10 = (void *)(v5 + 560);
    *(void *)&long long v11 = 0xFFFFFFFFLL;
    *((void *)&v11 + 1) = 0xFFFFFFFFLL;
    do
    {
      *((_OWORD *)v10 - 2) = v11;
      *((_OWORD *)v10 - 1) = v11;
      *int v10 = 0xFFFFFFFFLL;
      v10 += 15;
      --v6;
    }
    while (v6);
    unint64_t v12 = 0;
    CFNumberRef v13 = a2 + 4;
    uint64_t v14 = v5;
    while (1)
    {
      uint64_t v15 = *((void *)v13 - 1);
      *(void *)(v14 + 520) = v15;
      *(_WORD *)(v14 + 600) = *(_WORD *)v13;
      uint64_t v16 = RTPGetLocalSSRC(v15, (_DWORD *)(v14 + 576));
      if ((v16 & 0x80000000) != 0) {
        break;
      }
      uint64_t v17 = *(void *)(v5 + 18272);
      if (v17)
      {
        unint64_t v18 = RTPTransport_SetNACKConsumer(*((void *)v13 - 1), v17);
        if ((v18 & 0x80000000) != 0)
        {
          uint64_t v135 = v18;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VideoTransmitter_CreateHandle_cold_27();
            }
          }
          goto LABEL_216;
        }
      }
      uint64_t Handle = SummerCreateHandle((uint64_t *)(v14 + 528), 400);
      if ((Handle & 0x80000000) != 0)
      {
        uint64_t v135 = Handle;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoTransmitter_CreateHandle_cold_22();
          }
        }
        goto LABEL_216;
      }
      uint64_t v20 = SummerCreateHandle((uint64_t *)(v14 + 536), 400);
      if ((v20 & 0x80000000) != 0)
      {
        uint64_t v135 = v20;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoTransmitter_CreateHandle_cold_23();
          }
        }
        goto LABEL_216;
      }
      uint64_t v21 = SummerCreateHandle((uint64_t *)(v14 + 544), 400);
      if ((v21 & 0x80000000) != 0)
      {
        uint64_t v135 = v21;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoTransmitter_CreateHandle_cold_24();
          }
        }
        goto LABEL_216;
      }
      uint64_t v22 = SummerCreateHandle((uint64_t *)(v14 + 552), 400);
      if ((v22 & 0x80000000) != 0)
      {
        uint64_t v135 = v22;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoTransmitter_CreateHandle_cold_25();
          }
        }
        goto LABEL_216;
      }
      uint64_t v23 = SummerCreateHandle((uint64_t *)(v14 + 560), 400);
      if ((v23 & 0x80000000) != 0)
      {
        uint64_t v135 = v23;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoTransmitter_CreateHandle_cold_26();
          }
        }
        goto LABEL_216;
      }
      *(_DWORD *)(v14 + 628) = v13[2];
      ++v12;
      v13 += 8;
      v14 += 120;
      if (v12 >= *a2) {
        goto LABEL_19;
      }
    }
    uint64_t v135 = v16;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_21();
      }
    }
    goto LABEL_216;
  }
LABEL_19:
  if (VideoTransmitter_SetupSFrameCryptors(v5, a2))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    {
      uint64_t v135 = 2149449731;
    }
    else
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t v135 = 2149449731;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_20();
      }
    }
    goto LABEL_216;
  }
  unsigned int v24 = *a2;
  *(_DWORD *)(v5 + 1600) = *a2;
  *(void *)(v5 + 1608) = *((void *)a2 + 37);
  *(void *)(v5 + 1640) = *((void *)a2 + 68);
  unsigned int v25 = a2[134];
  if (v25 - 1 >= 9)
  {
    uint64_t v135 = 2149449729;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_19();
      }
    }
    goto LABEL_216;
  }
  *(_DWORD *)(v5 + 18088) = v25;
  int v26 = *((unsigned __int8 *)a2 + 568);
  *(unsigned char *)(v5 + 18104) = v26;
  if (v26 && v24 >= 2)
  {
    uint64_t v27 = 0;
    unsigned int v28 = v24 - 1;
    do
    {
      if (v24 == v27 + 1)
      {
        LOBYTE(v29) = 0;
        uint64_t v30 = v27 + 1;
      }
      else
      {
        unsigned int v29 = 0;
        uint64_t v30 = v27 + 1;
        int v31 = *(unsigned __int16 *)(v5 + 120 * v27 + 600);
        uint64_t v32 = v28;
        int v33 = v27 + 1;
        do
        {
          int v34 = LOWORD(a2[8 * v33 + 4]);
          if (v31 != v34) {
            *(_WORD *)(v5 + 120 * v27 + 2 * v29++ + 602) = v34;
          }
          ++v33;
          --v32;
        }
        while (v32);
      }
      *(unsigned char *)(v5 + 120 * v27 + 626) = v29;
      --v28;
      uint64_t v27 = v30;
    }
    while (v30 != v24 - 1);
  }
  *(_DWORD *)(v5 + 18108) = a2[143];
  *(void *)(v5 + 18112) = *((void *)a2 + 74);
  if (!a2[128])
  {
    uint64_t v135 = 2149449729;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_4();
      }
    }
    goto LABEL_216;
  }
  uint64_t v35 = *v8;
  if (VTU_CreatePacketAllocator(*((unsigned __int16 *)a2 + 248), *v8, (CFAllocatorRef *)(v5 + 18128)))
  {
    uint64_t v135 = 2149449729;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_18();
      }
    }
    goto LABEL_216;
  }
  *(unsigned char *)(v5 + 508) = VCDefaults_GetBoolValueForKey(@"rateControllAllowFECLowBitrate", 0);
  *(unsigned char *)(v5 + 18153) = VCDefaults_GetBoolValueForKey(@"forceDisableFEC", 0);
  *(_DWORD *)(v5 + 496) = a2[128];
  *(_DWORD *)(v5 + 500) = a2[146];
  *(_DWORD *)(v5 + 504) = a2[129];
  unsigned int v36 = a2[131];
  if (v36 >= 6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v38 = VRTraceErrorLogLevelToCSTR();
      uint64_t v39 = *MEMORY[0x1E4F47A50];
      BOOL v40 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      int v37 = 0;
      if (!v40) {
        goto LABEL_39;
      }
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_VCPEncoderUsageWithEncoderUsage";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1201;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v36;
      _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Invalid encoderUsage=%u", buf, 0x22u);
    }
    int v37 = 0;
    goto LABEL_39;
  }
  int v37 = dword_1E259EC68[v36];
LABEL_39:
  *(_DWORD *)(v5 + 17372) = v37;
  unsigned int v41 = a2[128];
  *(unsigned char *)(v5 + 18092) = (v41 == 5 || v41 == 3) && *(_DWORD *)(v5 + 18088) > 1;
  int v42 = (const void *)*((void *)a2 + 38);
  if (v42)
  {
    CFTypeRef v43 = CFRetain(v42);
    *(void *)(v5 + 1648) = v43;
    unsigned int v44 = a2[144];
    *(_DWORD *)(v5 + 18224) = v44;
    if (v44 && !v43) {
      goto LABEL_46;
    }
  }
  else
  {
    *(void *)(v5 + 1648) = 0;
    unsigned int v59 = a2[144];
    *(_DWORD *)(v5 + 18224) = v59;
    if (v59) {
LABEL_46:
    }
      *(void *)(v5 + 1648) = VCMediaControlInfoGeneratorCreateWithType(2);
  }
  CFTypeRef v45 = (CFTypeRef)*((void *)a2 + 41);
  if (v45) {
    CFTypeRef v45 = CFRetain(v45);
  }
  *(void *)(v5 + 1656) = v45;
  CFTypeRef v46 = (CFTypeRef)*((void *)a2 + 42);
  if (v46) {
    CFTypeRef v46 = CFRetain(v46);
  }
  *(void *)(v5 + 1664) = v46;
  uint32_t v47 = *(const void **)v5;
  uint64_t v48 = (const void *)*((void *)a2 + 39);
  *(void *)uint64_t v5 = v48;
  if (v48) {
    CFRetain(v48);
  }
  os_log_t v49 = (_WORD *)(v5 + 16498);
  if (v47) {
    CFRelease(v47);
  }
  *(_DWORD *)(v5 + 8) = VCReporting_GetDynamicReportingModuleID();
  reportingInheritModuleSpecificInfoFromParent();
  *(void *)&long long v50 = *((void *)a2 + 47);
  *(_DWORD *)(v5 + 44) = a2[96];
  *(_DWORD *)(v5 + 88) = a2[97];
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 98);
  *(void *)(v5 + 80) = *((void *)a2 + 51);
  *(_DWORD *)(v5 + 92) = 0;
  DWORD2(v50) = a2[104];
  HIDWORD(v50) = DWORD2(v50);
  *(_OWORD *)(v5 + 24) = v50;
  *(_DWORD *)(v5 + 40) = DWORD2(v50);
  *(_DWORD *)(v5 + 4380) = DWORD2(v50);
  *(void *)(v5 + 48) = *(void *)(a2 + 105);
  *(void *)(v5 + 4352) = *((void *)a2 + 54);
  double v51 = micro();
  *(_OWORD *)(v5 + 4360) = 0u;
  *(double *)(v5 + 4336) = v51;
  *(double *)(v5 + 4344) = v51;
  *(void *)(v5 + 56) = *((void *)a2 + 58);
  *(_DWORD *)(v5 + 18100) = a2[138];
  unsigned int v52 = a2[110];
  *(_DWORD *)(v5 + 16) = v52;
  BOOL v54 = v52 != 110 && (v52 & 0xFFFFFFFE) != 124;
  *(unsigned char *)(v5 + 18248) = v54;
  *(_DWORD *)(v5 + 17764) = a2[118];
  *(_DWORD *)(v5 + 96) = a2[88];
  *(_DWORD *)(v5 + 100) = a2[90];
  *(_DWORD *)(v5 + 4420) = *((unsigned __int8 *)a2 + 346);
  *(_DWORD *)(v5 + 4424) = *((unsigned __int8 *)a2 + 347);
  unsigned int Version = VCMediaControlInfoGeneratorGetVersion(*(void *)(v5 + 1648));
  int v56 = 0;
  if (Version >= 2) {
    int v56 = *((unsigned __int8 *)a2 + 540);
  }
  *(_DWORD *)(v5 + 4428) = v56;
  *(_DWORD *)(v5 + 4440) = a2[87];
  *(_DWORD *)(v5 + 4432) = 0;
  *(void *)(v5 + 16488) = 0;
  if (!*(_WORD *)(v5 + 16500))
  {
    do
    {
      int v57 = hwrandom16();
      *(_WORD *)(v5 + 16500) = v57;
    }
    while (!v57);
  }
  if (!*v49)
  {
    do
    {
      int v58 = hwrandom16();
      *os_log_t v49 = v58;
    }
    while (!v58);
  }
  *(unsigned char *)(v5 + 16508) = 1;
  *(unsigned char *)(v5 + 17464) = *((unsigned char *)a2 + 510);
  *(_WORD *)(v5 + 16825) = 256;
  if (*((void *)a2 + 61))
  {
    __strlcpy_chk();
  }
  else
  {
    unsigned int v60 = *(_DWORD *)(v5 + 16) - 110;
    if (v60 > 0xF || ((1 << v60) & 0xC001) == 0)
    {
      uint64_t v135 = 2149449729;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoTransmitter_CreateHandle_cold_5();
        }
      }
      goto LABEL_216;
    }
  }
  *(void *)(v5 + 4400) = *(void *)(a2 + 111);
  *(void *)(v5 + 16608) = 0;
  *(_DWORD *)(v5 + 16672) = a2[92];
  *(_OWORD *)(v5 + 16744) = xmmword_1E259EC40;
  *(_DWORD *)(v5 + 16976) = a2[89];
  *(_DWORD *)(v5 + 16980) = 0;
  *(_DWORD *)(v5 + 16988) = a2[93];
  *(unsigned char *)(v5 + 16992) = *((unsigned char *)a2 + 344);
  *(_DWORD *)(v5 + 1776) = 1;
  *(void *)(v5 + 16520) = 0;
  *(_DWORD *)(v5 + 17776) = 0;
  *(_DWORD *)(v5 + 16512) = 260;
  pthread_mutex_init((pthread_mutex_t *)(v5 + 17000), 0);
  *(void *)(v5 + 17064) = 0;
  *(_WORD *)(v5 + 17072) = 0;
  *(void *)(v5 + 17248) = 0;
  *(_OWORD *)(v5 + 17076) = 0u;
  *(void *)&long long v62 = *((void *)a2 + 47);
  *((void *)&v62 + 1) = v62;
  *(_OWORD *)(v5 + 17256) = v62;
  *(unsigned char *)(v5 + 18209) = *((unsigned char *)a2 + 541);
  *(_OWORD *)(v5 + 368) = xmmword_1E259EC50;
  *(_WORD *)(v5 + 16556) = -1;
  *(void *)(v5 + 416) = 0x7FEFFFFFFFFFFFFFLL;
  pthread_mutex_init((pthread_mutex_t *)(v5 + 17288), 0);
  *(_WORD *)(v5 + 17276) = *((_WORD *)a2 + 248);
  *(unsigned char *)(v5 + 17278) = *((unsigned char *)a2 + 345);
  *(_DWORD *)(v5 + 17280) = a2[126];
  *(_WORD *)(v5 + 17284) = *((_WORD *)a2 + 254);
  *(_DWORD *)(v5 + 18084) = 0;
  *(_WORD *)(v5 + 18094) = hwrandom16();
  CFTypeRef v63 = (CFTypeRef)*((void *)a2 + 70);
  if (v63) {
    CFTypeRef v63 = CFRetain(v63);
  }
  *(void *)(v5 + 18216) = v63;
  *(_DWORD *)(v5 + 18120) = a2[150];
  if ((int)VRTraceGetErrorLogLevelForModule() > 7)
  {
    uint64_t v64 = VRTraceErrorLogLevelToCSTR();
    int v65 = *MEMORY[0x1E4F47A50];
    int v66 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        int v67 = *(_DWORD *)(v5 + 17764);
        int v68 = *(_DWORD *)(v5 + 16);
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v64;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VideoTransmitter_CreateHandle";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1653;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v67;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&buf[36] = v68;
        _os_log_impl(&dword_1E1EA4000, v65, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d parameterSetSupport=%u iPayload=%d", buf, 0x28u);
      }
    }
    else if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      int v138 = *(_DWORD *)(v5 + 17764);
      int v139 = *(_DWORD *)(v5 + 16);
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v64;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VideoTransmitter_CreateHandle";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1653;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v138;
      *(_WORD *)&unsigned char buf[34] = 1024;
      *(_DWORD *)&buf[36] = v139;
      _os_log_debug_impl(&dword_1E1EA4000, v65, OS_LOG_TYPE_DEBUG, " [%s] %s:%d parameterSetSupport=%u iPayload=%d", buf, 0x28u);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v69 = VRTraceErrorLogLevelToCSTR();
    int v70 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v71 = *((unsigned __int16 *)a2 + 248);
      int v72 = *((unsigned __int8 *)a2 + 345);
      uint64_t v73 = "Y";
      if (!*((unsigned char *)a2 + 541)) {
        uint64_t v73 = "N";
      }
      *(_DWORD *)CMTime buf = 136316418;
      *(void *)&uint8_t buf[4] = v69;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VideoTransmitter_CreateHandle";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1654;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v71;
      *(_WORD *)&unsigned char buf[34] = 1024;
      *(_DWORD *)&buf[36] = v72;
      *(_WORD *)&uint8_t buf[40] = 2080;
      *(void *)&buf[42] = v73;
      _os_log_impl(&dword_1E1EA4000, v70, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_CreateHandle wMTU[%d] bIsIPv6[%d] reinitEnabled[%s]", buf, 0x32u);
    }
  }
  if (!*(_WORD *)(v5 + 17276))
  {
    __int16 v74 = *(unsigned char *)(v5 + 17278) ? 1280 : 1450;
    *(_WORD *)(v5 + 17276) = v74;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_17();
      }
    }
  }
  *(unsigned char *)(v5 + 17352) = VCDefaults_GetBoolValueForKey(@"disableDynamicMediaPacketHeaderCalculations", 0);
  int IsInternalOSInstalled = VRTraceIsInternalOSInstalled();
  __int16 IntValueForKey = 0;
  if (IsInternalOSInstalled) {
    __int16 IntValueForKey = VCDefaults_GetIntValueForKey(@"forceVideoTransmitterMTU", 0);
  }
  *(_WORD *)(v5 + 17354) = IntValueForKey;
  *(unsigned char *)(v5 + 16984) = 0;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"treatLTEAs4G", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat && AppBooleanValue && NetworkUtils_IsLTEOrNewer(a2[89])) {
    *(unsigned char *)(v5 + 16984) = 1;
  }
  if (*(_DWORD *)(v5 + 4420)) {
    RTPSetAFRCTxCap(*(void *)(v5 + 520), a2[104]);
  }
  int v78 = (_OWORD *)*((void *)a2 + 57);
  if (v78) {
    *(_OWORD *)(v5 + 16808) = *v78;
  }
  CFTypeRef v79 = (CFTypeRef)*((void *)a2 + 60);
  CFAllocatorRef v144 = (const __CFAllocator *)v35;
  if (v79) {
    CFTypeRef v79 = CFRetain(v79);
  }
  int v80 = a1;
  *(void *)(v5 + 16600) = v79;
  *(_DWORD *)(v5 + 16652) = -1;
  *(_DWORD *)(v5 + 16656) = a2[130];
  *(void *)(v5 + 16664) = *((void *)a2 + 66);
  if (*(unsigned char *)(v5 + 16984)) {
    unsigned int v81 = 0;
  }
  else {
    unsigned int v81 = a2[88];
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v82 = VRTraceErrorLogLevelToCSTR();
    int v83 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v84 = "NO";
      unsigned int v85 = a2[90];
      *(_DWORD *)CMTime buf = 136316162;
      if (v81) {
        int v86 = "YES";
      }
      else {
        int v86 = "NO";
      }
      *(void *)&uint8_t buf[4] = v82;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VideoTransmitter_CreateHandle";
      if (v85) {
        int v84 = "YES";
      }
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1697;
      *(_WORD *)&buf[28] = 2080;
      *(void *)&buf[30] = v86;
      *(_WORD *)&buf[38] = 2080;
      *(void *)&uint8_t buf[40] = v84;
      _os_log_impl(&dword_1E1EA4000, v83, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_CreateHandle: local uses cellular[%s], remote uses cellular[%s].", buf, 0x30u);
    }
  }
  uint64_t v87 = (void *)(v5 + 17364);
  *(void *)(v5 + 17364) = 0;
  unsigned int v88 = a2[110];
  if (v88 == 100) {
    int v89 = 1752589105;
  }
  else {
    int v89 = 1635148593;
  }
  *(_DWORD *)(v5 + 17468) = v89;
  CFStringRef v90 = (const __CFString *)CFPreferencesCopyAppValue(@"FaceTimeEncoder", @"com.apple.VideoConference");
  if (v90)
  {
    CFStringRef v91 = v90;
    CFComparisonResult v92 = CFStringCompare(v90, @"hw", 0);
    if (v88 == 100 || v92)
    {
      CFComparisonResult v98 = CFStringCompare(v91, @"sw", 0);
      if (v88 == 100 || v98) {
        goto LABEL_145;
      }
      *uint64_t v87 = 0x100000000;
      *(_DWORD *)(v5 + 16) = v88;
      BOOL v99 = v88 == 110 || (v88 & 0xFFFFFFFE) == 124;
      BOOL v100 = !v99;
      *(unsigned char *)(v5 + 18248) = v100;
      if ((int)VRTraceGetErrorLogLevelForModule() < 6) {
        goto LABEL_145;
      }
      uint64_t v101 = VRTraceErrorLogLevelToCSTR();
      uint64_t v96 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_145;
      }
      *(_DWORD *)CMTime buf = 136315650;
      *(void *)&uint8_t buf[4] = v101;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_ForceEncoderType";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1047;
      __int16 v97 = " [%s] %s:%d 'com.apple.VideoConference FaceTimeEncoder sw' forcing software h.264 encode";
    }
    else
    {
      *uint64_t v87 = 0x100000001;
      *(_DWORD *)(v5 + 16) = v88;
      BOOL v94 = v88 != 110 && (v88 & 0xFFFFFFFE) != 124;
      *(unsigned char *)(v5 + 18248) = v94;
      if ((int)VRTraceGetErrorLogLevelForModule() < 6) {
        goto LABEL_145;
      }
      uint64_t v95 = VRTraceErrorLogLevelToCSTR();
      uint64_t v96 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_145;
      }
      *(_DWORD *)CMTime buf = 136315650;
      *(void *)&uint8_t buf[4] = v95;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_ForceEncoderType";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1042;
      __int16 v97 = " [%s] %s:%d 'com.apple.VideoConference FaceTimeEncoder hw' forcing hardware h.264 encode";
    }
    _os_log_impl(&dword_1E1EA4000, v96, OS_LOG_TYPE_DEFAULT, v97, buf, 0x1Cu);
LABEL_145:
    CFRelease(v91);
  }
  *(unsigned char *)(v5 + 18248) = ((*(_DWORD *)(v5 + 16) - 110) > 0xF) | (0x3FFEu >> (*(unsigned char *)(v5 + 16) - 110)) & 1;
  *(_DWORD *)(v5 + 16648) = VCDefaults_GetIntValueForKey(@"forcePacketExpirationTime", 0xFFFFFFFFLL);
  uint64_t v102 = CreateHandle();
  if (v102 == 0xFFFFFFFFLL)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    {
      uint64_t v135 = 2149449733;
    }
    else
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t v135 = 2149449733;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_6();
      }
    }
LABEL_216:
    uint64_t v103 = 0xFFFFFFFFLL;
    goto LABEL_217;
  }
  uint64_t v103 = v102;
  *(void *)(v5 + 512) = v102;
  *(unsigned char *)(v5 + 18187) = *((unsigned char *)a2 + 618);
  if (*(_DWORD *)(v5 + 17368)) {
    int v104 = (_DWORD *)(v5 + 17364);
  }
  else {
    int v104 = (_DWORD *)(v5 + 16620);
  }
  if ((_VideoTransmitter_CreateEncoder(v5, a2[94], a2[95], v5 + 104, *v104 != 0, a2[90] | (v81 != 0)) & 0x80000000) != 0)
  {
    uint64_t v135 = 2149449730;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v140 = VRTraceErrorLogLevelToCSTR();
      double v141 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        unsigned int v142 = a2[94];
        unsigned int v143 = a2[95];
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v140;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VideoTransmitter_CreateHandle";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1715;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v142;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&buf[36] = v143;
        *(_WORD *)&uint8_t buf[40] = 1024;
        uint64_t v135 = 2149449730;
        *(_DWORD *)&buf[42] = -2145517566;
        _os_log_error_impl(&dword_1E1EA4000, v141, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter_CreateHandle: EncCreateHandle FAILED %dx%d result: %d", buf, 0x2Eu);
      }
    }
    goto LABEL_217;
  }
  __int16 v105 = (dispatch_queue_t *)(v5 + 17720);
  if ((RTPCopyPreferredSendQueue(*(void *)(v5 + 520), (void *)(v5 + 17720)) & 0x80000000) != 0
    && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoTransmitter_CreateHandle_cold_16();
    }
  }
  int v106 = v80;
  if (!*v105)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v107 = VRTraceErrorLogLevelToCSTR();
      int v108 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        *(void *)&uint8_t buf[4] = v107;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_SetupTransmitQueue";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1181;
        _os_log_impl(&dword_1E1EA4000, v108, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Preferred transmit queue not set, creating default queue", buf, 0x1Cu);
      }
    }
    CustomRootQueue = VCDispatchQueue_GetCustomRootQueue(56);
    *__int16 v105 = dispatch_queue_create_with_target_V2("com.apple.VideoConference.videoTransmit", 0, CustomRootQueue);
  }
  if (*(_DWORD *)(v5 + 88) == 2016686640) {
    unsigned int v110 = 3;
  }
  else {
    unsigned int v110 = 1;
  }
  if ((VCSimpleQueueCreate(v110, (void *)(v5 + 17504)) & 0x80000000) != 0
    && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoTransmitter_CreateHandle_cold_15();
    }
  }
  dispatch_semaphore_t v111 = dispatch_semaphore_create(0);
  *(void *)(v5 + 17496) = v111;
  if (!v111 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoTransmitter_CreateHandle_cold_14();
    }
  }
  *(unsigned char *)(v5 + 17488) = 0;
  *(unsigned char *)(v5 + 17760) = 0;
  pthread_rwlock_init((pthread_rwlock_t *)(v5 + 17520), 0);
  uint64_t v112 = VCRealTimeThread_Initialize(18, (uint64_t)VideoTransmitter_EncoderProc, v5, "com.apple.avconference.videotransmitter.encoderproc", 2);
  *(void *)(v5 + 17480) = v112;
  if (v112)
  {
    int v113 = VCRealTimeThread_Start(v112);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v114 = VRTraceErrorLogLevelToCSTR();
      __int16 v115 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v116 = "FAILED";
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v114;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_SetupEncoderThreadAndPool";
        if (v113) {
          int v116 = "SUCCEEDED";
        }
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 945;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v116;
        _os_log_impl(&dword_1E1EA4000, v115, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCRealTimeThread_Start for video encoder %s", buf, 0x26u);
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_13();
      }
    }
    VCRealTimeThread_Finalize(*(void *)(v5 + 17480));
  }
  *(void *)(v5 + 17728) = VCMemoryPool_Create(0x1C8uLL);
  *(void *)(v5 + 17736) = VCMemoryPool_Create(4uLL);
  *(void *)(v5 + 17744) = VCMemoryPool_Create(0x38uLL);
  CMSimpleQueueCreate(v144, 10, (CMSimpleQueueRef *)(v5 + 17752));
  if ((VCSimpleQueueSetElementEvictedCallback(*(void *)(v5 + 17504), (uint64_t)_VideoTransmitter_BufferEvictedCallback, *(void *)(v5 + 17744)) & 0x80000000) != 0&& (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoTransmitter_CreateHandle_cold_12();
    }
  }
  if ((VCSimpleQueueSetWillDestroyElementCallback(*(void *)(v5 + 17504), (uint64_t)_VideoTransmitter_BufferEvictedCallback, *(void *)(v5 + 17744)) & 0x80000000) != 0&& (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoTransmitter_CreateHandle_cold_11();
    }
  }
  pthread_mutex_init((pthread_mutex_t *)(v5 + 1680), 0);
  pthread_mutex_init((pthread_mutex_t *)(v5 + 2992), 0);
  pthread_mutex_init((pthread_mutex_t *)(v5 + 4272), 0);
  pthread_mutex_init((pthread_mutex_t *)(v5 + 16832), 0);
  pthread_mutex_init((pthread_mutex_t *)(v5 + 16912), 0);
  *(_WORD *)(v5 + 17356) = 257;
  *(_DWORD *)(v5 + 17360) = 0;
  *(unsigned char *)(v5 + 18264) = 1;
  *(void *)CMTime buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = ___VideoTransmitter_ReportingRegisterPeriodicTask_block_invoke;
  *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_218;
  *(void *)&buf[32] = v103;
  reportingRegisterPeriodicTask();
  *BOOL v7 = a2[125];
  *(unsigned char *)(v5 + 16764) = 0;
  *(unsigned char *)(v5 + 16776) = 0;
  *(void *)(v5 + 16768) = 0;
  *(void *)(v5 + 16784) = 0;
  if (VRTraceIsInternalOSInstalled())
  {
    *(unsigned char *)(v5 + 16764) = CFPreferencesGetAppBooleanValue(@"enableTransmitterPacketDump", @"com.apple.VideoConference", 0) != 0;
    *(unsigned char *)(v5 + 16776) = CFPreferencesGetAppBooleanValue(@"enableTransmitterFrameDump", @"com.apple.VideoConference", 0) != 0;
    *(unsigned char *)(v5 + 18289) = CFPreferencesGetAppBooleanValue(@"enableTransmitterTestVerification", @"com.apple.VideoConference", 0) != 0;
  }
  if (*(unsigned char *)(v5 + 16764))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v117 = VRTraceErrorLogLevelToCSTR();
      int v118 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        *(void *)&uint8_t buf[4] = v117;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_SetupLogFiles";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 902;
        _os_log_impl(&dword_1E1EA4000, v118, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoConferenceTransmitter: Found enableTransmitterPacketDump YES. Log outgoing video packets into AFRC folder", buf, 0x1Cu);
      }
    }
    memset(buf, 170, 12);
    __sprintf_chk(buf, 0, 0xCuLL, "%010u", *v7);
    __int16 v119 = openLogDump(0, (uint64_t)buf, 1, (uint64_t)"out_pkt", (uint64_t)".txt", 0);
    *(void *)(v5 + 16768) = v119;
    if (!v119 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_10();
      }
    }
  }
  if (*(unsigned char *)(v5 + 16776))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v120 = VRTraceErrorLogLevelToCSTR();
      __int16 v121 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        *(void *)&uint8_t buf[4] = v120;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_SetupLogFiles";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 912;
        _os_log_impl(&dword_1E1EA4000, v121, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoConferenceTransmitter: Found enableTransmitterFrameDump YES. Log outgoing video frames into AFRC folder", buf, 0x1Cu);
      }
    }
    memset(buf, 170, 12);
    __sprintf_chk(buf, 0, 0xCuLL, "%010u", *v7);
    int v122 = openLogDump(0, (uint64_t)buf, 1, (uint64_t)"out_frame", (uint64_t)".txt", 0);
    *(void *)(v5 + 16784) = v122;
    if (!v122 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_9();
      }
    }
  }
  if (VCDefaults_GetBoolValueForKey(@"enableVideoCaptureStatistics", 0))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v123 = VRTraceErrorLogLevelToCSTR();
      int v124 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v123;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_SetupLogFiles";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 922;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v5;
        _os_log_impl(&dword_1E1EA4000, v124, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter[%p]: Found enableVideoCaptureStatistics YES. Log outgoing video frames statistics", buf, 0x26u);
      }
    }
    *(void *)&long long v125 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v125 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v150 = v125;
    long long v151 = v125;
    long long v148 = v125;
    long long v149 = v125;
    *(_OWORD *)&buf[32] = v125;
    *(_OWORD *)&buf[48] = v125;
    *(_OWORD *)CMTime buf = v125;
    *(_OWORD *)&buf[16] = v125;
    snprintf(buf, 0x80uLL, "videotransmitter-%p_%dx%d", (const void *)v5, *(_DWORD *)(v5 + 24), *(_DWORD *)(v5 + 28));
    int v126 = openLogDump(0, (uint64_t)buf, 0, (uint64_t)"statistics", (uint64_t)".log", 0);
    *(void *)(v5 + 16800) = v126;
    if (v126)
    {
      fputs("System Timestamp\tHost Time\tAudio TimeStamp\tAudio HostTime\tTimestamp\n", v126);
      *(unsigned char *)(v5 + 16792) = 1;
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_CreateHandle_cold_8();
      }
    }
  }
  if (*(_DWORD *)(v5 + 496) == 1)
  {
    __int16 v127 = *(void **)(v5 + 1664);
    v146[0] = MEMORY[0x1E4F143A8];
    v146[1] = 0x40000000;
    v146[2] = ___VideoTransmitter_RegisterStatistics_block_invoke;
    v146[3] = &__block_descriptor_tmp_253;
    v146[4] = v5;
    *(_DWORD *)(v5 + 18080) = VCRateControlRegisterStatisticsChangeHandler(v127, 3, (uint64_t)v146);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v128 = VRTraceErrorLogLevelToCSTR();
      __int16 v129 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v130 = *(void *)(v5 + 1664);
        int v131 = *(_DWORD *)(v5 + 18080);
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v128;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_RegisterStatistics";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1246;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v5;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&uint8_t buf[40] = v130;
        *(_WORD *)&buf[48] = 1024;
        *(_DWORD *)&buf[50] = v131;
        _os_log_impl(&dword_1E1EA4000, v129, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d videoTransmitter[%p] Registered statisticsCollector[%p] with index=%d", buf, 0x36u);
      }
    }
  }
  int v132 = CMMemoryPoolCreate(0);
  *(void *)(v5 + 18144) = v132;
  CFAllocatorRef Allocator = CMMemoryPoolGetAllocator(v132);
  *(void *)(v5 + 18136) = Allocator;
  CFRetain(Allocator);
  *(_DWORD *)(v5 + 12) = reportingDefaultRealtimePeriod();
  *(unsigned char *)(v5 + 18184) = *((unsigned char *)a2 + 580);
  *(unsigned char *)(v5 + 18152) = *((unsigned char *)a2 + 542);
  *(_WORD *)(v5 + 18185) = *((_WORD *)a2 + 308);
  FECFeedbackunsigned int Version = VCMediaControlInfoGeneratorGetFECFeedbackVersion(*(void *)(v5 + 1648));
  *(_DWORD *)(v5 + 18252) = a2[151];
  VCAllocatorFirstCome_Create(v144, (uint64_t)"VideoTransmitterBufferDataAllocator", (CFAllocatorRef *)(v5 + 18168));
  VCAllocatorFirstCome_Create(v144, (uint64_t)"VideoTransmitterBufferHeaderAllocator", (CFAllocatorRef *)(v5 + 18176));
  VCAllocatorFirstCome_Create(v144, (uint64_t)"VideoTransmitterNumberPropertyAllocator", (CFAllocatorRef *)(v5 + 18304));
  uint64_t v135 = VCFECGenerator_Create((uint64_t)v144, (uint64_t *)(v5 + 18160), *(_DWORD *)(v5 + 4428), FECFeedbackVersion, *(const void **)(v5 + 18176), *(const void **)(v5 + 18168), *(const void **)v5);
  if ((v135 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoTransmitter_CreateHandle_cold_7();
    }
  }
  CFTypeRef v136 = (CFTypeRef)*((void *)a2 + 76);
  if (v136) {
    CFTypeRef v136 = CFRetain(v136);
  }
  *(void *)(v5 + 18296) = v136;
  *(double *)(v5 + 18240) = micro();
  *int v106 = v103;
  if (v135) {
LABEL_217:
  }
    _VideoTransmitter_CleanUp(v5, v103);
  return v135;
}

uint64_t _VideoTransmitter_CreateEncoder(uint64_t a1, int a2, int a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1 + 16524;
  if (*(unsigned char *)(a1 + 18092))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      uint64_t v14 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(unsigned __int16 *)(v12 + 1572);
        int v16 = *(unsigned __int16 *)(v12 + 1570);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v50 = v13;
        *(_WORD *)double v51 = 2080;
        *(void *)&v51[2] = "_VideoTransmitter_CreateEncoder";
        *(_WORD *)&v51[10] = 1024;
        *(_DWORD *)&v51[12] = 1112;
        *(_WORD *)&v51[16] = 1024;
        *(_DWORD *)&v51[18] = v15;
        *(_WORD *)&v51[22] = 1024;
        *(_DWORD *)unsigned int v52 = v16;
        *(_WORD *)&v52[4] = 1024;
        *(_DWORD *)&v52[6] = v16 + v15;
        _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Encoder is being created. Resetting expectedDecodingOrder(%d) to 0. Setting decodingOrderBase(%d) to %d", buf, 0x2Eu);
      }
    }
    *(_WORD *)(v12 + 1570) += *(_WORD *)(v12 + 1572);
    *(_WORD *)(v12 + 1572) = 0;
  }
  long long v60 = 0u;
  memset(v59, 0, sizeof(v59));
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  *(_OWORD *)&v52[4] = 0u;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v17 = VRTraceErrorLogLevelToCSTR();
    unint64_t v18 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = FourccToCStr(*(_DWORD *)(v12 + 944));
      uint64_t v20 = *(void *)(a1 + 512);
      *(_DWORD *)int v37 = 136316930;
      *(void *)&v37[4] = v17;
      *(_WORD *)&v37[12] = 2080;
      *(void *)&v37[14] = "_VideoTransmitter_CreateEncoder";
      *(_WORD *)&v37[22] = 1024;
      int v38 = 1117;
      __int16 v39 = 2048;
      uint64_t v40 = a1;
      __int16 v41 = 1024;
      int v42 = a3;
      __int16 v43 = 1024;
      int v44 = a2;
      __int16 v45 = 2080;
      CFTypeRef v46 = v19;
      __int16 v47 = 1024;
      int v48 = v20;
      _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Create encoder=%p height=%d, width=%d, codec=%s, videoTransmitterHandle=0x%x", v37, 0x42u);
    }
  }
  *(_DWORD *)CMTime buf = a2;
  LODWORD(v50) = a3;
  DWORD2(v57) = *(_DWORD *)(a1 + 88);
  *(_DWORD *)double v51 = *(_DWORD *)(v12 + 944);
  uint64_t v21 = *(void *)(a1 + 56);
  *(void *)&long long v22 = v21;
  *((void *)&v22 + 1) = HIDWORD(v21);
  *(_OWORD *)&v51[4] = v22;
  *(_DWORD *)&v51[20] = *(_DWORD *)(a1 + 32);
  *(void *)unsigned int v52 = *(void *)(a1 + 44);
  *(void *)&v52[12] = *(void *)(a1 + 16600);
  *(void *)&long long v53 = a4;
  DWORD2(v53) = a5;
  BYTE12(v53) = *(_DWORD *)(v12 + 292) != 0;
  *(void *)&long long v54 = __PAIR64__(*(_DWORD *)v12, a6);
  DWORD2(v54) = *(_DWORD *)(v12 + 756);
  BYTE12(v54) = *(unsigned char *)(v12 + 760);
  int v23 = *(_DWORD *)(v12 + 1560);
  LODWORD(v55) = *(_DWORD *)(v12 + 848);
  DWORD1(v55) = v23;
  uint64_t v24 = *(void *)(a1 + 512);
  *((void *)&v55 + 1) = _VideoTransmitter_DispatchEncoderCallback;
  *((void *)&v56 + 1) = v24;
  int v25 = *(_DWORD *)(v12 + 1564);
  LODWORD(v57) = *(_DWORD *)(v12 + 132);
  DWORD1(v57) = v25;
  HIDWORD(v50) = *(_DWORD *)(a1 + 52);
  WORD6(v57) = *(_WORD *)(v12 + 1570);
  *(void *)&long long v58 = *(void *)(a1 + 18216);
  DWORD1(v60) = *(_DWORD *)(v12 + 1596);
  BYTE8(v58) = *(unsigned char *)(v12 + 1580);
  uint64_t v26 = *(unsigned int *)(v12 + 1584);
  uint64_t v27 = *(unsigned int *)(a1 + 1600);
  LODWORD(v60) = *(_DWORD *)(v12 + 1584);
  HIDWORD(v58) = v27;
  BYTE8(v60) = *(unsigned char *)(v12 + 1663);
  if (v27)
  {
    unsigned int v28 = (int *)(a1 + 628);
    unsigned int v29 = v59;
    uint64_t v30 = v27;
    do
    {
      int v31 = *v28;
      v28 += 30;
      *v29++ = v31;
      --v30;
    }
    while (v30);
  }
  if (v27 < v26)
  {
    int v32 = *(_DWORD *)(a1 + 120 * (v27 - 1) + 628);
    int v33 = &v59[v27];
    uint64_t v34 = v26 - v27;
    do
    {
      *v33++ = v32;
      --v34;
    }
    while (v34);
    HIDWORD(v58) = v26;
  }
  memset(v37, 170, sizeof(v37));
  VCVideoEncoderVCPInitialize((uint64_t)v37);
  uint64_t v35 = *(void *)&v37[16];
  *(void *)(a1 + 1632) = *(void *)&v37[16];
  *(_OWORD *)(a1 + 1616) = *(_OWORD *)v37;
  if (v35 == 0xFFFFFFFFLL) {
    return (**(uint64_t (***)(uint64_t, uint8_t *))(a1 + 1616))(a1 + 1632, buf);
  }
  else {
    return 2148007957;
  }
}

void _VideoTransmitter_BufferEvictedCallback(int a1, OSQueueHead *__list, CFTypeRef *__new)
{
  if (*__new)
  {
    CFRelease(*__new);
    *__new = 0;
  }

  VCMemoryPool_Free(__list, __new);
}

void _VideoTransmitter_CleanUp(uint64_t a1, uint64_t a2)
{
  if (a2 != 0xFFFFFFFFLL) {
    CheckOutHandleDebug();
  }
  unint64_t v3 = *(NSObject **)(a1 + 17496);
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = *(void **)(a1 + 17504);
  if (v4)
  {
    VCSimpleQueueDestroy(v4);
    *(void *)(a1 + 17504) = 0;
  }
  unint64_t v5 = *(unsigned int *)(a1 + 1600);
  if (v5)
  {
    unint64_t v6 = 0;
    BOOL v7 = (uint64_t *)(a1 + 520);
    do
    {
      if (*v7 != 0xFFFFFFFFLL)
      {
        RTPTransport_SetNACKConsumer(*v7, 0);
        unint64_t v5 = *(unsigned int *)(a1 + 1600);
      }
      ++v6;
      v7 += 15;
    }
    while (v6 < v5);
  }
  int v8 = *(const void **)(a1 + 18272);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 18272) = 0;
  }
  VideoTransmitter_CleanupSframeCryptors(a1);
  VideoTransmitter_CloseSummerHandles(a1);
  uint64_t v9 = *(void *)(a1 + 1616);
  if (v9 && *(void *)(a1 + 1632) != 0xFFFFFFFFLL)
  {
    (*(void (**)(void))(v9 + 8))();
    *(void *)(a1 + 1632) = 0xFFFFFFFFLL;
  }
  int v10 = *(NSObject **)(a1 + 17720);
  if (v10)
  {
    dispatch_release(v10);
    *(void *)(a1 + 17720) = 0;
  }
  _VideoTransmitter_DequeueEncoderError(a1);
  long long v11 = *(const void **)(a1 + 18136);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 18136) = 0;
  }
  uint64_t v12 = *(OpaqueCMMemoryPool **)(a1 + 18144);
  if (v12)
  {
    CMMemoryPoolInvalidate(v12);
    uint64_t v13 = *(const void **)(a1 + 18144);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 18144) = 0;
    }
  }
  uint64_t v14 = *(const void **)(a1 + 18296);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 18296) = 0;
  }
  int v15 = *(const void **)(a1 + 18160);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 18160) = 0;
  }
  int v16 = *(const void **)(a1 + 18168);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 18168) = 0;
  }
  uint64_t v17 = *(const void **)(a1 + 18176);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 18176) = 0;
  }
  unint64_t v18 = *(const void **)(a1 + 18304);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 18304) = 0;
  }
  uint64_t v19 = *(const void **)(a1 + 17752);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 17752) = 0;
  }
  uint64_t v20 = *(OSQueueHead **)(a1 + 17728);
  if (v20)
  {
    VCMemoryPool_Destroy(v20);
    *(void *)(a1 + 17728) = 0;
  }
  uint64_t v21 = *(OSQueueHead **)(a1 + 17736);
  if (v21)
  {
    VCMemoryPool_Destroy(v21);
    *(void *)(a1 + 17736) = 0;
  }
  long long v22 = *(OSQueueHead **)(a1 + 17744);
  if (v22)
  {
    VCMemoryPool_Destroy(v22);
    *(void *)(a1 + 17744) = 0;
  }
  int v23 = *(__CVBuffer **)(a1 + 432);
  if (v23)
  {
    CVPixelBufferRelease(v23);
    *(void *)(a1 + 432) = 0;
  }
  uint64_t v24 = *(void **)(a1 + 280);
  if (v24)
  {
    free(v24);
    *(void *)(a1 + 280) = 0;
  }
  int v25 = *(void **)(a1 + 288);
  if (v25)
  {
    free(v25);
    *(void *)(a1 + 288) = 0;
  }
  uint64_t v26 = *(void **)(a1 + 312);
  if (v26)
  {
    free(v26);
    *(void *)(a1 + 312) = 0;
  }
  uint64_t v27 = *(void **)(a1 + 304);
  if (v27)
  {
    free(v27);
    *(void *)(a1 + 304) = 0;
  }
  unsigned int v28 = *(const void **)(a1 + 18216);
  if (v28) {
    CFRelease(v28);
  }
  unsigned int v29 = *(const void **)(a1 + 16600);
  if (v29) {
    CFRelease(v29);
  }
  uint64_t v30 = *(const void **)(a1 + 1648);
  if (v30) {
    CFRelease(v30);
  }
  int v31 = *(const void **)(a1 + 1656);
  if (v31) {
    CFRelease(v31);
  }
  int v32 = *(const void **)(a1 + 1664);
  if (v32) {
    CFRelease(v32);
  }
  reportingCacheModuleSpecificInfo();
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  int v33 = *(OpaqueVTPixelTransferSession **)(a1 + 17448);
  if (v33)
  {
    VTPixelTransferSessionInvalidate(v33);
    uint64_t v34 = *(const void **)(a1 + 17448);
    if (v34)
    {
      CFRelease(v34);
      *(void *)(a1 + 17448) = 0;
    }
  }
  uint64_t v35 = *(__CVPixelBufferPool **)(a1 + 17456);
  if (v35)
  {
    CVPixelBufferPoolRelease(v35);
    *(void *)(a1 + 17456) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1680));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2992));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 4272));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16832));
  unsigned int v36 = *(FILE **)(a1 + 16784);
  if (v36) {
    fclose(v36);
  }
  int v37 = *(FILE **)(a1 + 16768);
  if (v37) {
    fclose(v37);
  }
  int v38 = *(FILE **)(a1 + 16800);
  if (v38) {
    fclose(v38);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16832));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16912));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 17000));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 17288));
  __int16 v39 = *(const void **)(a1 + 18128);
  if (v39)
  {
    CFRelease(v39);
    *(void *)(a1 + 18128) = 0;
  }
  uint64_t v40 = *(const void **)(a1 + 4392);
  if (v40) {
    CFRelease(v40);
  }

  free((void *)a1);
}

uint64_t VideoTransmitter_CloseHandle(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CheckInHandleDebug();
  if (!v2) {
    return 2149449730;
  }
  uint64_t v3 = v2;
  uint64_t v4 = v2 + 17488;
  *(unsigned char *)(v2 + 17488) = 1;
  *(unsigned char *)(v2 + 17760) = 0;
  VCRealTimeThread_Stop(*(void *)(v2 + 17480));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 17496));
  VCRealTimeThread_Finalize(*(void *)(v3 + 17480));
  pthread_rwlock_destroy((pthread_rwlock_t *)(v3 + 17520));
  reportingUnregisterPeriodicTask();
  uint64_t v5 = *(unsigned int *)(v4 + 592);
  if ((int)v5 >= 1)
  {
    VCRateControlUnregisterStatisticsChangeHandler(*(void **)(v3 + 1664), 3, v5);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      BOOL v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(v3 + 1664);
        int v9 = *(_DWORD *)(v4 + 592);
        int v11 = 136316418;
        uint64_t v12 = v6;
        __int16 v13 = 2080;
        uint64_t v14 = "_VideoTransmitter_UnregisterStatistics";
        __int16 v15 = 1024;
        int v16 = 1253;
        __int16 v17 = 2048;
        uint64_t v18 = v3;
        __int16 v19 = 2048;
        uint64_t v20 = v8;
        __int16 v21 = 1024;
        int v22 = v9;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d videoTransmitter[%p] Unregistered statisticsCollector[%p] with index=%d", (uint8_t *)&v11, 0x36u);
      }
    }
  }
  _VideoTransmitter_CleanUp(v3, a1);
  return 0;
}

uint64_t _VideoTransmitter_PrepareEncodingBuffer(uint64_t a1, CVPixelBufferRef texture, CVPixelBufferRef *a3, int a4, _DWORD *a5, char a6)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1 + 16672;
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  uint64_t v11 = a1 + 16680;
  *(_OWORD *)(a1 + 16680) = *MEMORY[0x1E4F1DB20];
  *(_OWORD *)(a1 + 16696) = v10;
  if ((a6 & 0x10) != 0) {
    int v12 = 0;
  }
  else {
    int v12 = *(_DWORD *)(a1 + 16988);
  }
  *a3 = CVPixelBufferRetain(texture);
  *a5 = 0;
  if (*(unsigned char *)(v9 + 1617)) {
    VCVideoHardwareDumpCollector_RecordEncoderBuffer(*(void *)(a1 + 18296), a4 != 0, 0, 0, 0, 0);
  }
  if (v12 && *(_DWORD *)v9)
  {
    *(double *)(a1 + 16680) = VideoUtil_CalculateVisibleRect();
    *(void *)(a1 + 16688) = v13;
    *(void *)(a1 + 16696) = v14;
    *(void *)(a1 + 16704) = v15;
  }
  if (!CGRectEqualToRect(*(CGRect *)(a1 + 16712), *(CGRect *)(a1 + 16680)))
  {
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v53 = v16;
    long long v54 = v16;
    long long v51 = v16;
    long long v52 = v16;
    long long v49 = v16;
    long long v50 = v16;
    *(_OWORD *)__str = v16;
    long long v48 = v16;
    long long v45 = v16;
    long long v46 = v16;
    long long v43 = v16;
    long long v44 = v16;
    long long v41 = v16;
    long long v42 = v16;
    *(_OWORD *)__int16 v39 = v16;
    long long v40 = v16;
    VideoUtil_StringVisibleRect((double *)(a1 + 16712), __str, 0x80uLL);
    VideoUtil_StringVisibleRect((double *)v11, v39, 0x80uLL);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      uint64_t v18 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        double v19 = *(double *)(a1 + 16704);
        double v20 = 0.0;
        if (v19 != 0.0) {
          double v20 = *(double *)(a1 + 16696) / v19;
        }
        int v23 = 136316930;
        uint64_t v24 = v17;
        __int16 v25 = 2080;
        uint64_t v26 = "_VideoTransmitter_PrepareEncodingBuffer";
        __int16 v27 = 1024;
        int v28 = 2273;
        __int16 v29 = 2048;
        uint64_t v30 = a1;
        __int16 v31 = 2048;
        double v32 = v20;
        __int16 v33 = 2080;
        uint64_t v34 = __str;
        __int16 v35 = 2080;
        unsigned int v36 = v39;
        __int16 v37 = 1024;
        int v38 = a4;
        _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [AR_TX][%p] AspectRatio=%.3f, visibleRect changed from %s to %s, fPortrait = %d", (uint8_t *)&v23, 0x4Au);
      }
    }
    long long v21 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)(a1 + 16712) = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 16728) = v21;
  }
  return 0;
}

uint64_t _VideoTransmitter_CalculateVideoTimestamp(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v5 = a3;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 16792;
  if (a2)
  {
    double v9 = (double)a2 + (a4 - a3) * (double)*(int *)(a1 + 4404);
  }
  else
  {
    if (a3 == 0.0) {
      double v5 = a4;
    }
    double v9 = (a4 - v5) * (double)(*(_DWORD *)(a1 + 4404) - 500);
  }
  uint64_t v10 = v9;
  if (!*(unsigned char *)(a1 + 17356)) {
    goto LABEL_13;
  }
  if (((v10 ^ a2) & 0x80000000) == 0 || a2 >> 30 && v10 >> 30)
  {
    *(unsigned char *)(a1 + 17356) = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      int v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316674;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_CalculateVideoTimestamp";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 2441;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v5;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&uint8_t buf[40] = a4;
        LOWORD(v27[0]) = 1024;
        *(_DWORD *)((char *)v27 + 2) = a2;
        WORD3(v27[0]) = 1024;
        DWORD2(v27[0]) = v10;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d CalculateVideoTimestamp (pol match): dAudio/dVideo: %f/%f  dwAudioTS/dwVideoTS: %u/%u", buf, 0x3Cu);
      }
    }
LABEL_13:
    uint64_t v13 = v10;
    goto LABEL_14;
  }
  uint64_t v13 = a2;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v24 = VRTraceErrorLogLevelToCSTR();
    __int16 v25 = *MEMORY[0x1E4F47A50];
    uint64_t v13 = a2;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136316930;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_CalculateVideoTimestamp";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2437;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = v5;
      *(_WORD *)&buf[38] = 2048;
      *(double *)&uint8_t buf[40] = a4;
      LOWORD(v27[0]) = 1024;
      *(_DWORD *)((char *)v27 + 2) = a2;
      WORD3(v27[0]) = 1024;
      DWORD2(v27[0]) = v10;
      WORD6(v27[0]) = 1024;
      *(_DWORD *)((char *)v27 + 14) = a2;
      _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d CalculateVideoTimestamp override (pol mismatch): dAudio/dVideo: %f/%f  dwAudioTS/dwVideoTS: %u/%u -> %u", buf, 0x42u);
      uint64_t v13 = a2;
    }
  }
LABEL_14:
  if (*(unsigned char *)(v8 + 565))
  {
    *(unsigned char *)(v8 + 565) = 0;
  }
  else
  {
    int v14 = *(_DWORD *)(v8 + 568);
    if (v13 == v14 || (v13 - v14) >= 0x7FFFFFFF)
    {
      uint64_t v16 = (v14 + 1);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v17 = VRTraceErrorLogLevelToCSTR();
        uint64_t v18 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *(_DWORD *)(v8 + 568);
          *(_DWORD *)CMTime buf = 136317186;
          *(void *)&uint8_t buf[4] = v17;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoTransmitter_CalculateVideoTimestamp";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 2455;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v5;
          *(_WORD *)&buf[38] = 2048;
          *(double *)&uint8_t buf[40] = a4;
          LOWORD(v27[0]) = 1024;
          *(_DWORD *)((char *)v27 + 2) = a2;
          WORD3(v27[0]) = 1024;
          DWORD2(v27[0]) = v13;
          WORD6(v27[0]) = 1024;
          *(_DWORD *)((char *)v27 + 14) = v16;
          WORD1(v27[1]) = 1024;
          DWORD1(v27[1]) = v19;
          _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d CalculateVideoTimestamp FORCE forward: dAudio/dVideo: %f/%f  dwAudioTS/dwVideoTS: %u/%u -> %u (last: %u)", buf, 0x48u);
        }
      }
      uint64_t v13 = v16;
    }
  }
  *(_DWORD *)(v8 + 568) = v13;
  if (*(unsigned char *)v8)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v27[3] = v20;
    v27[4] = v20;
    v27[1] = v20;
    v27[2] = v20;
    *(_OWORD *)&buf[32] = v20;
    v27[0] = v20;
    *(_OWORD *)CMTime buf = v20;
    *(_OWORD *)&buf[16] = v20;
    long long v21 = *(FILE **)(a1 + 16800);
    int Timestamp = VRLogfileGetTimestamp(buf, 0x80u);
    fprintf(v21, "%s\t%f\t%d\t%f\t%d\n", Timestamp, a4, a2, v5, v13);
  }
  return v13;
}

uint64_t _VideoTransmitter_UpdateEncoderBitrate(uint64_t a1, unsigned int a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 4400);
  unsigned int v4 = v3 + 15000;
  int v5 = a2 - v3;
  if (v5 <= 15000) {
    int v5 = 15000;
  }
  if (v4 >= a2) {
    int v5 = 15000;
  }
  *(_DWORD *)(a1 + 36) = v5;
  uint64_t v6 = (unsigned int *)(a1 + 36);
  if (*(_DWORD *)(a1 + 17372) == 20 && *(_DWORD *)(a1 + 4420))
  {
    unsigned int v7 = atomic_load((unsigned int *)(a1 + 16492));
    double v8 = (double)v7;
    if (v7 > 0x4AF)
    {
      unsigned int v12 = *(_DWORD *)(a1 + 36);
      double v13 = v8 / 6000.0 + -0.2;
      *(_DWORD *)(a1 + 36) = (int)fmax((1.0 - v13) * (double)v12, 15000.0);
      if (*(double *)(a1 + 384) != v13)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v14 = VRTraceErrorLogLevelToCSTR();
          uint64_t v15 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v16 = *v6;
            int v28 = 136316930;
            uint64_t v29 = v14;
            __int16 v30 = 2080;
            __int16 v31 = "_VideoTransmitter_AdjustEncoderBitrateBasedOnMediaQueueSize";
            __int16 v32 = 1024;
            int v33 = 2660;
            __int16 v34 = 1024;
            unsigned int v35 = v12;
            __int16 v36 = 1024;
            *(_DWORD *)__int16 v37 = v16;
            *(_WORD *)&v37[4] = 2048;
            *(double *)&v37[6] = v8 / 6000.0 + -0.2;
            *(_WORD *)&v37[14] = 2048;
            *(double *)&v37[16] = v8;
            __int16 v38 = 2048;
            uint64_t v39 = 0x40B7700000000000;
            _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Adjust video bitrate from currentBitrate=%u to newBitrate=%u with new adjustmentFactor=%f, queueSize=%f, queueSizeLimit=%f", (uint8_t *)&v28, 0x46u);
          }
        }
        *(double *)(a1 + 384) = v13;
      }
    }
    else
    {
      if (*(double *)(a1 + 384) > 0.0 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        uint64_t v10 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v11 = *v6;
          int v28 = 136316418;
          uint64_t v29 = v9;
          __int16 v30 = 2080;
          __int16 v31 = "_VideoTransmitter_AdjustEncoderBitrateBasedOnMediaQueueSize";
          __int16 v32 = 1024;
          int v33 = 2651;
          __int16 v34 = 1024;
          unsigned int v35 = v11;
          __int16 v36 = 2048;
          *(double *)__int16 v37 = v8;
          *(_WORD *)&v37[8] = 2048;
          *(void *)&unsigned char v37[10] = 0x40B7700000000000;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Stop adjusting video bitrate=%u with low queueSize=%f, queueSizeLimit=%f", (uint8_t *)&v28, 0x36u);
        }
      }
      *(void *)(a1 + 384) = 0;
    }
  }
  int v17 = *(_DWORD *)(a1 + 36);
  if (v17 != *(_DWORD *)(a1 + 32))
  {
    if (v17 >= *(_DWORD *)(a1 + 40)) {
      int v17 = *(_DWORD *)(a1 + 40);
    }
    *(_DWORD *)(a1 + 36) = v17;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v18 = VRTraceErrorLogLevelToCSTR();
      int v19 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v20 = *v6;
        int v28 = 136315906;
        uint64_t v29 = v18;
        __int16 v30 = 2080;
        __int16 v31 = "_VideoTransmitter_UpdateEncoderBitrate";
        __int16 v32 = 1024;
        int v33 = 2685;
        __int16 v34 = 1024;
        unsigned int v35 = v20;
        _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SETTING THE NEW VIDEO RATE to %u bps", (uint8_t *)&v28, 0x22u);
      }
    }
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      int v23 = Mutable;
      CFNumberRef v24 = CFNumberCreate(v21, kCFNumberIntType, v6);
      if (v24)
      {
        CFNumberRef v25 = v24;
        CFArrayAppendValue(v23, v24);
        CFRelease(v25);
        uint64_t v26 = *(void *)(a1 + 1632);
        if (v26 != 0xFFFFFFFFLL) {
          (*(void (**)(uint64_t, __CFArray *))(*(void *)(a1 + 1616) + 24))(v26, v23);
        }
        CFRelease(v23);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 36);
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoTransmitter_UpdateEncoderBitrate_cold_2();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoTransmitter_UpdateEncoderBitrate_cold_1();
      }
    }
  }
  return *(unsigned int *)(a1 + 32);
}

BOOL _VideoTransmitter_RequireEncoderResolutionChange(uint64_t a1, int *a2, int *a3, const char **a4, double a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1 + 17072;
  int v11 = *a2;
  int v12 = *a3;
  if (*(_DWORD *)(a1 + 17264) == *a2 && *(_DWORD *)(a1 + 17268) == v12)
  {
    int v13 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 17264) = v11;
    *(_DWORD *)(a1 + 17268) = v12;
    int v13 = 1;
  }
  if (*(unsigned char *)(a1 + 18209))
  {
    unint64_t v14 = *(void *)(a1 + 18112);
    if (!v14) {
      goto LABEL_14;
    }
    if (v13)
    {
      double v15 = (double)v11 / (double)v12;
      unint64_t v16 = v12 * (uint64_t)v11;
      if (v14 >= v16) {
        unint64_t v17 = v16;
      }
      else {
        unint64_t v17 = *(void *)(a1 + 18112);
      }
      *a2 = (int)VideoUtil_ComputeScreenSizeForAspectRatio(v17, v15);
      *a3 = (int)v18;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        unsigned int v20 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *a2;
          int v22 = *a3;
          int v45 = 136316418;
          uint64_t v46 = v19;
          __int16 v47 = 2080;
          long long v48 = "_VideoTransmitter_RequireEncoderResolutionChange";
          __int16 v49 = 1024;
          int v50 = 3016;
          __int16 v51 = 2048;
          *(void *)long long v52 = a1;
          *(_WORD *)&v52[8] = 1024;
          *(_DWORD *)long long v53 = v21;
          *(_WORD *)&v53[4] = 1024;
          *(_DWORD *)long long v54 = v22;
          _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter=%p pendingWidth=%d pendingHeight=%d", (uint8_t *)&v45, 0x32u);
        }
      }
LABEL_14:
      if (*(_DWORD *)(v10 + 184) == *a2) {
        return *(_DWORD *)(v10 + 188) != *a3;
      }
      return 1;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 17256) == *a3 && *(_DWORD *)(a1 + 17260) == *a2) {
    return 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 17000));
  if (!*(unsigned char *)(v10 + 1))
  {
LABEL_29:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 17000));
    return 0;
  }
  int v24 = *(_DWORD *)(v10 + 12);
  if (*a2 == v24)
  {
    BOOL v25 = *a3 == *(_DWORD *)(v10 + 16);
    if (v24)
    {
LABEL_21:
      BOOL v26 = 0;
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v25 = 0;
    if (v24) {
      goto LABEL_21;
    }
  }
  BOOL v26 = *(_DWORD *)(v10 + 16) == 0;
LABEL_24:
  double v27 = *(double *)(a1 + 17248);
  char v28 = v27 < a5 || v25;
  if ((v28 & 1) == 0 && !v26) {
    goto LABEL_29;
  }
  int v29 = *(_DWORD *)(a1 + 20);
  BOOL v31 = v29 != 110 && (v29 & 0xFFFFFFFE) != 124;
  *a2 = *(_DWORD *)(v10 + 4);
  *a3 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)(a1 + 16) = v29;
  *(unsigned char *)(v10 + 1176) = v31;
  *(_DWORD *)(v10 + 396) = *(_DWORD *)(v10 + 400);
  char v32 = v27 >= a5 || v25;
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v32)
  {
    if (ErrorLogLevelForModule < 7) {
      goto LABEL_48;
    }
    uint64_t v34 = VRTraceErrorLogLevelToCSTR();
    unsigned int v35 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_48;
    }
    int v45 = 136315650;
    uint64_t v46 = v34;
    __int16 v47 = 2080;
    long long v48 = "_VideoTransmitter_RequireEncoderResolutionChange";
    __int16 v49 = 1024;
    int v50 = 3046;
    __int16 v36 = " [%s] %s:%d VideoTransmitter:RequireEncoderResolutionChange: updated to new size";
  }
  else
  {
    if (ErrorLogLevelForModule < 5) {
      goto LABEL_48;
    }
    uint64_t v37 = VRTraceErrorLogLevelToCSTR();
    unsigned int v35 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_48;
    }
    int v45 = 136315650;
    uint64_t v46 = v37;
    __int16 v47 = 2080;
    long long v48 = "_VideoTransmitter_RequireEncoderResolutionChange";
    __int16 v49 = 1024;
    int v50 = 3044;
    __int16 v36 = " [%s] %s:%d VideoTransmitter:RequireEncoderResolutionChange: timed out";
  }
  _os_log_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_DEFAULT, v36, (uint8_t *)&v45, 0x1Cu);
LABEL_48:
  if (*(unsigned char *)(v10 + 20) && strncmp((const char *)(v10 + 20), *a4, 0x96uLL)) {
    *a4 = (const char *)(v10 + 20);
  }
  *(_WORD *)uint64_t v10 = 0;
  *(void *)(a1 + 17248) = 0;
  *(void *)(v10 + 4) = 0;
  *(void *)(v10 + 12) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 17000));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v38 = VRTraceErrorLogLevelToCSTR();
    uint64_t v39 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v40 = *(_DWORD *)(a1 + 24);
      int v41 = *(_DWORD *)(a1 + 28);
      int v42 = *a2;
      int v43 = *a3;
      long long v44 = *a4;
      int v45 = 136316930;
      uint64_t v46 = v38;
      __int16 v47 = 2080;
      long long v48 = "_VideoTransmitter_RequireEncoderResolutionChange";
      __int16 v49 = 1024;
      int v50 = 3075;
      __int16 v51 = 1024;
      *(_DWORD *)long long v52 = v40;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&v52[6] = v41;
      *(_WORD *)long long v53 = 1024;
      *(_DWORD *)&v53[2] = v42;
      *(_WORD *)long long v54 = 1024;
      *(_DWORD *)&v54[2] = v43;
      __int16 v55 = 2080;
      long long v56 = v44;
      _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter:RequireEncoderResolutionChange: Switching encoder from %dx%d to %dx%d, featureListString %s", (uint8_t *)&v45, 0x3Eu);
    }
  }
  return 1;
}

uint64_t _VideoTransmitter_EncodeVideo(uint64_t a1, __CVBuffer *a2, uint64_t a3, CMTime *a4, int a5, unsigned int a6, uint64_t a7, double a8)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  int v103 = 0;
  int v104 = -1431655766;
  CVPixelBufferRef texture = 0;
  if (a1)
  {
    double v8 = a2;
    if (a2)
    {
      if (!a3 && *(_DWORD *)(a1 + 260))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return 2149449745;
        }
        VRTraceErrorLogLevelToCSTR();
        uint64_t v16 = 2149449745;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoTransmitter_EncodeVideo_cold_3();
        }
        return v16;
      }
      time[0] = *a4;
      double Seconds = CMTimeGetSeconds(time);
      int v18 = _VideoTransmitter_CalculateVideoTimestamp(a1, a3, a8, Seconds);
      uint64_t v101 = 0x3FF0000000000000;
      double v19 = micro();
      time[0] = *a4;
      float v20 = CMTimeGetSeconds(time);
      double v21 = v20;
      _VideoTransmitter_UpdateAVHostTimeStats(a1, a8, v20);
      double v22 = *(double *)(a1 + 4360);
      if (v22 == 0.0)
      {
        *(double *)(a1 + 4360) = v19;
        *(double *)(a1 + 4368) = v21;
        double v22 = v19;
        double v23 = v21;
      }
      else
      {
        double v23 = *(double *)(a1 + 4368);
      }
      double v24 = v21 - v23;
      double v25 = v19 - v22;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v26 = VRTraceErrorLogLevelToCSTR();
        double v27 = *MEMORY[0x1E4F47A50];
        char v28 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            CMTimeValue v29 = *(void *)(a1 + 4360);
            CMTimeEpoch v30 = *(void *)(a1 + 4368);
            LODWORD(time[0].value) = 136317186;
            *(CMTimeValue *)((char *)&time[0].value + 4) = v26;
            LOWORD(time[0].flags) = 2080;
            *(void *)((char *)&time[0].flags + 2) = "_VideoTransmitter_EncodeVideo";
            HIWORD(time[0].epoch) = 1024;
            LODWORD(time[1].value) = 3182;
            WORD2(time[1].value) = 2048;
            *(CMTimeValue *)((char *)&time[1].value + 6) = v29;
            HIWORD(time[1].flags) = 2048;
            time[1].epoch = v30;
            LOWORD(time[2].value) = 2048;
            *(double *)((char *)&time[2].value + 2) = v19;
            HIWORD(time[2].timescale) = 2048;
            *(double *)&time[2].flags = v21;
            WORD2(time[2].epoch) = 2048;
            *(double *)((char *)&time[2].epoch + 6) = v25;
            HIWORD(time[3].value) = 2048;
            *(double *)&time[3].timescale = v24;
            _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d pVT->firstSystemTime=%f pVT->firstVideoHostTime=%f currentTime=%f videoHostTimeInSeconds=%f systemTimeDifference=%f videoHostTimeDifference=%f", (uint8_t *)time, 0x58u);
          }
        }
        else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          CMTimeValue v82 = *(void *)(a1 + 4360);
          CMTimeEpoch v83 = *(void *)(a1 + 4368);
          LODWORD(time[0].value) = 136317186;
          *(CMTimeValue *)((char *)&time[0].value + 4) = v26;
          LOWORD(time[0].flags) = 2080;
          *(void *)((char *)&time[0].flags + 2) = "_VideoTransmitter_EncodeVideo";
          HIWORD(time[0].epoch) = 1024;
          LODWORD(time[1].value) = 3182;
          WORD2(time[1].value) = 2048;
          *(CMTimeValue *)((char *)&time[1].value + 6) = v82;
          HIWORD(time[1].flags) = 2048;
          time[1].epoch = v83;
          LOWORD(time[2].value) = 2048;
          *(double *)((char *)&time[2].value + 2) = v19;
          HIWORD(time[2].timescale) = 2048;
          *(double *)&time[2].flags = v21;
          WORD2(time[2].epoch) = 2048;
          *(double *)((char *)&time[2].epoch + 6) = v25;
          HIWORD(time[3].value) = 2048;
          *(double *)&time[3].timescale = v24;
          _os_log_debug_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEBUG, " [%s] %s:%d pVT->firstSystemTime=%f pVT->firstVideoHostTime=%f currentTime=%f videoHostTimeInSeconds=%f systemTimeDifference=%f videoHostTimeDifference=%f", (uint8_t *)time, 0x58u);
        }
      }
      float v31 = v24;
      float v32 = v25;
      if (!VCMU_CompareWithAccuracy(v31, v32, 0.5) && v19 - *(double *)(a1 + 18232) > 0.5)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v33 = VRTraceErrorLogLevelToCSTR();
          uint64_t v34 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            CMTimeValue v84 = *(void *)(a1 + 4368);
            uint64_t v85 = *(void *)(a1 + 4360);
            LODWORD(time[0].value) = 136317698;
            *(CMTimeValue *)((char *)&time[0].value + 4) = v33;
            LOWORD(time[0].flags) = 2080;
            *(void *)((char *)&time[0].flags + 2) = "_VideoTransmitter_EncodeVideo";
            HIWORD(time[0].epoch) = 1024;
            LODWORD(time[1].value) = 3184;
            WORD2(time[1].value) = 2048;
            *(double *)((char *)&time[1].value + 6) = v24;
            HIWORD(time[1].flags) = 2048;
            *(double *)&time[1].epoch = v21;
            LOWORD(time[2].value) = 2048;
            *(CMTimeValue *)((char *)&time[2].value + 2) = v84;
            HIWORD(time[2].timescale) = 2048;
            *(double *)&time[2].flags = v25;
            WORD2(time[2].epoch) = 2048;
            *(double *)((char *)&time[2].epoch + 6) = v19;
            HIWORD(time[3].value) = 2048;
            *(void *)&time[3].timescale = v85;
            LOWORD(time[3].epoch) = 2048;
            *(CMTimeEpoch *)((char *)&time[3].epoch + 2) = vabdd_f64(v24, v25);
            WORD1(time[4].value) = 2048;
            *(CMTimeValue *)((char *)&time[4].value + 4) = 0x3FE0000000000000;
            _os_log_error_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_ERROR, " [%s] %s:%d videoHostTimeDifference=%f[%f-%f] and systemTimeDifference=%f[%f-%f] drifted by %f with threshold=%f", (uint8_t *)time, 0x6Cu);
          }
        }
        *(double *)(a1 + 18232) = v19;
      }
      CVPixelBufferRetain(v8);
      uint64_t updated = _VideoTransmitter_UpdateRateControlStatus(a1, (unsigned int *)&v104, (unsigned int *)&v103, &v101);
      if ((updated & 0x80000000) == 0)
      {
        int v95 = v18;
        __int16 v36 = (unsigned int *)(a1 + 16492);
        unsigned int v37 = v104;
        *(_DWORD *)(a1 + 4376) = v104;
        _VideoTransmitter_UpdateEncoderBitrate(a1, v37);
        if (*(_DWORD *)(a1 + 16524) != *(_DWORD *)(a1 + 16520))
        {
          uint64_t v38 = *(void *)(a1 + 1632);
          if (v38 != 0xFFFFFFFFLL) {
            (*(void (**)(uint64_t, void))(*(void *)(a1 + 1616) + 16))(v38, *(unsigned int *)(a1 + 16524));
          }
          reportingThermal();
          *(_DWORD *)(a1 + 16520) = *(_DWORD *)(a1 + 16524);
        }
        int v100 = 0;
        CVPixelBufferRef pixelBufferOut = 0;
        if (*(unsigned char *)(a1 + 18209)) {
          goto LABEL_50;
        }
        int Width = CVPixelBufferGetWidth(v8);
        if (vabds_f32((float)Width / (float)(int)CVPixelBufferGetHeight(v8), (float)*(int *)(a1 + 24) / (float)*(int *)(a1 + 28)) < 0.05)goto LABEL_50; {
        int v40 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
        }
        if (!*(void *)(a1 + 17448))
        {
          VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (VTPixelTransferSessionRef *)(a1 + 17448));
          VTSessionSetProperty(*(VTSessionRef *)(a1 + 17448), (CFStringRef)*MEMORY[0x1E4F45168], (CFTypeRef)*MEMORY[0x1E4F45468]);
        }
        int v41 = *(__CVPixelBufferPool **)(a1 + 17456);
        if (!v41)
        {
          int v41 = (__CVPixelBufferPool *)VideoUtil_ReseizeFrameForBufferpool(*(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 88), 4);
          *(void *)(a1 + 17456) = v41;
        }
        CVPixelBufferPoolCreatePixelBuffer(*v40, v41, &pixelBufferOut);
        CVPixelBufferRef v42 = pixelBufferOut;
        if (pixelBufferOut)
        {
          VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(a1 + 17448), v8, pixelBufferOut);
          if (!*(unsigned char *)(a1 + 18289)) {
            goto LABEL_49;
          }
        }
        else if (!*(unsigned char *)(a1 + 18289))
        {
          goto LABEL_50;
        }
        VCVideoHardwareDumpCollector_RecordResizeForEncoder(*(void *)(a1 + 18296), v42 != 0, (uint64_t)pixelBufferOut, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28));
        if (v42)
        {
LABEL_49:
          CVPixelBufferRelease(v8);
          double v8 = pixelBufferOut;
        }
LABEL_50:
        int v98 = CVPixelBufferGetWidth(v8);
        int Height = CVPixelBufferGetHeight(v8);
        uint64_t v96 = (const char *)(a1 + 104);
        if (_VideoTransmitter_RequireEncoderResolutionChange(a1, &v98, &Height, &v96, v19))
        {
          int v93 = v98;
          int v94 = Height;
          int v43 = v96;
          long long v44 = *(__CVBuffer **)(a1 + 432);
          if (v44)
          {
            CVPixelBufferRelease(v44);
            *(void *)(a1 + 432) = 0;
          }
          if (*(void *)(a1 + 1632) != 0xFFFFFFFFLL)
          {
            (*(void (**)(void))(*(void *)(a1 + 1616) + 8))();
            *(void *)(a1 + 1632) = 0xFFFFFFFFLL;
          }
          if (*(_DWORD *)(a1 + 16) == 100) {
            *(_DWORD *)(a1 + 16620) = 0;
          }
          int v45 = *(_DWORD *)(a1 + 496);
          if (v45 == 3 || v45 == 5 || (*(_DWORD *)(a1 + 504) - 1) <= 1) {
            *(_DWORD *)(a1 + 16620) = 1;
          }
          ++*(_DWORD *)(a1 + 18084);
          if (*(unsigned char *)(a1 + 16984))
          {
            unsigned int v46 = 0;
          }
          else if (*(_DWORD *)(a1 + 96))
          {
            unsigned int v46 = 1;
          }
          else
          {
            unsigned int v46 = *(_DWORD *)(a1 + 100) != 0;
          }
          uint64_t v47 = 218;
          if (!*(_DWORD *)(a1 + 17368)) {
            uint64_t v47 = 32;
          }
          unsigned int v92 = v36[v47];
          int Encoder = _VideoTransmitter_CreateEncoder(a1, v93, v94, (uint64_t)v43, v92 != 0, v46);
          int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
          if (Encoder < 0)
          {
            if (ErrorLogLevelForModule >= 3)
            {
              uint64_t v56 = VRTraceErrorLogLevelToCSTR();
              uint64_t v57 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                int v86 = *(_DWORD *)(a1 + 24);
                CMTimeFlags v87 = *(_DWORD *)(a1 + 28);
                LODWORD(time[0].value) = 136316674;
                *(CMTimeValue *)((char *)&time[0].value + 4) = v56;
                LOWORD(time[0].flags) = 2080;
                *(void *)((char *)&time[0].flags + 2) = "_VideoTransmitter_CreateEncoderForResolutionChange";
                HIWORD(time[0].epoch) = 1024;
                LODWORD(time[1].value) = 3122;
                WORD2(time[1].value) = 1024;
                *(_DWORD *)((char *)&time[1].value + 6) = v86;
                HIWORD(time[1].timescale) = 1024;
                time[1].flags = v87;
                LOWORD(time[1].epoch) = 1024;
                *(_DWORD *)((char *)&time[1].epoch + 2) = v93;
                HIWORD(time[1].epoch) = 1024;
                LODWORD(time[2].value) = v94;
                _os_log_error_impl(&dword_1E1EA4000, v57, OS_LOG_TYPE_ERROR, " [%s] %s:%d Switching encoder FAILED from %dx%d to %dx%d", (uint8_t *)time, 0x34u);
              }
            }
          }
          else
          {
            if (ErrorLogLevelForModule >= 7)
            {
              uint64_t v91 = VRTraceErrorLogLevelToCSTR();
              int v50 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                log = v50;
                int v51 = *(_DWORD *)(a1 + 24);
                CMTimeFlags v88 = *(_DWORD *)(a1 + 28);
                int v89 = *(_DWORD *)(a1 + 44);
                long long v52 = FourccToCStr(*(_DWORD *)(a1 + 17468));
                LODWORD(time[0].value) = 136317442;
                *(CMTimeValue *)((char *)&time[0].value + 4) = v91;
                LOWORD(time[0].flags) = 2080;
                *(void *)((char *)&time[0].flags + 2) = "_VideoTransmitter_CreateEncoderForResolutionChange";
                HIWORD(time[0].epoch) = 1024;
                LODWORD(time[1].value) = 3112;
                WORD2(time[1].value) = 1024;
                *(_DWORD *)((char *)&time[1].value + 6) = v51;
                HIWORD(time[1].timescale) = 1024;
                time[1].flags = v88;
                LOWORD(time[1].epoch) = 1024;
                *(_DWORD *)((char *)&time[1].epoch + 2) = v93;
                HIWORD(time[1].epoch) = 1024;
                LODWORD(time[2].value) = v94;
                WORD2(time[2].value) = 1024;
                *(_DWORD *)((char *)&time[2].value + 6) = v89;
                HIWORD(time[2].timescale) = 2080;
                *(void *)&time[2].flags = v52;
                WORD2(time[2].epoch) = 2080;
                *(CMTimeEpoch *)((char *)&time[2].epoch + 6) = (CMTimeEpoch)v43;
                _os_log_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Switching encoder from %dx%d to %dx%d %dfps (%s: %s)", (uint8_t *)time, 0x4Eu);
              }
            }
            *(_DWORD *)(a1 + 24) = v93;
            *(_DWORD *)(a1 + 28) = v94;
            *(_DWORD *)(a1 + 17256) = v93;
            *(_DWORD *)(a1 + 17260) = v94;
            if (strncmp((const char *)(a1 + 104), v43, 0x96uLL)) {
              __strlcpy_chk();
            }
            __str.timescale = 0;
            __str.value = 0;
            snprintf((char *)&__str, 0xCuLL, "%d", *(_DWORD *)(a1 + 16));
            reportingLog();
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v53 = VRTraceErrorLogLevelToCSTR();
              long long v54 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                __int16 v55 = "Hardware";
                LODWORD(time[0].value) = 136315906;
                *(CMTimeValue *)((char *)&time[0].value + 4) = v53;
                LOWORD(time[0].flags) = 2080;
                *(void *)((char *)&time[0].flags + 2) = "_VideoTransmitter_HandleEncodeCreateSuccess";
                if (!v92) {
                  __int16 v55 = "Software";
                }
                HIWORD(time[0].epoch) = 1024;
                LODWORD(time[1].value) = 641;
                WORD2(time[1].value) = 2080;
                *(CMTimeValue *)((char *)&time[1].value + 6) = (CMTimeValue)v55;
                _os_log_impl(&dword_1E1EA4000, v54, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Using %s Video Encoder", (uint8_t *)time, 0x26u);
              }
            }
          }
        }
        _VideoTransmitter_PrepareEncodingBuffer(a1, v8, &texture, (a6 & 2) == 0, &v100, a6);
        CVPixelBufferRelease(v8);
        if (v100) {
          unsigned int v58 = a6 | 3;
        }
        else {
          unsigned int v58 = a6;
        }
        int v59 = *(_DWORD *)(a1 + 256);
        LOWORD(pixelBufferOut) = 0;
        CFNumberRef Attachment = (const __CFNumber *)CVBufferGetAttachment(v8, @"CaptureMediaPriorirty", 0);
        if (Attachment) {
          CFNumberGetValue(Attachment, kCFNumberSInt16Type, &pixelBufferOut);
        }
        uint64_t v61 = (char *)VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 17728));
        long long v62 = texture;
        CMTime __str = *a4;
        long long v63 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)&time[0].value = *(_OWORD *)a7;
        *(_OWORD *)&time[0].epoch = v63;
        *(void *)&time[1].timescale = *(void *)(a7 + 32);
        uint64_t v64 = _VideoTransmitter_PrepareAndSetupEncodingArgs(a1, (uint64_t)v61, v59, texture, v58, v95, a5, (long long *)&__str.value, v19, v104, v103, (long long *)&time[0].value, (__int16)pixelBufferOut);
        if ((v64 & 0x80000000) != 0)
        {
          uint64_t v16 = v64;
          CVPixelBufferRelease(v62);
          VCMemoryPool_Free(*(OSQueueHead **)(a1 + 17728), v61);
        }
        else
        {
          if (v19 - *(double *)(a1 + 16608) > 1.0)
          {
            if (*(_DWORD *)(a1 + 1600))
            {
              unint64_t v65 = 0;
              uint64_t v66 = a1 + 520;
              do
              {
                time[0].value = 0;
                _VideoTransmitter_GetFramerateForStream(a1, v66, (double *)&time[0].value, 1.0);
                v66 += 120;
                RTPRecordFrameRate(*(double *)&time[0].value);
                ++v65;
              }
              while (v65 < *(unsigned int *)(a1 + 1600));
            }
            *(double *)(a1 + 16608) = v19;
          }
          *((_DWORD *)v61 + 42) = *(_DWORD *)(a1 + 18056);
          *((int32x2_t *)v61 + 20) = vrev64_s32(*(int32x2_t *)(a1 + 18060));
          long long v67 = *(_OWORD *)(a1 + 16680);
          *(_OWORD *)(v61 + 264) = *(_OWORD *)(a1 + 16696);
          *(_OWORD *)(v61 + 248) = v67;
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 2992));
          uint64_t v68 = *(unsigned int *)(a1 + 2588);
          *((_DWORD *)v61 + 30) = v68;
          if ((int)v68 >= 1)
          {
            uint64_t v69 = malloc_type_malloc(4 * v68, 0x100004052888210uLL);
            *((void *)v61 + 14) = v69;
            if (v69) {
              memcpy(v69, (const void *)(a1 + 2592), 4 * *((int *)v61 + 30));
            }
            *(_DWORD *)(a1 + 2588) = 0;
          }
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2992));
          if (*(_DWORD *)(a1 + 17372) == 20)
          {
            unsigned int v70 = atomic_load(v36);
            *((_DWORD *)v61 + 71) = v70;
            *((_DWORD *)v61 + 72) = 6000;
          }
          ++*(_DWORD *)(a1 + 17788);
          time[0] = *(CMTime *)(v61 + 404);
          CMTimeGetSeconds(time);
          kdebug_trace();
          memcpy(time, v61, sizeof(time));
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v71 = VRTraceErrorLogLevelToCSTR();
            int v72 = *MEMORY[0x1E4F47A50];
            uint64_t v73 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
              {
                int v74 = *((_DWORD *)v61 + 45);
                LODWORD(__str.value) = 136315906;
                *(CMTimeValue *)((char *)&__str.value + 4) = v71;
                LOWORD(__str.flags) = 2080;
                *(void *)((char *)&__str.flags + 2) = "_VideoTransmitter_EncodeVideo";
                HIWORD(__str.epoch) = 1024;
                int v106 = 3268;
                __int16 v107 = 1024;
                LODWORD(v108) = v74;
                _os_log_impl(&dword_1E1EA4000, v72, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Encode frame with RTP timestamp %d", (uint8_t *)&__str, 0x22u);
              }
            }
            else if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
            {
              _VideoTransmitter_EncodeVideo_cold_5();
            }
          }
          if (*(unsigned char *)(a1 + 17285))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v75 = VRTraceErrorLogLevelToCSTR();
              int v76 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                CMTime __str = *(CMTime *)(v61 + 40);
                Float64 v77 = CMTimeGetSeconds(&__str);
                int v78 = *((_DWORD *)v61 + 45);
                LODWORD(__str.value) = 136316162;
                *(CMTimeValue *)((char *)&__str.value + 4) = v75;
                LOWORD(__str.flags) = 2080;
                *(void *)((char *)&__str.flags + 2) = "_VideoTransmitter_EncodeVideo";
                HIWORD(__str.epoch) = 1024;
                int v106 = 3270;
                __int16 v107 = 2048;
                Float64 v108 = v77;
                __int16 v109 = 1024;
                int v110 = v78;
                _os_log_impl(&dword_1E1EA4000, v76, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Timestamp Alignment: Encode Host Time = %f, RTP timestamp = %08X", (uint8_t *)&__str, 0x2Cu);
              }
            }
          }
          uint64_t v79 = *(void *)(a1 + 1632);
          if (v79 == 0xFFFFFFFFLL) {
            uint64_t v16 = 2148007957;
          }
          else {
            uint64_t v16 = (*(uint64_t (**)(uint64_t, char *))(*(void *)(a1 + 1616) + 32))(v79, v61);
          }
          if (*(unsigned char *)(a1 + 18289)) {
            VCVideoHardwareDumpCollector_RecordEncodedFrame(*(void *)(a1 + 18296), (uint64_t)time);
          }
          CVPixelBufferRelease(texture);
          if ((v16 & 0x80000000) != 0)
          {
            if (v16 == -2146959339 || v16 == -2146959358)
            {
              int v80 = (void *)*((void *)v61 + 14);
              if (v80) {
                free(v80);
              }
              VCMemoryPool_Free(*(OSQueueHead **)(a1 + 17728), v61);
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VideoTransmitter_EncodeVideo_cold_4();
              }
            }
          }
        }
        return v16;
      }
      uint64_t v16 = updated;
      CVPixelBufferRelease(v8);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoTransmitter_EncodeVideo_cold_6();
        }
      }
    }
    else
    {
      uint64_t v16 = 2149449729;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoTransmitter_EncodeVideo_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v16 = 2149449730;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        _VideoTransmitter_EncodeVideo_cold_1();
        return 2149449730;
      }
    }
  }
  return v16;
}

double _VideoTransmitter_UpdateAVHostTimeStats(uint64_t a1, double a2, double a3)
{
  double v3 = (a2 - a3) * 1000.0;
  double v4 = fabs(v3);
  if (v4 > fabs(*(double *)(a1 + 408))) {
    *(double *)(a1 + 408) = v3;
  }
  if (v4 < fabs(*(double *)(a1 + 416))) {
    *(double *)(a1 + 416) = v3;
  }
  double result = v3 + *(double *)(a1 + 400);
  *(double *)(a1 + 392) = v4 + *(double *)(a1 + 392);
  *(double *)(a1 + 400) = result;
  ++*(_DWORD *)(a1 + 424);
  return result;
}

uint64_t _VideoTransmitter_UpdateRateControlStatus(uint64_t a1, unsigned int *a2, unsigned int *a3, void *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int v38 = 0;
  if (!*(_DWORD *)(a1 + 4420))
  {
    uint64_t v20 = 0;
    *a2 = *(_DWORD *)(a1 + 4380);
    *a4 = 0;
    *a3 = 0;
    return v20;
  }
  unsigned int v7 = (unsigned __int8 *)(a1 + 16824);
  unsigned int v36 = -1431655766;
  int v37 = -1431655766;
  double v35 = NAN;
  int v8 = *(_DWORD *)(a1 + 496);
  BOOL v9 = v8 == 3 || v8 == 5;
  if (v9 || *(void *)(a1 + 1664))
  {
    if (a2) {
      *a2 = *(_DWORD *)(a1 + 4380);
    }
    if (a3) {
      *a3 = *(_DWORD *)(a1 + 4384);
    }
    uint64_t v10 = 0;
    int v38 = *(_DWORD *)(a1 + 4388);
    *(_DWORD *)(a1 + 4400) = 0;
    goto LABEL_12;
  }
  *(_DWORD *)CMTime buf = -1431655766;
  uint64_t v10 = RTPGetAFRCTxInfo(*(void *)(a1 + 520), a2, 0, 0, 0, a4, a3, (_DWORD *)(a1 + 4400), (_DWORD *)(a1 + 17776), &v38, (BOOL *)(a1 + 16824), buf);
  if ((v38 & 1) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoTransmitter_UpdateRateControlStatus_cold_1();
    }
  }
  VCRateControlSetAFRCBandwidth(*(void **)(a1 + 1656), (1000 * *(_DWORD *)buf), *a2);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_12:
    if (!*(_DWORD *)(a1 + 96))
    {
LABEL_28:
      int v19 = 1;
      goto LABEL_29;
    }
    if (v38 != *(_DWORD *)(a1 + 16828) && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      int v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = *(_DWORD *)(a1 + 16828);
        *(_DWORD *)CMTime buf = 136316162;
        unint64_t v40 = v11;
        *(_WORD *)int v41 = 2080;
        *(void *)&v41[2] = "_VideoTransmitter_UpdateRateControlStatus";
        __int16 v42 = 1024;
        int v43 = 2525;
        __int16 v44 = 1024;
        unsigned int v45 = v13;
        __int16 v46 = 1024;
        int v47 = v38;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d New baseband action:[%02X->%02X].", buf, 0x28u);
      }
    }
    char v14 = v38;
    if ((v38 & 8) != 0)
    {
      RTPFlushBaseband(*(void *)(a1 + 1608), *v7, 0, 0, 0, 0, 0);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 16832));
      ++*(_DWORD *)(a1 + 16896);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16832));
      char v14 = v38;
      if ((v38 & 2) == 0)
      {
LABEL_19:
        if ((v14 & 0x10) == 0)
        {
LABEL_21:
          int v15 = *(_DWORD *)(a1 + 16828);
          if (v14)
          {
            if ((v15 & 1) == 0)
            {
              if (a3) {
                RTPUpdateAudioOnlyRateChange(*(void *)(a1 + 520), *a3);
              }
              if (a2)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                {
                  uint64_t v26 = VRTraceErrorLogLevelToCSTR();
                  double v27 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    unsigned int v28 = *a2 / 0x3E8;
                    *(_DWORD *)CMTime buf = 136315906;
                    unint64_t v40 = v26;
                    *(_WORD *)int v41 = 2080;
                    *(void *)&v41[2] = "_VideoTransmitter_UpdateRateControlStatus";
                    __int16 v42 = 1024;
                    int v43 = 2567;
                    __int16 v44 = 1024;
                    unsigned int v45 = v28;
                    _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d === Suspend outgoing video (rate:%u).", buf, 0x22u);
                  }
                }
              }
            }
            uint64_t v20 = 2149449745;
            *(_DWORD *)(a1 + 4388) &= 0xFFFFFFE5;
            *(_DWORD *)(a1 + 16828) = v38;
            return v20;
          }
          if (a2)
          {
            if ((v15 & 1) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v16 = VRTraceErrorLogLevelToCSTR();
              unint64_t v17 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v18 = *a2 / 0x3E8;
                *(_DWORD *)CMTime buf = 136315906;
                unint64_t v40 = v16;
                *(_WORD *)int v41 = 2080;
                *(void *)&v41[2] = "_VideoTransmitter_UpdateRateControlStatus";
                __int16 v42 = 1024;
                int v43 = 2579;
                __int16 v44 = 1024;
                unsigned int v45 = v18;
                _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d === Resume outgoing video (rate:%u).", buf, 0x22u);
              }
            }
          }
          *(_DWORD *)(a1 + 4388) &= 0xFFFFFFE5;
          *(_DWORD *)(a1 + 16828) = v38;
          goto LABEL_28;
        }
LABEL_20:
        *(void *)int v41 = 0xAAAAAAAAAAAAAAAALL;
        unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
        *(_DWORD *)CMTime buf = *(_DWORD *)(a1 + 1748);
        _VideoTransmitter_GenerateKeyFrameNow(a1, (unsigned __int16 *)buf, 2, 0, 0);
        char v14 = v38;
        goto LABEL_21;
      }
    }
    else if ((v38 & 2) == 0)
    {
      goto LABEL_19;
    }
    RTPFlushBaseband(*(void *)(a1 + 520), *v7, *(_DWORD *)(a1 + 17272), 1u, 0, 0, 0);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16832));
    ++*(_DWORD *)(a1 + 16900);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16832));
    char v14 = v38;
    if ((v38 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  int v19 = 0;
LABEL_29:
  uint64_t v20 = 2149449745;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16912));
  int v21 = *(_DWORD *)(a1 + 16904);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16912));
  if (!v21)
  {
    if (v19)
    {
      if (*(unsigned char *)(a1 + 18281) && !*(unsigned char *)(a1 + 18280) && *(unsigned char *)(a1 + 18288))
      {
        if (a3) {
          RTPUpdateAudioOnlyRateChange(*(void *)(a1 + 520), *a3);
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v22 = VRTraceErrorLogLevelToCSTR();
          double v23 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            unint64_t v40 = v22;
            *(_WORD *)int v41 = 2080;
            *(void *)&v41[2] = "_VideoTransmitter_UpdateRateControlStatus";
            __int16 v42 = 1024;
            int v43 = 2605;
            _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Outgoing video stopped using Smart Brake", buf, 0x1Cu);
          }
        }
        *(unsigned char *)(a1 + 18280) = 1;
      }
      if (*(unsigned char *)(a1 + 18282))
      {
        if (*(unsigned char *)(a1 + 18280))
        {
          if (!*(unsigned char *)(a1 + 18288)) {
            return v20;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v24 = VRTraceErrorLogLevelToCSTR();
            double v25 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315650;
              unint64_t v40 = v24;
              *(_WORD *)int v41 = 2080;
              *(void *)&v41[2] = "_VideoTransmitter_UpdateRateControlStatus";
              __int16 v42 = 1024;
              int v43 = 2610;
              _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Outgoing video resumed using Smart Brake", buf, 0x1Cu);
            }
          }
          *(unsigned char *)(a1 + 18280) = 0;
        }
      }
      else if (*(unsigned char *)(a1 + 18280))
      {
        return v20;
      }
    }
    CMTimeValue v29 = (pthread_mutex_t *)(a1 + 1680);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1680));
    if (*(_DWORD *)(a1 + 1772) != *(_DWORD *)(a1 + 1768))
    {
      RTPGetTimeRefreshFrame(*(void *)(a1 + 520), &v35, &v36);
      if (v36 >= *(_DWORD *)(a1 + 1768))
      {
        unint64_t v30 = MicroToNTP(v35);
        unsigned int v31 = NTPToMiddle32(v30);
        RTPGetLastEchoedMyTxTS(*(void *)(a1 + 520), &v37);
        if (v37 != -1 && (unsigned __int16)(v37 - (v31 >> 6)) <= 0x7FFEu)
        {
          *(_DWORD *)(a1 + 1776) = 1;
          *(_DWORD *)(a1 + 1772) = *(_DWORD *)(a1 + 1768);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v32 = VRTraceErrorLogLevelToCSTR();
            uint64_t v33 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136316418;
              unint64_t v40 = v32;
              *(_WORD *)int v41 = 2080;
              *(void *)&v41[2] = "_VideoTransmitter_UpdateRateControlStatus";
              __int16 v42 = 1024;
              int v43 = 2633;
              __int16 v44 = 1024;
              unsigned int v45 = v36;
              __int16 v46 = 1024;
              int v47 = v37;
              __int16 v48 = 1024;
              int v49 = (unsigned __int16)(v31 >> 6);
              _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Refresh frame[%u] stabilized(TxTS %u >= %u).\n", buf, 0x2Eu);
            }
          }
        }
      }
    }
    pthread_mutex_unlock(v29);
    return v10;
  }
  return v20;
}

uint64_t _VideoTransmitter_PrepareAndSetupEncodingArgs(uint64_t a1, uint64_t a2, int a3, __CVBuffer *a4, unsigned int a5, int a6, int a7, long long *a8, double a9, int a10, int a11, long long *a12, __int16 a13)
{
  v52[2] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = (pthread_mutex_t *)(a1 + 1680);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1680));
  int v23 = *(_DWORD *)(a1 + 1744);
  pthread_mutex_unlock(v22);
  if (a3 && *(void *)(a1 + 432) && v23 >= 3)
  {
    int v40 = a6;
    int v41 = a7;
    unsigned int v43 = a5;
    uint64_t v24 = v52;
    int v25 = v23 - 2;
    __int16 v42 = *(__CVBuffer **)(a1 + 432);
  }
  else
  {
    if ((((*(_DWORD *)(a1 + 16) - 110) < 0x10) & (0xC001u >> (*(unsigned char *)(a1 + 16) - 110))) != 0)
    {
      int v40 = a6;
      int v41 = a7;
      __int16 v42 = a4;
      unsigned int v43 = a5;
    }
    else
    {
      if (!a4) {
        return 2149449745;
      }
      unsigned int v43 = a5;
      __int16 v42 = a4;
      int v40 = a6;
      int v41 = a7;
      if (*(_DWORD *)(a1 + 496) == 1)
      {
        uint64_t v26 = *(__CVBuffer **)(a1 + 432);
        if (v26)
        {
          CVPixelBufferRelease(v26);
          *(void *)(a1 + 432) = 0;
        }
        CVPixelBufferRef v27 = CVPixelBufferRetain(a4);
        int v25 = 0;
        uint64_t v24 = 0;
        *(void *)(a1 + 432) = v27;
        goto LABEL_13;
      }
    }
    int v25 = 0;
    uint64_t v24 = 0;
  }
LABEL_13:
  if (*(_DWORD *)(a1 + 496) == 2)
  {
    if (a9 - *(double *)(a1 + 17768) > 5.0)
    {
      unsigned int v28 = *(_DWORD *)(a1 + 32) / 400;
      if (v28 <= 0x101) {
        unsigned int v28 = 257;
      }
      *(_DWORD *)(a1 + 17776) = v28;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v38 = VRTraceErrorLogLevelToCSTR();
        CMTimeValue v29 = *MEMORY[0x1E4F47A50];
        log = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            int v30 = *(_DWORD *)(a1 + 17776);
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v45 = v38;
            __int16 v46 = 2080;
            int v47 = "_VideoTransmitter_PrepareAndSetupEncodingArgs";
            __int16 v48 = 1024;
            int v49 = 2741;
            __int16 v50 = 1024;
            int v51 = v30;
            _os_log_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d generate fake frame now, size %d", buf, 0x22u);
          }
        }
        else if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          _VideoTransmitter_PrepareAndSetupEncodingArgs_cold_1();
        }
      }
    }
  }
  else if (*(unsigned char *)(a1 + 16826))
  {
    VCRateControlGetLargeFrameSize(*(void **)(a1 + 1656), (_DWORD *)(a1 + 17776));
  }
  else
  {
    *(_DWORD *)(a1 + 17776) = 0;
  }
  *(_DWORD *)(a2 + 180) = v40;
  long long v31 = *a8;
  *(void *)(a2 + 56) = *((void *)a8 + 2);
  *(_OWORD *)(a2 + 40) = v31;
  *(_DWORD *)(a2 + 192) = v41;
  *(_DWORD *)(a2 + 172) = *(_DWORD *)(a1 + 17776);
  *(_DWORD *)(a2 + 240) = a11;
  *(_DWORD *)(a2 + 224) = a10;
  *(unsigned char *)(a2 + 244) = v43;
  *(void *)a2 = *(void *)(a1 + 24);
  *(_DWORD *)(a2 + 8) = v25;
  *(void *)(a2 + 16) = v24;
  *(_DWORD *)(a2 + 24) = v25;
  *(void *)(a2 + 32) = v24;
  *(void *)(a2 + 88) = v42;
  *(void *)(a2 + 100) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a2 + 120) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a2 + 124) = atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 4436), 0, memory_order_relaxed);
  *(_DWORD *)(a2 + 128) = atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 4416), 0, memory_order_relaxed);
  *(_DWORD *)(a2 + 280) = atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 1676), 0, memory_order_relaxed);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 16528);
  *(void *)(a2 + 152) = *(void *)(a1 + 16544);
  memcpy((void *)(a2 + 330), (const void *)(a1 + 440), 2 * *(unsigned __int8 *)(a1 + 464));
  *(unsigned char *)(a2 + 354) = *(unsigned char *)(a1 + 464);
  memcpy((void *)(a2 + 356), (const void *)(a1 + 466), 2 * *(unsigned __int8 *)(a1 + 490));
  uint64_t result = 0;
  *(_DWORD *)(a2 + 380) = *(_DWORD *)(a1 + 490);
  *(_DWORD *)(a2 + 184) = (*(_DWORD *)(a1 + 17764) >> 2) & (*(_DWORD *)(a1 + 17764) << 30 >> 31);
  int v33 = *(_DWORD *)(a1 + 16976);
  BOOL v35 = v33 == 2 || v33 == 4;
  *(_DWORD *)(a2 + 188) = v35;
  *(_DWORD *)(a2 + 232) = (v43 >> 3) & 1;
  *(_DWORD *)(a2 + 236) = *(unsigned __int8 *)(a1 + 16992);
  *(void *)(a2 + 196) = *(void *)(a1 + 17376);
  *(int32x4_t *)(a2 + 204) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(a1 + 17400)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(a1 + 17432)));
  *(unsigned char *)(a2 + 440) = *(unsigned char *)(a1 + 18092);
  *(unsigned char *)(a2 + 448) = *(unsigned char *)(a1 + 18104);
  long long v36 = *a12;
  long long v37 = a12[1];
  *(void *)(a2 + 432) = *((void *)a12 + 4);
  *(_OWORD *)(a2 + 400) = v36;
  *(_OWORD *)(a2 + 416) = v37;
  *(_WORD *)(a2 + 452) = a13;
  *(_DWORD *)(a1 + 320) += *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 324) += *(_DWORD *)(a1 + 4416);
  return result;
}

void _VideoTransmitter_CheckStatusAndHandleError(uint64_t a1, int a2)
{
  if ((a2 + 12915) <= 0xF && ((1 << (a2 + 115)) & 0xBD89) != 0 || a2 == -12211 || a2 == -12218)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoTransmitter_CheckStatusAndHandleError_cold_1();
      }
    }
    _VideoTransmitter_EnqueueEncoderError(a1, -2145517538);
  }
}

void _VideoTransmitter_EnqueueEncoderError(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  double v4 = VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 17736));
  *double v4 = a2;
  OSStatus v5 = CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 17752), v4);
  if (v5)
  {
    OSStatus v6 = v5;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      int v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v9 = 136316162;
        uint64_t v10 = v7;
        __int16 v11 = 2080;
        int v12 = "_VideoTransmitter_EnqueueEncoderError";
        __int16 v13 = 1024;
        int v14 = 3400;
        __int16 v15 = 2048;
        uint64_t v16 = a1;
        __int16 v17 = 1024;
        OSStatus v18 = v6;
        _os_log_error_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_ERROR, " [%s] %s:%d %p CMSimpleQueueEnqueue Full error=%d", (uint8_t *)&v9, 0x2Cu);
      }
    }
    VCMemoryPool_Free(*(OSQueueHead **)(a1 + 17736), v4);
  }
}

void _VideoTransmitter_TransmitFrame(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  if ((_VideoTransmitter_TransmitEncodedVideoFrame(a1, a2, a3) & 0x80000000) != 0
    && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoTransmitter_TransmitFrame_cold_1();
    }
  }
}

uint64_t _VideoTransmitter_TransmitEncodedVideoFrame(uint64_t a1, uint64_t a2, CMSampleBufferRef sbuf)
{
  *(void *)((char *)&v202[21] + 4) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 16496;
  CFTypeRef cf = 0;
  uint64_t v180 = 0;
  long long v178 = 0u;
  *(_OWORD *)destination = 0u;
  __int16 v7 = *(_WORD *)(a1 + 18096);
  *(_WORD *)(a1 + 18096) = v7 + 1;
  WORD1(v178) = v7;
  if (!sbuf)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v136 = VRTraceErrorLogLevelToCSTR();
      int v137 = *MEMORY[0x1E4F47A50];
      int v138 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          *(void *)&uint8_t buf[4] = v136;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoTransmitter_ReadSampleBufferAttachments";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 3578;
          _os_log_impl(&dword_1E1EA4000, v137, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCPCompressionSession Error: Encoder returned a NULL frame", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
      {
        _VideoTransmitter_TransmitEncodedVideoFrame_cold_8();
      }
    }
    int v14 = 0;
    unsigned int v24 = 0;
    goto LABEL_20;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 16) - 110;
  BOOL v9 = v8 > 0xF;
  int v10 = (1 << v8) & 0xC001;
  _ZF = v9 || v10 == 0;
  if (_ZF)
  {
    int SampleSize = CMSampleBufferGetSampleSize(sbuf, 0);
  }
  else
  {
    DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
    if (!DataBuffer)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VideoTransmitter_TransmitEncodedVideoFrame_cold_11();
        }
      }
      int v14 = 0;
      goto LABEL_10;
    }
    int SampleSize = CMBlockBufferGetDataLength(DataBuffer);
  }
  int v14 = SampleSize;
LABEL_10:
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (SampleAttachmentsArray)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    _VideoTransmitter_ProcessMediaPriorityAttachment(a1, ValueAtIndex, a2);
    value = 0;
    int ValueIfPresent = CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F200], (const void **)&value);
    OSStatus v18 = (const void *)*MEMORY[0x1E4F1CFD0];
    uint64_t v19 = value;
    uint64_t v20 = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1A8]);
    if (v18 == v19 && ValueIfPresent != 0 || *MEMORY[0x1E4F1CFC8] != (void)v20)
    {
      char v23 = 0x80;
      goto LABEL_27;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v29 = VRTraceErrorLogLevelToCSTR();
      int v30 = *MEMORY[0x1E4F47A50];
      BOOL v31 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      char v23 = 0;
      if (!v31) {
        goto LABEL_27;
      }
      *(_DWORD *)CMTime buf = 136315906;
      *(void *)&uint8_t buf[4] = v29;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_ProcessSampleAttachmentsArray";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 3470;
      LOWORD(v202[0]) = 1024;
      *(_DWORD *)((char *)v202 + 2) = v14;
      _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d GOT A KEY FRAME FROM ENCODER (%d)!", buf, 0x22u);
    }
    char v23 = 0;
LABEL_27:
    *(unsigned char *)(a2 + 96) = v23;
    if (v18 == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F453B0]))
    {
      *(_DWORD *)(a2 + 100) |= 2u;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v32 = VRTraceErrorLogLevelToCSTR();
        int v33 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoTransmitter_ProcessSampleAttachmentsArray";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 3479;
          _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d GET A REFRESH FRAME FROM ENCODER!", buf, 0x1Cu);
        }
      }
    }
    *(_DWORD *)int valuePtr = -1431655766;
    CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F453B8]);
    if (v34)
    {
      CFNumberGetValue(v34, kCFNumberSInt32Type, valuePtr);
      int v35 = *(_DWORD *)valuePtr;
      *(_DWORD *)(a2 + 100) |= 1u;
    }
    else
    {
      int v35 = -1;
    }
    *(_DWORD *)(a2 + 104) = v35;
    CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F45438]);
    long long v37 = (void *)(a2 + 136);
    if (v36) {
      CFNumberGetValue(v36, kCFNumberDoubleType, v37);
    }
    else {
      *long long v37 = 0xBFF0000000000000;
    }
    CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F453F8]);
    uint64_t v39 = (void *)(a2 + 144);
    if (v38) {
      CFNumberGetValue(v38, kCFNumberDoubleType, v39);
    }
    else {
      *uint64_t v39 = 0xBFF0000000000000;
    }
    CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F453D8]);
    int v41 = (void *)(a2 + 152);
    if (v40) {
      CFNumberGetValue(v40, kCFNumberDoubleType, v41);
    }
    else {
      *int v41 = 0xBFF0000000000000;
    }
    LODWORD(v174) = 0;
    CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F453A0]);
    if (v42)
    {
      CFNumberGetValue(v42, kCFNumberSInt32Type, &v174);
      int v43 = v174;
    }
    else
    {
      int v43 = 0;
    }
    *(_DWORD *)(a2 + 176) = v43;
    LODWORD(v180) = VideoUtil_GetEncodedFrameSEINaluOverheadBytes(ValueAtIndex);
    CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"EncoderMode");
    uint64_t v45 = (_DWORD *)(a2 + 228);
    if (v44) {
      CFNumberGetValue(v44, kCFNumberSInt32Type, v45);
    }
    else {
      *uint64_t v45 = 0;
    }
    if (*(unsigned char *)(a2 + 440))
    {
      CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"TileOrder");
      if (v46)
      {
        CFNumberGetValue(v46, kCFNumberSInt16Type, &v178);
        if ((unsigned __int16)v178 != WORD1(v178) && (int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v47 = VRTraceErrorLogLevelToCSTR();
          __int16 v48 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v47;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoTransmitter_ProcessSampleAttachmentsArray";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 3539;
            LOWORD(v202[0]) = 1024;
            *(_DWORD *)((char *)v202 + 2) = (unsigned __int16)v178;
            HIWORD(v202[0]) = 1024;
            LODWORD(v202[1]) = WORD1(v178);
            _os_log_error_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_ERROR, " [%s] %s:%d Received decoding order %u, but expecting decoding order %u", buf, 0x28u);
          }
        }
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoTransmitter_TransmitEncodedVideoFrame_cold_10();
          }
        }
        LOWORD(v178) = 0;
      }
      CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"TileID");
      if (v49)
      {
        CFNumberGetValue(v49, kCFNumberSInt32Type, (char *)&v178 + 4);
        int v50 = DWORD1(v178);
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoTransmitter_TransmitEncodedVideoFrame_cold_9();
          }
        }
        int v50 = 0;
        DWORD1(v178) = 0;
      }
      DWORD2(v178) = v50;
    }
    if (*(unsigned char *)(a2 + 448))
    {
      CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"TemporalID");
      if (v51) {
        CFNumberGetValue(v51, kCFNumberSInt32Type, (char *)&v178 + 8);
      }
    }
    unsigned int v24 = v14;
    goto LABEL_70;
  }
  unsigned int v24 = v14;
LABEL_20:
  if (*(unsigned char *)(a2 + 448)) {
    _VideoTransmitter_GetStreamIndexFromAttachment(sbuf, (char *)&v178 + 8);
  }
  *(unsigned char *)(a2 + 96) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 136) = _Q0;
  *(void *)(a2 + 152) = 0xBFF0000000000000;
LABEL_70:
  if (DWORD2(v178) >= *(_DWORD *)(a1 + 1600))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v52 = VRTraceErrorLogLevelToCSTR();
      uint64_t v53 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v116 = *(_DWORD *)(a1 + 1600);
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v52;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_ReadSampleBufferAttachments";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 3594;
        LOWORD(v202[0]) = 2048;
        *(void *)((char *)v202 + 2) = a1;
        WORD1(v202[1]) = 1024;
        HIDWORD(v202[1]) = DWORD2(v178);
        LOWORD(v202[2]) = 1024;
        *(_DWORD *)((char *)&v202[2] + 2) = v116;
        _os_log_error_impl(&dword_1E1EA4000, v53, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter=%p Invaid streamIndex=%d (streamCount=%u)", buf, 0x32u);
      }
    }
    DWORD2(v178) = 0;
  }
  if (*(_DWORD *)(a1 + 496) == 2) {
    _VideoTransmitter_UpdateVideoPriorityScore(a1, a2, sbuf);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v54 = VRTraceErrorLogLevelToCSTR();
    __int16 v55 = *MEMORY[0x1E4F47A50];
    uint64_t v56 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        int v57 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v54;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_TransmitEncodedVideoFrame";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 4952;
        LOWORD(v202[0]) = 1024;
        *(_DWORD *)((char *)v202 + 2) = v57;
        HIWORD(v202[0]) = 1024;
        LODWORD(v202[1]) = (unsigned __int16)v178;
        WORD2(v202[1]) = 1024;
        *(_DWORD *)((char *)&v202[1] + 6) = DWORD1(v178);
        _os_log_impl(&dword_1E1EA4000, v55, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Encoder returned frame with RTP timestamp %d, decodingOrder %d, tileID %d", buf, 0x2Eu);
      }
    }
    else if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      int v135 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)CMTime buf = 136316418;
      *(void *)&uint8_t buf[4] = v54;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_TransmitEncodedVideoFrame";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 4952;
      LOWORD(v202[0]) = 1024;
      *(_DWORD *)((char *)v202 + 2) = v135;
      HIWORD(v202[0]) = 1024;
      LODWORD(v202[1]) = (unsigned __int16)v178;
      WORD2(v202[1]) = 1024;
      *(_DWORD *)((char *)&v202[1] + 6) = DWORD1(v178);
      _os_log_debug_impl(&dword_1E1EA4000, v55, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Encoder returned frame with RTP timestamp %d, decodingOrder %d, tileID %d", buf, 0x2Eu);
    }
  }
  if (*(_DWORD *)(v6 + 320) && (int v58 = *(_DWORD *)(a2 + 172)) != 0)
  {
    if (v58 <= v14) {
      int v58 = v14;
    }
    int v59 = v58 + 408;
  }
  else
  {
    int v59 = v14 + 400;
  }
  destination[0] = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 18136), v59, 0);
  destination[1] = (void *)__PAIR64__(v59, v14);
  if (destination[0])
  {
    if (v14 >= 1)
    {
      uint64_t v61 = CMSampleBufferGetDataBuffer(sbuf);
      CMBlockBufferCopyDataBytes(v61, 0, v24, destination[0]);
    }
    int v177 = -1431655766;
    int v176 = 0;
    unsigned int v62 = *(_DWORD *)(a1 + 16) - 110;
    if (v62 <= 0xF && ((1 << v62) & 0xC001) != 0)
    {
      ++*(_DWORD *)(v6 + 1296);
      _VideoTransmitter_UpdateCompoundStreamIDs(a1, a2, (uint64_t)&v178);
      uint64_t v63 = a1 + 120 * SDWORD2(v178);
      uint64_t Stream = v63 + 520;
      *(_DWORD *)(v63 + 572) = DWORD1(v178);
      *(_DWORD *)(a1 + 4432) = _VideoTransmitter_GetFECLevelOfProtection(a1, a2);
      int v176 = (char *)destination[0];
      int v177 = (int)destination[1];
      goto LABEL_117;
    }
    int v65 = *(_DWORD *)(v6 + 972);
    if (v65 == 1752589105 || v65 == 1635148593)
    {
      if (destination[0] && LODWORD(destination[1]) == 4) {
        *(_DWORD *)destination[0] = 0x4000000;
      }
      if (!*(unsigned char *)(a2 + 96))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v66 = VRTraceErrorLogLevelToCSTR();
          long long v67 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v68 = *(_DWORD *)(a1 + 24);
            int v69 = *(_DWORD *)(a1 + 28);
            int v71 = *(_DWORD *)(a2 + 180);
            int v70 = *(_DWORD *)(a2 + 184);
            *(_DWORD *)CMTime buf = 136316674;
            *(void *)&uint8_t buf[4] = v66;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoTransmitter_PrepareBitstream";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 3651;
            LOWORD(v202[0]) = 1024;
            *(_DWORD *)((char *)v202 + 2) = v68;
            HIWORD(v202[0]) = 1024;
            LODWORD(v202[1]) = v69;
            WORD2(v202[1]) = 1024;
            *(_DWORD *)((char *)&v202[1] + 6) = v70;
            WORD1(v202[2]) = 1024;
            HIDWORD(v202[2]) = v71;
            _os_log_impl(&dword_1E1EA4000, v67, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoUtil_AddImgDescToBitstream to stream with width %d, height %d fUseSPSPPS %d TS:%08X", buf, 0x34u);
          }
        }
        VideoUtil_AddImgDescToBitstream(sbuf, a2, *(_DWORD *)(a2 + 184), *(_DWORD *)(v6 + 972), (uint64_t)destination[0], (int *)&destination[1], SHIDWORD(destination[1]));
      }
      if (*(_DWORD *)(v6 + 320) && LODWORD(destination[1]) != 4 && SLODWORD(destination[1]) < *(_DWORD *)(a2 + 172)) {
        VideoUtil_AddFakeLargeFrameData(a2, (uint64_t)destination[0], (int *)&destination[1]);
      }
    }
    unsigned int v72 = *(_DWORD *)(a2 + 172);
    if (v72)
    {
      if (LODWORD(destination[1]) < v72)
      {
        if (*(_DWORD *)(v6 + 324))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v73 = VRTraceErrorLogLevelToCSTR();
            int v74 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v75 = *(_DWORD *)(a2 + 172);
              *(_DWORD *)CMTime buf = 136316162;
              *(void *)&uint8_t buf[4] = v73;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoTransmitter_PrepareBitstream";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 3678;
              LOWORD(v202[0]) = 1024;
              *(_DWORD *)((char *)v202 + 2) = v75;
              HIWORD(v202[0]) = 1024;
              LODWORD(v202[1]) = destination[1];
              _os_log_impl(&dword_1E1EA4000, v74, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ^^^^ CODEC LATE/SKIPPING: reqd %d  got %d ", buf, 0x28u);
            }
          }
        }
      }
    }
    uint64_t Stream = _VideoTransmitter_UpdateEncoderArgsAndGetStream(a1, a2, v60, (uint64_t)&v178);
    uint64_t v76 = _VideoTransmitter_EncryptFrame(a1, Stream, &v176, &v177, (uint64_t)&v178, *(unsigned char *)(a2 + 96) == 0, (CMBlockBufferRef *)&cf);
    if (!v76)
    {
      if (!Stream)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoTransmitter_TransmitEncodedVideoFrame_cold_2();
          }
        }
        goto LABEL_214;
      }
LABEL_117:
      int v77 = *(unsigned __int8 *)(a2 + 96);
      unsigned __int8 v78 = *(unsigned char *)(a2 + 244);
      uint64_t v79 = *(void *)(a1 + 1648);
      if (v79 && VCMediaControlInfoGeneratorGetVersion(v79) == 1) {
        v78 &= ~4u;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v80 = VRTraceErrorLogLevelToCSTR();
        unsigned int v81 = *MEMORY[0x1E4F47A50];
        CMTimeValue v82 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            int v83 = *(unsigned __int8 *)(a2 + 384);
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v80;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoTransmitter_TransmitEncodedVideoFrame";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 4991;
            LOWORD(v202[0]) = 1024;
            *(_DWORD *)((char *)v202 + 2) = v83;
            _os_log_impl(&dword_1E1EA4000, v81, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [Media Priority] Sending video priority=%d", buf, 0x22u);
          }
        }
        else if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
        {
          _VideoTransmitter_TransmitEncodedVideoFrame_cold_6();
        }
      }
      BOOL v168 = v77 == 0;
      int v173 = v177;
      uint64_t v170 = v176;
      unsigned int v171 = *(_DWORD *)(a2 + 180);
      *(_OWORD *)CMTime buf = *(_OWORD *)(a2 + 40);
      *(void *)&buf[16] = *(void *)(a2 + 56);
      double Seconds = CMTimeGetSeconds((CMTime *)buf);
      int v85 = *(_DWORD *)(a2 + 100);
      int v172 = *(unsigned __int8 *)(a2 + 354);
      char v164 = *(unsigned char *)(a2 + 384);
      int v165 = *(_DWORD *)(a2 + 240);
      int v86 = *(unsigned __int8 *)(a2 + 448);
      __int16 v162 = *(_WORD *)(a2 + 450);
      char v163 = *(unsigned char *)(a2 + 380);
      unsigned int v87 = v180;
      int v161 = *(_DWORD *)(a2 + 400);
      long long v174 = *(_OWORD *)(a2 + 404);
      uint64_t v175 = *(void *)(a2 + 420);
      int v159 = *(_DWORD *)(a2 + 428);
      int v160 = v86;
      uint64_t v166 = *(void *)(a2 + 432);
      int v192 = 0;
      ptr = 0;
      double v88 = micro();
      if (v77)
      {
        if ((v85 & 2) == 0) {
          goto LABEL_129;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 260) = 1;
        ++*(_DWORD *)(a1 + 264);
        ++*(_DWORD *)(a1 + 272);
        if ((v85 & 2) == 0)
        {
LABEL_129:
          uint64_t v89 = 2149449731;
          if (!*(_DWORD *)(a1 + 260))
          {
            uint64_t v89 = 2149449745;
            goto LABEL_219;
          }
          unsigned __int8 v158 = v78;
          int v167 = v77;
          int v155 = *(_DWORD *)(a1 + 4432);
          SummerAdd((double)v173, v88);
          __int16 v169 = (uint64_t *)Stream;
          SummerAdd((double)v87, v88);
          long long v183 = 0u;
          long long v184 = 0u;
          long long v185 = 0u;
          long long v186 = 0u;
          unsigned int v90 = *(_DWORD *)(a1 + 496);
          value = (void *)(a1 + 1748);
          LOWORD(v183) = 10;
          *((void *)&v183 + 1) = a1 + 1744;
          *(void *)&long long v184 = a1 + 1680;
          int v156 = (pthread_mutex_t *)(a1 + 1680);
          long long v154 = (uint64_t *)(a1 + 280);
          *((void *)&v184 + 1) = a1 + 280;
          *(void *)&long long v185 = a1 + 288;
          uint64_t v187 = 0;
          *((void *)&v185 + 1) = a1 + 276;
          BOOL v91 = v90 == 2 && *(_DWORD *)(a1 + 4432) == 0;
          BYTE3(v187) = v91;
          CFAllocatorRef allocator = *(CFAllocatorRef *)(a1 + 18128);
          uint64_t v189 = a1 + 304;
          uint64_t v190 = a1 + 312;
          if (!VCRateControlGetProbingSequencePacketizationInfo(*(void **)(a1 + 1656), &v186, (_DWORD *)&v186 + 2, (_DWORD *)&v186 + 1)|| !*(unsigned char *)(v6 + 330))
          {
            DWORD2(v186) = 0;
            *(void *)&long long v186 = 0;
          }
          if (*(_DWORD *)(a1 + 496) == 2)
          {
            if (*(_DWORD *)(v6 + 1280)) {
              LODWORD(v186) = 3;
            }
            *(_DWORD *)(v6 + 1280) = 0;
          }
          int v92 = v186;
          BYTE12(v186) = *(_DWORD *)(v6 + 316) != 0;
          unsigned int v157 = (int)v186 > 0;
          char ProbePkt = Throttling_VideoTransmitter_ForceMinFirstProbePkt(*(unsigned __int8 *)(v6 + 328), v157);
          BOOL v94 = 0;
          BYTE13(v186) = ProbePkt;
          int v95 = *(_DWORD *)(v6 + 480);
          BOOL v97 = v95 == 2 || v95 == 4;
          if (!v167 && v97) {
            BOOL v94 = *(_DWORD *)(a1 + 4376) >> 6 < 0x271u;
          }
          BYTE14(v186) = v94;
          HIWORD(v187) = *(_WORD *)(Stream + 48);
          BYTE4(v187) = *(unsigned char *)(v6 + 1596);
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 17288));
          __int16 v98 = *(_WORD *)(v6 + 858);
          if (!v98) {
            __int16 v98 = *(_WORD *)(v6 + 780);
          }
          LOWORD(v187) = v98;
          BYTE2(v187) = *(unsigned char *)(v6 + 782);
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 17288));
          if (!v172 || *(unsigned char *)(v6 + 856))
          {
            LOWORD(v187) = v187
                         - VTU_GetOverhead(v172, (v90 < 6) & (0x3Au >> v90), (v90 < 6) & (0x3Au >> v90), BYTE2(v187));
            BOOL v99 = (uint64_t *)Stream;
          }
          else
          {
            LOWORD(v187) = v187 - VCNetworkUtils_AdditionalOverheadForIDSOptions(v172, 1, 1);
            *(void *)int valuePtr = 0;
            *(void *)unsigned int v200 = 0;
            *(_DWORD *)unsigned int v200 = VCMediaControlInfoGeneratorGetType(*(void *)(a1 + 1648));
            v200[4] = VCMediaControlInfoGeneratorGetVersion(*(void *)(a1 + 1648));
            BOOL v99 = (uint64_t *)Stream;
            int v100 = VCFramingOverheadCalculationUtils_PerPacketMediaFramingOverheadWithRTPHandle(*(void *)Stream, (unsigned int *)v200, (uint64_t *)valuePtr);
            if (v100 < 0)
            {
              int v105 = v100;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v153 = VRTraceErrorLogLevelToCSTR();
                int v106 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  uint64_t v107 = *v169;
                  *(_DWORD *)CMTime buf = 136316674;
                  *(void *)&uint8_t buf[4] = v153;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "_VideoTransmitter_SetupSplitterData";
                  *(_WORD *)&unsigned char buf[22] = 1024;
                  *(_DWORD *)&unsigned char buf[24] = 2057;
                  LOWORD(v202[0]) = 1024;
                  *(_DWORD *)((char *)v202 + 2) = v105;
                  HIWORD(v202[0]) = 2048;
                  v202[1] = v107;
                  LOWORD(v202[2]) = 1024;
                  *(_DWORD *)((char *)&v202[2] + 2) = *(_DWORD *)v200;
                  HIWORD(v202[2]) = 1024;
                  LODWORD(v202[3]) = v200[4];
                  _os_log_error_impl(&dword_1E1EA4000, v106, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to get framing overhead response=%d rtpHandle=%p, mediaControlConfig generatorType=%u version=%d", buf, 0x38u);
                }
              }
            }
            else
            {
              LOWORD(v187) = v187 - *(_WORD *)valuePtr;
            }
          }
          int v101 = *(_DWORD *)(a1 + 16);
          if ((v101 - 110) <= 0xF && ((1 << (v101 - 110)) & 0xC001) != 0) {
            int v102 = VTU_SplitGenericDataIntoPackets((uint64_t)&value, v101, (uint64_t)v170, v173, &ptr, *(_DWORD *)(a1 + 4376));
          }
          else {
            int v102 = VTU_SplitVideoIntoPackets((unsigned __int16 **)&value, v101, v170, v173, &ptr, 0, 0, 1, 0, *(_DWORD *)(a1 + 4424), *(_DWORD *)(a1 + 4376), v155);
          }
          int v103 = v102;
          if (v102 < 2)
          {
            if (!v102) {
              goto LABEL_167;
            }
          }
          else
          {
            *(double *)(a1 + 17768) = v88;
          }
          if (v102 > *(_DWORD *)(a1 + 276))
          {
LABEL_167:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VideoTransmitter_TransmitEncodedVideoFrame_cold_4();
              }
            }
            uint64_t v104 = *(void *)(a1 + 1632);
            if (v104 != 0xFFFFFFFFLL) {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 1616) + 40))(v104, a1 + 1748, 2);
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VideoTransmitter_TransmitEncodedVideoFrame_cold_3();
              }
            }
            goto LABEL_216;
          }
          *(_WORD *)uint64_t v6 = v102;
          if (*(unsigned char *)(v6 + 12))
          {
            *(_DWORD *)(v6 + 8) = v171;
            *(unsigned char *)(v6 + 12) = 0;
          }
          else
          {
            unsigned int v108 = v171 - *(_DWORD *)(v6 + 8);
            if (v108 && v108 <= 0x7FFFFFFE)
            {
              ++*(_WORD *)(v6 + 4);
              *(_DWORD *)(v6 + 8) = v171;
            }
          }
          if (v85 & 2 | v168)
          {
            RTPRecordKeyFrame(*v99, *(_DWORD *)(a1 + 16), v102, v171, v168);
            uint64_t v109 = *(void *)(a1 + 1664);
            if (v109)
            {
              *(void *)&unsigned char buf[12] = 0;
              *(void *)&uint8_t buf[4] = 0;
              *(void *)&buf[20] = 0x400000000;
              memset((char *)&v202[2] + 1, 0, 19);
              memset(&v202[6], 0, 124);
              unsigned int v110 = *(_DWORD *)(a1 + 16);
              *(_DWORD *)CMTime buf = 10;
              v202[1] = 0;
              v202[0] = 0;
              LOBYTE(v202[2]) = v167 == 0;
              HIDWORD(v202[4]) = v171;
              v202[5] = __PAIR64__(v103, v110);
              VCRateControlSetStatistics(v109, buf);
            }
          }
          if (!*(_DWORD *)(v6 + 316) && !*(_DWORD *)(v6 + 320)) {
            goto LABEL_198;
          }
          if (v92 < 1) {
            goto LABEL_198;
          }
          int v111 = v186;
          if (v186 == v103 || !*(_DWORD *)(v6 + 324)) {
            goto LABEL_198;
          }
          int v112 = DWORD2(v186);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v113 = VRTraceErrorLogLevelToCSTR();
            uint64_t v114 = *MEMORY[0x1E4F47A50];
            __int16 v115 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136316162;
                *(void *)&uint8_t buf[4] = v113;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoTransmitter_LogBWEInfo";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = 1893;
                LOWORD(v202[0]) = 1024;
                *(_DWORD *)((char *)v202 + 2) = v111;
                HIWORD(v202[0]) = 1024;
                LODWORD(v202[1]) = v103;
                _os_log_impl(&dword_1E1EA4000, v114, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ^^^^MISMATCH of req'd Probe Packets and splitter's: %d %d", buf, 0x28u);
              }
            }
            else if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)CMTime buf = 136316162;
              *(void *)&uint8_t buf[4] = v113;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoTransmitter_LogBWEInfo";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 1893;
              LOWORD(v202[0]) = 1024;
              *(_DWORD *)((char *)v202 + 2) = v111;
              HIWORD(v202[0]) = 1024;
              LODWORD(v202[1]) = v103;
              _os_log_debug_impl(&dword_1E1EA4000, v114, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ^^^^MISMATCH of req'd Probe Packets and splitter's: %d %d", buf, 0x28u);
            }
          }
          if (g_iBWEstLogLevel < 6) {
            goto LABEL_198;
          }
          memset(v200, 170, 20);
          strncpy(buf, "^^^^Probe pkts ", 0xC8uLL);
          if (v103 < 1)
          {
            int v140 = 0;
          }
          else
          {
            uint64_t v139 = 0;
            int v140 = 0;
            uint64_t v141 = *v154;
            do
            {
              __sprintf_chk(v200, 0, 0x14uLL, "%d ", *(_DWORD *)(v141 + v139));
              __strlcat_chk();
              uint64_t v141 = *v154;
              if ((double)v112 * 0.95 <= (double)*(int *)(*v154 + v139)) {
                ++v140;
              }
              if (strlen(buf) > 0xB9) {
                break;
              }
              _ZF = 4 * v103 - 4 == v139;
              v139 += 4;
            }
            while (!_ZF);
          }
          int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
          if (v140 >= v111)
          {
            if (ErrorLogLevelForModule >= 8)
            {
              uint64_t v149 = VRTraceErrorLogLevelToCSTR();
              long long v150 = *MEMORY[0x1E4F47A50];
              long long v151 = *MEMORY[0x1E4F47A50];
              if (!*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG)) {
                  _VideoTransmitter_TransmitEncodedVideoFrame_cold_5();
                }
                goto LABEL_274;
              }
              if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)int valuePtr = 136315906;
                *(void *)&valuePtr[4] = v149;
                __int16 v194 = 2080;
                unsigned int v195 = "_VideoTransmitter_LogBWEInfo";
                __int16 v196 = 1024;
                int v197 = 1915;
                __int16 v198 = 2080;
                *(void *)int v199 = buf;
                int v146 = " [%s] %s:%d szMsg = %s";
                unint64_t v147 = v150;
                uint32_t v148 = 38;
                goto LABEL_269;
              }
            }
          }
          else if (ErrorLogLevelForModule >= 8)
          {
            uint64_t v143 = VRTraceErrorLogLevelToCSTR();
            CFAllocatorRef v144 = *MEMORY[0x1E4F47A50];
            double v145 = *MEMORY[0x1E4F47A50];
            if (!*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int valuePtr = 136316162;
                *(void *)&valuePtr[4] = v143;
                __int16 v194 = 2080;
                unsigned int v195 = "_VideoTransmitter_LogBWEInfo";
                __int16 v196 = 1024;
                int v197 = 1917;
                __int16 v198 = 1024;
                *(_DWORD *)int v199 = v112;
                *(_WORD *)&v199[4] = 2080;
                *(void *)&v199[6] = buf;
                _os_log_debug_impl(&dword_1E1EA4000, v144, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Expected: %d but \t %s", valuePtr, 0x2Cu);
              }
              goto LABEL_274;
            }
            if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int valuePtr = 136316162;
              *(void *)&valuePtr[4] = v143;
              __int16 v194 = 2080;
              unsigned int v195 = "_VideoTransmitter_LogBWEInfo";
              __int16 v196 = 1024;
              int v197 = 1917;
              __int16 v198 = 1024;
              *(_DWORD *)int v199 = v112;
              *(_WORD *)&v199[4] = 2080;
              *(void *)&v199[6] = buf;
              int v146 = " [%s] %s:%d Expected: %d but \t %s";
              unint64_t v147 = v144;
              uint32_t v148 = 44;
LABEL_269:
              _os_log_impl(&dword_1E1EA4000, v147, OS_LOG_TYPE_DEFAULT, v146, valuePtr, v148);
            }
          }
LABEL_274:
          BOOL v99 = v169;
LABEL_198:
          *(_OWORD *)CMTime buf = v174;
          *(void *)&buf[16] = v175;
          CMTimeGetSeconds((CMTime *)buf);
          kdebug_trace();
          if (*(int *)(v6 + 1592) > 1)
          {
            VideoUtil_ConstructSubFrameIdentifer(*((unsigned __int16 *)v99 + 24), *((unsigned int *)v99 + 13));
            kdebug_trace();
          }
          int v117 = *(_DWORD *)(a1 + 496);
          if (v117 == 5 || v117 == 3)
          {
            *(void *)&buf[16] = 0x1000000;
            memset(&v202[1], 0, 164);
            int v118 = *(_DWORD *)(a1 + 16584) + *(_DWORD *)(a1 + 16568);
            int v119 = *(_DWORD *)(v6 + 80) + *(_DWORD *)(v6 + 64);
            uint64_t v120 = *(void *)(a1 + 1664);
            *(void *)CMTime buf = 6;
            *(double *)&buf[8] = v88;
            *(_DWORD *)&unsigned char buf[24] = (unsigned __int16)(v171 >> 8);
            v202[0] = __PAIR64__(v118, v119);
            VCRateControlSetStatistics(v120, buf);
          }
          *(_OWORD *)&uint8_t buf[4] = v174;
          *(void *)&buf[20] = v175;
          *(_DWORD *)CMTime buf = v161;
          LODWORD(v202[0]) = v159;
          *(void *)((char *)v202 + 4) = v166;
          *((void *)&v152 + 1) = &v192;
          *(void *)&long long v152 = ptr;
          uint64_t v121 = _VideoTransmitter_TransmitVideoPacketsInGroups(a1, v99, v103, v171, v168, 0, 0, v85, Seconds, v88, v158, v165, v157, v173, v152, (__int16 *)(a2 + 330), v172, v164, (__int16 *)(a2 + 356),
                   v163,
                   buf,
                   v160 != 0,
                   v162);
          if ((v121 & 0x80000000) != 0)
          {
            uint64_t v89 = v121;
LABEL_216:
            if (ptr && ptr != v170) {
              CFAllocatorDeallocate(allocator, ptr);
            }
            goto LABEL_219;
          }
          ++*(_DWORD *)(v6 + 1304);
          if (!v167 && *(unsigned char *)(v6 + 1752))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v122 = VRTraceErrorLogLevelToCSTR();
              uint64_t v123 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v124 = *(_DWORD *)(a1 + 264);
                int v125 = *(unsigned __int16 *)(a2 + 330);
                int v126 = *((unsigned __int16 *)v99 + 24);
                *(_DWORD *)CMTime buf = 136316930;
                *(void *)&uint8_t buf[4] = v122;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VideoTransmitter_PacketizeAndTransmitEncodedVideoFrame";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = 4798;
                LOWORD(v202[0]) = 2048;
                *(void *)((char *)v202 + 2) = a1;
                WORD1(v202[1]) = 1024;
                HIDWORD(v202[1]) = v124;
                LOWORD(v202[2]) = 1024;
                *(_DWORD *)((char *)&v202[2] + 2) = v192;
                HIWORD(v202[2]) = 1024;
                LODWORD(v202[3]) = v125;
                WORD2(v202[3]) = 1024;
                *(_DWORD *)((char *)&v202[3] + 6) = v126;
                _os_log_impl(&dword_1E1EA4000, v123, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter[%p] keyFrameCounter:%d Sent key frame bytes:%d with streamID:%d decodingOrder:%d", buf, 0x3Eu);
              }
            }
            *(double *)(a1 + 4336) = v88;
            *(_WORD *)CMTime buf = v192;
            CFAllocatorRef v127 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CFNumberRef v129 = CFNumberCreate(v127, kCFNumberSInt16Type, buf);
            CFDictionaryAddValue(Mutable, @"VCVSKeyFrameSize", v129);
            CFRelease(v129);
            reportingVideoStreamEvent();
            CFRelease(Mutable);
          }
          if (ptr && ptr != v170) {
            CFAllocatorDeallocate(allocator, ptr);
          }
          pthread_mutex_lock(v156);
          int v130 = *(_DWORD *)(a1 + 1672);
          *(_DWORD *)(a1 + 1672) = 0;
          pthread_mutex_unlock(v156);
          SummerAdd((double)(v192 + v130), v88);
LABEL_214:
          uint64_t v89 = 0;
          goto LABEL_219;
        }
      }
      ++*(_DWORD *)(a1 + 272);
      goto LABEL_129;
    }
    uint64_t v89 = v76;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoTransmitter_TransmitEncodedVideoFrame_cold_7();
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoTransmitter_TransmitEncodedVideoFrame_cold_1();
      }
    }
    uint64_t v89 = 4294967089;
  }
LABEL_219:
  double v131 = *(double *)(a2 + 136);
  if (v131 <= 0.0) {
    double v131 = *(double *)(a1 + 16528);
  }
  *(double *)(a1 + 16528) = v131;
  double v132 = *(double *)(a2 + 144);
  if (v132 <= 0.0) {
    double v132 = *(double *)(a1 + 16536);
  }
  *(double *)(a1 + 16536) = v132;
  double v133 = *(double *)(a2 + 152);
  if (v133 <= 0.0) {
    double v133 = *(double *)(a1 + 16544);
  }
  *(double *)(a1 + 16544) = v133;
  if (destination[0])
  {
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 18136), destination[0]);
    destination[0] = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v89;
}

void _VideoTransmitter_DispatchEncoderCallback(uint64_t a1, uint64_t a2, int a3, opaqueCMSampleBuffer *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = CheckInHandleDebug();
  if (v8)
  {
    uint64_t v9 = v8;
    _VideoTransmitter_CheckStatusAndHandleError(v8, a3);
    if (a4)
    {
      if (CMSampleBufferGetSampleSize(a4, 0))
      {
        unsigned __int16 valuePtr = 0;
        LODWORD(buf.value) = 0;
        CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a4, 0);
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"TileOrder");
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
          valuePtr += *(_WORD *)(v9 + 18094);
        }
        CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"TileID");
        if (v13)
        {
          CFNumberGetValue(v13, kCFNumberSInt32Type, &buf);
          uint64_t value_low = LODWORD(buf.value);
        }
        else
        {
          uint64_t value_low = 0;
        }
        VideoUtil_ConstructSubFrameIdentifer(valuePtr, value_low);
        CMTime buf = *(CMTime *)(a2 + 404);
        CMTimeGetSeconds(&buf);
        kdebug_trace();
        if (*(unsigned char *)(v9 + 18208))
        {
          _VideoTransmitter_TransmitFrame(v9, a2, a4);
          _VideoTransmitter_ProcessEncoderArgs(v9, (_DWORD *)a2);
          CheckOutHandleDebug();
        }
        else
        {
          CFRetain(a4);
          int v21 = *(NSObject **)(v9 + 17720);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 0x40000000;
          block[2] = ___VideoTransmitter_DispatchEncoderCallback_block_invoke;
          block[3] = &__block_descriptor_tmp_8;
          void block[4] = v9;
          void block[5] = a2;
          void block[6] = a4;
          block[7] = a1;
          dispatch_async(v21, block);
        }
        return;
      }
      _VideoTransmitter_ProcessEncoderArgs(v9, (_DWORD *)a2);
      CheckOutHandleDebug();
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        return;
      }
      uint64_t v19 = VRTraceErrorLogLevelToCSTR();
      uint64_t v16 = *MEMORY[0x1E4F47A50];
      uint64_t v20 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        LODWORD(buf.value) = 136315650;
        *(CMTimeValue *)((char *)&buf.value + 4) = v19;
        LOWORD(buf.flags) = 2080;
        *(void *)((char *)&buf.flags + 2) = "_VideoTransmitter_DispatchEncoderCallback";
        HIWORD(buf.epoch) = 1024;
        int v25 = 3361;
        OSStatus v18 = " [%s] %s:%d Encoder callback returned an empty sample buffer";
        goto LABEL_19;
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        _VideoTransmitter_DispatchEncoderCallback_cold_3();
      }
    }
    else
    {
      _VideoTransmitter_ProcessEncoderArgs(v9, (_DWORD *)a2);
      CheckOutHandleDebug();
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        return;
      }
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      uint64_t v16 = *MEMORY[0x1E4F47A50];
      __int16 v17 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        LODWORD(buf.value) = 136315650;
        *(CMTimeValue *)((char *)&buf.value + 4) = v15;
        LOWORD(buf.flags) = 2080;
        *(void *)((char *)&buf.flags + 2) = "_VideoTransmitter_DispatchEncoderCallback";
        HIWORD(buf.epoch) = 1024;
        int v25 = 3353;
        OSStatus v18 = " [%s] %s:%d Encoder callback returned a nil sample buffer";
LABEL_19:
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&buf, 0x1Cu);
        return;
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
        _VideoTransmitter_DispatchEncoderCallback_cold_2();
      }
    }
  }
  else
  {
    free((void *)a2);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoTransmitter_DispatchEncoderCallback_cold_1();
      }
    }
  }
}

void _VideoTransmitter_ProcessEncoderArgs(uint64_t a1, _DWORD *__new)
{
  int v2 = __new[111] + 1;
  __new[111] = v2;
  if (*(_DWORD *)(a1 + 18088) == v2)
  {
    OSStatus v5 = (void *)*((void *)__new + 14);
    if (v5) {
      free(v5);
    }
    uint64_t v6 = *(OSQueueHead **)(a1 + 17728);
    VCMemoryPool_Free(v6, __new);
  }
}

uint64_t _VideoTransmitter_DequeueEncoderError(uint64_t a1)
{
  if (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 17752)) < 1) {
    return 0;
  }
  while (1)
  {
    int v2 = (unsigned int *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 17752));
    if (v2)
    {
      uint64_t v3 = *v2;
      VCMemoryPool_Free(*(OSQueueHead **)(a1 + 17736), v2);
      if (v3 == -2145517538 || v3 == -2145517566) {
        break;
      }
    }
    if (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 17752)) <= 0) {
      return 0;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoTransmitter_DequeueEncoderError_cold_1();
    }
  }
  return v3;
}

void _VideoTransmitter_ProcessMediaPriorityAttachment(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned __int16 valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PriorityScore");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
    unsigned int v7 = valuePtr;
  }
  else
  {
    unsigned int v7 = 0;
  }
  unsigned int v8 = *(unsigned __int16 *)(a3 + 452);
  if (v8 <= v7) {
    unsigned int v8 = v7;
  }
  if (v8 >= 0xFF) {
    unsigned int v9 = 255;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9 <= 1) {
    unsigned int v9 = 1;
  }
  if (v8) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = 0;
  }
  unsigned __int16 v18 = v10;
  if (v7 != v10)
  {
    CFNumberRef v11 = CFNumberCreate(*(CFAllocatorRef *)(a1 + 18304), kCFNumberSInt16Type, &v18);
    CFDictionarySetValue(theDict, @"PriorityScore", v11);
    if (v11) {
      CFRelease(v11);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    CFNumberRef v13 = *MEMORY[0x1E4F47A50];
    int v14 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(unsigned __int16 *)(a3 + 452);
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v20 = v12;
        __int16 v21 = 2080;
        uint64_t v22 = "_VideoTransmitter_ProcessMediaPriorityAttachment";
        __int16 v23 = 1024;
        int v24 = 3451;
        __int16 v25 = 2112;
        uint64_t v26 = @"PriorityScore";
        __int16 v27 = 1024;
        int v28 = v18;
        __int16 v29 = 1024;
        int v30 = valuePtr;
        __int16 v31 = 1024;
        int v32 = v15;
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [Media Priority] key=%@, score=%u. (encoder=%3u, capture=%d)", buf, 0x38u);
      }
    }
    else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(unsigned __int16 *)(a3 + 452);
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v20 = v12;
      __int16 v21 = 2080;
      uint64_t v22 = "_VideoTransmitter_ProcessMediaPriorityAttachment";
      __int16 v23 = 1024;
      int v24 = 3451;
      __int16 v25 = 2112;
      uint64_t v26 = @"PriorityScore";
      __int16 v27 = 1024;
      int v28 = v18;
      __int16 v29 = 1024;
      int v30 = valuePtr;
      __int16 v31 = 1024;
      int v32 = v16;
      _os_log_debug_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [Media Priority] key=%@, score=%u. (encoder=%3u, capture=%d)", buf, 0x38u);
    }
  }
  *(unsigned char *)(a3 + 384) = v18;
}

uint64_t _VideoTransmitter_SetNewEncoderMode(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (int *)(a1 + 16652);
  *(_DWORD *)(a1 + 16652) = *(_DWORD *)(a2 + 228);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    OSStatus v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *v3;
      buf[0] = 136315906;
      if (v6) {
        unsigned int v7 = "Software";
      }
      else {
        unsigned int v7 = "Hardware";
      }
      *(void *)&buf[1] = v4;
      __int16 v10 = 2080;
      CFNumberRef v11 = "_VideoTransmitter_SetNewEncoderMode";
      __int16 v12 = 1024;
      int v13 = 3724;
      __int16 v14 = 2080;
      int v15 = v7;
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SETTING NEW ENCODER MODE: %s.", (uint8_t *)buf, 0x26u);
    }
  }
  memset(buf, 0, sizeof(buf));
  snprintf((char *)buf, 0xCuLL, "%d", *(_DWORD *)(a1 + 16));
  return reportingLog();
}

uint64_t _VideoTransmitter_FlushBasebandForRefreshFrame(uint64_t result, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(result + 96))
  {
    uint64_t v3 = result;
    uint64_t v4 = (unsigned __int8 *)(result + 16824);
    unsigned __int16 v9 = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      int v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v11 = v5;
        __int16 v12 = 2080;
        int v13 = "_VideoTransmitter_FlushBasebandForRefreshFrame";
        __int16 v14 = 1024;
        int v15 = 3738;
        __int16 v16 = 1024;
        int v17 = v7;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Got a refresh frame (%08X)", buf, 0x22u);
      }
    }
    int v8 = *(_DWORD *)(a2 + 180);
    *((_DWORD *)v4 + 112) = v8;
    RTPFlushBaseband(*(void *)(v3 + 520), *v4, v8, 2u, 0, 0, &v9);
    return RTPMarkSpecialVideoFlush(*(void *)(v3 + 520), 1, v9);
  }
  return result;
}

uint64_t _videoTransmitter_HandleLTRFrame(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 18092)) {
    a3 = *(_DWORD *)(a2 + 180);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    int v7 = *MEMORY[0x1E4F47A50];
    int v8 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(_DWORD *)(a2 + 104);
        int v16 = 136316162;
        uint64_t v17 = v6;
        __int16 v18 = 2080;
        uint64_t v19 = "_videoTransmitter_HandleLTRFrame";
        __int16 v20 = 1024;
        int v21 = 3792;
        __int16 v22 = 1024;
        int v23 = a3;
        __int16 v24 = 1024;
        int v25 = v9;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Adding new LTR from encoder timestamp=%d token=%d", (uint8_t *)&v16, 0x28u);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(_DWORD *)(a2 + 104);
      int v16 = 136316162;
      uint64_t v17 = v6;
      __int16 v18 = 2080;
      uint64_t v19 = "_videoTransmitter_HandleLTRFrame";
      __int16 v20 = 1024;
      int v21 = 3792;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 1024;
      int v25 = v15;
      _os_log_debug_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Adding new LTR from encoder timestamp=%d token=%d", (uint8_t *)&v16, 0x28u);
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2992));
  int v10 = *(_DWORD *)(a1 + 1780);
  if (v10 > 99)
  {
    *(_DWORD *)(a1 + 1780 + 4 * *(int *)(a1 + 1784) + 8) = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a1 + 1780 + 4 * *(int *)(a1 + 1784) + 408) = a3;
    int v13 = *(_DWORD *)(a1 + 1784);
    if (v13 < 99) {
      *(_DWORD *)(a1 + 1784) = v13 + 1;
    }
    else {
      *(_DWORD *)(a1 + 1784) = 0;
    }
  }
  else
  {
    int v11 = *(_DWORD *)(a1 + 1784) + v10;
    if (v11 > 99) {
      v11 -= 100;
    }
    uint64_t v12 = a1 + 1780 + 4 * v11;
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(v12 + 408) = a3;
    ++*(_DWORD *)(a1 + 1780);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2992));
}

uint64_t _VideoTransmitter_GetFramerateForStream(uint64_t a1, uint64_t a2, double *a3, float a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *a3 = 0.0;
  if (!a1) {
    return 2149449730;
  }
  int v10 = -1431655766;
  double v9 = NAN;
  uint64_t v6 = *(void *)(a2 + 8);
  double v7 = micro();
  uint64_t result = SummerLengthPred(v7 - a4, v6, (uint64_t (*)(double, double, double))SummerGreaterThan, &v9, &v10);
  if ((result & 0x80000000) == 0 && v9 >= 0.5) {
    *a3 = (double)v10 / v9;
  }
  return result;
}

uint64_t _VideoTransmitter_GenerateKeyFrameNow(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 2149449730;
  if (!a1) {
    return v5;
  }
  uint64_t v11 = (pthread_mutex_t *)(a1 + 1680);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1680));
  unsigned int v12 = *(_DWORD *)(a1 + 496);
  BOOL v13 = v12 > 5;
  int v14 = (1 << v12) & 0x2E;
  if (!v13 && v14 != 0) {
    *(_DWORD *)(a1 + 1776) = 1;
  }
  if (*(_DWORD *)(a1 + 4420) && a5 && !*(_DWORD *)(a1 + 1776))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      uint64_t v17 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(_DWORD *)(a1 + 1768);
        int v34 = 136315906;
        uint64_t v35 = v16;
        __int16 v36 = 2080;
        long long v37 = "_VideoTransmitter_GenerateKeyFrameNow";
        __int16 v38 = 1024;
        int v39 = 3856;
        __int16 v40 = 1024;
        int v41 = v18;
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Current FIR[%u] is not stabilized, ignore.", (uint8_t *)&v34, 0x22u);
      }
    }
    goto LABEL_33;
  }
  if (a3)
  {
    if (a4)
    {
      *a2 = *(_WORD *)(a1 + 1748);
      a2[1] = *(_WORD *)(a1 + 1750);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        __int16 v20 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *a2;
          int v22 = a2[1];
          int v34 = 136316162;
          uint64_t v35 = v19;
          __int16 v36 = 2080;
          long long v37 = "_VideoTransmitter_GenerateKeyFrameNow";
          __int16 v38 = 1024;
          int v39 = 3868;
          __int16 v40 = 1024;
          int v41 = v21;
          __int16 v42 = 1024;
          int v43 = v22;
          _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d new RTCP feedback message: use %d X %d", (uint8_t *)&v34, 0x28u);
        }
      }
      goto LABEL_18;
    }
    if ((int)a3 < 2 || *(int *)(a1 + 1744) < 2)
    {
LABEL_33:
      pthread_mutex_unlock(v11);
      return 2149449745;
    }
    if (!a2 || *(unsigned __int16 *)(a1 + 1748) == *a2 && *(unsigned __int16 *)(a1 + 1750) == a2[1]) {
      goto LABEL_18;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      int v28 = *MEMORY[0x1E4F47A50];
      a3 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      int v29 = *(unsigned __int16 *)(a1 + 1748);
      int v30 = *(unsigned __int16 *)(a1 + 1750);
      int v31 = *a2;
      int v32 = a2[1];
      int v34 = 136316674;
      uint64_t v35 = v27;
      __int16 v36 = 2080;
      long long v37 = "_VideoTransmitter_GenerateKeyFrameNow";
      __int16 v38 = 1024;
      int v39 = 3877;
      __int16 v40 = 1024;
      int v41 = v29;
      __int16 v42 = 1024;
      int v43 = v30;
      __int16 v44 = 1024;
      int v45 = v31;
      __int16 v46 = 1024;
      int v47 = v32;
      _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_GenerateKeyFrameNow: sizes don't match (%ux%u != %ux%u), request an IDR.", (uint8_t *)&v34, 0x34u);
    }
    a3 = 0;
  }
LABEL_18:
  ++*(_DWORD *)(a1 + 1768);
  *(_DWORD *)(a1 + 1776) = 0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v23 = VRTraceErrorLogLevelToCSTR();
    __int16 v24 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(a1 + 1768);
      int v34 = 136315906;
      uint64_t v35 = v23;
      __int16 v36 = 2080;
      long long v37 = "_VideoTransmitter_GenerateKeyFrameNow";
      __int16 v38 = 1024;
      int v39 = 3887;
      __int16 v40 = 1024;
      int v41 = v25;
      _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_GenerateKeyFrameNow counter[%u].", (uint8_t *)&v34, 0x22u);
    }
  }
  pthread_mutex_unlock(v11);
  uint64_t v26 = *(void *)(a1 + 1632);
  if (v26 == 0xFFFFFFFFLL) {
    return 2148007957;
  }
  else {
    return (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)(a1 + 1616) + 40))(v26, a2, a3);
  }
}

uint64_t VideoTransmitter_EnqueueBuffer(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, long long *a4, int a5, unsigned int a6, double a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  if (FormatDescription && CMFormatDescriptionGetMediaType(FormatDescription) == 1835365473)
  {
    return _VideoTransmitter_HandleUncompressedVideo(a1, sbuf, a3, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = CheckInHandleDebug();
    if (!v16) {
      return 2149449730;
    }
    uint64_t v17 = v16;
    uint64_t v18 = _VideoTransmitter_DequeueEncoderError(v16);
    if ((v18 & 0x80000000) == 0)
    {
      ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
      int Height = CVPixelBufferGetHeight(ImageBuffer);
      pixelBuffer = ImageBuffer;
      int Width = CVPixelBufferGetWidth(ImageBuffer);
      ++*(_DWORD *)(v17 + 17780);
      CFTypeRef v22 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F44F40], 0);
      if (v22) {
        ++*(_DWORD *)(v17 + 17808);
      }
      *(unsigned char *)(v17 + 16516) = v22 != 0;
      BOOL v23 = *(_DWORD *)(v17 + 68) == Height && *(_DWORD *)(v17 + 64) == Width
         || *(_DWORD *)(v17 + 80) == Height && *(_DWORD *)(v17 + 76) == Width;
      int v24 = *(_DWORD *)(v17 + 496);
      if (v24 != 4 && v24 != 1) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v17 + 260)) {
        BOOL v23 = 1;
      }
      if (!v23) {
        BOOL v25 = *(_DWORD *)(v17 + 92) < 10;
      }
      else {
LABEL_22:
      }
        BOOL v25 = 0;
      if (*(unsigned char *)(v17 + 17760))
      {
        if (v25)
        {
          ++*(_DWORD *)(v17 + 92);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VideoTransmitter_EnqueueBuffer_cold_1();
            }
          }
        }
        else
        {
          int v28 = (char *)VCMemoryPool_Alloc(*(OSQueueHead **)(v17 + 17744));
          if (sbuf) {
            CFRetain(sbuf);
          }
          *(void *)int v28 = sbuf;
          *((_DWORD *)v28 + 2) = a3;
          *((double *)v28 + 2) = a7;
          long long v29 = *a4;
          *((void *)v28 + 5) = *((void *)a4 + 2);
          *(_OWORD *)(v28 + 24) = v29;
          *((_DWORD *)v28 + 12) = a5;
          v28[52] = a6;
          CFNumberRef v30 = (const __CFNumber *)CMGetAttachment(sbuf, @"ioSurfaceID", 0);
          CFNumberRef v31 = (const __CFNumber *)CMGetAttachment(sbuf, @"ioSurfaceTimestamp", 0);
          int v34 = -1431655766;
          uint64_t valuePtr = 0;
          _VideoTransmitter_ExtractIOSurfaceID(&v34, v30, pixelBuffer);
          if (v31) {
            CFNumberGetValue(v31, kCFNumberSInt64Type, &valuePtr);
          }
          CMTime buf = *(CMTime *)a4;
          CMTimeGetSeconds(&buf);
          kdebug_trace();
          uint64_t v18 = VCSimpleQueueEnqueue(*(void *)(v17 + 17504), (uint64_t)v28);
          if ((v18 & 0x80000000) != 0)
          {
            if (*(void *)v28)
            {
              CFRelease(*(CFTypeRef *)v28);
              *(void *)int v28 = 0;
            }
            VCMemoryPool_Free(*(OSQueueHead **)(v17 + 17744), v28);
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VideoTransmitter_EnqueueBuffer_cold_2();
              }
            }
          }
          else
          {
            ++*(_DWORD *)(v17 + 17784);
            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v17 + 17496));
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v26 = VRTraceErrorLogLevelToCSTR();
        uint64_t v27 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.value) = 136315650;
          *(CMTimeValue *)((char *)&buf.value + 4) = v26;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "VideoTransmitter_EnqueueBuffer";
          HIWORD(buf.epoch) = 1024;
          int v36 = 3953;
          _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d CMBufferQueueEnqueue failed. Encoder thread is not running yet.", (uint8_t *)&buf, 0x1Cu);
        }
      }
    }
    CheckOutHandleDebug();
    return v18;
  }
}

uint64_t _VideoTransmitter_HandleUncompressedVideo(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, int a4, unsigned int a5, double a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v43 = 0;
  int v44 = -1431655766;
  uint64_t v12 = CheckInHandleDebug();
  if (v12)
  {
    uint64_t v13 = v12;
    memset(&v42, 170, sizeof(v42));
    CMSampleBufferGetPresentationTimeStamp(&v42, a2);
    *(CMTime *)CMTime time = v42;
    float Seconds = CMTimeGetSeconds((CMTime *)time);
    double v15 = Seconds;
    int v16 = _VideoTransmitter_CalculateVideoTimestamp(v13, a3, a6, Seconds);
    _VideoTransmitter_UpdateAVHostTimeStats(v13, a6, v15);
    int valuePtr = 0;
    uint64_t v40 = 0;
    CFNumberRef v17 = (const __CFNumber *)CMGetAttachment(a2, @"ioSurfaceID", 0);
    CFNumberRef v18 = (const __CFNumber *)CMGetAttachment(a2, @"ioSurfaceTimestamp", 0);
    int v19 = 0;
    uint64_t v20 = 0;
    if (v17)
    {
      CFNumberRef v21 = v18;
      if (v18)
      {
        CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr);
        CFNumberGetValue(v21, kCFNumberSInt64Type, &v40);
        int v19 = valuePtr;
        uint64_t v20 = v40;
      }
    }
    CMTime v39 = v42;
    uint64_t v38 = 0x3FF0000000000000;
    double v22 = micro();
    uint64_t updated = _VideoTransmitter_UpdateRateControlStatus(v13, (unsigned int *)&v44, (unsigned int *)&v43, &v38);
    if ((updated & 0x80000000) != 0)
    {
      uint64_t v30 = updated;
    }
    else
    {
      unsigned int v24 = v44;
      *(_DWORD *)(v13 + 4376) = v44;
      ++*(_DWORD *)(v13 + 17780);
      if (*(unsigned char *)(v13 + 18104))
      {
        uint64_t v25 = *(unsigned int *)(v13 + 1600);
        if (v25)
        {
          int v26 = v25 - 1;
          uint64_t v27 = (unsigned int *)(v13 + 628);
          int v28 = -1;
          while (1)
          {
            unsigned int v29 = *v27;
            v27 += 30;
            if (v29 > v24) {
              break;
            }
            ++v28;
            if (!--v25)
            {
              int v28 = v26;
              break;
            }
          }
        }
        else
        {
          int v28 = -1;
        }
        *(_DWORD *)CMTime time = 0;
        _VideoTransmitter_GetStreamIndexFromAttachment(a2, time);
        if (*(int *)time > v28) {
          goto LABEL_21;
        }
      }
      CFNumberRef v31 = VCMemoryPool_Alloc(*(OSQueueHead **)(v13 + 17728));
      int v32 = *(_DWORD *)(v13 + 256);
      CMTime v37 = v42;
      *(CMTime *)&time[4] = v39;
      *(_DWORD *)CMTime time = v19;
      int v46 = -1431655766;
      uint64_t v47 = v20;
      uint64_t v33 = _VideoTransmitter_PrepareAndSetupEncodingArgs(v13, (uint64_t)v31, v32, 0, a5, v16, a4, (long long *)&v37.value, v22, v44, v43, (long long *)time, 0);
      if ((v33 & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v13 + 18208))
        {
          if (a2) {
            CFRetain(a2);
          }
          int v34 = *(NSObject **)(v13 + 17720);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 0x40000000;
          block[2] = ___VideoTransmitter_HandleUncompressedVideo_block_invoke;
          block[3] = &__block_descriptor_tmp_50;
          void block[4] = v13;
          void block[5] = v31;
          void block[6] = a2;
          block[7] = a1;
          dispatch_async(v34, block);
          return 0;
        }
        _VideoTransmitter_TransmitFrame(v13, (uint64_t)v31, a2);
        _VideoTransmitter_ProcessEncoderArgs(v13, v31);
LABEL_21:
        CheckOutHandleDebug();
        return 0;
      }
      uint64_t v30 = v33;
      VCMemoryPool_Free(*(OSQueueHead **)(v13 + 17728), v31);
    }
    CheckOutHandleDebug();
  }
  else
  {
    uint64_t v30 = 2149449730;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoTransmitter_HandleUncompressedVideo_cold_1();
      }
    }
  }
  return v30;
}

__IOSurface *_VideoTransmitter_ExtractIOSurfaceID(_DWORD *valuePtr, CFNumberRef number, CVPixelBufferRef pixelBuffer)
{
  if (number)
  {
    return (__IOSurface *)CFNumberGetValue(number, kCFNumberSInt32Type, valuePtr);
  }
  else
  {
    uint64_t result = CVPixelBufferGetIOSurface(pixelBuffer);
    if (result) {
      uint64_t result = (__IOSurface *)IOSurfaceGetID(result);
    }
    *int valuePtr = result;
  }
  return result;
}

void VideoTransmitter_EncoderProc(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
LABEL_6:
    *a3 = 1;
    return;
  }
  uint64_t v5 = (unsigned char *)(a1 + 17488);
  *(unsigned char *)(a1 + 17760) = 1;
  ++*(_DWORD *)(a1 + 17796);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 17496), 0xFFFFFFFFFFFFFFFFLL);
  if (*v5)
  {
    *uint64_t v5 = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      double v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VideoTransmitter_EncoderProc";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 4007;
        *(_WORD *)uint64_t v33 = 2080;
        *(void *)&v33[2] = "com.apple.avconference.videotransmitter.encoderproc";
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Encoder thread \"%s\" terminated", buf, 0x26u);
      }
    }
    goto LABEL_6;
  }
  int v8 = (opaqueCMSampleBuffer **)VCSimpleQueueDequeue(*(void *)(a1 + 17504));
  if (v8)
  {
    double v9 = v8;
    int v10 = *v8;
    if (*v8)
    {
      memset(&v31, 170, sizeof(v31));
      CMSampleBufferGetPresentationTimeStamp(&v31, v10);
      if (*MEMORY[0x1E4F47A58])
      {
        os_signpost_id_t value = v31.value;
        if ((unint64_t)(v31.value - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v25 = *MEMORY[0x1E4F47A50];
          if (os_signpost_enabled((os_log_t)*MEMORY[0x1E4F47A50]))
          {
            *(_WORD *)CMTime buf = 0;
            _os_signpost_emit_with_name_impl(&dword_1E1EA4000, v25, OS_SIGNPOST_EVENT, value, "VideoTransmitter_FrameDequeue", (const char *)&unk_1E2635D2D, buf, 2u);
          }
        }
      }
      int v30 = 0;
      uint64_t valuePtr = 0;
      CFNumberRef v11 = (const __CFNumber *)CMGetAttachment(v10, @"ioSurfaceID", 0);
      CFNumberRef v12 = (const __CFNumber *)CMGetAttachment(v10, @"ioSurfaceTimestamp", 0);
      ImageBuffer = CMSampleBufferGetImageBuffer(v10);
      _VideoTransmitter_ExtractIOSurfaceID(&v30, v11, ImageBuffer);
      if (v12) {
        CFNumberGetValue(v12, kCFNumberSInt64Type, &valuePtr);
      }
      *(_OWORD *)CMTime buf = *(_OWORD *)(v9 + 3);
      *(void *)&buf[16] = v9[5];
      CMTimeGetSeconds((CMTime *)buf);
      kdebug_trace();
      long long v27 = *(_OWORD *)(v9 + 3);
      int v28 = v9[5];
      int v14 = v30;
      uint64_t v15 = valuePtr;
      VideoUtil_PropagateSampleBufferAttachmentsToPixelBuffer(v10, ImageBuffer);
      uint64_t v16 = *((unsigned int *)v9 + 2);
      double v17 = *((double *)v9 + 2);
      int v18 = *((_DWORD *)v9 + 12);
      unsigned int v19 = *((unsigned __int8 *)v9 + 52);
      CMTime v26 = *(CMTime *)((unsigned char *)v9 + 1);
      *(_DWORD *)CMTime buf = v14;
      *(_OWORD *)&uint8_t buf[4] = v27;
      *(void *)&buf[20] = v28;
      *(_DWORD *)uint64_t v33 = -1431655766;
      *(void *)&v33[4] = v15;
      int v20 = _VideoTransmitter_EncodeVideo(a1, ImageBuffer, v16, &v26, v18, v19, (uint64_t)buf, v17);
      if (*v9)
      {
        CFRelease(*v9);
        *double v9 = 0;
      }
      _VideoTransmitter_EnqueueEncoderError(a1, v20);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoTransmitter_EncoderProc_cold_2();
      }
    }
    VCMemoryPool_Free(*(OSQueueHead **)(a1 + 17744), v9);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v21 = VRTraceErrorLogLevelToCSTR();
    double v22 = *MEMORY[0x1E4F47A50];
    BOOL v23 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        *(void *)&uint8_t buf[4] = v21;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VideoTransmitter_EncoderProc";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 4051;
        _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Dequeued buffer was nil!", buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      VideoTransmitter_EncoderProc_cold_1();
    }
  }
}

VCMediaControlInfoFaceTimeAudio *_VideoTransmitter_SetStandardControlInfo(uint64_t a1, char *a2, int a3)
{
  ControlInfo = 0;
  v8[1] = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  if (v4 < 0 && a3)
  {
    v8[0] = 0xAAAAAAAAAAAAAAAALL;
    VCCVOExtensionUtils_FillCVOExtension(v4, *(_DWORD *)(a1 + 18224), (uint64_t)v8);
    uint64_t v6 = *(void *)(a1 + 1648);
    if (v6) {
      ControlInfo = VCMediaControlInfoGeneratorCreateControlInfo(v6);
    }
    else {
      ControlInfo = 0;
    }
    VCMediaControlInfoSetInfo(ControlInfo, (const char *)9, (uint64_t)v8, 8);
  }
  return ControlInfo;
}

VCMediaControlInfoFaceTimeAudio *_VideoTransmitter_SetControlInfo(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, _DWORD *a5, unsigned __int8 *a6, char a7, int a8)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 1648)) {
    return 0;
  }
  if (VCMediaControlInfoGeneratorGetType() != 2)
  {
    ControlInfo = VCMediaControlInfoGeneratorCreateControlInfo(*(void *)(a1 + 1648));
    int v18 = ControlInfo;
    if (!ControlInfo) {
      return v18;
    }
    int v19 = *(unsigned __int16 *)(a1 + 16496);
    int v20 = *(unsigned __int16 *)(a1 + 16500);
    if (VCMediaControlInfoGetVersion(ControlInfo) == 2)
    {
      LOWORD(v33) = v19;
      WORD1(v33) = v20;
      VCMediaControlInfoSetInfo(v18, (const char *)6, (uint64_t)&v33, 4);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v28 = VRTraceErrorLogLevelToCSTR();
        uint64_t v21 = *MEMORY[0x1E4F47A50];
        unsigned int v29 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v28;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoTransmitter_SetFrameExtensionData";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 1940;
            *(_WORD *)&unsigned char buf[28] = 1024;
            *(_DWORD *)&buf[30] = v20;
            *(_WORD *)&unsigned char buf[34] = 1024;
            int v32 = v19;
            _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Media Control Info - frameExtensionData frameSequenceNumber=%d totalPacketsPerFrame=%d", buf, 0x28u);
            if (!a5) {
              goto LABEL_19;
            }
LABEL_15:
            int v22 = *(_DWORD *)(a1 + 4428);
            *(void *)&long long v33 = 0;
            memset(buf, 0, sizeof(buf));
            if (!*a5) {
              goto LABEL_23;
            }
            FECHeader_PackHeaderToBuffer(a5, v22, buf, 0x24uLL, &v33);
            uint64_t v23 = v33;
            if (!(void)v33) {
              goto LABEL_23;
            }
LABEL_22:
            VCMediaControlInfoSetInfo(v18, (const char *)7, (uint64_t)buf, v23);
LABEL_23:
            if (a4 && *(unsigned char *)(a4 + 2))
            {
              *(_DWORD *)CMTime buf = 0;
              VCMediaControlInfoSetInfo(v18, (const char *)8, (uint64_t)buf, 4);
            }
            pthread_mutex_lock((pthread_mutex_t *)(a1 + 4272));
            int v24 = *(_DWORD *)(a1 + 3056);
            int v25 = v24 - 1;
            if (v24 >= 1)
            {
              int v26 = *(_DWORD *)(a1 + 3060) + v24;
              if (v26 <= 100) {
                int v27 = -1;
              }
              else {
                int v27 = -101;
              }
              *(_DWORD *)CMTime buf = bswap32(*(_DWORD *)(a1 + 3056 + 4 * (v27 + v26) + 408));
              *(_DWORD *)(a1 + 3056) = v25;
              VCMediaControlInfoSetInfo(v18, (const char *)5, (uint64_t)buf, 4);
            }
            pthread_mutex_unlock((pthread_mutex_t *)(a1 + 4272));
            VCMediaControlInfoSetInfo(v18, (const char *)3, (uint64_t)a3, 1);
            VCMediaControlInfoSetInfo(v18, (const char *)4, a2, 4);
            if ((a7 & 1) != 0
              || (VCMediaControlInfoHasInfo(v18, (const char *)5) & 1) != 0
              || (VCMediaControlInfoHasInfo(v18, (const char *)6) & 1) != 0
              || (VCMediaControlInfoHasInfo(v18, (const char *)7) & 1) != 0
              || (VCMediaControlInfoHasInfo(v18, (const char *)8) & 1) != 0)
            {
              return v18;
            }
            VCMediaControlInfoDispose((uint64_t)v18);
            return 0;
          }
        }
        else if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v28;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoTransmitter_SetFrameExtensionData";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 1940;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = v20;
          *(_WORD *)&unsigned char buf[34] = 1024;
          int v32 = v19;
          _os_log_debug_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Media Control Info - frameExtensionData frameSequenceNumber=%d totalPacketsPerFrame=%d", buf, 0x28u);
          if (a5) {
            goto LABEL_15;
          }
          goto LABEL_19;
        }
      }
    }
    if (a5) {
      goto LABEL_15;
    }
LABEL_19:
    if (!a6) {
      goto LABEL_23;
    }
    uint64_t v30 = 0;
    memset(buf, 0, sizeof(buf));
    if ((~*a6 & 3) == 0) {
      goto LABEL_23;
    }
    long long v33 = *(_OWORD *)a6;
    uint64_t v34 = *((void *)a6 + 2);
    VCFECHeader_WriteToBuffer((unsigned __int8 *)&v33, buf, 0x24uLL, &v30);
    uint64_t v23 = v30;
    if (!v30) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  return _VideoTransmitter_SetStandardControlInfo(a1, a3, a8);
}

_DWORD *_VideoTransmitter_FillLegacyFECHeader@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 8) = 0u;
  int v5 = result[1106];
  if (v5) {
    BOOL v6 = *(_DWORD *)(a3 + 32) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v7 = v5 != 0;
  int v8 = result[1107];
  *(_DWORD *)(a5 + 48) = 1;
  *(_DWORD *)a5 = v7;
  *(_DWORD *)(a5 + 4) = 1;
  if (*(unsigned char *)a3)
  {
    *(_DWORD *)(a5 + 8) = (v8 == 1) << 30;
  }
  else
  {
    if (v8 == 1) {
      int v9 = 1077936128;
    }
    else {
      int v9 = 0x800000;
    }
    *(_DWORD *)(a5 + 8) = v9;
    if (*(int *)(a2 + 8) <= 1) {
      *(_DWORD *)a5 = 0;
    }
    if (((v6 | a4 ^ 1) & 1) == 0) {
      *(_DWORD *)(a5 + 48) = *(_DWORD *)(a3 + 24) + 1;
    }
  }
  if (a4) {
    int v10 = *(_DWORD *)(a3 + 24) + 1;
  }
  else {
    int v10 = 0;
  }
  result[4148] += v10;
  return result;
}

__n128 _VideoTransmitter_PostProcessFECPacket@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int8 *a4@<X3>, OpaqueCMBlockBuffer *a5@<X4>, int a6@<W5>, unsigned __int32 a7@<W6>, __n128 *a8@<X8>)
{
  dataPointerOut[1] = *(char **)MEMORY[0x1E4F143B8];
  __int16 v15 = *((_WORD *)a4 + 1);
  unsigned int v16 = v15 & 0x1000;
  if ((v15 & 0x1000) != 0)
  {
    BOOL v17 = 0;
  }
  else
  {
    BOOL v17 = VCFECGenerator_GetNumberOutputMediaPackets(*(void *)(a1 + 18160)) == 0;
    __int16 v15 = *((_WORD *)a4 + 1);
  }
  BOOL v18 = 1;
  if ((v15 & 0x80) == 0 && (a7 & 1) == 0) {
    BOOL v18 = (~*a4 & 3) == 0;
  }
  BOOL v19 = v17 && v18;
  if (v16) {
    BOOL v19 = 0;
  }
  unsigned __int8 v25 = v19;
  if (a7) {
    a7 = FECUtil_ParityGroupTransmissionCountForFECLevel(a6);
  }
  unsigned __int32 DataLength = CMBlockBufferGetDataLength(a5);
  if (a3 | v16)
  {
    dataPointerOut[0] = 0;
    CMBlockBufferGetDataPointer(a5, 0, 0, 0, dataPointerOut);
    LOBYTE(v21) = 0;
    if (v16) {
      goto LABEL_23;
    }
  }
  else
  {
    if (*(_DWORD *)(a2 + 24)) {
      LOBYTE(v21) = 1;
    }
    else {
      int v21 = (*(unsigned __int8 *)(a2 + 44) >> 1) & 1;
    }
    dataPointerOut[0] = 0;
    CMBlockBufferGetDataPointer(a5, 0, 0, 0, dataPointerOut);
  }
  uint64_t v22 = *(void *)(a2 + 160);
  if (*(unsigned char *)(v22 + 1))
  {
    if (*(unsigned char *)(a1 + 16824)) {
      Throttling_VideoTransmitter_SetPerPktProbeSeqState(v22, a3, *(_DWORD *)(*(void *)(a1 + 280) + 4 * a3));
    }
    else {
      *(unsigned char *)(v22 + 2) = 1;
    }
  }
  *(unsigned char *)(a2 + 48) &= ~4u;
LABEL_23:
  result.n128_u64[0] = 0xAAAAAAAAAAAAAAAALL;
  result.n128_u64[1] = 0xAAAAAAAAAAAAAAAALL;
  *a8 = result;
  a8[1] = result;
  a8[2].n128_u64[0] = 0xAAAAAAAAAAAAAAAALL;
  a8->n128_u8[0] = v16 >> 12;
  a8->n128_u32[1] = 0;
  a8->n128_u32[2] = DataLength;
  a8[1].n128_u64[0] = (unint64_t)dataPointerOut[0];
  a8[1].n128_u32[2] = a7;
  a8[1].n128_u8[12] = (a3 | v16) == 0;
  a8[1].n128_u8[13] = v25;
  a8[2].n128_u32[0] = a6;
  a8[2].n128_u8[4] = v21;
  return result;
}

uint64_t _VideoTransmitter_TransmitOneVideoPacketWithFECv2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int a6, char a7, int a8)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (!a6)
  {
    char v11 = *(unsigned char *)(a2 + 88);
LABEL_7:
    CFNumberRef v12 = (__int16 **)(a2 + 80);
    goto LABEL_8;
  }
  uint64_t v10 = 88;
  if (!*(unsigned char *)(a1 + 18184)) {
    uint64_t v10 = 104;
  }
  char v11 = *(unsigned char *)(a2 + v10);
  if (*(unsigned char *)(a1 + 18184)) {
    goto LABEL_7;
  }
  CFNumberRef v12 = (__int16 **)(a2 + 96);
LABEL_8:
  uint64_t v13 = *v12;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v68 = v14;
  long long v69 = v14;
  long long v66 = v14;
  long long v67 = v14;
  long long v65 = v14;
  uint64_t v55 = a3;
  uint64_t v15 = *(void *)(a1 + 1640);
  char v16 = *(unsigned char *)(a2 + 89);
  __int16 v17 = *(_WORD *)(a2 + 174);
  int v18 = *(unsigned __int8 *)(a2 + 172);
  int v19 = *(unsigned __int8 *)(a3 + 36);
  uint64_t v57 = a1 + 16512;
  BOOL v20 = *(_DWORD *)(a1 + 17372) == 20;
  uint64_t v21 = *(void *)(a2 + 160);
  int v22 = *(unsigned __int8 *)(v21 + 1);
  int v23 = *(unsigned __int8 *)(v21 + 24);
  _VideoTransmitter_SetupIDSChannelDataFormat(v15, v16, v13, v11, v17, v18, v19, v20, (uint64_t)&v65, *(unsigned char *)(v21 + 1), *(unsigned char *)(v21 + 24));
  if ((int)a5[12] < 2 || *(unsigned char *)(v57 + 1672))
  {
    long long v62 = v67;
    long long v63 = v68;
    long long v64 = v69;
    long long v25 = v65;
    long long v24 = v66;
  }
  else
  {
    _VideoTransmitter_SetupIDSChannelDataFormat(v15, v16, *(__int16 **)(a2 + 96), *(unsigned char *)(a2 + 104), v17, v18 != 0, v19 != 0, v20, (uint64_t)buf, v22 != 0, v23 != 0);
    long long v62 = *(_OWORD *)&buf[32];
    long long v63 = *(_OWORD *)&buf[48];
    long long v64 = v60;
    long long v25 = *(_OWORD *)buf;
    long long v24 = *(_OWORD *)&buf[16];
  }
  v61[0] = v25;
  v61[1] = v24;
  uint64_t v26 = **(void **)a2;
  int v27 = *(_DWORD *)(a1 + 16);
  int v28 = *(unsigned __int8 *)(v55 + 29);
  int v29 = *(_DWORD *)(a2 + 12);
  double v30 = *(double *)(a2 + 16);
  CMTime v31 = *(void **)(v55 + 16);
  signed int v32 = *(_DWORD *)(v55 + 8);
  long long v33 = *(const void **)(a2 + 32);
  unsigned __int8 v34 = *(unsigned char *)(a2 + 40);
  int v35 = *(unsigned __int8 *)(v55 + 28);
  int v36 = *(_DWORD *)(a2 + 44);
  unsigned __int8 v37 = *(unsigned char *)(a2 + 48);
  int v38 = *(_DWORD *)(a2 + 52);
  int v39 = *(_DWORD *)(a1 + 1768);
  int v40 = *(_DWORD *)(a2 + 24);
  if ((v27 - 100) > 0x19) {
    goto LABEL_17;
  }
  int v41 = *(_DWORD *)v57;
  int v42 = 1 << (v27 - 100);
  if ((v42 & 0x3000400) == 0)
  {
    if ((v42 & 0x800001) != 0)
    {
      int v43 = RTPSendH264Packet(v26, v27, 1u, v28, v29, v31, v32, (_DWORD *)(v55 + 4), v30, v33, v34, v35, v36, v37, a5, v38, v21, v39, a4,
              (uint64_t)&v65,
              v61,
              v40 != 0,
              v41);
      goto LABEL_18;
    }
LABEL_17:
    int v43 = RTPSendH263Packet(v26, v27, 0, *(_DWORD *)(a2 + 168), v40 == 0, v28, v29, a7, v30, 0, v31, v32, (_DWORD *)(v55 + 4), v33, v34, v35, v36, v37, a5,
            v38,
            v21,
            v39,
            a4,
            0,
            0);
    goto LABEL_18;
  }
  int v43 = RTPSendUncompressedVideoPacket(v26, v27, v28, v29, v31, v32, (_DWORD *)(v55 + 4), v33, v30, v34, v35, v36, v37, a5, v38, v21, v39, a4, (uint64_t)&v65,
          v61,
          v40 != 0,
          v41);
LABEL_18:
  int v44 = v43;
  if (v43 < 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v45 = VRTraceErrorLogLevelToCSTR();
    int v46 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 136316674;
      *(void *)&uint8_t buf[4] = v45;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_TransmitOneVideoPacketWithFECv2";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 4497;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 4497;
      *(_WORD *)&unsigned char buf[34] = 2048;
      *(void *)&uint8_t buf[36] = v44;
      *(_WORD *)&unsigned char buf[44] = 1024;
      *(_DWORD *)&buf[46] = a8;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = a6;
      _os_log_error_impl(&dword_1E1EA4000, v46, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitter.c:%d: VideoTransmitter_TransmitOneFrame failed! result=%08lX i=%d isParity=%d\n", buf, 0x38u);
    }
  }
  if (*(unsigned char *)(v57 + 252) && *(void *)(a1 + 16768)) {
    _VideoTransmitter_LogPacket(a1, *(void *)(v55 + 16), *(_DWORD *)(v55 + 8), *(_DWORD *)(a2 + 12), a5, 0);
  }
  uint64_t v47 = 2147549204;
  if (v44 != -2147418092) {
    return 0;
  }
  if (*(void *)(a1 + 1632) != 0xFFFFFFFFLL) {
    (*(void (**)(void))(*(void *)(a1 + 1616) + 48))();
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v48 = VRTraceErrorLogLevelToCSTR();
    CFNumberRef v49 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 136316674;
      *(void *)&uint8_t buf[4] = v48;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_TransmitOneVideoPacketWithFECv2";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 4506;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 4506;
      *(_WORD *)&unsigned char buf[34] = 2048;
      *(void *)&uint8_t buf[36] = -2147418092;
      *(_WORD *)&unsigned char buf[44] = 1024;
      *(_DWORD *)&buf[46] = a8;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = a6;
      _os_log_error_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitter.c:%d: VideoTransmitter_TransmitOneFrame failed (RTP_E_RESTART) result=%08lX i=%d  isParity=%d\n", buf, 0x38u);
    }
  }
  return v47;
}

uint64_t _VideoTransmitter_SetupIDSChannelDataFormat@<X0>(uint64_t result@<X0>, char a2@<W1>, __int16 *a3@<X2>, char a4@<W3>, __int16 a5@<W4>, char a6@<W5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11)
{
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)a9 = 0u;
  if (result)
  {
    *(unsigned char *)(a9 + 30) = 1;
    *(void *)(a9 + 32) = result;
  }
  else
  {
    *(unsigned char *)(a9 + 24) = a4;
    __n128 result = __memcpy_chk();
  }
  *(unsigned char *)(a9 + 41) = 1;
  *(unsigned char *)(a9 + 28) = a2;
  *(unsigned char *)(a9 + 56) = a7;
  *(unsigned char *)(a9 + 72) = a6;
  if ((a6 & 1) == 0) {
    a5 = *a3;
  }
  *(_WORD *)(a9 + 74) = a5;
  *(unsigned char *)(a9 + 77) = a8 == 20;
  if (a10)
  {
    *(unsigned char *)(a9 + 25) = 1;
    *(unsigned char *)(a9 + 78) = a11;
  }
  return result;
}

uint64_t _VideoTransmitter_LogPacket(uint64_t result, uint64_t a2, int a3, int a4, _DWORD *a5, int a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  BOOL v6 = *(FILE **)(result + 16768);
  if (v6)
  {
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v37[11] = v9;
    long long v36 = v9;
    *(_OWORD *)unsigned __int8 v37 = v9;
    long long v35 = v9;
    long long v34 = v9;
    long long v33 = v9;
    long long v32 = v9;
    long long v31 = v9;
    long long v30 = v9;
    long long v29 = v9;
    long long v28 = v9;
    long long v27 = v9;
    long long v26 = v9;
    long long v25 = v9;
    long long v24 = v9;
    long long v23 = v9;
    long long v22 = v9;
    long long v21 = v9;
    long long v20 = v9;
    int v18 = -1431655766;
    long long v16 = v9;
    long long v17 = v9;
    long long v14 = v9;
    long long v15 = v9;
    *(_OWORD *)CFNumberRef v12 = v9;
    long long v13 = v9;
    char v19 = 0;
    if (a5)
    {
      int v10 = a5[2];
      if (!*a5) {
        int v10 = 0;
      }
    }
    else
    {
      int v10 = 0;
    }
    __n128 result = fprintf(v6, "[%08X:%d:%d:%08X]\n", a4, a6, a3, v10);
    if (a3 >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        __sprintf_chk(v12, 0, 0x64uLL, " %02X", *(unsigned __int8 *)(a2 + v11));
        __n128 result = __strlcat_chk();
        if ((~(_BYTE)v11 & 0x1F) == 0)
        {
          __n128 result = fprintf(v6, "%s\n", &v19);
          char v19 = 0;
        }
        ++v11;
      }
      while (a3 != v11);
      if ((a3 & 0x1F) != 0) {
        return fprintf(v6, "%s\n", &v19);
      }
    }
  }
  return result;
}

uint64_t _VideoTransmitter_TransmitVideoPacketsWithFecVersion2(uint64_t a1, uint64_t a2)
{
  v88[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  unsigned int v5 = *(_DWORD *)(a1 + 4432);
  int v6 = *(_DWORD *)(a2 + 8);
  BOOL v8 = v6 == 1 && v5 > 2;
  BOOL v77 = v8;
  if (v8)
  {
    uint64_t v9 = FECUtil_ParityGroupTransmissionCountForFECLevel(v5);
    unsigned int v79 = 0;
    int v10 = *(_DWORD *)(a2 + 8);
  }
  else
  {
    unsigned int v79 = v5;
    uint64_t v9 = 0;
    int v10 = *(_DWORD *)(a2 + 8);
  }
  if (v10 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v78 = *(void *)(a2 + 64);
    uint64_t v13 = 4 * v10;
    do
    {
      *(void *)destinationBuffer = 0;
      size_t v14 = *(int *)(*(void *)(a1 + 280) + v11);
      OSStatus v15 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 18176), 0, 0x76CuLL, *(CFAllocatorRef *)(a1 + 18168), 0, 0, v14, 1u, (CMBlockBufferRef *)destinationBuffer);
      if (v15) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = *(void *)destinationBuffer == 0;
      }
      if (v16)
      {
        OSStatus v17 = v15;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v18 = VRTraceErrorLogLevelToCSTR();
          char v19 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v18;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VideoTransmitter_PushPacketsAndEncodeWithFECVersion2";
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 4352;
            *(_WORD *)&unsigned char buf[28] = 1024;
            *(_DWORD *)&buf[30] = v17;
            *(_WORD *)&unsigned char buf[34] = 2048;
            *(void *)&uint8_t buf[36] = *(void *)destinationBuffer;
            _os_log_error_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_ERROR, " [%s] %s:%d _VideoTransmitter_TransmitVideoPacketsInGroups Buffer Allocation failed! status=%d inputBlockPacket=%p", buf, 0x2Cu);
          }
        }
      }
      else
      {
        CMBlockBufferReplaceDataBytes((const void *)(v78 + v12), *(CMBlockBufferRef *)destinationBuffer, 0, v14);
        int v20 = VCFECGenerator_PushPacket(*(void *)(a1 + 18160), *(const void **)destinationBuffer);
        if (v20 < 0)
        {
          int v21 = v20;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v76 = VRTraceErrorLogLevelToCSTR();
            long long v22 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136315906;
              *(void *)&uint8_t buf[4] = v76;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "_VideoTransmitter_PushPacketsAndEncodeWithFECVersion2";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 4347;
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = v21;
              _os_log_error_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCFECGenerator_PushPacket failed! resultFECGenerator=%d", buf, 0x22u);
            }
          }
        }
        if (*(void *)destinationBuffer) {
          CFRelease(*(CFTypeRef *)destinationBuffer);
        }
        v12 += v14;
      }
      v11 += 4;
    }
    while (v13 != v11);
  }
  unsigned int v23 = FECUtil_FECLevelofProtectionToFECPercentage(v79);
  if ((VCFECGenerator_SetFixedFECLevel(*(void *)(a1 + 18160), v23) & 0x80000000) != 0
    && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoTransmitter_TransmitVideoPacketsWithFecVersion2_cold_2();
    }
  }
  VCFECGenerator_PerformAction(*(void *)(a1 + 18160), 2);
  int NumberOutputMediaPackets = VCFECGenerator_GetNumberOutputMediaPackets(*(void *)(a1 + 18160));
  int NumberOutputPackets = VCFECGenerator_GetNumberOutputPackets(*(void *)(a1 + 18160));
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  long long v27 = (unsigned char *)MEMORY[0x1E4F47A40];
  if (ErrorLogLevelForModule >= 8)
  {
    uint64_t v28 = VRTraceErrorLogLevelToCSTR();
    long long v29 = *MEMORY[0x1E4F47A50];
    long long v30 = *MEMORY[0x1E4F47A50];
    if (*v27)
    {
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v28;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_TransmitVideoPacketsWithFecVersion2";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 4526;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = v31;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&uint8_t buf[36] = NumberOutputPackets;
        *(_WORD *)&uint8_t buf[40] = 1024;
        *(_DWORD *)&buf[42] = NumberOutputMediaPackets;
        _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCFECGenerator Pulling Packets [start] params.numPackets=%d numOutputPackets=%d numOutputMediaPackets=%d", buf, 0x2Eu);
      }
    }
    else if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      int v70 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)CMTime buf = 136316418;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_TransmitVideoPacketsWithFecVersion2";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 4526;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v70;
      *(_WORD *)&unsigned char buf[34] = 1024;
      *(_DWORD *)&uint8_t buf[36] = NumberOutputPackets;
      *(_WORD *)&uint8_t buf[40] = 1024;
      *(_DWORD *)&buf[42] = NumberOutputMediaPackets;
      _os_log_debug_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCFECGenerator Pulling Packets [start] params.numPackets=%d numOutputPackets=%d numOutputMediaPackets=%d", buf, 0x2Eu);
    }
  }
  if (NumberOutputPackets >= 1)
  {
    int v32 = 0;
    int v73 = 0;
    int v74 = 0;
    int v72 = NumberOutputPackets;
    while (1)
    {
      CFTypeRef cf = 0;
      memset(v88, 0, 24);
      if ((VCFECGenerator_PopPacket(*(void *)(a1 + 18160), &cf, (uint64_t)v88) & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          goto LABEL_88;
        }
        VRTraceErrorLogLevelToCSTR();
        BOOL v57 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
        long long v27 = (unsigned char *)MEMORY[0x1E4F47A40];
        int v56 = v74;
        if (v57) {
          _VideoTransmitter_TransmitVideoPacketsWithFecVersion2_cold_1();
        }
        goto LABEL_87;
      }
      int v33 = (unsigned __int16)(WORD1(v88[0]) & 0x1000) >> 12;
      int v34 = v73;
      if ((v88[0] & 0x10000000) == 0) {
        int v34 = v73 + 1;
      }
      unint64_t v82 = 0xAAAAAAAAAAAAAAAALL;
      v35.n128_u64[0] = 0xAAAAAAAAAAAAAAAALL;
      v35.n128_u64[1] = 0xAAAAAAAAAAAAAAAALL;
      __n128 v80 = v35;
      __n128 v81 = v35;
      int v73 = v34;
      v74 += v33;
      int v36 = v34 - 1;
      _VideoTransmitter_PostProcessFECPacket(a1, a2, v34 - 1, (unsigned __int8 *)v88, (OpaqueCMBlockBuffer *)cf, v79, v6 == 1, &v80);
      uint64_t v75 = v36;
      while (1)
      {
        unsigned __int8 v37 = _VideoTransmitter_SetControlInfo(a1, a2 + 44, (char *)(a2 + 48), *(void *)(a2 + 160), 0, (unsigned __int8 *)v88, v81.n128_i8[12], v81.n128_u8[13]);
        *(void *)&unsigned char buf[48] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v38 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&buf[16] = v38;
        *(_OWORD *)&buf[32] = v38;
        *(_OWORD *)CMTime buf = v38;
        *(__n128 *)destinationBuffer = v80;
        *(__n128 *)&destinationBuffer[16] = v81;
        *(void *)&destinationBuffer[32] = v82;
        _VideoTransmitter_FillLegacyFECHeader((_DWORD *)a1, a2, (uint64_t)destinationBuffer, v6 == 1, (uint64_t)buf);
        if (v33) {
          LOBYTE(v39) = 0;
        }
        else {
          int v39 = *(_DWORD *)(*(void *)(a1 + 288) + 4 * v75);
        }
        uint64_t v40 = _VideoTransmitter_TransmitOneVideoPacketWithFECv2(a1, a2, (uint64_t)&v80, (uint64_t)v37, buf, v33 & 1, v39, v32);
        if ((v40 & 0x80000000) != 0) {
          break;
        }
        unsigned int v41 = v79;
        if (*(_DWORD *)(a1 + 4428) == 1)
        {
          float v42 = (double)(WORD2(v88[0]) & 0x3FF) / 100.0;
          unsigned int v41 = FECUtil_FECRatioToLevelofProtection(v42);
        }
        if (*(_DWORD *)(a1 + 4424)) {
          BOOL v43 = v6 == 1;
        }
        else {
          BOOL v43 = 0;
        }
        int v44 = v80.n128_u8[0];
        uint64_t v46 = v80.n128_i32[1];
        uint64_t v45 = v80.n128_i32[2];
        if (v43) {
          unsigned __int32 v47 = v81.n128_u32[2];
        }
        else {
          unsigned __int32 v47 = 0;
        }
        if (v80.n128_u8[0]) {
          int v48 = 1;
        }
        else {
          int v48 = v47 + 1;
        }
        **(_DWORD **)(a2 + 72) += v48 * v80.n128_u32[1];
        unsigned int v49 = v48 * ((v46 - v45) & ~(((int)v46 - (int)v45) >> 31));
        int v50 = *(unsigned __int8 *)(a1 + 18184);
        if (*(unsigned char *)(a1 + 18184)) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 4416), v49, memory_order_relaxed);
        }
        uint64_t v51 = *(void *)a2;
        *(void *)(*(void *)a2 + 72) += v49;
        if (v44)
        {
          LODWORD(v45) = v48 * v45;
          ++*(_DWORD *)(a1 + 16576);
          *(void *)(a1 + 16584) += (int)v45;
          if (v50)
          {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 4436), v45, memory_order_relaxed);
            uint64_t v51 = *(void *)a2;
          }
          uint64_t v45 = (int)v45;
          *(void *)(v51 + 64) += (int)v45;
          unsigned int v52 = v41;
LABEL_69:
          *(void *)(a1 + 40 * v52 + 17824) += v45;
          goto LABEL_70;
        }
        *(void *)(a1 + 296) = *(void *)(a2 + 152);
        ++*(_DWORD *)(a1 + 16560);
        *(void *)(a1 + 16568) += v46;
        *(void *)(a1 + 40 * v41 + 17816) += v45;
        if (v6 == 1)
        {
          uint64_t v45 = v47 * v45;
          *(_DWORD *)(a1 + 16576) += v47;
          *(void *)(a1 + 16584) += v45;
          if (v50)
          {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 4436), v45, memory_order_relaxed);
            uint64_t v51 = *(void *)a2;
          }
          unsigned int v52 = v41;
          *(void *)(v51 + 64) += v45;
          goto LABEL_69;
        }
LABEL_70:
        unsigned int v79 = v41;
        if (v77)
        {
          uint64_t v53 = v9 - (v33 & 1);
          LOBYTE(v33) = 1;
          v80.n128_u8[0] = 1;
        }
        else
        {
          uint64_t v53 = v9;
        }
        uint64_t v9 = v53;
        if (!v53) {
          goto LABEL_78;
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v54 = VRTraceErrorLogLevelToCSTR();
        uint64_t v55 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)destinationBuffer = 136316418;
          *(void *)&destinationBuffer[4] = v54;
          *(_WORD *)&destinationBuffer[12] = 2080;
          *(void *)&destinationBuffer[14] = "_VideoTransmitter_TransmitVideoPacketsWithFecVersion2";
          *(_WORD *)&destinationBuffer[22] = 1024;
          *(_DWORD *)&destinationBuffer[24] = 4553;
          *(_WORD *)&destinationBuffer[28] = 1024;
          *(_DWORD *)&destinationBuffer[30] = 4553;
          *(_WORD *)&destinationBuffer[34] = 2048;
          *(void *)&destinationBuffer[36] = a1;
          __int16 v85 = 2048;
          uint64_t v86 = (int)v40;
          _os_log_error_impl(&dword_1E1EA4000, v55, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitter.c:%d: VideoTransmitter[%p] Failed to transmit the video packet with FECv2. result=%08lX", destinationBuffer, 0x36u);
        }
      }
LABEL_78:
      if (cf) {
        CFRelease(cf);
      }
      if ((v40 & 0x80000000) != 0)
      {
LABEL_89:
        long long v27 = (unsigned char *)MEMORY[0x1E4F47A40];
        int v56 = v74;
        goto LABEL_90;
      }
      if (++v32 == v72)
      {
LABEL_88:
        uint64_t v40 = 0;
        goto LABEL_89;
      }
    }
  }
  int v56 = 0;
LABEL_87:
  uint64_t v40 = 0;
LABEL_90:
  int v58 = VCFECGenerator_GetNumberOutputPackets(*(void *)(a1 + 18160));
  if (v58)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v59 = VRTraceErrorLogLevelToCSTR();
      long long v60 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v59;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_TransmitVideoPacketsWithFecVersion2";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 4577;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = 4577;
        *(_WORD *)&unsigned char buf[34] = 2048;
        *(void *)&uint8_t buf[36] = a1;
        *(_WORD *)&unsigned char buf[44] = 1024;
        *(_DWORD *)&buf[46] = v58;
        _os_log_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitter.c:%d: VideoTransmitter[%p] VCFECGenerator output packest is not zero, will force a flush numOutputPackets=%d", buf, 0x32u);
      }
    }
    int v61 = VCFECGenerator_PerformAction(*(void *)(a1 + 18160), 1);
    if (v61 < 0)
    {
      int v62 = v61;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v63 = VRTraceErrorLogLevelToCSTR();
        long long v64 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v63;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoTransmitter_TransmitVideoPacketsWithFecVersion2";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 4580;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = 4580;
          *(_WORD *)&unsigned char buf[34] = 2048;
          *(void *)&uint8_t buf[36] = a1;
          *(_WORD *)&unsigned char buf[44] = 2048;
          *(void *)&buf[46] = v62;
          _os_log_error_impl(&dword_1E1EA4000, v64, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitter.c:%d: VideoTransmitter[%p] VCFECGenerator flush failed result=%08lX", buf, 0x36u);
        }
      }
    }
  }
  SummerAdd((double)*(unint64_t *)(*(void *)a2 + 72), *(double *)(a2 + 152));
  SummerAdd((double)*(unint64_t *)(*(void *)a2 + 64), *(double *)(a2 + 152));
  if (v56) {
    ++*(_DWORD *)(a1 + 40 * v79 + 17832);
  }
  else {
    ++*(_DWORD *)(a1 + 17804);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v65 = VRTraceErrorLogLevelToCSTR();
    long long v66 = *MEMORY[0x1E4F47A50];
    long long v67 = *MEMORY[0x1E4F47A50];
    if (*v27)
    {
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        int v68 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v65;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_TransmitVideoPacketsWithFecVersion2";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 4592;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = v68;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&uint8_t buf[36] = v58;
        _os_log_impl(&dword_1E1EA4000, v66, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCFECGenerator Pulling Packets [stop] params.numPackets=%d numOutputPackets=%d", buf, 0x28u);
      }
    }
    else if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
    {
      int v71 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v65;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_TransmitVideoPacketsWithFecVersion2";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 4592;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v71;
      *(_WORD *)&unsigned char buf[34] = 1024;
      *(_DWORD *)&uint8_t buf[36] = v58;
      _os_log_debug_impl(&dword_1E1EA4000, v66, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCFECGenerator Pulling Packets [stop] params.numPackets=%d numOutputPackets=%d", buf, 0x28u);
    }
  }
  return v40;
}

uint64_t _VideoTransmitter_TransmitVideoPacketsInGroups(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, const void *a6, unsigned __int8 a7, int a8, double a9, double a10, unsigned __int8 a11, int a12, unsigned int a13, unsigned int a14, long long a15, __int16 *a16, char a17, char a18, __int16 *a19, char a20,unsigned __int8 *a21,char a22,__int16 a23)
{
  int v24 = a3;
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a1 + 17372;
  uint64_t v29 = a1 + 16498;
  uint64_t v150 = 0;
  memset(v149, 0, sizeof(v149));
  if (*(_DWORD *)(a1 + 24) == 176) {
    int v30 = 2;
  }
  else {
    int v30 = 3;
  }
  int v105 = v30;
  memset(v123, 0, sizeof(v123));
  int v124 = 0;
  Throttling_VideoTransmitter_CalcThrottlingRate(*(unsigned __int8 *)(a1 + 16824), *(_DWORD *)(a1 + 4376), *(_DWORD *)(a1 + 32), a13 != 0, a3, *(void *)(a1 + 280), a14, (uint64_t)v123);
  int v31 = *(_DWORD *)(a1 + 496);
  if (v31 == 1)
  {
    LOBYTE(v124) = *(unsigned char *)(v29 + 328);
  }
  else if (v31 == 2)
  {
    BOOL v32 = v24 <= 1 || *(unsigned char *)(v29 + 327) == 0;
    char v33 = !v32;
    BYTE1(v123[0]) = v33;
  }
  if (*(unsigned char *)(v28 + 780))
  {
    unint64_t v34 = ((unint64_t)*a21 << 56) | 0xAAAAAAAAAAAAAALL;
    long long v35 = *(_OWORD *)(a21 + 17);
    long long v147 = *(_OWORD *)(a21 + 1);
    v148[0] = v35;
    *(void *)((char *)v148 + 15) = *((void *)a21 + 4);
    *(void *)CMTime buf = a2;
    *(_DWORD *)&buf[8] = v24;
    *(_DWORD *)&unsigned char buf[12] = a4;
    *(double *)&buf[16] = a9;
    *(_DWORD *)&unsigned char buf[24] = a5;
    *(_DWORD *)&unsigned char buf[28] = -1431655766;
    *(void *)&buf[32] = a6;
    uint8_t buf[40] = a7;
    *(_WORD *)&buf[41] = -21846;
    buf[43] = -86;
    *(_DWORD *)&unsigned char buf[44] = a8;
    LOBYTE(v129) = a11;
    *(_WORD *)((char *)&v129 + 1) = -21846;
    BYTE3(v129) = -86;
    *(void *)((char *)&v129 + 4) = __PAIR64__(a13, a12);
    HIDWORD(v129) = a14;
    long long v130 = a15;
    double v131 = a16;
    char v132 = a17;
    char v133 = a18;
    __int16 v135 = -21846;
    int v134 = -1431655766;
    uint64_t v136 = a19;
    char v137 = a20;
    unint64_t v138 = v34;
    long long v139 = v147;
    *(_OWORD *)int v140 = v148[0];
    *(void *)&v140[15] = *(void *)((char *)v148 + 15);
    double v141 = a10;
    unsigned int v142 = v123;
    int v143 = v105;
    char v144 = a22;
    char v145 = -86;
    __int16 v146 = a23;
    return _VideoTransmitter_TransmitVideoPacketsWithFecVersion2(a1, (uint64_t)buf);
  }
  int v37 = VTU_ComputeTotalNumberOfGroupsPerFrame(v24);
  int v38 = v37;
  int v112 = a6;
  if (v24 < 9)
  {
    if (v37 < 129)
    {
      int v109 = 1;
      goto LABEL_27;
    }
LABEL_22:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v40 = VRTraceErrorLogLevelToCSTR();
      unsigned int v41 = *MEMORY[0x1E4F47A50];
      int v109 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v40;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VideoTransmitter_TransmitVideoPacketsInGroups";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 4631;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v38;
      *(_WORD *)&unsigned char buf[34] = 1024;
      *(_DWORD *)&uint8_t buf[36] = 128;
      _os_log_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d This frame has more groups (%d) than is supported (%d). It will be sent without FEC!", buf, 0x28u);
    }
    int v109 = 0;
LABEL_27:
    if (v24 < 1) {
      return 0;
    }
    goto LABEL_28;
  }
  BOOL v39 = *(_DWORD *)(a1 + 4440) != 1;
  if (v37 >= 129) {
    BOOL v39 = 0;
  }
  int v109 = v39;
  if (v37 >= 129) {
    goto LABEL_22;
  }
LABEL_28:
  int v42 = 0;
  char v104 = a5 == 0;
  uint64_t v101 = 0;
  uint64_t v43 = a1 + 16444;
  uint64_t v119 = v28;
  do
  {
    if (v24 == 9) {
      LODWORD(v44) = 5;
    }
    else {
      LODWORD(v44) = 8;
    }
    if (v24 >= 8) {
      uint64_t v44 = v44;
    }
    else {
      uint64_t v44 = v24;
    }
    uint64_t v115 = v44;
    int v45 = v24 - v44;
    LODWORD(v46) = *(_DWORD *)(a1 + 4432);
    long long v147 = 0u;
    v148[0] = 0u;
    memset(v151, 0, sizeof(v151));
    int v152 = 0;
    unsigned __int32 v47 = a16;
    if (!*(unsigned char *)(v28 + 812)) {
      unsigned __int32 v47 = a19;
    }
    int v117 = v47;
    char v48 = a17;
    if (!*(unsigned char *)(v28 + 812)) {
      char v48 = a20;
    }
    char v116 = v48;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v49 = VRTraceErrorLogLevelToCSTR();
      int v50 = *MEMORY[0x1E4F47A50];
      uint64_t v51 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v49;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoTransmitter_TransmitVideoPacketsOneGroup";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 4301;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = v101;
          *(_WORD *)&unsigned char buf[34] = 1024;
          *(_DWORD *)&uint8_t buf[36] = v115;
          *(_WORD *)&uint8_t buf[40] = 1024;
          *(_DWORD *)&buf[42] = v46;
          _os_log_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d FEC Group iGroupID=%d iNumPacketsInGroup=%d fecLevelOfProtection=%d", buf, 0x2Eu);
        }
      }
      else if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v49;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_TransmitVideoPacketsOneGroup";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 4301;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = v101;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&uint8_t buf[36] = v115;
        *(_WORD *)&uint8_t buf[40] = 1024;
        *(_DWORD *)&buf[42] = v46;
        _os_log_debug_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_DEBUG, " [%s] %s:%d FEC Group iGroupID=%d iNumPacketsInGroup=%d fecLevelOfProtection=%d", buf, 0x2Eu);
      }
    }
    int v102 = v45;
    int v52 = *(_DWORD *)(a1 + 4424);
    char v53 = v109 ^ 1;
    if (!v52) {
      char v53 = 1;
    }
    if ((v53 & 1) == 0)
    {
      FECUtil_SetupFECHeader(*(_DWORD *)(a1 + 4428), a1 + 4428, *(void *)(a1 + 280), v149, v115, v46, a15 + SHIDWORD(v101), v42, v45 < 1, 0, v101, (uint64_t)&v147, (uint64_t)v151);
      int v52 = *(_DWORD *)(a1 + 4424);
    }
    uint64_t v122 = 0;
    signed int v54 = 0;
    uint64_t v55 = 0;
    int v107 = 0;
    int v127 = a8;
    unsigned __int8 v126 = a11;
    int v125 = -1431655766;
    int v106 = v42;
    uint64_t v110 = 4 * v42;
    uint64_t v113 = (char *)(a15 + SHIDWORD(v101));
    int v108 = v46;
    while (1)
    {
      int v56 = v106 | v55;
      BOOL v57 = (v106 | v55) == 0;
      BOOL v59 = v102 < 1 && v115 - 1 == v55;
      BOOL v32 = v52 == 0;
      int v60 = v109;
      if (v32) {
        int v60 = 0;
      }
      if ((int)v46 >= 1)
      {
        if (v60)
        {
          v149[2] = *((_DWORD *)&v148[-1] + v55);
          LODWORD(v150) = 1;
          if (v115 == 1)
          {
            int v107 = FECUtil_ParityGroupTransmissionCountForFECLevel(v46);
            LODWORD(v150) = v150 + v107;
          }
        }
      }
      if (v115 == 1) {
        int v61 = v107 + 1;
      }
      else {
        int v61 = 0;
      }
      *(_DWORD *)(v29 + 94) += v61;
      if (BYTE1(v123[0]))
      {
        if (*(unsigned char *)(v29 + 326)) {
          Throttling_VideoTransmitter_SetPerPktProbeSeqState((uint64_t)v123, v106 + v55, *(_DWORD *)(*(void *)(a1 + 280) + v110 + 4 * v55));
        }
        else {
          BYTE2(v123[0]) = 1;
        }
      }
      v126 &= ~4u;
      int v62 = _VideoTransmitter_SetControlInfo(a1, (uint64_t)&v127, (char *)&v126, (uint64_t)v123, v149, 0, v56 == 0, v59);
      int v63 = v127;
      if (v56) {
        char v64 = 0;
      }
      else {
        char v64 = (a5 | v127 & 2) != 0;
      }
      *(void *)&long long v65 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v65 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v129 = v65;
      long long v130 = v65;
      *(_OWORD *)&buf[16] = v65;
      *(_OWORD *)&buf[32] = v65;
      *(_OWORD *)CMTime buf = v65;
      _VideoTransmitter_SetupIDSChannelDataFormat(*(void *)(a1 + 1640), a18, a16, a17, a23, a22, v64, *(_DWORD *)v119, (uint64_t)buf, SBYTE1(v123[0]), v124);
      uint64_t v66 = *a2;
      int v67 = *(_DWORD *)(a1 + 16);
      signed int v68 = *(_DWORD *)(*(void *)(a1 + 280) + v110 + 4 * v55);
      int v69 = *(_DWORD *)(a1 + 1768);
      if ((v67 - 100) > 0x19)
      {
LABEL_77:
        int v76 = v59;
        int v73 = v112;
        int v74 = RTPSendH263Packet(v66, v67, 0, v105, v104, v76, a4, *(unsigned char *)(*(void *)(a1 + 288) + v110 + 4 * v55), a9, 0, v113, v68, &v125, v112, a7, v57, v63, v126, v149,
                a12,
                (uint64_t)v123,
                v69,
                (uint64_t)v62,
                0,
                0);
        goto LABEL_78;
      }
      int v70 = *(_DWORD *)(v29 + 14);
      int v71 = 1 << (v67 - 100);
      if ((v71 & 0x3000400) != 0)
      {
        int v72 = v59;
        int v73 = v112;
        int v74 = RTPSendUncompressedVideoPacket(v66, v67, v72, a4, v113, v68, &v125, v112, a9, a7, v57, v63, v126, v149, a12, (uint64_t)v123, v69, (uint64_t)v62, (uint64_t)buf,
                0,
                a5 != 0,
                v70);
      }
      else
      {
        if ((v71 & 0x800001) == 0) {
          goto LABEL_77;
        }
        int v75 = v59;
        int v73 = v112;
        int v74 = RTPSendH264Packet(v66, v67, 1u, v75, a4, v113, v68, &v125, a9, v112, a7, v57, v63, v126, v149, a12, (uint64_t)v123, v69, (uint64_t)v62,
                (uint64_t)buf,
                0,
                a5 != 0,
                v70);
      }
LABEL_78:
      int v77 = v74;
      ++*(_DWORD *)(v29 + 62);
      *(void *)(a1 + 16568) += v125;
      uint64_t v46 = v108;
      if (*(unsigned char *)(v29 + 266) && *(void *)(a1 + 16768)) {
        _VideoTransmitter_LogPacket(a1, (uint64_t)v113, *(_DWORD *)(*(void *)(a1 + 280) + v110 + 4 * v55), a4, v149, v115);
      }
      if (v77 == -2147418092) {
        break;
      }
      *(double *)(a1 + 296) = micro();
      uint64_t v78 = *(int *)(*(void *)(a1 + 280) + v110 + 4 * v55);
      HIDWORD(v122) += v125;
      int v79 = v125 - v78;
      v54 += v79 & ~(v79 >> 31);
      int v52 = *(_DWORD *)(a1 + 4424);
      if (v115 == 1 && v108 >= 1 && v52)
      {
        HIDWORD(v122) += v125 * v107;
        v54 += v79 * v107;
        LODWORD(v122) = v78 * v107;
      }
      v113 += v78;
      if (v115 == ++v55) {
        goto LABEL_90;
      }
    }
    if (*(void *)(a1 + 1632) != 0xFFFFFFFFLL) {
      (*(void (**)(void))(*(void *)(a1 + 1616) + 48))();
    }
LABEL_90:
    int v111 = FECUtil_ParityGroupTransmissionCountForFECLevel(v108);
    if (v111 >= 1)
    {
      int v80 = 0;
      while (1)
      {
        int v127 = a8;
        unsigned __int8 v126 = a11;
        int v125 = 0;
        BOOL v81 = (int)v46 <= 0 || *(_DWORD *)(a1 + 4424) == 0;
        int v82 = v109;
        if (v81) {
          int v82 = 0;
        }
        if (v82 == 1)
        {
          int RealNumParity = FECUtil_GetRealNumParity(v115, v46);
          if (RealNumParity >= 1) {
            break;
          }
        }
LABEL_116:
        ++v80;
        uint64_t v46 = v108;
        if (v80 == v111) {
          goto LABEL_117;
        }
      }
      uint64_t v84 = 0;
      uint64_t v85 = RealNumParity;
      uint64_t v86 = (char *)(a1 + 4444);
      while (2)
      {
        if (*(int *)(v43 + 4 * v84) > 0)
        {
          v149[2] = *((_DWORD *)v151 + v84);
          WORD2(v150) = *(_WORD *)(v43 + 2 * v84 + 28);
          __int16 v87 = (*(_WORD *)v29)++;
          HIWORD(v150) = v87;
          double v88 = _VideoTransmitter_SetControlInfo(a1, (uint64_t)&v127, (char *)&v126, (uint64_t)v123, v149, 0, 0, 0);
          *(void *)&long long v89 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v89 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v129 = v89;
          long long v130 = v89;
          *(_OWORD *)&buf[16] = v89;
          *(_OWORD *)&buf[32] = v89;
          *(_OWORD *)CMTime buf = v89;
          _VideoTransmitter_SetupIDSChannelDataFormat(*(void *)(a1 + 1640), a18, v117, v116, a23, a22, 0, *(_DWORD *)v119, (uint64_t)buf, SBYTE1(v123[0]), v124);
          uint64_t v90 = *a2;
          signed int v91 = *(_DWORD *)(v43 + 4 * v84);
          int v92 = *(_DWORD *)(a1 + 16);
          int v93 = *(_DWORD *)(a1 + 1768);
          if ((v92 - 100) <= 0x19)
          {
            int v94 = *(_DWORD *)(v29 + 14);
            int v95 = 1 << (v92 - 100);
            if ((v95 & 0x3000400) != 0)
            {
              RTPSendUncompressedVideoPacket(v90, v92, 0, a4, v86, v91, &v125, v73, a9, a7, 0, v127, v126, v149, a12, (uint64_t)v123, v93, (uint64_t)v88, (uint64_t)buf,
                0,
                a5 != 0,
                v94);
LABEL_111:
              ++*(_DWORD *)(v29 + 78);
              int v98 = v125;
              *(void *)(a1 + 16584) += v125;
              if (*(unsigned char *)(v29 + 266) && *(void *)(a1 + 16768))
              {
                _VideoTransmitter_LogPacket(a1, (uint64_t)v86, *(_DWORD *)(v43 + 4 * v84), a4, v149, v115);
                int v98 = v125;
              }
              int v99 = *(_DWORD *)(v43 + 4 * v84);
              HIDWORD(v122) += v98;
              v54 += (v98 - v99) & ~((v98 - v99) >> 31);
              LODWORD(v122) = (v99 & ~(v99 >> 31)) + v122;
LABEL_115:
              ++v84;
              v86 += 1500;
              if (v85 == v84) {
                goto LABEL_116;
              }
              continue;
            }
            if ((v95 & 0x800001) != 0)
            {
              RTPSendH264Packet(v90, v92, 1u, 0, a4, v86, v91, &v125, a9, v73, a7, 0, v127, v126, v149, a12, (uint64_t)v123, v93, (uint64_t)v88,
                (uint64_t)buf,
                0,
                a5 != 0,
                v94);
              goto LABEL_111;
            }
          }
          RTPSendH263Packet(v90, v92, 0, v105, v104, 0, a4, 0, a9, 0, v86, v91, &v125, v73, a7, 0, v127, v126, v149,
            a12,
            (uint64_t)v123,
            v93,
            (uint64_t)v88,
            0,
            0);
          goto LABEL_111;
        }
        break;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v96 = VRTraceErrorLogLevelToCSTR();
        BOOL v97 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v100 = *(_DWORD *)(v43 + 4 * v84);
          *(_DWORD *)CMTime buf = 136316162;
          *(void *)&uint8_t buf[4] = v96;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VideoTransmitter_TransmitParityPackets";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 4246;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = v84;
          *(_WORD *)&unsigned char buf[34] = 1024;
          *(_DWORD *)&uint8_t buf[36] = v100;
          _os_log_error_impl(&dword_1E1EA4000, v97, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parity size i=%d ParitySizes[i]=%d", buf, 0x28u);
        }
        int v73 = v112;
      }
      goto LABEL_115;
    }
LABEL_117:
    **((_DWORD **)&a15 + 1) += HIDWORD(v122);
    uint64_t v28 = v119;
    if (*(unsigned char *)(v119 + 812))
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 4436), v122, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 4416), v54, memory_order_relaxed);
    }
    SummerAdd((double)(int)v122, a10);
    SummerAdd((double)v54, a10);
    HIDWORD(v101) = v113 - a15;
    int v42 = v115 + v106;
    LODWORD(v101) = v101 + 1;
    int v24 = v102;
  }
  while (v102 > 0);
  return 0;
}

void _VideoTransmitter_UpdateVideoPriorityScore(uint64_t a1, uint64_t a2, CMSampleBufferRef sbuf)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int8 **)(a1 + 16664);
  if ((*(_DWORD *)(a1 + 16656) - 1) > 1)
  {
    if (v6)
    {
      unsigned __int8 v11 = atomic_load(v6);
      *(unsigned char *)(a2 + 384) = v11;
    }
  }
  else
  {
    int v7 = atomic_load(v6);
    if (v7 != *(unsigned __int8 *)(a2 + 384) && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(unsigned __int8 *)(a2 + 384);
        int v15 = 136316162;
        uint64_t v16 = v8;
        __int16 v17 = 2080;
        uint64_t v18 = "_VideoTransmitter_UpdateVideoPriorityScore";
        __int16 v19 = 1024;
        int v20 = 4819;
        __int16 v21 = 2048;
        uint64_t v22 = a1;
        __int16 v23 = 1024;
        int v24 = v10;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter[%p] videoPriority=%u", (uint8_t *)&v15, 0x2Cu);
      }
    }
    atomic_store(*(unsigned char *)(a2 + 384), *(unsigned __int8 **)(a1 + 16664));
  }
  if (*(unsigned char *)(a2 + 384))
  {
    ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
    CFNumberRef v13 = CFNumberCreate(*(CFAllocatorRef *)(a1 + 18304), kCFNumberCharType, (const void *)(a2 + 384));
    if (v13)
    {
      CFNumberRef v14 = v13;
      CVBufferSetAttachment(ImageBuffer, @"FramePriority", v13, kCVAttachmentMode_ShouldPropagate);
      CFRelease(v14);
    }
  }
}

void _VideoTransmitter_UpdateCompoundStreamIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 448))
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 354);
    int v7 = *(_DWORD *)(a3 + 8);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 120 * v7 + 626);
    if ((v8 + v6) >= 0xD)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        uint64_t v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v13 = *(unsigned __int8 *)(a2 + 354);
          int v14 = *(unsigned __int8 *)(a1 + 120 * *(int *)(a3 + 8) + 626);
          int v15 = 136316162;
          uint64_t v16 = v11;
          __int16 v17 = 2080;
          uint64_t v18 = "_VideoTransmitter_UpdateCompoundStreamIDs";
          __int16 v19 = 1024;
          int v20 = 4842;
          __int16 v21 = 1024;
          int v22 = v13;
          __int16 v23 = 1024;
          int v24 = v14;
          _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Temporal compounding exceeds channel limitations (main=%d temporal=%d)", (uint8_t *)&v15, 0x28u);
        }
      }
    }
    else
    {
      uint64_t v9 = a1 + 520;
      memcpy((void *)(a2 + 330 + 2 * v6), (const void *)(a1 + 520 + 120 * v7 + 82), 2 * v8);
      uint64_t v10 = v9 + 120 * *(int *)(a3 + 8);
      *(unsigned char *)(a2 + 354) += *(unsigned char *)(v10 + 106);
      *(_WORD *)(a2 + 450) = *(_WORD *)(a2 + 330);
      *(_WORD *)(a2 + 330) = *(_WORD *)(v10 + 80);
    }
  }
}

uint64_t _VideoTransmitter_UpdateEncoderArgsAndGetStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*(int *)(a4 + 24) < 1) {
    return 0;
  }
  uint64_t v7 = a1 + 16652;
  ++*(_DWORD *)(a1 + 17792);
  if (*(_DWORD *)(a1 + 16652) != *(_DWORD *)(a2 + 228)) {
    _VideoTransmitter_SetNewEncoderMode(a1, a2);
  }
  if (!*(unsigned char *)(a2 + 96))
  {
    *(_DWORD *)(v7 + 620) = *(_DWORD *)(a2 + 180);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 2992));
    if (*(int *)(a1 + 1780) >= 1) {
      *(void *)(a1 + 1780) = 0;
    }
    if (*(int *)(a1 + 2588) >= 1) {
      *(_DWORD *)(a1 + 2588) = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2992));
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(_DWORD *)a2;
        int v11 = *(_DWORD *)(a2 + 4);
        int v12 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VideoTransmitter_ResetLTRforKeyFrame";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 3785;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = v10;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&uint8_t buf[36] = v11;
        *(_WORD *)&uint8_t buf[40] = 1024;
        *(_DWORD *)&buf[42] = v12;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Got a key frame resolution=%dx%d timestamp=%08X, reset LTR.", buf, 0x2Eu);
      }
    }
  }
  if ((*(unsigned char *)(a2 + 100) & 2) != 0 && *(unsigned char *)(a2 + 96)) {
    _VideoTransmitter_FlushBasebandForRefreshFrame(a1, a2);
  }
  *(_DWORD *)(a1 + 4432) = _VideoTransmitter_GetFECLevelOfProtection(a1, a2);
  if (*(unsigned char *)(v7 + 174)
    && (*(_DWORD *)(v7 + 160) || *(_DWORD *)(v7 + 164))
    && !VCRateControlScheduleProbingSequence(*(void **)(a1 + 1656), *(unsigned int *)(a4 + 24), *(unsigned int *)(a2 + 176), *(unsigned int *)(a2 + 180), 0)&& (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoTransmitter_UpdateEncoderArgsAndGetStream_cold_1();
    }
  }
  _VideoTransmitter_UpdateCompoundStreamIDs(a1, a2, a4);
  if (!*(unsigned char *)(a2 + 96) && *(unsigned char *)(a2 + 381))
  {
    __int16 v13 = *(_WORD *)(a2 + 382);
    uint64_t v14 = *(unsigned __int8 *)(a2 + 354);
    *(unsigned char *)(a2 + 354) = v14 + 1;
    *(_WORD *)(a2 + 2 * v14 + 330) = v13;
  }
  if (*(unsigned char *)(v7 + 124) && *(void *)(a1 + 16784))
  {
    uint64_t v26 = v7;
    int v15 = *(unsigned __int8 **)(a4 + 16);
    uint64_t v16 = *(unsigned int *)(a4 + 24);
    int v17 = *(_DWORD *)(a2 + 180);
    *(void *)md = 0;
    uint64_t v51 = 0;
    int v52 = 0;
    CC_SHA1(v15, v16, md);
    uint64_t v18 = *(FILE **)(a1 + 16784);
    fprintf(v18, "[%08X:%dB SHA1:", v17, v16);
    for (uint64_t i = 0; i != 20; ++i)
      fprintf(v18, "%02X", md[i]);
    fwrite("]\n", 2uLL, 1uLL, v18);
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v49[11] = v20;
    long long v48 = v20;
    *(_OWORD *)uint64_t v49 = v20;
    long long v47 = v20;
    long long v46 = v20;
    long long v45 = v20;
    long long v44 = v20;
    long long v43 = v20;
    long long v42 = v20;
    long long v41 = v20;
    long long v40 = v20;
    long long v39 = v20;
    long long v38 = v20;
    long long v37 = v20;
    long long v36 = v20;
    long long v35 = v20;
    *(_OWORD *)&buf[33] = v20;
    *(_OWORD *)&buf[17] = v20;
    *(_OWORD *)&buf[1] = v20;
    int v33 = -1431655766;
    long long v31 = v20;
    long long v32 = v20;
    long long v29 = v20;
    long long v30 = v20;
    *(_OWORD *)long long v27 = v20;
    long long v28 = v20;
    buf[0] = 0;
    if ((int)v16 >= 1)
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        __sprintf_chk(v27, 0, 0x64uLL, " %02X", v15[j]);
        __strlcat_chk();
        if ((~(_BYTE)j & 0x1F) == 0)
        {
          fprintf(v18, "%s\n", buf);
          buf[0] = 0;
        }
      }
      if ((v16 & 0x1F) != 0) {
        fprintf(v18, "%s\n", buf);
      }
    }
    uint64_t v7 = v26;
  }
  uint64_t v22 = a1 + 120 * *(int *)(a4 + 8);
  uint64_t v23 = v22 + 520;
  *(_DWORD *)(v22 + 572) = *(_DWORD *)(a4 + 4);
  unsigned __int16 v24 = *(_WORD *)(v7 + 1442) + *(_WORD *)a4;
  *(_WORD *)(v22 + 568) = v24;
  if ((*(unsigned char *)(a2 + 100) & 1) != 0 && *(_DWORD *)(a2 + 104) != -1) {
    _videoTransmitter_HandleLTRFrame(a1, a2, v24);
  }
  return v23;
}

uint64_t _VideoTransmitter_GetFECLevelOfProtection(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 16488;
  uint64_t v4 = atomic_load((unsigned int *)(a1 + 16488));
  if (*(_DWORD *)(a1 + 496) == 1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 16) - 110;
    BOOL v6 = v5 > 0xF;
    int v7 = (1 << v5) & 0xC001;
    if (v6 || v7 == 0)
    {
      if (*(unsigned char *)(a2 + 96))
      {
        if (v4 <= 1) {
          unsigned int v16 = 1;
        }
        else {
          unsigned int v16 = v4;
        }
        if ((*(unsigned char *)(a2 + 100) & 2) != 0) {
          uint64_t v4 = v16;
        }
        else {
          uint64_t v4 = v4;
        }
      }
      else if (v4 <= 3)
      {
        uint64_t v4 = 3;
      }
      else
      {
        uint64_t v4 = v4;
      }
      if (!*(unsigned char *)(a1 + 508))
      {
        do
        {
          int v17 = *(_DWORD *)(a1 + 32);
          float v18 = FECUtil_FECLevelofProtectionToRateRatio(v4);
          BOOL v19 = v4 != 0;
          LODWORD(v4) = v4 - 1;
        }
        while (v19 && (float)((float)v17 / v18) < 77000.0);
        uint64_t v4 = (v4 + 1);
      }
      if (*(_DWORD *)(a1 + 4432) != v4)
      {
        int v20 = *(_DWORD *)(a1 + 44);
        if (v20 >= 1 && v4 >= 3)
        {
          int v21 = (int)((double)(*(_DWORD *)(a1 + 32) / v20) * 0.125);
          if (v21 <= *(unsigned __int16 *)(v3 + 788) && (int)VRTraceGetErrorLogLevelForModule() >= 6)
          {
            uint64_t v22 = VRTraceErrorLogLevelToCSTR();
            uint64_t v23 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v24 = *(unsigned __int16 *)(v3 + 788);
              int v28 = 136316418;
              uint64_t v29 = v22;
              __int16 v30 = 2080;
              long long v31 = "_VideoTransmitter_GetFECLevelOfProtection";
              __int16 v32 = 1024;
              int v33 = 6041;
              __int16 v34 = 1024;
              int v35 = v21;
              __int16 v36 = 1024;
              unsigned int v37 = v24;
              __int16 v38 = 1024;
              int v39 = v4;
              _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Duplicating single packet frames. estimatedFrameSize=%d MTU=%d level=%d", (uint8_t *)&v28, 0x2Eu);
            }
          }
        }
      }
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    int v10 = *MEMORY[0x1E4F47A50];
    int v11 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(a1 + 496);
        unsigned int v13 = atomic_load((unsigned int *)v3);
        int v14 = *(_DWORD *)(a1 + 32);
        int v28 = 136316674;
        uint64_t v29 = v9;
        __int16 v30 = 2080;
        long long v31 = "_VideoTransmitter_GetFECLevelOfProtection";
        __int16 v32 = 1024;
        int v33 = 6046;
        __int16 v34 = 1024;
        int v35 = v12;
        __int16 v36 = 1024;
        unsigned int v37 = v13;
        __int16 v38 = 1024;
        int v39 = v4;
        __int16 v40 = 1024;
        int v41 = v14;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Fec mode=%d fecLevel=%d fecLevelOfProtection=%d iBitRate=%d", (uint8_t *)&v28, 0x34u);
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v25 = *(_DWORD *)(a1 + 496);
      unsigned int v26 = atomic_load((unsigned int *)v3);
      int v27 = *(_DWORD *)(a1 + 32);
      int v28 = 136316674;
      uint64_t v29 = v9;
      __int16 v30 = 2080;
      long long v31 = "_VideoTransmitter_GetFECLevelOfProtection";
      __int16 v32 = 1024;
      int v33 = 6046;
      __int16 v34 = 1024;
      int v35 = v25;
      __int16 v36 = 1024;
      unsigned int v37 = v26;
      __int16 v38 = 1024;
      int v39 = v4;
      __int16 v40 = 1024;
      int v41 = v27;
      _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Fec mode=%d fecLevel=%d fecLevelOfProtection=%d iBitRate=%d", (uint8_t *)&v28, 0x34u);
    }
  }
  return v4;
}

uint64_t _VideoTransmitter_EncryptFrame(uint64_t a1, uint64_t a2, char **a3, _DWORD *a4, uint64_t a5, int a6, CMBlockBufferRef *a7)
{
  theBuffer[1] = *(CMBlockBufferRef *)MEMORY[0x1E4F143B8];
  theBuffer[0] = 0;
  if (a7)
  {
    if (a2 && *(void *)(a2 + 112))
    {
      if (CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 18200), *(void **)(a5 + 16), *(int *)(a5 + 24), (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, *(int *)(a5 + 24), 0, theBuffer))
      {
        uint64_t v14 = 2149449731;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoTransmitter_EncryptFrame_cold_5();
          }
        }
      }
      else
      {
        uint64_t v12 = VCSFrameCryptorH264_Encrypt(*(void *)(a2 + 112), a6, theBuffer[0], a7);
        if (v12)
        {
          uint64_t v14 = v12;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VideoTransmitter_EncryptFrame_cold_4();
            }
          }
        }
        else
        {
          int DataLength = CMBlockBufferGetDataLength(*a7);
          *a4 = DataLength;
          if (CMBlockBufferIsRangeContiguous(*a7, 0, DataLength))
          {
            if (CMBlockBufferGetDataPointer(*a7, 0, 0, 0, a3))
            {
              uint64_t v14 = 2149449796;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  _VideoTransmitter_EncryptFrame_cold_3();
                }
              }
            }
            else
            {
              uint64_t v14 = 0;
            }
          }
          else
          {
            uint64_t v14 = 2149449796;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VideoTransmitter_EncryptFrame_cold_2();
              }
            }
          }
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
      *a3 = *(char **)(a5 + 16);
      *a4 = *(_DWORD *)(a5 + 24);
    }
  }
  else
  {
    uint64_t v14 = 2149449729;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return v14;
    }
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VideoTransmitter_EncryptFrame_cold_1();
    }
  }
  if (theBuffer[0]) {
    CFRelease(theBuffer[0]);
  }
  return v14;
}

uint64_t VideoTransmitter_Pause(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  uint64_t v4 = v3;
  unsigned int v5 = (pthread_mutex_t *)(v3 + 16912);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 16912));
  *(_DWORD *)(v4 + 256) = a2;
  if (*(_DWORD *)(v4 + 4420))
  {
    RTPSetAFRCVideoPaused(*(void *)(v4 + 520), *(_DWORD *)(v4 + 16904) | a2);
    VCRateControlPauseVideo(*(void **)(v4 + 1656), (*(_DWORD *)(v4 + 16904) | a2) != 0);
  }
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_GetLastVideoSampleTime(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  *a2 = *(_DWORD *)(v3 + 17360);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_GetFramerate(float a1, uint64_t a2, double *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149449730;
  }
  uint64_t v6 = v5;
  if (*(_DWORD *)(v5 + 1600))
  {
    unint64_t v7 = 0;
    uint64_t v8 = v5 + 520;
    while (1)
    {
      double v14 = 0.0;
      FramerateForuint64_t Stream = _VideoTransmitter_GetFramerateForStream(v6, v8, &v14, a1);
      uint64_t v10 = FramerateForStream;
      if ((FramerateForStream & 0x80000000) != 0) {
        break;
      }
      *a3 = v14 + *a3;
      ++v7;
      v8 += 120;
      if (v7 >= *(unsigned int *)(v6 + 1600)) {
        goto LABEL_14;
      }
    }
    if ((FramerateForStream != -2146238447 || *(_DWORD *)(v6 + 496) != 2)
      && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      uint64_t v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v16 = v11;
        __int16 v17 = 2080;
        float v18 = "VideoTransmitter_GetFramerate";
        __int16 v19 = 1024;
        int v20 = 5166;
        __int16 v21 = 1024;
        int v22 = v7;
        __int16 v23 = 1024;
        int v24 = v10;
        _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to get framerate for stream[%u] with error %d", buf, 0x28u);
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_14:
  CheckOutHandleDebug();
  return v10;
}

uint64_t VideoTransmitter_GetBitrate(float a1, uint64_t a2, double *a3)
{
  v15[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149449730;
  }
  uint64_t v6 = v5;
  v15[0] = NAN;
  *a3 = 0.0;
  if (*(_DWORD *)(v5 + 1600))
  {
    unint64_t v7 = 0;
    double v8 = a1;
    uint64_t v9 = (uint64_t *)(v5 + 528);
    do
    {
      double v14 = 0.0;
      uint64_t v10 = *v9;
      double v11 = micro();
      uint64_t v12 = SummerSumPred(v11 - v8, 0.0, v10, (unsigned int (*)(double, double, double))SummerGreaterThan, (double (*)(double, double, double))SummerIdentity, v15, &v14);
      if ((v12 & 0x80000000) == 0 && v15[0] >= 0.5) {
        *a3 = *a3 + v14 * 8.0 / v15[0];
      }
      ++v7;
      v9 += 15;
    }
    while (v7 < *(unsigned int *)(v6 + 1600));
  }
  else
  {
    uint64_t v12 = 0;
  }
  CheckOutHandleDebug();
  return v12;
}

void _VideoTransmitter_GetBitrates(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, float a7)
{
  v23[1] = *(double *)MEMORY[0x1E4F143B8];
  double v14 = micro();
  *a2 = 0.0;
  *a3 = 0.0;
  *a4 = 0.0;
  *a5 = 0.0;
  *a6 = 0.0;
  if (*(_DWORD *)(a1 + 1600))
  {
    uint64_t v15 = 0;
    double v16 = v14 - a7;
    v23[0] = NAN;
    for (uint64_t i = (uint64_t *)(a1 + 560); ; i += 15)
    {
      _VideoTransmitter_ComputeSummerBitrate(*(i - 3), v23, v16);
      if (v18 < 0 && v18 != -2146238447) {
        break;
      }
      *a2 = v23[0] + *a2;
      _VideoTransmitter_ComputeSummerBitrate(*(i - 2), v23, v16);
      if (v19 < 0 && v19 != -2146238447)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoTransmitter_GetBitrates_cold_2();
          }
        }
        return;
      }
      *a3 = v23[0] + *a3;
      _VideoTransmitter_ComputeSummerBitrate(*(i - 1), v23, v16);
      if (v20 < 0 && v20 != -2146238447)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoTransmitter_GetBitrates_cold_3();
          }
        }
        return;
      }
      *a4 = v23[0] + *a4;
      _VideoTransmitter_ComputeSummerBitrate(*i, v23, v16);
      if (v21 < 0 && v21 != -2146238447)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoTransmitter_GetBitrates_cold_4();
          }
        }
        return;
      }
      *a5 = v23[0] + *a5;
      _VideoTransmitter_ComputeSummerBitrate(*(i - 4), v23, v16);
      if (v22 < 0 && v22 != -2146238447)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VideoTransmitter_GetBitrates_cold_5();
          }
        }
        return;
      }
      *a6 = v23[0] + *a6;
      if (++v15 >= (unint64_t)*(unsigned int *)(a1 + 1600)) {
        return;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoTransmitter_GetBitrates_cold_1();
      }
    }
  }
}

double _VideoTransmitter_ComputeSummerBitrate(uint64_t a1, double *a2, double a3)
{
  v6[1] = *(double *)MEMORY[0x1E4F143B8];
  double v5 = 0.0;
  v6[0] = NAN;
  *a2 = 0.0;
  if ((SummerSumPred(a3, 0.0, a1, (unsigned int (*)(double, double, double))SummerGreaterThan, (double (*)(double, double, double))SummerIdentity, v6, &v5) & 0x80000000) == 0)
  {
    double result = v6[0];
    if (v6[0] >= 0.5)
    {
      double result = v5 * 8.0 / v6[0];
      *a2 = result;
    }
  }
  return result;
}

uint64_t VideoTransmitter_SetBitrate(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  *(_DWORD *)(v3 + 36) = a2;
  *(_DWORD *)(v3 + 40) = a2;
  if (*(_DWORD *)(v3 + 4420)) {
    RTPSetAFRCTxCap(*(void *)(v3 + 520), a2);
  }
  else {
    *(_DWORD *)(v3 + 4380) = a2;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetTemporalBitrates(uint64_t a1, const void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    double v5 = *(const void **)(v3 + 4392);
    if (v5)
    {
      if (CFEqual(v5, a2))
      {
LABEL_8:
        CheckOutHandleDebug();
        return 0;
      }
      uint64_t v6 = (const void *)v4[549];
      if (v6)
      {
        CFRelease(v6);
        v4[549] = 0;
      }
    }
    CFTypeRef v7 = CFRetain(a2);
    v4[549] = v7;
    uint64_t v8 = v4[204];
    if (v8 != 0xFFFFFFFFLL) {
      (*(void (**)(uint64_t, CFTypeRef))(v4[202] + 24))(v8, v7);
    }
    goto LABEL_8;
  }
  return 2149449730;
}

uint64_t VideoTransmitter_SetHighestActiveQualityIndex(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  *(_DWORD *)(v3 + 18100) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_GenerateKeyFrameNow(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t KeyFrameNow = 2149449758;
  uint64_t v12 = CheckInHandleDebug();
  if (!v12) {
    return 2149449730;
  }
  uint64_t v13 = v12;
  double v14 = micro();
  if (v14 - *(double *)(v13 + 4344) < *(double *)(v13 + 4352))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      double v16 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 136315650;
        uint64_t v21 = v15;
        __int16 v22 = 2080;
        __int16 v23 = "VideoTransmitter_GenerateKeyFrameNow";
        __int16 v24 = 1024;
        int v25 = 5346;
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Request key frame too soon, discard", (uint8_t *)&v20, 0x1Cu);
      }
    }
LABEL_18:
    CheckOutHandleDebug();
    return KeyFrameNow;
  }
  if (a6 != 3 || !*(unsigned char *)(v13 + 16516))
  {
    uint64_t KeyFrameNow = _VideoTransmitter_GenerateKeyFrameNow(v13, a2, a3, a4, a5);
    if ((KeyFrameNow & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoTransmitter_GenerateKeyFrameNow_cold_1();
        }
      }
    }
    else
    {
      *(double *)(v13 + 4344) = v14;
    }
    goto LABEL_18;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v17 = VRTraceErrorLogLevelToCSTR();
    int v18 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 136315650;
      uint64_t v21 = v17;
      __int16 v22 = 2080;
      __int16 v23 = "VideoTransmitter_GenerateKeyFrameNow";
      __int16 v24 = 1024;
      int v25 = 5352;
      _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Ignoring fail safe FIR in idle state", (uint8_t *)&v20, 0x1Cu);
    }
  }
  return KeyFrameNow;
}

uint64_t _VideoTransmitter_RetransmitPacketDispatched(uint64_t a1, uint64_t a2, int a3, __int16 a4, uint64_t a5, double a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  double v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  CFTypeRef v7 = *(NSObject **)(a1 + 17720);
  if (v7)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___VideoTransmitter_RetransmitPacketDispatched_block_invoke;
    block[3] = &unk_1E6DB6390;
    void block[4] = &v15;
    void block[5] = a2;
    int v13 = a3;
    __int16 v14 = a4;
    *(double *)&void block[6] = a6;
    block[7] = a5;
    dispatch_async(v7, block);
  }
  else
  {
    int v18 = -2145517567;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      double v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v20 = v10;
        __int16 v21 = 2080;
        __int16 v22 = "_VideoTransmitter_RetransmitPacketDispatched";
        __int16 v23 = 1024;
        int v24 = 5368;
        __int16 v25 = 2048;
        uint64_t v26 = a1;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter[%p] TransmitQueue is NULL", buf, 0x26u);
      }
    }
  }
  uint64_t v8 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v8;
}

uint64_t VideoTransmitter_RetransmitPackets(double a1, uint64_t a2, int a3, __int16 a4, __int16 a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = CheckInHandleDebug();
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(v9 + 18272);
    if (v11)
    {
      if (*(unsigned char *)(v10 + 18186))
      {
        int v42 = a3;
        __int16 v43 = a4;
        __int16 v44 = a5;
        uint64_t v45 = 0;
        memset(v60, 0, 44);
        uint64_t RetransmissionRequestInfoFromNACK = VCNACKConsumer_GetRetransmissionRequestInfoFromNACK(v11, &v42, (uint64_t)v60);
        if ((RetransmissionRequestInfoFromNACK & 0x80000000) != 0)
        {
          uint64_t v18 = RetransmissionRequestInfoFromNACK;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v38 = VRTraceErrorLogLevelToCSTR();
            int v39 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              uint64_t v40 = *(void *)(v10 + 18272);
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v47 = v38;
              __int16 v48 = 2080;
              uint64_t v49 = "VideoTransmitter_RetransmitPackets";
              __int16 v50 = 1024;
              int v51 = 5393;
              __int16 v52 = 2048;
              uint64_t v53 = v10;
              __int16 v54 = 2048;
              uint64_t v55 = v40;
              _os_log_error_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter[%p] NACKConsumer[%p] Unable to get retransmission request info", buf, 0x30u);
            }
          }
        }
        else
        {
          uint64_t v13 = *(unsigned int *)(v10 + 1600);
          if (!v13) {
            goto LABEL_9;
          }
          uint64_t v14 = 0;
          uint64_t v15 = 120 * v13;
          while (*(_DWORD *)(v10 + v14 + 576) != a3)
          {
            v14 += 120;
            if (v15 == v14) {
              goto LABEL_9;
            }
          }
          uint64_t v19 = *(void *)(v10 + v14 + 520);
          if (v19 == 0xFFFFFFFFLL)
          {
LABEL_9:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v16 = VRTraceErrorLogLevelToCSTR();
              uint64_t v17 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                uint64_t v34 = *(void *)(v10 + 18272);
                *(_DWORD *)CMTime buf = 136316418;
                uint64_t v47 = v16;
                __int16 v48 = 2080;
                uint64_t v49 = "VideoTransmitter_RetransmitPackets";
                __int16 v50 = 1024;
                int v51 = 5396;
                __int16 v52 = 2048;
                uint64_t v53 = v10;
                __int16 v54 = 2048;
                uint64_t v55 = v34;
                __int16 v56 = 1024;
                int v57 = a3;
                _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter[%p] NACKConsumer[%p] Unable to get RTP handle ssrc=%d", buf, 0x36u);
              }
            }
            uint64_t v18 = 2147549186;
          }
          else
          {
            uint64_t v20 = CheckInHandleDebug();
            if (WORD2(v60[0]))
            {
              uint64_t v21 = v20;
              unsigned __int8 v22 = 0;
              uint64_t v23 = 0;
              do
              {
                int v41 = 0;
                int v24 = (char *)v60 + 2 * v22;
                int v27 = *((unsigned __int16 *)v24 + 5);
                uint64_t v26 = (unsigned __int16 *)(v24 + 10);
                int v25 = v27;
                if (*(void *)(v21 + 10440)) {
                  uint64_t v28 = RTPTransportResendRTP(a1, v19, a3, v25, &v41);
                }
                else {
                  uint64_t v28 = _VideoTransmitter_RetransmitPacketDispatched(v10, v19, a3, v25, (uint64_t)&v41, a1);
                }
                uint64_t v18 = v28;
                if ((v28 & 0x80000000) != 0)
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    uint64_t v29 = VRTraceErrorLogLevelToCSTR();
                    __int16 v30 = *MEMORY[0x1E4F47A50];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v31 = *(void *)(v10 + 18272);
                      int v32 = *v26;
                      *(_DWORD *)CMTime buf = 136316674;
                      uint64_t v47 = v29;
                      __int16 v48 = 2080;
                      uint64_t v49 = "VideoTransmitter_RetransmitPackets";
                      __int16 v50 = 1024;
                      int v51 = 5409;
                      __int16 v52 = 2048;
                      uint64_t v53 = v10;
                      __int16 v54 = 2048;
                      uint64_t v55 = v31;
                      __int16 v56 = 1024;
                      int v57 = a3;
                      __int16 v58 = 1024;
                      int v59 = v32;
                      _os_log_error_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter[%p] NACKConsumer[%p] Unable to resend packet ssrc=%d seqNum=%d", buf, 0x3Cu);
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(v10 + 1676) += v41;
                  uint64_t v18 = v23;
                }
                ++v22;
                uint64_t v23 = v18;
              }
              while (WORD2(v60[0]) > v22);
            }
            else
            {
              uint64_t v18 = 0;
            }
            CheckOutHandleDebug();
          }
        }
        goto LABEL_29;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v35 = VRTraceErrorLogLevelToCSTR();
      __int16 v36 = *MEMORY[0x1E4F47A50];
      unsigned int v37 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        uint64_t v18 = 0;
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
LABEL_29:
          CheckOutHandleDebug();
          return v18;
        }
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v47 = v35;
        __int16 v48 = 2080;
        uint64_t v49 = "VideoTransmitter_RetransmitPackets";
        __int16 v50 = 1024;
        int v51 = 5383;
        __int16 v52 = 2048;
        uint64_t v53 = v10;
        _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter[%p] NACK Consumer is NULL", buf, 0x26u);
      }
      else if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        VideoTransmitter_RetransmitPackets_cold_1();
      }
    }
    uint64_t v18 = 0;
    goto LABEL_29;
  }
  return 2149449730;
}

uint64_t VideoTransmitter_AddRexmitBytes(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  uint64_t v4 = v3;
  double v5 = (pthread_mutex_t *)(v3 + 1680);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 1680));
  *(_DWORD *)(v4 + 1672) += a2;
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_ACKLTRFrame(uint64_t a1, int a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  uint64_t v4 = v3;
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  uint64_t v6 = (unsigned __int8 *)MEMORY[0x1E4F47A40];
  CFTypeRef v7 = (NSObject **)MEMORY[0x1E4F47A50];
  if (ErrorLogLevelForModule >= 8)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    uint64_t v9 = *v7;
    uint64_t v10 = *v7;
    if (*v6)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = 136315906;
        uint64_t v28 = v8;
        __int16 v29 = 2080;
        __int16 v30 = "VideoTransmitter_ACKLTRFrame";
        __int16 v31 = 1024;
        int v32 = 5449;
        __int16 v33 = 1024;
        int v34 = a2;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Received LTR ACK timestamp=%d", (uint8_t *)&v27, 0x22u);
      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      VideoTransmitter_ACKLTRFrame_cold_1();
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 2992));
  int v12 = *(_DWORD *)(v4 + 1780);
  if (v12 < 1)
  {
LABEL_15:
    uint64_t v16 = v6;
    int v17 = -1;
  }
  else
  {
    int v13 = 0;
    int v14 = *(_DWORD *)(v4 + 1784);
    while (1)
    {
      int v15 = v14 - 100;
      if (v14 <= 99) {
        int v15 = v14;
      }
      if (*(_DWORD *)(v4 + 4 * v15 + 2188) == a2) {
        break;
      }
      --v13;
      ++v14;
      if (!(v12 + v13)) {
        goto LABEL_15;
      }
    }
    int v17 = *(_DWORD *)(v4 + 4 * v15 + 1788);
    if (v15 + 1 < v12 + v15 + v13)
    {
      int v18 = v15 + v13;
      do
      {
        int v19 = v15 - 100;
        int v20 = v15 - 99;
        if (v15 <= 99) {
          int v19 = v15;
        }
        if (v15 <= 98) {
          int v20 = v15 + 1;
        }
        if (v15 < 0) {
          int v19 = v15 + 100;
        }
        int v21 = v15 + 2;
        ++v15;
        *(_DWORD *)(v4 + 2188 + 4 * v19) = *(_DWORD *)(v4 + 2188 + 4 * v20);
        *(_DWORD *)(v4 + 1788 + 4 * v19) = *(_DWORD *)(v4 + 1788 + 4 * v20);
        int v12 = *(_DWORD *)(v4 + 1780);
      }
      while (v21 < v18 + v12);
    }
    uint64_t v16 = v6;
    *(_DWORD *)(v4 + 1780) = v12 - 1;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v22 = VRTraceErrorLogLevelToCSTR();
    int v23 = *v16;
    int v24 = *v7;
    int v25 = *v7;
    if (v23)
    {
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = 136316162;
        uint64_t v28 = v22;
        __int16 v29 = 2080;
        __int16 v30 = "VideoTransmitter_ACKLTRFrame";
        __int16 v31 = 1024;
        int v32 = 5483;
        __int16 v33 = 1024;
        int v34 = a2;
        __int16 v35 = 1024;
        int v36 = v17;
        _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Mapped incoming LTR ACK timestamp=%d to token=%d", (uint8_t *)&v27, 0x28u);
      }
    }
    else if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      int v27 = 136316162;
      uint64_t v28 = v22;
      __int16 v29 = 2080;
      __int16 v30 = "VideoTransmitter_ACKLTRFrame";
      __int16 v31 = 1024;
      int v32 = 5483;
      __int16 v33 = 1024;
      int v34 = a2;
      __int16 v35 = 1024;
      int v36 = v17;
      _os_log_debug_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Mapped incoming LTR ACK timestamp=%d to token=%d", (uint8_t *)&v27, 0x28u);
    }
  }
  if (v17 != -1)
  {
    uint64_t v26 = *(int *)(v4 + 2588);
    if ((int)v26 > 99)
    {
      memmove((void *)(v4 + 2592), (const void *)(v4 + 2596), 0x18CuLL);
      *(_DWORD *)(v4 + 2988) = v17;
    }
    else
    {
      *(_DWORD *)(v4 + 4 * v26 + 2592) = v17;
      ++*(_DWORD *)(v4 + 2588);
    }
  }
  if (*(_DWORD *)(v4 + 18252) == 2) {
    ++*(_DWORD *)(v4 + 18256);
  }
  else {
    ++*(_DWORD *)(v4 + 18260);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 2992));
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SendLTRACK(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  uint64_t v4 = v3;
  double v5 = (pthread_mutex_t *)(v3 + 4272);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 4272));
  int v6 = *(_DWORD *)(v4 + 3056);
  uint64_t v7 = *(int *)(v4 + 3060);
  if (v6 > 99)
  {
    *(_DWORD *)(v4 + 4 * v7 + 3464) = a2;
    int v10 = *(_DWORD *)(v4 + 3060);
    if (v10 < 99) {
      *(_DWORD *)(v4 + 3060) = v10 + 1;
    }
    else {
      *(_DWORD *)(v4 + 3060) = 0;
    }
  }
  else
  {
    int v8 = v7 + v6;
    if (v8 > 99) {
      v8 -= 100;
    }
    *(_DWORD *)(v4 + 3056 + 4 * v8 + 408) = a2;
    ++*(_DWORD *)(v4 + 3056);
  }
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetAspectRatios(double a1, double a2, double a3, double a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v8 = (float *)CheckInHandleDebug();
  if (!v8) {
    return 2149449730;
  }
  uint64_t v9 = v8;
  int v10 = v8 + 4186;
  float v11 = a1 / a2;
  float v12 = a2 / a1;
  v8[4186] = v11;
  v8[4187] = v12;
  float v13 = a3 / a4;
  float v14 = a4 / a3;
  v8[4188] = v13;
  v8[4189] = v14;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v15 = VRTraceErrorLogLevelToCSTR();
    uint64_t v16 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      double v17 = *v10;
      double v18 = v10[1];
      double v19 = v10[2];
      double v20 = v10[3];
      int v22 = 136316930;
      uint64_t v23 = v15;
      __int16 v24 = 2080;
      int v25 = "VideoTransmitter_SetAspectRatios";
      __int16 v26 = 1024;
      int v27 = 5564;
      __int16 v28 = 2048;
      __int16 v29 = v9;
      __int16 v30 = 2048;
      double v31 = v17;
      __int16 v32 = 2048;
      double v33 = v18;
      __int16 v34 = 2048;
      double v35 = v19;
      __int16 v36 = 2048;
      double v37 = v20;
      _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [AR_TX][%p] portraitAR=%.3f, portraitAR_rcp=%.3f, landscapeAR=%.3f, landscapeAR_rcp=%.3f", (uint8_t *)&v22, 0x4Eu);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetCellTech(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (_DWORD *)CheckInHandleDebug();
  if (!v9) {
    return 2149449730;
  }
  v9[24] = a2;
  v9[25] = a4;
  if (a2) {
    int v10 = 0;
  }
  else {
    int v10 = a3;
  }
  if (a4) {
    int v11 = 0;
  }
  else {
    int v11 = a5;
  }
  v9[4244] = v10;
  v9[4245] = v11;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    float v13 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136316674;
      uint64_t v16 = v12;
      __int16 v17 = 2080;
      double v18 = "VideoTransmitter_SetCellTech";
      __int16 v19 = 1024;
      int v20 = 5584;
      __int16 v21 = 1024;
      int v22 = a3;
      __int16 v23 = 1024;
      int v24 = a5;
      __int16 v25 = 1024;
      int v26 = a2;
      __int16 v27 = 1024;
      int v28 = a4;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_SetCellTech [Local:%d Remote:%d], use celular(%d/%d)", (uint8_t *)&v15, 0x34u);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetThermalLevel(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  uint64_t v4 = (int *)(v3 + 16520);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    int v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *v4;
      int v9 = 136316162;
      uint64_t v10 = v5;
      __int16 v11 = 2080;
      uint64_t v12 = "VideoTransmitter_SetThermalLevel";
      __int16 v13 = 1024;
      int v14 = 5596;
      __int16 v15 = 1024;
      int v16 = v7;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setting old thermal level %d -> new thermal level %d", (uint8_t *)&v9, 0x28u);
    }
  }
  v4[1] = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_UpdateMTU(uint64_t a1, int a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149449730;
  }
  uint64_t v6 = v5;
  int v7 = (unsigned __int16 *)(v5 + 17276);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    int v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *v7;
      int v11 = *((unsigned __int8 *)v7 + 2);
      int v14 = 136316674;
      uint64_t v15 = v8;
      __int16 v16 = 2080;
      __int16 v17 = "VideoTransmitter_UpdateMTU";
      __int16 v18 = 1024;
      int v19 = 5609;
      __int16 v20 = 1024;
      int v21 = v10;
      __int16 v22 = 1024;
      int v23 = a2;
      __int16 v24 = 1024;
      int v25 = v11;
      __int16 v26 = 1024;
      int v27 = a3;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_UpdateMTU %d -> %d  ipv6: %d -> %d ", (uint8_t *)&v14, 0x34u);
    }
  }
  uint64_t v12 = (pthread_mutex_t *)(v6 + 17288);
  pthread_mutex_lock(v12);
  *int v7 = a2;
  *((unsigned char *)v7 + 2) = a3;
  pthread_mutex_unlock(v12);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetIsRtxEnabled(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  uint64_t v4 = v3;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(v4 + 18186);
      int v12 = 136316418;
      uint64_t v13 = v5;
      __int16 v14 = 2080;
      uint64_t v15 = "VideoTransmitter_SetIsRtxEnabled";
      __int16 v16 = 1024;
      int v17 = 5625;
      __int16 v18 = 1024;
      int v19 = 5625;
      __int16 v20 = 1024;
      int v21 = v7;
      __int16 v22 = 1024;
      int v23 = a2;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitter.c:%d: isUplinkRetransmissionEnabled oldValue=%d newValue=%d", (uint8_t *)&v12, 0x2Eu);
    }
  }
  *(unsigned char *)(v4 + 18186) = a2;
  if ((a2 & 1) == 0 && *(_DWORD *)(v4 + 1600))
  {
    unint64_t v8 = 0;
    int v9 = (uint64_t *)(v4 + 520);
    do
    {
      uint64_t v10 = *v9;
      v9 += 15;
      RTPTransport_SetNACKConsumer(v10, 0);
      ++v8;
    }
    while (v8 < *(unsigned int *)(v4 + 1600));
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetWindowState(uint64_t a1, int a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149449730;
  }
  if (a2) {
    *(_DWORD *)(v5 + 17376) = a3;
  }
  else {
    *(_DWORD *)(v5 + 17380) = a3;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    unint64_t v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136316162;
      uint64_t v10 = v7;
      __int16 v11 = 2080;
      int v12 = "VideoTransmitter_SetWindowState";
      __int16 v13 = 1024;
      int v14 = 5647;
      __int16 v15 = 1024;
      int v16 = a2;
      __int16 v17 = 1024;
      int v18 = a3;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_SetWindowState: Local %d, state: %d", (uint8_t *)&v9, 0x28u);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetVisualRectangle(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  __int16 v11 = (double *)CheckInHandleDebug();
  if (!v11) {
    return 2149449730;
  }
  if (a6)
  {
    v11[2173] = a1;
    v11[2174] = a2;
    v11[2175] = a3;
    uint64_t v12 = 2176;
  }
  else
  {
    v11[2177] = a1;
    v11[2178] = a2;
    v11[2179] = a3;
    uint64_t v12 = 2180;
  }
  v11[v12] = a4;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    __int16 v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136316930;
      uint64_t v17 = v14;
      __int16 v18 = 2080;
      uint64_t v19 = "VideoTransmitter_SetVisualRectangle";
      __int16 v20 = 1024;
      int v21 = 5666;
      __int16 v22 = 1024;
      int v23 = a6;
      __int16 v24 = 2048;
      double v25 = a1;
      __int16 v26 = 2048;
      double v27 = a2;
      __int16 v28 = 2048;
      double v29 = a3;
      __int16 v30 = 2048;
      double v31 = a4;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_SetVisualRectangle: Local %d, Rect: (%g, %g), %gx%g", (uint8_t *)&v16, 0x4Au);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_IsSafeViewMode(uint64_t a1, BOOL *a2)
{
  uint64_t v2 = 2149449729;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *a2 = *(_DWORD *)(v4 + 17372) == 39;
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2149449730;
    }
  }
  return v2;
}

uint64_t VideoTransmitter_SetVideoLossFraction(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  *(double *)(v3 + 4408) = (double)a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetMediaSuggestion(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  if (a2) {
    *(_DWORD *)(v3 + 4388) |= 1u;
  }
  if ((a2 & 0x100) != 0)
  {
    int v4 = *(_DWORD *)(v3 + 4388);
    if (v4) {
      *(_DWORD *)(v3 + 4388) = v4 & 0xFFFFFFFE;
    }
  }
  if ((a2 & 0x10000) != 0) {
    *(_DWORD *)(v3 + 4388) |= 0x10u;
  }
  if ((a2 & 0x1000000) != 0) {
    *(_DWORD *)(v3 + 4388) |= 2u;
  }
  if ((a2 & 0x100000000) != 0) {
    *(_DWORD *)(v3 + 4388) |= 8u;
  }
  *(_WORD *)(v3 + 18281) = a2;
  *(unsigned char *)(v3 + 18283) = BYTE2(a2);
  *(unsigned char *)(v3 + 18284) = BYTE3(a2);
  *(unsigned char *)(v3 + 18285) = BYTE4(a2);
  *(_WORD *)(v3 + 18286) = HIDWORD(a2) >> 8;
  *(unsigned char *)(v3 + 18288) = HIBYTE(a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetTargetBitrate(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t v7 = CheckInHandleDebug();
  if (!v7) {
    return 2149449730;
  }
  *(_DWORD *)(v7 + 4380) = a2;
  *(_DWORD *)(v7 + 4384) = a3;
  *(unsigned char *)(v7 + 16824) = a4;
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetServerBasedBandwidthProbing(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  if (*(_DWORD *)(v3 + 496) == 2) {
    *(unsigned char *)(v3 + 16825) = a2;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetEndToEndBasedBandwidthProbing(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  uint64_t v4 = v3;
  if (*(_DWORD *)(v3 + 496) == 1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136316162;
        uint64_t v9 = v5;
        __int16 v10 = 2080;
        __int16 v11 = "VideoTransmitter_SetEndToEndBasedBandwidthProbing";
        __int16 v12 = 1024;
        int v13 = 5764;
        __int16 v14 = 2048;
        uint64_t v15 = v4;
        __int16 v16 = 1024;
        int v17 = a2;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d videoTransmitter=%p set endToEndBasedBandwidthProbing=%d", (uint8_t *)&v8, 0x2Cu);
      }
    }
    *(unsigned char *)(v4 + 16826) = a2;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_GetLastKeyFrameSentTime(uint64_t a1, void *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  *a2 = *(void *)(v3 + 4336);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetKeyFrameOnlyStreamID(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315906;
      uint64_t v8 = v3;
      __int16 v9 = 2080;
      __int16 v10 = "VideoTransmitter_SetKeyFrameOnlyStreamID";
      __int16 v11 = 1024;
      int v12 = 5785;
      __int16 v13 = 1024;
      int v14 = a2;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d keyFrameOnlyStreamID:%d", (uint8_t *)&v7, 0x22u);
    }
  }
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149449730;
  }
  *(unsigned char *)(v5 + 491) = 1;
  *(_WORD *)(v5 + 492) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetMediaQueueSize(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  atomic_store(a2, (unsigned int *)(v3 + 16492));
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetFECRatio(double a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2149449729;
  if (a1 <= -0.00000011920929 || a1 > 3.0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = 136315650;
          uint64_t v20 = v4;
          __int16 v21 = 2080;
          __int16 v22 = "VideoTransmitter_SetFECRatio";
          __int16 v23 = 1024;
          int v24 = 5809;
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d invalid parameter!", (uint8_t *)&v19, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        VideoTransmitter_SetFECRatio_cold_1();
      }
    }
  }
  else
  {
    uint64_t v7 = CheckInHandleDebug();
    if (v7)
    {
      uint64_t v8 = (unsigned int *)(v7 + 16488);
      if (!*(unsigned char *)(v7 + 18153))
      {
        float v9 = a1;
        unsigned int v10 = FECUtil_FECRatioToLevelofProtection(v9);
        unsigned int v11 = atomic_load(v8);
        if (v11 != v10)
        {
          unsigned int v12 = v10;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v13 = VRTraceErrorLogLevelToCSTR();
            int v14 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v19 = 136315906;
              uint64_t v20 = v13;
              __int16 v21 = 2080;
              __int16 v22 = "VideoTransmitter_SetFECRatio";
              __int16 v23 = 1024;
              int v24 = 5821;
              __int16 v25 = 1024;
              unsigned int v26 = v12;
              _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d fecLevel:%d", (uint8_t *)&v19, 0x22u);
            }
          }
          CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          int v19 = (__int16)v12;
          CFNumberRef v17 = CFNumberCreate(v15, kCFNumberIntType, &v19);
          CFDictionaryAddValue(Mutable, @"VCVSFecLevel", v17);
          CFRelease(v17);
          reportingEventWithAllowedClientType();
          CFRelease(Mutable);
          atomic_store(v12, v8);
        }
      }
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2149449730;
    }
  }
  return v2;
}

uint64_t VideoTransmitter_SetNetworkStats(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)(v3 + 18056) = *(_OWORD *)a2;
  *(void *)(v3 + 18072) = v4;
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetPacketExpirationTime(uint64_t a1, unsigned int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  uint64_t v4 = (int *)(v3 + 16512);
  if (a2 <= 0x103)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      uint64_t v7 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        int v8 = 260;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 136316162;
          uint64_t v17 = v5;
          __int16 v18 = 2080;
          int v19 = "VideoTransmitter_SetPacketExpirationTime";
          __int16 v20 = 1024;
          int v21 = 5850;
          __int16 v22 = 1024;
          unsigned int v23 = a2;
          __int16 v24 = 1024;
          int v25 = 260;
          float v9 = " [%s] %s:%d Setting expiration time (remote jitter size) with %d ms, below the min %d ms";
LABEL_13:
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v16, 0x28u);
          goto LABEL_21;
        }
        goto LABEL_21;
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        VideoTransmitter_SetPacketExpirationTime_cold_1();
      }
    }
    int v8 = 260;
    goto LABEL_21;
  }
  if (a2 < 0x191)
  {
    int v8 = a2;
    goto LABEL_21;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 8)
  {
LABEL_20:
    int v8 = 400;
    goto LABEL_21;
  }
  uint64_t v11 = VRTraceErrorLogLevelToCSTR();
  uint64_t v6 = *MEMORY[0x1E4F47A50];
  unsigned int v12 = *MEMORY[0x1E4F47A50];
  if (!*MEMORY[0x1E4F47A40])
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      VideoTransmitter_SetPacketExpirationTime_cold_2();
    }
    goto LABEL_20;
  }
  int v8 = 400;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136316162;
    uint64_t v17 = v11;
    __int16 v18 = 2080;
    int v19 = "VideoTransmitter_SetPacketExpirationTime";
    __int16 v20 = 1024;
    int v21 = 5855;
    __int16 v22 = 1024;
    unsigned int v23 = a2;
    __int16 v24 = 1024;
    int v25 = 400;
    float v9 = " [%s] %s:%d Setting expiration time (remote jitter size) with %d ms, above the max %d ms";
    goto LABEL_13;
  }
LABEL_21:
  if (v4[34] >= 0) {
    int v13 = v4[34];
  }
  else {
    int v13 = v8;
  }
  if (v13 != *v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      CFAllocatorRef v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 136315906;
        uint64_t v17 = v14;
        __int16 v18 = 2080;
        int v19 = "VideoTransmitter_SetPacketExpirationTime";
        __int16 v20 = 1024;
        int v21 = 5868;
        __int16 v22 = 1024;
        unsigned int v23 = v13;
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setting expiration time %d ms", (uint8_t *)&v16, 0x22u);
      }
    }
    *uint64_t v4 = v13;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_SetStreamIDs(uint64_t a1, const void *a2, unsigned int a3, const void *a4, unsigned int a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    unsigned int v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136316162;
      uint64_t v17 = v9;
      __int16 v18 = 2080;
      int v19 = "VideoTransmitter_SetStreamIDs";
      __int16 v20 = 1024;
      int v21 = 5877;
      __int16 v22 = 1024;
      unsigned int v23 = a3;
      __int16 v24 = 1024;
      unsigned int v25 = a5;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d numOfStreamIDs:%u, numOfRepairedCompoundStreamIDs:%u", (uint8_t *)&v16, 0x28u);
    }
  }
  uint64_t v11 = 2149449729;
  if (a2 && a3 && a5 + a3 < 0xD)
  {
    uint64_t v12 = CheckInHandleDebug();
    if (v12)
    {
      int v13 = (unsigned char *)v12;
      uint64_t v14 = v12 + 440;
      memcpy((void *)(v12 + 440), a2, 2 * a3);
      memcpy((void *)(v14 + 2 * a3), a4, 2 * a5);
      v13[464] = a5 + a3;
      if (a4) {
        memcpy(v13 + 466, a4, 2 * a5);
      }
      v13[490] = a5;
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2149449730;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoTransmitter_SetStreamIDs_cold_1();
    }
  }
  return v11;
}

uint64_t VideoTransmitter_PrepareForResChange(uint64_t a1, int a2, int a3, int a4, int a5, unsigned char *a6, int a7, int a8, int a9)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = CheckInHandleDebug();
  if (!v15) {
    return 2149449730;
  }
  uint64_t v16 = v15;
  uint64_t v17 = v15 + 17072;
  __int16 v18 = (pthread_mutex_t *)(v15 + 17000);
  pthread_mutex_lock((pthread_mutex_t *)(v15 + 17000));
  if (*(unsigned char *)(v17 + 1))
  {
    if (*(_DWORD *)(v17 + 4) == a2)
    {
      int v19 = (_DWORD *)(v17 + 8);
      goto LABEL_8;
    }
LABEL_15:
    if (a4 == 100) {
      int v23 = 1752589105;
    }
    else {
      int v23 = 1635148593;
    }
    *(_DWORD *)(v17 + 400) = v23;
    *(_DWORD *)(v16 + 20) = a4;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v24 = VRTraceErrorLogLevelToCSTR();
      unsigned int v25 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v26 = *(_DWORD *)(v16 + 20);
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v34 = v24;
        __int16 v35 = 2080;
        __int16 v36 = "VideoTransmitter_PrepareForResChange";
        __int16 v37 = 1024;
        int v38 = 5942;
        __int16 v39 = 1024;
        int v40 = v26;
        _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Setting pendingPayload to %d", buf, 0x22u);
      }
    }
    *(_DWORD *)(v17 + 692) = a9;
    *(_DWORD *)(v16 + 44) = a5;
    *(_DWORD *)(v17 + 4) = a2;
    *(_DWORD *)(v17 + 8) = a3;
    *(_DWORD *)(v17 + 12) = a7;
    *(_DWORD *)(v17 + 16) = a8;
    if (a6 && *a6) {
      __strlcpy_chk();
    }
    double v27 = micro();
    *(double *)(v16 + 17248) = v27 + 2.0;
    *(unsigned char *)(v17 + 1) = 1;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      double v29 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        __int16 v30 = FourccToCStr(*(_DWORD *)(v17 + 396));
        uint64_t v31 = *(void *)(v16 + 17248);
        *(_DWORD *)CMTime buf = 136317954;
        uint64_t v34 = v28;
        __int16 v35 = 2080;
        __int16 v36 = "VideoTransmitter_PrepareForResChange";
        __int16 v37 = 1024;
        int v38 = 5956;
        __int16 v39 = 1024;
        int v40 = a7;
        __int16 v41 = 1024;
        int v42 = a8;
        __int16 v43 = 1024;
        int v44 = a2;
        __int16 v45 = 1024;
        int v46 = a3;
        __int16 v47 = 1024;
        int v48 = a5;
        __int16 v49 = 2080;
        __int16 v50 = v30;
        __int16 v51 = 2080;
        uint64_t v52 = v16 + 17092;
        __int16 v53 = 2048;
        double v54 = v27;
        __int16 v55 = 2048;
        uint64_t v56 = v31;
        _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_PrepareForResChange to capture: %dx%d encode: %dx%d %dfps (%s: %s) (now: %f timeout will be %f)", buf, 0x62u);
      }
    }
    goto LABEL_27;
  }
  if (*(_DWORD *)(v16 + 24) != a2) {
    goto LABEL_15;
  }
  int v19 = (_DWORD *)(v16 + 28);
LABEL_8:
  if (*v19 != a3) {
    goto LABEL_15;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v21 = VRTraceErrorLogLevelToCSTR();
    __int16 v22 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v34 = v21;
      __int16 v35 = 2080;
      __int16 v36 = "VideoTransmitter_PrepareForResChange";
      __int16 v37 = 1024;
      int v38 = 5921;
      __int16 v39 = 1024;
      int v40 = a2;
      __int16 v41 = 1024;
      int v42 = a3;
      _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VideoTransmitter_PrepareForResChange: already in %dx%d resolution.", buf, 0x28u);
    }
  }
  if (*(unsigned char *)v17) {
    *(unsigned char *)uint64_t v17 = 0;
  }
LABEL_27:
  pthread_mutex_unlock(v18);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_PauseEncoder()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149449730;
  }
  uint64_t v1 = v0;
  uint64_t v2 = (unsigned char *)(v0 + 17488);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315650;
      uint64_t v7 = v3;
      __int16 v8 = 2080;
      uint64_t v9 = "VideoTransmitter_PauseEncoder";
      __int16 v10 = 1024;
      int v11 = 5970;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ", (uint8_t *)&v6, 0x1Cu);
    }
  }
  atomic_store(0, v2 + 776);
  *uint64_t v2 = 1;
  v2[272] = 0;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 17496));
  VCRealTimeThread_Stop(*(void *)(v1 + 17480));
  if (*(void *)(v1 + 1632) != 0xFFFFFFFFLL)
  {
    (*(void (**)(void))(*(void *)(v1 + 1616) + 8))();
    *(void *)(v1 + 1632) = 0xFFFFFFFFLL;
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t VideoTransmitter_ResumeEncoder()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2149449730;
  }
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 16620;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315650;
      uint64_t v14 = v3;
      __int16 v15 = 2080;
      uint64_t v16 = "VideoTransmitter_ResumeEncoder";
      __int16 v17 = 1024;
      int v18 = 5991;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ", (uint8_t *)&v13, 0x1Cu);
    }
  }
  atomic_store(1u, (unsigned __int8 *)(v2 + 1644));
  *(unsigned char *)(v2 + 868) = 0;
  if (*(void *)(v1 + 1632) == 0xFFFFFFFFLL)
  {
    if (*(unsigned char *)(v2 + 364))
    {
      unsigned int v6 = 0;
    }
    else if (*(_DWORD *)(v1 + 96))
    {
      unsigned int v6 = 1;
    }
    else
    {
      unsigned int v6 = *(_DWORD *)(v1 + 100) != 0;
    }
    if (*(_DWORD *)(v2 + 748)) {
      uint64_t v7 = (_DWORD *)(v2 + 744);
    }
    else {
      uint64_t v7 = (_DWORD *)v2;
    }
    uint64_t Encoder = _VideoTransmitter_CreateEncoder(v1, *(_DWORD *)(v1 + 24), *(_DWORD *)(v1 + 28), v1 + 104, *v7 != 0, v6);
    if ((Encoder & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v8 = VRTraceErrorLogLevelToCSTR();
        uint64_t v9 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v11 = *(_DWORD *)(v1 + 24);
          int v12 = *(_DWORD *)(v1 + 28);
          int v13 = 136316418;
          uint64_t v14 = v8;
          __int16 v15 = 2080;
          uint64_t v16 = "VideoTransmitter_ResumeEncoder";
          __int16 v17 = 1024;
          int v18 = 6001;
          __int16 v19 = 1024;
          int v20 = v11;
          __int16 v21 = 1024;
          int v22 = v12;
          __int16 v23 = 1024;
          int v24 = Encoder;
          _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter_CreateHandle: EncCreateHandle FAILED %dx%d result: %d", (uint8_t *)&v13, 0x2Eu);
        }
      }
    }
    else
    {
      VCRealTimeThread_Start(*(void *)(v1 + 17480));
    }
  }
  else
  {
    VCRealTimeThread_Start(*(void *)(v1 + 17480));
    uint64_t Encoder = 0;
  }
  CheckOutHandleDebug();
  return Encoder;
}

uint64_t VideoTransmitter_SetFECLevelPerGroupSizeVector(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2149449730;
  }
  unsigned int v6 = (_WORD *)(v5 + 16486);
  if (*(unsigned char *)(v5 + 18153))
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = VCFECGenerator_SetFECLevelPerGroupSizeVector(*(void *)(v5 + 18160), a2, a3);
    if (a2)
    {
      int v8 = (unsigned __int16)*v6;
      uint64_t v9 = a3 + 1;
      do
      {
        char v10 = *v9;
        v9 += 2;
        v8 |= 1 << v10;
        --a2;
      }
      while (a2);
      *unsigned int v6 = v8;
    }
  }
  CheckOutHandleDebug();
  return v7;
}

uint64_t VideoTransmitter_SetEncodingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2149449730;
  }
  if (*(void *)(v3 + 1632) == 0xFFFFFFFFLL) {
    uint64_t v4 = 2148007957;
  }
  else {
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v3 + 1616) + 64))(*(void *)(v3 + 1632), a2);
  }
  CheckOutHandleDebug();
  return v4;
}

void _VideoTransmitter_GetStreamIndexFromAttachment(const void *a1, void *a2)
{
  if (a2)
  {
    CFNumberRef v3 = (const __CFNumber *)CMGetAttachment(a1, @"tileIndex", 0);
    if (v3)
    {
      CFNumberGetValue(v3, kCFNumberSInt32Type, a2);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VideoTransmitter_GetStreamIndexFromAttachment_cold_1();
      }
    }
  }
}

void OUTLINED_FUNCTION_13_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x28u);
}

uint64_t VCSystemAudioCaptureController_PushAudioSamples(uint64_t a1, uint64_t a2)
{
  double v5[2] = *MEMORY[0x1E4F143B8];
  v5[0] = 0xAAAAAAAAAAAAAAAALL;
  LODWORD(v5[0]) = *(double *)VCAudioBufferList_GetSampleFormat(a2);
  v5[1] = VCAudioBufferList_GetTimestamp(a2);
  VCAudioBufferList_SetPriority(a2, 255);
  VCAudioBufferList_SetVoiceActivity(a2, 1);
  return (*(uint64_t (**)(void, void *, uint64_t))(a1 + 8))(*(void *)a1, v5, a2);
}

void OUTLINED_FUNCTION_10_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x22u);
}

unint64_t AudioPacketArray_Next(unint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 804);
  if (v1 >= *(_DWORD *)(result + 800)) {
    return 0;
  }
  *(_DWORD *)(result + 804) = v1 + 1;
  unint64_t v2 = result + 8 * v1;
  if (v2 < result + 800 && v2 >= result) {
    return *(void *)v2;
  }
  __break(0x5519u);
  return result;
}

uint64_t AudioPacketArray_First(_DWORD *a1)
{
  if (a1[200]) {
    return *(void *)a1;
  }
  else {
    return 0;
  }
}

unint64_t AudioPacketArray_Last(unint64_t result)
{
  int v1 = *(_DWORD *)(result + 800);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = result + 8 * (v1 - 1);
  if (v2 < result + 800 && v2 >= result) {
    return *(void *)v2;
  }
  __break(0x5519u);
  return result;
}

BOOL AudioPacketArray_Append(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 800);
  if (v2 <= 0x63)
  {
    *(_DWORD *)(a1 + 800) = v2 + 1;
    *(void *)(a1 + 8 * v2) = a2;
  }
  return v2 < 0x64;
}

void VCMediaRecorder_AddLocalAudioSampleBuffer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(unsigned char *)(a1 + 228))
    {
      *(_DWORD *)(a1 + 260) = a3;
      ++*(void *)(a1 + 288);
      VCMediaRecorderHistory_AddAudioSampleBuffer(*(void *)(a1 + 192), a2, a3, 1);
      double v4 = micro();
      if (v4 - *(double *)(a1 + 264) >= 5.0)
      {
        *(double *)(a1 + 264) = v4;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v5 = VRTraceErrorLogLevelToCSTR();
          unsigned int v6 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v7 = *(void *)(a1 + 272);
            uint64_t v8 = *(void *)(a1 + 280);
            uint64_t v9 = *(void *)(a1 + 288);
            uint64_t v10 = *(void *)(a1 + 296);
            uint64_t v11 = *(void *)(a1 + 304);
            uint64_t v12 = *(void *)(a1 + 312);
            uint64_t v13 = *(void *)(a1 + 320);
            int v14 = 136317698;
            uint64_t v15 = v5;
            __int16 v16 = 2080;
            __int16 v17 = "_VCMediaRecorder_LogHealth";
            __int16 v18 = 1024;
            int v19 = 147;
            __int16 v20 = 2048;
            uint64_t v21 = a1;
            __int16 v22 = 2048;
            uint64_t v23 = v7;
            __int16 v24 = 2048;
            uint64_t v25 = v8;
            __int16 v26 = 2048;
            uint64_t v27 = v9;
            __int16 v28 = 2048;
            uint64_t v29 = v10;
            __int16 v30 = 2048;
            uint64_t v31 = v11;
            __int16 v32 = 2048;
            uint64_t v33 = v12;
            __int16 v34 = 2048;
            uint64_t v35 = v13;
            _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d @=@ Health: VCMediaRecorder instance=%p, localVideoCallbacksCount=%lu, localVideoCallbacksClearedCount=%lu, localAudioCallbacksCount=%lu, localAudioCallbacksClearedCount=%lu, remoteAudioCallbacksCount=%lu, remoteAudioCallbacksClearedCount=%lu, bufferResets=%lu", (uint8_t *)&v14, 0x6Cu);
          }
        }
      }
    }
  }
}

void VCMediaRecorder_AddRemoteAudioSampleBuffer(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 228))
    {
      ++*(void *)(a1 + 304);
      VCMediaRecorderHistory_AddAudioSampleBuffer(*(void *)(a1 + 192), a2, a3, 0);
    }
  }
}

void VCMediaRecorder_AddLocalVideoSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, int a4)
{
  if (a1 && a2)
  {
    if (*(unsigned char *)(a1 + 228))
    {
      ++*(void *)(a1 + 272);
      VCMediaRecorderHistory_AddLocalVideoSampleBuffer(*(void *)(a1 + 192), a2, a3, a4);
    }
  }
}

void sub_1E2052DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void VCMediaRecorder_UpdateTargetScreenAttributes(uint64_t a1, uint64_t a2)
{
  void block[6] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 208);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __VCMediaRecorder_UpdateTargetScreenAttributes_block_invoke;
    block[3] = &unk_1E6DB3E40;
    void block[4] = a2;
    void block[5] = a1;
    dispatch_sync(v2, block);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaRecorder_UpdateTargetScreenAttributes_cold_1();
    }
  }
}

void VCMediaRecorder_PrepareVideoSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  if (a1 && a2)
  {
    if (*(unsigned char *)(a1 + 228)) {
      VCMediaRecorderHistory_PrepareVideoSampleBuffer(*(void *)(a1 + 192), a2);
    }
  }
}

void VCMediaRecorder_StopProcessingAllRequests(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(NSObject **)(a1 + 208);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __VCMediaRecorder_StopProcessingAllRequests_block_invoke;
    block[3] = &unk_1E6DB3DC8;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    CFNumberRef v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v6 = v2;
      __int16 v7 = 2080;
      uint64_t v8 = "VCMediaRecorder_StopProcessingAllRequests";
      __int16 v9 = 1024;
      int v10 = 559;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", buf, 0x1Cu);
    }
  }
}

void VCMediaRecorder_ClearHistoryBuffer(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(NSObject **)(a1 + 208);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __VCMediaRecorder_ClearHistoryBuffer_block_invoke;
    block[3] = &unk_1E6DB3DC8;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    CFNumberRef v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v6 = v2;
      __int16 v7 = 2080;
      uint64_t v8 = "VCMediaRecorder_ClearHistoryBuffer";
      __int16 v9 = 1024;
      int v10 = 579;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", buf, 0x1Cu);
    }
  }
}

void sub_1E2059C8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void VCAudioRedBuilder_UpdatePayloadHistory(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1 && *(unsigned char *)(a1 + 29))
  {
    unint64_t v2 = 0;
    uint64_t v3 = a1 + 32;
    double v4 = (int *)(a1 + 84);
    uint64_t v5 = (unsigned char *)(a1 + 94);
    uint64_t v23 = a1 + 32;
    do
    {
      uint64_t v6 = v3 + 344 * v2;
      int v7 = *(_DWORD *)(v6 + 320);
      if ((v7 + 1) < 9) {
        int v8 = v7 + 1;
      }
      else {
        int v8 = 9;
      }
      *(_DWORD *)(v6 + 320) = v8;
      memmove((void *)(v6 + 64), (const void *)(v6 + 32), 32 * (v8 - 1));
      long long v9 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)(v6 + 32) = *(_OWORD *)v6;
      *(_OWORD *)(v6 + 48) = v9;
      if (*(unsigned char *)(a1 + 28)) {
        int v10 = 9 * *(_DWORD *)(a1 + 24);
      }
      else {
        int v10 = 0x3FFF;
      }
      uint64_t v11 = (_DWORD *)(v6 + 320);
      uint64_t v12 = *(unsigned int *)(v6 + 320);
      if (v12)
      {
        uint64_t v13 = 0;
        int v14 = v10 - *(_DWORD *)(v6 + 20);
        uint64_t v15 = v4;
        while (1)
        {
          int v16 = *v15;
          v15 += 8;
          if ((v14 + v16) > 0x7FFFFFFE) {
            break;
          }
          if (v12 == ++v13) {
            goto LABEL_17;
          }
        }
        uint64_t v12 = v13;
LABEL_17:
        *uint64_t v11 = v12;
        if (v12)
        {
          uint64_t v17 = 0;
          __int16 v18 = v5;
          do
          {
            *__int16 v18 = ++v17;
            v18 += 32;
          }
          while (v12 != v17);
        }
      }
      else
      {
        *uint64_t v11 = 0;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        CMTime __str = 0;
        asprintf(&__str, "infoIndex=%u count=%d history=%s ", v2, *v11, (const char *)[(id)a1 payloadHistoryDescriptionForInfoIndex:v2]);
        if (__str)
        {
          __lasts = 0;
          int v19 = strtok_r(__str, "\n", &__lasts);
          do
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v20 = VRTraceErrorLogLevelToCSTR();
              uint64_t v21 = *MEMORY[0x1E4F47A50];
              __int16 v22 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)CMTime buf = 136316162;
                  uint64_t v27 = v20;
                  __int16 v28 = 2080;
                  uint64_t v29 = "VCAudioRedBuilder_UpdatePayloadHistory";
                  __int16 v30 = 1024;
                  int v31 = 484;
                  __int16 v32 = 2080;
                  uint64_t v33 = "VCAudioRedBuilder_UpdatePayloadHistory";
                  __int16 v34 = 2080;
                  uint64_t v35 = v19;
                  _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VCAudioRedBuilder [%s] %s:%d %s %s", buf, 0x30u);
                }
              }
              else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v27 = v20;
                __int16 v28 = 2080;
                uint64_t v29 = "VCAudioRedBuilder_UpdatePayloadHistory";
                __int16 v30 = 1024;
                int v31 = 484;
                __int16 v32 = 2080;
                uint64_t v33 = "VCAudioRedBuilder_UpdatePayloadHistory";
                __int16 v34 = 2080;
                uint64_t v35 = v19;
                _os_log_debug_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEBUG, "VCAudioRedBuilder [%s] %s:%d %s %s", buf, 0x30u);
              }
            }
            int v19 = strtok_r(0, "\n", &__lasts);
          }
          while (v19);
          free(__str);
          uint64_t v3 = v23;
        }
      }
      ++v2;
      v4 += 86;
      v5 += 344;
    }
    while (v2 < *(unsigned __int8 *)(a1 + 29));
  }
}

uint64_t VCAudioRedBuilder_GetPrimaryPayloadAndAppendSamples(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3 != 128 && (unsigned int v6 = *a2, *a2))
  {
    unsigned int v7 = *(unsigned __int8 *)(a1 + 29);
    if (v7 > v6)
    {
      unsigned int v8 = v7 - 1;
      do
        *(_DWORD *)(a1 + 32 + 344 * v8-- + 320) = 0;
      while (v6 <= v8);
    }
    unint64_t v9 = 0;
    uint64_t v10 = a1 + 32;
    *(unsigned char *)(a1 + 29) = v6;
    uint64_t v11 = (const void **)(a2 + 16);
    uint64_t v12 = a1;
    do
    {
      uint64_t v13 = (void *)(*(void *)(v12 + 360) + 1472 * *(int *)(v12 + 368));
      memcpy(v13, *(v11 - 1), *(unsigned int *)v11);
      *(_DWORD *)(v12 + 368) = (*(_DWORD *)(v12 + 368) + 1) % 9;
      *(void *)(v12 + 40) = v13;
      *(_DWORD *)(v12 + 32) = a3;
      *(void *)(v12 + 48) = *v11;
      *(unsigned char *)(v12 + 63) = *((unsigned char *)v11 + 8);
      ++v9;
      v12 += 344;
      v11 += 3;
    }
    while (v9 < *(unsigned __int8 *)(a1 + 29));
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      uint64_t v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        if (a2) {
          int v17 = *a2;
        }
        else {
          int v17 = 0;
        }
        int v18 = 136316674;
        uint64_t v19 = v14;
        __int16 v20 = 2080;
        uint64_t v21 = "VCAudioRedBuilder_GetPrimaryPayloadAndAppendSamples";
        __int16 v22 = 1024;
        int v23 = 557;
        __int16 v24 = 2048;
        uint64_t v25 = a1;
        __int16 v26 = 2048;
        uint64_t v27 = a2;
        __int16 v28 = 1024;
        int v29 = v17;
        __int16 v30 = 1024;
        int v31 = a3;
        _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, "VCAudioRedBuilder [%s] %s:%d Invalid input. builder=%p input=%p input->arrayCount=%u externalPayloadType=%u", (uint8_t *)&v18, 0x3Cu);
      }
    }
    return 0;
  }
  return v10;
}

void sub_1E205A860(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E205AA00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t VCAudioRedBuilder_SplitRedAudioPacket(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a2[6] != 20) {
    return 0;
  }
  unint64_t v7 = (int)a2[379];
  if (!v7)
  {
LABEL_16:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioRedBuilder_SplitRedAudioPacket_cold_1();
      }
    }
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v33 = a2 + 11;
  unsigned int v11 = a2[4];
  if (a4 <= 1) {
    int v12 = 1;
  }
  else {
    int v12 = a4;
  }
  uint64_t v13 = (v12 - 1);
  uint64_t v14 = a3 + 16;
  uint64_t v15 = 11;
  while (SLOBYTE(a2[v15]) < 0)
  {
    BOOL v16 = v7 >= 4;
    unint64_t v17 = v7 - 4;
    if (!v16 || v13 == v10)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioRedBuilder_SplitRedAudioPacket_cold_3();
        }
      }
      return 0;
    }
    unsigned int v18 = bswap32(a2[v15]);
    unsigned __int8 v19 = RTPGetInternalPayload(a1, HIBYTE(v18) & 0x7F);
    LOBYTE(v20) = a6;
    if (a6)
    {
      int v20 = (v18 >> 18) & 0x3F;
      unsigned int v21 = (v18 >> 10) * a5 / 0x64;
    }
    else
    {
      unsigned int v21 = (v18 >> 10) & 0x3FFF;
    }
    if ((unsigned __int16)(v18 & 0x3FF) > (int)v17)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioRedBuilder_SplitRedAudioPacket_cold_4();
        }
      }
      return 0;
    }
    *(unsigned char *)(v14 + 12) = 1;
    *(_DWORD *)(v14 - 16) = v19;
    unint64_t v7 = v17 - (v18 & 0x3FF);
    *(_DWORD *)uint64_t v14 = v18 & 0x3FF;
    *(_DWORD *)(v14 + 4) = v11 - v21;
    ++v15;
    *(unsigned char *)(v14 + 14) = v20;
    *(_DWORD *)(v14 + 8) = v11;
    v14 += 32;
    ++v10;
    if (!v7) {
      goto LABEL_16;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() > 7)
  {
    uint64_t v22 = VRTraceErrorLogLevelToCSTR();
    int v23 = *MEMORY[0x1E4F47A50];
    __int16 v24 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v37 = v22;
        __int16 v38 = 2080;
        __int16 v39 = "_VCAudioRedBuilder_SplitRedPacketIntoArray";
        __int16 v40 = 1024;
        int v41 = 703;
        __int16 v42 = 1024;
        int v43 = v10;
        _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, "VCAudioRedBuilder [%s] %s:%d redundant payloads count:%d", buf, 0x22u);
      }
    }
    else if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      VCAudioRedBuilder_SplitRedAudioPacket_cold_2();
    }
  }
  unsigned int v27 = v15 * 4 - 43;
  if (v10)
  {
    __int16 v28 = (_DWORD *)(a3 + 16);
    uint64_t v29 = v10;
    __int16 v30 = v33;
    do
    {
      *((void *)v28 - 1) = (char *)v33 + v27;
      int v31 = *v28;
      v28 += 8;
      v27 += v31;
      --v29;
    }
    while (v29);
  }
  else
  {
    __int16 v30 = v33;
  }
  uint64_t v25 = v10 + 1;
  *(void *)(v14 - 8) = (char *)v30 + v27;
  *(_DWORD *)uint64_t v14 = v7 - 1;
  *(unsigned char *)(v14 + 12) = 0;
  *(_DWORD *)(v14 - 16) = RTPGetInternalPayload(a1, a2[v15] & 0x7F);
  *(int32x2_t *)(v14 + 4) = vdup_n_s32(v11);
  if (!a6)
  {
    uint64_t v32 = (unsigned char *)(a3 + 30);
    do
    {
      *uint64_t v32 = v10;
      v32 += 32;
      --v10;
    }
    while (v10 != -1);
  }
  return v25;
}

BOOL VCAudioRedBuilder_UpdateAudioPacketWithRedPayload(uint64_t a1, int *a2)
{
  uint64_t v3 = (uint64_t)(a2 + 4);
  size_t v2 = a2[4];
  if ((int)v2 >= 1473)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      unsigned int v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioRedBuilder_UpdateAudioPacketWithRedPayload_cold_1(v7, v3, v8);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 28);
    *(_DWORD *)(a1 + 16) = a2[5];
    int v6 = *a2;
    *(_DWORD *)(a1 + 24) = *a2;
    *(_DWORD *)(a1 + 28) = v6;
    memcpy((void *)(a1 + 44), *((const void **)a2 + 1), v2);
    *(_DWORD *)(a1 + 1516) = a2[4];
    *(_WORD *)(a1 + 14) -= *((unsigned __int8 *)a2 + 30);
    *(_DWORD *)(a1 + 20) = a2[6];
  }
  return (int)v2 < 1473;
}

BOOL VTU_MoveAndInsertData(_DWORD *a1, int a2, int a3, const void *a4, int a5)
{
  int v5 = a1[8];
  int v6 = a3 + a2 + a5;
  if (v6 > v5)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VTU_MoveAndInsertData_cold_1();
      }
    }
  }
  else
  {
    uint64_t v10 = (char *)a1 + a2 + 40;
    size_t v11 = a5;
    memmove(&v10[a5], v10, a3);
    memcpy(v10, a4, v11);
    *a1 += a5;
  }
  return v6 <= v5;
}

BOOL VTU_ReallocPktsInfo(void **a1, void **a2, unsigned int *a3, void **a4, void **a5, unsigned int a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *a3;
  if (v12 || !*a1 && !*a2)
  {
    if (a6 >= 0x1F41)
    {
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      __int16 v28 = (os_log_t *)MEMORY[0x1E4F47A50];
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR)) {
          VTU_ReallocPktsInfo_cold_6();
        }
      }
      *a3 = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR)) {
          VTU_ReallocPktsInfo_cold_5();
        }
      }
    }
    else
    {
      int v13 = 2 * v12;
      if ((2 * v12) >= 0x1F40) {
        int v13 = 8000;
      }
      if (!v12) {
        int v13 = 100;
      }
      if (a6 <= 0x64) {
        int v14 = 100;
      }
      else {
        int v14 = a6;
      }
      if (a6) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v13;
      }
      if (v15 <= v12)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          return 1;
        }
        uint64_t v29 = VRTraceErrorLogLevelToCSTR();
        __int16 v30 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        int v31 = 136316162;
        uint64_t v32 = v29;
        __int16 v33 = 2080;
        __int16 v34 = "VTU_ReallocPktsInfo";
        __int16 v35 = 1024;
        int v36 = 1200;
        __int16 v37 = 1024;
        *(_DWORD *)__int16 v38 = a6;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v12;
        unsigned __int8 v19 = " [%s] %s:%d VTU_ReallocPktsInfo requested %d. Already have larger %d pkts.";
        int v20 = v30;
        uint32_t v21 = 40;
        goto LABEL_21;
      }
      uint64_t v16 = 4 * v12;
      if (_VTU_ReallocateBuffer(a1, 4 * v12, 4 * v15))
      {
        if (_VTU_ReallocateBuffer(a2, v16, 4 * v15))
        {
          if (_VTU_ReallocateBuffer(a5, v16, 4 * v15))
          {
            if (_VTU_ReallocateBuffer(a4, v16, 4 * v15))
            {
              *a3 = v15;
              if ((int)VRTraceGetErrorLogLevelForModule() < 6) {
                return 1;
              }
              uint64_t v17 = VRTraceErrorLogLevelToCSTR();
              unsigned int v18 = *MEMORY[0x1E4F47A50];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                return 1;
              }
              int v31 = 136315906;
              uint64_t v32 = v17;
              __int16 v33 = 2080;
              __int16 v34 = "VTU_ReallocPktsInfo";
              __int16 v35 = 1024;
              int v36 = 1216;
              __int16 v37 = 1024;
              *(_DWORD *)__int16 v38 = v15;
              unsigned __int8 v19 = " [%s] %s:%d VTU_ReallocPktsInfo succeeded for %d elements.";
              int v20 = v18;
              uint32_t v21 = 34;
LABEL_21:
              _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v31, v21);
              return 1;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VTU_ReallocPktsInfo_cold_1();
              }
            }
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VTU_ReallocPktsInfo_cold_2();
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VTU_ReallocPktsInfo_cold_3();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VTU_ReallocPktsInfo_cold_4();
        }
      }
    }
    BOOL result = 0;
    *a3 = 0;
    return result;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  uint64_t v23 = VRTraceErrorLogLevelToCSTR();
  __int16 v24 = *MEMORY[0x1E4F47A50];
  BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v25 = *a1;
    __int16 v26 = *a2;
    int v31 = 136316162;
    uint64_t v32 = v23;
    __int16 v33 = 2080;
    __int16 v34 = "VTU_ReallocPktsInfo";
    __int16 v35 = 1024;
    int v36 = 1192;
    __int16 v37 = 2048;
    *(void *)__int16 v38 = v25;
    *(_WORD *)&v38[8] = 2048;
    __int16 v39 = v26;
    _os_log_error_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_ERROR, " [%s] %s:%d VTU_ReallocPktsInfo failed; iNewMaxPacketCount==0 BUT *ppiPacketSizes=%p *ppiPacketFlags=%p",
      (uint8_t *)&v31,
      0x30u);
    return 0;
  }
  return result;
}

BOOL _VTU_ReallocateBuffer(void **a1, uint64_t a2, size_t size)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  int v6 = malloc_type_realloc(*a1, size, 0x693CFAA9uLL);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v6)
  {
    if (ErrorLogLevelForModule >= 6)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      unint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136316674;
        uint64_t v12 = v8;
        __int16 v13 = 2080;
        int v14 = "_VTU_ReallocateBuffer";
        __int16 v15 = 1024;
        int v16 = 1148;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2048;
        size_t v20 = size;
        __int16 v21 = 2048;
        uint64_t v22 = v6;
        __int16 v23 = 2048;
        size_t v24 = (size_t)v6 + size;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d _VTU_ReallocateBuffer.....Reallocing buffer of size %zu to %zu from [%p, %p)", (uint8_t *)&v11, 0x44u);
      }
    }
    *a1 = v6;
    return 1;
  }
  if (ErrorLogLevelForModule < 3) {
    return 0;
  }
  VRTraceErrorLogLevelToCSTR();
  BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    _VTU_ReallocateBuffer_cold_1();
    return 0;
  }
  return result;
}

uint64_t VTU_GetOverhead(int a1, int a2, int a3, int a4)
{
  if (a1)
  {
    int WorstCaseNetworkOverhead = VCConnection_GetWorstCaseNetworkOverhead(a1, 1);
  }
  else
  {
    int FacetimeNetworkOverhead = VCConnection_GetFacetimeNetworkOverhead(a4);
    if (a2) {
      int v8 = 16;
    }
    else {
      int v8 = 0;
    }
    if (a3) {
      int v9 = 16;
    }
    else {
      int v9 = 0;
    }
    int WorstCaseNetworkOverhead = v9 + v8 + FacetimeNetworkOverhead;
  }
  return (WorstCaseNetworkOverhead + 12);
}

uint64_t VTU_CreatePacketAllocator(uint64_t a1, uint64_t a2, CFAllocatorRef *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v10[0] = 2;
  v10[1] = a1 + 40;
  long long v11 = xmmword_1E259ED00;
  uint64_t v4 = VCAllocatorMultiQueue_Create((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (uint64_t)"VCVideoTransmitterPacketAllocator", 4u, v10, a3);
  if (!v4)
  {
    uint64_t v5 = 0;
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    do
    {
      _VTU_AllocateVPList(*a3, 2000000, (_OWORD *)((char *)v8 + v5));
      v5 += 8;
    }
    while (v5 != 40);
    for (uint64_t i = 0; i != 40; i += 8)
      _VTU_FreeVPList(*(void **)((char *)v8 + i));
  }
  return v4;
}

BOOL _VTU_AllocateVPList(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  int v6 = (char *)CFAllocatorAllocate(a1, a2 + 40, 0);
  if (v6)
  {
    if (a1) {
      CFTypeRef v7 = CFRetain(a1);
    }
    else {
      CFTypeRef v7 = 0;
    }
    *((void *)v6 + 3) = 0;
    *((void *)v6 + 4) = a2;
    *((void *)v6 + 2) = v7;
    *(void *)int v6 = 0;
    *(_DWORD *)(v6 + 7) = 0;
    *a3 = v6;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VTU_AllocateVPList_cold_1();
    }
  }
  return v6 != 0;
}

void _VTU_FreeVPList(void *ptr)
{
  if (ptr)
  {
    int v1 = ptr;
    do
    {
      size_t v2 = v1;
      int v1 = (void *)v1[3];
      CFAllocatorRef v3 = (const __CFAllocator *)v2[2];
      CFAllocatorDeallocate(v3, v2);
      if (v3) {
        CFRelease(v3);
      }
    }
    while (v1);
  }
}

uint64_t VTU_HandleMTUOverride(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 75))
  {
    int v5 = (int)((double)a2 * 0.0666 * 0.125 + -66.0);
    if (*(unsigned char *)(a1 + 70))
    {
      int v6 = (int)((double)a2 * 0.1 * 0.125 + -66.0);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        int v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 136316674;
          uint64_t v12 = v7;
          __int16 v13 = 2080;
          int v14 = "VTU_HandleMTUOverride";
          __int16 v15 = 1024;
          int v16 = 1274;
          __int16 v17 = 1024;
          int v18 = a3;
          __int16 v19 = 1024;
          int v20 = v5;
          __int16 v21 = 1024;
          int v22 = v6;
          __int16 v23 = 1024;
          unsigned int v24 = a2;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VTU_SplitVideoIntoPackets: bEnableInitialMTUOverrideFor2G    MTU: %d %d->%d  Tx: %d", (uint8_t *)&v11, 0x34u);
        }
      }
    }
    else
    {
      int v6 = (int)((double)a2 * 0.0666 * 0.125 + -66.0);
    }
    int v9 = (int)fmax((double)v6, 233.7);
    if (v9 >= (int)a3) {
      return a3;
    }
    else {
      return v9;
    }
  }
  return a3;
}

uint64_t VTU_SplitVideoIntoPackets(unsigned __int16 **a1, int32_t a2, char *a3, int a4, void **a5, uint64_t a6, int a7, int a8, int a9, int a10, unsigned int a11, int a12)
{
  uint64_t v12 = 0;
  uint64_t v307 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return v12;
  }
  __int16 v13 = a5;
  if (!a5) {
    return v12;
  }
  *a5 = 0;
  uint64_t v15 = *((unsigned __int16 *)a1 + 36);
  uint64_t v306 = 0;
  memset(v305, 0, sizeof(v305));
  uint64_t v304 = 0;
  memset(v303, 0, sizeof(v303));
  int v16 = *((_DWORD *)a1 + 14);
  if (a10 && a12)
  {
    if ((a12 - 3) >= 3)
    {
      int v18 = a4 + 3;
      if (a4 + 3 < 0) {
        int v18 = a4 + 6;
      }
      unsigned int v19 = v18 >> 2;
      if (a4 >= 4 * (int)v15) {
        unsigned int v19 = v15;
      }
      int v20 = 0;
      if ((a12 - 1) <= 1) {
        uint64_t v15 = v19;
      }
      else {
        uint64_t v15 = v15;
      }
    }
    else
    {
      BOOL v17 = v16 >= 1 || (int)v15 <= a4;
      if (v17)
      {
        int v20 = 0;
        if (3 * (int)v15 > a4) {
          uint64_t v15 = ((a4 + 2) / 3);
        }
        else {
          uint64_t v15 = v15;
        }
      }
      else
      {
        int v20 = 0;
      }
    }
  }
  else if ((int)((double)a11 * 0.00375) <= 250)
  {
    int v20 = 250;
  }
  else
  {
    int v20 = (int)((double)a11 * 0.00375);
  }
  int v21 = VTU_HandleMTUOverride((uint64_t)a1, a11, v15);
  int v22 = a1;
  int v23 = v21;
  int v24 = *((unsigned __int8 *)a1 + 68);
  if (v16 >= 1)
  {
    float v25 = FECUtil_FECLevelofProtectionToRateRatio(a12);
    int v22 = a1;
    double v26 = v25;
    int v27 = *((_DWORD *)a1 + 16);
    if (v27 != *((_DWORD *)a1 + 15) || (int v28 = *((_DWORD *)a1 + 14), v28 * v27 > (int)((double)a4 * v26)))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v29 = VRTraceErrorLogLevelToCSTR();
        __int16 v30 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v185 = *((_DWORD *)a1 + 15);
          int v184 = *((_DWORD *)a1 + 16);
          int v186 = *((_DWORD *)a1 + 14);
          *(_DWORD *)CMTime buf = 136316930;
          *(void *)&uint8_t buf[4] = v29;
          __int16 v289 = 2080;
          v290 = "VTU_SplitVideoIntoPackets";
          __int16 v291 = 1024;
          int v292 = 1362;
          __int16 v293 = 1024;
          int v294 = v184;
          __int16 v295 = 1024;
          int v296 = v185;
          __int16 v297 = 1024;
          int v298 = v186;
          __int16 v299 = 1024;
          int v300 = a4;
          __int16 v301 = 1024;
          int v302 = (int)((double)a4 * v26);
          _os_log_error_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_ERROR, " [%s] %s:%d CU_SplitVideoIntoPackets failed sanity check!: iProbeSeqPacketSize = %d iProbeSeqFirstPacketSize = %d iProbeSeqPacketint32_t Count = %d len = %d lenWithFEC = %d", buf, 0x3Au);
        }
      }
      return 0;
    }
    if (a4 / v28 + 1 < v23) {
      int v23 = a4 / v28 + 1;
    }
  }
  int v31 = a4 - 4;
  int v278 = v23;
  int v267 = v24;
  int32_t v32 = a2;
  int v257 = a4;
  if (a4 >= 4)
  {
    int v260 = v20;
    OSStatus v254 = v13;
    uint64_t v36 = 0;
    int v37 = 0;
    int v38 = 0;
    int v248 = 0;
    char v39 = 0;
    do
    {
      uint64_t v40 = 0;
      while (1)
      {
        if (v36 + v40 == 50)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VTU_SplitVideoIntoPackets_cold_19();
            }
          }
          return 0;
        }
        int v41 = (unsigned int *)&a3[v37];
        unsigned int v42 = bswap32(*v41);
        if (v42 > v31 - v37)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VTU_SplitVideoIntoPackets_cold_20();
            }
          }
          return 0;
        }
        v305[v36 + v40] = v37;
        unsigned int v43 = v42 + 4;
        *((_DWORD *)v303 + v36 + v40) = v42 + 4;
        if ((v37 == 0) | v39 & 1) {
          break;
        }
        if (!v38)
        {
          char v39 = 0;
          int v23 = v278;
          goto LABEL_70;
        }
        CFTypeRef cf = 0;
        if (ReadFrameSliceHeader(v32, (uint64_t)(v41 + 1), v42, (CFDictionaryRef *)&cf) == 1)
        {
          if (*(_DWORD *)a1[2] >= (int)*((unsigned __int16 *)a1 + 4))
          {
            pthread_mutex_unlock((pthread_mutex_t *)a1[3]);
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VTU_SplitVideoIntoPackets_cold_21();
              }
            }
            return 0;
          }
          __srCC_SHA1_CTX c = -21846;
          unsigned __int16 v285 = -21846;
          if (RetrieveMBSliceTypeFromFrameInfoDict((CFDictionaryRef)cf, &__src, &v285))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
            {
              uint64_t v44 = VRTraceErrorLogLevelToCSTR();
              __int16 v45 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315650;
                *(void *)&uint8_t buf[4] = v44;
                __int16 v289 = 2080;
                v290 = "VTU_SplitVideoIntoPackets";
                __int16 v291 = 1024;
                int v292 = 1467;
                _os_log_impl(&dword_1E1EA4000, v45, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VTU_SplitVideoIntoPackets: FRAMEHEADER_SLICEINFO bad RetrieveMBSlice", buf, 0x1Cu);
              }
            }
          }
          else
          {
            int v46 = a1[2];
            uint64_t v47 = *(int *)v46;
            (*a1)[v47] = __src;
            *(_DWORD *)int v46 = v47 + 1;
          }
        }
        if (cf) {
          CFRelease(cf);
        }
        char v39 = 0;
        v37 += v43;
        ++v40;
        int v38 = 1;
        int v22 = a1;
        int32_t v32 = a2;
        if (v37 > v31)
        {
          int v34 = v36 + v40;
          __int16 v13 = v254;
          uint64_t v35 = a6;
          int v23 = v278;
          goto LABEL_79;
        }
      }
      uint64_t v245 = v36;
      CFTypeRef cf = 0;
      int FrameSliceHeader = ReadFrameSliceHeader(v32, (uint64_t)(v41 + 1), v42, (CFDictionaryRef *)&cf);
      int v248 = FrameSliceHeader;
      if ((FrameSliceHeader - 2) >= 2)
      {
        if (FrameSliceHeader == 5) {
          char v39 = 1;
        }
        int v22 = a1;
        int v23 = v278;
      }
      else
      {
        __srCC_SHA1_CTX c = -21846;
        unsigned __int16 v285 = -21846;
        if (RetrieveResolutionFromFrameInfoDict((CFDictionaryRef)cf, &__src, &v285))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 5)
          {
            int v22 = a1;
            int v23 = v278;
          }
          else
          {
            uint64_t v49 = VRTraceErrorLogLevelToCSTR();
            __int16 v50 = *MEMORY[0x1E4F47A50];
            int v23 = v278;
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315650;
              *(void *)&uint8_t buf[4] = v49;
              __int16 v289 = 2080;
              v290 = "VTU_SplitVideoIntoPackets";
              __int16 v291 = 1024;
              int v292 = 1422;
              _os_log_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VTU_SplitVideoIntoPackets: FRAMEHEADER_IMGDESC/SPS bad RetrieveMBSlice", buf, 0x1Cu);
            }
            int v22 = a1;
          }
        }
        else
        {
          int v22 = a1;
          int v23 = v278;
          if (**a1 != __src || (*a1)[1] != v285)
          {
            pthread_mutex_lock((pthread_mutex_t *)a1[3]);
            int v22 = a1;
            __int16 v51 = *a1;
            *__int16 v51 = __src;
            v51[1] = v285;
            *(_DWORD *)a1[2] = 2;
            int v38 = 1;
          }
        }
        char v39 = 0;
      }
      if (cf)
      {
        CFRelease(cf);
        int v22 = a1;
      }
      int32_t v32 = a2;
      uint64_t v36 = v245;
LABEL_70:
      v37 += v43;
      v36 += v40 + 1;
    }
    while (v37 <= v31);
    uint64_t v35 = a6;
    int v34 = v36;
    if (v38)
    {
      __int16 v13 = v254;
LABEL_79:
      int v33 = v248;
      pthread_mutex_unlock((pthread_mutex_t *)v22[3]);
      int v22 = a1;
      int v20 = v260;
      int v24 = v267;
      int32_t v32 = a2;
    }
    else
    {
      __int16 v13 = v254;
      int v20 = v260;
      int v24 = v267;
      int v33 = v248;
    }
  }
  else
  {
    int v33 = 0;
    int v34 = 0;
    uint64_t v35 = a6;
  }
  if (a7 <= 0)
  {
    double v54 = a3;
    void *v13 = a3;
    goto LABEL_108;
  }
  if (v33 == 1)
  {
    if (v34 % a8) {
      goto LABEL_104;
    }
    int v53 = 0;
    int v52 = v34;
  }
  else
  {
    if (v33 != 3 && v33 != 2) {
      goto LABEL_104;
    }
    int v52 = v34 - 1;
    if (((v34 - 1) & 3) != 0) {
      goto LABEL_104;
    }
    int v53 = 1;
  }
  unsigned int v55 = v52 / a8;
  if (v52 / a8 >= 1)
  {
    uint64_t v56 = 0;
    int v57 = 0;
    BOOL v58 = 0;
    int v59 = v55 + v53;
    do
    {
      if (v56 == a9 || !*(_DWORD *)(v35 + 4 * v56))
      {
        signed int v60 = v59 + v55;
        if ((int)(v59 + v55) < v34)
        {
          uint64_t v61 = v60;
          uint64_t v62 = -4 * v55 + 4 * v60;
          do
          {
            *(_DWORD *)((char *)v305 + v62) = v305[v61];
            *(_DWORD *)((char *)v303 + v62) = *((_DWORD *)v303 + v61++);
            v62 += 4;
          }
          while (v61 < v34);
        }
        v34 -= v55;
        BOOL v58 = 1;
      }
      else
      {
        v59 += v55;
        BOOL v101 = !v58;
        BOOL v58 = v58;
        if (!v101) {
          int v57 = 1;
        }
      }
      ++v56;
    }
    while (v56 != 3);
    if (v59 >= 51)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VTU_SplitVideoIntoPackets_cold_17();
        }
      }
      return 0;
    }
    if (v57)
    {
      uint64_t v121 = v59;
      if (v59 < 1)
      {
        int v122 = 0;
      }
      else
      {
        int v122 = 0;
        uint64_t v123 = (int *)v303;
        uint64_t v124 = v59;
        do
        {
          int v125 = *v123++;
          v122 += v125;
          --v124;
        }
        while (v124);
      }
      uint64_t v187 = (char *)CFAllocatorAllocate((CFAllocatorRef)v22[10], v122, 0);
      if (!v187)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VTU_SplitVideoIntoPackets_cold_18();
          }
        }
        return 0;
      }
      double v54 = v187;
      if (v59 <= 0)
      {
        int v257 = 0;
        void *v13 = v187;
        v305[0] = 0;
        int v34 = v59;
        int v22 = a1;
        int v23 = v278;
        int32_t v32 = a2;
        goto LABEL_108;
      }
      int v263 = v20;
      int v188 = 0;
      uint64_t v189 = (int *)v303;
      uint64_t v190 = v305;
      do
      {
        uint64_t v191 = *v190++;
        int v192 = &a3[v191];
        size_t v193 = *v189++;
        memcpy(&v54[v188], v192, v193);
        v188 += v193;
        --v121;
      }
      while (v121);
      int v257 = v188;
      int v34 = v59;
      int v22 = a1;
      int v23 = v278;
      int v20 = v263;
      int v24 = v267;
      int32_t v32 = a2;
    }
    else
    {
      double v54 = a3;
      int v34 = v59;
      int v23 = v278;
    }
    goto LABEL_105;
  }
LABEL_104:
  double v54 = a3;
LABEL_105:
  void *v13 = v54;
  v305[0] = 0;
  if (v34 > 1)
  {
    int v63 = 0;
    char v64 = &v305[1];
    uint64_t v65 = v34 - 1;
    uint64_t v66 = (int *)v303;
    do
    {
      int v67 = *v66++;
      v63 += v67;
      *v64++ = v63;
      --v65;
    }
    while (v65);
  }
LABEL_108:
  if (v32 != 123 && v32 != 100)
  {
    if (v34 > 1)
    {
      unint64_t v80 = v34;
      while (1)
      {
        int v81 = 1;
        if (v80 >= 3)
        {
          int v82 = DWORD1(v303[0]);
          for (uint64_t i = 2; i != v80; ++i)
          {
            int v84 = *((_DWORD *)v303 + i);
            if (v82 + v84 < *((_DWORD *)v303 + v81 - 1) + *((_DWORD *)v303 + v81)) {
              int v81 = i;
            }
            int v82 = v84;
          }
        }
        uint64_t v85 = v81 - 1;
        int v86 = *((_DWORD *)v303 + v85) + *((_DWORD *)v303 + v81);
        if (v86 > v23) {
          break;
        }
        *((_DWORD *)v303 + v85) = v86;
        LODWORD(v85) = v81 + 1;
        if ((uint64_t)v80 > v81 + 1)
        {
          uint64_t v85 = (int)v85;
          do
            *((_DWORD *)v303 + v81++) = *((_DWORD *)v303 + v85++);
          while (v85 < (uint64_t)v80);
        }
        BOOL v17 = v80-- > 2;
        if (!v17)
        {
          int v34 = 1;
          goto LABEL_169;
        }
      }
      int v34 = v80;
    }
    if (v34 >= 1)
    {
LABEL_169:
      uint64_t v12 = 0;
      int v99 = 0;
      int v276 = v23 - 1;
      int v271 = v34;
      int v261 = v20;
      while (1)
      {
        int v100 = *((_DWORD *)v303 + v99);
        if (v100)
        {
          if (!v24 && (v100 > v20 ? (BOOL v101 = v34 == 1) : (BOOL v101 = 0), v101 ? (v102 = v100 < v278) : (v102 = 0), v102))
          {
            int v103 = 0;
            int v104 = 2;
          }
          else
          {
            int v104 = (v276 + v100) / v278;
            if (!v104)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                uint64_t v116 = VRTraceErrorLogLevelToCSTR();
                int v117 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CMTime buf = 136315650;
                  *(void *)&uint8_t buf[4] = v116;
                  __int16 v289 = 2080;
                  v290 = "VTU_SplitVideoIntoPackets";
                  __int16 v291 = 1024;
                  int v292 = 1730;
                  _os_log_error_impl(&dword_1E1EA4000, v117, OS_LOG_TYPE_ERROR, " [%s] %s:%d \"parts\" is zero while trying to calculate \"each = (bytes / parts) + 1\"", buf, 0x1Cu);
                }
              }
              int v22 = a1;
              goto LABEL_208;
            }
            int v103 = v100 / v104 + 1;
          }
          if (v104 >= 1 && v100 >= 1) {
            break;
          }
        }
LABEL_208:
        if (++v99 >= v34) {
          return v12;
        }
      }
      uint64_t v105 = 0;
      uint64_t v106 = (int)v12;
      int v281 = v12;
      uint64_t v107 = 4 * (int)v12;
      while (1)
      {
        int v108 = v100 - 50;
        if (v103)
        {
          int v108 = v103;
          unsigned int v109 = v103;
        }
        else
        {
          unsigned int v109 = 50;
        }
        if (v103 > v100)
        {
          uint64_t v110 = v100;
        }
        else
        {
          int v103 = v108;
          uint64_t v110 = v109;
        }
        if (!(v105 | v99) && *((unsigned char *)v22 + 69))
        {
          int ProbePktSize = Throttling_VideoTransmitterUtil_ForceFirstProbePktSize(v100, v110);
          int v22 = a1;
          LODWORD(v110) = ProbePktSize;
        }
        int v112 = (void **)v22[5];
        uint64_t v113 = (unsigned int *)v22[6];
        uint64_t v114 = (void **)v22[4];
        if (v106 + v105 >= (int)*v113)
        {
          if (!VTU_ReallocPktsInfo(v114, v112, v113, 0, 0, 0))
          {
            uint64_t v12 = (v281 + v105 + 1);
            int v34 = v271;
            int v99 = v271;
            int v22 = a1;
LABEL_207:
            int v20 = v261;
            int v24 = v267;
            goto LABEL_208;
          }
          int v22 = a1;
          uint64_t v114 = (void **)a1[4];
          int v112 = (void **)a1[5];
        }
        *(_DWORD *)((char *)*v114 + 4 * v105 + v107) = v110;
        *(_DWORD *)((char *)*v112 + 4 * v105 + v107) = (2 * (v105 == 0)) | (v104 - 1 == v105);
        if ((int)++v105 < v104)
        {
          BOOL v115 = __OFSUB__(v100, v110);
          v100 -= v110;
          if (!((v100 < 0) ^ v115 | (v100 == 0))) {
            continue;
          }
        }
        uint64_t v12 = (v281 + v105);
        int v34 = v271;
        goto LABEL_207;
      }
    }
    return 0;
  }
  void *v13 = 0;
  int v69 = (void **)v22[4];
  signed int v68 = (void **)v22[5];
  int v70 = (unsigned int *)v22[6];
  if (v32 != 100)
  {
    int v252 = *((unsigned __int8 *)v22 + 69);
    int v87 = *((unsigned __int8 *)v22 + 76);
    unsigned int v88 = *((unsigned __int16 *)v22 + 39);
    CFAllocatorRef v89 = (const __CFAllocator *)v22[10];
    CFTypeRef cf = 0;
    if (!v257)
    {
      if (!v87)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VTU_SplitVideoIntoPackets_cold_9();
          }
        }
        goto LABEL_435;
      }
      int v95 = CFAllocatorAllocate(v89, 2, 0);
      void *v13 = v95;
      if (v95)
      {
        char v96 = 12;
        goto LABEL_156;
      }
LABEL_223:
      int v34 = 0;
      LODWORD(v68) = 0;
      goto LABEL_436;
    }
    uint64_t v244 = v68;
    v247 = v70;
    int v280 = v87;
    if (v34 <= 0)
    {
      v256 = v13;
      __int16 v258 = __rev16(v88);
      __srCC_SHA1_CTX c = v258;
      unsigned int v120 = 2 * (v87 != 0);
    }
    else
    {
      unsigned int v275 = v88;
      int v250 = v69;
      unint64_t v90 = 0;
      do
      {
        int v91 = *((_DWORD *)v303 + v90);
        if (v91 <= v23) {
          unsigned int v92 = v23;
        }
        else {
          unsigned int v92 = *((_DWORD *)v303 + v90);
        }
        int v93 = AddOneVPList((uint64_t *)&cf, v91, v305[v90++], (uint64_t)v54, v257, v92, v89);
        if (v93) {
          BOOL v94 = 1;
        }
        else {
          BOOL v94 = v90 >= v34;
        }
      }
      while (!v94);
      if (v93)
      {
LABEL_149:
        int v79 = cf;
        goto LABEL_434;
      }
      v256 = v13;
      int v87 = v280;
      __int16 v258 = __rev16(v275);
      __srCC_SHA1_CTX c = v258;
      unsigned int v120 = 2 * (v280 != 0);
      if (v34 >= 2)
      {
        int v169 = v23 - 5;
        int v170 = v34;
        while (1)
        {
          unsigned int v171 = (unsigned int *)cf;
          int v172 = (unsigned int *)*((void *)cf + 3);
          if (!v172) {
            break;
          }
          int v173 = (unsigned __int16 *)*((void *)v172 + 3);
          if (v173)
          {
            int v174 = *v172;
            int v175 = *(_DWORD *)cf;
            int v176 = cf;
            int v177 = (unsigned __int16 *)*((void *)cf + 3);
            do
            {
              unsigned int v178 = *v172 + *(_DWORD *)v173;
              unsigned int v179 = v174 + v175;
              if (v178 < v174 + v175) {
                int v174 = *(_DWORD *)v173;
              }
              if (v178 < v179)
              {
                int v177 = v173;
                int v175 = *v172;
                unsigned int v171 = v172;
              }
              int v172 = (unsigned int *)*((void *)v172 + 3);
              int v173 = (unsigned __int16 *)*((void *)v173 + 3);
            }
            while (v173);
          }
          else
          {
            int v177 = (unsigned __int16 *)*((void *)cf + 3);
            int v176 = cf;
          }
          size_t v180 = *v171;
          if ((int)v180 + *(_DWORD *)v177 > v169)
          {
            int v23 = v278;
            goto LABEL_341;
          }
          if (!*((unsigned char *)v171 + 10))
          {
            if (*((void *)v171 + 4) < (unint64_t)(v180 + 2))
            {
              int v79 = v176;
              goto LABEL_434;
            }
            unsigned int v181 = bswap32(v180) >> 16;
            memmove((char *)v171 + 42, v171 + 10, v180);
            *((_WORD *)v171 + 20) = v181;
            LODWORD(v180) = *v171 + 2;
            *unsigned int v171 = v180;
          }
          unint64_t v182 = *((void *)v171 + 4);
          if (!*((unsigned char *)v177 + 10))
          {
            unint64_t v183 = (v180 + 2);
            if (v182 < v183)
            {
              _VTU_FreeVPList(v176);
              BOOL v97 = a1;
              LODWORD(v68) = -1;
              goto LABEL_437;
            }
            *(_WORD *)((char *)v171 + v180 + 40) = bswap32(*v177) >> 16;
            *unsigned int v171 = v183;
            LODWORD(v180) = v180 + 2;
          }
          if (v182 < (*(_DWORD *)v177 + v180)) {
            goto LABEL_149;
          }
          memcpy((char *)v171 + v180 + 40, v177 + 20, *(unsigned int *)v177);
          *v171 += *(_DWORD *)v177;
          *((unsigned char *)v171 + 10) = 1;
          *((void *)v171 + 3) = *((void *)v177 + 3);
          *((void *)v177 + 3) = 0;
          _VTU_FreeVPList(v177);
          BOOL v17 = v170-- <= 2;
          int v23 = v278;
          int v87 = v280;
          if (v17) {
            goto LABEL_341;
          }
        }
        int v69 = v250;
LABEL_343:
        int v195 = v120 | 1;
        __int16 v196 = v171;
        size_t v197 = v120;
        if (v87) {
          char v198 = 57;
        }
        else {
          char v198 = 56;
        }
        ptr = v196;
        do
        {
          if (*((unsigned char *)v196 + 10) == 1)
          {
            size_t v199 = *v196;
            if (*((void *)v196 + 4) < (unint64_t)(v199 + v195))
            {
LABEL_433:
              int v79 = ptr;
              goto LABEL_434;
            }
            memmove((char *)v196 + v120 + 41, v196 + 10, v199);
            *((unsigned char *)v196 + 40) = v198;
            if (v280) {
              memcpy((char *)v196 + 41, &__src, v120);
            }
            *v196 += v195;
          }
          __int16 v196 = (unsigned int *)*((void *)v196 + 3);
        }
        while (v196);
        v251 = v69;
        int v200 = v23 - (v120 + 2);
        if (v280) {
          char v201 = 29;
        }
        else {
          char v201 = 28;
        }
        char v236 = v201;
        int v237 = v200 - 1;
        int v234 = v23 - (v120 + 2);
        int v235 = v120 | 1;
        unsigned int v202 = ptr;
        int v272 = v34;
        uint64_t v266 = v54;
LABEL_357:
        float v203 = (char *)(v202 + 5);
        if (v280 && (*v203 & 0x1B) == 1)
        {
          int v204 = *(_DWORD *)v202;
        }
        else
        {
          int v204 = *(_DWORD *)v202;
          if (*(_DWORD *)v202 <= v23)
          {
            uint64_t v210 = (uint64_t)v202;
            goto LABEL_391;
          }
        }
        if (v200 <= 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v229 = VRTraceErrorLogLevelToCSTR();
            long long v230 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136316418;
              *(void *)&uint8_t buf[4] = v229;
              __int16 v289 = 2080;
              v290 = "VTU_PrepareH264FrameData";
              __int16 v291 = 1024;
              int v292 = 524;
              __int16 v293 = 1024;
              int v294 = 524;
              __int16 v295 = 1024;
              int v296 = v200;
              __int16 v297 = 1024;
              int v298 = v23;
              _os_log_error_impl(&dword_1E1EA4000, v230, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Invalid adjustedMTU=%d MTU=%d", buf, 0x2Eu);
            }
          }
          goto LABEL_433;
        }
        uint64_t v269 = v202[3];
        if ((v237 + v204) / v200 >= 2 || v280 == 0) {
          int v206 = (v237 + v204) / v200;
        }
        else {
          int v206 = 2;
        }
        int v207 = v204 / v206 + 1;
        if (v252)
        {
          int v208 = Throttling_VideoTransmitterUtil_ForceFirstProbePktSize(v204, (v204 / v206 + 1));
          int v209 = v204 / v206 + 1;
          if (v207 != v208)
          {
            int v207 = (v204 - v208) / (v206 - 1) + 1;
            int v209 = v208;
          }
        }
        else
        {
          int v209 = v204 / v206 + 1;
        }
        char v211 = *v203;
        char v277 = *v203 & 0xE0 | v236;
        BOOL v115 = __OFSUB__(v206, 1);
        int v212 = v206 - 1;
        if ((v212 < 0) ^ v115 | (v212 == 0))
        {
          char v264 = v211 & 0x1F;
          uint64_t v210 = (uint64_t)v202;
          goto LABEL_387;
        }
        int v213 = v204 - v209;
        int v233 = v209;
        int v214 = &v203[v209];
        unint64_t v215 = (v207 + v197 + 2);
        char v242 = v211;
        char v264 = v211 & 0x1F;
        size_t __n = v207;
        int v241 = v207;
        uint64_t v210 = (uint64_t)v202;
        while (1)
        {
          uint64_t v216 = (uint64_t *)(v210 + 24);
          if (!_VTU_AllocateVPList(v89, (int)v215, (void *)(v210 + 24)))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VTU_SplitVideoIntoPackets_cold_16();
              }
            }
LABEL_412:
            __int16 v194 = ptr;
LABEL_413:
            _VTU_FreeVPList(v194);
            LODWORD(v68) = -1;
            BOOL v97 = a1;
LABEL_414:
            int v34 = v272;
LABEL_415:
            double v54 = v266;
            goto LABEL_437;
          }
          uint64_t v210 = *v216;
          *(void *)(*v216 + 24) = v269;
          if (v212 == 1)
          {
            if ((PrepareLastH264Fragment(v210, v277, v242, v214, v213, v258, v197) & 0x80000000) != 0)
            {
              int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
              if (ErrorLogLevelForModule >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VTU_SplitVideoIntoPackets_cold_10();
                }
              }
              goto LABEL_412;
            }
          }
          else
          {
            if (v213 <= v241)
            {
              int H264Fragment = PrepareLastH264Fragment(v210, v277, v242, v214, v213, v258, v197);
              int v34 = v272;
              int v23 = v278;
              int v209 = v233;
              if (H264Fragment < 0)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VTU_SplitVideoIntoPackets_cold_15();
                  }
                }
                goto LABEL_412;
              }
LABEL_387:
              *((_WORD *)v202 + 4) = 1;
              *(_DWORD *)unsigned int v202 = v209 + v235;
              if (v202[4] < (unint64_t)(v209 + v235))
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VTU_SplitVideoIntoPackets_cold_11();
                  }
                }
                _VTU_FreeVPList(ptr);
                LODWORD(v68) = -1;
                BOOL v97 = a1;
                goto LABEL_415;
              }
              memmove((char *)v202 + v197 + 42, (char *)v202 + 41, v209 - 1);
              *((unsigned char *)v202 + 40) = v277;
              *((unsigned char *)v202 + 41) = v264 | 0x80;
              if (v280) {
                memcpy((char *)v202 + 42, &__src, v197);
              }
              int v200 = v234;
LABEL_391:
              unsigned int v202 = *(void **)(v210 + 24);
              double v54 = v266;
              if (!v202)
              {
                int v220 = 0;
                long long v221 = ptr;
                __int16 v222 = ptr;
                do
                {
                  v220 += *(_DWORD *)v222;
                  __int16 v222 = (void *)v222[3];
                }
                while (v222);
                long long v218 = v256;
                if (v220)
                {
                  __int16 v223 = CFAllocatorAllocate(v89, v220, 0);
                  NSObject *v256 = v223;
                  if (v223)
                  {
                    uint64_t v224 = 0;
                    int v225 = 0;
                    int v226 = (unsigned int *)ptr;
                    while (1)
                    {
                      memcpy((char *)*v256 + v225, v226 + 10, *v226);
                      int v227 = *v226;
                      int v228 = *v226;
                      if (v224 >= (int)*v247)
                      {
                        if (!VTU_ReallocPktsInfo(v251, v244, v247, 0, 0, 0))
                        {
                          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                          {
                            VRTraceErrorLogLevelToCSTR();
                            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                              VTU_SplitVideoIntoPackets_cold_13();
                            }
                          }
                          _VTU_FreeVPList(ptr);
                          CFAllocatorDeallocate(v89, *v256);
                          NSObject *v256 = 0;
                          goto LABEL_435;
                        }
                        int v228 = *v226;
                      }
                      v225 += v227;
                      *((_DWORD *)*v251 + v224) = v228;
                      *((_DWORD *)*v244 + v224++) = *((unsigned __int8 *)v226 + 9) | (2 * *((unsigned __int8 *)v226 + 8));
                      int v226 = (unsigned int *)*((void *)v226 + 3);
                      if (!v226)
                      {
                        _VTU_FreeVPList(ptr);
                        LODWORD(v68) = 0;
                        int v34 = v224;
                        goto LABEL_436;
                      }
                    }
                  }
LABEL_399:
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VTU_SplitVideoIntoPackets_cold_12();
                    }
                  }
                  int v79 = v221;
LABEL_434:
                  _VTU_FreeVPList(v79);
LABEL_435:
                  LODWORD(v68) = -1;
                  goto LABEL_436;
                }
LABEL_398:
                *long long v218 = 0;
                goto LABEL_399;
              }
              goto LABEL_357;
            }
            *(_DWORD *)uint64_t v210 = v215;
            *(_WORD *)(v210 + 8) = 0;
            if (*(void *)(v210 + 32) < v215)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VTU_SplitVideoIntoPackets_cold_14();
                }
              }
              goto LABEL_412;
            }
            *(unsigned char *)(v210 + 40) = v277;
            *(unsigned char *)(v210 + 41) = v264;
            if (v280) {
              *(_WORD *)(v210 + 42) = __src;
            }
            memcpy((void *)(v210 + v197 + 42), v214, __n);
            v214 += __n;
            v213 -= v241;
          }
          if (!--v212)
          {
            int v34 = v272;
            int v23 = v278;
            int v209 = v233;
            goto LABEL_387;
          }
        }
      }
LABEL_341:
      int v69 = v250;
    }
    unsigned int v171 = (unsigned int *)cf;
    if (!cf)
    {
      long long v221 = 0;
      long long v218 = v256;
      goto LABEL_398;
    }
    goto LABEL_343;
  }
  int v71 = *((unsigned __int8 *)v22 + 76);
  unsigned int v72 = *((unsigned __int16 *)v22 + 39);
  CFAllocatorRef v73 = (const __CFAllocator *)v22[10];
  LOWORD(cf) = *((_WORD *)v22 + 39);
  *(void *)CMTime buf = 0;
  if (!v257)
  {
    if (!v71)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VTU_SplitVideoIntoPackets_cold_1();
        }
      }
      goto LABEL_435;
    }
    int v95 = CFAllocatorAllocate(v73, 2, 0);
    void *v13 = v95;
    if (v95)
    {
      char v96 = 76;
LABEL_156:
      *int v95 = v96;
      if (v70) {
        *int v70 = 1;
      }
      VTU_ReallocPktsInfo(v69, v68, v70, 0, 0, 0);
      if (v69 && *v69) {
        *(_DWORD *)*int v69 = 2;
      }
      BOOL v97 = a1;
      if (v68)
      {
        int v98 = *v68;
        if (*v68)
        {
          LODWORD(v68) = 0;
          *int v98 = 3;
        }
        else
        {
          LODWORD(v68) = 0;
        }
      }
      int v34 = 1;
      goto LABEL_437;
    }
    goto LABEL_223;
  }
  if (v34 <= 0)
  {
    uint64_t v255 = v13;
    uint64_t v266 = v54;
    int v272 = v34;
    LOWORD(cf) = __rev16(v72);
LABEL_211:
    int v118 = 0;
    __srCC_SHA1_CTX c = -21846;
    uint64_t v119 = v255;
    goto LABEL_212;
  }
  int v274 = v71;
  size_t v246 = v70;
  int v249 = v69;
  v243 = v68;
  unint64_t v74 = 0;
  do
  {
    int v75 = *((_DWORD *)v303 + v74);
    if (v75 <= v23) {
      unsigned int v76 = v23;
    }
    else {
      unsigned int v76 = *((_DWORD *)v303 + v74);
    }
    int v77 = AddOneVPList((uint64_t *)buf, v75, v305[v74++], (uint64_t)v54, v257, v76, v73);
    if (v77) {
      BOOL v78 = 1;
    }
    else {
      BOOL v78 = v74 >= v34;
    }
  }
  while (!v78);
  if (v77)
  {
    int v79 = *(void **)buf;
    goto LABEL_434;
  }
  uint64_t v255 = v13;
  uint64_t v266 = v54;
  int v126 = v274;
  int v127 = v34;
  uint64_t v128 = *(unsigned int **)buf;
  LOWORD(cf) = bswap32((unsigned __int16)cf) >> 16;
  size_t v282 = 2 * (v274 != 0);
  int v272 = v127;
  if (v127 >= 2)
  {
    int v129 = v127;
    do
    {
      long long v130 = (unsigned int *)*((void *)v128 + 3);
      if (!v130) {
        goto LABEL_250;
      }
      double v131 = (unsigned __int16 *)*((void *)v130 + 3);
      if (v131)
      {
        int v132 = *v130;
        int v133 = *v128;
        int v134 = v128;
        __int16 v135 = (unsigned __int16 *)*((void *)v128 + 3);
        do
        {
          unsigned int v136 = *v130 + *(_DWORD *)v131;
          unsigned int v137 = v132 + v133;
          if (v136 < v132 + v133) {
            int v132 = *(_DWORD *)v131;
          }
          if (v136 < v137)
          {
            __int16 v135 = v131;
            int v133 = *v130;
            int v134 = v130;
          }
          long long v130 = (unsigned int *)*((void *)v130 + 3);
          double v131 = (unsigned __int16 *)*((void *)v131 + 3);
        }
        while (v131);
        if (!v128)
        {
          uint64_t v138 = 0;
          goto LABEL_239;
        }
      }
      else
      {
        int v134 = v128;
        __int16 v135 = (unsigned __int16 *)*((void *)v128 + 3);
      }
      uint64_t v138 = 0;
      long long v139 = v128;
      do
      {
        v138 += 2 * (*((unsigned char *)v139 + 10) == 1);
        long long v139 = (unsigned int *)*((void *)v139 + 3);
      }
      while (v139);
LABEL_239:
      unint64_t v140 = v278 - v138;
      int v141 = *((unsigned __int8 *)v135 + 10);
      size_t v142 = *v134;
      if ((v282 + 2)
         + 2 * (*((unsigned char *)v134 + 10) != 1)
         + 2 * (v141 != 1)
         + (unint64_t)(v142 + *(_DWORD *)v135) > v140)
        break;
      if (!*((unsigned char *)v134 + 10))
      {
        if (*((void *)v134 + 4) < (unint64_t)(v142 + 2)) {
          goto LABEL_337;
        }
        unsigned int v143 = bswap32(v142) >> 16;
        memmove((char *)v134 + 42, v134 + 10, v142);
        *((_WORD *)v134 + 20) = v143;
        LODWORD(v142) = *v134 + 2;
        *int v134 = v142;
        int v141 = *((unsigned __int8 *)v135 + 10);
      }
      unint64_t v144 = *((void *)v134 + 4);
      if (!v141)
      {
        unint64_t v145 = (v142 + 2);
        if (v144 < v145)
        {
          _VTU_FreeVPList(v128);
          BOOL v97 = a1;
          LODWORD(v68) = -1;
          goto LABEL_414;
        }
        *(_WORD *)((char *)v134 + v142 + 40) = bswap32(*v135) >> 16;
        *int v134 = v145;
        LODWORD(v142) = v142 + 2;
      }
      if (v144 < (*(_DWORD *)v135 + v142))
      {
LABEL_337:
        __int16 v194 = v128;
        goto LABEL_413;
      }
      memcpy((char *)v134 + v142 + 40, v135 + 20, *(unsigned int *)v135);
      *v134 += *(_DWORD *)v135;
      *((unsigned char *)v134 + 10) = 1;
      *((void *)v134 + 3) = *((void *)v135 + 3);
      *((void *)v135 + 3) = 0;
      _VTU_FreeVPList(v135);
      BOOL v17 = v129-- <= 2;
    }
    while (!v17);
  }
  if (!v128) {
    goto LABEL_211;
  }
LABEL_250:
  __int16 v146 = v128;
  double v54 = v266;
  uint64_t v119 = v255;
  int v147 = 2 * (v274 != 0);
  do
  {
    if (*((unsigned char *)v146 + 10) == 1)
    {
      size_t v148 = *v146;
      if (*((void *)v146 + 4) < (unint64_t)(v148 + 2))
      {
        _VTU_FreeVPList(v128);
        LODWORD(v68) = -1;
        BOOL v97 = a1;
LABEL_429:
        int v34 = v272;
        goto LABEL_437;
      }
      memmove((char *)v146 + 42, v146 + 10, v148);
      *((_WORD *)v146 + 20) = 352;
      int v149 = *v146;
      *v146 += 2;
      if (v274 && !VTU_MoveAndInsertData(v146, 2, v149, &cf, 2))
      {
        _VTU_FreeVPList(v128);
        BOOL v97 = a1;
        LODWORD(v68) = -1;
        goto LABEL_429;
      }
    }
    __int16 v146 = (unsigned int *)*((void *)v146 + 3);
  }
  while (v146);
  __srCC_SHA1_CTX c = -21846;
  int v150 = v278 - v282 - 3;
  int v240 = v282 + 2;
  while (1)
  {
    unsigned int v151 = *v128;
    if ((int)(*v128 + v147) <= v278)
    {
      if (v126 && !*((unsigned char *)v128 + 10) && (v151 <= 1 || !VTU_MoveAndInsertData(v128, 2, v151 - 2, &cf, v147)))
      {
LABEL_453:
        _VTU_FreeVPList(*(void **)buf);
        LODWORD(v68) = -1;
        int v34 = v272;
        goto LABEL_436;
      }
      goto LABEL_282;
    }
    if (v150 < 1) {
      goto LABEL_453;
    }
    uint64_t v268 = *((void *)v128 + 3);
    int v152 = (int)(v278 - v282 - 4 + v151) / v150;
    unsigned int v153 = *((unsigned __int8 *)v128 + 40);
    HIBYTE(__src) = *((unsigned char *)v128 + 41);
    unsigned int v262 = v153;
    LOBYTE(__src) = v153 & 0x81 | 0x62;
    uint64_t v154 = (uint64_t)v128;
    int v253 = (int)v151 / v152;
    int v155 = v152 - 1;
    if (v152 > 1) {
      break;
    }
LABEL_278:
    if (*((void *)v128 + 4) < (unint64_t)(v240 + v253))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VTU_SplitVideoIntoPackets_cold_3();
        }
      }
      goto LABEL_460;
    }
    *((_WORD *)v128 + 4) = 1;
    *uint64_t v128 = v240 + v253;
    int v147 = 2 * (v274 != 0);
    memmove((char *)v128 + v282 + 43, (char *)v128 + 42, v253 - 1);
    *((_WORD *)v128 + 20) = __src;
    *((unsigned char *)v128 + 42) = (v262 >> 1) & 0x3F | 0x80;
    uint64_t v119 = v255;
    int v126 = v274;
    if (v274) {
      memmove((char *)v128 + 43, &cf, v282);
    }
    uint64_t v128 = (unsigned int *)v154;
    double v54 = v266;
    int v150 = v278 - v282 - 3;
LABEL_282:
    uint64_t v128 = (unsigned int *)*((void *)v128 + 3);
    if (!v128)
    {
      int v118 = *(unsigned int **)buf;
      if (*(void *)buf)
      {
        int v161 = 0;
        uint64_t v162 = *(void *)buf;
        do
        {
          v161 += *(_DWORD *)v162;
          uint64_t v162 = *(void *)(v162 + 24);
        }
        while (v162);
        if (v161)
        {
          char v163 = CFAllocatorAllocate(v73, v161, 0);
          *uint64_t v119 = v163;
          if (v163)
          {
            uint64_t v164 = 0;
            int v165 = 0;
            uint64_t v166 = v118;
            while (1)
            {
              memcpy((char *)*v119 + v165, v166 + 10, *v166);
              int v167 = *v166;
              int v168 = *v166;
              if (v164 >= (int)*v246)
              {
                if (!VTU_ReallocPktsInfo(v249, v243, v246, 0, 0, 0))
                {
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VTU_SplitVideoIntoPackets_cold_5();
                    }
                  }
                  _VTU_FreeVPList(v118);
                  CFAllocatorDeallocate(v73, *v255);
                  *uint64_t v255 = 0;
                  goto LABEL_461;
                }
                int v168 = *v166;
              }
              v165 += v167;
              *((_DWORD *)*v249 + v164) = v168;
              *((_DWORD *)*v243 + v164++) = *((unsigned __int8 *)v166 + 9) | (2 * *((unsigned __int8 *)v166 + 8));
              uint64_t v166 = (unsigned int *)*((void *)v166 + 3);
              if (!v166)
              {
                _VTU_FreeVPList(v118);
                LODWORD(v68) = 0;
                int v34 = v164;
                goto LABEL_462;
              }
            }
          }
          goto LABEL_213;
        }
      }
LABEL_212:
      *uint64_t v119 = 0;
LABEL_213:
      int v34 = v272;
      double v54 = v266;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VTU_SplitVideoIntoPackets_cold_4();
        }
      }
      int v79 = v118;
      goto LABEL_434;
    }
  }
  size_t v156 = v253 + 1;
  int v157 = v151 - (v253 + 1);
  unsigned __int8 v158 = (char *)v128 + v156 + 40;
  unint64_t v159 = v253 + (v282 | 4);
  int v259 = (v153 >> 1) & 0x3F;
  uint64_t v154 = (uint64_t)v128;
  while (1)
  {
    int v160 = (uint64_t *)(v154 + 24);
    if (!_VTU_AllocateVPList(v73, (int)v159, (void *)(v154 + 24)))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VTU_SplitVideoIntoPackets_cold_8();
        }
      }
      goto LABEL_460;
    }
    uint64_t v154 = *v160;
    *(void *)(*v160 + 24) = v268;
    if (v155 == 1)
    {
      if ((PrepareLastHEVCFragment(v154, &__src, v262, v158, v157, (__int16)cf, v282) & 0x80000000) != 0)
      {
        int v232 = VRTraceGetErrorLogLevelForModule();
        if (v232 >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VTU_SplitVideoIntoPackets_cold_2();
          }
        }
        goto LABEL_460;
      }
      goto LABEL_270;
    }
    if (v157 <= (int)v156) {
      break;
    }
    *(_DWORD *)uint64_t v154 = v159;
    *(_WORD *)(v154 + 8) = 0;
    if (*((void *)v128 + 4) < v159)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VTU_SplitVideoIntoPackets_cold_6();
        }
      }
      goto LABEL_460;
    }
    *(_WORD *)(v154 + 40) = __src;
    *(unsigned char *)(v154 + 42) = v259;
    if (v274) {
      *(_WORD *)(v154 + 43) = (_WORD)cf;
    }
    v157 -= v156;
    memcpy((void *)(v154 + v282 + 43), v158, v156);
    v158 += v156;
LABEL_270:
    if (!--v155) {
      goto LABEL_278;
    }
  }
  if ((PrepareLastHEVCFragment(v154, &__src, v262, v158, v157, (__int16)cf, v282) & 0x80000000) == 0) {
    goto LABEL_278;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VTU_SplitVideoIntoPackets_cold_7();
    }
  }
LABEL_460:
  _VTU_FreeVPList(*(void **)buf);
LABEL_461:
  LODWORD(v68) = -1;
  int v34 = v272;
LABEL_462:
  double v54 = v266;
LABEL_436:
  BOOL v97 = a1;
LABEL_437:
  if (v54 != a3) {
    CFAllocatorDeallocate((CFAllocatorRef)v97[10], v54);
  }
  if (v68) {
    return 0;
  }
  else {
    return v34;
  }
}

uint64_t VTU_SplitGenericDataIntoPackets(uint64_t a1, int a2, uint64_t a3, int a4, void *a5, unsigned int a6)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v7 = 0;
  if ((a2 - 110) <= 0xF && ((1 << (a2 - 110)) & 0xC001) != 0)
  {
    if (a4 >= 1)
    {
      int v11 = VTU_HandleMTUOverride(a1, a6, *(unsigned __int16 *)(a1 + 72));
      signed int v12 = vcvtps_s32_f32((float)a4 / (float)(v11 - 20));
      if (v12 <= 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return 0;
        }
        uint64_t v49 = VRTraceErrorLogLevelToCSTR();
        __int16 v50 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        int v51 = **(_DWORD **)(a1 + 48);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v65 = v49;
        __int16 v66 = 2080;
        int v67 = "VTU_SplitGenericDataIntoPackets";
        __int16 v68 = 1024;
        int v69 = 1806;
        __int16 v70 = 1024;
        int v71 = a4;
        __int16 v72 = 1024;
        int v73 = v12;
        __int16 v74 = 1024;
        int v75 = v51;
        int v52 = " [%s] %s:%d Invalid packet count: Length:%d, packets:%d, maxPacketCount:%d";
        goto LABEL_88;
      }
      int v13 = v11;
      if (**(_DWORD **)(a1 + 48) >= v12) {
        goto LABEL_10;
      }
      **(void **)(a1 + 88) = malloc_type_realloc(**(void ***)(a1 + 88), 4 * v12, 0x100004052888210uLL);
      if (!**(void **)(a1 + 88))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return 0;
        }
        uint64_t v53 = VRTraceErrorLogLevelToCSTR();
        __int16 v50 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        int v54 = **(_DWORD **)(a1 + 48);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v65 = v53;
        __int16 v66 = 2080;
        int v67 = "VTU_SplitGenericDataIntoPackets";
        __int16 v68 = 1024;
        int v69 = 1810;
        __int16 v70 = 1024;
        int v71 = a4;
        __int16 v72 = 1024;
        int v73 = v12;
        __int16 v74 = 1024;
        int v75 = v54;
        int v52 = " [%s] %s:%d Failed to realloc heads: Length:%d, packets:%d, maxPacketCount:%d";
        goto LABEL_88;
      }
      **(void **)(a1 + 96) = malloc_type_realloc(**(void ***)(a1 + 96), 4 * v12, 0x100004052888210uLL);
      int v14 = *(void ***)(a1 + 96);
      if (!*v14)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return 0;
        }
        uint64_t v55 = VRTraceErrorLogLevelToCSTR();
        __int16 v50 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        int v56 = **(_DWORD **)(a1 + 48);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v65 = v55;
        __int16 v66 = 2080;
        int v67 = "VTU_SplitGenericDataIntoPackets";
        __int16 v68 = 1024;
        int v69 = 1813;
        __int16 v70 = 1024;
        int v71 = a4;
        __int16 v72 = 1024;
        int v73 = v12;
        __int16 v74 = 1024;
        int v75 = v56;
        int v52 = " [%s] %s:%d Failed to realloc lineSizes: Length:%d, packets:%d, maxPacketCount:%d";
        goto LABEL_88;
      }
      if (VTU_ReallocPktsInfo(*(void ***)(a1 + 32), *(void ***)(a1 + 40), *(unsigned int **)(a1 + 48), *(void ***)(a1 + 88), v14, v12))
      {
LABEL_10:
        int v15 = 0;
        unsigned int v16 = 0;
        unint64_t v17 = 0;
        uint64_t v18 = v13 - 20;
        uint64_t v19 = **(void **)(a1 + 96);
        uint64_t v20 = **(void **)(a1 + 88);
        unint64_t v21 = v18;
        do
        {
          unsigned int v22 = v16;
          if (v21 >= a4) {
            int v23 = a4;
          }
          else {
            int v23 = v21;
          }
          *(_DWORD *)(v19 + 4 * v22) = v15 + v23;
          *(_DWORD *)(v20 + 4 * v22) = v17;
          unsigned int v16 = v22 + 1;
          v15 += 20 - v13;
          v21 += v18;
          v17 += v18;
        }
        while (v17 < a4);
        CFAllocatorRef allocator = *(const __CFAllocator **)(a1 + 80);
        *a5 = 0;
        if (v22 != -1)
        {
          int v60 = a2;
          int v59 = a5;
          int v24 = a4;
          uint64_t v25 = 0;
          double v26 = 0;
          uint64_t v27 = v22;
          while (1)
          {
            size_t v28 = *(unsigned int *)(**(void **)(a1 + 96) + 4 * v25);
            uint64_t v29 = *(unsigned int *)(**(void **)(a1 + 88) + 4 * v25);
            uint64_t v30 = (int)v28 <= v13 ? v13 : v28;
            if ((v28 & 0x80000000) != 0 || (v29 & 0x80000000) != 0 || (int)v29 + (int)v28 > v24) {
              break;
            }
            int v63 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
            if (!_VTU_AllocateVPList(allocator, v30, &v63))
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VTU_SplitGenericDataIntoPackets_cold_9();
                }
              }
LABEL_55:
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VTU_SplitGenericDataIntoPackets_cold_3();
                }
              }
              goto LABEL_58;
            }
            int v31 = v63;
            *int v63 = v28;
            v31[1] = v29;
            *((_WORD *)v31 + 4) = 257;
            *((unsigned char *)v31 + 10) = 0;
            memcpy(v31 + 10, (const void *)(a3 + v29), v28);
            if (v26)
            {
              int32_t v32 = v26;
              do
              {
                int v33 = v32;
                int32_t v32 = (void *)v32[3];
              }
              while (v32);
              v33[3] = v31;
            }
            else
            {
              double v26 = v31;
            }
            if (v25++ == v27)
            {
              if ((v60 & 0xFFFFFFFE) == 0x7C)
              {
LABEL_35:
                LODWORD(v37) = 0;
                int v38 = v26;
                do
                {
                  CFIndex v37 = (*(_DWORD *)v38 + v37);
                  int v38 = (void *)v38[3];
                }
                while (v38);
                if ((int)v37 < 1) {
                  goto LABEL_46;
                }
                char v39 = (char *)CFAllocatorAllocate(allocator, v37, 0);
                if (v39)
                {
                  uint64_t v40 = v39;
                  LODWORD(v7) = 0;
                  int v41 = 0;
                  unsigned int v42 = (unsigned int *)v26;
                  while (1)
                  {
                    memcpy(&v40[v41], v42 + 10, *v42);
                    int v43 = *v42;
                    uint64_t v44 = *(unsigned int **)(a1 + 48);
                    int v45 = *v42;
                    if (v7 >= *v44)
                    {
                      if (!VTU_ReallocPktsInfo(*(void ***)(a1 + 32), *(void ***)(a1 + 40), v44, *(void ***)(a1 + 88), *(void ***)(a1 + 96), 0))
                      {
                        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                        {
                          VRTraceErrorLogLevelToCSTR();
                          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                            VTU_SplitGenericDataIntoPackets_cold_6();
                          }
                        }
                        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                        {
                          VRTraceErrorLogLevelToCSTR();
                          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                            VTU_SplitGenericDataIntoPackets_cold_5();
                          }
                        }
                        CFAllocatorDeallocate(allocator, v40);
                        goto LABEL_58;
                      }
                      int v45 = *v42;
                    }
                    v41 += v43;
                    *(_DWORD *)(**(void **)(a1 + 32) + 4 * v7) = v45;
                    *(_DWORD *)(**(void **)(a1 + 40) + 4 * v7) = *((unsigned __int8 *)v42 + 9) | (2 * *((unsigned __int8 *)v42 + 8));
                    unsigned int v42 = (unsigned int *)*((void *)v42 + 3);
                    uint64_t v7 = (v7 + 1);
                    if (!v42)
                    {
                      *int v59 = v40;
                      _VTU_FreeVPList(v26);
                      return v7;
                    }
                  }
                }
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VTU_SplitGenericDataIntoPackets_cold_4();
                  }
                }
              }
              else
              {
                __int16 v35 = 0;
                uint64_t v36 = v26;
                while ((RTPPackGenericDataPacket((char *)v36 + 40, v36, *((_DWORD *)v36 + 8), v35) & 0x80000000) == 0)
                {
                  ++v35;
                  uint64_t v36 = (void *)v36[3];
                  if (!v36) {
                    goto LABEL_35;
                  }
                }
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VTU_SplitGenericDataIntoPackets_cold_8();
                  }
                }
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VTU_SplitGenericDataIntoPackets_cold_7();
                  }
                }
              }
              goto LABEL_58;
            }
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v46 = VRTraceErrorLogLevelToCSTR();
            uint64_t v47 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136316930;
              uint64_t v65 = v46;
              __int16 v66 = 2080;
              int v67 = "_VTU_AddOneVPListGeneric";
              __int16 v68 = 1024;
              int v69 = 169;
              __int16 v70 = 1024;
              int v71 = 169;
              __int16 v72 = 1024;
              int v73 = v28;
              __int16 v74 = 1024;
              int v75 = v29;
              __int16 v76 = 1024;
              int v77 = v30;
              __int16 v78 = 1024;
              int v79 = v24;
              _os_log_error_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Invalid size lineLen = %d, head = %d, buffer size = %d, dataLen = %d", buf, 0x3Au);
            }
          }
          goto LABEL_55;
        }
        double v26 = 0;
LABEL_46:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VTU_SplitGenericDataIntoPackets_cold_2();
          }
        }
LABEL_58:
        _VTU_FreeVPList(v26);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VTU_SplitGenericDataIntoPackets_cold_1();
          }
        }
        return 0;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v57 = VRTraceErrorLogLevelToCSTR();
        __int16 v50 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v58 = **(_DWORD **)(a1 + 48);
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v65 = v57;
          __int16 v66 = 2080;
          int v67 = "VTU_SplitGenericDataIntoPackets";
          __int16 v68 = 1024;
          int v69 = 1816;
          __int16 v70 = 1024;
          int v71 = a4;
          __int16 v72 = 1024;
          int v73 = v12;
          __int16 v74 = 1024;
          int v75 = v58;
          int v52 = " [%s] %s:%d Failed to realloc packets: Length:%d, packets:%d, maxPacketCount:%d";
LABEL_88:
          _os_log_error_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_ERROR, v52, buf, 0x2Eu);
        }
      }
    }
    return 0;
  }
  return v7;
}

uint64_t VTU_ComputeTotalNumberOfGroupsPerFrame(int a1)
{
  int v1 = a1 - 1;
  if (a1 < 1) {
    int v1 = a1 + 6;
  }
  return ((v1 >> 3) + 1);
}

uint64_t AddOneVPList(uint64_t *a1, int a2, int a3, uint64_t a4, int a5, unsigned int a6, const __CFAllocator *a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a2 <= 3 || a3 < 0 || a2 > a6 || a3 + a2 > a5)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v19 = VRTraceErrorLogLevelToCSTR();
      uint64_t v20 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int v22 = 136316930;
        *(void *)&v22[4] = v19;
        __int16 v23 = 2080;
        int v24 = "AddOneVPList";
        __int16 v25 = 1024;
        int v26 = 132;
        __int16 v27 = 1024;
        int v28 = 132;
        __int16 v29 = 1024;
        int v30 = a2;
        __int16 v31 = 1024;
        int v32 = a3;
        __int16 v33 = 1024;
        unsigned int v34 = a6;
        __int16 v35 = 1024;
        int v36 = a5;
        _os_log_error_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Invalid size iGobs = %d, iHeads = %d, buffer size = %u, dataLen = %d", v22, 0x3Au);
      }
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = *a1;
  *(void *)unsigned int v22 = 0xAAAAAAAAAAAAAAAALL;
  if (!_VTU_AllocateVPList(a7, (int)a6, v22))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        AddOneVPList_cold_1();
      }
    }
    return 0xFFFFFFFFLL;
  }
  size_t v14 = (a2 - 4);
  uint64_t v15 = *(void *)v22;
  uint64_t v16 = (a3 + 4);
  **(_DWORD **)unsigned int v22 = v14;
  *(_DWORD *)(v15 + 4) = v16;
  *(_WORD *)(v15 + 8) = 257;
  *(unsigned char *)(v15 + 10) = 0;
  memcpy((void *)(v15 + 40), (const void *)(a4 + v16), v14);
  if (v13)
  {
    uint64_t v17 = v13;
    do
    {
      uint64_t v18 = v17;
      uint64_t v17 = *(void *)(v17 + 24);
    }
    while (v17);
    *(void *)(v18 + 24) = v15;
  }
  else
  {
    uint64_t v13 = v15;
  }
  uint64_t result = 0;
  *a1 = v13;
  return result;
}

uint64_t PrepareLastHEVCFragment(uint64_t a1, _WORD *a2, unsigned int a3, const void *a4, int a5, __int16 a6, size_t __n)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  __srCC_SHA1_CTX c = a6;
  if (a5 >= 1 && *(_DWORD *)(a1 + 32) - (int)__n - 3 >= a5)
  {
    *(_DWORD *)a1 = a5 + __n + 3;
    *(_WORD *)(a1 + 8) = 256;
    *(_WORD *)(a1 + 40) = *a2;
    *(unsigned char *)(a1 + 42) = (a3 >> 1) | 0x40;
    if (__n)
    {
      uint64_t v11 = __n;
      memcpy((void *)(a1 + 43), &__src, __n);
    }
    else
    {
      uint64_t v11 = 0;
    }
    memcpy((void *)(a1 + v11 + 43), a4, a5);
    return 0;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        PrepareLastHEVCFragment_cold_1();
      }
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t PrepareLastH264Fragment(uint64_t a1, char a2, char a3, const void *a4, int a5, __int16 a6, size_t __n)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  __srCC_SHA1_CTX c = a6;
  if (a5 >= 1 && *(_DWORD *)(a1 + 32) - (int)__n - 2 >= a5)
  {
    *(_DWORD *)a1 = a5 + __n + 2;
    *(_WORD *)(a1 + 8) = 256;
    *(unsigned char *)(a1 + 40) = a2;
    *(unsigned char *)(a1 + 41) = a3 & 0x1F | 0x40;
    if (__n)
    {
      uint64_t v11 = __n;
      memcpy((void *)(a1 + 42), &__src, __n);
    }
    else
    {
      uint64_t v11 = 0;
    }
    memcpy((void *)(a1 + v11 + 42), a4, a5);
    return 0;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        PrepareLastH264Fragment_cold_1();
      }
    }
    return 0xFFFFFFFFLL;
  }
}

void OUTLINED_FUNCTION_12_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x28u);
}

uint64_t compareByPref(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v6, 170, sizeof(v6));
  unint64_t v7 = 0xAAAAAAAAFFFFFFFFLL;
  memset(v4, 170, sizeof(v4));
  unint64_t v5 = 0xAAAAAAAAFFFFFFFFLL;
  +[SDPMediaLine fillImageStruct:a1 imageStruct:v6];
  +[SDPMediaLine fillImageStruct:a2 imageStruct:v4];
  if (*(float *)&v7 < *(float *)&v5) {
    return -1;
  }
  else {
    return *(float *)&v7 > *(float *)&v5;
  }
}

_OWORD *VCAudioLimiter_Allocate(long long *a1)
{
  size_t v2 = malloc_type_calloc(1uLL, 0xA0uLL, 0x1020040D488A4C3uLL);
  CFAllocatorRef v3 = v2;
  if (v2)
  {
    long long v4 = *a1;
    long long v5 = a1[2];
    v2[1] = a1[1];
    v2[2] = v5;
    *size_t v2 = v4;
    *((_DWORD *)v2 + 32) = 2;
    *(_OWORD *)((char *)v2 + 136) = xmmword_1E259ED10;
    *((_DWORD *)v2 + 38) = 1056964608;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioLimiter_Allocate_cold_1(v6);
    }
  }
  return v3;
}

uint64_t VCAudioLimiter_Start(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    CFAllocatorRef v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v60 = 136315650;
      uint64_t v61 = v2;
      __int16 v62 = 2080;
      int v63 = "VCAudioLimiter_Start";
      __int16 v64 = 1024;
      int v65 = 94;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ", (uint8_t *)&v60, 0x1Cu);
    }
  }
  if (a1)
  {
    long long v4 = (AudioUnit *)(a1 + 64);
    BOOL v5 = VCAudioUnit_NewInstance((AudioComponentInstance *)(a1 + 64), 0x6366726Bu);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v5)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        uint64_t v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          AudioUnit v9 = *v4;
          int v60 = 136315906;
          uint64_t v61 = v7;
          __int16 v62 = 2080;
          int v63 = "VCAudioLimiter_Start";
          __int16 v64 = 1024;
          int v65 = 104;
          __int16 v66 = 2048;
          AudioUnit v67 = v9;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p VCAudioUnit_NewInstance kAudioUnitSubType_ControlFreak", (uint8_t *)&v60, 0x26u);
        }
      }
      OSStatus v10 = AudioUnitSetProperty(*(AudioUnit *)(a1 + 64), 0xEu, 0, 0, (const void *)(a1 + 40), 4u);
      int v11 = VRTraceGetErrorLogLevelForModule();
      if (v10)
      {
        if (v11 >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCAudioLimiter_Start_cold_9();
          }
        }
      }
      else
      {
        if (v11 >= 7)
        {
          uint64_t v12 = VRTraceErrorLogLevelToCSTR();
          uint64_t v13 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            AudioUnit v14 = *v4;
            int v60 = 136315906;
            uint64_t v61 = v12;
            __int16 v62 = 2080;
            int v63 = "VCAudioLimiter_Start";
            __int16 v64 = 1024;
            int v65 = 109;
            __int16 v66 = 2048;
            AudioUnit v67 = v14;
            _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p kAudioUnitProperty_MaximumFramesPerSlice kAudioUnitScope_Global", (uint8_t *)&v60, 0x26u);
          }
        }
        OSStatus v15 = AudioUnitSetProperty(*(AudioUnit *)(a1 + 64), 8u, 1u, 0, (const void *)a1, 0x28u);
        int v16 = VRTraceGetErrorLogLevelForModule();
        if (v15)
        {
          if (v16 >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCAudioLimiter_Start_cold_8();
            }
          }
        }
        else
        {
          if (v16 >= 7)
          {
            uint64_t v17 = VRTraceErrorLogLevelToCSTR();
            uint64_t v18 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              AudioUnit v19 = *v4;
              int v60 = 136315906;
              uint64_t v61 = v17;
              __int16 v62 = 2080;
              int v63 = "VCAudioLimiter_Start";
              __int16 v64 = 1024;
              int v65 = 113;
              __int16 v66 = 2048;
              AudioUnit v67 = v19;
              _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p kAudioUnitProperty_StreamFormat kAudioUnitScope_Input", (uint8_t *)&v60, 0x26u);
            }
          }
          OSStatus v20 = AudioUnitSetProperty(*(AudioUnit *)(a1 + 64), 8u, 2u, 0, (const void *)a1, 0x28u);
          int v21 = VRTraceGetErrorLogLevelForModule();
          if (v20)
          {
            if (v21 >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCAudioLimiter_Start_cold_7();
              }
            }
          }
          else
          {
            if (v21 >= 7)
            {
              uint64_t v22 = VRTraceErrorLogLevelToCSTR();
              __int16 v23 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                AudioUnit v24 = *v4;
                int v60 = 136315906;
                uint64_t v61 = v22;
                __int16 v62 = 2080;
                int v63 = "VCAudioLimiter_Start";
                __int16 v64 = 1024;
                int v65 = 117;
                __int16 v66 = 2048;
                AudioUnit v67 = v24;
                _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p kAudioUnitProperty_StreamFormat kAudioUnitScope_Output", (uint8_t *)&v60, 0x26u);
              }
            }
            OSStatus v25 = AudioUnitSetParameter(*(AudioUnit *)(a1 + 64), 3u, 0, 0, *(AudioUnitParameterValue *)(a1 + 140), 0);
            int v26 = VRTraceGetErrorLogLevelForModule();
            if (v25)
            {
              if (v26 >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VCAudioLimiter_Start_cold_6();
                }
              }
            }
            else
            {
              if (v26 >= 7)
              {
                uint64_t v27 = VRTraceErrorLogLevelToCSTR();
                int v28 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  AudioUnit v29 = *v4;
                  int v60 = 136315906;
                  uint64_t v61 = v27;
                  __int16 v62 = 2080;
                  int v63 = "VCAudioLimiter_Start";
                  __int16 v64 = 1024;
                  int v65 = 121;
                  __int16 v66 = 2048;
                  AudioUnit v67 = v29;
                  _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p kVCAudioLimiterParameterInputThresholddB kAudioUnitScope_Global", (uint8_t *)&v60, 0x26u);
                }
              }
              OSStatus v30 = AudioUnitSetParameter(*(AudioUnit *)(a1 + 64), 4u, 0, 0, *(AudioUnitParameterValue *)(a1 + 144), 0);
              int v31 = VRTraceGetErrorLogLevelForModule();
              if (v30)
              {
                if (v31 >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VCAudioLimiter_Start_cold_5();
                  }
                }
              }
              else
              {
                if (v31 >= 7)
                {
                  uint64_t v32 = VRTraceErrorLogLevelToCSTR();
                  __int16 v33 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    AudioUnit v34 = *v4;
                    int v60 = 136315906;
                    uint64_t v61 = v32;
                    __int16 v62 = 2080;
                    int v63 = "VCAudioLimiter_Start";
                    __int16 v64 = 1024;
                    int v65 = 125;
                    __int16 v66 = 2048;
                    AudioUnit v67 = v34;
                    _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p kVCAudioLimiterParameterMinFastGain kAudioUnitScope_Global", (uint8_t *)&v60, 0x26u);
                  }
                }
                OSStatus v35 = AudioUnitSetParameter(*(AudioUnit *)(a1 + 64), 5u, 0, 0, *(AudioUnitParameterValue *)(a1 + 148), 0);
                int v36 = VRTraceGetErrorLogLevelForModule();
                if (v35)
                {
                  if (v36 >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      VCAudioLimiter_Start_cold_4();
                    }
                  }
                }
                else
                {
                  if (v36 >= 7)
                  {
                    uint64_t v37 = VRTraceErrorLogLevelToCSTR();
                    int v38 = *MEMORY[0x1E4F47A50];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                    {
                      AudioUnit v39 = *v4;
                      int v60 = 136315906;
                      uint64_t v61 = v37;
                      __int16 v62 = 2080;
                      int v63 = "VCAudioLimiter_Start";
                      __int16 v64 = 1024;
                      int v65 = 129;
                      __int16 v66 = 2048;
                      AudioUnit v67 = v39;
                      _os_log_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p kVCAudioLimiterParameterFastGainReleaseTime kAudioUnitScope_Global", (uint8_t *)&v60, 0x26u);
                    }
                  }
                  OSStatus v40 = AudioUnitSetParameter(*(AudioUnit *)(a1 + 64), 7u, 0, 0, *(AudioUnitParameterValue *)(a1 + 152), 0);
                  int v41 = VRTraceGetErrorLogLevelForModule();
                  if (v40)
                  {
                    if (v41 >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        VCAudioLimiter_Start_cold_3();
                      }
                    }
                  }
                  else
                  {
                    if (v41 >= 7)
                    {
                      uint64_t v42 = VRTraceErrorLogLevelToCSTR();
                      int v43 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                      {
                        AudioUnit v44 = *v4;
                        int v60 = 136315906;
                        uint64_t v61 = v42;
                        __int16 v62 = 2080;
                        int v63 = "VCAudioLimiter_Start";
                        __int16 v64 = 1024;
                        int v65 = 133;
                        __int16 v66 = 2048;
                        AudioUnit v67 = v44;
                        _os_log_impl(&dword_1E1EA4000, v43, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p kVCAudioLimiterParameterLookahead kAudioUnitScope_Global", (uint8_t *)&v60, 0x26u);
                      }
                    }
                    OSStatus v45 = AudioUnitSetParameter(*(AudioUnit *)(a1 + 64), 2u, 0, 0, *(AudioUnitParameterValue *)(a1 + 136), 0);
                    int v46 = VRTraceGetErrorLogLevelForModule();
                    if (v45)
                    {
                      if (v46 >= 3)
                      {
                        VRTraceErrorLogLevelToCSTR();
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                          VCAudioLimiter_Start_cold_2();
                        }
                      }
                    }
                    else
                    {
                      if (v46 >= 7)
                      {
                        uint64_t v47 = VRTraceErrorLogLevelToCSTR();
                        int v48 = *MEMORY[0x1E4F47A50];
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                        {
                          AudioUnit v49 = *v4;
                          int v60 = 136315906;
                          uint64_t v61 = v47;
                          __int16 v62 = 2080;
                          int v63 = "VCAudioLimiter_Start";
                          __int16 v64 = 1024;
                          int v65 = 137;
                          __int16 v66 = 2048;
                          AudioUnit v67 = v49;
                          _os_log_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p kVCAudioLimiterParameterInputGain kAudioUnitScope_Global", (uint8_t *)&v60, 0x26u);
                        }
                      }
                      OSStatus v50 = AudioUnitInitialize(*v4);
                      int v51 = VRTraceGetErrorLogLevelForModule();
                      if (!v50)
                      {
                        if (v51 >= 7)
                        {
                          uint64_t v52 = VRTraceErrorLogLevelToCSTR();
                          uint64_t v53 = *MEMORY[0x1E4F47A50];
                          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                          {
                            AudioUnit v54 = *v4;
                            int v60 = 136315906;
                            uint64_t v61 = v52;
                            __int16 v62 = 2080;
                            int v63 = "VCAudioLimiter_Start";
                            __int16 v64 = 1024;
                            int v65 = 141;
                            __int16 v66 = 2048;
                            AudioUnit v67 = v54;
                            _os_log_impl(&dword_1E1EA4000, v53, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p AudioUnitInitialize", (uint8_t *)&v60, 0x26u);
                          }
                        }
                        a1 = 1;
                        goto LABEL_46;
                      }
                      if (v51 >= 3)
                      {
                        VRTraceErrorLogLevelToCSTR();
                        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                          VCAudioLimiter_Start_cold_1();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (*v4)
      {
        AudioComponentInstanceDispose(*v4);
        a1 = 0;
        *long long v4 = 0;
      }
      else
      {
        a1 = 0;
      }
LABEL_46:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v55 = VRTraceErrorLogLevelToCSTR();
        int v56 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          AudioUnit v57 = *v4;
          int v60 = 136316162;
          uint64_t v61 = v55;
          __int16 v62 = 2080;
          int v63 = "VCAudioLimiter_Start";
          __int16 v64 = 1024;
          int v65 = 151;
          __int16 v66 = 2048;
          AudioUnit v67 = v57;
          __int16 v68 = 1024;
          int v69 = a1;
          _os_log_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d voiceLimiterUnit=%p status=%{BOOL}d", (uint8_t *)&v60, 0x2Cu);
        }
      }
      return a1;
    }
    if (ErrorLogLevelForModule >= 3)
    {
      uint64_t v58 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioLimiter_Start_cold_10(v58);
      }
    }
    return 0;
  }
  return a1;
}

void VCAudioLimiter_Stop(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    CFAllocatorRef v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315906;
      uint64_t v8 = v2;
      __int16 v9 = 2080;
      OSStatus v10 = "VCAudioLimiter_Stop";
      __int16 v11 = 1024;
      int v12 = 156;
      __int16 v13 = 2048;
      uint64_t v14 = a1;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Stopping audioLimiter=%p", (uint8_t *)&v7, 0x26u);
    }
  }
  if (a1)
  {
    long long v4 = *(OpaqueAudioComponentInstance **)(a1 + 64);
    if (v4)
    {
      AudioComponentInstanceDispose(v4);
      *(void *)(a1 + 64) = 0;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        uint64_t v8 = v5;
        __int16 v9 = 2080;
        OSStatus v10 = "VCAudioLimiter_Stop";
        __int16 v11 = 1024;
        int v12 = 164;
        __int16 v13 = 2048;
        uint64_t v14 = a1;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Stopped audioLimiter=%p", (uint8_t *)&v7, 0x26u);
      }
    }
  }
}

uint64_t VCAudioLimiter_Process(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    AudioUnitRenderActionFlags ioActionFlags = 512;
    Sampleint32_t Count = VCAudioBufferList_GetSampleCount(a2);
    v9.mSampleTime = NAN;
    v9.mdouble HostTime = 0xAAAAAAAAAAAAAAAALL;
    v9.mRateScalar = NAN;
    *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v9.mWordClockTime = v5;
    *(_OWORD *)&v9.mSMPTETime.mType = v5;
    *(void *)&v9.mFlags = 0xAAAAAAAAAAAAAAAALL;
    VCAudioBufferList_GetAudioTimestamp(a2, (uint64_t)&v9);
    AudioBufferList = (AudioBufferList *)VCAudioBufferList_GetAudioBufferList(a2);
    OSStatus v7 = AudioUnitProcess(*(AudioUnit *)(v2 + 64), &ioActionFlags, &v9, SampleCount, AudioBufferList);
    uint64_t v2 = v7 == 0;
    if (v7)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioLimiter_Process_cold_1();
        }
      }
    }
  }
  return v2;
}

long double CalcDecayConstant(double a1, double a2)
{
  double v2 = a1 * a2;
  if (v2 >= 0.00001) {
    return exp(-6.90775528 / v2);
  }
  else {
    return 0.0;
  }
}

void VCRateControlMediaController_EnableBWELogDump(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    *(void *)(a1 + 296) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_EnableBWELogDump_cold_1();
    }
  }
}

BOOL VCRateControlMediaController_IsAudioOnly(uint64_t a1)
{
  if (a1) {
    return *(unsigned char *)(a1 + 59) != 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCRateControlMediaController_IsAudioOnly_cold_1();
  }
  return 0;
}

void VCRateControlMediaController_SetAudioOnly(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 59) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetAudioOnly_cold_1();
    }
  }
}

void VCRateControlMediaController_SetSenderProbingEnabled(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 146) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetSenderProbingEnabled_cold_1();
    }
  }
}

void VCRateControlMediaController_SetAllowVideoStop(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 63) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetAllowVideoStop_cold_1();
    }
  }
}

BOOL VCRateControlMediaController_IsVideoStopped(unsigned char *a1)
{
  if (a1)
  {
    return a1[56] || a1[57] || a1[58] != 0;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCRateControlMediaController_IsVideoStopped_cold_1();
    }
    return 0;
  }
}

BOOL VCRateControlMediaController_IsVideoStoppedByVCRateControl(uint64_t a1)
{
  if (a1) {
    return *(unsigned char *)(a1 + 56) != 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_IsVideoStoppedByVCRateControl_cold_1();
    }
  }
  return 1;
}

uint64_t VCRateControlMediaController_BasebandFlushCount(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 168);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCRateControlMediaController_BasebandFlushCount_cold_1();
  }
  return 0;
}

void VCRateControlMediaController_SetBasebandFlushCount(uint64_t a1, int a2)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 168) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetBasebandFlushCount_cold_1();
    }
  }
}

double VCRateControlMediaController_LastBasebandFlushCountChangeTime(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 184);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_LastBasebandFlushCountChangeTime_cold_1();
    }
  }
  return NAN;
}

void VCRateControlMediaController_SetLastBasebandFlushCountChangeTime(uint64_t a1, double a2)
{
  if (a1)
  {
    *(double *)(a1 + 184) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetLastBasebandFlushCountChangeTime_cold_1();
    }
  }
}

double VCRateControlMediaController_LastVideoKeyFrameTime(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 112);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_LastVideoKeyFrameTime_cold_1();
    }
  }
  return NAN;
}

uint64_t VCRateControlMediaController_TrafficMetricsFromMediaQueueTxHistory(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    return VCMediaQueue_TrafficMetricFromMediaQueueTxHistory(v2, a2);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCRateControlMediaController_TrafficMetricsFromMediaQueueTxHistory_cold_1();
      }
    }
    return 0;
  }
}

void VCRateControlMediaController_MediaQueueSettings(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6 == 0xFFFFFFFFLL && !*(void *)(a1 + 32)) {
      return;
    }
    if (a4)
    {
      if (a5)
      {
        if (a2)
        {
          if (a3)
          {
            unsigned int v7 = *(_DWORD *)(a1 + 40);
            if (v7)
            {
              *a5 = 20000.0;
              *a4 = 20000.0;
              *a3 = (double)v7;
              *a2 = (double)v7;
            }
            else
            {
              uint64_t v8 = *(void *)(a1 + 32);
              if (v8)
              {
                VCMediaQueue_RetrieveAudioVideoRates(v8, a4, a2, a5, a3);
              }
              else
              {
                MediaQueue_RetrieveAudioVideoRates(v6, a4, a2, a5, a3);
              }
            }
            return;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
            return;
          }
          uint64_t v14 = VRTraceErrorLogLevelToCSTR();
          OSStatus v10 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          int v15 = 136315650;
          uint64_t v16 = v14;
          __int16 v17 = 2080;
          uint64_t v18 = "VCRateControlMediaController_MediaQueueSettings";
          __int16 v19 = 1024;
          int v20 = 412;
          uint64_t v11 = "VCRC [%s] %s:%d outVideoBitrate is nil";
        }
        else
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
            return;
          }
          uint64_t v13 = VRTraceErrorLogLevelToCSTR();
          OSStatus v10 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          int v15 = 136315650;
          uint64_t v16 = v13;
          __int16 v17 = 2080;
          uint64_t v18 = "VCRateControlMediaController_MediaQueueSettings";
          __int16 v19 = 1024;
          int v20 = 411;
          uint64_t v11 = "VCRC [%s] %s:%d inVideoBitrate is nil";
        }
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          return;
        }
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        OSStatus v10 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        int v15 = 136315650;
        uint64_t v16 = v12;
        __int16 v17 = 2080;
        uint64_t v18 = "VCRateControlMediaController_MediaQueueSettings";
        __int16 v19 = 1024;
        int v20 = 410;
        uint64_t v11 = "VCRC [%s] %s:%d outAudioBitrate is nil";
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        return;
      }
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      OSStatus v10 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v15 = 136315650;
      uint64_t v16 = v9;
      __int16 v17 = 2080;
      uint64_t v18 = "VCRateControlMediaController_MediaQueueSettings";
      __int16 v19 = 1024;
      int v20 = 409;
      uint64_t v11 = "VCRC [%s] %s:%d inAudioBitrate is nil";
    }
    _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v15, 0x1Cu);
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_MediaQueueSettings_cold_1();
    }
  }
}

void VCRateControlMediaController_MediaQueueRateChangeCounter(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4 == 0xFFFFFFFFLL && !*(void *)(a1 + 32)) {
      return;
    }
    if (a2)
    {
      if (a3)
      {
        uint64_t v5 = *(void *)(a1 + 32);
        if (v5)
        {
          VCMediaQueue_GetTimeRateChanged(v5, a3, a2);
        }
        else
        {
          MediaQueue_GetTimeRateChanged(v4, a3, a2);
        }
        return;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        return;
      }
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      unsigned int v7 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v10 = 136315650;
      uint64_t v11 = v9;
      __int16 v12 = 2080;
      uint64_t v13 = "VCRateControlMediaController_MediaQueueRateChangeCounter";
      __int16 v14 = 1024;
      int v15 = 433;
      uint64_t v8 = "VCRC [%s] %s:%d rateChangeTime is nil";
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        return;
      }
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      unsigned int v7 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v10 = 136315650;
      uint64_t v11 = v6;
      __int16 v12 = 2080;
      uint64_t v13 = "VCRateControlMediaController_MediaQueueRateChangeCounter";
      __int16 v14 = 1024;
      int v15 = 432;
      uint64_t v8 = "VCRC [%s] %s:%d rateChangeCounter is nil";
    }
    _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v10, 0x1Cu);
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_MediaQueueRateChangeCounter_cold_1();
    }
  }
}

void VCRateControlMediaController_ComputePacketLoss(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v2 = *(void *)(a1 + 32);
    if (v3 == 0xFFFFFFFFLL)
    {
      if (!v2) {
        return;
      }
      int v13 = -1431655766;
    }
    else
    {
      int v13 = -1431655766;
      if (!v2)
      {
        MediaQueue_FindPacketInTxHistory(v3, *(_WORD *)a2, *(_DWORD *)(a2 + 4), *(void *)(a2 + 16), *(_DWORD *)(a2 + 24), (uint64_t)&v13, *(void *)(a2 + 32), *(_DWORD *)(a2 + 8), *(void *)(a2 + 56), *(void *)(a2 + 40), *(void *)(a2 + 48));
        return;
      }
    }
    *(void *)uint64_t v6 = 0;
    *(_WORD *)uint64_t v6 = *(_WORD *)a2;
    *(void *)&v6[4] = *(void *)(a2 + 4);
    int v7 = *(_DWORD *)(a2 + 24);
    uint64_t v4 = 1000 * *(void *)(a2 + 16);
    int v10 = &v13;
    uint64_t v5 = *(void *)(a2 + 32);
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    long long v11 = *(_OWORD *)(a2 + 40);
    uint64_t v12 = *(void *)(a2 + 56);
    VCMediaQueue_ComputeOneToOneStatsWithPacketInfo(v2, (unsigned __int16 *)v6);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_ComputePacketLoss_cold_1();
    }
  }
}

void VCRateControlMediaController_SetForceBBFlush(uint64_t a1, int a2, double a3)
{
  if (a1)
  {
    if (a2) {
      *(double *)(a1 + 232) = a3;
    }
    else {
      *(void *)(a1 + 232) = 0;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetForceBBFlush_cold_1();
    }
  }
}

void VCRateControlMediaController_UpdateBasebandSuggestion(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if (*(_DWORD *)a2 == 1)
    {
      *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 36);
      *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 28) + *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 24);
      *(void *)(a1 + 256) = *(void *)(a2 + 64);
      *(void *)(a1 + 264) = *(void *)(a2 + 80);
      __int16 v79 = 0;
      double v10 = micro();
      if (*(_DWORD *)(a1 + 240) > *(_DWORD *)(a1 + 44)
        || !*(_DWORD *)(a1 + 248)
        || !VCRateControlMediaController_IsVideoStopped((unsigned char *)a1))
      {
        *(double *)(a1 + 80) = v10;
      }
      if (*(unsigned char *)(a1 + 61))
      {
        unsigned int v11 = *(_DWORD *)(a1 + 44);
        unsigned int v12 = *(_DWORD *)(a1 + 244);
        double v13 = (double)v12;
        if (*(_DWORD *)(a1 + 212)) {
          unsigned int v11 = *(_DWORD *)(a1 + 212);
        }
        if ((double)v11 * 1.5 < v13
          || (int v14 = 0, v11 >= v12)
          && v10 - *(double *)(a1 + 216) > 0.25
          && (int v14 = 0, v13 + v13 >= (double)(8 * *(_DWORD *)(a1 + 248))))
        {
          char v15 = 0;
          uint64_t v16 = "VCRateControl turn audio stall OFF!\n";
          __int16 v17 = &v79;
LABEL_16:
          int v14 = 1;
          *(unsigned char *)__int16 v17 = 1;
          *(unsigned char *)(a1 + 61) = v15;
          VRLogfilePrintWithTimestamp(*(void *)(a1 + 288), v16, v4, v5, v6, v7, v8, v9, v78);
        }
      }
      else
      {
        int v20 = *(_DWORD *)(a1 + 68);
        if (v20 == 2)
        {
          unsigned int v21 = 12000;
        }
        else if (v20 == 1)
        {
          unsigned int v21 = 16000;
        }
        else if (v20)
        {
          unsigned int v21 = -1431655766;
        }
        else
        {
          unsigned int v21 = *(_DWORD *)(a1 + 52);
        }
        if (*(_DWORD *)(a1 + 44) < v21) {
          unsigned int v21 = *(_DWORD *)(a1 + 44);
        }
        if (*(_DWORD *)(a1 + 244) < v21
          && (8 * *(_DWORD *)(a1 + 248)) > 2 * (unint64_t)*(unsigned int *)(a1 + 52))
        {
          uint64_t v16 = "VCRateControl turn audio stall ON!\n";
          char v15 = 1;
          __int16 v17 = (__int16 *)((char *)&v79 + 1);
          goto LABEL_16;
        }
        int v14 = 0;
      }
      if (*(unsigned char *)(a1 + 59))
      {
        int v22 = 0;
        int v23 = 0;
        unsigned int v24 = 0;
        unsigned int v25 = 0;
        goto LABEL_38;
      }
      if (*(double *)(a1 + 264) > 0.2) {
        *(double *)(a1 + 272) = v10;
      }
      int v26 = VCStatisticsCollector_Mode(*(void *)(a1 + 16));
      double v27 = *(double *)(a1 + 256);
      if (v27 <= 2.0 || v26 != 4 && ((double v28 = *(double *)(a1 + 112), v28 <= 0.0) || v10 - v28 <= 0.5))
      {
        if (v27 < 0.5)
        {
          if (*(unsigned char *)(a1 + 280))
          {
            *(unsigned char *)(a1 + 280) = 0;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v31 = VRTraceErrorLogLevelToCSTR();
              uint64_t v32 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315650;
                uint64_t v81 = v31;
                __int16 v82 = 2080;
                int v83 = "VCRateControlMediaController_UpdateBasebandSuggestion";
                __int16 v84 = 1024;
                int v85 = 580;
                _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Baseband queue LWM is hit", buf, 0x1Cu);
              }
            }
          }
        }
        if (!*(unsigned char *)(a1 + 57) || *(unsigned char *)(a1 + 280) || *(_DWORD *)(a1 + 68) || v10 - *(double *)(a1 + 272) <= 2.0)
        {
          unsigned int v24 = 0;
        }
        else
        {
          *(unsigned char *)(a1 + 57) = 0;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v39 = VRTraceErrorLogLevelToCSTR();
            OSStatus v40 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315650;
              uint64_t v81 = v39;
              __int16 v82 = 2080;
              int v83 = "VCRateControlMediaController_UpdateBasebandSuggestion";
              __int16 v84 = 1024;
              int v85 = 591;
              _os_log_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Baseband queue LWM is hit, [resume video]", buf, 0x1Cu);
            }
          }
          uint64_t v41 = *(void *)(a1 + 288);
          if (v41) {
            VRLogfilePrintWithTimestamp(v41, "Baseband queue LWM is hit, [delay:%.3f, queueDepth:%u, BBRate:%u, audioRate:%d, audioFraction:%d, resume video]\n", v33, v34, v35, v36, v37, v38, *(void *)(a1 + 256));
          }
          unsigned int v24 = 1;
          int v14 = 1;
        }
        VCRateControlMediaController_IsVideoStopped((unsigned char *)a1);
        unsigned int v25 = 0;
        int v23 = 0;
        int v22 = 0;
LABEL_68:
        double v48 = *(double *)(a1 + 232);
        if (v48 > 0.0 && v10 - v48 > 5.0)
        {
          *(double *)(a1 + 232) = v10;
          VRLogfilePrintWithTimestamp(*(void *)(a1 + 288), "Baseband flush is forced at now=%f\n", v42, v43, v44, v45, v46, v47, SLOBYTE(v10));
          *(double *)(a1 + 192) = v10;
          *(double *)(a1 + 200) = v10;
          int v23 = 1;
          int v22 = 1;
          goto LABEL_71;
        }
LABEL_38:
        if (!v14) {
          return;
        }
LABEL_71:
        if (*(unsigned char *)(a1 + 225)) {
          return;
        }
        if (*(unsigned char *)(a1 + 63)) {
          uint64_t v49 = v25;
        }
        else {
          uint64_t v49 = 0;
        }
        int v50 = *(_DWORD *)(a1 + 168);
        double v57 = micro();
        if (v23 && (*(_DWORD *)(a1 + 252) || *(double *)(a1 + 232) > 0.0))
        {
          ++*(_DWORD *)(a1 + 168);
          *(double *)(a1 + 184) = v57;
          int v58 = 1;
          uint64_t v59 = 0x100000000;
          if (!v22) {
            goto LABEL_84;
          }
        }
        else
        {
          uint64_t v59 = 0;
          int v58 = 0;
          if (!v22) {
            goto LABEL_84;
          }
        }
        if (*(_DWORD *)(a1 + 252) || *(double *)(a1 + 232) > 0.0)
        {
          ++*(_DWORD *)(a1 + 168);
          *(double *)(a1 + 184) = v57;
          int v58 = 1;
          uint64_t v60 = 0x1000000;
          goto LABEL_85;
        }
LABEL_84:
        uint64_t v60 = 0;
LABEL_85:
        if (v58)
        {
          uint64_t v61 = *(void *)(a1 + 288);
          if (v61) {
            VRLogfilePrintWithTimestamp(v61, "Increase basebandFlushCount %d -> %d internally with suggestion.\n", v51, v52, v53, v54, v55, v56, v50);
          }
        }
        __int16 v62 = (void *)MEMORY[0x1E4E56580](a1 + 8);
        [v62 mediaController:a1 mediaSuggestionDidChange:v49 | ((unint64_t)v24 << 8) | v59 | v60 | ((unint64_t)HIBYTE(v79) << 40) | ((unint64_t)v79 << 48)];
        if (v62) {
          CFRelease(v62);
        }
        return;
      }
      unsigned int v29 = *(_DWORD *)(a1 + 240);
      if (v29 >= *(_DWORD *)(a1 + 44))
      {
        unsigned int v63 = *(_DWORD *)(a1 + 48);
        BOOL IsVideoStopped = VCRateControlMediaController_IsVideoStopped((unsigned char *)a1);
        if (v29 >= v63)
        {
          if (!IsVideoStopped
            && (8 * *(_DWORD *)(a1 + 248)) > 2 * (unint64_t)*(unsigned int *)(a1 + 240)
            && v10 - *(double *)(a1 + 200) > 0.1)
          {
            unsigned int v25 = 0;
            int v23 = 0;
            *(double *)(a1 + 200) = v10;
            int v14 = 1;
            int v22 = 1;
            goto LABEL_108;
          }
          unsigned int v25 = 0;
          int v23 = 0;
LABEL_104:
          if (!v14 && *(unsigned char *)(a1 + 280))
          {
            int v14 = 0;
            int v22 = v25;
LABEL_120:
            *(unsigned char *)(a1 + 280) = 1;
            BOOL v77 = VCRateControlMediaController_IsVideoStopped((unsigned char *)a1);
            unsigned int v24 = 0;
            if (v23 && v77)
            {
              unsigned int v24 = 0;
              if (v10 - *(double *)(a1 + 200) <= 0.1)
              {
                int v23 = 1;
              }
              else
              {
                *(double *)(a1 + 200) = v10;
                int v23 = 1;
                int v22 = 1;
                int v14 = 1;
              }
            }
            goto LABEL_68;
          }
          int v22 = v25;
LABEL_108:
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v71 = VRTraceErrorLogLevelToCSTR();
            __int16 v72 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v73 = " flush audio";
              *(_DWORD *)CMTime buf = 136316418;
              uint64_t v81 = v71;
              if (!v23) {
                int v73 = "";
              }
              __int16 v82 = 2080;
              int v83 = "VCRateControlMediaController_UpdateBasebandSuggestion";
              __int16 v74 = " flush video";
              if (!v22) {
                __int16 v74 = "";
              }
              __int16 v84 = 1024;
              int v85 = 561;
              __int16 v86 = 2080;
              int v87 = v73;
              __int16 v88 = 2080;
              if (v25) {
                int v75 = " stop video";
              }
              else {
                int v75 = "";
              }
              CFAllocatorRef v89 = v74;
              __int16 v90 = 2080;
              int v91 = v75;
              _os_log_impl(&dword_1E1EA4000, v72, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Baseband queue HWM is hit, [mediaSuggestion:%s%s%s]", buf, 0x3Au);
            }
          }
          uint64_t v76 = *(void *)(a1 + 288);
          if (v76) {
            VRLogfilePrintWithTimestamp(v76, "Baseband queue HWM is hit, [delay:%.3f, queueDepth:%u, BBRate:%u, minRate:%u, audioRate:%u, audioFraction:%d, mediaSuggestion:%s%s%s]\n", v65, v66, v67, v68, v69, v70, *(void *)(a1 + 256));
          }
          goto LABEL_120;
        }
        if (!IsVideoStopped)
        {
          int v23 = 0;
          OSStatus v30 = (double *)(a1 + 200);
          unsigned int v25 = 1;
          goto LABEL_102;
        }
      }
      else
      {
        if (!VCRateControlMediaController_IsVideoStopped((unsigned char *)a1))
        {
          *(double *)(a1 + 192) = v10;
          OSStatus v30 = (double *)(a1 + 200);
          unsigned int v25 = 1;
LABEL_95:
          int v23 = 1;
LABEL_102:
          double *v30 = v10;
          int v14 = 1;
          goto LABEL_103;
        }
        if ((8 * *(_DWORD *)(a1 + 248)) > 2 * (unint64_t)*(unsigned int *)(a1 + 44))
        {
          unsigned int v25 = 0;
          OSStatus v30 = (double *)(a1 + 192);
          if (v10 - *(double *)(a1 + 192) <= 0.1)
          {
            int v23 = 0;
LABEL_103:
            *(unsigned char *)(a1 + 57) = 1;
            goto LABEL_104;
          }
          goto LABEL_95;
        }
      }
      unsigned int v25 = 0;
      int v23 = 0;
      goto LABEL_103;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCRateControlMediaController_UpdateBasebandSuggestion_cold_1();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v18 = VRTraceErrorLogLevelToCSTR();
    __int16 v19 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v81 = v18;
      __int16 v82 = 2080;
      int v83 = "VCRateControlMediaController_UpdateBasebandSuggestion";
      __int16 v84 = 1024;
      int v85 = 484;
      __int16 v86 = 2048;
      int v87 = (const char *)a1;
      __int16 v88 = 2048;
      CFAllocatorRef v89 = (const char *)a2;
      _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Invalid parameter. Rate controller=%p statistics=%p", buf, 0x30u);
    }
  }
}

void VCRateControlMediaController_SetAudioFractionTier(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 68) != a2)
    {
      *(_DWORD *)(a1 + 68) = a2;
      double v2 = 1.0;
      if ((a2 - 1) < 2) {
        double v2 = 0.0;
      }
      MediaQueue_SetAudioFraction(v2);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetAudioFractionTier_cold_1();
    }
  }
}

void VCRateControlMediaController_StopVideoBySmartBrake(unsigned __int8 *a1)
{
  if (a1)
  {
    a1[308] = 1;
    VCRateControlMediaController_StopVideoByVCRateControl(a1);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_StopVideoBySmartBrake_cold_1();
    }
  }
}

void VCRateControlMediaController_StopVideoByVCRateControl(unsigned __int8 *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!a1[59] && (a1[308] || a1[63]))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v2 = VRTraceErrorLogLevelToCSTR();
        uint64_t v3 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v4 = a1[58];
          int v5 = a1[57];
          int v6 = a1[56];
          int v9 = 136316418;
          uint64_t v10 = v2;
          __int16 v11 = 2080;
          unsigned int v12 = "VCRateControlMediaController_StopVideoByVCRateControl";
          __int16 v13 = 1024;
          int v14 = 729;
          __int16 v15 = 1024;
          int v16 = v4;
          __int16 v17 = 1024;
          int v18 = v5;
          __int16 v19 = 1024;
          int v20 = v6;
          _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Suggest to stop video from rate controller due to congestion [pause:%d,stopByBB:%d,stopByRC:%d]", (uint8_t *)&v9, 0x2Eu);
        }
      }
      if (!a1[56] && !a1[57] && !a1[58])
      {
        if (a1[308])
        {
          a1[308] = 0;
          uint64_t v7 = 0x100000000000001;
        }
        else
        {
          uint64_t v7 = 1;
        }
        uint64_t v8 = (void *)MEMORY[0x1E4E56580](a1 + 8);
        [v8 mediaController:a1 mediaSuggestionDidChange:v7];
        if (v8) {
          CFRelease(v8);
        }
      }
      a1[56] = 1;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_StopVideoByVCRateControl_cold_1();
    }
  }
}

void VCRateControlMediaController_ResumeVideoBySmartBrake(unsigned __int8 *a1)
{
  if (a1)
  {
    a1[308] = 1;
    VCRateControlMediaController_ResumeVideo(a1);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_ResumeVideoBySmartBrake_cold_1();
    }
  }
}

void VCRateControlMediaController_ResumeVideo(unsigned __int8 *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!a1[59])
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v2 = VRTraceErrorLogLevelToCSTR();
        uint64_t v3 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v4 = a1[58];
          int v5 = a1[57];
          int v6 = a1[56];
          int v11 = 136316418;
          uint64_t v12 = v2;
          __int16 v13 = 2080;
          int v14 = "VCRateControlMediaController_ResumeVideo";
          __int16 v15 = 1024;
          int v16 = 753;
          __int16 v17 = 1024;
          int v18 = v4;
          __int16 v19 = 1024;
          int v20 = v5;
          __int16 v21 = 1024;
          int v22 = v6;
          _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Suggest to resume video from rate controller due to no congestion [pause:%d,stopByBB:%d,stopByRC:%d]", (uint8_t *)&v11, 0x2Eu);
        }
      }
      if (a1[58])
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v7 = VRTraceErrorLogLevelToCSTR();
          uint64_t v8 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v11 = 136315650;
            uint64_t v12 = v7;
            __int16 v13 = 2080;
            int v14 = "VCRateControlMediaController_ResumeVideo";
            __int16 v15 = 1024;
            int v16 = 755;
            _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Stop resuming video since user already pause the video", (uint8_t *)&v11, 0x1Cu);
          }
        }
      }
      else
      {
        if (a1[56] || a1[57])
        {
          if (a1[308])
          {
            a1[308] = 0;
            uint64_t v9 = 0x100000000000100;
          }
          else
          {
            uint64_t v9 = 256;
          }
          uint64_t v10 = (void *)MEMORY[0x1E4E56580](a1 + 8);
          [v10 mediaController:a1 mediaSuggestionDidChange:v9];
          if (v10) {
            CFRelease(v10);
          }
        }
        *((_WORD *)a1 + 28) = 0;
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_ResumeVideo_cold_1();
    }
  }
}

void VCRateControlMediaController_SetTargetBitrate(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 52) = a2;
    *(unsigned char *)(a1 + 62) = a2 >> 5 < 0xC35;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetTargetBitrate_cold_1();
    }
  }
}

void VCRateControlMediaController_SetMinTargetBitrate(uint64_t a1, int a2)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 48) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetMinTargetBitrate_cold_1();
    }
  }
}

uint64_t VCRateControlMediaController_AudioSendingBitrate(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 44);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCRateControlMediaController_AudioSendingBitrate_cold_1();
  }
  return 0;
}

void VCRateControlMediaController_SetAudioSendingBitrate(uint64_t a1, unsigned int a2, double a3, double a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(_DWORD *)(a1 + 44) = a2;
    LODWORD(a4) = *(_DWORD *)(a1 + 52);
    if ((double)*(unint64_t *)&a4 * 1.15 < (double)a2 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      int v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(a1 + 44);
        int v8 = *(_DWORD *)(a1 + 52);
        int v9 = 136316162;
        uint64_t v10 = v5;
        __int16 v11 = 2080;
        uint64_t v12 = "VCRateControlMediaController_SetAudioSendingBitrate";
        __int16 v13 = 1024;
        int v14 = 886;
        __int16 v15 = 1024;
        int v16 = v7;
        __int16 v17 = 1024;
        int v18 = v8;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Audio sending bitrate %u is set much higher than the target bitrate %u", (uint8_t *)&v9, 0x28u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetAudioSendingBitrate_cold_1();
    }
  }
}

void VCRateControlMediaController_SetShouldDisableLargeFrameRequestsWhenInitialRampUp(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 144) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetShouldDisableLargeFrameRequestsWhenInitialRampUp_cold_1();
    }
  }
}

void VCRateControlMediaController_SetRateLimitedMaxTimeExceeded(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 145) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_SetRateLimitedMaxTimeExceeded_cold_1();
    }
  }
}

double VCRateControlMediaController_LastVideoRefreshFrameTime(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 104);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlMediaController_LastVideoRefreshFrameTime_cold_1();
    }
  }
  return NAN;
}

uint64_t VCRateControlMediaController_AudioFractionTier(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 68);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCRateControlMediaController_AudioFractionTier_cold_1();
  }
  return 0;
}

BOOL VCRateControlMediaController_RampDownAudioFraction(uint64_t a1)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCRateControlMediaController_RampDownAudioFraction_cold_1();
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 59) || !*(unsigned char *)(a1 + 56) && !*(unsigned char *)(a1 + 57) && !*(unsigned char *)(a1 + 58)) {
    return 0;
  }
  double v8 = micro();
  int v9 = *(_DWORD *)(a1 + 68);
  if (v8 - *(double *)(a1 + 80) <= 2.0 || v9 == 2) {
    return 0;
  }
  unsigned int v11 = *(_DWORD *)(a1 + 240);
  if (v11 >> 3 >= 0x753) {
    int v12 = v11 >> 5 < 0x271;
  }
  else {
    int v12 = 2;
  }
  *(_DWORD *)(a1 + 68) = v12;
  *(double *)(a1 + 72) = v8;
  *(double *)(a1 + 80) = v8;
  uint64_t v13 = *(void *)(a1 + 288);
  if (v13) {
    VRLogfilePrintWithTimestamp(v13, "Change audio fraction tier from %d -> %d.\n", v2, v3, v4, v5, v6, v7, v9);
  }
  return 1;
}

BOOL VCRateControlGetLargeFrameSize(void *a1, _DWORD *a2)
{
  if (a1 && a2) {
    *a2 = [a1 probingLargeFrameSize];
  }
  return a1 != 0;
}

BOOL VCRateControlScheduleProbingSequence(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    char v8 = 0;
    objc_msgSend(a1, "scheduleProbingSequenceWithFrameSize:paddingBytes:timestamp:fecRatio:isProbingSequenceScheduled:", a2, a3, a4, &v8);
    if (a5) {
      *a5 = v8;
    }
  }
  return a1 != 0;
}

BOOL VCRateControlGetProbingSequencePacketizationInfo(void *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (a1)
  {
    if (a2) {
      *a2 = [a1 probingSequencePacketCount];
    }
    if (a3)
    {
      int v7 = [a1 probingSequencePacketSize];
      *a3 = v7;
      if (a4) {
        *a4 = v7;
      }
    }
  }
  return a1 != 0;
}

BOOL VCRateControlPauseVideo(void *a1, uint64_t a2)
{
  if (a1) {
    [a1 pauseVideoByUser:a2];
  }
  return a1 != 0;
}

BOOL VCRateControlSetAFRCBandwidth(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && ![a1 statisticsCollector])
  {
    [a1 setAfrcRemoteEstimatedBandwidth:a2];
    [a1 setTargetBitrate:a3];
  }
  return a1 != 0;
}

uint64_t VCConnection_Priority(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(unsigned int *)(a1 + 28);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      int v7 = "VCConnection_Priority";
      __int16 v8 = 1024;
      int v9 = 48;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v4, 0x1Cu);
    }
  }
  return 0xFFFFFFFFLL;
}

void VCConnection_SetPriority(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(_DWORD *)(a1 + 28) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      int v7 = "VCConnection_SetPriority";
      __int16 v8 = 1024;
      int v9 = 56;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

uint64_t VCConnection_IsLocalOnWired(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 160);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsLocalOnWired";
        __int16 v9 = 1024;
        int v10 = 350;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsLocalOnWiFiOrWired(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 128);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsLocalOnWiFiOrWired";
        __int16 v9 = 1024;
        int v10 = 318;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsRemoteOnWired(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 168);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsRemoteOnWired";
        __int16 v9 = 1024;
        int v10 = 358;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsRemoteOnWiFiOrWired(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 136);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsRemoteOnWiFiOrWired";
        __int16 v9 = 1024;
        int v10 = 326;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsRelay(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 48);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsRelay";
        __int16 v9 = 1024;
        int v10 = 236;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsEndToEndLink(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 184);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsEndToEndLink";
        __int16 v9 = 1024;
        int v10 = 374;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsIPv6(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 80);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsIPv6";
        __int16 v9 = 1024;
        int v10 = 270;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_MatchesSourceDestinationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    int v4 = *(uint64_t (**)(void))(a1 + 32);
    return v4();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      __int16 v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136316162;
        uint64_t v9 = v6;
        __int16 v10 = 2080;
        uint64_t v11 = "VCConnection_MatchesSourceDestinationInfo";
        __int16 v12 = 1024;
        int v13 = 220;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = a2;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NULL instance=%p or sourceDest=%p passed", (uint8_t *)&v8, 0x30u);
      }
    }
    return 0;
  }
}

void VCConnection_SourceDestinationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    int v4 = *(void (**)(void))(a1 + 40);
    v4();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136316162;
      uint64_t v8 = v5;
      __int16 v9 = 2080;
      __int16 v10 = "VCConnection_SourceDestinationInfo";
      __int16 v11 = 1024;
      int v12 = 228;
      __int16 v13 = 2048;
      uint64_t v14 = a1;
      __int16 v15 = 2048;
      uint64_t v16 = a2;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance=%p or sourceDestinationInfo=%p passed", (uint8_t *)&v7, 0x30u);
    }
  }
}

uint64_t VCConnection_Equal(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)) {
      return (*(uint64_t (**)(void))(a1 + 56))();
    }
    return 0;
  }
  return v2;
}

uint64_t VCConnection_IsLocalOnCellular(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 64);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        uint64_t v8 = "VCConnection_IsLocalOnCellular";
        __int16 v9 = 1024;
        int v10 = 254;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsRemoteOnCellular(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 72);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        uint64_t v8 = "VCConnection_IsRemoteOnCellular";
        __int16 v9 = 1024;
        int v10 = 262;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_LocalCellTech(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 88);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        uint64_t v8 = "VCConnection_LocalCellTech";
        __int16 v9 = 1024;
        int v10 = 278;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

void VCConnection_SetLocalCellTech(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(void (**)(void))(a1 + 96);
    v1();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      __int16 v7 = "VCConnection_SetLocalCellTech";
      __int16 v8 = 1024;
      int v9 = 286;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

uint64_t VCConnection_RemoteCellTech(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 104);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_RemoteCellTech";
        __int16 v9 = 1024;
        int v10 = 294;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

void VCConnection_SetRemoteCellTech(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(void (**)(void))(a1 + 112);
    v1();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      __int16 v7 = "VCConnection_SetRemoteCellTech";
      __int16 v8 = 1024;
      int v9 = 302;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

uint64_t VCConnection_CopyDescription(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 120);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_CopyDescription";
        __int16 v9 = 1024;
        int v10 = 310;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsLocalOnWiFi(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 144);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsLocalOnWiFi";
        __int16 v9 = 1024;
        int v10 = 334;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsRemoteOnWiFi(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 152);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsRemoteOnWiFi";
        __int16 v9 = 1024;
        int v10 = 342;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsOnSameInterfacesWithConnection(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 176);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsOnSameInterfacesWithConnection";
        __int16 v9 = 1024;
        int v10 = 366;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_ConnectionID(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 192);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_ConnectionID";
        __int16 v9 = 1024;
        int v10 = 382;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsLocalExpensive(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 200);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsLocalExpensive";
        __int16 v9 = 1024;
        int v10 = 390;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsLocalConstrained(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 208);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsLocalConstrained";
        __int16 v9 = 1024;
        int v10 = 398;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsRemoteExpensive(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 216);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsRemoteExpensive";
        __int16 v9 = 1024;
        int v10 = 406;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsRemoteConstrained(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 224);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsRemoteConstrained";
        __int16 v9 = 1024;
        int v10 = 414;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_ReportingIPVersion(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 232);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_ReportingIPVersion";
        __int16 v9 = 1024;
        int v10 = 422;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_ReportingConnectionInterface(uint64_t (**a1)(void), int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      char v3 = a1[16](a1);
      int v4 = a1[18](a1);
      if (v3) {
        goto LABEL_4;
      }
    }
    else
    {
      int v6 = a1[17](a1);
      int v4 = a1[19](a1);
      if (v6)
      {
LABEL_4:
        if (v4) {
          return 87;
        }
        else {
          return 69;
        }
      }
    }
    return 67;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    __int16 v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315650;
      uint64_t v10 = v7;
      __int16 v11 = 2080;
      int v12 = "VCConnection_ReportingConnectionInterface";
      __int16 v13 = 1024;
      int v14 = 429;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d instance should not be nil", (uint8_t *)&v9, 0x1Cu);
    }
  }
  return 88;
}

uint64_t VCConnection_ReportingConnectionType(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((*(unsigned int (**)(void))(a1 + 48))()) {
      return 82;
    }
    else {
      return 80;
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v2 = VRTraceErrorLogLevelToCSTR();
      char v3 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 136315650;
        uint64_t v5 = v2;
        __int16 v6 = 2080;
        uint64_t v7 = "VCConnection_ReportingConnectionType";
        __int16 v8 = 1024;
        int v9 = 444;
        _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d instance should not be nil", (uint8_t *)&v4, 0x1Cu);
      }
    }
    return 88;
  }
}

uint64_t VCConnection_ReportingQRServerConfig(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 240);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_ReportingQRServerConfig";
        __int16 v9 = 1024;
        int v10 = 456;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_ReportingSliceStatus(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 248);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_ReportingSliceStatus";
        __int16 v9 = 1024;
        int v10 = 465;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_IsHopByHopEncryptionSupported(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v1 = *(uint64_t (**)(void))(a1 + 256);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      int v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        __int16 v8 = "VCConnection_IsHopByHopEncryptionSupported";
        __int16 v9 = 1024;
        int v10 = 473;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

uint64_t VCConnection_PerPacketConnectionOverhead(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 16);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCConnection_PerPacketConnectionOverhead_cold_1(v2);
    }
  }
  return 0;
}

uint64_t VCConnection_GetDataMode(uint64_t a1)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCConnection_GetDataMode_cold_1(v7);
    }
    return 0;
  }
  if ((*(unsigned int (**)(void))(a1 + 200))()) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  int v3 = (*(uint64_t (**)(uint64_t))(a1 + 216))(a1);
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(a1 + 208))(a1);
  if ((*(unsigned int (**)(uint64_t))(a1 + 224))(a1) | v3) {
    int v5 = v2 | 8;
  }
  else {
    int v5 = v2;
  }
  return v5 | v4;
}

uint64_t DLCreateHandle(uint64_t *a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  v79.__sig = 0xAAAAAAAAAAAAAAAALL;
  *(void *)v79.__opaque = 0xAAAAAAAAAAAAAAAALL;
  if (a3 && *(_DWORD *)(a3 + 4) == 1)
  {
    uint64_t v16 = (uint64_t *)malloc_type_calloc(1uLL, 0x408uLL, 0x10A004066E76C10uLL);
    if (v16)
    {
      uint64_t v17 = v16;
      *((_DWORD *)v16 + 1) = a2;
      *((_DWORD *)v16 + 2) = a6;
      *((_DWORD *)v16 + 252) = 0;
      *((_DWORD *)v16 + 3) = a4;
      v16[127] = a7;
      v16[128] = a8;
      uint64_t v18 = MQCreateHandle(v16 + 121);
      if ((v18 & 0x80000000) == 0)
      {
        pthread_mutexattr_init(&v79);
        pthread_mutexattr_settype(&v79, 2);
        pthread_mutex_init((pthread_mutex_t *)(v17 + 70), &v79);
        pthread_mutexattr_destroy(&v79);
        if (a2) {
          int v19 = 1;
        }
        else {
          int v19 = 7;
        }
        *(_DWORD *)uint64_t v17 = v19;
        *((_DWORD *)v17 + 8) = *(_DWORD *)(a3 + 568);
        uint64_t v20 = *(void *)(a3 + 728);
        long long v21 = *(_OWORD *)(a3 + 712);
        *(_OWORD *)((char *)v17 + 36) = *(_OWORD *)(a3 + 696);
        *(uint64_t *)((char *)v17 + 68) = v20;
        *(_OWORD *)((char *)v17 + 52) = v21;
        long long v23 = *(_OWORD *)(a3 + 736);
        long long v22 = *(_OWORD *)(a3 + 752);
        *(uint64_t *)((char *)v17 + 108) = *(void *)(a3 + 768);
        *(_OWORD *)((char *)v17 + 76) = v23;
        *(_OWORD *)((char *)v17 + 92) = v22;
        long long v25 = *(_OWORD *)(a3 + 776);
        long long v24 = *(_OWORD *)(a3 + 792);
        *(uint64_t *)((char *)v17 + 148) = *(void *)(a3 + 808);
        *(_OWORD *)((char *)v17 + 116) = v25;
        *(_OWORD *)((char *)v17 + 132) = v24;
        long long v27 = *(_OWORD *)(a3 + 816);
        long long v26 = *(_OWORD *)(a3 + 832);
        *(uint64_t *)((char *)v17 + 188) = *(void *)(a3 + 848);
        *(_OWORD *)((char *)v17 + 156) = v27;
        *(_OWORD *)((char *)v17 + 172) = v26;
        long long v29 = *(_OWORD *)(a3 + 856);
        long long v28 = *(_OWORD *)(a3 + 872);
        *(uint64_t *)((char *)v17 + 228) = *(void *)(a3 + 888);
        *(_OWORD *)((char *)v17 + 196) = v29;
        *(_OWORD *)((char *)v17 + 212) = v28;
        if (IsIPPORTValid())
        {
          long long v30 = *(_OWORD *)(a3 + 856);
          long long v31 = *(_OWORD *)(a3 + 872);
          *(uint64_t *)((char *)v17 + 188) = *(void *)(a3 + 888);
          *(_OWORD *)((char *)v17 + 156) = v30;
          *(_OWORD *)((char *)v17 + 172) = v31;
        }
        uint64_t v32 = *(void *)(a3 + 504);
        if (v32)
        {
          uint64_t v33 = *(const char **)(a3 + 208);
          if (v33)
          {
            uint64_t v34 = *(void *)(a3 + 312);
            if (v34)
            {
              uint64_t v35 = *(void *)(a3 + 480);
              if (v35)
              {
                uint64_t v36 = *(uint64_t **)(a3 + 272);
                if (v36)
                {
                  strncpy((char *)v17 + 510, (const char *)(v32 + 4), 4uLL);
                  strncpy((char *)v17 + 236, v33, 0x3CuLL);
                  if (!a4)
                  {
                    strncpy((char *)v17 + 296, (const char *)v34, 0x2BuLL);
                    strncpy((char *)v17 + 339, (const char *)v35, 0x2BuLL);
                    strncpy((char *)v17 + 382, (const char *)(v34 + 156), 0x40uLL);
                    long long v17[2] = *v36;
                    v17[3] = 0;
                    long long v57 = *(_OWORD *)(v34 + 108);
                    long long v58 = *(_OWORD *)(v34 + 140);
                    long long v59 = *(_OWORD *)(v34 + 92);
                    *((_OWORD *)v17 + 44) = *(_OWORD *)(v34 + 124);
                    *((_OWORD *)v17 + 45) = v58;
                    *((_OWORD *)v17 + 42) = v59;
                    *((_OWORD *)v17 + 43) = v57;
                    long long v60 = *(_OWORD *)(v34 + 44);
                    long long v61 = *(_OWORD *)(v34 + 76);
                    *((_OWORD *)v17 + 40) = *(_OWORD *)(v34 + 60);
                    *((_OWORD *)v17 + 41) = v61;
                    *((_OWORD *)v17 + 39) = v60;
                    long long v62 = *(_OWORD *)(v35 + 108);
                    long long v63 = *(_OWORD *)(v35 + 140);
                    long long v64 = *(_OWORD *)(v35 + 92);
                    *((_OWORD *)v17 + 51) = *(_OWORD *)(v35 + 124);
                    *((_OWORD *)v17 + 52) = v63;
                    *((_OWORD *)v17 + 49) = v64;
                    *((_OWORD *)v17 + 50) = v62;
                    long long v65 = *(_OWORD *)(v35 + 44);
                    long long v66 = *(_OWORD *)(v35 + 76);
                    *((_OWORD *)v17 + 47) = *(_OWORD *)(v35 + 60);
                    *((_OWORD *)v17 + 48) = v66;
                    *((_OWORD *)v17 + 46) = v65;
LABEL_33:
                    v17[124] = a5;
                    uint64_t Handle = CreateHandle();
                    *a1 = Handle;
                    if (Handle != 0xFFFFFFFFLL) {
                      return 0;
                    }
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        DLCreateHandle_cold_3();
                      }
                    }
                    pthread_mutex_destroy((pthread_mutex_t *)(v17 + 70));
                    MQCloseHandle();
                    free(v17);
                    return 2148270085;
                  }
                  uint64_t v37 = *(void *)(a3 + 224);
                  if (v37)
                  {
                    uint64_t v38 = *(const char **)(a3 + 496);
                    strncpy((char *)v17 + 296, (const char *)v35, 0x2BuLL);
                    strncpy((char *)v17 + 339, (const char *)v34, 0x2BuLL);
                    strncpy((char *)v17 + 446, (const char *)(v34 + 156), 0x40uLL);
                    if (v38) {
                      strncpy((char *)v17 + 514, v38, 0x2BuLL);
                    }
                    long long v17[2] = 0;
                    v17[3] = *v36;
                    long long v39 = *(_OWORD *)(v37 + 44);
                    long long v40 = *(_OWORD *)(v37 + 76);
                    *((_OWORD *)v17 + 54) = *(_OWORD *)(v37 + 60);
                    *((_OWORD *)v17 + 55) = v40;
                    *((_OWORD *)v17 + 53) = v39;
                    long long v41 = *(_OWORD *)(v37 + 92);
                    long long v42 = *(_OWORD *)(v37 + 108);
                    long long v43 = *(_OWORD *)(v37 + 140);
                    *((_OWORD *)v17 + 58) = *(_OWORD *)(v37 + 124);
                    *((_OWORD *)v17 + 59) = v43;
                    *((_OWORD *)v17 + 56) = v41;
                    *((_OWORD *)v17 + 57) = v42;
                    long long v44 = *(_OWORD *)(v35 + 108);
                    long long v45 = *(_OWORD *)(v35 + 140);
                    long long v46 = *(_OWORD *)(v35 + 92);
                    *((_OWORD *)v17 + 44) = *(_OWORD *)(v35 + 124);
                    *((_OWORD *)v17 + 45) = v45;
                    *((_OWORD *)v17 + 42) = v46;
                    *((_OWORD *)v17 + 43) = v44;
                    long long v47 = *(_OWORD *)(v35 + 44);
                    long long v48 = *(_OWORD *)(v35 + 76);
                    *((_OWORD *)v17 + 40) = *(_OWORD *)(v35 + 60);
                    *((_OWORD *)v17 + 41) = v48;
                    *((_OWORD *)v17 + 39) = v47;
                    long long v49 = *(_OWORD *)(v34 + 44);
                    long long v50 = *(_OWORD *)(v34 + 76);
                    *((_OWORD *)v17 + 47) = *(_OWORD *)(v34 + 60);
                    *((_OWORD *)v17 + 48) = v50;
                    *((_OWORD *)v17 + 46) = v49;
                    long long v51 = *(_OWORD *)(v34 + 92);
                    long long v52 = *(_OWORD *)(v34 + 108);
                    long long v53 = *(_OWORD *)(v34 + 140);
                    *((_OWORD *)v17 + 51) = *(_OWORD *)(v34 + 124);
                    *((_OWORD *)v17 + 52) = v53;
                    *((_OWORD *)v17 + 49) = v51;
                    *((_OWORD *)v17 + 50) = v52;
                    *((_DWORD *)v17 + 240) = *(_DWORD *)(v37 + 156);
                    goto LABEL_33;
                  }
                }
              }
            }
          }
        }
        pthread_mutex_destroy((pthread_mutex_t *)(v17 + 70));
        MQCloseHandle();
        free(v17);
        return 2148270114;
      }
      uint64_t v54 = v18;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          DLCreateHandle_cold_2();
        }
      }
      free(v17);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    {
      return 2148270083;
    }
    else
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t v54 = 2148270083;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        DLCreateHandle_cold_1();
      }
    }
  }
  else
  {
    uint64_t v54 = 2148270081;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v55 = VRTraceErrorLogLevelToCSTR();
      uint64_t v56 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v69 = 136316162;
        uint64_t v70 = v55;
        __int16 v71 = 2080;
        __int16 v72 = "DLCreateHandle";
        __int16 v73 = 1024;
        int v74 = 74;
        __int16 v75 = 1024;
        int v76 = 74;
        __int16 v77 = 2048;
        uint64_t v78 = a3;
        _os_log_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Dialog.c:%d: Invalid Request message(%p)", (uint8_t *)&v69, 0x2Cu);
      }
    }
  }
  return v54;
}

uint64_t DLCloseHandle()
{
  uint64_t v0 = 2148270082;
  uint64_t v1 = CheckInHandleDebug();
  if (v1)
  {
    uint64_t v2 = v1;
    int v3 = (pthread_mutex_t *)(v1 + 560);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 560));
    uint64_t v4 = CheckInHandleDebug();
    *(_DWORD *)(v2 + 1004) = 1;
    pthread_mutex_unlock(v3);
    CheckOutHandleDebug();
    if (v4)
    {
      MQCloseHandle();
      CheckOutHandleDebug();
      int v5 = *(void **)(v4 + 976);
      if (v5) {
        FreeSipMsg(v5);
      }
      pthread_mutex_destroy((pthread_mutex_t *)(v4 + 560));
      uint64_t v6 = *(void (**)(void, void, void))(v4 + 1016);
      if (v6) {
        v6(*(void *)(v4 + 1024), *(unsigned int *)(v4 + 4), 0);
      }
      free((void *)v4);
      return 0;
    }
  }
  return v0;
}

uint64_t DLCloseHandleAll()
{
  return 0;
}

uint64_t DLUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a2 && *(_DWORD *)(a2 + 4) == 2)
  {
    uint64_t v3 = *(void *)(a2 + 272);
    if (v3)
    {
      uint64_t v4 = CheckInHandleDebug();
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = (pthread_mutex_t *)(v4 + 560);
        pthread_mutex_lock((pthread_mutex_t *)(v4 + 560));
        int v7 = *(_DWORD *)(v3 + 8);
        if ((v7 - 3) < 2)
        {
          if ((*(_DWORD *)(a2 + 8) - 6) <= 0x2E) {
            *(_DWORD *)uint64_t v5 = 6;
          }
          goto LABEL_32;
        }
        if (v7 != 1) {
          goto LABEL_32;
        }
        if ((*(_DWORD *)(a2 + 8) - 1) > 4)
        {
          int v13 = 3;
        }
        else
        {
          if (*(_DWORD *)v5 > 1u)
          {
LABEL_22:
            uint64_t v14 = *(void *)(a2 + 480);
            if (!*(_DWORD *)(v5 + 12))
            {
              uint64_t v18 = *(void *)(a2 + 224);
              int v19 = *(const char **)(a2 + 496);
              if (v14) {
                strncpy((char *)(v5 + 446), (const char *)(v14 + 156), 0x40uLL);
              }
              if (v18)
              {
                long long v20 = *(_OWORD *)(v18 + 44);
                long long v21 = *(_OWORD *)(v18 + 76);
                *(_OWORD *)(v5 + 864) = *(_OWORD *)(v18 + 60);
                *(_OWORD *)(v5 + 880) = v21;
                *(_OWORD *)(v5 + 848) = v20;
                long long v22 = *(_OWORD *)(v18 + 92);
                long long v23 = *(_OWORD *)(v18 + 108);
                long long v24 = *(_OWORD *)(v18 + 140);
                *(_OWORD *)(v5 + 928) = *(_OWORD *)(v18 + 124);
                *(_OWORD *)(v5 + 944) = v24;
                *(_OWORD *)(v5 + 896) = v22;
                *(_OWORD *)(v5 + 912) = v23;
                *(_DWORD *)(v5 + 960) = *(_DWORD *)(v18 + 156);
              }
              if (!v19) {
                goto LABEL_32;
              }
              uint64_t v15 = (char *)(v5 + 514);
              uint64_t v16 = v19;
              size_t v17 = 43;
              goto LABEL_31;
            }
            if (v14)
            {
              uint64_t v15 = (char *)(v5 + 382);
              uint64_t v16 = (const char *)(v14 + 156);
              size_t v17 = 64;
LABEL_31:
              strncpy(v15, v16, v17);
            }
LABEL_32:
            pthread_mutex_unlock(v6);
            CheckOutHandleDebug();
            return 0;
          }
          int v13 = 2;
        }
        *(_DWORD *)uint64_t v5 = v13;
        goto LABEL_22;
      }
      return 2148270082;
    }
    else
    {
      return 2148270114;
    }
  }
  else
  {
    uint64_t v8 = 2148270081;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      int v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        if (a2)
        {
          int v11 = *(_DWORD *)(a2 + 4);
          int v12 = *(_DWORD *)(a2 + 8);
        }
        else
        {
          int v11 = -1;
          int v12 = -1;
        }
        int v26 = 136316674;
        uint64_t v27 = v9;
        __int16 v28 = 2080;
        long long v29 = "DLUpdate";
        __int16 v30 = 1024;
        int v31 = 238;
        __int16 v32 = 1024;
        int v33 = 238;
        __int16 v34 = 2048;
        uint64_t v35 = a2;
        __int16 v36 = 1024;
        int v37 = v11;
        __int16 v38 = 1024;
        int v39 = v12;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Dialog.c:%d: Invalid Response message(%p,%d,%d)", (uint8_t *)&v26, 0x38u);
      }
    }
  }
  return v8;
}

uint64_t DLFindWithSipMsgAndLock(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 2148270081;
  if (a1 && a2)
  {
    uint64_t Handle = FindHandle();
    *a1 = Handle;
    if (Handle == 0xFFFFFFFFLL) {
      return 2148270102;
    }
    else {
      return 0;
    }
  }
  return v2;
}

uint64_t MatchSipMsgAndLock(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    uint64_t v5 = *(const char **)(a2 + 208);
    uint64_t v6 = *(void *)(a2 + 312);
    uint64_t v7 = *(void *)(a2 + 480);
    if (v5) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8 || v7 == 0) {
      return 0;
    }
    int v10 = (pthread_mutex_t *)(a1 + 560);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 560));
    if (*(_DWORD *)(a1 + 1004))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        int v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v31 = 136315650;
          uint64_t v32 = v11;
          __int16 v33 = 2080;
          __int16 v34 = "MatchSipMsgAndLock";
          __int16 v35 = 1024;
          int v36 = 322;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d MatchSipMsgAndLock: got a closing handle.", (uint8_t *)&v31, 0x1Cu);
        }
      }
      goto LABEL_45;
    }
    if (*(_DWORD *)a1 == 7 || *(_DWORD *)a1 == 1)
    {
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 != 1)
      {
        if (v13 != 2) {
          goto LABEL_45;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v14 = VRTraceErrorLogLevelToCSTR();
          uint64_t v15 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v31 = 136316674;
            uint64_t v32 = v14;
            __int16 v33 = 2080;
            __int16 v34 = "MatchSipMsgAndLock";
            __int16 v35 = 1024;
            int v36 = 329;
            __int16 v37 = 2080;
            uint64_t v38 = a1 + 236;
            __int16 v39 = 2080;
            uint64_t v40 = v5;
            __int16 v41 = 2080;
            uint64_t v42 = a1 + 382;
            __int16 v43 = 2080;
            uint64_t v44 = v6 + 156;
            _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Dialog(CREATED) Match(STATUS) [%s]=[%s], [%s]=[%s]\n", (uint8_t *)&v31, 0x44u);
          }
        }
        if (strcmp((const char *)(a1 + 236), v5)) {
          goto LABEL_45;
        }
        uint64_t v16 = (const char *)(a1 + 382);
        goto LABEL_38;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v23 = VRTraceErrorLogLevelToCSTR();
        long long v24 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v31 = 136316674;
          uint64_t v32 = v23;
          __int16 v33 = 2080;
          __int16 v34 = "MatchSipMsgAndLock";
          __int16 v35 = 1024;
          int v36 = 339;
          __int16 v37 = 2080;
          uint64_t v38 = a1 + 236;
          __int16 v39 = 2080;
          uint64_t v40 = v5;
          __int16 v41 = 2080;
          uint64_t v42 = a1 + 446;
          __int16 v43 = 2080;
          uint64_t v44 = v6 + 156;
          _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Dialog(CREATED) Match(REQUEST) [%s]=[%s], [%s]=[%s]\n", (uint8_t *)&v31, 0x44u);
        }
      }
      long long v25 = (const char *)(a1 + 236);
      int v26 = v5;
    }
    else
    {
      int v17 = *(_DWORD *)(a2 + 4);
      if (v17 != 1)
      {
        if (v17 != 2) {
          goto LABEL_45;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v18 = VRTraceErrorLogLevelToCSTR();
          int v19 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v31 = 136317186;
            uint64_t v32 = v18;
            __int16 v33 = 2080;
            __int16 v34 = "MatchSipMsgAndLock";
            __int16 v35 = 1024;
            int v36 = 352;
            __int16 v37 = 2080;
            uint64_t v38 = a1 + 236;
            __int16 v39 = 2080;
            uint64_t v40 = v5;
            __int16 v41 = 2080;
            uint64_t v42 = a1 + 382;
            __int16 v43 = 2080;
            uint64_t v44 = v6 + 156;
            __int16 v45 = 2080;
            uint64_t v46 = a1 + 446;
            __int16 v47 = 2080;
            uint64_t v48 = v7 + 156;
            _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Dialog Match(STATUS): [%s]=[%s], [%s]=[%s], [%s]=[%s]\n", (uint8_t *)&v31, 0x58u);
          }
        }
        if (strcmp((const char *)(a1 + 236), v5) || strcmp((const char *)(a1 + 382), (const char *)(v6 + 156))) {
          goto LABEL_45;
        }
        int v21 = *(unsigned __int8 *)(v7 + 156);
        long long v20 = (const char *)(v7 + 156);
        if (!v21) {
          return 1;
        }
        uint64_t v16 = (const char *)(a1 + 446);
        long long v22 = v20;
        goto LABEL_39;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v27 = VRTraceErrorLogLevelToCSTR();
        __int16 v28 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v31 = 136317186;
          uint64_t v32 = v27;
          __int16 v33 = 2080;
          __int16 v34 = "MatchSipMsgAndLock";
          __int16 v35 = 1024;
          int v36 = 365;
          __int16 v37 = 2080;
          uint64_t v38 = a1 + 236;
          __int16 v39 = 2080;
          uint64_t v40 = v5;
          __int16 v41 = 2080;
          uint64_t v42 = a1 + 382;
          __int16 v43 = 2080;
          uint64_t v44 = v7 + 156;
          __int16 v45 = 2080;
          uint64_t v46 = a1 + 446;
          __int16 v47 = 2080;
          uint64_t v48 = v6 + 156;
          _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Dialog Match(REQUEST): [%s]=[%s], [%s]=[%s], [%s]=[%s]\n", (uint8_t *)&v31, 0x58u);
        }
      }
      if (strcmp((const char *)(a1 + 236), v5)) {
        goto LABEL_45;
      }
      int v30 = *(unsigned __int8 *)(v7 + 156);
      long long v29 = (const char *)(v7 + 156);
      if (!v30) {
        goto LABEL_37;
      }
      long long v25 = (const char *)(a1 + 382);
      int v26 = v29;
    }
    if (strcmp(v25, v26)) {
      goto LABEL_45;
    }
LABEL_37:
    uint64_t v16 = (const char *)(a1 + 446);
LABEL_38:
    long long v22 = (const char *)(v6 + 156);
LABEL_39:
    if (!strcmp(v16, v22)) {
      return 1;
    }
LABEL_45:
    pthread_mutex_unlock(v10);
    return 0;
  }
  return result;
}

uint64_t DLFindWithCallIDAndLock(uint64_t *a1)
{
  uint64_t v1 = 2148270081;
  if (a1)
  {
    uint64_t Handle = FindHandle();
    *a1 = Handle;
    if (Handle == 0xFFFFFFFFLL) {
      return 2148270102;
    }
    else {
      return 0;
    }
  }
  return v1;
}

uint64_t MatchCallIDAndLock(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (pthread_mutex_t *)(result + 560);
    pthread_mutex_lock((pthread_mutex_t *)(result + 560));
    if (*(_DWORD *)(v3 + 1004) || *(_DWORD *)(v3 + 4) != a2)
    {
      pthread_mutex_unlock(v4);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t DLFindActiveDialogs(_DWORD *a1, void *a2)
{
  uint64_t v2 = 2148270081;
  if (a1 && a2)
  {
    *a1 = 0;
    *a2 = 0;
    FindHandle();
    return 0;
  }
  return v2;
}

uint64_t FindActive(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (a1[1] != *(_DWORD *)(a2 + 16) && (*a1 & 0xFFFFFFFE) == 2)
  {
    uint64_t v5 = malloc_type_realloc(**(void ***)(a2 + 24), 8 * **(int **)(a2 + 8) + 8, 0x2004093837F09uLL);
    if (v5)
    {
      **(void **)(a2 + 24) = v5;
      uint64_t v6 = **(void **)(a2 + 24);
      uint64_t v7 = *(int **)(a2 + 8);
      uint64_t v8 = *v7;
      *uint64_t v7 = v8 + 1;
      *(void *)(v6 + 8 * v8) = a3;
    }
  }
  return 0;
}

uint64_t DLCountActiveDialogs(_DWORD *a1)
{
  if (!a1) {
    return 2148270081;
  }
  *a1 = 0;
  FindHandle();
  return 0;
}

uint64_t CountActive(_DWORD *a1, _DWORD *a2)
{
  if ((*a1 & 0xFFFFFFFE) == 2) {
    ++*a2;
  }
  return 0;
}

uint64_t DLUnlock()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2148270082;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v0 + 560));
  CheckOutHandleDebug();
  return 0;
}

uint64_t DLSetConfIndex(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148270082;
  }
  *(_DWORD *)(v3 + 8) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t DLGetData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148270082;
  }
  uint64_t v4 = v3;
  *(_DWORD *)a2 = *(_DWORD *)(v3 + 12);
  *(void *)(a2 + 4) = *(void *)(v3 + 4);
  *(void *)(a2 + 16) = *(void *)(v3 + 16);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(v3 + 32);
  long long v5 = *(_OWORD *)(v3 + 36);
  long long v6 = *(_OWORD *)(v3 + 52);
  *(void *)(a2 + 60) = *(void *)(v3 + 68);
  *(_OWORD *)(a2 + 44) = v6;
  *(_OWORD *)(a2 + 28) = v5;
  long long v7 = *(_OWORD *)(v3 + 76);
  long long v8 = *(_OWORD *)(v3 + 92);
  *(void *)(a2 + 100) = *(void *)(v3 + 108);
  *(_OWORD *)(a2 + 84) = v8;
  *(_OWORD *)(a2 + 68) = v7;
  long long v9 = *(_OWORD *)(v3 + 116);
  long long v10 = *(_OWORD *)(v3 + 132);
  *(void *)(a2 + 140) = *(void *)(v3 + 148);
  *(_OWORD *)(a2 + 124) = v10;
  *(_OWORD *)(a2 + 108) = v9;
  long long v11 = *(_OWORD *)(v3 + 156);
  long long v12 = *(_OWORD *)(v3 + 172);
  *(void *)(a2 + 180) = *(void *)(v3 + 188);
  *(_OWORD *)(a2 + 164) = v12;
  *(_OWORD *)(a2 + 148) = v11;
  long long v13 = *(_OWORD *)(v3 + 196);
  long long v14 = *(_OWORD *)(v3 + 212);
  *(void *)(a2 + 220) = *(void *)(v3 + 228);
  *(_OWORD *)(a2 + 204) = v14;
  *(_OWORD *)(a2 + 188) = v13;
  strncpy((char *)(a2 + 228), (const char *)(v3 + 236), 0x3CuLL);
  strncpy((char *)(a2 + 288), (const char *)(v4 + 296), 0x2BuLL);
  strncpy((char *)(a2 + 331), (const char *)(v4 + 339), 0x2BuLL);
  strncpy((char *)(a2 + 374), (const char *)(v4 + 382), 0x40uLL);
  strncpy((char *)(a2 + 438), (const char *)(v4 + 446), 0x40uLL);
  strncpy((char *)(a2 + 502), (const char *)(v4 + 510), 4uLL);
  strncpy((char *)(a2 + 506), (const char *)(v4 + 514), 0x2BuLL);
  long long v15 = *(_OWORD *)(v4 + 624);
  long long v16 = *(_OWORD *)(v4 + 656);
  *(_OWORD *)(a2 + 568) = *(_OWORD *)(v4 + 640);
  *(_OWORD *)(a2 + 584) = v16;
  *(_OWORD *)(a2 + 552) = v15;
  long long v17 = *(_OWORD *)(v4 + 672);
  long long v18 = *(_OWORD *)(v4 + 688);
  long long v19 = *(_OWORD *)(v4 + 720);
  *(_OWORD *)(a2 + 632) = *(_OWORD *)(v4 + 704);
  *(_OWORD *)(a2 + 648) = v19;
  *(_OWORD *)(a2 + 600) = v17;
  *(_OWORD *)(a2 + 616) = v18;
  long long v20 = *(_OWORD *)(v4 + 736);
  long long v21 = *(_OWORD *)(v4 + 768);
  *(_OWORD *)(a2 + 680) = *(_OWORD *)(v4 + 752);
  *(_OWORD *)(a2 + 696) = v21;
  *(_OWORD *)(a2 + 664) = v20;
  long long v22 = *(_OWORD *)(v4 + 784);
  long long v23 = *(_OWORD *)(v4 + 800);
  long long v24 = *(_OWORD *)(v4 + 832);
  *(_OWORD *)(a2 + 744) = *(_OWORD *)(v4 + 816);
  *(_OWORD *)(a2 + 760) = v24;
  *(_OWORD *)(a2 + 712) = v22;
  *(_OWORD *)(a2 + 728) = v23;
  long long v25 = *(_OWORD *)(v4 + 848);
  long long v26 = *(_OWORD *)(v4 + 880);
  *(_OWORD *)(a2 + 792) = *(_OWORD *)(v4 + 864);
  *(_OWORD *)(a2 + 808) = v26;
  *(_OWORD *)(a2 + 776) = v25;
  long long v27 = *(_OWORD *)(v4 + 896);
  long long v28 = *(_OWORD *)(v4 + 912);
  long long v29 = *(_OWORD *)(v4 + 944);
  *(_OWORD *)(a2 + 856) = *(_OWORD *)(v4 + 928);
  *(_OWORD *)(a2 + 872) = v29;
  *(_OWORD *)(a2 + 824) = v27;
  *(_OWORD *)(a2 + 840) = v28;
  *(_DWORD *)(a2 + 888) = *(_DWORD *)(v4 + 960);
  *(_DWORD *)(a2 + 892) = *(_DWORD *)(v4 + 984);
  *(void *)(a2 + 896) = *(void *)(v4 + 992);
  CheckOutHandleDebug();
  return 0;
}

uint64_t DLSetState(uint64_t a1, int a2)
{
  uint64_t v3 = (_DWORD *)CheckInHandleDebug();
  if (!v3) {
    return 2148270082;
  }
  *uint64_t v3 = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t DLGetState(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 2148270081;
  if (a2)
  {
    uint64_t v4 = (_DWORD *)CheckInHandleDebug();
    if (v4)
    {
      *a2 = *v4;
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2148270082;
    }
  }
  return v2;
}

uint64_t DLGetCallID(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 2148270081;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *a2 = *(_DWORD *)(v4 + 4);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2148270082;
    }
  }
  return v2;
}

uint64_t DLSetAck(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2148270081;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *(void *)(v4 + 976) = a2;
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2148270082;
    }
  }
  return v2;
}

uint64_t DLGetAck(uint64_t a1, void *a2)
{
  uint64_t v2 = 2148270081;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *a2 = *(void *)(v4 + 976);
      CheckOutHandleDebug();
      return 0;
    }
    else
    {
      return 2148270082;
    }
  }
  return v2;
}

uint64_t DLPutMsg(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 2148270081;
  if (a2)
  {
    uint64_t v6 = CheckInHandleDebug();
    if (v6)
    {
      uint64_t v3 = MQPut(*(void *)(v6 + 968), a2, a3);
      CheckOutHandleDebug();
    }
    else
    {
      return 2148270082;
    }
  }
  return v3;
}

uint64_t DLGetMsg(uint64_t a1, void *a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 2148270081;
  if (!a2) {
    return v6;
  }
  uint64_t v12 = CheckInHandleDebug();
  if (!v12) {
    return 2148270082;
  }
  if (a5)
  {
    long long v13 = *(uint64_t **)(a5 + 272);
    if (v13) {
      a6 = *v13;
    }
  }
  uint64_t v14 = MQGet(*(void *)(v12 + 968), a2, a3, a4, a6);
  CheckOutHandleDebug();
  return v14;
}

uint64_t DLIncreaseLocalSeq(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148270082;
  }
  uint64_t v4 = v3;
  long long v5 = (pthread_mutex_t *)(v3 + 560);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 560));
  uint64_t v6 = *(void *)(v4 + 16) + 1;
  *(void *)(v4 + 16) = v6;
  *a2 = v6;
  pthread_mutex_unlock(v5);
  CheckOutHandleDebug();
  return 0;
}

uint64_t DLSetMediaType(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148270082;
  }
  *(void *)(v3 + 992) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t DLSetDoingKeyExchange(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148270082;
  }
  *(_DWORD *)(v3 + 1000) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t DLGetDoingKeyExchange(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148270082;
  }
  *a2 = *(_DWORD *)(v3 + 1000);
  CheckOutHandleDebug();
  return 0;
}

uint64_t DLGetConfIndex(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148270082;
  }
  *a2 = *(_DWORD *)(v3 + 8);
  CheckOutHandleDebug();
  return 0;
}

uint64_t DLGetSIPPing(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148270082;
  }
  *a2 = *(_DWORD *)(v3 + 1008);
  CheckOutHandleDebug();
  return 0;
}

uint64_t VCCaptionsTranscriptionBlobReadFrom(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_53;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_55:
        uint64_t v42 = 20;
        goto LABEL_60;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v19 = 0;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_59:
        uint64_t v42 = 16;
LABEL_60:
        *(_DWORD *)&a1[v42] = v19;
        goto LABEL_70;
      case 3u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        a1[28] |= 2u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                uint64_t v31 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v31 = 0;
        }
LABEL_64:
        BOOL v43 = v31 != 0;
        uint64_t v44 = 25;
        goto LABEL_69;
      case 4u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        a1[28] |= 1u;
        while (2)
        {
          uint64_t v38 = *v3;
          unint64_t v39 = *(void *)(a2 + v38);
          if (v39 == -1 || v39 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v38) = v39 + 1;
            v37 |= (unint64_t)(v40 & 0x7F) << v35;
            if (v40 < 0)
            {
              v35 += 7;
              BOOL v14 = v36++ >= 9;
              if (v14)
              {
                uint64_t v37 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v37 = 0;
        }
LABEL_68:
        BOOL v43 = v37 != 0;
        uint64_t v44 = 24;
LABEL_69:
        a1[v44] = v43;
        goto LABEL_70;
      case 5u:
        __int16 v41 = objc_alloc_init(VCCaptionsSegmentBlob);
        [a1 addSegments:v41];

        if PBReaderPlaceMark() && (VCCaptionsSegmentBlobReadFrom((uint64_t)v41, a2))
        {
          PBReaderRecallMark();
LABEL_70:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_70;
    }
  }
}

CFTypeRef _VCConnectionManagerLegacy_CopyConnection(uint64_t a1, uint64_t a2, char *a3)
{
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 104));
  uint64_t v6 = *(const void **)(a1 + 304);
  if (!v6) {
    goto LABEL_8;
  }
  if ((VCConnection_MatchesSourceDestinationInfo(*(void *)(a1 + 304), a2) & 1) == 0)
  {
    uint64_t v6 = *(const void **)(a1 + 312);
    if (v6 && VCConnection_MatchesSourceDestinationInfo(*(void *)(a1 + 312), a2))
    {
      char v7 = 0;
      goto LABEL_7;
    }
LABEL_8:
    CFTypeRef v8 = 0;
    goto LABEL_9;
  }
  char v7 = 1;
LABEL_7:
  *a3 = v7;
  CFTypeRef v8 = CFRetain(v6);
  VCConnection_SourceDestinationInfo((uint64_t)v6, a2);
LABEL_9:
  pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 104));
  return v8;
}

void _VCConnectionManagerLegacy_IsSourceOnCellularIPv6(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  *a3 = 0;
  *a4 = 0;
  if (*(_DWORD *)a2 == 1 && (*(unsigned char *)(a2 + 8) & 4) != 0)
  {
    *a3 = 1;
    if ((*(unsigned char *)(a2 + 8) & 4) != 0) {
      *a4 = 1;
    }
  }
}

CFTypeRef _VCConnectionManagerLegacy_CopyPrimaryConnection(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(a1 + 304);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void _VCConnectionManagerLegacy_SetPrimaryConnection(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v2 = *(CFTypeRef *)(a1 + 304);
  if (v2 != cf)
  {
    *(void *)(a1 + 304) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

uint64_t MQCreateHandle(uint64_t *a1)
{
  CFTypeRef v2 = (char *)malloc_type_calloc(1uLL, 0x118uLL, 0x102004088A06470uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    *(void *)CFTypeRef v2 = 0;
    uint64_t v4 = (pthread_mutex_t *)(v2 + 8);
    pthread_mutex_init((pthread_mutex_t *)(v2 + 8), 0);
    pthread_cond_init((pthread_cond_t *)(v3 + 72), 0);
    uint64_t Handle = CreateHandle();
    uint64_t v6 = 0;
    *a1 = Handle;
    if (Handle == 0xFFFFFFFFLL)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          MQCreateHandle_cold_2();
        }
      }
      pthread_mutex_destroy(v4);
      pthread_cond_destroy((pthread_cond_t *)(v3 + 72));
      free(v3);
      return 2148204549;
    }
  }
  else
  {
    uint64_t v6 = 2148204547;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        MQCreateHandle_cold_1();
      }
    }
  }
  return v6;
}

uint64_t MQCloseHandle()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2148204546;
  }
  uint64_t v1 = v0;
  CFTypeRef v2 = (pthread_mutex_t *)(v0 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(v0 + 8));
  *(_DWORD *)(v1 + 4) = -1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 72));
  pthread_mutex_unlock(v2);
  CheckOutHandleDebug();
  pthread_cond_destroy((pthread_cond_t *)(v1 + 72));
  pthread_mutex_destroy(v2);
  for (uint64_t i = 120; i != 200; i += 8)
  {
    uint64_t v4 = *(void **)(v1 + i);
    if (v4) {
      FreeSipMsg(v4);
    }
  }
  free((void *)v1);
  return 0;
}

uint64_t MQPut(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 2148204546;
  uint64_t v6 = CheckInHandleDebug();
  if (!v6) {
    return v5;
  }
  uint64_t v7 = v6;
  CFTypeRef v8 = (pthread_mutex_t *)(v6 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 8));
  if ((*(_DWORD *)(v7 + 4) & 0x80000000) != 0)
  {
    pthread_mutex_unlock(v8);
    CheckOutHandleDebug();
    return 2148204562;
  }
  double v9 = micro();
  int v10 = *(_DWORD *)v7;
  int v11 = *(_DWORD *)(v7 + 4);
  if (v11 < 1) {
    goto LABEL_14;
  }
  double v12 = v9;
  for (int i = 0; i != v11; ++i)
  {
    while (v12 - *(double *)(v7 + 8 * ((v10 + i) % 10) + 200) > 10.0)
    {
      MQDeleteAt((_DWORD *)v7, i, 1);
      int v10 = *(_DWORD *)v7;
      int v11 = *(_DWORD *)(v7 + 4);
      if (!v11) {
        goto LABEL_14;
      }
    }
  }
  if (v11 < 10)
  {
LABEL_14:
    uint64_t v16 = v7 + 8 * ((v10 + v11) % 10);
    *(void *)(v16 + 120) = a2;
    *(double *)(v16 + 200) = micro();
    if (a3)
    {
      char v17 = *(char **)(a2 + 992);
      if (v17) {
        goto LABEL_18;
      }
      unsigned int v18 = (char *)malloc_type_calloc(0xAuLL, 8uLL, 0x2004093837F09uLL);
      if (v18)
      {
        char v17 = v18;
        *(void *)(a2 + 992) = v18;
LABEL_18:
        uint64_t v19 = 0;
        while (*(void *)&v17[v19])
        {
          v19 += 8;
          if (v19 == 80) {
            goto LABEL_24;
          }
        }
        *(void *)&v17[v19] = pthread_self();
        goto LABEL_24;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        char v22 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v23 = 136315650;
          uint64_t v24 = v21;
          __int16 v25 = 2080;
          uint64_t v26 = "MQPut";
          __int16 v27 = 1024;
          int v28 = 191;
          _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d MQIgnore: out of memory", (uint8_t *)&v23, 0x1Cu);
        }
      }
    }
LABEL_24:
    ++*(_DWORD *)(v7 + 4);
    pthread_cond_broadcast((pthread_cond_t *)(v7 + 72));
    pthread_mutex_unlock(v8);
    CheckOutHandleDebug();
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      uint64_t v24 = v14;
      __int16 v25 = 2080;
      uint64_t v26 = "MQPut";
      __int16 v27 = 1024;
      int v28 = 173;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Message Queue is full", (uint8_t *)&v23, 0x1Cu);
    }
  }
  pthread_mutex_unlock(v8);
  CheckOutHandleDebug();
  return 2148204573;
}

uint64_t MQGet(uint64_t a1, void *a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 2148204545;
  if (a2)
  {
    *a2 = 0;
    uint64_t v10 = CheckInHandleDebug();
    if (v10)
    {
      int v11 = (int *)v10;
      __int16 v41 = (pthread_mutex_t *)(v10 + 8);
      pthread_mutex_lock((pthread_mutex_t *)(v10 + 8));
      double v12 = micro();
      v42.tv_seCC_SHA1_CTX c = 0xAAAAAAAAAAAAAAAALL;
      v42.tv_nseCC_SHA1_CTX c = 0xAAAAAAAAAAAAAAAALL;
      double v13 = micro();
      int v14 = v11[1];
      if ((v14 & 0x80000000) == 0)
      {
        double v15 = v13;
        unint64_t v39 = (pthread_cond_t *)(v11 + 18);
        do
        {
          unint64_t v40 = a3;
          if (v14)
          {
            for (int i = 0; i != v11[1]; ++i)
            {
              char v17 = &v11[2 * ((*v11 + i) % 10)];
              uint64_t v20 = *((void *)v17 + 15);
              uint64_t v19 = v17 + 30;
              uint64_t v18 = v20;
              uint64_t v21 = *(void *)(v20 + 992);
              pthread_t v22 = pthread_self();
              if (v21)
              {
                uint64_t v23 = 0;
                while (v22 != *(pthread_t *)(v21 + v23))
                {
                  v23 += 8;
                  if (v23 == 80) {
                    goto LABEL_11;
                  }
                }
              }
              else
              {
LABEL_11:
                if (*(_DWORD *)v18 == 1
                  || (uint64_t v24 = *(uint64_t **)(v18 + 272)) != 0
                  && ((int v25 = *((_DWORD *)v24 + 2), a4 == 1) && v25 == 2
                   || ((v26 = *v24, a5 != -1) ? (BOOL v27 = v26 == a5) : (BOOL v27 = 1),
                       !v27 ? (int v28 = 0) : (int v28 = 1),
                       v25 == a4 ? (BOOL v29 = v28 == 0) : (BOOL v29 = 1),
                       !v29)))
                {
                  *a2 = *v19;
                  if (i)
                  {
                    MQDeleteAt(v11, i, 0);
                    uint64_t v5 = 0;
                  }
                  else
                  {
                    uint64_t v5 = 0;
                    uint64_t v36 = *v11;
                    int v37 = ((int)v36 + 1) % 10;
                    *(void *)&v11[2 * v36 + 30] = 0;
                    LODWORD(v36) = v11[1] - 1;
                    *int v11 = v37;
                    v11[1] = v36;
                  }
                  goto LABEL_47;
                }
              }
            }
          }
          if (v40 == 0xFFFFFFFF)
          {
            int v30 = pthread_cond_wait(v39, v41);
            a3 = 0xFFFFFFFFLL;
          }
          else
          {
            double v31 = (v15 - v12) * 1000.0;
            if (v40 >= (unint64_t)v31) {
              a3 = v40 - (unint64_t)v31;
            }
            else {
              a3 = 0;
            }
            v42.tv_seCC_SHA1_CTX c = a3 / 0x3E8;
            v42.tv_nseCC_SHA1_CTX c = 1000000 * (a3 % 0x3E8);
            int v30 = pthread_cond_timedwait_relative_np(v39, v41, &v42);
            double v12 = v15;
          }
          if (v30 == 60)
          {
            uint64_t v5 = 2148204567;
            goto LABEL_47;
          }
          v42.tv_seCC_SHA1_CTX c = 0xAAAAAAAAAAAAAAAALL;
          v42.tv_nseCC_SHA1_CTX c = 0xAAAAAAAAAAAAAAAALL;
          double v15 = micro();
          int v14 = v11[1];
        }
        while ((v14 & 0x80000000) == 0);
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 5)
      {
        uint64_t v5 = 2148204574;
      }
      else
      {
        uint64_t v32 = VRTraceErrorLogLevelToCSTR();
        unint64_t v33 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v44 = v32;
          __int16 v45 = 2080;
          uint64_t v46 = "MQGet";
          __int16 v47 = 1024;
          int v48 = 291;
          __int16 v49 = 1024;
          int v50 = 291;
          _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/MsgQue.c:%d: Message Queue Closed during MQGet", buf, 0x22u);
        }
        uint64_t v5 = 2148204574;
      }
LABEL_47:
      pthread_mutex_unlock(v41);
      CheckOutHandleDebug();
    }
    else
    {
      return 2148204546;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v34 = VRTraceErrorLogLevelToCSTR();
    char v35 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v44 = v34;
      __int16 v45 = 2080;
      uint64_t v46 = "MQGet";
      __int16 v47 = 1024;
      int v48 = 271;
      __int16 v49 = 1024;
      int v50 = 271;
      _os_log_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/MsgQue.c:%d: ppSipMsg is NULL", buf, 0x22u);
    }
  }
  return v5;
}

void MQDeleteAt(_DWORD *a1, int a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2 < 0 || (int v5 = a1[1], v5 <= a2))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      double v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v13 = a1[1];
        int v14 = 136316418;
        uint64_t v15 = v11;
        __int16 v16 = 2080;
        char v17 = "MQDeleteAt";
        __int16 v18 = 1024;
        int v19 = 94;
        __int16 v20 = 2048;
        uint64_t v21 = a1;
        __int16 v22 = 1024;
        int v23 = v13;
        __int16 v24 = 1024;
        int v25 = a2;
        _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d Trying to remove an invalid element from a message queue. pMsgQue=%p iAvail=%d nth=%d", (uint8_t *)&v14, 0x32u);
      }
    }
  }
  else
  {
    if (a3)
    {
      FreeSipMsg(*(void **)&a1[2 * ((*a1 + a2) % 10) + 30]);
      int v5 = a1[1];
    }
    int v6 = *a1;
    if (a2 + 1 < v5)
    {
      int v7 = v6 + a2;
      int v8 = ~a2 + v5;
      do
      {
        int v9 = v7 % 10;
        *(void *)&a1[2 * v9 + 30] = *(void *)&a1[2 * (++v7 % 10) + 30];
        *(void *)&a1[2 * v9 + 50] = *(void *)&a1[2 * (v7 % 10) + 50];
        --v8;
      }
      while (v8);
    }
    int v10 = v5 - 1;
    a1[1] = v10;
    *(void *)&a1[2 * ((v6 + v10) % 10) + 30] = 0;
  }
}

uint64_t VCRateControlAlgorithmLowLatencyNOWRDPriv_ResetRampingStatus(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 1076) = 0;
    *(_DWORD *)(result + 1080) = 0;
  }
  return result;
}

void VCRateControlAlgorithmLowLatencyNOWRDPriv_Configure(uint64_t a1, const void *a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      memcpy((void *)(a1 + 40), a2, 0x3F0uLL);
      VCRateControlAlgorithmLowLatencyNOWRDPriv_SetRateChangeCounter(a1);
      *(unsigned char *)(a1 + 1153) = 0;
      *(void *)(a1 + 4992) = 0;
      *(void *)(a1 + 5040) = *(void *)(a1 + 760);
      VCRateControlAlgorithmBasePriv_ResetLossEventBuffer(a1);
      if (a3)
      {
        *(_DWORD *)(a1 + 1072) = 1;
        *(_DWORD *)(a1 + 1084) = *(_DWORD *)(a1 + 56);
      }
      int v5 = *(_DWORD *)(a1 + 1084);
      if (v5 >= *(_DWORD *)(a1 + 60)) {
        int v5 = *(_DWORD *)(a1 + 60);
      }
      if (v5 <= *(_DWORD *)(a1 + 64)) {
        int v5 = *(_DWORD *)(a1 + 64);
      }
      *(_DWORD *)(a1 + 1084) = v5;
      *(_DWORD *)(a1 + 1104) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 1084));
      VCRateControlMediaController_SetMinTargetBitrate(*(void *)(a1 + 1048), *(_DWORD *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 64)));
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        int v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v14 = *(_DWORD *)(a1 + 1104);
          uint64_t v15 = *(void *)(a1 + 48);
          int v16 = *(_DWORD *)(v15 + 4 * *(int *)(a1 + 64));
          int v17 = *(_DWORD *)(v15 + 4 * *(int *)(a1 + 60));
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v19 = v12;
          __int16 v20 = 2080;
          uint64_t v21 = "VCRateControlAlgorithmLowLatencyNOWRDPriv_Configure";
          __int16 v22 = 1024;
          int v23 = 148;
          __int16 v24 = 1024;
          int v25 = v14;
          __int16 v26 = 1024;
          int v27 = v16;
          __int16 v28 = 1024;
          int v29 = v17;
          _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Configuring VCRateControl algorithm with targetBitrate=%d, minBitrate=%d, maxBitrate=%d", buf, 0x2Eu);
        }
      }
      VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "Configure with targetBitrate=%d, minBitrate=%d, maxBitrate=%d", v6, v7, v8, v9, v10, v11, *(_DWORD *)(a1 + 1104));
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCRateControlAlgorithmLowLatencyNOWRDPriv_Configure_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCRateControlAlgorithmLowLatencyNOWRDPriv_Configure_cold_1();
    }
  }
}

BOOL _VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a2 == 11)
  {
    *(_DWORD *)(a1 + 5256) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 5264) = *(_DWORD *)(a2 + 84);
    unint64_t v15 = *(void *)(a2 + 40);
    if (v15)
    {
      *(_DWORD *)(a1 + 5252) = v15 / *(unsigned int *)(a1 + 5140);
      *(_DWORD *)(a1 + 5236) = *(void *)(a2 + 72);
      LODWORD(a9) = *(_DWORD *)(a2 + 64);
      a10 = 1000.0;
      a9 = (double)*(unint64_t *)&a9 / 1000.0;
      *(double *)(a1 + 5240) = a9;
    }
    if (VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampDownDueToNWConnection(a1, a9, a10, a11, a2, a3, a4, a5, a6, a7, a8))
    {
      if (*(_DWORD *)(a1 + 1072) && *(double *)(a1 + 1128) > 0.0)
      {
        *(_DWORD *)(a1 + 1084) = VCRateControlAlgorithmLowLatencyNOWRDPriv_RampDownTierDueToNWConnection(a1);
        VCRateControlAlgorithmBasePriv_StateChange(a1, 3);
      }
    }
    else if (VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampUpDueToNWConnection(a1, v16, v17, v18))
    {
      *(unsigned char *)(a1 + 5260) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 5260) = 1;
    }
    *(_DWORD *)(a1 + 1104) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 1084));
    return 1;
  }
  if (*(_DWORD *)a2 == 2)
  {
    BOOL result = VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    if (!result) {
      return result;
    }
    switch(*(_DWORD *)(a1 + 1072))
    {
      case 0:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v13 = VRTraceErrorLogLevelToCSTR();
          int v14 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            uint64_t v62 = v13;
            __int16 v63 = 2080;
            long long v64 = "_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControlWithVCRCStatistics";
            __int16 v65 = 1024;
            int v66 = 209;
            _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d VCRateControl is paused", buf, 0x1Cu);
          }
        }
        goto LABEL_38;
      case 1:
        if (VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampDown(a1)) {
          goto LABEL_30;
        }
        if (VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampUp(a1))
        {
          *(_DWORD *)(a1 + 1084) = _VCRateControlAlgorithmLowLatencyNOWRD_RampUpTier((_DWORD *)a1);
          if (*(_DWORD *)(a1 + 1084) == *(_DWORD *)(a1 + 60)) {
            goto LABEL_32;
          }
        }
        goto LABEL_38;
      case 2:
        if (VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampDown(a1))
        {
LABEL_30:
          int v19 = _VCRateControlAlgorithmLowLatencyNOWRD_RampDownTier(a1);
          goto LABEL_31;
        }
        if (VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampUp(a1))
        {
          int v19 = _VCRateControlAlgorithmLowLatencyNOWRD_RampUpTier((_DWORD *)a1);
LABEL_31:
          *(_DWORD *)(a1 + 1084) = v19;
LABEL_32:
          uint64_t v20 = a1;
          int v21 = 3;
          goto LABEL_37;
        }
LABEL_38:
        *(_DWORD *)(a1 + 1104) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 1084));
        if (*(unsigned char *)(a1 + 5160))
        {
          int v22 = *(_DWORD *)(a1 + 1120);
          *(_DWORD *)(a1 + 1120) = v22 + 1;
          if ((v22 & 0xF) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v23 = VRTraceErrorLogLevelToCSTR();
            __int16 v24 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v60 = *(void *)(a1 + 1128);
              int v59 = *(unsigned __int16 *)(a1 + 5220);
              uint64_t v58 = *(void *)(a1 + 2888);
              uint64_t v57 = *(void *)(a1 + 2896);
              uint64_t v56 = *(void *)(a1 + 2904);
              uint64_t v55 = *(void *)(a1 + 2912);
              if (*(_DWORD *)(a1 + 1076)) {
                int v25 = 88;
              }
              else {
                int v25 = 79;
              }
              int v54 = v25;
              int v53 = (int)(*(double *)(a1 + 5104) * 1000.0);
              double v26 = *(double *)(a1 + 5024);
              double v27 = v26 * 100.0;
              LODWORD(v26) = *(_DWORD *)(a1 + 5224);
              double v28 = (double)*(unint64_t *)&v26;
              int v52 = *(_DWORD *)(a1 + 1200);
              int v51 = *(_DWORD *)(a1 + 5016);
              unsigned int v50 = *(_DWORD *)(a1 + 5228) / 0x3E8u;
              unsigned int v48 = *(_DWORD *)(a1 + 1104) / 0x3E8u;
              int v49 = (unsigned __int16)*(_DWORD *)(a1 + 1076);
              int v47 = *(unsigned __int16 *)(a1 + 1080);
              int v46 = *(_DWORD *)(a1 + 1116);
              int v45 = *(_DWORD *)(a1 + 5248);
              unsigned int v44 = (*(double *)(a1 + 5240) * 1000.0);
              unsigned int v29 = *(_DWORD *)(a1 + 5236) / 0x3E8u;
              unsigned int v30 = VCRateControlMediaController_AudioSendingBitrate(*(void *)(a1 + 1048)) / 0x3E8;
              int v31 = VCRateControlMediaController_AudioFractionTier(*(void *)(a1 + 1048));
              if (*(unsigned char *)(a1 + 5218)) {
                uint64_t v32 = "S";
              }
              else {
                uint64_t v32 = "U";
              }
              if (*(unsigned char *)(a1 + 1153))
              {
                unint64_t v33 = "<";
              }
              else
              {
                BOOL IsVideoStopped = VCRateControlMediaController_IsVideoStopped(*(unsigned char **)(a1 + 1048));
                unint64_t v33 = "-";
                if (IsVideoStopped) {
                  unint64_t v33 = "_";
                }
              }
              int v35 = *(_DWORD *)(a1 + 1072);
              *(_DWORD *)CMTime buf = 136322050;
              uint64_t v62 = v23;
              __int16 v63 = 2080;
              long long v64 = "_VCRateControlAlgorithmLowLatencyNOWRD_PrintRateControlInfoToLogDump";
              __int16 v65 = 1024;
              int v66 = 763;
              __int16 v67 = 2048;
              uint64_t v68 = v60;
              __int16 v69 = 1024;
              int v70 = v59;
              __int16 v71 = 2048;
              uint64_t v72 = v58;
              __int16 v73 = 2048;
              uint64_t v74 = v57;
              __int16 v75 = 2048;
              uint64_t v76 = v56;
              __int16 v77 = 2048;
              uint64_t v78 = v55;
              __int16 v79 = 1024;
              int v80 = v54;
              __int16 v81 = 1024;
              int v82 = v53;
              __int16 v83 = 2048;
              double v84 = v27;
              __int16 v85 = 2048;
              double v86 = v28;
              __int16 v87 = 1024;
              int v88 = v52;
              __int16 v89 = 1024;
              int v90 = v51;
              __int16 v91 = 1024;
              unsigned int v92 = v50;
              __int16 v93 = 1024;
              unsigned int v94 = v48;
              __int16 v95 = 1024;
              int v96 = v49;
              __int16 v97 = 1024;
              int v98 = v47;
              __int16 v99 = 1024;
              int v100 = v46;
              __int16 v101 = 1024;
              unsigned int v102 = v29;
              __int16 v103 = 1024;
              int v104 = v45;
              __int16 v105 = 1024;
              unsigned int v106 = v44;
              __int16 v107 = 1024;
              unsigned int v108 = v30;
              __int16 v109 = 1024;
              int v110 = v31;
              __int16 v111 = 2080;
              int v112 = v32;
              __int16 v113 = 2080;
              uint64_t v114 = v33;
              __int16 v115 = 1024;
              int v116 = v35;
              _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d %8.3f/%04X:\t%.4f\t%.4f\t%.4f\t%.4f %c\tRTT:%-4u\tPLR:%4.2f@%.1f\tRRx:%4u\tMBL:%d\t%4u/%4u\t  CS:%04X %04X %u BB: %3u\t%4u\t%3u\t%u\t%u\t UAT %s %s\t%d", buf, 0xD6u);
            }
          }
        }
        uint64_t v36 = *(void *)(a1 + 5144);
        if (v36)
        {
          uint64_t v37 = *(void *)(a1 + 1128);
          VCRateControlMediaController_AudioSendingBitrate(*(void *)(a1 + 1048));
          VCRateControlMediaController_AudioFractionTier(*(void *)(a1 + 1048));
          if (!*(unsigned char *)(a1 + 1153)) {
            VCRateControlMediaController_IsVideoStopped(*(unsigned char **)(a1 + 1048));
          }
          VRLogfilePrintWithTimestamp(v36, "%8.3f/%04X:\t%.4f\t%.4f\t%.4f\t%.4f %c\tRTT:%-4u\tPLR:%4.2f@%.1f\tRRx:%u\tMBL:%d %u\t%4u/%4u\t %4u:%4u/%4u  %4u:%4u/%4u  CS: %04X %04X %u BB: %3u\t%4u\t%3u\t%u\t%u\t UAT %s %s\t%d\t%d\t%d\t%d\t%.3f\t%.3f\t%u\t%u\n", v38, v39, v40, v41, v42, v43, v37);
        }
        *(_DWORD *)(a1 + 1076) = 0;
        *(_DWORD *)(a1 + 1080) = 0;
        break;
      case 3:
        *(_DWORD *)(a1 + 1076) |= 1u;
        if (VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampDown(a1)) {
          *(_DWORD *)(a1 + 1084) = _VCRateControlAlgorithmLowLatencyNOWRD_RampDownTier(a1);
        }
        if (*(double *)(a1 + 1128) - *(double *)(a1 + 1136) > *(double *)(a1 + 184))
        {
          uint64_t v20 = a1;
          int v21 = 2;
LABEL_37:
          VCRateControlAlgorithmBasePriv_StateChange(v20, v21);
        }
        goto LABEL_38;
      default:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl_cold_2();
          }
        }
        goto LABEL_38;
    }
    return 1;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl_cold_1();
  }
  return 0;
}

void VCRateControlAlgorithmLowLatencyNOWRDPriv_SetRateChangeCounter(uint64_t a1)
{
  if (a1)
  {
    ++*(_DWORD *)(a1 + 1116);
    *(unsigned char *)(a1 + 5218) = 0;
    if (*(_DWORD *)(a1 + 1072) != 1)
    {
      *(void *)(a1 + 1136) = *(void *)(a1 + 1128);
      *(void *)(a1 + 1208) = *(void *)(a1 + 1128);
    }
    if (*(_DWORD *)(a1 + 536) == 1) {
      *(double *)(a1 + 5352) = micro();
    }
  }
}

BOOL VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus_cold_1();
    }
    return 0;
  }
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus_cold_2();
    }
    return 0;
  }
  double v11 = *(double *)(a2 + 8);
  unsigned int v12 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 1200) = *(_DWORD *)(a2 + 32) / *(_DWORD *)(a1 + 5140);
  *(_WORD *)(a1 + 5220) = *(_DWORD *)(a2 + 68);
  *(_WORD *)(a1 + 5270) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 5104) = *(void *)(a2 + 104);
  double v14 = *(double *)(a2 + 88);
  *(double *)(a1 + 5024) = v14;
  *(_DWORD *)(a1 + 5016) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 5224) = *(_DWORD *)(a2 + 40);
  int v16 = *(_DWORD *)(a2 + 96);
  int v15 = *(_DWORD *)(a2 + 100);
  if (v16)
  {
    if (!*(_DWORD *)(a1 + 5228))
    {
      *(void *)(a1 + 5304) = *(void *)(a1 + 1128);
      double v14 = *(double *)(a1 + 1128) - *(double *)(a1 + 5312);
      a10 = 5.0;
      if (v14 > 5.0)
      {
        VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "Re-enter Initial Rampup!", a3, a4, a5, a6, a7, a8, v35);
        VCRateControlAlgorithmBasePriv_StateChange(a1, 1);
      }
    }
  }
  *(_DWORD *)(a1 + 5228) = v16;
  if (*(_DWORD *)(a1 + 5228))
  {
    double v14 = *(double *)(a1 + 1128);
    *(double *)(a1 + 5312) = v14;
  }
  *(_DWORD *)(a1 + 5232) = v15;
  LODWORD(v14) = *(_DWORD *)(a1 + 5232);
  LODWORD(a10) = *(_DWORD *)(a1 + 1104);
  *(unsigned char *)(a1 + 1153) = *(double *)(a1 + 288) * (double)*(unint64_t *)&a10 > (double)*(unint64_t *)&v14;
  if (!*(unsigned char *)(a1 + 1155))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 1155) = 1;
    *(_WORD *)(a1 + 5268) = v12;
    return result;
  }
  unsigned int v17 = *(unsigned __int16 *)(a1 + 5268);
  if (v12 == v17 || (unsigned __int16)(v12 - v17) >= 0x7FFFu)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      double v28 = *MEMORY[0x1E4F47A50];
      unsigned int v29 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v30) {
          return result;
        }
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v37 = v27;
        __int16 v38 = 2080;
        uint64_t v39 = "VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus";
        __int16 v40 = 1024;
        int v41 = 303;
        __int16 v42 = 1024;
        unsigned int v43 = v12;
        _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "VCRC [%s] %s:%d Duplicated feedback or out-of-order feedback messages! timestamp:0x%04X", buf, 0x22u);
      }
      else
      {
        BOOL result = os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus_cold_3();
      }
    }
    return 0;
  }
  if (v17 > v12) {
    ++*(_DWORD *)(a1 + 5276);
  }
  *(_WORD *)(a1 + 5268) = v12;
  *(double *)(a1 + 1128) = VCRateControlAlgorithmBasePriv_GetDoubleTimeFromTimestamp(v12, 0x400u, *(_DWORD *)(a1 + 5276));
  *(_DWORD *)(a1 + 5272) = VCRateControlAlgorithmBasePriv_GetTimestampFromMicroTime(v11);
  *(void *)(a1 + 2888) = v13;
  VCRateControlAlgorithmBasePriv_CalculateCongestionMetrics(a1, *(double *)(a1 + 2888), *(double *)(a1 + 1128));
  double v24 = *(double *)(a1 + 192);
  if (*(unsigned char *)(a1 + 415) && *(double *)(a1 + 4992) == 0.0)
  {
    double v25 = *(double *)(a1 + 5104);
    if (*(double *)(a1 + 456) * v25 < v24) {
      double v24 = *(double *)(a1 + 456) * v25;
    }
    if (*(double *)(a1 + 312) > v24) {
      double v24 = *(double *)(a1 + 312);
    }
  }
  __int16 v31 = *(_WORD *)(a1 + 5220);
  int v32 = *(unsigned __int16 *)(a1 + 5270);
  *(double *)(a1 + 5344) = v24;
  if (!*(unsigned char *)(a1 + 5218))
  {
    if (*(void *)(a1 + 1048))
    {
      if (*(_DWORD *)(a1 + 536) == 1) {
        __int16 v33 = vcvtd_n_s64_f64(*(double *)(a1 + 5352), 0xAuLL);
      }
      else {
        __int16 v33 = 0;
      }
      if (v32 && (unsigned __int16)(v31 - v33) <= 0x7FFEu)
      {
        *(void *)(a1 + 1192) = *(void *)(a1 + 1128);
        *(_DWORD *)(a1 + 5280) = 1;
        VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] VCRC rate stabilized (TxTS %u >= %u FB). Collecting VCRC samples...", v18, v19, v20, v21, v22, v23, *(_DWORD *)(a1 + 1116));
      }
    }
    else if (!*(_DWORD *)(a1 + 5280))
    {
      *(void *)(a1 + 1192) = *(void *)(a1 + 1128);
      *(_DWORD *)(a1 + 5280) = 1;
      VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] VCRC rate stabilized since no mediaController. Collecting VCRC samples...", v18, v19, v20, v21, v22, v23, *(_DWORD *)(a1 + 1116));
    }
    unsigned int v34 = *(_DWORD *)(a1 + 5280);
    if (v34)
    {
      if (*(double *)(a1 + 1128) - *(double *)(a1 + 1192) >= *(double *)(a1 + 312) && v34 >= *(_DWORD *)(a1 + 348))
      {
        VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] Collected %d VCRC samples (TxTS %u)", v18, v19, v20, v21, v22, v23, *(_DWORD *)(a1 + 1116));
        *(unsigned char *)(a1 + 5218) = 1;
        *(_DWORD *)(a1 + 5280) = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 5280) = v34 + 1;
      }
    }
  }
  if (*(_DWORD *)(a1 + 1072) != 1
    && *(unsigned char *)(a1 + 5336)
    && *(double *)(a1 + 1128) - *(double *)(a1 + 1136) > *(double *)(a1 + 192))
  {
    *(unsigned char *)(a1 + 5336) = 0;
  }
  if (*(unsigned char *)(a1 + 1144)
    && *(unsigned char *)(a1 + 5218)
    && *(double *)(a1 + 1128) - *(double *)(a1 + 1168) > *(double *)(a1 + 304))
  {
    *(unsigned char *)(a1 + 1144) = 0;
  }
  if (*(unsigned char *)(a1 + 410)) {
    VCRateControlAlgorithmBasePriv_CheckBandwidthOvershoot(a1, 1000 * *(_DWORD *)(a1 + 1200));
  }
  else {
    *(_DWORD *)(a1 + 1200) = 0;
  }
  return 1;
}

uint64_t VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampUp(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 5218) || !*(unsigned char *)(a1 + 420))
  {
    unsigned int v2 = 1;
  }
  else
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x2000u;
  }
  if (*(unsigned char *)(a1 + 5336))
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 2u;
  }
  if (VCRateControlAlgorithmBasePriv_RecentlyGoAboveRampUpBandwidth(a1))
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x100u;
  }
  if (!*(unsigned char *)(a1 + 2880))
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x80u;
  }
  if (*(unsigned char *)(a1 + 412) && *(unsigned char *)(a1 + 1153) && *(_DWORD *)(a1 + 1084) >= *(_DWORD *)(a1 + 116))
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 4u;
  }
  if (*(unsigned char *)(a1 + 2881))
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x40u;
  }
  if (*(double *)(a1 + 2888) > *(double *)(a1 + 200))
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 8u;
  }
  if (*(double *)(a1 + 2896) > *(double *)(a1 + 208))
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x10u;
  }
  if (*(double *)(a1 + 2912) > *(double *)(a1 + 216))
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x20u;
  }
  if (*(_DWORD *)(a1 + 1084) >= *(_DWORD *)(a1 + 60)
    || (unsigned int v10 = *(_DWORD *)(a1 + 5252)) != 0 && *(_DWORD *)(a1 + 1104) >= v10)
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x200u;
  }
  if (*(unsigned char *)(a1 + 420)
    && VCRateControlAlgorithmBasePriv_ShouldBlockRampUpDueToLossEventThreshold(a1, v3, v4, v5, v6, v7, v8, v9))
  {
    unsigned int v2 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x1000u;
  }
  if (*(unsigned char *)(a1 + 5260)) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampDown(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  *(_DWORD *)(a1 + 5340) = *(_DWORD *)(a1 + 352);
  if (!*(unsigned char *)(a1 + 2880)) {
    return 0;
  }
  BOOL v9 = VCRateControlAlgorithmBasePriv_KeepOvershootingRampDownBandwidth(a1);
  if (v9)
  {
    *(_DWORD *)(a1 + 1080) |= 0x10u;
    *(_DWORD *)(a1 + 5340) = 0;
    *(void *)(a1 + 2912) = 0;
  }
  if (*(_DWORD *)(a1 + 1072) != 1
    && *(double *)(a1 + 1128) - *(double *)(a1 + 2920) > *(double *)(a1 + 160)
    && *(_DWORD *)(a1 + 5228))
  {
    *(_DWORD *)(a1 + 1080) |= 1u;
    *(void *)(a1 + 2920) = *(void *)(a1 + 1128);
    *(void *)(a1 + 2912) = 0;
    BOOL v9 = 1;
  }
  if (*(unsigned char *)(a1 + 5336) || *(_DWORD *)(a1 + 1072) == 1)
  {
    int v10 = *(unsigned __int8 *)(a1 + 1153);
    uint64_t v11 = 88;
    if (!*(unsigned char *)(a1 + 1153)) {
      uint64_t v11 = 104;
    }
    double v12 = *(double *)(a1 + 40 + v11);
    double v13 = *(double *)(a1 + 2896);
    if (v13 > v12 && *(double *)(a1 + 5288) > v12 && *(double *)(a1 + 2904) > 0.0)
    {
      *(double *)(a1 + 5288) = v13;
      if (!v10 && *(double *)(a1 + 1128) - *(double *)(a1 + 5304) > *(double *)(a1 + 312))
      {
        *(_DWORD *)(a1 + 1080) |= 4u;
        *(void *)(a1 + 2912) = 0;
        BOOL v9 = 1;
      }
      goto LABEL_22;
    }
  }
  else
  {
    double v13 = 0.0;
  }
  *(double *)(a1 + 5288) = v13;
LABEL_22:
  if (*(double *)(a1 + 5288) > *(double *)(a1 + 2896)
    || ((*(unsigned char *)(a1 + 5336) || *(_DWORD *)(a1 + 1072) == 1) && !*(unsigned char *)(a1 + 1153)
      ? (double v14 = (double *)(a1 + 152))
      : (double v14 = (double *)(a1 + 136)),
        (double v15 = *(double *)(a1 + 2912), v15 <= *v14) || *(_DWORD *)(a1 + 1084) <= *(_DWORD *)(a1 + 64)))
  {
    int v16 = 0;
  }
  else
  {
    *(double *)(a1 + 2912) = v15 - *(double *)(a1 + 136);
    if (*(double *)(a1 + 2912) < 0.0) {
      *(void *)(a1 + 2912) = 0;
    }
    int v16 = 1;
  }
  if (*(double *)(a1 + 2888) <= 0.0)
  {
    double v17 = *(double *)(a1 + 5328);
  }
  else
  {
    double v17 = *(double *)(a1 + 1128);
    *(double *)(a1 + 5328) = v17;
  }
  if (v17 > 0.0)
  {
    double v18 = *(double *)(a1 + 1128) - v17;
    if (v18 > 1.0)
    {
      *(void *)(a1 + 2912) = 0;
      *(void *)(a1 + 5328) = *(void *)(a1 + 1128);
      VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "OWRD has been 0 for %f seconds, reset NOWRDAcc", v3, v4, v5, v6, v7, v8, SLOBYTE(v18));
    }
  }
  if (v16 && *(double *)(a1 + 1128) - *(double *)(a1 + 5304) > *(double *)(a1 + 312))
  {
    *(_DWORD *)(a1 + 1080) |= 8u;
    BOOL v9 = 1;
  }
  int v19 = *(_DWORD *)(a1 + 108);
  if (v19 >= 1 && *(_DWORD *)(a1 + 5016) > v19 && *(_DWORD *)(a1 + 5224))
  {
    *(_DWORD *)(a1 + 1080) |= 0x20u;
    *(void *)(a1 + 2912) = 0;
    BOOL v9 = 1;
    *(unsigned char *)(a1 + 5161) = 1;
  }
  if (*(unsigned char *)(a1 + 420)
    && VCRateControlAlgorithmBasePriv_ShouldRampDownDueToLossEvent(a1, v2, v3, v4, v5, v6, v7, v8))
  {
    *(_DWORD *)(a1 + 1080) |= 0x100u;
    *(void *)(a1 + 4984) = *(void *)(a1 + 1128);
    VCRateControlAlgorithmBasePriv_ResetLossEventBuffer(a1);
    *(void *)(a1 + 2912) = 0;
    return 1;
  }
  return v9;
}

uint64_t VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampUpDueToNWConnection(uint64_t a1, double a2, double a3, double a4)
{
  if (!a1) {
    return 1;
  }
  double v4 = *(double *)(a1 + 608);
  double v5 = *(double *)(a1 + 600);
  LODWORD(a4) = *(_DWORD *)(a1 + 1104);
  double v6 = 400000.0 / (double)*(unint64_t *)&a4;
  if (v5 <= v6) {
    double v5 = v6;
  }
  if (v4 >= v5) {
    double v4 = v5;
  }
  double v7 = v4 * 0.5;
  double v8 = *(double *)(a1 + 5240);
  BOOL v9 = v8 <= v7;
  if (v8 > v7) {
    *(_DWORD *)(a1 + 1076) |= 0x400u;
  }
  if ((*(_DWORD *)(a1 + 5256) & 0x80000000) != 0)
  {
    BOOL v9 = 0;
    *(_DWORD *)(a1 + 1076) |= 0x800u;
  }
  return v9;
}

uint64_t VCRateControlAlgorithmLowLatencyNOWRDPriv_ShouldRampDownDueToNWConnection(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a1) {
    return 0;
  }
  double v11 = *(double *)(a1 + 608);
  double v12 = *(double *)(a1 + 600);
  LODWORD(a4) = *(_DWORD *)(a1 + 1104);
  double v13 = 400000.0 / (double)*(unint64_t *)&a4;
  if (v12 <= v13) {
    double v12 = v13;
  }
  if (v11 >= v12) {
    double v11 = v12;
  }
  double v14 = *(double *)(a1 + 5240);
  BOOL v15 = v14 > v11;
  if (v14 > v11)
  {
    *(_DWORD *)(a1 + 1080) |= 0x40u;
    *(void *)(a1 + 2912) = 0;
    ++*(_DWORD *)(a1 + 5248);
  }
  int v16 = *(_DWORD *)(a1 + 5256);
  if (v16 < 0)
  {
    int v18 = *(_DWORD *)(a1 + 1084);
    if (v18 >= 1
      && (v16 == 0x80000000
       || (*(_DWORD *)(a1 + 1104) + v16) <= *(_DWORD *)(*(void *)(a1 + 48)
                                                                    + 4 * (v18 - 1))))
    {
      if (v18 > 0x29 || *(_DWORD *)(a1 + 5264) == 0)
      {
        *(_DWORD *)(a1 + 1080) |= 0x80u;
        *(void *)(a1 + 2912) = 0;
        return 1;
      }
      else
      {
        VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "Stop ramping down due to nw connection NACK [loss:%u]", a6, a7, a8, a9, a10, a11, *(_DWORD *)(a1 + 5264));
      }
    }
  }
  return v15;
}

uint64_t VCRateControlAlgorithmLowLatencyNOWRDPriv_RampDownTierDueToNWConnection(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  VCRateControlAlgorithmLowLatencyNOWRDPriv_SetRateChangeCounter(a1);
  *(unsigned char *)(a1 + 1144) = 1;
  *(void *)(a1 + 1168) = *(void *)(a1 + 1128);
  int v8 = *(_DWORD *)(a1 + 1084);
  int v9 = v8 - 1;
  if (v8 <= 0) {
    int v9 = 0;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 5236);
  uint64_t v11 = v9;
  while (v10 && *(_DWORD *)(*(void *)(a1 + 48) + 4 * v11) > v10)
  {
    if (--v11 <= *(int *)(a1 + 64))
    {
      LODWORD(v11) = *(_DWORD *)(a1 + 64);
      break;
    }
    if (*(unsigned char *)(a1 + 1153)) {
      break;
    }
  }
  int v12 = *(_DWORD *)(a1 + 64);
  if ((int)v11 <= v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v11;
  }
  if (v8 > (int)v13)
  {
    VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] Congestion due to nw connection!!! New bitrate down to %u", v2, v3, v4, v5, v6, v7, *(_DWORD *)(a1 + 1116));
    int v8 = *(_DWORD *)(a1 + 1084);
  }
  *(_DWORD *)(a1 + 1088) = v8;
  return v13;
}

BOOL VCRateControlAlgorithmLowLatencyNOWRDPriv_RampUpBlockedDueToUnstableOnly(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 1076) == 0x2000 && *(_DWORD *)(result + 1080) == 0;
  }
  return result;
}

uint64_t _VCRateControlAlgorithmLowLatencyNOWRD_RampDownTier(uint64_t a1)
{
  VCRateControlAlgorithmLowLatencyNOWRDPriv_SetRateChangeCounter(a1);
  *(unsigned char *)(a1 + 5336) = 0;
  *(unsigned char *)(a1 + 1144) = 1;
  *(void *)(a1 + 1168) = *(void *)(a1 + 1128);
  int v8 = *(_DWORD *)(a1 + 1084);
  int v9 = v8 - *(_DWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 1072) == 1) {
    int v9 = v9 - *(_DWORD *)(a1 + 104) - (v8 == *(_DWORD *)(a1 + 56));
  }
  if ((*(unsigned char *)(a1 + 1081) & 1) != 0 && *(double *)(a1 + 4992) > 0.0) {
    --v9;
  }
  int v10 = *(_DWORD *)(a1 + 64);
  if (v9 <= v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v8 > (int)v11)
  {
    VCRateControlAlgorithmBasePriv_LogToDumpFiles(a1, "[%u] Congestion!!! New bitrate down to %u", v2, v3, v4, v5, v6, v7, *(_DWORD *)(a1 + 1116));
    *(double *)(a1 + 5320) = micro();
    int v8 = *(_DWORD *)(a1 + 1084);
  }
  *(_DWORD *)(a1 + 1088) = v8;
  return v11;
}

uint64_t _VCRateControlAlgorithmLowLatencyNOWRD_RampUpTier(_DWORD *a1)
{
  VCRateControlAlgorithmLowLatencyNOWRDPriv_SetRateChangeCounter((uint64_t)a1);
  int v8 = a1[23] + a1[271];
  if (a1[268] == 1) {
    v8 += a1[25];
  }
  int v9 = a1[15];
  if (v8 >= v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v8;
  }
  a1[1250] = 0;
  VCRateControlAlgorithmBasePriv_LogToDumpFiles((uint64_t)a1, "[%u] Ramp up bitrate to %u", v2, v3, v4, v5, v6, v7, a1[279]);
  a1[272] = a1[271];
  return v10;
}

void _VCAudioCaptionsCoordinator_ReleaseSampleInfo(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2)
    {
      if (*(void *)(v2 + 8)) {
        VCAudioBufferList_Destroy((uint64_t *)(v2 + 8));
      }
      if (*(void *)v2) {
        CFRelease(*(CFTypeRef *)v2);
      }
      CFAllocatorRef v4 = *(const __CFAllocator **)(a1 + 400);
      CFAllocatorDeallocate(v4, (void *)v2);
    }
  }
}

void sub_1E207B3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E207B838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _VCAudioCaptionsCoordinator_PushAudioSamplesToRecognizer(void *a1, uint64_t a2)
{
  uint64_t Buffer = VCAudioCaptionsBufferInfo_GetBuffer(a2);
  [a1 pushAudioSamples:Buffer];
  Sampleint32_t Count = VCAudioBufferList_GetSampleCount(Buffer);

  return VCAudioBufferList_Shift(Buffer, SampleCount);
}

uint64_t _VCAudioCaptionsCoordinator_StartCaptioning(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 216));
  CFAllocatorRef v4 = *(void **)(a1 + 232);
  *(void *)&v17[0] = -1;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v17 + 8) = v5;
  *(_OWORD *)((char *)&v17[1] + 8) = v5;
  if (a2) {
    [a2 format];
  }
  else {
    memset(v17, 0, 40);
  }
  *(void *)(a1 + 208) = [a2 token];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 216));
  uint64_t v13 = 0;
  double v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  uint64_t v6 = [a2 token];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = ___VCAudioCaptionsCoordinator_StartCaptioning_block_invoke;
  v12[3] = &unk_1E6DB66E0;
  v12[4] = v4;
  v12[5] = a2;
  v12[6] = a1;
  v12[7] = &v13;
  [v4 start:v17 forToken:v6 withCompletionHandler:v12];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    int v8 = *MEMORY[0x1E4F47A50];
    int v9 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v19 = v7;
        __int16 v20 = 2080;
        uint64_t v21 = "_VCAudioCaptionsCoordinator_StartCaptioning";
        __int16 v22 = 1024;
        int v23 = 426;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Waiting for captions to start...", buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      _VCAudioCaptionsCoordinator_StartCaptioning_cold_1();
    }
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 224), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 216));
  *(void *)(a1 + 200) = 2;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 216));
  uint64_t v10 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1E207C674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _VCAudioCaptionsCoordinator_StopCaptioning(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  uint64_t v2 = *(void **)(a1 + 232);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = ___VCAudioCaptionsCoordinator_StopCaptioning_block_invoke;
  v8[3] = &unk_1E6DB6708;
  v8[4] = a1;
  void v8[5] = &v9;
  [v2 stopWithCompletionHandler:v8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    CFAllocatorRef v4 = *MEMORY[0x1E4F47A50];
    long long v5 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v14 = v3;
        __int16 v15 = 2080;
        char v16 = "_VCAudioCaptionsCoordinator_StopCaptioning";
        __int16 v17 = 1024;
        int v18 = 448;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Waiting for captions to stop...", buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      _VCAudioCaptionsCoordinator_StopCaptioning_cold_1();
    }
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 224), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 216));
  *(void *)(a1 + 200) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 216));
  uint64_t v6 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1E207C92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

BOOL _VCAudioCaptionsCoordinator_ShouldStopCaptioning(uint64_t a1, void *a2, char a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a3 < 0) {
    return 0;
  }
  *(void *)uint64_t v9 = -1;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v9[8] = v5;
  *(_OWORD *)&v9[24] = v5;
  if (a2)
  {
    [a2 format];
    double v6 = NAN;
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    double v6 = 0.0;
  }
  unsigned int v8 = (*(double *)(a1 + 384) * v6);
  return objc_msgSend(a2, "countOfLowPrioritySamples", *(_OWORD *)v9, *(void *)&v9[16], *(_OWORD *)&v9[24], v10) >= v8;
}

uint64_t _VCAudioCaptionsCoordinator_HandleIdleStateAudioSamples(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int Priority = VCAudioBufferList_GetPriority(a3);
  VCAudioCaptionsBufferInfoCollection_PushAudioSamples(*(void *)(a1 + 240), (uint64_t)a2, a3);
  if ((Priority & 0x80) != 0)
  {
    uint64_t Buffer = VCAudioCaptionsBufferInfo_GetBuffer((uint64_t)a2);
    Sampleint32_t Count = VCAudioBufferList_GetSampleCount(Buffer);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      uint64_t v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = [a2 token];
        uint64_t v15 = VCAudioCaptionsBufferInfo_GetBuffer((uint64_t)a2);
        int v17 = 136316674;
        uint64_t v18 = v12;
        __int16 v19 = 2080;
        __int16 v20 = "_VCAudioCaptionsCoordinator_HandleIdleStateAudioSamples";
        __int16 v21 = 1024;
        int v22 = 474;
        __int16 v23 = 2048;
        uint64_t v24 = v14;
        __int16 v25 = 1024;
        int v26 = SampleCount;
        __int16 v27 = 2048;
        double HostTime = VCAudioBufferList_GetHostTime(v15);
        __int16 v29 = 2048;
        double v30 = VCAudioBufferList_GetHostTime(a3);
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Will switch from idle to captioning. streamToken=%ld samplesToBackProcess=%d collectionHostTime=%f sampleHostTime=%f", (uint8_t *)&v17, 0x40u);
      }
    }
    return _VCAudioCaptionsCoordinator_StartCaptioning(a1, a2);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      unsigned int v8 = *MEMORY[0x1E4F47A50];
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = 136316162;
          uint64_t v18 = v7;
          __int16 v19 = 2080;
          __int16 v20 = "_VCAudioCaptionsCoordinator_HandleIdleStateAudioSamples";
          __int16 v21 = 1024;
          int v22 = 478;
          __int16 v23 = 2048;
          uint64_t v24 = [a2 token];
          __int16 v25 = 1024;
          int v26 = Priority;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Not starting captions because priority is too low for streamToken=%ld priority=%d", (uint8_t *)&v17, 0x2Cu);
        }
      }
      else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v17 = 136316162;
        uint64_t v18 = v7;
        __int16 v19 = 2080;
        __int16 v20 = "_VCAudioCaptionsCoordinator_HandleIdleStateAudioSamples";
        __int16 v21 = 1024;
        int v22 = 478;
        __int16 v23 = 2048;
        uint64_t v24 = [a2 token];
        __int16 v25 = 1024;
        int v26 = Priority;
        _os_log_debug_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Not starting captions because priority is too low for streamToken=%ld priority=%d", (uint8_t *)&v17, 0x2Cu);
      }
    }
    return 1;
  }
}

uint64_t _VCAudioCaptionsCoordinator_HandleStartedStateAudioSamples(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  VCAudioCaptionsBufferInfoCollection_PushAudioSamples(*(void *)(a1 + 240), (uint64_t)a2, a3);
  unsigned int v6 = [a2 priority];
  unsigned int v7 = objc_msgSend((id)VCAudioCaptionsBufferInfoCollection_GetBufferInfo(*(void *)(a1 + 240), *(void *)(a1 + 208)), "priority");
  uint64_t v8 = [a2 token];
  if (v8 == *(void *)(a1 + 208))
  {
    if (_VCAudioCaptionsCoordinator_ShouldStopCaptioning(a1, a2, v6))
    {
      if ((_VCAudioCaptionsCoordinator_StopCaptioning(a1) & 1) == 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v9 = VRTraceErrorLogLevelToCSTR();
          uint64_t v10 = *MEMORY[0x1E4F47A50];
          BOOL v11 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (!v11) {
            return result;
          }
          int v20 = 136316162;
          uint64_t v21 = v9;
          __int16 v22 = 2080;
          __int16 v23 = "_VCAudioCaptionsCoordinator_HandleStartedStateAudioSamples";
          __int16 v24 = 1024;
          int v25 = 496;
          __int16 v26 = 2048;
          uint64_t v27 = [a2 token];
          __int16 v28 = 1024;
          unsigned int v29 = v6;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Tried to stop captions because priority is too low, but failed for streamToken=%ld priority=%d", (uint8_t *)&v20, 0x2Cu);
        }
        return 0;
      }
    }
    else
    {
      _VCAudioCaptionsCoordinator_PushAudioSamplesToRecognizer(*(void **)(a1 + 232), (uint64_t)a2);
    }
    return 1;
  }
  if (v6 <= v7) {
    return 1;
  }
  uint64_t v13 = v8;
  uint64_t Buffer = VCAudioCaptionsBufferInfo_GetBuffer((uint64_t)a2);
  Sampleint32_t Count = VCAudioBufferList_GetSampleCount(Buffer);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    int v17 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 208);
      uint64_t v19 = VCAudioCaptionsBufferInfo_GetBuffer((uint64_t)a2);
      int v20 = 136317186;
      uint64_t v21 = v16;
      __int16 v22 = 2080;
      __int16 v23 = "_VCAudioCaptionsCoordinator_HandleStartedStateAudioSamples";
      __int16 v24 = 1024;
      int v25 = 511;
      __int16 v26 = 2048;
      uint64_t v27 = v13;
      __int16 v28 = 1024;
      unsigned int v29 = v6;
      __int16 v30 = 2048;
      uint64_t v31 = v18;
      __int16 v32 = 1024;
      int v33 = SampleCount;
      __int16 v34 = 2048;
      double HostTime = VCAudioBufferList_GetHostTime(v19);
      __int16 v36 = 2048;
      double v37 = VCAudioBufferList_GetHostTime(a3);
      _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Found a new streamToken=%ld with higher priority=%d than streamToken=%ld, stop and start the captions. samplesToBackProcess=%d collectionHostTime=%f sampleHostTime=%f", (uint8_t *)&v20, 0x50u);
    }
  }
  if (_VCAudioCaptionsCoordinator_StopCaptioning(a1)) {
    return _VCAudioCaptionsCoordinator_StartCaptioning(a1, a2);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _VCAudioCaptionsCoordinator_HandleStartedStateAudioSamples_cold_1();
  }
  return 0;
}

void VCAudioCaptionsCoordinator_setOneToOneVoicePriority(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (VCAudioBufferList_GetVoiceActivity(a2) || *(unsigned char *)(a1 + 420))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      unsigned int v7 = *MEMORY[0x1E4F47A50];
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 136315650;
          uint64_t v13 = v6;
          __int16 v14 = 2080;
          uint64_t v15 = "VCAudioCaptionsCoordinator_setOneToOneVoicePriority";
          __int16 v16 = 1024;
          int v17 = 554;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Running sample through voice detector", (uint8_t *)&v12, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        VCAudioCaptionsCoordinator_setOneToOneVoicePriority_cold_2();
      }
    }
    VCVoiceDetector_ProcessSampleBuffer(a3, a2, 0);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      BOOL v11 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 136315650;
          uint64_t v13 = v9;
          __int16 v14 = 2080;
          uint64_t v15 = "VCAudioCaptionsCoordinator_setOneToOneVoicePriority";
          __int16 v16 = 1024;
          int v17 = 557;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Not running voice detector", (uint8_t *)&v12, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        VCAudioCaptionsCoordinator_setOneToOneVoicePriority_cold_1();
      }
    }
    VCAudioBufferList_SetPriority(a2, 1);
  }
}

uint64_t VCAudioCaptionsCoordinator_PushAudioSamples(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 216));
  uint64_t BufferInfo = VCAudioCaptionsBufferInfoCollection_GetBufferInfo(*(void *)(a1 + 240), a2);
  if (BufferInfo)
  {
    unsigned int v7 = (void *)BufferInfo;
    if (VCAudioCaptionsBufferInfo_UseSecondaryThread(BufferInfo))
    {
      uint64_t v8 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 400), 16, 0);
      __int16 v24 = v8;
      if (!v8)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v19 = VRTraceErrorLogLevelToCSTR();
          int v20 = *MEMORY[0x1E4F47A50];
          uint64_t v21 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            uint64_t v15 = 0;
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_25;
            }
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v19;
            __int16 v26 = 2080;
            uint64_t v27 = "_VCAudioCaptionsCoordinator_EnqueueSecondarySamples";
            __int16 v28 = 1024;
            int v29 = 214;
            __int16 v30 = 2048;
            uint64_t v31 = a1;
            _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] Failed to allocate the secondary sample buffer info", buf, 0x26u);
          }
          else if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            VCAudioCaptionsCoordinator_PushAudioSamples_cold_2();
          }
        }
        goto LABEL_24;
      }
      uint64_t v9 = v8;
      v8[1] = 0;
      uint64_t v10 = v8 + 1;
      void *v8 = CFRetain(v7);
      if (VCAudioBufferList_CopySampleBuffer(a3, *(CFAllocatorRef *)(a1 + 392), v10))
      {
        if (!CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 408), v9))
        {
          uint64_t v15 = 1;
LABEL_25:
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 216));
          return v15;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
          goto LABEL_23;
        }
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        int v12 = *MEMORY[0x1E4F47A50];
        uint64_t v13 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
            VCAudioCaptionsCoordinator_PushAudioSamples_cold_3();
          }
          goto LABEL_23;
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = v11;
          __int16 v26 = 2080;
          uint64_t v27 = "_VCAudioCaptionsCoordinator_EnqueueSecondarySamples";
          __int16 v28 = 1024;
          int v29 = 223;
          __int16 v30 = 2048;
          uint64_t v31 = a1;
          __int16 v14 = " [%s] %s:%d [%p] Failed to enqueue the samples";
LABEL_11:
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, v14, buf, 0x26u);
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v22 = VRTraceErrorLogLevelToCSTR();
        int v12 = *MEMORY[0x1E4F47A50];
        __int16 v23 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
            VCAudioCaptionsCoordinator_PushAudioSamples_cold_4();
          }
          goto LABEL_23;
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = v22;
          __int16 v26 = 2080;
          uint64_t v27 = "_VCAudioCaptionsCoordinator_EnqueueSecondarySamples";
          __int16 v28 = 1024;
          int v29 = 219;
          __int16 v30 = 2048;
          uint64_t v31 = a1;
          __int16 v14 = " [%s] %s:%d [%p] Failed to copy the samples";
          goto LABEL_11;
        }
      }
LABEL_23:
      _VCAudioCaptionsCoordinator_ReleaseSampleInfo(a1, (uint64_t *)&v24);
LABEL_24:
      uint64_t v15 = 0;
      goto LABEL_25;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 216));
    __int16 v16 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 408));
    *(void *)CMTime buf = v16;
    for (int i = 1; v16; *(void *)buf = v16)
    {
      i &= _VCAudioCaptionsCoordinator_ProcessSamples(a1, *(void **)v16, *((void *)v16 + 1));
      _VCAudioCaptionsCoordinator_ReleaseSampleInfo(a1, (uint64_t *)buf);
      __int16 v16 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 408));
    }
    return _VCAudioCaptionsCoordinator_ProcessSamples(a1, v7, (uint64_t)a3) & i;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioCaptionsCoordinator_PushAudioSamples_cold_1();
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 216));
    return 0;
  }
}

uint64_t _VCAudioCaptionsCoordinator_ProcessSamples(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  BOOL v6 = VCAudioCaptionsBufferInfo_UseSecondaryThread((BOOL)a2);
  uint64_t v7 = 1;
  if (v6) {
    int v8 = 2;
  }
  else {
    int v8 = 1;
  }
  if ((*(_DWORD *)(a1 + 416) & v8) != 0) {
    return v7;
  }
  BOOL v9 = v6;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 216));
  uint64_t v10 = *(void *)(a1 + 200);
  int v11 = *(unsigned __int8 *)(a1 + 248);
  int v12 = &OBJC_IVAR___VCAudioCaptionsCoordinator__voiceDetectorInfoPrimary;
  if (v9) {
    int v12 = &OBJC_IVAR___VCAudioCaptionsCoordinator__voiceDetectorInfoSecondary;
  }
  uint64_t v13 = (void **)(a1 + *v12);
  if (*v13 && !*((unsigned char *)v13 + 8))
  {
    uint64_t SampleFormat = VCAudioBufferList_GetSampleFormat(a3);
    Sampleint32_t Count = VCAudioBufferList_GetSampleCount(a3);
    __int16 v16 = *(void **)(SampleFormat + 32);
    long long v17 = *(_OWORD *)(SampleFormat + 16);
    *((_OWORD *)v13 + 1) = *(_OWORD *)SampleFormat;
    *((_OWORD *)v13 + 2) = v17;
    v13[6] = v16;
    *((_DWORD *)v13 + 14) = SampleCount;
    VCVoiceDetector_Start(*v13, (uint64_t)(v13 + 2));
    *((unsigned char *)v13 + 8) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 216));
  if (v10 == 2)
  {
    if (v11) {
      VCAudioCaptionsCoordinator_setOneToOneVoicePriority(a1, a3, *v13);
    }
    uint64_t v18 = _VCAudioCaptionsCoordinator_HandleStartedStateAudioSamples(a1, a2, a3);
  }
  else
  {
    if (v10 != 1)
    {
      uint64_t v7 = 1;
      goto LABEL_20;
    }
    if (v11) {
      VCAudioCaptionsCoordinator_setOneToOneVoicePriority(a1, a3, *v13);
    }
    uint64_t v18 = _VCAudioCaptionsCoordinator_HandleIdleStateAudioSamples(a1, a2, a3);
  }
  uint64_t v7 = v18;
LABEL_20:
  if (v10 != *(void *)(a1 + 200) && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v19 = VRTraceErrorLogLevelToCSTR();
    int v20 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 200);
      int v23 = 136316162;
      uint64_t v24 = v19;
      __int16 v25 = 2080;
      __int16 v26 = "_VCAudioCaptionsCoordinator_ProcessSamples";
      __int16 v27 = 1024;
      int v28 = 606;
      __int16 v29 = 2048;
      uint64_t v30 = v10;
      __int16 v31 = 2048;
      uint64_t v32 = v21;
      _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d state changed from oldState=%ld to newState=%ld", (uint8_t *)&v23, 0x30u);
    }
  }
  return v7;
}

CFTypeRef VCConnectionSelector_CopyPrimaryConnection(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(const void **)(a1 + 8)) != 0) {
    return CFRetain(v1);
  }
  else {
    return 0;
  }
}

void VCConnectionSelector_SetPrimaryConnection(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    CFTypeRef v2 = *(CFTypeRef *)(a1 + 8);
    if (v2 != cf)
    {
      *(void *)(a1 + 8) = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v2)
      {
        CFRelease(v2);
      }
    }
  }
}

void VCConnectionSelector_UpdateConnectionForDuplication(uint64_t a1, int a2, int a3, int a4, int a5, const __CFArray *a6)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return;
    }
    uint64_t v53 = VRTraceErrorLogLevelToCSTR();
    int v54 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CMTime buf = 136315650;
    uint64_t v71 = v53;
    __int16 v72 = 2080;
    __int16 v73 = "VCConnectionSelector_UpdateConnectionForDuplication";
    __int16 v74 = 1024;
    int v75 = 116;
    uint64_t v55 = " [%s] %s:%d nil instance passed";
    uint64_t v56 = v54;
    uint32_t v57 = 28;
    goto LABEL_111;
  }
  if (*(unsigned char *)(a1 + 64) || VCConnection_IsRelay(*(void *)(a1 + 72)))
  {
    uint64_t v13 = (const void **)(a1 + 88);
    int v12 = *(const void **)(a1 + 88);
    __int16 v14 = *(const void **)(a1 + 72);
    if (v12 == v14) {
      goto LABEL_12;
    }
    NSObject *v13 = v14;
    if (v14) {
      CFRetain(v14);
    }
    if (!v12)
    {
LABEL_12:
      __int16 v16 = (const void **)(a1 + 80);
      uint64_t v15 = *(const void **)(a1 + 80);
      if (v15 != v14)
      {
        *__int16 v16 = v14;
        if (v14) {
          CFRetain(v14);
        }
        if (v15) {
          goto LABEL_16;
        }
      }
      goto LABEL_17;
    }
LABEL_11:
    CFRelease(v12);
    goto LABEL_12;
  }
  uint64_t v13 = (const void **)(a1 + 88);
  int v12 = *(const void **)(a1 + 88);
  if (v12)
  {
    __int16 v14 = 0;
    NSObject *v13 = 0;
    goto LABEL_11;
  }
  __int16 v16 = (const void **)(a1 + 80);
  uint64_t v15 = *(const void **)(a1 + 80);
  if (v15)
  {
    *__int16 v16 = 0;
LABEL_16:
    CFRelease(v15);
  }
LABEL_17:
  CFArrayRef v17 = *(const __CFArray **)(a1 + 24);
  long long v61 = v13;
  uint64_t v62 = v16;
  if (v17) {
    CFIndex Count = CFArrayGetCount(v17);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef theArray = v17;
  int IsLocalOnWiFiOrWired = a4 == 0;
  int IsRemoteOnWiFiOrWired = a5 == 0;
  uint64_t v18 = (const void *)VCConnection_CopyDescription(*(void *)(a1 + 72));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v19 = VRTraceErrorLogLevelToCSTR();
    int v20 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136317186;
      uint64_t v71 = v19;
      __int16 v72 = 2080;
      __int16 v73 = "VCConnectionSelector_UpdateConnectionForDuplication";
      __int16 v74 = 1024;
      int v75 = 133;
      __int16 v76 = 1024;
      *(_DWORD *)__int16 v77 = a4 == 0;
      *(_WORD *)&v77[4] = 1024;
      *(_DWORD *)&v77[6] = a5 == 0;
      *(_WORD *)uint64_t v78 = 1024;
      *(_DWORD *)&v78[2] = a3;
      __int16 v79 = 1024;
      int v80 = a2;
      __int16 v81 = 1024;
      BOOL v82 = Count != 0;
      __int16 v83 = 2112;
      double v84 = v18;
      _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: updateConnectionForDuplication isLocalPreferWiFi %d isRemotePreferWiFi: %d duplicationEnhancementEnabled: %d duplicationReason: %d useLinkPriorityForSelection: %d secondary connection %@", buf, 0x44u);
    }
  }
  unsigned int v21 = a2 - 1;
  if ((a2 - 1) < 2) {
    int v22 = a3;
  }
  else {
    int v22 = 0;
  }
  if (v22 != 1) {
    goto LABEL_32;
  }
  if (Count)
  {
    uint64_t v23 = *(void *)(a1 + 72);
    if (v23)
    {
      int IsLocalOnWiFiOrWired = VCConnection_IsLocalOnWiFiOrWired(v23);
      int IsRemoteOnWiFiOrWired = VCConnection_IsRemoteOnWiFiOrWired(*(void *)(a1 + 72));
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v24 = VRTraceErrorLogLevelToCSTR();
        __int16 v25 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v71 = v24;
          __int16 v72 = 2080;
          __int16 v73 = "VCConnectionSelector_UpdateConnectionForDuplication";
          __int16 v74 = 1024;
          int v75 = 143;
          __int16 v76 = 1024;
          *(_DWORD *)__int16 v77 = IsLocalOnWiFiOrWired;
          *(_WORD *)&v77[4] = 1024;
          *(_DWORD *)&v77[6] = IsRemoteOnWiFiOrWired;
          _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: Duplication active due to missing packets - updateConnectionForDuplication forces to use secondary connection interface preferences - isLocalPreferWiFi(updated): %d isRemotePreferWiFi(updated): %d", buf, 0x28u);
        }
      }
    }
LABEL_32:
    if (v18) {
      CFRelease(v18);
    }
    if (a6)
    {
      CFIndex v26 = CFArrayGetCount(a6);
      if (v26 < 1) {
        return;
      }
      CFIndex v27 = v26;
      CFIndex v28 = 0;
      char v29 = v22 ^ 1;
      BOOL v31 = v21 < 2 && Count != 0;
      BOOL v66 = v31;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      unsigned int v64 = 0xFFFF;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a6, v28);
        uint64_t v33 = ValueAtIndex;
        if (*(unsigned char *)(a1 + 64) || VCConnection_IsRelay((uint64_t)ValueAtIndex))
        {
          __int16 v34 = (const void *)VCConnection_CopyDescription((uint64_t)v33);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v35 = VRTraceErrorLogLevelToCSTR();
            __int16 v36 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315906;
              uint64_t v71 = v35;
              __int16 v72 = 2080;
              __int16 v73 = "VCConnectionSelector_UpdateConnectionForDuplication";
              __int16 v74 = 1024;
              int v75 = 157;
              __int16 v76 = 2112;
              *(void *)__int16 v77 = v34;
              _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: updateConnectionForDuplication check connection %@", buf, 0x26u);
            }
          }
          if ((VCConnection_Priority((uint64_t)v33) & 0xFFFFFFFE) != 2
            && (VCConnection_IsOnSameInterfacesWithConnection((uint64_t)v33) & 1) == 0)
          {
            if (!*(unsigned char *)(a1 + 16)
              || (IsEndToEndLinuint64_t k = VCConnection_IsEndToEndLink((uint64_t)v33),
                  IsEndToEndLink == VCConnection_IsEndToEndLink(*(void *)(a1 + 8))))
            {
              if (IsLocalOnWiFiOrWired == VCConnection_IsLocalOnWiFiOrWired((uint64_t)v33))
              {
                if ((IsRemoteOnWiFiOrWired ^ VCConnection_IsRemoteOnWiFiOrWired((uint64_t)v33) ^ 1 | v66))
                {
LABEL_59:
                  if (v29)
                  {
                    uint64_t v38 = *v61;
                    if (*v61 != v33)
                    {
                      *long long v61 = v33;
                      if (v33) {
                        CFRetain(v33);
                      }
                      if (v38) {
                        CFRelease(v38);
                      }
                    }
                  }
                  if (!Count)
                  {
                    unsigned int v50 = *v62;
                    if (*v62 != v33)
                    {
                      *uint64_t v62 = v33;
                      if (v33) {
                        CFRetain(v33);
                      }
                      if (v50) {
                        CFRelease(v50);
                      }
                    }
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                    {
                      uint64_t v51 = VRTraceErrorLogLevelToCSTR();
                      int v52 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)CMTime buf = 136315906;
                        uint64_t v71 = v51;
                        __int16 v72 = 2080;
                        __int16 v73 = "VCConnectionSelector_UpdateConnectionForDuplication";
                        __int16 v74 = 1024;
                        int v75 = 182;
                        __int16 v76 = 2112;
                        *(void *)__int16 v77 = v34;
                        _os_log_impl(&dword_1E1EA4000, v52, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: updateConnectionForDuplication picks connection %@", buf, 0x26u);
                      }
                    }
                    if (v34)
                    {
                      int v49 = v34;
LABEL_91:
                      CFRelease(v49);
                    }
                    return;
                  }
                  if (theArray) {
                    CFIndex v39 = CFArrayGetCount(theArray);
                  }
                  else {
                    CFIndex v39 = 0;
                  }
                  int valuePtr = -1431655766;
                  int valuePtr = VCConnection_ConnectionID((uint64_t)v33);
                  CFNumberRef v40 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
                  CFNumberRef v41 = v40;
                  if (theArray)
                  {
                    v86.location = 0;
                    v86.length = v39;
                    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(theArray, v86, v40);
                    if (v41) {
                      goto LABEL_71;
                    }
                  }
                  else
                  {
                    FirstIndexOfCFNumberRef Value = 0;
                    if (v40) {
LABEL_71:
                    }
                      CFRelease(v41);
                  }
                  int v43 = FirstIndexOfValue;
                  if (FirstIndexOfValue <= v64)
                  {
                    uint64_t v44 = *v62;
                    if (*v62 != v33)
                    {
                      *uint64_t v62 = v33;
                      if (v33) {
                        CFRetain(v33);
                      }
                      if (v44) {
                        CFRelease(v44);
                      }
                    }
                    unsigned int v64 = FirstIndexOfValue;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                    {
                      uint64_t v45 = VRTraceErrorLogLevelToCSTR();
                      int v46 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)CMTime buf = 136316162;
                        uint64_t v71 = v45;
                        __int16 v72 = 2080;
                        __int16 v73 = "VCConnectionSelector_UpdateConnectionForDuplication";
                        __int16 v74 = 1024;
                        int v75 = 196;
                        __int16 v76 = 2112;
                        *(void *)__int16 v77 = v34;
                        *(_WORD *)&v77[8] = 1024;
                        *(_DWORD *)uint64_t v78 = v43;
                        _os_log_impl(&dword_1E1EA4000, v46, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: updateConnectionForDuplication picks connection %@ selectedConnectionPriority: %d", buf, 0x2Cu);
                      }
                    }
                  }
                  if (v34) {
                    CFRelease(v34);
                  }
                  char v29 = 0;
                  goto LABEL_56;
                }
              }
              else if (v66)
              {
                goto LABEL_59;
              }
            }
          }
          if (v34) {
            CFRelease(v34);
          }
        }
LABEL_56:
        if (v27 == ++v28) {
          return;
        }
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return;
    }
    uint64_t v58 = VRTraceErrorLogLevelToCSTR();
    int v59 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CMTime buf = 136315906;
    uint64_t v71 = v58;
    __int16 v72 = 2080;
    __int16 v73 = "VCConnectionSelector_UpdateConnectionForDuplication";
    __int16 v74 = 1024;
    int v75 = 149;
    __int16 v76 = 2048;
    *(void *)__int16 v77 = a1;
    uint64_t v55 = " [%s] %s:%d nil connectionArray, instance=%p";
    uint64_t v56 = v59;
    uint32_t v57 = 38;
LABEL_111:
    _os_log_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_DEFAULT, v55, buf, v57);
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v47 = VRTraceErrorLogLevelToCSTR();
    unsigned int v48 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v71 = v47;
      __int16 v72 = 2080;
      __int16 v73 = "VCConnectionSelector_UpdateConnectionForDuplication";
      __int16 v74 = 1024;
      int v75 = 137;
      __int16 v76 = 2112;
      *(void *)__int16 v77 = v18;
      _os_log_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: Duplication active due to missing packets - updateConnectionForDuplication forces to use secondary connection %@", buf, 0x26u);
    }
  }
  if (v18)
  {
    int v49 = v18;
    goto LABEL_91;
  }
}

CFTypeRef VCConnectionSelector_CopyConnectionForDuplication(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      CFAllocatorRef v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        int v8 = "VCConnectionSelector_CopyConnectionForDuplication";
        __int16 v9 = 1024;
        int v10 = 356;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Passing nil instance", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
  uint64_t v1 = *(const void **)(a1 + 80);
  if (!v1) {
    return 0;
  }

  return CFRetain(v1);
}

void sub_1E20809EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2080B34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2080E4C(_Unwind_Exception *exception_object)
{
}

void sub_1E2081598(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2081CC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E208271C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E20831AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2083AFC(_Unwind_Exception *exception_object)
{
}

uint64_t _VCAirPlayAudioHALPlugin_handleAudioFrame(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v6 = a2;
    int v8 = -1431655766;
    int v7 = a3;
    int v5 = *(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t))(result + 56);
    if (v5) {
      return v5(*(void *)(result + 48), &v6, a4, a5);
    }
  }
  return result;
}

void sub_1E208E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1E208E630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

void freeValueCallback(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

VCMediaControlInfoFaceTimeAudio *VCMediaControlInfoGeneratorCreateControlInfo(uint64_t a1)
{
  if (a1)
  {
    ControlInfoFromPool = (VCMediaControlInfoFaceTimeAudio *)_VCMediaControlInfo_CreateControlInfoFromPool(a1);
    if (!ControlInfoFromPool)
    {
      switch(*(_DWORD *)(a1 + 8))
      {
        case 0:
          uint64_t v6 = objc_alloc_init(VCMediaControlInfoFaceTimeAudio);
          uint64_t v3 = v6;
          int v7 = *(_DWORD *)(a1 + 100);
          if (v7)
          {
            VCMediaControlInfoFaceTimeAudio_SetVideoEnabled((uint64_t)v6, 1);
            int v7 = *(_DWORD *)(a1 + 100);
          }
          if ((v7 & 2) != 0) {
            [(VCMediaControlInfoFaceTimeAudio *)v3 setEcnEnabled:1];
          }
          goto LABEL_18;
        case 1:
          uint64_t v8 = VCMediaControlInfoFaceTimeVideo;
          goto LABEL_17;
        case 2:
          uint64_t v8 = VCMediaControlInfoIPCamera;
          goto LABEL_17;
        case 4:
          uint64_t v8 = VCMediaControlInfoMultiwayAudio;
LABEL_17:
          uint64_t v3 = (VCMediaControlInfoFaceTimeAudio *)objc_alloc_init(v8);
LABEL_18:
          VCMediaControlInfo_SetVersion((uint64_t)v3, *(unsigned char *)(a1 + 96));
          if (v3) {
            goto LABEL_19;
          }
          return v3;
        default:
          VCMediaControlInfo_SetVersion(0, *(unsigned char *)(a1 + 96));
          return 0;
      }
    }
    uint64_t v3 = ControlInfoFromPool;
    VCMediaControlInfo_SetVersion((uint64_t)ControlInfoFromPool, *(unsigned char *)(a1 + 96));
LABEL_19:
    _VCMediaControlInfoGenerator_PassMediaControlInfo(a1, (uint64_t)v3, 1);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      int v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoGeneratorCreateControlInfo_cold_1(v4, v5);
      }
    }
    return 0;
  }
  return v3;
}

uint64_t _VCMediaControlInfoGenerator_PassMediaControlInfo(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (pthread_rwlock_t *)(a1 + 104);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 104));
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
  size_t v8 = 8 * Count;
  unint64_t v9 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
  int v10 = (const void **)((char *)&v16 - v9);
  if (MEMORY[0x1F4188790](Count))
  {
    uint64_t v11 = memset((char *)&v16 - v9, 170, v8);
    MEMORY[0x1F4188790](v11);
    uint64_t v12 = (char *)&v16 - v9;
    memset(v12, 170, v8);
  }
  else
  {
    uint64_t v12 = &v18;
  }
  CFArrayRef v17 = _VCMediaControlInfoGenerator_DisposeControlInfo;
  VCMediaControlInfo_SetDelegateAndVTable(a2, (CFTypeRef)a1, &v17);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), v10, (const void **)v12);
  if (Count >= 1)
  {
    do
    {
      uint64_t v13 = *(void (***)(uint64_t, const void *, uint64_t))v12;
      if (a3)
      {
        if (!v13) {
          goto LABEL_12;
        }
        __int16 v14 = *v13;
        if (!v14) {
          goto LABEL_12;
        }
      }
      else
      {
        if (!v13) {
          goto LABEL_12;
        }
        __int16 v14 = v13[1];
        if (!v14) {
          goto LABEL_12;
        }
      }
      v14(a1, *v10, a2);
LABEL_12:
      ++v10;
      v12 += 8;
      --Count;
    }
    while (Count);
  }
  return pthread_rwlock_unlock(v6);
}

void *VCMediaControlInfoGeneratorCreateControlInfoWithBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0;
  }
  ControlInfoFromPool = _VCMediaControlInfo_CreateControlInfoFromPool(a1);
  if (!ControlInfoFromPool)
  {
    uint64_t v11 = (int *)(a1 + 8);
    uint64_t v10 = *(int *)(a1 + 8);
    if v10 < 5 && ((0x17u >> v10))
    {
      unint64_t v9 = (void *)[objc_alloc(off_1E6DB6848[v10]->isa) initWithBuffer:a2 length:a3 optionalControlInfo:a4 version:*(unsigned __int8 *)(a1 + 96)];
      [v9 setFecFeedbackVersion:*(unsigned __int8 *)(a1 + 97)];
      if (!v9) {
        return v9;
      }
      goto LABEL_4;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      uint64_t v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoGeneratorCreateControlInfoWithBuffer_cold_1(v12, v11, v13);
      }
    }
    return 0;
  }
  unint64_t v9 = ControlInfoFromPool;
  [ControlInfoFromPool setVersion:*(unsigned __int8 *)(a1 + 96)];
  [v9 configureWithBuffer:a2 length:a3 optionalControlInfo:a4];
  [v9 setFecFeedbackVersion:*(unsigned __int8 *)(a1 + 97)];
LABEL_4:
  _VCMediaControlInfoGenerator_PassMediaControlInfo(a1, (uint64_t)v9, 0);
  return v9;
}

uint64_t VCMediaControlInfoGeneratorCreateWithTypeAndVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [VCMediaControlInfoGenerator alloc];

  return (uint64_t)[(VCMediaControlInfoGenerator *)v4 initWithType:a1 version:a2];
}

uint64_t VCMediaControlInfoGeneratorCreateWithType(uint64_t a1)
{
  CFTypeRef v2 = [VCMediaControlInfoGenerator alloc];

  return (uint64_t)[(VCMediaControlInfoGenerator *)v2 initWithType:a1 version:1];
}

uint64_t VCMediaControlInfoGeneratoSetFECFeedbackVersion(void *a1, const char *a2)
{
  return [a1 setFecFeedbackVersion:a2];
}

uint64_t VCMediaControlInfoGeneratorRegisterCallbacks(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return [a1 registerFillBlobCallback:a3 processBlobCallback:a4 context:a2];
}

uint64_t VCMediaControlInfoGeneratorDeregisterCallbacks(void *a1, const char *a2)
{
  return [a1 deregisterCallbacksWithContext:a2];
}

uint64_t VCMediaControlInfoGeneratorAddOptions(void *a1, const char *a2)
{
  return [a1 addMediaControlInfoOption:a2];
}

uint64_t VCMediaControlInfoGeneratorGetSerializedSizeWithConfig(unsigned int *a1, uint64_t *a2)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    int v5 = [[VCMediaControlInfoGenerator alloc] initWithType:*a1 version:*((unsigned __int8 *)a1 + 4)];
    ControlInfo = VCMediaControlInfoGeneratorCreateControlInfo((uint64_t)v5);
    *a2 = VCMediaControlInfoGetSize((uint64_t)ControlInfo);
    VCMediaControlInfoDispose((uint64_t)ControlInfo);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  return result;
}

void _VCMediaControlInfoGenerator_DisposeControlInfo(uint64_t a1, const void *a2)
{
  VCMediaControlInfo_Invalidate((uint64_t)a2);
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    uint64_t v4 = *(__CFArray **)(a1 + 24);
    if (v4) {
      CFArrayAppendValue(v4, a2);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
    CFRelease(a2);
  }
}

void *_VCMediaControlInfo_CreateControlInfoFromPool(uint64_t a1)
{
  CFTypeRef v2 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  if ([*(id *)(a1 + 24) count])
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 24);
    CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, 0);
    id v5 = ValueAtIndex;
    CFArrayRemoveValueAtIndex(v3, 0);
  }
  else
  {
    CFDictionaryRef ValueAtIndex = 0;
  }
  pthread_mutex_unlock(v2);
  return ValueAtIndex;
}

uint64_t _VCAudioPowerSpectrumMeter_CompareListEntries(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v2 == v3;
  unsigned int v5 = 2 * (v2 >= v3);
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

const void *_VCAudioPowerSpectrumMeter_ProcessEventQueue(uint64_t a1, int a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 32));
  uint64_t v35 = result;
  if (result)
  {
    uint64_t v6 = (uint64_t)result;
    int v7 = (os_log_t *)MEMORY[0x1E4F47A50];
    *(void *)&long long v5 = 136316674;
    long long v34 = v5;
    do
    {
      int v8 = *(_DWORD *)(v6 + 76);
      switch(v8)
      {
        case 3:
          __int16 v36 = (void *)v6;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v20 = VRTraceErrorLogLevelToCSTR();
            unsigned int v21 = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v22 = *(void *)(a1 + 88);
              *(_DWORD *)CMTime buf = 136315906;
              *(void *)&uint8_t buf[4] = v20;
              __int16 v38 = 2080;
              CFIndex v39 = "_VCAudioPowerSpectrumMeter_RemoveAllStream";
              __int16 v40 = 1024;
              int v41 = 176;
              __int16 v42 = 2048;
              *(void *)int v43 = v22;
              _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCAudioPowerSpectrumMeter=%p", buf, 0x26u);
            }
          }
          while (1)
          {
            uint64_t v23 = VCSingleLinkedListPop((uint64_t *)a1);
            *(void *)CMTime buf = v23;
            if (!v23) {
              break;
            }
            VCAudioPowerSpectrumSource_UnregisterAudioPowerSpectrumSink((CMSimpleQueueRef *)v23[3], (void *)v23[6]);
            _VCAudioPowerSpectrumMeter_FreeStream((void **)buf);
          }
          break;
        case 2:
          *(void *)CMTime buf = v6;
          CFArrayRef v17 = VCSingleLinkedListRemove(a1, v6);
          __int16 v36 = v17;
          if (v17)
          {
            char v18 = v17;
            VCAudioPowerSpectrumSource_UnregisterAudioPowerSpectrumSink((CMSimpleQueueRef *)v17[3], (void *)v17[6]);
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), (const void *)v18[2]);
            _VCAudioPowerSpectrumMeter_FreeStream(&v36);
          }
          uint64_t v19 = (const void **)buf;
          goto LABEL_28;
        case 1:
          __int16 v36 = (void *)v6;
          unint64_t v9 = *(void **)(v6 + 40);
          VCAudioPowerSpectrumSource_UnregisterAudioPowerSpectrumSink((CMSimpleQueueRef *)[v9 realtimeContext], (void *)a1);
          int v10 = VCSingleLinkedListPush(a1, (void *)v6);
          int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
          if (v10)
          {
            if (ErrorLogLevelForModule >= 8)
            {
              uint64_t v12 = VRTraceErrorLogLevelToCSTR();
              uint64_t v13 = *v7;
              __int16 v14 = *v7;
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v15 = *(void *)(v6 + 8);
                  uint64_t v16 = *(void *)(v6 + 56);
                  *(_DWORD *)CMTime buf = v34;
                  *(void *)&uint8_t buf[4] = v12;
                  __int16 v38 = 2080;
                  CFIndex v39 = "_VCAudioPowerSpectrumMeter_AddStream";
                  __int16 v40 = 1024;
                  int v41 = 155;
                  __int16 v42 = 1024;
                  *(_DWORD *)int v43 = 155;
                  *(_WORD *)&v43[4] = 1024;
                  *(_DWORD *)&v43[6] = v15;
                  __int16 v44 = 2048;
                  uint64_t v45 = v9;
                  __int16 v46 = 2048;
                  uint64_t v47 = v16;
                  _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCAudioPowerSpectrumMeter.m:%d: streamToken %d is registered to source %p with spectrum %p", buf, 0x3Cu);
                }
              }
              else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v32 = *(void *)(v6 + 8);
                uint64_t v33 = *(void *)(v6 + 56);
                *(_DWORD *)CMTime buf = v34;
                *(void *)&uint8_t buf[4] = v12;
                __int16 v38 = 2080;
                CFIndex v39 = "_VCAudioPowerSpectrumMeter_AddStream";
                __int16 v40 = 1024;
                int v41 = 155;
                __int16 v42 = 1024;
                *(_DWORD *)int v43 = 155;
                *(_WORD *)&v43[4] = 1024;
                *(_DWORD *)&v43[6] = v32;
                __int16 v44 = 2048;
                uint64_t v45 = v9;
                __int16 v46 = 2048;
                uint64_t v47 = v33;
                _os_log_debug_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEBUG, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCAudioPowerSpectrumMeter.m:%d: streamToken %d is registered to source %p with spectrum %p", buf, 0x3Cu);
              }
            }
            CFIndex v28 = (CMSimpleQueueRef *)objc_msgSend(v9, "realtimeContext", v34);
            if (a2) {
              char v29 = *(void **)(a1 + 88);
            }
            else {
              char v29 = 0;
            }
            VCAudioPowerSpectrumSource_RegisterAudioPowerSpectrumSink(v28, *(void **)(v6 + 48), *(void **)(v6 + 56), v29, VCAudioPowerSpectrum_PushAudioSamples);
            goto LABEL_29;
          }
          if (ErrorLogLevelForModule >= 3)
          {
            uint64_t v26 = VRTraceErrorLogLevelToCSTR();
            CFIndex v27 = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
            {
              uint64_t v31 = *(void *)(v6 + 8);
              *(_DWORD *)CMTime buf = 136315906;
              *(void *)&uint8_t buf[4] = v26;
              __int16 v38 = 2080;
              CFIndex v39 = "_VCAudioPowerSpectrumMeter_AddStream";
              __int16 v40 = 1024;
              int v41 = 159;
              __int16 v42 = 1024;
              *(_DWORD *)int v43 = v31;
              _os_log_error_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_ERROR, " [%s] %s:%d error VCAudioPowerSpectrum already exists for streamToken[%d]", buf, 0x22u);
            }
          }
          break;
        default:
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v24 = VRTraceErrorLogLevelToCSTR();
            __int16 v25 = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
            {
              int v30 = *(_DWORD *)(v6 + 76);
              *(_DWORD *)CMTime buf = 136315906;
              *(void *)&uint8_t buf[4] = v24;
              __int16 v38 = 2080;
              CFIndex v39 = "_VCAudioPowerSpectrumMeter_ProcessEventQueue";
              __int16 v40 = 1024;
              int v41 = 198;
              __int16 v42 = 1024;
              *(_DWORD *)int v43 = v30;
              _os_log_error_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid operation: %d", buf, 0x22u);
            }
          }
          uint64_t v19 = &v35;
          goto LABEL_28;
      }
      uint64_t v19 = (const void **)&v36;
LABEL_28:
      _VCAudioPowerSpectrumMeter_FreeStream((void **)v19);
LABEL_29:
      uint64_t result = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 32));
      uint64_t v6 = (uint64_t)result;
      uint64_t v35 = result;
    }
    while (result);
  }
  return result;
}

void _VCAudioPowerSpectrumMeter_FreeStream(void **a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    unint64_t v2 = (const void *)v1[1];
    if (v2) {
      CFRelease(v2);
    }
    unint64_t v3 = (const void *)v1[2];
    if (v3) {
      CFRelease(v3);
    }
    BOOL v4 = (const void *)v1[5];
    if (v4) {
      CFRelease(v4);
    }
    long long v5 = (const void *)v1[7];
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = (const void *)v1[8];
    if (v6) {
      CFRelease(v6);
    }
    free(v1);
  }
}

void VCAudioPowerSpectrumMeter_ProcessOutput(uint64_t a1, uint64_t a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if ((atomic_exchange((atomic_uchar *volatile)(a1 + 56), 1u) & 1) == 0)
  {
    _VCAudioPowerSpectrumMeter_ProcessEventQueue(a1, 1);
    double HostTime = VCAudioBufferList_GetHostTime(a2);
    if (HostTime - *(double *)(a1 + 64) >= 0.0)
    {
      long long v5 = *(uint64_t **)a1;
      if (*(void *)a1)
      {
        do
        {
          if (*((unsigned char *)v5 + 72)) {
            VCAudioPowerSpectrum_LogHealth(v5[6]);
          }
          long long v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      *(double *)(a1 + 64) = HostTime + 5.0;
    }
    double v6 = VCAudioBufferList_GetHostTime(a2);
    double v7 = *(double *)(a1 + 40);
    if (v6 - v7 >= 0.0)
    {
      double v8 = *(double *)(a1 + 48);
      double v9 = v7 + v8;
      double v10 = v6 + v8;
      double v11 = v9 <= v6 ? v10 : v9;
      *(double *)(a1 + 40) = v11;
      uint64_t v12 = *(uint64_t **)a1;
      if (*(void *)a1)
      {
        int v13 = 0;
        do
        {
          unsigned __int16 v14 = VCAudioPowerSpectrum_ChannelCount(v12[6]);
          if (v14)
          {
            unsigned __int16 v15 = v14;
            if (!*((unsigned char *)v12 + 72))
            {
              CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), (const void *)v12[2], (const void *)v12[8]);
              *((unsigned char *)v12 + 72) = 1;
            }
            ++v13;
            [(id)v12[8] checkNumChannels:v15];
            for (unsigned int i = 0; i != v15; ++i)
            {
              v20[0] = 0xAAAAAAAAAAAAAAAALL;
              int v19 = -1431655766;
              VCAudioPowerSpectrum_GetFrequencyBins(v12[6], v20, &v19, i);
              if (v20[0]) {
                BOOL v17 = v19 == 0;
              }
              else {
                BOOL v17 = 1;
              }
              if (!v17) {
                objc_msgSend((id)v12[8], "applyChannelBins:binCount:channelID:");
              }
            }
          }
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
        if (v13)
        {
          char v18 = (void *)MEMORY[0x1E4E56580](a1 + 80);
          [v18 audioPowerSpectrumMeter:*(void *)(a1 + 88) didUpdateAudioPowerSpectrums:*(void *)(a1 + 72)];
          if (v18) {
            CFRelease(v18);
          }
        }
      }
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 56));
  }
}

void sub_1E2091798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E2091900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void VCTimescaleInterface_InitializeWSOLA(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  VCTimescaleWSOLA_Initialize(a1 + 8, a2, a3, a4, a5);
}

uint64_t VCTimescaleInterface_InitializePSOLA(uint64_t a1, int a2, unsigned int a3, uint64_t a4, char a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  VCTimescalePSOLA_DSPInit(a1 + 8, (unsigned __int16)a2, a3, a5, *(unsigned __int8 *)(a1 + 34700), *(_DWORD *)a1);
  uint64_t v7 = v6;
  if ((v6 & 0x80000000) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    double v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315906;
      uint64_t v12 = v8;
      __int16 v13 = 2080;
      unsigned __int16 v14 = "VCTimescaleInterface_InitializePSOLA";
      __int16 v15 = 1024;
      int v16 = 29;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d PSOLA is enabled, Sample Rate = %d, ", (uint8_t *)&v11, 0x22u);
    }
  }
  return v7;
}

OpaqueAudioConverter *VCTimescaleInterface_FinalizeWSOLA(uint64_t a1)
{
  return VCTimescaleWSOLA_Finalize((VCTimescaleWSOLAClass **)(a1 + 8));
}

uint64_t VCTimescaleInterface_GetTailSizeWSOLA(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  memcpy(__dst, (const void *)(v1 + 8), sizeof(__dst));
  return VCTimescaleWSOLA_TailSize((uint64_t)__dst);
}

uint64_t VCTimescaleInterface_CheckCompressionWSOLA(uint64_t a1, int a2, int a3, int a4, double a5)
{
  return VCTimescaleWSOLA_CheckCompression(a1 + 8, a2, a3, a4, a5);
}

uint64_t VCTimescaleInterface_ActiveSpeechAdaptWSOLA(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 152) = 0;
  return VCTimescaleWSOLA_ActiveSpeechAdapt(a1 + 8, a2);
}

uint64_t VCTimescaleInterface_ActiveSpeechAdaptPSOLA(uint64_t a1, uint64_t a2, double a3)
{
  *(unsigned char *)(a2 + 152) = 0;
  if (*(_DWORD *)(a2 + 4) && !*(unsigned char *)(a2 + 168))
  {
    uint64_t v4 = a1 + 8;
    return VCTimescalePSOLA_ActiveSpeechAdapt(v4, a2, a3);
  }
  else
  {
    VCTimescalePSOLA_IncFrameScaledGapCount(a1 + 8);
    return 0;
  }
}

void *VCTimescaleInterface_UpdateHistoryBufferWSOLA(uint64_t a1, uint64_t a2)
{
  return VCTimescaleWSOLA_UpdateHistoryBuffer(a1 + 8, a2);
}

void VCTimescaleInterface_UpdateHistoryBufferPSOLA(uint64_t a1, uint64_t a2)
{
}

BOOL VCTimescaleInterface_CheckCompressionPSOLA(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return VCTimescalePSOLA_CheckCompressionPSOLA(a1 + 8, a3, a4);
}

uint64_t VCTimescaleInterface_TailExtractAvailableWSOLA(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t VCTimescaleInterface_GetWarpFrameSizeWSOLA(uint64_t a1, double a2)
{
  if (a2 <= 0.0) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(a1 + 11578);
  }
}

uint64_t VCTimescaleInterface_GetWarpFrameSizePSOLA(uint64_t a1, double a2, double a3)
{
  unint64_t v3 = (double *)(a1 + 34680);
  LOWORD(a3) = *(_WORD *)(a1 + 10);
  double v4 = (double)*(unint64_t *)&a3;
  if (a2 <= 0.0) {
    unint64_t v3 = (double *)(a1 + 34688);
  }
  return (int)(*v3 * v4);
}

uint64_t ParseMessage(void *a1, char *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v66 = v4;
  long long v67 = v4;
  long long v64 = v4;
  long long v65 = v4;
  long long v62 = v4;
  long long v63 = v4;
  long long v60 = v4;
  long long v61 = v4;
  long long v58 = v4;
  long long v59 = v4;
  long long v56 = v4;
  long long v57 = v4;
  long long v54 = v4;
  long long v55 = v4;
  *(_OWORD *)__s = v4;
  long long v53 = v4;
  __s2 = (char *)0xAAAAAAAAAAAAAAAALL;
  int v50 = -1431655766;
  uint64_t v5 = malloc_type_calloc(1uLL, 0x400uLL, 0x10B2040CFE7BBC5uLL);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = strstr(a2, "\r\n");
    if (v7)
    {
      uint64_t v8 = v7 + 2;
      if (a2)
      {
        if ((int)v7 - (int)a2 >= 255) {
          int v9 = 255;
        }
        else {
          int v9 = v7 - a2;
        }
        __strncpy_chk();
        __s[v9] = 0;
        if (*(_DWORD *)__s == 793790803)
        {
          v6[1] = 2;
          CFIndex v28 = strchr(__s, 32);
          if (v28)
          {
            *CFIndex v28 = 0;
            if (*(void *)__s == 0x302E322F504953)
            {
              double v37 = v28 + 1;
              __int16 v38 = strchr(v28 + 1, 32);
              if (v38)
              {
                *__int16 v38 = 0;
                int v39 = atoi(v37);
                int StatusCode = GetStatusCode(v39);
                double v6[2] = StatusCode;
                if (!StatusCode)
                {
                  uint64_t v19 = 2148139039;
                  if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
                    goto LABEL_30;
                  }
                  uint64_t v48 = VRTraceErrorLogLevelToCSTR();
                  int v49 = *MEMORY[0x1E4F47A50];
                  if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_30;
                  }
                  *(_DWORD *)CMTime buf = 136316418;
                  uint64_t v69 = v48;
                  __int16 v70 = 2080;
                  uint64_t v71 = "ParseStatusLine";
                  __int16 v72 = 1024;
                  int v73 = 123;
                  __int16 v74 = 1024;
                  int v75 = 123;
                  __int16 v76 = 1024;
                  *(_DWORD *)__int16 v77 = v39;
                  *(_WORD *)&v77[4] = 2080;
                  *(void *)&v77[6] = v37;
                  uint64_t v22 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/S"
                        "IP/SipParse.c:%d: Invalid status code(%d[%s])";
                  uint64_t v33 = v49;
                  uint32_t v34 = 50;
                  goto LABEL_47;
                }
                __strlcpy_chk();
LABEL_54:
                int v41 = strstr(v8, "\r\n");
                if (v41)
                {
                  __int16 v42 = v41 + 2;
                  do
                  {
                    int v43 = v42;
                    int v44 = v42 - v8 - 2;
                    if (v44 >= 255) {
                      int v45 = 255;
                    }
                    else {
                      int v45 = v44;
                    }
                    __strncpy_chk();
                    __s[v45] = 0;
                    if ((ParseHeader(&__s2, (unsigned int *)&v50, __s, 0) & 0x80000000) == 0 && __s2) {
                      AssignHeader((uint64_t)v6, v50, __s2);
                    }
                    __int16 v46 = strstr(v43, "\r\n");
                    __int16 v42 = v46 + 2;
                    if (!v46) {
                      break;
                    }
                    LODWORD(v8) = v43;
                  }
                  while (v43);
                }
                uint64_t v19 = 0;
                *a1 = v6;
                return v19;
              }
              uint64_t v19 = 2148139039;
              if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
                goto LABEL_30;
              }
              uint64_t v47 = VRTraceErrorLogLevelToCSTR();
              unsigned int v21 = *MEMORY[0x1E4F47A50];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_30;
              }
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v69 = v47;
              __int16 v70 = 2080;
              uint64_t v71 = "ParseStatusLine";
              __int16 v72 = 1024;
              int v73 = 116;
              __int16 v74 = 1024;
              int v75 = 116;
              __int16 v76 = 2080;
              *(void *)__int16 v77 = __s;
              uint64_t v22 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/S"
                    "ipParse.c:%d: No status code found in Status-Line[%s]";
            }
            else
            {
              uint64_t v19 = 2148139039;
              if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
                goto LABEL_30;
              }
              uint64_t v29 = VRTraceErrorLogLevelToCSTR();
              unsigned int v21 = *MEMORY[0x1E4F47A50];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_30;
              }
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v69 = v29;
              __int16 v70 = 2080;
              uint64_t v71 = "ParseStatusLine";
              __int16 v72 = 1024;
              int v73 = 107;
              __int16 v74 = 1024;
              int v75 = 107;
              __int16 v76 = 2080;
              *(void *)__int16 v77 = __s;
              uint64_t v22 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/S"
                    "ipParse.c:%d: Invalid SIP version in Status-Line[%s]";
            }
          }
          else
          {
            uint64_t v19 = 2148139039;
            if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
              goto LABEL_30;
            }
            uint64_t v32 = VRTraceErrorLogLevelToCSTR();
            unsigned int v21 = *MEMORY[0x1E4F47A50];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_30;
            }
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v69 = v32;
            __int16 v70 = 2080;
            uint64_t v71 = "ParseStatusLine";
            __int16 v72 = 1024;
            int v73 = 102;
            __int16 v74 = 1024;
            int v75 = 102;
            __int16 v76 = 2080;
            *(void *)__int16 v77 = __s;
            uint64_t v22 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Sip"
                  "Parse.c:%d: No SIP Version found in Status-Line[%s]";
          }
        }
        else
        {
          v6[1] = 1;
          double v10 = strchr(__s, 32);
          if (v10)
          {
            int v11 = v10;
            *double v10 = 0;
            uint64_t v12 = 1;
            while (strcmp(__s, g_apszMethods[v12]))
            {
              if (++v12 == 12)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
                {
                  uint64_t v13 = VRTraceErrorLogLevelToCSTR();
                  unsigned __int16 v14 = *MEMORY[0x1E4F47A50];
                  LODWORD(v12) = 0;
                  if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                    break;
                  }
                  *(_DWORD *)CMTime buf = 136316162;
                  uint64_t v69 = v13;
                  __int16 v70 = 2080;
                  uint64_t v71 = "ParseRequestLine";
                  __int16 v72 = 1024;
                  int v73 = 66;
                  __int16 v74 = 1024;
                  int v75 = 66;
                  __int16 v76 = 2080;
                  *(void *)__int16 v77 = __s;
                  _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipParse.c:%d: Extension Method is not supported[%s]", buf, 0x2Cu);
                }
                LODWORD(v12) = 0;
                break;
              }
            }
            double v6[2] = v12;
            __int16 v15 = v11 + 1;
            int v16 = strchr(v15, 32);
            if (v16)
            {
              __int16 v17 = v16;
              *int v16 = 0;
              uint64_t v18 = ParseSipUri((uint64_t)(v6 + 3), v15);
              if ((v18 & 0x80000000) != 0)
              {
                uint64_t v19 = v18;
                if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
                  goto LABEL_30;
                }
                uint64_t v35 = VRTraceErrorLogLevelToCSTR();
                __int16 v36 = *MEMORY[0x1E4F47A50];
                if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_30;
                }
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v69 = v35;
                __int16 v70 = 2080;
                uint64_t v71 = "ParseRequestLine";
                __int16 v72 = 1024;
                int v73 = 81;
                __int16 v74 = 1024;
                int v75 = 81;
                __int16 v76 = 1024;
                *(_DWORD *)__int16 v77 = v19;
                uint64_t v22 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP"
                      "/SipParse.c:%d: ParseSipUri failed(%08X)";
                uint64_t v33 = v36;
                uint32_t v34 = 40;
                goto LABEL_47;
              }
              if (strncmp(v17 + 1, "SIP/2.0", 7uLL))
              {
                uint64_t v19 = 2148139039;
                if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
                  goto LABEL_30;
                }
                uint64_t v20 = VRTraceErrorLogLevelToCSTR();
                unsigned int v21 = *MEMORY[0x1E4F47A50];
                if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_30;
                }
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v69 = v20;
                __int16 v70 = 2080;
                uint64_t v71 = "ParseRequestLine";
                __int16 v72 = 1024;
                int v73 = 87;
                __int16 v74 = 1024;
                int v75 = 87;
                __int16 v76 = 2080;
                *(void *)__int16 v77 = __s;
                uint64_t v22 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP"
                      "/SipParse.c:%d: Invalid SIP version in Request-Line[%s]";
                goto LABEL_46;
              }
              goto LABEL_54;
            }
            uint64_t v19 = 2148139039;
            if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
              goto LABEL_30;
            }
            uint64_t v31 = VRTraceErrorLogLevelToCSTR();
            unsigned int v21 = *MEMORY[0x1E4F47A50];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_30;
            }
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v69 = v31;
            __int16 v70 = 2080;
            uint64_t v71 = "ParseRequestLine";
            __int16 v72 = 1024;
            int v73 = 75;
            __int16 v74 = 1024;
            int v75 = 75;
            __int16 v76 = 2080;
            *(void *)__int16 v77 = __s;
            uint64_t v22 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Sip"
                  "Parse.c:%d: No RequestURI found in Request-Line[%s]";
          }
          else
          {
            uint64_t v19 = 2148139039;
            if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
              goto LABEL_30;
            }
            uint64_t v30 = VRTraceErrorLogLevelToCSTR();
            unsigned int v21 = *MEMORY[0x1E4F47A50];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_30;
            }
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v69 = v30;
            __int16 v70 = 2080;
            uint64_t v71 = "ParseRequestLine";
            __int16 v72 = 1024;
            int v73 = 54;
            __int16 v74 = 1024;
            int v75 = 54;
            __int16 v76 = 2080;
            *(void *)__int16 v77 = __s;
            uint64_t v22 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Sip"
                  "Parse.c:%d: No Method found in Request-Line[%s]";
          }
        }
LABEL_46:
        uint64_t v33 = v21;
        uint32_t v34 = 44;
LABEL_47:
        _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, v22, buf, v34);
LABEL_30:
        free(v6);
        return v19;
      }
      a2 = v7 + 2;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v25 = VRTraceErrorLogLevelToCSTR();
      uint64_t v26 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v69 = v25;
        __int16 v70 = 2080;
        uint64_t v71 = "ParseMessage";
        __int16 v72 = 1024;
        int v73 = 150;
        __int16 v74 = 1024;
        int v75 = 150;
        __int16 v76 = 2080;
        *(void *)__int16 v77 = a2;
        _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipParse.c:%d: No Topline found in the message[%s]", buf, 0x2Cu);
      }
    }
    uint64_t v19 = 2148139039;
    goto LABEL_30;
  }
  uint64_t v19 = 2148139011;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v23 = VRTraceErrorLogLevelToCSTR();
    uint64_t v24 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      ParseMessage_cold_1(v23, v24);
    }
  }
  return v19;
}

char *VCGetSystemBuildVersionString(char *a1, CFIndex a2)
{
  CFStringRef v4 = (const __CFString *)MGCopyAnswer();
  if (v4)
  {
    CFStringRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID()) {
      CFStringGetCString(v5, a1, a2, 0x8000100u);
    }
    CFRelease(v5);
  }
  return a1;
}

char *VCGetDeviceModelString(char *a1, size_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v12[15] = v4;
  *(_OWORD *)uint64_t v12 = v4;
  long long v11 = v4;
  long long v10 = v4;
  char __source = 0;
  size_t __n = 63;
  if (sysctlbyname("hw.machine", &__source, &__n, 0, 0)
    || (size_t v7 = __n, !memchr(&__source, 44, __n))
    || strnstr(&__source, "iProd", v7))
  {
    size_t v5 = 0;
    size_t __n = 0;
  }
  else
  {
    size_t v5 = __n;
  }
  *(&__source + v5) = 0;
  strlcpy(a1, &__source, a2);
  return a1;
}

CFTypeRef VCGetSerialNumber()
{
  if (!VRTraceIsInternalOSInstalled()) {
    return 0;
  }
  mach_port_t v0 = *MEMORY[0x1E4F2EF00];
  CFDictionaryRef v1 = IOServiceMatching("IOPlatformExpertDevice");
  io_service_t MatchingService = IOServiceGetMatchingService(v0, v1);
  if (!MatchingService) {
    return 0;
  }
  io_object_t v3 = MatchingService;
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, @"IOPlatformSerialNumber", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  IOObjectRelease(v3);
  if (CFProperty) {
    CFAutorelease(CFProperty);
  }
  return CFProperty;
}

__CFString *VCCopyDeviceName()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  mach_port_t v0 = (__CFString *)MGCopyAnswer();
  if (!v0)
  {
LABEL_4:
    CFDictionaryRef v1 = (__CFString *)MGCopyAnswer();
    if (!v1) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  CFDictionaryRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFStringGetTypeID())
  {
    CFRelease(v1);
    goto LABEL_4;
  }
LABEL_5:
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 == CFStringGetTypeID()) {
    return v1;
  }
  CFRelease(v1);
LABEL_7:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    size_t v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315650;
      uint64_t v8 = v4;
      __int16 v9 = 2080;
      long long v10 = "VCCopyDeviceName";
      __int16 v11 = 1024;
      int v12 = 120;
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d No device name found, returning empty string", (uint8_t *)&v7, 0x1Cu);
    }
  }
  CFDictionaryRef v1 = &stru_1F3D3E450;
  CFRetain(&stru_1F3D3E450);
  return v1;
}

BOOL VCAudioSession_IsDeferredNetworkUplinkClockUpdateSupported(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 266) && *(unsigned char *)(result + 265) != 0;
  }
  return result;
}

void VCAudioSession_ScheduleNetworkUplinkClockUpdate(uint64_t a1)
{
  int v2 = VCFeatureFlagManager_UseAvconferencedOniOSSpecficFeatures();
  if (a1 && v2 && *(unsigned char *)(a1 + 266))
  {
    VCAudioSessionAVAS_ScheduleNetworkUplinkClockUpdate(a1);
  }
}

uint64_t VCWRMHandler_ShouldForceWRMRecommendationUsingUserDefaults(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      BOOL v9 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v9) {
        return result;
      }
      int v10 = 136315650;
      uint64_t v11 = v7;
      __int16 v12 = 2080;
      uint64_t v13 = "VCWRMHandler_ShouldForceWRMRecommendationUsingUserDefaults";
      __int16 v14 = 1024;
      int v15 = 39;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v10, 0x1Cu);
    }
    return 0;
  }
  int v2 = [+[VCDefaults sharedInstance] localWRMLinkType];
  if (v2 < 0) {
    return 0;
  }
  int v3 = v2;
  if (*(_DWORD *)(a1 + 8) == v2) {
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    CFTypeID v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315906;
      uint64_t v11 = v5;
      __int16 v12 = 2080;
      uint64_t v13 = "VCWRMHandler_ShouldForceWRMRecommendationUsingUserDefaults";
      __int16 v14 = 1024;
      int v15 = 42;
      __int16 v16 = 1024;
      int v17 = v3;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: Defaults settings force local iRATSuggestion to be %d", (uint8_t *)&v10, 0x22u);
    }
  }
  *(_DWORD *)(a1 + 8) = v3;
  return 1;
}

uint64_t VCWRMHandler_ShouldRequestWRMNotificationWithDuplicationReason(uint64_t a1, int a2, int a3, char a4, double a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (!a1)
  {
    if (ErrorLogLevelForModule >= 5)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      uint64_t v18 = *MEMORY[0x1E4F47A50];
      BOOL v19 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v19) {
        return result;
      }
      int v20 = 136315650;
      uint64_t v21 = v17;
      __int16 v22 = 2080;
      uint64_t v23 = "VCWRMHandler_ShouldRequestWRMNotificationWithDuplicationReason";
      __int16 v24 = 1024;
      int v25 = 52;
      _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v20, 0x1Cu);
    }
    return 0;
  }
  if (ErrorLogLevelForModule >= 8)
  {
    uint64_t v11 = VRTraceErrorLogLevelToCSTR();
    __int16 v12 = *MEMORY[0x1E4F47A50];
    uint64_t v13 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 136316162;
        uint64_t v21 = v11;
        __int16 v22 = 2080;
        uint64_t v23 = "VCWRMHandler_ShouldRequestWRMNotificationWithDuplicationReason";
        __int16 v24 = 1024;
        int v25 = 53;
        __int16 v26 = 1024;
        int v27 = a2;
        __int16 v28 = 1024;
        int v29 = a3;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: dupe state: %d and enableDuplication %d.", (uint8_t *)&v20, 0x28u);
      }
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v20 = 136316162;
      uint64_t v21 = v11;
      __int16 v22 = 2080;
      uint64_t v23 = "VCWRMHandler_ShouldRequestWRMNotificationWithDuplicationReason";
      __int16 v24 = 1024;
      int v25 = 53;
      __int16 v26 = 1024;
      int v27 = a2;
      __int16 v28 = 1024;
      int v29 = a3;
      _os_log_debug_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEBUG, " [%s] %s:%d HandoverReport: dupe state: %d and enableDuplication %d.", (uint8_t *)&v20, 0x28u);
    }
  }
  if ((a2 - 1) <= 1)
  {
    uint64_t result = 0;
    *(double *)(a1 + 32) = a5;
    return result;
  }
  uint64_t result = 0;
  if (a2 == 3 && (a4 & 1) == 0)
  {
    if (a5 - *(double *)(a1 + 32) > 20.0 && a5 - *(double *)(a1 + 40) > 60.0)
    {
      *(double *)(a1 + 40) = a5;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        __int16 v16 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v20 = 136315650;
          uint64_t v21 = v15;
          __int16 v22 = 2080;
          uint64_t v23 = "VCWRMHandler_ShouldRequestWRMNotificationWithDuplicationReason";
          __int16 v24 = 1024;
          int v25 = 64;
          _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: actively request for the latest iRAT recommendation from WRM.", (uint8_t *)&v20, 0x1Cu);
        }
      }
      return 1;
    }
    return 0;
  }
  return result;
}

void VCWRMHandler_UpdateWRMNotificationRequestTime(uint64_t a1, double a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(double *)(a1 + 40) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    int v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      uint64_t v7 = "VCWRMHandler_UpdateWRMNotificationRequestTime";
      __int16 v8 = 1024;
      int v9 = 73;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

uint64_t VCWRMHandler_ProcessLocalWRMNotification(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      __int16 v12 = *MEMORY[0x1E4F47A50];
      BOOL v13 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v13) {
        return result;
      }
      int v14 = 136315650;
      uint64_t v15 = v11;
      __int16 v16 = 2080;
      uint64_t v17 = "VCWRMHandler_ProcessLocalWRMNotification";
      __int16 v18 = 1024;
      int v19 = 81;
      _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v14, 0x1Cu);
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  unsigned int v3 = a2[1];
  if (v3 > 1 || (*a2 - 1) > 1) {
    return 0;
  }
  uint64_t result = 1;
  if (a3) {
    int v6 = 2;
  }
  else {
    int v6 = 1;
  }
  if (*a2 != v6)
  {
    if (*(_DWORD *)(a1 + 8) != v3)
    {
      *(_DWORD *)(a1 + 8) = v3;
      *(double *)(a1 + 24) = micro();
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        __int16 v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v9 = *(_DWORD *)(a1 + 8);
          int v14 = 136315906;
          if (v9) {
            uint64_t v10 = "WiFi";
          }
          else {
            uint64_t v10 = "Cellular";
          }
          uint64_t v15 = v7;
          __int16 v16 = 2080;
          uint64_t v17 = "VCWRMHandler_ProcessLocalWRMNotification";
          __int16 v18 = 1024;
          int v19 = 99;
          __int16 v20 = 2080;
          uint64_t v21 = v10;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: Receive and cache local iRAT suggestion to %s.", (uint8_t *)&v14, 0x26u);
        }
      }
    }
    return 2;
  }
  return result;
}

uint64_t _VCJBTargetEstimatorSynchronizer_Configure(_OWORD *a1, _OWORD *a2)
{
  if (*(_DWORD *)a2 >= 4u)
  {
    uint64_t v2 = 2151874561;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCJBTargetEstimatorSynchronizer_Configure_cold_1();
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
    a1[22] = *a2;
    long long v3 = a2[1];
    long long v4 = a2[2];
    long long v5 = a2[4];
    a1[25] = a2[3];
    a1[26] = v5;
    a1[23] = v3;
    a1[24] = v4;
    long long v6 = a2[5];
    long long v7 = a2[6];
    long long v8 = a2[8];
    a1[29] = a2[7];
    a1[30] = v8;
    a1[27] = v6;
    a1[28] = v7;
    long long v9 = a2[9];
    long long v10 = a2[10];
    long long v11 = a2[11];
    *(_OWORD *)((char *)a1 + 540) = *(_OWORD *)((char *)a2 + 188);
    a1[32] = v10;
    a1[33] = v11;
    a1[31] = v9;
  }
  return v2;
}

uint64_t _VCJBTargetEstimatorSynchronizer_StoreCurrentSize(uint64_t a1, unsigned int a2, float a3, double a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  signed int v5 = atomic_load((unsigned int *)(a1 + 344));
  if (v5 <= (int)a2)
  {
    uint64_t v9 = 2151874581;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      signed int v13 = v5;
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      __int16 v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v15 = v11;
        __int16 v16 = 2080;
        uint64_t v17 = "_VCJBTargetEstimatorSynchronizer_StoreCurrentSize";
        __int16 v18 = 1024;
        int v19 = 143;
        __int16 v20 = 1024;
        unsigned int v21 = a2;
        __int16 v22 = 1024;
        signed int v23 = v13;
        _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid clientID clientID=%d currentClientID=%d", buf, 0x28u);
      }
    }
  }
  else
  {
    unint64_t v6 = a1 + 96;
    long long v7 = (unint64_t *)(a1 + 96 + 24 * a2);
    if ((unint64_t)v7 >= a1 + 336 || (unint64_t)v7 < v6) {
      __break(0x5519u);
    }
    uint64_t v9 = 0;
    atomic_store((uint64_t)(a3 * 100000.0), v7);
    atomic_store((uint64_t)(a4 * 100000.0), (unint64_t *)(v6 + 24 * a2 + 8));
  }
  return v9;
}

uint64_t _VCJBTargetEstimatorSynchronizerClassRegister(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t VCJBTargetEstimatorSynchronizer_Create(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a3)
    {
      if (VCJBTargetEstimatorSynchronizerGetTypeID_initOnce != -1) {
        dispatch_once_f(&VCJBTargetEstimatorSynchronizerGetTypeID_initOnce, &VCJBTargetEstimatorSynchronizerGetTypeID_typeID, (dispatch_function_t)_VCJBTargetEstimatorSynchronizerClassRegister);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (Instance)
      {
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v7 = VRTraceErrorLogLevelToCSTR();
          long long v8 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v9 = *(_DWORD *)a3;
            int v14 = 136316418;
            uint64_t v15 = v7;
            __int16 v16 = 2080;
            uint64_t v17 = "VCJBTargetEstimatorSynchronizer_Create";
            __int16 v18 = 1024;
            int v19 = 286;
            __int16 v20 = 2048;
            uint64_t v21 = Instance;
            __int16 v22 = 1024;
            int v23 = v9;
            __int16 v24 = 2080;
            int v25 = (char *)a3 + 4;
            _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d targetSynchronizer[%p] config.policy=%d dumpNamePrefix=%s", (uint8_t *)&v14, 0x36u);
          }
        }
        uint64_t v10 = 96;
        int64x2_t v11 = vdupq_n_s64(0x8000000000000000);
        do
        {
          *(int64x2_t *)(Instance + v10) = v11;
          v10 += 24;
        }
        while (v10 != 336);
        *(void *)(Instance + 336) = 0;
        *(void *)(Instance + 344) = 0;
        pthread_mutex_init((pthread_mutex_t *)(Instance + 32), 0);
        if (_VCJBTargetEstimatorSynchronizer_Configure((_OWORD *)Instance, a3))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCJBTargetEstimatorSynchronizer_Create_cold_4();
            }
          }
          uint64_t v12 = 2151874561;
          CFRelease((CFTypeRef)Instance);
        }
        else
        {
          uint64_t v12 = 0;
          *a2 = Instance;
        }
      }
      else if (ErrorLogLevelForModule < 3)
      {
        return 2151874563;
      }
      else
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t v12 = 2151874563;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCJBTargetEstimatorSynchronizer_Create_cold_3();
        }
      }
    }
    else
    {
      uint64_t v12 = 2151874561;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCJBTargetEstimatorSynchronizer_Create_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v12 = 2151874561;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJBTargetEstimatorSynchronizer_Create_cold_1();
      }
    }
  }
  return v12;
}

uint64_t VCJBTargetEstimatorSynchronizer_RegisterClient(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unint64_t v6 = (pthread_mutex_t *)(a1 + 32);
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    uint64_t v8 = 0;
    unint64_t v9 = a1 + 96;
    uint64_t v10 = (_DWORD *)(a1 + 112);
    do
    {
      signed int v11 = atomic_load((unsigned int *)(a1 + 344));
      if (v8 >= v11) {
        break;
      }
      if (*v10 == a3)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v22 = VRTraceErrorLogLevelToCSTR();
          int v23 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v26 = 136316162;
            uint64_t v27 = v22;
            __int16 v28 = 2080;
            int v29 = "VCJBTargetEstimatorSynchronizer_RegisterClient";
            __int16 v30 = 1024;
            int v31 = 310;
            __int16 v32 = 2080;
            *(void *)uint64_t v33 = FourccToCStr(a3);
            *(_WORD *)&v33[8] = 1024;
            *(_DWORD *)&unsigned char v33[10] = v8;
            _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Previously registered client for streamGroupID=%s with currentClientID=%d", (uint8_t *)&v26, 0x2Cu);
          }
        }
        *a2 = v8;
        goto LABEL_28;
      }
      ++v8;
      v10 += 6;
    }
    while (v8 != 10);
    int v12 = atomic_load((unsigned int *)(a1 + 344));
    do
    {
      int v13 = v12;
      if (v12 > 9) {
        break;
      }
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 344), (unsigned int *)&v12, v12 + 1);
    }
    while (v12 != v13);
    unint64_t v14 = v9 + 24 * v13;
    if (v14 >= a1 + 336 || v14 < v9)
    {
      __break(0x5519u);
      return result;
    }
    *(_DWORD *)(v9 + 24 * v13 + 16) = a3;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      uint64_t v17 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 136316418;
        uint64_t v27 = v16;
        __int16 v28 = 2080;
        int v29 = "VCJBTargetEstimatorSynchronizer_RegisterClient";
        __int16 v30 = 1024;
        int v31 = 326;
        __int16 v32 = 2048;
        *(void *)uint64_t v33 = a1;
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)&unsigned char v33[10] = v13;
        __int16 v34 = 2080;
        uint64_t v35 = FourccToCStr(a3);
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d targetSynchronizer[%p] currentClientID=%d streamGroupID=%s", (uint8_t *)&v26, 0x36u);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() > 7)
    {
      uint64_t v18 = VRTraceErrorLogLevelToCSTR();
      int v19 = *MEMORY[0x1E4F47A50];
      __int16 v20 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = FourccToCStr(a3);
          int v26 = 136316162;
          uint64_t v27 = v18;
          __int16 v28 = 2080;
          int v29 = "VCJBTargetEstimatorSynchronizer_RegisterClient";
          __int16 v30 = 1024;
          int v31 = 329;
          __int16 v32 = 1024;
          *(_DWORD *)uint64_t v33 = v13;
          *(_WORD *)&v33[4] = 2080;
          *(void *)&v33[6] = v21;
          _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Succesfully registered Client ID currentClientID=%d streamGroupID=%s", (uint8_t *)&v26, 0x2Cu);
        }
      }
      else if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        int v25 = FourccToCStr(a3);
        int v26 = 136316162;
        uint64_t v27 = v18;
        __int16 v28 = 2080;
        int v29 = "VCJBTargetEstimatorSynchronizer_RegisterClient";
        __int16 v30 = 1024;
        int v31 = 329;
        __int16 v32 = 1024;
        *(_DWORD *)uint64_t v33 = v13;
        *(_WORD *)&v33[4] = 2080;
        *(void *)&v33[6] = v25;
        _os_log_debug_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Succesfully registered Client ID currentClientID=%d streamGroupID=%s", (uint8_t *)&v26, 0x2Cu);
      }
    }
    *a2 = v13;
LABEL_28:
    pthread_mutex_unlock(v6);
    return 0;
  }
  else
  {
    uint64_t v24 = 2151874561;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJBTargetEstimatorSynchronizer_RegisterClient_cold_1();
      }
    }
  }
  return v24;
}

uint64_t VCJBTargetEstimatorSynchronizer_SetPolicy(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = 0;
    *(_DWORD *)(a1 + 352) = a2;
  }
  else
  {
    uint64_t v2 = 2151874561;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJBTargetEstimatorSynchronizer_SetPolicy_cold_1();
      }
    }
  }
  return v2;
}

uint64_t VCJBTargetEstimatorSynchronizer_GetSyncTarget(uint64_t a1, unsigned int a2, float *a3, float a4, float a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    double v10 = a5;
    if ((_VCJBTargetEstimatorSynchronizer_StoreCurrentSize(a1, a2, a4, a5) & 0x80000000) != 0)
    {
      uint64_t v17 = 2151874581;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_2();
        }
      }
    }
    else
    {
      int v11 = atomic_load((unsigned int *)(a1 + 344));
      if (v11 <= 1)
      {
        *a3 = a4;
      }
      else
      {
        int64_t v12 = (uint64_t)(a4 * 100000.0);
        switch(*(_DWORD *)(a1 + 352))
        {
          case 0:
            goto LABEL_22;
          case 1:
            float v13 = (float)v12;
            uint64_t v14 = a1;
            float v15 = a5;
            int v16 = 1;
            goto LABEL_13;
          case 2:
            float v13 = (float)v12;
            uint64_t v14 = a1;
            float v15 = a5;
            int v16 = 0;
LABEL_13:
            int64_t v12 = _VCJBTargetEstimatorSynchronizer_ApplyPolicy_MinMax(v14, v16, v13, v15);
            goto LABEL_22;
          case 3:
            signed int v18 = atomic_load((unsigned int *)(a1 + 348));
            int v19 = (unint64_t *)(a1 + 96 + 24 * v18);
            if ((unint64_t)v19 >= a1 + 336 || (unint64_t)v19 < a1 + 96) {
              goto LABEL_55;
            }
            unint64_t v21 = atomic_load(v19);
            if (v21 == 0x8000000000000000) {
              int64_t v12 = (uint64_t)(float)v12;
            }
            else {
              int64_t v12 = v21;
            }
LABEL_22:
            atomic_store(v12, (unint64_t *)(a1 + 336));
            *a3 = (float)v12 / 100000.0;
            if (*(unsigned char *)(a1 + 16)) {
              goto LABEL_59;
            }
            uint32_t v37 = arc4random();
            *(_DWORD *)(a1 + 20) = v37;
            unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v38 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v62 = v38;
            long long v63 = v38;
            long long v60 = v38;
            long long v61 = v38;
            long long v58 = v38;
            long long v59 = v38;
            long long v56 = v38;
            long long v57 = v38;
            long long v54 = v38;
            long long v55 = v38;
            *(_OWORD *)CMTime __str = v38;
            long long v53 = v38;
            snprintf(__str, 0xC8uLL, "%010u-%s", v37, (const char *)(a1 + 356));
            size_t v39 = VCBoundsSafety_IndexableToNulTerminated(__str, 0xC8uLL);
            *(void *)(a1 + 24) = LogDump_OpenLog(v39, (uint64_t)"avconference", (uint64_t)".jbsyncdump", (char)"", 9, (char)"");
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v40 = VRTraceErrorLogLevelToCSTR();
              int v41 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v42 = *(void *)(a1 + 24);
                *(_DWORD *)CMTime buf = 136316418;
                *(void *)&uint8_t buf[4] = v40;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VCJBTargetEstimatorSynchronizer_CheckIfDumpIsInitialized";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = 163;
                *(_WORD *)&unsigned char buf[28] = 2048;
                *(void *)&buf[30] = a1;
                *(_WORD *)&buf[38] = 2048;
                *(void *)&uint8_t buf[40] = v42;
                *(_WORD *)&unsigned char buf[48] = 2080;
                *(void *)&buf[50] = __str;
                _os_log_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d synchronizer[%p] _logDump=%p dumpIDString=%s", buf, 0x3Au);
              }
            }
            *(unsigned char *)(a1 + 16) = 1;
            if (!*(void *)(a1 + 24)) {
              goto LABEL_59;
            }
            memcpy(buf, "Time\tClientID\tstreamGroupID\t", 0x190uLL);
            for (int i = 0; i != 10; __sprintf_chk((char *)buf, 0, 0x190uLL, "%sClient%i\t", (const char *)buf, i++))
              ;
            __sprintf_chk((char *)buf, 0, 0x190uLL, "%sSyncTarget\t", (const char *)buf);
            VRLogfilePrintSync(*(FILE ***)(a1 + 24), "%s\n", v44, v45, v46, v47, v48, v49, (char)buf);
            if (*(unsigned char *)(a1 + 16))
            {
LABEL_59:
              if (*(void *)(a1 + 24))
              {
                memset(buf, 0, 400);
                __sprintf_chk((char *)buf, 0, 0x190uLL, "%s%d\t", (const char *)buf, a2);
                unint64_t v22 = a1 + 96;
                unint64_t v23 = a1 + 96 + 24 * a2;
                if (v23 >= a1 + 336 || v23 < v22)
                {
LABEL_55:
                  __break(0x5519u);
                  JUMPOUT(0x1E209F114);
                }
                __sprintf_chk((char *)buf, 0, 0x190uLL, "%s%d\t", (const char *)buf, *(_DWORD *)(v22 + 24 * a2 + 16));
                for (uint64_t j = 0; j != 240; j += 24)
                {
                  uint64_t v25 = atomic_load((unint64_t *)(v22 + j));
                  if ((float)((float)v25 / 100000.0) >= 0.0) {
                    __sprintf_chk((char *)buf, 0, 0x190uLL, "%s%.4f\t");
                  }
                  else {
                    __sprintf_chk((char *)buf, 0, 0x190uLL, "%s%c\t");
                  }
                }
                uint64_t v26 = atomic_load((unint64_t *)(a1 + 336));
                __sprintf_chk((char *)buf, 0, 0x190uLL, "%s%.4f\t", (const char *)buf, (float)v26 / 100000.0);
                VRLogfilePrintWithTimestamp(*(void *)(a1 + 24), "%s\n", v27, v28, v29, v30, v31, v32, (char)buf);
              }
            }
            break;
          default:
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_4();
              }
            }
            uint64_t v17 = 2151874581;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_3();
              }
            }
            return v17;
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        return 0;
      }
      uint64_t v33 = VRTraceErrorLogLevelToCSTR();
      __int16 v34 = *MEMORY[0x1E4F47A50];
      uint64_t v35 = *MEMORY[0x1E4F47A50];
      if (!*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          double v51 = *a3;
          *(_DWORD *)CMTime buf = 136316930;
          *(void *)&uint8_t buf[4] = v33;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "VCJBTargetEstimatorSynchronizer_GetSyncTarget";
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 384;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(void *)&buf[30] = a1;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&uint8_t buf[40] = a2;
          *(_WORD *)&unsigned char buf[44] = 2048;
          *(double *)&buf[46] = a4;
          *(_WORD *)&buf[54] = 2048;
          *(double *)&unsigned char buf[56] = v10;
          *(_WORD *)&unsigned char buf[64] = 2048;
          *(double *)&buf[66] = v51;
          _os_log_debug_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEBUG, " [%s] %s:%d targetSynchronizer[%p] clientID=%d currentTargetSize=%4.4f arrivalTime=%4.4f syncTargetSize=%4.4f", buf, 0x4Au);
        }
        return 0;
      }
      uint64_t v17 = 0;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        double v36 = *a3;
        *(_DWORD *)CMTime buf = 136316930;
        *(void *)&uint8_t buf[4] = v33;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCJBTargetEstimatorSynchronizer_GetSyncTarget";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 384;
        *(_WORD *)&unsigned char buf[28] = 2048;
        *(void *)&buf[30] = a1;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = a2;
        *(_WORD *)&unsigned char buf[44] = 2048;
        *(double *)&buf[46] = a4;
        *(_WORD *)&buf[54] = 2048;
        *(double *)&unsigned char buf[56] = v10;
        *(_WORD *)&unsigned char buf[64] = 2048;
        *(double *)&buf[66] = v36;
        _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d targetSynchronizer[%p] clientID=%d currentTargetSize=%4.4f arrivalTime=%4.4f syncTargetSize=%4.4f", buf, 0x4Au);
        return 0;
      }
    }
  }
  else
  {
    uint64_t v17 = 2151874561;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_1();
      }
    }
  }
  return v17;
}

void _VCJBTargetEstimatorSynchronizer_Init(uint64_t a1)
{
}

uint64_t _VCJBTargetEstimatorSynchronizer_Finalize(unint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() > 6)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    long long v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136316162;
      uint64_t v7 = v2;
      __int16 v8 = 2080;
      unint64_t v9 = "_VCJBTargetEstimatorSynchronizer_Finalize";
      __int16 v10 = 1024;
      int v11 = 73;
      __int16 v12 = 2048;
      unint64_t v13 = a1;
      __int16 v14 = 2080;
      unint64_t v15 = a1 + 356;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d targetSynchronizer[%p] dumpNamePrefix=%s", (uint8_t *)&v6, 0x30u);
    }
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    LogDump_CloseLog(v4);
    *(void *)(a1 + 24) = 0;
  }
  if (a1 + 560 <= a1) {
    __break(0x5519u);
  }
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
}

uint64_t _VCJBTargetEstimatorSynchronizer_ApplyPolicy_MinMax(uint64_t a1, int a2, float a3, float a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = atomic_load((unsigned int *)(a1 + 344));
  uint64_t v26 = (uint64_t)a3;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = a1 + 96;
    __int16 v8 = (unint64_t *)(a1 + 336);
    uint64_t v9 = (uint64_t)(a4 * 100000.0);
    __int16 v10 = "";
    int v11 = (unint64_t *)(a1 + 96);
    int64_t v28 = (uint64_t)a3;
    do
    {
      if (v11 >= v8 || (unint64_t)v11 < v7) {
        __break(0x5519u);
      }
      unint64_t v12 = atomic_load(v11 + 1);
      uint64_t v13 = v9 - v12;
      if ((uint64_t)(v9 - v12) < 200001)
      {
        int64_t v20 = atomic_load(v11);
        if (v20 != 0x8000000000000000)
        {
          int64_t v21 = v28;
          BOOL v22 = v28 < v20;
          if (!a2) {
            BOOL v22 = v28 > v20;
          }
          int v23 = v6 ^ 1 | v22;
          uint64_t v6 = v6 | v23;
          if (v23) {
            int64_t v21 = v20;
          }
          int64_t v28 = v21;
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v14 = v6;
        unint64_t v15 = v10;
        double v16 = (double)v13;
        uint64_t v17 = VRTraceErrorLogLevelToCSTR();
        signed int v18 = *MEMORY[0x1E4F47A50];
        int v19 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v30 = v17;
            __int16 v31 = 2080;
            uint64_t v32 = "_VCJBTargetEstimatorSynchronizer_ApplyPolicy_MinMax";
            __int16 v33 = 1024;
            int v34 = 198;
            __int16 v35 = 1024;
            int v36 = v5;
            __int16 v37 = 2048;
            double v38 = v16 / 200000.0;
            _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Ignoring old jitter values i=%d timeDiff=%4.2f", buf, 0x2Cu);
          }
        }
        else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v30 = v17;
          __int16 v31 = 2080;
          uint64_t v32 = "_VCJBTargetEstimatorSynchronizer_ApplyPolicy_MinMax";
          __int16 v33 = 1024;
          int v34 = 198;
          __int16 v35 = 1024;
          int v36 = v5;
          __int16 v37 = 2048;
          double v38 = v16 / 200000.0;
          _os_log_debug_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Ignoring old jitter values i=%d timeDiff=%4.2f", buf, 0x2Cu);
        }
        __int16 v10 = v15;
        uint64_t v6 = v14;
      }
      ++v5;
      v11 += 3;
    }
    while (v4 != v5);
    if (v6)
    {
      uint64_t v24 = v28;
      atomic_store(v28, v8);
      return (uint64_t)(float)v24;
    }
  }
  return v26;
}

uint64_t VCMediaNegotiationBlobV2StreamGroupEncodeDecodeFeaturesReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        Data = (void *)PBReaderReadData();

        *(void *)(a1 + 8) = Data;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t NetworkReceiveProc(void *a1)
{
  if (a1) {
    return [a1 networkReceivePackets];
  }
  else {
    return -2145452030;
  }
}

void decoderFrameCallback(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, long long *a6)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        decoderFrameCallback_cold_1();
      }
    }
  }
  else if (a5)
  {
    long long v6 = *a6;
    uint64_t v7 = *((void *)a6 + 2);
    [a1 showDecodedFrame:a5 atTime:&v6];
  }
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID(const __CFNumber *a1, uint64_t a2, void *a3)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (a1)
    {
      if (a2)
      {
        v7[0] = 0;
        if ((VCSpatialAudioMetadata_SpatialAudioSourceID(a2, v7) & 0x80000000) != 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_4();
            }
          }
        }
        else
        {
          unsigned int valuePtr = -1431655766;
          if (CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr) == 1)
          {
            uint64_t v5 = [NSNumber numberWithUnsignedLongLong:v7[0]];
            objc_msgSend(a3, "setObject:forKeyedSubscript:", v5, objc_msgSend(NSNumber, "numberWithUnsignedInt:", valuePtr));
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_5();
            }
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_1();
    }
  }
}

void sub_1E20B6EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _VCVideoReceiverRealtime_SetExternalOutputLatency()
{
}

void VCVideoReceiver_SetExternalOutputVideoLatency(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFDictionaryRef v1 = *(void (**)(void))(a1 + 8);
    v1();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    long long v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      uint64_t v7 = "VCVideoReceiver_SetExternalOutputVideoLatency";
      __int16 v8 = 1024;
      int v9 = 165;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d videoReceiver is NULL", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

void _VCAllocatorMultiQueueCallback_Release(uint64_t a1)
{
  v1[1] = *(CFAllocatorRef **)MEMORY[0x1E4F143B8];
  v1[0] = (CFAllocatorRef *)a1;
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    _VCAllocatorMultiQueue_FinalizeInfo(a1);
    _VCAllocatorMultiQueue_ReleaseInfo(v1);
  }
}

void *_VCAllocatorMultiQueueCallback_Alloc(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(void *)(a3 + 16);
  if (!v5)
  {
LABEL_5:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315650;
        uint64_t v24 = v10;
        __int16 v25 = 2080;
        uint64_t v26 = "_VCAllocatorMultiQueue_FindBufferQueue";
        __int16 v27 = 1024;
        int v28 = 172;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Unable to allocate buffer!", (uint8_t *)&v23, 0x1Cu);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      char v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136316162;
        uint64_t v24 = v12;
        __int16 v25 = 2080;
        uint64_t v26 = "_VCAllocatorMultiQueueCallback_Alloc";
        __int16 v27 = 1024;
        int v28 = 218;
        __int16 v29 = 2080;
        uint64_t v30 = a3 + 24;
        __int16 v31 = 1024;
        int v32 = a1;
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Allocator[%s] was unable to find a relevant buffer queue. Requested size:%d", (uint8_t *)&v23, 0x2Cu);
      }
    }
    BOOL v14 = CFAllocatorAllocate(*(CFAllocatorRef *)a3, a1 + 8, 0);
    if (v14)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + 100), 1u, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + 96), 1u, memory_order_relaxed);
      *BOOL v14 = 0;
      return v14 + 1;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 0;
    }
    uint64_t v20 = VRTraceErrorLogLevelToCSTR();
    unint64_t v21 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int v23 = 136316162;
    uint64_t v24 = v20;
    __int16 v25 = 2080;
    uint64_t v26 = "_VCAllocatorMultiQueueCallback_Alloc";
    __int16 v27 = 1024;
    int v28 = 226;
    __int16 v29 = 2080;
    uint64_t v30 = a3 + 24;
    __int16 v31 = 1024;
    int v32 = a1;
    goto LABEL_26;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 1;
  while (1)
  {
    __int16 v8 = (OSQueueHead *)(a3 + v6);
    if (*(void *)(a3 + v6 + 112) >= a1) {
      break;
    }
    BOOL v9 = v5 > v7++;
    v6 += 48;
    if (!v9) {
      goto LABEL_5;
    }
  }
  double v16 = OSAtomicDequeue(v8 + 9, 0);
  char v17 = v8 + 7;
  if (!v16)
  {
    double v16 = CFAllocatorAllocate(*(CFAllocatorRef *)a3, (CFIndex)v17->opaque1 + 8, 0);
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + v6 + 120), 1u, memory_order_relaxed);
    if (!v16)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        return 0;
      }
      uint64_t v22 = VRTraceErrorLogLevelToCSTR();
      unint64_t v21 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v23 = 136316162;
      uint64_t v24 = v22;
      __int16 v25 = 2080;
      uint64_t v26 = "_VCAllocatorMultiQueueCallback_Alloc";
      __int16 v27 = 1024;
      int v28 = 245;
      __int16 v29 = 2080;
      uint64_t v30 = a3 + 24;
      __int16 v31 = 1024;
      int v32 = a1;
LABEL_26:
      _os_log_error_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_ERROR, " [%s] %s:%d Allocator[%s] Failed to allocate memory. Size:%d", (uint8_t *)&v23, 0x2Cu);
      return 0;
    }
  }
  *double v16 = v17;
  uint64_t result = v16 + 1;
  double v18 = (double)(int)(atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + v6 + 124), 1u, memory_order_relaxed) + 1);
  double v19 = *(double *)(a3 + v6 + 128);
  if (v19 > v18) {
    double v18 = v18 * 0.0196078431 + v19 * 0.980392157;
  }
  *(double *)(a3 + v6 + 128) = v18;
  return result;
}

char *_VCAllocatorMultiQueueCallback_Realloc(void *a1, unint64_t a2, uint64_t a3, CFAllocatorRef *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)(a1 - 1);
  unsigned int v7 = (size_t *)*(a1 - 1);
  if (v7)
  {
    if (*v7 <= a2)
    {
      uint64_t v11 = _VCAllocatorMultiQueueCallback_Alloc(a2, (uint64_t)v6, (uint64_t)a4);
      BOOL v9 = v11;
      if (v11)
      {
        memcpy(v11, a1, *v7);
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        char v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v15 = 136316162;
          uint64_t v16 = v12;
          __int16 v17 = 2080;
          double v18 = "_VCAllocatorMultiQueueCallback_Realloc";
          __int16 v19 = 1024;
          int v20 = 265;
          __int16 v21 = 2080;
          uint64_t v22 = a4 + 3;
          __int16 v23 = 1024;
          int v24 = a2;
          _os_log_error_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_ERROR, " [%s] %s:%d Allocator[%s] Memory reallocation failed. Size:%d", (uint8_t *)&v15, 0x2Cu);
        }
      }
      _VCAllocatorMultiQueueCallback_Dealloc(a1, (uint64_t)a4);
    }
    else
    {
      return (char *)a1;
    }
  }
  else
  {
    uint64_t v10 = (char *)CFAllocatorReallocate(*a4, v6, a2 + 8, 0);
    if (v10) {
      return v10 + 8;
    }
    else {
      return 0;
    }
  }
  return (char *)v9;
}

void _VCAllocatorMultiQueueCallback_Dealloc(void *__new, uint64_t a2)
{
  uint64_t v2 = (char *)(__new - 1);
  uint64_t v3 = *(__new - 1);
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 12), 0xFFFFFFFF, memory_order_relaxed);
    if (!*(unsigned char *)(a2 + 104) || (double v4 = ceil(*(double *)(v3 + 16)), v4 + v4 >= (double)*(int *)(v3 + 8)))
    {
      OSAtomicEnqueue((OSQueueHead *)(v3 + 32), v2, 0);
      return;
    }
    unint64_t v5 = (atomic_uint *)(v3 + 8);
  }
  else
  {
    unint64_t v5 = (atomic_uint *)(a2 + 100);
  }
  atomic_fetch_add_explicit(v5, 0xFFFFFFFF, memory_order_relaxed);
  CFAllocatorDeallocate(*(CFAllocatorRef *)a2, v2);
}

void _VCAllocatorMultiQueue_FinalizeInfo(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v2 = 0;
      unsigned int v3 = 0;
      uint64_t v18 = a1 + 24;
      double v4 = (os_log_t *)MEMORY[0x1E4F47A50];
      do
      {
        uint64_t v5 = a1 + 48 * v2;
        if (*(unsigned char *)(v5 + 136))
        {
          uint64_t v6 = OSAtomicDequeue((OSQueueHead *)(a1 + 48 * v2 + 144), 0);
          if (v6)
          {
            unsigned int v7 = v6;
            do
            {
              atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 48 * v2 + 120), 0xFFFFFFFF, memory_order_relaxed);
              CFAllocatorDeallocate(*(CFAllocatorRef *)a1, v7);
              unsigned int v7 = OSAtomicDequeue((OSQueueHead *)(a1 + 48 * v2 + 144), 0);
            }
            while (v7);
          }
          uint64_t v8 = a1 + 48 * v2;
          int v10 = *(_DWORD *)(v8 + 120);
          BOOL v9 = (int *)(v8 + 120);
          if (v10)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v11 = VRTraceErrorLogLevelToCSTR();
              uint64_t v12 = *v4;
              if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
              {
                int v13 = *v9;
                uint64_t v14 = *(void *)(v5 + 112);
                *(_DWORD *)CMTime buf = 136316418;
                uint64_t v20 = v11;
                __int16 v21 = 2080;
                uint64_t v22 = "_VCAllocatorMultiQueue_CleanupQueue";
                __int16 v23 = 1024;
                int v24 = 62;
                __int16 v25 = 2080;
                uint64_t v26 = v18;
                __int16 v27 = 1024;
                int v28 = v13;
                __int16 v29 = 2048;
                uint64_t v30 = v14;
                _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Allocator=%s. %d buffer leak(s) detected queue with size[%zu]", buf, 0x36u);
              }
            }
          }
        }
        uint64_t v2 = ++v3;
      }
      while (*(void *)(a1 + 16) > (unint64_t)v3);
    }
    if (*(_DWORD *)(a1 + 100))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        uint64_t v16 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v17 = *(_DWORD *)(a1 + 100);
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v20 = v15;
          __int16 v21 = 2080;
          uint64_t v22 = "_VCAllocatorMultiQueue_FinalizeInfo";
          __int16 v23 = 1024;
          int v24 = 73;
          __int16 v25 = 2080;
          uint64_t v26 = a1 + 24;
          __int16 v27 = 1024;
          int v28 = v17;
          _os_log_error_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_ERROR, " [%s] %s:%d Allocator=%s. %d buffer leak(s) not associated with a queue", buf, 0x2Cu);
        }
      }
    }
    if (*(void *)a1) {
      CFRelease(*(CFTypeRef *)a1);
    }
    *(void *)a1 = 0;
  }
}

void _VCAllocatorMultiQueue_ReleaseInfo(CFAllocatorRef **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      CFAllocatorRef v3 = *v2;
      CFAllocatorDeallocate(*v2, v2);
      if (v3) {
        CFRelease(v3);
      }
      *a1 = 0;
    }
  }
}

void OUTLINED_FUNCTION_5_11(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x30u);
}

char *CopyRemoteDisplayWithoutQuotes(char *__dst, char *a2, char *a3, char *__source)
{
  if (!*a2)
  {
    if (*a3) {
      a2 = a3;
    }
    else {
      a2 = __source;
    }
    goto LABEL_9;
  }
  if (*a2 != 34)
  {
LABEL_9:
    strlcpy(__dst, a2, 0x56uLL);
    return __dst;
  }
  strlcpy(__dst, a2 + 1, 0x56uLL);
  int v5 = strlen(__dst) - 1;
  if (__dst[v5] == 34) {
    __dst[v5] = 0;
  }
  return __dst;
}

uint64_t SIPSetMessageDelegateForCallID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (v5)
  {
    SIPClientDictionaryCInterface_SetObjectForKey(*(void **)(v5 + 136), (const char *)@"SIPMessageReceivedHandler", a3, a2);
    CheckOutHandleDebug();
    return 0;
  }
  else
  {
    uint64_t v6 = 2148139010;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPSetMessageDelegateForCallID_cold_1();
      }
    }
  }
  return v6;
}

uint64_t SIPSetCellConditionChangeHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (v5)
  {
    TPSetCellConditionChangeHandler(*(void *)(v5 + 24), a2, a3);
    CheckOutHandleDebug();
    return 0;
  }
  else
  {
    uint64_t v6 = 2148139009;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPSetCellConditionChangeHandler_cold_1();
      }
    }
  }
  return v6;
}

uint64_t SIPCreateHandle(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a2)
  {
    if (a4 < 2)
    {
      BOOL v9 = malloc_type_calloc(1uLL, 0x90uLL, 0x10A0040338A4F97uLL);
      if (v9)
      {
        uint64_t v10 = v9;
        v9[3] = 1;
        *(void *)BOOL v9 = 0;
        v9[5] = VCUniqueIDGenerator_GenerateID();
        pthread_mutex_init((pthread_mutex_t *)v10 + 1, 0);
        *((void *)v10 + 4) = a2;
        *((void *)v10 + 5) = a3;
        uint64_t v11 = SIPClientDictionaryCInterface_Create();
        uint64_t v12 = "TCP";
        *((void *)v10 + 17) = v11;
        if (!a4) {
          uint64_t v12 = "UDP";
        }
        DEFAULT_TRANSPORT = v12;
        uint64_t Handle = CreateHandle();
        *a1 = Handle;
        if (Handle == 0xFFFFFFFFLL)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              SIPCreateHandle_cold_4();
            }
          }
          pthread_mutex_destroy((pthread_mutex_t *)v10 + 1);
          free(v10);
          return 2148139013;
        }
        else
        {
          uint64_t v14 = TPCreateHandle((uint64_t *)v10 + 3, a4, (uint64_t)TUMsgCallback, (uint64_t)a1, 0, 0, 0, 0, 0, 0, 0);
          if ((v14 & 0x80000000) != 0)
          {
            uint64_t v5 = v14;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                SIPCreateHandle_cold_5();
              }
            }
            CheckOutHandleDebug();
            pthread_mutex_destroy((pthread_mutex_t *)v10 + 1);
            free(v10);
          }
          else
          {
            return 0;
          }
        }
      }
      else
      {
        uint64_t v5 = 2148139011;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPCreateHandle_cold_3();
          }
        }
      }
    }
    else
    {
      uint64_t v5 = 2147549185;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPCreateHandle_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 2147549185;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPCreateHandle_cold_1();
      }
    }
  }
  return v5;
}

uint64_t TUMsgCallback(uint64_t *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = *a1;
  pthread_setname_np("com.apple.AVConference.SIP.tuMessageCallbackProc");
  if (a2)
  {
    uint64_t v5 = CheckInHandleDebug();
    if (v5)
    {
      uint64_t v6 = v5;
      if (!*(_DWORD *)(a2 + 1008)) {
        UpdateCompressionMethodForMsg(a2, *(_DWORD *)(v5 + 16));
      }
      if (*(_DWORD *)(a2 + 572))
      {
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v7 = DLFindWithSipMsgAndLock(&v31, a2);
        if ((v7 & 0x80000000) == 0)
        {
          DLGetCallID(v31, (_DWORD *)(a2 + 572));
          DLUnlock();
        }
      }
      if (*(_DWORD *)(a2 + 4) == 1)
      {
        BOOL v9 = (void *(__cdecl *)(void *))SIPCancelProc;
        switch(*(_DWORD *)(a2 + 8))
        {
          case 1:
            uint64_t v10 = DLFindWithSipMsgAndLock(&v31, a2);
            uint64_t v11 = SIPNewCallProc;
            if ((v10 & 0x80000000) != 0) {
              goto LABEL_33;
            }
            uint64_t v7 = DLPutMsg(v31, a2, 0);
            if ((v7 & 0x80000000) != 0) {
              FreeSipMsg((void *)a2);
            }
            DLUnlock();
            goto LABEL_61;
          case 2:
            goto LABEL_46;
          case 4:
            uint64_t v11 = SIPHangupProc;
            goto LABEL_34;
          case 5:
            goto LABEL_35;
          case 7:
            uint64_t v12 = *(uint64_t **)(a2 + 528);
            uint64_t v11 = SIPMessageProc;
            if (!v12) {
              goto LABEL_34;
            }
            uint64_t v13 = *v12;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v14 = VRTraceErrorLogLevelToCSTR();
              uint64_t v15 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf.__sig) = 136315906;
                *(uint64_t *)((char *)&buf.__sig + 4) = v14;
                *(_WORD *)&buf.__opaque[4] = 2080;
                *(void *)&buf.__opaque[6] = "TUMsgCallback";
                *(_WORD *)&buf.__opaque[14] = 1024;
                *(_DWORD *)&buf.__opaque[16] = 1555;
                *(_WORD *)&buf.__opaque[20] = 2048;
                *(void *)&buf.__opaque[22] = v13;
                _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d()()()()() SKE msg recved (%lu)", (uint8_t *)&buf, 0x26u);
              }
            }
            uint64_t v10 = DLFindWithSipMsgAndLock(&v31, a2);
            uint64_t v11 = SIPMessageProc;
            if ((v10 & 0x80000000) != 0)
            {
LABEL_33:
              uint64_t v7 = v10;
            }
            else
            {
              LODWORD(v30) = 0;
              uint64_t v7 = DLGetDoingKeyExchange(v31, &v30);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v16 = VRTraceErrorLogLevelToCSTR();
                int v17 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf.__sig) = 136315906;
                  *(uint64_t *)((char *)&buf.__sig + 4) = v16;
                  *(_WORD *)&buf.__opaque[4] = 2080;
                  *(void *)&buf.__opaque[6] = "TUMsgCallback";
                  *(_WORD *)&buf.__opaque[14] = 1024;
                  *(_DWORD *)&buf.__opaque[16] = 1562;
                  *(_WORD *)&buf.__opaque[20] = 1024;
                  *(_DWORD *)&buf.__opaque[22] = v30;
                  _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d()()()()() SKE flag = %d", (uint8_t *)&buf, 0x22u);
                }
              }
              if (v30)
              {
                uint64_t v7 = DLPutMsg(v31, a2, 0);
                if ((v7 & 0x80000000) != 0) {
                  FreeSipMsg((void *)a2);
                }
                DLUnlock();
                goto LABEL_61;
              }
              if (v13 != 1)
              {
                DLUnlock();
                goto LABEL_46;
              }
              DLSetDoingKeyExchange(v31, 1);
              DLUnlock();
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v20 = VRTraceErrorLogLevelToCSTR();
                __int16 v21 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf.__sig) = 136315650;
                  *(uint64_t *)((char *)&buf.__sig + 4) = v20;
                  *(_WORD *)&buf.__opaque[4] = 2080;
                  *(void *)&buf.__opaque[6] = "TUMsgCallback";
                  *(_WORD *)&buf.__opaque[14] = 1024;
                  *(_DWORD *)&buf.__opaque[16] = 1574;
                  _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKE received??? - ignoring anyway", (uint8_t *)&buf, 0x1Cu);
                }
              }
              uint64_t v11 = SIPKeyExchangeProc;
            }
LABEL_34:
            BOOL v9 = (void *(__cdecl *)(void *))v11;
LABEL_35:
            pthread_t v30 = (pthread_t)0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&buf.__opaque[24] = v18;
            *(_OWORD *)&buf.__opaque[40] = v18;
            *(_OWORD *)&buf.__sig = v18;
            *(_OWORD *)&buf.__opaque[8] = v18;
            *(void *)(a2 + 1000) = a1;
            pthread_attr_init(&buf);
            pthread_attr_setscope(&buf, 1);
            pthread_attr_setdetachstate(&buf, 2);
            int v19 = pthread_create(&v30, &buf, v9, (void *)a2);
            pthread_attr_destroy(&buf);
            if (v19)
            {
              uint64_t v7 = v19 | 0xC00A0000;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  TUMsgCallback_cold_1();
                }
              }
              SendTPStatus(*(void *)(v6 + 24), a2, 42, 0, 0, *(_DWORD *)(v6 + 8));
              goto LABEL_60;
            }
            break;
          default:
            SendTPStatus(*(void *)(v6 + 24), a2, 13, 0, 0, *(_DWORD *)(v6 + 8));
            FreeSipMsg((void *)a2);
            CheckOutHandleDebug();
            return 0;
        }
        goto LABEL_61;
      }
LABEL_46:
      uint64_t v22 = DLFindWithSipMsgAndLock(&v31, a2);
      if ((v22 & 0x80000000) != 0)
      {
        uint64_t v7 = v22;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v26 = VRTraceErrorLogLevelToCSTR();
          __int16 v27 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.__sig) = 136316162;
            *(uint64_t *)((char *)&buf.__sig + 4) = v26;
            *(_WORD *)&buf.__opaque[4] = 2080;
            *(void *)&buf.__opaque[6] = "TUMsgCallback";
            *(_WORD *)&buf.__opaque[14] = 1024;
            *(_DWORD *)&buf.__opaque[16] = 1626;
            *(_WORD *)&buf.__opaque[20] = 1024;
            *(_DWORD *)&buf.__opaque[22] = 1626;
            *(_WORD *)&buf.__opaque[26] = 1024;
            *(_DWORD *)&buf.__opaque[28] = v7;
            _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Found no-match: Discard message(%08X)", (uint8_t *)&buf, 0x28u);
          }
        }
        goto LABEL_60;
      }
      if (*(_DWORD *)(a2 + 4) == 2)
      {
        buf.__sig = 0;
        uint64_t v23 = *(void *)(a2 + 272);
        DLGetAck(v31, &buf);
        int v24 = *(_DWORD *)(a2 + 8);
        if (v24 == 6)
        {
          if (*(_DWORD *)(v23 + 8) == 1 && buf.__sig)
          {
            uint64_t v7 = TPSend(*(void *)(v6 + 24));
            uint64_t v25 = *(void *)(a2 + 208);
            int v29 = 0;
            LODWORD(v30) = 12;
            if (v25) {
              (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, void, pthread_t *, int *))(v6 + 32))(v4, *(void *)(v6 + 40), 15, *(unsigned int *)(a2 + 572), v25, 0, &v30, &v29);
            }
            FreeSipMsg((void *)a2);
            DLUnlock();
            goto LABEL_61;
          }
        }
        else if ((v24 - 2) > 5)
        {
          goto LABEL_59;
        }
        DLUpdate(v31, a2);
      }
LABEL_59:
      DLUnlock();
      uint64_t v7 = DLPutMsg(v31, a2, 0);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_61:
        CheckOutHandleDebug();
        return v7;
      }
LABEL_60:
      FreeSipMsg((void *)a2);
      goto LABEL_61;
    }
    uint64_t v7 = 2148139010;
    FreeSipMsg((void *)a2);
  }
  else
  {
    LODWORD(v30) = -1431655766;
    buf.__sig = 0;
    int active = DLFindActiveDialogs(&v30, &buf);
    free((void *)buf.__sig);
    uint64_t v7 = 2148139030;
    if ((active & 0x80000000) == 0 && (int)v30 >= 1) {
      return SIPSendMessageAll((uint64_t)a1, 0, "PING");
    }
  }
  return v7;
}

uint64_t SIPCloseHandle()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2148139010;
  }
  uint64_t v1 = v0;
  TPCloseHandle();
  DLCloseHandleAll();
  CheckOutHandleDebug();
  uint64_t v2 = *(const void **)(v1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(v1 + 48) = 0;
  SIPClientDictionaryCInterface_Release(*(id *)(v1 + 136));
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 64));
  free((void *)v1);
  return 0;
}

uint64_t SIPSetPacketMultiplexMode(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148139010;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (a2 != 1 && a2 != 2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPSetPacketMultiplexMode_cold_1(v5);
      }
    }
    a2 = 0;
  }
  TPSetPacketMultiplexMode(v4, a2);
  CheckOutHandleDebug();
  return 0;
}

uint64_t SIPStartListen(uint64_t a1, int a2, const unsigned __int8 *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 2148139010;
  uint64_t v6 = (int *)CheckInHandleDebug();
  if (v6)
  {
    uint64_t v7 = v6;
    if (a2 != 1)
    {
      if (a2)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPStartListen_cold_1();
          }
        }
        uint64_t v5 = 0;
        goto LABEL_26;
      }
      int v8 = *v6;
      if (*v6)
      {
        uint64_t v5 = 0;
LABEL_6:
        *uint64_t v7 = v8 + 1;
LABEL_26:
        CheckOutHandleDebug();
        return v5;
      }
      memset(v24, 0, 40);
      uint64_t v10 = CheckInHandleDebug();
      if (v10)
      {
        unsigned __int16 v23 = 16402;
        uint64_t v5 = TPListenOnPhysicalInterface(*(void *)(v10 + 24), &v23, 1, (uint64_t)v24, a3);
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if ((v5 & 0x80000000) == 0)
        {
          if (ErrorLogLevelForModule >= 7)
          {
            uint64_t v12 = VRTraceErrorLogLevelToCSTR();
            uint64_t v13 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)pthread_attr_t buf = 136315906;
              uint64_t v26 = v12;
              __int16 v27 = 2080;
              int v28 = "SIPListenOnPhysicalInterface";
              __int16 v29 = 1024;
              int v30 = 1908;
              __int16 v31 = 1024;
              int v32 = v23;
              _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TPListenOnPhysicalInterface on port %d", buf, 0x22u);
            }
          }
          CheckOutHandleDebug();
          int v8 = *v7;
          goto LABEL_6;
        }
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v19 = VRTraceErrorLogLevelToCSTR();
          uint64_t v20 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)pthread_attr_t buf = 136315906;
            uint64_t v26 = v19;
            __int16 v27 = 2080;
            int v28 = "SIPListenOnPhysicalInterface";
            __int16 v29 = 1024;
            int v30 = 1904;
            __int16 v31 = 1024;
            int v32 = v5;
            _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TPListenOnPhysicalInterface failed(%08X)", buf, 0x22u);
          }
        }
        CheckOutHandleDebug();
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPStartListen_cold_2();
        }
      }
      goto LABEL_26;
    }
    int v9 = v6[1];
    if (v9)
    {
      uint64_t v5 = 0;
LABEL_25:
      v7[1] = v9 + 1;
      goto LABEL_26;
    }
    uint64_t v14 = CheckInHandleDebug();
    if (v14)
    {
      uint64_t v5 = TPListenVirtualInterface(*(void **)(v14 + 24));
      int v15 = VRTraceGetErrorLogLevelForModule();
      if ((v5 & 0x80000000) == 0)
      {
        if (v15 >= 7)
        {
          uint64_t v16 = VRTraceErrorLogLevelToCSTR();
          int v17 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int v24 = 136315650;
            *(void *)&v24[4] = v16;
            *(_WORD *)&v24[12] = 2080;
            *(void *)&v24[14] = "SIPListenOnVirtualInterface";
            *(_WORD *)&v24[22] = 1024;
            *(_DWORD *)&v24[24] = 1868;
            _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPListenOnVirtualInterface succeeded", v24, 0x1Cu);
          }
        }
        CheckOutHandleDebug();
        int v9 = v7[1];
        goto LABEL_25;
      }
      if (v15 >= 7)
      {
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        uint64_t v22 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v24 = 136315906;
          *(void *)&v24[4] = v21;
          *(_WORD *)&v24[12] = 2080;
          *(void *)&v24[14] = "SIPListenOnVirtualInterface";
          *(_WORD *)&v24[22] = 1024;
          *(_DWORD *)&v24[24] = 1866;
          *(_WORD *)&v24[28] = 1024;
          *(_DWORD *)&v24[30] = v5;
          _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TPListenVirtualInterface failed(%08X)", v24, 0x22u);
        }
      }
      CheckOutHandleDebug();
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPStartListen_cold_3();
      }
    }
    goto LABEL_26;
  }
  return v5;
}

uint64_t SIPStopListen(uint64_t a1, int a2)
{
  uint64_t v4 = (int *)CheckInHandleDebug();
  if (v4)
  {
    if (a2 == 1)
    {
      int v7 = v4[1];
      BOOL v8 = __OFSUB__(v7, 1);
      int v9 = v7 - 1;
      if (v9 < 0 == v8)
      {
        v4[1] = v9;
        if (!v9)
        {
          uint64_t v6 = SIPStopListenOnInterface(a1, 1);
          if ((v6 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              SIPStopListen_cold_3();
            }
          }
          goto LABEL_22;
        }
      }
    }
    else if (a2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPStopListen_cold_1();
        }
      }
    }
    else
    {
      BOOL v5 = *v4 == 1;
      if (*v4 >= 1)
      {
        --*v4;
        if (v5)
        {
          uint64_t v6 = SIPStopListenOnInterface(a1, 0);
          if ((v6 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              SIPStopListen_cold_2();
            }
          }
          goto LABEL_22;
        }
      }
    }
    uint64_t v6 = 0;
LABEL_22:
    CheckOutHandleDebug();
    return v6;
  }
  return 2148139010;
}

uint64_t SIPStopListenOnInterface(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148139010;
  }
  uint64_t v4 = TPStopListen(*(void *)(v3 + 24), a2);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if ((v4 & 0x80000000) != 0)
  {
    if (ErrorLogLevelForModule < 7) {
      goto LABEL_9;
    }
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    uint64_t v14 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    int v15 = 136315906;
    uint64_t v16 = v13;
    __int16 v17 = 2080;
    long long v18 = "SIPStopListenOnInterface";
    __int16 v19 = 1024;
    int v20 = 1883;
    __int16 v21 = 1024;
    LODWORD(v22) = v4;
    int v9 = "SIP [%s] %s:%d TPStopListen failed(%08X)";
    uint64_t v10 = v14;
    uint32_t v11 = 34;
  }
  else
  {
    if (ErrorLogLevelForModule < 7) {
      goto LABEL_9;
    }
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    int v7 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    BOOL v8 = "physical";
    int v15 = 136315906;
    uint64_t v16 = v6;
    __int16 v17 = 2080;
    if (a2) {
      BOOL v8 = "virtual";
    }
    long long v18 = "SIPStopListenOnInterface";
    __int16 v19 = 1024;
    int v20 = 1885;
    __int16 v21 = 2080;
    uint64_t v22 = v8;
    int v9 = "SIP [%s] %s:%d SIPStopListenOnInterface %s succeeded";
    uint64_t v10 = v7;
    uint32_t v11 = 38;
  }
  _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v15, v11);
LABEL_9:
  CheckOutHandleDebug();
  return v4;
}

uint64_t SIPConnectIPPort(uint64_t *a1, uint64_t a2, int a3, const char *a4, const char *a5, char *a6, char *a7, _OWORD *a8, int a9, int a10)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  int v65 = 0;
  unint64_t v75 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v74[0] = v16;
  v74[1] = v16;
  unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
  v72[0] = v16;
  v72[1] = v16;
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v16;
  long long v70 = v16;
  uint64_t v63 = 0xFFFFFFFFLL;
  memset(v64, 170, sizeof(v64));
  uint64_t v61 = 0xFFFFFFFFLL;
  uint64_t v62 = 0xFFFFFFFFLL;
  unsigned int v60 = -1431655766;
  uint64_t v17 = *a1;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v18 = VRTraceErrorLogLevelToCSTR();
    __int16 v19 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "SIPConnectIPPort";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1929;
      _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPConnect start...", buf, 0x1Cu);
    }
  }
  Acuint64_t k = 2148139025;
  __int16 v21 = (_DWORD *)CheckInHandleDebug();
  if (!v21) {
    return 2148139010;
  }
  uint64_t v22 = v21;
  if (!*v21 && !v21[1])
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v44 = VRTraceErrorLogLevelToCSTR();
      uint64_t v45 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315906;
        *(void *)&uint8_t buf[4] = v44;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "SIPConnectIPPort";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1937;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = 1937;
        _os_log_impl(&dword_1E1EA4000, v45, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Call SIPStartListen first.", buf, 0x22u);
      }
    }
    goto LABEL_73;
  }
  uint64_t v55 = v17;
  MakeIPPORT();
  MakeIPPORT();
  long long v69 = 0u;
  long long v70 = 0u;
  unint64_t v71 = 0;
  uint64_t active = DLCountActiveDialogs(&v65);
  if ((active & 0x80000000) != 0)
  {
    uint64_t v40 = active;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPConnectIPPort_cold_1();
      }
    }
    goto LABEL_67;
  }
  uint64_t v24 = CreateInvite((unint64_t *)&v64[2], a2, a3, (uint64_t)v74, v72, v74, v72, &v69, 0, 0, a4, a5, a6, v22[3], v65 != 0, v22[4]);
  if ((v24 & 0x80000000) != 0)
  {
    uint64_t v40 = v24;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPConnectIPPort_cold_2();
      }
    }
    goto LABEL_67;
  }
  if (a8) {
    *((_OWORD *)v64[2] + 61) = *a8;
  }
  (*((void (**)(uint64_t, void, uint64_t, uint64_t, void, void, unsigned int *, void))v22 + 4))(v17, *((void *)v22 + 5), 12, a2, 0, 0, &v60, 0);
  uint64_t v25 = DLCreateHandle(&v63, a2, (uint64_t)v64[2], 0, v60, a9, (uint64_t)DLIsFinishedCallback, v17);
  if ((v25 & 0x80000000) != 0)
  {
    uint64_t v40 = v25;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPConnectIPPort_cold_3();
      }
    }
    goto LABEL_65;
  }
  uint64_t v26 = TACreateHandle(&v62, 0, *((void *)v22 + 3), (uint64_t)v64[2], v63, (uint64_t)TUMsgCallback, (uint64_t)a1);
  if ((v26 & 0x80000000) != 0)
  {
    uint64_t v40 = v26;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPConnectIPPort_cold_4();
      }
    }
LABEL_65:
    int v43 = v64[2];
    goto LABEL_66;
  }
  int v59 = a2;
  TASetRTT(v62, a10, (uint64_t)TUGenericLogCallback, &v59);
  uint64_t v27 = TAStart((void *)v62);
  if ((v27 & 0x80000000) != 0)
  {
    uint64_t v40 = v27;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPConnectIPPort_cold_5();
      }
    }
    goto LABEL_67;
  }
  int v28 = v64[2];
  uint64_t v29 = *((void *)v64[2] + 26);
  int v57 = 0;
  int v58 = 11;
  if (v29)
  {
    (*((void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void, int *, int *))v22 + 4))(v17, *((void *)v22 + 5), 15, a2, v29, 0, &v58, &v57);
    int v28 = v64[2];
  }
  uint64_t v30 = DLGetMsg(v63, v64, 0xFFFFFFFFuLL, 1, (uint64_t)v28, -1);
  if ((v30 & 0x80000000) != 0)
  {
LABEL_58:
    uint64_t v40 = v30;
LABEL_59:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPConnectIPPort_cold_6();
      }
    }
    goto LABEL_67;
  }
  int v31 = 0;
  char v32 = 1;
  while (1)
  {
    while (1)
    {
      uint64_t v33 = v64[0];
      int v34 = *((_DWORD *)v64[0] + 1);
      if (*(_DWORD *)v64[0] != 1 || v34 != 1) {
        break;
      }
      if (*((_DWORD *)v64[0] + 2) != 5) {
        goto LABEL_27;
      }
      FreeSipMsg((void *)v64[0]);
      if (v32)
      {
        if (!v31)
        {
          uint64_t v40 = 2148139038;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v49 = VRTraceErrorLogLevelToCSTR();
            int v50 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)pthread_attr_t buf = 136315650;
              *(void *)&uint8_t buf[4] = v49;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "SIPConnectIPPort";
              *(_WORD *)&unsigned char buf[22] = 1024;
              *(_DWORD *)&unsigned char buf[24] = 2044;
              _os_log_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Call request cancelled before receiving any response\n", buf, 0x1Cu);
              uint64_t v40 = 2148139038;
            }
          }
          goto LABEL_68;
        }
        uint64_t Cancel = CreateCancel(&v64[1], (uint64_t)v64[2]);
        if ((Cancel & 0x80000000) != 0)
        {
          uint64_t v40 = Cancel;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              SIPConnectIPPort_cold_7();
            }
          }
        }
        else
        {
          uint64_t v38 = TACreateHandle(&v61, 1, *((void *)v22 + 3), (uint64_t)v64[1], 0xFFFFFFFFLL, (uint64_t)TUMsgCallback, (uint64_t)a1);
          if ((v38 & 0x80000000) != 0)
          {
            uint64_t v40 = v38;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                SIPConnectIPPort_cold_8();
              }
            }
            int v43 = v64[1];
LABEL_66:
            FreeSipMsg(v43);
          }
          else
          {
            uint64_t v39 = TAStart((void *)v61);
            if ((v39 & 0x80000000) == 0)
            {
              int v31 = 1;
              goto LABEL_36;
            }
            uint64_t v40 = v39;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                SIPConnectIPPort_cold_9();
              }
            }
          }
        }
LABEL_67:
        if ((v40 & 0x10000000) != 0)
        {
LABEL_69:
          DLCloseHandle();
          Acuint64_t k = v40;
          goto LABEL_70;
        }
LABEL_68:
        TACancel();
        TACancel();
        goto LABEL_69;
      }
LABEL_36:
      uint64_t v40 = DLGetMsg(v63, v64, 0xFFFFFFFFuLL, 1, (uint64_t)v64[2], -1);
      char v32 = 0;
      if ((v40 & 0x80000000) != 0) {
        goto LABEL_59;
      }
    }
    if (v34 != 2 || *(_DWORD *)(*((void *)v64[0] + 34) + 8) == 5)
    {
LABEL_27:
      FreeSipMsg((void *)v64[0]);
      goto LABEL_28;
    }
    int v36 = *((_DWORD *)v64[0] + 2);
    if ((v36 - 1) <= 4)
    {
      (*((void (**)(uint64_t, void, uint64_t, uint64_t, char *, void, void, void))v22 + 4))(v55, *((void *)v22 + 5), 4, a2, (char *)v64[0] + 12, 0, 0, 0);
      FreeSipMsg((void *)v64[0]);
      int v31 = 1;
      goto LABEL_28;
    }
    if ((v36 & 0xFFFFFFFE) == 6) {
      break;
    }
    if ((v36 - 8) <= 0x2C)
    {
      if (v36 == 10)
      {
        uint64_t v41 = *((void *)v64[0] + 28);
        if (v41)
        {
          *(void *)&long long v42 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v68 = v42;
          *(_OWORD *)&buf[32] = v42;
          long long v67 = v42;
          *(_OWORD *)pthread_attr_t buf = v42;
          *(_OWORD *)&buf[16] = v42;
          ConstructUri(buf, (char *)(v41 + 44));
          (*((void (**)(uint64_t, void, uint64_t, uint64_t, const char *, uint64_t, unsigned char *, void))v22 + 4))(v55, *((void *)v22 + 5), 10, a2, a5, v41, buf, 0);
          uint64_t v33 = v64[0];
        }
      }
      uint64_t v40 = v36 | 0x900A0000;
      int v43 = v33;
      goto LABEL_66;
    }
LABEL_28:
    uint64_t v30 = DLGetMsg(v63, v64, 0xFFFFFFFFuLL, 1, (uint64_t)v64[2], -1);
    if ((v30 & 0x80000000) != 0) {
      goto LABEL_58;
    }
  }
  *(void *)pthread_attr_t buf = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v51 = *((void *)v64[0] + 28);
  BOOL v52 = (!v51 || !*(_DWORD *)(v51 + 156)) && v22[3];
  v22[2] = v52;
  long long v53 = (const char *)*((void *)v33 + 69);
  if (v53)
  {
    strlcpy(a7, v53, 0xA8CuLL);
    uint64_t v33 = v64[0];
  }
  else
  {
    *a7 = 0;
  }
  Acuint64_t k = CreateAck((unint64_t *)buf, (uint64_t)v64[2], (uint64_t)v33);
  FreeSipMsg((void *)v64[0]);
  if ((Ack & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPConnectIPPort_cold_10();
      }
    }
    goto LABEL_111;
  }
  Acuint64_t k = TPSend(*((void *)v22 + 3));
  if ((Ack & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPConnectIPPort_cold_11();
      }
    }
    FreeSipMsg(*(void **)buf);
LABEL_111:
    uint64_t v40 = Ack;
    goto LABEL_67;
  }
  int v57 = 0;
  int v58 = 12;
  if (v29) {
    (*((void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void, int *, int *))v22 + 4))(v55, *((void *)v22 + 5), 15, a2, v29, 0, &v58, &v57);
  }
  DLSetAck(v63, *(uint64_t *)buf);
LABEL_70:
  TACloseHandle();
  TACloseHandle();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v46 = VRTraceErrorLogLevelToCSTR();
    uint64_t v47 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      *(void *)&uint8_t buf[4] = v46;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "SIPConnectIPPort";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2159;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = Ack;
      _os_log_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPConnect stop(%X)...", buf, 0x22u);
    }
  }
LABEL_73:
  CheckOutHandleDebug();
  return Ack;
}

uint64_t DLIsFinishedCallback(uint64_t a1, int a2)
{
  uint64_t result = CheckInHandleDebug();
  if (result)
  {
    TPRemovePreservedPortBindForCallID(*(void *)(result + 24), a2);
    return CheckOutHandleDebug();
  }
  return result;
}

uint64_t TUGenericLogCallback(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = CheckInHandleDebug();
  if (!v6) {
    return 2148139010;
  }
  (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, void, void, void))(v6 + 32))(a1, *(void *)(v6 + 40), 16, *a2, a3, 0, 0, 0);
  CheckOutHandleDebug();
  return 0;
}

uint64_t SIPKeyExchange(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  if (a4) {
    return SIPDoKeyExchange(a1, a2, a3, a4, a5);
  }
  else {
    return 2148139009;
  }
}

uint64_t SIPDoKeyExchange(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  int v191 = -1431655766;
  int v192 = a5;
  uint64_t v189 = 0xFFFFFFFFLL;
  uint64_t v190 = 0;
  CFDataRef v187 = 0;
  uint64_t v188 = 0xFFFFFFFFLL;
  uint64_t v8 = *a1;
  uint64_t v186 = 0;
  unsigned int v185 = -1;
  int v184 = 0;
  int v183 = 0;
  int v181 = 0;
  int v182 = 0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v194 = v9;
      __int16 v195 = 2080;
      __int16 v196 = "SIPDoKeyExchange";
      __int16 v197 = 1024;
      int v198 = 2207;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoKeyExchange start...", buf, 0x1Cu);
    }
  }
  *a4 = 0;
  uint32_t v11 = (_DWORD *)CheckInHandleDebug();
  if (!v11) {
    return 2148139010;
  }
  uint64_t v12 = (uint64_t)v11;
  if (!*v11 && !v11[1])
  {
    uint64_t v13 = 2148139025;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_29;
    }
    uint64_t v23 = VRTraceErrorLogLevelToCSTR();
    uint64_t v24 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    *(_DWORD *)pthread_attr_t buf = 136315906;
    uint64_t v194 = v23;
    __int16 v195 = 2080;
    __int16 v196 = "SIPDoKeyExchange";
    __int16 v197 = 1024;
    int v198 = 2217;
    __int16 v199 = 1024;
    *(_DWORD *)int v200 = 2217;
    long long v16 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: C"
          "all SIPStartListen first.";
    uint64_t v17 = v24;
    uint32_t v20 = 34;
LABEL_28:
    _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v20);
    goto LABEL_29;
  }
  if (!a2)
  {
    uint64_t v13 = 2148139009;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_29;
    }
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    *(_DWORD *)pthread_attr_t buf = 136316162;
    uint64_t v194 = v14;
    __int16 v195 = 2080;
    __int16 v196 = "SIPDoKeyExchange";
    __int16 v197 = 1024;
    int v198 = 2223;
    __int16 v199 = 1024;
    *(_DWORD *)int v200 = 2223;
    *(_WORD *)&v200[4] = 1024;
    *(_DWORD *)&v200[6] = 0;
    long long v16 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: C"
          "allID(%d) is invalid";
    uint64_t v17 = v15;
    goto LABEL_21;
  }
  uint64_t v13 = DLFindWithCallIDAndLock(&v189);
  if ((v13 & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_29;
    }
    uint64_t v18 = VRTraceErrorLogLevelToCSTR();
    __int16 v19 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    *(_DWORD *)pthread_attr_t buf = 136316162;
    uint64_t v194 = v18;
    __int16 v195 = 2080;
    __int16 v196 = "SIPDoKeyExchange";
    __int16 v197 = 1024;
    int v198 = 2230;
    __int16 v199 = 1024;
    *(_DWORD *)int v200 = 2230;
    *(_WORD *)&v200[4] = 1024;
    *(_DWORD *)&v200[6] = a2;
    long long v16 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: C"
          "annot find call ID(%d)";
    uint64_t v17 = v19;
LABEL_21:
    uint32_t v20 = 40;
    goto LABEL_28;
  }
  DLSetDoingKeyExchange(v189, 1);
  DLGetState(v189, &v191);
  DLUnlock();
  if (v191 != 3)
  {
    uint64_t v13 = 2148139025;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_29;
    }
    uint64_t v21 = VRTraceErrorLogLevelToCSTR();
    uint64_t v22 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    *(_DWORD *)pthread_attr_t buf = 136316418;
    uint64_t v194 = v21;
    __int16 v195 = 2080;
    __int16 v196 = "SIPDoKeyExchange";
    __int16 v197 = 1024;
    int v198 = 2239;
    __int16 v199 = 1024;
    *(_DWORD *)int v200 = 2239;
    *(_WORD *)&v200[4] = 1024;
    *(_DWORD *)&v200[6] = a2;
    *(_WORD *)char v201 = 1024;
    *(_DWORD *)&void v201[2] = v191;
    long long v16 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: C"
          "all(%d) is in state %d";
    uint64_t v17 = v22;
    uint32_t v20 = 46;
    goto LABEL_28;
  }
  if (SecKeyExchangeNodeCreateAsInitiator())
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPDoKeyExchange_cold_9();
      }
    }
    goto LABEL_29;
  }
  uint64_t v13 = SKE_FormMessageS(v187, (void **)&v184, &v182, &v183, &v181);
  CFRelease(v187);
  if ((v13 & 0x80000000) != 0)
  {
    SIPReportSKError(v8, v12, a2, v192, 8, 2262, (uint64_t)"Out of Memory");
    goto LABEL_29;
  }
  int v165 = 0;
  int v161 = 0;
  ptr = 0;
  int v163 = 0;
  int v160 = 0;
  unint64_t v175 = 0;
  bytesDeCFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  uint64_t v176 = -1;
  char v164 = 1;
LABEL_51:
  int v168 = 0;
  int v162 = 0;
  int v32 = v182;
  while (2)
  {
    int v33 = v183;
    int cf = v32;
    int v34 = v32 - v183;
    if (v34 >= 900) {
      int v35 = 900;
    }
    else {
      int v35 = v34;
    }
    ++v175;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v157 = VRTraceErrorLogLevelToCSTR();
      int v36 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        if (v35)
        {
          int v37 = *v184;
          int v38 = v184[v35 - 1];
        }
        else
        {
          int v37 = -1;
          int v38 = -1;
        }
        *(_DWORD *)pthread_attr_t buf = 136316674;
        uint64_t v194 = v157;
        __int16 v195 = 2080;
        __int16 v196 = "SIPDoKeyExchange";
        __int16 v197 = 1024;
        int v198 = 2594;
        __int16 v199 = 2048;
        *(void *)int v200 = v175;
        *(_WORD *)&v200[8] = 1024;
        *(_DWORD *)char v201 = v35;
        *(_WORD *)&v201[4] = 1024;
        *(_DWORD *)&v201[6] = v37;
        *(_WORD *)&v201[10] = 1024;
        int v202 = v38;
        _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: (%lu) send (%d) [%02X..%02X]", buf, 0x38u);
      }
    }
    if (v190)
    {
      FreeSipMsg(v190);
      uint64_t v190 = 0;
    }
    if (v35) {
      uint64_t v39 = (char *)&v184[v33];
    }
    else {
      uint64_t v39 = 0;
    }
    if (v35) {
      int v40 = (cf + ~v33) / 900;
    }
    else {
      int v40 = 0;
    }
    uint64_t SKEMessageInDialog = CreateSKEMessageInDialog((unint64_t *)&v190, v189, v39, v35, v175, v40, *(_DWORD *)(v12 + 16));
    if ((SKEMessageInDialog & 0x80000000) != 0)
    {
      uint64_t v13 = SKEMessageInDialog;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPDoKeyExchange_cold_1();
        }
      }
      goto LABEL_248;
    }
    TACloseHandle();
    uint64_t v188 = 0xFFFFFFFFLL;
    int v42 = TACreateHandle(&v188, 1, *(void *)(v12 + 24), (uint64_t)v190, 0xFFFFFFFFLL, (uint64_t)TUMsgCallback, (uint64_t)a1);
    if (v42 < 0)
    {
      LODWORD(v13) = v42;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPDoKeyExchange_cold_2();
        }
      }
      goto LABEL_263;
    }
    int v43 = TASetRetransmitTimeoutCap(v188, 2000);
    if (v43 < 0)
    {
      LODWORD(v13) = v43;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPDoKeyExchange_cold_3();
        }
      }
      goto LABEL_263;
    }
    int v44 = TAStart((void *)v188);
    LODWORD(v13) = v44;
    uint64_t v45 = (uint64_t *)v190[34];
    if (v45) {
      uint64_t v176 = *v45;
    }
    uint64_t v190 = 0;
    if (v44 < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPDoKeyExchange_cold_4();
        }
      }
      goto LABEL_263;
    }
    if (v35)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v156 = VRTraceErrorLogLevelToCSTR();
        unsigned __int8 v158 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136316418;
          uint64_t v194 = v156;
          __int16 v195 = 2080;
          __int16 v196 = "SIPDoKeyExchange";
          __int16 v197 = 1024;
          int v198 = 2638;
          __int16 v199 = 1024;
          *(_DWORD *)int v200 = v35;
          *(_WORD *)&v200[4] = 1024;
          *(_DWORD *)&v200[6] = cf;
          *(_WORD *)char v201 = 1024;
          *(_DWORD *)&void v201[2] = v33;
          _os_log_impl(&dword_1E1EA4000, v158, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: sent %d of %d at %d", buf, 0x2Eu);
        }
      }
      int v183 = v35 + v33;
      if (v35 + v33 == cf)
      {
        int v182 = 0;
        int v183 = 0;
      }
    }
    if (!(v185 | v35) || v163) {
      goto LABEL_263;
    }
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v46 = VRTraceErrorLogLevelToCSTR();
                uint64_t v47 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)pthread_attr_t buf = 136315906;
                  uint64_t v194 = v46;
                  __int16 v195 = 2080;
                  __int16 v196 = "SIPDoKeyExchange";
                  __int16 v197 = 1024;
                  int v198 = 2270;
                  __int16 v199 = 1024;
                  *(_DWORD *)int v200 = v175;
                  _os_log_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE TOP (%d)...", buf, 0x22u);
                }
              }
              uint64_t v48 = v190;
              uint64_t v190 = 0;
              LODWORD(v13) = DLGetMsg(v189, &v190, 0x7530uLL, 7, (uint64_t)v48, v176);
              int v191 = 0;
              if ((DLGetState(v189, &v191) & 0x80000000) != 0 || v191 != 3)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                {
                  uint64_t v121 = VRTraceErrorLogLevelToCSTR();
                  int v122 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)pthread_attr_t buf = 136315906;
                    uint64_t v194 = v121;
                    __int16 v195 = 2080;
                    __int16 v196 = "SIPDoKeyExchange";
                    __int16 v197 = 1024;
                    int v198 = 2281;
                    __int16 v199 = 1024;
                    *(_DWORD *)int v200 = v191;
                    _os_log_impl(&dword_1E1EA4000, v122, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: terminated by remote party (%d)", buf, 0x22u);
                  }
                }
                if (v48) {
                  FreeSipMsg(v48);
                }
                goto LABEL_262;
              }
              if ((v13 & 0x80000000) != 0)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3
                  && (VRTraceErrorLogLevelToCSTR(),
                      os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
                {
                  SIPDoKeyExchange_cold_5();
                  if (!v48) {
                    goto LABEL_228;
                  }
                }
                else if (!v48)
                {
LABEL_228:
                  int v123 = v192;
                  uint64_t v124 = "Dialog Timeout";
                  uint64_t v125 = v8;
                  uint64_t v126 = v12;
                  uint64_t v127 = a2;
                  int v128 = 1;
                  uint64_t v129 = 2296;
LABEL_237:
                  SIPReportSKError(v125, v126, v127, v123, v128, v129, (uint64_t)v124);
                  goto LABEL_263;
                }
                FreeSipMsg(v48);
                goto LABEL_228;
              }
              if (v48) {
                FreeSipMsg(v48);
              }
              uint64_t v49 = v190;
              int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
              if (!v49)
              {
                if (ErrorLogLevelForModule >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    SIPDoKeyExchange_cold_6();
                  }
                }
                int v123 = v192;
                uint64_t v124 = "NULL Message";
                uint64_t v125 = v8;
                uint64_t v126 = v12;
                uint64_t v127 = a2;
                int v128 = 2;
                uint64_t v129 = 2307;
                goto LABEL_237;
              }
              if (ErrorLogLevelForModule >= 7)
              {
                uint64_t v51 = VRTraceErrorLogLevelToCSTR();
                BOOL v52 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)pthread_attr_t buf = 136315906;
                  uint64_t v194 = v51;
                  __int16 v195 = 2080;
                  __int16 v196 = "SIPDoKeyExchange";
                  __int16 v197 = 1024;
                  int v198 = 2311;
                  __int16 v199 = 2048;
                  *(void *)int v200 = v190;
                  _os_log_impl(&dword_1E1EA4000, v52, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: got msg %p", buf, 0x26u);
                }
              }
              if (*((_DWORD *)v190 + 1) == 2) {
                break;
              }
              if (*((_DWORD *)v190 + 2) == 5)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                {
                  uint64_t v130 = VRTraceErrorLogLevelToCSTR();
                  double v131 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)pthread_attr_t buf = 136315650;
                    uint64_t v194 = v130;
                    __int16 v195 = 2080;
                    __int16 v196 = "SIPDoKeyExchange";
                    __int16 v197 = 1024;
                    int v198 = 2316;
                    _os_log_impl(&dword_1E1EA4000, v131, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: cancelled", buf, 0x1Cu);
                  }
                }
                int v123 = v192;
                uint64_t v124 = "Cancelled";
                uint64_t v125 = v8;
                uint64_t v126 = v12;
                uint64_t v127 = a2;
                int v128 = 5;
                uint64_t v129 = 2317;
                goto LABEL_237;
              }
              if ((DLPutMsg(v189, (uint64_t)v190, 1) & 0x80000000) != 0)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
                  goto LABEL_269;
                }
                uint64_t v132 = VRTraceErrorLogLevelToCSTR();
                int v133 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)pthread_attr_t buf = 136315650;
                  uint64_t v194 = v132;
                  __int16 v195 = 2080;
                  __int16 v196 = "SIPDoKeyExchange";
                  __int16 v197 = 1024;
                  int v198 = 2323;
                  goto LABEL_261;
                }
LABEL_262:
                LODWORD(v13) = -2146828235;
LABEL_263:
                unsigned int v137 = v165;
                __int16 v135 = ptr;
                goto LABEL_264;
              }
              uint64_t v190 = 0;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v60 = VRTraceErrorLogLevelToCSTR();
                uint64_t v61 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)pthread_attr_t buf = 136315650;
                  uint64_t v194 = v60;
                  __int16 v195 = 2080;
                  __int16 v196 = "SIPDoKeyExchange";
                  __int16 v197 = 1024;
                  int v198 = 2329;
                  int v58 = v61;
                  int v59 = "SIP [%s] %s:%d SIPDoSKE: skip msg";
                  goto LABEL_117;
                }
              }
            }
            if (*(_DWORD *)(v190[34] + 8) == 7) {
              break;
            }
            int v62 = DLPutMsg(v189, (uint64_t)v190, 1);
            int v63 = VRTraceGetErrorLogLevelForModule();
            if (v62 < 0)
            {
              if (v63 >= 7)
              {
                uint64_t v134 = VRTraceErrorLogLevelToCSTR();
                int v133 = *MEMORY[0x1E4F47A50];
                if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_262;
                }
                *(_DWORD *)pthread_attr_t buf = 136315650;
                uint64_t v194 = v134;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2336;
LABEL_261:
                _os_log_impl(&dword_1E1EA4000, v133, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: terminated by remote party", buf, 0x1Cu);
                goto LABEL_262;
              }
LABEL_269:
              LODWORD(v13) = -2146828235;
              goto LABEL_263;
            }
            if (v63 >= 7)
            {
              uint64_t v64 = VRTraceErrorLogLevelToCSTR();
              int v65 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136315650;
                uint64_t v194 = v64;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2341;
                int v58 = v65;
                int v59 = "SIP [%s] %s:%d SIPDoSKE: not MT_MESSAGE";
                goto LABEL_117;
              }
            }
          }
          unsigned int v53 = *((_DWORD *)v190 + 2);
          if (v53 > 0x34 || ((1 << v53) & 0x100000000000C0) == 0)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v138 = VRTraceErrorLogLevelToCSTR();
              long long v139 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136315650;
                uint64_t v194 = v138;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2349;
                _os_log_impl(&dword_1E1EA4000, v139, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: SKE unsuccessful", buf, 0x1Cu);
              }
            }
            LODWORD(v13) = v53 | 0x900A0000;
            SIPReportSKError(v8, v12, a2, v192, 9, 2351, (uint64_t)"Unsuccessful");
            goto LABEL_263;
          }
          long long v54 = (unint64_t *)v190[66];
          if (v54) {
            break;
          }
          int v66 = DLPutMsg(v189, (uint64_t)v190, 1);
          int v67 = VRTraceGetErrorLogLevelForModule();
          if (v66 < 0)
          {
            if (v67 >= 7)
            {
              uint64_t v136 = VRTraceErrorLogLevelToCSTR();
              int v133 = *MEMORY[0x1E4F47A50];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_262;
              }
              *(_DWORD *)pthread_attr_t buf = 136315650;
              uint64_t v194 = v136;
              __int16 v195 = 2080;
              __int16 v196 = "SIPDoKeyExchange";
              __int16 v197 = 1024;
              int v198 = 2358;
              goto LABEL_261;
            }
            goto LABEL_269;
          }
          if (v67 >= 7)
          {
            uint64_t v68 = VRTraceErrorLogLevelToCSTR();
            long long v69 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)pthread_attr_t buf = 136315650;
              uint64_t v194 = v68;
              __int16 v195 = 2080;
              __int16 v196 = "SIPDoKeyExchange";
              __int16 v197 = 1024;
              int v198 = 2363;
              int v58 = v69;
              int v59 = "SIP [%s] %s:%d SIPDoSKE: message doesn't have SKESeq";
LABEL_117:
              _os_log_impl(&dword_1E1EA4000, v58, OS_LOG_TYPE_DEFAULT, v59, buf, 0x1Cu);
            }
          }
        }
        unint64_t v55 = *v54;
        if (*v54 >= v175) {
          break;
        }
        FreeSipMsg(v190);
        uint64_t v190 = 0;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v56 = VRTraceErrorLogLevelToCSTR();
          int v57 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)pthread_attr_t buf = 136315650;
            uint64_t v194 = v56;
            __int16 v195 = 2080;
            __int16 v196 = "SIPDoKeyExchange";
            __int16 v197 = 1024;
            int v198 = 2376;
            int v58 = v57;
            int v59 = "SIP [%s] %s:%d SIPDoSKE: SKESeq old";
            goto LABEL_117;
          }
        }
      }
      if (*v54 > v175)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v140 = VRTraceErrorLogLevelToCSTR();
          int v141 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)pthread_attr_t buf = 136315906;
            uint64_t v194 = v140;
            __int16 v195 = 2080;
            __int16 v196 = "SIPDoKeyExchange";
            __int16 v197 = 1024;
            int v198 = 2381;
            __int16 v199 = 1024;
            *(_DWORD *)int v200 = v55;
            _os_log_impl(&dword_1E1EA4000, v141, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: SKESeq (%d) unexpected", buf, 0x22u);
          }
        }
        SIPReportSKError(v8, v12, a2, v192, 6, 2383, (uint64_t)"Out Of Sequence");
        LODWORD(v13) = -1073086451;
        goto LABEL_263;
      }
      int v70 = *((_DWORD *)v54 + 2);
      BOOL v71 = !v168 || v168 - 1 == v70;
      BOOL v72 = v71;
      if ((v70 & 0x80000000) == 0 && v72) {
        break;
      }
      int v73 = v70;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v74 = VRTraceErrorLogLevelToCSTR();
        unint64_t v75 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136316162;
          uint64_t v194 = v74;
          __int16 v195 = 2080;
          __int16 v196 = "SIPDoKeyExchange";
          __int16 v197 = 1024;
          int v198 = 2392;
          __int16 v199 = 1024;
          *(_DWORD *)int v200 = v175;
          *(_WORD *)&v200[4] = 1024;
          *(_DWORD *)&v200[6] = v73;
          _os_log_impl(&dword_1E1EA4000, v75, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: SKESeq (%d,%d)", buf, 0x28u);
        }
      }
    }
    uint64_t v76 = *((unsigned int *)v190 + 140);
    if ((int)v76 < 1 || !v190[69]) {
      goto LABEL_144;
    }
    int cfa = v70;
    if (ptr)
    {
      int v77 = v76 + v162;
      if (v161 >= v77)
      {
        uint64_t v78 = ptr;
      }
      else
      {
        uint64_t v78 = (char *)malloc_type_realloc(ptr, v77 + 2000, 0x6FEF2E28uLL);
        if (!v78)
        {
          int v142 = VRTraceGetErrorLogLevelForModule();
          if (v142 >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              SIPDoKeyExchange_cold_8();
            }
          }
          LODWORD(v13) = -1073086461;
          int v123 = v192;
          uint64_t v124 = "Out of Memory";
          uint64_t v125 = v8;
          uint64_t v126 = v12;
          uint64_t v127 = a2;
          int v128 = 8;
          uint64_t v129 = 2417;
          goto LABEL_237;
        }
      }
LABEL_140:
      int v169 = v78;
      memcpy(&v78[v162], (const void *)v190[69], *((int *)v190 + 140));
      v162 += *((_DWORD *)v190 + 140);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        ptra = (void *)VRTraceErrorLogLevelToCSTR();
        __int16 v79 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v80 = *((int *)v190 + 140);
          __int16 v81 = (char *)v190[69];
          int v82 = *v81;
          LODWORD(v81) = v81[v80 - 1];
          *(_DWORD *)pthread_attr_t buf = 136316674;
          uint64_t v194 = (uint64_t)ptra;
          __int16 v195 = 2080;
          __int16 v196 = "SIPDoKeyExchange";
          __int16 v197 = 1024;
          int v198 = 2430;
          __int16 v199 = 1024;
          *(_DWORD *)int v200 = v175;
          *(_WORD *)&v200[4] = 1024;
          *(_DWORD *)&v200[6] = v80;
          *(_WORD *)char v201 = 1024;
          *(_DWORD *)&void v201[2] = v82;
          *(_WORD *)&v201[6] = 1024;
          *(_DWORD *)&v201[8] = v81;
          _os_log_impl(&dword_1E1EA4000, v79, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: Got msg (%d) - (%d) [%02X...%02X]", buf, 0x34u);
        }
      }
      ptr = v169;
      int v70 = cfa;
LABEL_144:
      if (v70)
      {
        int v32 = 0;
        int v163 = 0;
        int v182 = 0;
        int v183 = 0;
        int v168 = v70;
        continue;
      }
      int v163 = 0;
      int v32 = v182;
      int v168 = 0;
      if (v182 <= 0)
      {
        CFDataRef cfb = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)ptr, v162, bytesDeallocator);
        int v83 = SecKeyExchangeUpdate();
        if (v83)
        {
          int v143 = v83;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v144 = VRTraceErrorLogLevelToCSTR();
            unint64_t v145 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)pthread_attr_t buf = 136315906;
              uint64_t v194 = v144;
              __int16 v195 = 2080;
              __int16 v196 = "SIPDoKeyExchange";
              __int16 v197 = 1024;
              int v198 = 2452;
              __int16 v199 = 1024;
              *(_DWORD *)int v200 = v143;
              _os_log_impl(&dword_1E1EA4000, v145, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SecKeyExchangeUpdate failed (%d)", buf, 0x22u);
            }
          }
          SIPReportSKError(v8, v12, a2, v192, 10, 2453, (uint64_t)"Update Failed");
          CFRelease(cfb);
          goto LABEL_263;
        }
        CFRelease(cfb);
        uint64_t v13 = SKE_FormMessageS(v187, (void **)&v184, &v182, &v183, &v181);
        if (v187) {
          CFRelease(v187);
        }
        if ((v13 & 0x80000000) != 0)
        {
          int v146 = v192;
          uint64_t v147 = v8;
          uint64_t v148 = v12;
          uint64_t v149 = a2;
          uint64_t v150 = 2464;
        }
        else
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v84 = VRTraceErrorLogLevelToCSTR();
            uint64_t v85 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)pthread_attr_t buf = 136316418;
              uint64_t v194 = v84;
              __int16 v195 = 2080;
              __int16 v196 = "SIPDoKeyExchange";
              __int16 v197 = 1024;
              int v198 = 2468;
              __int16 v199 = 1024;
              *(_DWORD *)int v200 = 0;
              *(_WORD *)&v200[4] = 1024;
              *(_DWORD *)&v200[6] = v185;
              *(_WORD *)char v201 = 2048;
              *(void *)&void v201[2] = v187;
              _os_log_impl(&dword_1E1EA4000, v85, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: u= %d,%d,[%p]", buf, 0x32u);
            }
          }
          if (v185 == 2)
          {
            LODWORD(v178) = -1431655766;
            int v180 = -1431655766;
            int PeerAbortReason = SecKeyExchangeGetPeerAbortReason();
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v152 = VRTraceErrorLogLevelToCSTR();
              unsigned int v153 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136316418;
                uint64_t v194 = v152;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2475;
                __int16 v199 = 1024;
                *(_DWORD *)int v200 = v180;
                *(_WORD *)&v200[4] = 1024;
                *(_DWORD *)&v200[6] = v178;
                *(_WORD *)char v201 = 1024;
                *(_DWORD *)&void v201[2] = PeerAbortReason;
                _os_log_impl(&dword_1E1EA4000, v153, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: aborted by remote: %d (%d %d)", buf, 0x2Eu);
              }
            }
            SIPReportSKError(v8, v12, a2, v192, 12, 2477, (uint64_t)"Aborted");
            LODWORD(v13) = -1073086434;
            goto LABEL_263;
          }
          if (v185 >= 2)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v154 = VRTraceErrorLogLevelToCSTR();
              int v155 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136315906;
                uint64_t v194 = v154;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2482;
                __int16 v199 = 1024;
                *(_DWORD *)int v200 = v185;
                _os_log_impl(&dword_1E1EA4000, v155, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: error while SKEUpdate (%d)", buf, 0x22u);
              }
            }
            SIPReportSKError(v8, v12, a2, v192, 11, 2484, (uint64_t)"Update Error");
            LODWORD(v13) = -1073086460;
            goto LABEL_263;
          }
          if (!*(void *)(v12 + 48) || v160) {
            goto LABEL_200;
          }
          int v179 = -1431655766;
          int v180 = -1431655766;
          CFTypeRef v178 = 0;
          int PeerCertStatus = SecKeyExchangeGetPeerCertStatus();
          if (PeerCertStatus)
          {
            int v87 = PeerCertStatus;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              cfCC_SHA1_CTX c = (CFTypeRef)VRTraceErrorLogLevelToCSTR();
              int v88 = *MEMORY[0x1E4F47A50];
              int v160 = 0;
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136315906;
                uint64_t v194 = (uint64_t)cfc;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2499;
                __int16 v199 = 1024;
                *(_DWORD *)int v200 = v87;
                __int16 v89 = v88;
                int v90 = "SIP [%s] %s:%d SKE peerCertStatus failed (%d)";
                goto LABEL_162;
              }
LABEL_200:
              if (v53 == 52)
              {
                *a4 = 0;
                int v163 = 1;
                char v164 = 0;
                int v165 = -1878392780;
              }
              else
              {
                int v163 = 0;
                if (!v185)
                {
                  int v108 = SecKeyExchangeCopySharedSecret();
                  int v163 = 0;
                  if (v108)
                  {
                    int v109 = v108;
                    int v163 = 0;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                    {
                      uint64_t v110 = VRTraceErrorLogLevelToCSTR();
                      __int16 v111 = *MEMORY[0x1E4F47A50];
                      int v163 = 0;
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)pthread_attr_t buf = 136315906;
                        uint64_t v194 = v110;
                        __int16 v195 = 2080;
                        __int16 v196 = "SIPDoKeyExchange";
                        __int16 v197 = 1024;
                        int v198 = 2580;
                        __int16 v199 = 1024;
                        *(_DWORD *)int v200 = v109;
                        _os_log_impl(&dword_1E1EA4000, v111, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SecKeyExchangeCopySharedSecret error %d", buf, 0x22u);
                        int v163 = 0;
                      }
                    }
                  }
                }
              }
              goto LABEL_51;
            }
LABEL_199:
            int v160 = 0;
            goto LABEL_200;
          }
          if (v179)
          {
            if (v179 != 2)
            {
              if (v179 == 1)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
                  goto LABEL_199;
                }
                uint64_t v92 = VRTraceErrorLogLevelToCSTR();
                __int16 v93 = *MEMORY[0x1E4F47A50];
                int v160 = 0;
                if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_200;
                }
                *(_DWORD *)pthread_attr_t buf = 136315650;
                uint64_t v194 = v92;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2502;
                __int16 v89 = v93;
                int v90 = "SIP [%s] %s:%d SKE peerCertStatus not yet valid";
              }
              else
              {
                if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
                  goto LABEL_199;
                }
                uint64_t v106 = VRTraceErrorLogLevelToCSTR();
                __int16 v107 = *MEMORY[0x1E4F47A50];
                int v160 = 0;
                if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_200;
                }
                *(_DWORD *)pthread_attr_t buf = 136315650;
                uint64_t v194 = v106;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2509;
                __int16 v89 = v107;
                int v90 = "SIP [%s] %s:%d SKE peerCertStatus not ready";
              }
LABEL_197:
              uint32_t v91 = 28;
LABEL_198:
              _os_log_impl(&dword_1E1EA4000, v89, OS_LOG_TYPE_DEFAULT, v90, buf, v91);
              goto LABEL_199;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v98 = VRTraceErrorLogLevelToCSTR();
              __int16 v99 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136315650;
                uint64_t v194 = v98;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2505;
                int v96 = v99;
                __int16 v97 = "SIP [%s] %s:%d SKE peerCertStatus no value";
LABEL_176:
                _os_log_impl(&dword_1E1EA4000, v96, OS_LOG_TYPE_DEFAULT, v97, buf, 0x1Cu);
              }
            }
            goto LABEL_177;
          }
          if (v180 == 1)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v94 = VRTraceErrorLogLevelToCSTR();
              __int16 v95 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136315650;
                uint64_t v194 = v94;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2512;
                int v96 = v95;
                __int16 v97 = "SIP [%s] %s:%d SKE no cert";
                goto LABEL_176;
              }
            }
LABEL_177:
            CFTypeRef v178 = 0;
          }
          else
          {
            int v112 = SecKeyExchangeCopyPeerCert();
            if (v112)
            {
              int v113 = v112;
              if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
                goto LABEL_199;
              }
              CFTypeRef cfd = (CFTypeRef)VRTraceErrorLogLevelToCSTR();
              uint64_t v114 = *MEMORY[0x1E4F47A50];
              int v160 = 0;
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_200;
              }
              *(_DWORD *)pthread_attr_t buf = 136315906;
              uint64_t v194 = (uint64_t)cfd;
              __int16 v195 = 2080;
              __int16 v196 = "SIPDoKeyExchange";
              __int16 v197 = 1024;
              int v198 = 2519;
              __int16 v199 = 1024;
              *(_DWORD *)int v200 = v113;
              __int16 v89 = v114;
              int v90 = "SIP [%s] %s:%d SKE CopyCert failed (%d)";
LABEL_162:
              uint32_t v91 = 34;
              goto LABEL_198;
            }
            int v115 = v179;
            int v116 = VRTraceGetErrorLogLevelForModule();
            if (v115 == 1)
            {
              if (v116 < 7) {
                goto LABEL_199;
              }
              uint64_t v117 = VRTraceErrorLogLevelToCSTR();
              int v118 = *MEMORY[0x1E4F47A50];
              int v160 = 0;
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_200;
              }
              *(_DWORD *)pthread_attr_t buf = 136315650;
              uint64_t v194 = v117;
              __int16 v195 = 2080;
              __int16 v196 = "SIPDoKeyExchange";
              __int16 v197 = 1024;
              int v198 = 2522;
              __int16 v89 = v118;
              int v90 = "SIP [%s] %s:%d SKE CopyCert not yet valid";
              goto LABEL_197;
            }
            if (v116 >= 7)
            {
              uint64_t v119 = VRTraceErrorLogLevelToCSTR();
              unsigned int v120 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136315650;
                uint64_t v194 = v119;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2525;
                _os_log_impl(&dword_1E1EA4000, v120, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKE CopyCert succeeded", buf, 0x1Cu);
              }
            }
          }
          int v177 = 0;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t, const char *, int *, CFTypeRef, int *))(v12 + 32))(v8, *(void *)(v12 + 40), 6, a2, "SKECheckRemoteCert", &v177, v178, &v192);
          if (v178) {
            CFRelease(v178);
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v100 = VRTraceErrorLogLevelToCSTR();
            __int16 v101 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)pthread_attr_t buf = 136315906;
              uint64_t v194 = v100;
              __int16 v195 = 2080;
              __int16 v196 = "SIPDoKeyExchange";
              __int16 v197 = 1024;
              int v198 = 2540;
              __int16 v199 = 1024;
              *(_DWORD *)int v200 = v177;
              _os_log_impl(&dword_1E1EA4000, v101, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d ~_~ SIPDoSKE isValid = %d", buf, 0x22u);
            }
          }
          if (v177)
          {
LABEL_193:
            int v160 = 1;
            goto LABEL_200;
          }
          if (!v185) {
            goto LABEL_192;
          }
          int v102 = SecKeyExchangeAbortSession();
          if (v102)
          {
            int v103 = v102;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v104 = VRTraceErrorLogLevelToCSTR();
              __int16 v105 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136315906;
                uint64_t v194 = v104;
                __int16 v195 = 2080;
                __int16 v196 = "SIPDoKeyExchange";
                __int16 v197 = 1024;
                int v198 = 2549;
                __int16 v199 = 1024;
                *(_DWORD *)int v200 = v103;
                _os_log_impl(&dword_1E1EA4000, v105, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKE abort error %d", buf, 0x22u);
              }
            }
          }
          uint64_t v13 = SKE_FormMessageS(v187, (void **)&v184, &v182, &v183, &v181);
          if (v187) {
            CFRelease(v187);
          }
          if ((v13 & 0x80000000) == 0)
          {
LABEL_192:
            unsigned int v53 = 52;
            goto LABEL_193;
          }
          int v146 = v192;
          uint64_t v147 = v8;
          uint64_t v148 = v12;
          uint64_t v149 = a2;
          uint64_t v150 = 2555;
        }
        SIPReportSKError(v147, v148, v149, v146, 8, v150, (uint64_t)"Out of Memory");
LABEL_248:
        __int16 v135 = ptr;
        goto LABEL_267;
      }
      continue;
    }
    break;
  }
  int v161 = v76 + 2000;
  uint64_t v78 = (char *)malloc_type_malloc(v76 + 2000, 0xA6E6A7C7uLL);
  if (v78) {
    goto LABEL_140;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      SIPDoKeyExchange_cold_7();
    }
  }
  LODWORD(v13) = -1073086461;
  SIPReportSKError(v8, v12, a2, v192, 8, 2408, (uint64_t)"Out of Memory");
  __int16 v135 = 0;
  unsigned int v137 = v165;
LABEL_264:
  if (v164) {
    uint64_t v13 = v13;
  }
  else {
    uint64_t v13 = v137;
  }
LABEL_267:
  if (v135) {
    free(v135);
  }
LABEL_29:
  if (v184) {
    free(v184);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v25 = VRTraceErrorLogLevelToCSTR();
    uint64_t v26 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v194 = v25;
      __int16 v195 = 2080;
      __int16 v196 = "SIPDoKeyExchange";
      __int16 v197 = 1024;
      int v198 = 2668;
      _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoKeyExchange Done:", buf, 0x1Cu);
    }
  }
  if ((DLSetDoingKeyExchange(v189, 0) & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      int v28 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        uint64_t v194 = v27;
        __int16 v195 = 2080;
        __int16 v196 = "SIPDoKeyExchange";
        __int16 v197 = 1024;
        int v198 = 2671;
        _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoSKE: terminated by remote party", buf, 0x1Cu);
      }
    }
    uint64_t v13 = 2148139061;
  }
  if (v186) {
    SecKeyExchangeNodeRelease();
  }
  if ((v13 & 0x90000000) == 0x80000000) {
    TACancel();
  }
  if (v190) {
    FreeSipMsg(v190);
  }
  TACloseHandle();
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v29 = VRTraceErrorLogLevelToCSTR();
    uint64_t v30 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v194 = v29;
      __int16 v195 = 2080;
      __int16 v196 = "SIPDoKeyExchange";
      __int16 v197 = 1024;
      int v198 = 2693;
      __int16 v199 = 1024;
      *(_DWORD *)int v200 = v13;
      _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPDoKeyExchange stop(%X)...", buf, 0x22u);
    }
  }
  return v13;
}

uint64_t SIPCancel(uint64_t a1, int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v21 = (void *)0xAAAAAAAAAAAAAAAALL;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v23 = v3;
      __int16 v24 = 2080;
      uint64_t v25 = "SIPCancel";
      __int16 v26 = 1024;
      int v27 = 2717;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPCancel start...", buf, 0x1Cu);
    }
  }
  uint64_t v5 = 2148139025;
  uint64_t v6 = (_DWORD *)CheckInHandleDebug();
  if (!v6) {
    return 2148139010;
  }
  if (*v6 || v6[1])
  {
    uint64_t v7 = DLFindWithCallIDAndLock(&v20);
    if ((v7 & 0x80000000) == 0)
    {
      DLUnlock();
      uint64_t v8 = CreateCancel(&v21, 0);
      if ((v8 & 0x80000000) != 0)
      {
        uint64_t v5 = v8;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPCancel_cold_1();
          }
        }
      }
      else
      {
        uint64_t v9 = v21;
        *(_DWORD *)uint64_t v21 = 1;
        uint64_t v5 = DLPutMsg(v20, (uint64_t)v9, 0);
        if ((v5 & 0x80000000) != 0)
        {
          FreeSipMsg(v21);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              SIPCancel_cold_2();
            }
          }
        }
      }
      goto LABEL_24;
    }
    uint64_t v5 = v7;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint32_t v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v23 = v10;
        __int16 v24 = 2080;
        uint64_t v25 = "SIPCancel";
        __int16 v26 = 1024;
        int v27 = 2732;
        __int16 v28 = 1024;
        int v29 = 2732;
        __int16 v30 = 1024;
        int v31 = a2;
        uint64_t v12 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%"
              "d: Cannot find call ID(%d)";
        uint64_t v13 = v11;
        uint32_t v14 = 40;
LABEL_23:
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v15 = VRTraceErrorLogLevelToCSTR();
    long long v16 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v23 = v15;
      __int16 v24 = 2080;
      uint64_t v25 = "SIPCancel";
      __int16 v26 = 1024;
      int v27 = 2725;
      __int16 v28 = 1024;
      int v29 = 2725;
      uint64_t v12 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d:"
            " Call SIPStartListen first.";
      uint64_t v13 = v16;
      uint32_t v14 = 34;
      goto LABEL_23;
    }
  }
LABEL_24:
  TPDiscardConnectionResult();
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v17 = VRTraceErrorLogLevelToCSTR();
    uint64_t v18 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v23 = v17;
      __int16 v24 = 2080;
      uint64_t v25 = "SIPCancel";
      __int16 v26 = 1024;
      int v27 = 2756;
      __int16 v28 = 1024;
      int v29 = v5;
      _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPCancel stop(%X)...", buf, 0x22u);
    }
  }
  return v5;
}

uint64_t SIPHangup(uint64_t *a1, uint64_t a2, int a3)
{
  return SIPHangupWithTimeout(a1, a2, 0xFFFFFFFFuLL, a3);
}

uint64_t SIPHangupWithTimeout(uint64_t *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v34 = -1431655766;
  uint64_t v32 = (void *)0xAAAAAAAAAAAAAAAALL;
  int v33 = (void *)0xAAAAAAAAAAAAAAAALL;
  memset(__b, 170, sizeof(__b));
  uint64_t v30 = 0xFFFFFFFFLL;
  uint64_t v31 = 0xFFFFFFFFLL;
  uint64_t v8 = *a1;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136316162;
      uint64_t v36 = v9;
      __int16 v37 = 2080;
      int v38 = "SIPHangupWithTimeout";
      __int16 v39 = 1024;
      int v40 = 2780;
      __int16 v41 = 1024;
      int v42 = a4;
      __int16 v43 = 2080;
      v44[0] = "Remote Hang Up";
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPHangup start with detailed code (%u), Reason:(%s)", buf, 0x2Cu);
    }
  }
  uint64_t v11 = 2148139025;
  uint64_t v12 = (_DWORD *)CheckInHandleDebug();
  if (!v12) {
    return 2148139010;
  }
  uint64_t v13 = v12;
  if (*v12 || v12[1])
  {
    uint64_t v14 = DLFindWithCallIDAndLock(&v31);
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t v20 = v14;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        uint64_t v22 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136316162;
          uint64_t v36 = v21;
          __int16 v37 = 2080;
          int v38 = "SIPHangupWithTimeout";
          __int16 v39 = 1024;
          int v40 = 2795;
          __int16 v41 = 1024;
          int v42 = 2795;
          __int16 v43 = 1024;
          LODWORD(v44[0]) = a2;
          _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Cannot find call ID(%d)", buf, 0x28u);
        }
      }
      uint64_t v11 = v20;
    }
    else
    {
      DLGetData(v31, (uint64_t)__b);
      DLGetState(v31, &v34);
      if (v34 == 3)
      {
        DLSetState(v31, 5);
        DLUnlock();
        uint64_t Bye = CreateBye((unint64_t *)&v33, v31, a4, (uint64_t)"Remote Hang Up", v13[4]);
        if ((Bye & 0x80000000) != 0)
        {
          uint64_t v11 = Bye;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              SIPHangupWithTimeout_cold_1();
            }
          }
        }
        else
        {
          uint64_t v16 = TACreateHandle(&v30, 1, *((void *)v13 + 3), (uint64_t)v33, 0xFFFFFFFFLL, (uint64_t)TUMsgCallback, (uint64_t)a1);
          if ((v16 & 0x80000000) != 0)
          {
            uint64_t v11 = v16;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                SIPHangupWithTimeout_cold_2();
              }
            }
            uint64_t v18 = v33;
LABEL_39:
            FreeSipMsg(v18);
          }
          else
          {
            uint64_t v17 = TAStart((void *)v30);
            if ((v17 & 0x80000000) == 0)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v11 = DLGetMsg(v31, &v32, a3, 4, (uint64_t)v33, -1);
                  if ((v11 & 0x80000000) != 0)
                  {
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        SIPHangupWithTimeout_cold_4();
                      }
                    }
                    goto LABEL_46;
                  }
                  uint64_t v18 = v32;
                  if (*((_DWORD *)v32 + 1) == 2) {
                    break;
                  }
LABEL_16:
                  FreeSipMsg(v18);
                }
                int v19 = *((_DWORD *)v32 + 2);
                if ((v19 - 1) <= 4)
                {
                  (*((void (**)(uint64_t, void, uint64_t, uint64_t, char *, void, void, void))v13 + 4))(v8, *((void *)v13 + 5), 4, a2, (char *)v32 + 12, 0, 0, 0);
                  uint64_t v18 = v32;
                  goto LABEL_16;
                }
                if ((v19 & 0xFFFFFFFE) == 6) {
                  goto LABEL_39;
                }
                if ((v19 - 8) <= 0x2C)
                {
                  uint64_t v11 = v19 | 0x900A0000;
                  goto LABEL_39;
                }
              }
            }
            uint64_t v11 = v17;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                SIPHangupWithTimeout_cold_3();
              }
            }
          }
        }
      }
      else
      {
        DLUnlock();
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v23 = VRTraceErrorLogLevelToCSTR();
          __int16 v24 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)pthread_attr_t buf = 136316418;
            uint64_t v36 = v23;
            __int16 v37 = 2080;
            int v38 = "SIPHangupWithTimeout";
            __int16 v39 = 1024;
            int v40 = 2804;
            __int16 v41 = 1024;
            int v42 = 2804;
            __int16 v43 = 1024;
            LODWORD(v44[0]) = a2;
            WORD2(v44[0]) = 1024;
            *(_DWORD *)((char *)v44 + 6) = v34;
            _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Call(%d) is in state %d", buf, 0x2Eu);
          }
        }
        uint64_t v31 = 0xFFFFFFFFLL;
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v25 = VRTraceErrorLogLevelToCSTR();
    __int16 v26 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v36 = v25;
      __int16 v37 = 2080;
      int v38 = "SIPHangupWithTimeout";
      __int16 v39 = 1024;
      int v40 = 2788;
      __int16 v41 = 1024;
      int v42 = 2788;
      _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Call SIPStartListen first.", buf, 0x22u);
    }
  }
LABEL_46:
  TPDiscardConnectionResult();
  if ((v11 & 0x90000000) == 0x80000000) {
    TACancel();
  }
  DLCloseHandle();
  TACloseHandle();
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v27 = VRTraceErrorLogLevelToCSTR();
    __int16 v28 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v36 = v27;
      __int16 v37 = 2080;
      int v38 = "SIPHangupWithTimeout";
      __int16 v39 = 1024;
      int v40 = 2873;
      __int16 v41 = 1024;
      int v42 = v11;
      _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPHangup stop(%X)...", buf, 0x22u);
    }
  }
  return v11;
}

uint64_t SIPCloseCall(uint64_t a1, int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v18 = -1431655766;
  memset(__b, 170, sizeof(__b));
  uint64_t v17 = 0xFFFFFFFFLL;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v20 = v3;
      __int16 v21 = 2080;
      uint64_t v22 = "SIPCloseCall";
      __int16 v23 = 1024;
      int v24 = 2885;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPCloseCall start...", buf, 0x1Cu);
    }
  }
  uint64_t v5 = 2148139025;
  uint64_t v6 = (_DWORD *)CheckInHandleDebug();
  if (!v6) {
    return 2148139010;
  }
  uint64_t v7 = v6;
  if (!*v6 && !v6[1])
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_21;
    }
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    uint64_t v13 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v20 = v12;
      __int16 v21 = 2080;
      uint64_t v22 = "SIPCloseCall";
      __int16 v23 = 1024;
      int v24 = 2893;
      __int16 v25 = 1024;
      int v26 = 2893;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Call SIPStartListen first.", buf, 0x22u);
    }
    goto LABEL_13;
  }
  uint64_t v5 = DLFindWithCallIDAndLock(&v17);
  if ((v5 & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v20 = v10;
        __int16 v21 = 2080;
        uint64_t v22 = "SIPCloseCall";
        __int16 v23 = 1024;
        int v24 = 2900;
        __int16 v25 = 1024;
        int v26 = 2900;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Cannot find call ID(%d)", buf, 0x28u);
      }
    }
    goto LABEL_21;
  }
  DLGetState(v17, &v18);
  DLGetData(v17, (uint64_t)__b);
  DLUnlock();
  TPStopHeartbeat(*((void *)v7 + 3), (uint64_t)&__b[148]);
  if (v18 != 3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316418;
        uint64_t v20 = v8;
        __int16 v21 = 2080;
        uint64_t v22 = "SIPCloseCall";
        __int16 v23 = 1024;
        int v24 = 2909;
        __int16 v25 = 1024;
        int v26 = 2909;
        __int16 v27 = 1024;
        int v28 = a2;
        __int16 v29 = 1024;
        int v30 = v18;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Call(%d) is in state %d", buf, 0x2Eu);
      }
    }
    uint64_t v17 = 0xFFFFFFFFLL;
LABEL_13:
    uint64_t v5 = 2148139025;
  }
LABEL_21:
  TPDiscardConnectionResult();
  DLCloseHandle();
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    uint64_t v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v20 = v14;
      __int16 v21 = 2080;
      uint64_t v22 = "SIPCloseCall";
      __int16 v23 = 1024;
      int v24 = 2921;
      __int16 v25 = 1024;
      int v26 = v5;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPCloseCall stop(%X)...", buf, 0x22u);
    }
  }
  return v5;
}

uint64_t SIPSendMessage(uint64_t *a1, uint64_t a2, char *a3, _DWORD *a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v48 = -1431655766;
  uint64_t v46 = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v47 = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v44 = 0xFFFFFFFFLL;
  *(void *)uint64_t v45 = 0xFFFFFFFFLL;
  uint64_t v8 = *a1;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v50 = v9;
      __int16 v51 = 2080;
      BOOL v52 = "SIPSendMessage";
      __int16 v53 = 1024;
      int v54 = 2936;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPSendMessage start...", buf, 0x1Cu);
    }
  }
  uint64_t v11 = 2148139025;
  uint64_t v12 = (_DWORD *)CheckInHandleDebug();
  if (!v12) {
    return 2148139010;
  }
  uint64_t v13 = v12;
  if (!*v12 && !v12[1])
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_54;
    }
    uint64_t v34 = VRTraceErrorLogLevelToCSTR();
    int v35 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_54;
    }
    *(_DWORD *)pthread_attr_t buf = 136315906;
    uint64_t v50 = v34;
    __int16 v51 = 2080;
    BOOL v52 = "SIPSendMessage";
    __int16 v53 = 1024;
    int v54 = 2944;
    __int16 v55 = 1024;
    *(_DWORD *)uint64_t v56 = 2944;
    __int16 v27 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: C"
          "all SIPStartListen first.";
    int v28 = v35;
    uint32_t v29 = 34;
    goto LABEL_41;
  }
  if (!a2)
  {
    uint64_t v11 = 2148139009;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_54;
    }
    uint64_t v25 = VRTraceErrorLogLevelToCSTR();
    int v26 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_54;
    }
    *(_DWORD *)pthread_attr_t buf = 136316162;
    uint64_t v50 = v25;
    __int16 v51 = 2080;
    BOOL v52 = "SIPSendMessage";
    __int16 v53 = 1024;
    int v54 = 2973;
    __int16 v55 = 1024;
    *(_DWORD *)uint64_t v56 = 2973;
    *(_WORD *)&v56[4] = 1024;
    *(_DWORD *)&v56[6] = 0;
    __int16 v27 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: C"
          "allID(%d) is invalid";
    int v28 = v26;
    uint32_t v29 = 40;
    goto LABEL_41;
  }
  uint64_t v14 = DLFindWithCallIDAndLock((uint64_t *)v45);
  if ((v14 & 0x80000000) != 0)
  {
    uint64_t v20 = v14;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v30 = VRTraceErrorLogLevelToCSTR();
      uint64_t v31 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v50 = v30;
        __int16 v51 = 2080;
        BOOL v52 = "SIPSendMessage";
        __int16 v53 = 1024;
        int v54 = 2952;
        __int16 v55 = 1024;
        *(_DWORD *)uint64_t v56 = 2952;
        *(_WORD *)&v56[4] = 1024;
        *(_DWORD *)&v56[6] = a2;
        _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Cannot find call ID(%d)", buf, 0x28u);
      }
    }
    goto LABEL_53;
  }
  DLGetState(*(uint64_t *)v45, &v48);
  DLUnlock();
  if (v48 != 3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_54;
    }
    uint64_t v32 = VRTraceErrorLogLevelToCSTR();
    int v33 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_54;
    }
    *(_DWORD *)pthread_attr_t buf = 136316418;
    uint64_t v50 = v32;
    __int16 v51 = 2080;
    BOOL v52 = "SIPSendMessage";
    __int16 v53 = 1024;
    int v54 = 2959;
    __int16 v55 = 1024;
    *(_DWORD *)uint64_t v56 = 2959;
    *(_WORD *)&v56[4] = 1024;
    *(_DWORD *)&v56[6] = a2;
    LOWORD(v57[0]) = 1024;
    *(_DWORD *)((char *)v57 + 2) = v48;
    __int16 v27 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: C"
          "all(%d) is in state %d";
    int v28 = v33;
    uint32_t v29 = 46;
LABEL_41:
    _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
LABEL_54:
    TACancel();
    uint64_t v20 = v11;
    goto LABEL_55;
  }
  uint64_t MessageInDialog = CreateMessageInDialog((unint64_t *)&v47, *(uint64_t *)v45, a3, v13[4]);
  if ((MessageInDialog & 0x80000000) != 0)
  {
    uint64_t v20 = MessageInDialog;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPSendMessage_cold_1();
      }
    }
    goto LABEL_53;
  }
  uint64_t v16 = v47;
  uint64_t v17 = strstr(*((char **)v47 + 69), "VCHandoverCandidateChange:VCHandoverNewCandidateBlob");
  uint64_t v18 = TACreateHandle(&v44, 1, *((void *)v13 + 3), (uint64_t)v16, 0xFFFFFFFFLL, (uint64_t)TUMsgCallback, (uint64_t)a1);
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v20 = v18;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPSendMessage_cold_2();
      }
    }
    uint64_t v36 = v47;
LABEL_49:
    FreeSipMsg(v36);
LABEL_53:
    uint64_t v11 = v20;
    if ((v20 & 0x10000000) != 0) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  uint64_t v19 = TAStart((void *)v44);
  if ((v19 & 0x80000000) != 0)
  {
    uint64_t v20 = v19;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPSendMessage_cold_3();
      }
    }
    goto LABEL_53;
  }
  uint64_t v20 = DLGetMsg(*(uint64_t *)v45, &v46, 0xFFFFFFFFuLL, 7, (uint64_t)v47, -1);
  if ((v20 & 0x80000000) != 0)
  {
LABEL_25:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPSendMessage_cold_4();
      }
    }
    goto LABEL_53;
  }
  __int16 v43 = v17;
  while (1)
  {
    __int16 v21 = v46;
    if (*((_DWORD *)v46 + 1) != 2) {
      goto LABEL_21;
    }
    int v22 = *((_DWORD *)v46 + 2);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v23 = VRTraceErrorLogLevelToCSTR();
      int v24 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315906;
        uint64_t v50 = v23;
        __int16 v51 = 2080;
        BOOL v52 = "SIPSendMessage";
        __int16 v53 = 1024;
        int v54 = 3004;
        __int16 v55 = 1024;
        *(_DWORD *)uint64_t v56 = v22;
        _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPSendMessage status(%d)...", buf, 0x22u);
      }
    }
    if ((v22 - 1) <= 4)
    {
      (*((void (**)(uint64_t, void, uint64_t, uint64_t, char *, void, void, void))v13 + 4))(v8, *((void *)v13 + 5), 4, a2, (char *)v46 + 12, 0, 0, 0);
      __int16 v21 = v46;
LABEL_21:
      FreeSipMsg(v21);
      goto LABEL_24;
    }
    if ((v22 & 0xFFFFFFFE) == 6) {
      break;
    }
    if ((v22 - 8) <= 0x2C)
    {
      uint64_t v20 = v22 | 0x900A0000;
      if (a4 && v22 == 45) {
        *a4 = 1;
      }
      uint64_t v36 = v46;
      goto LABEL_49;
    }
LABEL_24:
    uint64_t v20 = DLGetMsg(*(uint64_t *)v45, &v46, 0xFFFFFFFFuLL, 7, (uint64_t)v47, -1);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_25;
    }
  }
  if (v43)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v40 = VRTraceErrorLogLevelToCSTR();
      __int16 v41 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v42 = *((_DWORD *)v46 + 2);
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v50 = v40;
        __int16 v51 = 2080;
        BOOL v52 = "SIPSendMessage";
        __int16 v53 = 1024;
        int v54 = 3012;
        __int16 v55 = 2080;
        *(void *)uint64_t v56 = (char *)v46 + 12;
        *(_WORD *)&v56[8] = 1024;
        v57[0] = v42;
        _os_log_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d HandoverReport: got %s back for candidateChangeMessage, status: %d", buf, 0x2Cu);
      }
    }
    (*((void (**)(uint64_t, void, uint64_t, uint64_t, char *, void, void, void))v13 + 4))(v8, *((void *)v13 + 5), 17, a2, (char *)v46 + 12, 0, 0, 0);
  }
  FreeSipMsg(v46);
LABEL_55:
  TACloseHandle();
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v37 = VRTraceErrorLogLevelToCSTR();
    int v38 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v50 = v37;
      __int16 v51 = 2080;
      BOOL v52 = "SIPSendMessage";
      __int16 v53 = 1024;
      int v54 = 3041;
      __int16 v55 = 1024;
      *(_DWORD *)uint64_t v56 = v20;
      _os_log_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPSendMessage stop(%X)...", buf, 0x22u);
    }
  }
  return v20;
}

uint64_t SIPSendMessageAll(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v32 = -1431655766;
  int v33 = -1431655766;
  uint64_t v30 = 0;
  uint64_t v31 = (void *)0xAAAAAAAAAAAAAAAALL;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v35 = v5;
      __int16 v36 = 2080;
      uint64_t v37 = "SIPSendMessageAll";
      __int16 v38 = 1024;
      int v39 = 3058;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPSendMessageAll start...", buf, 0x1Cu);
    }
  }
  uint64_t v7 = 2148139011;
  DLFindActiveDialogs(&v33, &v30);
  if (v33 < 1) {
    return 2148139030;
  }
  uint64_t v8 = CheckInHandleDebug();
  if (!v8)
  {
    free(v30);
    return 2148139010;
  }
  uint64_t v9 = v8;
  uint64_t v10 = (unint64_t *)malloc_type_calloc(1uLL, 8 * v33, 0x2004093837F09uLL);
  if (!v10) {
    goto LABEL_62;
  }
  uint64_t v11 = v10;
  uint64_t v12 = (uint64_t *)malloc_type_calloc(1uLL, 8 * v33, 0x2004093837F09uLL);
  if (!v12) {
    goto LABEL_61;
  }
  uint64_t v13 = v12;
  if (v33 < 1)
  {
    uint64_t v7 = 0;
    goto LABEL_60;
  }
  *(void *)uint32_t v29 = v11;
  uint64_t v14 = 0;
  uint64_t v7 = 0;
  do
  {
    v13[v14] = 0xFFFFFFFFLL;
    if (!strcmp(a3, "PING"))
    {
      *(_DWORD *)pthread_attr_t buf = -1431655766;
      uint64_t v7 = DLGetSIPPing(*((void *)v30 + v14), buf);
      if ((v7 & 0x80000000) == 0 && !*(_DWORD *)buf) {
        *((void *)v30 + v14) = 0xFFFFFFFFLL;
      }
    }
    DLGetCallID(*((void *)v30 + v14++), &v32);
    int v15 = v33;
  }
  while (v14 < v33);
  if (v33 < 1) {
    goto LABEL_39;
  }
  uint64_t v16 = 0;
  uint64_t v17 = v13;
  do
  {
    uint64_t v18 = *((void *)v30 + v16);
    if (v18 == 0xFFFFFFFFLL) {
      goto LABEL_22;
    }
    uint64_t MessageInDialog = CreateMessageInDialog(v11, v18, a3, *(_DWORD *)(v9 + 16));
    if ((MessageInDialog & 0x80000000) != 0)
    {
      uint64_t v7 = MessageInDialog;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t v11 = *(unint64_t **)v29;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPSendMessageAll_cold_2();
        }
        goto LABEL_53;
      }
LABEL_52:
      uint64_t v11 = *(unint64_t **)v29;
      goto LABEL_53;
    }
    uint64_t v20 = TACreateHandle(v17, 1, *(void *)(v9 + 24), *v11, 0xFFFFFFFFLL, (uint64_t)TUMsgCallback, a1);
    if ((v20 & 0x80000000) != 0)
    {
      uint64_t v7 = v20;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPSendMessageAll_cold_3();
        }
      }
      FreeSipMsg((void *)*v11);
      goto LABEL_52;
    }
    uint64_t v7 = TAStart((void *)*v17);
    if ((v7 & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t v11 = *(unint64_t **)v29;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPSendMessageAll_cold_4();
        }
        goto LABEL_53;
      }
      goto LABEL_52;
    }
    int v15 = v33;
LABEL_22:
    ++v16;
    ++v17;
    ++v11;
  }
  while (v16 < v15);
  if (v15 >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v11 = *(unint64_t **)v29;
    while (1)
    {
      while (1)
      {
        uint64_t v22 = *((void *)v30 + v21);
        if (v22 != 0xFFFFFFFFLL) {
          break;
        }
LABEL_34:
        ++v21;
        int v15 = v33;
        if (v21 >= v33) {
          goto LABEL_40;
        }
      }
      uint64_t v7 = DLGetMsg(v22, &v31, 0xFFFFFFFFuLL, 7, *(void *)(*(void *)v29 + 8 * v21), -1);
      if ((v7 & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPSendMessageAll_cold_1();
          }
        }
        goto LABEL_53;
      }
      if (*((_DWORD *)v31 + 1) == 2)
      {
        int v23 = *((_DWORD *)v31 + 2);
        FreeSipMsg(v31);
        if ((v23 & 0xFFFFFFFE) == 6) {
          goto LABEL_34;
        }
        if ((v23 - 8) <= 0x2C)
        {
          if (v23 == 21)
          {
            DLSetState(*((void *)v30 + v21), 5);
            uint64_t v7 = 2416574485;
          }
          else
          {
            uint64_t v7 = v23 | 0x900A0000;
          }
          goto LABEL_34;
        }
      }
      else
      {
        FreeSipMsg(v31);
      }
    }
  }
LABEL_39:
  uint64_t v11 = *(unint64_t **)v29;
LABEL_40:
  if ((v7 & 0x80000000) != 0)
  {
LABEL_53:
    int v15 = v33;
    if ((v7 & 0x10000000) == 0 && v33 >= 1)
    {
      for (uint64_t i = 0; i < v33; ++i)
      {
        TACancel();
        int v15 = v33;
      }
    }
  }
  if (v15 >= 1)
  {
    uint64_t v25 = 0;
    do
    {
      TACloseHandle();
      ++v25;
    }
    while (v25 < v33);
  }
LABEL_60:
  free(v13);
LABEL_61:
  free(v11);
LABEL_62:
  if (v30) {
    free(v30);
  }
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v26 = VRTraceErrorLogLevelToCSTR();
    __int16 v27 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v35 = v26;
      __int16 v36 = 2080;
      uint64_t v37 = "SIPSendMessageAll";
      __int16 v38 = 1024;
      int v39 = 3185;
      __int16 v40 = 1024;
      int v41 = v7;
      _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPSendMessageAll stop(%X)...", buf, 0x22u);
    }
  }
  return v7;
}

uint64_t SIPGetRemoteInfo(uint64_t a1, int a2, char *a3, char *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(__b, 170, sizeof(__b));
  uint64_t v11 = 0xFFFFFFFFLL;
  uint64_t v7 = DLFindWithCallIDAndLock(&v11);
  if ((v7 & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v13 = v8;
        __int16 v14 = 2080;
        int v15 = "SIPGetRemoteInfo";
        __int16 v16 = 1024;
        int v17 = 3238;
        __int16 v18 = 1024;
        int v19 = 3238;
        __int16 v20 = 1024;
        int v21 = a2;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Cannot find call ID(%d)", buf, 0x28u);
      }
    }
  }
  else
  {
    DLGetData(v11, (uint64_t)__b);
    DLUnlock();
    if (a3) {
      strlcpy(a3, &__b[506], 0x2BuLL);
    }
    if (a4) {
      CopyRemoteDisplayWithoutQuotes(a4, &__b[331], &__b[669], &__b[724]);
    }
  }
  return v7;
}

uint64_t SIPSetDoKeyExchange(uint64_t a1, int a2, const void *a3)
{
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2148139010;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(const void **)(v5 + 48);
  if (v7) {
    CFRelease(v7);
  }
  if (a3) {
    CFTypeRef v8 = CFRetain(a3);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *(void *)(v6 + 48) = v8;
  *(_DWORD *)(v6 + 56) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t SIPSetEnableCompression(uint64_t a1, int a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148139010;
  }
  *(_DWORD *)(v3 + 16) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t SIPSetAllowSameSourceDestination(uint64_t a1, char a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148139010;
  }
  uint64_t v4 = TPSetAllowSameSourceDestination(*(void *)(v3 + 24), a2);
  CheckOutHandleDebug();
  return v4;
}

uint64_t SIPNewCallProc(uint64_t a1)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  int v56 = -1;
  memset(__b, 170, sizeof(__b));
  uint64_t v54 = 0xFFFFFFFFLL;
  __int16 v55 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)__int16 v53 = 0xFFFFFFFFLL;
  uint64_t v2 = **(void **)(a1 + 1000);
  pthread_setname_np("com.apple.avconference.sip.newcallproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "SIPNewCallProc";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 187;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPNewCallProc Thread start...", buf, 0x1Cu);
    }
  }
  uint64_t v5 = (pthread_mutex_t *)CheckInHandleDebug();
  if (!v5)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPNewCallProc_cold_1();
      }
    }
    FreeSipMsg((void *)a1);
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 1;
  pthread_mutex_lock(v5 + 1);
  if ((DLFindWithSipMsgAndLock(&v54, a1) & 0x80000000) == 0)
  {
    DLUnlock();
    pthread_mutex_unlock(v7);
    int v8 = 0;
    uint64_t v54 = 0xFFFFFFFFLL;
    goto LABEL_63;
  }
  unsigned int v52 = 0;
  uint64_t v9 = *(char **)(a1 + 312);
  if (!v9)
  {
    uint64_t v12 = (int *)(a1 + 572);
    *(_DWORD *)(a1 + 572) = 0;
LABEL_25:
    *uint64_t v12 = VCUniqueIDGenerator_GenerateID();
    goto LABEL_26;
  }
  *(void *)&buf[78] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&unsigned char buf[48] = v10;
  *(_OWORD *)&unsigned char buf[64] = v10;
  *(_OWORD *)&buf[16] = v10;
  *(_OWORD *)&buf[32] = v10;
  *(_OWORD *)pthread_attr_t buf = v10;
  CopyRemoteDisplayWithoutQuotes(buf, v9, v9 + 49, v9 + 104);
  if ((*(unsigned int (**)(uint64_t, void, uint64_t, void, unsigned char *, uint64_t, unsigned int *, void))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 13, 0, buf, a1 + 576, &v52, 0) == 3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPNewCallProc_cold_7(v11);
      }
    }
    pthread_mutex_unlock(v7);
LABEL_17:
    int v8 = 50;
    goto LABEL_59;
  }
  unsigned int v13 = v52;
  uint64_t v12 = (int *)(a1 + 572);
  *(_DWORD *)(a1 + 572) = v52;
  if (!v13) {
    goto LABEL_25;
  }
  if ((DLFindWithCallIDAndLock(&v54) & 0x80000000) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      int v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *v12;
        *(_DWORD *)pthread_attr_t buf = 136315906;
        *(void *)&uint8_t buf[4] = v14;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "SIPNewCallProc";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 235;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = v16;
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Found an existing dialog with Call ID %d. Closing.", buf, 0x22u);
      }
    }
    DLGetConfIndex(v54, &v56);
    DLUnlock();
    uint64_t v54 = 0xFFFFFFFFLL;
  }
LABEL_26:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v17 = VRTraceErrorLogLevelToCSTR();
    __int16 v18 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *v12;
      *(_DWORD *)pthread_attr_t buf = 136315906;
      *(void *)&uint8_t buf[4] = v17;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "SIPNewCallProc";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 243;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v19;
      _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Incoming call for Call ID %d", buf, 0x22u);
    }
  }
  if (!(*(unsigned int (**)(uint64_t, void, uint64_t, void, void, void, void, void))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 18, v52, 0, 0, 0, 0))
  {
    int v23 = DLCreateHandle(&v54, *(_DWORD *)(a1 + 572), a1, 1, 3, -1, (uint64_t)DLIsFinishedCallback, v2);
    if (v23 < 0)
    {
      int v25 = v23;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPNewCallProc_cold_2();
        }
      }
      TPRemovePreservedPortBindForCallID(*(void *)&v6->__opaque[16], *v12);
      if (v25 == -2146697182) {
        int v8 = 13;
      }
      else {
        int v8 = 42;
      }
      goto LABEL_59;
    }
    pthread_mutex_unlock(v7);
    if ((TACreateHandle((uint64_t *)v53, 2, *(void *)&v6->__opaque[16], a1, 0xFFFFFFFFLL, (uint64_t)TUMsgCallback, *(void *)(a1 + 1000)) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPNewCallProc_cold_3();
        }
      }
    }
    else if ((TAStart(*(void **)v53) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPNewCallProc_cold_4();
        }
      }
    }
    else if ((SendTAStatus(*(uint64_t *)v53, a1, 0xFFFFFFFFLL, 0, 0, 0, *(_DWORD *)v6->__opaque) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPNewCallProc_cold_5();
        }
      }
    }
    else
    {
      uint64_t v24 = *(void *)(a1 + 208);
      int v51 = 11;
      Intint StatusCode = GetIntStatusCode(1);
      if (v24) {
        (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, void, int *, int *))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 15, *v12, v24, 0, &v51, &IntStatusCode);
      }
      if (*(_DWORD *)(a1 + 132))
      {
        int v8 = 25;
        goto LABEL_59;
      }
      *(_DWORD *)v6->__opaque = 1;
      if (!LODWORD(v6->__sig) && !HIDWORD(v6->__sig))
      {
LABEL_83:
        int v8 = 36;
LABEL_59:
        if ((SendTAStatus(*(uint64_t *)v53, a1, 0xFFFFFFFFLL, v8, 0, 0, *(_DWORD *)v6->__opaque) & 0x80000000) != 0)
        {
          SendTPStatus(*(void *)&v6->__opaque[16], a1, v8, 0, 0, *(_DWORD *)v6->__opaque);
          TACancel();
        }
        goto LABEL_61;
      }
      *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v68[4] = v30;
      v68[5] = v30;
      v68[2] = v30;
      v68[3] = v30;
      unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
      v68[1] = v30;
      v68[0] = v30;
      long long v67 = v30;
      long long v66 = v30;
      *(_OWORD *)&buf[184] = v30;
      *(_OWORD *)&buf[168] = v30;
      *(_OWORD *)&buf[152] = v30;
      *(_OWORD *)&buf[136] = v30;
      *(_OWORD *)&buf[120] = v30;
      *(_OWORD *)&buf[104] = v30;
      *(_OWORD *)&buf[88] = v30;
      *(_OWORD *)&buf[72] = v30;
      *(_OWORD *)&unsigned char buf[56] = v30;
      *(_OWORD *)&uint8_t buf[40] = v30;
      *(_OWORD *)&unsigned char buf[24] = v30;
      *(_OWORD *)&buf[8] = v30;
      memset(v49, 170, 20);
      long long v31 = *(_OWORD *)(a1 + 712);
      *(_OWORD *)&uint8_t buf[36] = *(_OWORD *)(a1 + 696);
      *(_OWORD *)&buf[52] = v31;
      *(void *)&buf[68] = *(void *)(a1 + 728);
      long long v32 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)&buf[76] = *(_OWORD *)(a1 + 736);
      *(_OWORD *)&buf[92] = v32;
      *(void *)&buf[108] = *(void *)(a1 + 768);
      long long v33 = *(_OWORD *)(a1 + 776);
      long long v34 = *(_OWORD *)(a1 + 792);
      *(void *)&buf[148] = *(void *)(a1 + 808);
      *(_OWORD *)&buf[132] = v34;
      *(_OWORD *)&buf[116] = v33;
      long long v35 = *(_OWORD *)(a1 + 816);
      long long v36 = *(_OWORD *)(a1 + 832);
      *(void *)&buf[188] = *(void *)(a1 + 848);
      *(_OWORD *)&buf[172] = v36;
      *(_OWORD *)&buf[156] = v35;
      long long v37 = *(_OWORD *)(a1 + 856);
      long long v38 = *(_OWORD *)(a1 + 872);
      *(void *)((char *)&v68[2] + 4) = *(void *)(a1 + 888);
      *(_OWORD *)((char *)&v68[1] + 4) = v38;
      *(_OWORD *)((char *)v68 + 4) = v37;
      *(_WORD *)&buf[32] = *(_WORD *)(a1 + 568);
      *(_WORD *)&unsigned char buf[34] = *(_WORD *)(a1 + 570);
      *(void *)pthread_attr_t buf = &v49[1];
      LODWORD(v69) = 0;
      int v39 = SendTAStatus(*(uint64_t *)v53, a1, v54, 2, 0, 0, *(_DWORD *)v6->__opaque);
      if ((v39 & 0x80000000) == 0)
      {
        if (v24)
        {
          Intint StatusCode = GetIntStatusCode(2);
          (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, void, int *, int *))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 15, *v12, v24, 0, &v51, &IntStatusCode);
        }
        __b[0] = 0;
        int v40 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, char *, unsigned char *, int *))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 2, *(unsigned int *)(a1 + 572), *(void *)(a1 + 552), __b, buf, &v56);
        (*(void (**)(uint64_t, void, uint64_t, void, void, void, unsigned int *, void))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 12, *(unsigned int *)(a1 + 572), 0, 0, v49, 0);
        DLSetMediaType(v54, v49[0]);
        int v8 = 37;
        switch(v40)
        {
          case 0:
            DLSetConfIndex(v54, v56);
            TickCFIndex Count = GetTickCount();
            if (GetTickCount() - TickCount > 0x7D00) {
              goto LABEL_77;
            }
            unint64_t v46 = 500;
            break;
          case 1:
            goto LABEL_59;
          case 2:
            goto LABEL_83;
          case 3:
            goto LABEL_17;
          default:
            goto LABEL_58;
        }
        while (1)
        {
          int v47 = SendTAStatus(*(uint64_t *)v53, a1, v54, 6, __b, &v49[1], *(_DWORD *)v6->__opaque);
          if (v47 == -2146435037)
          {
            if ((SendTPStatus(*(void *)&v6->__opaque[16], a1, 6, __b, &v49[1], *(_DWORD *)v6->__opaque) & 0x80000000) != 0)
            {
              __sprintf_chk(__b, 0, 0xA8CuLL, "Transport Error(%08X)");
LABEL_106:
              (*(void (**)(uint64_t, void, uint64_t, void, char *, void, void, void))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 3, *v12, __b, 0, 0, 0);
              goto LABEL_58;
            }
          }
          else if (v47 < 0)
          {
            if (v47 == -2146828258)
            {
              __sprintf_chk(__b, 0, 0xA8CuLL, "Cancelled");
              int v8 = 37;
            }
            else
            {
              __sprintf_chk(__b, 0, 0xA8CuLL, "Transport Error(%08X)", v47);
              int v8 = 42;
            }
            (*(void (**)(uint64_t, void, uint64_t, void, char *, void, void, void))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 3, *v12, __b, 0, 0, 0);
            goto LABEL_59;
          }
          if (v24)
          {
            Intint StatusCode = GetIntStatusCode(6);
            (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, void, int *, int *))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 15, *v12, v24, 0, &v51, &IntStatusCode);
          }
          int v48 = DLGetMsg(v54, &v55, v46, 1, 0, -1);
          if (v48 < 0)
          {
            if ((unsigned __int16)v48 != 23)
            {
              __sprintf_chk(__b, 0, 0xA8CuLL, "Internal Error(%08X)");
              goto LABEL_106;
            }
            if (2 * v46 >= 0xFA0) {
              unint64_t v46 = 4000;
            }
            else {
              v46 *= 2;
            }
            Intint StatusCode = 6;
            if (v24) {
              (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, void, int *, int *))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 15, *v12, v24, 0, &v51, &IntStatusCode);
            }
          }
          else
          {
            if (*((_DWORD *)v55 + 1) == 1 && *((_DWORD *)v55 + 2) == 2)
            {
              (*(void (**)(uint64_t, void, uint64_t, void, void, void, void, void))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 1, *v12, 0, 0, 0, 0);
              FreeSipMsg(v55);
              int v8 = 6;
              goto LABEL_63;
            }
            FreeSipMsg(v55);
          }
          if (GetTickCount() - TickCount > 0x7D00)
          {
LABEL_77:
            SIPHangupWithTimeout(*(uint64_t **)(a1 + 1000), *(unsigned int *)(a1 + 572), 0xFFFFFFFFuLL, 291);
            (*(void (**)(uint64_t, void, uint64_t, void, const char *, void, void, void))&v6->__opaque[24])(v2, *(void *)&v6->__opaque[32], 3, *(unsigned int *)(a1 + 572), "Timeout", 0, 0, 0);
            goto LABEL_34;
          }
        }
      }
      int v42 = v39;
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (v42 == -2146828258)
      {
        if (ErrorLogLevelForModule >= 5)
        {
          uint64_t v44 = VRTraceErrorLogLevelToCSTR();
          uint64_t v45 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int v57 = 136315906;
            uint64_t v58 = v44;
            __int16 v59 = 2080;
            uint64_t v60 = "SIPNewCallProc";
            __int16 v61 = 1024;
            int v62 = 335;
            __int16 v63 = 1024;
            int v64 = 335;
            _os_log_impl(&dword_1E1EA4000, v45, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SendTAStatus cancelled", v57, 0x22u);
          }
        }
        int v8 = 37;
        goto LABEL_59;
      }
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPNewCallProc_cold_6();
        }
      }
    }
LABEL_58:
    int v8 = 42;
    goto LABEL_59;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v20 = VRTraceErrorLogLevelToCSTR();
    int v21 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *v12;
      *(_DWORD *)pthread_attr_t buf = 136315906;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "SIPNewCallProc";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 248;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v22;
      _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Primary connection is not ready, ignore the SIP INVITE for Call ID: %u", buf, 0x22u);
    }
  }
  pthread_mutex_unlock(v7);
LABEL_34:
  int v8 = 0;
LABEL_61:
  if (v54 != 0xFFFFFFFFLL) {
    DLCloseHandle();
  }
LABEL_63:
  if (*(void *)v53 == 0xFFFFFFFFLL) {
    FreeSipMsg((void *)a1);
  }
  else {
    TACloseHandle();
  }
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v26 = VRTraceErrorLogLevelToCSTR();
    __int16 v27 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v28 = GetIntStatusCode(v8);
      *(_DWORD *)pthread_attr_t buf = 136315906;
      *(void *)&uint8_t buf[4] = v26;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "SIPNewCallProc";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 504;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v28;
      _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPNewCallProc Thread end(%d)...", buf, 0x22u);
    }
  }
  return 0;
}

uint64_t SIPCancelProc(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v17 = 0xFFFFFFFFLL;
  uint64_t v18 = 0xFFFFFFFFLL;
  uint64_t v2 = **(void **)(a1 + 1000);
  pthread_setname_np("com.apple.avconference.sip.cancelproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "SIPCancelProc";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1148;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPCancelProc Thread start...", buf, 0x1Cu);
    }
  }
  uint64_t v5 = CheckInHandleDebug();
  if (v5)
  {
    uint64_t v6 = v5;
    if (*(_DWORD *)(a1 + 132))
    {
      int v7 = 25;
    }
    else
    {
      if ((TACreateHandle((uint64_t *)v17, 3, *(void *)(v5 + 24), a1, 0xFFFFFFFFLL, (uint64_t)TUMsgCallback, *(void *)(a1 + 1000)) & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPCancelProc_cold_2();
          }
        }
      }
      else
      {
        if ((TAStart(*(void **)v17) & 0x80000000) == 0)
        {
          if ((DLFindWithSipMsgAndLock(&v18, a1) & 0x80000000) != 0)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
            {
              uint64_t v13 = VRTraceErrorLogLevelToCSTR();
              uint64_t v14 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)pthread_attr_t buf = 136315906;
                *(void *)&uint8_t buf[4] = v13;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "SIPCancelProc";
                *(_WORD *)&unsigned char buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = 1180;
                *(_WORD *)&unsigned char buf[28] = 1024;
                *(_DWORD *)&buf[30] = 1180;
                _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Cannot find a dialog to cancel, sending 481", buf, 0x22u);
              }
            }
            int v7 = 31;
          }
          else
          {
            int v16 = -1431655766;
            memset(buf, 170, sizeof(buf));
            uint64_t v8 = *(void *)(a1 + 480);
            DLGetState(v18, &v16);
            if ((v16 - 1) <= 1)
            {
              unsigned int v15 = -1431655766;
              DLGetCallID(v18, &v15);
              DLSetState(v18, 4);
              (*(void (**)(uint64_t, void, uint64_t, void, void, void, void, void))(v6 + 32))(v2, *(void *)(v6 + 40), 5, v15, 0, 0, 0, 0);
            }
            DLGetData(v18, (uint64_t)buf);
            DLUnlock();
            if (v8) {
              strlcpy((char *)(v8 + 156), (const char *)&buf[374], 0x40uLL);
            }
            TPDiscardConnectionResult();
            int v7 = 6;
          }
          goto LABEL_26;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPCancelProc_cold_3();
          }
        }
      }
      int v7 = 42;
    }
LABEL_26:
    if ((SendTAStatus(*(uint64_t *)v17, a1, 0xFFFFFFFFLL, v7, 0, 0, *(_DWORD *)(v6 + 8)) & 0x80000000) != 0)
    {
      SendTPStatus(*(void *)(v6 + 24), a1, v7, 0, 0, *(_DWORD *)(v6 + 8));
      TACancel();
    }
    if (*(void *)v17 == 0xFFFFFFFFLL) {
      FreeSipMsg((void *)a1);
    }
    else {
      TACloseHandle();
    }
    CheckOutHandleDebug();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      long long v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        Intint StatusCode = GetIntStatusCode(v7);
        *(_DWORD *)pthread_attr_t buf = 136315906;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "SIPCancelProc";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1229;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = IntStatusCode;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPCancelProc Thread end(%d)...", buf, 0x22u);
      }
    }
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      SIPCancelProc_cold_1();
    }
  }
  FreeSipMsg((void *)a1);
  return 0;
}

uint64_t SIPHangupProc(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0xFFFFFFFFLL;
  uint64_t v25 = 0xFFFFFFFFLL;
  uint64_t v2 = **(void **)(a1 + 1000);
  pthread_setname_np("com.apple.avconference.sip.hangupproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v27 = v3;
      __int16 v28 = 2080;
      uint32_t v29 = "SIPHangupProc";
      __int16 v30 = 1024;
      int v31 = 1259;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPHangupProc Thread start...", buf, 0x1Cu);
    }
  }
  uint64_t v5 = CheckInHandleDebug();
  if (v5)
  {
    uint64_t v6 = v5;
    if (*(_DWORD *)(a1 + 132))
    {
      int v7 = 25;
LABEL_45:
      if ((SendTAStatus(v24, a1, v25, v7, 0, 0, *(_DWORD *)(v6 + 8)) & 0x80000000) != 0)
      {
        SendTPStatus(*(void *)(v6 + 24), a1, v7, 0, 0, *(_DWORD *)(v6 + 8));
        TACancel();
      }
      if (v7 == 6) {
        DLCloseHandle();
      }
      if (v24 == 0xFFFFFFFFLL) {
        FreeSipMsg((void *)a1);
      }
      else {
        TACloseHandle();
      }
      CheckOutHandleDebug();
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v18 = VRTraceErrorLogLevelToCSTR();
        int v19 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          Intint StatusCode = GetIntStatusCode(v7);
          *(_DWORD *)pthread_attr_t buf = 136315906;
          uint64_t v27 = v18;
          __int16 v28 = 2080;
          uint32_t v29 = "SIPHangupProc";
          __int16 v30 = 1024;
          int v31 = 1348;
          __int16 v32 = 1024;
          int v33 = IntStatusCode;
          _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPHangupProc Thread end(%d)...", buf, 0x22u);
        }
      }
      return 0;
    }
    TPStopHeartbeat(*(void *)(v5 + 24), a1 + 816);
    if ((TACreateHandle(&v24, 3, *(void *)(v6 + 24), a1, 0xFFFFFFFFLL, (uint64_t)TUMsgCallback, *(void *)(a1 + 1000)) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPHangupProc_cold_2();
        }
      }
    }
    else
    {
      if ((TAStart((void *)v24) & 0x80000000) == 0)
      {
        if ((DLFindWithSipMsgAndLock(&v25, a1) & 0x80000000) != 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
            goto LABEL_44;
          }
          uint64_t v11 = VRTraceErrorLogLevelToCSTR();
          uint64_t v12 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_44;
          }
          *(_DWORD *)pthread_attr_t buf = 136315906;
          uint64_t v27 = v11;
          __int16 v28 = 2080;
          uint32_t v29 = "SIPHangupProc";
          __int16 v30 = 1024;
          int v31 = 1293;
          __int16 v32 = 1024;
          int v33 = 1293;
          uint64_t v13 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c"
                ":%d: Cannot find a dialog to hangup, sending 481";
          uint64_t v14 = v12;
          uint32_t v15 = 34;
        }
        else
        {
          int v22 = -1431655766;
          unsigned int v23 = -1431655766;
          uint64_t v8 = *(void *)(a1 + 544);
          DLGetCallID(v25, &v23);
          DLGetState(v25, &v22);
          if (v22 == 3)
          {
            DLSetState(v25, 5);
            if ((DLUnlock() & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                SIPHangupProc_cold_4();
              }
            }
            if (v8) {
              uint64_t v9 = v8 + 52;
            }
            else {
              uint64_t v9 = 0;
            }
            if (v8) {
              uint64_t v10 = v8 + 48;
            }
            else {
              uint64_t v10 = 0;
            }
            (*(void (**)(uint64_t, void, void, void, uint64_t, void, uint64_t, void))(v6 + 32))(v2, *(void *)(v6 + 40), 0, v23, v9, 0, v10, 0);
            *(_DWORD *)(a1 + 572) = v23;
            TPDiscardConnectionResult();
            int v7 = 6;
            goto LABEL_45;
          }
          if ((DLUnlock() & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              SIPHangupProc_cold_5();
            }
          }
          if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
            goto LABEL_44;
          }
          uint64_t v16 = VRTraceErrorLogLevelToCSTR();
          uint64_t v17 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_44;
          }
          *(_DWORD *)pthread_attr_t buf = 136316418;
          uint64_t v27 = v16;
          __int16 v28 = 2080;
          uint32_t v29 = "SIPHangupProc";
          __int16 v30 = 1024;
          int v31 = 1307;
          __int16 v32 = 1024;
          int v33 = 1307;
          __int16 v34 = 1024;
          unsigned int v35 = v23;
          __int16 v36 = 1024;
          int v37 = v22;
          uint64_t v13 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c"
                ":%d: Call(%d) is in state %d";
          uint64_t v14 = v17;
          uint32_t v15 = 46;
        }
        _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
LABEL_44:
        int v7 = 31;
        goto LABEL_45;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPHangupProc_cold_3();
        }
      }
    }
    int v7 = 42;
    goto LABEL_45;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      SIPHangupProc_cold_1();
    }
  }
  FreeSipMsg((void *)a1);
  return 0;
}

uint64_t SIPKeyExchangeProc(uint64_t a1)
{
  uint64_t v190 = *MEMORY[0x1E4F143B8];
  uint64_t v176 = 0xFFFFFFFFLL;
  int v177 = (void *)a1;
  uint64_t v175 = 0xFFFFFFFFLL;
  uint64_t v1 = **(void **)(a1 + 1000);
  CFTypeRef v173 = 0;
  CFDataRef v174 = 0;
  uint64_t v172 = 0;
  unsigned int v171 = -1;
  unsigned int v169 = -1431655766;
  int v170 = -1431655766;
  uint64_t v167 = 0;
  int v168 = 0;
  int v166 = 0;
  pthread_setname_np("com.apple.avconference.sip.keyexchangeproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v179 = v2;
      __int16 v180 = 2080;
      int v181 = "SIPKeyExchangeProc";
      __int16 v182 = 1024;
      int v183 = 625;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d()()()()() SIPKeyExchangeProc Thread start...", buf, 0x1Cu);
    }
  }
  uint64_t v4 = CheckInHandleDebug();
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPKeyExchangeProc_cold_1();
      }
    }
    FreeSipMsg(v177);
    return 0;
  }
  uint64_t v5 = v4;
  int v6 = DLFindWithSipMsgAndLock(&v176, (uint64_t)v177);
  if (v6 < 0)
  {
    int v7 = 31;
    goto LABEL_205;
  }
  if (v177 && *((_DWORD *)v177 + 33))
  {
    int v7 = 25;
    goto LABEL_205;
  }
  DLSetDoingKeyExchange(v176, 1);
  DLGetConfIndex(v176, &v170);
  DLGetCallID(v176, &v169);
  DLUnlock();
  int v158 = 0;
  int v156 = 0;
  int v157 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  int v155 = 0;
  int v160 = 0;
  bytesDeCFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  uint64_t v10 = v177;
  while (1)
  {
    if (*((_DWORD *)v10 + 1) != 1)
    {
      int v20 = DLPutMsg(v176, (uint64_t)v10, 1);
      if ((v20 & 0x80000000) == 0)
      {
        int v177 = 0;
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_52;
        }
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        int v22 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_52;
        }
        *(_DWORD *)pthread_attr_t buf = 136315650;
        uint64_t v179 = v21;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 697;
        uint64_t v17 = v22;
        uint64_t v18 = "SIP [%s] %s:%d SKEProc: not request";
LABEL_28:
        uint32_t v19 = 28;
LABEL_29:
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v19);
LABEL_52:
        unint64_t v14 = v9;
        goto LABEL_53;
      }
      int v6 = v20;
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        goto LABEL_202;
      }
      uint64_t v108 = VRTraceErrorLogLevelToCSTR();
      int v109 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_202;
      }
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v179 = v108;
      __int16 v180 = 2080;
      int v181 = "SIPKeyExchangeProc";
      __int16 v182 = 1024;
      int v183 = 692;
      int v96 = "SIP [%s] %s:%d SIPDoSKE: terminated by remote party";
LABEL_200:
      __int16 v97 = v109;
      uint32_t v98 = 28;
LABEL_201:
      _os_log_impl(&dword_1E1EA4000, v97, OS_LOG_TYPE_DEFAULT, v96, buf, v98);
LABEL_202:
      int v160 = 0;
      goto LABEL_203;
    }
    if (*((_DWORD *)v10 + 2) != 7)
    {
      int v6 = DLPutMsg(v176, (uint64_t)v10, 1);
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if ((v6 & 0x80000000) == 0)
      {
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v24 = VRTraceErrorLogLevelToCSTR();
          uint64_t v25 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            if (v177) {
              int v26 = *((_DWORD *)v177 + 2);
            }
            else {
              int v26 = -1;
            }
            *(_DWORD *)pthread_attr_t buf = 136315906;
            uint64_t v179 = v24;
            __int16 v180 = 2080;
            int v181 = "SIPKeyExchangeProc";
            __int16 v182 = 1024;
            int v183 = 709;
            __int16 v184 = 1024;
            *(_DWORD *)unsigned int v185 = v26;
            _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc: not message (%d)", buf, 0x22u);
          }
        }
        int v177 = 0;
        goto LABEL_52;
      }
      if (ErrorLogLevelForModule < 7) {
        goto LABEL_202;
      }
      uint64_t v110 = VRTraceErrorLogLevelToCSTR();
      int v109 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_202;
      }
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v179 = v110;
      __int16 v180 = 2080;
      int v181 = "SIPKeyExchangeProc";
      __int16 v182 = 1024;
      int v183 = 705;
      int v96 = "SIP [%s] %s:%d SIPDoSKE: terminated by remote party";
      goto LABEL_200;
    }
    if (!v10[66])
    {
      int v27 = DLPutMsg(v176, (uint64_t)v10, 1);
      if ((v27 & 0x80000000) == 0)
      {
        int v177 = 0;
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_52;
        }
        uint64_t v28 = VRTraceErrorLogLevelToCSTR();
        uint32_t v29 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_52;
        }
        *(_DWORD *)pthread_attr_t buf = 136315650;
        uint64_t v179 = v28;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 723;
        uint64_t v17 = v29;
        uint64_t v18 = "SIP [%s] %s:%d SKEProc: message doesn't have SKESeq";
        goto LABEL_28;
      }
      int v6 = v27;
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        goto LABEL_202;
      }
      uint64_t v111 = VRTraceErrorLogLevelToCSTR();
      int v109 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_202;
      }
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v179 = v111;
      __int16 v180 = 2080;
      int v181 = "SIPKeyExchangeProc";
      __int16 v182 = 1024;
      int v183 = 718;
      int v96 = "SIP [%s] %s:%d SIPDoSKE: terminated by remote party";
      goto LABEL_200;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      uint64_t v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315906;
        uint64_t v179 = v11;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 727;
        __int16 v184 = 2048;
        *(void *)unsigned int v185 = v177;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc: got msg %p", buf, 0x26u);
      }
    }
    uint64_t v13 = v177[66];
    unint64_t v14 = *(void *)v13;
    if (*(void *)v13 < v9 + 1)
    {
      FreeSipMsg(v177);
      int v177 = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        uint64_t v16 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136315906;
          uint64_t v179 = v15;
          __int16 v180 = 2080;
          int v181 = "SIPKeyExchangeProc";
          __int16 v182 = 1024;
          int v183 = 734;
          __int16 v184 = 1024;
          *(_DWORD *)unsigned int v185 = v14;
          uint64_t v17 = v16;
          uint64_t v18 = "SIP [%s] %s:%d SKEProc: SKESeq (%d) duplicate";
          uint32_t v19 = 34;
          goto LABEL_29;
        }
      }
      goto LABEL_52;
    }
    if (*(void *)v13 > v9 + 1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v116 = VRTraceErrorLogLevelToCSTR();
        uint64_t v117 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136315906;
          uint64_t v179 = v116;
          __int16 v180 = 2080;
          int v181 = "SIPKeyExchangeProc";
          __int16 v182 = 1024;
          int v183 = 739;
          __int16 v184 = 1024;
          *(_DWORD *)unsigned int v185 = v14;
          _os_log_impl(&dword_1E1EA4000, v117, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc: SKESeq (%d) unexpected", buf, 0x22u);
        }
      }
      SIPReportSKError(v1, v5, v169, v170, 6, 741, (uint64_t)"Out Of Sequence");
      int v6 = -1073086451;
      goto LABEL_203;
    }
    if (v14 >= 6)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPKeyExchangeProc_cold_4();
        }
      }
      SIPReportSKError(v1, v5, v169, v170, 7, 748, (uint64_t)"Out Of Bounds");
      int v6 = -1073086451;
      goto LABEL_203;
    }
    if (!v171 && !*((_DWORD *)v177 + 140))
    {
      unsigned int v153 = v8;
      int v160 = 6;
      (*(void (**)(uint64_t, void, uint64_t, void, const char *, void, CFTypeRef *, int *))(v5 + 32))(v1, *(void *)(v5 + 40), 6, v169, "SKEComplete", 0, &v173, &v170);
      uint64_t v167 = 0;
      goto LABEL_134;
    }
    int v30 = *(_DWORD *)(v13 + 8);
    if (v30 < 0 || v158 >= 1 && v158 - 1 != v30)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v31 = VRTraceErrorLogLevelToCSTR();
        __int16 v32 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136316162;
          uint64_t v179 = v31;
          __int16 v180 = 2080;
          int v181 = "SIPKeyExchangeProc";
          __int16 v182 = 1024;
          int v183 = 770;
          __int16 v184 = 1024;
          *(_DWORD *)unsigned int v185 = v14;
          *(_WORD *)&v185[4] = 1024;
          *(_DWORD *)&v185[6] = v30;
          _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc: SKESeq (%d,%d)", buf, 0x28u);
        }
      }
      goto LABEL_53;
    }
    uint64_t v35 = *((unsigned int *)v177 + 140);
    if ((int)v35 >= 1)
    {
      if (v177[69]) {
        break;
      }
    }
LABEL_77:
    unsigned int v153 = v8;
    if (v30)
    {
      uint64_t v167 = 0;
      int v160 = 6;
      int v158 = v30;
      goto LABEL_134;
    }
    if ((int)v167 > 0)
    {
      int v158 = 0;
      goto LABEL_134;
    }
    CFDataRef v43 = CFDataCreateWithBytesNoCopy(0, v8, v157, bytesDeallocator);
    if (v172)
    {
      int v44 = SecKeyExchangeUpdate();
      if (v44)
      {
        int v132 = v44;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v133 = VRTraceErrorLogLevelToCSTR();
          uint64_t v134 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136316418;
            uint64_t v179 = v133;
            __int16 v180 = 2080;
            int v181 = "SIPKeyExchangeProc";
            __int16 v182 = 1024;
            int v183 = 863;
            __int16 v184 = 1024;
            *(_DWORD *)unsigned int v185 = 863;
            *(_WORD *)&v185[4] = 1024;
            *(_DWORD *)&v185[6] = v132;
            *(_WORD *)uint64_t v186 = 1024;
            *(_DWORD *)&v186[2] = v171;
            _os_log_error_impl(&dword_1E1EA4000, v134, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SecKeyExchangeUpdate failed (%d, %d)", buf, 0x2Eu);
          }
        }
        CFRelease(v43);
        SIPReportSKError(v1, v5, v169, v170, 10, 866, (uint64_t)"Update Failed");
        int v6 = -1073086430;
        goto LABEL_203;
      }
      CFRelease(v43);
      int v6 = SKE_FormMessageS(v174, &v168, &v167, (_DWORD *)&v167 + 1, &v166);
      if (v174) {
        CFRelease(v174);
      }
      if (v6 < 0)
      {
        uint64_t v135 = v169;
        int v136 = v170;
        unsigned int v137 = "Out of Memory";
        uint64_t v138 = v1;
        uint64_t v139 = v5;
        int v140 = 8;
        uint64_t v141 = 876;
        goto LABEL_268;
      }
    }
    else
    {
      int AsResponder = SecKeyExchangeNodeCreateAsResponder();
      CFRelease(v43);
      if (AsResponder)
      {
        uint64_t v106 = v8;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPKeyExchangeProc_cold_9();
          }
        }
        int v160 = 42;
        goto LABEL_190;
      }
      int v6 = SKE_FormMessageS(v174, &v168, &v167, (_DWORD *)&v167 + 1, &v166);
      CFRelease(v174);
      if (v6 < 0)
      {
        SIPReportSKError(v1, v5, v169, v170, 8, 849, (uint64_t)"Out of Memory");
        int v160 = 42;
        goto LABEL_203;
      }
      int v160 = 6;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v46 = VRTraceErrorLogLevelToCSTR();
      int v47 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316418;
        uint64_t v179 = v46;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 882;
        __int16 v184 = 1024;
        *(_DWORD *)unsigned int v185 = 0;
        *(_WORD *)&v185[4] = 1024;
        *(_DWORD *)&v185[6] = v171;
        *(_WORD *)uint64_t v186 = 1024;
        *(_DWORD *)&v186[2] = v167;
        _os_log_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc: u= %d,%d,[%d]", buf, 0x2Eu);
      }
    }
    unsigned int v48 = v171;
    if (v171 == 2)
    {
      LODWORD(cf) = -1431655766;
      int v164 = -1431655766;
      int PeerAbortReason = SecKeyExchangeGetPeerAbortReason();
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v126 = VRTraceErrorLogLevelToCSTR();
        uint64_t v127 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136316418;
          uint64_t v179 = v126;
          __int16 v180 = 2080;
          int v181 = "SIPKeyExchangeProc";
          __int16 v182 = 1024;
          int v183 = 889;
          __int16 v184 = 1024;
          *(_DWORD *)unsigned int v185 = v164;
          *(_WORD *)&v185[4] = 1024;
          *(_DWORD *)&v185[6] = cf;
          *(_WORD *)uint64_t v186 = 1024;
          *(_DWORD *)&v186[2] = PeerAbortReason;
          _os_log_impl(&dword_1E1EA4000, v127, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc: aborted by remote: %d (%d %d)", buf, 0x2Eu);
        }
      }
      int v6 = -1073086460;
      TACloseHandle();
      uint64_t v175 = 0xFFFFFFFFLL;
      if ((TACreateHandle(&v175, 3, *(void *)(v5 + 24), (uint64_t)v177, v176, (uint64_t)TUMsgCallback, v177[125]) & 0x80000000) != 0)
      {
        int v128 = v8;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPKeyExchangeProc_cold_7();
          }
        }
        uint64_t v142 = v169;
        int v143 = v170;
        uint64_t v144 = "TA Create Failed";
        uint64_t v145 = v1;
        uint64_t v146 = v5;
        int v147 = 13;
        uint64_t v148 = 900;
      }
      else
      {
        int v128 = v8;
        if ((TAStart((void *)v175) & 0x80000000) == 0)
        {
          if ((SendTAStatus(v175, (uint64_t)v177, 0xFFFFFFFFLL, 52, 0, 0, *(_DWORD *)(v5 + 8)) & 0x80000000) != 0)
          {
            SendTPStatus(*(void *)(v5 + 24), (uint64_t)v177, 52, 0, 0, *(_DWORD *)(v5 + 8));
            TACancel();
            int v177 = 0;
          }
          (*(void (**)(uint64_t, void, uint64_t, void, const char *, void, void, int *))(v5 + 32))(v1, *(void *)(v5 + 40), 6, v169, "SKEComplete", 0, 0, &v170);
          int v177 = 0;
          int v6 = -1073086434;
LABEL_287:
          uint64_t v8 = v128;
          int v160 = 52;
LABEL_203:
          int v7 = v160;
          if (!v8) {
            goto LABEL_205;
          }
LABEL_204:
          free(v8);
          goto LABEL_205;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPKeyExchangeProc_cold_8();
          }
        }
        int v177 = 0;
        uint64_t v142 = v169;
        int v143 = v170;
        uint64_t v144 = "TA Start Failed";
        uint64_t v145 = v1;
        uint64_t v146 = v5;
        int v147 = 14;
        uint64_t v148 = 908;
      }
      SIPReportSKError(v145, v146, v142, v143, v147, v148, (uint64_t)v144);
      goto LABEL_287;
    }
    if (v171 >= 2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v129 = VRTraceErrorLogLevelToCSTR();
        uint64_t v130 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136315906;
          uint64_t v179 = v129;
          __int16 v180 = 2080;
          int v181 = "SIPKeyExchangeProc";
          __int16 v182 = 1024;
          int v183 = 930;
          __int16 v184 = 1024;
          *(_DWORD *)unsigned int v185 = v171;
          _os_log_impl(&dword_1E1EA4000, v130, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc: error while SKEUpdate (%d)", buf, 0x22u);
        }
      }
      int v6 = -1073086460;
      uint64_t v135 = v169;
      int v136 = v170;
      unsigned int v137 = "Update Error";
      uint64_t v138 = v1;
      uint64_t v139 = v5;
      int v140 = 11;
      uint64_t v141 = 932;
LABEL_268:
      SIPReportSKError(v138, v139, v135, v136, v140, v141, (uint64_t)v137);
      goto LABEL_203;
    }
    if (!*(void *)(v5 + 48) || v155) {
      goto LABEL_131;
    }
    int v163 = -1431655766;
    int v164 = -1431655766;
    CFTypeRef cf = 0;
    int PeerCertStatus = SecKeyExchangeGetPeerCertStatus();
    if (PeerCertStatus)
    {
      int v50 = PeerCertStatus;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v51 = VRTraceErrorLogLevelToCSTR();
        unsigned int v52 = *MEMORY[0x1E4F47A50];
        int v155 = 0;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136315906;
          uint64_t v179 = v51;
          __int16 v180 = 2080;
          int v181 = "SIPKeyExchangeProc";
          __int16 v182 = 1024;
          int v183 = 947;
          __int16 v184 = 1024;
          *(_DWORD *)unsigned int v185 = v50;
          __int16 v53 = v52;
          uint64_t v54 = "SIP [%s] %s:%d SKE peerCertStatus failed (%d)";
          goto LABEL_101;
        }
LABEL_130:
        unsigned int v48 = v171;
LABEL_131:
        if (!v48)
        {
          int v69 = SecKeyExchangeCopySharedSecret();
          if (v69)
          {
            int v149 = v69;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7
              && (uint64_t v150 = VRTraceErrorLogLevelToCSTR(),
                  unsigned int v151 = *MEMORY[0x1E4F47A50],
                  os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)))
            {
              *(_DWORD *)pthread_attr_t buf = 136315906;
              uint64_t v179 = v150;
              __int16 v180 = 2080;
              int v181 = "SIPKeyExchangeProc";
              __int16 v182 = 1024;
              int v183 = 1023;
              __int16 v184 = 1024;
              *(_DWORD *)unsigned int v185 = v149;
              _os_log_impl(&dword_1E1EA4000, v151, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKE CopySecret failed (%d)", buf, 0x22u);
              int v6 = 0;
            }
            else
            {
              int v6 = 0;
            }
            goto LABEL_243;
          }
        }
        int v158 = 0;
        int v157 = 0;
        goto LABEL_134;
      }
LABEL_129:
      int v155 = 0;
      goto LABEL_130;
    }
    if (v163)
    {
      if (v163 != 2)
      {
        if (v163 == 1)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
            goto LABEL_129;
          }
          uint64_t v56 = VRTraceErrorLogLevelToCSTR();
          int v57 = *MEMORY[0x1E4F47A50];
          int v155 = 0;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_130;
          }
          *(_DWORD *)pthread_attr_t buf = 136315650;
          uint64_t v179 = v56;
          __int16 v180 = 2080;
          int v181 = "SIPKeyExchangeProc";
          __int16 v182 = 1024;
          int v183 = 950;
          __int16 v53 = v57;
          uint64_t v54 = "SIP [%s] %s:%d SKE peerCertStatus not yet valid";
        }
        else
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
            goto LABEL_129;
          }
          uint64_t v67 = VRTraceErrorLogLevelToCSTR();
          uint64_t v68 = *MEMORY[0x1E4F47A50];
          int v155 = 0;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_130;
          }
          *(_DWORD *)pthread_attr_t buf = 136315650;
          uint64_t v179 = v67;
          __int16 v180 = 2080;
          int v181 = "SIPKeyExchangeProc";
          __int16 v182 = 1024;
          int v183 = 957;
          __int16 v53 = v68;
          uint64_t v54 = "SIP [%s] %s:%d SKE peerCertStatus not ready";
        }
LABEL_127:
        uint32_t v55 = 28;
LABEL_128:
        _os_log_impl(&dword_1E1EA4000, v53, OS_LOG_TYPE_DEFAULT, v54, buf, v55);
        goto LABEL_129;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        goto LABEL_116;
      }
      uint64_t v62 = VRTraceErrorLogLevelToCSTR();
      __int16 v63 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_116;
      }
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v179 = v62;
      __int16 v180 = 2080;
      int v181 = "SIPKeyExchangeProc";
      __int16 v182 = 1024;
      int v183 = 953;
      uint64_t v60 = v63;
      __int16 v61 = "SIP [%s] %s:%d SKE peerCertStatus no value";
      goto LABEL_115;
    }
    if (v164 != 1)
    {
      int v88 = SecKeyExchangeCopyPeerCert();
      if (v88)
      {
        int v89 = v88;
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_129;
        }
        uint64_t v90 = VRTraceErrorLogLevelToCSTR();
        uint32_t v91 = *MEMORY[0x1E4F47A50];
        int v155 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_130;
        }
        *(_DWORD *)pthread_attr_t buf = 136315906;
        uint64_t v179 = v90;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 967;
        __int16 v184 = 1024;
        *(_DWORD *)unsigned int v185 = v89;
        __int16 v53 = v91;
        uint64_t v54 = "SIP [%s] %s:%d SKE CopyCert failed (%d)";
LABEL_101:
        uint32_t v55 = 34;
        goto LABEL_128;
      }
      if (v163 == 1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_129;
        }
        uint64_t v92 = VRTraceErrorLogLevelToCSTR();
        __int16 v93 = *MEMORY[0x1E4F47A50];
        int v155 = 0;
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_130;
        }
        *(_DWORD *)pthread_attr_t buf = 136315650;
        uint64_t v179 = v92;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 970;
        __int16 v53 = v93;
        uint64_t v54 = "SIP [%s] %s:%d SKE CopyCert not yet valid";
        goto LABEL_127;
      }
      CFTypeRef v64 = cf;
      goto LABEL_117;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v58 = VRTraceErrorLogLevelToCSTR();
      __int16 v59 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        uint64_t v179 = v58;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 960;
        uint64_t v60 = v59;
        __int16 v61 = "SIP [%s] %s:%d SKE no cert";
LABEL_115:
        _os_log_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEFAULT, v61, buf, 0x1Cu);
      }
    }
LABEL_116:
    CFTypeRef v64 = 0;
    CFTypeRef cf = 0;
LABEL_117:
    int v161 = 0;
    (*(void (**)(uint64_t, void, uint64_t, void, const char *, int *, CFTypeRef, int *))(v5 + 32))(v1, *(void *)(v5 + 40), 6, v169, "SKECheckRemoteCert", &v161, v64, &v170);
    if (cf) {
      CFRelease(cf);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v65 = VRTraceErrorLogLevelToCSTR();
      long long v66 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315906;
        uint64_t v179 = v65;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 986;
        __int16 v184 = 1024;
        *(_DWORD *)unsigned int v185 = v161;
        _os_log_impl(&dword_1E1EA4000, v66, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d ~_~ SKEProc isValid = %d", buf, 0x22u);
      }
    }
    if (v161)
    {
      int v155 = 1;
      goto LABEL_130;
    }
    if (v171)
    {
      int v84 = SecKeyExchangeAbortSession();
      if (v84)
      {
        int v85 = v84;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v86 = VRTraceErrorLogLevelToCSTR();
          int v87 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)pthread_attr_t buf = 136315906;
            uint64_t v179 = v86;
            __int16 v180 = 2080;
            int v181 = "SIPKeyExchangeProc";
            __int16 v182 = 1024;
            int v183 = 996;
            __int16 v184 = 1024;
            *(_DWORD *)unsigned int v185 = v85;
            _os_log_impl(&dword_1E1EA4000, v87, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKE abort error %d", buf, 0x22u);
          }
        }
      }
      int v6 = SKE_FormMessageS(v174, &v168, &v167, (_DWORD *)&v167 + 1, &v166);
      if (v174) {
        CFRelease(v174);
      }
      if (v6 < 0)
      {
        uint64_t v118 = v169;
        int v119 = v170;
        unsigned int v120 = "Out of Memory";
        uint64_t v121 = v1;
        uint64_t v122 = v5;
        int v123 = 8;
        uint64_t v124 = 1002;
        goto LABEL_241;
      }
    }
    (*(void (**)(uint64_t, void, uint64_t, void, const char *, void, void, int *))(v5 + 32))(v1, *(void *)(v5 + 40), 6, v169, "SKEComplete", 0, 0, &v170);
    int v158 = 0;
    int v157 = 0;
    int v160 = 52;
    int v155 = 1;
LABEL_134:
    int v70 = v167;
    uint64_t v71 = SHIDWORD(v167);
    if ((int)v167 - HIDWORD(v167) >= 900) {
      int v72 = 900;
    }
    else {
      int v72 = v167 - HIDWORD(v167);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v73 = VRTraceErrorLogLevelToCSTR();
      uint64_t v74 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        if (v72)
        {
          int v75 = *(unsigned __int8 *)v168;
          int v76 = *((char *)v168 + v72 - 1);
        }
        else
        {
          int v75 = -1;
          int v76 = -1;
        }
        uint64_t v77 = *(void *)(v5 + 48);
        *(_DWORD *)pthread_attr_t buf = 136316930;
        uint64_t v179 = v73;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 1038;
        __int16 v184 = 2048;
        *(void *)unsigned int v185 = v14;
        *(_WORD *)&v185[8] = 1024;
        *(_DWORD *)uint64_t v186 = v72;
        *(_WORD *)&v186[4] = 1024;
        *(_DWORD *)CFDataRef v187 = v75;
        *(_WORD *)&v187[4] = 1024;
        *(_DWORD *)uint64_t v188 = v76;
        *(_WORD *)&v188[4] = 2048;
        uint64_t v189 = v77;
        _os_log_impl(&dword_1E1EA4000, v74, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc (%lu) resp with (%d) [%02X..%02X] [ident = %p]", buf, 0x42u);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v78 = VRTraceErrorLogLevelToCSTR();
      __int16 v79 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        uint64_t v179 = v78;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 1041;
        _os_log_impl(&dword_1E1EA4000, v79, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc: closing TA", buf, 0x1Cu);
      }
    }
    TACloseHandle();
    uint64_t v175 = 0xFFFFFFFFLL;
    if ((TACreateHandle(&v175, 3, *(void *)(v5 + 24), (uint64_t)v177, v176, (uint64_t)TUMsgCallback, v177[125]) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPKeyExchangeProc_cold_5();
        }
      }
      int v6 = -1073086460;
      SIPReportSKError(v1, v5, v169, v170, 13, 1049, (uint64_t)"TA Create Failed");
      goto LABEL_243;
    }
    if ((TAStart((void *)v175) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPKeyExchangeProc_cold_6();
        }
      }
      int v6 = -1073086460;
      int v177 = 0;
      uint64_t v118 = v169;
      int v119 = v170;
      unsigned int v120 = "TA Start Failed";
      uint64_t v121 = v1;
      uint64_t v122 = v5;
      int v123 = 14;
      uint64_t v124 = 1057;
LABEL_241:
      SIPReportSKError(v121, v122, v118, v119, v123, v124, (uint64_t)v120);
LABEL_243:
      uint64_t v8 = v153;
      goto LABEL_203;
    }
    int v80 = (v70 + ~v71) / 900;
    if (!v72) {
      int v80 = 0;
    }
    uint64_t v82 = v176;
    __int16 v81 = v177;
    *(_DWORD *)(v177[66] + 8) = v80;
    if (v72) {
      int v83 = (char *)v168 + v71;
    }
    else {
      int v83 = 0;
    }
    int v6 = SendTAStatusGeneric(v175, (uint64_t)v81, v82, v160, v83, v72, 1, 0, *(_DWORD *)(v5 + 8));
    if (v6 < 0)
    {
      SendTPStatus(*(void *)(v5 + 24), (uint64_t)v177, v160, 0, 0, *(_DWORD *)(v5 + 8));
      TACancel();
      int v177 = 0;
      goto LABEL_243;
    }
    if (v72)
    {
      HIDWORD(v167) = v72 + v71;
      if (v72 + v71 == v70) {
        uint64_t v167 = 0;
      }
    }
    int v177 = 0;
    uint64_t v8 = v153;
    if ((v152 & 1) == 0) {
      goto LABEL_203;
    }
LABEL_53:
    int v165 = -1431655766;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v33 = VRTraceErrorLogLevelToCSTR();
      __int16 v34 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315906;
        uint64_t v179 = v33;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 657;
        __int16 v184 = 1024;
        *(_DWORD *)unsigned int v185 = v14;
        _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc TOP (%d)", buf, 0x22u);
      }
    }
    if (v177)
    {
      FreeSipMsg(v177);
      int v177 = 0;
    }
    int v6 = DLGetMsg(v176, &v177, 0x7530uLL, 7, 0, -1);
    if ((DLGetState(v176, &v165) & 0x80000000) != 0 || v165 != 3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v94 = VRTraceErrorLogLevelToCSTR();
        __int16 v95 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136315906;
          uint64_t v179 = v94;
          __int16 v180 = 2080;
          int v181 = "SIPKeyExchangeProc";
          __int16 v182 = 1024;
          int v183 = 669;
          __int16 v184 = 1024;
          *(_DWORD *)unsigned int v185 = v165;
          int v96 = "SIP [%s] %s:%d SIPDoSKE: terminated by remote party (%d)";
          __int16 v97 = v95;
          uint32_t v98 = 34;
          goto LABEL_201;
        }
      }
      goto LABEL_202;
    }
    if (v6 < 0)
    {
      uint64_t v106 = v8;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPKeyExchangeProc_cold_2();
        }
      }
      uint64_t v99 = v169;
      int v100 = v170;
      __int16 v101 = "Dialog Timeout";
      uint64_t v102 = v1;
      uint64_t v103 = v5;
      int v104 = 1;
      uint64_t v105 = 676;
LABEL_189:
      SIPReportSKError(v102, v103, v99, v100, v104, v105, (uint64_t)v101);
LABEL_190:
      uint64_t v8 = v106;
      goto LABEL_203;
    }
    uint64_t v10 = v177;
    unint64_t v9 = v14;
    if (!v177)
    {
      uint64_t v106 = v8;
      int v107 = VRTraceGetErrorLogLevelForModule();
      if (v107 >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPKeyExchangeProc_cold_3();
        }
      }
      uint64_t v99 = v169;
      int v100 = v170;
      __int16 v101 = "NULL Message";
      uint64_t v102 = v1;
      uint64_t v103 = v5;
      int v104 = 2;
      uint64_t v105 = 682;
      goto LABEL_189;
    }
  }
  if (v8)
  {
    int v36 = v35 + v157;
    if (v156 >= v36)
    {
      int v37 = v8;
    }
    else
    {
      int v37 = (UInt8 *)malloc_type_realloc(v8, v36 + 2000, 0x29AB216FuLL);
      if (!v37)
      {
        int v131 = VRTraceGetErrorLogLevelForModule();
        if (v131 >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            SIPKeyExchangeProc_cold_11();
          }
        }
        SIPReportSKError(v1, v5, v169, v170, 8, 795, (uint64_t)"Out of Memory");
        int v6 = -1073086461;
        int v7 = v160;
        goto LABEL_204;
      }
    }
    goto LABEL_73;
  }
  int v156 = v35 + 2000;
  uint64_t v38 = (UInt8 *)malloc_type_malloc(v35 + 2000, 0xAFDBFC98uLL);
  if (v38)
  {
    int v37 = v38;
LABEL_73:
    memcpy(&v37[v157], (const void *)v177[69], *((int *)v177 + 140));
    v157 += *((_DWORD *)v177 + 140);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v159 = VRTraceErrorLogLevelToCSTR();
      int v39 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = *((int *)v177 + 140);
        int v41 = (char *)v177[69];
        int v42 = *v41;
        LODWORD(v41) = v41[v40 - 1];
        *(_DWORD *)pthread_attr_t buf = 136317186;
        uint64_t v179 = v159;
        __int16 v180 = 2080;
        int v181 = "SIPKeyExchangeProc";
        __int16 v182 = 1024;
        int v183 = 807;
        __int16 v184 = 1024;
        *(_DWORD *)unsigned int v185 = v14;
        *(_WORD *)&v185[4] = 1024;
        *(_DWORD *)&v185[6] = v30;
        *(_WORD *)uint64_t v186 = 1024;
        *(_DWORD *)&v186[2] = v157;
        *(_WORD *)CFDataRef v187 = 1024;
        *(_DWORD *)&v187[2] = v40;
        *(_WORD *)uint64_t v188 = 1024;
        *(_DWORD *)&v188[2] = v42;
        LOWORD(v189) = 1024;
        *(_DWORD *)((char *)&v189 + 2) = v41;
        _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SKEProc: Got msg (%d;%d) into %d - (%d) [%02X...%02X]",
          buf,
          0x40u);
      }
    }
    uint64_t v8 = v37;
    goto LABEL_77;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      SIPKeyExchangeProc_cold_10();
    }
  }
  SIPReportSKError(v1, v5, v169, v170, 8, 786, (uint64_t)"Out of Memory");
  int v6 = -1073086461;
  int v7 = v160;
LABEL_205:
  if (v168) {
    free(v168);
  }
  if (v175 == 0xFFFFFFFFLL || ((1 << v7) & 0x10000000000041) != 0)
  {
    if (v177) {
      FreeSipMsg(v177);
    }
  }
  else
  {
    int v6 = SendTAStatus(v175, (uint64_t)v177, 0xFFFFFFFFLL, v7, 0, 0, *(_DWORD *)(v5 + 8));
    if (v6 < 0)
    {
      SendTPStatus(*(void *)(v5 + 24), (uint64_t)v177, v7, 0, 0, *(_DWORD *)(v5 + 8));
      TACancel();
    }
    (*(void (**)(uint64_t, void, uint64_t, void, const char *, void, void, int *))(v5 + 32))(v1, *(void *)(v5 + 40), 6, v169, "SKEComplete", 0, 0, &v170);
    int v177 = 0;
  }
  if (v172) {
    SecKeyExchangeNodeRelease();
  }
  if (v173) {
    CFRelease(v173);
  }
  if (v6 < 0 && v175 != 0xFFFFFFFFLL) {
    TACancel();
  }
  DLSetDoingKeyExchange(v176, 0);
  TACloseHandle();
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v112 = VRTraceErrorLogLevelToCSTR();
    int v113 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      Intint StatusCode = GetIntStatusCode(v7);
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v179 = v112;
      __int16 v180 = 2080;
      int v181 = "SIPKeyExchangeProc";
      __int16 v182 = 1024;
      int v183 = 1131;
      __int16 v184 = 1024;
      *(_DWORD *)unsigned int v185 = IntStatusCode;
      _os_log_impl(&dword_1E1EA4000, v113, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPKeyExchangeProc Thread end(%d)...", buf, 0x22u);
    }
  }
  return 0;
}

uint64_t SIPMessageProc(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *(void *)unsigned int v23 = 0xFFFFFFFFLL;
  uint64_t v24 = 0xFFFFFFFFLL;
  uint64_t v2 = **(void **)(a1 + 1000);
  uint64_t v22 = -1;
  pthread_setname_np("com.apple.avconference.sip.messageproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v26 = v3;
      __int16 v27 = 2080;
      uint64_t v28 = "SIPMessageProc";
      __int16 v29 = 1024;
      int v30 = 1382;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPMessageProc Thread start...", buf, 0x1Cu);
    }
  }
  if (!*(void *)(a1 + 552))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      unint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v10 = *(_DWORD *)(a1 + 560);
        uint64_t v11 = *(void *)(a1 + 552);
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v26 = v8;
        __int16 v27 = 2080;
        uint64_t v28 = "SIPMessageProc";
        __int16 v29 = 1024;
        int v30 = 1385;
        __int16 v31 = 1024;
        int v32 = v10;
        __int16 v33 = 2048;
        uint64_t v34 = v11;
        _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d SIP MESSAGE is missing a body - length = %d, body = %p", buf, 0x2Cu);
      }
    }
    goto LABEL_14;
  }
  uint64_t v5 = CheckInHandleDebug();
  if (!v5)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SIPMessageProc_cold_1();
      }
    }
LABEL_14:
    FreeSipMsg((void *)a1);
    return 0;
  }
  uint64_t v6 = v5;
  if (*(_DWORD *)(a1 + 132))
  {
    int v7 = 25;
  }
  else
  {
    if ((TACreateHandle((uint64_t *)v23, 3, *(void *)(v5 + 24), a1, 0xFFFFFFFFLL, (uint64_t)TUMsgCallback, *(void *)(a1 + 1000)) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPMessageProc_cold_2();
        }
      }
    }
    else
    {
      if ((TAStart(*(void **)v23) & 0x80000000) == 0)
      {
        uint64_t v12 = *(uint64_t **)(a1 + 272);
        if (v12)
        {
          uint64_t v13 = *v12;
          uint64_t v22 = *v12;
        }
        else
        {
          uint64_t v13 = 0xFFFFFFFFLL;
        }
        if ((DLFindWithSipMsgAndLock(&v24, a1) & 0x80000000) != 0)
        {
          int v17 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void, uint64_t *, void))(v6 + 32))(v2, *(void *)(v6 + 40), 6, 0, *(void *)(a1 + 552), 0, &v22, 0);
        }
        else
        {
          *(_DWORD *)pthread_attr_t buf = -1431655766;
          DLGetCallID(v24, buf);
          uint64_t v14 = SIPClientDictionaryCInterface_CopyObjectForKey(*(void **)(v6 + 136), (const char *)@"SIPMessageReceivedHandler", *(unsigned int *)buf);
          if (v14)
          {
            uint64_t v15 = (void (**)(void, void, void))v14;
            CFStringRef v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const char **)(a1 + 552), 0x8000100u);
            ((void (**)(void, CFStringRef, uint64_t))v15)[2](v15, v16, v13);
            if (v16) {
              CFRelease(v16);
            }
            _Block_release(v15);
            int v17 = 0;
          }
          else
          {
            int v17 = 1;
          }
          DLUnlock();
        }
        if (v17) {
          int v7 = 19;
        }
        else {
          int v7 = 6;
        }
        goto LABEL_38;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SIPMessageProc_cold_3();
        }
      }
    }
    int v7 = 42;
  }
LABEL_38:
  if ((SendTAStatus(*(uint64_t *)v23, a1, 0xFFFFFFFFLL, v7, 0, 0, *(_DWORD *)(v6 + 8)) & 0x80000000) != 0)
  {
    SendTPStatus(*(void *)(v6 + 24), a1, v7, 0, 0, *(_DWORD *)(v6 + 8));
    TACancel();
  }
  if (*(void *)v23 == 0xFFFFFFFFLL) {
    FreeSipMsg((void *)a1);
  }
  else {
    TACloseHandle();
  }
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v18 = VRTraceErrorLogLevelToCSTR();
    uint32_t v19 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      Intint StatusCode = GetIntStatusCode(v7);
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v26 = v18;
      __int16 v27 = 2080;
      uint64_t v28 = "SIPMessageProc";
      __int16 v29 = 1024;
      int v30 = 1471;
      __int16 v31 = 1024;
      int v32 = IntStatusCode;
      _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d SIPMessageProc Thread end(%d)...", buf, 0x22u);
    }
  }
  return 0;
}

uint64_t SendTPStatus(uint64_t a1, uint64_t a2, int a3, char *__s, _OWORD *a5, int a6)
{
  v20[1] = *(void **)MEMORY[0x1E4F143B8];
  v20[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t Status = CreateStatus((unint64_t *)v20, a2, a3, 0, __s, a6, 0);
  if ((Status & 0x80000000) != 0)
  {
    uint64_t v18 = Status;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SendTPStatus_cold_1();
      }
    }
  }
  else
  {
    uint64_t v11 = v20[0];
    if (__s && a5) {
      *((_OWORD *)v20[0] + 61) = *a5;
    }
    long long v12 = *(_OWORD *)(a2 + 576);
    long long v13 = *(_OWORD *)(a2 + 592);
    long long v14 = *(_OWORD *)(a2 + 624);
    v11[38] = *(_OWORD *)(a2 + 608);
    v11[39] = v14;
    v11[36] = v12;
    v11[37] = v13;
    long long v15 = *(_OWORD *)(a2 + 640);
    long long v16 = *(_OWORD *)(a2 + 656);
    long long v17 = *(_OWORD *)(a2 + 672);
    *((void *)v11 + 86) = *(void *)(a2 + 688);
    v11[41] = v16;
    v11[42] = v17;
    v11[40] = v15;
    uint64_t v18 = TPSend(a1);
    FreeSipMsg((void *)v20[0]);
  }
  return v18;
}

uint64_t SendTAStatus(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *__s, _OWORD *a6, int a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (__s) {
    int v14 = strlen(__s);
  }
  else {
    int v14 = 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v15 = VRTraceErrorLogLevelToCSTR();
    long long v16 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v19 = v15;
      __int16 v20 = 2080;
      uint64_t v21 = "SendTAStatus";
      __int16 v22 = 1024;
      int v23 = 140;
      __int16 v24 = 1024;
      int v25 = v14;
      _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d |        |        |        |    --- iBodyLen %d", buf, 0x22u);
    }
  }
  return SendTAStatusGeneric(a1, a2, a3, a4, __s, v14, 0, a6, a7);
}

uint64_t SendTAStatusGeneric(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *a5, int a6, int a7, _OWORD *a8, int a9)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
    if (a3 == 0xFFFFFFFFLL)
    {
      Genericuint64_t Status = CreateGenericStatus((unint64_t *)&v32, a2, a4, 0, a5, a6, a7, a9, 0);
      if ((GenericStatus & 0x80000000) == 0)
      {
LABEL_19:
        uint64_t v24 = v32;
        if (a5)
        {
          if (a8) {
            *(_OWORD *)(v32 + 976) = *a8;
          }
        }
        long long v25 = *(_OWORD *)(a2 + 576);
        long long v26 = *(_OWORD *)(a2 + 592);
        long long v27 = *(_OWORD *)(a2 + 624);
        *(_OWORD *)(v24 + 608) = *(_OWORD *)(a2 + 608);
        *(_OWORD *)(v24 + 624) = v27;
        *(_OWORD *)(v24 + 576) = v25;
        *(_OWORD *)(v24 + 592) = v26;
        long long v28 = *(_OWORD *)(a2 + 640);
        long long v29 = *(_OWORD *)(a2 + 656);
        long long v30 = *(_OWORD *)(a2 + 672);
        *(void *)(v24 + 688) = *(void *)(a2 + 688);
        *(_OWORD *)(v24 + 656) = v29;
        *(_OWORD *)(v24 + 672) = v30;
        *(_OWORD *)(v24 + 640) = v28;
        return TASend(a1, (void *)v24);
      }
    }
    else
    {
      int v31 = -1431655766;
      if ((DLGetState(a3, &v31) & 0x80000000) == 0)
      {
        if (v31 == 4) {
          return 2148139038;
        }
        if (!*(unsigned char *)(*(void *)(a2 + 480) + 156))
        {
          memset(__b, 170, 0x388uLL);
          if ((DLGetData(a3, (uint64_t)__b) & 0x80000000) == 0) {
            strlcpy((char *)(*(void *)(a2 + 480) + 156), (const char *)&__b[93] + 2, 0x40uLL);
          }
        }
      }
      Genericuint64_t Status = CreateGenericStatus((unint64_t *)&v32, a2, a4, 0, a5, a6, a7, a9, 0);
      if ((GenericStatus & 0x80000000) == 0)
      {
        int v20 = DLUpdate(a3, v32);
        if (v20 < 0)
        {
          int v21 = v20;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v22 = VRTraceErrorLogLevelToCSTR();
            int v23 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              __b[0] = 136316162;
              *(void *)&__b[1] = v22;
              LOWORD(__b[3]) = 2080;
              *(void *)((char *)&__b[3] + 2) = "SendTAStatusGeneric";
              HIWORD(__b[5]) = 1024;
              __b[6] = 122;
              LOWORD(__b[7]) = 1024;
              *(_DWORD *)((char *)&__b[7] + 2) = 122;
              HIWORD(__b[8]) = 1024;
              __b[9] = v21;
              _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLUpdate failed(%08X)", (uint8_t *)__b, 0x28u);
            }
          }
        }
        goto LABEL_19;
      }
    }
    uint64_t v17 = GenericStatus;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        SendTAStatusGeneric_cold_1();
      }
    }
    return v17;
  }

  return TASend(a1, 0);
}

void SIPReportSKError(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int valuePtr = a5;
  int v18 = a4;
  CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"%s:%d", "/Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c", a6);
  CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"%s", "SKE Error");
  CFStringRef v15 = CFStringCreateWithFormat(0, 0, @"%s", a7);
  *(_OWORD *)keys = xmmword_1E6DB6AD8;
  long long v21 = off_1E6DB6AE8;
  values[0] = v12;
  values[1] = (void *)v13;
  values[2] = (void *)v14;
  values[3] = (void *)v15;
  CFDictionaryRef v16 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, 0, 0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t, const char *, void, CFDictionaryRef, int *))(a2 + 32))(a1, *(void *)(a2 + 40), 6, a3, "SKEReportError", 0, v16, &v18);
  CFRelease(v16);
  CFRelease(v15);
  CFRelease(v14);
  CFRelease(v13);
  CFRelease(v12);
}

uint64_t SKE_FormMessageS(const __CFData *a1, void **a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  unint64_t v9 = *a2;
  int v10 = *a5;
  if (!a1)
  {
    int v13 = 0;
LABEL_12:
    uint64_t v15 = 0;
    *a2 = v9;
    *a3 = v13;
    *a4 = 0;
    *a5 = v10;
    return v15;
  }
  int Length = CFDataGetLength(a1);
  int v13 = Length;
  if (v9)
  {
    if (v10 >= Length)
    {
LABEL_11:
      BytePtr = CFDataGetBytePtr(a1);
      memcpy(v9, BytePtr, v13);
      goto LABEL_12;
    }
    int v10 = Length + 2000;
    CFStringRef v14 = malloc_type_realloc(v9, Length + 2000, 0x6BBA9FDEuLL);
    if (!v14)
    {
      uint64_t v15 = 3221880835;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          SKE_FormMessageS_cold_2();
        }
      }
      return v15;
    }
LABEL_10:
    unint64_t v9 = v14;
    goto LABEL_11;
  }
  int v10 = Length + 2000;
  CFStringRef v14 = malloc_type_malloc(Length + 2000, 0x33EFDADCuLL);
  if (v14) {
    goto LABEL_10;
  }
  uint64_t v15 = 3221880835;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      SKE_FormMessageS_cold_1();
    }
  }
  return v15;
}

uint64_t VCMediaWriterUtil_GetMetaDataArrayWithIndentifier(uint64_t a1)
{
  v26[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *MEMORY[0x1E4F1F078];
  uint64_t v3 = *MEMORY[0x1E4F32FF8];
  v22[0] = *MEMORY[0x1E4F32FF0];
  uint64_t v1 = v22[0];
  v22[1] = v3;
  uint64_t v4 = *MEMORY[0x1E4F32FB0];
  v26[0] = v2;
  v26[1] = v4;
  uint64_t v6 = *MEMORY[0x1E4F34498];
  uint64_t v7 = *MEMORY[0x1E4F33028];
  uint64_t v23 = *MEMORY[0x1E4F33020];
  uint64_t v5 = v23;
  uint64_t v24 = v7;
  uint64_t v8 = *MEMORY[0x1E4F1F180];
  v26[2] = v6;
  v26[3] = v8;
  uint64_t v25 = *MEMORY[0x1E4F33060];
  uint64_t v9 = v25;
  v26[4] = a1;
  uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v22 count:5];
  v20[0] = v1;
  v20[1] = v3;
  v21[0] = v2;
  v21[1] = v4;
  uint64_t v11 = *MEMORY[0x1E4F344A0];
  void v20[2] = v5;
  v20[3] = v7;
  v21[2] = v11;
  v21[3] = v8;
  v20[4] = v9;
  v21[4] = @"FaceTime";
  uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:5];
  uint64_t v13 = *MEMORY[0x1E4F33068];
  v18[0] = *MEMORY[0x1E4F32FD0];
  uint64_t v14 = *MEMORY[0x1E4F33070];
  v17[0] = v13;
  v17[1] = v14;
  v16[0] = v10;
  v16[1] = v12;
  v18[1] = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:2];
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:2];
  return [MEMORY[0x1E4F1C978] arrayWithObjects:&v19 count:1];
}

double VCMediaWriterUtil_CalculateImageSizeWithVisibleRect(char a1, int a2, int a3, double a4, double a5, double a6, double a7)
{
  double v7 = (double)a2;
  double v8 = a6 * (double)a3 / a7;
  if (a6 / a7 >= (double)(a2 / a3)) {
    double v8 = (double)a2;
  }
  if ((a1 & 2) != 0) {
    double v7 = v8;
  }
  return (double)(int)((int)v7 & 0xFFFFFFFC);
}

uint64_t VCMediaWriterUtil_NewWriter(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v8 = [VCFigAssetWriter alloc];

  return (uint64_t)[(VCFigAssetWriter *)v8 initWithOutputURL:a1 transactionID:a2 videoCodec:a3 keyFrameIntervalDuration:a4];
}

uint64_t VCMediaWriterUtil_SetUpWriterWithCaptureFormat(void *a1, uint64_t a2, int a3, int a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  double v12 = VCMediaWriterUtil_CalculateImageSizeWithVisibleRect(a2, a3, a4, a6, a7, a8, a9);

  return [a1 setupLivePhotoStillImageCameraStatusBit:a2 resize:a5 imageSize:v12];
}

BOOL VCMediaWriterUtil_IsMediaExpected(int a1, int a2)
{
  BOOL v2 = (a1 - 1) < 2;
  BOOL v3 = a1 == 1;
  if (a2 != 3) {
    BOOL v3 = 0;
  }
  if (a2 != 4) {
    BOOL v2 = v3;
  }
  if ((a2 - 1) >= 2) {
    return v2;
  }
  else {
    return (a1 - 1) < 4;
  }
}

BOOL VCMediaWriterUtil_IsAudioOnly(int a1)
{
  return (a1 - 3) < 2;
}

uint64_t VCMediaNegotiationBlobVideoSettingsReadFrom(char *a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  double v7 = &OBJC_IVAR___VCRateControlMediaController__probingSequencePacketSize;
  double v8 = (int *)MEMORY[0x1E4F940B8];
  uint64_t v9 = &OBJC_IVAR___VCRateControlMediaController__probingSequencePacketSize;
  uint64_t v10 = &OBJC_IVAR___VCRateControlMediaController__probingSequencePacketSize;
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      unint64_t v15 = *(void *)(a2 + v14);
      if (v15 == -1 || v15 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v16 = *(unsigned char *)(*(void *)(a2 + *v8) + v15);
      *(void *)(a2 + v14) = v15 + 1;
      v13 |= (unint64_t)(v16 & 0x7F) << v11;
      if ((v16 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v17 = v12++ >= 9;
      if (v17)
      {
        unint64_t v13 = 0;
        int v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v18 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v8) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_109;
          }
          v20 += 7;
          BOOL v17 = v21++ >= 9;
          if (v17)
          {
            LODWORD(v22) = 0;
            goto LABEL_111;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_109:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_111:
        uint64_t v92 = v7[425];
        goto LABEL_140;
      case 2u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v8) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v17 = v28++ >= 9;
              if (v17)
              {
                uint64_t v29 = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v29 = 0;
        }
LABEL_115:
        BOOL v93 = v29 != 0;
        uint64_t v94 = v9[426];
        goto LABEL_157;
      case 3u:
        __int16 v33 = v10;
        uint64_t v34 = v9;
        uint64_t v35 = v7;
        int v36 = objc_alloc_init(VCMediaNegotiationBlobVideoPayloadSettings);
        [a1 addVideoPayloadCollections:v36];

        if (PBReaderPlaceMark()
          && (VCMediaNegotiationBlobVideoPayloadSettingsReadFrom((id *)&v36->super.super.isa, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          double v7 = v35;
          uint64_t v9 = v34;
          uint64_t v10 = v33;
LABEL_158:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        return 0;
      case 4u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v22 = 0;
        *(_WORD *)&a1[v10[414]] |= 2u;
        while (2)
        {
          uint64_t v39 = *v3;
          unint64_t v40 = *(void *)(a2 + v39);
          if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v8) + v40);
            *(void *)(a2 + v39) = v40 + 1;
            v22 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              BOOL v17 = v38++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_119;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_119:
        uint64_t v92 = 12;
        goto LABEL_140;
      case 5u:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v22 = 0;
        *(_WORD *)&a1[v10[414]] |= 1u;
        while (2)
        {
          uint64_t v44 = *v3;
          unint64_t v45 = *(void *)(a2 + v44);
          if (v45 == -1 || v45 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v46 = *(unsigned char *)(*(void *)(a2 + *v8) + v45);
            *(void *)(a2 + v44) = v45 + 1;
            v22 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              BOOL v17 = v43++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_123;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_123:
        uint64_t v92 = 8;
        goto LABEL_140;
      case 6u:
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v22 = 0;
        *(_WORD *)&a1[v10[414]] |= 0x10u;
        while (2)
        {
          uint64_t v49 = *v3;
          unint64_t v50 = *(void *)(a2 + v49);
          if (v50 == -1 || v50 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(a2 + *v8) + v50);
            *(void *)(a2 + v49) = v50 + 1;
            v22 |= (unint64_t)(v51 & 0x7F) << v47;
            if (v51 < 0)
            {
              v47 += 7;
              BOOL v17 = v48++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_127;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_127:
        uint64_t v92 = 28;
        goto LABEL_140;
      case 7u:
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(_WORD *)&a1[v10[414]] |= 0x100u;
        while (2)
        {
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 == -1 || v56 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(a2 + *v8) + v56);
            *(void *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v17 = v53++ >= 9;
              if (v17)
              {
                uint64_t v54 = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v54 = 0;
        }
LABEL_131:
        BOOL v93 = v54 != 0;
        uint64_t v94 = 44;
        goto LABEL_157;
      case 8u:
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v22 = 0;
        *(_WORD *)&a1[v10[414]] |= 8u;
        while (2)
        {
          uint64_t v60 = *v3;
          unint64_t v61 = *(void *)(a2 + v60);
          if (v61 == -1 || v61 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(a2 + *v8) + v61);
            *(void *)(a2 + v60) = v61 + 1;
            v22 |= (unint64_t)(v62 & 0x7F) << v58;
            if (v62 < 0)
            {
              v58 += 7;
              BOOL v17 = v59++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_135;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_135:
        uint64_t v92 = 20;
        goto LABEL_140;
      case 9u:
        char v63 = 0;
        unsigned int v64 = 0;
        uint64_t v22 = 0;
        *(_WORD *)&a1[v10[414]] |= 4u;
        while (2)
        {
          uint64_t v65 = *v3;
          unint64_t v66 = *(void *)(a2 + v65);
          if (v66 == -1 || v66 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(a2 + *v8) + v66);
            *(void *)(a2 + v65) = v66 + 1;
            v22 |= (unint64_t)(v67 & 0x7F) << v63;
            if (v67 < 0)
            {
              v63 += 7;
              BOOL v17 = v64++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_139;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_139:
        uint64_t v92 = 16;
LABEL_140:
        *(_DWORD *)&a1[v92] = v22;
        goto LABEL_158;
      case 0xAu:
        char v68 = 0;
        unsigned int v69 = 0;
        uint64_t v70 = 0;
        *(_WORD *)&a1[v10[414]] |= 0x40u;
        while (2)
        {
          uint64_t v71 = *v3;
          unint64_t v72 = *(void *)(a2 + v71);
          if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v73 = *(unsigned char *)(*(void *)(a2 + *v8) + v72);
            *(void *)(a2 + v71) = v72 + 1;
            v70 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              BOOL v17 = v69++ >= 9;
              if (v17)
              {
                uint64_t v70 = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v70 = 0;
        }
LABEL_144:
        BOOL v93 = v70 != 0;
        uint64_t v94 = 42;
        goto LABEL_157;
      case 0xBu:
        char v74 = 0;
        unsigned int v75 = 0;
        uint64_t v76 = 0;
        *(_WORD *)&a1[v10[414]] |= 0x200u;
        while (2)
        {
          uint64_t v77 = *v3;
          unint64_t v78 = *(void *)(a2 + v77);
          if (v78 == -1 || v78 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v79 = *(unsigned char *)(*(void *)(a2 + *v8) + v78);
            *(void *)(a2 + v77) = v78 + 1;
            v76 |= (unint64_t)(v79 & 0x7F) << v74;
            if (v79 < 0)
            {
              v74 += 7;
              BOOL v17 = v75++ >= 9;
              if (v17)
              {
                uint64_t v76 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v76 = 0;
        }
LABEL_148:
        BOOL v93 = v76 != 0;
        uint64_t v94 = 45;
        goto LABEL_157;
      case 0xCu:
        char v80 = 0;
        unsigned int v81 = 0;
        uint64_t v82 = 0;
        *(_WORD *)&a1[v10[414]] |= 0x20u;
        while (2)
        {
          uint64_t v83 = *v3;
          unint64_t v84 = *(void *)(a2 + v83);
          if (v84 == -1 || v84 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v85 = *(unsigned char *)(*(void *)(a2 + *v8) + v84);
            *(void *)(a2 + v83) = v84 + 1;
            v82 |= (unint64_t)(v85 & 0x7F) << v80;
            if (v85 < 0)
            {
              v80 += 7;
              BOOL v17 = v81++ >= 9;
              if (v17)
              {
                uint64_t v82 = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v82 = 0;
        }
LABEL_152:
        BOOL v93 = v82 != 0;
        uint64_t v94 = 41;
        goto LABEL_157;
      case 0xDu:
        char v86 = 0;
        unsigned int v87 = 0;
        uint64_t v88 = 0;
        *(_WORD *)&a1[v10[414]] |= 0x80u;
        while (2)
        {
          uint64_t v89 = *v3;
          unint64_t v90 = *(void *)(a2 + v89);
          if (v90 == -1 || v90 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v91 = *(unsigned char *)(*(void *)(a2 + *v8) + v90);
            *(void *)(a2 + v89) = v90 + 1;
            v88 |= (unint64_t)(v91 & 0x7F) << v86;
            if (v91 < 0)
            {
              v86 += 7;
              BOOL v17 = v87++ >= 9;
              if (v17)
              {
                uint64_t v88 = 0;
                goto LABEL_156;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v88 = 0;
        }
LABEL_156:
        BOOL v93 = v88 != 0;
        uint64_t v94 = 43;
LABEL_157:
        a1[v94] = v93;
        goto LABEL_158;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_158;
    }
  }
}

uint64_t _VCStreamInputVideo_SampleBufferHandler(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  VCStreamInput_UpdateReportingStats(a1, a2);
  memset(&v9, 170, sizeof(v9));
  CMSampleBufferGetPresentationTimeStamp(&v9, a2);
  long long v7 = xmmword_1E259F6F8;
  int v8 = 0;
  uint64_t v4 = *(void *)(a1 + 296);
  CMTime v6 = v9;
  return VCVideoCapture_DistributeVideoFrame(v4, (uint64_t)a2, (long long *)&v6.value, (uint64_t)&v7);
}

uint64_t VCCaptionsEncoder_Encode(uint64_t a1, void *a2, unsigned char *a3, size_t *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 4294967294;
  if (!a1 || !a3 || !a4) {
    return v4;
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  size_t v9 = *a4;
  unsigned int v43 = a3;
  size_t v44 = v9;
  id v42 = a2;
  char v10 = *(unsigned char *)(a1 + 16);
  BYTE4(v46) = v10;
  int v11 = [a2 isFinal];
  BYTE5(v46) = v11;
  if (v11) {
    *(unsigned char *)(a1 + 16) = (*(unsigned char *)(a1 + 16) + 1) & 0xF;
  }
  if (!v9) {
    return 4294967293;
  }
  uint64_t v39 = a4;
  char v12 = 16 * v10;
  char v13 = (16 * v10) | 8;
  if (v11) {
    char v14 = 4;
  }
  else {
    char v14 = 0;
  }
  if (objc_msgSend(a2, "isLocal", v39)) {
    char v15 = v13;
  }
  else {
    char v15 = v12;
  }
  *a3 = v15 | v14;
  uint64_t v45 = 1;
  char v16 = (void *)[a2 formattedText];
  if (![v16 length]) {
    goto LABEL_45;
  }
  if (![v16 length])
  {
LABEL_36:
    BYTE6(v47) = 1;
    uint64_t started = _VCCaptionsEncoder_StartNewSegmentHeader((uint64_t)&v42, 0, 0);
    if (started)
    {
      uint64_t v4 = started;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCCaptionsEncoder_Encode_cold_1();
        }
      }
      return v4;
    }
    char v41 = (void *)[v42 formattedText];
    int v26 = v46;
    if (v46)
    {
      uint64_t v27 = 0;
      unsigned int v28 = v43;
      size_t v29 = v44;
      uint64_t v30 = v43 + 1;
      uint64_t v31 = v45;
      while (1)
      {
        unint64_t v32 = *v30;
        if ((v32 & 2) != 0)
        {
          __int16 v33 = (const char *)objc_msgSend((id)objc_msgSend(v41, "substringWithRange:", v27, (v32 >> 3) + 1), "UTF8String");
          if (!v33) {
            return 4294967292;
          }
          uint64_t v34 = v33;
          size_t v35 = strlen(v33);
          uint64_t v36 = v31 + v35;
          if (v29 < v31 + v35) {
            return 4294967293;
          }
          memcpy(&v28[v31], v34, v35);
          LODWORD(v32) = *v30;
          uint64_t v31 = v36;
        }
        v27 += (v32 >> 3) + 1;
        ++v30;
        if (!--v26)
        {
          uint64_t v45 = v31;
          break;
        }
      }
    }
LABEL_45:

    *(void *)a1 = a2;
    if ((unint64_t)[*(id *)(a1 + 8) count] >= 4) {
      [*(id *)(a1 + 8) removeObjectAtIndex:0];
    }
    char v37 = (void *)[a2 copy];
    [*(id *)(a1 + 8) addObject:v37];

    uint64_t v4 = 0;
    *unint64_t v40 = v45;
    return v4;
  }
  LODWORD(v17) = 0;
  char v18 = 0;
  while (1)
  {
    __int16 v51 = -21846;
    char v49 = -86;
    if ((_VCCaptionsEncoder_GetValue(a2, v17, &v51, (BOOL *)&v49) & 1) == 0) {
      break;
    }
    __int16 v50 = -21846;
    char v48 = -86;
    if (v17)
    {
      if (BYTE4(v47) != v49)
      {
        uint64_t v19 = _VCCaptionsEncoder_StartNewSegmentHeader((uint64_t)&v42, v49 != 0, v18 == 0);
        if (v19)
        {
          uint64_t v4 = v19;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCCaptionsEncoder_Encode_cold_5();
            }
          }
          goto LABEL_55;
        }
      }
      if (v18)
      {
        if (_VCCaptionsEncoder_GetRefValue(a1, v17, &v50, &v48) && v51 == v50)
        {
          char v20 = 0;
          char v18 = 1;
        }
        else
        {
          char v20 = 1;
          uint64_t v22 = _VCCaptionsEncoder_StartNewSegmentHeader((uint64_t)&v42, v49, 1);
          if (v22)
          {
            uint64_t v4 = v22;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCCaptionsEncoder_Encode_cold_4();
              }
            }
            goto LABEL_55;
          }
          char v18 = 0;
        }
      }
      else
      {
        char v18 = 0;
        char v20 = 1;
      }
      int v23 = v47;
      if (v47 == 32)
      {
        uint64_t v24 = _VCCaptionsEncoder_StartNewSegmentHeader((uint64_t)&v42, v49, v20);
        if (v24)
        {
          uint64_t v4 = v24;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCCaptionsEncoder_Encode_cold_3();
            }
          }
          goto LABEL_55;
        }
        int v23 = v47;
      }
      LODWORD(v47) = v23 + 1;
    }
    else
    {
      RefCFNumberRef Value = _VCCaptionsEncoder_GetRefValue(a1, 0, &v50, &v48);
      if (v51 == v50) {
        char v18 = RefValue;
      }
      else {
        char v18 = 0;
      }
      BYTE4(v47) = v49;
      LODWORD(v47) = 1;
      BYTE5(v47) = v18 ^ 1;
    }
    unint64_t v17 = (v17 + 1);
    if ([v16 length] <= v17) {
      goto LABEL_36;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCCaptionsEncoder_Encode_cold_6();
    }
  }
  uint64_t v4 = 4294967292;
LABEL_55:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCCaptionsEncoder_Encode_cold_2();
    }
  }
  return v4;
}

uint64_t _VCCaptionsEncoder_StartNewSegmentHeader(uint64_t a1, char a2, char a3)
{
  int v3 = *(_DWORD *)(a1 + 40);
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 16) >= (unint64_t)(v4 + 1))
  {
    *(unsigned char *)(*(void *)(a1 + 8) + v4) = (*(unsigned char *)(a1 + 44) | (8 * v3) | (2 * *(unsigned char *)(a1 + 45)) | (4 * *(unsigned char *)(a1 + 46)))
                                         - 8;
    ++*(void *)(a1 + 24);
    ++*(_DWORD *)(a1 + 32);
LABEL_5:
    uint64_t v5 = 0;
    *(unsigned char *)(a1 + 44) = a2;
    *(_DWORD *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 45) = a3;
    return v5;
  }
  return 4294967293;
}

uint64_t VCCaptionsEncoder_Create(void *a1)
{
  if (!a1) {
    return 4294967294;
  }
  BOOL v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x1080040EA45A630uLL);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  int v3 = v2;
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:4];
  uint64_t result = 0;
  v3[1] = v4;
  *((unsigned char *)v3 + 17) = 0;
  *a1 = v3;
  return result;
}

void VCCaptionsEncoder_Destroy(id **a1)
{
  if (a1)
  {
    uint64_t v1 = *a1;
    if (*a1)
    {

      *uint64_t v1 = 0;
      [v1[1] removeAllObjects];

      free(v1);
    }
  }
}

uint64_t _VCCaptionsEncoder_GetValue(void *a1, unsigned int a2, _WORD *a3, BOOL *a4)
{
  uint64_t result = 0;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        *a3 = 0;
        *a4 = 0;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        size_t v9 = (void *)[a1 segments];
        uint64_t result = [v9 countByEnumeratingWithState:&v18 objects:v17 count:16];
        if (result)
        {
          uint64_t v10 = result;
          uint64_t v11 = *(void *)v19;
          while (2)
          {
            for (uint64_t i = 0; i != v10; ++i)
            {
              if (*(void *)v19 != v11) {
                objc_enumerationMutation(v9);
              }
              char v13 = *(void **)(*((void *)&v18 + 1) + 8 * i);
              unint64_t v14 = [v13 range];
              if (v14 + v15 > a2)
              {
                if (a2 >= v14)
                {
                  *a3 = objc_msgSend((id)objc_msgSend(v13, "text"), "characterAtIndex:", a2 - v14);
                  BOOL v16 = [v13 confidence] > 0x32;
                }
                else
                {
                  *a3 = objc_msgSend((id)objc_msgSend(a1, "formattedText"), "characterAtIndex:", a2);
                  BOOL v16 = 1;
                }
                *a4 = v16;
                return 1;
              }
            }
            uint64_t v10 = [v9 countByEnumeratingWithState:&v18 objects:v17 count:16];
            uint64_t result = 0;
            if (v10) {
              continue;
            }
            break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t _VCCaptionsEncoder_GetRefValue(uint64_t a1, unsigned int a2, __int16 *a3, char *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t result = [*(id *)(a1 + 8) count];
  if (result)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    obuint64_t j = (id)[*(id *)(a1 + 8) reverseObjectEnumerator];
    uint64_t v9 = [obj countByEnumeratingWithState:&v20 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      int v11 = 0;
      uint64_t v12 = *(void *)v21;
      while (2)
      {
        uint64_t v13 = 0;
        int v15 = v11 + v10;
        do
        {
          if (*(void *)v21 != v12) {
            objc_enumerationMutation(obj);
          }
          unint64_t v14 = *(void **)(*((void *)&v20 + 1) + 8 * v13);
          if ([v14 isFinal]) {
            return 0;
          }
          __int16 v18 = -21846;
          char v17 = -86;
          if (!_VCCaptionsEncoder_GetValue(v14, a2, &v18, (BOOL *)&v17)) {
            return 0;
          }
          if ((_BYTE)v11)
          {
            if (v18 != *a3 || v17 != *a4) {
              return 0;
            }
          }
          else
          {
            *a3 = v18;
            *a4 = v17;
          }
          LOBYTE(v11) = v11 + 1;
          if (*(unsigned __int8 *)(a1 + 17) < v11) {
            return *(unsigned __int8 *)(a1 + 17) < v11;
          }
          ++v13;
        }
        while (v10 != v13);
        uint64_t v10 = [obj countByEnumeratingWithState:&v20 objects:v19 count:16];
        int v11 = v15;
        if (v10) {
          continue;
        }
        break;
      }
    }
    else
    {
      LOBYTE(v11) = 0;
    }
    return *(unsigned __int8 *)(a1 + 17) < v11;
  }
  return result;
}

void *videoRulesForFormatList(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_opt_new();
  if (v4)
  {
    uint64_t v5 = 0;
    CMTime v6 = (os_log_t *)MEMORY[0x1E4F47A50];
    do
    {
      long long v7 = [VCVideoRule alloc];
      *(float *)&double v8 = (float)*(unsigned int *)(a1 + v5 + 8);
      uint64_t v9 = [(VCVideoRule *)v7 initWithFrameWidth:*(unsigned int *)(a1 + v5) frameHeight:*(unsigned int *)(a1 + v5 + 4) frameRate:a2 payload:v8];
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        [v4 addObject:v9];
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        uint64_t v12 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315650;
          uint64_t v15 = v11;
          __int16 v16 = 2080;
          char v17 = "videoRulesForFormatList";
          __int16 v18 = 1024;
          int v19 = 68;
          _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create video rule for Airplay screen!", buf, 0x1Cu);
        }
      }
      v5 += 12;
    }
    while (v5 != 96);
  }
  return v4;
}

FILE **VRDump_OpenDumpFile(const char *a1, const char *a2, int a3, char a4, int a5)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  keyExistsAndHasValidFormat[0] = 0;
  if (a5)
  {
    if (a5 == 1)
    {
      int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"enableVRDumpForGFT", @"com.apple.VideoConference", keyExistsAndHasValidFormat);
      uint64_t v10 = 0;
      if (!keyExistsAndHasValidFormat[0] || !AppBooleanValue) {
        goto LABEL_17;
      }
      goto LABEL_12;
    }
LABEL_11:
    uint64_t v10 = 0;
    goto LABEL_17;
  }
  int v11 = CFPreferencesGetAppBooleanValue(@"enableVRDump", @"com.apple.VideoConference", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    goto LABEL_11;
  }
LABEL_12:
  unint64_t v92 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v90 = v13;
  long long v91 = v13;
  long long v88 = v13;
  long long v89 = v13;
  long long v87 = v13;
  long long v85 = v13;
  long long v86 = v13;
  long long v83 = v13;
  long long v84 = v13;
  *(_OWORD *)&keyExistsAndHasValidFormat[16] = v13;
  *(_OWORD *)&keyExistsAndHasValidFormat[32] = v13;
  *(_OWORD *)Boolean keyExistsAndHasValidFormat = v13;
  snprintf(keyExistsAndHasValidFormat, 0xC8uLL, "participant-%s-groupid_%s-VideoReceiver", a1, a2);
  uint64_t v10 = VRLogfileAlloc(0, (uint64_t)keyExistsAndHasValidFormat, (uint64_t)"VideoReceiver", (uint64_t)".vrdump", "com.apple.VideoConference.VideoReceiverDump", 44);
  if (v10)
  {
    unint64_t v14 = (char *)malloc_type_calloc(1uLL, 0x14uLL, 0x1349A11DuLL);
    if (v14)
    {
      long long v21 = v14;
      VRLogfile_CreateTimeAndDateString(v14, 20);
      VRLogfilePrintSync(v10, "File Create Time = %s\n", v22, v23, v24, v25, v26, v27, (char)v21);
      free(v21);
    }
    else
    {
      VRLogfilePrintSync(v10, "File Create Time = unknown", v15, v16, v17, v18, v19, v20, v77);
    }
    __int16 v81 = 0;
    *(_DWORD *)CMTime __str = 0;
    time_t v79 = 39600;
    double tm_hour = (double)localtime(&v79)->tm_hour;
    int v29 = gmtime(&v79)->tm_hour;
    double __y = 0.0;
    long double v30 = modf(tm_hour - (double)v29, &__y);
    snprintf(__str, 6uLL, "%03.0f%02.0f\n", __y, (double)(v30 * -60.0));
    VRLogfilePrintSync(v10, "Timezone Offset = %s\n", v31, v32, v33, v34, v35, v36, (char)__str);
    VRLogfilePrintSync(v10, "File unsigned int Version = %s\n", v37, v38, v39, v40, v41, v42, (char)"1.0");
    VRLogfilePrintSync(v10, "ParticipantID = %s\n", v43, v44, v45, v46, v47, v48, (char)a1);
    VRLogfilePrintSync(v10, "StreamGroupID = %s\n", v49, v50, v51, v52, v53, v54, (char)a2);
    VRLogfilePrintSync(v10, "SampleRate = %d\n", v55, v56, v57, v58, v59, v60, a3);
    VRLogfilePrintSync(v10, "Initial VPB uint64_t Instance = %p\n\n", v61, v62, v63, v64, v65, v66, a4);
    VRLogfilePrintSync(v10, "%s\n", v67, v68, v69, v70, v71, v72, (char)"ColumnType,SystemTime,ArrivalTime,SeqNum,FrameTimestamp,Length,IDR,activeStream,VPBFQSize,VPBIQSize,FECProtected,FECLevel,FECRecovered,RTXRecovered,PacketLate,PacketOutOfOrder,PacketRetransmitted,Width,Height,ExpectedPackets,ReceivedPackets,MissingPackets,ParityExpected,ParityReceived,ParityMissing,TemporalLayerID,SubFrameId,AssemblyStatus,ErrorReason,PlayoutTime");
  }
LABEL_17:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v73 = VRTraceErrorLogLevelToCSTR();
    char v74 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v75 = "Enabled";
      *(_DWORD *)Boolean keyExistsAndHasValidFormat = 136316674;
      *(void *)&keyExistsAndHasValidFormat[4] = v73;
      *(_WORD *)&keyExistsAndHasValidFormat[12] = 2080;
      *(void *)&keyExistsAndHasValidFormat[14] = "VRDump_OpenDumpFile";
      if (!v10) {
        unsigned int v75 = "Disabled";
      }
      *(_WORD *)&keyExistsAndHasValidFormat[22] = 1024;
      *(_DWORD *)&keyExistsAndHasValidFormat[24] = 134;
      *(_WORD *)&keyExistsAndHasValidFormat[28] = 2080;
      *(void *)&keyExistsAndHasValidFormat[30] = v75;
      *(_WORD *)&keyExistsAndHasValidFormat[38] = 2080;
      *(void *)&keyExistsAndHasValidFormat[40] = a1;
      LOWORD(v83) = 2080;
      *(void *)((char *)&v83 + 2) = a2;
      WORD5(v83) = 1024;
      HIDWORD(v83) = a3;
      _os_log_impl(&dword_1E1EA4000, v74, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VRDump=%s - ParticipantID=%s, StreamGroupID=%s, sampleRate=%d", keyExistsAndHasValidFormat, 0x40u);
    }
  }
  return v10;
}

uint64_t *VRDump_CloseDumpFile(uint64_t *result)
{
  if (result)
  {
    VRLogfileFree(result);
    return (uint64_t *)VRLogfileRemoveOldFilesInDefaultLogDumpPath();
  }
  return result;
}

FILE **VRDump_AddPacket(FILE **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    if (a2) {
      return _VRDump_WriteEventLineWithTimestamp(result, (char)"AddPacket", "%.4f,%d,%.3f,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,,,,,,,,,,,,,", *(unsigned int *)(a2 + 64), a5, a6, a7, a8, *(void *)a2);
    }
  }
  return result;
}

FILE **_VRDump_WriteEventLineWithTimestamp(FILE **a1, char a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v22 = -1431655766;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  memset(__b, 170, sizeof(__b));
  VRLogfileGetTimestamp((char *)&v21, 0xCu);
  uint64_t result = (FILE **)vsnprintf(__b, 0x400uLL, a3, &a9);
  if ((result & 0x80000000) == 0)
  {
    if ((int)result >= 1023) {
      int v19 = 1023;
    }
    else {
      int v19 = (int)result;
    }
    __b[v19] = 0;
    if (*a3) {
      return VRLogfilePrintSync(a1, "%s,%s,%s\n", v13, v14, v15, v16, v17, v18, a2);
    }
    else {
      return VRLogfilePrintSync(a1, "%s,%s\n", v13, v14, v15, v16, v17, v18, a2);
    }
  }
  return result;
}

FILE **VRDump_AssembleFrame(FILE **result, uint64_t a2)
{
  if (result)
  {
    if (a2) {
      return _VRDump_WriteEventLineWithTimestamp(result, (char)"AssembleFrame", "%f,%d,%.3f,%d,%d,%d,%d,%d,,,,,,,,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%f", *(unsigned int *)(a2 + 64), *(unsigned int *)(a2 + 68), *(unsigned int *)(a2 + 72), *(unsigned int *)(a2 + 76), *(unsigned int *)(a2 + 80), *(void *)a2);
    }
  }
  return result;
}

FILE **VRDump_SwitchMode(FILE **result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    double v8 = "GFT";
    if (a2 == 1) {
      double v8 = "OneToOne";
    }
    return _VRDump_WriteEventLineWithTimestamp(result, (char)"ModeSwitch", "%s", a4, a5, a6, a7, a8, (char)v8);
  }
  return result;
}

FILE **VRDump_AddEvent(FILE **result, unsigned int a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (result && a3)
  {
    if (a3[1])
    {
      if (a2 > 9) {
        uint64_t v9 = "Unknown";
      }
      else {
        uint64_t v9 = off_1E6DB6AF8[(char)a2];
      }
      return _VRDump_WriteEventLineWithTimestamp(result, (char)v9, "%d,%dx%d", a4, a5, a6, a7, a8, *a3);
    }
    else
    {
      if (a2 > 9) {
        uint64_t v10 = "Unknown";
      }
      else {
        uint64_t v10 = off_1E6DB6AF8[(char)a2];
      }
      return _VRDump_WriteEventLineWithTimestamp(result, (char)v10, "", a4, a5, a6, a7, a8, a9);
    }
  }
  return result;
}

void _VCDisplayLinkRunLoopObserverCallBack(int a1, uint64_t a2, dispatch_semaphore_t dsema)
{
  if (a2 == 1)
  {
    dispatch_semaphore_signal(dsema);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCDisplayLinkRunLoopObserverCallBack_cold_1();
    }
  }
}

uint64_t VCStreamOutput_EnqueueAttributes(uint64_t a1, unint64_t a2)
{
  if (a1 | a2)
  {
    VCObject_Lock(a1);
    uint64_t v5 = *(const void **)(a1 + 200);
    *(void *)(a1 + 200) = a2;
    if (a2) {
      CFRetain((CFTypeRef)a2);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (!*(unsigned char *)(a1 + 224)
      && *(unsigned char *)(a1 + 225)
      && VCRemoteImageQueue_EnqueueAttributes(*(void *)(a1 + 176), a2))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCStreamOutput_EnqueueAttributes_cold_2();
        }
      }
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = 1;
    }
    VCObject_Unlock(a1);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCStreamOutput_EnqueueAttributes_cold_1();
      }
    }
    return 0;
  }
  return v2;
}

uint64_t VCStreamOutput_EnqueueSampleBuffer(uint64_t a1, CMSampleBufferRef sbuf)
{
  uint64_t v2 = 0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1 && sbuf)
  {
    memset(&v13, 170, sizeof(v13));
    CMSampleBufferGetPresentationTimeStamp(&v13, sbuf);
    CMTime time = v13;
    CMTimeGetSeconds(&time);
    kdebug_trace();
    VCObject_Lock(a1);
    if (*(unsigned char *)(a1 + 224))
    {
      CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 200);
      if (v5) {
        CMSetAttachments(sbuf, v5, 1u);
      }
      CFRetain(sbuf);
      CMTime v6 = *(NSObject **)(a1 + 216);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __VCStreamOutput_EnqueueSampleBuffer_block_invoke;
      block[3] = &unk_1E6DB4568;
      void block[4] = a1;
      void block[5] = sbuf;
      p_CMTime time = (CMTime *)block;
    }
    else
    {
      if (*(unsigned char *)(a1 + 225))
      {
        if (VCRemoteImageQueue_EnqueueFrame(*(void *)(a1 + 176), (unint64_t)sbuf))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCStreamOutput_EnqueueSampleBuffer_cold_2();
            }
          }
          uint64_t v2 = 0;
          goto LABEL_9;
        }
LABEL_8:
        uint64_t v2 = 1;
LABEL_9:
        VCObject_Unlock(a1);
        return v2;
      }
      CFDictionaryRef v9 = *(const __CFDictionary **)(a1 + 200);
      if (v9) {
        CMSetAttachments(sbuf, v9, 1u);
      }
      uint64_t v10 = VCStreamInputUtil_EncodeSampleBuffer(sbuf);
      if (!v10)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCStreamOutput_EnqueueSampleBuffer_cold_1();
          }
        }
        goto LABEL_8;
      }
      int v11 = *(NSObject **)(a1 + 184);
      time.os_signpost_id_t value = MEMORY[0x1E4F143A8];
      *(void *)&time.timescale = 3221225472;
      time.epoch = (CMTimeEpoch)___VCStreamOutput_SendSampleBufferToXPCClient_block_invoke;
      uint64_t v15 = &unk_1E6DB3E40;
      uint64_t v16 = v10;
      uint64_t v17 = a1;
      p_CMTime time = &time;
      CMTime v6 = v11;
    }
    dispatch_async(v6, p_time);
    goto LABEL_8;
  }
  return v2;
}

uint64_t ParseUnsupported(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136316162;
      uint64_t v7 = v3;
      __int16 v8 = 2080;
      CFDictionaryRef v9 = "ParseUnsupported";
      __int16 v10 = 1024;
      int v11 = 162;
      __int16 v12 = 1024;
      int v13 = 162;
      __int16 v14 = 2080;
      uint64_t v15 = a2;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: Unsupported header[%s]", (uint8_t *)&v6, 0x2Cu);
    }
  }
  return 0;
}

uint64_t ParseAcceptHdr(char **a1, char *a2)
{
  uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0xA0uLL, 0x1000040B8406A4EuLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    if (a2)
    {
      for (uint64_t i = 0; i != 5; ++i)
      {
        uint64_t v7 = strchr(a2, 44);
        __int16 v8 = v7;
        if (v7) {
          *uint64_t v7 = 0;
        }
        while (1)
        {
          int v9 = *a2;
          if (v9 != 32 && v9 != 9) {
            break;
          }
          ++a2;
        }
        strlcpy(&v5[32 * i], a2, 0x20uLL);
        if (!v8) {
          break;
        }
        a2 = v8 + 1;
      }
    }
    uint64_t v11 = 0;
    *a1 = v5;
  }
  else
  {
    uint64_t v11 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseAcceptHdr_cold_1();
      }
    }
  }
  return v11;
}

uint64_t ParseAllowHdr(void *a1, char *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    if (a2)
    {
      do
      {
        int v6 = strchr(a2, 44);
        uint64_t v7 = v6;
        if (v6) {
          *int v6 = 0;
        }
        while (1)
        {
          int v8 = *a2;
          if (v8 != 9 && v8 != 32) {
            break;
          }
          ++a2;
        }
        uint64_t v9 = 1;
        while (strcmp(a2, g_apszMethods[v9]))
        {
          if (++v9 == 12) {
            goto LABEL_13;
          }
        }
        *v5 |= (1 << v9);
LABEL_13:
        a2 = v7 + 1;
      }
      while (v7);
    }
    uint64_t v10 = 0;
    *a1 = v5;
  }
  else
  {
    uint64_t v10 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseAllowHdr_cold_1();
      }
    }
  }
  return v10;
}

uint64_t ParseAllowEventsHdr(void *a1, char *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    if (a2)
    {
      do
      {
        int v6 = strchr(a2, 44);
        uint64_t v7 = v6;
        if (v6) {
          *int v6 = 0;
        }
        while (1)
        {
          int v8 = *a2;
          if (v8 != 9 && v8 != 32) {
            break;
          }
          ++a2;
        }
        uint64_t v9 = 1;
        while (strcmp(a2, g_apszEvents[v9]))
        {
          if (++v9 == 3) {
            goto LABEL_13;
          }
        }
        *v5 |= (1 << v9);
LABEL_13:
        a2 = v7 + 1;
      }
      while (v7);
    }
    uint64_t v10 = 0;
    *a1 = v5;
  }
  else
  {
    uint64_t v10 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseAllowEventsHdr_cold_1();
      }
    }
  }
  return v10;
}

uint64_t ParseCallIDHdr(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x3CuLL, 0x1000040C2DCA394uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    __strlcpy_chk();
    uint64_t v4 = 0;
    *a1 = v3;
  }
  else
  {
    uint64_t v4 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseCallIDHdr_cold_1();
      }
    }
  }
  return v4;
}

uint64_t ParseContactHdr(void *a1, char *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_calloc(1uLL, 0xA4uLL, 0x10000409BFB62CCuLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = strchr(a2, 60);
    if (v6)
    {
      uint64_t v7 = v6;
      *int v6 = 0;
      int v8 = strchr(a2, 34);
      if (v8)
      {
        uint64_t v9 = strchr(v8 + 1, 34);
        if (v9) {
          *uint64_t v9 = 0;
        }
        __strlcpy_chk();
        __strlcat_chk();
      }
      else
      {
        if (strlen(a2) >= 0x2B) {
          a2[42] = 0;
        }
        sscanf(a2, "%s", v5);
      }
      a2 = v7 + 1;
      int v13 = strchr(v7 + 1, 62);
      if (!v13)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v23 = VRTraceErrorLogLevelToCSTR();
          uint64_t v24 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)pthread_attr_t buf = 136316162;
            uint64_t v27 = v23;
            __int16 v28 = 2080;
            int v29 = "ParseContactHdr";
            __int16 v30 = 1024;
            int v31 = 338;
            __int16 v32 = 1024;
            int v33 = 338;
            __int16 v34 = 2080;
            uint64_t v35 = a2;
            _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: No '>' in SIP URI[%s]", buf, 0x2Cu);
          }
        }
        free(v5);
        return 2148335647;
      }
      char *v13 = 0;
      __int16 v12 = strchr(v13 + 1, 59);
    }
    else
    {
      uint64_t v11 = strchr(a2, 59);
      __int16 v12 = v11;
      if (v11) {
        *uint64_t v11 = 0;
      }
    }
    while (1)
    {
      int v14 = *a2;
      if (v14 != 32 && v14 != 9) {
        break;
      }
      ++a2;
    }
    ParseSipUri((uint64_t)(v5 + 11), a2);
    for (; v12; *unint64_t v21 = 1)
    {
      while (1)
      {
        uint64_t v16 = v12 + 1;
        uint64_t v17 = strchr(v12 + 1, 59);
        __int16 v12 = v17;
        if (v17) {
          *uint64_t v17 = 0;
        }
        while (1)
        {
          int v18 = *(unsigned __int8 *)v16;
          if (v18 != 32 && v18 != 9) {
            break;
          }
          ++v16;
        }
        int v20 = strncasecmp(v16, "isfocus", 7uLL);
        unint64_t v21 = v5 + 39;
        if (!v20) {
          break;
        }
        int v22 = strncasecmp(v16, "ismultiway", 0xAuLL);
        unint64_t v21 = v5 + 40;
        if (!v22) {
          break;
        }
        if (!v12) {
          goto LABEL_35;
        }
      }
    }
LABEL_35:
    uint64_t v10 = 0;
    *a1 = v5;
  }
  else
  {
    uint64_t v10 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseContactHdr_cold_1();
      }
    }
  }
  return v10;
}

uint64_t ParseContentEncodingHdr(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    __strlcpy_chk();
    uint64_t v4 = 0;
    *a1 = v3;
  }
  else
  {
    uint64_t v4 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseContentEncodingHdr_cold_1();
      }
    }
  }
  return v4;
}

uint64_t ParseContentLengthHdr(int **a1, const char *a2)
{
  uint64_t v4 = (int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = atoi(a2);
    uint64_t v7 = 0;
    *CFDictionaryRef v5 = v6;
    *a1 = v5;
  }
  else
  {
    uint64_t v7 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseContentLengthHdr_cold_1();
      }
    }
  }
  return v7;
}

uint64_t ParseContentTypeHdr(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    __strlcpy_chk();
    uint64_t v4 = 0;
    *a1 = v3;
  }
  else
  {
    uint64_t v4 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseContentTypeHdr_cold_1();
      }
    }
  }
  return v4;
}

uint64_t ParseCSeqHdr(void *a1, const char *a2)
{
  v11[1] = *(char **)MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040D9A13B51uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    v11[0] = (char *)0xAAAAAAAAAAAAAAAALL;
    *uint64_t v4 = strtol(a2, v11, 10);
    for (uint64_t i = v11[0]; ; ++i)
    {
      int v7 = *(unsigned __int8 *)i;
      if (v7 != 9 && v7 != 32) {
        break;
      }
    }
    uint64_t v8 = 1;
    while (strcasecmp(g_apszMethods[v8], i))
    {
      if (++v8 == 12) {
        goto LABEL_14;
      }
    }
    *((_DWORD *)v5 + 2) = v8;
LABEL_14:
    uint64_t v9 = 0;
    *a1 = v5;
  }
  else
  {
    uint64_t v9 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseCSeqHdr_cold_1();
      }
    }
  }
  return v9;
}

uint64_t ParseEventHdr(void *a1, char *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_calloc(1uLL, 0x14uLL, 0x1000040A86A77D5uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    if (strchr(a2, 44))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        int v7 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v18 = 136316162;
          uint64_t v19 = v6;
          __int16 v20 = 2080;
          unint64_t v21 = "ParseEventHdr";
          __int16 v22 = 1024;
          int v23 = 471;
          __int16 v24 = 1024;
          int v25 = 471;
          __int16 v26 = 2080;
          uint64_t v27 = a2;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: Multiple Event packages in Event header[%s]", (uint8_t *)&v18, 0x2Cu);
        }
      }
      free(v5);
      return 2148335647;
    }
    else
    {
      uint64_t v9 = strchr(a2, 59);
      uint64_t v10 = v9;
      if (v9) {
        *uint64_t v9 = 0;
      }
      uint64_t v11 = 1;
      while (strcasecmp(a2, g_apszEvents[v11]))
      {
        if (++v11 == 3)
        {
          if (!v10) {
            goto LABEL_30;
          }
          goto LABEL_18;
        }
      }
      *CFDictionaryRef v5 = v11;
      if (!v10) {
        goto LABEL_30;
      }
      do
      {
LABEL_18:
        __int16 v12 = strchr(v10 + 1, 59);
        int v13 = v12;
        if (v12) {
          *__int16 v12 = 0;
        }
        for (uint64_t i = v10 + 4; ; ++i)
        {
          int v15 = *(i - 3);
          if (v15 != 32 && v15 != 9) {
            break;
          }
        }
        if (!strncasecmp(i - 3, "id=", 3uLL)) {
          __strlcpy_chk();
        }
        uint64_t v10 = v13;
      }
      while (v13);
LABEL_30:
      uint64_t v8 = 0;
      *a1 = v5;
    }
  }
  else
  {
    uint64_t v8 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseEventHdr_cold_1();
      }
    }
  }
  return v8;
}

uint64_t ParseExpiresHdr(int **a1, const char *a2)
{
  uint64_t v4 = (int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = atoi(a2);
    uint64_t v7 = 0;
    *CFDictionaryRef v5 = v6;
    *a1 = v5;
  }
  else
  {
    uint64_t v7 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseExpiresHdr_cold_1();
      }
    }
  }
  return v7;
}

uint64_t ParseFromHdr(void *a1, char *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_calloc(1uLL, 0xDCuLL, 0x1000040E6B0F26EuLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = strchr(a2, 60);
    if (!v6)
    {
      uint64_t v11 = strchr(a2, 59);
      __int16 v12 = v11;
      if (v11) {
        *uint64_t v11 = 0;
      }
      goto LABEL_18;
    }
    uint64_t v7 = v6;
    *int v6 = 0;
    uint64_t v8 = strchr(a2, 34);
    if (v8)
    {
      uint64_t v9 = strchr(v8 + 1, 34);
      if (v9) {
        *uint64_t v9 = 0;
      }
      __strlcpy_chk();
      __strlcat_chk();
    }
    else
    {
      if (strlen(a2) >= 0x2B) {
        a2[42] = 0;
      }
      sscanf(a2, "%s", v5);
    }
    a2 = v7 + 1;
    int v13 = strchr(v7 + 1, 62);
    if (v13)
    {
      char *v13 = 0;
      __int16 v12 = strchr(v13 + 1, 59);
LABEL_18:
      while (1)
      {
        int v14 = *a2;
        if (v14 != 32 && v14 != 9) {
          break;
        }
        ++a2;
      }
      ParseSipUri((uint64_t)v5 + 44, a2);
      if (v12)
      {
        do
        {
          uint64_t v16 = strchr(v12 + 1, 59);
          uint64_t v17 = v16;
          if (v16) {
            *uint64_t v16 = 0;
          }
          for (uint64_t i = v12 + 5; ; ++i)
          {
            int v19 = *(i - 4);
            if (v19 != 32 && v19 != 9) {
              break;
            }
          }
          if (!strncasecmp(i - 4, "tag=", 4uLL)) {
            __strlcpy_chk();
          }
          __int16 v12 = v17;
        }
        while (v17);
      }
      uint64_t v10 = 0;
      *a1 = v5;
      return v10;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v21 = VRTraceErrorLogLevelToCSTR();
      __int16 v22 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v25 = v21;
        __int16 v26 = 2080;
        uint64_t v27 = "ParseFromHdr";
        __int16 v28 = 1024;
        int v29 = 561;
        __int16 v30 = 1024;
        int v31 = 561;
        __int16 v32 = 2080;
        int v33 = a2;
        _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: No '>' in SIP URI[%s]", buf, 0x2Cu);
      }
    }
    free(v5);
    return 2148335647;
  }
  else
  {
    uint64_t v10 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseFromHdr_cold_1();
      }
    }
  }
  return v10;
}

uint64_t ParseMaxForwardsHdr(int **a1, const char *a2)
{
  uint64_t v4 = (int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = atoi(a2);
    uint64_t v7 = 0;
    *CFDictionaryRef v5 = v6;
    *a1 = v5;
  }
  else
  {
    uint64_t v7 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseMaxForwardsHdr_cold_1();
      }
    }
  }
  return v7;
}

uint64_t ParseMinExpiresHdr(int **a1, const char *a2)
{
  uint64_t v4 = (int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = atoi(a2);
    uint64_t v7 = 0;
    *CFDictionaryRef v5 = v6;
    *a1 = v5;
  }
  else
  {
    uint64_t v7 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseMinExpiresHdr_cold_1();
      }
    }
  }
  return v7;
}

uint64_t ParseReferToHdr(void *a1, char *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_calloc(1uLL, 0x7BuLL, 0x1000040D7A3BC59uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = strchr(a2, 60);
    if (!v6)
    {
      uint64_t v11 = strchr(a2, 59);
      __int16 v12 = v11;
      if (v11) {
        *uint64_t v11 = 0;
      }
      goto LABEL_18;
    }
    uint64_t v7 = v6;
    *int v6 = 0;
    uint64_t v8 = strchr(a2, 34);
    if (v8)
    {
      uint64_t v9 = strchr(v8 + 1, 34);
      if (v9) {
        *uint64_t v9 = 0;
      }
      __strlcpy_chk();
      __strlcat_chk();
    }
    else
    {
      if (strlen(a2) >= 0x2B) {
        a2[42] = 0;
      }
      sscanf(a2, "%s", v5);
    }
    a2 = v7 + 1;
    int v13 = strchr(v7 + 1, 62);
    if (v13)
    {
      char *v13 = 0;
      __int16 v12 = strchr(v13 + 1, 59);
LABEL_18:
      while (1)
      {
        int v14 = *a2;
        if (v14 != 32 && v14 != 9) {
          break;
        }
        ++a2;
      }
      __strlcpy_chk();
      if (v12)
      {
        do
        {
          uint64_t v16 = (unsigned __int8 *)(v12 + 1);
          uint64_t v17 = strchr(v12 + 1, 59);
          __int16 v12 = v17;
          if (v17) {
            *uint64_t v17 = 0;
          }
          while (1)
          {
            int v18 = *v16;
            if (v18 != 32 && v18 != 9) {
              break;
            }
            ++v16;
          }
        }
        while (v17);
      }
      uint64_t v10 = 0;
      *a1 = v5;
      return v10;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v20 = VRTraceErrorLogLevelToCSTR();
      uint64_t v21 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v24 = v20;
        __int16 v25 = 2080;
        __int16 v26 = "ParseReferToHdr";
        __int16 v27 = 1024;
        int v28 = 713;
        __int16 v29 = 1024;
        int v30 = 713;
        __int16 v31 = 2080;
        __int16 v32 = a2;
        _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: No '>' in SIP URI[%s]", buf, 0x2Cu);
      }
    }
    free(v5);
    return 2148335647;
  }
  else
  {
    uint64_t v10 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseReferToHdr_cold_1();
      }
    }
  }
  return v10;
}

uint64_t ParseSubscriptionStateHdr(void *a1, char *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  if (!v4)
  {
    uint64_t v9 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseSubscriptionStateHdr_cold_1();
      }
    }
    return v9;
  }
  CFDictionaryRef v5 = v4;
  int v6 = strchr(a2, 59);
  uint64_t v7 = v6;
  if (v6) {
    *int v6 = 0;
  }
  for (uint64_t i = 1; i != 4; ++i)
  {
    if (!strcasecmp(a2, g_apszSubStates[i]))
    {
      *CFDictionaryRef v5 = i;
      if (!v7) {
        goto LABEL_35;
      }
      while (1)
      {
        while (1)
        {
LABEL_13:
          uint64_t v10 = v7;
          uint64_t v11 = strchr(v7 + 1, 59);
          uint64_t v7 = v11;
          if (v11) {
            *uint64_t v11 = 0;
          }
          for (uint64_t j = v10 + 8; ; ++j)
          {
            int v13 = *((unsigned __int8 *)j - 7);
            if (v13 != 32 && v13 != 9) {
              break;
            }
          }
          if (strncasecmp(j - 7, "reason=", 7uLL)) {
            break;
          }
          uint64_t v15 = 0;
          while (strcasecmp(j, g_apszReasons[v15]))
          {
            if (++v15 == 7) {
              goto LABEL_32;
            }
          }
          v5[1] = v15;
          if (!v7) {
            goto LABEL_35;
          }
        }
        if (!strncasecmp(j - 7, "expires=", 8uLL)) {
          break;
        }
        if (!strncasecmp(j - 7, "retry-after=", 0xCuLL))
        {
          void v5[3] = atoi(j + 5);
          if (!v7) {
            goto LABEL_35;
          }
        }
        else
        {
LABEL_32:
          if (!v7) {
            goto LABEL_35;
          }
        }
      }
      double v5[2] = atoi(j + 1);
      goto LABEL_32;
    }
  }
  if (v7) {
    goto LABEL_13;
  }
LABEL_35:
  uint64_t v9 = 0;
  *a1 = v5;
  return v9;
}

uint64_t ParseToHdr(void *a1, char *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_calloc(1uLL, 0xDCuLL, 0x1000040E6B0F26EuLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = strchr(a2, 60);
    if (!v6)
    {
      uint64_t v11 = strchr(a2, 59);
      __int16 v12 = v11;
      if (v11) {
        *uint64_t v11 = 0;
      }
      goto LABEL_18;
    }
    uint64_t v7 = v6;
    *int v6 = 0;
    uint64_t v8 = strchr(a2, 34);
    if (v8)
    {
      uint64_t v9 = strchr(v8 + 1, 34);
      if (v9) {
        *uint64_t v9 = 0;
      }
      __strlcpy_chk();
      __strlcat_chk();
    }
    else
    {
      if (strlen(a2) >= 0x2B) {
        a2[42] = 0;
      }
      sscanf(a2, "%s", v5);
    }
    a2 = v7 + 1;
    int v13 = strchr(v7 + 1, 62);
    if (v13)
    {
      char *v13 = 0;
      __int16 v12 = strchr(v13 + 1, 59);
LABEL_18:
      while (1)
      {
        int v14 = *a2;
        if (v14 != 32 && v14 != 9) {
          break;
        }
        ++a2;
      }
      ParseSipUri((uint64_t)v5 + 44, a2);
      if (v12)
      {
        do
        {
          uint64_t v16 = strchr(v12 + 1, 59);
          uint64_t v17 = v16;
          if (v16) {
            *uint64_t v16 = 0;
          }
          for (uint64_t i = v12 + 5; ; ++i)
          {
            int v19 = *(i - 4);
            if (v19 != 32 && v19 != 9) {
              break;
            }
          }
          if (!strncasecmp(i - 4, "tag=", 4uLL)) {
            __strlcpy_chk();
          }
          __int16 v12 = v17;
        }
        while (v17);
      }
      uint64_t v10 = 0;
      *a1 = v5;
      return v10;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v21 = VRTraceErrorLogLevelToCSTR();
      __int16 v22 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v25 = v21;
        __int16 v26 = 2080;
        __int16 v27 = "ParseToHdr";
        __int16 v28 = 1024;
        int v29 = 843;
        __int16 v30 = 1024;
        int v31 = 843;
        __int16 v32 = 2080;
        uint64_t v33 = a2;
        _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: No '>' in SIP URI[%s]", buf, 0x2Cu);
      }
    }
    free(v5);
    return 2148335647;
  }
  else
  {
    uint64_t v10 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseToHdr_cold_1();
      }
    }
  }
  return v10;
}

uint64_t ParseUserAgentHdr(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x2BuLL, 0x100004056BB1370uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    __strlcpy_chk();
    uint64_t v4 = 0;
    *a1 = v3;
  }
  else
  {
    uint64_t v4 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseUserAgentHdr_cold_1();
      }
    }
  }
  return v4;
}

uint64_t ParseViaHdr(void *a1, char *k)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_calloc(1uLL, 0x310uLL, 0x1000040F65B4EE0uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    uint64_t v45 = a1;
    uint64_t v6 = 0;
    uint64_t v7 = (char *)(v4 + 1);
    while (!strncmp(k, "SIP/2.0", 7uLL) && k[7] == 47)
    {
      uint64_t v8 = 0;
      uint64_t v9 = (unsigned __int8 *)(k + 8);
      while (1)
      {
        unsigned int v10 = v9[v8];
        if (v10 <= 0x20 && ((1 << v10) & 0x100000201) != 0)
        {
          uint64_t i = (char *)&v9[v8];
          goto LABEL_20;
        }
        v7[v8] = v10;
        if (v8 == 2) {
          break;
        }
        ++v8;
      }
      for (uint64_t i = k + 10; ; ++i)
      {
        unsigned int v13 = *i;
        BOOL v14 = v13 > 0x20;
        uint64_t v15 = (1 << v13) & 0x100000201;
        if (!v14 && v15 != 0) {
          break;
        }
      }
      LODWORD(v8) = 3;
LABEL_20:
      *((unsigned char *)&v5[39 * v6 + 1] + (int)v8) = 0;
      for (uint64_t j = i; ; ++j)
      {
        int v18 = *j;
        if (v18 != 32 && v18 != 9) {
          break;
        }
        ++i;
      }
      uint64_t v20 = strchr(j, 44);
      uint64_t k = v20;
      if (v20)
      {
        char *v20 = 0;
        for (uint64_t k = v20 + 1; ; ++k)
        {
          int v21 = *k;
          if (v21 != 32 && v21 != 9) {
            break;
          }
        }
        int v18 = *j;
      }
      if (v18 == 91)
      {
        int v23 = strchr(j + 1, 93);
        if (!v23)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v43 = VRTraceErrorLogLevelToCSTR();
            uint64_t v41 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)pthread_attr_t buf = 136316162;
              uint64_t v47 = v43;
              __int16 v48 = 2080;
              uint64_t v49 = "ParseViaHdr";
              __int16 v50 = 1024;
              int v51 = 954;
              __int16 v52 = 1024;
              int v53 = 954;
              __int16 v54 = 2080;
              uint64_t v55 = i;
              uint64_t v42 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/S"
                    "ipHdr.c:%d: No ']' after '[' for an IPv6 address[%s]";
              goto LABEL_73;
            }
          }
          goto LABEL_80;
        }
        char *v23 = 0;
        uint64_t j = v23 + 1;
        v5[39 * v6 + 2] = 1;
        __strlcpy_chk();
      }
      uint64_t v24 = strchr(j, 59);
      uint64_t v25 = v24;
      if (v24) {
        *uint64_t v24 = 0;
      }
      __int16 v26 = strchr(j, 58);
      if (v26)
      {
        char *v26 = 0;
        __int16 v27 = atoi(v26 + 1);
      }
      else
      {
        __int16 v27 = 5060;
      }
      __int16 v28 = &v5[39 * v6];
      *((_WORD *)v28 + 26) = v27;
      if (!v28[2]) {
        __strlcpy_chk();
      }
      int v29 = v5;
      if (v25)
      {
        __int16 v30 = (char *)&v5[39 * v6 + 29] + 2;
        do
        {
          while (1)
          {
            int v31 = v25;
            __int16 v32 = strchr(v25 + 1, 59);
            uint64_t v25 = v32;
            if (v32) {
              *__int16 v32 = 0;
            }
            for (m = v31 + 8; ; ++m)
            {
              int v34 = *(m - 7);
              if (v34 != 32 && v34 != 9) {
                break;
              }
            }
            if (strncasecmp(m - 7, "branch=", 7uLL)) {
              break;
            }
            __strlcpy_chk();
            if (!v25) {
              goto LABEL_62;
            }
          }
          if (!strncasecmp(m - 7, "received=", 9uLL)) {
            strlcpy(v30, m + 2, 0x28uLL);
          }
        }
        while (v25);
      }
LABEL_62:
      ++v6;
      if (!k)
      {
        CFDictionaryRef v5 = v29;
LABEL_75:
        uint64_t v38 = v45;
LABEL_76:
        uint64_t v39 = 0;
        *CFDictionaryRef v5 = v6;
        *uint64_t v38 = v5;
        return v39;
      }
      v7 += 156;
      CFDictionaryRef v5 = v29;
      if (v6 == 5)
      {
        LODWORD(v6) = 5;
        if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
          goto LABEL_75;
        }
        uint64_t v36 = VRTraceErrorLogLevelToCSTR();
        uint64_t v37 = *MEMORY[0x1E4F47A50];
        uint64_t v38 = v45;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136316162;
          uint64_t v47 = v36;
          __int16 v48 = 2080;
          uint64_t v49 = "ParseViaHdr";
          __int16 v50 = 1024;
          int v51 = 1006;
          __int16 v52 = 1024;
          int v53 = 1006;
          __int16 v54 = 1024;
          LODWORD(v55) = 5;
          _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: More Via than the maximum %d", buf, 0x28u);
        }
        goto LABEL_76;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v40 = VRTraceErrorLogLevelToCSTR();
      uint64_t v41 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v47 = v40;
        __int16 v48 = 2080;
        uint64_t v49 = "ParseViaHdr";
        __int16 v50 = 1024;
        int v51 = 915;
        __int16 v52 = 1024;
        int v53 = 915;
        __int16 v54 = 2080;
        uint64_t v55 = k;
        uint64_t v42 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr."
              "c:%d: Invalid protocol version[%s] in Via";
LABEL_73:
        _os_log_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_DEFAULT, v42, buf, 0x2Cu);
      }
    }
LABEL_80:
    free(v5);
    return 2148335647;
  }
  else
  {
    uint64_t v39 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseViaHdr_cold_1();
      }
    }
  }
  return v39;
}

uint64_t ParseSKESeqHdr(void *a1, const char *a2)
{
  __s[1] = *(char **)MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040D9A13B51uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    __s[0] = (char *)0xAAAAAAAAAAAAAAAALL;
    *uint64_t v4 = strtol(a2, __s, 10);
    uint64_t v6 = strchr(__s[0], 59);
    if (v6) {
      LODWORD(v6) = atoi(v6 + 1);
    }
    uint64_t v7 = 0;
    *((_DWORD *)v5 + 2) = v6;
    *a1 = v5;
  }
  else
  {
    uint64_t v7 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseSKESeqHdr_cold_1();
      }
    }
  }
  return v7;
}

uint64_t ParseXCallIDHdr(int **a1, const char *a2)
{
  uint64_t v4 = (int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = atoi(a2);
    uint64_t v7 = 0;
    *CFDictionaryRef v5 = v6;
    *a1 = v5;
  }
  else
  {
    uint64_t v7 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseXCallIDHdr_cold_1();
      }
    }
  }
  return v7;
}

uint64_t ParseReasonHdr(void *a1, char *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x84uLL, 0x10000403AA91CE4uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    int v6 = strchr(a2, 59);
    if (v6)
    {
      uint64_t v7 = v6;
      *int v6 = 0;
      *CFDictionaryRef v5 = 1;
      __strlcpy_chk();
      do
      {
        while (1)
        {
          uint64_t v8 = v7;
          uint64_t v9 = strchr(v7 + 1, 59);
          uint64_t v7 = v9;
          if (v9) {
            *uint64_t v9 = 0;
          }
          for (uint64_t i = v8 + 6; ; ++i)
          {
            int v11 = *(i - 5);
            if (v11 != 32 && v11 != 9) {
              break;
            }
          }
          if (strncasecmp(i - 5, "cause=", 6uLL)) {
            break;
          }
          v5[12] = atoi(i + 1);
          if (!v7) {
            goto LABEL_24;
          }
        }
        if (!strncasecmp(i - 5, "text=", 5uLL)) {
          __strlcpy_chk();
        }
      }
      while (v7);
    }
    else
    {
      *CFDictionaryRef v5 = 1;
      __strlcpy_chk();
    }
LABEL_24:
    uint64_t v13 = 0;
    *a1 = v5;
  }
  else
  {
    uint64_t v13 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        ParseReasonHdr_cold_1();
      }
    }
  }
  return v13;
}

uint64_t ParseHeader(void *a1, unsigned int *a2, char *__s, int a4)
{
  *(void *)&v42[5] = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  uint64_t v8 = strchr(__s, 58);
  if (!v8)
  {
    uint64_t v16 = 2148335647;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return v16;
    }
    uint64_t v17 = VRTraceErrorLogLevelToCSTR();
    int v18 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return v16;
    }
    int v33 = 136316418;
    uint64_t v34 = v17;
    __int16 v35 = 2080;
    uint64_t v36 = "ParseHeader";
    __int16 v37 = 1024;
    int v38 = 1070;
    __int16 v39 = 1024;
    int v40 = 1070;
    __int16 v41 = 1024;
    v42[0] = 58;
    LOWORD(v42[1]) = 2080;
    *(void *)((char *)&v42[1] + 2) = __s;
    int v19 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d"
          ": No '%c' in the header[%s]";
    uint64_t v20 = v18;
    uint32_t v21 = 50;
LABEL_22:
    _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v33, v21);
    return v16;
  }
  uint64_t v9 = v8;
  unsigned int v10 = v8 - 1;
  int v11 = v8;
  if (v8 - 1 >= __s)
  {
    do
    {
      int v12 = *v10;
      if (v12 != 32 && v12 != 9) {
        break;
      }
      --v10;
    }
    while (v10 >= __s);
    int v11 = v10 + 1;
  }
  *int v11 = 0;
  int v14 = strlen(__s);
  if (!v14)
  {
    uint64_t v16 = 2148335647;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return v16;
    }
    uint64_t v22 = VRTraceErrorLogLevelToCSTR();
    int v23 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return v16;
    }
    int v33 = 136316162;
    uint64_t v34 = v22;
    __int16 v35 = 2080;
    uint64_t v36 = "ParseHeader";
    __int16 v37 = 1024;
    int v38 = 1084;
    __int16 v39 = 1024;
    int v40 = 1084;
    __int16 v41 = 2080;
    *(void *)uint64_t v42 = __s;
    int v19 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d"
          ": No header field name[%s]";
    uint64_t v20 = v23;
    uint32_t v21 = 44;
    goto LABEL_22;
  }
  if (v14 != 1)
  {
    uint64_t v24 = -51;
    uint64_t v25 = (const char **)&off_1F3D3D460;
    while (strcasecmp(__s, *v25))
    {
      v25 += 3;
      if (__CFADD__(v24++, 1))
      {
LABEL_27:
        unsigned int v27 = 0;
        if (a2) {
          goto LABEL_32;
        }
        goto LABEL_33;
      }
    }
    unsigned int v27 = v24 + 52;
    if (!a2) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v15 = 0;
  while (__tolower(*__s) != g_aCompactHeaders[v15])
  {
    v15 += 8;
    if (v15 == 104) {
      goto LABEL_27;
    }
  }
  unsigned int v27 = *(_DWORD *)&g_aCompactHeaders[v15 + 4];
  if (a2) {
LABEL_32:
  }
    *a2 = v27;
LABEL_33:
  if (v27 != a4 && a4 && v27) {
    return 2148335648;
  }
  for (uint64_t i = (unsigned __int8 *)(v9 + 1); ; ++i)
  {
    int v30 = *i;
    if (v30 != 32 && v30 != 9) {
      break;
    }
  }
  __int16 v32 = (&g_aHeaders)[3 * v27 + 1];

  return ((uint64_t (*)(void *))v32)(a1);
}

uint64_t ConstructAcceptHdr(char *a1, const char *a2, size_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 2148335617;
  }
  __int16 v12 = -21846;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)CMTime __str = v6;
  long long v11 = v6;
  sprintf(a1, "%s: %s", "Accept", a2);
  uint64_t v7 = 0;
  uint64_t v8 = a2 + 32;
  do
  {
    if (!v8[v7]) {
      break;
    }
    snprintf(__str, 0x22uLL, ", %s", &v8[v7]);
    strlcat(a1, __str, a3);
    v7 += 32;
  }
  while (v7 != 128);
  strlcat(a1, "\r\n", a3);
  return 0;
}

uint64_t ConstructAllowHdr(char *a1, void *a2, size_t a3)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%s: ", "Allow");
  uint64_t v6 = 1;
  int v7 = 1;
  do
  {
    if ((*a2 & (1 << v6)) != 0)
    {
      if (!v7) {
        strlcat(a1, ", ", a3);
      }
      strlcat(a1, g_apszMethods[v6], a3);
      int v7 = 0;
    }
    ++v6;
  }
  while (v6 != 12);
  strlcat(a1, "\r\n", a3);
  return 0;
}

uint64_t ConstructAllowEventsHdr(char *a1, void *a2, size_t a3)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%c: ", 117);
  uint64_t v6 = 1;
  int v7 = 1;
  do
  {
    if ((*a2 & (1 << v6)) != 0)
    {
      if (!v7) {
        strlcat(a1, ", ", a3);
      }
      strlcat(a1, g_apszEvents[v6], a3);
      int v7 = 0;
    }
    ++v6;
  }
  while (v6 != 3);
  strlcat(a1, "\r\n", a3);
  return 0;
}

uint64_t ConstructCallIDHdr(char *a1, const char *a2)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%c: %s\r\n", 105, a2);
  return 0;
}

uint64_t ConstructContactHdr(char *a1, char *__s)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!__s) {
    return 2148335617;
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[3] = v4;
  v14[4] = v4;
  v14[1] = v4;
  unint64_t v14[2] = v4;
  long long v13 = v4;
  v14[0] = v4;
  *(_OWORD *)unsigned int v10 = v4;
  long long v11 = v4;
  long long v12 = v4;
  *(_OWORD *)uint64_t v6 = v4;
  long long v7 = v4;
  long long v8 = v4;
  long long v9 = v4;
  if ((int)strlen(__s) >= 1) {
    snprintf(__str, 0x2BuLL, "%s ", __s);
  }
  __s[49] = 0;
  ConstructUri((char *)v14, __s + 44);
  if (*((_DWORD *)__s + 39)) {
    snprintf(v10, 0x40uLL, ";%s", "isfocus");
  }
  else {
    v10[0] = 0;
  }
  if (*((_DWORD *)__s + 40)) {
    snprintf(v6, 0x40uLL, ";%s", "ismultiway");
  }
  else {
    v6[0] = 0;
  }
  sprintf(a1, "%c: %s%s%s\r\n", 109, (const char *)v14, v10, v6);
  return 0;
}

uint64_t ConstructContentEncodingHdr(char *a1, const char *a2)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%c: %s\r\n", 101, a2);
  return 0;
}

uint64_t ConstructContentLengthHdr(char *a1, _DWORD *a2)
{
  if (!a2) {
    return 2148335617;
  }
  if (*a2 == -1) {
    sprintf(a1, "%c: %s\r\n");
  }
  else {
    sprintf(a1, "%c: %d\r\n");
  }
  return 0;
}

uint64_t ConstructContentTypeHdr(char *a1, const char *a2)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%c: %s\r\n", 99, a2);
  return 0;
}

uint64_t ConstructCSeqHdr(char *a1, uint64_t a2)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%s: %lu %s\r\n", "CSeq", *(void *)a2, g_apszMethods[*(unsigned int *)(a2 + 8)]);
  return 0;
}

uint64_t ConstructEventHdr(char *a1, uint64_t a2)
{
  if (!a2) {
    return 2148335617;
  }
  if (*(unsigned char *)(a2 + 4)) {
    sprintf(a1, "%c: %s;%s\r\n");
  }
  else {
    sprintf(a1, "%c: %s\r\n");
  }
  return 0;
}

uint64_t ConstructExpiresHdr(char *a1, _DWORD *a2)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%s: %d\r\n", "Expires", *a2);
  return 0;
}

uint64_t ConstructFromHdr(char *a1, char *__s)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!__s) {
    return 2148335617;
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v15[11] = v4;
  *(_OWORD *)CMTime __str = v4;
  *(_OWORD *)uint64_t v15 = v4;
  v13[0] = v4;
  v13[1] = v4;
  v13[2] = v4;
  v13[3] = v4;
  v13[4] = v4;
  *(_OWORD *)long long v8 = v4;
  long long v9 = v4;
  long long v10 = v4;
  long long v11 = v4;
  long long v12 = v4;
  if ((int)strlen(__s) < 1) {
    __str[0] = 0;
  }
  else {
    snprintf(__str, 0x2BuLL, "%s ", __s);
  }
  __s[49] = 0;
  ConstructUri((char *)v13, __s + 44);
  int v7 = __s[156];
  uint64_t v6 = __s + 156;
  if (v7) {
    snprintf(v8, 0x50uLL, ";%s%s", "tag=", v6);
  }
  else {
    v8[0] = 0;
  }
  sprintf(a1, "%c: %s<%s>%s\r\n", 102, __str, (const char *)v13, v8);
  return 0;
}

uint64_t ConstructMaxForwardsHdr(char *a1, _DWORD *a2)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%s: %d\r\n", "Max-Forwards", *a2);
  return 0;
}

uint64_t ConstructReasonHdr(char *a1, uint64_t a2)
{
  if (!a2) {
    return 2148335617;
  }
  if (*(_DWORD *)a2) {
    sprintf(a1, "%s: %s; cause=%d\r\n", "Reason", (const char *)(a2 + 4), *(_DWORD *)(a2 + 48));
  }
  return 0;
}

uint64_t ConstructMinExpiresHdr(char *a1, _DWORD *a2)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%s: %d\r\n", "Min-Expires", *a2);
  return 0;
}

uint64_t ConstructReferToHdr(char *a1, char *__s)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!__s) {
    return 2148335617;
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v7[11] = v4;
  *(_OWORD *)CMTime __str = v4;
  *(_OWORD *)int v7 = v4;
  if ((int)strlen(__s) < 1) {
    __str[0] = 0;
  }
  else {
    snprintf(__str, 0x2BuLL, "%s ", __s);
  }
  sprintf(a1, "%s: %s<%s>\r\n", "Refer-To", __str, __s + 43);
  return 0;
}

uint64_t ConstructSubscriptionStateHdr(char *a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = 2148335617;
  memset(v16, 170, sizeof(v16));
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  memset(v13, 170, sizeof(v13));
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  memset(v10, 170, sizeof(v10));
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  if (a2)
  {
    char v8 = 0;
    char v11 = 0;
    char __str = 0;
    if ((*a2 - 1) >= 2)
    {
      if (*a2 != 3) {
        return result;
      }
      uint64_t v6 = a2[1];
      if (v6)
      {
        snprintf(&v11, 0x14uLL, ";%s%s", "reason=", g_apszReasons[v6]);
        int v7 = a2[1];
        if (v7 == 5 || v7 == 2) {
          snprintf(&v8, 0x18uLL, ";%s%d", "retry-after=", a2[3]);
        }
      }
      sprintf(a1, "%s: %s%s%s\r\n");
    }
    else
    {
      int v5 = a2[2];
      if (v5) {
        snprintf(&__str, 0x14uLL, ";%s%d", "expires=", v5);
      }
      sprintf(a1, "%s: %s%s\r\n");
    }
    return 0;
  }
  return result;
}

uint64_t ConstructToHdr(char *a1, char *__s)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!__s) {
    return 2148335617;
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[3] = v4;
  v13[4] = v4;
  v13[1] = v4;
  v13[2] = v4;
  long long v12 = v4;
  v13[0] = v4;
  *(_OWORD *)char v8 = v4;
  long long v9 = v4;
  long long v10 = v4;
  long long v11 = v4;
  if ((int)strlen(__s) >= 1) {
    snprintf(__str, 0x2BuLL, "%s ", __s);
  }
  __s[49] = 0;
  ConstructUri((char *)v13, __s + 44);
  int v6 = __s[156];
  int v5 = __s + 156;
  if (v6) {
    snprintf(v8, 0x50uLL, ";%s%s", "tag=", v5);
  }
  else {
    v8[0] = 0;
  }
  sprintf(a1, "%c: %s%s\r\n", 116, (const char *)v13, v8);
  return 0;
}

uint64_t ConstructUserAgentHdr(char *a1, const char *a2)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%s: %s\r\n", "User-Agent", a2);
  return 0;
}

uint64_t ConstructViaHdr(char *a1, int *a2, size_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  memset(__str, 170, 7);
  if (!a2) {
    return 2148335617;
  }
  *a1 = 0;
  if (*a2 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __source[14] = v8;
    __source[15] = v8;
    __source[12] = v8;
    __source[13] = v8;
    __source[10] = v8;
    __source[11] = v8;
    __source[8] = v8;
    __source[9] = v8;
    __source[6] = v8;
    __source[7] = v8;
    __source[4] = v8;
    __source[5] = v8;
    __source[2] = v8;
    __source[3] = v8;
    __source[0] = v8;
    __source[1] = v8;
    long long v19 = v8;
    long long v20 = v8;
    long long v21 = v8;
    long long v22 = v8;
    long long v23 = v8;
    long long v24 = v8;
    long long v25 = v8;
    long long v26 = v8;
    long long v27 = v8;
    long long v28 = v8;
    long long v17 = v8;
    long long v18 = v8;
    long long v15 = v8;
    long long v16 = v8;
    *(_OWORD *)int v14 = v8;
    do
    {
      if (LOWORD(a2[v6 + 13]) == 5060) {
        __str[0] = 0;
      }
      else {
        snprintf(__str, 7uLL, ":%d", LOWORD(a2[v6 + 13]));
      }
      LOBYTE(v19) = 0;
      long long v9 = &a2[v6];
      if (BYTE2(a2[v6 + 13]))
      {
        snprintf(v14, 0x50uLL, ";%s%s", "branch=", (const char *)&a2[v6 + 13] + 2);
        __strlcat_chk();
      }
      int v11 = *((unsigned __int8 *)v9 + 118);
      long long v10 = (char *)v9 + 118;
      if (v11)
      {
        snprintf(v14, 0x50uLL, ";%s%s", "received=", v10);
        __strlcat_chk();
      }
      if (a2[v6 + 2]) {
        snprintf((char *)__source, 0x100uLL, "%c: %s/%s [%s]%s%s\r\n", 118);
      }
      else {
        snprintf((char *)__source, 0x100uLL, "%c: %s/%s %s%s%s\r\n", 118);
      }
      strlcat(a1, (const char *)__source, a3);
      ++v7;
      v6 += 39;
    }
    while (v7 < *a2);
  }
  return 0;
}

uint64_t ConstructSKESeqHdr(char *a1, uint64_t a2)
{
  if (!a2) {
    return 2148335617;
  }
  sprintf(a1, "%s: %lu;%d\r\n", "SKESeq", *(void *)a2, *(_DWORD *)(a2 + 8));
  return 0;
}

uint64_t CreateAcceptHdr(void *a1, int a2)
{
  long long v4 = malloc_type_calloc(1uLL, 0xA0uLL, 0x1000040B8406A4EuLL);
  if (v4)
  {
    int v5 = v4;
    __strlcpy_chk();
    __strlcpy_chk();
    if (a2) {
      __strlcpy_chk();
    }
    uint64_t v6 = 0;
    *a1 = v5;
  }
  else
  {
    uint64_t v6 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAcceptHdr_cold_1();
      }
    }
  }
  return v6;
}

uint64_t CreateAllowHdr(void *a1, int a2)
{
  long long v4 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  if (v4)
  {
    for (int i = 1; i != 12; ++i)
    {
      if (a2) {
        BOOL v6 = 0;
      }
      else {
        BOOL v6 = i == 9;
      }
      int v7 = !v6;
      if (i != 6 && v7) {
        *v4 |= (1 << i);
      }
    }
    uint64_t v8 = 0;
    *a1 = v4;
  }
  else
  {
    uint64_t v8 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAllowHdr_cold_1();
      }
    }
  }
  return v8;
}

uint64_t CreateAllowEventsHdr(void *a1, int a2)
{
  long long v4 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0xFFFFFFFFLL;
    if (!a2) {
      uint64_t v6 = 4294967293;
    }
    *long long v4 = v6;
    *a1 = v4;
  }
  else
  {
    uint64_t v5 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAllowEventsHdr_cold_1();
      }
    }
  }
  return v5;
}

uint64_t CreateCallIDHdr(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x3CuLL, 0x1000040C2DCA394uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    __strlcpy_chk();
    uint64_t v4 = 0;
    *a1 = v3;
  }
  else
  {
    uint64_t v4 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateCallIDHdr_cold_1();
      }
    }
  }
  return v4;
}

uint64_t CreateContactHdr(void *a1, uint64_t a2, long long *a3, int a4, int a5)
{
  long long v10 = (char *)malloc_type_calloc(1uLL, 0xA4uLL, 0x10000409BFB62CCuLL);
  if (v10)
  {
    int v11 = v10;
    if (a2) {
      __strlcpy_chk();
    }
    uint64_t v12 = 0;
    long long v13 = *a3;
    long long v14 = a3[1];
    *(_OWORD *)(v11 + 76) = a3[2];
    *(_OWORD *)(v11 + 60) = v14;
    *(_OWORD *)(v11 + 44) = v13;
    long long v15 = a3[3];
    long long v16 = a3[4];
    long long v17 = a3[5];
    *(_OWORD *)(v11 + 140) = a3[6];
    *(_OWORD *)(v11 + 124) = v17;
    *(_OWORD *)(v11 + 108) = v16;
    *(_OWORD *)(v11 + 92) = v15;
    *((_DWORD *)v11 + 39) = a4;
    *((_DWORD *)v11 + 40) = a5;
    *a1 = v11;
  }
  else
  {
    uint64_t v12 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateContactHdr_cold_1();
      }
    }
  }
  return v12;
}

uint64_t CreateContentEncodingHdr(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    __strlcpy_chk();
    uint64_t v4 = 0;
    *a1 = v3;
  }
  else
  {
    uint64_t v4 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateContentEncodingHdr_cold_1();
      }
    }
  }
  return v4;
}

uint64_t CreateContentLengthHdr(void *a1, int a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    uint64_t v5 = 0;
    *uint64_t v4 = a2;
    *a1 = v4;
  }
  else
  {
    uint64_t v5 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateContentLengthHdr_cold_1();
      }
    }
  }
  return v5;
}

uint64_t CreateContentTypeHdr(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    __strlcpy_chk();
    uint64_t v4 = 0;
    *a1 = v3;
  }
  else
  {
    uint64_t v4 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateContentTypeHdr_cold_1();
      }
    }
  }
  return v4;
}

uint64_t CreateCSeqHdr(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040D9A13B51uLL);
  if (v6)
  {
    uint64_t v7 = 0;
    *(void *)uint64_t v6 = a2;
    double v6[2] = a3;
    *a1 = v6;
  }
  else
  {
    uint64_t v7 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateCSeqHdr_cold_1();
      }
    }
  }
  return v7;
}

uint64_t CreateExpiresHdr(void *a1, int a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    uint64_t v5 = 0;
    *uint64_t v4 = a2;
    *a1 = v4;
  }
  else
  {
    uint64_t v5 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateExpiresHdr_cold_1();
      }
    }
  }
  return v5;
}

uint64_t CreateFromHdr(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = (char *)malloc_type_calloc(1uLL, 0xDCuLL, 0x1000040E6B0F26EuLL);
  if (v6)
  {
    uint64_t v7 = v6;
    if (a2) {
      __strlcpy_chk();
    }
    long long v8 = *a3;
    long long v9 = a3[1];
    *(_OWORD *)(v7 + 76) = a3[2];
    *(_OWORD *)(v7 + 60) = v9;
    *(_OWORD *)(v7 + 44) = v8;
    long long v10 = a3[3];
    long long v11 = a3[4];
    long long v12 = a3[5];
    *(_OWORD *)(v7 + 140) = a3[6];
    *(_OWORD *)(v7 + 124) = v12;
    *(_OWORD *)(v7 + 108) = v11;
    *(_OWORD *)(v7 + 92) = v10;
    __strlcpy_chk();
    uint64_t v13 = 0;
    *a1 = v7;
  }
  else
  {
    uint64_t v13 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateFromHdr_cold_1();
      }
    }
  }
  return v13;
}

uint64_t CreateMaxForwardsHdr(void *a1, int a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    uint64_t v5 = 0;
    *uint64_t v4 = a2;
    *a1 = v4;
  }
  else
  {
    uint64_t v5 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateMaxForwardsHdr_cold_1();
      }
    }
  }
  return v5;
}

uint64_t CreateMinExpiresHdr(void *a1, int a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    uint64_t v5 = 0;
    *uint64_t v4 = a2;
    *a1 = v4;
  }
  else
  {
    uint64_t v5 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateMinExpiresHdr_cold_1();
      }
    }
  }
  return v5;
}

uint64_t CreateToHdr(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = (char *)malloc_type_calloc(1uLL, 0xDCuLL, 0x1000040E6B0F26EuLL);
  if (v6)
  {
    uint64_t v7 = v6;
    if (a2) {
      __strlcpy_chk();
    }
    long long v8 = *a3;
    long long v9 = a3[1];
    *(_OWORD *)(v7 + 76) = a3[2];
    *(_OWORD *)(v7 + 60) = v9;
    *(_OWORD *)(v7 + 44) = v8;
    long long v10 = a3[3];
    long long v11 = a3[4];
    long long v12 = a3[5];
    *(_OWORD *)(v7 + 140) = a3[6];
    *(_OWORD *)(v7 + 124) = v12;
    *(_OWORD *)(v7 + 108) = v11;
    *(_OWORD *)(v7 + 92) = v10;
    __strlcpy_chk();
    uint64_t v13 = 0;
    *a1 = v7;
  }
  else
  {
    uint64_t v13 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateToHdr_cold_1();
      }
    }
  }
  return v13;
}

uint64_t CreateUserAgentHdr(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x2BuLL, 0x100004056BB1370uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    __strlcpy_chk();
    uint64_t v4 = 0;
    *a1 = v3;
  }
  else
  {
    uint64_t v4 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateUserAgentHdr_cold_1();
      }
    }
  }
  return v4;
}

uint64_t CreateViaHdr(void *a1, uint64_t a2, int a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7)
{
  long long v11 = malloc_type_calloc(1uLL, 0x310uLL, 0x1000040F65B4EE0uLL);
  if (v11)
  {
    long long v12 = v11;
    *long long v11 = 1;
    __strlcpy_chk();
    v12[2] = a3;
    __strlcpy_chk();
    *((_WORD *)v12 + 26) = a5;
    __strlcpy_chk();
    if (a7) {
      __strlcpy_chk();
    }
    uint64_t v13 = 0;
    *a1 = v12;
  }
  else
  {
    uint64_t v13 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateViaHdr_cold_1();
      }
    }
  }
  return v13;
}

uint64_t CreateSKESeqHdr(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040D9A13B51uLL);
  if (v6)
  {
    uint64_t v7 = 0;
    *(void *)uint64_t v6 = a2;
    double v6[2] = a3;
    *a1 = v6;
  }
  else
  {
    uint64_t v7 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateSKESeqHdr_cold_1();
      }
    }
  }
  return v7;
}

uint64_t CreateReasonHdr(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  long long v8 = malloc_type_calloc(1uLL, 0x84uLL, 0x10000403AA91CE4uLL);
  if (v8)
  {
    long long v9 = v8;
    if (a2) {
      __strlcpy_chk();
    }
    if (a4) {
      __strlcpy_chk();
    }
    uint64_t v10 = 0;
    v9[12] = a3;
    *long long v9 = 1;
    *a1 = v9;
  }
  else
  {
    uint64_t v10 = 2148335619;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateReasonHdr_cold_1();
      }
    }
  }
  return v10;
}

uint64_t CopySipHeader(void *a1, const void *a2, unsigned int a3)
{
  uint64_t result = 2148335617;
  if (a1 && a2 && ((0x196FDFA8C559DuLL >> a3) & 1) == 0)
  {
    size_t v6 = SLODWORD((&g_aHeaders)[3 * a3 + 2]);
    uint64_t v7 = malloc_type_malloc(v6, 0x730DBFBCuLL);
    if (v7)
    {
      long long v8 = v7;
      memcpy(v7, a2, v6);
      uint64_t result = 0;
      *a1 = v8;
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          CopySipHeader_cold_1();
        }
      }
      return 2148335619;
    }
  }
  return result;
}

uint64_t DirectCopy(uint64_t a1, _DWORD *a2, uint64_t a3, int a4)
{
  *a2 = a4;
  return 0;
}

uint64_t _SipMsg_CompressWithZLib()
{
  return CompressionUtils_CompressWithZLib();
}

uint64_t _SipMsg_DecompressWithZLib()
{
  return CompressionUtils_DecompressWithZlib();
}

uint64_t _SipMsg_CompressWithGZip(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4105950](a1, *a2, a2, a3, a4);
}

uint64_t _SipMsg_DecompressWithGZip(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4105960](a1, *a2, a2, a3, a4);
}

uint64_t ReplaceKeyword(const char *a1, uint64_t a2, char *__s, const char *a4, uint64_t a5)
{
  uint64_t v36 = a4;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int v9 = strlen(__s);
  int v10 = a2 - 1;
  if ((int)a2 >= 1)
  {
    int v11 = v9;
    uint64_t v12 = 0;
    int64_t v13 = 0;
    int64_t v14 = (int)a2;
    uint64_t v15 = v9;
    long long v16 = (char *)a1;
    while (*v16)
    {
      long long v16 = strnstr(v16, __s, (int)a2 - v13);
      if (!v16) {
        break;
      }
      v16 += v15;
      int64_t v13 = v16 - a1;
      uint64_t v12 = (v12 - 1);
      if (v16 - a1 >= (int)a2) {
        goto LABEL_8;
      }
    }
    if (!v12) {
      return v12;
    }
LABEL_8:
    uint64_t v12 = -(int)v12;
    __int16 v35 = &v33;
    uint64_t v33 = a2;
    MEMORY[0x1F4188790](v16);
    long long v18 = (char *)&v33 - ((v17 + 15) & 0x1FFFFFFF0);
    memset(v18, 170, v17);
    int v19 = strnlen(v36, a5 - 1);
    if (v19 <= v11) {
      signed int v20 = 0;
    }
    else {
      signed int v20 = v19 - v11;
    }
    if ((int)(0x7FFFFFFF / v12) > v20 && v10 - v20 * (int)v12 >= (int)strnlen(a1, v10))
    {
      if (!*a1) {
        return v12;
      }
      uint64_t v34 = v19;
      long long v24 = a1;
      int64_t v25 = v14 + v19;
      while (v14 > v24 - a1)
      {
        long long v26 = strnstr(v24, __s, v14 - (v24 - a1));
        if (v26)
        {
          long long v27 = v26;
          strlcpy(v18, &v26[v15], v14);
          strlcpy(v27, v36, v14 - (v27 - a1));
          long long v24 = &v27[v34];
          strlcpy(&v27[v34], v18, v25 - (v27 - a1));
          if (*v24) {
            continue;
          }
        }
        return v12;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        return 0;
      }
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      int v29 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)pthread_attr_t buf = 136316162;
      uint64_t v38 = v28;
      __int16 v39 = 2080;
      int v40 = "ReplaceKeyword";
      __int16 v41 = 1024;
      int v42 = 261;
      __int16 v43 = 1024;
      int v44 = v33;
      __int16 v45 = 2048;
      uint64_t v46 = (char *)(v24 - a1);
      uint64_t v30 = "SIP [%s] %s:%d Error Replacing Keyword - MaxSize:(%d) < (p - pszStr):(%ld)";
      int v31 = v29;
      uint32_t v32 = 44;
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
        return 0;
      }
      uint64_t v21 = VRTraceErrorLogLevelToCSTR();
      long long v22 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)pthread_attr_t buf = 136316418;
      uint64_t v38 = v21;
      __int16 v39 = 2080;
      int v40 = "ReplaceKeyword";
      __int16 v41 = 1024;
      int v42 = 255;
      __int16 v43 = 1024;
      int v44 = v33;
      __int16 v45 = 2080;
      uint64_t v46 = __s;
      __int16 v47 = 2080;
      __int16 v48 = v36;
      uint64_t v30 = "SIP [%s] %s:%d Destination buffer size '%d' is too small to handle replacement '%s'->'%s'";
      int v31 = v22;
      uint32_t v32 = 54;
    }
    _os_log_error_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_ERROR, v30, buf, v32);
    return 0;
  }
  return 0;
}

uint64_t CreateInvite(unint64_t *a1, int a2, int a3, uint64_t a4, long long *a5, long long *a6, long long *a7, long long *a8, unsigned __int16 a9, unsigned __int16 a10, const char *a11, const char *a12, char *__s, int a14, int a15, int a16)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v107 + 12) = v22;
  long long v106 = v22;
  v107[0] = v22;
  long long v104 = v22;
  *(_OWORD *)uint64_t v105 = v22;
  long long v102 = v22;
  long long v103 = v22;
  *(_OWORD *)__int16 v101 = v22;
  v100[2] = v22;
  v100[3] = v22;
  v100[0] = v22;
  v100[1] = v22;
  *(_OWORD *)((char *)v99 + 11) = v22;
  *(_OWORD *)char __str = v22;
  v99[0] = v22;
  *(_OWORD *)((char *)v97 + 11) = v22;
  *(_OWORD *)int v96 = v22;
  v97[0] = v22;
  long long v94 = v22;
  long long v95 = v22;
  *(_OWORD *)&v92[48] = v22;
  long long v93 = v22;
  *(_OWORD *)&v92[16] = v22;
  *(_OWORD *)&v92[32] = v22;
  long long v91 = v22;
  *(_OWORD *)unint64_t v92 = v22;
  long long v89 = v22;
  long long v90 = v22;
  *(_OWORD *)&v88[32] = v22;
  *(_OWORD *)&v88[48] = v22;
  *(_OWORD *)long long v88 = v22;
  *(_OWORD *)&v88[16] = v22;
  v86[2] = v22;
  long long v87 = v22;
  v86[0] = v22;
  v86[1] = v22;
  v85[1] = v22;
  v85[2] = v22;
  v85[0] = v22;
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v23 = CreateGenericSIPMsg(&v72, a2, a9, a10, a16 != 0);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  uint64_t v70 = a1;
  unint64_t v24 = v72;
  unint64_t v25 = v72 + 696;
  uint64_t v26 = *(void *)(a4 + 32);
  long long v27 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v72 + 696) = *(_OWORD *)a4;
  *(_OWORD *)(v25 + 16) = v27;
  *(void *)(v24 + 728) = v26;
  long long v29 = *a5;
  long long v28 = a5[1];
  *(void *)(v24 + 768) = *((void *)a5 + 4);
  *(_OWORD *)(v24 + 736) = v29;
  *(_OWORD *)(v24 + 752) = v28;
  long long v31 = *a6;
  long long v30 = a6[1];
  *(void *)(v24 + 808) = *((void *)a6 + 4);
  *(_OWORD *)(v24 + 776) = v31;
  *(_OWORD *)(v24 + 792) = v30;
  long long v33 = *a7;
  long long v32 = a7[1];
  *(void *)(v24 + 848) = *((void *)a7 + 4);
  *(_OWORD *)(v24 + 816) = v33;
  *(_OWORD *)(v24 + 832) = v32;
  long long v35 = *a8;
  long long v34 = a8[1];
  *(void *)(v24 + 888) = *((void *)a8 + 4);
  *(_OWORD *)(v24 + 856) = v35;
  *(_OWORD *)(v24 + 872) = v34;
  if (IsIPPORTValid())
  {
    long long v36 = *a8;
    long long v37 = a8[1];
    *(void *)(v24 + 848) = *((void *)a8 + 4);
    *(_OWORD *)(v24 + 816) = v36;
    *(_OWORD *)(v24 + 832) = v37;
    *(void *)&v84[14] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v83 = v36;
    *(_OWORD *)long long v84 = v36;
    long long v82 = v36;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v38 = VRTraceErrorLogLevelToCSTR();
      __int16 v39 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = IPPORTToStringWithSize();
        *(_DWORD *)pthread_attr_t buf = 136316418;
        *(void *)&uint8_t buf[4] = v38;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "CreateInvite";
        __int16 v74 = 1024;
        int v75 = 304;
        __int16 v76 = 2080;
        uint64_t v77 = v40;
        __int16 v78 = 1024;
        int v79 = a9;
        __int16 v80 = 1024;
        int v81 = a10;
        _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Relay external addr [%s] type %u channel %x", buf, 0x32u);
      }
    }
  }
  v92[4] = 0;
  strcpy(v92, "sip");
  *(_OWORD *)&v92[5] = *(_OWORD *)"user";
  memset(&v92[21], 0, 35);
  *(_DWORD *)&v92[56] = *(_DWORD *)a4 & 1;
  IPToString();
  WORD2(v95) = *(_WORD *)(a4 + 36);
  strncpy((char *)&v95 + 6, DEFAULT_TRANSPORT, 4uLL);
  HIDWORD(v95) = 0;
  strcpy(v88, "sip");
  v88[4] = 0;
  *(_OWORD *)&v88[5] = *(_OWORD *)"user";
  memset(&v88[21], 0, 35);
  *(_DWORD *)&v88[56] = *(_DWORD *)a5 & 1;
  IPToString();
  WORD2(v91) = *((_WORD *)a5 + 18);
  strncpy((char *)&v91 + 6, DEFAULT_TRANSPORT, 4uLL);
  HIDWORD(v91) = 0;
  LODWORD(v85[0]) = 7367027;
  BYTE4(v85[0]) = 0;
  __strlcpy_chk();
  DWORD2(v86[0]) = *(_DWORD *)a6 & 1;
  IPToString();
  WORD2(v87) = *((_WORD *)a6 + 18);
  strncpy((char *)&v87 + 6, DEFAULT_TRANSPORT, 4uLL);
  HIDWORD(v87) = 0;
  *(void *)(v24 + 4) = 0x100000001;
  long long v41 = *(_OWORD *)v88;
  long long v42 = *(_OWORD *)&v88[16];
  *(_OWORD *)(v24 + 44) = *(_OWORD *)&v88[32];
  *(_OWORD *)(v24 + 28) = v42;
  *(_OWORD *)(v24 + 12) = v41;
  long long v43 = *(_OWORD *)&v88[48];
  long long v44 = v89;
  long long v45 = v90;
  *(_OWORD *)(v24 + 108) = v91;
  *(_OWORD *)(v24 + 92) = v45;
  *(_OWORD *)(v24 + 76) = v44;
  *(_OWORD *)(v24 + 60) = v43;
  *(void *)long long v84 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v43 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v82 = v43;
  long long v83 = v43;
  MakeAddressID();
  int v47 = *(unsigned __int16 *)(a4 + 36);
  memset(buf, 170, 16);
  gettimeofday((timeval *)buf, 0);
  unint64_t v48 = 10000000 * *(void *)buf + 10 * *(int *)&buf[8] + 122192928000000000;
  if (GenerateUUID_oldi)
  {
    __int16 v49 = GenerateUUID_wClockSeq;
    if (GenerateUUID_oldi < v48) {
      goto LABEL_13;
    }
    __int16 v49 = GenerateUUID_wClockSeq + 1;
  }
  else
  {
    __int16 v49 = vcvtd_n_s64_f64((double)hwrandom() * 4.65661287e-10, 0x10uLL);
  }
  GenerateUUID_wClockSeq = v49;
LABEL_13:
  GenerateUUID_oldint i = v48;
  __int16 v50 = v49 | 0x8000;
  int v51 = hwrandom();
  __sprintf_chk(v105, 0, 0x3CuLL, "%08x-%04x-%04x-%04x-%08x%04x", v48, WORD2(v48), HIWORD(v48) & 0xFFF | 0x1000, v50 & 0xBFFF, v51 | 0x80000000, v47);
  __strlcat_chk();
  __strlcat_chk();
  uint64_t v52 = CreateCallIDHdr(&v71);
  if ((v52 & 0x80000000) != 0)
  {
    uint64_t v46 = v52;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_1();
      }
    }
    goto LABEL_70;
  }
  *(void *)(v24 + 208) = v71;
  uint64_t v53 = CreateContactHdr(&v71, 0, v85, a14, a15);
  if ((v53 & 0x80000000) != 0)
  {
    uint64_t v46 = v53;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_2();
      }
    }
    goto LABEL_70;
  }
  *(void *)(v24 + 224) = v71;
  uint64_t v54 = CreateContentLengthHdr(&v71, -1);
  if ((v54 & 0x80000000) != 0)
  {
    uint64_t v46 = v54;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_3();
      }
    }
    goto LABEL_70;
  }
  *(void *)(v24 + 256) = v71;
  uint64_t v55 = CreateContentTypeHdr(&v71);
  if ((v55 & 0x80000000) != 0)
  {
    uint64_t v46 = v55;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_4();
      }
    }
    goto LABEL_70;
  }
  *(void *)(v24 + 264) = v71;
  uint64_t v56 = CreateCSeqHdr(&v71, 1, 1);
  if ((v56 & 0x80000000) != 0)
  {
    uint64_t v46 = v56;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_5();
      }
    }
    goto LABEL_70;
  }
  *(void *)(v24 + 272) = v71;
  if (a11)
  {
    if (*a11 && *a11 != 34) {
      snprintf(__str, 0x2BuLL, "\"%s\"", a11);
    }
    else {
      __strlcpy_chk();
    }
  }
  else
  {
    *(_OWORD *)char __str = *(_OWORD *)"Anonymous";
    memset(v99, 0, 27);
  }
  unsigned int v57 = hwrandom();
  __sprintf_chk(v101, 0, 0x40uLL, "%lu", v57);
  uint64_t v58 = CreateFromHdr(&v71, (uint64_t)__str, (long long *)v92);
  if ((v58 & 0x80000000) != 0)
  {
    uint64_t v46 = v58;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_6();
      }
    }
    goto LABEL_70;
  }
  *(void *)(v24 + 312) = v71;
  uint64_t v59 = CreateMaxForwardsHdr(&v71, 70);
  if ((v59 & 0x80000000) != 0)
  {
    uint64_t v46 = v59;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_7();
      }
    }
    goto LABEL_70;
  }
  *(void *)(v24 + 328) = v71;
  if (a12)
  {
    if (*a12 && *a12 != 34) {
      snprintf(v96, 0x2BuLL, "\"%s\"", a12);
    }
    else {
      __strlcpy_chk();
    }
  }
  else
  {
    *(_OWORD *)int v96 = *(_OWORD *)"Anonymous";
    memset(v97, 0, 27);
  }
  uint64_t v60 = CreateToHdr(&v71, (uint64_t)v96, (long long *)v88);
  if ((v60 & 0x80000000) != 0)
  {
    uint64_t v46 = v60;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_8();
      }
    }
    goto LABEL_70;
  }
  *(void *)(v24 + 480) = v71;
  GenerateBranch((char *)v100);
  uint64_t v61 = CreateViaHdr(&v71, (uint64_t)DEFAULT_TRANSPORT, SDWORD2(v86[0]), (uint64_t)v86 + 12, SWORD2(v87), (uint64_t)v100, 0);
  if ((v61 & 0x80000000) != 0)
  {
    uint64_t v46 = v61;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_9();
      }
    }
    goto LABEL_70;
  }
  *(void *)(v24 + 504) = v71;
  uint64_t v62 = CreateUserAgentHdr(&v71);
  if ((v62 & 0x80000000) != 0)
  {
    uint64_t v46 = v62;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateInvite_cold_10();
      }
    }
LABEL_70:
    FreeSipMsg((void *)v24);
    return v46;
  }
  *(void *)(v24 + 496) = v71;
  if (!__s) {
    goto LABEL_60;
  }
  size_t v63 = strlen(__s);
  if (!v63) {
    goto LABEL_60;
  }
  uint64_t v64 = (char *)malloc_type_malloc(v63 + 1, 0x5D3EA60AuLL);
  *(void *)(v24 + 552) = v64;
  if (v64)
  {
    uint64_t v65 = v64;
    size_t v66 = strlen(__s);
    strncpy(v65, __s, v66 + 1);
LABEL_60:
    uint64_t v46 = 0;
    *uint64_t v70 = v24;
    return v46;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v68 = VRTraceErrorLogLevelToCSTR();
    uint64_t v69 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      CreateInvite_cold_11(v68, __s, v69);
    }
  }
  FreeSipMsg((void *)v24);
  return 2148401155;
}

uint64_t CreateGenericSIPMsg(void *a1, int a2, __int16 a3, __int16 a4, int a5)
{
  int v10 = malloc_type_calloc(1uLL, 0x400uLL, 0x10B2040CFE7BBC5uLL);
  if (v10)
  {
    uint64_t v11 = 0;
    v10[143] = a2;
    *((_WORD *)v10 + 284) = a3;
    *((_WORD *)v10 + 285) = a4;
    v10[252] = a5;
    *((void *)v10 + 127) = SIPCompressCallback;
    *a1 = v10;
  }
  else
  {
    uint64_t v11 = 2148401155;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateGenericSIPMsg_cold_1();
      }
    }
  }
  return v11;
}

uint64_t SIPCompressCallback(unsigned int a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a6 + 240))
  {
    uint64_t v6 = 2148401196;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      long long v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unint64_t v24 = 136315650;
        *(void *)&v24[4] = v7;
        __int16 v25 = 2080;
        uint64_t v26 = "SIPCompressCallback";
        __int16 v27 = 1024;
        int v28 = 162;
        int v9 = "SIP [%s] %s:%d SIPCompressCallback: already compressed.";
        int v10 = v8;
        uint32_t v11 = 28;
LABEL_5:
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v9, v24, v11);
      }
    }
  }
  else
  {
    uint64_t v6 = 2148401196;
    if (a1 - 3 < 0xFFFFFFFE) {
      return 2148401184;
    }
    int v12 = a5;
    if ((int)a5 > 100)
    {
      size_t v17 = (char *)&g_aCompressions + 32 * a1;
      uint64_t ContentEncodingHdr = (*((uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))v17 + 2))(a2, a3, a4, a5);
      if ((ContentEncodingHdr & 0x80000000) == 0)
      {
        float v19 = (double)strlen(v17 + 4) + 5.0;
        if ((float)((float)((float)*a3 + v19) / (float)v12) >= 1.0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v20 = VRTraceErrorLogLevelToCSTR();
            uint64_t v21 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v22 = *a3;
              *(_DWORD *)unint64_t v24 = 136316162;
              *(void *)&v24[4] = v20;
              __int16 v25 = 2080;
              uint64_t v26 = "SIPCompressCallback";
              __int16 v27 = 1024;
              int v28 = 182;
              __int16 v29 = 1024;
              int v30 = v12;
              __int16 v31 = 1024;
              int v32 = v22;
              int v9 = "SIP [%s] %s:%d SIPCompressCallback: Not worth compressing %d --> %d";
              int v10 = v21;
              uint32_t v11 = 40;
              goto LABEL_5;
            }
          }
          return v6;
        }
        *(void *)unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t ContentEncodingHdr = CreateContentEncodingHdr(v24);
        if ((ContentEncodingHdr & 0x80000000) == 0)
        {
          uint64_t v6 = 0;
          *(void *)(a6 + 240) = *(void *)v24;
          return v6;
        }
      }
      return ContentEncodingHdr;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      int64_t v14 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unint64_t v24 = 136315906;
        *(void *)&v24[4] = v13;
        __int16 v25 = 2080;
        uint64_t v26 = "SIPCompressCallback";
        __int16 v27 = 1024;
        int v28 = 171;
        __int16 v29 = 1024;
        int v30 = v12;
        int v9 = "SIP [%s] %s:%d SIPCompressCallback: too small to compress %d";
        int v10 = v14;
        uint32_t v11 = 34;
        goto LABEL_5;
      }
    }
  }
  return v6;
}

void FreeSipMsg(void *a1)
{
  if (a1)
  {
    for (uint64_t i = 17; i != 69; ++i)
    {
      uint64_t v3 = (void *)a1[i];
      if (v3) {
        free(v3);
      }
    }
    uint64_t v4 = (void *)a1[69];
    if (v4) {
      free(v4);
    }
    uint64_t v5 = (void *)a1[124];
    if (v5) {
      free(v5);
    }
    free(a1);
  }
}

uint64_t GenerateTag(char *a1)
{
  unsigned int v2 = hwrandom();
  return sprintf(a1, "%lu", v2);
}

uint64_t GenerateBranch(char *a1)
{
  int v2 = hwrandom();
  int v3 = hwrandom();
  return sprintf(a1, "z9hG4bK%08x%08x", v2, v3);
}

uint64_t CreateAck(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 2148401186;
  }
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = CreateGenericSIPMsg(&v41, *(_DWORD *)(a2 + 572), *(_WORD *)(a2 + 568), *(_WORD *)(a2 + 570), *(_DWORD *)(a2 + 1008));
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  unint64_t v7 = v41;
  *(void *)(v41 + 4) = 0x200000001;
  uint64_t v8 = *(void *)(a3 + 224);
  if (v8) {
    int v9 = (long long *)(v8 + 44);
  }
  else {
    int v9 = (long long *)(a2 + 12);
  }
  long long v10 = *v9;
  long long v11 = v9[1];
  *(_OWORD *)(v7 + 44) = v9[2];
  *(_OWORD *)(v7 + 28) = v11;
  *(_OWORD *)(v7 + 12) = v10;
  long long v12 = v9[3];
  long long v13 = v9[4];
  long long v14 = v9[5];
  *(_OWORD *)(v7 + 108) = v9[6];
  *(_OWORD *)(v7 + 92) = v14;
  *(_OWORD *)(v7 + 76) = v13;
  *(_OWORD *)(v7 + 60) = v12;
  long long v15 = *(_OWORD *)(a2 + 696);
  long long v16 = *(_OWORD *)(a2 + 712);
  *(void *)(v7 + 728) = *(void *)(a2 + 728);
  *(_OWORD *)(v7 + 696) = v15;
  *(_OWORD *)(v7 + 712) = v16;
  long long v17 = *(_OWORD *)(a2 + 736);
  long long v18 = *(_OWORD *)(a2 + 752);
  *(void *)(v7 + 768) = *(void *)(a2 + 768);
  *(_OWORD *)(v7 + 736) = v17;
  *(_OWORD *)(v7 + 752) = v18;
  long long v19 = *(_OWORD *)(a2 + 776);
  long long v20 = *(_OWORD *)(a2 + 792);
  *(void *)(v7 + 808) = *(void *)(a2 + 808);
  *(_OWORD *)(v7 + 776) = v19;
  *(_OWORD *)(v7 + 792) = v20;
  long long v21 = *(_OWORD *)(a2 + 816);
  long long v22 = *(_OWORD *)(a2 + 832);
  *(void *)(v7 + 848) = *(void *)(a2 + 848);
  *(_OWORD *)(v7 + 816) = v21;
  *(_OWORD *)(v7 + 832) = v22;
  long long v23 = *(_OWORD *)(a2 + 856);
  long long v24 = *(_OWORD *)(a2 + 872);
  *(void *)(v7 + 888) = *(void *)(a2 + 888);
  *(_OWORD *)(v7 + 856) = v23;
  *(_OWORD *)(v7 + 872) = v24;
  uint64_t v25 = CopySipHeader(&v42, *(const void **)(a2 + 208), 9u);
  if ((v25 & 0x80000000) != 0)
  {
    uint64_t v39 = v25;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAck_cold_1();
      }
    }
    goto LABEL_45;
  }
  *(void *)(v7 + 208) = v42;
  uint64_t v26 = CopySipHeader(&v42, *(const void **)(a2 + 312), 0x16u);
  if ((v26 & 0x80000000) != 0)
  {
    uint64_t v39 = v26;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAck_cold_2();
      }
    }
    goto LABEL_45;
  }
  *(void *)(v7 + 312) = v42;
  uint64_t v27 = CopySipHeader(&v42, *(const void **)(a3 + 480), 0x2Bu);
  if ((v27 & 0x80000000) != 0)
  {
    uint64_t v39 = v27;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAck_cold_3();
      }
    }
    goto LABEL_45;
  }
  unint64_t v28 = v42;
  *(void *)(v7 + 480) = v42;
  uint64_t v29 = *(void *)(a2 + 480);
  int v31 = *(unsigned __int8 *)(v29 + 156);
  int v30 = (char *)(v29 + 156);
  if (!v31) {
    strncpy(v30, (const char *)(v28 + 156), 0x40uLL);
  }
  uint64_t v32 = CopySipHeader(&v42, *(const void **)(a2 + 504), 0x2Eu);
  if ((v32 & 0x80000000) != 0)
  {
    uint64_t v39 = v32;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAck_cold_4();
      }
    }
    goto LABEL_45;
  }
  if ((*(_DWORD *)(a3 + 8) & 0xFFFFFFFE) == 6)
  {
    *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v43[2] = v33;
    v43[3] = v33;
    v43[0] = v33;
    v43[1] = v33;
    GenerateBranch((char *)v43);
    __strlcpy_chk();
  }
  *(void *)(v7 + 504) = v42;
  uint64_t v34 = CopySipHeader(&v42, *(const void **)(a2 + 272), 0x11u);
  if ((v34 & 0x80000000) != 0)
  {
    uint64_t v39 = v34;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAck_cold_5();
      }
    }
    goto LABEL_45;
  }
  unint64_t v35 = v42;
  *(_DWORD *)(v42 + 8) = 2;
  *(void *)(v7 + 272) = v35;
  uint64_t v36 = CreateUserAgentHdr(&v42);
  if ((v36 & 0x80000000) != 0)
  {
    uint64_t v39 = v36;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAck_cold_6();
      }
    }
    goto LABEL_45;
  }
  *(void *)(v7 + 496) = v42;
  uint64_t v37 = CreateContentLengthHdr(&v42, -1);
  if ((v37 & 0x80000000) != 0)
  {
    uint64_t v39 = v37;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAck_cold_7();
      }
    }
    goto LABEL_45;
  }
  *(void *)(v7 + 256) = v42;
  uint64_t v38 = CreateMaxForwardsHdr(&v42, 70);
  if ((v38 & 0x80000000) != 0)
  {
    uint64_t v39 = v38;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateAck_cold_8();
      }
    }
LABEL_45:
    FreeSipMsg((void *)v7);
    return v39;
  }
  uint64_t v39 = 0;
  *(void *)(v7 + 328) = v42;
  *a1 = v7;
  return v39;
}

uint64_t CreateCancel(void *a1, uint64_t a2)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  v31[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x10B2040CFE7BBC5uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    *(void *)(v4 + 4) = 0x500000001;
    if (a2)
    {
      *((_DWORD *)v4 + 143) = *(_DWORD *)(a2 + 572);
      *((_DWORD *)v4 + 142) = *(_DWORD *)(a2 + 568);
      *((_DWORD *)v4 + 252) = *(_DWORD *)(a2 + 1008);
      *((void *)v4 + 127) = SIPCompressCallback;
      long long v6 = *(_OWORD *)(a2 + 12);
      long long v7 = *(_OWORD *)(a2 + 28);
      *(_OWORD *)(v4 + 44) = *(_OWORD *)(a2 + 44);
      *(_OWORD *)(v4 + 28) = v7;
      *(_OWORD *)(v4 + 12) = v6;
      long long v8 = *(_OWORD *)(a2 + 60);
      long long v9 = *(_OWORD *)(a2 + 76);
      long long v10 = *(_OWORD *)(a2 + 92);
      *(_OWORD *)(v4 + 108) = *(_OWORD *)(a2 + 108);
      *(_OWORD *)(v4 + 92) = v10;
      *(_OWORD *)(v4 + 76) = v9;
      *(_OWORD *)(v4 + 60) = v8;
      long long v11 = *(_OWORD *)(a2 + 696);
      long long v12 = *(_OWORD *)(a2 + 712);
      *((void *)v4 + 91) = *(void *)(a2 + 728);
      *(_OWORD *)(v4 + 696) = v11;
      *(_OWORD *)(v4 + 712) = v12;
      long long v13 = *(_OWORD *)(a2 + 736);
      long long v14 = *(_OWORD *)(a2 + 752);
      *((void *)v4 + 96) = *(void *)(a2 + 768);
      *((_OWORD *)v4 + 46) = v13;
      *((_OWORD *)v4 + 47) = v14;
      long long v15 = *(_OWORD *)(a2 + 776);
      long long v16 = *(_OWORD *)(a2 + 792);
      *((void *)v4 + 101) = *(void *)(a2 + 808);
      *(_OWORD *)(v4 + 776) = v15;
      *(_OWORD *)(v4 + 792) = v16;
      long long v17 = *(_OWORD *)(a2 + 816);
      long long v18 = *(_OWORD *)(a2 + 832);
      *((void *)v4 + 106) = *(void *)(a2 + 848);
      *((_OWORD *)v4 + 51) = v17;
      *((_OWORD *)v4 + 52) = v18;
      long long v19 = *(_OWORD *)(a2 + 856);
      long long v20 = *(_OWORD *)(a2 + 872);
      *((void *)v4 + 111) = *(void *)(a2 + 888);
      *(_OWORD *)(v4 + 856) = v19;
      *(_OWORD *)(v4 + 872) = v20;
      uint64_t v21 = CopySipHeader(v31, *(const void **)(a2 + 208), 9u);
      if ((v21 & 0x80000000) != 0)
      {
        uint64_t v29 = v21;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            CreateCancel_cold_2();
          }
        }
      }
      else
      {
        v5[26] = v31[0];
        uint64_t CSeqHdr = CreateCSeqHdr(v31, **(void **)(a2 + 272), 5);
        if ((CSeqHdr & 0x80000000) != 0)
        {
          uint64_t v29 = CSeqHdr;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              CreateCancel_cold_3();
            }
          }
        }
        else
        {
          v5[34] = v31[0];
          uint64_t v23 = CopySipHeader(v31, *(const void **)(a2 + 312), 0x16u);
          if ((v23 & 0x80000000) != 0)
          {
            uint64_t v29 = v23;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                CreateCancel_cold_4();
              }
            }
          }
          else
          {
            v5[39] = v31[0];
            uint64_t v24 = CopySipHeader(v31, *(const void **)(a2 + 480), 0x2Bu);
            if ((v24 & 0x80000000) != 0)
            {
              uint64_t v29 = v24;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  CreateCancel_cold_5();
                }
              }
            }
            else
            {
              v5[60] = v31[0];
              uint64_t v25 = CopySipHeader(v31, *(const void **)(a2 + 504), 0x2Eu);
              if ((v25 & 0x80000000) != 0)
              {
                uint64_t v29 = v25;
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    CreateCancel_cold_6();
                  }
                }
              }
              else
              {
                v5[63] = v31[0];
                uint64_t UserAgentHdr = CreateUserAgentHdr(v31);
                if ((UserAgentHdr & 0x80000000) != 0)
                {
                  uint64_t v29 = UserAgentHdr;
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      CreateCancel_cold_7();
                    }
                  }
                }
                else
                {
                  v5[62] = v31[0];
                  uint64_t ContentLengthHdr = CreateContentLengthHdr(v31, -1);
                  if ((ContentLengthHdr & 0x80000000) != 0)
                  {
                    uint64_t v29 = ContentLengthHdr;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        CreateCancel_cold_8();
                      }
                    }
                  }
                  else
                  {
                    v5[32] = v31[0];
                    uint64_t MaxForwardsHdr = CreateMaxForwardsHdr(v31, 70);
                    if ((MaxForwardsHdr & 0x80000000) == 0)
                    {
                      uint64_t v29 = 0;
                      v5[41] = v31[0];
LABEL_16:
                      *a1 = v5;
                      return v29;
                    }
                    uint64_t v29 = MaxForwardsHdr;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        CreateCancel_cold_9();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      FreeSipMsg(v5);
      return v29;
    }
    uint64_t v29 = 0;
    goto LABEL_16;
  }
  uint64_t v29 = 2148401155;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      CreateCancel_cold_1();
    }
  }
  return v29;
}

uint64_t CreateBye(unint64_t *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46[2] = v10;
  v46[3] = v10;
  v46[0] = v10;
  v46[1] = v10;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  v44[0] = v10;
  v44[1] = v10;
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  memset(__b, 170, sizeof(__b));
  uint64_t v11 = DLGetData(a2, (uint64_t)__b);
  if ((v11 & 0x80000000) == 0)
  {
    unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v12 = CreateGenericSIPMsg(&v41, SHIDWORD(__b[0]), __b[3], SWORD1(__b[3]), a5 != 0);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    DLIncreaseLocalSeq(a2, &v42);
    unint64_t v13 = v41;
    *(void *)(v41 + 4) = 0x400000001;
    if (*(_DWORD *)((char *)&__b[62] + 6) == 5260116) {
      long long v14 = (long long *)&__b[97];
    }
    else {
      long long v14 = (long long *)&__b[83];
    }
    long long v15 = *v14;
    long long v16 = v14[1];
    *(_OWORD *)(v13 + 44) = v14[2];
    *(_OWORD *)(v13 + 28) = v16;
    *(_OWORD *)(v13 + 12) = v15;
    long long v17 = v14[3];
    long long v18 = v14[4];
    long long v19 = v14[5];
    *(_OWORD *)(v13 + 108) = v14[6];
    *(_OWORD *)(v13 + 92) = v19;
    *(_OWORD *)(v13 + 76) = v18;
    *(_OWORD *)(v13 + 60) = v17;
    long long v20 = *(_OWORD *)((char *)&__b[5] + 4);
    *(_OWORD *)(v13 + 696) = *(_OWORD *)((char *)&__b[3] + 4);
    *(_OWORD *)(v13 + 712) = v20;
    *(void *)(v13 + 728) = *(void *)((char *)&__b[7] + 4);
    long long v21 = *(_OWORD *)((char *)&__b[8] + 4);
    long long v22 = *(_OWORD *)((char *)&__b[10] + 4);
    *(void *)(v13 + 768) = *(void *)((char *)&__b[12] + 4);
    *(_OWORD *)(v13 + 736) = v21;
    *(_OWORD *)(v13 + 752) = v22;
    long long v23 = *(_OWORD *)((char *)&__b[13] + 4);
    long long v24 = *(_OWORD *)((char *)&__b[15] + 4);
    *(void *)(v13 + 808) = *(void *)((char *)&__b[17] + 4);
    *(_OWORD *)(v13 + 776) = v23;
    *(_OWORD *)(v13 + 792) = v24;
    long long v25 = *(_OWORD *)((char *)&__b[18] + 4);
    long long v26 = *(_OWORD *)((char *)&__b[20] + 4);
    *(void *)(v13 + 848) = *(void *)((char *)&__b[22] + 4);
    *(_OWORD *)(v13 + 816) = v25;
    *(_OWORD *)(v13 + 832) = v26;
    long long v27 = *(_OWORD *)((char *)&__b[23] + 4);
    long long v28 = *(_OWORD *)((char *)&__b[25] + 4);
    *(void *)(v13 + 888) = *(void *)((char *)&__b[27] + 4);
    *(_OWORD *)(v13 + 856) = v27;
    *(_OWORD *)(v13 + 872) = v28;
    uint64_t v29 = CreateCallIDHdr(&v40);
    if ((v29 & 0x80000000) != 0)
    {
      uint64_t v38 = v29;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          CreateBye_cold_2();
        }
      }
    }
    else
    {
      *(void *)(v13 + 208) = v40;
      uint64_t v30 = CreateCSeqHdr(&v40, v42, 4);
      if ((v30 & 0x80000000) != 0)
      {
        uint64_t v38 = v30;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            CreateBye_cold_3();
          }
        }
      }
      else
      {
        *(void *)(v13 + 272) = v40;
        uint64_t v31 = CreateFromHdr(&v40, (uint64_t)&__b[36], (long long *)&__b[69]);
        if ((v31 & 0x80000000) != 0)
        {
          uint64_t v38 = v31;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              CreateBye_cold_4();
            }
          }
        }
        else
        {
          *(void *)(v13 + 312) = v40;
          uint64_t v32 = CreateToHdr(&v40, (uint64_t)&__b[41] + 3, (long long *)&__b[83]);
          if ((v32 & 0x80000000) != 0)
          {
            uint64_t v38 = v32;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                CreateBye_cold_5();
              }
            }
          }
          else
          {
            *(void *)(v13 + 480) = v40;
            IPToString();
            GenerateBranch((char *)v46);
            uint64_t v33 = CreateViaHdr(&v40, (uint64_t)DEFAULT_TRANSPORT, BYTE4(__b[13]) & 1, (uint64_t)v44, __b[18], (uint64_t)v46, 0);
            if ((v33 & 0x80000000) != 0)
            {
              uint64_t v38 = v33;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  CreateBye_cold_6();
                }
              }
            }
            else
            {
              *(void *)(v13 + 504) = v40;
              uint64_t v34 = CreateUserAgentHdr(&v40);
              if ((v34 & 0x80000000) != 0)
              {
                uint64_t v38 = v34;
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    CreateBye_cold_7();
                  }
                }
              }
              else
              {
                *(void *)(v13 + 496) = v40;
                uint64_t v35 = CreateReasonHdr(&v40, (uint64_t)"*", a3, a4);
                if ((v35 & 0x80000000) != 0)
                {
                  uint64_t v38 = v35;
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                      CreateBye_cold_8();
                    }
                  }
                }
                else
                {
                  *(void *)(v13 + 544) = v40;
                  uint64_t v36 = CreateContentLengthHdr(&v40, -1);
                  if ((v36 & 0x80000000) != 0)
                  {
                    uint64_t v38 = v36;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        CreateBye_cold_9();
                      }
                    }
                  }
                  else
                  {
                    *(void *)(v13 + 256) = v40;
                    uint64_t v37 = CreateMaxForwardsHdr(&v40, 70);
                    if ((v37 & 0x80000000) == 0)
                    {
                      uint64_t v38 = 0;
                      *(void *)(v13 + 328) = v40;
                      *a1 = v13;
                      return v38;
                    }
                    uint64_t v38 = v37;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                        CreateBye_cold_10();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    FreeSipMsg((void *)v13);
    return v38;
  }
  uint64_t v38 = v11;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      CreateBye_cold_1();
    }
  }
  return v38;
}

uint64_t CreateMessageInDialog(unint64_t *a1, uint64_t a2, char *__s, int a4)
{
  if (__s) {
    int v8 = strlen(__s);
  }
  else {
    int v8 = 0;
  }

  return CreateBinaryMessageInDialog(a1, a2, __s, v8, a4);
}

uint64_t CreateBinaryMessageInDialog(unint64_t *a1, uint64_t a2, const void *a3, int a4, int a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[2] = v10;
  v47[3] = v10;
  v47[0] = v10;
  v47[1] = v10;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  v45[0] = v10;
  v45[1] = v10;
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  memset(__b, 170, sizeof(__b));
  uint64_t v11 = DLGetData(a2, (uint64_t)__b);
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v39 = v11;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_1();
      }
    }
    return v39;
  }
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = CreateGenericSIPMsg(&v42, SHIDWORD(__b[0]), __b[3], SWORD1(__b[3]), a5 != 0);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  DLIncreaseLocalSeq(a2, &v43);
  unint64_t v13 = v42;
  *(void *)(v42 + 4) = 0x700000001;
  if (*(_DWORD *)((char *)&__b[62] + 6) == 5260116) {
    long long v14 = (long long *)&__b[97];
  }
  else {
    long long v14 = (long long *)&__b[83];
  }
  long long v15 = *v14;
  long long v16 = v14[1];
  *(_OWORD *)(v13 + 44) = v14[2];
  *(_OWORD *)(v13 + 28) = v16;
  *(_OWORD *)(v13 + 12) = v15;
  long long v17 = v14[3];
  long long v18 = v14[4];
  long long v19 = v14[5];
  *(_OWORD *)(v13 + 108) = v14[6];
  *(_OWORD *)(v13 + 92) = v19;
  *(_OWORD *)(v13 + 76) = v18;
  *(_OWORD *)(v13 + 60) = v17;
  long long v20 = *(_OWORD *)((char *)&__b[5] + 4);
  *(_OWORD *)(v13 + 696) = *(_OWORD *)((char *)&__b[3] + 4);
  *(_OWORD *)(v13 + 712) = v20;
  *(void *)(v13 + 728) = *(void *)((char *)&__b[7] + 4);
  long long v21 = *(_OWORD *)((char *)&__b[8] + 4);
  long long v22 = *(_OWORD *)((char *)&__b[10] + 4);
  *(void *)(v13 + 768) = *(void *)((char *)&__b[12] + 4);
  *(_OWORD *)(v13 + 736) = v21;
  *(_OWORD *)(v13 + 752) = v22;
  long long v23 = *(_OWORD *)((char *)&__b[13] + 4);
  long long v24 = *(_OWORD *)((char *)&__b[15] + 4);
  *(void *)(v13 + 808) = *(void *)((char *)&__b[17] + 4);
  *(_OWORD *)(v13 + 776) = v23;
  *(_OWORD *)(v13 + 792) = v24;
  long long v25 = *(_OWORD *)((char *)&__b[18] + 4);
  long long v26 = *(_OWORD *)((char *)&__b[20] + 4);
  *(void *)(v13 + 848) = *(void *)((char *)&__b[22] + 4);
  *(_OWORD *)(v13 + 816) = v25;
  *(_OWORD *)(v13 + 832) = v26;
  long long v27 = *(_OWORD *)((char *)&__b[23] + 4);
  long long v28 = *(_OWORD *)((char *)&__b[25] + 4);
  *(void *)(v13 + 888) = *(void *)((char *)&__b[27] + 4);
  *(_OWORD *)(v13 + 856) = v27;
  *(_OWORD *)(v13 + 872) = v28;
  uint64_t v29 = CreateCallIDHdr(&v41);
  if ((v29 & 0x80000000) != 0)
  {
    uint64_t v39 = v29;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_2();
      }
    }
    goto LABEL_50;
  }
  *(void *)(v13 + 208) = v41;
  uint64_t v30 = CreateCSeqHdr(&v41, v43, 7);
  if ((v30 & 0x80000000) != 0)
  {
    uint64_t v39 = v30;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_3();
      }
    }
    goto LABEL_50;
  }
  *(void *)(v13 + 272) = v41;
  uint64_t v31 = CreateFromHdr(&v41, (uint64_t)&__b[36], (long long *)&__b[69]);
  if ((v31 & 0x80000000) != 0)
  {
    uint64_t v39 = v31;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_4();
      }
    }
    goto LABEL_50;
  }
  *(void *)(v13 + 312) = v41;
  uint64_t v32 = CreateToHdr(&v41, (uint64_t)&__b[41] + 3, (long long *)&__b[83]);
  if ((v32 & 0x80000000) != 0)
  {
    uint64_t v39 = v32;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_5();
      }
    }
    goto LABEL_50;
  }
  *(void *)(v13 + 480) = v41;
  IPToString();
  GenerateBranch((char *)v47);
  uint64_t v33 = CreateViaHdr(&v41, (uint64_t)DEFAULT_TRANSPORT, BYTE4(__b[13]) & 1, (uint64_t)v45, __b[18], (uint64_t)v47, 0);
  if ((v33 & 0x80000000) != 0)
  {
    uint64_t v39 = v33;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_6();
      }
    }
    goto LABEL_50;
  }
  *(void *)(v13 + 504) = v41;
  uint64_t v34 = CreateUserAgentHdr(&v41);
  if ((v34 & 0x80000000) != 0)
  {
    uint64_t v39 = v34;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_7();
      }
    }
    goto LABEL_50;
  }
  *(void *)(v13 + 496) = v41;
  uint64_t v35 = CreateContentTypeHdr(&v41);
  if ((v35 & 0x80000000) != 0)
  {
    uint64_t v39 = v35;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_8();
      }
    }
    goto LABEL_50;
  }
  *(void *)(v13 + 264) = v41;
  uint64_t v36 = CreateContentLengthHdr(&v41, -1);
  if ((v36 & 0x80000000) != 0)
  {
    uint64_t v39 = v36;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_9();
      }
    }
    goto LABEL_50;
  }
  *(void *)(v13 + 256) = v41;
  uint64_t v37 = CreateMaxForwardsHdr(&v41, 70);
  if ((v37 & 0x80000000) != 0)
  {
    uint64_t v39 = v37;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateBinaryMessageInDialog_cold_10();
      }
    }
LABEL_50:
    FreeSipMsg((void *)v13);
    return v39;
  }
  *(void *)(v13 + 328) = v41;
  if (!a3)
  {
LABEL_18:
    uint64_t v39 = 0;
    *a1 = v13;
    return v39;
  }
  uint64_t v38 = malloc_type_malloc(a4 + 1, 0x4891D97DuLL);
  *(void *)(v13 + 552) = v38;
  if (v38)
  {
    *(_DWORD *)(v13 + 560) = a4;
    v38[a4] = 0;
    memcpy(*(void **)(v13 + 552), a3, a4);
    goto LABEL_18;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      CreateBinaryMessageInDialog_cold_11();
    }
  }
  FreeSipMsg((void *)v13);
  return 2148401155;
}

uint64_t CreateSKEMessageInDialog(unint64_t *a1, uint64_t a2, const void *a3, int a4, uint64_t a5, int a6, int a7)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  Binaryuint64_t MessageInDialog = CreateBinaryMessageInDialog(a1, a2, a3, a4, a7);
  if ((BinaryMessageInDialog & 0x80000000) != 0) {
    return BinaryMessageInDialog;
  }
  v15[0] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)(*a1 + 564) = 1;
  uint64_t SKESeqHdr = CreateSKESeqHdr(v15, a5, a6);
  if ((SKESeqHdr & 0x80000000) != 0)
  {
    uint64_t v13 = SKESeqHdr;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateSKEMessageInDialog_cold_1();
      }
    }
    goto LABEL_12;
  }
  *(void *)(*a1 + 528) = v15[0];
  free(*(void **)(*a1 + 264));
  uint64_t ContentTypeHdr = CreateContentTypeHdr(v15);
  if ((ContentTypeHdr & 0x80000000) != 0)
  {
    uint64_t v13 = ContentTypeHdr;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateSKEMessageInDialog_cold_2();
      }
    }
LABEL_12:
    FreeSipMsg((void *)*a1);
    return v13;
  }
  uint64_t v13 = 0;
  *(void *)(*a1 + 264) = v15[0];
  return v13;
}

uint64_t CreateGenericStatus(unint64_t *a1, uint64_t a2, int a3, char *a4, char *a5, int a6, int a7, int a8, int a9)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 2148401186;
  }
  unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = CreateGenericSIPMsg(&v64, *(_DWORD *)(a2 + 572), *(_WORD *)(a2 + 568), *(_WORD *)(a2 + 570), *(_DWORD *)(a2 + 1008));
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  unint64_t v18 = v64;
  *(_DWORD *)(v64 + 4) = 2;
  *(_DWORD *)(v18 + 8) = a3;
  if (a4 && *a4)
  {
    long long v19 = (char *)(v18 + 12);
    StatusMsg = a4;
  }
  else
  {
    StatusMsg = GetStatusMsg(a3);
    long long v19 = (char *)(v18 + 12);
  }
  strncpy(v19, StatusMsg, 0x2BuLL);
  long long v22 = *(_OWORD *)(a2 + 696);
  long long v23 = *(_OWORD *)(a2 + 712);
  *(void *)(v18 + 728) = *(void *)(a2 + 728);
  *(_OWORD *)(v18 + 696) = v22;
  *(_OWORD *)(v18 + 712) = v23;
  long long v24 = *(_OWORD *)(a2 + 736);
  long long v25 = *(_OWORD *)(a2 + 752);
  *(void *)(v18 + 768) = *(void *)(a2 + 768);
  *(_OWORD *)(v18 + 736) = v24;
  *(_OWORD *)(v18 + 752) = v25;
  long long v26 = *(_OWORD *)(a2 + 776);
  long long v27 = *(_OWORD *)(a2 + 792);
  *(void *)(v18 + 808) = *(void *)(a2 + 808);
  *(_OWORD *)(v18 + 776) = v26;
  *(_OWORD *)(v18 + 792) = v27;
  long long v28 = *(_OWORD *)(a2 + 816);
  long long v29 = *(_OWORD *)(a2 + 832);
  *(void *)(v18 + 848) = *(void *)(a2 + 848);
  *(_OWORD *)(v18 + 816) = v28;
  *(_OWORD *)(v18 + 832) = v29;
  long long v30 = *(_OWORD *)(a2 + 856);
  long long v31 = *(_OWORD *)(a2 + 872);
  *(void *)(v18 + 888) = *(void *)(a2 + 888);
  *(_OWORD *)(v18 + 856) = v30;
  *(_OWORD *)(v18 + 872) = v31;
  uint64_t v32 = CopySipHeader(&v63, *(const void **)(a2 + 208), 9u);
  if ((v32 & 0x80000000) != 0)
  {
    uint64_t v21 = v32;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateGenericStatus_cold_1();
      }
    }
    goto LABEL_115;
  }
  *(void *)(v18 + 208) = v63;
  uint64_t v33 = CopySipHeader(&v63, *(const void **)(a2 + 312), 0x16u);
  if ((v33 & 0x80000000) != 0)
  {
    uint64_t v21 = v33;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateGenericStatus_cold_2();
      }
    }
    goto LABEL_115;
  }
  *(void *)(v18 + 312) = v63;
  uint64_t v34 = CopySipHeader(&v63, *(const void **)(a2 + 272), 0x11u);
  if ((v34 & 0x80000000) != 0)
  {
    uint64_t v21 = v34;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateGenericStatus_cold_3();
      }
    }
    goto LABEL_115;
  }
  *(void *)(v18 + 272) = v63;
  uint64_t v35 = CopySipHeader(&v63, *(const void **)(a2 + 504), 0x2Eu);
  if ((v35 & 0x80000000) != 0)
  {
    uint64_t v21 = v35;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateGenericStatus_cold_4();
      }
    }
    goto LABEL_115;
  }
  *(void *)(v18 + 504) = v63;
  uint64_t v36 = CopySipHeader(&v63, *(const void **)(a2 + 480), 0x2Bu);
  if ((v36 & 0x80000000) != 0)
  {
    uint64_t v21 = v36;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateGenericStatus_cold_5();
      }
    }
    goto LABEL_115;
  }
  *(void *)(v18 + 480) = v63;
  uint64_t v37 = *(const void **)(a2 + 528);
  if (v37)
  {
    CopySipHeader(&v63, v37, 0x31u);
    *(void *)(v18 + 528) = v63;
  }
  uint64_t v38 = CreateUserAgentHdr(&v63);
  if ((v38 & 0x80000000) != 0)
  {
    uint64_t v21 = v38;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateGenericStatus_cold_6();
      }
    }
    goto LABEL_115;
  }
  *(void *)(v18 + 496) = v63;
  uint64_t v39 = CreateContentLengthHdr(&v63, -1);
  if ((v39 & 0x80000000) != 0)
  {
    uint64_t v21 = v39;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        CreateGenericStatus_cold_7();
      }
    }
    goto LABEL_115;
  }
  *(void *)(v18 + 256) = v63;
  int v40 = *(_DWORD *)(a2 + 8);
  if (v40 == 10)
  {
    if (a3 == 1) {
      goto LABEL_62;
    }
    if (a3 != 39)
    {
      int v48 = 10;
LABEL_86:
      if ((a3 - 8) > 4 || v48 != 10)
      {
        if ((a3 & 0xFFFFFFFE) != 6 || v48 != 8) {
          goto LABEL_101;
        }
        *(_DWORD *)&v65[108] = -1431655766;
        *(void *)&long long v53 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v53 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v65[92] = v53;
        *(_OWORD *)&v65[76] = v53;
        *(_OWORD *)&v65[60] = v53;
        goto LABEL_93;
      }
LABEL_88:
      *(void *)&long long v50 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v50 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v65[80] = v50;
      *(_OWORD *)&v65[96] = v50;
      *(_OWORD *)&v65[48] = v50;
      *(_OWORD *)&v65[64] = v50;
      *(_OWORD *)&v65[16] = v50;
      *(_OWORD *)&v65[32] = v50;
      *(_OWORD *)uint64_t v65 = v50;
      if (a3 == 10)
      {
        int v51 = (long long *)(a5 + 44);
        a8 = *((_DWORD *)a5 + 39);
        uint64_t v52 = (uint64_t)a5;
        a5 = 0;
LABEL_94:
        uint64_t v54 = CreateContactHdr(&v63, v52, v51, a8, a9);
        if ((v54 & 0x80000000) != 0)
        {
          uint64_t v21 = v54;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              CreateGenericStatus_cold_8();
            }
          }
          goto LABEL_115;
        }
        *(void *)(v18 + 224) = v63;
        if (a3 == 6 && a5 && *a5)
        {
          uint64_t v55 = CreateContentTypeHdr(&v63);
          if ((v55 & 0x80000000) != 0)
          {
            uint64_t v21 = v55;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                CreateGenericStatus_cold_10();
              }
            }
            goto LABEL_115;
          }
          *(void *)(v18 + 264) = v63;
        }
        int v48 = *(_DWORD *)(a2 + 8);
LABEL_101:
        if (!a5 || v48 != 7 || !*(void *)(v18 + 528))
        {
LABEL_106:
          uint64_t v57 = *(void *)(a2 + 480);
          int v59 = *(unsigned __int8 *)(v57 + 156);
          uint64_t v58 = (char *)(v57 + 156);
          if (!v59)
          {
            uint64_t v60 = *(void *)(v18 + 480);
            GenerateTag(v58);
            strncpy((char *)(v60 + 156), v58, 0x40uLL);
          }
          goto LABEL_108;
        }
        uint64_t v56 = CreateContentTypeHdr(&v63);
        if ((v56 & 0x80000000) == 0)
        {
          *(void *)(v18 + 264) = v63;
          goto LABEL_106;
        }
        uint64_t v21 = v56;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            CreateGenericStatus_cold_9();
          }
        }
LABEL_115:
        FreeSipMsg((void *)v18);
        return v21;
      }
LABEL_93:
      *(_OWORD *)&v65[5] = *(_OWORD *)"user";
      v65[4] = 0;
      strcpy(v65, "sip");
      memset(&v65[21], 0, 35);
      *(_DWORD *)&v65[56] = *(_DWORD *)(a2 + 776) & 1;
      int v51 = (long long *)v65;
      IPToString();
      *(_WORD *)&v65[100] = *(_WORD *)(a2 + 812);
      strncpy(&v65[102], DEFAULT_TRANSPORT, 4uLL);
      uint64_t v52 = 0;
      *(_DWORD *)&v65[108] = 0;
      goto LABEL_94;
    }
    uint64_t v44 = CreateAllowEventsHdr(&v63, a8);
    if ((v44 & 0x80000000) != 0)
    {
      uint64_t v21 = v44;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          CreateGenericStatus_cold_17();
        }
      }
      goto LABEL_115;
    }
LABEL_61:
    *(void *)(v18 + 184) = v63;
    goto LABEL_81;
  }
  if (v40 != 9)
  {
    if (v40 == 3)
    {
      uint64_t v41 = CreateAcceptHdr(&v63, a8);
      if ((v41 & 0x80000000) != 0)
      {
        uint64_t v21 = v41;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            CreateGenericStatus_cold_11();
          }
        }
        goto LABEL_115;
      }
      *(void *)(v18 + 144) = v63;
      uint64_t v42 = CreateAllowHdr(&v63, a8);
      if ((v42 & 0x80000000) != 0)
      {
        uint64_t v21 = v42;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            CreateGenericStatus_cold_12();
          }
        }
        goto LABEL_115;
      }
      *(void *)(v18 + 176) = v63;
      uint64_t v43 = CreateAllowEventsHdr(&v63, a8);
      if ((v43 & 0x80000000) != 0)
      {
        uint64_t v21 = v43;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            CreateGenericStatus_cold_13();
          }
        }
        goto LABEL_115;
      }
      *(void *)(v18 + 184) = v63;
    }
    if (a3 != 1)
    {
LABEL_81:
      int v48 = *(_DWORD *)(a2 + 8);
      if ((v48 | 2) == 3) {
        goto LABEL_88;
      }
LABEL_84:
      if ((a3 - 6) <= 6 && v48 == 9) {
        goto LABEL_88;
      }
      goto LABEL_86;
    }
    goto LABEL_62;
  }
  if ((a3 & 0xFFFFFFFE) == 6)
  {
    unint64_t v45 = *(const void **)(a2 + 304);
    if (v45) {
      uint64_t v46 = CopySipHeader(&v63, v45, 0x15u);
    }
    else {
      uint64_t v46 = CreateExpiresHdr(&v63, 3600);
    }
    uint64_t v21 = v46;
    if ((v46 & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          CreateGenericStatus_cold_14();
        }
      }
      goto LABEL_115;
    }
    *(void *)(v18 + 304) = v63;
    goto LABEL_81;
  }
  if (a3 != 1)
  {
    if (a3 == 29)
    {
      uint64_t v49 = CreateMinExpiresHdr(&v63, 600);
      if ((v49 & 0x80000000) != 0)
      {
        uint64_t v21 = v49;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            CreateGenericStatus_cold_16();
          }
        }
        goto LABEL_115;
      }
      *(void *)(v18 + 344) = v63;
      goto LABEL_81;
    }
    if (a3 != 39)
    {
      int v48 = 9;
      goto LABEL_84;
    }
    uint64_t v47 = CreateAllowEventsHdr(&v63, a8);
    if ((v47 & 0x80000000) != 0)
    {
      uint64_t v21 = v47;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          CreateGenericStatus_cold_15();
        }
      }
      goto LABEL_115;
    }
    goto LABEL_61;
  }
LABEL_62:
  *(unsigned char *)(*(void *)(v18 + 480) + 156) = 0;
LABEL_108:
  if (a5)
  {
    *(_DWORD *)(v18 + 564) = a7;
    uint64_t v61 = malloc_type_malloc(a6 + 1, 0x39100BCEuLL);
    *(void *)(v18 + 552) = v61;
    if (!v61)
    {
      FreeSipMsg((void *)v18);
      return 2148401155;
    }
    *(_DWORD *)(v18 + 560) = a6;
    v61[a6] = 0;
    memcpy(*(void **)(v18 + 552), a5, a6);
  }
  uint64_t v21 = 0;
  *a1 = v18;
  return v21;
}

uint64_t CreateStatus(unint64_t *a1, uint64_t a2, int a3, char *a4, char *__s, int a6, int a7)
{
  if (__s) {
    int v14 = strlen(__s);
  }
  else {
    int v14 = 0;
  }
  return CreateGenericStatus(a1, a2, a3, a4, __s, v14, 0, a6, a7);
}

uint64_t ConstructSipMsg(char *a1, size_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(__b, 170, sizeof(__b));
  int v6 = *(_DWORD *)(a3 + 4);
  if (v6 == 2)
  {
    GetIntStatusCode(*(_DWORD *)(a3 + 8));
    __sprintf_chk(__b, 0, 0x500uLL, "%s %d %s\r\n");
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v14 = v7;
    long long v15 = v7;
    *(_OWORD *)&buf[16] = v7;
    *(_OWORD *)&buf[32] = v7;
    *(_OWORD *)pthread_attr_t buf = v7;
    ConstructUri(buf, (char *)(a3 + 12));
    __sprintf_chk(__b, 0, 0x500uLL, "%s %s %s\r\n");
LABEL_5:
    strncpy(a1, __b, a2);
    if ((ConstructViaHdr(__b, *(int **)(a3 + 504), 0x500uLL) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructMaxForwardsHdr(__b, *(_DWORD **)(a3 + 328)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructToHdr(__b, *(char **)(a3 + 480)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructFromHdr(__b, *(char **)(a3 + 312)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructCallIDHdr(__b, *(const char **)(a3 + 208)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructCSeqHdr(__b, *(void *)(a3 + 272)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructReferToHdr(__b, *(char **)(a3 + 400)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructContactHdr(__b, *(char **)(a3 + 224)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructAllowHdr(__b, *(void **)(a3 + 176), 0x500uLL) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructEventHdr(__b, *(void *)(a3 + 296)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructAllowEventsHdr(__b, *(void **)(a3 + 184), 0x500uLL) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructAcceptHdr(__b, *(const char **)(a3 + 144), 0x500uLL) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructSubscriptionStateHdr(__b, *(_DWORD **)(a3 + 456)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructExpiresHdr(__b, *(_DWORD **)(a3 + 304)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructMinExpiresHdr(__b, *(_DWORD **)(a3 + 344)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructUserAgentHdr(__b, *(const char **)(a3 + 496)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructContentTypeHdr(__b, *(const char **)(a3 + 264)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructContentEncodingHdr(__b, *(const char **)(a3 + 240)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructContentLengthHdr(__b, *(_DWORD **)(a3 + 256)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    if ((ConstructSKESeqHdr(__b, *(void *)(a3 + 528)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    bzero(__b, 0x500uLL);
    if ((ConstructReasonHdr(__b, *(void *)(a3 + 544)) & 0x80000000) == 0) {
      strncat(a1, __b, a2);
    }
    strncat(a1, "\r\n", a2);
    uint64_t v8 = 0;
    a1[a2 - 1] = 0;
    return v8;
  }
  uint64_t v8 = 2148401153;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v10 = VRTraceErrorLogLevelToCSTR();
    uint64_t v11 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)pthread_attr_t buf = 136316162;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "ConstructSipMsg";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 1271;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 1271;
      *(_WORD *)&unsigned char buf[34] = 1024;
      *(_DWORD *)&uint8_t buf[36] = v12;
      _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: Invalid SIP Message(%d)", buf, 0x28u);
    }
  }
  return v8;
}

uint64_t AssignHeader(uint64_t a1, unsigned int a2, char *__s2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2148401186;
  if (!a1) {
    return 2148401153;
  }
  uint64_t v6 = a1 + 8 * a2;
  long long v9 = *(void **)(v6 + 136);
  uint64_t v8 = (void *)(v6 + 136);
  long long v7 = v9;
  if (v9)
  {
    switch(a2)
    {
      case 0x14u:
        *(_DWORD *)(a1 + 124) = 1;
        break;
      case 0x21u:
        *(_DWORD *)(a1 + 128) = 1;
        break;
      case 0x2Eu:
        uint64_t v10 = *(int **)(a1 + 504);
        int v11 = *v10;
        int v12 = *(_DWORD *)__s2;
        if (*(_DWORD *)__s2 + *v10 >= 6)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v13 = VRTraceErrorLogLevelToCSTR();
            long long v14 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v15 = *v10;
              int v16 = *(_DWORD *)__s2;
              int v20 = 136316674;
              uint64_t v21 = v13;
              __int16 v22 = 2080;
              long long v23 = "AssignHeader";
              __int16 v24 = 1024;
              int v25 = 1418;
              __int16 v26 = 1024;
              int v27 = 1418;
              __int16 v28 = 1024;
              int v29 = 5;
              __int16 v30 = 1024;
              int v31 = v15;
              __int16 v32 = 1024;
              int v33 = v16;
              _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: # of Via exceeded the maximum %d < %d+%d", (uint8_t *)&v20, 0x34u);
            }
          }
          if (*v10 >= 6) {
            int v12 = 0;
          }
          else {
            int v12 = 5 - *v10;
          }
          *(_DWORD *)__s2 = v12;
          int v11 = *v10;
        }
        memcpy(&v10[39 * v11 + 1], __s2 + 4, 156 * v12);
        *v10 += *(_DWORD *)__s2;
        free(__s2);
        return 0;
      default:
        free(v7);
        uint64_t v3 = 0;
        void *v8 = __s2;
        return v3;
    }
    free(__s2);
    return v3;
  }
  void *v8 = __s2;
  if (a2 != 13) {
    return 0;
  }
  uint64_t v17 = 0;
  unint64_t v18 = aIdentity_0;
  do
  {
    if (!strcmp(v18, __s2)) {
      break;
    }
    ++v17;
    v18 += 32;
  }
  while (v17 != 3);
  uint64_t v3 = 0;
  *(_DWORD *)(a1 + 1008) = v17;
  *(void *)(a1 + 1016) = SIPDecompressCallback;
  return v3;
}

uint64_t SIPDecompressCallback(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 - 3 >= 0xFFFFFFFE) {
    return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&g_aCompressions + 4 * a1 + 3))(a2, a3, a4, a5);
  }
  else {
    return 2148401184;
  }
}

uint64_t UpdateCompressionMethodForMsg(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1008) = a2 != 0;
  return result;
}

uint64_t ParseSipUri(uint64_t a1, char *__s)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = strchr(__s, 58);
  if (!v4)
  {
    uint64_t v13 = 2148139039;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return v13;
    }
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return v13;
    }
    *(_DWORD *)pthread_attr_t buf = 136316162;
    uint64_t v29 = v14;
    __int16 v30 = 2080;
    int v31 = "ParseSipUri";
    __int16 v32 = 1024;
    int v33 = 18;
    __int16 v34 = 1024;
    int v35 = 18;
    __int16 v36 = 2080;
    uint64_t v37 = __s;
    int v16 = " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipUri.c:%d: N"
          "o colon after sip scheme[%s]";
LABEL_46:
    _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 0x2Cu);
    return v13;
  }
  *uint64_t v4 = 0;
  uint64_t v5 = v4 + 1;
  __strlcpy_chk();
  uint64_t v6 = strchr(v5, 64);
  if (v6)
  {
    *uint64_t v6 = 0;
    long long v7 = v6 + 1;
    __strlcpy_chk();
    uint64_t v5 = v7;
  }
  if (*v5 != 91) {
    goto LABEL_7;
  }
  uint64_t v8 = strchr(v5 + 1, 93);
  if (!v8)
  {
    uint64_t v13 = 2148139039;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return v13;
    }
    uint64_t v27 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return v13;
    }
    *(_DWORD *)pthread_attr_t buf = 136316162;
    uint64_t v29 = v27;
    __int16 v30 = 2080;
    int v31 = "ParseSipUri";
    __int16 v32 = 1024;
    int v33 = 40;
    __int16 v34 = 1024;
    int v35 = 40;
    __int16 v36 = 2080;
    uint64_t v37 = __s;
    int v16 = " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipUri.c:%d: N"
          "o ']' after '[' for an IPv6 address[%s]";
    goto LABEL_46;
  }
  char *v8 = 0;
  uint64_t v5 = v8 + 1;
  *(_DWORD *)(a1 + 56) = 1;
  __strlcpy_chk();
LABEL_7:
  long long v9 = strchr(v5, 59);
  uint64_t v10 = v9;
  if (v9) {
    *long long v9 = 0;
  }
  int v11 = strchr(v5, 58);
  if (v11)
  {
    *int v11 = 0;
    __int16 v12 = atoi(v11 + 1);
  }
  else
  {
    __int16 v12 = 5060;
  }
  *(_WORD *)(a1 + 100) = v12;
  if (!*(_DWORD *)(a1 + 56)) {
    __strlcpy_chk();
  }
  for (*(_DWORD *)(a1 + 108) = 0; v10; *(_DWORD *)(a1 + 108) = v25)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v17 = v10;
        unint64_t v18 = v10 + 1;
        long long v19 = strchr(v10 + 1, 59);
        uint64_t v10 = v19;
        if (v19) {
          char *v19 = 0;
        }
        for (uint64_t i = v17 + 8; ; ++i)
        {
          int v21 = *((unsigned __int8 *)i - 7);
          if (v21 != 32 && v21 != 9) {
            break;
          }
          ++v18;
        }
        if (strncasecmp(i - 7, "transport=", 0xAuLL)) {
          break;
        }
        __strlcpy_chk();
        if (!v10) {
          return 0;
        }
      }
      if (!strncasecmp(i - 7, "method=", 7uLL)) {
        break;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5
        && (uint64_t v23 = VRTraceErrorLogLevelToCSTR(),
            __int16 v24 = *MEMORY[0x1E4F47A50],
            os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v29 = v23;
        __int16 v30 = 2080;
        int v31 = "ParseSipUri";
        __int16 v32 = 1024;
        int v33 = 95;
        __int16 v34 = 1024;
        int v35 = 95;
        __int16 v36 = 2080;
        uint64_t v37 = v18;
        _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipUri.c:%d: Unknown URI parameter[%s]", buf, 0x2Cu);
        if (!v10) {
          return 0;
        }
      }
      else
      {
LABEL_38:
        if (!v10) {
          return 0;
        }
      }
    }
    *(_DWORD *)(a1 + 108) = 0;
    uint64_t v25 = 1;
    while (strcmp(i, g_apszMethods[v25]))
    {
      if (++v25 == 12) {
        goto LABEL_38;
      }
    }
  }
  return 0;
}

uint64_t ConstructUri(char *a1, char *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(__str, 170, 7);
  memset(v8, 170, 15);
  memset(v7, 170, 18);
  if (!a2) {
    return 2148139009;
  }
  if (*((_WORD *)a2 + 50) == 5060) {
    __str[0] = 0;
  }
  else {
    snprintf(__str, 7uLL, ":%d", *((unsigned __int16 *)a2 + 50));
  }
  if (!a2[102] || !strcasecmp(a2 + 102, "UDP")) {
    v8[0] = 0;
  }
  else {
    snprintf(v8, 0xFuLL, ";%s%s", "transport=", a2 + 102);
  }
  uint64_t v5 = *((unsigned int *)a2 + 27);
  if (v5) {
    snprintf(v7, 0x12uLL, ";%s%s", "method=", g_apszMethods[v5]);
  }
  else {
    v7[0] = 0;
  }
  if (*((_DWORD *)a2 + 14) && a2[60]) {
    snprintf(a1, 0x50uLL, "%s:%s%s[%s]%s%s%s", a2, a2 + 5);
  }
  else {
    snprintf(a1, 0x50uLL, "%s:%s%s%s%s%s%s", a2, a2 + 5);
  }
  return 0;
}

BOOL VCTailspinUtil_GenerateTailspin(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4E589F0]();
  BOOL v5 = +[VCTailspinUtil tailspinDumpOutput:reason:](VCTailspinUtil, "tailspinDumpOutput:reason:", a1, [NSString stringWithCString:a2 encoding:4]);
  return v5;
}

uint64_t VCRateControlCongestionLevel_BitrateRange(unsigned int a1)
{
  if (a1 < 0x1DBD49) {
    int v1 = 3;
  }
  else {
    int v1 = 4;
  }
  if (a1 >= 0x91C09) {
    int v2 = v1;
  }
  else {
    int v2 = 2;
  }
  if (a1 >= 0x37AA1) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = 1;
  }
  if (a1 >= 0x186A1) {
    return v3;
  }
  else {
    return 0;
  }
}

double VCRateControlCongestionLevel_RampUpTimeFactor(unsigned int a1)
{
  double result = 3.0;
  if (a1 <= 3) {
    return dbl_1E259F8B0[a1];
  }
  return result;
}

double VCRateControlCongestionLevel_PopulateCongestionLevelThresholds@<D0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1E259F810;
  a1[1] = xmmword_1E259F830;
  a1[2] = xmmword_1E259F840;
  a1[3] = xmmword_1E259F820;
  a1[4] = xmmword_1E259F850;
  a1[5] = xmmword_1E259F860;
  double result = 7.19999981;
  a1[6] = xmmword_1E259F880;
  a1[7] = xmmword_1E259F890;
  a1[8] = xmmword_1E259F870;
  a1[9] = xmmword_1E259F8A0;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_7@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 24) = a2;
  return [a1 intValue];
}

uint64_t VCSimpleQueueCreate(unsigned int a1, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 2150694913;
  if (a1 && a2)
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 0x50uLL, 0x10A0040825AA732uLL);
    if (v2)
    {
      uint64_t v6 = malloc_type_calloc(a1, 8uLL, 0x100004000313F17uLL);
      *(void *)uint64_t v2 = v6;
      if (v6)
      {
        uint64_t v7 = 0;
        v2[2] = a1;
        uint64_t v8 = 8 * a1;
        while (1)
        {
          uint64_t v9 = malloc_type_calloc(1uLL, 0x10uLL, 0x10C004028F705ECuLL);
          if (!v9) {
            break;
          }
          *(void *)(*(void *)v2 + v7) = v9;
          v7 += 8;
          if (v8 == v7)
          {
            uint64_t v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x10C004028F705ECuLL);
            *((void *)v2 + 4) = v10;
            if (v10)
            {
              int v11 = malloc_type_calloc(1uLL, 0x10uLL, 0x10C004028F705ECuLL);
              *((void *)v2 + 5) = v11;
              if (v11)
              {
                uint64_t v3 = 0;
                *a2 = v2;
                uint64_t v2 = 0;
                goto LABEL_11;
              }
            }
            break;
          }
        }
      }
    }
    uint64_t v3 = 2150694915;
  }
LABEL_11:
  VCSimpleQueueDestroy(v2);
  return v3;
}

void VCSimpleQueueDestroy(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)*a1;
    if (v2)
    {
      if (*((_DWORD *)a1 + 2))
      {
        unint64_t v3 = 0;
        do
        {
          uint64_t v4 = (void *)atomic_load((unint64_t *)(*a1 + 8 * v3));
          BOOL v5 = (void (*)(void *, void))a1[8];
          if (v5 && *v4) {
            v5(a1, a1[9]);
          }
          free(v4);
          ++v3;
        }
        while (v3 < *((unsigned int *)a1 + 2));
        uint64_t v2 = (void *)*a1;
      }
      free(v2);
    }
    uint64_t v6 = (void *)a1[4];
    if (v6) {
      free(v6);
    }
    uint64_t v7 = (void *)a1[5];
    if (v7) {
      free(v7);
    }
    free(a1);
  }
}

uint64_t VCSimpleQueueSetElementEvictedCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2150694913;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *(void *)(a1 + 48) = a2;
      *(void *)(a1 + 56) = a3;
    }
  }
  return result;
}

uint64_t VCSimpleQueueSetWillDestroyElementCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2150694913;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *(void *)(a1 + 64) = a2;
      *(void *)(a1 + 72) = a3;
    }
  }
  return result;
}

uint64_t VCSimpleQueueEnqueue(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2150694913;
  if (a1 && a2)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 16);
    *uint64_t v4 = a2;
    v4[1] = v5;
    uint64_t v6 = (void *)atomic_exchange((atomic_ullong *volatile)(*(void *)a1 + 8 * (int)(v5 % *(unsigned int *)(a1 + 8))), (unint64_t)v4);
    if (*v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, void))(a1 + 48);
      if (v7) {
        v7(a1, *(void *)(a1 + 56));
      }
      *uint64_t v6 = 0;
    }
    uint64_t result = 0;
    *(void *)(a1 + 40) = v6;
    ++*(void *)(a1 + 16);
  }
  return result;
}

uint64_t VCSimpleQueueDequeue(uint64_t result)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (uint64_t *)atomic_exchange((atomic_ullong *volatile)(*(void *)result+ 8* (int)(*(void *)(result + 24)% (unint64_t)*(unsigned int *)(result + 8))), *(void *)(result + 32));
    *(void *)(result + 32) = v2;
    uint64_t result = *v2;
    if (*v2)
    {
      unint64_t v3 = *(void *)(v1 + 24);
      if (v2[1] > v3)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v4 = VRTraceErrorLogLevelToCSTR();
          unint64_t v5 = *MEMORY[0x1E4F47A50];
          uint64_t v6 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v7 = *(void *)(v1 + 24);
              uint64_t v8 = v2[1];
              int v11 = 136316418;
              uint64_t v12 = v4;
              __int16 v13 = 2080;
              uint64_t v14 = "VCSimpleQueueDequeue";
              __int16 v15 = 1024;
              int v16 = 170;
              __int16 v17 = 2048;
              uint64_t v18 = v7;
              __int16 v19 = 2048;
              uint64_t v20 = v8;
              __int16 v21 = 2048;
              uint64_t v22 = v8 - v7;
              _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCSimpleQueue looped over (dequeued:%llu sequence:%llu). Skipping %llu elements", (uint8_t *)&v11, 0x3Au);
            }
          }
          else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v9 = *(void *)(v1 + 24);
            uint64_t v10 = v2[1];
            int v11 = 136316418;
            uint64_t v12 = v4;
            __int16 v13 = 2080;
            uint64_t v14 = "VCSimpleQueueDequeue";
            __int16 v15 = 1024;
            int v16 = 170;
            __int16 v17 = 2048;
            uint64_t v18 = v9;
            __int16 v19 = 2048;
            uint64_t v20 = v10;
            __int16 v21 = 2048;
            uint64_t v22 = v10 - v9;
            _os_log_debug_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCSimpleQueue looped over (dequeued:%llu sequence:%llu). Skipping %llu elements", (uint8_t *)&v11, 0x3Au);
          }
        }
        uint64_t result = *v2;
        unint64_t v3 = v2[1];
      }
      *uint64_t v2 = 0;
      *(void *)(v1 + 24) = v3 + 1;
    }
  }
  return result;
}

uint64_t GetStatusCode(int a1)
{
  uint64_t result = 0;
  while (g_aiStatusCodes[result] != a1)
  {
    if (++result == 53) {
      return 0;
    }
  }
  return result;
}

uint64_t GetIntStatusCode(int a1)
{
  return g_aiStatusCodes[a1];
}

char *GetStatusMsg(int a1)
{
  return g_apszStatusMsgs[a1];
}

CVPixelBufferRef VCImageMirroringConverter_CreateMirroredPixelBuffer(uint64_t a1, __CVBuffer *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    unint64_t v5 = *MEMORY[0x1E4F47A50];
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
        int v10 = 136316930;
        uint64_t v11 = v4;
        __int16 v12 = 2080;
        __int16 v13 = "VCImageMirroringConverter_CreateMirroredPixelBuffer";
        __int16 v14 = 1024;
        int v15 = 28;
        __int16 v16 = 2048;
        uint64_t v17 = a1;
        __int16 v18 = 2048;
        __int16 v19 = a2;
        __int16 v20 = 2080;
        __int16 v21 = FourccToCStr(PixelFormatType);
        __int16 v22 = 2048;
        size_t Width = CVPixelBufferGetWidth(a2);
        __int16 v24 = 2048;
        size_t Height = CVPixelBufferGetHeight(a2);
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d pointer=%p, pixelBuffer=%p, formatType=%s, width=%lu, height=%lu", (uint8_t *)&v10, 0x4Eu);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      OSType v9 = CVPixelBufferGetPixelFormatType(a2);
      int v10 = 136316930;
      uint64_t v11 = v4;
      __int16 v12 = 2080;
      __int16 v13 = "VCImageMirroringConverter_CreateMirroredPixelBuffer";
      __int16 v14 = 1024;
      int v15 = 28;
      __int16 v16 = 2048;
      uint64_t v17 = a1;
      __int16 v18 = 2048;
      __int16 v19 = a2;
      __int16 v20 = 2080;
      __int16 v21 = FourccToCStr(v9);
      __int16 v22 = 2048;
      size_t Width = CVPixelBufferGetWidth(a2);
      __int16 v24 = 2048;
      size_t Height = CVPixelBufferGetHeight(a2);
      _os_log_debug_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEBUG, " [%s] %s:%d pointer=%p, pixelBuffer=%p, formatType=%s, width=%lu, height=%lu", (uint8_t *)&v10, 0x4Eu);
    }
  }
  return VCImageRotationConverterBase_CreateRotatedPixelBuffer(a1, a2, 1);
}

CMSampleBufferRef VCImageMirroringConverter_CreateMirroredSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, long long *a3)
{
  v6[5] = *MEMORY[0x1E4F143B8];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  double v6[2] = __VCImageMirroringConverter_CreateMirroredSampleBuffer_block_invoke;
  v6[3] = &unk_1E6DB6D78;
  v6[4] = a1;
  long long v4 = *a3;
  uint64_t v5 = *((void *)a3 + 2);
  return VCImageConverterBase_CreateConvertedSampleBuffer(a1, a2, (uint64_t)&v4, (uint64_t)v6);
}

uint64_t VCMediaNegotiationBlobV2GeneralInfoReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_44;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_46;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_46:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          String = (void *)PBReaderReadString();

          *(void *)(a1 + 24) = String;
          continue;
        case 3u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                BOOL v14 = v26++ >= 9;
                if (v14)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v27) = 0;
          }
LABEL_50:
          uint64_t v36 = 16;
          goto LABEL_55;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v33 = *v3;
        unint64_t v34 = *(void *)(a2 + v33);
        if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
        *(void *)(a2 + v33) = v34 + 1;
        v27 |= (unint64_t)(v35 & 0x7F) << v31;
        if ((v35 & 0x80) == 0) {
          goto LABEL_52;
        }
        v31 += 7;
        BOOL v14 = v32++ >= 9;
        if (v14)
        {
          LODWORD(v27) = 0;
          goto LABEL_54;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v27) = 0;
      }
LABEL_54:
      uint64_t v36 = 32;
LABEL_55:
      *(_DWORD *)(a1 + v36) = v27;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

unint64_t GetTickCount()
{
  return (unint64_t)(micro() * 1000000.0) / 0x3E8;
}

uint64_t TACreateHandle(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v14 = (char *)malloc_type_calloc(1uLL, 0xE0uLL, 0x10A00408696AC64uLL);
  if (v14)
  {
    int v15 = v14;
    *((_DWORD *)v14 + 34) = a2;
    __int16 v16 = (pthread_mutex_t *)(v14 + 24);
    pthread_mutex_init((pthread_mutex_t *)(v14 + 24), 0);
    pthread_cond_init((pthread_cond_t *)(v15 + 88), 0);
    *((void *)v15 + 19) = a3;
    *((void *)v15 + 20) = a5;
    *((void *)v15 + 21) = a4;
    *((void *)v15 + 22) = a6;
    *((_DWORD *)v15 + 2) = 1;
    *((void *)v15 + 23) = 4000;
    *((void *)v15 + 24) = a7;
    *((_DWORD *)v15 + 50) = -1;
    *((void *)v15 + 26) = 0;
    uint64_t v17 = MQCreateHandle((uint64_t *)v15 + 18);
    if ((v17 & 0x80000000) != 0)
    {
      uint64_t v19 = v17;
      pthread_mutex_destroy(v16);
      pthread_cond_destroy((pthread_cond_t *)(v15 + 88));
      free(v15);
    }
    else
    {
      uint64_t Handle = CreateHandle();
      *a1 = Handle;
      if (Handle == 0xFFFFFFFFLL)
      {
        pthread_mutex_destroy(v16);
        pthread_cond_destroy((pthread_cond_t *)(v15 + 88));
        MQCloseHandle();
        free(v15);
        return 2148532229;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v19 = 2148532227;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        TACreateHandle_cold_1();
      }
    }
  }
  return v19;
}

uint64_t TACloseHandle()
{
  uint64_t v0 = 2148532226;
  uint64_t v1 = CheckInHandleDebug();
  if (v1)
  {
    uint64_t v2 = v1;
    unint64_t v3 = (pthread_mutex_t *)(v1 + 24);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 24));
    int v4 = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v2 + 8) = v4 - 1;
    pthread_cond_signal((pthread_cond_t *)(v2 + 88));
    pthread_mutex_unlock(v3);
    CheckOutHandleDebug();
    if (v4 > 1) {
      return 0;
    }
    uint64_t v5 = CheckInHandleDebug();
    if (v5)
    {
      uint64_t v6 = v5;
      CheckOutHandleDebug();
      pthread_cond_destroy((pthread_cond_t *)(v6 + 88));
      pthread_mutex_destroy((pthread_mutex_t *)(v6 + 24));
      FreeSipMsg(*(void **)(v6 + 168));
      MQCloseHandle();
      free((void *)v6);
      return 0;
    }
  }
  return v0;
}

uint64_t TASend(uint64_t a1, void *a2)
{
  uint64_t v3 = 2148532242;
  uint64_t v4 = CheckInHandleDebug();
  if (!v4) {
    return 2148532226;
  }
  uint64_t v5 = (unsigned int *)v4;
  uint64_t v6 = (pthread_mutex_t *)(v4 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 24));
  int v7 = v5[2];
  if (v7 < 2)
  {
    if (v7 == 1) {
      uint64_t v3 = 2148532259;
    }
    if (a2) {
      FreeSipMsg(a2);
    }
LABEL_14:
    pthread_mutex_unlock(v6);
    CheckOutHandleDebug();
    return v3;
  }
  if (!a2 || (*(_DWORD *)a2 = 1, uint64_t v8 = MQPut(*((void *)v5 + 18), (uint64_t)a2, 0), (v8 & 0x80000000) == 0))
  {
    if (v5[1])
    {
LABEL_8:
      v5[1] = 0;
      uint64_t v3 = *v5;
    }
    else
    {
      while (1)
      {
        int v9 = v5[2];
        if (v9 < 2) {
          break;
        }
        pthread_cond_wait((pthread_cond_t *)(v5 + 22), v6);
        if (v5[1]) {
          goto LABEL_8;
        }
      }
      if (v9 == 1) {
        uint64_t v3 = 2148532259;
      }
      else {
        uint64_t v3 = 2148532242;
      }
    }
    goto LABEL_14;
  }
  uint64_t v10 = v8;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      TASend_cold_1();
    }
  }
  FreeSipMsg(a2);
  pthread_mutex_unlock(v6);
  CheckOutHandleDebug();
  return v10;
}

uint64_t TACancel()
{
  v7[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2148532226;
  }
  uint64_t v1 = v0;
  v7[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t Cancel = CreateCancel(v7, 0);
  if ((Cancel & 0x80000000) != 0)
  {
    uint64_t v5 = Cancel;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        TACancel_cold_1();
      }
    }
  }
  else
  {
    uint64_t v3 = v7[0];
    *(_DWORD *)v7[0] = 1;
    uint64_t v4 = MQPut(*(void *)(v1 + 144), (uint64_t)v3, 0);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t v5 = v4;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          TACancel_cold_2();
        }
      }
      FreeSipMsg((void *)v7[0]);
    }
    else
    {
      pthread_mutex_lock((pthread_mutex_t *)(v1 + 24));
      if (*(int *)(v1 + 8) >= 2)
      {
        do
          pthread_cond_wait((pthread_cond_t *)(v1 + 88), (pthread_mutex_t *)(v1 + 24));
        while (*(int *)(v1 + 8) > 1);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 24));
      uint64_t v5 = 0;
    }
  }
  CheckOutHandleDebug();
  return v5;
}

uint64_t TASetRetransmitTimeoutCap(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148532226;
  }
  *(void *)(v3 + 184) = a2;
  CheckOutHandleDebug();
  return 0;
}

uint64_t RTTAdjustedTimeOut(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 200);
  uint64_t v5 = a2;
  if (a3 == 1)
  {
    unsigned int v6 = 2 * v4;
    BOOL v7 = v4 == -1 || v6 >= a2;
    uint64_t v5 = a2;
    if (!v7)
    {
      if (v6 <= a2 >> 1) {
        uint64_t v5 = a2 >> 1;
      }
      else {
        uint64_t v5 = v6;
      }
    }
  }
  int v26 = -1431655766;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v8;
  long long v25 = v8;
  long long v22 = v8;
  long long v23 = v8;
  *(_OWORD *)char __str = v8;
  long long v21 = v8;
  snprintf(__str, 0x64uLL, "RTTAdjustedTimeOut(%d): %d -> %d (RTT: %d)", a3, a2, v5, v4);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v13 = v9;
      __int16 v14 = 2080;
      int v15 = "RTTAdjustedTimeOut";
      __int16 v16 = 1024;
      int v17 = 288;
      __int16 v18 = 2080;
      uint64_t v19 = __str;
      _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TAInviteClientProc:%s", buf, 0x26u);
    }
  }
  if (*(_DWORD *)(a1 + 200) != -1 && *(void *)(a1 + 208) && VRTraceIsInternalOSInstalled()) {
    (*(void (**)(void, uint64_t, char *))(a1 + 208))(*(void *)(a1 + 192), a1 + 216, __str);
  }
  return v5;
}

uint64_t TAStart(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2148532225;
  uint64_t v3 = CheckInHandleDebug();
  if (!v3) {
    return 2148532226;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(int *)(v3 + 136);
  if (v5 < 4)
  {
    unsigned int v6 = (void *(__cdecl *)(void *))off_1F3D3E2C0[v5];
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v9.__opaque[24] = v7;
    *(_OWORD *)&v9.__opaque[40] = v7;
    *(_OWORD *)&v9.__sig = v7;
    *(_OWORD *)&v9.__opaque[8] = v7;
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 24));
    ++*(_DWORD *)(v4 + 8);
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 24));
    pthread_attr_init(&v9);
    pthread_attr_setscope(&v9, 1);
    pthread_attr_setdetachstate(&v9, 2);
    uint64_t v2 = pthread_create((pthread_t *)(v4 + 16), &v9, v6, a1);
    pthread_attr_destroy(&v9);
    if (v2)
    {
      uint64_t v2 = v2 | 0xC0100000;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          TAStart_cold_1();
        }
      }
      pthread_mutex_lock((pthread_mutex_t *)(v4 + 24));
      --*(_DWORD *)(v4 + 8);
      pthread_mutex_unlock((pthread_mutex_t *)(v4 + 24));
    }
  }
  CheckOutHandleDebug();
  return v2;
}

uint64_t TAInviteClientProc(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int v57 = -1431655766;
  uint64_t v55 = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v56 = (void *)0xAAAAAAAAAAAAAAAALL;
  pthread_setname_np("com.apple.avconference.transaction.inviteclientproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v59 = v2;
      __int16 v60 = 2080;
      uint64_t v61 = "TAInviteClientProc";
      __int16 v62 = 1024;
      int v63 = 318;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TAInviteClientProc Thread start...", buf, 0x1Cu);
    }
  }
  uint64_t v4 = CheckInHandleDebug();
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = partial apply(*(void *)(v4 + 152), 0, *(void *)(v4 + 168), (uint64_t)TAMsgCallback, a1);
    if (v6 < 0)
    {
      int v8 = v6;
    }
    else
    {
      int v7 = TPGetType(*(void *)(v5 + 152), &v57);
      if (v7 < 0)
      {
        int v8 = v7;
      }
      else
      {
        int v8 = TPSend(*(void *)(v5 + 152));
        if ((v8 & 0x80000000) == 0)
        {
          double v53 = micro();
          LODWORD(v9) = RTTAdjustedTimeOut(v5, 500, 1);
          v10.f64[0] = micro();
          v10.f64[1] = v53;
          uint64x2_t v11 = vcvtq_u64_f64(vmulq_f64(v10, (float64x2_t)vdupq_n_s64(0x412E848000000000uLL)));
          unint64_t v12 = v11.i64[0] / 0x3E8uLL - v11.i64[1] / 0x3E8uLL;
          if (v12 >> 5 <= 0x270)
          {
            unint64_t v13 = 0;
            int v14 = 0;
            int v54 = 0;
            unint64_t v15 = v11.i64[1] / 0x3E8uLL;
            unint64_t v9 = (int)v9;
            unint64_t v16 = 20000;
            while (1)
            {
              unint64_t v17 = v16 - v12;
              if (v9 >= v17) {
                unint64_t v18 = v17;
              }
              else {
                unint64_t v18 = v9;
              }
              uint64_t v19 = 2 * v9;
              if (2 * v9 >= 0x3E8) {
                uint64_t v19 = 1000;
              }
              if (v57 == 1) {
                unint64_t v20 = v17;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v57 == 1) {
                uint64_t v21 = v9;
              }
              else {
                uint64_t v21 = v19;
              }
              if (v57 == 1) {
                unint64_t v22 = v13;
              }
              else {
                unint64_t v22 = v17;
              }
              if (v14) {
                unint64_t v23 = v17;
              }
              else {
                unint64_t v23 = v20;
              }
              if (!v14)
              {
                unint64_t v9 = v21;
                unint64_t v13 = v22;
              }
              long long v24 = *(void **)(*(void *)(v5 + 168) + 272);
              uint64_t v25 = v24 ? *v24 : -1;
              int v26 = MQGet(*(void *)(v5 + 144), &v56, v23, 1, v25);
              int v8 = v26;
              if ((v26 & 0x80000000) == 0) {
                break;
              }
              if (v26 != -2146762729) {
                goto LABEL_114;
              }
              if (v14 == 3)
              {
                int v8 = 0;
                goto LABEL_114;
              }
              if (v14 || v57 || v23 == v13)
              {
                int v8 = -2146762729;
                goto LABEL_114;
              }
              int v8 = TPSend(*(void *)(v5 + 152));
              if (v8 < 0) {
                goto LABEL_114;
              }
              double v27 = micro();
              int v14 = 0;
LABEL_40:
              unint64_t v12 = (unint64_t)(v27 * 1000000.0) / 0x3E8 - v15;
              if (v12 >= v16) {
                goto LABEL_112;
              }
            }
            uint64_t v28 = v56;
            if (*(_DWORD *)v56 == 1 && *((_DWORD *)v56 + 1) == 1 && *((_DWORD *)v56 + 2) == 5)
            {
              FreeSipMsg(v56);
              goto LABEL_114;
            }
            int v29 = *((_DWORD *)v56 + 2);
            if (v14 == 3)
            {
              if ((v29 - 8) <= 0x2C)
              {
                Acuint64_t k = CreateAck((unint64_t *)&v55, *(void *)(v5 + 168), (uint64_t)v56);
                if (Ack < 0)
                {
                  int v8 = Ack;
                  goto LABEL_114;
                }
                int v8 = TPSend(*(void *)(v5 + 152));
                FreeSipMsg(v55);
                if (v8 < 0) {
                  goto LABEL_114;
                }
                uint64_t v28 = v56;
              }
              FreeSipMsg(v28);
              int v14 = 3;
              goto LABEL_91;
            }
            if (v14 == 2)
            {
              if ((v29 - 1) <= 4)
              {
                uint64_t v38 = *((void *)v56 + 60);
                int v14 = 2;
                if (v38)
                {
                  uint64_t v39 = *(void *)(*(void *)(v5 + 168) + 480);
                  if (v39)
                  {
                    int v41 = *(unsigned __int8 *)(v38 + 156);
                    int v40 = (const char *)(v38 + 156);
                    if (v41)
                    {
                      uint64_t v42 = (char *)(v39 + 156);
                      if (strcmp(v40, (const char *)(v39 + 156)))
                      {
                        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                        {
                          uint64_t v52 = VRTraceErrorLogLevelToCSTR();
                          uint64_t v43 = *MEMORY[0x1E4F47A50];
                          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)pthread_attr_t buf = 136315906;
                            uint64_t v59 = v52;
                            __int16 v60 = 2080;
                            uint64_t v61 = "TAInviteClientProc";
                            __int16 v62 = 1024;
                            int v63 = 457;
                            __int16 v64 = 2080;
                            uint64_t v65 = v40;
                            _os_log_impl(&dword_1E1EA4000, v43, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Save this ToTag: %s", buf, 0x26u);
                          }
                        }
                        strncpy(v42, v40, 0x40uLL);
                        int v14 = 2;
                      }
                    }
                  }
                }
                goto LABEL_90;
              }
              if ((v29 - 8) > 0x2C)
              {
                BOOL v44 = (v29 & 0xFFFFFFFE) == 6;
                if ((v29 & 0xFFFFFFFE) == 6) {
                  int v14 = 5;
                }
                else {
                  int v14 = 2;
                }
                goto LABEL_86;
              }
            }
            else
            {
              if ((v29 - 1) <= 4)
              {
                uint64_t v30 = *((void *)v56 + 60);
                if (v30)
                {
                  uint64_t v31 = *(void *)(*(void *)(v5 + 168) + 480);
                  if (v31)
                  {
                    int v33 = *(unsigned __int8 *)(v30 + 156);
                    unsigned int v32 = (const char *)(v30 + 156);
                    if (v33)
                    {
                      unint64_t v34 = (char *)(v31 + 156);
                      if (strcmp(v32, (const char *)(v31 + 156)))
                      {
                        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
                        {
                          uint64_t v35 = VRTraceErrorLogLevelToCSTR();
                          uint64_t v36 = *MEMORY[0x1E4F47A50];
                          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)pthread_attr_t buf = 136315906;
                            uint64_t v59 = v35;
                            __int16 v60 = 2080;
                            uint64_t v61 = "TAInviteClientProc";
                            __int16 v62 = 1024;
                            int v63 = 415;
                            __int16 v64 = 2080;
                            uint64_t v65 = v32;
                            _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Save this ToTag: %s", buf, 0x26u);
                          }
                        }
                        strncpy(v34, v32, 0x40uLL);
                      }
                    }
                  }
                }
                unint64_t v15 = (unint64_t)(micro() * 1000000.0) / 0x3E8;
                int v14 = 2;
                unint64_t v16 = 8000;
                goto LABEL_90;
              }
              if ((v29 - 8) > 0x2C)
              {
                BOOL v44 = (v29 & 0xFFFFFFFE) == 6;
                if ((v29 & 0xFFFFFFFE) == 6) {
                  int v14 = 5;
                }
                else {
                  int v14 = 0;
                }
LABEL_86:
                int v46 = v54;
                if (v44) {
                  int v46 = 1;
                }
                int v54 = v46;
                goto LABEL_90;
              }
            }
            if ((CreateAck((unint64_t *)&v55, *(void *)(v5 + 168), (uint64_t)v56) & 0x80000000) != 0
              || (int v45 = TPSend(*(void *)(v5 + 152)), FreeSipMsg(v55), v45 < 0))
            {
              int v54 = 1;
              int v14 = 5;
            }
            else
            {
              unint64_t v15 = (unint64_t)(micro() * 1000000.0) / 0x3E8;
              if (v57) {
                unint64_t v16 = 0;
              }
              else {
                unint64_t v16 = 32000;
              }
              int v54 = 1;
              int v14 = 3;
            }
LABEL_90:
            int v8 = (*(uint64_t (**)(void, void *))(v5 + 176))(*(void *)(v5 + 192), v56);
LABEL_91:
            if (v14 == 5) {
              goto LABEL_114;
            }
            double v27 = micro();
            goto LABEL_40;
          }
          int v54 = 0;
          int v14 = 0;
LABEL_112:
          if (v14 != 3) {
            int v8 = -2146435049;
          }
LABEL_114:
          TPRemoveTransaction(*(void *)(v5 + 152), a1);
          if (v54) {
            goto LABEL_107;
          }
          goto LABEL_99;
        }
      }
      TPRemoveTransaction(*(void *)(v5 + 152), a1);
    }
LABEL_99:
    if ((unsigned __int16)v8 == 40)
    {
      uint64_t v47 = *(void *)(v5 + 168);
      int v48 = 32;
    }
    else if ((unsigned __int16)v8 == 23)
    {
      uint64_t v47 = *(void *)(v5 + 168);
      int v48 = 21;
    }
    else
    {
      uint64_t v47 = *(void *)(v5 + 168);
      if ((v8 & 0x40000000) != 0) {
        int v48 = 45;
      }
      else {
        int v48 = 42;
      }
    }
    CreateStatus((unint64_t *)&v56, v47, v48, 0, 0, 0, 0);
    (*(void (**)(void, void *))(v5 + 176))(*(void *)(v5 + 192), v56);
LABEL_107:
    CheckOutHandleDebug();
    TACloseHandle();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v49 = VRTraceErrorLogLevelToCSTR();
      long long v50 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315906;
        uint64_t v59 = v49;
        __int16 v60 = 2080;
        uint64_t v61 = "TAInviteClientProc";
        __int16 v62 = 1024;
        int v63 = 552;
        __int16 v64 = 1024;
        LODWORD(v65) = v8;
        _os_log_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TAInviteClientProc Thread end(%X)...", buf, 0x22u);
      }
    }
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      TAInviteClientProc_cold_1();
    }
  }
  return 0;
}

uint64_t TANonInviteClientProc(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v36 = -1431655766;
  uint64_t v35 = (void *)0xAAAAAAAAAAAAAAAALL;
  pthread_setname_np("com.apple.avconference.transaction.noninviteclientproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v38 = v2;
      __int16 v39 = 2080;
      int v40 = "TANonInviteClientProc";
      __int16 v41 = 1024;
      int v42 = 571;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TANonInviteClientProc Thread start...", buf, 0x1Cu);
    }
  }
  uint64_t v4 = CheckInHandleDebug();
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = partial apply(*(void *)(v4 + 152), 0, *(void *)(v4 + 168), (uint64_t)TAMsgCallback, a1);
    if (v6 < 0)
    {
      int v8 = v6;
    }
    else
    {
      int v7 = TPGetType(*(void *)(v5 + 152), &v36);
      if (v7 < 0)
      {
        int v8 = v7;
      }
      else
      {
        int v8 = TPSend(*(void *)(v5 + 152));
        if ((v8 & 0x80000000) == 0)
        {
          double v33 = micro();
          v9.f64[0] = micro();
          v9.f64[1] = v33;
          uint64x2_t v10 = vcvtq_u64_f64(vmulq_f64(v9, (float64x2_t)vdupq_n_s64(0x412E848000000000uLL)));
          unint64_t v11 = v10.i64[0] / 0x3E8uLL - v10.i64[1] / 0x3E8uLL;
          if (v11 >> 8 <= 0x7C)
          {
            BOOL v12 = 0;
            BOOL v13 = 0;
            unint64_t v14 = 0;
            unint64_t v15 = v10.i64[1] / 0x3E8uLL;
            int v32 = 1;
            int v34 = 0;
            unint64_t v16 = 32000;
            unint64_t v17 = 500;
            while (1)
            {
              unint64_t v18 = v16 - v11;
              if (v13 || v36 == 1)
              {
                unint64_t v19 = v18;
              }
              else
              {
                unint64_t v19 = v17 >= v18 ? v18 : v17;
                if (v12)
                {
                  unint64_t v17 = *(void *)(v5 + 184);
                }
                else if (2 * v17 >= *(void *)(v5 + 184))
                {
                  unint64_t v17 = *(void *)(v5 + 184);
                }
                else
                {
                  v17 *= 2;
                }
                unint64_t v14 = v18;
              }
              uint64_t v20 = *(void *)(v5 + 168);
              uint64_t v21 = *(void **)(v20 + 272);
              uint64_t v22 = v21 ? *v21 : -1;
              int v23 = MQGet(*(void *)(v5 + 144), &v35, v19, *(_DWORD *)(v20 + 8), v22);
              int v8 = v23;
              if ((v23 & 0x80000000) == 0) {
                break;
              }
              if (v23 != -2146762729 || v13)
              {
                if (v23 == -2146762729) {
                  int v8 = 0;
                }
                else {
                  int v8 = v23;
                }
                goto LABEL_73;
              }
              if (v36 || v19 == v14)
              {
                int v8 = -2146762729;
                goto LABEL_73;
              }
              long long v24 = *(_DWORD **)(*(void *)(v5 + 168) + 544);
              if (v24) {
                *long long v24 = *v24 == 0;
              }
              int v8 = TPSend(*(void *)(v5 + 152));
              if (v8 < 0) {
                goto LABEL_73;
              }
LABEL_31:
              unint64_t v11 = (unint64_t)(micro() * 1000000.0) / 0x3E8 - v15;
              if (v11 >= v16) {
                goto LABEL_71;
              }
            }
            if (*(_DWORD *)v35 == 1 && *((_DWORD *)v35 + 1) == 1 && *((_DWORD *)v35 + 2) == 5)
            {
              FreeSipMsg(v35);
              goto LABEL_73;
            }
            int v25 = v32;
            if (v32 != 3)
            {
              int v26 = *((_DWORD *)v35 + 2);
              if (v32 == 2)
              {
                int v8 = (*(uint64_t (**)(void))(v5 + 176))(*(void *)(v5 + 192));
                if (v8 < 0 || (v26 - 6) > 0x2E) {
                  goto LABEL_51;
                }
              }
              else
              {
                int v8 = (*(uint64_t (**)(void))(v5 + 176))(*(void *)(v5 + 192));
                if (v8 < 0) {
                  goto LABEL_50;
                }
                if ((v26 - 1) < 5)
                {
                  int v25 = 2;
LABEL_51:
                  BOOL v13 = v25 == 3;
                  int v32 = v25;
                  BOOL v12 = v25 == 2;
                  goto LABEL_31;
                }
                if ((v26 - 6) > 0x2E)
                {
LABEL_50:
                  int v25 = 1;
                  goto LABEL_51;
                }
              }
              unint64_t v15 = (unint64_t)(micro() * 1000000.0) / 0x3E8;
              if (v36) {
                unint64_t v16 = 0;
              }
              else {
                unint64_t v16 = 5000;
              }
              int v25 = 3;
              int v34 = 1;
              goto LABEL_51;
            }
            FreeSipMsg(v35);
            goto LABEL_51;
          }
          int v34 = 0;
          BOOL v13 = 0;
LABEL_71:
          if (!v13) {
            int v8 = -2146435049;
          }
LABEL_73:
          TPRemoveTransaction(*(void *)(v5 + 152), a1);
          if (v34) {
            goto LABEL_66;
          }
          goto LABEL_58;
        }
      }
      TPRemoveTransaction(*(void *)(v5 + 152), a1);
    }
LABEL_58:
    if ((unsigned __int16)v8 == 40)
    {
      uint64_t v27 = *(void *)(v5 + 168);
      int v28 = 32;
    }
    else if ((unsigned __int16)v8 == 23)
    {
      uint64_t v27 = *(void *)(v5 + 168);
      int v28 = 21;
    }
    else
    {
      uint64_t v27 = *(void *)(v5 + 168);
      if ((v8 & 0x40000000) != 0) {
        int v28 = 45;
      }
      else {
        int v28 = 42;
      }
    }
    CreateStatus((unint64_t *)&v35, v27, v28, 0, 0, 0, 0);
    (*(void (**)(void, void *))(v5 + 176))(*(void *)(v5 + 192), v35);
LABEL_66:
    CheckOutHandleDebug();
    TACloseHandle();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v29 = VRTraceErrorLogLevelToCSTR();
      uint64_t v30 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315906;
        uint64_t v38 = v29;
        __int16 v39 = 2080;
        int v40 = "TANonInviteClientProc";
        __int16 v41 = 1024;
        int v42 = 740;
        __int16 v43 = 1024;
        int v44 = v8;
        _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TANonInviteClientProc Thread end(%X)...", buf, 0x22u);
      }
    }
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      TANonInviteClientProc_cold_1();
    }
  }
  return 0;
}

uint64_t TAInviteServerProc(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v32 = -1431655766;
  uint64_t v30 = 0;
  uint64_t v31 = (void *)0xAAAAAAAAAAAAAAAALL;
  pthread_setname_np("com.apple.avconference.transaction.inviteserverproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v34 = v2;
      __int16 v35 = 2080;
      int v36 = "TAInviteServerProc";
      __int16 v37 = 1024;
      int v38 = 759;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TAInviteServerProc Thread start...", buf, 0x1Cu);
    }
  }
  uint64_t v4 = CheckInHandleDebug();
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        TAInviteServerProc_cold_1();
      }
    }
    return 0;
  }
  uint64_t v5 = v4;
  int v6 = partial apply(*(void *)(v4 + 152), 1, *(void *)(v4 + 168), (uint64_t)TAMsgCallback, a1);
  int v7 = v6;
  if (v6 < 0) {
    goto LABEL_73;
  }
  int Status = TPGetType(*(void *)(v5 + 152), &v32);
  if (Status < 0
    || (int Status = CreateStatus((unint64_t *)&v30, *(void *)(v5 + 168), 1, 0, 0, 0, 0), Status < 0))
  {
    int v7 = Status;
    goto LABEL_73;
  }
  int v7 = TPSend(*(void *)(v5 + 152));
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 24));
  *(_DWORD *)uint64_t v5 = v7;
  *(_DWORD *)(v5 + 4) = 1;
  pthread_cond_signal((pthread_cond_t *)(v5 + 88));
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 24));
  if (v7 < 0) {
    goto LABEL_73;
  }
  uint64_t v29 = (pthread_mutex_t *)(v5 + 24);
  unint64_t v9 = 0;
  unint64_t v10 = (unint64_t)(micro() * 1000000.0) / 0x3E8;
  int v11 = 2;
  unint64_t v12 = 500;
  unint64_t v13 = 0xFFFFFFFFLL;
  while (1)
  {
    if (v13 == 0xFFFFFFFF)
    {
      unint64_t v14 = 0xFFFFFFFFLL;
      goto LABEL_24;
    }
    unint64_t v15 = (unint64_t)(micro() * 1000000.0) / 0x3E8 - v10;
    BOOL v16 = v13 >= v15;
    unint64_t v17 = v13 - v15;
    if (v17 == 0 || !v16) {
      break;
    }
    if (v11 != 3 || v32 == 1)
    {
      unint64_t v14 = v17;
    }
    else
    {
      if (v12 >= v17) {
        unint64_t v14 = v17;
      }
      else {
        unint64_t v14 = v12;
      }
      if (2 * v12 >= *(void *)(v5 + 184)) {
        unint64_t v12 = *(void *)(v5 + 184);
      }
      else {
        v12 *= 2;
      }
      unint64_t v9 = v17;
    }
LABEL_24:
    unint64_t v18 = *(uint64_t **)(*(void *)(v5 + 168) + 272);
    if (v18) {
      uint64_t v19 = *v18;
    }
    else {
      uint64_t v19 = -1;
    }
    int v20 = MQGet(*(void *)(v5 + 144), &v31, v14, 1, v19);
    int v7 = v20;
    if (v20 < 0)
    {
      if ((unsigned __int16)v20 != 23 || v11 == 4)
      {
        if ((unsigned __int16)v20 == 23) {
          int v7 = 0;
        }
        else {
          int v7 = v20;
        }
        goto LABEL_73;
      }
      if (v11 != 3 || v32 || v14 == v9) {
        goto LABEL_73;
      }
      goto LABEL_59;
    }
    uint64_t v21 = v31;
    if (*(_DWORD *)v31 == 1)
    {
      int v22 = *((_DWORD *)v31 + 1);
      if (v22 == 1)
      {
        if (*((_DWORD *)v31 + 2) == 5)
        {
          FreeSipMsg(v31);
          goto LABEL_73;
        }
LABEL_52:
        FreeSipMsg(v21);
      }
      else
      {
        if (v11 != 2 || v22 != 2) {
          goto LABEL_52;
        }
        int v24 = *((_DWORD *)v31 + 2);
LABEL_63:
        FreeSipMsg(v30);
        uint64_t v30 = v31;
        int v7 = TPSend(*(void *)(v5 + 152));
        pthread_mutex_lock(v29);
        *(_DWORD *)uint64_t v5 = v7;
        *(_DWORD *)(v5 + 4) = 1;
        pthread_cond_signal((pthread_cond_t *)(v5 + 88));
        pthread_mutex_unlock(v29);
        if (v7 < 0 || (v24 & 0xFFFFFFFE) == 6) {
          goto LABEL_73;
        }
        if ((v24 - 8) > 0x2C)
        {
          int v11 = 2;
        }
        else
        {
          unint64_t v10 = (unint64_t)(micro() * 1000000.0) / 0x3E8;
          int v11 = 3;
          unint64_t v13 = 32000;
        }
      }
    }
    else
    {
      if (v11 == 4 && *(_DWORD *)v31 == 3) {
        goto LABEL_52;
      }
      int v24 = *((_DWORD *)v31 + 2);
      if (v11 == 2)
      {
        if (*((_DWORD *)v31 + 1) != 1 || v24 != 1) {
          goto LABEL_63;
        }
      }
      else
      {
        if (v11 != 3) {
          goto LABEL_52;
        }
        if (v24 != 1)
        {
          if (v24 == 2)
          {
            unint64_t v10 = (unint64_t)(micro() * 1000000.0) / 0x3E8;
            if (v32) {
              unint64_t v13 = 0;
            }
            else {
              unint64_t v13 = 5000;
            }
            int v11 = 4;
            uint64_t v21 = v31;
          }
          else
          {
            int v11 = 3;
          }
          goto LABEL_52;
        }
      }
      FreeSipMsg(v31);
LABEL_59:
      int v7 = TPSend(*(void *)(v5 + 152));
      if (v7 < 0) {
        goto LABEL_73;
      }
    }
  }
  if (v11 != 4) {
    int v7 = -2146435049;
  }
LABEL_73:
  if (v30) {
    FreeSipMsg(v30);
  }
  if ((v6 & 0x80000000) == 0) {
    TPRemoveTransaction(*(void *)(v5 + 152), a1);
  }
  CheckOutHandleDebug();
  TACloseHandle();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v26 = VRTraceErrorLogLevelToCSTR();
    uint64_t v27 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v34 = v26;
      __int16 v35 = 2080;
      int v36 = "TAInviteServerProc";
      __int16 v37 = 1024;
      int v38 = 944;
      __int16 v39 = 1024;
      int v40 = v7;
      _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TAInviteServerProc Thread end(%X)...", buf, 0x22u);
    }
  }
  return 0;
}

uint64_t TANonInviteServerProc(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v29 = -1431655766;
  int v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  pthread_setname_np("com.apple.avconference.transaction.noninviteserverproc");
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v31 = v2;
      __int16 v32 = 2080;
      double v33 = "TANonInviteServerProc";
      __int16 v34 = 1024;
      int v35 = 962;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TANonInviteServerProc Thread start...", buf, 0x1Cu);
    }
  }
  uint64_t v4 = CheckInHandleDebug();
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        TANonInviteServerProc_cold_1();
      }
    }
    return 0;
  }
  uint64_t v5 = v4;
  int v6 = partial apply(*(void *)(v4 + 152), 1, *(void *)(v4 + 168), (uint64_t)TAMsgCallback, a1);
  if (v6 < 0)
  {
    int v7 = v6;
    goto LABEL_72;
  }
  int v7 = TPGetType(*(void *)(v5 + 152), &v29);
  if (v7 < 0) {
    goto LABEL_71;
  }
  int v8 = 0;
  unint64_t v9 = (unint64_t)(micro() * 1000000.0) / 0x3E8;
  uint64_t v26 = (pthread_cond_t *)(v5 + 88);
  uint64_t v27 = (pthread_mutex_t *)(v5 + 24);
  int v10 = 1;
  unint64_t v11 = 0xFFFFFFFFLL;
  while (1)
  {
    unint64_t v12 = 0xFFFFFFFFLL;
    if (v11 != 0xFFFFFFFF)
    {
      unint64_t v13 = (unint64_t)(micro() * 1000000.0) / 0x3E8 - v9;
      unint64_t v12 = v11 - v13;
      if (v11 <= v13)
      {
        if (v10 != 3) {
          int v7 = -2146435049;
        }
        if (v8) {
          goto LABEL_70;
        }
        goto LABEL_71;
      }
    }
    uint64_t v14 = *(void *)(v5 + 168);
    unint64_t v15 = *(void **)(v14 + 272);
    uint64_t v16 = v15 ? *v15 : -1;
    int v17 = MQGet(*(void *)(v5 + 144), &v28, v12, *(_DWORD *)(v14 + 8), v16);
    int v7 = v17;
    if (v17 < 0) {
      break;
    }
    unint64_t v18 = v28;
    int v19 = *(_DWORD *)v28;
    if (*(_DWORD *)v28 == 1)
    {
      if (*((_DWORD *)v28 + 1) == 1 && *((_DWORD *)v28 + 2) == 5)
      {
        FreeSipMsg(v28);
LABEL_69:
        if (!v8) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      if (v10 == 3) {
        goto LABEL_21;
      }
      BOOL v20 = 0;
LABEL_22:
      int v21 = *((_DWORD *)v28 + 2);
      if (v10 == 2)
      {
        if (v20 && *((_DWORD *)v28 + 1) == 1)
        {
          FreeSipMsg(v28);
          int v7 = TPSend(*(void *)(v5 + 152));
          int v10 = 2;
          if (v7 < 0) {
            goto LABEL_69;
          }
        }
        else
        {
          FreeSipMsg(v8);
          int v8 = v28;
          int v7 = TPSend(*(void *)(v5 + 152));
          pthread_mutex_lock(v27);
          *(_DWORD *)uint64_t v5 = v7;
          *(_DWORD *)(v5 + 4) = 1;
          pthread_cond_signal(v26);
          pthread_mutex_unlock(v27);
          if (v7 < 0) {
            goto LABEL_69;
          }
          if ((v21 - 6) > 0x2E)
          {
            int v10 = 2;
          }
          else
          {
            unint64_t v9 = (unint64_t)(micro() * 1000000.0) / 0x3E8;
            if (v29) {
              unint64_t v11 = 0;
            }
            else {
              unint64_t v11 = 32000;
            }
LABEL_43:
            int v10 = 3;
          }
        }
      }
      else if (v10 == 3)
      {
        if (!v20 || *((_DWORD *)v28 + 1) != 1)
        {
          FreeSipMsg(v28);
          goto LABEL_43;
        }
        FreeSipMsg(v28);
        int v7 = TPSend(*(void *)(v5 + 152));
        int v10 = 3;
        if (v7 < 0) {
          goto LABEL_69;
        }
      }
      else
      {
        if (v8)
        {
          FreeSipMsg(v8);
          unint64_t v18 = v28;
        }
        int v7 = TPSend(*(void *)(v5 + 152));
        pthread_mutex_lock(v27);
        *(_DWORD *)uint64_t v5 = v7;
        *(_DWORD *)(v5 + 4) = 1;
        pthread_cond_signal(v26);
        pthread_mutex_unlock(v27);
        if (v7 < 0)
        {
          int v8 = v18;
          if (!v18) {
            goto LABEL_71;
          }
LABEL_70:
          FreeSipMsg(v8);
          goto LABEL_71;
        }
        if ((v21 - 1) >= 5)
        {
          if ((v21 - 6) > 0x2E)
          {
            int v10 = 1;
          }
          else
          {
            unint64_t v9 = (unint64_t)(micro() * 1000000.0) / 0x3E8;
            if (v29) {
              unint64_t v11 = 0;
            }
            else {
              unint64_t v11 = 32000;
            }
            int v10 = 3;
          }
        }
        else
        {
          int v10 = 2;
        }
        int v8 = v18;
      }
    }
    else
    {
      BOOL v20 = v19 == 3;
      if (v10 != 1 || v19 != 3) {
        goto LABEL_22;
      }
LABEL_21:
      FreeSipMsg(v28);
    }
  }
  if ((unsigned __int16)v17 == 23 && v10 == 3) {
    int v7 = 0;
  }
  else {
    int v7 = v17;
  }
  if (v8) {
    goto LABEL_70;
  }
LABEL_71:
  TPRemoveTransaction(*(void *)(v5 + 152), a1);
LABEL_72:
  CheckOutHandleDebug();
  TACloseHandle();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v23 = VRTraceErrorLogLevelToCSTR();
    int v24 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      uint64_t v31 = v23;
      __int16 v32 = 2080;
      double v33 = "TANonInviteServerProc";
      __int16 v34 = 1024;
      int v35 = 1127;
      __int16 v36 = 1024;
      int v37 = v7;
      _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TANonInviteServerProc Thread end(%X)...", buf, 0x22u);
    }
  }
  return 0;
}

uint64_t TASetRTT(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = CheckInHandleDebug();
  if (!v7) {
    return 2148532226;
  }
  *(_DWORD *)(v7 + 200) = a2;
  *(void *)(v7 + 208) = a3;
  *(_DWORD *)(v7 + 216) = *a4;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    unint64_t v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315906;
      uint64_t v12 = v8;
      __int16 v13 = 2080;
      uint64_t v14 = "TASetRTT";
      __int16 v15 = 1024;
      int v16 = 1202;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TASetRTT: %d ms", (uint8_t *)&v11, 0x22u);
    }
  }
  CheckOutHandleDebug();
  return 0;
}

uint64_t TAMsgCallback(uint64_t a1, void *a2)
{
  uint64_t v2 = 2148532225;
  if (a2)
  {
    uint64_t v4 = CheckInHandleDebug();
    if (v4)
    {
      *(_DWORD *)a2 = 3;
      uint64_t v2 = MQPut(*(void *)(v4 + 144), (uint64_t)a2, 0);
      if ((v2 & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            TAMsgCallback_cold_1();
          }
        }
        FreeSipMsg(a2);
      }
      CheckOutHandleDebug();
    }
    else
    {
      return 2148532226;
    }
  }
  return v2;
}

void _VCVideoReceiverDefault_SetExternalOutputLatency(uint64_t a1, double a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 1512) != 0xFFFFFFFFLL)
    {
      VideoReceiver_SetExternalOutputLatency(a2);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCVideoReceiverDefault_SetExternalOutputLatency_cold_1();
    }
  }
}

void _VCVideoReceiverDefault_RemoteFrameCallback(uint64_t a1, __CVBuffer *a2, long long *a3, uint64_t a4, int a5)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  VCVideoReceiverDefault_HandleRemoteFrame(a1, a2, (uint64_t)&v5, a4, a5);
}

void _VCVideoReceiverDefault_SampleBufferCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void *)MEMORY[0x1E4E56580](a1 + 40);
  (*(void (**)(const void *, uint64_t, BOOL))(a1 + 24))(v4, a2, *(unsigned char *)(a1 + 1552) == 0);
  CFRelease(v4);
  if (!*(unsigned char *)(a1 + 1552))
  {
    *(unsigned char *)(a1 + 1552) = 1;
    uint64_t v5 = *(void *)(a1 + 1576);
    if (v5)
    {
      VCVideoStreamRateAdaptationFeedbackOnly_SetDidReceiveVideo(v5, 1);
    }
  }
}

uint64_t streamSwitchCallback(void *a1, const char *a2, uint64_t a3)
{
  return [a1 didSwitchFromStreamID:a2 toStreamID:a3];
}

uint64_t keyFrameGenerationCallback(void *a1, const char *a2, uint64_t a3)
{
  return [a1 handleRequestingKeyFrameGenerationWithStreamID:a2 firType:a3];
}

uint64_t _VCVideoReceiverDefault_ModeSwitchCallback(void *a1, uint64_t a2)
{
  [a1 setMode:a2];
  [a1 setUpRemoteAspectRatios];

  return [a1 setShouldUpdateRemoteScreenAttributes:1];
}

void VCVideoReceiverDefault_HandleRemoteFrame(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = 0;
  CFTypeRef cf = 0;
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  long long v65 = *MEMORY[0x1E4F1DB28];
  long long v66 = v8;
  if ((a4 & 0x80) == 0) {
    goto LABEL_50;
  }
  int v11 = a4 & 0x30;
  if (v11 == 16) {
    VideoUtil_GetVisibleRectForScreen(pixelBuffer, (double *)&v65);
  }
  else {
    VideoUtil_GetVisibleRect(pixelBuffer, (double *)&v65);
  }
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  unint64_t v13 = Height;
  BOOL v14 = *(unsigned char *)(a1 + 1592) != 0;
  if (*(unsigned char *)(a1 + 1681))
  {
    if (*(unsigned char *)(a1 + 1592))
    {
      if (!a5) {
        goto LABEL_15;
      }
    }
    else if (a5)
    {
      BOOL v14 = 1;
      goto LABEL_11;
    }
    *(unsigned char *)(a1 + 1681) = 0;
  }
LABEL_11:
  if (v11 == 16 || !v14)
  {
LABEL_15:
    double v16 = (double)Width;
    double v17 = (double)Height;
    double v18 = *((double *)&v66 + 1) / (double)Height;
    if (*(double *)&v66 > (double)Width || *((double *)&v66 + 1) > v17)
    {
      float v22 = *(double *)&v66 / v16;
      float v20 = v18;
      double v21 = *((double *)&v65 + 1);
      if (v22 <= v20)
      {
        double v23 = (float)(v22 / v20);
        double v18 = 1.0;
        float v22 = v20;
      }
      else
      {
        double v18 = (float)(v20 / v22);
        double v23 = 1.0;
      }
    }
    else
    {
      double v21 = *((double *)&v65 + 1);
      float v22 = 1.0;
      double v23 = *(double *)&v66 / v16;
    }
    double v25 = v21 / v17;
    double v26 = *(double *)&v65 / v16;
    if (v11 == 16 && *(unsigned char *)(a1 + 1680))
    {
      double v26 = 0.0;
      double v25 = 0.0;
    }
    uint64_t v27 = [VideoAttributes alloc];
    double v28 = (double)CVPixelBufferGetWidth(pixelBuffer);
    size_t v29 = CVPixelBufferGetHeight(pixelBuffer);
    *(float *)&double v30 = v22;
    int v24 = -[VideoAttributes initWithCameraStatusBits:aspectRatio:contentsRect:scaleFactor:](v27, "initWithCameraStatusBits:aspectRatio:contentsRect:scaleFactor:", a4, v28, (double)v29, v26, v25, v23, v18, v30);
    CFTypeRef cf = v24;
    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 1552)) {
    BOOL v15 = *(unsigned char *)(a1 + 1554) != 0;
  }
  else {
    BOOL v15 = 1;
  }
  VCCallSession_SetUpRemoteAttributes(pixelBuffer, a4, *(unsigned char *)(a1 + 1664) != 0, v15, *(double *)(a1 + 1632), *(double *)(a1 + 1640), *(double *)(a1 + 1648), *(double *)(a1 + 1656), *(double *)(a1 + 1600), *(double *)(a1 + 1608), *(double *)(a1 + 1616), *(double *)(a1 + 1624), *(unsigned __int8 *)(a1 + 1666), *(void *)(a1 + 1544), (uint64_t *)&cf, &v67);
  int v24 = (VideoAttributes *)cf;
LABEL_29:
  if (VCVideoAttributes_IsEqual(*(void *)(a1 + 1544), (uint64_t)v24))
  {

    CFTypeRef cf = 0;
  }
  else
  {
    *(void *)&long long v31 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v84 = v31;
    long long v85 = v31;
    long long v82 = v31;
    long long v83 = v31;
    *(_OWORD *)&time[32] = v31;
    long long v81 = v31;
    *(_OWORD *)CMTime time = v31;
    *(_OWORD *)&time[16] = v31;
    VideoUtil_StringVisibleRect((double *)&v65, time, 0x80uLL);
    __int16 v32 = *(const void **)(a1 + 1544);
    if (v32) {
      CFRelease(v32);
    }
    CFTypeRef v33 = cf;
    if (cf) {
      CFTypeRef v33 = CFRetain(cf);
    }
    *(void *)(a1 + 1544) = v33;
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    int v35 = (os_log_t *)MEMORY[0x1E4F47A50];
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v36 = VRTraceErrorLogLevelToCSTR();
      int v37 = *v35;
      if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v70 = v36;
        __int16 v71 = 2080;
        unint64_t v72 = "VCVideoReceiverDefault_HandleRemoteFrame";
        __int16 v73 = 1024;
        int v74 = 536;
        __int16 v75 = 1024;
        *(_DWORD *)__int16 v76 = Width;
        *(_WORD *)&v76[4] = 1024;
        *(_DWORD *)&v76[6] = v13;
        _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [AR_RX] frameWidth=%d, frameHeight=%d", buf, 0x28u);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v38 = VRTraceErrorLogLevelToCSTR();
      __int16 v39 = *v35;
      if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = *(void *)(a1 + 1344);
        *(_DWORD *)pthread_attr_t buf = 136316418;
        uint64_t v70 = v38;
        __int16 v71 = 2080;
        unint64_t v72 = "VCVideoReceiverDefault_HandleRemoteFrame";
        __int16 v73 = 1024;
        int v74 = 537;
        __int16 v75 = 2112;
        *(void *)__int16 v76 = v40;
        *(_WORD *)&v76[8] = 2080;
        double v77 = COERCE_DOUBLE(time);
        __int16 v78 = 2112;
        CFTypeRef v79 = cf;
        _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [AR_RX] participantUUID=%@ visibleRect=%s remoteVideoAttributes=%@ ", buf, 0x3Au);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v41 = VRTraceErrorLogLevelToCSTR();
      int v42 = *v35;
      if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
      {
        double v43 = 0.0;
        double v44 = 0.0;
        if (*((double *)&v66 + 1) != 0.0) {
          double v44 = *(double *)&v66 / *((double *)&v66 + 1);
        }
        if (v13)
        {
          objc_msgSend((id)cf, "contentsRect", *((double *)&v66 + 1));
          if (v45 != 0.0)
          {
            [(id)cf contentsRect];
            double v47 = v46 * (double)Width;
            [(id)cf contentsRect];
            double v43 = v47 / (v48 * (double)v13);
          }
        }
        *(_DWORD *)pthread_attr_t buf = 136316162;
        uint64_t v70 = v41;
        __int16 v71 = 2080;
        unint64_t v72 = "VCVideoReceiverDefault_HandleRemoteFrame";
        __int16 v73 = 1024;
        int v74 = 540;
        __int16 v75 = 2048;
        *(double *)__int16 v76 = v44;
        *(_WORD *)&v76[8] = 2048;
        double v77 = v43;
        _os_log_impl(&dword_1E1EA4000, v42, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [AR_RX] AspectRatio fromVisibleRect=%.3f, fromContentRect=%.3f", buf, 0x30u);
      }
    }
  }
  *(_DWORD *)(a1 + 16) = a4 & 3;
LABEL_50:
  uint64_t v49 = *(void *)(a1 + 1688);
  if (v49) {
    VCVideoHardwareDumpCollector_RecordDecodedFrame(v49, pixelBuffer, *(void **)(a1 + 1544));
  }
  long long v50 = (const void *)MEMORY[0x1E4E56580](a1 + 40);
  int v51 = *(void (**)(const void *, CVPixelBufferRef, unsigned char *, CFTypeRef, VideoAttributes *, BOOL))(a1 + 32);
  BOOL v52 = *(unsigned char *)(a1 + 1552) == 0;
  *(_OWORD *)CMTime time = *(_OWORD *)a3;
  *(void *)&time[16] = *(void *)(a3 + 16);
  v51(v50, pixelBuffer, time, cf, v67, v52);
  CFRelease(v50);
  if (!*(unsigned char *)(a1 + 1552))
  {
    if (objc_opt_class() == a1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 7
        || (uint64_t v54 = VRTraceErrorLogLevelToCSTR(),
            uint64_t v55 = *MEMORY[0x1E4F47A50],
            !os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)))
      {
LABEL_64:
        *(unsigned char *)(a1 + 1552) = 1;
        uint64_t v63 = *(void *)(a1 + 1576);
        if (v63) {
          VCVideoStreamRateAdaptationFeedbackOnly_SetDidReceiveVideo(v63, 1);
        }
        goto LABEL_66;
      }
      *(_OWORD *)CMTime time = *(_OWORD *)a3;
      *(void *)&time[16] = *(void *)(a3 + 16);
      Float64 Seconds = CMTimeGetSeconds((CMTime *)time);
      *(_DWORD *)CMTime time = 136315906;
      *(void *)&time[4] = v54;
      *(_WORD *)&time[12] = 2080;
      *(void *)&time[14] = "VCVideoReceiverDefault_HandleRemoteFrame";
      *(_WORD *)&time[22] = 1024;
      *(_DWORD *)&time[24] = 558;
      *(_WORD *)&unsigned char time[28] = 2048;
      *(Float64 *)&time[30] = Seconds;
      int v57 = " [%s] %s:%d frameTime=%f";
      uint64_t v58 = v55;
      uint32_t v59 = 38;
    }
    else
    {
      if (objc_opt_respondsToSelector()) {
        double v53 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
      }
      else {
        double v53 = &stru_1F3D3E450;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        goto LABEL_64;
      }
      uint64_t v60 = VRTraceErrorLogLevelToCSTR();
      uint64_t v61 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_64;
      }
      *(_OWORD *)CMTime time = *(_OWORD *)a3;
      *(void *)&time[16] = *(void *)(a3 + 16);
      Float64 v62 = CMTimeGetSeconds((CMTime *)time);
      *(_DWORD *)CMTime time = 136316418;
      *(void *)&time[4] = v60;
      *(_WORD *)&time[12] = 2080;
      *(void *)&time[14] = "VCVideoReceiverDefault_HandleRemoteFrame";
      *(_WORD *)&time[22] = 1024;
      *(_DWORD *)&time[24] = 558;
      *(_WORD *)&unsigned char time[28] = 2112;
      *(void *)&time[30] = v53;
      *(_WORD *)&time[38] = 2048;
      *(void *)&time[40] = a1;
      LOWORD(v81) = 2048;
      *(Float64 *)((char *)&v81 + 2) = v62;
      int v57 = " [%s] %s:%d %@(%p) frameTime=%f";
      uint64_t v58 = v61;
      uint32_t v59 = 58;
    }
    _os_log_impl(&dword_1E1EA4000, v58, OS_LOG_TYPE_DEFAULT, v57, time, v59);
    goto LABEL_64;
  }
LABEL_66:
  *(unsigned char *)(a1 + 1554) = 0;
}

void sub_1E20F0DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E20F1614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t VCVideoEncoderVTInitialize(uint64_t result)
{
  *(void *)uint64_t result = EncoderVT_VTable;
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0xFFFFFFFFLL;
  return result;
}

uint64_t EncoderVTCreateHandle(uint64_t *a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2148007937;
  if (*(_DWORD *)a2 && *(_DWORD *)(a2 + 4))
  {
    uint64_t v5 = malloc_type_calloc(1uLL, 0x18uLL, 0xA0040114AFA65uLL);
    if (!v5) {
      return 2148007939;
    }
    uint64_t v6 = (VTSessionRef *)v5;
    *uint64_t v5 = *(_OWORD *)(a2 + 104);
    uint64_t v7 = (VTCompressionSessionRef *)(v5 + 1);
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unint64_t v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int32_t valuePtr = *(_DWORD *)a2;
    CFNumberRef v12 = CFNumberCreate(v8, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24E10], v12);
    CFRelease(v12);
    int32_t valuePtr = *(_DWORD *)(a2 + 4);
    CFNumberRef v13 = CFNumberCreate(v8, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D08], v13);
    CFRelease(v13);
    int32_t valuePtr = 875704438;
    CFNumberRef v14 = CFNumberCreate(v8, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], v14);
    CFRelease(v14);
    CFDictionaryRef v15 = CFDictionaryCreateMutable(v8, 2, v9, v10);
    uint64_t v3 = VTCompressionSessionCreate(0, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), 0x61766331u, v15, Mutable, 0, *(VTCompressionOutputCallback *)(a2 + 104), *(void **)(a2 + 112), v7);
    if (v3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          EncoderVTCreateHandle_cold_4();
        }
      }
LABEL_29:
      if (v15) {
        CFRelease(v15);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (*v7)
      {
        VTCompressionSessionInvalidate(*v7);
        CFRelease(*v7);
      }
      free(v6);
      return v3;
    }
    double v18 = (const void *)*MEMORY[0x1E4F1CFD0];
    VTSessionSetProperty(*v7, (CFStringRef)*MEMORY[0x1E4F44AC0], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    VTSessionSetProperty(*v7, (CFStringRef)*MEMORY[0x1E4F44920], (CFTypeRef)*MEMORY[0x1E4F44F98]);
    VTSessionSetProperty(*v7, (CFStringRef)*MEMORY[0x1E4F447D0], (CFTypeRef)*MEMORY[0x1E4F1CFC8]);
    uint64_t v19 = *(const void **)(a2 + 136);
    VTCompressionSessionRef v20 = *v7;
    CFStringRef v21 = (const __CFString *)*MEMORY[0x1E4F44AA0];
    if (v19)
    {
      OSStatus v22 = VTSessionSetProperty(v20, v21, v19);
      if (v22)
      {
        OSStatus v23 = v22;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v31 = VRTraceErrorLogLevelToCSTR();
          log = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = *(void *)(a2 + 136);
            *(_DWORD *)pthread_attr_t buf = 136316162;
            uint64_t v35 = v31;
            __int16 v36 = 2080;
            int v37 = "EncoderVTCreateHandle";
            __int16 v38 = 1024;
            int v39 = 121;
            __int16 v40 = 2112;
            uint64_t v41 = v24;
            __int16 v42 = 1024;
            OSStatus v43 = v23;
            _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to set profile level property to %@ with error status=%d", buf, 0x2Cu);
          }
        }
      }
    }
    else
    {
      VTSessionSetProperty(v20, v21, (CFTypeRef)*MEMORY[0x1E4F452A0]);
    }
    VTSessionSetProperty(v6[2], (CFStringRef)*MEMORY[0x1E4F447E8], v18);
    int32_t valuePtr = *(_DWORD *)(a2 + 8);
    CFNumberRef v25 = CFNumberCreate(v8, kCFNumberIntType, &valuePtr);
    VTSessionSetProperty(v6[2], (CFStringRef)*MEMORY[0x1E4F449D0], v25);
    CFRelease(v25);
    uint64_t Handle = CreateHandle();
    *a1 = Handle;
    if (Handle == 0xFFFFFFFFLL) {
      goto LABEL_29;
    }
    uint64_t v27 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
    if (v27)
    {
      CFNumberRef v28 = CFNumberCreate(v8, kCFNumberIntType, (const void *)(a2 + 32));
      if (v28)
      {
        CFNumberRef v29 = v28;
        CFArrayAppendValue(v27, v28);
        EncoderVTSetBitRate(*a1, v27);
        if (!v15)
        {
LABEL_23:
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v29) {
            CFRelease(v29);
          }
          if (v27) {
            CFRelease(v27);
          }
          return v3;
        }
LABEL_22:
        CFRelease(v15);
        goto LABEL_23;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          EncoderVTCreateHandle_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        EncoderVTCreateHandle_cold_2();
      }
    }
    CFNumberRef v29 = 0;
    if (!v15) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    double v17 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      EncoderVTCreateHandle_cold_1(v16, (int *)a2, v17);
    }
  }
  return v3;
}

uint64_t EncoderVTCloseHandle()
{
  uint64_t v0 = CheckInHandleDebug();
  if (!v0) {
    return 2148007938;
  }
  uint64_t v1 = (void *)v0;
  CheckOutHandleDebug();
  uint64_t v2 = (OpaqueVTCompressionSession *)v1[2];
  if (v2)
  {
    VTCompressionSessionInvalidate(v2);
    uint64_t v3 = (const void *)v1[2];
    if (v3) {
      CFRelease(v3);
    }
  }
  free(v1);
  return 0;
}

uint64_t EncoderVTSetThermalLevel()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v0 = VRTraceErrorLogLevelToCSTR();
    uint64_t v1 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315650;
      uint64_t v4 = v0;
      __int16 v5 = 2080;
      uint64_t v6 = "EncoderVTSetThermalLevel";
      __int16 v7 = 1024;
      int v8 = 192;
      _os_log_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d not implemented!", (uint8_t *)&v3, 0x1Cu);
    }
  }
  return 0;
}

uint64_t EncoderVTSetBitRate(int a1, CFArrayRef theArray)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2148007938;
  int valuePtr = 0;
  if (!theArray) {
    return 2148007937;
  }
  CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, 0);
  if (!ValueAtIndex) {
    return 2148007937;
  }
  CFNumberRef v4 = ValueAtIndex;
  CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
  uint64_t v5 = CheckInHandleDebug();
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = valuePtr / 8;
    int v15 = 1065353216;
    int v16 = valuePtr / 8;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136316418;
        uint64_t v19 = v8;
        __int16 v20 = 2080;
        CFStringRef v21 = "EncoderVTSetBitRate";
        __int16 v22 = 1024;
        int v23 = 217;
        __int16 v24 = 1024;
        int v25 = valuePtr;
        __int16 v26 = 1024;
        int v27 = v7;
        __int16 v28 = 2048;
        uint64_t v29 = 0x3FF0000000000000;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d bitrateBps:%d, dataSizeBytes:%d, duration:%f", buf, 0x32u);
      }
    }
    if (VTSessionSetProperty(*(VTSessionRef *)(v6 + 16), (CFStringRef)*MEMORY[0x1E4F44810], v4))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          EncoderVTSetBitRate_cold_3();
        }
      }
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v16);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    CFNumberRef v13 = CFNumberCreate(v11, kCFNumberFloat32Type, &v15);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
    if (VTSessionSetProperty(*(VTSessionRef *)(v6 + 16), (CFStringRef)*MEMORY[0x1E4F44898], Mutable))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          EncoderVTSetBitRate_cold_2();
        }
      }
    }
    CFRelease(Mutable);
    CheckOutHandleDebug();
    return 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      EncoderVTSetBitRate_cold_1();
    }
  }
  return v2;
}

uint64_t EncoderVTEncodeFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  VTEncodeInfoFlags infoFlagsOut = 0;
  int v3 = (void *)CheckInHandleDebug();
  if (v3)
  {
    if (*v3)
    {
      CFNumberRef v4 = (OpaqueVTCompressionSession *)v3[2];
      if (v4)
      {
        uint64_t v5 = *(__CVBuffer **)(a2 + 88);
        CFDictionaryRef v6 = *(const __CFDictionary **)(a2 + 320);
        CMTime presentationTimeStamp = *(CMTime *)(a2 + 292);
        CMTime v9 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        uint64_t v7 = VTCompressionSessionEncodeFrame(v4, v5, &presentationTimeStamp, &v9, v6, (void *)a2, &infoFlagsOut);
        if (v7)
        {
          if (v7 == -12912)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                EncoderVTEncodeFrame_cold_5();
              }
            }
            uint64_t v7 = 4294954384;
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              EncoderVTEncodeFrame_cold_4();
            }
          }
        }
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            EncoderVTEncodeFrame_cold_3();
          }
        }
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 2148007957;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          EncoderVTEncodeFrame_cold_2();
          uint64_t v7 = 2148007957;
        }
      }
    }
    CheckOutHandleDebug();
  }
  else
  {
    uint64_t v7 = 2148007938;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        EncoderVTEncodeFrame_cold_1();
      }
    }
  }
  return v7;
}

uint64_t EncoderVTGenerateKeyFrame()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v0 = VRTraceErrorLogLevelToCSTR();
    uint64_t v1 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315650;
      uint64_t v4 = v0;
      __int16 v5 = 2080;
      CFDictionaryRef v6 = "EncoderVTGenerateKeyFrame";
      __int16 v7 = 1024;
      int v8 = 285;
      _os_log_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d not implemented!", (uint8_t *)&v3, 0x1Cu);
    }
  }
  return 0;
}

uint64_t EncoderVTSendImgDesc()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v0 = VRTraceErrorLogLevelToCSTR();
    uint64_t v1 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315650;
      uint64_t v4 = v0;
      __int16 v5 = 2080;
      CFDictionaryRef v6 = "EncoderVTSendImgDesc";
      __int16 v7 = 1024;
      int v8 = 290;
      _os_log_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d not implemented!", (uint8_t *)&v3, 0x1Cu);
    }
  }
  return 0;
}

uint64_t EncoderVTPixelBufferFromPool()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v0 = VRTraceErrorLogLevelToCSTR();
    uint64_t v1 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315650;
      uint64_t v4 = v0;
      __int16 v5 = 2080;
      CFDictionaryRef v6 = "EncoderVTPixelBufferFromPool";
      __int16 v7 = 1024;
      int v8 = 295;
      _os_log_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d not implemented!", (uint8_t *)&v3, 0x1Cu);
    }
  }
  return 0;
}

uint64_t EncoderVTSetEncodingMode()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v0 = VRTraceErrorLogLevelToCSTR();
    uint64_t v1 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315650;
      uint64_t v4 = v0;
      __int16 v5 = 2080;
      CFDictionaryRef v6 = "EncoderVTSetEncodingMode";
      __int16 v7 = 1024;
      int v8 = 300;
      _os_log_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d not implemented!", (uint8_t *)&v3, 0x1Cu);
    }
  }
  return 0;
}

uint64_t VCConnectionManager_CopyPrimaryConnection(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(uint64_t (**)(void))(a1 + 40);
    return v1();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        int v8 = "VCConnectionManager_CopyPrimaryConnection";
        __int16 v9 = 1024;
        int v10 = 200;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
      }
    }
    return 0;
  }
}

void VCConnectionManager_SetPrimaryConnection(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void (**)(void))(a1 + 48);
    v1();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      __int16 v7 = "VCConnectionManager_SetPrimaryConnection";
      __int16 v8 = 1024;
      int v9 = 208;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

void VCConnectionManager_UseCellPrimaryInterface(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (void (*)(uint64_t, int))_classVTable[0];
    v2(a1, a2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    int v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315650;
      uint64_t v6 = v3;
      __int16 v7 = 2080;
      __int16 v8 = "VCConnectionManager_UseCellPrimaryInterface";
      __int16 v9 = 1024;
      int v10 = 2747;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
    }
  }
}

void VCConnectionManager_UpdateConnectionForDuplication(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void (**)(void))(a1 + 16);
    v1();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      __int16 v7 = "VCConnectionManager_UpdateConnectionForDuplication";
      __int16 v8 = 1024;
      int v9 = 3220;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

uint64_t VCConnectionManager_SetOverlayLinkDetails(uint64_t result, uint64_t a2, int a3, char a4)
{
  if (result && a2)
  {
    uint64_t v5 = result;
    if (a3)
    {
      *(unsigned char *)(result + 3507) = a4;
      uint64_t v6 = 3510;
      uint64_t v7 = 3509;
      uint64_t v8 = 3508;
    }
    else
    {
      uint64_t v6 = 3506;
      uint64_t v7 = 3505;
      uint64_t v8 = 3504;
    }
    *(unsigned char *)(result + v8) = VCConnection_IsLocalOnCellular(a2);
    *(unsigned char *)(v5 + v7) = VCConnection_IsRemoteOnCellular(a2);
    *(unsigned char *)(v5 + v6) = VCConnection_IsRelay(a2);
    uint64_t result = *(void *)(v5 + 3496);
    if (result)
    {
      uint64_t v9 = *(void *)(result + 40);
      if (v9)
      {
        unint64_t v10 = *(unsigned int *)(v5 + 3504) | ((unint64_t)(*(unsigned __int16 *)(v5 + 3508) | (*(unsigned __int8 *)(v5 + 3510) << 16)) << 32);
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(v5 + 3504);
        *(unsigned char *)(v9 + 14) = BYTE6(v10);
        *(_WORD *)(v9 + 12) = WORD2(v10);
        return VCOverlaySource_Write(result);
      }
    }
  }
  return result;
}

void VCConnectionManager_AddTelemetryForConnection(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", VCConnection_GetDataMode(a2)), @"connectionDataMode");
    if (VCConnection_IsLocalOnCellular(a2))
    {
      objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", VCConnection_LocalCellTech(a2)), @"LCTCH");
      objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", VCConnection_IsLocalExpensive(a2)), @"LXPNSV");
    }
    if (VCConnection_IsRemoteOnCellular(a2))
    {
      objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", VCConnection_RemoteCellTech(a2)), @"RCTCH");
      uint64_t v5 = (void *)[NSNumber numberWithInt:VCConnection_IsRemoteExpensive(a2)];
      uint64_t v6 = a3;
    }
    else
    {
      [a3 setObject:&unk_1F3DC4668 forKeyedSubscript:@"RCTCH"];
      uint64_t v6 = a3;
      uint64_t v5 = &unk_1F3DC4668;
    }
    [v6 setObject:v5 forKeyedSubscript:@"RXPNSV"];
    uint64_t v9 = [NSNumber numberWithInt:VCConnection_ReportingIPVersion(a2)];
    [a3 setObject:v9 forKeyedSubscript:@"IPVER"];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    uint64_t v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315650;
      uint64_t v11 = v7;
      __int16 v12 = 2080;
      CFNumberRef v13 = "VCConnectionManager_AddTelemetryForConnection";
      __int16 v14 = 1024;
      int v15 = 774;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil manager passed", (uint8_t *)&v10, 0x1Cu);
    }
  }
}

uint64_t VCConnectionManager_ConnectionInterfaceType(uint64_t a1, int a2)
{
  if (a2)
  {
    if (VCConnection_IsLocalOnWiFiOrWired(a1))
    {
      if (VCConnection_IsLocalOnWired(a1))
      {
LABEL_4:
        uint64_t v3 = @"Wired";
LABEL_8:
        return [(__CFString *)v3 UTF8String];
      }
LABEL_7:
      uint64_t v3 = @"NonCellular";
      goto LABEL_8;
    }
    VCConnection_IsLocalOnCellular(a1);
    VCConnection_LocalCellTech(a1);
  }
  else
  {
    if (VCConnection_IsRemoteOnWiFiOrWired(a1))
    {
      if (VCConnection_IsRemoteOnWired(a1)) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
    VCConnection_IsRemoteOnCellular(a1);
    VCConnection_RemoteCellTech(a1);
  }

  return CelltechToStr();
}

void VCConnectionManager_AddDuplicationSelectionLogicTelemetryForConnection(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      uint64_t v7 = NSString;
      uint64_t v8 = VCConnection_IsRelay(a2) ? "relay" : "p2p";
      objc_msgSend(a4, "setObject:forKeyedSubscript:", objc_msgSend(v7, "stringWithUTF8String:", v8), @"ConnectionType");
      objc_msgSend(a4, "setObject:forKeyedSubscript:", objc_msgSend(NSString, "stringWithUTF8String:", VCConnectionManager_ConnectionInterfaceType(a2, 1)), @"LocalInterfaceType");
      objc_msgSend(a4, "setObject:forKeyedSubscript:", objc_msgSend(NSString, "stringWithUTF8String:", VCConnectionManager_ConnectionInterfaceType(a2, 0)), @"RemoteInterfaceType");
      uint64_t v9 = NSString;
      int v10 = VCConnection_IsIPv6(a2) ? "IPv6" : "IPv4";
      objc_msgSend(a4, "setObject:forKeyedSubscript:", objc_msgSend(v9, "stringWithUTF8String:", v10), @"ConnFmly");
      uint64_t v11 = NSString;
      __int16 v12 = VCConnection_IsEndToEndLink(a2) ? "1" : "0";
      objc_msgSend(a4, "setObject:forKeyedSubscript:", objc_msgSend(v11, "stringWithUTF8String:", v12), @"EndToEnd");
      if (a3)
      {
        [a4 setObject:a3 forKeyedSubscript:@"SLTS"];
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    __int16 v14 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136315650;
      uint64_t v16 = v13;
      __int16 v17 = 2080;
      double v18 = "VCConnectionManager_AddDuplicationSelectionLogicTelemetryForConnection";
      __int16 v19 = 1024;
      int v20 = 812;
      _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil manager passed", (uint8_t *)&v15, 0x1Cu);
    }
  }
}

void VCConnectionManager_AddTelemetryForPacketHistory(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v4 = (pthread_rwlock_t *)(a1 + 104);
    pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 104));
    [*(id *)(a1 + 2928) addConnectionBasedTopPacketCountsTelemetry:a2 reportingKey:@"ULPH" mapLinkIDToLinkUUID:*(void *)(a1 + 2936) isOutgoing:1];
    [*(id *)(a1 + 2928) addConnectionBasedTopPacketCountsTelemetry:a2 reportingKey:@"DLPH" mapLinkIDToLinkUUID:*(void *)(a1 + 2936) isOutgoing:0];
    pthread_rwlock_unlock(v4);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315650;
      uint64_t v8 = v5;
      __int16 v9 = 2080;
      int v10 = "VCConnectionManager_AddTelemetryForPacketHistory";
      __int16 v11 = 1024;
      int v12 = 833;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil manager passed", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

void VCConnectionManager_AddTelemetryForPacketHistoryInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    [*(id *)(a1 + 2928) addConnectionBasedTopPacketCountsTelemetry:a2 reportingKey:@"ULPH" mapLinkIDToLinkUUID:*(void *)(a1 + 2936) isOutgoing:1];
    int v4 = *(void **)(a1 + 2928);
    uint64_t v5 = *(void *)(a1 + 2936);
    [v4 addConnectionBasedTopPacketCountsTelemetry:a2 reportingKey:@"DLPH" mapLinkIDToLinkUUID:v5 isOutgoing:0];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    int v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315650;
      uint64_t v9 = v6;
      __int16 v10 = 2080;
      __int16 v11 = "VCConnectionManager_AddTelemetryForPacketHistoryInternal";
      __int16 v12 = 1024;
      int v13 = 844;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil manager passed", (uint8_t *)&v8, 0x1Cu);
    }
  }
}

void VCConnectionManager_AddLinkProbingTelemetry(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void (**)(void))(a1 + 72);
    v1();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      int v7 = "VCConnectionManager_AddLinkProbingTelemetry";
      __int16 v8 = 1024;
      int v9 = 859;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

void VCConnectionManager_SetDuplicationEnabledInternal(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (void (*)(uint64_t, int))off_1EB5E63A8[0];
    v2(a1, a2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    int v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315650;
      uint64_t v6 = v3;
      __int16 v7 = 2080;
      __int16 v8 = "VCConnectionManager_SetDuplicationEnabledInternal";
      __int16 v9 = 1024;
      int v10 = 867;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
    }
  }
}

void VCConnectionManager_SetPreWarmState(uint64_t a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 501) != a2)
    {
      *(unsigned char *)(a1 + 501) = a2;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v3 = VRTraceErrorLogLevelToCSTR();
        int v4 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v5 = *(unsigned __int8 *)(a1 + 501);
          uint64_t v6 = "not";
          __int16 v7 = "Start";
          *(_DWORD *)pthread_attr_t buf = 136316418;
          uint64_t v11 = v3;
          int v13 = "VCConnectionManager_SetPreWarmState";
          __int16 v12 = 2080;
          if (v5) {
            uint64_t v6 = "";
          }
          __int16 v14 = 1024;
          if (!v5) {
            __int16 v7 = "Stop";
          }
          int v15 = 988;
          __int16 v16 = 1024;
          int v17 = v5;
          __int16 v18 = 2080;
          __int16 v19 = v6;
          __int16 v20 = 2080;
          uint64_t v21 = v7;
          _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: set _isPreWarmStateEnabled state to %d. Do %s duplicate the RTCP packets. %s active probing on links", buf, 0x36u);
        }
      }
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 104));
      VCConnectionManager_SetActiveLinkProbingEnabled(a1, *(unsigned __int8 *)(a1 + 501));
      VCConnectionManager_AlertStateUpdated((void *)a1, *(unsigned __int8 *)(a1 + 501), 1);
      pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 104));
      uint64_t v9 = objc_msgSend(NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 501), @"WRMLocAlrtUpdate");
      [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v9 forKeys:&v8 count:1];
      reportingGenericEvent();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCConnectionManager_SetPreWarmState_cold_1();
    }
  }
}

void VCConnectionManager_SetActiveLinkProbingEnabled(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    int v5 = *(void **)(a1 + 336);
    uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v11 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * i);
          if (VCConnectionManager_IsDuplicationConnectionCandidate(a1, v10)) {
            objc_msgSend(v4, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", VCConnection_ConnectionID(v10)));
          }
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v11 count:16];
      }
      while (v7);
    }
    if (a2)
    {
      [*(id *)(a1 + 776) startActiveProbingOnLinks:v4];
    }
    else if (!*(unsigned char *)(a1 + 501) {
           && !*(unsigned char *)(a1 + 502)
    }
           && !VCDuplicationHandler_IsDuplicationEnabled(*(void *)(a1 + 632)))
    {
      [*(id *)(a1 + 776) stopActiveProbingOnLinks:v4 resetStats:1];
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCConnectionManager_SetActiveLinkProbingEnabled_cold_1();
    }
  }
}

void VCConnectionManager_AlertStateUpdated(void *a1, int a2, int a3)
{
  if (a1)
  {
    id v4 = (unsigned char *)a1[79];
    uint64_t v5 = 0x1000000000000;
    if (!a3) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = 12;
    if (a2) {
      uint64_t v6 = 0x10000000000000CLL;
    }
    if (VCDuplicationHandler_HandleDuplicationStateUpdateEvent(v4, v6 | v5, 0))
    {
      int v7 = [a1 isDuplicationEnabled];
      uint64_t v8 = (void (*)(uint64_t, int))off_1EB5E63A8[0];
      v8((uint64_t)a1, v7);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCConnectionManager_AlertStateUpdated_cold_1();
    }
  }
}

uint64_t VCConnectionManager_ProcessWRMNotification(uint64_t a1, _DWORD *a2)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCConnectionManager_ProcessWRMNotification_cold_1();
      }
    }
    return 1;
  }
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCConnectionManager_ProcessWRMNotification_cold_2();
      }
    }
    return 1;
  }
  int v3 = VCWRMHandler_ProcessLocalWRMNotification(*(void *)(a1 + 624), a2, *(unsigned __int8 *)(a1 + 680));
  if (!v3) {
    return 2150170625;
  }
  if (v3 != 1)
  {
    int v4 = off_1EB5E63B8(a1, 1, 1);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 104));
    double v5 = micro();
    int v6 = [*(id *)(a1 + 624) localWRMLinkTypeSuggestion];
    uint64_t v7 = 256;
    if (!v4) {
      uint64_t v7 = 0;
    }
    uint64_t v8 = 4;
    if (v6 == 1) {
      uint64_t v8 = 5;
    }
    if (_VCConnectionManager_ProcessDuplicationStateUpdateEvent(a1, v8 | v7, 0, 0, ((v5 - *(double *)(a1 + 528)) * 1000.0), v4 ^ 1u, 1) >> 32 == 2)VCWRMHandler_UpdateWRMNotificationRequestTime(*(void *)(a1 + 624), v5); {
    pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 104));
    }
  }
  return 0;
}

uint64_t VCConnectionManager_SetWRMNotification(uint64_t a1, long long *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = off_1EB5E63B0;
    return v2(a1, a2);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      double v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315650;
        uint64_t v7 = v4;
        __int16 v8 = 2080;
        uint64_t v9 = "VCConnectionManager_SetWRMNotification";
        __int16 v10 = 1024;
        int v11 = 1122;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v6, 0x1Cu);
      }
    }
    return 1;
  }
}

uint64_t VCConnectionManager_IsInterfaceOnCellularForActiveConnectionWithQuality(uint64_t a1, int a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v3 = off_1EB5E63B8;
    return v3(a1, a2, a3);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      int v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315650;
        uint64_t v8 = v5;
        __int16 v9 = 2080;
        __int16 v10 = "VCConnectionManager_IsInterfaceOnCellularForActiveConnectionWithQuality";
        __int16 v11 = 1024;
        int v12 = 1251;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v7, 0x1Cu);
      }
    }
    return 0;
  }
}

unint64_t _VCConnectionManager_ProcessDuplicationStateUpdateEvent(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6, char a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t updated = VCDuplicationHandler_HandleDuplicationStateUpdateEvent(*(unsigned char **)(a1 + 632), a2, a3);
  int v13 = [(id)a1 isDuplicationEnabled];
  char v14 = [*(id *)(a1 + 632) isDuplicationPending];
  int v15 = [*(id *)(a1 + 624) localWRMLinkTypeSuggestion];
  if (updated)
  {
    VCConnectionManager_SetDuplicationEnabledInternal(a1, v13);
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
  }
  uint64_t v16 = *(NSObject **)(a1 + 480);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___VCConnectionManager_ProcessDuplicationStateUpdateEvent_block_invoke;
  block[3] = &unk_1E6DB6ED8;
  void block[4] = a1;
  char v19 = updated;
  char v22 = HIBYTE(updated);
  __int16 v21 = HIDWORD(updated) >> 8;
  int v20 = updated >> 8;
  char v26 = v13;
  char v27 = v14;
  int v23 = v15;
  int v24 = a6;
  char v28 = a7;
  char v29 = a4;
  int v25 = a5;
  dispatch_async(v16, block);
  return updated;
}

uint64_t VCConnectionManager_GetNumberOfConnectionsInternal(uint64_t (**a1)(void))
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCConnectionManager_GetNumberOfConnectionsInternal_cold_1();
    }
    return 0;
  }
  uint64_t v2 = (const void *)a1[5]();
  BOOL v3 = v2 != 0;
  if (v2)
  {
    CFRelease(v2);
    unsigned int v4 = 2;
  }
  else
  {
    unsigned int v4 = 1;
  }
  if ([a1 secondaryConnection]) {
    return v4;
  }
  else {
    return v3;
  }
}

uint64_t VCConnectionManager_CopyConnectionForQuality(uint64_t a1, int a2)
{
  if (a1)
  {
    unsigned int v4 = (pthread_rwlock_t *)(a1 + 104);
    pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 104));
    uint64_t v5 = _VCConnectionManager_CopyConnectionForQualityInternal((void *)a1, a2);
    pthread_rwlock_unlock(v4);
    return v5;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCConnectionManager_CopyConnectionForQuality_cold_1();
      }
    }
    return 0;
  }
}

void VCConnectionManager_UpdateTransmittedPacketsAndBytes(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    _VCConnectionManager_UpdateCellularExcessiveBytes(a1, a2, a3, a4, 1);
    if (*(_DWORD *)a2 == 4)
    {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 12);
      if (a5) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56))(a1, v14, a3, a6, a7, 1);
      }
      if (a4)
      {
        int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 64);
        v15(a1, v14, 1);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    int v17 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 136315650;
      uint64_t v19 = v16;
      __int16 v20 = 2080;
      __int16 v21 = "VCConnectionManager_UpdateTransmittedPacketsAndBytes";
      __int16 v22 = 1024;
      int v23 = 1326;
      _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v18, 0x1Cu);
    }
  }
}

uint64_t _VCConnectionManager_UpdateCellularExcessiveBytes(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  __int16 v26 = 0;
  __int16 v10 = (pthread_rwlock_t *)(a1 + 104);
  if (pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 104)))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCConnectionManager_UpdateCellularExcessiveBytes_cold_1();
      }
    }
  }
  VCConnectionManager_IsSourceOnCellularIPv6(a1, a2, (uint64_t)&v26 + 1, (uint64_t)&v26);
  __int16 v11 = (const void *)VCConnectionManager_CopyPrimaryConnection(a1);
  if ((VCConnection_MatchesSourceDestinationInfo((uint64_t)v11, a2) & 1) != 0 || !HIBYTE(v26))
  {
    if (v11) {
      CFRelease(v11);
    }
    pthread_rwlock_unlock(v10);
    if (a5) {
      goto LABEL_21;
    }
LABEL_30:
    int v23 = HIBYTE(v26);
    int v24 = v26;
    pthread_rwlock_wrlock(v10);
    if (v24) {
      int v18 = 48;
    }
    else {
      int v18 = 28;
    }
    BOOL v19 = v23 == 0;
    uint64_t v20 = 416;
    uint64_t v21 = 432;
    goto LABEL_34;
  }
  if (v11) {
    CFRelease(v11);
  }
  pthread_rwlock_unlock(v10);
  int v12 = v26;
  pthread_rwlock_wrlock(v10);
  if (v12) {
    int v13 = 48;
  }
  else {
    int v13 = 28;
  }
  uint64_t v14 = v13 + a3;
  if (!a5)
  {
    uint64_t v22 = 384;
    if (a4) {
      uint64_t v22 = 368;
    }
    *(void *)(a1 + v22) += v14;
    if (!VCNetworkAgentCell_CellularAssertionActive()) {
      *(void *)(a1 + 400) += v14;
    }
    pthread_rwlock_unlock(v10);
    goto LABEL_30;
  }
  uint64_t v15 = 376;
  if (a4) {
    uint64_t v15 = 360;
  }
  *(void *)(a1 + v15) += v14;
  if (!VCNetworkAgentCell_CellularAssertionActive()) {
    *(void *)(a1 + 392) += v14;
  }
  pthread_rwlock_unlock(v10);
LABEL_21:
  int v16 = HIBYTE(v26);
  int v17 = v26;
  pthread_rwlock_wrlock(v10);
  if (v17) {
    int v18 = 48;
  }
  else {
    int v18 = 28;
  }
  BOOL v19 = v16 == 0;
  uint64_t v20 = 408;
  uint64_t v21 = 424;
LABEL_34:
  if (v19) {
    uint64_t v20 = v21;
  }
  *(void *)(a1 + v20) += v18 + a3;
  return pthread_rwlock_unlock(v10);
}

void VCConnectionManager_UpdateReceivedPacketsAndBytes(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    _VCConnectionManager_UpdateCellularExcessiveBytes(a1, a2, a3, a4, 0);
    if (*(_DWORD *)a2 == 4)
    {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 12);
      if (a5) {
        (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void))(a1 + 56))(a1, *(unsigned __int8 *)(a2 + 12), a3, a6, a7, 0);
      }
      if (a4) {
        (*(void (**)(uint64_t, uint64_t, void))(a1 + 64))(a1, v14, 0);
      }
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(a1 + 40))(a1);
    int v16 = (const void *)v15;
    if (*(void *)(a1 + 3136) == v15 || !VCConnection_MatchesSourceDestinationInfo(v15, a2)) {
      goto LABEL_22;
    }
    *(void *)(a1 + 3136) = v16;
    if (VCConnection_IsRelay((uint64_t)v16)) {
      int v17 = @"relay";
    }
    else {
      int v17 = @"p2p";
    }
    *(_OWORD *)keys = xmmword_1E6DB6EF8;
    OSStatus v43 = @"RemoteInterfaceType";
    int v18 = (const char *)VCConnectionManager_ConnectionInterfaceType(*(void *)(a1 + 3136), 1);
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v18, 0x8000100u);
    uint64_t v21 = (const char *)VCConnectionManager_ConnectionInterfaceType(*(void *)(a1 + 3136), 0);
    CFStringRef v22 = CFStringCreateWithCString(v19, v21, 0x8000100u);
    CFStringRef v23 = v22;
    values[0] = v17;
    values[1] = (void *)v20;
    values[2] = (void *)v22;
    if (v20) {
      BOOL v24 = v22 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (v24)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v29 = VRTraceErrorLogLevelToCSTR();
        uint64_t v30 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v31 = 136316162;
          uint64_t v32 = v29;
          __int16 v33 = 2080;
          __int16 v34 = "_VCConnectionManager_ReportLocalRemoteInterfaces";
          __int16 v35 = 1024;
          int v36 = 1359;
          __int16 v37 = 2048;
          CFStringRef v38 = v20;
          __int16 v39 = 2048;
          CFStringRef v40 = v23;
          _os_log_error_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to allocate localInterfaceType=%p or remoteInterfaceType=%p", (uint8_t *)&v31, 0x30u);
        }
      }
      CFDictionaryRef v25 = 0;
      CFDictionaryRef v26 = 0;
      if (!v20) {
        goto LABEL_18;
      }
    }
    else
    {
      CFDictionaryRef v25 = CFDictionaryCreate(v19, (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      reportingGenericEvent();
    }
    CFRelease(v20);
    CFDictionaryRef v26 = v25;
LABEL_18:
    if (v23) {
      CFRelease(v23);
    }
    if (v26) {
      CFRelease(v26);
    }
LABEL_22:
    if (v16) {
      CFRelease(v16);
    }
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v27 = VRTraceErrorLogLevelToCSTR();
    char v28 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v31 = 136315650;
      uint64_t v32 = v27;
      __int16 v33 = 2080;
      __int16 v34 = "VCConnectionManager_UpdateReceivedPacketsAndBytes";
      __int16 v35 = 1024;
      int v36 = 1371;
      _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v31, 0x1Cu);
    }
  }
}

void VCConnectionManager_SynchronizeParticipantGenerationCounter(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void (**)(void))(a1 + 24);
    v1();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    BOOL v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = v2;
      __int16 v6 = 2080;
      int v7 = "VCConnectionManager_SynchronizeParticipantGenerationCounter";
      __int16 v8 = 1024;
      int v9 = 1411;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

CFStringRef VCConnectionManager_CopySuggestedLinkTypeCombo(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(unsigned char *)(a1 + 499)) {
      uint64_t v1 = 67;
    }
    else {
      uint64_t v1 = 87;
    }
    if (*(unsigned char *)(a1 + 498)) {
      uint64_t v2 = 67;
    }
    else {
      uint64_t v2 = 87;
    }
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%c:%c", v2, v1);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        uint64_t v7 = v4;
        __int16 v8 = 2080;
        int v9 = "VCConnectionManager_CopySuggestedLinkTypeCombo";
        __int16 v10 = 1024;
        int v11 = 1710;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", buf, 0x1Cu);
      }
    }
    return 0;
  }
}

void _VCConnectionManagerNWConnectionStatisticsCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 2954))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v4 = VRTraceErrorLogLevelToCSTR();
        uint64_t v5 = *MEMORY[0x1E4F47A50];
        __int16 v6 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v7 = *(void *)(a2 + 8);
            LODWORD(v27[0]) = 136315906;
            *(void *)((char *)v27 + 4) = v4;
            WORD6(v27[0]) = 2080;
            *(void *)((char *)v27 + 14) = "_VCConnectionManagerNWConnectionStatisticsCallback";
            WORD3(v27[1]) = 1024;
            DWORD2(v27[1]) = 1755;
            WORD6(v27[1]) = 2048;
            *(void *)((char *)&v27[1] + 14) = v7;
            _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNWConnectionNotification timestamp=%llu", (uint8_t *)v27, 0x26u);
          }
        }
        else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          _VCConnectionManagerNWConnectionStatisticsCallback_cold_2(v4, a2, v5);
        }
      }
      if (*(unsigned char *)(a2 + 2) == 2)
      {
        uint64_t v28 = 0;
        memset(v27, 0, sizeof(v27));
        *((void *)&v27[0] + 1) = micro();
        long long v8 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)((char *)&v27[7] + 8) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)((char *)&v27[8] + 8) = v8;
        long long v9 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)((char *)&v27[9] + 8) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)&v27[10] + 8) = v9;
        long long v10 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)((char *)&v27[3] + 8) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)((char *)&v27[4] + 8) = v10;
        long long v11 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)((char *)&v27[5] + 8) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)((char *)&v27[6] + 8) = v11;
        long long v12 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)((char *)&v27[1] + 8) = *(_OWORD *)a2;
        LODWORD(v27[0]) = 12;
        *(_OWORD *)((char *)&v27[2] + 8) = v12;
        AVCStatisticsCollector_SetVCStatistics(*(void *)(a1 + 2944), (uint64_t)v27);
        return;
      }
      uint64_t v28 = 0;
      memset(v27, 0, sizeof(v27));
      *((void *)&v27[0] + 1) = micro();
      LODWORD(v27[0]) = 11;
      long long v13 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)((char *)&v27[7] + 8) = *(_OWORD *)(a2 + 96);
      long long v14 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)((char *)&v27[8] + 8) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)((char *)&v27[9] + 8) = v14;
      *(_OWORD *)((char *)&v27[10] + 8) = *(_OWORD *)(a2 + 144);
      long long v15 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)((char *)&v27[3] + 8) = *(_OWORD *)(a2 + 32);
      long long v16 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)((char *)&v27[4] + 8) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)((char *)&v27[5] + 8) = v16;
      *(_OWORD *)((char *)&v27[6] + 8) = v13;
      *(_OWORD *)((char *)&v27[1] + 8) = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)a2;
      *(_OWORD *)((char *)&v27[2] + 8) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 2992) = v15;
      *(_OWORD *)(a1 + 2976) = v17;
      long long v18 = *(_OWORD *)(a2 + 32);
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v20 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 3056) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 3040) = v20;
      *(_OWORD *)(a1 + 3024) = v19;
      *(_OWORD *)(a1 + 3008) = v18;
      long long v21 = *(_OWORD *)(a2 + 96);
      long long v22 = *(_OWORD *)(a2 + 112);
      long long v23 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 3120) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 3104) = v23;
      *(_OWORD *)(a1 + 3088) = v22;
      *(_OWORD *)(a1 + 3072) = v21;
      AVCStatisticsCollector_SetVCStatistics(*(void *)(a1 + 2944), (uint64_t)v27);
      VCNetworkConditionMonitor_SetWiFiChannelQualityScore(*(void *)(a1 + 824), SBYTE12(v27[6]));
      if ([(id)a1 useMediaDrivenDuplication])
      {
        CFTypeRef v24 = VCConnectionSelector_CopyPrimaryConnection(*(void *)(a1 + 640));
        CFDictionaryRef v25 = v24;
        if (*(unsigned char *)(a2 + 73) == 1 && !*(unsigned char *)(a2 + 92))
        {
          IsLocalOnWiFuint64_t i = 0;
          if (!v24)
          {
LABEL_19:
            if (IsLocalOnWiFi && ([*(id *)(a1 + 632) allowDuplication] & 1) == 0)
            {
              *(unsigned char *)(a1 + 3184) = 1;
              if (*(double *)(a1 + 672) != 0.0) {
                *(double *)(a1 + 672) = micro();
              }
            }
            [*(id *)(a1 + 632) setAllowDuplication:IsLocalOnWiFi];
            return;
          }
        }
        else
        {
          IsLocalOnWiFuint64_t i = VCConnection_IsLocalOnWiFi((uint64_t)v24);
          if (!v25) {
            goto LABEL_19;
          }
        }
        CFRelease(v25);
        goto LABEL_19;
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCConnectionManagerNWConnectionStatisticsCallback_cold_1();
    }
  }
}

void _VCConnectionManagerNWConnectionPacketEventCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      if (*(unsigned char *)a2 == 1)
      {
        if (!*(unsigned char *)(a1 + 2954))
        {
          uint64_t v16 = 0;
          long long v14 = 0u;
          long long v15 = 0u;
          long long v12 = 0u;
          long long v13 = 0u;
          long long v10 = 0u;
          long long v11 = 0u;
          long long v8 = 0u;
          long long v9 = 0u;
          long long v6 = 0u;
          long long v7 = 0u;
          v4[0] = 12;
          long long v5 = 0u;
          v4[1] = micro();
          DWORD1(v9) = 1;
          BYTE10(v5) = 2;
          *(void *)&long long v6 = *(unsigned int *)(a2 + 4);
          BYTE11(v5) = *(unsigned char *)(a2 + 1);
          WORD4(v9) = *(_WORD *)(a2 + 2);
          AVCStatisticsCollector_SetVCStatistics(*(void *)(a1 + 2944), (uint64_t)v4);
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCConnectionManagerNWConnectionPacketEventCallback_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCConnectionManagerNWConnectionPacketEventCallback_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCConnectionManagerNWConnectionPacketEventCallback_cold_1();
    }
  }
}

void VCConnectionManager_DidUpdateNetworkCondition(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = *(NSObject **)(a1 + 448);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __VCConnectionManager_DidUpdateNetworkCondition_block_invoke;
    block[3] = &unk_1E6DB6E60;
    char v6 = a2;
    char v7 = a3;
    char v8 = a4;
    void block[4] = a1;
    dispatch_async(v4, block);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCConnectionManager_DidUpdateNetworkCondition_cold_1();
    }
  }
}

void _VCConnectionManager_ChecklocalRATTypeOverrideDefaultValue(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  uint64_t v3 = [+[VCDefaults sharedInstance] localRATTypeOverride];
  if (*(_DWORD *)(a1 + 756) == v3) {
    return;
  }
  uint64_t v4 = v3;
  *(_DWORD *)(a1 + 756) = v3;
  BOOL v5 = VCConnectionIDSIsCellularRATType(v3);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v5)
  {
    if (ErrorLogLevelForModule < 7) {
      goto LABEL_11;
    }
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    char v8 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)pthread_attr_t buf = 136315906;
    uint64_t v18 = v7;
    __int16 v19 = 2080;
    long long v20 = "_VCConnectionManager_ChecklocalRATTypeOverrideDefaultValue";
    __int16 v21 = 1024;
    int v22 = 2444;
    __int16 v23 = 2080;
    CFTypeRef v24 = VCConnectionIDSRATTypeToStr(v4);
    uint64_t v9 = " [%s] %s:%d HandoverReport: Defaults settings force local cell tech enabled to be %s";
    long long v10 = v8;
    uint32_t v11 = 38;
  }
  else
  {
    if (ErrorLogLevelForModule < 7) {
      goto LABEL_11;
    }
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    long long v13 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)pthread_attr_t buf = 136315650;
    uint64_t v18 = v12;
    __int16 v19 = 2080;
    long long v20 = "_VCConnectionManager_ChecklocalRATTypeOverrideDefaultValue";
    __int16 v21 = 1024;
    int v22 = 2446;
    uint64_t v9 = " [%s] %s:%d HandoverReport: Defaults settings force local cell tech disabled";
    long long v10 = v13;
    uint32_t v11 = 28;
  }
  _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
LABEL_11:
  if (v4 == -1 || !VCConnectionIDSIsCellularRATType(v4)) {
    uint64_t v14 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 764)];
  }
  else {
    uint64_t v14 = [NSNumber numberWithInt:v4];
  }
  long long v15 = *(NSObject **)(a1 + 448);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = ___VCConnectionManager_ChecklocalRATTypeOverrideDefaultValue_block_invoke;
  v16[3] = &unk_1E6DB3E40;
  v16[4] = a1;
  v16[5] = v14;
  dispatch_async(v15, v16);
}

uint64_t _VCConnectionManager_CopyConnectionForQualityInternal(void *a1, int a2)
{
  if (a2 == 1)
  {
    if ([a1 isDuplicationEnabled])
    {
      uint64_t v4 = (const void *)([a1 connectionForDuplication]
                        ? [a1 connectionForDuplication]
                        : [a1 secondaryConnection]);
      uint64_t v3 = v4;
      if (v4)
      {
        CFRetain(v4);
        return (uint64_t)v3;
      }
    }
  }
  else if (a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCConnectionManager_CopyConnectionForQualityInternal_cold_1();
      }
    }
    return 0;
  }

  return VCConnectionManager_CopyPrimaryConnection((uint64_t)a1);
}

void sub_1E20FC780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unsigned char *VCConnectionManager_CreatePacketRoutingInfoList(uint64_t a1, unsigned __int8 *a2, const __CFAllocator *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(unsigned char *)(a1 + 497))
    {
      if (*(unsigned char *)(a1 + 3408)) {
        VCConnectionHealthMonitor_UpdateReceiveStats(*(void *)(a1 + 520));
      }
      double v6 = micro();
      int v7 = off_1EB5E63B8(a1, 1, 1);
      if (v6 - *(double *)(a1 + 664) >= 1.0)
      {
        int v8 = v7;
        if (VCWRMHandler_ShouldForceWRMRecommendationUsingUserDefaults(*(void *)(a1 + 624)))
        {
          uint64_t v61 = 0;
          long long v60 = 0u;
          long long v59 = 0u;
          long long v58 = 0u;
          long long v57 = 0u;
          long long v56 = 0u;
          long long v55 = 0u;
          long long v54 = 0u;
          long long v53 = 0u;
          *(_OWORD *)&void block[8] = 0u;
          if (*(unsigned char *)(a1 + 680)) {
            int v9 = 1;
          }
          else {
            int v9 = 2;
          }
          *(_DWORD *)blocuint64_t k = v9;
          *(_DWORD *)&void block[4] = [*(id *)(a1 + 624) localWRMLinkTypeSuggestion];
          off_1EB5E63B0(a1, (long long *)block);
        }
        int IntValueForKey = VCDefaults_GetIntValueForKey(@"localWRMAlert", 0xFFFFFFFFLL);
        if (IntValueForKey != -1)
        {
          int v11 = IntValueForKey;
          if (IntValueForKey != *(_DWORD *)(a1 + 760))
          {
            VCConnectionManager_SetPreWarmState(a1, IntValueForKey != 0);
            *(_DWORD *)(a1 + 760) = v11;
          }
        }
        _VCConnectionManager_ChecklocalRATTypeOverrideDefaultValue(a1, v8);
        pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 104));
        uint64_t v12 = *(void *)(a1 + 624);
        int v13 = VCDuplicationHandler_DuplicationReason(*(void *)(a1 + 632));
        if (VCWRMHandler_ShouldRequestWRMNotificationWithDuplicationReason(v12, v13, [(id)a1 isDuplicationEnabled], v8, v6))
        {
          uint64_t v14 = *(NSObject **)(a1 + 480);
          *(void *)blocuint64_t k = MEMORY[0x1E4F143A8];
          *(void *)&void block[8] = 3221225472;
          *(void *)&block[16] = ___VCConnectionManager_RequestWRMNotification_block_invoke;
          *(void *)&long long v53 = &unk_1E6DB3DC8;
          *((void *)&v53 + 1) = a1;
          dispatch_async(v14, block);
        }
        pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 104));
        *(double *)(a1 + 664) = v6;
        if (*(unsigned char *)(a1 + 3181))
        {
          long long v15 = *(NSObject **)(a1 + 448);
          *(void *)blocuint64_t k = MEMORY[0x1E4F143A8];
          *(void *)&void block[8] = 3221225472;
          *(void *)&block[16] = ___VCConnectionManager_GetAndLogSignalStrength_block_invoke;
          *(void *)&long long v53 = &unk_1E6DB3DC8;
          *((void *)&v53 + 1) = a1;
          dispatch_async(v15, block);
        }
        if (*(void *)(a1 + 824))
        {
          double v16 = *(double *)(a1 + 3480);
          if (v16 > 0.0 && v6 - v16 > *(double *)(a1 + 3472))
          {
            uint64_t v17 = *(NSObject **)(a1 + 480);
            v51[0] = MEMORY[0x1E4F143A8];
            v51[1] = 3221225472;
            v51[2] = __VCConnectionManager_CreatePacketRoutingInfoList_block_invoke;
            v51[3] = &unk_1E6DB3DC8;
            v51[4] = a1;
            dispatch_async(v17, v51);
          }
        }
      }
    }
    pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 104));
    if (!a2)
    {
      PacketRoutingInfoListForConnection = 0;
LABEL_85:
      pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 104));
      return PacketRoutingInfoListForConnection;
    }
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(a1 + 40))(a1);
    CFTypeRef v19 = (CFTypeRef)v18;
    if (!a2[1]
      && *(void *)(a1 + 640)
      && VCConnection_IsEndToEndLink(v18)
      && [*(id *)(a1 + 640) serverLinks])
    {
      if (v19) {
        CFRelease(v19);
      }
      __int16 v21 = (const void *)[*(id *)(a1 + 640) serverLinks];
      if (!v21) {
        goto LABEL_35;
      }
      CFTypeRef v19 = CFRetain(v21);
    }
    if (v19)
    {
      if (*(unsigned char *)(a1 + 3464) || VCConnection_IsRelay((uint64_t)v19))
      {
        PacketRoutingInfoListForConnection = _VCConnectionManager_CreatePacketRoutingInfoListForConnection((uint64_t)v19, a1, (uint64_t)a2, a3);
LABEL_48:
        if (*(unsigned char *)(a1 + 497))
        {
          int v30 = *a2;
          if (VCDuplicationHandler_IsDuplicationEnabled(*(void *)(a1 + 632))
            || (int v31 = [*(id *)(a1 + 504) isAvailable], v30) && v31 && *(unsigned char *)(a1 + 747))
          {
            uint64_t v32 = [(id)a1 connectionForDuplication];
            if (!v32) {
              uint64_t v32 = [(id)a1 secondaryConnection];
            }
            if (!a2[1])
            {
              if (*(void *)(a1 + 640))
              {
                if (VCConnection_IsEndToEndLink(v32))
                {
                  [*(id *)(a1 + 640) serverLinks];
                  if (v35)
                  {
                    [*(id *)(a1 + 640) serverLinks];
                    uint64_t v32 = v36;
                  }
                }
              }
            }
            if (v32)
            {
              if (*(unsigned char *)(a1 + 3464) || VCConnection_IsRelay(v32))
              {
                __int16 v33 = _VCConnectionManager_CreatePacketRoutingInfoListForConnection(v32, a1, (uint64_t)a2, a3);
                if (PacketRoutingInfoListForConnection)
                {
                  *((void *)PacketRoutingInfoListForConnection + 16) = v33;
                  __int16 v34 = v33 + 8;
                  if (!v33) {
                    __int16 v34 = 0;
                  }
                  *((void *)PacketRoutingInfoListForConnection + 14) = v34;
                }
                else
                {
                  PacketRoutingInfoListForConnection = v33;
                }
              }
              else if (objc_opt_class() == a1)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VCConnectionManager_CreatePacketRoutingInfoList_cold_4();
                  }
                }
              }
              else
              {
                if (objc_opt_respondsToSelector()) {
                  double v46 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
                }
                else {
                  double v46 = &stru_1F3D3E450;
                }
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  uint64_t v49 = VRTraceErrorLogLevelToCSTR();
                  long long v50 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)blocuint64_t k = 136316162;
                    *(void *)&void block[4] = v49;
                    *(_WORD *)&block[12] = 2080;
                    *(void *)&block[14] = "VCConnectionManager_CreatePacketRoutingInfoList";
                    *(_WORD *)&block[22] = 1024;
                    LODWORD(v53) = 2378;
                    WORD2(v53) = 2112;
                    *(void *)((char *)&v53 + 6) = v46;
                    HIWORD(v53) = 2048;
                    *(void *)&long long v54 = a1;
                    _os_log_error_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_ERROR, " [%s] %s:%d %@(%p) p2p link cannot be used for duplication", block, 0x30u);
                  }
                }
              }
            }
          }
        }
        if (!a2[2] || !a2[1] || ![*(id *)(a1 + 640) serverLinks]) {
          goto LABEL_83;
        }
        if (PacketRoutingInfoListForConnection)
        {
          if (*((void *)PacketRoutingInfoListForConnection + 16)) {
            CFStringRef v38 = (unsigned char *)*((void *)PacketRoutingInfoListForConnection + 16);
          }
          else {
            CFStringRef v38 = PacketRoutingInfoListForConnection;
          }
          __int16 v39 = CFAllocatorAllocate(a3, 136, 0);
          *((void *)v38 + 16) = v39;
          if (!v39)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCConnectionManager_CreatePacketRoutingInfoList_cold_3();
              }
            }
            goto LABEL_83;
          }
          *((void *)v38 + 14) = v39 + 1;
          char v39[16] = 0;
          uint64_t v40 = *((void *)v38 + 16);
          *(void *)(v40 + 112) = 0;
          *(unsigned char *)uint64_t v40 = 0;
          uint64_t v41 = [*(id *)(a1 + 640) serverLinks];
          uint64_t v42 = *((void *)v38 + 16) + 8;
        }
        else
        {
          OSStatus v43 = CFAllocatorAllocate(a3, 136, 0);
          if (!v43)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCConnectionManager_CreatePacketRoutingInfoList_cold_2();
              }
            }
            PacketRoutingInfoListForConnection = 0;
            goto LABEL_83;
          }
          PacketRoutingInfoListForConnection = v43;
          *((void *)v43 + 16) = 0;
          uint64_t v44 = v43 + 8;
          *((void *)v43 + 14) = 0;
          *OSStatus v43 = 0;
          uint64_t v41 = [*(id *)(a1 + 640) serverLinks];
          uint64_t v42 = (uint64_t)v44;
        }
        VCConnection_SourceDestinationInfo(v41, v42);
LABEL_83:
        if (v19) {
          CFRelease(v19);
        }
        goto LABEL_85;
      }
      if (objc_opt_class() == a1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCConnectionManager_CreatePacketRoutingInfoList_cold_5();
          }
        }
      }
      else
      {
        if (objc_opt_respondsToSelector()) {
          __int16 v37 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
        }
        else {
          __int16 v37 = &stru_1F3D3E450;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v47 = VRTraceErrorLogLevelToCSTR();
          double v48 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)blocuint64_t k = 136316162;
            *(void *)&void block[4] = v47;
            *(_WORD *)&block[12] = 2080;
            *(void *)&block[14] = "VCConnectionManager_CreatePacketRoutingInfoList";
            *(_WORD *)&block[22] = 1024;
            LODWORD(v53) = 2352;
            WORD2(v53) = 2112;
            *(void *)((char *)&v53 + 6) = v37;
            HIWORD(v53) = 2048;
            *(void *)&long long v54 = a1;
            _os_log_error_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_ERROR, " [%s] %s:%d %@(%p) p2p link cannot be used as primary", block, 0x30u);
          }
        }
      }
LABEL_47:
      PacketRoutingInfoListForConnection = 0;
      goto LABEL_48;
    }
LABEL_35:
    if (objc_opt_class() == a1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
        goto LABEL_46;
      }
      uint64_t v23 = VRTraceErrorLogLevelToCSTR();
      CFTypeRef v24 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_46;
      }
      *(_DWORD *)blocuint64_t k = 136315650;
      *(void *)&void block[4] = v23;
      *(_WORD *)&block[12] = 2080;
      *(void *)&block[14] = "VCConnectionManager_CreatePacketRoutingInfoList";
      *(_WORD *)&block[22] = 1024;
      LODWORD(v53) = 2355;
      uint64_t v25 = " [%s] %s:%d Primary connection should not be nil";
      CFDictionaryRef v26 = v24;
      uint32_t v27 = 28;
    }
    else
    {
      if (objc_opt_respondsToSelector()) {
        int v22 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
      }
      else {
        int v22 = &stru_1F3D3E450;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
        goto LABEL_46;
      }
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      uint64_t v29 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_46;
      }
      *(_DWORD *)blocuint64_t k = 136316162;
      *(void *)&void block[4] = v28;
      *(_WORD *)&block[12] = 2080;
      *(void *)&block[14] = "VCConnectionManager_CreatePacketRoutingInfoList";
      *(_WORD *)&block[22] = 1024;
      LODWORD(v53) = 2355;
      WORD2(v53) = 2112;
      *(void *)((char *)&v53 + 6) = v22;
      HIWORD(v53) = 2048;
      *(void *)&long long v54 = a1;
      uint64_t v25 = " [%s] %s:%d %@(%p) Primary connection should not be nil";
      CFDictionaryRef v26 = v29;
      uint32_t v27 = 48;
    }
    _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, v25, block, v27);
LABEL_46:
    CFTypeRef v19 = 0;
    goto LABEL_47;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCConnectionManager_CreatePacketRoutingInfoList_cold_1();
    }
  }
  return 0;
}

void VCConnectionManager_UpdateNetworkOutageStatus(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) >= 3)
  {
    if (a2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCConnectionManager_UpdateNetworkOutageStatus_cold_1();
        }
      }
    }
    else if (!*(unsigned char *)(a1 + 3488))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        long long v10 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 136316162;
          uint64_t v12 = v9;
          __int16 v13 = 2080;
          uint64_t v14 = "VCConnectionManager_UpdateNetworkOutageStatus";
          __int16 v15 = 1024;
          int v16 = 3231;
          __int16 v17 = 1024;
          int v18 = 3231;
          __int16 v19 = 1024;
          int v20 = 0;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/ConnectionManager/VCConnectionManager.m:%d: VCCM: Processing event=%d", (uint8_t *)&v11, 0x28u);
        }
      }
      [(id)a1 startBrokenNetworkDetection];
    }
  }
  else if (*(unsigned char *)(a1 + 3488))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      BOOL v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136316162;
        uint64_t v12 = v4;
        __int16 v13 = 2080;
        uint64_t v14 = "VCConnectionManager_UpdateNetworkOutageStatus";
        __int16 v15 = 1024;
        int v16 = 3239;
        __int16 v17 = 1024;
        int v18 = 3239;
        __int16 v19 = 1024;
        int v20 = a2;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/ConnectionManager/VCConnectionManager.m:%d: VCCM: Processing event=%d", (uint8_t *)&v11, 0x28u);
      }
    }
    [(id)a1 stopBrokenNetworkDetection];
    VCNetworkConditionMonitor_SetBrokenNetworkStatus(*(void *)(a1 + 824), 1, a2 == 2);
    VCNetworkConditionMonitor_SetBrokenNetworkStatus(*(void *)(a1 + 824), 0, a2 == 3);
    if (a2 == 1)
    {
      *(unsigned char *)(a1 + 3488) = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        int v7 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(unsigned __int8 *)(a1 + 3488);
          int v11 = 136316162;
          uint64_t v12 = v6;
          __int16 v13 = 2080;
          uint64_t v14 = "VCConnectionManager_UpdateNetworkOutageStatus";
          __int16 v15 = 1024;
          int v16 = 3247;
          __int16 v17 = 1024;
          int v18 = 3247;
          __int16 v19 = 1024;
          int v20 = v8;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/ConnectionManager/VCConnectionManager.m:%d: VCCM: brokenBackhaulDetectionStarted=%d ", (uint8_t *)&v11, 0x28u);
        }
      }
    }
  }
}

unsigned char *_VCConnectionManager_CreatePacketRoutingInfoListForConnection(uint64_t a1, uint64_t a2, uint64_t a3, const __CFAllocator *a4)
{
  uint64_t v7 = 0;
  char v8 = 0;
  char v9 = 0;
  char v10 = 1;
  do
  {
    char v11 = v10;
    uint64_t v12 = (char *)&kVCConnectionManagerPacketRoutingCriteriaList + 32 * v7;
    __int16 v13 = (uint64_t (*)(uint64_t))*((void *)v12 + 2);
    uint64_t v14 = (uint64_t (*)(uint64_t))*((void *)v12 + 3);
    BOOL v15 = (*((BOOL (**)(uint64_t, uint64_t, uint64_t))v12 + 1))(a1, a2, a3);
    char v16 = v13(a2);
    if (v9) {
      char v9 = 1;
    }
    else {
      char v9 = v14(a3) & (v16 ^ 1);
    }
    char v10 = 0;
    v8 |= !v15;
    uint64_t v7 = 1;
  }
  while ((v11 & 1) != 0);
  if (v8)
  {
    if ((v9 & 1) == 0)
    {
      int Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 336));
      if (Count >= 1)
      {
        CFIndex v18 = 0;
        uint64_t v19 = Count;
        while (2)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 336), v18);
          uint64_t v21 = 0;
          char v22 = 1;
          do
          {
            char v23 = v22;
            if (!(*((BOOL (**)(uint64_t, uint64_t, uint64_t))&kVCConnectionManagerPacketRoutingCriteriaList
                   + 4 * v21
                   + 1))((uint64_t)ValueAtIndex, a2, a3))goto LABEL_14;
            char v22 = 0;
            uint64_t v21 = 1;
          }
          while ((v23 & 1) != 0);
          if ((VCConnection_IsOnSameInterfacesWithConnection((uint64_t)ValueAtIndex) & 1) == 0)
          {
LABEL_14:
            if (++v18 != v19) {
              continue;
            }
            return 0;
          }
          break;
        }
        if (!ValueAtIndex) {
          return 0;
        }
        uint64_t v29 = CFAllocatorAllocate(a4, 136, 0);
        if (v29)
        {
          CFTypeRef v24 = v29;
          char v30 = *(unsigned char *)(a3 + 3);
          if (v30) {
            char v30 = VCConnection_IsHopByHopEncryptionSupported(a1) ^ 1;
          }
          *CFTypeRef v24 = v30;
          uint64_t v26 = (uint64_t)(v24 + 8);
          uint64_t v27 = (uint64_t)ValueAtIndex;
          goto LABEL_18;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCConnectionManager_CreatePacketRoutingInfoListForConnection_cold_1();
          }
        }
      }
    }
    return 0;
  }
  uint64_t v25 = CFAllocatorAllocate(a4, 136, 0);
  if (!v25)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCConnectionManager_CreatePacketRoutingInfoListForConnection_cold_2();
      }
    }
    return 0;
  }
  CFTypeRef v24 = v25;
  unsigned char *v25 = 0;
  uint64_t v26 = (uint64_t)(v25 + 8);
  uint64_t v27 = a1;
LABEL_18:
  VCConnection_SourceDestinationInfo(v27, v26);
  *((void *)v24 + 16) = 0;
  *((void *)v24 + 14) = 0;
  return v24;
}

void VCConnectionManager_IsSourceOnCellularIPv6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2 && a3 && a4)
    {
      uint64_t v4 = *(void (**)(void))(a1 + 32);
      v4();
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCConnectionManager_IsSourceOnCellularIPv6_cold_1();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315650;
      uint64_t v8 = v5;
      __int16 v9 = 2080;
      char v10 = "VCConnectionManager_IsSourceOnCellularIPv6";
      __int16 v11 = 1024;
      int v12 = 2695;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

uint64_t VCConnectionManager_CopyConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3)
  {
    uint64_t v6 = *(uint64_t (**)(void))(a1 + 8);
    return v6();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      __int16 v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136316418;
        uint64_t v11 = v8;
        __int16 v12 = 2080;
        uint64_t v13 = "VCConnectionManager_CopyConnection";
        __int16 v14 = 1024;
        int v15 = 2707;
        __int16 v16 = 2048;
        uint64_t v17 = a1;
        __int16 v18 = 2048;
        uint64_t v19 = a2;
        __int16 v20 = 2048;
        uint64_t v21 = a3;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NULL instance=%p, sourceDestinationInfo=%p, or isPrimary=%p passed", (uint8_t *)&v10, 0x3Au);
      }
    }
    return 0;
  }
}

void VCConnectionManager_UpdateConnectionHealthWithIndicator(uint64_t a1, int a2, int a3, int a4)
{
  if (*(unsigned char *)(a1 + 3408)) {
    VCConnectionHealthMonitor_ReceivePacket(*(void *)(a1 + 520), a2, a3, a4);
  }
}

uint64_t VCConnectionManager_IsDuplicationConnectionCandidate(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      int v15 = *MEMORY[0x1E4F47A50];
      BOOL v16 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v16) {
        return result;
      }
      int v17 = 136315650;
      uint64_t v18 = v14;
      __int16 v19 = 2080;
      __int16 v20 = "VCConnectionManager_IsDuplicationConnectionCandidate";
      __int16 v21 = 1024;
      int v22 = 2998;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v17, 0x1Cu);
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 3181) || (uint64_t result = VCConnection_IsEndToEndLink(a2), result))
  {
    int v5 = VCDuplicationHandler_DuplicationReason(*(void *)(a1 + 632));
    uint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t))(a1 + 40))(a1);
    IsLocalOnWiFuint64_t i = VCConnection_IsLocalOnWiFi(a2);
    int v8 = IsLocalOnWiFi ^ VCConnection_IsLocalOnWiFi((uint64_t)v6);
    if (v5 == 3) {
      int v9 = v8 ^ 1;
    }
    else {
      int v9 = 0;
    }
    IsRemoteOnWiFuint64_t i = VCConnection_IsRemoteOnWiFi(a2);
    int v11 = VCConnection_IsRemoteOnWiFi((uint64_t)v6);
    if (v5 == 4)
    {
      if (*(unsigned char *)(a1 + 499) == 1) {
        int v12 = IsRemoteOnWiFi ^ v11 ^ 1;
      }
      else {
        int v12 = 0;
      }
    }
    else
    {
      int v12 = 0;
    }
    int v13 = v8 | IsRemoteOnWiFi ^ v11;
    if (v6) {
      CFRelease(v6);
    }
    return v13 & ~(v9 | v12);
  }
  return result;
}

BOOL VCConnectionManager_AreAllLinkProbingTriggersInactive(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 501) && !*(unsigned char *)(a1 + 502)) {
      return !VCDuplicationHandler_IsDuplicationEnabled(*(void *)(a1 + 632));
    }
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
    return 0;
  }
  uint64_t v2 = VRTraceErrorLogLevelToCSTR();
  uint64_t v3 = *MEMORY[0x1E4F47A50];
  BOOL v4 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v4)
  {
    int v5 = 136315650;
    uint64_t v6 = v2;
    __int16 v7 = 2080;
    int v8 = "VCConnectionManager_AreAllLinkProbingTriggersInactive";
    __int16 v9 = 1024;
    int v10 = 2990;
    _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance passed", (uint8_t *)&v5, 0x1Cu);
    return 0;
  }
  return result;
}

void VCConnectionManager_UpdatePacketSendStatus(uint64_t a1, int a2)
{
  if (a1)
  {
    if (a2) {
      uint64_t v2 = (atomic_uint *)(a1 + 3432);
    }
    else {
      uint64_t v2 = (atomic_uint *)(a1 + 3436);
    }
    atomic_fetch_add(v2, 1u);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCConnectionManager_UpdatePacketSendStatus_cold_1();
    }
  }
}

void VCConnectionManager_UpdateOnTheWireBytesSentCount(uint64_t a1, unint64_t a2)
{
  if (a1)
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 3440), a2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCConnectionManager_UpdateOnTheWireBytesSentCount_cold_1();
    }
  }
}

void VCConnectionManager_UpdateOnTheWireBytesReceivedCount(uint64_t a1, unint64_t a2)
{
  if (a1)
  {
    atomic_fetch_add((atomic_ullong *volatile)(a1 + 3448), a2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCConnectionManager_UpdateOnTheWireBytesReceivedCount_cold_1();
    }
  }
}

void _VCConnectionManager_UseCellPrimaryInterfaceInternal(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return;
    }
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    int v10 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v13 = 136315650;
    uint64_t v14 = v9;
    __int16 v15 = 2080;
    BOOL v16 = "_VCConnectionManager_UseCellPrimaryInterfaceInternal";
    __int16 v17 = 1024;
    int v18 = 2730;
    uint64_t v11 = " [%s] %s:%d nil instance passed";
LABEL_17:
    _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v13, 0x1Cu);
    return;
  }
  int v4 = *(unsigned __int8 *)(a1 + 746);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (!v4)
  {
    if (ErrorLogLevelForModule < 7) {
      return;
    }
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    int v10 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v13 = 136315650;
    uint64_t v14 = v12;
    __int16 v15 = 2080;
    BOOL v16 = "_VCConnectionManager_UseCellPrimaryInterfaceInternal";
    __int16 v17 = 1024;
    int v18 = 2731;
    uint64_t v11 = " [%s] %s:%d Prevent displaying cell as primary interface as directed by storebag settings";
    goto LABEL_17;
  }
  if (ErrorLogLevelForModule >= 6)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    __int16 v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a1 + 92);
      int v13 = 136316162;
      uint64_t v14 = v6;
      __int16 v15 = 2080;
      BOOL v16 = "_VCConnectionManager_UseCellPrimaryInterfaceInternal";
      __int16 v17 = 1024;
      int v18 = 2733;
      __int16 v19 = 1024;
      int v20 = v8;
      __int16 v21 = 1024;
      int v22 = a2;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d callID = %u, network status bar request, useCellPrimayInterface = %d", (uint8_t *)&v13, 0x28u);
    }
  }
  if (*(unsigned __int8 *)(a1 + 512) != a2)
  {
    *(unsigned char *)(a1 + 512) = a2;
    if (a2) {
      VCNetworkAgentCell_AddCellularAssertion();
    }
    else {
      VCNetworkAgentCell_RemoveCellularAssertion();
    }
  }
}

void _VCConnectionManager_SetDuplicationEnabledInternal(uint64_t a1, int a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    *(unsigned char *)(a1 + 496) = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      int v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        uint64_t v28 = v4;
        __int16 v29 = 2080;
        char v30 = "_VCConnectionManager_SetDuplicationEnabledInternal";
        __int16 v31 = 1024;
        int v32 = 878;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: Reset _duplicationPending state if we stop duplication.", buf, 0x1Cu);
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 464) == a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      __int16 v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)pthread_attr_t buf = 136315906;
        uint64_t v28 = v6;
        __int16 v29 = 2080;
        char v30 = "_VCConnectionManager_SetDuplicationEnabledInternal";
        __int16 v31 = 1024;
        int v32 = 882;
        __int16 v33 = 1024;
        LODWORD(v34) = a2;
        int v8 = " [%s] %s:%d HandoverReport: enable duplication (%d) already applied.";
        uint64_t v9 = v7;
        uint32_t v10 = 34;
LABEL_14:
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
      }
    }
  }
  else
  {
    unsigned int NumberOfConnectionsInternal = VCConnectionManager_GetNumberOfConnectionsInternal((uint64_t (**)(void))a1);
    if (a2 && NumberOfConnectionsInternal <= 1)
    {
      *(unsigned char *)(a1 + 496) = 1;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        int v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)pthread_attr_t buf = 136315650;
          uint64_t v28 = v12;
          __int16 v29 = 2080;
          char v30 = "_VCConnectionManager_SetDuplicationEnabledInternal";
          __int16 v31 = 1024;
          int v32 = 891;
          int v8 = " [%s] %s:%d HandoverReport: can't enable duplication when there is no secondary connection.";
          uint64_t v9 = v13;
          uint32_t v10 = 28;
          goto LABEL_14;
        }
      }
    }
    else
    {
      *(unsigned char *)(a1 + 464) = a2;
      *(unsigned char *)(a1 + 496) = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v14 = VRTraceErrorLogLevelToCSTR();
        __int16 v15 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v16 = *(unsigned __int8 *)(a1 + 464);
          *(_DWORD *)pthread_attr_t buf = 136315906;
          if (v16) {
            __int16 v17 = "Start";
          }
          else {
            __int16 v17 = "Stop";
          }
          uint64_t v28 = v14;
          __int16 v29 = 2080;
          char v30 = "_VCConnectionManager_SetDuplicationEnabledInternal";
          __int16 v31 = 1024;
          int v32 = 898;
          __int16 v33 = 2080;
          __int16 v34 = v17;
          _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: %s duplication and active probing on links", buf, 0x26u);
        }
      }
      [*(id *)(a1 + 776) setIsDuplicationEnabled:*(unsigned __int8 *)(a1 + 464)];
      VCConnectionManager_SetActiveLinkProbingEnabled(a1, *(unsigned __int8 *)(a1 + 464));
      BOOL IsDuplicationEnabled = VCDuplicationHandler_IsDuplicationEnabled(*(void *)(a1 + 632));
      if (!IsDuplicationEnabled)
      {
        *(void *)(a1 + 552) = 0;
        *(void *)(a1 + 600) = 0;
      }
      uint64_t v19 = _VCConnectionManager_CopyConnectionForQualityInternal((void *)a1, 1);
      if (v19)
      {
        uint64_t v20 = v19;
        int IsLocalOnCellular = VCConnection_IsLocalOnCellular(v19);
        CFStringRef v22 = VCConnectionManager_CopySuggestedLinkTypeCombo(a1);
        VCConnectionManager_UseCellPrimaryInterface(a1, IsLocalOnCellular);
        uint64_t v23 = *(NSObject **)(a1 + 448);
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        v24[2] = ___VCConnectionManager_SetDuplicationEnabledInternal_block_invoke;
        v24[3] = &unk_1E6DB6E88;
        BOOL v25 = IsDuplicationEnabled;
        v24[4] = a1;
        v24[5] = v20;
        v24[6] = v22;
        char v26 = IsLocalOnCellular;
        dispatch_async(v23, v24);
      }
    }
  }
}

uint64_t _VCConnectionManager_SetWRMNotification(uint64_t a1, long long *a2)
{
  v50[3] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (!*((_DWORD *)a2 + 1))
    {
      v50[0] = @"WRMCoexIsLocal";
      v50[1] = @"WRMLinkType";
      *(void *)&v36[4] = objc_msgSend(NSNumber, "numberWithInt:", 0, MEMORY[0x1E4F1CC38]);
      v50[2] = @"WRMReasonCode";
      *(void *)&v36[12] = [NSNumber numberWithUnsignedLongLong:*((void *)a2 + 1)];
      [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v35 forKeys:v50 count:3];
      reportingGenericEvent();
    }
    if (*((void *)a2 + 1) == 2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        return 0;
      }
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      int v5 = *MEMORY[0x1E4F47A50];
      BOOL v6 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v6) {
        return result;
      }
      int v35 = 136315650;
      *(void *)uint64_t v36 = v4;
      *(_WORD *)&v36[8] = 2080;
      *(void *)&v36[10] = "_VCConnectionManager_SetWRMNotification";
      *(_WORD *)&v36[18] = 1024;
      int v37 = 1134;
      int v8 = " [%s] %s:%d HandoverReport: Ignoring iRAT notification because the reason for recommendation is WiFi link going down";
      uint64_t v9 = v5;
      uint32_t v10 = 28;
LABEL_8:
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v35, v10);
      return 0;
    }
    if (!*((_DWORD *)a2 + 1) && ([(id)a1 isDuplicationAllowed] & 1) == 0)
    {
      *(unsigned char *)(a1 + 3192) = 1;
      long long v19 = *a2;
      *(_OWORD *)(a1 + 3216) = a2[1];
      *(_OWORD *)(a1 + 3200) = v19;
      long long v20 = a2[2];
      long long v21 = a2[3];
      long long v22 = a2[4];
      *(_OWORD *)(a1 + 3280) = a2[5];
      *(_OWORD *)(a1 + 3264) = v22;
      *(_OWORD *)(a1 + 3248) = v21;
      *(_OWORD *)(a1 + 3232) = v20;
      long long v23 = a2[6];
      long long v24 = a2[7];
      long long v25 = a2[8];
      *(_OWORD *)(a1 + 3344) = a2[9];
      *(_OWORD *)(a1 + 3328) = v25;
      *(_OWORD *)(a1 + 3312) = v24;
      *(_OWORD *)(a1 + 3296) = v23;
      if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
        return 0;
      }
      uint64_t v26 = VRTraceErrorLogLevelToCSTR();
      uint64_t v27 = *MEMORY[0x1E4F47A50];
      BOOL v28 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v28) {
        return result;
      }
      int v29 = *(unsigned __int8 *)(a1 + 3169);
      int v30 = *(unsigned __int8 *)(a1 + 3409);
      int v31 = *(_DWORD *)(a1 + 3360);
      int v32 = *(_DWORD *)(a1 + 3364);
      int v33 = *(_DWORD *)(a1 + 3188);
      int v34 = *(unsigned __int8 *)(a1 + 3489);
      int v35 = 136317186;
      *(void *)uint64_t v36 = v26;
      *(_WORD *)&v36[8] = 2080;
      *(void *)&v36[10] = "_VCConnectionManager_SetWRMNotification";
      *(_WORD *)&v36[18] = 1024;
      int v37 = 1138;
      __int16 v38 = 1024;
      int v39 = v29;
      __int16 v40 = 1024;
      int v41 = v30;
      __int16 v42 = 1024;
      int v43 = v31;
      __int16 v44 = 1024;
      int v45 = v32;
      __int16 v46 = 1024;
      int v47 = v33;
      __int16 v48 = 1024;
      int v49 = v34;
      int v8 = " [%s] %s:%d HandoverReport: Pending iRAT notification isDuplicationAllowedForMediaDegraded=%d isRemoteMediaQu"
           "alityDegraded=%d currentTargetBitrate=%d cellBitrateCap=%d bitrateCapDelta=%d isUserMoving=%d";
      uint64_t v9 = v27;
      uint32_t v10 = 64;
      goto LABEL_8;
    }
    *(unsigned char *)(a1 + 3192) = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      uint64_t v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(unsigned __int8 *)(a1 + 3169);
        int v14 = *(unsigned __int8 *)(a1 + 3409);
        int v15 = *(_DWORD *)(a1 + 3360);
        int v16 = *(_DWORD *)(a1 + 3364);
        int v17 = *(_DWORD *)(a1 + 3188);
        int v18 = *(unsigned __int8 *)(a1 + 3489);
        int v35 = 136317186;
        *(void *)uint64_t v36 = v11;
        *(_WORD *)&v36[8] = 2080;
        *(void *)&v36[10] = "_VCConnectionManager_SetWRMNotification";
        *(_WORD *)&v36[18] = 1024;
        int v37 = 1141;
        __int16 v38 = 1024;
        int v39 = v13;
        __int16 v40 = 1024;
        int v41 = v14;
        __int16 v42 = 1024;
        int v43 = v15;
        __int16 v44 = 1024;
        int v45 = v16;
        __int16 v46 = 1024;
        int v47 = v17;
        __int16 v48 = 1024;
        int v49 = v18;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d HandoverReport: Processing iRAT notification isDuplicationAllowedForMediaDegraded=%d isRemoteMediaQualityDegraded=%d currentTargetBitrate=%d cellBitrateCap=%d bitrateCapDelta=%d isUserMoving=%d", (uint8_t *)&v35, 0x40u);
      }
    }
    return VCConnectionManager_ProcessWRMNotification(a1, a2);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCConnectionManager_SetWRMNotification_cold_1();
      }
    }
    return 1;
  }
}

uint64_t _VCConnectionManager_IsInterfaceOnCellularForActiveConnectionWithQuality(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = VCConnectionManager_CopyConnectionForQuality(a1, a2);
  if (!v4) {
    return 0;
  }
  int v5 = (const void *)v4;
  if (a3) {
    uint64_t IsLocalOnCellular = VCConnection_IsLocalOnCellular(v4);
  }
  else {
    uint64_t IsLocalOnCellular = VCConnection_IsRemoteOnCellular(v4);
  }
  uint64_t v7 = IsLocalOnCellular;
  CFRelease(v5);
  return v7;
}

BOOL _VCPacketRoutingRTXSupportCriteria_ConnectionMatchesCriteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 4)) {
    return 1;
  }
  if (!*(unsigned char *)(a2 + 833)) {
    return 0;
  }
  if (VCConnection_IsRelay(a1)) {
    return 1;
  }
  return *(unsigned char *)(a2 + 3490) != 0;
}

uint64_t _VCPacketRoutingRTXSupportCriteria_AllowsAlternateConnection(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3490);
}

uint64_t _VCPacketRoutingRTXSupportCriteria_IsCriteriaRequestedInConfig(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t _VCPacketRoutingHBHEncryptionSupportCriteria_ConnectionMatchesCriteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 3)) {
    return VCConnection_IsHopByHopEncryptionSupported(a1);
  }
  else {
    return 1;
  }
}

uint64_t _VCPacketRoutingHBHEncryptionSupportCriteria_AllowsAlternateConnection()
{
  return 1;
}

uint64_t _VCPacketRoutingHBHEncryptionSupportCriteria_IsCriteriaRequestedInConfig(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 3);
}

void sub_1E2101A34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2101B78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2102240(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2102E70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2102FB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t VCCMWRMStatusUpdateCallback(void *a1, const char *a2)
{
  return [a1 sendStatusUpdate:a2];
}

int8x16_t VCTimescalePSOLA_DSPInit(uint64_t a1, int a2, unsigned int a3, char a4, unsigned int a5, int a6)
{
  __int16 v10 = a2;
  if (a2 <= 23999)
  {
    if (a2 != 8000)
    {
      int v12 = 16000;
LABEL_7:
      if (a2 != v12) {
        return result;
      }
    }
  }
  else if (a2 != 24000 && a2 != 48000)
  {
    int v12 = 32000;
    goto LABEL_7;
  }
  uint64_t v13 = *(void *)(a1 + 72);
  int v14 = *(_DWORD *)(a1 + 68);
  double v20 = (double)a3 / (double)a2;
  __int16 v15 = VCTimescalePSOLA_DivW32W16ResW16(a2, 8000);
  VCTimescalePSOLA_MemSetW16((_WORD *)a1, 0, 17344);
  *(_WORD *)(a1 + 2) = v10;
  *(_DWORD *)(a1 + 34664) = a3;
  *(_WORD *)(a1 + 56) = 5 * v15;
  *(_DWORD *)(a1 + 60) = 2500;
  *(_WORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v14;
  *(unsigned char *)(a1 + 80) = a4;
  *(_DWORD *)(a1 + 82) = 0;
  *(_WORD *)(a1 + 88) = VCDefaults_GetIntValueForKey(@"psolaMaxContiguousCompressions", 4);
  *(_WORD *)(a1 + 90) = VCDefaults_GetIntValueForKey(@"psolaAdaptationGap", 6);
  *(_WORD *)(a1 + 86) = VCDefaults_GetIntValueForKey(@"psolaMaxContiguousExpansion", 4);
  *(unsigned char *)(a1 + 92) = 1;
  *(unsigned char *)a1 = a5;
  if (a5 <= 1) {
    __int16 v16 = 14746;
  }
  else {
    __int16 v16 = 13926;
  }
  *(_WORD *)(a1 + 54) = v16;
  *(_DWORD *)(a1 + 96) = a6;
  v17.f64[0] = v20 + v20;
  v17.f64[1] = v20;
  float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x3F947AE147AE147BuLL);
  int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f64(v18, v17), (int8x16_t)v18, (int8x16_t)v17);
  *(int8x16_t *)(a1 + 34672) = result;
  *(void *)(a1 + 72) = v13;
  return result;
}

uint64_t VCTimescalePSOLA_IncFrameScaledGapCount(uint64_t result)
{
  if (*(unsigned char *)(result + 80))
  {
    int v1 = *(__int16 *)(result + 88);
    if (v1 <= *(__int16 *)(result + 86)) {
      int v1 = *(__int16 *)(result + 86);
    }
    if (v1 && *(_WORD *)(result + 90))
    {
      int v2 = *(__int16 *)(result + 84);
      if (v2 >= *(__int16 *)(result + 90))
      {
        __int16 v3 = 0;
        *(_WORD *)(result + 82) = 0;
        *(unsigned char *)(result + 92) = 1;
      }
      else
      {
        __int16 v3 = v2 + 1;
      }
      *(_WORD *)(result + 84) = v3;
    }
  }
  return result;
}

uint64_t _VCTimescalePSOLA_ActiveSpeechExpand(unsigned __int8 *a1, uint64_t a2, double a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  double v5 = (double)*(int *)(a2 + 20);
  LOWORD(a3) = *((_WORD *)a1 + 1);
  double v6 = (double)*(unint64_t *)&a3;
  if (*((double *)a1 + 4335) * v6 <= v5) {
    double v5 = *((double *)a1 + 4335) * v6;
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[0] = v7;
  v37[1] = v7;
  int v8 = (int)v5;
  v36[0] = v7;
  v36[1] = v7;
  double v9 = (double)*((__int16 *)a1 + 17330);
  if (v6 * 0.01 <= v9) {
    double v9 = v6 * 0.01;
  }
  int v10 = (int)v9;
  if (*a1)
  {
    unint64_t v11 = 0;
    int v12 = (const void **)(a2 + 88);
    uint64_t v13 = v37;
    uint64_t v14 = 3940;
    do
    {
      *(v13 - 4) = &a1[v14];
      memcpy(&a1[4 * v10 + v14], *v12, *(int *)(a2 + 40) * (uint64_t)v8);
      *v13++ = *(v12 - 4);
      ++v11;
      v14 += 7680;
      ++v12;
    }
    while (v11 < *a1);
    LOWORD(v15) = *((_WORD *)a1 + 1);
    double v6 = (double)v15;
  }
  *((_WORD *)a1 + 2) = (int)(v6 * 0.045);
  WORD1(v38) = v8 + v10;
  LOWORD(v38) = v10;
  uint64_t v16 = VCTimescalePSOLA_PreEmptiveExpand(a1, (__int16 *)v36);
  __int16 v17 = WORD2(v38);
  **(_DWORD **)(a2 + 8) = (SWORD2(v38) - (__int16)v38) & ~((SWORD2(v38) - (__int16)v38) >> 31);
  if (*a1)
  {
    unint64_t v18 = 0;
    do
    {
      memmove(*(void **)(a2 + 56 + 8 * v18), (const void *)(*(void *)(a2 + 56 + 8 * v18) + *(int *)(a2 + 40) * (uint64_t)(__int16)v38), **(int **)(a2 + 8) * (uint64_t)*(int *)(a2 + 40));
      ++v18;
    }
    while (v18 < *a1);
    __int16 v17 = WORD2(v38);
  }
  if (SWORD1(v38) >= v17 || (v16 & 0x80000000) != 0)
  {
    **(_DWORD **)(a2 + 32) = 7;
    VCTimescalePSOLA_IncFrameScaledGapCount((uint64_t)a1);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v19 = VRTraceErrorLogLevelToCSTR();
      double v20 = *MEMORY[0x1E4F47A50];
      long long v21 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = *(_DWORD *)(a2 + 20);
          int v26 = 136316162;
          uint64_t v27 = v19;
          __int16 v28 = 2080;
          int v29 = "_VCTimescalePSOLA_ActiveSpeechExpand";
          __int16 v30 = 1024;
          int v31 = 199;
          __int16 v32 = 1024;
          int v33 = v22;
          __int16 v34 = 1024;
          int v35 = SWORD2(v38) - SWORD1(v38);
          _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d PSOLA Expansion samplesToDecode %d Samples Added %d", (uint8_t *)&v26, 0x28u);
        }
      }
      else if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        int v25 = *(_DWORD *)(a2 + 20);
        int v26 = 136316162;
        uint64_t v27 = v19;
        __int16 v28 = 2080;
        int v29 = "_VCTimescalePSOLA_ActiveSpeechExpand";
        __int16 v30 = 1024;
        int v31 = 199;
        __int16 v32 = 1024;
        int v33 = v25;
        __int16 v34 = 1024;
        int v35 = SWORD2(v38) - SWORD1(v38);
        _os_log_debug_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEBUG, " [%s] %s:%d PSOLA Expansion samplesToDecode %d Samples Added %d", (uint8_t *)&v26, 0x28u);
      }
    }
    if (*((_WORD *)a1 + 11)) {
      int v23 = 4;
    }
    else {
      int v23 = 5;
    }
    **(_DWORD **)(a2 + 32) = v23;
    _VCTimescalePSOLA_IncFrameScaledCount((uint64_t)a1, 1);
  }
  *(unsigned char *)(a2 + 152) = 1;
  return v16;
}

uint64_t _VCTimescalePSOLA_IncFrameScaledCount(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 80))
  {
    uint64_t v2 = 88;
    if (a2 == 1) {
      uint64_t v2 = 86;
    }
    int v3 = *(__int16 *)(result + v2);
    if (v3)
    {
      int v4 = *(__int16 *)(result + 82);
      if (v4 < v3 && *(unsigned char *)(result + 92))
      {
        LOWORD(v4) = v4 + 1;
        *(_DWORD *)(result + 82) = (unsigned __int16)v4;
      }
      if (v3 <= (__int16)v4)
      {
        *(_DWORD *)(result + 82) = 0;
        *(unsigned char *)(result + 92) = 0;
      }
    }
  }
  return result;
}

uint64_t _VCTimescalePSOLA_ActiveSpeechCompress(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[0] = v4;
  v30[1] = v4;
  v29[0] = v4;
  v29[1] = v4;
  uint64_t v5 = *a1;
  if (*a1)
  {
    double v6 = v30;
    long long v7 = (void *)(a2 + 88);
    do
    {
      *(v6 - 4) = *v7;
      *v6++ = *(v7 - 4);
      ++v7;
      --v5;
    }
    while (v5);
  }
  LOWORD(v4) = *((_WORD *)a1 + 1);
  double v8 = (double)(unint64_t)v4;
  *((_WORD *)a1 + 2) = (int)(v8 * 0.01);
  *(double *)&long long v4 = *((double *)a1 + 4334) * v8;
  if (*(double *)&v4 > (double)*(int *)(a2 + 20)) {
    *(double *)&long long v4 = (double)*(int *)(a2 + 20);
  }
  WORD1(v31) = (int)*(double *)&v4;
  LOWORD(v31) = 0;
  uint64_t v9 = VCTimescalePSOLA_Accelerate(a1, (__int16 *)v29);
  uint64_t v10 = v9;
  int v11 = SWORD2(v31);
  **(_DWORD **)(a2 + 8) = SWORD2(v31);
  *(unsigned char *)(a2 + 152) = 1;
  if (*(_DWORD *)(a2 + 20) <= v11 || (v9 & 0x80000000) != 0)
  {
    **(_DWORD **)(a2 + 32) = 7;
    VCTimescalePSOLA_IncFrameScaledGapCount((uint64_t)a1);
  }
  else
  {
    if (*((_WORD *)a1 + 11)) {
      int v12 = 1;
    }
    else {
      int v12 = 3;
    }
    **(_DWORD **)(a2 + 32) = v12;
    _VCTimescalePSOLA_IncFrameScaledCount((uint64_t)a1, 0);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      uint64_t v14 = *MEMORY[0x1E4F47A50];
      unint64_t v15 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = *(_DWORD *)(a2 + 20);
          int v19 = 136316162;
          uint64_t v20 = v13;
          __int16 v21 = 2080;
          int v22 = "_VCTimescalePSOLA_ActiveSpeechCompress";
          __int16 v23 = 1024;
          int v24 = 252;
          __int16 v25 = 1024;
          int v26 = v16;
          __int16 v27 = 1024;
          int v28 = v16 - SWORD2(v31);
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d PSOLA Compress samplesToDecode %d samples removed %d", (uint8_t *)&v19, 0x28u);
        }
      }
      else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v18 = *(_DWORD *)(a2 + 20);
        int v19 = 136316162;
        uint64_t v20 = v13;
        __int16 v21 = 2080;
        int v22 = "_VCTimescalePSOLA_ActiveSpeechCompress";
        __int16 v23 = 1024;
        int v24 = 252;
        __int16 v25 = 1024;
        int v26 = v18;
        __int16 v27 = 1024;
        int v28 = v18 - SWORD2(v31);
        _os_log_debug_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEBUG, " [%s] %s:%d PSOLA Compress samplesToDecode %d samples removed %d", (uint8_t *)&v19, 0x28u);
      }
    }
  }
  return v10;
}

uint64_t VCTimescalePSOLA_ActiveSpeechAdapt(uint64_t a1, uint64_t a2, double a3)
{
  double v3 = (double)*(int *)(a2 + 20);
  LOWORD(a3) = *(_WORD *)(a1 + 2);
  double v4 = (double)*(unint64_t *)&a3;
  double v5 = *(double *)(a1 + 34672) * (double)*(unint64_t *)&a3;
  double v6 = *(double *)(a2 + 160);
  double v7 = *(double *)(a1 + 34680) * v4;
  BOOL v8 = v5 <= v3 && v6 > 0.0;
  char v9 = v7 <= v3 && v6 < 0.0;
  int v10 = *(_DWORD *)(a1 + 96);
  if (v10 != 3)
  {
    if (v10 != 2) {
      return 0;
    }
    goto LABEL_16;
  }
  if (v8) {
    BOOL v8 = *(_DWORD *)(a2 + 16) == 0;
  }
  int v11 = *(_DWORD *)(a2 + 172);
  if (v11 == 3)
  {
LABEL_16:
    v9 |= v8;
    goto LABEL_17;
  }
  if (v11 != 2)
  {
    if (v11 != 1) {
      return 0;
    }
LABEL_17:
    if ((v9 & 1) == 0) {
      return 0;
    }
    goto LABEL_18;
  }
  if (!v8) {
    return 0;
  }
LABEL_18:
  if (v6 < 0.0) {
    return _VCTimescalePSOLA_ActiveSpeechExpand((unsigned __int8 *)a1, a2, v6);
  }
  if (v6 > 0.0) {
    return _VCTimescalePSOLA_ActiveSpeechCompress((unsigned __int8 *)a1, a2);
  }
  return 0;
}

void VCTimescalePSOLA_UpdateHistoryBuffer(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 40);
  int v4 = (int)((double)(v3 * *((unsigned __int16 *)a1 + 1)) * 0.01);
  int v5 = (__int16)(v3 * (**(_DWORD **)(a2 + 8) + **(_WORD **)(a2 + 24)));
  if (v5 >= v4)
  {
    if (*a1)
    {
      unint64_t v11 = 0;
      int v12 = 0;
      do
      {
        memcpy(&a1[*(int *)(a2 + 40) * (uint64_t)v12 + 3940], (const void *)(*(void *)(a2 + 120 + 8 * v11++) + v5 - (uint64_t)v4), v4);
        v12 += 1920;
      }
      while (v11 < *a1);
      int v3 = *(_DWORD *)(a2 + 40);
    }
    *((_WORD *)a1 + 17330) = v4 / v3;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    double v7 = *MEMORY[0x1E4F47A50];
    BOOL v8 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(_DWORD *)(a2 + 40);
        int v14 = 136315906;
        uint64_t v15 = v6;
        __int16 v16 = 2080;
        __int16 v17 = "VCTimescalePSOLA_UpdateHistoryBuffer";
        int v19 = 310;
        __int16 v18 = 1024;
        __int16 v20 = 1024;
        int v21 = v5 / v9;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Not enough samples to update PSOLA history buffer availableSamples=%d", (uint8_t *)&v14, 0x22u);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(_DWORD *)(a2 + 40);
      int v14 = 136315906;
      uint64_t v15 = v6;
      __int16 v16 = 2080;
      __int16 v17 = "VCTimescalePSOLA_UpdateHistoryBuffer";
      int v19 = 310;
      __int16 v18 = 1024;
      __int16 v20 = 1024;
      int v21 = v5 / v13;
      _os_log_debug_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Not enough samples to update PSOLA history buffer availableSamples=%d", (uint8_t *)&v14, 0x22u);
    }
  }
}

BOOL VCTimescalePSOLA_CheckCompressionPSOLA(uint64_t a1, int a2, int a3)
{
  return !a2 || a3 == 0;
}

uint64_t VCIDSChannelData_GetIDSAttributeSizeWithChannelDataFormat(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 24)) {
      __int16 v1 = (*(unsigned char *)(a1 + 24) != 1) | (unsigned __int16)(2 * *(unsigned __int8 *)(a1 + 24));
    }
    else {
      __int16 v1 = 0;
    }
    if (*(unsigned char *)(a1 + 30)) {
      v1 += 8;
    }
    if (*(unsigned char *)(a1 + 28)) {
      ++v1;
    }
    if (*(unsigned char *)(a1 + 25)) {
      v1 += 2;
    }
    unsigned __int16 v2 = v1 + *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 42)) {
      v2 += 2;
    }
    if (*(_WORD *)(a1 + 52)) {
      v2 += 10;
    }
  }
  else
  {
    return 0;
  }
  return v2;
}

uint64_t VCIDSChannelData_GetIDSHeaderSizeWithChannelDataFormatArray(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v2 = 0;
  if (a1)
  {
    __int16 v3 = a2;
    if (a2)
    {
      uint64_t v4 = a1;
      int v5 = 0;
      uint64_t v6 = a2;
      do
      {
        v5 += VCIDSChannelData_GetIDSAttributeSizeWithChannelDataFormat(v4) + 2;
        v4 += 80;
        --v6;
      }
      while (v6);
      return (unsigned __int16)(v5 + 2 * v3 + 2);
    }
  }
  return v2;
}

uint64_t _VCImageQueue_applyLayerTransforms(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)(a1 + 184);
  if (result)
  {
    [(id)result contentsRect];
    BOOL v5 = CGRectEqualToRect(v25, *(CGRect *)(a1 + 192));
    BOOL v6 = v5;
    int v7 = !v5;
    BOOL v8 = *(void **)(a1 + 184);
    if (v8) {
      [v8 transform];
    }
    else {
      memset(&v22, 0, sizeof(v22));
    }
    long long v9 = *(_OWORD *)(a1 + 304);
    *(_OWORD *)&b.m31 = *(_OWORD *)(a1 + 288);
    *(_OWORD *)&b.m33 = v9;
    long long v10 = *(_OWORD *)(a1 + 336);
    *(_OWORD *)&b.m41 = *(_OWORD *)(a1 + 320);
    *(_OWORD *)&b.m43 = v10;
    long long v11 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)&b.m11 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)&b.m13 = v11;
    long long v12 = *(_OWORD *)(a1 + 272);
    *(_OWORD *)&b.m21 = *(_OWORD *)(a1 + 256);
    *(_OWORD *)&b.m23 = v12;
    uint64_t result = CATransform3DEqualToTransform(&v22, &b);
    int v13 = result ^ 1;
    if ((v7 | result ^ 1) == 1)
    {
      char v14 = result;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v15 = VRTraceErrorLogLevelToCSTR();
        __int16 v16 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(b.m11) = 136316674;
          *(void *)((char *)&b.m11 + 4) = v15;
          WORD2(b.m12) = 2080;
          *(void *)((char *)&b.m12 + 6) = "_VCImageQueue_applyLayerTransforms";
          HIWORD(b.m13) = 1024;
          LODWORD(b.m14) = 350;
          WORD2(b.m14) = 1024;
          *(_DWORD *)((char *)&b.m14 + 6) = 350;
          WORD1(b.m21) = 2048;
          *(void *)((char *)&b.m21 + 4) = a1;
          WORD2(b.m22) = 1024;
          *(_DWORD *)((char *)&b.m22 + 6) = v7;
          WORD1(b.m23) = 1024;
          HIDWORD(b.m23) = v13;
          _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Applying layer transforms either on timeout or while we are not waiting for UI layout change, vcImageQueue=%p contentsRectDidChange=%d tranformDidChange=%d", (uint8_t *)&b, 0x38u);
        }
      }
      objc_msgSend(MEMORY[0x1E4F39CF8], "begin", *(_OWORD *)&v22.m11, *(_OWORD *)&v22.m13, *(_OWORD *)&v22.m21, *(_OWORD *)&v22.m23, *(_OWORD *)&v22.m31, *(_OWORD *)&v22.m33, *(_OWORD *)&v22.m41, *(_OWORD *)&v22.m43);
      [MEMORY[0x1E4F39CF8] setDisableActions:1];
      if (!v6) {
        objc_msgSend(*(id *)(a1 + 184), "setContentsRect:", *(double *)(a1 + 192), *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216));
      }
      if ((v14 & 1) == 0 && *(unsigned char *)(a1 + 435))
      {
        __int16 v17 = *(void **)(a1 + 184);
        long long v18 = *(_OWORD *)(a1 + 304);
        *(_OWORD *)&b.m31 = *(_OWORD *)(a1 + 288);
        *(_OWORD *)&b.m33 = v18;
        long long v19 = *(_OWORD *)(a1 + 336);
        *(_OWORD *)&b.m41 = *(_OWORD *)(a1 + 320);
        *(_OWORD *)&b.m43 = v19;
        long long v20 = *(_OWORD *)(a1 + 240);
        *(_OWORD *)&b.m11 = *(_OWORD *)(a1 + 224);
        *(_OWORD *)&b.m13 = v20;
        long long v21 = *(_OWORD *)(a1 + 272);
        *(_OWORD *)&b.m21 = *(_OWORD *)(a1 + 256);
        *(_OWORD *)&b.m23 = v21;
        [v17 setTransform:&b];
      }
      if (a2) {
        CAImageQueueFlushWithTransaction();
      }
      return [MEMORY[0x1E4F39CF8] commit];
    }
  }
  return result;
}

uint64_t VCImageQueue_setCALayerSize(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  if (*(void *)(a1 + 176))
  {
    if (*(void *)(a1 + 184))
    {
      _VCImageQueue_configureCALayerBounds(a1, a2, a3, a4, a5, a6);
      _VCImageQueue_signalWaitForLayoutChangeCondition(a1);
      [MEMORY[0x1E4F39CF8] commit];
      return 1;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCImageQueue_setCALayerSize_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCImageQueue_setCALayerSize_cold_1();
    }
  }
  [MEMORY[0x1E4F39CF8] commit];
  return 0;
}

void _VCImageQueue_configureCALayerBounds(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 184) contentsRect];
  if (!CGRectEqualToRect(v38, *(CGRect *)(a1 + 192))) {
    objc_msgSend(*(id *)(a1 + 184), "setContentsRect:", *(double *)(a1 + 192), *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216));
  }
  long long v12 = *(void **)(a1 + 184);
  if (v12) {
    [v12 transform];
  }
  else {
    memset(&v35, 0, sizeof(v35));
  }
  long long v13 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)&b.m31 = *(_OWORD *)(a1 + 288);
  *(_OWORD *)&b.m33 = v13;
  long long v14 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)&b.m41 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)&b.m43 = v14;
  long long v15 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)&b.m11 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)&b.m13 = v15;
  long long v16 = *(_OWORD *)(a1 + 272);
  *(_OWORD *)&b.m21 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)&b.m23 = v16;
  if (!CATransform3DEqualToTransform(&v35, &b) && *(unsigned char *)(a1 + 435))
  {
    __int16 v17 = *(void **)(a1 + 184);
    long long v18 = *(_OWORD *)(a1 + 304);
    *(_OWORD *)&b.m31 = *(_OWORD *)(a1 + 288);
    *(_OWORD *)&b.m33 = v18;
    long long v19 = *(_OWORD *)(a1 + 336);
    *(_OWORD *)&b.m41 = *(_OWORD *)(a1 + 320);
    *(_OWORD *)&b.m43 = v19;
    long long v20 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)&b.m11 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)&b.m13 = v20;
    long long v21 = *(_OWORD *)(a1 + 272);
    *(_OWORD *)&b.m21 = *(_OWORD *)(a1 + 256);
    *(_OWORD *)&b.m23 = v21;
    [v17 setTransform:&b];
  }
  if (!a2) {
    goto LABEL_11;
  }
  CATransform3D v22 = *(void **)(a1 + 184);
  __int16 v23 = (void *)[v22 context];
  *(void *)&b.m11 = MEMORY[0x1E4F143A8];
  *(void *)&b.m12 = 3221225472;
  *(void *)&b.m13 = ___VCImageQueue_setFenceWithCompletionHandler_block_invoke;
  *(void *)&b.m14 = &unk_1E6DB3E40;
  *(void *)&b.m21 = a2;
  *(void *)&b.m22 = v22;
  if (([v23 addFence:a2 completionHandler:&b] & 1) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v31 = VRTraceErrorLogLevelToCSTR();
      uint64_t v32 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v33 = *(void **)(a1 + 184);
        CGFloat v34 = COERCE_DOUBLE([v33 context]);
        LODWORD(b.m11) = 136316674;
        *(void *)((char *)&b.m11 + 4) = v31;
        WORD2(b.m12) = 2080;
        *(void *)((char *)&b.m12 + 6) = "_VCImageQueue_configureCALayerBounds";
        HIWORD(b.m13) = 1024;
        LODWORD(b.m14) = 396;
        WORD2(b.m14) = 1024;
        *(_DWORD *)((char *)&b.m14 + 6) = 396;
        WORD1(b.m21) = 2048;
        *(void *)((char *)&b.m21 + 4) = a2;
        WORD2(b.m22) = 2048;
        *(void *)((char *)&b.m22 + 6) = v33;
        HIWORD(b.m23) = 2048;
        b.m24 = v34;
        _os_log_error_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Failed to add fence=%p for remote layer=%p with context=%p", (uint8_t *)&b, 0x40u);
      }
    }
  }
  else
  {
LABEL_11:
    v39.origin.x = a3;
    v39.origin.y = a4;
    v39.size.width = a5;
    v39.size.height = a6;
    if (!CGRectIsNull(v39))
    {
      v40.origin.x = a3;
      v40.origin.y = a4;
      v40.size.width = a5;
      v40.size.height = a6;
      if (!CGRectIsEmpty(v40))
      {
        v41.origin.x = a3;
        v41.origin.y = a4;
        v41.size.width = a5;
        v41.size.height = a6;
        if (!CGRectEqualToRect(v41, *MEMORY[0x1E4F1DB28]))
        {
          [*(id *)(a1 + 184) frame];
          v44.origin.x = v24;
          v44.origin.y = v25;
          v44.size.width = v26;
          v44.size.height = v27;
          v42.origin.x = a3;
          v42.origin.y = a4;
          v42.size.width = a5;
          v42.size.height = a6;
          if (!CGRectEqualToRect(v42, v44))
          {
            objc_msgSend(*(id *)(a1 + 184), "setFrame:", a3, a4, a5, a6);
            objc_msgSend(*(id *)(a1 + 184), "setPosition:", a5 * 0.5, a6 * 0.5);
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v28 = VRTraceErrorLogLevelToCSTR();
              int v29 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                v43.origin.x = a3;
                v43.origin.y = a4;
                v43.size.width = a5;
                v43.size.height = a6;
                __int16 v30 = NSStringFromRect(v43);
                LODWORD(b.m11) = 136316162;
                *(void *)((char *)&b.m11 + 4) = v28;
                WORD2(b.m12) = 2080;
                *(void *)((char *)&b.m12 + 6) = "_VCImageQueue_configureCALayerBounds";
                HIWORD(b.m13) = 1024;
                LODWORD(b.m14) = 401;
                WORD2(b.m14) = 1024;
                *(_DWORD *)((char *)&b.m14 + 6) = 401;
                WORD1(b.m21) = 2112;
                *(void *)((char *)&b.m21 + 4) = v30;
                _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: configureCALayerBounds: frameRect=%@", (uint8_t *)&b, 0x2Cu);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t _VCImageQueue_signalWaitForLayoutChangeCondition(uint64_t result)
{
  if (!*(unsigned char *)(result + 424))
  {
    uint64_t v1 = result;
    unsigned __int16 v2 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    if (*(unsigned char *)(v1 + 352)) {
      pthread_cond_signal((pthread_cond_t *)(v1 + 360));
    }
    return pthread_mutex_unlock(v2);
  }
  return result;
}

CGFloat getScreenTransformForVideoAttributes@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  __int16 v3 = (_OWORD *)MEMORY[0x1E4F39B10];
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
  a2[4] = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
  a2[5] = v4;
  long long v5 = v3[7];
  a2[6] = v3[6];
  a2[7] = v5;
  long long v6 = v3[1];
  *a2 = *v3;
  a2[1] = v6;
  long long v7 = v3[3];
  a2[2] = v3[2];
  a2[3] = v7;
  unsigned int v8 = [a1 orientation];
  CGFloat v9 = 0.0;
  if (v8 <= 2) {
    CGFloat v9 = dbl_1E259FAB0[v8];
  }
  CATransform3DMakeRotation(&v15, v9, 0.0, 0.0, 1.0);
  long long v10 = *(_OWORD *)&v15.m33;
  a2[4] = *(_OWORD *)&v15.m31;
  a2[5] = v10;
  long long v11 = *(_OWORD *)&v15.m43;
  a2[6] = *(_OWORD *)&v15.m41;
  a2[7] = v11;
  long long v12 = *(_OWORD *)&v15.m13;
  *a2 = *(_OWORD *)&v15.m11;
  a2[1] = v12;
  CGFloat result = v15.m21;
  long long v14 = *(_OWORD *)&v15.m23;
  a2[2] = *(_OWORD *)&v15.m21;
  a2[3] = v14;
  return result;
}

CATransform3D *getTransformForVideoAttributes@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v4 = (_OWORD *)MEMORY[0x1E4F39B10];
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
  a2[4] = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
  a2[5] = v5;
  long long v6 = v4[7];
  a2[6] = v4[6];
  a2[7] = v6;
  long long v7 = v4[1];
  *a2 = *v4;
  a2[1] = v7;
  long long v8 = v4[3];
  a2[2] = v4[2];
  a2[3] = v8;
  float v9 = 0.0;
  if ([a1 camera] == 1) {
    float v10 = 3.1416;
  }
  else {
    float v10 = 0.0;
  }
  switch([a1 orientation])
  {
    case 0u:
      float v9 = -1.5708;
      break;
    case 1u:
      float v9 = 1.5708;
      break;
    case 2u:
    case 3u:
      float v9 = v10 + 3.14159265;
      break;
    default:
      break;
  }
  CGFloat result = CATransform3DMakeRotation(&v16, v9, 0.0, 0.0, 1.0);
  long long v12 = *(_OWORD *)&v16.m33;
  a2[4] = *(_OWORD *)&v16.m31;
  a2[5] = v12;
  long long v13 = *(_OWORD *)&v16.m43;
  a2[6] = *(_OWORD *)&v16.m41;
  a2[7] = v13;
  long long v14 = *(_OWORD *)&v16.m13;
  *a2 = *(_OWORD *)&v16.m11;
  a2[1] = v14;
  long long v15 = *(_OWORD *)&v16.m23;
  a2[2] = *(_OWORD *)&v16.m21;
  a2[3] = v15;
  return result;
}

void *VCImageQueue_remoteVideoAttributesChanged(void *result, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      long long v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        if (a2) {
          long long v6 = (const char *)objc_msgSend((id)objc_msgSend(a2, "description"), "UTF8String");
        }
        else {
          long long v6 = "<nil>";
        }
        LODWORD(buf.m11) = 136316162;
        *(void *)((char *)&buf.m11 + 4) = v4;
        WORD2(buf.m12) = 2080;
        *(void *)((char *)&buf.m12 + 6) = "VCImageQueue_remoteVideoAttributesChanged";
        HIWORD(buf.m13) = 1024;
        LODWORD(buf.m14) = 730;
        WORD2(buf.m14) = 1024;
        *(_DWORD *)((char *)&buf.m14 + 6) = 730;
        WORD1(buf.m21) = 2080;
        *(void *)((char *)&buf.m21 + 4) = v6;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: videoAttributes=%s", (uint8_t *)&buf, 0x2Cu);
      }
    }
    long long v7 = (_OWORD *)(v3 + 224);
    if ([a2 videoSourceScreen]) {
      getScreenTransformForVideoAttributes(a2, &buf);
    }
    else {
      getTransformForVideoAttributes(a2, &buf);
    }
    long long v8 = *(_OWORD *)&buf.m33;
    *(_OWORD *)(v3 + 288) = *(_OWORD *)&buf.m31;
    *(_OWORD *)(v3 + 304) = v8;
    long long v9 = *(_OWORD *)&buf.m43;
    *(_OWORD *)(v3 + 320) = *(_OWORD *)&buf.m41;
    *(_OWORD *)(v3 + 336) = v9;
    long long v10 = *(_OWORD *)&buf.m13;
    *long long v7 = *(_OWORD *)&buf.m11;
    *(_OWORD *)(v3 + 240) = v10;
    long long v11 = *(_OWORD *)&buf.m23;
    *(_OWORD *)(v3 + 256) = *(_OWORD *)&buf.m21;
    *(_OWORD *)(v3 + 272) = v11;
    int v12 = [a2 videoSourceScreen];
    [a2 contentsRect];
    uint64_t v17 = v16;
    if (v12)
    {
      [a2 contentsRect];
      double v19 = 1.0 - v18;
      [a2 contentsRect];
      double v21 = v19 - v20;
      [a2 contentsRect];
      uint64_t v23 = v22;
      [a2 contentsRect];
    }
    else
    {
      double v21 = v13;
      uint64_t v23 = v14;
    }
    *(void *)(v3 + 192) = v17;
    *(double *)(v3 + 200) = v21;
    *(void *)(v3 + 208) = v23;
    *(void *)(v3 + 216) = v15;
    CGFloat v24 = *(void **)(v3 + 184);
    if (v24)
    {
      [v24 transform];
      long long v25 = *(_OWORD *)(v3 + 304);
      *(_OWORD *)&a.m31 = *(_OWORD *)(v3 + 288);
      *(_OWORD *)&a.m33 = v25;
      long long v26 = *(_OWORD *)(v3 + 336);
      *(_OWORD *)&a.m41 = *(_OWORD *)(v3 + 320);
      *(_OWORD *)&a.m43 = v26;
      long long v27 = *(_OWORD *)(v3 + 240);
      *(_OWORD *)&a.m11 = *v7;
      *(_OWORD *)&a.m13 = v27;
      long long v28 = *(_OWORD *)(v3 + 272);
      *(_OWORD *)&a.m21 = *(_OWORD *)(v3 + 256);
      *(_OWORD *)&a.m23 = v28;
      if (!CATransform3DEqualToTransform(&a, &buf)
        || ([*(id *)(v3 + 184) contentsRect],
            v44.origin.x = v29,
            v44.origin.y = v30,
            v44.size.width = v31,
            v44.size.height = v32,
            !CGRectEqualToRect(*(CGRect *)(v3 + 192), v44)))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v33 = VRTraceErrorLogLevelToCSTR();
          CGFloat v34 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v35 = [a2 orientation];
            uint64_t v36 = NSStringFromRect(*(NSRect *)(v3 + 192));
            [*(id *)(v3 + 184) contentsRect];
            uint64_t v37 = NSStringFromRect(v43);
            LODWORD(a.m11) = 136316674;
            *(void *)((char *)&a.m11 + 4) = v33;
            WORD2(a.m12) = 2080;
            *(void *)((char *)&a.m12 + 6) = "_VCImageQueue_logLayerAttributes";
            HIWORD(a.m13) = 1024;
            LODWORD(a.m14) = 723;
            WORD2(a.m14) = 1024;
            *(_DWORD *)((char *)&a.m14 + 6) = 723;
            WORD1(a.m21) = 1024;
            HIDWORD(a.m21) = v35;
            LOWORD(a.m22) = 2112;
            *(void *)((char *)&a.m22 + 2) = v36;
            WORD1(a.m23) = 2112;
            *(void *)((char *)&a.m23 + 4) = v37;
            _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Transform updated for orientation=%d or ContentsRect changed to=%@ from=%@", (uint8_t *)&a, 0x3Cu);
          }
        }
      }
    }
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 32));
    if (!*(unsigned char *)(v3 + 352)) {
      _VCImageQueue_applyLayerTransforms(v3, 0);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
    CGFloat result = *(void **)(v3 + 144);
    if (result)
    {
      *(_OWORD *)&buf.m31 = xmmword_1E259FAA0;
      *(_OWORD *)&buf.m11 = xmmword_1E259FA60;
      memset(&buf.m13, 255, 48);
      [result currentDetails];
      LOBYTE(buf.m11) = 1;
      long long v38 = *(_OWORD *)(v3 + 208);
      *(_OWORD *)&buf.m13 = *(_OWORD *)(v3 + 192);
      *(_OWORD *)&buf.m21 = v38;
      buf.m31 = *(CGFloat *)(v3 + 24);
      LODWORD(buf.m32) = [a2 camera];
      v39[2] = *(_OWORD *)&buf.m21;
      v39[3] = *(_OWORD *)&buf.m23;
      v39[0] = *(_OWORD *)&buf.m11;
      v39[1] = *(_OWORD *)&buf.m13;
      v39[4] = *(_OWORD *)&buf.m31;
      return (void *)[*(id *)(v3 + 144) setCurrentDetails:v39];
    }
  }
  return result;
}

void VCImageQueue_EffectsEnabledForPreview(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      long long v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136316162;
        uint64_t v7 = v4;
        __int16 v8 = 2080;
        long long v9 = "VCImageQueue_EffectsEnabledForPreview";
        __int16 v10 = 1024;
        int v11 = 1153;
        __int16 v12 = 1024;
        int v13 = 1153;
        __int16 v14 = 1024;
        int v15 = a2;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: effectsEnabled=%d", (uint8_t *)&v6, 0x28u);
      }
    }
    *(unsigned char *)(a1 + 425) = a2;
  }
}

uint64_t VCImageQueue_EnqueueSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v17.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v17.CMTimeEpoch epoch = epoch;
  if (a1 && a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    Imageuint64_t Buffer = CMSampleBufferGetImageBuffer(a2);
    if (ImageBuffer) {
      _VCImageQueue_DrawOverlayMessage(a1, ImageBuffer);
    }
    uint64_t v7 = *(void *)(a1 + 152);
    if (v7 && (VCStreamOutput_EnqueueSampleBuffer(*(void *)(a1 + 152), a2) & 1) == 0)
    {
      CMTimeValue value = *(void *)v4;
      CMTimeScale timescale = *(_DWORD *)(v4 + 8);
      CMTimeFlags flags = *(_DWORD *)(v4 + 12);
      _VCImageQueue_AverageFrameRate(a1);
    }
    else
    {
      CMSampleBufferGetPresentationTimeStamp(&time, a2);
      CMTimeValue value = time.value;
      CMTimeScale timescale = time.timescale;
      CMTimeFlags flags = time.flags;
      CMTimeEpoch epoch = time.epoch;
      if (ImageBuffer)
      {
        uint64_t v11 = _VCImageQueue_EnqueuePixelBuffer(a1, ImageBuffer, (uint64_t)&time, (uint64_t)&v17);
        uint64_t v12 = v11;
        if (!v7 && !v11) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
    }
    uint64_t v12 = 1;
LABEL_10:
    time.CMTimeValue value = value;
    time.CMTimeScale timescale = timescale;
    time.CMTimeFlags flags = flags;
    time.CMTimeEpoch epoch = epoch;
    *(double *)&uint64_t v13 = CMTimeGetSeconds(&time);
    CMTime time = v17;
    _VCImageQueue_EmitFrameEnqueuedSignposts(a1, v13, &time, ImageBuffer);
LABEL_11:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
    return v12;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      LODWORD(time.value) = 136316162;
      *(CMTimeValue *)((char *)&time.value + 4) = v14;
      LOWORD(time.flags) = 2080;
      *(void *)((char *)&time.flags + 2) = "VCImageQueue_EnqueueSampleBuffer";
      HIWORD(time.epoch) = 1024;
      int v19 = 1192;
      __int16 v20 = 2048;
      uint64_t v21 = a1;
      __int16 v22 = 2048;
      uint64_t v23 = a2;
      _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter. imageQueue=%p sampleBuffer=%p", (uint8_t *)&time, 0x30u);
    }
  }
  return 1;
}

CFIndex _VCImageQueue_AverageFrameRate(uint64_t a1)
{
  valuePtr[1] = *(double *)MEMORY[0x1E4F143B8];
  double v2 = micro();
  _VCImageQueue_RemoveExpiredFrameCounts(a1, v2);
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
  if (result)
  {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), 0);
    CFNumberRef v5 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    valuePtr[0] = 0.0;
    CFIndex result = CFNumberGetValue(v5, kCFNumberDoubleType, valuePtr);
    if (v2 - valuePtr[0] >= 0.1)
    {
      CFNumberRef v6 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 1);
      int v7 = 0;
      return CFNumberGetValue(v6, kCFNumberSInt32Type, &v7);
    }
  }
  return result;
}

float _VCImageQueue_computeVisibleFrameRatio(uint64_t a1, float *a2)
{
  *(_OWORD *)CFNumberRef v6 = *MEMORY[0x1E4F1DB30];
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    if (FigCFDictionaryGetCGSizeIfPresent())
    {
      float result = v6[0] * *(double *)&v5;
      if (result != 0.0)
      {
        float v4 = v6[1] * *((double *)&v5 + 1);
        if (v4 != 0.0)
        {
          float result = result / v4;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

void VCImageQueue_CleanupStreamOutput(uint64_t a1)
{
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCImageQueue_CleanupStreamOutput_cold_1();
    }
  }

  *(void *)(a1 + 152) = 0;
}

uint64_t FigImageQueueCanEnqueueImage(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  float v4 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v4) {
    return 0;
  }

  return v4(a1);
}

uint64_t _VCImageQueue_RemoveExpiredFrameCounts(uint64_t a1, double a2)
{
  v8[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
  if (result >= 1)
  {
    double v5 = a2 + -10.0;
    do
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), 0);
      CFNumberRef v7 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      v8[0] = 0.0;
      uint64_t result = CFNumberGetValue(v7, kCFNumberDoubleType, v8);
      if (v8[0] >= v5) {
        break;
      }
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 136), 0);
      uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
    }
    while (result > 0);
  }
  return result;
}

void sub_1E210855C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1E210892C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void VCAudioStreamSendGroup_PushAudioSamples(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  double v4 = 0.0;
  if (VRTraceIsInternalOSInstalled()) {
    double v4 = micro();
  }
  int v45 = (unsigned int *)a2;
  double v5 = (unsigned __int8 *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 776));
  if (v5)
  {
    uint64_t v13 = v5;
    int v14 = 0;
    do
    {
      if (*v13)
      {
        *(void *)CATransform3D buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __VCAudioStreamSendGroup_UpdateActiveAudioStreams_block_invoke;
        __int16 v48 = &unk_1E6DB7050;
        uint64_t v49 = a1;
        uint64_t v50 = (uint64_t)v13;
        _VCAudioStreamSendGroup_ProcessActiveStreams(a1, v13, (uint64_t)buf);
        uint64_t v15 = *(uint64_t **)(*(void *)(a1 + 760) + 176);
        if (v15)
        {
          int v16 = 0;
          do
          {
            if (*((unsigned char *)v15 + 8)) {
              v16 += *((_DWORD *)v15 + 12);
            }
            uint64_t v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          int v16 = 0;
        }
        *(_DWORD *)(a1 + 488) = v16;
        uint64_t v17 = MEMORY[0x1E4E56580](a1 + 296);
        if (v17)
        {
          double v18 = *(NSObject **)(a1 + 304);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __VCAudioStreamSendGroup_UpdateActiveAudioStreams_block_invoke_2;
          block[3] = &unk_1E6DB3E40;
          void block[4] = v17;
          void block[5] = a1;
          dispatch_async(v18, block);
        }
      }
      ++v14;
      VCMemoryPool_Free(*(OSQueueHead **)(a1 + 792), v13);
      uint64_t v13 = (unsigned __int8 *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 776));
    }
    while (v13);
  }
  LogProfileTimeOverLimit(v4, 0, v6, v7, v8, v9, v10, v11, v12, (char)"VCAudioStreamSendGroup_ProcessAudioStreamUpdateEvent");
  int v19 = (unsigned int *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 784));
  if (v19)
  {
    __int16 v20 = v19;
    do
    {
      for (uint64_t i = *(uint64_t ***)(*(void *)(a1 + 760) + 176); i; uint64_t i = (uint64_t **)*i)
        [i[5] redundancyController:*(void *)(a1 + 480) redundancyPercentageDidChange:*v20];
      VCMemoryPool_Free(*(OSQueueHead **)(a1 + 800), v20);
      __int16 v20 = (unsigned int *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 784));
    }
    while (v20);
  }
  int Timestamp = VCAudioBufferList_GetTimestamp(a2);
  VCAudioBufferList_GetHostTime(a2);
  kdebug_trace();
  if (*(unsigned char *)(a1 + 492))
  {
    uint64_t SampleFormat = (double *)VCAudioBufferList_GetSampleFormat(a2);
    double HostTime = VCAudioBufferList_GetHostTime(a2);
    int v25 = VCMediaStreamSendGroup_ModulateTimestampWithSourceTimestamp(a1, *SampleFormat, HostTime);
    VCAudioBufferList_SetTimestamp(a2, v25);
  }
  int v26 = VCAudioBufferList_GetTimestamp(a2);
  double v27 = VCAudioBufferList_GetHostTime(a2);
  long long v28 = (double *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 760), "audioIO"), "clientFormat");
  CGFloat v29 = *(uint64_t **)(*(void *)(a1 + 760) + 192);
  if (v29)
  {
    double v30 = *v28;
    do
    {
      VCMediaStreamSendGroup_UpdateSendSampleRTPTimestamp(*v29, v26, v30, v27);
      CGFloat v29 = (uint64_t *)v29[2];
    }
    while (v29);
  }
  if (*(unsigned char *)(a1 + 312))
  {
    char Priority = VCAudioBufferList_GetPriority((uint64_t)v45);
    int VoiceActivity = VCAudioBufferList_GetVoiceActivity((uint64_t)v45);
    int v33 = VCAudioBufferList_GetPriority((uint64_t)v45);
    if (*(unsigned char *)(a1 + 817))
    {
      double v34 = micro();
      if (v34 - *(double *)(a1 + 824) > 1.0)
      {
        *(unsigned char *)(a1 + 818) = [+[VCDefaults sharedInstance] forceAudioPriorityValue];
        *(double *)(a1 + 824) = v34;
      }
      int v35 = *(unsigned __int8 *)(a1 + 818);
      if (*(unsigned char *)(a1 + 818))
      {
        VCAudioBufferList_SetPriority((uint64_t)v45, *(unsigned char *)(a1 + 818));
        int v33 = v35;
      }
    }
    if (*(unsigned char *)(a1 + 864))
    {
      if (v33) {
        goto LABEL_43;
      }
    }
    else if (v33 && (!*(unsigned char *)(*(void *)(a1 + 760) + 168) || *(unsigned char *)(a1 + 817)))
    {
      goto LABEL_43;
    }
    int v33 = VCVoiceDetector_ProcessSampleBuffer(*(void **)(a1 + 832), (uint64_t)v45, [*(id *)(a1 + 760) isMuted]);
LABEL_43:
    if (v33 != *(unsigned __int8 *)(a1 + 816))
    {
      *(unsigned char *)(a1 + 816) = v33;
      uint64_t v39 = MEMORY[0x1E4E56580](a1 + 296);
      if (v39)
      {
        CGRect v40 = *(NSObject **)(a1 + 304);
        *(void *)CATransform3D buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __VCAudioStreamSendGroup_UpdateAudioPriorityUplink_block_invoke;
        __int16 v48 = &unk_1E6DB3E18;
        uint64_t v49 = v39;
        uint64_t v50 = a1;
        char v51 = v33;
        dispatch_async(v40, buf);
      }
    }
    *(float *)(a1 + 860) = VCAudioBufferList_GetAveragePower((uint64_t)v45);
    uint64_t v41 = *(void *)(a1 + 840);
    if (v41)
    {
      uint64_t v42 = VCSystemAudioCaptureSession_pullAudioSamples(v41);
      if (v42)
      {
        uint64_t v43 = (uint64_t)v42;
        VCAudioBufferList_ApplyGain((uint64_t)v42, 0.3162);
        VCAudioDucker_Process(*(void *)(a1 + 848), (uint64_t)v45, v43);
        VCAudioBufferList_Mix((uint64_t)v45, v43);
        VCAudioBufferList_SetVoiceActivity((uint64_t)v45, 1);
      }
    }
    for (uint64_t j = *(uint64_t **)(*(void *)(a1 + 760) + 176); j; uint64_t j = (uint64_t *)*j)
    {
      if (*((unsigned char *)j + 8)) {
        VCAudioStream_PushAudioSamples(j[5], v45);
      }
    }
    if (*(unsigned char *)(a1 + 856)) {
      VCMediaQueue_SchedulePackets(*(void *)(a1 + 808));
    }
    VCAudioBufferList_SetTimestamp((uint64_t)v45, Timestamp);
    VCAudioBufferList_SetPriority((uint64_t)v45, Priority);
    VCAudioBufferList_SetVoiceActivity((uint64_t)v45, VoiceActivity);
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v36 = VRTraceErrorLogLevelToCSTR();
    uint64_t v37 = *MEMORY[0x1E4F47A50];
    long long v38 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CATransform3D buf = 136315650;
        *(void *)&uint8_t buf[4] = v36;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCAudioStreamSendGroup_PushAudioSamples";
        *(_WORD *)&unsigned char buf[22] = 1024;
        LODWORD(v48) = 837;
        _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d audio no-op no MKM", buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      VCAudioStreamSendGroup_PushAudioSamples_cold_1();
    }
  }
  VCAudioBufferList_SetTimestamp((uint64_t)v45, Timestamp);
}

uint64_t _VCAudioStreamSendGroup_ProcessActiveStreams(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(result + 760);
  v11[0] = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = 0xAAAAAAAAAAAAAAAALL;
  double v4 = *(uint64_t **)(v3 + 176);
  if (v4)
  {
    unsigned int v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    do
    {
      if (v7 < *a2
        && ((int v10 = *(unsigned __int16 *)&a2[2 * v7 + 2], *((unsigned __int16 *)v4 + 16) == v10)
         || *((unsigned __int16 *)v4 + 17) == v10))
      {
        if (v9) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void *, void))(a3 + 16))(a3, v9, 1, v11, v8);
        }
        int v8 = 0;
        ++v7;
        uint64_t v9 = v4;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, void, void, void))(a3 + 16))(a3, v4, 0, 0, 0);
      }
      if (!a2[18]) {
        *((_WORD *)v11 + v8++) = *((_WORD *)v4 + 16);
      }
      if (*((_WORD *)v4 + 17)) {
        *((_WORD *)v11 + v8++) = *((_WORD *)v4 + 17);
      }
      double v4 = (uint64_t *)*v4;
    }
    while (v4);
    if (v9) {
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void *, void))(a3 + 16))(a3, v9, 1, v11, v8);
    }
  }
  return result;
}

void WriteYuvFrame(__CVBuffer *a1, uint64_t a2, char a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CVPixelBufferRetain(a1);
  global_queue = dispatch_get_global_queue(0, 0);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __WriteYuvFrame_block_invoke;
  v7[3] = &__block_descriptor_49_e5_v8__0l;
  v7[4] = a1;
  v7[5] = a2;
  char v8 = a3;
  dispatch_async(global_queue, v7);
}

void __WriteYuvFrame_block_invoke(uint64_t a1)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 32));
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
  if ((PixelFormatType & 0xFFFFFFEF) == 0x34323066)
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(a1 + 32), 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(a1 + 32), 0);
    int WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 32), 0);
    int HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(a1 + 32), 0);
    if (HeightOfPlane >= 1)
    {
      do
      {
        fwrite(BaseAddressOfPlane, 1uLL, WidthOfPlane, *(FILE **)(a1 + 40));
        BaseAddressOfPlane += BytesPerRowOfPlane;
        --HeightOfPlane;
      }
      while (HeightOfPlane);
    }
    unsigned int v7 = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
    size_t v8 = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
    int v9 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
    int v10 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
    if (v10 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v10;
      uint64_t v13 = v7;
      do
      {
        uint64_t v14 = v9;
        uint64_t v15 = v13;
        if (v9 >= 1)
        {
          do
          {
            fwrite(v15, 1uLL, 1uLL, *(FILE **)(a1 + 40));
            v15 += 2;
            --v14;
          }
          while (v14);
        }
        ++v11;
        v13 += v8;
      }
      while (v11 != v12);
      uint64_t v16 = 0;
      uint64_t v17 = v7 + 1;
      do
      {
        uint64_t v18 = v9;
        int v19 = v17;
        if (v9 >= 1)
        {
          do
          {
            fwrite(v19, 1uLL, 1uLL, *(FILE **)(a1 + 40));
            v19 += 2;
            --v18;
          }
          while (v18);
        }
        ++v16;
        v17 += v8;
      }
      while (v16 != v12);
    }
  }
  else if (PixelFormatType == 846624121)
  {
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 32));
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 32));
    int Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 32));
    int Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 32));
    if (Height >= 1)
    {
      size_t v24 = 2 * Width;
      do
      {
        fwrite(BaseAddress, 1uLL, v24, *(FILE **)(a1 + 40));
        BaseAddress += BytesPerRow;
        --Height;
      }
      while (Height);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v25 = VRTraceErrorLogLevelToCSTR();
    int v26 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      __WriteYuvFrame_block_invoke_cold_1(v25, PixelFormatType, v26);
    }
  }
  CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
  if (*(unsigned char *)(a1 + 48)) {
    fclose(*(FILE **)(a1 + 40));
  }
}

void DumpFrameYuvWithTimestamp(uint64_t a1, __CVBuffer *a2, int a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!a2 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CATransform3D buf = 136315650;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "DumpFrameYuvWithTimestamp";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 195;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d frame is null", buf, 0x1Cu);
    }
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v41 = v7;
  long long v42 = v7;
  long long v39 = v7;
  long long v40 = v7;
  long long v37 = v7;
  long long v38 = v7;
  long long v35 = v7;
  long long v36 = v7;
  long long v33 = v7;
  long long v34 = v7;
  long long v31 = v7;
  long long v32 = v7;
  long long v29 = v7;
  long long v30 = v7;
  *(_OWORD *)CATransform3D buf = v7;
  *(_OWORD *)&buf[16] = v7;
  __strlcpy_chk();
  __strlcat_chk();
  mkdir(buf, 0x1FFu);
  int Width = CVPixelBufferGetWidth(a2);
  int Height = CVPixelBufferGetHeight(a2);
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v26 = v10;
  long long v27 = v10;
  long long v24 = v10;
  long long v25 = v10;
  long long v22 = v10;
  long long v23 = v10;
  long long v20 = v10;
  long long v21 = v10;
  long long v18 = v10;
  long long v19 = v10;
  long long v16 = v10;
  long long v17 = v10;
  long long v14 = v10;
  long long v15 = v10;
  *(_OWORD *)char __str = v10;
  long long v13 = v10;
  snprintf(__str, 0x100uLL, "%s%dx%d.%08X.yuv", buf, Width, Height, a3);
  uint64_t v11 = fopen(__str, "wb");
  if (v11) {
    WriteYuvFrame(a2, (uint64_t)v11, 1);
  }
}

void DumpFrameYuv(size_t *a1, size_t *a2, FILE **a3, int a4, CVPixelBufferRef pixelBuffer)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  size_t v9 = *a1;
  if (v9 != CVPixelBufferGetHeight(pixelBuffer) || (size_t v10 = *a2, v10 != CVPixelBufferGetWidth(pixelBuffer)))
  {
    if (*a3) {
      fclose(*a3);
    }
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v28 = v11;
    long long v29 = v11;
    long long v26 = v11;
    long long v27 = v11;
    long long v24 = v11;
    long long v25 = v11;
    long long v22 = v11;
    long long v23 = v11;
    long long v20 = v11;
    long long v21 = v11;
    long long v18 = v11;
    long long v19 = v11;
    long long v16 = v11;
    long long v17 = v11;
    *(_OWORD *)char __str = v11;
    long long v15 = v11;
    size_t Width = CVPixelBufferGetWidth(pixelBuffer);
    size_t Height = CVPixelBufferGetHeight(pixelBuffer);
    snprintf(__str, 0x100uLL, "%s-txSourceYuv.%zux%zu.%s.yuv", "/tmp/vcp/", Width, Height, "2vuy");
    *a3 = fopen(__str, "wb");
    *a2 = CVPixelBufferGetWidth(pixelBuffer);
    *a1 = CVPixelBufferGetHeight(pixelBuffer);
  }
  WriteYuvFrame(pixelBuffer, (uint64_t)*a3, 0);
}

const opaqueCMFormatDescription *extractAvcCFromFormatDescriptionForLog(const opaqueCMFormatDescription *Extension)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315650;
      uint64_t v8 = v2;
      __int16 v9 = 2080;
      size_t v10 = "extractAvcCFromFormatDescriptionForLog";
      __int16 v11 = 1024;
      int v12 = 245;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SPSPPS-extractAvcCFromFormatDescriptionForLog() was called", (uint8_t *)&v7, 0x1Cu);
    }
  }
  if (Extension)
  {
    Extension = (const opaqueCMFormatDescription *)CMFormatDescriptionGetExtension(Extension, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (Extension)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(Extension))
      {
        Extension = (const opaqueCMFormatDescription *)CFDictionaryGetValue(Extension, @"avcC");
        if (Extension)
        {
          CFTypeID v5 = CFArrayGetTypeID();
          if (v5 == CFGetTypeID(Extension)) {
            return (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(Extension, 0);
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return Extension;
}

uint64_t readAVCCAndEncodeH264SPSPPS(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    uint64_t v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v25 = 136315650;
      uint64_t v26 = v7;
      __int16 v27 = 2080;
      long long v28 = "readAVCCAndEncodeH264SPSPPS";
      __int16 v29 = 1024;
      int v30 = 269;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SPSPPS-readAVCCAndEncodeH264SPSPPS() was called", (uint8_t *)&v25, 0x1Cu);
    }
  }
  int v9 = *(unsigned char *)(a1 + 5) & 0x1F;
  if ((*(unsigned char *)(a1 + 5) & 0x1F) != 0)
  {
    int v10 = 0;
    int v11 = 6;
    do
    {
      uint64_t v12 = v11;
      unsigned int v13 = *(unsigned __int16 *)(a1 + v11);
      unsigned int v14 = bswap32(v13);
      int v15 = v12 + 2;
      *(_DWORD *)(a3 + v10) = kVideoUtilStartCode;
      int v16 = v10 + 4;
      memcpy((void *)(a3 + v10 + 4), (const void *)(a1 + v12 + 2), __rev16(v13));
      int v11 = v15 + HIWORD(v14);
      int v10 = v16 + HIWORD(v14);
      --v9;
    }
    while (v9);
  }
  else
  {
    int v10 = 0;
    int v11 = 6;
  }
  int v17 = *(unsigned __int8 *)(a1 + v11);
  if (*(unsigned char *)(a1 + v11))
  {
    int v18 = v11 + 1;
    do
    {
      uint64_t v19 = v18;
      unsigned int v20 = *(unsigned __int16 *)(a1 + v18);
      unsigned int v21 = bswap32(v20);
      int v22 = v19 + 2;
      *(_DWORD *)(a3 + v10) = kVideoUtilStartCode;
      int v23 = v10 + 4;
      memcpy((void *)(a3 + v10 + 4), (const void *)(a1 + v19 + 2), __rev16(v20));
      int v18 = v22 + HIWORD(v21);
      int v10 = v23 + HIWORD(v21);
      --v17;
    }
    while (v17);
  }
  *a4 = v10;
  return 0;
}

uint64_t gksVCPParseConfigurationRecordAndCreateParameterSets(int a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v2 = VRTraceErrorLogLevelToCSTR();
    uint64_t v3 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315650;
      uint64_t v6 = v2;
      __int16 v7 = 2080;
      uint64_t v8 = "gksVCPParseConfigurationRecordAndCreateParameterSets";
      __int16 v9 = 1024;
      int v10 = 313;
      _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SPSPPS-gksVCPParseConfigurationRecordAndCreateParameterSets() was called", (uint8_t *)&v5, 0x1Cu);
    }
  }
  if (a1 == 1752589105) {
    return VCPParseConfigurationRecordAndCreateParameterSets();
  }
  else {
    return 1061109567;
  }
}

uint64_t gksVCPParseParameterSetsAndCreateConfigurationRecord()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v0 = VRTraceErrorLogLevelToCSTR();
    uint64_t v1 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315650;
      uint64_t v4 = v0;
      __int16 v5 = 2080;
      uint64_t v6 = "gksVCPParseParameterSetsAndCreateConfigurationRecord";
      __int16 v7 = 1024;
      int v8 = 330;
      _os_log_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d SPSPPS-gksVCPParseParameterSetsAndCreateConfigurationRecord() was called", (uint8_t *)&v3, 0x1Cu);
    }
  }
  return VCPParseParameterSetsAndCreateConfigurationRecord();
}

void VideoUtil_AddFakeLargeFrameData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v6 = *a3;
  if (*a3 < 1)
  {
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      unsigned int v8 = bswap32(*(_DWORD *)(a2 + v7));
      unsigned int v9 = v8 + 4;
      v7 += v8 + 4;
    }
    while (v7 < v6);
  }
  if (v7 == v6)
  {
    int v10 = *(_DWORD *)(a1 + 172) - v6;
    if (v10 >= 1)
    {
      if (v10 <= 8) {
        int v11 = 8;
      }
      else {
        int v11 = *(_DWORD *)(a1 + 172) - v6;
      }
      signed int v12 = v6 - v9;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        unsigned int v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v15 = *a3;
          int v16 = *(_DWORD *)(a1 + 172);
          int v18 = 136316930;
          uint64_t v19 = v13;
          __int16 v20 = 2080;
          unsigned int v21 = "VideoUtil_AddFakeLargeFrameData";
          __int16 v22 = 1024;
          int v23 = 372;
          __int16 v24 = 1024;
          int v25 = v15;
          __int16 v26 = 1024;
          int v27 = v16;
          __int16 v28 = 1024;
          signed int v29 = v12;
          __int16 v30 = 1024;
          unsigned int v31 = v8;
          __int16 v32 = 1024;
          unsigned int v33 = v8 + v11;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Fake frame: iLen: %d  LargeFrame: %d  iLastJumpIndex: %d  dwLastGobSize: %d  dwLastGobNewSize: %d \n", (uint8_t *)&v18, 0x3Au);
        }
      }
      *(_DWORD *)(a2 + v12) = bswap32(v8 + v11);
      uint64_t v17 = *a3 + (uint64_t)v11;
      *a3 = v17;
      *(_DWORD *)(a2 + v17 - 8) = bswap32(v8);
      *(_DWORD *)(a2 + *a3 - 4) = 1357975584;
    }
  }
}

void VideoUtil_PrintFormatDesc(const opaqueCMFormatDescription *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315906;
        uint64_t v15 = v3;
        __int16 v16 = 2080;
        uint64_t v17 = "VideoUtil_PrintFormatDesc";
        __int16 v18 = 1024;
        int v19 = 394;
        __int16 v20 = 2080;
        unsigned int v21 = FourccToCStr(MediaSubType);
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Codec Type is %s", (uint8_t *)&v14, 0x26u);
      }
    }
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (Extensions)
    {
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        unsigned int v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 136315906;
          uint64_t v15 = v7;
          __int16 v16 = 2080;
          uint64_t v17 = "VideoUtil_PrintFormatDesc";
          __int16 v18 = 1024;
          int v19 = 397;
          __int16 v20 = 2112;
          unsigned int v21 = (char *)Extensions;
          unsigned int v9 = " [%s] %s:%d extensions are %@";
          int v10 = v8;
          uint32_t v11 = 38;
LABEL_15:
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
        }
      }
    }
    else if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      uint64_t v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315650;
        uint64_t v15 = v12;
        __int16 v16 = 2080;
        uint64_t v17 = "VideoUtil_PrintFormatDesc";
        __int16 v18 = 1024;
        int v19 = 399;
        unsigned int v9 = " [%s] %s:%d extensions are NULL";
        int v10 = v13;
        uint32_t v11 = 28;
        goto LABEL_15;
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoUtil_PrintFormatDesc_cold_1();
    }
  }
}

size_t VideoUtil_ExtractSPSPPSFromSampleBuffer(opaqueCMSampleBuffer *a1, uint64_t a2, size_t a3)
{
  parameterSetPointerOut[1] = *(uint8_t **)MEMORY[0x1E4F143B8];
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a1);
  if (FormatDescription)
  {
    int v6 = FormatDescription;
    char v7 = 0;
    size_t v8 = 0;
    size_t v9 = 0;
    while (1)
    {
      size_t parameterSetSizeOut = 0;
      parameterSetPointerOut[0] = 0;
      size_t parameterSetCountOut = 0;
      int NALUnitHeaderLengthOut = 0;
      if (CMVideoFormatDescriptionGetH264ParameterSetAtIndex(v6, v8, (const uint8_t **)parameterSetPointerOut, &parameterSetSizeOut, &parameterSetCountOut, &NALUnitHeaderLengthOut))
      {
        break;
      }
      size_t v10 = parameterSetSizeOut;
      size_t v11 = parameterSetSizeOut + v9 + 4;
      if (v11 > a3) {
        break;
      }
      *(_DWORD *)(a2 + v9) = bswap32(parameterSetSizeOut);
      memcpy((void *)(a2 + v9 + 4), parameterSetPointerOut[0], v10);
      char v12 = (v8 >= parameterSetCountOut - 1) | v7;
      char v7 = 1;
      size_t v8 = 1;
      size_t v9 = v11;
      if (v12) {
        return v11;
      }
    }
  }
  return 0;
}

void VideoUtil_PrintBuffer(unsigned __int8 *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  bzero(v26, 0x259uLL);
  if (a2)
  {
    if (a1)
    {
      if (a3)
      {
        if (a3 >= 0xC8) {
          uint64_t v6 = 200;
        }
        else {
          uint64_t v6 = a3;
        }
        size_t v7 = 3 * v6;
        do
        {
          int v8 = *a1++;
          __snprintf_chk(v26, v7, 0, 0x259uLL, "%s%02x ", v26, v8);
          --v6;
        }
        while (v6);
        if ((int)VRTraceGetErrorLogLevelForModule() > 6)
        {
          uint64_t v9 = VRTraceErrorLogLevelToCSTR();
          size_t v10 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            size_t v11 = "...|";
            *(_DWORD *)CATransform3D buf = 136316674;
            uint64_t v13 = v9;
            uint64_t v15 = "VideoUtil_PrintBuffer";
            __int16 v14 = 2080;
            if (a3 > 0xC8) {
              size_t v11 = "|";
            }
            __int16 v16 = 1024;
            int v17 = 461;
            __int16 v18 = 2080;
            uint64_t v19 = a2;
            __int16 v20 = 2048;
            unint64_t v21 = a3;
            __int16 v22 = 2080;
            int v23 = v26;
            __int16 v24 = 2080;
            int v25 = v11;
            _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d bufferName='%s': Size=%zu, Buffer=|%s%s", buf, 0x44u);
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoUtil_PrintBuffer_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoUtil_PrintBuffer_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoUtil_PrintBuffer_cold_1();
    }
  }
}

uint64_t VideoUtil_BlockBufferToString(OpaqueCMBlockBuffer *a1, char *a2, uint64_t a3)
{
  size_t v6 = (unint64_t)(a3 - 1) >> 1;
  size_t DataLength = CMBlockBufferGetDataLength(a1);
  if (v6 >= DataLength) {
    size_t v6 = DataLength;
  }
  int v8 = &a2[a3];
  uint64_t result = CMBlockBufferCopyDataBytes(a1, 0, v6, &v8[-v6]);
  if (v6)
  {
    uint64_t v10 = -(uint64_t)v6;
    do
    {
      uint64_t result = sprintf(a2, "%02x", v8[v10]);
      a2 += 2;
    }
    while (!__CFADD__(v10++, 1));
  }
  return result;
}

BOOL VideoUtil_LayerBoundsAreValid(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  if (CGRectIsNull(*(CGRect *)&a1)) {
    return 0;
  }
  v9.origin.x = a1;
  v9.origin.y = a2;
  v9.size.width = a3;
  v9.size.height = a4;
  if (CGRectIsEmpty(v9)) {
    return 0;
  }
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  return !CGRectEqualToRect(v10, *MEMORY[0x1E4F1DB28]);
}

void VideoUtil_AddImgDescToBitstream(CMSampleBufferRef sbuf, uint64_t a2, int a3, int a4, uint64_t a5, int *a6, size_t a7)
{
  CGRect v10 = sbuf;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (!sbuf) {
    goto LABEL_29;
  }
  unint64_t v37 = 0;
  long long v38 = 0;
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (FormatDescription)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      __int16 v16 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v39 = 136315906;
        *(void *)&v39[4] = v15;
        *(_WORD *)&v39[12] = 2080;
        *(void *)&v39[14] = "VideoUtil_AddImgDescToBitstream";
        *(_WORD *)&v39[22] = 1024;
        *(_DWORD *)&v39[24] = 505;
        *(_WORD *)&v39[28] = 1024;
        *(_DWORD *)&v39[30] = a3;
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d FigSampleBufferGetFormatDescription: show format desc, %d", v39, 0x22u);
      }
    }
    VideoUtil_PrintFormatDesc(FormatDescription);
    if (a3)
    {
      if (a4 != 1752589105)
      {
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v59 = v28;
        long long v60 = v28;
        long long v57 = v28;
        long long v58 = v28;
        long long v55 = v28;
        long long v56 = v28;
        long long v53 = v28;
        long long v54 = v28;
        long long v51 = v28;
        long long v52 = v28;
        long long v49 = v28;
        long long v50 = v28;
        long long v47 = v28;
        long long v48 = v28;
        long long v45 = v28;
        long long v46 = v28;
        long long v43 = v28;
        long long v44 = v28;
        long long v41 = v28;
        long long v42 = v28;
        *(_OWORD *)&v39[48] = v28;
        long long v40 = v28;
        *(_OWORD *)&char v39[16] = v28;
        *(_OWORD *)&v39[32] = v28;
        *(_OWORD *)long long v39 = v28;
        SPSPPSFromSampleuint64_t Buffer = VideoUtil_ExtractSPSPPSFromSampleBuffer(v10, (uint64_t)v39, 0x190uLL);
        LODWORD(v10) = SPSPPSFromSampleBuffer;
        unint64_t v37 = SPSPPSFromSampleBuffer;
        if (_VideoUtil_PrependParameterSetsToBuffer(v39, SPSPPSFromSampleBuffer, (char *)a5, *a6, a7)) {
          return;
        }
LABEL_27:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8) {
          VideoUtil_PrintBuffer((unsigned __int8 *)a5, (uint64_t)"Tx Aggregation Packet", v37);
        }
LABEL_29:
        if (a3)
        {
LABEL_31:
          *a6 += (int)v10;
          return;
        }
LABEL_30:
        *(_DWORD *)a5 = bswap32(v10 - 4);
        *(_DWORD *)(a5 + 4) = -1547639150;
        goto LABEL_31;
      }
      CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E4F1EE20]);
      if (Extension)
      {
        CFDictionaryRef v18 = Extension;
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (TypeID == CFGetTypeID(v18))
        {
          CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v18, @"hvcC");
          if (Value)
          {
            CFDataRef ValueAtIndex = Value;
            CFTypeID v22 = CFArrayGetTypeID();
            if (v22 != CFGetTypeID(ValueAtIndex)
              || (CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(ValueAtIndex, 0)) != 0)
            {
              CFDataGetBytePtr(ValueAtIndex);
              CFIndex Length = CFDataGetLength(ValueAtIndex);
              int v24 = Length;
              MEMORY[0x1F4188790](Length);
              __int16 v26 = (char *)&v35 - ((v25 + 15) & 0x1FFFFFFF0);
              if (v25) {
                memset((char *)&v35 - ((v25 + 15) & 0x1FFFFFFF0), 170, v25);
              }
              bzero(v26, v24);
              unint64_t v37 = v24;
              if ((unsigned __int16)gksVCPParseConfigurationRecordAndCreateParameterSets(1752589105))
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VideoUtil_AddImgDescToBitstream_cold_5();
                  }
                }
                return;
              }
              if (_VideoUtil_PrependParameterSetsToBuffer(v26, v37, (char *)a5, *a6, a7)) {
                return;
              }
              LODWORD(v10) = v37;
              goto LABEL_27;
            }
          }
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoUtil_AddImgDescToBitstream_cold_4();
        }
      }
    }
    else
    {
      CMBlockBufferRef v36 = 0;
      CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
      if (CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(0, FormatDescription, SystemEncoding, 0, &v36))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoUtil_AddImgDescToBitstream_cold_3();
          }
        }
      }
      else if (CMBlockBufferGetDataPointer(v36, 0, 0, 0, &v38))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoUtil_AddImgDescToBitstream_cold_2();
          }
        }
      }
      else
      {
        size_t DataLength = CMBlockBufferGetDataLength(v36);
        LODWORD(v10) = DataLength + 8;
        size_t v31 = *a6;
        if ((int)DataLength + 8 + (int)v31 <= (int)a7)
        {
          memmove((void *)(a5 + (int)v10), (const void *)a5, v31);
          memcpy((void *)(a5 + 8), v38, DataLength);
          FigBlockBufferRelease();
          goto LABEL_30;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v32 = VRTraceErrorLogLevelToCSTR();
          unsigned int v33 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v34 = *a6;
            *(_DWORD *)long long v39 = 136316418;
            *(void *)&v39[4] = v32;
            *(_WORD *)&v39[12] = 2080;
            *(void *)&v39[14] = "VideoUtil_AddImgDescToBitstream";
            *(_WORD *)&v39[22] = 1024;
            *(_DWORD *)&v39[24] = 532;
            *(_WORD *)&v39[28] = 2048;
            *(void *)&v39[30] = a7;
            *(_WORD *)&v39[38] = 1024;
            *(_DWORD *)&v39[40] = v34;
            *(_WORD *)&v39[44] = 1024;
            *(_DWORD *)&v39[46] = DataLength + 8;
            _os_log_error_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_ERROR, " [%s] %s:%d Buffer too small. allocatedBufferSize=%zu, bufferSize=%d, header_bytes=%d", v39, 0x32u);
          }
        }
      }
      if (v36) {
        FigBlockBufferRelease();
      }
    }
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoUtil_AddImgDescToBitstream_cold_1();
    }
  }
}

uint64_t _VideoUtil_PrependParameterSetsToBuffer(const void *a1, size_t a2, char *__src, size_t __len, size_t a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (__len + a2 <= a5)
  {
    memmove(&__src[a2], __src, __len);
    memcpy(__src, a1, a2);
    return 0;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      CGRect v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v13 = 136316418;
        uint64_t v14 = v8;
        __int16 v15 = 2080;
        __int16 v16 = "_VideoUtil_PrependParameterSetsToBuffer";
        __int16 v17 = 1024;
        int v18 = 436;
        __int16 v19 = 2048;
        size_t v20 = a5;
        __int16 v21 = 2048;
        size_t v22 = __len;
        __int16 v23 = 2048;
        size_t v24 = a2;
        _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d Buffer too small. allocatedBufferSize=%zu, bufferSize=%zu, parameterSetSize=%zu", (uint8_t *)&v13, 0x3Au);
      }
    }
    return 0xFFFFFFFFLL;
  }
}

unint64_t VideoUtil_ReseizeFrameForBufferpool(int a1, int a2, int a3, int a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v17 = a2;
  int valuePtr = a1;
  int v15 = a4;
  int v16 = a3;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberIntType, &v17);
  CFNumberRef v7 = CFNumberCreate(v4, kCFNumberIntType, &v16);
  CFNumberRef v8 = CFNumberCreate(v4, kCFNumberIntType, &v15);
  CGRect v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CGRect v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  char v12 = CFDictionaryCreateMutable(v4, 0, v9, v10);
  CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24E10], v5);
  CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24D08], v6);
  CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24D70], v7);
  CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F2EFD8], v8);
  CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24D20], Mutable);
  CVPixelBufferPoolCreate(v4, 0, v12, (CVPixelBufferPoolRef *)&v14);
  CFRelease(v5);
  CFRelease(v6);
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(Mutable);
  CFRelease(v12);
  return v14;
}

CFDictionaryRef VideoUtil_GetEncodedFrameSEINaluOverheadBytes(const __CFDictionary *result)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = 0;
  if (result)
  {
    CFDictionaryRef v1 = result;
    uint64_t result = (const __CFDictionary *)CFDictionaryContainsKey(result, @"PropagatableAttachmentsNALSize");
    if (result)
    {
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v1, @"PropagatableAttachmentsNALSize");
      if (result)
      {
        CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
        return (const __CFDictionary *)valuePtr;
      }
    }
  }
  return result;
}

CFTypeRef VideoUtil_GetDecodedFrameSEINaluOverheadBytes(CFTypeRef result)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = 0;
  if (result)
  {
    uint64_t result = CMGetAttachment(result, @"PropagatableAttachmentsNALSize", 0);
    if (result)
    {
      CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
      return (CFTypeRef)valuePtr;
    }
  }
  return result;
}

void VideoUtil_PropagateSampleBufferAttachmentsToPixelBuffer(const void *a1, __CVBuffer *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFTypeRef v3 = CMGetAttachment(a1, @"TransportLayer", 0);
      if (v3)
      {
        CVBufferSetAttachment(a2, @"PropagatableAttachments", v3, kCVAttachmentMode_ShouldPropagate);
      }
    }
  }
}

BOOL VideoUtil_ParseFeatureListString(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  __lasts = (char *)0xAAAAAAAAAAAAAAAALL;
  memset(__b, 170, sizeof(__b));
  __strlcpy_chk();
  CFTypeRef v3 = strtok_r(__b, ";", &__lasts);
  if (v3)
  {
    CFAllocatorRef v4 = v3;
    uint64_t v18 = 0;
    int v5 = 0;
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    do
    {
      CGRect v9 = strchr(v4, 58);
      if (v9)
      {
        CGRect v10 = v9;
        unsigned int v11 = atoi(v9 + 1);
        *CGRect v10 = 0;
        if (v11 <= 0x63)
        {
          unsigned int v12 = v11;
          if (!strcmp(v4, "MVRA") || !strcmp(v4, "VRA"))
          {
            unsigned int v8 = v12 + 1;
          }
          else if (!strcmp(v4, "RVRA1") || !strcmp(v4, "RVRA2"))
          {
            unsigned int v6 = v12 + 1;
          }
          else if (!strcmp(v4, "UEP"))
          {
            unsigned int v7 = v12 + 1;
          }
          else if (!strcmp(v4, "AS"))
          {
            LODWORD(v18) = v12 + 1;
          }
          else
          {
            int v13 = strcmp(v4, "CR");
            unsigned int v14 = HIDWORD(v18);
            if (!v13) {
              unsigned int v14 = v12 + 1;
            }
            HIDWORD(v18) = v14;
          }
        }
      }
      if (!strcmp(v4, "LF")) {
        int v5 = 1;
      }
      CFAllocatorRef v4 = strtok_r(0, ";", &__lasts);
    }
    while (v4);
  }
  else
  {
    unsigned int v8 = 0;
    unsigned int v7 = 0;
    uint64_t v18 = 0;
    unsigned int v6 = 0;
    int v5 = 0;
  }
  *a2 = v7;
  if (a3) {
    *a3 = v5 == 1;
  }
  return (v8 | v7 | v18 | v6 | HIDWORD(v18) | v5) != 0;
}

uint64_t VideoUtil_FeatureListStringOptionExists(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFTypeRef v3 = (void *)[NSString stringWithUTF8String:a1];
  uint64_t v4 = [NSString stringWithUTF8String:a2];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  int v5 = (void *)[v3 componentsSeparatedByString:@";"];
  uint64_t result = [v5 countByEnumeratingWithState:&v11 objects:v10 count:16];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)v12;
    while (2)
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * v9), "componentsSeparatedByString:", @":"), "firstObject"), "caseInsensitiveCompare:", v4))return 1; {
        ++v9;
        }
      }
      while (v7 != v9);
      uint64_t result = [v5 countByEnumeratingWithState:&v11 objects:v10 count:16];
      uint64_t v7 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t VideoUtil_StringVisibleRect(double *a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, "[%.2fx%.2f@(%.2f,%.2f)]", a1[2], a1[3], *a1, a1[1]);
}

void VideoUtil_GetVisibleRect(__CVBuffer *a1, double *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  double Width = (double)CVPixelBufferGetWidth(a1);
  double Height = (double)CVPixelBufferGetHeight(a1);
  CFDictionaryRef Attachment = (const __CFDictionary *)CVBufferGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F44FE8], 0);
  double v7 = 0.0;
  if (Attachment && (CFDictionaryRef v8 = Attachment, v9 = CFGetTypeID(Attachment), v9 == CFDictionaryGetTypeID()))
  {
    float v18 = NAN;
    float v19 = NAN;
    float v16 = NAN;
    float v17 = NAN;
    if (cfDictionaryGetFloat(v8, (const void *)*MEMORY[0x1E4F24A88], &v17)
      && cfDictionaryGetFloat(v8, (const void *)*MEMORY[0x1E4F24A68], &v16)
      && cfDictionaryGetFloat(v8, (const void *)*MEMORY[0x1E4F24A70], &v19)
      && cfDictionaryGetFloat(v8, (const void *)*MEMORY[0x1E4F24A80], &v18))
    {
      double v10 = v17;
      double v11 = (Width - v17) * 0.5 + v19;
      double v12 = v16;
      double v7 = (Height - v16) * 0.5 - v18;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        long long v14 = *MEMORY[0x1E4F47A50];
        uint64_t v15 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CATransform3D buf = 136316674;
            uint64_t v21 = v13;
            __int16 v22 = 2080;
            __int16 v23 = "VideoUtil_GetVisibleRect";
            __int16 v24 = 1024;
            int v25 = 861;
            __int16 v26 = 2048;
            double v27 = v10;
            __int16 v28 = 2048;
            double v29 = v12;
            __int16 v30 = 2048;
            double v31 = v11;
            __int16 v32 = 2048;
            double v33 = v7;
            _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d visibleRect=%.2fx%.2f@(%.2f, %.2f)", buf, 0x44u);
          }
        }
        else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)CATransform3D buf = 136316674;
          uint64_t v21 = v13;
          __int16 v22 = 2080;
          __int16 v23 = "VideoUtil_GetVisibleRect";
          __int16 v24 = 1024;
          int v25 = 861;
          __int16 v26 = 2048;
          double v27 = v10;
          __int16 v28 = 2048;
          double v29 = v12;
          __int16 v30 = 2048;
          double v31 = v11;
          __int16 v32 = 2048;
          double v33 = v7;
          _os_log_debug_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEBUG, " [%s] %s:%d visibleRect=%.2fx%.2f@(%.2f, %.2f)", buf, 0x44u);
        }
      }
    }
    else
    {
      double v10 = Width;
      double v11 = 0.0;
      double v12 = Height;
    }
    double Width = v10;
    double Height = v12;
  }
  else
  {
    double v11 = 0.0;
  }
  *a2 = v11;
  a2[1] = v7;
  a2[2] = Width;
  a2[3] = Height;
}

uint64_t cfDictionaryGetFloat(const __CFDictionary *a1, const void *a2, void *a3)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  uint64_t result = CFDictionaryGetValueIfPresent(a1, a2, cf);
  if (result)
  {
    CFTypeID v5 = CFGetTypeID(cf[0]);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)cf[0], kCFNumberFloatType, a3);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void VideoUtil_GetVisibleRectForScreen(__CVBuffer *a1, double *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  double Width = (double)CVPixelBufferGetWidth(a1);
  double Height = (double)CVPixelBufferGetHeight(a1);
  CFDictionaryRef Attachment = (const __CFDictionary *)CVBufferGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F44FE8], 0);
  double v7 = 0.0;
  if (Attachment
    && (CFDictionaryRef v8 = Attachment, v9 = CFGetTypeID(Attachment), v9 == CFDictionaryGetTypeID())
    && (float v16 = NAN,
        float v17 = NAN,
        float v14 = NAN,
        float v15 = NAN,
        cfDictionaryGetFloat(v8, (const void *)*MEMORY[0x1E4F24A88], &v15))
    && cfDictionaryGetFloat(v8, (const void *)*MEMORY[0x1E4F24A68], &v14)
    && cfDictionaryGetFloat(v8, (const void *)*MEMORY[0x1E4F24A70], &v17))
  {
    double v10 = 0.0;
    if (cfDictionaryGetFloat(v8, (const void *)*MEMORY[0x1E4F24A80], &v16))
    {
      double v10 = v17;
      double v7 = v16;
      double Width = v15;
      double Height = v14;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        double v12 = *MEMORY[0x1E4F47A50];
        uint64_t v13 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CATransform3D buf = 136316674;
            uint64_t v19 = v11;
            __int16 v20 = 2080;
            uint64_t v21 = "VideoUtil_GetVisibleRectForScreen";
            __int16 v22 = 1024;
            int v23 = 885;
            __int16 v24 = 2048;
            double v25 = Width;
            __int16 v26 = 2048;
            double v27 = Height;
            __int16 v28 = 2048;
            double v29 = v10;
            __int16 v30 = 2048;
            double v31 = v7;
            _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d visibleRect=%.2fx%.2f@(%.2f, %.2f)", buf, 0x44u);
          }
        }
        else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)CATransform3D buf = 136316674;
          uint64_t v19 = v11;
          __int16 v20 = 2080;
          uint64_t v21 = "VideoUtil_GetVisibleRectForScreen";
          __int16 v22 = 1024;
          int v23 = 885;
          __int16 v24 = 2048;
          double v25 = Width;
          __int16 v26 = 2048;
          double v27 = Height;
          __int16 v28 = 2048;
          double v29 = v10;
          __int16 v30 = 2048;
          double v31 = v7;
          _os_log_debug_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEBUG, " [%s] %s:%d visibleRect=%.2fx%.2f@(%.2f, %.2f)", buf, 0x44u);
        }
      }
    }
  }
  else
  {
    double v10 = 0.0;
  }
  *a2 = v10;
  a2[1] = v7;
  a2[2] = Width;
  a2[3] = Height;
}

double VideoUtil_CalculateVisibleRect()
{
  return 0.0;
}

__CFDictionary *VideoUtil_CreateVisibleRectDictionary(double a1, double a2, double a3, double a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v12 = (int)a2;
  int valuePtr = (int)a1;
  int v10 = (int)a4;
  int v11 = (int)a3;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A70], v5);
  CFRelease(v5);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &v12);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A80], v6);
  CFRelease(v6);
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, &v11);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A88], v7);
  CFRelease(v7);
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &v10);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A68], v8);
  CFRelease(v8);
  return Mutable;
}

void VideoUtil_SetVisibleRectAttachment(__CVBuffer *a1, int a2, int a3, int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    float v8 = (float)a3 / (float)a4;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      int v10 = *MEMORY[0x1E4F47A50];
      int v11 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = 136316674;
          uint64_t v18 = v9;
          __int16 v19 = 2080;
          __int16 v20 = "VideoUtil_SetVisibleRectAttachment";
          __int16 v21 = 1024;
          int v22 = 959;
          __int16 v23 = 2048;
          double v24 = v8;
          __int16 v25 = 1024;
          int v26 = a2;
          __int16 v27 = 1024;
          int v28 = a3;
          __int16 v29 = 1024;
          int v30 = a4;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d aspectRatio=%f, type=%d, %dx%d", (uint8_t *)&v17, 0x38u);
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v17 = 136316674;
        uint64_t v18 = v9;
        __int16 v19 = 2080;
        __int16 v20 = "VideoUtil_SetVisibleRectAttachment";
        __int16 v21 = 1024;
        int v22 = 959;
        __int16 v23 = 2048;
        double v24 = v8;
        __int16 v25 = 1024;
        int v26 = a2;
        __int16 v27 = 1024;
        int v28 = a3;
        __int16 v29 = 1024;
        int v30 = a4;
        _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, " [%s] %s:%d aspectRatio=%f, type=%d, %dx%d", (uint8_t *)&v17, 0x38u);
      }
    }
    double v12 = VideoUtil_CalculateVisibleRect();
    VisibleRectDictionary = VideoUtil_CreateVisibleRectDictionary(v12, v13, v14, v15);
    CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F44FE8], VisibleRectDictionary, kCVAttachmentMode_ShouldPropagate);
    CFRelease(VisibleRectDictionary);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoUtil_SetVisibleRectAttachment_cold_1();
    }
  }
}

CMSampleBufferRef VideoUtil_CreateSampleFromBuffer(OpaqueCMBlockBuffer *a1, const CMSampleTimingInfo *a2, uint64_t a3, const opaqueCMFormatDescription *a4)
{
  v9[1] = *(CMSampleBufferRef *)MEMORY[0x1E4F143B8];
  v9[0] = 0;
  size_t sampleSizeArray = CMBlockBufferGetDataLength(a1);
  CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, 1u, 0, 0, a4, 1, 1, a2, 1, &sampleSizeArray, v9);
  if (!v9[0] && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoUtil_CreateSampleFromBuffer_cold_1();
    }
  }
  return v9[0];
}

unint64_t VideoUtil_ConstructSubFrameIdentifer(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t VideoUtil_GetEscapeCountForBuffer(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoUtil_GetEscapeCountForBuffer_cold_1();
      }
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a1;
  uint64_t result = 0;
  unint64_t v4 = 0;
  do
  {
    unsigned int v6 = *v2++;
    unsigned int v5 = v6;
    result += (v6 < 4) & (v4 > 1);
    if (v6 < 4 && v4 > 1) {
      unint64_t v4 = 1;
    }
    else {
      ++v4;
    }
    if (v5) {
      unint64_t v4 = 0;
    }
    --a2;
  }
  while (a2);
  return result;
}

uint64_t VideoUtil_PerformEscapingForBuffer(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1 && a3)
  {
    uint64_t v4 = 0;
    if (!a2 || !a4) {
      return v4;
    }
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      unsigned int v8 = *(unsigned __int8 *)(a1 + v6);
      if (v8 <= 3 && v7 >= 2)
      {
        *(unsigned char *)(a3 + v5) = 3;
        if (v5 + 1 >= a4)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            return 2151743551;
          }
          VRTraceErrorLogLevelToCSTR();
          uint64_t v4 = 2151743551;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VideoUtil_PerformEscapingForBuffer_cold_2();
          }
          return v4;
        }
        unint64_t v7 = 0;
        LOBYTE(v8) = *(unsigned char *)(a1 + v6);
        ++v5;
      }
      uint64_t v4 = 0;
      *(unsigned char *)(a3 + v5) = v8;
      if (*(unsigned char *)(a1 + v6)) {
        unint64_t v7 = 0;
      }
      else {
        ++v7;
      }
      if (++v6 < a2 && ++v5 < a4) {
        continue;
      }
      return v4;
    }
  }
  uint64_t v4 = 2151743489;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoUtil_PerformEscapingForBuffer_cold_1();
    }
  }
  return v4;
}

uint64_t VideoUtil_GetEmulationByteCountForBuffer(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoUtil_GetEmulationByteCountForBuffer_cold_1();
      }
    }
    return 0;
  }
  uint64_t v2 = a2 - 3;
  if (a2 == 3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = (unsigned char *)(a1 + 2);
  do
  {
    if (!*(v5 - 2) && !*(v5 - 1) && *v5 == 3) {
      ++result;
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t VideoUtil_RemoveEmulationBytesFromBuffer(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1 && a3)
  {
    if (a2 < a4)
    {
      uint64_t v9 = 2151743489;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoUtil_RemoveEmulationBytesFromBuffer_cold_2();
        }
      }
    }
    else
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0;
      if (a2 != 3 && a4 != 2)
      {
        unint64_t v7 = 0;
        unint64_t v6 = 0;
        do
        {
          char v8 = *(unsigned char *)(a1 + v6);
          if (!v8 && !*(unsigned char *)(a1 + v6 + 1) && *(unsigned char *)(a1 + v6 + 2) == 3)
          {
            *(unsigned char *)(a3 + v7++) = 0;
            char v8 = *(unsigned char *)(a1 + v6 + 1);
            v6 += 2;
          }
          *(unsigned char *)(a3 + v7) = v8;
          ++v6;
          ++v7;
        }
        while (v6 < a2 - 3 && v7 < a4 - 2);
      }
      while (v6 < a2 && v7 < a4)
        *(unsigned char *)(a3 + v7++) = *(unsigned char *)(a1 + v6++);
      if (v6 == a2 && v7 == a4)
      {
        return 0;
      }
      else
      {
        uint64_t v9 = 2151743489;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          unint64_t v13 = v6;
          unint64_t v14 = v7;
          uint64_t v11 = VRTraceErrorLogLevelToCSTR();
          double v12 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CATransform3D buf = 136316674;
            uint64_t v16 = v11;
            __int16 v17 = 2080;
            uint64_t v18 = "VideoUtil_RemoveEmulationBytesFromBuffer";
            __int16 v19 = 1024;
            int v20 = 1250;
            __int16 v21 = 2048;
            unint64_t v22 = v13;
            __int16 v23 = 2048;
            unint64_t v24 = a2;
            __int16 v25 = 2048;
            unint64_t v26 = v14;
            __int16 v27 = 2048;
            unint64_t v28 = a4;
            _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoUtil_RemoveEmulationBytesFromBuffer failed due to invalid buffer index(source buffer index:%zu, required:%zu) (unescaped buffer index:%zu required:%zu)", buf, 0x44u);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v9 = 2151743489;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoUtil_RemoveEmulationBytesFromBuffer_cold_1();
      }
    }
  }
  return v9;
}

uint64_t VideoUtil_ReplaceStartCodeWithNALLength(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = 0;
    unsigned int v3 = 0;
    uint64_t v4 = 0;
    do
    {
      unint64_t v5 = v2 + 4;
      if (v2 + 4 < a2 && (unint64_t v6 = (unsigned int *)(a1 + v2), *(_DWORD *)(a1 + v2) == kVideoUtilStartCode))
      {
        if (v4)
        {
          unsigned int v7 = bswap32(v3);
          unsigned int v3 = 0;
          *uint64_t v4 = v7;
        }
        else
        {
          unsigned int v3 = 0;
        }
        uint64_t v4 = v6;
      }
      else
      {
        ++v3;
        unint64_t v5 = v2 + 1;
      }
      unint64_t v2 = v5;
    }
    while (v5 < a2);
    if (v4) {
      *uint64_t v4 = bswap32(v3);
    }
  }
  return 0;
}

uint64_t VideoUtil_ReplaceNALLengthWithStartCode(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    for (unint64_t i = 0; i < a2; i += v3 + 4)
    {
      uint64_t v3 = bswap32(*(_DWORD *)(a1 + i));
      *(_DWORD *)(a1 + i) = kVideoUtilStartCode;
    }
  }
  return 0;
}

double VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio(unsigned int a1, double a2, double a3, double a4, double a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v5 = (int)a2;
  int v6 = (int)a3;
  if (a1)
  {
    if (a2 == 0.0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio_cold_2();
        }
      }
    }
    else if (a3 == 0.0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio_cold_3();
        }
      }
    }
    else if (VCDefaults_GetBoolValueForKey(@"forceScreenCaptureToMod16", 0) {
           && +[VCHardwareSettings allowScreenShareResolutionModuloAdjustment])
    }
    {
      BOOL v13 = v5 > (int)a4 || v6 > (int)a5;
      BOOL v14 = !v13;
      if (v13) {
        unsigned int v15 = a5;
      }
      else {
        unsigned int v15 = v6;
      }
      if (v14) {
        unsigned int v16 = v5;
      }
      else {
        unsigned int v16 = a4;
      }
      int v5 = (v16 + a1 - 1) & -a1;
      int v17 = (v15 + a1 - 1) & -a1;
      if (v5 >= (int)((double)v5 * 0.98))
      {
        int v18 = 0x7FFFFFFF;
        int v19 = (v16 + a1 - 1) & -a1;
        double v20 = a4 / a5;
        do
        {
          uint64_t v21 = 0;
          unsigned int v22 = 2 * llround((double)v19 / v20 * 0.5);
          int v23 = (a1 - 1 + v22) & -a1;
          if (v19 == v5) {
            int v23 = v22;
          }
          int v29 = v22;
          LODWORD(v30) = v23;
          HIDWORD(v30) = v22 / a1 * a1;
          do
          {
            int v24 = *(int *)((char *)&v29 + v21);
            if (!(v24 % a1))
            {
              int v25 = (int)(v20 * (double)v24) - v19;
              if (v25 < 0) {
                int v25 = v19 - (int)(v20 * (double)v24);
              }
              if (((v25 < v18) & (fabs((a4 * a5 - (double)(v24 * v19)) / (a4 * a5)) * 100.0 < 1.2)) != 0)
              {
                int v18 = v25;
                int v17 = *(int *)((char *)&v29 + v21);
                int v5 = v19;
              }
            }
            v21 += 4;
          }
          while (v21 != 12);
          v19 -= a1;
        }
        while (v19 >= (int)((double)v5 * 0.98));
      }
      if ((int)VRTraceGetErrorLogLevelForModule() > 6)
      {
        uint64_t v26 = VRTraceErrorLogLevelToCSTR();
        __int16 v27 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v29 = 136316674;
          uint64_t v30 = v26;
          __int16 v31 = 2080;
          uint64_t v32 = "VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio";
          __int16 v33 = 1024;
          int v34 = 1405;
          __int16 v35 = 2048;
          double v36 = a2;
          __int16 v37 = 2048;
          double v38 = a3;
          __int16 v39 = 1024;
          int v40 = v5;
          __int16 v41 = 1024;
          int v42 = v17;
          _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d desiredResolution.width=%lf desiredResolution.height=%lf suggestedResolution.width=%u suggestedResolution.height=%u", (uint8_t *)&v29, 0x3Cu);
        }
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio_cold_1();
    }
  }
  return (double)v5;
}

double VideoUtil_ComputeScreenSizeForAspectRatio(unint64_t a1, double a2)
{
  return (double)(((unint64_t)sqrt((double)a1 * a2) + 15) & 0xFFFFFFF0);
}

void ReleaseCVPixelBuffer(__CVBuffer *a1)
{
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);

  CVPixelBufferRelease(a1);
}

void VCVideoUtil_AdjustFaceMetadata(__CVBuffer *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoUtil_AdjustFaceMetadata_cold_1();
      }
    }
    goto LABEL_48;
  }
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoUtil_AdjustFaceMetadata_cold_2();
      }
    }
    goto LABEL_48;
  }
  if (!a3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoUtil_AdjustFaceMetadata_cold_3();
      }
    }
    goto LABEL_48;
  }
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  if (!Width)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoUtil_AdjustFaceMetadata_cold_4();
      }
    }
    goto LABEL_48;
  }
  unint64_t v8 = Height;
  if (!Height)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoUtil_AdjustFaceMetadata_cold_5();
      }
    }
    goto LABEL_48;
  }
  CVAttachmentMode attachmentMode = kCVAttachmentMode_ShouldPropagate;
  CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F51480];
  CFDictionaryRef Attachment = (void *)CVBufferGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F51480], &attachmentMode);
  if (!Attachment)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      int v29 = *MEMORY[0x1E4F47A50];
      uint64_t v30 = *MEMORY[0x1E4F47A50];
      if (!*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
          VCVideoUtil_AdjustFaceMetadata_cold_6();
        }
        goto LABEL_48;
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(rect.origin.x) = 136315650;
        *(void *)((char *)&rect.origin.x + 4) = v28;
        WORD2(rect.origin.y) = 2080;
        *(void *)((char *)&rect.origin.y + 6) = "VCVideoUtil_AdjustFaceMetadata";
        HIWORD(rect.size.width) = 1024;
        LODWORD(rect.size.height) = 1702;
        __int16 v31 = " [%s] %s:%d no metadata dictionary attachment";
LABEL_43:
        _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, v31, (uint8_t *)&rect, 0x1Cu);
      }
    }
LABEL_48:
    unsigned int v15 = 0;
    __int16 v27 = 0;
    goto LABEL_19;
  }
  uint64_t v11 = Attachment;
  uint64_t v12 = *MEMORY[0x1E4F52700];
  BOOL v13 = (void *)[Attachment objectForKeyedSubscript:*MEMORY[0x1E4F52700]];
  if (!v13)
  {
    BOOL v13 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", @"MetadataCVA"), "objectForKeyedSubscript:", @"DetectedFacesArray");
    if (!v13)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v32 = VRTraceErrorLogLevelToCSTR();
        int v29 = *MEMORY[0x1E4F47A50];
        __int16 v33 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
            VCVideoUtil_AdjustFaceMetadata_cold_7();
          }
          goto LABEL_48;
        }
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(rect.origin.x) = 136315650;
          *(void *)((char *)&rect.origin.x + 4) = v32;
          WORD2(rect.origin.y) = 2080;
          *(void *)((char *)&rect.origin.y + 6) = "VCVideoUtil_AdjustFaceMetadata";
          HIWORD(rect.size.width) = 1024;
          LODWORD(rect.size.height) = 1710;
          __int16 v31 = " [%s] %s:%d could not find face metadata array attachment";
          goto LABEL_43;
        }
      }
      goto LABEL_48;
    }
  }
  unint64_t v34 = Width;
  CFStringRef key = v9;
  __int16 v37 = a1;
  BOOL v14 = objc_opt_new();
  unsigned int v15 = objc_opt_new();
  [v14 setObject:v15 forKeyedSubscript:v12];
  double v36 = v14;
  objc_msgSend(v14, "setObject:forKeyedSubscript:", objc_msgSend(v11, "objectForKeyedSubscript:", @"MetadataCVA"), @"MetadataCVA");
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v16 = [v13 countByEnumeratingWithState:&v41 objects:v40 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    unint64_t v18 = a3;
    uint64_t v19 = *(void *)v42;
    uint64_t v20 = *MEMORY[0x1E4F52710];
    double v21 = (double)v18;
    double v22 = (double)v8;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v42 != v19) {
          objc_enumerationMutation(v13);
        }
        int v24 = *(void **)(*((void *)&v41 + 1) + 8 * i);
        memset(&rect, 0, sizeof(rect));
        if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)[v24 objectForKeyedSubscript:v20], &rect))
        {
          v46.origin.x = VCVideoUtil_AdjustFaceBounds(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, (double)a2, v21, (double)v34, v22);
          CGRect rect = v46;
          CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v46);
          uint64_t v26 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v24];
          [v26 setObject:DictionaryRepresentation forKeyedSubscript:v20];
          [v15 addObject:v26];

          CFRelease(DictionaryRepresentation);
        }
      }
      uint64_t v17 = [v13 countByEnumeratingWithState:&v41 objects:v40 count:16];
    }
    while (v17);
  }
  __int16 v27 = v36;
  CVBufferSetAttachment(v37, key, v36, kCVAttachmentMode_ShouldPropagate);
LABEL_19:
}

double VCVideoUtil_AdjustFaceBounds(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  double v13 = a5 / a6;
  double v14 = a7 / a8;
  if (a7 / a8 >= a5 / a6)
  {
    double v21 = v13 / v14;
    double v19 = (a2 + (1.0 - v13 / v14) * -0.5) / (v13 / v14);
    CGFloat v22 = a1;
    CGFloat v23 = a2;
    double v16 = a1;
    double v37 = a3;
    double v20 = CGRectGetHeight(*(CGRect *)(&a3 - 2)) / v21;
  }
  else
  {
    double v15 = v14 / v13;
    double v16 = (a1 + (1.0 - v14 / v13) * -0.5) / (v14 / v13);
    CGFloat v17 = a1;
    CGFloat v18 = a2;
    double v19 = a2;
    double v37 = CGRectGetWidth(*(CGRect *)(&a3 - 2)) / v15;
    double v20 = a4;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v24 = VRTraceErrorLogLevelToCSTR();
    int v25 = *MEMORY[0x1E4F47A50];
    uint64_t v26 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v69.origin.x = a1;
        v69.origin.y = a2;
        v69.size.width = a3;
        v69.size.height = a4;
        CGFloat Width = CGRectGetWidth(v69);
        v70.origin.x = a1;
        v70.origin.y = a2;
        v70.size.width = a3;
        v70.size.height = a4;
        CGFloat Height = CGRectGetHeight(v70);
        v71.origin.x = v16;
        v71.origin.y = v19;
        v71.size.width = v37;
        v71.size.height = v20;
        CGFloat v30 = CGRectGetWidth(v71);
        v72.origin.x = v16;
        v72.origin.y = v19;
        v72.size.width = v37;
        v72.size.height = v20;
        *(_DWORD *)CATransform3D buf = 136318722;
        uint64_t v39 = v24;
        __int16 v40 = 2080;
        long long v41 = "VCVideoUtil_AdjustFaceBounds";
        __int16 v42 = 1024;
        int v43 = 1765;
        __int16 v44 = 2048;
        double v45 = a5;
        __int16 v46 = 2048;
        double v47 = a6;
        __int16 v48 = 2048;
        CGFloat v49 = a1;
        __int16 v50 = 2048;
        CGFloat v51 = a2;
        __int16 v52 = 2048;
        CGFloat v53 = Width;
        __int16 v54 = 2048;
        CGFloat v55 = Height;
        __int16 v56 = 2048;
        double v57 = a7;
        __int16 v58 = 2048;
        double v59 = a8;
        __int16 v60 = 2048;
        double v61 = v16;
        __int16 v62 = 2048;
        double v63 = v19;
        __int16 v64 = 2048;
        CGFloat v65 = v30;
        __int16 v66 = 2048;
        CGFloat v67 = CGRectGetHeight(v72);
        _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Original %fx%f [x=%3f,y=%3f,w=%3f,h=%3f], Cropped %fx%f [x=%3f,y=%3f,w=%3f,h=%3f]", buf, 0x94u);
      }
    }
    else if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      v73.origin.x = a1;
      v73.origin.y = a2;
      v73.size.width = a3;
      v73.size.height = a4;
      CGFloat v33 = CGRectGetWidth(v73);
      v74.origin.x = a1;
      v74.origin.y = a2;
      v74.size.width = a3;
      v74.size.height = a4;
      CGFloat v29 = CGRectGetHeight(v74);
      v75.origin.x = v16;
      v75.origin.y = v19;
      v75.size.width = v37;
      v75.size.height = v20;
      CGFloat v31 = CGRectGetWidth(v75);
      v76.origin.x = v16;
      v76.origin.y = v19;
      v76.size.width = v37;
      v76.size.height = v20;
      *(_DWORD *)CATransform3D buf = 136318722;
      uint64_t v39 = v24;
      __int16 v40 = 2080;
      long long v41 = "VCVideoUtil_AdjustFaceBounds";
      __int16 v42 = 1024;
      int v43 = 1765;
      __int16 v44 = 2048;
      double v45 = a5;
      __int16 v46 = 2048;
      double v47 = a6;
      __int16 v48 = 2048;
      CGFloat v49 = a1;
      __int16 v50 = 2048;
      CGFloat v51 = a2;
      __int16 v52 = 2048;
      CGFloat v53 = v33;
      __int16 v54 = 2048;
      CGFloat v55 = v29;
      __int16 v56 = 2048;
      double v57 = a7;
      __int16 v58 = 2048;
      double v59 = a8;
      __int16 v60 = 2048;
      double v61 = v16;
      __int16 v62 = 2048;
      double v63 = v19;
      __int16 v64 = 2048;
      CGFloat v65 = v31;
      __int16 v66 = 2048;
      CGFloat v67 = CGRectGetHeight(v76);
      _os_log_debug_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Original %fx%f [x=%3f,y=%3f,w=%3f,h=%3f], Cropped %fx%f [x=%3f,y=%3f,w=%3f,h=%3f]", buf, 0x94u);
    }
  }
  return v16;
}

uint64_t VCVideoUtil_DefaultCameraCapturePixelFormat()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 875704438;
  if (VCVideoUtil_ShouldUseCompressedPixelFormat())
  {
    uint64_t v1 = 758674992;
    if (VRTraceIsInternalOSInstalled())
    {
      id v2 = +[VCDefaults copyStringValueForKey:@"compressedPixelFormat"];
      uint64_t v3 = v2;
      if (v2) {
        uint64_t v1 = CStrToFourcc((char *)[v2 UTF8String]);
      }
    }
    if (CVIsCompressedPixelFormatAvailable(v1))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v4 = VRTraceErrorLogLevelToCSTR();
        int v5 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v7 = 136315906;
          uint64_t v8 = v4;
          __int16 v9 = 2080;
          int v10 = "VCVideoUtil_DefaultCameraCapturePixelFormat";
          __int16 v11 = 1024;
          int v12 = 1800;
          __int16 v13 = 2080;
          double v14 = FourccToCStr(v1);
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d use compressed pixel format=%s", (uint8_t *)&v7, 0x26u);
        }
      }
      return v1;
    }
  }
  return v0;
}

void __ImageMetadataDictionary_block_invoke()
{
  uint64_t v0 = (void *)[objc_alloc(MEMORY[0x1E4F1CA20]) initWithLocaleIdentifier:@"en_US_POSIX"];
  id v1 = (id)[objc_alloc(MEMORY[0x1E4F1C9A8]) initWithCalendarIdentifier:@"en_US_POSIX"];
  ImageMetadataDictionary_sMarketingNameString = MGCopyAnswer();
  ImageMetadataDictionary_sProductunsigned int Version = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "operatingSystemVersionString");
  ImageMetadataDictionary_sDateTimeFormatter = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28C10]);
  [(id)ImageMetadataDictionary_sDateTimeFormatter setTimeStyle:0];
  [(id)ImageMetadataDictionary_sDateTimeFormatter setDateStyle:0];
  [(id)ImageMetadataDictionary_sDateTimeFormatter setDateFormat:@"yyyy:MM:dd HH:mm:ss"];
  [(id)ImageMetadataDictionary_sDateTimeFormatter setLocale:v0];
  [(id)ImageMetadataDictionary_sDateTimeFormatter setCalendar:v1];
  ImageMetadataDictionary_sSubsecTimeFormatter = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28C10]);
  [(id)ImageMetadataDictionary_sSubsecTimeFormatter setTimeStyle:0];
  [(id)ImageMetadataDictionary_sSubsecTimeFormatter setDateStyle:0];
  [(id)ImageMetadataDictionary_sSubsecTimeFormatter setDateFormat:@"SSS"];
  [(id)ImageMetadataDictionary_sSubsecTimeFormatter setLocale:v0];
  [(id)ImageMetadataDictionary_sSubsecTimeFormatter setCalendar:v1];
}

uint64_t GetCellularMTU(uint64_t a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)(a1 + 34456);
  int v4 = *(_DWORD *)(a1 + 34512);
  if (v4 && *(_DWORD *)(a1 + 34472))
  {
    int v5 = (pthread_mutex_t *)(a1 + 34392);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 34392));
    if (*v3)
    {
      unint64_t v6 = _CTServerConnectionCopyCurrentMTU();
      int v7 = v6;
      unint64_t v8 = HIDWORD(v6);
      if (v6)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v9 = VRTraceErrorLogLevelToCSTR();
          int v10 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CATransform3D buf = 136316162;
            uint64_t v19 = v9;
            __int16 v20 = 2080;
            double v21 = "GetCellularMTU";
            __int16 v22 = 1024;
            int v23 = 356;
            __int16 v24 = 1024;
            *(_DWORD *)int v25 = v7;
            *(_WORD *)&v25[4] = 1024;
            *(_DWORD *)&v25[6] = v8;
            _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d _CTServerConnectionCopyCurrentMTU failed (%d.%d)", buf, 0x28u);
          }
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        int v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CATransform3D buf = 136316418;
          uint64_t v19 = v11;
          __int16 v20 = 2080;
          double v21 = "GetCellularMTU";
          __int16 v22 = 1024;
          int v23 = 359;
          __int16 v24 = 1024;
          *(_DWORD *)int v25 = 0;
          *(_WORD *)&v25[4] = 1024;
          *(_DWORD *)&v25[6] = v7;
          *(_WORD *)uint64_t v26 = 1024;
          *(_DWORD *)&v26[2] = v8;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d \t\t TP:GetCellularMTU MTU: %d (err: %d/%d) ", buf, 0x2Eu);
        }
      }
    }
    pthread_mutex_unlock(v5);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    double v14 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      if (a2) {
        uint64_t v15 = "TPCellularConditionChangeCallback";
      }
      else {
        uint64_t v15 = "TPConnectedCallback";
      }
      uint64_t v16 = CelltechToStr();
      *(_DWORD *)CATransform3D buf = 136316674;
      uint64_t v19 = v13;
      __int16 v20 = 2080;
      double v21 = "GetCellularMTU";
      __int16 v22 = 1024;
      int v23 = 376;
      __int16 v24 = 2080;
      *(void *)int v25 = v15;
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)uint64_t v26 = 0;
      *(_WORD *)&v26[4] = 1024;
      BOOL v27 = v4 != 0;
      __int16 v28 = 2080;
      uint64_t v29 = v16;
      _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d %s CellularMTU: %d  bCellularIsActive: %d  Celltech: %s ", buf, 0x3Cu);
    }
  }
  return 0;
}

uint64_t TPGetSignalStrength(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7 = CheckInHandleDebug();
  if (v7)
  {
    if (a2 && a3 && a4)
    {
      unint64_t v8 = (_DWORD *)(v7 + 34476);
      if (*(_DWORD *)(v7 + 34512))
      {
        uint64_t v9 = (pthread_mutex_t *)(v7 + 34392);
        pthread_mutex_lock((pthread_mutex_t *)(v7 + 34392));
        if (VCCTServiceMonitor_GetSignalStrength())
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              TPGetSignalStrength_cold_2();
            }
          }
          pthread_mutex_unlock(v9);
          CheckOutHandleDebug();
          return 2148466692;
        }
        *a2 = *v8;
        *a3 = v8[1];
        *a4 = v8[2];
        pthread_mutex_unlock(v9);
      }
      CheckOutHandleDebug();
      return 0;
    }
    uint64_t v10 = 2148466689;
    CheckOutHandleDebug();
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        TPGetSignalStrength_cold_3();
      }
    }
  }
  else
  {
    uint64_t v10 = 2148466690;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        TPGetSignalStrength_cold_1();
        return 2148466690;
      }
    }
  }
  return v10;
}

uint64_t TPGetCellTech()
{
  if (!CheckInHandleDebug()) {
    return 2148466690;
  }
  uint64_t v0 = ICEGetCellTech();
  CheckOutHandleDebug();
  return v0;
}

uint64_t TPUpdateBaseband(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    char v4 = a4;
    uint64_t v7 = CheckInHandleDebug();
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = v7 + 34456;
      if (!*(_DWORD *)(v7 + 34512))
      {
LABEL_85:
        CheckOutHandleDebug();
        return 0;
      }
      if (!a2 || (*(unsigned char *)(a2 + 28) & 4) == 0)
      {
        TPCleanupBasebandNotifications(v7);
        goto LABEL_85;
      }
      char v91 = v4;
      __int16 v90 = -21846;
      __int16 v89 = -21846;
      *(void *)&v110[14] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v109[3] = v13;
      *(_OWORD *)uint64_t v110 = v13;
      v109[2] = v13;
      *(void *)((char *)v109 + 14) = 0xAAAAAAAAAAAAAAAALL;
      long long v108 = v13;
      v109[0] = v13;
      long long v107 = v13;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v14 = VRTraceErrorLogLevelToCSTR();
        uint64_t v15 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = IPPORTToStringWithSize();
          uint64_t v17 = IPPORTToStringWithSize();
          int v18 = *(_DWORD *)(a2 + 280);
          int v19 = *(_DWORD *)(a2 + 284);
          *(_DWORD *)CATransform3D buf = 136316930;
          uint64_t v93 = v14;
          __int16 v94 = 2080;
          long long v95 = "TPSetupBasebandNotifications";
          __int16 v96 = 1024;
          int v97 = 652;
          __int16 v98 = 2080;
          *(void *)uint64_t v99 = a2 + 32;
          *(_WORD *)&v99[8] = 2080;
          uint64_t v100 = v16;
          __int16 v101 = 2080;
          uint64_t v102 = v17;
          __int16 v103 = 1024;
          int v104 = v18;
          __int16 v105 = 1024;
          int v106 = v19;
          _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d LET US DEAL WITH BASEBAND (if_name:[%s], local:[%s], dst:[%s], local_cell:[%d] remote_cell:[%d])", buf, 0x46u);
        }
      }
      __int16 v20 = (pthread_mutex_t *)(v8 + 34392);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 34392));
      if (*(_DWORD *)(v9 + 56))
      {
        double v21 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
        if (*(void *)(v9 + 8))
        {
          if (*(_DWORD *)(v9 + 32))
          {
            unint64_t v22 = _CTServerConnectionSetPacketNotificationFilter();
            int v23 = v22;
            unint64_t v24 = HIDWORD(v22);
            int v25 = HIDWORD(v22) | v22;
            int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
            if (v25)
            {
              if (ErrorLogLevelForModule >= 3)
              {
                uint64_t v86 = VRTraceErrorLogLevelToCSTR();
                BOOL v27 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CATransform3D buf = 136316418;
                  uint64_t v93 = v86;
                  __int16 v94 = 2080;
                  long long v95 = "TPSetupBasebandNotifications";
                  __int16 v96 = 1024;
                  int v97 = 671;
                  __int16 v98 = 1024;
                  *(_DWORD *)uint64_t v99 = 671;
                  *(_WORD *)&v99[4] = 1024;
                  *(_DWORD *)&v99[6] = v23;
                  LOWORD(v100) = 1024;
                  *(_DWORD *)((char *)&v100 + 2) = v24;
                  _os_log_error_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionSetPacketNotificationFilter failed (%d.%d)", buf, 0x2Eu);
                }
              }
            }
            else if (ErrorLogLevelForModule >= 7)
            {
              uint64_t v35 = VRTraceErrorLogLevelToCSTR();
              double v36 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CATransform3D buf = 136315650;
                uint64_t v93 = v35;
                __int16 v94 = 2080;
                long long v95 = "TPSetupBasebandNotifications";
                __int16 v96 = 1024;
                int v97 = 669;
                _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d De-register existing baseband notification filter.", buf, 0x1Cu);
              }
            }
          }
          CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v9 + 8));
          CFMutableDictionaryRef Mutable = *(CFMutableDictionaryRef *)(v9 + 8);
        }
        else
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(void *)(v9 + 8) = Mutable;
        }
        if (!Mutable)
        {
          pthread_mutex_unlock((pthread_mutex_t *)(v8 + 34392));
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              TPUpdateBaseband_cold_1();
            }
          }
          goto LABEL_85;
        }
        CFAllocatorRef v37 = *v21;
        CFMutableDictionaryRef v38 = CFDictionaryCreateMutable(*v21, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v38)
        {
          __int16 v50 = *(const void **)(v9 + 8);
          if (v50)
          {
            CFRelease(v50);
            *(void *)(v9 + 8) = 0;
          }
          pthread_mutex_unlock((pthread_mutex_t *)(v8 + 34392));
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              TPUpdateBaseband_cold_2();
            }
          }
          goto LABEL_85;
        }
        uint64_t v39 = v38;
        __int16 v90 = bswap32(*(unsigned __int16 *)(a2 + 64)) >> 16;
        __int16 v89 = bswap32(*(unsigned __int16 *)(a2 + 184)) >> 16;
        unsigned int valuePtr = bswap32(a3);
        CFNumberRef v40 = CFNumberCreate(v37, kCFNumberSInt32Type, &valuePtr);
        CFDictionaryAddValue(v39, (const void *)*MEMORY[0x1E4F23F70], v40);
        CFRelease(v40);
        CFNumberRef v41 = CFNumberCreate(v37, kCFNumberSInt8Type, &v91);
        CFDictionaryAddValue(v39, (const void *)*MEMORY[0x1E4F23EF8], v41);
        CFRelease(v41);
        CFNumberRef v42 = CFNumberCreate(v37, kCFNumberSInt16Type, &v90);
        CFDictionaryAddValue(v39, (const void *)*MEMORY[0x1E4F23F08], v42);
        CFRelease(v42);
        CFNumberRef v43 = CFNumberCreate(v37, kCFNumberSInt16Type, &v89);
        CFDictionaryAddValue(v39, (const void *)*MEMORY[0x1E4F23F58], v43);
        CFRelease(v43);
        if (*(unsigned char *)(a2 + 28))
        {
          CFDataRef v51 = CFDataCreate(v37, (const UInt8 *)(a2 + 48), 16);
          if (v51)
          {
            CFDataRef v52 = v51;
            CFDictionaryAddValue(v39, (const void *)*MEMORY[0x1E4F23F00], v51);
            CFRelease(v52);
          }
          CFDataRef v53 = CFDataCreate(v37, (const UInt8 *)(a2 + 168), 16);
          if (v53)
          {
            CFDataRef v54 = v53;
            CFDictionaryAddValue(v39, (const void *)*MEMORY[0x1E4F23F50], v53);
            CFRelease(v54);
          }
          __int16 v48 = *(__CFDictionary **)(v9 + 8);
          CGFloat v49 = (const void **)MEMORY[0x1E4F23F28];
        }
        else
        {
          *(_DWORD *)CATransform3D buf = bswap32(*(_DWORD *)(a2 + 48));
          *(_DWORD *)bytes = bswap32(*(_DWORD *)(a2 + 168));
          CFDataRef v44 = CFDataCreate(v37, buf, 4);
          if (v44)
          {
            CFDataRef v45 = v44;
            CFDictionaryAddValue(v39, (const void *)*MEMORY[0x1E4F23F00], v44);
            CFRelease(v45);
          }
          CFDataRef v46 = CFDataCreate(v37, bytes, 4);
          if (v46)
          {
            CFDataRef v47 = v46;
            CFDictionaryAddValue(v39, (const void *)*MEMORY[0x1E4F23F50], v46);
            CFRelease(v47);
          }
          __int16 v48 = *(__CFDictionary **)(v9 + 8);
          CGFloat v49 = (const void **)MEMORY[0x1E4F23F20];
        }
        CFDictionaryAddValue(v48, *v49, v39);
        CFRelease(v39);
        if (!*(void *)v9)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              TPUpdateBaseband_cold_3();
            }
          }
          goto LABEL_84;
        }
        unint64_t v55 = _CTServerConnectionSetPacketNotificationFilter();
        int v56 = v55;
        unint64_t v57 = HIDWORD(v55);
        if (v55)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            goto LABEL_84;
          }
          uint64_t v58 = VRTraceErrorLogLevelToCSTR();
          double v59 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_84;
          }
          *(_DWORD *)CATransform3D buf = 136316418;
          uint64_t v93 = v58;
          __int16 v94 = 2080;
          long long v95 = "TPSetupBasebandNotifications";
          __int16 v96 = 1024;
          int v97 = 759;
          __int16 v98 = 1024;
          *(_DWORD *)uint64_t v99 = 759;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v56;
          LOWORD(v100) = 1024;
          *(_DWORD *)((char *)&v100 + 2) = v57;
          __int16 v60 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Trans"
                "port.c:%d: _CTServerConnectionSetPacketNotificationFilter failed (%d.%d)";
          goto LABEL_56;
        }
        *(_DWORD *)(v9 + 32) = 1;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v62 = VRTraceErrorLogLevelToCSTR();
          double v63 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CATransform3D buf = 136315650;
            uint64_t v93 = v62;
            __int16 v94 = 2080;
            long long v95 = "TPSetupBasebandNotifications";
            __int16 v96 = 1024;
            int v97 = 765;
            _os_log_impl(&dword_1E1EA4000, v63, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Enabled baseband notification filter.", buf, 0x1Cu);
          }
        }
        int v64 = *(_DWORD *)(a2 + 272);
        int v65 = *(_DWORD *)(a2 + 276);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v66 = VRTraceErrorLogLevelToCSTR();
          CGFloat v67 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CATransform3D buf = 136316162;
            uint64_t v93 = v66;
            __int16 v94 = 2080;
            long long v95 = "TPSetupBasebandNotifications";
            __int16 v96 = 1024;
            int v97 = 770;
            __int16 v98 = 1024;
            *(_DWORD *)uint64_t v99 = v64;
            *(_WORD *)&v99[4] = 1024;
            *(_DWORD *)&v99[6] = v65;
            _os_log_impl(&dword_1E1EA4000, v67, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Cellular QoS (Local: %d Remote: %d).", buf, 0x28u);
          }
        }
        if (!*(_DWORD *)(v9 + 60) || !v64 || !v65) {
          goto LABEL_84;
        }
        unint64_t v68 = _CTServerConnectionRegisterForNotification();
        int v69 = v68;
        unint64_t v70 = HIDWORD(v68);
        int v71 = HIDWORD(v68) | v68;
        int v72 = VRTraceGetErrorLogLevelForModule();
        if (v71)
        {
          if (v72 < 3) {
            goto LABEL_84;
          }
          uint64_t v73 = VRTraceErrorLogLevelToCSTR();
          double v59 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_84;
          }
          *(_DWORD *)CATransform3D buf = 136316418;
          uint64_t v93 = v73;
          __int16 v94 = 2080;
          long long v95 = "TPSetupBasebandNotifications";
          __int16 v96 = 1024;
          int v97 = 775;
          __int16 v98 = 1024;
          *(_DWORD *)uint64_t v99 = 775;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v69;
          LOWORD(v100) = 1024;
          *(_DWORD *)((char *)&v100 + 2) = v70;
          __int16 v60 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Trans"
                "port.c:%d: _CTServerConnectionRegisterForNotification failed (%d.%d)";
LABEL_56:
          double v61 = v59;
LABEL_57:
          _os_log_error_impl(&dword_1E1EA4000, v61, OS_LOG_TYPE_ERROR, v60, buf, 0x2Eu);
          goto LABEL_84;
        }
        if (v72 >= 7)
        {
          uint64_t v74 = VRTraceErrorLogLevelToCSTR();
          CGRect v75 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CATransform3D buf = 136315650;
            uint64_t v93 = v74;
            __int16 v94 = 2080;
            long long v95 = "TPSetupBasebandNotifications";
            __int16 v96 = 1024;
            int v97 = 779;
            _os_log_impl(&dword_1E1EA4000, v75, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Registered QoS notification from CommCenter.", buf, 0x1Cu);
          }
        }
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v9 + 8), (const void *)*MEMORY[0x1E4F23EF0], (const void *)*MEMORY[0x1E4F23F30]);
        unint64_t v76 = _CTServerConnectionRequestQOS();
        int v77 = v76;
        unint64_t v78 = HIDWORD(v76);
        int v79 = HIDWORD(v76) | v76;
        int v80 = VRTraceGetErrorLogLevelForModule();
        if (v79)
        {
          if (v80 < 3) {
            goto LABEL_84;
          }
          uint64_t v81 = VRTraceErrorLogLevelToCSTR();
          long long v82 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            goto LABEL_84;
          }
          *(_DWORD *)CATransform3D buf = 136316418;
          uint64_t v93 = v81;
          __int16 v94 = 2080;
          long long v95 = "TPSetupBasebandNotifications";
          __int16 v96 = 1024;
          int v97 = 786;
          __int16 v98 = 1024;
          *(_DWORD *)uint64_t v99 = 786;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v77;
          LOWORD(v100) = 1024;
          *(_DWORD *)((char *)&v100 + 2) = v78;
          __int16 v60 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Trans"
                "port.c:%d: _CTServerConnectionRegisterForNotification failed (%d.%d)";
          double v61 = v82;
          goto LABEL_57;
        }
        if (v80 < 7) {
          goto LABEL_84;
        }
        uint64_t v83 = VRTraceErrorLogLevelToCSTR();
        long long v84 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_84;
        }
        *(_DWORD *)CATransform3D buf = 136315650;
        uint64_t v93 = v83;
        __int16 v94 = 2080;
        long long v95 = "TPSetupBasebandNotifications";
        __int16 v96 = 1024;
        int v97 = 790;
        CGFloat v31 = "SIP [%s] %s:%d Requested QoS from CommCenter.";
        uint64_t v32 = v84;
        uint32_t v33 = 28;
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
          goto LABEL_84;
        }
        uint64_t v28 = VRTraceErrorLogLevelToCSTR();
        uint64_t v29 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_84;
        }
        int v30 = *(_DWORD *)(v9 + 56);
        *(_DWORD *)CATransform3D buf = 136316162;
        uint64_t v93 = v28;
        __int16 v94 = 2080;
        long long v95 = "TPSetupBasebandNotifications";
        __int16 v96 = 1024;
        int v97 = 657;
        __int16 v98 = 1024;
        *(_DWORD *)uint64_t v99 = 657;
        *(_WORD *)&v99[4] = 1024;
        *(_DWORD *)&v99[6] = v30;
        CGFloat v31 = "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transpo"
              "rt.c:%d: TPSetupBaseband called, but fEnableCellular %d";
        uint64_t v32 = v29;
        uint32_t v33 = 40;
      }
      _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
LABEL_84:
      pthread_mutex_unlock(v20);
      goto LABEL_85;
    }
    return 2148466690;
  }
  else
  {
    uint64_t v10 = 2148466689;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      int v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CATransform3D buf = 136315650;
        uint64_t v93 = v11;
        __int16 v94 = 2080;
        long long v95 = "TPUpdateBaseband";
        __int16 v96 = 1024;
        int v97 = 835;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Invalid call type passed to TPUpdateBaseband", buf, 0x1Cu);
      }
    }
  }
  return v10;
}

uint64_t TPCleanupBasebandNotifications(uint64_t result)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = result + 34456;
  if (*(_DWORD *)(result + 34512))
  {
    id v2 = (pthread_mutex_t *)(result + 34392);
    pthread_mutex_lock((pthread_mutex_t *)(result + 34392));
    if (*(void *)v1)
    {
      if (*(_DWORD *)(v1 + 32) && *(void *)(v1 + 8))
      {
        unint64_t v3 = _CTServerConnectionSetPacketNotificationFilter();
        int v4 = v3;
        unint64_t v5 = HIDWORD(v3);
        int v6 = HIDWORD(v3) | v3;
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v6)
        {
          if (ErrorLogLevelForModule >= 3)
          {
            uint64_t v8 = VRTraceErrorLogLevelToCSTR();
            uint64_t v9 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              int v22 = 136316418;
              uint64_t v23 = v8;
              __int16 v24 = 2080;
              int v25 = "TPCleanupBasebandNotifications";
              __int16 v26 = 1024;
              int v27 = 810;
              __int16 v28 = 1024;
              int v29 = 810;
              __int16 v30 = 1024;
              int v31 = v4;
              __int16 v32 = 1024;
              int v33 = v5;
              _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionSetPacketNotificationFilter failed (%d.%d)", (uint8_t *)&v22, 0x2Eu);
            }
          }
        }
        else if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v10 = VRTraceErrorLogLevelToCSTR();
          uint64_t v11 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v22 = 136315650;
            uint64_t v23 = v10;
            __int16 v24 = 2080;
            int v25 = "TPCleanupBasebandNotifications";
            __int16 v26 = 1024;
            int v27 = 808;
            _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Disabled baseband notification filter.", (uint8_t *)&v22, 0x1Cu);
          }
        }
      }
      if (*(_DWORD *)(v1 + 60) && *(_DWORD *)(v1 + 64))
      {
        unint64_t v12 = _CTServerConnectionReleaseQOS();
        int v13 = v12;
        unint64_t v14 = HIDWORD(v12);
        int v15 = HIDWORD(v12) | v12;
        int v16 = VRTraceGetErrorLogLevelForModule();
        if (v15)
        {
          if (v16 >= 3)
          {
            uint64_t v17 = VRTraceErrorLogLevelToCSTR();
            int v18 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              int v22 = 136316418;
              uint64_t v23 = v17;
              __int16 v24 = 2080;
              int v25 = "TPCleanupBasebandNotifications";
              __int16 v26 = 1024;
              int v27 = 819;
              __int16 v28 = 1024;
              int v29 = 819;
              __int16 v30 = 1024;
              int v31 = v13;
              __int16 v32 = 1024;
              int v33 = v14;
              _os_log_error_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionReleaseQOS failed (%d.%d)", (uint8_t *)&v22, 0x2Eu);
            }
          }
        }
        else if (v16 >= 7)
        {
          uint64_t v19 = VRTraceErrorLogLevelToCSTR();
          __int16 v20 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v22 = 136315650;
            uint64_t v23 = v19;
            __int16 v24 = 2080;
            int v25 = "TPCleanupBasebandNotifications";
            __int16 v26 = 1024;
            int v27 = 817;
            _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Stopped QoS from CommCenter.", (uint8_t *)&v22, 0x1Cu);
          }
        }
      }
    }
    double v21 = *(const void **)(v1 + 8);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(v1 + 8) = 0;
    }
    return pthread_mutex_unlock(v2);
  }
  return result;
}

uint64_t TPUpdateQualityIndictor(uint64_t a1, int a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CheckInHandleDebug();
  if (!v5) {
    return 2148466690;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (pthread_mutex_t *)(v5 + 34392);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 34392));
  if (*(void *)(v6 + 34456))
  {
    uint64_t updated = _CTServerConnectionUpdateProtocolQualityOfService();
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (updated)
    {
      if (ErrorLogLevelForModule >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          TPUpdateQualityIndictor_cold_1();
        }
      }
    }
    else if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      unint64_t v12 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136316162;
        uint64_t v14 = v11;
        __int16 v15 = 2080;
        int v16 = "TPUpdateQualityIndictor";
        __int16 v17 = 1024;
        int v18 = 902;
        __int16 v19 = 1024;
        int v20 = a2;
        __int16 v21 = 1024;
        int v22 = a3;
        _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d TPUpdateQualityIndictor: (%d), ISIPv6 (%d).", (uint8_t *)&v13, 0x28u);
      }
    }
  }
  pthread_mutex_unlock(v7);
  CheckOutHandleDebug();
  return 0;
}

uint64_t TPFlushBasebandQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2148466689;
  if (a2)
  {
    uint64_t v3 = CheckInHandleDebug();
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (pthread_mutex_t *)(v3 + 34392);
      pthread_mutex_lock((pthread_mutex_t *)(v3 + 34392));
      if (*(void *)(v4 + 34456) && (unint64_t v6 = _CTServerConnectionDropIPPackets(), v7 = v6, v8 = HIDWORD(v6), v6))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v9 = VRTraceErrorLogLevelToCSTR();
          uint64_t v10 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v12 = 136316418;
            uint64_t v13 = v9;
            __int16 v14 = 2080;
            __int16 v15 = "TPFlushBasebandQueue";
            __int16 v16 = 1024;
            int v17 = 930;
            __int16 v18 = 1024;
            int v19 = 930;
            __int16 v20 = 1024;
            int v21 = v7;
            __int16 v22 = 1024;
            int v23 = v8;
            _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionSetPacketNotificationFilter failed (%d.%d)", (uint8_t *)&v12, 0x2Eu);
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
      }
      pthread_mutex_unlock(v5);
      CheckOutHandleDebug();
    }
    else
    {
      return 2148466690;
    }
  }
  return v2;
}

uint64_t TPSendUDPPacketARPL(uint64_t a1, const void *a2, int a3, uint64_t a4, int *a5, int a6, char a7, int a8)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  memset(v42, 0, sizeof(v42));
  uint64_t v15 = CheckInHandleDebug();
  if (!v15) {
    return 2148466690;
  }
  uint64_t v16 = v15;
  int v41 = a3;
  if ((a7 & 1) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v17 = VRTraceErrorLogLevelToCSTR();
    __int16 v18 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CATransform3D buf = 136315650;
      uint64_t v56 = v17;
      __int16 v57 = 2080;
      uint64_t v58 = "TPSendUDPPacketARPL";
      __int16 v59 = 1024;
      int v60 = 1039;
      _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d >>>>>  ARPL packet is UNENCRYPTED in TPSendUDPPacketARPL (in Transport) <<<<<", buf, 0x1Cu);
    }
  }
  if (!a2 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v19 = VRTraceErrorLogLevelToCSTR();
    __int16 v20 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CATransform3D buf = 136315650;
      uint64_t v56 = v19;
      __int16 v57 = 2080;
      uint64_t v58 = "TPSendUDPPacketARPL";
      __int16 v59 = 1024;
      int v60 = 1042;
      _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d >>>>>  ARPL packet pbMsg is NULL in TPSendUDPPacketARPL(in Transport) <<<<<", buf, 0x1Cu);
    }
  }
  if (!v41 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v21 = VRTraceErrorLogLevelToCSTR();
    __int16 v22 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CATransform3D buf = 136315650;
      uint64_t v56 = v21;
      __int16 v57 = 2080;
      uint64_t v58 = "TPSendUDPPacketARPL";
      __int16 v59 = 1024;
      int v60 = 1045;
      _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d >>>>>  ARPL packet iLen==0 in TPSendUDPPacketARPL(in Transport) <<<<<", buf, 0x1Cu);
    }
  }
  LODWORD(v42[0]) = a6;
  BYTE12(v42[0]) = a7;
  DWORD2(v43) = a8;
  BYTE9(v44) = 1;
  if (a6 == 4)
  {
    int v25 = 1;
    int v23 = a5;
  }
  else
  {
    int v23 = a5;
    if (a6 == 5)
    {
      if ((a7 & 1) == 0
        && (int)VRTraceGetErrorLogLevelForModule() >= 3
        && (VRTraceErrorLogLevelToCSTR(), os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
      {
        TPSendUDPPacketARPL_cold_4();
        if (!a2) {
          goto LABEL_20;
        }
      }
      else if (!a2)
      {
LABEL_20:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            TPSendUDPPacketARPL_cold_3();
          }
        }
      }
      int v24 = v41;
      if (v41)
      {
        int v25 = 0;
        goto LABEL_55;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      {
        int v25 = 0;
      }
      else
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          TPSendUDPPacketARPL_cold_2();
        }
        int v25 = 0;
        int v24 = 0;
      }
      goto LABEL_29;
    }
    int v25 = 0;
  }
  int v24 = v41;
LABEL_29:
  if (a2 || v24)
  {
LABEL_55:
    int v27 = (pthread_rwlock_t *)(v16 + 1064);
    pthread_rwlock_rdlock((pthread_rwlock_t *)(v16 + 1064));
    uint64_t v35 = SendUDPPacketForCList(*(void *)(v16 + 1056), a2, v24, a4, v23, (int *)v42);
    uint64_t v26 = v35;
    if (v25 && v35 == -2146500586)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v36 = VRTraceErrorLogLevelToCSTR();
        CFAllocatorRef v37 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CATransform3D buf = 136315650;
          uint64_t v56 = v36;
          __int16 v57 = 2080;
          uint64_t v58 = "SendUDPPacket";
          __int16 v59 = 1024;
          int v60 = 1003;
          _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, "SIP [%s] %s:%d Retry SIP packet using default result key.", buf, 0x1Cu);
        }
      }
      LODWORD(v44) = 1;
      uint64_t v38 = SendUDPPacketForCList(*(void *)(v16 + 1056), a2, v24, a4, v23, (int *)v42);
      if ((v38 & 0x80000000) == 0) {
        goto LABEL_61;
      }
      uint64_t v26 = v38;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          TPSendUDPPacketARPL_cold_1();
        }
        int v24 = v41;
      }
    }
    pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 1064));
    if (v26 == -2146500586)
    {
      int v27 = (pthread_rwlock_t *)(v16 + 1272);
      pthread_rwlock_rdlock((pthread_rwlock_t *)(v16 + 1272));
      LODWORD(v42[0]) = 0;
      BYTE12(v42[0]) = 0;
      DWORD2(v43) = 0;
      uint64_t v26 = SendUDPPacketForCList(*(void *)(v16 + 1264), a2, v24, a4, v23, (int *)v42);
      goto LABEL_74;
    }
    goto LABEL_75;
  }
  int v27 = (pthread_rwlock_t *)(v16 + 1272);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(v16 + 1272));
  uint64_t v28 = *(void *)(v16 + 1264);
  if (!v28)
  {
LABEL_61:
    uint64_t v26 = 0;
    goto LABEL_74;
  }
  int v29 = (void *)(v16 + 1264);
  int v30 = *(_DWORD *)a4 & 1;
  while ((*(_DWORD *)(v28 + 2072) & 1) != v30)
  {
LABEL_44:
    if (*(_DWORD *)(v28 + 2072)) {
      goto LABEL_47;
    }
    if (!*(_DWORD *)(v28 + 2092)) {
      goto LABEL_52;
    }
LABEL_53:
    int v29 = (void *)(v28 + 2144);
    uint64_t v28 = *(void *)(v28 + 2144);
    if (!v28) {
      goto LABEL_73;
    }
  }
  int v31 = (int *)(v28 + 2092);
  if (!v30)
  {
    int v32 = *v31;
    if (v32 != *(_DWORD *)(a4 + 20))
    {
      if (!v32) {
        goto LABEL_52;
      }
      goto LABEL_53;
    }
    goto LABEL_43;
  }
  if (*(void *)v31 == *(void *)(a4 + 20) && *(void *)(v28 + 2100) == *(void *)(a4 + 28))
  {
LABEL_43:
    if (*(unsigned __int16 *)(v28 + 2108) == *(unsigned __int16 *)(a4 + 36)) {
      goto LABEL_72;
    }
    goto LABEL_44;
  }
LABEL_47:
  if (*(void *)(v28 + 2092) != *MEMORY[0x1E4F148B8]
    || *(void *)(v28 + 2100) != *(void *)(MEMORY[0x1E4F148B8] + 8))
  {
    goto LABEL_53;
  }
LABEL_52:
  if (*(unsigned __int16 *)(v28 + 2108) != *(unsigned __int16 *)(a4 + 36)) {
    goto LABEL_53;
  }
LABEL_72:
  *int v29 = *(void *)(v28 + 2144);
  ICERemoveOneInterface();
  free((void *)v28);
  int v39 = *(_DWORD *)(v16 + 12);
  *(_DWORD *)(v16 + 12) = -1;
  VTP_Close(v39);
LABEL_73:
  uint64_t v26 = 0;
LABEL_74:
  pthread_rwlock_unlock(v27);
LABEL_75:
  CheckOutHandleDebug();
  return v26;
}