uint64_t _AUIOSpkrProc(void *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, unsigned int a5, AudioBufferList *a6)
{
  uint64_t mSampleTime;
  uint64_t v10;
  size_t v11;
  _DWORD *AudioBufferList;
  _DWORD *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t result;
  double v17;
  double mHostTime;
  int v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  int v24;
  void **p_mData;
  void *v26;
  double v27;
  double v28;
  double *SampleFormat;
  double v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  double v34;
  unsigned int *v35;
  unint64_t v36;
  unint64_t v37;
  AudioBuffer *mBuffers;
  _OWORD *v39;
  long long v40;
  int v41;
  uint64_t v42;
  BOOL IsSilenceInQueue;
  int v44;
  float v45;
  BOOL v47;
  char v48;
  int v49;
  int v50;
  int v51;
  UInt32 mNumberBuffers;
  UInt32 mDataByteSize;
  int v54;
  int v55;
  uint8_t buf[4];
  uint64_t v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  unsigned char v64[10];
  uint64_t v65;
  unsigned char v66[10];
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _AUIOSpkrProc();
    }
    return 0;
  }
  mSampleTime = (uint64_t)a3->mSampleTime;
  kdebug_trace();
  v10 = *((unsigned int *)a1 + 21);
  v11 = *((_DWORD *)a1 + 20) * a5;
  ++a1[69];
  VCAudioBufferList_Reset(a1[31]);
  AudioBufferList = (_DWORD *)VCAudioBufferList_GetAudioBufferList(a1[31]);
  if (AudioBufferList[3] * *AudioBufferList >= (v11 * v10))
  {
    if (*((unsigned char *)a1 + 234))
    {
      v17 = *((double *)a1 + 55);
      mHostTime = (double)a3->mHostTime;
      v19 = *((_DWORD *)a1 + 104);
      if (v19)
      {
        if ((int)mSampleTime - (v19 + *((_DWORD *)a1 + 108)) > 2 * a5)
        {
          *((_DWORD *)a1 + 108) = mSampleTime - v19;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v20 = VRTraceErrorLogLevelToCSTR();
            v21 = *MEMORY[0x1E4F47A50];
            v22 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                v23 = *((_DWORD *)a1 + 108);
                v24 = *((_DWORD *)a1 + 104);
                *(_DWORD *)buf = 136316418;
                v58 = v20;
                v59 = 2080;
                v60 = "_AUIOSpkrProc";
                v61 = 1024;
                v62 = 669;
                v63 = 1024;
                *(_DWORD *)v64 = v23;
                *(_WORD *)&v64[4] = 1024;
                *(_DWORD *)&v64[6] = mSampleTime;
                LOWORD(v65) = 1024;
                *(_DWORD *)((char *)&v65 + 2) = v24;
                _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "AUIO [%s] %s:%d Setting timestamp delta to %d: speaker %d - mic %d", buf, 0x2Eu);
              }
            }
            else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              v54 = *((_DWORD *)a1 + 108);
              v55 = *((_DWORD *)a1 + 104);
              *(_DWORD *)buf = 136316418;
              v58 = v20;
              v59 = 2080;
              v60 = "_AUIOSpkrProc";
              v61 = 1024;
              v62 = 669;
              v63 = 1024;
              *(_DWORD *)v64 = v54;
              *(_WORD *)&v64[4] = 1024;
              *(_DWORD *)&v64[6] = mSampleTime;
              LOWORD(v65) = 1024;
              *(_DWORD *)((char *)&v65 + 2) = v55;
              _os_log_debug_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEBUG, "AUIO [%s] %s:%d Setting timestamp delta to %d: speaker %d - mic %d", buf, 0x2Eu);
            }
          }
        }
      }
      v27 = v17 * mHostTime;
      v28 = 0.0;
      if (VRTraceIsInternalOSInstalled()) {
        v28 = micro();
      }
      SampleFormat = (double *)VCAudioBufferList_GetSampleFormat(a1[31]);
      v30 = (double)a5 / *SampleFormat + (double)a5 / *SampleFormat;
      if (v27 - *((double *)a1 + 57) > v30 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        v31 = VRTraceErrorLogLevelToCSTR();
        v32 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          v33 = a1[57];
          v34 = *SampleFormat;
          *(_DWORD *)buf = 136317186;
          v58 = v31;
          v59 = 2080;
          v60 = "_AUIOSpkrProc";
          v61 = 1024;
          v62 = 677;
          v63 = 2048;
          *(void *)v64 = a1;
          *(_WORD *)&v64[8] = 2048;
          v65 = v33;
          *(_WORD *)v66 = 2048;
          *(double *)&v66[2] = v27;
          v67 = 1024;
          v68 = a5;
          v69 = 2048;
          v70 = v34;
          v71 = 2048;
          v72 = v30;
          _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, "AUIO [%s] %s:%d [AUIO=%p] Observing hostTime Jump previousHostTime=%f currentHostTime=%f inNumberFrames=%d format->mSampleRate=%f allowedHostTimeJump=%f", buf, 0x54u);
        }
      }
      *((double *)a1 + 57) = v27;
      VCAudioBufferList_SetTime(a1[31], mSampleTime, v27);
      VCAudioBufferList_SetSampleCount(a1[31], (*SampleFormat * (double)a5 / *((double *)a1 + 7)));
      v35 = (unsigned int *)VCAudioBufferList_GetAudioBufferList(a1[31]);
      v36 = *v35;
      if (v36)
      {
        v37 = 0;
        mBuffers = a6->mBuffers;
        v39 = v35 + 2;
        do
        {
          v40 = (__int128)*mBuffers++;
          *v39++ = v40;
          ++v37;
        }
        while (v37 < v36);
      }
      ((void (*)(void, void))a1[1])(*a1, a1[31]);
      if (LogProfileTimeOverLimit(v28, 0.00800000038, "IOProc: shenanigans spkr proc")) {
        ++*((_DWORD *)a1 + 134);
      }
      *((float *)a1 + 93) = VCAudioBufferList_GetAveragePower(a1[31]);
      ++a1[70];
      kdebug_trace();
      v41 = *((unsigned __int8 *)a1 + 388);
      v42 = a1[76];
      if (v42 && VCAudioSession_IsDeferredNetworkUplinkClockUpdateSupported(v42))
      {
        IsSilenceInQueue = VCAudioBufferList_IsSilenceInQueue(a1[31]);
        *((unsigned char *)a1 + 376) = IsSilenceInQueue;
        if (IsSilenceInQueue) {
          v44 = *((_DWORD *)a1 + 95) + 1;
        }
        else {
          v44 = 0;
        }
        *((_DWORD *)a1 + 95) = v44;
        v45 = *((float *)a1 + 96) * 0.67 + *((float *)a1 + 93) * 0.33;
        *((float *)a1 + 96) = v45;
        if (IsSilenceInQueue)
        {
          v47 = v45 <= -80.0 && v44 > 14;
          if (!v41 && v47)
          {
            VCAudioSession_ScheduleNetworkUplinkClockUpdate(a1[76]);
            v48 = 1;
LABEL_53:
            result = 0;
            *((unsigned char *)a1 + 388) = v48;
            return result;
          }
        }
        else
        {
          LOBYTE(v47) = 0;
        }
        if (v41)
        {
          v48 = 0;
          result = 0;
          if (v47) {
            return result;
          }
          goto LABEL_53;
        }
      }
      else
      {
        v48 = 0;
        if (v41) {
          goto LABEL_53;
        }
      }
    }
    else
    {
      ++a1[70];
      if (v10)
      {
        p_mData = &a6->mBuffers[0].mData;
        do
        {
          *((_DWORD *)p_mData - 1) = v11;
          v26 = *p_mData;
          p_mData += 2;
          bzero(v26, v11);
          --v10;
        }
        while (v10);
      }
      ((void (*)(void, uint64_t))a1[4])(*a1, 2149253137);
    }
    return 0;
  }
  v13 = AudioBufferList;
  ++a1[70];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v14 = VRTraceErrorLogLevelToCSTR();
    v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      v49 = v13[3];
      v50 = *((_DWORD *)a1 + 20);
      v51 = *((_DWORD *)a1 + 21);
      mNumberBuffers = a6->mNumberBuffers;
      mDataByteSize = a6->mBuffers[0].mDataByteSize;
      *(_DWORD *)buf = 136317442;
      v58 = v14;
      v59 = 2080;
      v60 = "_AUIOSpkrProc";
      v61 = 1024;
      v62 = 649;
      v63 = 1024;
      *(_DWORD *)v64 = v49;
      *(_WORD *)&v64[4] = 1024;
      *(_DWORD *)&v64[6] = v11 * v10;
      LOWORD(v65) = 1024;
      *(_DWORD *)((char *)&v65 + 2) = a5;
      HIWORD(v65) = 1024;
      *(_DWORD *)v66 = v50;
      *(_WORD *)&v66[4] = 1024;
      *(_DWORD *)&v66[6] = v51;
      v67 = 1024;
      v68 = mNumberBuffers;
      v69 = 1024;
      LODWORD(v70) = mDataByteSize;
      _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, "AUIO [%s] %s:%d speaker sample buffer is too small (%d). Expected=%d frames=%d bytesPerFrame=%d channels=%d! BufferCount=%d size=%d", buf, 0x46u);
    }
  }
  ((void (*)(void, uint64_t))a1[4])(*a1, 2149253134);
  return 14;
}

uint64_t _AUIOSpkrProcGKS(void *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, unsigned int a5, AudioBufferList *a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t mSampleTime = (uint64_t)a3->mSampleTime;
    kdebug_trace();
    int v10 = *((_DWORD *)a1 + 20);
    uint64_t v11 = *((unsigned int *)a1 + 21);
    ++a1[69];
    if (*((unsigned char *)a1 + 234))
    {
      double v12 = *((double *)a1 + 55);
      UInt64 mHostTime = a3->mHostTime;
      int v14 = *((_DWORD *)a1 + 104);
      if (v14)
      {
        if ((int)mSampleTime - (v14 + *((_DWORD *)a1 + 108)) > 2 * a5)
        {
          *((_DWORD *)a1 + 108) = mSampleTime - v14;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v15 = VRTraceErrorLogLevelToCSTR();
            v16 = *MEMORY[0x1E4F47A50];
            v17 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                int v18 = *((_DWORD *)a1 + 108);
                int v19 = *((_DWORD *)a1 + 104);
                *(_DWORD *)buf = 136316418;
                uint64_t v53 = v15;
                __int16 v54 = 2080;
                v55 = "_AUIOSpkrProcGKS";
                __int16 v56 = 1024;
                int v57 = 742;
                __int16 v58 = 1024;
                int v59 = v18;
                __int16 v60 = 1024;
                int v61 = mSampleTime;
                __int16 v62 = 1024;
                int v63 = v19;
                _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, "AUIO [%s] %s:%d Setting timestamp delta to %d: speaker %d - mic %d", buf, 0x2Eu);
              }
            }
            else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              int v48 = *((_DWORD *)a1 + 108);
              int v49 = *((_DWORD *)a1 + 104);
              *(_DWORD *)buf = 136316418;
              uint64_t v53 = v15;
              __int16 v54 = 2080;
              v55 = "_AUIOSpkrProcGKS";
              __int16 v56 = 1024;
              int v57 = 742;
              __int16 v58 = 1024;
              int v59 = v48;
              __int16 v60 = 1024;
              int v61 = mSampleTime;
              __int16 v62 = 1024;
              int v63 = v49;
              _os_log_debug_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEBUG, "AUIO [%s] %s:%d Setting timestamp delta to %d: speaker %d - mic %d", buf, 0x2Eu);
            }
          }
        }
      }
      double v23 = (double)mHostTime;
      double v24 = 0.0;
      if (VRTraceIsInternalOSInstalled()) {
        double v24 = micro();
      }
      double v25 = v12 * v23;
      uint64_t SampleFormat = VCAudioBufferList_GetSampleFormat(a1[31]);
      if (a5)
      {
        uint64_t v27 = SampleFormat;
        unsigned int v28 = 0;
        unsigned int v29 = 0;
        unsigned int v51 = a5;
        do
        {
          unsigned int SampleCount = VCAudioBufferList_GetSampleCount(a1[31]);
          if (SampleCount)
          {
            if (SampleCount >= a5 - v29) {
              unsigned int v31 = a5 - v29;
            }
            else {
              unsigned int v31 = SampleCount;
            }
            int v32 = *(_DWORD *)(v27 + 16);
            AudioBufferList = (unsigned int *)VCAudioBufferList_GetAudioBufferList(a1[31]);
            if (*AudioBufferList)
            {
              v34 = AudioBufferList;
              unint64_t v35 = 0;
              size_t v36 = v32 * v31;
              uint64_t v37 = 4;
              do
              {
                memcpy((void *)(*(void *)((char *)&a6->mNumberBuffers + v37 * 4) + *(_DWORD *)(v27 + 16) * v29), *(const void **)&v34[v37], v36);
                ++v35;
                v37 += 4;
              }
              while (v35 < *v34);
            }
            VCAudioBufferList_Shift(a1[31], v31);
            unsigned int v28 = (*(double *)v27 * (double)v31 / *((double *)a1 + 7) + (double)v28);
            v29 += v31;
            a5 = v51;
          }
          unsigned int v38 = a5 - v29;
          if (a5 > v29)
          {
            VCAudioBufferList_Reset(a1[31]);
            VCAudioBufferList_SetTime(a1[31], v28 + mSampleTime, v25);
            VCAudioBufferList_SetSampleCount(a1[31], *((_DWORD *)a1 + 56));
            unsigned int v39 = *((_DWORD *)a1 + 56);
            if (v38 >= v39)
            {
              v40 = (unsigned int *)VCAudioBufferList_GetAudioBufferList(a1[31]);
              uint64_t v41 = *v40;
              if (v41)
              {
                uint64_t v42 = *(_DWORD *)(v27 + 16) * v29;
                v43 = v40 + 4;
                p_mData = &a6->mBuffers[0].mData;
                do
                {
                  v45 = (char *)*p_mData;
                  p_mData += 2;
                  void *v43 = &v45[v42];
                  v43 += 2;
                  --v41;
                }
                while (v41);
              }
            }
            ((void (*)(void, void))a1[1])(*a1, a1[31]);
            if (LogProfileTimeOverLimit(v24, 0.00800000038, "IOProc: shenanigans spkr proc")) {
              ++*((_DWORD *)a1 + 134);
            }
            *((float *)a1 + 93) = VCAudioBufferList_GetAveragePower(a1[31]);
            if (v38 >= v39)
            {
              unsigned int v46 = *((_DWORD *)a1 + 56);
              v29 += v46;
              unsigned int v28 = (*(double *)v27 * (double)v46 / *((double *)a1 + 7) + (double)v28);
              VCAudioBufferList_SetSampleCount(a1[31], 0);
            }
          }
        }
        while (v29 < a5);
      }
      ++a1[70];
      kdebug_trace();
    }
    else
    {
      ++a1[70];
      if (v11)
      {
        size_t v20 = v10 * a5;
        v21 = &a6->mBuffers[0].mData;
        do
        {
          *((_DWORD *)v21 - 1) = v20;
          v22 = *v21;
          v21 += 2;
          bzero(v22, v20);
          --v11;
        }
        while (v11);
      }
      ((void (*)(void, uint64_t))a1[4])(*a1, 2149253137);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _AUIOSpkrProcGKS();
    }
  }
  return 0;
}

void ___ZL22_AUIOStartPacketThreadP7tagAUIO_block_invoke(uint64_t a1, uint64_t a2)
{
  VCAudioBufferList_GetTimestamp(a2);
  VCAudioBufferList_GetSampleCount(a2);
  kdebug_trace();
  uint64_t v4 = *(void *)(a1 + 32);

  _AUIOSendMicSamples(v4, a2);
}

void sub_1E237CF4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *newVideoRulesForFormatList(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = objc_opt_new();
  if (v4) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v2 = v2;
    v6 = (unsigned int *)(a1 + 8);
    do
    {
      v7 = [VCVideoRule alloc];
      *(float *)&double v8 = (float)*v6;
      uint64_t v9 = [(VCVideoRule *)v7 initWithFrameWidth:*(v6 - 2) frameHeight:*(v6 - 1) frameRate:123 payload:v8];
      if (v9)
      {
        int v10 = (void *)v9;
        [v4 addObject:v9];
      }
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  return v4;
}

void sub_1E237E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t NetworkUtils_IsLTEOrNewer(unsigned int a1)
{
  return (a1 < 0xA) & (0x320u >> a1);
}

uint64_t VCNetworkUtils_AdditionalOverheadForIDSOptions(int a1, int a2, int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  _VCNetworkUtils_ComposeMaxedOutIDSOverheadOptions(a1, a2, a3, (uint64_t)v4);
  return IDSEstimateAdditionalOverheadForDatagramOptions();
}

void _VCNetworkUtils_ComposeMaxedOutIDSOverheadOptions(int a1, int a2, int a3, uint64_t a4)
{
  if (a4)
  {
    *(void *)(a4 + 112) = 0;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    if (a1)
    {
      *(unsigned char *)(a4 + 19) = a1;
      int v4 = 3;
    }
    else
    {
      int v4 = 1;
    }
    if (a3) {
      int v5 = 16;
    }
    else {
      int v5 = 0;
    }
    if (a2) {
      int v6 = 231404;
    }
    else {
      int v6 = 231396;
    }
    *(_DWORD *)a4 = v6 | v5 | v4;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCNetworkUtils_ComposeMaxedOutIDSOverheadOptions_cold_1();
    }
  }
}

uint64_t VCNetworkUtils_WorstCaseIDSOverheadForOptions(int a1, int a2, int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  _VCNetworkUtils_ComposeMaxedOutIDSOverheadOptions(a1, a2, a3, (uint64_t)v4);
  return IDSWorstCaseOverheadForDatagramOptions();
}

void VCVirtualAVCaptureVideoDataOutput_OnMediaSample(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  if (a2) {
    CFRetain(a2);
  }
  id v7 = *(id *)(a1 + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  int v10 = __VCVirtualAVCaptureVideoDataOutput_OnMediaSample_block_invoke;
  uint64_t v11 = &unk_1E6DB6560;
  id v12 = v7;
  uint64_t v13 = a1;
  uint64_t v14 = a4;
  uint64_t v15 = a2;
  double v8 = *(NSObject **)(a1 + 32);
  if (v8)
  {
    dispatch_async(v8, block);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
    v10((uint64_t)block);
  }
}

uint64_t VCVideoCapture_CompareSinkEntries(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v2 == v3;
  unsigned int v5 = 2 * (v2 >= v3);
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t VCVideoCapture_DistributeVideoFrame(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  double v8 = (pthread_mutex_t *)(a1 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __VCVideoCapture_DistributeVideoFrame_block_invoke;
  v10[3] = &__block_descriptor_72_e66_v24__0___VCSingleLinkedListEntry____VCSingleLinkedListEntry__8_B16l;
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  v10[4] = a2;
  v10[5] = a4;
  VCSingleLinkedListEnumerate(a1 + 112, (uint64_t)v10);
  return pthread_mutex_unlock(v8);
}

_DWORD *RateMonitorCreateWithHistoryLength(int a1)
{
  unint64_t v2 = malloc_type_calloc(1uLL, 0x50uLL, 0x10100407B5C152EuLL);
  v2[8] = a1;
  *((void *)v2 + 5) = malloc_type_malloc(a1, 0x100004077774924uLL);
  return v2;
}

void RateMonitorDestroy(void **a1)
{
  free(a1[5]);

  free(a1);
}

double *RateMonitorConfigureWithThresholds(double *result, double a2, double a3, double a4, double a5)
{
  if (result)
  {
    result[8] = a5;
    result[2] = a3;
    result[3] = a4;
    result[1] = a2;
  }
  return result;
}

unsigned char *RateMonitorStart(unsigned char *result)
{
  *result = 1;
  return result;
}

uint64_t RateMonitorUpdateDataSamples(uint64_t a1, double a2, double a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)a1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = 16;
  if (*(double *)(a1 + 8) < a2) {
    uint64_t v6 = 24;
  }
  if (a2 != 0.0 && a3 != 0.0)
  {
    double v8 = *(double *)(a1 + v6);
    double v9 = vabdd_f64(a2, a3);
    double v10 = v8 * a2;
    uint64_t v11 = *(int *)(a1 + 52);
    int v12 = *(_DWORD *)(a1 + 32);
    int v13 = ((int)v11 + 1) % v12;
    uint64_t v14 = *(void *)(a1 + 40);
    if (v13 == *(_DWORD *)(a1 + 48))
    {
      int v15 = *(_DWORD *)(a1 + 56) - *(unsigned __int8 *)(v14 + v13);
      *(_DWORD *)(a1 + 48) = (v13 + 1) % v12;
    }
    else
    {
      int v15 = *(_DWORD *)(a1 + 56);
    }
    BOOL v16 = v9 > v10;
    *(unsigned char *)(v14 + v11) = v9 > v8 * a2;
    if (v9 <= v10) {
      int v17 = v15;
    }
    else {
      int v17 = v15 + 1;
    }
    *(_DWORD *)(a1 + 52) = v13;
    *(_DWORD *)(a1 + 56) = v17;
    double v18 = (double)v17 / (double)v12;
    double v19 = *(double *)(a1 + 64);
    BOOL v20 = v18 > v19 || *(unsigned char *)(a1 + 72) != 0;
    *(unsigned char *)(a1 + 72) = v20;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v21 = VRTraceErrorLogLevelToCSTR();
      v22 = *MEMORY[0x1E4F47A50];
      double v23 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          int v25 = *(_DWORD *)(a1 + 48);
          int v24 = *(_DWORD *)(a1 + 52);
          int v26 = *(_DWORD *)(a1 + 56);
          int v27 = *(unsigned __int8 *)(a1 + 72);
          int v32 = 136317698;
          uint64_t v33 = v21;
          __int16 v34 = 2080;
          unint64_t v35 = "RateMonitorUpdateDataSamples";
          __int16 v36 = 1024;
          int v37 = 71;
          __int16 v38 = 1024;
          int v39 = v24;
          __int16 v40 = 1024;
          int v41 = v25;
          __int16 v42 = 2048;
          double v43 = a2;
          __int16 v44 = 2048;
          double v45 = a3;
          __int16 v46 = 2048;
          double v47 = v8;
          __int16 v48 = 1024;
          BOOL v49 = v16;
          __int16 v50 = 1024;
          int v51 = v26;
          __int16 v52 = 1024;
          int v53 = v27;
          _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Rate Monitor: head index %d, tail index %d, dataSample1 %f, dataSample2 %f, tierTolerance %f, isAbnormalData %d, _abnormalCounter %d, isExceedingThreshold %d", (uint8_t *)&v32, 0x58u);
        }
      }
      else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        int v29 = *(_DWORD *)(a1 + 48);
        int v28 = *(_DWORD *)(a1 + 52);
        int v30 = *(_DWORD *)(a1 + 56);
        int v31 = *(unsigned __int8 *)(a1 + 72);
        int v32 = 136317698;
        uint64_t v33 = v21;
        __int16 v34 = 2080;
        unint64_t v35 = "RateMonitorUpdateDataSamples";
        __int16 v36 = 1024;
        int v37 = 71;
        __int16 v38 = 1024;
        int v39 = v28;
        __int16 v40 = 1024;
        int v41 = v29;
        __int16 v42 = 2048;
        double v43 = a2;
        __int16 v44 = 2048;
        double v45 = a3;
        __int16 v46 = 2048;
        double v47 = v8;
        __int16 v48 = 1024;
        BOOL v49 = v16;
        __int16 v50 = 1024;
        int v51 = v30;
        __int16 v52 = 1024;
        int v53 = v31;
        _os_log_debug_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Rate Monitor: head index %d, tail index %d, dataSample1 %f, dataSample2 %f, tierTolerance %f, isAbnormalData %d, _abnormalCounter %d, isExceedingThreshold %d", (uint8_t *)&v32, 0x58u);
      }
    }
    if (v18 > v19)
    {
      *(void *)(a1 + 48) = 0;
      uint64_t result = 1;
      *(_DWORD *)(a1 + 56) = 0;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t VCCVOExtensionUtils_FillCVOExtension(char a1, char a2, uint64_t a3)
{
  *(_DWORD *)a3 = 16834238;
  *(unsigned char *)(a3 + 4) = 16 * a2;
  uint64_t result = videoOrientationForCameraStatusBits(a1);
  *(unsigned char *)(a3 + 5) = result;
  *(_WORD *)(a3 + 6) = 0;
  return result;
}

uint64_t VCCVOExtensionUtils_CameraStatusBitsFromCVOExtension(unsigned int a1, unsigned __int16 *a2, unsigned int a3, unsigned char *a4)
{
  uint64_t result = 0;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a2 && a3 >= 4)
  {
    unsigned int v6 = *a2;
    if (v6 == 57022)
    {
      if (a3 >= 5)
      {
        unint64_t v7 = 4;
        do
        {
          unsigned int v8 = *((unsigned __int8 *)a2 + v7);
          if (v8 >> 4 == 15) {
            break;
          }
          unint64_t v9 = v7 + 1;
          if (v8 >= 0x10)
          {
            unint64_t v7 = (v8 & 0xF) + v9 + 1;
            if (v7 > a3) {
              break;
            }
            if (v8 >> 4 == a1)
            {
              *a4 = *((unsigned char *)a2 + v9) & 8 | (0x81828083 >> (8 * (*((unsigned char *)a2 + v9) & 3)));
              return 1;
            }
          }
          else
          {
            ++v7;
          }
        }
        while (v7 < a3);
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
        return 0;
      }
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      BOOL v12 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v12) {
        return result;
      }
      int v19 = 136315906;
      uint64_t v20 = v10;
      __int16 v21 = 2080;
      v22 = "VCCVOExtensionUtils_CameraStatusBitsFromCVOExtension";
      __int16 v23 = 1024;
      int v24 = 118;
      __int16 v25 = 1024;
      unsigned int v26 = a1;
      int v13 = " [%s] %s:%d CVO extension ID not found %d";
      uint64_t v14 = v11;
      uint32_t v15 = 34;
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
        return 0;
      }
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      int v17 = *MEMORY[0x1E4F47A50];
      BOOL v18 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v18) {
        return result;
      }
      int v19 = 136316162;
      uint64_t v20 = v16;
      __int16 v21 = 2080;
      v22 = "VCCVOExtensionUtils_CameraStatusBitsFromCVOExtension";
      __int16 v23 = 1024;
      int v24 = 115;
      __int16 v25 = 1024;
      unsigned int v26 = __rev16(v6);
      __int16 v27 = 1024;
      int v28 = 48862;
      int v13 = " [%s] %s:%d Invalid header extension profile 0x%x (should be 0x%x)";
      uint64_t v14 = v17;
      uint32_t v15 = 40;
    }
    _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v19, v15);
    return 0;
  }
  return result;
}

void VCAudioStreamTransport_SubmitWRMReportWithJitterBufferMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(__src, 0, sizeof(__src));
  WRMIncrementTime(a1);
  uint64_t v8 = 0;
  RTPGetJitter(*(void *)(a1 + 264), (_DWORD *)(a1 + 52), (_DWORD *)&v8 + 1, &v8);
  RTPGetPacketSent(*(void *)(a1 + 264), (_DWORD *)(a1 + 196));
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(void *)(a1 + 72) = *(void *)(a2 + 16);
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 80) = (unint64_t)((double)*(unint64_t *)(a2 + 24) * 1000.0 / (double)v4);
  *(_DWORD *)(a1 + 192) = v4;
  if (WRMGenerateReport((unsigned __int8 *)a1, (uint64_t)__src))
  {
    global_queue = dispatch_get_global_queue(2, 0);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __VCAudioStreamTransport_SubmitWRMReportWithJitterBufferMetrics_block_invoke;
    v6[3] = &__block_descriptor_344_e5_v8__0l;
    v6[4] = a1;
    memcpy(v7, __src, sizeof(v7));
    dispatch_async(global_queue, v6);
  }
}

void WRMReportMetricsCallback_0(void *a1, uint64_t a2)
{
  unsigned int v4 = (void *)MEMORY[0x1E4E589F0]();
  [a1 reportWRMMetrics:a2];
}

double AudioPacket_initNewPacket(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 12);
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_WORD *)(a2 + 14) = *(_WORD *)(a1 + 14);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(_DWORD *)(a2 + 1816) = *(_DWORD *)(a1 + 1816);
  *(void *)(a2 + 1824) = *(void *)(a1 + 1824);
  *(_DWORD *)(a2 + 1832) = *(_DWORD *)(a1 + 1832);
  *(void *)(a2 + 1840) = *(void *)(a1 + 1840);
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(unsigned char *)(a2 + 1856) = *(unsigned char *)(a1 + 1856);
  *(_WORD *)(a2 + 1858) = *(_WORD *)(a1 + 1858);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 16);
  return result;
}

void _VCSystemAudioCapture_destroyAudioQueueBuffers(AudioQueueRef *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (os_log_t *)MEMORY[0x1E4F47A50];
  for (uint64_t i = 6; i != 16; ++i)
  {
    OSStatus v4 = AudioQueueFreeBuffer(*a1, (AudioQueueBufferRef)a1[i]);
    if (v4)
    {
      OSStatus v5 = v4;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        unint64_t v7 = *v2;
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          uint64_t v9 = v6;
          __int16 v10 = 2080;
          uint64_t v11 = "_VCSystemAudioCapture_destroyAudioQueueBuffers";
          __int16 v12 = 1024;
          int v13 = 576;
          __int16 v14 = 1024;
          OSStatus v15 = v5;
          _os_log_error_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioQueueFreeBuffer error: %i", buf, 0x22u);
        }
      }
    }
  }
}

void _VCSystemAudioCapture_handleInputBufferFromAudioHALPlugin(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
}

void _VCSystemAudioCapture_handleInputBuffer(uint64_t a1, OpaqueAudioQueue *a2, AudioQueueBuffer *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    int v13 = *MEMORY[0x1E4F47A50];
    __int16 v14 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "_VCSystemAudioCapture_handleInputBuffer";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 422;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = a6;
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d input sample count = %d", buf, 0x22u);
      }
    }
    else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      _VCSystemAudioCapture_handleInputBuffer_cold_13();
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v15 = VRTraceErrorLogLevelToCSTR();
    uint64_t v16 = *MEMORY[0x1E4F47A50];
    int v17 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = (int)*(double *)a5;
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "_VCSystemAudioCapture_handleInputBuffer";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 423;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v18;
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d input timestamp %d", buf, 0x22u);
      }
    }
    else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      _VCSystemAudioCapture_handleInputBuffer_cold_12();
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v19 = VRTraceErrorLogLevelToCSTR();
    uint64_t v20 = *MEMORY[0x1E4F47A50];
    __int16 v21 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        double v22 = *(double *)(a1 + 392) * (double)*(unint64_t *)(a5 + 8);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "_VCSystemAudioCapture_handleInputBuffer";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 424;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v22;
        _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d input hostTime %f", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      double v96 = *(double *)(a1 + 392) * (double)*(unint64_t *)(a5 + 8);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "_VCSystemAudioCapture_handleInputBuffer";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = 424;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = v96;
      _os_log_debug_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEBUG, " [%s] %s:%d input hostTime %f", buf, 0x26u);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    goto LABEL_25;
  }
  uint64_t v23 = VRTraceErrorLogLevelToCSTR();
  int v24 = *MEMORY[0x1E4F47A50];
  __int16 v25 = *MEMORY[0x1E4F47A50];
  if (!*MEMORY[0x1E4F47A40])
  {
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      _VCSystemAudioCapture_handleInputBuffer_cold_11();
      if (!a1) {
        goto LABEL_116;
      }
      goto LABEL_26;
    }
LABEL_25:
    if (!a1) {
      goto LABEL_116;
    }
    goto LABEL_26;
  }
  if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_25;
  }
  int v26 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)buf = 136315906;
  *(void *)&uint8_t buf[4] = v23;
  *(_WORD *)&buf[12] = 2080;
  *(void *)&buf[14] = "_VCSystemAudioCapture_handleInputBuffer";
  *(_WORD *)&buf[22] = 1024;
  *(_DWORD *)&buf[24] = 425;
  *(_WORD *)&buf[28] = 1024;
  *(_DWORD *)&buf[30] = v26;
  _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d input audio bytes %d", buf, 0x22u);
  if (!a1)
  {
LABEL_116:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
    {
      VRTraceErrorLogLevelToCSTR();
      if (VRTraceIsOSFaultDisabled())
      {
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCSystemAudioCapture_handleInputBuffer_cold_1();
        }
      }
      else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
      {
        _VCSystemAudioCapture_handleInputBuffer_cold_2();
      }
    }
    return;
  }
LABEL_26:
  if (*(_DWORD *)(*(void *)(a1 + 232) + 132))
  {
    uint64_t v134 = a4;
    double v27 = *(double *)(a1 + 264);
    double v28 = *(double *)(a1 + 392) * (double)*(unint64_t *)(a5 + 8);
    unsigned int v29 = vcvtpd_u64_f64(v27 * (v28 - *(double *)(a1 + 416)));
    uint64_t v133 = a1;
    if (*(_DWORD *)(a1 + 344) >= a6)
    {
      if (*(unsigned char *)(a1 + 368))
      {
        if (v28 > ((double)a6 / v27 + *(double *)(a1 + 408)) * 1.2 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v37 = VRTraceErrorLogLevelToCSTR();
          __int16 v38 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            uint64_t v128 = *(void *)(a1 + 408);
            *(_DWORD *)buf = 136316418;
            *(void *)&uint8_t buf[4] = v37;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "_VCSystemAudioCapture_handleInputBuffer";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 452;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = a6;
            *(_WORD *)&buf[34] = 2048;
            *(void *)&buf[36] = v128;
            *(_WORD *)&buf[44] = 2048;
            *(double *)&buf[46] = v28;
            _os_log_error_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_ERROR, " [%s] %s:%d inputSamples=%d for host time jump from time=%f to time=%f seconds", buf, 0x36u);
          }
        }
        *(_DWORD *)(a1 + 400) = v29;
        uint64_t v39 = a1;
      }
      else
      {
        *(unsigned char *)(a1 + 368) = 1;
        uint64_t v39 = a1;
        if (a2)
        {
          memset(buf, 0, 40);
          double outData = 0.0;
          UInt32 ioDataSize = 40;
          if (!AudioQueueGetProperty(a2, 0x61716674u, buf, &ioDataSize))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v40 = VRTraceErrorLogLevelToCSTR();
              int v41 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                float v42 = *(double *)buf;
                *(_DWORD *)v139 = 136315906;
                uint64_t v140 = v40;
                __int16 v141 = 2080;
                v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
                __int16 v143 = 1024;
                int v144 = 590;
                __int16 v145 = 2048;
                double v146 = v42;
                _os_log_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: %.1f mSampleRate", v139, 0x26u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v43 = VRTraceErrorLogLevelToCSTR();
              __int16 v44 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v139 = 136315906;
                uint64_t v140 = v43;
                __int16 v141 = 2080;
                v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
                __int16 v143 = 1024;
                int v144 = 591;
                __int16 v145 = 1024;
                LODWORD(v146) = *(_DWORD *)&buf[8];
                _os_log_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: %d mFormatID", v139, 0x22u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v45 = VRTraceErrorLogLevelToCSTR();
              __int16 v46 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v139 = 136315906;
                uint64_t v140 = v45;
                __int16 v141 = 2080;
                v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
                __int16 v143 = 1024;
                int v144 = 592;
                __int16 v145 = 1024;
                LODWORD(v146) = *(_DWORD *)&buf[12];
                _os_log_impl(&dword_1E1EA4000, v46, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: 0x%x mFormatFlags", v139, 0x22u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v47 = VRTraceErrorLogLevelToCSTR();
              __int16 v48 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v139 = 136315906;
                uint64_t v140 = v47;
                __int16 v141 = 2080;
                v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
                __int16 v143 = 1024;
                int v144 = 593;
                __int16 v145 = 1024;
                LODWORD(v146) = *(_DWORD *)&buf[16];
                _os_log_impl(&dword_1E1EA4000, v48, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: %d mBytesPerPacket", v139, 0x22u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v49 = VRTraceErrorLogLevelToCSTR();
              __int16 v50 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v139 = 136315906;
                uint64_t v140 = v49;
                __int16 v141 = 2080;
                v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
                __int16 v143 = 1024;
                int v144 = 594;
                __int16 v145 = 1024;
                LODWORD(v146) = *(_DWORD *)&buf[20];
                _os_log_impl(&dword_1E1EA4000, v50, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: %d mFramesPerPacket", v139, 0x22u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v51 = VRTraceErrorLogLevelToCSTR();
              __int16 v52 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v139 = 136315906;
                uint64_t v140 = v51;
                __int16 v141 = 2080;
                v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
                __int16 v143 = 1024;
                int v144 = 595;
                __int16 v145 = 1024;
                LODWORD(v146) = *(_DWORD *)&buf[24];
                _os_log_impl(&dword_1E1EA4000, v52, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: %d mBytesPerFrame", v139, 0x22u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v53 = VRTraceErrorLogLevelToCSTR();
              uint64_t v54 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v139 = 136315906;
                uint64_t v140 = v53;
                __int16 v141 = 2080;
                v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
                __int16 v143 = 1024;
                int v144 = 596;
                __int16 v145 = 1024;
                LODWORD(v146) = *(_DWORD *)&buf[28];
                _os_log_impl(&dword_1E1EA4000, v54, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: %d mChannelsPerFrame", v139, 0x22u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v55 = VRTraceErrorLogLevelToCSTR();
              __int16 v56 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v139 = 136315906;
                uint64_t v140 = v55;
                __int16 v141 = 2080;
                v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
                __int16 v143 = 1024;
                int v144 = 597;
                __int16 v145 = 1024;
                LODWORD(v146) = *(_DWORD *)&buf[32];
                _os_log_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: %d mBitsPerChannel", v139, 0x22u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v57 = VRTraceErrorLogLevelToCSTR();
              __int16 v58 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v139 = 136315906;
                uint64_t v140 = v57;
                __int16 v141 = 2080;
                v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
                __int16 v143 = 1024;
                int v144 = 598;
                __int16 v145 = 1024;
                LODWORD(v146) = *(_DWORD *)&buf[36];
                _os_log_impl(&dword_1E1EA4000, v58, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: 0x%x mReserved", v139, 0x22u);
              }
            }
          }
          UInt32 ioDataSize = 8;
          if (!AudioQueueGetProperty(a2, 0x61717372u, &outData, &ioDataSize)
            && (int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v59 = VRTraceErrorLogLevelToCSTR();
            __int16 v60 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              float v61 = outData;
              *(_DWORD *)v139 = 136315906;
              uint64_t v140 = v59;
              __int16 v141 = 2080;
              v142 = "_VCSystemAudioCapture_logInfoForFirstAudioBufferReceived";
              __int16 v143 = 1024;
              int v144 = 605;
              __int16 v145 = 2048;
              double v146 = v61;
              _os_log_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Audio Queue config: %.1f sample rate", v139, 0x26u);
            }
          }
        }
        *(_DWORD *)(a1 + 400) = 0;
        *(double *)(a1 + 416) = v28;
      }
      uint64_t v62 = v134;
      v130 = a3;
      *(double *)(v39 + 408) = v28;
      kdebug_trace();
      int v63 = *(_DWORD *)(v39 + 400);
      double v64 = *(double *)(v39 + 408);
      uint64_t v65 = *(void *)(v39 + 376);
      uint64_t v66 = v39 + 264;
      int SampleCount = VCAudioBufferList_GetSampleCount(v65);
      unsigned int v68 = SampleCount + a6;
      VCAudioBufferList_SetTime(v65, v63, v64);
      VCAudioBufferList_SetSampleCount(v65, v68);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v69 = VRTraceErrorLogLevelToCSTR();
        v70 = *MEMORY[0x1E4F47A50];
        v71 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = v69;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "_VCSystemAudioCapture_appendInputBuffer";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 520;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v68;
            _os_log_impl(&dword_1E1EA4000, v70, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d append sample count %d", buf, 0x22u);
          }
        }
        else if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          _VCSystemAudioCapture_handleInputBuffer_cold_10();
        }
      }
      v129 = a2;
      AudioBufferList = (_DWORD *)VCAudioBufferList_GetAudioBufferList(v65);
      unint64_t v73 = 0;
      _DWORD *AudioBufferList = 1;
      v74 = AudioBufferList + 4;
      uint64_t v75 = (*(_DWORD *)(v66 + 24) * SampleCount);
      do
      {
        *((_DWORD *)v74 - 2) = *(_DWORD *)(v66 + 28);
        *((_DWORD *)v74 - 1) = *(_DWORD *)(v62 + 8) + v75;
        if (v68 <= VCAudioBufferList_GetSampleCapacity(v65))
        {
          memcpy((void *)(*v74 + v75), *(const void **)v62, *(unsigned int *)(v62 + 8));
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
        {
          uint64_t v76 = VRTraceErrorLogLevelToCSTR();
          char IsOSFaultDisabled = VRTraceIsOSFaultDisabled();
          v78 = *MEMORY[0x1E4F47A50];
          if (IsOSFaultDisabled)
          {
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = v76;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "_VCSystemAudioCapture_appendInputBuffer";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = 530;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v68;
              _os_log_error_impl(&dword_1E1EA4000, v78, OS_LOG_TYPE_ERROR, " [%s] %s:%d can not copy %d audio samples", buf, 0x22u);
            }
          }
          else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = v76;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "_VCSystemAudioCapture_appendInputBuffer";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 530;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v68;
            _os_log_fault_impl(&dword_1E1EA4000, v78, OS_LOG_TYPE_FAULT, " [%s] %s:%d can not copy %d audio samples", buf, 0x22u);
          }
        }
        ++v73;
        v74 += 2;
        uint64_t v62 = v134;
      }
      while (v73 < *AudioBufferList);
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      a2 = v129;
      a3 = v130;
      if (ErrorLogLevelForModule >= 8)
      {
        uint64_t v80 = VRTraceErrorLogLevelToCSTR();
        v81 = *MEMORY[0x1E4F47A50];
        v82 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            int Timestamp = VCAudioBufferList_GetTimestamp(*(void *)(v133 + 376));
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = v80;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "_VCSystemAudioCapture_processInputBuffer";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 475;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = Timestamp;
            _os_log_impl(&dword_1E1EA4000, v81, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d append timestamp %d", buf, 0x22u);
          }
        }
        else if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
        {
          _VCSystemAudioCapture_handleInputBuffer_cold_9(v80, v133, v81);
        }
      }
      unsigned int v84 = VCAudioBufferList_GetSampleCount(*(void *)(v133 + 376));
      unsigned int v85 = *(_DWORD *)(v133 + 344);
      if (v85 <= v84)
      {
        uint64_t v86 = *(void *)(v133 + 384);
        uint64_t v87 = *(void *)(v133 + 376);
        uint64_t v88 = v133 + 264;
        VCAudioBufferList_Reset(v86);
        unsigned int v89 = VCAudioBufferList_GetSampleCount(v87) - v85;
        double v90 = VCAudioBufferList_GetHostTime(v87) - (double)v89 / *(double *)(v133 + 264);
        int v91 = VCAudioBufferList_GetTimestamp(v87);
        VCAudioBufferList_SetTime(v86, v91 - v89, v90);
        VCAudioBufferList_SetSampleCount(v86, v85);
        int v92 = *(_DWORD *)(v133 + 332);
        if ((*(unsigned char *)(v133 + 316) & 0x20) != 0 && v92 == 2)
        {
          if (VCAudioBufferList_GetSampleCapacity(v86) < v85
            && (int)VRTraceGetErrorLogLevelForModule() >= 2)
          {
            VRTraceErrorLogLevelToCSTR();
            if (VRTraceIsOSFaultDisabled())
            {
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCSystemAudioCapture_handleInputBuffer_cold_5();
              }
            }
            else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
            {
              _VCSystemAudioCapture_handleInputBuffer_cold_6();
            }
          }
          v97 = (_DWORD *)VCAudioBufferList_GetAudioBufferList(v86);
          uint64_t v132 = VCAudioBufferList_GetAudioBufferList(v87);
          int v99 = *(_DWORD *)(v133 + 328);
          unint64_t v98 = *(unsigned int *)(v133 + 332);
          _DWORD *v97 = v98;
          if (v98)
          {
            unint64_t v100 = 0;
            int v135 = v99 * v85;
            unsigned int v131 = v89;
            do
            {
              v101 = &v97[4 * v100];
              v101[2] = 1;
              v101[3] = v135;
              if (v85)
              {
                uint64_t v102 = v87;
                uint64_t v103 = v88;
                int v104 = 0;
                int v105 = 0;
                uint64_t v106 = *(void *)(v132 + 16) + (*(_DWORD *)(v133 + 328) * v100);
                uint64_t v107 = *((void *)v101 + 2);
                do
                {
                  memcpy((void *)(v107 + (*(_DWORD *)(v133 + 328) * v105++)), (const void *)(v106 + (v104 * *(_DWORD *)(v133 + 328))), *(unsigned int *)(v133 + 328));
                  v104 += 2;
                }
                while (v85 != v105);
                unint64_t v98 = *v97;
                uint64_t v88 = v103;
                uint64_t v87 = v102;
                unsigned int v89 = v131;
              }
              ++v100;
            }
            while (v100 < v98);
          }
        }
        else
        {
          uint64_t v93 = VCAudioBufferList_GetAudioBufferList(v86);
          uint64_t v94 = VCAudioBufferList_GetAudioBufferList(v87);
          size_t v95 = *(_DWORD *)(v133 + 328) * v85;
          *(_DWORD *)uint64_t v93 = 1;
          *(_DWORD *)(v93 + 8) = v92;
          *(_DWORD *)(v93 + 12) = v95;
          if (VCAudioBufferList_GetSampleCapacity(v86) >= v85)
          {
            memcpy(*(void **)(v93 + 16), *(const void **)(v94 + 16), v95);
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
          {
            VRTraceErrorLogLevelToCSTR();
            if (VRTraceIsOSFaultDisabled())
            {
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCSystemAudioCapture_handleInputBuffer_cold_7();
              }
            }
            else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
            {
              _VCSystemAudioCapture_handleInputBuffer_cold_8();
            }
          }
        }
        uint64_t v108 = VCAudioBufferList_GetAudioBufferList(v87);
        VCAudioBufferList_SetSampleCount(v87, v89);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v109 = VRTraceErrorLogLevelToCSTR();
          v110 = *MEMORY[0x1E4F47A50];
          v111 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = v109;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "_VCSystemAudioCapture_UpdateAppendBuffer";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = 540;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v89;
              _os_log_impl(&dword_1E1EA4000, v110, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d append sample count %d", buf, 0x22u);
            }
          }
          else if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
          {
            _VCSystemAudioCapture_handleInputBuffer_cold_4();
          }
        }
        unsigned int v112 = 0;
        int v113 = *(_DWORD *)(v88 + 24);
        *(_DWORD *)uint64_t v108 = 1;
        uint64_t v114 = v113 * v85;
        size_t v115 = v113 * v89;
        do
        {
          int v116 = *(_DWORD *)(v108 + 12) - v114;
          *(_DWORD *)(v108 + 8) = *(_DWORD *)(v88 + 28);
          *(_DWORD *)(v108 + 12) = v116;
          if (VCAudioBufferList_GetSampleCapacity(v87) >= v89)
          {
            memcpy(*(void **)(v108 + 16), (const void *)(*(void *)(v108 + 16) + v114), v115);
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
          {
            uint64_t v117 = VRTraceErrorLogLevelToCSTR();
            char v118 = VRTraceIsOSFaultDisabled();
            v119 = *MEMORY[0x1E4F47A50];
            if (v118)
            {
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = v117;
                *(_WORD *)&buf[12] = 2080;
                *(void *)&buf[14] = "_VCSystemAudioCapture_UpdateAppendBuffer";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = 550;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v89;
                _os_log_error_impl(&dword_1E1EA4000, v119, OS_LOG_TYPE_ERROR, " [%s] %s:%d can not copy %d audio samples", buf, 0x22u);
              }
            }
            else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = v117;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "_VCSystemAudioCapture_UpdateAppendBuffer";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = 550;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v89;
              _os_log_fault_impl(&dword_1E1EA4000, v119, OS_LOG_TYPE_FAULT, " [%s] %s:%d can not copy %d audio samples", buf, 0x22u);
            }
          }
          ++v112;
        }
        while (v112 < *(_DWORD *)v108);
        uint64_t v120 = *(void *)(v133 + 432);
        if (v120) {
          VCCannedAudioInjector_InjectSamples(v120, *(void *)(v133 + 384), 0, 0);
        }
        int v121 = VCAudioBufferList_GetTimestamp(*(void *)(v133 + 384));
        int v122 = VCAudioBufferList_GetSampleCount(*(void *)(v133 + 384));
        double HostTime = VCAudioBufferList_GetHostTime(*(void *)(v133 + 384));
        a3 = v130;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v124 = VRTraceErrorLogLevelToCSTR();
          v125 = *MEMORY[0x1E4F47A50];
          v126 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136316418;
              *(void *)&uint8_t buf[4] = v124;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "_VCSystemAudioCapture_processInputBuffer";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = 490;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v121;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v122;
              *(_WORD *)&buf[40] = 2048;
              *(double *)&buf[42] = HostTime;
              _os_log_impl(&dword_1E1EA4000, v125, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d outputTimestamp=%d, outputSampleCount=%d, outputHostTime=%f", buf, 0x32u);
            }
          }
          else if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136316418;
            *(void *)&uint8_t buf[4] = v124;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "_VCSystemAudioCapture_processInputBuffer";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 490;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v121;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v122;
            *(_WORD *)&buf[40] = 2048;
            *(double *)&buf[42] = HostTime;
            _os_log_debug_impl(&dword_1E1EA4000, v125, OS_LOG_TYPE_DEBUG, " [%s] %s:%d outputTimestamp=%d, outputSampleCount=%d, outputHostTime=%f", buf, 0x32u);
          }
        }
        kdebug_trace();
        (*(void (**)(void, void))(v133 + 360))(*(void *)(v133 + 352), *(void *)(v133 + 384));
        a2 = v129;
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v30 = VRTraceErrorLogLevelToCSTR();
        int v31 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = *(void *)(a1 + 408);
          *(_DWORD *)buf = 136316418;
          *(void *)&uint8_t buf[4] = v30;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "_VCSystemAudioCapture_handleInputBuffer";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 462;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = a6;
          *(_WORD *)&buf[34] = 2048;
          *(void *)&buf[36] = v32;
          *(_WORD *)&buf[44] = 2048;
          *(double *)&buf[46] = v28;
          _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d discarding inputSamples=%d between time=%f and time=%f seconds", buf, 0x36u);
        }
      }
      *(_DWORD *)(a1 + 400) = v29;
      *(double *)(a1 + 408) = v28;
    }
    if (a2)
    {
      if (AudioQueueEnqueueBuffer(a2, a3, 0, 0))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v127 = VRTraceErrorLogLevelToCSTR();
          __int16 v34 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = v127;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "_VCSystemAudioCapture_handleInputBuffer";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 468;
            __int16 v36 = " [%s] %s:%d Could not enqueue audio buffer";
LABEL_164:
            _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, v36, buf, 0x1Cu);
          }
        }
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return;
    }
    uint64_t v33 = VRTraceErrorLogLevelToCSTR();
    __int16 v34 = *MEMORY[0x1E4F47A50];
    unint64_t v35 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v33;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "_VCSystemAudioCapture_handleInputBuffer";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = 433;
      __int16 v36 = " [%s] %s:%d stopped processing audio packets";
      goto LABEL_164;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
      _VCSystemAudioCapture_handleInputBuffer_cold_3();
    }
  }
}

void VCVideoStream_DidReceiveSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    VCMediaStream_Lock(a1);
    *(double *)(a1 + 1024) = micro();
    if (a3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        unint64_t v7 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.value) = 136315906;
          *(CMTimeValue *)((char *)&buf.value + 4) = v6;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "VCVideoStream_DidReceiveSampleBuffer";
          HIWORD(buf.epoch) = 1024;
          int v14 = 3328;
          __int16 v15 = 2048;
          uint64_t v16 = a1;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCVideoStream [%s] %s:%d VCVideoStream[%p] received first remote frame", (uint8_t *)&buf, 0x26u);
        }
      }
      _VCVideoStream_ReportingVideoStreamEventWithVideoAttributesAndStreamID(a1, 212, 0, 0);
      _VCVideoStream_ReportingAlgosVideoStreamEvent((void *)a1);
      kdebug_trace();
      uint64_t v8 = VCRemoteVideoManager_DefaultManager();
      VCRemoteVideoManager_DidReceiveFirstRemoteFrameForStreamToken(v8, *(void *)(a1 + 616));
    }
    if (!*(unsigned char *)(a1 + 938))
    {
      *(unsigned char *)(a1 + 938) = 1;
      memset(&buf, 170, sizeof(buf));
      CMSampleBufferGetPresentationTimeStamp(&buf, a2);
      uint64_t v9 = *(NSObject **)(a1 + 168);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = __VCVideoStream_DidReceiveSampleBuffer_block_invoke;
      v11[3] = &unk_1E6DB6ED8;
      v11[4] = a1;
      CMTime v12 = buf;
      dispatch_async(v9, v11);
    }
    uint64_t v10 = *(void *)(a1 + 840);
    if (v10)
    {
      if ((VCImageQueue_EnqueueSampleBuffer(v10, a2) & 1) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCVideoStream_DidReceiveSampleBuffer_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVideoStream_DidReceiveSampleBuffer_cold_2();
      }
    }
    VCMediaStream_Unlock(a1);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoStream_DidReceiveSampleBuffer_cold_1();
    }
  }
}

BOOL _VCVideoStream_DidReceiveRemoteFrame(uint64_t a1, __CVBuffer *a2, long long *a3, void *a4, void *a5, int a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    VCMediaStream_Lock(a1);
    *(double *)(a1 + 1024) = micro();
    if (!*(void *)(a1 + 840) && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCVideoStream_DidReceiveRemoteFrame_cold_2();
      }
    }
    if (CVBufferGetAttachment(a2, @"HIDTimeStamp", 0))
    {
      *(double *)&uint64_t v12 = COERCE_DOUBLE(FigCFNumberGetUInt64());
      double valuePtr = (double)FigHostTimeToNanoseconds() / 1000000000.0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        int v14 = *MEMORY[0x1E4F47A50];
        __int16 v15 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.value) = 136316418;
            *(CMTimeValue *)((char *)&buf.value + 4) = v13;
            LOWORD(buf.flags) = 2080;
            *(void *)((char *)&buf.flags + 2) = "_VCVideoStream_DidReceiveRemoteFrame";
            HIWORD(buf.epoch) = 1024;
            int v45 = 3409;
            __int16 v46 = 2048;
            uint64_t v47 = v12;
            __int16 v48 = 2048;
            Float64 v49 = *(double *)&v12;
            __int16 v50 = 2048;
            double v51 = valuePtr;
            _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VCVideoStream [%s] %s:%d Attaching origin HID event timestamp=0x%llx %lld %fs", (uint8_t *)&buf, 0x3Au);
          }
        }
        else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.value) = 136316418;
          *(CMTimeValue *)((char *)&buf.value + 4) = v13;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "_VCVideoStream_DidReceiveRemoteFrame";
          HIWORD(buf.epoch) = 1024;
          int v45 = 3409;
          __int16 v46 = 2048;
          uint64_t v47 = v12;
          __int16 v48 = 2048;
          Float64 v49 = *(double *)&v12;
          __int16 v50 = 2048;
          double v51 = valuePtr;
          _os_log_debug_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEBUG, "VCVideoStream [%s] %s:%d Attaching origin HID event timestamp=0x%llx %lld %fs", (uint8_t *)&buf, 0x3Au);
        }
      }
      CFNumberRef v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
      CVBufferSetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F32F20], v16, kCVAttachmentMode_ShouldPropagate);
      if (v16) {
        CFRelease(v16);
      }
    }
    if (*(double *)&a4 != 0.0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v17 = VRTraceErrorLogLevelToCSTR();
        int v18 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.value) = 136316162;
          *(CMTimeValue *)((char *)&buf.value + 4) = v17;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "_VCVideoStream_DidReceiveRemoteFrame";
          HIWORD(buf.epoch) = 1024;
          int v45 = 3417;
          __int16 v46 = 2048;
          uint64_t v47 = a1;
          __int16 v48 = 2112;
          Float64 v49 = *(double *)&a4;
          _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, "VCVideoStream [%s] %s:%d VCVideoStream[%p] remoteVideoAttributes:%@", (uint8_t *)&buf, 0x30u);
        }
      }
      if (*(void *)(a1 + 840))
      {
        CFMutableDictionaryRef EncodedCFDictionary = VideoAttributes_CreateEncodedCFDictionary(a4);
        VCImageQueue_EnqueueAttributes(*(void *)(a1 + 840), EncodedCFDictionary);
        if (EncodedCFDictionary) {
          CFRelease(EncodedCFDictionary);
        }
      }
      long long v41 = *a3;
      uint64_t v42 = *((void *)a3 + 2);
      [a4 setFramePresentationTime:&v41];
      uint64_t v20 = VCRemoteVideoManager_DefaultManager();
      VCRemoteVideoManager_RemoteVideoAttributesDidChange(v20, (uint64_t)a4, *(void *)(a1 + 616));
      _VCVideoStream_ReportingVideoStreamEventWithVideoAttributesAndStreamID(a1, 211, a4, 0);
    }
    if (*(double *)&a5 == 0.0)
    {
      if (*(void *)(a1 + 1176)) {
        _VCVideoStream_NotifyVideoStreamDelegate(a1, 0);
      }
    }
    else
    {
      _VCVideoStream_NotifyVideoStreamDelegate(a1, a5);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        double v22 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.value) = 136316162;
          *(CMTimeValue *)((char *)&buf.value + 4) = v21;
          LOWORD(buf.flags) = 2080;
          *(void *)((char *)&buf.flags + 2) = "_VCVideoStream_DidReceiveRemoteFrame";
          HIWORD(buf.epoch) = 1024;
          int v45 = 3433;
          __int16 v46 = 2048;
          uint64_t v47 = a1;
          __int16 v48 = 2112;
          Float64 v49 = *(double *)&a5;
          _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "VCVideoStream [%s] %s:%d VCVideoStream[%p] remoteScreenAttributes=%@", (uint8_t *)&buf, 0x30u);
        }
      }
      uint64_t v23 = VCRemoteVideoManager_DefaultManager();
      VCRemoteVideoManager_RemoteScreenAttributesDidChange(v23, (uint64_t)a5, *(void *)(a1 + 616));
    }
    uint64_t v24 = *(void *)(a1 + 840);
    CMTime buf = *(CMTime *)a3;
    if ((VCImageQueue_EnqueueFrame(v24, a2, &buf) & 1) == 0
      && (int)VRTraceGetErrorLogLevelForModule() >= 3
      && (VRTraceErrorLogLevelToCSTR(), os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
    {
      _VCVideoStream_DidReceiveRemoteFrame_cold_1();
      if (a6)
      {
LABEL_34:
        if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
        {
          uint64_t v25 = VRTraceErrorLogLevelToCSTR();
          int v26 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            CMTime buf = *(CMTime *)a3;
            Float64 Seconds = CMTimeGetSeconds(&buf);
            LODWORD(buf.value) = 136316162;
            *(CMTimeValue *)((char *)&buf.value + 4) = v25;
            LOWORD(buf.flags) = 2080;
            *(void *)((char *)&buf.flags + 2) = "_VCVideoStream_DidReceiveRemoteFrame";
            HIWORD(buf.epoch) = 1024;
            int v45 = 3444;
            __int16 v46 = 2048;
            uint64_t v47 = a1;
            __int16 v48 = 2048;
            Float64 v49 = Seconds;
            _os_log_impl(&dword_1E1EA4000, v26, OS_LOG_TYPE_DEFAULT, "VCVideoStream [%s] %s:%d VCVideoStream[%p] received first remote frame frameTime=%f", (uint8_t *)&buf, 0x30u);
          }
        }
        _VCVideoStream_ReportingVideoStreamEventWithVideoAttributesAndStreamID(a1, 212, 0, 0);
        _VCVideoStream_ReportingAlgosVideoStreamEvent((void *)a1);
        kdebug_trace();
        uint64_t v28 = VCRemoteVideoManager_DefaultManager();
        VCRemoteVideoManager_DidReceiveFirstRemoteFrameForStreamToken(v28, *(void *)(a1 + 616));
      }
    }
    else if (a6)
    {
      goto LABEL_34;
    }
    CFNumberRef Attachment = (const __CFNumber *)CVBufferGetAttachment(a2, @"FramePriority", 0);
    if (Attachment)
    {
      LOBYTE(buf.value) = -86;
      CFNumberGetValue(Attachment, kCFNumberCharType, &buf);
      char value = buf.value;
      if (*(unsigned __int8 *)(a1 + 906) != LOBYTE(buf.value))
      {
        *(unsigned char *)(a1 + 906) = buf.value;
        int v31 = *(NSObject **)(a1 + 168);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        void block[2] = ___VCVideoStream_DidReceiveRemoteFrame_block_invoke;
        block[3] = &unk_1E6DB3DF0;
        block[4] = a1;
        char v40 = value;
        dispatch_async(v31, block);
      }
    }
    if (*(void *)(a1 + 272))
    {
      CMTime buf = *(CMTime *)a3;
      CMSampleBufferRef SampleBufferWithPixelBuffer = createSampleBufferWithPixelBuffer(a2, (long long *)&buf.value);
      uint64_t v33 = (micro() * 1000.0);
      [*(id *)(a1 + 272) stream:a1 addVideoSampleBuffer:SampleBufferWithPixelBuffer cameraStatusBits:VCCameraStatusBitsFromVideoAttributes(a4) timestamp:v33];
      FigSampleBufferRelease();
    }
    _VCVideoStream_CacheRemoteVideoFrame(a1, a2);
    if (!*(unsigned char *)(a1 + 938))
    {
      *(unsigned char *)(a1 + 938) = 1;
      __int16 v34 = *(NSObject **)(a1 + 168);
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 3221225472;
      v36[2] = ___VCVideoStream_DidReceiveRemoteFrame_block_invoke_2;
      v36[3] = &unk_1E6DB6ED8;
      v36[4] = a1;
      long long v37 = *a3;
      uint64_t v38 = *((void *)a3 + 2);
      dispatch_async(v34, v36);
      [*(id *)(a1 + 744) stopTimingForKey:19];
      [(id)a1 reportStreamPerfTimings];
    }
    VCMediaStream_Unlock(a1);
    return a1 != 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCVideoStream_DidReceiveRemoteFrame_cold_3();
    }
  }
  return a1 != 0;
}

void VCVideoStream_ProcessConvertedFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if ([(id)a1 state] == 2 || *(void *)(a1 + 808) == 2)
  {
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 940));
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 848);
      uint64_t v10 = *(unsigned __int8 *)(a4 + 16);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)a3;
      *(void *)&v19[16] = *(void *)(a3 + 16);
      VCVideoTransmitter_EnqueueVideoFrame(v9, a2, (long long *)v19, v10);
    }
    return;
  }
  if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      uint64_t v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v19 = 136315650;
        *(void *)&v19[4] = v12;
        *(_WORD *)&v19[12] = 2080;
        *(void *)&v19[14] = "VCVideoStream_ProcessConvertedFrame";
        *(_WORD *)&v19[22] = 1024;
        int v20 = 3636;
        int v14 = "VCVideoStream [%s] %s:%d Can't enqueue, VideoStream is not running yet";
        __int16 v15 = v13;
        uint32_t v16 = 28;
LABEL_16:
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, v14, v19, v16);
      }
    }
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      uint64_t v11 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
    }
    else {
      uint64_t v11 = &stru_1F3D3E450;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      int v18 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v19 = 136316162;
        *(void *)&v19[4] = v17;
        *(_WORD *)&v19[12] = 2080;
        *(void *)&v19[14] = "VCVideoStream_ProcessConvertedFrame";
        *(_WORD *)&v19[22] = 1024;
        int v20 = 3636;
        __int16 v21 = 2112;
        double v22 = v11;
        __int16 v23 = 2048;
        uint64_t v24 = a1;
        int v14 = "VCVideoStream [%s] %s:%d %@(%p) Can't enqueue, VideoStream is not running yet";
        __int16 v15 = v18;
        uint32_t v16 = 48;
        goto LABEL_16;
      }
    }
  }
}

void _VCVideoStreamNWConnectionNotificationCallback(void *a1, uint64_t a2)
{
  if (a1)
  {
    [a1 handleNWConnectionNotification:a2];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCVideoStreamNWConnectionNotificationCallback_cold_1();
    }
  }
}

void _VCVideoStreamNWConnectionPacketEventCallback(void *a1, uint64_t a2)
{
  if (a1)
  {
    [a1 handleNWConnectionPacketEvent:a2 eventType:1];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCVideoStreamNWConnectionPacketEventCallback_cold_1();
    }
  }
}

uint64_t _VCVideoStreamVTPNotificationCallback(int a1, uint64_t a2, uint64_t a3)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  v9[0] = a2;
  OSStatus v5 = (void *)MEMORY[0x1E4E56580](v9);
  uint64_t v6 = v5;
  if (a1 != 1)
  {
    if (a1 == 2)
    {
      [v5 handleVTPSendFailedWithData:a3];
      uint64_t v7 = 0;
      if (!v6) {
        return v7;
      }
      goto LABEL_9;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCVideoStreamVTPNotificationCallback_cold_1();
      }
    }
  }
  uint64_t v7 = 0xFFFFFFFFLL;
  if (v6) {
LABEL_9:
  }
    CFRelease(v6);
  return v7;
}

uint64_t VCVideoStream_SetFECRatio(uint64_t a1, double a2)
{
  *(double *)(a1 + 944) = a2;
  return VCVideoTransmitter_SetFECRatio(*(void *)(a1 + 848));
}

uint64_t VCVideoStream_SetMediaQueueSize(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 968) = a2;
  return VCVideoTransmitter_SetMediaQueueSize(*(void *)(a1 + 848));
}

uint64_t _VCVideoStream_GetReportingClientType(void *a1)
{
  switch(objc_msgSend((id)objc_msgSend(a1, "defaultStreamConfig"), "type"))
  {
    case 0:
      uint64_t result = 3;
      break;
    case 1:
      uint64_t result = 8;
      break;
    case 2:
      uint64_t result = 9;
      break;
    case 3:
      uint64_t result = 6;
      break;
    case 4:
      uint64_t result = [a1 remoteCameraReportingClientType];
      break;
    case 5:
    case 6:
      uint64_t result = [a1 screenSharingReportingClientType];
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

void _VCVideoStream_CacheRemoteVideoFrame(uint64_t a1, CVPixelBufferRef texture)
{
  block[6] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 939))
  {
    CVPixelBufferRetain(texture);
    OSStatus v4 = *(NSObject **)(a1 + 816);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    void block[2] = ___VCVideoStream_CacheRemoteVideoFrame_block_invoke;
    block[3] = &unk_1E6DB4568;
    block[4] = a1;
    void block[5] = texture;
    dispatch_async(v4, block);
  }
}

void _VCVideoStream_ReportingAlgosVideoStreamEvent(void *a1)
{
  int ReportingClientType = _VCVideoStream_GetReportingClientType(a1);
  unint64_t v3 = (void *)[a1 defaultStreamConfig];
  if (ReportingClientType == 6)
  {
    OSStatus v4 = v3;
    if ([v3 direction] == 2)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryAddValue(Mutable, @"VCSPUUID", (const void *)objc_msgSend((id)objc_msgSend(v4, "multiwayConfig"), "participantId"));
      reportingGenericEvent();
      if (Mutable)
      {
        CFRelease(Mutable);
      }
    }
  }
}

uint64_t VCVideoStream_SetAudioSampleTime(uint64_t a1, int a2, double a3)
{
  return VCVideoTransmitter_SetAudioSampleTime(*(void *)(a1 + 848), a2, a3);
}

void _VCVideoStream_ReportingVideoStreamEventWithVideoAttributesAndStreamID(uint64_t a1, int a2, void *a3, const void *a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v10 = Mutable;
  switch(a2)
  {
    case 201:
      uint64_t v11 = (void *)[(id)a1 defaultStreamConfig];
      uint64_t v12 = *(const void **)(a1 + 280);
      if (v12)
      {
        CFDictionaryAddValue(v10, @"CallID", v12);
      }
      else if (*(void *)(a1 + 808) != 3 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCVideoStream_ReportingVideoStreamEventWithVideoAttributesAndStreamID_cold_1();
        }
      }
      __int16 v23 = (const void *)[NSNumber numberWithLong:time(0)];
      CFDictionaryAddValue(v10, @"Time", v23);
      uint64_t v24 = *(void **)(a1 + 280);
      if (v24)
      {
        CFStringRef v25 = CFStringCreateWithFormat(v8, 0, @"%s", objc_msgSend((id)objc_msgSend(v24, "description"), "UTF8String"));
        CFDictionaryAddValue(v10, @"VCVSUUID", v25);
        CFRelease(v25);
        CFStringRef v26 = CFStringCreateWithFormat(v8, 0, @"%@:%d", objc_msgSend((id)objc_msgSend(v11, "localAddress"), "ip"), objc_msgSend((id)objc_msgSend(v11, "localAddress"), "port"));
        CFDictionaryAddValue(v10, @"VCVSLocalIPPort", v26);
        CFRelease(v26);
        CFStringRef v27 = CFStringCreateWithFormat(v8, 0, @"%@:%d", objc_msgSend((id)objc_msgSend(v11, "remoteAddress"), "ip"), objc_msgSend((id)objc_msgSend(v11, "remoteAddress"), "port"));
        CFDictionaryAddValue(v10, @"VCVSRemoteIPPort", v27);
        CFRelease(v27);
      }
      uint64_t v28 = *(void **)(a1 + 248);
      if (v28)
      {
        CFStringRef v29 = CFStringCreateWithFormat(v8, 0, @"%s", objc_msgSend((id)objc_msgSend(v28, "description"), "UTF8String"));
        CFDictionaryAddValue(v10, @"VCVSIDSDestination", v29);
        CFRelease(v29);
      }
      CFStringRef v30 = CFStringCreateWithFormat(v8, 0, @"%ld", *(void *)(a1 + 616));
      CFDictionaryAddValue(v10, @"VCVSStreamToken", v30);
      CFRelease(v30);
      CFDictionaryAddValue(v10, @"VCMSDirection", (const void *)objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v11, "direction")));
      CFAllocatorRef alloc = v8;
      CFStringRef v31 = CFStringCreateWithFormat(v8, 0, @"%u", [v11 isRateAdaptationEnabled]);
      CFDictionaryAddValue(v10, @"VCVSRateAdaptationEnabled", v31);
      CFRelease(v31);
      uint64_t v32 = NSNumber;
      __int16 v50 = v11;
      [v11 rtcpSendInterval];
      CFDictionaryAddValue(v10, @"VCVSRtcpSendInterval", (const void *)objc_msgSend(v32, "numberWithDouble:"));
      id v33 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      __int16 v34 = *(void **)(a1 + 544);
      uint64_t v35 = [v34 countByEnumeratingWithState:&v57 objects:v56 count:16];
      if (v35)
      {
        uint64_t v36 = v35;
        uint64_t v37 = *(void *)v58;
        do
        {
          for (uint64_t i = 0; i != v36; ++i)
          {
            if (*(void *)v58 != v37) {
              objc_enumerationMutation(v34);
            }
            uint64_t v39 = *(void **)(*((void *)&v57 + 1) + 8 * i);
            if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v39, "streamConfig"), "multiwayConfig"), "repairedStreamID"))objc_msgSend(v33, "addObject:", objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v39, "streamConfig"), "multiwayConfig"), "repairedStreamID"))); {
          }
            }
          uint64_t v36 = [v34 countByEnumeratingWithState:&v57 objects:v56 count:16];
        }
        while (v36);
      }
      if ([v33 count])
      {
        CFStringRef v40 = CFStringCreateWithFormat(alloc, 0, @"%s", objc_msgSend((id)objc_msgSend(v33, "componentsJoinedByString:", @","), "UTF8String"));
        CFDictionaryAddValue(v10, @"VCVSRepairIDs", v40);
        CFRelease(v40);
      }

      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v41 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a1, "defaultStreamConfig"), "multiwayConfig"), "subStreamConfigs");
      uint64_t v42 = [v41 countByEnumeratingWithState:&v52 objects:v51 count:16];
      if (v42)
      {
        uint64_t v43 = v42;
        uint64_t v44 = *(void *)v53;
        do
        {
          for (uint64_t j = 0; j != v43; ++j)
          {
            if (*(void *)v53 != v44) {
              objc_enumerationMutation(v41);
            }
            __int16 v46 = *(void **)(*((void *)&v52 + 1) + 8 * j);
            uint64_t v47 = [v46 keyFrameInterval];
            if (v47 == [v46 framerate]) {
              CFDictionaryAddValue(v10, @"VCVSSubStreamIDs", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(v46, "idsStreamID")));
            }
          }
          uint64_t v43 = [v41 countByEnumeratingWithState:&v52 objects:v51 count:16];
        }
        while (v43);
      }
      __int16 v48 = *(void **)(a1 + 576);
      if (v48)
      {
        CFDictionaryAddValue(v10, @"VCVSRemoteDeviceModel", (const void *)[v48 deviceType]);
        CFDictionaryAddValue(v10, @"VCVSRemoteOSBuildVersion", (const void *)[*(id *)(a1 + 576) osVersion]);
        CFDictionaryAddValue(v10, @"VCVSRemoteFrameworkVersion", (const void *)[*(id *)(a1 + 576) frameworkVersion]);
      }
      CFDictionaryAddValue(v10, @"VCVSConfigHDRMode", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v50, "hdrMode")));
      _VCVideoStream_CollectVideoConfigMetrics((id *)a1, v10);
      goto LABEL_47;
    case 202:
      __int16 v15 = *(void **)(a1 + 280);
      if (v15)
      {
        CFStringRef v16 = CFStringCreateWithFormat(v8, 0, @"%s", objc_msgSend((id)objc_msgSend(v15, "description"), "UTF8String"));
        CFDictionaryAddValue(v10, @"VCVSUUID", v16);
        CFRelease(v16);
      }
      CFStringRef v17 = CFStringCreateWithFormat(v8, 0, @"%ld", *(void *)(a1 + 616));
      CFDictionaryAddValue(v10, @"VCVSStreamToken", v17);
      CFRelease(v17);
      uint64_t v18 = [(id)a1 endReason];
      int v14 = (const void *)[NSNumber numberWithUnsignedInt:v18];
      uint64_t v13 = @"VCMSEndReason";
      goto LABEL_13;
    case 203:
    case 204:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
      goto LABEL_47;
    case 205:
      _VCVideoStream_CollectVideoConfigMetrics((id *)a1, Mutable);
      goto LABEL_47;
    case 211:
      uint64_t v19 = NSNumber;
      [a3 ratio];
      CFDictionaryAddValue(v10, @"VCVSRxVideoWidth", (const void *)objc_msgSend(v19, "numberWithDouble:"));
      int v20 = NSNumber;
      [a3 ratio];
      CFDictionaryAddValue(v10, @"VCVSRxVideoHeight", (const void *)[v20 numberWithDouble:v21]);
      int v14 = (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(a3, "orientation"));
      uint64_t v13 = @"VCVSRxVideoOrientation";
      goto LABEL_13;
    case 212:
      int v14 = (const void *)[NSNumber numberWithLong:time(0)];
      uint64_t v13 = @"Time";
LABEL_13:
      Mutable = v10;
      goto LABEL_14;
    default:
      if (a2 == 225)
      {
        CFStringRef v22 = CFStringCreateWithFormat(v8, 0, @"%d", *(unsigned int *)(a1 + 824));
        CFDictionaryAddValue(v10, @"VCVSTMMB", v22);
        CFRelease(v22);
      }
      else if (a2 == 230)
      {
        uint64_t v13 = @"VCVSActiveStreamID";
        int v14 = a4;
LABEL_14:
        CFDictionaryAddValue(Mutable, v13, v14);
      }
LABEL_47:
      reportingVideoStreamEvent();
      if (v10) {
        CFRelease(v10);
      }
      return;
  }
}

void _VCVideoStream_CollectVideoConfigMetrics(id *a1, __CFDictionary *a2)
{
  OSStatus v4 = (void *)[a1 defaultStreamConfig];
  int v5 = [v4 temporalScalingEnabled];
  uint64_t v6 = v4;
  if (v5) {
    uint64_t v6 = objc_msgSend((id)objc_msgSend(a1[68], "lastObject"), "streamConfig");
  }
  CFDictionaryAddValue(a2, @"VCVSConfigTxMaxBitrate", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v6, "txMaxBitrate")));
  CFDictionaryAddValue(a2, @"VCVSConfigTxMinBitrate", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "txMinBitrate")));
  CFDictionaryAddValue(a2, @"VCVSConfigRxMaxBitrate", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "rxMaxBitrate")));
  CFDictionaryAddValue(a2, @"VCVSConfigRxMinBitrate", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "rxMinBitrate")));
  CFDictionaryAddValue(a2, @"VCVSKeyFrameInterval", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "keyFrameInterval")));
  CFDictionaryAddValue(a2, @"VCVSRemoteVInitialOrientation", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v4, "remoteVideoInitialOrientation")));
  int64_t v7 = +[VCPayloadUtils codecTypeForPayload:](VCPayloadUtils, "codecTypeForPayload:", objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "txPayloadMap"), "allKeys"), "firstObject"), "integerValue"));
  CFDictionaryAddValue(a2, @"VCVSConfigTxCodecType", (const void *)[NSNumber numberWithInteger:v7]);
  int64_t v8 = +[VCPayloadUtils codecTypeForPayload:](VCPayloadUtils, "codecTypeForPayload:", objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "rxPayloadMap"), "allKeys"), "firstObject"), "integerValue"));
  CFDictionaryAddValue(a2, @"VCVSConfigRxCodecType", (const void *)[NSNumber numberWithInteger:v8]);
  CFDictionaryAddValue(a2, @"VCVSConfigTxFramerate", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "framerate")));
  CFDictionaryAddValue(a2, @"VCVSConfigTxResolution", (const void *)objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v4, "videoResolution")));
  if ([v4 videoResolution] == 27)
  {
    CFDictionaryAddValue(a2, @"VCVSConfigWidth", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "customWidth")));
    CFDictionaryAddValue(a2, @"VCVSConfigHeight", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "customHeight")));
  }
  CFDictionaryAddValue(a2, @"VCVSConfigTransportProtocol", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v4, "transportProtocolType")));
  CFDictionaryAddValue(a2, @"VCVSConfigAccessNetworkType", (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(a1, "defaultStreamConfig"), "accessNetworkType")));
  uint64_t v9 = (const void *)objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v4, "foveationEnabled"));

  CFDictionaryAddValue(a2, @"VCVSConfigFoveationEnabled", v9);
}

uint64_t VCVideoStream_OnVideoFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 896);
  long long v6 = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  if (v4) {
    VCVideoCaptureConverter_ProcessFrame(v4, a2, &v6, a4);
  }
  else {
    VCVideoStream_ProcessConvertedFrame(a1, a2, (uint64_t)&v6, a4);
  }
  return 1;
}

uint64_t VCVideoStream_GetBaseQualityIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1136);
}

void VCVideoStream_SetExternalOutputVideoLatency(uint64_t a1, double a2)
{
  if (a1)
  {
    *(double *)(a1 + 1152) = a2;
    uint64_t v2 = *(void *)(a1 + 856);
    VCVideoReceiver_SetExternalOutputVideoLatency(v2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVideoStream_SetExternalOutputVideoLatency_cold_1();
    }
  }
}

void _VCVideoStream_NotifyVideoStreamDelegate(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 1120))
  {
    if (a2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v4 = VRTraceErrorLogLevelToCSTR();
        int v5 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *(void *)(a1 + 1112);
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v19 = v4;
          __int16 v20 = 2080;
          double v21 = "_VCVideoStream_NotifyVideoStreamDelegate";
          __int16 v22 = 1024;
          int v23 = 3362;
          __int16 v24 = 2048;
          uint64_t v25 = a1;
          __int16 v26 = 2112;
          CFStringRef v27 = a2;
          __int16 v28 = 2048;
          uint64_t v29 = v6;
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VCVideoStream [%s] %s:%d VCVideoStream[%p] remoteScreenAttributes=%@, self.videoStreamDelegate=%p", buf, 0x3Au);
        }
      }
      uint64_t v7 = a2;
    }
    else
    {
      if (!*(void *)(a1 + 1176))
      {
        uint64_t v15 = 0;
LABEL_17:

        *(void *)(a1 + 1176) = 0;
        if (v15)
        {
          CFStringRef v16 = *(NSObject **)(a1 + 168);
          v17[0] = MEMORY[0x1E4F143A8];
          v17[1] = 3221225472;
          v17[2] = ___VCVideoStream_NotifyVideoStreamDelegate_block_invoke;
          v17[3] = &unk_1E6DB3E40;
          v17[4] = a1;
          v17[5] = v15;
          dispatch_async(v16, v17);
        }
        return;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        uint64_t v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = *(void **)(a1 + 1176);
          uint64_t v14 = *(void *)(a1 + 1112);
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v19 = v11;
          __int16 v20 = 2080;
          double v21 = "_VCVideoStream_NotifyVideoStreamDelegate";
          __int16 v22 = 1024;
          int v23 = 3365;
          __int16 v24 = 2048;
          uint64_t v25 = a1;
          __int16 v26 = 2112;
          CFStringRef v27 = v13;
          __int16 v28 = 2048;
          uint64_t v29 = v14;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "VCVideoStream [%s] %s:%d VCVideoStream[%p] _cachedRemoteScreenAttributes=%@, self.videoStreamDelegate=%p", buf, 0x3Au);
        }
      }
      uint64_t v7 = *(void **)(a1 + 1176);
    }
    uint64_t v15 = [v7 copy];
    goto LABEL_17;
  }
  if (a2)
  {

    *(void *)(a1 + 1176) = [a2 copy];
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void **)(a1 + 1176);
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v19 = v8;
        __int16 v20 = 2080;
        double v21 = "_VCVideoStream_NotifyVideoStreamDelegate";
        __int16 v22 = 1024;
        int v23 = 3381;
        __int16 v24 = 2048;
        uint64_t v25 = a1;
        __int16 v26 = 2112;
        CFStringRef v27 = v10;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCVideoStream [%s] %s:%d VCVideoStream[%p] _cachedRemoteScreenAttributes=%@", buf, 0x30u);
      }
    }
  }
}

void _VCMediaStream_SubmitStatisticsCollectorVideoStallUpdate(uint64_t a1, unint64_t a2, double a3, double a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 1000);
  if (v4)
  {
    *(_OWORD *)&v7[16] = 0u;
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    uint64_t v9 = 0;
    *(double *)&v7[8] = a3;
    *(void *)uint64_t v7 = 10;
    *(_DWORD *)&v7[24] = 8;
    long long v12 = a2;
    double v10 = a4;
    AVCStatisticsCollector_SetVCStatistics(v4, (uint64_t)v7);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    uint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v7 = 136315650;
      *(void *)&v7[4] = v5;
      *(_WORD *)&v7[12] = 2080;
      *(void *)&v7[14] = "_VCMediaStream_SubmitStatisticsCollectorVideoStallUpdate";
      *(_WORD *)&v7[22] = 1024;
      *(_DWORD *)&v7[24] = 1599;
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "VCVideoStream [%s] %s:%d Statistics collector is nil", v7, 0x1Cu);
    }
  }
}

uint64_t VCMediaNegotiationBlobV2CodecFeaturesReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        Data = (void *)PBReaderReadData();

        *(void *)(a1 + 16) = Data;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E23A9880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E23A9C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E23A9FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E23AA218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double VCMediaStreamGroup_ExternalRenderLatency(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 400);
  }
  double v1 = 0.0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaStreamGroup_ExternalRenderLatency_cold_1();
    }
  }
  return v1;
}

void VCNACKGenerator_GetStatistics(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    float v13 = 0.0;
    uint64_t v75 = a1 + 305200;
    uint64_t v14 = 14324;
    uint64_t v15 = 4672;
    uint64_t v16 = 64;
    float v17 = 0.0;
    float v18 = 0.0;
    float v19 = 0.0;
    do
    {
      _X4 = a1 + v4;
      uint64_t v21 = a1 + v15;
      __asm { PRFM            #0, [X4,#0x4A20] }
      unint64_t v26 = *(void *)(a1 + v4 + 4680);
      double v27 = *(double *)(a1 + v15 + 48);
      double v28 = v18;
      if (v26)
      {
        if (v27 / (double)v26 >= v28) {
          double v28 = v27 / (double)v26;
        }
      }
      else if (v18 <= 0.0)
      {
        double v28 = 0.0;
      }
      uint64_t v29 = *(void *)(_X4 + 4688);
      uint64_t v30 = *(void *)(_X4 + 4696);
      double v31 = *(double *)(_X4 + 4728);
      int v32 = *(_DWORD *)(_X4 + 4704);
      double v33 = v19;
      if (v26 == v29)
      {
        if (v19 <= 0.0) {
          double v33 = 0.0;
        }
      }
      else if (v31 / (double)(v26 - v29) >= v33)
      {
        double v33 = v31 / (double)(v26 - v29);
      }
      _X6 = _X4 + 19040;
      _X5 = a1 + v14;
      uint64_t v36 = a1 + v4;
      __asm { PRFM            #0, [X5] }
      unsigned int v38 = *(unsigned __int16 *)(a1 + v4 + 20);
      __asm { PRFM            #0, [X6] }
      uint64_t v40 = *(void *)(a1 + v4 + 4736);
      if (v40)
      {
        unsigned int v41 = *(unsigned __int16 *)(v36 + 4752);
        if ((unsigned __int16)(v38 - v41) < 0x7FFFu && v38 < v41) {
          v41 |= 0xFFFF0000;
        }
        int v9 = v9 + v38 - v41 + 1;
        v10 += v40;
        v11 += *(_DWORD *)(v36 + 4744);
      }
      v5 += *(void *)v21;
      v6 += v26;
      v7 += v29;
      v8 += v30;
      float v13 = v27 + v13;
      float v17 = v31 + v17;
      v12 += v32;
      float v18 = v28;
      *(_DWORD *)(v21 + 32) = 0;
      float v19 = v33;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *(_OWORD *)(v21 + 16) = 0uLL;
      *(_OWORD *)(a1 + v15 + 48) = 0uLL;
      *(_OWORD *)(a1 + v15 + 64) = 0uLL;
      *(_WORD *)(v36 + 4752) = v38;
      v4 += 4768;
      v14 += 4768;
      v15 += 4768;
      --v16;
    }
    while (v16);
    *(float *)(v75 + 360) = v18;
    *(float *)(v75 + 364) = v19;
    if (v10)
    {
      int valuePtr = v8;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberRef v43 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"UniqueNacksSent", v43);
      CFRelease(v43);
      int valuePtr = v5;
      CFNumberRef v44 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksSent", v44);
      CFRelease(v44);
      int valuePtr = v6;
      CFNumberRef v45 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksFulfilled", v45);
      CFRelease(v45);
      int valuePtr = v7;
      CFNumberRef v46 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksFulfilledOnTime", v46);
      CFRelease(v46);
      float v47 = 0.0;
      float v48 = 0.0;
      if (v5) {
        float v48 = v13 / (float)v5;
      }
      int valuePtr = LODWORD(v48);
      CFNumberRef v49 = CFNumberCreate(allocator, kCFNumberFloat32Type, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksAvgResponseTime", v49);
      CFRelease(v49);
      int valuePtr = *(_DWORD *)(v75 + 360);
      CFNumberRef v50 = CFNumberCreate(allocator, kCFNumberFloat32Type, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksMaxResponseTime", v50);
      CFRelease(v50);
      if (v6 != v7) {
        float v47 = v17 / (float)(unint64_t)(v6 - v7);
      }
      int valuePtr = LODWORD(v47);
      CFNumberRef v51 = CFNumberCreate(allocator, kCFNumberFloat32Type, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksLateTime", v51);
      CFRelease(v51);
      int valuePtr = *(_DWORD *)(v75 + 364);
      CFNumberRef v52 = CFNumberCreate(allocator, kCFNumberFloat32Type, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksMaxLateTime", v52);
      CFRelease(v52);
      double v77 = 0.0;
      double v78 = 0.0;
      if ((_VCNACKGenerator_GetBitrate(a1, &v78, &v77, (float)*(unsigned int *)(v75 + 396)) & 0x80000000) == 0)
      {
        int valuePtr = (v78 / 1000.0 + 0.5);
        CFNumberRef v53 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
        CFDictionaryAddValue(a2, @"NacksMediaBitRate", v53);
        CFRelease(v53);
        int valuePtr = (v77 / 1000.0 + 0.5);
        CFNumberRef v54 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
        CFDictionaryAddValue(a2, @"NacksRTXMediaBitRate", v54);
        CFRelease(v54);
      }
      double v55 = (double)v9;
      double v56 = 1.0 - (double)v10 / (double)v9;
      if (v56 < 0.0) {
        double v56 = 0.0;
      }
      double v57 = 1.0 - (double)(v10 + v11) / v55;
      if (v57 < 0.0) {
        double v57 = 0.0;
      }
      double v58 = (double)v12 / v55;
      if (v9) {
        double v59 = v57;
      }
      else {
        double v59 = 0.0;
      }
      if (v9) {
        double v60 = v56;
      }
      else {
        double v60 = 0.0;
      }
      if (v9) {
        double v61 = v58;
      }
      else {
        double v61 = 0.0;
      }
      *(double *)(v75 + 272) = v61;
      *(double *)(v75 + 248) = v60;
      double v62 = v60 * 10000.0;
      if (v60 >= 1.0) {
        double v62 = 10000.0;
      }
      int valuePtr = (int)v62;
      CFNumberRef v63 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksPLRWithoutRTX", v63);
      CFRelease(v63);
      double v64 = v59 * 10000.0;
      if (v59 >= 1.0) {
        double v64 = 10000.0;
      }
      int valuePtr = (int)v64;
      CFNumberRef v65 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksPLRWithRTX", v65);
      CFRelease(v65);
      int valuePtr = (int)(*(double *)(v75 + 256) * 100.0);
      CFNumberRef v66 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"NacksThrottleFactor", v66);
      CFRelease(v66);
      int valuePtr = (int)(*(double *)(v75 + 272) * 10000.0);
      CFNumberRef v67 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(a2, @"OutOfOrderRTX", v67);
      CFRelease(v67);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
      {
        uint64_t v68 = VRTraceErrorLogLevelToCSTR();
        uint64_t v69 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(v75 + 376), 0x8000100u);
          v71 = FourccToCStr(*(_DWORD *)(v75 + 384));
          float v72 = *(float *)(v75 + 360);
          float v73 = *(float *)(v75 + 364);
          uint64_t v74 = *(void *)v75;
          int valuePtr = 136319746;
          uint64_t v80 = v68;
          __int16 v81 = 2080;
          v82 = "VCNACKGenerator_GetStatistics";
          __int16 v83 = 1024;
          int v84 = 298;
          __int16 v85 = 2048;
          uint64_t v86 = a1;
          __int16 v87 = 2080;
          uint64_t v88 = CStringPtr;
          __int16 v89 = 2080;
          double v90 = v71;
          __int16 v91 = 2048;
          unint64_t v92 = v5;
          __int16 v93 = 2048;
          uint64_t v94 = v8;
          __int16 v95 = 2048;
          uint64_t v96 = v6;
          __int16 v97 = 2048;
          uint64_t v98 = v7;
          __int16 v99 = 2048;
          double v100 = v48;
          __int16 v101 = 2048;
          double v102 = v72;
          __int16 v103 = 2048;
          double v104 = v47;
          __int16 v105 = 2048;
          double v106 = v73;
          __int16 v107 = 1024;
          unsigned int v108 = (v78 / 1000.0 + 0.5);
          __int16 v109 = 1024;
          unsigned int v110 = (v77 / 1000.0 + 0.5);
          __int16 v111 = 2048;
          double v112 = v60 * 100.0;
          __int16 v113 = 2048;
          double v114 = v59 * 100.0;
          __int16 v115 = 2048;
          uint64_t v116 = v74;
          _os_log_impl(&dword_1E1EA4000, v69, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d @=@ Health: VCNACKGenerator [%p] NACK health report participantID=%s streamGroupId=%s packetsNACKed=%lld uniquePacketsNACKed=%lld packetsFulfilled=%lld packetsFulfilledOnTime=%lld averageResponseTime=%2.4fs maxAvgResponseTime=%2.4fs averageLateTime=%2.4fs maxAvgLateTime=%2.4fs mediaBitRate=%ukbps retransmittedMediaBitRate=%ukbps plrWithoutRTX=%3.2f%% plrWithRTX=%3.2f%% rtt=%2.3fs", (uint8_t *)&valuePtr, 0xB4u);
        }
      }
    }
  }
}

uint64_t _VCNACKGenerator_GetBitrate(uint64_t a1, double *a2, double *a3, float a4)
{
  uint64_t v5 = a1 + 305464;
  double v6 = *(double *)(a1 + 305464);
  double v7 = v6 - a4;
  if (v6 == 0.0) {
    double v8 = 0.0;
  }
  else {
    double v8 = v7;
  }
  if (!a3)
  {
    uint64_t v9 = 0;
    if (!a2) {
      return v9;
    }
    goto LABEL_9;
  }
  uint64_t v9 = _VCNACKConsumer_ComputeSummerBitrate(*(void *)(a1 + 305488), a3, v8);
  if ((v9 & 0x80000000) == 0)
  {
    if (!a2) {
      return v9;
    }
LABEL_9:
    uint64_t v9 = _VCNACKConsumer_ComputeSummerBitrate(*(void *)(v5 + 16), a2, v8);
    if ((v9 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCNACKGenerator_GetBitrate_cold_1();
      }
    }
    return v9;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCNACKGenerator_GetBitrate_cold_2();
    }
  }
  return v9;
}

uint64_t _VCNACKGeneratorClassRegister(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t VCNACKGenerator_Create(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (*(void *)a3)
    {
      if (*(void *)(a3 + 8))
      {
        if (VCNACKGeneratorGetTypeID_initOnce != -1) {
          dispatch_once_f(&VCNACKGeneratorGetTypeID_initOnce, &VCNACKGeneratorGetTypeID_typeID, (dispatch_function_t)_VCNACKGeneratorClassRegister);
        }
        uint64_t Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          uint64_t v6 = Instance;
          uint64_t v7 = Instance + 305168;
          *(_OWORD *)(Instance + 305168) = *(_OWORD *)a3;
          *(_OWORD *)(Instance + 305184) = *(_OWORD *)(a3 + 16);
          *(void *)(Instance + 305200) = 0x3FC3333333333333;
          *(unsigned char *)(Instance + 305218) = *(unsigned char *)(a3 + 32);
          strncpy((char *)(Instance + 305232), (const char *)(a3 + 33), 0xC8uLL);
          long long v8 = *(_OWORD *)(a3 + 236);
          long long v9 = *(_OWORD *)(a3 + 252);
          long long v10 = *(_OWORD *)(a3 + 284);
          *(_OWORD *)(v6 + 305528) = *(_OWORD *)(a3 + 268);
          *(_OWORD *)(v6 + 305544) = v10;
          *(_OWORD *)(v6 + 305496) = v8;
          *(_OWORD *)(v6 + 305512) = v9;
          *(_DWORD *)(v7 + 400) = *(_DWORD *)(a3 + 300);
          CFTypeRef v11 = *(CFTypeRef *)(a3 + 304);
          if (v11) {
            CFTypeRef v11 = CFRetain(v11);
          }
          *(void *)(v7 + 408) = v11;
          *(_DWORD *)(v7 + 416) = *(_DWORD *)(a3 + 312);
          *(_DWORD *)(v7 + 428) = reportingDefaultRealtimePeriod();
          if ((SummerCreateHandle((uint64_t *)(v7 + 312), 3000) & 0x80000000) != 0)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCNACKGenerator_Create_cold_5();
              }
            }
          }
          else
          {
            SummerAdd(0.0, 0.0);
            if ((SummerCreateHandle((uint64_t *)(v7 + 320), 3000) & 0x80000000) == 0)
            {
              SummerAdd(0.0, 0.0);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v12 = VRTraceErrorLogLevelToCSTR();
                float v13 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  int v16 = 136315906;
                  uint64_t v17 = v12;
                  __int16 v18 = 2080;
                  float v19 = "VCNACKGenerator_Create";
                  __int16 v20 = 1024;
                  int v21 = 563;
                  __int16 v22 = 2048;
                  uint64_t v23 = v6;
                  _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d New instance created=%p", (uint8_t *)&v16, 0x26u);
                }
              }
              uint64_t v14 = 0;
              *a2 = v6;
              return v14;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCNACKGenerator_Create_cold_6();
              }
            }
          }
          if (*(void *)(v7 + 312) != 0xFFFFFFFFLL) {
            SummerCloseHandle();
          }
          CFRelease((CFTypeRef)v6);
          return 2152071172;
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() < 3)
        {
          return 2152071171;
        }
        else
        {
          VRTraceErrorLogLevelToCSTR();
          uint64_t v14 = 2152071171;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNACKGenerator_Create_cold_4();
          }
        }
      }
      else
      {
        uint64_t v14 = 2152071169;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNACKGenerator_Create_cold_3();
          }
        }
      }
    }
    else
    {
      uint64_t v14 = 2152071169;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCNACKGenerator_Create_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v14 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKGenerator_Create_cold_1();
      }
    }
  }
  return v14;
}

uint64_t VCNACKGenerator_AddPacketInfo(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v74 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKGenerator_AddPacketInfo_cold_1();
      }
    }
    return v74;
  }
  long long v8 = a2;
  uint64_t v9 = a1;
  int v10 = *(_DWORD *)a2;
  unsigned int v11 = *(_DWORD *)a2 & 0x3F;
  v150 = (int *)(a1 + 4768 * v11 + 16);
  if (*v150 != *(_DWORD *)a2)
  {
    bzero(v150, 0x12A0uLL);
    int *v150 = v10;
  }
  uint64_t v12 = v9 + 4768 * v11;
  int v14 = *(unsigned __int8 *)(v12 + 22);
  float v13 = (unsigned char *)(v12 + 22);
  if (!v14)
  {
    uint64_t v74 = 0;
    goto LABEL_157;
  }
  uint64_t v147 = v13;
  uint64_t v15 = v9 + 305168;
  double v16 = v8[1];
  uint64_t v17 = v9 + 4768 * v11;
  double v18 = *(double *)(v17 + 4760);
  if (v16 == 0.0)
  {
    int v148 = v18 == 0.0;
    v8[1] = v18;
    double v16 = v18;
  }
  else
  {
    float v19 = (double *)(v17 + 4760);
    BOOL v20 = v18 == 0.0;
    if (v16 - v18 >= 0.75) {
      BOOL v20 = 1;
    }
    int v148 = v20;
    *float v19 = v16;
    *(double *)(v9 + 305464) = v16;
  }
  uint64_t v21 = v9 + 4768 * v11;
  int v24 = *(unsigned __int16 *)(v21 + 20);
  uint64_t v23 = (_WORD *)(v21 + 20);
  LODWORD(v22) = v24;
  unsigned int v25 = *((unsigned __int16 *)v8 + 2);
  BOOL v26 = (unsigned __int16)(v25 - v24) >= 0x7FFFu || v25 >= v22;
  int v27 = v22 | 0xFFFF0000;
  if (v26) {
    int v27 = v22;
  }
  BOOL v28 = (unsigned __int16)(v22 - v25) >= 0x7FFFu || v22 >= v25;
  signed int v29 = v25 | 0xFFFF0000;
  if (v28) {
    signed int v29 = *((unsigned __int16 *)v8 + 2);
  }
  v149 = v23 + 2346;
  signed int v30 = (unsigned __int16)v23[2346];
  if ((unsigned __int16)(v25 - v30) < 0x7FFFu && v25 < v30) {
    v30 |= 0xFFFF0000;
  }
  int v32 = v29 - v27;
  if (v29 <= v27)
  {
    if (!*((unsigned char *)v8 + 16) && !*((unsigned char *)v8 + 30)) {
      ++*(_DWORD *)(v9 + 4768 * v11 + 4704);
    }
    unsigned int v33 = *((_DWORD *)v8 + 5);
    if (v33 >= *(_DWORD *)(v9 + 4768 * v11 + 4708) && v29 < v30) {
      goto LABEL_35;
    }
  }
  else
  {
    *uint64_t v23 = v25;
    unsigned int v33 = *((_DWORD *)v8 + 5);
    uint64_t v22 = v9 + 4768 * v11;
    if (v33 > *(_DWORD *)(v22 + 4708))
    {
      *(_DWORD *)(v22 + 4708) = v33;
      LOBYTE(v22) = v25;
LABEL_35:
      _WORD *v149 = v25;
      goto LABEL_37;
    }
    LOBYTE(v22) = v25;
  }
LABEL_37:
  uint64_t v34 = v9 + 4768 * v11;
  uint64_t v35 = *(void *)(v34 + 4736);
  if (v35)
  {
    __int16 v36 = v29;
    if (!*((unsigned char *)v8 + 31))
    {
      if (v29 >= *(unsigned __int16 *)(v9 + 4768 * v11 + 4752)) {
        __int16 v36 = *(_WORD *)(v9 + 4768 * v11 + 4752);
      }
      else {
        __int16 v36 = v29;
      }
    }
  }
  else
  {
    __int16 v36 = v29;
  }
  uint64_t v37 = v9 + 4768 * v11;
  unint64_t v40 = *(void *)(v37 + 32);
  uint64_t v39 = v37 + 32;
  unint64_t v38 = v40;
  *(_WORD *)(v39 + 4720) = v36;
  unint64_t v41 = *(void *)(v39 + 8);
  if (v32 >= 1)
  {
    unint64_t v38 = ((2 * v41) << ~(_BYTE)v32) | (v38 >> v32);
    v41 >>= v32;
    BOOL v42 = (v32 & 0x40) == 0;
    if ((v32 & 0x40) != 0)
    {
      unint64_t v38 = v41;
      unint64_t v41 = 0;
    }
    *(void *)uint64_t v39 = v38;
    *(void *)(v39 + 8) = v41;
    uint64_t v43 = v9 + 4768 * v11;
    unint64_t v44 = *(void *)(v43 + 56);
    a3 = *(void *)(v43 + 48) >> v32;
    a4 = 2 * v44;
    uint64_t v45 = ((2 * v44) << ~(_BYTE)v32) | a3;
    uint64_t v46 = v44 >> v32;
    if (!v42)
    {
      uint64_t v45 = v46;
      uint64_t v46 = 0;
    }
    *(void *)(v43 + 48) = v45;
    *(void *)(v43 + 56) = v46;
  }
  char v47 = v22 - v29;
  if ((v47 & 0x40) != 0) {
    unint64_t v48 = 0x8000000000000000 >> v47;
  }
  else {
    unint64_t v48 = 0;
  }
  if ((v47 & 0x40) != 0) {
    unint64_t v49 = 0;
  }
  else {
    unint64_t v49 = 0x8000000000000000 >> v47;
  }
  int v50 = *((unsigned __int8 *)v8 + 30);
  if (!*((unsigned char *)v8 + 30))
  {
    *(void *)uint64_t v39 = v38 | v48;
    *(void *)(v39 + 8) = v41 | v49;
  }
  uint64_t v151 = v9 + 305168;
  if (v38 & v48 | v41 & v49)
  {
    if (!*((unsigned char *)v8 + 16)) {
      goto LABEL_80;
    }
  }
  else
  {
    if (!*((unsigned char *)v8 + 16))
    {
      *(void *)(v34 + 4736) = v35 + 1;
      goto LABEL_80;
    }
    ++*(void *)(v9 + 4768 * v11 + 4744);
  }
  uint64_t v51 = v9 + 4768 * v11;
  unint64_t v52 = *(void *)(v51 + 48);
  unint64_t v53 = *(void *)(v51 + 56);
  CFNumberRef v54 = (unint64_t *)(v51 + 48);
  if (!(v52 & v48 | v53 & v49))
  {
    uint64_t v55 = v25;
    unsigned int v56 = v11;
    uint64_t v57 = v9 + 4768 * v11 + 2 * v25;
    unsigned int v145 = v56;
    if (*(unsigned __int16 *)(v57 + 4160) == v25)
    {
      uint64_t v58 = v9 + 4768 * v56;
      ++*(void *)(v58 + 4680);
      float v59 = v16 - *(double *)(v58 + 8 * v55 + 2112);
      *(double *)(v58 + 4720) = *(double *)(v58 + 4720) + v59;
      LODWORD(v58) = *(_DWORD *)(v58 + 4716);
      BOOL v26 = v58 >= v33;
      unsigned int v60 = v58 - v33;
      if (v26) {
        *(double *)(v9 + 4768 * v56 + 4728) = *(double *)(v9 + 4768 * v56 + 4728)
      }
                                              + (float)((float)v60 / (float)*(int *)(v9 + 305568));
      else {
        ++*(void *)(v9 + 4768 * v56 + 4688);
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        double v61 = (unsigned __int16 *)(v57 + 4160);
        uint64_t v143 = VRTraceErrorLogLevelToCSTR();
        double v62 = *MEMORY[0x1E4F47A50];
        CFNumberRef v63 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            int v64 = *v150;
            int v65 = *((unsigned __int16 *)v8 + 2);
            uint64_t v66 = *((void *)v8 + 1);
            uint64_t v67 = v9 + 4768 * v145 + 8 * v55;
            uint64_t v68 = *(void *)(v67 + 2112);
            uint64_t v69 = *(void *)(v67 + 64);
            int v70 = *v61;
            *(_DWORD *)CMTime buf = 136318210;
            *(void *)&uint8_t buf[4] = v143;
            __int16 v156 = 2080;
            v157 = "_VCNACKGenerator_UpdateSSRCContext";
            __int16 v158 = 1024;
            int v159 = 374;
            __int16 v160 = 1024;
            *(_DWORD *)v161 = v64;
            *(_WORD *)&v161[4] = 1024;
            *(_DWORD *)&v161[6] = v64;
            *(_WORD *)v162 = 1024;
            *(_DWORD *)&v162[2] = v65;
            *(_WORD *)v163 = 1024;
            *(_DWORD *)&v163[2] = v65;
            *(_WORD *)v164 = 2048;
            *(void *)&v164[2] = v66;
            *(_WORD *)&v164[10] = 2048;
            *(void *)&v164[12] = v68;
            *(_WORD *)&v164[20] = 2048;
            *(void *)&v164[22] = v69;
            *(_WORD *)v165 = 2048;
            *(void *)&v165[2] = 0x7FF8000000000000;
            __int16 v166 = 1024;
            int v167 = 0;
            __int16 v168 = 1024;
            int v169 = v70;
            _os_log_impl(&dword_1E1EA4000, v62, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Packet Information does not match ssrc=%u ssrc=0x%x and seqNum=%u seqNum=0x%x arrivalTime=%f timeOfRequest=%f timeOfFirstRequest=%f diff=%f isSameSeqNum=%d seqNumRequested=%u", buf, 0x68u);
          }
        }
        else if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          int v128 = *v150;
          int v129 = *((unsigned __int16 *)v8 + 2);
          uint64_t v130 = *((void *)v8 + 1);
          uint64_t v131 = v9 + 4768 * v145 + 8 * v55;
          uint64_t v132 = *(void *)(v131 + 2112);
          uint64_t v133 = *(void *)(v131 + 64);
          int v134 = *v61;
          *(_DWORD *)CMTime buf = 136318210;
          *(void *)&uint8_t buf[4] = v143;
          __int16 v156 = 2080;
          v157 = "_VCNACKGenerator_UpdateSSRCContext";
          __int16 v158 = 1024;
          int v159 = 374;
          __int16 v160 = 1024;
          *(_DWORD *)v161 = v128;
          *(_WORD *)&v161[4] = 1024;
          *(_DWORD *)&v161[6] = v128;
          *(_WORD *)v162 = 1024;
          *(_DWORD *)&v162[2] = v129;
          *(_WORD *)v163 = 1024;
          *(_DWORD *)&v163[2] = v129;
          *(_WORD *)v164 = 2048;
          *(void *)&v164[2] = v130;
          *(_WORD *)&v164[10] = 2048;
          *(void *)&v164[12] = v132;
          *(_WORD *)&v164[20] = 2048;
          *(void *)&v164[22] = v133;
          *(_WORD *)v165 = 2048;
          *(void *)&v165[2] = 0x7FF8000000000000;
          __int16 v166 = 1024;
          int v167 = 0;
          __int16 v168 = 1024;
          int v169 = v134;
          _os_log_debug_impl(&dword_1E1EA4000, v62, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Packet Information does not match ssrc=%u ssrc=0x%x and seqNum=%u seqNum=0x%x arrivalTime=%f timeOfRequest=%f timeOfFirstRequest=%f diff=%f isSameSeqNum=%d seqNumRequested=%u", buf, 0x68u);
        }
      }
      uint64_t v15 = v9 + 305168;
    }
    uint64_t v71 = *((void *)v8 + 1);
    if (*(unsigned char *)(v15 + 51))
    {
      float v72 = *(FILE ***)(v15 + 56);
    }
    else
    {
      uint64_t v73 = v15;
      float v72 = LogDump_OpenLog(v9 + 305232, (uint64_t)"NackGenerator", (uint64_t)".nackdump", (char)"Timestamp\tRequestTime\tType\tSSRC\tHighestSeqNum\tBitmask\tResponseTime\n", 9, (char)"1.0");
      *(void *)(v73 + 56) = v72;
      *(unsigned char *)(v73 + 51) = 1;
    }
    VRLogfilePrintWithTimestamp((uint64_t)v72, "%5.3f\t%s\t%u\t%u\t-\t%5.3f\t%d\n", a3, a4, v15, a6, a7, a8, v71);
    unint64_t v52 = *v54;
    unint64_t v53 = v54[1];
    int v50 = *((unsigned __int8 *)v8 + 30);
    unsigned int v11 = v145;
    uint64_t v15 = v9 + 305168;
  }
  *CFNumberRef v54 = v52 | v48;
  v54[1] = v53 | v49;
LABEL_80:
  double v152 = 0.0;
  double v153 = 0.0;
  if (v50)
  {
    uint64_t v74 = 0;
  }
  else
  {
    LOWORD(v16) = *((_WORD *)v8 + 14);
    double v75 = (double)*(unint64_t *)&v16;
    double v76 = v8[1];
    if (*((unsigned char *)v8 + 16))
    {
      uint64_t v77 = SummerAdd(v75, v76);
      uint64_t v15 = v9 + 305168;
      uint64_t v74 = v77;
      if ((v77 & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNACKGenerator_AddPacketInfo_cold_7();
          }
        }
        goto LABEL_107;
      }
    }
    else
    {
      uint64_t v78 = SummerAdd(v75, v76);
      uint64_t v15 = v9 + 305168;
      uint64_t v74 = v78;
      if ((v78 & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNACKGenerator_AddPacketInfo_cold_3();
          }
        }
        goto LABEL_107;
      }
    }
  }
  double v79 = *(double *)(v15 + 264);
  if (v79 != 0.0)
  {
    double v80 = v8[1] - v79;
    if (v80 <= 0.1)
    {
      int v83 = *(unsigned __int8 *)(v15 + 272);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v135 = VRTraceErrorLogLevelToCSTR();
        v136 = *MEMORY[0x1E4F47A50];
        v137 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            *(void *)&uint8_t buf[4] = v135;
            __int16 v156 = 2080;
            v157 = "_VCNACKGenerator_CheckBitrateLimits";
            __int16 v158 = 1024;
            int v159 = 612;
            __int16 v160 = 2048;
            *(double *)v161 = v80;
            _os_log_impl(&dword_1E1EA4000, v136, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Use cached canSendNACK, timeSinceLastCheck=%f", buf, 0x26u);
          }
        }
        else if (os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
        {
          VCNACKGenerator_AddPacketInfo_cold_4();
        }
      }
      uint64_t v87 = v9 + 305168;
LABEL_100:
      uint64_t v96 = v39;
      unint64_t v94 = *(void *)v39;
      uint64_t v95 = *(void *)(v96 + 8);
      if ((v94 & v95) != 0xFFFFFFFFFFFFFFFFLL && v83)
      {
        unsigned int v142 = v74;
        if (((*((unsigned char *)v8 + 31) == 0) & ~v148) != 0)
        {
          uint64_t v98 = v9 + 4768 * v11;
          unsigned int v97 = v11;
          if (*(_WORD *)(v98 + 4768) && *((unsigned __int16 *)v8 + 2) < *(unsigned __int16 *)(v98 + 4768)) {
            *(_WORD *)(v98 + 4768) = 0;
          }
        }
        else
        {
          *(_WORD *)(v9 + 4768 * v11 + 4768) = *((_WORD *)v8 + 2);
          unsigned int v97 = v11;
        }
        __int16 v99 = v8;
        int v141 = 0;
        unsigned __int16 v144 = 0;
        unsigned int v146 = v97;
        char v100 = 0;
        uint64_t v101 = v9;
        double v102 = (unsigned __int16 *)(v9 + 4768 * v97 + 4768);
        int v103 = 17;
LABEL_114:
        int v104 = v103;
        while (*(double *)(v87 + 280) < 0.2 || *(int *)(v87 + 424) > 0)
        {
          if ((v104 & 0x40) != 0) {
            unint64_t v105 = v94 << v104;
          }
          else {
            unint64_t v105 = (v95 << v104) | (v94 >> 1 >> ~(_BYTE)v104);
          }
          if ((v105 & 0x8000000000000000) != 0) {
            goto LABEL_139;
          }
          double v106 = v23;
          unsigned __int16 v107 = *v23 - v104;
          BOOL v109 = *(double *)(v87 + 304) >= 0.1 && v107 > (unsigned __int16)*v149;
          if (v107 <= *v102 || v109) {
            goto LABEL_138;
          }
          int NACK = _VCNACKGenerator_ShouldGenerateNACK(v101, v150, v107, *((unsigned __int8 *)v99 + 31), v148, v99[1]);
          if (v100)
          {
            uint64_t v87 = v151;
            if (NACK)
            {
              v141 |= 1 << (~(_BYTE)v144 + v107);
              goto LABEL_136;
            }
LABEL_137:
            char v100 = 1;
LABEL_138:
            uint64_t v23 = v106;
LABEL_139:
            int v103 = v104 - 1;
            if (v104) {
              goto LABEL_114;
            }
            break;
          }
          uint64_t v87 = v151;
          if (NACK)
          {
            unsigned __int16 v144 = v107;
LABEL_136:
            --*(_DWORD *)(v87 + 424);
            goto LABEL_137;
          }
          char v100 = 0;
          --v104;
          uint64_t v23 = v106;
          if (v104 == -1) {
            goto LABEL_146;
          }
        }
        if (v100)
        {
          uint64_t v9 = v101;
          if (*(void *)v87)
          {
            long long v8 = v99;
            uint64_t v74 = v142;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v111 = VRTraceErrorLogLevelToCSTR();
              double v112 = *MEMORY[0x1E4F47A50];
              __int16 v113 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                {
                  int v114 = *v150;
                  uint64_t v115 = *(void *)(v151 + 32);
                  double v116 = *(double *)(v151 + 280) * 100.0;
                  *(_DWORD *)CMTime buf = 136317442;
                  *(void *)&uint8_t buf[4] = v111;
                  __int16 v156 = 2080;
                  v157 = "_VCNACKGenerator_AttemptToRequestNACK";
                  __int16 v158 = 1024;
                  int v159 = 513;
                  __int16 v160 = 1024;
                  *(_DWORD *)v161 = v114;
                  *(_WORD *)&v161[4] = 1024;
                  *(_DWORD *)&v161[6] = v114;
                  *(_WORD *)v162 = 1024;
                  *(_DWORD *)&v162[2] = v144;
                  *(_WORD *)v163 = 1024;
                  *(_DWORD *)&v163[2] = v144;
                  *(_WORD *)v164 = 1024;
                  *(_DWORD *)&v164[2] = (unsigned __int16)v141;
                  *(_WORD *)&v164[6] = 2048;
                  *(void *)&v164[8] = v115;
                  *(_WORD *)&v164[16] = 2048;
                  *(double *)&v164[18] = v116;
                  _os_log_impl(&dword_1E1EA4000, v112, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Sending NACK for ssrc=%u ssrc=0x%x and lowestSeqNum=%u lowestSeqNum=0x%x, requestBitMask=0x%0000x rtt=%2.3fs plr=%1.3f%%", buf, 0x4Eu);
                }
              }
              else if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
              {
                int v138 = *v150;
                uint64_t v139 = *(void *)(v151 + 32);
                double v140 = *(double *)(v151 + 280) * 100.0;
                *(_DWORD *)CMTime buf = 136317442;
                *(void *)&uint8_t buf[4] = v111;
                __int16 v156 = 2080;
                v157 = "_VCNACKGenerator_AttemptToRequestNACK";
                __int16 v158 = 1024;
                int v159 = 513;
                __int16 v160 = 1024;
                *(_DWORD *)v161 = v138;
                *(_WORD *)&v161[4] = 1024;
                *(_DWORD *)&v161[6] = v138;
                *(_WORD *)v162 = 1024;
                *(_DWORD *)&v162[2] = v144;
                *(_WORD *)v163 = 1024;
                *(_DWORD *)&v163[2] = v144;
                *(_WORD *)v164 = 1024;
                *(_DWORD *)&v164[2] = (unsigned __int16)v141;
                *(_WORD *)&v164[6] = 2048;
                *(void *)&v164[8] = v139;
                *(_WORD *)&v164[16] = 2048;
                *(double *)&v164[18] = v140;
                _os_log_debug_impl(&dword_1E1EA4000, v112, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Sending NACK for ssrc=%u ssrc=0x%x and lowestSeqNum=%u lowestSeqNum=0x%x, requestBitMask=0x%0000x rtt=%2.3fs plr=%1.3f%%", buf, 0x4Eu);
              }
            }
            (*(void (**)(void, void, void, void, double))v151)(*(void *)(v151 + 8), *v150, v144, (unsigned __int16)v141, v8[1]);
            uint64_t v123 = *((void *)v8 + 1);
            unsigned int v11 = v146;
            if (*(unsigned char *)(v151 + 51))
            {
              uint64_t v124 = *(FILE ***)(v151 + 56);
            }
            else
            {
              uint64_t v124 = LogDump_OpenLog(v9 + 305232, (uint64_t)"NackGenerator", (uint64_t)".nackdump", (char)"Timestamp\tRequestTime\tType\tSSRC\tHighestSeqNum\tBitmask\tResponseTime\n", 9, (char)"1.0");
              *(void *)(v151 + 56) = v124;
              *(unsigned char *)(v151 + 51) = 1;
            }
            VRLogfilePrintWithTimestamp((uint64_t)v124, "%5.3f\t%s\t%u\t%u\t0x%x\t-\t%d\n", v117, v118, v119, v120, v121, v122, v123);
            goto LABEL_155;
          }
          unsigned int v11 = v146;
          float v13 = v147;
        }
        else
        {
LABEL_146:
          unsigned int v11 = v146;
          float v13 = v147;
          uint64_t v9 = v101;
        }
        long long v8 = v99;
        uint64_t v74 = v142;
        goto LABEL_156;
      }
LABEL_155:
      float v13 = v147;
      goto LABEL_156;
    }
  }
  if ((_VCNACKGenerator_GetBitrate(v9, &v153, &v152, 1.0) & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKGenerator_AddPacketInfo_cold_5();
      }
    }
  }
  else
  {
    if (v153 == 0.0) {
      double v81 = 0.0;
    }
    else {
      double v81 = v152 / v153;
    }
    double v82 = *(float *)(v9 + 305504);
    int v83 = v81 < v82;
    uint64_t v84 = *(void *)(v9 + 305480);
    double v85 = v8[1] + -0.1;
    int v154 = 0;
    *(void *)CMTime buf = 0;
    uint64_t v86 = SummerLengthPred(v85, v84, (uint64_t (*)(double, double, double))SummerGreaterThan, (double *)buf, &v154);
    if ((v86 & 0x80000000) == 0)
    {
      uint64_t v74 = v86;
      *(_DWORD *)(v9 + 305592) = vcvtpd_s64_f64((double)v154 * *(float *)(v9 + 305504));
      uint64_t v87 = v9 + 305168;
      if (*(unsigned __int8 *)(v9 + 305440) != v83)
      {
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        uint64_t v87 = v9 + 305168;
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v89 = VRTraceErrorLogLevelToCSTR();
          double v90 = *MEMORY[0x1E4F47A50];
          BOOL v91 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
          uint64_t v87 = v9 + 305168;
          if (v91)
          {
            int v92 = *(unsigned __int8 *)(v9 + 305440);
            int v93 = *(_DWORD *)(v9 + 305592);
            *(_DWORD *)CMTime buf = 136317442;
            *(void *)&uint8_t buf[4] = v89;
            __int16 v156 = 2080;
            v157 = "_VCNACKGenerator_CheckBitrateLimits";
            __int16 v158 = 1024;
            int v159 = 625;
            __int16 v160 = 2048;
            *(void *)v161 = v9;
            *(_WORD *)&v161[8] = 1024;
            *(_DWORD *)v162 = v92;
            *(_WORD *)&v162[4] = 1024;
            *(_DWORD *)v163 = v81 < v82;
            *(_WORD *)&v163[4] = 2048;
            *(double *)v164 = v153;
            *(_WORD *)&v164[8] = 2048;
            *(double *)&v164[10] = v152;
            *(_WORD *)&v164[18] = 2048;
            *(double *)&v164[20] = v81;
            *(_WORD *)&v164[28] = 1024;
            *(_DWORD *)v165 = v93;
            _os_log_impl(&dword_1E1EA4000, v90, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNACKGenerator[%p] Based on bitrate limits, canSendNack changed from mostRecentCanSendNackStatus=%d to canSendNack=%d, mediaBitrate=%3.3f, retransmittedBitrate=%3.3f, overhead=%3.3f nackGenerator->nackBudget=%d", buf, 0x56u);
            uint64_t v87 = v9 + 305168;
          }
        }
      }
      *(double *)(v87 + 264) = v8[1];
      *(unsigned char *)(v87 + 272) = v83;
      goto LABEL_100;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKGenerator_AddPacketInfo_cold_6();
      }
    }
  }
LABEL_107:
  uint64_t v74 = 2152071190;
  float v13 = v147;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      VCNACKGenerator_AddPacketInfo_cold_2();
      uint64_t v74 = 2152071190;
    }
  }
LABEL_156:
  if (!*v13)
  {
LABEL_157:
    uint64_t v125 = v9 + 4768 * v11;
    *(_WORD *)(v125 + 20) = *((_WORD *)v8 + 2);
    *float v13 = 1;
    *(void *)&long long v126 = -1;
    *((void *)&v126 + 1) = -1;
    *(_OWORD *)(v125 + 32) = v126;
    *(_OWORD *)(v125 + 48) = v126;
    *(double *)(v125 + 4760) = v8[1];
  }
  return v74;
}

uint64_t VCNACKGenerator_UpdateRTT(uint64_t a1, double a2)
{
  if (a1)
  {
    uint64_t v2 = 0;
    *(double *)(a1 + 305200) = a2;
  }
  else
  {
    uint64_t v2 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKGenerator_UpdateRTT_cold_1();
      }
    }
  }
  return v2;
}

uint64_t VCNACKGenerator_UpdatePlayoutRTPTimestamp(uint64_t a1, int a2, int a3)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 4768 * (a2 & 0x3F) + 22) && *(_DWORD *)(a1 + 4768 * (a2 & 0x3F) + 16) == a2)
    {
      uint64_t v3 = 0;
      *(_DWORD *)(a1 + 4768 * (a2 & 0x3F) + 4716) = a3;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v3 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNACKGenerator_UpdatePlayoutRTPTimestamp_cold_1();
      }
    }
  }
  return v3;
}

void _VCNACKGenerator_Init(uint64_t a1)
{
  double v1 = (void *)(a1 + 305480);
  bzero((void *)(a1 + 16), 0x4A9B0uLL);
  void *v1 = 0xFFFFFFFFLL;
  v1[1] = 0xFFFFFFFFLL;
}

void _VCNACKGenerator_Finalize(uint64_t a1)
{
  double v1 = (void *)(a1 + 305224);
  uint64_t v2 = *(void *)(a1 + 305224);
  if (v2)
  {
    LogDump_CloseLog(v2);
    void *v1 = 0;
  }
  if (v1[33] != 0xFFFFFFFFLL) {
    SummerCloseHandle();
  }
  if (v1[32] != 0xFFFFFFFFLL) {
    SummerCloseHandle();
  }
  uint64_t v3 = (const void *)v1[44];
  if (v3)
  {
    CFRelease(v3);
    v1[44] = 0;
  }
}

uint64_t _VCNACKGenerator_ShouldGenerateNACK(uint64_t a1, int *a2, int a3, int a4, int a5, double a6)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (float *)(a1 + 305512);
  uint64_t v10 = a1 + 305200;
  uint64_t v11 = a3;
  uint64_t v12 = (uint64_t)a2 + 2 * a3;
  int v65 = *(unsigned __int16 *)(v12 + 4144);
  BOOL v13 = v65 == a3 && *(double *)&a2[2 * a3 + 524] != 0.0;
  float v14 = *(double *)(a1 + 305448);
  float v15 = *(float *)(a1 + 305532);
  if (*(float *)(a1 + 305528) < v14 && v15 >= v14)
  {
    float v19 = (float *)(a1 + 305516);
LABEL_16:
    float v20 = *v19;
    goto LABEL_17;
  }
  float v17 = *(float *)(a1 + 305536);
  if (v15 < v14 && v17 >= v14)
  {
    float v19 = (float *)(a1 + 305520);
    goto LABEL_16;
  }
  if (v17 < v14)
  {
    float v19 = (float *)(a1 + 305524);
    goto LABEL_16;
  }
  float v20 = *v9;
LABEL_17:
  double v21 = v20;
  if (*(double *)(a1 + 305456) != v20)
  {
    int v22 = a5;
    BOOL v23 = v13;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v63 = VRTraceErrorLogLevelToCSTR();
      int v24 = *MEMORY[0x1E4F47A50];
      unsigned int v25 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = *(void *)(v10 + 248);
          uint64_t v26 = *(void *)(v10 + 256);
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v68 = v63;
          __int16 v69 = 2080;
          int v70 = "_VCNACKGenerator_CalculateAndUpdateNACKGenerationThrottlingFactor";
          __int16 v71 = 1024;
          int v72 = 421;
          __int16 v73 = 2048;
          *(void *)uint64_t v74 = v26;
          *(_WORD *)&v74[8] = 2048;
          double v75 = v21;
          *(_WORD *)double v76 = 2048;
          *(void *)&v76[2] = v27;
          _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nackGenerationThrottlingFactor changed from old=%f => new=[%f] at PLR=%f", buf, 0x3Au);
        }
      }
      else if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v54 = *(void *)(v10 + 248);
        uint64_t v53 = *(void *)(v10 + 256);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v68 = v63;
        __int16 v69 = 2080;
        int v70 = "_VCNACKGenerator_CalculateAndUpdateNACKGenerationThrottlingFactor";
        __int16 v71 = 1024;
        int v72 = 421;
        __int16 v73 = 2048;
        *(void *)uint64_t v74 = v53;
        *(_WORD *)&v74[8] = 2048;
        double v75 = v21;
        *(_WORD *)double v76 = 2048;
        *(void *)&v76[2] = v54;
        _os_log_debug_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEBUG, " [%s] %s:%d nackGenerationThrottlingFactor changed from old=%f => new=[%f] at PLR=%f", buf, 0x3Au);
      }
    }
    *(double *)(v10 + 256) = v21;
    BOOL v13 = v23;
    a5 = v22;
  }
  BOOL v28 = (_WORD *)(v12 + 4144);
  signed int v29 = &a2[2 * v11];
  double v30 = *((double *)v29 + 262);
  if (v30 == 0.0)
  {
    BOOL v32 = 0;
    double v31 = *(double *)v10;
  }
  else
  {
    double v31 = *(double *)v10;
    BOOL v32 = a6 - v30 <= *(double *)v10 * v21;
  }
  unsigned int v33 = (double *)(v29 + 524);
  uint64_t v34 = &a2[2 * v11];
  double v36 = *((double *)v34 + 6);
  uint64_t v35 = (double *)(v34 + 12);
  double v37 = v36;
  BOOL v38 = v36 != 0.0;
  BOOL v39 = a6 - v36 > 1.0 && v38;
  double v40 = *(double *)(v10 + 248);
  double v41 = v9[8];
  double v42 = v9[9];
  BOOL v43 = v31 > v42 || v40 > v41;
  int v44 = (v13 && (v32 || v39)) | a4 | a5 | v43;
  if (v44)
  {
    BOOL v64 = v13;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v61 = VRTraceErrorLogLevelToCSTR();
      uint64_t v45 = *MEMORY[0x1E4F47A50];
      log = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          int v46 = *a2;
          double v47 = *v33;
          double v48 = *v35;
          double v49 = *(double *)v10;
          double v50 = *(double *)(v10 + 248) * 100.0;
          int v51 = (unsigned __int16)*v28;
          *(_DWORD *)CMTime buf = 136321026;
          uint64_t v68 = v61;
          __int16 v69 = 2080;
          int v70 = "_VCNACKGenerator_ShouldGenerateNACK";
          __int16 v71 = 1024;
          int v72 = 457;
          __int16 v73 = 1024;
          *(_DWORD *)uint64_t v74 = v64;
          *(_WORD *)&v74[4] = 1024;
          *(_DWORD *)&v74[6] = v32;
          LOWORD(v75) = 1024;
          *(_DWORD *)((char *)&v75 + 2) = v39;
          HIWORD(v75) = 1024;
          *(_DWORD *)double v76 = v46;
          *(_WORD *)&v76[4] = 1024;
          *(_DWORD *)&v76[6] = v46;
          __int16 v77 = 1024;
          int v78 = a3;
          __int16 v79 = 1024;
          int v80 = a3;
          __int16 v81 = 2048;
          double v82 = a6;
          __int16 v83 = 2048;
          double v84 = v47;
          __int16 v85 = 2048;
          double v86 = a6 - v47;
          __int16 v87 = 2048;
          double v88 = v48;
          __int16 v89 = 2048;
          double v90 = a6 - v48;
          __int16 v91 = 2048;
          double v92 = v49;
          __int16 v93 = 2048;
          double v94 = v50;
          __int16 v95 = 2048;
          double v96 = v21;
          __int16 v97 = 1024;
          BOOL v98 = v65 == a3;
          __int16 v99 = 1024;
          int v100 = v51;
          __int16 v101 = 1024;
          int v102 = v11;
          __int16 v103 = 1024;
          BOOL v104 = v40 > v41;
          __int16 v105 = 1024;
          BOOL v106 = v31 > v42;
          __int16 v107 = 1024;
          BOOL v108 = v43;
          _os_log_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Not sending NACK because [nackGenerated=%d throttleNackGeneration=%d missingPacketIsTooOld=%d] ssrc=%u ssrc=0x%x and seqNum=%u seqNum=0x%x arrivalTime=%f timeOfRequest=%f diff=%f timeOfFirstRequest=%f diff=%f rtt=%2.3fs plr=%3.2f%% nackGenerationThrottlingFactor=%f isSameSeqNum=%d seqNumRequested=%u seqNumHash=%d highPacketLossRatioObserved=%d highRTTObserved=%d disableNACKDueToUnsuitableNetworkConditions=%d", buf, 0xBAu);
        }
      }
      else if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        int v55 = *a2;
        double v56 = *v33;
        double v57 = *v35;
        double v58 = *(double *)v10;
        double v59 = *(double *)(v10 + 248) * 100.0;
        int v60 = (unsigned __int16)*v28;
        *(_DWORD *)CMTime buf = 136321026;
        uint64_t v68 = v61;
        __int16 v69 = 2080;
        int v70 = "_VCNACKGenerator_ShouldGenerateNACK";
        __int16 v71 = 1024;
        int v72 = 457;
        __int16 v73 = 1024;
        *(_DWORD *)uint64_t v74 = v64;
        *(_WORD *)&v74[4] = 1024;
        *(_DWORD *)&v74[6] = v32;
        LOWORD(v75) = 1024;
        *(_DWORD *)((char *)&v75 + 2) = v39;
        HIWORD(v75) = 1024;
        *(_DWORD *)double v76 = v55;
        *(_WORD *)&v76[4] = 1024;
        *(_DWORD *)&v76[6] = v55;
        __int16 v77 = 1024;
        int v78 = a3;
        __int16 v79 = 1024;
        int v80 = a3;
        __int16 v81 = 2048;
        double v82 = a6;
        __int16 v83 = 2048;
        double v84 = v56;
        __int16 v85 = 2048;
        double v86 = a6 - v56;
        __int16 v87 = 2048;
        double v88 = v57;
        __int16 v89 = 2048;
        double v90 = a6 - v57;
        __int16 v91 = 2048;
        double v92 = v58;
        __int16 v93 = 2048;
        double v94 = v59;
        __int16 v95 = 2048;
        double v96 = v21;
        __int16 v97 = 1024;
        BOOL v98 = v65 == a3;
        __int16 v99 = 1024;
        int v100 = v60;
        __int16 v101 = 1024;
        int v102 = v11;
        __int16 v103 = 1024;
        BOOL v104 = v40 > v41;
        __int16 v105 = 1024;
        BOOL v106 = v31 > v42;
        __int16 v107 = 1024;
        BOOL v108 = v43;
        _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Not sending NACK because [nackGenerated=%d throttleNackGeneration=%d missingPacketIsTooOld=%d] ssrc=%u ssrc=0x%x and seqNum=%u seqNum=0x%x arrivalTime=%f timeOfRequest=%f diff=%f timeOfFirstRequest=%f diff=%f rtt=%2.3fs plr=%3.2f%% nackGenerationThrottlingFactor=%f isSameSeqNum=%d seqNumRequested=%u seqNumHash=%d highPacketLossRatioObserved=%d highRTTObserved=%d disableNACKDueToUnsuitableNetworkConditions=%d", buf, 0xBAu);
      }
    }
  }
  else
  {
    *unsigned int v33 = a6;
    if (v37 == 0.0) {
      *uint64_t v35 = a6;
    }
    *BOOL v28 = a3;
    ++*((void *)a2 + 582);
    if (!v13) {
      ++*((void *)a2 + 585);
    }
  }
  return v44 ^ 1u;
}

void sub_1E23B219C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23B2248(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23B24EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23B2684(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23B27DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23B2958(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23B2B3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23B2D28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23B3C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1E23B405C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t VCMediaStreamMultiwayConfig_RemoteIDSParticipantID(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

const char *VCMediaStreamConfig_CipherSuiteDescription(unint64_t a1)
{
  if (a1 > 9) {
    return "Invalid";
  }
  else {
    return off_1E6DB9480[a1];
  }
}

uint64_t VCMediaStreamConfig_Direction(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t VCMediaStreamConfig_MultiwayConfig(uint64_t result)
{
  if (result) {
    return *(void *)(result + 224);
  }
  return result;
}

double VCMediaStreamConfig_DecryptionTimeOutInterval(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 136);
  }
  else {
    return 0.0;
  }
}

double VCMediaStreamConfig_DecryptionMKMRecoveryInterval(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 128);
  }
  else {
    return 0.0;
  }
}

void sub_1E23C30F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23C31DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

SIPClientDataDictionary *SIPClientDictionaryCInterface_Create()
{
  return objc_alloc_init(SIPClientDataDictionary);
}

uint64_t SIPClientDictionaryCInterface_CopyObjectForKey(void *a1, const char *a2, uint64_t a3)
{
  return [a1 copyObjectForKey:a2 p2pID:a3];
}

uint64_t SIPClientDictionaryCInterface_SetObjectForKey(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return [a1 setObject:a3 forKey:a2 forP2PID:a4];
}

void VCVirtualAVCaptureConnection_OnMediaSample(uint64_t a1, const void *a2, uint64_t a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  if (*(unsigned char *)(a1 + 52)) {
    VCVirtualAVCaptureVideoDataOutput_OnMediaSample(*(void *)(a1 + 32), a2, a3, a1);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
}

void sub_1E23C3AF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23C4054(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23C5ED8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23C605C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *VCMemoryPool_Create(unint64_t a1)
{
  uint64_t result = malloc_type_malloc(0x20uLL, 0x10800401BEB856BuLL);
  if (result)
  {
    uint64_t v3 = 8;
    if (a1 > 8) {
      uint64_t v3 = a1;
    }
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = v3;
  }
  return result;
}

void *VCMemoryPool_Alloc(OSQueueHead *a1)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMemoryPool_Alloc_cold_1(v5, v6);
      }
    }
    return 0;
  }
  uint64_t v2 = OSAtomicDequeue(a1, 0);
  size_t opaque1 = (size_t)a1[1].opaque1;
  if (v2)
  {
    uint64_t v4 = v2;
    bzero(v2, opaque1);
    return v4;
  }

  return malloc_type_calloc(1uLL, opaque1, 0xA61529CBuLL);
}

void VCMemoryPool_Free(OSQueueHead *__list, void *__new)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (__list && __new)
  {
    OSAtomicEnqueue(__list, __new, 0);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    uint64_t v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v6 = 136316162;
      uint64_t v7 = v4;
      __int16 v8 = 2080;
      uint64_t v9 = "VCMemoryPool_Free";
      __int16 v10 = 1024;
      int v11 = 51;
      __int16 v12 = 2048;
      BOOL v13 = __list;
      __int16 v14 = 2048;
      float v15 = __new;
      _os_log_error_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_ERROR, " [%s] %s:%d invalid memory pool %p or pointer %p!", (uint8_t *)&v6, 0x30u);
    }
  }
}

void VCMemoryPool_Destroy(OSQueueHead *__list)
{
  if (__list)
  {
    while (1)
    {
      uint64_t v2 = OSAtomicDequeue(__list, 0);
      if (!v2) {
        break;
      }
      free(v2);
    }
    free(__list);
  }
}

uint64_t VCFeatureFlagManager_U1AuthTagEnabled()
{
  if (VCFeatureFlagManager_U1AuthTagEnabled_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_U1AuthTagEnabled_onceToken, &__block_literal_global_92);
  }
  return VCFeatureFlagManager_U1AuthTagEnabled_result;
}

uint64_t VCFeatureFlagManager_UseShortMKI()
{
  if (VCFeatureFlagManager_UseShortMKI_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_UseShortMKI_onceToken, &__block_literal_global_45);
  }
  return VCFeatureFlagManager_UseShortMKI_result;
}

BOOL VCFeatureFlagManager_SessionBasedMutingEnabled()
{
  if (VCFeatureFlagManager_SessionBasedMutingEnabled_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_SessionBasedMutingEnabled_onceToken, &__block_literal_global_5_0);
  }
  uint64_t v0 = VCFeatureFlagManager_SessionBasedMutingEnabled_result;

  return VCDefaults_GetBoolValueForKey(@"forceEnableSessionBasedMuting", v0);
}

uint64_t VCFeatureFlagManager_UseOptimizedTelephonyHandovers()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_UseOptimizedTelephonyHandovers_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_UseOptimizedTelephonyHandovers_onceToken, &__block_literal_global_18_1);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 67109120;
    v1[1] = VCFeatureFlagManager_UseOptimizedTelephonyHandovers_result;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: PSVoiceOnAPUseHandOverOpt=%d", (uint8_t *)v1, 8u);
  }
  return VCFeatureFlagManager_UseOptimizedTelephonyHandovers_result;
}

BOOL VCFeatureFlagManager_DaemonCrashRecovery()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _os_feature_enabled_impl();
  int v1 = v0;
  BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"enableDaemonCrashRecovery", v0);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109376;
    v4[1] = v1;
    __int16 v5 = 1024;
    BOOL v6 = BoolValueForKey;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: featureFlag=%d, DaemonCrashRecovery=%d", (uint8_t *)v4, 0xEu);
  }
  return BoolValueForKey;
}

uint64_t VCFeatureFlagManager_PreviewMSROptimizationForEmbedded()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_PreviewMSROptimizationForEmbedded_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_PreviewMSROptimizationForEmbedded_onceToken, &__block_literal_global_26);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 67109120;
    v1[1] = VCFeatureFlagManager_PreviewMSROptimizationForEmbedded_result;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: PreviewMSROptimizationForEmbedded=%d", (uint8_t *)v1, 8u);
  }
  return VCFeatureFlagManager_PreviewMSROptimizationForEmbedded_result;
}

uint64_t VCFeatureFlagManager_SkipNonInfraWiFiAssertion()
{
  if (VCFeatureFlagManager_SkipNonInfraWiFiAssertion_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_SkipNonInfraWiFiAssertion_onceToken, &__block_literal_global_33);
  }
  return VCFeatureFlagManager_SkipNonInfraWiFiAssertion_result;
}

BOOL VCFeatureFlagManager_UseOutOfProcessVideoDecoding()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _os_feature_enabled_impl();
  if (!+[VCHardwareSettings supportsOutOfProcessVideoDecoding])
  {
    uint64_t v0 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 67109120;
      int v5 = 0;
      _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseOutOfProcessVideoDecoding=%d set by supportsOutOfProcessVideoDecoding", (uint8_t *)&v4, 8u);
      uint64_t v0 = 0;
    }
  }
  int v1 = objc_msgSend(+[GKSConnectivitySettings getAllSettings](GKSConnectivitySettings, "getAllSettings"), "objectForKeyedSubscript:", @"vc-out-of-process-video-decoding");
  if (v1)
  {
    if (([v1 BOOLValue] & 1) == 0)
    {
      uint64_t v0 = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 67109120;
        int v5 = 0;
        _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseOutOfProcessVideoDecoding=%d set by GKSConnectivitySettings", (uint8_t *)&v4, 8u);
        uint64_t v0 = 0;
      }
    }
  }
  BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"useOutOfProcessVideoDecoding", v0);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 67109376;
    int v5 = v0;
    __int16 v6 = 1024;
    BOOL v7 = BoolValueForKey;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: flag=%d, UseOutOfProcessVideoDecoding=%d", (uint8_t *)&v4, 0xEu);
  }
  return BoolValueForKey;
}

BOOL VCFeatureFlagManager_UseOutOfProcessAudioDecoding()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _os_feature_enabled_impl();
  if (!+[VCHardwareSettings supportsOutOfProcessAudioDecoding])
  {
    uint64_t v0 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 67109120;
      int v5 = 0;
      _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseOutOfProcessAudioDecoding=%d set by supportsOutOfProcessAudioDecoding", (uint8_t *)&v4, 8u);
      uint64_t v0 = 0;
    }
  }
  int v1 = objc_msgSend(+[GKSConnectivitySettings getAllSettings](GKSConnectivitySettings, "getAllSettings"), "objectForKeyedSubscript:", @"vc-out-of-process-audio-decoding");
  if (v1)
  {
    if (([v1 BOOLValue] & 1) == 0)
    {
      uint64_t v0 = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 67109120;
        int v5 = 0;
        _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseOutOfProcessAudioDecoding=%d set by GKSConnectivitySettings", (uint8_t *)&v4, 8u);
        uint64_t v0 = 0;
      }
    }
  }
  BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"useOutOfProcessAudioDecoding", v0);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 67109376;
    int v5 = v0;
    __int16 v6 = 1024;
    BOOL v7 = BoolValueForKey;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: flag=%d, UseOutOfProcessAudioDecoding=%d", (uint8_t *)&v4, 0xEu);
  }
  return BoolValueForKey;
}

uint64_t VCFeatureFlagManager_UseTLE()
{
  if (VCFeatureFlagManager_UseTLE_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_UseTLE_onceToken, &__block_literal_global_49);
  }
  return VCFeatureFlagManager_UseTLE_result;
}

BOOL VCFeatureFlagManager_UseAnalyzerSpeechAPI()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_UseAnalyzerSpeechAPI_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_UseAnalyzerSpeechAPI_onceToken, &__block_literal_global_52);
  }
  BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"useAnalyzerSpeechAPI", VCFeatureFlagManager_UseAnalyzerSpeechAPI_flag);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = BoolValueForKey;
    __int16 v3 = 1024;
    int v4 = VCFeatureFlagManager_UseAnalyzerSpeechAPI_flag;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseAnalyzerSpeechAPI=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return BoolValueForKey;
}

BOOL VCFeatureFlagManager_UseBlockDurationHinting()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_UseBlockDurationHinting_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_UseBlockDurationHinting_onceToken, &__block_literal_global_58_0);
  }
  BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"useBlockDurationHinting", VCFeatureFlagManager_UseBlockDurationHinting_flag);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = BoolValueForKey;
    __int16 v3 = 1024;
    int v4 = VCFeatureFlagManager_UseBlockDurationHinting_flag;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseBlockDurationHinting=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return BoolValueForKey;
}

BOOL VCFeatureFlagManager_RecordingResiliencyEnabled()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_RecordingResiliencyEnabled_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_RecordingResiliencyEnabled_onceToken, &__block_literal_global_66);
  }
  BOOL v0 = VCDefaults_GetBoolValueForKey(@"recordingResiliencyEnabled", VCFeatureFlagManager_RecordingResiliencyEnabled_flag)|| VCFeatureFlagManager_CallRecordingEnabled();
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = v0;
    __int16 v3 = 1024;
    int v4 = VCFeatureFlagManager_RecordingResiliencyEnabled_flag;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: RecordingResiliency=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return v0;
}

BOOL VCFeatureFlagManager_CallRecordingEnabled()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_CallRecordingEnabled_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_CallRecordingEnabled_onceToken, &__block_literal_global_78);
  }
  BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"callRecordingEnabled", VCFeatureFlagManager_CallRecordingEnabled_flag);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = BoolValueForKey;
    __int16 v3 = 1024;
    int v4 = VCFeatureFlagManager_CallRecordingEnabled_flag;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: CallRecording=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return BoolValueForKey;
}

BOOL VCFeatureFlagManager_LocalRecordingEnabled()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_LocalRecordingEnabled_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_LocalRecordingEnabled_onceToken, &__block_literal_global_72);
  }
  BOOL v0 = VCDefaults_GetBoolValueForKey(@"localRecordingEnabled", VCFeatureFlagManager_LocalRecordingEnabled_flag)|| VCFeatureFlagManager_CallRecordingEnabled();
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = v0;
    __int16 v3 = 1024;
    int v4 = VCFeatureFlagManager_LocalRecordingEnabled_flag;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: LocalRecording=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return v0;
}

uint64_t VCFeatureFlagManager_FoveationEnabled()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (VCFeatureFlagManager_FoveationEnabled_onceToken != -1) {
    dispatch_once(&VCFeatureFlagManager_FoveationEnabled_onceToken, &__block_literal_global_90_0);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 67109120;
    v1[1] = VCFeatureFlagManager_FoveationEnabled_flag;
    _os_log_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: MVDFoveation=%d", (uint8_t *)v1, 8u);
  }
  return VCFeatureFlagManager_FoveationEnabled_flag;
}

void sub_1E23D093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCTimescalePSOLA_CalcFsMult(int a1)
{
  if (a1 > 31999)
  {
    if (a1 != 32000)
    {
      if (a1 == 48000) {
        return 6;
      }
      return 1;
    }
    return 4;
  }
  else
  {
    if (a1 != 16000)
    {
      if (a1 == 24000) {
        return 3;
      }
      return 1;
    }
    return 2;
  }
}

uint64_t VCTimescalePSOLA_DownSampleTo4kHz(uint64_t a1, __int16 a2, int a3, _WORD *a4, __int16 a5, int a6)
{
  if (a3 <= 23999)
  {
    if (a3 == 8000)
    {
      int v7 = 2;
      int v8 = 3;
      uint64_t v9 = (__int16 *)&VCTimescalePSOLA_kDownsample8kHzTbl;
      int v6 = 2;
      goto LABEL_12;
    }
    if (a3 == 16000)
    {
      int v6 = 4;
      int v7 = 3;
      int v8 = 5;
      uint64_t v9 = (__int16 *)&VCTimescalePSOLA_kDownsample16kHzTbl;
      goto LABEL_12;
    }
    return 1;
  }
  if (a3 == 24000)
  {
    int v6 = 6;
    int v7 = 3;
    int v8 = 7;
    uint64_t v9 = (__int16 *)&VCTimescalePSOLA_kDownsample24kHzTbl;
    goto LABEL_12;
  }
  if (a3 == 32000)
  {
    int v6 = 8;
    int v7 = 4;
    int v8 = 7;
    uint64_t v9 = (__int16 *)&VCTimescalePSOLA_kDownsample32kHzTbl;
    goto LABEL_12;
  }
  if (a3 != 48000) {
    return 1;
  }
  int v6 = 12;
  int v7 = 4;
  int v8 = 7;
  uint64_t v9 = (__int16 *)&VCTimescalePSOLA_kDownsample48kHzTbl;
LABEL_12:
  if (a6) {
    int v10 = v7;
  }
  else {
    int v10 = 0;
  }
  return VCTimescalePSOLA_DownsampleFast(a1 + 2 * (v8 - 1), (__int16)(a2 - (v8 - 1)), a4, a5, v9, v8, v6, v10);
}

uint64_t VCTimescalePSOLA_SatW32ToW16(int a1)
{
  if (a1 <= -32768) {
    int v1 = -32768;
  }
  else {
    int v1 = a1;
  }
  if (v1 >= 0x7FFF) {
    return 0x7FFFLL;
  }
  else {
    return v1;
  }
}

uint64_t VCTimescalePSOLA_Normalize(uint64_t result)
{
  if (result)
  {
    if ((int)result >= 0) {
      unsigned int v1 = result;
    }
    else {
      unsigned int v1 = -(int)result;
    }
    BOOL v2 = v1 < 0x8000;
    if (v1 << (16 * v2) >= 0x800000) {
      unsigned int v3 = 16 * v2;
    }
    else {
      unsigned int v3 = (16 * (v1 < 0x8000)) | 8;
    }
    if (!(v1 << v3 >> 27)) {
      v3 |= 4u;
    }
    if (!(v1 << v3 >> 29)) {
      v3 |= 2u;
    }
    if (v1 << v3 >> 30) {
      return v3;
    }
    else {
      return v3 + 1;
    }
  }
  return result;
}

uint64_t VCTimescalePSOLA_ShiftW32(int a1, int a2)
{
  if (a2 >= 0) {
    return (a1 << a2);
  }
  else {
    return (a1 >> -(char)a2);
  }
}

_WORD *VCTimescalePSOLA_MemSetW16(_WORD *result, __int16 a2, int a3)
{
  if (a3 >= 1)
  {
    unsigned int v3 = a3 + 1;
    do
    {
      *result++ = a2;
      --v3;
    }
    while (v3 > 1);
  }
  return result;
}

float VCTimescalePSOLA_MixVoiceUnvoiceFloatPoint(float *a1, float *a2, float *a3, int a4, float result, float a6)
{
  if (a4 >= 1)
  {
    uint64_t v6 = (unsigned __int16)a4;
    float v7 = 1.0 - result;
    do
    {
      float v8 = *a2++;
      float v9 = v8;
      float v10 = *a3++;
      *a1++ = (float)(v7 * v10) + (float)(result * v9);
      uint64_t result = result - a6;
      float v7 = v7 + a6;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t VCVirtualAVCaptureDevice_OnVideoFrame(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  if (a2)
  {
    uint64_t v6 = (__CVBuffer *)CFRetain(a2);
    ResizedPixelBuffer = v6;
    if (*(_DWORD *)(a1 + 188) >= 2u) {
      goto LABEL_8;
    }
    if (v6) {
      CFRelease(v6);
    }
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 188) < 2u)
  {
LABEL_6:
    ResizedPixelBuffer = VCImageResizingConverter_CreateResizedPixelBuffer(*(void *)(a1 + 192), (__CVBuffer *)a2);
    goto LABEL_8;
  }
  ResizedPixelBuffer = 0;
LABEL_8:
  VCVideoHardwareDumpCollector_RecordActiveCaptureDevice(*(void *)(a1 + 264), *(void **)(a1 + 120));
  long long v11 = *(_OWORD *)a3;
  uint64_t v12 = *(void *)(a3 + 16);
  CMSampleBufferRef v8 = createSampleBufferWithPixelBuffer(ResizedPixelBuffer, &v11);
  if (v8)
  {
    CMSampleBufferRef v9 = v8;
    VCVirtualAVCaptureDevice_OnMediaSample(a1, v8, *MEMORY[0x1E4F15C18]);
    CFRelease(v9);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCVirtualAVCaptureDevice_OnVideoFrame_cold_1();
    }
  }
  if (ResizedPixelBuffer) {
    CFRelease(ResizedPixelBuffer);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 48));
}

void sub_1E23D5FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E23D61A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E23D6314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E23D687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t VCVirtualAVCaptureDevice_OnMediaSample(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 128);
  unint64_t result = [v5 count];
  if (result)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      VCVirtualAVCaptureDeviceInput_OnMediaSample([v5 objectAtIndexedSubscript:v7], a2, a3);
      uint64_t v7 = v8;
      unint64_t result = [v5 count];
    }
    while (result > v8++);
  }
  return result;
}

void sub_1E23D6CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCVideoStreamSendGroup_UpdateVideoStreamAndProcessFrame(uint64_t a1, void *a2, uint64_t a3, int a4, long long *a5, uint64_t a6, double a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int BaseQualityIndex = VCVideoStream_GetBaseQualityIndex((uint64_t)a2);
  double v15 = 0.0;
  if (BaseQualityIndex != 1000) {
    double v15 = *(double *)(a1 + 808);
  }
  _VCVideoStreamSendGroup_SetFECRatio(a2, v15);
  VCVideoStream_SetAudioSampleTime((uint64_t)a2, a4, a7);
  long long v17 = *a5;
  uint64_t v18 = *((void *)a5 + 2);
  return VCVideoStream_OnVideoFrame((uint64_t)a2, a3, (uint64_t)&v17, a6);
}

uint64_t _VCVideoStreamSendGroup_SetFECRatio(void *a1, double a2)
{
  int v4 = objc_msgSend((id)objc_msgSend(a1, "defaultStreamConfig"), "multiwayConfig");
  if (a2 > 0.0 && v4 != 0)
  {
    uint64_t v6 = v4;
    if (([v4 isOneToOne] & 1) == 0)
    {
      if ([v6 repairedFECLevel]) {
        int v7 = [v6 repairedFECLevel];
      }
      else {
        int v7 = 2;
      }
      a2 = FECUtil_FECLevelofProtectionToRateRatio(v7) + -1.0;
    }
  }

  return VCVideoStream_SetFECRatio((uint64_t)a1, a2);
}

void VCVideoStreamSendGroup_ProcessVideoPriority(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v1 = atomic_load((unsigned __int8 *)(a1 + 736));
  if (v1 != *(unsigned __int8 *)(a1 + 737))
  {
    uint64_t v3 = MEMORY[0x1E4E56580](a1 + 296);
    if (v3)
    {
      *(unsigned char *)(a1 + 737) = v1;
      int v4 = *(NSObject **)(a1 + 304);
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      v5[2] = __VCVideoStreamSendGroup_ProcessVideoPriority_block_invoke;
      v5[3] = &unk_1E6DB3E18;
      v5[4] = v3;
      v5[5] = a1;
      char v6 = v1;
      dispatch_async(v4, v5);
    }
  }
}

unsigned int *VCVideoStreamSendGroup_ProcessVideoEventQueue(uint64_t a1)
{
  unint64_t result = (unsigned int *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 800));
  if (result)
  {
    uint64_t v3 = result;
    do
    {
      *(double *)(a1 + 808) = VCRedundancyControllerVideo_ConvertRedundancyPercentageToRatio(*v3);
      CFArrayRef v4 = *(const __CFArray **)(a1 + 176);
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0; i != v6; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, i);
          _VCVideoStreamSendGroup_SetFECRatio(ValueAtIndex, *(double *)(a1 + 808));
        }
      }
      VCMemoryPool_Free(*(OSQueueHead **)(a1 + 792), v3);
      unint64_t result = (unsigned int *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 800));
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t VCVideoStreamSendGroup_OnVideoFrame(uint64_t a1, CMSampleBufferRef sbuf, CMTime *a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)(a1 + 868);
  if (*(unsigned char *)(a1 + 312))
  {
    if (!*(unsigned char *)(a1 + 492) || *(unsigned char *)(a1 + 712))
    {
      memset(&v45, 170, sizeof(v45));
      CMSampleBufferGetPresentationTimeStamp(&v45, sbuf);
      CMTime time = v45;
      Float64 Seconds = CMTimeGetSeconds(&time);
      double v9 = Seconds;
      *(float *)&Float64 Seconds = Seconds;
      [*(id *)(a1 + 784) setCurrentFrameTime:Seconds];
      LODWORD(v10) = *(_DWORD *)(a1 + 328);
      unsigned int v11 = VCMediaStreamSendGroup_ModulateTimestampWithSourceTimestamp(a1, (double)v10, v9);
      int v12 = _VCVideoStreamSendGroup_DidTimestampRollBackward(a1, (double)v11);
      if (!v12)
      {
        VCVideoStreamSendGroup_ProcessVideoEventQueue(a1);
        double v15 = (void *)[*(id *)(a1 + 784) activeVideoStreams];
        if ([v15 count]) {
          ++*(_DWORD *)(a1 + 872);
        }
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        uint64_t v16 = (void *)[v15 allValues];
        uint64_t v17 = [v16 countByEnumeratingWithState:&v47 objects:v46 count:16];
        if (v17)
        {
          uint64_t v18 = v17;
          uint64_t v19 = *(void *)v48;
          do
          {
            for (uint64_t i = 0; i != v18; ++i)
            {
              if (*(void *)v48 != v19) {
                objc_enumerationMutation(v16);
              }
              double v21 = *(void **)(*((void *)&v47 + 1) + 8 * i);
              CMTime time = *a3;
              VCVideoStreamSendGroup_UpdateVideoStreamAndProcessFrame(a1, v21, (uint64_t)sbuf, v11, (long long *)&time.value, a4, v9);
            }
            uint64_t v18 = [v16 countByEnumeratingWithState:&v47 objects:v46 count:16];
          }
          while (v18);
        }
        VCVideoStreamSendGroup_ProcessVideoPriority(a1);
        int v12 = 0;
        return v12 ^ 1u;
      }
      if (objc_opt_class() == a1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return v12 ^ 1u;
        }
        uint64_t v31 = VRTraceErrorLogLevelToCSTR();
        BOOL v32 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          return v12 ^ 1u;
        }
        int v33 = *(_DWORD *)(a1 + 328);
        LODWORD(time.value) = 136316418;
        *(CMTimeValue *)((char *)&time.value + 4) = v31;
        LOWORD(time.flags) = 2080;
        *(void *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
        HIWORD(time.epoch) = 1024;
        int v52 = 922;
        __int16 v53 = 1024;
        *(_DWORD *)uint64_t v54 = v11;
        *(_WORD *)&v54[4] = 2048;
        *(double *)&v54[6] = v9;
        *(_WORD *)&v54[14] = 1024;
        *(_DWORD *)&v54[16] = v33;
        uint64_t v34 = " [%s] %s:%d Video frame is too old and modulated timestamp rolled backward – dropping frame. modulatedTime"
              "stamp=%u, frameTimeInSec=%f, rtpTimestampRate=%u";
        uint64_t v35 = v32;
        uint32_t v36 = 50;
      }
      else
      {
        if (objc_opt_respondsToSelector()) {
          uint64_t v13 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
        }
        else {
          uint64_t v13 = &stru_1F3D3E450;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return v12 ^ 1u;
        }
        uint64_t v37 = VRTraceErrorLogLevelToCSTR();
        BOOL v38 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          return v12 ^ 1u;
        }
        int v44 = *(_DWORD *)(a1 + 328);
        LODWORD(time.value) = 136316930;
        *(CMTimeValue *)((char *)&time.value + 4) = v37;
        LOWORD(time.flags) = 2080;
        *(void *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
        HIWORD(time.epoch) = 1024;
        int v52 = 922;
        __int16 v53 = 2112;
        *(void *)uint64_t v54 = v13;
        *(_WORD *)&v54[8] = 2048;
        *(void *)&v54[10] = a1;
        *(_WORD *)&v54[18] = 1024;
        unsigned int v55 = v11;
        __int16 v56 = 2048;
        double v57 = v9;
        __int16 v58 = 1024;
        int v59 = v44;
        uint64_t v34 = " [%s] %s:%d %@(%p) Video frame is too old and modulated timestamp rolled backward – dropping frame. modula"
              "tedTimestamp=%u, frameTimeInSec=%f, rtpTimestampRate=%u";
        uint64_t v35 = v38;
        uint32_t v36 = 70;
      }
      _os_log_error_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&time, v36);
      return v12 ^ 1u;
    }
    if (objc_opt_class() != a1)
    {
      if (objc_opt_respondsToSelector()) {
        int v22 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
      }
      else {
        int v22 = &stru_1F3D3E450;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
        return 1;
      }
      uint64_t v42 = VRTraceErrorLogLevelToCSTR();
      BOOL v43 = *MEMORY[0x1E4F47A50];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      LODWORD(time.value) = 136316162;
      *(CMTimeValue *)((char *)&time.value + 4) = v42;
      LOWORD(time.flags) = 2080;
      *(void *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
      HIWORD(time.epoch) = 1024;
      int v52 = 909;
      __int16 v53 = 2112;
      *(void *)uint64_t v54 = v22;
      *(_WORD *)&v54[8] = 2048;
      *(void *)&v54[10] = a1;
      uint64_t v26 = " [%s] %s:%d %@(%p) Sync source timestamp information is not yet available. Dropping video frame.";
      double v30 = v43;
      goto LABEL_48;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return 1;
    }
    uint64_t v40 = VRTraceErrorLogLevelToCSTR();
    int v24 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    LODWORD(time.value) = 136315650;
    *(CMTimeValue *)((char *)&time.value + 4) = v40;
    LOWORD(time.flags) = 2080;
    *(void *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
    HIWORD(time.epoch) = 1024;
    int v52 = 909;
    uint64_t v26 = " [%s] %s:%d Sync source timestamp information is not yet available. Dropping video frame.";
LABEL_43:
    double v30 = v24;
    uint32_t v41 = 28;
LABEL_49:
    _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, v26, (uint8_t *)&time, v41);
    return 1;
  }
  if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v23 = VRTraceErrorLogLevelToCSTR();
      int v24 = *MEMORY[0x1E4F47A50];
      unsigned int v25 = *MEMORY[0x1E4F47A50];
      if (!*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
          VCVideoStreamSendGroup_OnVideoFrame_cold_1();
        }
        return 1;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(time.value) = 136315650;
        *(CMTimeValue *)((char *)&time.value + 4) = v23;
        LOWORD(time.flags) = 2080;
        *(void *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
        HIWORD(time.epoch) = 1024;
        int v52 = 904;
        uint64_t v26 = " [%s] %s:%d video no-op no MKM";
        goto LABEL_43;
      }
    }
  }
  else
  {
    if (objc_opt_respondsToSelector()) {
      __int16 v14 = (__CFString *)[(id)a1 performSelector:sel_logPrefix];
    }
    else {
      __int16 v14 = &stru_1F3D3E450;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v27 = VRTraceErrorLogLevelToCSTR();
      BOOL v28 = *MEMORY[0x1E4F47A50];
      signed int v29 = *MEMORY[0x1E4F47A50];
      if (!*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(time.value) = 136316162;
          *(CMTimeValue *)((char *)&time.value + 4) = v27;
          LOWORD(time.flags) = 2080;
          *(void *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
          HIWORD(time.epoch) = 1024;
          int v52 = 904;
          __int16 v53 = 2112;
          *(void *)uint64_t v54 = v14;
          *(_WORD *)&v54[8] = 2048;
          *(void *)&v54[10] = a1;
          _os_log_debug_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEBUG, " [%s] %s:%d %@(%p) video no-op no MKM", (uint8_t *)&time, 0x30u);
        }
        return 1;
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(time.value) = 136316162;
        *(CMTimeValue *)((char *)&time.value + 4) = v27;
        LOWORD(time.flags) = 2080;
        *(void *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
        HIWORD(time.epoch) = 1024;
        int v52 = 904;
        __int16 v53 = 2112;
        *(void *)uint64_t v54 = v14;
        *(_WORD *)&v54[8] = 2048;
        *(void *)&v54[10] = a1;
        uint64_t v26 = " [%s] %s:%d %@(%p) video no-op no MKM";
        double v30 = v28;
LABEL_48:
        uint32_t v41 = 48;
        goto LABEL_49;
      }
    }
  }
  return 1;
}

uint64_t _VCVideoStreamSendGroup_DidTimestampRollBackward(uint64_t a1, double a2)
{
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 496));
  if (*(unsigned char *)(a1 + 712))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 696);
    BOOL v6 = v4 >= a2;
    unsigned int v5 = v4 - a2;
    BOOL v6 = v6 || v5 >= 0x7FFFFFFF;
    uint64_t v7 = !v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 496));
  return v7;
}

void VCNAT64ResolverCleanup()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (sharedResolver && !CFDictionaryGetCount(*(CFDictionaryRef *)sharedResolver))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v0 = VRTraceErrorLogLevelToCSTR();
      int v1 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v2 = 136315650;
        uint64_t v3 = v0;
        __int16 v4 = 2080;
        unsigned int v5 = "VCNAT64ResolverCleanup";
        __int16 v6 = 1024;
        int v7 = 91;
        _os_log_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverCleanup: no more registered callbackContexts left. Destroying NAT64Resolver", (uint8_t *)&v2, 0x1Cu);
      }
    }
    dispatch_release(*(dispatch_object_t *)(sharedResolver + 8));
    dispatch_release(*(dispatch_object_t *)(sharedResolver + 16));
    CFRelease(*(CFTypeRef *)sharedResolver);
    free((void *)sharedResolver);
    sharedResolver = 0;
  }
}

void VCNAT64ReleaseCallBackContext(CFArrayRef *a1)
{
  if (a1)
  {
    if (*((unsigned char *)a1 + 32))
    {
      CFArrayRef v2 = *a1;
      if (*a1)
      {
        int Count = CFArrayGetCount(v2);
        CFIndex v4 = (Count - 1);
        if (Count - 1 >= 0)
        {
          do
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a1, v4);
            free(ValueAtIndex);
            CFArrayRemoveValueAtIndex(*a1, v4--);
            --Count;
          }
          while (Count);
        }
        CFRelease(*a1);
      }
      CFArrayRef v6 = a1[3];
      if (v6) {
        free(v6);
      }
      free(a1);
    }
    else
    {
      *((unsigned char *)a1 + 33) = 1;
    }
  }
}

uint64_t VCNAT64ResolverRegisterForPrefixUpdate(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    int v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v28 = v6;
      __int16 v29 = 2080;
      double v30 = "VCNAT64ResolverRegisterForPrefixUpdate";
      __int16 v31 = 1024;
      int v32 = 241;
      __int16 v33 = 1024;
      int v34 = a3;
      __int16 v35 = 2080;
      uint32_t v36 = a1;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: begin registration of context %08X on interface %s", buf, 0x2Cu);
    }
  }
  pthread_mutex_lock(&sharedInstanceLock);
  CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"%s", a1);
  Shareduint64_t Instance = (const __CFDictionary **)VCNAT64ResolverGetSharedInstance();
  if (SharedInstance)
  {
    CFDictionaryRef v10 = *SharedInstance;
    unsigned int v11 = malloc_type_calloc(1uLL, 0x10uLL, 0x80040803F642BuLL);
    if (v11)
    {
      int v12 = v11;
      *unsigned int v11 = a2;
      v11[1] = a3;
      if (CFDictionaryContainsKey(v10, v8))
      {
        Value = (const __CFArray **)CFDictionaryGetValue(v10, v8);
        if ((VCNAT64ResolverGetListenerIndexForContext(*Value, a3) & 0x80000000) == 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v14 = VRTraceErrorLogLevelToCSTR();
            double v15 = *MEMORY[0x1E4F47A50];
            uint64_t v16 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v28 = v14;
                __int16 v29 = 2080;
                double v30 = "VCNAT64ResolverRegisterForPrefixUpdate";
                __int16 v31 = 1024;
                int v32 = 290;
                __int16 v33 = 1024;
                int v34 = a3;
                __int16 v35 = 2080;
                uint32_t v36 = a1;
                _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: context %08X has already been registered for interface %s", buf, 0x2Cu);
              }
            }
            else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v28 = v14;
              __int16 v29 = 2080;
              double v30 = "VCNAT64ResolverRegisterForPrefixUpdate";
              __int16 v31 = 1024;
              int v32 = 290;
              __int16 v33 = 1024;
              int v34 = a3;
              __int16 v35 = 2080;
              uint32_t v36 = a1;
              _os_log_debug_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: context %08X has already been registered for interface %s", buf, 0x2Cu);
            }
          }
          uint64_t v25 = 49;
          goto LABEL_42;
        }
LABEL_16:
        CFArrayAppendValue(*Value, v12);
        pthread_mutex_unlock(&sharedInstanceLock);
        CFRelease(v8);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v23 = VRTraceErrorLogLevelToCSTR();
          int v24 = *MEMORY[0x1E4F47A50];
          uint64_t v25 = 0;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            return v25;
          }
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v28 = v23;
          __int16 v29 = 2080;
          double v30 = "VCNAT64ResolverRegisterForPrefixUpdate";
          __int16 v31 = 1024;
          int v32 = 300;
          __int16 v33 = 1024;
          int v34 = a3;
          __int16 v35 = 2080;
          uint32_t v36 = a1;
          _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: succesfully registered context %08X on interface %s", buf, 0x2Cu);
        }
        return 0;
      }
      uint64_t v17 = (const __CFArray **)malloc_type_calloc(1uLL, 0x28uLL, 0x1030040BF05D1CBuLL);
      if (v17)
      {
        Value = v17;
        uint64_t v18 = strdup(a1);
        Value[3] = (const __CFArray *)v18;
        if (v18)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 1, 0);
          *Value = Mutable;
          if (Mutable)
          {
            uint64_t v20 = if_nametoindex(a1);
            double v21 = *(NSObject **)(sharedResolver + 8);
            dispatch_retain(v21);
            int v22 = *(NSObject **)(sharedResolver + 16);
            dispatch_retain(v22);
            VCNAT64ResolveNAT64Prefix(v20, (uint64_t)Value, v21, v22);
            CFDictionaryAddValue(v10, v8, Value);
            goto LABEL_16;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCNAT64ResolverRegisterForPrefixUpdate_cold_5();
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNAT64ResolverRegisterForPrefixUpdate_cold_4();
          }
        }
        *((unsigned char *)Value + 32) = 1;
        VCNAT64ReleaseCallBackContext(Value);
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v25 = 3;
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCNAT64ResolverRegisterForPrefixUpdate_cold_3();
        }
        goto LABEL_42;
      }
      uint64_t v25 = 3;
LABEL_42:
      free(v12);
      goto LABEL_43;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v25 = 3;
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNAT64ResolverRegisterForPrefixUpdate_cold_2();
      }
      goto LABEL_43;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v25 = 3;
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCNAT64ResolverRegisterForPrefixUpdate_cold_1();
    }
    goto LABEL_43;
  }
  uint64_t v25 = 3;
LABEL_43:
  if (v8) {
    CFRelease(v8);
  }
  VCNAT64ResolverCleanup();
  pthread_mutex_unlock(&sharedInstanceLock);
  return v25;
}

uint64_t VCNAT64ResolverGetSharedInstance()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = sharedResolver;
  if (!sharedResolver)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v1 = VRTraceErrorLogLevelToCSTR();
      CFArrayRef v2 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315650;
        uint64_t v10 = v1;
        __int16 v11 = 2080;
        int v12 = "VCNAT64ResolverGetSharedInstance";
        __int16 v13 = 1024;
        int v14 = 56;
        _os_log_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: shared instance of NAT64Resolver does not exist. Creating it...", (uint8_t *)&v9, 0x1Cu);
      }
    }
    uint64_t v3 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
    if (v3)
    {
      uint64_t v0 = (uint64_t)v3;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E4F1D048], 0);
      *(void *)uint64_t v0 = Mutable;
      if (Mutable)
      {
        CustomRootQueue = VCDispatchQueue_GetCustomRootQueue(37);
        dispatch_queue_t v6 = dispatch_queue_create_with_target_V2("com.apple.AVConference.VCNAT64Resolver.dnsCallbackQueue", 0, CustomRootQueue);
        *(void *)(v0 + 8) = v6;
        if (v6)
        {
          dispatch_queue_t v7 = dispatch_queue_create_with_target_V2("com.apple.AVConference.VCNAT64Resolver.dnsRetryQueue", 0, CustomRootQueue);
          *(void *)(v0 + 16) = v7;
          if (v7)
          {
            sharedResolver = v0;
            return v0;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCNAT64ResolverGetSharedInstance_cold_4();
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCNAT64ResolverGetSharedInstance_cold_3();
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCNAT64ResolverGetSharedInstance_cold_2();
        }
      }
      if (*(void *)v0) {
        CFRelease(*(CFTypeRef *)v0);
      }
      free((void *)v0);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNAT64ResolverGetSharedInstance_cold_1();
      }
    }
    return 0;
  }
  return v0;
}

void VCNAT64ResolveNAT64Prefix(uint64_t a1, uint64_t a2, NSObject *a3, NSObject *a4)
{
  if (a2)
  {
    nw_nat64_copy_prefixes_async();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNAT64ResolveNAT64Prefix_cold_1();
      }
    }
    dispatch_release(a3);
    dispatch_release(a4);
  }
}

uint64_t VCNAT64ResolverGetListenerIndexForContext(const __CFArray *a1, uint64_t a2)
{
  int Count = CFArrayGetCount(a1);
  CFIndex v5 = (Count - 1);
  if (Count - 1 < 0) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
    if (ValueAtIndex)
    {
      if (ValueAtIndex[1] == a2) {
        break;
      }
    }
    --Count;
    --v5;
    if (Count < 1) {
      return 0xFFFFFFFFLL;
    }
  }
  return (Count - 1);
}

uint64_t VCNAT64ResolverDeregisterAll(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&sharedInstanceLock);
  Shareduint64_t Instance = (CFDictionaryRef *)VCNAT64ResolverGetSharedInstance();
  if (SharedInstance)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, *SharedInstance);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)VCNAT64ResolverDeregisterFromInterface, a1);
    CFRelease(Copy);
    pthread_mutex_unlock(&sharedInstanceLock);
    return 0;
  }
  else
  {
    pthread_mutex_unlock(&sharedInstanceLock);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      dispatch_queue_t v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315650;
        uint64_t v8 = v5;
        __int16 v9 = 2080;
        uint64_t v10 = "VCNAT64ResolverDeregisterAll";
        __int16 v11 = 1024;
        int v12 = 328;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverDeregisterAll: nothing to deregister", (uint8_t *)&v7, 0x1Cu);
      }
    }
    return 3;
  }
}

void VCNAT64ResolverDeregisterFromInterface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(__CFDictionary **)sharedResolver;
  CFArrayRef v6 = *(const __CFArray **)a2;
  unsigned int ListenerIndexForContext = VCNAT64ResolverGetListenerIndexForContext(*(const __CFArray **)a2, a3);
  if ((ListenerIndexForContext & 0x80000000) == 0)
  {
    unsigned int v8 = ListenerIndexForContext;
    CFIndex v9 = ListenerIndexForContext;
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, ListenerIndexForContext);
    if (ValueAtIndex)
    {
      __int16 v11 = ValueAtIndex;
      if (*((void *)ValueAtIndex + 1) == a3)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v12 = VRTraceErrorLogLevelToCSTR();
          uint64_t v13 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = *(void *)(a2 + 24);
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v20 = v12;
            __int16 v21 = 2080;
            int v22 = "VCNAT64ResolverDeregisterFromInterface";
            __int16 v23 = 1024;
            int v24 = 152;
            __int16 v25 = 1024;
            *(_DWORD *)uint64_t v26 = a3;
            *(_WORD *)&v26[4] = 2080;
            *(void *)&v26[6] = v14;
            __int16 v27 = 1024;
            unsigned int v28 = v8;
            _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverDeregisterFromInterface: removing context %08x from interface %s at index %d", buf, 0x32u);
          }
        }
        CFArrayRemoveValueAtIndex(v6, v9);
        free(v11);
      }
    }
  }
  if (!CFArrayGetCount(v6))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      uint64_t v16 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a2 + 24);
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v20 = v15;
        __int16 v21 = 2080;
        int v22 = "VCNAT64ResolverDeregisterFromInterface";
        __int16 v23 = 1024;
        int v24 = 159;
        __int16 v25 = 2080;
        *(void *)uint64_t v26 = v17;
        _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverDeregisterFromInterface: removing interface %s as it has no listeners", buf, 0x26u);
      }
    }
    CFStringRef v18 = CFStringCreateWithFormat(0, 0, @"%s", *(void *)(a2 + 24));
    CFDictionaryRemoveValue(v5, v18);
    CFRelease(v18);
    VCNAT64ReleaseCallBackContext((CFArrayRef *)a2);
    VCNAT64ResolverCleanup();
  }
}

uint64_t VCNAT64ResolverGetPrefix(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  pthread_mutex_lock(&sharedInstanceLock);
  Shareduint64_t Instance = VCNAT64ResolverGetSharedInstance();
  if (SharedInstance)
  {
    uint64_t v5 = (CFDictionaryRef *)SharedInstance;
    CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"%s", a1);
    Value = (char *)CFDictionaryGetValue(*v5, v6);
    CFRelease(v6);
    if (Value)
    {
      uint64_t v8 = 0;
      *(_OWORD *)a2 = *(_OWORD *)(Value + 8);
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCNAT64ResolverGetPrefix_cold_2();
        }
      }
      uint64_t v8 = 22;
    }
  }
  else
  {
    uint64_t v8 = 3;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCNAT64ResolverGetPrefix_cold_1();
      }
    }
  }
  VCNAT64ResolverCleanup();
  pthread_mutex_unlock(&sharedInstanceLock);
  return v8;
}

_DWORD *VCNAT64ResolverIsNonzeroPrefix(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(*result != 0);
  }
  return result;
}

BOOL VCNAT64ResolverIsBehindNat64(uint64_t a1)
{
  v3[2] = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  v3[1] = 0;
  if (VCNAT64ResolverGetPrefix(a1, v3)) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = LODWORD(v3[0]) == 0;
  }
  return !v1;
}

void __VCNAT64ResolveNAT64Prefix_block_invoke(uint64_t a1, int a2, long long *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&sharedInstanceLock);
  uint64_t v6 = *(void *)(a1 + 32);
  *(unsigned char *)(v6 + 32) = 1;
  if (*(unsigned char *)(v6 + 33))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 24);
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v34 = v7;
        __int16 v35 = 2080;
        uint32_t v36 = "VCNAT64ResolveNAT64Prefix_block_invoke";
        __int16 v37 = 1024;
        int v38 = 188;
        __int16 v39 = 2080;
        uint64_t v40 = v9;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolveNAT64Prefix: DNS callback context has already been released for nterface %s", buf, 0x26u);
      }
    }
    VCNAT64ReleaseCallBackContext(*(CFArrayRef **)(a1 + 32));
    pthread_mutex_unlock(&sharedInstanceLock);
    dispatch_release(*(dispatch_object_t *)(a1 + 40));
    dispatch_release(*(dispatch_object_t *)(a1 + 48));
    return;
  }
  if (a2 <= 0)
  {
    if (a2)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          __VCNAT64ResolveNAT64Prefix_block_invoke_cold_1();
        }
      }
    }
    else
    {
      unsigned int v17 = *(_DWORD *)(v6 + 36);
      *(_DWORD *)(v6 + 36) = v17 + 1;
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (v17 < 3)
      {
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v22 = VRTraceErrorLogLevelToCSTR();
          __int16 v23 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v24 = *(void *)(a1 + 32);
            uint64_t v25 = *(void *)(v24 + 24);
            LODWORD(v24) = *(_DWORD *)(v24 + 36);
            *(_DWORD *)CMTime buf = 136316418;
            uint64_t v34 = v22;
            __int16 v35 = 2080;
            uint32_t v36 = "VCNAT64ResolveNAT64Prefix_block_invoke";
            __int16 v37 = 1024;
            int v38 = 201;
            __int16 v39 = 2080;
            uint64_t v40 = v25;
            __int16 v41 = 1024;
            int v42 = v24;
            __int16 v43 = 1024;
            int v44 = 3;
            _os_log_impl(&dword_1E1EA4000, v23, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolveNAT64Prefix: Re-trying in 1 second for Interface %s, attempt %d out of %d", buf, 0x32u);
          }
        }
        *(unsigned char *)(*(void *)(a1 + 32) + 32) = 0;
        dispatch_time_t v26 = dispatch_time(0, 1000000000);
        __int16 v27 = *(NSObject **)(a1 + 48);
        v28[0] = MEMORY[0x1E4F143A8];
        v28[1] = 0x40000000;
        v28[2] = __VCNAT64ResolveNAT64Prefix_block_invoke_4;
        v28[3] = &__block_descriptor_tmp_17;
        int v31 = *(_DWORD *)(a1 + 56);
        long long v29 = *(_OWORD *)(a1 + 32);
        double v30 = v27;
        dispatch_after(v26, v27, v28);
        goto LABEL_25;
      }
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        uint64_t v20 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 24);
          *(_DWORD *)CMTime buf = 136315906;
          uint64_t v34 = v19;
          __int16 v35 = 2080;
          uint32_t v36 = "VCNAT64ResolveNAT64Prefix_block_invoke";
          __int16 v37 = 1024;
          int v38 = 199;
          __int16 v39 = 2080;
          uint64_t v40 = v21;
          _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolveNAT64Prefix: Interface %s IS NOT behind NAT 64", buf, 0x26u);
        }
      }
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 40));
    dispatch_release(*(dispatch_object_t *)(a1 + 48));
LABEL_25:
    pthread_mutex_unlock(&sharedInstanceLock);
    return;
  }
  long long v32 = *a3;
  *(_OWORD *)(v6 + 8) = v32;
  CFArrayRef v10 = **(const __CFArray ***)(a1 + 32);
  int Count = CFArrayGetCount(v10);
  CFIndex v12 = (Count - 1);
  if (Count - 1 >= 0)
  {
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v10, v12);
      if (ValueAtIndex && *ValueAtIndex) {
        ((void (*)(void, void, long long *))*ValueAtIndex)(ValueAtIndex[1], *(void *)(*(void *)(a1 + 32) + 24), &v32);
      }
      --Count;
      --v12;
    }
    while (Count > 0);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
  pthread_mutex_unlock(&sharedInstanceLock);
  if ((int)VRTraceGetErrorLogLevelForModule() > 6)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    uint64_t v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 24);
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v34 = v14;
      __int16 v35 = 2080;
      uint32_t v36 = "VCNAT64ResolveNAT64Prefix_block_invoke";
      __int16 v37 = 1024;
      int v38 = 234;
      __int16 v39 = 2080;
      uint64_t v40 = v16;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolveNAT64Prefix: Interface %s IS behind NAT 64", buf, 0x26u);
    }
  }
}

uint64_t __VCNAT64ResolveNAT64Prefix_block_invoke_4(uint64_t a1)
{
  return VCNAT64ResolveNAT64Prefix(*(unsigned int *)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
}

__n128 VCSDInfoConstructWithIPPorts@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)(a5 + 112) = 0;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  if (a1)
  {
    if (a2)
    {
      *(_DWORD *)a5 = 1;
      long long v6 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a5 + 8) = *(_OWORD *)a1;
      *(_OWORD *)(a5 + 24) = v6;
      *(void *)(a5 + 40) = *(void *)(a1 + 32);
      __n128 result = *(__n128 *)a2;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)a2;
      *(_OWORD *)(a5 + 64) = v7;
      *(void *)(a5 + 80) = *(void *)(a2 + 32);
      *(unsigned char *)(a5 + 88) = a3;
      *(_WORD *)(a5 + 90) = a4;
    }
  }
  return result;
}

uint64_t VCSDInfoConstructWithDatagramChannel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_DWORD *)a5 = 4;
  *(void *)(a5 + 112) = a1;
  *(_DWORD *)(a5 + 96) = a4;
  *(void *)(a5 + 12) = a2;
  *(_WORD *)(a5 + 20) = a3;
  uint64_t result = VCDatagramChannelIDS_Token(a1);
  *(_DWORD *)(a5 + 8) = result;
  return result;
}

double VCSDInfoConstructWithNWConnection@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)a2 = 5;
  *(void *)(a2 + 8) = a1;
  return result;
}

void VCSDInfoConstructWithSocket(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(void *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(void *)&v24.sa_len = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v24.sa_data[6] = 0xAAAAAAAAAAAAAAAALL;
  socklen_t v15 = 16;
  if (getpeername(a1, &v24, &v15) != -1)
  {
    *(_DWORD *)a3 = 3;
    int sa_family = v24.sa_family;
    *(_DWORD *)(a3 + 8) = a1;
    *(_DWORD *)(a3 + 12) = sa_family;
    SAToIPPORT();
    int v7 = *(_DWORD *)(a3 + 12);
    goto LABEL_8;
  }
  if (a2)
  {
    *(_DWORD *)a3 = 2;
    if (*(_DWORD *)a2) {
      int v7 = 30;
    }
    else {
      int v7 = 2;
    }
    *(_DWORD *)(a3 + 8) = a1;
    *(_DWORD *)(a3 + 12) = v7;
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 32) = v8;
    *(void *)(a3 + 48) = *(void *)(a2 + 32);
LABEL_8:
    if (v7 == 30)
    {
      socklen_t v13 = 4;
      int v14 = 0;
      if (!getsockopt(a1, 41, 36, &v14, &v13))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v9 = VRTraceErrorLogLevelToCSTR();
          CFArrayRef v10 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v17 = v9;
            __int16 v18 = 2080;
            uint64_t v19 = "VCSDInfoConstructWithSocket";
            __int16 v20 = 1024;
            int v21 = 85;
            __int16 v22 = 1024;
            int v23 = v14;
            _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Get ipv6 tclass socket option for DSCP value=%d", buf, 0x22u);
          }
        }
        *(_DWORD *)(a3 + 56) = v14;
      }
    }
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v11 = VRTraceErrorLogLevelToCSTR();
    CFIndex v12 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCSDInfoConstructWithSocket_cold_1(v11, a1, v12);
    }
  }
}

BOOL VCSDInfoIsPacketFromKnownRemote(uint64_t a1, int *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    switch(*a2)
    {
      case 1:
        uint64_t v4 = (uint64_t)(a2 + 12);
        goto LABEL_12;
      case 2:
      case 3:
        uint64_t v4 = (uint64_t)(a2 + 4);
LABEL_12:
        return VCSDInfoIsSrcDstInfoMatchedWithIP((int *)a1, v4);
      case 4:
        int v15 = VCDatagramChannelIDS_Token(*((void *)a2 + 14));
        if (*(_DWORD *)a1 != 4)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            return 0;
          }
          VRTraceErrorLogLevelToCSTR();
          BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
          if (result)
          {
            VCSDInfoIsPacketFromKnownRemote_cold_1();
            return 0;
          }
          return result;
        }
        int v16 = v15;
        int v17 = VCDatagramChannelIDS_Token(*(void *)(a1 + 112));
        if (v17 == v16) {
          return 1;
        }
        int v18 = v17;
        if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
          return 0;
        }
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        __int16 v20 = *MEMORY[0x1E4F47A50];
        BOOL v21 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v21) {
          return result;
        }
        int v38 = 136316162;
        uint64_t v39 = v19;
        __int16 v40 = 2080;
        __int16 v41 = "VCSDInfoIsSrcDstInfoMatchedWithChannelToken";
        __int16 v42 = 1024;
        int v43 = 157;
        __int16 v44 = 1024;
        *(_DWORD *)uint64_t v45 = v18;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = v16;
        CFIndex v12 = " [%s] %s:%d ChannelToken mismatch! expected %d actual %d";
        socklen_t v13 = v20;
        uint32_t v14 = 40;
        goto LABEL_43;
      case 5:
        uint64_t v22 = *((void *)a2 + 1);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v23 = VRTraceErrorLogLevelToCSTR();
          sockaddr v24 = *MEMORY[0x1E4F47A50];
          uint64_t v25 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              int v26 = *(_DWORD *)a1;
              int v38 = 136316162;
              uint64_t v39 = v23;
              __int16 v40 = 2080;
              __int16 v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
              __int16 v42 = 1024;
              int v43 = 131;
              __int16 v44 = 2048;
              *(void *)uint64_t v45 = v22;
              *(_WORD *)&v45[8] = 1024;
              LODWORD(v46) = v26;
              _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d matching NW %p to srcDstInfo mode %d", (uint8_t *)&v38, 0x2Cu);
            }
          }
          else if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            int v36 = *(_DWORD *)a1;
            int v38 = 136316162;
            uint64_t v39 = v23;
            __int16 v40 = 2080;
            __int16 v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
            __int16 v42 = 1024;
            int v43 = 131;
            __int16 v44 = 2048;
            *(void *)uint64_t v45 = v22;
            *(_WORD *)&v45[8] = 1024;
            LODWORD(v46) = v36;
            _os_log_debug_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEBUG, " [%s] %s:%d matching NW %p to srcDstInfo mode %d", (uint8_t *)&v38, 0x2Cu);
          }
        }
        int v27 = *(_DWORD *)a1;
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v27 == 5)
        {
          if (ErrorLogLevelForModule >= 8)
          {
            uint64_t v29 = VRTraceErrorLogLevelToCSTR();
            double v30 = *MEMORY[0x1E4F47A50];
            int v31 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v32 = *(void *)(a1 + 8);
                int v38 = 136316162;
                uint64_t v39 = v29;
                __int16 v40 = 2080;
                __int16 v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
                __int16 v42 = 1024;
                int v43 = 134;
                __int16 v44 = 2048;
                *(void *)uint64_t v45 = v22;
                *(_WORD *)&v45[8] = 2048;
                uint64_t v46 = v32;
                _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d matching NW %p to srcDstInfo conn %p", (uint8_t *)&v38, 0x30u);
              }
            }
            else if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v37 = *(void *)(a1 + 8);
              int v38 = 136316162;
              uint64_t v39 = v29;
              __int16 v40 = 2080;
              __int16 v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
              __int16 v42 = 1024;
              int v43 = 134;
              __int16 v44 = 2048;
              *(void *)uint64_t v45 = v22;
              *(_WORD *)&v45[8] = 2048;
              uint64_t v46 = v37;
              _os_log_debug_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEBUG, " [%s] %s:%d matching NW %p to srcDstInfo conn %p", (uint8_t *)&v38, 0x30u);
            }
          }
          if (*(void *)(a1 + 8) == v22) {
            return 1;
          }
        }
        else if (ErrorLogLevelForModule >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCSDInfoIsPacketFromKnownRemote_cold_2();
          }
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
          return 0;
        }
        uint64_t v33 = VRTraceErrorLogLevelToCSTR();
        uint64_t v34 = *MEMORY[0x1E4F47A50];
        BOOL v35 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v35) {
          return result;
        }
        int v38 = 136315650;
        uint64_t v39 = v33;
        __int16 v40 = 2080;
        __int16 v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
        __int16 v42 = 1024;
        int v43 = 140;
        CFIndex v12 = " [%s] %s:%d NW Connection mismatch!";
        socklen_t v13 = v34;
        uint32_t v14 = 28;
LABEL_43:
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v38, v14);
        break;
      default:
        if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
          return 0;
        }
        uint64_t v8 = VRTraceErrorLogLevelToCSTR();
        uint64_t v9 = *MEMORY[0x1E4F47A50];
        BOOL v10 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v10) {
          return result;
        }
        int v11 = *a2;
        int v38 = 136315906;
        uint64_t v39 = v8;
        __int16 v40 = 2080;
        __int16 v41 = "VCSDInfoIsPacketFromKnownRemote";
        __int16 v42 = 1024;
        int v43 = 189;
        __int16 v44 = 1024;
        *(_DWORD *)uint64_t v45 = v11;
        CFIndex v12 = " [%s] %s:%d invalid packet srcDstInfo mode %d";
        socklen_t v13 = v9;
        uint32_t v14 = 34;
        goto LABEL_43;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    long long v6 = *MEMORY[0x1E4F47A50];
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v38 = 136316162;
    uint64_t v39 = v5;
    __int16 v40 = 2080;
    __int16 v41 = "VCSDInfoIsPacketFromKnownRemote";
    __int16 v42 = 1024;
    int v43 = 168;
    __int16 v44 = 1024;
    *(_DWORD *)uint64_t v45 = a1 == 0;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = a2 == 0;
    _os_log_error_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameters! cachedSrcDstInfo isValid:%d, packetSrcDstInfo isValid:%d!", (uint8_t *)&v38, 0x28u);
  }
  return 0;
}

BOOL VCSDInfoIsSrcDstInfoMatchedWithIP(int *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      uint64_t v5 = *MEMORY[0x1E4F47A50];
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCSDInfoIsSrcDstInfoMatchedWithIP_cold_1(v4, v5);
    }
    return 0;
  }
  int v2 = *a1;
  if (*a1 == 3) {
    return 1;
  }
  if (v2 == 2)
  {
    if ((a1[4] & 1) == (*(_DWORD *)a2 & 1))
    {
      if ((a1[4] & 1) == 0)
      {
        int v3 = a1[9];
LABEL_14:
        if (v3 == *(_DWORD *)(a2 + 20)) {
          return 1;
        }
        goto LABEL_25;
      }
      uint64_t v7 = *(void *)(a1 + 9);
      uint64_t v8 = *(void *)(a2 + 20);
      uint64_t v9 = *(void *)(a1 + 11);
      goto LABEL_21;
    }
LABEL_25:
    *(void *)&v29[14] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v28 = v11;
    *(_OWORD *)uint64_t v29 = v11;
    long long v27 = v11;
    *(void *)&unsigned char v26[14] = 0xAAAAAAAAAAAAAAAALL;
    long long v25 = v11;
    *(_OWORD *)int v26 = v11;
    long long v24 = v11;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      socklen_t v13 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136316162;
        uint64_t v15 = v12;
        __int16 v16 = 2080;
        int v17 = "VCSDInfoIsSrcDstInfoMatchedWithIP";
        __int16 v18 = 1024;
        int v19 = 119;
        __int16 v20 = 2080;
        uint64_t v21 = IPPORTToStringWithSize();
        __int16 v22 = 2080;
        uint64_t v23 = IPPORTToStringWithSize();
        _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d IPPort mismatch! expected %s actual %s", (uint8_t *)&v14, 0x30u);
      }
    }
    return 0;
  }
  if (v2 == 1)
  {
    if ((a1[12] & 1) == (*(_DWORD *)a2 & 1))
    {
      if ((a1[12] & 1) == 0)
      {
        int v3 = a1[17];
        goto LABEL_14;
      }
      uint64_t v7 = *(void *)(a1 + 17);
      uint64_t v8 = *(void *)(a2 + 20);
      uint64_t v9 = *(void *)(a1 + 19);
LABEL_21:
      if (v7 == v8 && v9 == *(void *)(a2 + 28)) {
        return 1;
      }
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCSDInfoIsSrcDstInfoMatchedWithIP_cold_2();
  }
  return 0;
}

char *VCSDInfoToStringRepresentation(uint64_t a1, char *a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    switch(*(_DWORD *)a1)
    {
      case 1:
        IPPORTToStringWithSize();
        IPPORTToStringWithSize();
        sprintf(a2, "VCSourceDestinationInfo IPPort mode with IP port: %s-%s isRelay %d, relayChannelNumber %d");
        break;
      case 2:
        IPPORTToStringWithSize();
        sprintf(a2, "VCSourceDestinationInfo BoundSocket mode with socket: %d destination: %s");
        break;
      case 3:
        sprintf(a2, "VCSourceDestinationInfo ConnectedSocket mode with socket: %d");
        break;
      case 4:
        VCDatagramChannelIDS_Token(*(void *)(a1 + 112));
        sprintf(a2, "VCSourceDestinationInfo IDSLink mode with datagramChannel:%p datagramToken: %d linkID: %d");
        break;
      case 5:
        sprintf(a2, "VCSourceDestinationInfo NW mode with conn: %p");
        break;
      default:
        sprintf(a2, "Unrecogized VCSourceDestinationInfoMode %d");
        break;
    }
    return a2;
  }
  return result;
}

uint64_t VCTestMonitorManager_GetEnableLoopbackInterface()
{
  id v0 = +[VCTestMonitorManager sharedManager];

  return [v0 enableLoopbackInterface];
}

uint64_t VCTestMonitorManager_GetForcedTargetBitrate()
{
  id v0 = +[VCTestMonitorManager sharedManager];

  return [v0 forcedTargetBitrate];
}

uint64_t VCTestMonitorManager_GetForcedCapBitrate()
{
  id v0 = +[VCTestMonitorManager sharedManager];

  return [v0 forcedCapBitrate];
}

uint64_t VCTestMonitorManager_GetEnableAudioPowerSpectrumReport()
{
  id v0 = +[VCTestMonitorManager sharedManager];

  return [v0 enableAudioPowerSpectrumReport];
}

void VCCaptionsReceiver_ProcessCaptionsData(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v15 = 0;
  if (a1)
  {
    int v3 = VCCaptionsDecoder_Decode(*(void *)(a1 + 32), (unsigned __int8 *)[a2 bytes], objc_msgSend(a2, "length"), &v15);
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v15 == 0;
    }
    if (v4)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        int v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCCaptionsReceiver_ProcessCaptionsData_cold_2(v13, v3, v14);
        }
      }
    }
    else
    {
      int v5 = [v15 isLocal];
      [v15 setIsLocal:v5 ^ 1u];
      unsigned int v6 = *(_DWORD *)(a1 + 8);
      if (v6 > [v15 utteranceNumber]) {
        return;
      }
      unsigned int v7 = *(_DWORD *)(a1 + 8);
      if (v7 >= [v15 utteranceNumber])
      {
        unsigned int v9 = *(_DWORD *)(a1 + 12);
        if (v9 > [v15 updateNumber]) {
          return;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 8) = [v15 utteranceNumber];
        uint64_t v8 = *(void **)(a1 + 24);
        if (v8)
        {
          [v8 setIsFinal:1];
          [*(id *)(a1 + 16) didReceiveCaptions:*(void *)(a1 + 24)];
        }
      }
      *(_DWORD *)(a1 + 12) = objc_msgSend(v15, "updateNumber", v15, v16);
      [*(id *)(a1 + 16) didReceiveCaptions:v15];
      if ([v15 isFinal]) {
        id v10 = 0;
      }
      else {
        id v10 = v15;
      }
      *(void *)(a1 + 24) = v10;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v11 = VRTraceErrorLogLevelToCSTR();
    uint64_t v12 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCCaptionsReceiver_ProcessCaptionsData_cold_1(v11, v12);
    }
  }
}

void sub_1E23F0DD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23F2EE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E23F3560(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CMSampleBufferRef FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer(uint64_t a1, int32_t a2)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  CMMetadataFormatDescriptionRef formatDescriptionOut = 0;
  CMBlockBufferRef theBuffer = 0;
  CMSampleBufferRef v27 = 0;
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v4 = *MEMORY[0x1E4F218A0];
    uint64_t v5 = *MEMORY[0x1E4F1F0F8];
    v43[0] = *MEMORY[0x1E4F1F108];
    v43[1] = v5;
    uint64_t v6 = *MEMORY[0x1E4F1F048];
    v44[0] = v4;
    v44[1] = v6;
    v45[0] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v44 forKeys:v43 count:2];
    CFArrayRef v7 = (const __CFArray *)[MEMORY[0x1E4F1C978] arrayWithObjects:v45 count:1];
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (CMMetadataFormatDescriptionCreateWithMetadataSpecifications((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x6D656278u, v7, &formatDescriptionOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_5();
        }
      }
    }
    else
    {
      unsigned int LocalIDForMetadataIdentifyingFactors = FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors();
      if (LocalIDForMetadataIdentifyingFactors)
      {
        unsigned int v10 = LocalIDForMetadataIdentifyingFactors;
        if (CMBlockBufferCreateWithMemoryBlock(v8, 0, 9uLL, v8, 0, 0, 9uLL, 1u, &theBuffer))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_4();
            }
          }
        }
        else
        {
          dataPointerOut = 0;
          if (CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_3();
              }
            }
          }
          else
          {
            uint64_t v11 = dataPointerOut;
            *(_DWORD *)dataPointerOut = 150994944;
            v11[8] = -1;
            dataPointerOut = v11 + 8;
            *((_DWORD *)v11 + 1) = bswap32(v10);
            if (!a2) {
              a2 = 600;
            }
            memset(&v24, 170, sizeof(v24));
            CMTimeMake(&time, 1, a2);
            CMTimeConvertScale(&v24, &time, *(_DWORD *)(a1 + 8), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v12 = VRTraceErrorLogLevelToCSTR();
              uint64_t v13 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136316418;
                uint64_t v30 = v12;
                __int16 v31 = 2080;
                uint64_t v32 = "FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer";
                __int16 v33 = 1024;
                int v34 = 647;
                __int16 v35 = 2048;
                CMTimeValue value = v24.value;
                __int16 v37 = 1024;
                CMTimeScale timescale = v24.timescale;
                __int16 v39 = 1024;
                LODWORD(v40) = a2;
                _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d calculated still image time sample duration=%lld/%d (track time scale=%d)", buf, 0x32u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v14 = VRTraceErrorLogLevelToCSTR();
              id v15 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                CMTimeValue v16 = *(void *)a1;
                CMTimeScale v17 = *(_DWORD *)(a1 + 8);
                *(_DWORD *)CMTime buf = 136316674;
                uint64_t v30 = v14;
                __int16 v31 = 2080;
                uint64_t v32 = "FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer";
                __int16 v33 = 1024;
                int v34 = 648;
                __int16 v35 = 2048;
                CMTimeValue value = v16;
                __int16 v37 = 1024;
                CMTimeScale timescale = v17;
                __int16 v39 = 2048;
                CMTimeValue v40 = v24.value;
                __int16 v41 = 1024;
                CMTimeScale v42 = v24.timescale;
                _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d adding still image time metadata sample=%lld/%d (duration=%lld/%d)", buf, 0x3Cu);
              }
            }
            long long v18 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
            *(_OWORD *)&sampleTimingArray.duration.epoch = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
            *(_OWORD *)&sampleTimingArray.presentationTimeStamp.CMTimeScale timescale = v18;
            *(_OWORD *)&sampleTimingArray.decodeTimeStamp.CMTimeValue value = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
            *(_OWORD *)&sampleTimingArray.presentationTimeStamp.CMTimeValue value = *(_OWORD *)a1;
            CMTimeEpoch v19 = *(void *)(a1 + 16);
            sampleTimingArray.decodeTimeStamp.epoch = *(void *)(MEMORY[0x1E4F1FA70] + 64);
            sampleTimingArray.presentationTimeStamp.epoch = v19;
            sampleTimingArray.duration = v24;
            size_t sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
            if (CMSampleBufferCreate(v8, theBuffer, 1u, 0, 0, formatDescriptionOut, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v27))
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_2();
                }
              }
            }
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_1();
        }
      }
    }
  }
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v27;
}

uint64_t VCBitrateArbiter_ModeFromOperatingMode(int a1)
{
  if ((a1 - 1) < 0xC) {
    return byte_1E25A2AD8[a1 - 1];
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCBitrateArbiter_ModeFromOperatingMode_cold_1();
  }
  return 0;
}

BOOL rangeCheck(int a1)
{
  unsigned int v1 = a1 - 36;
  if ((a1 - 36) >= 0x1941 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      rangeCheck_cold_1();
    }
  }
  return v1 < 0x1941;
}

BOOL IsValidAudioBitrateRange(int a1)
{
  unsigned int v1 = a1 - 10;
  if ((a1 - 10) >= 0x122 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      IsValidAudioBitrateRange_cold_1();
    }
  }
  return v1 < 0x122;
}

void sub_1E240248C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t VCCaptionsDecoder_Create(void *a1)
{
  if (!a1) {
    return 4294967294;
  }
  int v2 = malloc_type_calloc(1uLL, 0x28uLL, 0x10900408D69EB25uLL);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  int v3 = v2;
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:3];
  uint64_t result = 0;
  *(void *)int v3 = v4;
  v3[8] = -1;
  *a1 = v3;
  return result;
}

void VCCaptionsDecoder_Destroy(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v1 = *a1;
    if (*a1)
    {
      [*(id *)v1 removeAllObjects];

      int v2 = *(void **)(v1 + 24);
      if (v2) {
        free(v2);
      }
      free((void *)v1);
    }
  }
}

uint64_t VCCaptionsDecoder_Decode(uint64_t a1, unsigned __int8 *a2, unint64_t a3, void *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3)
  {
    unsigned int v7 = *a2;
    if ((v7 & 3) == 0 && a4 != 0)
    {
      unsigned int v13 = v7 >> 4;
      id v14 = (id)objc_msgSend(*(id *)a1, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", v7 >> 4));
      id v43 = v14;
      if (v14)
      {
        if (*(unsigned __int8 *)(a1 + 8) != v7 >> 4)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v36 = VRTraceErrorLogLevelToCSTR();
            __int16 v37 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136315906;
              *(void *)&uint8_t buf[4] = v36;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "VCCaptionsDecoder_Decode";
              *(_WORD *)&buf[22] = 1024;
              int v45 = 231;
              __int16 v46 = 1024;
              int v47 = 0;
              _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Expired frame received. Error=%d", buf, 0x22u);
            }
          }
          uint64_t v23 = 0;
          uint64_t v10 = 0;
LABEL_29:
          __int16 v22 = v43;
LABEL_61:

          return v10;
        }
        ++*(_DWORD *)(a1 + 16);
      }
      else
      {
        *(unsigned char *)(a1 + 8) = v13;
        ++*(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 16) = 0;
        objc_msgSend(*(id *)a1, "setObject:forKeyedSubscript:", 0, objc_msgSend(NSNumber, "numberWithUnsignedInt:", ((_BYTE)v13 + 12) & 0xF));
      }
      uint64_t v15 = 0;
      int v16 = 0;
      CMTimeScale v17 = a2 + 1;
      uint64_t v18 = -1;
      do
      {
        if (v15 + 2 > a3)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          {
            uint64_t v23 = 0;
            uint64_t v10 = 4294967291;
            goto LABEL_29;
          }
          VRTraceErrorLogLevelToCSTR();
          __int16 v22 = v43;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCCaptionsDecoder_Decode_cold_2();
          }
          uint64_t v23 = 0;
          uint64_t v10 = 4294967291;
          goto LABEL_61;
        }
        unsigned int v19 = v17[v15];
        v16 += ((v19 >> 3) + 1) & ((int)(v19 << 30) >> 31);
        ++v15;
        --v18;
      }
      while ((v19 & 4) == 0);
      uint64_t v20 = a3 - v15;
      if (*(void *)(a1 + 32) >= a3 - v15)
      {
        uint64_t v21 = *(void **)(a1 + 24);
      }
      else
      {
        *(void *)(a1 + 32) = v20 + 49;
        uint64_t v21 = malloc_type_realloc(*(void **)(a1 + 24), v20 + 49, 0x477190C6uLL);
        *(void *)(a1 + 24) = v21;
        if (!v21)
        {
          *(void *)(a1 + 32) = 0;
          uint64_t v10 = 0xFFFFFFFFLL;
          goto LABEL_57;
        }
      }
      memcpy(v21, &v17[v15], v20 - 1);
      *(unsigned char *)(*(void *)(a1 + 24) + a3 + v18) = 0;
      CMTime v24 = (void *)[NSString stringWithUTF8String:*(void *)(a1 + 24)];
      if (!v24 || (long long v25 = v24, [v24 length] != v16))
      {
        uint64_t v10 = 4294967290;
LABEL_57:
        __int16 v22 = v43;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCCaptionsDecoder_Decode_cold_3();
          }
        }
        uint64_t v23 = 0;
        goto LABEL_61;
      }
      unsigned int v38 = v7 >> 4;
      __int16 v39 = a4;
      id v41 = v25;
      CMTimeValue v40 = [[VCCaptionsTranscription alloc] initWithUtteranceNumber:*(unsigned int *)(a1 + 12) updateNumber:*(unsigned int *)(a1 + 16) isLocal:(v7 >> 3) & 1 isFinal:(v7 >> 2) & 1 streamToken:0];
      memset(buf, 0, sizeof(buf));
      __int16 v22 = v43;
      if (v15)
      {
        uint64_t v26 = 0;
        uint64_t v42 = 0;
        CMSampleBufferRef v27 = 0;
        do
        {
          long long v28 = (void *)[v22 formattedText];
          unint64_t v29 = v17[v26];
          int v30 = *(_DWORD *)&buf[16];
          if (!v27) {
            int v30 = v29 & 1;
          }
          *(_DWORD *)&buf[16] = v30;
          if (v30 != (v29 & 1))
          {
            _VCCaptionsDecoder_InsertCompletedSegment(v40, (uint64_t)buf);
            CMSampleBufferRef v27 = *(void **)buf;
          }
          uint64_t v31 = (v29 >> 3) + 1;
          if (!v27)
          {
            CMSampleBufferRef v27 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithCapacity:(v29 >> 3) + 1];
            *(void *)CMTime buf = v27;
          }
          if ((v17[v26] & 2) != 0)
          {
            objc_msgSend(v27, "appendString:", objc_msgSend(v41, "substringWithRange:", v42, v31));
            v42 += v31;
            LODWORD(v33) = *(_DWORD *)&buf[12];
          }
          else
          {
            unint64_t v32 = [v28 length];
            uint64_t v33 = *(unsigned int *)&buf[12];
            if (v32 <= *(unsigned int *)&buf[12]) {
              unsigned int v34 = 0;
            }
            else {
              unsigned int v34 = [v28 length] - v33;
            }
            if (v34 >= v31) {
              uint64_t v35 = v31;
            }
            else {
              uint64_t v35 = v34;
            }
            if (v35) {
              objc_msgSend(v27, "appendString:", objc_msgSend(v28, "substringWithRange:", v33, v35));
            }
            if (v34 < v31) {
              objc_msgSend(v27, "appendString:", objc_msgSend(&stru_1F3D3E450, "stringByPaddingToLength:withString:startingAtIndex:", (v31 - v35), @"\uFFFD", 0));
            }
            __int16 v22 = v43;
          }
          *(_DWORD *)&unsigned char buf[12] = v33 + v31;
          ++v26;
        }
        while (v15 != v26);
      }
      _VCCaptionsDecoder_InsertCompletedSegment(v40, (uint64_t)buf);
      objc_msgSend(*(id *)a1, "setObject:forKeyedSubscript:", v40, objc_msgSend(NSNumber, "numberWithUnsignedChar:", v38));

      uint64_t v10 = 0;
      *__int16 v39 = v40;
      uint64_t v23 = v41;
      goto LABEL_61;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCCaptionsDecoder_Decode_cold_1(v9);
    }
  }
  return 4294967294;
}

void _VCCaptionsDecoder_InsertCompletedSegment(void *a1, uint64_t a2)
{
  uint64_t v4 = -[VCCaptionsTranscriptionSegment initWithConfidence:text:range:]([VCCaptionsTranscriptionSegment alloc], "initWithConfidence:text:range:", *(unsigned int *)(a2 + 16), *(void *)a2, *(unsigned int *)(a2 + 8), [*(id *)a2 length]);
  [a1 addSegment:v4];

  *(_DWORD *)(a2 + 8) += [*(id *)a2 length];
  *(void *)a2 = 0;
}

uint64_t _VCOverlayInfo_copyOverlayInfoForToken(uint64_t a1)
{
  valuePtr[1] = *MEMORY[0x1E4F143B8];
  valuePtr[0] = a1;
  uint64_t v7 = 0;
  CFAllocatorRef v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 0;
  if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  }
  uint64_t v1 = _VCOverlayManager_sharedOverlay__overlayManager;
  CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, valuePtr);
  if (v2)
  {
    int v3 = *(NSObject **)(v1 + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    void block[2] = ___VCOverlayInfo_copyOverlayInfoForToken_block_invoke;
    block[3] = &unk_1E6DB9798;
    block[4] = &v7;
    void block[5] = v1;
    block[6] = v2;
    dispatch_sync(v3, block);
    CFRelease(v2);
  }
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1E24043B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _VCOverlayManager_AddSourceToDictionary(__CFDictionary *a1, const __CFString *a2, int a3, char a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    uint64_t v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v22 = v8;
      __int16 v23 = 2080;
      CMTime v24 = "_VCOverlayManager_AddSourceToDictionary";
      __int16 v25 = 1024;
      int v26 = 59;
      __int16 v27 = 2080;
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] key=%s", buf, 0x26u);
    }
  }
  if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(_VCOverlayManager_sharedOverlay__overlayManager + 8));
  if (CFDictionaryContainsKey(a1, a2))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return 0;
    }
    uint64_t v10 = VRTraceErrorLogLevelToCSTR();
    uint64_t v11 = *MEMORY[0x1E4F47A50];
    BOOL v12 = 0;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = CFStringGetCStringPtr(a2, 0x8000100u);
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v22 = v10;
      __int16 v23 = 2080;
      CMTime v24 = "_VCOverlayManager_AddSourceToDictionary";
      __int16 v25 = 1024;
      int v26 = 64;
      __int16 v27 = 2080;
      CStringPtr = v13;
      _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] source type already exists for key=%s", buf, 0x26u);
      return 0;
    }
  }
  else
  {
    CMTimeValue value = 0;
    if ((VCOverlaySource_Create(*MEMORY[0x1E4F1CF80], (uint64_t *)&value) & 0x80000000) != 0) {
      return 0;
    }
    double v14 = micro();
    uint64_t v15 = value;
    *((void *)value + 2) = (uint64_t)v14;
    v15[6] = a3;
    *((unsigned char *)v15 + 28) = a4;
    CFDictionaryAddValue(a1, a2, v15);
    BOOL v12 = CFDictionaryContainsKey(a1, a2) != 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      CMTimeScale v17 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = CFStringGetCStringPtr(a2, 0x8000100u);
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v22 = v16;
        __int16 v23 = 2080;
        CMTime v24 = "_VCOverlayManager_AddSourceToDictionary";
        __int16 v25 = 1024;
        int v26 = 75;
        __int16 v27 = 2080;
        CStringPtr = v18;
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] source successfully added for key=%s", buf, 0x26u);
      }
    }
    CFRelease(value);
  }
  return v12;
}

CFMutableDictionaryRef VCOverlayManager_registerOverlayForToken(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t valuePtr = a1;
  if (!a1) {
    return 0;
  }
  if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  }
  uint64_t v1 = _VCOverlayManager_sharedOverlay__overlayManager;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, &valuePtr);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v5 = Mutable;
  uint64_t v12 = 0;
  unsigned int v13 = &v12;
  uint64_t v14 = 0x3052000000;
  uint64_t v15 = __Block_byref_object_copy__39;
  uint64_t v16 = __Block_byref_object_dispose__39;
  uint64_t v17 = 0;
  if (v3) {
    BOOL v6 = Mutable == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCOverlayManager_registerOverlayForToken";
        *(_WORD *)&buf[22] = 1024;
        int v20 = 118;
        __int16 v21 = 2048;
        uint64_t v22 = valuePtr;
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] error allocating overlayInfo token=%ld", buf, 0x26u);
      }
    }
    if (v3) {
      CFRelease(v3);
    }
    if (v5)
    {
      CFRelease(v5);
      CFMutableDictionaryRef v5 = 0;
    }
  }
  else
  {
    *(void *)CMTime buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    LOBYTE(v20) = 0;
    uint64_t v9 = *(NSObject **)(v1 + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    void block[2] = __VCOverlayManager_registerOverlayForToken_block_invoke;
    block[3] = &unk_1E6DB97C0;
    block[6] = v1;
    void block[7] = v3;
    block[8] = valuePtr;
    block[9] = v5;
    block[4] = &v12;
    void block[5] = buf;
    dispatch_sync(v9, block);
    CFRelease(v3);
    CFRelease(v5);
    CFMutableDictionaryRef v5 = (CFMutableDictionaryRef)(id)v13[5];
    _Block_object_dispose(buf, 8);
  }
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1E24049F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCOverlayManager_unregisterOverlayForToken(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  }
  CFAllocatorRef v2 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __VCOverlayManager_unregisterOverlayForToken_block_invoke;
  v5[3] = &unk_1E6DB9798;
  v5[5] = a1;
  void v5[6] = _VCOverlayManager_sharedOverlay__overlayManager;
  v5[4] = &v6;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t VCOverlayManager_createOverlaySourceForToken(uint64_t a1, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    CFMutableDictionaryRef v5 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136316162;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VCOverlayManager_createOverlaySourceForToken";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)uint64_t v14 = 165;
      *(_WORD *)&v14[4] = 2048;
      *(void *)&v14[6] = a1;
      __int16 v15 = 1024;
      unsigned int v16 = a2;
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] token=%ld and type=%d", buf, 0x2Cu);
    }
  }
  *(void *)CMTime buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  *(void *)uint64_t v14 = 0;
  uint64_t v6 = (const void *)_VCOverlayInfo_copyOverlayInfoForToken(a1);
  if (v6)
  {
    if (a2 > 2) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = off_1E6DB9830[(char)a2];
    }
    if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
      dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
    }
    char v9 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    void block[2] = __VCOverlayManager_createOverlaySourceForToken_block_invoke;
    block[3] = &unk_1E6DB97E8;
    block[6] = v7;
    void block[7] = a1;
    char v12 = a2;
    block[4] = buf;
    void block[5] = v6;
    dispatch_sync(v9, block);
    CFRelease(v6);
    uint64_t v8 = *(void *)(*(void *)&buf[8] + 24);
  }
  else
  {
    uint64_t v8 = 0;
  }
  _Block_object_dispose(buf, 8);
  return v8;
}

void sub_1E240515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCOverlayManager_releaseOverlaySourceWithToken(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = _VCOverlayInfo_copyOverlayInfoForToken(a1);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v8 = 0;
    char v9 = &v8;
    uint64_t v10 = 0x2020000000;
    char v11 = 0;
    if (a2 <= 2) {
      uint64_t v4 = off_1E6DB9830[(char)a2];
    }
    if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
      dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
    }
    CFMutableDictionaryRef v5 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __VCOverlayManager_releaseOverlaySourceWithToken_block_invoke;
    v7[3] = &unk_1E6DB9798;
    v7[5] = v3;
    v7[6] = v4;
    v7[4] = &v8;
    dispatch_sync(v5, v7);
    CFRelease((CFTypeRef)v3);
    uint64_t v3 = *((unsigned char *)v9 + 24) != 0;
    _Block_object_dispose(&v8, 8);
  }
  return v3;
}

void sub_1E2405708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCOverlayManager_dispatchedIsOverlayEnabled()
{
  if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(_VCOverlayManager_sharedOverlay__overlayManager + 8));
  if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  }
  return *(unsigned __int8 *)(_VCOverlayManager_sharedOverlay__overlayManager + 16);
}

uint64_t VCOverlayManager_isOverlayEnabled()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0;
  CFMutableDictionaryRef v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  }
  id v0 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  void block[2] = __VCOverlayManager_isOverlayEnabled_block_invoke;
  block[3] = &unk_1E6DB9810;
  block[4] = &v4;
  void block[5] = _VCOverlayManager_sharedOverlay__overlayManager;
  dispatch_sync(v0, block);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t VCOverlayManager_updateOverlayEnabledState()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0;
  CFMutableDictionaryRef v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  if (_VCOverlayManager_sharedOverlay_onceToken != -1) {
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  }
  id v0 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  void block[2] = __VCOverlayManager_updateOverlayEnabledState_block_invoke;
  block[3] = &unk_1E6DB9810;
  block[4] = &v4;
  void block[5] = _VCOverlayManager_sharedOverlay__overlayManager;
  dispatch_sync(v0, block);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t VCMediaNegotiationFaceTimeSettingsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CFMutableDictionaryRef v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_57;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_59;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_57:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_59:
          uint64_t v45 = 8;
          goto LABEL_76;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_63:
          uint64_t v45 = 20;
          goto LABEL_76;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          *(unsigned char *)(a1 + 28) |= 0x10u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v31 |= (unint64_t)(v34 & 0x7F) << v29;
              if (v34 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  uint64_t v31 = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v31 = 0;
          }
LABEL_67:
          *(unsigned char *)(a1 + 24) = v31 != 0;
          continue;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v19 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_71:
          uint64_t v45 = 16;
          goto LABEL_76;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0) {
          goto LABEL_73;
        }
        v40 += 7;
        BOOL v14 = v41++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_75;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_73:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_75:
      uint64_t v45 = 12;
LABEL_76:
      *(_DWORD *)(a1 + v45) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void VCStatisticsHistory_AddStatsHistory(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    uint64_t v4 = (int *)(a1 + 32008);
    int v5 = *a2;
    if (*(unsigned __int8 *)(a1 + 32080) != v5)
    {
      *(unsigned char *)(a1 + 32080) = v5;
      *(void *)(a1 + 32008) = 0;
      *(_OWORD *)(a1 + 32016) = 0u;
      *(_OWORD *)(a1 + 32032) = 0u;
      *(_OWORD *)(a1 + 32048) = 0u;
      *(_OWORD *)(a1 + 32064) = 0u;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        char v7 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v26 = 136315650;
          uint64_t v27 = v6;
          __int16 v28 = 2080;
          char v29 = "_VCStatisticsHistory_ResetHistory";
          __int16 v30 = 1024;
          int v31 = 371;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Reset VCRC statistics history", (uint8_t *)&v26, 0x1Cu);
        }
      }
    }
    if (*v4 >= 1)
    {
      uint64_t v8 = *(int *)(a1 + 32012);
      if ((unsigned __int16)(*((_WORD *)a2 + 8) - *(_WORD *)(a1 + (v8 << 6) + 24)) > 0x7FFEu) {
        return;
      }
      *(_DWORD *)(a1 + 32012) = ((int)v8 + 1) % 500;
    }
    if ((int)(*((void *)a2 + 4) - *(void *)(a1 + 32048)) < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        char v17 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *((void *)a2 + 4);
          uint64_t v19 = *(unsigned __int8 **)(a1 + 32048);
          int v26 = 136316162;
          uint64_t v27 = v16;
          __int16 v28 = 2080;
          char v29 = "_VCStatisticsHistory_HandleWrappedAroundByteCountForStats";
          __int16 v30 = 1024;
          int v31 = 347;
          __int16 v32 = 2048;
          uint64_t v33 = v18;
          __int16 v34 = 2048;
          char v35 = v19;
          _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics history receives out of order statistics for totalByteSent! [current:%llu, previous:%llu]", (uint8_t *)&v26, 0x30u);
        }
      }
    }
    else
    {
      unint64_t v9 = *((void *)a2 + 5);
      uint64_t v10 = *(void *)(a1 + 32056);
      if ((int)v9 - (int)v10 < 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v20 = VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCStatisticsHistory_AddStatsHistory_cold_1(v20);
          }
        }
      }
      else
      {
        *((void *)a2 + 4) = (*(void *)(a1 + 32048) & 0xFFFFFFFF00000000 | *((void *)a2 + 4))
                            + ((unint64_t)(*((void *)a2 + 4) < (unint64_t)*(void *)(a1 + 32048)) << 32);
        *((void *)a2 + 5) = (v10 & 0xFFFFFFFF00000000 | v9)
                            + ((unint64_t)(v9 < v10) << 32);
        long long v11 = *(_OWORD *)a2;
        long long v12 = *((_OWORD *)a2 + 1);
        long long v13 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 32048) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 32064) = v13;
        *(_OWORD *)(a1 + 32016) = v11;
        *(_OWORD *)(a1 + 32032) = v12;
      }
    }
    uint64_t v21 = a1 + ((uint64_t)*(int *)(a1 + 32012) << 6);
    long long v22 = *(_OWORD *)a2;
    long long v23 = *((_OWORD *)a2 + 1);
    long long v24 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v21 + 56) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v21 + 40) = v24;
    *(_OWORD *)(v21 + 24) = v23;
    *(_OWORD *)(v21 + 8) = v22;
    int v25 = *v4;
    if (*v4 < 500) {
      ++v25;
    }
    *uint64_t v4 = v25;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v26 = 136316162;
      uint64_t v27 = v14;
      __int16 v28 = 2080;
      char v29 = "VCStatisticsHistory_AddStatsHistory";
      __int16 v30 = 1024;
      int v31 = 51;
      __int16 v32 = 2048;
      uint64_t v33 = a1;
      __int16 v34 = 2048;
      char v35 = a2;
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Invalid parameter. statisticsHistory=%p statsElement=%p", (uint8_t *)&v26, 0x30u);
    }
  }
}

double VCStatisticsHistory_PacketLossRate(uint64_t a1, double a2, double a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int v45 = -1431655766;
  double v5 = 0.0;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v45, a2, a3))
  {
    uint64_t v6 = a1 + 8;
    char v44 = (int *)(a1 + 32012);
    uint64_t v7 = *(int *)(a1 + 32012);
    uint64_t v8 = a1 + 8 + (v7 << 6);
    if (*(_DWORD *)(v8 + 20) != *(_DWORD *)(v8 + 24))
    {
      uint64_t v9 = 0;
      long long v10 = *(_OWORD *)v8;
      long long v11 = *(_OWORD *)(v8 + 32);
      long long v12 = *(_OWORD *)(v8 + 48);
      v65[1] = *(_OWORD *)(v8 + 16);
      v65[2] = v11;
      long long v13 = (_OWORD *)(v6 + ((uint64_t)v45 << 6));
      long long v14 = v13[1];
      v64[0] = *v13;
      v64[1] = v14;
      long long v15 = v13[3];
      v64[2] = v13[2];
      uint64_t v16 = (_OWORD *)(v6 + ((uint64_t)(((int)v7 + 499) % 500) << 6));
      long long v17 = v16[3];
      v65[6] = v16[2];
      v65[7] = v17;
      long long v18 = v16[1];
      v65[4] = *v16;
      v65[5] = v18;
      v65[3] = v12;
      uint64_t v19 = (long long *)(v6 + ((uint64_t)((v45 + 1) % 500) << 6));
      long long v20 = v19[2];
      v64[7] = v19[3];
      v65[0] = v10;
      long long v21 = *v19;
      v64[5] = v19[1];
      v64[6] = v20;
      v64[3] = v15;
      v64[4] = v21;
      double v5 = 1.0;
      char v22 = 1;
      while (2)
      {
        uint64_t v23 = 0;
        char v42 = v22;
        int v43 = v9;
        long long v24 = &v65[4 * v9];
        int v26 = *((_DWORD *)v24 + 5);
        int v25 = *((_DWORD *)v24 + 6);
        char v27 = 1;
        do
        {
          char v28 = v27;
          char v29 = &v64[4 * v23];
          int v30 = v26 - *((_DWORD *)v29 + 5);
          unsigned int v31 = v25 - *((_DWORD *)v29 + 6);
          if (v30 < 0 || (v31 & 0x80000000) != 0)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v33 = VRTraceErrorLogLevelToCSTR();
              __int16 v34 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                int v35 = *v44;
                *(_DWORD *)CMTime buf = 136317186;
                uint64_t v47 = v33;
                __int16 v48 = 2080;
                long long v49 = "VCStatisticsHistory_PacketLossRate";
                __int16 v50 = 1024;
                int v51 = 106;
                __int16 v52 = 1024;
                int v53 = v30;
                __int16 v54 = 1024;
                unsigned int v55 = v31;
                __int16 v56 = 2048;
                double v57 = a2;
                __int16 v58 = 1024;
                int v59 = v35;
                __int16 v60 = 1024;
                int v61 = v43;
                __int16 v62 = 1024;
                int v63 = v23;
                _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Statistics has reverse history! packet count is not incremental, sendDiff:%d, receiveDiff:%d, time:%f, index:%d [%d,%d]", buf, 0x44u);
              }
            }
          }
          else
          {
            int v32 = v30 - v31;
            if (v30 < v31)
            {
              double v5 = 0.0;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
              {
                uint64_t v36 = VRTraceErrorLogLevelToCSTR();
                uint64_t v37 = *MEMORY[0x1E4F47A50];
                unint64_t v38 = *MEMORY[0x1E4F47A50];
                if (*MEMORY[0x1E4F47A40])
                {
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                  {
                    int v39 = *v44;
                    *(_DWORD *)CMTime buf = 136317186;
                    uint64_t v47 = v36;
                    __int16 v48 = 2080;
                    long long v49 = "VCStatisticsHistory_PacketLossRate";
                    __int16 v50 = 1024;
                    int v51 = 108;
                    __int16 v52 = 1024;
                    int v53 = v30;
                    __int16 v54 = 1024;
                    unsigned int v55 = v31;
                    __int16 v56 = 2048;
                    double v57 = a2;
                    __int16 v58 = 1024;
                    int v59 = v39;
                    __int16 v60 = 1024;
                    int v61 = v43;
                    __int16 v62 = 1024;
                    int v63 = v23;
                    _os_log_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Received more packets than sent, sendDiff:%d, receiveDiff:%d, time:%f, index:%d [%d,%d]", buf, 0x44u);
                  }
                }
                else if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
                {
                  int v41 = *v44;
                  *(_DWORD *)CMTime buf = 136317186;
                  uint64_t v47 = v36;
                  __int16 v48 = 2080;
                  long long v49 = "VCStatisticsHistory_PacketLossRate";
                  __int16 v50 = 1024;
                  int v51 = 108;
                  __int16 v52 = 1024;
                  int v53 = v30;
                  __int16 v54 = 1024;
                  unsigned int v55 = v31;
                  __int16 v56 = 2048;
                  double v57 = a2;
                  __int16 v58 = 1024;
                  int v59 = v41;
                  __int16 v60 = 1024;
                  int v61 = v43;
                  __int16 v62 = 1024;
                  int v63 = v23;
                  _os_log_debug_impl(&dword_1E1EA4000, v37, OS_LOG_TYPE_DEBUG, "AVCRC [%s] %s:%d Received more packets than sent, sendDiff:%d, receiveDiff:%d, time:%f, index:%d [%d,%d]", buf, 0x44u);
                }
              }
              return v5;
            }
            if (v30 == v31) {
              return 0.0;
            }
            if (v5 >= (double)v32 / (double)v30) {
              double v5 = (double)v32 / (double)v30;
            }
          }
          char v27 = 0;
          uint64_t v23 = 1;
        }
        while ((v28 & 1) != 0);
        char v22 = 0;
        uint64_t v9 = 1;
        if (v42) {
          continue;
        }
        break;
      }
    }
  }
  return v5;
}

BOOL _VCStatisticsHistory_GetStatsHistoryElementIndex(uint64_t a1, _DWORD *a2, double a3, double a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _VCStatisticsHistory_GetStatsHistoryElementIndex_cold_1(v16);
    }
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 32008);
  double v8 = 0.0;
  if (v7 >= 1)
  {
    uint64_t v9 = a1 + 8;
    double v10 = a3 - a4;
    int v11 = *(_DWORD *)(a1 + 32012) + 500;
    do
    {
      uint64_t v12 = (v11 % 500);
      if (*(double *)(v9 + ((uint64_t)(int)v12 << 6) + 8) < v10)
      {
        *a2 = v12;
        return 1;
      }
      --v11;
      --v7;
    }
    while (v7);
    if ((v12 & 0x80000000) == 0) {
      double v8 = a3 - *(double *)(v9 + (v12 << 6) + 8);
    }
  }
  if (a3 - *(double *)(a1 + 32088) <= 2.0) {
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    long long v14 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136316162;
      uint64_t v18 = v13;
      __int16 v19 = 2080;
      long long v20 = "_VCStatisticsHistory_GetStatsHistoryElementIndex";
      __int16 v21 = 1024;
      int v22 = 338;
      __int16 v23 = 2048;
      double v24 = a4;
      __int16 v25 = 2048;
      double v26 = v8;
      _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Statistics history does not have enough history for the stats within the most recent %f seconds. History size: %f seconds", (uint8_t *)&v17, 0x30u);
    }
  }
  BOOL result = 0;
  *(double *)(a1 + 32088) = a3;
  return result;
}

double VCStatisticsHistory_SendingBitrate(uint64_t a1, double a2, double a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v16 = -1431655766;
  double v5 = 0.0;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v16, a2, a3))
  {
    uint64_t v6 = (int *)(a1 + 32012);
    uint64_t v7 = a1 + 8 + ((uint64_t)*(int *)(a1 + 32012) << 6);
    uint64_t v8 = *(void *)(v7 + 32);
    uint64_t v9 = a1 + 8 + ((uint64_t)v16 << 6);
    uint64_t v10 = *(void *)(v9 + 32);
    if ((int)v8 - (int)v10 < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        uint64_t v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v15 = *v6;
          *(_DWORD *)CMTime buf = 136316930;
          uint64_t v18 = v12;
          __int16 v19 = 2080;
          long long v20 = "VCStatisticsHistory_SendingBitrate";
          __int16 v21 = 1024;
          int v22 = 134;
          __int16 v23 = 1024;
          int v24 = v8 - v10;
          __int16 v25 = 2048;
          uint64_t v26 = v8;
          __int16 v27 = 2048;
          uint64_t v28 = v10;
          __int16 v29 = 2048;
          double v30 = a2;
          __int16 v31 = 1024;
          int v32 = v15;
          _os_log_error_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics has reverse history! byte count is not incremental, sendDiff:%d, currentCount:%llu, previousCount:%llu, time:%f, index:%d", buf, 0x46u);
        }
      }
    }
    else
    {
      double v11 = *(double *)(v7 + 8) - *(double *)(v9 + 8);
      if (v11 > 0.0) {
        return (double)(8 * ((int)v8 - (int)v10)) / v11;
      }
    }
  }
  return v5;
}

double VCStatisticsHistory_ReceivingBitrate(uint64_t a1, double a2, double a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v16 = -1431655766;
  double v5 = 0.0;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v16, a2, a3))
  {
    uint64_t v6 = (int *)(a1 + 32012);
    uint64_t v7 = a1 + 8 + ((uint64_t)*(int *)(a1 + 32012) << 6);
    uint64_t v8 = *(void *)(v7 + 40);
    uint64_t v9 = a1 + 8 + ((uint64_t)v16 << 6);
    uint64_t v10 = *(void *)(v9 + 40);
    if ((int)v8 - (int)v10 < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        uint64_t v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v15 = *v6;
          *(_DWORD *)CMTime buf = 136316930;
          uint64_t v18 = v12;
          __int16 v19 = 2080;
          long long v20 = "VCStatisticsHistory_ReceivingBitrate";
          __int16 v21 = 1024;
          int v22 = 154;
          __int16 v23 = 1024;
          int v24 = v8 - v10;
          __int16 v25 = 2048;
          uint64_t v26 = v8;
          __int16 v27 = 2048;
          uint64_t v28 = v10;
          __int16 v29 = 2048;
          double v30 = a2;
          __int16 v31 = 1024;
          int v32 = v15;
          _os_log_error_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics has reverse history! byte count is not incremental, receiveDiff:%d, currentCount:%llu, previousCount:%llu, time:%f, index:%d", buf, 0x46u);
        }
      }
    }
    else
    {
      double v11 = *(double *)(v7 + 8) - *(double *)(v9 + 8);
      if (v11 > 0.0) {
        return (double)(8 * ((int)v8 - (int)v10)) / v11;
      }
    }
  }
  return v5;
}

double VCStatisticsHistory_ServerStatsBitrate(uint64_t a1, double a2, double a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v16 = -1431655766;
  double v5 = 0.0;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v16, a2, a3))
  {
    uint64_t v6 = (int *)(a1 + 32012);
    uint64_t v7 = a1 + 8 + ((uint64_t)*(int *)(a1 + 32012) << 6);
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v9 = a1 + 8 + ((uint64_t)v16 << 6);
    uint64_t v10 = *(void *)(v9 + 48);
    if ((int)v8 - (int)v10 < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        uint64_t v13 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v15 = *v6;
          *(_DWORD *)CMTime buf = 136316930;
          uint64_t v18 = v12;
          __int16 v19 = 2080;
          long long v20 = "VCStatisticsHistory_ServerStatsBitrate";
          __int16 v21 = 1024;
          int v22 = 174;
          __int16 v23 = 1024;
          int v24 = v8 - v10;
          __int16 v25 = 2048;
          uint64_t v26 = v8;
          __int16 v27 = 2048;
          uint64_t v28 = v10;
          __int16 v29 = 2048;
          double v30 = a2;
          __int16 v31 = 1024;
          int v32 = v15;
          _os_log_error_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics has reverse history! byte count is not incremental, serverStatsDiff:%d, currentCount:%llu, previousCount:%llu, time:%f, index:%d", buf, 0x46u);
        }
      }
    }
    else
    {
      double v11 = *(double *)(v7 + 8) - *(double *)(v9 + 8);
      if (v11 > 0.0) {
        return (double)(8 * ((int)v8 - (int)v10)) / v11;
      }
    }
  }
  return v5;
}

uint64_t VCStatisticsHistory_GetBurstyLoss(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v15 = -1431655766;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v15, a2, a3))
  {
    bzero(&__base, 0x7D0uLL);
    int v7 = *(_DWORD *)(a1 + 32012) + 500;
    int v8 = (v7 - v15) % 500;
    if (v8 >= 1)
    {
      p_base = &__base;
      uint64_t v10 = ((v7 - v15) % 500);
      do
      {
        *p_base++ = *(_DWORD *)(a1 + 8 + ((uint64_t)(v7 % 500) << 6) + 56);
        --v7;
        --v10;
      }
      while (v10);
    }
    qsort(&__base, v8, 4uLL, (int (__cdecl *)(const void *, const void *))compare);
    return *(&__base + (int)((double)v8 * a4));
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v12 = VRTraceErrorLogLevelToCSTR();
      uint64_t v13 = *MEMORY[0x1E4F47A50];
      long long v14 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int __base = 136315906;
          uint64_t v17 = v12;
          __int16 v18 = 2080;
          __int16 v19 = "VCStatisticsHistory_GetBurstyLoss";
          __int16 v20 = 1024;
          int v21 = 188;
          __int16 v22 = 2048;
          double v23 = a3;
          _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Statistics history does not have enough history for the stats within the most recent %f seconds", (uint8_t *)&__base, 0x26u);
        }
      }
      else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        VCStatisticsHistory_GetBurstyLoss_cold_1(v12, v13, a3);
      }
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t compare(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

void VCStatisticsHistory_AddAndPruneSendHistory(uint64_t a1, int *a2, double a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 32096);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)(v5 + 40);
      uint64_t v7 = *(void *)(v5 + 40);
      if (v7)
      {
        int v9 = 0;
        int v10 = 0;
        do
        {
          if (*(double *)(v5 + 8) < a3)
          {
            uint64_t v11 = *(void *)(v5 + 48);
            if (v11)
            {
              *(void *)(v11 + 40) = v7;
              uint64_t v7 = *v6;
              *(void *)(*v6 + 48) = v11;
            }
            else
            {
              *(void *)(a1 + 32096) = v7;
              *(void *)(v7 + 48) = 0;
              uint64_t v7 = *v6;
            }
            free((void *)v5);
            ++v9;
          }
          uint64_t v5 = v7;
          ++v10;
          uint64_t v6 = (uint64_t *)(v7 + 40);
          uint64_t v7 = *(void *)(v7 + 40);
        }
        while (v7);
      }
      else
      {
        int v10 = 0;
        int v9 = 0;
      }
      *(void *)(v5 + 40) = a2;
      *((void *)a2 + 6) = v5;
    }
    else
    {
      int v10 = 0;
      int v9 = 0;
      *(void *)(a1 + 32096) = a2;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v17 = VRTraceErrorLogLevelToCSTR();
      __int16 v18 = *MEMORY[0x1E4F47A50];
      __int16 v19 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        if (a2) {
          int v20 = *a2;
        }
        else {
          int v20 = 0;
        }
        int v22 = 136316418;
        uint64_t v23 = v17;
        __int16 v24 = 2080;
        __int16 v25 = "VCStatisticsHistory_AddAndPruneSendHistory";
        __int16 v26 = 1024;
        int v27 = 244;
        __int16 v28 = 1024;
        *(_DWORD *)__int16 v29 = v20;
        *(_WORD *)&v29[4] = 1024;
        *(_DWORD *)&v29[6] = v10;
        __int16 v30 = 1024;
        int v31 = v9;
        long long v14 = "AVCRC [%s] %s:%d Adding sendStats with packetId:%u [len:%d, pruned:%d]";
        int v15 = v18;
        uint32_t v16 = 46;
        goto LABEL_28;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        if (a2) {
          int v21 = *a2;
        }
        else {
          int v21 = 0;
        }
        int v22 = 136316418;
        uint64_t v23 = v17;
        __int16 v24 = 2080;
        __int16 v25 = "VCStatisticsHistory_AddAndPruneSendHistory";
        __int16 v26 = 1024;
        int v27 = 244;
        __int16 v28 = 1024;
        *(_DWORD *)__int16 v29 = v21;
        *(_WORD *)&v29[4] = 1024;
        *(_DWORD *)&v29[6] = v10;
        __int16 v30 = 1024;
        int v31 = v9;
        _os_log_debug_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEBUG, "AVCRC [%s] %s:%d Adding sendStats with packetId:%u [len:%d, pruned:%d]", (uint8_t *)&v22, 0x2Eu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    uint64_t v13 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 136315906;
      uint64_t v23 = v12;
      __int16 v24 = 2080;
      __int16 v25 = "VCStatisticsHistory_AddAndPruneSendHistory";
      __int16 v26 = 1024;
      int v27 = 209;
      __int16 v28 = 2048;
      *(void *)__int16 v29 = 0;
      long long v14 = "AVCRC [%s] %s:%d Invalid parameter. statisticsHistory=%p";
      int v15 = v13;
      uint32_t v16 = 38;
LABEL_28:
      _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v22, v16);
    }
  }
}

uint64_t VCStatisticsHistory_GetSendHistoryElement(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      int v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136315906;
        uint64_t v12 = v9;
        __int16 v13 = 2080;
        long long v14 = "VCStatisticsHistory_GetSendHistoryElement";
        __int16 v15 = 1024;
        int v16 = 249;
        __int16 v17 = 2048;
        *(void *)__int16 v18 = 0;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Invalid parameter. statisticsHistory=%p", (uint8_t *)&v11, 0x26u);
      }
    }
    return 0;
  }
  if (!*(void *)(a1 + 32096)) {
    return 0;
  }
  int v4 = 0;
  uint64_t result = *(void *)(a1 + 32096);
  while (*(_DWORD *)result != a2)
  {
    ++v4;
    uint64_t result = *(void *)(result + 40);
    if (!result)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v6 = VRTraceErrorLogLevelToCSTR();
        uint64_t v7 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v8 = **(_DWORD **)(a1 + 32096);
          int v11 = 136316418;
          uint64_t v12 = v6;
          __int16 v13 = 2080;
          long long v14 = "VCStatisticsHistory_GetSendHistoryElement";
          __int16 v15 = 1024;
          int v16 = 261;
          __int16 v17 = 1024;
          *(_DWORD *)__int16 v18 = a2;
          *(_WORD *)&v18[4] = 1024;
          *(_DWORD *)&v18[6] = v8;
          __int16 v19 = 1024;
          int v20 = v4;
          _os_log_error_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Cannot find sendStatsElement in history with packetId %d [earliest packetId: %d, len:%d]", (uint8_t *)&v11, 0x2Eu);
        }
      }
      return 0;
    }
  }
  return result;
}

double VCStatisticsHistory_BytesInFlight(uint64_t a1, double *a2, double *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 && (uint64_t v3 = *(void *)(a1 + 32096)) != 0)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 40);
    }
    while (v3);
    if (a3)
    {
      double result = *(double *)(v4 + 8);
      *a3 = result;
    }
    uint64_t v6 = v4;
    while (!*(unsigned char *)(v6 + 32))
    {
      uint64_t v6 = *(void *)(v6 + 48);
      if (!v6) {
        return result;
      }
    }
    if (a2)
    {
      double result = *(double *)(v6 + 8);
      *a2 = result;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v7 = VRTraceErrorLogLevelToCSTR();
    int v8 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315650;
      uint64_t v10 = v7;
      __int16 v11 = 2080;
      uint64_t v12 = "VCStatisticsHistory_BytesInFlight";
      __int16 v13 = 1024;
      int v14 = 268;
      _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Empty send history with bytesInFlight query!", (uint8_t *)&v9, 0x1Cu);
    }
  }
  return result;
}

double VCStatisticsHistory_RoundTripTimeWithPacketId(uint64_t a1, int a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 32096);
  double v4 = 0.0;
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      uint64_t v3 = *(void *)(v3 + 40);
      if (!v3)
      {
        double v4 = 0.0;
        return fmax(v4, 0.0);
      }
    }
    *(unsigned char *)(v3 + 32) = 1;
    double v4 = a3 - *(double *)(v3 + 8);
  }
  return fmax(v4, 0.0);
}

FILE *openLogDump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    __int16 v11 = (__CFString *)[NSString stringWithUTF8String:a2];
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v12 = &stru_1F3D3E450;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    __int16 v13 = &stru_1F3D3E450;
    goto LABEL_8;
  }
  __int16 v11 = &stru_1F3D3E450;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v12 = (__CFString *)[NSString stringWithUTF8String:a4];
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  __int16 v13 = (__CFString *)[NSString stringWithUTF8String:a5];
LABEL_8:
  id v14 = +[LogDumpUtility logFilename:a1 dumpID:v11 logNameType:a3 prefix:v12 suffix:v13];
  if (!v14) {
    return 0;
  }
  uint64_t v15 = v14;
  if (![MEMORY[0x1E4F47A28] createDefaultLogDirectoryIfNeeded]) {
    return 0;
  }
  int v16 = fopen((const char *)[v15 UTF8String], "w+");
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v16)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v18 = VRTraceErrorLogLevelToCSTR();
      __int16 v19 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v25 = 136315906;
        uint64_t v26 = v18;
        __int16 v27 = 2080;
        __int16 v28 = "openLogDump";
        __int16 v29 = 1024;
        int v30 = 56;
        __int16 v31 = 2112;
        uint64_t v32 = v15;
        _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d successfully created %@", (uint8_t *)&v25, 0x26u);
        if (!a6) {
          return v16;
        }
        goto LABEL_20;
      }
    }
LABEL_19:
    if (!a6) {
      return v16;
    }
    goto LABEL_20;
  }
  if (ErrorLogLevelForModule < 3) {
    goto LABEL_19;
  }
  uint64_t v21 = VRTraceErrorLogLevelToCSTR();
  int v22 = *MEMORY[0x1E4F47A50];
  if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
    goto LABEL_19;
  }
  openLogDump_cold_1(v21, (uint64_t)v15, v22);
  if (!a6) {
    return v16;
  }
LABEL_20:
  if (v16)
  {
    size_t v23 = [v15 maximumLengthOfBytesUsingEncoding:4] + 1;
    __int16 v24 = malloc_type_malloc(v23, 0x4FEBB616uLL);
    *a6 = v24;
    [v15 getCString:v24 maxLength:v23 encoding:4];
  }
  else
  {
    *a6 = 0;
  }
  return v16;
}

char *VRLogfileGetTimestamp(char *a1, unsigned int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v6.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v6, 0);
  v7.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v7.tm_mon = v4;
  *(_OWORD *)&v7.tm_isdst = v4;
  *(_OWORD *)&v7.tm_sec = v4;
  localtime_r(&v6.tv_sec, &v7);
  snprintf(a1, a2, "%02d%02d%02d.%06d", v7.tm_hour, v7.tm_min, v7.tm_sec, v6.tv_usec);
  return a1;
}

char *VRLogfileGetTimestampMicro(uint64_t a1, char *a2, unsigned int a3, double a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    time_t v6 = *(void *)(a1 + 32) + (uint64_t)a4;
    time_t v10 = v6;
    unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
    int v7 = *(_DWORD *)(a1 + 40) + (int)((a4 - (double)(uint64_t)a4) * 1000000.0);
    LODWORD(v11) = v7;
    if (v7 >= 1000001)
    {
      time_t v10 = v6 + 1;
      LODWORD(v11) = v7 - 1000000;
    }
    v12.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v12.tm_mon = v8;
    *(_OWORD *)&v12.tm_isdst = v8;
    *(_OWORD *)&v12.tm_sec = v8;
    localtime_r(&v10, &v12);
    snprintf(a2, a3, "%02d%02d%02d.%06d", v12.tm_hour, v12.tm_min, v12.tm_sec, v11);
  }
  else
  {
    VRLogfileGetTimestamp(a2, a3);
  }
  return a2;
}

FILE **VRLogfileAlloc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, char a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  tm v12 = (FILE **)malloc_type_calloc(1uLL, 0x40uLL, 0x10B0040208A8F78uLL);
  if (!v12)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VRLogfileAlloc_cold_1();
      }
    }
    return 0;
  }
  uint64_t v13 = v12;
  id v14 = openLogDump(a1, a2, a4 != 0, a3, a4, v12 + 6);
  *uint64_t v13 = v14;
  if (!v14)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VRLogfileAlloc_cold_2();
      }
    }
    goto LABEL_18;
  }
  *((unsigned char *)v13 + 16) = a6;
  dispatch_queue_t v15 = dispatch_queue_create(a5, 0);
  v13[1] = (FILE *)v15;
  if (!v15)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VRLogfileAlloc_cold_3();
      }
    }
LABEL_18:
    if (*v13) {
      fclose(*v13);
    }
    int v22 = v13[1];
    if (v22) {
      dispatch_release(v22);
    }
    free(v13);
    return 0;
  }
  v23.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v23.__darwin_suseconds_t tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v23, 0);
  double v16 = micro();
  uint64_t v17 = (uint64_t)v16;
  __darwin_suseconds_t v18 = (int)((v16 - (double)(int)v16) * 1000000.0);
  __darwin_suseconds_t tv_usec = v23.tv_usec;
  if (v23.tv_usec >= v18)
  {
    __darwin_time_t v20 = v23.tv_sec - v17;
  }
  else
  {
    __darwin_time_t v20 = v23.tv_sec + ~v17;
    __darwin_suseconds_t tv_usec = v23.tv_usec + 1000000;
  }
  v23.tv_sec = v20;
  v23.__darwin_suseconds_t tv_usec = tv_usec - v18;
  *((timeval *)v13 + 2) = v23;
  return v13;
}

uint64_t VRLogfileZip(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v26 = 0;
  if (*(void *)(a1 + 48)) {
    CFAllocatorRef v2 = (__CFString *)objc_msgSend(NSString, "stringWithUTF8String:");
  }
  else {
    CFAllocatorRef v2 = &stru_1F3D3E450;
  }
  uint64_t v3 = (__CFString *)[(__CFString *)v2 stringByAppendingString:@".gz"];
  long long v4 = fopen((const char *)[(__CFString *)v2 UTF8String], "r");
  if (v4)
  {
    uint64_t v5 = v4;
    time_t v6 = fopen((const char *)[(__CFString *)v3 UTF8String], "w+");
    if (v6)
    {
      uint64_t v7 = VCDiskUtils_FileZipToFile();
      int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (!v7)
      {
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v9 = VRTraceErrorLogLevelToCSTR();
          time_t v10 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315906;
            uint64_t v28 = v9;
            __int16 v29 = 2080;
            int v30 = "VRLogfileZip";
            __int16 v31 = 1024;
            int v32 = 181;
            __int16 v33 = 2112;
            __int16 v34 = v3;
            _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d compressed to %@", buf, 0x26u);
          }
        }
        fclose(v5);
        uint64_t v7 = 0;
        if (!v2)
        {
LABEL_15:
          fclose(v6);
          if (v7)
          {
            if (v3)
            {
              objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtPath:error:", v3, &v26);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                uint64_t v14 = VRTraceErrorLogLevelToCSTR();
                dispatch_queue_t v15 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v16 = [v26 localizedFailureReason];
                  *(_DWORD *)CMTime buf = 136316162;
                  uint64_t v28 = v14;
                  __int16 v29 = 2080;
                  int v30 = "VRLogfileZip";
                  __int16 v31 = 1024;
                  int v32 = 195;
                  __int16 v33 = 2112;
                  __int16 v34 = v3;
                  __int16 v35 = 2112;
                  uint64_t v36 = v16;
                  _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d removed zipFileName=%@, error=%@", buf, 0x30u);
                }
              }
            }
          }
          return v7;
        }
LABEL_11:
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtPath:error:", v2, &v26);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v11 = VRTraceErrorLogLevelToCSTR();
          tm v12 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v13 = [v26 localizedFailureReason];
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v28 = v11;
            __int16 v29 = 2080;
            int v30 = "VRLogfileZip";
            __int16 v31 = 1024;
            int v32 = 188;
            __int16 v33 = 2112;
            __int16 v34 = v2;
            __int16 v35 = 2112;
            uint64_t v36 = v13;
            _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d removed origFileName=%@, error=%@", buf, 0x30u);
          }
        }
LABEL_14:
        if (!v6) {
          return v7;
        }
        goto LABEL_15;
      }
      if (ErrorLogLevelForModule >= 5)
      {
        uint64_t v24 = VRTraceErrorLogLevelToCSTR();
        int v25 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v28 = v24;
          __int16 v29 = 2080;
          int v30 = "VRLogfileZip";
          __int16 v31 = 1024;
          int v32 = 180;
          __int16 v33 = 2112;
          __int16 v34 = v3;
          __int16 v35 = 1024;
          LODWORD(v36) = v7;
          _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d failed to create %@: %d", buf, 0x2Cu);
        }
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        int v22 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v23 = *__error();
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v28 = v21;
          __int16 v29 = 2080;
          int v30 = "VRLogfileZip";
          __int16 v31 = 1024;
          int v32 = 177;
          __int16 v33 = 2112;
          __int16 v34 = v3;
          __int16 v35 = 1024;
          LODWORD(v36) = v23;
          _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d open new zip %@ failed with %d", buf, 0x2Cu);
        }
      }
      uint64_t v7 = 1;
    }
    fclose(v5);
    if (!v2 || *(unsigned char *)(a1 + 56)) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v18 = VRTraceErrorLogLevelToCSTR();
    __int16 v19 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *__error();
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v28 = v18;
      __int16 v29 = 2080;
      int v30 = "VRLogfileZip";
      __int16 v31 = 1024;
      int v32 = 174;
      __int16 v33 = 2112;
      __int16 v34 = v2;
      __int16 v35 = 1024;
      LODWORD(v36) = v20;
      _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d open original %@ failed with %d", buf, 0x2Cu);
    }
  }
  return 1;
}

uint64_t VRLogfileZipOnly(const char *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = (void **)malloc_type_calloc(1uLL, 0x40uLL, 0x10B0040208A8F78uLL);
    if (v2)
    {
      uint64_t v3 = v2;
      long long v4 = (char *)malloc_type_malloc(0x400uLL, 0x7E254736uLL);
      v3[6] = v4;
      if (v4)
      {
        snprintf(v4, 0x400uLL, "%s", a1);
        uint64_t v5 = VRLogfileZip((uint64_t)v3);
      }
      else
      {
        uint64_t v5 = 3;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VRLogfileZipOnly_cold_3();
          }
        }
      }
      free(v3[6]);
      free(v3);
    }
    else
    {
      uint64_t v5 = 3;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VRLogfileZipOnly_cold_2();
        }
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VRLogfileZipOnly_cold_1();
      }
    }
    return 1;
  }
  return v5;
}

void VRLogfileFree(uint64_t *a1)
{
  v3[5] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *a1;
    if (*a1)
    {
      *a1 = 0;
      CFAllocatorRef v2 = *(NSObject **)(v1 + 8);
      if (v2)
      {
        v3[0] = MEMORY[0x1E4F143A8];
        v3[1] = 3221225472;
        v3[2] = __VRLogfileFree_block_invoke;
        void v3[3] = &__block_descriptor_40_e5_v8__0l;
        v3[4] = v1;
        dispatch_async(v2, v3);
      }
    }
  }
}

void __VRLogfileFree_block_invoke(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8));
  fclose(**(FILE ***)(a1 + 32));
  if (VCDefaults_GetBoolValueForKey(@"enableZipDump", 1)) {
    VRLogfileZip(*(void *)(a1 + 32));
  }
  free(*(void **)(*(void *)(a1 + 32) + 48));
  CFAllocatorRef v2 = *(void **)(a1 + 32);

  free(v2);
}

uint64_t VRLogfileGetFilePointer(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

void VRLogfilePrint(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(void *)a1)
    {
      bzero(__str, 0x400uLL);
      int v11 = vsnprintf(__str, 0x400uLL, a2, &a9);
      if ((v11 & 0x80000000) == 0)
      {
        if (v11 >= 1023) {
          int v12 = 1023;
        }
        else {
          int v12 = v11;
        }
        __str[v12] = 0;
        uint64_t v13 = *(NSObject **)(a1 + 8);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        void block[2] = __VRLogfilePrint_block_invoke;
        block[3] = &__block_descriptor_1064_e5_v8__0l;
        block[4] = a1;
        memcpy(v15, __str, sizeof(v15));
        dispatch_async(v13, block);
        *(unsigned char *)(a1 + 56) = 1;
      }
    }
  }
}

uint64_t __VRLogfilePrint_block_invoke(uint64_t a1)
{
  return fputs((const char *)(a1 + 40), **(FILE ***)(a1 + 32));
}

void VRLogfileWrite(void *a1, uint64_t a2, uint64_t a3)
{
  _OWORD v4[7] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*a1)
    {
      uint64_t v3 = a1[1];
      v4[0] = MEMORY[0x1E4F143A8];
      v4[1] = 3221225472;
      _DWORD v4[2] = __VRLogfileWrite_block_invoke;
      v4[3] = &__block_descriptor_56_e5_v8__0l;
      v4[4] = a2;
      v4[5] = a3;
      v4[6] = a1;
      dispatch_sync(v3, v4);
    }
  }
}

size_t __VRLogfileWrite_block_invoke(uint64_t a1)
{
  return fwrite(*(const void **)(a1 + 32), *(void *)(a1 + 40), 1uLL, **(FILE ***)(a1 + 48));
}

void VRLogfilePrintWithTimestamp(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    bzero(__str, 0x400uLL);
    memset(v18, 170, sizeof(v18));
    VRLogfileGetTimestamp(v18, 0x14u);
    int v11 = vsnprintf(__str, 0x400uLL, a2, &a9);
    if ((v11 & 0x80000000) == 0)
    {
      if (v11 >= 1023) {
        int v12 = 1023;
      }
      else {
        int v12 = v11;
      }
      __str[v12] = 0;
      uint64_t v13 = *(NSObject **)(a1 + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      void block[2] = __VRLogfilePrintWithTimestamp_block_invoke;
      block[3] = &__block_descriptor_1084_e5_v8__0l;
      block[4] = a1;
      long long v15 = *(_OWORD *)v18;
      int v16 = *(_DWORD *)&v18[16];
      memcpy(v17, __str, sizeof(v17));
      dispatch_async(v13, block);
    }
  }
}

uint64_t __VRLogfilePrintWithTimestamp_block_invoke(uint64_t a1)
{
  return fprintf(**(FILE ***)(a1 + 32), "%s%c%s", (const char *)(a1 + 40), *(char *)(*(void *)(a1 + 32) + 16), (const char *)(a1 + 60));
}

FILE **VRLogfilePrintSync(FILE **result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (result) {
    return (FILE **)vfprintf(*result, a2, &a9);
  }
  return result;
}

char *VRLogfile_CreateTimeAndDateString(char *result, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    memset(&v5, 0, sizeof(v5));
    v4.tv_sec = 0;
    *(void *)&v4.__darwin_suseconds_t tv_usec = 0;
    gettimeofday(&v4, 0);
    localtime_r(&v4.tv_sec, &v5);
    return (char *)snprintf(v3, a2, "%04d%02d%02d-%02d%02d%02d", v5.tm_year + 1900, v5.tm_mon + 1, v5.tm_mday, v5.tm_hour, v5.tm_min, v5.tm_sec);
  }
  return result;
}

uint64_t VRLogfileRemoveOldFilesInDefaultLogDumpPath()
{
  return +[LogDumpUtility removeOldFilesInDefaultLogDumpPath];
}

void *LogDumpUtility_CopyLogFilename(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v9 = (__CFString *)[NSString stringWithUTF8String:a2];
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    time_t v10 = &stru_1F3D3E450;
    if (a5) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v9 = &stru_1F3D3E450;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  time_t v10 = (__CFString *)[NSString stringWithUTF8String:a4];
  if (a5)
  {
LABEL_4:
    int v11 = (__CFString *)[NSString stringWithUTF8String:a5];
    goto LABEL_8;
  }
LABEL_7:
  int v11 = &stru_1F3D3E450;
LABEL_8:
  id v12 = +[LogDumpUtility logFilename:a1 dumpID:v9 logNameType:a3 prefix:v10 suffix:v11];
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v12;
  size_t v14 = [v12 maximumLengthOfBytesUsingEncoding:4] + 1;
  long long v15 = malloc_type_malloc(v14, 0x5A694DD4uLL);
  if (v15) {
    [v13 getCString:v15 maxLength:v14 encoding:4];
  }
  return v15;
}

uint64_t VCTransportStreamRunLoopGetClassID()
{
  if (VCTransportStreamRunLoopGetClassID_onceToken != -1) {
    dispatch_once(&VCTransportStreamRunLoopGetClassID_onceToken, &__block_literal_global_98);
  }
  return VCTransportStreamRunLoopGetClassID_classID;
}

CFStringRef _VCTransportStreamRunLoopCopyFormattingDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[VCTransportStreamRunLoop %p]", a1);
}

uint64_t __VCTransportStreamRunLoopGetClassID_block_invoke()
{
  uint64_t ClassID = CMBaseGetClassID();

  return MEMORY[0x1F40DC658](&VCTransportStreamRunLoopGetClassID_descriptor, ClassID, 1, &VCTransportStreamRunLoopGetClassID_classID);
}

uint64_t VCTransportStreamRunLoopCreateWithTransportStreams(const __CFAllocator *a1, CFArrayRef theArray, CFTypeRef *a3)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (theArray)
  {
    if (a3)
    {
      int Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
        uint64_t v14 = 2151022593;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCTransportStreamRunLoopCreateWithTransportStreams_cold_3();
          }
        }
      }
      else
      {
        CFIndex v7 = 0;
        uint64_t v8 = Count;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
          if (!ValueAtIndex) {
            break;
          }
          time_t v10 = ValueAtIndex;
          CFTypeRef v11 = cf[0];
          if (!cf[0])
          {
            if (!VCTransportStreamIsOfKindVTP((uint64_t)ValueAtIndex))
            {
              uint64_t v14 = 2150760449;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  VCTransportStreamRunLoopCreateWithTransportStreams_cold_5();
                }
              }
              goto LABEL_18;
            }
            uint64_t v12 = VCTransportStreamRunLoopVTPCreate(a1, cf);
            if ((v12 & 0x80000000) != 0)
            {
              uint64_t v14 = v12;
              goto LABEL_18;
            }
            CFTypeRef v11 = cf[0];
          }
          uint64_t v13 = *(uint64_t (**)(CFTypeRef, const void *))(*(void *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v13)
          {
            uint64_t v14 = 4294954514;
            goto LABEL_18;
          }
          uint64_t v14 = v13(v11, v10);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_18;
          }
          if (v8 == ++v7)
          {
            *a3 = cf[0];
            return v14;
          }
        }
        uint64_t v14 = 2150760449;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCTransportStreamRunLoopCreateWithTransportStreams_cold_4();
          }
        }
      }
    }
    else
    {
      uint64_t v14 = 2151022593;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCTransportStreamRunLoopCreateWithTransportStreams_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v14 = 2151022593;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return v14;
    }
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCTransportStreamRunLoopCreateWithTransportStreams_cold_1();
    }
  }
LABEL_18:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v14;
}

uint64_t VCMediaNegotiationBlobV2StreamGroupStreamReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  timeval v4 = (int *)MEMORY[0x1E4F940E0];
  tm v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    CFIndex v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 0x10u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_116;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_118;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_116:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_118:
          uint64_t v88 = 24;
          goto LABEL_167;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 0x20u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_122;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_122:
          uint64_t v88 = 40;
          goto LABEL_167;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 0x80u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_126;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_126:
          uint64_t v88 = 48;
          goto LABEL_167;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 0x400u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v19 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_130;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_130:
          uint64_t v88 = 72;
          goto LABEL_167;
        case 5u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 0x800u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v19 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v14 = v40++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_134;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_134:
          uint64_t v88 = 76;
          goto LABEL_167;
        case 6u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 4u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v19 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v14 = v45++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_138;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_138:
          uint64_t v88 = 16;
          goto LABEL_167;
        case 7u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 0x100u;
          while (2)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
              *(void *)(a2 + v51) = v52 + 1;
              v19 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v14 = v50++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_142;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_142:
          uint64_t v88 = 52;
          goto LABEL_167;
        case 8u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 1u;
          while (2)
          {
            uint64_t v56 = *v3;
            unint64_t v57 = *(void *)(a2 + v56);
            if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + *v7) + v57);
              *(void *)(a2 + v56) = v57 + 1;
              v19 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                BOOL v14 = v55++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_146;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_146:
          uint64_t v88 = 8;
          goto LABEL_167;
        case 9u:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 0x1000u;
          while (2)
          {
            uint64_t v61 = *v3;
            unint64_t v62 = *(void *)(a2 + v61);
            if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v63 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
              *(void *)(a2 + v61) = v62 + 1;
              v19 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                BOOL v14 = v60++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_150;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_150:
          uint64_t v88 = 80;
          goto LABEL_167;
        case 0xAu:
          Data = (void *)PBReaderReadData();

          id v65 = Data;
          uint64_t v66 = 64;
          goto LABEL_86;
        case 0xBu:
          uint64_t v67 = (void *)PBReaderReadData();

          id v65 = v67;
          uint64_t v66 = 32;
LABEL_86:
          *(void *)(a1 + v66) = v65;
          continue;
        case 0xCu:
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 2u;
          while (2)
          {
            uint64_t v70 = *v3;
            unint64_t v71 = *(void *)(a2 + v70);
            if (v71 == -1 || v71 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v72 = *(unsigned char *)(*(void *)(a2 + *v7) + v71);
              *(void *)(a2 + v70) = v71 + 1;
              v19 |= (unint64_t)(v72 & 0x7F) << v68;
              if (v72 < 0)
              {
                v68 += 7;
                BOOL v14 = v69++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_154;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_154:
          uint64_t v88 = 12;
          goto LABEL_167;
        case 0xDu:
          char v73 = 0;
          unsigned int v74 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 0x40u;
          while (2)
          {
            uint64_t v75 = *v3;
            unint64_t v76 = *(void *)(a2 + v75);
            if (v76 == -1 || v76 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v77 = *(unsigned char *)(*(void *)(a2 + *v7) + v76);
              *(void *)(a2 + v75) = v76 + 1;
              v19 |= (unint64_t)(v77 & 0x7F) << v73;
              if (v77 < 0)
              {
                v73 += 7;
                BOOL v14 = v74++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_158;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_158:
          uint64_t v88 = 44;
          goto LABEL_167;
        case 0xEu:
          char v78 = 0;
          unsigned int v79 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 8u;
          while (2)
          {
            uint64_t v80 = *v3;
            unint64_t v81 = *(void *)(a2 + v80);
            if (v81 == -1 || v81 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v82 = *(unsigned char *)(*(void *)(a2 + *v7) + v81);
              *(void *)(a2 + v80) = v81 + 1;
              v19 |= (unint64_t)(v82 & 0x7F) << v78;
              if (v82 < 0)
              {
                v78 += 7;
                BOOL v14 = v79++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_162;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_162:
          uint64_t v88 = 20;
          goto LABEL_167;
        case 0xFu:
          char v83 = 0;
          unsigned int v84 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 84) |= 0x200u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v85 = *v3;
        unint64_t v86 = *(void *)(a2 + v85);
        if (v86 == -1 || v86 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v87 = *(unsigned char *)(*(void *)(a2 + *v7) + v86);
        *(void *)(a2 + v85) = v86 + 1;
        v19 |= (unint64_t)(v87 & 0x7F) << v83;
        if ((v87 & 0x80) == 0) {
          goto LABEL_164;
        }
        v83 += 7;
        BOOL v14 = v84++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_166;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_164:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_166:
      uint64_t v88 = 56;
LABEL_167:
      *(_DWORD *)(a1 + v88) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

unsigned int *VCAudioReceiver_CreateReceiver(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_CreateReceiver_cold_1();
      }
    }
    return 0;
  }
  CFAllocatorRef v2 = (unsigned int *)malloc_type_calloc(1uLL, 0x28E8uLL, 0x10F00404E5DF947uLL);
  uint64_t v3 = v2;
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_CreateReceiver_cold_2();
      }
    }
    goto LABEL_60;
  }
  timeval v4 = (_WORD *)v2 + 4565;
  v2[204] = 2143289344;
  *((unsigned char *)v2 + 609) = 0;
  memcpy(v2, (const void *)a1, 0x1B0uLL);
  CFTypeRef v5 = *(CFTypeRef *)(a1 + 232);
  if (v5) {
    CFTypeRef v5 = CFRetain(v5);
  }
  *((void *)v3 + 54) = v5;
  *((void *)v3 + 74) = 0xFFFFFFFFLL;
  v3[146] = VCReporting_GetDynamicReportingModuleID();
  v3[224] = -1;
  *((unsigned char *)v3 + 9140) = VCDefaults_GetBoolValueForKey(@"forceUseInternalRTPThreading", 0);
  uint64_t v6 = *(const void **)(a1 + 280);
  if (v6) {
    uint64_t v6 = (const void *)CFHash(v6);
  }
  *((void *)v3 + 1143) = v6;
  *((unsigned char *)v3 + 9152) = *(unsigned char *)(a1 + 300);
  *((void *)v3 + 1145) = *(void *)(a1 + 312);
  *((_OWORD *)v3 + 573) = *(_OWORD *)(a1 + 320);
  *((_OWORD *)v3 + 574) = *(_OWORD *)(a1 + 336);
  v3[2591] = -1;
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)v3 + 1150, *(CFTypeRef *)(a1 + 352));
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)v3 + 72, *(CFTypeRef *)(a1 + 264));
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)v3 + 1156, *(CFTypeRef *)(a1 + 360));
  reportingInheritModuleSpecificInfoFromParent();
  unint64_t v7 = *v3;
  if (v7)
  {
    unint64_t v8 = 0;
    for (unint64_t i = 0; i < v7; ++i)
    {
      unint64_t v10 = a1 + v8 + 8;
      if (v10 >= a1 + 232 || v10 < a1 + 8) {
LABEL_70:
      }
        __break(0x5519u);
      if (*(unsigned char *)(a1 + v8 + 19)) {
        *timeval v4 = i;
      }
      unint64_t v12 = &v3[v8 / 4];
      *(void *)&v3[v8 / 4 + 10] = v3;
      CFTypeRef v13 = *(CFTypeRef *)(a1 + v8 + 24);
      if (v13)
      {
        CFTypeRef v13 = CFRetain(v13);
        unint64_t v7 = *v3;
      }
      *((void *)v12 + 3) = v13;
      *((void *)v12 + 7) = *(void *)(a1 + v8 + 56);
      v8 += 56;
    }
  }
  if (*((unsigned char *)v3 + 9140))
  {
    uint64_t v14 = VCRealTimeThread_Initialize(21, (uint64_t)_VCAudioReceiver_ReceiveProc, (uint64_t)v3, "com.apple.avconference.audioreceiver.rtprecvproc", 0);
    *((void *)v3 + 71) = v14;
    if (!v14)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioReceiver_CreateReceiver_cold_5();
        }
      }
      goto LABEL_60;
    }
  }
  pthread_mutex_init((pthread_mutex_t *)(v3 + 154), 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 2252), 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 170), 0);
  char v15 = *(unsigned char *)(a1 + 298);
  char v16 = *(unsigned char *)(a1 + 301);
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v65 = v17;
  long long v61 = v17;
  long long v62 = v17;
  long long v63 = v17;
  long long v64 = v17;
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)char v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  uint64_t v60 = 0;
  LODWORD(v61) = *(_DWORD *)(a1 + 244);
  BYTE4(v61) = *(_DWORD *)(a1 + 256) != 0;
  *((void *)&v61 + 1) = *((void *)v3 + 72);
  LOBYTE(v62) = *(unsigned char *)(a1 + 276);
  BYTE1(v62) = v15;
  BYTE2(v62) = v16;
  if (v61 == 3) {
    unsigned int v18 = 0;
  }
  else {
    unsigned int v18 = *(_DWORD *)(a1 + 252);
  }
  *(void *)((char *)&v62 + 4) = __PAIR64__(*(_DWORD *)(a1 + 304), v18);
  *(void *)&long long v63 = *((void *)v3 + 1150);
  DWORD2(v63) = v3[94];
  BYTE12(v63) = *(unsigned char *)(a1 + 302);
  if (v61 == 3) {
    unsigned int v19 = *(_DWORD *)(a1 + 248);
  }
  else {
    unsigned int v19 = 0;
  }
  if (*(unsigned char *)(a1 + 392)) {
    int v20 = 20;
  }
  else {
    int v20 = 0;
  }
  *(void *)&long long v64 = __PAIR64__(v20, v19);
  DWORD2(v64) = *(_DWORD *)(a1 + 384);
  BYTE12(v64) = *(unsigned __int16 *)(a1 + 296) == 1;
  BYTE13(v64) = *(unsigned char *)(a1 + 425);
  *(void *)&long long v65 = v3;
  *((void *)&v65 + 1) = _VCAudioReceiver_DTMFEventCallback;
  LOBYTE(v66) = *(unsigned char *)(a1 + 426);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v21 = VRTraceErrorLogLevelToCSTR();
    char v22 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *(unsigned int **)(a1 + 352);
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v37 = v21;
      __int16 v38 = 2080;
      char v39 = "VCAudioReceiver_CreateReceiver";
      __int16 v40 = 1024;
      int v41 = 274;
      __int16 v42 = 2048;
      char v43 = v23;
      _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Creating Audio Receiver with jbTargetEstimatorSynchronizer=%p", buf, 0x26u);
    }
  }
  if (*((unsigned char *)v3 + 276))
  {
    unsigned int v24 = v3[94];
    CFStringGetCStringPtr(*((CFStringRef *)v3 + 36), 0x8000100u);
    CFStringGetCStringPtr(*((CFStringRef *)v3 + 35), 0x8000100u);
    if (v24)
    {
      FourccToCStr(v3[94]);
      __sprintf_chk(v48, 0, 0xC8uLL, "session_%s-participant_%s-groupid_%s");
    }
    else
    {
      __sprintf_chk(v48, 0, 0xC8uLL, "session_%s-participant_%s");
    }
  }
  else
  {
    __sprintf_chk(v48, 0, 0xC8uLL, "%010u");
  }
  unsigned int v25 = VCJitterBuffer_Create((uint64_t)v48);
  *((void *)v3 + 55) = v25;
  if (!v25)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_CreateReceiver_cold_3();
      }
    }
LABEL_60:
    VCAudioReceiver_Finalize(v3);
    return 0;
  }
  *((void *)v3 + 1134) = v3 + 2;
  if (*v3)
  {
    unint64_t v26 = 0;
    unint64_t v27 = (uint64_t *)(v3 + 2);
    while (1)
    {
      if (v27 >= (uint64_t *)v3 + 29 || v27 < (uint64_t *)v3 + 1) {
        goto LABEL_70;
      }
      if ((RTPSetAudioReceiver(*v27, (uint64_t)v3) & 0x80000000) != 0) {
        break;
      }
      ++v26;
      v27 += 7;
      if (v26 >= *v3) {
        goto LABEL_49;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_CreateReceiver_cold_4();
      }
    }
    goto LABEL_60;
  }
LABEL_49:
  *((void *)v3 + 1164) = 0;
  if (*((unsigned char *)v3 + 380))
  {
    *((void *)v3 + 1164) = VCAudioIssueDetector_Create(1u);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v28 = VRTraceErrorLogLevelToCSTR();
      char v29 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v30 = (unsigned int *)*((void *)v3 + 1164);
        *(_DWORD *)CMTime buf = 136316162;
        uint64_t v37 = v28;
        __int16 v38 = 2080;
        char v39 = "VCAudioReceiver_CreateReceiver";
        __int16 v40 = 1024;
        int v41 = 296;
        __int16 v42 = 2048;
        char v43 = v30;
        __int16 v44 = 2048;
        unsigned int v45 = v3;
        _os_log_impl(&dword_1E1EA4000, v29, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio issue detector=%p is created in audio receiver=%p", buf, 0x30u);
      }
    }
  }
  v3[2330] = v3[97];
  *((unsigned char *)v3 + 10376) = *(unsigned char *)(a1 + 408);
  *((void *)v3 + 1296) = 0;
  *((double *)v3 + 1308) = micro();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v31 = VRTraceErrorLogLevelToCSTR();
    unint64_t v32 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      char v33 = (unsigned int *)*((void *)v3 + 55);
      int v34 = *((unsigned __int16 *)v3 + 148);
      *(_DWORD *)CMTime buf = 136316418;
      uint64_t v37 = v31;
      __int16 v38 = 2080;
      char v39 = "VCAudioReceiver_CreateReceiver";
      __int16 v40 = 1024;
      int v41 = 308;
      __int16 v42 = 2048;
      char v43 = v3;
      __int16 v44 = 2048;
      unsigned int v45 = v33;
      __int16 v46 = 1024;
      int v47 = v34;
      _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Initialized AudioReceiver[%p] with JitterBuffer[%p] for direction[%d]", buf, 0x36u);
    }
  }
  return v3;
}

void _VCAudioReceiver_ReceiveProc(unsigned int *a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a1 + 609))
  {
    v40[0] = 0;
    v40[1] = 0;
    memset(v39, 0, sizeof(v39));
    uint64_t v6 = *a1;
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (uint64_t *)(a1 + 2);
      do
      {
        if (v7 == 4) {
LABEL_53:
        }
          __break(0x5519u);
        *((_DWORD *)v40 + v7) = 48;
        uint64_t v9 = *v8;
        v8 += 7;
        *((void *)v39 + v7++) = v9;
      }
      while (v6 != v7);
    }
    if ((RTPGetReceiveStatus((uint64_t)v39, (unsigned int *)v40, v6, *a2) & 0x80000000) != 0)
    {
      usleep(0x2710u);
      return;
    }
    if (!*a1) {
      return;
    }
    uint64_t v10 = 0;
    int v11 = 0;
    unint64_t v12 = a1 + 2618;
    uint64_t v37 = a1 + 2;
    uint64_t v36 = a1 + 226;
    while (1)
    {
      CFTypeRef v13 = (uint8_t *)v40 + 4 * v10;
      if (v13 >= buf) {
        goto LABEL_53;
      }
      if ((*v13 & 0x10) != 0)
      {
        if (v12 <= a1) {
          goto LABEL_53;
        }
        if (!*((unsigned char *)a1 + 448))
        {
          int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
          int v11 = -2144862152;
          if (ErrorLogLevelForModule >= 3)
          {
            uint64_t v20 = VRTraceErrorLogLevelToCSTR();
            uint64_t v21 = *MEMORY[0x1E4F47A50];
            BOOL v22 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
            int v11 = -2144862152;
            if (v22)
            {
              *(_DWORD *)CMTime buf = 136315650;
              uint64_t v42 = v20;
              __int16 v43 = 2080;
              __int16 v44 = "_VCAudioReceiver_ProcessRTPPacket";
              __int16 v45 = 1024;
              int v46 = 1306;
              _os_log_error_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d ERROR bad handle", buf, 0x1Cu);
              int v11 = -2144862152;
            }
          }
          goto LABEL_46;
        }
        uint64_t v14 = (uint64_t *)&v37[14 * v10];
        while (1)
        {
          __int16 v38 = 0;
          int v15 = RTPRecvRTP(*v14, &v38);
          int v16 = v15;
          *((unsigned char *)a1 + 608) = 0;
          if ((v15 & 0x80000000) == 0)
          {
            _VCAudioReceiver_HandleRTPPacket((uint64_t)a1, (uint64_t)v14, (uint64_t)v38);
            RTPReleaseRTPPacket(*v14, &v38);
LABEL_23:
            int v11 = v16;
            goto LABEL_24;
          }
          if ((v15 & 0x40000000) == 0) {
            break;
          }
          usleep(0x3A98u);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v17 = VRTraceErrorLogLevelToCSTR();
            unsigned int v18 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v42 = v17;
              __int16 v43 = 2080;
              __int16 v44 = "_VCAudioReceiver_ProcessRTPPacket";
              __int16 v45 = 1024;
              int v46 = 1333;
              __int16 v47 = 2048;
              char v48 = a1;
              __int16 v49 = 1024;
              int v50 = v16;
              _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio receiver %p RTPRecvRTP returned[%x] sleeping 15000usecs??", buf, 0x2Cu);
            }
          }
        }
        int v11 = -2147418057;
        if (v15 != -2147418057)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v31 = VRTraceErrorLogLevelToCSTR();
            unint64_t v32 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v42 = v31;
              __int16 v43 = 2080;
              __int16 v44 = "_VCAudioReceiver_ProcessRTPPacket";
              __int16 v45 = 1024;
              int v46 = 1336;
              __int16 v47 = 2048;
              char v48 = a1;
              __int16 v49 = 1024;
              int v50 = v16;
              _os_log_error_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d Audio receiver %p received an error %x", buf, 0x2Cu);
            }
          }
          goto LABEL_23;
        }
      }
LABEL_24:
      if (!v11)
      {
        if ((*v13 & 0x20) != 0)
        {
          if (v12 <= a1) {
            goto LABEL_53;
          }
          BOOL v23 = (a1[224] & 1) == 0;
          unint64_t v24 = (unint64_t)&v36[410 * ((a1[224] & 1) == 0)];
          uint64_t v25 = *(void *)&v37[14 * v10];
          if (v24)
          {
            if (v24 >= (unint64_t)(a1 + 1046) || v24 < (unint64_t)v36) {
              goto LABEL_53;
            }
            int v27 = RTPRecvRTCP(v25, &v36[410 * ((a1[224] & 1) == 0)]);
            if ((v27 & 0x80000000) == 0)
            {
              uint64_t v28 = (uint64_t)a1;
              char v29 = (uint64_t *)&v37[14 * v10];
              uint64_t v30 = v24;
LABEL_45:
              _VCAudioReceiver_ProcessAudioRTCPInternal(v28, v29, v30);
              RTCPCleanupPacketList(v24);
              int v11 = 0;
              a1[224] = v23;
              goto LABEL_46;
            }
          }
          else
          {
            int v27 = RTPRecvRTCP(v25, 0);
            if ((v27 & 0x80000000) == 0)
            {
              uint64_t v28 = (uint64_t)a1;
              char v29 = (uint64_t *)&v37[14 * v10];
              uint64_t v30 = 0;
              goto LABEL_45;
            }
          }
          int v33 = v27;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            uint64_t v34 = VRTraceErrorLogLevelToCSTR();
            unsigned int v35 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CMTime buf = 136315906;
              uint64_t v42 = v34;
              __int16 v43 = 2080;
              __int16 v44 = "_VCAudioReceiver_ProcessRTCPPacket";
              __int16 v45 = 1024;
              int v46 = 2066;
              __int16 v47 = 1024;
              LODWORD(v48) = v33;
              _os_log_error_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d Failed to retrieve RTCP packet. Error:%x", buf, 0x22u);
            }
          }
        }
        int v11 = 0;
      }
LABEL_46:
      if (++v10 >= (unint64_t)*a1) {
        return;
      }
    }
  }
  *a3 = 1;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    timeval v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315650;
      uint64_t v42 = v3;
      __int16 v43 = 2080;
      __int16 v44 = "_VCAudioReceiver_ReceiveProc";
      __int16 v45 = 1024;
      int v46 = 2080;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Tearing down audio receiver thread", buf, 0x1Cu);
    }
  }
}

uint64_t _VCAudioReceiver_DTMFEventCallback(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(uint64_t (**)(void))(result + 9192);
    if (v1) {
      return v1(*(void *)(result + 9160));
    }
  }
  return result;
}

void VCAudioReceiver_Finalize(unsigned int *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFAllocatorRef v2 = (const void *)*((void *)a1 + 54);
    if (v2) {
      CFRelease(v2);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      timeval v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v17 = v3;
        __int16 v18 = 2080;
        unsigned int v19 = "VCAudioReceiver_Finalize";
        __int16 v20 = 1024;
        int v21 = 357;
        __int16 v22 = 2048;
        BOOL v23 = a1;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Cleaning up audioReceiver (0x%p)", buf, 0x26u);
      }
    }
    if (*a1)
    {
      unint64_t v5 = 0;
      uint64_t v6 = (CFTypeRef *)(a1 + 6);
      do
      {
        if (v6 - 2 >= (CFTypeRef *)a1 + 29 || v6 - 2 < (CFTypeRef *)a1 + 1) {
          __break(0x5519u);
        }
        RTPSetAudioReceiver((uint64_t)*(v6 - 2), 0);
        if (*v6) {
          CFRelease(*v6);
        }
        ++v5;
        v6 += 7;
      }
      while (v5 < *a1);
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 170));
    if (*((unsigned char *)a1 + 609))
    {
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 170));
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v8 = VRTraceErrorLogLevelToCSTR();
        uint64_t v9 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          uint64_t v17 = v8;
          __int16 v18 = 2080;
          unsigned int v19 = "_VCAudioReceiver_Lock";
          __int16 v20 = 1024;
          int v21 = 321;
          _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Receiver is being torn down", buf, 0x1Cu);
        }
      }
    }
    *((unsigned char *)a1 + 609) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 170));
    uint64_t v10 = *((void *)a1 + 1164);
    if (v10)
    {
      VCAudioIssueDetector_Stop(v10);
      VCAudioIssueDetector_Finalize((int32x2_t ***)a1 + 1164);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        unint64_t v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          CFTypeRef v13 = (unsigned int *)*((void *)a1 + 1164);
          *(_DWORD *)CMTime buf = 136316162;
          uint64_t v17 = v11;
          __int16 v18 = 2080;
          unsigned int v19 = "_VCAudioIssueDetectorStopAndFinalize";
          __int16 v20 = 1024;
          int v21 = 122;
          __int16 v22 = 2048;
          BOOL v23 = v13;
          __int16 v24 = 2048;
          uint64_t v25 = a1;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio issue detector=%p destroyed in audio receiver=%p", buf, 0x30u);
        }
      }
      *((void *)a1 + 1164) = 0;
    }
    if (*((unsigned char *)a1 + 9140))
    {
      VCRealTimeThread_Stop(*((void *)a1 + 71));
      global_queue = dispatch_get_global_queue(2, 0);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      void block[2] = __VCAudioReceiver_Finalize_block_invoke;
      block[3] = &__block_descriptor_tmp_19;
      block[4] = a1;
      dispatch_async(global_queue, block);
    }
    else
    {
      _VCAudioRecevier_UnregisterTransportCallbacks((uint64_t)a1);
      _VCAudioReceiver_Cleanup((uint64_t)a1);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_Finalize_cold_1();
    }
  }
}

void _VCAudioReceiver_Cleanup(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  _VCAudioReceiver_UnregisterReportingTask(a1);
  VCAudioDecoderList_Cleanup(a1 + 744);
  CFAllocatorRef v2 = *(const void **)(a1 + 9200);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 9200) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 9248);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 9248) = 0;
  }
  timeval v4 = *(const void **)(a1 + 10408);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 10408) = 0;
  }
  if (*(void *)(a1 + 10432))
  {
    VCOverlayManager_releaseOverlaySourceWithToken(*(void *)(a1 + 10424), 0);
    unint64_t v5 = *(const void **)(a1 + 10432);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 10432) = 0;
    }
  }
  VCJitterBuffer_Finalize(*(char ***)(a1 + 440));
  VCAudioDump_Finalize((void **)(a1 + 10368));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 616));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 9008));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315906;
      uint64_t v9 = v6;
      __int16 v10 = 2080;
      uint64_t v11 = "_VCAudioReceiver_Cleanup";
      __int16 v12 = 1024;
      int v13 = 346;
      __int16 v14 = 2048;
      uint64_t v15 = a1;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d VCAudioReceiver cleanup DONE (0x%p)", (uint8_t *)&v8, 0x26u);
    }
  }
  free((void *)a1);
}

uint64_t _VCAudioRecevier_UnregisterTransportCallbacks(uint64_t result)
{
  uint64_t v1 = (unsigned char *)(result + 9141);
  if (*(unsigned char *)(result + 9141))
  {
    CFAllocatorRef v2 = (unsigned int *)result;
    if (*(_DWORD *)result)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result + 8;
      unint64_t v5 = result + 232;
      unint64_t v6 = result + 8;
      while (v6 < v5 && v6 >= v4)
      {
        RTPUnregisterPacketCallback();
        v6 += 56;
        uint64_t result = RTCPUnregisterPacketCallback();
        if (++v3 >= (unint64_t)*v2) {
          goto LABEL_7;
        }
      }
      __break(0x5519u);
    }
    else
    {
LABEL_7:
      unsigned char *v1 = 0;
    }
  }
  return result;
}

void _VCAudioReceiver_StartIssueDetector(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  double v2 = *(double *)(a1 + 456);
  uint64_t v3 = *(void *)(a1 + 576);
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v3;
  WORD1(v8[0]) = (int)v2;
  LOWORD(v8[0]) = *(_DWORD *)(a1 + 496);
  int v4 = *(_DWORD *)(a1 + 9320);
  int v9 = *(_DWORD *)(a1 + 584);
  int v10 = v4;
  VCAudioIssueDetector_Configure(*(void *)(a1 + 9312), (unsigned __int16 *)v8);
  VCAudioIssueDetector_Start(*(void *)(a1 + 9312));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v5 = VRTraceErrorLogLevelToCSTR();
    unint64_t v6 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 9312);
      *(_DWORD *)CMTime buf = 136316674;
      uint64_t v12 = v5;
      __int16 v13 = 2080;
      __int16 v14 = "_VCAudioReceiver_StartIssueDetector";
      __int16 v15 = 1024;
      int v16 = 394;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      __int16 v19 = 2048;
      uint64_t v20 = a1;
      __int16 v21 = 1024;
      int v22 = WORD1(v8[0]);
      __int16 v23 = 1024;
      int v24 = LOWORD(v8[0]);
      _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio issue detector=%p is configured in audioReceiver=%p with audioIOSampleRate=%d, audioIOSampleCount=%d", buf, 0x3Cu);
    }
  }
}

uint64_t VCAudioReceiver_Start(unsigned int *a1, double a2)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCAudioReceiver_Start_cold_1();
    }
    return 0;
  }
  if (*((_WORD *)a1 + 148) != 1 && !*((unsigned char *)a1 + 448))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCAudioReceiver_Start_cold_4();
    }
    return 0;
  }
  LODWORD(a2) = a1[124];
  double v3 = (double)*(unint64_t *)&a2 / *((double *)a1 + 57);
  long long v4 = *(_OWORD *)(a1 + 118);
  long long v16 = *(_OWORD *)(a1 + 114);
  long long v17 = v4;
  long long v18 = *(_OWORD *)(a1 + 122);
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  __int16 v19 = @"AudioReceiverDelay";
  LODWORD(v20) = vcvtpd_u64_f64(*((double *)a1 + 1302) / v3);
  uint64_t v21 = 32;
  uint64_t v5 = (uint64_t *)(a1 + 2602);
  if ((VCAudioFrameDelay_Create((const __CFAllocator *)*MEMORY[0x1E4F1CF80], &v16, (uint64_t *)a1 + 1301) & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCAudioReceiver_Start_cold_3();
    }
    return 0;
  }
  *((void *)a1 + 63) = 0x7FF8000000000000;
  uint64_t v6 = MEMORY[0x1E4F1F9F8];
  long long v7 = *MEMORY[0x1E4F1F9F8];
  *((_OWORD *)a1 + 32) = *MEMORY[0x1E4F1F9F8];
  uint64_t v8 = *(void *)(v6 + 16);
  *((void *)a1 + 66) = v8;
  *(_OWORD *)(a1 + 134) = v7;
  *((void *)a1 + 69) = v8;
  if (*((void *)a1 + 72))
  {
    CFPropertyListRef v9 = CFPreferencesCopyAppValue(@"forceNOLOG", @"com.apple.VideoConference");
    if (v9)
    {
      CFRelease(v9);
    }
    else
    {
      uint64_t Handle = CreateHandle();
      if (Handle != 0xFFFFFFFFLL)
      {
        unint64_t v12 = Handle;
        __int16 v13 = (__CFString *)(Handle + 4);
        *((void *)a1 + 74) = Handle;
        VCJitterBuffer_ResetPlaybackReportingMetrics(*((void *)a1 + 55));
        v22[0] = 0;
        v22[1] = v22;
        v22[2] = 0x2000000000;
        v22[3] = *((void *)a1 + 72);
        *(void *)&long long v16 = MEMORY[0x1E4F143A8];
        *((void *)&v16 + 1) = 0x40000000;
        *(void *)&long long v17 = ___VCAudioReceiver_RegisterReportingTask_block_invoke;
        *((void *)&v17 + 1) = &unk_1E6DB9990;
        __int16 v19 = v13;
        unint64_t v20 = v12;
        *(void *)&long long v18 = v22;
        *((void *)&v18 + 1) = v12;
        uint64_t v21 = (uint64_t)a1;
        reportingRegisterPeriodicTask();
        _Block_object_dispose(v22, 8);
      }
    }
  }
  if (*((void *)a1 + 1164)) {
    _VCAudioReceiver_StartIssueDetector((uint64_t)a1);
  }
  _VCAudioReceiver_RegisterStatistics((uint64_t)a1);
  if (!*((void *)a1 + 1304) && VCOverlayManager_isOverlayEnabled()) {
    *((void *)a1 + 1304) = VCOverlayManager_createOverlaySourceForToken(*((void *)a1 + 1303), 0);
  }
  if (*((unsigned char *)a1 + 9140))
  {
    if ((VCRealTimeThread_Start(*((void *)a1 + 71)) & 1) == 0)
    {
      uint64_t result = *v5;
      if (*v5)
      {
        CFRelease((CFTypeRef)result);
        uint64_t result = 0;
        *uint64_t v5 = 0;
      }
      return result;
    }
    return 1;
  }
  if (*((unsigned char *)a1 + 9141))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_Start_cold_2();
      }
    }
    return 1;
  }
  uint64_t result = 1;
  *((unsigned char *)a1 + 9141) = 1;
  if (*a1)
  {
    unint64_t v14 = 0;
    for (unint64_t i = (uint64_t *)(a1 + 2); i < (uint64_t *)a1 + 29 && i >= (uint64_t *)a1 + 1; i += 7)
    {
      RTPRegisterPacketCallback(*i, (uint64_t)i, &__block_literal_global_99);
      RTCPRegisterPacketCallback(*i, (uint64_t)i, &__block_literal_global_23);
      ++v14;
      uint64_t result = 1;
      if (v14 >= *a1) {
        return result;
      }
    }
    __break(0x5519u);
  }
  return result;
}

void _VCAudioReceiver_RegisterStatistics(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 393))
  {
    if (*(_DWORD *)(a1 + 10364) != -1) {
      _VCAudioReceiver_UnregisterStatistics(a1);
    }
    double v2 = *(void **)(a1 + 9248);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    v7[2] = ___VCAudioReceiver_RegisterStatistics_block_invoke;
    v7[3] = &__block_descriptor_tmp_17;
    v7[4] = a1;
    *(_DWORD *)(a1 + 10364) = VCRateControlRegisterStatisticsChangeHandler(v2, 11, (uint64_t)v7);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      long long v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 9248);
        int v6 = *(_DWORD *)(a1 + 10364);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v9 = v3;
        __int16 v10 = 2080;
        uint64_t v11 = "_VCAudioReceiver_RegisterStatistics";
        __int16 v12 = 1024;
        int v13 = 168;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = v5;
        __int16 v18 = 1024;
        int v19 = v6;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Registered statisticsCollector[%p] with index=%d", buf, 0x36u);
      }
    }
  }
}

void VCAudioReceiver_Stop(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 9312);
    if (v2)
    {
      VCAudioIssueDetector_Stop(v2);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v3 = VRTraceErrorLogLevelToCSTR();
        long long v4 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = *(void *)(a1 + 9312);
          int v7 = 136316162;
          uint64_t v8 = v3;
          __int16 v9 = 2080;
          __int16 v10 = "VCAudioReceiver_Stop";
          __int16 v11 = 1024;
          int v12 = 448;
          __int16 v13 = 2048;
          uint64_t v14 = v5;
          __int16 v15 = 2048;
          uint64_t v16 = a1;
          _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio issue detector=%p is stopped in audio receiver=%p", (uint8_t *)&v7, 0x30u);
        }
      }
    }
    _VCAudioReceiver_UnregisterStatistics(a1);
    if (*(unsigned char *)(a1 + 9140)) {
      VCRealTimeThread_Stop(*(void *)(a1 + 568));
    }
    else {
      _VCAudioRecevier_UnregisterTransportCallbacks(a1);
    }
    if (*(void *)(a1 + 10368))
    {
      VCAudioDump_Finalize((void **)(a1 + 10368));
      free(*(void **)(a1 + 10368));
      *(void *)(a1 + 10368) = 0;
    }
    _VCAudioReceiver_UnregisterReportingTask(a1);
    int v6 = *(const void **)(a1 + 10408);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 10408) = 0;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_Stop_cold_1();
    }
  }
}

void _VCAudioReceiver_UnregisterStatistics(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned int *)(a1 + 10364);
  if (v1 != -1)
  {
    VCRateControlUnregisterStatisticsChangeHandler(*(void **)(a1 + 9248), 11, v1);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      long long v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 9248);
        int v6 = *(_DWORD *)(a1 + 10364);
        int v7 = 136316418;
        uint64_t v8 = v3;
        __int16 v9 = 2080;
        __int16 v10 = "_VCAudioReceiver_UnregisterStatistics";
        __int16 v11 = 1024;
        int v12 = 155;
        __int16 v13 = 2048;
        uint64_t v14 = a1;
        __int16 v15 = 2048;
        uint64_t v16 = v5;
        __int16 v17 = 1024;
        int v18 = v6;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Unregistered statisticsCollector[%p] with index=%d", (uint8_t *)&v7, 0x36u);
      }
    }
    *(_DWORD *)(a1 + 10364) = -1;
  }
}

void _VCAudioReceiver_UnregisterReportingTask(uint64_t a1)
{
  if (*(void *)(a1 + 576))
  {
    if (CheckInHandleDebug()) {
      CheckOutHandleDebug();
    }
    if ((reportingUnregisterPeriodicTask() & 1) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioReceiver_UnregisterReportingTask_cold_1();
      }
    }
    reportingCacheModuleSpecificInfo();
    uint64_t v2 = *(const void **)(a1 + 576);
    if (v2) {
      CFRelease(v2);
    }
    *(void *)(a1 + 576) = 0;
    *(void *)(a1 + 592) = 0xFFFFFFFFLL;
  }
}

void VCAudioReceiver_Reset(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 504) = 0x7FF8000000000000;
    uint64_t v1 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(a1 + 512) = *MEMORY[0x1E4F1F9F8];
    *(void *)(a1 + 528) = *(void *)(v1 + 16);
    VCJitterBuffer_Reset(*(void *)(a1 + 440));
  }
}

double VCAudioReceiver_GetLatestAudioTimestamp(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 504);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_GetLatestAudioTimestamp_cold_1();
    }
  }
  return NAN;
}

__CFString *_VCAudioReceiver_CreateStringForPayloadData(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  for (uint64_t i = 0; i != 128; ++i)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 9840 + 4 * i);
    if (v4) {
      CFStringAppendFormat(Mutable, 0, @"%d=%d;", i, v4);
    }
  }
  return Mutable;
}

void VCAudioReceiver_FlushQueues(uint64_t a1)
{
  if (a1) {
    VCJitterBuffer_Flush(*(void *)(a1 + 440));
  }
}

BOOL VCAudioReceiver_SetupDecoders(uint64_t a1, uint64_t a2, int a3, long long *a4, int a5)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCAudioReceiver_SetupDecoders_cold_1();
    }
    return 0;
  }
  __int16 v10 = (pthread_mutex_t *)(a1 + 616);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 616));
  unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = *a4;
  long long v12 = a4[1];
  int v72 = -1431655766;
  long long v73 = v11;
  uint64_t v63 = a2;
  uint64_t v70 = a2;
  int v71 = a3;
  long long v13 = a4[2];
  long long v74 = v12;
  long long v75 = v13;
  LODWORD(v76) = a5;
  BYTE4(v76) = *(unsigned char *)(a1 + 409);
  BYTE5(v76) = *(unsigned char *)(a1 + 424);
  uint64_t v14 = (unsigned char *)MEMORY[0x1E4F47A58];
  if (*MEMORY[0x1E4F47A58])
  {
    long long v52 = *MEMORY[0x1E4F47A50];
    os_signpost_id_t v53 = os_signpost_id_generate((os_log_t)*MEMORY[0x1E4F47A50]);
    if (v53 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v54 = v53;
      if (os_signpost_enabled(v52))
      {
        *(_WORD *)CMTime buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1E1EA4000, v52, OS_SIGNPOST_EVENT, v54, "AudioReceiverSetUpDecodersStart", (const char *)&unk_1E2635D2D, buf, 2u);
      }
    }
  }
  __int16 v15 = (void *)(a1 + 744);
  int v16 = VCAudioDecoderList_Setup(a1 + 744, &v70);
  if (*v14)
  {
    long long v55 = *MEMORY[0x1E4F47A50];
    int v56 = v16;
    os_signpost_id_t v57 = os_signpost_id_generate((os_log_t)*MEMORY[0x1E4F47A50]);
    int v16 = v56;
    if (v57 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v58 = v57;
      BOOL v59 = os_signpost_enabled(v55);
      int v16 = v56;
      if (v59)
      {
        *(_WORD *)CMTime buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1E1EA4000, v55, OS_SIGNPOST_EVENT, v58, "AudioReceiverSetUpDecodersEnd", (const char *)&unk_1E2635D2D, buf, 2u);
        int v16 = v56;
      }
    }
  }
  if (v16 < 0)
  {
    pthread_mutex_unlock(v10);
    return 0;
  }
  long long v61 = a4;
  long long v62 = v10;
  int v60 = v16;
  if (*(_DWORD *)(a1 + 752))
  {
    uint64_t v17 = 0;
    for (unint64_t i = 0; i < *(unsigned int *)(a1 + 752); ++i)
    {
      uint64_t v19 = *v15;
      long long v111 = 0u;
      long long v112 = 0u;
      *(_OWORD *)__str = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      *(_OWORD *)__int16 v105 = 0u;
      long long v106 = 0u;
      uint64_t v20 = v19 + v17;
      if (*(void *)(v19 + v17 + 8))
      {
        int v21 = *(unsigned __int8 *)(a1 + 276);
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v21)
        {
          if (ErrorLogLevelForModule < 7) {
            goto LABEL_19;
          }
          uint64_t v23 = VRTraceErrorLogLevelToCSTR();
          int v24 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          uint64_t v25 = *(void *)(v20 + 8);
          uint64_t v66 = *(void *)(v25 + 88);
          int v68 = *(unsigned __int8 *)(a1 + 409);
          long long v64 = FormatToCStr(v25, __str, 0x40uLL);
          int v65 = *(_DWORD *)(v19 + v17);
          uint64_t v26 = FormatToCStr(*(void *)(v20 + 8) + 40, v105, 0x40uLL);
          int v27 = *(unsigned __int8 *)(a1 + 276);
          uint64_t v28 = v15;
          int v29 = *(unsigned __int16 *)(a1 + 296);
          uint64_t v30 = FourccToCStr(*(_DWORD *)(a1 + 376));
          uint64_t v31 = *(void *)(a1 + 280);
          uint64_t v32 = *(void *)(a1 + 288);
          *(_DWORD *)CMTime buf = 136318466;
          uint64_t v78 = v23;
          __int16 v79 = 2080;
          uint64_t v80 = "_VCAudioReceiver_LogDecoderConfigurations";
          __int16 v81 = 1024;
          int v82 = 801;
          __int16 v83 = 2048;
          uint64_t v84 = v25;
          __int16 v85 = 2048;
          uint64_t v86 = v66;
          __int16 v87 = 1024;
          int v88 = v68;
          __int16 v89 = 2080;
          double v90 = v64;
          __int16 v91 = 1024;
          int v92 = v65;
          __int16 v93 = 2080;
          double v94 = v26;
          __int16 v95 = 1024;
          int v96 = v27;
          __int16 v97 = 1024;
          int v98 = v29;
          __int16 v15 = v28;
          __int16 v99 = 2080;
          int v100 = v30;
          __int16 v101 = 2112;
          uint64_t v102 = v31;
          __int16 v103 = 2112;
          uint64_t v104 = v32;
          int v33 = v24;
          uint64_t v34 = "VCAudioReceiver [%s] %s:%d SoundDec_Create yielded instance=%p converter=%p outOfProcess=%{BOOL}d from f"
                "ormat=%s payload=%u to format=%s for multiwayMode=%{BOOL}d direction=%hu streamGroupID=%s participantID=%@ sessionID=%@";
          uint32_t v35 = 122;
        }
        else
        {
          if (ErrorLogLevelForModule < 7) {
            goto LABEL_19;
          }
          uint64_t v39 = VRTraceErrorLogLevelToCSTR();
          __int16 v40 = *MEMORY[0x1E4F47A50];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
          uint64_t v41 = *(void *)(v20 + 8);
          uint64_t v67 = *(void *)(v41 + 88);
          int v69 = *(unsigned __int8 *)(a1 + 409);
          uint64_t v42 = FormatToCStr(v41, __str, 0x40uLL);
          int v43 = *(_DWORD *)(v19 + v17);
          __int16 v44 = FormatToCStr(*(void *)(v20 + 8) + 40, v105, 0x40uLL);
          int v45 = *(unsigned __int8 *)(a1 + 276);
          *(_DWORD *)CMTime buf = 136317442;
          uint64_t v78 = v39;
          __int16 v79 = 2080;
          uint64_t v80 = "_VCAudioReceiver_LogDecoderConfigurations";
          __int16 v81 = 1024;
          int v82 = 798;
          __int16 v83 = 2048;
          uint64_t v84 = v41;
          __int16 v85 = 2048;
          uint64_t v86 = v67;
          __int16 v87 = 1024;
          int v88 = v69;
          __int16 v89 = 2080;
          double v90 = v42;
          __int16 v91 = 1024;
          int v92 = v43;
          __int16 v93 = 2080;
          double v94 = v44;
          __int16 v95 = 1024;
          int v96 = v45;
          int v33 = v40;
          uint64_t v34 = "VCAudioReceiver [%s] %s:%d SoundDec_Create yielded instance=%p converter=%p outOfProcess=%{BOOL}d from f"
                "ormat=%s payload=%u to format=%s for multiwayMode=%{BOOL}d";
          uint32_t v35 = 86;
        }
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
          goto LABEL_19;
        }
        uint64_t v36 = VRTraceErrorLogLevelToCSTR();
        uint64_t v37 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        int v38 = *(_DWORD *)(v19 + v17);
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v78 = v36;
        __int16 v79 = 2080;
        uint64_t v80 = "_VCAudioReceiver_LogDecoderConfigurations";
        __int16 v81 = 1024;
        int v82 = 794;
        __int16 v83 = 1024;
        LODWORD(v84) = v38;
        int v33 = v37;
        uint64_t v34 = "VCAudioReceiver [%s] %s:%d SoundDec_Create NOT called for payload=%u";
        uint32_t v35 = 34;
      }
      _os_log_impl(&dword_1E1EA4000, v33, OS_LOG_TYPE_DEFAULT, v34, buf, v35);
LABEL_19:
      v17 += 40;
    }
  }
  if (v63)
  {
    *(_DWORD *)(a1 + 10380) = *(_DWORD *)v63;
    *(unsigned char *)(a1 + 10384) = *(unsigned char *)(v63 + 16);
    *(unsigned char *)(a1 + 10385) = *(unsigned char *)(v63 + 32);
    *(void *)(a1 + 10392) = v61;
    *(void *)(a1 + 10368) = VCAudioDump_Create(2u, a1 + 10376);
    VCJitterBuffer_SetPayloadInfo(*(void *)(a1 + 440), a1 + 10376);
  }
  BOOL v46 = VCJitterBuffer_InitializePlayback(*(void *)(a1 + 440), (uint64_t)v61);
  *(unsigned char *)(a1 + 448) = v46;
  if (v46)
  {
    long long v47 = *v61;
    long long v48 = v61[2];
    *(_OWORD *)(a1 + 472) = v61[1];
    *(_OWORD *)(a1 + 488) = v48;
    *(_OWORD *)(a1 + 456) = v47;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_SetupDecoders_cold_2();
      }
    }
    VCAudioDecoderList_Cleanup((uint64_t)v15);
  }
  pthread_mutex_unlock(v62);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v50 = VRTraceErrorLogLevelToCSTR();
    uint64_t v51 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136316162;
      uint64_t v78 = v50;
      __int16 v79 = 2080;
      uint64_t v80 = "VCAudioReceiver_SetupDecoders";
      __int16 v81 = 1024;
      int v82 = 853;
      __int16 v83 = 2048;
      uint64_t v84 = a1;
      __int16 v85 = 1024;
      LODWORD(v86) = v60;
      _os_log_impl(&dword_1E1EA4000, v51, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Done updating audio receiver (%p) decoders. Status=%X", buf, 0x2Cu);
    }
  }
  return *(unsigned char *)(a1 + 448) != 0;
}

void VCAudioReceiver_RegisterCodecRateModeRequestCallback(uint64_t a1, uint64_t a2, long long *a3)
{
  if (a1)
  {
    *(void *)(a1 + 832) = a2;
    long long v3 = *a3;
    *(void *)(a1 + 856) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 840) = v3;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_RegisterCodecRateModeRequestCallback_cold_1();
    }
  }
}

void VCAudioReceiver_RegisterActiveAudioStreamRequestCallback(uint64_t a1, uint64_t a2, long long *a3)
{
  if (a1)
  {
    *(void *)(a1 + 864) = a2;
    long long v3 = *a3;
    *(void *)(a1 + 888) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 872) = v3;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_RegisterActiveAudioStreamRequestCallback_cold_1();
    }
  }
}

void VCAudioReceiver_ResetLagReference(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    VCJitterBuffer_ResetLagReference(*(void *)(a1 + 440));
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v1 = VRTraceErrorLogLevelToCSTR();
      uint64_t v2 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v3 = 136315650;
        uint64_t v4 = v1;
        __int16 v5 = 2080;
        int v6 = "VCAudioReceiver_ResetLagReference";
        __int16 v7 = 1024;
        int v8 = 952;
        _os_log_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Force to reset audio jitter buffer lag reference", (uint8_t *)&v3, 0x1Cu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_ResetLagReference_cold_1();
    }
  }
}

float VCAudioReceiver_GetOWRD(uint64_t a1)
{
  if (a1) {
    return VCJitterBuffer_GetOWRD(*(void *)(a1 + 440));
  }
  else {
    return NAN;
  }
}

float VCAudioReceiver_GetAverageInterarrivalTimeForWindow(uint64_t a1)
{
  if (a1) {
    return VCJitterBuffer_GetAverageJitter(*(void *)(a1 + 440));
  }
  else {
    return NAN;
  }
}

void VCAudioReceiver_UpdateCellTech(uint64_t a1, int a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v5 = a3 | a2;
    VCJitterBuffer_SetNetworkType(*(void *)(a1 + 440), (a3 | a2) != 0, a2, a3);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      __int16 v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136316418;
        uint64_t v9 = v6;
        __int16 v10 = 2080;
        long long v11 = "VCAudioReceiver_UpdateCellTech";
        __int16 v12 = 1024;
        int v13 = 971;
        __int16 v14 = 1024;
        BOOL v15 = v5 != 0;
        __int16 v16 = 1024;
        int v17 = a2;
        __int16 v18 = 1024;
        int v19 = a3;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d JB: Updated CellTech isCellular[%d] LocalCellTech:%d, RemoteCellTech=%d", (uint8_t *)&v8, 0x2Eu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_UpdateCellTech_cold_1();
    }
  }
}

uint64_t VCAudioReceiver_GetActiveStreamId(uint64_t a1, _WORD *a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = (pthread_mutex_t *)(a1 + 9008);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 9008));
    uint64_t v5 = *(void *)(a1 + 9072);
    if (v5)
    {
      *a2 = *(_WORD *)(v5 + 8);
      pthread_mutex_unlock(v4);
      return 0;
    }
    pthread_mutex_unlock(v4);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_GetActiveStreamId_cold_1();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_GetActiveStreamId_cold_2();
    }
  }
  return 1;
}

float VCAudioReceiver_GetPercentPacketsLateAndMissing(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 440);
    return VCJitterBuffer_GetPercentPacketLateAndMissing(v1);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_GetPercentPacketsLateAndMissing_cold_1();
      }
    }
    return NAN;
  }
}

uint64_t VCAudioReceiver_PullAudioSamples(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  v33[0] = xmmword_1E25A2BB8;
  v33[1] = *(_OWORD *)algn_1E25A2BC8;
  unsigned int SampleCount = VCAudioBufferList_GetSampleCount(a2);
  if (!a1 || !*(unsigned char *)(a1 + 448))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_PullAudioSamples_cold_1();
      }
    }
    goto LABEL_13;
  }
  unsigned int v15 = SampleCount;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 680));
  if (*(unsigned char *)(a1 + 609))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 680));
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    int v17 = (os_log_t *)MEMORY[0x1E4F47A50];
    if (ErrorLogLevelForModule >= 5)
    {
      uint64_t v18 = VRTraceErrorLogLevelToCSTR();
      int v19 = *v17;
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 136315650;
        *(CMTimeValue *)((char *)&buf.value + 4) = v18;
        LOWORD(buf.flags) = 2080;
        *(void *)((char *)&buf.flags + 2) = "_VCAudioReceiver_Lock";
        HIWORD(buf.epoch) = 1024;
        int v35 = 321;
        _os_log_impl(&dword_1E1EA4000, v19, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Receiver is being torn down", (uint8_t *)&buf, 0x1Cu);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v20 = VRTraceErrorLogLevelToCSTR();
      int v21 = *v17;
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 136315650;
        *(CMTimeValue *)((char *)&buf.value + 4) = v20;
        LOWORD(buf.flags) = 2080;
        *(void *)((char *)&buf.flags + 2) = "VCAudioReceiver_PullAudioSamples";
        HIWORD(buf.epoch) = 1024;
        int v35 = 1048;
        _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d VCAudioReceiver_PullAudioSamples: Failed to grab the lock", (uint8_t *)&buf, 0x1Cu);
      }
    }
LABEL_13:
    VCAudioBufferList_ZeroMemory(a2);
    return 0;
  }
  if (a4) {
    *a4 = *(void *)(a1 + 504);
  }
  if (*(unsigned char *)(a1 + 9256))
  {
    double v23 = *(double *)(a1 + 504);
    if (v23 > *(double *)(a1 + 9304))
    {
      ++*(_DWORD *)(a1 + 9272);
      *(double *)(a1 + 9304) = v23;
    }
  }
  int MaxPlaybackSizeSamples = VCJitterBuffer_GetMaxPlaybackSizeSamples(*(void *)(a1 + 440));
  if (v15 && v15 < MaxPlaybackSizeSamples - 2 * *(_DWORD *)(a1 + 496))
  {
    uint64_t v32 = 0;
    uint64_t v25 = *(void *)(a1 + 10408);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 0x40000000;
    v30[2] = __VCAudioReceiver_PullAudioSamples_block_invoke;
    v30[3] = &__block_descriptor_tmp_12_0;
    v30[4] = a1;
    unsigned int v31 = v15;
    VCAudioFrameDelay_PullAudioSamples(v25, a2, &v32, (uint64_t)v30);
    uint64_t v26 = v32;
    if (!v32) {
      uint64_t v26 = v33;
    }
    uint64_t v32 = v26;
    uint64_t result = kdebug_trace();
    if (a5)
    {
      size_t v27 = *((unsigned __int8 *)v32 + 21);
      if (*(void *)(a5 + 8) >= v27)
      {
        if (v27 > 0x10)
        {
          __break(0x5519u);
          return result;
        }
        memcpy(*(void **)a5, (char *)v32 + 5, v27);
        *(void *)(a5 + 16) = *((unsigned __int8 *)v32 + 21);
      }
    }
    VCAudioBufferList_InvalidateAveragePower(a2);
    VCAudioBufferList_SetVoiceActivity(a2, *((_DWORD *)v32 + 7) == 0);
    if (*((unsigned char *)v32 + 4))
    {
      memset(&buf, 170, sizeof(buf));
      _VCAudioReceiver_ComputeExtendedTimestamp(a1, *(_DWORD *)v32, &buf);
      VCAudioBufferList_SetNetworkTimestamp(a2, (long long *)&buf.value);
    }
    if (a6) {
      *a6 = *((_DWORD *)v32 + 6) != 0;
    }
    if (a7) {
      *a7 = VCJitterBuffer_GetTargetTime(*(_DWORD **)(a1 + 440));
    }
    if (a4) {
      *a4 = *(void *)(a1 + 504);
    }
    if (a3) {
      *a3 = *(_DWORD *)v32;
    }
    double v28 = micro();
    if (*(double *)(a1 + 4184) == 0.0) {
      *(double *)(a1 + 4184) = v28;
    }
    double v29 = *(double *)(a1 + 9088);
    if (v29 != 0.0)
    {
      if (v28 - v29 < 1.0)
      {
LABEL_45:
        VCAudioReceiver_UpdateStallMetrics(a1, v28);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 680));
        if (*(void *)(a1 + 9312))
        {
          buf.epoch = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf.CMTimeValue value = xmmword_1E25A2C20;
          VCJitterBuffer_GetLastDecodedAudioFrameInfo(*(__n128 **)(a1 + 440), (__n128 *)&buf);
          VCAudioIssueDetector_ProcessFrame(*(void *)(a1 + 9312), (unsigned __int16 *)&buf);
          *(_DWORD *)(a1 + 10356) = LOWORD(buf.epoch);
        }
        return 1;
      }
      _VCAudioReceiver_UpdateStatisticsCollectorWithAudioErasure(a1, v28);
    }
    *(double *)(a1 + 9088) = v28;
    goto LABEL_45;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 680));
  VCAudioBufferList_ZeroMemory(a2);
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  VRTraceErrorLogLevelToCSTR();
  uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    VCAudioReceiver_PullAudioSamples_cold_2();
    return 0;
  }
  return result;
}

CMTime *_VCAudioReceiver_ComputeExtendedTimestamp@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, CMTime *a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)(a1 + 512);
  unint64_t v7 = HIDWORD(v6);
  if (v6 <= a2)
  {
    if (v6 < a2 && v6 - a2 <= 0x7FFFFFFE)
    {
      v7 += 0xFFFFFFFFLL;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        uint64_t v9 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 136315906;
          uint64_t v15 = v12;
          __int16 v16 = 2080;
          int v17 = "_VCAudioReceiver_ComputeExtendedTimestamp";
          __int16 v18 = 1024;
          int v19 = 1225;
          __int16 v20 = 2048;
          uint64_t v21 = a1;
          __int16 v10 = "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Detected misordered packet during timestamp rollover";
          goto LABEL_13;
        }
      }
    }
  }
  else if (a2 - v6 <= 0x7FFFFFFE)
  {
    ++v7;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315906;
        uint64_t v15 = v8;
        __int16 v16 = 2080;
        int v17 = "_VCAudioReceiver_ComputeExtendedTimestamp";
        __int16 v18 = 1024;
        int v19 = 1220;
        __int16 v20 = 2048;
        uint64_t v21 = a1;
        __int16 v10 = "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Detected timestamp rollover";
LABEL_13:
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, 0x26u);
      }
    }
  }
  return CMTimeMake(a3, a2 | (v7 << 32), (int)*(double *)(a1 + 456));
}

uint64_t _VCAudioReceiver_UpdateStatisticsCollectorWithAudioErasure(uint64_t result, double a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(result + 9248);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    VCJitterBuffer_GetWRMReportingMetrics(*(_DWORD **)(result + 440), (int *)&v18);
    int v5 = *(_DWORD *)(v4 + 9208);
    double v6 = 0.0;
    if (v18 != v5) {
      double v6 = (double)(*(_DWORD *)(v4 + 9220) + DWORD2(v18) - (HIDWORD(v18) + *(_DWORD *)(v4 + 9216)))
    }
         / (float)(v18 - v5);
    if (!*(unsigned char *)(v4 + 10440))
    {
      double v10 = v6 + *(double *)(v4 + 10448);
      *(double *)(v4 + 10448) = v10;
      unsigned int v11 = *(_DWORD *)(v4 + 10456) + 1;
      *(_DWORD *)(v4 + 10456) = v11;
      if (*(void *)(v4 + 576))
      {
        int v12 = *(_DWORD *)(v4 + 428);
        if (v12)
        {
          if (v11)
          {
            double v13 = *(double *)(v4 + 10464);
            if (v13 != 0.0 && a2 - v13 >= 5.0)
            {
              int v14 = (int)(v10 * 10000.0 / (double)v11);
              if (v12 <= v14)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
                {
                  uint64_t v15 = VRTraceErrorLogLevelToCSTR();
                  __int16 v16 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                  {
                    int v17 = *(_DWORD *)(v4 + 428);
                    *(_DWORD *)CMTime buf = 136316418;
                    uint64_t v22 = v15;
                    LOWORD(v23) = 2080;
                    *(void *)((char *)&v23 + 2) = "_VCAudioReceiver_CheckAndReportRegressedAudioErasuresPercentage";
                    WORD5(v23) = 1024;
                    HIDWORD(v23) = 631;
                    *(_WORD *)int v24 = 2048;
                    *(void *)&v24[2] = v4;
                    *(_WORD *)&v24[10] = 1024;
                    float v25 = *(float *)&v14;
                    LOWORD(v26) = 1024;
                    *(_DWORD *)((char *)&v26 + 2) = v17;
                    _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] AudioErasurePercentage=%d >= AudioErasurePercentageReportingThreshold=%d", buf, 0x32u);
                  }
                }
                reportingSymptom();
                *(unsigned char *)(v4 + 10440) = 1;
              }
            }
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioReceiver_UpdateStatisticsCollectorWithAudioErasure_cold_1();
        }
      }
    }
    *(void *)&long long v23 = 0;
    uint64_t v22 = 0;
    *((void *)&v23 + 1) = 0x600000000;
    long long v26 = 0u;
    long long v27 = 0u;
    int v28 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    float v7 = v6;
    uint64_t v8 = *(void *)(v4 + 400);
    *(_DWORD *)CMTime buf = 10;
    memset(v24, 0, sizeof(v24));
    float v25 = v7;
    uint64_t v29 = v8;
    uint64_t result = VCRateControlSetStatistics(v2, buf);
    long long v9 = v19;
    *(_OWORD *)(v4 + 9208) = v18;
    *(_OWORD *)(v4 + 9224) = v9;
    *(void *)(v4 + 9240) = v20;
  }
  return result;
}

void VCAudioReceiver_UpdateStallMetrics(uint64_t a1, double a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned char *)(a1 + 9256);
  if (a2 - *(double *)(a1 + 504) <= 0.5)
  {
    if (!*(unsigned char *)(a1 + 9256)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 9256))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      double v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 504);
        int v13 = 136316162;
        uint64_t v14 = v5;
        __int16 v15 = 2080;
        __int16 v16 = "VCAudioReceiver_UpdateStallMetrics";
        __int16 v17 = 1024;
        int v18 = 1161;
        __int16 v19 = 2048;
        uint64_t v20 = v7;
        __int16 v21 = 2048;
        double v22 = a2;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Entering short media stall lastReceivedPacketTime=%f, currentTime=%f", (uint8_t *)&v13, 0x30u);
      }
    }
    *(double *)(a1 + 9264) = a2;
    *(void *)(a1 + 9304) = *(void *)(a1 + 504);
    *uint64_t v4 = 1;
    *(_DWORD *)(a1 + 9272) = 0;
    return;
  }
  if (*(int *)(a1 + 9272) >= 6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      long long v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 504);
        int v11 = *(_DWORD *)(a1 + 9272);
        int v13 = 136316418;
        uint64_t v14 = v8;
        __int16 v15 = 2080;
        __int16 v16 = "VCAudioReceiver_UpdateStallMetrics";
        __int16 v17 = 1024;
        int v18 = 1168;
        __int16 v19 = 2048;
        uint64_t v20 = v10;
        __int16 v21 = 2048;
        double v22 = a2;
        __int16 v23 = 1024;
        int v24 = v11;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Leaving short media stall lastReceivedPacketTime=%f, currentTime=%f, packetCount=%d", (uint8_t *)&v13, 0x36u);
      }
    }
    double v12 = a2 - *(double *)(a1 + 9264) + 0.5;
    *(double *)(a1 + 9280) = *(double *)(a1 + 9280) + v12;
    if (*(double *)(a1 + 9288) > v12) {
      double v12 = *(double *)(a1 + 9288);
    }
    *(double *)(a1 + 9288) = v12;
    ++*(_DWORD *)(a1 + 9296);
    *(void *)(a1 + 9264) = 0;
    *(void *)(a1 + 9304) = 0;
    *uint64_t v4 = 0;
  }
}

void VCAudioReceiver_CollectChannelMetrics(uint64_t a1, _DWORD *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *a2 = *(_DWORD *)(a1 + 4192);
    a2[6] = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(_DWORD *)(a1 + 9136);
        int v6 = 136316162;
        uint64_t v7 = v3;
        __int16 v8 = 2080;
        long long v9 = "VCAudioReceiver_CollectChannelMetrics";
        __int16 v10 = 1024;
        int v11 = 1156;
        __int16 v12 = 2048;
        uint64_t v13 = a1;
        __int16 v14 = 1024;
        int v15 = v5;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] PullAudioSamples count:%u", (uint8_t *)&v6, 0x2Cu);
      }
    }
  }
}

void VCAudioReceiver_DiscardQueueExcess(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 440);
    VCJitterBuffer_DiscardQueueExcess(v1);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_DiscardQueueExcess_cold_1();
    }
  }
}

uint64_t _VCAudioReceiver_SetActiveStream(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (_WORD *)(result + 9000);
  if (*(void *)(result + 9072) != a2)
  {
    int v5 = (unsigned int *)result;
    int v6 = (pthread_mutex_t *)(result + 9008);
    pthread_mutex_lock((pthread_mutex_t *)(result + 9008));
    *((void *)v5 + 1134) = a2;
    uint64_t result = pthread_mutex_unlock(v6);
    v3[40] = v3[41] - *(_WORD *)(a3 + 14) + 1;
    *uint64_t v3 = 0;
    if (*((unsigned char *)v5 + 276))
    {
      uint64_t v7 = (uint64_t (*)(uint64_t, void))*((void *)v5 + 108);
      if (v7)
      {
        uint64_t result = *((void *)v5 + 109);
        if (result) {
          uint64_t result = v7(result, *(unsigned __int16 *)(a2 + 8));
        }
      }
      unint64_t v8 = *v5;
      if (v8)
      {
        unint64_t v9 = 0;
        __int16 v10 = v5 + 2;
        int v11 = v5 + 58;
        __int16 v12 = v5 + 2;
        do
        {
          if (v12 != (unsigned int *)a2)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v13 = VRTraceErrorLogLevelToCSTR();
              __int16 v14 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                if (v12 >= v11 || v12 < v10) {
LABEL_19:
                }
                  __break(0x5519u);
                int v15 = *((unsigned __int16 *)v12 + 4);
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v19 = v13;
                __int16 v20 = 2080;
                __int16 v21 = "_VCAudioReceiver_SetActiveStream";
                __int16 v22 = 1024;
                int v23 = 1205;
                __int16 v24 = 2048;
                uint64_t v25 = v5;
                __int16 v26 = 1024;
                int v27 = v15;
                _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] resetting non target stream %d", buf, 0x2Cu);
              }
            }
            if (v12 >= v11 || v12 < v10) {
              goto LABEL_19;
            }
            uint64_t result = RTPResetHandle();
            unint64_t v8 = *v5;
          }
          ++v9;
          v12 += 14;
        }
        while (v9 < v8);
      }
    }
  }
  __int16 v16 = v3[40] + *(_WORD *)(a3 + 14);
  *(_WORD *)(a3 + 14) = v16;
  v3[41] = v16;
  return result;
}

uint64_t VCAudioReceiver_CalculateBurstLoss(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1 + 9000;
  int v4 = *(unsigned __int16 *)(a1 + 9000);
  unsigned int v5 = 0;
  if (*(_WORD *)(a1 + 9000))
  {
    int v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    int v9 = (unsigned __int16)(*(_WORD *)(a1 + 9002) % 0x12Cu + 300);
    unint64_t v10 = a1 + 4200;
    do
    {
      uint64_t v11 = (unsigned __int16)(v9
                             - 300
                             * (((unint64_t)(458129845 * v9) >> 37)
                              + ((unint64_t)(458129845 * v9) >> 63)));
      __int16 v12 = (_DWORD *)(v10 + 16 * v11);
      if (v10 > (unint64_t)v12 || (unint64_t)(v12 + 4) > v3) {
LABEL_27:
      }
        __break(0x5519u);
      if (*(unsigned char *)(v10 + 16 * v11 + 13))
      {
        if (v6)
        {
          if ((unint64_t)(v6 + 4) > v7 || v8 > (unint64_t)v6) {
            goto LABEL_27;
          }
          if (v6[2] - *v12 - *(_DWORD *)(v10 + 16 * v11 + 8) > v5
            && !*((unsigned char *)v6 + 12)
            && !*(unsigned char *)(v10 + 16 * v11 + 12))
          {
            unsigned int v5 = v6[2] - *v12 - *(_DWORD *)(v10 + 16 * v11 + 8);
          }
          unint64_t v7 = v3;
          unint64_t v8 = a1 + 4200;
          if (((float)v5 / *(double *)(a1 + 456) * 1000.0) > 0x1388) {
            break;
          }
        }
        else
        {
          unint64_t v7 = v3;
          unint64_t v8 = a1 + 4200;
        }
      }
      else
      {
        __int16 v12 = v6;
      }
      --v9;
      int v6 = v12;
      --v4;
    }
    while (v4);
  }
  LODWORD(v1) = vcvtad_u64_f64((double)((float)v5 / *(double *)(a1 + 456) * 1000.0) / 20.0);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    __int16 v16 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 456);
        int v20 = 136316418;
        uint64_t v21 = v14;
        __int16 v22 = 2080;
        int v23 = "VCAudioReceiver_CalculateBurstLoss";
        __int16 v24 = 1024;
        int v25 = 1567;
        __int16 v26 = 1024;
        unsigned int v27 = v5;
        __int16 v28 = 1024;
        int v29 = v1;
        __int16 v30 = 2048;
        uint64_t v31 = v17;
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Calculated maxBurstLoss in samples: %u, in 20ms blocks: %u, sampleRate: %f", (uint8_t *)&v20, 0x32u);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a1 + 456);
      int v20 = 136316418;
      uint64_t v21 = v14;
      __int16 v22 = 2080;
      int v23 = "VCAudioReceiver_CalculateBurstLoss";
      __int16 v24 = 1024;
      int v25 = 1567;
      __int16 v26 = 1024;
      unsigned int v27 = v5;
      __int16 v28 = 1024;
      int v29 = v1;
      __int16 v30 = 2048;
      uint64_t v31 = v19;
      _os_log_debug_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d Calculated maxBurstLoss in samples: %u, in 20ms blocks: %u, sampleRate: %f", (uint8_t *)&v20, 0x32u);
    }
  }
  return v1;
}

void _VCAudioReceiver_SplitRedPacket(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  memset(v11, 0, sizeof(v11));
  int v7 = VCAudioRedBuilder_SplitRedAudioPacket(*a2, a3, (uint64_t)v11, 4, *(double *)(a1 + 456), *(unsigned __int8 *)(a1 + 260));
  if (v7 >= 1)
  {
    uint64_t v8 = v7;
    int v9 = (int *)v11;
    while (1)
    {
      unint64_t v10 = (int *)VCJitterBuffer_AudioPacketAlloc(*(void *)(a1 + 440));
      AudioPacket_initNewPacket((uint64_t)a3, (uint64_t)v10);
      if (v9 && (v9 >= (int *)v12 || v9 < (int *)v11)) {
        __break(0x5519u);
      }
      if (!VCAudioRedBuilder_UpdateAudioPacketWithRedPayload((uint64_t)v10, v9)) {
        break;
      }
      AudioPacketArray_Append(a4, (uint64_t)v10);
      v9 += 8;
      if (!--v8) {
        goto LABEL_12;
      }
    }
    VCJitterBuffer_AudioPacketFree(*(void *)(a1 + 440), v10);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioReceiver_SplitRedPacket_cold_1();
      }
    }
  }
LABEL_12:
  VCJitterBuffer_AudioPacketFree(*(void *)(a1 + 440), a3);
}

void _VCAudioReceiver_SplitEVSPacket(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 276)) {
    goto LABEL_8;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v31 = 0;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  unint64_t v10 = a2 + 11;
  LODWORD(v11) = a2[379];
  if (!VCAudioDecoderList_GetSpeechCodecBundleData(a1 + 744, a2[6], a2[7], (uint64_t)&v10)
    || !DWORD2(v12)
    || !BYTE4(v13))
  {
    goto LABEL_8;
  }
  int v6 = WORD4(v13);
  int v7 = HIDWORD(v13);
  uint64_t v8 = VCJitterBuffer_AudioPacketAlloc(*(void *)(a1 + 440));
  AudioPacket_initNewPacket((uint64_t)a2, (uint64_t)v8);
  v8[12] = 1;
  v8[1848] = 1;
  *((_DWORD *)v8 + 463) = v7;
  *((_DWORD *)v8 + 4) -= v6 * (*(double *)(a1 + 456) * 0.02);
  *((_DWORD *)v8 + 5) = a2[4];
  *((_DWORD *)v8 + 6) = a2[6];
  size_t v9 = a2[379];
  if (v9 <= 0x5C0)
  {
    memcpy(v8 + 44, a2 + 11, v9);
    *((_DWORD *)v8 + 379) = a2[379];
    *((_WORD *)v8 + 7) -= v6;
    if (v8 < v8 + 1864)
    {
      AudioPacketArray_Append(a3, (uint64_t)v8);
LABEL_8:
      a2[5] = a2[4];
      AudioPacketArray_Append(a3, (uint64_t)a2);
      return;
    }
  }
  __break(0x5519u);
}

uint64_t VCAudioReceiver_ReportAWDMetrics(unsigned int *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      unsigned int v5 = *MEMORY[0x1E4F47A50];
      BOOL v10 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v10) {
        return result;
      }
      *(_DWORD *)CMTime buf = 136315650;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "VCAudioReceiver_ReportAWDMetrics";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 2328;
      uint64_t v8 = "VCAudioReceiver [%s] %s:%d CollectAWDMetrics:audioReceiver is nil";
LABEL_13:
      _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, v8, buf, 0x1Cu);
    }
    return 0;
  }
  if (*((_WORD *)a1 + 148) == 1) {
    return 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 170));
  if (*((unsigned char *)a1 + 609))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 170));
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v2 = VRTraceErrorLogLevelToCSTR();
      unint64_t v3 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        *(void *)&uint8_t buf[4] = v2;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCAudioReceiver_Lock";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 321;
        _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Receiver is being torn down", buf, 0x1Cu);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return 0;
    }
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    unsigned int v5 = *MEMORY[0x1E4F47A50];
    BOOL v6 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
    *(_DWORD *)CMTime buf = 136315650;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "VCAudioReceiver_ReportAWDMetrics";
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = 2337;
    uint64_t v8 = "VCAudioReceiver [%s] %s:%d VCAudioReceiver_CollectAWDMetrics: Failed to grab the lock";
    goto LABEL_13;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  memset(buf, 0, sizeof(buf));
  VCJitterBuffer_GetPlaybackReportingMetrics(*((void *)a1 + 55), (uint64_t)buf);
  if (*a1)
  {
    unint64_t v11 = 0;
    long long v12 = (uint64_t *)(a1 + 2);
    do
    {
      if (v12 >= (uint64_t *)a1 + 29 || v12 < (uint64_t *)a1 + 1) {
        __break(0x5519u);
      }
      uint64_t v13 = *v12;
      v12 += 7;
      v14[8] = v23;
      v14[9] = v24;
      uint64_t v15 = v25;
      v14[4] = v19;
      v14[5] = v20;
      v14[6] = v21;
      v14[7] = v22;
      v14[0] = *(_OWORD *)buf;
      v14[1] = *(_OWORD *)&buf[16];
      v14[2] = v17;
      v14[3] = v18;
      _VCAudioReceiver_ReportAWDMetrics((uint64_t)a1, v13, (uint64_t)v14);
      ++v11;
    }
    while (v11 < *a1);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 170));
  return 1;
}

void _VCAudioReceiver_ReportAWDMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return;
  }
  uint64_t v8 = Mutable;
  unsigned int v9 = *(_DWORD *)(a3 + 56);
  unsigned int v10 = *(_DWORD *)(a3 + 80);
  float v11 = *(float *)(a3 + 116);
  float v12 = *(float *)(a3 + 120);
  float v13 = *(float *)(a3 + 124);
  float v14 = *(float *)(a3 + 128);
  float v15 = *(float *)(a3 + 132);
  int v16 = *(_DWORD *)(a3 + 136);
  uint64_t v95 = 0;
  unsigned int v94 = 0;
  RTPGetPacketLossMetrics(a2, (unsigned int *)&v95 + 1, (unsigned int *)&v95, &v94);
  uint64_t v92 = 0;
  *(void *)__int16 v93 = 0;
  VCJitterBuffer_GetAWDReportingMetrics(*(void *)(a1 + 440), (uint64_t)&v92);
  float v90 = *((float *)&v92 + 1);
  float v91 = *(float *)&v92;
  float v17 = v93[0];
  float v88 = v12;
  float v89 = v11;
  float v86 = v14 * 1000.0;
  float v87 = v13;
  float v85 = v15 * 1000.0;
  float v83 = NAN;
  unsigned int v84 = v10;
  double v18 = *(double *)(a1 + 456);
  unsigned int v19 = v18;
  if (v18)
  {
    *(float *)&double v18 = v93[1];
    float v20 = (double)*(unint64_t *)&v18 * 1000.0 / (double)v19;
    float v83 = v20;
  }
  float valuePtr = NAN;
  if (v95)
  {
    float valuePtr = (float)v94 / (float)v95;
    CFNumberRef v21 = CFNumberCreate(v6, kCFNumberFloatType, &valuePtr);
    if (v21)
    {
      CFNumberRef v22 = v21;
      CFDictionaryAddValue(v8, @"RTPPacketLossRate", v21);
      CFRelease(v22);
    }
  }
  float v81 = NAN;
  if (v9)
  {
    float v81 = (float)v84 / (float)v9;
    CFNumberRef v23 = CFNumberCreate(v6, kCFNumberFloatType, &v81);
    if (v23)
    {
      CFNumberRef v24 = v23;
      CFDictionaryAddValue(v8, @"JitterBufferLossRate", v23);
      CFRelease(v24);
    }
  }
  *(_DWORD *)CMTime buf = v9;
  CFNumberRef v25 = CFNumberCreate(v6, kCFNumberIntType, buf);
  CFDictionaryAddValue(v8, @"FramesPlayedCount", v25);
  CFRelease(v25);
  if (v95)
  {
    CFNumberRef v26 = CFNumberCreate(v6, kCFNumberIntType, (char *)&v95 + 4);
    if (v26)
    {
      CFNumberRef v27 = v26;
      CFDictionaryAddValue(v8, @"AudioRTPPacketsReceivedCount", v26);
      CFRelease(v27);
    }
    CFNumberRef v28 = CFNumberCreate(v6, kCFNumberIntType, &v94);
    if (v28)
    {
      CFNumberRef v29 = v28;
      CFDictionaryAddValue(v8, @"AudioRTPPacketsLostCount", v28);
      CFRelease(v29);
    }
    CFNumberRef v30 = CFNumberCreate(v6, kCFNumberIntType, &v84);
    if (v30)
    {
      CFNumberRef v31 = v30;
      CFDictionaryAddValue(v8, @"JitterBufferLossCount", v30);
      CFRelease(v31);
    }
  }
  CFNumberRef v32 = CFNumberCreate(v6, kCFNumberFloatType, &v91);
  if (v32)
  {
    CFNumberRef v33 = v32;
    CFDictionaryAddValue(v8, @"JitterBufferUnderflowRate", v32);
    CFRelease(v33);
  }
  CFNumberRef v34 = CFNumberCreate(v6, kCFNumberIntType, (const void *)(a1 + 9324));
  if (v34)
  {
    CFNumberRef v35 = v34;
    CFDictionaryAddValue(v8, @"Payload", v34);
    CFRelease(v35);
  }
  int v80 = *(_DWORD *)(a1 + 10356);
  CFNumberRef v36 = CFNumberCreate(v6, kCFNumberIntType, &v80);
  if (v36)
  {
    CFNumberRef v37 = v36;
    CFDictionaryAddValue(v8, @"CodecSampleRate", v36);
    CFRelease(v37);
  }
  int v38 = (_DWORD *)(a1 + 10360);
  if (!*(_DWORD *)(a1 + 10360)) {
    *int v38 = 2400;
  }
  CFNumberRef v39 = CFNumberCreate(v6, kCFNumberIntType, v38);
  if (v39)
  {
    CFNumberRef v40 = v39;
    CFDictionaryAddValue(v8, @"DownlinkCodecBitRate", v39);
    CFRelease(v40);
  }
  *(_DWORD *)CMTime buf = 0;
  int v41 = *(_DWORD *)(a1 + 9320);
  switch(v41)
  {
    case 6:
      int v41 = 3;
      break;
    case 3:
      int v41 = 1;
      break;
    case 2:
      break;
    default:
      goto LABEL_34;
  }
  *(_DWORD *)CMTime buf = v41;
LABEL_34:
  CFNumberRef v42 = CFNumberCreate(v6, kCFNumberIntType, buf);
  if (v42)
  {
    CFNumberRef v43 = v42;
    CFDictionaryAddValue(v8, @"RATType", v42);
    CFRelease(v43);
  }
  int v77 = *(_DWORD *)buf;
  CFNumberRef v44 = CFNumberCreate(v6, kCFNumberFloatType, &v90);
  if (v44)
  {
    CFNumberRef v45 = v44;
    CFDictionaryAddValue(v8, @"FrameErasureRate", v44);
    CFRelease(v45);
  }
  if (v90 > 0.04 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v46 = VRTraceErrorLogLevelToCSTR();
    long long v47 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315906;
      uint64_t v97 = v46;
      __int16 v98 = 2080;
      __int16 v99 = "_VCAudioReceiver_CollectAWDMetrics";
      __int16 v100 = 1024;
      int v101 = 2242;
      __int16 v102 = 2048;
      double v103 = v90;
      _os_log_impl(&dword_1E1EA4000, v47, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d High audio erasure rate: %f", buf, 0x26u);
    }
  }
  *(float *)CMTime buf = v17;
  CFNumberRef v48 = CFNumberCreate(v6, kCFNumberFloat32Type, buf);
  CFDictionaryAddValue(v8, @"FrameSpeechErasureRate", v48);
  CFRelease(v48);
  CFNumberRef v49 = CFNumberCreate(v6, kCFNumberFloatType, &v83);
  if (v49)
  {
    CFNumberRef v50 = v49;
    CFDictionaryAddValue(v8, @"JitterBufferResidencyTime", v49);
    CFRelease(v50);
  }
  CFNumberRef v51 = CFNumberCreate(v6, kCFNumberFloatType, &v89);
  if (v51)
  {
    CFNumberRef v52 = v51;
    CFDictionaryAddValue(v8, @"TimescaleRate", v51);
    CFRelease(v52);
  }
  CFNumberRef v53 = CFNumberCreate(v6, kCFNumberFloatType, &v88);
  if (v53)
  {
    CFNumberRef v54 = v53;
    CFDictionaryAddValue(v8, @"SpeechTimescaleRate", v53);
    CFRelease(v54);
  }
  CFNumberRef v55 = CFNumberCreate(v6, kCFNumberFloatType, &v87);
  if (v55)
  {
    CFNumberRef v56 = v55;
    CFDictionaryAddValue(v8, @"SilenceTimescaleRate", v55);
    CFRelease(v56);
  }
  uint64_t v79 = 0;
  unsigned int v78 = 0;
  RTPGetJitter(a2, (_DWORD *)&v79 + 1, &v79, &v78);
  double v57 = (double)v19 / 1000.0;
  double v58 = (double)(v79 | 0x408F400000000000uLL) / v57;
  unsigned int v59 = vcvtad_u64_f64(v58);
  LODWORD(v58) = v78;
  unsigned int v78 = vcvtad_u64_f64((double)*(unint64_t *)&v58 / v57);
  LODWORD(v79) = v59;
  CFNumberRef v60 = CFNumberCreate(v6, kCFNumberIntType, &v79);
  if (v60)
  {
    CFNumberRef v61 = v60;
    CFDictionaryAddValue(v8, @"MaxInterArrivalJitter", v60);
    CFRelease(v61);
  }
  CFNumberRef v62 = CFNumberCreate(v6, kCFNumberIntType, &v78);
  if (v62)
  {
    CFNumberRef v63 = v62;
    CFDictionaryAddValue(v8, @"AverageInterArrivalJitter", v62);
    CFRelease(v63);
  }
  CFNumberRef v64 = CFNumberCreate(v6, kCFNumberFloatType, &v86);
  if (v64)
  {
    CFNumberRef v65 = v64;
    CFDictionaryAddValue(v8, @"AveragePacketLifetime", v64);
    CFRelease(v65);
  }
  CFNumberRef v66 = CFNumberCreate(v6, kCFNumberFloatType, &v85);
  if (v66)
  {
    CFNumberRef v67 = v66;
    CFDictionaryAddValue(v8, @"MaxPacketLifetime", v66);
    CFRelease(v67);
  }
  *(_DWORD *)CMTime buf = *(unsigned __int8 *)(a1 + 302);
  CFNumberRef v68 = CFNumberCreate(v6, kCFNumberIntType, buf);
  CFDictionaryAddValue(v8, @"DTMFTonePlaybackEnabled", v68);
  CFRelease(v68);
  *(_DWORD *)CMTime buf = *(unsigned __int8 *)(a1 + 425);
  CFNumberRef v69 = CFNumberCreate(v6, kCFNumberIntType, buf);
  CFDictionaryAddValue(v8, @"DTMFEventCallbacksEnabled", v69);
  CFRelease(v69);
  *(_DWORD *)CMTime buf = v16;
  CFNumberRef v70 = CFNumberCreate(v6, kCFNumberIntType, buf);
  CFDictionaryAddValue(v8, @"DTMFEventTotalCount", v70);
  CFRelease(v70);
  *(_DWORD *)CMTime buf = *(_DWORD *)(a1 + 244);
  CFNumberRef v71 = CFNumberCreate(v6, kCFNumberIntType, buf);
  CFDictionaryAddValue(v8, @"JitterBufferMode", v71);
  CFRelease(v71);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v72 = VRTraceErrorLogLevelToCSTR();
    long long v73 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v74 = *(_DWORD *)(a1 + 9324);
      int v75 = *(_DWORD *)(a1 + 10360);
      int v76 = *(_DWORD *)(a1 + 244);
      *(_DWORD *)CMTime buf = 136321282;
      uint64_t v97 = v72;
      __int16 v98 = 2080;
      __int16 v99 = "_VCAudioReceiver_CollectAWDMetrics";
      __int16 v100 = 1024;
      int v101 = 2311;
      __int16 v102 = 2048;
      double v103 = valuePtr;
      __int16 v104 = 2048;
      double v105 = v91;
      __int16 v106 = 2048;
      double v107 = v90;
      __int16 v108 = 2048;
      double v109 = v17;
      __int16 v110 = 2048;
      double v111 = v83;
      __int16 v112 = 1024;
      int v113 = v74;
      __int16 v114 = 1024;
      unsigned int v115 = v19;
      __int16 v116 = 1024;
      int v117 = v75;
      __int16 v118 = 1024;
      int v119 = v77;
      __int16 v120 = 2048;
      double v121 = v89;
      __int16 v122 = 2048;
      double v123 = v88;
      __int16 v124 = 2048;
      double v125 = v87;
      __int16 v126 = 2048;
      double v127 = v86;
      __int16 v128 = 2048;
      double v129 = v85;
      __int16 v130 = 1024;
      int v131 = v79;
      __int16 v132 = 1024;
      unsigned int v133 = v78;
      __int16 v134 = 2048;
      double v135 = v81;
      __int16 v136 = 1024;
      int v137 = HIDWORD(v95);
      __int16 v138 = 1024;
      unsigned int v139 = v94;
      __int16 v140 = 1024;
      unsigned int v141 = v84;
      __int16 v142 = 1024;
      unsigned int v143 = v9;
      __int16 v144 = 1024;
      int v145 = v76;
      _os_log_impl(&dword_1E1EA4000, v73, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Collected AWD metric samples (rtpPacketLossRate=%f, jitterBufferUnderflowRate=%f, frameErasureRate=%f, speechErasureRate=%f, jitterBufferResidencyTime=%f, payloadType=%d, sampleRate=%d, bitRate=%d, ratType=%d, timescaleRate=%f, speechTimescaleRate=%f, silenceTimescaleRate=%f, averagePacketLifetime=%f, maxPacketLifetime=%f, maxInterArrivalJitter=%u, averageInterArrivalJitter=%u, jitterBufferLossRate=%f, packetsReceived=%u, packetsLost=%u, totalJBLossCount=%u totalFramesPlayed=%u jitterBufferMode=%u)", buf, 0xCCu);
    }
  }
  reportingAudioStreamLogMetricSample();
  CFRelease(v8);
}

void VCAudioReceiver_UpdateWrmMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      unsigned int v3 = *(double *)(a1 + 456);
      uint64_t v7 = 0;
      long long v5 = 0u;
      long long v6 = 0u;
      VCJitterBuffer_GetWRMReportingMetrics(*(_DWORD **)(a1 + 440), (int *)&v5);
      *(_DWORD *)(a2 + 60) = v7;
      *(_OWORD *)(a2 + 24) = v5;
      double v4 = (double)*((unint64_t *)&v6 + 1) * 1000.0 / (double)v3;
      *(void *)(a2 + 72) = v6;
      *(void *)(a2 + 80) = (unint64_t)v4;
      *(_DWORD *)(a2 + 192) = v3;
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_UpdateWrmMetrics_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_UpdateWrmMetrics_cold_1();
    }
  }
}

void VCAudioReceiver_GetJitterBufferMetrics(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      if (*(_WORD *)(a1 + 296) != 1)
      {
        unsigned int v3 = *(double *)(a1 + 456);
        VCJitterBuffer_GetWRMReportingMetrics(*(_DWORD **)(a1 + 440), (int *)a2);
        *(void *)(a2 + 24) = (unint64_t)((double)*(unint64_t *)(a2 + 24) * 1000.0 / (double)v3);
        *(_DWORD *)(a2 + 36) = v3;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioReceiver_GetJitterBufferMetrics_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_GetJitterBufferMetrics_cold_1();
    }
  }
}

void VCAudioReceiver_SendStartCallReport(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 576);
    MEMORY[0x1F4105A30](v1);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_SendStartCallReport_cold_1();
    }
  }
}

void VCAudioReceiver_SendEndCallReport(uint64_t a1)
{
  if (a1)
  {
    reportingAudioStreamLogCallEnd();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_SendEndCallReport_cold_1();
    }
  }
}

BOOL VCAudioReceiver_SetMagicCookieForPayload(uint64_t a1, int a2, int a3, void *a4, UInt32 a5)
{
  if (a1) {
    return (int)VCAudioDecoderList_SetMagicCookieForPayload(a1 + 744, a2, a3, a4, a5) >= 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCAudioReceiver_SetMagicCookieForPayload_cold_1();
  }
  return 0;
}

void VCAudioReceiver_SetTargetStreamID(uint64_t a1, __int16 a2)
{
  if (a1)
  {
    *(_WORD *)(a1 + 9134) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_SetTargetStreamID_cold_1();
    }
  }
}

void VCAudioReceiver_SetOverlayToken(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    *(void *)(a1 + 10424) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_SetOverlayToken_cold_1();
    }
  }
}

BOOL VCAudioReceiver_ProcessCellularNetworkNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      VCAudioReceiver_ProcessCellularNetworkNotification_cold_1();
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 2) != 2) {
    return 0;
  }
  int RATFromNWNotification = VCNWConnectionMonitorUtils_GetRATFromNWNotification(a2);
  if (!*(unsigned char *)(a1 + 10401) && VCNWConnectionMonitorUtils_IsBasebandRAT5G(RATFromNWNotification))
  {
    *(_DWORD *)(a1 + 9320) = 6;
    *(_DWORD *)(a1 + 388) = 6;
    VCAudioIssueDetector_UpdateConnectionType(*(void *)(a1 + 9312), 6);
    *(unsigned char *)(a1 + 10401) = 1;
  }
  long long v8 = 0u;
  long long v9 = 0u;
  LODWORD(v8) = *(_DWORD *)(a2 + 4);
  switch((int)v8)
  {
    case 0:
      *((void *)&v8 + 1) = *(void *)(a2 + 16);
      LOBYTE(v9) = *(unsigned char *)(a2 + 60);
      BYTE1(v9) = *(unsigned char *)(a2 + 65);
      BYTE2(v9) = *(unsigned char *)(a2 + 67);
      BYTE3(v9) = *(unsigned char *)(a2 + 69);
      DWORD1(v9) = *(_DWORD *)(a2 + 70);
      char v5 = *(unsigned char *)(a2 + 74);
      goto LABEL_11;
    case 2:
      LOBYTE(v9) = *(_DWORD *)(a2 + 8);
      BYTE1(v9) = *(unsigned char *)(a2 + 16);
      BYTE2(v9) = *(unsigned char *)(a2 + 18);
      break;
    case 4:
      WORD2(v9) = *(_WORD *)(a2 + 10);
      BYTE3(v9) = *(unsigned char *)(a2 + 8);
      break;
    case 5:
      LOBYTE(v9) = *(_DWORD *)(a2 + 8);
      WORD3(v9) = *(_WORD *)(a2 + 12);
      char v5 = *(unsigned char *)(a2 + 14);
LABEL_11:
      BYTE8(v9) = v5;
      break;
    default:
      break;
  }
  VCJitterBuffer_ProcessCellularNetworkNotification(*(void *)(a1 + 440), (uint64_t)&v8);
  uint64_t v6 = *(void *)(a1 + 9312);
  if (v6) {
    VCAudioIssueDetector_ProcessCellularNetworkNotification(v6, a2);
  }
  return 1;
}

void VCAudioReceiver_ProcessConnectionType(uint64_t a1, int a2)
{
  if (a1)
  {
    VCAudioIssueDetector_Stop(*(void *)(a1 + 9312));
    VCAudioReceiver_ReportAWDMetrics((unsigned int *)a1);
    reportingAudioStreamLogCallEnd();
    *(_DWORD *)(a1 + 9320) = a2;
    *(_DWORD *)(a1 + 388) = a2;
    if (a2 == 3) {
      *(unsigned char *)(a1 + 10401) = 0;
    }
    VCAudioIssueDetector_UpdateConnectionType(*(void *)(a1 + 9312), a2);
    uint64_t v4 = *(void *)(a1 + 9312);
    VCAudioIssueDetector_Start(v4);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_ProcessConnectionType_cold_1();
    }
  }
}

void VCAudioReceiver_SetAudioPlayoutDelay(uint64_t a1, double a2, double a3)
{
  if (a1)
  {
    *(double *)(a1 + 10416) = a2;
    if (*(void *)(a1 + 10408))
    {
      LODWORD(a3) = *(_DWORD *)(a1 + 496);
      int v3 = vcvtpd_u64_f64(a2 / ((double)*(unint64_t *)&a3 / *(double *)(a1 + 456)));
      uint64_t v4 = *(void *)(a1 + 10408);
      VCAudioFrameDelay_UpdateDelay(v4, v3);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioReceiver_SetAudioPlayoutDelay_cold_1();
    }
  }
}

void _VCAudioReceiver_HandleRTPPacket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1 + 9096;
  if (*(_DWORD *)a3 == 1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      float v17 = *MEMORY[0x1E4F47A50];
      double v18 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          *(void *)&uint8_t buf[4] = v16;
          LOWORD(v50[0]) = 2080;
          *(void *)((char *)v50 + 2) = "_VCAudioReceiver_HandleRTPBasebandNotificationPacket";
          HIWORD(v50[2]) = 1024;
          LODWORD(v51) = 1968;
          _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d received VTP_PKT_BBNOTE", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        _VCAudioReceiver_HandleRTPPacket_cold_12();
      }
    }
    if (*(_DWORD *)(a3 + 8) != 3) {
      return;
    }
    if (!*(_WORD *)(a3 + 26)) {
      return;
    }
    *(unsigned char *)uint64_t v10 = 1;
    *(_WORD *)(v10 + 2) = *(_WORD *)(a3 + 26);
    if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
      return;
    }
    uint64_t v23 = VRTraceErrorLogLevelToCSTR();
    float v20 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CMTime buf = 136315650;
    *(void *)&uint8_t buf[4] = v23;
    LOWORD(v50[0]) = 2080;
    *(void *)((char *)v50 + 2) = "_VCAudioReceiver_HandleRTPBasebandNotificationPacket";
    HIWORD(v50[2]) = 1024;
    LODWORD(v51) = 1972;
    CFNumberRef v22 = "VCAudioReceiver [%s] %s:%d Received local codec rate mode change request";
LABEL_32:
    _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, v22, buf, 0x1Cu);
    return;
  }
  if (*(_DWORD *)a3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioReceiver_HandleRTPPacket_cold_1();
      }
    }
    return;
  }
  unsigned int v11 = *(unsigned __int8 *)(a3 + 88);
  if (v11 >= 0xD) {
    goto LABEL_108;
  }
  uint64_t v4 = a2;
  uint64_t v3 = a1;
  if ((_VCAudioReceiver_ShouldProcessAudioPacket(a1, a2, *(unsigned __int8 *)(a3 + 50), *(void *)(a3 + 56), (unsigned __int16 *)(a3 + 64), v11) & 1) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      return;
    }
    uint64_t v19 = VRTraceErrorLogLevelToCSTR();
    float v20 = *MEMORY[0x1E4F47A50];
    CFNumberRef v21 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
        _VCAudioReceiver_HandleRTPPacket_cold_11();
      }
      return;
    }
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)CMTime buf = 136315650;
    *(void *)&uint8_t buf[4] = v19;
    LOWORD(v50[0]) = 2080;
    *(void *)((char *)v50 + 2) = "_VCAudioReceiver_HandleRTPMediaPacket";
    HIWORD(v50[2]) = 1024;
    LODWORD(v51) = 1898;
    CFNumberRef v22 = "VCAudioReceiver [%s] %s:%d Ignoring invalid incoming RTP media packet.";
    goto LABEL_32;
  }
  if (*(void *)(a3 + 136) && !*(unsigned char *)(v10 + 56))
  {
    LODWORD(blockBufferOut) = -1431655766;
    LODWORD(theBuffer) = -1431655766;
    RTPGetRecvStats(*(void *)v4, &blockBufferOut, &theBuffer);
    *(void *)&v50[1] = 0;
    long long v51 = 0uLL;
    *(void *)CMTime buf = *(void *)(a3 + 40);
    *(_DWORD *)&buf[8] = *(void *)(a3 + 160);
    v50[0] = blockBufferOut;
    int v12 = *(_DWORD *)(a3 + 24);
    *(void *)&v50[1] = theBuffer >> 3;
    DWORD1(v51) = v12;
    WORD4(v51) = *(_WORD *)(a3 + 20);
    WORD5(v51) = *(_WORD *)(a3 + 200);
    BYTE12(v51) = *(unsigned char *)(a3 + 203);
    BYTE13(v51) = *(unsigned char *)(a3 + 104);
    uint64_t v14 = *(void *)(a3 + 136);
    uint64_t v13 = *(void *)(a3 + 144);
    if (!v14 && v13) {
      goto LABEL_108;
    }
    ControlInfoWithBuffer = VCMediaControlInfoGeneratorCreateControlInfoWithBuffer(*(void *)(v3 + 432), v13, v14, (uint64_t)buf);
    VCMediaControlInfoDispose((uint64_t)ControlInfoWithBuffer);
  }
  if (*(unsigned char *)(a3 + 200)) {
    return;
  }
  char v5 = (unsigned int *)(a3 + 24);
  kdebug_trace();
  if (*(unsigned char *)(v4 + 11))
  {
    if (!*(unsigned char *)(v10 + 32))
    {
LABEL_36:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        CFMutableDictionaryRef Mutable = (__CFDictionary *)VRTraceErrorLogLevelToCSTR();
        CFNumberRef v24 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v25 = *(unsigned __int8 *)(v4 + 11);
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = Mutable;
          LOWORD(v50[0]) = 2080;
          *(void *)((char *)v50 + 2) = "_VCAudioReceiver_SwitchStreamConfigs";
          HIWORD(v50[2]) = 1024;
          LODWORD(v51) = 1877;
          WORD2(v51) = 1024;
          *(_DWORD *)((char *)&v51 + 6) = v25;
          _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Switching Audio Stream configs isOneToOne:%d", buf, 0x22u);
        }
      }
      *(unsigned char *)(v10 + 32) = *(unsigned char *)(v4 + 11);
      VCJitterBuffer_SetMode(*(void *)(v3 + 440), *(_DWORD *)(v4 + 24));
      VCJitterBuffer_SetSkipDecodeOnSilence(*(void *)(v3 + 440), *(unsigned char *)(v4 + 11) == 0);
      VCJitterBuffer_ResetPlaybackReportingMetrics(*(void *)(v3 + 440));
      VCJitterBuffer_ResetJitterQueueUnderflowRate(*(void *)(v3 + 440));
      *(unsigned char *)(v10 + 56) = *(unsigned char *)(v4 + 28);
      *(void *)(v3 + 432) = *(void *)(v4 + 40);
      _VCAudioReceiver_UnregisterStatistics(v3);
      _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v3 + 9248), *(CFTypeRef *)(v4 + 48));
      _VCAudioReceiver_RegisterStatistics(v3);
      if (*(unsigned char *)(v4 + 11))
      {
        *(_WORD *)(v10 + 36) = 0;
        CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(_DWORD *)CMTime buf = *(unsigned __int16 *)(v10 + 36);
        CFNumberRef v27 = CFNumberCreate(v26, kCFNumberIntType, buf);
        CFDictionaryAddValue(Mutable, @"VCASActiveStreamID", v27);
        reportingAudioStreamEvent();
        CFRelease(v27);
        CFRelease(Mutable);
      }
    }
  }
  else if (*(unsigned char *)(v10 + 32))
  {
    goto LABEL_36;
  }
  if (*(unsigned char *)(v10 + 1304))
  {
    VCJitterBuffer_SetMode(*(void *)(v3 + 440), *(_DWORD *)(v3 + 244));
    *(unsigned char *)(v10 + 1304) = 0;
  }
  if (*(void *)(a3 + 160) >= 0x5C1uLL)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioReceiver_HandleRTPPacket_cold_2();
      }
    }
    return;
  }
  if (*(void *)(a3 + 184) >= 0x101uLL)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioReceiver_HandleRTPPacket_cold_3();
      }
    }
    return;
  }
  uint64_t v6 = VCJitterBuffer_AudioPacketAlloc(*(void *)(v3 + 440));
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v6)
  {
    long long v8 = (BOOL *)(a3 + 208);
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      CFMutableDictionaryRef Mutable = (__CFDictionary *)*MEMORY[0x1E4F47A50];
      CFNumberRef v29 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = *(void *)(a3 + 40);
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = v10;
          LOWORD(v50[0]) = 2080;
          *(void *)((char *)v50 + 2) = "_VCAudioReceiver_HandleRTPMediaPacket";
          HIWORD(v50[2]) = 1024;
          LODWORD(v51) = 1933;
          WORD2(v51) = 2048;
          *(void *)((char *)&v51 + 6) = v30;
          _os_log_impl(&dword_1E1EA4000, (os_log_t)Mutable, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d received packet time[%f]", buf, 0x26u);
        }
      }
      else if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        _VCAudioReceiver_HandleRTPPacket_cold_10();
      }
    }
    if (a3 + 8 >= (unint64_t)v8) {
      goto LABEL_108;
    }
    *((void *)v6 + 230) = 0;
    *((_DWORD *)v6 + 458) = *(_DWORD *)(a3 + 96);
    v6[1856] = *(unsigned char *)(a3 + 89);
    __int16 v31 = *(unsigned __int8 *)(v4 + 10);
    if (*(unsigned char *)(v4 + 10)) {
      __int16 v31 = *(_WORD *)(v4 + 8);
    }
    *((_WORD *)v6 + 929) = v31;
    CFMutableDictionaryRef Mutable = (__CFDictionary *)(a3 + 40);
    uint64_t v32 = *(void *)(a3 + 40);
    *(_DWORD *)uint64_t v6 = *(_DWORD *)(a3 + 8);
    *((void *)v6 + 3) = *(void *)(a3 + 12);
    uint64_t v10 = a3 + 20;
    *((_WORD *)v6 + 7) = *(_WORD *)(a3 + 20);
    *((_DWORD *)v6 + 4) = *(_DWORD *)(a3 + 24);
    *((void *)v6 + 228) = v32;
    *((_DWORD *)v6 + 1) = *(unsigned __int8 *)(a3 + 48);
    size_t v33 = *(void *)(a3 + 184);
    v6[1776] = v33;
    *((_DWORD *)v6 + 2) = *(void *)(a3 + 120);
    *((_DWORD *)v6 + 379) = *(void *)(a3 + 160);
    if (v33 >= 0x101) {
      goto LABEL_108;
    }
    long long v8 = (BOOL *)(v3 + 440);
    CFNumberRef v44 = v6 + 1864;
    memcpy(v6 + 1520, *(const void **)(a3 + 192), v33);
    if (!*(void *)(v4 + 16))
    {
      size_t v36 = *(void *)(a3 + 160);
      if (v36 <= 0x5C0)
      {
        memcpy(v6 + 44, *(const void **)(a3 + 168), v36);
        goto LABEL_82;
      }
      goto LABEL_108;
    }
    CMBlockBufferRef theBuffer = 0;
    CMBlockBufferRef blockBufferOut = 0;
    if (CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(void **)(a3 + 168), *(void *)(a3 + 160), (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, *(void *)(a3 + 160), 1u, &blockBufferOut) < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioReceiver_HandleRTPPacket_cold_6();
        }
      }
      goto LABEL_107;
    }
    if ((VCCryptor_Decrypt(*(void *)(v4 + 16), blockBufferOut, &theBuffer) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_109;
        }
      }
      goto LABEL_98;
    }
    RTPProcessDecryptionStatusChange(*(void *)v4, 1);
    dataPointerOut = 0;
    size_t lengthAtOffsetOut = 0;
    if (CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioReceiver_HandleRTPPacket_cold_7();
        }
      }
      goto LABEL_107;
    }
    size_t v34 = lengthAtOffsetOut;
    if (lengthAtOffsetOut >= 0x5C1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v43 = VRTraceErrorLogLevelToCSTR();
        int v41 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          uint64_t v42 = *(void *)(a3 + 160);
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)&uint8_t buf[4] = v43;
          LOWORD(v50[0]) = 2080;
          *(void *)((char *)v50 + 2) = "_VCAudioReceiver_DecryptAndFillAudioPacket";
          HIWORD(v50[2]) = 1024;
          LODWORD(v51) = 1788;
          WORD2(v51) = 2048;
          *(void *)((char *)&v51 + 6) = v42;
          HIWORD(v51) = 2048;
          uint64_t v52 = 1472;
          __int16 v53 = 2048;
          size_t v54 = lengthAtOffsetOut;
          _os_log_error_impl(&dword_1E1EA4000, v41, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d Decrypted payload is smaller than original one: expected at least '%zu', available size '%zu' got '%zu'", buf, 0x3Au);
        }
      }
      goto LABEL_107;
    }
    *((_DWORD *)v6 + 379) = lengthAtOffsetOut;
    memcpy(v6 + 44, dataPointerOut, v34);
    char v35 = 1;
    while (1)
    {
      if (blockBufferOut) {
        CFRelease(blockBufferOut);
      }
      if (theBuffer) {
        CFRelease(theBuffer);
      }
      if (v35)
      {
LABEL_82:
        if (VCJitterBuffer_GetIsRunning(*v8) || !*((_DWORD *)v6 + 1))
        {
          atomic_fetch_add((atomic_uint *volatile)(v3 + 768), *((_DWORD *)v6 + 2));
          atomic_fetch_add((atomic_uint *volatile)(v3 + 820), *((_DWORD *)v6 + 379));
        }
        if (v6 < v44)
        {
          _VCAudioReceiver_DetectStreamReset(v3, (uint64_t)v6);
          _VCAudioReceiver_UpdateLastReceivedTimestamp(v3, *((unsigned int *)v6 + 4));
          *(void *)(v3 + 504) = *((void *)v6 + 228);
          bzero(buf, 0x328uLL);
          _VCAudioReceiver_SetActiveStream(v3, v4, (uint64_t)v6);
          _VCAudioReceiver_SplitPacket(v3, (uint64_t *)v4, (int *)v6, buf);
          _VCAudioReceiver_ValidateAndEnqueuePackets(v3, (unint64_t)buf);
          _VCAudioReceiver_UpdateAudioOverlayStats(v3, buf);
          uint64_t v37 = *(void *)(v3 + 9312);
          if (v37)
          {
            VCAudioIssueDetector_ReportRTPTraffic(v37);
            VCAudioIssueDetector_FlushLogEvents(*(void *)(v3 + 9312));
          }
          uint64_t v38 = *(void *)(v3 + 10368);
          if (!v38) {
            return;
          }
          uint64_t v40 = *(void *)(a3 + 160);
          CFNumberRef v39 = *(void **)(a3 + 168);
          if (v40 || !v39)
          {
            VCAudioDump_LogCompressedAudio(v38, v39, v40, v5, (unsigned __int16 *)v10, (double *)Mutable);
            return;
          }
        }
      }
      else if (v6 < v44)
      {
        VCJitterBuffer_AudioPacketFree(*v8, (int *)v6);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioReceiver_HandleRTPPacket_cold_5();
          }
        }
        return;
      }
LABEL_108:
      __break(0x5519u);
LABEL_109:
      _VCAudioReceiver_HandleRTPPacket_cold_9();
LABEL_98:
      RTPProcessDecryptionStatusChange(*(void *)v4, 0);
      char v35 = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioReceiver_HandleRTPPacket_cold_8();
        }
LABEL_107:
        char v35 = 0;
      }
    }
  }
  if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCAudioReceiver_HandleRTPPacket_cold_4();
    }
  }
}

uint64_t _VCAudioReceiver_ShouldProcessAudioPacket(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned __int16 *a5, unsigned int a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 276) || *(unsigned char *)(a2 + 11)) {
    return 1;
  }
  if (a3 && *(void *)(a1 + 400) != a4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      float v17 = *MEMORY[0x1E4F47A50];
      BOOL v6 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        return v6;
      }
      uint64_t v18 = *(void *)(a1 + 400);
      int v30 = 136316418;
      uint64_t v31 = v16;
      __int16 v32 = 2080;
      size_t v33 = "_VCAudioReceiver_ShouldProcessAudioPacket";
      __int16 v34 = 1024;
      int v35 = 1269;
      __int16 v36 = 2048;
      uint64_t v37 = a1;
      __int16 v38 = 2048;
      *(void *)CFNumberRef v39 = a4;
      *(_WORD *)&v39[8] = 2048;
      uint64_t v40 = v18;
      _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Unexpected idsParticipantID=%llu, expected=%llu", (uint8_t *)&v30, 0x3Au);
    }
    return 0;
  }
  if (!*(unsigned char *)(a2 + 10))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioReceiver_ShouldProcessAudioPacket_cold_1();
      }
    }
    return 0;
  }
  if (!a6) {
    return 0;
  }
  uint64_t v10 = (_WORD *)(a1 + 9132);
  uint64_t v11 = *(unsigned __int16 *)(a1 + 9134);
  int v12 = *(unsigned __int16 *)(a1 + 9132);
  uint64_t v13 = a6;
  int v14 = *a5;
  if (v14 == v12 || v14 == v11)
  {
    BOOL v6 = 1;
  }
  else
  {
    uint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19;
      if (a6 == v19) {
        break;
      }
      int v21 = a5[v19++];
    }
    while (v21 != v12 && v21 != v11);
    BOOL v6 = v20 < a6;
  }
  if (v12 != v11)
  {
    while (1)
    {
      int v23 = *a5++;
      if (v23 == v11) {
        break;
      }
      if (!--v13) {
        return v6;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      uint64_t v24 = VRTraceErrorLogLevelToCSTR();
      int v25 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v26 = (unsigned __int16)*v10;
        int v30 = 136316418;
        uint64_t v31 = v24;
        __int16 v32 = 2080;
        size_t v33 = "_VCAudioReceiver_CompleteStreamSwitch";
        __int16 v34 = 1024;
        int v35 = 1253;
        __int16 v36 = 2048;
        uint64_t v37 = a1;
        __int16 v38 = 1024;
        *(_DWORD *)CFNumberRef v39 = v26;
        *(_WORD *)&v39[4] = 1024;
        *(_DWORD *)&v39[6] = v11;
        _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Switching audio stream: %d -> %d", (uint8_t *)&v30, 0x32u);
      }
    }
    (*(void (**)(void, void, uint64_t))(a1 + 9176))(*(void *)(a1 + 9160), (unsigned __int16)*v10, v11);
    *uint64_t v10 = v11;
    CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v30 = (unsigned __int16)*v10;
    CFNumberRef v29 = CFNumberCreate(v27, kCFNumberIntType, &v30);
    CFDictionaryAddValue(Mutable, @"VCASActiveStreamID", v29);
    reportingAudioStreamEvent();
    CFRelease(v29);
    CFRelease(Mutable);
  }
  return v6;
}

void _VCAudioReceiver_DetectStreamReset(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 427) && (*(unsigned char *)(a1 + 524) & 1) != 0 && (*(unsigned char *)(a1 + 548) & 1) != 0)
  {
    uint64_t v4 = (_OWORD *)(a1 + 512);
    char v5 = (_OWORD *)(a1 + 536);
    CMTime v13 = *(CMTime *)(a1 + 536);
    double Seconds = CMTimeGetSeconds(&v13);
    *(_OWORD *)&v13.CMTimeValue value = *v4;
    v13.epoch = *(void *)(a1 + 528);
    if (Seconds - CMTimeGetSeconds(&v13) <= 3.0)
    {
      *(_DWORD *)(a1 + 560) = 0;
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 560) + 1;
      *(_DWORD *)(a1 + 560) = v7;
      if (v7 >= 3)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v8 = VRTraceErrorLogLevelToCSTR();
          long long v9 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(void *)(a2 + 1824);
            uint64_t v11 = *(void *)(a1 + 536);
            uint64_t v12 = *(void *)(a1 + 512);
            LODWORD(v13.value) = 136316930;
            *(CMTimeValue *)((char *)&v13.value + 4) = v8;
            LOWORD(v13.flags) = 2080;
            *(void *)((char *)&v13.flags + 2) = "_VCAudioReceiver_DetectStreamReset";
            HIWORD(v13.epoch) = 1024;
            int v14 = 1735;
            __int16 v15 = 2048;
            uint64_t v16 = a1;
            __int16 v17 = 2048;
            uint64_t v18 = a1 + 440;
            __int16 v19 = 2048;
            uint64_t v20 = v10;
            __int16 v21 = 1024;
            int v22 = v11;
            __int16 v23 = 1024;
            int v24 = v12;
            _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Detected backwards TS Jump in stream, resetting. AudioReceiver=%p JB=%p time=%f maxReceivedTimestamp=%u audioReceiver->lastReceivedTimestamp=%u", (uint8_t *)&v13, 0x46u);
          }
        }
        *(_DWORD *)(a2 + 4) = 1;
        *(_DWORD *)(a1 + 560) = 0;
        *char v5 = *v4;
        *(void *)(a1 + 552) = *(void *)(a1 + 528);
      }
    }
  }
}

CMTime *_VCAudioReceiver_UpdateLastReceivedTimestamp(uint64_t a1, int64_t value)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (CMTime *)(a1 + 512);
  if (*(unsigned char *)(a1 + 524))
  {
    _VCAudioReceiver_ComputeExtendedTimestamp(a1, value, &v8);
    *uint64_t v3 = v8;
    CMTime time1 = *(CMTime *)(a1 + 536);
    CMTime v6 = *v3;
    BOOL result = CMTimeMaximum(&v8, &time1, &v6);
    *(_OWORD *)(a1 + 536) = *(_OWORD *)&v8.value;
    CMTimeEpoch epoch = v8.epoch;
  }
  else
  {
    BOOL result = CMTimeMake(&v8, value, *(double *)(a1 + 456));
    *uint64_t v3 = v8;
    *(_OWORD *)(a1 + 536) = *(_OWORD *)&v3->value;
    CMTimeEpoch epoch = v3->epoch;
  }
  *(void *)(a1 + 552) = epoch;
  return result;
}

void _VCAudioReceiver_SplitPacket(uint64_t a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  int v6 = a3[6];
  if ((v6 - 107) > 4 || ((1 << (v6 - 107)) & 0x13) == 0)
  {
    if (v6 == 20) {
      _VCAudioReceiver_SplitRedPacket(a1, a2, a3, (uint64_t)a4);
    }
    else {
      AudioPacketArray_Append((uint64_t)a4, (uint64_t)a3);
    }
  }
  else
  {
    _VCAudioReceiver_SplitEVSPacket(a1, a3, (uint64_t)a4);
  }
  if (AudioPacketArray_Last((unint64_t)a4))
  {
    int v8 = *(_DWORD *)(AudioPacketArray_Last((unint64_t)a4) + 16);
    int v9 = v8 - *(_DWORD *)(AudioPacketArray_First(a4) + 16);
    if (v9 != *(_DWORD *)(a1 + 760))
    {
      *(_DWORD *)(a1 + 760) = v9;
      uint64_t v10 = *(void *)(a1 + 440);
      VCJitterBuffer_SetRedAudioDelayInSamples(v10, v9);
    }
  }
}

unint64_t _VCAudioReceiver_ValidateAndEnqueuePackets(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  unint64_t result = AudioPacketArray_Next(a2);
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = a1 + 9000;
  uint64_t v140 = a1 + 744;
  __int16 v132 = (void *)(a1 + 9104);
  unint64_t v143 = a1 + 9328;
  unint64_t v138 = a1 + 9840;
  unint64_t v134 = a1 + 8;
  double v135 = (int *)(a1 + 9000);
  unint64_t v133 = v2;
  do
  {
    unsigned int v139 = (int **)(v4 + 1840);
    if (!VCAudioDecoderList_GetDecoderSettings(v140, *(_DWORD *)(v4 + 24), *(_DWORD *)(v4 + 28), (void *)(v4 + 1840)))
    {
      VCJitterBuffer_AudioPacketFree(*(void *)(a1 + 440), (int *)v4);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        uint64_t v10 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v11 = *(_DWORD *)(v4 + 24);
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VCAudioReceiver_ValidateAndEnqueuePackets";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v170) = 1716;
          WORD2(v170) = 1024;
          *(_DWORD *)((char *)&v170 + 6) = v11;
          _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d ERROR unknown payloadType[%d]", buf, 0x22u);
        }
      }
      goto LABEL_168;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      unsigned int v7 = *MEMORY[0x1E4F47A50];
      int v8 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315906;
          *(void *)&uint8_t buf[4] = v6;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VCAudioReceiver_EnqueuePacket";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v170) = 1626;
          WORD2(v170) = 2048;
          *(void *)((char *)&v170 + 6) = a1;
          _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d [%p]", buf, 0x26u);
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CMTime buf = 136315906;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCAudioReceiver_EnqueuePacket";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v170) = 1626;
        WORD2(v170) = 2048;
        *(void *)((char *)&v170 + 6) = a1;
        _os_log_debug_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d [%p]", buf, 0x26u);
      }
    }
    if (!VCPayloadUtils_supportsInternalDTXForPayload(**v139)
      || !*(void *)(a1 + 832)
      || !*(void *)(a1 + 840))
    {
      goto LABEL_49;
    }
    uint64_t v188 = 0;
    long long v186 = 0u;
    long long v187 = 0u;
    long long v184 = 0u;
    long long v185 = 0u;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    long long v176 = 0u;
    long long v177 = 0u;
    long long v174 = 0u;
    long long v175 = 0u;
    long long v172 = 0u;
    long long v173 = 0u;
    memset(v171, 0, sizeof(v171));
    *(_OWORD *)&buf[8] = 0u;
    long long v170 = 0u;
    *(void *)CMTime buf = v4 + 44;
    *(_DWORD *)&buf[8] = *(_DWORD *)(v4 + 1516);
    BOOL SpeechCodecBundleData = VCAudioDecoderList_GetSpeechCodecBundleData(v140, *(_DWORD *)(v4 + 24), *(_DWORD *)(v4 + 28), (uint64_t)buf);
    uint64_t v13 = VCPayloadUtils_DefaultAudioCodecBandwidthCodecForSampleRate(*(_DWORD *)(*(void *)(v4 + 1840) + 16));
    uint64_t v14 = VCPayloadUtils_AudioCodecBandwidthForVCAudioCodecBandwidth(v13);
    if (SpeechCodecBundleData)
    {
      uint64_t v15 = **v139;
      if (buf[12])
      {
        unsigned int v16 = v15 - 97;
        unsigned int v17 = *(_DWORD *)&buf[16];
        unsigned int v18 = v170;
        unsigned int v19 = DWORD1(v170);
        if (v16 >= 2) {
          uint64_t v14 = *(unsigned int *)&buf[20];
        }
        else {
          uint64_t v14 = v14;
        }
      }
      else
      {
        unsigned int v19 = 0;
        if (!*(unsigned char *)(a1 + 299) || (v15 - 97) > 1)
        {
          unsigned int v18 = 0;
          unsigned int v17 = 0;
          goto LABEL_29;
        }
        if (v15 == 97) {
          uint64_t v21 = 7;
        }
        else {
          uint64_t v21 = 8;
        }
        unsigned int v17 = VCPayloadUtils_BitrateForAudioCodecRateMode(v15, v21);
        unsigned int v19 = 0;
        unsigned int v18 = 0;
      }
      *(_WORD *)(v5 + 100) = v17;
LABEL_29:
      if (v17 >= *(unsigned __int16 *)(v5 + 98)) {
        unsigned int v22 = *(unsigned __int16 *)(v5 + 98);
      }
      else {
        unsigned int v22 = v17;
      }
      if (*(_WORD *)(v5 + 98)) {
        int v20 = v22;
      }
      else {
        int v20 = v17;
      }
      goto LABEL_35;
    }
    unsigned int v19 = 0;
    unsigned int v18 = 0;
    int v20 = 0;
LABEL_35:
    if (*(unsigned char *)(v5 + 96))
    {
      int v20 = *(unsigned __int16 *)(v5 + 98);
      *(unsigned char *)(v5 + 96) = 0;
    }
    if (v20)
    {
      LODWORD(v147) = *(_DWORD *)(v4 + 24);
      uint64_t v23 = v147;
      uint64_t v24 = VCPayloadUtils_AudioCodecRateModeForBitrate(**(_DWORD **)(v4 + 1840), v20);
      DWORD1(v147) = v24;
      int v25 = VCPayloadUtils_AudioCodecBandwidthForBandwidth(v14);
      DWORD2(v147) = v25;
      int v26 = VCPayloadUtils_BitrateForAudioCodecRateMode(v23, v24);
      HIDWORD(v147) = v26;
      unint64_t v148 = __PAIR64__(v19, v18);
      BOOL v27 = (void)v147 == *v132 && *((void *)&v147 + 1) == *(void *)(a1 + 9112);
      if (!v27 || __PAIR64__(v19, v18) != *(void *)(a1 + 9120))
      {
        int v29 = v26;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v30 = VRTraceErrorLogLevelToCSTR();
          uint64_t v31 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v32 = *(_DWORD *)(v4 + 16);
            int v33 = *(unsigned __int16 *)(v4 + 14);
            *(_DWORD *)v149 = 136317954;
            *(void *)&v149[4] = v30;
            *(_WORD *)&v149[12] = 2080;
            *(void *)&v149[14] = "_VCAudioReceiver_ProcessCMR";
            *(_WORD *)&v149[22] = 1024;
            int v150 = 939;
            __int16 v151 = 2048;
            uint64_t v152 = a1;
            __int16 v153 = 1024;
            int v154 = v24;
            __int16 v155 = 1024;
            int v156 = v29;
            __int16 v157 = 1024;
            int v158 = v25;
            __int16 v159 = 1024;
            int v160 = v23;
            __int16 v161 = 1024;
            int v162 = v32;
            __int16 v163 = 1024;
            int v164 = v33;
            __int16 v165 = 1024;
            unsigned int v166 = v18;
            __int16 v167 = 1024;
            unsigned int v168 = v19;
            _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d VCAudioReceiver[%p] Codec rate mode change requested: mode=%u bitrate=%d bandwidth=%d payload=%u rtpTimestamp=%u seqNum=%u evs_ch_rf offset=%d indicator=%d", v149, 0x56u);
          }
        }
        __int16 v34 = *(void (**)(uint64_t, unsigned char *))(a1 + 832);
        uint64_t v35 = *(void *)(a1 + 840);
        *(_OWORD *)v149 = v147;
        *(void *)&v149[16] = v148;
        v34(v35, v149);
        *(_OWORD *)__int16 v132 = v147;
        *(void *)(a1 + 9120) = v148;
      }
    }
LABEL_49:
    __int16 v36 = (unsigned __int8 *)(v4 + 44);
    unsigned int v37 = *(_DWORD *)(v4 + 1516);
    int v38 = *(_DWORD *)v4;
    if (*(_DWORD *)(*(void *)(v4 + 1840) + 32) == 2)
    {
      unsigned int v39 = (bswap32(*(unsigned __int16 *)v36) >> 19) + 2;
      if (v37 < v39)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          goto LABEL_137;
        }
        uint64_t v40 = VRTraceErrorLogLevelToCSTR();
        uint64_t v41 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_137;
        }
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v40;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCAudioReceiver_ParsePacket";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v170) = 1359;
        WORD2(v170) = 1024;
        *(_DWORD *)((char *)&v170 + 6) = v39;
        WORD5(v170) = 1024;
        HIDWORD(v170) = v37;
        uint64_t v42 = v41;
        uint64_t v43 = "VCAudioReceiver [%s] %s:%d Audio buffer corrupted. Access unit length=%d, packet length=%d";
        goto LABEL_130;
      }
      int v137 = (unsigned __int16 *)(v4 + 46);
      CFNumberRef v44 = &v36[v39];
      v37 -= v39;
    }
    else
    {
      int v137 = (unsigned __int16 *)(v4 + 44);
      CFNumberRef v44 = (unsigned __int8 *)(v4 + 44);
    }
    if ((int)v37 < 1) {
      goto LABEL_137;
    }
    int v45 = 0;
    unint64_t v146 = v4 + 1516;
    unint64_t v142 = v4 + 1784;
    __int16 v136 = (unint64_t *)(v4 + 1816);
    while (1)
    {
      uint64_t v46 = *(int **)(v4 + 1840);
      unsigned int v47 = v46[5];
      if (!v47) {
        unsigned int v47 = v37;
      }
      unsigned int v144 = v47;
      int v48 = *(_DWORD *)(v4 + 16);
      int v49 = *v46;
      if ((*v46 - 101) > 0x12 || ((1 << (*v46 - 101)) & 0x418B9) == 0) {
        break;
      }
      int v51 = v46[8];
      if (v51 == 1)
      {
        if ((unint64_t)v44 >= v146 || v44 < v36) {
          goto LABEL_176;
        }
        CFNumberRef v56 = v44 + 1;
        unsigned int v55 = *v44;
        int v57 = -1;
        if (v37 >= 0x100 && v55 <= 1)
        {
          if ((unint64_t)v56 >= v146 || v56 < v36) {
            goto LABEL_176;
          }
          v55 += 2 * v44[1] + 256;
          CFNumberRef v56 = v44 + 2;
          int v57 = -2;
        }
        v37 += v57;
        if (v55 >= v37) {
          unsigned int v54 = v37;
        }
        else {
          unsigned int v54 = v55;
        }
        CFNumberRef v44 = v56;
      }
      else
      {
        if (v51 == 2)
        {
          if ((unint64_t)v137 >= v146 || v137 < (unsigned __int16 *)v36) {
            goto LABEL_176;
          }
          unsigned int v52 = *v137++;
          signed int v53 = bswap32(v52) >> 19;
          goto LABEL_100;
        }
LABEL_72:
        unsigned int v54 = v37;
      }
LABEL_102:
      *(_DWORD *)v149 = 0;
      LOBYTE(v147) = 0;
      if (v44 && ((unint64_t)v44 >= v146 || v44 < v36)) {
        goto LABEL_176;
      }
      int IsDTXFrame = VCAudioDecoderList_IsDTXFrame(v140, v49, v46[1], (uint64_t)v44, v54, v149, &v147);
      int v66 = *(_DWORD *)v149;
      if (*(_DWORD *)v149 >= 0x961u) {
        *(_DWORD *)(a1 + 10360) = *(_DWORD *)v149;
      }
      BOOL v67 = v66 == 0;
      uint64_t v68 = *(unsigned int *)(a1 + 9324);
      int v69 = *(_DWORD *)(v4 + 24);
      if (v68 != v69) {
        goto LABEL_112;
      }
      CFNumberRef v70 = (_DWORD *)(v143 + 4 * v68);
      if ((unint64_t)v70 >= v138 || (unint64_t)v70 < v143) {
        goto LABEL_176;
      }
      if (*v70)
      {
        uint64_t v71 = a1;
        int v72 = *(_DWORD *)(a1 + 10352) + 1;
      }
      else
      {
LABEL_112:
        long long v73 = (_DWORD *)(v143 + 4 * v68);
        if ((unint64_t)v73 >= v138 || (unint64_t)v73 < v143) {
          goto LABEL_176;
        }
        uint64_t v71 = a1;
        *v73 += *(_DWORD *)(a1 + 10352);
        *(_DWORD *)(a1 + 9324) = v69;
        int v72 = 1;
      }
      *(_DWORD *)(v71 + 10352) = v72;
      *(_DWORD *)(v4 + 40) |= IsDTXFrame;
      if (v45 == 4)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v87 = VRTraceErrorLogLevelToCSTR();
          float v88 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 136315650;
            *(void *)&uint8_t buf[4] = v87;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCAudioReceiver_ParsePacket";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v170) = 1491;
            uint64_t v42 = v88;
            uint64_t v43 = "VCAudioReceiver [%s] %s:%d Too many frames in audio packet, possible corruption";
            uint32_t v86 = 28;
            goto LABEL_131;
          }
        }
        goto LABEL_137;
      }
      if (v54 > 0x465 || *(unsigned __int8 *)(v4 + 1776) >= 0x11u)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          goto LABEL_137;
        }
        uint64_t v83 = VRTraceErrorLogLevelToCSTR();
        unsigned int v84 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          goto LABEL_137;
        }
        int v85 = *(unsigned __int8 *)(v4 + 1776);
        *(_DWORD *)CMTime buf = 136316162;
        *(void *)&uint8_t buf[4] = v83;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCAudioReceiver_ParsePacket";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v170) = 1496;
        WORD2(v170) = 1024;
        *(_DWORD *)((char *)&v170 + 6) = v54;
        WORD5(v170) = 1024;
        HIDWORD(v170) = v85;
        uint64_t v42 = v84;
        uint64_t v43 = "VCAudioReceiver [%s] %s:%d Unable to fit audio data into the audioFrame buffer. Data size: %d, padding len: %u";
        goto LABEL_130;
      }
      signed int v74 = v54;
      signed int v75 = v37;
      BOOL v141 = v67;
      int v76 = v44;
      int v77 = IsDTXFrame;
      unsigned int v78 = VCJitterBuffer_AudioFrameAlloc(*(void *)(v71 + 440));
      *(_DWORD *)unsigned int v78 = 0;
      *((_DWORD *)v78 + 1) = v38;
      *((_DWORD *)v78 + 294) = v77;
      v78[152] = *(void *)(v4 + 1840);
      *((_WORD *)v78 + 5) = *(_WORD *)(v4 + 14);
      *((unsigned char *)v78 + 8) = *(unsigned char *)(v4 + 12);
      *((_DWORD *)v78 + 3) = v48 + v144 * v45;
      *((_DWORD *)v78 + 286) = v74;
      if (v146 < (unint64_t)v76) {
        goto LABEL_176;
      }
      if (v36 > v76) {
        goto LABEL_176;
      }
      if (v146 - (unint64_t)v76 < v74) {
        goto LABEL_176;
      }
      unint64_t v79 = (unint64_t)v78;
      memcpy(v78 + 2, v76, v74);
      size_t v80 = *(unsigned __int8 *)(v4 + 1776);
      if (v80 > 0x10) {
        goto LABEL_176;
      }
      memcpy((void *)(v79 + 1152), (const void *)(v4 + 1520), v80);
      *(unsigned char *)(v79 + 1168) = *(unsigned char *)(v4 + 1776);
      *(_DWORD *)(v79 + 1172) = v144;
      *(unsigned char *)(v79 + 1224) = *(unsigned char *)(v4 + 1848);
      *(_DWORD *)(v79 + 1228) = *(_DWORD *)(v4 + 1852);
      *(unsigned char *)(v79 + 1232) = *(unsigned char *)(v4 + 1856);
      *(_WORD *)(v79 + 1234) = *(_WORD *)(v4 + 1858);
      *(_DWORD *)(v79 + 1196) = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v79 + 1256) = *(_DWORD *)v149;
      *(_DWORD *)(v79 + 1260) = *(_DWORD *)(v4 + 20);
      *(unsigned char *)(v79 + 1269) = v141;
      *(unsigned char *)(v79 + 1270) = v147;
      if (v79 >= v79 + 1272) {
        goto LABEL_176;
      }
      uint64_t v81 = *(int *)v136;
      *(_DWORD *)__int16 v136 = v81 + 1;
      int v82 = (unint64_t *)(v142 + 8 * v81);
      if (v82 >= v136 || (unint64_t)v82 < v142) {
        goto LABEL_176;
      }
      int v38 = 0;
      unint64_t *v82 = v79;
      CFNumberRef v44 = &v76[v74];
      ++v45;
      unsigned int v37 = v75 - v74;
      if (v75 <= v74) {
        goto LABEL_137;
      }
    }
    signed int v53 = v47;
    unsigned int v54 = v37;
    switch(v49)
    {
      case 0:
      case 8:
        break;
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
        goto LABEL_102;
      case 3:
        if (v45)
        {
          if (v37 <= 0x20)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
              goto LABEL_137;
            }
            uint64_t v122 = VRTraceErrorLogLevelToCSTR();
            double v123 = *MEMORY[0x1E4F47A50];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              goto LABEL_137;
            }
            *(_DWORD *)CMTime buf = 136316162;
            *(void *)&uint8_t buf[4] = v122;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCAudioReceiver_ParsePacket";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v170) = 1395;
            WORD2(v170) = 1024;
            *(_DWORD *)((char *)&v170 + 6) = v37;
            WORD5(v170) = 1024;
            HIDWORD(v170) = 33;
            uint64_t v42 = v123;
            uint64_t v43 = "VCAudioReceiver [%s] %s:%d GSM Audio buffer corrupted. Packet too short (%d < %d)";
LABEL_130:
            uint32_t v86 = 40;
            goto LABEL_131;
          }
          uint64_t v58 = 0;
          ++v37;
          do
          {
            unsigned int v59 = &v44[v58];
            CFNumberRef v60 = &v44[v58 - 1];
            if ((unint64_t)v60 >= v146 || v60 < v36 || (unint64_t)v59 >= v146 || v59 < v36) {
              goto LABEL_176;
            }
            ++v58;
            HIDWORD(v64) = *v59;
            LODWORD(v64) = *v60 << 24;
            *CFNumberRef v60 = v64 >> 28;
          }
          while (v58 != 33);
          signed int v53 = 33;
          --v44;
        }
        else
        {
          signed int v53 = 33;
        }
        break;
      case 9:
        signed int v53 = 60;
        break;
      default:
        goto LABEL_72;
    }
LABEL_100:
    if (v53 <= (int)v37)
    {
      uint64_t v46 = *v139;
      int v49 = **v139;
      unsigned int v54 = v53;
      goto LABEL_102;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v89 = VRTraceErrorLogLevelToCSTR();
      float v90 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v131 = **v139;
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)&uint8_t buf[4] = v89;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCAudioReceiver_ParsePacket";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v170) = 1470;
        WORD2(v170) = 1024;
        *(_DWORD *)((char *)&v170 + 6) = v37;
        WORD5(v170) = 1024;
        HIDWORD(v170) = v53;
        LOWORD(v171[0]) = 1024;
        *(_DWORD *)((char *)v171 + 2) = v131;
        uint64_t v42 = v90;
        uint64_t v43 = "VCAudioReceiver [%s] %s:%d Audio buffer corrupted. Packet too short (%d < %d), payload=%d";
        uint32_t v86 = 46;
LABEL_131:
        _os_log_error_impl(&dword_1E1EA4000, v42, OS_LOG_TYPE_ERROR, v43, buf, v86);
      }
    }
LABEL_137:
    uint64_t v5 = a1 + 9000;
    if (!*(unsigned char *)(v4 + 12))
    {
      unsigned __int16 v91 = *(_WORD *)(v4 + 14);
      unsigned int v92 = *(unsigned __int16 *)v135;
      if (*(_WORD *)v135)
      {
        uint64_t v93 = *(unsigned __int16 *)(a1 + 9002);
        unsigned __int16 v94 = v93 - v91;
        unint64_t v95 = a1 + 4200;
        if ((unsigned __int16)(v93 - v91) < 0x7FFFu)
        {
          if (v92 < v94)
          {
            unsigned int v103 = v92 + v94;
            if (v103 >= 0x12C) {
              LOWORD(v103) = 300;
            }
            *(_WORD *)double v135 = v103;
          }
        }
        else
        {
          int v96 = (__int16)(v91 - v93);
          if (v96 >= 2)
          {
            int v97 = (unsigned __int16)(v91 - v93) - 1;
            uint64_t v98 = a1 + 4229 + 16 * v93;
            unint64_t v99 = v93 + 1;
            uint64_t v100 = a1 + 4216 + 16 * v93;
            while (v100 - 4800 * (v99 / 0x12C) < (unint64_t)v135 && v100 - 4800 * (v99 / 0x12C) >= a1 + 4200)
            {
              *(unsigned char *)(v98 - 4800 * (v99 / 0x12C)) = 0;
              v98 += 16;
              ++v99;
              v100 += 16;
              if (!--v97) {
                goto LABEL_148;
              }
            }
LABEL_176:
            __break(0x5519u);
          }
LABEL_148:
          int v102 = v96 + v92;
          if (v102 >= 300) {
            LOWORD(v102) = 300;
          }
          *(_WORD *)double v135 = v102;
          *(_WORD *)(a1 + 9002) = v91;
        }
      }
      else
      {
        *(_WORD *)double v135 = 1;
        *(_WORD *)(a1 + 9002) = v91;
        unint64_t v95 = a1 + 4200;
      }
      __int16 v104 = (int *)(v95 + 16 * (v91 % 0x12Cu));
      if (v104 + 4 > v135 || v95 > (unint64_t)v104) {
        goto LABEL_176;
      }
      unint64_t v105 = v95 + 16 * (v91 % 0x12Cu);
      *(_WORD *)(v105 + 4) = v91;
      __int16 v106 = (unsigned __int16 *)(v105 + 4);
      *((_DWORD *)v106 + 1) = *(_DWORD *)(v4 + 16);
      double v107 = (int *)(v106 + 2);
      *((unsigned char *)v106 + 8) = *(_DWORD *)(v4 + 40) != 0;
      __int16 v108 = (unsigned __int8 *)(v106 + 4);
      *__int16 v104 = *(_DWORD *)(v4 + 1816);
      *((unsigned char *)v106 + 9) = 1;
      double v109 = (unsigned __int8 *)v106 + 9;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v110 = VRTraceErrorLogLevelToCSTR();
        double v111 = *MEMORY[0x1E4F47A50];
        __int16 v112 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
          {
            int v113 = *v106;
            int v114 = *v107;
            int v115 = *v108;
            int v116 = *v104;
            int v117 = *v109;
            int v118 = *(unsigned __int16 *)(a1 + 9002);
            int v119 = *(unsigned __int16 *)v135;
            *(_DWORD *)CMTime buf = 136317442;
            *(void *)&uint8_t buf[4] = v110;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCAudioReceiver_UpdatePacketHistory";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v170) = 1611;
            WORD2(v170) = 1024;
            *(_DWORD *)((char *)&v170 + 6) = v113;
            WORD5(v170) = 1024;
            HIDWORD(v170) = v114;
            LOWORD(v171[0]) = 1024;
            *(_DWORD *)((char *)v171 + 2) = v115;
            HIWORD(v171[1]) = 1024;
            v171[2] = v116;
            LOWORD(v171[3]) = 1024;
            *(_DWORD *)((char *)&v171[3] + 2) = v117;
            HIWORD(v171[4]) = 1024;
            v171[5] = v118;
            LOWORD(v171[6]) = 1024;
            *(_DWORD *)((char *)&v171[6] + 2) = v119;
            _os_log_impl(&dword_1E1EA4000, v111, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d New burst loss entry: SQ: %u, timestamp: %u, isDTX: %d, duration: %u, isValid: %d, AR highest received SQ: %u, AR packet entry count: %u", buf, 0x46u);
          }
        }
        else if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
        {
          int v124 = *v106;
          int v125 = *v107;
          int v126 = *v108;
          int v127 = *v104;
          int v128 = *v109;
          int v129 = *(unsigned __int16 *)(a1 + 9002);
          int v130 = *(unsigned __int16 *)v135;
          *(_DWORD *)CMTime buf = 136317442;
          *(void *)&uint8_t buf[4] = v110;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VCAudioReceiver_UpdatePacketHistory";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v170) = 1611;
          WORD2(v170) = 1024;
          *(_DWORD *)((char *)&v170 + 6) = v124;
          WORD5(v170) = 1024;
          HIDWORD(v170) = v125;
          LOWORD(v171[0]) = 1024;
          *(_DWORD *)((char *)v171 + 2) = v126;
          HIWORD(v171[1]) = 1024;
          v171[2] = v127;
          LOWORD(v171[3]) = 1024;
          *(_DWORD *)((char *)&v171[3] + 2) = v128;
          HIWORD(v171[4]) = 1024;
          v171[5] = v129;
          LOWORD(v171[6]) = 1024;
          *(_DWORD *)((char *)&v171[6] + 2) = v130;
          _os_log_debug_impl(&dword_1E1EA4000, v111, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d New burst loss entry: SQ: %u, timestamp: %u, isDTX: %d, duration: %u, isValid: %d, AR highest received SQ: %u, AR packet entry count: %u", buf, 0x46u);
        }
      }
    }
    VCJitterBuffer_EnqueuePacket(*(void *)(a1 + 440), v4);
    if (*(unsigned char *)(a1 + 9128))
    {
      unint64_t v120 = v134 + 56 * *(unsigned __int16 *)(a1 + 9130);
      if (v120 >= a1 + 232 || v120 < v134) {
        goto LABEL_176;
      }
    }
    float OWRD = VCJitterBuffer_GetOWRD(*(void *)(a1 + 440));
    RTPSetOWRD(OWRD);
    unint64_t v2 = v133;
LABEL_168:
    unint64_t result = AudioPacketArray_Next(v2);
    uint64_t v4 = result;
  }
  while (result);
  return result;
}

uint64_t _VCAudioReceiver_UpdateAudioOverlayStats(uint64_t result, _DWORD *a2)
{
  if (!*(void *)(result + 10432)) {
    return result;
  }
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(result + 4196);
  float v4 = (float)*(unsigned int *)(result + 9136);
  int v5 = *(_DWORD *)(result + 760);
  int v6 = *(_DWORD *)(result + 9296);
  float v7 = *(double *)(result + 9280);
  int v8 = *(_DWORD *)(result + 4192);
  uint64_t v9 = AudioPacketArray_First(a2);
  if (!v9)
  {
    LODWORD(v11) = 0;
LABEL_8:
    int v12 = 0;
    LODWORD(v10) = 0;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v9 + 1840);
  if (!v10)
  {
    LODWORD(v11) = 0;
    int v12 = 0;
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11) {
    goto LABEL_8;
  }
  int v12 = (int)*(double *)v11;
  LODWORD(v11) = *(_DWORD *)(v11 + 8);
  LODWORD(v10) = *(_DWORD *)v10;
LABEL_10:
  uint64_t v13 = *(void *)(v2 + 10432);
  uint64_t v14 = *(void *)(v13 + 40);
  *(void *)(v14 + 8) = 0;
  *(_DWORD *)(v14 + 16) = 0;
  *(_DWORD *)(v14 + 20) = v11;
  *(_DWORD *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 28) = v3;
  *(_DWORD *)(v14 + 32) = 0;
  *(_DWORD *)(v14 + 36) = v12;
  *(float *)(v14 + 40) = v4;
  *(_DWORD *)(v14 + 44) = v5;
  *(_DWORD *)(v14 + 48) = v6;
  *(float *)(v14 + 52) = v7;
  *(_DWORD *)(v14 + 56) = v8;
  *(_DWORD *)(v14 + 60) = v10;

  return VCOverlaySource_Write(v13);
}

void _VCAudioReceiver_ProcessAudioRTCPInternal(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(unsigned __int8 *)(a3 + 1620);
  if (v3 >= 0xD) {
    goto LABEL_50;
  }
  uint64_t v5 = a1;
  if (_VCAudioReceiver_ShouldProcessAudioPacket(a1, (uint64_t)a2, *(unsigned __int8 *)(a3 + 1621), *(void *)(a3 + 1624), (unsigned __int16 *)(a3 + 1596), v3))
  {
    kdebug_trace();
    if (*(unsigned char *)(a3 + 8))
    {
      char v6 = 0;
      unint64_t v7 = a3 + 16;
      unint64_t v8 = a3 + 96;
      uint64_t v42 = v5;
      while (1)
      {
        uint64_t v9 = (unsigned __int16 **)(v7 + 8 * v6);
        if ((unint64_t)v9 >= v8 || (unint64_t)v9 < v7) {
          break;
        }
        uint64_t v11 = *v9;
        int v12 = *((unsigned __int8 *)*v9 + 1);
        if ((v12 - 200) >= 2)
        {
          if (v12 == 246)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v24 = VRTraceErrorLogLevelToCSTR();
              int v25 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CMTime buf = 136315906;
                uint64_t v46 = v24;
                __int16 v47 = 2080;
                int v48 = "_VCAudioReceiver_ProcessAudioRTCPInternal";
                __int16 v49 = 1024;
                int v50 = 2035;
                __int16 v51 = 2048;
                uint64_t v52 = v5;
                _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Received RTCP Custom SR", buf, 0x26u);
              }
            }
            int v26 = *(void (**)(uint64_t, void, __n128))(v5 + 9168);
            uint64_t v27 = *(void *)(v5 + 9160);
            v28.n128_f64[0] = NTPToMicro(*((unsigned int *)v11 + 5) | ((unint64_t)*((unsigned int *)v11 + 4) << 32));
            v26(v27, *((unsigned int *)v11 + 6), v28);
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v29 = VRTraceErrorLogLevelToCSTR();
            uint64_t v30 = *MEMORY[0x1E4F47A50];
            uint64_t v31 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                int v32 = *((unsigned __int8 *)v11 + 1);
                *(_DWORD *)CMTime buf = 136316162;
                uint64_t v46 = v29;
                __int16 v47 = 2080;
                int v48 = "_VCAudioReceiver_ProcessAudioRTCPInternal";
                __int16 v49 = 1024;
                int v50 = 2045;
                __int16 v51 = 2048;
                uint64_t v52 = v5;
                __int16 v53 = 1024;
                int v54 = v32;
                _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Received unknown RTCP packetType=%u", buf, 0x2Cu);
              }
            }
            else if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              int v39 = *((unsigned __int8 *)v11 + 1);
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v46 = v29;
              __int16 v47 = 2080;
              int v48 = "_VCAudioReceiver_ProcessAudioRTCPInternal";
              __int16 v49 = 1024;
              int v50 = 2045;
              __int16 v51 = 2048;
              uint64_t v52 = v5;
              __int16 v53 = 1024;
              int v54 = v39;
              _os_log_debug_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Received unknown RTCP packetType=%u", buf, 0x2Cu);
            }
          }
        }
        else
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v13 = VRTraceErrorLogLevelToCSTR();
            uint64_t v14 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              int v15 = *((unsigned __int8 *)v11 + 1);
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v46 = v13;
              __int16 v47 = 2080;
              int v48 = "_VCAudioReceiver_ProcessAudioRTCPInternal";
              __int16 v49 = 1024;
              int v50 = 2030;
              __int16 v51 = 2048;
              uint64_t v52 = v5;
              __int16 v53 = 1024;
              int v54 = v15;
              _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Received RTCP packetType=%u [200=SR, 201=RR]", buf, 0x2Cu);
            }
          }
          if (v11 >= v11 + 518) {
            break;
          }
          unsigned int v16 = *v11;
          unsigned int v17 = v16 >> 8;
          if ((v16 >> 8) - 202 >= 0xFFFFFFFE)
          {
            if (v17 == 200) {
              unsigned int v18 = v11 + 14;
            }
            else {
              unsigned int v18 = v11 + 4;
            }
            unsigned int v19 = v16 & 0x1F;
            if (v19)
            {
              unint64_t v20 = 0;
              uint64_t v21 = *a2;
              unint64_t v41 = *(void *)a3;
              unint64_t v22 = (unint64_t)&v18[12 * v19];
              unint64_t v23 = (unint64_t)v18;
              while (1)
              {
                int v44 = 0;
                if ((RTPGetLocalSSRC(v21, &v44) & 0x80000000) != 0) {
                  break;
                }
                if (v23 >= v22 || v23 < (unint64_t)v18) {
                  goto LABEL_50;
                }
                if (*(_DWORD *)v23 == v44)
                {
                  int v35 = RTCPComputeRoundTripTimeMiddle32(v23, v41);
                  RTPUpdateWRMInfo(v21, v35, *(_DWORD *)(v23 + 12), *(unsigned __int8 *)(v23 + 4));
                  goto LABEL_40;
                }
                ++v20;
                v23 += 24;
                if (v20 >= (*v11 & 0x1Fu)) {
                  goto LABEL_40;
                }
              }
              if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
              {
                uint64_t v33 = VRTraceErrorLogLevelToCSTR();
                __int16 v34 = *MEMORY[0x1E4F47A50];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)CMTime buf = 136315650;
                  uint64_t v46 = v33;
                  __int16 v47 = 2080;
                  int v48 = "_VCAudioReceiver_ProcessAudioRTCPPacketInternal";
                  __int16 v49 = 1024;
                  int v50 = 2001;
                  _os_log_impl(&dword_1E1EA4000, v34, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Could not get the local SSRC", buf, 0x1Cu);
                }
              }
            }
LABEL_40:
            unint64_t v8 = a3 + 96;
            uint64_t v5 = v42;
            if (v17 == 200)
            {
              __int16 v36 = *(void (**)(uint64_t, void, __n128))(v42 + 9168);
              uint64_t v37 = *(void *)(v42 + 9160);
              v38.n128_f64[0] = NTPToMicro(*((unsigned int *)v11 + 3) | ((unint64_t)*((unsigned int *)v11 + 2) << 32));
              v36(v37, *((unsigned int *)v11 + 4), v38);
            }
          }
        }
        if (*(unsigned __int8 *)(a3 + 8) <= ++v6) {
          goto LABEL_47;
        }
      }
LABEL_50:
      __break(0x5519u);
    }
LABEL_47:
    (*(void (**)(void, uint64_t))(v5 + 9184))(*(void *)(v5 + 9160), a3);
    uint64_t v40 = *(void *)(v5 + 9312);
    if (v40) {
      VCAudioIssueDetector_ReportRTCPTraffic(v40);
    }
  }
}

void *JitterPreloadQueue_AudioFrameAlloc(uint64_t a1)
{
  if (!a1)
  {
LABEL_7:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        JitterPreloadQueue_AudioFrameAlloc_cold_1();
      }
    }
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 12016);
  if (!v2) {
    return 0;
  }
  unint64_t result = VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 12016));
  if (result)
  {
    unint64_t v4 = (unint64_t)result + *(void *)(v2 + 16);
    if ((unint64_t)(result + 159) > v4
      || (result[150] = JitterPreloadQueue_AudioFrameFree, result[151] = a1, (unint64_t)result >= v4))
    {
      __break(0x5519u);
      goto LABEL_7;
    }
  }
  return result;
}

void JitterPreloadQueue_AudioFrameFree(uint64_t a1, void *a2)
{
  if (a1) {
    VCMemoryPool_Free(*(OSQueueHead **)(a1 + 12016), a2);
  }
}

char *JitterPreloadQueue_AudioPacketAlloc(uint64_t a1)
{
  if (!a1)
  {
LABEL_9:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        JitterPreloadQueue_AudioPacketAlloc_cold_1();
      }
    }
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 12008);
  if (!v1) {
    return 0;
  }
  unint64_t result = (char *)VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 12008));
  if (result) {
    BOOL v3 = result >= &result[*(void *)(v1 + 16)];
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    __break(0x5519u);
    goto LABEL_9;
  }
  return result;
}

void JitterPreloadQueue_AudioPacketFree(uint64_t a1, void *a2)
{
  if (a1) {
    VCMemoryPool_Free(*(OSQueueHead **)(a1 + 12008), a2);
  }
}

_DWORD *JitterPreloadQueue_Create()
{
  id v0 = malloc_type_calloc(1uLL, 0x2EF8uLL, 0x10200400647CBF9uLL);
  if (!v0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        JitterPreloadQueue_Create_cold_1();
      }
    }
    return 0;
  }
  uint64_t v1 = v0;
  uint64_t v2 = VCMemoryPool_Create(0x748uLL);
  *((void *)v1 + 1501) = v2;
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        JitterPreloadQueue_Create_cold_2();
      }
    }
    goto LABEL_15;
  }
  BOOL v3 = VCMemoryPool_Create(0x4F8uLL);
  *((void *)v1 + 1502) = v3;
  if (!v3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        JitterPreloadQueue_Create_cold_3();
      }
    }
    VCMemoryPool_Destroy(*((OSQueueHead **)v1 + 1501));
LABEL_15:
    free(v1);
    return 0;
  }
  _DWORD *v1 = 0;
  v1[1] = 0;
  return v1;
}

void JitterPreloadQueue_Destroy(char *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 != *((_DWORD *)a1 + 1))
    {
      BOOL v3 = (unint64_t *)(a1 + 8);
      unint64_t v4 = (unint64_t *)(a1 + 12008);
      while (1)
      {
        uint64_t v5 = &v3[v2];
        if (v5 >= v4 || v5 < v3) {
          break;
        }
        unint64_t v7 = *v5;
        if (*v5)
        {
          if (*(int *)(v7 + 1816) >= 5)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v8 = VRTraceErrorLogLevelToCSTR();
              uint64_t v9 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)CMTime buf = 136315650;
                uint64_t v11 = v8;
                __int16 v12 = 2080;
                uint64_t v13 = "JitterPreloadQueue_Destroy";
                __int16 v14 = 1024;
                int v15 = 99;
                _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d JitterPreloadQueue: Too many frames seen in audio packet, possible corruption", buf, 0x1Cu);
              }
            }
            *(_DWORD *)(v7 + 1816) = 4;
          }
          if (v7 >= v7 + 1864) {
            break;
          }
          _JitterPreloadQueue_FreePacket((uint64_t)a1, (void **)v7);
        }
        int v2 = (v2 + 1) % 1500;
        if (v2 == *((_DWORD *)a1 + 1)) {
          goto LABEL_3;
        }
      }
      __break(0x5519u);
    }
LABEL_3:
    VCMemoryPool_Destroy(*((OSQueueHead **)a1 + 1501));
    VCMemoryPool_Destroy(*((OSQueueHead **)a1 + 1502));
    free(a1);
  }
}

void _JitterPreloadQueue_FreePacket(uint64_t a1, void **__new)
{
  if (*((int *)__new + 454) < 1)
  {
LABEL_6:
    uint64_t v9 = *(OSQueueHead **)(a1 + 12008);
    VCMemoryPool_Free(v9, __new);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = __new + 227;
    char v6 = __new + 223;
    unint64_t v7 = __new + 223;
    while (v7 < v5 && v7 >= v6)
    {
      uint64_t v8 = *v7++;
      VCMemoryPool_Free(*(OSQueueHead **)(a1 + 12016), v8);
      if (++v4 >= *(int *)v5) {
        goto LABEL_6;
      }
    }
    __break(0x5519u);
  }
}

void JitterPreloadQueue_Enqueue(void ***a1, void **a2)
{
  if (a1)
  {
    int v2 = (*((_DWORD *)a1 + 1) + 1) % 1500;
    if (v2 == *(_DWORD *)a1)
    {
      _JitterPreloadQueue_FreePacket((uint64_t)a1, a2);
      if ((int)VRTraceGetErrorLogLevelForModule() > 2)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          JitterPreloadQueue_Enqueue_cold_1();
        }
      }
    }
    else
    {
      BOOL v3 = &a1[*((int *)a1 + 1) + 1];
      if (v3 < a1 + 1501 && v3 >= a1 + 1)
      {
        *BOOL v3 = a2;
        __dmb(0xBu);
        *((_DWORD *)a1 + 1) = v2;
      }
      else
      {
        __break(0x5519u);
      }
    }
  }
}

int *JitterPreloadQueue_Dequeue(int *result)
{
  if (!result || *result == result[1]) {
    return 0;
  }
  int v2 = &result[2 * *result + 2];
  if (v2 >= result + 3002 || v2 < result + 2)
  {
    __break(0x5519u);
    return result;
  }
  uint64_t v1 = *(void *)v2;
  int v4 = *result + 1;
  __dmb(0xBu);
  *unint64_t result = v4 % 1500;
  return (int *)v1;
}

int *JitterPreloadQueue_Flush(int *a1)
{
  unint64_t result = JitterPreloadQueue_Dequeue(a1);
  if (result)
  {
    BOOL v3 = (void **)result;
    do
    {
      _JitterPreloadQueue_FreePacket((uint64_t)a1, v3);
      unint64_t result = JitterPreloadQueue_Dequeue(a1);
      BOOL v3 = (void **)result;
    }
    while (result);
  }
  return result;
}

void VCAudioTransmitter_SetAllowedPayloads(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v5 = VRTraceErrorLogLevelToCSTR();
        char v6 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = [*(id *)(a1 + 352) count];
          int v9 = 136316418;
          uint64_t v10 = v5;
          __int16 v11 = 2080;
          __int16 v12 = "VCAudioTransmitter_SetAllowedPayloads";
          __int16 v13 = 1024;
          int v14 = 749;
          __int16 v15 = 2048;
          uint64_t v16 = a1;
          __int16 v17 = 2048;
          uint64_t v18 = v7;
          __int16 v19 = 2048;
          CFIndex v20 = Count;
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d audioTransmitter=%p audioPayloads previousCount=%ld updatedCount=%ld", (uint8_t *)&v9, 0x3Au);
        }
      }
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 352));
      uint64_t v8 = *(__CFArray **)(a1 + 352);
      v22.length = CFArrayGetCount(theArray);
      v22.location = 0;
      CFArrayAppendArray(v8, theArray, v22);
      atomic_fetch_add((atomic_uint *volatile)(a1 + 72), 1u);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioTransmitter_SetAllowedPayloads_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioTransmitter_SetAllowedPayloads_cold_1();
    }
  }
}

void *_VCAudioTransmitter_UsedAudioPayloadForType(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  BOOL v3 = *(void **)(a1 + 352);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v10 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v12;
LABEL_3:
  uint64_t v7 = 0;
  while (1)
  {
    if (*(void *)v12 != v6) {
      objc_enumerationMutation(v3);
    }
    uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * v7);
    if (objc_msgSend((id)objc_msgSend(v8, "config"), "payload") == a2) {
      return v8;
    }
    if (v5 == ++v7)
    {
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v10 count:16];
      if (v5) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

void VCAudioTransmitter_PushRemainingSamples(unint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 908) = [(id)a1 chooseAudioNetworkBitrate];
  LODWORD(v5) = 0;
  int v2 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config", 0, v5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0,
               0,
               0,
               0,
               1),
         "payload");
  int v3 = *(_DWORD *)(a1 + 88);
  HIDWORD(v5) = v2;
  int v6 = v3;
  __int16 v7 = 256;
  int v8 = 0;
  char v9 = *(unsigned char *)(a1 + 952);
  _VCAudioTransmitter_BundleAndSendSamples(a1, (uint64_t)&v4, 0, 0);
}

void _VCAudioTransmitter_BundleAndSendSamples(unint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 904) = *(_DWORD *)(a2 + 12);
  int v8 = *(_DWORD *)(a2 + 12);
  if (v8 != [*(id *)(a1 + 8) payload]
    && [*(id *)(a1 + 8) bundledPackets]
    || [*(id *)(a1 + 8) isFull])
  {
    _VCAudioTransmitter_FlushBundlers(a1);
  }
  if ((a3 & 1) == 0 && [*(id *)(a1 + 8) bundledPackets]
    || !*(void *)a2 && !*(unsigned char *)(a1 + 472))
  {
    _VCAudioTransmitter_FlushBundlers(a1);
    goto LABEL_15;
  }
  if (!a3) {
    goto LABEL_15;
  }
  if ((a4 & 1) != 0 || !*(unsigned char *)(a1 + 472))
  {
    *(void *)(a1 + 184) = 0x7FF8000000000000;
  }
  else
  {
    if (*(double *)(a2 + 32) - *(double *)(a1 + 184) >= 0.3)
    {
      if (*(unsigned char *)(a1 + 176))
      {
        _VCAudioTransmitter_FlushBundlers(a1);
        *(unsigned char *)(a1 + 176) = 0;
      }
      goto LABEL_15;
    }
    *(unsigned char *)(a1 + 176) = 1;
  }
  uint64_t v18 = *(void **)(a1 + 368);
  int v19 = objc_msgSend((id)objc_msgSend(v18, "config"), "payload");
  int v20 = *(_DWORD *)(a2 + 12);
  if (v19 != v20) {
    uint64_t v18 = _VCAudioTransmitter_UsedAudioPayloadForType(a1, v20);
  }
  *(_DWORD *)(a2 + 12) = objc_msgSend((id)objc_msgSend(v18, "config"), "payload");
  if (VCPacketBundler_BundleAudio(*(void *)(a1 + 8), (void *)a2))
  {
    if (![*(id *)(a1 + 368) shortREDEnabled]
      || VCPacketBundler_BundleAudio(*(void *)(a1 + 16), (void *)(a2 + 40)))
    {
LABEL_15:
      if ([*(id *)(a1 + 8) isFull]) {
        _VCAudioTransmitter_FlushBundlers(a1);
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        uint64_t v10 = *MEMORY[0x1E4F47A50];
        long long v11 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v12 = *(_DWORD *)(a1 + 276);
            int v13 = *(_DWORD *)(a1 + 904);
            int v14 = *(_DWORD *)(a2 + 8);
            int v15 = *(_DWORD *)(a2 + 48);
            if (*(unsigned char *)(a1 + 48)) {
              uint64_t v16 = "voicedFrameCount";
            }
            else {
              uint64_t v16 = "silenceFrameCount";
            }
            int v17 = *(_DWORD *)(a1 + 284);
            int v27 = 136317186;
            uint64_t v28 = v9;
            __int16 v29 = 2080;
            uint64_t v30 = "_VCAudioTransmitter_BundleAndSendSamples";
            __int16 v31 = 1024;
            int v32 = 1365;
            __int16 v33 = 1024;
            int v34 = v12;
            __int16 v35 = 1024;
            int v36 = v13;
            __int16 v37 = 1024;
            int v38 = v14;
            __int16 v39 = 1024;
            int v40 = v15;
            __int16 v41 = 2080;
            uint64_t v42 = v16;
            __int16 v43 = 1024;
            int v44 = v17;
            _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCAT bundleAndSendSamples: frame#=%u payload=%u numBytes=%u shortREDBufferSize=%u %s=%u", (uint8_t *)&v27, 0x44u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          int v21 = *(_DWORD *)(a1 + 276);
          int v22 = *(_DWORD *)(a1 + 904);
          int v23 = *(_DWORD *)(a2 + 8);
          int v24 = *(_DWORD *)(a2 + 48);
          if (*(unsigned char *)(a1 + 48)) {
            int v25 = "voicedFrameCount";
          }
          else {
            int v25 = "silenceFrameCount";
          }
          int v26 = *(_DWORD *)(a1 + 284);
          int v27 = 136317186;
          uint64_t v28 = v9;
          __int16 v29 = 2080;
          uint64_t v30 = "_VCAudioTransmitter_BundleAndSendSamples";
          __int16 v31 = 1024;
          int v32 = 1365;
          __int16 v33 = 1024;
          int v34 = v21;
          __int16 v35 = 1024;
          int v36 = v22;
          __int16 v37 = 1024;
          int v38 = v23;
          __int16 v39 = 1024;
          int v40 = v24;
          __int16 v41 = 2080;
          uint64_t v42 = v25;
          __int16 v43 = 1024;
          int v44 = v26;
          _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCAT bundleAndSendSamples: frame#=%u payload=%u numBytes=%u shortREDBufferSize=%u %s=%u", (uint8_t *)&v27, 0x44u);
        }
      }
    }
  }
}

void VCAudioTransmitter_PushAudioSamples(unint64_t a1, uint64_t a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a2;
    if (a2)
    {
      *(unsigned char *)(a1 + 908) = [(id)a1 chooseAudioNetworkBitrate];
      if (*(unsigned char *)(a1 + 472) && !VCAudioBufferList_GetVoiceActivity(v2)) {
        ++*(_DWORD *)(a1 + 596);
      }
      int SampleCount = VCAudioBufferList_GetSampleCount(v2);
      if (!SampleCount)
      {
        uint64_t v81 = 1;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v74 = 0u;
        memset(&v73[4], 0, 32);
        memset(buf, 0, sizeof(buf));
        *(_DWORD *)long long v73 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "payload");
        *(_DWORD *)&v73[4] = VCAudioBufferList_GetTimestamp(v2);
        *(_WORD *)&v73[8] = 256;
        *(_DWORD *)&v73[12] = 0;
        v73[17] = *(unsigned char *)(a1 + 952);
        char v15 = VCAudioBufferList_GetVoiceActivity(v2) != 0;
        _VCAudioTransmitter_BundleAndSendSamples(a1, (uint64_t)buf, 0, v15);
        uint64_t v16 = *(void *)(a1 + 40);
        unsigned int v17 = VCAudioBufferList_GetSampleCount(v16);
        VCAudioBufferList_Shift(v16, v17);
        return;
      }
      int v5 = SampleCount;
      uint64_t v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "samplesPerFrame");
      int v7 = VCAudioBufferList_GetSampleCount(*(void *)(a1 + 40));
      int v8 = v7;
      BOOL v9 = v5 == v6 && v7 == 0;
      int v10 = !v9;
      int v62 = v10;
      if (!v9) {
        VCAudioBufferList_Append(*(void *)(a1 + 40), v2, 0);
      }
      unsigned int v11 = v8 + v5;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        int v13 = *MEMORY[0x1E4F47A50];
        int v14 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136316674;
            *(void *)&uint8_t buf[4] = v12;
            *(_WORD *)long long v73 = 2080;
            *(void *)&v73[2] = "VCAudioTransmitter_PushAudioSamples";
            *(_WORD *)&v73[10] = 1024;
            *(_DWORD *)&v73[12] = 958;
            *(_WORD *)&v73[16] = 1024;
            *(_DWORD *)&v73[18] = v6;
            *(_WORD *)&v73[22] = 1024;
            *(_DWORD *)&v73[24] = v8;
            *(_WORD *)&v73[28] = 1024;
            *(_DWORD *)&v73[30] = v11;
            *(_WORD *)&v73[34] = 1024;
            LODWORD(v74) = VCAudioBufferList_GetTimestamp(v2);
            _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d encoderSamplePerFrame:%d bufferedSamples:%d totalSamples:%d timestamp:%d", buf, 0x34u);
          }
        }
        else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)CMTime buf = 136316674;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)long long v73 = 2080;
          *(void *)&v73[2] = "VCAudioTransmitter_PushAudioSamples";
          *(_WORD *)&v73[10] = 1024;
          *(_DWORD *)&v73[12] = 958;
          *(_WORD *)&v73[16] = 1024;
          *(_DWORD *)&v73[18] = v6;
          *(_WORD *)&v73[22] = 1024;
          *(_DWORD *)&v73[24] = v8;
          *(_WORD *)&v73[28] = 1024;
          *(_DWORD *)&v73[30] = v11;
          *(_WORD *)&v73[34] = 1024;
          LODWORD(v74) = VCAudioBufferList_GetTimestamp(v2);
          _os_log_debug_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEBUG, " [%s] %s:%d encoderSamplePerFrame:%d bufferedSamples:%d totalSamples:%d timestamp:%d", buf, 0x34u);
        }
      }
      if (v62) {
        uint64_t v2 = *(void *)(a1 + 40);
      }
      if (v6 > v11)
      {
LABEL_25:
        if (*(double *)(a1 + 496) == 0.0) {
          *(double *)(a1 + 496) = micro();
        }
        return;
      }
      int v18 = 0;
      unsigned int v19 = v11 / v6;
      CFNumberRef v60 = (int32x2_t *)(a1 + 276);
      uint64_t v58 = &v73[4];
      if (v11 / v6 <= 1) {
        unsigned int v19 = 1;
      }
      unsigned int v59 = v19;
      uint64_t v61 = v2;
      while (1)
      {
        int VoiceActivity = VCAudioBufferList_GetVoiceActivity(v2);
        int v20 = (char *)VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 712));
        unsigned int v21 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "payload");
        int Timestamp = VCAudioBufferList_GetTimestamp(v2);
        double HostTime = VCAudioBufferList_GetHostTime(v2);
        uint64_t v24 = *(void *)(a1 + 872);
        if (v24) {
          VCAudioDump_LogUnCompressedAudio(v24, 0, v2, 0);
        }
        uint64_t v67 = v2;
        uint64_t v68 = v20;
        unsigned int v69 = v21;
        int v66 = Timestamp;
        unsigned __int8 v70 = VoiceActivity != 0;
        unsigned int v71 = 0;
        kdebug_trace();
        int v25 = *(void **)(a1 + 368);
        if (objc_msgSend((id)objc_msgSend(v25, "config"), "samplesPerFrame") != v6)
        {
          long long v82 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          int v26 = *(void **)(a1 + 352);
          uint64_t v27 = [v26 countByEnumeratingWithState:&v82 objects:buf count:16];
          if (v27)
          {
            uint64_t v28 = v27;
            CFNumberRef v63 = v20;
            uint64_t v29 = *(void *)v83;
            while (2)
            {
              for (uint64_t i = 0; i != v28; ++i)
              {
                if (*(void *)v83 != v29) {
                  objc_enumerationMutation(v26);
                }
                __int16 v31 = *(void **)(*((void *)&v82 + 1) + 8 * i);
                if (objc_msgSend((id)objc_msgSend(v31, "config", v58), "samplesPerFrame") == v6)
                {
                  int v25 = v31;
                  goto LABEL_44;
                }
              }
              uint64_t v28 = [v26 countByEnumeratingWithState:&v82 objects:buf count:16];
              if (v28) {
                continue;
              }
              break;
            }
LABEL_44:
            int v20 = v63;
          }
        }
        if (!*(void *)(a1 + 360) || !*(unsigned char *)(a1 + 704)) {
          break;
        }
        int v32 = *(unsigned __int8 *)(a1 + 729);
        BOOL v33 = *(unsigned char *)(a1 + 729) == 0;
        if (v32 | (VoiceActivity != 0) || (objc_msgSend((id)objc_msgSend(v25, "config"), "isDTXEnabled") & 1) != 0)
        {
          if (v32) {
            break;
          }
          BOOL v33 = 1;
        }
        else
        {
          int v25 = *(void **)(a1 + 360);
        }
LABEL_51:
        int v34 = v70;
        if (v70 == *(unsigned __int8 *)(a1 + 48)) {
          goto LABEL_54;
        }
        *(_DWORD *)(a1 + 284) = 0;
        objc_msgSend(v25, "resetEncoderWithSampleBuffer:numBytes:", *(void *)(a1 + 160) + *(unsigned int *)(a1 + 168) - *(_DWORD *)(a1 + 400) * (int)v6 * *(_DWORD *)(a1 + 412));
        AFRCSetAudioSilent(*(void *)(a1 + 296), VoiceActivity == 0);
        AFRCSetAudioPayload(*(void *)(a1 + 296), objc_msgSend((id)objc_msgSend(v25, "config"), "payload"), objc_msgSend(v25, "bitrate"));
LABEL_53:
        int v34 = v70;
LABEL_54:
        ++*(_DWORD *)(a1 + 284);
        if (v34)
        {
          ++v60->i32[0];
LABEL_56:
          uint64_t v35 = objc_msgSend(v25, "encodeAudio:numInputSamples:outputBytes:numOutputBytes:shortREDBytes:", v2, v6, v68, 1600, &v71, v58);
          atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 264), v35, memory_order_relaxed);
          unsigned int v69 = objc_msgSend((id)objc_msgSend(v25, "config"), "payload");
          if (*(_DWORD *)(a1 + 444) == 3) {
            *(unsigned char *)(a1 + 952) = [v25 isSIDFrame:v68 encodedBytes:v35];
          }
          goto LABEL_60;
        }
        *CFNumberRef v60 = vadd_s32(*v60, (int32x2_t)0x100000001);
        if (!*(unsigned char *)(a1 + 464)) {
          goto LABEL_56;
        }
        LODWORD(v35) = 0;
LABEL_60:
        *(unsigned char *)(a1 + 48) = v70;
        int v36 = v66;
        if (v33)
        {
          uint64_t BufferAtIndex = VCAudioBufferList_GetBufferAtIndex(v2, 0, 0);
          uint64_t v38 = (*(_DWORD *)(a1 + 412) * *(_DWORD *)(a1 + 400) * v6);
          size_t v39 = *(unsigned int *)(a1 + 168);
          int v40 = *(char **)(a1 + 160);
          if (v39 <= v38)
          {
            __int16 v41 = (const void *)(BufferAtIndex + (v38 - v39));
          }
          else
          {
            memmove(v40, &v40[v38], (v39 - v38));
            int v40 = (char *)(*(void *)(a1 + 160) + (*(_DWORD *)(a1 + 168) - v38));
            __int16 v41 = (const void *)BufferAtIndex;
            size_t v39 = v38;
          }
          memcpy(v40, v41, v39);
        }
        uint64_t v42 = *(void *)(a1 + 848);
        if (v42)
        {
          unsigned __int16 v64 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "payload");
          uint64_t v43 = v6;
          int v44 = v18;
          uint64_t v45 = v20;
          unsigned __int16 v46 = [*(id *)(a1 + 368) bitrate];
          [*(id *)(a1 + 368) bandwidth];
          unsigned __int16 v47 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "codecSampleRate");
          char v48 = *(unsigned char *)(a1 + 952);
          float AveragePower = VCAudioBufferList_GetAveragePower(v67);
          float v50 = __exp10((float)(AveragePower / 20.0));
          *(_DWORD *)CMTime buf = v64;
          *(_DWORD *)&buf[8] = (unsigned __int16)v35;
          int v51 = v46;
          int v20 = v45;
          int v18 = v44;
          uint64_t v6 = v43;
          int v36 = v66;
          *(_DWORD *)&uint8_t buf[4] = v51;
          *(float *)long long v73 = v50;
          *(void *)&v73[4] = v47;
          v73[6] = v48;
          VCAudioIssueDetector_ProcessFrame(v42, (unsigned __int16 *)buf);
        }
        kdebug_trace();
        uint64_t v52 = *(void *)(a1 + 864);
        if (v52) {
          VCAudioDump_LogCompressedAudio(v52, v68, v35, 0, 0, 0);
        }
        unsigned int Priority = VCAudioBufferList_GetPriority(v67);
        char v54 = Priority;
        if (v35)
        {
          *((void *)v58 + 18) = 0;
          *((_OWORD *)v58 + 7) = 0u;
          *((_OWORD *)v58 + 8) = 0u;
          *((_OWORD *)v58 + 5) = 0u;
          *((_OWORD *)v58 + 6) = 0u;
          *((_OWORD *)v58 + 3) = 0u;
          *((_OWORD *)v58 + 4) = 0u;
          *((_OWORD *)v58 + 1) = 0u;
          *((_OWORD *)v58 + 2) = 0u;
          *(_OWORD *)uint64_t v58 = 0u;
          *(void *)CMTime buf = v68;
          *(_DWORD *)&buf[8] = v35;
          *(_DWORD *)long long v73 = v69;
          *(_DWORD *)&v73[4] = v36;
          v73[8] = VoiceActivity != 0;
          v73[9] = Priority;
          v73[17] = *(unsigned char *)(a1 + 952);
          *(double *)&v73[20] = HostTime;
          if ([*(id *)(a1 + 368) shortREDEnabled])
          {
            *(void *)&v73[28] = &v68[(int)v35];
            *(void *)&long long v74 = __PAIR64__(v69, v71);
            DWORD2(v74) = v36;
            BYTE12(v74) = VoiceActivity != 0;
            BYTE13(v74) = v54;
            BYTE5(v75) = *(unsigned char *)(a1 + 952);
          }
          int v55 = objc_msgSend(*(id *)(a1 + 368), "shortREDEnabled", v58);
          BOOL v56 = 1;
          if (v55) {
            char v57 = 2;
          }
          else {
            char v57 = 1;
          }
          LOBYTE(v81) = v57;
          if (!VoiceActivity) {
            BOOL v56 = *(unsigned char *)(a1 + 464) == 0;
          }
          _VCAudioTransmitter_BundleAndSendSamples(a1, (uint64_t)buf, v56, VoiceActivity != 0);
        }
        else
        {
          VCAudioPacketBundler_UpdatePriority(*(void *)(a1 + 8), Priority);
        }
        uint64_t v2 = v61;
        VCMemoryPool_Free(*(OSQueueHead **)(a1 + 712), v20);
        if (v62) {
          VCAudioBufferList_Shift(v61, v6);
        }
        if (++v18 == v59) {
          goto LABEL_25;
        }
      }
      BOOL v33 = 0;
      if (!*(unsigned char *)(a1 + 464)) {
        goto LABEL_53;
      }
      goto LABEL_51;
    }
  }
}

unint64_t _VCAudioTransmitter_SendAudioPacketImpl(unint64_t result, int *a2, _DWORD *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  if (a2)
  {
    unint64_t v5 = result;
    if (*(unsigned char *)(result + 728))
    {
      uint64_t v6 = result + 608;
      *(unsigned char *)(result + 636) = *((unsigned char *)a2 + 44);
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(result + 848);
    if (v7)
    {
      VCAudioIssueDetector_ReportRTPTraffic(v7);
      VCAudioIssueDetector_FlushLogEvents(*(void *)(v5 + 848));
    }
    uint64_t v8 = *(void *)(v5 + 320);
    if (v8 && *(unsigned char *)(v5 + 331))
    {
      ControlInfo = VCMediaControlInfoGeneratorCreateControlInfo(v8);
      if (*(unsigned char *)(v5 + 348))
      {
        unsigned __int16 v19 = 0;
        RTPGetSequenceNumber(*(void *)(v5 + 288), &v19);
        ++v19;
        int v18 = 0;
        RTPGetSendROCWithSequenceNumber(*(void *)(v5 + 288), &v18, v19);
        VCMediaControlInfoSetInfo(ControlInfo, (const char *)0x13, (uint64_t)&v18, 4);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v10 = VRTraceErrorLogLevelToCSTR();
          unsigned int v11 = *MEMORY[0x1E4F47A50];
          uint64_t v12 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CMTime buf = 136316162;
              uint64_t v21 = v10;
              __int16 v22 = 2080;
              int v23 = "_VCAudioTransmitter_GenerateControlInfo";
              __int16 v24 = 1024;
              int v25 = 1669;
              __int16 v26 = 2048;
              unint64_t v27 = v5;
              __int16 v28 = 1024;
              int v29 = v18;
              _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d transmitter=%p Current ROC=%d", buf, 0x2Cu);
            }
          }
          else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)CMTime buf = 136316162;
            uint64_t v21 = v10;
            __int16 v22 = 2080;
            int v23 = "_VCAudioTransmitter_GenerateControlInfo";
            __int16 v24 = 1024;
            int v25 = 1669;
            __int16 v26 = 2048;
            unint64_t v27 = v5;
            __int16 v28 = 1024;
            int v29 = v18;
            _os_log_debug_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEBUG, " [%s] %s:%d transmitter=%p Current ROC=%d", buf, 0x2Cu);
          }
        }
        *(_DWORD *)CMTime buf = 0;
        VCMediaControlInfoSetInfo(ControlInfo, (const char *)0x14, (uint64_t)buf, 4);
      }
    }
    else
    {
      ControlInfo = 0;
    }
    kdebug_trace();
    uint64_t v13 = *(void *)(v5 + 288);
    int v14 = a2[8];
    int v15 = *a2;
    int v16 = a2[1];
    double v17 = micro();
    return RTPSendRTP(v13, v15, v14, v16, *((void **)a2 + 6), a2[14], a3, a2 + 2, v17, *((float *)a2 + 7), *((unsigned char *)a2 + 24), a2[9], (uint64_t)ControlInfo, v6, 0, *(_DWORD *)(v5 + 968));
  }
  return result;
}

void VCAudioTransmitter_ReportAWDMetrics(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int valuePtr = [*(id *)(a1 + 368) bitrate];
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      int v3 = Mutable;
      CFNumberRef v4 = CFNumberCreate(v1, kCFNumberIntType, &valuePtr);
      if (v4)
      {
        CFNumberRef v5 = v4;
        CFDictionaryAddValue(v3, @"UplinkCodecBitRate", v4);
        CFRelease(v5);
        reportingAudioStreamLogMetricSample();
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioTransmitter_ReportAWDMetrics_cold_2();
        }
      }
      CFRelease(v3);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioTransmitter_ReportAWDMetrics_cold_1();
      }
    }
  }
}

void VCAudioTransmitter_ProcessConnectionType(uint64_t a1, int a2)
{
  if (a1)
  {
    VCAudioIssueDetector_Stop(*(void *)(a1 + 848));
    VCAudioTransmitter_ReportAWDMetrics(a1);
    int64_t v4 = +[VCPayloadUtils codecTypeForPayload:](VCPayloadUtils, "codecTypeForPayload:", objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "payload"));
    if (a2 == 2)
    {
      *(unsigned char *)(a1 + 730) = +[VCPayloadUtils supportsCodecBandwidthUpdateForCodecType:v4];
      *(_DWORD *)(a1 + 480) = 2;
    }
    else
    {
      *(unsigned char *)(a1 + 730) = 0;
      *(_DWORD *)(a1 + 480) = a2;
      if (a2 == 3)
      {
        *(void *)(a1 + 832) = 0;
        *(_OWORD *)(a1 + 800) = 0u;
        *(_OWORD *)(a1 + 816) = 0u;
        *(_OWORD *)(a1 + 768) = 0u;
        *(_OWORD *)(a1 + 784) = 0u;
        *(_OWORD *)(a1 + 736) = 0u;
        *(_OWORD *)(a1 + 752) = 0u;
      }
    }
    VCAudioIssueDetector_UpdateConnectionType(*(void *)(a1 + 848), a2);
    uint64_t v5 = *(void *)(a1 + 848);
    VCAudioIssueDetector_Start(v5);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioTransmitter_ProcessConnectionType_cold_1();
    }
  }
}

void VCAudioTransmitter_UpdateWrmMetrics(uint64_t a1, uint64_t a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = 0;
    v5[0] = 0;
    RTPGetJitter(a1, (_DWORD *)v5 + 1, (_DWORD *)&v4 + 1, &v4);
    RTPGetPacketSent(a1, v5);
    *(_DWORD *)(a2 + 52) = HIDWORD(v5[0]);
    *(_DWORD *)(a2 + 196) = v5[0];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioTransmitter_UpdateWrmMetrics_cold_1();
    }
  }
}

void _VCAudioTransmitter_FlushBundlers(unint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 368), "shortREDEnabled", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0,
                       0,
                       0,
                       0,
                       *MEMORY[0x1E4F143B8]))
    char v2 = 2;
  else {
    char v2 = 1;
  }
  LOBYTE(v17) = v2;
  int v3 = [*(id *)(a1 + 8) bundlingScheme];
  uint64_t v4 = *(void **)(a1 + 8);
  if (v3 != 3)
  {
    if ((VCPacketBundler_ExtractBundledPackets((uint64_t)v4, 0, (uint64_t)&v7) & 1) == 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioTransmitter_FlushBundlers_cold_3();
        }
      }
      return;
    }
    if ([*(id *)(a1 + 368) shortREDEnabled]
      && (VCPacketBundler_ExtractBundledPackets(*(void *)(a1 + 16), 0, (uint64_t)&v9 + 8) & 1) == 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioTransmitter_FlushBundlers_cold_2();
        }
      }
      return;
    }
    _VCAudioTransmitter_SendAudioBundle(a1, (uint64_t *)&v7);
LABEL_14:
    objc_msgSend(*(id *)(a1 + 8), "resetBuffer", v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
    [*(id *)(a1 + 16) resetBuffer];
    return;
  }
  int v5 = [v4 bundledPackets];
  if (!v5) {
    goto LABEL_14;
  }
  int v6 = 0;
  while (1)
  {
    LOBYTE(v17) = 1;
    if ((VCPacketBundler_ExtractBundledPackets(*(void *)(a1 + 8), v6, (uint64_t)&v7) & 1) == 0) {
      break;
    }
    _VCAudioTransmitter_SendAudioBundle(a1, (uint64_t *)&v7);
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    ++v6;
    long long v7 = 0u;
    long long v8 = 0u;
    if (v5 == v6) {
      goto LABEL_14;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCAudioTransmitter_FlushBundlers_cold_1();
    }
  }
}

void _VCAudioTransmitter_SendAudioBundle(unint64_t a1, uint64_t *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    unsigned __int8 v28 = 0;
    __int16 v32 = 0;
    if ([*(id *)(a1 + 8) bundledPackets])
    {
      uint64_t v4 = (void *)MEMORY[0x1E4E56580](a1 + 456);
      [v4 packMeters:&v32 withLength:&v28];
      if (v4) {
        CFRelease(v4);
      }
    }
    int v5 = *((_DWORD *)a2 + 6);
    int v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "samplesPerFrame");
    int v7 = [*(id *)(a1 + 8) packetsPerBundle] * v6 - v5;
    if (v7 < 1) {
      float v8 = 0.0;
    }
    else {
      float v8 = *(float *)(a1 + 112) * (float)(int)ceilf((float)v7 / (float)*(unsigned int *)(a1 + 424));
    }
    if (!*(unsigned char *)(a1 + 908))
    {
      unsigned int v20 = *(_DWORD *)(a1 + 912);
      goto LABEL_45;
    }
    int v9 = v28;
    unsigned int v10 = *(unsigned __int8 *)(a1 + 328);
    long long v39 = unk_1E25A2C68;
    long long v36 = xmmword_1E25A2C38;
    long long v37 = unk_1E25A2C48;
    long long v38 = xmmword_1E25A2C58;
    uint64_t v11 = *a2;
    *(void *)&long long v39 = *a2;
    int v12 = *((_DWORD *)a2 + 3);
    DWORD2(v39) = *((_DWORD *)a2 + 2);
    LODWORD(v36) = v12;
    BYTE12(v38) = *((unsigned char *)a2 + 21);
    if (!*(unsigned char *)(a1 + 336))
    {
LABEL_25:
      if (!v11)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioTransmitter_SendAudioBundle_cold_1();
          }
        }
        int v25 = 0;
        goto LABEL_44;
      }
      if ((v9 - 1) <= 0xF) {
        __memcpy_chk();
      }
      BYTE8(v37) = v9;
      DWORD1(v36) = *((_DWORD *)a2 + 4);
      unsigned int v21 = *((unsigned __int8 *)a2 + 28);
      *((float *)&v37 + 3) = v8;
      *(void *)&long long v38 = __PAIR64__(v10, v21);
      DWORD2(v38) = *(_DWORD *)(a1 + 172);
      if (!*(void *)(a1 + 840))
      {
        buf[0] = v36;
        buf[1] = v37;
        buf[2] = v38;
        long long v41 = v39;
        int v25 = _VCAudioTransmitter_SendAudioPacket(a1, (uint64_t)buf);
LABEL_44:
        unsigned int v20 = *(_DWORD *)(a1 + 912) + v25;
        *(_DWORD *)(a1 + 912) = v20;
LABEL_45:
        *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 4);
        *(unsigned char *)(a1 + 92) = 0;
        atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 260), v20, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 964), v20, memory_order_relaxed);
        *(int32x2_t *)(a1 + 268) = vadd_s32(*(int32x2_t *)(a1 + 268), vdup_n_s32(v20));
        if (*(_DWORD *)(a1 + 904) == 13) {
          *(_DWORD *)(a1 + 272) += *(_DWORD *)(a1 + 172)
        }
                                 * (7
                                  / [*(id *)(a1 + 8) packetsPerBundle])
                                 + 77;
        return;
      }
      long long v33 = v36;
      long long v34 = v37;
      long long v35 = v38;
      unsigned int v22 = HIDWORD(v39);
      CMBlockBufferRef theBuffer = 0;
      CMBlockBufferRef blockBufferOut = 0;
      if (*(uint64_t *)((char *)&v39 + 4) <= 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioTransmitter_SendAudioBundle_cold_2();
          }
        }
      }
      else if (CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (void *)v39, DWORD2(v39), (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, DWORD2(v39), 0, &blockBufferOut))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioTransmitter_SendAudioBundle_cold_6();
          }
        }
      }
      else if ((VCCryptor_Encrypt(*(void *)(a1 + 840), blockBufferOut, (CFTypeRef *)&theBuffer) & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioTransmitter_SendAudioBundle_cold_3();
          }
        }
      }
      else
      {
        size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
        unsigned int v24 = DataLength;
        if (CMBlockBufferIsRangeContiguous(theBuffer, 0, DataLength))
        {
          dataPointerOut = 0;
          if (!CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut))
          {
            buf[0] = v33;
            buf[1] = v34;
            buf[2] = v35;
            *(void *)&long long v41 = dataPointerOut;
            *((void *)&v41 + 1) = __PAIR64__(v22, v24);
            int v25 = _VCAudioTransmitter_SendAudioPacket(a1, (uint64_t)buf);
LABEL_35:
            if (theBuffer) {
              CFRelease(theBuffer);
            }
            if (blockBufferOut) {
              CFRelease(blockBufferOut);
            }
            goto LABEL_44;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCAudioTransmitter_SendAudioBundle_cold_5();
            }
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioTransmitter_SendAudioBundle_cold_4();
          }
        }
      }
      int v25 = 0;
      goto LABEL_35;
    }
    int v13 = RTPGetExternalPayload(*(void *)(a1 + 288), (unsigned __int16)v12);
    *(void *)&long long v41 = 0;
    memset(buf, 0, sizeof(buf));
    LOBYTE(buf[0]) = *((unsigned char *)a2 + 160);
    uint64_t v14 = LOBYTE(buf[0]);
    if (LOBYTE(buf[0]))
    {
      long long v15 = (char *)&buf[1] + 8;
      long long v16 = (int *)(a2 + 2);
      do
      {
        *((void *)v15 - 2) = *((void *)v16 - 2);
        int v17 = *v16;
        *((_DWORD *)v15 - 2) = *(v16 - 2);
        *((_DWORD *)v15 - 1) = v17;
        *long long v15 = *((unsigned char *)v16 + 5);
        v15 += 24;
        v16 += 10;
        --v14;
      }
      while (v14);
    }
    uint64_t PrimaryPayloadAndAppendSamples = VCAudioRedBuilder_GetPrimaryPayloadAndAppendSamples(*(void *)(a1 + 24), buf, v13);
    if ([*(id *)(a1 + 24) numPayloads])
    {
      if (PrimaryPayloadAndAppendSamples)
      {
        uint64_t v19 = [*(id *)(a1 + 24) redPayloadForPrimaryPayload:PrimaryPayloadAndAppendSamples];
        if (v19)
        {
          uint64_t v11 = *(void *)(v19 + 8);
          *(void *)&long long v39 = v11;
          DWORD2(v39) = *(_DWORD *)(v19 + 16);
          LODWORD(v36) = *(_DWORD *)v19;
          BYTE12(v38) = *(unsigned char *)(v19 + 31);
LABEL_24:
          VCAudioRedBuilder_UpdatePayloadHistory(*(void *)(a1 + 24));
          goto LABEL_25;
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioTransmitter_SendAudioBundle_cold_7();
        }
      }
      uint64_t v11 = 0;
      *(void *)&long long v39 = 0;
      DWORD2(v39) = 0;
    }
    if (!PrimaryPayloadAndAppendSamples) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v26 = VRTraceErrorLogLevelToCSTR();
    unint64_t v27 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136316162;
      *(void *)((char *)buf + 4) = v26;
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = "_VCAudioTransmitter_SendAudioBundle";
      WORD3(buf[1]) = 1024;
      DWORD2(buf[1]) = 128;
      WORD6(buf[1]) = 2048;
      *(void *)((char *)&buf[1] + 14) = a1;
      WORD3(buf[2]) = 2048;
      *((void *)&buf[2] + 1) = a2;
      _os_log_error_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_ERROR, " [%s] %s:%d NULL access: context=[%p], rtpPacketInfo=[%p]", (uint8_t *)buf, 0x30u);
    }
  }
}

uint64_t _VCAudioTransmitter_SendAudioPacket(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = 0;
  *(unsigned char *)(a1 + 328) = *(_DWORD *)(a2 + 36) != 0;
  if (*(void *)(a1 + 200))
  {
    PacketThread_SendPacket(*(void *)(a1 + 200), (const void *)a2, *(void **)(a2 + 48), *(unsigned int *)(a2 + 56));
    return (*(_DWORD *)(a2 + 40) + *(_DWORD *)(a2 + 56));
  }
  else
  {
    _VCAudioTransmitter_SendAudioPacketImpl(a1, (int *)a2, &v4);
    return v4;
  }
}

void _VCOverlaySourceTextHelper_appendLinkStateToString(__CFString *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[3];
  uint64_t v3 = 4 * v2;
  BOOL v4 = v2 == 0;
  uint64_t v5 = 6;
  if (v4) {
    uint64_t v5 = 2;
  }
  int v6 = a2[v5];
  int v7 = a2 + 5;
  if (v4) {
    int v7 = a2 + 1;
  }
  int v8 = a2[v3];
  int v9 = *v7;
  unsigned int v10 = ":D";
  if (v4) {
    unsigned int v10 = "";
  }
  BOOL v4 = v6 == 0;
  uint64_t v11 = 82;
  if (v4) {
    uint64_t v11 = 80;
  }
  if (v9) {
    uint64_t v12 = 67;
  }
  else {
    uint64_t v12 = 87;
  }
  uint64_t v14 = v11;
  if (v8) {
    uint64_t v13 = 67;
  }
  else {
    uint64_t v13 = 87;
  }
  CFStringAppendFormat(a1, 0, @"%sActive - %c:%c:%c%s\n", "  ", v13, v12, v14, v10);
}

void VCOverlaySourceTextHelper_appendHeaderTextToString(uint64_t a1)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(__CFString **)a1;
    if (v2)
    {
      CFStringAppendFormat(v2, 0, @"\n\n\n");
      _VCOverlaySourceTextHelper_appendLinkStateToString(*(__CFString **)a1, (unsigned __int8 *)(a1 + 9));
      *(void *)long long v15 = 0;
      uint64_t v16 = 0;
      memset(v17, 0, sizeof(v17));
      uint64_t v3 = *(void *)(a1 + 24);
      if (v3)
      {
        v18[0] = (uint64_t)(*(double *)(a1 + 32) - (double)v3);
        BOOL v4 = gmtime(v18);
        strftime(v15, 0x1EuLL, "%Hm%Mm%Ss", v4);
      }
      *(void *)uint64_t v12 = 0;
      uint64_t v13 = 0;
      memset(v14, 0, sizeof(v14));
      memset(v18, 0, 30);
      char __str = 0;
      *(void *)&v9.__darwin_suseconds_t tv_usec = 0;
      uint64_t v10 = 0;
      v9.tv_sec = 0;
      gettimeofday(&v9, &v10);
      uint64_t v5 = localtime(&v9.tv_sec);
      strftime((char *)v18, 0x1EuLL, "%T", v5);
      snprintf(&__str, 1uLL, ".%d", v9.tv_usec);
      snprintf(v12, 0x1EuLL, "%s%s", (const char *)v18, &__str);
      CFStringAppendFormat(*(CFMutableStringRef *)a1, 0, @"%s%s (%s)\n", "  ", v12, v15);
      CFStringRef v6 = *(const __CFString **)(a1 + 16);
      if (v6)
      {
        int v7 = *(__CFString **)a1;
        CStringPtr = CFStringGetCStringPtr(v6, 0x8000100u);
        CFStringAppendFormat(v7, 0, @"%sID: %.8s...\n", "  ", CStringPtr);
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCOverlaySourceTextHelper_appendHeaderTextToString_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCOverlaySourceTextHelper_appendHeaderTextToString_cold_1();
    }
  }
}

void VCOverlaySourceTextHelper_appendVideoTextToString(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(__CFString **)a1;
    if (v2)
    {
      switch(*(unsigned char *)(a1 + 8))
      {
        case 1:
          CFStringAppendFormat(v2, 0, @"%s%dx%d\n%s%.01ffps\n", "  ", (int)*(double *)(a1 + 208), (int)*(double *)(a1 + 216), "  ", *(float *)(a1 + 240));
          break;
        case 2:
          _VCOverlaySourceTextHelper_appendLowVerbosityVideoTextToString(a1);
          break;
        case 3:
          _VCOverlaySourceTextHelper_appendLowVerbosityVideoTextToString(a1);
          _VCOverlaySourceTextHelper_appendMediumVerbosityVideoTextToString(a1);
          break;
        case 4:
          _VCOverlaySourceTextHelper_appendLowVerbosityVideoTextToString(a1);
          _VCOverlaySourceTextHelper_appendMediumVerbosityVideoTextToString(a1);
          CFStringAppendFormat(*(CFMutableStringRef *)a1, 0, @"%sJQ Size(ms): %0.1f (%0.1f avg)\n%sTotal Stall: %0.1fms\n%sStalls: %d\n%sErasures: %d\n%sFIRs: %d\n%sOffset: %0.2fms\n%sFEC Overhead: %0.2f", "  ", *(float *)(a1 + 172), *(float *)(a1 + 180), "  ", *(float *)(a1 + 164), "  ", *(unsigned int *)(a1 + 168), "  ", *(unsigned int *)(a1 + 184), "  ", *(unsigned int *)(a1 + 196), "  ", *(void *)(a1 + 200), "  ", *(float *)(a1 + 112));
          break;
        default:
          return;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCOverlaySourceTextHelper_appendVideoTextToString_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCOverlaySourceTextHelper_appendVideoTextToString_cold_1();
    }
  }
}

void VCOverlaySourceTextHelper_appendAudioTextToString(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1)
    {
      int v2 = *(unsigned __int8 *)(a1 + 8);
      if ((v2 - 1) >= 3)
      {
        if (v2 == 4)
        {
          _VCOverlaySourceTextHelper_appendLowVerbosityAudioTextToString(a1);
          CFStringAppendFormat(*(CFMutableStringRef *)a1, 0, @"%sSample Rate: %d\n%sSample Count: %0.2f\n%sRed Level: %d\n%sCodec Payload: %d\n%sMediaStall Count: %d\n%sMediaStall Time: %0.2f", "  ", *(unsigned int *)(a1 + 44), "  ", *(float *)(a1 + 48), "  ", *(unsigned int *)(a1 + 52), "  ", *(unsigned int *)(a1 + 68), "  ", *(unsigned int *)(a1 + 56), "  ", *(float *)(a1 + 60));
        }
      }
      else
      {
        _VCOverlaySourceTextHelper_appendLowVerbosityAudioTextToString(a1);
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCOverlaySourceTextHelper_appendAudioTextToString_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCOverlaySourceTextHelper_appendAudioTextToString_cold_1();
    }
  }
}

void _VCOverlaySourceTextHelper_appendLowVerbosityVideoTextToString(uint64_t a1)
{
}

void _VCOverlaySourceTextHelper_appendMediumVerbosityVideoTextToString(uint64_t a1)
{
  int v2 = *(__CFString **)a1;
  uint64_t v3 = FourccToCStr(*(_DWORD *)(a1 + 36));
  CFStringAppendFormat(v2, 0, @"%sCodec: %s\n%sRx Avg FPS: %0.1ffps\n%sBR T/M/FEC kbps: %-4d/%-4d/%-4d\n%sPLR: %d%%\n", "  ", v3, "  ", *(float *)(a1 + 136), "  ", *(unsigned int *)(a1 + 100), (*(_DWORD *)(a1 + 100) - *(_DWORD *)(a1 + 108)), *(unsigned int *)(a1 + 108), "  ", *(unsigned int *)(a1 + 116));
}

void _VCOverlaySourceTextHelper_appendLowVerbosityAudioTextToString(uint64_t a1)
{
  int v2 = *(__CFString **)a1;
  uint64_t v3 = FourccToCStr(*(_DWORD *)(a1 + 28));
  CFStringAppendFormat(v2, 0, @"\n%s🔊Audio Rx\n%sCodec: %s\n%s(audio streamID: %d)\n%sRx Audio (kbps): %d\n%sRx Total (kbps): %d\n", "  ", "  ", v3, "  ", *(unsigned int *)(a1 + 24), "  ", *(unsigned int *)(a1 + 36), "  ", *(unsigned int *)(a1 + 64));
}

uint64_t ARPLSendingSetElement::buffer(CARPL **this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, unsigned int a5, char a6, sockaddr *a7, unsigned int a8, int a9, int a10, int a11)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = (pthread_mutex_t *)(this + 4);
  pthread_mutex_lock((pthread_mutex_t *)(this + 4));
  BOOL can_buffer = ARPLAssociationSetElement::can_buffer((ARPLAssociationSetElement *)this, 1);
  if (a4 <= a5 && a2 && a3 - 1 <= 0x7FF && can_buffer && (unsigned int v21 = *((unsigned __int8 *)this + 699), v21 <= 0x3F))
  {
    unsigned __int16 v46 = v19;
    *((unsigned char *)this + 699) = v21 + 1;
    uint64_t v22 = *((unsigned __int8 *)this + 697);
    *((unsigned char *)this + 697) = (v22 + 1) & 0x3F;
    BOOL v23 = ARPLAssociationSetElement::can_buffer((ARPLAssociationSetElement *)this, 1);
    unsigned int v24 = &this[v22];
    uint64_t v26 = v24[15];
    int v25 = (char *)(v24 + 15);
    *((_DWORD *)v26 + 39) = *((_DWORD *)v26 + 39) & 0xFFFFFFFE | !v23;
    *(_DWORD *)(*(void *)v25 + 156) |= 2u;
    *(_DWORD *)(*(void *)v25 + 156) = *(_DWORD *)(*(void *)v25 + 156) & 0xFFFFC0FF | ((v22 & 0x3F) << 8);
    *(_DWORD *)(*(void *)v25 + 156) = *(_DWORD *)(*(void *)v25 + 156) & 0xFFFFFF03 | (4
                                                                                            * (*((unsigned char *)this + 698) & 0x3F));
    *(_DWORD *)(*(void *)v25 + 156) = *(_DWORD *)(*(void *)v25 + 156) & 0x3FFFFFF | (*((unsigned __int8 *)this
                                                                                             + 697) << 26);
    *(_DWORD *)(*(void *)v25 + 156) = *(_DWORD *)(*(void *)v25 + 156) & 0xFFFFC0FF | ((v22 & 0x3F) << 8);
    *(_DWORD *)(*(void *)v25 + 156) = *(_DWORD *)(*(void *)v25 + 156) & 0xFFF03FFF | ((a4 & 0x3F) << 14);
    *(_DWORD *)(*(void *)v25 + 156) = *(_DWORD *)(*(void *)v25 + 156) & 0xFC0FFFFF | ((a5 & 0x3F) << 20);
    int v27 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 27) = v27 + 1;
    *(_DWORD *)(*(void *)v25 + 148) = v27;
    int v28 = CARPL::current_timestamp(this[1]);
    uint64_t v29 = *(void *)v25;
    *(_DWORD *)(v29 + 152) = v28;
    *(_DWORD *)(v29 + 160) = a3;
    *((unsigned char *)this + v22 + 632) = a6;
    memcpy((void *)(*(void *)v25 + 164), a2, a3);
    if (a7 && a8) {
      memcpy((void *)(*(void *)v25 + 16), a7, a8);
    }
    uint64_t v30 = *(_DWORD **)v25;
    v30[36] = a8;
    v30[1] = a10;
    v30[2] = a9;
    *uint64_t v30 = a11;
    char v31 = v22 - 32;
    if (v22 < 0x20) {
      char v31 = v22;
    }
    int v32 = 1 << v31;
    uint64_t v33 = 100;
    if (v22 < 0x20) {
      uint64_t v33 = 96;
    }
    *(_DWORD *)((char *)this + v33) |= v32;
    long long v34 = this[1];
    ++*((_DWORD *)v34 + 108);
    *((_DWORD *)v34 + 109) += a3;
    uint64_t v19 = v46;
  }
  else
  {
    if (!ARPLAssociationSetElement::can_buffer((ARPLAssociationSetElement *)this, 1)
      && (int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v35 = VRTraceErrorLogLevelToCSTR();
      long long v36 = *MEMORY[0x1E4F47A50];
      long long v37 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          int v38 = *((_DWORD *)this + 27);
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v48 = v35;
          __int16 v49 = 2080;
          float v50 = "buffer";
          __int16 v51 = 1024;
          int v52 = 855;
          __int16 v53 = 1024;
          int v54 = v38;
          __int16 v55 = 1024;
          unsigned int v56 = a4;
          __int16 v57 = 1024;
          unsigned int v58 = a5;
          _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d buffer: CAN'T BUFFER (%08X:%02d:%02d)...", buf, 0x2Eu);
        }
      }
      else if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        int v45 = *((_DWORD *)this + 27);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v48 = v35;
        __int16 v49 = 2080;
        float v50 = "buffer";
        __int16 v51 = 1024;
        int v52 = 855;
        __int16 v53 = 1024;
        int v54 = v45;
        __int16 v55 = 1024;
        unsigned int v56 = a4;
        __int16 v57 = 1024;
        unsigned int v58 = a5;
        _os_log_debug_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEBUG, " [%s] %s:%d buffer: CAN'T BUFFER (%08X:%02d:%02d)...", buf, 0x2Eu);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v39 = VRTraceErrorLogLevelToCSTR();
      int v40 = *MEMORY[0x1E4F47A50];
      long long v41 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          int v42 = *((_DWORD *)this + 27);
          *(_DWORD *)CMTime buf = 136316418;
          uint64_t v48 = v39;
          __int16 v49 = 2080;
          float v50 = "buffer";
          __int16 v51 = 1024;
          int v52 = 857;
          __int16 v53 = 1024;
          int v54 = v42;
          __int16 v55 = 1024;
          unsigned int v56 = a4;
          __int16 v57 = 1024;
          unsigned int v58 = a5;
          _os_log_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d buffer: FAILED TO BUFFER A RELIABLE PACKET SERIALNUMBER (%08X:%02d:%02d)...", buf, 0x2Eu);
        }
      }
      else if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        int v44 = *((_DWORD *)this + 27);
        *(_DWORD *)CMTime buf = 136316418;
        uint64_t v48 = v39;
        __int16 v49 = 2080;
        float v50 = "buffer";
        __int16 v51 = 1024;
        int v52 = 857;
        __int16 v53 = 1024;
        int v54 = v44;
        __int16 v55 = 1024;
        unsigned int v56 = a4;
        __int16 v57 = 1024;
        unsigned int v58 = a5;
        _os_log_debug_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEBUG, " [%s] %s:%d buffer: FAILED TO BUFFER A RELIABLE PACKET SERIALNUMBER (%08X:%02d:%02d)...", buf, 0x2Eu);
      }
    }
    uint64_t v22 = 0xFFFFFFFFLL;
  }
  pthread_mutex_unlock(v19);
  return v22;
}

BOOL ARPLAssociationSetElement::can_buffer(ARPLAssociationSetElement *this, BOOL a2)
{
  BOOL v4 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  int v5 = *((unsigned __int8 *)this + 698);
  int v6 = *((unsigned __int8 *)this + 696);
  if (v5 == v6)
  {
    int v7 = 0;
    if (!a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v7 = ((((v6 - v5) & ~((v6 - v5) >> 31)) + v5 - v6 + 63) & 0xFFFFFFC0) + v6 - v5;
  if (a2) {
LABEL_5:
  }
    a2 = 63 - v7 - *((unsigned __int8 *)this + 699) >= a2;
LABEL_6:
  pthread_mutex_unlock(v4);
  return a2;
}

uint64_t CARPL::current_timestamp(CARPL *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((unsigned int *)this + 50);
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v6.__darwin_suseconds_t tv_usec = 0xAAAAAAAAAAAAAAAALL;
  if (!gettimeofday(&v6, 0))
  {
    uint64_t v3 = (v6.tv_usec / 1000 + 1000 * (SLODWORD(v6.tv_sec) % 604800)) % 0x240C8400u;
    uint64_t v2 = *((unsigned int *)this + 50);
    if (v2 == -1
      || (v2 > v3 ? (BOOL v4 = (v2 - v3) >= 0x12064201) : (BOOL v4 = 1), v4))
    {
      *((_DWORD *)this + 50) = v3;
      return v3;
    }
  }
  return v2;
}

uint64_t ARPLAssociationSetElement::update_rto(ARPLAssociationSetElement *this, int a2)
{
  BOOL v4 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  if (a2 >= 1)
  {
    unsigned int v5 = *((_DWORD *)this + 175);
    *((_DWORD *)this + 175) = v5 + 1;
    int v6 = *((_DWORD *)this + 176);
    if (v5 > 0x3F)
    {
      int v10 = a2 - (v6 >> 6);
      if (v10 >= 0) {
        int v11 = a2 - (v6 >> 6);
      }
      else {
        int v11 = (v6 >> 6) - a2;
      }
      int v12 = *((_DWORD *)this + 177);
      if (v11 >= (3 * v12) >> 5) {
        goto LABEL_12;
      }
      int v13 = v10 + v6;
      *((_DWORD *)this + 176) = v13;
      int v14 = v11 - (v12 >> 5) + v12;
      *((_DWORD *)this + 177) = v14;
      unsigned int v8 = (v14 >> 5) + (v13 >> 6);
    }
    else
    {
      unsigned int v7 = v6 + a2;
      *((_DWORD *)this + 176) = v7;
      unsigned int v8 = v7 / (v5 + 1);
      unsigned int v9 = a2 - v8;
      if ((int)(a2 - v8) < 0) {
        unsigned int v9 = v8 - a2;
      }
      *((_DWORD *)this + 177) = *((_DWORD *)this + 177) - (*((int *)this + 177) >> 5) + v9;
    }
    *((_DWORD *)this + 178) = v8;
  }
LABEL_12:

  return pthread_mutex_unlock(v4);
}

BOOL associationSetElementEqual(_DWORD *a1, _DWORD *a2)
{
  return a1[26] == a2[26];
}

uint64_t associationSetElementHashCode(unsigned int *a1)
{
  return a1[26];
}

const void *retainAssociationSetElement(const __CFAllocator *a1, const void *a2)
{
  return a2;
}

void releaseAssociationSetElement(const __CFAllocator *a1, void *a2)
{
  uint64_t v2 = a2[1];
  a2[2] = *(void *)(v2 + 192);
  *(void *)(v2 + 192) = a2;
}

void ARPLSessionCreate()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1E24245A4(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x1020C4028DA6617);
  _Unwind_Resume(a1);
}

uint64_t ARPLSend_internal(CARPL *a1, int a2, const void *a3, size_t a4, int a5, sockaddr *a6, socklen_t a7, int a8, unsigned int a9, int a10, BOOL a11, BOOL a12)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return -1;
  }
  if (a8 < 4)
  {
    memset(&v109[4], 0, 320);
    *(_DWORD *)CMTime buf = a8;
    *(_DWORD *)double v109 = a9;
    *(_DWORD *)&v109[144] = a10;
    return VTP_Sendto(a2, a3, a4, a5, (uint64_t)a6, a7, (int *)buf);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      uint64_t v16 = *MEMORY[0x1E4F47A50];
      int v17 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          int v18 = "non-reliable";
          *(_DWORD *)CMTime buf = 136316418;
          *(void *)double v109 = v15;
          *(_WORD *)&v109[8] = 2080;
          *(void *)&v109[10] = "ARPLSend_internal";
          if (a11) {
            int v18 = "reliable";
          }
          *(_WORD *)&v109[18] = 1024;
          *(_DWORD *)&v109[20] = 1054;
          *(_WORD *)&v109[24] = 1024;
          *(_DWORD *)&v109[26] = a8;
          *(_WORD *)&v109[30] = 2048;
          *(void *)&v109[32] = a4;
          *(_WORD *)&v109[40] = 2080;
          *(void *)&v109[42] = v18;
          _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPL_Sendto(%d): send %ld bytes %s ...", buf, 0x36u);
        }
      }
      else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v67 = "non-reliable";
        *(_DWORD *)CMTime buf = 136316418;
        *(void *)double v109 = v15;
        *(_WORD *)&v109[8] = 2080;
        *(void *)&v109[10] = "ARPLSend_internal";
        if (a11) {
          uint64_t v67 = "reliable";
        }
        *(_WORD *)&v109[18] = 1024;
        *(_DWORD *)&v109[20] = 1054;
        *(_WORD *)&v109[24] = 1024;
        *(_DWORD *)&v109[26] = a8;
        *(_WORD *)&v109[30] = 2048;
        *(void *)&v109[32] = a4;
        *(_WORD *)&v109[40] = 2080;
        *(void *)&v109[42] = v67;
        _os_log_debug_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ARPL_Sendto(%d): send %ld bytes %s ...", buf, 0x36u);
      }
    }
    int v77 = a8;
    long long v84 = a1;
    pthread_mutex_lock((pthread_mutex_t *)((char *)a1 + 216));
    uint64_t v20 = *((void *)a1 + 26);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)a1 + 216));
    if ((int)a4 >= 1)
    {
      uint64_t v83 = 0;
      int v21 = 0;
      BOOL v22 = !a11;
      int v23 = v20 != 0;
      unsigned int v73 = bswap32(a9);
      int v24 = a4;
      unint64_t v25 = (unint64_t)a3;
      while (1)
      {
        uint64_t v26 = 0;
        *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v111[31] = v27;
        v111[30] = v27;
        v111[29] = v27;
        v111[28] = v27;
        v111[27] = v27;
        v111[26] = v27;
        v111[25] = v27;
        v111[24] = v27;
        v111[23] = v27;
        v111[22] = v27;
        v111[21] = v27;
        v111[20] = v27;
        v111[19] = v27;
        v111[18] = v27;
        v111[17] = v27;
        v111[16] = v27;
        v111[15] = v27;
        v111[14] = v27;
        v111[13] = v27;
        v111[12] = v27;
        v111[11] = v27;
        v111[10] = v27;
        v111[9] = v27;
        v111[8] = v27;
        v111[7] = v27;
        v111[6] = v27;
        v111[5] = v27;
        v111[4] = v27;
        v111[3] = v27;
        v111[2] = v27;
        v111[1] = v27;
        v111[0] = v27;
        v110[15] = v27;
        v110[14] = v27;
        v110[13] = v27;
        v110[12] = v27;
        v110[11] = v27;
        v110[10] = v27;
        v110[9] = v27;
        v110[8] = v27;
        v110[7] = v27;
        v110[6] = v27;
        v110[5] = v27;
        v110[4] = v27;
        v110[3] = v27;
        v110[2] = v27;
        v110[1] = v27;
        v110[0] = v27;
        int64x2_t v28 = vdupq_n_s64(v25);
        do
          v111[v26++] = v28;
        while (v26 != 32);
        unint64_t v29 = 0;
        int v30 = 0;
        char v31 = 1;
        int v32 = (char *)v25;
        uint64_t v33 = v84;
        do
        {
          unint64_t v34 = v29;
          *((void *)v111 + v29) = v32;
          if (v24 >= 1160) {
            int v35 = 1160;
          }
          else {
            int v35 = v24;
          }
          *((_DWORD *)v110 + v29) = v35;
          unsigned __int8 v36 = v31;
          v30 += v35;
          v24 -= v35;
          v32 += v35;
          ++v29;
          if (v34 > 0x3D) {
            break;
          }
          ++v31;
        }
        while (v24 > 0);
        if ((_BYTE)v34) {
          BOOL v37 = v22;
        }
        else {
          BOOL v37 = 0;
        }
        if (v37) {
          BOOL v22 = 0;
        }
        if (v22)
        {
          int v85 = v21;
          char v81 = 2;
          int v82 = 0;
          BOOL v70 = 1;
          int v71 = v23;
          int v69 = 1;
        }
        else
        {
          if (v22) {
            goto LABEL_84;
          }
          if (v24 >= 1)
          {
            uint64_t v66 = a12 - 1;
            goto LABEL_86;
          }
          int v82 = 1;
          if (!a12 && ((v23 ^ 1) & 1) == 0)
          {
            int v69 = 0;
            int v38 = 0;
            unsigned __int8 v36 = 64;
            if (!a12) {
              goto LABEL_33;
            }
            goto LABEL_78;
          }
          int v85 = v21;
          char v81 = 0;
          int v69 = 0;
          BOOL v70 = a12;
          int v71 = v23;
        }
        uint64_t v41 = 0;
        BOOL v76 = v22;
        while (1)
        {
          int v42 = (ARPLAssociationSetElement *)CARPL::sendingSetElement(v33, a9);
          if (v82)
          {
            BOOL can_buffer = ARPLAssociationSetElement::can_buffer(v42, (v29 - v41));
            int v44 = v85;
            if (!can_buffer) {
              int v44 = -2145124351;
            }
            int v85 = v44;
          }
          ++*((_DWORD *)v84 + 106);
          uint64_t v45 = *((unsigned int *)v110 + v41);
          size_t v86 = (int)v45;
          *((_DWORD *)v84 + 107) += v45;
          memset(v109, 170, sizeof(v109));
          buf[0] = 0;
          buf[1] = v81;
          *(_WORD *)&buf[2] = 0;
          if (v82)
          {
            unsigned __int16 v46 = (CARPL **)CARPL::sendingSetElement(v84, a9);
            long long v75 = (unsigned __int8 *)*((void *)v111 + v41);
            int v47 = ARPLSendingSetElement::buffer(v46, v75, v45, v41, v34, v81, a6, a7, v77, a10, a2);
            if (v47 < 0)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() < 8)
              {
                __int16 v55 = v109;
              }
              else
              {
                uint64_t v57 = VRTraceErrorLogLevelToCSTR();
                unsigned int v58 = *MEMORY[0x1E4F47A50];
                log = *MEMORY[0x1E4F47A50];
                if (*MEMORY[0x1E4F47A40])
                {
                  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)uint64_t v87 = 136315906;
                    *(void *)float v88 = v57;
                    *(_WORD *)&v88[8] = 2080;
                    *(void *)&v88[10] = "ARPLSend_internal";
                    *(_WORD *)&v88[18] = 1024;
                    LODWORD(v89) = 1208;
                    WORD2(v89) = 2048;
                    *(void *)((char *)&v89 + 6) = v84;
                    _os_log_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPL %p send: FAILED TO BUFFER A RELIABLE PACKET ..", v87, 0x26u);
                  }
                }
                else if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)uint64_t v87 = 136315906;
                  *(void *)float v88 = v57;
                  *(_WORD *)&v88[8] = 2080;
                  *(void *)&v88[10] = "ARPLSend_internal";
                  *(_WORD *)&v88[18] = 1024;
                  LODWORD(v89) = 1208;
                  WORD2(v89) = 2048;
                  *(void *)((char *)&v89 + 6) = v84;
                  _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ARPL %p send: FAILED TO BUFFER A RELIABLE PACKET ..", v87, 0x26u);
                }
                __int16 v55 = v109;
              }
            }
            else
            {
              *(_DWORD *)double v109 = v73;
              uint64_t v48 = &v46[v47];
              __int16 v49 = v48[15];
              v48 += 15;
              *(_DWORD *)&v109[4] = bswap32(*((_DWORD *)v49 + 37));
              BOOL v50 = ARPLAssociationSetElement::can_buffer((ARPLAssociationSetElement *)v46, 1);
              *(_DWORD *)&v109[8] = *(_DWORD *)&v109[8] & 0xFFFFFFFC | !v50 | 2;
              *(_DWORD *)&v109[8] = *(_DWORD *)&v109[8] & 0xFFFFFF03 | (4 * ((*((_DWORD *)*v48 + 39) >> 2) & 0x3F));
              *(_DWORD *)&v109[8] = *(_DWORD *)&v109[8] & 0xFFFFC0FF | (((*((_DWORD *)*v48 + 39) >> 8) & 0x3F) << 8);
              *(_DWORD *)&v109[8] = *(_DWORD *)&v109[8] & 0xFFF03FFF | (((*((_DWORD *)*v48 + 39) >> 14) & 0x3F) << 14);
              *(_DWORD *)&v109[8] = *(_DWORD *)&v109[8] & 0xFC0FFFFF | (((*((_DWORD *)*v48 + 39) >> 20) & 0x3F) << 20);
              *(_DWORD *)&v109[8] = *((_DWORD *)*v48 + 39) & 0xFC000000 | *(_DWORD *)&v109[8] & 0x3FFFFFF;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
              {
                uint64_t v51 = VRTraceErrorLogLevelToCSTR();
                int v52 = *MEMORY[0x1E4F47A50];
                __int16 v53 = *MEMORY[0x1E4F47A50];
                if (*MEMORY[0x1E4F47A40])
                {
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)uint64_t v87 = 136316930;
                    *(void *)float v88 = v51;
                    *(_WORD *)&v88[8] = 2080;
                    *(void *)&v88[10] = "ARPLSend_internal";
                    *(_WORD *)&v88[18] = 1024;
                    LODWORD(v89) = 1206;
                    WORD2(v89) = 2048;
                    *(void *)((char *)&v89 + 6) = v84;
                    HIWORD(v89) = 1024;
                    LODWORD(v90) = bswap32(*(unsigned int *)&v109[4]);
                    WORD2(v90) = 1024;
                    *(_DWORD *)((char *)&v90 + 6) = (*(_DWORD *)&v109[8] >> 14) & 0x3F;
                    WORD5(v90) = 1024;
                    HIDWORD(v90) = (*(_DWORD *)&v109[8] >> 20) & 0x3F;
                    LOWORD(v91) = 1024;
                    *(_DWORD *)((char *)&v91 + 2) = bswap32(*(unsigned int *)v109);
                    _os_log_impl(&dword_1E1EA4000, v52, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPL %p send: BUFFERED A NEW RELIABLE PACKET SERIALNUMBER (%08X:%02d:%02d) to (%08X)...", v87, 0x3Eu);
                  }
                }
                else if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)uint64_t v87 = 136316930;
                  *(void *)float v88 = v51;
                  *(_WORD *)&v88[8] = 2080;
                  *(void *)&v88[10] = "ARPLSend_internal";
                  *(_WORD *)&v88[18] = 1024;
                  LODWORD(v89) = 1206;
                  WORD2(v89) = 2048;
                  *(void *)((char *)&v89 + 6) = v84;
                  HIWORD(v89) = 1024;
                  LODWORD(v90) = bswap32(*(unsigned int *)&v109[4]);
                  WORD2(v90) = 1024;
                  *(_DWORD *)((char *)&v90 + 6) = (*(_DWORD *)&v109[8] >> 14) & 0x3F;
                  WORD5(v90) = 1024;
                  HIDWORD(v90) = (*(_DWORD *)&v109[8] >> 20) & 0x3F;
                  LOWORD(v91) = 1024;
                  *(_DWORD *)((char *)&v91 + 2) = bswap32(*(unsigned int *)v109);
                  _os_log_debug_impl(&dword_1E1EA4000, v52, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ARPL %p send: BUFFERED A NEW RELIABLE PACKET SERIALNUMBER (%08X:%02d:%02d) to (%08X)...", v87, 0x3Eu);
                }
              }
              __int16 v55 = &v109[12];
            }
            size_t v56 = (int)v45;
            int v54 = v75;
          }
          else
          {
            int v54 = (unsigned __int8 *)*((void *)v111 + v41);
            __int16 v55 = v109;
            size_t v56 = (int)v45;
          }
          unsigned int v59 = 0;
          unint64_t v60 = v55 - buf + 3;
          buf[0] = v60 >> 2;
          if (v54 && (int)v45 >= 1)
          {
            LOWORD(v59) = 0;
            uint64_t v61 = v54;
            do
            {
              char v62 = *v61++;
              unsigned int v59 = CRC16Table[(v62 ^ v59)] ^ ((unsigned __int16)(v59 & 0xFF00) >> 8);
              --v45;
            }
            while (v45);
          }
          *(_WORD *)&buf[2] = bswap32(v59) >> 16;
          unint64_t v63 = v60 & 0x3FC;
          memcpy(&buf[v63], v54, v56);
          if ((v83 & 0x8000000000000000) == 0)
          {
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v98 = 0u;
            long long v99 = 0u;
            long long v96 = 0u;
            long long v97 = 0u;
            long long v94 = 0u;
            long long v95 = 0u;
            long long v92 = 0u;
            long long v93 = 0u;
            long long v90 = 0u;
            long long v91 = 0u;
            *(_OWORD *)&v88[4] = 0u;
            long long v89 = 0u;
            *(_DWORD *)uint64_t v87 = v77;
            *(_DWORD *)float v88 = a9;
            HIDWORD(v96) = a10;
            uint64_t v64 = VTP_Sendto(a2, buf, (int)v63 + (int)v56, a5, (uint64_t)a6, a7, (int *)v87);
            uint64_t v65 = v83 + v86;
            if (v64 < 0) {
              uint64_t v65 = -1;
            }
            uint64_t v83 = v65;
          }
          uint64_t v33 = v84;
          int v21 = v85;
          BOOL v22 = v76;
          if (v85) {
            break;
          }
          int v85 = 0;
          if (++v41 == v36)
          {
            int v21 = 0;
            goto LABEL_77;
          }
        }
        unsigned __int8 v36 = v41;
LABEL_77:
        int v38 = v21;
        int v23 = v71;
        if (!v70)
        {
LABEL_33:
          char v39 = v23 | (v38 == 0);
          v23 |= v38 != 0;
          if ((v39 & 1) == 0) {
            int v38 = 0;
          }
          if (v36 <= v34 && (v23 & 1) != 0) {
            operator new();
          }
          int v40 = 0;
          goto LABEL_79;
        }
LABEL_78:
        int v40 = v69;
LABEL_79:
        uint64_t v66 = -1;
        if (!v38 && v24 >= 1)
        {
          unint64_t v25 = (unint64_t)v32;
          if (!v40) {
            continue;
          }
        }
        goto LABEL_86;
      }
    }
    uint64_t v83 = 0;
LABEL_84:
    uint64_t v66 = -1;
LABEL_86:
    if (v83 == a4) {
      return v83;
    }
    else {
      return v66;
    }
  }
}

void sub_1E2425240(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x1060C40147352C3);
  _Unwind_Resume(a1);
}

const void *CARPL::sendingSetElement(CARPL *this, int a2)
{
  v7[1] = *(const void **)MEMORY[0x1E4F143B8];
  BOOL v4 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  unsigned int v5 = (_DWORD *)*((void *)this + 5);
  v5[26] = a2;
  v7[0] = 0;
  if (!CFSetGetValueIfPresent(*((CFSetRef *)this + 4), v5, v7)) {
    operator new();
  }
  pthread_mutex_unlock(v4);
  return v7[0];
}

void sub_1E2425354(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x10A1C4082659322);
  _Unwind_Resume(a1);
}

uint64_t ARPLDataQueue::add_tail(uint64_t a1, void *a2)
{
  uint64_t v3 = (void **)a1;
  BOOL v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  for (uint64_t i = *v3; i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = (void **)i;
    if (i == a2) {
      a2 = 0;
    }
  }
  *uint64_t v3 = a2;

  return pthread_mutex_unlock(v4);
}

uint64_t ARPL_Sendto(uint64_t a1, int a2, const void *a3, size_t a4, int a5, sockaddr *a6, socklen_t a7, int *a8)
{
  uint64_t v15 = (CARPL *)CheckInHandleDebug();
  if (!a4 || !a3 || !v15) {
    return -1;
  }
  uint64_t v16 = ARPLSend_internal(v15, a2, a3, a4, a5, a6, a7, *a8, a8[1], a8[37], a8[38] != 0, 0);
  CheckOutHandleDebug();
  return v16;
}

uint64_t ARPLSessionRelease()
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v0 = VRTraceErrorLogLevelToCSTR();
    uint64_t v1 = *MEMORY[0x1E4F47A50];
    uint64_t v2 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 136315650;
        uint64_t v17 = v0;
        __int16 v18 = 2080;
        uint64_t v19 = "ARPLSessionRelease";
        __int16 v20 = 1024;
        int v21 = 2034;
        _os_log_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPLSessionRelease: enter...", (uint8_t *)&v16, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      ARPLSessionRelease_cold_4();
    }
  }
  uint64_t v3 = (CARPL *)CheckInHandleDebug();
  if (!v3) {
    return 2149842946;
  }
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v4 = VRTraceErrorLogLevelToCSTR();
    unsigned int v5 = *MEMORY[0x1E4F47A50];
    int v6 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *((_DWORD *)v3 + 5);
        int v16 = 136315906;
        uint64_t v17 = v4;
        __int16 v18 = 2080;
        uint64_t v19 = "ARPLSessionRelease";
        __int16 v20 = 1024;
        int v21 = 2042;
        __int16 v22 = 1024;
        int v23 = v7;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPLSessionRelease: old session (%08X)...", (uint8_t *)&v16, 0x22u);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      ARPLSessionRelease_cold_3();
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    int v10 = *MEMORY[0x1E4F47A50];
    int v11 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 136315650;
        uint64_t v17 = v9;
        __int16 v18 = 2080;
        uint64_t v19 = "ARPLSessionRelease";
        __int16 v20 = 1024;
        int v21 = 2044;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPLSessionRelease: delete...", (uint8_t *)&v16, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      ARPLSessionRelease_cold_2();
    }
  }
  CARPL::~CARPL(v3);
  MEMORY[0x1E4E57980](v3, 0x1020C4028DA6617);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    int v13 = *MEMORY[0x1E4F47A50];
    int v14 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v15) {
        return result;
      }
      int v16 = 136315650;
      uint64_t v17 = v12;
      __int16 v18 = 2080;
      uint64_t v19 = "ARPLSessionRelease";
      __int16 v20 = 1024;
      int v21 = 2048;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPLSessionRelease: done...", (uint8_t *)&v16, 0x1Cu);
    }
    else
    {
      uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      ARPLSessionRelease_cold_1();
    }
  }
  return 0;
}

void sub_1E24258A0(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x1020C4028DA6617);
  _Unwind_Resume(a1);
}

uint64_t ARPL_Monitor_Init(unsigned char *a1)
{
  if (*a1 || a1[16]) {
    return 3;
  }
  a1[16] = 1;
  return 2;
}

uint64_t checkSendingSet(char *a1, char *a2)
{
  *(void *)((char *)&v47[256] + 4) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (pthread_mutex_t *)(a2 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 56));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  for (int i = 0; i != 64; ++i)
  {
    uint64_t v6 = ((_BYTE)i + a1[698]) & 0x3F;
    int v7 = *(_DWORD **)&a1[8 * v6 + 120];
    if (v7 && v7[40] && (v7[39] & 2) != 0 && v7[38] != -1)
    {
      int v8 = CARPL::current_timestamp((CARPL *)a2);
      int v9 = v8 - v7[38];
      if (v9 < 0)
      {
        if (v9 < 0xEDF9BE01)
        {
          v9 += 604800000;
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          long long v27 = v4;
          uint64_t v10 = VRTraceErrorLogLevelToCSTR();
          int v11 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            v47[0] = v10;
            LOWORD(v47[1]) = 2080;
            *(void *)((char *)&v47[1] + 2) = "checkSendingSet";
            WORD1(v47[2]) = 1024;
            HIDWORD(v47[2]) = 2103;
            _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ERROR: CAN'T RESEND (BAD TIMESTAMP) !!!!!!!!!!!!", buf, 0x1Cu);
          }
          uint64_t v4 = v27;
        }
      }
      int v12 = *((_DWORD *)a1 + 178);
      if (v12 && v9 > 3 * v12)
      {
        memset((char *)v47 + 4, 170, 0x7F8uLL);
        buf[1] = a1[v6 + 632];
        v47[0] = __PAIR64__(bswap32(v7[37]), bswap32(*((_DWORD *)a1 + 26)));
        size_t v13 = v7[40];
        int v14 = v7[39] & 0x3FFFF03 | (4 * (a1[698] & 0x3F)) | (a1[697] << 26);
        buf[0] = 4;
        *(_WORD *)&buf[2] = 0;
        LODWORD(v47[1]) = v14;
        v7[38] = v8;
        ++v7[553];
        BOOL v15 = (char *)(v7 + 41);
        memcpy((char *)&v47[1] + 4, v7 + 41, v13);
        uint64_t v16 = v7[40];
        if ((int)v16 < 1)
        {
          unsigned int v17 = 0;
        }
        else
        {
          LOWORD(v17) = 0;
          do
          {
            char v18 = *v15++;
            unsigned int v17 = CRC16Table[(v18 ^ v17)] ^ ((unsigned __int16)(v17 & 0xFF00) >> 8);
            --v16;
          }
          while (v16);
        }
        *(_WORD *)&buf[2] = bswap32(v17) >> 16;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v19 = VRTraceErrorLogLevelToCSTR();
          __int16 v20 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v21 = v7[37];
            int v22 = *((_DWORD *)a1 + 26);
            *(_DWORD *)int64x2_t v28 = 136316674;
            *(void *)&void v28[4] = v19;
            *(_WORD *)&v28[12] = 2080;
            *(void *)&v28[14] = "checkSendingSet";
            *(_WORD *)&v28[22] = 1024;
            *(_DWORD *)&v28[24] = 2135;
            *(_WORD *)&v28[28] = 2048;
            *(void *)&v28[30] = a2;
            *(_WORD *)&v28[38] = 1024;
            *(_DWORD *)&v28[40] = v21;
            *(_WORD *)&v28[44] = 1024;
            *(_DWORD *)&v28[46] = v22;
            *(_WORD *)&v28[50] = 1024;
            *(_DWORD *)&v28[52] = v6;
            _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %p check: RESEND serial number %08X to destination %08X INDEX %d", v28, 0x38u);
          }
        }
        if (v7[36] && (int)v7[2] >= 4)
        {
          uint64_t v45 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          memset(v28, 0, sizeof(v28));
          *(_DWORD *)&void v28[4] = *((_DWORD *)a1 + 26);
          int v23 = v7[1];
          *(_DWORD *)int64x2_t v28 = v7[2];
          DWORD1(v34) = v23;
          VTP_Sendto(*v7, buf, v7[40] + 16, 0, (uint64_t)(v7 + 4), v7[36], (int *)v28);
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v24 = VRTraceErrorLogLevelToCSTR();
          unint64_t v25 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int64x2_t v28 = 136315650;
            *(void *)&void v28[4] = v24;
            *(_WORD *)&v28[12] = 2080;
            *(void *)&v28[14] = "checkSendingSet";
            *(_WORD *)&v28[22] = 1024;
            *(_DWORD *)&v28[24] = 2147;
            _os_log_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ERROR: CAN'T RESEND (BAD ADDRESS) !!!!!!!!!!!!", v28, 0x1Cu);
          }
        }
      }
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  return pthread_mutex_unlock(v4);
}

uint64_t ARPL_Monitor_Wait(CARPL *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (pthread_mutex_t *)((char *)a1 + 216);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a1 + 216));
  pthread_mutex_lock(v2);
  uint64_t v3 = *((void *)a1 + 26);
  pthread_mutex_unlock(v2);
  while (v3)
  {
    CFDataRef v4 = *(const __CFData **)(v3 + 16);
    if (v4)
    {
      CFIndex Length = CFDataGetLength(v4);
      if (Length)
      {
        if (*(_DWORD *)(v3 + 12))
        {
          size_t v6 = Length;
          int v7 = *(_DWORD *)(v3 + 24);
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v3 + 16));
          if (ARPLSend_internal(a1, v7, BytePtr, v6, 0, (sockaddr *)(v3 + 40), *(_DWORD *)(v3 + 168), *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 176), *(_DWORD *)(v3 + 28), 1, 1) < 0)break; {
        }
          }
      }
    }
    pthread_mutex_lock(v2);
    uint64_t v9 = *((void *)a1 + 26);
    *((void *)a1 + 26) = *(void *)v9;
    pthread_mutex_unlock(v2);
    uint64_t v10 = *(const void **)(v9 + 16);
    if (v10) {
      CFRelease(v10);
    }
    *(void *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 12) = 0;
    MEMORY[0x1E4E57980](v9, 0x1060C40147352C3);
    pthread_mutex_lock(v2);
    uint64_t v3 = *((void *)a1 + 26);
    pthread_mutex_unlock(v2);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)a1 + 56));
  CFSetApplyFunction(*((CFSetRef *)a1 + 4), (CFSetApplierFunction)checkSendingSet, a1);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a1 + 56));
  pthread_mutex_unlock(v2);
  timeval v12 = (timeval)xmmword_1E25A2C80;
  v12.__darwin_suseconds_t tv_usec = 50000;
  select(0, 0, 0, 0, &v12);
  return 0;
}

void sub_1E2425F34(_Unwind_Exception *exception_object)
{
}

uint64_t ARPL_Monitor_Thread(CARPL *a1)
{
  pthread_setname_np("com.apple.AVConference.SIP.arplMonitorProc");
  if (!*(unsigned char *)a1)
  {
    LODWORD(v2) = 0;
    uint64_t v3 = (uint64_t (*)(CARPL *))ARPL_Monitor_Init;
    do
    {
      uint64_t v2 = ARPL_Monitor_State_Transition_Table[4 * (int)v2 + (int)v3(a1)];
      uint64_t v3 = ARPL_Monitor_Functions[v2];
    }
    while (!*(unsigned char *)a1);
  }
  *((void *)a1 + 1) = 0;
  return 0;
}

void CARPL::CARPL(CARPL *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  ARPLDataQueue::ARPLDataQueue((CARPL *)((char *)this + 208));
  ARPLDataQueue::ARPLDataQueue((CARPL *)((char *)this + 280));
  ARPLDataQueue::ARPLDataQueue((CARPL *)((char *)this + 352));
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 3) = CFSetCreateMutable(0, 0, &associationSetCallBacks);
  *((void *)this + 4) = CFSetCreateMutable(0, 0, &associationSetCallBacks);
  operator new();
}

void sub_1E2426224(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v4, 0x10A1C4082659322);
  ARPLDataQueue::~ARPLDataQueue(v3);
  ARPLDataQueue::~ARPLDataQueue(v2);
  ARPLDataQueue::~ARPLDataQueue(v1);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void ARPLDataQueue::ARPLDataQueue(ARPLDataQueue *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  v2.__sig = 0xAAAAAAAAAAAAAAAALL;
  *(void *)v2.__opaque = 0xAAAAAAAAAAAAAAAALL;
  if (!pthread_mutexattr_init(&v2))
  {
    pthread_mutexattr_settype(&v2, 2);
    pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), &v2);
    pthread_mutexattr_destroy(&v2);
  }
}

void ARPLAssociationSetElement::ARPLAssociationSetElement(ARPLAssociationSetElement *this, CARPL *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 12) = 0;
  *(void *)this = &unk_1F3D3BB68;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_DWORD *)this + 178) = 0;
  ARPLAssociationSetElement::update_rto(this, 250);
  *((_DWORD *)this + 28) = -1;
  v3.__sig = 0xAAAAAAAAAAAAAAAALL;
  *(void *)v3.__opaque = 0xAAAAAAAAAAAAAAAALL;
  if (!pthread_mutexattr_init(&v3))
  {
    pthread_mutexattr_settype(&v3, 2);
    pthread_mutex_init((pthread_mutex_t *)((char *)this + 32), &v3);
    pthread_mutexattr_destroy(&v3);
  }
  operator new();
}

void ARPLReceiveSetElement::~ARPLReceiveSetElement(ARPLReceiveSetElement *this)
{
  ARPLAssociationSetElement::~ARPLAssociationSetElement(this);

  JUMPOUT(0x1E4E57980);
}

void sub_1E24264DC(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x10A1C4082659322);
  _Unwind_Resume(a1);
}

void ARPLAssociationSetElement::~ARPLAssociationSetElement(ARPLAssociationSetElement *this)
{
  ARPLAssociationSetElement::~ARPLAssociationSetElement(this);

  JUMPOUT(0x1E4E57980);
}

{
  uint64_t v2;
  uint64_t v3;

  pthread_mutexattr_t v2 = 0;
  *(void *)this = &unk_1F3D3BB68;
  do
  {
    *((unsigned char *)this + v2 + 632) = 8;
    pthread_mutexattr_t v3 = *((void *)this + v2 + 15);
    if (v3) {
      MEMORY[0x1E4E57980](v3, 0x1000C404C6E3E2BLL);
    }
    ++v2;
  }
  while (v2 != 64);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 32));
}

void sub_1E242654C(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x10A1C4082659322);
  _Unwind_Resume(a1);
}

void ARPLSendingSetElement::~ARPLSendingSetElement(ARPLSendingSetElement *this)
{
  ARPLAssociationSetElement::~ARPLAssociationSetElement(this);

  JUMPOUT(0x1E4E57980);
}

void sub_1E2426648(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x10A1C4082659322);
  _Unwind_Resume(a1);
}

void ARPLDataQueue::~ARPLDataQueue(ARPLDataQueue *this)
{
  for (uint64_t i = *(void *)this; *(void *)this; uint64_t i = *(void *)this)
  {
    *(void *)this = *(void *)i;
    pthread_mutexattr_t v3 = *(const void **)(i + 16);
    if (v3) {
      CFRelease(v3);
    }
    *(void *)(i + 16) = 0;
    *(_DWORD *)(i + 12) = 0;
    MEMORY[0x1E4E57980](i, 0x1060C40147352C3);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

void sub_1E24266DC(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x1060C40147352C3);
  _Unwind_Resume(a1);
}

void CARPL::~CARPL(CARPL *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)this = 1;
  if (*((unsigned char *)this + 16) && *((void *)this + 1))
  {
    do
    {
      timeval v20 = (timeval)xmmword_1E25A2C80;
      v20.__darwin_suseconds_t tv_usec = 50000;
      select(0, 0, 0, 0, &v20);
    }
    while (*((void *)this + 1));
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 216));
  pthread_mutexattr_t v2 = (void **)((char *)this + 208);
  while (1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 216));
    pthread_mutexattr_t v3 = *v2;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 216));
    if (!v3) {
      break;
    }
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 216));
    uint64_t v4 = *v2;
    *pthread_mutexattr_t v2 = (void *)**v2;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 216));
    unsigned int v5 = (const void *)v4[2];
    if (v5) {
      CFRelease(v5);
    }
    _DWORD v4[2] = 0;
    *((_DWORD *)v4 + 3) = 0;
    MEMORY[0x1E4E57980](v4, 0x1060C40147352C3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 216));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 288));
  size_t v6 = (void **)((char *)this + 280);
  while (1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 288));
    int v7 = *v6;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 288));
    if (!v7) {
      break;
    }
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 288));
    int v8 = *v6;
    NSObject *v6 = (void *)**v6;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 288));
    uint64_t v9 = (const void *)v8[2];
    if (v9) {
      CFRelease(v9);
    }
    void v8[2] = 0;
    *((_DWORD *)v8 + 3) = 0;
    MEMORY[0x1E4E57980](v8, 0x1060C40147352C3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 288));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  uint64_t v10 = (void **)((char *)this + 352);
  while (1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
    int v11 = *v10;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 360));
    if (!v11) {
      break;
    }
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
    timeval v12 = *v10;
    *uint64_t v10 = (void *)**v10;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 360));
    uint64_t v13 = (const void *)v12[2];
    if (v13) {
      CFRelease(v13);
    }
    void v12[2] = 0;
    *((_DWORD *)v12 + 3) = 0;
    MEMORY[0x1E4E57980](v12, 0x1060C40147352C3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 360));
  int v14 = (const void *)*((void *)this + 4);
  if (v14)
  {
    CFRelease(v14);
    *((void *)this + 4) = 0;
  }
  BOOL v15 = (const void *)*((void *)this + 3);
  if (v15)
  {
    CFRelease(v15);
    *((void *)this + 3) = 0;
  }
  while (1)
  {
    uint64_t v16 = *((void *)this + 23);
    if (!v16) {
      break;
    }
    *((void *)this + 23) = *(void *)(v16 + 16);
    CFSetRemoveValue(*(CFMutableSetRef *)(v16 + 24), (const void *)v16);
  }
  while (1)
  {
    unsigned int v17 = (void *)*((void *)this + 24);
    if (!v17) {
      break;
    }
    *((void *)this + 24) = v17[2];
    (*(void (**)(void *))(*v17 + 8))(v17);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 120));
  uint64_t v18 = *((void *)this + 5);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 6);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  *((unsigned char *)this + 16) = 0;
  ARPLDataQueue::~ARPLDataQueue((CARPL *)((char *)this + 352));
  ARPLDataQueue::~ARPLDataQueue((CARPL *)((char *)this + 280));
  ARPLDataQueue::~ARPLDataQueue((CARPL *)((char *)this + 208));
}

void sub_1E2426A24(_Unwind_Exception *exception_object)
{
}

void ARPLDataQueueNode::ARPLDataQueueNode(ARPLDataQueueNode *this)
{
  *(void *)this = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 3) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 44) = 0;
  *((double *)this + 28) = micro();
  MakeIPPORT();
}

uint64_t VCCallInfoBlobReadFrom(id *a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_42;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_44;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_42:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_44:
          uint64_t v36 = 16;
          goto LABEL_49;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          break;
        case 3u:
          String = (void *)PBReaderReadString();

          id v30 = String;
          uint64_t v31 = 4;
          goto LABEL_40;
        case 4u:
          long long v32 = (void *)PBReaderReadString();

          id v30 = v32;
          uint64_t v31 = 5;
          goto LABEL_40;
        case 5u:
          long long v33 = (void *)PBReaderReadString();

          id v30 = v33;
          uint64_t v31 = 6;
          goto LABEL_40;
        case 6u:
          long long v34 = (void *)PBReaderReadString();

          id v30 = v34;
          uint64_t v31 = 3;
          goto LABEL_40;
        case 7u:
          long long v35 = (void *)PBReaderReadString();

          id v30 = v35;
          uint64_t v31 = 1;
LABEL_40:
          a1[v31] = v30;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v26 = *v3;
        unint64_t v27 = *(void *)(a2 + v26);
        if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
        *(void *)(a2 + v26) = v27 + 1;
        v19 |= (unint64_t)(v28 & 0x7F) << v24;
        if ((v28 & 0x80) == 0) {
          goto LABEL_46;
        }
        v24 += 7;
        BOOL v14 = v25++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_48;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_48:
      uint64_t v36 = 20;
LABEL_49:
      *(_DWORD *)((char *)a1 + v36) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

size_t VCAudioPayloadConfig_GetDescription(size_t result, char *a2, size_t *a3)
{
  if (a3)
  {
    size_t v4 = *a3;
    *a3 = 0;
    if (result)
    {
      if (a2)
      {
        strlcpy(a2, (const char *)[*(id *)(result + 88) UTF8String], v4);
        uint64_t result = strlen(a2);
        *a3 = result;
      }
    }
  }
  return result;
}

uint64_t JLagProcessor_Initialize(uint64_t a1, _OWORD *a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        JLagProcessor_Initialize_cold_1(v4);
      }
    }
  }
  else
  {
    *(_OWORD *)(a1 + 416) = *a2;
  }
  return v3;
}

void JLagProcessor_NewStream(uint64_t a1, __int16 *a2, int a3, int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3 && a4)
  {
    __int16 v8 = *a2;
    *(_WORD *)(a1 + 396) = *a2;
    *(_WORD *)(a1 + 364) = v8;
    unsigned int v9 = *((_DWORD *)a2 + 1);
    *(_DWORD *)(a1 + 392) = v9;
    *(_DWORD *)(a1 + 360) = v9;
    uint64_t v10 = *((void *)a2 + 2);
    *(void *)(a1 + 384) = v10;
    *(void *)(a1 + 352) = v10;
    *(void *)(a1 + 400) = 0x40DFFFC000000000;
    *(void *)(a1 + 368) = 0x40DFFFC000000000;
    *(void *)a1 = 0;
    *(_OWORD *)(a1 + 16) = xmmword_1E25A2F20;
    *(_DWORD *)(a1 + 340) = a4;
    *(_DWORD *)(a1 + 336) = a3;
    *(_OWORD *)(a1 + 432) = xmmword_1E25A2F30;
    *(void *)(a1 + 448) = v9;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v11 = VRTraceErrorLogLevelToCSTR();
    unint64_t v12 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v13 = 136316674;
      uint64_t v14 = v11;
      __int16 v15 = 2080;
      uint64_t v16 = "JLagProcessor_NewStream";
      __int16 v17 = 1024;
      int v18 = 43;
      __int16 v19 = 2048;
      uint64_t v20 = a1;
      __int16 v21 = 2048;
      char v22 = a2;
      __int16 v23 = 1024;
      int v24 = a3;
      __int16 v25 = 1024;
      int v26 = a4;
      _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter passed to lag processor new stream. LagProcessor=%p, lagPacket=%p, TSRate=%u, samplesPerFrame=%u", (uint8_t *)&v13, 0x3Cu);
    }
  }
}

uint64_t JLagProcessor_ResetLagReference(uint64_t result)
{
  if (result)
  {
    if (!*(unsigned char *)(result + 344)) {
      *(unsigned char *)(result + 344) = 1;
    }
  }
  return result;
}

float JLagProcessor_GetOWRD(uint64_t a1)
{
  if (a1) {
    return *(float *)(a1 + 48);
  }
  else {
    return NAN;
  }
}

uint64_t JLagProcessor_GetStatistics(uint64_t a1)
{
  if (a1) {
    return a1 + 432;
  }
  else {
    return 0;
  }
}

double JLagProcessor_Process(uint64_t a1, unsigned __int16 *a2, int a3, int a4, unsigned int a5)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (a5 > 4 || !a1 || !a2 || (a4 | a3) < 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      uint64_t v14 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 136316930;
        uint64_t v76 = v13;
        __int16 v77 = 2080;
        long long v78 = "JLagProcessor_Process";
        __int16 v79 = 1024;
        int v80 = 370;
        __int16 v81 = 2048;
        *(void *)int v82 = a1;
        *(_WORD *)&v82[8] = 2048;
        uint64_t v83 = a2;
        *(_WORD *)long long v84 = 1024;
        *(_DWORD *)&v84[2] = a3;
        *(_WORD *)&v84[6] = 1024;
        *(_DWORD *)&v84[8] = a4;
        __int16 v85 = 1024;
        unsigned int v86 = a5;
        _os_log_error_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter passed to lag processor. LagProcessor=%p lagPacket=%p samplesPerFrame=%d videoQSize=%d, state=%d", buf, 0x42u);
      }
    }
    return NAN;
  }
  if (!*((unsigned char *)a2 + 36))
  {
    if ((unsigned __int16)(*a2 - *(_WORD *)(a1 + 364)) >= 0x7FFFu)
    {
      unsigned int v17 = *(_DWORD *)(a1 + 8);
      if (v17 <= 3 && *(_DWORD *)(a1 + 12) <= 0xBB7u)
      {
        *(_DWORD *)(a1 + 8) = v17 + 1;
        double v18 = *(double *)(a1 + 368);
        if (v18 == 32767.0) {
          double v15 = 0.0350000004;
        }
        else {
          double v15 = *(double *)(a1 + 368);
        }
LABEL_45:
        *(double *)(a1 + 432) = v15;
        *(double *)(a1 + 440) = v18;
        *(_DWORD *)(a1 + 452) = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 448) = *(_DWORD *)(a1 + 360);
        if (a5 != 4)
        {
          if (a5 == 2)
          {
            JLagProcessor_UpdateAverages(a1, (uint64_t)a2, a3, 1, v15);
            JLagProcessor_RecordOWRD(a1, v15);
          }
          else if (a5 == 1 && v15 <= 0.0250000004)
          {
            *(double *)(a1 + 16) = v15;
            *(double *)(a1 + 24) = fabs(v15) + 0.005;
            *(double *)(a1 + 32) = v15;
            *(double *)(a1 + 40) = v15;
          }
          goto LABEL_92;
        }
        int v42 = a3;
        if (a3 <= 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              JLagProcessor_Process_cold_2();
            }
          }
          int v42 = *((_DWORD *)a2 + 6);
          if (v42 <= 0) {
            int v42 = *(_DWORD *)(a1 + 340);
          }
        }
        double v43 = *(double *)(a1 + 24);
        HIDWORD(v44) = 1066695393;
        LODWORD(v18) = *(_DWORD *)(a1 + 336);
        double v45 = (double)*(unint64_t *)&v18;
        double v46 = (double)a4 / v45;
        if (*(_DWORD *)(a1 + 52))
        {
          if (v15 - *(double *)(a1 + 16) <= *(double *)(a1 + 72)) {
            goto LABEL_62;
          }
          unsigned int v47 = *(_DWORD *)(a1 + 332) + 1;
          *(_DWORD *)(a1 + 332) = v47;
          if (v47 < 5) {
            goto LABEL_73;
          }
          if (*(double *)(a1 + 80) + 0.01 < v15)
          {
LABEL_62:
            if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
              goto LABEL_80;
            }
            uint64_t v48 = VRTraceErrorLogLevelToCSTR();
            __int16 v49 = *MEMORY[0x1E4F47A50];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_80;
            }
            *(_DWORD *)CMTime buf = 136315650;
            uint64_t v76 = v48;
            __int16 v77 = 2080;
            long long v78 = "JLagProcessor_DetectSpike";
            __int16 v79 = 1024;
            int v80 = 303;
            BOOL v50 = " [%s] %s:%d Leaving OWRD SPIKE due to recovery";
            goto LABEL_65;
          }
          if (v47 > 0x1D)
          {
            int v66 = 0;
            uint64_t v67 = *(int *)(a1 + 328);
            *(double *)(a1 + 8 * v67 + 88) = v15;
            int v68 = ((int)v67 + 1) % 30;
            double v69 = v43 * 1.25 + 0.0199999996 + v46;
            *(_DWORD *)(a1 + 328) = v68;
            double v70 = 0.0;
            double v71 = 0.0;
            do
            {
              double v71 = v71 + *(double *)(a1 + 88 + 8 * ((v68 + v66) % 30));
              double v70 = v70
                  + *(double *)(a1
                              + 88
                              + 8
                              * (((char)(v68
                                       + 15
                                       - 30
                                       * (((char)((unsigned __int16)(137 * (char)(v68 + 15)) >> 8) >> 4)
                                        + ((((unsigned __int16)(137 * (char)(v68 + 15)) >> 8) & 0x80) >> 7)))
                                + v66++)
                               % 30));
            }
            while (v66 != 15);
            double v44 = vabdd_f64(v70, v71);
            double v43 = v69 * 15.0;
            if (v44 < v43)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
                goto LABEL_80;
              }
              uint64_t v72 = VRTraceErrorLogLevelToCSTR();
              __int16 v49 = *MEMORY[0x1E4F47A50];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_80;
              }
              *(_DWORD *)CMTime buf = 136315650;
              uint64_t v76 = v72;
              __int16 v77 = 2080;
              long long v78 = "JLagProcessor_DetectSpike";
              __int16 v79 = 1024;
              int v80 = 327;
              BOOL v50 = " [%s] %s:%d Leaving OWRD SPIKE due to flatness";
LABEL_65:
              uint64_t v51 = v49;
              uint32_t v52 = 28;
LABEL_79:
              _os_log_impl(&dword_1E1EA4000, v51, OS_LOG_TYPE_DEFAULT, v50, buf, v52);
LABEL_80:
              *(_DWORD *)(a1 + 52) = 0;
              goto LABEL_91;
            }
          }
          else
          {
LABEL_73:
            *(double *)(a1 + 8 * v47 + 88) = v15;
          }
          if (*(unsigned char *)(a1 + 416))
          {
            LODWORD(v43) = *(_DWORD *)(a1 + 4);
            LODWORD(v44) = *((_DWORD *)a2 + 1);
            if (((double)*(unint64_t *)&v44 + (double)*(unint64_t *)&v43 * 4294967300.0) / v45
               - *(double *)(a1 + 64) > 8.0)
            {
LABEL_76:
              if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
                goto LABEL_80;
              }
              uint64_t v61 = VRTraceErrorLogLevelToCSTR();
              char v62 = *MEMORY[0x1E4F47A50];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_80;
              }
              int v63 = *(_DWORD *)(a1 + 332);
              *(_DWORD *)CMTime buf = 136315906;
              uint64_t v76 = v61;
              __int16 v77 = 2080;
              long long v78 = "JLagProcessor_DetectSpike";
              __int16 v79 = 1024;
              int v80 = 335;
              __int16 v81 = 1024;
              *(_DWORD *)int v82 = v63;
              BOOL v50 = " [%s] %s:%d Leaving OWRD SPIKE due to timeout %d";
              uint64_t v51 = v62;
              uint32_t v52 = 34;
              goto LABEL_79;
            }
          }
          else
          {
            int v64 = *((_DWORD *)a2 + 8);
            if (v64 <= 0)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  JLagProcessor_Process_cold_1();
                }
              }
              int v64 = 1;
            }
            LODWORD(v45) = *(_DWORD *)(a1 + 336);
            if (*(_DWORD *)(a1 + 332) > ((double)*(unint64_t *)&v45 * 8.0 / (double)(v64 * v42))) {
              goto LABEL_76;
            }
          }
          double v65 = *(double *)(a1 + 80);
          if (v65 >= v15) {
            *(double *)(a1 + 80) = v15 * 0.05 + v65 * 0.95;
          }
          else {
            *(double *)(a1 + 80) = v15;
          }
        }
        else
        {
          double v53 = v43 * 4.0 + 0.0199999996 + v46;
          if (v15 - *(double *)(a1 + 368) > v53)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              uint64_t v55 = VRTraceErrorLogLevelToCSTR();
              size_t v56 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v57 = *(unsigned __int16 **)(a1 + 368);
                *(_DWORD *)CMTime buf = 136316418;
                uint64_t v76 = v55;
                __int16 v77 = 2080;
                long long v78 = "JLagProcessor_DetectSpike";
                __int16 v79 = 1024;
                int v80 = 288;
                __int16 v81 = 2048;
                *(double *)int v82 = v15;
                *(_WORD *)&v82[8] = 2048;
                uint64_t v83 = v57;
                *(_WORD *)long long v84 = 2048;
                *(double *)&v84[2] = v53;
                _os_log_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Entering OWRD SPIKE %.4f - %.4f > %.4f", buf, 0x3Au);
              }
            }
            *(_OWORD *)(a1 + 88) = 0u;
            *(double *)(a1 + 72) = v53;
            *(double *)(a1 + 80) = v15;
            *(_OWORD *)(a1 + 104) = 0u;
            *(_OWORD *)(a1 + 120) = 0u;
            *(_OWORD *)(a1 + 136) = 0u;
            *(_OWORD *)(a1 + 152) = 0u;
            *(_OWORD *)(a1 + 168) = 0u;
            *(_OWORD *)(a1 + 184) = 0u;
            *(_OWORD *)(a1 + 200) = 0u;
            *(_OWORD *)(a1 + 216) = 0u;
            *(_OWORD *)(a1 + 232) = 0u;
            *(_OWORD *)(a1 + 248) = 0u;
            *(_OWORD *)(a1 + 264) = 0u;
            *(_OWORD *)(a1 + 280) = 0u;
            *(_OWORD *)(a1 + 296) = 0u;
            *(_OWORD *)(a1 + 312) = 0u;
            *(void *)(a1 + 328) = 0;
            *(double *)(a1 + 88) = v15;
            *(_DWORD *)(a1 + 52) = 1;
            unint64_t v58 = *((void *)a2 + 2);
            *(void *)(a1 + 56) = v58;
            LODWORD(v58) = *(_DWORD *)(a1 + 4);
            LODWORD(v54) = *((_DWORD *)a2 + 1);
            *(double *)&unint64_t v59 = (double)v54;
            double v60 = *(double *)&v59 + (double)v58 * 4294967300.0;
            LODWORD(v59) = *(_DWORD *)(a1 + 336);
            *(double *)(a1 + 64) = v60 / (double)v59;
          }
        }
        if (*(_DWORD *)(a1 + 52))
        {
LABEL_92:
          *(double *)(a1 + 368) = v15;
          return v15;
        }
LABEL_91:
        JLagProcessor_RecordOWRD(a1, v15);
        JLagProcessor_UpdateAverages(a1, (uint64_t)a2, a3, 0, v15);
        goto LABEL_92;
      }
    }
    double v73 = NAN;
    double v74 = NAN;
    JLagProcessor_CalculatePacketLag(a1, (uint64_t)a2, &v74, &v73);
    if (a5 <= 3)
    {
      *(_WORD *)(a1 + 364) = *a2;
      *(void *)(a1 + 352) = *((void *)a2 + 2);
      *(_DWORD *)(a1 + 360) = *((_DWORD *)a2 + 1);
      if (!*(unsigned char *)(a1 + 345) && !*((unsigned char *)a2 + 37))
      {
        JLagProcessor_CalculatePacketLag(a1, (uint64_t)a2, &v74, &v73);
        *(unsigned char *)(a1 + 345) = 1;
      }
      *(_DWORD *)(a1 + 4) = 0;
      *(_DWORD *)(a1 + 12) = 0;
      goto LABEL_44;
    }
    ++*(_DWORD *)(a1 + 12);
    if (fabs(v74) <= 5.0) {
      goto LABEL_34;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v19 = VRTraceErrorLogLevelToCSTR();
      uint64_t v20 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *a2;
        int v22 = *((_DWORD *)a2 + 1);
        int v23 = *(unsigned __int16 *)(a1 + 364);
        int v24 = *(_DWORD *)(a1 + 360);
        *(_DWORD *)CMTime buf = 136316674;
        uint64_t v76 = v19;
        __int16 v77 = 2080;
        long long v78 = "JLagProcessor_ComputeLag";
        __int16 v79 = 1024;
        int v80 = 147;
        __int16 v81 = 1024;
        *(_DWORD *)int v82 = v21;
        *(_WORD *)&v82[4] = 1024;
        *(_DWORD *)&v82[6] = v22;
        LOWORD(v83) = 1024;
        *(_DWORD *)((char *)&v83 + 2) = v23;
        HIWORD(v83) = 1024;
        *(_DWORD *)long long v84 = v24;
        _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Spurious lag noted (Pkt: SN:0X%4X TS:0X%8X) (Ref: SN:0X%4X TS:0X%8X)", buf, 0x34u);
      }
    }
    double v74 = *(double *)(a1 + 368);
    if (fabs(v73) >= 2.5 || vabdd_f64(v73, *(double *)(a1 + 400)) >= 2.5)
    {
LABEL_34:
      *(_DWORD *)(a1 + 408) = 0;
    }
    else
    {
      int v25 = *(_DWORD *)(a1 + 408);
      *(_DWORD *)(a1 + 408) = v25 + 1;
      if (v25 > 9) {
        goto LABEL_36;
      }
    }
    if (!*(unsigned char *)(a1 + 344))
    {
LABEL_44:
      *(_DWORD *)(a1 + 392) = *((_DWORD *)a2 + 1);
      *(void *)(a1 + 384) = *((void *)a2 + 2);
      *(_WORD *)(a1 + 396) = *a2;
      double v15 = v74;
      *(double *)(a1 + 400) = v73;
      double v18 = *(double *)(a1 + 368);
      goto LABEL_45;
    }
LABEL_36:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v26 = VRTraceErrorLogLevelToCSTR();
      uint64_t v27 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v28 = *(unsigned __int16 *)(a1 + 364);
        int v29 = *(_DWORD *)(a1 + 360);
        int v30 = *(unsigned __int16 *)(a1 + 396);
        int v31 = *(_DWORD *)(a1 + 392);
        int v32 = *(unsigned __int8 *)(a1 + 344);
        *(_DWORD *)CMTime buf = 136316930;
        uint64_t v76 = v26;
        __int16 v77 = 2080;
        long long v78 = "JLagProcessor_ComputeLag";
        __int16 v79 = 1024;
        int v80 = 165;
        __int16 v81 = 1024;
        *(_DWORD *)int v82 = v28;
        *(_WORD *)&v82[4] = 1024;
        *(_DWORD *)&v82[6] = v29;
        LOWORD(v83) = 1024;
        *(_DWORD *)((char *)&v83 + 2) = v30;
        HIWORD(v83) = 1024;
        *(_DWORD *)long long v84 = v31;
        *(_WORD *)&v84[4] = 1024;
        *(_DWORD *)&v84[6] = v32;
        _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Moving reference to secondary (Was: SN:0X%4X TS:0X%8X) (Now: SN:0X%4X TS:0X%8X), reset:%d", buf, 0x3Au);
      }
    }
    *(_WORD *)(a1 + 364) = *(_WORD *)(a1 + 396);
    *(void *)(a1 + 352) = *(void *)(a1 + 384);
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a1 + 392);
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 408) = 0;
    *(_DWORD *)(a1 + 12) = 0;
    *(unsigned char *)(a1 + 344) = 0;
    double v74 = v73;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v39 = VRTraceErrorLogLevelToCSTR();
      long long v40 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v76 = v39;
        __int16 v77 = 2080;
        long long v78 = "JLagProcessor_ComputeLag";
        __int16 v79 = 1024;
        int v80 = 177;
        _os_log_impl(&dword_1E1EA4000, v40, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Reference changed. Reset OWRD", buf, 0x1Cu);
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    uint64_t v41 = *(void *)(a1 + 424);
    if (v41) {
      VRLogfilePrint(v41, "Moved reference to Secondary \n", v33, v34, v35, v36, v37, v38, SLOBYTE(v73));
    }
    goto LABEL_44;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v10 = VRTraceErrorLogLevelToCSTR();
    uint64_t v11 = *MEMORY[0x1E4F47A50];
    unint64_t v12 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v76 = v10;
        __int16 v77 = 2080;
        long long v78 = "JLagProcessor_Process";
        __int16 v79 = 1024;
        int v80 = 375;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Skip lag computation", buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      JLagProcessor_Process_cold_3(v10);
    }
  }
  return NAN;
}

double JLagProcessor_UpdateAverages(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  if (!a3) {
    a3 = *(_DWORD *)(a2 + 24);
  }
  double v5 = 0.5;
  if (!a4)
  {
    LODWORD(v5) = *(_DWORD *)(a1 + 336);
    double v5 = 2.0 / ((double)*(unint64_t *)&v5 * 20.0 / (double)a3 / (double)*(int *)(a2 + 32) + 1.0);
  }
  double v6 = *(double *)(a1 + 24);
  double v7 = v5 * a5 + *(double *)(a1 + 16) * (1.0 - v5);
  *(double *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v5 * vabdd_f64(a5, v7) + v6 * (1.0 - v5);
  double result = 0.003;
  if (v7 > 0.003)
  {
    *(double *)&unint64_t v9 = v7 + -0.003;
    *(double *)(a1 + 16) = v7 + -0.003;
    LODWORD(v9) = *(_DWORD *)(a1 + 336);
    double result = (double)v9 * 0.003;
    *(_DWORD *)(a1 + 360) -= result;
  }
  return result;
}

void JLagProcessor_RecordOWRD(uint64_t a1, double a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 52))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 136315906;
        uint64_t v22 = v3;
        __int16 v23 = 2080;
        int v24 = "JLagProcessor_RecordOWRD";
        __int16 v25 = 1024;
        int v26 = 220;
        __int16 v27 = 2048;
        double v28 = a2;
        double v5 = " [%s] %s:%d Spike detected! Discarding lag sample %f";
        double v6 = v4;
LABEL_5:
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v21, 0x26u);
      }
    }
  }
  else
  {
    double v8 = *(double *)(a1 + 40);
    if (a2 - v8 <= 5.0 && (double v9 = *(double *)(a1 + 32), v9 - a2 <= 5.0))
    {
      if (*(_DWORD *)(a1 + 12))
      {
        double v14 = a2 * 0.0001 + v9 * 0.9999;
        double v15 = a2 * 0.1 + v8 * 0.9;
        *(double *)(a1 + 32) = v14;
        *(double *)(a1 + 40) = v15;
        double v16 = v15 - v14;
        if (v15 - v14 < 0.0)
        {
          *(double *)(a1 + 32) = v15;
          double v16 = 0.0;
        }
        float v17 = v16;
        *(float *)(a1 + 48) = v17;
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v18 = VRTraceErrorLogLevelToCSTR();
        uint64_t v19 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          double v20 = *(float *)(a1 + 48);
          int v21 = 136315906;
          uint64_t v22 = v18;
          __int16 v23 = 2080;
          int v24 = "JLagProcessor_RecordOWRD";
          __int16 v25 = 1024;
          int v26 = 234;
          __int16 v27 = 2048;
          double v28 = v20;
          double v5 = " [%s] %s:%d Just picked a new reference. OWRD should have been reset. OWRD = %f";
          double v6 = v19;
          goto LABEL_5;
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      uint64_t v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        int v21 = 136316674;
        uint64_t v22 = v10;
        __int16 v23 = 2080;
        int v24 = "JLagProcessor_RecordOWRD";
        __int16 v25 = 1024;
        int v26 = 229;
        __int16 v27 = 2048;
        double v28 = a2;
        __int16 v29 = 2048;
        uint64_t v30 = v12;
        __int16 v31 = 2048;
        uint64_t v32 = v13;
        __int16 v33 = 2048;
        uint64_t v34 = 0x4014000000000000;
        _os_log_error_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_ERROR, " [%s] %s:%d Lag (%fs) looks spurious (short %fs: long %fs : threshold %fs), discarding", (uint8_t *)&v21, 0x44u);
      }
    }
  }
}

double JLagProcessor_CalculatePacketLag(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v8 = *(_DWORD *)(a2 + 4) - *(_DWORD *)(a1 + 360);
  if (v8 - *(_DWORD *)a1 <= 0x7FFFFFFE)
  {
    if (v8 < *(_DWORD *)a1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v9 = VRTraceErrorLogLevelToCSTR();
        uint64_t v10 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 136315650;
          uint64_t v15 = v9;
          __int16 v16 = 2080;
          float v17 = "JLagProcessor_CalculatePacketLag";
          __int16 v18 = 1024;
          int v19 = 79;
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Time counter wrapped around", (uint8_t *)&v14, 0x1Cu);
        }
      }
      ++*(_DWORD *)(a1 + 4);
    }
    *(_DWORD *)a1 = v8;
  }
  double v11 = *(double *)(a1 + 352);
  double result = *(double *)(a2 + 16) - v11;
  if (a3)
  {
    LODWORD(v11) = *(_DWORD *)(a1 + 4);
    *(double *)&unint64_t v13 = (double)v8;
    LODWORD(v13) = *(_DWORD *)(a1 + 336);
    double v11 = result - ((double)v8 + (double)*(unint64_t *)&v11 * 4294967300.0) / (double)v13;
    *a3 = v11;
  }
  *(double *)(a2 + 8) = result;
  if (a4)
  {
    LODWORD(v11) = *(_DWORD *)(a1 + 336);
    double result = *(double *)(a2 + 16)
           - *(double *)(a1 + 384)
           - (double)(*(_DWORD *)(a2 + 4) - *(_DWORD *)(a1 + 392)) / (double)*(unint64_t *)&v11;
    *a4 = result;
  }
  return result;
}

uint64_t VCAudioUnit_AudioUnitSetProperty()
{
  return off_1EB5E6360();
}

uint64_t VCAudioUnit_AudioUnitGetProperty()
{
  return off_1EB5E6368();
}

uint64_t VCAudioUnit_AudioUnitRender()
{
  return off_1EB5E6370();
}

uint64_t VCAudioUnit_AudioUnitComplexRender()
{
  return off_1EB5E6378();
}

uint64_t VCAudioUnit_AudioUnitInitialize()
{
  return _audioUnitStub();
}

uint64_t VCAudioUnit_AudioUnitUninitialize()
{
  return off_1EB5E6358();
}

uint64_t VCAudioUnit_AudioOutputUnitStart()
{
  return off_1EB5E6380();
}

uint64_t VCAudioUnit_AudioOutputUnitStop()
{
  return off_1EB5E6388();
}

uint64_t VCAudioUnit_AudioUnitSetParameter()
{
  return off_1EB5E6390();
}

BOOL JTargetJBEstimator_Initialize(uint64_t a1, long long *a2)
{
  if (a1)
  {
    uint64_t v3 = (unsigned char *)(a1 + 79656);
    uint64_t v4 = (void **)(a1 + 72168);
    double v5 = (void *)(a1 + 66056);
    long long v6 = *a2;
    *(_OWORD *)(a1 + 80648) = a2[1];
    *(_OWORD *)(a1 + 80632) = v6;
    long long v7 = a2[2];
    long long v8 = a2[3];
    long long v9 = a2[4];
    *(_OWORD *)(a1 + 80712) = a2[5];
    *(_OWORD *)(a1 + 80696) = v9;
    *(_OWORD *)(a1 + 80680) = v8;
    *(_OWORD *)(a1 + 80664) = v7;
    long long v10 = a2[6];
    long long v11 = a2[7];
    long long v12 = a2[8];
    *(void *)(a1 + 80776) = *((void *)a2 + 18);
    *(_OWORD *)(a1 + 80760) = v12;
    *(_OWORD *)(a1 + 80744) = v11;
    *(_OWORD *)(a1 + 80728) = v10;
    unint64_t v13 = *(const void **)(a1 + 80736);
    if (v13)
    {
      CFRetain(v13);
      VCJBTargetEstimatorSynchronizer_RegisterClient(*(void *)(a1 + 80736), (unsigned char *)(a1 + 81152), *(_DWORD *)(a1 + 80752));
    }
    double v14 = *(double *)(a1 + 80632);
    double v15 = *(double *)(a1 + 80648);
    double v16 = *(double *)(a1 + 80656);
    *(double *)(a1 + 24) = v14;
    *(double *)(a1 + 32) = v15;
    *(double *)(a1 + 40) = v16;
    int v17 = *(_DWORD *)(a1 + 80664);
    *(double *)(a1 + 79448) = v15;
    *(double *)(a1 + 79456) = v15;
    *(unsigned char *)(a1 + 66096) = *(unsigned char *)(a1 + 80704);
    *(_OWORD *)(a1 + 66104) = *(_OWORD *)(a1 + 80712);
    *(void *)(a1 + 79640) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 8) = v17;
    *(_DWORD *)(a1 + 66064) = 0;
    *double v5 = 0;
    *(_DWORD *)(a1 + 66124) = 0;
    *(void *)(a1 + 66088) = 0;
    *(_OWORD *)(a1 + 66072) = 0u;
    *uint64_t v3 = 1;
    if (v17) {
      double v14 = v16;
    }
    *(double *)(a1 + 80584) = v14;
    *(void *)(a1 + 80576) = *(void *)(a1 + 80584);
    *(void *)(a1 + 80592) = *(void *)(a1 + 80584);
    *(double *)(a1 + 80600) = v15;
    *(unsigned char *)(a1 + 79666) = 0;
    double v18 = *(double *)(a1 + 80672);
    *(void *)(a1 + 72152) = *(void *)(a1 + 80680);
    *(double *)(a1 + 72144) = v15;
    LODWORD(v3) = vcvtpd_u64_f64(v15 * 1000.0 / v18);
    *(void *)(a1 + 66128) = malloc_type_calloc((size_t)v3, 4uLL, 0x100004052888210uLL);
    *(_DWORD *)(a1 + 72160) = v3;
    *(_DWORD *)(a1 + 72136) = 0;
    double v19 = *(double *)(a1 + 80672);
    *(void *)(a1 + 78192) = *(void *)(a1 + 80680);
    double v20 = *(double *)(a1 + 32);
    *(double *)(a1 + 78184) = v20;
    LODWORD(v3) = vcvtpd_u64_f64(v20 * 1000.0 / v19);
    *uint64_t v4 = malloc_type_calloc((size_t)v3, 4uLL, 0x100004052888210uLL);
    *(_DWORD *)(a1 + 78200) = v3;
    *(_DWORD *)(a1 + 78176) = 0;
  }
  return a1 != 0;
}

double JTargetJBEstimator_NewStream(uint64_t a1, int a2, __int16 a3)
{
  uint64_t v5 = a1 + 80576;
  _JTargetJBEstimator_ResetHistory(a1, a3, 0);
  *(_DWORD *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(v5 + 8) = v6;
  *(void *)uint64_t v5 = *(void *)(v5 + 8);
  *(void *)(v5 + 16) = v6;
  double result = *(double *)(a1 + 32);
  *(double *)(v5 + 24) = result;
  *(_DWORD *)(a1 + 48) = a2;
  return result;
}

void _JTargetJBEstimator_ResetHistory(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v6 = (unsigned char *)(a1 + 79656);
  uint64_t v7 = a1 + 72168;
  uint64_t v8 = a1 + 66056;
  if (!a3)
  {
    uint64_t v9 = 40;
    if (!*(_DWORD *)(a1 + 8)) {
      uint64_t v9 = 24;
    }
    *(void *)(a1 + 80584) = *(void *)(a1 + v9);
    *(void *)(a1 + 80576) = *(void *)(a1 + 80584);
    *(void *)(a1 + 80592) = *(void *)(a1 + 80584);
    uint64_t v10 = *(void *)(a1 + 32);
    *(void *)(a1 + 80600) = v10;
    *(_DWORD *)(a1 + 80608) = 0;
    *(void *)(a1 + 80616) = 0;
    *(_DWORD *)(a1 + 66124) = 0;
    *(void *)(a1 + 66072) = 0;
    *(_OWORD *)(a1 + 66080) = 0u;
    *(void *)(a1 + 79448) = v10;
    *(void *)(a1 + 79456) = v10;
    *(_OWORD *)(a1 + 79576) = 0u;
  }
  *(_DWORD *)(a1 + 66064) = 0;
  bzero((void *)(a1 + 56), 0x2EE0uLL);
  bzero((void *)(a1 + 12056), 0x2EE0uLL);
  bzero((void *)(a1 + 24056), 0x1770uLL);
  bzero((void *)(a1 + 30056), 0x1770uLL);
  *(void *)uint64_t v8 = 0;
  *(void *)(v7 + 7472) = 0;
  *(_DWORD *)(a1 + 4) = a3;
  *(_WORD *)(v8 + 66) = a2;
  unsigned char *v6 = 1;
  bzero(*(void **)(v8 + 72), 4 * *(unsigned int *)(v8 + 6104));
  bzero((void *)(a1 + 66136), 0x1770uLL);
  *(_DWORD *)(v8 + 6080) = 0;
  bzero(*(void **)v7, 4 * *(unsigned int *)(v7 + 6032));
  bzero((void *)(a1 + 72176), 0x1770uLL);
  *(_DWORD *)(v7 + 6008) = 0;
}

void JTargetJBEstimator_Finalize(uint64_t a1)
{
  uint64_t v1 = a1 + 72168;
  uint64_t v2 = a1 + 66128;
  free(*(void **)(a1 + 66128));
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 6032) = 0;
  free(*(void **)v1);
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 6032) = 0;
  uint64_t v3 = *(const void **)(v1 + 8568);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(v1 + 8568) = 0;
  }
}

uint64_t JTargetJBEstimator_SetNetworkType(uint64_t result, int a2, int a3, int a4)
{
  BOOL v5 = a3 == 5 || a4 == 5;
  *(_DWORD *)double result = a2;
  *(unsigned char *)(result + 79664) = v5;
  *(unsigned char *)(result + 79665) = (a4 & 0xFFFFFFFE) == 8;
  return result;
}

double JTargetJBEstimator_UpdateJitterBufferParams(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(a1 + 80632) = *a2;
  *(void *)(a1 + 24) = v2;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
  double result = *((double *)a2 + 6);
  *(double *)(a1 + 72152) = result;
  *(double *)(a1 + 78192) = result;
  return result;
}

uint64_t JTargetJBEstimator_GetMinJBSize(uint64_t result)
{
  double v1 = *(double *)(result + 80632);
  if (*(unsigned char *)(result + 80776)) {
    double v1 = fmax(*(double *)(result + 16) * (double)*(int *)(result + 12), fmax(*(double *)(result + 16) + *(double *)(result + 16), v1));
  }
  *(double *)(result + 24) = v1;
  return result;
}

void JTargetJBEstimator_GetSharedSettings(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)(a2 + 8) = *(void *)(a1 + 80584);
    *(void *)(a2 + 16) = *(void *)(a1 + 80592);
    *(void *)(a2 + 24) = *(void *)(a1 + 80600);
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 80608);
    *(void *)(a2 + 40) = *(void *)(a1 + 80616);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      JTargetJBEstimator_GetSharedSettings_cold_1();
    }
  }
}

void JTargetJBEstimator_ResetHistory(uint64_t a1)
{
}

double JTargetJBEstimator_GetStatistical95pDelaySpread(uint64_t a1)
{
  double v1 = (double *)(a1 + 66072);
  if (*(double *)(a1 + 80624) - *(double *)(a1 + 80848) > 1.0) {
    _JTargetJBEstimation_CalculateMeanAndStdev(a1);
  }
  double result = v1[1841] + v1[1842] * 1.645 - *v1;
  v1[1848] = result;
  return result;
}

double _JTargetJBEstimation_CalculateMeanAndStdev(uint64_t a1)
{
  uint64_t v1 = a1 + 80624;
  *(void *)(a1 + 80784) = 0;
  *(_DWORD *)(a1 + 80792) = 0;
  int v2 = *(_DWORD *)(a1 + 66064);
  if (v2 <= 0)
  {
    char v16 = 0;
    *(void *)(a1 + 80800) = 0x7FF8000000000000;
  }
  else
  {
    unsigned int v4 = 0;
    uint64_t v5 = a1 + 56;
    int v6 = *(_DWORD *)(a1 + 66060);
    double v7 = 0.0;
    int v8 = v6;
    int v9 = *(_DWORD *)(a1 + 66064);
    do
    {
      if (*(_DWORD *)(a1 + 4 * (v8 % 1500) + 24056))
      {
        double v7 = v7 + *(double *)(v5 + 8 * (v8 % 1500));
        *(double *)(a1 + 80784) = v7;
        *(_DWORD *)(a1 + 80792) = ++v4;
      }
      ++v8;
      --v9;
    }
    while (v9);
    double v10 = (double)v4;
    double v11 = v7 / (double)v4;
    *(double *)(a1 + 80800) = v11;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    do
    {
      if (*(_DWORD *)(a1 + 4 * (v6 % 1500) + 24056))
      {
        long double v15 = *(double *)(v5 + 8 * (v6 % 1500)) - v11;
        double v14 = v14 + v15 * v15;
        double v13 = v13 + pow(v15, 3.0);
        double v12 = v12 + pow(v15, 4.0);
      }
      ++v6;
      --v2;
    }
    while (v2);
    char v16 = 0;
    if (v14 != 0.0 && v4)
    {
      long double v17 = sqrt(v14 / v10);
      *(long double *)(v1 + 184) = v17;
      *(long double *)(v1 + 192) = v13 / v10 / pow(v17, 3.0);
      *(long double *)(v1 + 200) = v12 / v10 / pow(v17, 4.0) + -3.0;
      char v16 = 1;
    }
  }
  *(unsigned char *)(v1 + 240) = v16;
  double result = *(double *)v1;
  *(void *)(v1 + 224) = *(void *)v1;
  return result;
}

uint64_t JTargetJBEstimator_GetStatistics(uint64_t a1)
{
  return a1 + 80896;
}

uint64_t JTargetJBEstimator_GetSpikeReportingMetrics(uint64_t a1)
{
  return a1 + 81160;
}

uint64_t JTargetJBEstimator_GetSpikeInfo(uint64_t a1)
{
  return a1 + 80872;
}

uint64_t JTargetJBEstimator_GetFrequentSpikeInfo(uint64_t a1)
{
  return a1 + 79672;
}

uint64_t JTargetJBEstimator_Process(uint64_t a1, double *a2, double a3)
{
  *(void *)((char *)&v237[2] + 2) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 80576;
  uint64_t v7 = a1 + 79600;
  double v8 = *(double *)(a1 + 66072);
  double v9 = *(double *)(a1 + 66080);
  uint64_t v229 = a1 + 66056;
  double v10 = micro();
  double v11 = a2[1];
  *(double *)(v6 + 48) = v11;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 5);
  unsigned int v12 = *(_DWORD *)(a1 + 48);
  if (v12) {
    *(double *)(a1 + 16) = (double)*((int *)a2 + 4) / (double)v12;
  }
  uint64_t v13 = a1 + 80872;
  uint64_t v14 = a1 + 78208;
  uint64_t v15 = a1 + 72168;
  unsigned int v16 = *((_DWORD *)a2 + 6);
  unsigned int v17 = *(_DWORD *)(v7 + 52);
  BOOL v18 = v16 >= v17;
  unsigned int v19 = v16 - v17;
  BOOL v20 = v18 || v19 > 0x7FFFFFFE;
  uint64_t v21 = v229;
  if (!v20) {
    *(_WORD *)(v229 + 64) = 257;
  }
  v228 = (void *)(a1 + 72168);
  if (*(unsigned char *)(v6 + 154))
  {
    if (*((unsigned char *)a2 + 40))
    {
LABEL_10:
      double v11 = a2[1];
      *(double *)(a1 + 81144) = v11;
      *(_DWORD *)(a1 + 81140) = v16;
      goto LABEL_11;
    }
    *(unsigned char *)(a1 + *(unsigned __int8 *)(a1 + 81017) + 81018) = 0;
    BOOL IsPacketBundled = _JTargetJBEstimator_IsPacketBundled(a1 + 81120, (uint64_t)a2);
    uint64_t v33 = *(unsigned __int8 *)(a1 + 81017);
    if (IsPacketBundled) {
      *(unsigned char *)(a1 + v33 + 81018) = 2;
    }
    *(unsigned char *)(a1 + 81017) = v33 + 1 - 100 * ((656 * (v33 + 1)) >> 16);
    unsigned int v34 = *(unsigned __int8 *)(a1 + 81016);
    if (v34 <= 0x63)
    {
      *(unsigned char *)(a1 + 81016) = v34 + 1;
      BOOL v20 = v34 > 0x31;
      LOBYTE(v34) = v34 + 1;
      if (!v20)
      {
        unsigned int v16 = *((_DWORD *)a2 + 6);
        uint64_t v21 = v229;
        goto LABEL_10;
      }
    }
    uint64_t v35 = 0;
    int v36 = 0;
    do
      v36 += *(unsigned __int8 *)(a1 + 81018 + v35++);
    while (v35 != 100);
    double v37 = (double)v36 / (double)v34;
    unsigned int v16 = *((_DWORD *)a2 + 6);
    uint64_t v21 = v229;
    if (v37 <= 0.8) {
      goto LABEL_10;
    }
    if (v16 == *(_DWORD *)(a1 + 81140) + 2 * *((_DWORD *)a2 + 4))
    {
      *(double *)(a1 + 81144) = a2[1];
      *(_DWORD *)(a1 + 81140) = v16;
LABEL_67:
      uint64_t v62 = 0;
      *(_DWORD *)(v7 + 52) = v16;
      goto LABEL_221;
    }
    BOOL v61 = _JTargetJBEstimator_IsPacketBundled(a1 + 81136, (uint64_t)a2);
    uint64_t v21 = v229;
    double v11 = a2[1];
    *(double *)(a1 + 81144) = v11;
    unsigned int v16 = *((_DWORD *)a2 + 6);
    *(_DWORD *)(a1 + 81140) = v16;
    if (v61) {
      goto LABEL_67;
    }
  }
LABEL_11:
  if (*(double *)(v7 + 40) != 0.0) {
    *(void *)(v7 + 40) = 0;
  }
  int v22 = *(unsigned __int16 *)a2;
  *(_WORD *)(a1 + 79480) = v22;
  v227 = a2;
  if (!*(unsigned char *)(v6 + 152))
  {
    double v25 = a3;
    goto LABEL_103;
  }
  if (*(_DWORD *)(a1 + 79556) == 1) {
    *(void *)(a1 + 79552) = 0;
  }
  double v23 = *(double *)(a1 + 78224);
  double v24 = a3 * 0.1 + *(double *)v14 * 0.9;
  *(double *)uint64_t v14 = v24;
  double v25 = a3;
  double v26 = a3;
  if (*(unsigned char *)(v6 + 153))
  {
    double v25 = a3;
    double v26 = a3;
    if (*(_DWORD *)(a1 + 79440) == 1)
    {
      double v26 = fmin(a3, *(double *)(a1 + 79448));
      double v25 = fmin(a3, *(double *)(a1 + 79456));
    }
  }
  int v27 = *(_DWORD *)(a1 + 79432);
  int v28 = *(_DWORD *)(a1 + 79436);
  if (v28)
  {
    if (!*(_DWORD *)(a1 + 79440))
    {
      double v29 = *(double *)(a1 + 78216) * 0.9801 + v26 * 0.0198;
      *(double *)(a1 + 78216) = v29;
      *(double *)(a1 + 78224) = v23 * 0.9801 + vabdd_f64(v26, v29) * 0.0198;
    }
    if (v28 > 74)
    {
      uint64_t v30 = v27;
      int v27 = (v27 + 1) % 75;
      *(_DWORD *)(a1 + 79432) = v27;
      uint64_t v31 = a1 + 8 * v30 + 78208;
      *(double *)(v31 + 24) = v24;
      *(double *)(v31 + 624) = v11;
      goto LABEL_37;
    }
  }
  else
  {
    *(double *)(a1 + 78216) = v26;
    *(void *)(a1 + 78224) = 0;
  }
  uint64_t v38 = a1 + 8 * ((v28 + v27) % 75) + 78208;
  *(double *)(v38 + 24) = v24;
  *(double *)(v38 + 624) = v11;
  *(_DWORD *)(a1 + 79436) = ++v28;
LABEL_37:
  double v45 = a3 - _JTargetJBEstimator_GetNewMinLag(a1, v25);
  if (!*(_DWORD *)(a1 + 79592))
  {
    *(_DWORD *)(a1 + 80876) = 0;
    int v52 = *(_DWORD *)(a1 + 79436);
    uint64_t v21 = v229;
    if (v52 < 11)
    {
      a2 = v227;
      goto LABEL_102;
    }
    int v53 = *(_DWORD *)(a1 + 79432);
    a2 = v227;
    if ((unsigned __int16)(v22 - *(_WORD *)(a1 + 79480)) >= 0x7FFFu)
    {
      double v55 = v23 * 4.0 + 0.0500000007;
    }
    else
    {
      double v54 = *(double *)(a1 + 8 * ((v53 + v52 - 2) % 75) + 78232);
      double v55 = v23 * 4.0 + 0.0500000007;
      if (a3 - v54 > v55)
      {
        int v56 = 1;
LABEL_69:
        *(_DWORD *)(a1 + 79592) = v56;
        *(double *)(v7 + 16) = v54;
        *(double *)(v7 + 24) = v11;
        *(double *)(v7 + 32) = v23;
        uint64_t v63 = *(void *)(v229 + 16);
        *(double *)uint64_t v7 = a3;
        *(void *)(v7 + 8) = v63;
        if (v45 > *(double *)(a1 + 24))
        {
          _JTargetJBEstimator_AddCandidateSpikeToHistory(a1, v39, v229, v40, v41, v42, v43, v44);
          uint64_t v21 = v229;
          if (*(unsigned char *)(v6 + 153)) {
            double v25 = fmin(a3, *(double *)(a1 + 79456));
          }
        }
        goto LABEL_102;
      }
    }
    int v57 = v52 - 2;
    BOOL v58 = 1;
    if (v55 > 0.5) {
      double v55 = 0.5;
    }
    int v59 = 3;
    while (1)
    {
      double v54 = *(double *)(a1 + 8 * ((v53 + v57) % 75) + 78232);
      double v60 = v11 - *(double *)(a1 + 8 * ((v53 + v57) % 75) + 78832);
      if (v60 > 0.5 && (a3 - v54) / v60 > v55) {
        break;
      }
      BOOL v58 = v59++ < v52;
      if (!--v57)
      {
        int v56 = 0;
        if (v58) {
          goto LABEL_69;
        }
        goto LABEL_102;
      }
    }
    int v56 = 2;
    if (!v58) {
      goto LABEL_102;
    }
    goto LABEL_69;
  }
  uint64_t v21 = v229;
  if (!*(_DWORD *)(a1 + 79440) && v45 > *(double *)(a1 + 24))
  {
    _JTargetJBEstimator_AddCandidateSpikeToHistory(a1, v39, v229, v40, v41, v42, v43, v44);
    uint64_t v21 = v229;
    if (*(unsigned char *)(v6 + 153)) {
      double v25 = fmin(a3, *(double *)(a1 + 79456));
    }
  }
  int v46 = *(_DWORD *)(a1 + 79496);
  int v47 = v46 + 1;
  *(_DWORD *)(a1 + 79496) = v46 + 1;
  double v48 = *(double *)(a1 + 79576);
  if (v48 < a3)
  {
    *(double *)(a1 + 79576) = a3;
    *(double *)(a1 + 79584) = v11;
    double v48 = a3;
  }
  if (a3 - *(double *)(v21 + 16) > *(double *)(v6 + 168)) {
    *(_DWORD *)(a1 + 80876) = 1;
  }
  double v49 = *(double *)(v6 + 48);
  if (v49 - *(double *)(a1 + 79536) > 0.1 && v47 - *(_DWORD *)(a1 + 79528) >= 5 && !*(_DWORD *)(a1 + 79552))
  {
    double v50 = *(double *)(a1 + 79512);
    if (v50 < a3)
    {
      if (*(double *)(a1 + 79544) == 0.0)
      {
        double v51 = fmax(*(double *)(a1 + 79448), *(double *)(a1 + 79504) + fmin((v50 - *(double *)(a1 + 79504)) * 0.5, 0.25));
        *(double *)(a1 + 79448) = v51;
        *(void *)(a1 + 79544) = 0x3FF0000000000000;
      }
      else
      {
        double v51 = *(double *)(a1 + 79448);
      }
      if (a3 - v51 > 0.3) {
        *(double *)(a1 + 79448) = v51 + (*(double *)(v6 + 96) + *(double *)(v6 + 96)) * 0.001;
      }
      *(double *)(a1 + 79536) = v49;
      *(_DWORD *)(a1 + 79528) = v47;
    }
  }
  if (v46 >= 30)
  {
    int v64 = 0;
    double v65 = 0.0;
    uint64_t v66 = a1 + 78232;
    double v67 = 0.0;
    do
    {
      double v67 = v67 + *(double *)(v66 + 8 * (((v27 + v28 - 30) % 75 + v64) % 75));
      double v65 = v65 + *(double *)(v66 + 8 * (((v27 + v28 - 15) % 75 + v64++) % 75));
    }
    while (v64 != 15);
    if (*(_DWORD *)(a1 + 79552))
    {
      double v68 = *(double *)(a1 + 79560);
LABEL_83:
      if (v11 - v68 > 3.0 && vabdd_f64(v65, v67) < *(double *)(a1 + 79488) * 15.0)
      {
        *(_DWORD *)(a1 + 79556) = 1;
        a2 = v227;
LABEL_87:
        *(_DWORD *)(a1 + 79592) = 0;
        *(void *)(a1 + 79448) = *(void *)(a1 + 32);
        *(double *)(a1 + 79472) = v11;
        if (*(_DWORD *)(a1 + 79440))
        {
          double v69 = v48 - *(double *)(a1 + 79520);
          if (v69 > 0.04)
          {
            uint64_t v70 = *(void *)(a1 + 79584);
            uint64_t v71 = a1 + 79672;
            int v72 = *(_DWORD *)(v7 + 876);
            uint64_t v73 = *(int *)(v7 + 872);
            if (v72 > 49)
            {
              *(double *)(v71 + 8 * v73) = v69;
              *(void *)(a1 + 8 * v73 + 80072) = v70;
              *(_DWORD *)(v7 + 872) = ((int)v73 + 1) % 50;
            }
            else
            {
              int v74 = ((int)v73 + v72) % 50;
              *(double *)(v71 + 8 * v74) = v69;
              *(void *)(a1 + 8 * v74 + 80072) = v70;
              *(_DWORD *)(v7 + 876) = v72 + 1;
            }
          }
          *(_DWORD *)(a1 + 79440) = 0;
        }
        if (*(_DWORD *)v13 == 1) {
          ++*(_DWORD *)(a1 + 81160);
        }
        else {
          ++*(_DWORD *)(a1 + 81164);
        }
        double v75 = *(double *)(a1 + 79576) - *(double *)(a1 + 79520);
        *(double *)(a1 + 80880) = v75;
        double v76 = *(double *)(a1 + 80976);
        if (v75 > v76) {
          *(double *)(a1 + 81168) = v75 - v76 + *(double *)(a1 + 81168);
        }
        *(_DWORD *)uint64_t v13 = 0;
        VRLogfilePrint(*(void *)(v6 + 120), "Leaving SPIKE, SpikeSize = %f \n", v21, v40, v41, v42, v43, v44, SLOBYTE(v75));
        uint64_t v21 = v229;
        goto LABEL_102;
      }
      goto LABEL_86;
    }
    if (vabdd_f64(v65, v67) < *(double *)(a1 + 79488) * 15.0)
    {
      *(_DWORD *)(a1 + 79552) = 1;
      *(double *)(a1 + 79560) = v11;
      *(_DWORD *)(a1 + 79496) = 0;
      double v68 = v11;
      goto LABEL_83;
    }
  }
LABEL_86:
  a2 = v227;
  if (*(_DWORD *)(a1 + 79556)
    || v11 - *(double *)(a1 + 79464) > 0.5 && *(double *)(a1 + 79448) + fabs(*(double *)(a1 + 79448) * 0.05) > a3)
  {
    goto LABEL_87;
  }
LABEL_102:
  *(double *)(v21 + 32) = v25;
  int v22 = *(unsigned __int16 *)a2;
LABEL_103:
  uint64_t v77 = a1 + 56;
  int v78 = *(unsigned __int16 *)(v21 + 66);
  if ((unsigned __int16)(v22 - v78) > 0x7FFEu)
  {
    int v79 = v22 - v78;
    if (v79 < 0)
    {
      if (*(_DWORD *)(v21 + 8) - v79 <= 1499)
      {
        int v86 = *(_DWORD *)(v21 + 4);
        BOOL v87 = __OFADD__(v86, v79);
        int v88 = v86 + v79;
        if (v88 < 0 != v87) {
          signed int v89 = v88 + 1500;
        }
        else {
          signed int v89 = v88;
        }
        *(double *)(v77 + 8 * v89) = v25;
        uint64_t v90 = a1 + 56 + 8 * v89;
        *(double *)(v90 + 12000) = a3;
        long long v91 = (_DWORD *)(a1 + 56 + 4 * v89);
        v91[6000] = 1;
        v91[7500] = *(unsigned __int8 *)(v21 + 40);
        ++*(_DWORD *)v21;
        *(_DWORD *)(v21 + 4) = v89;
        unsigned int v226 = v89;
        *(_DWORD *)(v21 + 8) -= v79;
        *(_WORD *)(v21 + 66) = v22;
        v91[9000] = *((_DWORD *)a2 + 6);
        *(double *)(v90 + 42000) = a2[1];
        *(double *)(v90 + 54000) = a2[4];
        goto LABEL_121;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 3
        || (uint64_t v122 = VRTraceErrorLogLevelToCSTR(),
            __int16 v85 = *MEMORY[0x1E4F47A50],
            !os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
      {
LABEL_115:
        uint64_t v62 = 1;
        _JTargetJBEstimator_ResetHistory(a1, *(_WORD *)a2, 1);
        *(_DWORD *)(v7 + 52) = *((_DWORD *)a2 + 6);
        uint64_t v21 = v229;
        goto LABEL_221;
      }
      int v123 = *(unsigned __int16 *)a2;
      int v124 = *(unsigned __int16 *)(v229 + 66);
      *(float *)CMTime buf = 4.8154e-34;
      uint64_t v231 = v122;
      __int16 v232 = 2080;
      v233 = "_JTargetJBEstimator_AddLagToHistory";
      __int16 v234 = 1024;
      int v235 = 1203;
      __int16 v236 = 1024;
      LODWORD(v237[0]) = v123;
      WORD2(v237[0]) = 1024;
      *(_DWORD *)((char *)v237 + 6) = v124;
LABEL_334:
      _os_log_error_impl(&dword_1E1EA4000, v85, OS_LOG_TYPE_ERROR, " [%s] %s:%d Large Jump seen in sequence number %u startSeq=%u", buf, 0x28u);
      goto LABEL_115;
    }
  }
  else
  {
    int v79 = (unsigned __int16)(v22 - v78);
  }
  if (v79 > 0x5DB)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      goto LABEL_115;
    }
    uint64_t v84 = VRTraceErrorLogLevelToCSTR();
    __int16 v85 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      goto LABEL_115;
    }
    int v220 = *(unsigned __int16 *)a2;
    int v221 = *(unsigned __int16 *)(v229 + 66);
    *(float *)CMTime buf = 4.8154e-34;
    uint64_t v231 = v84;
    __int16 v232 = 2080;
    v233 = "_JTargetJBEstimator_AddLagToHistory";
    __int16 v234 = 1024;
    int v235 = 1176;
    __int16 v236 = 1024;
    LODWORD(v237[0]) = v220;
    WORD2(v237[0]) = 1024;
    *(_DWORD *)((char *)v237 + 6) = v221;
    goto LABEL_334;
  }
  uint64_t v80 = (*(_DWORD *)(v21 + 4) + v79) % 1500;
  unsigned int v226 = (*(_DWORD *)(v21 + 4) + v79) % 1500;
  __int16 v81 = (_DWORD *)(a1 + 4 * v80 + 24056);
  if (!*v81)
  {
    *(double *)(v77 + 8 * v80) = v25;
    uint64_t v82 = a1 + 56 + 8 * v80;
    *(double *)(v82 + 12000) = a3;
    _DWORD *v81 = 1;
    *(_DWORD *)(a1 + 56 + 4 * v80 + 36000) = *((_DWORD *)a2 + 6);
    *(double *)(v82 + 42000) = a2[1];
    *(double *)(v82 + 54000) = a2[4];
    ++*(_DWORD *)v21;
  }
  uint64_t v83 = (_DWORD *)(a1 + 4 * v80 + 30056);
  if (!*v83) {
    *uint64_t v83 = *(unsigned __int8 *)(v21 + 40);
  }
  if (v79 >= *(_DWORD *)(v21 + 8)) {
    *(_DWORD *)(v21 + 8) = v79 + 1;
  }
LABEL_121:
  if (*(_DWORD *)(a1 + 4) && *(int *)v21 >= 16) {
    *(_DWORD *)(a1 + 4) = 0;
  }
  double NewMinLag = _JTargetJBEstimator_GetNewMinLag(a1, v25);
  uint64_t v93 = v229;
  *(double *)(v229 + 16) = NewMinLag;
  *(double *)(v229 + 24) = fmax(v25, v9);
  long long v94 = a2;
  int v95 = *((_DWORD *)a2 + 4);
  int v96 = *((_DWORD *)v94 + 5);
  unsigned int v97 = *((_DWORD *)v94 + 6);
  if (v95 || v97 && *(unsigned char *)(v6 + 112))
  {
    if (!v96)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          JTargetJBEstimator_Process_cold_2();
        }
      }
      int v96 = 1;
      uint64_t v93 = v229;
    }
    int v98 = (int)*(double *)(v93 + 56);
    int v99 = *(_DWORD *)(a1 + 79556);
    if (v99 == 1) {
      int v98 = 2;
    }
    int v100 = *(_DWORD *)(a1 + 48);
    unsigned int v101 = v98 * v100;
    if (v95)
    {
      if (v99 == 1) {
        int v102 = 2;
      }
      else {
        int v102 = (int)*(double *)(v93 + 48);
      }
      unsigned int v103 = v96 * v95;
      unsigned int v104 = v101 / (v96 * v95);
      unsigned int v105 = v102 * v100 / v103;
    }
    else
    {
      unsigned int v104 = 0;
      unsigned int v105 = 0;
    }
    uint64_t v107 = a1 + 56;
    int v108 = *(_DWORD *)(v93 + 8);
    int v109 = *(unsigned __int8 *)(v93 + 40);
    int v110 = v108 - v105;
    if (*(unsigned char *)(v93 + 40)) {
      int v111 = v110;
    }
    else {
      int v111 = 0;
    }
    uint64_t v225 = v7;
    if (!*(unsigned char *)(v6 + 112))
    {
      int v113 = v108 - v104;
      if ((int)(v108 - v104) <= 0 && v111 < 1)
      {
        LOBYTE(v114) = 0;
        goto LABEL_179;
      }
      int v140 = *(_DWORD *)(v93 + 4);
      if (v113 < 1)
      {
        LOBYTE(v114) = 0;
        int v113 = 0;
      }
      else
      {
        int v141 = 0;
        int v114 = 0;
        do
        {
          int v142 = v140 + v141;
          int v140 = (v140 + v141) % 1500;
          v114 |= _JTargetJBEstimator_RemoveElementFromHistory(a1, v142 % 1500);
          ++v141;
        }
        while (v113 != v141);
        uint64_t v107 = a1 + 56;
      }
      if (v111 < 1)
      {
        uint64_t v93 = v229;
      }
      else
      {
        int v217 = 0;
        uint64_t v93 = v229;
        do
        {
          int v140 = (v140 + v217) % 1500;
          v218 = (_DWORD *)(a1 + 4 * v140 + 30056);
          if (*v218)
          {
            uint64_t v219 = *(unsigned int *)(a1 + 4 * v140 + 72176);
            --*(_DWORD *)(*v228 + 4 * v219);
            --*(_DWORD *)(a1 + 78176);
          }
          _DWORD *v218 = 0;
          ++v217;
        }
        while (v111 != v217);
      }
LABEL_175:
      if (v113)
      {
        int v130 = (*(_DWORD *)(v93 + 4) + v113) % 1500;
        int v131 = *(_DWORD *)(v93 + 8) - v113;
        *(_DWORD *)(v93 + 4) = v130;
        *(_DWORD *)(v93 + 8) = v131;
        *(_WORD *)(v93 + 66) += v113;
        uint64_t v132 = v225;
        if (*(double *)(v225 + 40) != 0.0
          && (*(_DWORD *)(v225 + 48) - *(_DWORD *)(a1 + 4 * v130 + 36056)) >= 0x7FFFFFFF)
        {
          *(void *)(v225 + 40) = 0;
        }
        goto LABEL_180;
      }
LABEL_179:
      uint64_t v132 = v225;
LABEL_180:
      if (*(_DWORD *)(a1 + 79556) == 1)
      {
        int v133 = *(_DWORD *)(v93 + 8);
        if (v133 >= 1)
        {
          int v134 = *(_DWORD *)(v93 + 4);
          do
          {
            if (*(_DWORD *)(a1 + 4 * (v134 % 1500) + 24056)) {
              *(void *)(v107 + 8 * (v134 % 1500)) = *(void *)(a1 + 8 * (v134 % 1500) + 12056);
            }
            ++v134;
            --v133;
          }
          while (v133);
        }
      }
      if (v114)
      {
        *(_OWORD *)(v93 + 16) = xmmword_1E25A2FA0;
        int v135 = *(_DWORD *)(v93 + 8);
        if (v135 < 1)
        {
          double NewMinLag = 30.0;
        }
        else
        {
          int v136 = 0;
          double NewMinLag = 30.0;
          do
          {
            int v137 = (v136 + *(_DWORD *)(v93 + 4)) % 1500;
            if (*(_DWORD *)(a1 + 4 * v137 + 24056))
            {
              double v138 = _JTargetJBEstimator_GetNewMinLag(a1, *(double *)(v107 + 8 * v137));
              uint64_t v93 = v229;
              double v139 = v138;
              double NewMinLag = *(double *)(v229 + 16);
              if (v139 < NewMinLag)
              {
                *(double *)(v229 + 16) = v139;
                *(_DWORD *)(v229 + 68) = v137;
                *(_DWORD *)(v132 + 48) = *(_DWORD *)(a1 + 4 * v137 + 36056);
                double NewMinLag = v139;
              }
              uint64_t v107 = a1 + 56;
              *(double *)(v229 + 24) = fmax(*(double *)(a1 + 56 + 8 * v137), *(double *)(v229 + 24));
              int v135 = *(_DWORD *)(v229 + 8);
            }
            ++v136;
          }
          while (v136 < v135);
        }
      }
      else
      {
        double NewMinLag = *(double *)(v93 + 16);
      }
      char v106 = v114 & 1;
      uint64_t v7 = v132;
      uint64_t v15 = a1 + 72168;
      goto LABEL_202;
    }
    unsigned int v112 = v97 - v101;
    if (v97 <= v101)
    {
      unsigned int v115 = v97 + ~v101;
      if (*(unsigned char *)(v93 + 65)) {
        unsigned int v112 = v115;
      }
      else {
        unsigned int v112 = 0;
      }
    }
    else
    {
      *(unsigned char *)(v93 + 65) = 0;
    }
    unsigned int v116 = *(_DWORD *)(v93 + 4);
    if (_JTargetJBEstimator_ShouldContinueDiscardingFrames(a1, 0, v116, v116, v112))
    {
      int v113 = 0;
      int v114 = 0;
      int v117 = v116;
      uint64_t v118 = v229;
      do
      {
        v114 |= _JTargetJBEstimator_RemoveElementFromHistory(a1, v117);
        int v117 = (++v113 + *(_DWORD *)(v229 + 4)) % 1500;
      }
      while ((_JTargetJBEstimator_ShouldContinueDiscardingFrames(a1, 0, v116, v117, v112) & 1) != 0);
      unsigned int v116 = v117;
      if (*(unsigned char *)(v229 + 40)) {
        goto LABEL_157;
      }
    }
    else
    {
      LOBYTE(v114) = 0;
      int v113 = 0;
      uint64_t v118 = v229;
      if (v109)
      {
LABEL_157:
        int v119 = (int)*(double *)(v118 + 48);
        if (*(_DWORD *)(a1 + 79556) == 1) {
          int v119 = 2;
        }
        unsigned int v120 = v119 * *(_DWORD *)(a1 + 48);
        unsigned int v121 = v97 - v120;
        if (v97 <= v120)
        {
          unsigned int v125 = v97 + ~v120;
          if (*(unsigned char *)(v118 + 64)) {
            unsigned int v121 = v125;
          }
          else {
            unsigned int v121 = 0;
          }
        }
        else
        {
          *(unsigned char *)(v118 + 64) = 0;
        }
        goto LABEL_169;
      }
    }
    unsigned int v121 = 0;
LABEL_169:
    if (_JTargetJBEstimator_ShouldContinueDiscardingFrames(a1, 1, v116, v116, v121))
    {
      int v126 = v113 + 1;
      signed int v127 = v116;
      do
      {
        int v128 = (_DWORD *)(a1 + 4 * v127 + 30056);
        if (*v128)
        {
          uint64_t v129 = *(unsigned int *)(a1 + 4 * v127 + 72176);
          --*(_DWORD *)(*v228 + 4 * v129);
          --*(_DWORD *)(a1 + 78176);
        }
        *int v128 = 0;
        signed int v127 = (v126 + *(_DWORD *)(v229 + 4)) % 1500;
        ++v126;
      }
      while ((_JTargetJBEstimator_ShouldContinueDiscardingFrames(a1, 1, v116, v127, v121) & 1) != 0);
    }
    uint64_t v93 = v229;
    uint64_t v107 = a1 + 56;
    goto LABEL_175;
  }
  char v106 = 0;
LABEL_202:
  if (NewMinLag == v8)
  {
    _JTargetJBEstimator_AddLagToCdf(a1, a1 + 66128, v226, 0);
    if (*(unsigned char *)(v229 + 40)) {
      _JTargetJBEstimator_AddLagToCdf(a1, a1 + 72168, v226, 0);
    }
  }
  else
  {
    *(double *)(v7 + 40) = NewMinLag - v8;
    if ((v106 & 1) == 0)
    {
      *(_DWORD *)(v7 + 48) = *((_DWORD *)v227 + 6);
      *(_DWORD *)(v93 + 68) = v226;
    }
    uint64_t v143 = v93 + 72;
    bzero(*(void **)(v93 + 72), 4 * *(unsigned int *)(v93 + 6104));
    bzero((void *)(a1 + 66136), 0x1770uLL);
    *(_DWORD *)(v143 + 6008) = 0;
    bzero(*(void **)v15, 4 * *(unsigned int *)(v15 + 6032));
    bzero((void *)(a1 + 72176), 0x1770uLL);
    uint64_t v144 = v229;
    *(_DWORD *)(v15 + 6008) = 0;
    if (*(int *)(v143 - 64) >= 1)
    {
      int v145 = 0;
      do
      {
        uint64_t v146 = (v145 + *(_DWORD *)(v144 + 4)) % 1500;
        if (*(_DWORD *)(a1 + 4 * v146 + 24056))
        {
          _JTargetJBEstimator_AddLagToCdf(a1, v143, v146, 1);
          uint64_t v144 = v229;
        }
        if (*(unsigned char *)(v144 + 40) && *(_DWORD *)(a1 + 4 * v146 + 30056))
        {
          _JTargetJBEstimator_AddLagToCdf(a1, (uint64_t)v228, v146, 1);
          uint64_t v144 = v229;
        }
        ++v145;
      }
      while (v145 < *(_DWORD *)(v144 + 8));
    }
  }
  double v147 = micro() - v10;
  if (v147 > 0.005 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v148 = VRTraceErrorLogLevelToCSTR();
    v149 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(float *)CMTime buf = 4.8153e-34;
      uint64_t v231 = v148;
      __int16 v232 = 2080;
      v233 = "_JTargetJBEstimator_AddLagToHistory";
      __int16 v234 = 1024;
      int v235 = 1251;
      __int16 v236 = 2048;
      *(double *)v237 = v147;
      _os_log_impl(&dword_1E1EA4000, v149, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Noted jump in AddLagToHistory %f", buf, 0x26u);
    }
  }
  uint64_t v14 = a1 + 78208;
  a2 = v227;
  *(_DWORD *)(v7 + 52) = *((_DWORD *)v227 + 6);
  *(unsigned char *)(v7 + 56) = 0;
  uint64_t v62 = 1;
  uint64_t v21 = v229;
  uint64_t v13 = a1 + 80872;
LABEL_221:
  double v150 = *(double *)(v6 + 56);
  if (*(unsigned char *)(v6 + 200)) {
    double v150 = fmax(*(double *)(a1 + 16) * (double)*(int *)(a1 + 12), fmax(*(double *)(a1 + 16) + *(double *)(a1 + 16), v150));
  }
  double v151 = a2[1];
  *(double *)(a1 + 24) = v150;
  int v152 = *(_DWORD *)(v7 + 876);
  if (v152 < 1)
  {
    int v154 = 0;
    int v152 = 0;
  }
  else
  {
    int v153 = *(_DWORD *)(v7 + 872);
    int v154 = v153 % 50;
    if (v151 - *(double *)(a1 + 8 * (v153 % 50) + 80072) >= 21.0)
    {
      int v155 = v153 + 1;
      while (--v152)
      {
        int v154 = v155 % 50;
        double v156 = v151 - *(double *)(a1 + 8 * (v155 % 50) + 80072);
        ++v155;
        if (v156 < 21.0) {
          goto LABEL_231;
        }
      }
      int v154 = 0;
    }
  }
LABEL_231:
  *(_DWORD *)(v7 + 872) = v154;
  *(_DWORD *)(v7 + 876) = v152;
  if (*(unsigned char *)(v7 + 66))
  {
    int v157 = 2;
    double v158 = 0.5;
    double v159 = 0.5;
  }
  else
  {
    if (!*(unsigned char *)(v7 + 64)) {
      goto LABEL_244;
    }
    int v157 = 3;
    double v159 = 5.0;
    double v158 = 0.15;
  }
  *(_DWORD *)(v7 + 944) = v157;
  *(double *)(v7 + 952) = v159;
  *(double *)(v7 + 968) = v158;
  *(void *)(v7 + 960) = 0x3F947AE147AE147BLL;
  if (v152 >= v157 && *(unsigned char *)(v7 + 920))
  {
    double v160 = *(double *)(v14 + 1304);
    double v161 = *(double *)(v21 + 16);
    double v162 = *(double *)(a1 + 8 * v154 + 80072);
    *(unsigned char *)(v7 + 920) = 0;
    double v163 = v150;
    *(double *)(v7 + 928) = v151;
    if (v152 < 1) {
      goto LABEL_246;
    }
    int v164 = 0;
    double v165 = v160 - v161;
    int v166 = v152;
    while (1)
    {
      double v167 = *(double *)(a1 + 8 * (v154 % 50) + 80072);
      if (vabdd_f64(v162, v167) >= v159)
      {
        if (++v164 >= v157)
        {
          double v163 = fmin(v165 + 0.02, v158);
          *(double *)(v7 + 936) = v163;
          goto LABEL_246;
        }
      }
      else
      {
        double v167 = v162;
      }
      ++v154;
      double v162 = v167;
      if (!--v166)
      {
        double v163 = v150;
        goto LABEL_246;
      }
    }
  }
LABEL_244:
  double v163 = v150;
  if (v151 - *(double *)(v7 + 928) < 10.0) {
    double v163 = fmax(*(double *)(v7 + 936), v150);
  }
LABEL_246:
  double v168 = v150;
  if (*(unsigned char *)(v7 + 65)) {
    double v168 = *(double *)(v6 + 64);
  }
  float v169 = fmax(v168, v163);
  *(_DWORD *)(v6 + 32) = 0;
  if (*(_DWORD *)(a1 + 8))
  {
    if (*(int *)v21 >= 51) {
      *(_DWORD *)(a1 + 8) = 0;
    }
    float v169 = fmax(v169, *(double *)(a1 + 40));
  }
  double v170 = *(double *)v6;
  float v171 = *(double *)v6;
  if (!*(_DWORD *)(a1 + 4))
  {
    unsigned int v176 = *(_DWORD *)(v21 + 6080);
    unint64_t v177 = (*(_DWORD *)(v21 + 6104) - 1);
    if (*(unsigned char *)(v21 + 40))
    {
      LODWORD(v170) = *(_DWORD *)(a1 + 78176);
      double v178 = (double)*(unint64_t *)&v170;
      unsigned int v179 = *(_DWORD *)(a1 + 78200) - 1;
    }
    else
    {
      unsigned int v179 = 0;
      double v178 = 0.0;
    }
    uint64_t v187 = v21 + 72;
    double v188 = (double)v176;
    if (*(_DWORD *)(v21 + 6104) != 1)
    {
      unint64_t v189 = (*(_DWORD *)(v21 + 6104) - 1);
      double v190 = (double)v176;
      while (v176)
      {
        double v191 = *(double *)(v21 + 6096) * v188;
        if (v190 < v191 || v189 > v177)
        {
          LODWORD(v177) = v189;
          if (!v179) {
            goto LABEL_293;
          }
          goto LABEL_286;
        }
        LODWORD(v191) = *(_DWORD *)(*(void *)v187 + 4 * v189);
        double v190 = v190 - (double)*(unint64_t *)&v191;
        if (!--v189)
        {
          LODWORD(v177) = 0;
          if (v179) {
            goto LABEL_286;
          }
          goto LABEL_293;
        }
      }
    }
    double v190 = (double)v176;
    if (v179)
    {
LABEL_286:
      unsigned int v193 = *(_DWORD *)(a1 + 78176);
      unint64_t v194 = v179;
      double v195 = v178;
      while (v193)
      {
        double v196 = *(double *)(a1 + 78192) * (double)v193;
        if (v195 < v196 || v194 > (*(_DWORD *)(a1 + 78200) - 1))
        {
          double v178 = v195;
          unsigned int v179 = v194;
          break;
        }
        LODWORD(v196) = *(_DWORD *)(*v228 + 4 * v194);
        double v195 = v195 - (double)*(unint64_t *)&v196;
        if (!--v194)
        {
          unsigned int v179 = 0;
          double v178 = v195;
          break;
        }
      }
    }
LABEL_293:
    if (v176)
    {
      double v197 = *(double *)(v21 + 6096) * v188;
      BOOL v198 = v190 < v197;
      if (*(unsigned char *)(v21 + 40) && v179 > v177)
      {
        uint64_t v187 = a1 + 72168;
        LODWORD(v197) = *(_DWORD *)(a1 + 78176);
        double v190 = *(double *)(a1 + 78192);
        BOOL v198 = v178 < v190 * (double)*(unint64_t *)&v197;
        LODWORD(v177) = v179;
      }
      int v199 = v177 + 2;
      if (!v198) {
        int v199 = 1;
      }
      if (*(unsigned char *)(v6 + 113)) {
        unsigned int v200 = v199;
      }
      else {
        unsigned int v200 = v177 + 1;
      }
      LODWORD(v190) = *(_DWORD *)(v187 + 6032);
      float v201 = *(double *)(v187 + 6016) / (double)*(unint64_t *)&v190 * (double)v200;
      double v202 = v201;
      int v203 = *(unsigned __int8 *)(v6 + 153);
      if (*(unsigned char *)(v6 + 153)
        && (*(_DWORD *)(v14 + 1232) == 1 || *(double *)(v6 + 48) - *(double *)(v14 + 1264) < *(double *)(v21 + 56)))
      {
        double v204 = 0.2;
        if (v202 >= 0.2)
        {
          if (v202 < 0.35) {
            double v204 = 0.1;
          }
          double v205 = v202 + v204;
        }
        else
        {
          double v205 = v202 * 1.3;
        }
        *(double *)(v6 + 40) = v205 - v202;
        *(_DWORD *)(v6 + 32) = 2;
        double v202 = v205;
      }
      float v206 = v202;
      float v171 = fmin(*(double *)(v6 + 24), v206);
      if (v203)
      {
        double v207 = v171;
        *(double *)(v14 + 1360) = v171;
        *(_OWORD *)(a1 + 80480) = 0u;
        *(_OWORD *)(a1 + 80496) = 0u;
        *(void *)(a1 + 80512) = 0;
        if (v152 >= 1)
        {
          int v208 = 0;
          for (int i = 0; i < v152; ++i)
          {
            float v210 = *(double *)(a1 + 79672 + 8 * ((i + *(_DWORD *)(v7 + 872)) % 50)) - v207;
            if (v210 > 0.0)
            {
              int v211 = (int)(v210 / dbl_1E25A2FB0[*(_DWORD *)a1 == 0]);
              if (v211 <= 9)
              {
                ++v208;
                ++*(_DWORD *)(a1 + 4 * v211 + 80480);
                int v152 = *(_DWORD *)(v7 + 876);
              }
            }
          }
          if (v208 >= 4)
          {
            uint64_t v212 = 0;
            int v213 = 0;
            int v214 = 0;
            int v215 = 100 * v208;
            int v216 = v215;
            do
            {
              v213 += *(_DWORD *)(a1 + 80480 + 4 * v212++);
              if (100 * v213 > v216 / 10) {
                int v214 = v212;
              }
              v216 += v215;
            }
            while (v212 != 10);
            *(double *)(v14 + 1360) = v207 + (double)v214 * dbl_1E25A2FB0[*(_DWORD *)a1 == 0];
          }
        }
      }
    }
  }
  *(double *)uint64_t v6 = v171;
  if (*(void *)(v6 + 160))
  {
    long long v172 = *(uint64_t (**)(void))(v6 + 184);
    if (*(void *)(v6 + 192) && v172 && (v172() & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v222 = VRTraceErrorLogLevelToCSTR();
      v223 = *MEMORY[0x1E4F47A50];
      v224 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
        {
          *(float *)CMTime buf = 4.8152e-34;
          uint64_t v231 = v222;
          __int16 v232 = 2080;
          v233 = "_JTargetJBEstimator_GetJBTargetFromEstimatedTarget";
          __int16 v234 = 1024;
          int v235 = 1382;
          _os_log_impl(&dword_1E1EA4000, v223, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Failed to update the target size estimated prior to synchronization", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v224, OS_LOG_TYPE_DEBUG))
      {
        JTargetJBEstimator_Process_cold_1();
      }
    }
    *(double *)uint64_t v6 = v171;
    float v173 = *(double *)(v6 + 8);
    *(float *)CMTime buf = v173;
    float v174 = *(double *)v6;
    float v175 = v151;
    VCJBTargetEstimatorSynchronizer_GetSyncTarget(*(void *)(v6 + 160), *(unsigned __int8 *)(v13 + 280), (float *)buf, v174, v175);
    *(double *)(v6 + 8) = *(float *)buf;
    if (*(double *)v6 != *(double *)(v6 + 8))
    {
      *(_DWORD *)(v6 + 32) = 3;
      *(double *)(v6 + 40) = *(double *)(v6 + 8) - *(double *)v6;
    }
    uint64_t v21 = v229;
  }
  else
  {
    *(void *)(v6 + 8) = *(void *)v6;
  }
  *(double *)(v6 + 16) = v169;
  if (v150 < v169 && v171 < v169)
  {
    *(_DWORD *)(v6 + 32) = 1;
    *(double *)(v6 + 40) = (float)(v169 - v171);
  }
  *(_DWORD *)(v13 + 24) = *(_DWORD *)a1;
  *(void *)(v13 + 32) = *(void *)v14;
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v21 + 16);
  double v181 = *(double *)(v14 + 16) * 4.0 + 0.0500000007;
  double v182 = 0.5;
  if (v181 <= 0.5) {
    double v182 = *(double *)(v14 + 16) * 4.0 + 0.0500000007;
  }
  *(double *)(v13 + 56) = v181;
  *(double *)(v13 + 64) = v182;
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 1348);
  uint64_t v183 = *(void *)(v7 + 40);
  *(void *)(v13 + 80) = *(void *)(v21 + 32);
  *(void *)(v13 + 88) = v183;
  uint64_t v184 = *(void *)(v6 + 8);
  *(void *)(v13 + 96) = *(void *)(v14 + 1360);
  *(void *)(v13 + 104) = v184;
  uint64_t v185 = *(void *)(v6 + 16);
  *(void *)(v13 + 112) = *(void *)v6;
  *(void *)(v13 + 120) = v185;
  *(void *)(v13 + 128) = *(void *)(v6 + 24);
  return v62;
}

double _JTargetJBEstimator_GetNewMinLag(uint64_t a1, double a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 80731;
  uint64_t v3 = a1 + 66072;
  double v4 = *(double *)(a1 + 66072);
  double v5 = fmin(a2, v4);
  if (!*(unsigned char *)(a1 + 80731)) {
    return v5;
  }
  if (v5 >= v4) {
    return v4;
  }
  _JTargetJBEstimation_CalculateMeanAndStdev(a1);
  double v6 = *(double *)(v2 + 85);
  double v7 = fmin(fmax(2.0 - v6, 1.8), 2.2);
  *(double *)(v2 + 101) = v7;
  double v8 = *(double *)(v2 + 69) - v7 * *(double *)(v2 + 77);
  *(double *)(v2 + 109) = v8;
  if (!*(unsigned char *)(v2 + 133) || fabs(v6) > 2.2 || fabs(*(double *)(v2 + 93)) > 1.2) {
    return v5;
  }
  if (v5 >= v8) {
    return v5;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    double v10 = *MEMORY[0x1E4F47A50];
    double v11 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(v3 + 13576);
        uint64_t v13 = *(void *)(v2 + 77);
        uint64_t v14 = *(void *)(v2 + 69);
        uint64_t v15 = *(void *)(v2 + 101);
        uint64_t v16 = *(void *)(v2 + 85);
        uint64_t v17 = *(void *)(v2 + 93);
        int v25 = 136317954;
        uint64_t v26 = v9;
        __int16 v27 = 2080;
        int v28 = "_JTargetJBEstimator_GetNewMinLag";
        __int16 v29 = 1024;
        int v30 = 555;
        __int16 v31 = 1024;
        int v32 = v12;
        __int16 v33 = 2048;
        uint64_t v34 = v13;
        __int16 v35 = 2048;
        uint64_t v36 = v14;
        __int16 v37 = 2048;
        uint64_t v38 = v15;
        __int16 v39 = 2048;
        uint64_t v40 = v16;
        __int16 v41 = 2048;
        uint64_t v42 = v17;
        __int16 v43 = 2048;
        double v44 = v8;
        __int16 v45 = 2048;
        double v46 = v5;
        __int16 v47 = 2048;
        double v48 = v4;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Lag is not statistically relevant. LastMinTimestamp=%d, stdev=%f, mean=%f, stdevMult=%f, skew=%f, kurtosis=%f, threshold=%f, candMinLag=%f, finalMinLag=%f", (uint8_t *)&v25, 0x72u);
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v19 = *(_DWORD *)(v3 + 13576);
      uint64_t v20 = *(void *)(v2 + 77);
      uint64_t v21 = *(void *)(v2 + 69);
      uint64_t v22 = *(void *)(v2 + 101);
      uint64_t v23 = *(void *)(v2 + 85);
      uint64_t v24 = *(void *)(v2 + 93);
      int v25 = 136317954;
      uint64_t v26 = v9;
      __int16 v27 = 2080;
      int v28 = "_JTargetJBEstimator_GetNewMinLag";
      __int16 v29 = 1024;
      int v30 = 555;
      __int16 v31 = 1024;
      int v32 = v19;
      __int16 v33 = 2048;
      uint64_t v34 = v20;
      __int16 v35 = 2048;
      uint64_t v36 = v21;
      __int16 v37 = 2048;
      uint64_t v38 = v22;
      __int16 v39 = 2048;
      uint64_t v40 = v23;
      __int16 v41 = 2048;
      uint64_t v42 = v24;
      __int16 v43 = 2048;
      double v44 = v8;
      __int16 v45 = 2048;
      double v46 = v5;
      __int16 v47 = 2048;
      double v48 = v4;
      _os_log_debug_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Lag is not statistically relevant. LastMinTimestamp=%d, stdev=%f, mean=%f, stdevMult=%f, skew=%f, kurtosis=%f, threshold=%f, candMinLag=%f, finalMinLag=%f", (uint8_t *)&v25, 0x72u);
    }
  }
  return v4;
}

void _JTargetJBEstimator_AddLagToCdf(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a3 >= 0x5DC)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _JTargetJBEstimator_AddLagToCdf_cold_1();
      }
    }
  }
  else
  {
    double v4 = *(double *)(a2 + 6016);
    double v5 = fmin(*(double *)(a1 + 8 * a3 + 56) - *(double *)(a1 + 66072), v4);
    if (a4) {
      double v5 = fmin(v5 + *(double *)(a1 + 79640), v4);
    }
    if (v4 == 0.0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 6032);
      unsigned int v7 = v6 - 1;
    }
    else
    {
      if (v5 < 0.0) {
        double v5 = 0.0;
      }
      unsigned int v6 = *(_DWORD *)(a2 + 6032);
      unsigned int v7 = (v5 * (double)v6 / v4);
    }
    unsigned int v8 = v7 - (v7 == v6);
    ++*(_DWORD *)(*(void *)a2 + 4 * v8);
    *(_DWORD *)(a2 + 4 * a3 + 8) = v8;
    ++*(_DWORD *)(a2 + 6008);
  }
}

BOOL _JTargetJBEstimator_IsPacketBundled(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)(a2 + 8);
  if (v2 == 0.0) {
    goto LABEL_5;
  }
  if (v3 - v2 > 0.003)
  {
    BOOL v4 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_12;
  }
  char v5 = *(unsigned char *)a1 + 1;
  *(unsigned char *)a1 = v5;
  if ((v5 & 1) == 0)
  {
LABEL_5:
    BOOL v4 = 0;
    goto LABEL_12;
  }
  int v6 = *(_DWORD *)(a2 + 24);
  int v7 = *(_DWORD *)(a1 + 4);
  int v8 = *(_DWORD *)(a2 + 16);
  int v9 = v8 + v7;
  int v10 = v7 - v8;
  BOOL v4 = v6 == v9 || v6 == v10;
LABEL_12:
  *(double *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 24);
  return v4;
}

void _JTargetJBEstimator_AddCandidateSpikeToHistory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(a1 + 79440) = 1;
  uint64_t v8 = *(void *)(a1 + 79624);
  double v9 = *(double *)(a1 + 79632) * 1.25;
  *(double *)(a1 + 79488) = v9;
  *(_DWORD *)(a1 + 79496) = 0;
  *(void *)(a1 + 79560) = 0;
  double v11 = *(double *)(a1 + 79600);
  double v10 = *(double *)(a1 + 79608);
  *(double *)(a1 + 79512) = v11;
  *(double *)(a1 + 79520) = v10;
  double v12 = *(double *)(a1 + 79616);
  *(double *)(a1 + 79504) = v12;
  *(void *)(a1 + 79536) = *(void *)(a1 + 80624);
  *(_DWORD *)(a1 + 79528) = 0;
  *(void *)(a1 + 79544) = 0;
  *(void *)(a1 + 79552) = 0;
  double v13 = v12 + v9 * 2.0;
  double v14 = fmax(v13, v10 + *(double *)(a1 + 79568));
  *(double *)(a1 + 79448) = v13;
  *(double *)(a1 + 79456) = v14;
  *(void *)(a1 + 79464) = v8;
  *(double *)(a1 + 79576) = v11;
  *(void *)(a1 + 79584) = v8;
  if (v11 - v10 > *(double *)(a1 + 80744)) {
    *(_DWORD *)(a1 + 80876) = 1;
  }
  int v15 = *(_DWORD *)(a1 + 79592);
  *(_DWORD *)(a1 + 80872) = v15;
  *(double *)(a1 + 80888) = v12;
  *(unsigned char *)(a1 + 80520) = 1;
  uint64_t v16 = *(void *)(a1 + 80696);
  uint64_t v17 = "JUMP";
  if (v15 == 2) {
    uint64_t v17 = "SLOPE";
  }
  VRLogfilePrint(v16, "Entering %s SPIKE, earliest Lag = %f\n", a3, a4, a5, a6, a7, a8, (char)v17);
}

uint64_t _JTargetJBEstimator_ShouldContinueDiscardingFrames(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 16;
  if (!a2) {
    uint64_t v5 = 17;
  }
  int v6 = *(unsigned __int8 *)(a1 + 66104 + v5);
  int v7 = (_DWORD *)(a1 + 4 * a4);
  uint64_t v8 = v7 + 6014;
  if (a2) {
    uint64_t v8 = v7 + 7514;
  }
  int v9 = *v8;
  double v10 = (double *)(a1 + 66112);
  if (a2) {
    double v10 = (double *)(a1 + 66104);
  }
  int v11 = (int)*v10;
  if (*(_DWORD *)(a1 + 79556) == 1) {
    int v12 = 2;
  }
  else {
    int v12 = v11;
  }
  unsigned int v13 = v12 * *(_DWORD *)(a1 + 48);
  unsigned int v14 = v7[9014];
  BOOL v17 = v14 > v13 && v14 < a5 || v9 == 0;
  if (v9) {
    BOOL v18 = v14 >= a5;
  }
  else {
    BOOL v18 = 0;
  }
  int v19 = !v18;
  if (v14 > ~v13 + a5) {
    int v20 = 1;
  }
  else {
    int v20 = v19;
  }
  if (v13 > a5) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = v19;
  }
  if (v6) {
    unsigned int v21 = v17;
  }
  if ((a3 + 1499) % 0x5DCu == a4) {
    return 0;
  }
  else {
    return v21;
  }
}

uint64_t _JTargetJBEstimator_RemoveElementFromHistory(uint64_t a1, int a2)
{
  double v2 = (_DWORD *)(a1 + 66056);
  double v3 = (_DWORD *)(a1 + 4 * a2 + 24056);
  uint64_t v4 = *v3;
  if (v4)
  {
    double v5 = *(double *)(a1 + 56 + 8 * a2);
    uint64_t v4 = v5 <= *(double *)(a1 + 66072) || (unint64_t)(v5 >= *(double *)(a1 + 66080));
    uint64_t v6 = *(unsigned int *)(a1 + 56 + 4 * a2 + 66080);
    --*(_DWORD *)(*(void *)(a1 + 66128) + 4 * v6);
    --*(_DWORD *)(a1 + 72136);
    LODWORD(v6) = (*v2)--;
    if ((int)v6 <= 15) {
      *(_DWORD *)(a1 + 4) = 1;
    }
  }
  *double v3 = 0;
  if (*(unsigned char *)(a1 + 66096))
  {
    uint64_t v7 = a1 + 4 * a2;
    if (*(_DWORD *)(v7 + 30056))
    {
      --*(_DWORD *)(*(void *)(a1 + 72168) + 4 * *(unsigned int *)(v7 + 72176));
      --*(_DWORD *)(a1 + 78176);
    }
  }
  *(_DWORD *)(a1 + 4 * a2 + 30056) = 0;
  return v4;
}

void VCEffectsManager_CapturedPixelBuffer(uint64_t a1, __CVBuffer *a2, __CVBuffer *a3, long long *a4, uint64_t a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2020000000;
  int v38 = 0;
  uint64_t v29 = 0;
  int v30 = &v29;
  uint64_t v31 = 0x3052000000;
  int v32 = __Block_byref_object_copy__40;
  __int16 v33 = __Block_byref_object_dispose__40;
  uint64_t v34 = 0;
  double v10 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  void block[2] = __VCEffectsManager_CapturedPixelBuffer_block_invoke;
  block[3] = &unk_1E6DB6DE8;
  block[4] = a1;
  void block[5] = &v29;
  void block[6] = &v35;
  dispatch_sync(v10, block);
  int v11 = *((_DWORD *)v36 + 6);
  switch(v11)
  {
    case 1:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        BOOL v17 = *MEMORY[0x1E4F47A50];
        BOOL v18 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 136315650;
            *(void *)&uint8_t buf[4] = v16;
            *(_WORD *)&uint8_t buf[12] = 2080;
            *(void *)&buf[14] = "VCEffectsManager_CapturedPixelBuffer";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v40) = 475;
            _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Sending video frame to client to be processed", buf, 0x1Cu);
          }
        }
        else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          VCEffectsManager_CapturedPixelBuffer_cold_4();
        }
      }
      uint64_t v23 = v30[5];
      long long v26 = *a4;
      uint64_t v27 = *((void *)a4 + 2);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
      ++*(_DWORD *)(a1 + 188);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 48));
      CVPixelBufferRetain(a2);
      CVPixelBufferRetain(a3);
      uint64_t v24 = *(NSObject **)(a1 + 24);
      *(void *)CMTime buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___VCEffectsManager_PixelBufferToClient_block_invoke;
      uint64_t v40 = &unk_1E6DB9B28;
      long long v46 = v26;
      uint64_t v47 = v27;
      double v44 = a2;
      __int16 v45 = a3;
      uint64_t v41 = a1;
      uint64_t v42 = a5;
      uint64_t v43 = v23;
      dispatch_async(v24, buf);
      break;
    case 3:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        unsigned int v13 = *MEMORY[0x1E4F47A50];
        int v20 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
            VCEffectsManager_CapturedPixelBuffer_cold_3();
          }
          break;
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          *(void *)&uint8_t buf[4] = v19;
          *(_WORD *)&uint8_t buf[12] = 2080;
          *(void *)&buf[14] = "VCEffectsManager_CapturedPixelBuffer";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v40) = 470;
          int v15 = " [%s] %s:%d Sending video frame to AVC to process";
          goto LABEL_21;
        }
      }
      break;
    case 2:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v12 = VRTraceErrorLogLevelToCSTR();
        unsigned int v13 = *MEMORY[0x1E4F47A50];
        unsigned int v14 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
            VCEffectsManager_CapturedPixelBuffer_cold_2();
          }
          break;
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[12] = 2080;
          *(void *)&buf[14] = "VCEffectsManager_CapturedPixelBuffer";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v40) = 466;
          int v15 = " [%s] %s:%d Sending video frame to extension to process";
LABEL_21:
          _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, v15, buf, 0x1Cu);
        }
      }
      break;
    default:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        unsigned int v13 = *MEMORY[0x1E4F47A50];
        uint64_t v22 = *MEMORY[0x1E4F47A50];
        if (!*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
            VCEffectsManager_CapturedPixelBuffer_cold_1();
          }
          break;
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 136315650;
          *(void *)&uint8_t buf[4] = v21;
          *(_WORD *)&uint8_t buf[12] = 2080;
          *(void *)&buf[14] = "VCEffectsManager_CapturedPixelBuffer";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v40) = 479;
          int v15 = " [%s] %s:%d Dropping video frame due to effects being disabled";
          goto LABEL_21;
        }
      }
      break;
  }
  int v25 = (const void *)v30[5];
  if (v25) {
    CFRelease(v25);
  }
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v35, 8);
}

void sub_1E24356FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

uint64_t _VCAudioPlayer_InitializeBuffers(_DWORD *a1, int a2)
{
  uint64_t v4 = a1 + 13140;
  unint64_t v5 = (unint64_t)(a1 + 16);
  _VCAudioPlayer_FreePlaybackBuffer((unint64_t)(a1 + 16));
  _VCAudioPlayer_FreePlaybackBuffer((unint64_t)(a1 + 50));
  _VCAudioPlayer_FreePlaybackBuffer((unint64_t)(a1 + 82));
  a1[14] = 20 * a2;
  a1[48] = 20 * a2;
  a1[80] = a2;
  int v7 = *v4;
  int v6 = v4[1];
  a1[40] = v6;
  a1[74] = v6;
  a1[106] = v6;
  uint64_t PlaybackBuffer = _VCAudioPlayer_AllocatePlaybackBuffer(v5, v7 * 20 * a2);
  if ((PlaybackBuffer & 0x80000000) != 0)
  {
    uint64_t v11 = PlaybackBuffer;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioPlayer_InitializeBuffers_cold_1();
      }
    }
  }
  else
  {
    uint64_t v9 = _VCAudioPlayer_AllocatePlaybackBuffer((unint64_t)(a1 + 50), *v4 * a1[48]);
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v11 = v9;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioPlayer_InitializeBuffers_cold_2();
        }
      }
    }
    else
    {
      uint64_t v10 = _VCAudioPlayer_AllocatePlaybackBuffer((unint64_t)(a1 + 82), *v4 * a1[80]);
      if ((v10 & 0x80000000) != 0)
      {
        uint64_t v11 = v10;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioPlayer_InitializeBuffers_cold_3();
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v11;
}

void _VCAudioPlayer_FreePlaybackBuffer(unint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 96);
  if (*(int *)(a1 + 96) >= 1)
  {
    unsigned __int8 v3 = 0;
    while (1)
    {
      unint64_t v4 = a1 + 24 * v3;
      if (v4 < a1 || v4 + 24 > (unint64_t)v1) {
        break;
      }
      free(*(void **)v4);
      ++v3;
      *(void *)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      if (*v1 <= (int)v3) {
        return;
      }
    }
    __break(0x5519u);
  }
}

uint64_t _VCAudioPlayer_AllocatePlaybackBuffer(unint64_t a1, int a2)
{
  unint64_t v2 = a1 + 96;
  if (*(int *)(a1 + 96) < 1) {
    return 0;
  }
  unsigned __int8 v5 = 0;
  size_t v6 = a2;
  while (1)
  {
    uint64_t result = (uint64_t)malloc_type_malloc(v6, 0xBAF3D555uLL);
    if (!result) {
      return 2147549187;
    }
    if (a2 < 0) {
      break;
    }
    uint64_t v8 = (uint64_t *)(a1 + 24 * v5);
    if ((unint64_t)v8 < a1 || (unint64_t)(v8 + 3) > v2) {
      break;
    }
    *uint64_t v8 = result;
    unint64_t v10 = a1 + 24 * v5;
    *(void *)(v10 + 8) = v6;
    *(void *)(v10 + 16) = 0;
    if (*(_DWORD *)(a1 + 96) <= (int)++v5) {
      return 0;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t VCAudioPlayer_Initialize(uint64_t a1, unint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioPlayer_Initialize_cold_1();
      }
    }
    return 1;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 24))
  {
    unsigned int v5 = 2;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 64);
    unsigned int v5 = 2;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 4) == 119) {
        unsigned int v5 = 4;
      }
      else {
        unsigned int v5 = 2;
      }
    }
  }
  unsigned int v7 = *(_DWORD *)(v4 + 28);
  if (v7 - 1 >= v5)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
    {
      VRTraceErrorLogLevelToCSTR();
      if (VRTraceIsOSFaultDisabled())
      {
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioPlayer_Initialize_cold_7();
        }
      }
      else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
      {
        VCAudioPlayer_Initialize_cold_8();
      }
    }
    return 1;
  }
  if (v4 >= v4 + 48) {
    goto LABEL_55;
  }
  double v8 = *(double *)v4;
  uint64_t v9 = *(double *)v4;
  int v10 = *(_DWORD *)(v4 + 24);
  int v11 = *(_DWORD *)(v4 + 12);
  unsigned int v12 = *(_DWORD *)(v4 + 40);
  *(_DWORD *)(a1 + 52552) = v9;
  *(_DWORD *)(a1 + 52556) = v12;
  *(unsigned char *)(a1 + 52568) = v11 & 1;
  *(_DWORD *)(a1 + 52560) = v10;
  *(_DWORD *)(a1 + 52564) = v7;
  double v13 = (double)v12 / v8;
  *(double *)(a1 + 52576) = v13;
  *(double *)(a1 + 52928) = v13 * 0.5;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v14 = VRTraceErrorLogLevelToCSTR();
    int v15 = *MEMORY[0x1E4F47A50];
    uint64_t v16 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 52928);
        *(_DWORD *)CMTime buf = 136315906;
        uint64_t v39 = v14;
        __int16 v40 = 2080;
        uint64_t v41 = "_VCAudioPlayer_SetPlaybackFormat";
        __int16 v42 = 1024;
        int v43 = 195;
        __int16 v44 = 2048;
        *(void *)__int16 v45 = v17;
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d holeDetectionThreshold=%f", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      VCAudioPlayer_Initialize_cold_6();
    }
  }
  uint64_t v19 = _VCAudioPlayer_InitializeBuffers((_DWORD *)a1, *(_DWORD *)(v4 + 40));
  if (v19)
  {
    unint64_t v18 = v19;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioPlayer_Initialize_cold_5();
      }
    }
    goto LABEL_52;
  }
  unint64_t v20 = Crossfade_Initialize(a1 + 512, (int)((double)v9 * 0.01), v7 * v10, v11 & 1);
  if (v20)
  {
    unint64_t v18 = v20;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        VCAudioPlayer_Initialize_cold_4();
        if ((v18 & 0x80000000) == 0) {
          return v18;
        }
LABEL_52:
        VCAudioPlayer_Finalize(a1);
        return v18;
      }
    }
LABEL_51:
    if ((v18 & 0x80000000) == 0) {
      return v18;
    }
    goto LABEL_52;
  }
  VCSilencePredictor_Initialize(a1 + 552);
  if (a2 + 104 < a2) {
LABEL_55:
  }
    __break(0x5519u);
  *(void *)(a1 + 35568) = *(void *)a2;
  *(unsigned char *)(a1 + 35601) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 35602) = VCDefaults_GetBoolValueForKey(@"enableDeferredNetworkUplinkClockUpdate", 1);
  VCAudioPlayer_SetMaxHoleSize(a1, 0.109999999);
  uint64_t v21 = (int *)(a1 + 808);
  uint64_t v22 = VCTimescale_InitializeTimescaleAlgo((int *)(a1 + 808), v9, *(unsigned int *)(v4 + 40), v7, *(unsigned __int8 *)(a1 + 52568), *(_DWORD *)(a2 + 24));
  if (v22)
  {
    unint64_t v18 = v22;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        VCAudioPlayer_Initialize_cold_3();
        if ((v18 & 0x80000000) == 0) {
          return v18;
        }
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  _VCAudioPlayer_InitializeQueueSteeringAlgo(a1, a2);
  _VCAudioPlayer_ResetVariables(a1);
  bzero((void *)(a1 + 52936), 0x2A8uLL);
  *(_DWORD *)(a1 + 52936) = 0;
  *(unsigned char *)(a1 + 52940) = 1;
  int v23 = *(_DWORD *)(a2 + 56);
  double v24 = *(double *)(a1 + 52576);
  *(double *)(a1 + 52608) = v24 + v24;
  int v25 = (int)(0.2 / v24);
  *(_WORD *)(a1 + 52616) = v25;
  *(_WORD *)(a1 + 52618) = (int)(0.5 / v24);
  *(_WORD *)(a1 + 52622) = (int)(1.0 / v24);
  *(_WORD *)(a1 + 52620) = v25;
  *(double *)(a1 + 52624) = v24;
  *(double *)(a1 + 52632) = v24 + v24;
  *(unsigned char *)(a1 + 52600) = v23 == 20;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL BoolValueForKey = VCDefaults_GetBoolValueForKey(@"enableAudioPlayerDump", 0);
  *(unsigned char *)(a1 + 53616) = BoolValueForKey;
  if (BoolValueForKey) {
    *(void *)(a1 + 53624) = LogDump_OpenLog(v26, (uint64_t)"VCAudioPlayer", (uint64_t)".csv", (char)"STime,FrameSeqNum,FrameTimestamp,SampleRate,FrameSPF,FrameDtx,FrameSize,IsREDFrame,InSilence (low energy),SilencePredicted,FrameCodec,QueuedSamples,LeftOverSamples,AvgQSize,DesiredQSize,IsTargetCovered,TargetBoostingMode,TargetBoostingInSec,SpeechOnsetProtected,SpeechOffsetProtected,SamplesToAdjust,SamplesAdjusted,SamplesRequested,LeftOverSamplesOutput,SamplesNeed,PlayerMode,QueueGrowthMode,DecodeType,SamplesDecoded,DecSkip:Adjust,DecSkip:SamplesOut,SamplesIn,SamplesOut,InputBufferSampleCount,OutputBufferSampleCount,InputBufferTS,OutputBufferTS,IsNilDecode,NilDecodeCount,IsErasure,ErasuresCount,PacketLifeTime,PacketLifetimeCDFBin,PacketLifeTime5Perc,PacketLifeTime10Perc,PacketLifeTimeAvg,PacketLifeTime90Perc,InterArrivalTime,PacketLifetimeIsTrendingUp,PacketLifetimeIsTrendingDown,PacketLifetimeZeroCount,NumberOfPacketsWithHighInterarrival,AvgQSizeInSec,DesiredQSizeInSec,Underflow,ErasuresCountShortWindow,ErasuresCountLongWindow,QueueSteeringOffset,ShouldGrowQueue,ShouldShrinkQueue,ShouldProactivelyShrinkQueue,CurrentIndex,packetLifetimeIsLow,SpikeNeedsProtection,MinimumQueueSizeProtected,QueueSteeringIsPositive,NewSpikeDetected,ExitedSpike,queueGrewDueToSpike,SpikeDetected,SteeringNegativeWithErasures,LowQueueSize,HighQueueSize,ErasuresLongTermIsZero,ErasuresShortTermIsZero,ErasureReduced,Te"
  }
                                      "nPercentileHigherThanMin,FivePercentileHigherThanMin,NinetyPercentileHigherThanTar"
                                      "get,PacketLifetimeAvgHigherThanTarget,NegativeQueueSteeringWithErasures,SomePacket"
                                      "sHadZeroPacketLifetime,HasHighInterarrivalFrames,FirstSpeechPacketLifetime,IsNorma"
                                      "lPacketFlow,JitterIsLow,MinQueueSizeBuildThreshold,IsMinQueueRebuilt,QueueSizeThre"
                                      "sholdMet,PacketLifetimeThresholdMet,ShouldExitQueueGrowth,Channel1Rms,Channel2Rms,"
                                      "Channel1RmsAvg,Channel2RmsAvg,EnergyDecayFactor,Rms,RmsAvg,SilenceAvgFrameSize,Sil"
                                      "enceMaxFrameSizeLimit,AudioAvgFrameSize,AudioMinFrameSizeLimit,SilencePredictionEnabled,\n",
                                9,
                                (char)"1.0");
  VCAudioPlayerDTMF_Initialize(a1, a2);
  if (v28)
  {
    unint64_t v18 = v28;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        VCAudioPlayer_Initialize_cold_2();
        if ((v18 & 0x80000000) == 0) {
          return v18;
        }
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  *(void *)(a1 + 53816) = VCAudioDump_Create(3u, *(void *)(a2 + 64));
  *(void *)(a1 + 53824) = VCAudioDump_Create(4u, *(void *)(a2 + 64));
  *(_OWORD *)(a1 + 53832) = *(_OWORD *)(a2 + 80);
  if ((int)VRTraceGetErrorLogLevelForModule() < 7) {
    return 0;
  }
  uint64_t v29 = VRTraceErrorLogLevelToCSTR();
  int v30 = *MEMORY[0x1E4F47A50];
  unint64_t v18 = 0;
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
  {
    int v31 = *(_DWORD *)(a2 + 28);
    int v32 = *v21;
    int v33 = *(unsigned __int8 *)(a2 + 48);
    int v34 = *(_DWORD *)(a2 + 56);
    int v35 = *(unsigned __int8 *)(a2 + 72);
    int v36 = *(unsigned __int8 *)(a2 + 96);
    *(_DWORD *)CMTime buf = 136317698;
    uint64_t v39 = v29;
    __int16 v40 = 2080;
    uint64_t v41 = "VCAudioPlayer_Initialize";
    __int16 v42 = 1024;
    int v43 = 362;
    __int16 v44 = 1024;
    *(_DWORD *)__int16 v45 = v9;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = v31;
    __int16 v46 = 1024;
    int v47 = v32;
    __int16 v48 = 1024;
    unsigned int v49 = v7;
    __int16 v50 = 1024;
    int v51 = v33;
    __int16 v52 = 1024;
    int v53 = v34;
    __int16 v54 = 1024;
    int v55 = v35;
    __int16 v56 = 1024;
    int v57 = v36;
    _os_log_impl(&dword_1E1EA4000, v30, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Audio Player initialized with sampleRate=%d, bufferQueueManagementMode=%d, timescaleAlgorithm=%d, channelsPerFrame=%d dtmfTonePlaybackEnabled=%d minJitterBufferQueueSize=%d dtmfEventCallbacksEnabled=%d enableEnhancedJBAdaptations=%d", buf, 0x4Cu);
    return 0;
  }
  return v18;
}

void _VCAudioPlayer_InitializeQueueSteeringAlgo(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 35592;
  unsigned __int8 v3 = (void *)(a1 + 35608);
  uint64_t v4 = *(void *)(a1 + 35608);
  if (a1 + 35608 > (unint64_t)(a1 + 52440)) {
    __break(0x5519u);
  }
  uint64_t v7 = a1 + 51688;
  long long v10 = *(_OWORD *)(a1 + 51688);
  bzero((void *)(a1 + 35608), 0x41C0uLL);
  *(_DWORD *)(v2 + 16040) = (4 * *(_DWORD *)(v7 + 864)) / *(_DWORD *)(v7 + 868);
  *(_DWORD *)(v2 + 16036) = 1;
  if (a2)
  {
    *(_DWORD *)(v7 + 816) = VCDefaults_GetIntValueForKey(@"audioQueueManagementMode", *(unsigned int *)(a2 + 28));
    *(_OWORD *)(a1 + 52512) = *(_OWORD *)(a2 + 32);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315650;
        uint64_t v12 = v8;
        __int16 v13 = 2080;
        uint64_t v14 = "_VCAudioPlayer_InitializeQueueSteeringAlgo";
        __int16 v15 = 1024;
        int v16 = 259;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Queue steering callbacks configured", buf, 0x1Cu);
      }
    }
    *(double *)uint64_t v7 = VCDefaults_GetDoubleValueForKey(@"audioPlayerQueueTrendingUpThreshold", 1.09);
    *(double *)(v7 + 8) = VCDefaults_GetDoubleValueForKey(@"audioPlayerQueueTrendingDownThreshold", 0.91);
    *(double *)uint64_t v2 = VCDefaults_GetDoubleValueForKey(@"audioPlayerSpeechOnsetOffsetProtectionTime", 0.2);
    *(double *)(v2 + 16) = VCDefaults_GetDoubleValueForKey(@"audioPlayerQueueSteeringMultiplier", 0.3);
  }
  else
  {
    *unsigned __int8 v3 = v4;
    *(_OWORD *)uint64_t v7 = v10;
  }
}

void _VCAudioPlayer_ResetVariables(uint64_t a1)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 50) = 0;
  uint64_t v2 = a1 + 35520;
  *(_DWORD *)(a1 + 35540) = 0;
  uint64_t v3 = a1 + 52464;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 432) = 0;
  _VCAudioPlayer_ResetPlaybackBuffer(a1 + 64);
  _VCAudioPlayer_ResetPlaybackBuffer(a1 + 200);
  _VCAudioPlayer_ResetPlaybackBuffer(a1 + 328);
  *(_WORD *)(a1 + 780) = 257;
  *(void *)(v3 + 128) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)uint64_t v3 = 0;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 784) = 0;
  *(unsigned char *)(a1 + 29) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(v2 + 20) = 0;
  *(unsigned char *)(v3 + 64) = 0;
  *(void *)uint64_t v2 = 0;
}

void VCAudioPlayer_Finalize(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315650;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        uint64_t v8 = "VCAudioPlayer_Finalize";
        __int16 v9 = 1024;
        int v10 = 388;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Finalizing Audio Player", (uint8_t *)&v5, 0x1Cu);
      }
    }
    *(void *)(a1 + 35568) = 0;
    Crossfade_Finalize(a1 + 512);
    _VCAudioPlayer_FreePlaybackBuffer(a1 + 64);
    _VCAudioPlayer_FreePlaybackBuffer(a1 + 200);
    _VCAudioPlayer_FreePlaybackBuffer(a1 + 328);
    VCTimescale_Finalize(a1 + 808);
    if (*(unsigned char *)(a1 + 53616)) {
      LogDump_CloseLog(*(void *)(a1 + 53624));
    }
    VCAudioPlayerDTMF_Finalize(a1 + 53712);
    VCAudioDump_Finalize((void **)(a1 + 53816));
    VCAudioDump_Finalize((void **)(a1 + 53824));
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_Finalize_cold_1();
    }
  }
}

void VCAudioPlayer_NewStream(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    _VCAudioPlayer_ResetVariables(a1);
    _VCAudioPlayer_InitializeQueueSteeringAlgo(a1, 0);
    *(unsigned char *)(a1 + 176) = 0;
    *(unsigned char *)(a1 + 312) = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v2 = VRTraceErrorLogLevelToCSTR();
      uint64_t v3 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 136315650;
        uint64_t v5 = v2;
        __int16 v6 = 2080;
        __int16 v7 = "VCAudioPlayer_NewStream";
        __int16 v8 = 1024;
        int v9 = 379;
        _os_log_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d New Stream", (uint8_t *)&v4, 0x1Cu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_NewStream_cold_1();
    }
  }
}

BOOL VCAudioPlayer_IsUnderrunQueueBoostEnabled(uint64_t a1)
{
  if (a1) {
    return *(unsigned char *)(a1 + 52464) != 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  VRTraceErrorLogLevelToCSTR();
  BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    VCAudioPlayer_IsUnderrunQueueBoostEnabled_cold_1();
    return 0;
  }
  return result;
}

void VCAudioPlayer_ForceDecoderReset(uint64_t a1)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 28) = 1;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_ForceDecoderReset_cold_1();
    }
  }
}

float VCAudioPlayer_GetAverageInterarrivalTimeForWindow(uint64_t a1)
{
  if (a1) {
    return *(float *)(a1 + 52796);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetAverageInterarrivalTimeForWindow_cold_1();
    }
  }
  return NAN;
}

_DWORD *VCAudioPlayer_GetStatistics(_DWORD *a1)
{
  if (a1)
  {
    uint64_t v1 = a1 + 13162;
    uint64_t v2 = (float *)(a1 + 8888);
    uint64_t v3 = a1 + 13160;
    int v4 = a1[77];
    int v5 = a1[42];
    a1[13162] = a1[43];
    a1[13163] = v4;
    int v6 = a1[76] + v5;
    int v7 = VCTimescale_TailSize((uint64_t)(a1 + 202));
    v1[4] = v6 + v7;
    v1[5] = (int)(float)(*v2 + (float)(v6 + v7));
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioPlayer_GetStatistics_cold_1();
      }
    }
    return 0;
  }
  return v3;
}

uint64_t VCAudioPlayer_GetLeftOverSamples(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(_DWORD *)(a1 + 304) + *(_DWORD *)(a1 + 168);
    return v1 + VCTimescale_TailSize(a1 + 808);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  VRTraceErrorLogLevelToCSTR();
  uint64_t result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    VCAudioPlayer_GetLeftOverSamples_cold_1();
    return 0;
  }
  return result;
}

void VCAudioPlayer_ResetReportingMetrics(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a1 + 52716;
    Boolean keyExistsAndHasValidFormat = 0;
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"printMissingAudioPackets", @"com.apple.VideoConference", &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat) {
      *(_DWORD *)(v2 + 104) = AppBooleanValue;
    }
    CFPropertyListRef v4 = CFPreferencesCopyAppValue(@"forceNOLOG", @"com.apple.VideoConference");
    if (v4)
    {
      *(_DWORD *)(v2 + 100) = 0;
      CFRelease(v4);
    }
    else
    {
      *(_DWORD *)(v2 + 100) = 1;
    }
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(a1 + 52672) = 0u;
    *(_OWORD *)(a1 + 52688) = 0u;
    *(_OWORD *)(a1 + 52700) = 0u;
    *(void *)(a1 + 52728) = 0;
    *(void *)(a1 + 52736) = 0;
    *(void *)(a1 + 52720) = 0;
    *(_DWORD *)(a1 + 52744) = 0;
    *(void *)(a1 + 52760) = 0;
    *(void *)(a1 + 52768) = 0;
    *(void *)(a1 + 52752) = 0;
    *(_DWORD *)(v2 + 68) = 0;
    *(_DWORD *)(v2 + 72) = 0;
    *(_DWORD *)uint64_t v2 = 0;
    *(_OWORD *)(a1 + 52848) = 0u;
    *(_OWORD *)(a1 + 52864) = 0u;
    *(void *)(a1 + 52880) = 0;
    *(unsigned char *)(v2 + 1132) = 0;
    *(_DWORD *)(v2 + 1136) = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_ResetReportingMetrics_cold_1();
    }
  }
}

float VCAudioPlayer_GetFrameErasureRate(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(_DWORD *)(a1 + 52768);
    if (v1) {
      return (float)*(int *)(a1 + 52772) / (float)v1;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetFrameErasureRate_cold_1();
    }
  }
  return NAN;
}

float VCAudioPlayer_GetSpeechErasureRate(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(_DWORD *)(a1 + 52768);
    if (v1) {
      return (float)*(int *)(a1 + 52780) / (float)v1;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetSpeechErasureRate_cold_1();
    }
  }
  return NAN;
}

void VCAudioPlayer_SuspendAudioErasureMeasurement(uint64_t a1)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 53848) = 1;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_SuspendAudioErasureMeasurement_cold_1();
    }
  }
}

void VCAudioPlayer_ResumeAudioErasureMeasurement(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 53848))
    {
      *(_DWORD *)(a1 + 53852) = a2;
      *(unsigned char *)(a1 + 53848) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 53852) = 0;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_ResumeAudioErasureMeasurement_cold_1();
    }
  }
}

void VCAudioPlayer_GetTimescaleMetrics(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  if (a1)
  {
    int v5 = *(_DWORD *)(a1 + 52848);
    int v6 = *(_DWORD *)(a1 + 52852);
    int v7 = *(_DWORD *)(a1 + 52680);
    int v8 = *(_DWORD *)(a1 + 52864);
    __int32 v9 = v5 - *(_DWORD *)(a1 + 52868);
    unsigned int v10 = v6 - *(_DWORD *)(a1 + 52872);
    int v11 = v8 - *(_DWORD *)(a1 + 52884);
    int32x2_t v12 = *(int32x2_t *)(a1 + 52856);
    int32x2_t v13 = vsub_s32(v12, *(int32x2_t *)(a1 + 52876));
    int v14 = *(_DWORD *)(a1 + 52728);
    *(_DWORD *)(a1 + 52868) = v5;
    *(_DWORD *)(a1 + 52872) = v6;
    *(int32x2_t *)(a1 + 52876) = v12;
    *(_DWORD *)(a1 + 52884) = v8;
    unsigned int v15 = v7 - v14;
    if (v7 == v14)
    {
      float32x2_t v16 = 0;
      float v17 = 0.0;
    }
    else
    {
      *(float *)&a5 = (float)v15;
      float v17 = (float)v10 / (float)v15;
      uint32x2_t v18 = (uint32x2_t)vdup_lane_s32(v13, 0);
      v18.i32[0] = v9;
      float32x2_t v16 = vdiv_f32(vcvt_f32_u32(v18), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0));
    }
    *(float *)(a2 + 124) = v17;
    *(float32x2_t *)(a2 + 116) = v16;
    *(_DWORD *)(a2 + 96) = v9;
    *(_DWORD *)(a2 + 100) = v10;
    *(int32x2_t *)(a2 + 104) = v13;
    *(_DWORD *)(a2 + 112) = v11;
    *(int32x2_t *)(a2 + 128) = vrev64_s32(*(int32x2_t *)(a1 + 52888));
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetTimescaleMetrics_cold_1();
    }
  }
}

void VCAudioPlayer_GetRedErasureMetrics(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = (int32x2_t *)(a1 + 52672);
    __int32 v4 = *(_DWORD *)(a1 + 52676);
    __int32 v34 = *(_DWORD *)(a1 + 52672);
    uint64_t v5 = a1 + 35568;
    __int32 v7 = *(_DWORD *)(a1 + 52688);
    __int32 v6 = *(_DWORD *)(a1 + 52692);
    __int32 v8 = *(_DWORD *)(a1 + 52696);
    __int32 v9 = *(_DWORD *)(a1 + 52700);
    __int32 v10 = *(_DWORD *)(a1 + 52704);
    __int32 v11 = *(_DWORD *)(a1 + 52708);
    int32x2_t v12 = *(int32x2_t *)(a1 + 52680);
    SpeechUnderflowCFIndex Count = JitterQueue_GetSpeechUnderflowCount(*(void *)(a1 + 35568));
    __int32 v15 = *(_DWORD *)(v5 + 16096);
    __int32 v17 = v3[6].i32[0];
    __int32 v16 = v3[6].i32[1];
    int32x2_t v18 = vsub_s32(v12, v3[7]);
    __int32 v19 = v6 - v3[8].i32[1];
    __int32 v20 = v7 - v3[8].i32[0];
    int v21 = v8 - v3[9].i32[0];
    __int32 v22 = v9 - v3[9].i32[1];
    __int32 v23 = v3[10].i32[1];
    __int32 v24 = v10 - v3[10].i32[0];
    __int32 v25 = SpeechUnderflowCount - v3[11].i32[0];
    __int32 v26 = v15 - v3[11].i32[1];
    v3[6].i32[0] = v34;
    v3[6].i32[1] = v4;
    v3[7] = v12;
    v3[9].i32[0] = v8;
    v3[9].i32[1] = v9;
    v3[10].i32[0] = v10;
    v3[10].i32[1] = v11;
    v3[11].i32[0] = SpeechUnderflowCount;
    v3[11].i32[1] = v15;
    v3[8].i32[0] = v7;
    v3[8].i32[1] = v6;
    if (v18.i32[0] < 1)
    {
      __int32 v28 = 0;
      int v27 = 0;
      float32x4_t v31 = 0uLL;
      float v30 = 0.0;
      float v32 = 0.0;
    }
    else
    {
      int v27 = v4 - v16;
      __int32 v28 = v34 - v17;
      *(float *)v14.i32 = (float)v18.i32[0];
      v29.i64[0] = __PAIR64__(v24, v22);
      float v30 = (float)v21 / (float)v18.i32[0];
      v29.i64[1] = __PAIR64__(v11 - v23, v25);
      float32x4_t v31 = vdivq_f32(vcvtq_f32_s32(v29), (float32x4_t)vdupq_lane_s32(v14, 0));
      float v32 = (float)v27 / (float)v18.i32[0];
    }
    *(float *)(a2 + 20) = v30;
    *(float32x4_t *)(a2 + 24) = v31;
    __int32 v33 = v3[5].i32[1];
    *(float *)(a2 + 40) = v32;
    *(_DWORD *)(a2 + 44) = v33;
    v3[5].i32[1] = 0;
    *(_DWORD *)(a2 + 48) = v27;
    *(_DWORD *)(a2 + 52) = v28;
    *(int32x2_t *)(a2 + 56) = v18;
    *(_DWORD *)(a2 + 72) = v21;
    *(_DWORD *)(a2 + 76) = v22;
    *(_DWORD *)(a2 + 80) = v25;
    *(_DWORD *)(a2 + 84) = v24;
    *(_DWORD *)(a2 + 88) = v26;
    *(_DWORD *)(a2 + 64) = v19;
    *(_DWORD *)(a2 + 68) = v20;
    if (!v3[21].i8[4])
    {
      *(_DWORD *)(a2 + 92) = v3[5].i32[0];
      v3[5].i32[0] = 0;
    }
    *(_DWORD *)(a2 + 160) = v3[28].i32[1];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetRedErasureMetrics_cold_1();
    }
  }
}

float VCAudioPlayer_GetAverageLossRate(uint64_t a1)
{
  if (a1) {
    return *(float *)(a1 + 52784);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetAverageLossRate_cold_1();
    }
  }
  return NAN;
}

float VCAudioPlayer_GetLastAverageMissingPercentOverWindow(uint64_t a1)
{
  if (a1) {
    return *(float *)(a1 + 52788);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetLastAverageMissingPercentOverWindow_cold_1();
    }
  }
  return NAN;
}

float VCAudioPlayer_GetAverageJitterSizeForWindow(uint64_t a1)
{
  if (a1) {
    return *(float *)(a1 + 52800);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetAverageJitterSizeForWindow_cold_1();
    }
  }
  return NAN;
}

double VCAudioPlayer_GetAverageJitterSizeForSession(uint64_t a1)
{
  if (a1)
  {
    int v1 = *(_DWORD *)(a1 + 52680);
    if (v1) {
      return (float)(*(double *)(a1 + 52808) / (double)v1);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioPlayer_GetAverageJitterSizeForSession_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetAverageJitterSizeForSession_cold_1();
    }
  }
  return NAN;
}

float VCAudioPlayer_MaxInterArrivalTimeForWindow(uint64_t a1)
{
  if (a1) {
    return *(float *)(a1 + 52792);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_MaxInterArrivalTimeForWindow_cold_1();
    }
  }
  return NAN;
}

void VCAudioPlayer_GetDTMFEventCount(uint64_t a1)
{
  if (!a1 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetDTMFEventCount_cold_1();
    }
  }
}

void VCAudioPlayer_UpdateLastEnqueuedFrameInformation(uint64_t a1, uint64_t a2, int a3, float a4)
{
  if (a1 && a2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 35536);
    if (*(unsigned char *)(a1 + 35536)) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = *(_DWORD *)(a2 + 1176) != 0;
    }
    BOOL v6 = *(_DWORD *)(a2 + 1196) == 104 && !*(unsigned char *)(a1 + 35537) && *(unsigned char *)(a2 + 1268) != 0;
    if (v5 || v6) {
      *(_DWORD *)(a1 + 35588) = *(_DWORD *)(a2 + 12);
    }
    if (a3)
    {
      if (*(float *)(a1 + 52792) < a4) {
        *(float *)(a1 + 52792) = a4;
      }
      float v7 = a4 * 0.1 + *(float *)(a1 + 52796) * 0.9;
      *(float *)(a1 + 52796) = v7;
      if (!v4) {
        *(float *)(a1 + 52368) = a4;
      }
    }
    *(unsigned char *)(a1 + 35536) = *(_DWORD *)(a2 + 1176) != 0;
    *(unsigned char *)(a1 + 35537) = *(unsigned char *)(a2 + 1268);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_UpdateLastEnqueuedFrameInformation_cold_1();
    }
  }
}

uint64_t VCAudioPlayer_GetWrmMetrics(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = a1 + 52552;
    float v3 = *(float *)(a1 + 35552);
    int v4 = *(_DWORD *)(a1 + 304) + *(_DWORD *)(a1 + 168);
    int v5 = VCTimescale_TailSize(a1 + 808);
    HIDWORD(v6) = 1083129856;
    LODWORD(v6) = *(_DWORD *)v2;
    double v7 = (float)(v3 + (float)(v4 + v5)) * 1000.0 / (double)v6;
    uint64_t result = a1 + 52904;
    *(void *)(v2 + 368) = (unint64_t)v7;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioPlayer_GetWrmMetrics_cold_1();
      }
    }
    return 0;
  }
  return result;
}

float VCAudioPlayer_GetPercentPacketsLateAndMissing(uint64_t a1)
{
  if (a1) {
    return *(float *)(a1 + 52784);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetPercentPacketsLateAndMissing_cold_1();
    }
  }
  return NAN;
}

uint64_t VCAudioPlayer_GetPlaybackFormat(uint64_t a1)
{
  if (a1) {
    return a1 + 52552;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetPlaybackFormat_cold_1();
    }
  }
  return 0;
}

void VCAudioPlayer_SetMaxHoleSize(uint64_t a1, double a2)
{
  if (a1)
  {
    uint64_t v2 = (unsigned int *)(a1 + 52552);
    if (a2 < 0.109999999) {
      a2 = 0.109999999;
    }
    *(double *)(a1 + 35576) = a2;
    float v3 = *(uint64_t **)(a1 + 35568);
    unsigned int v4 = *v2;
    JitterQueue_SetMaxPacketTimeDelta(v3, v4, a2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_SetMaxHoleSize_cold_1();
    }
  }
}

void VCAudioPlayer_GetBurstMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v4 = (int *)(a1 + 52936);
    uint64_t v41 = a1 + 52552;
    unint64_t v42 = a1 + 53616;
    if (*(unsigned __int16 *)(a2 + 14) - *(unsigned __int16 *)(a2 + 12) >= 320) {
      int v5 = 320;
    }
    else {
      int v5 = *(unsigned __int16 *)(a2 + 14) - *(unsigned __int16 *)(a2 + 12);
    }
    unsigned int v6 = *(unsigned __int16 *)(a1 + 53614);
    int v7 = 0;
    if (v5)
    {
      unint64_t v8 = a1 + 52972;
      unint64_t v9 = a1 + 53612;
      do
      {
        __int32 v10 = (unsigned __int16 *)(v8 + 2 * v6);
        if ((unint64_t)v10 >= v9 || (unint64_t)v10 < v8) {
          goto LABEL_57;
        }
        unsigned int v12 = *v10;
        if (*(unsigned __int16 *)(a2 + 14) <= v12) {
          goto LABEL_16;
        }
        if ((unint64_t)v4 >= v42) {
          goto LABEL_57;
        }
        _VCAudioPlayer_UpdateBurstInfo(v4, v12, *(_DWORD *)(a1 + 12) != 0);
        unsigned int v6 = (v6 + 1) % 0x140;
        ++v7;
      }
      while (v5 != v7);
      int v7 = v5;
    }
LABEL_16:
    if (v6)
    {
      int32x2_t v13 = (unsigned __int16 *)(a1 + 52972 + 2 * (v6 - 1));
      if ((unint64_t)v13 >= a1 + 53612 || (unint64_t)v13 < a1 + 52972) {
LABEL_57:
      }
        __break(0x5519u);
    }
    else
    {
      int32x2_t v13 = (unsigned __int16 *)(v41 + 1058);
    }
    int v15 = *v13;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      __int32 v17 = *MEMORY[0x1E4F47A50];
      int32x2_t v18 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *(unsigned __int16 *)(v41 + 1062);
          int v20 = *(unsigned __int16 *)(v41 + 1060);
          int v21 = *(unsigned __int16 *)(a2 + 12);
          int v22 = *(unsigned __int16 *)(a2 + 14);
          *(_DWORD *)CMTime buf = 136317698;
          uint64_t v44 = v16;
          __int16 v45 = 2080;
          __int16 v46 = "VCAudioPlayer_GetBurstMetrics";
          __int16 v47 = 1024;
          int v48 = 2135;
          __int16 v49 = 2048;
          uint64_t v50 = a1;
          __int16 v51 = 1024;
          int v52 = v7;
          __int16 v53 = 1024;
          int v54 = v5;
          __int16 v55 = 1024;
          int v56 = v19;
          __int16 v57 = 1024;
          int v58 = v20;
          __int16 v59 = 1024;
          int v60 = v21;
          __int16 v61 = 1024;
          int v62 = v22;
          __int16 v63 = 1024;
          int v64 = v15;
          _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d audioPlayer=%p frameCount=%d numFramesInRTCPReport=%d readIndex=%d writeIndex=%d SeqStart=%d SeqEnd=%d endSequenceNumber=%d", buf, 0x50u);
          if (!v7) {
            goto LABEL_35;
          }
          goto LABEL_30;
        }
      }
      else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        int v37 = *(unsigned __int16 *)(v41 + 1062);
        int v38 = *(unsigned __int16 *)(v41 + 1060);
        int v39 = *(unsigned __int16 *)(a2 + 12);
        int v40 = *(unsigned __int16 *)(a2 + 14);
        *(_DWORD *)CMTime buf = 136317698;
        uint64_t v44 = v16;
        __int16 v45 = 2080;
        __int16 v46 = "VCAudioPlayer_GetBurstMetrics";
        __int16 v47 = 1024;
        int v48 = 2135;
        __int16 v49 = 2048;
        uint64_t v50 = a1;
        __int16 v51 = 1024;
        int v52 = v7;
        __int16 v53 = 1024;
        int v54 = v5;
        __int16 v55 = 1024;
        int v56 = v37;
        __int16 v57 = 1024;
        int v58 = v38;
        __int16 v59 = 1024;
        int v60 = v39;
        __int16 v61 = 1024;
        int v62 = v40;
        __int16 v63 = 1024;
        int v64 = v15;
        _os_log_debug_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d audioPlayer=%p frameCount=%d numFramesInRTCPReport=%d readIndex=%d writeIndex=%d SeqStart=%d SeqEnd=%d endSequenceNumber=%d", buf, 0x50u);
        if (!v7) {
          goto LABEL_35;
        }
        goto LABEL_30;
      }
    }
    if (!v7)
    {
LABEL_35:
      *(_WORD *)(v41 + 1062) = v6;
      unsigned int v24 = *(_DWORD *)(v41 + 396);
      unsigned int v25 = *(_DWORD *)(v41 + 400);
      int v26 = *(_DWORD *)(v41 + 412);
      float v27 = 0.0;
      float v28 = 0.0;
      unsigned int v29 = *(_DWORD *)(v41 + 404);
      if (v24) {
        float v28 = (double)v25 / (double)v24;
      }
      int v30 = *(_DWORD *)(v41 + 416);
      unsigned int v31 = *(_DWORD *)(v41 + 408);
      *(float *)a2 = v28;
      unsigned int v32 = v26 - v24;
      if (v32) {
        float v27 = (double)(v30 - v25) / (double)v32;
      }
      *(float *)(a2 + 4) = v27;
      unsigned int v33 = (1000 * *(_DWORD *)(v41 + 4)) / *(_DWORD *)v41;
      if (v29)
      {
        unsigned int v34 = v33 * v24 / v29;
        if (v34 >= 0xFFFF) {
          LOWORD(v34) = -1;
        }
      }
      else
      {
        LOWORD(v34) = 0;
      }
      *(_WORD *)(a2 + 8) = v34;
      if (*(_DWORD *)(v41 + 392)) {
        unsigned int v35 = v31 + 1;
      }
      else {
        unsigned int v35 = v31;
      }
      if (v35)
      {
        unsigned int v36 = v33 * v32 / v35;
        if (v36 >= 0xFFFF) {
          LOWORD(v36) = -1;
        }
        *(_WORD *)(a2 + 10) = v36;
      }
      else
      {
        *(_WORD *)(a2 + 10) = 0;
      }
      return;
    }
LABEL_30:
    if (*(unsigned __int16 *)(a2 + 14) - 1 != v15)
    {
      if ((unint64_t)v4 >= v42) {
        goto LABEL_57;
      }
      __int32 v23 = (unsigned __int16 *)(a1 + 52972 + 2 * v6);
      if ((unint64_t)v23 >= a1 + 53612 || (unint64_t)v23 < a1 + 52972) {
        goto LABEL_57;
      }
      _VCAudioPlayer_UpdateBurstInfo(v4, *v23, *(_DWORD *)(a1 + 12) != 0);
    }
    goto LABEL_35;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetBurstMetrics_cold_1();
    }
  }
}

void _VCAudioPlayer_UpdateBurstInfo(int *a1, int a2, int a3)
{
  if (a3 && *((unsigned char *)a1 + 4))
  {
    __int16 v3 = a2 - 1;
    if (!a2) {
      __int16 v3 = 0;
    }
    *((_WORD *)a1 + 3) = v3;
  }
  unsigned __int16 v4 = *((_WORD *)a1 + 3) + 1;
  int v5 = *a1;
  if (*a1 == 2)
  {
    if (a2 != v4)
    {
      unsigned __int16 v12 = a2 - v4;
      if ((unsigned __int16)(a2 - v4) <= 0x7FFEu)
      {
        __int16 v13 = v12 + *((_WORD *)a1 + 4);
        int v14 = a1[8] + v12;
        a1[7] += (unsigned __int16)(v12 + 1);
        a1[8] = v14;
        *((_WORD *)a1 + 3) = a2;
        int v15 = a1[4];
        int v16 = a1[3] + v13;
        a1[2] = 1;
        a1[3] = v16;
        a1[4] = v15 + v12;
        return;
      }
    }
    if (a2 == v4)
    {
      ++a1[7];
      unsigned int v21 = a1[2] + 1;
      a1[2] = v21;
      *((_WORD *)a1 + 3) = a2;
      int v22 = 2 * (v21 < 0x10);
LABEL_36:
      *a1 = v22;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCAudioPlayer_UpdateBurstInfo_cold_1();
          }
        }
      }
      else if (a2 == v4 || (unsigned __int16 v6 = a2 - v4, (unsigned __int16)(a2 - v4) > 0x7FFEu))
      {
        if (a2 == v4 || a3 && *((unsigned char *)a1 + 4))
        {
          *((unsigned char *)a1 + 4) = 0;
          ++a1[7];
          ++a1[2];
          *((_WORD *)a1 + 3) = a2;
        }
      }
      else
      {
        unsigned int v7 = (unsigned __int16)(a2 - v4);
        int v8 = a1[8] + v6;
        a1[7] += (unsigned __int16)(v6 + 1);
        a1[8] = v8;
        *((_WORD *)a1 + 3) = a2;
        a1[2] = 1;
        if ((v6 & 0xFFFE) != 0) {
          int v9 = v6;
        }
        else {
          int v9 = 0;
        }
        int v10 = a1[3];
        a1[4] += v9;
        if (v7 <= 1) {
          int v11 = 1;
        }
        else {
          int v11 = 2;
        }
        *a1 = v11;
        if (v7 >= 2)
        {
          *(int32x2_t *)(a1 + 5) = vadd_s32(*(int32x2_t *)(a1 + 5), (int32x2_t)0x100000001);
          a1[3] = v10 + v7;
        }
      }
      return;
    }
    if (a2 != v4 && (unsigned __int16)(a2 - v4) <= 0x7FFEu)
    {
      int v17 = a1[8] + (unsigned __int16)(a2 - v4);
      int v18 = (unsigned __int16)(a2 - v4) + 1;
      __int16 v19 = a1[2] + v18;
      a1[7] += v18;
      a1[8] = v17;
      *((_WORD *)a1 + 3) = a2;
      a1[2] = 1;
      *a1 = 2;
      v20.i64[1] = 0x100000001;
      v20.i32[0] = v19;
      v20.i32[1] = v18;
      *(int32x4_t *)(a1 + 3) = vaddq_s32(*(int32x4_t *)(a1 + 3), v20);
      return;
    }
    if (a2 == v4)
    {
      ++a1[7];
      unsigned int v23 = a1[2] + 1;
      a1[2] = v23;
      *((_WORD *)a1 + 3) = a2;
      int v22 = v23 < 0x10;
      goto LABEL_36;
    }
  }
}

void VCAudioPlayer_AdjustmentDisabled(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 52584) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_AdjustmentDisabled_cold_1();
    }
  }
}

void VCAudioPlayer_SetTargetBoostMode(uint64_t a1, int a2, double a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      unsigned __int16 v6 = (uint64_t *)(a1 + 52424);
      if (*(_DWORD *)(a1 + 52544) != a2 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        int v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v9 = &targetBoostingDescription[a2];
          if (v9 >= (char **)VCControlChannel_UnencryptedString || v9 < targetBoostingDescription)
          {
            __break(0x5519u);
            return;
          }
          int v10 = *v9;
          uint64_t v12 = *v6;
          uint64_t v11 = *(void *)(a1 + 52432);
          int v13 = *(_DWORD *)(a1 + 20);
          int v14 = *(_DWORD *)(a1 + 24);
          int v15 = 136317186;
          uint64_t v16 = v7;
          __int16 v17 = 2080;
          int v18 = "VCAudioPlayer_SetTargetBoostMode";
          __int16 v19 = 1024;
          int v20 = 2894;
          __int16 v21 = 2080;
          int v22 = v10;
          __int16 v23 = 2048;
          uint64_t v24 = v11;
          __int16 v25 = 2048;
          uint64_t v26 = v12;
          __int16 v27 = 2048;
          double v28 = a3;
          __int16 v29 = 1024;
          int v30 = v13;
          __int16 v31 = 1024;
          int v32 = v14;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Target boosting has changed: targetBoostMode=%s, minQueueSize=%.2f, currentTargetSize=%.2f, targetBoostingInSec=%.2f, lastDecodedFrameSN=%d, lastDecodedFrameTS=%d", (uint8_t *)&v15, 0x50u);
        }
      }
      *(_DWORD *)(a1 + 52544) = a2;
      *(unsigned char *)(a1 + 52528) = a2 != 0;
      *(double *)(a1 + 52536) = a3;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_SetTargetBoostMode_cold_1();
    }
  }
}

void VCAudioPlayer_GetSilenceSamples(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v5 = a1 + 35520;
        int v6 = *(_DWORD *)(a1 + 35528);
        _VCAudioPlayer_UpdateJitterQueueSize(a1);
        _VCAudioPlayer_FillSilenceBuffer((_DWORD *)a1, *(void *)a2, *(_DWORD *)(a2 + 8), *(void *)(a2 + 24), *(int **)(a2 + 16));
        **(unsigned char **)(a2 + 56) = 1;
        _VCAudioPlayer_UpdateLogDumpStats(a1, *(_DWORD *)(a2 + 8), 0, *(_DWORD *)(a2 + 8));
        _VCAudioPlayer_LogStats((FILE **)a1);
        uint64_t v7 = &audioPlayerMode[*(unsigned int *)(a1 + 712)];
        if (v7 >= queueGrowthMode || v7 < audioPlayerMode)
        {
          __break(0x5519u);
        }
        else
        {
          *(void *)(v5 + 17136) = *v7;
          if (*(_DWORD *)(v5 + 12)) {
            uint64_t v8 = 0;
          }
          else {
            uint64_t v8 = *(void *)(a1 + 52836);
          }
          *(void *)(v5 + 17120) = v8;
          ++*(_DWORD *)(a1 + 52904);
          *(int32x2_t *)(a1 + 52912) = vadd_s32(*(int32x2_t *)(a1 + 52912), (int32x2_t)0x100000001);
          ++*(_DWORD *)(a1 + 52680);
          ++*(_DWORD *)(a1 + 52768);
          _VCAudioPlayer_UpdateLosses(a1);
          *(double *)uint64_t v5 = micro();
          if (v6 == *(_DWORD *)(v5 + 8) && (int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v9 = VRTraceErrorLogLevelToCSTR();
            int v10 = *MEMORY[0x1E4F47A50];
            uint64_t v11 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                int v12 = 136315906;
                uint64_t v13 = v9;
                __int16 v14 = 2080;
                int v15 = "VCAudioPlayer_GetSilenceSamples";
                __int16 v16 = 1024;
                int v17 = 3503;
                __int16 v18 = 1024;
                int v19 = v6;
                _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Timestamp did not increment: %d", (uint8_t *)&v12, 0x22u);
              }
            }
            else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
            {
              VCAudioPlayer_GetSilenceSamples_cold_4();
            }
          }
          *(_DWORD *)(v5 + 84) += *(_DWORD *)(a2 + 8);
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCAudioPlayer_GetSilenceSamples_cold_3();
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioPlayer_GetSilenceSamples_cold_2();
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCAudioPlayer_GetSilenceSamples_cold_1();
    }
  }
}

double _VCAudioPlayer_UpdateJitterQueueSize(uint64_t a1)
{
  uint64_t v2 = a1 + 52552;
  uint64_t v3 = a1 + 35552;
  *(float *)(a1 + 35552) = (float)JitterQueue_QueuedSamples(*(void *)(a1 + 35568));
  float v4 = *(float *)v3;
  int LeftOverSamples = VCAudioPlayer_GetLeftOverSamples(a1);
  LODWORD(v6) = *(_DWORD *)v2;
  double v7 = (float)(v4 + (float)LeftOverSamples) / (double)v6;
  *(double *)(v3 + 8) = v7;
  *(float *)&unint64_t v6 = v7 * 0.1 + *(float *)(v2 + 248) * 0.9;
  *(_DWORD *)(v2 + 248) = v6;
  double result = v7 + *(double *)(v2 + 256);
  *(double *)(v2 + 256) = result;
  return result;
}

void _VCAudioPlayer_FillSilenceBuffer(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, int *a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (double *)(a1 + 8880);
  VCAudioBufferList_ZeroMemory(a2);
  double v11 = micro();
  if (*v9 <= 0.0
    || (double v12 = v11 - *v9, v13 = (double)(5 * a3), LODWORD(v10) = a1[13138], v14 = (double)v10, v12 <= v13 / v14))
  {
    int v15 = a3;
  }
  else
  {
    int v15 = (int)(v12 * v14);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v16 = VRTraceErrorLogLevelToCSTR();
      int v17 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        double v18 = v11 - *v9;
        int v22 = 136316930;
        double v19 = (double)a1[13138];
        uint64_t v23 = v16;
        __int16 v24 = 2080;
        __int16 v25 = "_VCAudioPlayer_FillSilenceBuffer";
        __int16 v26 = 1024;
        int v27 = 2410;
        __int16 v28 = 2048;
        __int16 v29 = a1;
        __int16 v30 = 2048;
        double v31 = v18;
        __int16 v32 = 2048;
        double v33 = v13 / v19;
        __int16 v34 = 1024;
        int v35 = v15;
        __int16 v36 = 1024;
        int v37 = a3;
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d [%p] Detected a time gap of %0.6f seconds (larger than %0.6f threshold). Incrementing by sampleCount=%d instead of by oldSampleCount=%d.", (uint8_t *)&v22, 0x46u);
      }
    }
  }
  int v20 = *((_DWORD *)v9 + 2) + v15;
  *((_DWORD *)v9 + 2) = v20;
  int v21 = a1[43] + v15;
  a1[77] += v15;
  a1[42] = 0;
  a1[43] = v21;
  a1[76] = 0;
  *a5 = v20;
  if (a4) {
    *(void *)(a4 + 16) = 0;
  }
  ++*a1;
}

uint64_t _VCAudioPlayer_UpdateLogDumpStats(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4 = result + 53616;
  if (*(unsigned char *)(result + 53616))
  {
    uint64_t v5 = result + 35568;
    *(_DWORD *)(result + 53664) = a2;
    *(_DWORD *)(result + 53672) = a3;
    *(_DWORD *)(result + 53676) = a4;
    double result = JitterQueue_GetSpeechUnderflowCount(*(void *)(result + 35568));
    int v12 = *(_DWORD *)(v5 + 16096) + result;
    *(_DWORD *)(v4 + 80) = v12;
    int v13 = v12 - *(_DWORD *)(v4 + 84);
    *(_DWORD *)(v4 + 88) = v13;
    if (v13)
    {
      double result = (uint64_t)VRLogfilePrintSync(*(FILE ***)(v4 + 8), "Warning: Jitter Queue underflow detected. UnderflowCount=%d  lastDecodedTimestamp=%u\n", v6, v7, v8, v9, v10, v11, v13);
      int v12 = *(_DWORD *)(v4 + 80);
    }
    *(_DWORD *)(v4 + 84) = v12;
  }
  return result;
}

FILE **_VCAudioPlayer_LogStats(FILE **result)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  int v1 = result + 6547;
  if (*((unsigned char *)result + 53616))
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t v3 = result + 4438;
    memset(v12, 170, 20);
    double v4 = micro();
    LogDump_GetTimestampString(v4);
    uint64_t v11 = (FILE **)v1[156];
    JitterQueue_QueuedSamples((uint64_t)v3[8]);
    VCAudioPlayer_GetLeftOverSamples(v2);
    uint64_t v5 = &targetBoostingDescription[*((unsigned int *)v1 + 42)];
    if (v5 >= (char **)VCControlChannel_UnencryptedString
      || v5 < targetBoostingDescription
      || (uint64_t v6 = &audioPlayerMode[*(unsigned int *)(v2 + 712)], v6 >= queueGrowthMode)
      || v6 < audioPlayerMode
      || (uint64_t v7 = &queueGrowthMode[*((unsigned int *)v1 + 20)], v7 >= targetBoostingDescription)
      || v7 < queueGrowthMode
      || ((int v8 = *((_DWORD *)v3 + 4030), v8 <= 0) ? (v9 = 0) : (v9 = v8 - 1),
          (unint64_t v10 = v2 + 35624 + 40 * v9, v10 >= (unint64_t)(v3 + 2015)) || v10 < v2 + 35624))
    {
      __break(0x5519u);
    }
    return VRLogfilePrintSync(v11, "%s, %u, %u, %d, %d, %d, %d, %d, %d, %u, %d, %d, %d, %d, %d, %d, %s, %f, %d, %d, %d, %d, %d, %d, %d, %s, %s, %s, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %f, %d, %f, %f, %f, %f, %f, %d, %d, %d, %d, %f, %f, %d, %d, %d, %f, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d \n", *((unsigned __int8 *)v1 + 5), *((unsigned __int8 *)v1 + 4), *((unsigned __int8 *)v1 + 18), *((unsigned __int8 *)v1 + 17), *((unsigned __int8 *)v1 + 32), *((unsigned __int8 *)v1 + 27), (char)v12);
  }
  return result;
}

void _VCAudioPlayer_UpdateLosses(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1 + 52552;
  int v2 = *(_DWORD *)(a1 + 52768);
  if ((float)((float)(*(_DWORD *)(a1 + 52556) * v2) / (float)*(unsigned int *)(a1 + 52552)) > 5.0)
  {
    float v3 = (float)*(int *)(a1 + 52772) / (float)v2;
    float v4 = *(float *)(a1 + 52784);
    float v5 = v3 * 0.3 + v4 * 0.7;
    BOOL v6 = v4 <= 0.0;
    if (v4 >= 0.0) {
      float v7 = (float)*(int *)(a1 + 52772) / (float)v2;
    }
    else {
      float v7 = v3 * 0.3 + v4 * 0.7;
    }
    if (!v6) {
      float v7 = v5;
    }
    *(float *)(a1 + 52784) = v7;
    if (!*(_DWORD *)(a1 + 52816) && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      unsigned int v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(_DWORD *)(v1 + 216);
        int v10 = *(_DWORD *)(v1 + 220);
        double v12 = *(float *)(v1 + 232);
        double v13 = *(float *)(v1 + 240);
        double v14 = *(float *)(v1 + 248);
        double v15 = *(float *)(v1 + 244);
        int v16 = 136317442;
        uint64_t v17 = v8;
        __int16 v18 = 2080;
        double v19 = "_VCAudioPlayer_UpdateLosses";
        __int16 v20 = 1024;
        int v21 = 576;
        __int16 v22 = 2048;
        double v23 = v3;
        __int16 v24 = 1024;
        int v25 = v10;
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2048;
        double v29 = v12;
        __int16 v30 = 2048;
        double v31 = v13;
        __int16 v32 = 2048;
        double v33 = v14;
        __int16 v34 = 2048;
        double v35 = v15;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Fraction of missing packets during 5 seconds = %f, missing = %d, total = %d, average = %f [max interarrival = %f, average jitter size = %f, average interarrival = %f]", (uint8_t *)&v16, 0x5Au);
      }
    }
    *(float *)(v1 + 236) = v3;
    *(void *)(v1 + 216) = 0;
    *(_DWORD *)(v1 + 228) = 0;
    *(_DWORD *)(v1 + 240) = 0;
  }
}

void VCAudioPlayer_GetSamples(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v372 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCAudioPlayer_GetSamples_cold_1();
      }
    }
    return;
  }
  uint64_t v6 = a3;
  uint64_t v9 = a1 + 52640;
  int v10 = (unsigned __int8 *)(a1 + 52376);
  uint64_t v11 = a1 + 35504;
  *(unsigned char *)(a1 + 52600) = (int)(*(double *)(a3 + 32) * 1000.0) == 20;
  if (!VCAudioPlayerDTMF_ShouldProcessDTMF(a1))
  {
    double v5 = 0.0;
    if (VRTraceIsInternalOSInstalled()) {
      double v5 = micro();
    }
    int v343 = *(_DWORD *)(v11 + 24);
    double v19 = micro();
    ++*(_DWORD *)(v11 + 36);
    int v20 = *(_DWORD *)(a1 + 304);
    *(_DWORD *)(v9 + 1028) = v20;
    int v21 = (*(_DWORD *)(a2 + 8) - v20) & ~((*(_DWORD *)(a2 + 8) - v20) >> 31);
    unsigned int v352 = 0;
    int v353 = v21;
    int v351 = v21;
    uint64_t v361 = 0;
    memset(v360, 0, sizeof(v360));
    unsigned int v22 = *((_DWORD *)v10 + 46) * v20;
    unint64_t v4 = a1 + 200;
    *(_DWORD *)(a1 + 300) = v22;
    _VCAudioPlayer_InitializePlaybackBuffer((unint64_t)v360, a1 + 200, v22);
    double updated = _VCAudioPlayer_UpdateJitterQueueSize(a1);
    int v27 = _VCAudioPlayer_CalcAdjustment(a1, (int **)v6, v21, &v351, updated, v24, v25, v26);
    __int16 v28 = (_DWORD *)(a1 + 808);
    unint64_t v345 = v11;
    unint64_t v346 = v9;
    if (*(_DWORD *)(a1 + 808))
    {
      int v29 = v27;
      float v30 = *(float *)(v11 + 48);
      int v31 = *(_DWORD *)(a1 + 168);
      LODWORD(v11) = *(_DWORD *)(a1 + 304);
      int v32 = VCTimescale_TailSize(a1 + 808);
      if (*((_DWORD *)v10 + 16))
      {
        if (*(_DWORD *)(*(void *)v6 + 4))
        {
          int v33 = 9;
          unint64_t v3 = v345;
          __int16 v34 = (void *)v346;
          goto LABEL_40;
        }
        int v50 = 0;
        *((_DWORD *)v10 + 17) = 1;
        int v33 = 8;
LABEL_39:
        unint64_t v3 = v345;
        __int16 v34 = (void *)v346;
        *((_DWORD *)v10 + 16) = v50;
LABEL_40:
        *(_DWORD *)(a1 + 712) = v33;
        _VCAudioPlayer_FillSilenceBuffer((_DWORD *)a1, *(void *)a2, *(_DWORD *)(a2 + 8), *(void *)(a2 + 24), *(int **)(a2 + 16));
        __int16 v57 = &audioPlayerMode[*(unsigned int *)(a1 + 712)];
        if (v57 >= queueGrowthMode || v57 < audioPlayerMode) {
          goto LABEL_469;
        }
        v34[2] = *v57;
        if (*(_DWORD *)(v3 + 28)) {
          uint64_t v58 = 0;
        }
        else {
          uint64_t v58 = *(void *)((char *)v34 + 196);
        }
        void *v34 = v58;
        *(double *)(v3 + 16) = v19;
        return;
      }
      int v37 = v32;
      LODWORD(v347) = v31;
      uint64_t v38 = v6;
      uint64_t v6 = *(unsigned int *)(v6 + 16);
      if (*((_DWORD *)v10 + 17))
      {
        *((_DWORD *)v10 + 17) = 0;
        _VCAudioPlayer_DiscardSamples(a1, v6, *(double **)(v38 + 24), v19);
        uint64_t v39 = v38;
        int v27 = _VCAudioPlayer_CalcAdjustment(a1, (int **)v38, 0, 0, v40, v41, v42, v43);
        *((_DWORD *)v10 + 18) = 1;
      }
      else
      {
        uint64_t v39 = v38;
        int v27 = v29;
        if (*(_DWORD *)(*(void *)v38 + 4))
        {
          int v33 = 9;
          int v50 = 1;
          goto LABEL_39;
        }
      }
      double v44 = v19 - *(double *)(v345 + 16);
      if (v44 <= 0.300000012)
      {
        uint64_t v11 = v345;
        uint64_t v6 = v39;
      }
      else
      {
        float v45 = (float)((int)(float)(v30 + (float)(v11 + v347 + v37)) - v6);
        uint64_t v11 = v345;
        uint64_t v6 = v39;
        if ((float)((float)*((unsigned int *)v10 + 44) * 0.3) < v45)
        {
          _VCAudioPlayer_DiscardSamples(a1, *(_DWORD *)(v39 + 16), *(double **)(v39 + 24), v19);
          int v27 = _VCAudioPlayer_CalcAdjustment(a1, (int **)v39, 0, 0, v46, v47, v48, v49);
          *((void *)v10 + 9) = 0x100000000;
          double v44 = v19 - *(double *)(v345 + 16);
        }
      }
      __int16 v28 = (_DWORD *)(a1 + 808);
      if (v44 > 0.03)
      {
        int v51 = v27;
        *((_DWORD *)v10 + 18) = 1;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v52 = v6;
          uint64_t v53 = VRTraceErrorLogLevelToCSTR();
          int v54 = *MEMORY[0x1E4F47A50];
          __int16 v55 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
            {
              double v56 = v19 - *(double *)(v11 + 16);
              int buf = 136316162;
              *(void *)buf_4 = v53;
              *(_WORD *)&buf_4[8] = 2080;
              *(void *)&buf_4[10] = "_VCAudioPlayer_ProcessDiscardState";
              *(_WORD *)&buf_4[18] = 1024;
              LODWORD(v357) = 3143;
              WORD2(v357) = 2048;
              *(double *)((char *)&v357 + 6) = v19;
              HIWORD(v357) = 2048;
              *(double *)v358 = v56;
              _os_log_impl(&dword_1E1EA4000, v54, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Timestamp jumped due to callbacks freeze. Time=%f, TimeDelta=%f", (uint8_t *)&buf, 0x30u);
            }
          }
          else if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            double v263 = v19 - *(double *)(v11 + 16);
            int buf = 136316162;
            *(void *)buf_4 = v53;
            *(_WORD *)&buf_4[8] = 2080;
            *(void *)&buf_4[10] = "_VCAudioPlayer_ProcessDiscardState";
            *(_WORD *)&buf_4[18] = 1024;
            LODWORD(v357) = 3143;
            WORD2(v357) = 2048;
            *(double *)((char *)&v357 + 6) = v19;
            HIWORD(v357) = 2048;
            *(double *)v358 = v263;
            _os_log_debug_impl(&dword_1E1EA4000, v54, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Timestamp jumped due to callbacks freeze. Time=%f, TimeDelta=%f", (uint8_t *)&buf, 0x30u);
          }
          uint64_t v6 = v52;
        }
        int v27 = v51;
      }
    }
    int v59 = *(_DWORD *)(a2 + 8);
    if (v59 >= *(_DWORD *)(a1 + 192)) {
      int v59 = *(_DWORD *)(a1 + 192);
    }
    *(_DWORD *)(a2 + 8) = v59;
    uint64_t v344 = v6;
    int v337 = v27;
    if (*(_DWORD *)(a1 + 304)) {
      char v60 = *(unsigned char *)(a1 + 29);
    }
    else {
      char v60 = 1;
    }
    uint64_t v6 = a1 + 304;
    *(unsigned char *)(a1 + 30) = v60;
    BOOL v61 = _VCAudioPlayer_DecodeSamples(a1, &v351, &v353, a2, v344, v19);
    v348 = v28;
    if (v10[192])
    {
      if (*(float *)(a1 + 792) < 0.0058)
      {
        BOOL v62 = *(float *)(a1 + 796) < 0.0058;
        goto LABEL_60;
      }
    }
    else if (*(float *)(a1 + 784) < 72.0)
    {
      BOOL v62 = *(float *)(a1 + 788) < 72.0;
LABEL_60:
      char v63 = v62;
LABEL_64:
      unint64_t v3 = 1;
      uint64_t v347 = a2;
      if ((v63 & 1) == 0 && v61) {
        unint64_t v3 = *(_DWORD *)(v11 + 28) != 0;
      }
      uint64_t v64 = a1 + 64;
      int v65 = v353;
      Sizeduint64_t BufferAtIndex = (unint64_t)_VCAudioPlayer_CopyPlaybackBuffer((void **)v360, a1 + 64, 0, *((_DWORD *)v10 + 46) * v353);
      long long v359 = xmmword_1E25A30D0;
      memset(&v358[3], 170, 96);
      HIDWORD(v66) = -1431655766;
      memset(v358, 170, 24);
      int v341 = v65;
      int buf = v65;
      *(_DWORD *)buf_4 = v337;
      *(void *)&buf_4[4] = &v352;
      *(_DWORD *)&buf_4[12] = v3;
      *(_DWORD *)&buf_4[16] = v351;
      double v67 = (int *)(a1 + 712);
      *(void *)&long long v357 = a1 + 304;
      *((void *)&v357 + 1) = a1 + 712;
      LODWORD(v358[0]) = *((_DWORD *)v10 + 46);
      *(void *)((char *)v358 + 4) = *((void *)v10 + 9);
      *(void *)&long long v359 = 0;
      BYTE8(v359) = 0;
      HIDWORD(v359) = 0;
      memset(&v358[2], 0, 97);
      unint64_t v68 = v346;
      *(void *)(v346 + 1044) = 0;
      *(_DWORD *)uint64_t v11 = 0;
      int v69 = *(_DWORD *)(a1 + 296);
      if (v69 >= 1)
      {
        for (unsigned __int8 i = 0; i < v69; v358[i++ + 10] = v83)
        {
          uint64_t v71 = (uint64_t *)v360 + 3 * i;
          uint64_t v72 = *v71;
          uint64_t v73 = v71[1];
          if (v72) {
            BOOL v74 = v73 == 0;
          }
          else {
            BOOL v74 = 0;
          }
          double v75 = &v358[i + 2];
          if (v74 || v75 >= &v358[6] || v75 < &v358[2]) {
            goto LABEL_469;
          }
          *double v75 = v72;
          int v78 = (uint64_t *)(v64 + 24 * i);
          uint64_t v79 = *v78;
          uint64_t v80 = v78[1];
          if (v79 && v80 == 0) {
            goto LABEL_469;
          }
          v358[i + 6] = v79;
          uint64_t v82 = (uint64_t *)(v4 + 24 * i);
          uint64_t v83 = *v82;
          uint64_t v84 = v82[1];
          if (v83 && v84 == 0) {
            goto LABEL_469;
          }
        }
      }
      int v342 = v3;
      v340 = (int *)(a1 + 712);
      if (!*v348) {
        goto LABEL_130;
      }
      LODWORD(v66) = *((_DWORD *)v10 + 44);
      *(double *)&long long v359 = (double)v337 / (double)v66;
      BYTE8(v359) = *(_DWORD *)(v11 + 28) != 0;
      if (v10[152])
      {
        int v86 = *(unsigned __int8 *)(v11 + 97);
        if (!*(unsigned char *)(v11 + 97) && *((_DWORD *)v10 + 42) == 5) {
          goto LABEL_126;
        }
      }
      else
      {
        int v86 = *(unsigned __int8 *)(v11 + 97);
      }
      if (v86)
      {
        if (v10[21] && !v10[24] || v10[11])
        {
          int v87 = 1;
        }
        else
        {
          int v87 = *v10;
          if (*v10) {
            int v87 = v10[17] == 0;
          }
        }
        if (v10[39] || v10[22])
        {
          if ((v87 & 1) == 0) {
            goto LABEL_123;
          }
          int v88 = 1;
        }
        else
        {
          if (v87) {
            int v89 = 3;
          }
          else {
            int v89 = 2;
          }
          if (v10[25]) {
            char v90 = v87;
          }
          else {
            char v90 = 1;
          }
          if (v10[25]) {
            int v88 = 1;
          }
          else {
            int v88 = v89;
          }
          if ((v90 & 1) == 0)
          {
LABEL_123:
            int active = VCTimescale_ActiveSpeechAdapt((uint64_t)v348);
            if (active < 0) {
              VRLogfilePrintSync(*(FILE ***)(v346 + 984), "Warning: Active Speech Timescaling did not complete! Result=%d", v92, v93, v94, v95, v96, v97, active);
            }
            if (LOBYTE(v358[14])) {
              goto LABEL_143;
            }
LABEL_126:
            char Available = VCTimescale_TailExtractAvailable((uint64_t)v348);
            double v67 = (int *)(a1 + 712);
            if (!*(_DWORD *)(a1 + 808) || (Available & 1) != 0 || *((_DWORD *)v10 + 18) || *((_DWORD *)v10 + 19)) {
              goto LABEL_130;
            }
            if (*(_DWORD *)&buf_4[12] && *(_DWORD *)a1 && *(int *)buf_4 >= 1)
            {
              double v241 = 0.0;
              if (VRTraceIsInternalOSInstalled()) {
                double v241 = micro();
              }
              int v249 = *(_DWORD *)&buf_4[16];
              v250 = *(int **)&buf_4[4];
              if (*(_DWORD *)&buf_4[16])
              {
                v338 = *(int **)&buf_4[4];
                int v251 = *(_DWORD *)buf_4;
                int v252 = *(_DWORD *)&buf_4[16] - *(_DWORD *)buf_4;
                if (*(_DWORD *)&buf_4[16] - *(_DWORD *)buf_4 <= *((_DWORD *)v10 + 45)) {
                  int v253 = *((_DWORD *)v10 + 45);
                }
                else {
                  int v253 = *(_DWORD *)&buf_4[16] - *(_DWORD *)buf_4;
                }
                _VCAudioPlayer_CopyPlaybackBuffer((void **)v360, a1 + 64, 0, v253 * *((_DWORD *)v10 + 46));
                *(_DWORD *)(a1 + 712) = 3;
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  os_log_t v332 = (os_log_t)VRTraceErrorLogLevelToCSTR();
                  v254 = *MEMORY[0x1E4F47A50];
                  log = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
                    {
                      double v255 = micro();
                      *(_DWORD *)v362 = 136316930;
                      *(void *)&v362[4] = v332;
                      *(_WORD *)&v362[12] = 2080;
                      *(void *)&v362[14] = "_VCAudioPlayer_DecodeSkipSilence";
                      *(_WORD *)&v362[22] = 1024;
                      int v363 = 2336;
                      __int16 v364 = 2048;
                      *(double *)v365 = v255;
                      *(_WORD *)&v365[8] = 1024;
                      *(_DWORD *)v366 = v252;
                      *(_WORD *)&v366[4] = 1024;
                      *(_DWORD *)&v366[6] = v249;
                      *(_WORD *)v367 = 1024;
                      *(_DWORD *)&v367[2] = v253;
                      *(_WORD *)v368 = 1024;
                      *(_DWORD *)&v368[2] = v251;
                      _os_log_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: %-4i  skip %i -> %i adjust %d", v362, 0x3Eu);
                    }
                  }
                  else if (os_log_type_enabled(v254, OS_LOG_TYPE_DEBUG))
                  {
                    double v326 = micro();
                    *(_DWORD *)v362 = 136316930;
                    *(void *)&v362[4] = v332;
                    *(_WORD *)&v362[12] = 2080;
                    *(void *)&v362[14] = "_VCAudioPlayer_DecodeSkipSilence";
                    *(_WORD *)&v362[22] = 1024;
                    int v363 = 2336;
                    __int16 v364 = 2048;
                    *(double *)v365 = v326;
                    *(_WORD *)&v365[8] = 1024;
                    *(_DWORD *)v366 = v252;
                    *(_WORD *)&v366[4] = 1024;
                    *(_DWORD *)&v366[6] = v249;
                    *(_WORD *)v367 = 1024;
                    *(_DWORD *)&v367[2] = v253;
                    *(_WORD *)v368 = 1024;
                    *(_DWORD *)&v368[2] = v251;
                    _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: %-4i  skip %i -> %i adjust %d", v362, 0x3Eu);
                  }
                }
                uint64_t v11 = v345;
                *(_DWORD *)(v346 + 1048) = v253;
                *(_DWORD *)(v346 + 1044) = v251;
                v250 = v338;
              }
              else
              {
                int v253 = 0;
              }
              int *v250 = v253;
              LogProfileTimeOverLimit_3("SpkrProc: Skip Silence", v241, 0.00499999989, v242, v243, v244, v245, v246, v247, v248, v328);
              unint64_t v68 = v346;
              goto LABEL_143;
            }
            if ((*(_DWORD *)buf_4 & 0x80000000) != 0 && *((_DWORD *)v10 + 20))
            {
              double v258 = 0.0;
              if (VRTraceIsInternalOSInstalled()) {
                double v258 = micro();
              }
              int v259 = *(_DWORD *)buf_4;
              int v339 = *(_DWORD *)&buf_4[16];
              int v260 = *(_DWORD *)&buf_4[12];
              v261 = *(_DWORD **)&buf_4[4];
              int *v340 = 4;
              v329 = v261;
              if (*(_DWORD *)(v11 + 28))
              {
                int v259 = 0;
                int *v340 = 6;
              }
              else
              {
                if (*(_DWORD *)a1) {
                  BOOL v264 = v260 == 0;
                }
                else {
                  BOOL v264 = 1;
                }
                if (v264) {
                  int v259 = 0;
                }
              }
              if (-v259 < v339) {
                int v265 = -v259;
              }
              else {
                int v265 = v339;
              }
              int v266 = *(_DWORD *)(a1 + 304) + v339;
              int v267 = v266 + v265;
              int v268 = *(_DWORD *)(a1 + 192);
              int v269 = v268 - v266;
              if (v267 <= v268) {
                int v270 = v265;
              }
              else {
                int v270 = v269;
              }
              Sizeduint64_t BufferAtIndex = (unint64_t)_VCAudioPlayer_CopyPlaybackBuffer((void **)v360, a1 + 64, 0, *((_DWORD *)v10 + 46) * v339);
              int v278 = v270;
              v279 = v329;
              if (v278)
              {
                if (v278 >= 0) {
                  int v280 = v278;
                }
                else {
                  int v280 = v278 + 1;
                }
                os_log_t v333 = (os_log_t)(v280 >> 1);
                int v330 = v278 - (v280 >> 1);
                int loga = v278;
                if (v10[192])
                {
                  if ((int)v361 >= 1)
                  {
                    unsigned __int8 v281 = 0;
                    LODWORD(v11) = v333 + v339;
                    unint64_t v3 = (v339 - 1);
                    do
                    {
                      v282 = (unint64_t *)v360 + 3 * v281;
                      unint64_t v283 = *v282;
                      unint64_t v284 = *v282 + v282[1];
                      unsigned int v285 = v339 - 1;
                      unsigned int v286 = v339;
                      os_log_t v287 = v333;
                      if (loga >= 2)
                      {
                        do
                        {
                          v288 = (_DWORD *)(v283 + 4 * v285);
                          BOOL v289 = (unint64_t)v288 < v284 && (unint64_t)v288 >= v283;
                          v290 = (_DWORD *)(v283 + 4 * v286);
                          if (!v289 || (unint64_t)v290 >= v284 || (unint64_t)v290 < v283) {
                            goto LABEL_469;
                          }
                          _DWORD *v290 = *v288;
                          ++v286;
                          --v285;
                          os_log_t v287 = (os_log_t)((char *)v287 - 1);
                        }
                        while (v287);
                      }
                      int v293 = *((_DWORD *)v10 + 46);
                      v294 = (const void *)(v283 + (v293 * (v339 - v330)));
                      if ((unint64_t)v294 > v284 || v283 > (unint64_t)v294) {
                        goto LABEL_469;
                      }
                      Sizeduint64_t BufferAtIndex = v283 + (v293 * v11);
                      size_t v296 = (v293 * v330);
                      BOOL v297 = v283 > SizedBufferAtIndex || SizedBufferAtIndex > v284;
                      BOOL v298 = !v297 && v284 - (unint64_t)v294 >= v296;
                      if (!v298 || v284 - SizedBufferAtIndex < v296) {
                        goto LABEL_469;
                      }
                      Sizeduint64_t BufferAtIndex = (unint64_t)memcpy((void *)SizedBufferAtIndex, v294, v296);
                      ++v281;
                    }
                    while ((int)v361 > v281);
                  }
                }
                else if ((int)v361 >= 1)
                {
                  unsigned __int8 v300 = 0;
                  LODWORD(v11) = v333 + v339;
                  unint64_t v3 = (v339 - 1);
                  do
                  {
                    v301 = (unint64_t *)v360 + 3 * v300;
                    unint64_t v302 = *v301;
                    unint64_t v303 = *v301 + v301[1];
                    unsigned int v304 = v339 - 1;
                    unsigned int v305 = v339;
                    os_log_t v306 = v333;
                    if (loga >= 2)
                    {
                      do
                      {
                        v307 = (_WORD *)(v302 + 2 * v304);
                        BOOL v308 = (unint64_t)v307 < v303 && (unint64_t)v307 >= v302;
                        v309 = (_WORD *)(v302 + 2 * v305);
                        if (!v308 || (unint64_t)v309 >= v303 || (unint64_t)v309 < v302) {
                          goto LABEL_469;
                        }
                        _WORD *v309 = *v307;
                        ++v305;
                        --v304;
                        os_log_t v306 = (os_log_t)((char *)v306 - 1);
                      }
                      while (v306);
                    }
                    int v312 = *((_DWORD *)v10 + 46);
                    v313 = (const void *)(v302 + (v312 * (v339 - v330)));
                    if ((unint64_t)v313 > v303 || v302 > (unint64_t)v313) {
                      goto LABEL_469;
                    }
                    Sizeduint64_t BufferAtIndex = v302 + (v312 * v11);
                    size_t v315 = (v312 * v330);
                    BOOL v316 = v302 > SizedBufferAtIndex || SizedBufferAtIndex > v303;
                    BOOL v317 = !v316 && v303 - (unint64_t)v313 >= v315;
                    if (!v317 || v303 - SizedBufferAtIndex < v315) {
                      goto LABEL_469;
                    }
                    Sizeduint64_t BufferAtIndex = (unint64_t)memcpy((void *)SizedBufferAtIndex, v313, v315);
                    ++v300;
                  }
                  while ((int)v361 > v300);
                }
                uint64_t v11 = v345;
                unint64_t v68 = v346;
                v279 = v329;
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  uint64_t v331 = VRTraceErrorLogLevelToCSTR();
                  v319 = *MEMORY[0x1E4F47A50];
                  v334 = *MEMORY[0x1E4F47A50];
                  if (*MEMORY[0x1E4F47A40])
                  {
                    if (os_log_type_enabled(v319, OS_LOG_TYPE_DEFAULT))
                    {
                      double v320 = micro();
                      *(_DWORD *)v362 = 136316674;
                      *(void *)&v362[4] = v331;
                      *(_WORD *)&v362[12] = 2080;
                      *(void *)&v362[14] = "_VCAudioPlayer_DecodeDup";
                      *(_WORD *)&v362[22] = 1024;
                      int v363 = 2371;
                      __int16 v364 = 2048;
                      *(double *)v365 = v320;
                      *(_WORD *)&v365[8] = 1024;
                      *(_DWORD *)v366 = loga;
                      *(_WORD *)&v366[4] = 1024;
                      *(_DWORD *)&v366[6] = v339;
                      *(_WORD *)v367 = 1024;
                      *(_DWORD *)&v367[2] = loga + v339;
                      _os_log_impl(&dword_1E1EA4000, v334, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: %-4i  dup  %i -> %i", v362, 0x38u);
                    }
                  }
                  else if (os_log_type_enabled(v319, OS_LOG_TYPE_DEBUG))
                  {
                    double v327 = micro();
                    *(_DWORD *)v362 = 136316674;
                    *(void *)&v362[4] = v331;
                    *(_WORD *)&v362[12] = 2080;
                    *(void *)&v362[14] = "_VCAudioPlayer_DecodeDup";
                    *(_WORD *)&v362[22] = 1024;
                    int v363 = 2371;
                    __int16 v364 = 2048;
                    *(double *)v365 = v327;
                    *(_WORD *)&v365[8] = 1024;
                    *(_DWORD *)v366 = loga;
                    *(_WORD *)&v366[4] = 1024;
                    *(_DWORD *)&v366[6] = v339;
                    *(_WORD *)v367 = 1024;
                    *(_DWORD *)&v367[2] = loga + v339;
                    _os_log_debug_impl(&dword_1E1EA4000, v334, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: %-4i  dup  %i -> %i", v362, 0x38u);
                  }
                }
                int *v340 = 5;
                int v278 = loga;
              }
              _DWORD *v279 = v278 + v339;
              LogProfileTimeOverLimit_3("SpkrProc: Dup", v258, 0.00499999989, v271, v272, v273, v274, v275, v276, v277, v328);
LABEL_143:
              VCTimescale_UpdateTimescaleHistoryBuffer((uint64_t)v348);
              int v110 = *v340;
              if (*v340 > 5 || ((1 << v110) & 0x3A) == 0) {
                goto LABEL_157;
              }
              ++*(_DWORD *)(v68 + 208);
              if (v110 == 5 || v110 == 3) {
                int v111 = *(_DWORD *)(v68 + 212) + 1;
              }
              else {
                int v111 = *(_DWORD *)(v68 + 212);
              }
              *(_DWORD *)(v68 + 212) = v111;
              if (v110 == 4 || v110 == 1) {
                int v112 = *(_DWORD *)(v68 + 216) + 1;
              }
              else {
                int v112 = *(_DWORD *)(v68 + 216);
              }
              *(_DWORD *)(v68 + 216) = v112;
              if ((v110 | 2) == 3)
              {
                ++*(_DWORD *)(v68 + 224);
              }
              else if ((v110 & 0xFFFFFFFE) == 4)
              {
                int v113 = *(_DWORD *)(v68 + 220) + 1;
                goto LABEL_156;
              }
              int v113 = *(_DWORD *)(v68 + 220);
LABEL_156:
              *(_DWORD *)(v68 + 220) = v113;
LABEL_157:
              *(_DWORD *)uint64_t v11 = *(_DWORD *)&buf_4[16] - **(_DWORD **)&buf_4[4];
              int v114 = v352;
              int v115 = v352 - v351;
              if (v352 != v351)
              {
                unsigned int v116 = *(double **)(v344 + 24);
                double v117 = *v116;
                if (*v116 >= (double)(int)(v351 - v352))
                {
                  double v118 = v117 + (double)v115;
                }
                else
                {
                  VRLogfilePrintSync(*(FILE ***)(v68 + 984), "Average JB queue size protected from going negative. Current size: %f new size: %f samplesDelta: %d needed samples: %d audioPlayer mode: %d silent: %d\n", v104, v105, v106, v107, v108, v109, SLOBYTE(v117));
                  double v118 = 0.0;
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    uint64_t v119 = VRTraceErrorLogLevelToCSTR();
                    unsigned int v120 = *MEMORY[0x1E4F47A50];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                    {
                      double v121 = *v116;
                      double v122 = *v116 + (double)v115;
                      int v123 = *v340;
                      *(_DWORD *)v362 = 136317186;
                      *(void *)&v362[4] = v119;
                      *(_WORD *)&v362[12] = 2080;
                      *(void *)&v362[14] = "_VCAudioPlayer_UpdateAvgQueueSize";
                      *(_WORD *)&v362[22] = 1024;
                      int v363 = 3156;
                      __int16 v364 = 2048;
                      *(double *)v365 = v121;
                      *(_WORD *)&v365[8] = 2048;
                      *(double *)v366 = v122;
                      *(_WORD *)&v366[8] = 1024;
                      *(_DWORD *)v367 = v115;
                      *(_WORD *)&v367[4] = 1024;
                      *(_DWORD *)v368 = v341;
                      *(_WORD *)&v368[4] = 1024;
                      int v369 = v123;
                      __int16 v370 = 1024;
                      int v371 = v342;
                      _os_log_error_impl(&dword_1E1EA4000, v120, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Average JB queue size protected from going negative. Current size: %f, new size: %f, samplesDelta: %d, needed samples: %d, audioPlayer mode: %d, silent: %d", v362, 0x48u);
                    }
                  }
                }
                *unsigned int v116 = v118;
                int v114 = v352;
              }
              if (v114 >= 20 && *((_DWORD *)v10 + 18))
              {
                _VCAudioPlayer_Sample_RampUp(a1, (uint64_t)v360, 20);
                *((_DWORD *)v10 + 18) = 0;
              }
              if (v114 >= 20 && *((_DWORD *)v10 + 19))
              {
                _VCAudioPlayer_SimulateCrossFade((float *)a1, 1, (uint64_t)v360, 20);
                *((_DWORD *)v10 + 19) = 0;
              }
              int v124 = v351;
              unint64_t v3 = v352;
              int v125 = *(_DWORD *)(v347 + 8);
              char v126 = VCTimescale_TailExtractAvailable((uint64_t)v348);
              LODWORD(v11) = 0;
              if (v124 && (v126 & 1) == 0)
              {
                int v133 = *(_DWORD *)(a1 + 172) + v124;
                int v134 = *(_DWORD *)(a1 + 168) - v124;
                *(_DWORD *)(a1 + 168) = v134;
                *(_DWORD *)(a1 + 172) = v133;
                int v135 = *(_DWORD *)(a1 + 184);
                if (v135 < 1)
                {
                  LODWORD(v11) = 0;
                }
                else
                {
                  *(_DWORD *)(a1 + 184) = v135 - v124;
                  LODWORD(v11) = 1;
                }
                if (v134 < 1)
                {
                  if (v134 < 0)
                  {
                    VRLogfilePrintSync(*(FILE ***)(v346 + 984), "Critical: Number of samples in the input buffer would have become negative! samples=%d samplesIn=%d\n", v127, v128, v129, v130, v131, v132, v134);
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      uint64_t v144 = VRTraceErrorLogLevelToCSTR();
                      int v145 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                      {
                        int v262 = *(_DWORD *)(a1 + 168);
                        *(_DWORD *)v362 = 136316162;
                        *(void *)&v362[4] = v144;
                        *(_WORD *)&v362[12] = 2080;
                        *(void *)&v362[14] = "_VCAudioPlayer_UpdateInputBuffer";
                        *(_WORD *)&v362[22] = 1024;
                        int v363 = 3208;
                        __int16 v364 = 1024;
                        *(_DWORD *)v365 = v262;
                        *(_WORD *)&v365[4] = 1024;
                        *(_DWORD *)&v365[6] = v124;
                        _os_log_error_impl(&dword_1E1EA4000, v145, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Number of samples in the input buffer would have become negative! samples=%d samplesIn=%d", v362, 0x28u);
                      }
                    }
                    *(_DWORD *)(a1 + 168) = 0;
                  }
                }
                else if (*((_DWORD *)v10 + 47))
                {
                  int v349 = v11;
                  LODWORD(v11) = 0;
                  do
                  {
                    uint64_t v136 = v64 + 24 * v11;
                    Sizeduint64_t BufferAtIndex = *(void *)v136;
                    size_t v137 = *(void *)(v136 + 8);
                    int v138 = *((_DWORD *)v10 + 46);
                    double v139 = (SizedBufferAtIndex + (v138 * v124));
                    size_t v140 = (*(_DWORD *)(a1 + 168) * v138);
                    if (SizedBufferAtIndex + v137 < (unint64_t)v139
                      || SizedBufferAtIndex > (unint64_t)v139
                      || v137 - (v138 * v124) < v140
                      || v137 < v140)
                    {
                      goto LABEL_469;
                    }
                    memmove((void *)SizedBufferAtIndex, v139, v140);
                    LODWORD(v11) = v11 + 1;
                  }
                  while (*((_DWORD *)v10 + 47) > v11);
                  LODWORD(v11) = v349;
                }
              }
              int v146 = *(_DWORD *)v6;
              if (v3)
              {
                v146 += v3;
                *(_DWORD *)uint64_t v6 = v146;
              }
              double v147 = (uint64_t *)v347;
              *(_DWORD *)(a1 + 308) = *(_DWORD *)(a1 + 172) - v146;
              *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 176);
              if (!(v11 | v3) && v146 < v125)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  uint64_t v148 = VRTraceErrorLogLevelToCSTR();
                  v149 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                  {
                    int v256 = *(_DWORD *)v6;
                    *(_DWORD *)v362 = 136316162;
                    *(void *)&v362[4] = v148;
                    *(_WORD *)&v362[12] = 2080;
                    *(void *)&v362[14] = "_VCAudioPlayer_UpdateOutputBuffer";
                    *(_WORD *)&v362[22] = 1024;
                    int v363 = 3225;
                    __int16 v364 = 1024;
                    *(_DWORD *)v365 = v256;
                    *(_WORD *)&v365[4] = 1024;
                    *(_DWORD *)&v365[6] = v125;
                    _os_log_error_impl(&dword_1E1EA4000, v149, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Number of samples in the output buffer would have become negative! samples=%d sampleCount=%d\n", v362, 0x28u);
                  }
                }
                double v147 = (uint64_t *)v347;
                if (*((_DWORD *)v10 + 47))
                {
                  unint64_t v3 = 0;
                  do
                  {
                    int v150 = *((_DWORD *)v10 + 46);
                    double v151 = (unint64_t *)(v4 + 24 * v3);
                    unint64_t v152 = *v151;
                    unint64_t v153 = *v151 + v151[1];
                    Sizeduint64_t BufferAtIndex = v152 + (v150 * *(_DWORD *)v6);
                    size_t v154 = ((v125 - *(_DWORD *)v6) * v150);
                    if (v153 < SizedBufferAtIndex || v152 > SizedBufferAtIndex || v153 - SizedBufferAtIndex < v154) {
                      goto LABEL_469;
                    }
                    bzero((void *)SizedBufferAtIndex, v154);
                    unint64_t v3 = (v3 + 1);
                  }
                  while (*((_DWORD *)v10 + 47) > v3);
                }
                *(_DWORD *)(a1 + 304) = v125;
                *(_DWORD *)(a1 + 308) = *(_DWORD *)(a1 + 172) - v125;
              }
              _VCAudioPlayer_UpdateLogDumpStats(a1, v341, v351, v352);
              _VCAudioPlayer_LogStats((FILE **)a1);
              if (v342) {
                int v157 = *(_DWORD *)a1 + 1;
              }
              else {
                int v157 = 0;
              }
              unint64_t v3 = a1 + 296;
              *(_DWORD *)a1 = v157;
              int SampleCount = VCAudioBufferList_GetSampleCount(*v147);
              if (SampleCount < 2)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  uint64_t v321 = VRTraceErrorLogLevelToCSTR();
                  v322 = *MEMORY[0x1E4F47A50];
                  Sizeduint64_t BufferAtIndex = *MEMORY[0x1E4F47A50];
                  if (!*MEMORY[0x1E4F47A40]) {
                    goto LABEL_470;
                  }
                  if (os_log_type_enabled((os_log_t)SizedBufferAtIndex, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v362 = 136315906;
                    *(void *)&v362[4] = v321;
                    *(_WORD *)&v362[12] = 2080;
                    *(void *)&v362[14] = "_VCAudioPlayer_FillPlayedSamplesForCrossFade";
                    *(_WORD *)&v362[22] = 1024;
                    int v363 = 1082;
                    __int16 v364 = 1024;
                    *(_DWORD *)v365 = SampleCount;
                    _os_log_impl(&dword_1E1EA4000, v322, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Not able to store the last two played samples for crossfade. sampleCount=%d", v362, 0x22u);
                  }
                }
                goto LABEL_264;
              }
              unsigned int v159 = *((_DWORD *)v10 + 47);
              if (!v159) {
                goto LABEL_264;
              }
              unsigned __int8 v160 = 0;
              uint64_t v161 = 4 * (SampleCount - 2);
              unint64_t v162 = a1 + 448;
              unint64_t v163 = a1 + 512;
              uint64_t v164 = 2 * (SampleCount - 2);
              while (1)
              {
                double v165 = (v4 + 24 * v160);
                Sizeduint64_t BufferAtIndex = (unint64_t)&v165[3];
                if (v4 > (unint64_t)v165 || SizedBufferAtIndex > v3) {
                  break;
                }
                unint64_t isa = (unint64_t)v165->isa;
                if (v165->isa)
                {
                  double v168 = (v4 + 24 * v160);
                  Class v169 = v168[1].isa;
                  Sizeduint64_t BufferAtIndex = (unint64_t)&v168[1];
                  unint64_t v170 = (unint64_t)v169 + isa;
                  if (v10[192])
                  {
                    float v171 = (_DWORD *)(isa + v161);
                    BOOL v172 = isa + v161 < v170 && (unint64_t)v171 >= isa;
                    unint64_t v173 = v162 + 16 * v160;
                    if (!v172 || v173 >= v163 || v173 < v162) {
                      goto LABEL_469;
                    }
                    *(_DWORD *)(v173 + 12) = *v171;
                    unint64_t v176 = (unint64_t)v165->isa;
                    Sizeduint64_t BufferAtIndex = (unint64_t)v165->isa + *(void *)SizedBufferAtIndex;
                    unint64_t v177 = ((char *)v165->isa + 4 * (SampleCount - 1));
                    if ((unint64_t)v177 >= SizedBufferAtIndex || (unint64_t)v177 < v176) {
                      goto LABEL_469;
                    }
                    *(_DWORD *)(v162 + 16 * v160 + 8) = v177->isa;
                  }
                  else
                  {
                    unsigned int v179 = (_WORD *)(isa + v164);
                    BOOL v180 = isa + v164 < v170 && (unint64_t)v179 >= isa;
                    unint64_t v181 = v162 + 16 * v160;
                    if (!v180 || v181 >= v163 || v181 < v162) {
                      goto LABEL_469;
                    }
                    *(_WORD *)(v181 + 12) = *v179;
                    unint64_t v184 = (unint64_t)v165->isa;
                    Sizeduint64_t BufferAtIndex = (unint64_t)v165->isa + *(void *)SizedBufferAtIndex;
                    uint64_t v185 = ((char *)v165->isa + 2 * (SampleCount - 1));
                    if ((unint64_t)v185 >= SizedBufferAtIndex || (unint64_t)v185 < v184) {
                      goto LABEL_469;
                    }
                    *(_WORD *)(v162 + 16 * v160 + 8) = v185->isa;
                  }
                }
                if (v159 <= ++v160) {
                  goto LABEL_264;
                }
              }
              while (1)
              {
LABEL_469:
                __break(0x5519u);
LABEL_470:
                if (os_log_type_enabled((os_log_t)SizedBufferAtIndex, OS_LOG_TYPE_DEBUG)) {
                  VCAudioPlayer_GetSamples_cold_3();
                }
LABEL_264:
                int v350 = v11;
                uint64_t v187 = *(void *)v347;
                int v188 = *(_DWORD *)(v347 + 8);
                ChannelCFIndex Count = VCAudioBufferList_GetChannelCount(*(void *)v347);
                int v197 = *(_DWORD *)v6;
                if (*(_DWORD *)v6 >= v188) {
                  goto LABEL_280;
                }
                VRLogfilePrintSync(*(FILE ***)(v346 + 984), "Critical: Number of samples in the output buffer would have become negative! samples=%d sampleCount=%d\n", v190, v191, v192, v193, v194, v195, *(_DWORD *)v6);
                if ((int)VRTraceGetErrorLogLevelForModule() > 2)
                {
                  uint64_t v198 = VRTraceErrorLogLevelToCSTR();
                  int v199 = *MEMORY[0x1E4F47A50];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                  {
                    int v257 = *(_DWORD *)v6;
                    *(_DWORD *)v362 = 136316162;
                    *(void *)&v362[4] = v198;
                    *(_WORD *)&v362[12] = 2080;
                    *(void *)&v362[14] = "_VCAudioPlayer_FinalizeOutputBuffer";
                    *(_WORD *)&v362[22] = 1024;
                    int v363 = 3240;
                    __int16 v364 = 1024;
                    *(_DWORD *)v365 = v257;
                    *(_WORD *)&v365[4] = 1024;
                    *(_DWORD *)&v365[6] = v188;
                    _os_log_error_impl(&dword_1E1EA4000, v199, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Number of samples in the output buffer would have become negative! samples=%d sampleCount=%d\n", v362, 0x28u);
                  }
                }
                if (*((_DWORD *)v10 + 47))
                {
                  LODWORD(v11) = 0;
                  while (1)
                  {
                    int v200 = *((_DWORD *)v10 + 46);
                    float v201 = (unint64_t *)(v4 + 24 * v11);
                    unint64_t v202 = *v201;
                    unint64_t v203 = *v201 + v201[1];
                    Sizeduint64_t BufferAtIndex = v202 + (v200 * *(_DWORD *)v6);
                    size_t v204 = ((v188 - *(_DWORD *)v6) * v200);
                    BOOL v205 = v203 < SizedBufferAtIndex || v202 > SizedBufferAtIndex;
                    if (v205 || v203 - SizedBufferAtIndex < v204) {
                      break;
                    }
                    bzero((void *)SizedBufferAtIndex, v204);
                    LODWORD(v11) = v11 + 1;
                    if (*((_DWORD *)v10 + 47) <= v11) {
                      goto LABEL_279;
                    }
                  }
                }
                else
                {
LABEL_279:
                  *(_DWORD *)(a1 + 304) = v188;
                  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a1 + 172) - v188;
                  int v197 = v188;
LABEL_280:
                  uint64_t v11 = ChannelCount;
                  if (ChannelCount == *(_DWORD *)v3)
                  {
                    if (ChannelCount)
                    {
                      uint64_t v207 = 0;
                      unint64_t v3 = a1 + 208;
                      do
                      {
                        int v354 = 0;
                        memset(v362, 0, sizeof(v362));
                        Sizeduint64_t BufferAtIndex = VCAudioBufferList_GetSizedBufferAtIndex(v187, v207, &v354, v362);
                        if (SizedBufferAtIndex)
                        {
                          size_t v208 = (*((_DWORD *)v10 + 46) * v188);
                          if (*(void *)v3 < v208 || *(void *)&v362[8] < v208) {
                            goto LABEL_469;
                          }
                          memcpy(*(void **)v362, *(const void **)(v3 - 8), v208);
                        }
                        ++v207;
                        v3 += 24;
                      }
                      while (v11 != v207);
                      int v197 = *(_DWORD *)v6;
                    }
                    int v210 = v197 - v188;
                    *(_DWORD *)(a1 + 304) = v210;
                    if (*(unsigned char *)(v345 + 98))
                    {
                      if (*(_DWORD *)(v345 + 28)) {
                        char v211 = JitterQueue_QueueEmptyOrAllDTX(*(void *)(v345 + 64));
                      }
                      else {
                        char v211 = 0;
                      }
                      VCAudioBufferList_SetSilenceInQueue(v187, v211);
                      int v210 = *(_DWORD *)v6;
                    }
                    if (v210 < 1)
                    {
                      if (v210 < 0) {
                        VRLogfilePrintSync(*(FILE ***)(v346 + 984), "Critical: Number of samples in the output buffer became negative! samples=%d sampleCount=%d\n", v190, v191, v192, v193, v194, v195, v210);
                      }
                      goto LABEL_315;
                    }
                    if (!*((_DWORD *)v10 + 47)) {
                      goto LABEL_315;
                    }
                    unint64_t v3 = 0;
                    while (1)
                    {
                      unint64_t v212 = v4 + 24 * v3;
                      Sizeduint64_t BufferAtIndex = *(void *)v212;
                      size_t v213 = *(void *)(v212 + 8);
                      int v214 = *((_DWORD *)v10 + 46);
                      int v215 = (SizedBufferAtIndex + (v214 * v188));
                      size_t v216 = (*(_DWORD *)v6 * v214);
                      BOOL v217 = SizedBufferAtIndex + v213 < (unint64_t)v215
                          || SizedBufferAtIndex > (unint64_t)v215;
                      BOOL v218 = !v217 && v213 - (v214 * v188) >= v216;
                      if (!v218 || v213 < v216) {
                        break;
                      }
                      memmove((void *)SizedBufferAtIndex, v215, v216);
                      unint64_t v3 = (v3 + 1);
                      if (*((_DWORD *)v10 + 47) <= v3) {
                        goto LABEL_315;
                      }
                    }
                  }
                  else
                  {
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      uint64_t v323 = VRTraceErrorLogLevelToCSTR();
                      v324 = *MEMORY[0x1E4F47A50];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
                      {
                        int v325 = *(_DWORD *)v3;
                        *(_DWORD *)v362 = 136316162;
                        *(void *)&v362[4] = v323;
                        *(_WORD *)&v362[12] = 2080;
                        *(void *)&v362[14] = "_VCAudioPlayer_FinalizeOutputBuffer";
                        *(_WORD *)&v362[22] = 1024;
                        int v363 = 3248;
                        __int16 v364 = 1024;
                        *(_DWORD *)v365 = ChannelCount;
                        *(_WORD *)&v365[4] = 1024;
                        *(_DWORD *)&v365[6] = v325;
                        _os_log_error_impl(&dword_1E1EA4000, v324, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Channel count mismatch! sampleBufferChannelCount=%hhu audioPlayerChannelCount=%d", v362, 0x28u);
                      }
                    }
LABEL_315:
                    unint64_t v4 = v347;
                    **(_DWORD **)(v347 + 16) = *(_DWORD *)(a1 + 308);
                    int v220 = *(int **)(v347 + 40);
                    if (v220)
                    {
                      if (v350) {
                        BOOL v221 = 1;
                      }
                      else {
                        BOOL v221 = *(_DWORD *)a1 == 0;
                      }
                      int v222 = !v221;
                      *int v220 = v222;
                    }
                    v223 = *(_DWORD **)(v347 + 48);
                    if (v223) {
                      _DWORD *v223 = *(_DWORD *)a1;
                    }
                    v224 = *(unint64_t **)(v347 + 24);
                    unint64_t v3 = v346;
                    if (!v224) {
                      goto LABEL_330;
                    }
                    Sizeduint64_t BufferAtIndex = *v224;
                    if (!*v224) {
                      goto LABEL_330;
                    }
                    size_t v225 = v224[1];
                    size_t v226 = *(unsigned __int8 *)(a1 + 50);
                    v224[2] = v226;
                    if (v226 <= 0x10 && v225 >= v226)
                    {
                      memcpy((void *)SizedBufferAtIndex, (const void *)(a1 + 34), v226);
LABEL_330:
                      unsigned int v227 = *(unsigned __int8 *)(a1 + 30);
                      if (v227 <= *(unsigned __int8 *)(a1 + 29)) {
                        LOBYTE(v227) = *(unsigned char *)(a1 + 29);
                      }
                      **(unsigned char **)(v347 + 32) = v227;
                      LogProfileTimeOverLimit_3("SpkrProc: GetSamples", v5, 0.00499999989, v189, v190, v191, v192, v193, v194, v195, v328);
                      v228 = &audioPlayerMode[*(unsigned int *)(a1 + 712)];
                      if (v228 < queueGrowthMode && v228 >= audioPlayerMode)
                      {
                        *(void *)(v346 + 16) = *v228;
                        if (*(_DWORD *)(v345 + 28)) {
                          uint64_t v229 = 0;
                        }
                        else {
                          uint64_t v229 = *(void *)(v346 + 196);
                        }
                        *(void *)unint64_t v346 = v229;
                        *(double *)(v345 + 16) = micro();
                        int v230 = **(_DWORD **)(v347 + 16);
                        *(_DWORD *)(v345 + 24) = v230;
                        int v231 = *(_DWORD *)(v347 + 8);
                        *(_DWORD *)(a1 + 308) += v231;
                        *(_DWORD *)(v345 + 100) += v231;
                        if (v343 == v230)
                        {
                          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                          {
                            uint64_t v238 = VRTraceErrorLogLevelToCSTR();
                            v239 = *MEMORY[0x1E4F47A50];
                            v240 = *MEMORY[0x1E4F47A50];
                            if (*MEMORY[0x1E4F47A40])
                            {
                              if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_DWORD *)v362 = 136315906;
                                *(void *)&v362[4] = v238;
                                *(_WORD *)&v362[12] = 2080;
                                *(void *)&v362[14] = "_VCAudioPlayer_GetAudioSamples";
                                *(_WORD *)&v362[22] = 1024;
                                int v363 = 3645;
                                __int16 v364 = 1024;
                                *(_DWORD *)v365 = v343;
                                _os_log_impl(&dword_1E1EA4000, v239, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Timestamp did not increment: %d", v362, 0x22u);
                              }
                            }
                            else if (os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG))
                            {
                              VCAudioPlayer_GetSamples_cold_2();
                            }
                          }
                          VRLogfilePrintSync(*(FILE ***)(v346 + 984), "Warning: Timestamp did not increment! prevTimestamp=%d\n", v232, v233, v234, v235, v236, v237, v343);
                        }
                        return;
                      }
                    }
                  }
                }
              }
            }
LABEL_130:
            int v99 = *(_DWORD **)&buf_4[4];
            int v100 = *(_DWORD *)&buf_4[16];
            if (*(_DWORD *)&buf_4[12]) {
              BOOL v101 = *(_DWORD *)a1 == 0;
            }
            else {
              BOOL v101 = 1;
            }
            int v102 = v101;
            int v103 = 7;
            if (*(int *)buf_4 >= 1 && v102)
            {
              if (*((_DWORD *)v10 + 18) || *((_DWORD *)v10 + 19))
              {
                int v103 = 7;
              }
              else
              {
                if (!*(_DWORD *)&buf_4[16]) {
                  goto LABEL_142;
                }
                int v103 = 2;
                double v67 = (int *)(a1 + 712);
              }
            }
            *double v67 = v103;
            _VCAudioPlayer_CopyPlaybackBuffer((void **)v360, a1 + 64, 0, *((_DWORD *)v10 + 46) * v100);
LABEL_142:
            *int v99 = v100;
            goto LABEL_143;
          }
        }
      }
      else if (*v10 && !v10[17])
      {
        int v88 = 3;
      }
      else if (v10[11])
      {
        int v88 = 3;
      }
      else
      {
        int v88 = 2;
      }
      HIDWORD(v359) = v88;
      goto LABEL_123;
    }
    char v63 = 0;
    goto LABEL_64;
  }
  int v12 = *(_DWORD *)(v11 + 24);
  _VCAudioPlayer_UpdateJitterQueueSize(a1);
  VCAudioPlayerDTMF_ProcessDTMF((_DWORD *)a1, a2);
  double v13 = *(_DWORD **)(a2 + 16);
  if (v13) {
    *double v13 = *(_DWORD *)(v11 + 24);
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (v14) {
    *(void *)(v14 + 16) = 0;
  }
  double v15 = *(unsigned char **)(a2 + 56);
  if (v15) {
    *double v15 = 0;
  }
  _VCAudioPlayer_UpdateLogDumpStats(a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 8));
  Sizeduint64_t BufferAtIndex = (unint64_t)_VCAudioPlayer_LogStats((FILE **)a1);
  uint64_t v17 = &audioPlayerMode[*(unsigned int *)(a1 + 712)];
  if (v17 >= queueGrowthMode || v17 < audioPlayerMode) {
    goto LABEL_469;
  }
  *(void *)(v9 + 16) = *v17;
  if (*(_DWORD *)(v11 + 28)) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *(void *)(v9 + 196);
  }
  *(void *)uint64_t v9 = v18;
  *(double *)(v11 + 16) = micro();
  if (v12 == *(_DWORD *)(v11 + 24) && (int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v35 = VRTraceErrorLogLevelToCSTR();
    uint64_t v36 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int buf = 136315906;
      *(void *)buf_4 = v35;
      *(_WORD *)&buf_4[8] = 2080;
      *(void *)&buf_4[10] = "_VCAudioPlayerDTMF_GetDTMFSamples";
      *(_WORD *)&buf_4[18] = 1024;
      LODWORD(v357) = 3555;
      WORD2(v357) = 1024;
      *(_DWORD *)((char *)&v357 + 6) = v12;
      _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d DTMFGenerator: Timestamp did not increment, timestamp=%d", (uint8_t *)&buf, 0x22u);
    }
  }
  *(_DWORD *)(v11 + 100) += *(_DWORD *)(a2 + 8);
  JitterQueue_SetLastDecodedFrameTimestamp(*(void *)(v11 + 64), *(_DWORD *)(a1 + 24));
}

BOOL VCAudioPlayer_IsTimestampValid(uint64_t a1)
{
  if (a1) {
    return *(unsigned char *)(a1 + 312) != 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
    return 0;
  }
  VRTraceErrorLogLevelToCSTR();
  BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
  if (result)
  {
    VCAudioPlayer_IsTimestampValid_cold_1();
    return 0;
  }
  return result;
}

__n128 VCAudioPlayer_GetLastDecodedAudioFrameInfo(__n128 *a1, __n128 *a2)
{
  if (a1)
  {
    if (a2)
    {
      __n128 result = a1[3362];
      a2[1].n128_u64[0] = a1[3363].n128_u64[0];
      *a2 = result;
    }
  }
  return result;
}

void _VCAudioPlayer_ResetPlaybackBuffer(unint64_t a1)
{
  int v2 = (void **)(a1 + 96);
  int v1 = *(_DWORD *)(a1 + 96);
  if (v1 >= 1)
  {
    unsigned __int8 v4 = 0;
    while (1)
    {
      unsigned int v5 = v4;
      uint64_t v6 = (void **)(a1 + 24 * v4);
      if ((unint64_t)v6 < a1 || v6 + 3 > v2) {
        break;
      }
      if (*v6)
      {
        bzero(*v6, *(void *)(a1 + 24 * v5 + 8));
        int v1 = *(_DWORD *)v2;
      }
      unsigned __int8 v4 = v5 + 1;
      if (v1 <= (v5 + 1)) {
        return;
      }
    }
    __break(0x5519u);
  }
}

unint64_t _VCAudioPlayer_InitializePlaybackBuffer(unint64_t result, unint64_t a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(result + 96) = v3;
  if (v3 >= 1)
  {
    unsigned __int8 v4 = 0;
    uint64_t v5 = a3;
    while (1)
    {
      unsigned int v6 = v4;
      uint64_t v7 = 3 * v4;
      uint64_t v8 = (unint64_t *)(a2 + 8 * v7);
      if ((unint64_t)v8 < a2 || (unint64_t)(v8 + 3) > a2 + 96) {
        break;
      }
      int v10 = (unint64_t *)(result + 8 * v7);
      uint64_t v11 = *(void *)(a2 + 24 * v6 + 8);
      unint64_t v12 = *v8;
      unint64_t v13 = *v8 + v11;
      unint64_t v14 = *v8 + v5;
      unint64_t v15 = v11 - v5;
      BOOL v16 = v13 < v14 || v12 > v14;
      BOOL v17 = v16 || v15 > v13 - v14;
      BOOL v18 = !v17 && (unint64_t)v10 >= result;
      if (!v18 || (unint64_t)(v10 + 3) > result + 96) {
        break;
      }
      *int v10 = v14;
      *(void *)(result + 24 * v6 + 8) = v15;
      unsigned __int8 v4 = v6 + 1;
      if (v3 <= (v6 + 1)) {
        return result;
      }
    }
    __break(0x5519u);
  }
  return result;
}

uint64_t _VCAudioPlayer_CalcAdjustment(uint64_t a1, int **a2, int a3, int *a4, double a5, double a6, double a7, __n128 a8)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (BOOL *)(a1 + 52376);
  if (*(unsigned char *)(a1 + 52584)) {
    return 0;
  }
  uint64_t v14 = a1 + 51640;
  uint64_t v15 = a1 + 35532;
  double v16 = (double)*((int *)a2 + 4);
  LODWORD(a5) = *(_DWORD *)(a1 + 52552);
  double v17 = (double)*(unint64_t *)&a5;
  a8.n128_f64[0] = v16 / v17;
  double v18 = *(double *)a2[3];
  double v19 = (v18 - v16) / v17;
  if (*(unsigned char *)(a1 + 52600) && *(unsigned char *)(a1 + 35544) && fabs(v19) < *(double *)(a1 + 52576) * 0.5) {
    *(unsigned char *)(a1 + 35544) = 0;
  }
  __n128 v140 = a8;
  *(void *)(a1 + 52424) = a8.n128_u64[0];
  *(void *)(a1 + 52432) = a2[4];
  unsigned int v20 = JitterQueue_QueuedSamples(*(void *)(a1 + 35568));
  LODWORD(v21) = *((_DWORD *)v8 + 44);
  if (v8[1] || v8[8] || v8[11]) {
    double v22 = *((double *)v8 + 31);
  }
  else {
    double v22 = 0.0;
  }
  double v23 = *((double *)a2 + 4) + 0.00001 + v22;
  if (*(double *)(v14 + 688) <= v23)
  {
    BOOL v60 = *(_DWORD *)(v15 + 16096) >= *((unsigned __int16 *)v8 + 122);
    *uint64_t v8 = v60;
    if (!v60 || v8[224] && (double)v20 / (double)v21 > v140.n128_f64[0] * 1.5 || *(_DWORD *)v15)
    {
      char v24 = 0;
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v87 = VRTraceErrorLogLevelToCSTR();
        int v88 = *MEMORY[0x1E4F47A50];
        int v89 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v90 = *v8;
            uint64_t v91 = *(void *)(v14 + 688);
            *(_DWORD *)int buf = 136316418;
            uint64_t v142 = v87;
            __int16 v143 = 2080;
            uint64_t v144 = "_VCAudioPlayer_ProtectMinimumQueue";
            __int16 v145 = 1024;
            int v146 = 2879;
            __int16 v147 = 1024;
            *(_DWORD *)uint64_t v148 = v90;
            *(_WORD *)&v148[4] = 2048;
            *(void *)&v148[6] = v91;
            *(_WORD *)&v148[14] = 2048;
            *(double *)&v148[16] = v23;
            _os_log_impl(&dword_1E1EA4000, v88, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Warning: Protecting minimum queue. packetLifetimeIsLow=%d, packetLifeTime5Perc=%f threshold=%f\n", buf, 0x36u);
          }
        }
        else if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          BOOL v138 = *v8;
          uint64_t v139 = *(void *)(v14 + 688);
          *(_DWORD *)int buf = 136316418;
          uint64_t v142 = v87;
          __int16 v143 = 2080;
          uint64_t v144 = "_VCAudioPlayer_ProtectMinimumQueue";
          __int16 v145 = 1024;
          int v146 = 2879;
          __int16 v147 = 1024;
          *(_DWORD *)uint64_t v148 = v138;
          *(_WORD *)&v148[4] = 2048;
          *(void *)&v148[6] = v139;
          *(_WORD *)&v148[14] = 2048;
          *(double *)&v148[16] = v23;
          _os_log_debug_impl(&dword_1E1EA4000, v88, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Warning: Protecting minimum queue. packetLifetimeIsLow=%d, packetLifeTime5Perc=%f threshold=%f\n", buf, 0x36u);
        }
      }
      char v24 = 1;
      if (v19 > 0.0) {
        double v19 = 0.0;
      }
    }
  }
  else
  {
    char v24 = 0;
    *uint64_t v8 = 0;
  }
  v8[39] = v24;
  int v25 = JitterQueue_QueuedSamples(*(void *)(v15 + 36));
  LODWORD(v26) = *((_DWORD *)v8 + 44);
  double v27 = (double)v26;
  unsigned int v28 = *(_DWORD *)(v14 + 4);
  double v29 = *(double *)a2[3];
  double v30 = *((double *)a2 + 4);
  float64x2_t v31 = *(float64x2_t *)(v14 + 672);
  float64x2_t v32 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  v33.f64[0] = v30;
  *(void *)&v33.f64[1] = v140.n128_u64[0];
  *(void *)&v34.f64[0] = v140.n128_u64[0];
  v34.f64[1] = v30;
  int16x8_t v35 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vaddq_f64(v31, v32), v34), (int32x4_t)vcgtq_f64(vaddq_f64(*(float64x2_t *)(v14 + 688), v32), v33));
  *(int8x8_t *)v35.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v35), (int8x8_t)0x1000100010001);
  *(int16x4_t *)v35.i8 = vzip2_s16(vzip1_s16(*(int16x4_t *)v35.i8, (int16x4_t)vext_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v35.i8, 6uLL)), *(int16x4_t *)v35.i8);
  *((_DWORD *)v8 + 1) = vmovn_s16(v35).u32[0];
  unsigned int v36 = *(_DWORD *)(v14 + 724);
  v8[1] = v36 > 1;
  void v8[2] = v36 > 7;
  v8[8] = *(_DWORD *)(v14 + 732) > 1u;
  if (*(unsigned char *)(v14 + 720)) {
    BOOL v37 = 0;
  }
  else {
    BOOL v37 = *(unsigned char *)(v14 + 721) == 0;
  }
  v8[3] = v37;
  v8[13] = v30 < v140.n128_f64[0];
  double v38 = (double)v25 / v27;
  BOOL v39 = v30 < v140.n128_f64[0] && v31.f64[0] >= *((double *)a2 + 5) * 0.8;
  v8[10] = v39;
  unsigned int v40 = *(_DWORD *)(v14 + 12);
  v8[18] = v28 < v40;
  v8[19] = v28 > v40;
  v8[17] = *(_DWORD *)v14 == 0;
  v8[16] = v28 == 0;
  double v41 = v30 + 0.00001;
  v8[11] = v38 <= v41;
  v8[12] = v38 > v140.n128_f64[0] * 1.5;
  double v42 = (double *)*a2;
  int v43 = **a2;
  BOOL v44 = v38 <= 0.0 || v43 == 0;
  char v45 = !v44;
  v8[27] = v45;
  if (v44)
  {
    BOOL v47 = 0;
    v8[28] = 0;
  }
  else
  {
    double v46 = v29 / v27;
    v8[28] = *(_DWORD *)(v15 + 84) != v43;
    BOOL v47 = v42[1] > v46 + 0.00001 && v46 > v41;
  }
  unsigned __int8 v48 = v45 ^ 1;
  v8[30] = v47;
  if (!v8[32]) {
    unsigned __int8 v48 = 0;
  }
  v8[29] = v48;
  *(_DWORD *)(v15 + 84) = v43;
  __n128 v49 = (double *)a2[1];
  unint64_t v50 = (unint64_t)(v49 + 100);
  uint64_t v51 = *((int *)v49 + 200);
  unint64_t v52 = (unint64_t)(v49 + 50);
  uint64_t v53 = &v49[v51 + 50];
  if (v53 >= v49 + 100 || (unint64_t)v53 < v52) {
LABEL_275:
  }
    __break(0x5519u);
  int v54 = *((_DWORD *)v49 + 201);
  if (v54 >= 1)
  {
    int v55 = 0;
    int v56 = 0;
    double v57 = *v53;
    BOOL v58 = 1;
    while (1)
    {
      int v59 = (double *)(v52 + 8 * (((int)v51 + v56) % 50));
      BOOL v60 = (unint64_t)v59 < v50 && (unint64_t)v59 >= v52;
      if (!v60) {
        goto LABEL_275;
      }
      if (vabdd_f64(v57, *v59) <= 5.0)
      {
        if (v55 > 1) {
          goto LABEL_53;
        }
        ++v55;
        double v57 = *v59;
      }
      BOOL v58 = ++v56 < v54;
      if (v54 == v56) {
        goto LABEL_53;
      }
    }
  }
  BOOL v58 = 0;
LABEL_53:
  v8[33] = v58;
  float v61 = *(float *)(v15 + 20);
  int LeftOverSamples = VCAudioPlayer_GetLeftOverSamples(a1);
  double v65 = *((double *)v8 + 5);
  v8[34] = v65 > 0.0;
  v8[35] = v65 < 0.0;
  int v66 = *(_DWORD *)(v14 + 28);
  v8[20] = v66 != 0;
  if (!v8[152])
  {
    v8[21] = 0;
LABEL_64:
    BOOL v73 = 0;
    *((_WORD *)v8 + 11) = 0;
    v8[24] = 0;
    __n128 v74 = v140;
    goto LABEL_67;
  }
  BOOL v67 = *((_DWORD *)v8 + 42) != 5 || v66 == 0;
  char v68 = !v67;
  v8[21] = v68;
  if (v67) {
    goto LABEL_64;
  }
  int v69 = (int)(float)(v61 + (float)LeftOverSamples);
  double v70 = *((double *)v8 + 20);
  BOOL v71 = *(_DWORD *)(v14 + 36) <= v69;
  v8[22] = v70 > 0.0;
  v8[24] = v71;
  BOOL v72 = v70 > 0.0 && *((_DWORD *)a2 + 4) <= v69;
  __n128 v74 = v140;
  v8[23] = v72;
  double v63 = *(double *)(v14 + 40);
  HIDWORD(v64) = 1065646817;
  BOOL v73 = v63 >= 0.01;
LABEL_67:
  v8[25] = v73;
  if (*((_DWORD *)v8 + 32) != 1)
  {
LABEL_193:
    double v114 = v19;
    goto LABEL_194;
  }
  if (*(_DWORD *)v15)
  {
    if (v65 != 0.0)
    {
      _VCAudioPlayer_SteerQueueCommand(a1, 2, v74);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v75 = VRTraceErrorLogLevelToCSTR();
        double v76 = *MEMORY[0x1E4F47A50];
        uint64_t v77 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315650;
            uint64_t v142 = v75;
            __int16 v143 = 2080;
            uint64_t v144 = "_VCAudioPlayer_HandleQueueSteeringReset";
            __int16 v145 = 1024;
            int v146 = 2707;
            int v78 = "VCAudioPlayer [%s] %s:%d Queue Steering: Resetting queue growth state";
            uint64_t v79 = v76;
            uint32_t v80 = 28;
LABEL_74:
            _os_log_impl(&dword_1E1EA4000, v79, OS_LOG_TYPE_DEFAULT, v78, buf, v80);
            goto LABEL_167;
          }
        }
        else if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
        {
          _VCAudioPlayer_CalcAdjustment_cold_4();
        }
      }
    }
    goto LABEL_167;
  }
  int v81 = v8[39];
  BOOL v82 = v8[5];
  if (v8[5])
  {
    int v83 = 0;
  }
  else
  {
    int v83 = v8[1];
    if (v8[1])
    {
      int v83 = v8[8];
      if (v8[8])
      {
        int v83 = *(unsigned __int8 *)(v14 + 721);
        if (*(unsigned char *)(v14 + 721)) {
          int v83 = v8[13];
        }
      }
    }
  }
  v8[9] = v83;
  if (v81)
  {
    BOOL v84 = v8[30];
    if (v8[30])
    {
      BOOL v84 = v8[28];
      if (v8[28]) {
        BOOL v84 = *(unsigned char *)(v14 + 721) != 0;
      }
    }
  }
  else
  {
    BOOL v84 = 0;
  }
  v8[31] = v84;
  BOOL v85 = v8[11];
  if (v8[11] || !v8[17])
  {
    if (!v82) {
      goto LABEL_93;
    }
    BOOL v86 = 0;
  }
  else
  {
    BOOL v86 = 0;
    if (v8[19] && !v82 && v65 < 0.0)
    {
LABEL_93:
      BOOL v86 = 0;
      if (*(unsigned char *)(v14 + 721) && v65 <= 0.0) {
        BOOL v86 = !v8[16];
      }
    }
  }
  v8[14] = v86;
  if (v81)
  {
    int v81 = *(unsigned __int8 *)(v14 + 721);
    if (*(unsigned char *)(v14 + 721))
    {
      int v81 = v8[2];
      if (v8[2]) {
        int v81 = !v8[16] && v8[13];
      }
    }
  }
  v8[15] = v81;
  int v92 = v83 | v84 | v86 | v81;
  v8[36] = v92;
  BOOL v93 = v8[30];
  if (v85)
  {
    int v94 = 0;
    int v95 = 0;
    v8[37] = 0;
    if (v93) {
      goto LABEL_143;
    }
    int v94 = 0;
    int v95 = *(unsigned __int8 *)(v14 + 720);
    goto LABEL_126;
  }
  if (v8[30])
  {
    int v94 = 0;
    int v95 = 0;
    v8[37] = 0;
    goto LABEL_143;
  }
  int v95 = *(unsigned __int8 *)(v14 + 720);
  if (!*(unsigned char *)(v14 + 720) || *(_DWORD *)(v14 + 724) && *(_DWORD *)(v14 + 732)) {
    goto LABEL_124;
  }
  int v94 = v8[16];
  if (!v8[16]) {
    goto LABEL_125;
  }
  if (!v8[29] && !v8[12] && !v8[7] && !v8[6] && !v8[18] && v65 <= 0.0)
  {
LABEL_124:
    int v94 = 0;
    goto LABEL_125;
  }
  int v94 = v8[13];
  if (v8[13])
  {
    if (!v8[10])
    {
      int v94 = !v8[33] || *(_DWORD *)(a1 + 808) == 2;
      goto LABEL_125;
    }
    goto LABEL_124;
  }
LABEL_125:
  v8[37] = v94;
LABEL_126:
  if (v95)
  {
    int v95 = v8[16];
    if (v8[16])
    {
      int v95 = v8[18];
      if (v8[18] && (v8[29] || v8[12] || v8[7] || (int v95 = v8[6]) != 0))
      {
        int v95 = v8[13];
        if (v8[13])
        {
          if (v8[10]) {
            int v95 = 0;
          }
          else {
            int v95 = !v8[33] || *(_DWORD *)(a1 + 808) == 2;
          }
        }
      }
    }
  }
LABEL_143:
  v8[38] = v95;
  if (v92)
  {
    if ((v94 | v95) == 1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCAudioPlayer_CalcAdjustment_cold_1();
        }
      }
    }
    else if (*(_DWORD *)(v15 + 16096) >= *((unsigned __int16 *)v8 + 123))
    {
      _VCAudioPlayer_SteerQueueCommand(a1, 0, v74);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v96 = VRTraceErrorLogLevelToCSTR();
        uint64_t v97 = *MEMORY[0x1E4F47A50];
        int v98 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315650;
            uint64_t v142 = v96;
            __int16 v143 = 2080;
            uint64_t v144 = "_VCAudioPlayer_ExecuteQueueSteering";
            __int16 v145 = 1024;
            int v146 = 2804;
            _os_log_impl(&dword_1E1EA4000, v97, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Queue Steering: Growing queue to protect against low packet lifetime and erasures", buf, 0x1Cu);
          }
        }
        else if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
        {
          _VCAudioPlayer_CalcAdjustment_cold_2();
        }
      }
      if (v8[28]) {
        v8[32] = 1;
      }
    }
  }
  else if (*(_DWORD *)(v15 + 16096) >= *((unsigned __int16 *)v8 + 123) && ((v94 | v95) & 1) != 0)
  {
    _VCAudioPlayer_SteerQueueCommand(a1, 1, v74);
    if (v8[29]) {
      v8[32] = 0;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v99 = VRTraceErrorLogLevelToCSTR();
      int v100 = *MEMORY[0x1E4F47A50];
      BOOL v101 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (!os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_167;
        }
        BOOL v102 = v8[38];
        *(_DWORD *)int buf = 136315906;
        if (v102) {
          int v103 = "Proactively ";
        }
        else {
          int v103 = "";
        }
        uint64_t v142 = v99;
        __int16 v143 = 2080;
        uint64_t v144 = "_VCAudioPlayer_ExecuteQueueSteering";
        __int16 v145 = 1024;
        int v146 = 2818;
        __int16 v147 = 2080;
        *(void *)uint64_t v148 = v103;
        int v78 = "VCAudioPlayer [%s] %s:%d Queue Steering: %s shrinking queue";
        uint64_t v79 = v100;
        uint32_t v80 = 38;
        goto LABEL_74;
      }
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG)) {
        _VCAudioPlayer_CalcAdjustment_cold_3(v99, v8 + 38, v100);
      }
    }
  }
LABEL_167:
  double v104 = *((double *)a2 + 4);
  int v105 = *((_DWORD *)a2 + 4);
  if (v19 != 0.0 && !*(_DWORD *)v15)
  {
    *(_DWORD *)int buf = 0;
    if (JitterQueue_GetTimestampDeltaToNextDTXPacket(*(void *)(v15 + 36), buf))
    {
      LODWORD(v106) = *((_DWORD *)v8 + 44);
      double v107 = (double)*(int *)buf / (double)v106;
      if (v107 != 0.0)
      {
        HIDWORD(v63) = 1070889697;
        if (v107 < 0.32) {
          goto LABEL_192;
        }
      }
    }
  }
  int v108 = JitterQueue_QueuedSamples(*(void *)(v15 + 36));
  int v109 = *(_DWORD *)(a1 + 168);
  int v110 = *(_DWORD *)(a1 + 304);
  int v111 = VCTimescale_TailSize(a1 + 808);
  if (v8[21] && !v8[23] && v8[25])
  {
    BOOL v113 = 1;
    goto LABEL_189;
  }
  BOOL v112 = 1;
  if (v109 + v110 + v108 + v111 <= v105 && !*(unsigned char *)(v14 + 720))
  {
    BOOL v112 = v8[24];
    if (!v8[24] && *(double *)(v14 + 688) + 0.00001 >= v104)
    {
      if (!v8[36] && !v8[11])
      {
        BOOL v112 = v8[16];
        if (!v8[21]) {
          goto LABEL_183;
        }
        goto LABEL_182;
      }
      BOOL v112 = 0;
    }
  }
  if (!v8[21]) {
    goto LABEL_183;
  }
LABEL_182:
  if (!v8[24])
  {
    BOOL v113 = 1;
    if (!v112) {
      goto LABEL_189;
    }
    goto LABEL_188;
  }
LABEL_183:
  BOOL v113 = v8[11];
  if (!v112) {
    goto LABEL_189;
  }
LABEL_188:
  double v114 = 0.0;
  if (v19 < 0.0) {
    goto LABEL_194;
  }
LABEL_189:
  if (!v113 || *(_DWORD *)v15) {
    goto LABEL_193;
  }
  double v114 = v19;
  if (v19 > 0.0) {
LABEL_192:
  }
    double v114 = 0.0;
LABEL_194:
  *((_DWORD *)v8 + 320) = 0;
  if (!*(_DWORD *)(a1 + 808))
  {
    uint64_t v9 = 0;
    goto LABEL_230;
  }
  int v115 = v8[224];
  if (v8[224] && *(unsigned char *)(v15 + 12)) {
    goto LABEL_226;
  }
  int v116 = 0;
  *((_WORD *)v8 + 666) = 0;
  LODWORD(v63) = *(_DWORD *)(a1 + 24);
  LODWORD(v64) = *((_DWORD *)v8 + 44);
  double v117 = (double)v64;
  int v118 = *(_DWORD *)v15;
  double v119 = (double)*(unint64_t *)&v63 / v117;
  if (!*(_DWORD *)v15)
  {
    LODWORD(v65) = *(_DWORD *)(v15 + 52);
    double v65 = (double)*(unint64_t *)&v65 / v117;
    if (v65 != 0.0)
    {
      double v65 = vabdd_f64(v119, v65);
      if (v65 >= *(double *)(v15 + 60))
      {
        int v116 = 0;
      }
      else
      {
        int v116 = 1;
        v8[1332] = 1;
      }
    }
  }
  if (v118 || (LODWORD(v65) = *(_DWORD *)(v15 + 56), double v120 = (double)*(unint64_t *)&v65 / v117, v120 == 0.0))
  {
    if (v118)
    {
      *(_DWORD *)(v15 + 52) = 0;
      *(_DWORD *)(v15 + 56) = 0;
    }
  }
  else if (vabdd_f64(v119, v120) < *(double *)(v15 + 60))
  {
    int v116 = 1;
    v8[1333] = 1;
  }
  if (v115) {
    int v115 = *((double *)v8 + 6) == *((double *)v8 + 7) && v114 > 0.0 && *(_DWORD *)v14 == 0;
  }
  double v122 = *((double *)v8 + 25);
  double v123 = v122 * 0.95;
  if (v118)
  {
    int v124 = v122 * -0.45 >= v114;
    if (v123 <= v114) {
      int v124 = 1;
    }
    goto LABEL_227;
  }
  if (v122 * -0.95 >= v114)
  {
LABEL_226:
    int v124 = 1;
  }
  else
  {
    if (v123 <= v114) {
      int v125 = 1;
    }
    else {
      int v125 = v115;
    }
    int v124 = v125 & (v116 ^ 1);
  }
LABEL_227:
  uint64_t v9 = 0;
  if (a3 >= 1 && v124)
  {
    uint64_t v9 = (int)(v18 - v16);
    *((_DWORD *)v8 + 320) = v9;
  }
LABEL_230:
  if (!a4) {
    goto LABEL_253;
  }
  char v126 = (_DWORD *)(a1 + 808);
  if (!a3 || (int)v9 < 1)
  {
    if ((v9 & 0x80000000) == 0
      || (*v126 & 0xFFFFFFFE) != 2
      || v8[152] && !*(unsigned char *)(v15 + 69) && *((_DWORD *)v8 + 42) == 5)
    {
      goto LABEL_253;
    }
    uint64_t v127 = a1 + 808;
    goto LABEL_250;
  }
  if (!v8[192])
  {
    if (*(float *)(a1 + 784) >= 72.0 || *(float *)(a1 + 788) >= 72.0) {
      goto LABEL_246;
    }
LABEL_245:
    BOOL IsNextFrameDTX = 1;
    goto LABEL_247;
  }
  if (*(float *)(a1 + 792) < 0.0058 && *(float *)(a1 + 796) < 0.0058) {
    goto LABEL_245;
  }
LABEL_246:
  BOOL IsNextFrameDTX = JitterQueue_IsNextFrameDTX(*(void *)(v15 + 36));
LABEL_247:
  int IsCompressionNeeded = VCTimescale_IsCompressionNeeded((uint64_t)v126);
  if (IsNextFrameDTX || !IsCompressionNeeded)
  {
    LODWORD(v130) = *((_DWORD *)v8 + 44);
    int v131 = (int)(*((double *)v8 + 29) * (double)v130);
    goto LABEL_252;
  }
  uint64_t v127 = (uint64_t)v126;
LABEL_250:
  int v131 = VCTimescale_WarpFrameSize(v127);
LABEL_252:
  *a4 = v131;
LABEL_253:
  if (v8[224] && !*(unsigned char *)(v15 + 12) && v9) {
    *(unsigned char *)(v15 + 12) = 1;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v132 = VRTraceErrorLogLevelToCSTR();
    int v133 = *MEMORY[0x1E4F47A50];
    int v134 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
      {
        int v135 = JitterQueue_QueuedSamples(*(void *)(v15 + 36));
        *(_DWORD *)int buf = 136316674;
        uint64_t v142 = v132;
        __int16 v143 = 2080;
        uint64_t v144 = "_VCAudioPlayer_CalcAdjustment";
        __int16 v145 = 1024;
        int v146 = 3087;
        __int16 v147 = 2048;
        *(double *)uint64_t v148 = v18 - v16;
        *(_WORD *)&v148[8] = 2048;
        *(double *)&v148[10] = v18;
        *(_WORD *)&v148[18] = 2048;
        *(double *)&v148[20] = v16;
        __int16 v149 = 1024;
        int v150 = v135;
        _os_log_impl(&dword_1E1EA4000, v133, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Adjust[%f] AvgQSize[%f] DesiredQsize[%f] QueuedSamples[%d]", buf, 0x40u);
      }
    }
    else if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
    {
      int v137 = JitterQueue_QueuedSamples(*(void *)(v15 + 36));
      *(_DWORD *)int buf = 136316674;
      uint64_t v142 = v132;
      __int16 v143 = 2080;
      uint64_t v144 = "_VCAudioPlayer_CalcAdjustment";
      __int16 v145 = 1024;
      int v146 = 3087;
      __int16 v147 = 2048;
      *(double *)uint64_t v148 = v18 - v16;
      *(_WORD *)&v148[8] = 2048;
      *(double *)&v148[10] = v18;
      *(_WORD *)&v148[18] = 2048;
      *(double *)&v148[20] = v16;
      __int16 v149 = 1024;
      int v150 = v137;
      _os_log_debug_impl(&dword_1E1EA4000, v133, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Adjust[%f] AvgQSize[%f] DesiredQsize[%f] QueuedSamples[%d]", buf, 0x40u);
    }
  }
  return v9;
}

void **_VCAudioPlayer_CopyPlaybackBuffer(void **result, unint64_t a2, int a3, int a4)
{
  uint64_t v5 = result + 12;
  int v4 = *((_DWORD *)result + 24);
  *((_DWORD *)result + 25) = a4;
  if (v4 >= 1)
  {
    uint64_t v7 = result;
    unsigned __int8 v8 = 0;
    unint64_t v9 = a2 + 96;
    uint64_t v10 = a3;
    while (1)
    {
      unsigned int v11 = v8;
      uint64_t v12 = 3 * v8;
      unint64_t v13 = &v7[3 * v8];
      if (v13 < v7 || v13 + 3 > v5) {
        break;
      }
      uint64_t v15 = (unint64_t *)(a2 + 8 * v12);
      if ((unint64_t)v15 < a2 || (unint64_t)(v15 + 3) > v9) {
        break;
      }
      unint64_t v17 = *v15;
      double v18 = (const void *)(v17 + v10);
      size_t v19 = *((int *)v7 + 25);
      BOOL v20 = v17 + *(void *)(a2 + 24 * v11 + 8) < v17 + v10 || v17 > (unint64_t)v18;
      BOOL v21 = !v20 && *(void *)(a2 + 24 * v11 + 8) - v10 >= v19;
      if (!v21 || (unint64_t)v7[3 * v11 + 1] < v19) {
        break;
      }
      __n128 result = (void **)memcpy(*v13, v18, v19);
      unsigned __int8 v8 = v11 + 1;
      if (*(_DWORD *)v5 <= (int)(v11 + 1)) {
        return result;
      }
    }
    __break(0x5519u);
  }
  return result;
}

void LogProfileTimeOverLimit_3(const char *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (VRTraceIsInternalOSInstalled())
  {
    double v14 = micro() - a2;
    if (v14 > a3)
    {
      *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v42 = v15;
      long long v43 = v15;
      long long v40 = v15;
      long long v41 = v15;
      long long v38 = v15;
      long long v39 = v15;
      long long v36 = v15;
      long long v37 = v15;
      long long v34 = v15;
      long long v35 = v15;
      long long v33 = v15;
      long long v31 = v15;
      long long v32 = v15;
      long long v29 = v15;
      long long v30 = v15;
      *(_OWORD *)char __str = v15;
      vsnprintf(__str, 0x100uLL, a1, &a11);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        unint64_t v17 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136316162;
          uint64_t v19 = v16;
          __int16 v20 = 2080;
          BOOL v21 = "_LogProfileTimeLimitHelper";
          __int16 v22 = 1024;
          int v23 = 36;
          __int16 v24 = 2080;
          int v25 = __str;
          __int16 v26 = 2048;
          double v27 = v14;
          _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

void _VCAudioPlayer_SteerQueueCommand(uint64_t a1, int a2, __n128 a3)
{
  int v3 = *(uint64_t (**)(__n128))(a1 + 52512);
  if (!v3 || !*(void *)(a1 + 52520)) {
    return;
  }
  double v6 = *(double *)(a1 + 52624);
  double v7 = a3.n128_f64[0] * *(double *)(a1 + 35608) + 0.00001;
  if (*(unsigned char *)(a1 + 52528)) {
    BOOL v8 = *(_DWORD *)(a1 + 52544) == 2;
  }
  else {
    BOOL v8 = 1;
  }
  double v9 = fmax(v6, v7);
  if (a2 == 1)
  {
    double v10 = *(double *)(a1 + 52416);
    a3.n128_f64[0] = v10 - v6;
    if (v10 - v6 < -v9) {
      BOOL v8 = 0;
    }
  }
  else
  {
    if (a2)
    {
      if (!v8) {
        return;
      }
      unsigned int v11 = (double *)(a1 + 52416);
      double v10 = *(double *)(a1 + 52416);
      *(void *)(a1 + 52416) = 0;
      a3.n128_u64[0] = 0;
      goto LABEL_17;
    }
    double v10 = *(double *)(a1 + 52416);
    a3.n128_f64[0] = v6 + v10;
    if (v6 + v10 > v9) {
      BOOL v8 = 0;
    }
  }
  if (!v8) {
    return;
  }
  unsigned int v11 = (double *)(a1 + 52416);
  *(void *)(a1 + 52416) = a3.n128_u64[0];
  *(_DWORD *)(a1 + 51652) = *(_DWORD *)(a1 + 51644);
LABEL_17:
  if ((v3(a3) & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCAudioPlayer_SteerQueueCommand_cold_1();
      }
    }
  }
  else if (*v11 != v10)
  {
    _VCAudioPlayer_UpdatePacketLifeTimeCDF(a1, a2);
  }
}

uint64_t _VCAudioPlayer_UpdatePacketLifeTimeCDF(uint64_t result, int a2)
{
  unint64_t v2 = result + 51624;
  double v3 = *(double *)(result + 52624);
  if (a2)
  {
    if (a2 != 2 || (double v4 = *(double *)(result + 52416), v4 == 0.0))
    {
      int v5 = -1;
      double v3 = -v3;
    }
    else
    {
      int v5 = (int)((double)(int)v4 / v3);
      double v3 = v3 * (double)v5;
    }
  }
  else
  {
    int v5 = 1;
  }
  int v6 = *(_DWORD *)(result + 51628);
  if (v6 >= 2)
  {
    if (*(int *)v2 >= 2) {
      int v7 = *(_DWORD *)v2;
    }
    else {
      int v7 = *(_DWORD *)(result + 51628);
    }
    unint64_t v8 = result + 35624;
    int v9 = 1;
    while (1)
    {
      unint64_t v10 = v8 + 40 * --v7;
      if (v10 >= v2 || v10 < v8) {
        break;
      }
      unint64_t v12 = v8 + 40 * v7;
      double v13 = v3 + *(double *)(v12 + 8);
      if (v13 > 0.5) {
        double v13 = 0.5;
      }
      if (v13 < 0.0) {
        double v13 = 0.0;
      }
      int v14 = *(unsigned __int16 *)(v2 + 994);
      __n128 result = (*(_DWORD *)(v12 + 20) + v5);
      if ((int)result >= v14) {
        int v15 = v14 - 1;
      }
      else {
        int v15 = *(_DWORD *)(v12 + 20) + v5;
      }
      *(double *)(v12 + 8) = v13;
      *(_DWORD *)(v12 + 20) = v15 & ~(v15 >> 31);
      if (v7 < 1) {
        int v7 = v6;
      }
      if (v6 == ++v9) {
        return result;
      }
    }
    __break(0x5519u);
  }
  return result;
}

void _VCAudioPlayer_DiscardSamples(uint64_t a1, int a2, double *a3, double a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 52552;
  uint64_t v9 = a1 + 35520;
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  unsigned int v11 = (os_log_t *)MEMORY[0x1E4F47A50];
  if (ErrorLogLevelForModule >= 5)
  {
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    double v13 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      float v14 = *(float *)(v9 + 32);
      int LeftOverSamples = VCAudioPlayer_GetLeftOverSamples(a1);
      *(_DWORD *)int buf = 136316418;
      float v16 = (float)*(unsigned int *)v8;
      double v17 = *(double *)v9;
      uint64_t v46 = v12;
      __int16 v47 = 2080;
      unsigned __int8 v48 = "_VCAudioPlayer_DiscardSamples";
      __int16 v49 = 1024;
      int v50 = 2427;
      __int16 v51 = 2048;
      double v52 = (float)((float)(v14 + (float)LeftOverSamples) / v16);
      __int16 v53 = 2048;
      double v54 = a4;
      __int16 v55 = 2048;
      double v56 = v17;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d JQ too high, discarding. CurrentJQSize:%f currentTime:%f lastSpkrCallback:%f", buf, 0x3Au);
    }
  }
  if (a2 >= 1)
  {
    JitterQueue_DiscardExcess(*(uint64_t **)(v9 + 48), a2);
    double v18 = *(FILE ***)(v8 + 1072);
    float v19 = *(float *)(v9 + 32);
    double v20 = (float)((float)(v19 + (float)(int)VCAudioPlayer_GetLeftOverSamples(a1)) / (float)*(unsigned int *)v8);
    VRLogfilePrintSync(v18, "Warning: JQ too high, discarding. CurrentJQSize:%f currentTime:%f lastSpkrCallback:%f\n", v21, v22, v23, v24, v25, v26, SLOBYTE(v20));
  }
  *(float *)(v9 + 32) = (float)JitterQueue_QueuedSamples(*(void *)(v9 + 48));
  float v27 = *(float *)(v9 + 32);
  float v34 = v27 + (float)(int)VCAudioPlayer_GetLeftOverSamples(a1);
  double v35 = v34;
  if (v34 >= 0.0)
  {
    double v36 = v34;
  }
  else
  {
    VRLogfilePrintSync(*(FILE ***)(v8 + 1072), "Critical: Average JB queue size is negative!\n", v28, v29, v30, v31, v32, v33, v44);
    double v36 = 0.0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v37 = VRTraceErrorLogLevelToCSTR();
      long long v38 = *v11;
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        double v39 = *a3;
        double v40 = *(float *)(v9 + 32);
        *(_DWORD *)int buf = 136316418;
        uint64_t v46 = v37;
        __int16 v47 = 2080;
        unsigned __int8 v48 = "_VCAudioPlayer_DiscardSamples";
        __int16 v49 = 1024;
        int v50 = 2441;
        __int16 v51 = 2048;
        double v52 = v39;
        __int16 v53 = 2048;
        double v54 = v35;
        __int16 v55 = 2048;
        double v56 = v40;
        _os_log_error_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Please file a radar on AVConference Media | All. Average JB queue size is negative! Current size: %f, new size: %f, jitter samples: %f", buf, 0x3Au);
      }
    }
  }
  *a3 = v36;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v41 = VRTraceErrorLogLevelToCSTR();
    long long v42 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315906;
      unsigned int v43 = *(_DWORD *)v8;
      uint64_t v46 = v41;
      __int16 v47 = 2080;
      unsigned __int8 v48 = "_VCAudioPlayer_DiscardSamples";
      __int16 v49 = 1024;
      int v50 = 2445;
      __int16 v51 = 2048;
      double v52 = v36 / (double)v43;
      _os_log_impl(&dword_1E1EA4000, v42, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d NewJQSize:%f", buf, 0x26u);
    }
  }
}

BOOL _VCAudioPlayer_DecodeSamples(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v7 = a1;
  uint64_t v564 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 53632;
  uint64_t v527 = a1 + 52904;
  v543 = (int32x2_t *)(a1 + 52456);
  uint64_t v9 = a1 + 35532;
  _VCAudioPlayer_UpdateLosses(a1);
  int v10 = *(_DWORD *)(v7 + 168);
  if (v10) {
    BOOL v11 = *(_DWORD *)(v7 + 436) > *(_DWORD *)(v7 + 172);
  }
  else {
    BOOL v11 = 0;
  }
  BOOL v538 = v11;
  uint64_t v541 = v7;
  uint64_t v530 = v8;
  uint64_t v542 = v9;
  if (v10 >= *a2) {
    goto LABEL_550;
  }
  v511 = (int *)(v7 + 808);
  uint64_t v12 = v543;
  unint64_t v520 = v7 + 64;
  v529 = (void **)(v7 + 328);
  unint64_t v524 = v7 + 512;
  uint64_t v507 = v7 + 552;
  v508 = (_DWORD *)&v543[3] + 1;
  __N = (int64x2_t *)(v9 + 16092);
  unint64_t v536 = v7 + 35624;
  v531 = (double *)(v7 + 52320);
  v532 = (double *)(v7 + 52328);
  unint64_t v13 = v7 + 51704;
  unint64_t v14 = v7 + 51904;
  uint64_t v533 = v7 + 51640;
  unint64_t v505 = v7 + 52304;
  __dst = (void *)(v7 + 34);
  unint64_t v510 = v7 + 52972;
  v525 = (_WORD *)(v527 + 708);
  v526 = (double *)(v7 + 52312);
  uint64_t v519 = v7 + 52825;
  unint64_t v518 = v7 + 52830;
  unint64_t v517 = v7 + 448;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v506 = _Q0;
  while (1)
  {
    long long v548 = 0u;
    long long v549 = 0u;
    long long v546 = 0u;
    long long v547 = 0u;
    memset(v545, 0, sizeof(v545));
    if (micro() - a6 >= 0.00600000005)
    {
      *a2 = v12[12].i32[1] * v538;
      *a3 = *(_DWORD *)(v7 + 168);
      VRLogfilePrintSync(*(FILE ***)(v527 + 720), "Warning: Timeout in decoder loop. Updating samplesToDecode to %d\n", v17, v18, v19, v20, v21, v22, *a2);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v413 = VRTraceErrorLogLevelToCSTR();
        v414 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v415 = *a2;
          *(_DWORD *)int buf = 136315906;
          uint64_t v551 = v413;
          __int16 v552 = 2080;
          v553 = "_VCAudioPlayer_DecodeSamples";
          __int16 v554 = 1024;
          int v555 = 2262;
          __int16 v556 = 1024;
          *(_DWORD *)v557 = v415;
          _os_log_impl(&dword_1E1EA4000, v414, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Timeout in audio player decoder loop, breaking. Updating samplesToDecode to %d\n", buf, 0x22u);
        }
      }
      goto LABEL_551;
    }
    uint64_t v23 = (int *)v12[17];
    if (v23) {
      int v24 = *v23;
    }
    else {
      int v24 = 128;
    }
    HIDWORD(v545[1]) = v24;
    int v25 = *(_DWORD *)(a5 + 16);
    uint64_t v26 = *(double **)(a5 + 24);
    float v27 = *(_DWORD **)a5;
    double v28 = *(double *)(a5 + 32);
    int v29 = JitterQueue_CheckQSizeBeforePop(*(void *)(v9 + 36));
    int SizeOfNextFrame = JitterQueue_GetSizeOfNextFrame(*(void *)(v9 + 36));
    uint64_t v31 = v9;
    int v32 = SizeOfNextFrame;
    if (JitterQueue_GetSizeOfNextFrame(*(void *)(v31 + 36))) {
      int v35 = 0;
    }
    else {
      int v35 = v12->i32[1] + 1;
    }
    int v36 = v32 + v29;
    v12->i32[1] = v35;
    uint64_t v37 = v542;
    if (v12->i32[0] == 3 || !v12->i32[0])
    {
      int v544 = -1431655766;
      NextFrameint Timestamp = JitterQueue_GetNextFrameTimestamp(*(void *)(v542 + 36), &v544);
      int v40 = *(_DWORD *)v542;
      if (*(_DWORD *)v542) {
        int v40 = !JitterQueue_IsNextFrameDTX(*(void *)(v542 + 36));
      }
      double v33 = (double)(v544 - *(_DWORD *)(v541 + 16) + v12[12].i32[1] * *(_DWORD *)(v541 + 8));
      LODWORD(v39) = v12[12].i32[0];
      double v34 = (double)v39;
      double v41 = v33 / v34;
      if ((v40 & NextFrameTimestamp) != 1 || (v41 > 0.1 ? (_ZF = *(_DWORD *)(v541 + 808) == 0) : (_ZF = 1), _ZF))
      {
        if (v41 < 0.1 && ((v40 ^ 1) & 1) == 0 && NextFrameTimestamp && (int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v43 = VRTraceErrorLogLevelToCSTR();
          char v44 = *MEMORY[0x1E4F47A50];
          char v45 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int buf = 136315906;
              uint64_t v551 = v43;
              __int16 v552 = 2080;
              v553 = "_VCAudioPlayer_ShouldPerformQueueGrowth";
              __int16 v554 = 1024;
              int v555 = 1254;
              __int16 v556 = 2048;
              *(double *)v557 = v41;
              _os_log_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Queue growth suspended as silence period=%f is low", buf, 0x26u);
            }
          }
          else if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136315906;
            uint64_t v551 = v43;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_ShouldPerformQueueGrowth";
            __int16 v554 = 1024;
            int v555 = 1254;
            __int16 v556 = 2048;
            *(double *)v557 = v41;
            _os_log_debug_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Queue growth suspended as silence period=%f is low", buf, 0x26u);
          }
        }
        uint64_t v37 = v542;
        if (!*(_DWORD *)v542)
        {
          int v46 = *v27 == 2 ? 3 : 5;
          if (v12->i32[1] >= v46)
          {
            v12->i32[0] = 1;
            v12[1].i8[0] = 1;
          }
        }
      }
      else
      {
        v12->i32[0] = 2;
        uint64_t v37 = v542;
        if (v36 >= v25) {
          JitterQueue_GetOldestArrivalTimeStamp(*(void *)(v542 + 36), v508);
        }
        else {
          _DWORD *v508 = *(_DWORD *)(v542 + 72);
        }
      }
    }
    int v47 = *(_DWORD *)(v37 + 72) - v12[3].i32[1];
    v12[5].i32[0] = v47;
    unsigned int v48 = v12->i32[0] - 1;
    BOOL v49 = v47 >= v25 || v36 >= v25;
    v12[5].i8[5] = v47 >= v25;
    v12[5].i8[4] = v36 >= v25;
    BOOL v50 = v48 < 2 && v49;
    v12[5].i8[6] = v50;
    if (v50)
    {
      unsigned int v51 = *(_DWORD *)(v37 + 8);
      uint64_t v7 = v541;
      if (v51)
      {
        uint64_t v52 = v533;
        LODWORD(v33) = *(_DWORD *)(v533 + 20);
        HIDWORD(v34) = 1079574528;
        double v53 = (double)*(unint64_t *)&v33 / (double)v51 * 100.0;
        *(double *)&void v12[2] = v53;
      }
      else
      {
        double v53 = *(double *)&v12[2];
        uint64_t v52 = v533;
      }
      LODWORD(v34) = v12[12].i32[0];
      v12[3].i8[0] = v53 < 0.01;
      if (*(unsigned char *)(v52 + 737)) {
        BOOL v60 = 0;
      }
      else {
        BOOL v60 = *(unsigned char *)(v52 + 744) == 0;
      }
      int v61 = (int)(v28 * (double)*(unint64_t *)&v34);
      int v62 = *(_DWORD *)(v52 + 4);
      v12[4].i8[1] = v60;
      if (v25 != v61 || v12[18].i8[0])
      {
        __int32 v63 = 0;
        v12[4].i8[2] = 0;
      }
      else
      {
        if (v62) {
          BOOL v60 = 0;
        }
        if (v53 < 0.01) {
          BOOL v60 = 1;
        }
        v12[4].i8[2] = v60;
        if (v60) {
          __int32 v63 = v12[12].i32[1];
        }
        else {
          __int32 v63 = 0;
        }
      }
      int v64 = v61 - v63;
      v12[4].i32[1] = v64;
      v12[4].i8[0] = v64 <= v47;
      if (v64 <= v47)
      {
        v12[1].i8[0] = 0;
        *uint64_t v12 = 0;
        *uint64_t v26 = (double)v25;
        uint64_t v65 = v530;
        goto LABEL_76;
      }
    }
    else
    {
      BOOL HasDTXPacket = JitterQueue_HasDTXPacket(*(void *)(v37 + 36));
      uint64_t v7 = v541;
      if ((HasDTXPacket | JitterQueue_IsNextFrameDTX(*(void *)(v37 + 36))) == 1
        && (v12->i32[0] - 1) <= 1)
      {
        v12->i32[0] = 3;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v55 = VRTraceErrorLogLevelToCSTR();
          double v56 = *MEMORY[0x1E4F47A50];
          uint64_t v57 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              int v58 = *(_DWORD *)(v541 + 20);
              double v59 = *v26;
              *(_DWORD *)int buf = 136316418;
              uint64_t v551 = v55;
              __int16 v552 = 2080;
              v553 = "_VCAudioPlayer_PerformQueueGrowth";
              __int16 v554 = 1024;
              int v555 = 1310;
              __int16 v556 = 1024;
              *(_DWORD *)v557 = v58;
              *(_WORD *)&v557[4] = 1024;
              *(_DWORD *)&v557[6] = v36;
              *(_WORD *)&v557[10] = 2048;
              *(double *)&v557[12] = v59;
              _os_log_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Suspend queue growth audio frame %d queueSize %d AvgQsize %f", buf, 0x32u);
            }
          }
          else if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
          {
            int v384 = *(_DWORD *)(v541 + 20);
            double v385 = *v26;
            *(_DWORD *)int buf = 136316418;
            uint64_t v551 = v55;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_PerformQueueGrowth";
            __int16 v554 = 1024;
            int v555 = 1310;
            __int16 v556 = 1024;
            *(_DWORD *)v557 = v384;
            *(_WORD *)&v557[4] = 1024;
            *(_DWORD *)&v557[6] = v36;
            *(_WORD *)&v557[10] = 2048;
            *(double *)&v557[12] = v385;
            _os_log_debug_impl(&dword_1E1EA4000, v56, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Suspend queue growth audio frame %d queueSize %d AvgQsize %f", buf, 0x32u);
          }
        }
      }
      else
      {
        v12[4].i8[2] = 0;
        v12[4].i32[1] = 0;
        v12[4].i16[0] = 0;
        v12[5].i16[2] = 0;
      }
    }
    uint64_t v65 = v530;
    if (v12->i32[0] && v12->i32[0] != 3)
    {
      unint64_t v68 = 0;
      uint64_t v9 = v542;
      goto LABEL_85;
    }
LABEL_76:
    uint64_t v9 = v542;
    unint64_t v66 = JitterQueue_Pop(*(void *)(v542 + 36));
    unint64_t v68 = v66;
    BOOL v69 = v66 != 0;
    LODWORD(v545[1]) = v69 | (8 * (v66 == 0));
    *(unsigned char *)(v542 + 68) |= v69;
    if (v66 && !*(_DWORD *)v542 && *(_DWORD *)(v542 + 8) >= 6u)
    {
      uint64_t v70 = (*(_DWORD *)(v7 + 168) + *(_DWORD *)(v7 + 172));
      LODWORD(v67) = v12[12].i32[0];
      double v71 = (double)v67;
      double v72 = (double)(*(unsigned int *)(v66 + 12) - v70) / v71;
      if (v72 >= -*(double *)(v527 + 24)) {
        goto LABEL_506;
      }
      int v73 = *v511;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v74 = VRTraceErrorLogLevelToCSTR();
        uint64_t v75 = *MEMORY[0x1E4F47A50];
        double v76 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            double v77 = micro();
            int v78 = *(_DWORD *)(v68 + 12);
            int v80 = *(_DWORD *)(v7 + 168);
            int v79 = *(_DWORD *)(v7 + 172);
            uint64_t v81 = *(void *)(v542 + 28);
            int v82 = *(_DWORD *)(v68 + 1176);
            int v83 = *(unsigned __int16 *)(v68 + 10);
            *(_DWORD *)int buf = 136318210;
            uint64_t v551 = v74;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_DetectLateFrame";
            __int16 v554 = 1024;
            int v555 = 1336;
            __int16 v556 = 2048;
            *(double *)v557 = v77;
            *(_WORD *)&v557[8] = 2048;
            *(double *)&v557[10] = v72 * 1000.0;
            *(_WORD *)&v557[18] = 1024;
            *(_DWORD *)&v557[20] = v78;
            *(_WORD *)&v557[24] = 1024;
            *(_DWORD *)&v557[26] = v70;
            *(_WORD *)&v557[30] = 1024;
            *(_DWORD *)&v557[32] = v79;
            *(_WORD *)v558 = 1024;
            *(_DWORD *)&v558[2] = v80;
            *(_WORD *)&v558[6] = 1024;
            *(_DWORD *)&v558[8] = v78;
            *(_WORD *)v559 = 2048;
            *(void *)&v559[2] = v81;
            __int16 v560 = 1024;
            int v561 = v82;
            __int16 v562 = 1024;
            int v563 = v83;
            _os_log_impl(&dword_1E1EA4000, v75, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: backtrack: %.01fms (%u - %u,%u,%d,%u) (Jitter Size = %f) DTX %d Seq num %d", buf, 0x64u);
          }
        }
        else if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
        {
          double v402 = micro();
          int v403 = *(_DWORD *)(v68 + 12);
          int v405 = *(_DWORD *)(v7 + 168);
          int v404 = *(_DWORD *)(v7 + 172);
          uint64_t v406 = *(void *)(v542 + 28);
          int v407 = *(_DWORD *)(v68 + 1176);
          int v408 = *(unsigned __int16 *)(v68 + 10);
          *(_DWORD *)int buf = 136318210;
          uint64_t v551 = v74;
          __int16 v552 = 2080;
          v553 = "_VCAudioPlayer_DetectLateFrame";
          __int16 v554 = 1024;
          int v555 = 1336;
          __int16 v556 = 2048;
          *(double *)v557 = v402;
          *(_WORD *)&v557[8] = 2048;
          *(double *)&v557[10] = v72 * 1000.0;
          *(_WORD *)&v557[18] = 1024;
          *(_DWORD *)&v557[20] = v403;
          *(_WORD *)&v557[24] = 1024;
          *(_DWORD *)&v557[26] = v70;
          *(_WORD *)&v557[30] = 1024;
          *(_DWORD *)&v557[32] = v404;
          *(_WORD *)v558 = 1024;
          *(_DWORD *)&v558[2] = v405;
          *(_WORD *)&v558[6] = 1024;
          *(_DWORD *)&v558[8] = v403;
          *(_WORD *)v559 = 2048;
          *(void *)&v559[2] = v406;
          __int16 v560 = 1024;
          int v561 = v407;
          __int16 v562 = 1024;
          int v563 = v408;
          _os_log_debug_impl(&dword_1E1EA4000, v75, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: backtrack: %.01fms (%u - %u,%u,%d,%u) (Jitter Size = %f) DTX %d Seq num %d", buf, 0x64u);
        }
      }
      ++*(_DWORD *)(v533 + 24);
      _VCAudioPlayer_UpdatePacketLifeTimeCDF(v7, 0);
      int v363 = "played out";
      if (!v73) {
        int v363 = "dropped";
      }
      uint64_t v9 = v542;
      VRLogfilePrintSync(*(FILE ***)(v527 + 720), "Warning: Late packet %s. %.01fms (%u - %u %u %d %u) (Jitter Size = %f) DTX %d Seq num %d\n", v357, v358, v359, v360, v361, v362, (char)v363);
      if (!v73)
      {
        (*(void (**)(void, unint64_t))(v68 + 1200))(*(void *)(v68 + 1208), v68);
        goto LABEL_539;
      }
      uint64_t v65 = v530;
      if (!*(_DWORD *)v542)
      {
LABEL_506:
        if (*(_DWORD *)(v9 + 8) >= 6u)
        {
          LODWORD(v71) = v12[12].i32[0];
          double v364 = (double)(uint64_t)(*(unsigned int *)(v68 + 12)
                                 - (unint64_t)(*(_DWORD *)(v7 + 168) + *(_DWORD *)(v7 + 172)))
               / (double)*(unint64_t *)&v71;
          if (v364 > *(double *)(v527 + 24))
          {
            if (*(_DWORD *)(v7 + 12)
              && (v364 <= *(double *)(v9 + 44)
                ? (BOOL v365 = (unsigned __int16)(*(_WORD *)(v68 + 10) - *(_WORD *)(v7 + 20)) >= 2u)
                : (BOOL v365 = 0),
                  v365 && (unsigned __int16)(*(_WORD *)(v68 + 10) - *(_WORD *)(v7 + 20)) <= 0x7FFEu))
            {
              JitterQueue_Insert(*(void *)(v9 + 36), v68, 0);
              unint64_t v68 = 0;
              if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
                goto LABEL_85;
              }
              uint64_t v366 = VRTraceErrorLogLevelToCSTR();
              v367 = *MEMORY[0x1E4F47A50];
              v368 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v368, OS_LOG_TYPE_DEFAULT))
                {
                  double v369 = micro();
                  *(_DWORD *)int buf = 136316162;
                  uint64_t v551 = v366;
                  __int16 v552 = 2080;
                  v553 = "_VCAudioPlayer_HandleHoleDetection";
                  __int16 v554 = 1024;
                  int v555 = 1358;
                  __int16 v556 = 2048;
                  *(double *)v557 = v369;
                  *(_WORD *)&v557[8] = 2048;
                  *(double *)&v557[10] = v364 * 1000.0;
                  _os_log_impl(&dword_1E1EA4000, v367, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: silence: %.01fms", buf, 0x30u);
                }
              }
              else if (os_log_type_enabled(v368, OS_LOG_TYPE_DEBUG))
              {
                double v412 = micro();
                *(_DWORD *)int buf = 136316162;
                uint64_t v551 = v366;
                __int16 v552 = 2080;
                v553 = "_VCAudioPlayer_HandleHoleDetection";
                __int16 v554 = 1024;
                int v555 = 1358;
                __int16 v556 = 2048;
                *(double *)v557 = v412;
                *(_WORD *)&v557[8] = 2048;
                *(double *)&v557[10] = v364 * 1000.0;
                _os_log_debug_impl(&dword_1E1EA4000, v367, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: silence: %.01fms", buf, 0x30u);
              }
              unint64_t v68 = 0;
            }
            else
            {
              if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
                goto LABEL_85;
              }
              uint64_t v370 = VRTraceErrorLogLevelToCSTR();
              int v371 = *MEMORY[0x1E4F47A50];
              uint64_t v372 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v372, OS_LOG_TYPE_DEFAULT))
                {
                  double v373 = micro();
                  *(_DWORD *)int buf = 136316162;
                  uint64_t v551 = v370;
                  __int16 v552 = 2080;
                  v553 = "_VCAudioPlayer_HandleHoleDetection";
                  __int16 v554 = 1024;
                  int v555 = 1360;
                  __int16 v556 = 2048;
                  *(double *)v557 = v373;
                  *(_WORD *)&v557[8] = 2048;
                  *(double *)&v557[10] = v364 * 1000.0;
                  _os_log_impl(&dword_1E1EA4000, v371, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: jump: %.01fms", buf, 0x30u);
                }
              }
              else if (os_log_type_enabled(v372, OS_LOG_TYPE_DEBUG))
              {
                double v392 = micro();
                *(_DWORD *)int buf = 136316162;
                uint64_t v551 = v370;
                __int16 v552 = 2080;
                v553 = "_VCAudioPlayer_HandleHoleDetection";
                __int16 v554 = 1024;
                int v555 = 1360;
                __int16 v556 = 2048;
                *(double *)v557 = v392;
                *(_WORD *)&v557[8] = 2048;
                *(double *)&v557[10] = v364 * 1000.0;
                _os_log_debug_impl(&dword_1E1EA4000, v371, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: jump: %.01fms", buf, 0x30u);
              }
            }
            uint64_t v9 = v542;
          }
        }
      }
    }
LABEL_85:
    unint64_t v84 = v68 + 1272;
    LODWORD(v545[1]) |= 4 * (v68 != 0);
    unsigned int v85 = v12[13].i32[0] * *(_DWORD *)(v7 + 168);
    *(_DWORD *)(v7 + 164) = v85;
    _VCAudioPlayer_InitializePlaybackBuffer((unint64_t)&v545[3], v520, v85);
    if (!v68)
    {
      int v88 = *a2;
      int v89 = *(unsigned char **)(a4 + 56);
      if (v89) {
        *int v89 = 1;
      }
      int32x2_t v90 = v12[17];
      uint64_t v91 = v538;
      if (*(void *)&v90 && !*(_DWORD *)(*(void *)&v90 + 24))
      {
        int v93 = *(_DWORD *)(*(void *)&v90 + 20);
        int v92 = *(_DWORD *)(v7 + 168);
      }
      else
      {
        int v92 = *(_DWORD *)(v7 + 168);
        int v93 = v88 - v92;
      }
      LODWORD(v545[0]) = v93;
      if (v92 + v93 > *(_DWORD *)(v7 + 56))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v122 = VRTraceErrorLogLevelToCSTR();
          double v123 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315906;
            uint64_t v551 = v122;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_GetSilenceBufferSampleCount";
            __int16 v554 = 1024;
            int v555 = 1791;
            __int16 v556 = 1024;
            *(_DWORD *)v557 = v545[0];
            _os_log_impl(&dword_1E1EA4000, v123, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d  Decode Buffer Overflow, adding %d = >", buf, 0x22u);
          }
        }
        LODWORD(v545[0]) = *(_DWORD *)(v7 + 56) - *(_DWORD *)(v7 + 168);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v124 = VRTraceErrorLogLevelToCSTR();
          int v125 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315906;
            uint64_t v551 = v124;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_GetSilenceBufferSampleCount";
            __int16 v554 = 1024;
            int v555 = 1793;
            __int16 v556 = 1024;
            *(_DWORD *)v557 = v545[0];
            _os_log_impl(&dword_1E1EA4000, v125, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d  clipped to %d", buf, 0x22u);
          }
        }
        int v93 = v545[0];
        unint64_t v84 = v68 + 1272;
      }
      if (v93 < 1)
      {
        int v135 = 1;
LABEL_181:
        double v156 = (int *)v542;
        goto LABEL_355;
      }
      HIDWORD(v545[0]) = v12[13].i32[0] * v93 * v12[13].i32[1];
      if (v12[45].i32[1])
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v126 = VRTraceErrorLogLevelToCSTR();
          uint64_t v127 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v128 = *(void *)(v542 + 28);
            int v129 = *(_DWORD *)(v7 + 20) + 1;
            int v130 = *(_DWORD *)v542;
            *(_DWORD *)int buf = 136316418;
            uint64_t v551 = v126;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_UpdateSilenceDecodeMetrics";
            __int16 v554 = 1024;
            int v555 = 1818;
            __int16 v556 = 2048;
            *(void *)v557 = v128;
            *(_WORD *)&v557[8] = 1024;
            *(_DWORD *)&v557[10] = v129;
            *(_WORD *)&v557[14] = 1024;
            *(_DWORD *)&v557[16] = v130;
            _os_log_impl(&dword_1E1EA4000, v127, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Missing a packet %f [expected seq = %x] DTX[%d]", buf, 0x32u);
          }
        }
      }
      int v131 = *(_DWORD *)(v527 + 12) + *(_DWORD *)v542;
      ++*(_DWORD *)(v527 + 8);
      *(_DWORD *)(v527 + 12) = v131;
      int32x2_t v132 = v12[17];
      if (v132)
      {
        unint64_t v133 = *(void *)(*(void *)&v132 + 8);
        unint64_t v134 = v133 + 272;
      }
      else
      {
        unint64_t v134 = 0;
        unint64_t v133 = 0;
      }
      double v136 = 0.0;
      if (VRTraceIsInternalOSInstalled()) {
        double v136 = micro();
      }
      kdebug_trace();
      unint64_t v84 = v68 + 1272;
      if ((v545[0] & 0x8000000000000000) != 0 || v545[4] < SHIDWORD(v545[0]) || v133 && v133 >= v134) {
        goto LABEL_642;
      }
      int v137 = SoundDec_Decode(v133, 0, 0, (char *)v545[3], SHIDWORD(v545[0]), (int *)v545 + 1, LOBYTE(v545[2]));
      kdebug_trace();
      __int16 v145 = v543;
      if (v137 < 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v146 = VRTraceErrorLogLevelToCSTR();
          __int16 v147 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v386 = *(_DWORD *)v542;
            int v387 = *(_DWORD *)(v7 + 20);
            *(_DWORD *)int buf = 136317442;
            uint64_t v551 = v146;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_DecodeSilence";
            __int16 v554 = 1024;
            int v555 = 1916;
            __int16 v556 = 1024;
            *(_DWORD *)v557 = v137;
            *(_WORD *)&v557[4] = 1024;
            *(_DWORD *)&v557[6] = HIDWORD(v545[1]);
            *(_WORD *)&v557[10] = 1024;
            *(_DWORD *)&v557[12] = v545[1];
            *(_WORD *)&v557[16] = 1024;
            *(_DWORD *)&v557[18] = v386;
            *(_WORD *)&v557[22] = 1024;
            *(_DWORD *)&v557[24] = v387;
            *(_WORD *)&v557[28] = 1024;
            *(_DWORD *)&v557[30] = LOBYTE(v545[2]);
            *(_WORD *)&v557[34] = 1024;
            *(_DWORD *)v558 = v545[0];
            _os_log_error_impl(&dword_1E1EA4000, v147, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d nil SoundDec_Decode failed (%x). Previous payload=%d, history=%x, dtx=%d lastSeq=%x reset=%d sampleCount=%d", buf, 0x46u);
          }
        }
        _VCAudioPlayer_ResetPlaybackBuffer((unint64_t)&v545[3]);
        VRLogfilePrintSync(*(FILE ***)(v527 + 720), "Warning: Nil decoding failed\n", v148, v149, v150, v151, v152, v153, v504);
        uint64_t v65 = v530;
        unint64_t v84 = v68 + 1272;
      }
      LogProfileTimeOverLimit_3("SpkrProc: SoundDec_Decode", v136, 0.00300000003, v138, v139, v140, v141, v142, v143, v144, v504);
      _VCAudioPlayer_UpdateOpusDecodeFECStatus(v7, v133);
      HIDWORD(v545[0]) = v543[13].i32[0] * LODWORD(v545[0]);
      HIDWORD(v549) = HIDWORD(v545[0]);
      _VCAudioPlayer_CopyDecodedSamplesToInput((int *)&v545[3]);
      size_t v154 = *(unsigned __int8 *)(v7 + 50);
      if (*(unsigned char *)(v7 + 50))
      {
        if (v154 > 0x10) {
          goto LABEL_642;
        }
        bzero(__dst, v154);
        __int16 v145 = v543;
      }
      if (SHIDWORD(v545[0]) < 1)
      {
        int v135 = 0;
        goto LABEL_181;
      }
      int32x2_t v155 = v145[17];
      double v156 = (int *)v542;
      if (*(void *)&v155 && !*(_DWORD *)(*(void *)&v155 + 24))
      {
        int v157 = *(_DWORD *)(v7 + 4);
        if (v157)
        {
LABEL_497:
          int v135 = 0;
          *(_DWORD *)(v7 + 4) = v157 + 1;
          unint64_t v84 = v68 + 1272;
          goto LABEL_355;
        }
      }
      else
      {
        int v157 = *(_DWORD *)(v7 + 4);
        uint64_t v158 = LODWORD(v545[0]);
        if (v157)
        {
          if (SDWORD2(v549) >= 1)
          {
            unsigned __int8 v159 = 0;
            do
            {
              unsigned __int8 v160 = (void **)&v545[3 * v159 + 3];
              size_t v161 = (v543[13].i32[0] * v158);
              if ((unint64_t)v160[1] < v161) {
                goto LABEL_642;
              }
              bzero(*v160, v161);
              ++v159;
            }
            while (SDWORD2(v549) > v159);
            int v157 = *(_DWORD *)(v7 + 4);
          }
          goto LABEL_497;
        }
        float v280 = 1.0 / (float)SLODWORD(v545[0]);
        int v281 = DWORD2(v549);
        if (v145[14].i8[0])
        {
          if (SDWORD2(v549) >= 1)
          {
            unsigned __int8 v282 = 0;
            while ((int)v158 < 1)
            {
LABEL_322:
              if (v281 <= ++v282) {
                goto LABEL_496;
              }
            }
            unint64_t v283 = (float **)&v545[3 * v282 + 3];
            unint64_t v284 = *v283;
            unint64_t v285 = (unint64_t)v283[1] + (void)*v283;
            unsigned int v286 = v284;
            uint64_t v287 = v158;
            while ((unint64_t)v286 < v285 && v286 >= v284)
            {
              *unsigned int v286 = (float)(v280 * (float)(int)v287) * *v286;
              ++v286;
              if (!--v287) {
                goto LABEL_322;
              }
            }
            goto LABEL_642;
          }
        }
        else if (SDWORD2(v549) >= 1)
        {
          unsigned __int8 v348 = 0;
          while ((int)v158 < 1)
          {
LABEL_495:
            if (v281 <= ++v348) {
              goto LABEL_496;
            }
          }
          int v349 = (__int16 **)&v545[3 * v348 + 3];
          int v350 = *v349;
          unint64_t v351 = (unint64_t)v349[1] + (void)*v349;
          unsigned int v352 = v350;
          uint64_t v353 = v158;
          while ((unint64_t)v352 < v351 && v352 >= v350)
          {
            *unsigned int v352 = (int)(float)((float)(v280 * (float)(int)v353) * (float)*v352);
            ++v352;
            if (!--v353) {
              goto LABEL_495;
            }
          }
LABEL_642:
          __break(0x5519u);
        }
      }
LABEL_496:
      int v157 = 0;
      uint64_t v91 = v538 + 1;
      *(_DWORD *)(v7 + 436) += LODWORD(v545[0]);
      goto LABEL_497;
    }
    if (v68 >= v84) {
      goto LABEL_642;
    }
    int v86 = *(_DWORD *)(v68 + 12);
    int v87 = *(_DWORD *)v9;
    if (!*(_DWORD *)v9 || *(_DWORD *)(v68 + 1176))
    {
      if (v543[14].i8[0])
      {
        if (*(float *)(v7 + 792) >= 0.0058 || *(float *)(v7 + 796) >= 0.0058) {
          goto LABEL_106;
        }
      }
      else if (*(float *)(v7 + 784) >= 72.0 || *(float *)(v7 + 788) >= 72.0)
      {
        goto LABEL_106;
      }
      if (!*(_DWORD *)(v68 + 4)) {
        goto LABEL_106;
      }
    }
    if (*(int *)(v7 + 168) >= 1) {
      *(_DWORD *)(v7 + 168) = 0;
    }
    if (*(int *)(v7 + 304) >= 1)
    {
      *(_DWORD *)(v7 + 304) = 0;
      *a2 = v543[12].i32[1];
      *a3 = v543[12].i32[1];
      int v87 = *(_DWORD *)v9;
    }
    *(_DWORD *)(v9 + 52) = v86;
LABEL_106:
    int v94 = *(_DWORD *)(v68 + 1176);
    if (!v87 && v94) {
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(v68 + 12);
    }
    v523 = *(unsigned char **)(a4 + 56);
    unsigned int v95 = *(_DWORD *)(v68 + 1172);
    *(_DWORD *)uint64_t v9 = v94;
    uint64_t v96 = *(void *)(*(void *)(v68 + 1216) + 8);
    v545[0] = __PAIR64__(v543[13].i32[0] * v95 * v543[13].i32[1], v95);
    double v97 = 0.0;
    if (VRTraceIsInternalOSInstalled()) {
      double v97 = micro();
    }
    if ((int)VRTraceGetErrorLogLevelForModule() > 7)
    {
      uint64_t v98 = VRTraceErrorLogLevelToCSTR();
      uint64_t v99 = *MEMORY[0x1E4F47A50];
      int v100 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        {
          int v101 = *(_DWORD *)(v7 + 172);
          int v102 = *(_DWORD *)(v68 + 12);
          int v103 = *(_DWORD *)(v68 + 1176);
          int v104 = *(unsigned __int16 *)(v68 + 10);
          *(_DWORD *)int buf = 136316674;
          uint64_t v551 = v98;
          __int16 v552 = 2080;
          v553 = "_VCAudioPlayer_DecodeSpeech";
          __int16 v554 = 1024;
          int v555 = 1700;
          __int16 v556 = 1024;
          *(_DWORD *)v557 = v101;
          *(_WORD *)&v557[4] = 1024;
          *(_DWORD *)&v557[6] = v102;
          *(_WORD *)&v557[10] = 1024;
          *(_DWORD *)&v557[12] = v103;
          *(_WORD *)&v557[16] = 1024;
          *(_DWORD *)&v557[18] = v104;
          _os_log_impl(&dword_1E1EA4000, v99, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Decode : RequiredTimeStamp[%d] SelectedTimeStamp[%d] DTX[%d] seq[%d]", buf, 0x34u);
        }
      }
      else if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
      {
        int v374 = *(_DWORD *)(v7 + 172);
        int v375 = *(_DWORD *)(v68 + 12);
        int v376 = *(_DWORD *)(v68 + 1176);
        int v377 = *(unsigned __int16 *)(v68 + 10);
        *(_DWORD *)int buf = 136316674;
        uint64_t v551 = v98;
        __int16 v552 = 2080;
        v553 = "_VCAudioPlayer_DecodeSpeech";
        __int16 v554 = 1024;
        int v555 = 1700;
        __int16 v556 = 1024;
        *(_DWORD *)v557 = v374;
        *(_WORD *)&v557[4] = 1024;
        *(_DWORD *)&v557[6] = v375;
        *(_WORD *)&v557[10] = 1024;
        *(_DWORD *)&v557[12] = v376;
        *(_WORD *)&v557[16] = 1024;
        *(_DWORD *)&v557[18] = v377;
        _os_log_debug_impl(&dword_1E1EA4000, v99, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Decode : RequiredTimeStamp[%d] SelectedTimeStamp[%d] DTX[%d] seq[%d]", buf, 0x34u);
      }
    }
    uint64_t v105 = v7;
    int v106 = v545[1];
    int v107 = HIDWORD(v545[1]);
    uint64_t v108 = *(void *)(v68 + 1216);
    uint64_t v109 = *(void *)(v108 + 8);
    if (*(unsigned char *)(v105 + 28) || *(unsigned __int16 *)(v68 + 1234) != *(unsigned __int16 *)(v105 + 32))
    {
      SoundDec_Reset(*(void *)(v108 + 8));
      *(_WORD *)(v105 + 32) = *(_WORD *)(v68 + 1234);
      *(unsigned char *)(v105 + 28) = 0;
      uint64_t v108 = *(void *)(v68 + 1216);
    }
    if (*(_DWORD *)v108 != v107)
    {
      LOBYTE(v545[2]) = 1;
      if (v107 == 13)
      {
        uint64_t v114 = *(void *)(*(void *)&v543[17] + 8);
        uint64_t v115 = *(void *)(v541 + 536);
        int v544 = v115;
        if ((v115 & 0x80000000) != 0 || (int)v115 > v115) {
          goto LABEL_642;
        }
        int v116 = SoundDec_Decode(v114, 0, 0, *(char **)(v541 + 512), v115, &v544, 0);
        if (v116 < 0)
        {
          int v204 = v116;
          BOOL v113 = v538;
          if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          {
            __C = 0;
            unint64_t v513 = 0;
            unint64_t v514 = 0;
            uint64_t v110 = v541;
            int v111 = v543;
          }
          else
          {
            uint64_t v515 = VRTraceErrorLogLevelToCSTR();
            BOOL v205 = *MEMORY[0x1E4F47A50];
            int v111 = v543;
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
            {
              int v393 = **(_DWORD **)(v68 + 1216);
              int v394 = *(_DWORD *)(v541 + 20);
              int v395 = *(unsigned __int16 *)(v68 + 10);
              *(_DWORD *)int buf = 136317442;
              uint64_t v551 = v515;
              __int16 v552 = 2080;
              v553 = "_VCAudioPlayer_HandleComfortNoiseTransition";
              __int16 v554 = 1024;
              int v555 = 1624;
              __int16 v556 = 1024;
              *(_DWORD *)v557 = v204;
              *(_WORD *)&v557[4] = 1024;
              *(_DWORD *)&v557[6] = 13;
              *(_WORD *)&v557[10] = 1024;
              *(_DWORD *)&v557[12] = v393;
              *(_WORD *)&v557[16] = 1024;
              *(_DWORD *)&v557[18] = v106;
              uint64_t v110 = v541;
              *(_WORD *)&v557[22] = 1024;
              *(_DWORD *)&v557[24] = v394;
              *(_WORD *)&v557[28] = 1024;
              *(_DWORD *)&v557[30] = v395;
              *(_WORD *)&v557[34] = 1024;
              *(_DWORD *)v558 = LOBYTE(v545[2]);
              _os_log_error_impl(&dword_1E1EA4000, v205, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d nil decode for crossfade failed (%x). Previous payload=%d, payload=%d, history=%x lastSeq=%x seq=%d reset=%d", buf, 0x46u);
              __C = 0;
              unint64_t v513 = 0;
              unint64_t v514 = 0;
            }
            else
            {
              __C = 0;
              unint64_t v513 = 0;
              unint64_t v514 = 0;
              uint64_t v110 = v541;
            }
          }
          BOOL v112 = (int *)v542;
          goto LABEL_185;
        }
        __C = *(float **)(v541 + 512);
        unint64_t v513 = *(void *)(v541 + 536);
        unint64_t v514 = v544;
        uint64_t v110 = v541;
        int v111 = v543;
      }
      else
      {
        int v111 = v543;
        if (*(_DWORD *)v108 == 13)
        {
          SoundDec_Reset(v109);
          double v117 = *(void **)(v541 + 328);
          if (v117 && !*(void *)(v541 + 336)) {
            goto LABEL_642;
          }
          uint64_t v110 = v541;
          SoundDec_SetDTXPrimerSamples(v109, v117, v543[13].i32[0] * *(_DWORD *)(v541 + 320));
          BOOL v112 = (int *)v542;
          if (*(int *)(v541 + 424) >= 2)
          {
            unsigned __int8 v118 = 1;
            do
            {
              double v119 = &v529[3 * v118];
              size_t v120 = *(int *)(v541 + 428);
              if (*(void *)(v541 + 336) < v120 || (unint64_t)v119[1] < v120) {
                goto LABEL_642;
              }
              memcpy(*v119, *(const void **)(v541 + 328), v120);
            }
            while (*(_DWORD *)(v541 + 424) > (int)++v118);
          }
          __C = 0;
          unint64_t v513 = 0;
          unint64_t v514 = 0;
          LOBYTE(v545[2]) = 0;
          int v111 = v543;
          goto LABEL_184;
        }
        __C = 0;
        unint64_t v513 = 0;
        unint64_t v514 = 0;
        uint64_t v110 = v541;
      }
      BOOL v112 = (int *)v542;
LABEL_184:
      BOOL v113 = v538;
LABEL_185:
      v111[17] = *(int32x2_t *)(v68 + 1216);
      VCSilencePredictor_Reset(v507);
      goto LABEL_186;
    }
    __C = 0;
    unint64_t v513 = 0;
    unint64_t v514 = 0;
    uint64_t v110 = v541;
    int v111 = v543;
    BOOL v112 = (int *)v542;
    BOOL v113 = v538;
LABEL_186:
    if (*(unsigned char *)(v68 + 1224)) {
      SoundDec_SetEVSDecodeRF(v96, *(_DWORD *)(v68 + 1228));
    }
    kdebug_trace();
    v111[55].i32[1] = *(_DWORD *)(v68 + 1256);
    uint64_t v162 = *(void *)(v530 + 184);
    if (v162) {
      VCAudioDump_LogCompressedAudio(v162, (void *)(v68 + 16), *(_DWORD *)(v68 + 1144), (unsigned int *)(v68 + 12), (unsigned __int16 *)(v68 + 10), (double *)(v68 + 1184));
    }
    if ((v545[0] & 0x8000000000000000) != 0) {
      goto LABEL_642;
    }
    if (v545[4] < SHIDWORD(v545[0])) {
      goto LABEL_642;
    }
    unsigned int v163 = *(_DWORD *)(v68 + 1144);
    if (v163 > 0x465) {
      goto LABEL_642;
    }
    int v164 = SoundDec_Decode(v96, (const void *)(v68 + 16), v163, (char *)v545[3], SHIDWORD(v545[0]), (int *)v545 + 1, LOBYTE(v545[2]));
    kdebug_trace();
    LogProfileTimeOverLimit_3("SpkrProc: SoundDec_Decode", v97, 0.00300000003, v165, v166, v167, v168, v169, v170, v171, v504);
    *(_DWORD *)(v110 + 12) = 1;
    _VCAudioPlayer_UpdateOpusDecodeFECStatus(v110, v96);
    HIDWORD(v545[0]) = v111[13].i32[0] * LODWORD(v545[0]);
    HIDWORD(v549) = HIDWORD(v545[0]);
    _VCAudioPlayer_CopyDecodedSamplesToInput((int *)&v545[3]);
    if (v164 < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v178 = VRTraceErrorLogLevelToCSTR();
        unsigned int v179 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v378 = **(_DWORD **)(v68 + 1216);
          int v379 = *v112;
          int v380 = *(_DWORD *)(v110 + 20);
          int v381 = *(unsigned __int16 *)(v68 + 10);
          int v382 = *(_DWORD *)(v110 + 12);
          *(_DWORD *)int buf = 136317698;
          uint64_t v551 = v178;
          __int16 v552 = 2080;
          v553 = "_VCAudioPlayer_DecodeSpeech";
          __int16 v554 = 1024;
          int v555 = 1738;
          __int16 v556 = 1024;
          *(_DWORD *)v557 = v164;
          *(_WORD *)&v557[4] = 1024;
          *(_DWORD *)&v557[6] = HIDWORD(v545[1]);
          *(_WORD *)&v557[10] = 1024;
          *(_DWORD *)&v557[12] = v378;
          *(_WORD *)&v557[16] = 1024;
          *(_DWORD *)&v557[18] = v379;
          *(_WORD *)&v557[22] = 1024;
          *(_DWORD *)&v557[24] = v380;
          *(_WORD *)&v557[28] = 1024;
          *(_DWORD *)&v557[30] = v381;
          *(_WORD *)&v557[34] = 1024;
          *(_DWORD *)v558 = LOBYTE(v545[2]);
          *(_WORD *)&v558[4] = 1024;
          *(_DWORD *)&v558[6] = v382;
          _os_log_error_impl(&dword_1E1EA4000, v179, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d SoundDec_Decode failed (%x). Previous payload=%d, payload=%d, dtx=%d lastSeq=%x seq=%x reset=%d firstFrameDecoded=%d", buf, 0x4Cu);
        }
      }
      VRLogfilePrintSync(*(FILE ***)(v527 + 720), "Warning: Sound decoding failed. Timestamp=%d SeqNumber=%d DTX=%d\n", v172, v173, v174, v175, v176, v177, *(_DWORD *)(v68 + 12));
    }
    BOOL v539 = v113;
    unsigned int v180 = *(unsigned __int8 *)(v110 + 30);
    unsigned int v181 = *(unsigned __int8 *)(v68 + 1232);
    if (v180 <= v181) {
      LOBYTE(v180) = *(unsigned char *)(v68 + 1232);
    }
    *(unsigned char *)(v110 + 30) = v180;
    *(unsigned char *)(v110 + 29) = v181;
    *(_DWORD *)(v110 + 20) = *(unsigned __int16 *)(v68 + 10);
    *(_DWORD *)(v110 + 24) = *(_DWORD *)(v68 + 12);
    double v182 = (_DWORD *)v533;
    int v183 = *(_DWORD *)(v533 + 24) + JitterQueue_GetSpeechUnderflowCount(*(void *)(v112 + 9));
    *(_DWORD *)(v533 + 20) = v183;
    int v184 = *(_DWORD *)(v533 + 16);
    if (v111[20].u16[1] - 1 >= (v112[18] - *(_DWORD *)(v68 + 1192)) / v111[12].i32[1]) {
      unsigned int v185 = (v112[18] - *(_DWORD *)(v68 + 1192)) / v111[12].i32[1];
    }
    else {
      unsigned int v185 = v111[20].u16[1] - 1;
    }
    int v186 = *(_DWORD *)(v110 + 168);
    int v187 = *(_DWORD *)(v110 + 304);
    int v188 = VCTimescale_TailSize((uint64_t)v511);
    int v189 = *(_DWORD *)(v68 + 1176);
    if (!v189)
    {
      __int32 v190 = __N->i32[0];
      uint64_t v191 = (int64x2_t *)(v536 + 40 * __N->i32[0]);
      if (v536 > (unint64_t)v191 || &v191[2].u64[1] > (unint64_t *)__N) {
        goto LABEL_642;
      }
      *uint64_t v191 = vdupq_lane_s64(COERCE__INT64((float)((float)(v187+ v186+ v188+ *(_DWORD *)(v542 + 72)- *(_DWORD *)(v68 + 1192))/ (float)v543[12].u32[0])), 0);
      unint64_t v192 = v536 + 40 * v190;
      *(_DWORD *)(v192 + 16) = v183 - v184;
      *(_DWORD *)(v192 + 20) = v185;
      *(unsigned char *)(v192 + 24) = *(unsigned char *)(v68 + 8);
      double v182 = (_DWORD *)v533;
      *(_DWORD *)(v192 + 28) = *(_DWORD *)(v533 + 728);
      *(_DWORD *)(v192 + 32) = *(_DWORD *)(v68 + 1264);
    }
    int v193 = v182[5];
    v182[4] = v193;
    uint64_t v7 = v541;
    uint64_t v194 = v543;
    if ((v193 - v182[8]) > 5)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v195 = VRTraceErrorLogLevelToCSTR();
        double v196 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v354 = *(_DWORD *)(v533 + 20) - *(_DWORD *)(v533 + 32);
          int v355 = *(_DWORD *)(v68 + 12);
          int v356 = *(unsigned __int16 *)(v68 + 10);
          *(_DWORD *)int buf = 136316418;
          uint64_t v551 = v195;
          __int16 v552 = 2080;
          v553 = "_VCAudioPlayer_AddFrameToHistory";
          __int16 v554 = 1024;
          int v555 = 1560;
          __int16 v556 = 1024;
          *(_DWORD *)v557 = v354;
          *(_WORD *)&v557[4] = 1024;
          *(_DWORD *)&v557[6] = v355;
          *(_WORD *)&v557[10] = 1024;
          *(_DWORD *)&v557[12] = v356;
          _os_log_error_impl(&dword_1E1EA4000, v196, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Late packets played=%d currentTimestamp=%u currentSeqNum=%d", buf, 0x2Eu);
        }
      }
      *(_DWORD *)(v533 + 32) = *(_DWORD *)(v533 + 20);
    }
    if (!v189)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v197 = VRTraceErrorLogLevelToCSTR();
        uint64_t v198 = *MEMORY[0x1E4F47A50];
        int v199 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT))
          {
            __int32 v200 = __N->i32[0];
            unint64_t v201 = v536 + 40 * __N->i32[0];
            if (v201 >= (unint64_t)__N || v201 < v536) {
              goto LABEL_642;
            }
            unint64_t v202 = v536 + 40 * v200;
            uint64_t v203 = *(void *)(v202 + 8);
            LODWORD(v202) = *(_DWORD *)(v202 + 16);
            *(_DWORD *)int buf = 136316418;
            uint64_t v551 = v197;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_AddFrameToHistory";
            __int16 v554 = 1024;
            int v555 = 1565;
            __int16 v556 = 1024;
            *(_DWORD *)v557 = v200;
            *(_WORD *)&v557[4] = 2048;
            *(void *)&v557[6] = v203;
            *(_WORD *)&v557[14] = 1024;
            *(_DWORD *)&v557[16] = v202;
            _os_log_impl(&dword_1E1EA4000, v198, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d QueueSteering: Adding frame to history. Index=%d, packetLifeTime=%f, erasureCount=%d\n", buf, 0x32u);
          }
        }
        else if (os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG))
        {
          __int32 v388 = __N->i32[0];
          unint64_t v389 = v536 + 40 * __N->i32[0];
          if (v389 >= (unint64_t)__N || v389 < v536) {
            goto LABEL_642;
          }
          unint64_t v390 = v536 + 40 * v388;
          uint64_t v391 = *(void *)(v390 + 8);
          LODWORD(v390) = *(_DWORD *)(v390 + 16);
          *(_DWORD *)int buf = 136316418;
          uint64_t v551 = v197;
          __int16 v552 = 2080;
          v553 = "_VCAudioPlayer_AddFrameToHistory";
          __int16 v554 = 1024;
          int v555 = 1565;
          __int16 v556 = 1024;
          *(_DWORD *)v557 = v388;
          *(_WORD *)&v557[4] = 2048;
          *(void *)&v557[6] = v391;
          *(_WORD *)&v557[14] = 1024;
          *(_DWORD *)&v557[16] = v390;
          _os_log_debug_impl(&dword_1E1EA4000, v198, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d QueueSteering: Adding frame to history. Index=%d, packetLifeTime=%f, erasureCount=%d\n", buf, 0x32u);
        }
      }
      int v206 = *(_DWORD *)(v542 + 16096);
      unsigned int v207 = *(_DWORD *)(v542 + 16100);
      if (v206 + 1 < v207) {
        int v208 = v206 + 1;
      }
      else {
        int v208 = *(_DWORD *)(v542 + 16100);
      }
      *(_DWORD *)(v542 + 16096) = v208;
      *(_DWORD *)(v542 + 16092) = (*(_DWORD *)(v542 + 16092) + 1) % v207;
      *(_DWORD *)(v533 + 8) = *(_DWORD *)(v533 + 4);
      *(void *)uint64_t v533 = 0;
      *(void *)(v533 + 688) = 0xBFF0000000000000;
      *(_OWORD *)(v533 + 672) = v506;
      *(_OWORD *)unint64_t v13 = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      LODWORD(v209) = v208 - 1;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      if (v209 <= 1) {
        uint64_t v209 = 1;
      }
      else {
        uint64_t v209 = v209;
      }
      *(_OWORD *)(v13 + 128) = 0uLL;
      *(_OWORD *)(v13 + 144) = 0uLL;
      *(_OWORD *)(v13 + 160) = 0uLL;
      *(_OWORD *)(v13 + 176) = 0uLL;
      *(void *)(v13 + 192) = 0;
      int v210 = (int *)__N;
      unint64_t v211 = v536;
      if ((int)v209 >= 1)
      {
        unint64_t v212 = v536;
        uint64_t v213 = v209;
        while (v212 < (unint64_t)__N && v212 >= v536)
        {
          ++*(_DWORD *)(v13 + 4 * *(int *)(v212 + 20));
          v212 += 40;
          if (!--v213) {
            goto LABEL_234;
          }
        }
        goto LABEL_642;
      }
LABEL_234:
      if (v543[20].i16[1])
      {
        int v214 = 0;
        double v215 = (double)(int)v209;
        size_t v216 = (int *)v13;
        uint64_t v217 = 1;
        while (1)
        {
          int v218 = 0;
          double v219 = *(double *)&v194[21] * (double)v214;
          float v220 = v219;
          BOOL v221 = v216;
          uint64_t v222 = v217;
          do
          {
            if ((unint64_t)v221 >= v14 || (unint64_t)v221 < v13) {
              goto LABEL_642;
            }
            int v223 = *v221--;
            v218 += v223;
            BOOL v254 = v222-- <= 1;
          }
          while (!v254);
          double v224 = (double)v218 / v215;
          if (v224 >= 0.05 && *v532 == -1.0)
          {
            int v225 = 5;
            size_t v226 = v532;
          }
          else if (v224 >= 0.1 && *v531 == -1.0)
          {
            int v225 = 10;
            size_t v226 = v531;
          }
          else
          {
            if (v224 < 0.9 || (size_t v226 = v526, *v526 != -1.0))
            {
              int v225 = 0;
              goto LABEL_252;
            }
            int v225 = 90;
          }
          *size_t v226 = v219;
LABEL_252:
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v227 = VRTraceErrorLogLevelToCSTR();
            v228 = *MEMORY[0x1E4F47A50];
            uint64_t v229 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)int buf = 136316162;
                uint64_t v551 = v227;
                __int16 v552 = 2080;
                v553 = "_VCAudioPlayer_CalcPacketLifeTimeCDFs";
                __int16 v554 = 1024;
                int v555 = 1409;
                __int16 v556 = 1024;
                *(_DWORD *)v557 = v225;
                *(_WORD *)&v557[4] = 2048;
                *(double *)&v557[6] = v220;
                _os_log_impl(&dword_1E1EA4000, v228, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d QueueSteering: Packet Lifetime=%d percentile=%f", buf, 0x2Cu);
              }
            }
            else if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136316162;
              uint64_t v551 = v227;
              __int16 v552 = 2080;
              v553 = "_VCAudioPlayer_CalcPacketLifeTimeCDFs";
              __int16 v554 = 1024;
              int v555 = 1409;
              __int16 v556 = 1024;
              *(_DWORD *)v557 = v225;
              *(_WORD *)&v557[4] = 2048;
              *(double *)&v557[6] = v220;
              _os_log_debug_impl(&dword_1E1EA4000, v228, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d QueueSteering: Packet Lifetime=%d percentile=%f", buf, 0x2Cu);
            }
          }
          ++v214;
          uint64_t v194 = v543;
          ++v217;
          ++v216;
          int v210 = (int *)__N;
          unint64_t v211 = v536;
          if (v214 >= v543[20].u16[1])
          {
            double v230 = (double)v214;
            goto LABEL_261;
          }
        }
      }
      double v230 = 0.0;
LABEL_261:
      double v231 = *v526;
      double v232 = *v531;
      BOOL v233 = *v526 == -1.0 || v232 == -1.0;
      uint64_t v7 = v541;
      if (v233)
      {
        float v234 = v230 * *(double *)&v194[21];
        double v235 = *v532;
        double v236 = v234;
        if (*v532 == -1.0) {
          double v235 = v236;
        }
        double *v532 = v235;
        if (v232 == -1.0) {
          double v232 = v236;
        }
        double *v531 = v232;
        if (v231 == -1.0) {
          double v231 = v236;
        }
        double *v526 = v231;
      }
      int v237 = *v210;
      if (*v210 < 2) {
        int v237 = *(_DWORD *)(v542 + 16096);
      }
      int v238 = v237 - 1;
      if (v237 - 1 <= 400)
      {
        int v242 = *(_DWORD *)(v542 + 16096);
        if (v242 < 2)
        {
          int v246 = 0;
          float v269 = 0.0;
          uint64_t v261 = v533;
        }
        else
        {
          int v243 = 0;
          int v244 = 0;
          int v245 = 0;
          int v246 = 0;
          int v247 = 0;
          double v248 = 0.0;
          double v249 = 0.0;
          int v250 = v242 - 1;
          double v251 = 0.0;
          for (int i = 1; i != v242; ++i)
          {
            int v253 = (double *)(v211 + 40 * v238);
            BOOL v254 = v211 > (unint64_t)v253 || v253 + 5 > (double *)v210;
            if (v254) {
              goto LABEL_642;
            }
            int v255 = v238;
            int v256 = *(_DWORD *)(v211 + 40 * v238 + 16);
            *(_DWORD *)(v533 + 4) += v256;
            int v257 = v194[20].u16[0];
            double v258 = *v253;
            if (v243 < v257)
            {
              *(_DWORD *)v533 += v256;
              double v249 = v249 + v258;
              if (v258 <= *(double *)&v194[21]) {
                ++v245;
              }
              if (*(double *)&v194[22] <= *(float *)(v211 + 40 * v238 + 28)) {
                ++v247;
              }
              ++v243;
            }
            double v251 = v251 + v258;
            double v248 = fmax(v248, v258);
            unint64_t v259 = v211 + 40 * v238;
            v246 += *(unsigned __int8 *)(v259 + 24);
            int v260 = *(_DWORD *)(v259 + 32);
            if (v244 <= v260) {
              int v244 = v260;
            }
            if (v238 < 1) {
              int v255 = v242;
            }
            int v238 = v255 - 1;
          }
          uint64_t v261 = v533;
          if (v243)
          {
            *(_DWORD *)(v533 + 724) = v245;
            double v262 = v249 / (double)v243;
            *(double *)(v533 + 696) = v262;
            *(_DWORD *)(v533 + 732) = v247;
            uint64_t v263 = *(int *)(v533 + 664);
            BOOL v264 = (double *)(v14 + 8 * v263);
            if ((unint64_t)v264 >= v505 || (unint64_t)v264 < v14) {
              goto LABEL_642;
            }
            *BOOL v264 = v262;
            int v265 = (double *)(v14 + 8 * ((v257 + (int)v263 - 1) % v257));
            if ((unint64_t)v265 >= v505 || (unint64_t)v265 < v14) {
              goto LABEL_642;
            }
            double v267 = *v265;
            double v268 = *(double *)(v533 + 56);
            *(unsigned char *)(v533 + 720) = *v265 * *(double *)(v533 + 48) < v262;
            *(unsigned char *)(v533 + 721) = v267 * v268 > v262;
            *(_DWORD *)(v533 + 664) = ((int)v263 + 1) % v257;
          }
          *(_DWORD *)(v533 + 28) = v246;
          *(_DWORD *)(v533 + 36) = v244;
          *(double *)(v533 + 40) = (double)v246 / (double)v250;
          *(double *)(v533 + 704) = v251 / (double)v250;
          *(double *)(v533 + 712) = v248;
          float v269 = (float)v244;
        }
        unsigned int v270 = v194[12].u32[0];
        if (v270) {
          *(float *)&v194[32].i32[1] = fmaxf(*(float *)&v194[32].i32[1], v269 / (float)v270);
        }
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v271 = VRTraceErrorLogLevelToCSTR();
          uint64_t v272 = *MEMORY[0x1E4F47A50];
          uint64_t v273 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v274 = *(void *)(v261 + 696);
              int v275 = *(_DWORD *)v261;
              int v276 = *(_DWORD *)(v261 + 36);
              uint64_t v277 = *(void *)(v261 + 40);
              int32x2_t v278 = v194[10];
              uint64_t v279 = *(void *)(v261 + 784);
              *(_DWORD *)int buf = 136317442;
              uint64_t v551 = v271;
              __int16 v552 = 2080;
              v553 = "_VCAudioPlayer_CalculateQueueSteeringKPIs";
              __int16 v554 = 1024;
              int v555 = 1517;
              __int16 v556 = 2048;
              *(void *)v557 = v274;
              *(_WORD *)&v557[8] = 1024;
              *(_DWORD *)&v557[10] = v275;
              *(_WORD *)&v557[14] = 1024;
              *(_DWORD *)&v557[16] = v246;
              *(_WORD *)&v557[20] = 1024;
              *(_DWORD *)&v557[22] = v276;
              *(_WORD *)&v557[26] = 2048;
              *(void *)&v557[28] = v277;
              *(_WORD *)v558 = 2048;
              *(int32x2_t *)&v558[2] = v278;
              *(_WORD *)&v558[10] = 2048;
              *(void *)v559 = v279;
              _os_log_impl(&dword_1E1EA4000, v272, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d QueueSteering: packetLifeTimeAvg=%f, frameErasurecount=%u countOfRedFrames=%d, redFrameDelayInSamples=%d redRecoveryRate=%f targetBoostingInSec=%f, currentTargetQueueSize=%f\n", buf, 0x56u);
            }
          }
          else if (os_log_type_enabled(v273, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v396 = *(void *)(v261 + 696);
            int v397 = *(_DWORD *)v261;
            int v398 = *(_DWORD *)(v261 + 36);
            uint64_t v399 = *(void *)(v261 + 40);
            int32x2_t v400 = v194[10];
            uint64_t v401 = *(void *)(v261 + 784);
            *(_DWORD *)int buf = 136317442;
            uint64_t v551 = v271;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_CalculateQueueSteeringKPIs";
            __int16 v554 = 1024;
            int v555 = 1517;
            __int16 v556 = 2048;
            *(void *)v557 = v396;
            *(_WORD *)&v557[8] = 1024;
            *(_DWORD *)&v557[10] = v397;
            *(_WORD *)&v557[14] = 1024;
            *(_DWORD *)&v557[16] = v246;
            *(_WORD *)&v557[20] = 1024;
            *(_DWORD *)&v557[22] = v398;
            *(_WORD *)&v557[26] = 2048;
            *(void *)&v557[28] = v399;
            *(_WORD *)v558 = 2048;
            *(int32x2_t *)&v558[2] = v400;
            *(_WORD *)&v558[10] = 2048;
            *(void *)v559 = v401;
            _os_log_debug_impl(&dword_1E1EA4000, v272, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d QueueSteering: packetLifeTimeAvg=%f, frameErasurecount=%u countOfRedFrames=%d, redFrameDelayInSamples=%d redRecoveryRate=%f targetBoostingInSec=%f, currentTargetQueueSize=%f\n", buf, 0x56u);
          }
        }
        v194[54] = vrev64_s32((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v261 + 704)));
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v239 = VRTraceErrorLogLevelToCSTR();
        v240 = *MEMORY[0x1E4F47A50];
        double v241 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v241, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136316162;
            uint64_t v551 = v239;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_CalculateQueueSteeringKPIs";
            __int16 v554 = 1024;
            int v555 = 1478;
            __int16 v556 = 1024;
            *(_DWORD *)v557 = v238;
            *(_WORD *)&v557[4] = 1024;
            *(_DWORD *)&v557[6] = 400;
            _os_log_impl(&dword_1E1EA4000, v240, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Index=%d is out of bounds compared to packet lifetime history=%d", buf, 0x28u);
          }
        }
        else if (os_log_type_enabled(v241, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136316162;
          uint64_t v551 = v239;
          __int16 v552 = 2080;
          v553 = "_VCAudioPlayer_CalculateQueueSteeringKPIs";
          __int16 v554 = 1024;
          int v555 = 1478;
          __int16 v556 = 1024;
          *(_DWORD *)v557 = v238;
          *(_WORD *)&v557[4] = 1024;
          *(_DWORD *)&v557[6] = 400;
          _os_log_debug_impl(&dword_1E1EA4000, v240, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Index=%d is out of bounds compared to packet lifetime history=%d", buf, 0x28u);
        }
      }
    }
    JitterQueue_SetLastDecodedFrameTimestamp(*(void *)(v542 + 36), *(_DWORD *)(v7 + 24));
    if (LOBYTE(v545[2]))
    {
      if (v194[13].i32[1] == 1)
      {
        if (v545[4] < (unint64_t)SHIDWORD(v545[0]) || v514 > v513) {
          goto LABEL_642;
        }
        Crossfade_Apply(v524, __C, v514, (float *)v545[3], SHIDWORD(v545[0]));
        if (*(unsigned char *)(v7 + 440))
        {
          unsigned __int32 v288 = v194[13].u32[0];
          if (v288) {
            _VCAudioPlayer_SimulateCrossFade((float *)v7, 0, (uint64_t)&v545[3], HIDWORD(v545[0]) / v288);
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v289 = VRTraceErrorLogLevelToCSTR();
        v290 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          __int32 v383 = v194[13].i32[1];
          *(_DWORD *)int buf = 136315906;
          uint64_t v551 = v289;
          __int16 v552 = 2080;
          v553 = "_VCAudioPlayer_CrossFade";
          __int16 v554 = 1024;
          int v555 = 1666;
          __int16 v556 = 1024;
          *(_DWORD *)v557 = v383;
          _os_log_error_impl(&dword_1E1EA4000, v290, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Attempting to cross-fade with non-mono channels=%u", buf, 0x22u);
        }
      }
    }
    *(unsigned char *)(v7 + 176) = 1;
    int v291 = *(_DWORD *)(v68 + 12);
    *(_DWORD *)(v7 + 172) = v291 - *(_DWORD *)(v7 + 168);
    *(_DWORD *)(v7 + 436) = LODWORD(v545[0]) + v291;
    size_t v292 = *(unsigned __int8 *)(v68 + 1168);
    double v156 = (int *)v542;
    if (v292 > 0x10) {
      goto LABEL_642;
    }
    memcpy(__dst, (const void *)(v68 + 1152), v292);
    *(unsigned char *)(v7 + 50) = *(unsigned char *)(v68 + 1168);
    uint64_t v65 = v530;
    unint64_t v84 = v68 + 1272;
    if (*(_DWORD *)(v7 + 4) && SHIDWORD(v545[0]) >= 1)
    {
      if (*(_DWORD *)(*(void *)(v68 + 1216) + 24))
      {
        unsigned __int32 v293 = v194[13].u32[0];
        if (v293) {
          _VCAudioPlayer_Sample_RampUp(v7, (uint64_t)&v545[3], HIDWORD(v545[0]) / v293);
        }
      }
      *(_DWORD *)(v7 + 4) = 0;
    }
    if (v523) {
      unsigned char *v523 = 0;
    }
    v294 = (_WORD *)(v510 + 2 * (unsigned __int16)*v525);
    if (v294 >= v525 || (unint64_t)v294 < v510) {
      goto LABEL_642;
    }
    int v135 = 0;
    uint64_t v91 = (v539 + 1);
    _WORD *v294 = *(_WORD *)(v68 + 10);
    _WORD *v525 = *v525 + 1 - 320 * ((13421773 * (unint64_t)((unsigned __int16)*v525 + 1)) >> 32);
LABEL_355:
    BOOL v538 = v91;
    uint64_t v295 = *(void *)(v65 + 192);
    if (v295)
    {
      if (v545[3] && !v545[4]) {
        goto LABEL_642;
      }
      VCAudioDump_LogUnCompressedAudio(v295, (void *)v545[3], 0, HIDWORD(v545[0]));
    }
    if (v135) {
      break;
    }
    if (v68 && v68 >= v84) {
      goto LABEL_642;
    }
    int v296 = *(_DWORD *)(v527 + 4);
    int v297 = *v156;
    if (!*v156) {
      ++v296;
    }
    ++*(_DWORD *)v527;
    *(_DWORD *)(v527 + 4) = v296;
    ++v543[28].i32[0];
    if (v68)
    {
      if (*(_DWORD *)(v68 + 1176))
      {
        int v298 = 0;
        unint64_t v299 = v519;
LABEL_381:
        v543[28].i32[1] += v298;
        ++v543[39].i32[0];
        if (*(_DWORD *)(v68 + 12) < *(_DWORD *)(v65 + 220) || *(unsigned __int8 *)(v68 + 1232) < 2u)
        {
          int v300 = 0;
          int v301 = 0;
        }
        else
        {
          int v300 = 0;
          int v301 = 0;
          *(unsigned char *)(v65 + 216) = 0;
        }
        goto LABEL_385;
      }
      unint64_t v299 = v519;
      if (v543[14].i8[0])
      {
        if (*(float *)(v7 + 792) < 0.0058)
        {
          _NF = *(float *)(v7 + 796) < 0.0058;
          goto LABEL_376;
        }
      }
      else if (*(float *)(v7 + 784) < 72.0)
      {
        _NF = *(float *)(v7 + 788) < 72.0;
LABEL_376:
        int v303 = _NF;
        goto LABEL_380;
      }
      int v303 = 0;
LABEL_380:
      int v298 = v303 ^ 1;
      goto LABEL_381;
    }
    int v300 = 0;
    ++v543[39].i32[0];
    if (*((unsigned char *)v156 + 68))
    {
      unint64_t v299 = v519;
      if ((v545[1] & 8) != 0)
      {
        int v301 = 0;
        if (!v297)
        {
          int v301 = *(unsigned char *)(v65 + 216) == 0;
          int v300 = 1;
        }
      }
      else
      {
        int v301 = 0;
      }
    }
    else
    {
      int v301 = 0;
      unint64_t v299 = v519;
    }
LABEL_385:
    if (v543[14].i8[0])
    {
      if (*(float *)(v7 + 792) >= 0.0058) {
        goto LABEL_396;
      }
      BOOL v304 = *(float *)(v7 + 796) < 0.0058;
    }
    else
    {
      if (*(float *)(v7 + 784) >= 72.0)
      {
LABEL_396:
        int v305 = 0;
        if (!v300) {
          goto LABEL_394;
        }
        goto LABEL_397;
      }
      BOOL v304 = *(float *)(v7 + 788) < 72.0;
    }
    int v305 = v304;
    if (!v300)
    {
LABEL_394:
      v543[48].i8[4] = 0;
      v543[47].i32[1] = 0;
      if (!v301) {
        goto LABEL_395;
      }
      goto LABEL_400;
    }
LABEL_397:
    v543[48].i8[4] = 1;
    __int32 v307 = v543[47].i32[1];
    v543[47].i32[1] = v307 + 1;
    if (v307 >= v543[32].i32[0]) {
      v543[32].i32[0] = v307 + 1;
    }
    v543[46].i8[0] = 0;
    ++v543[30].i32[0];
    ++v543[39].i32[1];
    if (!v301)
    {
LABEL_395:
      char v306 = 0;
      goto LABEL_401;
    }
LABEL_400:
    int v301 = v543[48].i32[0] + 1;
    ++v543[30].i32[1];
    char v306 = 1;
LABEL_401:
    v543[48].i8[5] = v306;
    v543[48].i32[0] = v301;
    unsigned int v308 = v543[47].u32[0];
    unsigned int v309 = v308 % 5;
    if ((v300 ^ 1 | v305))
    {
      v310 = (unsigned char *)(v299 + v309);
      if ((unint64_t)v310 >= v518 || (unint64_t)v310 < v299) {
        goto LABEL_642;
      }
      unsigned char *v310 = 0;
      if (v68) {
        goto LABEL_409;
      }
    }
    else
    {
      v543[46].i8[0] = 1;
      ++v543[40].i32[1];
      ++v543[31].i32[0];
      v311 = (unsigned char *)(v299 + v309);
      if ((unint64_t)v311 >= v518 || (unint64_t)v311 < v299) {
        goto LABEL_642;
      }
      unsigned char *v311 = 1;
      if (v68)
      {
LABEL_409:
        if (*(unsigned char *)(v68 + 8))
        {
          v312.i32[1] = 1;
          v312.i32[0] = *(_DWORD *)(v68 + 1144);
          v543[27] = vadd_s32(v543[27], v312);
        }
      }
    }
    if (v305) {
      ++v543[29].i32[0];
    }
    if (v68 && *(unsigned char *)(v68 + 1268)) {
      ++v543[29].i32[1];
    }
    if (v308 >= 5)
    {
      uint64_t v313 = 0;
      unsigned int v314 = 0;
      do
        v314 += *(unsigned __int8 *)(v299 + v313++);
      while (v313 != 5);
      if (v314 > 2) {
        ++v543[31].i32[1];
      }
    }
    v543[47].i32[0] = v308 + 1;
    *(_DWORD *)(v65 + 48) = v543[12].i32[1] * v91;
    if (v68)
    {
      *(_WORD *)uint64_t v65 = *(_WORD *)(v68 + 10);
      *(unsigned char *)(v65 + 8) = *(_DWORD *)(v68 + 1176) != 0;
      int v315 = *(_DWORD *)(v68 + 1144);
      *(_DWORD *)(v65 + 12) = v315;
      *(_DWORD *)(v65 + 4) = *(_DWORD *)(v68 + 12);
      int v316 = *(_DWORD *)(v68 + 1196);
      *(_DWORD *)(v65 + 20) = v316;
      *(unsigned char *)(v65 + 16) = *(unsigned char *)(v68 + 8);
      char v317 = *(unsigned char *)(v68 + 1268);
      *(unsigned char *)(v65 + 9) = v317;
      *(_DWORD *)(v65 + 164) = *(_DWORD *)(v68 + 1256);
      *(_WORD *)(v65 + 168) = v315;
      *(_WORD *)(v65 + 160) = v316;
      *(unsigned char *)(v65 + 178) = *(unsigned char *)(v68 + 1270);
      *(unsigned char *)(v65 + 179) = v317;
      *(unsigned char *)(v65 + 180) = *(unsigned char *)(v68 + 1269);
      uint64_t v318 = *(void *)(v68 + 1216);
      if (v318)
      {
        v319 = *(double **)(v318 + 8);
        if (v319) {
          *(_WORD *)(v65 + 176) = (int)*v319;
        }
      }
      (*(void (**)(void, unint64_t))(v68 + 1200))(*(void *)(v68 + 1208), v68);
    }
    else
    {
      *(_WORD *)uint64_t v65 = 0;
      *(_DWORD *)(v65 + 4) = 0;
      *(_WORD *)(v65 + 168) = 0;
    }
    int v320 = v543[13].i32[0] * *(_DWORD *)(v7 + 320);
    int v321 = HIDWORD(v545[0]) - v320;
    if (SHIDWORD(v545[0]) <= v320)
    {
      int v321 = 0;
      int v320 = HIDWORD(v545[0]);
    }
    _VCAudioPlayer_CopyPlaybackBuffer(v529, (unint64_t)&v545[3], v321, v320);
    unsigned __int32 v322 = v543[13].u32[0];
    if (v322)
    {
      *(_DWORD *)(v7 + 168) += HIDWORD(v545[0]) / v322;
      if (v91) {
        goto LABEL_435;
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3
        || (uint64_t v323 = VRTraceErrorLogLevelToCSTR(),
            v324 = *MEMORY[0x1E4F47A50],
            !os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)))
      {
        if (!v91) {
          goto LABEL_436;
        }
LABEL_435:
        *(_DWORD *)(v7 + 184) = *(_DWORD *)(v7 + 168);
        goto LABEL_436;
      }
      *(_DWORD *)int buf = 136315650;
      uint64_t v551 = v323;
      __int16 v552 = 2080;
      v553 = "_VCAudioPlayer_PerformPostDecodeActions";
      __int16 v554 = 1024;
      int v555 = 2000;
      _os_log_error_impl(&dword_1E1EA4000, v324, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d bytesPerFrame is zero while calculating input samples", buf, 0x1Cu);
      if (v91) {
        goto LABEL_435;
      }
    }
LABEL_436:
    int v325 = HIDWORD(v545[0]);
    uint64_t v9 = v542;
    if (SHIDWORD(v545[0]) >= 2 * v543[13].i32[0])
    {
      *(unsigned char *)(v7 + 440) = 1;
      int v326 = v543[14].u8[0];
      if (v543[14].i8[0]) {
        int v327 = 7;
      }
      else {
        int v327 = 3;
      }
      if (v327 >= v325)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v409 = VRTraceErrorLogLevelToCSTR();
          v410 = *MEMORY[0x1E4F47A50];
          v411 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v411, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int buf = 136315906;
              uint64_t v551 = v409;
              __int16 v552 = 2080;
              v553 = "_VCAudioPlayer_FillDecodedSamplesForCrossFade";
              __int16 v554 = 1024;
              int v555 = 1061;
              __int16 v556 = 1024;
              *(_DWORD *)v557 = v325;
              _os_log_impl(&dword_1E1EA4000, v410, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Not able to store the last two decoded samples for crossfade. bytesOut=%d", buf, 0x22u);
            }
          }
          else if (os_log_type_enabled(v411, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136315906;
            uint64_t v551 = v409;
            __int16 v552 = 2080;
            v553 = "_VCAudioPlayer_FillDecodedSamplesForCrossFade";
            __int16 v554 = 1024;
            int v555 = 1061;
            __int16 v556 = 1024;
            *(_DWORD *)v557 = v325;
            _os_log_debug_impl(&dword_1E1EA4000, v410, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Not able to store the last two decoded samples for crossfade. bytesOut=%d", buf, 0x22u);
          }
          uint64_t v12 = v543;
          uint64_t v9 = v542;
          goto LABEL_539;
        }
      }
      else
      {
        int v328 = DWORD2(v549);
        if (SDWORD2(v549) >= 1)
        {
          unsigned __int8 v329 = 0;
          uint64_t v330 = v325;
          uint64_t v12 = v543;
          while (1)
          {
            uint64_t v331 = &v545[3 * v329 + 3];
            if (v331 < &v545[3] || v331 + 3 > (unint64_t *)&v549 + 1) {
              goto LABEL_642;
            }
            unint64_t v333 = *v331;
            if (v333)
            {
              unint64_t v334 = v333 + v545[3 * v329 + 4];
              uint64_t v335 = v333 + v330;
              if (v326)
              {
                BOOL v336 = v335 - 8 < v334 && v335 - 8 >= v333;
                int v337 = (_DWORD *)(v517 + 16 * v329);
                if (!v336 || (unint64_t)v337 >= v524 || (unint64_t)v337 < v517) {
                  goto LABEL_642;
                }
                v337[1] = *(_DWORD *)(v335 - 8);
                v340 = (_DWORD *)(v335 - 4);
                if ((unint64_t)v340 >= v334 || (unint64_t)v340 < v333) {
                  goto LABEL_642;
                }
                *int v337 = *v340;
              }
              else
              {
                BOOL v342 = v335 - 4 < v334 && v335 - 4 >= v333;
                int v343 = (_WORD *)(v517 + 16 * v329);
                if (!v342 || (unint64_t)v343 >= v524 || (unint64_t)v343 < v517) {
                  goto LABEL_642;
                }
                v343[2] = *(_WORD *)(v335 - 4);
                unint64_t v346 = (_WORD *)(v335 - 2);
                if ((unint64_t)v346 >= v334 || (unint64_t)v346 < v333) {
                  goto LABEL_642;
                }
                *int v343 = *v346;
              }
            }
            if (v328 <= ++v329) {
              goto LABEL_539;
            }
          }
        }
      }
      uint64_t v12 = v543;
    }
    else
    {
      *(unsigned char *)(v7 + 440) = 0;
      uint64_t v12 = v543;
    }
LABEL_539:
    if (*(_DWORD *)(v7 + 168) >= *a2) {
      goto LABEL_551;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v416 = VRTraceErrorLogLevelToCSTR();
    v417 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315906;
      uint64_t v551 = v416;
      __int16 v552 = 2080;
      v553 = "_VCAudioPlayer_DecodeSamples";
      __int16 v554 = 1024;
      int v555 = 2250;
      __int16 v556 = 1024;
      *(_DWORD *)v557 = v545[0];
      _os_log_impl(&dword_1E1EA4000, v417, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d  sampleCount<=0 breaking loop %d", buf, 0x22u);
    }
  }
LABEL_550:
  uint64_t v12 = v543;
LABEL_551:
  int IsInternalOSInstalled = VRTraceIsInternalOSInstalled();
  int v419 = *a2;
  if (IsInternalOSInstalled)
  {
    BOOL v420 = v538;
    if (v419 < 0 || v419 > *(_DWORD *)(v7 + 56) || *a3 > *(_DWORD *)(v7 + 168))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v427 = VRTraceErrorLogLevelToCSTR();
        v428 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v497 = *a2;
          int v498 = *a3;
          uint64_t v499 = *(void *)(v7 + 64);
          int v500 = *(_DWORD *)(v7 + 168);
          LODWORD(v545[0]) = 136316930;
          *(void *)((char *)v545 + 4) = v427;
          WORD2(v545[1]) = 2080;
          *(void *)((char *)&v545[1] + 6) = "_VCAudioPlayer_DecodeSamples";
          HIWORD(v545[2]) = 1024;
          LODWORD(v545[3]) = 2268;
          WORD2(v545[3]) = 1024;
          *(_DWORD *)((char *)&v545[3] + 6) = v497;
          WORD1(v545[4]) = 1024;
          HIDWORD(v545[4]) = v498;
          LOWORD(v545[5]) = 2048;
          *(void *)((char *)&v545[5] + 2) = v499;
          WORD1(v545[6]) = 1024;
          HIDWORD(v545[6]) = v500;
          LOWORD(v545[7]) = 1024;
          *(_DWORD *)((char *)&v545[7] + 2) = v538;
          _os_log_error_impl(&dword_1E1EA4000, v428, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Invalid samplesToDecode=%d, samplesNeed=%d, inputBuffer.playbackBuffer=%p, inputBuffer.samples=%d, decoded=%d", (uint8_t *)v545, 0x3Eu);
        }
      }
      VRLogfilePrintSync(*(FILE ***)(v527 + 720), "Critical: Invalid samplesToDecode=%d samplesNeed=%d, inputBuffer.playbackBuffer=%p, inputBuffer.samples=%d, decoded=%d", v421, v422, v423, v424, v425, v426, *a2);
      VCTerminateProcess(@"Invalid samplesToDecode", @"_VCAudioPlayer_DecodeSamples", 0);
      int v419 = *a2;
    }
  }
  else
  {
    BOOL v420 = v538;
  }
  if (v419 >= 1)
  {
    uint64_t v537 = v7 + 64;
    float v429 = (float)v419 * 10.0 / (float)v12[12].u32[0];
    if (v429 <= 1.0) {
      float v430 = (float)v419 * 10.0 / (float)v12[12].u32[0];
    }
    else {
      float v430 = 1.0;
    }
    BOOL v540 = v420;
    if (v12[14].i8[0])
    {
      *(float *)(v7 + 800) = v430;
      *(void *)(v7 + 792) = 0;
      if (*(int *)(v7 + 160) >= 1)
      {
        int v431 = 0;
        unsigned __int8 v432 = 0;
        unint64_t v433 = v7 + 748;
        vDSP_Length __Na = v419;
        v434 = (float *)(v7 + 780);
        unint64_t v435 = v7 + 764;
        do
        {
          uint64_t v436 = v432;
          v437 = (float *)(v433 + 4 * v432);
          vDSP_rmsqv(*(const float **)(v537 + 24 * v432), 1, v437, __Na);
          BOOL v438 = (unint64_t)v437 < v435 && (unint64_t)v437 >= v433;
          BOOL v439 = v438;
          if (*(unsigned char *)v434)
          {
            if (!v439) {
              goto LABEL_642;
            }
            float v440 = *v437;
          }
          else
          {
            if (!v439) {
              goto LABEL_642;
            }
            float v440 = (float)(v430 * *v437) + *(float *)(v435 + 4 * v436) * (1.0 - v430);
          }
          *(float *)(v435 + 4 * v436) = v440;
          v441 = (float *)(v435 + 4 * v436);
          if (v441 >= v434 || (unint64_t)v441 < v435) {
            goto LABEL_642;
          }
          uint64_t v7 = v541;
          if (v440 <= *(float *)(v541 + 792)) {
            float v440 = *(float *)(v541 + 792);
          }
          *(float *)(v541 + 792) = v440;
          float v442 = *v437;
          if (*v437 <= *(float *)(v541 + 796)) {
            float v442 = *(float *)(v541 + 796);
          }
          *(float *)(v541 + 796) = v442;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v443 = VRTraceErrorLogLevelToCSTR();
            v444 = *MEMORY[0x1E4F47A50];
            v445 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              uint64_t v7 = v541;
              if (os_log_type_enabled(v445, OS_LOG_TYPE_DEFAULT))
              {
                int v446 = *(_DWORD *)(v541 + 20);
                double v447 = *v437;
                double v448 = *v441;
                LODWORD(v545[0]) = 136316674;
                *(void *)((char *)v545 + 4) = v443;
                WORD2(v545[1]) = 2080;
                *(void *)((char *)&v545[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelRMS";
                HIWORD(v545[2]) = 1024;
                LODWORD(v545[3]) = 980;
                WORD2(v545[3]) = 1024;
                *(_DWORD *)((char *)&v545[3] + 6) = v446;
                WORD1(v545[4]) = 2048;
                *(double *)((char *)&v545[4] + 4) = v447;
                WORD2(v545[5]) = 2048;
                *(double *)((char *)&v545[5] + 6) = v448;
                HIWORD(v545[6]) = 1024;
                LODWORD(v545[7]) = v431;
                _os_log_impl(&dword_1E1EA4000, v444, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] rms[%f] rmsAvg[%f] channel[%d]", (uint8_t *)v545, 0x3Cu);
              }
            }
            else
            {
              uint64_t v7 = v541;
              if (os_log_type_enabled(v445, OS_LOG_TYPE_DEBUG))
              {
                int v449 = *(_DWORD *)(v541 + 20);
                double v450 = *v437;
                double v451 = *v441;
                LODWORD(v545[0]) = 136316674;
                *(void *)((char *)v545 + 4) = v443;
                WORD2(v545[1]) = 2080;
                *(void *)((char *)&v545[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelRMS";
                HIWORD(v545[2]) = 1024;
                LODWORD(v545[3]) = 980;
                WORD2(v545[3]) = 1024;
                *(_DWORD *)((char *)&v545[3] + 6) = v449;
                WORD1(v545[4]) = 2048;
                *(double *)((char *)&v545[4] + 4) = v450;
                WORD2(v545[5]) = 2048;
                *(double *)((char *)&v545[5] + 6) = v451;
                HIWORD(v545[6]) = 1024;
                LODWORD(v545[7]) = v431;
                _os_log_debug_impl(&dword_1E1EA4000, v444, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] rms[%f] rmsAvg[%f] channel[%d]", (uint8_t *)v545, 0x3Cu);
              }
            }
          }
          unsigned __int8 v432 = v436 + 1;
          int v431 = (v436 + 1);
        }
        while (*(_DWORD *)(v7 + 160) > v431);
      }
      *(unsigned char *)(v7 + 780) = 0;
      BOOL v420 = v540;
      uint64_t v452 = v530;
      if ((int)VRTraceGetErrorLogLevelForModule() <= 7) {
        goto LABEL_624;
      }
      uint64_t v453 = VRTraceErrorLogLevelToCSTR();
      v454 = *MEMORY[0x1E4F47A50];
      v455 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v455, OS_LOG_TYPE_DEFAULT))
        {
          int v456 = *(_DWORD *)(v7 + 20);
          double v457 = *(float *)(v7 + 796);
          double v458 = *(float *)(v7 + 792);
          LODWORD(v545[0]) = 136316418;
          *(void *)((char *)v545 + 4) = v453;
          WORD2(v545[1]) = 2080;
          *(void *)((char *)&v545[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelRMS";
          HIWORD(v545[2]) = 1024;
          LODWORD(v545[3]) = 984;
          WORD2(v545[3]) = 1024;
          *(_DWORD *)((char *)&v545[3] + 6) = v456;
          WORD1(v545[4]) = 2048;
          *(double *)((char *)&v545[4] + 4) = v457;
          WORD2(v545[5]) = 2048;
          *(double *)((char *)&v545[5] + 6) = v458;
          v459 = "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energyInfo.rms[%f] energyInfo.RMSAvg[%f]";
          goto LABEL_620;
        }
        goto LABEL_624;
      }
      if (!os_log_type_enabled(v455, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_624;
      }
      int v488 = *(_DWORD *)(v7 + 20);
      double v489 = *(float *)(v7 + 796);
      double v490 = *(float *)(v7 + 792);
      LODWORD(v545[0]) = 136316418;
      *(void *)((char *)v545 + 4) = v453;
      WORD2(v545[1]) = 2080;
      *(void *)((char *)&v545[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelRMS";
      HIWORD(v545[2]) = 1024;
      LODWORD(v545[3]) = 984;
      WORD2(v545[3]) = 1024;
      *(_DWORD *)((char *)&v545[3] + 6) = v488;
      WORD1(v545[4]) = 2048;
      *(double *)((char *)&v545[4] + 4) = v489;
      WORD2(v545[5]) = 2048;
      *(double *)((char *)&v545[5] + 6) = v490;
      v491 = "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energyInfo.rms[%f] energyInfo.RMSAvg[%f]";
LABEL_641:
      _os_log_debug_impl(&dword_1E1EA4000, v454, OS_LOG_TYPE_DEBUG, v491, (uint8_t *)v545, 0x36u);
      goto LABEL_624;
    }
    *(_DWORD *)int buf = 0;
    *(void *)(v7 + 784) = 0;
    if (*(int *)(v7 + 160) >= 1)
    {
      int v460 = 0;
      unsigned __int8 v461 = 0;
      unint64_t v462 = v7 + 716;
      unint64_t v463 = v7 + 732;
      do
      {
        uint64_t v464 = v461;
        uint64_t v465 = v537 + 24 * v461;
        v466 = *(__int16 **)v465;
        uint64_t v467 = *(void *)(v465 + 8);
        if (v466 && v467 == 0) {
          goto LABEL_642;
        }
        SVESQ_Q15_Portable(v466, v419, buf, 10);
        v469 = (float *)(v462 + 4 * v464);
        if ((unint64_t)v469 >= v463 || (unint64_t)v469 < v462) {
          goto LABEL_642;
        }
        float v470 = (float)*(unsigned int *)buf / (float)v419;
        float *v469 = v470;
        if (!*(unsigned char *)(v7 + 781)) {
          float v470 = (float)(v430 * v470) + *(float *)(v463 + 4 * v464) * (1.0 - v430);
        }
        *(float *)(v463 + 4 * v464) = v470;
        if (v470 <= *(float *)(v7 + 784)) {
          float v470 = *(float *)(v7 + 784);
        }
        *(float *)(v7 + 784) = v470;
        float v471 = *v469;
        if (*v469 <= *(float *)(v7 + 788)) {
          float v471 = *(float *)(v7 + 788);
        }
        *(float *)(v7 + 788) = v471;
        uint64_t v472 = v7;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v473 = VRTraceErrorLogLevelToCSTR();
          v474 = *MEMORY[0x1E4F47A50];
          v475 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            uint64_t v472 = v541;
            if (os_log_type_enabled(v475, OS_LOG_TYPE_DEFAULT))
            {
              int v476 = *(_DWORD *)(v541 + 20);
              double v477 = *v469;
              double v478 = *(float *)(v463 + 4 * v464);
              LODWORD(v545[0]) = 136316674;
              *(void *)((char *)v545 + 4) = v473;
              WORD2(v545[1]) = 2080;
              *(void *)((char *)&v545[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelAverageEnergy";
              HIWORD(v545[2]) = 1024;
              LODWORD(v545[3]) = 1011;
              WORD2(v545[3]) = 1024;
              *(_DWORD *)((char *)&v545[3] + 6) = v476;
              WORD1(v545[4]) = 2048;
              *(double *)((char *)&v545[4] + 4) = v477;
              WORD2(v545[5]) = 2048;
              *(double *)((char *)&v545[5] + 6) = v478;
              HIWORD(v545[6]) = 1024;
              LODWORD(v545[7]) = v460;
              _os_log_impl(&dword_1E1EA4000, v474, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energy[%f] energyInfo.energyAvg[%f] channel[%d]", (uint8_t *)v545, 0x3Cu);
            }
          }
          else
          {
            uint64_t v472 = v541;
            if (os_log_type_enabled(v475, OS_LOG_TYPE_DEBUG))
            {
              int v480 = *(_DWORD *)(v541 + 20);
              double v481 = *v469;
              double v482 = *(float *)(v463 + 4 * v464);
              LODWORD(v545[0]) = 136316674;
              *(void *)((char *)v545 + 4) = v473;
              WORD2(v545[1]) = 2080;
              *(void *)((char *)&v545[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelAverageEnergy";
              HIWORD(v545[2]) = 1024;
              LODWORD(v545[3]) = 1011;
              WORD2(v545[3]) = 1024;
              *(_DWORD *)((char *)&v545[3] + 6) = v480;
              WORD1(v545[4]) = 2048;
              *(double *)((char *)&v545[4] + 4) = v481;
              WORD2(v545[5]) = 2048;
              *(double *)((char *)&v545[5] + 6) = v482;
              HIWORD(v545[6]) = 1024;
              LODWORD(v545[7]) = v460;
              _os_log_debug_impl(&dword_1E1EA4000, v474, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energy[%f] energyInfo.energyAvg[%f] channel[%d]", (uint8_t *)v545, 0x3Cu);
            }
          }
        }
        unsigned __int8 v461 = v464 + 1;
        int v460 = (v464 + 1);
        int v479 = *(_DWORD *)(v472 + 160);
        uint64_t v7 = v472;
        BOOL v420 = v540;
      }
      while (v479 > v460);
    }
    *(unsigned char *)(v7 + 781) = 0;
    uint64_t v452 = v530;
    if ((int)VRTraceGetErrorLogLevelForModule() <= 7) {
      goto LABEL_624;
    }
    uint64_t v483 = VRTraceErrorLogLevelToCSTR();
    v454 = *MEMORY[0x1E4F47A50];
    v484 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40])
    {
      if (!os_log_type_enabled(v484, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_624;
      }
      int v501 = *(_DWORD *)(v7 + 20);
      double v502 = *(float *)(v7 + 788);
      double v503 = *(float *)(v7 + 784);
      LODWORD(v545[0]) = 136316418;
      *(void *)((char *)v545 + 4) = v483;
      WORD2(v545[1]) = 2080;
      *(void *)((char *)&v545[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelAverageEnergy";
      HIWORD(v545[2]) = 1024;
      LODWORD(v545[3]) = 1015;
      WORD2(v545[3]) = 1024;
      *(_DWORD *)((char *)&v545[3] + 6) = v501;
      WORD1(v545[4]) = 2048;
      *(double *)((char *)&v545[4] + 4) = v502;
      WORD2(v545[5]) = 2048;
      *(double *)((char *)&v545[5] + 6) = v503;
      v491 = "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energyInfo.energy[%f] energyInfo.energyAvg[%f]";
      goto LABEL_641;
    }
    if (os_log_type_enabled(v484, OS_LOG_TYPE_DEFAULT))
    {
      int v485 = *(_DWORD *)(v7 + 20);
      double v486 = *(float *)(v7 + 788);
      double v487 = *(float *)(v7 + 784);
      LODWORD(v545[0]) = 136316418;
      *(void *)((char *)v545 + 4) = v483;
      WORD2(v545[1]) = 2080;
      *(void *)((char *)&v545[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelAverageEnergy";
      HIWORD(v545[2]) = 1024;
      LODWORD(v545[3]) = 1015;
      WORD2(v545[3]) = 1024;
      *(_DWORD *)((char *)&v545[3] + 6) = v485;
      WORD1(v545[4]) = 2048;
      *(double *)((char *)&v545[4] + 4) = v486;
      WORD2(v545[5]) = 2048;
      *(double *)((char *)&v545[5] + 6) = v487;
      v459 = "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energyInfo.energy[%f] energyInfo.energyAvg[%f]";
LABEL_620:
      _os_log_impl(&dword_1E1EA4000, v454, OS_LOG_TYPE_DEFAULT, v459, (uint8_t *)v545, 0x36u);
    }
LABEL_624:
    if (*(unsigned char *)(v542 + 69))
    {
      if (v543[14].i8[0]) {
        BOOL v492 = *(float *)(v7 + 792) < 0.0058;
      }
      else {
        BOOL v492 = *(float *)(v7 + 784) < 72.0;
      }
      int v493 = v492;
      VCSilencePredictor_AddFrame((unsigned __int8 *)(v7 + 552), *(unsigned __int16 *)(v452 + 160), *(unsigned __int16 *)(v452 + 168), v493);
    }
    float v494 = *(float *)(v7 + 796);
    *(float *)(v452 + 172) = v494;
    if (!*(_DWORD *)v542)
    {
      if (v543[14].i8[0])
      {
        if (v494 < 0.0058) {
          goto LABEL_635;
        }
LABEL_637:
        int v495 = 0;
      }
      else
      {
        if (*(float *)(v7 + 788) >= 72.0) {
          goto LABEL_637;
        }
LABEL_635:
        int v495 = *(_DWORD *)(v7 + 8) + 1;
      }
      *(_DWORD *)(v7 + 8) = v495;
    }
  }
  return v420;
}

void _VCAudioPlayer_UpdateOpusDecodeFECStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int outPropertyData = 0;
  if ((SoundDec_GetOpusDecodeFECStatus(a2, &outPropertyData) & 0x80000000) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      int v5 = *MEMORY[0x1E4F47A50];
      int v6 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136316162;
          uint64_t v18 = v4;
          __int16 v19 = 2080;
          uint64_t v20 = "_VCAudioPlayer_UpdateOpusDecodeFECStatus";
          __int16 v21 = 1024;
          int v22 = 1874;
          __int16 v23 = 2048;
          uint64_t v24 = a2;
          __int16 v25 = 1024;
          int v26 = outPropertyData;
          _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d SoundDec_GetOpusDecodeFECStatus soundDec=%p fecStatus=%u", buf, 0x2Cu);
        }
      }
      else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136316162;
        uint64_t v18 = v4;
        __int16 v19 = 2080;
        uint64_t v20 = "_VCAudioPlayer_UpdateOpusDecodeFECStatus";
        __int16 v21 = 1024;
        int v22 = 1874;
        __int16 v23 = 2048;
        uint64_t v24 = a2;
        __int16 v25 = 1024;
        int v26 = outPropertyData;
        _os_log_debug_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d SoundDec_GetOpusDecodeFECStatus soundDec=%p fecStatus=%u", buf, 0x2Cu);
      }
    }
    if (outPropertyData == 2)
    {
      ++*(_DWORD *)(a1 + 52676);
      int v7 = *(_DWORD *)(a1 + 52696);
      if (v7)
      {
        *(_DWORD *)(a1 + 52696) = v7 - 1;
        if (*(_DWORD *)(a1 + 52744) >= v7) {
          *(_DWORD *)(a1 + 52744) = v7 - 1;
        }
        int v8 = *(_DWORD *)(a1 + 52700);
        *(_DWORD *)(a1 + 52700) = v8 - 1;
        if (*(_DWORD *)(a1 + 52748) >= v8) {
          *(_DWORD *)(a1 + 52748) = v8 - 1;
        }
        int v9 = *(_DWORD *)(a1 + 52836);
        if (v9) {
          *(_DWORD *)(a1 + 52836) = v9 - 1;
        }
      }
      int v10 = *(_DWORD *)(a1 + 52772);
      if (v10) {
        *(_DWORD *)(a1 + 52772) = v10 - 1;
      }
      if (*(unsigned char *)(a1 + 52824))
      {
        int v11 = *(_DWORD *)(a1 + 52704);
        if (v11)
        {
          *(_DWORD *)(a1 + 52704) = v11 - 1;
          if (*(_DWORD *)(a1 + 52752) >= v11) {
            *(_DWORD *)(a1 + 52752) = v11 - 1;
          }
        }
        int v12 = *(_DWORD *)(a1 + 52780);
        if (v12) {
          *(_DWORD *)(a1 + 52780) = v12 - 1;
        }
        int v13 = *(_DWORD *)(a1 + 52832) - 1;
        if (v13 >= 0)
        {
          unint64_t v14 = (unsigned char *)(a1 + 52825 + v13 % 5u);
          if ((unint64_t)v14 < a1 + 52830 && (unint64_t)v14 >= a1 + 52825) {
            *unint64_t v14 = 0;
          }
          else {
            __break(0x5519u);
          }
        }
      }
    }
  }
}

int *_VCAudioPlayer_CopyDecodedSamplesToInput(int *result)
{
  if (result[24] >= 2)
  {
    int v1 = result;
    int v2 = 1;
    unsigned __int8 v3 = 1;
    while (1)
    {
      uint64_t v4 = &v1[6 * v3];
      size_t v5 = v1[25];
      unint64_t v6 = *(void *)v1 + *((void *)v1 + 1);
      int v7 = (const void *)(*(void *)v1 + (int)v5 * (uint64_t)v2);
      BOOL v8 = *((void *)v4 + 1) < v5 || (unint64_t)v7 > v6;
      BOOL v9 = v8 || *(void *)v1 > (unint64_t)v7;
      if (v9 || v6 - (unint64_t)v7 < v5) {
        break;
      }
      __n128 result = (int *)memcpy(*(void **)v4, v7, v5);
      int v2 = ++v3;
      if (v1[24] <= v3) {
        return result;
      }
    }
    __break(0x5519u);
  }
  return result;
}

uint64_t _VCAudioPlayer_Sample_RampUp(uint64_t result, uint64_t a2, int a3)
{
  float v3 = 1.0 / (float)a3;
  int v4 = *(_DWORD *)(a2 + 96);
  if (*(unsigned char *)(result + 52568))
  {
    if (v4 >= 1)
    {
      unsigned __int8 v5 = 0;
      while (a3 < 1)
      {
LABEL_9:
        if (v4 <= ++v5) {
          return result;
        }
      }
      int v6 = 0;
      int v7 = (float **)(a2 + 24 * v5);
      BOOL v8 = *v7;
      unint64_t v9 = (unint64_t)v7[1] + (void)*v7;
      uint64_t v10 = a3;
      int v11 = v8;
      while ((unint64_t)v11 < v9 && v11 >= v8)
      {
        *int v11 = (float)(v3 * (float)v6) * *v11;
        ++v11;
        ++v6;
        if (!--v10) {
          goto LABEL_9;
        }
      }
LABEL_20:
      __break(0x5519u);
    }
  }
  else if (v4 >= 1)
  {
    unsigned __int8 v12 = 0;
    while (a3 < 1)
    {
LABEL_18:
      if (v4 <= ++v12) {
        return result;
      }
    }
    int v13 = 0;
    unint64_t v14 = (__int16 **)(a2 + 24 * v12);
    int v15 = *v14;
    unint64_t v16 = (unint64_t)v14[1] + (void)*v14;
    uint64_t v17 = a3;
    uint64_t v18 = v15;
    while ((unint64_t)v18 < v16 && v18 >= v15)
    {
      *uint64_t v18 = (int)(float)((float)(v3 * (float)v13) * (float)*v18);
      ++v18;
      ++v13;
      if (!--v17) {
        goto LABEL_18;
      }
    }
    goto LABEL_20;
  }
  return result;
}

float *_VCAudioPlayer_SimulateCrossFade(float *result, int a2, uint64_t a3, int a4)
{
  if (result)
  {
    if (a4 >= 9)
    {
      int v4 = *(_DWORD *)(a3 + 96);
      if (v4 >= 1)
      {
        unsigned __int8 v5 = 0;
        int v6 = result + 112;
        int v7 = result + 128;
        BOOL v8 = result + 13142;
        while (1)
        {
          __n128 result = &v6[4 * v5];
          if (result >= v7 || result < v6) {
            break;
          }
          uint64_t v10 = &v6[4 * v5];
          int v11 = v10 + 1;
          unsigned __int8 v12 = v10 + 2;
          int v13 = v10 + 3;
          if (a2 == 1) {
            __n128 result = v12;
          }
          else {
            int v13 = v11;
          }
          float v14 = *result;
          float v15 = *v13;
          float v16 = *result;
          if (*v8)
          {
            int v17 = LODWORD(v15) ^ LODWORD(v16);
            uint64_t v18 = (float *)&g_EncodingFormatiPadWiFi2732x2048;
            __int16 v19 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutZeroCrossing;
            if (fabsf(v14) <= fabsf(v15))
            {
              uint64_t v20 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutConverging;
            }
            else
            {
              __int16 v19 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutConverging;
              uint64_t v20 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutDiverging;
            }
            if (v17 < 0)
            {
              __n128 result = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutZeroCrossing;
            }
            else
            {
              uint64_t v18 = v19;
              __n128 result = v20;
            }
            __int16 v21 = (uint64_t *)(a3 + 24 * v5);
            BOOL v22 = (unint64_t)v21[1] < 0x21 || result > v18;
            if (v22 || (char *)v18 - (char *)result < 33) {
              break;
            }
            uint64_t v23 = 0;
            uint64_t v24 = *v21;
            do
            {
              *(float *)(v24 + v23 * 4) = (float)(*(float *)(v24 + v23 * 4)
                                                * _VCAudioPlayer_SimulateCrossFade_fadeIn[v23])
                                        + (float)(v14 * result[v23]);
              ++v23;
            }
            while (v23 != 9);
          }
          else
          {
            __int16 v25 = LOWORD(v15) ^ LOWORD(v16);
            int v26 = SLOWORD(v16);
            if (SLOWORD(v16) >= 0) {
              LODWORD(v16) = SLOWORD(v16);
            }
            else {
              LODWORD(v16) = -SLOWORD(v16);
            }
            unsigned int v27 = SLOWORD(v15);
            if (SLOWORD(v15) < 0) {
              unsigned int v27 = -SLOWORD(v15);
            }
            BOOL v28 = v27 >= LODWORD(v16);
            if (v27 >= LODWORD(v16)) {
              int v29 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutZeroCrossing;
            }
            else {
              int v29 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutConverging;
            }
            if (v28) {
              uint64_t v30 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutConverging;
            }
            else {
              uint64_t v30 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutDiverging;
            }
            if (v25 < 0) {
              uint64_t v31 = (float *)&g_EncodingFormatiPadWiFi2732x2048;
            }
            else {
              uint64_t v31 = v29;
            }
            if (v25 < 0) {
              __n128 result = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutZeroCrossing;
            }
            else {
              __n128 result = v30;
            }
            int v32 = (uint64_t *)(a3 + 24 * v5);
            BOOL v33 = (unint64_t)v32[1] < 0x11 || result > v31;
            if (v33 || (char *)v31 - (char *)result < 33) {
              break;
            }
            uint64_t v34 = 0;
            uint64_t v35 = *v32;
            do
            {
              *(_WORD *)(v35 + 2 * v34) = (int)(float)((float)(_VCAudioPlayer_SimulateCrossFade_fadeIn[v34]
                                                             * (float)*(__int16 *)(v35 + 2 * v34))
                                                     + (float)((float)v26 * result[v34]));
              ++v34;
            }
            while (v34 != 9);
          }
          if (v4 <= ++v5) {
            return result;
          }
        }
        __break(0x5519u);
      }
    }
  }
  return result;
}

uint64_t PacketThread_Create(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, const void *a6)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  if (!a6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        PacketThread_Create_cold_1();
      }
    }
    return 0;
  }
  int v11 = malloc_type_calloc(1uLL, 0x58uLL, 0x10A0040E05548B6uLL);
  if (!v11)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        PacketThread_Create_cold_2();
      }
    }
    return 0;
  }
  uint64_t v12 = (uint64_t)v11;
  v11[13] = a1;
  v11[14] = a2;
  v11[12] = a3;
  *((unsigned char *)v11 + 60) = 1;
  dispatch_semaphore_t v13 = dispatch_semaphore_create(0);
  *(void *)(v12 + 8) = v13;
  if (!v13)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        PacketThread_Create_cold_3();
      }
    }
    goto LABEL_33;
  }
  *(void *)(v12 + 16) = _Block_copy(a6);
  uint64_t v14 = a3;
  float v15 = malloc_type_calloc(a3, 8uLL, 0x2004093837F09uLL);
  *(void *)(v12 + 24) = v15;
  if (!v15)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      goto LABEL_33;
    }
    uint64_t v27 = VRTraceErrorLogLevelToCSTR();
    __int16 v25 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_DWORD *)int buf = 136316162;
    uint64_t v33 = v27;
    __int16 v34 = 2080;
    uint64_t v35 = "PacketThread_Create";
    __int16 v36 = 1024;
    int v37 = 206;
    __int16 v38 = 2048;
    uint64_t v39 = v12;
    __int16 v40 = 1024;
    LODWORD(v41) = a3;
    int v26 = " [%s] %s:%d packetThread=%p Failed to allocate packetPool of %u packets";
    goto LABEL_40;
  }
  if (a3)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 8 * v14;
    while (PacketThread_AllocatePacketBuffer(v12, (void *)(*(void *)(v12 + 24) + v16), a1, a2))
    {
      v16 += 8;
      if (v17 == v16) {
        goto LABEL_9;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      goto LABEL_33;
    }
    uint64_t v28 = VRTraceErrorLogLevelToCSTR();
    __int16 v25 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_DWORD *)int buf = 136316162;
    uint64_t v33 = v28;
    __int16 v34 = 2080;
    uint64_t v35 = "PacketThread_Create";
    __int16 v36 = 1024;
    int v37 = 214;
    __int16 v38 = 2048;
    uint64_t v39 = v12;
    __int16 v40 = 1024;
    LODWORD(v41) = a1;
    int v26 = " [%s] %s:%d packetThread=%p Failed to allocate buffers of %u";
    goto LABEL_40;
  }
LABEL_9:
  if (!PacketThread_AllocatePacketBuffer(v12, (void *)(v12 + 32), a1, a2)
    || !PacketThread_AllocatePacketBuffer(v12, (void *)(v12 + 40), a1, a2))
  {
    goto LABEL_33;
  }
  CFStringRef v18 = CFStringCreateWithFormat(0, 0, @"com.apple.avconference.packetThread.%s", a5);
  __int16 v19 = (void *)*MEMORY[0x1E4F21EB0];
  keys[0] = *(void **)MEMORY[0x1E4F21EA8];
  keys[1] = v19;
  uint64_t v20 = (void *)*MEMORY[0x1E4F1CFC8];
  values[0] = (void *)v18;
  values[1] = v20;
  CFDictionaryRef v21 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v22 = FigThreadCreate();
  if (v21) {
    CFRelease(v21);
  }
  if (v18) {
    CFRelease(v18);
  }
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v22)
  {
    if (ErrorLogLevelForModule < 3) {
      goto LABEL_33;
    }
    uint64_t v24 = VRTraceErrorLogLevelToCSTR();
    __int16 v25 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    *(_DWORD *)int buf = 136316162;
    uint64_t v33 = v24;
    __int16 v34 = 2080;
    uint64_t v35 = "PacketThread_Create";
    __int16 v36 = 1024;
    int v37 = 242;
    __int16 v38 = 2048;
    uint64_t v39 = v12;
    __int16 v40 = 1024;
    LODWORD(v41) = v22;
    int v26 = " [%s] %s:%d packetThread=%p Failed to create packet thread %d";
LABEL_40:
    _os_log_error_impl(&dword_1E1EA4000, v25, OS_LOG_TYPE_ERROR, v26, buf, 0x2Cu);
LABEL_33:
    PacketThread_Destroy((int *)v12);
    return 0;
  }
  if (ErrorLogLevelForModule >= 7)
  {
    uint64_t v30 = VRTraceErrorLogLevelToCSTR();
    uint64_t v31 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136316162;
      uint64_t v33 = v30;
      __int16 v34 = 2080;
      uint64_t v35 = "PacketThread_Create";
      __int16 v36 = 1024;
      int v37 = 247;
      __int16 v38 = 2048;
      uint64_t v39 = v12;
      __int16 v40 = 2080;
      uint64_t v41 = a5;
      _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p PacketThread_Create completed for %s", buf, 0x30u);
    }
  }
  return v12;
}

void PacketThread_Destroy(int *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *((unsigned char *)a1 + 60) = 0;
    int v2 = *((void *)a1 + 1);
    if (v2) {
      dispatch_semaphore_signal(v2);
    }
    if (*(void *)a1)
    {
      FigThreadJoin();
      *(void *)a1 = 0;
    }
    float v3 = *((void *)a1 + 1);
    if (v3)
    {
      dispatch_release(v3);
      *((void *)a1 + 1) = 0;
    }
    if (*((void *)a1 + 3))
    {
      if (a1[12] >= 1)
      {
        uint64_t v4 = 0;
        do
          PacketThread_FreePacketBuffer(*(void **)(*((void *)a1 + 3) + 8 * v4++));
        while (v4 < a1[12]);
      }
      PacketThread_FreePacketBuffer(*((void **)a1 + 4));
      PacketThread_FreePacketBuffer(*((void **)a1 + 5));
      free(*((void **)a1 + 3));
    }
    unsigned __int8 v5 = (const void *)*((void *)a1 + 2);
    if (v5) {
      _Block_release(v5);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      int v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315906;
        uint64_t v9 = v6;
        __int16 v10 = 2080;
        int v11 = "PacketThread_Destroy";
        __int16 v12 = 1024;
        int v13 = 344;
        __int16 v14 = 2048;
        float v15 = a1;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p PacketThread_Destroy complete.", buf, 0x26u);
      }
    }
    free(a1);
  }
}

BOOL PacketThread_AllocatePacketBuffer(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  BOOL v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10900400813CB48uLL);
  if (!v8)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      PacketThread_AllocatePacketBuffer_cold_1();
    }
    return 0;
  }
  uint64_t v9 = v8;
  __int16 v10 = malloc_type_malloc(a3, 0x28E7425uLL);
  *((void *)v9 + 1) = v10;
  if (v10)
  {
    int v11 = malloc_type_malloc(a4, 0xCC234433uLL);
    *((void *)v9 + 2) = v11;
    if (v11)
    {
      *a2 = v9;
      return 1;
    }
    free(*((void **)v9 + 1));
    free(v9);
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 0;
    }
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    uint64_t v17 = *MEMORY[0x1E4F47A50];
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v18 = 136316162;
    uint64_t v19 = v16;
    __int16 v20 = 2080;
    CFDictionaryRef v21 = "PacketThread_AllocatePacketBuffer";
    __int16 v22 = 1024;
    int v23 = 170;
    __int16 v24 = 2048;
    uint64_t v25 = a1;
    __int16 v26 = 1024;
    int v27 = a4;
    float v15 = v17;
    goto LABEL_15;
  }
  free(v9);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    __int16 v14 = *MEMORY[0x1E4F47A50];
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v18 = 136316162;
    uint64_t v19 = v13;
    __int16 v20 = 2080;
    CFDictionaryRef v21 = "PacketThread_AllocatePacketBuffer";
    __int16 v22 = 1024;
    int v23 = 163;
    __int16 v24 = 2048;
    uint64_t v25 = a1;
    __int16 v26 = 1024;
    int v27 = a3;
    float v15 = v14;
LABEL_15:
    _os_log_error_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_ERROR, " [%s] %s:%d packetThread=%p Failed to allocate buffers of %u", (uint8_t *)&v18, 0x2Cu);
  }
  return 0;
}

uint64_t SendPacketsProc(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  int v2 = *(NSObject **)(a1 + 8);
  dispatch_retain(v2);
  id v3 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  unsigned __int8 v5 = (os_log_t *)MEMORY[0x1E4F47A50];
  if (ErrorLogLevelForModule >= 8)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    int v7 = *v5;
    BOOL v8 = *v5;
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315906;
        uint64_t v47 = v6;
        __int16 v48 = 2080;
        BOOL v49 = "SendPacketsProc";
        __int16 v50 = 1024;
        int v51 = 104;
        __int16 v52 = 2048;
        uint64_t v53 = a1;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p SendPacketsProc starting", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      SendPacketsProc_cold_1();
    }
  }
  int v9 = proc_setthread_cpupercent();
  if (v9)
  {
    int v10 = v9;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      __int16 v12 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316162;
        uint64_t v47 = v11;
        __int16 v48 = 2080;
        BOOL v49 = "SendPacketsProc";
        __int16 v50 = 1024;
        int v51 = 110;
        __int16 v52 = 2048;
        uint64_t v53 = a1;
        __int16 v54 = 1024;
        *(_DWORD *)uint64_t v55 = v10;
        _os_log_error_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d packetThread=%p proc_setthread_cpupercent(50, 20) failed with error %d", buf, 0x2Cu);
      }
    }
  }
  char v13 = 0;
  __int16 v14 = (_DWORD *)(a1 + 80);
  while (1)
  {
    dispatch_time_t v15 = dispatch_time(0, 60000000000);
    if (dispatch_semaphore_wait(v2, v15))
    {
      if (*(unsigned char *)(a1 + 61)) {
        break;
      }
    }
    if (!*(unsigned char *)(a1 + 60))
    {
      __int16 v14 = (_DWORD *)(a1 + 72);
      break;
    }
    unsigned int v17 = *(_DWORD *)(a1 + 64);
    unsigned int v16 = *(_DWORD *)(a1 + 68);
    if (v16 > v17)
    {
      if (v13)
      {
        ++*(_DWORD *)(a1 + 76);
        if (v17 + (*(_DWORD *)(a1 + 48) >> 1) >= v16) {
          char v13 = 0;
        }
      }
      else
      {
        unsigned int v18 = 0;
        do
        {
          uint64_t v19 = *(void *)(a1 + 24);
          uint64_t v20 = (*(_DWORD *)(a1 + 64) % *(_DWORD *)(a1 + 48));
          CFDictionaryRef v21 = *(_DWORD **)(v19 + 8 * v20);
          unint64_t v22 = *(void *)(a1 + 40);
          int v23 = v21;
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v19 + 8 * v20), (unint64_t *)&v23, v22, memory_order_relaxed, memory_order_relaxed);
          if (v23 == v21) {
            break;
          }
        }
        while (v18++ < 2);
        if (v23 != v21)
        {
          ++*(_DWORD *)(a1 + 84);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v35 = VRTraceErrorLogLevelToCSTR();
            __int16 v36 = *v5;
            char v13 = 0;
            if (!os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_38;
            }
            int v37 = *(_DWORD *)(a1 + 64);
            int v38 = *(_DWORD *)(a1 + 68);
            int v39 = *(_DWORD *)(a1 + 72);
            int v40 = *(_DWORD *)(a1 + 76);
            int v41 = *(_DWORD *)(a1 + 80);
            int v42 = *(_DWORD *)(a1 + 84);
            *(_DWORD *)int buf = 136317442;
            uint64_t v47 = v35;
            __int16 v48 = 2080;
            BOOL v49 = "_PacketThread_PullPacket";
            __int16 v50 = 1024;
            int v51 = 86;
            __int16 v52 = 2048;
            uint64_t v53 = a1;
            __int16 v54 = 1024;
            *(_DWORD *)uint64_t v55 = v37;
            *(_WORD *)&v55[4] = 1024;
            *(_DWORD *)&v55[6] = v38;
            __int16 v56 = 1024;
            int v57 = v41;
            __int16 v58 = 1024;
            int v59 = v39;
            __int16 v60 = 1024;
            int v61 = v40;
            __int16 v62 = 1024;
            int v63 = v42;
            _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p SendPacketsProc failed to fetch a packet. sent=%u stored=%u, dropping packets. packetsDropped=[S=%u, NR=%u, C=%u, F=%u]", buf, 0x4Au);
          }
          goto LABEL_37;
        }
        *(void *)(a1 + 40) = v21;
        if (*(_DWORD *)(a1 + 64) >= *v21)
        {
          if (*(unsigned char *)(a1 + 61)) {
            (*(void (**)(void))(*(void *)(a1 + 16) + 16))();
          }
LABEL_37:
          char v13 = 0;
          goto LABEL_38;
        }
        uint64_t v25 = (atomic_ullong *)(v19 + 8 * v20);
        unint64_t v26 = v22;
        atomic_compare_exchange_strong_explicit(v25, &v26, (unint64_t)v21, memory_order_relaxed, memory_order_relaxed);
        if (v26 == v22) {
          *(void *)(a1 + 40) = v22;
        }
        ++*(_DWORD *)(a1 + 76);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v27 = VRTraceErrorLogLevelToCSTR();
          uint64_t v28 = *v5;
          if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
          {
            int v29 = *(_DWORD *)(a1 + 64);
            int v30 = *(_DWORD *)(a1 + 68);
            int v31 = *(_DWORD *)(a1 + 72);
            int v32 = *(_DWORD *)(a1 + 76);
            int v33 = *(_DWORD *)(a1 + 80);
            int v34 = *(_DWORD *)(a1 + 84);
            *(_DWORD *)int buf = 136317442;
            uint64_t v47 = v27;
            __int16 v48 = 2080;
            BOOL v49 = "_PacketThread_PullPacket";
            __int16 v50 = 1024;
            int v51 = 79;
            __int16 v52 = 2048;
            uint64_t v53 = a1;
            __int16 v54 = 1024;
            *(_DWORD *)uint64_t v55 = v29;
            *(_WORD *)&v55[4] = 1024;
            *(_DWORD *)&v55[6] = v30;
            __int16 v56 = 1024;
            int v57 = v33;
            __int16 v58 = 1024;
            int v59 = v31;
            __int16 v60 = 1024;
            int v61 = v32;
            __int16 v62 = 1024;
            int v63 = v34;
            _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p SendPacketsProc got lapped! sent=%u stored=%u, dropping packets. packetsDropped=[S=%u, NR=%u, C=%u, F=%u]", buf, 0x4Au);
          }
        }
        char v13 = 1;
      }
LABEL_38:
      ++*(_DWORD *)(a1 + 64);
    }
  }
  ++*v14;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v43 = VRTraceErrorLogLevelToCSTR();
    char v44 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136316162;
      uint64_t v47 = v43;
      __int16 v48 = 2080;
      BOOL v49 = "SendPacketsProc";
      __int16 v50 = 1024;
      int v51 = 129;
      __int16 v52 = 2048;
      uint64_t v53 = a1;
      __int16 v54 = 2048;
      *(void *)uint64_t v55 = 0;
      _os_log_impl(&dword_1E1EA4000, v44, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p SendPacketsProc ending. dispatch_semaphore_wait returned %ld", buf, 0x30u);
    }
  }

  dispatch_release(v2);
  return 0;
}

void *_PacketThread_CopyToPacket(uint64_t a1, const void *a2, void *__src, size_t __n, uint64_t a5)
{
  int v6 = __n;
  *(_DWORD *)a5 = *(_DWORD *)(a1 + 68);
  memcpy(*(void **)(a5 + 16), __src, __n);
  BOOL result = memcpy(*(void **)(a5 + 8), a2, *(unsigned int *)(a1 + 52));
  *(_DWORD *)(a5 + 24) = v6;
  return result;
}

uint64_t _PacketThread_StorePacket(uint64_t a1, unint64_t a2)
{
  unsigned int v3 = 0;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  do
  {
    uint64_t v4 = (atomic_ullong *)(*(void *)(a1 + 24) + 8 * (*(_DWORD *)(a1 + 68) % *(_DWORD *)(a1 + 48)));
    atomic_ullong v5 = *v4;
    atomic_ullong v6 = *v4;
    atomic_compare_exchange_strong(v4, (unint64_t *)&v6, a2);
    if (v6 == v5) {
      break;
    }
  }
  while (v3++ < 2);
  if (v6 == v5)
  {
    *(void *)(a1 + 32) = v5;
    ++*(_DWORD *)(a1 + 68);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 8));
    return 1;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    int v10 = *MEMORY[0x1E4F47A50];
    BOOL v11 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v11) {
      return result;
    }
    int v12 = *(_DWORD *)(a1 + 64);
    int v13 = *(_DWORD *)(a1 + 68);
    int v14 = *(_DWORD *)(a1 + 72);
    int v15 = *(_DWORD *)(a1 + 76);
    int v16 = *(_DWORD *)(a1 + 80);
    int v17 = *(_DWORD *)(a1 + 84);
    int v18 = 136317442;
    uint64_t v19 = v9;
    __int16 v20 = 2080;
    CFDictionaryRef v21 = "_PacketThread_StorePacket";
    __int16 v22 = 1024;
    int v23 = 280;
    __int16 v24 = 2048;
    uint64_t v25 = a1;
    __int16 v26 = 1024;
    int v27 = v12;
    __int16 v28 = 1024;
    int v29 = v13;
    __int16 v30 = 1024;
    int v31 = v16;
    __int16 v32 = 1024;
    int v33 = v14;
    __int16 v34 = 1024;
    int v35 = v15;
    __int16 v36 = 1024;
    int v37 = v17;
    _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d IOProc: packetThread=%p _PacketThread_StorePacket failed to store a buffer. packetsSent=%u packetsStored=%u packetsDropped=[S=%u, NR=%u, C=%u, F=%u]", (uint8_t *)&v18, 0x4Au);
  }
  return 0;
}

uint64_t PacketThread_SendSampleBuffer(uint64_t a1, const void *a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  _PacketThread_CopyToPacket(a1, a2, 0, 0, v3);
  VCAudioBufferList_ResetDataPointers(*(void *)(v3 + 8));

  return _PacketThread_StorePacket(a1, v3);
}

uint64_t PacketThread_SendPacket(uint64_t a1, const void *a2, void *a3, size_t __n)
{
  int v4 = __n;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 56) >= __n)
  {
    unint64_t v9 = *(void *)(a1 + 32);
    _PacketThread_CopyToPacket(a1, a2, a3, __n, v9);
    return _PacketThread_StorePacket(a1, v9);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      int v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v10 = 136316162;
        uint64_t v11 = v6;
        __int16 v12 = 2080;
        int v13 = "PacketThread_SendPacket";
        __int16 v14 = 1024;
        int v15 = 304;
        __int16 v16 = 2048;
        uint64_t v17 = a1;
        __int16 v18 = 1024;
        int v19 = v4;
        _os_log_error_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_ERROR, " [%s] %s:%d packetThread=%p PacketThread_SendPacket called with too many bytes %d", (uint8_t *)&v10, 0x2Cu);
      }
    }
    return 0;
  }
}

__n128 PacketThread_Statistics(__n128 *a1, __n128 *a2)
{
  if (a1)
  {
    if (a2)
    {
      __n128 result = a1[4];
      a2[1].n128_u64[0] = a1[5].n128_u64[0];
      *a2 = result;
    }
  }
  return result;
}

void PacketThread_FreePacketBuffer(void *a1)
{
  if (a1)
  {
    int v2 = (void *)a1[1];
    if (v2) {
      free(v2);
    }
    unint64_t v3 = (void *)a1[2];
    if (v3) {
      free(v3);
    }
    free(a1);
  }
}

uint64_t PacketThread_ReceiverIsReady(uint64_t result)
{
  if (result) {
    *(unsigned char *)(result + 61) = 1;
  }
  return result;
}

uint64_t VCDefaults_DefaultDumpEnablementValue()
{
  if (VRTraceIsInternalOSInstalled()) {
    return 1;
  }

  return VRTraceIsSeedOSInstalled();
}

double VCDefaults_GetInternalOSDoubleValueForKey(const __CFString *a1, double a2)
{
  if (!VRTraceIsInternalOSInstalled()) {
    return a2;
  }

  return VCDefaults_GetDoubleValueForKey(a1, a2);
}

BOOL VCDefaults_GetManagedBoolValueForKey(const __CFString *a1, BOOL a2)
{
  if ((VRTraceIsInternalOSInstalled() & 1) == 0
    && !CFPreferencesAppValueIsForced(a1, @"com.apple.VideoConference")
    || !VRTraceIsInternalOSInstalled())
  {
    return a2;
  }

  return _VCDefaults_GetBoolValueForKey(a1, a2, 1);
}

const void *VCDefaults_CopyDictionaryValueForKey(const __CFString *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();

  return VCDefaults_CopyValueForKey(a1, TypeID);
}

uint64_t VCDefaults_GetBoolValueForKeyQuiet(const __CFString *a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  Boolean keyExistsAndHasValidFormat = -86;
  BOOL v3 = CFPreferencesGetAppBooleanValue(a1, @"com.apple.VideoConference", &keyExistsAndHasValidFormat) != 0;
  if (keyExistsAndHasValidFormat) {
    return v3;
  }
  else {
    return a2;
  }
}

BOOL VCTransportStreamIsOfKindVTP(uint64_t a1)
{
  return VCFBOUtils_IsKindOfClass(a1, (uint64_t)&kVCTransportStreamVTPVTable);
}

uint64_t VCTransportStreamVTPCreate(const __CFAllocator *a1, int a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!a4)
  {
    uint64_t v11 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return v11;
    }
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCTransportStreamVTPCreate_cold_1();
    }
    goto LABEL_38;
  }
  if (a2 == -1)
  {
    uint64_t v11 = 2150760490;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        VCTransportStreamVTPCreate_cold_2();
        uint64_t v11 = 2150760490;
      }
    }
    goto LABEL_38;
  }
  uint64_t ClassID = VCTransportStreamGetClassID();
  uint64_t v9 = VCFBOUtils_ObjectCreate((uint64_t)a1, &cf, (uint64_t)&kVCTransportStreamVTPVTable, ClassID, 50);
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t v11 = v9;
    goto LABEL_38;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = VCTransportStreamCommonInitialize(DerivedStorage, (uint64_t)a3, (uint64_t)cf);
  if ((v11 & 0x80000000) != 0) {
    goto LABEL_38;
  }
  *(_DWORD *)(DerivedStorage + 48) = a2;
  *(void *)(DerivedStorage + 56) = CFNumberCreate(a1, kCFNumberIntType, (const void *)(DerivedStorage + 48));
  *(_DWORD *)(DerivedStorage + 64) = 0;
  *(_DWORD *)(DerivedStorage + 196) = -1;
  *(void *)(DerivedStorage + 208) = *MEMORY[0x1E4F1CFC8];
  VTP_GetTransportSessionID(a2, (_DWORD *)(DerivedStorage + 200));
  if (!*(_DWORD *)(DerivedStorage + 200) || (int)VRTraceGetErrorLogLevelForModule() < 8) {
    goto LABEL_12;
  }
  uint64_t v12 = VRTraceErrorLogLevelToCSTR();
  int v13 = *MEMORY[0x1E4F47A50];
  __int16 v14 = *MEMORY[0x1E4F47A50];
  if (*MEMORY[0x1E4F47A40])
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(_DWORD *)(DerivedStorage + 200);
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v27 = 2080;
      __int16 v28 = "VCTransportStreamVTPCreate";
      __int16 v29 = 1024;
      int v30 = 134;
      __int16 v31 = 1024;
      LODWORD(v32) = v15;
      _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d transportSessionID=%u", buf, 0x22u);
      if (!a3) {
        goto LABEL_17;
      }
      goto LABEL_13;
    }
LABEL_12:
    if (!a3)
    {
LABEL_17:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v17 = VRTraceErrorLogLevelToCSTR();
        __int16 v18 = *MEMORY[0x1E4F47A50];
        int v19 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136316418;
            *(void *)&uint8_t buf[4] = v17;
            __int16 v27 = 2080;
            __int16 v28 = "VCTransportStreamVTPCreate";
            __int16 v29 = 1024;
            int v30 = 152;
            __int16 v31 = 2048;
            CFTypeRef v32 = cf;
            __int16 v33 = 1024;
            int v34 = a2;
            __int16 v35 = 2112;
            CFDictionaryRef v36 = a3;
            _os_log_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] vfd = %d, options = %@", buf, 0x36u);
          }
        }
        else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136316418;
          *(void *)&uint8_t buf[4] = v17;
          __int16 v27 = 2080;
          __int16 v28 = "VCTransportStreamVTPCreate";
          __int16 v29 = 1024;
          int v30 = 152;
          __int16 v31 = 2048;
          CFTypeRef v32 = cf;
          __int16 v33 = 1024;
          int v34 = a2;
          __int16 v35 = 2112;
          CFDictionaryRef v36 = a3;
          _os_log_debug_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] vfd = %d, options = %@", buf, 0x36u);
        }
      }
      *a4 = cf;
      return v11;
    }
    goto LABEL_13;
  }
  if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  VCTransportStreamVTPCreate_cold_5(v12);
  if (!a3) {
    goto LABEL_17;
  }
LABEL_13:
  int v24 = 2;
  FigCFDictionaryGetInt32IfPresent();
  int v16 = VCGetVTPTrafficClassForVCTrafficClass(2);
  *(_DWORD *)(DerivedStorage + 64) = v16;
  if (v16 == -1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v21 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCTransportStreamVTPCreate_cold_3(v21);
      }
    }
    uint64_t v11 = 2150760449;
  }
  else
  {
    *(void *)int buf = 0;
    unsigned __int8 valuePtr = 0;
    if (!CFDictionaryGetValueIfPresent(a3, @"DSCPTag", (const void **)buf)) {
      goto LABEL_17;
    }
    CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberSInt8Type, &valuePtr);
    if (!valuePtr || !VTP_SetDSCPTag(a2, valuePtr)) {
      goto LABEL_17;
    }
    uint64_t v11 = *__error() | 0xC0320000;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v22 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCTransportStreamVTPCreate_cold_4(v22);
      }
    }
  }
LABEL_38:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

void _VCTransportStreamVTPFinalize(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    int v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315906;
      uint64_t v8 = v3;
      __int16 v9 = 2080;
      int v10 = "_VCTransportStreamVTPFinalize";
      __int16 v11 = 1024;
      int v12 = 166;
      __int16 v13 = 2048;
      uint64_t v14 = a1;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v7, 0x26u);
    }
  }
  VCTransportStreamCommonFinalize((uint64_t *)DerivedStorage);
  int v5 = *(_DWORD *)(DerivedStorage + 48);
  if (v5 != -1) {
    VTP_Close(v5);
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 56);
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t _VCTransportStreamVTPCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, const void **a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v9 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPCopyProperty_cold_1();
      }
    }
    return v9;
  }
  if (!a2 || !a4)
  {
    uint64_t v9 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v15 = VRTraceErrorLogLevelToCSTR();
      int v16 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        int v17 = 136316162;
        uint64_t v18 = v15;
        __int16 v19 = 2080;
        uint64_t v20 = "_VCTransportStreamVTPCopyProperty";
        __int16 v21 = 1024;
        int v22 = 180;
        __int16 v23 = 2112;
        int v24 = a2;
        __int16 v25 = 2112;
        __int16 v26 = a4;
        _os_log_error_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_ERROR, " [%s] %s:%d Property name '%@' and property value out '%@' must not be NULL", (uint8_t *)&v17, 0x30u);
      }
    }
    return v9;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"UnderlyingVFD"))
  {
    uint64_t v8 = (void *)CFRetain(*(CFTypeRef *)(DerivedStorage + 56));
LABEL_8:
    uint64_t v9 = 0;
    *a4 = v8;
    return v9;
  }
  if (CFEqual(a2, @"TrafficClass"))
  {
    int v17 = VCGetVCTrafficClassForVTPTrafficClass(*(_DWORD *)(DerivedStorage + 64));
    uint64_t v8 = CFNumberCreate(a3, kCFNumberIntType, &v17);
    goto LABEL_8;
  }
  if (CFEqual(a2, @"PreferredSendQueue"))
  {
    int v11 = VTP_CopyPreferredSendQueue(*(_DWORD *)(DerivedStorage + 48), a4);
    if (!v11) {
      return 0;
    }
    int v12 = v11;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      uint64_t v14 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 136315906;
        uint64_t v18 = v13;
        __int16 v19 = 2080;
        uint64_t v20 = "_VCTransportStreamVTPCopyProperty";
        __int16 v21 = 1024;
        int v22 = 192;
        __int16 v23 = 1024;
        LODWORD(v24) = v12;
        _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VTP_GetPreferredSendQueue failed - %d", (uint8_t *)&v17, 0x22u);
      }
    }
    return *__error() | 0xC0320000;
  }
  if (CFEqual(a2, @"IsIPv6"))
  {
    return _VCTransportStreamVTPCopyIsIPv6(DerivedStorage, a4);
  }
  else if (CFEqual(a2, @"ReceiveHopLimitEnabled"))
  {
    return _VCTransportStreamVTPCopyReceiveHopLimitEnabled(DerivedStorage, a4);
  }
  else
  {
    return VCTransportStreamCommonCopyProperty(DerivedStorage, a2, (uint64_t)a3, a4);
  }
}

uint64_t _VCTransportStreamVTPSetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2 && a3)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (CFEqual(a2, @"ReceiveHopLimitEnabled"))
      {
        if (DerivedStorage)
        {
          CFBooleanRef BOOLean = 0;
          IsIPuint64_t v6 = _VCTransportStreamVTPCopyIsIPv6(DerivedStorage, (const void **)&BOOLean);
          if (IsIPv6 || !BOOLean)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v12 = VRTraceErrorLogLevelToCSTR();
              uint64_t v13 = *MEMORY[0x1E4F47A50];
              uint64_t v14 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)int buf = 136315906;
                  uint64_t v17 = v12;
                  __int16 v18 = 2080;
                  __int16 v19 = "_VCTransportStreamVTPSetReceiveHopLimitEnabled";
                  __int16 v20 = 1024;
                  int v21 = 232;
                  __int16 v22 = 1024;
                  LODWORD(v23) = IsIPv6;
                  _os_log_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d _VCTransportStreamVTPCopyIsIPv6 failed, result=0x%08x", buf, 0x22u);
                }
              }
              else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
              {
                _VCTransportStreamVTPSetProperty_cold_4();
              }
            }
          }
          else
          {
            *(_DWORD *)int buf = CFBooleanGetValue(a3) != 0;
            if (CFBooleanGetValue(BOOLean))
            {
              int v7 = 41;
              int v8 = 37;
            }
            else
            {
              int v7 = 0;
              int v8 = 24;
            }
            IsIPuint64_t v6 = VTP_Setsockopt(*(_DWORD *)(DerivedStorage + 48), v7, v8, buf, 4u);
            CFRelease(BOOLean);
            if (IsIPv6)
            {
              IsIPuint64_t v6 = *__error() | 0xC0010000;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  _VCTransportStreamVTPSetProperty_cold_5();
                }
              }
            }
            else
            {
              *(void *)(DerivedStorage + 208) = a3;
            }
          }
        }
        else
        {
          IsIPuint64_t v6 = 2150760449;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCTransportStreamVTPSetProperty_cold_3();
            }
          }
        }
      }
      else
      {
        IsIPuint64_t v6 = 2150760464;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            _VCTransportStreamVTPSetProperty_cold_2();
            return 2150760464;
          }
        }
      }
    }
    else
    {
      IsIPuint64_t v6 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v10 = VRTraceErrorLogLevelToCSTR();
        int v11 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316162;
          uint64_t v17 = v10;
          __int16 v18 = 2080;
          __int16 v19 = "_VCTransportStreamVTPSetProperty";
          __int16 v20 = 1024;
          int v21 = 210;
          __int16 v22 = 2112;
          __int16 v23 = a2;
          __int16 v24 = 2112;
          CFBooleanRef v25 = a3;
          _os_log_error_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_ERROR, " [%s] %s:%d propertyKey=%@ and propertyValue=%@ must not be NULL", buf, 0x30u);
        }
      }
    }
  }
  else
  {
    IsIPuint64_t v6 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPSetProperty_cold_1();
      }
    }
  }
  return IsIPv6;
}

uint64_t _VCTransportStreamVTPCopyIsIPv6(uint64_t a1, const void **a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *(void *)&v3.sa_len = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&v3.sa_data[6] = 0xAAAAAAAAAAAAAAAALL;
      v22[6] = v3;
      v22[7] = v3;
      void v22[5] = v3;
      v22[3] = v3;
      v22[4] = v3;
      v22[1] = v3;
      v22[2] = v3;
      v22[0] = v3;
      socklen_t v13 = 128;
      int v4 = VTP_Getsockname(*(_DWORD *)(a1 + 48), v22, &v13);
      if (v4)
      {
        int v9 = v4;
        uint64_t v7 = *__error() | 0xC0320000;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          uint64_t v10 = VRTraceErrorLogLevelToCSTR();
          int v11 = *MEMORY[0x1E4F47A50];
          uint64_t v12 = *MEMORY[0x1E4F47A50];
          if (*MEMORY[0x1E4F47A40])
          {
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int buf = 136315906;
              uint64_t v15 = v10;
              __int16 v16 = 2080;
              uint64_t v17 = "_VCTransportStreamVTPCopyIsIPv6";
              __int16 v18 = 1024;
              int v19 = 261;
              __int16 v20 = 1024;
              int v21 = v9;
              _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VTP_Getsockname failed - %d", buf, 0x22u);
            }
          }
          else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            _VCTransportStreamVTPCopyIsIPv6_cold_3();
          }
        }
      }
      else
      {
        if (v22[0].sa_family == 30) {
          int v5 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          int v5 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        uint64_t v6 = *v5;
        *a2 = *v5;
        CFRetain(v6);
        return 0;
      }
    }
    else
    {
      uint64_t v7 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPCopyIsIPv6_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v7 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPCopyIsIPv6_cold_1();
      }
    }
  }
  return v7;
}

uint64_t _VCTransportStreamVTPCopyReceiveHopLimitEnabled(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      int v2 = *(const void **)(a1 + 208);
      *a2 = v2;
      CFRetain(v2);
      return 0;
    }
    else
    {
      uint64_t v3 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPCopyReceiveHopLimitEnabled_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v3 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPCopyReceiveHopLimitEnabled_cold_1();
      }
    }
  }
  return v3;
}

uint64_t _VCTransportStreamVTPSetSendFailedHandler(uint64_t a1, void *a2, NSObject *a3)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    return VCTransportStreamCommonSetSendFailedHandler(DerivedStorage, a2, a3);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPSetSendFailedHandler_cold_1();
      }
    }
    return 2150760449;
  }
}

uint64_t _VCTransportStreamVTPSend(uint64_t a1, uint64_t a2)
{
  char *returnedPointerOut;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  size_t v32;
  _OWORD v33[10];
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  uint64_t v44;
  unsigned char __b[1472];
  uint64_t v46;

  int v46 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a2;
    if (a2)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(DerivedStorage + 8) == 2)
      {
        int v4 = (_DWORD *)DerivedStorage;
        while (1)
        {
          if (!*(void *)v2)
          {
            uint64_t v2 = 2150760449;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCTransportStreamVTPSend_cold_3();
              }
            }
            return v2;
          }
          if (*(unsigned __int8 *)(v2 + 34) >= 0xDu)
          {
            uint64_t v2 = 2150760449;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v11 = VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCTransportStreamVTPSend_cold_4(v11);
              }
            }
            return v2;
          }
          size_t DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)v2);
          if (DataLength >= 0x5C1)
          {
            uint64_t v2 = 2150760449;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCTransportStreamVTPSend_cold_5();
              }
            }
            return v2;
          }
          memset(__b, 170, sizeof(__b));
          returnedPointerOut = 0;
          OSStatus v6 = CMBlockBufferAccessDataBytes(*(CMBlockBufferRef *)v2, 0, DataLength, __b, &returnedPointerOut);
          if (v6)
          {
            if (v6 >= 0) {
              int v12 = v6;
            }
            else {
              int v12 = -v6;
            }
            uint64_t v2 = v12 | 0xD0320000;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCTransportStreamVTPSend_cold_6();
              }
            }
            return v2;
          }
          char v44 = 0;
          int v42 = 0u;
          uint64_t v43 = 0u;
          int v40 = 0u;
          int v41 = 0u;
          uint64_t v38 = 0u;
          int v39 = 0u;
          CFDictionaryRef v36 = 0u;
          uint64_t v37 = 0u;
          int v34 = 0u;
          __int16 v35 = 0u;
          memset(v33, 0, sizeof(v33));
          VTP_SetPktTag((uint64_t)v33, 0, *(void *)(v2 + 56));
          VTP_SetPktTag((uint64_t)v33, 1u, *(void *)(v2 + 64));
          VTP_SetPktTag((uint64_t)v33, 2u, *(void *)(v2 + 72));
          VTP_SetPktTag((uint64_t)v33, 3u, *(void *)(v2 + 80));
          *(_WORD *)((char *)&v34 + 9) = *(_WORD *)(v2 + 152);
          LODWORD(v42) = *(_DWORD *)(v2 + 132);
          DWORD2(v33[0]) = v4[50];
          BYTE8(v43) = *(unsigned char *)(v2 + 49);
          uuid_copy((unsigned __int8 *)&v42 + 4, (const unsigned __int8 *)(v2 + 136));
          char v7 = *(unsigned char *)(v2 + 35);
          int v8 = *(unsigned __int8 *)(v2 + 34);
          char v9 = *(unsigned char *)(v2 + 36);
          if (v7 || *(unsigned char *)(v2 + 34)) {
            goto LABEL_13;
          }
          if (*(unsigned char *)(v2 + 36)) {
            break;
          }
          BYTE8(v34) = *(unsigned char *)(v2 + 48);
          if (!BYTE8(v34)) {
            goto LABEL_16;
          }
          int v8 = 0;
          char v9 = 0;
          char v10 = 1;
LABEL_14:
          BYTE12(v36) = v7;
          BYTE14(v36) = v9;
          *(void *)&uint64_t v37 = *(void *)(v2 + 40);
          BYTE9(v38) = v10;
          BYTE8(v36) = v8;
          if (v8) {
            __memcpy_chk();
          }
LABEL_16:
          if (VTP_Send(v4[12], returnedPointerOut, DataLength, v4[16], (uint64_t)v33) == -1)
          {
            uint64_t v2 = *__error() | 0xC0320000;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              uint64_t v13 = VRTraceErrorLogLevelToCSTR();
              uint64_t v14 = *MEMORY[0x1E4F47A50];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
              {
                int v16 = *__error();
                int v17 = v4[12];
                *(_DWORD *)int buf = 136316674;
                __int16 v20 = v13;
                int v21 = 2080;
                __int16 v22 = "_VCTransportStreamVTPSendOnePacket";
                uint64_t v23 = 1024;
                __int16 v24 = 354;
                CFBooleanRef v25 = 1024;
                uint64_t v26 = v16;
                uint64_t v27 = 1024;
                __int16 v28 = v17;
                __int16 v29 = 1024;
                int v30 = DWORD2(v33[0]);
                __int16 v31 = 2048;
                CFTypeRef v32 = DataLength;
                _os_log_error_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_ERROR, " [%s] %s:%d VTP_Send failed with errno=%d vfd=%d localCallID=%d, dataLength=%zu", buf, 0x38u);
              }
            }
            return v2;
          }
          uint64_t v2 = *(void *)(v2 + 160);
          if (!v2) {
            return v2;
          }
        }
        char v9 = 1;
LABEL_13:
        BYTE8(v34) = 1;
        char v10 = *(unsigned char *)(v2 + 48);
        goto LABEL_14;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      {
        return 2150760509;
      }
      else
      {
        VRTraceErrorLogLevelToCSTR();
        uint64_t v2 = 2150760509;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPSend_cold_7();
        }
      }
    }
    else
    {
      uint64_t v2 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPSend_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v2 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPSend_cold_1();
      }
    }
  }
  return v2;
}

uint64_t _VCTransportStreamVTPSetPacketFilter(uint64_t a1, const void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v23 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPSetPacketFilter_cold_1();
      }
    }
    return v23;
  }
  if (!a2)
  {
    uint64_t v23 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPSetPacketFilter_cold_2();
      }
    }
    return v23;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 8) != 1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return 2150760509;
    }
    VRTraceErrorLogLevelToCSTR();
    uint64_t v23 = 2150760509;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCTransportStreamVTPSetPacketFilter_cold_16();
    }
    return v23;
  }
  uint64_t v4 = DerivedStorage;
  if (!VCPacketFilterIsOfKindRTP((uint64_t)a2))
  {
    if (VCPacketFilterIsOfKindRTCP((uint64_t)a2))
    {
      if (VTP_SetPktType(*(_DWORD *)(v4 + 48), 192) == -1)
      {
        uint64_t v23 = *__error() | 0xC0320000;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCTransportStreamVTPSetPacketFilter_cold_8();
          }
        }
        return v23;
      }
      uint64_t v5 = _VCTransportStreamVTPSetRemoteSSRCOnVFD(*(_DWORD *)(v4 + 48), (uint64_t)a2, @"RTCPRemoteSSRC");
      if ((v5 & 0x80000000) != 0) {
        return v5;
      }
      int v12 = *(_DWORD *)(v4 + 48);
      CFArrayRef theArray = 0;
      if (v12 != -1)
      {
        uint64_t CMBaseObject = VCPacketFilterGetCMBaseObject(a2, v11);
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        CFDictionaryRef v36 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v15 + 48);
        if (v36
          && (uint64_t v37 = v36(CMBaseObject, @"RTCPLocalSSRC", *MEMORY[0x1E4F1CF80], &theArray), (v37 & 0x80000000) == 0)
          && (uint64_t v23 = v37, theArray))
        {
          int valuePtr = 0;
          CFNumberGetValue(theArray, kCFNumberSInt32Type, &valuePtr);
          if (VTP_SetLocalSSRC(v12, valuePtr) == -1)
          {
            uint64_t v23 = *__error() | 0xC0320000;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCTransportStreamVTPSetPacketFilter_cold_10();
              }
            }
          }
        }
        else
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            uint64_t v38 = VRTraceErrorLogLevelToCSTR();
            int v39 = *MEMORY[0x1E4F47A50];
            uint64_t v23 = 0;
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_39;
            }
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = v38;
            __int16 v44 = 2080;
            char v45 = "_VCTransportStreamVTPSetLocalSSRCOnVFD";
            __int16 v46 = 1024;
            int v47 = 567;
            _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Local SSRC not set on filter", buf, 0x1Cu);
          }
          uint64_t v23 = 0;
        }
LABEL_39:
        CFArrayRef v33 = theArray;
        if (!theArray)
        {
LABEL_41:
          if ((v23 & 0x80000000) == 0)
          {
            int v34 = *(const void **)(v4 + 40);
            *(void *)(v4 + 40) = a2;
            CFRetain(a2);
            if (v34) {
              CFRelease(v34);
            }
          }
          return v23;
        }
LABEL_40:
        CFRelease(v33);
        goto LABEL_41;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() > 2)
      {
        uint64_t v23 = 2150760449;
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPSetPacketFilter_cold_9();
        }
        goto LABEL_39;
      }
      return 2150760449;
    }
    if (!VCPacketFilterIsOfKindBasebandNotification((uint64_t)a2))
    {
      uint64_t v23 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPSetPacketFilter_cold_15();
        }
      }
      return v23;
    }
    if (VTP_SetPktType(*(_DWORD *)(v4 + 48), 256) == -1)
    {
      uint64_t v23 = *__error() | 0xC0320000;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPSetPacketFilter_cold_11();
        }
      }
      return v23;
    }
    int v17 = *(_DWORD *)(v4 + 48);
    *(void *)int buf = 0;
    if (v17 == -1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() <= 2) {
        return 2150760449;
      }
      uint64_t v23 = 2150760449;
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPSetPacketFilter_cold_12();
      }
    }
    else
    {
      uint64_t v18 = VCPacketFilterGetCMBaseObject(a2, v16);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      int v40 = *(uint64_t (**)(uint64_t, __CFString *, void, unsigned char *))(v20 + 48);
      if (v40)
      {
        uint64_t v23 = v40(v18, @"CellularUniqueTag", *MEMORY[0x1E4F1CF80], buf);
        if ((v23 & 0x80000000) == 0)
        {
          if (*(void *)buf)
          {
            LODWORD(theArray) = 0;
            CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberSInt32Type, &theArray);
            if (VTP_SetCellularUniqueTag(v17, (int)theArray) == -1)
            {
              uint64_t v23 = *__error() | 0xC0320000;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  _VCTransportStreamVTPSetPacketFilter_cold_14();
                }
              }
            }
          }
          else
          {
            uint64_t v23 = 2150760449;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCTransportStreamVTPSetPacketFilter_cold_13();
              }
            }
          }
        }
      }
      else
      {
        uint64_t v23 = 4294954514;
      }
    }
    CFArrayRef v33 = *(CFArrayRef *)buf;
    if (!*(void *)buf) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if (VTP_SetPktType(*(_DWORD *)(v4 + 48), 48) != -1)
  {
    uint64_t v5 = _VCTransportStreamVTPSetRemoteSSRCOnVFD(*(_DWORD *)(v4 + 48), (uint64_t)a2, @"RTPRemoteSSRC");
    if ((v5 & 0x80000000) == 0)
    {
      int v7 = *(_DWORD *)(v4 + 48);
      CFArrayRef theArray = 0;
      if (v7 == -1)
      {
        uint64_t v23 = 2150760449;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCTransportStreamVTPSetPacketFilter_cold_4();
          }
        }
      }
      else
      {
        uint64_t v8 = VCPacketFilterGetCMBaseObject(a2, v6);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        int v21 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v10 + 48);
        if (!v21
          || (uint64_t v22 = v21(v8, @"RTPPayloadList", *MEMORY[0x1E4F1CF80], &theArray), (v22 & 0x80000000) != 0)
          || (uint64_t v23 = v22, !theArray))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            uint64_t v31 = VRTraceErrorLogLevelToCSTR();
            CFTypeRef v32 = *MEMORY[0x1E4F47A50];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = v31;
              __int16 v44 = 2080;
              char v45 = "_VCTransportStreamVTPSetPayloadListOnVFD";
              __int16 v46 = 1024;
              int v47 = 588;
              _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Payload list not set on filter", buf, 0x1Cu);
            }
          }
          uint64_t v27 = 0;
          uint64_t v23 = 0;
          goto LABEL_38;
        }
        int Count = CFArrayGetCount(theArray);
        int v25 = Count;
        if (Count)
        {
          uint64_t v26 = (char *)malloc_type_malloc(4 * Count, 0x100004052888210uLL);
          if (v26)
          {
            uint64_t v27 = v26;
            if (v25 >= 1)
            {
              CFIndex v28 = 0;
              __int16 v29 = v26;
              do
              {
                CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v28);
                CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v29);
                ++v28;
                v29 += 4;
              }
              while (v25 != v28);
            }
            if (VTP_SetPayloadList(v7, v25, v27) == -1)
            {
              uint64_t v23 = *__error() | 0xC0320000;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                  _VCTransportStreamVTPSetPacketFilter_cold_7();
                }
              }
            }
            goto LABEL_38;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          {
            uint64_t v27 = 0;
            uint64_t v23 = 2150760451;
            goto LABEL_38;
          }
          VRTraceErrorLogLevelToCSTR();
          uint64_t v23 = 2150760451;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            _VCTransportStreamVTPSetPacketFilter_cold_6();
          }
        }
        else
        {
          uint64_t v23 = 2150760449;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCTransportStreamVTPSetPacketFilter_cold_5();
            }
          }
        }
      }
      uint64_t v27 = 0;
LABEL_38:
      free(v27);
      goto LABEL_39;
    }
    return v5;
  }
  uint64_t v23 = *__error() | 0xC0320000;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCTransportStreamVTPSetPacketFilter_cold_3();
    }
  }
  return v23;
}

uint64_t _VCTransportStreamVTPCopyPacketFilter(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFTypeRef v3 = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 40);
      if (v3) {
        CFTypeRef v3 = CFRetain(v3);
      }
      uint64_t v4 = 0;
      *a2 = v3;
    }
    else
    {
      uint64_t v4 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPCopyPacketFilter_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPCopyPacketFilter_cold_1();
      }
    }
  }
  return v4;
}

uint64_t _VCTransportStreamVTPSetReceivedHandler(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    return VCTransportStreamCommonSetReceivedHandler(DerivedStorage, a2);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPSetReceivedHandler_cold_1();
      }
    }
    return 2150760449;
  }
}

uint64_t _VCTransportStreamVTPPerformReceive(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 32))
  {
    uint64_t v5 = 2150760504;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_10;
    }
    uint64_t v9 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    *(_DWORD *)int buf = 136315650;
    uint64_t v18 = v9;
    __int16 v19 = 2080;
    uint64_t v20 = "_VCTransportStreamVTPPerformReceive";
    __int16 v21 = 1024;
    int v22 = 451;
    uint64_t v11 = " [%s] %s:%d receivedHandler not set";
LABEL_20:
    _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x1Cu);
    goto LABEL_10;
  }
  uint64_t v3 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 8) != 2)
  {
    uint64_t v5 = 2150760509;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_10;
    }
    uint64_t v12 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    *(_DWORD *)int buf = 136315650;
    uint64_t v18 = v12;
    __int16 v19 = 2080;
    uint64_t v20 = "_VCTransportStreamVTPPerformReceive";
    __int16 v21 = 1024;
    int v22 = 452;
    uint64_t v11 = " [%s] %s:%d Cannot perform receive. Not in activated state";
    goto LABEL_20;
  }
  if (!*(unsigned char *)(DerivedStorage + 12))
  {
    uint64_t v5 = 2150760509;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      goto LABEL_10;
    }
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    uint64_t v10 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    *(_DWORD *)int buf = 136315650;
    uint64_t v18 = v13;
    __int16 v19 = 2080;
    uint64_t v20 = "_VCTransportStreamVTPPerformReceive";
    __int16 v21 = 1024;
    int v22 = 453;
    uint64_t v11 = " [%s] %s:%d Trying to perform receive on a transportStream that is not externally scheduled";
    goto LABEL_20;
  }
  uint64_t v4 = VTP_Recvfrom(*(_DWORD *)(DerivedStorage + 48), &v16);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v5 = v4;
    int v6 = *(_DWORD *)(v3 + 8);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v6 == 3)
    {
      uint64_t v5 = 2150760515;
      if (ErrorLogLevelForModule >= 7)
      {
        uint64_t v14 = VRTraceErrorLogLevelToCSTR();
        uint64_t v15 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315650;
          uint64_t v18 = v14;
          __int16 v19 = 2080;
          uint64_t v20 = "_VCTransportStreamVTPPerformReceive";
          __int16 v21 = 1024;
          int v22 = 457;
          _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Transport stream deactivated", buf, 0x1Cu);
          uint64_t v5 = 2150760515;
        }
      }
    }
    else if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPPerformReceive_cold_1();
      }
    }
  }
  else
  {
    uint64_t v5 = _VCTransportStreamVTPHandlePacketReceived(a1, v16);
  }
LABEL_10:
  VTP_ReleasePacket((void **)&v16);
  return v5;
}

uint64_t _VCTransportStreamVTPActivate(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(DerivedStorage + 8) == 1)
    {
      uint64_t v3 = DerivedStorage;
      if (!*(unsigned char *)(DerivedStorage + 12))
      {
        uint64_t v4 = CMBaseObjectGetDerivedStorage();
        if (*(_DWORD *)(v4 + 8) != 1)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              _VCTransportStreamVTPActivate_cold_3();
            }
          }
          return 2150760509;
        }
        uint64_t v5 = v4;
        *(_OWORD *)(v4 + 68) = 0u;
        int v6 = (_OWORD *)(v4 + 68);
        *(_OWORD *)(v4 + 164) = 0u;
        *(_OWORD *)(v4 + 180) = 0u;
        *(_OWORD *)(v4 + 132) = 0u;
        *(_OWORD *)(v4 + 148) = 0u;
        *(_OWORD *)(v4 + 100) = 0u;
        *(_OWORD *)(v4 + 116) = 0u;
        *(_OWORD *)(v4 + 84) = 0u;
        int v7 = *(_DWORD *)(v4 + 48);
        if (__darwin_check_fd_set_overflow(v7, (const void *)(v4 + 68), 0)) {
          *(_DWORD *)((char *)v6 + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v7;
        }
        *(void *)uint64_t v13 = MEMORY[0x1E4F143A8];
        *(void *)&v13[8] = 0x40000000;
        *(void *)&v13[16] = ___VCTransportStreamVTPRegisterPacketCallback_block_invoke;
        *(void *)&long long v14 = &__block_descriptor_tmp_20;
        *((void *)&v14 + 1) = a1;
        *(_DWORD *)(v5 + 196) = VTP_RegisterPacketCallback(v6, a1, v13);
      }
      *(_DWORD *)(v3 + 8) = 2;
      if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
        return 0;
      }
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      if (!*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          _VCTransportStreamVTPActivate_cold_2();
        }
        return 0;
      }
      uint64_t v11 = 0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v13 = 136315906;
        *(void *)&v13[4] = v8;
        *(_WORD *)&v13[12] = 2080;
        *(void *)&v13[14] = "_VCTransportStreamVTPActivate";
        *(_WORD *)&v13[22] = 1024;
        LODWORD(v14) = 387;
        WORD2(v14) = 2048;
        *(void *)((char *)&v14 + 6) = a1;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", v13, 0x26u);
        return 0;
      }
    }
    else
    {
      uint64_t v11 = 2150760509;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPActivate_cold_4();
        }
      }
    }
  }
  else
  {
    uint64_t v11 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPActivate_cold_1();
      }
    }
  }
  return v11;
}

uint64_t _VCTransportStreamVTPDeactivate(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(DerivedStorage + 8) == 2)
    {
      uint64_t v3 = DerivedStorage;
      *(_DWORD *)(DerivedStorage + 8) = 3;
      if (!*(unsigned char *)(DerivedStorage + 12))
      {
        uint64_t v4 = CMBaseObjectGetDerivedStorage();
        int v5 = *(_DWORD *)(v4 + 196);
        if (v5 != -1)
        {
          VTP_UnregisterPacketCallback(v5);
          *(_DWORD *)(v4 + 196) = -1;
        }
      }
      VCCloseVFDIfValid(*(unsigned int *)(v3 + 48));
      *(_DWORD *)(v3 + 48) = -1;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      uint64_t v6 = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        uint64_t v8 = *MEMORY[0x1E4F47A50];
        uint64_t v6 = 0;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 136315906;
          uint64_t v11 = v7;
          __int16 v12 = 2080;
          uint64_t v13 = "_VCTransportStreamVTPDeactivate";
          __int16 v14 = 1024;
          int v15 = 488;
          __int16 v16 = 2048;
          uint64_t v17 = a1;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v10, 0x26u);
          return 0;
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    {
      return 2150760509;
    }
    else
    {
      VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = 2150760509;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPDeactivate_cold_2();
      }
    }
  }
  else
  {
    uint64_t v6 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPDeactivate_cold_1();
      }
    }
  }
  return v6;
}

uint64_t _VCTransportStreamVTPSetRemoteSSRCOnVFD(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFNumberRef number = 0;
  if (a2)
  {
    if (!a3)
    {
      uint64_t v10 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_2();
        }
      }
      goto LABEL_18;
    }
    if (a1 == -1)
    {
      uint64_t v10 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_3();
        }
      }
      goto LABEL_18;
    }
    uint64_t CMBaseObject = VCPacketFilterGetCMBaseObject(a2, a2);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, CFNumberRef *))(v7 + 48);
    if (v8)
    {
      uint64_t v9 = v8(CMBaseObject, a3, *MEMORY[0x1E4F1CF80], &number);
      if ((v9 & 0x80000000) == 0)
      {
        uint64_t v10 = v9;
        if (number)
        {
          int valuePtr = 0;
          CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
          if (VTP_SetRemoteSSRC(a1, valuePtr) == -1)
          {
            uint64_t v10 = *__error() | 0xC0320000;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_4();
              }
            }
          }
          goto LABEL_18;
        }
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      __int16 v12 = *MEMORY[0x1E4F47A50];
      uint64_t v10 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      *(_DWORD *)int buf = 136315650;
      uint64_t v17 = v11;
      __int16 v18 = 2080;
      __int16 v19 = "_VCTransportStreamVTPSetRemoteSSRCOnVFD";
      __int16 v20 = 1024;
      int v21 = 547;
      _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Remote SSRC not set on filter", buf, 0x1Cu);
    }
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
      return v10;
    }
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_1();
    }
  }
LABEL_18:
  if (number) {
    CFRelease(number);
  }
  return v10;
}

uint64_t _VCTransportStreamVTPHandlePacketReceived(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    if (*(_DWORD *)(DerivedStorage + 8) == 2)
    {
      if (*(void *)(DerivedStorage + 32))
      {
        v11[7] = unk_1E25A3178;
        _OWORD v11[8] = xmmword_1E25A3188;
        memset(&v11[9], 170, 24);
        memset(v11, 170, 112);
        VCGetVCPacketWithVTPPacket(a2, (uint64_t)v11);
        (*(void (**)(void))(*(void *)(v4 + 32) + 16))();
        VCPacketInvalidate((uint64_t *)v11);
        return 0;
      }
      uint64_t v5 = 2150760504;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v10 = VRTraceErrorLogLevelToCSTR();
        uint64_t v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315650;
          uint64_t v13 = v10;
          __int16 v14 = 2080;
          int v15 = "_VCTransportStreamVTPHandlePacketReceived";
          __int16 v16 = 1024;
          int v17 = 433;
          uint64_t v9 = " [%s] %s:%d receivedHandler not set";
          goto LABEL_15;
        }
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
        return 2150760509;
      }
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      uint64_t v8 = *MEMORY[0x1E4F47A50];
      uint64_t v5 = 2150760509;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315650;
        uint64_t v13 = v7;
        __int16 v14 = 2080;
        int v15 = "_VCTransportStreamVTPHandlePacketReceived";
        __int16 v16 = 1024;
        int v17 = 432;
        uint64_t v9 = " [%s] %s:%d Dropping packet. Not in activated state";
LABEL_15:
        _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x1Cu);
      }
    }
  }
  else
  {
    uint64_t v5 = 2150694913;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCTransportStreamVTPHandlePacketReceived_cold_1();
      }
    }
  }
  return v5;
}

void VCMediaControlInfo_SetDelegateAndVTable(uint64_t a1, CFTypeRef cf, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1 && a3)
  {
    if (cf) {
      CFRetain(cf);
    }
    *(void *)(a1 + 24) = cf;
    *(void *)(a1 + 32) = *a3;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v6 = VRTraceErrorLogLevelToCSTR();
    uint64_t v7 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136316162;
      uint64_t v9 = v6;
      __int16 v10 = 2080;
      uint64_t v11 = "VCMediaControlInfo_SetDelegateAndVTable";
      __int16 v12 = 1024;
      int v13 = 30;
      __int16 v14 = 2048;
      uint64_t v15 = a1;
      __int16 v16 = 2048;
      int v17 = a3;
      _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance=%p or delegateVTable=%p passed", (uint8_t *)&v8, 0x30u);
    }
  }
}

uint64_t VCMediaControlInfo_SerializedSize(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 16);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaControlInfo_SerializedSize_cold_1();
    }
  }
  return 0;
}

void VCMediaControlInfo_SerializeBuffer()
{
}

void VCMediaControlInfo_Invalidate(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)(a1 + 16) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v1 = VRTraceErrorLogLevelToCSTR();
    uint64_t v2 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315650;
      uint64_t v4 = v1;
      __int16 v5 = 2080;
      uint64_t v6 = "VCMediaControlInfo_Invalidate";
      __int16 v7 = 1024;
      int v8 = 94;
      _os_log_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil context passed", (uint8_t *)&v3, 0x1Cu);
    }
  }
}

void VCMediaControlInfoDispose(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(void *)(a1 + 24) && (uint64_t v2 = *(void (**)(void))(a1 + 32)) != 0)
    {
      v2();
      int v3 = *(const void **)(a1 + 24);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(a1 + 24) = 0;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      __int16 v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 24);
        uint64_t v7 = *(void *)(a1 + 32);
        int v8 = 136316418;
        uint64_t v9 = v4;
        __int16 v10 = 2080;
        uint64_t v11 = "VCMediaControlInfoDispose";
        __int16 v12 = 1024;
        int v13 = 108;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 2048;
        uint64_t v17 = v6;
        __int16 v18 = 2048;
        uint64_t v19 = v7;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d instance=%p nil delegate=%p or disposeControlInfo=%p passed", (uint8_t *)&v8, 0x3Au);
      }
    }
  }
}

void VCMediaControlInfo_SetVersion(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 40) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaControlInfo_SetVersion_cold_1();
    }
  }
}

uint64_t VCMediaControlInfoIPCamera_SerializedSize(uint64_t a1)
{
  if (a1)
  {
    if (*(_WORD *)(a1 + 8))
    {
      uint64_t result = 8;
      *(void *)(a1 + 16) = 8;
    }
    else
    {
      return *(void *)(a1 + 16);
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoIPCamera_SerializedSize_cold_1();
      }
    }
    return 0;
  }
  return result;
}

uint64_t VCMediaControlInfoIPCamera_SerializeBuffer(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  if (a1)
  {
    if (a2)
    {
      if ((*(_WORD *)(a1 + 8) & 1) == 0)
      {
        if (*(void *)(a1 + 16) <= a3)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
            return 2150563857;
          }
          VRTraceErrorLogLevelToCSTR();
          uint64_t v4 = 2150563857;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCMediaControlInfoIPCamera_SerializeBuffer_cold_4();
          }
          return v4;
        }
        goto LABEL_19;
      }
      *(void *)(a1 + 16) = 8;
      if (a3 <= 7)
      {
LABEL_19:
        uint64_t v4 = 2150563854;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            VCMediaControlInfoIPCamera_SerializeBuffer_cold_3();
            return 2150563854;
          }
        }
        return v4;
      }
      *a2 = *(void *)(a1 + 64);
      uint64_t v4 = 0;
      if (a4) {
        *a4 = 8;
      }
    }
    else
    {
      uint64_t v4 = 2150563841;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCMediaControlInfoIPCamera_SerializeBuffer_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoIPCamera_SerializeBuffer_cold_1();
      }
    }
  }
  return v4;
}

uint64_t VCMediaControlInfoSerializeWithData(unsigned __int16 *a1, _WORD *a2, unint64_t a3, unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  if (!a1 || !a2 || !a4)
  {
    uint64_t v21 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoSerializeWithData_cold_5();
      }
    }
    return v21;
  }
  int v5 = *a4;
  if (v5 == 2)
  {
    uint64_t v6 = 10;
    if (!a4[2]) {
      uint64_t v6 = 6;
    }
    if (a4[5]) {
      v6 += 4;
    }
  }
  else
  {
    uint64_t v6 = 6;
  }
  uint64_t v7 = 14;
  if (!a4[4]) {
    uint64_t v7 = 10;
  }
  uint64_t v8 = v7 + v6;
  if (v7 + v6 > a3)
  {
    uint64_t v21 = 2150563854;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoSerializeWithData_cold_1();
      }
    }
    return v21;
  }
  if (!a4[1])
  {
    uint64_t v21 = 2150563857;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoSerializeWithData_cold_2();
      }
    }
    return v21;
  }
  if ((v5 - 1) >= 2)
  {
    uint64_t v21 = 2150563857;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoSerializeWithData_cold_4();
      }
    }
    return v21;
  }
  if (a4[2]) {
    LOWORD(v9) = 5;
  }
  else {
    LOWORD(v9) = 1;
  }
  if (a4[5]) {
    LOWORD(v9) = v9 | 8;
  }
  a2[2] = bswap32(*a1) >> 16;
  if (a1[4] >= 0x10u) {
    a1[4] = 15;
  }
  __int16 v10 = a1 + 2;
  if (a1[2] >= 0x10u) {
    *__int16 v10 = 15;
  }
  int v11 = *a4;
  if (v11 == 2)
  {
    unsigned int v12 = *((_DWORD *)a1 + 3);
    __int16 v10 = a1 + 4;
  }
  else
  {
    if (v11 != 1)
    {
      int v13 = a2 + 3;
      goto LABEL_31;
    }
    unsigned int v12 = a1[1];
  }
  a2[3] = bswap32(v12) >> 16;
  a2[4] = bswap32(a1[5] & 0xFFF | ((unsigned __int16)*v10 << 12)) >> 16;
  int v13 = a2 + 5;
LABEL_31:
  if (a4[3])
  {
    unsigned int v14 = *((_DWORD *)a1 + 5);
    if (v14 >= 0xFFFF) {
      unsigned int v14 = 0xFFFF;
    }
    *int v13 = bswap32(v14) >> 16;
    v13[1] = bswap32(a1[12]) >> 16;
    unsigned int v15 = *((_DWORD *)a1 + 7);
    if (v15 >= 0xFFFF) {
      unsigned int v15 = 0xFFFF;
    }
    v13[2] = bswap32(v15) >> 16;
    __int16 v16 = (char *)(v13 + 3);
    if (*a4 == 2)
    {
      if (!a4[2]
        || (v13[3] = bswap32(a1[3] & 0xFFF | (a1[2] << 12)) >> 16,
            v13[4] = bswap32(a1[1]) >> 16,
            __int16 v16 = (char *)(v13 + 5),
            *a4 == 2))
      {
        if (a4[5])
        {
          *(_WORD *)__int16 v16 = bswap32(a1[18]) >> 16;
          *((_WORD *)v16 + 1) = bswap32(a1[19]) >> 16;
          v16 += 4;
        }
      }
    }
    if (a4[4])
    {
      LOWORD(v9) = v9 | 2;
      *(_DWORD *)__int16 v16 = *((_DWORD *)a1 + 8);
      v16 += 4;
    }
    int v17 = *a4;
    if (v17 == 2)
    {
      unsigned int v18 = bswap32((v8 + 262140) >> 2) >> 16;
      __int16 v19 = v9 | 0x80;
      unsigned int v9 = *((_DWORD *)a1 + 4) / 0x14u;
    }
    else
    {
      if (v17 != 1) {
        goto LABEL_48;
      }
      unsigned int v18 = bswap32((v8 + 262140) >> 2) >> 16;
      __int16 v19 = 64;
    }
    *a2 = v19 | ((_WORD)v9 << 8);
    a2[1] = v18;
LABEL_48:
    int64_t v20 = v16 - (char *)a2;
    if (v16 - (char *)a2 == v8)
    {
      uint64_t v21 = 0;
      *a5 = v8;
    }
    else
    {
      uint64_t v21 = 2150563854;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v23 = VRTraceErrorLogLevelToCSTR();
        __int16 v24 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
        {
          int v25 = 136316162;
          uint64_t v26 = v23;
          __int16 v27 = 2080;
          CFIndex v28 = "VCMediaControlInfoSerializeWithData";
          __int16 v29 = 1024;
          int v30 = 522;
          __int16 v31 = 2048;
          int64_t v32 = v20;
          __int16 v33 = 2048;
          uint64_t v34 = v8;
          _os_log_error_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_ERROR, " [%s] %s:%d bufferFilledSize(%zu) does not match totalLength(%zu)", (uint8_t *)&v25, 0x30u);
        }
      }
    }
    return v21;
  }
  uint64_t v21 = 2150563857;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaControlInfoSerializeWithData_cold_3();
    }
  }
  return v21;
}

uint64_t VCMediaControlInfoUnserializeWithData(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned __int8 *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2 || !a4)
  {
    uint64_t v9 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoUnserializeWithData_cold_5();
      }
    }
    return v9;
  }
  if (*a4 - 1 >= 2)
  {
    uint64_t v9 = 2150563857;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoUnserializeWithData_cold_4();
      }
    }
    return v9;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v6 = *a4;
  int v7 = 6;
  if (v6 == 2)
  {
    int v7 = a4[2] ? 10 : 6;
    if (a4[5]) {
      v7 += 4;
    }
  }
  unint64_t v8 = (v7 + 10);
  if (v8 <= a3)
  {
    if (v6 == 2)
    {
      unsigned int v19 = *a2;
      int v20 = v19 >> 6;
      if (v20 != 2)
      {
        uint64_t v9 = 2150563849;
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return v9;
        }
        uint64_t v40 = VRTraceErrorLogLevelToCSTR();
        uint64_t v38 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          return v9;
        }
        int v41 = *a4;
        int v42 = 136316162;
        uint64_t v43 = v40;
        __int16 v44 = 2080;
        char v45 = "VCMediaControlInfoUnserializeWithData";
        __int16 v46 = 1024;
        int v47 = 581;
        __int16 v48 = 1024;
        *(_DWORD *)BOOL v49 = v20;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v41;
        unsigned int v12 = " [%s] %s:%d Bad version(%u) for FaceTime audio media control info, expecting %u";
        goto LABEL_84;
      }
      unsigned int v21 = a2[1];
      *(_DWORD *)(a1 + 16) = 20 * (v19 >> 8);
      unsigned int v18 = v19 & 0xF;
      if (!v18)
      {
        uint64_t v9 = 2150563857;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          uint64_t v35 = VRTraceErrorLogLevelToCSTR();
          CFDictionaryRef v36 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v42 = 136315650;
            uint64_t v43 = v35;
            __int16 v44 = 2080;
            char v45 = "VCMediaControlInfoUnserializeWithData";
            __int16 v46 = 1024;
            int v47 = 587;
            _os_log_impl(&dword_1E1EA4000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d The remote caller is likely in an incompatible AVConference build, please update to AVConference build latest OR after <rdar://problem/49225282> Fix AFRC feedback FaceTimeMediaControlInfoHeaderAudioV2 in LITTLE_ENDIAN case", (uint8_t *)&v42, 0x1Cu);
          }
        }
        return v9;
      }
      unsigned int v17 = bswap32(v21) >> 14;
    }
    else
    {
      if (v6 == 1)
      {
        unsigned int v15 = *a2;
        int v16 = v15 >> 6;
        if (v16 == 1)
        {
          unsigned int v17 = (bswap32(a2[1]) >> 14) & 0x3FFFC;
          unsigned int v18 = (v15 >> 8) & 0xF;
          goto LABEL_24;
        }
        uint64_t v9 = 2150563849;
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return v9;
        }
        uint64_t v37 = VRTraceErrorLogLevelToCSTR();
        uint64_t v38 = *MEMORY[0x1E4F47A50];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          return v9;
        }
        int v39 = *a4;
        int v42 = 136316162;
        uint64_t v43 = v37;
        __int16 v44 = 2080;
        char v45 = "VCMediaControlInfoUnserializeWithData";
        __int16 v46 = 1024;
        int v47 = 574;
        __int16 v48 = 1024;
        *(_DWORD *)BOOL v49 = v16;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v39;
        unsigned int v12 = " [%s] %s:%d Bad version(%u) for FaceTime audio media control info, expecting %u";
LABEL_84:
        int v13 = v38;
        uint32_t v14 = 40;
        goto LABEL_15;
      }
      unsigned int v17 = 0;
      unsigned int v18 = 0;
    }
LABEL_24:
    if (v17 + 4 != a3)
    {
      uint64_t v9 = 2150563883;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCMediaControlInfoUnserializeWithData_cold_3();
        }
      }
      return v9;
    }
    if (v6 == 1) {
      int v22 = 1;
    }
    else {
      int v22 = (v6 == 2) & (v18 >> 2);
    }
    a4[1] = 1;
    a4[2] = v22;
    BOOL v23 = v6 == 2 && v18 > 7;
    a4[5] = v23;
    *(_WORD *)a1 = bswap32(a2[2]) >> 16;
    if (v6 != 2)
    {
      if (v6 == 1)
      {
        *(_WORD *)(a1 + 2) = bswap32(a2[3]) >> 16;
        unsigned int v24 = bswap32(a2[4]);
        *(_WORD *)(a1 + 4) = v24 >> 28;
        *(_WORD *)(a1 + 10) = HIWORD(v24) & 0xFFF;
      }
      int v25 = 6;
      goto LABEL_45;
    }
    *(_DWORD *)(a1 + 12) = bswap32(a2[3]) >> 16;
    unsigned int v26 = bswap32(a2[4]);
    *(_WORD *)(a1 + 8) = v26 >> 28;
    *(_WORD *)(a1 + 10) = HIWORD(v26) & 0xFFF;
    if (v22)
    {
      unsigned int v27 = bswap32(a2[8]);
      *(_WORD *)(a1 + 4) = v27 >> 28;
      *(_WORD *)(a1 + 6) = HIWORD(v27) & 0xFFF;
      *(_WORD *)(a1 + 2) = bswap32(a2[9]) >> 16;
      CFIndex v28 = a2 + 10;
      if (!v23)
      {
LABEL_40:
        if (v22) {
          int v25 = 10;
        }
        else {
          int v25 = 6;
        }
        if (v23) {
          v25 += 4;
        }
LABEL_45:
        int v29 = v17 - v25;
        *(_DWORD *)(a1 + 20) = bswap32(a2[5]) >> 16;
        *(_WORD *)(a1 + 24) = bswap32(a2[6]) >> 16;
        *(_DWORD *)(a1 + 28) = bswap32(a2[7]) >> 16;
        a4[3] = 1;
        if ((v18 & 2) != 0)
        {
          if (v29 <= 9)
          {
            uint64_t v9 = 2150563883;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                VCMediaControlInfoUnserializeWithData_cold_2();
              }
            }
            return v9;
          }
          int v30 = v29 - 10;
          BOOL v31 = v22 == 0;
          uint64_t v32 = 10;
          if (v31) {
            uint64_t v32 = 6;
          }
          if (v23) {
            v32 += 4;
          }
          if (v6 == 2) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = 6;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)((char *)a2 + v33 + 10);
          a4[4] = 1;
        }
        else
        {
          int v30 = v29 - 6;
        }
        if (!v30) {
          return 0;
        }
        uint64_t v9 = 2150563883;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
            VCMediaControlInfoUnserializeWithData_cold_1();
          }
        }
        return v9;
      }
    }
    else
    {
      CFIndex v28 = a2 + 5;
      if (!v23) {
        goto LABEL_40;
      }
    }
    *(_WORD *)(a1 + 36) = bswap32(*v28) >> 16;
    *(_WORD *)(a1 + 38) = bswap32(v28[1]) >> 16;
    goto LABEL_40;
  }
  uint64_t v9 = 2150563883;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v10 = VRTraceErrorLogLevelToCSTR();
    int v11 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v42 = 136316162;
      uint64_t v43 = v10;
      __int16 v44 = 2080;
      char v45 = "VCMediaControlInfoUnserializeWithData";
      __int16 v46 = 1024;
      int v47 = 565;
      __int16 v48 = 2048;
      *(void *)BOOL v49 = a3;
      *(_WORD *)&v49[8] = 1024;
      int v50 = v8;
      unsigned int v12 = " [%s] %s:%d Bad buffer length(%zu) for FaceTime audio media control info, expecting %u";
      int v13 = v11;
      uint32_t v14 = 44;
LABEL_15:
      _os_log_error_impl(&dword_1E1EA4000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v42, v14);
    }
  }
  return v9;
}

uint64_t VCMediaControlInfoFaceTimeAudio_SerializedSize(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = 10;
    if ((*(unsigned char *)(a1 + 8) & 4) == 0) {
      uint64_t v1 = 6;
    }
    if ((*(unsigned char *)(a1 + 8) & 8) != 0) {
      v1 += 4;
    }
    if (*(unsigned char *)(a1 + 40) == 2) {
      uint64_t v2 = v1;
    }
    else {
      uint64_t v2 = 6;
    }
    uint64_t v3 = 14;
    if ((*(unsigned char *)(a1 + 8) & 2) == 0) {
      uint64_t v3 = 10;
    }
    return v2 + v3;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoFaceTimeAudio_SerializedSize_cold_1();
      }
    }
    return 0;
  }
}

uint64_t VCMediaControlInfoFaceTimeAudio_SerializeBuffer(uint64_t a1, _WORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      int v11 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315906;
          uint64_t v17 = v9;
          __int16 v18 = 2080;
          unsigned int v19 = "VCMediaControlInfoFaceTimeAudio_SerializeBuffer";
          __int16 v20 = 1024;
          int v21 = 1080;
          __int16 v22 = 2112;
          uint64_t v23 = [(id)a1 description];
          _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %@", buf, 0x26u);
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        VCMediaControlInfoFaceTimeAudio_SerializeBuffer_cold_2(v9, (void *)a1);
      }
    }
    v15[0] = *(unsigned char *)(a1 + 40);
    __int16 v12 = *(_WORD *)(a1 + 8);
    v15[1] = v12 & 1;
    v15[2] = (v12 & 4) != 0;
    v15[3] = (v12 & 0x80) != 0;
    v15[4] = (v12 & 2) != 0;
    v15[5] = (v12 & 8) != 0;
    return VCMediaControlInfoSerializeWithData((unsigned __int16 *)(a1 + 88), a2, a3, v15, a4);
  }
  else
  {
    uint64_t v13 = 2150563841;
    if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoFaceTimeAudio_SerializeBuffer_cold_1();
      }
    }
  }
  return v13;
}

void VCMediaControlInfoFaceTimeAudio_SetVideoEnabled(uint64_t a1, char a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 128) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCMediaControlInfoFaceTimeAudio_SetVideoEnabled_cold_1();
    }
  }
}

uint64_t VCMediaControlInfoFaceTimeVideo_SerializedSize(uint64_t a1)
{
  if (a1)
  {
    __int16 v1 = *(_WORD *)(a1 + 8);
    uint64_t v2 = 8;
    if ((v1 & 2) == 0) {
      uint64_t v2 = 4;
    }
    if (v1) {
      v2 += 4;
    }
    *(void *)(a1 + 16) = v2;
    if ((v1 & 4) != 0)
    {
      v2 += *(void *)(a1 + 112);
      *(void *)(a1 + 16) = v2;
    }
    if ((v1 & 8) != 0)
    {
      v2 += 4;
      *(void *)(a1 + 16) = v2;
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoFaceTimeVideo_SerializedSize_cold_1();
      }
    }
    return 0;
  }
  return v2;
}

uint64_t VCMediaControlInfoFaceTimeVideo_SerializeBuffer(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      unint64_t v8 = VCMediaControlInfoFaceTimeVideo_SerializedSize(a1);
      unint64_t v9 = v8;
      if (v8 > a3)
      {
        uint64_t v15 = 2150563854;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v17 = VRTraceErrorLogLevelToCSTR();
          __int16 v18 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            int v19 = 136316162;
            uint64_t v20 = v17;
            __int16 v21 = 2080;
            __int16 v22 = "VCMediaControlInfoFaceTimeVideo_SerializeBuffer";
            __int16 v23 = 1024;
            int v24 = 1578;
            __int16 v25 = 2048;
            unint64_t v26 = a3;
            __int16 v27 = 2048;
            unint64_t v28 = v9;
            _os_log_error_impl(&dword_1E1EA4000, v18, OS_LOG_TYPE_ERROR, " [%s] %s:%d Not enough buffer(%zu) for media control info, need %zu", (uint8_t *)&v19, 0x30u);
            return 2150563854;
          }
        }
      }
      else
      {
        unsigned __int8 v10 = *(unsigned char *)(a1 + 40) << 6;
        __int16 v11 = *(_WORD *)(a1 + 8);
        if ((v11 & 0x10) != 0) {
          v10 |= *(unsigned char *)(a1 + 64) & 0x3F;
        }
        __int16 v12 = v10;
        if ((*(_WORD *)(a1 + 8) & 0x100) != 0) {
          __int16 v12 = v10 | (unsigned __int16)(*(unsigned __int8 *)(a1 + 65) << 12);
        }
        if ((v11 & 2) != 0)
        {
          v12 |= 0x200u;
          *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 68);
          uint64_t v13 = 8;
        }
        else
        {
          uint64_t v13 = 4;
        }
        if ((v11 & 1) != 0 && (v12 & 0xC0) == 0x80)
        {
          v12 |= 0x100u;
          *(_WORD *)(a2 + v13) = bswap32(*(unsigned __int16 *)(a1 + 72)) >> 16;
          *(_WORD *)(a2 + (v13 | 2)) = bswap32(*(unsigned __int16 *)(a1 + 74)) >> 16;
          v13 += 4;
          __int16 v11 = *(_WORD *)(a1 + 8);
        }
        unsigned int v14 = bswap32((v8 + 262140) >> 2);
        if ((v11 & 4) != 0)
        {
          v12 |= 0x400u;
          memcpy((void *)(a2 + v13), (const void *)(a1 + 76), *(void *)(a1 + 112));
          v13 += *(void *)(a1 + 112);
          __int16 v11 = *(_WORD *)(a1 + 8);
        }
        if ((v11 & 8) != 0)
        {
          v12 |= 0x800u;
          *(_DWORD *)(a2 + v13) = *(_DWORD *)(a1 + 120);
        }
        *(_WORD *)a2 = v12;
        *(_WORD *)(a2 + 2) = HIWORD(v14);
        uint64_t v15 = 0;
        if (a4) {
          *a4 = v9;
        }
      }
    }
    else
    {
      uint64_t v15 = 2150563841;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCMediaControlInfoFaceTimeVideo_SerializeBuffer_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v15 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoFaceTimeVideo_SerializeBuffer_cold_1();
      }
    }
  }
  return v15;
}

uint64_t VCMediaControlInfoMultiwayAudio_SerializedSize(uint64_t a1)
{
  if (a1)
  {
    __int16 v1 = *(_WORD *)(a1 + 8);
    if (v1) {
      *(void *)(a1 + 16) += 4;
    }
    uint64_t v2 = *(void *)(a1 + 16);
    if ((v1 & 2) != 0)
    {
      v2 += 4;
      *(void *)(a1 + 16) = v2;
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoMultiwayAudio_SerializedSize_cold_1();
      }
    }
    return 0;
  }
  return v2;
}

uint64_t VCMediaControlInfoMultiwayAudio_SerializeBuffer(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t *a4)
{
  if (a1)
  {
    if (a2)
    {
      __int16 v4 = *(_WORD *)(a1 + 8);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v4) {
        v5 += 4;
      }
      if ((v4 & 2) != 0) {
        v5 += 4;
      }
      if ((v4 & 3) != 0) {
        *(void *)(a1 + 16) = v5;
      }
      if (v5 > a3)
      {
        uint64_t v6 = 2150563854;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_3();
            return 2150563854;
          }
        }
      }
      else
      {
        if (v4)
        {
          if ((v4 & 2) != 0)
          {
            *a2 = *(_DWORD *)(a1 + 64);
            a2[1] = *(_DWORD *)(a1 + 68);
            uint64_t v6 = 0;
            if (a4) {
              *a4 = v5;
            }
            return v6;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            uint64_t v6 = 2150563857;
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_5();
            }
            return v6;
          }
          return 2150563857;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 3) {
          return 2150563857;
        }
        VRTraceErrorLogLevelToCSTR();
        uint64_t v6 = 2150563857;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_4();
        }
      }
    }
    else
    {
      uint64_t v6 = 2150563841;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v6 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_1();
      }
    }
  }
  return v6;
}

uint64_t VCMediaControlInfoGetSize(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 48))();
  }
  return result;
}

uint64_t VCMediaControlInfoSerialize(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(a1 + 56))();
  }
  else {
    return 2150563841;
  }
}

uint64_t VCMediaControlInfoSetInfoUnserialized(void *a1, const char *a2, uint64_t a3)
{
  return [a1 setInfoUnserialized:a2 type:a3];
}

uint64_t VCMediaControlInfoGetInfoUnserialized(void *a1, const char *a2, uint64_t a3)
{
  return [a1 getInfoUnserialized:a2 type:a3];
}

BOOL VCMediaControlInfoRTPExtensionVersionIsValid(unsigned __int8 a1)
{
  return a1 - 1 < 2;
}

BOOL VCMediaControlInfo_IsLossStatsEnabled(int a1)
{
  return (a1 - 1) < 2;
}

uint64_t VCMediaControlInfoGetVersion(void *a1)
{
  return [a1 version];
}

uint64_t VCMediaControlInfoGetFECFeedbackVersion(void *a1)
{
  return [a1 fecFeedbackVersion];
}

uint64_t VCMediaControlInfoSetInfo(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return [a1 setInfo:a3 size:a4 type:a2];
}

uint64_t VCMediaControlInfoHasInfo(void *a1, const char *a2)
{
  return [a1 hasInfoType:a2];
}

uint64_t VCMediaControlInfoGetInfo(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [a1 getInfo:a3 bufferLength:a4 infoSize:a5 type:a2];
}

void *iPadWiFiScreenDecodingRules(uint64_t a1, double a2, double a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 == 2732.0 && a3 == 2048.0)
  {
    int v7 = &g_DecodingFormatiPadWiFi2732x2048;
  }
  else if (a2 == 2224.0 && a3 == 1668.0)
  {
    int v7 = &g_DecodingFormatiPadWiFi2224x1668;
  }
  else if (a2 == 2388.0 && a3 == 1668.0)
  {
    int v7 = &g_DecodingFormatiPadWiFi2388x1668;
  }
  else
  {
    if ((a2 != 2048.0 || a3 != 1536.0) && (int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v8 = VRTraceErrorLogLevelToCSTR();
      unint64_t v9 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136316162;
        uint64_t v12 = v8;
        __int16 v13 = 2080;
        unsigned int v14 = "iPadWiFiScreenDecodingRules";
        __int16 v15 = 1024;
        int v16 = 100;
        __int16 v17 = 2048;
        double v18 = a2;
        __int16 v19 = 2048;
        double v20 = a3;
        _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Resolution(%f x %f)  not supported. Defaulting to 2048x1536", (uint8_t *)&v11, 0x30u);
      }
    }
    int v7 = &g_DecodingFormatiPadWiFi2048x1536;
  }
  return videoRulesForFormatList_2((uint64_t)v7, 1u, a1);
}

void *videoRulesForFormatList_2(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_opt_new();
  if (v6) {
    BOOL v7 = a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v9 = a2;
    unsigned __int8 v10 = (unsigned int *)(a1 + 8);
    int v11 = (os_log_t *)MEMORY[0x1E4F47A50];
    do
    {
      uint64_t v12 = [VCVideoRule alloc];
      *(float *)&double v13 = (float)*v10;
      uint64_t v14 = [(VCVideoRule *)v12 initWithFrameWidth:*(v10 - 2) frameHeight:*(v10 - 1) frameRate:a3 payload:v13];
      if (v14)
      {
        __int16 v15 = (void *)v14;
        [v6 addObject:v14];
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        __int16 v17 = *v11;
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315650;
          uint64_t v19 = v16;
          __int16 v20 = 2080;
          uint64_t v21 = "videoRulesForFormatList";
          __int16 v22 = 1024;
          int v23 = 48;
          _os_log_error_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create video rule for secondary screen !", buf, 0x1Cu);
        }
      }
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  return v6;
}

uint64_t VCCallSession_SetUpRemoteAttributes(__CVBuffer *a1, uint64_t a2, char a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14, uint64_t *a15, VideoAttributes **a16)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  int Width = CVPixelBufferGetWidth(a1);
  int Height = CVPixelBufferGetHeight(a1);
  *(void *)&long long v32 = -1;
  *((void *)&v32 + 1) = -1;
  long long v86 = v32;
  long long v87 = v32;
  VideoUtil_GetVisibleRect(a1, (double *)&v86);
  int v33 = *(double *)&v87 < *((double *)&v87 + 1) || (a2 & 2) == 0;
  if ((a2 & 0x80) == 0)
  {
    uint64_t v34 = 0;
    uint64_t result = 0;
    goto LABEL_63;
  }
  CFDictionaryRef v36 = (void *)VCVideoCaptureServer_CopyLocalVideoAttributes((uint64_t)+[VCVideoCaptureServer VCVideoCaptureServerSingleton]);
  int v84 = Width;
  int v85 = Height;
  if ([v36 orientation]) {
    int v37 = [v36 orientation] == 1;
  }
  else {
    int v37 = 1;
  }
  int v38 = v33 ^ v37;
  if (*(double *)&v87 >= *((double *)&v87 + 1)) {
    double v39 = *((double *)&v87 + 1) / *(double *)&v87;
  }
  else {
    double v39 = *(double *)&v87 / *((double *)&v87 + 1);
  }
  double v79 = a10;
  double v80 = a9;
  double v81 = a12;
  double v82 = a11;
  float v40 = v39;
  id v41 = +[VCVideoCaptureServer VCVideoCaptureServerSingleton];
  if (v33)
  {
    [v41 localScreenRatioForScreenOrientation:0];
    double v43 = v42;
    double v45 = v44;
    objc_msgSend(+[VCVideoCaptureServer VCVideoCaptureServerSingleton](VCVideoCaptureServer, "VCVideoCaptureServerSingleton"), "localExpectedRatioForScreenOrientation:", 0);
    double v48 = v46;
    if (a3)
    {
      if (v38) {
        goto LABEL_24;
      }
    }
    else
    {
      if (v46 / v47 < v40) {
        char v54 = v33 ^ v37;
      }
      else {
        char v54 = 0;
      }
      if (v54) {
        goto LABEL_24;
      }
    }
    double v48 = v43;
    double v47 = v45;
LABEL_24:
    double v55 = v47 / v48;
    goto LABEL_31;
  }
  [v41 localScreenRatioForScreenOrientation:3];
  double v50 = v49;
  double v52 = v51;
  objc_msgSend(+[VCVideoCaptureServer VCVideoCaptureServerSingleton](VCVideoCaptureServer, "VCVideoCaptureServerSingleton"), "localExpectedRatioForScreenOrientation:", 3);
  double v48 = v53;
  if (a3)
  {
    if (v38) {
      goto LABEL_30;
    }
  }
  else
  {
    if (v47 / v53 < v40) {
      char v56 = v33 ^ v37;
    }
    else {
      char v56 = 0;
    }
    if (v56) {
      goto LABEL_30;
    }
  }
  double v48 = v50;
  double v47 = v52;
LABEL_30:
  double v55 = v48 / v47;
LABEL_31:
  double v83 = v47;
  if (!a4
    && VCCallSession_SetUpRemoteAttributes_lastRemotePortrait == v33
    && VCCallSession_SetUpRemoteAttributes_lastLocalPortrait == v37)
  {
    uint64_t v34 = 0;
    int v58 = v84;
    int v57 = v85;
  }
  else
  {
    int v59 = objc_alloc_init(VideoAttributes);
    uint64_t v34 = v59;
    if (v37) {
      double v60 = a6;
    }
    else {
      double v60 = a8;
    }
    if (v37) {
      double v61 = a5;
    }
    else {
      double v61 = a7;
    }
    double v62 = v81;
    if (v33) {
      double v62 = v79;
    }
    double v63 = v82;
    if (v33) {
      double v63 = v80;
    }
    if (!v38)
    {
      double v61 = v63;
      double v60 = v62;
    }
    -[VideoAttributes setRatio:](v59, "setRatio:", v61, v60);
    -[VideoAttributes setOrientation:](v34, "setOrientation:", [v36 orientation]);
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    uint64_t v65 = (os_log_t *)MEMORY[0x1E4F47A50];
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v66 = VRTraceErrorLogLevelToCSTR();
      unint64_t v67 = *v65;
      if (os_log_type_enabled(*v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136316418;
        uint64_t v89 = v66;
        __int16 v90 = 2080;
        uint64_t v91 = "VCCallSession_SetUpRemoteAttributes";
        __int16 v92 = 1024;
        int v93 = 348;
        __int16 v94 = 1024;
        *(_DWORD *)unsigned int v95 = a2;
        *(_WORD *)&v95[4] = 1024;
        *(_DWORD *)&v95[6] = v37;
        __int16 v96 = 1024;
        int v97 = v33;
        _os_log_impl(&dword_1E1EA4000, v67, OS_LOG_TYPE_DEFAULT, "VCCallSession [%s] %s:%d [AR_RX] cameraStatusBits=0x%08x, localPortrait=%d, remotePortrait=%d", buf, 0x2Eu);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v68 = VRTraceErrorLogLevelToCSTR();
      BOOL v69 = *v65;
      if (os_log_type_enabled(*v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315906;
        uint64_t v89 = v68;
        __int16 v90 = 2080;
        uint64_t v91 = "VCCallSession_SetUpRemoteAttributes";
        __int16 v92 = 1024;
        int v93 = 349;
        __int16 v94 = 2112;
        *(void *)unsigned int v95 = v34;
        _os_log_impl(&dword_1E1EA4000, v69, OS_LOG_TYPE_DEFAULT, "VCCallSession [%s] %s:%d [AR_RX] remoteScreenAttributes=%@", buf, 0x26u);
      }
    }
    int v58 = v84;
    int v57 = v85;
  }
  VCCallSession_SetUpRemoteAttributes_lastRemotePortrait = v33;
  VCCallSession_SetUpRemoteAttributes_lastLocalPortrait = v37;

  double v70 = *((double *)&v87 + 1);
  double v71 = *(double *)&v87;
  if (*(double *)&v87 / *((double *)&v87 + 1) <= v55)
  {
    *((double *)&v86 + 1) = (*((double *)&v87 + 1) - *(double *)&v87 / v55) * 0.5 + *((double *)&v86 + 1);
    *((double *)&v87 + 1) = *(double *)&v87 / v55;
    double v70 = *(double *)&v87 / v55;
  }
  else
  {
    *(double *)&long long v86 = (*(double *)&v87 - v55 * *((double *)&v87 + 1)) * 0.5 + *(double *)&v86;
    *(double *)&long long v87 = v55 * *((double *)&v87 + 1);
    double v71 = v55 * *((double *)&v87 + 1);
  }
  double v72 = (double)v58;
  if ((a2 & 0x10) != 0)
  {
    double v48 = (double)v57;
    if (v34) {
      -[VideoAttributes setRatio:](v34, "setRatio:", (double)v57, (double)v58);
    }
    double v75 = 1.0;
    double v73 = 0.0;
    double v74 = 0.0;
    double v76 = 1.0;
  }
  else
  {
    double v73 = *(double *)&v86 / v72;
    double v74 = *((double *)&v86 + 1) / (double)v57;
    double v75 = v71 / v72;
    double v72 = v83;
    double v76 = v70 / (double)v57;
  }
  double v77 = [VideoAttributes alloc];
  LODWORD(v78) = 1.0;
  uint64_t result = -[VideoAttributes initWithCameraStatusBits:aspectRatio:contentsRect:scaleFactor:](v77, "initWithCameraStatusBits:aspectRatio:contentsRect:scaleFactor:", a2, v48, v72, v73, v74, v75, v76, v78);
LABEL_63:
  *a15 = result;
  *a16 = v34;
  return result;
}

uint64_t GCKVoiceChatOnPlayVideo(void *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  return [a1 onPlayVideo:a2 frameTime:&v5 cameraStatusBits:a4];
}

double ComputeVisibleAspectRatioWithRemoteScreenAspectRatio(int a1, int a2, double a3, double a4, double a5, double a6)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v19 = a2;
  int v20 = a1;
  double v10 = (double)a1;
  double v11 = (double)a2;
  if (+[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", (double)a1, (double)a2, a3, a4) == -1&& +[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", v10, v11, a5, a6) == -1)
  {
    int64_t v18 = +[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", a3, a4, a5, a6);
    if (v18 == 1) {
      double v13 = a5;
    }
    else {
      double v13 = a3;
    }
    if (v18 == 1) {
      double v14 = a6;
    }
    else {
      double v14 = a4;
    }
  }
  else if (+[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", v10, v11, a3, a4) == 1&& +[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", v10, v11, a5, a6) == 1)
  {
    int64_t v12 = +[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", a3, a4, a5, a6);
    if (v12 == 1) {
      double v13 = a3;
    }
    else {
      double v13 = a5;
    }
    if (v12 == 1) {
      double v14 = a4;
    }
    else {
      double v14 = a6;
    }
  }
  else
  {
    SimplifyRatio(&v20, &v19);
    double v13 = (double)v20;
    double v14 = (double)v19;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v15 = VRTraceErrorLogLevelToCSTR();
    uint64_t v16 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136318722;
      uint64_t v22 = v15;
      __int16 v23 = 2080;
      uint64_t v24 = "ComputeVisibleAspectRatioWithRemoteScreenAspectRatio";
      __int16 v25 = 1024;
      int v26 = 498;
      __int16 v27 = 2048;
      double v28 = a3;
      __int16 v29 = 2048;
      double v30 = a4;
      __int16 v31 = 2048;
      double v32 = a3 / a4;
      __int16 v33 = 2048;
      double v34 = a5;
      __int16 v35 = 2048;
      double v36 = a6;
      __int16 v37 = 2048;
      double v38 = a5 / a6;
      __int16 v39 = 2048;
      double v40 = v10;
      __int16 v41 = 2048;
      double v42 = v11;
      __int16 v43 = 2048;
      double v44 = v10 / v11;
      __int16 v45 = 2048;
      double v46 = v13;
      __int16 v47 = 2048;
      double v48 = v14;
      __int16 v49 = 2048;
      double v50 = v13 / v14;
      _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, "VCCallSession [%s] %s:%d [AR_TX] remoteScreenAspectRatio %.0f:%.0f (%.3f), remoteExpectedAspectRatio %.0f:%.0f (%.3f), encode %.0f:%.0f (%.3f) --> visibleAspectRatio %.0f:%.0f (%.3f)", buf, 0x94u);
    }
  }
  return v13;
}

void _VCStreamInputCaptureSource_OnCaptureVideoFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    __int16 v11 = -21846;
    v8[0] = -1431699456;
    v8[1] = a5;
    char v9 = 0;
    char v10 = a6;
    int v12 = 0;
    int v13 = -1431655936;
    long long v6 = *(_OWORD *)a3;
    uint64_t v7 = *(void *)(a3 + 16);
    VCVideoCapture_DistributeVideoFrame(a1, a2, &v6, (uint64_t)v8);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      _VCStreamInputCaptureSource_OnCaptureVideoFrame_cold_1();
    }
  }
}

uint64_t VCObject_Lock(uint64_t result)
{
  if (result) {
    return pthread_mutex_lock((pthread_mutex_t *)(result + 16));
  }
  return result;
}

uint64_t VCObject_Unlock(uint64_t result)
{
  if (result) {
    return pthread_mutex_unlock((pthread_mutex_t *)(result + 16));
  }
  return result;
}

void sub_1E246553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E24657A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E2467E90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2469810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E2469A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E2469B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AVCPacketRelayDriverThreadStart()
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&g_DriverHandleMutex);
  if (g_DriverHandle != 0xFFFFFFFFLL)
  {
    pthread_mutex_unlock(&g_DriverHandleMutex);
    uint64_t v0 = __error();
    int v1 = 17;
LABEL_3:
    *uint64_t v0 = v1;
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0xE0uLL, 0x102004049390C7CuLL);
  if (!v3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
    {
      VRTraceErrorLogLevelToCSTR();
      if (VRTraceIsOSFaultDisabled())
      {
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          AVCPacketRelayDriverThreadStart_cold_1();
        }
      }
      else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
      {
        AVCPacketRelayDriverThreadStart_cold_2();
      }
    }
    pthread_mutex_unlock(&g_DriverHandleMutex);
    uint64_t v0 = __error();
    int v1 = 12;
    goto LABEL_3;
  }
  __int16 v4 = v3;
  g_Driveruint64_t Handle = CreateHandle();
  pthread_mutex_unlock(&g_DriverHandleMutex);
  if (g_DriverHandle == 0xFFFFFFFFLL)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      char v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        AVCPacketRelayDriverThreadStart_cold_3(v9, v10);
      }
    }
    free(v4);
    uint64_t v0 = __error();
    int v1 = 22;
    goto LABEL_3;
  }
  pthread_rwlock_init((pthread_rwlock_t *)(v4 + 2), 0);
  *__int16 v4 = -1;
  long long v5 = (uint64_t *)(v4 + 54);
  values = @"com.apple.avconference.AVCPacketRelayDriverProc";
  CFDictionaryRef v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v7 = FigThreadCreate();
  if (v6) {
    CFRelease(v6);
  }
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v7)
  {
    if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        AVCPacketRelayDriverThreadStart_cold_4();
      }
    }
    AVCPacketRelayDriverThreadStop();
    return 0xFFFFFFFFLL;
  }
  if (ErrorLogLevelForModule < 7) {
    return 0;
  }
  uint64_t v11 = VRTraceErrorLogLevelToCSTR();
  int v12 = *MEMORY[0x1E4F47A50];
  BOOL v13 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v13)
  {
    uint64_t v14 = *v5;
    *(_DWORD *)int buf = 136315906;
    uint64_t v17 = v11;
    __int16 v18 = 2080;
    int v19 = "AVCPacketRelayDriverThreadStart";
    __int16 v20 = 1024;
    int v21 = 91;
    __int16 v22 = 2048;
    uint64_t v23 = v14;
    _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: AVCPacketRelayDriverProc thread(%p) started...", buf, 0x26u);
    return 0;
  }
  return result;
}

uint64_t AVCPacketRelayDriverProc()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CheckInHandleDebug();
  if (!v0)
  {
    uint64_t v15 = -2144731134;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        AVCPacketRelayDriverProc_cold_1();
      }
    }
    return v15;
  }
  uint64_t v1 = v0;
  v21.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  int v20 = -1431655766;
  uint64_t v2 = pthread_self();
  pthread_getschedparam(v2, &v20, (sched_param *)&v21);
  if (SLODWORD(v21.tv_sec) <= 57) {
    LODWORD(v21.tv_sec) = 58;
  }
  pthread_setschedparam(v2, v20, (const sched_param *)&v21);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    __int16 v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      buf.fds_bits[0] = 136316418;
      *(void *)&buf.fds_bits[1] = v3;
      LOWORD(buf.fds_bits[3]) = 2080;
      *(void *)((char *)&buf.fds_bits[3] + 2) = "setNonDecayingThreadPriority";
      HIWORD(buf.fds_bits[5]) = 1024;
      buf.fds_bits[6] = 317;
      LOWORD(buf.fds_bits[7]) = 1024;
      *(__int32_t *)((char *)&buf.fds_bits[7] + 2) = v21.tv_sec;
      HIWORD(buf.fds_bits[8]) = 1024;
      buf.fds_bits[9] = 50;
      LOWORD(buf.fds_bits[10]) = 1024;
      *(__int32_t *)((char *)&buf.fds_bits[10] + 2) = 20;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverProc: Fix priority at %d, CPU limit (%d, %d).", (uint8_t *)&buf, 0x2Eu);
    }
  }
  buf.fds_bits[0] = 0;
  thread_act_t v5 = MEMORY[0x1E4E582F0]();
  thread_policy_set(v5, 1u, buf.fds_bits, 1u);
  if (proc_setthread_cpupercent())
  {
    buf.fds_bits[0] = 1;
    thread_act_t v6 = MEMORY[0x1E4E582F0]();
    thread_policy_set(v6, 1u, buf.fds_bits, 1u);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        AVCPacketRelayDriverProc_cold_3();
      }
    }
  }
  v21.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v21.__darwin_suseconds_t tv_usec = 0xAAAAAAAAAAAAAAAALL;
  memset(&buf, 0, sizeof(buf));
  pthread_rwlock_rdlock((pthread_rwlock_t *)(v1 + 8));
  if (*(unsigned char *)(v1 + 4))
  {
LABEL_36:
    pthread_rwlock_unlock((pthread_rwlock_t *)(v1 + 8));
    goto LABEL_37;
  }
  while (1)
  {
    int v7 = *(_DWORD *)v1;
    if (*(_DWORD *)v1 == -1)
    {
      int v7 = socket(2, 1, 6);
      *(_DWORD *)uint64_t v1 = v7;
    }
    if (__darwin_check_fd_set_overflow(v7, &buf, 0)) {
      *(__int32_t *)((char *)buf.fds_bits + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v7;
    }
    int v8 = *(_DWORD *)v1;
    for (int i = *(int **)(v1 + 208); i; int i = (int *)*((void *)i + 2))
    {
      unint64_t v10 = *i;
      if (v10 != -1)
      {
        if (__darwin_check_fd_set_overflow(*i, &buf, 0)) {
          *(__int32_t *)((char *)buf.fds_bits + ((v10 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v10;
        }
        if (*i > v8) {
          int v8 = *i;
        }
      }
    }
    pthread_rwlock_unlock((pthread_rwlock_t *)(v1 + 8));
    v21.tv_sec = 5;
    v21.__darwin_suseconds_t tv_usec = 0;
    int v11 = select(v8 + 1, &buf, 0, 0, &v21);
    if (!v11) {
      goto LABEL_35;
    }
    if (v11 != -1)
    {
      pthread_rwlock_rdlock((pthread_rwlock_t *)(v1 + 8));
      for (uint64_t j = *(int **)(v1 + 208); j; uint64_t j = (int *)*((void *)j + 2))
      {
        unint64_t v13 = *j;
        if (v13 != -1)
        {
          if (__darwin_check_fd_set_overflow(*j, &buf, 0))
          {
            if ((*(unsigned int *)((char *)buf.fds_bits + ((v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v13))
            {
              [*((id *)j + 1) readyToRead];
              int v14 = *j;
              if (__darwin_check_fd_set_overflow(*j, &buf, 0)) {
                *(__int32_t *)((char *)buf.fds_bits + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v14);
              }
            }
          }
        }
      }
      pthread_rwlock_unlock((pthread_rwlock_t *)(v1 + 8));
      goto LABEL_35;
    }
    if (*__error() != 9) {
      break;
    }
LABEL_35:
    memset(&buf, 0, sizeof(buf));
    pthread_rwlock_rdlock((pthread_rwlock_t *)(v1 + 8));
    if (*(unsigned char *)(v1 + 4)) {
      goto LABEL_36;
    }
  }
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (ErrorLogLevelForModule >= 3)
  {
    uint64_t v18 = VRTraceErrorLogLevelToCSTR();
    int v19 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      AVCPacketRelayDriverProc_cold_2(v18, v19);
    }
  }
LABEL_37:
  CheckOutHandleDebug();
  return 0;
}

uint64_t AVCPacketRelayDriverThreadStop()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&g_DriverHandleMutex);
  uint64_t v0 = CheckInHandleDebug();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = (pthread_rwlock_t *)(v0 + 8);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v0 + 8));
    *(unsigned char *)(v1 + 4) = 1;
    if (*(_DWORD *)v1 != -1) {
      close(*(_DWORD *)v1);
    }
    *(_DWORD *)uint64_t v1 = -1;
    pthread_rwlock_unlock(v2);
    if (*(void *)(v1 + 216))
    {
      *(void *)uint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
      FigThreadJoin();
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      __int16 v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(v1 + 216);
        *(_DWORD *)uint64_t v9 = 136315906;
        *(void *)&v9[4] = v3;
        __int16 v10 = 2080;
        int v11 = "AVCPacketRelayDriverThreadStop";
        __int16 v12 = 1024;
        int v13 = 122;
        __int16 v14 = 2048;
        uint64_t v15 = v5;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: AVCPacketRelayDriverProc thread(%p) end...", v9, 0x26u);
      }
    }
    pthread_rwlock_wrlock(v2);
    thread_act_t v6 = *(void **)(v1 + 208);
    if (v6)
    {
      do
      {
        int v7 = (void *)v6[2];
        free(v6);
        thread_act_t v6 = v7;
      }
      while (v7);
    }
    pthread_rwlock_unlock(v2);
    CheckOutHandleDebug();
    g_Driveruint64_t Handle = 0xFFFFFFFFLL;
    pthread_mutex_unlock(&g_DriverHandleMutex);
    pthread_rwlock_destroy(v2);
    free((void *)v1);
    return 0;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        AVCPacketRelayDriverThreadStop_cold_1();
      }
    }
    *__error() = 13;
    pthread_mutex_unlock(&g_DriverHandleMutex);
    return 0xFFFFFFFFLL;
  }
}

uint64_t AVCPacketRelayDriverThreadAddFileDescriptorWithConnection(int a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = CheckInHandleDebug();
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        AVCPacketRelayDriverThreadAddFileDescriptorWithConnection_cold_1();
      }
    }
    *__error() = 13;
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = v4;
  thread_act_t v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x10A0040C385777EuLL);
  if (!v6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        AVCPacketRelayDriverThreadAddFileDescriptorWithConnection_cold_2();
      }
    }
    CheckOutHandleDebug();
    return 0xFFFFFFFFLL;
  }
  int v7 = v6;
  v6[1] = a2;
  *(_DWORD *)thread_act_t v6 = a1;
  int v8 = (pthread_rwlock_t *)(v5 + 8);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(v5 + 8));
  if (*(_DWORD *)v5 != -1)
  {
    close(*(_DWORD *)v5);
    *(_DWORD *)uint64_t v5 = -1;
  }
  uint64_t v11 = *(void *)(v5 + 208);
  __int16 v10 = (void *)(v5 + 208);
  uint64_t v9 = v11;
  if (v11)
  {
    do
    {
      uint64_t v12 = v9;
      uint64_t v9 = *(void *)(v9 + 16);
    }
    while (v9);
    __int16 v10 = (void *)(v12 + 16);
  }
  *__int16 v10 = v7;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v13 = VRTraceErrorLogLevelToCSTR();
    __int16 v14 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315906;
      uint64_t v17 = v13;
      __int16 v18 = 2080;
      int v19 = "AVCPacketRelayDriverThreadAddFileDescriptorWithConnection";
      __int16 v20 = 1024;
      int v21 = 171;
      __int16 v22 = 1024;
      int v23 = a1;
      _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: now driving file descriptor %d", (uint8_t *)&v16, 0x22u);
    }
  }
  pthread_rwlock_unlock(v8);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AVCPacketRelayDriverThreadRemoveFileDescriptor(int a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CheckInHandleDebug();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (pthread_rwlock_t *)(v2 + 8);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 8));
    int v7 = *(void **)(v3 + 208);
    thread_act_t v6 = (void *)(v3 + 208);
    uint64_t v5 = v7;
    if (v7)
    {
      if (*(_DWORD *)v5 == a1)
      {
        int v8 = 0;
LABEL_7:
        if (v8) {
          uint64_t v9 = v8 + 2;
        }
        else {
          uint64_t v9 = v6;
        }
        *uint64_t v9 = v5[2];
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          uint64_t v10 = VRTraceErrorLogLevelToCSTR();
          uint64_t v11 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v12 = *(_DWORD *)v5;
            int v16 = 136315906;
            uint64_t v17 = v10;
            __int16 v18 = 2080;
            int v19 = "AVCPacketRelayDriverThreadRemoveFileDescriptor";
            __int16 v20 = 1024;
            int v21 = 204;
            __int16 v22 = 1024;
            int v23 = v12;
            _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: stop driving file descriptor %d", (uint8_t *)&v16, 0x22u);
          }
        }
        free(v5);
        goto LABEL_21;
      }
      while (1)
      {
        int v8 = v5;
        uint64_t v5 = (void *)v5[2];
        if (!v5) {
          break;
        }
        if (*(_DWORD *)v5 == a1) {
          goto LABEL_7;
        }
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      uint64_t v14 = VRTraceErrorLogLevelToCSTR();
      uint64_t v15 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 136315906;
        uint64_t v17 = v14;
        __int16 v18 = 2080;
        int v19 = "AVCPacketRelayDriverThreadRemoveFileDescriptor";
        __int16 v20 = 1024;
        int v21 = 207;
        __int16 v22 = 1024;
        int v23 = a1;
        _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: didn't find file descriptor %d", (uint8_t *)&v16, 0x22u);
      }
    }
LABEL_21:
    pthread_rwlock_unlock(v4);
    CheckOutHandleDebug();
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      AVCPacketRelayDriverThreadRemoveFileDescriptor_cold_1();
    }
  }
  *__error() = 13;
  return 0xFFFFFFFFLL;
}

uint64_t VCCaptionTaskInfo_SetHostTime(uint64_t result, double a2)
{
  if (result) {
    *(double *)(result + 32) = a2;
  }
  return result;
}

double VCCaptionTaskInfo_HostTime(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 32);
  }
  else {
    return NAN;
  }
}

void VCTimescaleWSOLAClass::VCTimescaleWSOLAClass(VCTimescaleWSOLAClass *this, unsigned int a2, float a3)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = 1065353216;
  unsigned int v3 = 25 * a2 / 0x3E8 + 1;
  unsigned int v4 = v3 & 0xFFFFFE;
  v3 >>= 1;
  *((_DWORD *)this + 2) = v4;
  *((_DWORD *)this + 3) = v3;
  *((_DWORD *)this + 4) = v3;
  *((_DWORD *)this + 5) = 5 * a2 / 0x3E8;
  signed int v5 = (float)((float)((float)((float)a2 * 0.333) / 1000.0) + 0.5) & 0xFFFFFFFC;
  if (v5 <= 4) {
    signed int v5 = 4;
  }
  int v6 = (float)((float)((float)((float)a2 * 0.666) / 1000.0) + 0.5);
  if (v6 <= 1) {
    int v6 = 1;
  }
  *((_DWORD *)this + 6) = v5;
  *((_DWORD *)this + 7) = v6;
  *((float *)this + 8) = (float)((float)(a3 * 0.000015259) * 30.0) * (float)(v4 / v6);
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  operator new[]();
}

void sub_1E24802B8(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x1080C40A085CBA5);
  _Unwind_Resume(a1);
}

void VCTimescaleWSOLAClass::~VCTimescaleWSOLAClass(VCTimescaleWSOLAClass *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    VCTimescaleWSOLAShiftBuffer::~VCTimescaleWSOLAShiftBuffer(*((void ***)this + 9));
    MEMORY[0x1E4E57980](v2, 0x1080C40A085CBA5);
  }
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    MEMORY[0x1E4E57960](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 11);
  if (v4) {
    MEMORY[0x1E4E57960](v4, 0x1000C8052888210);
  }
}

void sub_1E2480360(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x1080C40A085CBA5);
  _Unwind_Resume(a1);
}

uint64_t VCTimescaleWSOLAClass::minRequiredInputSamples(VCTimescaleWSOLAClass *this)
{
  float v1 = *((float *)this + 1);
  unsigned int v2 = *((_DWORD *)this + 3);
  unsigned int v3 = *((_DWORD *)this + 5);
  float v4 = (float)*((int *)this + 24);
  int v5 = -(int)(float)((float)((float)((float)((float)v2 / v1) - (float)v3) - (float)v2) - v4);
  unsigned int v6 = ((v5 & ~(v5 >> 31)) + 3) & 0xFFFFFFFC;
  int v7 = v6 + *((_DWORD *)this + 2);
  int v8 = v3 + v2 + (int)(float)((float)(ceilf((float)*((unsigned int *)this + 4) / v1) + (float)v6) - v4);
  if (v7 <= v8) {
    return v8;
  }
  else {
    return v7;
  }
}

uint64_t VCTimescaleWSOLAClass::setTimeout(uint64_t this, double a2)
{
  v6[1] = *(mach_timebase_info *)MEMORY[0x1E4F143B8];
  if (vabdd_f64(*(double *)(this + 40), a2) > 0.000001)
  {
    uint64_t v3 = this;
    *(double *)(this + 40) = a2;
    v6[0] = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
    this = mach_timebase_info(v6);
    double v5 = 1.0;
    if (!this)
    {
      LODWORD(v4) = v6[0].denom;
      LODWORD(v5) = v6[0].numer;
      double v5 = (double)*(unint64_t *)&v5 / ((double)v4 * 1000000000.0);
    }
    *(void *)(v3 + 56) = (unint64_t)(a2 / v5);
    *(unsigned char *)(v3 + 48) = 0;
  }
  return this;
}

BOOL VCTimescaleWSOLAClass::isTimeoutExpired(VCTimescaleWSOLAClass *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 7)) {
    return 0;
  }
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = v2 - *((void *)this + 8);
  BOOL v5 = v4 > v3;
  if (v4 > v3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      int v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *((void *)this + 7);
        int v11 = 136316162;
        uint64_t v12 = v6;
        __int16 v13 = 2080;
        uint64_t v14 = "isTimeoutExpired";
        __int16 v15 = 1024;
        int v16 = 165;
        __int16 v17 = 2048;
        uint64_t v18 = v4;
        __int16 v19 = 2048;
        uint64_t v20 = v10;
        _os_log_error_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_ERROR, " [%s] %s:%d Wsola Timeout: %lld > %lld!!!!!!!!\n", (uint8_t *)&v11, 0x30u);
      }
    }
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
  }
  *((unsigned char *)this + 48) = v8;
  return v5;
}

uint64_t _VCTimescaleWSOLA_SearchMinimumCostPosition(VCTimescaleWSOLAClass *a1, unsigned int *a2, unsigned int *a3, int a4, unsigned int a5, unsigned int *a6, float *a7, float *a8)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *((_DWORD *)a1 + 2);
  uint64_t v9 = *a2;
  uint64_t v10 = *a3;
  if (v9 <= a5 && v9 >= v10)
  {
    *a6 = v8;
    return v9;
  }
  int v14 = *((_DWORD *)a1 + 3);
  int v15 = v14 - a4;
  int v44 = v14;
  if (v10 > a5)
  {
    uint64_t v9 = *a3;
    goto LABEL_31;
  }
  float v19 = *((float *)a1 + 8);
  int v20 = 4 * *((_DWORD *)a1 + 7);
  int v47 = -v14;
  float v21 = 1.0e32;
  uint64_t v9 = *a3;
  unsigned int v46 = *((_DWORD *)a1 + 2);
  while (1)
  {
    float32x4_t v22 = 0uLL;
    unsigned int v23 = v8 - ((v15 + v10) & ~((v15 + (int)v10) >> 31));
    if (v23)
    {
      for (unsigned int i = 0; i < v23; i += v20)
      {
        float32x4_t v25 = vsubq_f32(*(float32x4_t *)&a7[i], *(float32x4_t *)&a8[v47 + v10 + i]);
        float32x4_t v22 = vmlaq_f32(v22, v25, v25);
      }
    }
    float v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)))).f32[0];
    if (v26 < v21) {
      break;
    }
    int v30 = v10;
LABEL_22:
    uint64_t v10 = (v30 + *((_DWORD *)a1 + 6));
    *a3 = v10;
    if (v10 > a5) {
      goto LABEL_31;
    }
  }
  float v48 = v26;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v27 = VRTraceErrorLogLevelToCSTR();
    double v28 = *MEMORY[0x1E4F47A50];
    __int16 v29 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)fd_set buf = 136315906;
        uint64_t v50 = v27;
        __int16 v51 = 2080;
        double v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
        __int16 v53 = 1024;
        int v54 = 217;
        __int16 v55 = 2048;
        *(double *)char v56 = v48;
        _os_log_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %.3f ", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)fd_set buf = 136315906;
      uint64_t v50 = v27;
      __int16 v51 = 2080;
      double v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
      __int16 v53 = 1024;
      int v54 = 217;
      __int16 v55 = 2048;
      *(double *)char v56 = v48;
      _os_log_debug_impl(&dword_1E1EA4000, v28, OS_LOG_TYPE_DEBUG, " [%s] %s:%d %.3f ", buf, 0x26u);
    }
  }
  float v21 = v48;
  if (v48 >= v19)
  {
    int v30 = *a3;
    uint64_t v9 = v10;
    unsigned int v8 = v46;
    goto LABEL_22;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v31 = VRTraceErrorLogLevelToCSTR();
    double v32 = *MEMORY[0x1E4F47A50];
    __int16 v33 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)fd_set buf = 136316162;
        uint64_t v50 = v31;
        __int16 v51 = 2080;
        double v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
        __int16 v53 = 1024;
        int v54 = 219;
        __int16 v55 = 2048;
        *(double *)char v56 = v19;
        *(_WORD *)&v56[8] = 1024;
        v57[0] = a5 - v10;
        _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d <%.3f Search Stop[%d]", buf, 0x2Cu);
      }
    }
    else if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)fd_set buf = 136316162;
      uint64_t v50 = v31;
      __int16 v51 = 2080;
      double v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
      __int16 v53 = 1024;
      int v54 = 219;
      __int16 v55 = 2048;
      *(double *)char v56 = v19;
      *(_WORD *)&v56[8] = 1024;
      v57[0] = a5 - v10;
      _os_log_debug_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEBUG, " [%s] %s:%d <%.3f Search Stop[%d]", buf, 0x2Cu);
    }
  }
  uint64_t v9 = v10;
  unsigned int v8 = v46;
LABEL_31:
  *a6 = v8 - ((v15 + v9) & ~((v15 + (int)v9) >> 31));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v34 = VRTraceErrorLogLevelToCSTR();
    __int16 v35 = *MEMORY[0x1E4F47A50];
    double v36 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = v9 - v44 + *a6;
        *(_DWORD *)fd_set buf = 136316418;
        uint64_t v50 = v34;
        __int16 v51 = 2080;
        double v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
        __int16 v53 = 1024;
        int v54 = 229;
        __int16 v55 = 1024;
        *(_DWORD *)char v56 = v9;
        *(_WORD *)&v56[4] = 1024;
        *(_DWORD *)&v56[6] = v9 - v44;
        LOWORD(v57[0]) = 1024;
        *(_DWORD *)((char *)v57 + 2) = v37;
        _os_log_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Found match at position=%d star=%d candidate=%d", buf, 0x2Eu);
      }
    }
    else if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      int v43 = v9 - v44 + *a6;
      *(_DWORD *)fd_set buf = 136316418;
      uint64_t v50 = v34;
      __int16 v51 = 2080;
      double v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
      __int16 v53 = 1024;
      int v54 = 229;
      __int16 v55 = 1024;
      *(_DWORD *)char v56 = v9;
      *(_WORD *)&v56[4] = 1024;
      *(_DWORD *)&v56[6] = v9 - v44;
      LOWORD(v57[0]) = 1024;
      *(_DWORD *)((char *)v57 + 2) = v43;
      _os_log_debug_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Found match at position=%d star=%d candidate=%d", buf, 0x2Eu);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v38 = VRTraceErrorLogLevelToCSTR();
    __int16 v39 = *MEMORY[0x1E4F47A50];
    double v40 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = *a6;
        *(_DWORD *)fd_set buf = 136315906;
        uint64_t v50 = v38;
        __int16 v51 = 2080;
        double v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
        __int16 v53 = 1024;
        int v54 = 230;
        __int16 v55 = 1024;
        *(_DWORD *)char v56 = v41;
        _os_log_impl(&dword_1E1EA4000, v39, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Candidate length=%d", buf, 0x22u);
      }
    }
    else if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      _VCTimescaleWSOLA_SearchMinimumCostPosition();
    }
  }
  return v9;
}

BOOL _VCTimescaleWSOLA_PerformAdaptation(VCTimescaleWSOLAClass *a1, float *a2, unsigned int a3, float *a4, unsigned int a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  float v6 = *((float *)a1 + 1);
  uint64_t v8 = *((unsigned int *)a1 + 2);
  unsigned int v7 = *((_DWORD *)a1 + 3);
  uint64_t v9 = *((unsigned int *)a1 + 4);
  unsigned int v10 = *((_DWORD *)a1 + 5);
  uint64_t v115 = (float *)*((void *)a1 + 11);
  int v11 = *((_DWORD *)a1 + 24);
  float v12 = (float)v11;
  int v13 = -(int)(float)((float)((float)((float)((float)v7 / v6) - (float)v10) - (float)v7) - (float)v11);
  unsigned int v14 = ((v13 & ~(v13 >> 31)) + 3) & 0xFFFFFFFC;
  unsigned int v15 = v14 + v7;
  unsigned int v121 = v14 + v7;
  float v16 = (float)v9 / v6;
  float v17 = (float)(ceilf(v16) + (float)v14) - (float)v11;
  int v18 = (int)v17;
  if (v14 + v8 <= a3 && v10 + v7 + v18 <= a3)
  {
    uint64_t v113 = v9;
    unsigned int v114 = v7;
    unsigned int v111 = v10;
    float v26 = (float *)*((void *)a1 + 10);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v116 = VRTraceErrorLogLevelToCSTR();
      uint64_t v27 = *MEMORY[0x1E4F47A50];
      double v28 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)fd_set buf = 136315906;
          uint64_t v123 = v116;
          __int16 v124 = 2080;
          int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
          __int16 v126 = 1024;
          int v127 = 296;
          __int16 v128 = 1024;
          unsigned int v129 = a3;
          _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Nin:%d", buf, 0x22u);
        }
      }
      else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        _VCTimescaleWSOLA_PerformAdaptation();
      }
    }
    int v34 = v113;
    unsigned int v35 = a3;
    unsigned int v36 = v114;
    if (v8 == v113)
    {
      unsigned int v37 = 0;
    }
    else
    {
      uint64_t v38 = (v8 - v113);
      unsigned int v39 = v114;
      unsigned int v40 = v14;
      int v41 = v26;
      do
      {
        *v41++ = v115[v39++] * a2[v40++];
        --v38;
      }
      while (v38);
      unsigned int v37 = v8 - v113;
    }
    int v42 = v18;
    if (v37 < v8)
    {
      bzero(&v26[v37], 4 * (v8 + ~v37) + 4);
      int v34 = v113;
      unsigned int v36 = v114;
      unsigned int v35 = a3;
      int v42 = v18;
    }
    if (v15 <= v35)
    {
      unsigned int v117 = v121;
      unsigned int v46 = v121 + v36;
      if (v121 + v36 <= v35)
      {
        unsigned int v47 = 0;
        int v48 = 0;
        int v101 = -v36;
        unsigned int v45 = v14;
        uint64_t v102 = (v8 - v113);
        unsigned int v104 = v14;
        while (1)
        {
          uint64_t v49 = v8;
          signed int v50 = v42 + v111;
          unsigned int v51 = v47 + v34;
          if (v42 + v111 + v36 > v35 || v51 >= a5)
          {
            unsigned int v44 = v47;
            unsigned int v43 = v104;
            goto LABEL_92;
          }
          unsigned int v106 = v46;
          int v53 = v11;
          unsigned int v54 = v45;
          unsigned int v109 = v47;
          unsigned int v112 = v42;
          if (VCTimescaleWSOLAClass::isTimeoutExpired(a1))
          {
            unsigned int v44 = v109;
            unsigned int v43 = v104;
            unsigned int v45 = v54;
            int v11 = v53;
            goto LABEL_92;
          }
          unsigned int v120 = (v112 - v111) & ~((int)(v112 - v111) >> 31) & 0x7FFFFFFC;
          if (v50 >= (int)a3) {
            unsigned int v55 = a3;
          }
          else {
            unsigned int v55 = v50;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v56 = VRTraceErrorLogLevelToCSTR();
            int v57 = *MEMORY[0x1E4F47A50];
            uint64_t v58 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)fd_set buf = 136315906;
                uint64_t v123 = v56;
                __int16 v124 = 2080;
                int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                __int16 v126 = 1024;
                int v127 = 323;
                __int16 v128 = 1024;
                unsigned int v129 = v51;
                _os_log_impl(&dword_1E1EA4000, v57, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ------- Wsola Search:%d ---------", buf, 0x22u);
              }
            }
            else if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)fd_set buf = 136315906;
              uint64_t v123 = v56;
              __int16 v124 = 2080;
              int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              __int16 v126 = 1024;
              int v127 = 323;
              __int16 v128 = 1024;
              unsigned int v129 = v51;
              _os_log_debug_impl(&dword_1E1EA4000, v57, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ------- Wsola Search:%d ---------", buf, 0x22u);
            }
          }
          uint64_t v8 = v49;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v59 = VRTraceErrorLogLevelToCSTR();
            double v60 = *MEMORY[0x1E4F47A50];
            double v61 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)fd_set buf = 136316418;
                uint64_t v123 = v59;
                __int16 v124 = 2080;
                int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                __int16 v126 = 1024;
                int v127 = 324;
                __int16 v128 = 1024;
                unsigned int v129 = v117;
                __int16 v130 = 1024;
                int v131 = v117 - v114;
                __int16 v132 = 1024;
                unsigned int v133 = v106;
                _os_log_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Reference window centered at %d  [%d %d]", buf, 0x2Eu);
              }
            }
            else if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)fd_set buf = 136316418;
              uint64_t v123 = v59;
              __int16 v124 = 2080;
              int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              __int16 v126 = 1024;
              int v127 = 324;
              __int16 v128 = 1024;
              unsigned int v129 = v117;
              __int16 v130 = 1024;
              int v131 = v117 - v114;
              __int16 v132 = 1024;
              unsigned int v133 = v106;
              _os_log_debug_impl(&dword_1E1EA4000, v60, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Reference window centered at %d  [%d %d]", buf, 0x2Eu);
            }
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v62 = VRTraceErrorLogLevelToCSTR();
            double v63 = *MEMORY[0x1E4F47A50];
            uint64_t v64 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)fd_set buf = 136316418;
                uint64_t v123 = v62;
                __int16 v124 = 2080;
                int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                __int16 v126 = 1024;
                int v127 = 325;
                __int16 v128 = 1024;
                unsigned int v129 = v112;
                __int16 v130 = 1024;
                int v131 = (v112 - v111) & ~((int)(v112 - v111) >> 31) & 0x7FFFFFFC;
                __int16 v132 = 1024;
                unsigned int v133 = v55;
                _os_log_impl(&dword_1E1EA4000, v63, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Searching around %d [%d %d]", buf, 0x2Eu);
              }
            }
            else if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)fd_set buf = 136316418;
              uint64_t v123 = v62;
              __int16 v124 = 2080;
              int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              __int16 v126 = 1024;
              int v127 = 325;
              __int16 v128 = 1024;
              unsigned int v129 = v112;
              __int16 v130 = 1024;
              int v131 = (v112 - v111) & ~((int)(v112 - v111) >> 31) & 0x7FFFFFFC;
              __int16 v132 = 1024;
              unsigned int v133 = v55;
              _os_log_debug_impl(&dword_1E1EA4000, v63, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Searching around %d [%d %d]", buf, 0x2Eu);
            }
          }
          unsigned int v119 = -1431655766;
          unsigned int v65 = _VCTimescaleWSOLA_SearchMinimumCostPosition(a1, &v121, &v120, a3, v55, &v119, &a2[v117 - v114], a2);
          uint64_t v66 = v115;
          if (v8)
          {
            unsigned int v67 = v101 + v65;
            uint64_t v68 = v8;
            BOOL v69 = v26;
            do
            {
              float v70 = *v66++;
              *BOOL v69 = *v69 + (float)(v70 * a2[v67]);
              ++v69;
              ++v67;
              --v68;
            }
            while (v68);
          }
          unsigned int v108 = v65;
          unsigned int v117 = v65 + v113;
          unsigned int v121 = v65 + v113;
          if (v113 >= v119) {
            uint64_t v71 = v119;
          }
          else {
            uint64_t v71 = v113;
          }
          if (v71)
          {
            uint64_t v72 = v71;
            double v73 = v26;
            int v74 = v48;
            do
            {
              float v75 = *v73++;
              a4[v74++] = v75;
              --v72;
            }
            while (v72);
          }
          unsigned int v107 = v71 + v109;
          if ((int)VRTraceGetErrorLogLevelForModule() > 7)
          {
            uint64_t v103 = VRTraceErrorLogLevelToCSTR();
            double v76 = *MEMORY[0x1E4F47A50];
            double v77 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)fd_set buf = 136316162;
                uint64_t v123 = v103;
                __int16 v124 = 2080;
                int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                __int16 v126 = 1024;
                int v127 = 349;
                __int16 v128 = 1024;
                unsigned int v129 = v109;
                __int16 v130 = 1024;
                int v131 = v71 + v109;
                _os_log_impl(&dword_1E1EA4000, v76, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Wrote output [%d %d]", buf, 0x28u);
              }
            }
            else if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)fd_set buf = 136316162;
              uint64_t v123 = v103;
              __int16 v124 = 2080;
              int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              __int16 v126 = 1024;
              int v127 = 349;
              __int16 v128 = 1024;
              unsigned int v129 = v109;
              __int16 v130 = 1024;
              int v131 = v71 + v109;
              _os_log_debug_impl(&dword_1E1EA4000, v76, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Wrote output [%d %d]", buf, 0x28u);
            }
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            uint64_t v110 = VRTraceErrorLogLevelToCSTR();
            double v78 = *MEMORY[0x1E4F47A50];
            double v79 = *MEMORY[0x1E4F47A50];
            if (*MEMORY[0x1E4F47A40])
            {
              if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)fd_set buf = 136316418;
                uint64_t v123 = v110;
                __int16 v124 = 2080;
                int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                __int16 v126 = 1024;
                int v127 = 350;
                __int16 v128 = 1024;
                unsigned int v129 = v108;
                __int16 v130 = 1024;
                int v131 = v117;
                __int16 v132 = 1024;
                unsigned int v133 = a3;
                _os_log_impl(&dword_1E1EA4000, v78, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d lastIdx:%d refIdx:%d Nin:%d", buf, 0x2Eu);
              }
            }
            else if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)fd_set buf = 136316418;
              uint64_t v123 = v110;
              __int16 v124 = 2080;
              int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              __int16 v126 = 1024;
              int v127 = 350;
              __int16 v128 = 1024;
              unsigned int v129 = v108;
              __int16 v130 = 1024;
              int v131 = v117;
              __int16 v132 = 1024;
              unsigned int v133 = a3;
              _os_log_debug_impl(&dword_1E1EA4000, v78, OS_LOG_TYPE_DEBUG, " [%s] %s:%d lastIdx:%d refIdx:%d Nin:%d", buf, 0x2Eu);
            }
          }
          uint64_t v80 = v102;
          int v34 = v113;
          int v81 = v113;
          double v82 = v26;
          if (v8 != v113)
          {
            do
            {
              *v82++ = v26[v81++];
              --v80;
            }
            while (v80);
          }
          uint64_t v83 = v113;
          int v84 = v102;
          unsigned int v35 = a3;
          unsigned int v36 = v114;
          unsigned int v45 = v108;
          if (v113)
          {
            do
            {
              v26[v84++] = 0.0;
              --v83;
            }
            while (v83);
          }
          unsigned int v43 = v104;
          int v11 = v108 - v112;
          if (v108 + v114 > a3) {
            break;
          }
          int v42 = v112 + (int)(float)(v16 + 0.5);
          v48 += v71;
          unsigned int v46 = v117 + v114;
          unsigned int v44 = v107;
          unsigned int v47 = v107;
          if (v117 + v114 > a3) {
            goto LABEL_92;
          }
        }
        unsigned int v44 = v107;
      }
      else
      {
        unsigned int v45 = v14;
        unsigned int v44 = 0;
        unsigned int v43 = v45;
      }
LABEL_92:
      float v12 = (float)v11;
    }
    else
    {
      unsigned int v43 = v14;
      unsigned int v44 = 0;
      unsigned int v45 = v43;
    }
    *((_DWORD *)a1 + 25) = v44;
    int v85 = (unsigned int *)((char *)a1 + 100);
    *((_DWORD *)a1 + 24) = v11;
    float v86 = (float)((float)((float)((float)*((unsigned int *)a1 + 3) / v6) - (float)*((unsigned int *)a1 + 5))
                - (float)*((unsigned int *)a1 + 3))
        - v12;
    unsigned int v87 = ((-(int)v86 & ~(-(int)v86 >> 31)) + 3) & 0xFFFFFFFC;
    int v88 = v43;
    *((_DWORD *)a1 + 26) = v43;
    *((_DWORD *)a1 + 27) = v87;
    *((_DWORD *)a1 + 28) = v45 - v87;
    *((_DWORD *)a1 + 29) = v45;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v89 = VRTraceErrorLogLevelToCSTR();
      __int16 v90 = *MEMORY[0x1E4F47A50];
      uint64_t v91 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v92 = *((_DWORD *)a1 + 27);
          unsigned int v93 = *((_DWORD *)a1 + 28);
          *(_DWORD *)fd_set buf = 136316930;
          uint64_t v123 = v89;
          __int16 v124 = 2080;
          int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
          __int16 v126 = 1024;
          int v127 = 369;
          __int16 v128 = 1024;
          unsigned int v129 = v11;
          __int16 v130 = 1024;
          int v131 = v88;
          __int16 v132 = 1024;
          unsigned int v133 = v92;
          __int16 v134 = 1024;
          unsigned int v135 = v93;
          __int16 v136 = 1024;
          unsigned int v137 = v44;
          _os_log_impl(&dword_1E1EA4000, v90, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Wsola search stopped:%d off:%d offNext:%d inStep:%d Nwrit:%d", buf, 0x3Au);
        }
      }
      else if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v99 = *((_DWORD *)a1 + 27);
        unsigned int v100 = *((_DWORD *)a1 + 28);
        *(_DWORD *)fd_set buf = 136316930;
        uint64_t v123 = v89;
        __int16 v124 = 2080;
        int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
        __int16 v126 = 1024;
        int v127 = 369;
        __int16 v128 = 1024;
        unsigned int v129 = v11;
        __int16 v130 = 1024;
        int v131 = v88;
        __int16 v132 = 1024;
        unsigned int v133 = v99;
        __int16 v134 = 1024;
        unsigned int v135 = v100;
        __int16 v136 = 1024;
        unsigned int v137 = v44;
        _os_log_debug_impl(&dword_1E1EA4000, v90, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Wsola search stopped:%d off:%d offNext:%d inStep:%d Nwrit:%d", buf, 0x3Au);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v94 = VRTraceErrorLogLevelToCSTR();
      unsigned int v95 = *MEMORY[0x1E4F47A50];
      __int16 v96 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        BOOL v97 = os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v97) {
          return result;
        }
        unsigned int v98 = *v85;
        *(_DWORD *)fd_set buf = 136315906;
        uint64_t v123 = v94;
        __int16 v124 = 2080;
        int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
        __int16 v126 = 1024;
        int v127 = 370;
        __int16 v128 = 1024;
        unsigned int v129 = v98;
        _os_log_impl(&dword_1E1EA4000, v95, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Wsola output size: %d =========", buf, 0x22u);
      }
      else
      {
        BOOL result = os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        _VCTimescaleWSOLA_PerformAdaptation();
      }
    }
    return 0;
  }
  unsigned int v19 = v7;
  int v20 = (int)v17;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v21 = VRTraceErrorLogLevelToCSTR();
    float32x4_t v22 = *MEMORY[0x1E4F47A50];
    unsigned int v23 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)fd_set buf = 136316418;
        uint64_t v123 = v21;
        __int16 v124 = 2080;
        int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
        __int16 v126 = 1024;
        int v127 = 285;
        __int16 v128 = 1024;
        unsigned int v129 = a3;
        __int16 v130 = 1024;
        int v131 = v14 + v8;
        __int16 v132 = 1024;
        unsigned int v133 = v10 + v19 + v20;
        _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Nin:%d < %d or %d", buf, 0x2Eu);
      }
    }
    else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)fd_set buf = 136316418;
      uint64_t v123 = v21;
      __int16 v124 = 2080;
      int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
      __int16 v126 = 1024;
      int v127 = 285;
      __int16 v128 = 1024;
      unsigned int v129 = a3;
      __int16 v130 = 1024;
      int v131 = v14 + v8;
      __int16 v132 = 1024;
      unsigned int v133 = v10 + v19 + v20;
      _os_log_debug_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Nin:%d < %d or %d", buf, 0x2Eu);
    }
  }
  int v29 = v8;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v30 = VRTraceErrorLogLevelToCSTR();
    uint64_t v31 = *MEMORY[0x1E4F47A50];
    double v32 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)fd_set buf = 136316674;
        uint64_t v123 = v30;
        __int16 v124 = 2080;
        int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
        __int16 v126 = 1024;
        int v127 = 286;
        __int16 v128 = 1024;
        unsigned int v129 = v14;
        __int16 v130 = 1024;
        int v131 = v29;
        __int16 v132 = 1024;
        unsigned int v133 = v20;
        __int16 v134 = 1024;
        unsigned int v135 = v10;
        _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d offset:%d Nwin:%d searchCenter:%d delta:%d", buf, 0x34u);
      }
    }
    else if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)fd_set buf = 136316674;
      uint64_t v123 = v30;
      __int16 v124 = 2080;
      int v125 = "_VCTimescaleWSOLA_PerformAdaptation";
      __int16 v126 = 1024;
      int v127 = 286;
      __int16 v128 = 1024;
      unsigned int v129 = v14;
      __int16 v130 = 1024;
      int v131 = v29;
      __int16 v132 = 1024;
      unsigned int v133 = v20;
      __int16 v134 = 1024;
      unsigned int v135 = v10;
      _os_log_debug_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEBUG, " [%s] %s:%d offset:%d Nwin:%d searchCenter:%d delta:%d", buf, 0x34u);
    }
  }
  *((_DWORD *)a1 + 25) = 0;
  BOOL result = 1;
  *((void *)a1 + 14) = 0;
  return result;
}

void VCTimescaleWSOLA_Initialize(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = *(VCTimescaleWSOLAClass **)a1;
  if (*(void *)a1)
  {
    VCTimescaleWSOLAClass::~VCTimescaleWSOLAClass(*(VCTimescaleWSOLAClass **)a1);
    MEMORY[0x1E4E57980](v8, 0x10A0C409407E75BLL);
  }
  unsigned int v9 = (int)((double)a2 * 0.06);
  *(_WORD *)(a1 + 11570) = v9;
  *(_WORD *)(a1 + 11568) = 2 * v9;
  if (v9 >= 0xB41 && (int)VRTraceGetErrorLogLevelForModule() >= 2)
  {
    VRTraceErrorLogLevelToCSTR();
    if (VRTraceIsOSFaultDisabled())
    {
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCTimescaleWSOLA_Initialize_cold_4();
      }
    }
    else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_FAULT))
    {
      VCTimescaleWSOLA_Initialize_cold_5();
    }
  }
  *(unsigned char *)(a1 + 11572) = a5;
  *(double *)(a1 + 11592) = VCDefaults_GetDoubleValueForKey(@"wsolaStartCompressionThreshold", 1.0);
  *(double *)(a1 + 11608) = VCDefaults_GetDoubleValueForKey(@"wsolaCompressionHysteresis", 0.300000012);
  *(double *)(a1 + 11600) = VCDefaults_GetDoubleValueForKey(@"wsolaStopCompressionThreshold", 0.1);
  operator new();
}

void sub_1E248204C(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x10A0C409407E75BLL);
  _Unwind_Resume(a1);
}

OpaqueAudioConverter *VCTimescaleWSOLA_Finalize(VCTimescaleWSOLAClass **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    VCTimescaleWSOLAClass::~VCTimescaleWSOLAClass(*a1);
    MEMORY[0x1E4E57980](v2, 0x10A0C409407E75BLL);
  }
  uint64_t v3 = a1[1447];
  if (v3) {
    AudioConverterDispose(v3);
  }
  BOOL result = a1[1448];
  if (result)
  {
    return (OpaqueAudioConverter *)AudioConverterDispose(result);
  }
  return result;
}

void sub_1E24820FC(_Unwind_Exception *a1)
{
  MEMORY[0x1E4E57980](v1, 0x10A0C409407E75BLL);
  _Unwind_Resume(a1);
}

uint64_t VCTimescaleWSOLA_Adapt(uint64_t *a1, float *a2, unsigned int a3, float *a4, unsigned int *a5, uint64_t a6, unsigned int a7, float a8, double a9)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = *a1;
  *(void *)(v17 + 64) = mach_absolute_time();
  VCTimescaleWSOLAClass::setTimeout(v17, a9);
  if (*(float *)(v17 + 4) == a8)
  {
    unsigned int v20 = *(_DWORD *)(v17 + 112);
  }
  else
  {
    *(float *)(v17 + 4) = a8;
    float v18 = (float)((float)((float)((float)*(unsigned int *)(v17 + 12) / a8) - (float)*(unsigned int *)(v17 + 20))
                - (float)*(unsigned int *)(v17 + 12))
        - (float)*(int *)(v17 + 96);
    unsigned int v19 = ((-(int)v18 & ~(-(int)v18 >> 31)) + 3) & 0xFFFFFFFC;
    unsigned int v20 = (*(_DWORD *)(v17 + 116) - v19) & ~((int)(*(_DWORD *)(v17 + 116) - v19) >> 31);
    *(_DWORD *)(v17 + 108) = v19;
    *(_DWORD *)(v17 + 112) = v20;
  }
  VCTimescaleWSOLAShiftBuffer::removeSamples(*(void ***)(v17 + 72), v20);
  uint64_t v21 = *(_DWORD **)(v17 + 72);
  if (a7 && !v21[3])
  {
    unsigned int v22 = *(_DWORD *)(v17 + 108);
    if (a7 < v22)
    {
      char v23 = 0;
      if (!a3) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    VCTimescaleWSOLAShiftBuffer::appendSamples(v21, (float *)(a6 + 4 * (a7 - v22)), v22);
    uint64_t v21 = *(_DWORD **)(v17 + 72);
  }
  char v23 = 1;
  if (a3)
  {
LABEL_11:
    VCTimescaleWSOLAShiftBuffer::appendSamples(v21, a2, a3);
    uint64_t v21 = *(_DWORD **)(v17 + 72);
  }
LABEL_12:
  if (*a5 < (float)(*(float *)(v17 + 4) * (float)(v21[3] - *(_DWORD *)(v17 + 108)))
    && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCTimescaleWSOLA_Adapt_cold_2();
    }
  }
  unsigned int v24 = VCTimescaleWSOLAShiftBuffer::count(*(VCTimescaleWSOLAShiftBuffer **)(v17 + 72));
  if (v24 >= VCTimescaleWSOLAClass::minRequiredInputSamples((VCTimescaleWSOLAClass *)v17)) {
    char v25 = v23;
  }
  else {
    char v25 = 0;
  }
  uint64_t v26 = *(void *)(v17 + 72);
  uint64_t v27 = *(float **)v26;
  uint64_t v28 = *(unsigned int *)(v26 + 12);
  if (v25)
  {
    unsigned int v29 = _VCTimescaleWSOLA_PerformAdaptation((VCTimescaleWSOLAClass *)v17, v27, v28, a4, *a5);
    *a5 = *(_DWORD *)(v17 + 100);
    goto LABEL_26;
  }
  memcpy(a4, v27, 4 * v28);
  uint64_t v30 = *(void *)(v17 + 72);
  *a5 = *(_DWORD *)(v30 + 12);
  *(void *)(v17 + 96) = 0;
  *(_DWORD *)(v17 + 104) = 0;
  *(void *)(v17 + 112) = 0;
  VCTimescaleWSOLAShiftBuffer::clear(v30);
  if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
    goto LABEL_25;
  }
  uint64_t v31 = VRTraceErrorLogLevelToCSTR();
  double v32 = *MEMORY[0x1E4F47A50];
  if (*MEMORY[0x1E4F47A40])
  {
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v33 = *a5;
      int v35 = 136315906;
      uint64_t v36 = v31;
      __int16 v37 = 2080;
      uint64_t v38 = "VCTimescaleWSOLA_Adapt";
      __int16 v39 = 1024;
      int v40 = 532;
      __int16 v41 = 1024;
      unsigned int v42 = v33;
      _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Copied Output: %d", (uint8_t *)&v35, 0x22u);
    }
LABEL_25:
    unsigned int v29 = 2;
    goto LABEL_26;
  }
  unsigned int v29 = 2;
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEBUG)) {
    VCTimescaleWSOLA_Adapt_cold_1();
  }
LABEL_26:
  if (*(unsigned char *)(v17 + 48)) {
    return 3;
  }
  else {
    return v29;
  }
}

uint64_t VCTimescaleWSOLA_WindowTail(uint64_t *a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = *a1;
  *(_DWORD *)(v5 + 4) = 1065353216;
  float v6 = (float)((float)((float)*(unsigned int *)(v5 + 12) - (float)*(unsigned int *)(v5 + 20))
             - (float)*(unsigned int *)(v5 + 12))
     - (float)*(int *)(v5 + 96);
  unsigned int v7 = ((-(int)v6 & ~(-(int)v6 >> 31)) + 3) & 0xFFFFFFFC;
  unsigned int v8 = *(_DWORD *)(v5 + 116);
  *(_DWORD *)(v5 + 108) = v7;
  *(_DWORD *)(v5 + 112) = (v8 - v7) & ~((int)(v8 - v7) >> 31);
  VCTimescaleWSOLAShiftBuffer::removeSamples(*(void ***)(v5 + 72), v8);
  memcpy(a2, **(const void ***)(v5 + 72), 4 * *(unsigned int *)(*(void *)(v5 + 72) + 12));
  uint64_t v9 = *(void *)(v5 + 72);
  *a3 = *(_DWORD *)(v9 + 12);
  *(void *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0;
  VCTimescaleWSOLAShiftBuffer::clear(v9);
  return 0;
}

uint64_t VCTimescaleWSOLA_TailSize(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(*(void *)a1 + 72) + 12) - *(_DWORD *)(*(void *)a1 + 116));
}

void *VCTimescaleWSOLA_UpdateHistoryBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int16 *)(a1 + 11570);
  if (**(_DWORD **)(a2 + 24) >= v3) {
    signed int v4 = *(unsigned __int16 *)(a1 + 11570);
  }
  else {
    signed int v4 = **(_DWORD **)(a2 + 24);
  }
  if (*(unsigned char *)(a1 + 11573))
  {
    UInt32 ioOutputDataSize = 4 * v3;
    BOOL result = (void *)AudioConverterConvertBuffer(*(AudioConverterRef *)(a1 + 11576), 2 * v4, *(const void **)(a2 + 120), &ioOutputDataSize, (void *)(a1 + 12));
    signed int v4 = ioOutputDataSize >> 2;
  }
  else
  {
    BOOL result = memcpy((void *)(a1 + 12), *(const void **)(a2 + 120), 4 * v4);
  }
  *(_DWORD *)(a1 + 11532) = v4;
  return result;
}

uint64_t VCTimescaleWSOLA_CheckCompression(uint64_t a1, int a2, int a3, int a4, double a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  double v10 = micro();
  BOOL v11 = v10 - *(double *)(a1 + 11552) > 10.0 && v10 - *(double *)(a1 + 11560) > 10.0;
  if (a4 | a3) {
    return 0;
  }
  *(unsigned char *)(a1 + 8) = 0;
  if (a2) {
    *(double *)(a1 + 11552) = v10;
  }
  if (a5 < 0.300000012) {
    *(double *)(a1 + 11560) = v10;
  }
  if (*(unsigned char *)(a1 + 11572)) {
    char v13 = v11;
  }
  else {
    char v13 = 1;
  }
  BOOL v14 = (v13 & 1) != 0 || *(double *)(a1 + 11600) < a5;
  if (*(_DWORD *)(a1 + 11536) && v14)
  {
    if (!v11) {
      return 1;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 5) {
      return 1;
    }
    uint64_t v15 = VRTraceErrorLogLevelToCSTR();
    float v16 = *MEMORY[0x1E4F47A50];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    uint64_t v17 = *(void *)(a1 + 11552);
    uint64_t v18 = *(void *)(a1 + 11560);
    int v23 = 136316418;
    uint64_t v24 = v15;
    __int16 v25 = 2080;
    uint64_t v26 = "VCTimescaleWSOLA_CheckCompression";
    __int16 v27 = 1024;
    int v28 = 665;
    __int16 v29 = 2048;
    uint64_t v30 = v17;
    __int16 v31 = 2048;
    double v32 = a5;
    __int16 v33 = 2048;
    uint64_t v34 = v18;
    goto LABEL_33;
  }
  if (*(unsigned char *)(a1 + 11572))
  {
    BOOL v19 = *(double *)(a1 + 11592) < a5 && v10 - *(double *)(a1 + 11544) > *(double *)(a1 + 11608);
    if (!v11 && !v19) {
      return 0;
    }
  }
  if (a2) {
    BOOL v11 = 0;
  }
  if (v11 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    uint64_t v20 = VRTraceErrorLogLevelToCSTR();
    float v16 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 11552);
      uint64_t v22 = *(void *)(a1 + 11560);
      int v23 = 136316418;
      uint64_t v24 = v20;
      __int16 v25 = 2080;
      uint64_t v26 = "VCTimescaleWSOLA_CheckCompression";
      __int16 v27 = 1024;
      int v28 = 671;
      __int16 v29 = 2048;
      uint64_t v30 = v21;
      __int16 v31 = 2048;
      double v32 = a5;
      __int16 v33 = 2048;
      uint64_t v34 = v22;
LABEL_33:
      _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Forcing WSOLA, time since silence: %f, Adjust = %f, time since low adjust: %f", (uint8_t *)&v23, 0x3Au);
    }
  }
  return 1;
}

uint64_t VCTimescaleWSOLA_ActiveSpeechAdapt(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  double v4 = 0.0;
  if (VRTraceIsInternalOSInstalled()) {
    double v4 = micro();
  }
  if (VCTimescaleWSOLA_CheckCompression(a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), *(double *)(a2 + 160))&& *(_DWORD *)(a2 + 20) == *(unsigned __int16 *)(a1 + 11570))
  {
    uint64_t v5 = _VCTimescale_DecodeWarpWsola(a1);
    LogProfileTimeOverLimit(v4, v6, "SpkrProc: Warping");
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    uint64_t v5 = 0;
  }
  *(unsigned char *)(a2 + 152) = v7;
  if (!*(_DWORD *)(a2 + 44))
  {
    if (*(_DWORD *)(a2 + 48)) {
      char v7 = 1;
    }
    if ((v7 & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 11536))
      {
        _VCTimescale_WsolaTail(a1);
        *(double *)(a1 + 11544) = micro();
        *(_DWORD *)(a1 + 11536) = 0;
        *(unsigned char *)(a1 + 8) = 1;
        if ((int)VRTraceGetErrorLogLevelForModule() > 4)
        {
          uint64_t v8 = VRTraceErrorLogLevelToCSTR();
          uint64_t v9 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)fd_set buf = 136315906;
            uint64_t v12 = v8;
            __int16 v13 = 2080;
            BOOL v14 = "_VCTimescaleWSOLA_TailSize";
            __int16 v15 = 1024;
            int v16 = 398;
            __int16 v17 = 1024;
            int v18 = 0;
            _os_log_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Extracted WSOLA tail, size=%u", buf, 0x22u);
          }
        }
      }
      **(_DWORD **)(a2 + 24) = **(_DWORD **)(a2 + 24);
    }
  }
  return v5;
}

uint64_t _VCTimescale_DecodeWarpWsola(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v3 = v2;
  int v5 = v4;
  __int16 v31 = v7;
  double v32 = v6;
  int v9 = v8;
  BOOL v11 = v10;
  uint64_t v12 = v1;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  __int16 v13 = (unsigned __int16 *)(v1 + 11568);
  BOOL v14 = memset(v48, 255, sizeof(v48));
  int v15 = v13[1];
  int v34 = 4 * v15;
  if (*((unsigned char *)v13 + 5))
  {
    int v16 = (float *)v48;
    BOOL v14 = (void *)AudioConverterConvertBuffer(*(AudioConverterRef *)(v12 + 11576), 2 * v15, v3, (UInt32 *)&v34, v48);
    int v15 = v13[1];
    if (v13[1])
    {
LABEL_3:
      float v17 = fmax((double)(v9 / v15), 0.75);
      goto LABEL_6;
    }
  }
  else
  {
    int v16 = (float *)v3;
    if (v15) {
      goto LABEL_3;
    }
  }
  float v17 = 0.75;
LABEL_6:
  unsigned int v33 = *v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v20 = (float *)((char *)&v30 - v19);
  if (v21) {
    memset((char *)&v30 - v19, 255, v18);
  }
  if (!*((unsigned char *)v13 + 5)) {
    uint64_t v20 = v11;
  }
  if (*(_DWORD *)(v12 + 11536))
  {
    unsigned int v22 = 0;
    *(_DWORD *)(v12 + 11532) = 0;
  }
  else
  {
    unsigned int v22 = *(_DWORD *)(v12 + 11532);
  }
  memcpy(v47, (const void *)v12, sizeof(v47));
  int v23 = VCTimescaleWSOLA_Adapt(v47, v16, v13[1], v20, &v33, v12 + 12, v22, v17, 0.00200000009);
  *(_DWORD *)(v12 + 11536) = 1;
  if (v23 == 3)
  {
    memcpy(v11, v3, v13[1] * v5);
    unsigned int v24 = v13[1];
    uint64_t result = 23;
  }
  else
  {
    if (*((unsigned char *)v13 + 5))
    {
      int v34 = 2 * v33;
      AudioConverterConvertBuffer(*(AudioConverterRef *)(v12 + 11584), 4 * v33, v20, (UInt32 *)&v34, v11);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() <= 4)
    {
      unsigned int v24 = v33;
    }
    else
    {
      uint64_t v26 = VRTraceErrorLogLevelToCSTR();
      __int16 v27 = *MEMORY[0x1E4F47A50];
      BOOL v28 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT);
      unsigned int v24 = v33;
      if (v28)
      {
        int v29 = v13[1];
        int v35 = 136316418;
        uint64_t v36 = v26;
        __int16 v37 = 2080;
        uint64_t v38 = "_VCTimescale_DecodeWarpWsola";
        __int16 v39 = 1024;
        int v40 = 604;
        __int16 v41 = 2048;
        double v42 = v17;
        __int16 v43 = 1024;
        int v44 = v29;
        __int16 v45 = 1024;
        unsigned int v46 = v33;
        _os_log_impl(&dword_1E1EA4000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WSOLA WARP, scale = %f, in size = %u, out size = %u", (uint8_t *)&v35, 0x32u);
      }
    }
    uint64_t result = 0;
    *__int16 v31 = 1;
  }
  *double v32 = v24;
  return result;
}

void LogProfileTimeOverLimit(double a1, double a2, const char *a3, ...)
{
  va_start(va, a3);
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (VRTraceIsInternalOSInstalled())
  {
    double v5 = micro() - a1;
    if (v5 > 0.00499999989)
    {
      *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v33 = v6;
      long long v34 = v6;
      long long v31 = v6;
      long long v32 = v6;
      long long v29 = v6;
      long long v30 = v6;
      long long v27 = v6;
      long long v28 = v6;
      long long v25 = v6;
      long long v26 = v6;
      long long v24 = v6;
      long long v22 = v6;
      long long v23 = v6;
      long long v20 = v6;
      long long v21 = v6;
      *(_OWORD *)char __str = v6;
      vsnprintf(__str, 0x100uLL, a3, va);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v7 = VRTraceErrorLogLevelToCSTR();
        int v8 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)fd_set buf = 136316162;
          uint64_t v10 = v7;
          __int16 v11 = 2080;
          uint64_t v12 = "_LogProfileTimeLimitHelper";
          __int16 v13 = 1024;
          int v14 = 36;
          __int16 v15 = 2080;
          int v16 = __str;
          __int16 v17 = 2048;
          double v18 = v5;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

void _VCTimescale_WsolaTail(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v3 = v2;
  double v5 = v4;
  long long v6 = (AudioConverterRef *)v1;
  v18[1452] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = v1 + 11568;
  int v17 = *(unsigned __int16 *)(v1 + 11568);
  MEMORY[0x1F4188790](v1);
  uint64_t v10 = (char *)&v16 - v9;
  if (v11) {
    memset((char *)&v16 - v9, 255, v8);
  }
  if (!*(unsigned char *)(v7 + 5)) {
    uint64_t v10 = v5;
  }
  double v12 = 0.0;
  if (VRTraceIsInternalOSInstalled()) {
    double v12 = micro();
  }
  memcpy(v18, v6, 0x2D60uLL);
  VCTimescaleWSOLA_WindowTail(v18, v10, &v17);
  LogProfileTimeOverLimit(v12, v13, "SpkrProc: WsolaTail");
  int v14 = *(unsigned __int8 *)(v7 + 5);
  int v15 = v17;
  if (v14)
  {
    int v16 = 2 * v17;
    AudioConverterConvertBuffer(v6[1448], 4 * v17, v10, (UInt32 *)&v16, v5);
  }
  *int v3 = v15;
}

uint64_t VCMemoryUtil_IsProbabilisticGuardMallocEnabled()
{
  if (VCMemoryUtil_IsProbabilisticGuardMallocEnabled_onceToken != -1) {
    dispatch_once(&VCMemoryUtil_IsProbabilisticGuardMallocEnabled_onceToken, &__block_literal_global_107);
  }
  return VCMemoryUtil_IsProbabilisticGuardMallocEnabled_isProbabilisticGuardMallocEnabled;
}

uint64_t VCMemoryUtil_IsAddressSanitizerEnabled()
{
  if (VCMemoryUtil_IsAddressSanitizerEnabled_onceToken != -1) {
    dispatch_once(&VCMemoryUtil_IsAddressSanitizerEnabled_onceToken, &__block_literal_global_6);
  }
  return VCMemoryUtil_IsAddressSanitizerEnabled_isASANEnabled;
}

void HandleWCMEvent(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v4 = a2;
    uint64_t uint64 = xpc_dictionary_get_uint64(a1, "kMessageId");
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      uint64_t v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)fd_set buf = 136315906;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "HandleWCMEvent";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v33) = 86;
        WORD2(v33) = 1024;
        *(_DWORD *)((char *)&v33 + 6) = uint64;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WCM: receive a WCM event [%d].", buf, 0x22u);
      }
    }
    if (uint64 == 1100)
    {
      uint64_t value = 0;
      objc_msgSend((id)objc_msgSend(a2, "wcmClientDelegate"), "wcmGetCallConfig:targetBitrate:", (char *)&value + 4, &value);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v13 = VRTraceErrorLogLevelToCSTR();
        int v14 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)fd_set buf = 136316162;
          *(void *)&uint8_t buf[4] = v13;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "ProcessGetCallConfig";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v33) = 40;
          WORD2(v33) = 1024;
          *(_DWORD *)((char *)&v33 + 6) = HIDWORD(value);
          WORD5(v33) = 1024;
          HIDWORD(v33) = value;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WCM: current bitrate cap [%u] target [%u]", buf, 0x28u);
        }
      }
      *(_OWORD *)keys = xmmword_1E6DB9E58;
      xpc_object_t v15 = xpc_uint64_create(HIDWORD(value));
      xpc_object_t v16 = xpc_uint64_create(value);
      values[0] = v15;
      values[1] = v16;
      xpc_object_t v17 = xpc_dictionary_create((const char *const *)keys, values, 2uLL);
      *(_OWORD *)uint64_t v36 = xmmword_1E6DB9E68;
      xpc_object_t v18 = xpc_uint64_create(0xC8uLL);
      v35[0] = v18;
      v35[1] = v17;
      xpc_object_t v19 = xpc_dictionary_create((const char *const *)v36, v35, 2uLL);
      xpc_release(v17);
      xpc_release(v15);
      xpc_release(v16);
      xpc_release(v18);
      long long v20 = [a2 connectionQueue];
      *(void *)fd_set buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __ProcessGetCallConfig_block_invoke;
      *(void *)&long long v33 = &unk_1E6DB3E40;
      *((void *)&v33 + 1) = a2;
      xpc_object_t v34 = v19;
      dispatch_async(v20, buf);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v21 = VRTraceErrorLogLevelToCSTR();
        long long v22 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long v26 = 136315650;
          uint64_t v27 = v21;
          __int16 v28 = 2080;
          long long v29 = "ProcessGetCallConfig";
          __int16 v30 = 1024;
          int v31 = 69;
          _os_log_impl(&dword_1E1EA4000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WCM: sent reply for WCMFTCallConfig.", v26, 0x1Cu);
        }
      }
    }
    else if (uint64 == 1101)
    {
      xpc_object_t v8 = xpc_dictionary_get_value(a1, "kMessageArgs");
      uint64_t v9 = xpc_dictionary_get_uint64(v8, "kWCMFTCallConfig_BitrateCapability");
      uint64_t v10 = xpc_dictionary_get_uint64(v8, "kWCMFTCallConfig_InterferenceLevel");
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v11 = VRTraceErrorLogLevelToCSTR();
        double v12 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)fd_set buf = 136316162;
          *(void *)&uint8_t buf[4] = v11;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "ProcessSetCallConfig";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v33) = 31;
          WORD2(v33) = 1024;
          *(_DWORD *)((char *)&v33 + 6) = v9;
          WORD5(v33) = 1024;
          HIDWORD(v33) = v10;
          _os_log_impl(&dword_1E1EA4000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WCM: BitrateCap [%d] InterferenceLevel [%d]", buf, 0x28u);
        }
      }
      objc_msgSend((id)objc_msgSend(a2, "wcmClientDelegate"), "wcmSetCallConfig:interferenceLevel:", v9, v10);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v23 = VRTraceErrorLogLevelToCSTR();
      long long v24 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        HandleWCMEvent_cold_1(v23, v24);
      }
    }
  }
}

void __ProcessGetCallConfig_block_invoke(uint64_t a1)
{
  uint64_t v2 = (_xpc_connection_s *)[*(id *)(a1 + 32) connection];
  if (v2) {
    xpc_connection_send_message(v2, *(xpc_object_t *)(a1 + 40));
  }
  int v3 = *(void **)(a1 + 40);

  xpc_release(v3);
}

uint64_t VCTransportICEConnected(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)MEMORY[0x1E4E56580]([a1 weak]);
  if (v13)
  {
    int v14 = v13;
    [v13 iceConnectedForCallID:a2 result:a3 didReceivePacket:a4 useRelay:a5 secretKey:a6 skeResult:a7];
    CFRelease(v14);
  }
  return 0;
}

void VCTransportICENewCandidates(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)MEMORY[0x1E4E56580]([a1 weak]);
  if (v9)
  {
    uint64_t v10 = v9;
    [v9 iceNewCandidatesForCallID:a2 blob:a3 size:a4 newCandidateVersion:a5];
    CFRelease(v10);
  }
}

void VCTransportICEShouldNominate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  xpc_object_t v15 = (void *)MEMORY[0x1E4E56580]([a1 weak]);
  if (v15)
  {
    xpc_object_t v16 = v15;
    [v15 iceShouldNominateNewCandidate:a3 forCallID:a2 interfaceMask:a4 nominated:a5 demote:a6 connectionPriority:a7 replaceOnly:a8];
    CFRelease(v16);
  }
}

void VCTransportICERemoveIPPort(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = (void *)MEMORY[0x1E4E56580]([a1 weak]);
  if (v7)
  {
    xpc_object_t v8 = v7;
    [v7 iceRemoveIPPort:a3 forCallID:a2 isLocalInterface:a4 != 0];
    CFRelease(v8);
  }
}

void VCDataPacketReceivedCallback(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (void *)MEMORY[0x1E4E56580]([a1 weak]);
  if (v11)
  {
    double v12 = v11;
    [v11 receivedDataPacket:a2 length:a3 forCallID:a4 encrypted:a5 OFTType:a6];
    CFRelease(v12);
  }
}

void sub_1E2488A20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E2488D18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

FILE **VideoPacketDump_OpenRTPLog(uint64_t a1)
{
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v11 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketDump_OpenRTPLog_cold_1(v11);
      }
    }
    return 0;
  }
  uint64_t v1 = VRLogfileAlloc(0, a1, (uint64_t)"RTPPacketDumpVideo", (uint64_t)".packetdump", "com.apple.VideoConference.RTPPacketDumpQueue", 32);
  if (!v1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VideoPacketDump_OpenRTPLog_cold_2(v9);
      }
    }
    return 0;
  }
  xpc_object_t v8 = v1;
  VRLogfilePrintSync(v1, "sTime\tStreamID\tTimestamp\tSeqNumber\tFrameSequenceNumber\tFECPacketStatus\tIsTemporalScaledStream\tIsBaseLayerFrame\n", v2, v3, v4, v5, v6, v7, v12);
  return v8;
}

void VideoPacketDump_CloseRTPLog(uint64_t a1)
{
  v1[1] = *MEMORY[0x1E4F143B8];
  v1[0] = a1;
  VRLogfileFree(v1);
}

void VideoPacketDump_RTPLog(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v8[0] = 0;
    v8[1] = 0;
    int v9 = 0;
    VRLogfileGetTimestamp((char *)v8, 0x14u);
    VRLogfilePrint(a1, "%s\t%u\t%u\t%u\t%u\t%d\t%d\t%d\n", v2, v3, v4, v5, v6, v7, (char)v8);
  }
}

void VCVoiceDetector_Destroy(void **a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  if (v2)
  {
    free(v2);
    *a1 = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315650;
      uint64_t v6 = v3;
      __int16 v7 = 2080;
      xpc_object_t v8 = "VCVoiceDetector_Destroy";
      __int16 v9 = 1024;
      int v10 = 48;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NULL voice detector", (uint8_t *)&v5, 0x1Cu);
    }
  }
}

void *VCVoiceDetector_Create(char a1)
{
  v9[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v2 = malloc_type_calloc(1uLL, 0x68uLL, 0x10A0040FC058773uLL);
  v9[0] = v2;
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVoiceDetector_Create_cold_1(v7);
      }
    }
    return 0;
  }
  uint64_t v3 = v2;
  if (VCVoiceDetector_Create_loadPredicate != -1) {
    dispatch_once(&VCVoiceDetector_Create_loadPredicate, &__block_literal_global_108);
  }
  uint64_t v4 = (void *)VCVoiceDetector_Create_libHandle;
  *((void *)v3 + 1) = VCVoiceDetector_Create_libHandle;
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVoiceDetector_Create_cold_2();
      }
    }
    free(v3);
    return 0;
  }
  *((unsigned char *)v3 + 20) = a1;
  *((void *)v3 + 3) = dlsym(v4, "DNNVAD_CreateInstance");
  *((void *)v3 + 4) = dlsym(*((void **)v3 + 1), "DNNVAD_Initialize");
  *((void *)v3 + 5) = dlsym(*((void **)v3 + 1), "DNNVAD_Uninitialize");
  *((void *)v3 + 6) = dlsym(*((void **)v3 + 1), "DNNVAD_Process");
  *((void *)v3 + 9) = dlsym(*((void **)v3 + 1), "DNNVAD_DestroyInstance");
  *((void *)v3 + 7) = dlsym(*((void **)v3 + 1), "DNNVAD_GetSpeechProbabilitySoftValue");
  *((void *)v3 + 8) = dlsym(*((void **)v3 + 1), "DNNVAD_GetSpeechProbabilityHardValue");
  *((void *)v3 + 10) = dlsym(*((void **)v3 + 1), "DNNVAD_EnableLegacyVAD");
  *((void *)v3 + 11) = dlsym(*((void **)v3 + 1), "DNNVAD_GetSoundActivityValue");
  int v5 = dlsym(*((void **)v3 + 1), "DNNVAD_GetPowerMeterValue");
  *((void *)v3 + 12) = v5;
  *((_DWORD *)v3 + 4) = 2143289344;
  if (!*((void *)v3 + 3)
    || !*((void *)v3 + 4)
    || !*((void *)v3 + 5)
    || !*((void *)v3 + 6)
    || !*((void *)v3 + 9)
    || !*((void *)v3 + 7)
    || !*((void *)v3 + 8)
    || !*((void *)v3 + 10)
    || !*((void *)v3 + 11)
    || !v5)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCVoiceDetector_Create_cold_3(v6);
      }
    }
    VCVoiceDetector_Destroy(v9);
    return v9[0];
  }
  return v3;
}

void VCVoiceDetector_Start(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      int v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(a2 + 40);
        double v7 = *(double *)a2;
        int v16 = 136316418;
        uint64_t v17 = v4;
        __int16 v18 = 2080;
        xpc_object_t v19 = "VCVoiceDetector_Start";
        __int16 v20 = 1024;
        int v21 = 116;
        __int16 v22 = 1024;
        int v23 = v6;
        __int16 v24 = 2048;
        double v25 = v7;
        __int16 v26 = 2080;
        uint64_t v27 = "/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib";
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d  samplesPerFrame=%u -> inSampleRate=%f, AUDIODSP_COMPONENT_DYLIB=%s", (uint8_t *)&v16, 0x36u);
      }
    }
    int v8 = ((uint64_t (*)(void *))a1[3])(a1);
    if (!v8 && *a1)
    {
      if (*((unsigned char *)a1 + 20))
      {
        int v12 = ((uint64_t (*)(void))a1[10])();
        int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v12)
        {
          if (ErrorLogLevelForModule >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCVoiceDetector_Start_cold_2();
            }
          }
          goto LABEL_24;
        }
        if (ErrorLogLevelForModule >= 7)
        {
          uint64_t v14 = VRTraceErrorLogLevelToCSTR();
          xpc_object_t v15 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
          {
            int v16 = 136315650;
            uint64_t v17 = v14;
            __int16 v18 = 2080;
            xpc_object_t v19 = "VCVoiceDetector_Start";
            __int16 v20 = 1024;
            int v21 = 128;
            _os_log_impl(&dword_1E1EA4000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Vad_EnableLegacyVAD enabled", (uint8_t *)&v16, 0x1Cu);
          }
        }
      }
      if (!((unsigned int (*)(void, void, void))a1[4])(*a1, *(unsigned int *)(a2 + 40), *(double *)a2))return; {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      }
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
          VCVoiceDetector_Start_cold_1();
        }
      }
LABEL_24:
      ((void (*)(void))a1[9])(*a1);
      *a1 = 0;
      return;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      int v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
      {
        double v11 = *(double *)a1;
        int v16 = 136316162;
        uint64_t v17 = v9;
        __int16 v18 = 2080;
        xpc_object_t v19 = "VCVoiceDetector_Start";
        __int16 v20 = 1024;
        int v21 = 121;
        __int16 v22 = 1024;
        int v23 = v8;
        __int16 v24 = 2048;
        double v25 = v11;
        _os_log_error_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_ERROR, " [%s] %s:%d Vad_CreateInstance error=%d, audioVADRef=%p", (uint8_t *)&v16, 0x2Cu);
      }
    }
  }
}

void *VCVoiceDetector_Stop(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)*result;
    if (result)
    {
      ((void (*)(void))v1[5])();
      uint64_t result = (void *)((uint64_t (*)(void))v1[9])(*v1);
      void *v1 = 0;
    }
  }
  return result;
}

uint64_t VCVoiceDetector_ProcessSampleBuffer(void *a1, uint64_t a2, char a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned __int8 v4 = 0;
    if (a2 && *a1)
    {
      uint64_t v25 = 0;
      float v24 = NAN;
      if ((a3 & 1) == 0)
      {
        uint64_t AudioBufferList = VCAudioBufferList_GetAudioBufferList(a2);
        double v7 = (void (*)(uint64_t, uint64_t, uint64_t))a1[6];
        uint64_t v8 = *a1;
        uint64_t v9 = *(void *)(AudioBufferList + 16);
        uint64_t SampleCount = VCAudioBufferList_GetSampleCount(a2);
        v7(v8, v9, SampleCount);
        if (((unsigned int (*)(void, char *))a1[8])(*a1, (char *)&v25 + 4))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCVoiceDetector_ProcessSampleBuffer_cold_3();
            }
          }
        }
        else
        {
          if (!((unsigned int (*)(void, uint64_t *))a1[7])(*a1, &v25))
          {
            uint64_t v11 = v25;
            int v12 = (float *)(a1 + 2);
            if (*((float *)&v25 + 1) == 0.0)
            {
              VCUtil_ExponentialMovingAverage(v12, *(float *)&v25, 50.0);
              float v13 = v14;
            }
            else
            {
              *int v12 = NAN;
              float v13 = 1.0;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v15 = VRTraceErrorLogLevelToCSTR();
              int v16 = *MEMORY[0x1E4F47A50];
              uint64_t v17 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)fd_set buf = 136316418;
                  uint64_t v27 = v15;
                  __int16 v28 = 2080;
                  long long v29 = "_VCVoiceDetector_CalculateVoiceProbability";
                  __int16 v30 = 1024;
                  int v31 = 165;
                  __int16 v32 = 1024;
                  BOOL v33 = *((float *)&v11 + 1) != 0.0;
                  __int16 v34 = 2048;
                  double v35 = *(float *)&v11;
                  __int16 v36 = 2048;
                  double v37 = v13;
                  _os_log_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d isVoiceActiveDNN=%d voiceProbabilityDNN=%f -> voiceProbability=%f", buf, 0x36u);
                }
              }
              else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)fd_set buf = 136316418;
                uint64_t v27 = v15;
                __int16 v28 = 2080;
                long long v29 = "_VCVoiceDetector_CalculateVoiceProbability";
                __int16 v30 = 1024;
                int v31 = 165;
                __int16 v32 = 1024;
                BOOL v33 = *((float *)&v11 + 1) != 0.0;
                __int16 v34 = 2048;
                double v35 = *(float *)&v11;
                __int16 v36 = 2048;
                double v37 = v13;
                _os_log_debug_impl(&dword_1E1EA4000, v16, OS_LOG_TYPE_DEBUG, " [%s] %s:%d isVoiceActiveDNN=%d voiceProbabilityDNN=%f -> voiceProbability=%f", buf, 0x36u);
              }
            }
            if (*((unsigned char *)a1 + 20))
            {
              if (((unsigned int (*)(void, float *))a1[11])(*a1, &v24))
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
                    VCVoiceDetector_ProcessSampleBuffer_cold_1();
                  }
                }
                unsigned __int8 v4 = 0;
                goto LABEL_32;
              }
              VCAudioBufferList_SetVoiceActivity(a2, v24 == 0.0);
            }
            int VoiceActivity = VCAudioBufferList_GetVoiceActivity(a2);
            if (VoiceActivity == 1) {
              char v19 = 127;
            }
            else {
              char v19 = 1;
            }
            if (*((float *)&v25 + 1) == 0.0) {
              unsigned __int8 v4 = v19;
            }
            else {
              unsigned __int8 v4 = -1;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v20 = VRTraceErrorLogLevelToCSTR();
              int v21 = *MEMORY[0x1E4F47A50];
              __int16 v22 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)fd_set buf = 136316930;
                  uint64_t v27 = v20;
                  __int16 v28 = 2080;
                  long long v29 = "VCVoiceDetector_ProcessSampleBuffer";
                  __int16 v30 = 1024;
                  int v31 = 216;
                  __int16 v32 = 1024;
                  BOOL v33 = VoiceActivity == 1;
                  __int16 v34 = 2048;
                  double v35 = *((float *)&v25 + 1);
                  __int16 v36 = 2048;
                  double v37 = *(float *)&v25;
                  __int16 v38 = 2048;
                  double v39 = v13;
                  __int16 v40 = 1024;
                  int v41 = v4;
                  _os_log_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d vad1=%d hard=%f soft=%f prob=%f priority=%d", buf, 0x46u);
                }
              }
              else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)fd_set buf = 136316930;
                uint64_t v27 = v20;
                __int16 v28 = 2080;
                long long v29 = "VCVoiceDetector_ProcessSampleBuffer";
                __int16 v30 = 1024;
                int v31 = 216;
                __int16 v32 = 1024;
                BOOL v33 = VoiceActivity == 1;
                __int16 v34 = 2048;
                double v35 = *((float *)&v25 + 1);
                __int16 v36 = 2048;
                double v37 = *(float *)&v25;
                __int16 v38 = 2048;
                double v39 = v13;
                __int16 v40 = 1024;
                int v41 = v4;
                _os_log_debug_impl(&dword_1E1EA4000, v21, OS_LOG_TYPE_DEBUG, " [%s] %s:%d vad1=%d hard=%f soft=%f prob=%f priority=%d", buf, 0x46u);
              }
            }
LABEL_32:
            VCAudioBufferList_SetPriority(a2, v4);
            VCAudioBufferList_SetVoiceProbability(a2, v13);
            return v4;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
              VCVoiceDetector_ProcessSampleBuffer_cold_2();
            }
          }
        }
        unsigned __int8 v4 = 0;
        float v13 = NAN;
        goto LABEL_32;
      }
      unsigned __int8 v4 = 1;
      float v13 = 0.0;
      goto LABEL_32;
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t _VCJitterBuffer_GetJBTargetFromEstimatedTarget(uint64_t a1, float *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    float v4 = *a2;
    JTargetJBEstimator_GetSharedSettings(a1 + 54600, (uint64_t)&v8);
    uint64_t result = 0;
    float v6 = fmax(v4, fmax(*(double *)&v9, *(double *)(a1 + 135800)));
    float v7 = fmin(v6, *((double *)&v9 + 1));
    *a2 = v7;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        _VCJitterBuffer_GetJBTargetFromEstimatedTarget_cold_1();
      }
    }
    return 4;
  }
  return result;
}

void _VCJitterBuffer_GetMinMaxQueueSizeFromConfig(_DWORD *a1, double *a2, double *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2 && a3)
  {
    int v5 = a1[50];
    double v6 = 0.5;
    if ((v5 - 1) < 2)
    {
      double v7 = 0.04;
    }
    else if (v5)
    {
      if (v5 != 3)
      {
LABEL_13:
        unsigned int v10 = a1[63];
        if (v10)
        {
          double v11 = (double)v10 / 1000.0;
          *a2 = v11;
        }
        else
        {
          double v11 = *a2;
        }
        *a2 = VCDefaults_GetDoubleValueForKey(@"jitterBufferMinQueueSize", v11);
        return;
      }
      LODWORD(v6) = a1[62];
      double v7 = (double)*(unint64_t *)&v6 / 1000.0;
      double v6 = v7;
    }
    else
    {
      double v7 = 0.1;
    }
    *a2 = v7;
    *a3 = v6;
    goto LABEL_13;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    uint64_t v8 = VRTraceErrorLogLevelToCSTR();
    long long v9 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136316162;
      uint64_t v13 = v8;
      __int16 v14 = 2080;
      uint64_t v15 = "_VCJitterBuffer_GetMinMaxQueueSizeFromConfig";
      __int16 v16 = 1024;
      int v17 = 742;
      __int16 v18 = 2048;
      char v19 = a2;
      __int16 v20 = 2048;
      int v21 = a3;
      _os_log_error_impl(&dword_1E1EA4000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid minQSize=%p or maxQSize=%p", (uint8_t *)&v12, 0x30u);
    }
  }
}

void *VCJitterBuffer_Create(uint64_t a1)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_Create_cold_1();
      }
    }
    return 0;
  }
  uint64_t v2 = malloc_type_calloc(1uLL, 0x216F0uLL, 0x10F20403853D266uLL);
  uint64_t v3 = v2;
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_Create_cold_3();
      }
    }
    goto LABEL_46;
  }
  float v4 = v2 + 16972;
  memcpy(v2, (const void *)a1, 0x120uLL);
  if (!*((unsigned char *)v3 + 260))
  {
    size_t v5 = VCBoundsSafety_IndexableToNulTerminated((char *)a1, 0xC8uLL);
    v3[17104] = LogDump_OpenLog(v5, (uint64_t)"JitterBuffer", (uint64_t)".jbdump", (char)"STime\tTimestamp\tSPF\tBundling\tDTX\tNetworkType\tFirstTimestamp\tWraps\tIsRed\tLag\tAvgLag\tMaxLag\tMinLag\tJumpThresh\tSlopeThresh\tFlat\tClippedLag\tMinLagAdjustment\tMinClipThreshold\tJB\tJBMin\tJBMax\tTargetJ\tRedOverheadInTargetJ\tTargetJQSize\tJQSize\tAvgJQSize\tERASURE\tMODE\tPayload Type\tSeq Number\tINTS\tOUTTS\tLeftOverSamples\tProminence\tStreamID\tTargetSizeIndependent\tAVSyncOffset\tIntermittentState\tSingleOutagePeriod\tEstimatedIntermittentPeriod\tTargetBoostMode\tErasureAlt\n", 9, (char)"2.7");
  }
  *((double *)v3 + 16979) = VCDefaults_GetDoubleValueForKey(@"audioJitterBufferWeightedAvgQSizeFactor", 0.05);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  _VCJitterBuffer_GetMinMaxQueueSizeFromConfig((_DWORD *)a1, (double *)&v45, (double *)&v44);
  v3[17103] = v45;
  *((unsigned char *)v3 + 135816) = *(_DWORD *)(a1 + 200) == 3;
  uint64_t v6 = v3[17104];
  *(void *)&long long v43 = 0;
  *((void *)&v43 + 1) = v6;
  if ((JLagProcessor_Initialize((uint64_t)(v3 + 6768), &v43) & 1) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_Create_cold_7();
      }
    }
    goto LABEL_46;
  }
  uint64_t v42 = 0;
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v7 = v3[17103];
  *(void *)&long long v33 = v7;
  double MinQueueSizeOverride5G = GKSConnectivitySettings_GetMinQueueSizeOverride5G();
  double v9 = 0.1;
  if (MinQueueSizeOverride5G != 0.0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v10 = VRTraceErrorLogLevelToCSTR();
      double v11 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)fd_set buf = 136315906;
        uint64_t v47 = v10;
        __int16 v48 = 2080;
        uint64_t v49 = "VCJitterBuffer_GetMinJitterBufferQueueSize5G";
        __int16 v50 = 1024;
        int v51 = 710;
        __int16 v52 = 2048;
        double v53 = MinQueueSizeOverride5G;
        _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d JB Min Queue Size for 5G is overriden with server bag value %f", buf, 0x26u);
      }
    }
    double v9 = MinQueueSizeOverride5G;
  }
  double DoubleValueForKey = VCDefaults_GetDoubleValueForKey(@"kVCDefaultJitterBufferMinQueueSize5G", v9);
  uint64_t v13 = v44;
  *((double *)&v33 + 1) = DoubleValueForKey;
  uint64_t v34 = v44;
  if (*((_DWORD *)v3 + 50)) {
    double v14 = 0.1;
  }
  else {
    double v14 = 0.25;
  }
  double v35 = v14;
  int v15 = *(unsigned __int8 *)(a1 + 204);
  LODWORD(v36[0]) = v15;
  *(_OWORD *)((char *)v36 + 8) = xmmword_1E25A3780;
  *(void *)&long long v37 = v3[17104];
  WORD4(v36[1]) = 257;
  LOBYTE(v39) = 1;
  int v16 = *(unsigned __int8 *)(a1 + 218);
  int v17 = v16 ^ 1;
  BYTE1(v39) = v16 ^ 1;
  BYTE3(v39) = 1;
  BYTE8(v37) = VCDefaults_GetBoolValueForKey(@"jitterBufferHistoryUseShortTermWindowForTargetExpansion", 1);
  double v18 = VCDefaults_GetDoubleValueForKey(@"jitterBufferHistoryShortTermWindowSize", 5.0);
  *(double *)&long long v38 = v18;
  double v19 = VCDefaults_GetDoubleValueForKey(@"jitterBufferHistoryLongTermWindowSize", 10.0);
  *((double *)&v38 + 1) = v19;
  int v20 = *(unsigned __int8 *)(a1 + 217);
  BYTE2(v39) = *(unsigned char *)(a1 + 217);
  int v21 = *(const void **)(a1 + 232);
  if (v21) {
    CFTypeRef v22 = CFRetain(v21);
  }
  else {
    CFTypeRef v22 = 0;
  }
  *((void *)&v39 + 1) = v22;
  *(void *)&long long v40 = 0x4008000000000000;
  DWORD2(v40) = *((_DWORD *)v3 + 60);
  LOBYTE(v42) = 1;
  *(void *)&long long v41 = _VCJitterBuffer_GetJBTargetFromEstimatedTarget;
  *((void *)&v41 + 1) = v3;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v23 = VRTraceErrorLogLevelToCSTR();
    float v24 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *((unsigned __int8 *)v3 + 216);
      int v26 = *((unsigned __int8 *)v3 + 260);
      int v27 = *((unsigned __int8 *)v3 + 280);
      *(_DWORD *)fd_set buf = 136319490;
      uint64_t v47 = v23;
      __int16 v48 = 2080;
      uint64_t v49 = "VCJitterBuffer_Create";
      __int16 v50 = 1024;
      int v51 = 851;
      __int16 v52 = 2048;
      double v53 = *(double *)&v3;
      __int16 v54 = 2048;
      uint64_t v55 = v7;
      __int16 v56 = 2048;
      uint64_t v57 = v13;
      __int16 v58 = 2048;
      double v59 = v14;
      __int16 v60 = 1024;
      int v61 = v15;
      __int16 v62 = 2048;
      uint64_t v63 = 0x3FEE666666666666;
      __int16 v64 = 2048;
      double v65 = v18;
      __int16 v66 = 2048;
      double v67 = v19;
      __int16 v68 = 1024;
      int v69 = v20;
      __int16 v70 = 2048;
      double v71 = DoubleValueForKey;
      __int16 v72 = 2048;
      CFTypeRef v73 = v22;
      __int16 v74 = 1024;
      int v75 = v17;
      __int16 v76 = 1024;
      int v77 = v25;
      __int16 v78 = 1024;
      int v79 = v26;
      __int16 v80 = 1024;
      int v81 = v27;
      _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCJitterBuffer[%p] Jitter buffer configured with minQSize=%f maxQSize=%f highStartQSize=%f highStartMode=%d targetPercentileToCover=%f shortTermWindowSize=%f longTermWindowSize=%f filterDRXBundleEnabled=%d minQSize5G=%f targetSynchronizer=%p spikeManagement=%d skipDecodeOnSilence=%d skipJBDumpCreation=%d enableEnhancedJBAdaptations=%d", buf, 0x9Au);
    }
  }
  if (!JTargetJBEstimator_Initialize((uint64_t)(v3 + 6825), &v33))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_Create_cold_6();
      }
    }
    goto LABEL_46;
  }
  __int16 v28 = JitterPreloadQueue_Create();
  *float v4 = v28;
  if (!v28)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_Create_cold_4();
      }
    }
    goto LABEL_46;
  }
  JitterQueue_Create();
  v3[16973] = v29;
  if (!v29)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_Create_cold_5();
      }
    }
LABEL_46:
    VCJitterBuffer_Finalize((char **)v3);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_Create_cold_2();
      }
    }
    return 0;
  }
  *((_OWORD *)v3 + 8558) = *(_OWORD *)(a1 + 264);
  v3[16999] = 0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v30 = VRTraceErrorLogLevelToCSTR();
    int v31 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)fd_set buf = 136315650;
      uint64_t v47 = v30;
      __int16 v48 = 2080;
      uint64_t v49 = "VCJitterBuffer_Create";
      __int16 v50 = 1024;
      int v51 = 867;
      _os_log_impl(&dword_1E1EA4000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Jitter Buffer Created Successfully", buf, 0x1Cu);
    }
  }
  return v3;
}

void VCJitterBuffer_Finalize(char **a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    uint64_t v3 = a1 + 16972;
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v4 = VRTraceErrorLogLevelToCSTR();
      size_t v5 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315906;
        uint64_t v9 = v4;
        __int16 v10 = 2080;
        double v11 = "VCJitterBuffer_Finalize";
        __int16 v12 = 1024;
        int v13 = 880;
        __int16 v14 = 2048;
        int v15 = a1;
        _os_log_impl(&dword_1E1EA4000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Cleaning up JitterBuffer (0x%p)", (uint8_t *)&v8, 0x26u);
      }
    }
    uint64_t v6 = (uint64_t *)a1[16973];
    if (v6)
    {
      JitterQueue_Destroy(v6);
      a1[16973] = 0;
    }
    if (*v3)
    {
      JitterPreloadQueue_Destroy(*v3);
      *uint64_t v3 = 0;
    }
    VCAudioPlayer_Finalize((uint64_t)(a1 + 36));
    JTargetJBEstimator_Finalize((uint64_t)(a1 + 6825));
    uint64_t v7 = a1[29];
    if (v7)
    {
      CFRelease(v7);
      a1[29] = 0;
    }
    LogDump_CloseLog((uint64_t)a1[17104]);
    free(a1);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_Finalize_cold_1();
    }
  }
}

uint64_t VCJitterBuffer_QueueSteeringCallback(uint64_t a1, double a2)
{
  if (a1)
  {
    uint64_t result = 0;
    *(double *)(a1 + 135872) = a2;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_QueueSteeringCallback_cold_1();
      }
    }
    return 4;
  }
  return result;
}

BOOL VCJitterBuffer_InitializePlayback(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = a1 + 135784;
    char v15 = -86;
    __int16 v14 = -21846;
    memset(v20, 170, sizeof(v20));
    memset(v24, 170, sizeof(v24));
    uint64_t v5 = *(void *)(a1 + 135784);
    size_t v6 = VCBoundsSafety_IndexableToNulTerminated((char *)a1, 0xC8uLL);
    char v7 = *(unsigned char *)(a1 + 244);
    uint64_t v8 = *(void *)(v4 + 1136);
    char v9 = *(unsigned char *)(a1 + 261);
    char v10 = *(unsigned char *)(a1 + 280);
    v12[0] = v5;
    v12[1] = a2;
    void v12[2] = v6;
    v12[3] = *(void *)(a1 + 220);
    v12[4] = VCJitterBuffer_QueueSteeringCallback;
    void v12[5] = a1;
    char v13 = v7;
    int32x2_t v16 = vrev64_s32(*(int32x2_t *)(a1 + 252));
    int v17 = -1431655766;
    uint64_t v18 = v8;
    char v19 = v9;
    uint64_t v21 = a1;
    CFTypeRef v22 = _VCJitterBuffer_DTMFEventCallback;
    char v23 = v10;
    return (int)VCAudioPlayer_Initialize(a1 + 288, (unint64_t)v12) >= 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    BOOL result = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    VCJitterBuffer_InitializePlayback_cold_1();
  }
  return 0;
}

uint64_t _VCJitterBuffer_DTMFEventCallback(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(uint64_t (**)(void))(result + 136936);
    if (v1) {
      return v1(*(void *)(result + 136928));
    }
  }
  return result;
}

void VCJitterBuffer_Reset(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315906;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        uint64_t v8 = "VCJitterBuffer_Reset";
        __int16 v9 = 1024;
        int v10 = 941;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    *(unsigned char *)(a1 + 135848) = 1;
    VCJitterBuffer_ResetPlaybackReportingMetrics(a1);
    VCJitterBuffer_ResetJitterQueueUnderflowRate(a1);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_Reset_cold_1();
    }
  }
}

void VCJitterBuffer_ResetPlaybackReportingMetrics(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315906;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        uint64_t v8 = "VCJitterBuffer_ResetPlaybackReportingMetrics";
        __int16 v9 = 1024;
        int v10 = 968;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    VCAudioPlayer_ResetReportingMetrics(a1 + 288);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_ResetPlaybackReportingMetrics_cold_1();
    }
  }
}

void VCJitterBuffer_ResetJitterQueueUnderflowRate(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315906;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        uint64_t v8 = "VCJitterBuffer_ResetJitterQueueUnderflowRate";
        __int16 v9 = 1024;
        int v10 = 974;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    JitterQueue_ResetUnderflowRate(*(_DWORD **)(a1 + 135784));
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_ResetJitterQueueUnderflowRate_cold_1();
    }
  }
}

void VCJitterBuffer_DiscardQueueExcess(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315906;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        uint64_t v8 = "VCJitterBuffer_DiscardQueueExcess";
        __int16 v9 = 1024;
        int v10 = 949;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    *(_DWORD *)(a1 + 135840) = 1;
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_DiscardQueueExcess_cold_1();
    }
  }
}

void VCJitterBuffer_SetRedAudioDelayInSamples(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      __int16 v7 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 136316162;
          uint64_t v9 = v5;
          __int16 v10 = 2080;
          __int16 v11 = "VCJitterBuffer_SetRedAudioDelayInSamples";
          __int16 v12 = 1024;
          int v13 = 955;
          __int16 v14 = 2048;
          uint64_t v15 = a1;
          __int16 v16 = 1024;
          int v17 = a2;
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] redAudioDelayInSamples:%d", (uint8_t *)&v8, 0x2Cu);
        }
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136316162;
        uint64_t v9 = v5;
        __int16 v10 = 2080;
        __int16 v11 = "VCJitterBuffer_SetRedAudioDelayInSamples";
        __int16 v12 = 1024;
        int v13 = 955;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        __int16 v16 = 1024;
        int v17 = a2;
        _os_log_debug_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] redAudioDelayInSamples:%d", (uint8_t *)&v8, 0x2Cu);
      }
    }
    *(_DWORD *)(a1 + 135856) = a2;
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_SetRedAudioDelayInSamples_cold_1();
    }
  }
}

void VCJitterBuffer_Flush(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315906;
        uint64_t v6 = v3;
        __int16 v7 = 2080;
        int v8 = "VCJitterBuffer_Flush";
        __int16 v9 = 1024;
        int v10 = 961;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    JitterPreloadQueue_Flush(*(int **)(a1 + 135776));
    JitterQueue_Reset(*(uint64_t **)(a1 + 135784));
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_Flush_cold_1();
    }
  }
}

void VCJitterBuffer_EnqueuePacket(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = a1 + 135776;
    int v5 = (_DWORD *)(a1 + 288);
    PlaybackFormat = (unsigned int *)VCAudioPlayer_GetPlaybackFormat(a1 + 288);
    unsigned int v7 = *PlaybackFormat;
    long long v67 = 0u;
    long long v68 = 0u;
    uint64_t v69 = 0;
    __int16 v8 = *(_WORD *)(a2 + 14);
    LOWORD(v67) = v8;
    DWORD1(v67) = *(_DWORD *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 1824);
    *((void *)&v67 + 1) = *(void *)(a2 + 32);
    *(void *)&long long v68 = v9;
    DWORD2(v68) = *(_DWORD *)(a2 + 1516);
    LODWORD(v69) = *(_DWORD *)(a2 + 1816);
    BYTE4(v69) = *(unsigned char *)(a2 + 12);
    BYTE5(v69) = *(_DWORD *)(a2 + 40) != 0;
    if (*(_DWORD *)(v4 + 68) == 3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v10 = VRTraceErrorLogLevelToCSTR();
        __int16 v11 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v12 = *(unsigned __int16 *)(a2 + 14);
          *(_DWORD *)fd_set buf = 136316162;
          uint64_t v77 = v10;
          __int16 v78 = 2080;
          int v79 = "VCJitterBuffer_EnqueuePacket";
          __int16 v80 = 1024;
          int v81 = 1004;
          __int16 v82 = 2048;
          uint64_t v83 = a1;
          __int16 v84 = 1024;
          unsigned int v85 = v12;
          _os_log_impl(&dword_1E1EA4000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] state Reset dropping packet seqNum=%d", buf, 0x2Cu);
        }
      }
      goto LABEL_15;
    }
    if (*(_DWORD *)(a2 + 4) || *(unsigned char *)(v4 + 72))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v19 = VRTraceErrorLogLevelToCSTR();
        int v20 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v21 = *(unsigned __int8 *)(v4 + 72);
          int v22 = *(_DWORD *)(a2 + 4);
          int v23 = *(unsigned __int16 *)(a2 + 14);
          *(_DWORD *)fd_set buf = 136316674;
          uint64_t v77 = v19;
          __int16 v78 = 2080;
          int v79 = "VCJitterBuffer_EnqueuePacket";
          __int16 v80 = 1024;
          int v81 = 1008;
          __int16 v82 = 2048;
          uint64_t v83 = a1;
          __int16 v84 = 1024;
          unsigned int v85 = v21;
          __int16 v86 = 1024;
          int v87 = v22;
          __int16 v88 = 1024;
          int v89 = v23;
          _os_log_impl(&dword_1E1EA4000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] Setting state Reset, jqRequested[%d] packetNewStream[%d] seqNum[%d]", buf, 0x38u);
        }
      }
      *(_DWORD *)(v4 + 68) = 3;
      *(unsigned char *)(v4 + 72) = 0;
      VRLogfilePrint(*(void *)(v4 + 1056), "State = RESET\n", v13, v14, v15, v16, v17, v18, v66);
      goto LABEL_15;
    }
    if (!*(_DWORD *)(v4 + 68))
    {
      float v24 = PlaybackFormat;
      JTargetJBEstimator_NewStream(a1 + 54600, v7, v8);
      JLagProcessor_NewStream(a1 + 54144, (__int16 *)&v67, v7, v24[1]);
      JTargetJBEstimator_GetMinJBSize(a1 + 54600);
      uint64_t v25 = *(void *)(a1 + 54632);
      *(void *)(v4 + 24) = v26;
      *(void *)(v4 + 32) = v25;
      *(void *)(a1 + 135912) = 0;
      *(void *)(a1 + 135920) = 0;
      int AppIntegerValue = CFPreferencesGetAppIntegerValue(@"forceJitterBufferSize", @"com.apple.VideoConference", 0);
      *(_DWORD *)(v4 + 44) = AppIntegerValue;
      VCAudioPlayer_AdjustmentDisabled((uint64_t)v5, AppIntegerValue != 0);
      *(_DWORD *)(v4 + 68) = 1;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        uint64_t v34 = VRTraceErrorLogLevelToCSTR();
        double v35 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)fd_set buf = 136315906;
          uint64_t v77 = v34;
          __int16 v78 = 2080;
          int v79 = "VCJitterBuffer_EnqueuePacket";
          __int16 v80 = 1024;
          int v81 = 1027;
          __int16 v82 = 2048;
          uint64_t v83 = a1;
          _os_log_impl(&dword_1E1EA4000, v35, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] JBState NEWSTREAM -> SETTLE", buf, 0x26u);
        }
      }
      VRLogfilePrint(*(void *)(v4 + 1056), "State = STATE_NEWSTREAM, iSampleRate = %d\nState = SETTLE\n", v28, v29, v30, v31, v32, v33, v7);
    }
    int v36 = *(_DWORD *)(*(void *)(a2 + 1840) + 20);
    double v43 = JLagProcessor_Process(a1 + 54144, (unsigned __int16 *)&v67, v36, *(_DWORD *)(v4 + 112), *(_DWORD *)(v4 + 68));
    double v44 = v43;
    if (*(_DWORD *)(v4 + 68) == 1)
    {
      if (fabs(v43) > 0.0250000004)
      {
LABEL_15:
        VCJitterBuffer_AudioPacketFree(a1, (int *)a2);
        return;
      }
      *(_DWORD *)(v4 + 68) = 2;
      VRLogfilePrint(*(void *)(v4 + 1056), "State = FILL\n", v37, v38, v39, v40, v41, v42, v66);
    }
    if (*(_DWORD *)(v4 + 68) <= 3u) {
      *(_DWORD *)(v4 + 1040) += *(_DWORD *)(a2 + 1816) * *(_DWORD *)(*(void *)(a2 + 1840) + 20);
    }
    if (*(_DWORD *)(a2 + 40)) {
      ++*(_DWORD *)(v4 + 152);
    }
    if (*(_DWORD *)(v4 + 68) == 2 && *(_DWORD *)(v4 + 76))
    {
      JTargetJBEstimator_GetMinJBSize(a1 + 54600);
      int v46 = *(_DWORD *)(v4 + 44);
      if (v46 && v7) {
        double v45 = (double)v46 / (double)v7;
      }
      if (v4 + 16 >= (unint64_t)(v4 + 112))
      {
LABEL_58:
        __break(0x5519u);
        return;
      }
      double v47 = (double)*(int *)(v4 + 1040) / (double)v7;
      if (*(unsigned char *)(v4 + 40)) {
        BOOL v48 = v47 >= v45;
      }
      else {
        BOOL v48 = v47 > v45;
      }
      if (v48)
      {
        *(_DWORD *)(v4 + 68) = 4;
        _VCJitterBuffer_UpdateDiscardAlgoParams(a1);
        JTargetJBEstimator_ResetHistory(a1 + 54600);
        VRLogfilePrint(*(void *)(v4 + 1056), "State = RUN\n", v49, v50, v51, v52, v53, v54, v66);
      }
    }
    uint64_t v55 = *(unsigned int *)(a2 + 1816);
    if ((int)v55 >= 1)
    {
      __int16 v56 = (uint64_t *)(a2 + 1784);
      while ((unint64_t)v56 < a2 + 1816 && (unint64_t)v56 >= a2 + 1784)
      {
        uint64_t v57 = *v56++;
        *(_DWORD *)(v57 + 1192) = *(_DWORD *)(a1 + 35892);
        if (!--v55) {
          goto LABEL_45;
        }
      }
      goto LABEL_58;
    }
LABEL_45:
    bzero(buf, 0x748uLL);
    AudioPacket_initNewPacket(a2, (uint64_t)buf);
    JitterPreloadQueue_Enqueue(*(void ****)v4, (void **)a2);
    if ((_BYTE)v78)
    {
      BOOL v58 = 0;
    }
    else
    {
      *(_OWORD *)&v71[8] = 0u;
      *(void *)__int16 v70 = (unsigned __int16)v79;
      *(double *)&v70[8] = v91;
      *(_DWORD *)&v70[16] = v36;
      *(_DWORD *)&v70[20] = v90;
      *(void *)double v71 = *(unsigned int *)((char *)&v79 + 2);
      v71[16] = v85 != 0;
      JTargetJBEstimator_Process(a1 + 54600, (double *)v70, v44);
      BOOL v58 = (_BYTE)v78 == 0;
    }
    memset(v70, 170, 20);
    if (*(void *)(v4 + 1056) && v58)
    {
      LogDump_GetTimestampString(v91);
      uint64_t Statistics = JTargetJBEstimator_GetStatistics(a1 + 54600);
      uint64_t v60 = JLagProcessor_GetStatistics(a1 + 54144);
      VCAudioPlayer_GetStatistics(v5);
      VCAudioPlayer_GetPlaybackFormat((uint64_t)v5);
      _VCJitterBuffer_DesiredQSize((_DWORD *)a1);
      VRLogfilePrint(*(void *)(v4 + 1056), "%s\t%u\t%u\t%d\t%d\t%d\t%u\t%u\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%6d\t%6d\t%d\t%d\t%s\t%d\t%u\t%u\t%u\t%d\t%d\t%d\t%02.6f\t%02.4f\t%u\t%2.6f\t%2.6f\t%d\t%d\n", v92, v93, *(unsigned int *)(Statistics + 48), *(unsigned int *)(Statistics + 112), v85, *(unsigned int *)(v60 + 16), (char)v70);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v61 = VRTraceErrorLogLevelToCSTR();
      __int16 v62 = *MEMORY[0x1E4F47A50];
      uint64_t v63 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          int v64 = *(_DWORD *)(v4 + 68);
          *(_DWORD *)__int16 v70 = 136316930;
          *(void *)&v70[4] = v61;
          *(_WORD *)&v70[12] = 2080;
          *(void *)&v70[14] = "VCJitterBuffer_EnqueuePacket";
          *(_WORD *)&v70[22] = 1024;
          *(_DWORD *)double v71 = 1098;
          *(_WORD *)&v71[4] = 2048;
          *(void *)&v71[6] = a1;
          *(_WORD *)&v71[14] = 1024;
          *(_DWORD *)&v71[16] = v64;
          *(_WORD *)&v71[20] = 1024;
          *(_DWORD *)&v71[22] = v81;
          __int16 v72 = 1024;
          int v73 = HIDWORD(v77);
          __int16 v74 = 1024;
          int v75 = (unsigned __int16)v79;
          _os_log_impl(&dword_1E1EA4000, v62, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] JBState[%d] payloadType[%d] bytes[%d] SeqNumber[%d]", v70, 0x3Eu);
        }
      }
      else if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        int v65 = *(_DWORD *)(v4 + 68);
        *(_DWORD *)__int16 v70 = 136316930;
        *(void *)&v70[4] = v61;
        *(_WORD *)&v70[12] = 2080;
        *(void *)&v70[14] = "VCJitterBuffer_EnqueuePacket";
        *(_WORD *)&v70[22] = 1024;
        *(_DWORD *)double v71 = 1098;
        *(_WORD *)&v71[4] = 2048;
        *(void *)&v71[6] = a1;
        *(_WORD *)&v71[14] = 1024;
        *(_DWORD *)&v71[16] = v65;
        *(_WORD *)&v71[20] = 1024;
        *(_DWORD *)&v71[22] = v81;
        __int16 v72 = 1024;
        int v73 = HIDWORD(v77);
        __int16 v74 = 1024;
        int v75 = (unsigned __int16)v79;
        _os_log_debug_impl(&dword_1E1EA4000, v62, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] JBState[%d] payloadType[%d] bytes[%d] SeqNumber[%d]", v70, 0x3Eu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_EnqueuePacket_cold_1();
    }
  }
}

void VCJitterBuffer_AudioPacketFree(uint64_t a1, int *a2)
{
  if (a1)
  {
    if (a2[454] < 1)
    {
LABEL_7:
      uint64_t v9 = *(void *)(a1 + 135776);
      JitterPreloadQueue_AudioPacketFree(v9, a2);
    }
    else
    {
      uint64_t v4 = 0;
      int v5 = (void **)(a2 + 454);
      uint64_t v6 = a2 + 446;
      unsigned int v7 = (void **)(a2 + 446);
      while (v7 < v5 && v7 >= (void **)v6)
      {
        __int16 v8 = *v7++;
        JitterPreloadQueue_AudioFrameFree(*(void *)(a1 + 135776), v8);
        if (++v4 >= *(int *)v5) {
          goto LABEL_7;
        }
      }
      __break(0x5519u);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_AudioPacketFree_cold_1();
    }
  }
}

void _VCJitterBuffer_UpdateDiscardAlgoParams(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (double *)(a1 + 135344);
  if (*(_DWORD *)(a1 + 52852) == 2) {
    double v2 = 1.0;
  }
  else {
    double v2 = 3.0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    uint64_t v3 = VRTraceErrorLogLevelToCSTR();
    uint64_t v4 = *MEMORY[0x1E4F47A50];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315906;
      uint64_t v6 = v3;
      __int16 v7 = 2080;
      __int16 v8 = "_VCJitterBuffer_UpdateDiscardAlgoParams";
      __int16 v9 = 1024;
      int v10 = 981;
      __int16 v11 = 2048;
      double v12 = v2;
      _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Configuring queue discard threshold=%f", (uint8_t *)&v5, 0x26u);
    }
  }
  double *v1 = v2;
}

void VCJitterBuffer_PlaybackGetSamples(uint64_t a1, uint64_t a2, int *a3, BOOL *a4, uint64_t a5, int *a6, int *a7)
{
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_PlaybackGetSamples_cold_1();
      }
    }
    return;
  }
  uint64_t v9 = a1 + 135888;
  int v10 = (int *)(a1 + 135608);
  __int16 v11 = (uint64_t *)(a1 + 54632);
  double v12 = micro();
  int v216 = 1;
  char v215 = 0;
  char v214 = 1;
  uint64_t v203 = a2;
  int SampleCount = VCAudioBufferList_GetSampleCount(a2);
  int v204 = (double *)(v10 + 46);
  uint64_t v210 = a1;
  uint64_t v13 = a1 + 54600;
  JTargetJBEstimator_GetMinJBSize(a1 + 54600);
  uint64_t v14 = *v11;
  *((void *)v10 + 24) = v15;
  *((void *)v10 + 25) = v14;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v16 = VRTraceErrorLogLevelToCSTR();
    uint64_t v17 = *MEMORY[0x1E4F47A50];
    uint64_t v18 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)fd_set buf = 136315906;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCJitterBuffer_PlaybackGetSamples";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1117;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = a1;
        _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] Playback get samples", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      VCJitterBuffer_PlaybackGetSamples_cold_2();
    }
  }
  double v196 = v12;
  double v19 = micro();
  double v20 = dbl_1E25A3790[v10[59] < 4];
  double v21 = micro();
  double v194 = v19;
  double v207 = v19 + v20;
  if (v21 >= v19 + v20)
  {
    unsigned __int8 v205 = 0;
    char v208 = 0;
    goto LABEL_181;
  }
  unsigned __int8 v205 = 0;
  char v208 = 0;
  uint64_t v22 = a1 + 288;
  uint64_t v211 = a1 + 840;
  unint64_t v202 = (double *)(v9 + 920);
  unint64_t v193 = a1 + 136008;
  uint64_t v206 = a1 + 54600;
  while (1)
  {
    int v23 = JitterPreloadQueue_Dequeue(*((int **)v10 + 21));
    if ((int)VRTraceGetErrorLogLevelForModule() < 8) {
      goto LABEL_19;
    }
    uint64_t v31 = VRTraceErrorLogLevelToCSTR();
    uint64_t v32 = *MEMORY[0x1E4F47A50];
    uint64_t v33 = *MEMORY[0x1E4F47A50];
    if (!*MEMORY[0x1E4F47A40]) {
      break;
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v34 = v10[59];
      *(_DWORD *)fd_set buf = 136316418;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VCJitterBuffer_DequeuePacketsFromPreloadQueue";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 602;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v210;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v23 == 0;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v34;
      _os_log_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] Dequeue packet, is audio packet null:%d, state %d", buf, 0x32u);
      if (!v23) {
        goto LABEL_179;
      }
      goto LABEL_20;
    }
LABEL_19:
    if (!v23) {
      goto LABEL_179;
    }
LABEL_20:
    uint64_t v35 = v210;
    if (*(unsigned char *)(v210 + 216) && *((unsigned __int8 *)v23 + 1856) >= 2u) {
      VCAudioPlayer_ResumeAudioErasureMeasurement(v22, v23[4]);
    }
    if (v23 >= v23 + 466) {
      goto LABEL_241;
    }
    int v36 = (_DWORD *)v22;
    *(_DWORD *)uint64_t v222 = 0;
    uint64_t v37 = v23 + 454;
    uint64_t v209 = v23;
    if (v23[454] >= 1)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = v23 + 446;
      while (&v40[v38] < v37 && &v40[v38] >= v40)
      {
        unint64_t v42 = *(void *)&v40[2 * v39];
        if (*(unsigned char *)(v35 + 280)) {
          *(unsigned char *)(v42 + 1268) = VCSilencePredictor_PredictSilence(v211, *(_DWORD *)(v42 + 1196), *(_DWORD *)(v42 + 1144));
        }
        if (v42 && v42 >= v42 + 1272) {
          break;
        }
        int v44 = JitterQueue_Insert(*((void *)v10 + 22), v42, v222);
        if (*(unsigned char *)(v42 + 8))
        {
          int v45 = *(_DWORD *)(v9 + 56);
          ++*(_DWORD *)(v9 + 52);
          int v46 = *(_DWORD *)(*(void *)&v40[2 * v39] + 1144);
          *(_DWORD *)(v9 + 56) = v45 + v46;
          *(_DWORD *)(v9 + 72) = *(_DWORD *)(v42 + 1256);
          if (v44)
          {
            uint64_t v47 = *((void *)v209 + 228);
            *((void *)v10 + 32) = v47;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              uint64_t v48 = VRTraceErrorLogLevelToCSTR();
              uint64_t v49 = *MEMORY[0x1E4F47A50];
              uint64_t v50 = *MEMORY[0x1E4F47A50];
              if (*MEMORY[0x1E4F47A40])
              {
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)fd_set buf = 136315906;
                  *(void *)&uint8_t buf[4] = v48;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "_VCJitterBuffer_UpdateRedAudioArrivalTime";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&unsigned char buf[24] = 336;
                  *(_WORD *)&buf[28] = 2048;
                  *(void *)&buf[30] = v47;
                  _os_log_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Red frame inserted, updating time red frame was used. lastRedAudioArrivalTime=%f", buf, 0x26u);
                }
              }
              else if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)fd_set buf = 136315906;
                *(void *)&uint8_t buf[4] = v48;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "_VCJitterBuffer_UpdateRedAudioArrivalTime";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = 336;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = v47;
                _os_log_debug_impl(&dword_1E1EA4000, v49, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Red frame inserted, updating time red frame was used. lastRedAudioArrivalTime=%f", buf, 0x26u);
              }
            }
            uint64_t v52 = *(void *)&v40[2 * v39];
            memset(buf, 170, 20);
            if (*(void *)(v9 + 944) && *(unsigned char *)(v52 + 8))
            {
              double v53 = micro();
              LogDump_GetTimestampString(v53);
              uint64_t Statistics = VCAudioPlayer_GetStatistics(v36);
              VCAudioPlayer_GetPlaybackFormat((uint64_t)v36);
              _VCJitterBuffer_DesiredQSize((_DWORD *)v210);
              VRLogfilePrint(*(void *)(v9 + 944), "%s\t%u\t%u\t%d\t%d\t%d\t%u\t%u\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%6d\t%6d\t%d\t%d\t%s\t%d\t%u\t%u\t%u\t%d\t%d\t%d\t%02.6f\t%02.4f\t%u\t%2.6f\t%2.6f\t%d\t%d\n", *(unsigned int *)(v52 + 1176), Statistics[2], Statistics[3], Statistics[7], Statistics[6], *v10, (char)buf);
            }
            uint64_t v35 = v210;
          }
          else
          {
            int v51 = *(_DWORD *)(v9 + 64) + v46;
            ++*(_DWORD *)(v9 + 60);
            *(_DWORD *)(v9 + 64) = v51;
          }
        }
        ++v39;
        v38 += 2;
        if (v39 >= *v37) {
          goto LABEL_51;
        }
      }
LABEL_241:
      __break(0x5519u);
    }
LABEL_51:
    LogProfileTimeOverLimit_4("SpkrProc: PreloadQueue_Dequeue and AddPacket", v21, 0.00200000009, v24, v25, v26, v27, v28, v29, v30, v191);
    double v55 = *((double *)v209 + 228);
    double v56 = 0.0;
    if (VRTraceIsInternalOSInstalled()) {
      double v56 = micro();
    }
    uint64_t v22 = (uint64_t)v36;
    unsigned int v57 = *(_DWORD *)VCAudioPlayer_GetPlaybackFormat((uint64_t)v36);
    memset(buf, 0, 48);
    uint64_t v13 = v206;
    JTargetJBEstimator_GetSharedSettings(v206, (uint64_t)buf);
    double v58 = *(double *)&buf[40];
    int v59 = *(_DWORD *)&buf[32];
    double v60 = *(double *)&buf[8];
    int v61 = *(_DWORD *)(v210 + 224);
    if (v61 == 1)
    {
      double v65 = *((double *)v10 + 33);
      double v60 = *(double *)&buf[8] + v65;
      if (v65 != 0.0 && (int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v66 = VRTraceErrorLogLevelToCSTR();
        long long v67 = *MEMORY[0x1E4F47A50];
        long long v68 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v222 = 136315906;
            *(void *)&v222[4] = v66;
            *(_WORD *)int v223 = 2080;
            *(void *)&v223[2] = "_VCJitterBuffer_ApplyQueueManagementPolicy";
            *(_WORD *)&v223[10] = 1024;
            LODWORD(v224) = 206;
            WORD2(v224) = 2048;
            *(double *)((char *)&v224 + 6) = v65;
            _os_log_impl(&dword_1E1EA4000, v67, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Applying queue steering correction. jitterQueueOffset=%f", v222, 0x26u);
          }
        }
        else if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v222 = 136315906;
          *(void *)&v222[4] = v66;
          *(_WORD *)int v223 = 2080;
          *(void *)&v223[2] = "_VCJitterBuffer_ApplyQueueManagementPolicy";
          *(_WORD *)&v223[10] = 1024;
          LODWORD(v224) = 206;
          WORD2(v224) = 2048;
          *(double *)((char *)&v224 + 6) = v65;
          _os_log_debug_impl(&dword_1E1EA4000, v67, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Applying queue steering correction. jitterQueueOffset=%f", v222, 0x26u);
        }
      }
    }
    else if (!v61)
    {
      BOOL IsUnderrunQueueBoostEnabled = VCAudioPlayer_IsUnderrunQueueBoostEnabled((uint64_t)v36);
      double v63 = (0.5 - v60) * (0.5 - v60) * 2.5 + 1.0;
      if (v60 >= 0.5 || !IsUnderrunQueueBoostEnabled) {
        double v63 = 1.0;
      }
      double v64 = v60 * v63;
      double v58 = v64 - v60;
      int v59 = 6;
      double v60 = v64;
    }
    double v69 = *((double *)v10 + 34);
    if (v60 < v69)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        uint64_t v70 = VRTraceErrorLogLevelToCSTR();
        double v71 = *MEMORY[0x1E4F47A50];
        __int16 v72 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v222 = 136315650;
            *(void *)&v222[4] = v70;
            *(_WORD *)int v223 = 2080;
            *(void *)&v223[2] = "_VCJitterBuffer_ApplyQueueManagementPolicy";
            *(_WORD *)&v223[10] = 1024;
            LODWORD(v224) = 210;
            _os_log_impl(&dword_1E1EA4000, v71, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Overriding Desired QueueSize based on network notification", v222, 0x1Cu);
          }
        }
        else if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v222 = 136315650;
          *(void *)&v222[4] = v70;
          *(_WORD *)int v223 = 2080;
          *(void *)&v223[2] = "_VCJitterBuffer_ApplyQueueManagementPolicy";
          *(_WORD *)&v223[10] = 1024;
          LODWORD(v224) = 210;
          _os_log_debug_impl(&dword_1E1EA4000, v71, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Overriding Desired QueueSize based on network notification", v222, 0x1Cu);
        }
      }
      double v69 = *((double *)v10 + 34);
      double v58 = v69 - v60;
      int v59 = 4;
    }
    if (v60 > v69) {
      double v69 = v60;
    }
    double v73 = *((double *)v10 + 32);
    double v74 = v55 - v73;
    BOOL v75 = v73 == 0.0;
    if (v55 - v73 >= 30.0) {
      BOOL v75 = 1;
    }
    double v76 = *(double *)(v9 + 968);
    if (v76 == 0.0)
    {
      BOOL v79 = 0;
    }
    else
    {
      int v77 = *(_DWORD *)(v9 + 976);
      if (v77) {
        BOOL v79 = v55 - v76 < 0.2 && v10[62] < v77;
      }
      else {
        BOOL v79 = 0;
      }
    }
    double v80 = (double)v57;
    int v81 = (int)(fmin(*(double *)&buf[24], fmax(fmax(*(double *)&buf[16], *((double *)v10 + 24)), v69)) * (double)v57);
    if (v10[62]) {
      int v82 = v75;
    }
    else {
      int v82 = 1;
    }
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v82 == 1 && !v79)
    {
      if (ErrorLogLevelForModule >= 8)
      {
        uint64_t v89 = VRTraceErrorLogLevelToCSTR();
        int v90 = *MEMORY[0x1E4F47A50];
        double v91 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v92 = v10[62];
            *(_DWORD *)fd_set buf = 136316162;
            *(void *)&uint8_t buf[4] = v89;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCJitterBuffer_ShouldAdjustAudioQueuSizeForRed";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 297;
            *(_WORD *)&buf[28] = 2048;
            *(double *)&buf[30] = v74;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v92;
            _os_log_impl(&dword_1E1EA4000, v90, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Red overhead is disabled. elapsedTimeSinceLastUsedRedFrame=%f, sharedRedAudioDelayInSamples=%d", buf, 0x2Cu);
          }
        }
        else if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v156 = v10[62];
          *(_DWORD *)fd_set buf = 136316162;
          *(void *)&uint8_t buf[4] = v89;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VCJitterBuffer_ShouldAdjustAudioQueuSizeForRed";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 297;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v74;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v156;
          _os_log_debug_impl(&dword_1E1EA4000, v90, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Red overhead is disabled. elapsedTimeSinceLastUsedRedFrame=%f, sharedRedAudioDelayInSamples=%d", buf, 0x2Cu);
        }
      }
    }
    else
    {
      if (ErrorLogLevelForModule >= 8)
      {
        uint64_t v85 = VRTraceErrorLogLevelToCSTR();
        __int16 v86 = *MEMORY[0x1E4F47A50];
        int v87 = *MEMORY[0x1E4F47A50];
        if (*MEMORY[0x1E4F47A40])
        {
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v88 = v10[62];
            *(_DWORD *)fd_set buf = 136316162;
            *(void *)&uint8_t buf[4] = v85;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCJitterBuffer_ShouldAdjustAudioQueuSizeForRed";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 294;
            *(_WORD *)&buf[28] = 2048;
            *(double *)&buf[30] = v74;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v88;
            _os_log_impl(&dword_1E1EA4000, v86, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Red overhead is enabled. elapsedTimeSinceLastUsedRedFrame=%f, sharedRedAudioDelayInSamples=%d", buf, 0x2Cu);
          }
        }
        else if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v155 = v10[62];
          *(_DWORD *)fd_set buf = 136316162;
          *(void *)&uint8_t buf[4] = v85;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "_VCJitterBuffer_ShouldAdjustAudioQueuSizeForRed";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 294;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v74;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v155;
          _os_log_debug_impl(&dword_1E1EA4000, v86, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Red overhead is enabled. elapsedTimeSinceLastUsedRedFrame=%f, sharedRedAudioDelayInSamples=%d", buf, 0x2Cu);
        }
      }
      double Statistical95pDelaySpread = JTargetJBEstimator_GetStatistical95pDelaySpread(v206);
      double v94 = *(double *)(v9 + 968);
      if (v94 == 0.0 || (int v95 = *(_DWORD *)(v9 + 976)) == 0 || v55 - v94 >= 0.2 || v10[62] >= v95) {
        int v95 = v10[62];
      }
      double v96 = 0.0;
      if ((double)v95 - (double)(int)(Statistical95pDelaySpread * v80) < v80 * 0.02) {
        double v96 = v80 * 0.02;
      }
      int v97 = (int)(v96 + (double)v95);
      double v98 = v80 * 0.18;
      if (v80 * 0.18 >= (double)v97) {
        double v98 = (double)v97;
      }
      int v99 = (int)v98;
      *(void *)(v9 + 80) = 0;
      int v100 = (int)v98 - v81;
      if ((int)v98 > v81)
      {
        double v101 = (double)v100 / v80;
        double v58 = fmax(v58, v101);
        *(double *)(v9 + 80) = v101;
        int v59 = 5;
        int v81 = v99;
        goto LABEL_118;
      }
    }
    int v100 = 0;
LABEL_118:
    if (v81 != v10[54])
    {
      ++*(_DWORD *)(v9 + 68);
      v10[54] = v81;
      v10[63] = v100;
      VCAudioPlayer_SetMaxHoleSize((uint64_t)v36, (double)v81 / v80);
    }
    VCAudioPlayer_SetTargetBoostMode((uint64_t)v36, v59, v58);
    *int v10 = v59;
    LogProfileTimeOverLimit_4("SpkrProc: _VCJitterBuffer_UpdateAudioQSize", v56, 0.00499999989, v102, v103, v104, v105, v106, v107, v108, v192);
    memset(buf, 0, 48);
    JTargetJBEstimator_GetSharedSettings(v206, (uint64_t)buf);
    v109.f64[0] = fmax(fmax(*(double *)&buf[16], *((double *)v10 + 24)), *(double *)&buf[8]);
    v109.f64[1] = *(float64_t *)&buf[8];
    *(float32x2_t *)(v9 + 44) = vcvt_f32_f64(vmlaq_f64(vmulq_f64(v109, (float64x2_t)vdupq_n_s64(0x3FB9999999999998uLL)), (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL), vcvtq_f64_f32(*(float32x2_t *)(v9 + 44))));
    unsigned int v110 = v10[59];
    if (v110 - 1 < 2)
    {
      *((double *)v10 + 23) = (double)JitterQueue_QueuedSamples(*((void *)v10 + 22));
      unsigned int v111 = (double *)v209;
LABEL_171:
      if (v10[58])
      {
        uint64_t v152 = (uint64_t *)*((void *)v10 + 22);
        int v153 = _VCJitterBuffer_DesiredQSize((_DWORD *)v210);
        JitterQueue_DiscardExcess(v152, v153);
        v10[58] = 0;
      }
      LogProfileTimeOverLimit_4("SpkrProc: PreloadQueueDequeue", v21, 0.00200000009, v112, v113, v114, v115, v116, v117, v118, v191);
      JitterPreloadQueue_AudioPacketFree(*((void *)v10 + 21), v111);
      ++v208;
      unsigned __int8 v205 = 1;
      goto LABEL_174;
    }
    unsigned int v111 = (double *)v209;
    if (v110 == 4)
    {
      uint64_t v119 = *(int *)(v9 + 112);
      if (v209[1]
        || !*(unsigned char *)v202
        || ((*((unsigned __int16 *)v209 + 7) - *(unsigned __int16 *)(v9 + 922)) & 0x8000) == 0)
      {
        *(_WORD *)(v9 + 922) = *((_WORD *)v209 + 7);
        *(unsigned char *)(v9 + 920) = 1;
        int v120 = v209[4];
        if ((v120 - *(_DWORD *)(v9 + 924)) <= 0x7FFFFFFE)
        {
          unint64_t v121 = v193 + 8 * v119;
          if (v121 >= (unint64_t)v202 || v121 < v193) {
            goto LABEL_241;
          }
          *(void *)(v193 + 8 * v119) = *((void *)v209 + 228);
          int v122 = v119 - 1;
          if (!v119) {
            int v122 = 99;
          }
          uint64_t v123 = (double *)(v193 + 8 * v122);
          if (v123 >= v202 || (unint64_t)v123 < v193) {
            goto LABEL_241;
          }
          if (v209[454] >= 1)
          {
            uint64_t v124 = 0;
            uint64_t v125 = 0;
            double v126 = *v123;
            float v127 = *((double *)v209 + 228) - *v123;
            __int16 v128 = v209 + 446;
            do
            {
              if (&v128[v124] >= v37 || &v128[v124] < v128) {
                goto LABEL_241;
              }
              BOOL v131 = v126 > 0.0 && v125 == 0;
              VCAudioPlayer_UpdateLastEnqueuedFrameInformation(v22, *(void *)&v128[2 * v125++], v131, v127);
              v124 += 2;
            }
            while (v125 < *v37);
            int v120 = v209[4];
          }
          *(_DWORD *)(v9 + 112) = ((int)v119 + 1) % 100;
          *(_DWORD *)(v9 + 924) = v120;
          unsigned int v111 = (double *)v209;
        }
      }
      double v132 = v111[4];
      LODWORD(v133) = *(_DWORD *)VCAudioPlayer_GetPlaybackFormat(v22);
      double v134 = (double)v133;
      int v135 = (int)(*(double *)(v9 + 8) * v134);
      if (v135)
      {
        if (*(double *)(v9 + 24) + 3.0 < v132)
        {
          int v136 = *(_DWORD *)v9 + v135;
          if (v136 >= (int)(v134 * 0.2)) {
            int v136 = (int)(v134 * 0.2);
          }
          *(_DWORD *)uint64_t v9 = v136;
          *(double *)(v9 + 24) = v132;
        }
        *(double *)(v9 + 32) = v132;
        *(void *)(v9 + 8) = 0;
      }
      else if (*(double *)(v9 + 32) + 5.0 < v132)
      {
        if (*(int *)v9 >= 1) {
          *(_DWORD *)uint64_t v9 = (int)((double)*(int *)v9 + v134 * -0.02) & ~((int)((double)*(int *)v9 + v134 * -0.02) >> 31);
        }
        *(double *)(v9 + 32) = v132;
      }
      double v139 = 0.0;
      if (VRTraceIsInternalOSInstalled()) {
        double v139 = micro();
      }
      int v140 = JitterQueue_QueuedSamples(*((void *)v10 + 22));
      double v148 = (double)(VCAudioPlayer_GetLeftOverSamples(v22) + v140);
      double v149 = *((double *)v10 + 28) * v148 + *((double *)v10 + 23) * (1.0 - *((double *)v10 + 28));
      if (v149 < 0.0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          uint64_t v150 = VRTraceErrorLogLevelToCSTR();
          uint64_t v151 = *MEMORY[0x1E4F47A50];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR))
          {
            double v157 = *v204;
            *(_DWORD *)fd_set buf = 136316674;
            *(void *)&uint8_t buf[4] = v150;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "_VCJitterBuffer_UpdateAvgQSize";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&unsigned char buf[24] = 265;
            *(_WORD *)&buf[28] = 2048;
            *(double *)&buf[30] = v157;
            *(_WORD *)&buf[38] = 2048;
            *(double *)&buf[40] = v149;
            *(_WORD *)&buf[48] = 1024;
            *(_DWORD *)double v219 = v140;
            *(_WORD *)&v219[4] = 2048;
            double v220 = v148;
            _os_log_error_impl(&dword_1E1EA4000, v151, OS_LOG_TYPE_ERROR, " [%s] %s:%d Please file a radar on AVConference Media | All. Average JB queue size is negative! Current size: %f, new size: %f, jitter samples: %d, total samples: %f", buf, 0x40u);
          }
        }
        reportingSymptom();
        double v149 = 0.0;
      }
      *int v204 = v149;
      LogProfileTimeOverLimit_4("SpkrProc: UpdateAvgQSize", v139, 0.00499999989, v141, v142, v143, v144, v145, v146, v147, v191);
      goto LABEL_171;
    }
    if (v110 != 3)
    {
      unsigned int v137 = (uint64_t *)*((void *)v10 + 22);
      int v138 = _VCJitterBuffer_DesiredQSize((_DWORD *)v210);
      JitterQueue_DiscardExcess(v137, v138);
      v10[58] = 0;
      *((double *)v10 + 23) = (double)JitterQueue_QueuedSamples(*((void *)v10 + 22));
      goto LABEL_171;
    }
    JitterPreloadQueue_AudioPacketFree(*((void *)v10 + 21), v209);
LABEL_174:
    double v21 = micro();
    if (v21 >= v207) {
      goto LABEL_181;
    }
  }
  if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_19;
  }
  unsigned int v154 = v10[59];
  *(_DWORD *)fd_set buf = 136316418;
  *(void *)&uint8_t buf[4] = v31;
  *(_WORD *)&unsigned char buf[12] = 2080;
  *(void *)&buf[14] = "_VCJitterBuffer_DequeuePacketsFromPreloadQueue";
  *(_WORD *)&buf[22] = 1024;
  *(_DWORD *)&unsigned char buf[24] = 602;
  *(_WORD *)&buf[28] = 2048;
  *(void *)&buf[30] = v210;
  *(_WORD *)&buf[38] = 1024;
  *(_DWORD *)&buf[40] = v23 == 0;
  *(_WORD *)&buf[44] = 1024;
  *(_DWORD *)&buf[46] = v154;
  _os_log_debug_impl(&dword_1E1EA4000, v32, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] Dequeue packet, is audio packet null:%d, state %d", buf, 0x32u);
  if (v23) {
    goto LABEL_20;
  }
LABEL_179:
  if (v10[59] == 3)
  {
    JitterQueue_Reset(*((uint64_t **)v10 + 22));
    VCAudioPlayer_NewStream(v22);
    v10[59] = 0;
  }
LABEL_181:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    uint64_t v165 = VRTraceErrorLogLevelToCSTR();
    uint64_t v166 = *MEMORY[0x1E4F47A50];
    uint64_t v167 = *MEMORY[0x1E4F47A50];
    if (*MEMORY[0x1E4F47A40])
    {
      if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v168 = v10[59];
        *(_DWORD *)fd_set buf = 136316418;
        *(void *)&uint8_t buf[4] = v165;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "_VCJitterBuffer_DequeuePacketsFromPreloadQueue";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 655;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v210;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v168;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v205;
        _os_log_impl(&dword_1E1EA4000, v166, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] JBState[%d] packetDequeue[%d]", buf, 0x32u);
      }
    }
    else if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v190 = v10[59];
      *(_DWORD *)fd_set buf = 136316418;
      *(void *)&uint8_t buf[4] = v165;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "_VCJitterBuffer_DequeuePacketsFromPreloadQueue";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = 655;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v210;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v190;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v205;
      _os_log_debug_impl(&dword_1E1EA4000, v166, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] JBState[%d] packetDequeue[%d]", buf, 0x32u);
    }
  }
  LogProfileTimeOverLimit_4("SpkrProc: PreloadQueueDequeue Loop, Iterations = %d", v194, 0.00200000009, v158, v159, v160, v161, v162, v163, v164, v208);
  *(void *)uint64_t v222 = v203;
  *(_DWORD *)int v223 = -1431655766;
  *(_DWORD *)&v222[8] = SampleCount;
  *(void *)&v223[4] = a3;
  *(void *)&long long v224 = a5;
  *((void *)&v224 + 1) = &v214;
  int v225 = &v216;
  size_t v226 = a7;
  uint64_t v227 = &v215;
  memset(v212, 170, sizeof(v212));
  long long v213 = xmmword_1E25A37C0;
  *(void *)&v212[0] = JTargetJBEstimator_GetSpikeInfo(v13);
  *((void *)&v212[0] + 1) = JTargetJBEstimator_GetFrequentSpikeInfo(v13);
  LODWORD(v212[1]) = _VCJitterBuffer_DesiredQSize((_DWORD *)v210);
  *((void *)&v212[1] + 1) = v10 + 46;
  long long v213 = *((_OWORD *)v10 + 12);
  if (!*(unsigned char *)(v210 + 216))
  {
    uint64_t v171 = a4;
    if (*(unsigned char *)(v9 + 960))
    {
      *(unsigned char *)(v9 + 960) = 0;
      VCAudioPlayer_ForceDecoderReset(v210 + 288);
      *(double *)(v9 + 968) = v196;
      *(_DWORD *)(v9 + 976) = v10[62];
    }
LABEL_209:
    uint64_t v175 = v210 + 288;
    if (v10[59] > 3)
    {
      VCAudioPlayer_GetSamples(v175, (uint64_t)v222, (uint64_t)v212);
      if (v215)
      {
        int v176 = *(_DWORD *)(v9 + 96);
        *(_DWORD *)(v9 + 96) = v176 + 1;
        BOOL v177 = v176 < 249;
      }
      else
      {
        *(_DWORD *)(v9 + 96) = 0;
        BOOL v177 = 1;
      }
      double v178 = *(double *)(v9 + 104);
      BOOL v179 = v178 != 0.0;
      if (v196 - v178 > 30.0) {
        BOOL v179 = 0;
      }
      if (!v177 && !v179)
      {
        reportingSymptom();
        *(double *)(v9 + 104) = v196;
      }
    }
    else
    {
      VCAudioPlayer_GetSilenceSamples(v175, (uint64_t)v222, (uint64_t)v212);
    }
    if (v214 >= 0) {
      char v180 = 1;
    }
    else {
      char v180 = -1;
    }
    VCAudioBufferList_SetPriority(v203, v180);
    if (!v10[61]) {
      v10[61] = v205;
    }
    if (a6) {
      *a6 = v216;
    }
    if (v171) {
      *uint64_t v171 = VCAudioPlayer_IsTimestampValid(v210 + 288);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v181 = VRTraceErrorLogLevelToCSTR();
      double v182 = *MEMORY[0x1E4F47A50];
      int v183 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v184 = v10[59];
          int v185 = *a3;
          if (a7) {
            int v186 = *a7;
          }
          else {
            int v186 = -1;
          }
          *(_DWORD *)fd_set buf = 136317186;
          *(void *)&uint8_t buf[4] = v181;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "VCJitterBuffer_PlaybackGetSamples";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 1173;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v210;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v184;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = SampleCount;
          *(_WORD *)double v219 = 1024;
          *(_DWORD *)&v219[2] = v185;
          LOWORD(v220) = 1024;
          *(_DWORD *)((char *)&v220 + 2) = v216;
          HIWORD(v220) = 1024;
          int v221 = v186;
          _os_log_impl(&dword_1E1EA4000, v182, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] JBState[%d] sampleCount[%d] timestamp[%d] isSilence[%d] consecutiveSilenceCount[%d]", buf, 0x44u);
        }
      }
      else if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v187 = v10[59];
        int v188 = *a3;
        if (a7) {
          int v189 = *a7;
        }
        else {
          int v189 = -1;
        }
        *(_DWORD *)fd_set buf = 136317186;
        *(void *)&uint8_t buf[4] = v181;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCJitterBuffer_PlaybackGetSamples";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 1173;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v210;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v187;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = SampleCount;
        *(_WORD *)double v219 = 1024;
        *(_DWORD *)&v219[2] = v188;
        LOWORD(v220) = 1024;
        *(_DWORD *)((char *)&v220 + 2) = v216;
        HIWORD(v220) = 1024;
        int v221 = v189;
        _os_log_debug_impl(&dword_1E1EA4000, v182, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] JBState[%d] sampleCount[%d] timestamp[%d] isSilence[%d] consecutiveSilenceCount[%d]", buf, 0x44u);
      }
    }
    return;
  }
  int v169 = JitterQueue_QueuedSamples(*((void *)v10 + 22));
  buf[0] = 0;
  BOOL v217 = 0;
  LastFrameunsigned int Priority = JitterQueue_GetLastFramePriority(*((void *)v10 + 22), buf, &v217);
  uint64_t v171 = a4;
  if (*(unsigned char *)(v210 + 216))
  {
    int v172 = buf[0] < 0x7Fu ? LastFramePriority : 0;
    if (v172 == 1) {
      VCAudioPlayer_SuspendAudioErasureMeasurement(v210 + 288);
    }
  }
  if (!v169)
  {
    uint64_t v173 = (unsigned char *)(v9 + 960);
    if (*(unsigned char *)(v9 + 960))
    {
      *uint64_t v173 = 1;
      goto LABEL_205;
    }
    BOOL v174 = v196 - *(double *)(v9 + 952) > 0.2;
    goto LABEL_204;
  }
  *(double *)(v9 + 952) = v196;
  if (!*(unsigned char *)(v9 + 960))
  {
    BOOL v174 = 0;
    uint64_t v173 = (unsigned char *)(v9 + 960);
LABEL_204:
    *uint64_t v173 = v174;
    if (!v174) {
      goto LABEL_209;
    }
    goto LABEL_205;
  }
  *(unsigned char *)(v9 + 960) = 0;
  VCAudioPlayer_ForceDecoderReset(v210 + 288);
  *(double *)(v9 + 968) = v196;
  *(_DWORD *)(v9 + 976) = v10[62];
  if (!*(unsigned char *)(v9 + 960)) {
    goto LABEL_209;
  }
LABEL_205:
  VCAudioPlayer_GetSilenceSamples(v210 + 288, (uint64_t)v222, (uint64_t)v212);
  if (a6) {
    *a6 = 1;
  }
  VCAudioBufferList_SetPriority(v203, 1);
  if (a4) {
    *a4 = VCAudioPlayer_IsTimestampValid(v210 + 288);
  }
}

uint64_t _VCJitterBuffer_DesiredQSize(_DWORD *a1)
{
  double v2 = a1 + 33955;
  uint64_t result = a1[33955];
  if (!result)
  {
    if (a1[50] == 3)
    {
      PlaybackFormat = (_DWORD *)VCAudioPlayer_GetPlaybackFormat((uint64_t)(a1 + 72));
      LODWORD(v5) = a1[62];
      HIDWORD(v6) = 1083129856;
      LODWORD(v6) = *PlaybackFormat;
      return (int)((double)v5 / 1000.0 * (double)v6);
    }
    else
    {
      return (v2[17] + v2[1]);
    }
  }
  return result;
}

double VCJitterBuffer_GetAWDReportingMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    JitterQueue_GetUnderflowRateForInterval(*(_DWORD **)(a1 + 135784));
    *(_DWORD *)a2 = v4;
    *(float *)(a2 + 4) = VCAudioPlayer_GetFrameErasureRate(a1 + 288);
    *(float *)(a2 + 8) = VCAudioPlayer_GetSpeechErasureRate(a1 + 288);
    int v5 = JitterQueue_QueuedSamples(*(void *)(a1 + 135784));
    *(_DWORD *)(a2 + 12) = VCAudioPlayer_GetLeftOverSamples(a1 + 288) + v5;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v7 = VRTraceErrorLogLevelToCSTR();
      __int16 v8 = *MEMORY[0x1E4F47A50];
      uint64_t v9 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          double v10 = *(float *)a2;
          double v11 = *(float *)(a2 + 4);
          int v12 = *(_DWORD *)(a2 + 12);
          int v16 = 136316674;
          uint64_t v17 = v7;
          __int16 v18 = 2080;
          double v19 = "VCJitterBuffer_GetAWDReportingMetrics";
          __int16 v20 = 1024;
          int v21 = 1191;
          __int16 v22 = 2048;
          uint64_t v23 = a1;
          __int16 v24 = 2048;
          double v25 = v10;
          __int16 v26 = 2048;
          double v27 = v11;
          __int16 v28 = 1024;
          int v29 = v12;
          _os_log_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] AWD Metrics: underflowRate[%f] frameErasureRate[%f] totalQueueSizeSamples[%d]", (uint8_t *)&v16, 0x40u);
        }
      }
      else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        double v13 = *(float *)a2;
        double v14 = *(float *)(a2 + 4);
        int v15 = *(_DWORD *)(a2 + 12);
        int v16 = 136316674;
        uint64_t v17 = v7;
        __int16 v18 = 2080;
        double v19 = "VCJitterBuffer_GetAWDReportingMetrics";
        __int16 v20 = 1024;
        int v21 = 1191;
        __int16 v22 = 2048;
        uint64_t v23 = a1;
        __int16 v24 = 2048;
        double v25 = v13;
        __int16 v26 = 2048;
        double v27 = v14;
        __int16 v28 = 1024;
        int v29 = v15;
        _os_log_debug_impl(&dword_1E1EA4000, v8, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] AWD Metrics: underflowRate[%f] frameErasureRate[%f] totalQueueSizeSamples[%d]", (uint8_t *)&v16, 0x40u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_GetAWDReportingMetrics_cold_1();
    }
  }
  return result;
}

void VCJitterBuffer_GetWRMReportingMetrics(_DWORD *a1, int *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t WrmMetrics = VCAudioPlayer_GetWrmMetrics((uint64_t)(a1 + 72));
    *(_OWORD *)a2 = *(_OWORD *)WrmMetrics;
    *((void *)a2 + 2) = *(void *)(WrmMetrics + 16);
    a2[8] = a1[33982];
    *((void *)a2 + 3) = (int)_VCJitterBuffer_DesiredQSize(a1);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      unint64_t v6 = *MEMORY[0x1E4F47A50];
      uint64_t v7 = *MEMORY[0x1E4F47A50];
      if (*MEMORY[0x1E4F47A40])
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *a2;
          int v9 = a2[1];
          int v10 = a2[2];
          int v11 = a2[3];
          uint64_t v12 = *((void *)a2 + 2);
          uint64_t v13 = *((void *)a2 + 3);
          int v20 = 136317442;
          uint64_t v21 = v5;
          __int16 v22 = 2080;
          uint64_t v23 = "VCJitterBuffer_GetWRMReportingMetrics";
          __int16 v24 = 1024;
          int v25 = 1208;
          __int16 v26 = 2048;
          double v27 = a1;
          __int16 v28 = 1024;
          int v29 = v8;
          __int16 v30 = 1024;
          int v31 = v9;
          __int16 v32 = 1024;
          int v33 = v10;
          __int16 v34 = 1024;
          int v35 = v11;
          __int16 v36 = 2048;
          uint64_t v37 = v12;
          __int16 v38 = 2048;
          uint64_t v39 = v13;
          _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] WRM Metrics: playbackCount[%d] playbackCountSpeech[%d] erasureCount[%d] erasureSilence[%d] nominalJitterBufferDelay[%llu] targetJitterQueueSize(Audio)[%llu]", (uint8_t *)&v20, 0x52u);
        }
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v14 = *a2;
        int v15 = a2[1];
        int v16 = a2[2];
        int v17 = a2[3];
        uint64_t v18 = *((void *)a2 + 2);
        uint64_t v19 = *((void *)a2 + 3);
        int v20 = 136317442;
        uint64_t v21 = v5;
        __int16 v22 = 2080;
        uint64_t v23 = "VCJitterBuffer_GetWRMReportingMetrics";
        __int16 v24 = 1024;
        int v25 = 1208;
        __int16 v26 = 2048;
        double v27 = a1;
        __int16 v28 = 1024;
        int v29 = v14;
        __int16 v30 = 1024;
        int v31 = v15;
        __int16 v32 = 1024;
        int v33 = v16;
        __int16 v34 = 1024;
        int v35 = v17;
        __int16 v36 = 2048;
        uint64_t v37 = v18;
        __int16 v38 = 2048;
        uint64_t v39 = v19;
        _os_log_debug_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] WRM Metrics: playbackCount[%d] playbackCountSpeech[%d] erasureCount[%d] erasureSilence[%d] nominalJitterBufferDelay[%llu] targetJitterQueueSize(Audio)[%llu]", (uint8_t *)&v20, 0x52u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_GetWRMReportingMetrics_cold_1();
    }
  }
}

double VCJitterBuffer_GetPlaybackReportingMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(unsigned char *)(a2 + 140) = *(unsigned char *)(a1 + 280);
    uint64_t v4 = a1 + 288;
    *(float *)a2 = VCAudioPlayer_GetAverageLossRate(a1 + 288);
    *(float *)(a2 + 4) = VCAudioPlayer_GetLastAverageMissingPercentOverWindow(v4);
    *(float *)(a2 + 12) = VCAudioPlayer_GetAverageJitterSizeForWindow(v4);
    float AverageJitterSizeForSession = VCAudioPlayer_GetAverageJitterSizeForSession(v4);
    *(float *)(a2 + 16) = AverageJitterSizeForSession;
    *(float *)(a2 + 8) = VCAudioPlayer_MaxInterArrivalTimeForWindow(v4);
    VCAudioPlayer_GetDTMFEventCount(v4);
    *(_DWORD *)(a2 + 136) = v6;
    int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    int v11 = (unsigned char *)MEMORY[0x1E4F47A40];
    uint64_t v12 = (NSObject **)MEMORY[0x1E4F47A50];
    if (ErrorLogLevelForModule >= 8)
    {
      uint64_t v13 = VRTraceErrorLogLevelToCSTR();
      int v14 = *v12;
      int v15 = *v12;
      if (*v11)
      {
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          double v16 = *(float *)a2;
          double v17 = *(float *)(a2 + 4);
          double v18 = *(float *)(a2 + 12);
          double v19 = *(float *)(a2 + 16);
          double v20 = *(float *)(a2 + 8);
          int v72 = 136317186;
          uint64_t v73 = v13;
          __int16 v74 = 2080;
          BOOL v75 = "VCJitterBuffer_GetPlaybackReportingMetrics";
          __int16 v76 = 1024;
          int v77 = 1225;
          __int16 v78 = 2048;
          uint64_t v79 = a1;
          __int16 v80 = 2048;
          *(double *)int v81 = v16;
          *(_WORD *)&v81[8] = 2048;
          double v82 = v17;
          *(_WORD *)uint64_t v83 = 2048;
          *(double *)&v83[2] = v18;
          __int16 v84 = 2048;
          double v85 = v19;
          __int16 v86 = 2048;
          *(double *)int v87 = v20;
          _os_log_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] VRDB Playback Metrics: avgLossRate[%f] lastAvgMissPercent[%f] averageJitterForWindow[%f] averageJitterForSession[%f] maxJitterForWindow[%f]", (uint8_t *)&v72, 0x58u);
        }
      }
      else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        double v48 = *(float *)a2;
        double v49 = *(float *)(a2 + 4);
        double v50 = *(float *)(a2 + 12);
        double v51 = *(float *)(a2 + 16);
        double v52 = *(float *)(a2 + 8);
        int v72 = 136317186;
        uint64_t v73 = v13;
        __int16 v74 = 2080;
        BOOL v75 = "VCJitterBuffer_GetPlaybackReportingMetrics";
        __int16 v76 = 1024;
        int v77 = 1225;
        __int16 v78 = 2048;
        uint64_t v79 = a1;
        __int16 v80 = 2048;
        *(double *)int v81 = v48;
        *(_WORD *)&v81[8] = 2048;
        double v82 = v49;
        *(_WORD *)uint64_t v83 = 2048;
        *(double *)&v83[2] = v50;
        __int16 v84 = 2048;
        double v85 = v51;
        __int16 v86 = 2048;
        *(double *)int v87 = v52;
        _os_log_debug_impl(&dword_1E1EA4000, v14, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] VRDB Playback Metrics: avgLossRate[%f] lastAvgMissPercent[%f] averageJitterForWindow[%f] averageJitterForSession[%f] maxJitterForWindow[%f]", (uint8_t *)&v72, 0x58u);
      }
    }
    VCAudioPlayer_GetTimescaleMetrics(v4, a2, v8, v9, v10);
    VCAudioPlayer_GetRedErasureMetrics(v4, a2);
    uint64_t SpikeReportingMetrics = JTargetJBEstimator_GetSpikeReportingMetrics(a1 + 54600);
    *(_DWORD *)(a2 + 144) = *(_DWORD *)SpikeReportingMetrics;
    *(_DWORD *)(a2 + 148) = *(_DWORD *)(SpikeReportingMetrics + 4);
    *(void *)(a2 + 152) = *(void *)(SpikeReportingMetrics + 8);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v23 = VRTraceErrorLogLevelToCSTR();
      __int16 v24 = *v12;
      int v25 = *v12;
      if (*v11)
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          double v26 = *(float *)(a2 + 20);
          double v27 = *(float *)(a2 + 24);
          double v28 = *(float *)(a2 + 40);
          double v29 = *(float *)(a2 + 44);
          int v30 = *(_DWORD *)(a2 + 48);
          int v31 = *(_DWORD *)(a2 + 52);
          int v32 = *(_DWORD *)(a2 + 56);
          double v33 = *(float *)(a2 + 28);
          double v34 = *(float *)(a2 + 36);
          int v35 = *(_DWORD *)(a2 + 92);
          int v36 = *(_DWORD *)(a2 + 72);
          int v72 = 136318722;
          uint64_t v73 = v23;
          __int16 v74 = 2080;
          BOOL v75 = "VCJitterBuffer_GetPlaybackReportingMetrics";
          __int16 v76 = 1024;
          int v77 = 1234;
          __int16 v78 = 2048;
          uint64_t v79 = a1;
          __int16 v80 = 2048;
          *(double *)int v81 = v26;
          *(_WORD *)&v81[8] = 2048;
          double v82 = v27;
          *(_WORD *)uint64_t v83 = 2048;
          *(double *)&v83[2] = v28;
          __int16 v84 = 2048;
          double v85 = v29;
          __int16 v86 = 1024;
          *(_DWORD *)int v87 = v30;
          *(_WORD *)&uint8_t v87[4] = 1024;
          *(_DWORD *)&v87[6] = v31;
          LOWORD(v88) = 1024;
          *(_DWORD *)((char *)&v88 + 2) = v32;
          HIWORD(v88) = 2048;
          double v89 = v33;
          __int16 v90 = 2048;
          double v91 = v34;
          __int16 v92 = 1024;
          int v93 = v35;
          __int16 v94 = 1024;
          int v95 = v36;
          _os_log_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] VRDB RED Playback Metrics: totalFrameErasureRate[%f] totalFrameErasureRateAlt[%f] redErasureCompensationRate[%f] maxRedFrameRecoveryDepth[%f] redAudioFramesPlayed[%d] redAudioBytesPlayed[%d] totalFramesPlayed[%d] totalSpeechErasureRate[%f] totalWindowedErasureRate[%f] maxConsecutiveAudioErasures[%d], totalErasureCount[%u]", (uint8_t *)&v72, 0x80u);
        }
      }
      else if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        double v53 = *(float *)(a2 + 20);
        double v54 = *(float *)(a2 + 24);
        double v55 = *(float *)(a2 + 40);
        double v56 = *(float *)(a2 + 44);
        int v57 = *(_DWORD *)(a2 + 48);
        int v58 = *(_DWORD *)(a2 + 52);
        int v59 = *(_DWORD *)(a2 + 56);
        double v60 = *(float *)(a2 + 28);
        double v61 = *(float *)(a2 + 36);
        int v62 = *(_DWORD *)(a2 + 92);
        int v63 = *(_DWORD *)(a2 + 72);
        int v72 = 136318722;
        uint64_t v73 = v23;
        __int16 v74 = 2080;
        BOOL v75 = "VCJitterBuffer_GetPlaybackReportingMetrics";
        __int16 v76 = 1024;
        int v77 = 1234;
        __int16 v78 = 2048;
        uint64_t v79 = a1;
        __int16 v80 = 2048;
        *(double *)int v81 = v53;
        *(_WORD *)&v81[8] = 2048;
        double v82 = v54;
        *(_WORD *)uint64_t v83 = 2048;
        *(double *)&v83[2] = v55;
        __int16 v84 = 2048;
        double v85 = v56;
        __int16 v86 = 1024;
        *(_DWORD *)int v87 = v57;
        *(_WORD *)&uint8_t v87[4] = 1024;
        *(_DWORD *)&v87[6] = v58;
        LOWORD(v88) = 1024;
        *(_DWORD *)((char *)&v88 + 2) = v59;
        HIWORD(v88) = 2048;
        double v89 = v60;
        __int16 v90 = 2048;
        double v91 = v61;
        __int16 v92 = 1024;
        int v93 = v62;
        __int16 v94 = 1024;
        int v95 = v63;
        _os_log_debug_impl(&dword_1E1EA4000, v24, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] VRDB RED Playback Metrics: totalFrameErasureRate[%f] totalFrameErasureRateAlt[%f] redErasureCompensationRate[%f] maxRedFrameRecoveryDepth[%f] redAudioFramesPlayed[%d] redAudioBytesPlayed[%d] totalFramesPlayed[%d] totalSpeechErasureRate[%f] totalWindowedErasureRate[%f] maxConsecutiveAudioErasures[%d], totalErasureCount[%u]", (uint8_t *)&v72, 0x80u);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      uint64_t v37 = VRTraceErrorLogLevelToCSTR();
      __int16 v38 = *v12;
      uint64_t v39 = *v12;
      if (*v11)
      {
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          int v40 = *(_DWORD *)(a2 + 96);
          int v41 = *(_DWORD *)(a2 + 100);
          int v42 = *(_DWORD *)(a2 + 104);
          int v43 = *(_DWORD *)(a2 + 108);
          int v44 = *(_DWORD *)(a2 + 112);
          double v45 = *(float *)(a2 + 116);
          double v46 = *(float *)(a2 + 124);
          double v47 = *(float *)(a2 + 120);
          int v72 = 136317954;
          uint64_t v73 = v37;
          __int16 v74 = 2080;
          BOOL v75 = "VCJitterBuffer_GetPlaybackReportingMetrics";
          __int16 v76 = 1024;
          int v77 = 1236;
          __int16 v78 = 2048;
          uint64_t v79 = a1;
          __int16 v80 = 1024;
          *(_DWORD *)int v81 = v40;
          *(_WORD *)&v81[4] = 1024;
          *(_DWORD *)&v81[6] = v41;
          LOWORD(v82) = 1024;
          *(_DWORD *)((char *)&v82 + 2) = v42;
          HIWORD(v82) = 1024;
          *(_DWORD *)uint64_t v83 = v43;
          *(_WORD *)&v83[4] = 1024;
          *(_DWORD *)&v83[6] = v44;
          __int16 v84 = 2048;
          double v85 = v45;
          __int16 v86 = 2048;
          *(double *)int v87 = v46;
          *(_WORD *)&v87[8] = 2048;
          double v88 = v47;
          _os_log_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] VRDB Timescale Metrics: totalTimescaleCount=%d silenceTimescaleCount=%d speechTimescaleCount=%d expandTimescaleCount=%d compressTimescaleCount=%d totaltimescaleRate=%f silenceTimescaleRate=%f speechTimescaleRate=%f", (uint8_t *)&v72, 0x62u);
        }
      }
      else if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        int v64 = *(_DWORD *)(a2 + 96);
        int v65 = *(_DWORD *)(a2 + 100);
        int v66 = *(_DWORD *)(a2 + 104);
        int v67 = *(_DWORD *)(a2 + 108);
        int v68 = *(_DWORD *)(a2 + 112);
        double v69 = *(float *)(a2 + 116);
        double v70 = *(float *)(a2 + 124);
        double v71 = *(float *)(a2 + 120);
        int v72 = 136317954;
        uint64_t v73 = v37;
        __int16 v74 = 2080;
        BOOL v75 = "VCJitterBuffer_GetPlaybackReportingMetrics";
        __int16 v76 = 1024;
        int v77 = 1236;
        __int16 v78 = 2048;
        uint64_t v79 = a1;
        __int16 v80 = 1024;
        *(_DWORD *)int v81 = v64;
        *(_WORD *)&v81[4] = 1024;
        *(_DWORD *)&v81[6] = v65;
        LOWORD(v82) = 1024;
        *(_DWORD *)((char *)&v82 + 2) = v66;
        HIWORD(v82) = 1024;
        *(_DWORD *)uint64_t v83 = v67;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = v68;
        __int16 v84 = 2048;
        double v85 = v69;
        __int16 v86 = 2048;
        *(double *)int v87 = v70;
        *(_WORD *)&v87[8] = 2048;
        double v88 = v71;
        _os_log_debug_impl(&dword_1E1EA4000, v38, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] VRDB Timescale Metrics: totalTimescaleCount=%d silenceTimescaleCount=%d speechTimescaleCount=%d expandTimescaleCount=%d compressTimescaleCount=%d totaltimescaleRate=%f silenceTimescaleRate=%f speechTimescaleRate=%f", (uint8_t *)&v72, 0x62u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_GetPlaybackReportingMetrics_cold_1();
    }
  }
  return result;
}

void VCJitterBuffer_GetReportingMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    double v8 = *(double *)(a1 + 135232);
    double v9 = (long long *)(a1 + 135928);
    float v10 = *(float *)(a1 + 135932);
    if (v8 > v10) {
      float v10 = v8;
    }
    *(float *)(a1 + 135932) = v10;
    if (v8 <= v10) {
      float v11 = v10;
    }
    else {
      float v11 = v8;
    }
    *(float *)(a1 + 135936) = v11;
    long long v12 = *v9;
    long long v13 = *(_OWORD *)(a1 + 135944);
    long long v14 = *(_OWORD *)(a1 + 135960);
    *(void *)(a2 + 48) = *(void *)(a1 + 135976);
    *(_OWORD *)(a2 + 16) = v13;
    *(_OWORD *)(a2 + 32) = v14;
    *(_OWORD *)a2 = v12;
    VRLogfilePrint(*(void *)(a1 + 136832), "Red Rx Stats, redAudioFramesReceived = %d , redAudioBytesReceived = %d , redAudioFramesDiscarded = %d , redAudioBytesDiscarded = %d \n", a3, a4, a5, a6, a7, a8, *(_DWORD *)(a2 + 12));
    *(void *)((char *)v9 + 20) = 0;
    *(void *)((char *)v9 + 12) = 0;
    *((_DWORD *)v9 + 7) = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_GetReportingMetrics_cold_1();
    }
  }
}

void VCJitterBuffer_GetBurstMetrics(uint64_t a1, uint64_t a2)
{
}

double VCJitterBuffer_GetDiscardRate(uint64_t a1)
{
  return JitterQueue_GetUnderflowRate(*(void *)(a1 + 135784));
}

uint64_t VCJitterBuffer_GetRTCPXRJitterBufferParameters(uint64_t result, _WORD *a2, _WORD *a3, _WORD *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = (uint64_t *)(result + 135784);
  unsigned int v8 = (int)(*(double *)(result + 136824) * 1000.0);
  if (a2) {
    *a2 = v8;
  }
  if (a3)
  {
    PlaybackFormat = (unsigned int *)VCAudioPlayer_GetPlaybackFormat(result + 288);
    int v10 = JitterQueue_QueuedSamples(*v7);
    double result = VCAudioPlayer_GetLeftOverSamples(v6 + 288);
    unint64_t v11 = 1000 * (unint64_t)(result + v10) / *PlaybackFormat;
    if (v8 >= (unsigned __int16)v11) {
      LOWORD(v11) = v8;
    }
    *a3 = v11;
  }
  if (a4) {
    *a4 = (int)(*(double *)(v6 + 54632) * 1000.0);
  }
  return result;
}

BOOL VCJitterBuffer_GetIsRunning(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 135844) == 4;
  }
  return result;
}

float VCJitterBuffer_GetAverageJitter(uint64_t a1)
{
  return VCAudioPlayer_GetAverageInterarrivalTimeForWindow(a1 + 288);
}

float VCJitterBuffer_GetOWRD(uint64_t a1)
{
  return JLagProcessor_GetOWRD(a1 + 54144);
}

uint64_t VCJitterBuffer_ResetLagReference(uint64_t a1)
{
  return JLagProcessor_ResetLagReference(a1 + 54144);
}

float VCJitterBuffer_GetPercentPacketLateAndMissing(uint64_t a1)
{
  return VCAudioPlayer_GetPercentPacketsLateAndMissing(a1 + 288);
}

uint64_t VCJitterBuffer_GetMaxPlaybackSizeSamples(uint64_t a1)
{
  return *(unsigned int *)(a1 + 480);
}

uint64_t VCJitterBuffer_GetTargetTime(_DWORD *a1)
{
  int v2 = _VCJitterBuffer_DesiredQSize(a1);
  return (int)(float)((float)((float)v2 * 1000.0)
                                  / (float)*(unsigned int *)VCAudioPlayer_GetPlaybackFormat((uint64_t)(a1 + 72)));
}

double VCJitterBuffer_GetLastDecodedAudioFrameInfo(__n128 *a1, __n128 *a2)
{
  if (a1)
  {
    if (a2) {
      *(void *)&double result = VCAudioPlayer_GetLastDecodedAudioFrameInfo(a1 + 18, a2).n128_u64[0];
    }
  }
  return result;
}

void VCJitterBuffer_SetMode(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v5 = VRTraceErrorLogLevelToCSTR();
      uint64_t v6 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)fd_set buf = 136315906;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "VCJitterBuffer_SetMode";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v13) = 1325;
        WORD2(v13) = 1024;
        *(_DWORD *)((char *)&v13 + 6) = a2;
        _os_log_impl(&dword_1E1EA4000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Jitter buffer configured with mode=%d", buf, 0x22u);
      }
    }
    long long v20 = 0u;
    long long v19 = 0u;
    long long v18 = 0u;
    long long v17 = 0u;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    long long v13 = 0u;
    *(_OWORD *)&buf[8] = 0u;
    *(_DWORD *)(a1 + 200) = a2;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    _VCJitterBuffer_GetMinMaxQueueSizeFromConfig((_DWORD *)a1, (double *)&v11, (double *)&v10);
    uint64_t v8 = v10;
    uint64_t v7 = v11;
    *(void *)(a1 + 136824) = v11;
    *(void *)fd_set buf = v7;
    double v9 = 0.1;
    if (!a2) {
      double v9 = 0.25;
    }
    *(void *)&buf[16] = v8;
    *(double *)&long long v13 = v9;
    *((void *)&v14 + 1) = 0x3FEE666666666666;
    JTargetJBEstimator_UpdateJitterBufferParams(a1 + 54600, (uint64_t *)buf);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_SetMode_cold_1();
    }
  }
}

void VCJitterBuffer_SetNetworkType(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136316418;
        uint64_t v12 = v9;
        __int16 v13 = 2080;
        long long v14 = "VCJitterBuffer_SetNetworkType";
        __int16 v15 = 1024;
        int v16 = 1345;
        __int16 v17 = 1024;
        int v18 = a2;
        __int16 v19 = 1024;
        int v20 = a3;
        __int16 v21 = 1024;
        int v22 = a4;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d isCellular[%d] localCellTech[%d] remoteCellTech[%d]", (uint8_t *)&v11, 0x2Eu);
      }
    }
    JTargetJBEstimator_SetNetworkType(a1 + 54600, a2, a3, a4);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_SetNetworkType_cold_1();
    }
  }
}

double VCJitterBuffer_ProcessWiFiNetworkNotification(uint64_t a1, long long *a2, double a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = (uint64_t *)(a1 + 135184);
    if (*((unsigned char *)a2 + 8) == 1)
    {
      LOWORD(a3) = *((_WORD *)a2 + 6);
      char v6 = 1;
      double v7 = (double)*(unint64_t *)&a3 / 1000.0;
    }
    else
    {
      char v6 = 0;
      double v7 = 0.0;
    }
    *(double *)(a1 + 135880) = v7;
    *(unsigned char *)(a1 + 134266) = v6;
    long long v8 = *a2;
    *(_OWORD *)(a1 + 136872) = *a2;
    if (*((__int16 *)a2 + 5) != -1 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v9 = VRTraceErrorLogLevelToCSTR();
      uint64_t v10 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)a2;
        int v12 = *((unsigned __int8 *)a2 + 8);
        int v13 = *((unsigned __int16 *)a2 + 5);
        int v14 = *((unsigned __int16 *)a2 + 6);
        uint64_t v15 = v5[87];
        uint64_t v16 = *v5;
        int v18 = 136317442;
        uint64_t v19 = v9;
        __int16 v20 = 2080;
        __int16 v21 = "VCJitterBuffer_ProcessWiFiNetworkNotification";
        __int16 v22 = 1024;
        int v23 = 1363;
        __int16 v24 = 2048;
        uint64_t v25 = a1;
        __int16 v26 = 2048;
        uint64_t v27 = v11;
        __int16 v28 = 1024;
        int v29 = v12;
        __int16 v30 = 1024;
        int v31 = v13;
        __int16 v32 = 1024;
        int v33 = v14;
        __int16 v34 = 2048;
        uint64_t v35 = v15;
        __int16 v36 = 2048;
        uint64_t v37 = v16;
        _os_log_impl(&dword_1E1EA4000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCJitterBuffer[%p] Network Notification timestamp=%llu intermittentState=%u estimatedIntermittentPeriod=%u singleOutagePeriod=%u NWNotificationTarget=%f targetJBSize=%f", (uint8_t *)&v18, 0x56u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_ProcessWiFiNetworkNotification_cold_1();
    }
  }
  return *(double *)&v8;
}

void VCJitterBuffer_ProcessCellularNetworkNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = (uint64_t *)(a1 + 135184);
    uint64_t v5 = (_OWORD *)(a1 + 136888);
    if ((*(unsigned __int8 *)(a2 + 24) != *(unsigned __int8 *)(a1 + 136912)
       || *(unsigned __int8 *)(a2 + 16) != *(unsigned __int8 *)(a1 + 136904))
      && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v6 = VRTraceErrorLogLevelToCSTR();
      double v7 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a2 + 8);
        int v9 = *(unsigned __int8 *)(a2 + 16);
        int v10 = *(unsigned __int8 *)(a2 + 24);
        int v11 = *(unsigned __int16 *)(a2 + 22);
        int v12 = *(char *)(a2 + 17);
        int v13 = *(unsigned __int8 *)(a2 + 18);
        int v14 = *(unsigned __int16 *)(a2 + 20);
        uint64_t v15 = *v4;
        int v17 = 136317954;
        uint64_t v18 = v6;
        __int16 v19 = 2080;
        __int16 v20 = "VCJitterBuffer_ProcessCellularNetworkNotification";
        __int16 v21 = 1024;
        int v22 = 1371;
        __int16 v23 = 2048;
        uint64_t v24 = a1;
        __int16 v25 = 2048;
        uint64_t v26 = v8;
        __int16 v27 = 1024;
        int v28 = v9;
        __int16 v29 = 1024;
        int v30 = v10;
        __int16 v31 = 1024;
        int v32 = v11;
        __int16 v33 = 1024;
        int v34 = v12;
        __int16 v35 = 1024;
        int v36 = v13;
        __int16 v37 = 1024;
        int v38 = v14;
        __int16 v39 = 2048;
        uint64_t v40 = v15;
        _os_log_impl(&dword_1E1EA4000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCJitterBuffer[%p] Cellular Network Notification: timestamp=%llu radioAccessTechnology=%u outageState=%u estimatedOutagePeriod=%u signalQuality=%d dlBLER=%u cdrxCycleLength=%u targetJBSize=%f", (uint8_t *)&v17, 0x5Eu);
      }
    }
    long long v16 = *(_OWORD *)(a2 + 16);
    *uint64_t v5 = *(_OWORD *)a2;
    v5[1] = v16;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_ProcessCellularNetworkNotification_cold_1();
    }
  }
}

void VCJitterBuffer_SetSkipDecodeOnSilence(uint64_t a1, char a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(unsigned char *)(a1 + 216) = a2;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      uint64_t v3 = VRTraceErrorLogLevelToCSTR();
      uint64_t v4 = *MEMORY[0x1E4F47A50];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(unsigned __int8 *)(a1 + 216);
        int v6 = 136316162;
        uint64_t v7 = v3;
        __int16 v8 = 2080;
        int v9 = "VCJitterBuffer_SetSkipDecodeOnSilence";
        __int16 v10 = 1024;
        int v11 = 1381;
        __int16 v12 = 2048;
        uint64_t v13 = a1;
        __int16 v14 = 1024;
        int v15 = v5;
        _os_log_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCJitterBuffer[%p] skipDecodeOnSilence=%d", (uint8_t *)&v6, 0x2Cu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
      VCJitterBuffer_SetSkipDecodeOnSilence_cold_1();
    }
  }
}

uint64_t VCJitterBuffer_SetPayloadInfo(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2) {
      *(void *)(result + 136920) = a2;
    }
  }
  return result;
}

char *VCJitterBuffer_AudioPacketAlloc(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 135776);
    return JitterPreloadQueue_AudioPacketAlloc(v1);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_AudioPacketAlloc_cold_1();
      }
    }
    return 0;
  }
}

void *VCJitterBuffer_AudioFrameAlloc(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 135776);
    return JitterPreloadQueue_AudioFrameAlloc(v1);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_ERROR)) {
        VCJitterBuffer_AudioFrameAlloc_cold_1();
      }
    }
    return 0;
  }
}

void LogProfileTimeOverLimit_4(const char *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (VRTraceIsInternalOSInstalled())
  {
    double v14 = micro() - a2;
    if (v14 > a3)
    {
      *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v42 = v15;
      long long v43 = v15;
      long long v40 = v15;
      long long v41 = v15;
      long long v38 = v15;
      long long v39 = v15;
      long long v36 = v15;
      long long v37 = v15;
      long long v34 = v15;
      long long v35 = v15;
      long long v33 = v15;
      long long v31 = v15;
      long long v32 = v15;
      long long v29 = v15;
      long long v30 = v15;
      *(_OWORD *)char __str = v15;
      vsnprintf(__str, 0x100uLL, a1, &a11);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        uint64_t v16 = VRTraceErrorLogLevelToCSTR();
        int v17 = *MEMORY[0x1E4F47A50];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F47A50], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)fd_set buf = 136316162;
          uint64_t v19 = v16;
          __int16 v20 = 2080;
          __int16 v21 = "_LogProfileTimeLimitHelper";
          __int16 v22 = 1024;
          int v23 = 36;
          __int16 v24 = 2080;
          __int16 v25 = __str;
          __int16 v26 = 2048;
          double v27 = v14;
          _os_log_impl(&dword_1E1EA4000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

void sub_1E24904D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E24927A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E24929C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _AVCRateController_ConfigureInternal_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AVCRC [%s] %s:%d Not allowed to force algorithm config for mode=%d yet!", v2, v3, v4, v5);
}

void _AVCRateController_ConfigureInternal_cold_2()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v4 = 1221;
  __int16 v5 = v0;
  int v6 = v1;
  _os_log_debug_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEBUG, "AVCRC [%s] %s:%d AdaptiveLearning(AVCRateController): Initial bitrate defaulted to %d", v3, 0x22u);
}

void _AVCRateController_NotifyTargetBitrateChange_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "AVCRC [%s] %s:%d (%p) rateControllerDelegate is nil", v2, v3, v4, v5);
}

void _AVCRateController_DoRateControlWithStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "AVCRC [%s] %s:%d Failed to create nwActivity", v2, v3, v4, v5, v6);
}

void _AVCRateController_DoRateControlWithNWConnectionStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "AVCRC [%s] %s:%d Not using nwConnectionNotification", v2, v3, v4, v5, v6);
}

void _AVCRateController_DoRateControlWithNWConnectionStatistics_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AVCRC [%s] %s:%d Wrong statistics type=%d", v2, v3, v4, v5);
}

void _AVCRateController_DoRateControl_cold_1()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v2 = 2632;
  __int16 v3 = 2048;
  uint64_t v4 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Invalid statistics=%p", v1, 0x26u);
}

void VCRateControlFeedbackController_SetMode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Feedback controller is nil", v2, v3, v4, v5, v6);
}

void VCRateControlFeedbackController_UpdateTxLinkType_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Feedback controller is nil", v2, v3, v4, v5, v6);
}

void VCRateControlFeedbackController_SetLinkTypeToSupportECN_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Feedback controller is nil", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpWriter_OpenDumpFile_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate dump file", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpWriter_RegisterSource_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received nil writer", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpWriter_RegisterSource_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Attempting to register nil write source", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpWriter_RegisterSource_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to open dump file", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpWriter_Write_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received nil writer", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpWriter_Write_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get C string from CFString log", v2, v3, v4, v5, v6);
}

void AVConferenceServerStartInternal_cold_1()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *(_WORD *)os_log_t v0 = 0;
  _os_log_error_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "ERROR: avconferenced sandbox initialization failed.  Exiting.", v0, 2u);
}

void AVConferenceServerStartInternal_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  int v0 = *__error();
  v1[0] = 67109120;
  v1[1] = v0;
  _os_log_error_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Couldn't retrieve private temporary directory path: %d.", (uint8_t *)v1, 8u);
}

void AVConferenceServerStartInternal_cold_3()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  int v0 = *__error();
  v1[0] = 67109120;
  v1[1] = v0;
  _os_log_error_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Error calling realpath on the private temporary directory path: %d.", (uint8_t *)v1, 8u);
}

void AVConferenceServerStartInternal_cold_4()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *(_WORD *)int v0 = 0;
  _os_log_debug_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "Entered sandbox.", v0, 2u);
}

void AVConferenceServerStartInternal_cold_5()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *(_WORD *)int v0 = 0;
  _os_log_error_impl(&dword_1E1EA4000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Couldn't set private partition in the temporary directory", v0, 2u);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d error setting up VCAudioPowerSpectrum", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create octave to index table", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_3()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate _octave2IndexTable6 [count=%d]", v2, v3, v4, v5);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create bin interpolation indexes", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Output bin count is 0", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create hanning window", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_7()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create channel settings: channelCount=%d", v2, v3, v4, v5);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_8()
{
  OUTLINED_FUNCTION_2();
  *(_WORD *)&v4[4] = v0;
  *(void *)&v4[6] = "_VCAudioPowerSpectrum_SetupAudioPowerSpectrumWithBinCount";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v1, v2, " [%s] %s:%d Failed to setup the channel settings[%d]", v3, *(const char **)v4, (unint64_t)"_VCAudioPowerSpectrum_SetupAudioPowerSpectrumWithBinCount" >> 16, 370);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create octave to index table", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_10()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate octaveDbOld [count=%d]", v2, v3, v4, v5);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_11()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate octaveDb [count=%d]", v2, v3, v4, v5);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_12()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate octaveDbFilt [count=%d]", v2, v3, v4, v5);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_13()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate octaveDbFiltInterpolated [count=%d]", v2, v3, v4, v5);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_14()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create FFT", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_15()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to history buffer", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_16()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate fftBuffer", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_17()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate fftBuffer", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_18()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create bins", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_19()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Output bin count is 0!", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_20()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Current bin count is %d. Setup run a second time ?", v2, v3, v4, v5);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_21()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate sample buffer", v2, v3, v4, v5, v6);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_22()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported format flags: %x", v2, v3, v4, v5);
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_23()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported format id: %d", v2, v3, v4, v5);
}

void _AVCStatisticsCollector_ProcessVCStatisticsInternal_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Unknown type of packet received statistics", v2, v3, v4, v5, v6);
}

void _AVCStatisticsCollector_GetVCStatisticsWithType_cold_1(uint64_t a1, int *a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  uint64_t v7 = "_AVCStatisticsCollector_GetVCStatisticsWithType";
  __int16 v8 = 1024;
  int v9 = 560;
  __int16 v10 = 1024;
  int v11 = v3;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d Mode %d does not support reading the statistics collection", (uint8_t *)&v4, 0x22u);
}

void VCStatisticsCollector_EnableBWELogDump_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
}

void VCStatisticsCollector_Mode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
}

void VCStatisticsCollector_SetMode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
}

void VCStatisticsCollector_SetFastSuddenBandwidthDetectionEnabled_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
}

void VCStatisticsCollector_SetRadioAccessTechnology_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
}

void VCStatisticsCollector_SharedEstimatedBandwidth_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
}

void _AVCStatisticsCollector_UpdateMaxLocalBurstyLoss_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss";
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d update audio loss: %d", v2, *(const char **)v3, (unint64_t)"_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss" >> 16, 865);
}

void _AVCStatisticsCollector_UpdateMaxLocalBurstyLoss_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss";
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d update video loss: %d", v2, *(const char **)v3, (unint64_t)"_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss" >> 16, 870);
}

void VCAudioStreamReceiveGroup_PullAudioSamples_cold_1()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VCAudioStreamReceiveGroup_UpdateAudioPriority";
  __int16 v4 = 1024;
  int v5 = 397;
  __int16 v6 = 1024;
  int v7 = 397;
  __int16 v8 = 1024;
  int v9 = v0;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCAudioStreamReceiveGroup.m:%d: Updating audio priority %d", v2, 0x28u);
}

void VCCaptionsStreamSendGroup_PushAudioSamples_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 312;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d audio no-op no MKM", (uint8_t *)&v2, 0x1Cu);
}

void VCCaptionsStream_CreateSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error creating format description for captions: %d", v2, v3, v4, v5);
}

void VCCaptionsStream_CreateSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error creating block buffer for captions: %d", v2, v3, v4, v5);
}

void VCVideoJitterBuffer_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid Config (nil)", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Failed to allocate the Video JitterBuffer", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Failed to allocate the Video JitterBuffer memory", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d maxDisplayRefreshRate cannot be 0!", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Failed to initialize the target estimator", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_Create_cold_6()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v3 = v0;
  uint64_t v4 = "VCVideoJitterBuffer_GetJitterDistributionBucketSize";
  __int16 v5 = 1024;
  int v6 = 102;
  __int16 v7 = 1024;
  int v8 = 0;
  __int16 v9 = 1024;
  int v10 = 4;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "VCVideoJitterBuffer [%s] %s:%d Default configuration for number of bins per frame %d for target estimator CDF is incorrect, defaulting to %d bins per frame", v2, 0x28u);
}

void VCVideoJitterBuffer_Create_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Failed to initialize the lag processor", v2, v3, v4, v5, v6);
}

void _VCVideoJitterBuffer_GetJBTargetFromEstimatedTarget_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid parameters in callback", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_Finalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_UpdateMode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_GetTargetJitterQueueSize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_GetJitterBufferMaxQueueSize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_GetReferenceFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_EnqueueFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
}

void VCVideoJitterBuffer_HealthPrint_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
}

void VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d selectableInputs is invalid = %p", v2, *(const char **)v3, (unint64_t)"VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray" >> 16, v4);
}

void VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray_cold_2()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v3 = v0;
  uint64_t v4 = "VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray";
  OUTLINED_FUNCTION_3();
  int v5 = 37;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d builtInMicPort returned is NULL", v2, 0x1Cu);
}

void VCMicrophonePreferencesCMS_GetDataSourcesFromPortDictionary_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMicrophonePreferencesCMS_GetDataSourcesFromPortDictionary";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d builtInMicPort invalid = %p", v2, *(const char **)v3, (unint64_t)"VCMicrophonePreferencesCMS_GetDataSourcesFromPortDictionary" >> 16, v4);
}

void VCMicrophonePreferencesCMS_CreateSelectedInputDictWithPolarPattern_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v3 = v0;
  uint64_t v4 = "_VCMicrophonePreferencesCMS_OptimalMicPolarPatternFromDataSource";
  OUTLINED_FUNCTION_3();
  int v5 = 106;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Did not find non-omnidirectional polar pattern", v2, 0x1Cu);
}

void VCMicrophonePreferencesCMS_ApplyMicrophonePreferences_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VCMicrophonePreferencesCMS_ApplyMicrophonePreferences";
  OUTLINED_FUNCTION_3();
  int v3 = 141;
  __int16 v4 = 2048;
  uint64_t v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d selectedInputDict(%p) == NULL", v1, 0x26u);
}

void VCMicrophonePreferencesCMS_ApplyMicrophonePreferences_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Setting kCMSessionProperty_SelectedInputs with data source failed %.4s", v2, v3, v4, v5);
}

void VCMicrophonePreferencesCMS_ApplyMicrophonePreferences_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Setting kCMSessionProperty_SelectedInputs with polar pattern failed %.4s", v2, v3, v4, v5);
}

void _VCAudioStreamGroup_AddSyncDestination_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed allocating memory for listEntry", v2, v3, v4, v5, v6);
}

void DynamicStoreCallbackForWifiChanges_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d GKInterfaceListener Dynamic store instance NULL, discontinuing Wifi detection.", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistory_AddAudioSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d history is nil", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistory_AddAudioSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d audioBufferList is nil", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistory_AddAudioSampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaRecorderHistory_AddAudioSampleBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d figFormat is NULL for audioBufferList=%p", v2, *(const char **)v3, (unint64_t)"VCMediaRecorderHistory_AddAudioSampleBuffer" >> 16, v4);
}

void VCMediaRecorderHistory_AddAudioSampleBuffer_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaRecorderHistory_AddAudioSampleBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d sampleBuffer is NULL for audioBufferList=%p", v2, *(const char **)v3, (unint64_t)"VCMediaRecorderHistory_AddAudioSampleBuffer" >> 16, v4);
}

void VCMediaRecorderHistory_AddLocalVideoSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaRecorderHistory_AddLocalVideoSampleBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d cvBufferCopy is NULL for sampleBuffer %p", v2, *(const char **)v3, (unint64_t)"VCMediaRecorderHistory_AddLocalVideoSampleBuffer" >> 16, v4);
}

void VCMediaRecorderHistory_UpdateTargetScreenAttributes_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d object can't be null", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistory_UpdateResizeFlag_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid visible rect", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistory_UpdateResizeFlag_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid capture width", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistory_UpdateResizeFlag_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid capture height", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistory_StopProcessingAllRequests_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d nil instance passed", v2, v3, v4, v5, v6);
}

void VCEmulatedNetworkAlgorithm_UpdateIndexWithIntervalArray_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCEmulatedNetworkAlgorithm_UpdateIndexWithIntervalArray";
  __int16 v6 = 1024;
  int v7 = 34;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Cannot update index when updating network settings", (uint8_t *)&v2, 0x1Cu);
}

void VCOverlaySource_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] newInstance was NULL", v2, v3, v4, v5, v6);
}

void VCOverlaySource_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] allocate failed for VCOverlaySource instance", v2, v3, v4, v5, v6);
}

void VCOverlaySource_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] allocate failed for reader source", v2, v3, v4, v5, v6);
}

void VCOverlaySource_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] allocate failed for writer source", v2, v3, v4, v5, v6);
}

void VCOverlaySource_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] allocate failed for swap source", v2, v3, v4, v5, v6);
}

void _VCRateControlAlgorithmSparseNOWRD_DoRateControl_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_VCRateControlAlgorithmSparseNOWRD_DoRateControl";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type:%d to do rate control", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmSparseNOWRD_DoRateControl" >> 16, 181);
}

void _VCRateControlAlgorithmSparseNOWRD_DoRateControl_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_VCRateControlAlgorithmSparseNOWRD_DoRateControlWithVCRCStatistics";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state %d", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmSparseNOWRD_DoRateControlWithVCRCStatistics" >> 16, 280);
}

void VCRateControlAlgorithmSparseNOWRD_NoServerStatsActivityDetected_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCRateControlAlgorithmSparseNOWRD_NoServerStatsActivityDetected";
  __int16 v6 = 1024;
  int v7 = 352;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d Invalid argument. Algorithm is nil", (uint8_t *)&v2, 0x1Cu);
}

void captionsAudioConverterCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d One of the pointers passed to AudioResamplerInput callback is NULL", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL newInstance", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL didUpdateNetworkConditionCallback", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL didUpdateNetworkConditionContext", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: allocate failed", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the state queue", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_SetBrokenNetworkStatus_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_SetWiFiChannelQualityScore_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_SetCellSignalStrengthBars_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_SetRemoteNetworkQuality_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
}

void VCNetworkConditionMonitor_SetIsLocalActiveOnCellular_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
}

void VCMediaKeyIndex_UniquePrefixBytes_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameters passed to the method", v2, v3, v4, v5, v6);
}

void AFRCCreateHandle_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2_2();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: calloc(%d) failed", v1, 0x28u);
}

void AFRCCreateHandle_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2_2();
  _os_log_fault_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_FAULT, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: calloc(%d) failed", v1, 0x28u);
}

void AFRCCreateHandle_cold_3()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 1311;
  __int16 v4 = v0;
  int v5 = 1311;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: AFRCCreateHandle failed", v2, 0x22u);
}

void AFRCCreateHandle_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x26u);
}

void AFRCCloseHandle_cold_1()
{
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x50u);
}

void AFRCSetTxCap_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 1585;
  __int16 v4 = v0;
  int v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d Invalid parameter dwTxCap %u", v2, 0x22u);
}

void AFRCGetTxInfo_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d ^^^^^ LARGE frame req'd of %d ", v2, v3, v4, 6199);
}

void AFRCGetTxInfo_cold_2(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 6160;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d Enabling LF", (uint8_t *)&v2, 0x1Cu);
}

void AFRCProcessBasebandNotification_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 5006;
  __int16 v4 = v0;
  int v5 = 5006;
  __int16 v6 = v0;
  int v7 = 6;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: Got PTs more than MAX_PAYLOADTYPES(%d) in a DropACK", v2, 0x28u);
}

void AFRCSetBWEstMode_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 6525;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d ////^^^^ AFRCSetBWEstMode: FALLING TO BW-EST BACKWARD COMPATIBLITY MODE", (uint8_t *)&v2, 0x1Cu);
}

void MediaQueue_CreateHandle_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v2 = 25600;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: calloc(%d) failed", v1, 0x28u);
}

void MediaQueue_CreateHandle_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: CreateHandle failed", v2, v3, v4, v5, v6);
}

void ActiveProbing_Uninit_cold_1()
{
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x28u);
}

void MediaQueue_Start_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: pthread_create(MediaQueueSendProc) failed (%08X)\n", v2, v3, v4, v5, v6);
}

void MediaQueue_Start_cold_2(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 642;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d MediaQueueSendProc Thread already started", (uint8_t *)&v2, 0x1Cu);
}

void MediaQueue_Malloc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: Request buffer size(%d) too big!", v2, v3, v4, v5, v6);
}

void MediaQueue_Malloc_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v2 = 1704;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: calloc(%d) failed", v1, 0x28u);
}

void MediaQueue_AddPacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: Media queue closing, free packet!", v2, v3, v4, v5, v6);
}

void _MediaQueue_CheckActiveProbingQueueLength_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  LOWORD(v6) = 0;
  HIWORD(v6) = v0;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v1, v2, " [%s] %s:%d Media queue overflow! maxLength=%d, currentLength=%d", v3, v4, v5, 970, v6);
}

void MediaQueue_RexmitPacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: Media queue closing, free packet!", v2, v3, v4, v5, v6);
}

void MediaQueue_RexmitPacket_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: MediaQueue_LastSN failed (%08X)", v2, v3, v4, v5, v6);
}

void ActiveProbing_ProcessIncomingPacket_cold_1()
{
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x22u);
}

void ActiveProbing_ProcessIncomingPacket_cold_2(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 1641;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d AddPacket: ^^^^^^\t\t MP belonging to an active Probe. Going to the main list", (uint8_t *)&v2, 0x1Cu);
}

void ActiveProbing_ProcessIncomingPacket_cold_3()
{
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x34u);
}

void MediaQueue_ThrottlingFlushThrottlingQueue_cold_1()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v4 = 1993;
  __int16 v5 = v0;
  int v6 = v1;
  __int16 v7 = 2048;
  uint64_t v8 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d *** MediaQueue_SetThrottlingFlushThrottlingQueue: Unexpected %d %p ", v3, 0x2Cu);
}

void MediaQueue_SendPacket_cold_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v4 = 309;
  __int16 v5 = v0;
  int v6 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Adding extension failed with result %08X", v3, 0x22u);
}

void _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate sps buffer", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate pps buffer", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_CreateAndGetBlockBufferPtr_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_CreateAndGetBlockBufferPtr_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_ExtractSFramePayloadFromSlice_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSFrameCryptorH264_ExtractSFramePayloadFromSlice";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VCSFrameCryptorH264_ExtractSFramePayloadFromSlice failed to create output buffer, status=%d", v2, *(const char **)v3, (unint64_t)"_VCSFrameCryptorH264_ExtractSFramePayloadFromSlice" >> 16, v4);
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu: Failed to parse nalu length from buffer", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu, failed to allocate temporary buffer", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VCSFrameCryptorH264_ExtractSFramePayloadFromSlice failed to extract SFrame slice payload", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu, failed to get access to enough bytes contiguously for parsing nalu at offset:%zu", v2, *(const char **)v3, (unint64_t)"_VCSFrameCryptorH264_FindAndExtractSliceNalu" >> 16, v4);
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_5()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu, failed to get data pointer for nalu at offset:%zu", v2, *(const char **)v3, (unint64_t)"_VCSFrameCryptorH264_FindAndExtractSliceNalu" >> 16, v4);
}

void _VCSFrameCryptroH264_EscapeEncryptedBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to perform escaping on encrypted sframe payload", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptroH264_EscapeEncryptedBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSFrameCryptroH264_EscapeEncryptedBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create escaped sframe buffer with size:%zu", v2, *(const char **)v3, (unint64_t)"_VCSFrameCryptroH264_EscapeEncryptedBuffer" >> 16, v4);
}

void _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoUtil_RemoveEmulationBytesFromBuffer failed", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCCryptorRef should not be NULL", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Create create instance failed", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Create failed to allocate block buffer data allocator", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Create failed to allocate block buffer header allocator", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Encrypt_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append prefix nalus to sframe buffer", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Encrypt_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VCSFrameCryptorH264_AppendPrefixNalusForSFramePacketization failed due to invalid buffer pointer", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Encrypt_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SFrame buffer is not contiguous", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Encrypt_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCSFrameCryptorH264_Encrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to escape encrypted buffer, escape count:%zu", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Encrypt" >> 16, v4);
}

void VCSFrameCryptorH264_Encrypt_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get encrypted buffer pointer", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Encrypt_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCSFrameCryptorH264_Encrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCCryptor_Encrypt failed with error %d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Encrypt" >> 16, v4);
}

void VCSFrameCryptorH264_Encrypt_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create encrypted buffer with reference to total SFrame buffer", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Encrypt_cold_8()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCSFrameCryptorH264_Encrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create sframe buffer with size:%zu", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Encrypt" >> 16, v4);
}

void VCSFrameCryptorH264_Encrypt_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get ecrypted buffer size", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Encrypt_cold_10()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCSFrameCryptorH264_Encrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to replace NAL length with start code. result=%d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Encrypt" >> 16, v4);
}

void VCSFrameCryptorH264_Encrypt_cold_11()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to extract spspps from encoded buffer", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Encrypt_cold_12()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Encrypt_cold_13()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Encrypt failed due to invalid input parameter", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_ValidateInputParameters_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d vcSFrameCryptorH264 should not be NULL", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_ValidateInputParameters_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d input buffer should not be NULL", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_ValidateInputParameters_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d output buffer should not be NULL", v2, v3, v4, v5, v6);
}

void _VCSFrameCryptorH264_ValidateInputParameters_cold_4()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "_VCSFrameCryptorH264_ValidateInputParameters";
  OUTLINED_FUNCTION_3();
  int v3 = 59;
  __int16 v4 = 2048;
  uint64_t v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d inputBuffer contains incorrect data size '%zu'", v1, 0x26u);
}

void VCSFrameCryptorH264_Decrypt_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCSFrameCryptorH264_Decrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to replace start code with NAL length. result=%d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Decrypt" >> 16, v4);
}

void VCSFrameCryptorH264_Decrypt_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get decrypted buffer data pointer", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Decrypt_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCSFrameCryptorH264_Decrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to decrypt the buffer %d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Decrypt" >> 16, v4);
}

void VCSFrameCryptorH264_Decrypt_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCSFrameCryptorH264_Decrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer failed with result:%d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Decrypt" >> 16, v4);
}

void VCSFrameCryptorH264_Decrypt_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Decrypt_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to parse and copy the SFrame buffer", v2, v3, v4, v5, v6);
}

void VCSFrameCryptorH264_Decrypt_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Decrypt failed due to invalid input parameter", v2, v3, v4, v5, v6);
}

void RSU_Encode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid Group Size", v2, v3, v4, v5, v6);
}

void RSU_Encode_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to Encode the packet payloads.", v2, v3, v4, v5, v6);
}

void RSU_Encode_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to generate parity bits for data payload sizes.", v2, v3, v4, v5, v6);
}

void _RSU_EncodeByteBuffer_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid number of symbols per packet (%d)", v2, v3, v4, v5);
}

void _RSU_DecodeByteBuffer_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid number of symbols per packet (%d)", v2, v3, v4, v5);
}

void RSU_Decode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid Buffer Size", v2, v3, v4, v5, v6);
}

void RSU_Decode_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid Buffer Size", v2, v3, v4, v5, v6);
}

void RSU_Decode_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d DecodeByteBuffe failed!", v2, v3, v4, v5, v6);
}

void RSU_Decode_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid number of symbols per packet (%d)", v2, v3, v4, v5);
}

void RSU_Decode_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d DecodeByteBuffe failed!", v2, v3, v4, v5, v6);
}

void RSU_Decode_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid Buffer Size", v2, v3, v4, v5, v6);
}

void EncCreateHandle_cold_1(uint64_t a1, _DWORD *a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 136316162;
  *(void *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2080;
  *(void *)&unsigned char v3[14] = "EncCreateHandle";
  LODWORD(v4) = *a2;
  WORD2(v4) = 1024;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, (uint64_t)a2, a3, " [%s] %s:%d Invalid resolution %dx%d", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"EncCreateHandle" >> 16, 591, *(_DWORD *)((char *)&v4 + 2));
}

void EncCreateHandle_cold_2()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  void v3[6] = 612;
  __int16 v4 = v0;
  int v5 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Tiles per frame is not set to a valid number %d", (uint8_t *)v3, 0x22u);
}

void EncCreateHandle_cold_3()
{
  int v2 = 136316162;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: VCPCompressionSessionCreate %i", v2, v3, v4, v5, v6);
}

void EncEncodeFrame_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 1082;
  __int16 v4 = v0;
  int v5 = 1082;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: Encoder callback is NULL", v2, 0x22u);
}

void EncEncodeFrame_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  LOWORD(v6) = 0;
  HIWORD(v6) = v0;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: VCPCompressionSessionEncodeFrame failed(%08X)", v3, v4, v5, 1139, v6);
}

void _DumpParameterSetsBitstream_cold_1()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v3 = v0;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  __int16 v4 = "void _DumpParameterSetsBitstream(CMSampleBufferRef, PENCODER)";
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: %s: Can't extract format description from saved buffer", v2, 0x2Cu);
}

void _DumpParameterSetsBitstream_cold_2()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v3 = v0;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  __int16 v4 = "void _DumpParameterSetsBitstream(CMSampleBufferRef, PENCODER)";
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: %s: Can't extract avcC from format description", v2, 0x2Cu);
}

void _DumpParameterSetsBitstream_cold_3()
{
  int v2 = 136316162;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: readAVCCAndEncodeH264SPSPPS %d", v2, v3, v4, v5, v6);
}

void _DumpParameterSetsBitstream_cold_4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 207;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Can't extract byte pointer from image description", v1, 0x1Cu);
}

void _DumpFrameBitstream_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 241;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCPCompressionSession Error: Encoder returned a NULL frame", v1, 0x1Cu);
}

void _DumpFrameBitstream_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 223;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCPCompressionSession Error: Error getting data buffer", v1, 0x1Cu);
}

void vtEncCallback_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 331;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Encoder callback function or callback data is not set", v1, 0x1Cu);
}

void vtEncCallback_cold_2()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 321;
  __int16 v4 = v0;
  int v5 = -12912;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCPCompressionSession Error: %d, the system may run into a low memory state", v2, 0x22u);
}

void VCVideoStreamEncoderProc_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to dequeue sample buffer", v2, v3, v4, v5, v6);
}

void VCVideoStreamTransmitter_SetFECRatio_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Not implemented!", v2, v3, v4, v5, v6);
}

void VCVideoStreamTransmitter_SetMediaQueueSize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Not implemented!", v2, v3, v4, v5, v6);
}

void encoderFrameCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d frame encode error %d", v2, v3, v4, v5);
}

void JitterQueue_Insert_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  int v5 = "JitterQueue_Insert";
  __int16 v6 = 1024;
  int v7 = 234;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Jitter Queue Max maxPacketTimeDelta Size is not set", (uint8_t *)&v2, 0x1Cu);
}

void JitterQueue_Insert_cold_2(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  int v5 = 136316162;
  uint64_t v6 = a1;
  __int16 v7 = 2080;
  uint64_t v8 = "JitterQueue_Insert";
  __int16 v9 = 1024;
  int v10 = 212;
  __int16 v11 = 1024;
  int v12 = v3;
  __int16 v13 = 1024;
  int v14 = v4;
  _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Discarding duplicate audio frame isRedAudio:%d timestamp:%u", (uint8_t *)&v5, 0x28u);
}

void VCNWConnectionMonitor_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create monitor because nwConnection is null!", v2, v3, v4, v5, v6);
}

void _VCNWConnectionMonitor_DispatchedProcessInterfaceAdvisoryNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for notification!", v2, v3, v4, v5, v6);
}

void _VCNWConnectionMonitor_AddNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Can't add a null monitor!", v2, v3, v4, v5, v6);
}

void _VCNWConnectionMonitor_ProcessNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NWConnection notification is nil", v2, v3, v4, v5, v6);
}

void _VCNWConnectionMonitor_ProcessNotification_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NWConnection notification submitted with incompatible version=%d, discarding", v2, v3, v4, 516);
}

void _VCNWConnectionMonitor_ProcessNotification_cold_3()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_4();
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d  timestamp%llu", v1, 0x26u);
}

void VCNWConnectionMonitor_ResetWlanStats_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d monitor is null!", v2, v3, v4, v5, v6);
}

void VCFECGenerator_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
}

void VCFECGenerator_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
}

void VCFECGenerator_Create_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCFECGenerator_Create";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid fec header version=%d", v2, *(const char **)v3, (unint64_t)"VCFECGenerator_Create" >> 16, v4);
}

void VCFECGenerator_Create_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCFECGenerator_Create";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid fec feedback version=%d", v2, *(const char **)v3, (unint64_t)"VCFECGenerator_Create" >> 16, v4);
}

void VCFECGenerator_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d memory pool allocate failed", v2, v3, v4, v5, v6);
}

void VCFECGenerator_Create_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d single list initialization failed", v2, v3, v4, v5, v6);
}

void VCFECGenerator_Create_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d single list initialization failed", v2, v3, v4, v5, v6);
}

void VCFECGenerator_Create_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d single list initialization failed", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PushPacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PushPacket_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL packetBuffer", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PushPacket_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL fail to allocate list entry", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PopPacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PopPacket_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL packetBuffer", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PopPacket_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL list entry", v2, v3, v4, v5, v6);
}

void VCFECGenerator_GetNumberOutputPackets_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCFECGenerator_GetNumberOutputMediaPackets_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PerformAction_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PerformAction_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCFECGenerator_PerformAction";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d action not supported action=%d", v2, *(const char **)v3, (unint64_t)"VCFECGenerator_PerformAction" >> 16, v4);
}

void VCFECGenerator_PerformAction_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FEC Encode failed", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PerformAction_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failure in dequeing an input packet", v2, v3, v4, v5, v6);
}

void VCFECGenerator_PerformAction_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failure in dequeing an input packet", v2, v3, v4, v5, v6);
}

void VCFECGenerator_SetFixedFECLevel_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCFECGenerator_SetFixedFECLevel_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FEC level not in valid range", v2, v3, v4, v5, v6);
}

void VCFECGenerator_SetFECLevelPerGroupSizeVector_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCFECGenerator_SetFECLevelPerGroupSizeVector_cold_2()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v4 = "VCFECGenerator_SetFECLevelPerGroupSizeVector";
  OUTLINED_FUNCTION_3();
  int v5 = 647;
  __int16 v6 = v0;
  int v7 = v1;
  __int16 v8 = v0;
  int v9 = 32;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Number of vector items is not in valid range vectorSize=%d VCFEC_GENERATOR_MAX_VECTOR_ITEMS=%d", v3, 0x28u);
}

void VCFECGenerator_GetProcessingAverageTime_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d fecGenerator is NULL", v2, v3, v4, v5, v6);
}

void VCMediaQueueUtil_FindPacketInTxHistory_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCMediaQueueUtil_FindPacketInTxHistory";
  __int16 v6 = 1024;
  int v7 = 240;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Do not have a valid packetParam", (uint8_t *)&v2, 0x1Cu);
}

void VCPayloadUtils_AudioCodecRateModeForBitrate_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCPayloadUtils_AudioCodecRateModeForBitrate";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported payload %d", v2, *(const char **)v3, (unint64_t)"VCPayloadUtils_AudioCodecRateModeForBitrate" >> 16, 1012);
}

void VCPayloadUtils_ShortREDBitrateForPayload_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d shortREDEnabled=%{BOOL}d for payload=%u which does NOT retain a bitrate for it.");
}

void RTCPCopySendControlParameters_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for send control parameters.", v2, v3, v4, v5, v6);
}

void RTCPCopySendControlParameters_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameters.", v2, v3, v4, v5, v6);
}

void RTCPPackSendControlParameter_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameters", v2, v3, v4, v5, v6);
}

void RTPSendRTCP_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTCP encryption failed (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTCP add authentication tag failed (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_3()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  __int16 v3 = v0;
  int v4 = 8;
  __int16 v5 = v0;
  int v6 = 1472;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d RTCP buffer too small. Unable to add BYE: %d + %d > %d", v2, 0x2Eu);
}

void RTPSendRTCP_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to write TMMBN: (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to write TMMBR: (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to write TSTN: (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to write TSTR: (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to write PLI: (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to write FIR: (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to add custom APP packet (%X))", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_11()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to write PSFB ALFB packet, result=%X", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_12()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to add a PSFB ALFB Loss Feedback packet, error=%X", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_13()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to add a PSFB ALFB Loss Feedback packet, error=%X", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_14()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to write RTCP XR. result=%X", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_15()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Not enough space for the RTCP XR packet", v2);
}

void RTPSendRTCP_cold_16()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Failed to finalize the XR packet. status=%X", v2, v3, v4, 1741, v5);
}

void RTPSendRTCP_cold_17()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_12();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Failed to add the VoIP Metrics Report Block. status=%X", v1, 0x28u);
}

void RTPSendRTCP_cold_18()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_12();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Failed to add the Statistics Summary Report Block. status=%X", v1, 0x28u);
}

void RTPSendRTCP_cold_19()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Failed to add RTCP header", v2);
}

void RTPSendRTCP_cold_20()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to add SR/RR packet (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_21()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to add custom SR/RR packet (%X)", v2, v3, v4, v5);
}

void RTPSendRTCP_cold_22()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to add RTCL packet (%X)", v2, v3, v4, v5);
}

void RTCPAddFIR_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to add FIR, buffer too small: %d > %d", v2, v3, v4, 449, v5);
}

void RTCPAddPLI_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to add PLI, buffer too small: %d > %d", v2, v3, v4, 486, v5);
}

void _RTCPSendWithTransportStream_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL sendParameters", v2, v3, v4, v5, v6);
}

void _RTCPSendWithTransportStream_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  HIWORD(v7) = v0;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v1, v2, " [%s] %s:%d streamIDCount=%d is greater than max=%u", v3, v4, v5, v6, v7);
}

void _RTCPSendWithSocket_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  __error();
  int v5 = 136315906;
  uint64_t v6 = a1;
  __int16 v7 = 2080;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, a2, v4, " [%s] %s:%d VTP_Send failed with error=%d", (uint8_t *)&v5);
}

void _RTCPTransport_ParsePacket_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP header", v2);
}

void _RTCPTransport_ParsePacket_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP packet length", v2);
}

void _RTCPTransport_ParsePacket_cold_3()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP SR packet", v2);
}

void _RTCPTransport_ParsePacket_cold_4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP RR packet", v2);
}

void _RTCPTransport_ParsePacket_cold_5()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP SDES message", v2);
}

void _RTCPTransport_ParsePacket_cold_6()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP BYE message", v2);
}

void _RTCPTransport_ParsePacket_cold_7()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Bad RTCP APP packet", v2);
}

void _RTCPTransport_ParsePacket_cold_8()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP FIR message", v2);
}

void _RTCPTransport_ParsePacket_cold_9()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP NACK message", v2);
}

void _RTCPTransport_ParsePacket_cold_10()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP PSFB message", v2);
}

void _RTCPTransport_ParsePacket_cold_11()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Bad RTCP PSFB ALFB packet", v2);
}

void _RTCPTransport_ParsePacket_cold_12()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP RTPFB message", v2);
}

void _RTCPTransport_ParsePacket_cold_13()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Bad RTCP packet", v2);
}

void _RTCPTransport_ParsePacket_cold_14()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP version", v2);
}

void _RTCPPacketCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTP error[%x]", v2, v3, v4, v5);
}

void RTCPRegisterPacketCallback_cold_1()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  int v5 = "RTCPRegisterPacketCallback";
  OUTLINED_FUNCTION_3();
  int v6 = 2433;
  __int16 v7 = 2048;
  uint64_t v8 = 0xFFFFFFFFLL;
  __int16 v9 = 2048;
  uint64_t v10 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter rtpHandle[%p] callbackContext[%p]!", v3, 0x30u);
}

void RTCPRegisterPacketCallback_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to checking rtpHandle[%p]", v2, v3, v4, v5);
}

void RTCPRegisterPacketCallback_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTCPHandle[%p] Failed store the callback", v2, v3, v4, v5);
}

void RTCPRegisterPacketCallback_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPHandle[%p] Packet callback already registered", v2, v3, v4, v5);
}

void RTCPUnregisterPacketCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPHandle[%p] RTCP packet callback was not registered", v2, v3, v4, v5);
}

void RTPRecvRTCP_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTCP receive failed! hResult:(%08X)", v2, v3, v4, v5);
}

void _RTPTransportStreamRTCPCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL packetList", v2, v3, v4, v5, v6);
}

void _RTPTransportStreamRTCPCallback_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
}

void _RTCPParseVCPacket_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Drop RTCP packet from a unknown connection.", v2);
}

void _RTCPParseVCPacket_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTCP header doesn't fit in packet. Packet length=%d", v2, v3, v4, v5);
}

void _RTCPParseVCPacket_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTCP decryption failed (%X)", v2, v3, v4, v5);
}

void _RTCPParseVCPacket_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTCP verification failed (%X)", v2, v3, v4, v5);
}

void _RTCPParseVCPacket_cold_5()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: RTCP packet failed Version, padding bit, packet type check", v2);
}

void _RTCPParseVCPacket_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to retrieve data pointer %d", v2, v3, v4, v5);
}

void _RTCPAddPSFBAlfbPacket_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported application name=%u", v2, v3, v4, v5);
}

void VCFBOUtils_IsKindOfClass_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  int v5 = "VCFBOUtils_IsKindOfClass";
  __int16 v6 = 1024;
  int v7 = 33;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d NULL filter", (uint8_t *)&v2, 0x1Cu);
}

void _VCAudioStream_NWConnectionNotificationHandler_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d Callback executed with context being nil", v2, v3, v4, v5, v6);
}

void _VCAudioStream_NWConnectionNotificationHandler_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d nwConnectionNotification is invalid", v2, v3, v4, v5, v6);
}

void _VCAudioStream_NWConnectionNotificationHandler_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d Received Skywalk notification for unsupported interface type=%d", v2, v3, v4, v5);
}

void _VCAudioStream_NWConnectionNotificationHandler_cold_4()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d Received Skywalk notification with unsupported version=%d", v2, v3, v4, v5);
}

void VCAudioStream_PullAudioSamples_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d audioStream is invalid", v2, v3, v4, v5, v6);
}

void VCAudioStream_PullAudioSamples_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d Statistics collector is not valid", v2, v3, v4, v5, v6);
}

void VCAudioStream_PullAudioSamples_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d OWRD in abnormal levels for %d seconds, triggering lag reference reset", v2, v3, v4, v5);
}

void VCAudioStream_PullAudioSamples_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d OWRD is not valid, skipping", v2, v3, v4, v5, v6);
}

void VCAudioStream_SetAllowedCodecConfigurations_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d audio stream is nil", v2, v3, v4, v5, v6);
}

void VCAudioStream_SetAllowedCodecConfigurations_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d audio transmitter is nil", v2, v3, v4, v5, v6);
}

void VCAudioStream_SetAllowedCodecConfigurations_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d Failed to allocate allowedAudioPayloads array", v2, v3, v4, v5, v6);
}

void VCAudioStream_SetAudioPlayoutDelay_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioStream [%s] %s:%d stream is nil", v2, v3, v4, v5, v6);
}

void _VCScreenCapture_setRepeatFrameAttributes_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCScreenCapture [%s] %s:%d Failed to get image buffer", v2, v3, v4, v5, v6);
}

void _VCScreenCapture_handleFrameInternal_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCScreenCapture [%s] %s:%d Rotated sample buffer is NULL", v2, v3, v4, v5, v6);
}

void _VCScreenCapture_handleFrameInternal_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCScreenCapture [%s] %s:%d failed to set ioSurfaceTimeStamp", v2, v3, v4, v5, v6);
}

void _VCScreenCapture_handleFrameInternal_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCScreenCapture [%s] %s:%d failed to set SIGNPOST_IOSURFACE_ID", v2, v3, v4, v5, v6);
}

void _VCScreenCapture_handleFrameInternal_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCScreenCapture [%s] %s:%d VCScreenCapture: could not create pixel buffer from pool %d", v2, v3, v4, v5);
}

void _VCScreenCapture_handleFrameInternal_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCScreenCapture [%s] %s:%d Resized sample buffer is NULL", v2, v3, v4, v5, v6);
}

void VCScreenCapture_attachUpdateWindowToPixelBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCScreenCapture [%s] %s:%d Failed to create array", v2, v3, v4, v5, v6);
}

void VCScreenCapture_attachUpdateWindowToPixelBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCScreenCapture [%s] %s:%d Failed to create dictionary representation", v2, v3, v4, v5, v6);
}

void VCScreenCapture_attachUpdateWindowToPixelBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCScreenCapture [%s] %s:%d Failed to create CFNumber for resolution scale", v2, v3, v4, v5, v6);
}

void VCAudioDucker_Allocate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate audio ducker", v2, v3, v4, v5, v6);
}

void VCAudioDucker_Start_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d audioDucker is nil", v2, v3, v4, v5, v6);
}

void VCAudioDucker_Start_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioUnitInitialize err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Set tuning parameters failed", v2, v3, v4, v5, v6);
}

void VCAudioDucker_Start_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDReleaseHoldTime err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDUnDuckingRampTime err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDHistoryAccumulationTime err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDDuckingRampTime err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDOtherAudioRMSLimit err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDOtherAudioDuckingMinLevel err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDPrimaryDuckingMinLevel err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_11()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDPrimaryDuckingThreshold err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_12()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDOtherAudioDuckingLevel err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_13()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Set properties failed", v2, v3, v4, v5, v6);
}

void VCAudioDucker_Start_cold_14()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioUnitSetProperty kAudioUnitProperty_MaximumFramesPerSlice err=%d", v2, v3, v4, v5);
}

void VCAudioDucker_Start_cold_15()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to start due to failing to get new instance", v2, v3, v4, v5, v6);
}

void VCAudioDucker_Stop_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d audioDucker is nil", v2, v3, v4, v5, v6);
}

void VCAudioDucker_Process_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d processing err=%d", v2, v3, v4, v5);
}

void RTPProcessH263Packet_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "RTPProcessH263Packet";
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH263.c:%d: Invalid length (%d) for H263PHMODEA", v2, *(const char **)v3, (unint64_t)"RTPProcessH263Packet" >> 16, v4, v5);
}

void RTPProcessH263Packet_cold_2(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  uint8_t v6 = "RTPProcessH263Packet";
  __int16 v7 = 1024;
  int v8 = 140;
  __int16 v9 = 1024;
  int v10 = a2;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create block buffer. Status=%d", (uint8_t *)&v3, 0x22u);
}

void RTPProcessH263Packet_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "RTPProcessH263Packet";
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH263.c:%d: Invalid length (%d) for H263PHMODEB", v2, *(const char **)v3, (unint64_t)"RTPProcessH263Packet" >> 16, v4, v5);
}

void VCTimescale_InitializeTimescaleAlgo_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  int v5 = "_VCTimescale_SetupAlgoInterfaces";
  __int16 v6 = 1024;
  int v7 = 74;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to allocate timescale Interface", (uint8_t *)&v2, 0x1Cu);
}

void RTPSendH264Packet_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: data size too big (%d)", v2, v3, v4, v5, v6);
}

void RTPProcessH264FragmentationHeader_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid fragmentation unit length (%d)", v2, v3, v4, v5, v6);
}

void RTPProcessH264FragmentationHeader_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Packet with NALType %d didn't include a decoding order!", v2, v3, v4, v5);
}

void RTPProcessH264FragmentationHeader_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FU-B Decoding order is %hu", v2, v3, v4, v5);
}

void RTPProcessH264FragmentationHeader_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid packet size, does not include DON: unit length (%d)", v2, v3, v4, v5, v6);
}

void RTPProcessH264FragmentationHeader_cold_5()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d STAP-B Decoding order is %hu", v2, v3, v4, v5);
}

void RTPProcessH264FragmentationHeader_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid packet size, does not include DON: unit length (%d)", v2, v3, v4, v5, v6);
}

void _RTPProcessH264FragmentationHeaderStartEndBits_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v2 = 1;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid fragmentation unit length (%d)", v1, 0x28u);
}

void RTPProcessH264Packet_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the default header bytes", v2, v3, v4, v5, v6);
}

void RTPProcessH264Packet_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append the default data", v2, v3, v4, v5, v6);
}

void RTPProcessH264Packet_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append default data header buffer. Status=%d", v2, v3, v4, v5);
}

void _RTPProcessSTAPPacket_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_13();
  uint64_t v2 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid data size of length %zu", v1, 0x26u);
}

void _RTPProcessSTAPPacket_cold_2()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_13();
  uint64_t v3 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid data length for decoding order %zu", v2, 0x26u);
}

void _RTPProcessSTAPPacket_cold_3(uint64_t a1)
{
  LODWORD(v3) = 136315906;
  *(void *)((char *)&v3 + 4) = a1;
  WORD6(v3) = 2080;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v1, v2, " [%s] %s:%d Invalid aggregation unit length (%d) for H264NALU_STAP packet, discarded.\n", (const char *)v3, *((const char **)&v3 + 1), v4, v5);
}

void _RTPProcessSTAPPacket_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the H264NALU_STAP_A header bytes", v2, v3, v4, v5, v6);
}

void _RTPProcessSTAPPacket_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append the H264NALU_STAP data", v2, v3, v4, v5, v6);
}

void _RTPProcessSTAPPacket_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append H264NALU_STAP header buffer. Status=%d", v2, v3, v4, v5);
}

void _RTPProcessSTAPPacket_cold_7()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_13();
  uint64_t v2 = 1;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid data length %zu", v1, 0x26u);
}

void _RTPProcessSTAPPacket_cold_8()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d STAP-B Decoding order is %hu", v2, v3, v4, v5);
}

void _RTPProcessFUPacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid fragmentation unit length (%d)", v2, v3, v4, v5, v6);
}

void _RTPProcessFUPacket_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append the H264NALU_FU data", v2, v3, v4, v5, v6);
}

void _RTPProcessFUPacket_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the H264NALU_FU header bytes", v2, v3, v4, v5, v6);
}

void _RTPProcessFUPacket_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append H264NALU_FU header buffer. Status=%d", v2, v3, v4, v5);
}

void _RTPProcessFUPacket_cold_5()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FU-B Decoding order is %hu", v2, v3, v4, v5);
}

void _VCCannedVideoPacketSource_InjectionThread_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to initialize timing info", v2, v3, v4, v5, v6);
}

void _VCCannedVideoPacketSource_InjectionThread_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read first media packet", v2, v3, v4, v5, v6);
}

void VCCannedVideoPacketSource_RegisterForCannedReplay_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to register canned replay RTP write callbacks. result=%d", v2, *(const char **)v3, (unint64_t)"_VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks" >> 16, v4);
}

void VCCannedVideoPacketSource_RegisterForCannedReplay_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to register canned replay RTCP write callbacks. result=%d", v2, *(const char **)v3, (unint64_t)"_VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks" >> 16, v4);
}

void VCCannedVideoPacketSource_RegisterForCannedReplay_cold_3()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VCCannedVideoPacketSource_RegisterCannedReplayReadCallbacks";
  OUTLINED_FUNCTION_3();
  int v4 = 560;
  __int16 v5 = v0;
  int v6 = -2147418113;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to register canned video packet RTP read callback. result=%d", v2, 0x22u);
}

void VCCannedVideoPacketSource_RegisterForCannedReplay_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received NULL stream", v2, v3, v4, v5, v6);
}

void VCCannedVideoPacketSource_UnregisterForCannedReplay_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received nil packet source context", v2, v3, v4, v5, v6);
}

void VCCannedVideoPacketSource_UnregisterForCannedReplay_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCCannedVideoPacketSource_UnregisterForCannedReplay";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to unregister RTP packet callback. result=%d", v2, *(const char **)v3, (unint64_t)"VCCannedVideoPacketSource_UnregisterForCannedReplay" >> 16, v4);
}

void VCCannedVideoPacketSource_UnregisterForCannedReplay_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCCannedVideoPacketSource_UnregisterForCannedReplay";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to unregister RTCP packet callback. result=%d", v2, *(const char **)v3, (unint64_t)"VCCannedVideoPacketSource_UnregisterForCannedReplay" >> 16, v4);
}

void _VCCannedVideoPacketSource_WriteBytes_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Attempting to write bytes with size 0", v2, v3, v4, v5, v6);
}

void _VCCannedVideoPacketSource_WriteBytes_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create byte data", v2, v3, v4, v5, v6);
}

void _VCCannedVideoPacketSource_WriteBlockBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get block buffer data pointer", v2, v3, v4, v5, v6);
}

void _VCCannedVideoPacketSource_WriteBlockBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create contiguous block buffer", v2, v3, v4, v5, v6);
}

void _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read packet", v2, v3, v4, v5, v6);
}

void _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers_cold_2()
{
  OUTLINED_FUNCTION_12_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Attempting to read canned video packet while in mode=%d", v2, v3, v4, v5);
}

void _VCCannedVideoPacketSource_ReadPacketTypeFromFile_cold_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VCCannedVideoPacketSource_ReadPacketTypeFromFile";
  OUTLINED_FUNCTION_3();
  int v4 = 478;
  __int16 v5 = v0;
  int v6 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Bad packet type: %d", v2, 0x22u);
}

void _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_1()
{
  OUTLINED_FUNCTION_9_1(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d file handle header read error=%@");
}

void _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get block buffer data pointer", v2, v3, v4, v5, v6);
}

void _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCCannedVideoPacketSource_ReadBlockBufferFromFile";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to replace block buffer bytes. Err=%d", v2, *(const char **)v3, (unint64_t)"_VCCannedVideoPacketSource_ReadBlockBufferFromFile" >> 16, v4);
}

void _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCCannedVideoPacketSource_ReadBlockBufferFromFile";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate block buffer. Err=%d", v2, *(const char **)v3, (unint64_t)"_VCCannedVideoPacketSource_ReadBlockBufferFromFile" >> 16, v4);
}

void _VCCannedVideoPacketSource_ReadDataFromFile_cold_1()
{
  OUTLINED_FUNCTION_9_1(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d file handle read error=%@");
}

void _VCStreamIOAudioController_SampleBufferCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCStreamIOAudioController [%s] %s:%d context not included.  Cannot process the sampleBuffer.", v2, v3, v4, v5, v6);
}

void _VCStreamIOAudioController_PullAudioSamples_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCStreamIOAudioController [%s] %s:%d Failed to allocate RTP timestamp attachment", v2, v3, v4, v5, v6);
}

void RTPMapResetMapping_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
}

void RTPMapAddMappingForPayload_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
}

void RTPMapPrintMapping_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
}

void RTPMapGetInternalPayload_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
}

void RTPMapGetExternalPayload_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
}

void _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type=%d to do rate control", v2, v3, v4, v5);
}

void _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state=%d", v2, v3, v4, v5);
}

void _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d bad algorithm state=%d", v2, v3, v4, v5);
}

void _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_4(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  int v5 = "_VCRateControlAlgorithmLayeredContinuousTier_DoRateControlWithBasebandStatistics";
  __int16 v6 = 1024;
  int v7 = 230;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d media controller is required for VCRateControl", (uint8_t *)&v2, 0x1Cu);
}

void RTPCreateHandle_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPCreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Unknown Payload Type(%d)", v2, *(const char **)v3, (unint64_t)"RTPCreateHandle" >> 16, v4, v5);
}

void RTPCreateHandle_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  __error();
  int v4 = 136316162;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: calloc failed(%d)", (uint8_t *)&v4, 0x28u);
}

void RTPCreateHandle_cold_3()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the rtpPacket allocator", v2);
}

void RTPCreateHandle_cold_4()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_3();
  int v4 = 270;
  __int16 v5 = v0;
  int v6 = 270;
  __int16 v7 = v0;
  int v8 = -2147418107;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: CreateHandle failed(%08X)", v2, 0x28u);
}

void RTPCreateHandle_cold_5()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the packet metadata allocator", v2);
}

void RTPCreateHandle_cold_6()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the channel data format allocator", v2);
}

void RTPCreateHandle_cold_7()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the RTP block buffer allocator", v2);
}

void RTPCreateHandle_cold_8()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the block buffer allocator", v2);
}

void RTPCreateHandle_cold_9()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPCreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to create the rtcpPacket allocator (error:%d)", v2, *(const char **)v3, (unint64_t)"RTPCreateHandle" >> 16, v4, v5);
}

void RTPSetTxPayloadList_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPSetTxPayloadList";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: malloc(%zu) failed", v2, *(const char **)v3, (unint64_t)"RTPSetTxPayloadList" >> 16, v4, v5);
}

void RTPSetRxPayloadList_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPSetRxPayloadList";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: malloc(%zu) failed", v2, *(const char **)v3, (unint64_t)"RTPSetRxPayloadList" >> 16, v4, v5);
}

void RTPSetRxPayloadList_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL payloadList", v2, v3, v4, v5, v6);
}

void RTPSetRxPayloadList_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d payloadCount <= 0", v2, v3, v4, v5, v6);
}

void RTPGetInternalPayload_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP handle", v2, v3, v4, v5, v6);
}

void RTPGetExternalPayload_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP handle", v2, v3, v4, v5, v6);
}

void SendRTP_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SendRTP";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Header size is negative: %d", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
}

void SendRTP_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SendRTP";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Data size is negative: %d", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
}

void SendRTP_cold_3()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTP SendRTP direction[%d] dropping packet", v2, v3, v4, v5);
}

uint64_t SendRTP_cold_4(uint64_t a1, uint64_t a2, char a3)
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v4, v5, " [%s] %s:%d Failed to copy data to the RTP buffer", v6, v7, v8, v9, v11);
  return a3 & 1;
}

void SendRTP_cold_5()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to send packet due to oversize dataSizeByte %d", v2, v3, v4, v5);
}

void SendRTP_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not generate media packet metadata", v2, v3, v4, v5, v6);
}

void SendRTP_cold_7()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Cannot add media packet=%p to VCMediaQueue!", v2, v3, v4, v5);
}

void SendRTP_cold_8()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SendRTP";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to copy data bytes. Error=%d!", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
}

void SendRTP_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Cannot alloc media packet from VCMediaQueue!", v2, v3, v4, v5, v6);
}

uint64_t SendRTP_cold_10(uint64_t a1, uint64_t a2, char a3)
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v4, v5, " [%s] %s:%d Unknown packet passing to the VCMediaQueue!", v6, v7, v8, v9, v11);
  return a3 & 1;
}

void SendRTP_cold_11()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SendRTP";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to enqueue packet in media queue. Error=%x", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
}

uint64_t SendRTP_cold_12(uint64_t a1, uint64_t a2, char a3)
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v4, v5, " [%s] %s:%d IDS channel data is not setup correctly!", v6, v7, v8, v9, v11);
  return a3 & 1;
}

void SendRTP_cold_13()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SendRTP";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP encryption failed (%X)", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
}

void SendRTP_cold_14()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SendRTP";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP add authentication tag failed (%X)", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
}

uint64_t SendRTP_cold_15(uint64_t a1, uint64_t a2, char a3)
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v4, v5, " [%s] %s:%d Failed to copy padding bytes to the RTP buffer", v6, v7, v8, v9, v11);
  return a3 & 1;
}

uint64_t SendRTP_cold_16(uint64_t a1, uint64_t a2, char a3)
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v4, v5, " [%s] %s:%d Failed to copy header to the RTP buffer", v6, v7, v8, v9, v11);
  return a3 & 1;
}

uint64_t SendRTP_cold_17(uint64_t a1, uint64_t a2, char a3)
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v4, v5, " [%s] %s:%d Failed to add RTP header extension", v6, v7, v8, v9, v11);
  return a3 & 1;
}

void SendRTP_cold_18()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "SendRTP";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate send buffer", v2);
}

void RTPMediaQueueSecurityCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d srtpContext is invalid", v2, v3, v4, v5, v6);
}

void RTPMediaQueueSecurityCallback_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d payload should not be nil", v2, v3, v4, v5, v6);
}

void RTPMediaQueueSecurityCallback_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d payloadSize should not be nil", v2, v3, v4, v5, v6);
}

void RTPMediaQueueSecurityCallback_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP handle", v2, v3, v4, v5, v6);
}

void RTPMediaQueueSecurityCallback_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid authentication mode detected in security callback", v2, v3, v4, v5, v6);
}

void RTPMediaQueueSecurityCallback_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPMediaQueueSecurityCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP encryption failed (%X)", v2, *(const char **)v3, (unint64_t)"RTPMediaQueueSecurityCallback" >> 16, v4);
}

void RTPMediaQueueSecurityCallback_cold_7()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPMediaQueueSecurityCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP add authentication tag failed (%08X)", v2, *(const char **)v3, (unint64_t)"RTPMediaQueueSecurityCallback" >> 16, v4);
}

void _RTPSendTimestampWithMediaSampleTime_cold_1()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Send Scaling sendTimestampMode=%d is not supported", v2, v3, v4, v5);
}

void _RTPSendTimestampWithMediaSampleTime_cold_2()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected sendTimestampMode=%d", v2, v3, v4, v5);
}

void _RTPGetRTPSocketForMediaQueue_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL rtpInfo", v2, v3, v4, v5, v6);
}

void _RTPGetRTPSocketForMediaQueue_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL rtpSocketForMediaQueue", v2, v3, v4, v5, v6);
}

void RTPTransportResendRTP_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 1971;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Couldn't retrieve media packet from cache for retransmission", v1, 0x1Cu);
}

void RTPTransportResendRTP_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Media packet metadata unavailable", v2, v3, v4, v5, v6);
}

void RTPTransportResendRTP_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
}

void RTPTransportResendRTP_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL data buffer", v2, v3, v4, v5, v6);
}

void RTPTransportResendRTP_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d data length <= 0", v2, v3, v4, v5, v6);
}

void RTPTransportResendRTP_cold_6()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to send packet due to oversize dataSizeByte=%d", v2, v3, v4, v5);
}

void RTPTransportResendRTP_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Cannot alloc media packet from VCMediaQueue!", v2, v3, v4, v5, v6);
}

void RTPTransportResendRTP_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Couldn't add packet to media queue", v2, v3, v4, v5, v6);
}

void RTPTransportResendRTP_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ssrc mismatch in packet retrieved from cache", v2, v3, v4, v5, v6);
}

void RTPTransportResendRTP_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SeqNum mismatch in packet retrieved from cache", v2, v3, v4, v5, v6);
}

void _RTPMediaSampleTimeWithReceiveTimestamp_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v4 = "_RTPMediaSampleTimeWithReceiveTimestamp";
  OUTLINED_FUNCTION_3();
  int v5 = 2201;
  __int16 v6 = v0;
  int v7 = 2;
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v1, v2, " [%s] %s:%d Receive Scaling recvTimestampMode=%d is not supported", v3);
}

void _RTPMediaSampleTimeWithReceiveTimestamp_cold_2()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected recvTimestampMode=%d", v2, v3, v4, v5);
}

void _RTPProcessDecryptionStatusChange_cold_1()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d MEDIANOTIFICATION_DECRYPTION_STATUS callback failed. (%08lX)", v2, v3, v4, v5);
}

void _RTPTransport_ParseMediaPacket_cold_1()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_RTPTransport_ParseMediaPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Drop RTP packet from a unknown source", v2);
}

void _RTPTransport_ParseMediaPacket_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_ParseMediaPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to parse RTP header: %d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ParseMediaPacket" >> 16, v4);
}

void _RTPTransport_ParseMediaPacket_cold_3()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_RTPTransport_PrepareRTPHeader";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: First RTP packet had sequence number 0. Dropping", v2);
}

void _RTPTransport_ParseMediaPacket_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_ExtractPacketData";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to extract packet payload:%d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ExtractPacketData" >> 16, v4);
}

void _RTPTransport_ParseMediaPacket_cold_5()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_ExtractPacketExtension";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to extract packet extension:%d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ExtractPacketExtension" >> 16, v4);
}

void _RTPTransport_ParseMediaPacket_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_ValidateAndDecryptRTPPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP verification failed (%X)", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ValidateAndDecryptRTPPacket" >> 16, v4);
}

void _RTPTransport_ParseMediaPacket_cold_7()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_ValidateAndDecryptRTPPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP decryption failed (%X)", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ValidateAndDecryptRTPPacket" >> 16, v4);
}

void _RTPTransport_ParseMediaPacket_cold_8(uint64_t a1, void **a2)
{
  VCMediaKeyIndex_Description(*a2);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_10_0(&dword_1E1EA4000, v2, v3, " [%s] %s:%d VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex failed, MKI=%s", v4, v5, v6, v7, v8);
}

void _RTPTransport_ParseMediaPacket_cold_9(uint64_t a1, void **a2)
{
  VCMediaKeyIndex_Description(*a2);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_10_0(&dword_1E1EA4000, v2, v3, " [%s] %s:%d _RTPTransport_CopyKeyMaterial failed to get MKI with prefix=%s", v4, v5, v6, v7, v8);
}

void _RTPTransport_ParseMediaPacket_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Key material is missing key index", v2, v3, v4, v5, v6);
}

void _RTPTransport_ParseMediaPacket_cold_11()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_HandleMKIChanged";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSecurityKeyHolder_AssociateKeyIndex failed result=%x", v2, *(const char **)v3, (unint64_t)"_RTPTransport_HandleMKIChanged" >> 16, v4);
}

void _RTPTransport_ParseMediaPacket_cold_12()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTPUpdateKeyMaterialForRTPInfo failed", v2, v3, v4, v5, v6);
}

void _RTPTransport_ParseMediaPacket_cold_13()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_HandleMKIChanged";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP notify new media key failed (%X)", v2, *(const char **)v3, (unint64_t)"_RTPTransport_HandleMKIChanged" >> 16, v4);
}

void _RTPTransport_ParseMediaPacket_cold_14()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d MEDIANOTIFICATION_SRTPKEYUPDATE callback failed. (%08lX)", v2, v3, v4, v5);
}

void _RTPTransport_ParseMediaPacket_cold_15()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d MEDIANOTIFICATION_RTPSEQGAP callback failed with result=%08lX", v2, v3, v4, v5);
}

void _RTPTransport_ParseMediaPacket_cold_16()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d %d packets lost", v2, v3, v4, v5);
}

void _RTPTransport_ParseMediaPacket_cold_17()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  int v4 = "_RTPTransport_ParseMediaPacket";
  OUTLINED_FUNCTION_3();
  int v5 = 2898;
  __int16 v6 = v0;
  int v7 = -2147418097;
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v1, v2, " [%s] %s:%d Stream init failed: %d", v3);
}

void _RTPTransport_ParseMediaPacket_cold_18()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_ParseMediaPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to retrieve data pointer %d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ParseMediaPacket" >> 16, v4);
}

void _RTPTransport_PacketExtensionLength_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Extension length pointer is NULL", v2, v3, v4, v5, v6);
}

void _RTPTransport_PacketExtensionLength_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Overflow while reading packet extension header", v2, v3, v4, v5, v6);
}

void _RTPTransport_PacketExtensionLength_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Overflow while reading packet extension data", v2, v3, v4, v5, v6);
}

void _RTPTransport_PacketExtensionLength_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Extension offset is larger than the packet size", v2, v3, v4, v5, v6);
}

void _RTPRecvWithSocket_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPRecvWithSocket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTP packet parsing failed: %d", v2, *(const char **)v3, (unint64_t)"_RTPRecvWithSocket" >> 16, v4);
}

void RTPGetUplinkReportingStats_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid reportingStats", v2, v3, v4, v5, v6);
}

void RTPGetUplinkReportingStats_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
}

void RTPGetDownlinkReportingStats_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid reportingStats", v2, v3, v4, v5, v6);
}

void RTPGetDownlinkReportingStats_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
}

void _RTPSocketRTPAndBBNoteCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
}

void _RTPSocketRTPAndBBNoteCallback_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPSocketRTPAndBBNoteCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTP error[%x]", v2, *(const char **)v3, (unint64_t)"_RTPSocketRTPAndBBNoteCallback" >> 16, v4);
}

void RTPSetRemoteSSRC_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Remote SSRC is 0", v2, v3, v4, v5, v6);
}

void _RTPSetCellularUniqueTagOnPacketFilters_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL rtpInfo", v2, v3, v4, v5, v6);
}

void _RTPSetCellularUniqueTagOnPacketFilters_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d cellularUniqueTag is 0", v2, v3, v4, v5, v6);
}

void _RTPConfigureVirtualSockets_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPConfigureVirtualSockets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Getsockname for RTCP socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"_RTPConfigureVirtualSockets" >> 16, v4);
}

void _RTPConfigureVirtualSockets_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPConfigureVirtualSockets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Getsockname for RTP socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"_RTPConfigureVirtualSockets" >> 16, v4);
}

void RTPMapPacketMultiplexModeToVTPMode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP packet multiplex mode", v2, v3, v4, v5, v6);
}

void RTPSetSockets_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPSetSockets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Creation of RTP socket from real socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPSetSockets" >> 16, v4);
}

void RTPSetSockets_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPSetSockets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Creation of RTCP socket from real socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPSetSockets" >> 16, v4);
}

void RTPSetNWConnections_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPSetSockets: Invalid nwConnection passed", v2, v3, v4, v5, v6);
}

void RTPSetNWConnections_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPSetNWConnections";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Creation of RTP socket from NWConnection failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPSetNWConnections" >> 16, v4);
}

void RTPSetNWConnections_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPSetNWConnections";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Creation of RTCP socket from NWConnection failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPSetNWConnections" >> 16, v4);
}

void RTPCreateSocketsForIDSInternal_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPCreateSocketsForIDSInternal";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: VTP_SocketWithIDSDescriptor for RTP failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPCreateSocketsForIDSInternal" >> 16, v4, v5);
}

void RTPCreateSocketsForIDSInternal_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPCreateSocketsForIDSInternal";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: VTP_SocketWithIDSDescriptor for RTCP failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPCreateSocketsForIDSInternal" >> 16, v4, v5);
}

void RTPCreateSocketsRetryBind_cold_1()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPCreateSocketsRetryBind: RTP port(%d) must be even", v2, v3, v4, v5);
}

void CreateSocket_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "CreateSocket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"CreateSocket" >> 16, v4, v5);
}

void CreateSocket_cold_2()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "CreateSocket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: set sockopt IP_BOUND_IF failed", v2);
}

void RTPCreateSockets_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPCreateSockets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPCreateSockets" >> 16, v4, v5);
}

void RTPCreateSockets_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPCreateSockets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPCreateSockets" >> 16, v4, v5);
}

void RTPSetOWRD_cold_1()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "RTPSetOWRD";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: RTP Handle invalid", v2);
}

void RTPGetIsIPv6_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL isIPv6", v2, v3, v4, v5, v6);
}

void RTPGetIsIPv6_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPGetIsIPv6";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP handle %d", v2, *(const char **)v3, (unint64_t)"RTPGetIsIPv6" >> 16, 4411);
}

void RTPFlushBaseband_cold_1()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "RTPFlushBaseband";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: CFArrayCreateMutable failed poyload array", v2);
}

void RTPFlushBaseband_cold_2()
{
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  LODWORD(v5) = 0x8000000;
  HIDWORD(v5) = v0;
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: MEDIANOTIFICATION_BBFLUSH callback failed. (%08lX)", 136316162, v3, v4, 4675, v5);
}

void RTPGetAFRCProbeSeqId_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPGetAFRCProbeSeqId";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: RTP extension length(%u) invalid.", v2, *(const char **)v3, (unint64_t)"RTPGetAFRCProbeSeqId" >> 16, v4, v5);
}

void RTPGetAFRCProbeSeqId_cold_2()
{
  int v2 = 136316162;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Bad version(%u) of RTP header extension!", v2, v3, v4, v5, v6);
}

void RTPRegisterPacketCallback_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v3 = 5195;
  __int16 v4 = 2048;
  uint64_t v5 = 0xFFFFFFFFLL;
  __int16 v6 = 2048;
  uint64_t v7 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter rtpHandle[%p] callbackContext[%p]!", v2, 0x30u);
}

void RTPRegisterPacketCallback_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPRegisterPacketCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to checking rtpHandle[%p]", v2, *(const char **)v3, (unint64_t)"RTPRegisterPacketCallback" >> 16, v4);
}

void RTPRegisterPacketCallback_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPRegisterPacketCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPHandle[%p] Failed store the callback", v2, *(const char **)v3, (unint64_t)"RTPRegisterPacketCallback" >> 16, v4);
}

void RTPRegisterPacketCallback_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPRegisterPacketCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPHandle[%p] Packet callback already registered", v2, *(const char **)v3, (unint64_t)"RTPRegisterPacketCallback" >> 16, v4);
}

void _RTPEnsureTransportStreamsActivated_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL rtpInfo", v2, v3, v4, v5, v6);
}

void RTPUnregisterPacketCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPUnregisterPacketCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RTPHandle:%p Packet callback was not registered", v2, *(const char **)v3, (unint64_t)"RTPUnregisterPacketCallback" >> 16, v4);
}

void RTPSetTransportStreams_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL rtpTransportStream", v2, v3, v4, v5, v6);
}

void RTPSetTransportStreams_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL rtcpTransportStream", v2, v3, v4, v5, v6);
}

void RTPSetTransportStreams_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
}

void RTPSetTransportStreams_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Trying to set new transport streams while existing ones are already activated", v2, v3, v4, v5, v6);
}

void _RTPTransportStreamRTPAndBBNoteCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL packetList", v2, v3, v4, v5, v6);
}

void _RTPTransportStreamRTPAndBBNoteCallback_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
}

void RTPClearTransportStreams_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
}

void RTPGetReceiveStatusWithRunLoop_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL rtpHandleList", v2, v3, v4, v5, v6);
}

void RTPGetReceiveStatusWithRunLoop_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL flagList", v2, v3, v4, v5, v6);
}

void RTPGetReceiveStatusWithRunLoop_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "RTPGetReceiveStatusWithRunLoop";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d rtpHandleCount is %d", v2, *(const char **)v3, (unint64_t)"RTPGetReceiveStatusWithRunLoop" >> 16, v4);
}

void RTPGetReceiveStatusWithRunLoop_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
}

void RTPGetReceiveStatusWithRunLoop_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate addedTransportStreams", v2, v3, v4, v5, v6);
}

void _RTPSetReceiveStatusFlags_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL rtpInfoList", v2, v3, v4, v5, v6);
}

void _RTPSetReceiveStatusFlags_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL flagList", v2, v3, v4, v5, v6);
}

void _RTPSetReceiveStatusFlags_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL updatedFlagsList", v2, v3, v4, v5, v6);
}

void _RTPSetReceiveStatusFlags_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPSetReceiveStatusFlags";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d rtpHandleCount is %d", v2, *(const char **)v3, (unint64_t)"_RTPSetReceiveStatusFlags" >> 16, v4);
}

void RTPSetConnectionManager_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL connectionManager", v2, v3, v4, v5, v6);
}

void RTPSetConnectionManager_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
}

void _RTPTransport_ParseBasebandNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error Parsing Baseband Notification", v2, v3, v4, v5, v6);
}

void _RTPTransport_ParseBasebandNotification_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_ParseBasebandNotification";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error processing AFRC Baseband notification %d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ParseBasebandNotification" >> 16, v4);
}

void _RTPTransport_ParseBasebandNotification_cold_3()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received baseband notification with type %d", v2, v3, v4, v5);
}

void _RTPTransport_ParseBasebandNotification_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_RTPTransport_ParseBasebandNotification";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to retrieve data pointer %d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ParseBasebandNotification" >> 16, v4);
}

void _RTPEnsureTransportStreamsDeactivated_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL rtpInfo", v2, v3, v4, v5, v6);
}

void BitrateToQuality_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected Codec Family: %d, asking for variable bitrate change using quality setting", v2, v3, v4, v5);
}

void SoundDec_Create_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: AudioConverterSetProperty failed to set property kAudioConverterPrimeMethod with error %08x", v2, v3, v4, v5, v6);
}

void SoundDec_Create_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: AudioConverterSetProperty failed to set property kAudioCodecPropertyBitRateControlMode with error %08x", v2, v3, v4, v5, v6);
}

void SoundDec_Create_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioCodecPrivatePropertyEnableSAD with error %d", v2, v3, v4, v5);
}

void SoundDec_Create_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioCodecPropertySpeexEncodeQuality with error %d", v2, v3, v4, v5);
}

void SoundDec_Create_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioConverterSampleRateConverterQuality with error %d", v2, v3, v4, v5);
}

void SoundDec_Create_cold_6(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = 136316162;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  uint64_t v7 = "SoundDec_Create";
  __int16 v8 = 1024;
  int v9 = 713;
  __int16 v10 = 1024;
  int v11 = a2;
  __int16 v12 = 2080;
  __int16 v13 = FourccToCStr(a2);
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterNew returned %d '%s'", (uint8_t *)&v4, 0x2Cu);
}

void TranslateASBDToPayloadFormat_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SoundDec didn't understand the asbd sent to it", v2, v3, v4, v5, v6);
}

void SoundDec_AudioConverterInstantiate_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v5 = 136316418;
  uint64_t v6 = a1;
  __int16 v7 = 2080;
  __int16 v8 = "SoundDec_AudioConverterInstantiate";
  __int16 v9 = 1024;
  int v10 = 1883;
  __int16 v11 = 2080;
  __int16 v12 = FourccToCStr(1970103906);
  __int16 v13 = 1024;
  int v14 = a2;
  __int16 v15 = 1024;
  int v16 = a2;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioConverterPropertyUseMessengerForBundleData=%s with error=%d (0x%x)", (uint8_t *)&v5, 0x32u);
}

void _SoundDec_ConfigureRamStadSRC_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioConverterSampleRateConverterQuality with error=%d", v2, v3, v4, v5);
}

void _SoundDec_ConfigureRamStadSRC_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioConverterSampleRateConverterComplexity with error=%d", v2, v3, v4, v5);
}

void DecodeNilPacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterFillComplexBuffer on lost packet returned %d", v2, v3, v4, v5);
}

void _SoundDec_HandleCodecModeRequest_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to stop AMR CMR", v2, v3, v4, v5, v6);
}

void _SoundDec_HandleCodecModeRequest_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set pending AMR CMR", v2, v3, v4, v5, v6);
}

void _SoundDec_HandleCodecModeRequest_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set pending EVS CMRData", v2, v3, v4, v5, v6);
}

void _SoundDec_HandleCodecModeRequest_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioCodecPrivatePropertyCMR for EVS with error=%d", v2, v3, v4, v5);
}

void _SoundDec_SetAMRCMRInternal_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioCodecPrivatePropertyCMR for AMR with error=%d", v2, v3, v4, v5);
}

void SoundDec_SetDTX_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyEnableSAD with error %08x", v2, v3, v4, v5);
}

void SoundDec_GetOpusDecodeFECStatus_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterGetProperty(kAudioCodecPrivatePropertyFECStatus) failed error=%d", v2, v3, v4, v5);
}

void SoundDec_SetEVSAudioCodecBandwidth_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioConverterSetProperty(kAudioCodecPrivatePropertyBandwidth) failed error=%d", v2, v3, v4, v5);
}

void _VCVideoPlayer_ProcessAlarmForDisplay_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  uint8_t v6 = "_VCVideoPlayer_ProcessAlarmForDisplay";
  __int16 v7 = 1024;
  int v8 = 605;
  __int16 v9 = 2048;
  uint64_t v10 = a2;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] trying to process display alarm when it's not allowed!", (uint8_t *)&v3, 0x26u);
}

void SummerCreateHandle_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  __error();
  int v6 = 136316162;
  uint64_t v7 = a1;
  __int16 v8 = 2080;
  OUTLINED_FUNCTION_8();
  int v9 = 265;
  __int16 v10 = v4;
  int v11 = 265;
  __int16 v12 = v4;
  int v13 = v5;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/Util.c:%d: calloc failed(%d)", (uint8_t *)&v6, 0x28u);
}

void SummerCreateHandle_cold_2()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 279;
  __int16 v4 = v0;
  int v5 = 279;
  __int16 v6 = v0;
  int v7 = -2146238459;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/Util.c:%d: CreateHandle failed(%08X)", v2, 0x28u);
}

void HasMulticore_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  int v5 = "HasMulticore";
  __int16 v6 = 1024;
  int v7 = 614;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d sysctlbyname on hw.activecpu failed", (uint8_t *)&v2, 0x1Cu);
}

void ReadFirstMBAndSliceType_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionData failed. status=%d", v2, v3, v4, v5);
}

void ReadFirstMBAndSliceType_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to parse header, bufferSize=%d is smaller than 12 bytes", v2, v3, v4, v5);
}

void hwrandom_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SecRandomCopyBytes failure result:%d", v2, v3, v4, v5);
}

void hwrandom16_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SecRandomCopyBytes failure result:%d", v2, v3, v4, v5);
}

void ReadFrameSliceHeader_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionData failed. status=%d", v2, v3, v4, v5);
}

void RetrieveMBSliceTypeFromFrameInfoDict_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d TranslateVCPSliceType unexpected type: %d", v2, v3, v4, v5);
}

void VCUtil_AuditTokenForCurrentProcess_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to fetch audit_token_t, result=%d", v2, v3, v4, v5);
}

void VCUtil_AuditTokenForCurrentProcess_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d task=%u is NOT valid", v2, v3, v4, v5);
}

void _VCUtil_GenerateTailspin_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  LODWORD(v6) = 1607;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v1, v2, " [%s] %s:%d ##### Attempting tailspin to be written to file \"%s\"", v3, v4, v5, v6);
}

void _VCUtil_GenerateStackshot_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  LODWORD(v6) = 1622;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v1, v2, " [%s] %s:%d ##### Generating stackshot for reason=%s", v3, v4, v5, v6);
}

void VCNACKConsumer_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_Create_cold_3()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_5_7();
  *(void *)&void v3[6] = "VCNACKConsumer_Create";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKConsumer_Create[%p] Failed to create summer handle", v2, *(const char **)v3, (unint64_t)"VCNACKConsumer_Create" >> 16, v4);
}

void VCNACKConsumer_Create_cold_4()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_5_7();
  *(void *)&void v3[6] = "VCNACKConsumer_Create";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKConsumer_Create[%p] Failed to create summer handle", v2, *(const char **)v3, (unint64_t)"VCNACKConsumer_Create" >> 16, v4);
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL nackConsumer", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL nackInfo", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL retransmissionRequestInfo", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Cannot retransmit - retransmission bitrate exceeded allotted quota", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_5(uint64_t a1, int *a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  int v7 = "VCNACKConsumer_GetRetransmissionRequestInfoFromNACK";
  __int16 v8 = 1024;
  int v9 = 233;
  __int16 v10 = 1024;
  int v11 = v3;
  _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Retransmission packet count exceeded allotted budget. retransmissionBudget=%d", (uint8_t *)&v4, 0x22u);
}

void _VCNACKConsumer_CheckBitrateLimits_cold_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v2[0] = 136315906;
  OUTLINED_FUNCTION_5_7();
  int v3 = "_VCNACKConsumer_CheckBitrateLimits";
  OUTLINED_FUNCTION_3();
  int v4 = 291;
  __int16 v5 = 2048;
  uint64_t v6 = v0;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Use cached canSendNACK, timeSinceLastCheck=%f", (uint8_t *)v2, 0x26u);
}

void _VCNACKConsumer_CheckBitrateLimits_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get bitrate", v2, v3, v4, v5, v6);
}

void _VCNACKConsumer_CheckBitrateLimits_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKConsumer[%p] Failed to get media packet count, err=%d", v2, v3, v4, v5, v6);
}

void _VCNACKConsumer_GetBitrate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute summer bitrate for retransmitted bytes", v2, v3, v4, v5, v6);
}

void _VCNACKConsumer_GetBitrate_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute summer bitrate for media bytes", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_UpdateRetransmissionStatus_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL nackConsumer", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_UpdateRetransmissionStatus_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKConsumer[%p] Failed to add media packet length to retransmitted bytes summer, err=%d", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_UpdateTransmissionStatus_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL nackConsumer", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_UpdateTransmissionStatus_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKConsumer[%p] Failed to add media packet length to media bytes summer, err=%d", v2, v3, v4, v5, v6);
}

void VCNACKConsumer_UpdatePacketCacheStatus_cold_1()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_5_7();
  *(void *)&void v3[6] = "VCNACKConsumer_UpdatePacketCacheStatus";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NACKConsumer[%p] NULL SSRC context", v2, *(const char **)v3, (unint64_t)"VCNACKConsumer_UpdatePacketCacheStatus" >> 16, v4);
}

void FECUtil_SetupFECHeader_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid FEC Header Version: %d", v2, v3, v4, v5);
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to unpack legacy parity sub header to buffer.", v2, v3, v4, v5, v6);
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_FECHeader_UnpackV0ParitySubHeaderFromBuffer";
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/FECUtil.c:%d: Bad FEC header (%d)!", v2, *(const char **)v3, (unint64_t)"_FECHeader_UnpackV0ParitySubHeaderFromBuffer" >> 16, 195, 0x4000000);
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_5()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  uint64_t v3 = "_FECHeader_UnpackV0ParitySubHeaderFromBuffer";
  __int16 v4 = 1024;
  int v5 = 211;
  __int16 v6 = 1024;
  int v7 = v0;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Unpack legacy parity subheader wNumPkt=%d", v2, 0x22u);
}

void _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to unpack parity sub header to buffer.", v2, v3, v4, v5, v6);
}

void _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid number of symbols!", v2, v3, v4, v5, v6);
}

void _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
}

void _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
}

void FECHeader_UnpackHeaderFromBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to unpack FEC header to buffer.", v2, v3, v4, v5, v6);
}

void FECHeader_UnpackHeaderFromBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
}

void FECHeader_UnpackHeaderFromBuffer_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported FEC Header Version: %d", v2, v3, v4, v5);
}

void _FECHeader_PackV0ParitySubHeaderToBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to pack legacy parity sub header to buffer.", v2, v3, v4, v5, v6);
}

void _FECHeader_PackV0ParitySubHeaderToBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
}

void _FECHeader_PackV0ParitySubHeaderToBuffer_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
}

void _FECHeader_PackV1ParitySubHeaderToBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to pack parity sub header to buffer.", v2, v3, v4, v5, v6);
}

void _FECHeader_PackV1ParitySubHeaderToBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
}

void _FECHeader_PackV1ParitySubHeaderToBuffer_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
}

void FECHeader_PackHeaderToBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to pack FEC header to buffer.", v2, v3, v4, v5, v6);
}

void FECHeader_PackHeaderToBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid FEC Header Version: %d", v2, v3, v4, v5);
}

void FECUtil_GetRealNumParity_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/FECUtil.c:%d: WRONG, cannot have %d packets per group", v2, v3, v4, v5, v6);
}

void FECUtil_GetRealNumParity_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/FECUtil.c:%d: WRONG, cannot have %d packets per group", v2, v3, v4, v5, v6);
}

void FECUtil_GetRealNumParity_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/FECUtil.c:%d: WRONG, cannot have %d packets per group", v2, v3, v4, v5, v6);
}

void FECUtil_GetExpectedParityPacketCount_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Expected parity packet count is only supported with FEC Header V1.", v2, v3, v4, v5, v6);
}

void FECUtil_UpdateParitySequenceNumberHistory_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parity sequence number arguments.", v2, v3, v4, v5, v6);
}

void FECUtil_ConvertNumberOfSymbolsToPackets_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Number of symbols per packet must be non-zero.", v2, v3, v4, v5, v6);
}

void FECUtil_PackFrameLoss_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameter. Field cannot be null.", v2, v3, v4, v5, v6);
}

void FECUtil_UnpackFrameLoss_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameters. Size and loss cannot be null.", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d historyBuffer nil", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d frame is NULL", v2, v3, v4, v5, v6);
}

void VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for timestamp=%u", v2, v3, v4, 160);
}

void VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_4()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d timestamp %d exists already, enqueue failed", v2, v3, v4, 161);
}

void VCMediaRecorderHistoryBuffer_DequeueOneFrame_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  OUTLINED_FUNCTION_8();
  int v5 = 148;
  __int16 v6 = v1;
  int v7 = "_Bool VCMediaRecorderHistoryBuffer_DequeueOneFrame(VCMediaRecorderHistoryBuffer *const)";
  _os_log_debug_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCMediaRecorderHistoryBuffer %s the old frame does not in buffer, something is wrong", v3, 0x26u);
}

void _VCCarrierBundle_GetValueforKeyHierarchy_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 50;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Passed an invalid value", (uint8_t *)&v2, 0x1Cu);
}

void _VCCarrierBundle_GetValueforKeyHierarchy_cold_2(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 53;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to initialize CoreTelephonyClient", (uint8_t *)&v2, 0x1Cu);
}

void _VCCarrierBundle_GetValueforKeyHierarchy_cold_3(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  int v7 = "_VCCarrierBundle_GetValueforKeyHierarchy";
  __int16 v8 = 1024;
  int v9 = 57;
  __int16 v10 = 2112;
  uint64_t v11 = v3;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to initialize CTXPCServiceSubscriptionContext, error=%@", (uint8_t *)&v4, 0x26u);
}

void RTPUnpackGenericDataPacket_cold_1(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v4 = 136316162;
  uint64_t v5 = a1;
  OUTLINED_FUNCTION_0();
  int v6 = 84;
  __int16 v7 = v1;
  int v8 = 8;
  __int16 v9 = 2048;
  uint64_t v10 = v2;
  _os_log_error_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_ERROR, " [%s] %s:%d Data header size (%d) is larger than the received packet size (%zu)", (uint8_t *)&v4, 0x2Cu);
}

void RTPUnpackGenericDataPacket_cold_2(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 91;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to append the uncompressed video data", (uint8_t *)&v2, 0x1Cu);
}

void _VideoPacketBuffer_IsFrameComplete_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Error! Missing end of frame", v2, v3, v4, v5, v6);
}

void _VideoPacketBuffer_IsFrameComplete_cold_2()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Error! Missing inital frames, seq:%d", v2, v3, v4, v5);
}

void _VideoPacketBuffer_IsFrameComplete_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d END", v2, v3, v4, v5, v6);
}

void _VideoPacketBuffer_IsFrameComplete_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d BEGIN", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_Create_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate memory pool", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
}

void VideoPacketBuffer_Create_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate memory pool allocator", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
}

void VideoPacketBuffer_Create_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create figMemoryPool", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
}

void VideoPacketBuffer_Create_cold_4()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VideoPacketBuffer_Create";
  __int16 v3 = 1024;
  OUTLINED_FUNCTION_2_0();
  _os_log_fault_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_FAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create figMemoryPool", v1, 0x26u);
}

void VideoPacketBuffer_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Failed to get allocator from figMemoryPool", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_Create_cold_6()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_10_2();
  _os_log_fault_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_FAULT, "VideoPacketBuffer [%s] %s:%d Failed to get allocator from figMemoryPool", v1, 0x1Cu);
}

void VideoPacketBuffer_Create_cold_7()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate slice header allocator", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
}

void VideoPacketBuffer_Create_cold_8()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate sample buffer allocator", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
}

void VideoPacketBuffer_Create_cold_9()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate block buffer header allocator", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
}

void VideoPacketBuffer_Destroy_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_NeedRefreshFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_GetCachedBurstLossStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid arguments to get frame loss stats.", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_ResetBurstLossStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid arguments for resetting max burst loss stats.", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid videoPacketBuffer for updating max frame burst loss.", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid frameStats for updating max frame burst loss for VideoPacketBuffer=%p", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics" >> 16, v4);
}

void VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Received more parity packets than expected.", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Received more video packets than expected.", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid arguments for updating max group burst loss.", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Lost more video symbols than expected.", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_GetStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_ResetStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_AddPacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_AddPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] pFECHeader is NULL", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_AddPacket" >> 16, v4);
}

void VideoPacketBuffer_AddPacket_cold_2()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d invalidating fecHeader for frame with frameSequenceNumber:%d", v2, v3, v4, v5);
}

void VideoPacketBuffer_AddPacket_cold_3()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d [Media Priority] Received video priority=%u", v2, v3, v4, v5);
}

void _VideoPacketBuffer_StartTrackingEvictedFrameStats_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d Received NULL frame", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_ScheduleFutureFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_ScheduleFutureFrame_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_ScheduleFutureFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] schedule pointer is null", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_ScheduleFutureFrame" >> 16, v4);
}

void VideoPacketBuffer_ScheduleFutureFrame_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_ScheduleFutureFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Scheduling FEC Protected Frame after successful recovery (when next frame come)", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_ScheduleFutureFrame" >> 16, v4);
}

void _VideoPacketBuffer_ScheduleSingleFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoPacketBuffer_ScheduleSingleFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Invalid parameter scheduledFrameTimestamp!", v2, *(const char **)v3, (unint64_t)"_VideoPacketBuffer_ScheduleSingleFrame" >> 16, v4);
}

void _VideoPacketBuffer_ScheduleSingleFrame_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoPacketBuffer_ScheduleSingleFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Scheduling FEC Protected Frame after successful recovery", v2, *(const char **)v3, (unint64_t)"_VideoPacketBuffer_ScheduleSingleFrame" >> 16, v4);
}

void _VideoPacketBuffer_ScheduleSingleFrame_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoPacketBuffer_ScheduleSingleFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Protected Frame unsuccessful recovery", v2, *(const char **)v3, (unint64_t)"_VideoPacketBuffer_ScheduleSingleFrame" >> 16, v4);
}

void _VideoPacketBuffer_ScheduleSingleFrame_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoPacketBuffer_ScheduleSingleFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Protected Frame begin recovery", v2, *(const char **)v3, (unint64_t)"_VideoPacketBuffer_ScheduleSingleFrame" >> 16, v4);
}

void VideoPacketBuffer_SchedulePastIncompleteFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_SchedulePastIncompleteFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] schedule pointer is null", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_SchedulePastIncompleteFrame" >> 16, v4);
}

void VideoPacketBuffer_GetFrameDecodingOrder_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_GetFrameDecodingOrder_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoPacketBuffer_GetFrameDecodingOrder";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Decoding order not supported!", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_GetFrameDecodingOrder" >> 16, v4);
}

void VideoPacketBuffer_GetFrameStreamIDs_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_FirstIDRReceived_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_SetFrameSize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoPacketBuffer_GetNextFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void _VCVideoPacketBuffer_AssembleFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCVideoPacketBuffer_AssembleFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Error while processing packets", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_AssembleFrame" >> 16, v4);
}

void _VCVideoPacketBuffer_AssembleFrame_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCVideoPacketBuffer_ProcessRTPPackets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d packet[%p] bufferData.data is NULL", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_ProcessRTPPackets" >> 16, v4);
}

void _VCVideoPacketBuffer_AssembleFrame_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCVideoPacketBuffer_ParseCompletedPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to get the slice length", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_ParseCompletedPacket" >> 16, v4);
}

void _VCVideoPacketBuffer_AssembleFrame_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCVideoPacketBuffer_ParseCompletedPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to get data pointer", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_ParseCompletedPacket" >> 16, v4);
}

void _VCVideoPacketBuffer_AssembleFrame_cold_5()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VCVideoPacketBuffer_AssembleFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  __int16 v4 = v0;
  uint64_t v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to get valid decrypted buffer length=%zu", v2, 0x30u);
}

void _VCVideoPacketBuffer_AssembleFrame_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCVideoPacketBuffer_StripFakeLargeFramePadding";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to truncate the buffer", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_StripFakeLargeFramePadding" >> 16, v4);
}

void _VCVideoPacketBuffer_AssembleFrame_cold_7()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCVideoPacketBuffer_StripFakeLargeFramePadding";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to retrieve magic number and length", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_StripFakeLargeFramePadding" >> 16, v4);
}

void VideoPacketBuffer_SetRoundTripTime_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
}

void VideoDecoder_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to init VideoDecoder with NULL config", v2, v3, v4, v5, v6);
}

void VideoDecoder_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to init VideoDecoder with NULL frame callback", v2, v3, v4, v5, v6);
}

void VideoDecoder_NewFormat_InitDecoder_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 540;
  __int16 v4 = v0;
  int v5 = 540;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: Can't allocate imageDescDataBE", v2, 0x22u);
}

void VideoDecoder_NewFormat_InitDecoder_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: Can't recreate avcC from SPS/PPS %d", v2, v3, v4, v5, v6);
}

void VideoDecoder_NewFormat_InitDecoder_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCPDecompressionSessionCreate: error=%d", v2, v3, v4, 714);
}

void VideoDecoder_NewFormat_InitDecoder_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: ReadCodecConfigParams: error: %X", v2, v3, v4, v5, v6);
}

void VideoDecoder_NewFormat_InitDecoder_cold_5(uint64_t a1)
{
  LODWORD(v4) = 136316162;
  *(void *)((char *)&v4 + 4) = a1;
  WORD6(v4) = 2080;
  OUTLINED_FUNCTION_8();
  LOWORD(v6) = 0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v2, v3, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: FigVideoFormatDescriptionCreate: error: %X", (const char *)v4, *((const char **)&v4 + 1), v5, 384, v6);
}

void VideoDecoder_NewFormat_InitDecoder_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: ReadCodecConfigParams: error: %X", v2, v3, v4, v5, v6);
}

void VideoDecoder_NewFormat_InitDecoder_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: FigVideoFormatDescriptionCreate: error: %d", v2, v3, v4, v5, v6);
}

void VideoDecoder_NewFormat_InitDecoder_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionData: error: %d ", v2, v3, v4, v5, v6);
}

void VideoDecoder_VTDecompressionCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoDecoder is NULL", v2, v3, v4, v5, v6);
}

void VideoDecoder_VTDecompressionCallback_cold_2()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_13_0();
  __int16 v5 = 2080;
  uint8_t v6 = "VideoDecoder_VTDecompressionCallback";
  __int16 v7 = 1024;
  int v8 = 144;
  __int16 v9 = 1024;
  int v10 = v0;
  __int16 v11 = 1024;
  int v12 = v1;
  __int16 v13 = 1024;
  int v14 = v2;
  _os_log_error_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCPDecompressionSession Error: Decoder returned a NULL frame for stream %d, showFrame %d, RTPTimestamp=%u", v4, 0x2Eu);
}

void VideoDecoder_VTDecompressionCallback_cold_3()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_13_0();
  __int16 v6 = 2080;
  __int16 v7 = "VideoDecoder_VTDecompressionCallback";
  __int16 v8 = 1024;
  int v9 = 149;
  __int16 v10 = 1024;
  int v11 = v0;
  __int16 v12 = 1024;
  int v13 = v1;
  __int16 v14 = 2048;
  uint64_t v15 = v2;
  __int16 v16 = 2048;
  uint64_t v17 = v3;
  _os_log_error_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCPDecompressionSession Error: Decoder returned a NULL frame with showFrame %d, RTPTimestamp=%u, decoding order %llu, tileID %llu", v5, 0x3Cu);
}

void VideoDecoder_VTDecompressionCallback_cold_4()
{
  OUTLINED_FUNCTION_10_3(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_13_0();
  __int16 v4 = 2080;
  __int16 v5 = "VideoDecoder_VTDecompressionCallback";
  __int16 v6 = 1024;
  int v7 = 141;
  __int16 v8 = 1024;
  int v9 = v0;
  __int16 v10 = 1024;
  int v11 = v1;
  __int16 v12 = 1024;
  OUTLINED_FUNCTION_8_4();
  _os_log_debug_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Decoder returned frame with RTPTimestamp=%u, showFrame %d, streamID %d, decoding order %llu, tileID %llu", v3, 0x42u);
}

void VideoDecoder_DecodeFrame_cold_1()
{
  OUTLINED_FUNCTION_10_3(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_13_0();
  __int16 v6 = 2080;
  int v7 = "VideoDecoder_DecodeFrame";
  __int16 v8 = 1024;
  int v9 = 886;
  __int16 v10 = 1024;
  int v11 = v0;
  __int16 v12 = 1024;
  int v13 = v1;
  __int16 v14 = 1024;
  OUTLINED_FUNCTION_8_4();
  __int16 v15 = v2;
  int v16 = v3;
  _os_log_debug_impl(&dword_1E1EA4000, v4, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Decode frame with RTPTimestamp=%u, showFrame %d, streamID %d, tileID %llu, decoding order %llu, canStopVideoStall=%d", v5, 0x48u);
}

void VideoDecoder_IsLastSubframe_cold_1()
{
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d out parameter isLastSubframe is NULL. Unable to determine last subframe for tileIndex %u.", v2, v3, v4, v5);
}

void VideoDecoder_IsLastSubframe_cold_2()
{
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d BlockBuffer is NULL. Unable to determine last subframe for tileIndex %u.", v2, v3, v4, v5);
}

void VideoDecoder_IsLastSubframe_cold_3()
{
  OUTLINED_FUNCTION_5_8();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Decoder not yet initialized. Unable to determine last subframe for tileIndex %u.", v2, v3, v4, v5);
}

void VCAudioDecoderList_SetMagicCookieForPayload_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioDecoder is NULL", v2, v3, v4, v5, v6);
}

void VCAudioDecoderList_GetEVSHeaderFormat_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid decoder format", v2, v3, v4, v5, v6);
}

void VCAudioDecoderList_Setup_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 85;
  __int16 v4 = 2048;
  uint64_t v5 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to allocate payload structure for audio receiver (%p).", v2, 0x26u);
}

void VCAudioDecoderList_GetSpeechCodecBundleData_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioDecoder is NULL", v2, v3, v4, v5, v6);
}

void VCAudioDecoderList_GetSpeechCodecBundleData_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Asking SpeechCodecBundleData for a invalid bundle data for payload type: %d", v2, v3, v4, 190);
}

void VCAudioDecoderList_GetSpeechCodecBundleData_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d unable to read bundle data[%d]", v2, v3, v4, 202);
}

void VCAudioDecoderList_IsDTXFrame_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter bitRate=%p", v1, 0x26u);
}

void VCAudioDecoderList_IsDTXFrame_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter isSID=%p", v1, 0x26u);
}

void _VCConnectionLegacy_IsOnSameInterfacesWithConnection_cold_1(uint64_t a1, char a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  uint8_t v6 = "_VCConnectionLegacy_IsOnSameInterfacesWithConnection";
  __int16 v7 = 1024;
  int v8 = 229;
  __int16 v9 = 1024;
  int v10 = a2 & 1;
  _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: %{BOOL}d", (uint8_t *)&v3, 0x22u);
}

void _VCConnectionLegacy_IsOnSameInterfacesWithConnection_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: NO", v2, v3, v4, v5, v6);
}

void VCConnectionLegacy_IsRemoteIPPort_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCConnection: isRemoteIPPort: NO", v2, v3, v4, v5, v6);
}

void VCConnectionLegacy_IsRemoteIPPort_cold_2(uint64_t a1)
{
  *(void *)((char *)&v7 + 4) = a1;
  OUTLINED_FUNCTION_4_5();
  LODWORD(v9) = 186;
  if (!v6) {
    __int16 v3 = v4;
  }
  WORD2(v9) = v5;
  HIWORD(v9) = v3;
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v1, v2, " [%s] %s:%d VCConnection: isRemoteIPPort: %s", (const char *)v7, *((const char **)&v7 + 1), v8, v9);
}

void _VideoReceiver_DecoderCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver is null", v2, v3, v4, v5, v6);
}

void _VideoReceiver_DecoderCallback_cold_2()
{
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_9_3();
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x38u);
}

void _VideoReceiver_EnqueueDecodedFrameForDisplay_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] stopping", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_EnqueueDecodedFrameForDisplay" >> 16, v4);
}

void _VideoReceiver_CreateReportingEventDictionary_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create reporting event dictionary", v2, v3, v4, v5, v6);
}

void _VideoReceiver_DecryptFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_DecryptFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VCSFrameCryptorH264_Decrypt failed. result=%x", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_DecryptFrame" >> 16, 3020);
}

void VideoReceiver_SetTargetStreamID_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoReceiver_SetTargetStreamID";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Attempting to switch to a stream that does not exist", v2, *(const char **)v3, (unint64_t)"VideoReceiver_SetTargetStreamID" >> 16, v4);
}

void _VideoReceiver_GetVPBStats_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Received NULL videoReceiver", v2, v3, v4, v5, v6);
}

void _VideoReceiver_GetVPBStats_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Received NULL VPB Stats", v2, v3, v4, v5, v6);
}

void _VideoReceiver_GetVPBStats_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Received NULL VPB Stats", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create VideoPlayer", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create VideoReceiver handle", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create rtcpSendQueue", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create rtcpMemoryPool", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_5()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoReceiver_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to create nack generator", v2, *(const char **)v3, (unint64_t)"VideoReceiver_CreateHandle" >> 16, v4);
}

void VideoReceiver_CreateHandle_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to allocate sample buffer allocator", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to allocate the format description allocator", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create decodedFrameAllocator", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create numberPropertyAllocator", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create blockBufferHeaderAllocator", v2, v3, v4, v5, v6);
}

void VideoReceiver_CreateHandle_cold_11()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoReceiver_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] failed to open in_frame", v2, *(const char **)v3, (unint64_t)"VideoReceiver_CreateHandle" >> 16, v4);
}

void VideoReceiver_CreateHandle_cold_12()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoReceiver_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] failed to open received_rtp_pkts", v2, *(const char **)v3, (unint64_t)"VideoReceiver_CreateHandle" >> 16, v4);
}

void VideoReceiver_CreateHandle_cold_13()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoReceiver_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] failed to open in_pkt", v2, *(const char **)v3, (unint64_t)"VideoReceiver_CreateHandle" >> 16, v4);
}

void _VideoReceiver_NoVideoDisplayedTimeoutCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Received no video playback callback with NULL context", v2, v3, v4, v5, v6);
}

void _VideoReceiver_NoVideoDisplayedTimeoutCallback_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to check in video receiver handle", v2, v3, v4, v5, v6);
}

void VideoReceiver_DisplayLinkTick_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
}

void _VideoReceiver_CallAlarms_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
}

void VideoReceiver_GetBitrate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for decoder media bytes", v2, v3, v4, v5, v6);
}

void VideoReceiver_GetBitrate_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for media bytes", v2, v3, v4, v5, v6);
}

void VideoReceiver_GetBitrate_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for metadata bytes", v2, v3, v4, v5, v6);
}

void VideoReceiver_GetBitrate_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for FEC bytes", v2, v3, v4, v5, v6);
}

void VideoReceiver_GetBitrate_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for total bytes", v2, v3, v4, v5, v6);
}

void VideoReceiver_GetShowFrameRTPTimestamp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
}

void VideoReceiver_CellTechChanged_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
}

void VideoReceiver_SetSynchronizer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
}

void VideoReceiver_SetExternalOutputLatency_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
}

void VideoReceiver_SetDeferredAssemblyEnabled_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
}

void VideoReceiver_SetLooseAVSyncEnabled_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
}

void _VideoReceiver_ShowFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d decodedFrame is null", v2, v3, v4, v5, v6);
}

void _VideoReceiver_VideoAlarmCommon_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x22u);
}

void _VideoReceiver_VideoAlarmCommon_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_VideoAlarmCommon";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] stopping", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_VideoAlarmCommon" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_DequeueAndDecode";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Video queue is empty", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_DequeueAndDecode" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_DequeueAndDecode";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] _VideoReceiver_CreateSampleBufferForDecode failed!", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_DequeueAndDecode" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] CMSampleBufferCreate failed", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_CreateCompressedVideoFrameForDecode" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  LODWORD(v5) = 1124;
  WORD2(v5) = 2048;
  HIWORD(v5) = v0;
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to create decode sample buffer attachements. result=%x", v2, v3, v4, v5, v0 >> 16);
}

void _VideoReceiver_DequeueAndDecode_cold_5()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate priority attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate RTP timestamp attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_7()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate sub frame ID attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_8()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate tile index attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_9()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate tile order attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_10()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x2Cu);
}

void _VideoReceiver_DequeueAndDecode_cold_11()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_CreateSampleBufferForUncompressedFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to create the sample buffer", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_CreateSampleBufferForUncompressedFrame" >> 16, v4);
}

void _VideoReceiver_DequeueAndDecode_cold_12()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_CreateSampleBufferForUncompressedFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to create format descriptor", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_CreateSampleBufferForUncompressedFrame" >> 16, v4);
}

void VideoReceiver_DumpRecvSPSPPS_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoReceiver_DumpRecvSPSPPS";
  OUTLINED_FUNCTION_3();
  LODWORD(v4) = 0x8000000;
  HIDWORD(v4) = v0;
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoReceiver.c:%d: VideoReceiver[%p] Can't extract avcC from format description", v2, *(const char **)v3, (unint64_t)"VideoReceiver_DumpRecvSPSPPS" >> 16, 750, v4);
}

void _VideoReceiver_SendRTCPResiliencyInfo_cold_1()
{
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_9_3();
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x34u);
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Could not retrieve base stream", v2, v3, v4, v5, v6);
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoPacketBuffer pointer is null, first packet not received on the base stream", v2, v3, v4, v5, v6);
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_UpdateWRMVideoPacketMetrics";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Uninitialized wrmInfo: cannot update WRM video packet metrics!", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_UpdateWRMVideoPacketMetrics" >> 16, v4);
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_UpdateWRMVideoPacketMetrics";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unsupported FEC header version: cannot update WRM video packet metrics!", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_UpdateWRMVideoPacketMetrics" >> 16, v4);
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_5()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoReceiver_ProcessProbingSequence";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] statisticsCollector is invalid", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_ProcessProbingSequence" >> 16, v4);
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Failed to extract cameraStatusBits from Standard Rtp header extension", v2, v3, v4, v5, v6);
}

void _VideoReceiver_HandleStreamSwitch_cold_1()
{
  OUTLINED_FUNCTION_3_3();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x44u);
}

void _VideoReceiver_EnqueueFailedFrameToJitterBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver is null", v2, v3, v4, v5, v6);
}

void _VideoReceiver_EnqueueFrameToJitterBuffer_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_VideoReceiver_EnqueueFrameToJitterBuffer";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VideoReceiver [%s] %s:%d Attempting to enqueue a frame with timestamp %d that has frameArrivalTime not set", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_EnqueueFrameToJitterBuffer" >> 16, 2209);
}

void VCAudioIssueDetectorUtil_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate audio issue detector handle", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetectorUtil_Create_cold_2()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v4 = "VCAudioIssueDetectorUtil_Create";
  OUTLINED_FUNCTION_3();
  int v5 = 1516;
  __int16 v6 = v0;
  int v7 = v1;
  _os_log_debug_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Audio issue detector created for direction=%d", v3, 0x22u);
}

void VCAudioIssueDetectorUtil_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate audio issue detector queue", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetectorUtil_UpdateRATType_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetectorUtil_ProcessCellularNetworkNotification_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetectorUtil_ProcessCellularNetworkNotification_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameters", v2, v3, v4, v5, v6);
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioIssueDetectorUtil_StateMachine";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector [%p] state is invalid", v2, *(const char **)v3, (unint64_t)"_VCAudioIssueDetectorUtil_StateMachine" >> 16, v4);
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_2()
{
  OUTLINED_FUNCTION_10_4(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected event in init state for direction=%d", v2, v3, v4, v5);
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_3()
{
  OUTLINED_FUNCTION_10_4(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected event in idle state for direction=%d", v2, v3, v4, v5);
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_4()
{
  OUTLINED_FUNCTION_10_4(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected event in silence state for direction=%d", v2, v3, v4, v5);
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_5()
{
  OUTLINED_FUNCTION_10_4(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected event in speech state in direction=%d", v2, v3, v4, v5);
}

void VCAudioIssueDetectorUtil_Start_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetectorUtil_Stop_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetectorUtil_ProcessFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetectorUtil_FlushLogEvents_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetectorUtil_RtpPacketIndication_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetectorUtil_RtpPacketTimeoutIndication_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v2, v3, v4, v5, v6);
}

void _VCAudioIssueDetectorUtilDeInit_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioIssueDetectorUtilDeInit";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v2, *(const char **)v3, (unint64_t)"_VCAudioIssueDetectorUtilDeInit" >> 16, v4);
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate reporting dictionary", v2, v3, v4, v5, v6);
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate reporting dictionary", v2, v3, v4, v5, v6);
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate bitRate string for top1 index", v2, v3, v4, v5, v6);
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate bitRate string for top2 index", v2, v3, v4, v5, v6);
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate bitRate string for top3 index", v2, v3, v4, v5, v6);
}

void _VCAudioIssueDetectorUtil_EnqueueDistortion_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Event logging enqueue failed for event=%d", v2, v3, v4, v5);
}

void _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate reporting dictionary", v2, v3, v4, v5, v6);
}

void _VCAudioIssueDetectorUtil_AddHistogramEntryToDict_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate histogram array", v2, v3, v4, v5, v6);
}

void VideoTransmitter_SetupSFrameCryptors_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle failed to allocate encoded block buffer data allocator", v2, v3, v4, v5, v6);
}

void VideoTransmitter_SetupSFrameCryptors_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle failed to allocate encoded block buffer header allocator", v2, v3, v4, v5, v6);
}

void VideoTransmitter_SetupSFrameCryptors_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_SetupSFrameCryptors";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Create failed with error:%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_SetupSFrameCryptors" >> 16, v4);
}

void VideoTransmitter_SetupSFrameCryptors_cold_4()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_SetupSFrameCryptor Failed! Payload is not H264 %d while sframe cryptor is valid", v2, v3, v4, v5);
}

void VideoTransmitter_CreateHandle_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d pVT is nil!", v2, v3, v4, v5, v6);
}

void VideoTransmitter_CreateHandle_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory!", v2, v3, v4, v5, v6);
}

void VideoTransmitter_CreateHandle_cold_3()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  __int16 v3 = v0;
  int v4 = 9;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Input substream count is %d, which is greather than the max %d", v2, 0x28u);
}

void VideoTransmitter_CreateHandle_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Video Transmitter mode is not set.", v2, v3, v4, v5, v6);
}

void VideoTransmitter_CreateHandle_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d featureListString is nil", v2, v3, v4, v5, v6);
}

void VideoTransmitter_CreateHandle_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create handle: hVT", v2, v3, v4, v5, v6);
}

void VideoTransmitter_CreateHandle_cold_7()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCFECGenerator_Create failed (%x)", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_8()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "_VideoTransmitter_SetupLogFiles";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter[%p]: failed to open capture_statistics.log", v1, 0x26u);
}

void VideoTransmitter_CreateHandle_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d failed to open out_frame.txt", v2, v3, v4, v5, v6);
}

void VideoTransmitter_CreateHandle_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d failed to open out_pkt.txt", v2, v3, v4, v5, v6);
}

void VideoTransmitter_CreateHandle_cold_11()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSimpleQueueSetWillDestroyElementCallback failed (%x)", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_12()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSimpleQueueSetElementEvictedCallback failed (%x)", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_13()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCRealTimeThread_Initialize for video encoder thread FAILED", v2, v3, v4, v5, v6);
}

void VideoTransmitter_CreateHandle_cold_14()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d dispatch_semaphore_create failed", v2, v3, v4, v5, v6);
}

void VideoTransmitter_CreateHandle_cold_15()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSimpleQueueCreate failed (%x)", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_16()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoTransmitter_SetupTransmitQueue";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Retrieving preferred transmit queue from transport has failed %x", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_SetupTransmitQueue" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_17()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle input MTU was 0. File radar! Overriden to %d ", v2, v3, v4, v5);
}

void VideoTransmitter_CreateHandle_cold_18()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create packet allocator: %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_19()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Tiles per frame is not set to a valid number %d", v2, v3, v4, v5);
}

void VideoTransmitter_CreateHandle_cold_20()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  int v4 = 1489;
  __int16 v5 = v0;
  int v6 = -2145517565;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter_SetupSFrameCryptors failed with error:%d", v2, 0x22u);
}

void VideoTransmitter_CreateHandle_cold_21()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to get local SSRC with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_22()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_23()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle for media bytes with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_24()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle for header bytes with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_25()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle for FEC bytes with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_26()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle for metadata bytes with error=%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_27()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to set NACK consumer in RTP result=%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void VideoTransmitter_CreateHandle_cold_28()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create NACK consumer result=%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
}

void _VideoTransmitter_UpdateEncoderBitrate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate bitRate array", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_UpdateEncoderBitrate_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create bitRate value", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_EncodeVideo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL VideoTransmitter pointer", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_EncodeVideo_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL VideoTransmitter encoded pixelBuffer", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_EncodeVideo_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Ignoring video frame, audio not ready", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_EncodeVideo_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoTransmitter_EncodeVideo";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d EncEncodeFrame failed (%x)", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_EncodeVideo" >> 16, v4);
}

void _VideoTransmitter_EncodeVideo_cold_5()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Encode frame with RTP timestamp %d", v2, v3, v4, v5);
}

void _VideoTransmitter_EncodeVideo_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoTransmitter_EncodeVideo";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Ignoring video frame. UpdateRateControlStatus failed (%x)", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_EncodeVideo" >> 16, v4);
}

void _VideoTransmitter_UpdateRateControlStatus_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Stopping Video!!", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_PrepareAndSetupEncodingArgs_cold_1()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d generate fake frame now, size %d", v2, v3, v4, v5);
}

void _VideoTransmitter_CheckStatusAndHandleError_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoTransmitter_CheckStatusAndHandleError";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d encoder callback error %d", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_CheckStatusAndHandleError" >> 16, v4);
}

void _VideoTransmitter_TransmitFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoTransmitter_TransmitFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VideoTransmitter_TransmitEncodedData failed (%x)", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_TransmitFrame" >> 16, v4);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VideoTransmitter_TransmitEncodedVideoFrame";
  OUTLINED_FUNCTION_3();
  int v4 = 4955;
  __int16 v5 = v0;
  int v6 = -207;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to allocate encoder buffer with error %d", v2, 0x22u);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid transmitter stream", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d  VideoTransmitter_Transmit ISSUING IDR... silently dropping encoded frame...", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoTransmitter_PacketizeAndTransmitEncodedVideoFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d  VTU_SplitVideoIntoPackets failed with iNumPackets %d ", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_PacketizeAndTransmitEncodedVideoFrame" >> 16, v4);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  LODWORD(v6) = 1915;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v1, v2, " [%s] %s:%d szMsg = %s", v3, v4, v5, v6);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_6()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [Media Priority] Sending video priority=%d", v2, v3, v4, v5);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to encrypt encoded buffer", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCPCompressionSession Error: Encoder returned a NULL frame", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Encoder did not set tile ID on frame", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Encoder did not set decoding order on frame", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_11()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to retrieve the block buffer", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_DispatchEncoderCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not check in hVT handle. Encoded video sample buffer will be dropped.", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_DispatchEncoderCallback_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Encoder callback returned a nil sample buffer", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_DispatchEncoderCallback_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Encoder callback returned an empty sample buffer", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_DequeueEncoderError_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoTransmitter_DequeueEncoderError";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d disconnecting call for error (%x)", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_DequeueEncoderError" >> 16, v4);
}

void VideoTransmitter_EnqueueBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Ignoring video frame, does not match capture rule frame size/resolution", v2, v3, v4, v5, v6);
}

void VideoTransmitter_EnqueueBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_EnqueueBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Enqueue failed %x", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_EnqueueBuffer" >> 16, v4);
}

void _VideoTransmitter_HandleUncompressedVideo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not check in hVT handle. Encoded video sample buffer will be dropped.", v2, v3, v4, v5, v6);
}

void VideoTransmitter_EncoderProc_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Dequeued buffer was nil!", v2, v3, v4, v5, v6);
}

void VideoTransmitter_EncoderProc_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Dequeued sample buffer was nil!", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_TransmitVideoPacketsWithFecVersion2_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoTransmitter_TransmitVideoPacketsWithFecVersion2";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCFECGenerator_PushPacket failed! resultFECGenerator=%d", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_TransmitVideoPacketsWithFecVersion2" >> 16, v4);
}

void _VideoTransmitter_TransmitVideoPacketsWithFecVersion2_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VideoTransmitter_PushPacketsAndEncodeWithFECVersion2";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCFECGenerator_SetFixedFECLevel failed! newFecLevel=%d", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_PushPacketsAndEncodeWithFECVersion2" >> 16, v4);
}

void _VideoTransmitter_UpdateEncoderArgsAndGetStream_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCRC scheduling probing sequence returned error", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_EncryptFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferRef passed in NULL", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_EncryptFrame_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Encrypted buffer is not contiguous", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_EncryptFrame_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed for encryptedBuffer", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_EncryptFrame_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to encrypt SFrame for packetization", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_EncryptFrame_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate encoded data block buffer", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_GetBitrates_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute media bitrate", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_GetBitrates_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute header bitrate", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_GetBitrates_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute fec bitrate", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_GetBitrates_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute metadata bitrate", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_GetBitrates_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute total bitrate", v2, v3, v4, v5, v6);
}

void VideoTransmitter_GenerateKeyFrameNow_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_GenerateKeyFrameNow";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter_GenerateKeyFrameNow returned error:%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_GenerateKeyFrameNow" >> 16, v4);
}

void VideoTransmitter_RetransmitPackets_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_RetransmitPackets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoTransmitter[%p] NACK Consumer is NULL", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_RetransmitPackets" >> 16, v4);
}

void VideoTransmitter_ACKLTRFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_ACKLTRFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received LTR ACK timestamp=%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_ACKLTRFrame" >> 16, v4);
}

void VideoTransmitter_SetFECRatio_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid parameter!", v2, v3, v4, v5, v6);
}

void VideoTransmitter_SetPacketExpirationTime_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_SetPacketExpirationTime";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_13_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Setting expiration time (remote jitter size) with %d ms, below the min %d ms", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_SetPacketExpirationTime" >> 16, v4, v5);
}

void VideoTransmitter_SetPacketExpirationTime_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoTransmitter_SetPacketExpirationTime";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_13_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Setting expiration time (remote jitter size) with %d ms, above the max %d ms", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_SetPacketExpirationTime" >> 16, v4, v5);
}

void VideoTransmitter_SetStreamIDs_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid parameter!", v2, v3, v4, v5, v6);
}

void _VideoTransmitter_GetStreamIndexFromAttachment_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Tile index attachment is missing", v2, v3, v4, v5, v6);
}

void VCMediaRecorder_UpdateTargetScreenAttributes_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d object can't be null", v2, v3, v4, v5, v6);
}

void VCAudioRedBuilder_SplitRedAudioPacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioRedBuilder [%s] %s:%d RED payload invalid. Buffer is too small", v2, v3, v4, v5, v6);
}

void VCAudioRedBuilder_SplitRedAudioPacket_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, "VCAudioRedBuilder [%s] %s:%d redundant payloads count:%d", v1, 0x22u);
}

void VCAudioRedBuilder_SplitRedAudioPacket_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioRedBuilder [%s] %s:%d Invalid RED header. Abort and drop this packet.", v2, v3, v4, v5, v6);
}

void VCAudioRedBuilder_SplitRedAudioPacket_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioRedBuilder [%s] %s:%d Invalid RED header", v2, v3, v4, v5, v6);
}

void VCAudioRedBuilder_UpdateAudioPacketWithRedPayload_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 136315906;
  *(void *)&v3[4] = a1;
  *(_WORD *)&uint8_t v3[12] = 2080;
  *(void *)&unsigned char v3[14] = "VCAudioRedBuilder_UpdateAudioPacketWithRedPayload";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, a2, a3, "VCAudioRedBuilder [%s] %s:%d Bad packet large redPayload bufferLength:%d", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"VCAudioRedBuilder_UpdateAudioPacketWithRedPayload" >> 16, 748);
}

void VTU_MoveAndInsertData_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed at VTU_MoveAndInsertData! Not enought buffer size", v2, v3, v4, v5, v6);
}

void VTU_ReallocPktsInfo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to reallocate line offsets array", v2, v3, v4, v5, v6);
}

void VTU_ReallocPktsInfo_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to reallocate line sizes array", v2, v3, v4, v5, v6);
}

void VTU_ReallocPktsInfo_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to reallocate packet flags array", v2, v3, v4, v5, v6);
}

void VTU_ReallocPktsInfo_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to reallocate packet sizes array", v2, v3, v4, v5, v6);
}

void VTU_ReallocPktsInfo_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute the new max packet count", v2, v3, v4, v5, v6);
}

void VTU_ReallocPktsInfo_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VTU_GenerateNewMaxPacketCount";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VTU_GenerateNewPacketCount requested %d exceeds the MAX pkts %d. ", v2, *(const char **)v3, (unint64_t)"_VTU_GenerateNewMaxPacketCount" >> 16, v4, v5);
}

void _VTU_ReallocateBuffer_cold_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VTU_ReallocateBuffer";
  OUTLINED_FUNCTION_3();
  int v4 = 1145;
  __int16 v5 = 2048;
  uint64_t v6 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d _VTU_ReallocateBuffer failed to re-allocate %zu bytes", v2, 0x26u);
}

void _VTU_AllocateVPList_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Failed to allocate entry", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected frame with zero data length!", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the last fragement", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the middle fragement", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTU_PrepareHEVCFrameData";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Allocation of %d bytes failed", v2, *(const char **)v3, (unint64_t)"VTU_PrepareHEVCFrameData" >> 16, v4, v5);
}

void VTU_SplitVideoIntoPackets_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed at VTU_ReallocPktsInfo!", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the middle fragement", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the last fragement", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: calloc %d bytes failed", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected frame with zero data length!", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the last fragement", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_11()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the middle fragement", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_12()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTU_PrepareH264FrameData";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: malloc %d bytes failed", v2, *(const char **)v3, (unint64_t)"VTU_PrepareH264FrameData" >> 16, v4, v5);
}

void VTU_SplitVideoIntoPackets_cold_13()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed at VTU_ReallocPktsInfo!", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_14()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the middle fragement", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_15()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the last fragement", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_16()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: calloc %d bytes failed", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_17()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTU_SplitVideoIntoPackets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Exceeded max GOB count (%d > %d)!", v2, *(const char **)v3, (unint64_t)"VTU_SplitVideoIntoPackets" >> 16, v4, v5);
}

void VTU_SplitVideoIntoPackets_cold_18()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate buffer!", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_19()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Max number of GOBs reached (%d), discarded.", v2, v3, v4, v5, v6);
}

void VTU_SplitVideoIntoPackets_cold_20()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTU_SplitVideoIntoPackets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Invalid slice length (%d), discarded.", v2, *(const char **)v3, (unint64_t)"VTU_SplitVideoIntoPackets" >> 16, v4, v5);
}

void VTU_SplitVideoIntoPackets_cold_21()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Too many slices in packet", v2, v3, v4, v5, v6);
}

void VTU_SplitGenericDataIntoPackets_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to generate the RTP packet. ret=%d", v2, v3, v4, v5, v6);
}

void VTU_SplitGenericDataIntoPackets_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "_VTU_PrepareGenericFrameData";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d Invalid output data length. len=%d", v1);
}

void VTU_SplitGenericDataIntoPackets_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to add on VPList entry. status=%d", v2, v3, v4, v5, v6);
}

void VTU_SplitGenericDataIntoPackets_cold_4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "_VTU_PrepareGenericFrameData";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d Allocation of %d bytes failed", v1);
}

void VTU_SplitGenericDataIntoPackets_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to copy packet payloads", v2, v3, v4, v5, v6);
}

void VTU_SplitGenericDataIntoPackets_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed at VTU_ReallocPktsInfo!", v2, v3, v4, v5, v6);
}

void VTU_SplitGenericDataIntoPackets_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to generate the RTP header. status=%d", v2, v3, v4, v5, v6);
}

void VTU_SplitGenericDataIntoPackets_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to pack the data", v2, v3, v4, v5, v6);
}

void VTU_SplitGenericDataIntoPackets_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Failed to allocate new entry", v2, v3, v4, v5, v6);
}

void AddOneVPList_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Failed to allocate new entry", v2, v3, v4, v5, v6);
}

void PrepareLastHEVCFragment_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "PrepareLastHEVCFragment";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d Found out-of-bound data length %d", v1);
}

void PrepareLastH264Fragment_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "PrepareLastH264Fragment";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d Found out-of-bound data length %d", v1);
}

void VCAudioLimiter_Allocate_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 70;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to allocate audio limiter", (uint8_t *)&v2, 0x1Cu);
}

void VCAudioLimiter_Start_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error AudioUnitInitialize voiceLimiterUnit %d", v2, v3, v4, v5);
}

void VCAudioLimiter_Start_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit input gain %d", v2, v3, v4, v5);
}

void VCAudioLimiter_Start_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit lookahead %d", v2, v3, v4, v5);
}

void VCAudioLimiter_Start_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit fast gain release time %d", v2, v3, v4, v5);
}

void VCAudioLimiter_Start_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit min fast gain %d", v2, v3, v4, v5);
}

void VCAudioLimiter_Start_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit threshold db %d", v2, v3, v4, v5);
}

void VCAudioLimiter_Start_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error AudioUnitSetProperty voiceLimiterUnit, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Output %d", v2, v3, v4, v5);
}

void VCAudioLimiter_Start_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error AudioUnitSetProperty voiceLimiterUnit, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Input %d", v2, v3, v4, v5);
}

void VCAudioLimiter_Start_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error AudioUnitSetProperty voiceLimiterUnit, kAudioUnitProperty_MaximumFramesPerSlice %d", v2, v3, v4, v5);
}

void VCAudioLimiter_Start_cold_10(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 101;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to start due to failing to get new instance", (uint8_t *)&v2, 0x1Cu);
}

void VCAudioLimiter_Process_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error AudioUnitProcess voiceLimiterUnit %d", v2, v3, v4, v5);
}

void VCRateControlMediaController_EnableBWELogDump_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_IsAudioOnly_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetAudioOnly_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetSenderProbingEnabled_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetAllowVideoStop_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_IsVideoStopped_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_IsVideoStoppedByVCRateControl_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_BasebandFlushCount_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetBasebandFlushCount_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_LastBasebandFlushCountChangeTime_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetLastBasebandFlushCountChangeTime_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_LastVideoKeyFrameTime_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_TrafficMetricsFromMediaQueueTxHistory_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_MediaQueueSettings_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_MediaQueueRateChangeCounter_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_ComputePacketLoss_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetForceBBFlush_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_UpdateBasebandSuggestion_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d wrong type of statistics message is processed by media controller", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetAudioFractionTier_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_StopVideoBySmartBrake_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_StopVideoByVCRateControl_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_ResumeVideoBySmartBrake_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_ResumeVideo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetTargetBitrate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetMinTargetBitrate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_AudioSendingBitrate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetAudioSendingBitrate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetShouldDisableLargeFrameRequestsWhenInitialRampUp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_SetRateLimitedMaxTimeExceeded_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_LastVideoRefreshFrameTime_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_AudioFractionTier_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCRateControlMediaController_RampDownAudioFraction_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
}

void VCConnection_PerPacketConnectionOverhead_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 481;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d instance should not be nil", (uint8_t *)&v2, 0x1Cu);
}

void VCConnection_GetDataMode_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 491;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d instance should not be nil", (uint8_t *)&v2, 0x1Cu);
}

void DLCreateHandle_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v2 = 1032;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Dialog.c:%d: calloc(%d) failed", v1, 0x28u);
}

void DLCreateHandle_cold_2()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v3 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Dialog.c:%d: MQCreateHandle failed(%08X)", v2, 0x28u);
}

void DLCreateHandle_cold_3()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 177;
  __int16 v4 = v0;
  int v5 = 177;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Dialog.c:%d: CreateHandle failed", v2, 0x22u);
}

void MQCreateHandle_cold_1()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  int v2 = "MQCreateHandle";
  __int16 v3 = 1024;
  int v4 = 34;
  __int16 v5 = 1024;
  int v6 = 34;
  __int16 v7 = 1024;
  int v8 = 280;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/MsgQue.c:%d: calloc(%d) failed", v1, 0x28u);
}

void MQCreateHandle_cold_2()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  int v2 = "MQCreateHandle";
  __int16 v3 = 1024;
  int v4 = 44;
  __int16 v5 = 1024;
  int v6 = 44;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/MsgQue.c:%d: CreateHandle failed", v1, 0x22u);
}

void VCRateControlAlgorithmLowLatencyNOWRDPriv_Configure_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d rateControlAlgorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmLowLatencyNOWRDPriv_Configure_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d configuration is NULL", v2, v3, v4, v5, v6);
}

void _VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type:%d to do rate control", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl" >> 16, 162);
}

void _VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControlWithVCRCStatistics";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state %d", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControlWithVCRCStatistics" >> 16, 211);
}

void VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d statistics is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus_cold_3()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  uint64_t v5 = "VCRateControlAlgorithmLowLatencyNOWRDPriv_UpdateInternalStatus";
  __int16 v6 = 1024;
  int v7 = 303;
  __int16 v8 = 1024;
  int v9 = v1;
  _os_log_debug_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d Duplicated feedback or out-of-order feedback messages! timestamp:0x%04X", v3, 0x22u);
}

void VCImageConverterBase_CreateConvertedSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Input sample buffer is NULL", v2, v3, v4, v5, v6);
}

void VCImageConverterBase_CreateConvertedSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Input pixel buffer is NULL", v2, v3, v4, v5, v6);
}

void VCImageConverterBase_CreateConvertedSampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d newPixelBuffer iS NULL", v2, v3, v4, v5, v6);
}

void VCImageConverterBase_CreateConvertedSampleBuffer_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Sample buffer is NULL", v2, v3, v4, v5, v6);
}

void _VCAudioCaptionsCoordinator_StartCaptioning_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Waiting for captions to start...", v2, v3, v4, v5, v6);
}

void _VCAudioCaptionsCoordinator_StopCaptioning_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Waiting for captions to stop...", v2, v3, v4, v5, v6);
}

void _VCAudioCaptionsCoordinator_HandleStartedStateAudioSamples_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not stop captioning.", v2, v3, v4, v5, v6);
}

void VCAudioCaptionsCoordinator_setOneToOneVoicePriority_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Not running voice detector", v2, v3, v4, v5, v6);
}

void VCAudioCaptionsCoordinator_setOneToOneVoicePriority_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Running sample through voice detector", v2, v3, v4, v5, v6);
}

void VCAudioCaptionsCoordinator_PushAudioSamples_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VCAudioCaptionsCoordinator_PushAudioSamples";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Attempted to push audio samples to an unregistered token. Token=%ld", v1, 0x26u);
}

void VCAudioCaptionsCoordinator_PushAudioSamples_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioCaptionsCoordinator_EnqueueSecondarySamples";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the secondary sample buffer info", v2, *(const char **)v3, (unint64_t)"_VCAudioCaptionsCoordinator_EnqueueSecondarySamples" >> 16, v4);
}

void VCAudioCaptionsCoordinator_PushAudioSamples_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioCaptionsCoordinator_EnqueueSecondarySamples";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to enqueue the samples", v2, *(const char **)v3, (unint64_t)"_VCAudioCaptionsCoordinator_EnqueueSecondarySamples" >> 16, v4);
}

void VCAudioCaptionsCoordinator_PushAudioSamples_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioCaptionsCoordinator_EnqueueSecondarySamples";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to copy the samples", v2, *(const char **)v3, (unint64_t)"_VCAudioCaptionsCoordinator_EnqueueSecondarySamples" >> 16, v4);
}

void VCMediaControlInfoGeneratorCreateControlInfo_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCMediaControlInfoGeneratorCreateControlInfo";
  __int16 v6 = 1024;
  int v7 = 109;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Generator is nil", (uint8_t *)&v2, 0x1Cu);
}

void VCMediaControlInfoGeneratorCreateControlInfoWithBuffer_cold_1(uint64_t a1, int *a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  int v7 = "_VCMediaControlInfo_CreateControlInfo";
  __int16 v8 = 1024;
  int v9 = 214;
  __int16 v10 = 1024;
  int v11 = v3;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid VCMediaControlInfoGeneratorType: %d", (uint8_t *)&v4, 0x22u);
}

void ParseMessage_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v2 = 136316162;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "ParseMessage";
  __int16 v6 = 1024;
  int v7 = 144;
  __int16 v8 = 1024;
  int v9 = 144;
  __int16 v10 = 1024;
  int v11 = 1024;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipParse.c:%d: calloc(%d) failed", (uint8_t *)&v2, 0x28u);
}

void _VCJBTargetEstimatorSynchronizer_Configure_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d policy = %d out of valid range", v2, v3, v4, v5);
}

void VCJBTargetEstimatorSynchronizer_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
}

void VCJBTargetEstimatorSynchronizer_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL config", v2, v3, v4, v5, v6);
}

void VCJBTargetEstimatorSynchronizer_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
}

void VCJBTargetEstimatorSynchronizer_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid configuration", v2, v3, v4, v5, v6);
}

void VCJBTargetEstimatorSynchronizer_RegisterClient_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCJBTargetEstimatorSynchronizer_SetPolicy_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error in storing current size", v2, v3, v4, v5, v6);
}

void VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error while applying policy", v2, v3, v4, v5, v6);
}

void VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_4()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid Policy policy=%d", v2, v3, v4, v5);
}

void decoderFrameCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "decoderFrameCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d frame decode error %d", v2, *(const char **)v3, (unint64_t)"decoderFrameCallback" >> 16, v4);
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d dictionary is NULL", v2, v3, v4, v5, v6);
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d mediaType is NULL", v2, v3, v4, v5, v6);
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d metadataEntry is NULL", v2, v3, v4, v5, v6);
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d Failed to retrieve spatial audio source ID. status=%08x", v2, *(const char **)v3, (unint64_t)"_VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID" >> 16, v4);
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d Failed to retrieve the media type", v2, v3, v4, v5, v6);
}

void VCAllocatorMultiQueue_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Queue configuration count is 0", v2, v3, v4, v5, v6);
}

void VCAllocatorMultiQueue_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Configuration queues pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAllocatorMultiQueue_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Allocator out pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAllocatorMultiQueue_Create_cold_4()
{
  OUTLINED_FUNCTION_6_11();
  FourccToCStr(1852663149);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_5_11(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Allocator[%s] Failed to create allocator info: %s", v2, v3, v4, v5, v6);
}

void VCAllocatorMultiQueue_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate allocator info", v2, v3, v4, v5, v6);
}

void VCAllocatorMultiQueue_Create_cold_6()
{
  OUTLINED_FUNCTION_6_11();
  FourccToCStr(0);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_5_11(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Allocator[%s] Failed to create allocator info: %s", v2, v3, v4, v5, v6);
}

void VCAllocatorMultiQueue_Create_cold_7()
{
  OUTLINED_FUNCTION_6_11();
  FourccToCStr(1936683620);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_5_11(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Allocator[%s] Failed to create allocator info: %s", v2, v3, v4, v5, v6);
}

void VCAllocatorMultiQueue_Create_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate allocator context", v2, v3, v4, v5, v6);
}

void VCAllocatorMultiQueue_Create_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Settings entries not ordered by buffer size", v2, v3, v4, v5, v6);
}

void SIPSetMessageDelegateForCallID_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SIPSetMessageDelegateForCallID: Invalid SIP Handle", v2, v3, v4, v5, v6);
}

void SIPSetCellConditionChangeHandler_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SIPSetCellConditionChangeHandler: Invalid SIP Handle", v2, v3, v4, v5, v6);
}

void SIPCreateHandle_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: fpAppCallback is NULL", v2, v3, v4, v5, v6);
}

void SIPCreateHandle_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Bad Transport Protocol(%d)", v2, v3, v4, v5, v6);
}

void SIPCreateHandle_cold_3()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v2 = 144;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: calloc(%d) failed", v1, 0x28u);
}

void SIPCreateHandle_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateHandle failed", v2, v3, v4, v5, v6);
}

void SIPCreateHandle_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TPCreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void TUMsgCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: pthread_create failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPSetPacketMultiplexMode_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 1764;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d Invalid SIP packet multiplex mode", (uint8_t *)&v2, 0x1Cu);
}

void SIPStartListen_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d invalid SIP transport type %d", v1);
}

void SIPStartListen_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPListenOnPhysicalInterface failed with error %08X", v1);
}

void SIPStartListen_cold_3()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPListenOnVirtualInterface failed with error %08X", v1);
}

void SIPStopListen_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d invalid SIP transport type %d", v1);
}

void SIPStopListen_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPStopListenOnInterface(Physical) failed with error %08X", v1);
}

void SIPStopListen_cold_3()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPStopListenOnInterface(Virtual) failed with error %08X", v1);
}

void SIPConnectIPPort_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLCountActiveDialogs(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateInvite failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLCreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateCancel failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateAck failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPConnectIPPort_cold_11()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TPSend failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPDoKeyExchange_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateSKEMessageInDialog failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPDoKeyExchange_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPDoKeyExchange_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TASetRetransmitTimeoutCap failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPDoKeyExchange_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPDoKeyExchange_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPDoKeyExchange_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg returned NULL message", v2, v3, v4, v5, v6);
}

void SIPDoKeyExchange_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, v3, v4, v5, v6);
}

void SIPDoKeyExchange_cold_8()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "SIPDoKeyExchange";
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, *(const char **)v3, (unint64_t)"SIPDoKeyExchange" >> 16, v4, v5);
}

void SIPDoKeyExchange_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKENodeCreateAsInitiator failed(%d)", v2, v3, v4, v5, v6);
}

void SIPCancel_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateCancel failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPCancel_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLPutMsg failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPHangupWithTimeout_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateBye failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPHangupWithTimeout_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPHangupWithTimeout_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPHangupWithTimeout_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPSendMessage_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateMessageInDialog failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPSendMessage_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPSendMessage_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPSendMessage_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPSendMessageAll_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPSendMessageAll_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateMessageInDialog failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPSendMessageAll_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPSendMessageAll_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPNewCallProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2, v3, v4, v5, v6);
}

void SIPNewCallProc_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLCreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPNewCallProc_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPNewCallProc_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPNewCallProc_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SendTAStatus failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPNewCallProc_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SendTAStatus failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPNewCallProc_cold_7(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 222;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d SIPNewCallProc: SIPGETCALLEECALLID result == DENIED: Declining SIP INVITE", (uint8_t *)&v2, 0x1Cu);
}

void SIPCancelProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2, v3, v4, v5, v6);
}

void SIPCancelProc_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPCancelProc_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPHangupProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2, v3, v4, v5, v6);
}

void SIPHangupProc_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPHangupProc_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPHangupProc_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLUnlock: failed to unlock also.", v2, v3, v4, v5, v6);
}

void SIPHangupProc_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLUnlock: failed to unlock.", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: DLGetMsg returned null", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_4()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v4 = v0;
  __int16 v5 = v1;
  int v6 = 6;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: seq %d > %d", v3, 0x2Eu);
}

void SIPKeyExchangeProc_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKENodeCreateAsResponder (%d)", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, v3, v4, v5, v6);
}

void SIPKeyExchangeProc_cold_11()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "SIPKeyExchangeProc";
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, *(const char **)v3, (unint64_t)"SIPKeyExchangeProc" >> 16, v4, v5);
}

void SIPMessageProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2, v3, v4, v5, v6);
}

void SIPMessageProc_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void SIPMessageProc_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
}

void SendTPStatus_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateStatus failed(%08X)", v2, v3, v4, v5, v6);
}

void SendTAStatusGeneric_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateGenericStatus failed(%08X)", v2, v3, v4, v5, v6);
}

void SKE_FormMessageS_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, v3, v4, v5, v6);
}

void SKE_FormMessageS_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, v3, v4, v5, v6);
}

void VCCaptionsEncoder_Encode_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to write header. Error=%d", v2, v3, v4, v5);
}

void VCCaptionsEncoder_Encode_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to encode segment. Error=%d", v2, v3, v4, v5);
}

void VCCaptionsEncoder_Encode_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to write header. Error=%d", v2, v3, v4, v5);
}

void VCCaptionsEncoder_Encode_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to write header. Error=%d", v2, v3, v4, v5);
}

void VCCaptionsEncoder_Encode_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to write header. Error=%d", v2, v3, v4, v5);
}

void VCCaptionsEncoder_Encode_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read value at index=%d", v2, v3, v4, v5);
}

void _VCDisplayLinkRunLoopObserverCallBack_cold_1()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  int v5 = "_VCDisplayLinkRunLoopObserverCallBack";
  __int16 v6 = 1024;
  int v7 = 251;
  __int16 v8 = 2048;
  uint64_t v9 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unexpected acitivity %lu", v3, 0x26u);
}

void VCStreamOutput_EnqueueAttributes_cold_1()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v3 = v0;
  __int16 v4 = "VCStreamOutput_EnqueueAttributes";
  __int16 v5 = 1024;
  int v6 = 130;
  __int16 v7 = 2048;
  uint64_t v8 = 0;
  __int16 v9 = 2048;
  uint64_t v10 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid paramter. streamOutput=%p attributes=%p", v2, 0x30u);
}

void VCStreamOutput_EnqueueAttributes_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to enqueue attributes", v2, v3, v4, v5, v6);
}

void VCStreamOutput_EnqueueSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not create XPC dictionary from sample buffer", v2, v3, v4, v5, v6);
}

void VCStreamOutput_EnqueueSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Client Terminated remote queue connection destroying remote queue", v2, v3, v4, v5, v6);
}

void ParseAcceptHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseAllowHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_12();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseAllowEventsHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_12();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseCallIDHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseContactHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseContentEncodingHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_5_12();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseContentLengthHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseContentTypeHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_5_12();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseCSeqHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseEventHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseExpiresHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseFromHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseMaxForwardsHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseMinExpiresHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseReferToHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseSubscriptionStateHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseToHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseUserAgentHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseViaHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseSKESeqHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseXCallIDHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void ParseReasonHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: ParseReasonHdr calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateAcceptHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateAllowHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_12();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateAllowEventsHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_12();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateCallIDHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateContactHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateContentEncodingHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_5_12();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateContentLengthHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateContentTypeHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_5_12();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateCSeqHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateExpiresHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateFromHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateMaxForwardsHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateMinExpiresHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateToHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateUserAgentHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateViaHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateSKESeqHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateReasonHdr_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_12_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: CreateReasonHdr: calloc(%d) failed", v2, v3, v4, v5, v6);
}

void CopySipHeader_cold_1()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v3 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: malloc(%d) failed", v2, 0x28u);
}

void CreateInvite_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCallIDHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContactHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCSeqHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateFromHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateToHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateViaHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateInvite_cold_11(uint64_t a1, char *__s, NSObject *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = 136316162;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  __int16 v7 = "CreateInvite";
  __int16 v8 = 1024;
  int v9 = 448;
  __int16 v10 = 1024;
  int v11 = 448;
  __int16 v12 = 1024;
  int v13 = strlen(__s) + 1;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: malloc(%d) failed", (uint8_t *)&v4, 0x28u);
}

void CreateGenericSIPMsg_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_9();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: calloc(%d) failed", v1, 0x28u);
}

void CreateAck_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateAck_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateAck_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateAck_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateAck_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateAck_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateAck_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateAck_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateCancel_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_9();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: calloc(%d) failed", v1, 0x28u);
}

void CreateCancel_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateCancel_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCSeqHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateCancel_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateCancel_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateCancel_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateCancel_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateCancel_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateCancel_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: DLGetData failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCallIDHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCSeqHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateFromHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateToHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateViaHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateReasonHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBye_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: DLGetData failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCallIDHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCSeqHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateFromHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateToHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateViaHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateBinaryMessageInDialog_cold_11()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: malloc(%d) failed", v2, v3, v4, v5, v6);
}

void CreateSKEMessageInDialog_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateSKESeqHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateSKEMessageInDialog_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContactHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_11()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAcceptHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_12()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAllowHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_13()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAllowEventsHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_14()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateExpiresHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_15()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAllowEventsHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_16()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMinExpires failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateGenericStatus_cold_17()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAllowEventsHdr failed(%08X)", v2, v3, v4, v5, v6);
}

void TACreateHandle_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 79;
  __int16 v4 = v0;
  int v5 = 79;
  __int16 v6 = v0;
  int v7 = 224;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: calloc(%d) failed", v2, 0x28u);
}

void TASend_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: MQPut failed(%08X)", v2, v3, v4, v5, v6);
}

void TACancel_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: CreateCancel failed(%08X)", v2, v3, v4, v5, v6);
}

void TACancel_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: MQPut failed(%08X)", v2, v3, v4, v5, v6);
}

void TAStart_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: pthread_create failed(%08X)", v2, v3, v4, v5, v6);
}

void TAInviteClientProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: Invalid Transaction Handle", v2, v3, v4, v5, v6);
}

void TANonInviteClientProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: Invalid Transaction Handle", v2, v3, v4, v5, v6);
}

void TAInviteServerProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: Invalid Transaction Handle", v2, v3, v4, v5, v6);
}

void TANonInviteServerProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: Invalid Transaction Handle", v2, v3, v4, v5, v6);
}

void TAMsgCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: MQPut failed(%08X)", v2, v3, v4, v5, v6);
}

void _VCVideoReceiverDefault_SetExternalOutputLatency_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d videoReceiver is NULL", v2, v3, v4, v5, v6);
}

void EncoderVTCreateHandle_cold_1(uint64_t a1, int *a2, os_log_t log)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = 136316162;
  uint64_t v6 = a1;
  __int16 v7 = 2080;
  uint64_t v8 = "EncoderVTCreateHandle";
  __int16 v9 = 1024;
  int v10 = 55;
  __int16 v11 = 1024;
  int v12 = v3;
  __int16 v13 = 1024;
  int v14 = v4;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid resolution %dx%d", (uint8_t *)&v5, 0x28u);
}

void EncoderVTCreateHandle_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate bitRate array", v2, v3, v4, v5, v6);
}

void EncoderVTCreateHandle_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create bitRate value", v2, v3, v4, v5, v6);
}

void EncoderVTCreateHandle_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "EncoderVTCreateHandle";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTCompressionSessionCreate failed (%d)", v2, *(const char **)v3, (unint64_t)"EncoderVTCreateHandle" >> 16, v4);
}

void EncoderVTSetBitRate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d pEnc is NULL", v2, v3, v4, v5, v6);
}

void EncoderVTSetBitRate_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "EncoderVTSetBitRate";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTCompressionSession set data rate limits property failed with %d", v2, *(const char **)v3, (unint64_t)"EncoderVTSetBitRate" >> 16, v4);
}

void EncoderVTSetBitRate_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "EncoderVTSetBitRate";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTCompressionSession set average bitrate property failed with %d", v2, *(const char **)v3, (unint64_t)"EncoderVTSetBitRate" >> 16, v4);
}

void EncoderVTEncodeFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d pEnc is NULL", v2, v3, v4, v5, v6);
}

void EncoderVTEncodeFrame_cold_2()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "EncoderVTEncodeFrame";
  OUTLINED_FUNCTION_3();
  int v4 = 258;
  __int16 v5 = v0;
  int v6 = 258;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCVideoEncoder_VT.c:%d: Encoder callback is NULL", v2, 0x22u);
}

void EncoderVTEncodeFrame_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTCompressionSession is not initialized", v2, v3, v4, v5, v6);
}

void EncoderVTEncodeFrame_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "EncoderVTEncodeFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTCompressionSessionEncodeFrame error: %d", v2, *(const char **)v3, (unint64_t)"EncoderVTEncodeFrame" >> 16, v4);
}

void EncoderVTEncodeFrame_cold_5()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "EncoderVTEncodeFrame";
  OUTLINED_FUNCTION_3();
  int v4 = 271;
  __int16 v5 = v0;
  int v6 = -12912;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d VTCompressionSessionEncodeFrame error: %d, the system may run into a low memory state", v2, 0x22u);
}

void VCConnectionManager_SetPreWarmState_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void VCConnectionManager_SetActiveLinkProbingEnabled_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void VCConnectionManager_AlertStateUpdated_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void VCConnectionManager_ProcessWRMNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void VCConnectionManager_ProcessWRMNotification_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d WRMNotification must not be NULL", v2, v3, v4, v5, v6);
}

void VCConnectionManager_GetNumberOfConnectionsInternal_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void VCConnectionManager_CopyConnectionForQuality_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void _VCConnectionManager_UpdateCellularExcessiveBytes_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCConnectionManager_UpdateCellularExcessiveBytes";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to acquire the lock! status=%d", v2, *(const char **)v3, (unint64_t)"_VCConnectionManager_UpdateCellularExcessiveBytes" >> 16, v4);
}

void _VCConnectionManagerNWConnectionStatisticsCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Callback executed with context being nil", v2, v3, v4, v5, v6);
}

void _VCConnectionManagerNWConnectionStatisticsCallback_cold_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 136315906;
  *(void *)&v3[4] = a1;
  *(_WORD *)&uint8_t v3[12] = 2080;
  *(void *)&unsigned char v3[14] = "_VCConnectionManagerNWConnectionStatisticsCallback";
  LODWORD(v4) = 1755;
  WORD2(v4) = 2048;
  *(void *)((char *)&v4 + 6) = *(void *)(a2 + 8);
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, a2, a3, " [%s] %s:%d VCNWConnectionNotification timestamp=%llu", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"_VCConnectionManagerNWConnectionStatisticsCallback" >> 16, (void)v4);
}

void _VCConnectionManagerNWConnectionPacketEventCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Callback executed with context being nil", v2, v3, v4, v5, v6);
}

void _VCConnectionManagerNWConnectionPacketEventCallback_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NWConnection packet event is nil", v2, v3, v4, v5, v6);
}

void _VCConnectionManagerNWConnectionPacketEventCallback_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NWConnection packet event has a bad version", v2, v3, v4, v5, v6);
}

void VCConnectionManager_DidUpdateNetworkCondition_cold_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VCConnectionManager_DidUpdateNetworkCondition";
  OUTLINED_FUNCTION_3();
  int v4 = 1888;
  __int16 v5 = v0;
  int v6 = 1888;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/ConnectionManager/VCConnectionManager.m:%d: connectionManager must not be NULL", v2, 0x22u);
}

void _VCConnectionManager_CopyConnectionForQualityInternal_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCConnectionManager_CopyConnectionForQualityInternal";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCConnectionManager: unrecognized connection quality: %d", v2, *(const char **)v3, (unint64_t)"_VCConnectionManager_CopyConnectionForQualityInternal" >> 16, v4);
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for packetRoutingInfoList", v2, v3, v4, v5, v6);
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for packetRoutingInfoList", v2, v3, v4, v5, v6);
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d p2p link cannot be used for duplication", v2, v3, v4, v5, v6);
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d p2p link cannot be used as primary", v2, v3, v4, v5, v6);
}

void VCConnectionManager_UpdateNetworkOutageStatus_cold_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VCConnectionManager_UpdateNetworkOutageStatus";
  OUTLINED_FUNCTION_3();
  int v4 = 3252;
  __int16 v5 = v0;
  int v6 = 3252;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/ConnectionManager/VCConnectionManager.m:%d: VCCM: Invalid network outage detection event passed", v2, 0x22u);
}

void _VCConnectionManager_CreatePacketRoutingInfoListForConnection_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for packetRoutingInfoListForConnection", v2, v3, v4, v5, v6);
}

void _VCConnectionManager_CreatePacketRoutingInfoListForConnection_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for packetRoutingInfoListForConnection", v2, v3, v4, v5, v6);
}

void VCConnectionManager_IsSourceOnCellularIPv6_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid parameters", v2, v3, v4, v5, v6);
}

void VCConnectionManager_UpdatePacketSendStatus_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void VCConnectionManager_UpdateOnTheWireBytesSentCount_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void VCConnectionManager_UpdateOnTheWireBytesReceivedCount_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
}

void _VCConnectionManager_SetWRMNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d WRMNotification must not be NULL", v2, v3, v4, v5, v6);
}

void VCImageQueue_setCALayerSize_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Invalid CAContext", v2, v3, v4, v5, v6);
}

void VCImageQueue_setCALayerSize_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Invalid CALayer", v2, v3, v4, v5, v6);
}

void VCImageQueue_EnqueueFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create sample buffer", v2, v3, v4, v5, v6);
}

void _VCImageQueue_EnqueuePixelBuffer_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "_VCImageQueue_EnqueuePixelBuffer";
  OUTLINED_FUNCTION_3();
  int v3 = 1145;
  __int16 v4 = 2048;
  uint64_t v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed for NULL queue=%p", v1, 0x26u);
}

void _VCImageQueue_EnqueuePixelBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Timed out waiting for layout change", v2, v3, v4, v5, v6);
}

void _VCImageQueue_EmitFrameEnqueuedSignposts_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the timestamp value", v2, v3, v4, v5, v6);
}

void _VCImageQueue_EmitFrameEnqueuedSignposts_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the frame count", v2, v3, v4, v5, v6);
}

void _VCImageQueue_EmitFrameEnqueuedSignposts_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the new entry", v2, v3, v4, v5, v6);
}

void VCImageQueue_CleanupStreamOutput_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Client terminated stream output", v2, v3, v4, v5, v6);
}

void VCAudioStreamSendGroup_PushAudioSamples_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 837;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d audio no-op no MKM", v1, 0x1Cu);
}

void __WriteYuvFrame_block_invoke_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  FourccToCStr(a2);
  int v8 = 136316162;
  uint64_t v9 = a1;
  __int16 v10 = 2080;
  OUTLINED_FUNCTION_8();
  int v11 = 173;
  __int16 v12 = v5;
  int v13 = 173;
  __int16 v14 = v6;
  uint64_t v15 = v7;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: Unknown pixel format '%s'", (uint8_t *)&v8, 0x2Cu);
}

void VideoUtil_PrintFormatDesc_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d formatDesc is NULL", v2, v3, v4, v5, v6);
}

void VideoUtil_PrintBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Buffer name is not defined", v2, v3, v4, v5, v6);
}

void VideoUtil_PrintBuffer_cold_2()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  int v4 = 450;
  __int16 v5 = v0;
  uint64_t v6 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d bufferName='%s': Pointer is null", v3, 0x26u);
}

void VideoUtil_PrintBuffer_cold_3()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  int v4 = 451;
  __int16 v5 = v0;
  uint64_t v6 = v1;
  __int16 v7 = 2048;
  uint64_t v8 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d bufferName='%s': Buffer size %zu is not supported", v3, 0x30u);
}

void VideoUtil_AddImgDescToBitstream_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: FigSampleBufferGetFormatDescription returned NULL", v2, v3, v4, v5, v6);
}

void VideoUtil_AddImgDescToBitstream_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoUtil_AddImgDescToBitstream";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: FigBlockBufferGetDataPointer %i", v2, *(const char **)v3, (unint64_t)"VideoUtil_AddImgDescToBitstream" >> 16, v4, v5);
}

void VideoUtil_AddImgDescToBitstream_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoUtil_AddImgDescToBitstream";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: FigVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer %d", v2, *(const char **)v3, (unint64_t)"VideoUtil_AddImgDescToBitstream" >> 16, v4, v5);
}

void VideoUtil_AddImgDescToBitstream_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: Can't extract avcC from format description", v2, v3, v4, v5, v6);
}

void VideoUtil_AddImgDescToBitstream_cold_5()
{
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_8();
  LOWORD(v6) = 0;
  HIWORD(v6) = v0;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: gksVCPParseConfigurationRecordAndCreateParameterSets failed with err = %d", v3, v4, v5, 559, v6);
}

void VideoUtil_CreateSampleBufferWithPixelBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d input PixelBuffer is nil", v2, v3, v4, v5, v6);
}

void VideoUtil_CreateSampleBufferWithPixelBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VideoUtil_CreateSampleBufferWithPixelBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create CMSampleBuffer (%d)", v2, *(const char **)v3, (unint64_t)"VideoUtil_CreateSampleBufferWithPixelBuffer" >> 16, v4);
}

void VideoUtil_CreateSampleBufferWithPixelBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not create format description for image buffer", v2, v3, v4, v5, v6);
}

void VideoUtil_SetVisibleRectAttachment_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid visible rect", v2, v3, v4, v5, v6);
}

void VideoUtil_CreateSampleFromBuffer_cold_1()
{
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMSampleBufferCreate failed %d", v2, v3, v4, 979);
}

void VideoUtil_GetEscapeCountForBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer passed to _VideoTransmitter_GetEscapeCountForBuffer", v2, v3, v4, v5, v6);
}

void VideoUtil_PerformEscapingForBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoUtil_PerformSFrameEscaping failed due to invalid source/destination buffer", v2, v3, v4, v5, v6);
}

void VideoUtil_PerformEscapingForBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoUtil_PerformSFrameEscaping failed due to insufficient destination buffer size", v2, v3, v4, v5, v6);
}

void VideoUtil_GetEmulationByteCountForBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid buffer passed to _VideoReceiver_GetUnEscapeCountForBuffer", v2, v3, v4, v5, v6);
}

void VideoUtil_RemoveEmulationBytesFromBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoUtil_RemoveEmulationBytesFromBuffer failed due to invalid source or destination buffer", v2, v3, v4, v5, v6);
}

void VideoUtil_RemoveEmulationBytesFromBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VideoUtil_RemoveEmulationBytesFromBuffer failed due to invalid source or destination buffer lengths", v2, v3, v4, v5, v6);
}

void VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid roudingMultiple", v2, v3, v4, v5, v6);
}

void VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid desired width", v2, v3, v4, v5, v6);
}

void VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid desired height", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AdjustFaceMetadata_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d input pixel buffer is NULL", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AdjustFaceMetadata_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d original width should not be zero.", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AdjustFaceMetadata_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d original height should not be zero", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AdjustFaceMetadata_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d inBuffer width should not be zero", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AdjustFaceMetadata_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d inBuffer height should not be zero", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AdjustFaceMetadata_cold_6()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 1702;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d no metadata dictionary attachment", v1, 0x1Cu);
}

void VCVideoUtil_AdjustFaceMetadata_cold_7()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 1710;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d could not find face metadata array attachment", v1, 0x1Cu);
}

void VCVideoUtil_AttachMetadata_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d pixelBuffer is NULL", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AttachMetadata_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d metadataObjects is nil", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AttachMetadata_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d attachment metadataDictionary could not be allocated", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AttachMetadata_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the face metadata array", v2, v3, v4, v5, v6);
}

void VCVideoUtil_AttachMetadata_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Face Mesh payload was nil", v2, v3, v4, v5, v6);
}

void TPGetSignalStrength_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d pTP is NULL", v2, v3, v4, v5, v6);
}

void TPGetSignalStrength_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d Failed to get signal strength from CT server", v2, v3, v4, v5, v6);
}

void TPGetSignalStrength_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d bars, displayBars, or maxDisplayBars are NULL", v2, v3, v4, v5, v6);
}

void TPUpdateBaseband_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: CFDictionaryCreateMutable failed QoS dictionary", v2, v3, v4, v5, v6);
}

void TPUpdateBaseband_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: CFDictionaryCreateMutable failed for IPPort dictionary", v2, v3, v4, v5, v6);
}

void TPUpdateBaseband_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: Invalid CTServerConnection!", v2, v3, v4, v5, v6);
}

void TPUpdateQualityIndictor_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionUpdateProtocolQualityOfService failed.", v2, v3, v4, v5, v6);
}

void TPSendUDPPacketARPL_cold_1()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14_0();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x2Cu);
}

void TPSendUDPPacketARPL_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d >>>>>  ARPL packet iLen==0 in sendudppacket(in Transport) <<<<<", v2, v3, v4, v5, v6);
}

void TPSendUDPPacketARPL_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d >>>>>  ARPL packet pbMsg is NULL in sendudppacket(in Transport) <<<<<", v2, v3, v4, v5, v6);
}

void TPSendUDPPacketARPL_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d >>>>>  ARPL packet is UNENCRYPTED in sendudppacket(in Transport) <<<<<", v2, v3, v4, v5, v6);
}

void TPCreateHandle_cold_1()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v3 = 34656;
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: calloc(%d) failed", v2);
}

void TPCreateHandle_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ICECreateHandle failed(%08X)", v2, v3, v4, v5, v6);
}

void TPCleanupBaseband_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionUnregisterForNotification for kCTRegistrationDataStatusChangedNotification failed.\n", v2, v3, v4, v5, v6);
}

void dtls_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d DTLS_Create failed with %d", v1);
}

void dtls_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d dtls: ARPLSessionCreate failed with %d", v1);
}

void dtls_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14_0();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x26u);
}

void dtls_cold_4()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, "SIP [%s] %s:%d dtls: ARPLSessionCreate(p2pID == %08X) ...", v1, 0x22u);
}

void TPListenVirtualInterface_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d Create socket for IDS interface failed with error %08X", v1);
}

void TPListenVirtualInterface_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_13_4();
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: calloc(%d) failed", v2);
}

void TPListenVirtualInterface_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: socket failed(%08X)", v2, v3, v4, v5, v6);
}

void TPListenOnPhysicalInterface_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: No network interface found.", v2, v3, v4, v5, v6);
}

void TPSend_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ConstructSipMsg failed(%08X)", v2, v3, v4, v5, v6);
}

void TPSend_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: Compress other SIP SDP failed(%08X)", v2, v3, v4, v5, v6);
}

void TPSend_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: Compress INVITE/200 SDP failed(%08X)", v2, v3, v4, v5, v6);
}

void TPSend_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: Compress Binary SDP failed(%08X)", v2, v3, v4, v5, v6);
}

void TPAddTransaction_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: SipMsg doesn't have a Via header", v2, v3, v4, v5, v6);
}

void TPAddTransaction_cold_2()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v3 = 144;
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: calloc(%d) failed", v2);
}

void TPGetConnectionData_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: CreateSocketAndBind failed in TPAddIPPortToCLIST = (%08x)", v2, v3, v4, v5, v6);
}

void TPGetConnectionData_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ICEAddOneInterface failed in TPAddIPPortToCLIST = (%08x)", v2, v3, v4, v5, v6);
}

void TPUpdateInterfaceList_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: No network interface found.", v2, v3, v4, v5, v6);
}

void TPSetupCTContext_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionCreateOnTargetQueue failed!", v2, v3, v4, v5, v6);
}

void CreateSocketAndBind_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_13_4();
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: calloc(%d) failed", v2);
}

void CreateSocketAndBind_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: getaddrinfo returned NULL", v2, v3, v4, v5, v6);
}

void CreateSocketAndBind_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: socket failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateSocketAndBind_cold_4(uint64_t a1, unsigned __int16 *a2, NSObject *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  __error();
  int v8 = 136316418;
  uint64_t v9 = a1;
  __int16 v10 = 2080;
  int v11 = "CreateSocketAndBind";
  __int16 v12 = 1024;
  OUTLINED_FUNCTION_16_0();
  int v13 = v5;
  __int16 v14 = v6;
  int v15 = v7;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: bind on %d failed(%d)", (uint8_t *)&v8, 0x2Eu);
}

void CreateSocketAndBind_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: getsockname failed(%08X)", v2, v3, v4, v5, v6);
}

void CreateSocketAndBind_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: getaddrinfo failed(%08X)", v2, v3, v4, v5, v6);
}

void TransportMapPacketMultiplexModeToVTPMode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d Invalid transport packet multiplex mode", v2, v3, v4, v5, v6);
}

void TPProcessRemoteInterfaceChangeMessage_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_14_0();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x32u);
}

void SendUDPPacketForCList_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d >>>>>  ARPL packet is UNENCRYPTED in SendUDPPacketForCList(in Transport) <<<<<", v2, v3, v4, v5, v6);
}

void TPEnsureRecvProcStarted_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: pthread_create(TPRecvProc) failed(%08X)", v2, v3, v4, v5, v6);
}

void TPRecvProc_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d TPRecvProc: UNEXPECTED! Breaking the loop due to invalid pTP->sReset", v2, v3, v4, v5, v6);
}

void TPRecvProc_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: select failed(%08X)", v2, v3, v4, v5, v6);
}

void RecvMessageUDP_cold_1()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v5 = v0;
  int v6 = "RecvMessageUDP";
  OUTLINED_FUNCTION_3();
  int v7 = 1663;
  __int16 v8 = v1;
  int v9 = 2152;
  __int16 v10 = v1;
  int v11 = -2146500605;
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v2, v3, "SIP [%s] %s:%d calloc(%d) failed(%08X)", v4);
}

void RecvMessageUDP_cold_2()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v3 = v0;
  int v4 = "RecvMessageUDP";
  OUTLINED_FUNCTION_3();
  int v5 = 1567;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, "SIP [%s] %s:%d RecvMessageUDP: pass message SIP", v2, 0x1Cu);
}

void PassMessage_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ParseMessage failed(%08X)", v2, v3, v4, v5, v6);
}

void PassMessage_cold_2(uint64_t a1)
{
  LODWORD(v3) = 136316162;
  *(void *)((char *)&v3 + 4) = a1;
  WORD6(v3) = 2080;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v1, v2, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: malloc(%d) failed", (const char *)v3, *((const char **)&v3 + 1), v4, v5, v6);
}

void PassMessage_cold_3()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_2();
  int v3 = -2146500606;
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: CallSIPMessageCallback failed(%08X)", v2);
}

void PassMessage_cold_4()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPMessage callback no via/cseq failed, double result = %x", v1);
}

void PassMessage_cold_5()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPMessage callback failed, double result = %x", v1);
}

void PassMessage_cold_6()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPMessage transaction callback request failed, double result = %x", v1);
}

void PassMessage_cold_7()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPMessage transaction callback response failed, double result = %x", v1);
}

void CompressMsg_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ConstructSipMsg failed(%08X)", v2, v3, v4, v5, v6);
}

void TPGetLocalCellTech_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d CTServerConnection is nil", v2, v3, v4, v5, v6);
}

void __TPConnectedCallback_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: TPConnectedCallback: CheckInHandle failed in the dispatched block", v2, v3, v4, v5, v6);
}

void __TPNewCandidatesCallback_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: TPNewCandidatesCallback: CheckInHandle failed in the dispatched block", v2, v3, v4, v5, v6);
}

void __TPRemoveIPPort_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: TPRemoveIPPort: CheckInHandle failed in the dispatched block", v2, v3, v4, v5, v6);
}

void VCBasebandCongestionDetector_SetMode_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCBasebandCongestionDetector_SetMode";
  __int16 v6 = 1024;
  int v7 = 591;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d basebandCongestionDetector is nil", (uint8_t *)&v2, 0x1Cu);
}

void VCTransportStreamRunLoopVTPCreate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
}

void VCTransportStreamRunLoopVTPCreate_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create transport stream array", v2, v3, v4, v5, v6);
}

void VCTransportStreamRunLoopVTPCreate_cold_3()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v4 = "VCTransportStreamRunLoopVTPCreate";
  OUTLINED_FUNCTION_3();
  int v5 = 80;
  __int16 v6 = v0;
  int v7 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d CMDerivedObjectCreate failed %x", v3, 0x22u);
}

void _VCTransportStreamRunLoopVTPAddTransportStream_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPAddTransportStream_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPAddTransportStream_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCTransportStreamRunLoopVTPAddTransportStream";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d transportStream %p was already added to run loop", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPAddTransportStream" >> 16, v4);
}

void _VCTransportStreamRunLoopVTPAddTransportStream_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid transportStream type", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPRemoveTransportStream_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPRemoveTransportStream_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPRemoveTransportStream_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCTransportStreamRunLoopVTPRemoveTransportStream";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d transportStream %p being removed was not added to run loop", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPRemoveTransportStream" >> 16, v4);
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Negative timeout", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCTransportStreamRunLoopVTPWaitForReceive";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RunLoop %p wait for receive was cancelled", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPWaitForReceive" >> 16, v4);
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_4()
{
  __error();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_8_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Select failed %d", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_5()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCTransportStreamRunLoopVTPWaitForReceive";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d RunLoop %p wait for receive timed out", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPWaitForReceive" >> 16, v4);
}

void _VCTransportStreamRunLoopVTPCancelWait_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPCancelWait_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Reset socket not set up", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPUpdateFDSet_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL storage", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPUpdateFDSet_cold_2()
{
  __error();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_8_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create reset socket %d", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPIterateTransportStreams_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL storage", v2, v3, v4, v5, v6);
}

void _VCTransportStreamRunLoopVTPIterateTransportStreams_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCTransportStreamRunLoopVTPIterateTransportStreams";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VFD returned by tranportStream %p is NULL", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPIterateTransportStreams" >> 16, v4);
}

void SRTPGetROC_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Tried to decrement ROC to -1, prevented this from happening", v2, v3, v4, v5, v6);
}

void SRTPInitCrypt_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SRTPInitCrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d failed with error %d", v2, *(const char **)v3, (unint64_t)"SRTPInitCrypt" >> 16, v4);
}

void SRTPUseEncryption_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTPInfo not initialized properly. Call SRTPPrepareEncryption first", v2, v3, v4, v5, v6);
}

void SRTPUseEncryption_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid SRTP exchange info provided", v2, v3, v4, v5, v6);
}

void _SRTPUpdateEncryption_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTPInfo not initialized properly. Call SRTPPrepareEncryption first", v2, v3, v4, v5, v6);
}

void SRTPUpdateKeyMaterialForRTPInfo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d update encryption failed", v2, v3, v4, v5, v6);
}

void SRTPUpdateKeyMaterialForRTPInfo_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d create crypto set failed", v2, v3, v4, v5, v6);
}

void _SRTPCancelEncryption_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTPInfo not initialized properly. Call SRTPPrepareEncryption first", v2, v3, v4, v5, v6);
}

void SRTPUpdateEncryptionInfo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTPUpdateEncryptionInfo: attempt to set an invalid media key index", v2, v3, v4, v5, v6);
}

void SRTPDeriveMediaKeyInfo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTPDeriveMediaKeyInfo: media key/salt derivation failed", v2, v3, v4, v5, v6);
}

void SRTPEncryptData_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  LODWORD(v6) = 1084;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v1, v2, " [%s] %s:%d SRTPEncryptData: Out=[%s]", v3, v4, v5, v6);
}

void SRTPEncryptData_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SRTPEncryptData";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CCCryptorUpdate failed with error %d", v2, *(const char **)v3, (unint64_t)"SRTPEncryptData" >> 16, v4);
}

void SRTPEncryptData_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SRTPEncryptData";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CCCryptorReset failed with error %d", v2, *(const char **)v3, (unint64_t)"SRTPEncryptData" >> 16, v4);
}

void SRTPEncryptData_cold_4()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid operating mode %d, falling back to kSRTPOperatingModeRFCCompliant", v2, v3, v4, 401);
}

void SRTPEncryptData_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  LODWORD(v6) = 1057;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v1, v2, " [%s] %s:%d SRTPEncryptData: In=[%s]", v3, v4, v5, v6);
}

void SRTPEncrypt_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Max number of SRTP packets reached", v2, v3, v4, v5, v6);
}

void SRTCPEncrypt_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Max number of SRTCP packets reached", v2, v3, v4, v5, v6);
}

void SRTCPDecrypt_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "SRTCPDecrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP header doesn't fit in packet. Packet length=%d", v2, *(const char **)v3, (unint64_t)"SRTCPDecrypt" >> 16, v4);
}

void SRTPCalculateTotalSuffixBytes_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTPInfo should not be nil", v2, v3, v4, v5, v6);
}

void SRTPCalculateTotalSuffixBytes_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not get HMAC size - invalid parameter", v2, v3, v4, v5, v6);
}

void SRTPCalculateTotalSuffixBytes_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not get MKI size - invalid parameter", v2, v3, v4, v5, v6);
}

void SRTPAddAuthenticationTag_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTPInfo should not be NULL", v2, v3, v4, v5, v6);
}

void SRTPAddAuthenticationTag_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d outputLength should not be NULL", v2, v3, v4, v5, v6);
}

void SRTPAddAuthenticationTag_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not get MKI size - invalid parameter", v2, v3, v4, v5, v6);
}

void SRTPAddAuthenticationTag_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not get HMAC size - invalid parameter", v2, v3, v4, v5, v6);
}

void SRTPAddAuthenticationTag_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not generate MKI: invalid parameter", v2, v3, v4, v5, v6);
}

void SRTPAddAuthenticationTag_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d outMKI should not be nil", v2, v3, v4, v5, v6);
}

void SRTPAddAuthenticationTag_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not generate RCCM tag: invalid parameter", v2, v3, v4, v5, v6);
}

void SRTPAddAuthenticationTag_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d inData should not be nil", v2, v3, v4, v5, v6);
}

void SRTPAddAuthenticationTag_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid MediaKeyIndex. Stop sending the packet", v2, v3, v4, v5, v6);
}

void SRTPIsAuthenticationEnabled_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Authentication is enabled but the tag size is invalid. Size=%d", v2, v3, v4, 1513);
}

void SRTPVerifyAuthenticationTag_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d payload must not be NULL", v2, v3, v4, v5, v6);
}

void SRTPVerifyAuthenticationTag_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d isMKIChanged must not be NULL", v2, v3, v4, v5, v6);
}

void SRTPVerifyAuthenticationTag_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d outputLength must not be NULL", v2, v3, v4, v5, v6);
}

void SRTPVerifyAuthenticationTag_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not get HMAC size - invalid parameter", v2, v3, v4, v5, v6);
}

void SRTPVerifyAuthenticationTag_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP packet too short - no session authentication tag present", v2, v3, v4, v5, v6);
}

void SRTPVerifyAuthenticationTag_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Authentication tag doesn't match. Authentication failed", v2, v3, v4, v5, v6);
}

void SRTPVerifyAuthenticationTag_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTP packet too short - no MKI present", v2, v3, v4, v5, v6);
}

void SRTPVerifyAuthenticationTag_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not read MKI: invalid parameter", v2, v3, v4, v5, v6);
}

void SRTPVerifyAuthenticationTag_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d inMKI should not be nil", v2, v3, v4, v5, v6);
}

void SRTPVerifyAuthenticationTag_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not read RCCM tag: invalid parameter", v2, v3, v4, v5, v6);
}

void SRTCPAddAuthenticationTag_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d No extra buffer space to add authentication tag", v2, v3, v4, v5, v6);
}

void SRTCPVerifyAuthenticationTag_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SRTCP packet too short", v2, v3, v4, v5, v6);
}

void SRTCPVerifyAuthenticationTag_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Authentication tag doesn't match. Authentication failed", v2, v3, v4, v5, v6);
}

void _VCFECPacketListEntry_Allocate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Fail to allocate list entry", v2, v3, v4, v5, v6);
}

void VCFECPacketList_AllocateAndPush_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failure in allocating an entry list", v2, v3, v4, v5, v6);
}

void VCFECPacketList_AllocateAndPush_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failing to push a packet, possibly a duplicate", v2, v3, v4, v5, v6);
}

void MediaCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "MediaCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "VCCallSession [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCCallSession.m:%d: MediaCallback: notificaiton %d unknown, no action.", v2, *(const char **)v3, (unint64_t)"MediaCallback" >> 16, v4, v5);
}

void MediaCallback_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "MediaCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCCallSession [%s] %s:%d MediaCallback: srtp key update is not supported for call (%08X).", v2, *(const char **)v3, (unint64_t)"MediaCallback" >> 16, v4);
}

void RTPSendUncompressedVideoPacket_cold_1(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v3 = 136316162;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  uint8_t v6 = "RTPSendUncompressedVideoPacket";
  __int16 v7 = 1024;
  int v8 = 49;
  __int16 v9 = 1024;
  int v10 = 49;
  __int16 v11 = 1024;
  int v12 = a2;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPUncompressedVideo.c:%d: data size too big (%d)", (uint8_t *)&v3, 0x28u);
}

void VCRateControlAlgorithm_IsPaused_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. algorithm=%p", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithm_SetPaused_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. algorithm=%p", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithm_EnableLogDump_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. algorithm=%p", v2, v3, v4, v5, v6);
}

void _VCMediaQueuePacketBundler_BundlePacketsWithFCFSPolicy_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Output Block failed (%d)", v2, v3, v4, 76);
}

void _VCMediaQueuePacketBundler_GetSizeOfHeaderWithBundledPackets_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Reach of number of max packets", v2, v3, v4, v5, v6);
}

void VCMediaQueuePacketBundler_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL bundlerOut", v2, v3, v4, v5, v6);
}

void VCMediaQueuePacketBundler_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
}

void VCMediaQueuePacketBundler_Create_cold_3()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 223;
  __int16 v4 = v0;
  int v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d CMSimpleQueueCreate failed (%d)", v2, 0x22u);
}

void VCMediaQueuePacketBundler_AddPacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL bundler", v2, v3, v4, v5, v6);
}

void VCMediaQueuePacketBundler_AddPacket_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL mediaPacket", v2, v3, v4, v5, v6);
}

void VCMediaQueuePacketBundler_AddPacket_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to enqueue media packet to bundler, status=%d", v2, v3, v4, 245);
}

void VCMediaQueuePacketBundler_AddPacket_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d mediaPacket->next is not NULL", v2, v3, v4, v5, v6);
}

void VCMediaQueuePacketBundler_SetMTU_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL bundler", v2, v3, v4, v5, v6);
}

void VCMediaQueuePacketBundler_SetOneToOne_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL bundler", v2, v3, v4, v5, v6);
}

void VCMediaQueuePacketBundler_BundlePackets_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL bundler", v2, v3, v4, v5, v6);
}

void VCMediaQueuePacketBundler_BundlePackets_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL outputBlockHandler", v2, v3, v4, v5, v6);
}

void VTPCallback_cold_1()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VTPCallback";
  __int16 v4 = 1024;
  int v5 = 952;
  __int16 v6 = 1024;
  int v7 = 952;
  __int16 v8 = 1024;
  int v9 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VideoConferenceManager.m:%d: VTPCallback error: unknown notificaiton %d.", v2, 0x28u);
}

void VTP_Initialize_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc failed to allocate=%d bytes", v2);
}

void VTP_Initialize_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_38(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc failed to allocate=%d bytes", v2);
}

void VTP_Initialize_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed to create VTP memory allocators", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_10_8(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed to create VTP memory allocators", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create blockBufferDataMemoryPool", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_12_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create blockBufferDataMemoryPool", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get allocator from figMemoryPool", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_12_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get allocator from figMemoryPool", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the vtp packet allocator", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_12_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the vtp packet allocator", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_11()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCMemPool_Create failed to allocate=%d bytes", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_12()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_10_8(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCMemPool_Create failed to allocate=%d bytes", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_13()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc failed to allocate=%d bytes", v2);
}

void VTP_Initialize_cold_14()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_38(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc failed to allocate=%d bytes", v2);
}

void VTP_Initialize_cold_15()
{
  OUTLINED_FUNCTION_37_0();
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  __error();
  int v3 = 136316162;
  uint64_t v4 = v1;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: CreateHandle failed with errno=%d", (uint8_t *)&v3);
}

void VTP_Initialize_cold_16()
{
  OUTLINED_FUNCTION_5();
  *(void *)&v4[6] = "VTP_Initialize";
  OUTLINED_FUNCTION_3();
  LOWORD(v5) = 0;
  HIWORD(v5) = v0;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid FaceTime traffic class value=%d, ignore.", v3, *(const char **)v4, (unint64_t)"VTP_Initialize" >> 16, 515, v5);
}

void VTP_Initialize_cold_17()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTP_Initialize";
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPRecvProc thread failed, osStatus=%d", v2, *(const char **)v3, (unint64_t)"VTP_Initialize" >> 16, v4, v5);
}

void VTP_Initialize_cold_18()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  os_log_t v2 = "VTP_Initialize";
  __int16 v3 = 1024;
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_38(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPRecvProc thread failed, osStatus=%d", v1);
}

void VTP_Initialize_cold_19()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the VTPPacketRoutingInfoAllocatorName allocator", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_20()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_12_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the VTPPacketRoutingInfoAllocatorName allocator", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_21()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the VTPBlockBufferDataAllocator allocator", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_22()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_12_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the VTPBlockBufferDataAllocator allocator", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_23()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the VTPBlockBufferHeaderAllocator allocator", v2, v3, v4, v5, v6);
}

void VTP_Initialize_cold_24()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_12_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the VTPBlockBufferHeaderAllocator allocator", v2, v3, v4, v5, v6);
}

void VTPRecvProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPRecvProc failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTPRecvProc_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTPRecvProc";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: select failed (%08X)", v2, *(const char **)v3, (unint64_t)"VTPRecvProc" >> 16, v4, v5);
}

void VTP_Cleanup_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Cleanup failed due to invalid handle. g_hVTP:[%p]", v2, v3, v4, v5, v6);
}

void VTP_SocketWithRealSocket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid VTP handle.", v2, v3, v4, v5, v6);
}

void VTP_CopyPreferredSendQueue_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d preferredSendQueue is NULL", v2, v3, v4, v5, v6);
}

void VTP_CopyPreferredSendQueue_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed due to invalid handle", v2, v3, v4, v5, v6);
}

void VTP_SocketWithNWConnection_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NWConnection should not be nil", v2, v3, v4, v5, v6);
}

void VTP_SocketWithNWConnection_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid VTP handle.", v2, v3, v4, v5, v6);
}

void VTP_SocketWithNWConnection_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d calloc failed for=%d bytes", v2, v3, v4, v5, v6);
}

void VTP_SocketWithNWConnection_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_10_8(&dword_1E1EA4000, v0, v1, " [%s] %s:%d calloc failed for=%d bytes", v2, v3, v4, v5, v6);
}

void VTP_SocketWithNWConnection_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_GetVFD returned invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SocketWithNWConnection_cold_6()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VTP_SocketWithNWConnection";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d Non-UDP protocol=%d is not supported", v1);
}

void VTP_GetVFD_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ***VTP_GetVFD: UNEXPECTED; ran out of vfd's with i=%d. There must be some socket LEAK!",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void VTP_DuplicateVFD_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_DuplicateVFD failed due to invalid handle", v2, v3, v4, v5, v6);
}

void VTP_DuplicateVFD_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_DuplicateVFD failed", v2, v3, v4, v5, v6);
}

void _VTP_SocketWithRealSocketFromFVDList_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d sourceVFD should not be NULL", v2, v3, v4, v5, v6);
}

void _VTP_SocketWithRealSocketFromFVDList_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_12_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d sourceVFD should not be NULL", v2, v3, v4, v5, v6);
}

void _VTP_SocketWithRealSocketFromFVDList_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d calloc failed for=%d bytes", v2, v3, v4, v5, v6);
}

void _VTP_SocketWithRealSocketFromFVDList_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_10_8(&dword_1E1EA4000, v0, v1, " [%s] %s:%d calloc failed for=%d bytes", v2, v3, v4, v5, v6);
}

void _VTP_SocketWithRealSocketFromFVDList_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_GetVFD returned invalid handle.", v2, v3, v4, v5, v6);
}

void _VTP_SocketWithRealSocketFromFVDList_cold_6()
{
  OUTLINED_FUNCTION_37_0();
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  __error();
  int v3 = 136316162;
  uint64_t v4 = v1;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: socket failed with errno=%d", (uint8_t *)&v3);
}

void _VTP_SocketWithRealSocketFromFVDList_cold_7()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  LODWORD(v3) = 136316418;
  *(void *)((char *)&v3 + 4) = v0;
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_41(&dword_1E1EA4000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: socket=%d > FD_SETSIZE=%d", (const char *)v3, *((const char **)&v3 + 1), v4, v5, v6, v7);
}

void _VTP_SocketWithRealSocketFromFVDList_cold_8()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  LODWORD(v3) = 136316418;
  *(void *)((char *)&v3 + 4) = v0;
  OUTLINED_FUNCTION_27_0();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_41(&dword_1E1EA4000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: realSocket=%d > FD_SETSIZE=%d", (const char *)v3, *((const char **)&v3 + 1), v4, v5, v6, v7);
}

void VTP_SocketForIDSWithFileDescriptor_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Socket failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SocketForIDSWithFileDescriptor_cold_2()
{
  OUTLINED_FUNCTION_37_0();
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  __error();
  int v3 = 136315906;
  uint64_t v4 = v1;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, v2, " [%s] %s:%d VTP create VFDList failed with errno=%d", (uint8_t *)&v3);
}

void VTP_SocketForIDSWithFileDescriptor_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTP_SocketForIDSWithFileDescriptor";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: fd=%d > FD_SETSIZE", v2, *(const char **)v3, (unint64_t)"VTP_SocketForIDSWithFileDescriptor" >> 16, v4, v5);
}

void VTP_SocketForIDSWithFileDescriptor_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_GetVFD returned invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetPayloadList_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetPayloadList failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetPayloadList_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_SetPayloadList failed to alloc.", v2, v3, v4, v5, v6);
}

void VTP_SetPayloadList_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_10_8(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_SetPayloadList failed to alloc.", v2, v3, v4, v5, v6);
}

void VTP_SetSocketMode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetSocketMode failed due to invalid input mode.", v2, v3, v4, v5, v6);
}

void VTP_SetSocketMode_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetSocketMode failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetPktType_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetPktType failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_AddPktType_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_AddPktType failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_RemovePktType_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_RemovePktType failed due to invalid handle", v2, v3, v4, v5, v6);
}

void VTP_Getsockname_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_Getsockname failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void _VTP_SetSSRC_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetRTPSSRC failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetTransportSessionID_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid transport session ID", v2, v3, v4, v5, v6);
}

void VTP_SetTransportSessionID_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetTransportSessionID failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetDSCPTag_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetDSCPTag failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void _VTP_GetNWContentMetaData_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d null pointer for nwContentMetaData", v2, v3, v4, v5, v6);
}

void _VTP_GetNWContentMetaData_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VTP_GetNWContentMetaData failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_GetTransportSessionID_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid transport session ID", v2, v3, v4, v5, v6);
}

void VTP_GetTransportSessionID_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetTransportSessionID failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_Setsockopt_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_Setsockopt failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetSourceDestinationWithToken_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP handle is invalid", v2, v3, v4, v5, v6);
}

void VTP_SetSourceDestinationWithIPPort_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP handle is invalid", v2, v3, v4, v5, v6);
}

void VTP_Close_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_Close failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_Bind_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_Bind failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_Bind_cold_2()
{
  OUTLINED_FUNCTION_37_0();
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  __error();
  int v3 = 136316162;
  uint64_t v4 = v1;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: bind failed(%d)", (uint8_t *)&v3);
}

void VTP_BindNew_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_Bind failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_BindNew_cold_2()
{
  OUTLINED_FUNCTION_37_0();
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  __error();
  int v3 = 136316162;
  uint64_t v4 = v1;
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: bind failed(%d)", (uint8_t *)&v3);
}

void VTP_Sendto_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Sendto failed due to invalid parameter.", v2, v3, v4, v5, v6);
}

void VTP_Sendto_cold_2()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Sendto failed due to invalid packet type (%d).", v2, v3, v4, v5, v6);
}

void VTP_Sendto_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Sendto failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_Sendto_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTP_Sendto";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: DTLS_Write failed %08X.", v2, *(const char **)v3, (unint64_t)"VTP_Sendto" >> 16, v4, v5);
}

void VTP_Sendto_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: No VFD result found.", v2, v3, v4, v5, v6);
}

void VTP_Sendto_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: No VFD found for default result key.", v2, v3, v4, v5, v6);
}

void SendOnePacketOnVFDList_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid relay server type(%d).", v2, v3, v4, v5, v6);
}

void VTP_Send_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d got a NULL VPKTFlag", v2, v3, v4, v5, v6);
}

void VTP_Send_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_Send_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d infoList is NULL! Dropped packet!", v2, v3, v4, v5, v6);
}

void VTP_Send_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for infoList", v2, v3, v4, v5, v6);
}

void VTP_Send_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Un-encrypted/un-authenticated packet detected. Dropping...", v2, v3, v4, v5, v6);
}

void _VTP_CreatePacketRoutingInfoListWithVFD_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void _VTP_CreatePacketRoutingInfoListWithVFD_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to VFDList not found.", v2, v3, v4, v5, v6);
}

void _VTP_CreatePacketRoutingInfoListWithVFD_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for infoList", v2, v3, v4, v5, v6);
}

void _VTP_SendWithSourceDestinationInfo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed due to null VCSourceDestinationInfo", v2, v3, v4, v5, v6);
}

void _VTP_SendWithSourceDestinationInfo_cold_2()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d RealTransport: source destination info with mode %d is not supported", v1);
}

void _VTP_SendWithSourceDestinationInfo_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void _VTP_SendWithSourceDestinationInfo_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d failed to match a VFDList", v2, v3, v4, v5, v6);
}

void _VTP_SendWithSourceDestinationInfo_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d nil idsDatagramChannel", v2, v3, v4, v5, v6);
}

void _VTP_SendWithSourceDestinationInfo_cold_6()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d Link (ID=%d) does not support HBH encryption required by packet.", v1);
}

void _VTP_HealthPrint_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "_VTP_HealthPrint";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d Cannot print health for invalid connectionIndex=%d.", v1);
}

void VTP_SendCompoundPacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d got a NULL datagramsVPKTFlag", v2, v3, v4, v5, v6);
}

void VTP_SendCompoundPacket_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d got a NULL datagramsLength", v2, v3, v4, v5, v6);
}

void VTP_SendCompoundPacket_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d got a NULL datagramsBuffer", v2, v3, v4, v5, v6);
}

void VTP_SendCompoundPacket_cold_4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VTP_SendCompoundPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d got a bad datagramsCount %d", v1);
}

void VTP_SendCompoundPacket_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed due to invalid handle", v2, v3, v4, v5, v6);
}

void VTP_SendCompoundPacket_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d callID should not be 0 when sending IDS compound packet!", v2, v3, v4, v5, v6);
}

void VTP_SendCompoundPacket_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d infoList is NULL! Dropped packet!", v2, v3, v4, v5, v6);
}

void VTP_GetReportingStats_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid reportingStats", v2, v3, v4, v5, v6);
}

void VTP_GetReportingStats_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Cannot check in VTP handle", v2, v3, v4, v5, v6);
}

void VTP_SendWithSourceDestinationIP_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SendWithSourceDestinationIP_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_ReleasePacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to retrieve VTP handle.", v2, v3, v4, v5, v6);
}

void VTP_Recvfrom_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_Recvfrom failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_Recvfrom_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_Recvfrom failed due to no real socket found for vfd", v2, v3, v4, v5, v6);
}

void VTP_SetAFRCRecvMode_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_SetAFRCRecvMode failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetAFRC_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetAFRC failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetAFRCConnectionNumber_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_NotifyAFRCRxEstimate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_NotifyAFRCRxEstimate INVALID_HANDLE", v2, v3, v4, v5, v6);
}

void VTP_NotifyAFRCRxEstimate_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_NotifyAFRCRxEstimate", v2, v3, v4, v5, v6);
}

void VTP_RegisterPacketCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed due to invalid parameter.", v2, v3, v4, v5, v6);
}

void VTP_RegisterPacketCallback_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed VTP check-in", v2, v3, v4, v5, v6);
}

void VTP_RegisterPacketCallback_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to add new vfd set.", v2, v3, v4, v5, v6);
}

void VTP_RegisterPacketCallback_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTP_RegisterPacketCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Successfully added new vfd set with id: %d", v2, *(const char **)v3, (unint64_t)"VTP_RegisterPacketCallback" >> 16, v4);
}

void VTP_RegisterPacketCallback_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to copy readFDs.", v2, v3, v4, v5, v6);
}

void AddOneVFDSETList_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_8_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc(%d) failed", v2);
}

void AddOneVFDSETList_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_38(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc(%d) failed", v2);
}

void VTP_UnregisterPacketCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed VTP check-in.", v2, v3, v4, v5, v6);
}

void VTP_Select_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Select failed due to invalid parameter.", v2, v3, v4, v5, v6);
}

void VTP_GetSendRecvStats_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_GetSendRecvStats failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetCellularUniqueTag_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetCellularUniqueTag failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetPktTag_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VTP_SetPktTag";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d VTP_SetPktTag: invalid tag index requested '%d'. Ignoring", v1);
}

void VTP_SetRTPSrc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_SetRTPSrc failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_SetNetworkLogLevel_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: RealSocketForConnectionResult returned invalid socket", v2, v3, v4, v5, v6);
}

void VTP_SetNetworkLogLevel_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  HIDWORD(v6) = v0;
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: No VFD found for connection result with localIPPort %s", v2, v3, v4, v5, v6);
}

void VTP_SetNetworkLogLevel_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v6 = *__error();
  int v7 = 136316418;
  uint64_t v8 = a1;
  __int16 v9 = 2080;
  uint64_t v10 = "VTP_SetNetworkLogLevel";
  __int16 v11 = 1024;
  int v12 = 4647;
  __int16 v13 = 1024;
  int v14 = 4647;
  __int16 v15 = 2080;
  uint64_t v16 = a2;
  __int16 v17 = 1024;
  int v18 = v6;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: ioctl(SIOCSIFLOG) for interface=%s failed with error=%d", (uint8_t *)&v7, 0x32u);
}

void VTP_NotifyRemoteNoRemotePacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPCallback failed due to undefined pointer.", v2, v3, v4, v5, v6);
}

void VTP_NotifySendFailed_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_4();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d VTPCallback failed due to invalid VTP handle [g_hVTP:%p]", v1, 0x26u);
}

void VTP_NotifySendFailed_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPCallback failed due to undefined pointer.", v2, v3, v4, v5, v6);
}

void VTP_DetectNAT64Prefix_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_DetectNAT64Prefix failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_RegisterConnectionManagerWithCallID_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_DeregisterConnectionManagerWithCallID_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void VTP_IncrementTotalBytesSent_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_IncrementTotalBytesSent failed due to invalid handle", v2, v3, v4, v5, v6);
}

void VTP_GetPktType_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP handle is invalid", v2, v3, v4, v5, v6);
}

void VTP_GetPktType_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VTP_GetPktType";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_5_5(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d Could not find VFDList for gived fvd=%d", v1);
}

void VTP_ReleaseVFD_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTP_ReleaseVFD";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: vfd=%d is out-of-range.", v2, *(const char **)v3, (unint64_t)"VTP_ReleaseVFD" >> 16, v4, v5);
}

void PrepareOFTMAC_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: SessionID is NULL, cannot generate MAC, reset flag.", v2, v3, v4, v5, v6);
}

void PrepareOFTMAC_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: SessionID length 0, cannot generate MAC, reset flag.", v2, v3, v4, v5, v6);
}

void PrepareOFTMAC_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: No key available to generate MAC, reset flag.", v2, v3, v4, v5, v6);
}

void PrepareOFTCRC32_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: PrepareOFTCRC32 failed due to invalid parameter.", v2, v3, v4, v5, v6);
}

void _VTP_LogOSChannelInfoToIDSDatagramChannel_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d nil VCDatagramChannelIDS, cannot log os channel info!", v2, v3, v4, v5, v6);
}

void VTP_ProcessPacketType_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: out-of-bound OFT type.", v2, v3, v4, v5, v6);
}

void VTP_ProcessPacketType_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid OFT header, discard.", v2, v3, v4, v5, v6);
}

void VTP_ProcessPacketType_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "ProcessOFTData";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: OFT packet (%d) missing OFT MAC, discard.", v2, *(const char **)v3, (unint64_t)"ProcessOFTData" >> 16, v4, v5);
}

void VTP_ProcessPacketType_cold_4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VTP_ProcessPacketType";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_3_4();
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: unrecognized openfacetime type=%d", v1, 0x28u);
}

void VTP_ProcessPacketType_cold_5()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VTP_ProcessPacketType";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d received packet with type=%d", v2, *(const char **)v3, (unint64_t)"VTP_ProcessPacketType" >> 16, v4);
}

void VTP_ProcessPacketType_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid OFT MAC, discard.", v2, v3, v4, v5, v6);
}

void VTP_ProcessPacketType_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid OFT RTP header version with bad CRC, discard.", v2, v3, v4, v5, v6);
}

void VTP_ProcessPacketType_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid OFT RTP header version, discard.", v2, v3, v4, v5, v6);
}

void VTP_UpdateReceivedBytes_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void _VTP_ShrinkPacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to retrieve blockBuffer pointer and size", v2, v3, v4, v5, v6);
}

void _VTP_ShrinkPacket_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to retrieve blockBuffer pointer and size", v2, v3, v4, v5, v6);
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate VTP packet", v2, v3, v4, v5, v6);
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to retrieve blockBuffer pointer and size", v2, v3, v4, v5, v6);
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate VTP data packet buffer", v2, v3, v4, v5, v6);
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate VTP data packet buffer", v2, v3, v4, v5, v6);
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate VTP data packet buffer", v2, v3, v4, v5, v6);
}

void VTP_IFIndexToName_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  __error();
  int v8 = 136316418;
  uint64_t v9 = a1;
  OUTLINED_FUNCTION_27_0();
  int v10 = 3714;
  __int16 v11 = v6;
  int v12 = 3714;
  __int16 v13 = v6;
  int v14 = a2;
  __int16 v15 = v6;
  int v16 = v7;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: if_indextoname failed for index %d (%d)", (uint8_t *)&v8, 0x2Eu);
}

void VTP_IFIndexToName_cold_2()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "VTP_IFIndexToName";
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: realloc (%d) failed", v2, *(const char **)v3, (unint64_t)"VTP_IFIndexToName" >> 16, v4, v5);
}

void VTP_IFIndexToName_cold_3()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = "VTP_IFIndexToName";
  __int16 v3 = 1024;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_38(&dword_1E1EA4000, v0, (uint64_t)v0, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: realloc (%d) failed", v1);
}

void VTP_SendOnePacketWithSocket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d failed due to NULL destination IPPort", v2, v3, v4, v5, v6);
}

void VTP_SendOnePacketWithSocket_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to invalid handle.", v2, v3, v4, v5, v6);
}

void _VTP_UpdateIDSDatagramOptionWithChannelDataFormat_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Option cannot be NULL", v2, v3, v4, v5, v6);
}

void _VTP_ReportIDSOnTheWireBytesLocked_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: datagramOptions is nil", v2, v3, v4, v5, v6);
}

void _VTP_ReportIDSOnTheWireBytesLocked_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_13_7(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: connectionManager is nil", v2, v3, v4, v5, v6);
}

void _VTP_ProcessPacketForDirectIDSDataPath_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter packet must not be NULL", v2, v3, v4, v5, v6);
}

void _VTP_ProcessPacketForSharedIDSDataPath_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter packet must not be NULL", v2, v3, v4, v5, v6);
}

void __VCAVFoundationLoadARKit_block_invoke_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  dlerror();
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_8();
  int v6 = 149;
  __int16 v7 = v3;
  uint64_t v8 = v4;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to soft link ARKit.framework: %s", v5, 0x26u);
}

void _VCAVFoundationCapture_ConvertPixelFormat_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAVFoundationCapture_ConvertPixelFormat";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTPixelTransferSessionTransferImage failed: status=%d", v2, *(const char **)v3, (unint64_t)"_VCAVFoundationCapture_ConvertPixelFormat" >> 16, v4);
}

void _VCAVFoundationCapture_ConvertPixelFormat_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CVPixelBufferPoolCreatePixelBuffer failed", v2, v3, v4, v5, v6);
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d sampleBufferCopy is nil", v2, v3, v4, v5, v6);
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Pixel Buffer nil, dropping frame", v2, v3, v4, v5, v6);
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d newResizedPixelBuffer failed", v2, v3, v4, v5, v6);
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 1071;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d No synchronizer available, attempting to attach meta data to pixel buffer for face rec", v1, 0x1Cu);
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_5()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 1080;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d No synchronizer available, No cached meta data, not attaching any meta data to pixel buffer", v1, 0x1Cu);
}

void _VCRateControlAlgorithmTelephony_DoRateControl_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state=%d", v2, v3, v4, v5);
}

void _VCRateControlAlgorithmTelephony_DoRateControl_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Wrong statistics interfaceType=%d!", v2, v3, v4, v5);
}

void _VCRateControlAlgorithmTelephony_DoRateControl_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type=%d to do rate control", v2, v3, v4, v5);
}

void VCBlockBufferUtlities_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
}

void VCBlockBufferUtlities_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FigMemoryPoolCreateBlockBuffer failed", v2, v3, v4, v5, v6);
}

void VCBlockBufferUtlities_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FigMemoryPoolAllocatorCopyMemoryPool failed", v2, v3, v4, v5, v6);
}

void VCBlockBufferUtilities_CreateAndGetDataPointer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void VCBlockBufferUtilities_CreateAndGetDataPointer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCBlockBufferUtlities_Create failed", v2, v3, v4, v5, v6);
}

void _VCSession_ReportingConfigurationCallback_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 718;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, "VCSession [%s] %s:%d Reporting is enabled", v1, 0x1Cu);
}

void VCSession_RemoteScreenAttributesDidChange_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCSession [%s] %s:%d vcSession is null", v2, v3, v4, v5, v6);
}

void VCNWConnectionMonitorUtils_GetRATFromNWNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d notification is NULL", v2, v3, v4, v5, v6);
}

void VCNWConnectionMonitorUtils_GetSignalLevelFromNWNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d notification is NULL", v2, v3, v4, v5, v6);
}

void VCNWConnectionMonitorUtils_GetNotificationFromAdvisory_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d notification is NULL", v2, v3, v4, v5, v6);
}

void VCNWConnectionMonitorUtils_GetNotificationFromAdvisory_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d advisory is NULL", v2, v3, v4, v5, v6);
}

void VCNWConnectionMonitorUtils_GetNotificationFromAdvisory_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Notification type sent in the interface advisory is not valid", v2, v3, v4, v5, v6);
}

void _VCSystemAudioCaptureSession_audioSink_cold_1()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  uint64_t v5 = "_VCSystemAudioCaptureSession_audioSink";
  __int16 v6 = 1024;
  int v7 = 171;
  __int16 v8 = 2048;
  uint64_t v9 = v1;
  _os_log_debug_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d %p audio sink buffer received", v3, 0x26u);
}

void _VCConnectionIDS_IsOnSameInterfacesWithConnection_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCConnection: connection to check is nil", v2, v3, v4, v5, v6);
}

void _VCConnectionIDS_IsOnSameInterfacesWithConnection_cold_2()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_4_14();
  uint64_t v3 = "_VCConnectionIDS_IsOnSameInterfacesWithConnection";
  __int16 v4 = 1024;
  int v5 = 485;
  __int16 v6 = 1024;
  int v7 = v0;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: %{BOOL}d", v2, 0x22u);
}

void _VCConnectionIDS_IsOnSameInterfacesWithConnection_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Different non-cell interface type", v2, v3, v4, v5, v6);
}

void _VCConnectionIDS_IsOnSameInterfacesWithConnection_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Different wired interface type", v2, v3, v4, v5, v6);
}

void _VCConnectionIDS_ReportingQRServerConfig_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d qrExperiment Dictionary=nil", v2, v3, v4, v5, v6);
}

void _VCConnectionIDS_ReportingSliceStatus_cold_1()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_4_14();
  uint64_t v3 = "_VCConnectionIDS_ReportingSliceStatus";
  __int16 v4 = 1024;
  int v5 = 652;
  __int16 v6 = 2112;
  uint64_t v7 = 0;
  __int16 v8 = 1024;
  int v9 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Argument not valid context=%@ for isLocal=%d", v2, 0x2Cu);
}

void _VCConnectionIDS_ReportingSliceStatus_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d linkContext=nil", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_Configure_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_Configure_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d configuration is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_Configure_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Could not initialize smart brake in rate control algorithm.", v2, v3, v4, v5, v6);
}

void _VCRateControlAlgorithmStabilizedNOWRD_DoRateControl_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_VCRateControlAlgorithmStabilizedNOWRD_DoRateControl";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type:%d to do rate control", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmStabilizedNOWRD_DoRateControl" >> 16, 278);
}

void _VCRateControlAlgorithmStabilizedNOWRD_DoRateControl_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_VCRateControlAlgorithmStabilizedNOWRD_RunRateControlStateTransition";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state %d", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmStabilizedNOWRD_RunRateControlStateTransition" >> 16, 618);
}

void _VCRateControlAlgorithmStabilizedNOWRD_DoRateControl_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d media controller is required for VCRateControl", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_SetBitrateUnstable_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToLocalRCEvent_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToLocalRCEvent_cold_2()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToLocalRCEvent";
  __int16 v3 = 1024;
  OUTLINED_FUNCTION_2_0();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d _bytesInFlightThreshold is 0 in algorithm=%p", v1, 0x26u);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToLocalRCEvent_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToLocalRCEvent_cold_2()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToLocalRCEvent";
  __int16 v3 = 1024;
  OUTLINED_FUNCTION_2_0();
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d _bytesInFlightThreshold is 0 in algorithm=%p", v1, 0x26u);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_RampDownTierDueToLocalRCEvent_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateBytesInFlightThreshold_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_DoRateControlWithNWStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_DoRateControlWithNWStatistics_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d statistics is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_DoRateControlWithNWStatistics_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d wrong type of statistics message is processed by VCRateControl WiFi", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateAlgorithmWithBasebandStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateAlgorithmWithBasebandStatistics_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d statistics is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateAlgorithmWithBasebandStatistics_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d statistics type is not for baseband", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateInternalStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateInternalStatistics_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d statistics is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateVCRateControlHistory_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldFastRampUp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_RampDownTierDueToBaseband_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDown_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateSmartBrakeOutputWithVCRCStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateSmartBrakeOutputWithVCRCStatistics_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d statistics is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToBaseband_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToBaseband_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_BasebandAdditionalTiersForRampUp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
}

void VCMediaNegotiatorMediaType_StreamGroupIDFromMediaType_cold_1(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  uint8_t v6 = "VCMediaNegotiatorMediaType_StreamGroupIDFromMediaType";
  __int16 v7 = 1024;
  int v8 = 31;
  __int16 v9 = 1024;
  int v10 = a2;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unexpected mediaType=%hhu", (uint8_t *)&v3, 0x22u);
}

void VCMediaNegotiatorMediaType_MediaTypeFromStreamGroupID_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  __int16 v7 = "VCMediaNegotiatorMediaType_MediaTypeFromStreamGroupID";
  __int16 v8 = 1024;
  int v9 = 68;
  __int16 v10 = 2080;
  uint64_t v11 = FourccToCStr(a2);
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unexpected streamGroupID=%s", (uint8_t *)&v4, 0x26u);
}

void _VCSessionParticipantLocal_ProcessAudioSamples_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Object can't be NULL", v2, v3, v4, v5, v6);
}

void _VCSessionParticipantLocal_ProcessAudioSamples_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 3983;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d audio no-op no MKM", v1, 0x1Cu);
}

void VCSessionPartipantLocal_OnVideoFrame_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 3841;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d video no-op no MKM", v1, 0x1Cu);
}

void VCSilencePredictor_Initialize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the VCSilencePredictor memory", v2, v3, v4, v5, v6);
}

void VCSilencePredictor_Reset_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Silence predictor is NULL", v2, v3, v4, v5, v6);
}

void VCSilencePredictor_AddFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Silence predictor is NULL", v2, v3, v4, v5, v6);
}

void VCSilencePredictor_PredictSilence_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Silence predictor is NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterRTCPFinalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterRTCPFinalize_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Object '%@' is not a valid VCPacketFilterRTCP");
}

void _VCPacketFilterRTCPCopyProperty_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterRTCPCopyProperty_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
}

void _VCPacketFilterRTCPSetProperty_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterRTCPSetProperty_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
}

void VCStatisticsCollectorQueue_DrainAndProcessAllStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Collector is nil", v2, v3, v4, v5, v6);
}

void VCStatisticsCollectorQueue_DrainAndProcessAllStatistics_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d This should be called only with _shouldProcessMessageOnExternalThread is true", v2, v3, v4, v5, v6);
}

void VCStatisticsCollectorQueue_FlushAllStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Collector is nil", v2, v3, v4, v5, v6);
}

void VCTimescalePSOLA_Accelerate_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCTimescalePSOLA_Accelerate";
  __int16 v6 = 1024;
  int v7 = 135;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Signal Correlation check failed", (uint8_t *)&v2, 0x1Cu);
}

void VCTimescalePSOLA_Accelerate_cold_2(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v3 = *(__int16 *)(a2 + 66);
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  int v7 = "VCTimescalePSOLA_Accelerate";
  __int16 v8 = 1024;
  int v9 = 113;
  __int16 v10 = 1024;
  int v11 = v3;
  _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Accelerate buffer  inputBufferLength=%d", (uint8_t *)&v4, 0x22u);
}

void VCFramingOverheadCalculationUtils_PerPacketMediaFramingOverheadWithRTPHandle_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCFramingOverheadCalculationUtils_PerPacketMediaFramingOverheadWithRTPHandle";
  __int16 v6 = 1024;
  int v7 = 21;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d framingOverhead pointer cannot be NULL", (uint8_t *)&v2, 0x1Cu);
}

void VCAudioCaptionsBufferInfoCollection_AddBufferInfo_cold_1(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  int v7 = "VCAudioCaptionsBufferInfoCollection_AddBufferInfo";
  __int16 v8 = 1024;
  int v9 = 193;
  __int16 v10 = 2048;
  uint64_t v11 = v3;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Could not create buffer info for captionsToken=%ld", (uint8_t *)&v4, 0x26u);
}

void VCPixelTransferSession_TransferPixelBuffer_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 42;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d sourcePixelBuffer is NULL", v1, 0x1Cu);
}

void VCPixelTransferSession_TransferPixelBuffer_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 43;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d destinationPixelBuffer is NULL", v1, 0x1Cu);
}

void VCPixelTransferSession_TransferPixelBuffer_cold_3()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  uint64_t v5 = "VCPixelTransferSession_TransferPixelBuffer";
  __int16 v6 = 1024;
  int v7 = 49;
  __int16 v8 = 1024;
  int v9 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d VTPixelTransferSessionTransferImage failed %d", v3, 0x22u);
}

void _VCCaptionsStream_DidReceiveSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCVideoStream: null object was passed to DidReceiveSampleBuffer", v2, v3, v4, v5, v6);
}

void _VCCaptionsStream_DidReceiveSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error creating NSData from sample buffer for captions.", v2, v3, v4, v5, v6);
}

void _VCCaptionsStream_DidReceiveSampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error getting block buffer from metadata sample buffer!", v2, v3, v4, v5, v6);
}

void _AVCStreamInput_ComputeStats_cold_1()
{
  int v2 = 136316162;
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_6_14();
  OUTLINED_FUNCTION_4_3(&dword_1E1EA4000, v0, v1, "AVCStreamInput [%s] %s:%d streamInput=%p AVCStreamInputID=%s sample buffer time is invalid", v2, v3, v4, v5, v6);
}

void VCVideoStreamRateAdaptationFeedbackOnly_SetDidReceiveVideo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid parameter. rateAdaptation is nil!", v2, v3, v4, v5, v6);
}

void VCScreenCaptureManager_SharedInstance_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create VCScreenCaptureManager", v2, v3, v4, v5, v6);
}

void VCAllocatorFirstCome_Create_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 187;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Allocator out pointer is NULL", (uint8_t *)&v2, 0x1Cu);
}

void VCAllocatorFirstCome_Create_cold_2()
{
  FourccToCStr(1852663149);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_10_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create allocator info: %s", v2, v3, v4, v5, v6);
}

void VCAllocatorFirstCome_Create_cold_3(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 82;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to allocate allocator info", (uint8_t *)&v2, 0x1Cu);
}

void VCAllocatorFirstCome_Create_cold_4()
{
  FourccToCStr(0);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_10_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create allocator info: %s", v2, v3, v4, v5, v6);
}

void VCRemoteVideoManager_DidReceiveFirstRemoteFrameForStreamToken_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCRemoteVideoManager.m:%d: VCRemoteVideoManager: null object was passed to DidReceiveFirstRemoteFrameForStreamToken", v2, v3, v4, v5, v6);
}

void VCRemoteVideoManager_RemoteScreenAttributesDidChange_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCRemoteVideoManager.m:%d: VCRemoteVideoManager: null object was passed to RemoteScreenAttributesDidChange", v2, v3, v4, v5, v6);
}

void VCRemoteVideoManager_RemoteVideoAttributesDidChange_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCRemoteVideoManager.m:%d: VCRemoteVideoManager: null object was passed to RemoteVideoAttributesDidChange", v2, v3, v4, v5, v6);
}

void networkProc_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d simulator is NULL!", v2, v3, v4, v5, v6);
}

void VCCryptor_GetCipherSuite_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d cryptor should not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_ComposeSFrameHeaderWithCounterAndMKI_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d buffer must not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_ComposeSFrameHeaderWithCounterAndMKI_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d bufferSize must not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_ComposeSFrameHeaderWithCounterAndMKI_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d buffer is too small", v2, v3, v4, v5, v6);
}

void VCCryptor_ComposeSFrameHeaderWithCounterAndMKI_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyMaterialIndex must not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_ParseSFrameHeader_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d buffer must not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_ParseSFrameHeader_cold_2()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v3 = 210;
  __int16 v4 = v0;
  int v5 = 1;
  __int16 v6 = 2048;
  uint64_t v7 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Wrong size of input SFrame header: expected=%d, received=%zu", v2, 0x2Cu);
}

void VCCryptor_ParseSFrameHeader_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d frameMKI must not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_ParseSFrameHeader_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d activeCounter must not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_ParseSFrameHeader_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d headerSize must not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_ParseSFrameHeader_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SFrame signatureFlag must not be set", v2, v3, v4, v5, v6);
}

void VCCryptor_ParseSFrameHeader_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SFrame kidExtentionFlag must be set", v2, v3, v4, v5, v6);
}

void VCCryptor_ParseSFrameHeader_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SFrame header is bigger than output buffer size", v2, v3, v4, v5, v6);
}

void VCCryptor_ParseSFrameHeader_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not create SFrame MKI", v2, v3, v4, v5, v6);
}

void _VCCryptor_ValidateAuthenticationTag_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d encryptedDataSize is too small", v2, v3, v4, v5, v6);
}

void VCCryptor_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d cryptor should not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d cipherSuitepe parameter has wrong value", v2, v3, v4, v5, v6);
}

void VCCryptor_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d encryptionLabel should not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Create instance failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBuffer is not contiguous", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCCryptor_ComposeSFrameHeaderWithCounterAndMKI failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CCCryptorUpdate failed to encryp data", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CCCryptorReset failed to reset cryptor", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCCryptor_ComposeSFrameHeaderWithCounterAndMKI failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VCCryptor_DeriveIV failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed due to encryption material not being ready", v2, v3, v4, v5, v6);
}

void VCCryptor_Encrypt_cold_11()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed due to invalid input parameter", v2, v3, v4, v5, v6);
}

void _VCCryptor_ValidateCryptographyInputParameters_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d cryptor should not be NULL", v2, v3, v4, v5, v6);
}

void _VCCryptor_ValidateCryptographyInputParameters_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d input buffer should not be NULL", v2, v3, v4, v5, v6);
}

void _VCCryptor_ValidateCryptographyInputParameters_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d output buffer should not be NULL", v2, v3, v4, v5, v6);
}

void _VCCryptor_ValidateCryptographyInputParameters_cold_4()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VCCryptor_ValidateCryptographyInputParameters";
  OUTLINED_FUNCTION_3();
  int v4 = 304;
  __int16 v5 = 2048;
  uint64_t v6 = 0;
  OUTLINED_FUNCTION_7_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d inputBuffer contains incorrect data size '%zu'", v2);
}

void _VCCryptor_EnsureCryptorIsReady_cold_1(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  VCMediaKeyIndex_Description(a2);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_7_3(&dword_1E1EA4000, a3, v4, " [%s] %s:%d VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex failed, MKI=%s", v5);
}

void _VCCryptor_EnsureCryptorIsReady_cold_2(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  VCMediaKeyIndex_Description(a2);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_7_3(&dword_1E1EA4000, a3, v4, " [%s] %s:%d Key material with MKI=%s is not ready yet", v5);
}

void _VCCryptor_EnsureCryptorIsReady_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VCCryptor_SetupCryptor failed for key material '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CCCryptorCreateWithMode failed to creae cryptor", v2, v3, v4, v5, v6);
}

void _VCCryptor_EnsureCryptorIsReady_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to derive authentication key with key material '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to derive salt key with key material '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_11()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to derive encryption key with key material '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_12()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to derive secret key with key material '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_13()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
}

void _VCCryptor_EnsureCryptorIsReady_cold_14(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  VCMediaKeyIndex_Description(a2);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_7_3(&dword_1E1EA4000, a3, v4, " [%s] %s:%d VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex failed, MKI=%s", v5);
}

void _VCCryptor_EnsureCryptorIsReady_cold_15()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 420;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Cryptor is valid, nothing to do here", v1, 0x1Cu);
}

void _VCCryptor_EnsureCryptorIsReady_cold_16()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSecurityKeyHolder_RegisterForKeyMaterialChangeNotification failed", v2, v3, v4, v5, v6);
}

void _VCCryptor_DeriveIV_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d iv should not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBuffer is not contiguous", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCCryptor_Decrypt failed due to invalid SFrame", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCCryptor_Decrypt failed authenticate incoming frame", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCSecurityKeyHolder_AssociateKeyIndex failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CCCryptorUpdate failed to encryp data", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CCCryptorReset failed to reset cryptor", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _VCCryptor_DeriveIV failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCCryptor_Decrypt failed due to invalid SFrame", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_11()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void VCCryptor_Decrypt_cold_12()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCCryptor_Decrypt failed due to invalid input parameter", v2, v3, v4, v5, v6);
}

void VCCryptor_GetEncryptedBufferSize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d cryptor should not be NULL", v2, v3, v4, v5, v6);
}

void VCCryptor_GetEncryptedBufferSize_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d output buffer size param is NULL", v2, v3, v4, v5, v6);
}

void _VCMediaStream_DefaultTransport_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaStream [%s] %s:%d _transportArray is empty, and we are trying to get the default transport, which does not exist.", v2, v3, v4, v5, v6);
}

void VCMediaStreamFillMediaControlInfoCallback_cold_1()
{
  OUTLINED_FUNCTION_6_11();
  if (OUTLINED_FUNCTION_14_2(*MEMORY[0x1E4F143B8])) {
    objc_msgSend((id)objc_msgSend((id)objc_opt_class(), "description"), "UTF8String");
  }
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6_15();
  OUTLINED_FUNCTION_5_11(&dword_1E1EA4000, v0, v1, "VCMediaStream [%s] %s:%d %s[%p] Failed to fill the media control info", v2, v3, v4, v5, v6);
}

void VCMediaStreamProcessMediaControlInfoCallback_cold_1()
{
  OUTLINED_FUNCTION_6_11();
  if (OUTLINED_FUNCTION_14_2(*MEMORY[0x1E4F143B8])) {
    objc_msgSend((id)objc_msgSend((id)objc_opt_class(), "description"), "UTF8String");
  }
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6_15();
  OUTLINED_FUNCTION_5_11(&dword_1E1EA4000, v0, v1, "VCMediaStream [%s] %s:%d %s[%p] Failed to process transport media control info", v2, v3, v4, v5, v6);
}

void VCMediaStreamProcessMediaControlInfoCallback_cold_2()
{
  OUTLINED_FUNCTION_6_11();
  if (OUTLINED_FUNCTION_14_2(*MEMORY[0x1E4F143B8])) {
    objc_msgSend((id)objc_msgSend((id)objc_opt_class(), "description"), "UTF8String");
  }
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6_15();
  OUTLINED_FUNCTION_5_11(&dword_1E1EA4000, v0, v1, "VCMediaStream [%s] %s:%d %s[%p] Failed to process the probing control info", v2, v3, v4, v5, v6);
}

void VCMediaStreamProcessMediaControlInfoCallback_cold_3()
{
  OUTLINED_FUNCTION_6_11();
  if (OUTLINED_FUNCTION_14_2(*MEMORY[0x1E4F143B8])) {
    objc_msgSend((id)objc_msgSend((id)objc_opt_class(), "description"), "UTF8String");
  }
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6_15();
  OUTLINED_FUNCTION_5_11(&dword_1E1EA4000, v0, v1, "VCMediaStream [%s] %s:%d %s[%p] Failed to process feedback control info", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_CreateHeadersFromCArray_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL C headers array", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_CreateHeadersFromCArray_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create mutable header array", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_CreateHeadersFromCArray_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate header string", v2, v3, v4, v5, v6);
}

void _VCVideoHardwareDumpCollector_DumpFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate format generator", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordResizeForEncoder_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordResizeForEncoder_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordEncoderBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordEncoderBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordEncodedFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordEncodedFrame_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordDecodedFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordDecodedFrame_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordActiveCaptureDevice_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
}

void VCVideoHardwareDumpCollector_RecordActiveCaptureDevice_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
}

void Throttling_MediaQueue_SetAudioInterval_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  uint64_t v3 = "Throttling_MediaQueue_SetAudioInterval";
  __int16 v4 = 1024;
  int v5 = 1114;
  __int16 v6 = 2048;
  uint64_t v7 = v0;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d MediaQueue_Throttling_SetAudioInterval: %f", v2, 0x26u);
}

void Throttling_MediaQueue_SetIsIPv6_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 136315906;
  *(void *)&v3[4] = a1;
  *(_WORD *)&uint8_t v3[12] = 2080;
  *(void *)&unsigned char v3[14] = "Throttling_MediaQueue_SetIsIPv6";
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, a2, a3, " [%s] %s:%d MediaQueue_Throttling_SetIsIPv6: %d ", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"Throttling_MediaQueue_SetIsIPv6" >> 16, 1121);
}

void Throttling_AFRC_GetDefaults_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v2 = 136316418;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  int v5 = "Throttling_AFRC_GetDefaults";
  __int16 v6 = 1024;
  int v7 = 1500;
  __int16 v8 = 1024;
  int v9 = _MergedGlobals;
  __int16 v10 = 1024;
  int v11 = byte_1EB5E6439;
  __int16 v12 = 1024;
  int v13 = g_bThrottlingProbeSeqLog;
  _os_log_debug_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d g_bThrottlingSendLog: %d  g_bThrottlingRecvLog: %d  g_bThrottlingProbeSeqLog: %d ", (uint8_t *)&v2, 0x2Eu);
}

void Throttling_AFRC_GetDefaults_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "Throttling_AFRC_GetDefaults";
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Throttling: %d ", v2, *(const char **)v3, (unint64_t)"Throttling_AFRC_GetDefaults" >> 16, 1480);
}

void DTLS_SocketWrite_cold_1(uint64_t a1, uint64_t *a2, NSObject *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v6 = *__error();
  uint64_t v7 = *a2;
  int v8 = 136316162;
  uint64_t v9 = a1;
  __int16 v10 = 2080;
  int v11 = "DTLS_SocketWrite";
  __int16 v12 = 1024;
  int v13 = 187;
  __int16 v14 = 1024;
  int v15 = v6;
  __int16 v16 = 1024;
  int v17 = v7;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d SECURETRANSPORT WRITE FAILED -1 errno: %d (%d bytes)...", (uint8_t *)&v8, 0x28u);
}

void DTLS_Cleanup_cold_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v4 = 325;
  __int16 v5 = v0;
  int v6 = v1;
  _os_log_debug_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d DTLS_Cleanup done on handle %d", v3, 0x22u);
}

void DTLS_Handshake_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 466;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d SECURETRANSPORT FAILED...", (uint8_t *)&v2, 0x1Cu);
}

void DTLS_Handshake_cold_2(uint64_t a1, char a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = "OK";
  uint64_t v5 = a1;
  int v4 = 136315906;
  uint64_t v7 = "DTLS_Handshake";
  __int16 v6 = 2080;
  __int16 v8 = 1024;
  int v9 = 463;
  if (a2) {
    uint64_t v3 = "NO";
  }
  __int16 v10 = 2080;
  int v11 = v3;
  _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d SECURETRANSPORT SETUP %s...", (uint8_t *)&v4, 0x26u);
}

void DTLS_Read_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SSLRead failed with status:%d", v2, v3, v4, v5);
}

void DTLS_Read_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to retrieve output data pointer with status:%d", v2, v3, v4, v5);
}

void DTLS_Read_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the output data pointer with status:%d", v2, v3, v4, v5);
}

void DTLS_Read_cold_4(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 574;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to retrieve input data pointer", (uint8_t *)&v2, 0x1Cu);
}

void HandleWRMEvent_cold_1()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v5 = v0;
  OUTLINED_FUNCTION_3_0();
  int v6 = 82;
  __int16 v7 = v1;
  int v8 = 82;
  __int16 v9 = 2048;
  uint64_t v10 = v2;
  _os_log_error_impl(&dword_1E1EA4000, v3, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/WRMClient.m:%d: WRMClient: invalid configuration event with kMessageID %llu.", v4, 0x2Cu);
}

void VCCreateVFDForIDS_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  __int16 v5 = "VCCreateVFDForIDS";
  __int16 v6 = 1024;
  int v7 = 101;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d NULL vfd", (uint8_t *)&v2, 0x1Cu);
}

void VCCreateVFDForIDS_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SocketForIDS failed %x", v2, v3, v4, v5);
}

void VCCreateVFDForIDS_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetSocketMode failed %x", v2, v3, v4, v5);
}

void VCCreateVFDForIDS_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTP_SetPktType failed %x", v2, v3, v4, v5);
}

void VCBasebandNotificationParser_ParseNotification_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Corrupted baseband notification. Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
}

void VCBasebandNotificationParser_ParseNotification_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_17();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Corrupted baseband notification ACK packet. Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
}

void VCBasebandNotificationParser_ParseNotification_cold_3()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 99;
  __int16 v4 = v0;
  int v5 = 99;
  __int16 v6 = v0;
  int v7 = 6;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCBasebandNotificationParser.c:%d: Got PTs more than VC_BBNOTE_MAX_PAYLOAD_TYPES (%d) in a DropACK", v2, 0x28u);
}

void VCBasebandNotificationParser_ParseNotification_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Corrupted baseband notification packet (cookie). Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
}

void VCBasebandNotificationParser_ParseNotification_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4_17();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Corrupted baseband notification codec rate change packet. Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
}

void VCBasebandNotificationParser_ParseNotification_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_12_1();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Corrupted baseband notification report packet. Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
}

void _VCPacketFilterBBNotificationFinalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterBBNotificationFinalize_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Object '%@' is not a valid VCPacketFilterBasebandNotification");
}

void _VCPacketFilterBBNotificationCopyProperty_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterBBNotificationCopyProperty_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
}

void _VCPacketFilterBBNotificationSetProperty_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterBBNotificationSetProperty_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
}

void VCImageResizingConverter_CreateResizedPixelBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _transferSession is NULL", v2, v3, v4, v5, v6);
}

void VCImageResizingConverter_CreateResizedPixelBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _bufferPool is NULL", v2, v3, v4, v5, v6);
}

void VCImageResizingConverter_CreateResizedPixelBuffer_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCImageResizingConverter_CreateResizedPixelBuffer";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VTPixelTransferSessionTransferImage failed: %d", v2, *(const char **)v3, (unint64_t)"VCImageResizingConverter_CreateResizedPixelBuffer" >> 16, 59);
}

void VCImageResizingConverter_CreateResizedPixelBuffer_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CVPixelBufferPoolCreatePixelBuffer failed", v2, v3, v4, v5, v6);
}

void _VCImageResizingConverter_CreateSampleBufferWithNewTiming_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Input sample buffer is NULL", v2, v3, v4, v5, v6);
}

void _VCImageResizingConverter_CreateSampleBufferWithNewTiming_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCImageResizingConverter_CreateSampleBufferWithNewTiming";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMSampleBufferCreateCopyWithNewTiming failed with error=%d", v2, *(const char **)v3, (unint64_t)"_VCImageResizingConverter_CreateSampleBufferWithNewTiming" >> 16, 79);
}

void VCMicrophonePreferencesAVAS_BuiltInMicPortDescriptionFromSelectableInputsArray_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d selectableInputs is invalid=%p", v2, v3, v4, v5, v6);
}

void VCMicrophonePreferencesAVAS_DataSourcesFromPortDescription_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d builtInMicPort invalid=%p", v2, v3, v4, v5, v6);
}

void VCMicrophonePreferencesAVAS_ApplyMicrophonePreferences_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d selectedInputDict [%p] == nil", v2, v3, v4, v5, v6);
}

void __VCLoadAppleCVA_block_invoke_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  uint8_t v6 = "VCLoadAppleCVA_block_invoke";
  __int16 v7 = 1024;
  int v8 = 48;
  __int16 v9 = 2080;
  uint64_t v10 = dlerror();
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to soft link AppleCVA.framework: %s", (uint8_t *)&v3, 0x26u);
}

void VCViewpointCorrection_CorrectViewpoint_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the view point correction parameter dictionary", v2, v3, v4, v5, v6);
}

void VCViewpointCorrection_CorrectViewpoint_cold_2()
{
  OUTLINED_FUNCTION_2();
  *(_WORD *)&v4[4] = v0;
  *(void *)&v4[6] = "VCViewpointCorrection_CorrectViewpoint";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v1, v2, " [%s] %s:%d CVAViewpointCorrectProcess failed: %d", v3, *(const char **)v4, (unint64_t)"VCViewpointCorrection_CorrectViewpoint" >> 16, 320);
}

void VCViewpointCorrection_CorrectViewpoint_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate fx", v2, v3, v4, v5, v6);
}

void VCViewpointCorrection_CorrectViewpoint_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate fy", v2, v3, v4, v5, v6);
}

void VCViewpointCorrection_CorrectViewpoint_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate cx", v2, v3, v4, v5, v6);
}

void VCViewpointCorrection_CorrectViewpoint_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allcoate zero", v2, v3, v4, v5, v6);
}

void VCViewpointCorrection_CorrectViewpoint_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate one", v2, v3, v4, v5, v6);
}

void VCViewpointCorrection_CorrectViewpoint_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate row0", v2, v3, v4, v5, v6);
}

void VCViewpointCorrection_CorrectViewpoint_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate row1", v2, v3, v4, v5, v6);
}

void VCViewpointCorrection_CorrectViewpoint_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate row2", v2, v3, v4, v5, v6);
}

void VCViewpointCorrection_CorrectViewpoint_cold_11()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate intrinisc array", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_CopyKeyManager_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_SecurityKeyMode_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyManager should not be NULL", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_Create_cold_3()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VCSecurityKeyHolder_Create";
  __int16 v4 = 1024;
  int v5 = 152;
  __int16 v6 = 1024;
  int v7 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d usage has invalid value '%d'", v2, 0x22u);
}

void VCSecurityKeyHolder_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid securityKeyMode", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Create instance failed", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d MKMList should not be NULL", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Immutable instance does not have key manager", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_RegisterForKeyMaterialChangeNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_RegisterForKeyMaterialChangeNotification_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Can not set key material change notification handler for immutable instance of VCSecurityKeyholder", v2, v3, v4, v5, v6);
}

void _VCSecurityKeyHolder_KeyMaterialCallback_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VCSecurityKeyHolder_KeyMaterialCallback";
  __int16 v4 = 1024;
  int v5 = 109;
  __int16 v6 = 2112;
  uint64_t v7 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Wrong notification received from VCSecurityKeyManager : '%@'", v2, 0x26u);
}

void VCSecurityKeyHolder_AssociateKeyIndex_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
}

void VCSecurityKeyHolder_AssociateKeyIndex_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d keyIndex should not be NULL", v2, v3, v4, v5, v6);
}

void VCDTMFToneGenerator_Reinit_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received Invalid DTMF eventType=%d", v2, v3, v4, v5);
}

void VCDTMFToneGenerator_Reinit_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received Invalid powerLevel=%d", v2, v3, v4, v5);
}

void VCDTMFToneGenerator_Reinit_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received Invalid sampleRate=%d", v2, v3, v4, v5);
}

void VCDTMFToneGenerator_GenerateSamples_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 222;
  __int16 v4 = 2048;
  uint64_t v5 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCDTMFToneGenerator[%p] not initialized", v2, 0x26u);
}

void VCAudioFrameDelay_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d settings not specified", v2, v3, v4, v5, v6);
}

void VCAudioFrameDelay_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d output pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioFrameDelay_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Create instance failed", v2, v3, v4, v5, v6);
}

void VCAudioFrameDelay_Create_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to setup the audio frames", v2, v3, v4, v5);
}

void VCAudioFrameDelay_Create_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to setup the audio frames", v2, v3, v4, v5);
}

void VCAudioFrameDelay_Create_cold_6()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the audio frame", v2, v3, v4, v5);
}

void VCAudioFrameDelay_PullAudioSamples_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the audio frame", v2, v3, v4, v5);
}

void VCAudioFrameDelay_PullAudioSamples_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Unable to shrink the frame delay since there's currently no delay", v2, v3, v4, v5);
}

void VCAudioFrameDelay_UpdateDelay_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio frame delay object is NULL", v2, v3, v4, v5, v6);
}

void _VCAudioFrameDelay_RemoveDelayFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Frame cannot be removed NULL frame", v2, v3, v4, v5);
}

void _VCAudioFrameDelay_RemoveDelayFrame_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Frame cannot be removed from empty list", v2, v3, v4, v5);
}

void _VCAudioFrameDelay_RemoveDelayFrame_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Cannot remove frame that isn't in the list", v2, v3, v4, v5);
}

void _VCAudioFrameDelay_AllocateDelayFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the delay frame", v2, v3, v4, v5);
}

void _VCAudioFrameDelay_AllocateDelayFrame_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the frame info", v2, v3, v4, v5);
}

void _VCAudioFrameDelay_AllocateDelayFrame_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the audio buffer", v2, v3, v4, v5);
}

void _VCAudioFrameDelay_InsertDelayFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Frame cannot be insert NULL frame", v2, v3, v4, v5);
}

void _VCAudioFrameDelay_InsertDelayFrame_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [%p] Cannot insert frame that is already in the list", v2, v3, v4, v5);
}

void VCSignalErrorAt_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCSignalErrorAt";
  __int16 v6 = 1024;
  int v7 = 23;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create formattedArguments", (uint8_t *)&v2, 0x1Cu);
}

void VCSignalErrorAt_cold_2(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  int v7 = "VCSignalErrorAt";
  __int16 v8 = 1024;
  int v9 = 25;
  __int16 v10 = 2080;
  uint64_t v11 = v3;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d %s", (uint8_t *)&v4, 0x26u);
}

void VCAudioIssueDetector_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCAudioIssueDetector creation failed", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unknown issue detector type", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the audio issue detector", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the utils for receiver issue detector", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_Finalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector ref is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_Finalize_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_Configure_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_Configure_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioIssueDetector_Configure";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p configured", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_Configure" >> 16, v4);
}

void VCAudioIssueDetector_UpdateConnectionType_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_UpdateConnectionType_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioIssueDetector_UpdateConnectionType";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p link type updated", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_UpdateConnectionType" >> 16, v4);
}

void VCAudioIssueDetector_ProcessCellularNetworkNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_ProcessCellularNetworkNotification_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioIssueDetector_ProcessCellularNetworkNotification";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p NW notification received", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_ProcessCellularNetworkNotification" >> 16, v4);
}

void VCAudioIssueDetector_Start_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_Start_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioIssueDetector_Start";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p started", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_Start" >> 16, v4);
}

void VCAudioIssueDetector_Stop_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_Stop_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioIssueDetector_Stop";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p stopped", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_Stop" >> 16, v4);
}

void VCAudioIssueDetector_ReportRTPTraffic_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_ReportRTCPTraffic_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
}

void VCAudioIssueDetector_FlushLogEvents_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VCAudioIssueDetector_FlushLogEvents";
  OUTLINED_FUNCTION_3();
  int v3 = 194;
  __int16 v4 = 2048;
  uint64_t v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter issueDetector=%p", v1, 0x26u);
}

void VCFFTMeter_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the FFT meter", v2, v3, v4, v5, v6);
}

void VCFFTMeter_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the FFT", v2, v3, v4, v5, v6);
}

void VCFFTMeter_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the first come allocator", v2, v3, v4, v5, v6);
}

void _VCPacketFilterRTPFinalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterRTPFinalize_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Object '%@' is not a valid VCPacketFilterRTP");
}

void _VCPacketFilterRTPCopyProperty_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterRTPCopyProperty_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
}

void _VCPacketFilterRTPSetProperty_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
}

void _VCPacketFilterRTPSetProperty_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
}

void _VCXPCConnection_timeoutHandlerFunc_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 109;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, "AVConferenceXPCServer [%s] %s:%d ##### XPC Call timeout event", v1, 0x1Cu);
}

void VCSpatialAudioMetadata_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata address is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Max channel count is 0", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d SPI pointer is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the metadata", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the metadata entries", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Create_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Core audio metadata is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Create_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata serialized size is 0", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Create_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create serialized buffer header allocator", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Create_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create serialized buffer allocator", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Create_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to retrieve spatial metadata serialized size. error=%u", v2, v3, v4, v5);
}

void VCSpatialAudioMetadata_Create_cold_11()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the CoreAudio spatial metadata. error=%u", v2, v3, v4, v5);
}

void VCSpatialAudioMetadata_CreateEntry_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata entry address is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_CreateEntry_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_CreateEntry_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Reached max number of entries", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_CreateEntry_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d No more available metadata entries", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_ChannelIndex_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Entry is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_ChannelIndex_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_ChannelIndex_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Positional info is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_SpatialAudioSourceID_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d spatialAudioSourceID is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_SpatialAudioSourceID_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Entry is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_SpatialAudioSourceID_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid global info", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid display width", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid display height", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid window width", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid window height", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_7()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "VCSpatialAudioMetadata_UpdateGlobalInfo";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid uiState=%u", v2, *(const char **)v3, (unint64_t)"VCSpatialAudioMetadata_UpdateGlobalInfo" >> 16, 287);
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_8()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "VCSpatialAudioMetadata_UpdateGlobalInfo";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid uiLayout=%u", v2, *(const char **)v3, (unint64_t)"VCSpatialAudioMetadata_UpdateGlobalInfo" >> 16, 288);
}

void VCSpatialAudioMetadata_UpdateOrientation_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdateOrientation_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid orientation=%u", v2, v3, v4, v5);
}

void VCSpatialAudioMetadata_UpdatePositionalInfo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Entry is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdatePositionalInfo_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_UpdatePositionalInfo_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Positional info is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Serialize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d serializedBuffer is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Serialize_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Serialize_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to set the buffer size", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_Serialize_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to serialize the metadata", v2, v3, v4, v5, v6);
}

void VCSpatialAudioMetadata_SetNeedsRefresh_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void _VCSpatialAudioMetadata_Finalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void _VCSpatialAudioMetadata_Finalize_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d The metadata still has an active channel. Unable to release the metadata", v2, v3, v4, v5, v6);
}

void _VCSpatialAudioMetadataEntry_Finalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata entry is NULL", v2, v3, v4, v5, v6);
}

void _VCSpatialAudioMetadataEntry_Finalize_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
}

void _VCSpatialAudioMetadataEntry_Finalize_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Channel is NULL", v2, v3, v4, v5, v6);
}

void VCTimescalePSOLA_CheckforSignalCorrelation_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCTimescalePSOLA_CheckforSignalCorrelation";
  __int16 v6 = 1024;
  int v7 = 387;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Down sample coarse correlation failed", (uint8_t *)&v2, 0x1Cu);
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Passed in NULL for remoteImageQueue", v2, v3, v4, v5, v6);
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate remoteImageQueue", v2, v3, v4, v5, v6);
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to create FigRemoteQueueSender err=%d", v2, v3, v4, 52);
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_4()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v4 = 55;
  __int16 v5 = v0;
  int v6 = 2000;
  __int16 v7 = v0;
  int v8 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Could not set maximum buffer age=%d err=%d", v3, 0x28u);
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not create the shared memory pool for the new VCRemoteImageQueue sender returning NULL", v2, v3, v4, v5, v6);
}

void VCRemoteImageQueue_CreateReceiverQueue_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not allocate space for the new VCRemoteImageQueue receiver, returning NULL", v2, v3, v4, v5, v6);
}

void VCRemoteImageQueue_CreateReceiverQueue_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to create FigRemoteQueueReceiver", v2, v3, v4, v5, v6);
}

void VCRemoteImageQueue_CreateReceiverQueue_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to create FigRemoteQueueReceiverHandler", v2, v3, v4, v5, v6);
}

void VCRemoteImageQueue_CreateReceiverQueue_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Passed in NULL sender queue or NULL remoteImageQueue to the Receiver create.", v2, v3, v4, v5, v6);
}

void VCRemoteImageQueue_EnqueueFrame_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error occurred when sending the video frame. err=%d", v2, v3, v4, 167);
}

void VCAudioDump_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Parameter passed is NULL", v2, v3, v4, v5, v6);
}

void VCAudioDump_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for audio dump", v2, v3, v4, v5, v6);
}

void VCAudioDump_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate memory for audio dump packet", v2, v3, v4, v5, v6);
}

void _VCAudioDump_CreateFile_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ExtAudioFileWriteAsync failed with error=%d", v2, v3, v4, v5);
}

void _VCAudioDump_CreateFile_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ExtAudioFileWrapAudioFileID failed with error=%d", v2, v3, v4, v5);
}

void _VCAudioDump_CreateFile_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d AudioFileCreateWithURL failed with error=%d", v2, v3, v4, v5);
}

void VCAudioPlayerDTMF_Initialize_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 55;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create the float converter", (uint8_t *)&v2, 0x1Cu);
}

void VCAudioPlayerDTMF_Initialize_cold_2(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 61;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create the tone generator", (uint8_t *)&v2, 0x1Cu);
}

void _VCAudioPlayerDTMF_ShouldPurgeJitterQueue_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 32);
  int v4 = 136316418;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  __int16 v7 = "_VCAudioPlayerDTMF_ShouldPurgeJitterQueue";
  __int16 v8 = 1024;
  int v9 = 114;
  __int16 v10 = 2048;
  uint64_t v11 = a2;
  __int16 v12 = 1024;
  int v13 = v3;
  __int16 v14 = 1024;
  int v15 = 1;
  _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCAudioPlayerDTMF[%p] Should Purge re-transmitted end events, eventTimeStamp=%d, result=%d", (uint8_t *)&v4, 0x32u);
}

void VCTransportStreamCommonCopyProperty_cold_1()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  uint64_t v5 = "VCTransportStreamCommonCopyProperty";
  __int16 v6 = 1024;
  int v7 = 92;
  __int16 v8 = 2112;
  uint64_t v9 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unsupported property '%@' requested", v3, 0x26u);
}

void VCTransportStreamCommonSetSendFailedHandler_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL sendFailedHandler", v2, v3, v4, v5, v6);
}

void VCTransportStreamCommonSetSendFailedHandler_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d sendFailedHandler can only be set in created state", v2, v3, v4, v5, v6);
}

void VCTransportStreamCommonSetReceivedHandler_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL receivedHandler", v2, v3, v4, v5, v6);
}

void VCTransportStreamCommonSetReceivedHandler_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d receivedHandler can only be set in created state", v2, v3, v4, v5, v6);
}

void VCBlockBuffer_Copy_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCBlockBuffer_Copy";
  __int16 v6 = 1024;
  int v7 = 17;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Attempt to copy a block buffer to an NULL poiner", (uint8_t *)&v2, 0x1Cu);
}

void VCMediaRecorderUtil_CreateResizeFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d , transferSession is NULL", v2, v3, v4, v5, v6);
}

void VCMediaRecorderUtil_CreateResizeFrame_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d , bufferPool is NULL", v2, v3, v4, v5, v6);
}

void VCMediaRecorderUtil_CreateResizeFrame_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d , VTPixelTransferSessionTransferImage failed", v2, v3, v4, v5, v6);
}

void VCMediaRecorderUtil_CreateResizeFrame_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d , CVPixelBufferPoolCreatePixelBuffer failed", v2, v3, v4, v5, v6);
}

void VCVideoStreamReceiveGroup_UpdateSourcePlayoutTime_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 725;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Receiver group is NULL", v1, 0x1Cu);
}

void VCVideoStreamReceiveGroup_UpdateSourcePlayoutTime_cold_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 726;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Playout time is NULL", v1, 0x1Cu);
}

void _VCPacketBundler_CleanupCDRXInfo_cold_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VCPacketBundler_CleanupCDRXInfo";
  OUTLINED_FUNCTION_3();
  int v4 = 62;
  __int16 v5 = 2048;
  uint64_t v6 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d cdrxInfo=[%p]", v2, 0x26u);
}

void VCPacketBundler_BundleAudio_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d : bundler can't mix payload types", v2, v3, v4, v5, v6);
}

void VCAudioPacketBundler_UpdatePriority_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VCAudioPacketBundler_UpdatePriority";
  OUTLINED_FUNCTION_3();
  int v3 = 432;
  __int16 v4 = 2048;
  uint64_t v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d NULL access: packetBundler=[%p]", v1, 0x26u);
}

void VCPacketBundler_StoreAndEnqueueCdrxInfo_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 144);
  int v4 = 136316162;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  uint64_t v7 = "VCPacketBundler_StoreAndEnqueueCdrxInfo";
  __int16 v8 = 1024;
  int v9 = 530;
  __int16 v10 = 2048;
  uint64_t v11 = a2;
  __int16 v12 = 2048;
  uint64_t v13 = v3;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d NULL access: packetBundler=[%p], packetBundler->_cdrxBundleInfoRef=[%p]", (uint8_t *)&v4, 0x30u);
}

void VCPacketBundler_StoreAndEnqueueCdrxInfo_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCPacketBundler_StoreAndEnqueueCdrxInfo";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Cdrx event queue enqueue failed with error=%d", v2, *(const char **)v3, (unint64_t)"VCPacketBundler_StoreAndEnqueueCdrxInfo" >> 16, 549);
}

void VCVideoCaptureServer_OnCaptureVideoFrame_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoCaptureServer [%s] %s:%d captureSource must not be NULL", v2, v3, v4, v5, v6);
}

void VCVideoCaptureServer_ApplyPressureLevelChanges_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoCaptureServer [%s] %s:%d captureSource must not be NULL", v2, v3, v4, v5, v6);
}

void VCVideoCaptureServer_CopyLocalVideoAttributes_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoCaptureServer [%s] %s:%d captureServer must not be NULL", v2, v3, v4, v5, v6);
}

void _VCVideoCaptureServer_ProcessPreviewSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoCaptureServer [%s] %s:%d VCImageQueue is nil!", v2, v3, v4, v5, v6);
}

void _VCVideoCaptureServer_ProcessPreviewSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_7_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCVideoCaptureServer [%s] %s:%d Invalid camera, _currentVideoSourceToken=0x%x", v2, v3, v4, v5);
}

void _VCVideoCaptureServer_ProcessPreviewSampleBuffer_cold_3()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VCVideoCaptureServer_EnqueueFrameToQueueFront";
  OUTLINED_FUNCTION_3();
  int v4 = 1633;
  __int16 v5 = 2048;
  uint64_t v6 = 0x4024000000000000;
  OUTLINED_FUNCTION_7_3(&dword_1E1EA4000, v0, v1, "VCVideoCaptureServer [%s] %s:%d VCVideoCaptureServer: KILLING PREVIEW after %g seconds of faltered rendering", v2);
}

void _VCMediaQueue_GetInternalQueueIndexFromStreamId_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d internalQueueIndex should not be NULL!", v2, v3, v4, v5, v6);
}

void _VCMediaQueue_GetInternalQueueIndexFromStreamId_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d isRTXStream should not be TRUE", v2, v3, v4, v5, v6);
}

void VCMediaQueue_FreeMediaPacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d VCMediaQueue is null", v2, v3, v4, v5, v6);
}

void VCMediaQueue_FreeMediaPacket_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaQueue_FreeMediaPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Media packets are drained from the busy pool of mediaQueueStreamId=%u out of order!", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_FreeMediaPacket" >> 16, v4);
}

void _VCMediaQueue_SchedulePackets_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Unknown schedule policy %d", v2, v3, v4, v5);
}

void _VCMediaQueue_SchedulePacketsWithLimitedBudget_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, "VCMediaQueue [%s] %s:%d Starting budget in this interval: %d", v1, 0x22u);
}

void _VCMediaQueue_ScheduleThrottlingQueuesAndReduceRemainingBudget_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Schedule policy %d should not reach here!", v2, v3, v4, v5);
}

void _VCMediaQueue_ScheduleFramesFromThrottlingQueue_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCMediaQueue_ScheduleFramesFromThrottlingQueue";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to add packet to bundler! status=%d", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_ScheduleFramesFromThrottlingQueue" >> 16, v4);
}

void _VCMediaQueue_SendAndFreePackets_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "_VCMediaQueue_SendAndFreePackets";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  __int16 v4 = v0;
  int v5 = 30;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "VCMediaQueue [%s] %s:%d Datagram count %d is larger than VTP max compound packet datagram count %d", v2, 0x28u);
}

void _VCMediaQueue_SendAndFreePackets_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to encrypt/authenticate packet. Dropping packet...", v2, v3, v4, v5, v6);
}

void _VCMediaQueue_SendAndFreePackets_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d encyptedPayloadOffset must not be 0", v2, v3, v4, v5, v6);
}

void _VCMediaQueue_SendAndFreePackets_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Deferred encryption and authentication was requested but securityCallback is NULL", v2, v3, v4, v5, v6);
}

void _VCMediaQueue_SendAndFreePackets_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Deferred encryption and authentication was requested but securityCallbackContext is NULL", v2, v3, v4, v5, v6);
}

void _VCMediaQueue_SendAndFreePackets_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCMediaQueue_ProcessDeferredEncryptionAndAuthentication";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Security callback failed with result=%08X", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_ProcessDeferredEncryptionAndAuthentication" >> 16, v4);
}

void _VCMediaQueue_SendAndFreePackets_cold_7()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Not sending the malformatted packet out from VCMediaQueue! with timestamp=%d", v2, v3, v4, v5);
}

void _VCMediaQueue_RateStats_TrackMediaPacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d mediaPacket or rateStats cannot be NULL", v2, v3, v4, v5, v6);
}

void _VCMediaQueue_PreAllocVCMediaPacketsInFreePool_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Out of memory when creating CMBlockBuffer!", v2, v3, v4, v5, v6);
}

void _VCMediaQueue_PreAllocVCMediaPacketsInFreePool_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCMediaQueue_PreAllocVCMediaPacketsInFreePool";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to enqueue! status: %d", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_PreAllocVCMediaPacketsInFreePool" >> 16, v4);
}

void _VCMediaQueue_CreateInternalQueue_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Out of memory when creating internal queues!", v2, v3, v4, v5, v6);
}

void _VCMediaQueue_CreateInternalQueue_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCMediaQueue_CreateInternalQueue";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Error from _VCMediaQueue_PreAllocVCMediaPacketsInFreePool, result %x", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_CreateInternalQueue" >> 16, v4);
}

void _VCMediaQueue_DestroyInternalQueuePool_cold_1(uint64_t a1, CMSimpleQueueRef queue, NSObject *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CMSimpleQueueGetCount(queue);
  int v8 = 136316162;
  uint64_t v9 = a1;
  __int16 v10 = 2080;
  uint64_t v11 = "_VCMediaQueue_DestroyInternalQueuePool";
  OUTLINED_FUNCTION_3();
  int v12 = 1597;
  __int16 v13 = v6;
  int v14 = v7;
  __int16 v15 = 2048;
  CMSimpleQueueRef v16 = queue;
  _os_log_debug_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_DEBUG, "VCMediaQueue [%s] %s:%d count=%d in pool=%p", (uint8_t *)&v8, 0x2Cu);
}

void VCMediaQueue_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Number of internal queues are set too large", v2, v3, v4, v5, v6);
}

void VCMediaQueue_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Not enough memory to create run time instance", v2, v3, v4, v5, v6);
}

void VCMediaQueue_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to create internal thread", v2, v3, v4, v5, v6);
}

void VCMediaQueue_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d VCMediaQueue IN/OUT RealTime stats cannot be malloced", v2, v3, v4, v5, v6);
}

void VCMediaQueue_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to reserve RTX queue", v2, v3, v4, v5, v6);
}

void VCMediaQueue_Create_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to create packet bundler", v2, v3, v4, v5, v6);
}

void VCMediaQueue_Create_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Not enough memory to create internal queues", v2, v3, v4, v5, v6);
}

void VCMediaQueue_Create_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Not enough memory to create main queue", v2, v3, v4, v5, v6);
}

void VCMediaQueue_SetAudioStallBasebandFlushState_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d mediaQueue cannot be NULL", v2, v3, v4, v5, v6);
}

void VCMediaQueue_SetAudioStallBasebandFlushState_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot set audio stall state to flush baseband other than in oneToOne mode!", v2, v3, v4, v5, v6);
}

void VCMediaQueue_AllocMediaPacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaQueue_AllocMediaPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot get internal queue index for mediaQueueStreamId=%u", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AllocMediaPacket" >> 16, v4);
}

void VCMediaQueue_AllocMediaPacket_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaQueue_AllocMediaPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot get media packet from its pool for mediaQueueStreamId=%u", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AllocMediaPacket" >> 16, v4);
}

void VCMediaQueue_AllocMediaPacket_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaQueue_AllocMediaPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to enqueue! status: %d", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AllocMediaPacket" >> 16, v4);
}

void VCMediaQueue_AllocMediaPacket_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaQueue_AllocMediaPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to get internal queue index for mediaQueueStreamId=%u", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AllocMediaPacket" >> 16, v4);
}

void VCMediaQueue_AddPacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCMediaQueue_ProcessAudioPacketsForBasebandQueuing";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot issue audio flush to baseband using VCMediaQueue result=%x", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_ProcessAudioPacketsForBasebandQueuing" >> 16, v4);
}

void VCMediaQueue_AddPacket_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaQueue_AddPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Add media packet for an unknown packet type %d", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AddPacket" >> 16, v4);
}

void VCMediaQueue_FlushPacketsInStream_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCMediaQueue_FlushPacketsInStream";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot get internal queue index for mediaQueueStreamId=%u", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_FlushPacketsInStream" >> 16, v4);
}

void VCMediaQueue_SetMediaQueueSizeThresholdExceededBlock_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Callback is NULL", v2, v3, v4, v5, v6);
}

void VCMediaQueue_ComputeOneToOneStatsWithPacketInfo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d mediaQueue cannot be NULL", v2, v3, v4, v5, v6);
}

void VCMediaQueue_ComputeOneToOneStatsWithPacketInfo_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d VCMediaQueue is not in the oneToOne mode yet", v2, v3, v4, v5, v6);
}

void VCMediaQueue_TrafficMetricFromMediaQueueTxHistory_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d Passed mediaQueue is nil", v2, v3, v4, v5, v6);
}

void VCMediaQueue_BasebandFlushAcked_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaQueue [%s] %s:%d mediaQueue cannot be NULL", v2, v3, v4, v5, v6);
}

void VCVirtualHardwareConfigurations_DevicePlatform_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  uint8_t v6 = "VCVirtualHardwareConfigurations_DevicePlatform";
  __int16 v7 = 1024;
  int v8 = 62;
  __int16 v9 = 2112;
  uint64_t v10 = a2;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to find platform for device=%@", (uint8_t *)&v3, 0x26u);
}

void VCVirtualHardwareConfigurations_DevicePlatform_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  __int16 v5 = "VCVirtualHardwareConfigurations_DevicePlatform";
  __int16 v6 = 1024;
  int v7 = 63;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Bad lookup - device listed on both platforms", (uint8_t *)&v2, 0x1Cu);
}

void statsReceiveProc_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d statsController is NULL!", v2, v3, v4, v5, v6);
}

void statsReceiveProc_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Receive packet from transport stream fails!", v2, v3, v4, v5, v6);
}

void _VCSessionStatsController_HandleRemoteSessionStats_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid remoteSessionStats", v2, v3, v4, v5, v6);
}

void _VCSessionStatsController_HandleRemoteSessionStats_cold_2(uint64_t a1, unsigned __int16 *a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  int v7 = "_VCSessionStatsController_HandleRemoteSessionStats";
  __int16 v8 = 1024;
  int v9 = 418;
  __int16 v10 = 1024;
  int v11 = v3;
  _os_log_debug_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d statsID is same as the previous one %u", (uint8_t *)&v4, 0x22u);
}

void _VCCannedAudioInjector_AudioConverterInput_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ioNumberDataPackets is nil", v2, v3, v4, v5, v6);
}

void _VCCannedAudioInjector_AudioConverterInput_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Converter is nil", v2, v3, v4, v5, v6);
}

void _VCCannedAudioInjector_AudioConverterInput_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ioData is nil", v2, v3, v4, v5, v6);
}

void _VCCannedAudioInjector_AudioConverterInput_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d inUserData is nil", v2, v3, v4, v5, v6);
}

void VCAudioUnit_NewInstance_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCAudioUnit_NewInstance";
  __int16 v6 = 1024;
  int v7 = 47;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Dynamic ducker component not found.", (uint8_t *)&v2, 0x1Cu);
}

void VCAudioUnit_NewInstance_cold_2(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  __int16 v6 = "VCAudioUnit_NewInstance";
  __int16 v7 = 1024;
  int v8 = 52;
  __int16 v9 = 1024;
  int v10 = a2;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create a dynamic ducker instance err=%d", (uint8_t *)&v3, 0x22u);
}

void _VCRateControlAlgorithmLowLatencyContinuousTier_DoRateControl_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_VCRateControlAlgorithmLowLatencyContinuousTier_DoRateControl";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type=%d to do rate control", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmLowLatencyContinuousTier_DoRateControl" >> 16, 73);
}

void _VCRateControlAlgorithmLowLatencyContinuousTier_DoRateControl_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "_VCRateControlAlgorithmLowLatencyContinuousTier_RunRateControlStateTransition";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state=%d", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmLowLatencyContinuousTier_RunRateControlStateTransition" >> 16, 132);
}

void VCRateControlSmartBrake_ResetState_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d smartBrake is NULL", v2, v3, v4, v5, v6);
}

void VCRateControlSmartBrake_ResetState_cold_2()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v3 = v0;
  uint64_t v4 = "VCRateControlSmartBrake_ResetState";
  __int16 v5 = 1024;
  OUTLINED_FUNCTION_8_1();
  __int16 v6 = 2048;
  uint64_t v7 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d %@(%p) smartBrake is NULL", v2, 0x30u);
}

void VCMediaStreamSynchronizer_updateDestinationNTPTime_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer=nil", v2, v3, v4, v5, v6);
}

void VCMediaStreamSynchronizer_scheduleDestinationPlaybackWithRTPTimestamp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer=nil", v2, v3, v4, v5, v6);
}

void VCMediaStreamSynchronizer_resetDestinationState_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer=nil", v2, v3, v4, v5, v6);
}

void VCMediaStreamSynchronizer_setDestinationAlarmHandler_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer=nil", v2, v3, v4, v5, v6);
}

void _VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal";
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d VCMediaStreamSynchronizer[%p]: source info not ready", v2, *(const char **)v3, (unint64_t)"_VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal" >> 16, v4);
}

void _VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal";
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d VCMediaStreamSynchronizer[%p]: destination info not ready", v2, *(const char **)v3, (unint64_t)"_VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal" >> 16, v4);
}

void VCMediaStreamSynchronizer_setSourcePlayoutTimeUpdatedHandler_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer is nil", v2, v3, v4, v5, v6);
}

void VCRealTimeThread_Initialize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate real time thread", v2, v3, v4, v5, v6);
}

void VCRealTimeThread_Initialize_cold_2()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 86;
  __int16 v4 = v0;
  int v5 = 86;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCRealTimeThread.c:%d: Failed to start the thread", v2, 0x22u);
}

void VCRealTimeThread_ChangeState_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_14_0();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x28u);
}

void VCRealTimeThread_ChangeState_cold_2()
{
  OUTLINED_FUNCTION_14_0();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x22u);
}

void VCRealTimeThread_Finalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d called with NULL context!", v2, v3, v4, v5, v6);
}

void VCRealTimeThread_Start_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d called with NULL context!", v2, v3, v4, v5, v6);
}

void VCRealTimeThread_Stop_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d called with NULL context!", v2, v3, v4, v5, v6);
}

void VCRealTimeThread_ThreadProc_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_14_0();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x2Eu);
}

void VCStreamInputUtil_EncodeFormatDescription_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d dictXPCObj returned NULL", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_EncodeFormatDescription_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to add the format description", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_AddFormatDescription_cold_1(uint64_t a1, int a2)
{
  FourccToCStr(a2);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0(&dword_1E1EA4000, v2, v3, " [%s] %s:%d Unsupported mediaType=%s", v4, v5, v6, v7, v8);
}

void _VCStreamInputUtil_AddFormatDescription_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create XPC object for the format extensions", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_AddFormatDescription_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create XPC object for height", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_AddFormatDescription_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create XPC object for width", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_AddFormatDescription_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to extract audio stream basic description from formatDescription", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_AddFormatDescription_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d dataXPCObj is NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_AddFormatDescription_cold_7(uint64_t a1, int a2)
{
  FourccToCStr(a2);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0(&dword_1E1EA4000, v2, v3, " [%s] %s:%d Failed to create XPC object for mediaType=%s", v4, v5, v6, v7, v8);
}

void _VCStreamInputUtil_AddFormatDescription_cold_8(uint64_t a1, int a2)
{
  FourccToCStr(a2);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_10_0(&dword_1E1EA4000, v2, v3, " [%s] %s:%d Failed to create XPC object for mediaType=%s", v4, v5, v6, v7, v8);
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d pixelBuffer is NULL", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d dictXPCObj returned NULL", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CVPixelBufferGetIOSurface returned NULL", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d IOSurfaceCreateXPCObject returned NULL", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to add format", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to add time info", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to encode audio sample buffer for XPC", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to add sample count to XPC dictionary for audio sample buffer", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d dataBlock is NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d dataLength is 0", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d temp buffer is NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d rootData is NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d formatDescription is NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d dictXPCObj is NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d dataXPCObj is NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d formatDescription is NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_9()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to add time info", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_10()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCStreamInputUtil_EncodeDataSampleBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to copy data bytes status=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_EncodeDataSampleBuffer" >> 16, v4);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCStreamInputUtil_DecodeVideoFormat";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create format description. status=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeVideoFormat" >> 16, v4);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read extensions", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read the height", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read the width", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read the pixel format", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCStreamInputUtil_DecodeMetaDataFormat";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create format description. status=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeMetaDataFormat" >> 16, v4);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read extensions", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_8()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read the pixel format", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_9()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCStreamInputUtil_DecodeAudioFormat";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d xpc_data_get_bytes returned an unexpected size=%d for the audio format", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeAudioFormat" >> 16, 395);
}

void VCStreamInputUtil_DecodeFormatDescription_cold_10()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read the media type", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_ReadUint32Value_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d XPC object not found for %s", v2, v3, v4, v5);
}

void _VCStreamInputUtil_ReadUint32Value_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create number ref for %s", v2, v3, v4, v5);
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Incompatible media type", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to retrieve the pixel buffer", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to retrieve the format description", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to decode audio sample buffer", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read the audio sample count", v2, v3, v4, v5, v6);
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to read the media type", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to decode the block buffer", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Data is missing in XPC dictionary", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to retrieve data buffer from XPC dictionary", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to decode the format description", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to decode the time", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCStreamInputUtil_DecodeBlockBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected data length=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeBlockBuffer" >> 16, 368);
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate temporary buffer", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_8()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCStreamInputUtil_DecodeBlockBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Error creating CMBlockBufferRef from CFData. status=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeBlockBuffer" >> 16, v4);
}

void _VCStreamInputUtil_AddUint32Value_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate value ref for %s", v2, v3, v4, v5);
}

void _VCStreamInputUtil_AddUint32Value_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create XPC object for media type", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_EncodeSampleBufferAttachments_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Could not encode CMSampleBuffer attachments", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_AddTime_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMSampleBuffer time returned NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_AddTime_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d timeXPCObj returned NULL", v2, v3, v4, v5, v6);
}

void _VCStreamInputUtil_DecodeSampleBufferAttachments_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to decode samplebuffer attachments", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimator_SetRadioAccessTechnology_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimator_SetEstimatedBandwidth_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimator_SetFastSuddenBandwidthDetectionEnabled_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimator_CalculateBandwidthEstimation_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimator_CalculateBandwidthEstimationForBandwidthSample_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimatorMap_BandwidthEstimator_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimatorMap_DeregisterBandwidthEstimator_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimatorMap_EstimatedBandwidthWithArrivalTime_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimatorMap_EstimatedBandwidthUncappedWithArrivalTime_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimatorMap_SetEstimatedBandwidth_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimatorMap_SetRadioAccessTechnology_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimatorMap_SetFastSuddenBandwidthDetectionEnabled_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
}

void VCRateControlBandwidthEstimatorMap_EnableBWELogDump_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_6_5(&dword_1E1EA4000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
}

void _VCFECHeader_WriteToBuffer_V0_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
}

void _VCFECHeader_WriteToBuffer_V0_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
}

void _VCFECHeader_WriteToBuffer_V0_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
}

void _VCFECHeader_WriteToBuffer_V0_cold_4()
{
  OUTLINED_FUNCTION_12_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FEC header version not supported version=%d", v2, v3, v4, v5);
}

void _VCFECHeader_WriteToBuffer_V1_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
}

void _VCFECHeader_WriteToBuffer_V1_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
}

void _VCFECHeader_WriteToBuffer_V1_cold_3()
{
  OUTLINED_FUNCTION_12_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d FEC header version not supported version=%d", v2, v3, v4, v5);
}

void VCFECHeader_WriteToBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d output buffer pointer NULL", v2, v3, v4, v5, v6);
}

void VCFECHeader_WriteToBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d size pointer NULL", v2, v3, v4, v5, v6);
}

void VCFECHeader_WriteToBuffer_cold_3()
{
  OUTLINED_FUNCTION_12_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid fec header version=%d", v2, v3, v4, v5);
}

void VCFECHeader_WriteToBuffer_cold_4()
{
  OUTLINED_FUNCTION_12_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d failed to write version specific fields version=%d", v2, v3, v4, v5);
}

void VCTimescalePSOLA_PreEmptiveExpand_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  int v5 = "VCTimescalePSOLA_PreEmptiveExpand";
  __int16 v6 = 1024;
  int v7 = 147;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Signal Correlation check failed", (uint8_t *)&v2, 0x1Cu);
}

void VCAudioBufferAllocatorCreate_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid buffer size=%zu!", v1, 0x26u);
}

void VCAudioBufferAllocatorCreate_cold_2()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 132;
  __int16 v4 = v0;
  int v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid buffer count=%u!", v2, 0x22u);
}

void VCAudioBufferAllocatorCreate_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create the allocator info!", v2, v3, v4, v5, v6);
}

void VCAudioBufferAllocatorCreate_cold_4()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6_8();
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d After byte-alignment, bufferSize=%zu is zero!", v1, 0x26u);
}

void VCAudioBufferAllocatorCreate_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the context!", v2, v3, v4, v5, v6);
}

void VCAudioBufferAllocatorCleanupBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Audio buffer corruption!", v2, v3, v4, v5, v6);
}

float _VCFECFeedbackAnalyzer_Configure_cold_1(uint64_t a1, double *a2, os_log_t log)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  float v3 = *a2;
  int v5 = 136315906;
  uint64_t v6 = a1;
  __int16 v7 = 2080;
  uint64_t v8 = "_VCFECFeedbackAnalyzer_Configure";
  __int16 v9 = 1024;
  int v10 = 137;
  __int16 v11 = 2048;
  double v12 = v3;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d levelMatchPercentile = %2.3f out of valid range", (uint8_t *)&v5, 0x26u);
  return result;
}

void _VCFECFeedbackAnalyzer_Configure_cold_2(uint64_t a1, int *a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  int v4 = 136315906;
  uint64_t v5 = a1;
  __int16 v6 = 2080;
  __int16 v7 = "_VCFECFeedbackAnalyzer_Configure";
  __int16 v8 = 1024;
  int v9 = 138;
  __int16 v10 = 1024;
  int v11 = v3;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d buffer size out of valid range bufferMaxSize = %d", (uint8_t *)&v4, 0x22u);
}

void VCFECFeedbackAnalyzer_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
}

void VCFECFeedbackAnalyzer_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL config", v2, v3, v4, v5, v6);
}

void VCFECFeedbackAnalyzer_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
}

void VCFECFeedbackAnalyzer_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d history buffer allocate failed", v2, v3, v4, v5, v6);
}

void VCFECFeedbackAnalyzer_Create_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid configuration", v2, v3, v4, v5, v6);
}

void VCFECFeedbackAnalyzer_ProcessFeedback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCFECFeedbackAnalyzer_GetFECLevelVector_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCFECFeedbackAnalyzer_GetFECLevelVector_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL outputVector", v2, v3, v4, v5, v6);
}

void VCFECFeedbackAnalyzer_GetFECLevelVector_cold_3()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 478;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d output not ready", v1, 0x1Cu);
}

void VCFECFeedbackAnalyzer_GetVPLR_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL fecAnalyzer", v2, v3, v4, v5, v6);
}

void VCFECFeedbackAnalyzer_CleanHistory_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCFragmentationHeader_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPLRP.c:%d: Invalid fragmentation unit length (%d)", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCFragmentationHeader_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPLRP.c:%d: Invalid fragmentation unit length (%d)", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCFragmentationHeader_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received decoding order is %hu", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the default header bytes", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCPacket_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append the default data", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCPacket_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append default header buffer. Status=%d", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_6()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received decoding order is %hu", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_7()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPLRP.c:%d: Invalid aggregation unit length (%d) for H264NALU_STAP_A packet, discarded.", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCPacket_cold_11()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the HEVCNALU_AP header bytes", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCPacket_cold_12()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append the HEVCNALU_AP data", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCPacket_cold_13()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append HEVCNALU_AP header buffer. Status=%d", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_14()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  LOWORD(v6) = 0;
  HIWORD(v6) = v0;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPLRP.c:%d: Invalid fragmentation unit length (%d)", v3, v4, v5, 243, v6);
}

void RTPProcessHEVCPacket_cold_15()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append the HEVCNALU_FU data", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCPacket_cold_16()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Received decoding order is %hu", v2, v3, v4, v5);
}

void RTPProcessHEVCPacket_cold_17()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the HEVCNALU_FU header bytes", v2, v3, v4, v5, v6);
}

void RTPProcessHEVCPacket_cold_18()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to append HEVCNALU_FU header buffer. Status=%d", v2, v3, v4, v5);
}

void VCAudioBufferList_Allocate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_Allocate_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate buffer list", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_ZeroMemory_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_InvalidateStats_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_ApplyGain_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_ApplyGain_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d No support for interleaved audio channels", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_Mix_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d No support for interleaved audio channels", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_Mix_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Formats don't match", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_Mix_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_MixToMono_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d No support for interleaved audio channels", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_MixToMono_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d No support for non Float formats", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_MixToMono_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 136315906;
  *(void *)&v3[4] = a1;
  *(_WORD *)&uint8_t v3[12] = 2080;
  *(void *)&unsigned char v3[14] = "VCAudioBufferList_MixToMono";
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, a2, a3, " [%s] %s:%d Invalid number of source buffers, mNumberBuffers=%u", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"VCAudioBufferList_MixToMono" >> 16, 327);
}

void VCAudioBufferList_MixToMono_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_AppendSamples_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to append all the source samples!", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_AppendSamples_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_AppendSilence_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_AppendSilence_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to append all the source samples!", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_ReplaceSamples_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_Shift_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_Convert_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioBufferList_Convert";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d failed with %d", v2, *(const char **)v3, (unint64_t)"VCAudioBufferList_Convert" >> 16, v4);
}

void VCAudioBufferList_Convert_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferListConverterCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d One of the pointers passed to AudioConverterInput callback is NULL", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetSampleFormat_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetAudioBufferList_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetSizedBufferAtIndex_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioBufferList_GetSizedBufferAtIndex";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d invalid input parameter. Index=%u", v2, *(const char **)v3, (unint64_t)"VCAudioBufferList_GetSizedBufferAtIndex" >> 16, v4);
}

void VCAudioBufferList_Reset_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_ResetDataPointers_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_ResampleAppend_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d converter failed", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_InvalidateAveragePower_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetTimestamp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetAudioTimestamp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetHostTimeJumpSize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetHostTime_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetVoiceActivity_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_SetVoiceActivity_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetSampleCount_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetSampleCapacity_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetChannelCount_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_SetSilenceInQueue_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_IsSilenceInQueue_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetAveragePower_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_SetAveragePower_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetSerializedSize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetPriority_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_SetPriority_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_InvalidateNetworkTimestamp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_SetNetworkTimestamp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetNetworkTimestamp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_GetVoiceProbability_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_SetVoiceProbability_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_CopySampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid sample buffer", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_CopySampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid output sample buffer", v2, v3, v4, v5, v6);
}

void VCAudioBufferList_CopySampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the output sample buffer", v2, v3, v4, v5, v6);
}

void VCNetworkAgentCell_AddCellularAssertion_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to overwrite network status bar icon", v2, v3, v4, v5, v6);
}

void VCNetworkAgentCell_RemoveCellularAssertion_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to remove overwrite network status bar icon", v2, v3, v4, v5, v6);
}

void VCAudioUnitMockMicThreadProc_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VCAudioUnitMockMicThreadProc";
  __int16 v4 = 1024;
  int v5 = 184;
  __int16 v6 = v0;
  __int16 v7 = "com.apple.VideoConference.VCAudioUnitMock.MicThread";
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioUnitMock Mic thread=%s terminated", v2, 0x26u);
}

void AUIOCreateHandle_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AUIO=%p Failed to find component", v2, v3, v4, v5);
}

void AUIOCreateHandle_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty failed(%X)", v2, v3, v4, v5, v6);
}

void AUIOCreateHandle_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty failed(%X)", v2, v3, v4, v5, v6);
}

void AUIOCreateHandle_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty failed(%X)", v2, v3, v4, v5, v6);
}

void AUIOCreateHandle_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioComponentInstanceNew failed(%X)", v2, v3, v4, v5, v6);
}

void _AUIOMicProc()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d getting called with no inRefCon!", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d Corrupted metadata!", v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AudioUnitComplexRender: error %d", v2, v3, v4, v5);
}

void AUIOSetupSystemAudioTap()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: System Audio Tap initalization failed(%X)", v2, v3, v4, v5, v6);
}

void AUIOSetupRendererCallback()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty failed(%X)", v2, v3, v4, v5, v6);
}

void AUIOSuspend_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AUIO Unit is not found during reinitialization", v2, v3, v4, v5, v6);
}

void AUIOSuspend_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AudioUnitUninitialize failed(%d)", v2, v3, v4, v5);
}

void AUIOSuspend_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AudioOutputUnitStop failed(%d)", v2, v3, v4, v5);
}

void AUIOResume_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: Failed to restart the packet thread result=%x", v2, v3, v4, v5, v6);
}

void AUIOResume_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioOutputUnitStart returned %d", v2, v3, v4, v5, v6);
}

void _AUIOStartPacketThread()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d Failed to create the packet thread. auio=%p", v2, v3, v4, v5);
}

{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d Packet thread is already running. auio=%p", v2, v3, v4, v5);
}

void AUIOSetupFormats_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d Failed to allocate the canned audio injector config", v2, v3, v4, v5, v6);
}

void AUIOSetupFormats_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d Failed to allocate the canned audio injector", v2, v3, v4, v5, v6);
}

void AUIOSetupFormats_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AudioUnitGetProperty(MaximumMetadataByteSize) failed(%d)", v2, v3, v4, v5);
}

void AUIOSetupFormats_cold_4(uint64_t a1, int *a2, NSObject *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  FourccToCStr(*a2);
  int v9 = 136316162;
  uint64_t v10 = a1;
  __int16 v11 = 2080;
  OUTLINED_FUNCTION_8();
  int v12 = 1623;
  __int16 v13 = v6;
  int v14 = v5;
  __int16 v15 = v7;
  uint64_t v16 = v8;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, "AUIO [%s] %s:%d AudioUnitInitialize failed. err=%d (%s)", (uint8_t *)&v9, 0x2Cu);
}

void AUIOSetupFormats_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  HIWORD(v7) = v0;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v1, v2, "AUIO [%s] %s:%d AudioUnitSetProperty failed to set property kAUVoiceIOProperty_MuteOutput with error %08x %d", v3, v4, v5, v6, v7);
}

void AUIOSetupFormats_cold_6()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AudioUnitSetProperty(RequestMetadata) failed(%d)", v2, v3, v4, 1510);
}

void AUIOSetupFormats_cold_7()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  LOWORD(v7) = v0;
  HIWORD(v7) = v1;
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v2, v3, "AUIO [%s] %s:%d AudioUnitSetProperty failed to set property kAudioOutputUnitProperty_IOBufferDuration with error %08x %d", v4, v5, v6, 1555, v7);
}

void AUIOSetupFormats_cold_8()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_3(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty(SpkrIn) failed(%d)", v2, v3, v4, v5, v6);
}

void AUIOSetupFormats_cold_9()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AUIO=%p AudioUnitSetProperty(MicOut) Failed to allcoate the speaker audio buffer list", v2, v3, v4, v5);
}

void AUIOSetupFormats_cold_10()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AUIO=%p Failed to allocate the mic sample buffer", v2, v3, v4, v5);
}

void AUIOSetupFormats_cold_11()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AUIO=%p AudioUnitSetProperty(MicOut) Failed to allcoate the mic audio buffer list", v2, v3, v4, v5);
}

void AUIOSetSpatialMetadata_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AudioUnitSetProperty(kAUVoiceIOProperty_SpatialMetadata) failed(%d)", v2, v3, v4, v5);
}

void AUIORegisterMutedTalkerNotificationEventListener_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d Failed to set mutedTalker notification err=%d", v2, v3, v4, v5);
}

void AUIOSetDynamicDuckerVolume_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d AudioUnitSetParameter(kHALOutputParam_Volume) failed(%d)", v2, v3, v4, v5);
}

void _AUIOSpkrProc()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d getting called with no inRefCon!", v2, v3, v4, v5, v6);
}

void _AUIOSpkrProcGKS()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "AUIO [%s] %s:%d getting called with no inRefCon!", v2, v3, v4, v5, v6);
}

void _VCNetworkUtils_ComposeMaxedOutIDSOverheadOptions_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 396;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d idsOptions must not be NULL", v1, 0x1Cu);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d nil context", v2, v3, v4, v5, v6);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_12_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d nil context", v2, v3, v4, v5, v6);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_3()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 433;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d stopped processing audio packets", v1, 0x1Cu);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSystemAudioCapture_UpdateAppendBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d append sample count %d", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_UpdateAppendBuffer" >> 16, v4);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_5()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSystemAudioCapture_CopyOutputBufferNonInterFormat";
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d can not copy %d audio samples", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_CopyOutputBufferNonInterFormat" >> 16, v4);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSystemAudioCapture_CopyOutputBufferNonInterFormat";
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_10_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d can not copy %d audio samples", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_CopyOutputBufferNonInterFormat" >> 16, v4);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_7()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSystemAudioCapture_CopyOutputBufferInterFormat";
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d can not copy %d audio samples", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_CopyOutputBufferInterFormat" >> 16, v4);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_8()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSystemAudioCapture_CopyOutputBufferInterFormat";
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_10_5(&dword_1E1EA4000, v0, v1, " [%s] %s:%d can not copy %d audio samples", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_CopyOutputBufferInterFormat" >> 16, v4);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_9(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  VCAudioBufferList_GetTimestamp(*(void *)(a2 + 376));
  int v7 = 136315906;
  uint64_t v8 = a1;
  __int16 v9 = 2080;
  uint64_t v10 = "_VCSystemAudioCapture_processInputBuffer";
  OUTLINED_FUNCTION_3();
  int v11 = 475;
  __int16 v12 = v5;
  int v13 = v6;
  _os_log_debug_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_DEBUG, " [%s] %s:%d append timestamp %d", (uint8_t *)&v7, 0x22u);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_10()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSystemAudioCapture_appendInputBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d append sample count %d", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_appendInputBuffer" >> 16, v4);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_11()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d input audio bytes %d", v2, v3, v4, v5);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_12()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d input timestamp %d", v2, v3, v4, v5);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_13()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCSystemAudioCapture_handleInputBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d input sample count = %d", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_handleInputBuffer" >> 16, v4);
}

void VCVideoStream_DidReceiveSampleBuffer_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "VCVideoStream [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCVideoStream.m:%d: VCVideoStream: null object was passed to DidReceiveSampleBuffer", v2, v3, v4, v5, v6);
}

void VCVideoStream_DidReceiveSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "VCVideoStream [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCVideoStream.m:%d: VCVideoStream: no image queue/layer to draw to... This should be reported!", v2, v3, v4, v5, v6);
}

void VCVideoStream_DidReceiveSampleBuffer_cold_3()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "VCVideoStream_DidReceiveSampleBuffer";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_3(&dword_1E1EA4000, v0, (uint64_t)v0, "VCVideoStream [%s] %s:%d VCVideoStream[%p] Failed to enqueue remote frame!", v1);
}

void _VCVideoStream_DidReceiveRemoteFrame_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v2 = "_VCVideoStream_DidReceiveRemoteFrame";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_3(&dword_1E1EA4000, v0, (uint64_t)v0, "VCVideoStream [%s] %s:%d VCVideoStream[%p] failed to enqueue remote video frame!", v1);
}

void _VCVideoStream_DidReceiveRemoteFrame_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoStream [%s] %s:%d VCVideoStream: no image queue/layer to draw to... This should be reported!", v2, v3, v4, v5, v6);
}

void _VCVideoStream_DidReceiveRemoteFrame_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_5_2(&dword_1E1EA4000, v0, v1, "VCVideoStream [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCVideoStream.m:%d: VCVideoStream: null object was passed to DidReceiveRemoteFrame", v2, v3, v4, v5, v6);
}

void _VCVideoStreamNWConnectionNotificationCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoStream [%s] %s:%d Callback executed with context being nil", v2, v3, v4, v5, v6);
}

void _VCVideoStreamNWConnectionPacketEventCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoStream [%s] %s:%d Callback executed with context being nil", v2, v3, v4, v5, v6);
}

void _VCVideoStreamVTPNotificationCallback_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCVideoStreamVTPNotificationCallback";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCVideoStream [%s] %s:%d VTP callback error: unknown notificaiton=%d.", v2, *(const char **)v3, (unint64_t)"_VCVideoStreamVTPNotificationCallback" >> 16, 3823);
}

void _VCVideoStream_ReportingVideoStreamEventWithVideoAttributesAndStreamID_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoStream [%s] %s:%d No callID provided for stream!", v2, v3, v4, v5, v6);
}

void VCVideoStream_SetExternalOutputVideoLatency_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCVideoStream [%s] %s:%d videoStream is NULL", v2, v3, v4, v5, v6);
}

void VCMediaStreamGroup_ExternalRenderLatency_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d The stream group is nil", v2, v3, v4, v5, v6);
}

void _VCNACKGenerator_GetBitrate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute summer bitrate for media frames bytes", v2, v3, v4, v5, v6);
}

void _VCNACKGenerator_GetBitrate_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to compute summer bitrate for retransmitted media bytes", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL sendNACKCallback", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL sendNACKContext", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_Create_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_Create_cold_5()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_5_7();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKGenerator_Create[%p] Failed to create summer handle", v2, v3, v4, v5);
}

void VCNACKGenerator_Create_cold_6()
{
  int v2 = 136315906;
  OUTLINED_FUNCTION_5_7();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKGenerator_Create[%p] Failed to create summer handle", v2, v3, v4, v5);
}

void VCNACKGenerator_AddPacketInfo_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_AddPacketInfo_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to check bit rate limits for NACK", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_AddPacketInfo_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKGenerator[%p] Failed to add media packet length to media bit rate summer, err=%d", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_AddPacketInfo_cold_4()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 136315906;
  OUTLINED_FUNCTION_5_7();
  OUTLINED_FUNCTION_3_0();
  v2[6] = 612;
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Use cached canSendNACK, timeSinceLastCheck=%f", (uint8_t *)v2, 0x26u);
}

void VCNACKGenerator_AddPacketInfo_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to get bit rate", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_AddPacketInfo_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKGenerator[%p] Failed to get media packet count, err=%d", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_AddPacketInfo_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_4_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNACKGenerator[%p] Failed to add media packet length to retransmitted media bit rate summer, err=%d", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_UpdateRTT_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCNACKGenerator_UpdatePlayoutRTPTimestamp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
}

void VCMemoryPool_Alloc_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "VCMemoryPool_Alloc";
  __int16 v6 = 1024;
  int v7 = 36;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d parameter memory pool is NULL!", (uint8_t *)&v2, 0x1Cu);
}

void VCVirtualAVCaptureDevice_OnVideoFrame_cold_1()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  uint64_t v5 = "VCVirtualAVCaptureDevice_OnVideoFrame";
  __int16 v6 = 1024;
  int v7 = 397;
  __int16 v8 = 2048;
  uint64_t v9 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create samplebuffer from pixelBuffer[%p]", v3, 0x26u);
}

void VCVideoStreamSendGroup_OnVideoFrame_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 904;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d video no-op no MKM", v1, 0x1Cu);
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: could not create a shared instance of NAT64Resolver", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: failed on creating VCNAT64ListenerContext", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: failed on creating NAT64CallBackContext", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: failed on creating interfaceName", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: failed on creating listeners array", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverGetSharedInstance_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: failed to create VCNAT64Resolver", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverGetSharedInstance_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: failed to create interface dictionary for shared instance", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverGetSharedInstance_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: failed to create dispatch queue for shared instance", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverGetSharedInstance_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: failed to create retry queue for shared instance", v2, v3, v4, v5, v6);
}

void VCNAT64ResolveNAT64Prefix_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolveNAT64Prefix: callbackContext should not be NULL", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverGetPrefix_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetPrefix: could not create a shared instance of NAT64Resolver", v2, v3, v4, v5, v6);
}

void VCNAT64ResolverGetPrefix_cold_2()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v4 = "VCNAT64ResolverGetPrefix";
  __int16 v5 = 1024;
  int v6 = 355;
  __int16 v7 = v0;
  uint64_t v8 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCNAT64ResolverGetPrefix: can not fetch NAT64 prefix as '%s' has not been registered on NAT64Resolver", v3, 0x26u);
}

void __VCNAT64ResolveNAT64Prefix_block_invoke_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VCNAT64ResolveNAT64Prefix_block_invoke_2";
  __int16 v4 = 1024;
  int v5 = 210;
  __int16 v6 = 1024;
  int v7 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCNAT64ResolveNAT64Prefix: NAT64 prefix resolution failed with error %d", v2, 0x22u);
}

void VCSDInfoConstructWithSocket_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  __error();
  int v8 = 136316162;
  uint64_t v9 = a1;
  __int16 v10 = 2080;
  OUTLINED_FUNCTION_8();
  int v11 = 63;
  __int16 v12 = v6;
  int v13 = a2;
  __int16 v14 = v6;
  int v15 = v7;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d destinationIPPort is NULL for socket %d with getpeername errno %d", (uint8_t *)&v8, 0x28u);
}

void VCSDInfoIsPacketFromKnownRemote_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid VCSourceDestinationInfoMode:%d!", v2, v3, v4, v5);
}

void VCSDInfoIsPacketFromKnownRemote_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid VCSourceDestinationInfoMode:%d!", v2, v3, v4, v5);
}

void VCSDInfoIsSrcDstInfoMatchedWithIP_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v2 = 136316162;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  int v5 = "VCSDInfoIsSrcDstInfoMatchedWithIP";
  __int16 v6 = 1024;
  int v7 = 96;
  __int16 v8 = 1024;
  int v9 = 0;
  __int16 v10 = 1024;
  int v11 = 1;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameters! cachedSrcDstInfo isValid:%d, IPPort isValid:%d!", (uint8_t *)&v2, 0x28u);
}

void VCSDInfoIsSrcDstInfoMatchedWithIP_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid VCSourceDestinationInfoMode:%d!", v2, v3, v4, v5);
}

void VCCaptionsReceiver_ProcessCaptionsData_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  int v5 = "VCCaptionsReceiver_ProcessCaptionsData";
  __int16 v6 = 1024;
  int v7 = 49;
  _os_log_error_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Receiver must not be NULL", (uint8_t *)&v2, 0x1Cu);
}

void VCCaptionsReceiver_ProcessCaptionsData_cold_2(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  __int16 v6 = "VCCaptionsReceiver_ProcessCaptionsData";
  __int16 v7 = 1024;
  int v8 = 51;
  __int16 v9 = 1024;
  int v10 = a2;
  _os_log_error_impl(&dword_1E1EA4000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to decode captions blob. Error=%d", (uint8_t *)&v3, 0x22u);
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  int v3 = 625;
  __int16 v4 = v0;
  int v5 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d localID_BE=%u", v2, 0x22u);
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_2()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMSampleBufferCreate failed with err=%d", v2, v3, v4, v5);
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_3()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed with err=%d", v2, v3, v4, v5);
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_4()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed with err=%d", v2, v3, v4, v5);
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_5()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMMetadataFormatDescriptionCreateWithMetadataSpecifications failed with err=%d", v2, v3, v4, v5);
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d pixelBuffer is NULL", v2, v3, v4, v5, v6);
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCImageRotationConverterBase pointer is NULL", v2, v3, v4, v5, v6);
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _bufferPool is NULL", v2, v3, v4, v5, v6);
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d _rotationSession is NULL", v2, v3, v4, v5, v6);
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_5()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  uint64_t v5 = "VCImageRotationConverterBase_CreateRotatedPixelBuffer";
  __int16 v6 = 1024;
  int v7 = 50;
  __int16 v8 = 1024;
  int v9 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d CVPixelBufferPoolCreatePixelBuffer failed: %d", v3, 0x22u);
}

void VCBitrateArbiter_ModeFromOperatingMode_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unexpected operatingMode=%u", v2, v3, v4, v5);
}

void rangeCheck_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCBitrateArbiter: value %d failed bitrate range check, ignored", v2, v3, v4, v5);
}

void IsValidAudioBitrateRange_cold_1()
{
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCBitrateArbiter: value %d failed audio only bitrate range check, ignored", v2, v3, v4, v5);
}

void VCCaptionsDecoder_Decode_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 226;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid input parameter", (uint8_t *)&v2, 0x1Cu);
}

void VCCaptionsDecoder_Decode_cold_2()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  int v2 = "VCCaptionsDecoder_Decode";
  __int16 v3 = 1024;
  int v4 = 242;
  __int16 v5 = 1024;
  int v6 = -5;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unable to parse segment header. Error=%d", v1, 0x22u);
}

void VCCaptionsDecoder_Decode_cold_3()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  __int16 v3 = "VCCaptionsDecoder_Decode";
  __int16 v4 = 1024;
  int v5 = 245;
  __int16 v6 = 1024;
  int v7 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to decode payload. Error=%d", v2, 0x22u);
}

void VCStatisticsHistory_AddStatsHistory_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 351;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics history receives out of order statistics for totalByteReceived!", (uint8_t *)&v2, 0x1Cu);
}

void _VCStatisticsHistory_GetStatsHistoryElementIndex_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 325;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics history cannot match, because elementIndex is NULL!", (uint8_t *)&v2, 0x1Cu);
}

void VCStatisticsHistory_GetBurstyLoss_cold_1(uint64_t a1, NSObject *a2, double a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = 136315906;
  uint64_t v4 = a1;
  __int16 v5 = 2080;
  __int16 v6 = "VCStatisticsHistory_GetBurstyLoss";
  __int16 v7 = 1024;
  int v8 = 188;
  __int16 v9 = 2048;
  double v10 = a3;
  _os_log_debug_impl(&dword_1E1EA4000, a2, OS_LOG_TYPE_DEBUG, "AVCRC [%s] %s:%d Statistics history does not have enough history for the stats within the most recent %f seconds", (uint8_t *)&v3, 0x26u);
}

void openLogDump_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = *__error();
  int v7 = 136316162;
  uint64_t v8 = a1;
  __int16 v9 = 2080;
  double v10 = "openLogDump";
  __int16 v11 = 1024;
  int v12 = 54;
  __int16 v13 = 2112;
  uint64_t v14 = a2;
  __int16 v15 = 1024;
  int v16 = v6;
  _os_log_error_impl(&dword_1E1EA4000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d failed to open %@ with error %d", (uint8_t *)&v7, 0x2Cu);
}

void VRLogfileAlloc_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate context", v2, v3, v4, v5, v6);
}

void VRLogfileAlloc_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create log file", v2, v3, v4, v5, v6);
}

void VRLogfileAlloc_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to create log queue", v2, v3, v4, v5, v6);
}

void VRLogfileZipOnly_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d szFullFilePathName must not be NULL", v2, v3, v4, v5, v6);
}

void VRLogfileZipOnly_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate context", v2, v3, v4, v5, v6);
}

void VRLogfileZipOnly_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate space for the fileName", v2, v3, v4, v5, v6);
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL transportStreams", v2, v3, v4, v5, v6);
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Empty transportStreams array", v2, v3, v4, v5, v6);
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unknown transport stream type", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_CreateReceiver_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to allocate the audio receiver", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_CreateReceiver_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to allocate the audio receiver", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_CreateReceiver_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to create VCJitterBuffer", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_CreateReceiver_cold_4()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioReceiver_CreateReceiver";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to set audio receiver for RTP (%d)", v2, *(const char **)v3, (unint64_t)"VCAudioReceiver_CreateReceiver" >> 16, v4);
}

void VCAudioReceiver_CreateReceiver_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to initialize the receiver thread", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_Finalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Invalid audio receiver (nil)", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_Start_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Invalid audio receiver (nil)", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_Start_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioReceiver_RegisterTransportCallbacks";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Transport callbacks already registered", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_RegisterTransportCallbacks" >> 16, v4);
}

void VCAudioReceiver_Start_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioReceiver_Start";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to create the frame delay. error=%x", v2, *(const char **)v3, (unint64_t)"VCAudioReceiver_Start" >> 16, v4);
}

void VCAudioReceiver_Start_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Playback was not initialized before start", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_Stop_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Invalid audio receiver (nil)", v2, v3, v4, v5, v6);
}

void _VCAudioReceiver_UnregisterReportingTask_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioReceiver_UnregisterReportingTask";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to unregister the reporting task: (0x%p)", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_UnregisterReportingTask" >> 16, v4);
}

void VCAudioReceiver_GetLatestAudioTimestamp_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_SetupDecoders_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_SetupDecoders_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioReceiver_SetupDecoders";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to initialize audio receiver (%p) playback.", v2, *(const char **)v3, (unint64_t)"VCAudioReceiver_SetupDecoders" >> 16, v4);
}

void VCAudioReceiver_RegisterCodecRateModeRequestCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_RegisterActiveAudioStreamRequestCallback_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_ResetLagReference_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_UpdateCellTech_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_GetActiveStreamId_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d ActiveReceiver Stream is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_GetActiveStreamId_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_GetPercentPacketsLateAndMissing_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_PullAudioSamples_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d error bad handle", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_PullAudioSamples_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "VCAudioReceiver_PullAudioSamples";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Audio is asking for invalid number of samples %d ", v2, *(const char **)v3, (unint64_t)"VCAudioReceiver_PullAudioSamples" >> 16, v4);
}

void _VCAudioReceiver_UpdateStatisticsCollectorWithAudioErasure_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioReceiver_CheckAndReportRegressedAudioErasuresPercentage";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] reportingAgent is null", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_CheckAndReportRegressedAudioErasuresPercentage" >> 16, v4);
}

void VCAudioReceiver_DiscardQueueExcess_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void _VCAudioReceiver_SplitRedPacket_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Ignoring audio packet carrying bad red payload!", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_UpdateWrmMetrics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_UpdateWrmMetrics_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d WRMInfo is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_GetJitterBufferMetrics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_GetJitterBufferMetrics_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d wrmMetrics is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_SendStartCallReport_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_SendEndCallReport_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_SetMagicCookieForPayload_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_SetTargetStreamID_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_SetOverlayToken_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_ProcessCellularNetworkNotification_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_ProcessConnectionType_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void VCAudioReceiver_SetAudioPlayoutDelay_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
}

void _VCAudioReceiver_HandleRTPPacket_cold_1()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Unsupported packet type:%d", v2, v3, v4, 1985);
}

void _VCAudioReceiver_HandleRTPPacket_cold_2()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Bad buffer length bufferLength:%zu", v2, v3, v4, v5);
}

void _VCAudioReceiver_HandleRTPPacket_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Bad padding length paddingLength:%zu", v2, v3, v4, v5);
}

void _VCAudioReceiver_HandleRTPPacket_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d Could not allocate memory for Audio Packet", v2, v3, v4, v5, v6);
}

void _VCAudioReceiver_HandleRTPPacket_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d RTPMediaPacketToAudioPacket failed", v2, v3, v4, v5, v6);
}

void _VCAudioReceiver_HandleRTPPacket_cold_6()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioReceiver_DecryptAndFillAudioPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d CMBlockBufferCreateEmpty failed with error %d", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_DecryptAndFillAudioPacket" >> 16, v4);
}

void _VCAudioReceiver_HandleRTPPacket_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void _VCAudioReceiver_HandleRTPPacket_cold_8()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioReceiver_DecryptAndFillAudioPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d _VCAudioReceiver_Decrypt failed %d", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_DecryptAndFillAudioPacket" >> 16, v4);
}

void _VCAudioReceiver_HandleRTPPacket_cold_9()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioReceiver_Decrypt";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d VCCryptor_Decrypt failed. result=%x", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_Decrypt" >> 16, v4);
}

void _VCAudioReceiver_HandleRTPPacket_cold_10()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_5_4();
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d received packet time[%f]", v1, 0x26u);
}

void _VCAudioReceiver_HandleRTPPacket_cold_11()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 1898;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d Ignoring invalid incoming RTP media packet.", v1, 0x1Cu);
}

void _VCAudioReceiver_HandleRTPPacket_cold_12()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 1968;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d received VTP_PKT_BBNOTE", v1, 0x1Cu);
}

void _VCAudioReceiver_ShouldProcessAudioPacket_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioReceiver_ShouldProcessAudioPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10(&dword_1E1EA4000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] UNEXPECTED: IDS stream ID is not valid", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_ShouldProcessAudioPacket" >> 16, v4);
}

void JitterPreloadQueue_AudioFrameAlloc_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Allocation failed as the Queue is not valid", v2, v3, v4, v5, v6);
}

void JitterPreloadQueue_AudioPacketAlloc_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Allocation failed as the Queue is not valid", v2, v3, v4, v5, v6);
}

void JitterPreloadQueue_Create_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Create Failed", v2, v3, v4, v5, v6);
}

void JitterPreloadQueue_Create_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Failed to created Audio Packet Pool", v2, v3, v4, v5, v6);
}

void JitterPreloadQueue_Create_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Failed to created Audio Frame Pool", v2, v3, v4, v5, v6);
}

void JitterPreloadQueue_Enqueue_cold_1()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  __int16 v4 = v0;
  uint64_t v5 = "JitterPreloadQueue_Enqueue";
  __int16 v6 = 1024;
  int v7 = 119;
  __int16 v8 = 2048;
  uint64_t v9 = v1;
  _os_log_error_impl(&dword_1E1EA4000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Queue=%p is full", v3, 0x26u);
}

void VCAudioTransmitter_SetAllowedPayloads_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d transmitter is nil", v2, v3, v4, v5, v6);
}

void VCAudioTransmitter_SetAllowedPayloads_cold_2()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VCAudioTransmitter_SetAllowedPayloads";
  OUTLINED_FUNCTION_3();
  int v4 = 747;
  __int16 v5 = 2048;
  uint64_t v6 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d audioTransmitter=%p allowedAudioPayloads is nil", v2, 0x26u);
}

void VCAudioTransmitter_ReportAWDMetrics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate reporting dictionary", v2, v3, v4, v5, v6);
}

void VCAudioTransmitter_ReportAWDMetrics_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Failed to allocate the codec bitrate value", v2, v3, v4, v5, v6);
}

void VCAudioTransmitter_ProcessConnectionType_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Transmitter object is nil", v2, v3, v4, v5, v6);
}

void VCAudioTransmitter_UpdateWrmMetrics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d wrmMetrics is NULL", v2, v3, v4, v5, v6);
}

void _VCAudioTransmitter_FlushBundlers_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioTransmitter_FlushBundlers";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to extract bundled packets from CDRx audio packet bundler for index=%d", v2, *(const char **)v3, (unint64_t)"_VCAudioTransmitter_FlushBundlers" >> 16, v4);
}

void _VCAudioTransmitter_FlushBundlers_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to extract bundled packets from shortRED audio packet bundler", v2, v3, v4, v5, v6);
}

void _VCAudioTransmitter_FlushBundlers_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Unable to extract bundled packets from main audio packet bundler", v2, v3, v4, v5, v6);
}

void _VCAudioTransmitter_SendAudioBundle_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid payload!", v2, v3, v4, v5, v6);
}

void _VCAudioTransmitter_SendAudioBundle_cold_2()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioTransmitter_SendSframeEncryptedAudioPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d packet payload contains incorrect data size '%d'", v2, *(const char **)v3, (unint64_t)"_VCAudioTransmitter_SendSframeEncryptedAudioPacket" >> 16, v4);
}

void _VCAudioTransmitter_SendAudioBundle_cold_3()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "_VCAudioTransmitter_SendSframeEncryptedAudioPacket";
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, " [%s] %s:%d VCCryptor_Encrypt failed with error %d", v2, *(const char **)v3, (unint64_t)"_VCAudioTransmitter_SendSframeEncryptedAudioPacket" >> 16, v4);
}

void _VCAudioTransmitter_SendAudioBundle_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferIsRangeContinuous failed", v2, v3, v4, v5, v6);
}

void _VCAudioTransmitter_SendAudioBundle_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
}

void _VCAudioTransmitter_SendAudioBundle_cold_6()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
}

void _VCAudioTransmitter_SendAudioBundle_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Invalid red payload!", v2, v3, v4, v5, v6);
}

void VCOverlaySourceTextHelper_appendHeaderTextToString_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] No textContext was found while appending header text", v2, v3, v4, v5, v6);
}

void VCOverlaySourceTextHelper_appendHeaderTextToString_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] No displayString was found while appending header text", v2, v3, v4, v5, v6);
}

void VCOverlaySourceTextHelper_appendVideoTextToString_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] No textContext was found while appending video text", v2, v3, v4, v5, v6);
}

void VCOverlaySourceTextHelper_appendVideoTextToString_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] No displayString was found while appending video text", v2, v3, v4, v5, v6);
}

void VCOverlaySourceTextHelper_appendAudioTextToString_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] No textContext was found while appending audio text", v2, v3, v4, v5, v6);
}

void VCOverlaySourceTextHelper_appendAudioTextToString_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d [VCOverlayManager] No displayString was found while appending audio text", v2, v3, v4, v5, v6);
}

void ARPLSessionCreate_cold_1()
{
  OUTLINED_FUNCTION_5();
  *(void *)&void v3[6] = "ARPLSessionCreate";
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ARPLSessionCreate: new session (%08X)...", v2, *(const char **)v3, (unint64_t)"ARPLSessionCreate" >> 16, 1025);
}

void ARPLSessionRelease_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ARPLSessionRelease: done...", v2, v3, v4, v5, v6);
}

void ARPLSessionRelease_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ARPLSessionRelease: delete...", v2, v3, v4, v5, v6);
}

void ARPLSessionRelease_cold_3()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&void v3[6] = "ARPLSessionRelease";
  OUTLINED_FUNCTION_4_0(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ARPLSessionRelease: old session (%08X)...", v2, *(const char **)v3, (unint64_t)"ARPLSessionRelease" >> 16, 2042);
}

void ARPLSessionRelease_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d ARPLSessionRelease: enter...", v2, v3, v4, v5, v6);
}

void JLagProcessor_Initialize_cold_1(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 33;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Lag processor initialized with invalid pointer", (uint8_t *)&v2, 0x1Cu);
}

void JLagProcessor_Process_cold_1()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "JLagProcessor_IsSpikeTimeout";
  __int16 v4 = 1024;
  int v5 = 267;
  __int16 v6 = 1024;
  int v7 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Bundling looks incorrect %d", v2, 0x22u);
}

void JLagProcessor_Process_cold_2()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  int v2 = "JLagProcessor_DetectSpike";
  __int16 v3 = 1024;
  int v4 = 278;
  __int16 v5 = 1024;
  int v6 = 0;
  _os_log_error_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Samples per frame looks incorrect %d", v1, 0x22u);
}

void JLagProcessor_Process_cold_3(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  OUTLINED_FUNCTION_0();
  int v4 = 375;
  _os_log_debug_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Skip lag computation", (uint8_t *)&v2, 0x1Cu);
}

void JTargetJBEstimator_GetSharedSettings_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Shared parameters struct is NULL", v2, v3, v4, v5, v6);
}

void JTargetJBEstimator_Process_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  int v2 = 1382;
  _os_log_debug_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Failed to update the target size estimated prior to synchronization", v1, 0x1Cu);
}

void JTargetJBEstimator_Process_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Incorrect bundling, it should never be zero", v2, v3, v4, v5, v6);
}

void _JTargetJBEstimator_AddLagToCdf_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Attempting to add lag value to cdf with an index out of range", v2, v3, v4, v5, v6);
}

void VCEffectsManager_CapturedPixelBuffer_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Dropping video frame due to effects being disabled", v2, v3, v4, v5, v6);
}

void VCEffectsManager_CapturedPixelBuffer_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Sending video frame to extension to process", v2, v3, v4, v5, v6);
}

void VCEffectsManager_CapturedPixelBuffer_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Sending video frame to AVC to process", v2, v3, v4, v5, v6);
}

void VCEffectsManager_CapturedPixelBuffer_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_3_2(&dword_1E1EA4000, v0, v1, " [%s] %s:%d Sending video frame to client to be processed", v2, v3, v4, v5, v6);
}

void _VCAudioPlayer_InitializeBuffers_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Failed to allocate Input playback buffer", v2, v3, v4, v5, v6);
}

void _VCAudioPlayer_InitializeBuffers_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Failed to allocate Output playback buffer", v2, v3, v4, v5, v6);
}

void _VCAudioPlayer_InitializeBuffers_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Failed to allocate last Decoded playback buffer", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_Initialize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d VCAudioPlayer pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_Initialize_cold_2()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_5();
  uint64_t v3 = "VCAudioPlayer_Initialize";
  OUTLINED_FUNCTION_3();
  int v4 = 355;
  __int16 v5 = 2048;
  uint64_t v6 = v0;
  _os_log_error_impl(&dword_1E1EA4000, v1, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d AudioPlayer[%p] Failed initializing DTMF", v2, 0x26u);
}

void VCAudioPlayer_Initialize_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Player: Failed initializing Timescaler", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_Initialize_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Player: Failed initializing Crossfade", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_Initialize_cold_5()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Player: Failed allocating in/out buffers", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_Initialize_cold_6()
{
  OUTLINED_FUNCTION_6_0();
  *(void *)&v4[6] = "_VCAudioPlayer_SetPlaybackFormat";
  LODWORD(v5) = 195;
  WORD2(v5) = 2048;
  HIWORD(v5) = v0;
  OUTLINED_FUNCTION_6_4(&dword_1E1EA4000, v1, v2, "VCAudioPlayer [%s] %s:%d holeDetectionThreshold=%f", v3, *(const char **)v4, (unint64_t)"_VCAudioPlayer_SetPlaybackFormat" >> 16, v5);
}

void VCAudioPlayer_Initialize_cold_7()
{
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_9_13();
  OUTLINED_FUNCTION_4(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Invalid number of channels[%d]", v2, v3, v4, v5);
}

void VCAudioPlayer_Initialize_cold_8()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_9_13();
  _os_log_fault_impl(&dword_1E1EA4000, v0, OS_LOG_TYPE_FAULT, "VCAudioPlayer [%s] %s:%d Invalid number of channels[%d]", v1, 0x22u);
}

void VCAudioPlayer_Finalize_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_NewStream_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_IsUnderrunQueueBoostEnabled_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_ForceDecoderReset_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_GetAverageInterarrivalTimeForWindow_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_GetStatistics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_GetLeftOverSamples_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_ResetReportingMetrics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_GetFrameErasureRate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_GetSpeechErasureRate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_SuspendAudioErasureMeasurement_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_ResumeAudioErasureMeasurement_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_GetTimescaleMetrics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}

void VCAudioPlayer_GetRedErasureMetrics_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_1(&dword_1E1EA4000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
}