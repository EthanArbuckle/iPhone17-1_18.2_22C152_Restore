uint64_t cms_sd_asn1_ctrl(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);
  int v3;
  int v4;
  int v5;

  v1 = *(void *)(*(void *)(a1 + 64) + 16);
  if (!v1) {
    return 1;
  }
  v2 = *(uint64_t (**)(void))(v1 + 176);
  if (!v2) {
    return 1;
  }
  v3 = v2();
  if (v3 != -2)
  {
    if (v3 <= 0)
    {
      v4 = 111;
      v5 = 268;
      goto LABEL_8;
    }
    return 1;
  }
  v4 = 125;
  v5 = 264;
LABEL_8:
  ERR_put_error(46, 4095, v4, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", v5);
  return 0;
}

ASN1_INTEGER *CMS_add_standard_smimecap(STACK **a1)
{
  if (!cms_add_cipher_smcap(a1, 427, -1)) {
    return 0;
  }
  v2 = OBJ_nid2sn(809);
  if (EVP_get_digestbyname(v2))
  {
    if (!CMS_add_simple_smimecap(a1, 809, -1)) {
      return 0;
    }
  }
  if (!cms_add_cipher_smcap(a1, 813, -1)
    || !cms_add_cipher_smcap(a1, 423, -1)
    || !cms_add_cipher_smcap(a1, 419, -1)
    || !cms_add_cipher_smcap(a1, 44, -1)
    || !cms_add_cipher_smcap(a1, 37, 128)
    || !cms_add_cipher_smcap(a1, 37, 64)
    || !cms_add_cipher_smcap(a1, 31, -1))
  {
    return 0;
  }
  return cms_add_cipher_smcap(a1, 37, 40);
}

BOOL CMS_add_smimecap(uint64_t a1, X509_ALGORS *a)
{
  out = 0;
  int v3 = i2d_X509_ALGORS(a, &out);
  if (v3 < 1) {
    return 0;
  }
  BOOL v4 = CMS_signed_add1_attr_by_NID(a1, 167, 16, out, v3);
  free(out);
  return v4;
}

BOOL cms_copy_messageDigest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = cms_get0_signed(a1);
  if (v3) {
    BOOL v4 = *(const STACK **)(v3 + 40);
  }
  else {
    BOOL v4 = 0;
  }
  if (sk_num(v4) < 1)
  {
LABEL_10:
    int v8 = 131;
    int v9 = 196;
LABEL_11:
    ERR_put_error(46, 4095, v8, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", v9);
    return 0;
  }
  int v5 = 0;
  while (1)
  {
    v6 = sk_value(v4, v5);
    if (v6 != (char *)a2)
    {
      uint64_t v7 = (uint64_t)v6;
      if ((CMS_signed_get_attr_count((uint64_t)v6) & 0x80000000) == 0
        && !OBJ_cmp(**(const ASN1_OBJECT ***)(a2 + 16), **(const ASN1_OBJECT ***)(v7 + 16)))
      {
        break;
      }
    }
    if (++v5 >= sk_num(v4)) {
      goto LABEL_10;
    }
  }
  v11 = OBJ_nid2obj(51);
  v12 = (const unsigned __int8 *)CMS_signed_get0_data_by_OBJ(v7, v11, -3, 4);
  if (!v12)
  {
    int v8 = 114;
    int v9 = 185;
    goto LABEL_11;
  }
  return CMS_signed_add1_attr_by_NID(a2, 51, 4, v12, -1);
}

const EVP_MD *CMS_SignerInfo_sign(uint64_t a1)
{
  v2 = *(EVP_MD_CTX **)(a1 + 72);
  out = 0;
  v17 = 0;
  size_t size = 0;
  int v3 = OBJ_obj2nid(**(const ASN1_OBJECT ***)(a1 + 16));
  BOOL v4 = OBJ_nid2sn(v3);
  result = EVP_get_digestbyname(v4);
  if (result)
  {
    v6 = result;
    if ((CMS_signed_get_attr_by_NID(a1, 52, -1) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v7 = *(uint64_t **)(a1 + 80);
      if (v7)
      {
        v17 = *(uint64_t **)(a1 + 80);
      }
      else
      {
        EVP_MD_CTX_reset(v2);
        if ((int)EVP_DigestSignInit((uint64_t)v2, &v17, v6, 0, *(void *)(a1 + 64)) < 1)
        {
LABEL_22:
          free(out);
          EVP_MD_CTX_reset(v2);
          return 0;
        }
        uint64_t v7 = v17;
        *(void *)(a1 + 80) = v17;
      }
      if ((int)EVP_PKEY_CTX_ctrl(v7, -1, 8) <= 0)
      {
        int v13 = 110;
        int v14 = 739;
      }
      else
      {
        int v11 = ASN1_item_i2d(*(ASN1_VALUE **)(a1 + 24), &out, &CMS_Attributes_Sign_it);
        if (!out) {
          goto LABEL_22;
        }
        if (EVP_DigestUpdate(v2, out, v11) < 1) {
          goto LABEL_22;
        }
        if ((int)EVP_DigestSignFinal((uint64_t)v2, 0, &size) < 1) {
          goto LABEL_22;
        }
        free(out);
        v12 = (unsigned __int8 *)malloc_type_malloc(size, 0xDE024C5EuLL);
        out = v12;
        if (!v12 || (int)EVP_DigestSignFinal((uint64_t)v2, (uint64_t)v12, &size) < 1) {
          goto LABEL_22;
        }
        if ((int)EVP_PKEY_CTX_ctrl(v17, -1, 8) > 0)
        {
          EVP_MD_CTX_reset(v2);
          ASN1_STRING_set0(*(ASN1_STRING **)(a1 + 40), out, size);
          return (const EVP_MD *)1;
        }
        int v13 = 110;
        int v14 = 760;
      }
LABEL_21:
      ERR_put_error(46, 4095, v13, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", v14);
      goto LABEL_22;
    }
    int v8 = X509_gmtime_adj(0, 0);
    if (v8)
    {
      int v9 = v8;
      BOOL v10 = CMS_signed_add1_attr_by_NID(a1, 52, v8->type, (const unsigned __int8 *)v8, -1);
      ASN1_TIME_free(v9);
      if (v10 > 0) {
        goto LABEL_3;
      }
    }
    else
    {
      ASN1_TIME_free(0);
    }
    int v13 = 65;
    int v14 = 452;
    goto LABEL_21;
  }
  return result;
}

uint64_t CMS_SignerInfo_get0_pkey_ctx(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t CMS_SignerInfo_get0_md_ctx(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t CMS_get0_SignerInfos(uint64_t a1)
{
  uint64_t result = cms_get0_signed(a1);
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t cms_get0_signed(uint64_t a1)
{
  if (OBJ_obj2nid(*(const ASN1_OBJECT **)a1) == 22) {
    return *(void *)(a1 + 8);
  }
  ERR_put_error(46, 4095, 108, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", 74);
  return 0;
}

STACK *CMS_get0_signers(uint64_t a1)
{
  uint64_t v1 = cms_get0_signed(a1);
  if (v1) {
    v2 = *(const STACK **)(v1 + 40);
  }
  else {
    v2 = 0;
  }
  if (sk_num(v2) >= 1)
  {
    int v3 = 0;
    BOOL v4 = 0;
    while (1)
    {
      int v5 = sk_value(v2, v3);
      v6 = (char *)*((void *)v5 + 7);
      if (v6)
      {
        if (!v4)
        {
          uint64_t v7 = v5;
          BOOL v4 = sk_new_null();
          if (!v4) {
            return v4;
          }
          v6 = (char *)*((void *)v7 + 7);
        }
        if (!sk_push(v4, v6)) {
          break;
        }
      }
      if (++v3 >= sk_num(v2)) {
        return v4;
      }
    }
    sk_free(v4);
  }
  return 0;
}

void CMS_SignerInfo_set1_signer_cert(uint64_t a1, X509 *a2)
{
  if (a2)
  {
    X509_up_ref((uint64_t)a2);
    EVP_PKEY_free(*(EVP_PKEY **)(a1 + 64));
    *(void *)(a1 + 64) = X509_get_pubkey(a2);
  }
  X509_free(*(X509 **)(a1 + 56));
  *(void *)(a1 + 56) = a2;
}

uint64_t CMS_SignerInfo_get0_signer_id(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)v4 == 1)
  {
    if (!a2) {
      return 1;
    }
    int v5 = (void *)(v4 + 8);
    a4 = a2;
LABEL_9:
    *a4 = *v5;
    return 1;
  }
  if (!*(_DWORD *)v4)
  {
    if (a3) {
      *a3 = **(void **)(v4 + 8);
    }
    if (!a4) {
      return 1;
    }
    int v5 = (void *)(*(void *)(v4 + 8) + 8);
    goto LABEL_9;
  }
  return 0;
}

uint64_t CMS_SignerInfo_cert_cmp(uint64_t a1, X509 *a2)
{
  return cms_SignerIdentifier_cert_cmp(*(void *)(a1 + 8), a2);
}

uint64_t CMS_set1_signers_certs(uint64_t a1, const STACK *a2, char a3)
{
  uint64_t v5 = cms_get0_signed(a1);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(const STACK **)(v5 + 24);
  if (sk_num(*(const STACK **)(v5 + 40)) >= 1)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    while (1)
    {
      BOOL v10 = sk_value(*(const STACK **)(v6 + 40), v9);
      if (!*((void *)v10 + 7))
      {
        uint64_t v11 = (uint64_t)v10;
        if (sk_num(a2) >= 1)
        {
          int v12 = 0;
          while (1)
          {
            int v13 = sk_value(a2, v12);
            if (!cms_SignerIdentifier_cert_cmp(*(void *)(v11 + 8), (X509 *)v13)) {
              break;
            }
            if (++v12 >= sk_num(a2)) {
              goto LABEL_11;
            }
          }
          CMS_SignerInfo_set1_signer_cert(v11, (X509 *)v13);
          uint64_t v8 = (v8 + 1);
          if ((a3 & 0x10) != 0) {
            goto LABEL_5;
          }
LABEL_14:
          if (!*(void *)(v11 + 56) && sk_num(v7) >= 1)
          {
            int v14 = 0;
            while (1)
            {
              v15 = sk_value(v7, v14);
              if (!*(_DWORD *)v15)
              {
                v16 = (X509 *)*((void *)v15 + 1);
                if (!cms_SignerIdentifier_cert_cmp(*(void *)(v11 + 8), v16)) {
                  break;
                }
              }
              if (++v14 >= sk_num(v7)) {
                goto LABEL_5;
              }
            }
            CMS_SignerInfo_set1_signer_cert(v11, v16);
            uint64_t v8 = (v8 + 1);
          }
          goto LABEL_5;
        }
LABEL_11:
        if ((a3 & 0x10) == 0) {
          goto LABEL_14;
        }
      }
LABEL_5:
      if (++v9 >= sk_num(*(const STACK **)(v6 + 40))) {
        return v8;
      }
    }
  }
  return 0;
}

void *CMS_SignerInfo_get0_algs(void *result, void *a2, void *a3, void *a4, void *a5)
{
  if (a2) {
    *a2 = result[8];
  }
  if (a3) {
    *a3 = result[7];
  }
  if (a4) {
    *a4 = result[2];
  }
  if (a5) {
    *a5 = result[4];
  }
  return result;
}

uint64_t CMS_SignerInfo_get0_signature(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t cms_SignedData_final(uint64_t a1, BIO *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = cms_get0_signed(a1);
  if (v4) {
    uint64_t v5 = *(const STACK **)(v4 + 40);
  }
  else {
    uint64_t v5 = 0;
  }
  if (sk_num(v5) < 1)
  {
LABEL_27:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 16) = 0;
    return 1;
  }
  int v6 = 0;
  while (1)
  {
    uint64_t v7 = sk_value(v5, v6);
    uint64_t v8 = (EVP_MD_CTX *)EVP_MD_CTX_new();
    if (!v8)
    {
      ERR_put_error(46, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", 609);
      return 0;
    }
    int v9 = v8;
    if (!*((void *)v7 + 8))
    {
      int v18 = 133;
      int v19 = 614;
      goto LABEL_30;
    }
    if (!cms_DigestAlgorithm_find_ctx(v8, a2, *((X509_ALGOR **)v7 + 2))
      || *((void *)v7 + 10) && !cms_sd_asn1_ctrl((uint64_t)v7))
    {
      goto LABEL_31;
    }
    if ((CMS_signed_get_attr_count((uint64_t)v7) & 0x80000000) == 0)
    {
      BOOL v10 = **(const unsigned __int8 ***)(*(void *)(a1 + 8) + 16);
      s[0] = 0;
      if (!EVP_DigestFinal_ex(v9, md, s)
        || !CMS_signed_add1_attr_by_NID((uint64_t)v7, 51, 4, md, s[0])
        || CMS_signed_add1_attr_by_NID((uint64_t)v7, 50, 6, v10, -1) < 1
        || !CMS_SignerInfo_sign((uint64_t)v7))
      {
        goto LABEL_31;
      }
      goto LABEL_16;
    }
    uint64_t v11 = (uint64_t *)*((void *)v7 + 10);
    if (!v11)
    {
      *(_DWORD *)md = 0;
      int v14 = EVP_PKEY_size(*((EVP_PKEY **)v7 + 8));
      v15 = (unsigned __int8 *)malloc_type_malloc(v14, 0x25E26D37uLL);
      if (v15)
      {
        v16 = v15;
        if (EVP_SignFinal(v9, v15, (unsigned int *)md, *((EVP_PKEY **)v7 + 8)))
        {
          ASN1_STRING_set0(*((ASN1_STRING **)v7 + 5), v16, *(int *)md);
LABEL_16:
          uint64_t v11 = 0;
          goto LABEL_22;
        }
        ERR_put_error(46, 4095, 139, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", 675);
        free(v16);
LABEL_31:
        uint64_t v11 = 0;
        goto LABEL_32;
      }
      int v18 = 65;
      int v19 = 671;
LABEL_30:
      ERR_put_error(46, 4095, v18, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", v19);
      goto LABEL_31;
    }
    unsigned int v20 = 0;
    if (!EVP_DigestFinal_ex(v9, md, &v20)) {
      goto LABEL_32;
    }
    *(void *)s = EVP_PKEY_size(*((EVP_PKEY **)v7 + 8));
    int v12 = malloc_type_malloc(*(size_t *)s, 0x36934A08uLL);
    if (!v12) {
      break;
    }
    int v13 = v12;
    if ((int)EVP_PKEY_sign(v11, (uint64_t)v12, s, (uint64_t)md, v20) <= 0)
    {
      free(v13);
      goto LABEL_32;
    }
    ASN1_STRING_set0(*((ASN1_STRING **)v7 + 5), v13, s[0]);
LABEL_22:
    EVP_MD_CTX_free(v9);
    EVP_PKEY_CTX_free((EVP_PKEY **)v11);
    if (++v6 >= sk_num(v5)) {
      goto LABEL_27;
    }
  }
  ERR_put_error(46, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", 657);
LABEL_32:
  EVP_MD_CTX_free(v9);
  EVP_PKEY_CTX_free((EVP_PKEY **)v11);
  return 0;
}

uint64_t CMS_SignerInfo_verify(uint64_t a1)
{
  out = 0;
  if (!*(void *)(a1 + 64))
  {
    int v10 = 134;
    int v11 = 786;
LABEL_12:
    ERR_put_error(46, 4095, v10, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", v11);
    return 0xFFFFFFFFLL;
  }
  int v2 = OBJ_obj2nid(**(const ASN1_OBJECT ***)(a1 + 16));
  int v3 = OBJ_nid2sn(v2);
  digestbyname = EVP_get_digestbyname(v3);
  if (!digestbyname) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = digestbyname;
  int v6 = *(EVP_MD_CTX **)(a1 + 72);
  if (!v6)
  {
    int v6 = (EVP_MD_CTX *)EVP_MD_CTX_new();
    *(void *)(a1 + 72) = v6;
    if (!v6)
    {
      int v10 = 65;
      int v11 = 794;
      goto LABEL_12;
    }
  }
  if ((int)EVP_DigestVerifyInit((uint64_t)v6, (void *)(a1 + 80), v5, 0, *(void *)(a1 + 64)) >= 1
    && cms_sd_asn1_ctrl(a1)
    && (int v7 = ASN1_item_i2d(*(ASN1_VALUE **)(a1 + 24), &out, &CMS_Attributes_Verify_it), out)
    && (int v8 = EVP_DigestUpdate(v6, out, v7), free(out), v8 >= 1))
  {
    uint64_t v9 = EVP_DigestVerifyFinal((uint64_t)v6, *(void *)(*(void *)(a1 + 40) + 8), **(int **)(a1 + 40));
    if ((int)v9 <= 0) {
      ERR_put_error(46, 4095, 158, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", 818);
    }
  }
  else
  {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  EVP_MD_CTX_reset(v6);
  return v9;
}

BIO *cms_SignedData_init_bio(uint64_t a1)
{
  uint64_t v2 = cms_get0_signed(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 16))
    {
      if (sk_num(*(const STACK **)(v2 + 24)) >= 1)
      {
        for (int i = 0; i < sk_num(*(const STACK **)(v3 + 24)); ++i)
        {
          int v5 = *(_DWORD *)sk_value(*(const STACK **)(v3 + 24), i);
          if (v5 == 2)
          {
            if (*(uint64_t *)v3 <= 2)
            {
              uint64_t v6 = 3;
              goto LABEL_14;
            }
          }
          else
          {
            if (v5 != 3)
            {
              if (v5 != 4 || *(uint64_t *)v3 >= 5) {
                continue;
              }
              uint64_t v6 = 5;
              goto LABEL_14;
            }
            if (*(uint64_t *)v3 < 4)
            {
              uint64_t v6 = 4;
LABEL_14:
              *(void *)uint64_t v3 = v6;
            }
          }
        }
      }
      if (sk_num(*(const STACK **)(v3 + 32)) >= 1)
      {
        int v7 = 0;
        do
        {
          if (*(_DWORD *)sk_value(*(const STACK **)(v3 + 32), v7) == 1 && *(uint64_t *)v3 <= 4) {
            *(void *)uint64_t v3 = 5;
          }
          ++v7;
        }
        while (v7 < sk_num(*(const STACK **)(v3 + 32)));
      }
      if (OBJ_obj2nid(**(const ASN1_OBJECT ***)(v3 + 16)) != 21 && *(uint64_t *)v3 <= 2) {
        *(void *)uint64_t v3 = 3;
      }
      if (sk_num(*(const STACK **)(v3 + 40)) >= 1)
      {
        int v8 = 0;
        do
        {
          uint64_t v9 = sk_value(*(const STACK **)(v3 + 40), v8);
          uint64_t v10 = *(void *)v9;
          if (**((_DWORD **)v9 + 1) == 1)
          {
            if (v10 <= 2) {
              *(void *)uint64_t v9 = 3;
            }
            if (*(uint64_t *)v3 <= 2) {
              *(void *)uint64_t v3 = 3;
            }
          }
          else if (v10 <= 0)
          {
            *(void *)uint64_t v9 = 1;
          }
          ++v8;
        }
        while (v8 < sk_num(*(const STACK **)(v3 + 40)));
      }
      if (*(uint64_t *)v3 <= 0) {
        *(void *)uint64_t v3 = 1;
      }
    }
    if (sk_num(*(const STACK **)(v3 + 8)) >= 1)
    {
      int v11 = 0;
      int v12 = 0;
      while (1)
      {
        int v13 = sk_value(*(const STACK **)(v3 + 8), v12);
        inited = cms_DigestAlgorithm_init_bio((X509_ALGOR *)v13);
        if (!inited) {
          break;
        }
        if (v11) {
          BIO_push(v11, inited);
        }
        else {
          int v11 = inited;
        }
        if (++v12 >= sk_num(*(const STACK **)(v3 + 8))) {
          return v11;
        }
      }
      BIO_free_all(v11);
    }
  }
  return 0;
}

uint64_t CMS_SignerInfo_verify_content(uint64_t a1, BIO *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = (EVP_MD_CTX *)EVP_MD_CTX_new();
  unsigned int s = 0;
  if (!v4)
  {
    int v7 = 65;
    int v8 = 872;
    goto LABEL_22;
  }
  if ((CMS_signed_get_attr_count(a1) & 0x80000000) != 0)
  {
    uint64_t v6 = 0;
  }
  else
  {
    int v5 = OBJ_nid2obj(51);
    uint64_t v6 = (const void **)CMS_signed_get0_data_by_OBJ(a1, v5, -3, 4);
    if (!v6)
    {
      int v7 = 114;
      int v8 = 881;
LABEL_22:
      ERR_put_error(46, 4095, v7, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", v8);
      goto LABEL_23;
    }
  }
  if (!cms_DigestAlgorithm_find_ctx(v4, a2, *(X509_ALGOR **)(a1 + 16)))
  {
LABEL_23:
    uint64_t v9 = 0;
LABEL_24:
    uint64_t v10 = 0xFFFFFFFFLL;
    goto LABEL_25;
  }
  if (EVP_DigestFinal_ex(v4, md, &s) <= 0)
  {
    int v7 = 147;
    int v8 = 890;
    goto LABEL_22;
  }
  if (v6)
  {
    if (s != *(_DWORD *)v6)
    {
      int v7 = 120;
      int v8 = 898;
      goto LABEL_22;
    }
    if (!memcmp(md, v6[1], s))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 1;
      goto LABEL_25;
    }
    ERR_put_error(46, 4095, 158, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", 903);
    uint64_t v9 = 0;
LABEL_13:
    uint64_t v10 = 0;
    goto LABEL_25;
  }
  EVP_MD_CTX_md(v4);
  int v11 = (uint64_t *)EVP_PKEY_CTX_new(*(void *)(a1 + 64), 0);
  uint64_t v9 = v11;
  if (!v11 || (int)EVP_PKEY_verify_init(v11) < 1) {
    goto LABEL_24;
  }
  uint64_t v10 = 0xFFFFFFFFLL;
  if ((int)EVP_PKEY_CTX_ctrl(v9, -1, 248) >= 1)
  {
    *(void *)(a1 + 80) = v9;
    if (cms_sd_asn1_ctrl(a1))
    {
      uint64_t v12 = EVP_PKEY_verify(v9);
      if ((int)v12 > 0)
      {
        uint64_t v10 = v12;
        goto LABEL_25;
      }
      ERR_put_error(46, 4095, 158, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_sd.c", 923);
      goto LABEL_13;
    }
  }
LABEL_25:
  EVP_PKEY_CTX_free((EVP_PKEY **)v9);
  EVP_MD_CTX_free(v4);
  return v10;
}

ASN1_INTEGER *CMS_add_simple_smimecap(STACK **a1, int a2, int a3)
{
  if (a3 < 1)
  {
    int v7 = 0;
  }
  else
  {
    uint64_t result = ASN1_INTEGER_new();
    if (!result) {
      return result;
    }
    int v7 = result;
    if (!ASN1_INTEGER_set(result, a3)) {
      goto LABEL_14;
    }
  }
  int v8 = X509_ALGOR_new();
  if (!v8)
  {
LABEL_14:
    ASN1_INTEGER_free(v7);
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = OBJ_nid2obj(a2);
  if (v7) {
    int v11 = 2;
  }
  else {
    int v11 = -1;
  }
  X509_ALGOR_set0(v9, v10, v11, v7);
  uint64_t v12 = *a1;
  if (*a1 || (uint64_t v12 = sk_new_null(), (*a1 = v12) != 0))
  {
    if (sk_push(v12, (char *)v9)) {
      return (ASN1_INTEGER *)1;
    }
  }
  X509_ALGOR_free(v9);
  return 0;
}

ASN1_INTEGER *cms_add_cipher_smcap(STACK **a1, int n, int a3)
{
  uint64_t v6 = OBJ_nid2sn(n);
  if (!EVP_get_cipherbyname(v6)) {
    return (ASN1_INTEGER *)1;
  }
  return CMS_add_simple_smimecap(a1, n, a3);
}

RSA *RSA_new(void)
{
  return RSA_new_method(0);
}

RSA *__cdecl RSA_new_method(ENGINE *engine)
{
  uint64_t v2 = (char *)malloc_type_calloc(1uLL, 0xA0uLL, 0x1060040A7B8FD3BuLL);
  if (!v2)
  {
    ERR_put_error(4, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/rsa/rsa_lib.c", 136);
    return (RSA *)v2;
  }
  uint64_t v3 = (const RSA_METHOD *)default_RSA_meth;
  if (!default_RSA_meth)
  {
    uint64_t v3 = RSA_PKCS1_SSLeay();
    default_RSA_meth = (uint64_t)v3;
  }
  *((void *)v2 + 2) = v3;
  if (engine)
  {
    if (!ENGINE_init(engine))
    {
      int v5 = 145;
      goto LABEL_12;
    }
    *((void *)v2 + 3) = engine;
    goto LABEL_9;
  }
  engine = ENGINE_get_default_RSA();
  *((void *)v2 + 3) = engine;
  if (engine)
  {
LABEL_9:
    RSA = ENGINE_get_RSA(engine);
    *((void *)v2 + 2) = RSA;
    if (!RSA)
    {
      int v5 = 155;
LABEL_12:
      ERR_put_error(4, 4095, 38, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/rsa/rsa_lib.c", v5);
LABEL_18:
      ENGINE_finish(*((ENGINE **)v2 + 3));
      free(v2);
      return 0;
    }
    goto LABEL_14;
  }
  RSA = (const RSA_METHOD *)*((void *)v2 + 2);
LABEL_14:
  unsigned int v6 = RSA->flags & 0xFFFFFBFF;
  *((_DWORD *)v2 + 28) = 1;
  *((_DWORD *)v2 + 29) = v6;
  if (!CRYPTO_new_ex_data(6, v2, (CRYPTO_EX_DATA *)(v2 + 104))) {
    goto LABEL_18;
  }
  int v7 = *(unsigned int (**)(char *))(*((void *)v2 + 2) + 56);
  if (v7 && !v7(v2))
  {
    CRYPTO_free_ex_data(6, v2, (CRYPTO_EX_DATA *)(v2 + 104));
    goto LABEL_18;
  }
  return (RSA *)v2;
}

void RSA_set_default_method(const RSA_METHOD *meth)
{
  default_RSA_meth = (uint64_t)meth;
}

const RSA_METHOD *RSA_get_default_method(void)
{
  uint64_t result = (const RSA_METHOD *)default_RSA_meth;
  if (!default_RSA_meth)
  {
    uint64_t result = RSA_PKCS1_SSLeay();
    default_RSA_meth = (uint64_t)result;
  }
  return result;
}

const RSA_METHOD *__cdecl RSA_get_method(const RSA *rsa)
{
  return rsa->meth;
}

int RSA_set_method(RSA *rsa, const RSA_METHOD *meth)
{
  finish = rsa->meth->finish;
  if (finish) {
    ((void (*)(RSA *))finish)(rsa);
  }
  ENGINE_finish(rsa->engine);
  rsa->meth = meth;
  rsa->engine = 0;
  init = meth->init;
  if (init) {
    ((void (*)(RSA *))init)(rsa);
  }
  return 1;
}

void RSA_free(RSA *r)
{
  if (r && CRYPTO_add_lock(&r->references, -1, 9, 0, 0) <= 0)
  {
    finish = r->meth->finish;
    if (finish) {
      ((void (*)(RSA *))finish)(r);
    }
    ENGINE_finish(r->engine);
    CRYPTO_free_ex_data(6, r, (CRYPTO_EX_DATA *)&r->ex_data.dummy);
    BN_free(r->n);
    BN_free(r->e);
    BN_free(r->d);
    BN_free(r->p);
    BN_free(r->q);
    BN_free(r->dmp1);
    BN_free(r->dmq1);
    BN_free(r->iqmp);
    BN_BLINDING_free((BN_BLINDING *)r->bignum_data);
    BN_BLINDING_free(r->blinding);
    RSA_PSS_PARAMS_free((ASN1_VALUE *)r->ex_data.sk);
    free(r);
  }
}

int RSA_up_ref(RSA *r)
{
  return CRYPTO_add_lock(&r->references, 1, 9, 0, 0) > 1;
}

int RSA_get_ex_new_index(uint64_t argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
{
  return CRYPTO_get_ex_new_index(6, argl, argp, new_func, dup_func, free_func);
}

int RSA_set_ex_data(RSA *r, int idx, void *arg)
{
  return CRYPTO_set_ex_data((CRYPTO_EX_DATA *)&r->ex_data.dummy, idx, arg);
}

void *__cdecl RSA_get_ex_data(const RSA *r, int idx)
{
  return CRYPTO_get_ex_data((const CRYPTO_EX_DATA *)&r->ex_data.dummy, idx);
}

uint64_t RSA_security_bits(uint64_t a1)
{
  int v1 = RSA_bits(a1);
  return BN_security_bits(v1, -1);
}

void *RSA_get0_key(void *result, void *a2, void *a3, void *a4)
{
  if (a2) {
    *a2 = result[4];
  }
  if (a3) {
    *a3 = result[5];
  }
  if (a4) {
    *a4 = result[6];
  }
  return result;
}

uint64_t RSA_set0_key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(BIGNUM **)(a1 + 32);
  if (!(a2 | (unint64_t)v5) || !(a3 | *(void *)(a1 + 40))) {
    return 0;
  }
  if (a2)
  {
    BN_free(v5);
    *(void *)(a1 + 32) = a2;
  }
  if (a3)
  {
    BN_free(*(BIGNUM **)(a1 + 40));
    *(void *)(a1 + 40) = a3;
  }
  if (a4)
  {
    BN_free(*(BIGNUM **)(a1 + 48));
    *(void *)(a1 + 48) = a4;
  }
  return 1;
}

void *RSA_get0_crt_params(void *result, void *a2, void *a3, void *a4)
{
  if (a2) {
    *a2 = result[9];
  }
  if (a3) {
    *a3 = result[10];
  }
  if (a4) {
    *a4 = result[11];
  }
  return result;
}

uint64_t RSA_set0_crt_params(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(BIGNUM **)(a1 + 72);
  if (!(a2 | (unint64_t)v5) || !(a3 | *(void *)(a1 + 80)) || !(a4 | *(void *)(a1 + 88))) {
    return 0;
  }
  if (a2)
  {
    BN_free(v5);
    *(void *)(a1 + 72) = a2;
  }
  if (a3)
  {
    BN_free(*(BIGNUM **)(a1 + 80));
    *(void *)(a1 + 80) = a3;
  }
  if (a4)
  {
    BN_free(*(BIGNUM **)(a1 + 88));
    *(void *)(a1 + 88) = a4;
  }
  return 1;
}

uint64_t RSA_get0_factors(uint64_t result, void *a2, void *a3)
{
  if (a2) {
    *a2 = *(void *)(result + 56);
  }
  if (a3) {
    *a3 = *(void *)(result + 64);
  }
  return result;
}

uint64_t RSA_set0_factors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(BIGNUM **)(a1 + 56);
  if (!(a2 | (unint64_t)v4) || !(a3 | *(void *)(a1 + 64))) {
    return 0;
  }
  if (a2)
  {
    BN_free(v4);
    *(void *)(a1 + 56) = a2;
  }
  if (a3)
  {
    BN_free(*(BIGNUM **)(a1 + 64));
    *(void *)(a1 + 64) = a3;
  }
  return 1;
}

uint64_t RSA_get0_n(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t RSA_get0_e(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t RSA_get0_d(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t RSA_get0_p(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t RSA_get0_q(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t RSA_get0_dmp1(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t RSA_get0_dmq1(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t RSA_get0_iqmp(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t RSA_get0_pss_params(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t RSA_clear_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 116) &= ~a2;
  return result;
}

uint64_t RSA_test_flags(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 116) & a2;
}

uint64_t RSA_set_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 116) |= a2;
  return result;
}

uint64_t RSA_pkey_ctx_ctrl(uint64_t *a1, int a2)
{
  if (a1 && *a1 && ((v2 = *(_DWORD *)*a1, v2 != 912) ? (BOOL v3 = v2 == 6) : (BOOL v3 = 1), !v3)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return EVP_PKEY_CTX_ctrl(a1, -1, a2);
  }
}

EC_GROUP *__cdecl EC_GROUP_new_by_curve_name(int nid)
{
  if (nid >= 1)
  {
    char v2 = 0;
    unint64_t v3 = 0x1FFFFFFFFFFFFDE4uLL;
    while (LODWORD((&curve_list)[v3 + 541]) != nid)
    {
      ++v2;
      v3 += 10;
      if (!(v3 * 8))
      {
        ERR_put_error(16, 4095, 129, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/ec/ec_curve.c", 3122);
        return 0;
      }
    }
    int v5 = BN_CTX_new();
    unsigned int v6 = v5;
    if (v5)
    {
      BN_CTX_start(v5);
      uint64_t v4 = BN_CTX_get(v6);
      if (!v4)
      {
        int v22 = 3;
        int v23 = 3015;
LABEL_31:
        ERR_put_error(16, 4095, v22, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/ec/ec_curve.c", v23);
        int v19 = 0;
LABEL_42:
        int v18 = 0;
        goto LABEL_43;
      }
      int v7 = BN_CTX_get(v6);
      if (v7)
      {
        int v8 = v7;
        uint64_t v9 = BN_CTX_get(v6);
        if (v9)
        {
          uint64_t v10 = v9;
          int v11 = BN_CTX_get(v6);
          if (v11)
          {
            uint64_t v12 = v11;
            int v13 = BN_CTX_get(v6);
            if (v13)
            {
              ret = v13;
              int v14 = BN_CTX_get(v6);
              if (v14)
              {
                v15 = v14;
                uint64_t v16 = BN_CTX_get(v6);
                if (v16)
                {
                  a = v16;
                  int len = (int)(&curve_list)[v3 + 542];
                  if (BN_bin2bn((const unsigned __int8 *)(&curve_list)[v3 + 544], len, v4))
                  {
                    if (BN_bin2bn((const unsigned __int8 *)(&curve_list)[v3 + 545], len, v8))
                    {
                      if (BN_bin2bn((const unsigned __int8 *)(&curve_list)[v3 + 546], len, v10))
                      {
                        v17 = EC_GROUP_new_curve_GFp(v4, v8, v10, v6);
                        uint64_t v4 = (BIGNUM *)v17;
                        if (v17)
                        {
                          EC_GROUP_set_curve_name(v17, nid);
                          int v18 = EC_POINT_new((const EC_GROUP *)v4);
                          if (v18)
                          {
                            if (BN_bin2bn((const unsigned __int8 *)(&curve_list)[v3 + 547], len, v12))
                            {
                              if (BN_bin2bn((const unsigned __int8 *)(&curve_list)[v3 + 548], len, ret))
                              {
                                if (EC_POINT_set_affine_coordinates((const EC_GROUP *)v4, v18, (uint64_t)v12, (uint64_t)ret, v6))
                                {
                                  if (BN_bin2bn((const unsigned __int8 *)(&curve_list)[v3 + 549], len, v15))
                                  {
                                    if (BN_set_word(a, *((unsigned int *)&curve_list + 2 * v3 + 1085)))
                                    {
                                      if (EC_GROUP_set_generator((EC_GROUP *)v4, v18, v15, a))
                                      {
                                        if (((0x3FFFFFFFC00590uLL >> v2) & 1) != 0
                                          || EC_GROUP_set_seed((EC_GROUP *)v4, (const unsigned __int8 *)(&curve_list)[v3 + 543], *((int *)&curve_list + 2 * v3 + 1083)))
                                        {
                                          int v19 = 0;
LABEL_43:
                                          EC_GROUP_free(v19);
                                          EC_POINT_free(v18);
                                          BN_CTX_end(v6);
                                          BN_CTX_free(v6);
                                          return (EC_GROUP *)v4;
                                        }
                                        int v25 = 16;
                                        int v26 = 3092;
                                      }
                                      else
                                      {
                                        int v25 = 16;
                                        int v26 = 3086;
                                      }
                                    }
                                    else
                                    {
                                      int v25 = 3;
                                      int v26 = 3082;
                                    }
                                  }
                                  else
                                  {
                                    int v25 = 16;
                                    int v26 = 3078;
                                  }
                                }
                                else
                                {
                                  int v25 = 16;
                                  int v26 = 3074;
                                }
                              }
                              else
                              {
                                int v25 = 3;
                                int v26 = 3070;
                              }
                            }
                            else
                            {
                              int v25 = 3;
                              int v26 = 3066;
                            }
                          }
                          else
                          {
                            int v25 = 16;
                            int v26 = 3062;
                          }
                          ERR_put_error(16, 4095, v25, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/ec/ec_curve.c", v26);
                          int v19 = (EC_GROUP *)v4;
                          uint64_t v4 = 0;
                          goto LABEL_43;
                        }
                        int v22 = 16;
                        int v23 = 3056;
                        goto LABEL_31;
                      }
                      int v20 = 3;
                      int v21 = 3052;
                    }
                    else
                    {
                      int v20 = 3;
                      int v21 = 3048;
                    }
                  }
                  else
                  {
                    int v20 = 3;
                    int v21 = 3044;
                  }
                }
                else
                {
                  int v20 = 3;
                  int v21 = 3039;
                }
              }
              else
              {
                int v20 = 3;
                int v21 = 3035;
              }
            }
            else
            {
              int v20 = 3;
              int v21 = 3031;
            }
          }
          else
          {
            int v20 = 3;
            int v21 = 3027;
          }
        }
        else
        {
          int v20 = 3;
          int v21 = 3023;
        }
      }
      else
      {
        int v20 = 3;
        int v21 = 3019;
      }
    }
    else
    {
      int v20 = 65;
      int v21 = 3009;
    }
    ERR_put_error(16, 4095, v20, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/ec/ec_curve.c", v21);
    int v19 = 0;
    uint64_t v4 = 0;
    goto LABEL_42;
  }
  return 0;
}

size_t EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems)
{
  if (r && nitems)
  {
    size_t v2 = 54;
    if (nitems < 0x36) {
      size_t v2 = nitems;
    }
    p_comment = &r->comment;
    uint64_t v4 = &dword_264E52270;
    do
    {
      *((_DWORD *)p_comment - 2) = *v4;
      *p_comment = (const char *)*((void *)v4 - 1);
      p_comment += 2;
      v4 += 20;
      --v2;
    }
    while (v2);
  }
  return 54;
}

char *EC_curve_nid2nist(int a1)
{
  uint64_t v1 = 0;
  while (LODWORD((&nist_curves)[v1 + 1]) != a1)
  {
    v1 += 2;
    if (v1 == 30) {
      return 0;
    }
  }
  return (&nist_curves)[v1];
}

uint64_t EC_curve_nist2nid(char *__s2)
{
  uint64_t v2 = 0;
  while (strcmp((&nist_curves)[v2], __s2))
  {
    v2 += 2;
    if (v2 == 30) {
      return 0;
    }
  }
  return LODWORD((&nist_curves)[v2 + 1]);
}

void *freezero(void *result, size_t a2)
{
  if (result) {
    explicit_bzero(result, a2);
  }
  return result;
}

X509_CINF *__cdecl d2i_X509_CINF(X509_CINF **a, const unsigned __int8 **in, uint64_t len)
{
  return (X509_CINF *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &X509_CINF_it);
}

int i2d_X509_CINF(X509_CINF *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_CINF_it);
}

X509_CINF *X509_CINF_new(void)
{
  return (X509_CINF *)ASN1_item_new(&X509_CINF_it);
}

void X509_CINF_free(X509_CINF *a)
{
}

X509 *__cdecl d2i_X509(X509 **a, const unsigned __int8 **in, uint64_t len)
{
  return (X509 *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &X509_it);
}

int i2d_X509(X509 *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_it);
}

X509 *X509_new(void)
{
  return (X509 *)ASN1_item_new(&X509_it);
}

void X509_free(X509 *a)
{
}

X509 *__cdecl X509_dup(X509 *x509)
{
  return (X509 *)ASN1_item_dup(&X509_it, x509);
}

int X509_get_ex_new_index(uint64_t argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
{
  return CRYPTO_get_ex_new_index(10, argl, argp, new_func, dup_func, free_func);
}

int X509_set_ex_data(X509 *r, int idx, void *arg)
{
  return CRYPTO_set_ex_data(&r->ex_data, idx, arg);
}

void *__cdecl X509_get_ex_data(X509 *r, int idx)
{
  return CRYPTO_get_ex_data(&r->ex_data, idx);
}

X509 *__cdecl d2i_X509_AUX(X509 **a, const unsigned __int8 **pp, uint64_t length)
{
  unsigned int v6 = *pp;
  int v7 = ASN1_item_d2i(0, pp, length, &X509_it);
  int v8 = (X509 *)v7;
  if (v7)
  {
    uint64_t v9 = v6 - *pp + length;
    if (v9 < 1 || d2i_X509_CERT_AUX((X509_CERT_AUX **)v7 + 28, pp, v9))
    {
      if (a)
      {
        ASN1_item_free((ASN1_VALUE *)*a, &X509_it);
        BIGNUM *a = v8;
      }
    }
    else
    {
      ASN1_item_free((ASN1_VALUE *)v8, &X509_it);
      return 0;
    }
  }
  return v8;
}

int i2d_X509_AUX(X509 *a, unsigned __int8 **pp)
{
  int v4 = ASN1_item_i2d((ASN1_VALUE *)a, pp, &X509_it);
  if (a) {
    v4 += i2d_X509_CERT_AUX((X509_CERT_AUX *)a[1].ex_pcpathlen, pp);
  }
  return v4;
}

uint64_t i2d_re_X509_tbs(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  *(_DWORD *)(v2 + 96) = 1;
  return ASN1_item_i2d((ASN1_VALUE *)v2, a2, &X509_CINF_it);
}

void *X509_get0_signature(void *result, void *a2, uint64_t a3)
{
  if (result) {
    const RSA_METHOD *result = *(void *)(a3 + 16);
  }
  if (a2) {
    *a2 = *(void *)(a3 + 8);
  }
  return result;
}

uint64_t X509_get_signature_nid(uint64_t a1)
{
  return OBJ_obj2nid(**(const ASN1_OBJECT ***)(a1 + 8));
}

uint64_t x509_cb(int a1, void **a2)
{
  uint64_t v2 = (char *)*a2;
  switch(a1)
  {
    case 5:
      free(*((void **)v2 + 4));
      *((void *)v2 + 4) = X509_NAME_oneline(*(X509_NAME **)(*(void *)v2 + 40), 0, 0);
      break;
    case 3:
      CRYPTO_free_ex_data(10, *a2, (CRYPTO_EX_DATA *)(v2 + 40));
      X509_CERT_AUX_free(*((X509_CERT_AUX **)v2 + 28));
      ASN1_OCTET_STRING_free(*((ASN1_OCTET_STRING **)v2 + 11));
      AUTHORITY_KEYID_free(*((AUTHORITY_KEYID **)v2 + 12));
      CRL_DIST_POINTS_free(*((CRL_DIST_POINTS **)v2 + 13));
      GENERAL_NAMES_free(*((GENERAL_NAMES **)v2 + 14));
      NAME_CONSTRAINTS_free(*((NAME_CONSTRAINTS **)v2 + 15));
      sk_pop_free(*((STACK **)v2 + 16), (void (__cdecl *)(void *))IPAddressFamily_free);
      ASIdentifiers_free(*((ASN1_VALUE **)v2 + 17));
      free(*((void **)v2 + 4));
      *((void *)v2 + 4) = 0;
      break;
    case 1:
      *((_DWORD *)v2 + 6) = 0;
      *((void *)v2 + 4) = 0;
      *((_OWORD *)v2 + 3) = xmmword_23C71CCE0;
      *((void *)v2 + 28) = 0;
      *((void *)v2 + 12) = 0;
      *((void *)v2 + 13) = 0;
      *((void *)v2 + 11) = 0;
      *((void *)v2 + 16) = 0;
      *((void *)v2 + 17) = 0;
      CRYPTO_new_ex_data(10, v2, (CRYPTO_EX_DATA *)(v2 + 40));
      break;
  }
  return 1;
}

void BN_RECP_CTX_init(BN_RECP_CTX *recp)
{
  recp->num_bitunsigned int s = 0;
  recp->flagunsigned int s = 0;
}

BN_RECP_CTX *BN_RECP_CTX_new(void)
{
  v0 = (BIGNUM *)malloc_type_malloc(0x40uLL, 0x10100400860DEA3uLL);
  uint64_t v1 = (BN_RECP_CTX *)v0;
  if (v0)
  {
    BN_init(v0);
    BN_init(&v1->Nr);
    v1->num_bitunsigned int s = 0;
    v1->flagunsigned int s = 1;
  }
  return v1;
}

void BN_RECP_CTX_free(BN_RECP_CTX *recp)
{
  if (recp)
  {
    BN_free(&recp->N);
    BN_free(&recp->Nr);
    if (recp->flags)
    {
      free(recp);
    }
  }
}

int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx)
{
  int result = bn_copy(&recp->N, rdiv);
  if (result)
  {
    BN_zero((uint64_t)&recp->Nr);
    recp->num_bitunsigned int s = BN_num_bits(rdiv);
    recp->shift = 0;
    return 1;
  }
  return result;
}

int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y, BN_RECP_CTX *recp, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  uint64_t v10 = BN_CTX_get(ctx);
  if (!v10) {
    goto LABEL_9;
  }
  if (y)
  {
    int v11 = v10;
    if (x == y)
    {
      if (!BN_sqr(v10, y, ctx))
      {
LABEL_9:
        int v12 = 0;
        goto LABEL_10;
      }
    }
    else if (!BN_mul(v10, x, y, ctx))
    {
      goto LABEL_9;
    }
  }
  else
  {
    int v11 = x;
  }
  int v12 = BN_div_recp(0, r, v11, recp, ctx);
LABEL_10:
  BN_CTX_end(ctx);
  return v12;
}

int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, BN_RECP_CTX *recp, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  uint64_t v10 = BN_CTX_get(ctx);
  int v11 = BN_CTX_get(ctx);
  if (!dv)
  {
    dv = BN_CTX_get(ctx);
    if (rem) {
      goto LABEL_3;
    }
LABEL_14:
    rem = BN_CTX_get(ctx);
    goto LABEL_3;
  }
  if (!rem) {
    goto LABEL_14;
  }
LABEL_3:
  BOOL v12 = 0;
  if (v10 && v11 && dv && rem)
  {
    if (BN_ucmp(m, &recp->N) < 0)
    {
      BN_zero((uint64_t)dv);
      BOOL v12 = bn_copy(rem, m);
    }
    else
    {
      int v13 = BN_num_bits(m);
      if (2 * recp->num_bits <= v13) {
        int v14 = v13;
      }
      else {
        int v14 = 2 * recp->num_bits;
      }
      if (v14 == recp->shift)
      {
        int v15 = v14;
      }
      else
      {
        int v15 = BN_reciprocal(&recp->Nr, &recp->N, v14, ctx);
        recp->shift = v15;
      }
      if (v15 != -1)
      {
        if (BN_rshift(v10, m, recp->num_bits))
        {
          if (BN_mul(v11, v10, &recp->Nr, ctx))
          {
            if (BN_rshift(dv, v11, v14 - recp->num_bits))
            {
              dv->neg = 0;
              if (BN_mul(v11, &recp->N, dv, ctx))
              {
                if (BN_usub(rem, m, v11))
                {
                  rem->neg = 0;
                  int v16 = 4;
                  BOOL v12 = 0;
                  while (1)
                  {
                    if (BN_ucmp(rem, &recp->N) < 0)
                    {
                      BN_set_negative(rem, m->neg);
                      BN_set_negative(dv, recp->N.neg ^ m->neg);
                      BOOL v12 = 1;
                      goto LABEL_32;
                    }
                    if (!--v16) {
                      break;
                    }
                    if (!BN_usub(rem, rem, &recp->N)) {
                      goto LABEL_31;
                    }
                    if (!BN_add_word(dv, 1uLL)) {
                      goto LABEL_32;
                    }
                  }
                  ERR_put_error(3, 4095, 101, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/bn/bn_recp.c", 214);
                }
              }
            }
          }
        }
      }
LABEL_31:
      BOOL v12 = 0;
    }
  }
LABEL_32:
  BN_CTX_end(ctx);
  return v12;
}

int BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  int v8 = BN_CTX_get(ctx);
  if (v8 && (uint64_t v9 = v8, BN_set_bit(v8, len)))
  {
    if (!BN_div_ct((uint64_t)r, 0, v9, m, ctx)) {
      int len = -1;
    }
  }
  else
  {
    int len = -1;
  }
  BN_CTX_end(ctx);
  return len;
}

STACK *i2v_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *a1, STACK *a2, STACK *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a3)
  {
    int v5 = a3;
    unsigned int v6 = 0;
  }
  else
  {
    int v5 = sk_new_null();
    unsigned int v6 = v5;
    if (!v5) {
      return v5;
    }
  }
  int v14 = 0;
  if (sk_num(a2) >= 1)
  {
    int v7 = 0;
    while (1)
    {
      int v8 = sk_value(a2, v7);
      if (!v8) {
        break;
      }
      uint64_t v9 = (ASN1_OBJECT **)v8;
      uint64_t v10 = i2v_GENERAL_NAME(a1, *((GENERAL_NAME **)v8 + 1), v5);
      if (!v10) {
        break;
      }
      int v5 = v10;
      int v11 = sk_value(v10, v7);
      if (!v11) {
        break;
      }
      BOOL v12 = v11;
      if (!i2t_ASN1_OBJECT(buf, 80, *v9)) {
        break;
      }
      if (asprintf(&v14, "%s - %s", buf, *((const char **)v12 + 1)) == -1)
      {
        int v14 = 0;
        ERR_put_error(34, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_info.c", 240);
        break;
      }
      free(*((void **)v12 + 1));
      *((void *)v12 + 1) = v14;
      if (++v7 >= sk_num(a2)) {
        return v5;
      }
    }
    sk_pop_free(v6, (void (__cdecl *)(void *))X509V3_conf_free);
    return 0;
  }
  return v5;
}

STACK *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *a1, X509V3_CTX *a2, const STACK *a3)
{
  unsigned int v6 = sk_new_null();
  if (!v6)
  {
    ERR_put_error(34, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_info.c", 266);
    return v6;
  }
  memset(&cnf, 0, sizeof(cnf));
  if (sk_num(a3) >= 1)
  {
    int v7 = 0;
    while (1)
    {
      int v8 = sk_value(a3, v7);
      uint64_t v9 = (char *)ASN1_item_new(&ACCESS_DESCRIPTION_it);
      if (!v9) {
        break;
      }
      uint64_t v10 = v9;
      if (!sk_push(v6, v9))
      {
        ASN1_item_free((ASN1_VALUE *)v10, &ACCESS_DESCRIPTION_it);
        int v19 = 65;
        int v20 = 277;
        goto LABEL_17;
      }
      int v11 = (char *)*((void *)v8 + 1);
      BOOL v12 = strchr(v11, 59);
      if (!v12)
      {
        int v19 = 143;
        int v20 = 282;
        goto LABEL_17;
      }
      int v13 = (int)v12;
      int v14 = (char *)*((void *)v8 + 2);
      cnf.name = v12 + 1;
      cnf.value = v14;
      if (!v2i_GENERAL_NAME_ex(*((GENERAL_NAME **)v10 + 1), a1, a2, &cnf, 0)) {
        goto LABEL_19;
      }
      size_t v15 = v13 - (int)v11 + 1;
      uint64_t v16 = (char *)malloc_type_malloc(v15, 0x7CCAC4BBuLL);
      if (!v16)
      {
        int v19 = 65;
        int v20 = 291;
        goto LABEL_17;
      }
      v17 = v16;
      strlcpy(v16, *((const char **)v8 + 1), v15);
      int v18 = OBJ_txt2obj(v17, 0);
      *(void *)uint64_t v10 = v18;
      if (!v18)
      {
        ERR_put_error(34, 4095, 119, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_info.c", 297);
        ERR_asprintf_error_data("value=%s", v17);
        free(v17);
LABEL_19:
        sk_pop_free(v6, (void (__cdecl *)(void *))ACCESS_DESCRIPTION_free);
        return 0;
      }
      free(v17);
      if (++v7 >= sk_num(a3)) {
        return v6;
      }
    }
    int v19 = 65;
    int v20 = 272;
LABEL_17:
    ERR_put_error(34, 4095, v19, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_info.c", v20);
    goto LABEL_19;
  }
  return v6;
}

ACCESS_DESCRIPTION *__cdecl d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION **a, const unsigned __int8 **in, uint64_t len)
{
  return (ACCESS_DESCRIPTION *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &ACCESS_DESCRIPTION_it);
}

int i2d_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &ACCESS_DESCRIPTION_it);
}

ACCESS_DESCRIPTION *ACCESS_DESCRIPTION_new(void)
{
  return (ACCESS_DESCRIPTION *)ASN1_item_new(&ACCESS_DESCRIPTION_it);
}

void ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION *a)
{
}

AUTHORITY_INFO_ACCESS *__cdecl d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS **a, const unsigned __int8 **in, uint64_t len)
{
  return (AUTHORITY_INFO_ACCESS *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &AUTHORITY_INFO_ACCESS_it);
}

int i2d_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &AUTHORITY_INFO_ACCESS_it);
}

AUTHORITY_INFO_ACCESS *AUTHORITY_INFO_ACCESS_new(void)
{
  return (AUTHORITY_INFO_ACCESS *)ASN1_item_new(&AUTHORITY_INFO_ACCESS_it);
}

void AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS *a)
{
}

int i2a_ACCESS_DESCRIPTION(BIO *bp, ACCESS_DESCRIPTION *a)
{
  return 2;
}

uint64_t CMS_SharedInfo_encode(unsigned __int8 **out, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v6 = bswap32(8 * a4);
  v7[0] = 0x400000004;
  v7[1] = &v6;
  v7[2] = 0;
  v5[0] = a2;
  v5[1] = a3;
  v5[2] = v7;
  return ASN1_item_i2d((ASN1_VALUE *)v5, out, &CMS_SharedInfo_it);
}

uint64_t cms_si_cb(int a1, uint64_t *a2)
{
  if (a1 == 3)
  {
    uint64_t v2 = *a2;
    EVP_PKEY_free(*(EVP_PKEY **)(*a2 + 64));
    X509_free(*(X509 **)(v2 + 56));
    EVP_MD_CTX_free(*(EVP_MD_CTX **)(v2 + 72));
  }
  return 1;
}

uint64_t cms_rek_cb(int a1, uint64_t a2)
{
  if (a1 == 3) {
    EVP_PKEY_free(*(EVP_PKEY **)(*(void *)a2 + 16));
  }
  return 1;
}

uint64_t cms_kari_cb(int a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a1 == 3)
  {
    EVP_PKEY_CTX_free(*(EVP_PKEY ***)(v2 + 40));
    EVP_CIPHER_CTX_free(*(EVP_CIPHER_CTX **)(v2 + 48));
    return 1;
  }
  if (a1 != 1) {
    return 1;
  }
  unint64_t v3 = EVP_CIPHER_CTX_new();
  *(void *)(v2 + 48) = v3;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 1;
  EVP_CIPHER_CTX_set_flags(v3, 1);
  *(void *)(v2 + 40) = 0;
  return v4;
}

uint64_t cms_ri_cb(int a1, int **a2)
{
  if (a1 == 2)
  {
    uint64_t v2 = *a2;
    int v3 = **a2;
    if (v3 == 3 || v3 == 2)
    {
      freezero(*(void **)(*((void *)v2 + 1) + 32), *(void *)(*((void *)v2 + 1) + 40));
    }
    else if (!v3)
    {
      uint64_t v4 = *((void *)v2 + 1);
      EVP_PKEY_free(*(EVP_PKEY **)(v4 + 40));
      X509_free(*(X509 **)(v4 + 32));
      EVP_PKEY_CTX_free(*(EVP_PKEY ***)(v4 + 48));
    }
  }
  return 1;
}

uint64_t cms_cb(int a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 1;
  }
  int v5 = (const ASN1_OBJECT **)*a2;
  switch(a1)
  {
    case 10:
      if ((int)CMS_stream((unsigned __int8 ***)(a4 + 16), *a2) < 1) {
        goto LABEL_9;
      }
      goto LABEL_7;
    case 11:
    case 13:
      if ((int)CMS_dataFinal(v5, *(BIO **)(a4 + 8)) >= 1) {
        goto LABEL_8;
      }
LABEL_9:
      uint64_t result = 0;
      break;
    case 12:
LABEL_7:
      uint64_t result = (uint64_t)CMS_dataInit(v5, *(BIO **)a4);
      *(void *)(a4 + 8) = result;
      if (result) {
        goto LABEL_8;
      }
      return result;
    default:
LABEL_8:
      uint64_t result = 1;
      break;
  }
  return result;
}

ASN1_TIME *ASN1_TIME_new(void)
{
  return (ASN1_TIME *)ASN1_item_new(&ASN1_TIME_it);
}

void ASN1_TIME_free(ASN1_TIME *a)
{
}

uint64_t ASN1_TIME_to_tm(int *a1, uint64_t a2)
{
  if (a1) {
    return ASN1_time_parse(*((void *)a1 + 1), *a1, (_OWORD *)a2, 0) != -1;
  }
  time_t v4 = 0;
  time(&v4);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a2 + 48) = 0;
  return asn1_time_time_t_to_tm(&v4, a2);
}

uint64_t ASN1_TIME_diff(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t result = ASN1_TIME_to_tm(a3, (uint64_t)v10);
  if (result)
  {
    uint64_t result = ASN1_TIME_to_tm(a4, (uint64_t)v8);
    if (result) {
      return OPENSSL_gmtime_diff(a1, a2, (int *)v10, (int *)v8);
    }
  }
  return result;
}

ASN1_TIME *__cdecl d2i_ASN1_TIME(ASN1_TIME **a, const unsigned __int8 **in, uint64_t len)
{
  return (ASN1_TIME *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &ASN1_TIME_it);
}

int i2d_ASN1_TIME(ASN1_TIME *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &ASN1_TIME_it);
}

int RIPEMD160_Update(RIPEMD160_CTX *c, const void *data, size_t len)
{
  if (len)
  {
    size_t v3 = len;
    time_t v4 = data;
    *(void *)&c->Nl += 8 * len;
    uint64_t num = c->num;
    if (num)
    {
      int v7 = c->data;
      int v8 = (char *)c->data + num;
      if (len <= 0x3F && num + len < 0x40)
      {
        memcpy(v8, data, len);
        c->num += v3;
        return 1;
      }
      uint64_t v9 = 64 - num;
      memcpy(v8, data, 64 - num);
      ripemd160_block_data_order(c, c->data, 1);
      time_t v4 = (_DWORD *)((char *)v4 + v9);
      v3 -= v9;
      c->uint64_t num = 0;
      *(_OWORD *)int v7 = 0u;
      *(_OWORD *)&c->data[4] = 0u;
      *(_OWORD *)&c->data[8] = 0u;
      *(_OWORD *)&c->data[12] = 0u;
    }
    if (v3 >= 0x40)
    {
      ripemd160_block_data_order(c, v4, v3 >> 6);
      time_t v4 = (_DWORD *)((char *)v4 + (v3 & 0xFFFFFFFFFFFFFFC0));
      v3 &= 0x3Fu;
    }
    if (v3)
    {
      c->uint64_t num = v3;
      memcpy(c->data, v4, v3);
    }
  }
  return 1;
}

_DWORD *ripemd160_block_data_order(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  v581 = result;
  if (a3)
  {
    int v5 = *result;
    unsigned int v4 = result[1];
    int v7 = result[2];
    int v6 = result[3];
    int v8 = result[4];
    do
    {
      int v593 = v7;
      int v594 = v8;
      int v595 = v5;
      uint64_t v588 = a3;
      int v9 = a2[1];
      HIDWORD(v10) = (v7 ^ v4 ^ v6) + v5 + *a2;
      LODWORD(v10) = HIDWORD(v10);
      int v11 = v8;
      int v12 = (v10 >> 21) + v8;
      HIDWORD(v10) = v7;
      LODWORD(v10) = v7;
      int v13 = v10 >> 22;
      unint64_t v14 = __PAIR64__(v4, __ROR4__(v7, 22));
      int v15 = v6;
      int v592 = v6;
      int v16 = v9 + v11 + (v4 ^ v14 ^ v12);
      LODWORD(v14) = v4;
      int v586 = v14 >> 22;
      HIDWORD(v14) = v16;
      LODWORD(v14) = v16;
      int v17 = (v14 >> 18) + v15;
      int v19 = a2[2];
      int v18 = a2[3];
      LODWORD(v14) = v19 + v15 + (v12 ^ __ROR4__(v4, 22) ^ v17);
      HIDWORD(v14) = v14;
      int v20 = v14 >> 17;
      HIDWORD(v14) = v12;
      LODWORD(v14) = v12;
      int v21 = v14 >> 22;
      int v587 = v13;
      int v22 = v20 + v13;
      LODWORD(v14) = v18 + v13 + (v17 ^ __ROR4__(v12, 22) ^ v22);
      HIDWORD(v14) = v14;
      int v23 = v14 >> 20;
      HIDWORD(v14) = v17;
      LODWORD(v14) = v17;
      int v24 = v14 >> 22;
      int v25 = a2[4];
      int v26 = a2[5];
      unsigned int v27 = v23 + v586;
      LODWORD(v14) = v25 + v586 + (v22 ^ __ROR4__(v17, 22) ^ v27);
      HIDWORD(v14) = v14;
      int v28 = (v14 >> 27) + v21;
      HIDWORD(v14) = v22;
      LODWORD(v14) = v22;
      int v29 = v14 >> 22;
      unint64_t v30 = __PAIR64__(v27, __ROR4__(v22, 22));
      int v31 = v26 + v21 + (v27 ^ v30 ^ v28);
      LODWORD(v30) = v27;
      int v32 = v30 >> 22;
      HIDWORD(v30) = v31;
      LODWORD(v30) = v31;
      int v33 = (v30 >> 24) + v24;
      int v34 = a2[6];
      int v35 = a2[7];
      LODWORD(v30) = v34 + v24 + (v28 ^ __ROR4__(v27, 22) ^ v33);
      HIDWORD(v30) = v30;
      int v36 = v30 >> 25;
      HIDWORD(v30) = v28;
      LODWORD(v30) = v28;
      int v37 = v30 >> 22;
      int v38 = v36 + v29;
      LODWORD(v30) = v35 + v29 + (v33 ^ __ROR4__(v28, 22) ^ v38);
      HIDWORD(v30) = v30;
      int v39 = v30 >> 23;
      HIDWORD(v30) = v33;
      LODWORD(v30) = v33;
      int v40 = v30 >> 22;
      int v41 = a2[9];
      unsigned int v42 = v39 + v32;
      LODWORD(v30) = a2[8] + v32 + (v38 ^ __ROR4__(v33, 22) ^ v42);
      HIDWORD(v30) = v30;
      int v43 = (v30 >> 21) + v37;
      HIDWORD(v30) = v38;
      LODWORD(v30) = v38;
      int v44 = v30 >> 22;
      unint64_t v45 = __PAIR64__(v42, __ROR4__(v38, 22));
      int v46 = v41 + v37 + (v42 ^ v45 ^ v43);
      LODWORD(v45) = v42;
      int v47 = v45 >> 22;
      HIDWORD(v45) = v46;
      LODWORD(v45) = v46;
      int v48 = (v45 >> 19) + v40;
      int v49 = a2[10];
      int v50 = a2[11];
      LODWORD(v45) = v49 + v40 + (v43 ^ __ROR4__(v42, 22) ^ v48);
      HIDWORD(v45) = v45;
      int v51 = v45 >> 18;
      HIDWORD(v45) = v43;
      LODWORD(v45) = v43;
      int v52 = v45 >> 22;
      int v53 = v51 + v44;
      LODWORD(v45) = v50 + v44 + (v48 ^ __ROR4__(v43, 22) ^ v53);
      HIDWORD(v45) = v45;
      int v54 = v45 >> 17;
      HIDWORD(v45) = v48;
      LODWORD(v45) = v48;
      int v55 = v45 >> 22;
      int v56 = a2[13];
      unsigned int v57 = v54 + v47;
      int v585 = a2[12];
      LODWORD(v45) = v585 + v47 + (v53 ^ __ROR4__(v48, 22) ^ v57);
      HIDWORD(v45) = v45;
      int v58 = (v45 >> 26) + v52;
      HIDWORD(v45) = v53;
      LODWORD(v45) = v53;
      int v59 = v45 >> 22;
      unint64_t v60 = __PAIR64__(v57, __ROR4__(v53, 22));
      int v61 = v52 + v56 + (v57 ^ v60 ^ v58);
      LODWORD(v60) = v57;
      int v62 = v60 >> 22;
      HIDWORD(v60) = v61;
      LODWORD(v60) = v61;
      int v63 = (v60 >> 25) + v55;
      int v64 = a2[14];
      LODWORD(v60) = v55 + v64 + (v58 ^ __ROR4__(v57, 22) ^ v63);
      HIDWORD(v60) = v60;
      int v65 = v60 >> 23;
      HIDWORD(v60) = v58;
      LODWORD(v60) = v58;
      int v66 = v60 >> 22;
      int v67 = v65 + v59;
      LODWORD(v60) = v59 + a2[15] + (v63 ^ __ROR4__(v58, 22) ^ v67);
      HIDWORD(v60) = v60;
      int v68 = (v60 >> 24) + v62;
      HIDWORD(v60) = v63;
      LODWORD(v60) = v63;
      int v69 = v60 >> 22;
      HIDWORD(v60) = v35 + 1518500249 + v62 + (v67 & v68 | v69 & ~v68);
      LODWORD(v60) = HIDWORD(v60);
      int v70 = (v60 >> 25) + v66;
      HIDWORD(v60) = v67;
      LODWORD(v60) = v67;
      int v71 = v60 >> 22;
      HIDWORD(v60) = v25 + 1518500249 + v66 + (v68 & v70 | v71 & ~v70);
      LODWORD(v60) = HIDWORD(v60);
      int v72 = (v60 >> 26) + v69;
      HIDWORD(v60) = v68;
      LODWORD(v60) = v68;
      int v73 = v60 >> 22;
      HIDWORD(v60) = v56 + 1518500249 + v69 + (v70 & v72 | v73 & ~v72);
      LODWORD(v60) = HIDWORD(v60);
      int v74 = (v60 >> 24) + v71;
      HIDWORD(v60) = v70;
      LODWORD(v60) = v70;
      int v75 = v60 >> 22;
      HIDWORD(v60) = v9 + 1518500249 + v71 + (v72 & v74 | v75 & ~v74);
      LODWORD(v60) = HIDWORD(v60);
      int v76 = (v60 >> 19) + v73;
      HIDWORD(v60) = v72;
      LODWORD(v60) = v72;
      int v77 = v60 >> 22;
      int v590 = a2[15];
      int v591 = v49;
      HIDWORD(v60) = v49 + 1518500249 + v73 + (v74 & v76 | v77 & ~v76);
      LODWORD(v60) = HIDWORD(v60);
      int v78 = (v60 >> 21) + v75;
      HIDWORD(v60) = v74;
      LODWORD(v60) = v74;
      int v79 = v60 >> 22;
      HIDWORD(v60) = v34 + 1518500249 + v75 + (v76 & v78 | v79 & ~v78);
      LODWORD(v60) = HIDWORD(v60);
      int v80 = (v60 >> 23) + v77;
      HIDWORD(v60) = v76;
      LODWORD(v60) = v76;
      int v81 = v60 >> 22;
      HIDWORD(v60) = v590 + 1518500249 + v77 + (v78 & v80 | v81 & ~v80);
      LODWORD(v60) = HIDWORD(v60);
      int v82 = (v60 >> 25) + v79;
      HIDWORD(v60) = v78;
      LODWORD(v60) = v78;
      int v83 = v60 >> 22;
      int v596 = v18;
      HIDWORD(v60) = v18 + 1518500249 + v79 + (v80 & v82 | v83 & ~v82);
      LODWORD(v60) = HIDWORD(v60);
      int v84 = (v60 >> 17) + v81;
      HIDWORD(v60) = v80;
      LODWORD(v60) = v80;
      int v85 = v60 >> 22;
      HIDWORD(v60) = v585 + 1518500249 + v81 + (v82 & v84 | v85 & ~v84);
      LODWORD(v60) = HIDWORD(v60);
      int v86 = (v60 >> 25) + v83;
      HIDWORD(v60) = v82;
      LODWORD(v60) = v82;
      int v87 = v60 >> 22;
      HIDWORD(v60) = *a2 + 1518500249 + v83 + (v84 & v86 | v87 & ~v86);
      LODWORD(v60) = HIDWORD(v60);
      int v88 = (v60 >> 20) + v85;
      HIDWORD(v60) = v84;
      LODWORD(v60) = v84;
      int v89 = v60 >> 22;
      HIDWORD(v60) = v41 + 1518500249 + v85 + (v86 & v88 | v89 & ~v88);
      LODWORD(v60) = HIDWORD(v60);
      int v90 = (v60 >> 17) + v87;
      HIDWORD(v60) = v86;
      LODWORD(v60) = v86;
      int v91 = v60 >> 22;
      HIDWORD(v60) = v26 + 1518500249 + v87 + (v88 & v90 | v91 & ~v90);
      LODWORD(v60) = HIDWORD(v60);
      int v92 = (v60 >> 23) + v89;
      HIDWORD(v60) = v88;
      LODWORD(v60) = v88;
      int v93 = v60 >> 22;
      HIDWORD(v60) = v19 + 1518500249 + v89 + (v90 & v92 | v93 & ~v92);
      LODWORD(v60) = HIDWORD(v60);
      int v94 = (v60 >> 21) + v91;
      HIDWORD(v60) = v90;
      LODWORD(v60) = v90;
      int v95 = v60 >> 22;
      int v96 = v64;
      int v97 = v64 + 1518500249 + v91 + (v92 & v94 | v95 & ~v94);
      HIDWORD(v60) = v92;
      LODWORD(v60) = v92;
      int v98 = v60 >> 22;
      HIDWORD(v60) = v97;
      LODWORD(v60) = v97;
      int v99 = (v60 >> 25) + v93;
      HIDWORD(v60) = v50 + 1518500249 + v93 + (v94 & v99 | v98 & ~v99);
      LODWORD(v60) = HIDWORD(v60);
      int v100 = v60 >> 19;
      HIDWORD(v60) = v94;
      LODWORD(v60) = v94;
      int v101 = v60 >> 22;
      int v102 = v100 + v95;
      int v584 = a2[8];
      HIDWORD(v60) = v584 + 1518500249 + v95 + (v99 & v102 | v101 & ~v102);
      LODWORD(v60) = HIDWORD(v60);
      unsigned int v103 = (v60 >> 20) + v98;
      HIDWORD(v60) = v99;
      LODWORD(v60) = v99;
      int v104 = v60 >> 22;
      LODWORD(v60) = v18 + 1859775393 + v98 + ((v103 | ~v102) ^ __ROR4__(v99, 22));
      HIDWORD(v60) = v60;
      int v105 = (v60 >> 21) + v101;
      HIDWORD(v60) = v102;
      LODWORD(v60) = v102;
      int v106 = v60 >> 22;
      unint64_t v107 = __PAIR64__(v103, __ROR4__(v102, 22));
      int v108 = v49 + 1859775393 + v101 + ((v105 | ~v103) ^ v107);
      LODWORD(v107) = v103;
      int v109 = v107 >> 22;
      HIDWORD(v107) = v108;
      LODWORD(v107) = v108;
      int v110 = (v107 >> 19) + v104;
      LODWORD(v107) = v96 + 1859775393 + v104 + ((v110 | ~v105) ^ __ROR4__(v103, 22));
      HIDWORD(v107) = v107;
      unsigned int v111 = (v107 >> 26) + v106;
      HIDWORD(v107) = v105;
      LODWORD(v107) = v105;
      int v112 = v107 >> 22;
      LODWORD(v107) = v25 + 1859775393 + v106 + ((v111 | ~v110) ^ __ROR4__(v105, 22));
      HIDWORD(v107) = v107;
      int v113 = (v107 >> 25) + v109;
      HIDWORD(v107) = v110;
      LODWORD(v107) = v110;
      int v114 = v107 >> 22;
      unint64_t v115 = __PAIR64__(v111, __ROR4__(v110, 22));
      int v116 = v41 + 1859775393 + v109 + ((v113 | ~v111) ^ v115);
      LODWORD(v115) = v111;
      int v117 = v115 >> 22;
      HIDWORD(v115) = v116;
      LODWORD(v115) = v116;
      int v118 = (v115 >> 18) + v112;
      LODWORD(v115) = v590 + 1859775393 + v112 + ((v118 | ~v113) ^ __ROR4__(v111, 22));
      HIDWORD(v115) = v115;
      unsigned int v119 = (v115 >> 23) + v114;
      HIDWORD(v115) = v113;
      LODWORD(v115) = v113;
      int v120 = v115 >> 22;
      LODWORD(v115) = v584 + 1859775393 + v114 + ((v119 | ~v118) ^ __ROR4__(v113, 22));
      HIDWORD(v115) = v115;
      int v121 = (v115 >> 19) + v117;
      HIDWORD(v115) = v118;
      LODWORD(v115) = v118;
      int v122 = v115 >> 22;
      unint64_t v123 = __PAIR64__(v119, __ROR4__(v118, 22));
      int v124 = v9 + 1859775393 + v117 + ((v121 | ~v119) ^ v123);
      LODWORD(v123) = v119;
      int v125 = v123 >> 22;
      HIDWORD(v123) = v124;
      LODWORD(v123) = v124;
      int v126 = (v123 >> 17) + v120;
      LODWORD(v123) = v19 + 1859775393 + v120 + ((v126 | ~v121) ^ __ROR4__(v119, 22));
      HIDWORD(v123) = v123;
      unsigned int v127 = (v123 >> 18) + v122;
      HIDWORD(v123) = v121;
      LODWORD(v123) = v121;
      int v128 = v123 >> 22;
      LODWORD(v123) = v35 + 1859775393 + v122 + ((v127 | ~v126) ^ __ROR4__(v121, 22));
      HIDWORD(v123) = v123;
      int v129 = (v123 >> 24) + v125;
      HIDWORD(v123) = v126;
      LODWORD(v123) = v126;
      int v130 = v123 >> 22;
      unint64_t v131 = __PAIR64__(v127, __ROR4__(v126, 22));
      int v132 = *a2 + 1859775393 + v125 + ((v129 | ~v127) ^ v131);
      LODWORD(v131) = v127;
      int v133 = v131 >> 22;
      HIDWORD(v131) = v132;
      LODWORD(v131) = v132;
      unsigned int v134 = (v131 >> 19) + v128;
      LODWORD(v131) = v34 + 1859775393 + v128 + ((v134 | ~v129) ^ __ROR4__(v127, 22));
      HIDWORD(v131) = v131;
      unsigned int v135 = (v131 >> 26) + v130;
      HIDWORD(v131) = v129;
      LODWORD(v131) = v129;
      int v136 = v131 >> 22;
      LODWORD(v131) = v56 + 1859775393 + v130 + ((v135 | ~v134) ^ __ROR4__(v129, 22));
      HIDWORD(v131) = v131;
      unsigned int v137 = (v131 >> 27) + v133;
      LODWORD(v131) = v50 + 1859775393 + v133 + ((v137 | ~v135) ^ __ROR4__(v134, 22));
      HIDWORD(v131) = v131;
      int v138 = v131 >> 20;
      HIDWORD(v131) = v5 + 1352829926 + ((v593 | ~v592) ^ v4) + v26;
      LODWORD(v131) = HIDWORD(v131);
      unsigned int v139 = v138 + v136;
      int v140 = (v131 >> 24) + v594;
      LODWORD(v131) = v594 + 1352829926 + v96 + (v140 ^ (v4 | ~__ROR4__(v593, 22)));
      HIDWORD(v131) = v131;
      unsigned int v141 = (v131 >> 23) + v592;
      int v142 = v592 + 1352829926 + v35 + (v141 ^ (v140 | ~__ROR4__(v4, 22)));
      unint64_t v143 = __PAIR64__(v142, __ROR4__(v135, 22));
      int v144 = v26 + 1859775393 + v136 + ((v139 | ~v137) ^ v143);
      LODWORD(v143) = v142;
      int v145 = (v143 >> 23) + v587;
      LODWORD(v143) = v587 + 1352829926 + *a2 + (v145 ^ (v141 | ~__ROR4__(v140, 22)));
      HIDWORD(v143) = v143;
      unsigned int v146 = (v143 >> 21) + v586;
      unint64_t v147 = __PAIR64__(v134, __ROR4__(v141, 22));
      int v148 = v586 + 1352829926 + v41 + (v146 ^ (v145 | ~v147));
      LODWORD(v147) = v134;
      int v149 = v147 >> 22;
      HIDWORD(v147) = v140;
      LODWORD(v147) = v140;
      int v150 = v147 >> 22;
      HIDWORD(v147) = v148;
      LODWORD(v147) = v148;
      unsigned int v151 = (v147 >> 19) + v150;
      int v152 = v19 + 1352829926 + v150;
      HIDWORD(v147) = v144;
      LODWORD(v147) = v144;
      unsigned int v153 = (v147 >> 25) + v149;
      unint64_t v154 = __PAIR64__(v141, __ROR4__(v137, 22));
      int v155 = v585 + 1859775393 + v149 + ((v153 | ~v139) ^ v154);
      LODWORD(v154) = v141;
      int v156 = v154 >> 22;
      HIDWORD(v154) = v152 + (v151 ^ (v146 | ~__ROR4__(v145, 22)));
      LODWORD(v154) = HIDWORD(v154);
      unsigned int v157 = (v154 >> 17) + v156;
      unint64_t v158 = __PAIR64__(v135, __ROR4__(v146, 22));
      int v159 = v50 + 1352829926 + v156 + (v157 ^ (v151 | ~v158));
      LODWORD(v158) = v135;
      int v160 = v158 >> 22;
      HIDWORD(v158) = v145;
      LODWORD(v158) = v145;
      int v161 = v158 >> 22;
      HIDWORD(v158) = v159;
      LODWORD(v158) = v159;
      int v162 = (v158 >> 17) + v161;
      HIDWORD(v158) = v155;
      LODWORD(v158) = v155;
      int v589 = a2[1];
      int v163 = v589 - 1894007588 + v160;
      int v164 = (v158 >> 27) + v160;
      unint64_t v165 = __PAIR64__(v146, __ROR4__(v139, 22));
      int v166 = v164 & v165 | v153 & ~__ROR4__(v139, 22);
      LODWORD(v165) = v146;
      int v167 = v165 >> 22;
      HIDWORD(v165) = v25 + 1352829926 + v161 + (v162 ^ (v157 | ~__ROR4__(v151, 22)));
      LODWORD(v165) = HIDWORD(v165);
      unsigned int v168 = (v165 >> 27) + v167;
      unint64_t v169 = __PAIR64__(v151, __ROR4__(v157, 22));
      int v170 = v56 + 1352829926 + v167 + (v168 ^ (v162 | ~v169));
      LODWORD(v169) = v151;
      int v171 = v169 >> 22;
      HIDWORD(v169) = v170;
      LODWORD(v169) = v170;
      unsigned int v172 = (v169 >> 25) + v171;
      unint64_t v173 = __PAIR64__(v157, __ROR4__(v162, 22));
      int v174 = v34 + 1352829926 + v171 + (v172 ^ (v168 | ~v173));
      LODWORD(v173) = v157;
      int v175 = v173 >> 22;
      HIDWORD(v173) = v174;
      LODWORD(v173) = v174;
      unsigned int v176 = (v173 >> 25) + v175;
      unint64_t v177 = __PAIR64__(v137, __ROR4__(v168, 22));
      int v178 = v590 + 1352829926 + v175 + (v176 ^ (v172 | ~v177));
      LODWORD(v177) = v137;
      int v179 = v177 >> 22;
      HIDWORD(v177) = v163 + v166;
      LODWORD(v177) = v163 + v166;
      unsigned int v180 = (v177 >> 21) + v179;
      HIDWORD(v177) = v162;
      LODWORD(v177) = v162;
      int v181 = v177 >> 22;
      HIDWORD(v177) = v178;
      LODWORD(v177) = v178;
      int v182 = (v177 >> 24) + v181;
      unint64_t v183 = __PAIR64__(v168, __ROR4__(v172, 22));
      int v184 = v584 + 1352829926 + v181 + (v182 ^ (v176 | ~v183));
      LODWORD(v183) = v168;
      int v185 = v183 >> 22;
      HIDWORD(v183) = v184;
      LODWORD(v183) = v184;
      unsigned int v186 = (v183 >> 21) + v185;
      unint64_t v187 = __PAIR64__(v172, __ROR4__(v176, 22));
      int v188 = v589 + 1352829926 + v185 + (v186 ^ (v182 | ~v187));
      LODWORD(v187) = v172;
      int v189 = v187 >> 22;
      HIDWORD(v187) = v188;
      LODWORD(v187) = v188;
      unsigned int v190 = (v187 >> 18) + v189;
      unint64_t v191 = __PAIR64__(v176, __ROR4__(v182, 22));
      int v192 = v591 + 1352829926 + v189 + (v190 ^ (v186 | ~v191));
      LODWORD(v191) = v176;
      int v193 = v191 >> 22;
      HIDWORD(v191) = v192;
      LODWORD(v191) = v192;
      unsigned int v194 = (v191 >> 18) + v193;
      unint64_t v195 = __PAIR64__(v139, __ROR4__(v186, 22));
      int v196 = v18 + 1352829926 + v193 + (v194 ^ (v190 | ~v195));
      LODWORD(v195) = v139;
      int v197 = v195 >> 22;
      HIDWORD(v195) = v182;
      LODWORD(v195) = v182;
      int v198 = v195 >> 22;
      HIDWORD(v195) = v196;
      LODWORD(v195) = v196;
      unsigned int v199 = (v195 >> 20) + v198;
      int v200 = v585 + 1352829926 + v198;
      HIDWORD(v195) = v41 - 1894007588 + v179 + (v180 & __ROR4__(v153, 22) | v164 & ~__ROR4__(v153, 22));
      LODWORD(v195) = HIDWORD(v195);
      int v583 = a2[11];
      int v201 = v583 - 1894007588 + v197;
      int v202 = (v195 >> 20) + v197;
      unint64_t v203 = __PAIR64__(v186, __ROR4__(v164, 22));
      int v204 = v202 & v203 | v180 & ~__ROR4__(v164, 22);
      LODWORD(v203) = v186;
      int v205 = v203 >> 22;
      HIDWORD(v203) = v200 + (v199 ^ (v194 | ~__ROR4__(v190, 22)));
      LODWORD(v203) = HIDWORD(v203);
      unsigned int v206 = (v203 >> 26) + v205;
      unint64_t v207 = __PAIR64__(v190, __ROR4__(v194, 22));
      int v208 = v34 + 1548603684 + v205 + (v206 & __ROR4__(v194, 22) | v199 & ~v207);
      int v209 = v201 + v204;
      LODWORD(v207) = v190;
      int v210 = v207 >> 22;
      HIDWORD(v207) = v208;
      LODWORD(v207) = v208;
      unsigned int v211 = (v207 >> 23) + v210;
      unint64_t v212 = __PAIR64__(v153, __ROR4__(v199, 22));
      int v213 = v211 & v212 | v206 & ~__ROR4__(v199, 22);
      LODWORD(v212) = v153;
      int v214 = v212 >> 22;
      HIDWORD(v212) = v209;
      LODWORD(v212) = v209;
      unsigned int v215 = (v212 >> 18) + v214;
      unint64_t v216 = __PAIR64__(v194, __ROR4__(v180, 22));
      int v217 = v215 & v216 | v202 & ~__ROR4__(v180, 22);
      LODWORD(v216) = v194;
      int v218 = v216 >> 22;
      HIDWORD(v216) = v583 + 1548603684 + v210 + v213;
      LODWORD(v216) = HIDWORD(v216);
      int v219 = v591 - 1894007588 + v214;
      unsigned int v220 = (v216 >> 19) + v218;
      unint64_t v221 = __PAIR64__(v199, __ROR4__(v206, 22));
      int v222 = v220 & v221 | v211 & ~__ROR4__(v206, 22);
      unsigned int v223 = v219 + v217;
      LODWORD(v221) = v199;
      int v224 = v221 >> 22;
      HIDWORD(v221) = v164;
      LODWORD(v221) = v164;
      int v225 = v221 >> 22;
      HIDWORD(v221) = v18 + 1548603684 + v218 + v222;
      LODWORD(v221) = HIDWORD(v221);
      unsigned int v226 = (v221 >> 17) + v224;
      unint64_t v227 = __PAIR64__(v223, __ROR4__(v211, 22));
      int v228 = v226 & v227 | v220 & ~__ROR4__(v211, 22);
      LODWORD(v227) = v223;
      int v229 = *a2 - 1894007588 + v225;
      int v230 = (v227 >> 17) + v225;
      int v231 = v35 + 1548603684 + v224 + v228;
      unint64_t v232 = __PAIR64__(v206, __ROR4__(v202, 22));
      int v233 = v230 & __ROR4__(v202, 22) | v215 & ~v232;
      LODWORD(v232) = v206;
      int v234 = v232 >> 22;
      HIDWORD(v232) = v231;
      LODWORD(v232) = v231;
      unsigned int v235 = (v232 >> 25) + v234;
      unint64_t v236 = __PAIR64__(v211, __ROR4__(v220, 22));
      int v237 = *a2 + 1548603684 + v234 + (v235 & v236 | v226 & ~__ROR4__(v220, 22));
      int v238 = v229 + v233;
      LODWORD(v236) = v211;
      int v239 = v236 >> 22;
      HIDWORD(v236) = v237;
      LODWORD(v236) = v237;
      unsigned int v240 = (v236 >> 20) + v239;
      unint64_t v241 = __PAIR64__(v180, __ROR4__(v226, 22));
      int v242 = v240 & v241 | v235 & ~__ROR4__(v226, 22);
      LODWORD(v241) = v180;
      int v243 = v241 >> 22;
      HIDWORD(v241) = v238;
      LODWORD(v241) = v238;
      unsigned int v244 = (v241 >> 18) + v243;
      unint64_t v245 = __PAIR64__(v220, __ROR4__(v215, 22));
      int v246 = v244 & v245 | v230 & ~__ROR4__(v215, 22);
      LODWORD(v245) = v220;
      int v247 = v245 >> 22;
      HIDWORD(v245) = v56 + 1548603684 + v239 + v242;
      LODWORD(v245) = HIDWORD(v245);
      unsigned int v248 = (v245 >> 24) + v247;
      unint64_t v249 = __PAIR64__(v226, __ROR4__(v235, 22));
      int v250 = v248 & __ROR4__(v235, 22) | v240 & ~v249;
      unsigned int v251 = v584 - 1894007588 + v243 + v246;
      LODWORD(v249) = v226;
      int v252 = v249 >> 22;
      HIDWORD(v249) = v202;
      LODWORD(v249) = v202;
      int v253 = v249 >> 22;
      HIDWORD(v249) = v26 + 1548603684 + v247 + v250;
      LODWORD(v249) = HIDWORD(v249);
      unsigned int v254 = (v249 >> 23) + v252;
      unint64_t v255 = __PAIR64__(v251, __ROR4__(v240, 22));
      int v256 = v254 & v255 | v248 & ~__ROR4__(v240, 22);
      LODWORD(v255) = v251;
      int v257 = v585 - 1894007588 + v253;
      int v258 = (v255 >> 17) + v253;
      int v259 = v591 + 1548603684 + v252 + v256;
      unint64_t v260 = __PAIR64__(v235, __ROR4__(v230, 22));
      int v261 = v258 & v260 | v244 & ~__ROR4__(v230, 22);
      LODWORD(v260) = v235;
      int v262 = v260 >> 22;
      HIDWORD(v260) = v259;
      LODWORD(v260) = v259;
      unsigned int v263 = (v260 >> 21) + v262;
      unint64_t v264 = __PAIR64__(v240, __ROR4__(v248, 22));
      int v265 = v96 + 1548603684 + v262 + (v263 & v264 | v254 & ~__ROR4__(v248, 22));
      int v266 = v257 + v261;
      LODWORD(v264) = v240;
      int v267 = v264 >> 22;
      HIDWORD(v264) = v265;
      LODWORD(v264) = v265;
      unsigned int v268 = (v264 >> 25) + v267;
      unint64_t v269 = __PAIR64__(v215, __ROR4__(v254, 22));
      int v270 = v268 & __ROR4__(v254, 22) | v263 & ~v269;
      LODWORD(v269) = v215;
      int v271 = v269 >> 22;
      HIDWORD(v269) = v266;
      LODWORD(v269) = v266;
      unsigned int v272 = (v269 >> 23) + v271;
      unint64_t v273 = __PAIR64__(v248, __ROR4__(v244, 22));
      int v274 = v272 & __ROR4__(v244, 22) | v258 & ~v273;
      LODWORD(v273) = v248;
      int v275 = v273 >> 22;
      HIDWORD(v273) = v590 + 1548603684 + v267 + v270;
      LODWORD(v273) = HIDWORD(v273);
      unsigned int v276 = (v273 >> 25) + v275;
      unint64_t v277 = __PAIR64__(v254, __ROR4__(v263, 22));
      int v278 = v276 & v277 | v268 & ~__ROR4__(v263, 22);
      int v279 = v25 - 1894007588 + v271 + v274;
      LODWORD(v277) = v254;
      int v280 = v277 >> 22;
      HIDWORD(v277) = v230;
      LODWORD(v277) = v230;
      int v281 = v277 >> 22;
      HIDWORD(v277) = v584 + 1548603684 + v275 + v278;
      LODWORD(v277) = HIDWORD(v277);
      unsigned int v282 = (v277 >> 20) + v280;
      unint64_t v283 = __PAIR64__(v279, __ROR4__(v268, 22));
      int v284 = v282 & v283 | v276 & ~__ROR4__(v268, 22);
      LODWORD(v283) = v279;
      int v285 = v56 - 1894007588 + v281;
      unsigned int v286 = (v283 >> 24) + v281;
      int v287 = v585 + 1548603684 + v280 + v284;
      unint64_t v288 = __PAIR64__(v263, __ROR4__(v258, 22));
      int v289 = v286 & v288 | v272 & ~__ROR4__(v258, 22);
      LODWORD(v288) = v263;
      int v290 = v288 >> 22;
      HIDWORD(v288) = v287;
      LODWORD(v288) = v287;
      unsigned int v291 = (v288 >> 25) + v290;
      unint64_t v292 = __PAIR64__(v268, __ROR4__(v276, 22));
      int v293 = v25 + 1548603684 + v290 + (v291 & __ROR4__(v276, 22) | v282 & ~v292);
      int v294 = v285 + v289;
      LODWORD(v292) = v268;
      int v295 = v292 >> 22;
      HIDWORD(v292) = v293;
      LODWORD(v292) = v293;
      unsigned int v296 = (v292 >> 26) + v295;
      unint64_t v297 = __PAIR64__(v244, __ROR4__(v282, 22));
      int v298 = v296 & v297 | v291 & ~__ROR4__(v282, 22);
      LODWORD(v297) = v244;
      int v299 = v297 >> 22;
      HIDWORD(v297) = v294;
      LODWORD(v297) = v294;
      unsigned int v300 = (v297 >> 23) + v299;
      unint64_t v301 = __PAIR64__(v276, __ROR4__(v272, 22));
      int v302 = v300 & v301 | v286 & ~__ROR4__(v272, 22);
      int v303 = v41 + 1548603684 + v295 + v298;
      LODWORD(v301) = v276;
      int v304 = v301 >> 22;
      HIDWORD(v301) = v303;
      LODWORD(v301) = v303;
      int v305 = v18 - 1894007588 + v299;
      unsigned int v306 = (v301 >> 17) + v304;
      unint64_t v307 = __PAIR64__(v282, __ROR4__(v291, 22));
      int v308 = v306 & v307 | v296 & ~__ROR4__(v291, 22);
      unsigned int v309 = v305 + v302;
      LODWORD(v307) = v282;
      int v310 = v307 >> 22;
      HIDWORD(v307) = v258;
      LODWORD(v307) = v258;
      int v311 = v307 >> 22;
      HIDWORD(v307) = v589 + 1548603684 + v304 + v308;
      LODWORD(v307) = HIDWORD(v307);
      int v312 = (v307 >> 19) + v310;
      unint64_t v313 = __PAIR64__(v309, __ROR4__(v296, 22));
      int v314 = v312 & v313 | v306 & ~__ROR4__(v296, 22);
      LODWORD(v313) = v309;
      int v315 = v35 - 1894007588 + v311;
      unsigned int v316 = (v313 >> 18) + v311;
      int v317 = v19 + 1548603684 + v310 + v314;
      unint64_t v318 = __PAIR64__(v291, __ROR4__(v286, 22));
      int v319 = v316 & __ROR4__(v286, 22) | v300 & ~v318;
      LODWORD(v318) = v291;
      int v320 = v318 >> 22;
      HIDWORD(v318) = v317;
      LODWORD(v318) = v317;
      unsigned int v321 = (v318 >> 21) + v320;
      unint64_t v322 = __PAIR64__(v296, __ROR4__(v306, 22));
      int v323 = v590 + 1836072691 + v320 + ((v321 | ~v312) ^ v322);
      LODWORD(v322) = v296;
      int v324 = v322 >> 22;
      HIDWORD(v322) = v323;
      LODWORD(v322) = v323;
      unsigned int v325 = (v322 >> 23) + v324;
      unint64_t v326 = __PAIR64__(v306, __ROR4__(v312, 22));
      int v327 = v26 + 1836072691 + v324 + ((v325 | ~v321) ^ v326);
      LODWORD(v326) = v306;
      int v328 = v326 >> 22;
      HIDWORD(v326) = v327;
      LODWORD(v326) = v327;
      int v329 = v315 + v319;
      unsigned int v330 = (v326 >> 25) + v328;
      unint64_t v331 = __PAIR64__(v272, __ROR4__(v321, 22));
      int v332 = v589 + 1836072691 + v328 + ((v330 | ~v325) ^ v331);
      LODWORD(v331) = v272;
      int v333 = v331 >> 22;
      HIDWORD(v331) = v329;
      LODWORD(v331) = v329;
      int v334 = (v331 >> 27) + v333;
      HIDWORD(v331) = v312;
      LODWORD(v331) = v312;
      int v335 = v331 >> 22;
      HIDWORD(v331) = v332;
      LODWORD(v331) = v332;
      int v336 = (v331 >> 17) + v335;
      unint64_t v337 = __PAIR64__(v321, __ROR4__(v325, 22));
      int v338 = v18 + 1836072691 + v335 + ((v336 | ~v330) ^ v337);
      LODWORD(v337) = v321;
      int v339 = v337 >> 22;
      HIDWORD(v337) = v338;
      LODWORD(v337) = v338;
      unsigned int v340 = (v337 >> 21) + v339;
      unint64_t v341 = __PAIR64__(v325, __ROR4__(v330, 22));
      int v342 = v35 + 1836072691 + v339 + ((v340 | ~v336) ^ v341);
      LODWORD(v341) = v325;
      int v343 = v341 >> 22;
      HIDWORD(v341) = v342;
      LODWORD(v341) = v342;
      unsigned int v344 = (v341 >> 24) + v343;
      int v582 = a2[14];
      unint64_t v345 = __PAIR64__(v330, __ROR4__(v336, 22));
      int v346 = v96 + 1836072691 + v343 + ((v344 | ~v340) ^ v345);
      LODWORD(v345) = v330;
      int v347 = v345 >> 22;
      HIDWORD(v345) = v346;
      LODWORD(v345) = v346;
      unsigned int v348 = (v345 >> 26) + v347;
      unint64_t v349 = __PAIR64__(v286, __ROR4__(v340, 22));
      int v350 = v34 + 1836072691 + v347 + ((v348 | ~v344) ^ v349);
      LODWORD(v349) = v286;
      int v351 = v349 >> 22;
      HIDWORD(v349) = v336;
      LODWORD(v349) = v336;
      int v352 = v349 >> 22;
      HIDWORD(v349) = v350;
      LODWORD(v349) = v350;
      int v353 = (v349 >> 26) + v352;
      HIDWORD(v349) = v590 - 1894007588 + v333 + (v334 & __ROR4__(v300, 22) | v316 & ~__ROR4__(v300, 22));
      LODWORD(v349) = HIDWORD(v349);
      int v354 = v96 - 1894007588 + v351;
      int v355 = (v349 >> 26) + v351;
      unint64_t v356 = __PAIR64__(v340, __ROR4__(v316, 22));
      int v357 = v355 & v356 | v334 & ~__ROR4__(v316, 22);
      LODWORD(v356) = v340;
      int v358 = v356 >> 22;
      HIDWORD(v356) = v41 + 1836072691 + v352 + ((v353 | ~v348) ^ __ROR4__(v344, 22));
      LODWORD(v356) = HIDWORD(v356);
      unsigned int v359 = (v356 >> 18) + v358;
      unint64_t v360 = __PAIR64__(v344, __ROR4__(v348, 22));
      int v361 = v583 + 1836072691 + v358 + ((v359 | ~v353) ^ v360);
      LODWORD(v360) = v344;
      int v362 = v360 >> 22;
      HIDWORD(v360) = v361;
      LODWORD(v360) = v361;
      unsigned int v363 = (v360 >> 20) + v362;
      unint64_t v364 = __PAIR64__(v348, __ROR4__(v353, 22));
      int v365 = v584 + 1836072691 + v362 + ((v363 | ~v359) ^ v364);
      LODWORD(v364) = v348;
      int v366 = v364 >> 22;
      HIDWORD(v364) = v365;
      LODWORD(v364) = v365;
      int v367 = v354 + v357;
      unsigned int v368 = (v364 >> 19) + v366;
      unint64_t v369 = __PAIR64__(v300, __ROR4__(v359, 22));
      int v370 = v585 + 1836072691 + v366 + ((v368 | ~v363) ^ v369);
      LODWORD(v369) = v300;
      int v371 = v369 >> 22;
      HIDWORD(v369) = v367;
      LODWORD(v369) = v367;
      int v372 = (v369 >> 24) + v371;
      HIDWORD(v369) = v353;
      LODWORD(v369) = v353;
      int v373 = v369 >> 22;
      HIDWORD(v369) = v370;
      LODWORD(v369) = v370;
      int v374 = (v369 >> 27) + v373;
      unint64_t v375 = __PAIR64__(v359, __ROR4__(v363, 22));
      int v376 = v19 + 1836072691 + v373 + ((v374 | ~v368) ^ v375);
      LODWORD(v375) = v359;
      int v377 = v375 >> 22;
      HIDWORD(v375) = v376;
      LODWORD(v375) = v376;
      unsigned int v378 = (v375 >> 18) + v377;
      unint64_t v379 = __PAIR64__(v363, __ROR4__(v368, 22));
      int v380 = v591 + 1836072691 + v377 + ((v378 | ~v374) ^ v379);
      LODWORD(v379) = v363;
      int v381 = v379 >> 22;
      HIDWORD(v379) = v380;
      LODWORD(v379) = v380;
      unsigned int v382 = (v379 >> 19) + v381;
      unint64_t v383 = __PAIR64__(v368, __ROR4__(v374, 22));
      int v384 = *a2 + 1836072691 + v381 + ((v382 | ~v378) ^ v383);
      LODWORD(v383) = v368;
      int v385 = v383 >> 22;
      HIDWORD(v383) = v384;
      LODWORD(v383) = v384;
      int v386 = (v383 >> 19) + v385;
      unint64_t v387 = __PAIR64__(v316, __ROR4__(v378, 22));
      int v388 = v25 + 1836072691 + v385 + ((v386 | ~v382) ^ v387);
      LODWORD(v387) = v316;
      int v389 = v387 >> 22;
      HIDWORD(v387) = v374;
      LODWORD(v387) = v374;
      int v390 = v387 >> 22;
      HIDWORD(v387) = v388;
      LODWORD(v387) = v388;
      int v391 = (v387 >> 25) + v390;
      HIDWORD(v387) = v26 - 1894007588 + v371 + (v372 & __ROR4__(v334, 22) | v355 & ~__ROR4__(v334, 22));
      LODWORD(v387) = HIDWORD(v387);
      int v392 = v34 - 1894007588 + v389;
      int v393 = (v387 >> 26) + v389;
      unint64_t v394 = __PAIR64__(v378, __ROR4__(v355, 22));
      int v395 = v393 & v394 | v372 & ~__ROR4__(v355, 22);
      LODWORD(v394) = v378;
      int v396 = v394 >> 22;
      HIDWORD(v394) = v56 + 1836072691 + v390 + ((v391 | ~v386) ^ __ROR4__(v382, 22));
      LODWORD(v394) = HIDWORD(v394);
      int v397 = v394 >> 27;
      HIDWORD(v394) = v334;
      LODWORD(v394) = v334;
      int v398 = v394 >> 22;
      int v399 = v397 + v396;
      HIDWORD(v394) = v386;
      LODWORD(v394) = v386;
      int v400 = v394 >> 22;
      HIDWORD(v394) = v392 + v395;
      LODWORD(v394) = v392 + v395;
      int v401 = v19 - 1894007588 + v398;
      int v402 = (v394 >> 27) + v398;
      unint64_t v403 = __PAIR64__(v382, __ROR4__(v372, 22));
      int v404 = v402 & v403 | v393 & ~__ROR4__(v372, 22);
      LODWORD(v403) = v382;
      int v405 = v403 >> 22;
      HIDWORD(v403) = v584 + 2053994217 + v396 + (v391 & v399 | v400 & ~v399);
      LODWORD(v403) = HIDWORD(v403);
      int v406 = v403 >> 17;
      HIDWORD(v403) = v355;
      LODWORD(v403) = v355;
      int v407 = v403 >> 22;
      unsigned int v408 = v406 + v405;
      HIDWORD(v403) = v391;
      LODWORD(v403) = v391;
      int v409 = v403 >> 22;
      HIDWORD(v403) = v401 + v404;
      LODWORD(v403) = v401 + v404;
      int v410 = v25 - 1454113458 + v407;
      int v411 = (v403 >> 20) + v407;
      HIDWORD(v403) = v34 + 2053994217 + v405 + (v399 & v408 | v409 & ~v408);
      LODWORD(v403) = HIDWORD(v403);
      int v412 = (v403 >> 27) + v400;
      HIDWORD(v403) = v399;
      LODWORD(v403) = v399;
      int v413 = v403 >> 22;
      HIDWORD(v403) = v372;
      LODWORD(v403) = v372;
      int v414 = v403 >> 22;
      HIDWORD(v403) = v410 + (v411 ^ (v402 | ~__ROR4__(v393, 22)));
      LODWORD(v403) = HIDWORD(v403);
      int v415 = *a2 - 1454113458 + v414;
      int v416 = (v403 >> 23) + v414;
      HIDWORD(v403) = v393;
      LODWORD(v403) = v393;
      int v417 = v403 >> 22;
      HIDWORD(v403) = v25 + 2053994217 + v400 + (v408 & v412 | v413 & ~v412);
      LODWORD(v403) = HIDWORD(v403);
      int v418 = v403 >> 24;
      unint64_t v419 = __PAIR64__(v408, __ROR4__(v402, 22));
      int v420 = v415 + (v416 ^ (v411 | ~v419));
      unsigned int v421 = v418 + v409;
      LODWORD(v419) = v408;
      int v422 = v419 >> 22;
      HIDWORD(v419) = v420;
      LODWORD(v419) = v420;
      int v423 = v26 - 1454113458 + v417;
      int v424 = (v419 >> 17) + v417;
      HIDWORD(v419) = v589 + 2053994217 + v409 + (v412 & v421 | v422 & ~v421);
      LODWORD(v419) = HIDWORD(v419);
      int v425 = (v419 >> 21) + v413;
      HIDWORD(v419) = v412;
      LODWORD(v419) = v412;
      int v426 = v419 >> 22;
      HIDWORD(v419) = v402;
      LODWORD(v419) = v402;
      int v427 = v419 >> 22;
      HIDWORD(v419) = v423 + (v424 ^ (v416 | ~__ROR4__(v411, 22)));
      LODWORD(v419) = HIDWORD(v419);
      int v428 = v41 - 1454113458 + v427;
      int v429 = (v419 >> 27) + v427;
      HIDWORD(v419) = v411;
      LODWORD(v419) = v411;
      int v430 = v419 >> 22;
      HIDWORD(v419) = v18 + 2053994217 + v413 + (v421 & v425 | v426 & ~v425);
      LODWORD(v419) = HIDWORD(v419);
      int v431 = v419 >> 18;
      unint64_t v432 = __PAIR64__(v421, __ROR4__(v416, 22));
      int v433 = v428 + (v429 ^ (v424 | ~v432));
      unsigned int v434 = v431 + v422;
      LODWORD(v432) = v421;
      int v435 = v432 >> 22;
      HIDWORD(v432) = v433;
      LODWORD(v432) = v433;
      int v436 = v35 - 1454113458 + v430;
      int v437 = (v432 >> 21) + v430;
      HIDWORD(v432) = v583 + 2053994217 + v422 + (v425 & v434 | v435 & ~v434);
      LODWORD(v432) = HIDWORD(v432);
      int v438 = (v432 >> 18) + v426;
      HIDWORD(v432) = v425;
      LODWORD(v432) = v425;
      int v439 = v432 >> 22;
      HIDWORD(v432) = v416;
      LODWORD(v432) = v416;
      int v440 = v432 >> 22;
      HIDWORD(v432) = v436 + (v437 ^ (v429 | ~__ROR4__(v424, 22)));
      LODWORD(v432) = HIDWORD(v432);
      int v441 = v585 - 1454113458 + v440;
      int v442 = (v432 >> 26) + v440;
      HIDWORD(v432) = v424;
      LODWORD(v432) = v424;
      int v443 = v432 >> 22;
      HIDWORD(v432) = v590 + 2053994217 + v426 + (v434 & v438 | v439 & ~v438);
      LODWORD(v432) = HIDWORD(v432);
      int v444 = v432 >> 26;
      unint64_t v445 = __PAIR64__(v434, __ROR4__(v429, 22));
      int v446 = v441 + (v442 ^ (v437 | ~v445));
      unsigned int v447 = v444 + v435;
      LODWORD(v445) = v434;
      int v448 = v445 >> 22;
      HIDWORD(v445) = v446;
      LODWORD(v445) = v446;
      int v449 = v19 - 1454113458 + v443;
      int v450 = (v445 >> 24) + v443;
      HIDWORD(v445) = *a2 + 2053994217 + v435 + (v438 & v447 | v448 & ~v447);
      LODWORD(v445) = HIDWORD(v445);
      int v451 = (v445 >> 18) + v439;
      HIDWORD(v445) = v438;
      LODWORD(v445) = v438;
      int v452 = v445 >> 22;
      HIDWORD(v445) = v429;
      LODWORD(v445) = v429;
      int v453 = v445 >> 22;
      HIDWORD(v445) = v449 + (v450 ^ (v442 | ~__ROR4__(v437, 22)));
      LODWORD(v445) = HIDWORD(v445);
      int v454 = v591 - 1454113458 + v453;
      int v455 = (v445 >> 19) + v453;
      HIDWORD(v445) = v437;
      LODWORD(v445) = v437;
      int v456 = v445 >> 22;
      HIDWORD(v445) = v26 + 2053994217 + v439 + (v447 & v451 | v452 & ~v451);
      LODWORD(v445) = HIDWORD(v445);
      int v457 = v445 >> 26;
      unint64_t v458 = __PAIR64__(v447, __ROR4__(v442, 22));
      int v459 = v454 + (v455 ^ (v450 | ~v458));
      unsigned int v460 = v457 + v448;
      LODWORD(v458) = v447;
      int v461 = v458 >> 22;
      HIDWORD(v458) = v459;
      LODWORD(v458) = v459;
      int v462 = v582 - 1454113458 + v456;
      int v463 = (v458 >> 20) + v456;
      HIDWORD(v458) = v585 + 2053994217 + v448 + (v451 & v460 | v461 & ~v460);
      LODWORD(v458) = HIDWORD(v458);
      int v464 = (v458 >> 23) + v452;
      HIDWORD(v458) = v451;
      LODWORD(v458) = v451;
      int v465 = v458 >> 22;
      HIDWORD(v458) = v442;
      LODWORD(v458) = v442;
      int v466 = v458 >> 22;
      HIDWORD(v458) = v462 + (v463 ^ (v455 | ~__ROR4__(v450, 22)));
      LODWORD(v458) = HIDWORD(v458);
      int v467 = v589 - 1454113458 + v466;
      int v468 = (v458 >> 27) + v466;
      HIDWORD(v458) = v450;
      LODWORD(v458) = v450;
      int v469 = v458 >> 22;
      HIDWORD(v458) = v19 + 2053994217 + v452 + (v460 & v464 | v465 & ~v464);
      LODWORD(v458) = HIDWORD(v458);
      int v470 = v458 >> 20;
      unint64_t v471 = __PAIR64__(v460, __ROR4__(v455, 22));
      int v472 = v467 + (v468 ^ (v463 | ~v471));
      unsigned int v473 = v470 + v461;
      LODWORD(v471) = v460;
      int v474 = v471 >> 22;
      HIDWORD(v471) = v472;
      LODWORD(v471) = v472;
      int v475 = v18 - 1454113458 + v469;
      int v476 = (v471 >> 20) + v469;
      int v477 = v56 + 2053994217 + v461 + (v464 & v473 | v474 & ~v473);
      unint64_t v478 = __PAIR64__(v477, __ROR4__(v463, 22));
      int v479 = v475 + (v476 ^ (v468 | ~v478));
      LODWORD(v478) = v477;
      int v480 = (v478 >> 23) + v465;
      HIDWORD(v478) = v464;
      LODWORD(v478) = v464;
      int v481 = v478 >> 22;
      HIDWORD(v478) = v455;
      LODWORD(v478) = v455;
      int v482 = v478 >> 22;
      HIDWORD(v478) = v479;
      LODWORD(v478) = v479;
      int v483 = v584 - 1454113458 + v482;
      unsigned int v484 = (v478 >> 19) + v482;
      HIDWORD(v478) = v463;
      LODWORD(v478) = v463;
      int v485 = v478 >> 22;
      HIDWORD(v478) = v41 + 2053994217 + v465 + (v473 & v480 | v481 & ~v480);
      LODWORD(v478) = HIDWORD(v478);
      int v486 = v478 >> 20;
      unint64_t v487 = __PAIR64__(v473, __ROR4__(v468, 22));
      int v488 = v483 + (v484 ^ (v476 | ~v487));
      unsigned int v489 = v486 + v474;
      LODWORD(v487) = v473;
      int v490 = v487 >> 22;
      HIDWORD(v487) = v488;
      LODWORD(v487) = v488;
      int v491 = v583 - 1454113458 + v485;
      int v492 = (v487 >> 18) + v485;
      int v493 = v35 + 2053994217 + v474 + (v480 & (v486 + v474) | v490 & ~(v486 + v474));
      unint64_t v494 = __PAIR64__(v493, __ROR4__(v476, 22));
      int v495 = v491 + (v492 ^ (v484 | ~v494));
      LODWORD(v494) = v493;
      unsigned int v496 = (v494 >> 27) + v481;
      HIDWORD(v494) = v480;
      LODWORD(v494) = v480;
      int v497 = v494 >> 22;
      HIDWORD(v494) = v468;
      LODWORD(v494) = v468;
      int v498 = v494 >> 22;
      int v499 = v591 + 2053994217 + v481 + (v489 & v496 | v497 & ~v496);
      HIDWORD(v494) = v495;
      LODWORD(v494) = v495;
      int v500 = v34 - 1454113458 + v498;
      int v501 = (v494 >> 21) + v498;
      HIDWORD(v494) = v476;
      LODWORD(v494) = v476;
      int v502 = v494 >> 22;
      HIDWORD(v494) = v499;
      LODWORD(v494) = v499;
      int v503 = v494 >> 17;
      unint64_t v504 = __PAIR64__(v489, __ROR4__(v484, 22));
      int v505 = v500 + (v501 ^ (v492 | ~v504));
      unsigned int v506 = v503 + v490;
      LODWORD(v504) = v489;
      int v507 = v504 >> 22;
      int v508 = v496 & (v503 + v490) | v507 & ~(v503 + v490);
      HIDWORD(v504) = v505;
      LODWORD(v504) = v505;
      int v509 = (v504 >> 24) + v502;
      HIDWORD(v504) = v582 + 2053994217 + v490 + v508;
      LODWORD(v504) = HIDWORD(v504);
      unsigned int v510 = (v504 >> 24) + v497;
      LODWORD(v504) = v497 + v585 + (v506 ^ __ROR4__(v496, 22) ^ v510);
      HIDWORD(v504) = v504;
      unsigned int v511 = (v504 >> 24) + v507;
      unint64_t v512 = __PAIR64__(v496, __ROR4__(v506, 22));
      int v513 = v510 ^ v512 ^ v511;
      LODWORD(v512) = v496;
      int v514 = v512 >> 22;
      HIDWORD(v512) = v507 + v590 + v513;
      LODWORD(v512) = HIDWORD(v512);
      unsigned int v515 = (v512 >> 27) + v514;
      unint64_t v516 = __PAIR64__(v506, __ROR4__(v510, 22));
      int v517 = v514 + v591 + (v511 ^ v516 ^ v515);
      LODWORD(v516) = v506;
      int v518 = v516 >> 22;
      HIDWORD(v516) = v517;
      LODWORD(v516) = v517;
      unsigned int v519 = (v516 >> 20) + v518;
      unint64_t v520 = __PAIR64__(v510, __ROR4__(v511, 22));
      int v521 = v515 ^ v520 ^ v519;
      LODWORD(v520) = v510;
      int v522 = v520 >> 22;
      HIDWORD(v520) = v518 + v25 + v521;
      LODWORD(v520) = HIDWORD(v520);
      unsigned int v523 = (v520 >> 23) + v522;
      unint64_t v524 = __PAIR64__(v511, __ROR4__(v515, 22));
      int v525 = v522 + v589 + (v519 ^ v524 ^ v523);
      LODWORD(v524) = v511;
      int v526 = v524 >> 22;
      HIDWORD(v524) = v525;
      LODWORD(v524) = v525;
      unsigned int v527 = (v524 >> 20) + v526;
      unint64_t v528 = __PAIR64__(v515, __ROR4__(v519, 22));
      int v529 = v523 ^ v528 ^ v527;
      LODWORD(v528) = v515;
      int v530 = v528 >> 22;
      HIDWORD(v528) = v526 + v26 + v529;
      LODWORD(v528) = HIDWORD(v528);
      unsigned int v531 = (v528 >> 27) + v530;
      unint64_t v532 = __PAIR64__(v519, __ROR4__(v523, 22));
      int v533 = v530 + v584 + (v527 ^ v532 ^ v531);
      LODWORD(v532) = v519;
      int v534 = v532 >> 22;
      HIDWORD(v532) = v533;
      LODWORD(v532) = v533;
      unsigned int v535 = (v532 >> 18) + v534;
      unint64_t v536 = __PAIR64__(v523, __ROR4__(v527, 22));
      int v537 = v531 ^ v536 ^ v535;
      LODWORD(v536) = v523;
      int v538 = v536 >> 22;
      HIDWORD(v536) = v534 + v35 + v537;
      LODWORD(v536) = HIDWORD(v536);
      unsigned int v539 = (v536 >> 26) + v538;
      unint64_t v540 = __PAIR64__(v527, __ROR4__(v531, 22));
      int v541 = v538 + v34 + (v535 ^ v540 ^ v539);
      LODWORD(v540) = v527;
      int v542 = v540 >> 22;
      HIDWORD(v540) = v541;
      LODWORD(v540) = v541;
      unsigned int v543 = (v540 >> 24) + v542;
      unint64_t v544 = __PAIR64__(v531, __ROR4__(v492, 22));
      int v545 = v509 ^ (v501 | ~v544);
      LODWORD(v544) = v531;
      int v546 = v544 >> 22;
      HIDWORD(v544) = v542 + v19 + (v539 ^ __ROR4__(v535, 22) ^ v543);
      LODWORD(v544) = HIDWORD(v544);
      int v547 = v590 - 1454113458 + v502 + v545;
      unsigned int v548 = (v544 >> 19) + v546;
      unint64_t v549 = __PAIR64__(v535, __ROR4__(v539, 22));
      int v550 = v543 ^ v549 ^ v548;
      LODWORD(v549) = v535;
      int v551 = v549 >> 22;
      HIDWORD(v549) = v546 + v56 + v550;
      LODWORD(v549) = HIDWORD(v549);
      unsigned int v552 = (v549 >> 26) + v551;
      unint64_t v553 = __PAIR64__(v539, __ROR4__(v543, 22));
      int v554 = v551 + v582 + (v548 ^ v553 ^ v552);
      LODWORD(v553) = v539;
      int v555 = v553 >> 22;
      HIDWORD(v553) = v554;
      LODWORD(v553) = v554;
      int v556 = (v553 >> 27) + v555;
      unint64_t v557 = __PAIR64__(v543, __ROR4__(v548, 22));
      int v558 = v552 ^ v557 ^ v556;
      LODWORD(v557) = v543;
      int v559 = v557 >> 22;
      HIDWORD(v557) = v555 + *a2 + v558;
      LODWORD(v557) = HIDWORD(v557);
      int v560 = (v557 >> 17) + v559;
      unint64_t v561 = __PAIR64__(v548, __ROR4__(v552, 22));
      int v562 = v559 + v596 + (v556 ^ v561 ^ v560);
      LODWORD(v561) = v548;
      int v563 = v561 >> 22;
      HIDWORD(v561) = v562;
      LODWORD(v561) = v562;
      unsigned int v564 = (v561 >> 19) + v563;
      unint64_t v565 = __PAIR64__(v484, __ROR4__(v556, 22));
      int v566 = v560 ^ v565 ^ v564;
      LODWORD(v565) = v484;
      int v567 = v565 >> 22;
      int v568 = v563 + v41 + v566;
      HIDWORD(v565) = v547;
      LODWORD(v565) = v547;
      int v569 = v56 - 1454113458 + v567;
      int v570 = (v565 >> 27) + v567;
      unint64_t v572 = __PAIR64__(v552, __ROR4__(v501, 22));
      int v571 = v509 | ~v572;
      LODWORD(v572) = v552;
      int v573 = v572 >> 22;
      HIDWORD(v572) = v568;
      LODWORD(v572) = v568;
      int v574 = v569 + (v570 ^ v571);
      int v575 = (v572 >> 21) + v573;
      unint64_t v576 = __PAIR64__(v564, __ROR4__(v560, 22));
      uint64_t result = (_DWORD *)(v573 + v583 + (v564 ^ v576 ^ v575));
      LODWORD(v576) = v564;
      int v5 = v570 + v4 + (v576 >> 22);
      HIDWORD(v576) = v560;
      LODWORD(v576) = v560;
      int v577 = v593 + (v576 >> 22);
      HIDWORD(v576) = v509;
      LODWORD(v576) = v509;
      unsigned int v4 = (v576 >> 22) + v577;
      HIDWORD(v576) = v501;
      LODWORD(v576) = v501;
      int v578 = v576 >> 22;
      HIDWORD(v576) = v556;
      LODWORD(v576) = v556;
      int v579 = v576 >> 22;
      int v7 = v578 + v592 + v579;
      HIDWORD(v576) = v492;
      LODWORD(v576) = v492;
      int v580 = v576 >> 22;
      HIDWORD(v576) = result;
      LODWORD(v576) = result;
      int v6 = v580 + v594 + v579 + (v576 >> 21);
      HIDWORD(v576) = v574;
      LODWORD(v576) = v574;
      int v8 = v580 + v595 + v575 + (v576 >> 26);
      v581[2] = v7;
      v581[3] = v6;
      v581[4] = v8;
      _DWORD *v581 = v5;
      v581[1] = v4;
      a2 += 16;
      a3 = v588 - 1;
    }
    while (v588 != 1);
  }
  return result;
}

void RIPEMD160_Transform(RIPEMD160_CTX *c, const unsigned __int8 *b)
{
}

int RIPEMD160_Final(unsigned __int8 *md, RIPEMD160_CTX *c)
{
  data = c->data;
  uint64_t num = c->num;
  *((unsigned char *)c->data + num) = 0x80;
  uint64_t v6 = num + 1;
  if (num >= 0x38)
  {
    bzero((char *)data + v6, 63 - num);
    ripemd160_block_data_order(c, data, 1);
    uint64_t v6 = 0;
  }
  bzero((char *)data + v6, 56 - v6);
  unsigned int Nh = c->Nh;
  c->data[14] = c->Nl;
  c->data[15] = Nh;
  ripemd160_block_data_order(c, data, 1);
  c->uint64_t num = 0;
  *(_OWORD *)data = 0u;
  *((_OWORD *)data + ripemd160_block_data_order(c, b, 1) = 0u;
  *((_OWORD *)data + 2) = 0u;
  *((_OWORD *)data + 3) = 0u;
  *(_DWORD *)md = c->A;
  *((_DWORD *)md + ripemd160_block_data_order(c, b, 1) = c->B;
  *((_DWORD *)md + 2) = c->C;
  *((_DWORD *)md + 3) = c->D;
  *((_DWORD *)md + 4) = c->E;
  return 1;
}

int RIPEMD160_Init(RIPEMD160_CTX *c)
{
  *(_OWORD *)&c->data[9] = 0u;
  *(_OWORD *)&c->data[13] = 0u;
  *(_OWORD *)&c->data[1] = 0u;
  *(_OWORD *)&c->data[5] = 0u;
  *(_OWORD *)&c->A = xmmword_23C70F740;
  *(_OWORD *)&c->E = 0u;
  c->E = -1009589776;
  return 1;
}

ASN1_VALUE *d2i_RSA_PSS_PARAMS(ASN1_VALUE **a1, const unsigned __int8 **a2, uint64_t a3)
{
  return ASN1_item_d2i(a1, a2, a3, &RSA_PSS_PARAMS_it);
}

uint64_t i2d_RSA_PSS_PARAMS(ASN1_VALUE *a1, unsigned __int8 **a2)
{
  return ASN1_item_i2d(a1, a2, &RSA_PSS_PARAMS_it);
}

ASN1_VALUE *RSA_PSS_PARAMS_new()
{
  return ASN1_item_new(&RSA_PSS_PARAMS_it);
}

void RSA_PSS_PARAMS_free(ASN1_VALUE *a1)
{
}

ASN1_VALUE *d2i_RSA_OAEP_PARAMS(ASN1_VALUE **a1, const unsigned __int8 **a2, uint64_t a3)
{
  return ASN1_item_d2i(a1, a2, a3, &RSA_OAEP_PARAMS_it);
}

uint64_t i2d_RSA_OAEP_PARAMS(ASN1_VALUE *a1, unsigned __int8 **a2)
{
  return ASN1_item_i2d(a1, a2, &RSA_OAEP_PARAMS_it);
}

ASN1_VALUE *RSA_OAEP_PARAMS_new()
{
  return ASN1_item_new(&RSA_OAEP_PARAMS_it);
}

void RSA_OAEP_PARAMS_free(ASN1_VALUE *a1)
{
}

RSA *__cdecl d2i_RSAPrivateKey(RSA **a, const unsigned __int8 **in, uint64_t len)
{
  return (RSA *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &RSAPrivateKey_it);
}

int i2d_RSAPrivateKey(const RSA *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &RSAPrivateKey_it);
}

RSA *__cdecl d2i_RSAPublicKey(RSA **a, const unsigned __int8 **in, uint64_t len)
{
  return (RSA *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &RSAPublicKey_it);
}

int i2d_RSAPublicKey(const RSA *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &RSAPublicKey_it);
}

RSA *__cdecl RSAPublicKey_dup(RSA *rsa)
{
  return (RSA *)ASN1_item_dup(&RSAPublicKey_it, rsa);
}

RSA *__cdecl RSAPrivateKey_dup(RSA *rsa)
{
  return (RSA *)ASN1_item_dup(&RSAPrivateKey_it, rsa);
}

uint64_t rsa_cb(int a1, RSA **a2)
{
  if (a1 == 2)
  {
    RSA_free(*a2);
    *a2 = 0;
    return 2;
  }
  else if (a1)
  {
    return 1;
  }
  else
  {
    size_t v3 = RSA_new();
    *a2 = v3;
    return 2 * (v3 != 0);
  }
}

uint64_t rsa_pss_cb(int a1, uint64_t a2)
{
  if (a1 == 2) {
    X509_ALGOR_free(*(X509_ALGOR **)(*(void *)a2 + 32));
  }
  return 1;
}

uint64_t rsa_oaep_cb(int a1, uint64_t a2)
{
  if (a1 == 2) {
    X509_ALGOR_free(*(X509_ALGOR **)(*(void *)a2 + 24));
  }
  return 1;
}

X509_EXTENSION *__cdecl d2i_X509_EXTENSION(X509_EXTENSION **a, const unsigned __int8 **in, uint64_t len)
{
  return (X509_EXTENSION *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &X509_EXTENSION_it);
}

int i2d_X509_EXTENSION(X509_EXTENSION *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_EXTENSION_it);
}

X509_EXTENSION *X509_EXTENSION_new(void)
{
  return (X509_EXTENSION *)ASN1_item_new(&X509_EXTENSION_it);
}

void X509_EXTENSION_free(X509_EXTENSION *a)
{
}

X509_EXTENSIONS *__cdecl d2i_X509_EXTENSIONS(X509_EXTENSIONS **a, const unsigned __int8 **in, uint64_t len)
{
  return (X509_EXTENSIONS *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &X509_EXTENSIONS_it);
}

int i2d_X509_EXTENSIONS(X509_EXTENSIONS *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_EXTENSIONS_it);
}

X509_EXTENSION *__cdecl X509_EXTENSION_dup(X509_EXTENSION *ex)
{
  return (X509_EXTENSION *)ASN1_item_dup(&X509_EXTENSION_it, ex);
}

uint64_t dsa_pub_decode(EVP_PKEY *a1, uint64_t a2)
{
  pp = 0;
  in = 0;
  ppval = 0;
  *(void *)pptype = 0;
  algor = 0;
  uint64_t result = X509_PUBKEY_get0_param(0, &in, &pptype[1], &algor, a2);
  if (result)
  {
    X509_ALGOR_get0(0, pptype, &ppval, algor);
    if (pptype[0] == -1 || pptype[0] == 5)
    {
      int v5 = DSA_new();
      if (v5)
      {
LABEL_11:
        int v8 = d2i_ASN1_INTEGER(0, (const unsigned __int8 **)&in, pptype[1]);
        if (v8)
        {
          int v9 = v8;
          unint64_t v10 = ASN1_INTEGER_to_BN(v8, 0);
          v5->g = v10;
          if (v10)
          {
            if (pptype[0] != 16 || dsa_check_key((uint64_t)v5))
            {
              ASN1_INTEGER_free(v9);
              EVP_PKEY_assign(a1, 116, (char *)v5);
              return 1;
            }
          }
          else
          {
            ERR_put_error(10, 4095, 108, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", 117);
          }
          ASN1_INTEGER_free(v9);
          goto LABEL_22;
        }
        int v6 = 104;
        int v7 = 112;
        goto LABEL_21;
      }
      int v6 = 65;
      int v7 = 103;
    }
    else
    {
      if (pptype[0] != 16)
      {
        ERR_put_error(10, 4095, 105, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", 107);
        int v5 = 0;
LABEL_22:
        DSA_free(v5);
        return 0;
      }
      pp = (unsigned __int8 *)*((void *)ppval + 1);
      int v5 = d2i_DSAparams(0, (const unsigned __int8 **)&pp, *(int *)ppval);
      if (v5) {
        goto LABEL_11;
      }
      int v6 = 104;
      int v7 = 98;
    }
LABEL_21:
    ERR_put_error(10, 4095, v6, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", v7);
    goto LABEL_22;
  }
  return result;
}

uint64_t dsa_pub_encode(uint64_t a1, uint64_t a2)
{
  out = 0;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(_DWORD *)(a2 + 40) && *(void *)(v3 + 16) && *(void *)(v3 + 24) && *(void *)(v3 + 32))
  {
    unsigned int v4 = ASN1_STRING_new();
    int v5 = v4;
    if (!v4)
    {
      int v13 = 151;
      goto LABEL_17;
    }
    int v6 = i2d_DSAparams((const DSA *)v3, &v4->data);
    v5->length = v6;
    if (v6 <= 0)
    {
      int v13 = 156;
      goto LABEL_17;
    }
    int v7 = 16;
  }
  else
  {
    int v5 = 0;
    int v7 = -1;
  }
  int v8 = BN_to_ASN1_INTEGER(*(BIGNUM **)(v3 + 40), 0);
  if (!v8)
  {
    int v13 = 163;
LABEL_17:
    ERR_put_error(10, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", v13);
    goto LABEL_18;
  }
  int v9 = v8;
  int v10 = i2d_ASN1_INTEGER(v8, &out);
  ASN1_INTEGER_free(v9);
  if (v10 <= 0)
  {
    int v13 = 171;
    goto LABEL_17;
  }
  int v11 = OBJ_nid2obj(116);
  if (X509_PUBKEY_set0_param(a1, v11, v7, v5, out, v10)) {
    return 1;
  }
LABEL_18:
  free(out);
  ASN1_STRING_free(v5);
  return 0;
}

BOOL dsa_pub_cmp(uint64_t a1, uint64_t a2)
{
  return BN_cmp(*(const BIGNUM **)(*(void *)(a2 + 32) + 40), *(const BIGNUM **)(*(void *)(a1 + 32) + 40)) == 0;
}

BOOL dsa_pub_print(BIO *a1, uint64_t a2, int a3)
{
  return do_dsa_print(a1, *(const BIGNUM ***)(a2 + 32), a3, 1);
}

uint64_t dsa_priv_decode(EVP_PKEY *a1, uint64_t a2)
{
  pp = 0;
  in = 0;
  ppval = 0;
  *(void *)pptype = 0;
  algor = 0;
  if (!PKCS8_pkey_get0(0, &in, &pptype[1], &algor, a2)) {
    return 0;
  }
  X509_ALGOR_get0(0, pptype, &ppval, algor);
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  int v5 = 0;
  if (pptype[0] != 16) {
    goto LABEL_6;
  }
  int v6 = d2i_ASN1_INTEGER(0, (const unsigned __int8 **)&in, pptype[1]);
  uint64_t v3 = v6;
  if (!v6 || v6->type == 258)
  {
    unsigned int v4 = 0;
    int v5 = 0;
    goto LABEL_6;
  }
  pp = (unsigned __int8 *)*((void *)ppval + 1);
  int v5 = d2i_DSAparams(0, (const unsigned __int8 **)&pp, *(int *)ppval);
  if (!v5)
  {
    unsigned int v4 = 0;
    goto LABEL_6;
  }
  int v11 = ASN1_INTEGER_to_BN(v3, 0);
  v5->pub_key = v11;
  if (!v11)
  {
    int v14 = 109;
    int v15 = 221;
LABEL_23:
    ERR_put_error(10, 4095, v14, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", v15);
    goto LABEL_24;
  }
  if (!dsa_check_key((uint64_t)v5))
  {
LABEL_24:
    unsigned int v4 = 0;
    goto LABEL_8;
  }
  int v12 = BN_new();
  v5->g = v12;
  if (!v12)
  {
    int v14 = 65;
    int v15 = 231;
    goto LABEL_23;
  }
  int v13 = BN_CTX_new();
  unsigned int v4 = v13;
  if (!v13)
  {
    int v7 = 65;
    int v8 = 236;
    goto LABEL_7;
  }
  BN_CTX_start(v13);
  if (!BN_mod_exp_ct(v5->g, v5->q, v5->pub_key, *(const BIGNUM **)&v5->write_params, v4))
  {
    int v7 = 109;
    int v8 = 243;
    goto LABEL_7;
  }
  if (EVP_PKEY_assign(a1, 116, (char *)v5))
  {
    uint64_t v9 = 1;
    goto LABEL_9;
  }
LABEL_6:
  int v7 = 104;
  int v8 = 254;
LABEL_7:
  ERR_put_error(10, 4095, v7, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", v8);
LABEL_8:
  DSA_free(v5);
  uint64_t v9 = 0;
LABEL_9:
  BN_CTX_end(v4);
  BN_CTX_free(v4);
  ASN1_INTEGER_free(v3);
  return v9;
}

uint64_t dsa_priv_encode(uint64_t a1, uint64_t a2)
{
  out = 0;
  unsigned int v4 = ASN1_STRING_new();
  if (!v4)
  {
    int v11 = 65;
    int v12 = 275;
LABEL_9:
    ERR_put_error(10, 4095, v11, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", v12);
    int v13 = 0;
    goto LABEL_10;
  }
  int v5 = i2d_DSAparams(*(const DSA **)(a2 + 32), &v4->data);
  v4->length = v5;
  if (v5 <= 0)
  {
    int v11 = 65;
    int v12 = 281;
    goto LABEL_9;
  }
  v4->type = 16;
  int v6 = BN_to_ASN1_INTEGER(*(BIGNUM **)(*(void *)(a2 + 32) + 48), 0);
  if (!v6)
  {
    int v11 = 109;
    int v12 = 289;
    goto LABEL_9;
  }
  int v7 = v6;
  int v8 = i2d_ASN1_INTEGER(v6, &out);
  ASN1_INTEGER_free(v7);
  uint64_t v9 = OBJ_nid2obj(116);
  if (PKCS8_pkey_set0(a1, v9, 0, 16, v4, out, v8)) {
    return 1;
  }
  int v13 = out;
LABEL_10:
  free(v13);
  ASN1_STRING_free(v4);
  ASN1_INTEGER_free(0);
  return 0;
}

BOOL dsa_priv_print(BIO *a1, uint64_t a2, int a3)
{
  return do_dsa_print(a1, *(const BIGNUM ***)(a2 + 32), a3, 2);
}

uint64_t int_dsa_size(uint64_t a1)
{
  return DSA_size(*(const DSA **)(a1 + 32));
}

uint64_t dsa_bits(uint64_t a1)
{
  return BN_num_bits(*(const BIGNUM **)(*(void *)(a1 + 32) + 16));
}

uint64_t dsa_security_bits(uint64_t a1)
{
  return DSA_security_bits(*(void *)(a1 + 32));
}

uint64_t dsa_param_decode(EVP_PKEY *a1, const unsigned __int8 **a2, int a3)
{
  unsigned int v4 = d2i_DSAparams(0, a2, a3);
  if (v4)
  {
    int v5 = (char *)v4;
    if (dsa_check_key((uint64_t)v4))
    {
      EVP_PKEY_assign(a1, 116, v5);
      return 1;
    }
    DSA_free((DSA *)v5);
  }
  else
  {
    ERR_put_error(10, 4095, 10, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", 467);
  }
  return 0;
}

uint64_t dsa_param_encode(uint64_t a1, unsigned __int8 **a2)
{
  return i2d_DSAparams(*(const DSA **)(a1 + 32), a2);
}

BOOL dsa_missing_parameters(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  return !v1[2] || !v1[3] || v1[4] == 0;
}

BIGNUM *dsa_copy_parameters(uint64_t a1, uint64_t a2)
{
  uint64_t result = BN_dup(*(const BIGNUM **)(*(void *)(a2 + 32) + 16));
  if (result)
  {
    int v5 = result;
    BN_free(*(BIGNUM **)(*(void *)(a1 + 32) + 16));
    *(void *)(*(void *)(a1 + 32) + 16) = v5;
    uint64_t result = BN_dup(*(const BIGNUM **)(*(void *)(a2 + 32) + 24));
    if (result)
    {
      int v6 = result;
      BN_free(*(BIGNUM **)(*(void *)(a1 + 32) + 24));
      *(void *)(*(void *)(a1 + 32) + 24) = v6;
      uint64_t result = BN_dup(*(const BIGNUM **)(*(void *)(a2 + 32) + 32));
      if (result)
      {
        int v7 = result;
        BN_free(*(BIGNUM **)(*(void *)(a1 + 32) + 32));
        *(void *)(*(void *)(a1 + 32) + 32) = v7;
        return (BIGNUM *)1;
      }
    }
  }
  return result;
}

BOOL dsa_cmp_parameters(uint64_t a1, uint64_t a2)
{
  return !BN_cmp(*(const BIGNUM **)(*(void *)(a1 + 32) + 16), *(const BIGNUM **)(*(void *)(a2 + 32) + 16))
      && !BN_cmp(*(const BIGNUM **)(*(void *)(a1 + 32) + 24), *(const BIGNUM **)(*(void *)(a2 + 32) + 24))
      && BN_cmp(*(const BIGNUM **)(*(void *)(a1 + 32) + 32), *(const BIGNUM **)(*(void *)(a2 + 32) + 32)) == 0;
}

BOOL dsa_param_print(BIO *a1, uint64_t a2, int a3)
{
  return do_dsa_print(a1, *(const BIGNUM ***)(a2 + 32), a3, 0);
}

BOOL dsa_sig_print(BIO *bp, uint64_t a2, int *a3, int a4)
{
  if (!a3) {
    return BIO_puts(bp, "\n") > 0;
  }
  pp = (unsigned __int8 *)*((void *)a3 + 1);
  int v7 = d2i_DSA_SIG(0, (const unsigned __int8 **)&pp, *a3);
  if (v7)
  {
    int v8 = v7;
    r = v7->r;
    if (r)
    {
      int v10 = BN_num_bits(r);
      int v11 = v10 + 7;
      if (v10 < -7) {
        int v11 = v10 + 14;
      }
      int v12 = v11 >> 3;
      if ((v10 + 14) < 0xF) {
        int v12 = 0;
      }
      unint64_t v13 = v12;
    }
    else
    {
      unint64_t v13 = 0;
    }
    unsigned int s = v8->s;
    if (s)
    {
      int v16 = BN_num_bits(s);
      int v17 = v16 + 7;
      if (v16 < -7) {
        int v17 = v16 + 14;
      }
      int v18 = v17 >> 3;
      uint64_t v19 = (uint64_t)v17 >> 3;
      if (v13 <= v18) {
        unint64_t v13 = v19;
      }
    }
    int v20 = (unsigned __int8 *)malloc_type_malloc(v13 + 10, 0xDC646523uLL);
    if (v20)
    {
      if (BIO_write(bp, "\n", 1) == 1 && ASN1_bn_print(bp, "r:   ", v8->r, v20, a4))
      {
        BOOL v14 = ASN1_bn_print(bp, "s:   ", v8->s, v20, a4) != 0;
LABEL_23:
        free(v20);
        DSA_SIG_free(v8);
        return v14;
      }
    }
    else
    {
      ERR_put_error(10, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", 604);
    }
    BOOL v14 = 0;
    goto LABEL_23;
  }
  return X509_signature_dump(bp, (unsigned int *)a3, a4);
}

void int_dsa_free(uint64_t a1)
{
}

uint64_t dsa_pkey_ctrl(unsigned int *a1, int a2, uint64_t a3, void *a4)
{
  uint64_t result = 4294967294;
  switch(a2)
  {
    case 1:
      if (a3) {
        return 1;
      }
      int v13 = 0;
      int v11 = 0;
      int v12 = 0;
      PKCS7_SIGNER_INFO_get0_algs(a4, 0, &v12, &v11);
      goto LABEL_7;
    case 3:
      *(_DWORD *)a4 = 64;
      return 2;
    case 5:
      if (a3) {
        return 1;
      }
      int v13 = 0;
      int v11 = 0;
      int v12 = 0;
      CMS_SignerInfo_get0_algs(a4, 0, 0, &v12, &v11);
LABEL_7:
      if (!v12) {
        return 0xFFFFFFFFLL;
      }
      if (!*v12) {
        return 0xFFFFFFFFLL;
      }
      int v6 = OBJ_obj2nid(*v12);
      if (!v6) {
        return 0xFFFFFFFFLL;
      }
      int v7 = v6;
      int v8 = EVP_PKEY_id(a1);
      if (!OBJ_find_sigid_by_algs(&v13, v7, v8)) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v9 = v11;
      int v10 = OBJ_nid2obj(v13);
      X509_ALGOR_set0(v9, v10, -1, 0);
      return 1;
    case 8:
      *(_DWORD *)a4 = -1;
      return 1;
    default:
      return result;
  }
}

uint64_t old_dsa_priv_decode(EVP_PKEY *a1, const unsigned __int8 **a2, int a3)
{
  unsigned int v4 = d2i_DSAPrivateKey(0, a2, a3);
  int v5 = v4;
  if (!v4)
  {
    ERR_put_error(10, 4095, 10, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", 510);
    goto LABEL_12;
  }
  if (!dsa_check_key((uint64_t)v4))
  {
LABEL_12:
    int v7 = 0;
    goto LABEL_13;
  }
  int v6 = BN_CTX_new();
  int v7 = v6;
  if (!v6) {
    goto LABEL_13;
  }
  BN_CTX_start(v6);
  int v8 = BN_CTX_get(v7);
  if (!v8) {
    goto LABEL_13;
  }
  uint64_t v9 = v8;
  int v10 = *(const BIGNUM **)&v5->write_params;
  int v11 = BN_value_one();
  if (!BN_sub(v9, v10, v11) || !BN_mod_ct(v9, v9, v5->p, v7)) {
    goto LABEL_13;
  }
  if (!BN_is_zero((uint64_t)v9))
  {
    int v13 = 102;
    int v14 = 535;
    goto LABEL_15;
  }
  if (!BN_mod_exp_ct(v9, v5->q, v5->p, *(const BIGNUM **)&v5->write_params, v7))
  {
LABEL_13:
    BN_CTX_end(v7);
    BN_CTX_free(v7);
    DSA_free(v5);
    return 0;
  }
  int v12 = BN_value_one();
  if (BN_cmp(v9, v12))
  {
    int v13 = 112;
    int v14 = 548;
LABEL_15:
    ERR_put_error(10, 4095, v13, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", v14);
    goto LABEL_13;
  }
  if (BN_is_prime_ex(v5->p, 0, v7, 0) <= 0)
  {
    int v13 = 102;
    int v14 = 557;
    goto LABEL_15;
  }
  BN_CTX_end(v7);
  BN_CTX_free(v7);
  EVP_PKEY_assign(a1, 116, (char *)v5);
  return 1;
}

uint64_t old_dsa_priv_encode(uint64_t a1, unsigned __int8 **a2)
{
  return i2d_DSAPrivateKey(*(const DSA **)(a1 + 32), a2);
}

BOOL do_dsa_print(BIO *a1, const BIGNUM **a2, int a3, int a4)
{
  if (a4 == 2)
  {
    int v7 = a2[6];
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    if (a4 < 1) {
      goto LABEL_5;
    }
  }
  uint64_t v9 = a2[5];
  int v8 = v7;
LABEL_5:
  int v10 = "DSA-Parameters";
  if (a4 == 1) {
    int v10 = "Public-Key";
  }
  if (a4 == 2) {
    int v11 = "Private-Key";
  }
  else {
    int v11 = v10;
  }
  int v12 = a2[2];
  if (v12)
  {
    int v13 = BN_num_bits(v12);
    int v14 = v13 + 7;
    if (v13 < -7) {
      int v14 = v13 + 14;
    }
    int v15 = v14 >> 3;
    if ((v13 + 14) < 0xF) {
      int v15 = 0;
    }
    unint64_t v16 = v15;
  }
  else
  {
    unint64_t v16 = 0;
  }
  int v17 = a2[3];
  if (v17)
  {
    int v18 = BN_num_bits(v17);
    int v19 = v18 + 7;
    if (v18 < -7) {
      int v19 = v18 + 14;
    }
    int v20 = v19 >> 3;
    uint64_t v21 = (uint64_t)v19 >> 3;
    if (v16 <= v20) {
      unint64_t v16 = v21;
    }
  }
  int v22 = a2[4];
  if (v22)
  {
    int v23 = BN_num_bits(v22);
    int v24 = v23 + 7;
    if (v23 < -7) {
      int v24 = v23 + 14;
    }
    int v25 = v24 >> 3;
    uint64_t v26 = (uint64_t)v24 >> 3;
    if (v16 <= v25) {
      unint64_t v16 = v26;
    }
  }
  if (v8)
  {
    int v27 = BN_num_bits(v8);
    int v28 = v27 + 7;
    if (v27 < -7) {
      int v28 = v27 + 14;
    }
    int v29 = v28 >> 3;
    uint64_t v30 = (uint64_t)v28 >> 3;
    if (v16 <= v29) {
      unint64_t v16 = v30;
    }
  }
  if (v9)
  {
    int v31 = BN_num_bits(v9);
    int v32 = v31 + 7;
    if (v31 < -7) {
      int v32 = v31 + 14;
    }
    int v33 = v32 >> 3;
    uint64_t v34 = (uint64_t)v32 >> 3;
    if (v16 <= v33) {
      unint64_t v16 = v34;
    }
  }
  int v35 = (unsigned __int8 *)malloc_type_malloc(v16 + 10, 0xBF0DC598uLL);
  if (!v35)
  {
    ERR_put_error(10, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_ameth.c", 433);
LABEL_47:
    BOOL v37 = 0;
    goto LABEL_48;
  }
  if (v8)
  {
    if (!BIO_indent(a1, a3, 128)) {
      goto LABEL_47;
    }
    int v36 = BN_num_bits(a2[2]);
    if (BIO_printf(a1, "%s: (%d bit)\n", v11, v36) < 1) {
      goto LABEL_47;
    }
  }
  if (!ASN1_bn_print(a1, "priv:", v8, v35, a3)
    || !ASN1_bn_print(a1, "pub: ", v9, v35, a3)
    || !ASN1_bn_print(a1, "P:   ", a2[2], v35, a3)
    || !ASN1_bn_print(a1, "Q:   ", a2[3], v35, a3))
  {
    goto LABEL_47;
  }
  BOOL v37 = ASN1_bn_print(a1, "G:   ", a2[4], v35, a3) != 0;
LABEL_48:
  free(v35);
  return v37;
}

BIO_METHOD *BIO_s_mem(void)
{
  return (BIO_METHOD *)&mem_method;
}

BIO *__cdecl BIO_new_mem_buf(void *buf, int len)
{
  if (!buf)
  {
    int v6 = 115;
    int v7 = 128;
LABEL_9:
    ERR_put_error(32, 4095, v6, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/bio/bss_mem.c", v7);
    return 0;
  }
  unsigned int v2 = len;
  if (len != -1)
  {
    if ((len & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  unsigned int v2 = strlen((const char *)buf);
  if ((v2 & 0x80000000) != 0)
  {
LABEL_8:
    int v6 = 125;
    int v7 = 134;
    goto LABEL_9;
  }
LABEL_4:
  uint64_t result = BIO_new(&mem_method);
  if (result)
  {
    method = result->next_bio->method;
    *(void *)&method->type = v2;
    method->name = (const char *)buf;
    method->bwrite = (int (__cdecl *)(BIO *, const char *, int))v2;
    result->num |= 0x200u;
    LODWORD(result->ptr) = 0;
  }
  return result;
}

uint64_t mem_write(uint64_t a1, const void *a2, uint64_t a3)
{
  int v6 = *(BUF_MEM ***)(a1 + 56);
  BIO_clear_flags((BIO *)a1, 15);
  uint64_t v7 = 0;
  if (a2 && (int)a3 >= 1)
  {
    if ((*(unsigned char *)(a1 + 41) & 2) != 0)
    {
      ERR_put_error(32, 4095, 126, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/bio/bss_mem.c", 231);
      return 0xFFFFFFFFLL;
    }
    int v8 = *v6;
    unint64_t v9 = (unint64_t)v6[1];
    if (v9 <= 0x1000)
    {
      unint64_t v17 = *(void *)&v8->length;
    }
    else
    {
      int v10 = &v8->data[v9];
      BOOL v11 = *(void *)&v8->length >= v9;
      size_t v12 = *(void *)&v8->length - v9;
      if (v11) {
        size_t v13 = v12;
      }
      else {
        size_t v13 = 0;
      }
      memmove(v8->data, v10, v13);
      int v8 = *v6;
      int v14 = v6[1];
      unint64_t v15 = *(void *)&(*v6)->length;
      BOOL v11 = v15 >= (unint64_t)v14;
      unint64_t v16 = v15 - (void)v14;
      if (v11) {
        unint64_t v17 = v16;
      }
      else {
        unint64_t v17 = 0;
      }
      *(void *)&v8->length = v17;
      v6[1] = 0;
    }
    unint64_t v19 = v17 + a3;
    uint64_t v7 = 0xFFFFFFFFLL;
    if (!__CFADD__(v17, a3) && !(v19 >> 31))
    {
      if (v19 == BUF_MEM_grow_clean(v8, v17 + a3))
      {
        memcpy(&(*v6)->data[v17], a2, a3);
        return a3;
      }
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

unint64_t mem_read(uint64_t a1, void *a2, unint64_t a3)
{
  int v6 = *(unint64_t ***)(a1 + 56);
  BIO_clear_flags((BIO *)a1, 15);
  unint64_t result = 0;
  if (a2 && (int)a3 >= 1)
  {
    unint64_t v8 = (unint64_t)v6[1];
    unint64_t v9 = **v6;
    BOOL v10 = v9 >= v8;
    unint64_t v11 = v9 - v8;
    if (!v10) {
      unint64_t v11 = 0;
    }
    if (v11 >= a3 || (a3 = v11, v11))
    {
      memcpy(a2, (const void *)((*v6)[1] + v8), (int)a3);
      v6[1] = (unint64_t *)((char *)v6[1] + (int)a3);
      return a3;
    }
    else if (*(_DWORD *)(a1 + 48))
    {
      BIO_set_flags((BIO *)a1, 9);
      return *(unsigned int *)(a1 + 48);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mem_puts(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  return mem_write(a1, __s, v4);
}

unint64_t mem_gets(BIO *a1, unsigned char *a2, int a3)
{
  next_bio = a1->next_bio;
  BIO_clear_flags(a1, 15);
  callback = next_bio->callback;
  unint64_t v8 = *(void *)&next_bio->method->type;
  BOOL v9 = v8 >= (unint64_t)callback;
  unsigned int v10 = v8 - callback;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if ((int)v10 >= a3) {
    unint64_t v11 = (a3 - 1);
  }
  else {
    unint64_t v11 = v10;
  }
  if ((int)v11 < 1)
  {
    unint64_t result = 0;
LABEL_15:
    *a2 = 0;
    return result;
  }
  uint64_t v12 = 0;
  size_t v13 = &next_bio->method->name[(unint64_t)callback];
  while (v13[v12] != 10)
  {
    if (v11 == ++v12) {
      goto LABEL_13;
    }
  }
  unint64_t v11 = (v12 + 1);
LABEL_13:
  unint64_t result = mem_read((uint64_t)a1, a2, v11);
  if ((int)result >= 1)
  {
    a2 += result;
    goto LABEL_15;
  }
  return result;
}

uint64_t mem_ctrl(uint64_t a1, int a2, int a3, unint64_t *a4)
{
  uint64_t result = 0;
  unint64_t v8 = *(unint64_t ***)(a1 + 56);
  if (a2 > 113)
  {
    if (a2 == 114)
    {
      BUF_MEM_free((BUF_MEM *)*v8);
      *(_DWORD *)(a1 + 36) = a3;
      uint64_t result = 1;
      *unint64_t v8 = a4;
      v8[1] = 0;
    }
    else
    {
      if (a2 == 115)
      {
        if (a4) {
          *a4 = (unint64_t)*v8;
        }
      }
      else
      {
        if (a2 != 130) {
          return result;
        }
        *(_DWORD *)(a1 + 48) = a3;
      }
      return 1;
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        BOOL v9 = (void *)(*v8)[1];
        if (v9)
        {
          if ((*(unsigned char *)(a1 + 41) & 2) == 0)
          {
            bzero(v9, (*v8)[2]);
            **unint64_t v8 = 0;
          }
          v8[1] = 0;
        }
        return 1;
      case 2:
        return **v8 <= (unint64_t)v8[1];
      case 3:
        if (!a4) {
          goto LABEL_14;
        }
        unsigned int v10 = v8[1];
        *a4 = (unint64_t)v10 + (*v8)[1];
        goto LABEL_15;
      case 8:
        return *(int *)(a1 + 36);
      case 9:
        *(_DWORD *)(a1 + 36) = a3;
        return 1;
      case 10:
LABEL_14:
        unsigned int v10 = v8[1];
LABEL_15:
        unint64_t v11 = **v8;
        BOOL v12 = v11 >= (unint64_t)v10;
        uint64_t v13 = v11 - (void)v10;
        if (v12) {
          uint64_t result = v13;
        }
        else {
          uint64_t result = 0;
        }
        break;
      case 11:
      case 12:
        return 1;
      default:
        return result;
    }
  }
  return result;
}

uint64_t mem_new(uint64_t a1)
{
  uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
  if (result)
  {
    uint64_t v3 = (void *)result;
    size_t v4 = BUF_MEM_new();
    *uint64_t v3 = v4;
    if (v4)
    {
      *(void *)(a1 + 32) = 0x100000001;
      *(_DWORD *)(a1 + 48) = -1;
      *(void *)(a1 + 56) = v3;
      return 1;
    }
    else
    {
      free(v3);
      return 0;
    }
  }
  return result;
}

uint64_t mem_free(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 32))
    {
      unsigned int v2 = *(BUF_MEM ***)(result + 56);
      if (v2)
      {
        if (*(_DWORD *)(result + 36))
        {
          uint64_t v3 = *v2;
          if ((*(unsigned char *)(v1 + 41) & 2) != 0) {
            v3->data = 0;
          }
          BUF_MEM_free(v3);
        }
        free(v2);
        *(void *)(v1 + 56) = 0;
      }
    }
    return 1;
  }
  return result;
}

void ERR_load_EVP_strings(void)
{
  if (!ERR_func_error_string(EVP_str_functs))
  {
    ERR_load_strings(0, (ERR_STRING_DATA *)&EVP_str_functs);
    ERR_load_strings(0, (ERR_STRING_DATA *)&EVP_str_reasons);
  }
}

void *EVP_md5_sha1()
{
  return &md5_sha1_md;
}

uint64_t md5_sha1_init(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t result = MD5_Init((_MD5_CTX *)v1);
  if (result) {
    return SHA1_Init((SHA_CTX *)(v1 + 92)) != 0;
  }
  return result;
}

uint64_t md5_sha1_update(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = MD5_Update((_MD5_CTX *)v5, a2, a3);
  if (result) {
    return SHA1_Update((SHA_CTX *)(v5 + 92), a2, a3) != 0;
  }
  return result;
}

uint64_t md5_sha1_final(uint64_t a1, unsigned __int8 *md)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t result = MD5_Final(md, (_MD5_CTX *)v3);
  if (result) {
    return SHA1_Final(md + 16, (SHA_CTX *)(v3 + 92)) != 0;
  }
  return result;
}

PKCS8_PRIV_KEY_INFO *__cdecl PKCS8_decrypt(X509_SIG *p8, const char *pass, int passlen)
{
  return (PKCS8_PRIV_KEY_INFO *)PKCS12_item_decrypt_d2i(p8->algor, &PKCS8_PRIV_KEY_INFO_it, pass, passlen, p8->digest, 1);
}

uint64_t CMS_RecipientInfo_kari_get0_alg(uint64_t a1, void *a2, void *a3)
{
  if (*(_DWORD *)a1 == 1)
  {
    if (a2) {
      *a2 = *(void *)(*(void *)(a1 + 8) + 24);
    }
    if (a3) {
      *a3 = *(void *)(*(void *)(a1 + 8) + 16);
    }
    return 1;
  }
  else
  {
    ERR_put_error(46, 4095, 181, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_kari.c", 74);
    return 0;
  }
}

uint64_t CMS_RecipientInfo_kari_get0_reks(uint64_t a1)
{
  if (*(_DWORD *)a1 == 1) {
    return *(void *)(*(void *)(a1 + 8) + 32);
  }
  ERR_put_error(46, 4095, 181, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_kari.c", 91);
  return 0;
}

uint64_t CMS_RecipientInfo_kari_get0_orig_id(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  if (*(_DWORD *)a1 != 1)
  {
    ERR_put_error(46, 4095, 181, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_kari.c", 105);
    return 0;
  }
  int v6 = *(int **)(*(void *)(a1 + 8) + 8);
  if (a5) {
    *a5 = 0;
  }
  if (a6) {
    *a6 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  int v7 = *v6;
  if (*v6 == 2)
  {
    if (a2) {
      *a2 = **((void **)v6 + 1);
    }
    if (a3) {
      *a3 = *(void *)(*((void *)v6 + 1) + 8);
    }
    return 1;
  }
  if (v7 == 1)
  {
    if (a4) {
      *a4 = *((void *)v6 + 1);
    }
    return 1;
  }
  if (v7) {
    return 0;
  }
  if (a5) {
    *a5 = **((void **)v6 + 1);
  }
  if (a6) {
    *a6 = *(void *)(*((void *)v6 + 1) + 8);
  }
  return 1;
}

uint64_t CMS_RecipientInfo_kari_orig_id_cmp(uint64_t a1, X509 *a2)
{
  if (*(_DWORD *)a1 == 1)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
    if (*(_DWORD *)v2 == 1)
    {
      uint64_t v5 = *(ASN1_OCTET_STRING **)(v2 + 8);
      return cms_keyid_cert_cmp(v5, a2);
    }
    else if (*(_DWORD *)v2)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v3 = *(void *)(v2 + 8);
      return cms_ias_cert_cmp(v3, a2);
    }
  }
  else
  {
    ERR_put_error(46, 4095, 181, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_kari.c", 144);
    return 4294967294;
  }
}

uint64_t CMS_RecipientEncryptedKey_get0_id(int **a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  int v6 = *a1;
  int v7 = **a1;
  if (v7 == 1)
  {
    if (a2) {
      *a2 = **((void **)v6 + 1);
    }
    if (a3) {
      *a3 = *(void *)(*((void *)v6 + 1) + 8);
    }
    if (a4) {
      *a4 = *(void *)(*((void *)v6 + 1) + 16);
    }
    if (a5) {
      *a5 = 0;
    }
    a4 = a6;
    if (!a6) {
      return 1;
    }
LABEL_22:
    *a4 = 0;
    return 1;
  }
  if (!v7)
  {
    if (a5) {
      *a5 = **((void **)v6 + 1);
    }
    if (a6) {
      *a6 = *(void *)(*((void *)v6 + 1) + 8);
    }
    if (a2) {
      *a2 = 0;
    }
    if (a3) {
      *a3 = 0;
    }
    if (!a4) {
      return 1;
    }
    goto LABEL_22;
  }
  return 0;
}

uint64_t CMS_RecipientEncryptedKey_cert_cmp(ASN1_OCTET_STRING ****a1, X509 *a2)
{
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)*a1;
  if (v3 == 1) {
    return cms_keyid_cert_cmp(*v2[1], a2);
  }
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  return cms_ias_cert_cmp((uint64_t)v2[1], a2);
}

uint64_t CMS_RecipientInfo_kari_set0_pkey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  EVP_PKEY_CTX_free(*(EVP_PKEY ***)(v3 + 40));
  *(void *)(v3 + 40) = 0;
  if (!a2) {
    return 1;
  }
  size_t v4 = (uint64_t *)EVP_PKEY_CTX_new(a2, 0);
  uint64_t v5 = (EVP_PKEY **)v4;
  if (v4 && EVP_PKEY_derive_init(v4))
  {
    *(void *)(v3 + 40) = v5;
    return 1;
  }
  EVP_PKEY_CTX_free(v5);
  return 0;
}

uint64_t CMS_RecipientInfo_kari_get0_ctx(uint64_t a1)
{
  if (*(_DWORD *)a1 == 1) {
    return *(void *)(*(void *)(a1 + 8) + 48);
  }
  else {
    return 0;
  }
}

uint64_t CMS_RecipientInfo_kari_decrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v14 = 0;
  uint64_t v5 = *(void *)(a3 + 8);
  int v6 = *(_DWORD *)v5;
  int v7 = *(const unsigned __int8 **)(v5 + 8);
  if (cms_env_asn1_ctrl(a2))
  {
    uint64_t v13 = 0;
    if (cms_kek_cipher((unsigned __int8 **)&v14, &v13, v7, v6, *(void *)(a2 + 8), 0))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 24);
      freezero(*(void **)(v8 + 32), *(void *)(v8 + 40));
      BOOL v9 = 0;
      uint64_t v10 = v13;
      *(void *)(v8 + 32) = v14;
      *(void *)(v8 + 40) = v10;
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      BOOL v9 = v14;
    }
  }
  else
  {
    BOOL v9 = 0;
    uint64_t v11 = 0;
  }
  free(v9);
  return v11;
}

uint64_t cms_kek_cipher(unsigned __int8 **a1, void *a2, const unsigned __int8 *a3, int a4, uint64_t a5, int a6)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v12 = EVP_CIPHER_CTX_key_length(*(const EVP_CIPHER_CTX **)(a5 + 48));
  size_t v16 = v12;
  if (v12 <= 0x40)
  {
    int outl = 0;
    if ((int)EVP_PKEY_derive(*(uint64_t **)(a5 + 40), (uint64_t)key, &v16) >= 1)
    {
      if (EVP_CipherInit_ex(*(EVP_CIPHER_CTX **)(a5 + 48), 0, 0, key, 0, a6))
      {
        if (EVP_CipherUpdate(*(EVP_CIPHER_CTX **)(a5 + 48), 0, &outl, a3, a4))
        {
          uint64_t v13 = (unsigned __int8 *)malloc_type_malloc(outl, 0xDD7F3802uLL);
          if (v13)
          {
            if (EVP_CipherUpdate(*(EVP_CIPHER_CTX **)(a5 + 48), v13, &outl, a3, a4))
            {
              *a1 = v13;
              *a2 = outl;
              explicit_bzero(key, v16);
            }
          }
        }
      }
    }
    explicit_bzero(key, v16);
  }
  return 0;
}

uint64_t cms_RecipientInfo_kari_init(uint64_t a1, X509 *a2, uint64_t a3, int a4)
{
  uint64_t result = (uint64_t)ASN1_item_new(&CMS_KeyAgreeRecipientInfo_it);
  *(void *)(a1 + 8) = result;
  if (result)
  {
    uint64_t v9 = result;
    *(_DWORD *)a1 = 1;
    *(void *)uint64_t result = 3;
    uint64_t result = (uint64_t)ASN1_item_new(&CMS_RecipientEncryptedKey_it);
    if (result)
    {
      uint64_t v10 = result;
      if (!sk_push(*(STACK **)(v9 + 32), (char *)result))
      {
        ASN1_item_free((ASN1_VALUE *)v10, &CMS_RecipientEncryptedKey_it);
        return 0;
      }
      uint64_t v11 = *(void *)v10;
      if ((a4 & 0x10000) == 0)
      {
        *(_DWORD *)uint64_t v11 = 0;
        uint64_t result = cms_set1_ias((ASN1_VALUE **)(v11 + 8), a2);
        if (!result) {
          return result;
        }
        goto LABEL_10;
      }
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(*(void *)v10 + 8) = ASN1_item_new(&CMS_RecipientKeyIdentifier_it);
      uint64_t result = *(void *)(*(void *)v10 + 8);
      if (result)
      {
        uint64_t result = cms_set1_keyid((ASN1_OCTET_STRING **)result, a2);
        if (result)
        {
LABEL_10:
          pkey = 0;
          int v12 = (uint64_t *)EVP_PKEY_CTX_new(a3, 0);
          uint64_t v13 = (EVP_PKEY **)v12;
          if (v12)
          {
            if ((int)EVP_PKEY_keygen_init(v12) >= 1 && (int)EVP_PKEY_keygen(v13, &pkey) >= 1)
            {
              EVP_PKEY_CTX_free(v13);
              int v14 = (uint64_t *)EVP_PKEY_CTX_new((uint64_t)pkey, 0);
              uint64_t v13 = (EVP_PKEY **)v14;
              if (v14)
              {
                if ((int)EVP_PKEY_derive_init(v14) > 0)
                {
                  *(void *)(v9 + 40) = v13;
                  EVP_PKEY_free(pkey);
                  EVP_PKEY_up_ref(a3);
                  *(void *)(v10 + 16) = a3;
                  return 1;
                }
              }
            }
          }
          EVP_PKEY_CTX_free(v13);
          EVP_PKEY_free(pkey);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t cms_RecipientInfo_kari_encrypt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != 1)
  {
    ERR_put_error(46, 4095, 181, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_kari.c", 446);
    return 0;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  size_t v4 = (const STACK *)v3[4];
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 24);
  int v6 = (EVP_CIPHER_CTX *)v3[6];
  int v7 = EVP_CIPHER_key_length(*(const EVP_CIPHER **)(v5 + 24));
  if (EVP_CIPHER_CTX_cipher(v6))
  {
    uint64_t result = (EVP_CIPHER_CTX_flags(v6) & 0xF0007) == 65538;
    if (!result) {
      return result;
    }
  }
  else
  {
    if (v7 > 16)
    {
      if (v7 > 0x18) {
        uint64_t v9 = (const EVP_CIPHER *)EVP_aes_256_wrap();
      }
      else {
        uint64_t v9 = (const EVP_CIPHER *)EVP_aes_192_wrap();
      }
    }
    else
    {
      uint64_t v9 = (const EVP_CIPHER *)EVP_aes_128_wrap();
    }
    uint64_t result = EVP_EncryptInit_ex(v6, v9, 0, 0, 0);
    if (!result) {
      return result;
    }
  }
  uint64_t v10 = v3[1];
  if (*(_DWORD *)v10 != -1
    || (*(_DWORD *)uint64_t v10 = 2,
        uint64_t result = (uint64_t)ASN1_item_new(&CMS_OriginatorPublicKey_it),
        (*(void *)(v10 + 8) = result) != 0))
  {
    uint64_t result = cms_env_asn1_ctrl(a2);
    if (result)
    {
      if (sk_num(v4) < 1) {
        return 1;
      }
      int v11 = 0;
      while (1)
      {
        *(void *)int len = 0;
        data = 0;
        int v12 = sk_value(v4, v11);
        if ((int)EVP_PKEY_derive_set_peer(v3[5], *((const EVP_PKEY **)v12 + 2)) < 1
          || !cms_kek_cipher((unsigned __int8 **)&data, len, *(const unsigned __int8 **)(v5 + 32), *(void *)(v5 + 40), (uint64_t)v3, 1))
        {
          break;
        }
        ASN1_STRING_set0(*((ASN1_STRING **)v12 + 1), data, len[0]);
        if (++v11 >= sk_num(v4)) {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

unint64_t *bn_sqr_comba4(unint64_t *result, void *a2)
{
  uint64_t v2 = HIDWORD(*a2);
  unsigned int v3 = *a2;
  unint64_t v4 = v3 * (unint64_t)v3;
  unint64_t v5 = v3 * (unint64_t)v2;
  unint64_t v6 = (v5 << 32) + v4;
  unint64_t v7 = (v4 | (v5 << 32)) & ~v6 | v4 & (v5 << 32);
  unint64_t v8 = v6 | (v5 << 32);
  unint64_t v9 = v6 & (v5 << 32);
  unint64_t v10 = v6 + (v5 << 32);
  unint64_t v11 = ((v5 >> 31) & 0x1FFFFFFFELL)
      + v2 * (unint64_t)v2
      + (v7 >> 63)
      + ((v8 & ~v10 | v9) >> 63);
  BIO *result = v10;
  unint64_t v12 = a2[1];
  unint64_t v13 = HIDWORD(v12);
  LODWORD(v8) = v12;
  uint64_t v14 = HIDWORD(*a2);
  unsigned int v15 = *a2;
  unint64_t v16 = v15 * (unint64_t)v12;
  unint64_t v17 = v15 * (unint64_t)v13;
  unint64_t v18 = HIDWORD(v17) + v14 * (unint64_t)v13;
  unint64_t v19 = v16 | (v17 << 32);
  unint64_t v20 = v16 & (v17 << 32);
  unint64_t v21 = (v17 << 32) + v15 * (unint64_t)v8;
  unint64_t v22 = v19 & ~v21 | v20;
  unint64_t v23 = v14 * (unint64_t)v8;
  unint64_t v24 = v21 | (v23 << 32);
  unint64_t v25 = v21 & (v23 << 32);
  unint64_t v26 = v21 + (v23 << 32);
  unint64_t v27 = v18 + HIDWORD(v23) + (v22 >> 63) + ((v24 & ~v26 | v25) >> 63);
  unint64_t v28 = v11 | v26;
  unint64_t v29 = v11 & v26;
  unint64_t v30 = v11 + v26;
  unint64_t v31 = v27 + ((v28 & ~v30 | v29) >> 63);
  unint64_t v32 = v30 | v26;
  unint64_t v33 = v30 & v26;
  unint64_t v34 = v30 + v26;
  unint64_t v35 = v27 + ((v32 & ~v34 | v33) >> 63);
  unint64_t v36 = v35 | v31;
  unint64_t v37 = v35 & v31;
  unint64_t v38 = v35 + v31;
  unint64_t v39 = v36 & ~v38 | v37;
  result[1] = v34;
  unint64_t v40 = a2[1];
  unint64_t v41 = HIDWORD(v40);
  unint64_t v42 = v40 * (unint64_t)HIDWORD(v40);
  unint64_t v43 = (v42 << 32) + v40 * (unint64_t)v40;
  unint64_t v44 = ((v40 * (unint64_t)v40) | (v42 << 32)) & ~v43 | (v40
                                                                                          * (unint64_t)v40) & (v42 << 32);
  unint64_t v45 = v43 | (v42 << 32);
  unint64_t v46 = v43 & (v42 << 32);
  unint64_t v47 = v43 + (v42 << 32);
  unint64_t v48 = ((v42 >> 31) & 0x1FFFFFFFELL)
      + v41 * (unint64_t)v41
      + (v44 >> 63)
      + ((v45 & ~v47 | v46) >> 63);
  unint64_t v49 = v38 | v47;
  unint64_t v50 = v38 & v47;
  unint64_t v51 = v38 + v47;
  unint64_t v52 = v48 + ((v49 & ~v51 | v50) >> 63);
  unint64_t v53 = v52 + (v39 >> 63);
  unint64_t v54 = v52 & ~v53;
  unint64_t v55 = a2[2];
  unint64_t v56 = HIDWORD(v55);
  LODWORD(v50) = v55;
  uint64_t v57 = HIDWORD(*a2);
  LODWORD(v46) = *a2;
  unint64_t v58 = v46 * (unint64_t)v55;
  unint64_t v59 = v46 * (unint64_t)HIDWORD(v55);
  unint64_t v60 = HIDWORD(v59) + v57 * (unint64_t)v56;
  unint64_t v61 = v58 | (v59 << 32);
  unint64_t v62 = v58 & (v59 << 32);
  unint64_t v63 = (v59 << 32) + v46 * (unint64_t)v50;
  unint64_t v64 = v61 & ~v63 | v62;
  unint64_t v65 = v57 * (unint64_t)v50;
  unint64_t v66 = v63 | (v65 << 32);
  unint64_t v67 = v63 & (v65 << 32);
  unint64_t v68 = v63 + (v65 << 32);
  unint64_t v69 = v60 + HIDWORD(v65) + (v64 >> 63) + ((v66 & ~v68 | v67) >> 63);
  unint64_t v70 = v51 | v68;
  unint64_t v71 = v51 & v68;
  unint64_t v72 = v51 + v68;
  unint64_t v73 = v69 + ((v70 & ~v72 | v71) >> 63);
  unint64_t v74 = v73 | v53;
  unint64_t v75 = v73 & v53;
  unint64_t v76 = v73 + v53;
  unint64_t v77 = ((v74 & ~v76 | v75) >> 63) + (v54 >> 63);
  unint64_t v78 = v72 | v68;
  unint64_t v79 = v72 & v68;
  unint64_t v80 = v72 + v68;
  unint64_t v81 = v69 + ((v78 & ~v80 | v79) >> 63);
  unint64_t v82 = v81 | v76;
  unint64_t v83 = v81 & v76;
  unint64_t v84 = v81 + v76;
  unint64_t v85 = v77 + ((v82 & ~v84 | v83) >> 63);
  result[2] = v80;
  unint64_t v87 = a2[2];
  unint64_t v86 = a2[3];
  unint64_t v88 = HIDWORD(v86);
  LODWORD(v77) = v86;
  unint64_t v89 = a2[1];
  uint64_t v90 = HIDWORD(*a2);
  unsigned int v91 = *a2;
  unint64_t v92 = v91 * (unint64_t)v86;
  unint64_t v93 = v91 * (unint64_t)v88;
  unint64_t v94 = HIDWORD(v93) + v90 * (unint64_t)v88;
  unint64_t v95 = v92 | (v93 << 32);
  unint64_t v96 = v92 & (v93 << 32);
  unint64_t v97 = (v93 << 32) + v91 * (unint64_t)v77;
  unint64_t v98 = v95 & ~v97 | v96;
  unint64_t v99 = v90 * (unint64_t)v77;
  unint64_t v100 = v97 | (v99 << 32);
  unint64_t v101 = v97 & (v99 << 32);
  unint64_t v102 = v97 + (v99 << 32);
  unint64_t v103 = v94 + HIDWORD(v99) + (v98 >> 63) + ((v100 & ~v102 | v101) >> 63);
  unint64_t v104 = v84 | v102;
  unint64_t v105 = v84 & v102;
  unint64_t v106 = v84 + v102;
  unint64_t v107 = v103 + ((v104 & ~v106 | v105) >> 63);
  unint64_t v108 = v85 + v107;
  unint64_t v109 = v107 & ~v108;
  unint64_t v110 = v106 | v102;
  unint64_t v111 = v106 & v102;
  unint64_t v112 = v106 + v102;
  unint64_t v113 = v103 + ((v110 & ~v112 | v111) >> 63);
  unint64_t v114 = v113 | v108;
  unint64_t v115 = v113 & v108;
  unint64_t v116 = v113 + v108;
  unint64_t v117 = ((v114 & ~v116 | v115) >> 63) + (v109 >> 63);
  unint64_t v118 = HIDWORD(v87);
  LODWORD(v114) = v87;
  unint64_t v119 = HIDWORD(v89);
  LODWORD(v11ripemd160_block_data_order(c, b, 1) = v89;
  unint64_t v120 = v89 * (unint64_t)v87;
  unint64_t v121 = v89 * (unint64_t)v118;
  unint64_t v122 = HIDWORD(v121) + v119 * (unint64_t)v118;
  unint64_t v123 = v120 | (v121 << 32);
  unint64_t v124 = v120 & (v121 << 32);
  unint64_t v125 = (v121 << 32) + v111 * (unint64_t)v114;
  unint64_t v126 = v123 & ~v125 | v124;
  unint64_t v127 = v119 * (unint64_t)v114;
  unint64_t v128 = v125 | (v127 << 32);
  unint64_t v129 = v125 & (v127 << 32);
  unint64_t v130 = v125 + (v127 << 32);
  unint64_t v131 = v122 + HIDWORD(v127) + (v126 >> 63) + ((v128 & ~v130 | v129) >> 63);
  unint64_t v132 = v112 | v130;
  unint64_t v133 = v112 & v130;
  unint64_t v134 = v112 + v130;
  unint64_t v135 = v131 + ((v132 & ~v134 | v133) >> 63);
  unint64_t v136 = v135 | v116;
  unint64_t v137 = v135 & v116;
  unint64_t v138 = v135 + v116;
  unint64_t v139 = v117 + ((v136 & ~v138 | v137) >> 63);
  unint64_t v140 = v134 | v130;
  unint64_t v141 = v134 & v130;
  unint64_t v142 = v134 + v130;
  unint64_t v143 = v131 + ((v140 & ~v142 | v141) >> 63);
  unint64_t v144 = v143 | v138;
  unint64_t v145 = v143 & v138;
  unint64_t v146 = v143 + v138;
  unint64_t v147 = v139 + ((v144 & ~v146 | v145) >> 63);
  result[3] = v142;
  unint64_t v149 = a2[1];
  unint64_t v148 = a2[2];
  unint64_t v150 = HIDWORD(v148);
  unint64_t v151 = v148 * (unint64_t)HIDWORD(v148);
  unint64_t v152 = (v151 << 32) + v148 * (unint64_t)v148;
  unint64_t v153 = ((v148 * (unint64_t)v148) | (v151 << 32)) & ~v152 | (v148
                                                                                               * (unint64_t)v148) & (v151 << 32);
  unint64_t v154 = v152 | (v151 << 32);
  unint64_t v155 = v152 & (v151 << 32);
  unint64_t v156 = v152 + (v151 << 32);
  unint64_t v157 = ((v151 >> 31) & 0x1FFFFFFFELL)
       + v150 * (unint64_t)v150
       + (v153 >> 63)
       + ((v154 & ~v156 | v155) >> 63);
  unint64_t v158 = v146 | v156;
  unint64_t v159 = v146 & v156;
  unint64_t v160 = v146 + v156;
  unint64_t v161 = v157 + ((v158 & ~v160 | v159) >> 63);
  unint64_t v162 = v161 | v147;
  unint64_t v163 = v161 + v147;
  unint64_t v164 = v162 & ~v163;
  unint64_t v165 = a2[3];
  unint64_t v166 = HIDWORD(v165);
  LODWORD(v159) = v165;
  unint64_t v167 = HIDWORD(v149);
  LODWORD(v155) = v149;
  unint64_t v168 = v149 * (unint64_t)v165;
  unint64_t v169 = v155 * (unint64_t)HIDWORD(v165);
  unint64_t v170 = HIDWORD(v169) + v167 * (unint64_t)v166;
  unint64_t v171 = v168 | (v169 << 32);
  unint64_t v172 = v168 & (v169 << 32);
  unint64_t v173 = (v169 << 32) + v155 * (unint64_t)v159;
  unint64_t v174 = v171 & ~v173 | v172;
  unint64_t v175 = v167 * (unint64_t)v159;
  unint64_t v176 = v173 | (v175 << 32);
  unint64_t v177 = v173 & (v175 << 32);
  unint64_t v178 = v173 + (v175 << 32);
  unint64_t v179 = v170 + HIDWORD(v175) + (v174 >> 63) + ((v176 & ~v178 | v177) >> 63);
  unint64_t v180 = v160 | v178;
  unint64_t v181 = v160 & v178;
  uint64_t v182 = v160 + v178;
  unint64_t v183 = v179 + ((v180 & ~v182 | v181) >> 63);
  unint64_t v184 = v183 | v163;
  unint64_t v185 = v183 & v163;
  unint64_t v186 = v183 + v163;
  unint64_t v187 = ((v184 & ~v186 | v185) >> 63) + (v164 >> 63);
  unint64_t v188 = v182 | v178;
  unint64_t v189 = v182 & v178;
  unint64_t v190 = v182 + v178;
  unint64_t v191 = v179 + ((v188 & ~v190 | v189) >> 63);
  unint64_t v192 = v191 | v186;
  unint64_t v193 = v191 & v186;
  unint64_t v194 = v191 + v186;
  unint64_t v195 = v187 + ((v192 & ~v194 | v193) >> 63);
  result[4] = v190;
  unint64_t v197 = a2[2];
  unint64_t v196 = a2[3];
  unint64_t v198 = HIDWORD(v196);
  LODWORD(v193) = v196;
  unint64_t v199 = HIDWORD(v197);
  LODWORD(v185) = v197;
  unint64_t v200 = v197 * (unint64_t)v196;
  unint64_t v201 = v197 * (unint64_t)v198;
  unint64_t v202 = HIDWORD(v201) + v199 * (unint64_t)v198;
  unint64_t v203 = v200 | (v201 << 32);
  unint64_t v204 = v200 & (v201 << 32);
  unint64_t v205 = (v201 << 32) + v185 * (unint64_t)v193;
  unint64_t v206 = v203 & ~v205 | v204;
  unint64_t v207 = v199 * (unint64_t)v193;
  unint64_t v208 = v205 | (v207 << 32);
  unint64_t v209 = v205 & (v207 << 32);
  unint64_t v210 = v205 + (v207 << 32);
  unint64_t v211 = v202 + HIDWORD(v207) + (v206 >> 63) + ((v208 & ~v210 | v209) >> 63);
  unint64_t v212 = v194 | v210;
  unint64_t v213 = v194 & v210;
  unint64_t v214 = v194 + v210;
  unint64_t v215 = v211 + ((v212 & ~v214 | v213) >> 63);
  unint64_t v216 = v195 + v215;
  unint64_t v217 = v215 & ~v216;
  unint64_t v218 = v214 | v210;
  unint64_t v219 = v214 & v210;
  unint64_t v220 = v214 + v210;
  unint64_t v221 = v211 + ((v218 & ~v220 | v219) >> 63);
  unint64_t v222 = v221 | v216;
  unint64_t v223 = v221 & v216;
  unint64_t v224 = v221 + v216;
  unint64_t v225 = v222 & ~v224 | v223;
  result[5] = v220;
  unint64_t v226 = a2[3];
  unint64_t v227 = HIDWORD(v226);
  unint64_t v228 = v226 * (unint64_t)HIDWORD(v226);
  unint64_t v229 = (v228 << 32) + v226 * (unint64_t)v226;
  unint64_t v230 = ((v226 * (unint64_t)v226) | (v228 << 32)) & ~v229 | (v226
                                                                                               * (unint64_t)v226) & (v228 << 32);
  unint64_t v231 = v229 | (v228 << 32);
  unint64_t v232 = v229 & (v228 << 32);
  unint64_t v233 = v229 + (v228 << 32);
  unint64_t v234 = ((v228 >> 31) & 0x1FFFFFFFELL)
       + v227 * (unint64_t)v227
       + (v230 >> 63)
       + ((v231 & ~v233 | v232) >> 63);
  unint64_t v235 = v224 | v233;
  unint64_t v236 = v224 & v233;
  unint64_t v237 = v224 + v233;
  result[6] = v237;
  result[7] = v234 + (v217 >> 63) + (v225 >> 63) + ((v235 & ~v237 | v236) >> 63);
  return result;
}

unint64_t *bn_sqr_comba8(unint64_t *result, void *a2)
{
  uint64_t v2 = HIDWORD(*a2);
  unsigned int v3 = *a2;
  unint64_t v4 = v3 * (unint64_t)v3;
  unint64_t v5 = v3 * (unint64_t)v2;
  unint64_t v6 = (v5 << 32) + v4;
  unint64_t v7 = v6 + (v5 << 32);
  unint64_t v8 = ((v5 >> 31) & 0x1FFFFFFFELL)
     + v2 * (unint64_t)v2
     + (((v4 | (v5 << 32)) & ~v6 | v4 & (v5 << 32)) >> 63)
     + (((v6 | (v5 << 32)) & ~v7 | v6 & (v5 << 32)) >> 63);
  BIO *result = v7;
  unint64_t v9 = a2[1];
  unint64_t v10 = HIDWORD(v9);
  unint64_t v11 = *a2 * (unint64_t)v9;
  unint64_t v12 = *a2 * (unint64_t)HIDWORD(v9);
  uint64_t v13 = HIDWORD(*a2);
  unint64_t v14 = (v12 << 32) + v11;
  unint64_t v15 = v13 * (unint64_t)v9;
  unint64_t v16 = v14 + (v15 << 32);
  unint64_t v17 = HIDWORD(v12)
      + v13 * (unint64_t)v10
      + HIDWORD(v15)
      + (((v11 | (v12 << 32)) & ~v14 | v11 & (v12 << 32)) >> 63)
      + (((v14 | (v15 << 32)) & ~v16 | v14 & (v15 << 32)) >> 63);
  unint64_t v18 = v8 + v16;
  unint64_t v19 = v17 + (((v8 | v16) & ~(v8 + v16) | v8 & v16) >> 63);
  unint64_t v20 = v18 | v16;
  unint64_t v21 = v18 & v16;
  unint64_t v22 = v18 + v16;
  unint64_t v23 = v17 + ((v20 & ~v22 | v21) >> 63);
  result[1] = v22;
  uint64_t v24 = a2[1];
  unint64_t v25 = v24 * (unint64_t)HIDWORD(v24);
  unint64_t v26 = (v25 << 32) + v24 * (unint64_t)v24;
  unint64_t v27 = v26 + (v25 << 32);
  unint64_t v28 = v23 + v19 + v27;
  unint64_t v29 = ((v25 >> 31) & 0x1FFFFFFFELL)
      + HIDWORD(v24) * (unint64_t)HIDWORD(v24)
      + ((((v24 * (unint64_t)v24) | (v25 << 32)) & ~v26 | (v24
                                                                                            * (unint64_t)v24) & (v25 << 32)) >> 63)
      + (((v26 | (v25 << 32)) & ~v27 | v26 & (v25 << 32)) >> 63)
      + ((((v23 + v19) | v27) & ~v28 | (v23 + v19) & v27) >> 63);
  unint64_t v30 = v29 + (((v23 | v19) & ~(v23 + v19) | v23 & v19) >> 63);
  unint64_t v31 = a2[2];
  unint64_t v32 = HIDWORD(v31);
  unint64_t v33 = *a2 * (unint64_t)v31;
  unint64_t v34 = *a2 * (unint64_t)HIDWORD(v31);
  uint64_t v35 = HIDWORD(*a2);
  unint64_t v36 = (v34 << 32) + v33;
  unint64_t v37 = v35 * (unint64_t)v31;
  unint64_t v38 = HIDWORD(v34) + v35 * (unint64_t)v32;
  unint64_t v39 = v36 + (v37 << 32);
  unint64_t v40 = v38
      + HIDWORD(v37)
      + (((v33 | (v34 << 32)) & ~v36 | v33 & (v34 << 32)) >> 63)
      + (((v36 | (v37 << 32)) & ~v39 | v36 & (v37 << 32)) >> 63);
  unint64_t v41 = v28 + v39;
  unint64_t v42 = v40 + (((v28 | v39) & ~(v28 + v39) | v28 & v39) >> 63);
  unint64_t v43 = v29 & ~v30;
  unint64_t v44 = v42 | v30;
  unint64_t v45 = v42 & v30;
  unint64_t v46 = v42 + v30;
  unint64_t v47 = ((v44 & ~v46 | v45) >> 63) + (v43 >> 63);
  unint64_t v48 = v41 | v39;
  unint64_t v49 = v41 & v39;
  unint64_t v50 = v41 + v39;
  unint64_t v51 = v40 + ((v48 & ~v50 | v49) >> 63);
  unint64_t v52 = v51 | v46;
  unint64_t v53 = v51 & v46;
  unint64_t v54 = v51 + v46;
  unint64_t v55 = v47 + ((v52 & ~v54 | v53) >> 63);
  result[2] = v50;
  unint64_t v57 = a2[2];
  unint64_t v56 = a2[3];
  unint64_t v58 = HIDWORD(v56);
  unint64_t v59 = a2[1];
  unint64_t v60 = *a2 * (unint64_t)v56;
  unint64_t v61 = *a2 * (unint64_t)HIDWORD(v56);
  unint64_t v62 = v60 | (v61 << 32);
  unint64_t v63 = v60 & (v61 << 32);
  uint64_t v64 = HIDWORD(*a2);
  unint64_t v65 = (v61 << 32) + *a2 * (unint64_t)v56;
  unint64_t v66 = v64 * (unint64_t)v56;
  unint64_t v67 = HIDWORD(v61) + v64 * (unint64_t)v58;
  unint64_t v68 = v65 + (v66 << 32);
  unint64_t v69 = v67 + HIDWORD(v66) + ((v62 & ~v65 | v63) >> 63) + (((v65 | (v66 << 32)) & ~v68 | v65 & (v66 << 32)) >> 63);
  unint64_t v70 = v54 | v68;
  unint64_t v71 = v54 & v68;
  unint64_t v72 = v54 + v68;
  unint64_t v73 = v69 + ((v70 & ~v72 | v71) >> 63);
  unint64_t v74 = v72 | v68;
  unint64_t v75 = v72 & v68;
  unint64_t v76 = v72 + v68;
  unint64_t v77 = v69 + ((v74 & ~v76 | v75) >> 63);
  unint64_t v78 = v55 + v73;
  unint64_t v79 = v73 & ~v78;
  unint64_t v80 = v77 | v78;
  unint64_t v81 = v77 & v78;
  unint64_t v82 = v77 + v78;
  unint64_t v83 = ((v80 & ~v82 | v81) >> 63) + (v79 >> 63);
  unint64_t v84 = HIDWORD(v57);
  LODWORD(v80) = v59;
  unint64_t v85 = v59 * (unint64_t)v57;
  unint64_t v86 = v59 * (unint64_t)HIDWORD(v57);
  v59 >>= 32;
  unint64_t v87 = (v86 << 32) + v80 * (unint64_t)v57;
  unint64_t v88 = v59 * (unint64_t)v57;
  unint64_t v89 = HIDWORD(v86) + v59 * (unint64_t)v84;
  unint64_t v90 = v87 + (v88 << 32);
  unint64_t v91 = v89
      + HIDWORD(v88)
      + (((v85 | (v86 << 32)) & ~v87 | v85 & (v86 << 32)) >> 63)
      + (((v87 | (v88 << 32)) & ~v90 | v87 & (v88 << 32)) >> 63);
  unint64_t v92 = v76 | v90;
  unint64_t v93 = v76 & v90;
  unint64_t v94 = v76 + v90;
  unint64_t v95 = v91 + ((v92 & ~v94 | v93) >> 63);
  unint64_t v96 = v95 | v82;
  unint64_t v97 = v95 & v82;
  unint64_t v98 = v95 + v82;
  unint64_t v99 = v83 + ((v96 & ~v98 | v97) >> 63);
  unint64_t v100 = v94 | v90;
  unint64_t v101 = v94 & v90;
  unint64_t v102 = v94 + v90;
  unint64_t v103 = v91 + ((v100 & ~v102 | v101) >> 63);
  unint64_t v104 = v103 | v98;
  unint64_t v105 = v103 & v98;
  unint64_t v106 = v103 + v98;
  unint64_t v107 = v99 + ((v104 & ~v106 | v105) >> 63);
  result[3] = v102;
  uint64_t v109 = a2[2];
  unint64_t v108 = a2[3];
  unint64_t v110 = v109 * (unint64_t)HIDWORD(v109);
  unint64_t v111 = (v110 << 32) + v109 * (unint64_t)v109;
  unint64_t v112 = v111 + (v110 << 32);
  unint64_t v113 = ((v110 >> 31) & 0x1FFFFFFFELL)
       + HIDWORD(v109) * (unint64_t)HIDWORD(v109)
       + ((((v109 * (unint64_t)v109) | (v110 << 32)) & ~v111 | (v109
                                                                                                 * (unint64_t)v109) & (v110 << 32)) >> 63)
       + (((v111 | (v110 << 32)) & ~v112 | v111 & (v110 << 32)) >> 63);
  unint64_t v114 = v106 | v112;
  unint64_t v115 = v106 & v112;
  unint64_t v116 = v106 + v112;
  unint64_t v117 = v113 + ((v114 & ~v116 | v115) >> 63);
  unint64_t v118 = HIDWORD(v108);
  unint64_t v119 = a2[1];
  LODWORD(v97) = v119;
  unint64_t v120 = v119 * (unint64_t)v108;
  unint64_t v121 = v119 * (unint64_t)HIDWORD(v108);
  unint64_t v122 = v120 | (v121 << 32);
  unint64_t v123 = v120 & (v121 << 32);
  v119 >>= 32;
  unint64_t v124 = (v121 << 32) + v97 * (unint64_t)v108;
  unint64_t v125 = v119 * (unint64_t)v108;
  unint64_t v126 = HIDWORD(v121) + v119 * (unint64_t)v118;
  unint64_t v127 = v124 + (v125 << 32);
  unint64_t v128 = v126
       + HIDWORD(v125)
       + ((v122 & ~v124 | v123) >> 63)
       + (((v124 | (v125 << 32)) & ~v127 | v124 & (v125 << 32)) >> 63);
  unint64_t v129 = v116 | v127;
  unint64_t v130 = v116 & v127;
  unint64_t v131 = v116 + v127;
  unint64_t v132 = v128 + ((v129 & ~v131 | v130) >> 63);
  unint64_t v133 = v117 | v107;
  unint64_t v134 = v117 + v107;
  unint64_t v135 = v133 & ~v134;
  unint64_t v136 = v132 | v134;
  unint64_t v137 = v132 & v134;
  unint64_t v138 = v132 + v134;
  unint64_t v139 = ((v136 & ~v138 | v137) >> 63) + (v135 >> 63);
  unint64_t v140 = v131 | v127;
  unint64_t v141 = v131 & v127;
  uint64_t v142 = v131 + v127;
  unint64_t v143 = v128 + ((v140 & ~v142 | v141) >> 63);
  unint64_t v144 = v143 | v138;
  unint64_t v145 = v143 & v138;
  unint64_t v146 = v143 + v138;
  unint64_t v147 = v139 + ((v144 & ~v146 | v145) >> 63);
  unint64_t v148 = a2[4];
  unint64_t v149 = HIDWORD(v148);
  unint64_t v150 = *a2 * (unint64_t)v148;
  unint64_t v151 = *a2 * (unint64_t)HIDWORD(v148);
  uint64_t v152 = HIDWORD(*a2);
  unint64_t v153 = (v151 << 32) + v150;
  unint64_t v154 = v152 * (unint64_t)v148;
  unint64_t v155 = HIDWORD(v151) + v152 * (unint64_t)v149;
  unint64_t v156 = v153 + (v154 << 32);
  unint64_t v157 = v155
       + HIDWORD(v154)
       + (((v150 | (v151 << 32)) & ~v153 | v150 & (v151 << 32)) >> 63)
       + (((v153 | (v154 << 32)) & ~v156 | v153 & (v154 << 32)) >> 63);
  unint64_t v158 = v142 | v156;
  unint64_t v159 = v142 & v156;
  uint64_t v160 = v142 + v156;
  unint64_t v161 = v157 + ((v158 & ~v160 | v159) >> 63);
  unint64_t v162 = v161 | v146;
  unint64_t v163 = v161 & v146;
  unint64_t v164 = v161 + v146;
  unint64_t v165 = v147 + ((v162 & ~v164 | v163) >> 63);
  unint64_t v166 = v160 | v156;
  unint64_t v167 = v160 & v156;
  unint64_t v168 = v160 + v156;
  unint64_t v169 = v157 + ((v166 & ~v168 | v167) >> 63);
  unint64_t v170 = v169 | v164;
  unint64_t v171 = v169 & v164;
  uint64_t v172 = v169 + v164;
  unint64_t v173 = v165 + ((v170 & ~v172 | v171) >> 63);
  result[4] = v168;
  unint64_t v175 = a2[4];
  unint64_t v174 = a2[5];
  unint64_t v176 = HIDWORD(v174);
  LODWORD(v17ripemd160_block_data_order(c, b, 1) = v174;
  unint64_t v177 = a2[1];
  uint64_t v178 = HIDWORD(*a2);
  LODWORD(v127) = *a2;
  unint64_t v179 = v127 * (unint64_t)v174;
  unint64_t v180 = v127 * (unint64_t)v176;
  unint64_t v181 = (v180 << 32) + v127 * (unint64_t)v171;
  unint64_t v182 = v178 * (unint64_t)v171;
  unint64_t v183 = HIDWORD(v180) + v178 * (unint64_t)v176;
  unint64_t v184 = v181 + (v182 << 32);
  unint64_t v185 = v183
       + HIDWORD(v182)
       + (((v179 | (v180 << 32)) & ~v181 | v179 & (v180 << 32)) >> 63)
       + (((v181 | (v182 << 32)) & ~v184 | v181 & (v182 << 32)) >> 63);
  unint64_t v186 = v172 | v184;
  unint64_t v187 = v172 & v184;
  uint64_t v188 = v172 + v184;
  unint64_t v189 = v185 + ((v186 & ~v188 | v187) >> 63);
  unint64_t v190 = v189 | v173;
  unint64_t v191 = v189 + v173;
  unint64_t v192 = v190 & ~v191;
  unint64_t v193 = v188 | v184;
  unint64_t v194 = v188 & v184;
  uint64_t v195 = v188 + v184;
  unint64_t v196 = v185 + ((v193 & ~v195 | v194) >> 63);
  unint64_t v197 = v196 | v191;
  unint64_t v198 = v196 & v191;
  unint64_t v199 = v196 + v191;
  unint64_t v200 = ((v197 & ~v199 | v198) >> 63) + (v192 >> 63);
  unint64_t v201 = HIDWORD(v175);
  LODWORD(v197) = v175;
  unint64_t v202 = HIDWORD(v177);
  LODWORD(v184) = v177;
  unint64_t v203 = v177 * (unint64_t)v175;
  unint64_t v204 = v177 * (unint64_t)v201;
  unint64_t v205 = (v204 << 32) + v184 * (unint64_t)v197;
  unint64_t v206 = v202 * (unint64_t)v197;
  unint64_t v207 = HIDWORD(v204) + v202 * (unint64_t)v201;
  unint64_t v208 = v205 + (v206 << 32);
  unint64_t v209 = v207
       + HIDWORD(v206)
       + (((v203 | (v204 << 32)) & ~v205 | v203 & (v204 << 32)) >> 63)
       + (((v205 | (v206 << 32)) & ~v208 | v205 & (v206 << 32)) >> 63);
  unint64_t v210 = v195 | v208;
  unint64_t v211 = v195 & v208;
  uint64_t v212 = v195 + v208;
  unint64_t v213 = v209 + ((v210 & ~v212 | v211) >> 63);
  unint64_t v214 = v213 | v199;
  unint64_t v215 = v213 & v199;
  unint64_t v216 = v213 + v199;
  unint64_t v217 = v200 + ((v214 & ~v216 | v215) >> 63);
  unint64_t v218 = v212 | v208;
  unint64_t v219 = v212 & v208;
  uint64_t v220 = v212 + v208;
  unint64_t v221 = v209 + ((v218 & ~v220 | v219) >> 63);
  unint64_t v222 = v221 | v216;
  unint64_t v223 = v221 & v216;
  uint64_t v224 = v221 + v216;
  unint64_t v225 = v217 + ((v222 & ~v224 | v223) >> 63);
  unint64_t v227 = a2[2];
  unint64_t v226 = a2[3];
  unint64_t v228 = HIDWORD(v226);
  LODWORD(v208) = v226;
  unint64_t v229 = HIDWORD(v227);
  LODWORD(v205) = v227;
  unint64_t v230 = v227 * (unint64_t)v226;
  unint64_t v231 = v227 * (unint64_t)v228;
  unint64_t v232 = HIDWORD(v231) + v229 * (unint64_t)v228;
  unint64_t v233 = v230 | (v231 << 32);
  unint64_t v234 = v230 & (v231 << 32);
  unint64_t v235 = (v231 << 32) + v205 * (unint64_t)v208;
  unint64_t v236 = v233 & ~v235 | v234;
  unint64_t v237 = v229 * (unint64_t)v208;
  unint64_t v238 = v235 | (v237 << 32);
  unint64_t v239 = v235 & (v237 << 32);
  unint64_t v240 = v235 + (v237 << 32);
  unint64_t v241 = v232 + HIDWORD(v237) + (v236 >> 63) + ((v238 & ~v240 | v239) >> 63);
  unint64_t v242 = v220 | v240;
  unint64_t v243 = v220 & v240;
  uint64_t v244 = v220 + v240;
  unint64_t v245 = v241 + ((v242 & ~v244 | v243) >> 63);
  unint64_t v246 = v245 | v224;
  unint64_t v247 = v245 & v224;
  uint64_t v248 = v245 + v224;
  unint64_t v249 = v225 + ((v246 & ~v248 | v247) >> 63);
  unint64_t v250 = v244 | v240;
  unint64_t v251 = v244 & v240;
  unint64_t v252 = v244 + v240;
  unint64_t v253 = v241 + ((v250 & ~v252 | v251) >> 63);
  unint64_t v254 = v253 | v248;
  unint64_t v255 = v253 & v248;
  uint64_t v256 = v253 + v248;
  unint64_t v257 = v249 + ((v254 & ~v256 | v255) >> 63);
  result[5] = v252;
  unint64_t v259 = a2[2];
  unint64_t v258 = a2[3];
  unint64_t v260 = HIDWORD(v258);
  unint64_t v261 = v258 * (unint64_t)HIDWORD(v258);
  unint64_t v262 = (v261 << 32) + v258 * (unint64_t)v258;
  unint64_t v263 = ((v258 * (unint64_t)v258) | (v261 << 32)) & ~v262 | (v258
                                                                                               * (unint64_t)v258) & (v261 << 32);
  unint64_t v264 = v262 | (v261 << 32);
  unint64_t v265 = v262 & (v261 << 32);
  unint64_t v266 = v262 + (v261 << 32);
  unint64_t v267 = ((v261 >> 31) & 0x1FFFFFFFELL)
       + v260 * (unint64_t)v260
       + (v263 >> 63)
       + ((v264 & ~v266 | v265) >> 63);
  unint64_t v268 = v256 | v266;
  unint64_t v269 = v256 & v266;
  uint64_t v270 = v256 + v266;
  unint64_t v271 = v267 + ((v268 & ~v270 | v269) >> 63);
  unint64_t v272 = v271 | v257;
  unint64_t v273 = v271 + v257;
  unint64_t v274 = v272 & ~v273;
  unint64_t v275 = a2[4];
  unint64_t v276 = a2[5];
  unint64_t v277 = HIDWORD(v275);
  LODWORD(v264) = v275;
  unint64_t v278 = HIDWORD(v259);
  LODWORD(v18ripemd160_block_data_order(c, b, 1) = v259;
  unint64_t v279 = v259 * (unint64_t)v275;
  unint64_t v280 = v181 * (unint64_t)HIDWORD(v275);
  unint64_t v281 = HIDWORD(v280) + v278 * (unint64_t)v277;
  unint64_t v282 = v279 | (v280 << 32);
  unint64_t v283 = v279 & (v280 << 32);
  unint64_t v284 = (v280 << 32) + v181 * (unint64_t)v264;
  unint64_t v285 = v282 & ~v284 | v283;
  unint64_t v286 = v278 * (unint64_t)v264;
  unint64_t v287 = v284 | (v286 << 32);
  unint64_t v288 = v284 & (v286 << 32);
  unint64_t v289 = v284 + (v286 << 32);
  unint64_t v290 = v281 + HIDWORD(v286) + (v285 >> 63) + ((v287 & ~v289 | v288) >> 63);
  unint64_t v291 = v270 | v289;
  unint64_t v292 = v270 & v289;
  uint64_t v293 = v270 + v289;
  unint64_t v294 = v290 + ((v291 & ~v293 | v292) >> 63);
  unint64_t v295 = v294 | v273;
  unint64_t v296 = v294 & v273;
  unint64_t v297 = v294 + v273;
  unint64_t v298 = ((v295 & ~v297 | v296) >> 63) + (v274 >> 63);
  unint64_t v299 = v293 | v289;
  unint64_t v300 = v293 & v289;
  uint64_t v301 = v293 + v289;
  unint64_t v302 = v290 + ((v299 & ~v301 | v300) >> 63);
  unint64_t v303 = v302 | v297;
  unint64_t v304 = v302 & v297;
  uint64_t v305 = v302 + v297;
  unint64_t v306 = v298 + ((v303 & ~v305 | v304) >> 63);
  unint64_t v307 = HIDWORD(v276);
  LODWORD(v303) = v276;
  unint64_t v308 = a2[1];
  unint64_t v309 = HIDWORD(v308);
  LODWORD(v288) = v308;
  unint64_t v310 = v308 * (unint64_t)v276;
  unint64_t v311 = v308 * (unint64_t)v307;
  unint64_t v312 = HIDWORD(v311) + v309 * (unint64_t)v307;
  unint64_t v313 = v310 | (v311 << 32);
  unint64_t v314 = v310 & (v311 << 32);
  unint64_t v315 = (v311 << 32) + v288 * (unint64_t)v303;
  unint64_t v316 = v313 & ~v315 | v314;
  unint64_t v317 = v309 * (unint64_t)v303;
  unint64_t v318 = v315 | (v317 << 32);
  unint64_t v319 = v315 & (v317 << 32);
  unint64_t v320 = v315 + (v317 << 32);
  unint64_t v321 = v312 + HIDWORD(v317) + (v316 >> 63) + ((v318 & ~v320 | v319) >> 63);
  unint64_t v322 = v301 | v320;
  unint64_t v323 = v301 & v320;
  uint64_t v324 = v301 + v320;
  unint64_t v325 = v321 + ((v322 & ~v324 | v323) >> 63);
  unint64_t v326 = v325 | v305;
  unint64_t v327 = v325 & v305;
  uint64_t v328 = v325 + v305;
  unint64_t v329 = v306 + ((v326 & ~v328 | v327) >> 63);
  unint64_t v330 = v324 | v320;
  unint64_t v331 = v324 & v320;
  uint64_t v332 = v324 + v320;
  unint64_t v333 = v321 + ((v330 & ~v332 | v331) >> 63);
  unint64_t v334 = v333 | v328;
  unint64_t v335 = v333 & v328;
  uint64_t v336 = v333 + v328;
  unint64_t v337 = v329 + ((v334 & ~v336 | v335) >> 63);
  unint64_t v338 = a2[6];
  unint64_t v339 = HIDWORD(v338);
  LODWORD(v335) = v338;
  uint64_t v340 = HIDWORD(*a2);
  LODWORD(v327) = *a2;
  unint64_t v341 = v327 * (unint64_t)v338;
  unint64_t v342 = v327 * (unint64_t)v339;
  unint64_t v343 = HIDWORD(v342) + v340 * (unint64_t)v339;
  unint64_t v344 = v341 | (v342 << 32);
  unint64_t v345 = v341 & (v342 << 32);
  unint64_t v346 = (v342 << 32) + v327 * (unint64_t)v335;
  unint64_t v347 = v344 & ~v346 | v345;
  unint64_t v348 = v340 * (unint64_t)v335;
  unint64_t v349 = v346 | (v348 << 32);
  unint64_t v350 = v346 & (v348 << 32);
  unint64_t v351 = v346 + (v348 << 32);
  unint64_t v352 = v343 + HIDWORD(v348) + (v347 >> 63) + ((v349 & ~v351 | v350) >> 63);
  unint64_t v353 = v332 | v351;
  unint64_t v354 = v332 & v351;
  uint64_t v355 = v332 + v351;
  unint64_t v356 = v352 + ((v353 & ~v355 | v354) >> 63);
  unint64_t v357 = v356 | v336;
  unint64_t v358 = v356 & v336;
  uint64_t v359 = v356 + v336;
  unint64_t v360 = v337 + ((v357 & ~v359 | v358) >> 63);
  unint64_t v361 = v355 + v351;
  unint64_t v362 = v352 + (((v355 | v351) & ~(v355 + v351) | v355 & v351) >> 63);
  unint64_t v363 = v362 | v359;
  unint64_t v364 = v362 & v359;
  uint64_t v365 = v362 + v359;
  unint64_t v366 = v360 + ((v363 & ~v365 | v364) >> 63);
  result[6] = v361;
  unint64_t v368 = a2[6];
  unint64_t v367 = a2[7];
  unint64_t v369 = HIDWORD(v367);
  LODWORD(v357) = v367;
  unint64_t v370 = a2[1];
  uint64_t v371 = HIDWORD(*a2);
  LODWORD(v319) = *a2;
  unint64_t v372 = v319 * (unint64_t)v367;
  unint64_t v373 = v319 * (unint64_t)v369;
  unint64_t v374 = HIDWORD(v373) + v371 * (unint64_t)v369;
  unint64_t v375 = v372 | (v373 << 32);
  unint64_t v376 = v372 & (v373 << 32);
  unint64_t v377 = (v373 << 32) + v319 * (unint64_t)v357;
  unint64_t v378 = v375 & ~v377 | v376;
  unint64_t v379 = v371 * (unint64_t)v357;
  unint64_t v380 = v377 | (v379 << 32);
  unint64_t v381 = v377 & (v379 << 32);
  unint64_t v382 = v377 + (v379 << 32);
  unint64_t v383 = v374 + HIDWORD(v379) + (v378 >> 63) + ((v380 & ~v382 | v381) >> 63);
  unint64_t v384 = v365 | v382;
  unint64_t v385 = v365 & v382;
  uint64_t v386 = v365 + v382;
  unint64_t v387 = v383 + ((v384 & ~v386 | v385) >> 63);
  unint64_t v388 = v387 | v366;
  unint64_t v389 = v387 & v366;
  unint64_t v390 = v387 + v366;
  unint64_t v391 = v388 & ~v390 | v389;
  unint64_t v392 = v386 | v382;
  unint64_t v393 = v386 & v382;
  uint64_t v394 = v386 + v382;
  unint64_t v395 = v383 + ((v392 & ~v394 | v393) >> 63);
  unint64_t v396 = v395 | v390;
  unint64_t v397 = v395 & v390;
  uint64_t v398 = v395 + v390;
  unint64_t v399 = ((v396 & ~v398 | v397) >> 63) + (v391 >> 63);
  unint64_t v400 = HIDWORD(v368);
  LODWORD(v396) = v368;
  unint64_t v401 = HIDWORD(v370);
  LODWORD(v393) = v370;
  unint64_t v402 = v370 * (unint64_t)v368;
  unint64_t v403 = v370 * (unint64_t)v400;
  unint64_t v404 = HIDWORD(v403) + v401 * (unint64_t)v400;
  unint64_t v405 = v402 | (v403 << 32);
  unint64_t v406 = v402 & (v403 << 32);
  unint64_t v407 = (v403 << 32) + v393 * (unint64_t)v396;
  unint64_t v408 = v405 & ~v407 | v406;
  unint64_t v409 = v401 * (unint64_t)v396;
  unint64_t v410 = v407 | (v409 << 32);
  unint64_t v411 = v407 & (v409 << 32);
  unint64_t v412 = v407 + (v409 << 32);
  unint64_t v413 = v404 + HIDWORD(v409) + (v408 >> 63) + ((v410 & ~v412 | v411) >> 63);
  unint64_t v414 = v394 | v412;
  unint64_t v415 = v394 & v412;
  uint64_t v416 = v394 + v412;
  unint64_t v417 = v413 + ((v414 & ~v416 | v415) >> 63);
  unint64_t v418 = v417 | v398;
  unint64_t v419 = v417 & v398;
  uint64_t v420 = v417 + v398;
  unint64_t v421 = v399 + ((v418 & ~v420 | v419) >> 63);
  unint64_t v422 = v416 | v412;
  unint64_t v423 = v416 & v412;
  uint64_t v424 = v416 + v412;
  unint64_t v425 = v413 + ((v422 & ~v424 | v423) >> 63);
  unint64_t v426 = v425 | v420;
  unint64_t v427 = v425 & v420;
  uint64_t v428 = v425 + v420;
  unint64_t v429 = v421 + ((v426 & ~v428 | v427) >> 63);
  unint64_t v431 = a2[4];
  unint64_t v430 = a2[5];
  unint64_t v432 = HIDWORD(v430);
  LODWORD(v419) = v430;
  unint64_t v433 = a2[2];
  unint64_t v434 = a2[3];
  unint64_t v435 = HIDWORD(v433);
  LODWORD(v405) = v433;
  unint64_t v436 = v433 * (unint64_t)v430;
  unint64_t v437 = v433 * (unint64_t)v432;
  unint64_t v438 = HIDWORD(v437) + v435 * (unint64_t)v432;
  unint64_t v439 = v436 | (v437 << 32);
  unint64_t v440 = v436 & (v437 << 32);
  unint64_t v441 = (v437 << 32) + v405 * (unint64_t)v419;
  unint64_t v442 = v439 & ~v441 | v440;
  unint64_t v443 = v435 * (unint64_t)v419;
  unint64_t v444 = v441 | (v443 << 32);
  unint64_t v445 = v441 & (v443 << 32);
  unint64_t v446 = v441 + (v443 << 32);
  unint64_t v447 = v438 + HIDWORD(v443) + (v442 >> 63) + ((v444 & ~v446 | v445) >> 63);
  unint64_t v448 = v424 | v446;
  unint64_t v449 = v424 & v446;
  uint64_t v450 = v424 + v446;
  unint64_t v451 = v447 + ((v448 & ~v450 | v449) >> 63);
  unint64_t v452 = v451 | v428;
  unint64_t v453 = v451 & v428;
  uint64_t v454 = v451 + v428;
  unint64_t v455 = v429 + ((v452 & ~v454 | v453) >> 63);
  unint64_t v456 = v450 | v446;
  unint64_t v457 = v450 & v446;
  uint64_t v458 = v450 + v446;
  unint64_t v459 = v447 + ((v456 & ~v458 | v457) >> 63);
  unint64_t v460 = v459 | v454;
  unint64_t v461 = v459 & v454;
  uint64_t v462 = v459 + v454;
  unint64_t v463 = v455 + ((v460 & ~v462 | v461) >> 63);
  unint64_t v464 = HIDWORD(v431);
  LODWORD(v460) = v431;
  unint64_t v465 = HIDWORD(v434);
  LODWORD(v446) = v434;
  unint64_t v466 = v434 * (unint64_t)v431;
  unint64_t v467 = v434 * (unint64_t)v464;
  unint64_t v468 = HIDWORD(v467) + v465 * (unint64_t)v464;
  unint64_t v469 = (v467 << 32) + v446 * (unint64_t)v460;
  unint64_t v470 = (v466 | (v467 << 32)) & ~v469 | v466 & (v467 << 32);
  unint64_t v471 = v465 * (unint64_t)v460;
  unint64_t v472 = v469 | (v471 << 32);
  unint64_t v473 = v469 & (v471 << 32);
  unint64_t v474 = v469 + (v471 << 32);
  unint64_t v475 = v468 + HIDWORD(v471) + (v470 >> 63) + ((v472 & ~v474 | v473) >> 63);
  unint64_t v476 = v458 | v474;
  unint64_t v477 = v458 & v474;
  uint64_t v478 = v458 + v474;
  unint64_t v479 = v475 + ((v476 & ~v478 | v477) >> 63);
  unint64_t v480 = v479 | v462;
  unint64_t v481 = v479 & v462;
  uint64_t v482 = v479 + v462;
  unint64_t v483 = v463 + ((v480 & ~v482 | v481) >> 63);
  unint64_t v484 = v478 | v474;
  unint64_t v485 = v478 & v474;
  unint64_t v486 = v478 + v474;
  unint64_t v487 = v475 + ((v484 & ~v486 | v485) >> 63);
  unint64_t v488 = v487 | v482;
  unint64_t v489 = v487 & v482;
  uint64_t v490 = v487 + v482;
  unint64_t v491 = v483 + ((v488 & ~v490 | v489) >> 63);
  result[7] = v486;
  unint64_t v493 = a2[3];
  unint64_t v492 = a2[4];
  unint64_t v494 = HIDWORD(v492);
  unint64_t v495 = v492 * (unint64_t)HIDWORD(v492);
  unint64_t v496 = (v495 << 32) + v492 * (unint64_t)v492;
  unint64_t v497 = ((v492 * (unint64_t)v492) | (v495 << 32)) & ~v496 | (v492
                                                                                               * (unint64_t)v492) & (v495 << 32);
  unint64_t v498 = v496 | (v495 << 32);
  unint64_t v499 = v496 & (v495 << 32);
  unint64_t v500 = v496 + (v495 << 32);
  unint64_t v501 = ((v495 >> 31) & 0x1FFFFFFFELL)
       + v494 * (unint64_t)v494
       + (v497 >> 63)
       + ((v498 & ~v500 | v499) >> 63);
  unint64_t v502 = v490 | v500;
  unint64_t v503 = v490 & v500;
  uint64_t v504 = v490 + v500;
  unint64_t v505 = v501 + ((v502 & ~v504 | v503) >> 63);
  unint64_t v506 = v505 | v491;
  unint64_t v507 = v505 & v491;
  uint64_t v508 = v505 + v491;
  unint64_t v509 = v506 & ~v508 | v507;
  unint64_t v510 = a2[5];
  unint64_t v511 = a2[6];
  unint64_t v512 = HIDWORD(v510);
  LODWORD(v498) = v510;
  unint64_t v513 = HIDWORD(v493);
  LODWORD(v453) = v493;
  unint64_t v514 = v493 * (unint64_t)v510;
  unint64_t v515 = v453 * (unint64_t)HIDWORD(v510);
  unint64_t v516 = HIDWORD(v515) + v513 * (unint64_t)v512;
  unint64_t v517 = v514 | (v515 << 32);
  unint64_t v518 = v514 & (v515 << 32);
  unint64_t v519 = (v515 << 32) + v453 * (unint64_t)v498;
  unint64_t v520 = v517 & ~v519 | v518;
  unint64_t v521 = v513 * (unint64_t)v498;
  unint64_t v522 = v519 | (v521 << 32);
  unint64_t v523 = v519 & (v521 << 32);
  unint64_t v524 = v519 + (v521 << 32);
  unint64_t v525 = v516 + HIDWORD(v521) + (v520 >> 63) + ((v522 & ~v524 | v523) >> 63);
  unint64_t v526 = v504 | v524;
  unint64_t v527 = v504 & v524;
  uint64_t v528 = v504 + v524;
  unint64_t v529 = v525 + ((v526 & ~v528 | v527) >> 63);
  unint64_t v530 = v529 | v508;
  unint64_t v531 = v529 & v508;
  uint64_t v532 = v529 + v508;
  unint64_t v533 = ((v530 & ~v532 | v531) >> 63) + (v509 >> 63);
  unint64_t v534 = v528 | v524;
  unint64_t v535 = v528 & v524;
  uint64_t v536 = v528 + v524;
  unint64_t v537 = v525 + ((v534 & ~v536 | v535) >> 63);
  unint64_t v538 = v537 | v532;
  unint64_t v539 = v537 & v532;
  uint64_t v540 = v537 + v532;
  unint64_t v541 = v533 + ((v538 & ~v540 | v539) >> 63);
  unint64_t v542 = HIDWORD(v511);
  LODWORD(v538) = v511;
  unint64_t v544 = a2[1];
  unint64_t v543 = a2[2];
  unint64_t v545 = HIDWORD(v543);
  LODWORD(v523) = v543;
  unint64_t v546 = v543 * (unint64_t)v511;
  unint64_t v547 = v543 * (unint64_t)v542;
  unint64_t v548 = HIDWORD(v547) + v545 * (unint64_t)v542;
  unint64_t v549 = v546 | (v547 << 32);
  unint64_t v550 = v546 & (v547 << 32);
  unint64_t v551 = (v547 << 32) + v523 * (unint64_t)v538;
  unint64_t v552 = v549 & ~v551 | v550;
  unint64_t v553 = v545 * (unint64_t)v538;
  unint64_t v554 = v551 | (v553 << 32);
  unint64_t v555 = v551 & (v553 << 32);
  unint64_t v556 = v551 + (v553 << 32);
  unint64_t v557 = v548 + HIDWORD(v553) + (v552 >> 63) + ((v554 & ~v556 | v555) >> 63);
  unint64_t v558 = v536 | v556;
  unint64_t v559 = v536 & v556;
  uint64_t v560 = v536 + v556;
  unint64_t v561 = v557 + ((v558 & ~v560 | v559) >> 63);
  unint64_t v562 = v561 | v540;
  unint64_t v563 = v561 & v540;
  uint64_t v564 = v561 + v540;
  unint64_t v565 = v541 + ((v562 & ~v564 | v563) >> 63);
  unint64_t v566 = v560 | v556;
  unint64_t v567 = v560 & v556;
  uint64_t v568 = v560 + v556;
  unint64_t v569 = v557 + ((v566 & ~v568 | v567) >> 63);
  unint64_t v570 = v569 | v564;
  unint64_t v571 = v569 & v564;
  uint64_t v572 = v569 + v564;
  unint64_t v573 = v565 + ((v570 & ~v572 | v571) >> 63);
  unint64_t v574 = a2[7];
  unint64_t v575 = HIDWORD(v574);
  LODWORD(v57ripemd160_block_data_order(c, b, 1) = v574;
  unint64_t v576 = HIDWORD(v544);
  LODWORD(v563) = v544;
  unint64_t v577 = v544 * (unint64_t)v574;
  unint64_t v578 = v544 * (unint64_t)v575;
  unint64_t v579 = HIDWORD(v578) + v576 * (unint64_t)v575;
  unint64_t v580 = v577 | (v578 << 32);
  unint64_t v581 = v577 & (v578 << 32);
  unint64_t v582 = (v578 << 32) + v563 * (unint64_t)v571;
  unint64_t v583 = v580 & ~v582 | v581;
  unint64_t v584 = v576 * (unint64_t)v571;
  unint64_t v585 = v582 | (v584 << 32);
  unint64_t v586 = v582 & (v584 << 32);
  unint64_t v587 = v582 + (v584 << 32);
  unint64_t v588 = v579 + HIDWORD(v584) + (v583 >> 63) + ((v585 & ~v587 | v586) >> 63);
  unint64_t v589 = v568 | v587;
  unint64_t v590 = v568 & v587;
  uint64_t v591 = v568 + v587;
  unint64_t v592 = v588 + ((v589 & ~v591 | v590) >> 63);
  unint64_t v593 = v592 | v572;
  unint64_t v594 = v592 & v572;
  uint64_t v595 = v592 + v572;
  unint64_t v596 = v573 + ((v593 & ~v595 | v594) >> 63);
  unint64_t v597 = v591 + v587;
  unint64_t v598 = v588 + (((v591 | v587) & ~(v591 + v587) | v591 & v587) >> 63);
  unint64_t v599 = v598 | v595;
  unint64_t v600 = v598 & v595;
  uint64_t v601 = v598 + v595;
  unint64_t v602 = v596 + ((v599 & ~v601 | v600) >> 63);
  result[8] = v597;
  unint64_t v604 = a2[6];
  unint64_t v603 = a2[7];
  unint64_t v605 = HIDWORD(v603);
  LODWORD(v593) = v603;
  unint64_t v606 = a2[2];
  unint64_t v607 = a2[3];
  unint64_t v608 = HIDWORD(v606);
  LODWORD(v555) = v606;
  unint64_t v609 = v606 * (unint64_t)v603;
  unint64_t v610 = v606 * (unint64_t)v605;
  unint64_t v611 = HIDWORD(v610) + v608 * (unint64_t)v605;
  unint64_t v612 = v609 | (v610 << 32);
  unint64_t v613 = v609 & (v610 << 32);
  unint64_t v614 = (v610 << 32) + v555 * (unint64_t)v593;
  unint64_t v615 = v612 & ~v614 | v613;
  unint64_t v616 = v608 * (unint64_t)v593;
  unint64_t v617 = v614 | (v616 << 32);
  unint64_t v618 = v614 & (v616 << 32);
  unint64_t v619 = v614 + (v616 << 32);
  unint64_t v620 = v611 + HIDWORD(v616) + (v615 >> 63) + ((v617 & ~v619 | v618) >> 63);
  unint64_t v621 = v601 | v619;
  unint64_t v622 = v601 & v619;
  uint64_t v623 = v601 + v619;
  unint64_t v624 = v620 + ((v621 & ~v623 | v622) >> 63);
  unint64_t v625 = v624 | v602;
  unint64_t v626 = v624 & v602;
  unint64_t v627 = v624 + v602;
  unint64_t v628 = v625 & ~v627 | v626;
  unint64_t v629 = v623 | v619;
  unint64_t v630 = v623 & v619;
  uint64_t v631 = v623 + v619;
  unint64_t v632 = v620 + ((v629 & ~v631 | v630) >> 63);
  unint64_t v633 = v632 | v627;
  unint64_t v634 = v632 & v627;
  uint64_t v635 = v632 + v627;
  unint64_t v636 = ((v633 & ~v635 | v634) >> 63) + (v628 >> 63);
  unint64_t v637 = HIDWORD(v604);
  LODWORD(v633) = v604;
  unint64_t v638 = HIDWORD(v607);
  LODWORD(v630) = v607;
  unint64_t v639 = v607 * (unint64_t)v604;
  unint64_t v640 = v607 * (unint64_t)v637;
  unint64_t v641 = HIDWORD(v640) + v638 * (unint64_t)v637;
  unint64_t v642 = v639 | (v640 << 32);
  unint64_t v643 = v639 & (v640 << 32);
  unint64_t v644 = (v640 << 32) + v630 * (unint64_t)v633;
  unint64_t v645 = v642 & ~v644 | v643;
  unint64_t v646 = v638 * (unint64_t)v633;
  unint64_t v647 = v644 | (v646 << 32);
  unint64_t v648 = v644 & (v646 << 32);
  unint64_t v649 = v644 + (v646 << 32);
  unint64_t v650 = v641 + HIDWORD(v646) + (v645 >> 63) + ((v647 & ~v649 | v648) >> 63);
  unint64_t v651 = v631 | v649;
  unint64_t v652 = v631 & v649;
  uint64_t v653 = v631 + v649;
  unint64_t v654 = v650 + ((v651 & ~v653 | v652) >> 63);
  unint64_t v655 = v654 | v635;
  unint64_t v656 = v654 & v635;
  uint64_t v657 = v654 + v635;
  unint64_t v658 = v636 + ((v655 & ~v657 | v656) >> 63);
  unint64_t v659 = v653 | v649;
  unint64_t v660 = v653 & v649;
  uint64_t v661 = v653 + v649;
  unint64_t v662 = v650 + ((v659 & ~v661 | v660) >> 63);
  unint64_t v663 = v662 | v657;
  unint64_t v664 = v662 & v657;
  uint64_t v665 = v662 + v657;
  unint64_t v666 = v658 + ((v663 & ~v665 | v664) >> 63);
  unint64_t v668 = a2[4];
  unint64_t v667 = a2[5];
  unint64_t v669 = HIDWORD(v667);
  LODWORD(v656) = v667;
  unint64_t v670 = HIDWORD(v668);
  LODWORD(v648) = v668;
  unint64_t v671 = v668 * (unint64_t)v667;
  unint64_t v672 = v668 * (unint64_t)v669;
  unint64_t v673 = HIDWORD(v672) + v670 * (unint64_t)v669;
  unint64_t v674 = v671 | (v672 << 32);
  unint64_t v675 = v671 & (v672 << 32);
  unint64_t v676 = (v672 << 32) + v648 * (unint64_t)v656;
  unint64_t v677 = v674 & ~v676 | v675;
  unint64_t v678 = v670 * (unint64_t)v656;
  unint64_t v679 = v676 | (v678 << 32);
  unint64_t v680 = v676 & (v678 << 32);
  unint64_t v681 = v676 + (v678 << 32);
  unint64_t v682 = v673 + HIDWORD(v678) + (v677 >> 63) + ((v679 & ~v681 | v680) >> 63);
  unint64_t v683 = v661 | v681;
  unint64_t v684 = v661 & v681;
  uint64_t v685 = v661 + v681;
  unint64_t v686 = v682 + ((v683 & ~v685 | v684) >> 63);
  unint64_t v687 = v686 | v665;
  unint64_t v688 = v686 & v665;
  uint64_t v689 = v686 + v665;
  unint64_t v690 = v666 + ((v687 & ~v689 | v688) >> 63);
  unint64_t v691 = v685 | v681;
  unint64_t v692 = v685 & v681;
  unint64_t v693 = v685 + v681;
  unint64_t v694 = v682 + ((v691 & ~v693 | v692) >> 63);
  unint64_t v695 = v694 | v689;
  unint64_t v696 = v694 & v689;
  uint64_t v697 = v694 + v689;
  unint64_t v698 = v690 + ((v695 & ~v697 | v696) >> 63);
  result[9] = v693;
  unint64_t v699 = a2[5];
  unint64_t v700 = a2[6];
  unint64_t v701 = HIDWORD(v699);
  unint64_t v702 = v699 * (unint64_t)HIDWORD(v699);
  unint64_t v703 = (v702 << 32) + v699 * (unint64_t)v699;
  unint64_t v704 = ((v699 * (unint64_t)v699) | (v702 << 32)) & ~v703 | (v699
                                                                                               * (unint64_t)v699) & (v702 << 32);
  unint64_t v705 = v703 | (v702 << 32);
  unint64_t v706 = v703 & (v702 << 32);
  unint64_t v707 = v703 + (v702 << 32);
  unint64_t v708 = ((v702 >> 31) & 0x1FFFFFFFELL)
       + v701 * (unint64_t)v701
       + (v704 >> 63)
       + ((v705 & ~v707 | v706) >> 63);
  unint64_t v709 = v697 | v707;
  unint64_t v710 = v697 & v707;
  uint64_t v711 = v697 + v707;
  unint64_t v712 = v708 + ((v709 & ~v711 | v710) >> 63);
  unint64_t v713 = v712 | v698;
  unint64_t v714 = v712 + v698;
  unint64_t v715 = v713 & ~v714;
  unint64_t v716 = HIDWORD(v700);
  LODWORD(v707) = v700;
  unint64_t v718 = a2[3];
  unint64_t v717 = a2[4];
  unint64_t v719 = HIDWORD(v717);
  LODWORD(v618) = v717;
  unint64_t v720 = v717 * (unint64_t)v700;
  unint64_t v721 = v717 * (unint64_t)v716;
  unint64_t v722 = HIDWORD(v721) + v719 * (unint64_t)v716;
  unint64_t v723 = v720 | (v721 << 32);
  unint64_t v724 = v720 & (v721 << 32);
  unint64_t v725 = (v721 << 32) + v618 * (unint64_t)v707;
  unint64_t v726 = v723 & ~v725 | v724;
  unint64_t v727 = v719 * (unint64_t)v707;
  unint64_t v728 = v725 | (v727 << 32);
  unint64_t v729 = v725 & (v727 << 32);
  unint64_t v730 = v725 + (v727 << 32);
  unint64_t v731 = v722 + HIDWORD(v727) + (v726 >> 63) + ((v728 & ~v730 | v729) >> 63);
  unint64_t v732 = v711 | v730;
  unint64_t v733 = v711 & v730;
  uint64_t v734 = v711 + v730;
  unint64_t v735 = v731 + ((v732 & ~v734 | v733) >> 63);
  unint64_t v736 = v735 | v714;
  unint64_t v737 = v735 & v714;
  unint64_t v738 = v735 + v714;
  unint64_t v739 = ((v736 & ~v738 | v737) >> 63) + (v715 >> 63);
  unint64_t v740 = v734 | v730;
  unint64_t v741 = v734 & v730;
  uint64_t v742 = v734 + v730;
  unint64_t v743 = v731 + ((v740 & ~v742 | v741) >> 63);
  unint64_t v744 = v743 | v738;
  unint64_t v745 = v743 & v738;
  uint64_t v746 = v743 + v738;
  unint64_t v747 = v739 + ((v744 & ~v746 | v745) >> 63);
  unint64_t v748 = a2[7];
  unint64_t v749 = HIDWORD(v748);
  LODWORD(v745) = v748;
  unint64_t v750 = HIDWORD(v718);
  LODWORD(v737) = v718;
  unint64_t v751 = v718 * (unint64_t)v748;
  unint64_t v752 = v718 * (unint64_t)v749;
  unint64_t v753 = HIDWORD(v752) + v750 * (unint64_t)v749;
  unint64_t v754 = v751 | (v752 << 32);
  unint64_t v755 = v751 & (v752 << 32);
  unint64_t v756 = (v752 << 32) + v737 * (unint64_t)v745;
  unint64_t v757 = v754 & ~v756 | v755;
  unint64_t v758 = v750 * (unint64_t)v745;
  unint64_t v759 = v756 | (v758 << 32);
  unint64_t v760 = v756 & (v758 << 32);
  unint64_t v761 = v756 + (v758 << 32);
  unint64_t v762 = v753 + HIDWORD(v758) + (v757 >> 63) + ((v759 & ~v761 | v760) >> 63);
  unint64_t v763 = v742 | v761;
  unint64_t v764 = v742 & v761;
  uint64_t v765 = v742 + v761;
  unint64_t v766 = v762 + ((v763 & ~v765 | v764) >> 63);
  unint64_t v767 = v766 | v746;
  unint64_t v768 = v766 & v746;
  uint64_t v769 = v766 + v746;
  unint64_t v770 = v747 + ((v767 & ~v769 | v768) >> 63);
  unint64_t v771 = v765 + v761;
  unint64_t v772 = v762 + (((v765 | v761) & ~(v765 + v761) | v765 & v761) >> 63);
  unint64_t v773 = v772 | v769;
  unint64_t v774 = v772 & v769;
  uint64_t v775 = v772 + v769;
  unint64_t v776 = v770 + ((v773 & ~v775 | v774) >> 63);
  result[10] = v771;
  unint64_t v778 = a2[6];
  unint64_t v777 = a2[7];
  unint64_t v779 = HIDWORD(v777);
  LODWORD(v767) = v777;
  unint64_t v780 = a2[4];
  unint64_t v781 = a2[5];
  unint64_t v782 = HIDWORD(v780);
  LODWORD(v729) = v780;
  unint64_t v783 = v780 * (unint64_t)v777;
  unint64_t v784 = v780 * (unint64_t)v779;
  unint64_t v785 = HIDWORD(v784) + v782 * (unint64_t)v779;
  unint64_t v786 = v783 | (v784 << 32);
  unint64_t v787 = v783 & (v784 << 32);
  unint64_t v788 = (v784 << 32) + v729 * (unint64_t)v767;
  unint64_t v789 = v786 & ~v788 | v787;
  unint64_t v790 = v782 * (unint64_t)v767;
  unint64_t v791 = v788 | (v790 << 32);
  unint64_t v792 = v788 & (v790 << 32);
  unint64_t v793 = v788 + (v790 << 32);
  unint64_t v794 = v785 + HIDWORD(v790) + (v789 >> 63) + ((v791 & ~v793 | v792) >> 63);
  uint64_t v795 = v775 + v793;
  unint64_t v796 = v794 + (((v775 | v793) & ~(v775 + v793) | v775 & v793) >> 63);
  unint64_t v797 = v796 | v776;
  unint64_t v798 = v796 + v776;
  unint64_t v799 = v797 & ~v798;
  unint64_t v800 = v795 | v793;
  unint64_t v801 = v795 & v793;
  uint64_t v802 = v795 + v793;
  unint64_t v803 = v794 + ((v800 & ~v802 | v801) >> 63);
  unint64_t v804 = v803 | v798;
  unint64_t v805 = v803 & v798;
  unint64_t v806 = v803 + v798;
  unint64_t v807 = v804 & ~v806 | v805;
  unint64_t v808 = HIDWORD(v778);
  LODWORD(v805) = v778;
  unint64_t v809 = HIDWORD(v781);
  LODWORD(v792) = v781;
  unint64_t v810 = v781 * (unint64_t)v778;
  unint64_t v811 = v781 * (unint64_t)v808;
  unint64_t v812 = HIDWORD(v811) + v809 * (unint64_t)v808;
  unint64_t v813 = (v811 << 32) + v792 * (unint64_t)v805;
  unint64_t v814 = (v810 | (v811 << 32)) & ~v813 | v810 & (v811 << 32);
  unint64_t v815 = v809 * (unint64_t)v805;
  unint64_t v816 = v813 | (v815 << 32);
  unint64_t v817 = v813 & (v815 << 32);
  unint64_t v818 = v813 + (v815 << 32);
  unint64_t v819 = v812 + HIDWORD(v815) + (v814 >> 63) + ((v816 & ~v818 | v817) >> 63);
  unint64_t v820 = v802 | v818;
  unint64_t v821 = v802 & v818;
  uint64_t v822 = v802 + v818;
  unint64_t v823 = v819 + ((v820 & ~v822 | v821) >> 63);
  unint64_t v824 = v823 | v806;
  result[11] = v822 + v818;
  uint64_t v825 = a2[5];
  unint64_t v826 = a2[6];
  unint64_t v827 = v823 & v806;
  unint64_t v828 = v823 + v806;
  unint64_t v829 = v824 & ~v828 | v827;
  unint64_t v830 = v819 + (((v822 | v818) & ~(v822 + v818) | v822 & v818) >> 63);
  unint64_t v831 = v830 | v828;
  unint64_t v832 = v830 & v828;
  uint64_t v833 = v830 + v828;
  unint64_t v834 = v831 & ~v833 | v832;
  unint64_t v835 = HIDWORD(v826);
  LODWORD(v832) = v826;
  unint64_t v836 = v826 * (unint64_t)v826;
  unint64_t v837 = v826 * (unint64_t)HIDWORD(v826);
  unint64_t v838 = (v837 << 32) + v832 * (unint64_t)v832;
  unint64_t v839 = (v836 | (v837 << 32)) & ~v838 | v836 & (v837 << 32);
  unint64_t v840 = v838 + (v837 << 32);
  unint64_t v841 = (v838 | (v837 << 32)) & ~v840 | v838 & (v837 << 32);
  unint64_t v842 = ((v837 >> 31) & 0x1FFFFFFFELL) + v835 * (unint64_t)v835;
  unint64_t v843 = v833 | v840;
  unint64_t v844 = v833 & v840;
  uint64_t v845 = v833 + v840;
  unint64_t v846 = (v807 >> 63) + (v799 >> 63) + (v829 >> 63) + (v834 >> 63);
  unint64_t v847 = v842 + (v839 >> 63) + (v841 >> 63) + ((v843 & ~v845 | v844) >> 63);
  uint64_t v848 = a2[7];
  unint64_t v849 = v847 | v846;
  unint64_t v850 = v847 + v846;
  unint64_t v851 = v849 & ~v850;
  LODWORD(v842) = v848;
  unint64_t v852 = v825 * (unint64_t)HIDWORD(v848);
  unint64_t v853 = HIDWORD(v852) + HIDWORD(v825) * (unint64_t)HIDWORD(v848);
  unint64_t v854 = (v852 << 32) + v825 * (unint64_t)v848;
  unint64_t v855 = ((v825 * (unint64_t)v848) | (v852 << 32)) & ~v854 | (v825
                                                                                               * (unint64_t)v848) & (v852 << 32);
  unint64_t v856 = HIDWORD(v825) * (unint64_t)v842;
  unint64_t v857 = v854 | (v856 << 32);
  unint64_t v858 = v854 & (v856 << 32);
  unint64_t v859 = v854 + (v856 << 32);
  unint64_t v860 = v853 + HIDWORD(v856) + (v855 >> 63) + ((v857 & ~v859 | v858) >> 63);
  unint64_t v861 = v845 | v859;
  unint64_t v862 = v845 & v859;
  uint64_t v863 = v845 + v859;
  unint64_t v864 = v860 + ((v861 & ~v863 | v862) >> 63);
  unint64_t v865 = v864 | v850;
  unint64_t v866 = v864 & v850;
  result[12] = v863 + v859;
  uint64_t v867 = a2[6];
  unint64_t v868 = a2[7];
  unint64_t v869 = v864 + v850;
  unint64_t v870 = (v865 & ~v869 | v866) >> 63;
  unint64_t v871 = v860 + (((v863 | v859) & ~(v863 + v859) | v863 & v859) >> 63);
  unint64_t v872 = v871 | v869;
  unint64_t v873 = v871 & v869;
  unint64_t v874 = v871 + v869;
  unint64_t v875 = v872 & ~v874 | v873;
  unint64_t v876 = HIDWORD(v868);
  LODWORD(v873) = v868;
  unint64_t v877 = v867 * (unint64_t)v868;
  unint64_t v878 = v867 * (unint64_t)HIDWORD(v868);
  unint64_t v879 = HIDWORD(v878) + HIDWORD(v867) * (unint64_t)v876;
  unint64_t v880 = (v878 << 32) + v867 * (unint64_t)v873;
  unint64_t v881 = (v877 | (v878 << 32)) & ~v880 | v877 & (v878 << 32);
  unint64_t v882 = HIDWORD(v867) * (unint64_t)v873;
  unint64_t v883 = v880 + (v882 << 32);
  unint64_t v884 = v870 + (v851 >> 63) + (v875 >> 63);
  unint64_t v885 = v879 + HIDWORD(v882) + (v881 >> 63) + (((v880 | (v882 << 32)) & ~v883 | v880 & (v882 << 32)) >> 63);
  unint64_t v886 = v874 | v883;
  unint64_t v887 = v874 & v883;
  unint64_t v888 = v874 + v883;
  unint64_t v889 = v885 + ((v886 & ~v888 | v887) >> 63);
  result[13] = v888 + v883;
  unint64_t v890 = a2[7];
  unint64_t v891 = v884 + v889;
  unint64_t v892 = v889 & ~v891;
  unint64_t v893 = v885 + (((v888 | v883) & ~(v888 + v883) | v888 & v883) >> 63);
  unint64_t v894 = v893 | v891;
  unint64_t v895 = v893 & v891;
  unint64_t v896 = v893 + v891;
  unint64_t v897 = v894 & ~v896 | v895;
  unint64_t v898 = HIDWORD(v890);
  unint64_t v899 = v890 * (unint64_t)HIDWORD(v890);
  unint64_t v900 = (v899 << 32) + v890 * (unint64_t)v890;
  unint64_t v901 = ((v890 * (unint64_t)v890) | (v899 << 32)) & ~v900 | (v890
                                                                                               * (unint64_t)v890) & (v899 << 32);
  unint64_t v902 = v900 + (v899 << 32);
  unint64_t v903 = (v900 | (v899 << 32)) & ~v902 | v900 & (v899 << 32);
  unint64_t v904 = ((v899 >> 31) & 0x1FFFFFFFELL) + v898 * (unint64_t)v898;
  unint64_t v905 = v896 | v902;
  unint64_t v906 = v896 & v902;
  unint64_t v907 = v896 + v902;
  result[14] = v907;
  result[15] = v904 + (v901 >> 63) + (v903 >> 63) + (v892 >> 63) + (v897 >> 63) + ((v905 & ~v907 | v906) >> 63);
  return result;
}

void bn_sqr_words(unint64_t *rp, const unint64_t *ap, int num)
{
  if (num < 0) {
    bn_sqr_words_cold_1();
  }
  if (num)
  {
    if (num < 4) {
      goto LABEL_6;
    }
    do
    {
      unint64_t v3 = HIDWORD(*ap);
      unsigned int v4 = *ap;
      unint64_t v5 = v4 * (unint64_t)v4;
      unint64_t v6 = v4 * (unint64_t)v3;
      unint64_t v7 = (v6 << 32) + v5;
      unint64_t v8 = (v5 | (v6 << 32)) & ~v7 | v5 & (v6 << 32);
      unint64_t v9 = v7 | (v6 << 32);
      unint64_t v10 = v7 & (v6 << 32);
      unint64_t v11 = v7 + (v6 << 32);
      *rp = v11;
      rp[1] = ((v6 >> 31) & 0x1FFFFFFFELL)
            + v3 * (unint64_t)v3
            + (v8 >> 63)
            + ((v9 & ~v11 | v10) >> 63);
      unint64_t v12 = ap[1];
      unint64_t v13 = HIDWORD(v12);
      unint64_t v14 = v12 * (unint64_t)HIDWORD(v12);
      unint64_t v15 = (v14 << 32) + v12 * (unint64_t)v12;
      unint64_t v16 = ((v12 * (unint64_t)v12) | (v14 << 32)) & ~v15 | (v12
                                                                                              * (unint64_t)v12) & (v14 << 32);
      unint64_t v17 = v15 | (v14 << 32);
      unint64_t v18 = v15 & (v14 << 32);
      unint64_t v19 = v15 + (v14 << 32);
      rp[2] = v19;
      rp[3] = ((v14 >> 31) & 0x1FFFFFFFELL)
            + v13 * (unint64_t)v13
            + (v16 >> 63)
            + ((v17 & ~v19 | v18) >> 63);
      unint64_t v20 = ap[2];
      unint64_t v21 = HIDWORD(v20);
      unint64_t v22 = v20 * (unint64_t)HIDWORD(v20);
      unint64_t v23 = (v22 << 32) + v20 * (unint64_t)v20;
      unint64_t v24 = ((v20 * (unint64_t)v20) | (v22 << 32)) & ~v23 | (v20
                                                                                              * (unint64_t)v20) & (v22 << 32);
      unint64_t v25 = v23 | (v22 << 32);
      unint64_t v26 = v23 & (v22 << 32);
      unint64_t v27 = v23 + (v22 << 32);
      rp[4] = v27;
      rp[5] = ((v22 >> 31) & 0x1FFFFFFFELL)
            + v21 * (unint64_t)v21
            + (v24 >> 63)
            + ((v25 & ~v27 | v26) >> 63);
      unint64_t v28 = ap[3];
      unint64_t v29 = HIDWORD(v28);
      unint64_t v30 = v28 * (unint64_t)HIDWORD(v28);
      unint64_t v31 = (v30 << 32) + v28 * (unint64_t)v28;
      unint64_t v32 = ((v28 * (unint64_t)v28) | (v30 << 32)) & ~v31 | (v28
                                                                                              * (unint64_t)v28) & (v30 << 32);
      unint64_t v33 = v31 | (v30 << 32);
      unint64_t v34 = v31 & (v30 << 32);
      unint64_t v35 = v31 + (v30 << 32);
      rp[6] = v35;
      rp[7] = ((v30 >> 31) & 0x1FFFFFFFELL)
            + v29 * (unint64_t)v29
            + (v32 >> 63)
            + ((v33 & ~v35 | v34) >> 63);
      ap += 4;
      rp += 8;
      num -= 4;
    }
    while (num >= 4);
    if (num)
    {
LABEL_6:
      unint64_t v36 = rp + 1;
      do
      {
        uint64_t v37 = *ap++;
        unint64_t v38 = v37 * (unint64_t)v37;
        unint64_t v39 = v37 * (unint64_t)HIDWORD(v37);
        unint64_t v40 = (v39 << 32) + v38;
        unint64_t v41 = (v38 | (v39 << 32)) & ~v40 | v38 & (v39 << 32);
        unint64_t v42 = v40 | (v39 << 32);
        unint64_t v43 = v40 & (v39 << 32);
        unint64_t v44 = v40 + (v39 << 32);
        *(v36 - ripemd160_block_data_order(c, b, 1) = v44;
        *unint64_t v36 = ((v39 >> 31) & 0x1FFFFFFFELL)
             + HIDWORD(v37) * (unint64_t)HIDWORD(v37)
             + (v41 >> 63)
             + ((v42 & ~v44 | v43) >> 63);
        v36 += 2;
        --num;
      }
      while (num);
    }
  }
}

unint64_t bn_sqr_normal(unint64_t *rp, uint64_t a2, int a3, unint64_t *a4)
{
  int v8 = 2 * a3;
  rp[2 * a3 - 1] = 0;
  *rp = 0;
  if (a3 >= 2)
  {
    rp[(a3 - 1) + 1] = bn_mul_words(rp + 1, (const unint64_t *)(a2 + 8), a3 - 1, *(void *)a2);
    int v9 = a3 - 2;
    if (a3 != 2)
    {
      unint64_t v10 = rp + 3;
      unint64_t v11 = &rp[a3 + 1];
      unint64_t v12 = (const unint64_t *)(a2 + 16);
      do
      {
        *v11++ = bn_mul_add_words(v10, v12, v9, *(v12 - 1));
        v10 += 2;
        ++v12;
        BOOL v13 = v9-- != 0;
      }
      while (v9 != 0 && v13);
    }
  }
  bn_add_words(rp, rp, rp, v8);
  bn_sqr_words(a4, (const unint64_t *)a2, a3);
  return bn_add_words(rp, rp, a4, v8);
}

uint64_t bn_sqr(unint64_t **a1, uint64_t a2, size_t a3, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  int v8 = BN_CTX_get(ctx);
  if (v8 && (p_d = &v8->d, bn_wexpand((uint64_t)v8, a3)))
  {
    bn_sqr_normal(*a1, *(void *)a2, *(_DWORD *)(a2 + 8), *p_d);
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  BN_CTX_end(ctx);
  return v10;
}

int BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
{
  BN_CTX_start(ctx);
  if (BN_is_zero((uint64_t)a))
  {
    BN_zero((uint64_t)r);
  }
  else
  {
    unint64_t v7 = r;
    if (r == a) {
      unint64_t v7 = BN_CTX_get(ctx);
    }
    if (v7)
    {
      int top = a->top;
      size_t v9 = (2 * top);
      if ((int)v9 >= top)
      {
        if (bn_wexpand((uint64_t)v7, (2 * top)))
        {
          int v10 = a->top;
          if (v10 == 8)
          {
            bn_sqr_comba8(v7->d, a->d);
          }
          else if (v10 == 4)
          {
            bn_sqr_comba4(v7->d, a->d);
          }
          else if (!bn_sqr(&v7->d, (uint64_t)a, v9, ctx))
          {
            goto LABEL_3;
          }
          v7->int top = v9;
          bn_correct_top((uint64_t *)v7);
          v7->neg = 0;
          bn_copy(r, v7);
        }
      }
    }
  }
LABEL_3:
  BN_CTX_end(ctx);
  return 1;
}

void bn_sqr_words_cold_1()
{
  __assert_rtn("bn_sqr_words", "bn_sqr.c", 170, "n >= 0");
}

void ENGINE_unregister_ECDSA(ENGINE *e)
{
}

int ENGINE_register_ECDSA(ENGINE *e)
{
  if (*((void *)e + 6)) {
    return engine_table_register(&ecdsa_table, (uint64_t)engine_unregister_all_ECDSA, (char *)e, dummy_nid_5, 1, 0);
  }
  else {
    return 1;
  }
}

void engine_unregister_all_ECDSA()
{
}

void ENGINE_register_all_ECDSA(void)
{
  first = ENGINE_get_first();
  if (first)
  {
    next = first;
    do
    {
      if (*((void *)next + 6)) {
        engine_table_register(&ecdsa_table, (uint64_t)engine_unregister_all_ECDSA, (char *)next, dummy_nid_5, 1, 0);
      }
      next = ENGINE_get_next(next);
    }
    while (next);
  }
}

int ENGINE_set_default_ECDSA(ENGINE *e)
{
  if (*((void *)e + 6)) {
    return engine_table_register(&ecdsa_table, (uint64_t)engine_unregister_all_ECDSA, (char *)e, dummy_nid_5, 1, 1);
  }
  else {
    return 1;
  }
}

ENGINE *ENGINE_get_default_ECDSA(void)
{
  return (ENGINE *)engine_table_select(&ecdsa_table, 1);
}

const ECDSA_METHOD *__cdecl ENGINE_get_ECDSA(const ENGINE *e)
{
  return (const ECDSA_METHOD *)*((void *)e + 6);
}

int ENGINE_set_ECDSA(ENGINE *e, const ECDSA_METHOD *ecdsa_meth)
{
  *((void *)e + 6) = ecdsa_meth;
  return 1;
}

ASN1_OCTET_STRING *ASN1_OCTET_STRING_new(void)
{
  return (ASN1_OCTET_STRING *)ASN1_item_new(&ASN1_OCTET_STRING_it);
}

void ASN1_OCTET_STRING_free(ASN1_OCTET_STRING *a)
{
}

int i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &ASN1_OCTET_STRING_it);
}

ASN1_OCTET_STRING *__cdecl d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING **a, const unsigned __int8 **in, uint64_t len)
{
  return (ASN1_OCTET_STRING *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &ASN1_OCTET_STRING_it);
}

uint64_t pkey_dsa_init(uint64_t a1)
{
  uint64_t result = (uint64_t)malloc_type_malloc(0x20uLL, 0x106004034A26F38uLL);
  if (result)
  {
    *(void *)uint64_t result = 0xA000000400;
    *(void *)(result + 8) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(a1 + 40) = result;
    *(void *)(a1 + 64) = result + 16;
    *(_DWORD *)(a1 + 72) = 2;
    return 1;
  }
  return result;
}

uint64_t pkey_dsa_copy(uint64_t a1, uint64_t a2)
{
  uint64_t result = pkey_dsa_init(a1);
  if (result)
  {
    unint64_t v5 = *(void **)(a2 + 40);
    unint64_t v6 = *(void **)(a1 + 40);
    void *v6 = *v5;
    v6[1] = v5[1];
    v6[3] = v5[3];
    return 1;
  }
  return result;
}

void pkey_dsa_cleanup(uint64_t a1)
{
}

BOOL pkey_dsa_paramgen(uint64_t a1, EVP_PKEY *a2)
{
  unint64_t v3 = *(const EVP_MD ***)(a1 + 40);
  memset(v9, 0, sizeof(v9));
  if (*(void *)(a1 + 56))
  {
    unsigned int v4 = (BN_GENCB *)v9;
    evp_pkey_set_cb_translate((uint64_t)v9, a1);
  }
  else
  {
    unsigned int v4 = 0;
  }
  unint64_t v5 = (BIGNUM **)DSA_new();
  if (!v5) {
    return 0;
  }
  unint64_t v6 = (char *)v5;
  BOOL v7 = dsa_builtin_paramgen(v5, *(int *)v3, *((int *)v3 + 1), v3[1], 0, 0, 0, 0, 0, v4);
  if (v7) {
    EVP_PKEY_assign(a2, 116, v6);
  }
  else {
    DSA_free((DSA *)v6);
  }
  return v7;
}

uint64_t pkey_dsa_keygen(uint64_t a1, EVP_PKEY *a2)
{
  if (!*(void *)(a1 + 16))
  {
    ERR_put_error(10, 4095, 107, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_pmeth.c", 319);
    return 0;
  }
  unsigned int v4 = (char *)DSA_new();
  if (!v4) {
    return 0;
  }
  EVP_PKEY_assign(a2, 116, v4);
  if (!EVP_PKEY_copy_parameters(a2, *(const EVP_PKEY **)(a1 + 16))) {
    return 0;
  }
  attributeunsigned int s = (DSA *)a2->attributes;
  return DSA_generate_key(attributes);
}

uint64_t pkey_dsa_sign(uint64_t a1, unsigned __int8 *sig, void *a3, unsigned __int8 *dgst, unint64_t dlen)
{
  unint64_t v5 = *(DSA **)(*(void *)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  *a3 = 0;
  if (dlen >> 31) {
    return 0;
  }
  int v7 = dlen;
  unint64_t v11 = *(const EVP_MD **)(v6 + 24);
  if (v11)
  {
    if (EVP_MD_size(v11) != dlen) {
      return 0;
    }
  }
  sigint len = 0;
  uint64_t result = DSA_sign(0, dgst, v7, sig, &siglen, v5);
  if (result)
  {
    *a3 = siglen;
    return 1;
  }
  return result;
}

uint64_t pkey_dsa_verify(uint64_t a1, unsigned __int8 *sigbuf, unint64_t siglen, unsigned __int8 *dgst, uint64_t dgst_len)
{
  if ((dgst_len | siglen) >> 31) {
    return 0;
  }
  int v5 = dgst_len;
  int v7 = siglen;
  size_t v9 = *(DSA **)(*(void *)(a1 + 16) + 32);
  int v10 = *(const EVP_MD **)(*(void *)(a1 + 40) + 24);
  if (v10)
  {
    if (EVP_MD_size(v10) != dgst_len) {
      return 0;
    }
  }
  return DSA_verify(0, dgst, v5, sigbuf, v7, v9);
}

uint64_t pkey_dsa_ctrl(uint64_t a1, int a2, int a3, EVP_MD *md)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2 <= 4096)
  {
    uint64_t result = 1;
    switch(a2)
    {
      case 1:
        int v7 = EVP_MD_type(md);
        if ((v7 - 672) < 4
          || (v7 - 1031) < 4
          || (v7 - 64) <= 0x34 && ((1 << (v7 - 64)) & 0x10000000000005) != 0)
        {
          goto LABEL_19;
        }
        int v8 = 221;
        goto LABEL_26;
      case 2:
        ERR_put_error(10, 4095, 150, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_pmeth.c", 237);
        return 4294967294;
      case 5:
      case 7:
      case 11:
        return result;
      case 13:
        *(void *)&md->type = *(void *)(v5 + 24);
        return result;
      default:
        return 4294967294;
    }
  }
  if (a2 == 4099)
  {
    int v9 = EVP_MD_type(md);
    if (v9 == 64 || v9 == 672 || v9 == 675)
    {
LABEL_19:
      *(void *)(v5 + 24) = md;
      return 1;
    }
    int v8 = 199;
LABEL_26:
    ERR_put_error(10, 4095, 106, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/dsa/dsa_pmeth.c", v8);
    return 0;
  }
  else
  {
    if (a2 != 4098)
    {
      if (a2 != 4097 || a3 < 256) {
        return 4294967294;
      }
      *(_DWORD *)uint64_t v5 = a3;
      return 1;
    }
    HIDWORD(v1ripemd160_block_data_order(c, b, 1) = a3;
    LODWORD(v1ripemd160_block_data_order(c, b, 1) = a3;
    unsigned int v10 = v11 >> 5;
    uint64_t result = 4294967294;
    if (v10 <= 8 && ((1 << v10) & 0x1A1) != 0)
    {
      *(_DWORD *)(v5 + 4) = a3;
      return 1;
    }
  }
  return result;
}

uint64_t pkey_dsa_ctrl_str(uint64_t *a1, char *__s1, const char *a3)
{
  __endptr = 0;
  if (!strcmp(__s1, "dsa_paramgen_bits"))
  {
    *__error() = 0;
    uint64_t v7 = strtol(a3, &__endptr, 10);
    if (*a3)
    {
      if (!*__endptr)
      {
        uint64_t v8 = v7;
        __error();
        if (v8 == (int)v8)
        {
          uint64_t v6 = a1;
          goto LABEL_14;
        }
      }
    }
    return 4294967294;
  }
  if (!strcmp(__s1, "dsa_paramgen_q_bits"))
  {
    *__error() = 0;
    uint64_t v9 = strtol(a3, &__endptr, 10);
    if (*a3)
    {
      if (!*__endptr)
      {
        uint64_t v10 = v9;
        __error();
        if (v10 == (int)v10)
        {
          uint64_t v6 = a1;
          goto LABEL_14;
        }
      }
    }
    return 4294967294;
  }
  if (strcmp(__s1, "dsa_paramgen_md")) {
    return 4294967294;
  }
  EVP_get_digestbyname(a3);
  uint64_t v6 = a1;
LABEL_14:
  return EVP_PKEY_CTX_ctrl(v6, 116, 2);
}

uint64_t check_id(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 56);
  unint64_t v3 = *(X509 **)(a1 + 16);
  if (*(void *)v2)
  {
    int v4 = sk_num(*(const STACK **)v2);
    free(*(void **)(v2 + 16));
    *(void *)(v2 + 16) = 0;
    if (v4 < 1)
    {
LABEL_6:
      if (v4)
      {
        *(void *)(a1 + 184) = *(void *)(a1 + 16);
        *(void *)(a1 + 172) = 0x3E00000000;
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
        if (!result) {
          return result;
        }
      }
    }
    else
    {
      int v5 = 0;
      while (1)
      {
        uint64_t v6 = sk_value(*(const STACK **)v2, v5);
        size_t v7 = strlen(v6);
        if ((int)X509_check_host(v3, v6, v7, *(_DWORD *)(v2 + 8), (char **)(v2 + 16)) > 0) {
          break;
        }
        if (v4 == ++v5) {
          goto LABEL_6;
        }
      }
    }
  }
  uint64_t v9 = *(char **)(v2 + 24);
  if (!v9
    || (int)X509_check_email(v3, v9, *(void *)(v2 + 32), 0) > 0
    || (*(void *)(a1 + 184) = *(void *)(a1 + 16),
        *(void *)(a1 + 172) = 0x3F00000000,
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1),
        result))
  {
    uint64_t v10 = *(unsigned char **)(v2 + 40);
    if (!v10) {
      return 1;
    }
    if ((int)X509_check_ip(v3, v10, *(void *)(v2 + 48), 0) > 0) {
      return 1;
    }
    *(void *)(a1 + 184) = *(void *)(a1 + 16);
    *(void *)(a1 + 172) = 0x4000000000;
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
    if (result) {
      return 1;
    }
  }
  return result;
}

int X509_verify_cert(X509_STORE_CTX *ctx)
{
  cert = ctx->cert;
  if (!cert)
  {
    int v3 = 105;
    int v4 = 599;
    goto LABEL_17;
  }
  if (*(void *)&ctx->explicit_policy)
  {
    int v3 = 66;
    int v4 = 608;
LABEL_17:
    ERR_put_error(11, 4095, v3, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_vfy.c", v4);
    LODWORD(ctx->current_cert) = 65;
    return -1;
  }
  if (*(_DWORD *)(*((void *)ctx->other_ctx + 7) + 56))
  {
    int v3 = 66;
    int v4 = 617;
    goto LABEL_17;
  }
  if (LODWORD(ctx->current_cert) != 65)
  {
    int v3 = 66;
    int v4 = 625;
    goto LABEL_17;
  }
  if (check_key_level((uint64_t)ctx, (uint64_t)cert)) {
    goto LABEL_12;
  }
  int v5 = ctx->cert;
  *(&ctx->error + ripemd160_block_data_order(c, b, 1) = 0;
  if (!v5) {
    int v5 = (X509 *)sk_value(*(const STACK **)&ctx->explicit_policy, 0);
  }
  ctx->current_issuer = v5;
  LODWORD(ctx->current_cert) = 67;
  int result = ((uint64_t (*)(void, X509_STORE_CTX *))ctx->verify_cb)(0, ctx);
  if (result)
  {
LABEL_12:
    if ((*((unsigned char *)ctx->other_ctx + 26) & 0x50) != 0)
    {
      return X509_verify_cert_legacy((uint64_t)ctx);
    }
    else
    {
      size_t v7 = (void **)x509_verify_ctx_new_from_xsc((uint64_t)ctx);
      if (v7)
      {
        uint64_t v8 = (uint64_t)v7;
        LODWORD(ctx->current_cert) = 0;
        int v9 = x509_verify(v7, 0, 0);
        x509_verify_ctx_free(v8);
        if (v9 >= 1) {
          return *(void *)&ctx->explicit_policy != 0;
        }
      }
      else
      {
        x509_verify_ctx_free(0);
      }
      return 0;
    }
  }
  return result;
}

uint64_t check_key_level(uint64_t a1, uint64_t a2)
{
  int v3 = X509_get0_pubkey(a2);
  if (!v3) {
    return 0;
  }
  int v4 = EVP_PKEY_security_bits((uint64_t)v3);
  if (v4 < 1) {
    return 0;
  }
  int v5 = *(_DWORD *)(*(void *)(a1 + 48) + 44);
  return enough_bits_for_security_level(v4, v5);
}

uint64_t X509_verify_cert_legacy(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  uint64_t v2 = (int *)(a1 + 176);
  p = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  int v4 = *(uint64_t (**)(void, uint64_t))(a1 + 64);
  int v5 = sk_new_null();
  *((void *)v2 - 2) = v5;
  if (!v5 || !sk_push(v5, *(char **)(a1 + 16)))
  {
    ERR_put_error(11, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_vfy.c", 255);
    int v9 = 0;
    int v10 = 0;
    uint64_t v11 = 0;
    size_t v7 = 0;
LABEL_9:
    int v12 = 17;
LABEL_10:
    int *v2 = v12;
    goto LABEL_11;
  }
  X509_up_ref(*(void *)(a1 + 16));
  *(_DWORD *)(a1 + 156) = 1;
  uint64_t v6 = *(STACK **)(a1 + 24);
  if (v6)
  {
    size_t v7 = sk_dup(v6);
    if (!v7)
    {
      int v8 = 265;
LABEL_6:
      ERR_put_error(11, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_vfy.c", v8);
      int v9 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    size_t v7 = 0;
  }
  int v17 = sk_num(*(const STACK **)(a1 + 160));
  unint64_t v18 = sk_value(*(const STACK **)(a1 + 160), v17 - 1);
  int v19 = *(_DWORD *)(v3 + 40);
  int v43 = v19;
  if (v19 >= v17)
  {
    unint64_t v21 = v18;
    int v20 = v19 + 1;
    while (1)
    {
      X509_check_purpose((X509 *)v21, -1, 0);
      if ((v21[57] & 0x20) != 0)
      {
LABEL_46:
        unint64_t v41 = v4;
        uint64_t v11 = 0;
        goto LABEL_50;
      }
      if ((*(unsigned char *)(*(void *)(a1 + 48) + 25) & 0x80) != 0)
      {
        uint64_t v22 = (*(uint64_t (**)(char **, uint64_t, char *))(a1 + 72))(&p, a1, v21);
        uint64_t v11 = v22;
        if ((v22 & 0x80000000) != 0) {
          goto LABEL_48;
        }
        if (v22) {
          break;
        }
      }
      if (!*(void *)(a1 + 24)) {
        goto LABEL_46;
      }
      issuer = find_issuer(a1, v7, (uint64_t)v21, 0);
      p = issuer;
      if (!issuer)
      {
        if ((*(unsigned char *)(*(void *)(a1 + 48) + 25) & 0x80) != 0) {
          goto LABEL_46;
        }
        uint64_t v24 = (*(uint64_t (**)(char **, uint64_t, char *))(a1 + 72))(&p, a1, v21);
        uint64_t v11 = v24;
        if ((v24 & 0x80000000) != 0)
        {
LABEL_48:
          int v9 = 0;
          int v10 = 0;
          int v12 = 66;
          goto LABEL_10;
        }
        if (v24) {
          break;
        }
        issuer = find_issuer(a1, v7, (uint64_t)v21, 1);
        p = issuer;
        if (!issuer) {
          goto LABEL_46;
        }
      }
      if (!sk_push(*(STACK **)(a1 + 160), issuer))
      {
        int v8 = 327;
        goto LABEL_6;
      }
      X509_up_ref((uint64_t)p);
      sk_delete_ptr(v7, p);
      ++*(_DWORD *)(a1 + 156);
      unint64_t v21 = p;
      if (v20 == ++v17)
      {
        unint64_t v41 = v4;
        uint64_t v11 = 0;
        int v17 = v20;
        goto LABEL_50;
      }
    }
    unint64_t v41 = v4;
    X509_free((X509 *)p);
  }
  else
  {
    unint64_t v41 = v4;
    uint64_t v11 = 0;
    int v20 = v19 + 1;
  }
LABEL_50:
  int v9 = 0;
  int v42 = 0;
  int v40 = v20;
  int v44 = v20 - 1;
  int v25 = v17;
LABEL_51:
  int v26 = sk_num(*(const STACK **)(a1 + 160));
  int v27 = v26 - 1;
  unint64_t v28 = sk_value(*(const STACK **)(a1 + 160), v26 - 1);
  X509_check_purpose((X509 *)v28, -1, 0);
  if ((v28[57] & 0x20) != 0)
  {
    if (v26 != 1)
    {
      int v9 = sk_pop(*(STACK **)(a1 + 160));
      --*(_DWORD *)(a1 + 156);
      int v30 = v25 - 1;
      unint64_t v28 = sk_value(*(const STACK **)(a1 + 160), v17 - 2);
      --v17;
      goto LABEL_63;
    }
    uint64_t v29 = (*(uint64_t (**)(char **, uint64_t, char *))(a1 + 72))(&p, a1, v28);
    if ((int)v29 <= 0)
    {
      *(void *)(a1 + 184) = v28;
      *(_DWORD *)(a1 + 172) = v27;
      *(_DWORD *)(a1 + 176) = 18;
LABEL_59:
      uint64_t v11 = v41(0, a1);
      int v10 = 1;
      if (!v11) {
        goto LABEL_11;
      }
      int v42 = 1;
      goto LABEL_62;
    }
    uint64_t v11 = v29;
    if (X509_cmp((const X509 *)v28, (const X509 *)p))
    {
      *(void *)(a1 + 184) = v28;
      *(_DWORD *)(a1 + 172) = v27;
      *(_DWORD *)(a1 + 176) = 18;
      if (v11 == 1) {
        X509_free((X509 *)p);
      }
      goto LABEL_59;
    }
    X509_free((X509 *)v28);
    unint64_t v28 = p;
    sk_set(*(STACK **)(a1 + 160), 0, p);
    *(_DWORD *)(a1 + 156) = 0;
  }
LABEL_62:
  int v30 = v25;
LABEL_63:
  if (v43 >= v17)
  {
    X509_check_purpose((X509 *)v28, -1, 0);
    while (1)
    {
      if ((v28[57] & 0x20) != 0) {
        goto LABEL_64;
      }
      uint64_t v36 = (*(uint64_t (**)(char **, uint64_t, char *))(a1 + 72))(&p, a1, v28);
      uint64_t v11 = v36;
      if ((v36 & 0x80000000) != 0) {
        break;
      }
      if (!v36) {
        goto LABEL_64;
      }
      unint64_t v28 = p;
      if (!sk_push(*(STACK **)(a1 + 160), p))
      {
        X509_free((X509 *)p);
        ERR_put_error(11, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_vfy.c", 425);
        uint64_t v11 = 0;
        int v39 = 17;
        goto LABEL_101;
      }
      if (v44 == v17)
      {
        int v17 = v40;
        goto LABEL_64;
      }
      X509_check_purpose((X509 *)v28, -1, 0);
      ++v17;
    }
    int v39 = 66;
LABEL_101:
    int *v2 = v39;
    goto LABEL_107;
  }
LABEL_64:
  int v31 = check_trust(a1);
  if (v31 == 1)
  {
    int v10 = v42;
    goto LABEL_98;
  }
  if (v31 != 2)
  {
    if ((*(_DWORD *)(*(void *)(a1 + 48) + 24) & 0x108000) == 0 && v30 >= 2)
    {
      while (1)
      {
        unint64_t v33 = sk_value(*(const STACK **)(a1 + 160), v30 - 2);
        uint64_t v34 = (*(uint64_t (**)(char **, uint64_t, char *))(a1 + 72))(&p, a1, v33);
        uint64_t v11 = v34;
        if ((v34 & 0x80000000) != 0) {
          goto LABEL_107;
        }
        int v25 = v30 - 1;
        if (v34)
        {
          X509_free((X509 *)p);
          if (v17 >= v30)
          {
            int v37 = v17 + 1;
            do
            {
              p = sk_pop(*(STACK **)(a1 + 160));
              X509_free((X509 *)p);
              --v37;
            }
            while (v37 > v30);
            int v17 = v30 - 1;
          }
          *(_DWORD *)(a1 + 156) = sk_num(*(const STACK **)(a1 + 160));
          goto LABEL_51;
        }
        unsigned int v35 = v30--;
        if (v35 < 3)
        {
          uint64_t v11 = 0;
          break;
        }
      }
    }
    int v10 = v42;
    if (v42) {
      goto LABEL_98;
    }
    if (v9 && (*(unsigned int (**)(uint64_t, char *, char *))(a1 + 80))(a1, v28, v9))
    {
      if (!sk_push(*(STACK **)(a1 + 160), v9))
      {
        ERR_put_error(11, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_vfy.c", 496);
LABEL_7:
        int v10 = 0;
        uint64_t v11 = 0;
        goto LABEL_9;
      }
      *(_DWORD *)(a1 + 156) = ++v17;
      *(void *)(a1 + 184) = v9;
      *(_DWORD *)(a1 + 176) = 19;
      int v9 = 0;
    }
    else
    {
      int v38 = *(_DWORD *)(a1 + 156) >= v17 ? 20 : 2;
      *(_DWORD *)(a1 + 176) = v38;
      *(void *)(a1 + 184) = v28;
    }
    *(_DWORD *)(a1 + 172) = v17 - 1;
    uint64_t v11 = v41(0, a1);
    int v10 = 1;
    if (v11)
    {
LABEL_98:
      char v13 = 0;
      goto LABEL_12;
    }
LABEL_11:
    char v13 = 1;
    goto LABEL_12;
  }
  uint64_t v11 = 0;
LABEL_107:
  char v13 = 1;
  int v10 = v42;
LABEL_12:
  sk_free(v7);
  X509_free((X509 *)v9);
  if (v13) {
    goto LABEL_13;
  }
  if (x509_vfy_check_chain_extensions(a1))
  {
    if (x509_vfy_check_security_level(a1))
    {
      if (x509_constraints_chain(*(const STACK **)(a1 + 160), v2, (int *)(a1 + 172))
        || (*(void *)(a1 + 184) = sk_value(*(const STACK **)(a1 + 160), *(_DWORD *)(a1 + 172)),
            (*(unsigned int (**)(void, uint64_t))(a1 + 64))(0, a1)))
      {
        if (X509v3_asid_validate_path(a1)
          && X509v3_addr_validate_path(a1)
          && check_id(a1)
          && (*(unsigned int (**)(uint64_t))(a1 + 88))(a1))
        {
          unint64_t v14 = *(uint64_t (**)(uint64_t))(a1 + 56);
          if (v14) {
            uint64_t v15 = v14(a1);
          }
          else {
            uint64_t v15 = x509_vfy_internal_verify(a1, 0);
          }
          uint64_t v11 = v15;
          if (v15 && !v10) {
            uint64_t v11 = (*(uint64_t (**)(uint64_t))(a1 + 120))(a1);
          }
LABEL_13:
          if ((int)v11 > 0) {
            return v11;
          }
          goto LABEL_26;
        }
      }
    }
  }
  uint64_t v11 = 0;
LABEL_26:
  if (!*v2) {
    int *v2 = 1;
  }
  return v11;
}

uint64_t x509_vfy_check_chain_extensions(uint64_t a1)
{
  if (*(void *)(a1 + 216)) {
    int v2 = 6;
  }
  else {
    int v2 = *(_DWORD *)(*(void *)(a1 + 48) + 32);
  }
  if (*(int *)(a1 + 156) >= 1)
  {
    unsigned int v3 = 0;
    LODWORD(v4) = 0;
    int v5 = 0;
    uint64_t v6 = *(unsigned int (**)(void, uint64_t))(a1 + 64);
    char v7 = 1;
    while (1)
    {
      int v8 = sk_value(*(const STACK **)(a1 + 160), v5);
      int v9 = v8;
      if ((*(unsigned char *)(*(void *)(a1 + 48) + 24) & 0x10) == 0 && (v8[57] & 2) != 0)
      {
        *(_DWORD *)(a1 + 172) = v5;
        *(_DWORD *)(a1 + 176) = 34;
        *(void *)(a1 + 184) = v8;
        if (!v6(0, a1)) {
          return 0;
        }
      }
      int v10 = X509_check_ca((X509 *)v9);
      if (v7)
      {
        uint64_t v11 = *(void *)(a1 + 48);
        if ((*(unsigned char *)(v11 + 24) & 0x20) == 0) {
          goto LABEL_22;
        }
        if (v10 == 1 || v10 == 0) {
          goto LABEL_22;
        }
      }
      else if (v10)
      {
        uint64_t v11 = *(void *)(a1 + 48);
        if ((*(unsigned char *)(v11 + 24) & 0x20) == 0 || v10 == 1) {
          goto LABEL_22;
        }
      }
      *(_DWORD *)(a1 + 172) = v5;
      *(_DWORD *)(a1 + 176) = 24;
      *(void *)(a1 + 184) = v9;
      if (!v6(0, a1)) {
        return 0;
      }
      uint64_t v11 = *(void *)(a1 + 48);
LABEL_22:
      if (*(int *)(v11 + 32) >= 1)
      {
        int v13 = X509_check_purpose((X509 *)v9, v2, v4);
        if (!v13 || v13 != 1 && (*(void *)(*(void *)(a1 + 48) + 24) & 0x20) != 0)
        {
          *(_DWORD *)(a1 + 172) = v5;
          *(_DWORD *)(a1 + 176) = 26;
          *(void *)(a1 + 184) = v9;
          if (!v6(0, a1)) {
            return 0;
          }
        }
      }
      if (v5 >= 2 && (v9[56] & 0x20) == 0)
      {
        uint64_t v14 = *((void *)v9 + 6);
        if (v14 != -1 && v14 + 1 < v3)
        {
          *(_DWORD *)(a1 + 172) = v5;
          *(_DWORD *)(a1 + 176) = 25;
          *(void *)(a1 + 184) = v9;
          if (!v6(0, a1)) {
            return 0;
          }
        }
      }
      char v7 = 0;
      if ((v9[56] & 0x20) == 0) {
        ++v3;
      }
      ++v5;
      uint64_t v4 = 1;
      if (v5 >= *(_DWORD *)(a1 + 156)) {
        return v4;
      }
    }
  }
  return 1;
}

char *x509_vfy_lookup_cert_match(void *a1, X509 *a2)
{
  if (a1[16] && *a1 && *(void *)*a1) {
    return lookup_cert_match((uint64_t)a1, a2);
  }
  else {
    return 0;
  }
}

char *lookup_cert_match(uint64_t a1, X509 *a)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, X509_NAME *))(a1 + 128);
  subject_name = X509_get_subject_name(a);
  uint64_t v6 = (const STACK *)v4(a1, subject_name);
  if (!v6) {
    return 0;
  }
  char v7 = (STACK *)v6;
  unint64_t v8 = 0;
  if (sk_num(v6))
  {
    do
    {
      int v9 = sk_value(v7, v8);
      if (!X509_cmp((const X509 *)v9, a)) {
        break;
      }
      ++v8;
    }
    while (v8 < sk_num(v7));
  }
  else
  {
    int v9 = 0;
  }
  if (v8 >= sk_num(v7)) {
    int v9 = 0;
  }
  else {
    X509_up_ref((uint64_t)v9);
  }
  sk_pop_free(v7, (void (__cdecl *)(void *))X509_free);
  return v9;
}

uint64_t check_trust(uint64_t a1)
{
  int v2 = *(unsigned int (**)(void, uint64_t))(a1 + 64);
  unint64_t v3 = *(int *)(a1 + 156);
  if (v3 < sk_num(*(const STACK **)(a1 + 160)))
  {
    do
    {
      uint64_t v4 = sk_value(*(const STACK **)(a1 + 160), v3);
      uint64_t v5 = X509_check_trust((X509 *)v4, *(_DWORD *)(*(void *)(a1 + 48) + 36), 0);
      uint64_t v6 = v5;
      if (v5 == 2)
      {
        *(void *)(a1 + 184) = v4;
        *(_DWORD *)(a1 + 172) = v3;
        *(_DWORD *)(a1 + 176) = 28;
        if (!v2(0, a1)) {
          return v6;
        }
      }
      else if (v5 == 1)
      {
        return v6;
      }
      ++v3;
    }
    while (v3 < sk_num(*(const STACK **)(a1 + 160)));
  }
  if ((*(unsigned char *)(*(void *)(a1 + 48) + 26) & 8) == 0) {
    return 3;
  }
  int v7 = *(_DWORD *)(a1 + 156);
  if (v7 < sk_num(*(const STACK **)(a1 + 160))) {
    return 1;
  }
  unint64_t v8 = sk_value(*(const STACK **)(a1 + 160), 0);
  int v9 = lookup_cert_match(a1, (X509 *)v8);
  if (v9)
  {
    sk_set(*(STACK **)(a1 + 160), 0, v9);
    X509_free((X509 *)v8);
    *(_DWORD *)(a1 + 156) = 0;
    return 1;
  }
  return 3;
}

uint64_t check_revocation(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 24);
  if ((v1 & 4) == 0) {
    return 1;
  }
  if ((v1 & 8) == 0)
  {
    if (!*(void *)(a1 + 216))
    {
      int v3 = 0;
      goto LABEL_6;
    }
    return 1;
  }
  int v4 = sk_num(*(const STACK **)(a1 + 160));
  int v3 = v4 - 1;
  if (v4 < 1) {
    return 1;
  }
LABEL_6:
  int v5 = 0;
  while (2)
  {
    uint64_t v6 = *(const STACK **)(a1 + 160);
    a = 0;
    *(_DWORD *)(a1 + 172) = v5;
    int v7 = sk_value(v6, v5);
    int v8 = 0;
    *(void *)(a1 + 184) = v7;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 208) = 0;
    while (1)
    {
      int v9 = *(unsigned int (**)(uint64_t, X509_CRL **, char *))(a1 + 96);
      if (!v9)
      {
        int v26 = 0;
        int v25 = 0;
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        issuer_name = X509_get_issuer_name((X509 *)v7);
        int v24 = *(_DWORD *)(a1 + 212);
        if (!get_crl_sk(a1, &v23, &v22, &v26, &v25, &v24, *(STACK **)(a1 + 40)))
        {
          int v12 = (STACK *)(*(uint64_t (**)(uint64_t, X509_NAME *))(a1 + 136))(a1, issuer_name);
          int v13 = v23;
          if (v12) {
            BOOL v14 = 1;
          }
          else {
            BOOL v14 = v23 == 0;
          }
          if (!v14)
          {
LABEL_19:
            *(void *)(a1 + 192) = v26;
            int v16 = v24;
            *(_DWORD *)(a1 + 208) = v25;
            *(_DWORD *)(a1 + 212) = v16;
            a = v13;
            int v10 = v22;
            goto LABEL_21;
          }
          uint64_t v15 = v12;
          get_crl_sk(a1, &v23, &v22, &v26, &v25, &v24, v12);
          sk_pop_free(v15, (void (__cdecl *)(void *))X509_CRL_free);
        }
        int v13 = v23;
        if (!v23)
        {
          int v10 = 0;
          goto LABEL_32;
        }
        goto LABEL_19;
      }
      int v10 = 0;
      if (!v9(a1, &a, v7)) {
        goto LABEL_32;
      }
LABEL_21:
      *(void *)(a1 + 200) = a;
      if (!(*(unsigned int (**)(uint64_t))(a1 + 104))(a1)) {
        goto LABEL_30;
      }
      if (!v10) {
        goto LABEL_26;
      }
      if (!(*(unsigned int (**)(uint64_t, X509_CRL *))(a1 + 104))(a1, v10))
      {
LABEL_30:
        int v18 = 0;
        goto LABEL_33;
      }
      int v17 = (*(uint64_t (**)(uint64_t, X509_CRL *, char *))(a1 + 112))(a1, v10, v7);
      int v18 = v17;
      if (v17 != 2)
      {
        if (!v17) {
          goto LABEL_33;
        }
LABEL_26:
        int v18 = (*(uint64_t (**)(uint64_t, X509_CRL *, char *))(a1 + 112))(a1, a, v7);
        if (!v18) {
          goto LABEL_33;
        }
      }
      *(void *)(a1 + 200) = 0;
      X509_CRL_free(a);
      X509_CRL_free(v10);
      a = 0;
      int v19 = *(_DWORD *)(a1 + 212);
      if (v8 == v19) {
        break;
      }
      int v8 = *(_DWORD *)(a1 + 212);
      if (v19 == 32895)
      {
        int v10 = 0;
        goto LABEL_33;
      }
    }
    int v10 = 0;
LABEL_32:
    *(_DWORD *)(a1 + 176) = 3;
    int v18 = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
LABEL_33:
    *(void *)(a1 + 200) = 0;
    X509_CRL_free(a);
    X509_CRL_free(v10);
    if (v18)
    {
      BOOL v14 = v5++ == v3;
      if (v14) {
        return 1;
      }
      continue;
    }
    return 0;
  }
}

uint64_t x509_vfy_check_policy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(void *)&policy_oids.uint64_t num = 0;
  if (*(void *)(a1 + 216)) {
    return 1;
  }
  int v7 = X509_policy_check(*(X509_POLICY_TREE ***)(a1 + 160), *(int **)(*(void *)(a1 + 48) + 48), *(STACK **)(*(void *)(a1 + 48) + 24), &policy_oids, a5);
  if (v7)
  {
    *(void *)(a1 + 184) = *(void *)&policy_oids.num;
    *(_DWORD *)(a1 + 176) = v7;
    if (v7 == 17) {
      return 0;
    }
    else {
      return (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
    }
  }
  else
  {
    if ((*(unsigned char *)(*(void *)(a1 + 48) + 25) & 8) == 0) {
      return 1;
    }
    *(void *)(a1 + 184) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 64))(2, a1);
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t x509_check_cert_time(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v6 + 24);
  if ((v7 & 2) != 0)
  {
    time_t v8 = *(void *)(v6 + 8);
  }
  else
  {
    if ((v7 & 0x200000) != 0) {
      return 1;
    }
    time_t v8 = time(0);
  }
  if (*(unsigned char *)(a2 + 57))
  {
    time_t v10 = *(void *)(a2 + 208);
    BOOL v11 = v8 == -1 || v10 == -1;
  }
  else
  {
    int v9 = (int *)X509_getm_notBefore(a2);
    time_t v10 = x509_verify_asn1_time_to_time_t(v9, 0);
    BOOL v11 = v10 == -1;
  }
  int v12 = v11;
  if (v10 > v8) {
    char v13 = 1;
  }
  else {
    char v13 = v12;
  }
  if (a3 < 0 && (v13 & 1) != 0) {
    return 0;
  }
  if (v12)
  {
    *(void *)(a1 + 184) = a2;
    int v15 = 13;
  }
  else
  {
    if (v10 <= v8) {
      goto LABEL_24;
    }
    *(void *)(a1 + 184) = a2;
    int v15 = 9;
  }
  *(_DWORD *)(a1 + 172) = a3;
  *(_DWORD *)(a1 + 176) = v15;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
  if (!result) {
    return result;
  }
LABEL_24:
  if (*(unsigned char *)(a2 + 57))
  {
    time_t v17 = *(void *)(a2 + 216);
    BOOL v18 = v8 == -1 || v17 == -1;
  }
  else
  {
    int v16 = (int *)X509_getm_notAfter(a2);
    time_t v17 = x509_verify_asn1_time_to_time_t(v16, 1);
    BOOL v18 = v17 == -1;
  }
  int v19 = v18;
  if (v17 > v8) {
    int v20 = 1;
  }
  else {
    int v20 = -1;
  }
  if (v19) {
    int v20 = 0;
  }
  if ((a3 & 0x80000000) == 0 || (uint64_t result = 0, v20 >= 1))
  {
    if (v19)
    {
      *(void *)(a1 + 184) = a2;
      int v21 = 14;
      goto LABEL_43;
    }
    if (v20 < 0)
    {
      *(void *)(a1 + 184) = a2;
      int v21 = 10;
LABEL_43:
      *(_DWORD *)(a1 + 172) = a3;
      *(_DWORD *)(a1 + 176) = v21;
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
      if (!result) {
        return result;
      }
    }
    return 1;
  }
  return result;
}

int X509_cmp_time(ASN1_TIME *s, time_t *t)
{
  return X509_cmp_time_internal(&s->length, t, 0);
}

uint64_t X509_cmp_time_internal(int *a1, time_t *a2, int a3)
{
  if (a2) {
    time_t v5 = *a2;
  }
  else {
    time_t v5 = time(0);
  }
  time_t v6 = x509_verify_asn1_time_to_time_t(a1, a3);
  if (v6 > v5) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = -1;
  }
  if (v6 == -1) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t x509_vfy_callback_indicate_completion(uint64_t a1)
{
  return x509_vfy_internal_verify(a1, 1);
}

uint64_t x509_vfy_internal_verify(uint64_t a1, int a2)
{
  int v4 = sk_num(*(const STACK **)(a1 + 160));
  int v5 = v4 - 1;
  time_t v6 = sk_value(*(const STACK **)(a1 + 160), v4 - 1);
  if ((*(unsigned int (**)(uint64_t, char *, char *))(a1 + 80))(a1, v6, v6))
  {
    unsigned int v7 = (X509 *)v6;
    while ((v5 & 0x80000000) == 0)
    {
      if (!a2)
      {
        if (v6 != (char *)v7 || (*(unsigned char *)(*(void *)(a1 + 48) + 25) & 0x40) != 0)
        {
          pubkey = X509_get_pubkey(v7);
          if (pubkey)
          {
            if (X509_verify((X509 *)v6, pubkey) <= 0)
            {
              *(_DWORD *)(a1 + 172) = v5;
              BOOL v11 = v6;
              if (!v6) {
                BOOL v11 = sk_value(*(const STACK **)(a1 + 160), v5);
              }
              *(void *)(a1 + 184) = v11;
              *(_DWORD *)(a1 + 176) = 7;
              if (!(*(unsigned int (**)(void, uint64_t))(a1 + 64))(0, a1))
              {
                EVP_PKEY_free(pubkey);
                return 0;
              }
            }
          }
          else
          {
            if (v6 == (char *)v7) {
              int v12 = v5;
            }
            else {
              int v12 = v5 + 1;
            }
            *(_DWORD *)(a1 + 172) = v12;
            char v13 = (char *)v7;
            if (!v7) {
              char v13 = sk_value(*(const STACK **)(a1 + 160), v12);
            }
            *(void *)(a1 + 184) = v13;
            *(_DWORD *)(a1 + 176) = 6;
            uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
            if (!result) {
              return result;
            }
          }
          EVP_PKEY_free(pubkey);
        }
        else
        {
          time_t v6 = (char *)v7;
        }
LABEL_32:
        uint64_t result = x509_check_cert_time(a1, (uint64_t)v6, v5);
        if (!result) {
          return result;
        }
      }
LABEL_33:
      *(void *)(a1 + 184) = v6;
      *(void *)(a1 + 192) = v7;
      *(_DWORD *)(a1 + 172) = v5;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 64))(1, a1);
      if (!result) {
        return result;
      }
      if (v5-- > 0)
      {
LABEL_13:
        unsigned int v7 = (X509 *)v6;
        time_t v6 = sk_value(*(const STACK **)(a1 + 160), v5);
      }
    }
    return 1;
  }
  else
  {
    if ((*(unsigned char *)(*(void *)(a1 + 48) + 26) & 8) != 0)
    {
      unsigned int v7 = (X509 *)v6;
      if (a2) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    if (v4 > 1)
    {
      int v5 = v4 - 2;
      *(_DWORD *)(a1 + 172) = v4 - 2;
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 172) = 0;
    if (!v6) {
      time_t v6 = sk_value(*(const STACK **)(a1 + 160), 0);
    }
    *(void *)(a1 + 184) = v6;
    *(_DWORD *)(a1 + 176) = 21;
    time_t v8 = *(uint64_t (**)(void, uint64_t))(a1 + 64);
    return v8(0, a1);
  }
}

int X509_cmp_current_time(ASN1_TIME *s)
{
  time_t v2 = time(0);
  time_t v3 = x509_verify_asn1_time_to_time_t(&s->length, 0);
  if (v3 > v2) {
    int v4 = 1;
  }
  else {
    int v4 = -1;
  }
  if (v3 == -1) {
    return 0;
  }
  else {
    return v4;
  }
}

ASN1_TIME *__cdecl X509_gmtime_adj(ASN1_TIME *s, uint64_t adj)
{
  time_t v4 = time(0);
  return ASN1_TIME_adj(s, v4, 0, adj);
}

ASN1_TIME *__cdecl X509_time_adj(ASN1_TIME *s, uint64_t adj, time_t *t)
{
  return X509_time_adj_ex(s, 0, adj, t);
}

ASN1_TIME *X509_time_adj_ex(ASN1_TIME *a1, int a2, uint64_t a3, time_t *a4)
{
  if (a4) {
    time_t v7 = *a4;
  }
  else {
    time_t v7 = time(0);
  }
  return ASN1_TIME_adj(a1, v7, a2, a3);
}

int X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK *chain)
{
  if (pkey && !EVP_PKEY_missing_parameters(pkey))
  {
LABEL_15:
    LODWORD(v1ripemd160_block_data_order(c, b, 1) = 1;
    return (int)v11;
  }
  if (sk_num(chain) < 1)
  {
LABEL_8:
    int v8 = 107;
    int v9 = 2049;
LABEL_17:
    ERR_put_error(11, 4095, v8, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_vfy.c", v9);
    LODWORD(v1ripemd160_block_data_order(c, b, 1) = 0;
  }
  else
  {
    int v4 = 0;
    while (1)
    {
      int v5 = sk_value(chain, v4);
      time_t v6 = X509_get0_pubkey((uint64_t)v5);
      if (!v6)
      {
        int v8 = 108;
        int v9 = 2040;
        goto LABEL_17;
      }
      time_t v7 = v6;
      if (!EVP_PKEY_missing_parameters(v6)) {
        break;
      }
      if (++v4 >= sk_num(chain)) {
        goto LABEL_8;
      }
    }
    while (1)
    {
      BOOL v12 = __OFSUB__(v4--, 1);
      if (v4 < 0 != v12) {
        break;
      }
      time_t v10 = sk_value(chain, v4);
      BOOL v11 = X509_get0_pubkey((uint64_t)v10);
      if (v11)
      {
        LODWORD(v1ripemd160_block_data_order(c, b, 1) = EVP_PKEY_copy_parameters(v11, v7);
        if (v11) {
          continue;
        }
      }
      return (int)v11;
    }
    if (!pkey) {
      goto LABEL_15;
    }
    LODWORD(v1ripemd160_block_data_order(c, b, 1) = EVP_PKEY_copy_parameters(pkey, v7);
    if (v11) {
      goto LABEL_15;
    }
  }
  return (int)v11;
}

int X509_STORE_CTX_get_ex_new_index(uint64_t argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
{
  return CRYPTO_get_ex_new_index(5, argl, argp, new_func, dup_func, free_func);
}

int X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx, void *data)
{
  return CRYPTO_set_ex_data((CRYPTO_EX_DATA *)&ctx[1].current_method, idx, data);
}

void *__cdecl X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx)
{
  return CRYPTO_get_ex_data((const CRYPTO_EX_DATA *)&ctx[1].current_method, idx);
}

int X509_STORE_CTX_get_error(X509_STORE_CTX *ctx)
{
  return (int)ctx->current_cert;
}

void X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s)
{
  LODWORD(ctx->current_cert) = s;
}

int X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx)
{
  return *(&ctx->error + 1);
}

uint64_t X509_STORE_CTX_set_error_depth(uint64_t result, int a2)
{
  *(_DWORD *)(result + 172) = a2;
  return result;
}

X509 *__cdecl X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx)
{
  return ctx->current_issuer;
}

uint64_t X509_STORE_CTX_set_current_cert(uint64_t result, uint64_t a2)
{
  *(void *)(result + 184) = a2;
  return result;
}

STACK *__cdecl X509_STORE_CTX_get_chain(X509_STORE_CTX *ctx)
{
  return *(STACK **)&ctx->explicit_policy;
}

uint64_t X509_STORE_CTX_get0_chain(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

STACK *__cdecl X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx)
{
  uint64_t v1 = *(STACK **)&ctx->explicit_policy;
  if (!v1) {
    return 0;
  }
  time_t v2 = sk_dup(v1);
  time_t v3 = v2;
  if (v2 && sk_num(v2) >= 1)
  {
    int v4 = 0;
    do
    {
      int v5 = sk_value(v3, v4);
      CRYPTO_add_lock((int *)v5 + 7, 1, 3, 0, 0);
      ++v4;
    }
    while (v4 < sk_num(v3));
  }
  return v3;
}

uint64_t X509_STORE_CTX_get0_current_issuer(uint64_t a1)
{
  return *(void *)(a1 + 192);
}

uint64_t X509_STORE_CTX_get0_current_crl(uint64_t a1)
{
  return *(void *)(a1 + 200);
}

uint64_t X509_STORE_CTX_get0_parent_ctx(uint64_t a1)
{
  return *(void *)(a1 + 216);
}

uint64_t X509_STORE_CTX_get0_store(uint64_t a1)
{
  return *(void *)a1;
}

void X509_STORE_CTX_set_cert(X509_STORE_CTX *c, X509 *x)
{
  c->cert = x;
}

void X509_STORE_CTX_set_chain(X509_STORE_CTX *c, STACK *sk)
{
  c->untrusted = sk;
}

void X509_STORE_CTX_set0_crls(X509_STORE_CTX *c, STACK *sk)
{
  c->param = (X509_VERIFY_PARAM *)sk;
}

int X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose)
{
  return X509_STORE_CTX_purpose_inherit(ctx, 0, purpose, 0);
}

int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose, int purpose, int trust)
{
  if (purpose) {
    int v6 = purpose;
  }
  else {
    int v6 = def_purpose;
  }
  if (!v6)
  {
LABEL_13:
    if (!trust)
    {
      char v13 = 1;
      if (!v6) {
        goto LABEL_20;
      }
LABEL_19:
      other_ctx = ctx->other_ctx;
      if (!other_ctx[8])
      {
        other_ctx[8] = v6;
        if ((v13 & 1) == 0)
        {
LABEL_21:
          int v15 = ctx->other_ctx;
          if (!v15[9]) {
            v15[9] = trust;
          }
        }
        return 1;
      }
LABEL_20:
      if ((v13 & 1) == 0) {
        goto LABEL_21;
      }
      return 1;
    }
    goto LABEL_14;
  }
  int v8 = X509_PURPOSE_get_by_id(v6);
  if (v8 == -1)
  {
    int v10 = 121;
    int v11 = 2253;
    goto LABEL_26;
  }
  int v9 = X509_PURPOSE_get0(v8);
  if (v9->trust == -1)
  {
    int v12 = X509_PURPOSE_get_by_id(def_purpose);
    if (v12 == -1)
    {
      int v10 = 121;
      int v11 = 2260;
      goto LABEL_26;
    }
    int v9 = X509_PURPOSE_get0(v12);
    if (trust) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (!trust)
  {
LABEL_12:
    trust = v9->trust;
    goto LABEL_13;
  }
LABEL_14:
  if (X509_TRUST_get_by_id(trust) != -1)
  {
    char v13 = 0;
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  int v10 = 120;
  int v11 = 2272;
LABEL_26:
  ERR_put_error(11, 4095, v10, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_vfy.c", v11);
  return 0;
}

int X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust)
{
  return X509_STORE_CTX_purpose_inherit(ctx, 0, 0, trust);
}

X509_STORE_CTX *X509_STORE_CTX_new(void)
{
  v0 = (X509_STORE_CTX *)malloc_type_calloc(1uLL, 0xE8uLL, 0x10A0040B2C3A4BFuLL);
  if (!v0) {
    ERR_put_error(11, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_vfy.c", 2292);
  }
  return v0;
}

void X509_STORE_CTX_free(X509_STORE_CTX *ctx)
{
  if (ctx)
  {
    X509_STORE_CTX_cleanup(ctx);
    free(ctx);
  }
}

void X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx)
{
  chain = ctx->chain;
  if (chain) {
    ((void (*)(X509_STORE_CTX *))chain)(ctx);
  }
  other_ctx = (X509_VERIFY_PARAM *)ctx->other_ctx;
  if (other_ctx)
  {
    if (!ctx[1].ctx) {
      X509_VERIFY_PARAM_free(other_ctx);
    }
    ctx->other_ctx = 0;
  }
  int v4 = *(STACK **)&ctx->explicit_policy;
  if (v4)
  {
    sk_pop_free(v4, (void (__cdecl *)(void *))X509_free);
    *(void *)&ctx->explicit_policy = 0;
  }
  CRYPTO_free_ex_data(5, ctx, (CRYPTO_EX_DATA *)&ctx[1].current_method);
  *(void *)&ctx[1].current_method = 0;
}

int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509, STACK *chain)
{
  *(_OWORD *)&ctx->ctx = 0u;
  *(_OWORD *)&ctx->cert = 0u;
  *(void *)&ctx[1].current_method = 0;
  *(_OWORD *)&ctx->current_crl = 0u;
  *(_OWORD *)&ctx->ex_data.dummy = 0u;
  *(_OWORD *)&ctx->explicit_policy = 0u;
  *(_OWORD *)&ctx->current_cert = 0u;
  *(_OWORD *)&ctx->cleanup = 0u;
  *(_OWORD *)&ctx->chain = 0u;
  *(_OWORD *)&ctx->get_crl = 0u;
  *(_OWORD *)&ctx->cert_crl = 0u;
  *(_OWORD *)&ctx->verify_cb = 0u;
  *(_OWORD *)&ctx->check_issued = 0u;
  *(_OWORD *)&ctx->crlunsigned int s = 0u;
  *(_OWORD *)&ctx->other_ctx = 0u;
  LODWORD(ctx->current_cert) = 65;
  ctx->ctx = store;
  ctx->cert = x509;
  ctx->untrusted = chain;
  if (store)
  {
    param = store->param;
    if (!param) {
      param = (X509_VERIFY_PARAM *)internal_verify;
    }
    ctx->verify = (int (__cdecl *)(X509_STORE_CTX *))param;
    verify = store->verify;
    if (!verify) {
      verify = (int (__cdecl *)(X509_STORE_CTX *))null_callback;
    }
    ctx->verify_cb = (int (__cdecl *)(int, X509_STORE_CTX *))verify;
    verify_cb = (int (__cdecl *)(X509 **, X509_STORE_CTX *, X509 *))store->verify_cb;
    if (!verify_cb) {
      verify_cb = X509_STORE_CTX_get1_issuer;
    }
    ctx->get_issuer = verify_cb;
    get_issuer = (int (__cdecl *)(X509_STORE_CTX *, X509 *, X509 *))store->get_issuer;
    if (!get_issuer) {
      get_issuer = (int (__cdecl *)(X509_STORE_CTX *, X509 *, X509 *))::check_issued;
    }
    ctx->check_issued = get_issuer;
    check_issued = (int (__cdecl *)(X509_STORE_CTX *))store->check_issued;
    if (!check_issued) {
      check_issued = (int (__cdecl *)(X509_STORE_CTX *))check_revocation;
    }
    ctx->check_revocation = check_issued;
    ctx->get_crl = (int (__cdecl *)(X509_STORE_CTX *, X509_CRL **, X509 *))store->check_revocation;
    get_crl = (int (__cdecl *)(X509_STORE_CTX *, X509_CRL *))store->get_crl;
    if (!get_crl) {
      get_crl = (int (__cdecl *)(X509_STORE_CTX *, X509_CRL *))::check_crl;
    }
    ctx->check_crl = get_crl;
    check_crl = (int (__cdecl *)(X509_STORE_CTX *, X509_CRL *, X509 *))store->check_crl;
    if (!check_crl) {
      check_crl = (int (__cdecl *)(X509_STORE_CTX *, X509_CRL *, X509 *))::cert_crl;
    }
    ctx->cert_crl = check_crl;
    ctx->check_policy = (int (__cdecl *)(X509_STORE_CTX *))check_policy;
    cert_crl = (int (__cdecl *)(X509_STORE_CTX *))store->cert_crl;
    if (!cert_crl) {
      cert_crl = (int (__cdecl *)(X509_STORE_CTX *))X509_STORE_CTX_get1_certs;
    }
    ctx->cleanup = cert_crl;
    cleanup = store->cleanup;
    if (!cleanup) {
      cleanup = X509_STORE_CTX_get1_crls;
    }
    *(void *)&ctx->valid = cleanup;
    sk = store->ex_data.sk;
    if (sk)
    {
      ctx->chain = sk;
      int v16 = X509_VERIFY_PARAM_new();
      ctx->other_ctx = v16;
      p_other_ctx = &ctx->other_ctx;
      if (v16)
      {
        BOOL v18 = v16;
        goto LABEL_26;
      }
LABEL_28:
      int v20 = 2402;
      goto LABEL_35;
    }
  }
  else
  {
    ctx->verify = (int (__cdecl *)(X509_STORE_CTX *))internal_verify;
    ctx->verify_cb = (int (__cdecl *)(int, X509_STORE_CTX *))null_callback;
    ctx->get_issuer = X509_STORE_CTX_get1_issuer;
    ctx->check_issued = (int (__cdecl *)(X509_STORE_CTX *, X509 *, X509 *))::check_issued;
    ctx->check_revocation = (int (__cdecl *)(X509_STORE_CTX *))check_revocation;
    ctx->get_crl = 0;
    ctx->check_crl = (int (__cdecl *)(X509_STORE_CTX *, X509_CRL *))::check_crl;
    ctx->cert_crl = (int (__cdecl *)(X509_STORE_CTX *, X509_CRL *, X509 *))::cert_crl;
    ctx->check_policy = (int (__cdecl *)(X509_STORE_CTX *))check_policy;
    ctx->cleanup = (int (__cdecl *)(X509_STORE_CTX *))X509_STORE_CTX_get1_certs;
    *(void *)&ctx->valid = X509_STORE_CTX_get1_crls;
  }
  ctx->chain = 0;
  int v19 = X509_VERIFY_PARAM_new();
  ctx->other_ctx = v19;
  p_other_ctx = &ctx->other_ctx;
  if (!v19) {
    goto LABEL_28;
  }
  BOOL v18 = v19;
  if (!store)
  {
    v19->inh_flags |= 0x11uLL;
    goto LABEL_30;
  }
LABEL_26:
  if (!X509_VERIFY_PARAM_inherit(v18, (const X509_VERIFY_PARAM *)store->get_cert_methods))
  {
LABEL_33:
    int v20 = 2419;
    goto LABEL_35;
  }
  BOOL v18 = (X509_VERIFY_PARAM *)*p_other_ctx;
LABEL_30:
  int v21 = X509_VERIFY_PARAM_lookup("default");
  if (!X509_VERIFY_PARAM_inherit(v18, v21)) {
    goto LABEL_33;
  }
  if (CRYPTO_new_ex_data(5, ctx, (CRYPTO_EX_DATA *)&ctx[1].current_method)) {
    return 1;
  }
  int v20 = 2425;
LABEL_35:
  ERR_put_error(11, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_vfy.c", v20);
  return 0;
}

uint64_t internal_verify(uint64_t a1)
{
  return x509_vfy_internal_verify(a1, 0);
}

BOOL check_issued(int a1, X509 *a2, X509 *issuer)
{
  return X509_check_issued(issuer, a2) == 0;
}

uint64_t check_crl(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 172);
  int v5 = sk_num(*(const STACK **)(a1 + 160));
  int v6 = *(char **)(a1 + 192);
  if (!v6)
  {
    int v7 = v5 - 1;
    int v8 = *(const STACK **)(a1 + 160);
    if (v4 >= v7)
    {
      int v6 = sk_value(v8, v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, char *, char *))(a1 + 80))(a1, v6, v6);
      if (!v9)
      {
        *(_DWORD *)(a1 + 176) = 33;
        if (!(*(unsigned int (**)(uint64_t, uint64_t))(a1 + 64))(v9, a1)) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      int v6 = sk_value(v8, v4 + 1);
    }
    if (!v6) {
      goto LABEL_29;
    }
  }
  if (*(void *)(a2 + 64)) {
    goto LABEL_8;
  }
  if ((v6[56] & 2) != 0 && (v6[64] & 2) == 0)
  {
    *(_DWORD *)(a1 + 176) = 35;
    if (!(*(unsigned int (**)(void, uint64_t))(a1 + 64))(0, a1)) {
      goto LABEL_34;
    }
  }
  int v12 = *(_DWORD *)(a1 + 208);
  if ((v12 & 0x80) == 0)
  {
    *(_DWORD *)(a1 + 176) = 44;
    if (!(*(unsigned int (**)(void, uint64_t))(a1 + 64))(0, a1)) {
      goto LABEL_34;
    }
    int v12 = *(_DWORD *)(a1 + 208);
  }
  if ((v12 & 8) == 0)
  {
    if (!*(void *)(a1 + 216))
    {
      char v13 = *(X509 **)(a1 + 192);
      uint64_t v37 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      *(_OWORD *)param = 0u;
      memset(v24, 0, sizeof(v24));
      if (!X509_STORE_CTX_init((X509_STORE_CTX *)v24, *(X509_STORE **)a1, v13, *(STACK **)(a1 + 24))) {
        goto LABEL_30;
      }
      BOOL v14 = *(X509_VERIFY_PARAM **)(a1 + 48);
      *((void *)&v25 + ripemd160_block_data_order(c, b, 1) = *(void *)(a1 + 40);
      if (param[0]) {
        X509_VERIFY_PARAM_free(param[0]);
      }
      *((void *)&v36 + ripemd160_block_data_order(c, b, 1) = a1;
      uint64_t v15 = *(void *)(a1 + 64);
      param[0] = v14;
      *(void *)&long long v27 = v15;
      if (X509_verify_cert((X509_STORE_CTX *)v24) > 0)
      {
        int v16 = *(const STACK **)(a1 + 160);
        time_t v17 = (const STACK *)v33;
        int v18 = sk_num(v16);
        int v19 = sk_value(v16, v18 - 1);
        int v20 = sk_num(v17);
        int v21 = sk_value(v17, v20 - 1);
        LODWORD(v19) = X509_cmp((const X509 *)v19, (const X509 *)v21);
        X509_STORE_CTX_cleanup((X509_STORE_CTX *)v24);
        if (!v19) {
          goto LABEL_32;
        }
      }
      else
      {
LABEL_30:
        X509_STORE_CTX_cleanup((X509_STORE_CTX *)v24);
      }
    }
    *(_DWORD *)(a1 + 176) = 54;
    if (!(*(unsigned int (**)(void, uint64_t))(a1 + 64))(0, a1))
    {
LABEL_34:
      int v6 = 0;
      goto LABEL_35;
    }
  }
LABEL_32:
  if ((*(unsigned char *)(a2 + 48) & 2) != 0)
  {
    *(_DWORD *)(a1 + 176) = 41;
    if (!(*(unsigned int (**)(void, uint64_t))(a1 + 64))(0, a1)) {
      goto LABEL_34;
    }
  }
LABEL_8:
  if ((*(unsigned char *)(a1 + 208) & 0x40) == 0 && !check_crl_time(a1, a2, 1)) {
    goto LABEL_34;
  }
  pubkey = X509_get_pubkey((X509 *)v6);
  int v6 = (char *)pubkey;
  if (!pubkey)
  {
    *(_DWORD *)(a1 + 176) = 6;
    int v11 = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
LABEL_28:
    if (v11) {
      goto LABEL_29;
    }
LABEL_35:
    uint64_t v22 = 0;
    goto LABEL_36;
  }
  if (X509_CRL_verify((X509_CRL *)a2, pubkey) <= 0)
  {
    *(_DWORD *)(a1 + 176) = 8;
    int v11 = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
    goto LABEL_28;
  }
LABEL_29:
  uint64_t v22 = 1;
LABEL_36:
  EVP_PKEY_free((EVP_PKEY *)v6);
  return v22;
}

uint64_t cert_crl(uint64_t a1, uint64_t a2, X509 *x)
{
  if ((*(unsigned char *)(*(void *)(a1 + 48) + 24) & 0x10) != 0
    || (*(unsigned char *)(a2 + 29) & 2) == 0
    || (*(_DWORD *)(a1 + 176) = 36,
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1),
        result))
  {
    uint64_t v7 = 0;
    if (!X509_CRL_get0_by_cert(a2, (uint64_t)&v7, x)) {
      return 1;
    }
    if (*(_DWORD *)(v7 + 32) == 8) {
      return 2;
    }
    *(_DWORD *)(a1 + 176) = 23;
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
    if (result) {
      return 1;
    }
  }
  return result;
}

void X509_STORE_CTX_trusted_stack(X509_STORE_CTX *ctx, STACK *sk)
{
  ctx->crlunsigned int s = sk;
  ctx->get_issuer = (int (__cdecl *)(X509 **, X509_STORE_CTX *, X509 *))get_trusted_issuer;
}

uint64_t X509_STORE_CTX_set0_trusted_stack(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  *(void *)(result + 72) = get_trusted_issuer;
  return result;
}

uint64_t get_trusted_issuer(char **a1, uint64_t a2, uint64_t a3)
{
  issuer = find_issuer(a2, *(STACK **)(a2 + 32), a3, 1);
  *a1 = issuer;
  if (!issuer) {
    return 0;
  }
  uint64_t v5 = 1;
  CRYPTO_add_lock((int *)issuer + 7, 1, 3, 0, 0);
  return v5;
}

void X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth)
{
}

void X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unint64_t flags)
{
}

void X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unint64_t flags, time_t t)
{
}

uint64_t X509_STORE_CTX_get_verify_cb(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx, int (__cdecl *verify_cb)(int, X509_STORE_CTX *))
{
  ctx->verify_cb = verify_cb;
}

uint64_t X509_STORE_CTX_get_verify(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t X509_STORE_CTX_set_verify(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

uint64_t X509_STORE_get_check_issued(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t X509_STORE_set_check_issued(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t X509_STORE_CTX_get_check_issued(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t X509_STORE_CTX_get0_cert(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t X509_STORE_CTX_get0_untrusted(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t X509_STORE_CTX_set0_untrusted(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

void X509_STORE_CTX_set0_verified_chain(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 160) = a2;
}

uint64_t X509_STORE_CTX_get_num_untrusted(uint64_t a1)
{
  return *(unsigned int *)(a1 + 156);
}

int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name)
{
  time_t v3 = X509_VERIFY_PARAM_lookup(name);
  if (v3)
  {
    int v4 = v3;
    other_ctx = (X509_VERIFY_PARAM *)ctx->other_ctx;
    LODWORD(v3) = X509_VERIFY_PARAM_inherit(other_ctx, v4);
  }
  return (int)v3;
}

X509_VERIFY_PARAM *__cdecl X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx)
{
  return (X509_VERIFY_PARAM *)ctx->other_ctx;
}

void X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param)
{
  other_ctx = (X509_VERIFY_PARAM *)ctx->other_ctx;
  if (other_ctx) {
    X509_VERIFY_PARAM_free(other_ctx);
  }
  ctx->other_ctx = param;
}

uint64_t x509_vfy_check_security_level(uint64_t a1)
{
  int v2 = sk_num(*(const STACK **)(a1 + 160));
  if (*(int *)(*(void *)(a1 + 48) + 44) < 1 || v2 < 1) {
    return 1;
  }
  int v5 = 0;
  int v6 = v2 - 1;
  while (1)
  {
    uint64_t v7 = sk_value(*(const STACK **)(a1 + 160), v5);
    if (v5 && !check_key_level(a1, (uint64_t)v7))
    {
      *(_DWORD *)(a1 + 172) = v5;
      int v8 = v7;
      if (!v7) {
        int v8 = sk_value(*(const STACK **)(a1 + 160), v5);
      }
      *(void *)(a1 + 184) = v8;
      *(_DWORD *)(a1 + 176) = 68;
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
      if (!result) {
        break;
      }
    }
    if (v6 == v5) {
      return 1;
    }
    int signature_nid = X509_get_signature_nid((uint64_t)v7);
    if (!signature_nid
      || (int n = 0, !OBJ_find_sigid_algs(signature_nid, &n, 0))
      || !n
      || (int v10 = OBJ_nid2sn(n), (digestbyname = EVP_get_digestbyname(v10)) == 0)
      || (int v12 = EVP_MD_size(digestbyname),
          !enough_bits_for_security_level(4 * v12, *(_DWORD *)(*(void *)(a1 + 48) + 44))))
    {
      *(_DWORD *)(a1 + 172) = v5;
      if (!v7) {
        uint64_t v7 = sk_value(*(const STACK **)(a1 + 160), v5);
      }
      *(void *)(a1 + 184) = v7;
      *(_DWORD *)(a1 + 176) = 69;
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
      if (!result) {
        break;
      }
    }
    ++v5;
  }
  return result;
}

char *find_issuer(uint64_t a1, STACK *a2, uint64_t a3, int a4)
{
  if (sk_num(a2) < 1) {
    return 0;
  }
  int v8 = 0;
  int v9 = 0;
  do
  {
    int v10 = sk_value(a2, v9);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(a1 + 80))(a1, a3, v10))
    {
      if (x509_check_cert_time(a1, (uint64_t)v10, -1)) {
        return v10;
      }
      if (a4) {
        int v8 = v10;
      }
    }
    ++v9;
    int v10 = v8;
  }
  while (v9 < sk_num(a2));
  return v10;
}

BOOL get_crl_sk(uint64_t a1, X509_CRL **a2, X509_CRL **a3, char **a4, int *a5, _DWORD *a6, STACK *a7)
{
  uint64_t v7 = a7;
  int v13 = *a5;
  uint64_t v75 = *(void *)(a1 + 184);
  if (sk_num(a7) < 1) {
    return v13 > 447;
  }
  unint64_t v66 = a5;
  unint64_t v67 = a3;
  uint64_t v64 = a2;
  unint64_t v65 = a4;
  BOOL v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  unint64_t v71 = a6;
  unint64_t v72 = v7;
  uint64_t v19 = v75;
  do
  {
    int v20 = sk_value(v7, v17);
    uint64_t v21 = (uint64_t)v20;
    int v22 = *a6;
    int v23 = *((_DWORD *)v20 + 12);
    if ((v23 & 2) != 0) {
      goto LABEL_25;
    }
    if ((*(unsigned char *)(*(void *)(a1 + 48) + 25) & 0x10) != 0)
    {
      if ((v23 & 0x40) != 0)
      {
        if ((*((_DWORD *)v20 + 13) & ~v22) == 0) {
          goto LABEL_25;
        }
      }
      else if (*((void *)v20 + 8))
      {
        goto LABEL_25;
      }
    }
    else if ((v23 & 0x60) != 0)
    {
      goto LABEL_25;
    }
    int v78 = *a6;
    unint64_t v76 = v18;
    issuer_name = X509_get_issuer_name((X509 *)v19);
    issuer = (const X509_NAME *)X509_CRL_get_issuer(v21);
    if (X509_NAME_cmp(issuer_name, issuer))
    {
      int v26 = 0;
      if ((*(unsigned char *)(v21 + 48) & 0x20) == 0)
      {
        int v18 = v76;
        int v22 = v78;
        goto LABEL_26;
      }
    }
    else
    {
      int v26 = 32;
    }
    int v27 = ((*(_DWORD *)(v21 + 28) >> 1) & 0x100 | v26) ^ 0x100;
    if (check_crl_time(a1, v21, 0)) {
      int v28 = v27 | 0x40;
    }
    else {
      int v28 = v27;
    }
    long long v29 = (const X509_NAME *)X509_CRL_get_issuer(v21);
    int v30 = *(_DWORD *)(a1 + 172);
    if (v30 != sk_num(*(const STACK **)(a1 + 160)) - 1) {
      ++v30;
    }
    long long v31 = sk_value(*(const STACK **)(a1 + 160), v30);
    if (!X509_check_akid((X509 *)v31, *(void *)(v21 + 32)) && (v28 & 0x20) != 0)
    {
      int v26 = v28 | 0x1C;
      goto LABEL_23;
    }
    int v73 = v28;
    int v32 = v30 + 1;
    uint64_t v33 = a1;
    while (1)
    {
      if (v32 >= sk_num(*(const STACK **)(a1 + 160)))
      {
        uint64_t v19 = v75;
        if ((*(unsigned char *)(*(void *)(a1 + 48) + 25) & 0x10) == 0 || sk_num(*(const STACK **)(a1 + 24)) < 1)
        {
          a6 = v71;
          uint64_t v7 = v72;
LABEL_43:
          int v18 = v76;
          int v22 = v78;
          int v26 = v73;
          if ((v73 & 4) == 0) {
            goto LABEL_25;
          }
          goto LABEL_44;
        }
        int v36 = 0;
        while (1)
        {
          uint64_t v37 = v33;
          long long v31 = sk_value(*(const STACK **)(v33 + 24), v36);
          subject_name = X509_get_subject_name((X509 *)v31);
          if (!X509_NAME_cmp(subject_name, v29) && !X509_check_akid((X509 *)v31, *(void *)(v21 + 32))) {
            break;
          }
          ++v36;
          uint64_t v33 = v37;
          if (v36 >= sk_num(*(const STACK **)(v37 + 24)))
          {
            a6 = v71;
            uint64_t v7 = v72;
            uint64_t v19 = v75;
            goto LABEL_43;
          }
        }
        int v26 = v73 | 4;
LABEL_23:
        int v18 = v31;
        goto LABEL_24;
      }
      long long v34 = sk_value(*(const STACK **)(a1 + 160), v32);
      long long v35 = X509_get_subject_name((X509 *)v34);
      if (!X509_NAME_cmp(v35, v29) && !X509_check_akid((X509 *)v34, *(void *)(v21 + 32))) {
        break;
      }
      ++v32;
    }
    int v26 = v73 | 0xC;
    int v18 = v34;
LABEL_24:
    a6 = v71;
    uint64_t v7 = v72;
    uint64_t v19 = v75;
    int v22 = v78;
    if ((v26 & 4) == 0)
    {
LABEL_25:
      int v26 = 0;
      goto LABEL_26;
    }
LABEL_44:
    int v39 = *(_DWORD *)(v21 + 48);
    if ((v39 & 0x10) != 0) {
      goto LABEL_26;
    }
    if ((*(unsigned char *)(v19 + 56) & 0x10) != 0)
    {
      if ((v39 & 4) != 0) {
        goto LABEL_26;
      }
    }
    else if ((v39 & 8) != 0)
    {
      goto LABEL_26;
    }
    int v74 = v26;
    unint64_t v77 = v18;
    int v62 = *(_DWORD *)(v21 + 52);
    if (sk_num(*(const STACK **)(v19 + 104)) >= 1)
    {
      int v40 = 0;
      while (1)
      {
        unint64_t v41 = sk_value(*(const STACK **)(v19 + 104), v40);
        int v42 = (const X509_NAME *)X509_CRL_get_issuer(v21);
        int v43 = (const STACK *)*((void *)v41 + 2);
        if (v43)
        {
          if (sk_num(v43) < 1) {
            goto LABEL_85;
          }
          int v44 = 0;
          while (1)
          {
            unint64_t v45 = sk_value(*((const STACK **)v41 + 2), v44);
            if (*(_DWORD *)v45 == 4 && !X509_NAME_cmp(*((const X509_NAME **)v45 + 1), v42)) {
              break;
            }
            if (++v44 >= sk_num(*((const STACK **)v41 + 2))) {
              goto LABEL_85;
            }
          }
        }
        else if ((v74 & 0x20) == 0)
        {
          goto LABEL_85;
        }
        unint64_t v46 = *(uint64_t **)(v21 + 40);
        if (!v46) {
          goto LABEL_91;
        }
        uint64_t v68 = *(void *)v41;
        if (!*(void *)v41) {
          goto LABEL_91;
        }
        uint64_t v47 = *v46;
        if (!*v46) {
          goto LABEL_91;
        }
        if (*(_DWORD *)v68 == 1) {
          break;
        }
        if (*(_DWORD *)v47 == 1)
        {
          a = *(X509_NAME **)(v47 + 16);
          if (!a) {
            goto LABEL_85;
          }
LABEL_80:
          unint64_t v51 = *(const STACK **)(v68 + 8);
          if (sk_num(v51) >= 1)
          {
            int v52 = 0;
            while (1)
            {
              unint64_t v53 = sk_value(v51, v52);
              if (*(_DWORD *)v53 == 4 && !X509_NAME_cmp(a, *((const X509_NAME **)v53 + 1))) {
                goto LABEL_91;
              }
              if (++v52 >= sk_num(v51)) {
                goto LABEL_85;
              }
            }
          }
          goto LABEL_85;
        }
        if (sk_num(*(const STACK **)(v68 + 8)) >= 1)
        {
          int v63 = 0;
          while (1)
          {
            aa = sk_value(*(const STACK **)(v68 + 8), v63);
            if (sk_num(*(const STACK **)(v47 + 8)) >= 1) {
              break;
            }
LABEL_77:
            if (++v63 >= sk_num(*(const STACK **)(v68 + 8))) {
              goto LABEL_85;
            }
          }
          int v49 = 0;
          while (1)
          {
            unint64_t v50 = sk_value(*(const STACK **)(v47 + 8), v49);
            if (!GENERAL_NAME_cmp((uint64_t)aa, (uint64_t)v50)) {
              break;
            }
            if (++v49 >= sk_num(*(const STACK **)(v47 + 8))) {
              goto LABEL_77;
            }
          }
LABEL_91:
          int v55 = *((_DWORD *)v41 + 6) & v62;
          a6 = v71;
          uint64_t v7 = v72;
          uint64_t v19 = v75;
          int v18 = v77;
          int v22 = v78;
          int v26 = v74;
LABEL_92:
          if ((v55 & ~v22) != 0)
          {
            v22 |= v55;
            v26 |= 0x80u;
          }
          else
          {
            int v26 = 0;
          }
          goto LABEL_26;
        }
LABEL_85:
        ++v40;
        uint64_t v19 = v75;
        if (v40 >= sk_num(*(const STACK **)(v75 + 104))) {
          goto LABEL_86;
        }
      }
      a = *(X509_NAME **)(v68 + 16);
      if (!a) {
        goto LABEL_85;
      }
      if (*(_DWORD *)v47 == 1)
      {
        unint64_t v48 = *(const X509_NAME **)(v47 + 16);
        if (v48 && !X509_NAME_cmp(a, v48)) {
          goto LABEL_91;
        }
        goto LABEL_85;
      }
      uint64_t v68 = *v46;
      goto LABEL_80;
    }
LABEL_86:
    unint64_t v54 = *(void **)(v21 + 40);
    int v22 = v78;
    if (v54)
    {
      a6 = v71;
      uint64_t v7 = v72;
      int v18 = v77;
      int v26 = v74;
      int v55 = v62;
      if ((v74 & 0x20) != 0 && !*v54) {
        goto LABEL_92;
      }
    }
    else
    {
      a6 = v71;
      uint64_t v7 = v72;
      int v18 = v77;
      int v26 = v74;
      int v55 = v62;
      if ((v74 & 0x20) != 0) {
        goto LABEL_92;
      }
    }
LABEL_26:
    if (v26 > v13)
    {
      int v13 = v26;
      int v16 = v22;
      uint64_t v15 = v21;
      BOOL v14 = v18;
    }
    ++v17;
  }
  while (v17 < sk_num(v7));
  if (v15)
  {
    if (*v64) {
      X509_CRL_free(*v64);
    }
    *uint64_t v64 = (X509_CRL *)v15;
    *unint64_t v65 = v14;
    *unint64_t v66 = v13;
    *a6 = v16;
    CRYPTO_add_lock((int *)(v15 + 24), 1, 6, 0, 0);
    if (*v67)
    {
      X509_CRL_free(*v67);
      *unint64_t v67 = 0;
    }
    if ((*(unsigned char *)(*(void *)(a1 + 48) + 25) & 0x20) != 0
      && ((*(_DWORD *)(*(void *)(a1 + 184) + 56) | *(_DWORD *)(v15 + 28)) & 0x1000) != 0)
    {
      if (sk_num(v7) < 1)
      {
LABEL_119:
        uint64_t v58 = 0;
      }
      else
      {
        int v56 = 0;
        while (1)
        {
          unint64_t v57 = sk_value(v7, v56);
          if (*((void *)v57 + 8))
          {
            if (*(void *)(v15 + 56))
            {
              uint64_t v58 = (uint64_t)v57;
              unint64_t v59 = (const X509_NAME *)X509_CRL_get_issuer(v15);
              unint64_t v60 = (const X509_NAME *)X509_CRL_get_issuer(v58);
              if (!X509_NAME_cmp(v59, v60)
                && crl_extension_match((X509_CRL *)v58, (X509_CRL *)v15, 90)
                && crl_extension_match((X509_CRL *)v58, (X509_CRL *)v15, 770)
                && ASN1_INTEGER_cmp(*(ASN1_INTEGER **)(v58 + 64), *(ASN1_INTEGER **)(v15 + 56)) <= 0
                && ASN1_INTEGER_cmp(*(ASN1_INTEGER **)(v58 + 56), *(ASN1_INTEGER **)(v15 + 56)) >= 1)
              {
                break;
              }
            }
          }
          if (++v56 >= sk_num(v7)) {
            goto LABEL_119;
          }
        }
        if (check_crl_time(a1, v58, 0)) {
          *v66 |= 2u;
        }
        CRYPTO_add_lock((int *)(v58 + 24), 1, 6, 0, 0);
      }
      *unint64_t v67 = (X509_CRL *)v58;
    }
  }
  return v13 > 447;
}

uint64_t check_crl_time(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    *(void *)(a1 + 200) = a2;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v6 + 24);
  if ((v7 & 2) != 0)
  {
    int v8 = (time_t *)(v6 + 8);
  }
  else
  {
    if ((v7 & 0x200000) != 0) {
      return 1;
    }
    int v8 = 0;
  }
  lastUpdate = (int *)X509_CRL_get_lastUpdate(a2);
  int v10 = X509_cmp_time_internal(lastUpdate, v8, 0);
  if (v10)
  {
    if (v10 < 1) {
      goto LABEL_14;
    }
    if (!a3) {
      return 0;
    }
    int v11 = 11;
  }
  else
  {
    if (!a3) {
      return 0;
    }
    int v11 = 15;
  }
  *(_DWORD *)(a1 + 176) = v11;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
  if (!result) {
    return result;
  }
LABEL_14:
  if (!X509_CRL_get_nextUpdate(a2)) {
    goto LABEL_20;
  }
  nextUpdate = (int *)X509_CRL_get_nextUpdate(a2);
  int v14 = X509_cmp_time_internal(nextUpdate, v8, 0);
  if (v14)
  {
    if (v14 < 0 && (*(unsigned char *)(a1 + 208) & 2) == 0)
    {
      if (a3)
      {
        int v15 = 12;
        goto LABEL_24;
      }
      return 0;
    }
LABEL_20:
    if (!a3) {
      return 1;
    }
    goto LABEL_25;
  }
  if (a3)
  {
    int v15 = 16;
LABEL_24:
    *(_DWORD *)(a1 + 176) = v15;
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(a1 + 64))(0, a1);
    if (!result) {
      return result;
    }
LABEL_25:
    *(void *)(a1 + 200) = 0;
    return 1;
  }
  return 0;
}

BOOL crl_extension_match(X509_CRL *a1, X509_CRL *a2, int nid)
{
  int ext_by_NID = X509_CRL_get_ext_by_NID(a1, nid, -1);
  if (ext_by_NID < 0)
  {
    data = 0;
  }
  else
  {
    int v7 = ext_by_NID;
    if (X509_CRL_get_ext_by_NID(a1, nid, ext_by_NID) != -1) {
      return 0;
    }
    ext = X509_CRL_get_ext(a1, v7);
    data = X509_EXTENSION_get_data(ext);
  }
  int v10 = X509_CRL_get_ext_by_NID(a2, nid, -1);
  if (v10 < 0)
  {
    int v13 = 0;
  }
  else
  {
    int v11 = v10;
    if (X509_CRL_get_ext_by_NID(a2, nid, v10) != -1) {
      return 0;
    }
    int v14 = X509_CRL_get_ext(a2, v11);
    int v13 = X509_EXTENSION_get_data(v14);
  }
  if (!((unint64_t)data | (unint64_t)v13)) {
    return 1;
  }
  BOOL result = 0;
  if (data)
  {
    if (v13) {
      return ASN1_OCTET_STRING_cmp(data, v13) == 0;
    }
  }
  return result;
}

uint64_t enough_bits_for_security_level(int a1, int a2)
{
  if ((a2 & ~(a2 >> 31)) >= 5) {
    int v2 = 5;
  }
  else {
    int v2 = a2 & ~(a2 >> 31);
  }
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      BOOL v5 = a1 <= 79;
      goto LABEL_11;
    case 2:
      BOOL v5 = a1 <= 111;
      goto LABEL_11;
    case 3:
      BOOL v5 = a1 <= 127;
      goto LABEL_11;
    case 4:
      BOOL v5 = a1 <= 191;
      goto LABEL_11;
    case 5:
      BOOL v5 = a1 <= 255;
LABEL_11:
      uint64_t result = !v5;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

X509_EXTENSION *__cdecl X509V3_EXT_nconf(CONF *conf, X509V3_CTX *ctx, char *name, char *value)
{
  int v13 = value;
  int v7 = v3_check_critical((const char **)&v13);
  int v8 = v3_check_generic((const char **)&v13);
  if (v8)
  {
    int v9 = v13;
    return v3_generic_extension(name, v9, v7, v8, ctx);
  }
  else
  {
    int v11 = OBJ_sn2nid(name);
    int v12 = v13;
    uint64_t result = do_ext_nconf(conf, (uint64_t)ctx, v11, v7, v13);
    if (!result)
    {
      ERR_put_error(34, 4095, 128, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 102);
      ERR_asprintf_error_data("name=%s, value=%s", name, v12);
      return 0;
    }
  }
  return result;
}

uint64_t v3_check_critical(const char **a1)
{
  int v2 = *a1;
  if (strlen(*a1) < 9 || strncmp(v2, "critical,", 9uLL)) {
    return 0;
  }
  int v4 = v2 + 8;
  uint64_t v5 = MEMORY[0x263EF8318];
  do
  {
    uint64_t v6 = *((unsigned __int8 *)v4 + 1);
    if (v4[1] < 0) {
      int v7 = __maskrune(v6, 0x4000uLL);
    }
    else {
      int v7 = *(_DWORD *)(v5 + 4 * v6 + 60) & 0x4000;
    }
    ++v4;
  }
  while (v7);
  *a1 = v4;
  return 1;
}

uint64_t v3_check_generic(const char **a1)
{
  int v2 = *a1;
  size_t v3 = strlen(*a1);
  if (v3 < 4) {
    return 0;
  }
  unint64_t v4 = v3;
  uint64_t v5 = 4;
  if (!strncmp(v2, "DER:", 4uLL))
  {
    uint64_t v6 = 1;
  }
  else
  {
    if (v4 < 5) {
      return 0;
    }
    uint64_t v5 = 5;
    if (strncmp(v2, "ASN1:", 5uLL)) {
      return 0;
    }
    uint64_t v6 = 2;
  }
  uint64_t v7 = (uint64_t)&v2[v5 - 1];
  uint64_t v8 = MEMORY[0x263EF8318];
  do
  {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 1);
    if (*(char *)(v7 + 1) < 0) {
      int v10 = __maskrune(v9, 0x4000uLL);
    }
    else {
      int v10 = *(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000;
    }
    ++v7;
  }
  while (v10);
  *a1 = (const char *)v7;
  return v6;
}

X509_EXTENSION *v3_generic_extension(const char *a1, char *a2, int a3, int a4, X509V3_CTX *a5)
{
  uint64_t len = 0;
  uint64_t v9 = OBJ_txt2obj(a1, 0);
  if (!v9)
  {
    ERR_put_error(34, 4095, 115, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 293);
    ERR_asprintf_error_data("name=%s");
    goto LABEL_12;
  }
  if (a4 != 2)
  {
    if (a4 == 1)
    {
      int v10 = string_to_hex(a2, &len);
      goto LABEL_8;
    }
    ERR_asprintf_error_data("Unexpected generic extension type %d");
LABEL_12:
    int v10 = 0;
LABEL_14:
    int v13 = 0;
LABEL_15:
    int v14 = 0;
    goto LABEL_16;
  }
  out = 0;
  int v11 = ASN1_generate_v3(a2, a5);
  int v10 = (unsigned __int8 *)v11;
  if (v11)
  {
    uint64_t len = i2d_ASN1_TYPE(v11, &out);
    ASN1_TYPE_free((ASN1_TYPE *)v10);
    int v10 = out;
  }
LABEL_8:
  if (!v10)
  {
    ERR_put_error(34, 4095, 116, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 308);
    ERR_asprintf_error_data("value=%s", a2);
    goto LABEL_14;
  }
  int v12 = ASN1_OCTET_STRING_new();
  int v13 = v12;
  if (!v12)
  {
    ERR_put_error(34, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 314);
    goto LABEL_15;
  }
  v12->data = v10;
  v12->length = len;
  int v14 = X509_EXTENSION_create_by_OBJ(0, v9, a3, v12);
  int v10 = 0;
LABEL_16:
  ASN1_OBJECT_free(v9);
  ASN1_OCTET_STRING_free(v13);
  free(v10);
  return v14;
}

X509_EXTENSION *do_ext_nconf(const CONF *a1, uint64_t a2, int nid, int a4, const char *a5)
{
  if (!nid)
  {
    int v13 = 130;
    int v14 = 137;
    goto LABEL_8;
  }
  int v10 = X509V3_EXT_get_nid(nid);
  if (!v10)
  {
    int v13 = 129;
    int v14 = 141;
    goto LABEL_8;
  }
  uint64_t v11 = (uint64_t)v10;
  if (!v10->v2i)
  {
    s2int i = (uint64_t (*)(X509V3_EXT_METHOD *, uint64_t, const char *))v10->s2i;
    if (s2i) {
      goto LABEL_12;
    }
    s2int i = (uint64_t (*)(X509V3_EXT_METHOD *, uint64_t, const char *))v10->r2i;
    if (!s2i)
    {
      ERR_put_error(34, 4095, 103, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 172);
      int v22 = OBJ_nid2sn(nid);
      ERR_asprintf_error_data("name=%s", v22);
      return 0;
    }
    if (*(void *)(a2 + 48) && *(void *)(a2 + 40))
    {
LABEL_12:
      int v18 = (ASN1_VALUE *)s2i(v10, a2, a5);
      goto LABEL_17;
    }
    int v13 = 136;
    int v14 = 167;
LABEL_8:
    ERR_put_error(34, 4095, v13, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", v14);
    return 0;
  }
  if (*a5 == 64) {
    sectioint n = NCONF_get_section(a1, a5 + 1);
  }
  else {
    sectioint n = X509V3_parse_list(a5);
  }
  uint64_t v19 = section;
  if (sk_num(section) <= 0)
  {
    ERR_put_error(34, 4095, 105, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 153);
    uint64_t v21 = OBJ_nid2sn(nid);
    ERR_asprintf_error_data("name=%s,section=%s", v21, a5);
    if (*a5 != 64) {
      sk_pop_free(v19, (void (__cdecl *)(void *))X509V3_conf_free);
    }
    return 0;
  }
  int v18 = (ASN1_VALUE *)(*(uint64_t (**)(uint64_t, uint64_t, STACK *))(v11 + 72))(v11, a2, v19);
  if (*a5 != 64) {
    sk_pop_free(v19, (void (__cdecl *)(void *))X509V3_conf_free);
  }
LABEL_17:
  if (!v18) {
    return 0;
  }
  int v15 = do_ext_i2d(v11, nid, a4, v18);
  int v20 = *(const ASN1_ITEM **)(v11 + 8);
  if (v20) {
    ASN1_item_free(v18, v20);
  }
  else {
    (*(void (**)(ASN1_VALUE *))(v11 + 24))(v18);
  }
  return v15;
}

X509_EXTENSION *__cdecl X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid, char *value)
{
  int v14 = value;
  int v7 = v3_check_critical((const char **)&v14);
  int v8 = v3_check_generic((const char **)&v14);
  if (v8)
  {
    int v9 = v8;
    int v10 = OBJ_nid2sn(ext_nid);
    uint64_t v11 = v14;
    return v3_generic_extension(v10, v11, v7, v9, ctx);
  }
  else
  {
    int v13 = v14;
    return do_ext_nconf(conf, (uint64_t)ctx, ext_nid, v7, v13);
  }
}

X509_EXTENSION *__cdecl X509V3_EXT_i2d(int ext_nid, int crit, void *ext_struc)
{
  nid = X509V3_EXT_get_nid(ext_nid);
  if (nid)
  {
    return do_ext_i2d((uint64_t)nid, ext_nid, crit, (ASN1_VALUE *)ext_struc);
  }
  else
  {
    ERR_put_error(34, 4095, 129, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 238);
    return 0;
  }
}

X509_EXTENSION *do_ext_i2d(uint64_t a1, int a2, int a3, ASN1_VALUE *val)
{
  int v7 = *(const ASN1_ITEM **)(a1 + 8);
  if (v7)
  {
    out = 0;
    int v8 = ASN1_item_i2d(val, &out, v7);
    if (v8 < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    int v8 = (*(uint64_t (**)(ASN1_VALUE *, void))(a1 + 40))(val, 0);
    int v10 = (unsigned __int8 *)malloc_type_malloc(v8, 0x2797802FuLL);
    out = v10;
    if (!v10)
    {
LABEL_9:
      int v12 = 0;
LABEL_10:
      ASN1_OCTET_STRING_free(v12);
      ERR_put_error(34, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 225);
      return 0;
    }
    int v16 = v10;
    (*(void (**)(ASN1_VALUE *, unsigned __int8 **))(a1 + 40))(val, &v16);
  }
  uint64_t v11 = ASN1_OCTET_STRING_new();
  int v12 = v11;
  if (!v11) {
    goto LABEL_10;
  }
  v11->data = out;
  v11->length = v8;
  int v13 = X509_EXTENSION_create_by_NID(0, a2, a3, v11);
  if (!v13) {
    goto LABEL_10;
  }
  int v14 = v13;
  ASN1_OCTET_STRING_free(v12);
  return v14;
}

int X509V3_EXT_add_nconf_sk(CONF *conf, X509V3_CTX *ctx, char *section, STACK **sk)
{
  int v7 = (X509_EXTENSION *)NCONF_get_section(conf, section);
  if (v7)
  {
    int v8 = (const STACK *)v7;
    if (sk_num((const STACK *)v7) < 1)
    {
LABEL_8:
      LODWORD(v7) = 1;
    }
    else
    {
      int v9 = 0;
      while (1)
      {
        int v10 = sk_value(v8, v9);
        int v7 = X509V3_EXT_nconf(conf, ctx, *((char **)v10 + 1), *((char **)v10 + 2));
        if (!v7) {
          break;
        }
        uint64_t v11 = v7;
        if (sk) {
          X509v3_add_ext(sk, v7, -1);
        }
        X509_EXTENSION_free(v11);
        if (++v9 >= sk_num(v8)) {
          goto LABEL_8;
        }
      }
    }
  }
  return (int)v7;
}

int X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, char *section, X509 *cert)
{
  if (cert) {
    cert = (X509 *)&cert->cert_info->extensions;
  }
  return X509V3_EXT_add_nconf_sk(conf, ctx, section, (STACK **)cert);
}

int X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, char *section, X509_CRL *crl)
{
  if (crl) {
    crl = (X509_CRL *)&crl->crl->extensions;
  }
  return X509V3_EXT_add_nconf_sk(conf, ctx, section, (STACK **)crl);
}

int X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, char *section, X509_REQ *req)
{
  extunsigned int s = 0;
  if (req) {
    p_extunsigned int s = &exts;
  }
  else {
    p_extunsigned int s = 0;
  }
  int v6 = X509V3_EXT_add_nconf_sk(conf, ctx, section, p_exts);
  int v7 = v6;
  if (req && v6)
  {
    int v7 = X509_REQ_add_extensions(req, exts);
    sk_pop_free(exts, (void (__cdecl *)(void *))X509_EXTENSION_free);
  }
  return v7;
}

char *__cdecl X509V3_get_string(X509V3_CTX *ctx, char *name, char *section)
{
  if (ctx->db && (db_meth = ctx->db_meth) != 0 && (get_string = (uint64_t (*)(void))db_meth->get_string) != 0)
  {
    return (char *)get_string();
  }
  else
  {
    ERR_put_error(34, 4095, 148, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 426);
    return 0;
  }
}

STACK *__cdecl X509V3_get_section(X509V3_CTX *ctx, char *section)
{
  if (ctx->db && (db_meth = ctx->db_meth) != 0 && (get_sectioint n = (uint64_t (*)(void))db_meth->get_section) != 0)
  {
    return (STACK *)get_section();
  }
  else
  {
    ERR_put_error(34, 4095, 148, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_conf.c", 437);
    return 0;
  }
}

void X509V3_string_free(X509V3_CTX *ctx, char *str)
{
  if (str)
  {
    free_string = ctx->db_meth->free_string;
    if (free_string) {
      ((void (*)(void *))free_string)(ctx->db);
    }
  }
}

void X509V3_section_free(X509V3_CTX *ctx, STACK *section)
{
  if (section)
  {
    free_sectioint n = ctx->db_meth->free_section;
    if (free_section) {
      ((void (*)(void *))free_section)(ctx->db);
    }
  }
}

void X509V3_set_nconf(X509V3_CTX *ctx, CONF *conf)
{
  ctx->db_meth = (X509V3_CONF_METHOD *)nconf_method;
  ctx->db = conf;
}

void X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subject, X509_REQ *req, X509_CRL *crl, int flags)
{
  ctx->issuer_cert = issuer;
  ctx->subject_cert = subject;
  ctx->subject_req = req;
  ctx->crl = crl;
  ctx->flagunsigned int s = flags;
}

X509_EXTENSION *__cdecl X509V3_EXT_conf(LHASH *conf, X509V3_CTX *ctx, char *name, char *value)
{
  memset(&confa, 0, sizeof(confa));
  CONF_set_nconf(&confa, conf);
  return X509V3_EXT_nconf(&confa, ctx, name, value);
}

X509_EXTENSION *__cdecl X509V3_EXT_conf_nid(LHASH *conf, X509V3_CTX *ctx, int ext_nid, char *value)
{
  memset(&confa, 0, sizeof(confa));
  CONF_set_nconf(&confa, conf);
  return X509V3_EXT_nconf_nid(&confa, ctx, ext_nid, value);
}

void X509V3_set_conf_lhash(X509V3_CTX *ctx, LHASH *lhash)
{
  ctx->db_meth = (X509V3_CONF_METHOD *)conf_lhash_method;
  ctx->db = lhash;
}

int X509V3_EXT_add_conf(LHASH *conf, X509V3_CTX *ctx, char *section, X509 *cert)
{
  memset(&confa, 0, sizeof(confa));
  CONF_set_nconf(&confa, conf);
  if (cert) {
    p_extensionunsigned int s = &cert->cert_info->extensions;
  }
  else {
    p_extensionunsigned int s = 0;
  }
  return X509V3_EXT_add_nconf_sk(&confa, ctx, section, p_extensions);
}

int X509V3_EXT_CRL_add_conf(LHASH *conf, X509V3_CTX *ctx, char *section, X509_CRL *crl)
{
  memset(&confa, 0, sizeof(confa));
  CONF_set_nconf(&confa, conf);
  if (crl) {
    p_extensionunsigned int s = &crl->crl->extensions;
  }
  else {
    p_extensionunsigned int s = 0;
  }
  return X509V3_EXT_add_nconf_sk(&confa, ctx, section, p_extensions);
}

int X509V3_EXT_REQ_add_conf(LHASH *conf, X509V3_CTX *ctx, char *section, X509_REQ *req)
{
  memset(&confa, 0, sizeof(confa));
  CONF_set_nconf(&confa, conf);
  return X509V3_EXT_REQ_add_nconf(&confa, ctx, section, req);
}

X509_REQ_INFO *__cdecl d2i_X509_REQ_INFO(X509_REQ_INFO **a, const unsigned __int8 **in, uint64_t len)
{
  return (X509_REQ_INFO *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &X509_REQ_INFO_it);
}

int i2d_X509_REQ_INFO(X509_REQ_INFO *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_REQ_INFO_it);
}

X509_REQ_INFO *X509_REQ_INFO_new(void)
{
  return (X509_REQ_INFO *)ASN1_item_new(&X509_REQ_INFO_it);
}

void X509_REQ_INFO_free(X509_REQ_INFO *a)
{
}

X509_REQ *__cdecl d2i_X509_REQ(X509_REQ **a, const unsigned __int8 **in, uint64_t len)
{
  return (X509_REQ *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, &X509_REQ_it);
}

int i2d_X509_REQ(X509_REQ *a, unsigned __int8 **out)
{
  return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_REQ_it);
}

X509_REQ *X509_REQ_new(void)
{
  return (X509_REQ *)ASN1_item_new(&X509_REQ_it);
}

void X509_REQ_free(X509_REQ *a)
{
}

X509_REQ *__cdecl X509_REQ_dup(X509_REQ *req)
{
  return (X509_REQ *)ASN1_item_dup(&X509_REQ_it, req);
}

uint64_t X509_REQ_get_signature_nid(uint64_t a1)
{
  return OBJ_obj2nid(**(const ASN1_OBJECT ***)(a1 + 8));
}

uint64_t X509_REQ_get0_signature(uint64_t result, void *a2, void *a3)
{
  if (a2) {
    *a2 = *(void *)(result + 16);
  }
  if (a3) {
    *a3 = *(void *)(result + 8);
  }
  return result;
}

uint64_t rinf_cb(int a1, uint64_t *a2)
{
  if (a1 != 1) {
    return 1;
  }
  uint64_t v2 = *a2;
  uint64_t result = (uint64_t)sk_new_null();
  *(void *)(v2 + 48) = result;
  if (result) {
    return 1;
  }
  return result;
}

BOOL hmac_pkey_public_cmp(uint64_t a1, uint64_t a2)
{
  return ASN1_OCTET_STRING_cmp(*(ASN1_OCTET_STRING **)(a1 + 32), *(ASN1_OCTET_STRING **)(a2 + 32)) == 0;
}

uint64_t hmac_size()
{
  return 64;
}

void hmac_key_free(uint64_t a1)
{
  uint64_t v1 = *(ASN1_OCTET_STRING **)(a1 + 32);
  if (v1)
  {
    data = v1->data;
    if (data) {
      explicit_bzero(data, v1->length);
    }
    ASN1_OCTET_STRING_free(v1);
  }
}

uint64_t hmac_pkey_ctrl(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  if (a2 != 3) {
    return 4294967294;
  }
  *a4 = 64;
  return 1;
}

uint64_t hmac_set_priv_key(uint64_t a1, const unsigned __int8 *a2, unint64_t a3)
{
  size_t v3 = 0;
  if (a3 >> 31
    || *(void *)(a1 + 32)
    || (v5 = a3, v7 = ASN1_OCTET_STRING_new(), (size_t v3 = v7) == 0)
    || !ASN1_OCTET_STRING_set(v7, a2, v5))
  {
    ASN1_OCTET_STRING_free(v3);
    return 0;
  }
  else
  {
    *(void *)(a1 + 32) = v3;
    return 1;
  }
}

uint64_t hmac_get_priv_key(uint64_t a1, void *a2, size_t *a3)
{
  size_t v3 = *(int **)(a1 + 32);
  if (!v3) {
    return 0;
  }
  memset(v7, 0, sizeof(v7));
  if (a2)
  {
    CBS_init(v7, *((void *)v3 + 1), *v3);
    return CBS_write_bytes((uint64_t)v7, a2, *a3, a3);
  }
  else
  {
    *a3 = *v3;
    return 1;
  }
}

uint64_t evp_pkey_meth_get_count()
{
  if (pkey_app_methods) {
    return (sk_num((const STACK *)pkey_app_methods) + 12);
  }
  else {
    return 12;
  }
}

char *evp_pkey_meth_get0(unsigned int a1)
{
  if ((a1 & 0x80000000) != 0) {
    return 0;
  }
  if (a1 > 0xB) {
    return sk_value((const STACK *)pkey_app_methods, a1 - 12);
  }
  return (char *)*(&pkey_methods + a1);
}

char *EVP_PKEY_meth_find(int a1)
{
  if (pkey_app_methods) {
    unint64_t v2 = (sk_num((const STACK *)pkey_app_methods) + 12);
  }
  else {
    unint64_t v2 = 12;
  }
  while ((int)v2 >= 1)
  {
    if (v2 > 0xC) {
      uint64_t result = sk_value((const STACK *)pkey_app_methods, (int)v2 - 13);
    }
    else {
      uint64_t result = (char *)*(&pkey_methods + v2 - 1);
    }
    --v2;
    if (*(_DWORD *)result == a1) {
      return result;
    }
  }
  return 0;
}

_DWORD *EVP_PKEY_meth_new(int a1, int a2)
{
  uint64_t result = malloc_type_calloc(1uLL, 0xF8uLL, 0x1080040399D213BuLL);
  if (result)
  {
    _DWORD *result = a1;
    result[1] = a2 | 1;
  }
  return result;
}

_DWORD *EVP_PKEY_meth_get0_info(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result) {
    _DWORD *result = *a3;
  }
  if (a2) {
    *a2 = a3[1];
  }
  return result;
}

double EVP_PKEY_meth_copy(uint64_t a1, long long *a2)
{
  double result = *(double *)a1;
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 16) = v4;
  long long v6 = a2[7];
  long long v8 = a2[4];
  long long v7 = a2[5];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v7;
  long long v9 = a2[11];
  long long v11 = a2[8];
  long long v10 = a2[9];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  long long v13 = a2[13];
  long long v12 = a2[14];
  long long v14 = a2[12];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)a1 = v3;
  *(double *)a1 = result;
  return result;
}

void EVP_PKEY_meth_free(void *a1)
{
  if (a1)
  {
    if (*((unsigned char *)a1 + 4)) {
      free(a1);
    }
  }
}

EVP_PKEY **EVP_PKEY_CTX_new(uint64_t a1, ENGINE *a2)
{
  return int_ctx_new(a1, a2, -1);
}

EVP_PKEY **int_ctx_new(uint64_t a1, ENGINE *e, int a3)
{
  pkey_meth_engine = e;
  if (a3 == -1)
  {
    if (!a1) {
      return 0;
    }
    long long v8 = *(int **)(a1 + 16);
    if (!v8) {
      return 0;
    }
    int v5 = *v8;
  }
  else
  {
    int v5 = a3;
    if (!a1)
    {
      char v6 = 1;
      if (!e) {
        goto LABEL_4;
      }
LABEL_12:
      if (!ENGINE_init(pkey_meth_engine))
      {
        int v13 = 38;
        int v14 = 170;
        goto LABEL_23;
      }
      goto LABEL_13;
    }
  }
  char v6 = 0;
  if (*(void *)(a1 + 24)) {
    pkey_meth_engine = *(ENGINE **)(a1 + 24);
  }
  if (pkey_meth_engine) {
    goto LABEL_12;
  }
LABEL_4:
  pkey_meth_engine = (ENGINE *)ENGINE_get_pkey_meth_engine(v5);
  if (!pkey_meth_engine)
  {
    uint64_t pkey_meth = (uint64_t)EVP_PKEY_meth_find(v5);
    goto LABEL_14;
  }
LABEL_13:
  uint64_t pkey_meth = ENGINE_get_pkey_meth((uint64_t)pkey_meth_engine);
LABEL_14:
  uint64_t v9 = pkey_meth;
  if (!pkey_meth)
  {
    int v13 = 156;
    int v14 = 187;
LABEL_23:
    ERR_put_error(6, 4095, v13, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/evp/pmeth_lib.c", v14);
    return 0;
  }
  long long v10 = (EVP_PKEY **)malloc_type_malloc(0x50uLL, 0x10F0040FE4E0FE9uLL);
  long long v11 = v10;
  if (!v10)
  {
    ENGINE_finish(pkey_meth_engine);
    ERR_put_error(6, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/evp/pmeth_lib.c", 196);
    return v11;
  }
  *long long v10 = (EVP_PKEY *)v9;
  v10[1] = (EVP_PKEY *)pkey_meth_engine;
  *((_DWORD *)v10 + 8) = 0;
  v10[2] = (EVP_PKEY *)a1;
  _OWORD v10[3] = 0;
  v10[7] = 0;
  if ((v6 & 1) == 0) {
    CRYPTO_add_lock((int *)(a1 + 8), 1, 10, 0, 0);
  }
  v11[5] = 0;
  long long v12 = *(int (**)(EVP_PKEY **))(v9 + 8);
  if (v12 && v12(v11) <= 0)
  {
    EVP_PKEY_CTX_free(v11);
    return 0;
  }
  return v11;
}

EVP_PKEY **EVP_PKEY_CTX_new_id(int a1, ENGINE *a2)
{
  return int_ctx_new(0, a2, a1);
}

_OWORD *EVP_PKEY_CTX_dup(uint64_t a1)
{
  if (!*(void *)a1 || !*(void *)(*(void *)a1 + 16)) {
    return 0;
  }
  unint64_t v2 = *(ENGINE **)(a1 + 8);
  if (v2 && !ENGINE_init(v2))
  {
    ERR_put_error(6, 4095, 38, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/evp/pmeth_lib.c", 285);
    return 0;
  }
  long long v3 = malloc_type_malloc(0x50uLL, 0x10F0040FE4E0FE9uLL);
  long long v4 = v3;
  if (v3)
  {
    *long long v3 = *(_OWORD *)a1;
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      CRYPTO_add_lock((int *)(v5 + 8), 1, 10, 0, 0);
      uint64_t v5 = *(void *)(a1 + 16);
    }
    *((void *)v4 + 2) = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      CRYPTO_add_lock((int *)(v6 + 8), 1, 10, 0, 0);
      uint64_t v6 = *(void *)(a1 + 24);
    }
    *((void *)v4 + 3) = v6;
    *((void *)v4 + 5) = 0;
    *((void *)v4 + 6) = 0;
    *((_DWORD *)v4 + 8) = *(_DWORD *)(a1 + 32);
    if ((*(int (**)(_OWORD *, uint64_t))(*(void *)a1 + 16))(v4, a1) <= 0)
    {
      EVP_PKEY_CTX_free((EVP_PKEY **)v4);
      return 0;
    }
  }
  return v4;
}

void EVP_PKEY_CTX_free(EVP_PKEY **a1)
{
  if (a1)
  {
    if (*a1)
    {
      unint64_t v2 = *(void (**)(EVP_PKEY **))&(*a1)->save_parameters;
      if (v2) {
        v2(a1);
      }
    }
    EVP_PKEY_free(a1[2]);
    EVP_PKEY_free(a1[3]);
    ENGINE_finish((ENGINE *)a1[1]);
    free(a1);
  }
}

STACK *EVP_PKEY_meth_add0(char *data)
{
  double result = (STACK *)pkey_app_methods;
  if (pkey_app_methods) {
    return (STACK *)(sk_push(result, data) != 0);
  }
  double result = sk_new(0);
  pkey_app_methodunsigned int s = (uint64_t)result;
  if (result) {
    return (STACK *)(sk_push(result, data) != 0);
  }
  return result;
}

uint64_t EVP_PKEY_CTX_ctrl(uint64_t *a1, int a2, int a3)
{
  if (!a1 || (uint64_t v3 = *a1) == 0 || (v4 = *(uint64_t (**)(void))(v3 + 192)) == 0)
  {
    int v8 = 356;
LABEL_11:
    ERR_put_error(6, 4095, 147, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/evp/pmeth_lib.c", v8);
    return 4294967294;
  }
  if (a2 != -1 && *(_DWORD *)v3 != a2) {
    return 0xFFFFFFFFLL;
  }
  int v5 = *((_DWORD *)a1 + 8);
  if (!v5)
  {
    int v6 = 149;
    int v7 = 363;
    goto LABEL_14;
  }
  if (a3 != -1 && (v5 & a3) == 0)
  {
    int v6 = 148;
    int v7 = 368;
LABEL_14:
    ERR_put_error(6, 4095, v6, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/evp/pmeth_lib.c", v7);
    return 0xFFFFFFFFLL;
  }
  uint64_t result = v4();
  if (result == -2)
  {
    int v8 = 375;
    goto LABEL_11;
  }
  return result;
}

uint64_t EVP_PKEY_CTX_ctrl_str(uint64_t *a1, char *__s1, char *a3)
{
  if (a1 && (uint64_t v4 = *a1) != 0 && *(void *)(v4 + 200))
  {
    int v8 = *(uint64_t (**)(uint64_t *, char *, char *))(v4 + 200);
    if (!strcmp(__s1, "digest"))
    {
      return EVP_PKEY_CTX_md(a1, 248, 1, a3);
    }
    else
    {
      return v8(a1, __s1, a3);
    }
  }
  else
  {
    ERR_put_error(6, 4095, 147, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/evp/pmeth_lib.c", 385);
    return 4294967294;
  }
}

uint64_t EVP_PKEY_CTX_md(uint64_t *a1, int a2, int a3, char *name)
{
  if (EVP_get_digestbyname(name))
  {
    return EVP_PKEY_CTX_ctrl(a1, -1, a2);
  }
  else
  {
    ERR_put_error(6, 4095, 152, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/evp/pmeth_lib.c", 433);
    return 0;
  }
}

uint64_t EVP_PKEY_CTX_str2ctrl(uint64_t a1, uint64_t a2, char *__s)
{
  size_t v6 = strlen(__s);
  if (v6 >> 31) {
    return 0xFFFFFFFFLL;
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, size_t, char *))(*(void *)a1 + 192);
  return v8(a1, a2, v6, __s);
}

uint64_t EVP_PKEY_CTX_hex2ctrl(uint64_t a1, uint64_t a2, char *str)
{
  uint64_t len = 0;
  int v5 = string_to_hex(str, &len);
  if (v5)
  {
    if ((unint64_t)len >> 31) {
      uint64_t v6 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, a2);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  free(v5);
  return v6;
}

uint64_t EVP_PKEY_CTX_get_operation(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t EVP_PKEY_CTX_set0_keygen_info(uint64_t result, uint64_t a2, int a3)
{
  *(void *)(result + 64) = a2;
  *(_DWORD *)(result + 72) = a3;
  return result;
}

uint64_t EVP_PKEY_CTX_set_data(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t EVP_PKEY_CTX_get_data(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t EVP_PKEY_CTX_get0_pkey(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t EVP_PKEY_CTX_get0_peerkey(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t EVP_PKEY_CTX_set_app_data(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t EVP_PKEY_CTX_get_app_data(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t EVP_PKEY_meth_set_init(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t EVP_PKEY_meth_set_copy(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t EVP_PKEY_meth_set_cleanup(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t EVP_PKEY_meth_set_paramgen(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 32) = a2;
  *(void *)(result + 40) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_keygen(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 48) = a2;
  *(void *)(result + 56) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_sign(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 64) = a2;
  *(void *)(result + 72) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_verify(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 80) = a2;
  *(void *)(result + 88) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_verify_recover(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 96) = a2;
  *(void *)(result + 104) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_signctx(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 112) = a2;
  *(void *)(result + 120) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_verifyctx(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 128) = a2;
  *(void *)(result + 136) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_encrypt(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 144) = a2;
  *(void *)(result + 152) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_decrypt(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 160) = a2;
  *(void *)(result + 168) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_derive(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 176) = a2;
  *(void *)(result + 184) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_ctrl(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 192) = a2;
  *(void *)(result + 200) = a3;
  return result;
}

uint64_t EVP_PKEY_meth_set_check(uint64_t result, uint64_t a2)
{
  *(void *)(result + 224) = a2;
  return result;
}

uint64_t EVP_PKEY_meth_set_public_check(uint64_t result, uint64_t a2)
{
  *(void *)(result + 232) = a2;
  return result;
}

uint64_t EVP_PKEY_meth_set_param_check(uint64_t result, uint64_t a2)
{
  *(void *)(result + 240) = a2;
  return result;
}

void *GOST_KEY_new()
{
  v0 = malloc_type_malloc(0x20uLL, 0x102004016EE4530uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    void *v0 = 0;
    v0[1] = 0;
    v0[2] = 0;
    v0[3] = 1;
  }
  else
  {
    ERR_put_error(50, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/gost/gostr341001_key.c", 81);
  }
  return v1;
}

void *GOST_KEY_free(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)CRYPTO_add_lock((int *)result + 6, -1, 33, 0, 0);
    if ((int)result <= 0)
    {
      EC_GROUP_free(*(EC_GROUP **)v1);
      EC_POINT_free(*((EC_POINT **)v1 + 1));
      BN_free(*((BIGNUM **)v1 + 2));
      return freezero(v1, 0x20uLL);
    }
  }
  return result;
}

uint64_t GOST_KEY_check_key(uint64_t a1)
{
  if (!a1 || (v2 = *(const EC_GROUP **)a1) == 0 || (uint64_t v3 = *(const EC_POINT **)(a1 + 8)) == 0)
  {
    ERR_put_error(50, 4095, 67, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/gost/gostr341001_key.c", 120);
    return 0;
  }
  if (!EC_POINT_is_at_infinity(v2, v3))
  {
    int v5 = BN_CTX_new();
    if (!v5)
    {
      uint64_t v4 = 0;
      goto LABEL_6;
    }
    int v7 = EC_POINT_new(*(const EC_GROUP **)a1);
    if (v7)
    {
      if (EC_POINT_is_on_curve(*(const EC_GROUP **)a1, *(const EC_POINT **)(a1 + 8), v5))
      {
        uint64_t v6 = BN_new();
        if (!v6)
        {
LABEL_27:
          uint64_t v4 = 0;
          goto LABEL_7;
        }
        if (EC_GROUP_get_order(*(const EC_GROUP **)a1, v6, v5))
        {
          if (!EC_POINT_mul(*(const EC_GROUP **)a1, v7, 0, *(const EC_POINT **)(a1 + 8), v6, v5))
          {
            int v10 = 16;
            int v11 = 146;
            goto LABEL_26;
          }
          if (!EC_POINT_is_at_infinity(*(const EC_GROUP **)a1, v7))
          {
            int v10 = 130;
            int v11 = 150;
            goto LABEL_26;
          }
          uint64_t v9 = *(const BIGNUM **)(a1 + 16);
          if (v9)
          {
            if ((BN_cmp(v9, v6) & 0x80000000) == 0)
            {
              int v10 = 130;
              int v11 = 159;
LABEL_26:
              ERR_put_error(50, 4095, v10, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/gost/gostr341001_key.c", v11);
              goto LABEL_27;
            }
            if (!EC_POINT_mul(*(const EC_GROUP **)a1, v7, *(const BIGNUM **)(a1 + 16), 0, 0, v5))
            {
              int v10 = 16;
              int v11 = 164;
              goto LABEL_26;
            }
            if (EC_POINT_cmp(*(const EC_GROUP **)a1, v7, *(const EC_POINT **)(a1 + 8), v5))
            {
              int v10 = 123;
              int v11 = 168;
              goto LABEL_26;
            }
          }
          uint64_t v4 = 1;
          goto LABEL_7;
        }
        int v10 = 122;
        int v11 = 141;
        goto LABEL_26;
      }
      ERR_put_error(50, 4095, 107, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/gost/gostr341001_key.c", 134);
    }
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  ERR_put_error(50, 4095, 106, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/gost/gostr341001_key.c", 124);
  uint64_t v4 = 0;
  int v5 = 0;
LABEL_6:
  uint64_t v6 = 0;
  int v7 = 0;
LABEL_7:
  BN_free(v6);
  BN_CTX_free(v5);
  EC_POINT_free(v7);
  return v4;
}

uint64_t GOST_KEY_set_public_key_affine_coordinates(const EC_GROUP **a1, const BIGNUM *a2, const BIGNUM *a3)
{
  if (a1 && a3 && a2 && *a1)
  {
    uint64_t v6 = BN_CTX_new();
    int v7 = v6;
    if (v6)
    {
      BN_CTX_start(v6);
      int v8 = EC_POINT_new(*a1);
      if (v8)
      {
        uint64_t v9 = BN_CTX_get(v7);
        if (v9)
        {
          int v10 = v9;
          int v11 = BN_CTX_get(v7);
          if (v11)
          {
            long long v12 = v11;
            if (EC_POINT_set_affine_coordinates(*a1, v8, (uint64_t)a2, (uint64_t)a3, v7))
            {
              if (EC_POINT_get_affine_coordinates((uint64_t)*a1, v8, (uint64_t)v10, (uint64_t)v12, v7))
              {
                if (BN_cmp(a2, v10) || BN_cmp(a3, v12))
                {
                  ERR_put_error(50, 4095, 146, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/gost/gostr341001_key.c", 217);
                }
                else if (GOST_KEY_set_public_key(a1, v8))
                {
                  uint64_t v13 = GOST_KEY_check_key((uint64_t)a1);
                  goto LABEL_17;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      int v8 = 0;
    }
    uint64_t v13 = 0;
LABEL_17:
    EC_POINT_free(v8);
    BN_CTX_end(v7);
    BN_CTX_free(v7);
    return v13;
  }
  ERR_put_error(50, 4095, 67, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/gost/gostr341001_key.c", 189);
  return 0;
}

BOOL GOST_KEY_set_public_key(const EC_GROUP **a1, const EC_POINT *a2)
{
  EC_POINT_free(a1[1]);
  uint64_t v4 = EC_POINT_dup(a2, *a1);
  a1[1] = v4;
  return v4 != 0;
}

uint64_t GOST_KEY_get0_group(uint64_t a1)
{
  return *(void *)a1;
}

BOOL GOST_KEY_set_group(EC_GROUP **a1, const EC_GROUP *a2)
{
  EC_GROUP_free(*a1);
  uint64_t v4 = EC_GROUP_dup(a2);
  *a1 = v4;
  return v4 != 0;
}

uint64_t GOST_KEY_get0_private_key(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

BOOL GOST_KEY_set_private_key(uint64_t a1, const BIGNUM *a2)
{
  BN_free(*(BIGNUM **)(a1 + 16));
  uint64_t v4 = BN_dup(a2);
  *(void *)(a1 + 16) = v4;
  return v4 != 0;
}

uint64_t GOST_KEY_get0_public_key(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t GOST_KEY_get_digest(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t GOST_KEY_set_digest(uint64_t a1, int a2)
{
  if ((a2 - 941) >= 2 && a2 != 822) {
    return 0;
  }
  *(_DWORD *)(a1 + 28) = a2;
  return 1;
}

BIGNUM *GOST_KEY_get_size(BIGNUM *result)
{
  if (!result) {
    return result;
  }
  d = (const EC_GROUP *)result->d;
  if (!result->d) {
    return 0;
  }
  uint64_t result = BN_new();
  if (!result) {
    return result;
  }
  unint64_t v2 = result;
  if (!EC_GROUP_get_order(d, result, 0))
  {
    BN_free(v2);
    return 0;
  }
  int v3 = BN_num_bits(v2);
  if (v3 >= -7) {
    int v4 = v3 + 7;
  }
  else {
    int v4 = v3 + 14;
  }
  BN_free(v2);
  return (BIGNUM *)((uint64_t)v4 >> 3);
}

int X509v3_get_ext_count(const STACK *x)
{
  if (x) {
    LODWORD(x) = sk_num(x);
  }
  return (int)x;
}

int X509v3_get_ext_by_NID(const STACK *x, int nid, int lastpos)
{
  int v5 = OBJ_nid2obj(nid);
  if (!v5) {
    return -2;
  }
  return X509v3_get_ext_by_OBJ(x, v5, lastpos);
}

int X509v3_get_ext_by_OBJ(const STACK *x, ASN1_OBJECT *obj, int lastpos)
{
  if (x)
  {
    if (lastpos < 0) {
      int v5 = -1;
    }
    else {
      int v5 = lastpos;
    }
    int v6 = sk_num(x);
    while (++v5 < v6)
    {
      int v7 = sk_value(x, v5);
      if (!OBJ_cmp(*(const ASN1_OBJECT **)v7, obj)) {
        return v5;
      }
    }
  }
  return -1;
}

int X509v3_get_ext_by_critical(const STACK *x, int crit, int lastpos)
{
  if (x)
  {
    if (lastpos < 0) {
      int v5 = -1;
    }
    else {
      int v5 = lastpos;
    }
    int v6 = sk_num(x);
    while (++v5 < v6)
    {
      if ((crit != 0) == *((_DWORD *)sk_value(x, v5) + 2) > 0) {
        return v5;
      }
    }
  }
  return -1;
}

X509_EXTENSION *__cdecl X509v3_get_ext(const STACK *x, int loc)
{
  if (!x) {
    return 0;
  }
  int v4 = sk_num(x);
  if (loc < 0 || v4 <= loc) {
    return 0;
  }
  return (X509_EXTENSION *)sk_value(x, loc);
}

X509_EXTENSION *__cdecl X509v3_delete_ext(STACK *x, int loc)
{
  if (!x) {
    return 0;
  }
  int v4 = sk_num(x);
  if (loc < 0 || v4 <= loc) {
    return 0;
  }
  return (X509_EXTENSION *)sk_delete(x, loc);
}

STACK *__cdecl X509v3_add_ext(STACK **x, X509_EXTENSION *ex, int loc)
{
  if (!x)
  {
    ERR_put_error(11, 4095, 67, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_v3.c", 167);
    return 0;
  }
  int v6 = *x;
  if (!*x)
  {
    int v6 = sk_new_null();
    if (!v6)
    {
      ERR_put_error(11, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_v3.c", 192);
      return v6;
    }
  }
  int v7 = sk_num(v6);
  int v8 = (char *)X509_EXTENSION_dup(ex);
  if (!v8)
  {
LABEL_16:
    if (v6 != *x) {
      sk_free(v6);
    }
    return 0;
  }
  uint64_t v9 = (X509_EXTENSION *)v8;
  if (v7 < loc || loc < 0) {
    int v11 = v7;
  }
  else {
    int v11 = loc;
  }
  if (!sk_insert(v6, v8, v11))
  {
    ERR_put_error(11, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_v3.c", 192);
    X509_EXTENSION_free(v9);
    goto LABEL_16;
  }
  if (!*x) {
    *x = v6;
  }
  return v6;
}

X509_EXTENSION *__cdecl X509_EXTENSION_create_by_NID(X509_EXTENSION **ex, int nid, int crit, ASN1_OCTET_STRING *data)
{
  int v7 = OBJ_nid2obj(nid);
  if (v7)
  {
    int v8 = v7;
    uint64_t result = X509_EXTENSION_create_by_OBJ(ex, v7, crit, data);
    if (result) {
      return result;
    }
    ASN1_OBJECT_free(v8);
  }
  else
  {
    ERR_put_error(11, 4095, 109, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_v3.c", 211);
  }
  return 0;
}

X509_EXTENSION *__cdecl X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex, ASN1_OBJECT *obj, int crit, ASN1_OCTET_STRING *data)
{
  if (ex && (int v8 = *ex) != 0 || (int v8 = X509_EXTENSION_new()) != 0)
  {
    if (X509_EXTENSION_set_object(v8, obj)
      && (!crit ? (int v9 = -1) : (int v9 = 255), v8->critical = v9, ASN1_STRING_set(v8->value, data->data, data->length)))
    {
      if (ex && !*ex) {
        *ex = v8;
      }
    }
    else
    {
      if (!ex || v8 != *ex) {
        X509_EXTENSION_free(v8);
      }
      return 0;
    }
  }
  else
  {
    ERR_put_error(11, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_v3.c", 229);
  }
  return v8;
}

int X509_EXTENSION_set_object(X509_EXTENSION *ex, ASN1_OBJECT *obj)
{
  int result = 0;
  if (ex)
  {
    if (obj)
    {
      ASN1_OBJECT_free(ex->object);
      int v5 = OBJ_dup(obj);
      ex->object = v5;
      return v5 != 0;
    }
  }
  return result;
}

int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit)
{
  if (ex)
  {
    if (crit) {
      ASN1_BOOLEAN v2 = 255;
    }
    else {
      ASN1_BOOLEAN v2 = -1;
    }
    ex->critical = v2;
    LODWORD(ex) = 1;
  }
  return (int)ex;
}

int X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data)
{
  if (ex) {
    LODWORD(ex) = ASN1_STRING_set(ex->value, data->data, data->length) != 0;
  }
  return (int)ex;
}

ASN1_OBJECT *__cdecl X509_EXTENSION_get_object(ASN1_OBJECT *ex)
{
  if (ex) {
    return (ASN1_OBJECT *)ex->sn;
  }
  return ex;
}

ASN1_OCTET_STRING *__cdecl X509_EXTENSION_get_data(ASN1_OCTET_STRING *ne)
{
  if (ne) {
    return (ASN1_OCTET_STRING *)ne->flags;
  }
  return ne;
}

int X509_EXTENSION_get_critical(X509_EXTENSION *ex)
{
  if (ex) {
    LODWORD(ex) = ex->critical > 0;
  }
  return (int)ex;
}

void ERR_load_BN_strings(void)
{
  if (!ERR_func_error_string(BN_str_functs))
  {
    ERR_load_strings(0, (ERR_STRING_DATA *)&BN_str_functs);
    ERR_load_strings(0, (ERR_STRING_DATA *)&BN_str_reasons);
  }
}

int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)
{
  cert_info = a->cert_info;
  int v3 = b->cert_info;
  int result = ASN1_INTEGER_cmp(a->cert_info->serialNumber, b->cert_info->serialNumber);
  if (!result)
  {
    issuer = cert_info->issuer;
    int v6 = v3->issuer;
    return X509_NAME_cmp(issuer, v6);
  }
  return result;
}

int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
{
  if ((!a->hash || a->modified) && i2d_X509_NAME((X509_NAME *)a, 0) < 0
    || (!b->hash || b->modified) && i2d_X509_NAME((X509_NAME *)b, 0) < 0)
  {
    return -2;
  }
  size_t entries_low = SLODWORD(a[1].entries);
  entrieunsigned int s = (int)b[1].entries;
  int result = entries_low - entries;
  if (entries_low == entries)
  {
    hash = (const void *)a->hash;
    int v8 = (const void *)b->hash;
    return memcmp(hash, v8, entries_low);
  }
  return result;
}

unint64_t X509_issuer_and_serial_hash(X509 *a)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v8 = 0u;
  memset(&v7, 0, sizeof(v7));
  EVP_MD_CTX_init(&v7);
  ASN1_BOOLEAN v2 = X509_NAME_oneline(a->cert_info->issuer, 0, 0);
  if (v2 && (int v3 = EVP_md5(), EVP_DigestInit_ex(&v7, v3, 0)) && (v4 = strlen(v2), EVP_DigestUpdate(&v7, v2, v4)))
  {
    free(v2);
    if (EVP_DigestUpdate(&v7, a->cert_info->serialNumber->data, a->cert_info->serialNumber->length)
      && EVP_DigestFinal_ex(&v7, md, 0))
    {
      ASN1_BOOLEAN v2 = 0;
      unint64_t v5 = *(unsigned int *)md;
    }
    else
    {
      unint64_t v5 = 0;
      ASN1_BOOLEAN v2 = 0;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  EVP_MD_CTX_cleanup(&v7);
  free(v2);
  return v5;
}

int X509_issuer_name_cmp(const X509 *a, const X509 *b)
{
  return X509_NAME_cmp(a->cert_info->issuer, b->cert_info->issuer);
}

int X509_subject_name_cmp(const X509 *a, const X509 *b)
{
  return X509_NAME_cmp(a->cert_info->subject, b->cert_info->subject);
}

int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)
{
  return X509_NAME_cmp(a->crl->issuer, b->crl->issuer);
}

uint64_t X509_CRL_match(uint64_t a1, uint64_t a2)
{
  return memcmp((const void *)(a1 + 72), (const void *)(a2 + 72), 0x40uLL);
}

X509_NAME *__cdecl X509_get_issuer_name(X509 *a)
{
  return a->cert_info->issuer;
}

unint64_t X509_issuer_name_hash(X509 *a)
{
  return X509_NAME_hash(a->cert_info->issuer);
}

unint64_t X509_NAME_hash(X509_NAME *x)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  i2d_X509_NAME(x, 0);
  hash = (const void *)x->hash;
  size_t entries_low = SLODWORD(x[1].entries);
  size_t v4 = EVP_sha1();
  if (EVP_Digest(hash, entries_low, md, 0, v4, 0)) {
    return *(unsigned int *)md;
  }
  else {
    return 0;
  }
}

uint64_t X509_issuer_name_hash_old(uint64_t a1)
{
  return X509_NAME_hash_old(*(void *)(*(void *)a1 + 24));
}

uint64_t X509_NAME_hash_old(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  long long v6 = 0u;
  memset(&v5, 0, sizeof(v5));
  i2d_X509_NAME((X509_NAME *)a1, 0);
  EVP_MD_CTX_init(&v5);
  ASN1_BOOLEAN v2 = EVP_md5();
  if (EVP_DigestInit_ex(&v5, v2, 0)
    && EVP_DigestUpdate(&v5, *(const void **)(*(void *)(a1 + 16) + 8), **(void **)(a1 + 16))
    && EVP_DigestFinal_ex(&v5, md, 0))
  {
    uint64_t v3 = *(unsigned int *)md;
  }
  else
  {
    uint64_t v3 = 0;
  }
  EVP_MD_CTX_cleanup(&v5);
  return v3;
}

X509_NAME *__cdecl X509_get_subject_name(X509 *a)
{
  return a->cert_info->subject;
}

ASN1_INTEGER *__cdecl X509_get_serialNumber(X509 *x)
{
  return x->cert_info->serialNumber;
}

uint64_t X509_get0_serialNumber(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8);
}

unint64_t X509_subject_name_hash(X509 *x)
{
  return X509_NAME_hash(x->cert_info->subject);
}

uint64_t X509_subject_name_hash_old(uint64_t a1)
{
  return X509_NAME_hash_old(*(void *)(*(void *)a1 + 40));
}

int X509_cmp(const X509 *a, const X509 *b)
{
  X509_check_purpose((X509 *)a, -1, 0);
  X509_check_purpose((X509 *)b, -1, 0);
  return memcmp(&a->sha1_hash[16], &b->sha1_hash[16], 0x40uLL);
}

X509 *__cdecl X509_find_by_issuer_and_serial(STACK *sk, X509_NAME *name, ASN1_INTEGER *serial)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!sk) {
    return 0;
  }
  v7[0] = 0;
  v7[2] = 0;
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(void *)b = v7;
  v7[1] = serial;
  void v7[3] = name;
  if (sk_num(sk) < 1) {
    return 0;
  }
  int v4 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  memset(&b[8], 0, 160);
  while (1)
  {
    EVP_MD_CTX v5 = (X509 *)sk_value(sk, v4);
    if (!X509_issuer_and_serial_cmp(v5, (const X509 *)b)) {
      break;
    }
    if (++v4 >= sk_num(sk)) {
      return 0;
    }
  }
  return v5;
}

X509 *__cdecl X509_find_by_subject(STACK *sk, X509_NAME *name)
{
  if (sk_num(sk) < 1) {
    return 0;
  }
  int v4 = 0;
  while (1)
  {
    EVP_MD_CTX v5 = sk_value(sk, v4);
    if (!X509_NAME_cmp(*(const X509_NAME **)(*(void *)v5 + 40), name)) {
      break;
    }
    if (++v4 >= sk_num(sk)) {
      return 0;
    }
  }
  return (X509 *)v5;
}

EVP_PKEY *__cdecl X509_get_pubkey(X509 *x)
{
  if (x && x->cert_info) {
    return X509_PUBKEY_get(x->cert_info->key);
  }
  else {
    return 0;
  }
}

EVP_PKEY *X509_get0_pubkey(uint64_t a1)
{
  if (a1 && *(void *)a1) {
    return X509_PUBKEY_get0(*(void *)(*(void *)a1 + 48));
  }
  else {
    return 0;
  }
}

ASN1_BIT_STRING *__cdecl X509_get0_pubkey_bitstr(ASN1_BIT_STRING *x)
{
  if (x) {
    return *(ASN1_BIT_STRING **)(*(void *)(*(void *)&x->length + 48) + 8);
  }
  return x;
}

int X509_check_private_key(X509 *x509, EVP_PKEY *pkey)
{
  if (x509
    && x509->cert_info
    && (uint64_t v3 = X509_PUBKEY_get0((uint64_t)x509->cert_info->key)) != 0
    && (int v4 = EVP_PKEY_cmp(v3, pkey), v4 != -2))
  {
    if (v4 == -1)
    {
      ERR_put_error(11, 4095, 115, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_cmp.c", 397);
      int v4 = -1;
    }
    else if (!v4)
    {
      ERR_put_error(11, 4095, 116, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_cmp.c", 394);
      int v4 = 0;
    }
  }
  else
  {
    ERR_put_error(11, 4095, 117, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/x509/x509_cmp.c", 400);
    int v4 = -2;
  }
  return v4 > 0;
}

STACK *X509_chain_up_ref(STACK *a1)
{
  uint64_t v1 = sk_dup(a1);
  if (sk_num(v1))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = sk_value(v1, v2);
      X509_up_ref((uint64_t)v3);
      ++v2;
    }
    while (v2 < sk_num(v1));
  }
  return v1;
}

BIGNUM *BN_new(void)
{
  v0 = (BIGNUM *)malloc_type_calloc(1uLL, 0x18uLL, 0x1010040113C0ABBuLL);
  uint64_t v1 = v0;
  if (v0) {
    v0->flagunsigned int s = 1;
  }
  else {
    ERR_put_error(3, 4095, 65, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/bn/bn_lib.c", 77);
  }
  return v1;
}

void BN_init(BIGNUM *a1)
{
  a1->d = 0;
  *(void *)&a1->int top = 0;
  *(void *)&a1->neg = 0;
}

void BN_clear(BIGNUM *a)
{
  d = a->d;
  if (d) {
    explicit_bzero(d, 8 * a->dmax);
  }
  a->int top = 0;
  a->neg = 0;
}

void BN_free(BIGNUM *a)
{
  if (a)
  {
    flagunsigned int s = a->flags;
    if ((flags & 2) == 0)
    {
      freezero(a->d, 8 * a->dmax);
      flagunsigned int s = a->flags;
    }
    if ((flags & 1) == 0)
    {
      explicit_bzero(a, 0x18uLL);
    }
    freezero(a, 0x18uLL);
  }
}

uint64_t BN_get_flags(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 20) & a2;
}

uint64_t BN_set_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) |= a2;
  return result;
}

__n128 BN_with_flags(__n128 *a1, __n128 *a2, int a3)
{
  __n128 result = *a2;
  unsigned int v4 = a1[1].n128_u32[1] & 1 | a3 | a2[1].n128_u32[1] & 0xFFFFFFFC | 2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a1[1].n128_u32[1] = v4;
  return result;
}

const BIGNUM *BN_value_one(void)
{
  return (const BIGNUM *)&bn_value_one;
}

uint64_t bn_word_clz(unint64_t a1)
{
  uint64_t v1 = 0;
  unint64_t v2 = 64;
  uint64_t v3 = 64;
  do
  {
    v3 += (v1 & (v2 >> 1)) - ((v2 >> 1) & ~v1);
    if (a1 >> v3) {
      uint64_t v1 = -1;
    }
    else {
      uint64_t v1 = 0;
    }
    BOOL v4 = v2 > 3;
    v2 >>= 1;
  }
  while (v4);
  int v5 = v1 - v3;
  if (a1) {
    int v6 = 64;
  }
  else {
    int v6 = 65;
  }
  return (v6 + v5);
}

int BN_num_bits_word(unint64_t a1)
{
  uint64_t v1 = 0;
  unint64_t v2 = 64;
  uint64_t v3 = 64;
  do
  {
    v3 += (v1 & (v2 >> 1)) - ((v2 >> 1) & ~v1);
    if (a1 >> v3) {
      uint64_t v1 = -1;
    }
    else {
      uint64_t v1 = 0;
    }
    BOOL v4 = v2 > 3;
    v2 >>= 1;
  }
  while (v4);
  return v3 - v1 - (a1 == 0);
}

int BN_num_bits(const BIGNUM *a)
{
  int top = a->top;
  if (top < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  d = a->d;
  uint64_t v4 = a->top;
  do
  {
    uint64_t v5 = *d++;
    v2 |= v5;
    --v4;
  }
  while (v4);
  if (!v2) {
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = top - 1;
  unint64_t v8 = a->d[v7];
  unint64_t v9 = 64;
  uint64_t v10 = 64;
  do
  {
    v10 += (v6 & (v9 >> 1)) - ((v9 >> 1) & ~v6);
    if (v8 >> v10) {
      uint64_t v6 = -1;
    }
    else {
      uint64_t v6 = 0;
    }
    BOOL v11 = v9 > 3;
    v9 >>= 1;
  }
  while (v11);
  return v10 - v6 - (v8 == 0) + (v7 << 6);
}

BOOL BN_is_zero(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 1;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(uint64_t **)a1;
  do
  {
    uint64_t v4 = *v3++;
    v2 |= v4;
    --v1;
  }
  while (v1);
  return v2 == 0;
}

uint64_t *bn_correct_top(uint64_t *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = v1 - 1;
      if (*(void *)(v2 + 8 * (v1 - 1))) {
        break;
      }
      *((_DWORD *)result + 2) = --v1;
    }
    while ((unint64_t)(v3 + 1) > 1);
  }
  return result;
}

uint64_t bn_expand(uint64_t a1, unsigned int a2)
{
  if (a2 <= 0x7FFFFFC0) {
    return bn_wexpand(a1, (a2 + 63) >> 6);
  }
  else {
    return 0;
  }
}

uint64_t bn_wexpand(uint64_t a1, size_t count)
{
  if ((count & 0x80000000) != 0) {
    return 0;
  }
  unsigned int v2 = count;
  unint64_t v4 = *(int *)(a1 + 12);
  if ((int)v4 >= (int)v2) {
    return 1;
  }
  if (v2 < 0x800000)
  {
    if ((*(unsigned char *)(a1 + 20) & 2) != 0)
    {
      int v5 = 105;
      int v6 = 221;
      goto LABEL_12;
    }
    unint64_t v8 = recallocarray(*(char **)a1, v4, v2, 8uLL);
    if (!v8)
    {
      int v5 = 65;
      int v6 = 227;
      goto LABEL_12;
    }
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + 12) = v2;
    return 1;
  }
  int v5 = 114;
  int v6 = 217;
LABEL_12:
  ERR_put_error(3, 4095, v5, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/bn/bn_lib.c", v6);
  return 0;
}

BIGNUM *__cdecl BN_dup(const BIGNUM *a)
{
  if (!a) {
    return 0;
  }
  unsigned int v2 = BN_new();
  uint64_t v3 = v2;
  if (v2 && !BN_copy(v2, a))
  {
    BN_free(v3);
    return 0;
  }
  return v3;
}

BOOL bn_copy(BIGNUM *a1, const BIGNUM *a2)
{
  return BN_copy(a1, a2) != 0;
}

BIGNUM *__cdecl BN_copy(BIGNUM *a, const BIGNUM *b)
{
  unsigned int v2 = a;
  if (a != b)
  {
    if (bn_wexpand((uint64_t)a, b->top))
    {
      int top = b->top;
      if (top >= 1)
      {
        d = b->d;
        int v6 = v2->d;
        unsigned int v7 = top + 1;
        do
        {
          unint64_t v8 = *d++;
          *v6++ = v8;
          --v7;
        }
        while (v7 > 1);
      }
      int neg = b->neg;
      int v10 = v2->flags | b->flags & 4;
      v2->int top = top;
      v2->int neg = neg;
      v2->flagunsigned int s = v10;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void BN_swap(BIGNUM *a, BIGNUM *b)
{
  flagunsigned int s = b->flags;
  d = a->d;
  int neg = a->neg;
  int v4 = a->flags;
  a->d = b->d;
  uint64_t v6 = *(void *)&b->top;
  b->d = d;
  uint64_t v7 = *(void *)&a->top;
  *(void *)&a->int top = v6;
  a->int neg = b->neg;
  *(void *)&b->int top = v7;
  a->flagunsigned int s = flags & 2 | v4 & 1;
  b->int neg = neg;
  b->flagunsigned int s = v4 & 2 | flags & 1;
}

unint64_t BN_get_word(const BIGNUM *a)
{
  int top = a->top;
  if (top > 1) {
    return -1;
  }
  if (top == 1) {
    return *a->d;
  }
  return 0;
}

int BN_set_word(BIGNUM *a, unint64_t w)
{
  int result = bn_wexpand((uint64_t)a, 1uLL);
  if (result)
  {
    a->int neg = 0;
    *a->d = w;
    a->int top = w != 0;
    return 1;
  }
  return result;
}

int BN_ucmp(const BIGNUM *a, const BIGNUM *b)
{
  uint64_t top = a->top;
  int v3 = b->top;
  if ((int)top < v3) {
    return -1;
  }
  if ((int)top > v3) {
    return 1;
  }
  uint64_t v5 = top - 1;
  do
  {
    if ((int)v5 + 1 < 1) {
      return 0;
    }
    unint64_t v6 = a->d[v5];
    unint64_t v7 = b->d[v5--];
  }
  while (v6 == v7);
  if (v6 > v7) {
    return 1;
  }
  else {
    return -1;
  }
}

int BN_cmp(const BIGNUM *a, const BIGNUM *b)
{
  if (a && b)
  {
    int neg = a->neg;
    int v3 = b->neg - neg;
    if (!v3)
    {
      if (neg)
      {
        uint64_t top = b->top;
        int v5 = a->top;
        if ((int)top >= v5)
        {
          if ((int)top <= v5)
          {
            uint64_t v6 = top - 1;
            while ((int)v6 + 1 >= 1)
            {
              unint64_t v7 = b->d[v6];
              unint64_t v8 = a->d[v6--];
              BOOL v9 = v7 > v8;
              if (v7 != v8) {
                goto LABEL_22;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      else
      {
        uint64_t v11 = a->top;
        int v12 = b->top;
        if ((int)v11 >= v12)
        {
          if ((int)v11 <= v12)
          {
            uint64_t v13 = v11 - 1;
            while ((int)v13 + 1 >= 1)
            {
              unint64_t v14 = a->d[v13];
              unint64_t v15 = b->d[v13--];
              BOOL v9 = v14 > v15;
              if (v14 != v15)
              {
LABEL_22:
                if (v9) {
                  return 1;
                }
                else {
                  return -1;
                }
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return -1;
    }
  }
  else if (a)
  {
    return -1;
  }
  else
  {
    return b != 0;
  }
  return v3;
}

int BN_set_bit(BIGNUM *a, int n)
{
  if (n < 0) {
    return 0;
  }
  char v2 = n;
  signed int v4 = n >> 6;
  if (a->top <= (signed int)(n >> 6))
  {
    int result = bn_wexpand((uint64_t)a, (v4 + 1));
    if (!result) {
      return result;
    }
    uint64_t top = a->top;
    if (v4 >= (int)top) {
      bzero(&a->d[top], 8 * (v4 - top) + 8);
    }
    a->uint64_t top = v4 + 1;
  }
  int result = 1;
  a->d[v4] |= 1 << (v2 & 0x3F);
  return result;
}

int BN_clear_bit(BIGNUM *a, int n)
{
  if (n < 0) {
    return 0;
  }
  uint64_t top = a->top;
  if ((int)top <= (int)(n >> 6)) {
    return 0;
  }
  int v3 = 1;
  d = a->d;
  a->d[n >> 6] &= ~(1 << n);
  if ((int)top >= 1)
  {
    do
    {
      uint64_t v5 = top - 1;
      if (d[(top - 1)]) {
        break;
      }
      a->uint64_t top = --top;
    }
    while ((unint64_t)(v5 + 1) > 1);
    return 1;
  }
  return v3;
}

int BN_is_bit_set(const BIGNUM *a, int n)
{
  if (n < 0 || a->top <= (signed int)(n >> 6)) {
    LODWORD(v2) = 0;
  }
  else {
    return (a->d[n >> 6] >> n) & 1;
  }
  return v2;
}

int BN_mask_bits(BIGNUM *a, int n)
{
  if (n < 0) {
    return 0;
  }
  unsigned int v2 = n >> 6;
  if ((signed int)(n >> 6) >= a->top) {
    return 0;
  }
  if ((n & 0x3F) != 0)
  {
    a->d[v2++] &= ~(-1 << (n & 0x3F));
    a->uint64_t top = v2;
    goto LABEL_7;
  }
  a->uint64_t top = v2;
  if (n >= 0x40)
  {
LABEL_7:
    d = a->d;
    uint64_t v5 = v2 - 1;
    do
    {
      if (d[v5]) {
        break;
      }
      a->uint64_t top = v5;
      unint64_t v6 = v5-- + 1;
    }
    while (v6 > 1);
  }
  return 1;
}

void BN_set_negative(BIGNUM *b, int n)
{
  uint64_t top = b->top;
  if ((int)top < 1)
  {
    LOBYTE(v6) = -2;
  }
  else
  {
    uint64_t v3 = 0;
    d = b->d;
    do
    {
      uint64_t v5 = *d++;
      v3 |= v5;
      --top;
    }
    while (top);
    uint64_t v6 = ~(v3 == 0);
  }
  b->int neg = v6 & (n != 0);
}

uint64_t BN_consttime_swap(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 == a3) {
    BN_consttime_swap_cold_1();
  }
  if ((result & (result - 1)) != 0) {
    BN_consttime_swap_cold_2();
  }
  unint64_t v4 = ((unint64_t)(result - 1) >> 63) - 1;
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = (*(_DWORD *)(a3 + 8) ^ v5) & v4;
  *(_DWORD *)(a2 + 8) = v6 ^ v5;
  *(_DWORD *)(a3 + 8) ^= v6;
  switch(a4)
  {
    case 1:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_27;
    case 2:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_26;
    case 3:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_25;
    case 4:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_24;
    case 5:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_23;
    case 6:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_22;
    case 7:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_21;
    case 8:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_20;
    case 9:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_19;
    case 10:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      goto LABEL_18;
    default:
      unint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void **)a3;
      if (a4 >= 11)
      {
        uint64_t v9 = 10;
        do
        {
          uint64_t v10 = v7[v9];
          unint64_t v11 = (v8[v9] ^ v10) & v4;
          v7[v9] = v11 ^ v10;
          v8[v9++] ^= v11;
        }
        while (a4 != v9);
      }
LABEL_18:
      uint64_t v12 = v7[9];
      unint64_t v13 = (v8[9] ^ v12) & v4;
      v7[9] = v13 ^ v12;
      v8[9] ^= v13;
LABEL_19:
      uint64_t v14 = v7[8];
      unint64_t v15 = (v8[8] ^ v14) & v4;
      v7[8] = v15 ^ v14;
      v8[8] ^= v15;
LABEL_20:
      uint64_t v16 = v7[7];
      unint64_t v17 = (v8[7] ^ v16) & v4;
      v7[7] = v17 ^ v16;
      v8[7] ^= v17;
LABEL_21:
      uint64_t v18 = v7[6];
      unint64_t v19 = (v8[6] ^ v18) & v4;
      v7[6] = v19 ^ v18;
      v8[6] ^= v19;
LABEL_22:
      uint64_t v20 = v7[5];
      unint64_t v21 = (v8[5] ^ v20) & v4;
      v7[5] = v21 ^ v20;
      v8[5] ^= v21;
LABEL_23:
      uint64_t v22 = v7[4];
      unint64_t v23 = (v8[4] ^ v22) & v4;
      void v7[4] = v23 ^ v22;
      v8[4] ^= v23;
LABEL_24:
      uint64_t v24 = v7[3];
      unint64_t v25 = (v8[3] ^ v24) & v4;
      void v7[3] = v25 ^ v24;
      v8[3] ^= v25;
LABEL_25:
      uint64_t v26 = v7[2];
      unint64_t v27 = (v8[2] ^ v26) & v4;
      v7[2] = v27 ^ v26;
      v8[2] ^= v27;
LABEL_26:
      uint64_t v28 = v7[1];
      unint64_t v29 = (v8[1] ^ v28) & v4;
      v7[1] = v29 ^ v28;
      v8[1] ^= v29;
LABEL_27:
      unint64_t v30 = (*v8 ^ *v7) & v4;
      *v7 ^= v30;
      *v8 ^= v30;
      return result;
  }
}

uint64_t BN_swap_ct(uint64_t a1, uint64_t a2, uint64_t a3, size_t count)
{
  if (a2 == a3) {
    return 1;
  }
  size_t v4 = count;
  if (count >> 31) {
    return 0;
  }
  uint64_t result = bn_wexpand(a2, count);
  if (result)
  {
    uint64_t result = bn_wexpand(a3, v4);
    if (result)
    {
      int v9 = *(_DWORD *)(a2 + 8);
      if (v9 > (int)v4 || (int v10 = *(_DWORD *)(a3 + 8), v10 > (int)v4))
      {
        ERR_put_error(3, 4095, 106, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/bn/bn_lib.c", 565);
        return 0;
      }
      unint64_t v11 = (((a1 - 1) & (unint64_t)~a1) >> 63) - 1;
      int v12 = (v10 ^ v9) & v11;
      *(_DWORD *)(a2 + 8) = v12 ^ v9;
      *(_DWORD *)(a3 + 8) ^= v12;
      int v13 = *(_DWORD *)(a2 + 16);
      int v14 = *(_DWORD *)(a2 + 20);
      int v15 = (*(_DWORD *)(a3 + 16) ^ v13) & v11;
      int v16 = v11 & (*(_DWORD *)(a3 + 20) ^ v14) & 4;
      *(_DWORD *)(a2 + 16) = v15 ^ v13;
      *(_DWORD *)(a2 + 20) = v16 ^ v14;
      int v17 = v16 ^ *(_DWORD *)(a3 + 20);
      *(_DWORD *)(a3 + 16) ^= v15;
      *(_DWORD *)(a3 + 20) = v17;
      if (v4)
      {
        uint64_t v18 = *(void **)a2;
        unint64_t v19 = *(void **)a3;
        uint64_t result = 1;
        do
        {
          unint64_t v20 = (*v19 ^ *v18) & v11;
          *v18++ ^= v20;
          *v19++ ^= v20;
          --v4;
        }
        while (v4);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t BN_zero(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t BN_one(uint64_t a1)
{
  uint64_t v2 = 1;
  if (!bn_wexpand(a1, 1uLL)) {
    return 0;
  }
  *(_DWORD *)(a1 + 16) = 0;
  **(void **)a1 = 1;
  *(_DWORD *)(a1 + 8) = 1;
  return v2;
}

uint64_t BN_abs_is_word(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 1 && **(void **)a1 == a2) {
    return 1;
  }
  BOOL v4 = v2 == 0;
  return !a2 && v4;
}

BOOL BN_is_one(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 1 && **(void **)a1 == 1 && *(_DWORD *)(a1 + 16) == 0;
}

BOOL BN_is_word(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 1 && **(void **)a1 == a2)
  {
    if (!a2) {
      return 1;
    }
    return *(_DWORD *)(a1 + 16) == 0;
  }
  else
  {
    return !a2 && v2 == 0;
  }
}

uint64_t BN_is_odd(uint64_t a1)
{
  if (*(int *)(a1 + 8) < 1) {
    return 0;
  }
  else {
    return **(_DWORD **)a1 & 1;
  }
}

BOOL BN_is_negative(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) != 0;
}

char *BN_options(void)
{
  if ((BN_options_init & 1) == 0)
  {
    BN_options_init = 1;
    snprintf(BN_options_data, 0x10uLL, "bn(%d,%d)", 64, 64);
  }
  return BN_options_data;
}

uint64_t BN_security_bits(int a1, int a2)
{
  if (a1 <= 15359)
  {
    if (a1 <= 7679)
    {
      if (a1 <= 3071)
      {
        if (a1 <= 2047)
        {
          if (a1 < 1024) {
            return 0;
          }
          uint64_t result = 80;
        }
        else
        {
          uint64_t result = 112;
        }
      }
      else
      {
        uint64_t result = 128;
      }
    }
    else
    {
      uint64_t result = 192;
    }
  }
  else
  {
    uint64_t result = 256;
  }
  if (a2 == -1) {
    return result;
  }
  if (a2 < 160) {
    return 0;
  }
  if ((int)(a2 >> 1) >= (int)result) {
    return result;
  }
  else {
    return a2 >> 1;
  }
}

void *BN_GENCB_new()
{
  return malloc_type_calloc(1uLL, 0x18uLL, 0x1080040C4643742uLL);
}

void BN_GENCB_free(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t BN_GENCB_set_old(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)uint64_t result = 1;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t BN_GENCB_set(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)uint64_t result = 2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t BN_GENCB_get_arg(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void BN_consttime_swap_cold_1()
{
  __assert_rtn("BN_consttime_swap", "bn_lib.c", 508, "a != b");
}

void BN_consttime_swap_cold_2()
{
  __assert_rtn("BN_consttime_swap", "bn_lib.c", 509, "(condition & (condition - 1)) == 0");
}

int EVP_VerifyFinal(EVP_MD_CTX *ctx, const unsigned __int8 *sigbuf, unsigned int siglen, EVP_PKEY *pkey)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned int s = 0;
  long long v11 = 0u;
  memset(&v10, 0, sizeof(v10));
  EVP_MD_CTX_init(&v10);
  if (EVP_MD_CTX_copy_ex(&v10, ctx) && EVP_DigestFinal_ex(&v10, md, &s))
  {
    EVP_MD_CTX_cleanup(&v10);
    int v6 = (uint64_t *)EVP_PKEY_CTX_new((uint64_t)pkey, 0);
    unint64_t v7 = v6;
    if (v6 && (int)EVP_PKEY_verify_init(v6) >= 1)
    {
      int v8 = -1;
      if ((int)EVP_PKEY_CTX_ctrl(v7, -1, 248) >= 1) {
        int v8 = EVP_PKEY_verify(v7);
      }
    }
    else
    {
      int v8 = -1;
    }
  }
  else
  {
    unint64_t v7 = 0;
    int v8 = 0;
  }
  EVP_PKEY_CTX_free((EVP_PKEY **)v7);
  return v8;
}

void ASN1_add_oid_module(void)
{
}

uint64_t oid_module_init(const CONF_IMODULE *a1, const CONF *a2)
{
  value = CONF_imodule_get_value(a1);
  sectioint n = NCONF_get_section(a2, value);
  if (!section)
  {
    int v28 = 172;
    int v29 = 84;
    goto LABEL_32;
  }
  int v5 = section;
  if (sk_num(section) < 1) {
    return 1;
  }
  int v6 = 0;
  uint64_t v7 = MEMORY[0x263EF8318];
LABEL_4:
  int v8 = sk_value(v5, v6);
  int v9 = (const char *)*((void *)v8 + 1);
  EVP_MD_CTX v10 = (char *)*((void *)v8 + 2);
  long long v11 = strrchr(v10, 44);
  if (v11)
  {
    int v12 = v11;
    uint64_t v14 = v11 + 1;
    unsigned __int8 v13 = v11[1];
    if (!v13) {
      goto LABEL_31;
    }
    if (v11[1] < 0) {
      goto LABEL_9;
    }
    while ((*(_DWORD *)(v7 + 4 * v13 + 60) & 0x4000) != 0)
    {
      while (1)
      {
        unsigned __int8 v15 = *++v14;
        unsigned __int8 v13 = v15;
        if ((v15 & 0x80) == 0) {
          break;
        }
LABEL_9:
        if (!__maskrune(v13, 0x4000uLL)) {
          goto LABEL_12;
        }
      }
    }
LABEL_12:
    int v16 = OBJ_create(v14, v9, 0);
    if (!v16) {
      goto LABEL_31;
    }
    int v17 = v16;
    size_t v18 = v12 - v10;
    do
    {
      unint64_t v19 = v10;
      size_t v20 = v18;
      uint64_t v21 = *v10;
      if (*v10 < 0) {
        int v22 = __maskrune(v21, 0x4000uLL);
      }
      else {
        int v22 = *(_DWORD *)(v7 + 4 * v21 + 60) & 0x4000;
      }
      ++v10;
      size_t v18 = v20 - 1;
    }
    while (v22);
    while (1)
    {
      int v23 = *--v12;
      uint64_t v24 = v23;
      if (v23 < 0)
      {
        if (!__maskrune(v24, 0x4000uLL))
        {
LABEL_26:
          unint64_t v25 = (char *)malloc_type_malloc(v20 + 1, 0xADD47970uLL);
          if (!v25) {
            goto LABEL_31;
          }
          uint64_t v26 = v25;
          memcpy(v25, v19, v20);
          v26[v20] = 0;
          OBJ_nid2obj(v17)->lint n = v26;
LABEL_28:
          if (++v6 >= sk_num(v5)) {
            return 1;
          }
          goto LABEL_4;
        }
      }
      else if ((*(_DWORD *)(v7 + 4 * v24 + 60) & 0x4000) == 0)
      {
        goto LABEL_26;
      }
      --v20;
      if (v12 == v19) {
        goto LABEL_31;
      }
    }
  }
  if (OBJ_create(v10, v9, v9)) {
    goto LABEL_28;
  }
LABEL_31:
  int v28 = 171;
  int v29 = 90;
LABEL_32:
  ERR_put_error(13, 4095, v28, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/asn1/asn_moid.c", v29);
  return 0;
}

ASN1_VALUE *cms_DigestedData_create(const EVP_MD *a1)
{
  int v2 = CMS_ContentInfo_new();
  if (v2)
  {
    uint64_t v3 = ASN1_item_new(&CMS_DigestedData_it);
    if (v3)
    {
      BOOL v4 = v3;
      *(void *)int v2 = OBJ_nid2obj(25);
      *((void *)v2 + ripemd160_block_data_order(c, b, 1) = v4;
      *(void *)BOOL v4 = 0;
      int v5 = OBJ_nid2obj(21);
      int v6 = (X509_ALGOR *)*((void *)v4 + 1);
      **((void **)v4 + 2) = v5;
      X509_ALGOR_set_md(v6, a1);
    }
    else
    {
      CMS_ContentInfo_free(v2);
      return 0;
    }
  }
  return v2;
}

BIO *cms_DigestedData_init_bio(uint64_t a1)
{
  return cms_DigestAlgorithm_init_bio(*(X509_ALGOR **)(*(void *)(a1 + 8) + 8));
}

BOOL cms_DigestedData_do_final(uint64_t a1, BIO *a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v6 = (EVP_MD_CTX *)EVP_MD_CTX_new();
  uint64_t v7 = v6;
  unsigned int s = 0;
  if (v6)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if (!cms_DigestAlgorithm_find_ctx(v6, a2, *(X509_ALGOR **)(v8 + 8))
      || EVP_DigestFinal_ex(v7, md, &s) < 1)
    {
      goto LABEL_10;
    }
    if (!a3)
    {
      BOOL v12 = ASN1_STRING_set(*(ASN1_STRING **)(v8 + 24), md, s) != 0;
      goto LABEL_11;
    }
    uint64_t v9 = *(void *)(v8 + 24);
    if (s == *(_DWORD *)v9)
    {
      if (!memcmp(md, *(const void **)(v9 + 8), s))
      {
        BOOL v12 = 1;
        goto LABEL_11;
      }
      int v10 = 158;
      int v11 = 137;
    }
    else
    {
      int v10 = 121;
      int v11 = 132;
    }
  }
  else
  {
    int v10 = 65;
    int v11 = 118;
  }
  ERR_put_error(46, 4095, v10, "/Library/Caches/com.apple.xbs/Sources/Shortcuts/ShortcutsActions/ActionKit/External/libressl/libressl/crypto/cms/cms_dd.c", v11);
LABEL_10:
  BOOL v12 = 0;
LABEL_11:
  EVP_MD_CTX_free(v7);
  return v12;
}

void *CBS_init(void *result, uint64_t a2, uint64_t a3)
{
  X509_EXTENSION *result = a2;
  result[1] = a3;
  result[2] = a3;
  return result;
}

void *CBS_dup(void *result, void *a2)
{
  uint64_t v2 = result[2];
  a2[1] = v2;
  a2[2] = v2;
  uint64_t v3 = result[1];
  *a2 = *result;
  a2[1] = v3;
  return result;
}

uint64_t CBS_data(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t CBS_len(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t CBS_offset(uint64_t a1)
{
  return *(void *)(a1 + 8) - *(void *)(a1 + 16);
}

uint64_t CBS_skip(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  BOOL v3 = v2 >= a2;
  unint64_t v4 = v2 - a2;
  if (!v3) {
    return 0;
  }
  *a1 += a2;
  a1[2] = v4;
  return 1;
}

uint64_t CBS_stow(uint64_t a1, void **a2, void *a3)
{
  free(*a2);
  *a2 = 0;
  *a3 = 0;
  size_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t result = (uint64_t)malloc_type_malloc(v6, 0x62F484EBuLL);
    *a2 = (void *)result;
    if (!result) {
      return result;
    }
    memcpy((void *)result, *(const void **)a1, *(void *)(a1 + 16));
    *a3 = *(void *)(a1 + 16);
  }
  return 1;
}

BOOL CBS_strdup(uint64_t a1, void **a2)
{
  free(*a2);
  *a2 = 0;
  unint64_t v4 = *(void **)a1;
  size_t v5 = *(void *)(a1 + 16);
  size_t v6 = memchr(v4, 0, v5);
  BOOL result = 0;
  if (!v6)
  {
    uint64_t v8 = strndup((const char *)v4, v5);
    *a2 = v8;
    return v8 != 0;
  }
  return result;
}

BOOL CBS_contains_zero_byte(uint64_t a1)
{
  return memchr(*(void **)a1, 0, *(void *)(a1 + 16)) != 0;
}

uint64_t CBS_write_bytes(uint64_t a1, void *__dst, size_t a3, void *a4)
{
  size_t v5 = *(void *)(a1 + 16);
  if (v5 > a3) {
    return 0;
  }
  memmove(__dst, *(const void **)a1, v5);
  if (a4) {
    *a4 = *(void *)(a1 + 16);
  }
  return 1;
}

BOOL CBS_mem_equal(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  return *(void *)(a1 + 16) == a3 && timingsafe_memcmp(*(unsigned __int8 **)a1, a2, a3) == 0;
}

uint64_t CBS_get_u8(void *a1, unsigned char *a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return 0;
  }
  BOOL v3 = (unsigned char *)(*a1)++;
  a1[2] = v2 - 1;
  *a2 = *v3;
  return 1;
}

uint64_t CBS_get_u16(unsigned __int16 **a1, _WORD *a2)
{
  unint64_t v2 = (unint64_t)a1[2];
  BOOL v3 = v2 >= 2;
  unint64_t v4 = v2 - 2;
  if (!v3) {
    return 0;
  }
  size_t v6 = (*a1)++;
  a1[2] = (unsigned __int16 *)v4;
  *a2 = bswap32(*v6) >> 16;
  return 1;
}

uint64_t CBS_get_u24(uint64_t *a1, int *a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = v2 - 3;
  if (v2 < 3) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = *a1;
  *a1 += 3;
  a1[2] = v3;
  do
    int v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 3);
  *a2 = v6;
  return 1;
}

uint64_t CBS_get_u32(uint64_t *a1, int *a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = v2 - 4;
  if (v2 < 4) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = *a1;
  *a1 += 4;
  a1[2] = v3;
  do
    int v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 4);
  *a2 = v6;
  return 1;
}

uint64_t CBS_get_u64(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = v2 - 8;
  if (v2 < 8) {
    return 0;
  }
  uint64_t v5 = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = *a1;
  uint64_t v8 = *a1 + 4;
  *a1 = v8;
  a1[2] = v2 - 4;
  do
    uint64_t v6 = *(unsigned __int8 *)(v7 + v5++) | (v6 << 8);
  while (v5 != 4);
  uint64_t v9 = 0;
  LODWORD(v10) = 0;
  *a1 = v7 + 8;
  a1[2] = v3;
  do
    uint64_t v10 = *(unsigned __int8 *)(v8 + v9++) | (v10 << 8);
  while (v9 != 4);
  *a2 = v10 | (v6 << 32);
  return 1;
}

uint64_t CBS_get_last_u8(void *a1, unsigned char *a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return 0;
  }
  *a2 = *(unsigned char *)(v2 + *a1 - 1);
  --a1[2];
  return 1;
}

uint64_t CBS_get_bytes(uint64_t *a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a1[2];
  BOOL v4 = v3 >= a3;
  unint64_t v5 = v3 - a3;
  if (!v4) {
    return 0;
  }
  uint64_t v7 = *a1;
  *a1 += a3;
  a1[2] = v5;
  *a2 = v7;
  a2[1] = a3;
  a2[2] = a3;
  return 1;
}

uint64_t CBS_get_u8_length_prefixed(unsigned __int8 **a1, unint64_t *a2)
{
  return cbs_get_length_prefixed(a1, a2, 1uLL);
}

uint64_t cbs_get_length_prefixed(unsigned __int8 **a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = (unint64_t)a1[2];
  BOOL v4 = v3 >= a3;
  unint64_t v5 = v3 - a3;
  if (!v4) {
    return 0;
  }
  uint64_t v6 = *a1;
  unint64_t v7 = (unint64_t)&(*a1)[a3];
  *a1 = (unsigned __int8 *)v7;
  a1[2] = (unsigned __int8 *)v5;
  if (a3)
  {
    LODWORD(v8) = 0;
    do
    {
      unsigned int v9 = *v6++;
      unint64_t v8 = v9 | (v8 << 8);
      --a3;
    }
    while (a3);
    if (v5 < v8) {
      return 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  *a1 = (unsigned __int8 *)(v7 + v8);
  a1[2] = (unsigned __int8 *)(v5 - v8);
  *a2 = v7;
  a2[1] = v8;
  uint64_t result = 1;
  a2[2] = v8;
  return result;
}

uint64_t CBS_get_u16_length_prefixed(unsigned __int8 **a1, unint64_t *a2)
{
  return cbs_get_length_prefixed(a1, a2, 2uLL);
}

uint64_t CBS_get_u24_length_prefixed(unsigned __int8 **a1, unint64_t *a2)
{
  return cbs_get_length_prefixed(a1, a2, 3uLL);
}

uint64_t CBS_peek_u8(uint64_t a1, unsigned char *a2)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  *a2 = **(unsigned char **)a1;
  return 1;
}

uint64_t CBS_peek_u16(unsigned __int16 **a1, _WORD *a2)
{
  if ((unint64_t)a1[2] < 2) {
    return 0;
  }
  *a2 = bswap32(**a1) >> 16;
  return 1;
}

uint64_t CBS_peek_u24(void *a1, int *a2)
{
  if (a1[2] < 3uLL) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  do
    int v4 = *(unsigned __int8 *)(*a1 + v3++) | (v4 << 8);
  while (v3 != 3);
  *a2 = v4;
  return 1;
}

uint64_t CBS_peek_u32(void *a1, int *a2)
{
  if (a1[2] < 4uLL) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 0;
  do
    int v4 = *(unsigned __int8 *)(*a1 + v3++) | (v4 << 8);
  while (v3 != 4);
  *a2 = v4;
  return 1;
}

uint64_t CBS_peek_last_u8(void *a1, unsigned char *a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return 0;
  }
  *a2 = *(unsigned char *)(v2 + *a1 - 1);
  return 1;
}

uint64_t CBS_get_any_asn1_element(unsigned __int8 **a1, void *a2, _DWORD *a3, uint64_t *a4)
{
  return cbs_get_any_asn1_element_internal(a1, a2, a3, a4, 1);
}

uint64_t cbs_get_any_asn1_element_internal(unsigned __int8 **a1, void *a2, _DWORD *a3, uint64_t *a4, int a5)
{
  unint64_t v5 = (unint64_t)a1[2];
  if (v5 < 2) {
    return 0;
  }
  uint64_t v6 = (uint64_t)*a1;
  int v7 = **a1;
  if ((~v7 & 0x1F) == 0) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(v6 + 1);
  if (a3) {
    *a3 = v7;
  }
  if ((v8 & 0x80) == 0)
  {
    unint64_t v9 = v8 + 2;
    if (!a4) {
      goto LABEL_9;
    }
    uint64_t v10 = 2;
    goto LABEL_8;
  }
  unint64_t v13 = v8 & 0x7F;
  if (v13 == 127) {
    return 0;
  }
  uint64_t v14 = (unsigned __int8 *)(v6 + 2);
  if (v13)
  {
    unint64_t v15 = v5 - 2;
    BOOL v16 = (v13 - 5) >= 0xFFFFFFFC && v15 >= v13;
    if (!v16) {
      return 0;
    }
    unsigned int v17 = 0;
    unint64_t v18 = v13;
    do
    {
      int v19 = *v14++;
      unsigned int v17 = v19 | (v17 << 8);
      --v18;
    }
    while (v18);
    if (v17 < 0x80 || !(v17 >> (8 * v13 - 8))) {
      return 0;
    }
    uint64_t v10 = v13 + 2;
    unint64_t v9 = v10 + v17;
    if (!a4)
    {
LABEL_9:
      int v11 = a1[2];
      BOOL v16 = (unint64_t)v11 >= v9;
      BOOL v12 = &v11[-v9];
      if (!v16) {
        return 0;
      }
      *a1 = (unsigned __int8 *)(v6 + v9);
      a1[2] = v12;
      if (a2) {
        goto LABEL_12;
      }
      return 1;
    }
LABEL_8:
    *a4 = v10;
    goto LABEL_9;
  }
  if (!a5 && (v7 & 0x20) != 0)
  {
    if (a4)
    {
      *a4 = 2;
      unint64_t v5 = (unint64_t)a1[2];
      if (v5 < 2) {
        return 0;
      }
    }
    *a1 = v14;
    a1[2] = (unsigned __int8 *)(v5 - 2);
    if (a2)
    {
      unint64_t v9 = 2;
LABEL_12:
      *a2 = v6;
      a2[1] = v9;
      unint64_t v13 = 1;
      a2[2] = v9;
      return v13;
    }
    return 1;
  }
  return v13;
}

uint64_t CBS_get_asn1(unsigned __int8 **a1, void *a2, int a3)
{
  return cbs_get_asn1(a1, a2, a3, 1);
}

uint64_t cbs_get_asn1(unsigned __int8 **a1, void *a2, int a3, int a4)
{
  unint64_t v17 = 0;
  int v16 = 0;
  memset(v15, 0, sizeof(v15));
  if (a2) {
    int v7 = a2;
  }
  else {
    int v7 = v15;
  }
  int any_asn1_element_internal = cbs_get_any_asn1_element_internal(a1, v7, &v16, (uint64_t *)&v17, 1);
  uint64_t result = 0;
  if (any_asn1_element_internal) {
    BOOL v10 = v16 == a3;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    if (a4)
    {
      int v11 = v15;
      if (a2) {
        int v11 = a2;
      }
      unint64_t v12 = v11[2];
      BOOL v13 = v12 >= v17;
      unint64_t v14 = v12 - v17;
      if (!v13) {
        return 0;
      }
      *v7 += v17;
      v11[2] = v14;
    }
    return 1;
  }
  return result;
}

uint64_t CBS_get_asn1_element(unsigned __int8 **a1, void *a2, int a3)
{
  return cbs_get_asn1(a1, a2, a3, 0);
}

BOOL CBS_peek_asn1_tag(unsigned __int8 **a1, int a2)
{
  return (~a2 & 0x1F) != 0 && a1[2] != 0 && **a1 == a2;
}

uint64_t CBS_get_asn1_uint64(unsigned __int8 **a1, unint64_t *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  unint64_t v9 = 0;
  uint64_t result = cbs_get_asn1(a1, v8, 2, 1);
  if (result)
  {
    *a2 = 0;
    unint64_t v4 = v9;
    if (v9)
    {
      unint64_t v5 = (unsigned __int8 *)v8[0];
      if ((*(char *)v8[0] & 0x80000000) == 0 && (v9 < 2 || *(unsigned char *)v8[0] || *(char *)(v8[0] + 1) < 0))
      {
        unint64_t v6 = 0;
        while (!HIBYTE(v6))
        {
          *a2 = v6 << 8;
          unsigned __int8 v7 = *v5++;
          *a2 = v7 | (v6 << 8);
          unint64_t v6 = v7 | (v6 << 8);
          if (!--v4) {
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t CBS_get_optional_asn1(unsigned __int8 **a1, void *a2, int *a3, int a4)
{
  BOOL v5 = (~a4 & 0x1F) == 0 || a1[2] == 0;
  if (v5 || **a1 != a4)
  {
    int v6 = 0;
    goto LABEL_9;
  }
  int v6 = 1;
  uint64_t result = cbs_get_asn1(a1, a2, a4, 1);
  if (result)
  {
LABEL_9:
    *a3 = v6;
    return 1;
  }
  return result;
}

uint64_t CBS_get_optional_asn1_octet_string(unsigned __int8 **a1, void *a2, int *a3, int a4)
{
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  int v9 = 0;
  uint64_t result = CBS_get_optional_asn1(a1, v10, &v9, a4);
  if (result)
  {
    int v7 = v9;
    if (!v9)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      if (!a3) {
        return 1;
      }
      goto LABEL_6;
    }
    int asn1 = cbs_get_asn1(v10, a2, 4, 1);
    uint64_t result = 0;
    if (asn1 && !v11)
    {
      if (!a3) {
        return 1;
      }
LABEL_6:
      *a3 = v7;
      return 1;
    }
  }
  return result;
}

uint64_t CBS_get_optional_asn1_uint64(unsigned __int8 **a1, unint64_t *a2, int a3, unint64_t a4)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  int v8 = 0;
  uint64_t result = CBS_get_optional_asn1(a1, v9, &v8, a3);
  if (result)
  {
    if (v8)
    {
      int asn1_uint64 = CBS_get_asn1_uint64(v9, a2);
      uint64_t result = 0;
      if (!asn1_uint64 || v10) {
        return result;
      }
    }
    else
    {
      *a2 = a4;
    }
    return 1;
  }
  return result;
}

uint64_t CBS_get_optional_asn1_BOOL(unsigned __int8 **a1, int *a2, int a3, int a4)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  int v8 = 0;
  uint64_t result = CBS_get_optional_asn1(a1, v11, &v8, a3);
  if (result)
  {
    if (!v8)
    {
LABEL_9:
      *a2 = a4;
      return 1;
    }
    int asn1 = cbs_get_asn1(v11, v9, 1, 1);
    uint64_t result = 0;
    if (asn1 && v10 == 1 && !v12)
    {
      a4 = *(unsigned __int8 *)v9[0];
      if (*(unsigned char *)v9[0])
      {
        if (a4 != 255) {
          return 0;
        }
        a4 = 1;
      }
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t CBB_init(uint64_t a1, size_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a2) {
    size_t v3 = a2;
  }
  else {
    size_t v3 = 64;
  }
  unint64_t v4 = malloc_type_calloc(1uLL, v3, 0x80F5FDA0uLL);
  if (!v4) {
    return 0;
  }
  BOOL v5 = v4;
  uint64_t v6 = 1;
  int v7 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040A6225C5AuLL);
  if (!v7)
  {
    free(v5);
    return 0;
  }
  *int v7 = v5;
  v7[1] = 0;
  v7[2] = v3;
  *((unsigned char *)v7 + 24) = 1;
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 26) = 1;
  return v6;
}

uint64_t CBB_init_fixed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v6 = 1;
  int v7 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040A6225C5AuLL);
  if (!v7) {
    return 0;
  }
  *int v7 = a2;
  v7[1] = 0;
  v7[2] = a3;
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 26) = 1;
  *((unsigned char *)v7 + 24) = 0;
  return v6;
}

void CBB_cleanup(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*(unsigned char *)(v2 + 24))
    {
      freezero(*(void **)v2, *(void *)(v2 + 16));
      uint64_t v2 = *a1;
    }
    free((void *)v2);
  }
  *a1 = 0;
  a1[2] = 0;
}

uint64_t CBB_finish(uint64_t *a1, void *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 26)) {
    return 0;
  }
  uint64_t result = CBB_flush((uint64_t)a1);
  if (!result) {
    return result;
  }
  int v7 = (void *)*a1;
  if (*(unsigned char *)(*a1 + 24))
  {
    uint64_t result = 0;
    if (!a2 || !a3) {
      return result;
    }
  }
  else if (!a2)
  {
    goto LABEL_11;
  }
  if (*a2) {
    return 0;
  }
  *a2 = *v7;
  int v7 = (void *)*a1;
LABEL_11:
  if (a3) {
    *a3 = v7[1];
  }
  *int v7 = 0;
  CBB_cleanup(a1);
  return 1;
}

uint64_t CBB_flush(uint64_t a1)
{
  uint64_t v1 = *(char **)a1;
  if (*(void *)a1)
  {
    if (!*(void *)(a1 + 16)) {
      return 1;
    }
    uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
    if (!*(unsigned char *)(a1 + 24)) {
      return 1;
    }
    BOOL v5 = (uint64_t *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 8);
    if (!CBB_flush()) {
      return 0;
    }
    unint64_t v6 = v4 + v3;
    uint64_t v7 = *v5;
    if (v4 + v3 < (unint64_t)*v5) {
      return 0;
    }
    int v8 = *(char **)a1;
    unint64_t v9 = *(void *)(*(void *)a1 + 8);
    size_t v10 = v9 - v6;
    if (v9 < v6) {
      return 0;
    }
    LODWORD(v1ripemd160_block_data_order(c, b, 1) = *(unsigned __int8 *)(a1 + 24);
    if (!*(unsigned char *)(a1 + 25))
    {
LABEL_21:
      if (v11)
      {
        unint64_t v14 = v11 - 1;
        do
        {
          *(unsigned char *)(**(void **)a1 + *(void *)(a1 + 8) + v14) = v10;
          v10 >>= 8;
          --v14;
        }
        while (v14 < *(unsigned __int8 *)(a1 + 24));
      }
      if (v10) {
        return 0;
      }
      **(void **)(a1 + 16) = 0;
      *BOOL v5 = 0;
      *(void *)(a1 + 16) = 0;
      *(_WORD *)(a1 + 24) = 0;
      return 1;
    }
    uint64_t v1 = 0;
    if (v11 == 1 && v10 <= 0xFFFFFFFE)
    {
      if (v10 >> 24)
      {
        uint64_t v11 = 4;
      }
      else if (v10 >> 16)
      {
        uint64_t v11 = 3;
      }
      else if (v10 <= 0xFF)
      {
        if (v10 <= 0x7F)
        {
          LODWORD(v1ripemd160_block_data_order(c, b, 1) = 0;
          char v12 = v10;
          size_t v10 = 0;
          goto LABEL_20;
        }
        uint64_t v11 = 1;
      }
      else
      {
        uint64_t v11 = 2;
      }
      if (cbb_buffer_add(v8, 0, v11))
      {
        char v12 = v11 | 0x80;
        memmove((void *)(**(void **)a1 + v6 + v11), (const void *)(**(void **)a1 + v6), v10);
        int v8 = *(char **)a1;
        uint64_t v7 = *(void *)(a1 + 8);
LABEL_20:
        uint64_t v13 = *(void *)v8;
        *(void *)(a1 + 8) = v7 + 1;
        *(unsigned char *)(v13 + v7) = v12;
        *(unsigned char *)(a1 + 24) = v11;
        goto LABEL_21;
      }
      return 0;
    }
  }
  return (uint64_t)v1;
}

char *cbb_buffer_add(char *result, void *a2, uint64_t a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 1);
  unint64_t v5 = v4 + a3;
  if (__CFADD__(v4, a3)) {
    return 0;
  }
  int64_t v7 = *((void *)result + 2);
  if (v5 <= v7)
  {
LABEL_15:
    if (a2) {
      *a2 = *v3 + v3[1];
    }
    v3[1] = v5;
    return (char *)1;
  }
  if (!result[24]) {
    return 0;
  }
  if (2 * v7 < v5 || v7 < 0) {
    size_t v9 = v4 + a3;
  }
  else {
    size_t v9 = 2 * v7;
  }
  uint64_t result = recallocarray(*(char **)result, v7, v9, 1uLL);
  if (result)
  {
    *uint64_t v3 = result;
    v3[2] = v9;
    goto LABEL_15;
  }
  return result;
}

uint64_t CBB_discard_child(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 16);
  if (v1)
  {
    *(void *)(*(void *)result + 8) = *(void *)(result + 8);
    *uint64_t v1 = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
  }
  return result;
}

uint64_t CBB_add_u8_length_prefixed(uint64_t a1, _OWORD *a2)
{
  return cbb_add_length_prefixed(a1, a2, 1uLL);
}

uint64_t cbb_add_length_prefixed(uint64_t a1, _OWORD *a2, size_t a3)
{
  uint64_t result = CBB_flush(a1);
  if (result)
  {
    int v8 = 0;
    int64_t v7 = *(char **)a1;
    *(void *)(a1 + 8) = *(void *)(*(void *)a1 + 8);
    uint64_t result = (uint64_t)cbb_buffer_add(v7, &v8, a3);
    if (result)
    {
      bzero(v8, a3);
      *a2 = 0u;
      a2[1] = 0u;
      *(void *)a2 = *(void *)a1;
      *(void *)(a1 + 16) = a2;
      *(unsigned char *)(a1 + 24) = a3;
      *(unsigned char *)(a1 + 25) = 0;
      return 1;
    }
  }
  return result;
}

uint64_t CBB_add_u16_length_prefixed(uint64_t a1, _OWORD *a2)
{
  return cbb_add_length_prefixed(a1, a2, 2uLL);
}

uint64_t CBB_add_u24_length_prefixed(uint64_t a1, _OWORD *a2)
{
  return cbb_add_length_prefixed(a1, a2, 3uLL);
}

uint64_t CBB_add_asn1(uint64_t a1, _OWORD *a2, unsigned int a3)
{
  uint64_t result = 0;
  if (a3 <= 0xFF && (a3 & 0x1F) != 0x1F)
  {
    uint64_t result = CBB_flush(a1);
    if (result)
    {
      uint64_t result = cbb_add_u((char **)a1, a3, 1uLL);
      if (result)
      {
        *(void *)(a1 + 8) = *(void *)(*(void *)a1 + 8);
        uint64_t result = cbb_add_u((char **)a1, 0, 1uLL);
        if (result)
        {
          *a2 = 0u;
          a2[1] = 0u;
          *(void *)a2 = *(void *)a1;
          *(void *)(a1 + 16) = a2;
          *(_WORD *)(a1 + 24) = 257;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t CBB_add_u8(char **a1, unint64_t a2)
{
  if (a2 <= 0xFF) {
    return cbb_add_u(a1, a2, 1uLL);
  }
  else {
    return 0;
  }
}

uint64_t CBB_add_bytes(char **a1, const void *a2, size_t a3)
{
  uint64_t result = CBB_flush((uint64_t)a1);
  if (result)
  {
    __dst = 0;
    uint64_t result = (uint64_t)cbb_buffer_add(*a1, &__dst, a3);
    if (result)
    {
      memcpy(__dst, a2, a3);
      return 1;
    }
  }
  return result;
}

uint64_t CBB_add_space(char **a1, void **a2, size_t a3)
{
  uint64_t result = CBB_flush((uint64_t)a1);
  if (result)
  {
    uint64_t result = (uint64_t)cbb_buffer_add(*a1, a2, a3);
    if (result)
    {
      bzero(*a2, a3);
      return 1;
    }
  }
  return result;
}

uint64_t cbb_add_u(char **a1, unsigned int a2, unint64_t a3)
{
  uint64_t result = CBB_flush((uint64_t)a1);
  if (result)
  {
    uint64_t v8 = 0;
    uint64_t result = (uint64_t)cbb_buffer_add(*a1, &v8, a3);
    if (result)
    {
      if (a3)
      {
        unint64_t v7 = a3 - 1;
        do
        {
          *(unsigned char *)(v8 + v7) = a2;
          a2 >>= 8;
          --v7;
        }
        while (v7 < a3);
      }
      return 1;
    }
  }
  return result;
}

uint64_t CBB_add_u16(char **a1, unint64_t a2)
{
  if (a2 >> 16) {
    return 0;
  }
  else {
    return cbb_add_u(a1, a2, 2uLL);
  }
}

uint64_t CBB_add_u24(char **a1, unint64_t a2)
{
  if (a2 >> 24) {
    return 0;
  }
  else {
    return cbb_add_u(a1, a2, 3uLL);
  }
}

uint64_t CBB_add_u32(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    return 0;
  }
  else {
    return cbb_add_u(a1, a2, 4uLL);
  }
}

uint64_t CBB_add_u64(char **a1, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t result = cbb_add_u(a1, HIDWORD(a2), 4uLL);
  if (result)
  {
    return cbb_add_u(a1, v2, 4uLL);
  }
  return result;
}

uint64_t CBB_add_asn1_uint64(uint64_t a1, unint64_t a2)
{
  memset(v7, 0, sizeof(v7));
  uint64_t result = CBB_add_asn1(a1, v7, 2u);
  if (!result) {
    return result;
  }
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    while ((v6 & 1) == 0)
    {
LABEL_7:
      uint64_t result = cbb_add_u((char **)v7, (a2 >> (56 - 8 * v5)), 1uLL);
      if (!result) {
        return result;
      }
      char v6 = 0;
      if (++v5 == 8) {
        return CBB_flush(a1);
      }
    }
    if ((a2 >> (56 - 8 * v5)))
    {
      if (((a2 >> (56 - 8 * v5)) & 0x80) != 0)
      {
        uint64_t result = cbb_add_u((char **)v7, 0, 1uLL);
        if (!result) {
          return result;
        }
      }
      goto LABEL_7;
    }
    ++v5;
    char v6 = 1;
  }
  while (v5 != 8);
  uint64_t result = cbb_add_u((char **)v7, 0, 1uLL);
  if (!result) {
    return result;
  }
  return CBB_flush(a1);
}

void sub_23C4F43D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void *__getFPIsFileProviderBookmarkSymbolLoc_block_invoke(uint64_t a1)
{
  unsigned int v2 = FileProviderLibrary();
  uint64_t result = dlsym(v2, "FPIsFileProviderBookmark");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFPIsFileProviderBookmarkSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *FileProviderLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!FileProviderLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __FileProviderLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E55AC0;
    uint64_t v6 = 0;
    FileProviderLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  v0 = (void *)FileProviderLibraryCore_frameworkLibrary;
  if (!FileProviderLibraryCore_frameworkLibrary)
  {
    v0 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFFileStorageServiceResult.m", 17, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void WFFileStorageServiceResultAllowFPSandboxExtensionToConsumer(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = a1;
  uint64_t v8 = [getFPItemManagerClass() defaultManager];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = __WFFileStorageServiceResultAllowFPSandboxExtensionToConsumer_block_invoke;
  v11[3] = &unk_264E55AA0;
  id v12 = v5;
  id v13 = v6;
  id v9 = v5;
  id v10 = v6;
  [v8 fetchItemForURL:v7 completionHandler:v11];
}

id getFPItemManagerClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getFPItemManagerClass_softClass;
  uint64_t v7 = getFPItemManagerClass_softClass;
  if (!getFPItemManagerClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getFPItemManagerClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getFPItemManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C4F4848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __WFFileStorageServiceResultAllowFPSandboxExtensionToConsumer_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = [getFPItemManagerClass() defaultManager];
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = __WFFileStorageServiceResultAllowFPSandboxExtensionToConsumer_block_invoke_2;
    v6[3] = &unk_264E5B5E8;
    uint64_t v5 = *(void *)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    [v4 extendBookmarkForItem:v3 receivingBundleID:v5 completionHandler:v6];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t __WFFileStorageServiceResultAllowFPSandboxExtensionToConsumer_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __getFPItemManagerClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPItemManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPItemManagerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unsigned int v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFPItemManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFFileStorageServiceResult.m", 18, @"Unable to find class %s", "FPItemManager");

    __break(1u);
  }
}

uint64_t __FileProviderLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  FileProviderLibraryCore_frameworkLibrary = result;
  return result;
}

Class initUITextChecker()
{
  if (UIKitLibrary_sOnce != -1) {
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_214);
  }
  Class result = objc_getClass("UITextChecker");
  classUITextChecker = (uint64_t)result;
  getUITextCheckerClasunsigned int s = (uint64_t (*)())UITextCheckerFunction;
  return result;
}

id UITextCheckerFunction()
{
  return (id)classUITextChecker;
}

void *__UIKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib = (uint64_t)result;
  return result;
}

void sub_23C4F61D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getUIColorClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!UIKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __UIKitLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E55B20;
    uint64_t v8 = 0;
    UIKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFFileLabelColorPickerParameter.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("UIColor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getUIColorClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFFileLabelColorPickerParameter.m", 20, @"Unable to find class %s", "UIColor");

LABEL_10:
    __break(1u);
  }
  getUIColorClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __UIKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C4F84EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t PocketAPITweetID(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%llu", a1);
}

void sub_23C4F8DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

Class __getRadiosPreferencesClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!AppSupportLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __AppSupportLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E55B88;
    uint64_t v8 = 0;
    AppSupportLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AppSupportLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AppSupportLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFRadiosPreferencesSettingsClient.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RadiosPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getRadiosPreferencesClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFRadiosPreferencesSettingsClient.m", 19, @"Unable to find class %s", "RadiosPreferences");

LABEL_10:
    __break(1u);
  }
  getRadiosPreferencesClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AppSupportLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AppSupportLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C4FA68C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C4FA8A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C4FAA3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C4FB410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFEnforceClass(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a1;
  if (v3 && (objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v5 = getWFGeneralLogObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136315906;
      uint64_t v9 = "WFEnforceClass";
      __int16 v10 = 2114;
      id v11 = v3;
      __int16 v12 = 2114;
      id v13 = (id)objc_opt_class();
      __int16 v14 = 2114;
      uint64_t v15 = a2;
      id v6 = v13;
      _os_log_impl(&dword_23C364000, v5, OS_LOG_TYPE_FAULT, "%s Warning: %{public}@ is of type %{public}@, not %{public}@! Falling back to nil.", (uint8_t *)&v8, 0x2Au);
    }
    id v4 = 0;
  }
  else
  {
    id v4 = v3;
  }

  return v4;
}

id VCTitleCaseString(void *a1)
{
  id v1 = a1;
  if (!VCTitleCaseString_shortWords)
  {
    uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", @"a", @"an", @"and", @"as", @"at", @"but", @"by", @"en", @"for", @"if", @"in", @"of", @"on", @"or", @"the", @"to", @"v",
           @"via",
           @"vs",
           0);
    id v3 = (void *)VCTitleCaseString_shortWords;
    VCTitleCaseString_shortWordunsigned int s = v2;
  }
  if (!VCTitleCaseString_wordStartCharacterSet)
  {
    id v4 = [MEMORY[0x263F08708] uppercaseLetterCharacterSet];
    uint64_t v5 = [v4 mutableCopy];
    id v6 = (void *)VCTitleCaseString_wordStartCharacterSet;
    VCTitleCaseString_wordStartCharacterSet = v5;

    long long v7 = (void *)VCTitleCaseString_wordStartCharacterSet;
    int v8 = [MEMORY[0x263F08708] lowercaseLetterCharacterSet];
    [v7 formUnionWithCharacterSet:v8];
  }
  if (!VCTitleCaseString_wordMiddleCharacterSet)
  {
    uint64_t v9 = [MEMORY[0x263F08708] uppercaseLetterCharacterSet];
    uint64_t v10 = [v9 mutableCopy];
    id v11 = (void *)VCTitleCaseString_wordMiddleCharacterSet;
    VCTitleCaseString_wordMiddleCharacterSet = v10;

    __int16 v12 = (void *)VCTitleCaseString_wordMiddleCharacterSet;
    id v13 = [MEMORY[0x263F08708] lowercaseLetterCharacterSet];
    [v12 formUnionWithCharacterSet:v13];

    [(id)VCTitleCaseString_wordMiddleCharacterSet addCharactersInString:@".&'’"];
  }
  if (!VCTitleCaseString_wordEndCharacterSet) {
    objc_storeStrong((id *)&VCTitleCaseString_wordEndCharacterSet, (id)VCTitleCaseString_wordStartCharacterSet);
  }
  if (!VCTitleCaseString_wordIgnoreCharacterSet)
  {
    __int16 v14 = [MEMORY[0x263F08708] uppercaseLetterCharacterSet];
    uint64_t v15 = [v14 mutableCopy];
    uint64_t v16 = (void *)VCTitleCaseString_wordIgnoreCharacterSet;
    VCTitleCaseString_wordIgnoreCharacterSet = v15;

    [(id)VCTitleCaseString_wordIgnoreCharacterSet addCharactersInString:@"."];
  }
  int v38 = (void *)[v1 mutableCopy];
  unint64_t v17 = [MEMORY[0x263F08B08] scannerWithString:v1];
  char v18 = 1;
  [v17 setCaseSensitive:1];
  int v19 = 0;
  size_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
LABEL_12:
  int v39 = v20;
  while (([v17 isAtEnd] & 1) == 0)
  {
    [v17 scanUpToCharactersFromSet:VCTitleCaseString_wordStartCharacterSet intoString:0];
    unint64_t v23 = [v17 scanLocation];
    if (v23 < [v1 length])
    {
      uint64_t v22 = [v17 scanLocation];
      if ((objc_msgSend((id)VCTitleCaseString_wordStartCharacterSet, "characterIsMember:", objc_msgSend(v1, "characterAtIndex:", objc_msgSend(v17, "scanLocation"))) & 1) == 0)
      {
        do
        {
          objc_msgSend(v17, "setScanLocation:", objc_msgSend(v17, "scanLocation") + 1);
          uint64_t v22 = [v17 scanLocation];
        }
        while (!objc_msgSend((id)VCTitleCaseString_wordStartCharacterSet, "characterIsMember:", objc_msgSend(v1, "characterAtIndex:", objc_msgSend(v17, "scanLocation"))));
      }
      uint64_t v24 = objc_msgSend(v1, "substringWithRange:", v22, 1);
      [v17 scanString:v24 intoString:0];

      unint64_t v25 = [v1 length];
      uint64_t v26 = 1;
      if (v25 > [v17 scanLocation])
      {
        if (objc_msgSend((id)VCTitleCaseString_wordMiddleCharacterSet, "characterIsMember:", objc_msgSend(v1, "characterAtIndex:", objc_msgSend(v17, "scanLocation"))))
        {
          [v17 scanCharactersFromSet:VCTitleCaseString_wordMiddleCharacterSet intoString:0];
          uint64_t v26 = [v17 scanLocation] - v22;
        }
        else
        {
          uint64_t v26 = 1;
        }
      }
      uint64_t v27 = [v1 characterAtIndex:v22 + v26 - 1];
      char v37 = v18;
      if ([(id)VCTitleCaseString_wordEndCharacterSet characterIsMember:v27])
      {
        uint64_t v21 = v26;
      }
      else
      {
        do
        {
          objc_msgSend(v17, "setScanLocation:", objc_msgSend(v17, "scanLocation") - 1);
          uint64_t v21 = v26 - 1;
          uint64_t v28 = [v1 characterAtIndex:v22 - 2 + v26--];
        }
        while (![(id)VCTitleCaseString_wordEndCharacterSet characterIsMember:v28]);
      }
      int v29 = objc_msgSend(v1, "substringWithRange:", v22, v21);

      uint64_t v30 = [v29 lowercaseString];

      uint64_t v31 = objc_msgSend(v1, "rangeOfCharacterFromSet:options:range:", VCTitleCaseString_wordIgnoreCharacterSet, 2, v22 + 1, v21 - 1);
      char v18 = 0;
      int v19 = (void *)v30;
      size_t v20 = v29;
      if (v31 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if ([v29 rangeOfString:@"&"] == 0x7FFFFFFFFFFFFFFFLL)
        {
          if ((v37 & 1) == 0 && [(id)VCTitleCaseString_shortWords containsObject:v30])
          {
            objc_msgSend(v38, "replaceCharactersInRange:withString:", v22, v21, v30);
LABEL_32:
            char v18 = 0;
            int v19 = (void *)v30;
            size_t v20 = v29;
            goto LABEL_12;
          }
          uint64_t v32 = [v29 capitalizedString];
        }
        else
        {
          uint64_t v32 = [v29 uppercaseString];
        }
        uint64_t v33 = (void *)v32;
        objc_msgSend(v38, "replaceCharactersInRange:withString:", v22, v21, v32);

        goto LABEL_32;
      }
      goto LABEL_12;
    }
  }
  if (v19 && [(id)VCTitleCaseString_shortWords containsObject:v19])
  {
    long long v34 = [v19 capitalizedString];
    objc_msgSend(v38, "replaceCharactersInRange:withString:", v22, v21, v34);
  }
  long long v35 = (void *)[v38 copy];

  return v35;
}

void sub_23C4FD760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getUIImagePickerControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!UIKitLibraryCore_frameworkLibrary_968)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __UIKitLibraryCore_block_invoke_969;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E55C70;
    uint64_t v8 = 0;
    UIKitLibraryCore_frameworkLibrary_968 = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary_968)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFTakeVideoAction.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("UIImagePickerController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getUIImagePickerControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFTakeVideoAction.m", 16, @"Unable to find class %s", "UIImagePickerController");

LABEL_10:
    __break(1u);
  }
  getUIImagePickerControllerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __UIKitLibraryCore_block_invoke_969()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore_frameworkLibrary_968 = result;
  return result;
}

void sub_23C4FF8A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

Class __getSBSStatusBarStyleOverridesAssertionClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __SpringBoardServicesLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E55D08;
    uint64_t v8 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFRecordingStatusManager.m", 16, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SBSStatusBarStyleOverridesAssertion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getSBSStatusBarStyleOverridesAssertionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFRecordingStatusManager.m", 17, @"Unable to find class %s", "SBSStatusBarStyleOverridesAssertion");

LABEL_10:
    __break(1u);
  }
  getSBSStatusBarStyleOverridesAssertionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C4FFE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_23C500210(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

Class __getCAMCaptureCapabilitiesClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CameraUILibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CameraUILibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E55D48;
    uint64_t v8 = 0;
    CameraUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CameraUILibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *CameraUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFCameraCaptureCapabilities.m", 21, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CAMCaptureCapabilities");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCAMCaptureCapabilitiesClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFCameraCaptureCapabilities.m", 22, @"Unable to find class %s", "CAMCaptureCapabilities");

LABEL_10:
    __break(1u);
  }
  getCAMCaptureCapabilitiesClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CameraUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CameraUILibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C523A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCLLocationClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E55D80;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFWeatherData.m", 17, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFWeatherData.m", 18, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C527EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPAVEndpointRouteClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaPlayerLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E55ED0;
    uint64_t v8 = 0;
    MediaPlayerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFHandOffPlaybackAction.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPAVEndpointRoute");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getMPAVEndpointRouteClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFHandOffPlaybackAction.m", 19, @"Unable to find class %s", "MPAVEndpointRoute");

LABEL_10:
    __break(1u);
  }
  getMPAVEndpointRouteClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary = result;
  return result;
}

id getCBClientClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getCBClientClass_softClass;
  uint64_t v7 = getCBClientClass_softClass;
  if (!getCBClientClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCBClientClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getCBClientClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C52A3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCBClientClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreBrightnessLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreBrightnessLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E55EE8;
    uint64_t v8 = 0;
    CoreBrightnessLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreBrightnessLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreBrightnessLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFNightShiftSettingsClient.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CBClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCBClientClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFNightShiftSettingsClient.m", 20, @"Unable to find class %s", "CBClient");

LABEL_10:
    __break(1u);
  }
  getCBClientClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreBrightnessLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreBrightnessLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C52A864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getHKDisplayTypeControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!HealthUILibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __HealthUILibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E55F28;
    uint64_t v8 = 0;
    HealthUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!HealthUILibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *HealthUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFQuantityTypePickerParameter.m", 21, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("HKDisplayTypeController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getHKDisplayTypeControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFQuantityTypePickerParameter.m", 22, @"Unable to find class %s", "HKDisplayTypeController");

LABEL_10:
    __break(1u);
  }
  getHKDisplayTypeControllerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __HealthUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  HealthUILibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C52C5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C52CEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSHErrorDomainSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = ShazamKitLibrary();
  uint64_t result = dlsym(v2, "SHErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSHErrorDomainSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *ShazamKitLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!ShazamKitLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __ShazamKitLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E55FE0;
    uint64_t v6 = 0;
    ShazamKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  v0 = (void *)ShazamKitLibraryCore_frameworkLibrary;
  if (!ShazamKitLibraryCore_frameworkLibrary)
  {
    v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *ShazamKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFShazamMediaAction.m", 21, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __ShazamKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ShazamKitLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C52D344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSHManagedSessionClass_block_invoke(uint64_t a1)
{
  ShazamKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SHManagedSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSHManagedSessionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSHManagedSessionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFShazamMediaAction.m", 22, @"Unable to find class %s", "SHManagedSession");

    __break(1u);
  }
}

void sub_23C52E058(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3156(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3157(uint64_t a1)
{
}

void sub_23C52EB84(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

id getMPCPlayerPathClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPCPlayerPathClass_softClass;
  uint64_t v7 = getMPCPlayerPathClass_softClass;
  if (!getMPCPlayerPathClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPCPlayerPathClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPCPlayerPathClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C52F7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPCPlayerPathClass_block_invoke(uint64_t a1)
{
  MediaPlaybackCoreLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPCPlayerPath");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPCPlayerPathClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPCPlayerPathClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 40, @"Unable to find class %s", "MPCPlayerPath");

    __break(1u);
  }
}

void MediaPlaybackCoreLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!MediaPlaybackCoreLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __MediaPlaybackCoreLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E56308;
    uint64_t v5 = 0;
    MediaPlaybackCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MediaPlaybackCoreLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *MediaPlaybackCoreLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFMediaPlaybackController.m", 38, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __MediaPlaybackCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaPlaybackCoreLibraryCore_frameworkLibrary = result;
  return result;
}

id getMPCPlayerRequestClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPCPlayerRequestClass_softClass;
  uint64_t v7 = getMPCPlayerRequestClass_softClass;
  if (!getMPCPlayerRequestClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPCPlayerRequestClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPCPlayerRequestClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C52FC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMPCPlayerChangeRequestClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPCPlayerChangeRequestClass_softClass;
  uint64_t v7 = getMPCPlayerChangeRequestClass_softClass;
  if (!getMPCPlayerChangeRequestClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPCPlayerChangeRequestClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPCPlayerChangeRequestClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C52FDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPCPlayerChangeRequestClass_block_invoke(uint64_t a1)
{
  MediaPlaybackCoreLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPCPlayerChangeRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPCPlayerChangeRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPCPlayerChangeRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 41, @"Unable to find class %s", "MPCPlayerChangeRequest");

    __break(1u);
  }
}

void __getMPCPlayerRequestClass_block_invoke(uint64_t a1)
{
  MediaPlaybackCoreLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPCPlayerRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPCPlayerRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPCPlayerRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 39, @"Unable to find class %s", "MPCPlayerRequest");

    __break(1u);
  }
}

void sub_23C530208(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id getMPModelSongClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPModelSongClass_softClass;
  uint64_t v7 = getMPModelSongClass_softClass;
  if (!getMPModelSongClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPModelSongClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPModelSongClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5302EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPModelLibraryRequestClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPModelLibraryRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPModelLibraryRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPModelLibraryRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 49, @"Unable to find class %s", "MPModelLibraryRequest");

    __break(1u);
  }
}

id getMPPropertySetClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPPropertySetClass_softClass;
  uint64_t v7 = getMPPropertySetClass_softClass;
  if (!getMPPropertySetClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPPropertySetClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPPropertySetClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C530498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPPropertySetClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPPropertySet");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPPropertySetClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPPropertySetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 23, @"Unable to find class %s", "MPPropertySet");

    __break(1u);
  }
}

void *MediaPlayerLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_3186)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __MediaPlayerLibraryCore_block_invoke_3187;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E562F0;
    uint64_t v6 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_3186 = _sl_dlopen();
  }
  v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_3186;
  if (!MediaPlayerLibraryCore_frameworkLibrary_3186)
  {
    v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 20, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_3187()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_3186 = result;
  return result;
}

void __getMPModelSongClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPModelSong");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPModelSongClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPModelSongClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 25, @"Unable to find class %s", "MPModelSong");

    __break(1u);
  }
}

id getMPIdentifierSetClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPIdentifierSetClass_softClass;
  uint64_t v7 = getMPIdentifierSetClass_softClass;
  if (!getMPIdentifierSetClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPIdentifierSetClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPIdentifierSetClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C530BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPIdentifierSetClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPIdentifierSet");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPIdentifierSetClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPIdentifierSetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 26, @"Unable to find class %s", "MPIdentifierSet");

    __break(1u);
  }
}

id getMPMediaLibraryClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPMediaLibraryClass_softClass;
  uint64_t v7 = getMPMediaLibraryClass_softClass;
  if (!getMPMediaLibraryClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPMediaLibraryClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPMediaLibraryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C530F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaLibraryClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaLibraryClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 21, @"Unable to find class %s", "MPMediaLibrary");

    __break(1u);
  }
}

void sub_23C53179C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C531BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaItemClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaItemClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaPlaybackController.m", 22, @"Unable to find class %s", "MPMediaItem");

    __break(1u);
  }
}

void *__getMPModelRelationshipGenericSongSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelRelationshipGenericSong");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelRelationshipGenericSongSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C5330D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMPModelPropertyGenreNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertyGenreName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertyGenreNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertyAlbumTitleSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertyAlbumTitle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertyAlbumTitleSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertyAlbumDiscCountSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertyAlbumDiscCount");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertyAlbumDiscCountSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertyAlbumReleaseDateComponentsSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertyAlbumReleaseDateComponents");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertyAlbumReleaseDateComponentsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertyAlbumTrackCountSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertyAlbumTrackCount");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertyAlbumTrackCountSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertyArtistNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertyArtistName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertyArtistNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertySongTitleSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertySongTitle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertySongTitleSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertySongDurationSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertySongDuration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertySongDurationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertySongDiscNumberSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertySongDiscNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertySongDiscNumberSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertySongExplicitSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertySongExplicit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertySongExplicitSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertySongTrackNumberSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertySongTrackNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertySongTrackNumberSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelPropertySongArtworkSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelPropertySongArtwork");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelPropertySongArtworkSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelRelationshipSongArtistSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelRelationshipSongArtist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelRelationshipSongArtistSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelRelationshipSongAlbumSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelRelationshipSongAlbum");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelRelationshipSongAlbumSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPModelRelationshipSongGenreSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPModelRelationshipSongGenre");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPModelRelationshipSongGenreSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C533824(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C533898(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C5339B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C533BF4(_Unwind_Exception *a1)
{
}

void sub_23C533C00()
{
  objc_sync_exit(v0);
  JUMPOUT(0x23C533C0CLL);
}

void sub_23C533CD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C533D6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id WFMediaRouteDescriptorIsMissingRouteUIDError()
{
  void v9[2] = *MEMORY[0x263EF8340];
  v0 = WFLocalizedString(@"Invalid Output Device");
  id v1 = WFLocalizedString(@"The device you specified can not be used for media playback.");
  uint64_t v2 = (void *)MEMORY[0x263F087E8];
  uint64_t v3 = *MEMORY[0x263F870B8];
  uint64_t v4 = *MEMORY[0x263F08320];
  v8[0] = *MEMORY[0x263F08338];
  v8[1] = v4;
  v9[0] = v0;
  v9[1] = v1;
  long long v5 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];
  uint64_t v6 = [v2 errorWithDomain:v3 code:5 userInfo:v5];

  return v6;
}

void sub_23C535F38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

Class __getRTRoutineManagerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreRoutineLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreRoutineLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E563E0;
    uint64_t v8 = 0;
    CoreRoutineLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreRoutineLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreRoutineLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFGetParkedCarLocationAction.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RTRoutineManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getRTRoutineManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFGetParkedCarLocationAction.m", 22, @"Unable to find class %s", "RTRoutineManager");

LABEL_10:
    __break(1u);
  }
  getRTRoutineManagerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreRoutineLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreRoutineLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C536598(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getCNContactStoreClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __ContactsLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E563F8;
    uint64_t v8 = 0;
    ContactsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ContactsLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFContactAccessResource.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CNContactStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCNContactStoreClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContactAccessResource.m", 16, @"Unable to find class %s", "CNContactStore");

LABEL_10:
    __break(1u);
  }
  getCNContactStoreClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C5385EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSBSOpenApplicationLayoutRoleSideLargeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary();
  uint64_t result = dlsym(v2, "SBSOpenApplicationLayoutRoleSideLarge");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSOpenApplicationLayoutRoleSideLargeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *SpringBoardServicesLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_4266)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __SpringBoardServicesLibraryCore_block_invoke_4267;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E564C8;
    uint64_t v6 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary_4266 = _sl_dlopen();
  }
  v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_4266;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_4266)
  {
    v0 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSplitScreenAppAction.m", 25, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getSBSOpenApplicationLayoutRoleSideNarrowSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary();
  uint64_t result = dlsym(v2, "SBSOpenApplicationLayoutRoleSideNarrow");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSOpenApplicationLayoutRoleSideNarrowSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getSBSOpenApplicationOptionKeyLayoutRole()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  v0 = (void **)getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr;
  uint64_t v9 = getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr;
  if (!getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr)
  {
    uint64_t v1 = SpringBoardServicesLibrary();
    void v7[3] = (uint64_t)dlsym(v1, "SBSOpenApplicationOptionKeyLayoutRole");
    getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr = v7[3];
    v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getSBSOpenApplicationOptionKeyLayoutRole(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSplitScreenAppAction.m", 27, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C53895C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSBSOpenApplicationLayoutRolePrimarySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary();
  uint64_t result = dlsym(v2, "SBSOpenApplicationLayoutRolePrimary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSOpenApplicationLayoutRolePrimarySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSBSOpenApplicationOptionKeyAdditionalApplicationsSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary();
  uint64_t result = dlsym(v2, "SBSOpenApplicationOptionKeyAdditionalApplications");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSOpenApplicationOptionKeyAdditionalApplicationsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
  return result;
}

void *__getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary();
  uint64_t result = dlsym(v2, "SBSOpenApplicationOptionKeyLayoutRole");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_4267()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary_4266 = result;
  return result;
}

id WFMapsAppNamesByIdentifier()
{
  v3[6] = *MEMORY[0x263EF8340];
  v2[0] = @"com.apple.Maps";
  v2[1] = @"azdev.citymapper";
  v3[0] = @"Maps";
  v3[1] = @"Citymapper";
  v2[2] = @"com.google.Maps";
  v2[3] = @"com.samvermette.Transit";
  v3[2] = @"Google Maps";
  v3[3] = @"Transit";
  v2[4] = @"com.waze.iphone";
  v2[5] = @"com.baidu.map";
  v3[4] = @"Waze";
  void v3[5] = @"Baidu Maps";
  v0 = [NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:6];
  return v0;
}

id WFLocalizedMapsAppNameForAppName(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"Maps"])
  {
    uint64_t v2 = @"Maps";
LABEL_13:
    WFLocalizedString(v2);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
  if ([v1 isEqualToString:@"Citymapper"])
  {
    uint64_t v2 = @"Citymapper";
    goto LABEL_13;
  }
  if ([v1 isEqualToString:@"Google Maps"])
  {
    uint64_t v2 = @"Google Maps";
    goto LABEL_13;
  }
  if ([v1 isEqualToString:@"Transit"])
  {
    WFLocalizedStringWithKey(@"Transit (App Name)", @"Transit");
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
  if ([v1 isEqualToString:@"Waze"])
  {
    uint64_t v2 = @"Waze";
    goto LABEL_13;
  }
  if ([v1 isEqualToString:@"Baidu Maps"])
  {
    uint64_t v2 = @"Baidu Maps";
    goto LABEL_13;
  }
  id v3 = v1;
LABEL_14:
  uint64_t v4 = v3;

  return v4;
}

id WFMapsAppIdentifierForAppName(void *a1)
{
  id v1 = a1;
  uint64_t v2 = WFMapsAppNamesByIdentifier();
  id v3 = [v2 allKeysForObject:v1];

  uint64_t v4 = [v3 firstObject];

  return v4;
}

void sub_23C53BE30()
{
}

void sub_23C53E1B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

__CFString *TMURLDecode(CFStringRef originalString)
{
  id v1 = (__CFString *)CFURLCreateStringByReplacingPercentEscapes(0, originalString, &stru_26F008428);
  return v1;
}

__CFString *TMURLEncode(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    CFStringRef v2 = (const __CFString *)v1;
  }
  else
  {
    CFStringRef v2 = [v1 stringValue];
  }
  id v3 = (__CFString *)v2;
  uint64_t v4 = (__CFString *)CFURLCreateStringByAddingPercentEscapes(0, v2, 0, @"!*'();:@&=+$,/?%#[]%", 0x8000100u);

  return v4;
}

id type metadata for some(void *a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  [v1 componentsSeparatedByString:@"&"];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v17 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v19 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = [*(id *)(*((void *)&v18 + 1) + 8 * i) componentsSeparatedByString:@"="];
        if ([v6 count] == 2)
        {
          uint64_t v7 = [v6 objectAtIndexedSubscript:0];
          uint64_t v8 = TMURLDecode(v7);

          uint64_t v9 = [v6 objectAtIndexedSubscript:1];
          uint64_t v10 = TMURLDecode(v9);

          id v11 = [v2 objectForKeyedSubscript:v8];
          if (v11)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              [v11 addObject:v10];
            }
            else
            {
              objc_msgSend(MEMORY[0x263EFF980], "arrayWithObjects:", v11, v10, 0);
              id v13 = v12 = v4;
              [v2 setObject:v13 forKey:v8];

              uint64_t v4 = v12;
            }
          }
          else
          {
            [v2 setObject:v10 forKey:v8];
          }
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v4);
  }
  __int16 v14 = [NSDictionary dictionaryWithDictionary:v2];

  return v14;
}

id TMDictionaryToQueryString(void *a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v1 = a1;
  id v2 = [MEMORY[0x263EFF980] array];
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __TMDictionaryToQueryString_block_invoke;
  aBlock[3] = &unk_264E565C8;
  id v20 = v2;
  id v32 = v20;
  uint64_t v3 = (void (**)(void *, uint64_t, void))_Block_copy(aBlock);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v4 = [v1 allKeys];
  long long v5 = [v4 sortedArrayUsingSelector:sel_caseInsensitiveCompare_];

  uint64_t v6 = [v5 countByEnumeratingWithState:&v27 objects:v34 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v28;
    uint64_t v21 = *(void *)v28;
    do
    {
      uint64_t v9 = 0;
      uint64_t v22 = v7;
      do
      {
        if (*(void *)v28 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v27 + 1) + 8 * v9);
        id v11 = objc_msgSend(v1, "objectForKeyedSubscript:", v10, v20);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v12 = v1;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          id v13 = v11;
          uint64_t v14 = [v13 countByEnumeratingWithState:&v23 objects:v33 count:16];
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = *(void *)v24;
            do
            {
              for (uint64_t i = 0; i != v15; ++i)
              {
                if (*(void *)v24 != v16) {
                  objc_enumerationMutation(v13);
                }
                v3[2](v3, v10, *(void *)(*((void *)&v23 + 1) + 8 * i));
              }
              uint64_t v15 = [v13 countByEnumeratingWithState:&v23 objects:v33 count:16];
            }
            while (v15);
          }

          id v1 = v12;
          uint64_t v8 = v21;
          uint64_t v7 = v22;
        }
        else
        {
          ((void (**)(void *, uint64_t, void *))v3)[2](v3, v10, v11);
        }

        ++v9;
      }
      while (v9 != v7);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v27 objects:v34 count:16];
    }
    while (v7);
  }

  long long v18 = [v20 componentsJoinedByString:@"&"];

  return v18;
}

void __TMDictionaryToQueryString_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  long long v5 = NSString;
  id v6 = a3;
  TMURLEncode(a2);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = TMURLEncode(v6);

  uint64_t v8 = [v5 stringWithFormat:@"%@=%@", v9, v7];
  [v4 addObject:v8];
}

void WFPlaylistsMatchingDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 playlistName];

  if (v2)
  {
    MPMediaPropertyPredicateClasunsigned int s = getMPMediaPropertyPredicateClass();
    uint64_t v4 = [v1 playlistName];
    uint64_t v34 = 0;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x2020000000;
    long long v5 = (void *)getMPMediaPlaylistPropertyNameSymbolLoc_ptr;
    uint64_t v37 = getMPMediaPlaylistPropertyNameSymbolLoc_ptr;
    if (!getMPMediaPlaylistPropertyNameSymbolLoc_ptr)
    {
      uint64_t v29 = MEMORY[0x263EF8330];
      uint64_t v30 = 3221225472;
      uint64_t v31 = __getMPMediaPlaylistPropertyNameSymbolLoc_block_invoke;
      id v32 = &unk_264E5EC88;
      uint64_t v33 = &v34;
      id v6 = MediaPlayerLibrary_5491();
      v35[3] = (uint64_t)dlsym(v6, "MPMediaPlaylistPropertyName");
      getMPMediaPlaylistPropertyNameSymbolLoc_ptr = *(void *)(v33[1] + 24);
      long long v5 = (void *)v35[3];
    }
    _Block_object_dispose(&v34, 8);
    if (v5)
    {
      uint64_t v7 = [MPMediaPropertyPredicateClass predicateWithValue:v4 forProperty:*v5];

      uint64_t v34 = 0;
      uint64_t v35 = &v34;
      uint64_t v36 = 0x2050000000;
      uint64_t v8 = (void *)getMPMediaQueryClass_softClass;
      uint64_t v37 = getMPMediaQueryClass_softClass;
      if (!getMPMediaQueryClass_softClass)
      {
        uint64_t v29 = MEMORY[0x263EF8330];
        uint64_t v30 = 3221225472;
        uint64_t v31 = __getMPMediaQueryClass_block_invoke;
        id v32 = &unk_264E5EC88;
        uint64_t v33 = &v34;
        __getMPMediaQueryClass_block_invoke((uint64_t)&v29);
        uint64_t v8 = (void *)v35[3];
      }
      id v9 = v8;
      _Block_object_dispose(&v34, 8);
      id v10 = [v9 alloc];
      id v11 = [MEMORY[0x263EFFA08] setWithObject:v7];
      id v12 = (void *)[v10 initWithFilterPredicates:v11];

      [v12 setGroupingType:6];
      id v13 = [v12 collections];
      uint64_t v14 = [v13 count];

      if (v14)
      {
        uint64_t v15 = [v12 collections];
        uint64_t v16 = [v1 persistentIdentifier];

        if (v16)
        {
          id v17 = getMPMediaPropertyPredicateClass();
          long long v18 = [v1 persistentIdentifier];
          uint64_t v34 = 0;
          uint64_t v35 = &v34;
          uint64_t v36 = 0x2020000000;
          long long v19 = (void *)getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr;
          uint64_t v37 = getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr;
          if (!getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr)
          {
            uint64_t v29 = MEMORY[0x263EF8330];
            uint64_t v30 = 3221225472;
            uint64_t v31 = __getMPMediaPlaylistPropertyPersistentIDSymbolLoc_block_invoke;
            id v32 = &unk_264E5EC88;
            uint64_t v33 = &v34;
            id v20 = MediaPlayerLibrary_5491();
            uint64_t v21 = dlsym(v20, "MPMediaPlaylistPropertyPersistentID");
            *(void *)(v33[1] + 24) = v21;
            getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr = *(void *)(v33[1] + 24);
            long long v19 = (void *)v35[3];
          }
          _Block_object_dispose(&v34, 8);
          if (v19)
          {
            uint64_t v22 = [v17 predicateWithValue:v18 forProperty:*v19];

            [v12 addFilterPredicate:v22];
            long long v23 = [v12 collections];
            uint64_t v24 = [v23 count];

            if (v24)
            {
              uint64_t v25 = [v12 collections];

              uint64_t v15 = (void *)v25;
            }

            goto LABEL_17;
          }
          long long v27 = [MEMORY[0x263F08690] currentHandler];
          long long v28 = [NSString stringWithUTF8String:"NSString *getMPMediaPlaylistPropertyPersistentID(void)"];
          objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, @"WFPlaylistSubstitutableState.m", 17, @"%s", dlerror(), v29, v30, v31, v32);
LABEL_23:

          __break(1u);
          return;
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
LABEL_17:

      goto LABEL_18;
    }
    long long v27 = [MEMORY[0x263F08690] currentHandler];
    long long v28 = [NSString stringWithUTF8String:"NSString *getMPMediaPlaylistPropertyName(void)"];
    objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, @"WFPlaylistSubstitutableState.m", 16, @"%s", dlerror(), v29, v30, v31, v32);
    goto LABEL_23;
  }
  uint64_t v15 = 0;
LABEL_18:

  id v26 = v15;
}

void sub_23C540B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMPMediaPropertyPredicateClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPMediaPropertyPredicateClass_softClass;
  uint64_t v7 = getMPMediaPropertyPredicateClass_softClass;
  if (!getMPMediaPropertyPredicateClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPMediaPropertyPredicateClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPMediaPropertyPredicateClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C540C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMPMediaPlaylistPropertyNameSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaPlayerLibrary_5491();
  uint64_t result = dlsym(v2, "MPMediaPlaylistPropertyName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaPlaylistPropertyNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MediaPlayerLibrary_5491()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_5501)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __MediaPlayerLibraryCore_block_invoke_5502;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E56650;
    uint64_t v6 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_5501 = _sl_dlopen();
  }
  v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_5501;
  if (!MediaPlayerLibraryCore_frameworkLibrary_5501)
  {
    v0 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaylistSubstitutableState.m", 13, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void __getMPMediaQueryClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_5491();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaQuery");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaQueryClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getMPMediaQueryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaylistSubstitutableState.m", 15, @"Unable to find class %s", "MPMediaQuery");

    __break(1u);
  }
}

void *__getMPMediaPlaylistPropertyPersistentIDSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaPlayerLibrary_5491();
  uint64_t result = dlsym(v2, "MPMediaPlaylistPropertyPersistentID");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_5502()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_5501 = result;
  return result;
}

void __getMPMediaPropertyPredicateClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_5491();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaPropertyPredicate");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaPropertyPredicateClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getMPMediaPropertyPredicateClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaylistSubstitutableState.m", 14, @"Unable to find class %s", "MPMediaPropertyPredicate");

    __break(1u);
  }
}

void sub_23C541968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getkCLErrorDomainSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_5593)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    void v5[3] = __CoreLocationLibraryCore_block_invoke_5594;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_264E56690;
    uint64_t v7 = 0;
    CoreLocationLibraryCore_frameworkLibrary_5593 = _sl_dlopen();
  }
  id v2 = (void *)CoreLocationLibraryCore_frameworkLibrary_5593;
  if (!CoreLocationLibraryCore_frameworkLibrary_5593)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFGetCurrentLocationAction.m", 18, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "kCLErrorDomain");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getkCLErrorDomainSymbolLoc_ptr = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_5594()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_5593 = result;
  return result;
}

void sub_23C542A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getkPMLPMSourceSiriSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = LowPowerModeLibrary();
  uint64_t result = dlsym(v2, "kPMLPMSourceSiri");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkPMLPMSourceSiriSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *LowPowerModeLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!LowPowerModeLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __LowPowerModeLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E566F8;
    uint64_t v6 = 0;
    LowPowerModeLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  v0 = (void *)LowPowerModeLibraryCore_frameworkLibrary;
  if (!LowPowerModeLibraryCore_frameworkLibrary)
  {
    v0 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *LowPowerModeLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLowPowerModeSettingsClient.m", 23, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __LowPowerModeLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  LowPowerModeLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C5433A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C545028(_Unwind_Exception *a1)
{
}

void __getCTTelephonyNetworkInfoClass_block_invoke(uint64_t a1)
{
  CoreTelephonyLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CTTelephonyNetworkInfo");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCTTelephonyNetworkInfoClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCTTelephonyNetworkInfoClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetNetworkDetailsAction.m", 25, @"Unable to find class %s", "CTTelephonyNetworkInfo");

    __break(1u);
  }
}

void __getCoreTelephonyClientClass_block_invoke(uint64_t a1)
{
  CoreTelephonyLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CoreTelephonyClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCoreTelephonyClientClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCoreTelephonyClientClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetNetworkDetailsAction.m", 26, @"Unable to find class %s", "CoreTelephonyClient");

    __break(1u);
  }
}

id getCTServiceDescriptorClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getCTServiceDescriptorClass_softClass;
  uint64_t v7 = getCTServiceDescriptorClass_softClass;
  if (!getCTServiceDescriptorClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCTServiceDescriptorClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getCTServiceDescriptorClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C545690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCTRadioAccessTechnologyGPRSSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyGPRS");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyGPRSSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreTelephonyLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreTelephonyLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreTelephonyLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E56758;
    uint64_t v6 = 0;
    CoreTelephonyLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  v0 = (void *)CoreTelephonyLibraryCore_frameworkLibrary;
  if (!CoreTelephonyLibraryCore_frameworkLibrary)
  {
    v0 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *CoreTelephonyLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetNetworkDetailsAction.m", 24, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getCTRadioAccessTechnologyEdgeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyEdge");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyEdgeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyWCDMASymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyWCDMA");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyWCDMASymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyHSDPASymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyHSDPA");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyHSDPASymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyHSUPASymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyHSUPA");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyHSUPASymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyCDMA1xSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyCDMA1x");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyCDMA1xSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyCDMAEVDORev0SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyCDMAEVDORev0");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyCDMAEVDORev0SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyCDMAEVDORevASymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyCDMAEVDORevA");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyCDMAEVDORevASymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyCDMAEVDORevBSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyCDMAEVDORevB");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyCDMAEVDORevBSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyeHRPDSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyeHRPD");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyeHRPDSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyLTESymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyLTE");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyLTESymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyNRNSASymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyNRNSA");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyNRNSASymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCTRadioAccessTechnologyNRSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreTelephonyLibrary();
  uint64_t result = dlsym(v2, "CTRadioAccessTechnologyNR");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCTRadioAccessTechnologyNRSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreTelephonyLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreTelephonyLibraryCore_frameworkLibrary = result;
  return result;
}

void __getCTServiceDescriptorClass_block_invoke(uint64_t a1)
{
  CoreTelephonyLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CTServiceDescriptor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCTServiceDescriptorClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCTServiceDescriptorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetNetworkDetailsAction.m", 27, @"Unable to find class %s", "CTServiceDescriptor");

    __break(1u);
  }
}

void sub_23C546648(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

xmlParserInputPtr enxmlExternalEntityLoader(uint64_t a1, uint64_t a2, xmlParserCtxt *a3)
{
  uint64_t v6 = (void *)[[NSString alloc] initWithCString:a1 encoding:4];
  uint64_t v7 = (void *)[objc_alloc(NSURL) initWithString:v6];
  uint64_t v8 = v7;
  if (!v7)
  {
    xmlParserInputPtr v14 = 0;
LABEL_13:
    if (defaultExternalEntityLoader) {
      xmlParserInputPtr v14 = (xmlParserInputPtr)defaultExternalEntityLoader(a1, a2, a3);
    }
    goto LABEL_15;
  }
  id v9 = [v7 path];
  id v10 = v9;
  if (v9)
  {
    id v11 = [v9 lastPathComponent];
    if (v11)
    {
      id v12 = +[ENSDKResourceLoader pathToResourceNamed:v11 extension:0];
      id v13 = v12;
      if (v12) {
        xmlParserInputPtr v14 = xmlNewInputFromFile(a3, (const char *)[v12 fileSystemRepresentation]);
      }
      else {
        xmlParserInputPtr v14 = 0;
      }
    }
    else
    {
      xmlParserInputPtr v14 = 0;
    }
  }
  else
  {
    xmlParserInputPtr v14 = 0;
  }

  if (!v14) {
    goto LABEL_13;
  }
LABEL_15:

  return v14;
}

uint64_t waitsocket(int a1, uint64_t a2)
{
  v9.tv_sec = 0;
  *(void *)&v9.tv_usec = 500000;
  memset(v8, 0, sizeof(v8));
  if (__darwin_check_fd_set_overflow(a1, v8, 0)) {
    *(_DWORD *)((char *)&v8[0].tv_sec + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << a1;
  }
  char v4 = libssh2_session_block_directions(a2);
  if (v4) {
    long long v5 = v8;
  }
  else {
    long long v5 = 0;
  }
  if ((v4 & 2) != 0) {
    uint64_t v6 = v8;
  }
  else {
    uint64_t v6 = 0;
  }
  return select(a1 + 1, (fd_set *)v5, (fd_set *)v6, 0, &v9);
}

void sub_23C548278(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6188(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6189(uint64_t a1)
{
}

void sub_23C549AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSSReadingListClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!SafariServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __SafariServicesLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E56990;
    uint64_t v8 = 0;
    SafariServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SafariServicesLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    char v4 = [NSString stringWithUTF8String:"void *SafariServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFAddToReadingListAction.m", 22, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SSReadingList");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getSSReadingListClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAddToReadingListAction.m", 23, @"Unable to find class %s", "SSReadingList");

LABEL_10:
    __break(1u);
  }
  getSSReadingListClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SafariServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SafariServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C54AB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAXGetComponentsInSiriVoiceIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AccessibilityUtilitiesLibrary();
  uint64_t result = dlsym(v2, "AXGetComponentsInSiriVoiceIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXGetComponentsInSiriVoiceIdentifierSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AccessibilityUtilitiesLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AccessibilityUtilitiesLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __AccessibilityUtilitiesLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E56A28;
    uint64_t v6 = 0;
    AccessibilityUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  v0 = (void *)AccessibilityUtilitiesLibraryCore_frameworkLibrary;
  if (!AccessibilityUtilitiesLibraryCore_frameworkLibrary)
  {
    v0 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *AccessibilityUtilitiesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesisVoice.m", 24, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AccessibilityUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AccessibilityUtilitiesLibraryCore_frameworkLibrary = result;
  return result;
}

id getAVSpeechSynthesisVoiceClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getAVSpeechSynthesisVoiceClass_softClass;
  uint64_t v7 = getAVSpeechSynthesisVoiceClass_softClass;
  if (!getAVSpeechSynthesisVoiceClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVSpeechSynthesisVoiceClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getAVSpeechSynthesisVoiceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C54AEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAVSpeechSynthesisVoiceClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __AVFoundationLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E56A10;
    uint64_t v8 = 0;
    AVFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AVFoundationLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSpeechSynthesisVoice.m", 37, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AVSpeechSynthesisVoice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getAVSpeechSynthesisVoiceClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSpeechSynthesisVoice.m", 38, @"Unable to find class %s", "AVSpeechSynthesisVoice");

LABEL_10:
    __break(1u);
  }
  getAVSpeechSynthesisVoiceClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AVFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary = result;
  return result;
}

id getAXAlternativeVoicesClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getAXAlternativeVoicesClass_softClass;
  uint64_t v7 = getAXAlternativeVoicesClass_softClass;
  if (!getAXAlternativeVoicesClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAXAlternativeVoicesClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getAXAlternativeVoicesClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C54B29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAXAlternativeVoicesClass_block_invoke(uint64_t a1)
{
  AccessibilityUtilitiesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AXAlternativeVoices");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAXAlternativeVoicesClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAXAlternativeVoicesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesisVoice.m", 25, @"Unable to find class %s", "AXAlternativeVoices");

    __break(1u);
  }
}

void sub_23C54BA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAXSettingsClass_block_invoke(uint64_t a1)
{
  AccessibilityUtilitiesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AXSettings");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAXSettingsClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAXSettingsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesisVoice.m", 41, @"Unable to find class %s", "AXSettings");

    __break(1u);
  }
}

void *__getAXSpeechSourceKeySpeechFeaturesSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AccessibilityUtilitiesLibrary();
  uint64_t result = dlsym(v2, "AXSpeechSourceKeySpeechFeatures");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXSpeechSourceKeySpeechFeaturesSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

unsigned char *NewBase64Decode(char *__s, size_t a2, void *a3)
{
  size_t v4 = a2;
  if (a2 == -1) {
    size_t v4 = strlen(__s);
  }
  uint64_t result = malloc_type_malloc(3 * ((v4 + 3) >> 2), 0x91BD1AE5uLL);
  uint64_t v7 = 0;
  if (v4)
  {
    size_t v8 = 0;
    do
    {
      unint64_t v9 = 0;
      do
      {
        int v10 = base64DecodeLookup[__s[v8]];
        if (v10 != 65)
        {
          *(&v15 + v9++) = v10;
          if (v9 == 4)
          {
            ++v8;
            goto LABEL_12;
          }
        }
        ++v8;
      }
      while (v8 < v4);
      if (v9 <= 1) {
        goto LABEL_16;
      }
LABEL_12:
      unsigned __int8 v11 = v16;
      result[v7] = (v16 >> 4) | (4 * v15);
      if (v9 < 3)
      {
        unint64_t v9 = 2;
      }
      else
      {
        unsigned __int8 v12 = v17;
        result[v7 + 1] = (v17 >> 2) | (16 * v11);
        if (v9 != 3) {
          result[v7 + 2] = v18 | (v12 << 6);
        }
      }
LABEL_16:
      BOOL v13 = v9 != 0;
      unint64_t v14 = v9 - 1;
      if (!v13) {
        unint64_t v14 = 0;
      }
      v7 += v14;
    }
    while (v8 < v4);
  }
  if (a3) {
    *a3 = v7;
  }
  return result;
}

unsigned char *NewBase64Encode(uint64_t a1, unint64_t a2, int a3, void *a4)
{
  unint64_t v8 = a2 / 3;
  if (a2 % 3) {
    ++v8;
  }
  uint64_t v9 = (v8 >> 3) & 0x7FFFFFFFFFFFFFFLL;
  if (!a3) {
    uint64_t v9 = 0;
  }
  uint64_t result = malloc_type_malloc((v9 + 4 * v8) | 1, 0xD08157FDuLL);
  if (result)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    if (a3) {
      uint64_t v13 = 48;
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v14 = a1 + 1;
    unint64_t v15 = v13;
    while (1)
    {
      unint64_t v16 = v15 >= a2 ? a2 : v15;
      if (v11 + 2 >= v16)
      {
        unint64_t v18 = v11;
      }
      else
      {
        do
        {
          unsigned __int8 v17 = &result[v12 + 1];
          *(v17 - ripemd160_block_data_order(c, b, 1) = base64EncodeLookup[(unint64_t)*(unsigned __int8 *)(a1 + v11) >> 2];
          unsigned char *v17 = base64EncodeLookup[((unint64_t)*(unsigned __int8 *)(a1 + 1 + v11) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(unsigned char *)(a1 + v11) & 3))];
          v17[1] = base64EncodeLookup[((unint64_t)*(unsigned __int8 *)(v14 + v11 + 1) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*(unsigned char *)(v14 + v11) & 0xF))];
          unint64_t v18 = v11 + 3;
          v12 += 4;
          v17[2] = base64EncodeLookup[*(unsigned char *)(v14 + v11 + 1) & 0x3F];
          unint64_t v19 = v11 + 5;
          v11 += 3;
        }
        while (v19 < v16);
      }
      if (v15 >= a2) {
        break;
      }
      *(_WORD *)&result[v12] = 2573;
      v12 += 2;
      unint64_t v15 = v16 + v13;
      unint64_t v11 = v18;
    }
    unint64_t v20 = v18 + 1;
    if (v18 + 1 >= a2)
    {
      if (v18 >= a2) {
        goto LABEL_24;
      }
      long long v23 = &result[v12];
      *long long v23 = base64EncodeLookup[(unint64_t)*(unsigned __int8 *)(a1 + v18) >> 2];
      v23[1] = base64EncodeLookup[16 * (*(unsigned char *)(a1 + v18) & 3)];
      char v22 = 61;
    }
    else
    {
      uint64_t v21 = &result[v12];
      *uint64_t v21 = base64EncodeLookup[(unint64_t)*(unsigned __int8 *)(a1 + v18) >> 2];
      v21[1] = base64EncodeLookup[((unint64_t)*(unsigned __int8 *)(a1 + v20) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(unsigned char *)(a1 + v18) & 3))];
      char v22 = base64EncodeLookup[4 * (*(unsigned char *)(a1 + v20) & 0xF)];
    }
    uint64_t v24 = &result[v12];
    _OWORD v24[2] = v22;
    v12 += 4;
    v24[3] = 61;
LABEL_24:
    result[v12] = 0;
    if (a4) {
      *a4 = v12;
    }
  }
  return result;
}

void sub_23C54EA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getANAnnouncementContentClass_block_invoke(uint64_t a1)
{
  AnnounceLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ANAnnouncementContent");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getANAnnouncementContentClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getANAnnouncementContentClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnnounceWrapper.m", 25, @"Unable to find class %s", "ANAnnouncementContent");

    __break(1u);
  }
}

id getANAnnouncementDestinationClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getANAnnouncementDestinationClass_softClass;
  uint64_t v7 = getANAnnouncementDestinationClass_softClass;
  if (!getANAnnouncementDestinationClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getANAnnouncementDestinationClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getANAnnouncementDestinationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C54EBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getANAnnouncementRequestClass_block_invoke(uint64_t a1)
{
  AnnounceLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ANAnnouncementRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getANAnnouncementRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getANAnnouncementRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnnounceWrapper.m", 23, @"Unable to find class %s", "ANAnnouncementRequest");

    __break(1u);
  }
}

void AnnounceLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!AnnounceLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __AnnounceLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E56A80;
    uint64_t v5 = 0;
    AnnounceLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AnnounceLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *AnnounceLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFAnnounceWrapper.m", 21, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __AnnounceLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AnnounceLibraryCore_frameworkLibrary = result;
  return result;
}

void __getANAnnouncementDestinationClass_block_invoke(uint64_t a1)
{
  AnnounceLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ANAnnouncementDestination");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getANAnnouncementDestinationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getANAnnouncementDestinationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnnounceWrapper.m", 26, @"Unable to find class %s", "ANAnnouncementDestination");

    __break(1u);
  }
}

void sub_23C54F110(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __getANAnnounceClass_block_invoke(uint64_t a1)
{
  AnnounceLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("ANAnnounce");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getANAnnounceClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getANAnnounceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnnounceWrapper.m", 22, @"Unable to find class %s", "ANAnnounce");

    __break(1u);
  }
}

id getAFPreferencesClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getAFPreferencesClass_softClass;
  uint64_t v7 = getAFPreferencesClass_softClass;
  if (!getAFPreferencesClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAFPreferencesClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getAFPreferencesClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C54F324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAFPreferencesClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!AssistantServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __AssistantServicesLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E56AB0;
    uint64_t v8 = 0;
    AssistantServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AssistantServicesLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFAnnounceWrapper.m", 27, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AFPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getAFPreferencesClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAnnounceWrapper.m", 28, @"Unable to find class %s", "AFPreferences");

LABEL_10:
    __break(1u);
  }
  getAFPreferencesClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AssistantServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AssistantServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C54F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getHFUtilitiesClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!HomeLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __HomeLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E56A98;
    uint64_t v8 = 0;
    HomeLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!HomeLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *HomeLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFAnnounceWrapper.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("HFUtilities");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getHFUtilitiesClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAnnounceWrapper.m", 20, @"Unable to find class %s", "HFUtilities");

LABEL_10:
    __break(1u);
  }
  getHFUtilitiesClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __HomeLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  HomeLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C5508C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void __getCNMutableContactClass_block_invoke(uint64_t a1)
{
  ContactsLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNMutableContact");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNMutableContactClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCNMutableContactClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddNewContactAction.m", 19, @"Unable to find class %s", "CNMutableContact");

    __break(1u);
  }
}

id getCNLabeledValueClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getCNLabeledValueClass_softClass;
  uint64_t v7 = getCNLabeledValueClass_softClass;
  if (!getCNLabeledValueClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNLabeledValueClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getCNLabeledValueClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C550C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNLabeledValueClass_block_invoke(uint64_t a1)
{
  ContactsLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNLabeledValue");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNLabeledValueClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCNLabeledValueClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddNewContactAction.m", 21, @"Unable to find class %s", "CNLabeledValue");

    __break(1u);
  }
}

void ContactsLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_7185)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __ContactsLibraryCore_block_invoke_7186;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E56B80;
    uint64_t v5 = 0;
    ContactsLibraryCore_frameworkLibrary_7185 = _sl_dlopen();
  }
  if (!ContactsLibraryCore_frameworkLibrary_7185)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFAddNewContactAction.m", 17, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __ContactsLibraryCore_block_invoke_7186()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_7185 = result;
  return result;
}

void sub_23C551060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNPhoneNumberClass_block_invoke(uint64_t a1)
{
  ContactsLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNPhoneNumber");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNPhoneNumberClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCNPhoneNumberClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddNewContactAction.m", 22, @"Unable to find class %s", "CNPhoneNumber");

    __break(1u);
  }
}

void sub_23C552E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAFPreferencesClass_block_invoke_7577(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!AssistantServicesLibraryCore_frameworkLibrary_7578)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __AssistantServicesLibraryCore_block_invoke_7579;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E56BC0;
    uint64_t v8 = 0;
    AssistantServicesLibraryCore_frameworkLibrary_7578 = _sl_dlopen();
  }
  if (!AssistantServicesLibraryCore_frameworkLibrary_7578)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSpeechRecognitionAccessResource.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AFPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getAFPreferencesClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSpeechRecognitionAccessResource.m", 19, @"Unable to find class %s", "AFPreferences");

LABEL_10:
    __break(1u);
  }
  getAFPreferencesClass_softClass_7576 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AssistantServicesLibraryCore_block_invoke_7579()
{
  uint64_t result = _sl_dlopen();
  AssistantServicesLibraryCore_frameworkLibrary_7578 = result;
  return result;
}

void sub_23C555D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id WFDiskCacheKeyArgs(void *a1, id *a2)
{
  id v3 = a1;
  uint64_t v12 = a2;
  long long v4 = objc_opt_new();
  id v5 = v3;
  uint64_t v6 = v5;
  if (v5)
  {
    long long v7 = v5;
    do
    {
      [v4 addObject:v7];
      uint64_t v8 = v12++;
      id v9 = *v8;

      long long v7 = v9;
    }
    while (v9);
  }
  int v10 = [v4 componentsJoinedByString:@"_"];

  return v10;
}

uint64_t __Block_byref_object_copy__8021(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8022(uint64_t a1)
{
}

id WFDiskCacheKey(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  if (a1)
  {
    a1 = WFDiskCacheKeyArgs(a1, &a9);
    uint64_t v9 = vars8;
  }
  return a1;
}

void sub_23C55BBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v9);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__8693(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__8694(uint64_t a1)
{
}

void sub_23C562084(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_23C5622E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getPHAssetClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getPHAssetClass_softClass;
  uint64_t v7 = getPHAssetClass_softClass;
  if (!getPHAssetClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getPHAssetClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C567C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C567E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10633(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10634(uint64_t a1)
{
}

void sub_23C567FC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __getPHAssetCollectionChangeRequestClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollectionChangeRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionChangeRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetCollectionChangeRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFRemovePhotoFromAlbumAction.m", 19, @"Unable to find class %s", "PHAssetCollectionChangeRequest");

    __break(1u);
  }
}

void PhotosLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __PhotosLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E56FC0;
    uint64_t v5 = 0;
    PhotosLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFRemovePhotoFromAlbumAction.m", 16, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PhotosLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary = result;
  return result;
}

void __getPHAssetClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFRemovePhotoFromAlbumAction.m", 17, @"Unable to find class %s", "PHAsset");

    __break(1u);
  }
}

__CFString *MIMETypeForExtension(CFStringRef inTag)
{
  CFStringRef PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x263F01910], inTag, 0);
  if (PreferredIdentifierForTag
    && (CFStringRef v2 = PreferredIdentifierForTag,
        CFStringRef v3 = UTTypeCopyPreferredTagWithClass(PreferredIdentifierForTag, (CFStringRef)*MEMORY[0x263F01918]),
        CFRelease(v2),
        v3))
  {
    long long v4 = [NSString stringWithString:v3];
    CFRelease(v3);
  }
  else
  {
    long long v4 = @"application/octet-stream";
  }
  return v4;
}

id getMPCAssistantMutableRemoteControlDestinationClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPCAssistantMutableRemoteControlDestinationClass_softClass;
  uint64_t v7 = getMPCAssistantMutableRemoteControlDestinationClass_softClass;
  if (!getMPCAssistantMutableRemoteControlDestinationClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPCAssistantMutableRemoteControlDestinationClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPCAssistantMutableRemoteControlDestinationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C56A5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPCAssistantMutableRemoteControlDestinationClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaPlaybackCoreLibraryCore_frameworkLibrary_10842)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaPlaybackCoreLibraryCore_block_invoke_10843;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E57000;
    uint64_t v8 = 0;
    MediaPlaybackCoreLibraryCore_frameworkLibrary_10842 = _sl_dlopen();
  }
  if (!MediaPlaybackCoreLibraryCore_frameworkLibrary_10842)
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MediaPlaybackCoreLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFMediaPlaybackController+MPCAssistant.m", 16, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPCAssistantMutableRemoteControlDestination");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getMPCAssistantMutableRemoteControlDestinationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFMediaPlaybackController+MPCAssistant.m", 17, @"Unable to find class %s", "MPCAssistantMutableRemoteControlDestination");

LABEL_10:
    __break(1u);
  }
  getMPCAssistantMutableRemoteControlDestinationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

uint64_t __MediaPlaybackCoreLibraryCore_block_invoke_10843()
{
  uint64_t result = _sl_dlopen();
  MediaPlaybackCoreLibraryCore_frameworkLibrary_10842 = result;
  return result;
}

void sub_23C56C0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getUIVideoEditorControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!UIKitLibraryCore_frameworkLibrary_11117)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __UIKitLibraryCore_block_invoke_11118;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E570B0;
    uint64_t v8 = 0;
    UIKitLibraryCore_frameworkLibrary_11117 = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary_11117)
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFTrimVideoAction.m", 16, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("UIVideoEditorController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getUIVideoEditorControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFTrimVideoAction.m", 17, @"Unable to find class %s", "UIVideoEditorController");

LABEL_10:
    __break(1u);
  }
  getUIVideoEditorControllerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __UIKitLibraryCore_block_invoke_11118()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore_frameworkLibrary_11117 = result;
  return result;
}

void sub_23C56C6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void TranslationLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!TranslationLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __TranslationLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E57140;
    uint64_t v5 = 0;
    TranslationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!TranslationLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v2 = [NSString stringWithUTF8String:"void *TranslationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFTranslateTextAction.m", 18, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __TranslationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TranslationLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C56CDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_LTTranslatorClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)get_LTTranslatorClass_softClass;
  uint64_t v7 = get_LTTranslatorClass_softClass;
  if (!get_LTTranslatorClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __get_LTTranslatorClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __get_LTTranslatorClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C56CED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11224(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11225(uint64_t a1)
{
}

id getRTRoutineManagerClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getRTRoutineManagerClass_softClass_11633;
  uint64_t v7 = getRTRoutineManagerClass_softClass_11633;
  if (!getRTRoutineManagerClass_softClass_11633)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getRTRoutineManagerClass_block_invoke_11634;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getRTRoutineManagerClass_block_invoke_11634((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C57045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getRTRoutineManagerClass_block_invoke_11634(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreRoutineLibraryCore_frameworkLibrary_11635)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreRoutineLibraryCore_block_invoke_11636;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E57390;
    uint64_t v8 = 0;
    CoreRoutineLibraryCore_frameworkLibrary_11635 = _sl_dlopen();
  }
  if (!CoreRoutineLibraryCore_frameworkLibrary_11635)
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreRoutineLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSetParkedCarAction.m", 26, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RTRoutineManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getRTRoutineManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSetParkedCarAction.m", 31, @"Unable to find class %s", "RTRoutineManager");

LABEL_10:
    __break(1u);
  }
  getRTRoutineManagerClass_softClass_11633 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreRoutineLibraryCore_block_invoke_11636()
{
  uint64_t result = _sl_dlopen();
  CoreRoutineLibraryCore_frameworkLibrary_11635 = result;
  return result;
}

void sub_23C570DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCLLocationClass_block_invoke_11672(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_11673)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke_11674;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E573A8;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary_11673 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_11673)
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSetParkedCarAction.m", 27, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSetParkedCarAction.m", 34, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClass_11671 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_11674()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_11673 = result;
  return result;
}

Class initUIDidTakeScreenshotAction()
{
  if (UIKitLibrary_sOnce_11795 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11795, &__block_literal_global_289);
  }
  Class result = objc_getClass("UIDidTakeScreenshotAction");
  classUIDidTakeScreenshotActioint n = (uint64_t)result;
  getUIDidTakeScreenshotActionClasunsigned int s = (uint64_t (*)())UIDidTakeScreenshotActionFunction;
  return result;
}

id UIDidTakeScreenshotActionFunction()
{
  return (id)classUIDidTakeScreenshotAction;
}

void *__UIKitLibrary_block_invoke_11798()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_11800 = (uint64_t)result;
  return result;
}

void sub_23C573534(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void release_surface_data(__IOSurface *a1)
{
  if (a1)
  {
    IOSurfaceUnlock(a1, 1u, 0);
    CFRelease(a1);
  }
}

uint64_t (*initSBFlashColor(uint64_t a1, float a2, float a3, float a4))()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_11816);
  }
  Class result = (uint64_t (*)())dlsym((void *)SpringBoardServicesLibrary_sLib, "SBFlashColor");
  softLinkSBFlashColor = result;
  if (result)
  {
    v9.n128_f32[0] = a2;
    v10.n128_f32[0] = a3;
    v11.n128_f32[0] = a4;
    return (uint64_t (*)())((uint64_t (*)(uint64_t, __n128, __n128, __n128))result)(a1, v9, v10, v11);
  }
  return result;
}

void *__SpringBoardServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
  SpringBoardServicesLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t (*initSBSSpringBoardServerPort())()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_11816);
  }
  Class result = (uint64_t (*)())dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSSpringBoardServerPort");
  softLinkSBSSpringBoardServerPort = result;
  if (result)
  {
    return (uint64_t (*)())result();
  }
  return result;
}

void sub_23C5752C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getHKDisplayTypeControllerClass_block_invoke_12072(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!HealthUILibraryCore_frameworkLibrary_12074)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __HealthUILibraryCore_block_invoke_12075;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E575E8;
    uint64_t v8 = 0;
    HealthUILibraryCore_frameworkLibrary_12074 = _sl_dlopen();
  }
  if (!HealthUILibraryCore_frameworkLibrary_12074)
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *HealthUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFHKSampleContentItem.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("HKDisplayTypeController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getHKDisplayTypeControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFHKSampleContentItem.m", 20, @"Unable to find class %s", "HKDisplayTypeController");

LABEL_10:
    __break(1u);
  }
  getHKDisplayTypeControllerClass_softClass_12071 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __HealthUILibraryCore_block_invoke_12075()
{
  uint64_t result = _sl_dlopen();
  HealthUILibraryCore_frameworkLibrary_12074 = result;
  return result;
}

void sub_23C576A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12107(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12108(uint64_t a1)
{
}

id getMPMediaQueryClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPMediaQueryClass_softClass_12293;
  uint64_t v7 = getMPMediaQueryClass_softClass_12293;
  if (!getMPMediaQueryClass_softClass_12293)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPMediaQueryClass_block_invoke_12294;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPMediaQueryClass_block_invoke_12294((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C57831C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaQueryClass_block_invoke_12294(uint64_t a1)
{
  MediaPlayerLibrary_12295();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaQuery");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaQueryClass_softClass_12293 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v3 = [NSString stringWithUTF8String:"Class getMPMediaQueryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlayMusicAction.m", 32, @"Unable to find class %s", "MPMediaQuery");

    __break(1u);
  }
}

void *MediaPlayerLibrary_12295()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_12304)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __MediaPlayerLibraryCore_block_invoke_12305;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E57758;
    uint64_t v6 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_12304 = _sl_dlopen();
  }
  v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_12304;
  if (!MediaPlayerLibraryCore_frameworkLibrary_12304)
  {
    v0 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v3 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlayMusicAction.m", 28, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_12305()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_12304 = result;
  return result;
}

void sub_23C5788CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __getMPMusicPlayerControllerClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_12295();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMusicPlayerController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMusicPlayerControllerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v3 = [NSString stringWithUTF8String:"Class getMPMusicPlayerControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlayMusicAction.m", 29, @"Unable to find class %s", "MPMusicPlayerController");

    __break(1u);
  }
}

id getMPCAssistantCommandClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getMPCAssistantCommandClass_softClass;
  uint64_t v7 = getMPCAssistantCommandClass_softClass;
  if (!getMPCAssistantCommandClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPCAssistantCommandClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPCAssistantCommandClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C578EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPCAssistantCommandClass_block_invoke(uint64_t a1)
{
  MediaPlaybackCoreLibrary_12315();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPCAssistantCommand");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPCAssistantCommandClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v3 = [NSString stringWithUTF8String:"Class getMPCAssistantCommandClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlayMusicAction.m", 40, @"Unable to find class %s", "MPCAssistantCommand");

    __break(1u);
  }
}

void MediaPlaybackCoreLibrary_12315()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!MediaPlaybackCoreLibraryCore_frameworkLibrary_12317)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __MediaPlaybackCoreLibraryCore_block_invoke_12318;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E57770;
    uint64_t v5 = 0;
    MediaPlaybackCoreLibraryCore_frameworkLibrary_12317 = _sl_dlopen();
  }
  if (!MediaPlaybackCoreLibraryCore_frameworkLibrary_12317)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *MediaPlaybackCoreLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFPlayMusicAction.m", 39, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __MediaPlaybackCoreLibraryCore_block_invoke_12318()
{
  uint64_t result = _sl_dlopen();
  MediaPlaybackCoreLibraryCore_frameworkLibrary_12317 = result;
  return result;
}

void sub_23C579530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPCAssistantStoreTracklistPlaybackQueueClass_block_invoke(uint64_t a1)
{
  MediaPlaybackCoreLibrary_12315();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPCAssistantStoreTracklistPlaybackQueue");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPCAssistantStoreTracklistPlaybackQueueClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v3 = [NSString stringWithUTF8String:"Class getMPCAssistantStoreTracklistPlaybackQueueClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlayMusicAction.m", 41, @"Unable to find class %s", "MPCAssistantStoreTracklistPlaybackQueue");

    __break(1u);
  }
}

void __getMPCAssistantQueryPlaybackQueueClass_block_invoke(uint64_t a1)
{
  MediaPlaybackCoreLibrary_12315();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPCAssistantQueryPlaybackQueue");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPCAssistantQueryPlaybackQueueClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v3 = [NSString stringWithUTF8String:"Class getMPCAssistantQueryPlaybackQueueClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlayMusicAction.m", 42, @"Unable to find class %s", "MPCAssistantQueryPlaybackQueue");

    __break(1u);
  }
}

void sub_23C579DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaPropertyPredicateClass_block_invoke_12330(uint64_t a1)
{
  MediaPlayerLibrary_12295();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaPropertyPredicate");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaPropertyPredicateClass_softClass_12329 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v3 = [NSString stringWithUTF8String:"Class getMPMediaPropertyPredicateClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlayMusicAction.m", 34, @"Unable to find class %s", "MPMediaPropertyPredicate");

    __break(1u);
  }
}

void *__getMPMediaItemPropertyIsPlayableSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary_12295();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyIsPlayable");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyIsPlayableSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C57A1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPPlaybackArchiveClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_12295();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPPlaybackArchive");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPPlaybackArchiveClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v3 = [NSString stringWithUTF8String:"Class getMPPlaybackArchiveClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlayMusicAction.m", 31, @"Unable to find class %s", "MPPlaybackArchive");

    __break(1u);
  }
}

void sub_23C57A64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaItemCollectionClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_12295();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaItemCollection");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaItemCollectionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    CFStringRef v3 = [NSString stringWithUTF8String:"Class getMPMediaItemCollectionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlayMusicAction.m", 30, @"Unable to find class %s", "MPMediaItemCollection");

    __break(1u);
  }
}

void sub_23C57B174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAVSystemControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaExperienceLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaExperienceLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E57800;
    uint64_t v8 = 0;
    MediaExperienceLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MediaExperienceLibraryCore_frameworkLibrary)
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *MediaExperienceLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFDevice+SystemSettings.m", 23, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AVSystemController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFStringRef v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getAVSystemControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFDevice+SystemSettings.m", 24, @"Unable to find class %s", "AVSystemController");

LABEL_10:
    __break(1u);
  }
  getAVSystemControllerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaExperienceLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaExperienceLibraryCore_frameworkLibrary = result;
  return result;
}

id WFPinboardGetSecretForUsername(void *a1, uint64_t a2)
{
  id v3 = a1;
  long long v4 = WFKeychainWithIdentifier(a2);
  uint64_t v5 = [v4 dataForKey:v3];

  if (v5) {
    uint64_t v6 = (void *)[[NSString alloc] initWithData:v5 encoding:4];
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

WFKeychain *WFKeychainWithIdentifier(uint64_t a1)
{
  id v1 = [@"is.workflow.my.app.pinboard.%@" stringByAppendingString:a1];
  uint64_t v2 = [WFKeychain alloc];
  id v3 = [(WFKeychain *)v2 initWithService:v1 accessGroup:*MEMORY[0x263F33B50]];

  return v3;
}

uint64_t WFPinboardStoreSecretForUsername(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = a1;
  long long v7 = WFKeychainWithIdentifier(a3);
  uint64_t v8 = [v5 dataUsingEncoding:4];

  uint64_t v9 = [v7 setData:v8 forKey:v6];
  return v9;
}

id WFRemoveNull(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = [MEMORY[0x263EFF9A0] dictionaryWithDictionary:v1];
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    v13[2] = __WFRemoveNull_block_invoke;
    v13[3] = &unk_264E5A8A8;
    uint64_t v14 = v2;
    id v3 = v2;
    [v1 enumerateKeysAndObjectsUsingBlock:v13];
    id v4 = [NSDictionary dictionaryWithDictionary:v3];
    id v5 = v14;
LABEL_5:

    goto LABEL_6;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = [MEMORY[0x263EFF980] arrayWithArray:v1];
    uint64_t v8 = MEMORY[0x263EF8330];
    uint64_t v9 = 3221225472;
    __n128 v10 = __WFRemoveNull_block_invoke_2;
    __n128 v11 = &unk_264E578D8;
    uint64_t v12 = v6;
    id v3 = v6;
    [v1 enumerateObjectsUsingBlock:&v8];
    objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithArray:", v3, v8, v9, v10, v11);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    id v5 = v12;
    goto LABEL_5;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = 0;
  }
  else {
    id v4 = v1;
  }
LABEL_6:

  return v4;
}

void __WFRemoveNull_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = WFRemoveNull(a3);
  long long v7 = *(void **)(a1 + 32);
  id v8 = (id)v6;
  if (v6) {
    [v7 setObject:v6 forKey:v5];
  }
  else {
    [v7 removeObjectForKey:v5];
  }
}

void __WFRemoveNull_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = WFRemoveNull(v3);
  id v5 = *(void **)(a1 + 32);
  id v7 = (id)v4;
  if (v4)
  {
    uint64_t v6 = [v5 indexOfObject:v3];

    [v5 replaceObjectAtIndex:v6 withObject:v7];
  }
  else
  {
    [v5 removeObjectIdenticalTo:v3];
  }
}

void WFConfigureRequestBodyWithFile(void *a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v4 = a1;
    id v8 = [v3 inputStream];
    uint64_t v5 = [v3 fileSize];
    uint64_t v6 = [v3 wfType];

    id v7 = [v6 MIMEType];
    WFConfigureRequestBody(v4, (uint64_t)v8, v5, v7, 0);
  }
}

void WFConfigureRequestBody(void *a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  id v13 = a1;
  id v9 = a4;
  [v13 setHTTPBodyStream:a2];
  __n128 v10 = objc_msgSend(NSString, "stringWithFormat:", @"%lld", a3);
  if (a5)
  {
    [v13 setValue:v10 forHTTPHeaderField:@"Content-Length"];
    [v13 setValue:v9 forHTTPHeaderField:@"Content-Type"];
  }
  else
  {
    __n128 v11 = [v13 valueForHTTPHeaderField:@"Content-Length"];

    if (!v11) {
      [v13 addValue:v10 forHTTPHeaderField:@"Content-Length"];
    }
    uint64_t v12 = [v13 valueForHTTPHeaderField:@"Content-Type"];

    if (!v12) {
      [v13 addValue:v9 forHTTPHeaderField:@"Content-Type"];
    }
  }
}

void __WFConfigureRequestBodyWithMultipartFormDictionary_block_invoke(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = [*(id *)(a1 + 32) objectForKey:v6];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    void v9[2] = __WFConfigureRequestBodyWithMultipartFormDictionary_block_invoke_2;
    void v9[3] = &unk_264E5DB78;
    id v10 = *(id *)(a1 + 40);
    id v11 = v6;
    id v12 = v7;
    [v8 getFileRepresentation:v9 forType:0];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [*(id *)(a1 + 40) addPartWithName:v6 string:v8];
    }
    (*((void (**)(id, void))v7 + 2))(v7, 0);
  }
}

void __WFConfigureRequestBodyWithMultipartFormDictionary_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v10 = a3;
  uint64_t v6 = [v5 length];
  id v7 = NSString;
  id v8 = [*(id *)(a1 + 40) boundary];
  id v9 = [v7 stringWithFormat:@"multipart/form-data boundary=%@", v8];;
  WFConfigureRequestBody(v4, (uint64_t)v5, v6, v9, 1);

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void __WFConfigureRequestBodyWithMultipartFormDictionary_block_invoke_2(void *a1, void *a2, void *a3)
{
  id v11 = a3;
  if (a2)
  {
    uint64_t v5 = (void *)a1[4];
    uint64_t v6 = a1[5];
    id v7 = a2;
    id v8 = [v7 filename];
    id v9 = [v7 inputStream];
    uint64_t v10 = [v7 fileSize];

    [v5 addPartWithName:v6 filename:v8 stream:v9 streamLength:v10];
  }
  (*(void (**)(void))(a1[6] + 16))();
}

id getPDFDocumentClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getPDFDocumentClass_softClass;
  uint64_t v7 = getPDFDocumentClass_softClass;
  if (!getPDFDocumentClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPDFDocumentClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getPDFDocumentClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C58D0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPDFDocumentClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PDFKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PDFKitLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E57A38;
    uint64_t v8 = 0;
    PDFKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!PDFKitLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PDFKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSplitPDFAction.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PDFDocument");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPDFDocumentClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSplitPDFAction.m", 16, @"Unable to find class %s", "PDFDocument");

LABEL_10:
    __break(1u);
  }
  getPDFDocumentClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PDFKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PDFKitLibraryCore_frameworkLibrary = result;
  return result;
}

id WFReadableCharacteristicTypeBiologicalSex()
{
  return WFLocalizedContentPropertyNameMarker(@"Biological Sex");
}

id WFReadableCharacteristicTypeBloodType()
{
  return WFLocalizedContentPropertyNameMarker(@"Blood Type");
}

id WFReadableCharacteristicTypeDateOfBirth()
{
  return WFLocalizedContentPropertyNameMarker(@"Date of Birth");
}

id WFReadableCharacteristicTypeWheelchairUse()
{
  return WFLocalizedContentPropertyNameMarker(@"Wheelchair Use");
}

id WFHealthKitAllAvailableUnits()
{
  if (WFHealthKitAllAvailableUnits_onceToken != -1) {
    dispatch_once(&WFHealthKitAllAvailableUnits_onceToken, &__block_literal_global_14042);
  }
  v0 = (void *)WFHealthKitAllAvailableUnits_units;
  return v0;
}

void __WFHealthKitAllAvailableUnits_block_invoke()
{
  v0 = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  id v20 = [v0 pathForResource:@"WFHealthKitConstants" ofType:@"plist"];

  id v1 = (void *)[objc_alloc(NSDictionary) initWithContentsOfFile:v20];
  uint64_t v2 = [v1 objectForKeyedSubscript:@"Units"];
  id v3 = [MEMORY[0x263F08A98] predicateWithFormat:@"group == 'si'"];
  uint64_t v4 = [v2 filteredArrayUsingPredicate:v3];

  uint64_t v5 = [MEMORY[0x263F08A98] predicateWithFormat:@"group == 'non_si'"];
  uint64_t v6 = [v2 filteredArrayUsingPredicate:v5];

  long long v7 = [MEMORY[0x263F08A98] predicateWithFormat:@"group == 'compound'"];
  uint64_t v8 = [v2 filteredArrayUsingPredicate:v7];

  uint64_t v9 = objc_opt_new();
  uint64_t v10 = [MEMORY[0x263EFF960] currentLocale];
  id v11 = [v10 localeIdentifier];
  int v12 = [v11 isEqualToString:@"en_US"];

  if (v12) {
    id v13 = v6;
  }
  else {
    id v13 = v4;
  }
  if (v12) {
    uint64_t v14 = v4;
  }
  else {
    uint64_t v14 = v6;
  }
  unint64_t v15 = [v13 sortedArrayUsingComparator:&__block_literal_global_475];
  [v9 addObjectsFromArray:v15];

  unint64_t v16 = [v14 sortedArrayUsingComparator:&__block_literal_global_475];
  [v9 addObjectsFromArray:v16];

  unsigned __int8 v17 = [v8 sortedArrayUsingComparator:&__block_literal_global_475];
  [v9 addObjectsFromArray:v17];

  uint64_t v18 = objc_msgSend(v9, "if_map:", &__block_literal_global_486);
  unint64_t v19 = (void *)WFHealthKitAllAvailableUnits_units;
  WFHealthKitAllAvailableUnits_unitunsigned int s = v18;
}

id __WFHealthKitAllAvailableUnits_block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 objectForKeyedSubscript:@"unitString"];
  id v3 = [MEMORY[0x263F0A830] unitFromString:v2];

  return v3;
}

uint64_t __WFHealthKitAllAvailableUnits_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 objectForKeyedSubscript:@"important"];
  int v6 = [v5 BOOLValue];

  long long v7 = [v4 objectForKeyedSubscript:@"important"];

  int v8 = [v7 BOOLValue];
  uint64_t v9 = 1;
  if (!(v6 ^ 1 | v8)) {
    uint64_t v9 = -1;
  }
  if (v6 != v8) {
    return v9;
  }
  else {
    return 0;
  }
}

id WFHealthKitReadableCharacteristicTypeToCharacteristicTypeIdentifierDictionary()
{
  if (WFHealthKitReadableCharacteristicTypeToCharacteristicTypeIdentifierDictionary_onceToken != -1) {
    dispatch_once(&WFHealthKitReadableCharacteristicTypeToCharacteristicTypeIdentifierDictionary_onceToken, &__block_literal_global_492);
  }
  v0 = (void *)WFHealthKitReadableCharacteristicTypeToCharacteristicTypeIdentifierDictionary_dictionary;
  return v0;
}

void __WFHealthKitReadableCharacteristicTypeToCharacteristicTypeIdentifierDictionary_block_invoke()
{
  void v7[4] = *MEMORY[0x263EF8340];
  v0 = WFLocalizedContentPropertyNameMarker(@"Biological Sex");
  v6[0] = v0;
  v7[0] = *MEMORY[0x263F09458];
  id v1 = WFLocalizedContentPropertyNameMarker(@"Blood Type");
  v6[1] = v1;
  v7[1] = *MEMORY[0x263F09460];
  uint64_t v2 = WFLocalizedContentPropertyNameMarker(@"Date of Birth");
  v6[2] = v2;
  _OWORD v7[2] = *MEMORY[0x263F09468];
  id v3 = WFLocalizedContentPropertyNameMarker(@"Wheelchair Use");
  v6[3] = v3;
  void v7[3] = *MEMORY[0x263F09478];
  uint64_t v4 = [NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:4];
  uint64_t v5 = (void *)WFHealthKitReadableCharacteristicTypeToCharacteristicTypeIdentifierDictionary_dictionary;
  WFHealthKitReadableCharacteristicTypeToCharacteristicTypeIdentifierDictionary_dictionary = v4;
}

id WFHealthKitReadableCharacteristicTypes()
{
  if (WFHealthKitReadableCharacteristicTypes_onceToken != -1) {
    dispatch_once(&WFHealthKitReadableCharacteristicTypes_onceToken, &__block_literal_global_494);
  }
  v0 = (void *)WFHealthKitReadableCharacteristicTypes_readableTypes;
  return v0;
}

void __WFHealthKitReadableCharacteristicTypes_block_invoke()
{
  void v5[3] = *MEMORY[0x263EF8340];
  v0 = WFLocalizedContentPropertyNameMarker(@"Biological Sex");
  v5[0] = v0;
  id v1 = WFLocalizedContentPropertyNameMarker(@"Blood Type");
  v5[1] = v1;
  uint64_t v2 = WFLocalizedContentPropertyNameMarker(@"Date of Birth");
  v5[2] = v2;
  uint64_t v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v5 count:3];
  uint64_t v4 = (void *)WFHealthKitReadableCharacteristicTypes_readableTypes;
  WFHealthKitReadableCharacteristicTypes_readableTypeunsigned int s = v3;
}

id WFHealthKitReadableSampleTypeToSampleTypeIdentifierDictionary()
{
  if (WFHealthKitReadableSampleTypeToSampleTypeIdentifierDictionary_onceToken != -1) {
    dispatch_once(&WFHealthKitReadableSampleTypeToSampleTypeIdentifierDictionary_onceToken, &__block_literal_global_497);
  }
  v0 = (void *)WFHealthKitReadableSampleTypeToSampleTypeIdentifierDictionary_dictionary;
  return v0;
}

void __WFHealthKitReadableSampleTypeToSampleTypeIdentifierDictionary_block_invoke()
{
  v67[166] = *MEMORY[0x263EF8340];
  uint64_t v0 = *MEMORY[0x263F09EF8];
  v66[0] = @"Steps";
  v66[1] = @"Active Calories";
  uint64_t v1 = *MEMORY[0x263F09BC0];
  v67[0] = v0;
  v67[1] = v1;
  uint64_t v2 = *MEMORY[0x263F09BC8];
  v66[2] = @"Exercise Time";
  v66[3] = @"Move Time";
  uint64_t v3 = *MEMORY[0x263F09BD0];
  v67[2] = v2;
  v67[3] = v3;
  uint64_t v4 = *MEMORY[0x263F09BE8];
  v66[4] = @"Stand Time";
  v66[5] = @"Walking Steadiness";
  uint64_t v5 = *MEMORY[0x263F09BF0];
  v67[4] = v4;
  v67[5] = v5;
  uint64_t v6 = *MEMORY[0x263F09C08];
  v66[6] = @"Resting Calories";
  v66[7] = @"Cycling Distance";
  uint64_t v7 = *MEMORY[0x263F09DB0];
  v67[6] = v6;
  v67[7] = v7;
  uint64_t v8 = *MEMORY[0x263F09DB8];
  v66[8] = @"Snow Sports Distance";
  v66[9] = @"Swimming Distance";
  uint64_t v9 = *MEMORY[0x263F09DD8];
  v67[8] = v8;
  v67[9] = v9;
  uint64_t v10 = *MEMORY[0x263F09DE0];
  v66[10] = @"Walking + Running Distance";
  v66[11] = @"Wheelchair Distance";
  uint64_t v11 = *MEMORY[0x263F09DE8];
  v67[10] = v10;
  v67[11] = v11;
  uint64_t v12 = *MEMORY[0x263F09E10];
  v66[12] = @"Flights Climbed";
  v66[13] = @"Nike Fuel";
  uint64_t v13 = *MEMORY[0x263F09E70];
  v67[12] = v12;
  v67[13] = v13;
  uint64_t v14 = *MEMORY[0x263F09EA0];
  v66[14] = @"Wheelchair Push Count";
  v66[15] = @"Running Ground Contact Time";
  uint64_t v15 = *MEMORY[0x263F09EB8];
  v67[14] = v14;
  v67[15] = v15;
  uint64_t v16 = *MEMORY[0x263F09EC0];
  v66[16] = @"Running Power";
  v66[17] = @"Running Speed";
  uint64_t v17 = *MEMORY[0x263F09EC8];
  v67[16] = v16;
  v67[17] = v17;
  uint64_t v18 = *MEMORY[0x263F09ED0];
  v66[18] = @"Running Stride Length";
  v66[19] = @"Running Vertical Oscillation";
  uint64_t v19 = *MEMORY[0x263F09ED8];
  v67[18] = v18;
  v67[19] = v19;
  uint64_t v20 = *MEMORY[0x263F09EE0];
  v66[20] = @"Six-Minute Walk";
  v66[21] = @"Stair Speed: Up";
  uint64_t v21 = *MEMORY[0x263F09EE8];
  v67[20] = v20;
  v67[21] = v21;
  uint64_t v22 = *MEMORY[0x263F09EF0];
  v66[22] = @"Stair Speed: Down";
  v66[23] = @"Swimming Stroke Count";
  uint64_t v23 = *MEMORY[0x263F09F00];
  v67[22] = v22;
  v67[23] = v23;
  uint64_t v24 = *MEMORY[0x263F09F10];
  v66[24] = @"UV Index";
  v66[25] = @"VO2 Max";
  uint64_t v25 = *MEMORY[0x263F09F20];
  v67[24] = v24;
  v67[25] = v25;
  uint64_t v26 = *MEMORY[0x263F09F30];
  v66[26] = @"Walking Asymmetry";
  v66[27] = @"Double Support Time";
  uint64_t v27 = *MEMORY[0x263F09F38];
  v67[26] = v26;
  v67[27] = v27;
  uint64_t v28 = *MEMORY[0x263F09F48];
  v66[28] = @"Walking Speed";
  v66[29] = @"Step Length";
  uint64_t v29 = *MEMORY[0x263F09F50];
  v67[28] = v28;
  v67[29] = v29;
  uint64_t v30 = *MEMORY[0x263F09BE0];
  v66[30] = @"Sleep Wrist Temperature";
  v66[31] = @"Body Fat Percentage";
  uint64_t v31 = *MEMORY[0x263F09C30];
  v67[30] = v30;
  v67[31] = v31;
  uint64_t v32 = *MEMORY[0x263F09C38];
  v66[32] = @"Weight";
  v66[33] = @"Body Mass Index";
  uint64_t v33 = *MEMORY[0x263F09C40];
  v67[32] = v32;
  v67[33] = v33;
  uint64_t v34 = *MEMORY[0x263F09E50];
  v66[34] = @"Height";
  v66[35] = @"Lean Body Mass";
  uint64_t v35 = *MEMORY[0x263F09E68];
  v67[34] = v34;
  v67[35] = v35;
  uint64_t v36 = *MEMORY[0x263F09F28];
  v66[36] = @"Waist Circumference";
  v66[37] = @"Atrial Fibrillation Burden";
  uint64_t v37 = *MEMORY[0x263F09BF8];
  v67[36] = v36;
  v67[37] = v37;
  uint64_t v38 = *MEMORY[0x263F09C00];
  v66[38] = @"Basal Body Temperature";
  v66[39] = @"Diastolic Blood Pressure";
  uint64_t v39 = *MEMORY[0x263F09C20];
  v67[38] = v38;
  v67[39] = v39;
  uint64_t v40 = *MEMORY[0x263F09C28];
  v66[40] = @"Systolic Blood Pressure";
  v66[41] = @"Body Temperature";
  uint64_t v41 = *MEMORY[0x263F09C48];
  v67[40] = v40;
  v67[41] = v41;
  uint64_t v42 = *MEMORY[0x263F09E38];
  v66[42] = @"Heart Rate";
  v66[43] = @"Heart Rate Recovery, 1 min";
  uint64_t v43 = *MEMORY[0x263F09E40];
  v67[42] = v42;
  v67[43] = v43;
  uint64_t v44 = *MEMORY[0x263F09E48];
  v66[44] = @"Heart Rate Variability";
  v66[45] = @"Respiratory Rate";
  uint64_t v45 = *MEMORY[0x263F09EA8];
  v67[44] = v44;
  v67[45] = v45;
  uint64_t v46 = *MEMORY[0x263F09EB0];
  v66[46] = @"Resting Heart Rate";
  v66[47] = @"Walking Heart Rate Average";
  uint64_t v47 = *MEMORY[0x263F09F40];
  v67[46] = v46;
  v67[47] = v47;
  uint64_t v48 = *MEMORY[0x263F09C10];
  v66[48] = @"Blood Alcohol Content";
  v66[49] = @"Blood Glucose";
  uint64_t v49 = *MEMORY[0x263F09C18];
  v67[48] = v48;
  v67[49] = v49;
  uint64_t v50 = *MEMORY[0x263F09DF0];
  v66[50] = @"Electrodermal Activity";
  v66[51] = @"Environmental Audio Exposure";
  uint64_t v51 = *MEMORY[0x263F09DF8];
  v67[50] = v50;
  v67[51] = v51;
  uint64_t v52 = *MEMORY[0x263F09E18];
  v66[52] = @"Forced Expiratory Volume, 1 sec";
  v66[53] = @"Forced Vital Capacity";
  uint64_t v53 = *MEMORY[0x263F09E20];
  v67[52] = v52;
  v67[53] = v53;
  uint64_t v54 = *MEMORY[0x263F09E28];
  v66[54] = @"Headphone Audio Exposure";
  v66[55] = @"Inhaler Usage";
  uint64_t v55 = *MEMORY[0x263F09E58];
  v67[54] = v54;
  v67[55] = v55;
  uint64_t v56 = *MEMORY[0x263F09E60];
  v66[56] = @"Insulin Delivery";
  v66[57] = @"Number of Alcoholic Beverages";
  uint64_t v57 = *MEMORY[0x263F09E78];
  v67[56] = v56;
  v67[57] = v57;
  uint64_t v58 = *MEMORY[0x263F09E80];
  v66[58] = @"Number of Times Fallen";
  v66[59] = @"Oxygen Saturation";
  uint64_t v59 = *MEMORY[0x263F09E88];
  v67[58] = v58;
  v67[59] = v59;
  uint64_t v60 = *MEMORY[0x263F09E90];
  v66[60] = @"Peak Expiratory Flow Rate";
  v66[61] = @"Peripheral Perfusion Index";
  uint64_t v61 = *MEMORY[0x263F09E98];
  v67[60] = v60;
  v67[61] = v61;
  uint64_t v62 = *MEMORY[0x263F09C70];
  v66[62] = @"Biotin";
  v66[63] = @"Caffeine";
  uint64_t v63 = *MEMORY[0x263F09C78];
  v67[62] = v62;
  v67[63] = v63;
  v66[64] = @"Calcium";
  v67[64] = *MEMORY[0x263F09C80];
  v66[65] = @"Carbohydrates";
  v67[65] = *MEMORY[0x263F09C88];
  v66[66] = @"Chloride";
  v67[66] = *MEMORY[0x263F09C90];
  v66[67] = @"Dietary Cholesterol";
  v67[67] = *MEMORY[0x263F09C98];
  v66[68] = @"Chromium";
  v67[68] = *MEMORY[0x263F09CA0];
  v66[69] = @"Copper";
  v67[69] = *MEMORY[0x263F09CA8];
  v66[70] = @"Dietary Calories";
  v67[70] = *MEMORY[0x263F09CB0];
  v66[71] = @"Monounsaturated Fat";
  v67[71] = *MEMORY[0x263F09CB8];
  v66[72] = @"Polyunsaturated Fat";
  v67[72] = *MEMORY[0x263F09CC0];
  v66[73] = @"Saturated Fat";
  v67[73] = *MEMORY[0x263F09CC8];
  v66[74] = @"Total Fat";
  v67[74] = *MEMORY[0x263F09CD0];
  v66[75] = @"Fiber";
  v67[75] = *MEMORY[0x263F09CD8];
  v66[76] = @"Folate";
  v67[76] = *MEMORY[0x263F09CE0];
  v66[77] = @"Iodine";
  v67[77] = *MEMORY[0x263F09CE8];
  v66[78] = @"Iron";
  v67[78] = *MEMORY[0x263F09CF0];
  v66[79] = @"Magnesium";
  v67[79] = *MEMORY[0x263F09CF8];
  v66[80] = @"Manganese";
  v67[80] = *MEMORY[0x263F09D00];
  v66[81] = @"Molybdenum";
  v67[81] = *MEMORY[0x263F09D08];
  v66[82] = @"Niacin";
  v67[82] = *MEMORY[0x263F09D10];
  v66[83] = @"Pantothenic Acid";
  v67[83] = *MEMORY[0x263F09D18];
  v66[84] = @"Phosphorus";
  v67[84] = *MEMORY[0x263F09D20];
  v66[85] = @"Potassium";
  v67[85] = *MEMORY[0x263F09D28];
  v66[86] = @"Protein";
  v67[86] = *MEMORY[0x263F09D30];
  v66[87] = @"Riboflavin";
  v67[87] = *MEMORY[0x263F09D38];
  v66[88] = @"Selenium";
  v67[88] = *MEMORY[0x263F09D40];
  v66[89] = @"Sodium";
  v67[89] = *MEMORY[0x263F09D48];
  v66[90] = @"Sugar";
  v67[90] = *MEMORY[0x263F09D50];
  v66[91] = @"Thiamin";
  v67[91] = *MEMORY[0x263F09D58];
  v66[92] = @"Vitamin A";
  v67[92] = *MEMORY[0x263F09D60];
  v66[93] = @"Vitamin B12";
  v67[93] = *MEMORY[0x263F09D68];
  v66[94] = @"Vitamin B6";
  v67[94] = *MEMORY[0x263F09D70];
  v66[95] = @"Vitamin C";
  v67[95] = *MEMORY[0x263F09D78];
  v66[96] = @"Vitamin D";
  v67[96] = *MEMORY[0x263F09D80];
  v66[97] = @"Vitamin E";
  v67[97] = *MEMORY[0x263F09D88];
  v66[98] = @"Vitamin K";
  v67[98] = *MEMORY[0x263F09D90];
  v66[99] = @"Water";
  v67[99] = *MEMORY[0x263F09D98];
  v66[100] = @"Zinc";
  v67[100] = *MEMORY[0x263F09DA0];
  v66[101] = @"Underwater Depth";
  v67[101] = *MEMORY[0x263F09F18];
  v66[102] = @"Water Temperature";
  v67[102] = *MEMORY[0x263F09F58];
  v66[103] = @"Abdominal Cramps";
  v67[103] = *MEMORY[0x263F09228];
  v66[104] = @"Acne";
  v67[104] = *MEMORY[0x263F09230];
  v66[105] = @"Appetite Changes";
  v67[105] = *MEMORY[0x263F09238];
  v66[106] = @"Stand Hour";
  v67[106] = *MEMORY[0x263F09240];
  v66[107] = @"Walking Steadiness Event";
  v67[107] = *MEMORY[0x263F09248];
  v66[108] = @"Bladder Incontinence";
  v67[108] = *MEMORY[0x263F09250];
  v66[109] = @"Bloating";
  v67[109] = *MEMORY[0x263F09268];
  v66[110] = @"Breast Pain";
  v67[110] = *MEMORY[0x263F09270];
  v66[111] = @"Cervical Mucus Quality";
  v67[111] = *MEMORY[0x263F09278];
  v66[112] = @"Chest Tightness or Pain";
  v67[112] = *MEMORY[0x263F09280];
  v66[113] = @"Chills";
  v67[113] = *MEMORY[0x263F09288];
  v66[114] = @"Constipation";
  v67[114] = *MEMORY[0x263F09290];
  v66[115] = @"Contraceptive";
  v67[115] = *MEMORY[0x263F09298];
  v66[116] = @"Coughing";
  v67[116] = *MEMORY[0x263F092A0];
  v66[117] = @"Diarrhea";
  v67[117] = *MEMORY[0x263F092A8];
  v66[118] = @"Dizziness";
  v67[118] = *MEMORY[0x263F092B0];
  v66[119] = @"Dry Skin";
  v67[119] = *MEMORY[0x263F092B8];
  v66[120] = @"Fainting";
  v67[120] = *MEMORY[0x263F092C8];
  v66[121] = @"Fatigue";
  v67[121] = *MEMORY[0x263F092D0];
  v66[122] = @"Fever";
  v67[122] = *MEMORY[0x263F092D8];
  v66[123] = @"Generalized Body Ache";
  v67[123] = *MEMORY[0x263F092E0];
  v66[124] = @"Hair Loss";
  v67[124] = *MEMORY[0x263F092E8];
  v66[125] = @"Handwashing";
  v67[125] = *MEMORY[0x263F092F0];
  v66[126] = @"Headache";
  v67[126] = *MEMORY[0x263F092F8];
  v66[127] = @"Heartburn";
  v67[127] = *MEMORY[0x263F09310];
  v66[128] = @"High Heart Rate";
  v67[128] = *MEMORY[0x263F09318];
  v66[129] = @"Hot Flashes";
  v67[129] = *MEMORY[0x263F09320];
  v66[130] = @"Infrequent Menstrual Cycles";
  v67[130] = *MEMORY[0x263F09328];
  v66[131] = @"Irregular Heart Rhythm";
  v67[131] = *MEMORY[0x263F09338];
  v66[132] = @"Irregular Menstrual Cycles";
  v67[132] = *MEMORY[0x263F09340];
  v66[133] = @"Lactation";
  v67[133] = *MEMORY[0x263F09348];
  v66[134] = @"Loss of Smell";
  v67[134] = *MEMORY[0x263F09350];
  v66[135] = @"Loss of Taste";
  v67[135] = *MEMORY[0x263F09358];
  v66[136] = @"Low Cardio Fitness";
  v67[136] = *MEMORY[0x263F09360];
  v66[137] = @"Lower Back Pain";
  v67[137] = *MEMORY[0x263F09370];
  v66[138] = @"Low Heart Rate";
  v67[138] = *MEMORY[0x263F09368];
  v66[139] = @"Memory Lapse";
  v67[139] = *MEMORY[0x263F09378];
  v66[140] = @"Menstruation";
  v67[140] = *MEMORY[0x263F09380];
  v66[141] = @"Mindful Session";
  v67[141] = *MEMORY[0x263F09388];
  v66[142] = @"Mood Changes";
  v67[142] = *MEMORY[0x263F09390];
  v66[143] = @"Nausea";
  v67[143] = *MEMORY[0x263F09398];
  v66[144] = @"Night Sweats";
  v67[144] = *MEMORY[0x263F093A0];
  v66[145] = @"Ovulation Test Result";
  v67[145] = *MEMORY[0x263F093A8];
  v66[146] = @"Pelvic Pain";
  v67[146] = *MEMORY[0x263F093B0];
  v66[147] = @"Persistent Intermenstrual Bleeding";
  v67[147] = *MEMORY[0x263F093B8];
  v66[148] = @"Pregnancy";
  v67[148] = *MEMORY[0x263F093C0];
  v66[149] = @"Pregnancy Test Result";
  v67[149] = *MEMORY[0x263F093C8];
  v66[150] = @"Progesterone Test Result";
  v67[150] = *MEMORY[0x263F093D0];
  v66[151] = @"Prolonged Menstrual Periods";
  v67[151] = *MEMORY[0x263F093D8];
  v66[152] = @"Rapid Pounding or Fluttering Heartbeat";
  v67[152] = *MEMORY[0x263F093E0];
  v66[153] = @"Runny Nose";
  v67[153] = *MEMORY[0x263F093E8];
  v66[154] = @"Sexual Activity";
  v67[154] = *MEMORY[0x263F093F0];
  v66[155] = @"Shortness of Breath";
  v67[155] = *MEMORY[0x263F093F8];
  v66[156] = @"Sinus Congestion";
  v67[156] = *MEMORY[0x263F09400];
  v66[157] = @"Skipped Heartbeat";
  v67[157] = *MEMORY[0x263F09408];
  v66[158] = @"Sleep";
  v67[158] = *MEMORY[0x263F09410];
  v66[159] = @"Sleep Changes";
  v67[159] = *MEMORY[0x263F09420];
  v66[160] = @"Sore Throat";
  v67[160] = *MEMORY[0x263F09428];
  v66[161] = @"Toothbrushing";
  v67[161] = *MEMORY[0x263F09430];
  v66[162] = @"Vaginal Dryness";
  v67[162] = *MEMORY[0x263F09438];
  v66[163] = @"Vomiting";
  v67[163] = *MEMORY[0x263F09440];
  v66[164] = @"Wheezing";
  v67[164] = *MEMORY[0x263F09448];
  v66[165] = @"Spotting";
  v67[165] = *MEMORY[0x263F09330];
  uint64_t v64 = [NSDictionary dictionaryWithObjects:v67 forKeys:v66 count:166];
  unint64_t v65 = (void *)WFHealthKitReadableSampleTypeToSampleTypeIdentifierDictionary_dictionary;
  WFHealthKitReadableSampleTypeToSampleTypeIdentifierDictionary_dictionary = v64;
}

id WFHealthKitQuantityTypeIdentifiers()
{
  if (WFHealthKitQuantityTypeIdentifiers_onceToken != -1) {
    dispatch_once(&WFHealthKitQuantityTypeIdentifiers_onceToken, &__block_literal_global_997);
  }
  uint64_t v0 = (void *)WFHealthKitQuantityTypeIdentifiers_identifiers;
  return v0;
}

void __WFHealthKitQuantityTypeIdentifiers_block_invoke()
{
  v34[103] = *MEMORY[0x263EF8340];
  uint64_t v0 = *MEMORY[0x263F09BC0];
  v34[0] = *MEMORY[0x263F09EF8];
  v34[1] = v0;
  uint64_t v1 = *MEMORY[0x263F09BD0];
  v34[2] = *MEMORY[0x263F09BC8];
  v34[3] = v1;
  uint64_t v2 = *MEMORY[0x263F09BF0];
  v34[4] = *MEMORY[0x263F09BE8];
  v34[5] = v2;
  uint64_t v3 = *MEMORY[0x263F09DB0];
  v34[6] = *MEMORY[0x263F09C08];
  v34[7] = v3;
  uint64_t v4 = *MEMORY[0x263F09DD8];
  v34[8] = *MEMORY[0x263F09DB8];
  v34[9] = v4;
  uint64_t v5 = *MEMORY[0x263F09DE8];
  v34[10] = *MEMORY[0x263F09DE0];
  v34[11] = v5;
  uint64_t v6 = *MEMORY[0x263F09E70];
  v34[12] = *MEMORY[0x263F09E10];
  v34[13] = v6;
  uint64_t v7 = *MEMORY[0x263F09EB8];
  v34[14] = *MEMORY[0x263F09EA0];
  v34[15] = v7;
  uint64_t v8 = *MEMORY[0x263F09EC8];
  v34[16] = *MEMORY[0x263F09EC0];
  v34[17] = v8;
  uint64_t v9 = *MEMORY[0x263F09ED8];
  v34[18] = *MEMORY[0x263F09ED0];
  v34[19] = v9;
  uint64_t v10 = *MEMORY[0x263F09EE8];
  v34[20] = *MEMORY[0x263F09EE0];
  v34[21] = v10;
  uint64_t v11 = *MEMORY[0x263F09F00];
  v34[22] = *MEMORY[0x263F09EF0];
  v34[23] = v11;
  uint64_t v12 = *MEMORY[0x263F09F20];
  v34[24] = *MEMORY[0x263F09F10];
  v34[25] = v12;
  uint64_t v13 = *MEMORY[0x263F09F38];
  v34[26] = *MEMORY[0x263F09F30];
  v34[27] = v13;
  uint64_t v14 = *MEMORY[0x263F09F50];
  v34[28] = *MEMORY[0x263F09F48];
  v34[29] = v14;
  uint64_t v15 = *MEMORY[0x263F09C30];
  v34[30] = *MEMORY[0x263F09BE0];
  v34[31] = v15;
  uint64_t v16 = *MEMORY[0x263F09C40];
  v34[32] = *MEMORY[0x263F09C38];
  v34[33] = v16;
  uint64_t v17 = *MEMORY[0x263F09E68];
  v34[34] = *MEMORY[0x263F09E50];
  v34[35] = v17;
  uint64_t v18 = *MEMORY[0x263F09BF8];
  v34[36] = *MEMORY[0x263F09F28];
  v34[37] = v18;
  uint64_t v19 = *MEMORY[0x263F09C20];
  v34[38] = *MEMORY[0x263F09C00];
  v34[39] = v19;
  uint64_t v20 = *MEMORY[0x263F09C48];
  v34[40] = *MEMORY[0x263F09C28];
  v34[41] = v20;
  uint64_t v21 = *MEMORY[0x263F09E40];
  v34[42] = *MEMORY[0x263F09E38];
  v34[43] = v21;
  uint64_t v22 = *MEMORY[0x263F09EA8];
  v34[44] = *MEMORY[0x263F09E48];
  v34[45] = v22;
  uint64_t v23 = *MEMORY[0x263F09F40];
  v34[46] = *MEMORY[0x263F09EB0];
  v34[47] = v23;
  uint64_t v24 = *MEMORY[0x263F09C18];
  v34[48] = *MEMORY[0x263F09C10];
  v34[49] = v24;
  uint64_t v25 = *MEMORY[0x263F09DF8];
  v34[50] = *MEMORY[0x263F09DF0];
  v34[51] = v25;
  uint64_t v26 = *MEMORY[0x263F09E20];
  v34[52] = *MEMORY[0x263F09E18];
  v34[53] = v26;
  uint64_t v27 = *MEMORY[0x263F09E58];
  v34[54] = *MEMORY[0x263F09E28];
  v34[55] = v27;
  uint64_t v28 = *MEMORY[0x263F09E78];
  v34[56] = *MEMORY[0x263F09E60];
  v34[57] = v28;
  uint64_t v29 = *MEMORY[0x263F09E88];
  v34[58] = *MEMORY[0x263F09E80];
  v34[59] = v29;
  uint64_t v30 = *MEMORY[0x263F09E98];
  v34[60] = *MEMORY[0x263F09E90];
  v34[61] = v30;
  uint64_t v31 = *MEMORY[0x263F09C78];
  v34[62] = *MEMORY[0x263F09C70];
  v34[63] = v31;
  v34[64] = *MEMORY[0x263F09C80];
  v34[65] = *MEMORY[0x263F09C88];
  v34[66] = *MEMORY[0x263F09C90];
  v34[67] = *MEMORY[0x263F09C98];
  v34[68] = *MEMORY[0x263F09CA0];
  v34[69] = *MEMORY[0x263F09CA8];
  v34[70] = *MEMORY[0x263F09CB0];
  v34[71] = *MEMORY[0x263F09CB8];
  v34[72] = *MEMORY[0x263F09CC0];
  v34[73] = *MEMORY[0x263F09CC8];
  v34[74] = *MEMORY[0x263F09CD0];
  v34[75] = *MEMORY[0x263F09CD8];
  v34[76] = *MEMORY[0x263F09CE0];
  v34[77] = *MEMORY[0x263F09CE8];
  v34[78] = *MEMORY[0x263F09CF0];
  v34[79] = *MEMORY[0x263F09CF8];
  v34[80] = *MEMORY[0x263F09D00];
  v34[81] = *MEMORY[0x263F09D08];
  v34[82] = *MEMORY[0x263F09D10];
  v34[83] = *MEMORY[0x263F09D18];
  v34[84] = *MEMORY[0x263F09D20];
  v34[85] = *MEMORY[0x263F09D28];
  v34[86] = *MEMORY[0x263F09D30];
  v34[87] = *MEMORY[0x263F09D38];
  v34[88] = *MEMORY[0x263F09D40];
  v34[89] = *MEMORY[0x263F09D48];
  v34[90] = *MEMORY[0x263F09D50];
  v34[91] = *MEMORY[0x263F09D58];
  v34[92] = *MEMORY[0x263F09D60];
  v34[93] = *MEMORY[0x263F09D68];
  v34[94] = *MEMORY[0x263F09D70];
  v34[95] = *MEMORY[0x263F09D78];
  v34[96] = *MEMORY[0x263F09D80];
  v34[97] = *MEMORY[0x263F09D88];
  v34[98] = *MEMORY[0x263F09D90];
  v34[99] = *MEMORY[0x263F09D98];
  v34[100] = *MEMORY[0x263F09DA0];
  v34[101] = *MEMORY[0x263F09F18];
  v34[102] = *MEMORY[0x263F09F58];
  uint64_t v32 = [MEMORY[0x263EFF8C0] arrayWithObjects:v34 count:103];
  uint64_t v33 = (void *)WFHealthKitQuantityTypeIdentifiers_identifiers;
  WFHealthKitQuantityTypeIdentifiers_identifierunsigned int s = v32;
}

id WFHealthKitSymptomsTypeIdentifiers()
{
  v21[39] = *MEMORY[0x263EF8340];
  uint64_t v0 = *MEMORY[0x263F09230];
  v21[0] = *MEMORY[0x263F09228];
  v21[1] = v0;
  uint64_t v1 = *MEMORY[0x263F09250];
  v21[2] = *MEMORY[0x263F09238];
  v21[3] = v1;
  uint64_t v2 = *MEMORY[0x263F09270];
  v21[4] = *MEMORY[0x263F09268];
  v21[5] = v2;
  uint64_t v3 = *MEMORY[0x263F09288];
  v21[6] = *MEMORY[0x263F09280];
  v21[7] = v3;
  uint64_t v4 = *MEMORY[0x263F092A0];
  v21[8] = *MEMORY[0x263F09290];
  v21[9] = v4;
  uint64_t v5 = *MEMORY[0x263F092B0];
  v21[10] = *MEMORY[0x263F092A8];
  v21[11] = v5;
  uint64_t v6 = *MEMORY[0x263F092C8];
  v21[12] = *MEMORY[0x263F092B8];
  v21[13] = v6;
  uint64_t v7 = *MEMORY[0x263F092D8];
  v21[14] = *MEMORY[0x263F092D0];
  v21[15] = v7;
  uint64_t v8 = *MEMORY[0x263F092E8];
  v21[16] = *MEMORY[0x263F092E0];
  v21[17] = v8;
  uint64_t v9 = *MEMORY[0x263F09310];
  v21[18] = *MEMORY[0x263F092F8];
  v21[19] = v9;
  uint64_t v10 = *MEMORY[0x263F09350];
  v21[20] = *MEMORY[0x263F09320];
  v21[21] = v10;
  uint64_t v11 = *MEMORY[0x263F09370];
  v21[22] = *MEMORY[0x263F09358];
  v21[23] = v11;
  uint64_t v12 = *MEMORY[0x263F09390];
  v21[24] = *MEMORY[0x263F09378];
  v21[25] = v12;
  uint64_t v13 = *MEMORY[0x263F093A0];
  v21[26] = *MEMORY[0x263F09398];
  v21[27] = v13;
  uint64_t v14 = *MEMORY[0x263F093E0];
  v21[28] = *MEMORY[0x263F093B0];
  v21[29] = v14;
  uint64_t v15 = *MEMORY[0x263F093F8];
  v21[30] = *MEMORY[0x263F093E8];
  v21[31] = v15;
  uint64_t v16 = *MEMORY[0x263F09408];
  v21[32] = *MEMORY[0x263F09400];
  v21[33] = v16;
  uint64_t v17 = *MEMORY[0x263F09428];
  v21[34] = *MEMORY[0x263F09420];
  v21[35] = v17;
  uint64_t v18 = *MEMORY[0x263F09440];
  v21[36] = *MEMORY[0x263F09438];
  v21[37] = v18;
  v21[38] = *MEMORY[0x263F09448];
  uint64_t v19 = [MEMORY[0x263EFF8C0] arrayWithObjects:v21 count:39];
  return v19;
}

id WFHealthKitSampleTypeIdentifiers()
{
  if (WFHealthKitSampleTypeIdentifiers_onceToken != -1) {
    dispatch_once(&WFHealthKitSampleTypeIdentifiers_onceToken, &__block_literal_global_999);
  }
  uint64_t v0 = (void *)WFHealthKitSampleTypeIdentifiers_identifiers;
  return v0;
}

void __WFHealthKitSampleTypeIdentifiers_block_invoke()
{
  v19[3] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFHealthKitQuantityTypeIdentifiers();
  uint64_t v1 = (void *)WFHealthKitSampleTypeIdentifiers_identifiers;
  WFHealthKitSampleTypeIdentifiers_identifierunsigned int s = v0;

  uint64_t v2 = (void *)[(id)WFHealthKitSampleTypeIdentifiers_identifiers mutableCopy];
  uint64_t v3 = *MEMORY[0x263F09410];
  uint64_t v4 = *MEMORY[0x263F09E90];
  objc_msgSend(v2, "insertObject:atIndex:", *MEMORY[0x263F09410], objc_msgSend(v2, "indexOfObject:", *MEMORY[0x263F09E90]) + 1);
  uint64_t v5 = *MEMORY[0x263F093F0];
  objc_msgSend(v2, "insertObject:atIndex:", *MEMORY[0x263F093F0], objc_msgSend(v2, "indexOfObject:", v3) + 1);
  uint64_t v6 = *MEMORY[0x263F09278];
  objc_msgSend(v2, "insertObject:atIndex:", *MEMORY[0x263F09278], objc_msgSend(v2, "indexOfObject:", v5) + 1);
  uint64_t v7 = *MEMORY[0x263F09380];
  objc_msgSend(v2, "insertObject:atIndex:", *MEMORY[0x263F09380], objc_msgSend(v2, "indexOfObject:", v6) + 1);
  uint64_t v8 = *MEMORY[0x263F09330];
  objc_msgSend(v2, "insertObject:atIndex:", *MEMORY[0x263F09330], objc_msgSend(v2, "indexOfObject:", v7) + 1);
  objc_msgSend(v2, "insertObject:atIndex:", *MEMORY[0x263F093A8], objc_msgSend(v2, "indexOfObject:", v8) + 1);
  objc_msgSend(v2, "insertObject:atIndex:", *MEMORY[0x263F09388], objc_msgSend(v2, "indexOfObject:", v3) + 1);
  uint64_t v9 = *MEMORY[0x263F09368];
  v19[0] = *MEMORY[0x263F09318];
  v19[1] = v9;
  v19[2] = *MEMORY[0x263F09338];
  uint64_t v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:v19 count:3];
  uint64_t v11 = objc_msgSend(MEMORY[0x263F088D0], "indexSetWithIndexesInRange:", objc_msgSend(v2, "indexOfObject:", *MEMORY[0x263F09E48]), objc_msgSend(v10, "count"));
  [v2 insertObjects:v10 atIndexes:v11];

  uint64_t v12 = WFHealthKitSymptomsTypeIdentifiers();
  uint64_t v13 = objc_msgSend(MEMORY[0x263F088D0], "indexSetWithIndexesInRange:", objc_msgSend(v2, "indexOfObject:", v4), objc_msgSend(v12, "count"));
  [v2 insertObjects:v12 atIndexes:v13];

  uint64_t v14 = *MEMORY[0x263F092F0];
  v18[0] = *MEMORY[0x263F09430];
  v18[1] = v14;
  uint64_t v15 = [MEMORY[0x263EFF8C0] arrayWithObjects:v18 count:2];
  [v2 addObjectsFromArray:v15];

  uint64_t v16 = [v2 copy];
  uint64_t v17 = (void *)WFHealthKitSampleTypeIdentifiers_identifiers;
  WFHealthKitSampleTypeIdentifiers_identifierunsigned int s = v16;
}

id WFHealthKitReadableSampleTypes()
{
  if (WFHealthKitReadableSampleTypes_onceToken != -1) {
    dispatch_once(&WFHealthKitReadableSampleTypes_onceToken, &__block_literal_global_1002);
  }
  uint64_t v0 = (void *)WFHealthKitReadableSampleTypes_readableTypes;
  return v0;
}

void __WFHealthKitReadableSampleTypes_block_invoke()
{
  uint64_t v0 = WFHealthKitSampleTypeIdentifiers();
  uint64_t v1 = WFHealthKitSampleTypeIdentifierToReadableSampleTypeDictionary();
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  v5[2] = __WFHealthKitReadableSampleTypes_block_invoke_2;
  void v5[3] = &unk_264E57C80;
  id v6 = v1;
  id v2 = v1;
  uint64_t v3 = objc_msgSend(v0, "if_compactMap:", v5);
  uint64_t v4 = (void *)WFHealthKitReadableSampleTypes_readableTypes;
  WFHealthKitReadableSampleTypes_readableTypeunsigned int s = v3;
}

id WFHealthKitSampleTypeIdentifierToReadableSampleTypeDictionary()
{
  if (WFHealthKitSampleTypeIdentifierToReadableSampleTypeDictionary_onceToken != -1) {
    dispatch_once(&WFHealthKitSampleTypeIdentifierToReadableSampleTypeDictionary_onceToken, &__block_literal_global_1581);
  }
  uint64_t v0 = (void *)WFHealthKitSampleTypeIdentifierToReadableSampleTypeDictionary_dictionary;
  return v0;
}

uint64_t __WFHealthKitReadableSampleTypes_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) objectForKey:a2];
}

void __WFHealthKitSampleTypeIdentifierToReadableSampleTypeDictionary_block_invoke()
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v0 = WFHealthKitReadableSampleTypeToSampleTypeIdentifierDictionary();
  uint64_t v1 = objc_opt_new();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = v0;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(v2, "objectForKey:", v7, (void)v10);
        [v1 setObject:v7 forKey:v8];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  uint64_t v9 = (void *)WFHealthKitSampleTypeIdentifierToReadableSampleTypeDictionary_dictionary;
  WFHealthKitSampleTypeIdentifierToReadableSampleTypeDictionary_dictionary = (uint64_t)v1;
}

id WFHealthKitLocalizedSampleTypes()
{
  if (WFHealthKitLocalizedSampleTypes_onceToken != -1) {
    dispatch_once(&WFHealthKitLocalizedSampleTypes_onceToken, &__block_literal_global_1005);
  }
  uint64_t v0 = (void *)WFHealthKitLocalizedSampleTypes_localizedTypes;
  return v0;
}

void __WFHealthKitLocalizedSampleTypes_block_invoke()
{
  uint64_t v0 = WFHealthKitSampleTypeIdentifiers();
  uint64_t v1 = WFHealthKitSampleTypeIdentifierToReadableSampleTypeDictionary();
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __WFHealthKitLocalizedSampleTypes_block_invoke_2;
  v6[3] = &unk_264E57A98;
  id v7 = v1;
  id v2 = v1;
  uint64_t v3 = objc_msgSend(v0, "if_compactMap:", v6);
  uint64_t v4 = [v3 sortedArrayUsingComparator:&__block_literal_global_1013];
  uint64_t v5 = (void *)WFHealthKitLocalizedSampleTypes_localizedTypes;
  WFHealthKitLocalizedSampleTypes_localizedTypeunsigned int s = v4;
}

id __WFHealthKitLocalizedSampleTypes_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) objectForKey:v3];
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263F85250]) initWithString:v4];
  id v6 = objc_alloc(MEMORY[0x263F08DB0]);
  id v7 = [MEMORY[0x263EFF960] currentLocale];
  uint64_t v8 = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  uint64_t v9 = [v8 bundleURL];
  long long v10 = (void *)[v6 initWithKey:v4 table:0 locale:v7 bundleURL:v9];
  [v5 setStringResource:v10];

  long long v11 = [MEMORY[0x263F0A658] quantityTypeForIdentifier:v3];
  if (v11)
  {
    if (objc_opt_respondsToSelector()) {
      objc_msgSend(v11, "hk_localizedName");
    }
    else {
    long long v12 = +[WFHealthKitHelper readableSampleTypeIdentifierFromSampleTypeIdentifier:v3];
    }
    [v5 setLocalizedValue:v12];
  }
  else
  {
    long long v12 = [MEMORY[0x263F0A158] categoryTypeForIdentifier:v3];
    if (objc_opt_respondsToSelector()) {
      objc_msgSend(v12, "hk_localizedName");
    }
    else {
    long long v13 = +[WFHealthKitHelper readableSampleTypeIdentifierFromSampleTypeIdentifier:v3];
    }
    [v5 setLocalizedValue:v13];
  }
  return v5;
}

uint64_t __WFHealthKitLocalizedSampleTypes_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 localizedValue];
  id v6 = [v4 localizedValue];

  uint64_t v7 = [v5 localizedStandardCompare:v6];
  return v7;
}

id WFHealthKitReadableWorkoutActivityTypeToWorkoutActivityTypeDictionary()
{
  if (WFHealthKitReadableWorkoutActivityTypeToWorkoutActivityTypeDictionary_onceToken != -1) {
    dispatch_once(&WFHealthKitReadableWorkoutActivityTypeToWorkoutActivityTypeDictionary_onceToken, &__block_literal_global_1015);
  }
  uint64_t v0 = (void *)WFHealthKitReadableWorkoutActivityTypeToWorkoutActivityTypeDictionary_dictionary;
  return v0;
}

void __WFHealthKitReadableWorkoutActivityTypeToWorkoutActivityTypeDictionary_block_invoke()
{
  uint64_t v0 = (void *)WFHealthKitReadableWorkoutActivityTypeToWorkoutActivityTypeDictionary_dictionary;
  WFHealthKitReadableWorkoutActivityTypeToWorkoutActivityTypeDictionary_dictionary = (uint64_t)&unk_26F0769C8;
}

id WFHealthKitReadableWorkoutActivityTypes()
{
  if (WFHealthKitReadableWorkoutActivityTypes_onceToken != -1) {
    dispatch_once(&WFHealthKitReadableWorkoutActivityTypes_onceToken, &__block_literal_global_1443);
  }
  uint64_t v0 = (void *)WFHealthKitReadableWorkoutActivityTypes_readableTypes;
  return v0;
}

void __WFHealthKitReadableWorkoutActivityTypes_block_invoke()
{
  uint64_t v0 = (void *)WFHealthKitReadableWorkoutActivityTypes_readableTypes;
  WFHealthKitReadableWorkoutActivityTypes_readableTypeunsigned int s = (uint64_t)&unk_26F076668;

  uint64_t v1 = [(id)WFHealthKitReadableWorkoutActivityTypes_readableTypes sortedArrayUsingSelector:sel_localizedStandardCompare_];
  id v2 = (void *)WFHealthKitReadableWorkoutActivityTypes_readableTypes;
  WFHealthKitReadableWorkoutActivityTypes_readableTypeunsigned int s = v1;
}

id WFHealthKitReadableCervicalMucusQualityToEnumDictionary()
{
  v8[5] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Dry");
  v7[0] = v0;
  v8[0] = &unk_26F0753A8;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Sticky");
  v7[1] = v1;
  v8[1] = &unk_26F0753C0;
  id v2 = WFLocalizedParameterValueMarker(@"Creamy");
  _OWORD v7[2] = v2;
  void v8[2] = &unk_26F0753D8;
  id v3 = WFLocalizedParameterValueMarker(@"Watery");
  void v7[3] = v3;
  _OWORD v8[3] = &unk_26F0753F0;
  id v4 = WFLocalizedParameterValueMarker(@"Egg White");
  void v7[4] = v4;
  v8[4] = &unk_26F075408;
  uint64_t v5 = [NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:5];

  return v5;
}

id WFHealthKitReadableAppleStandingHourToEnumDictionary()
{
  v5[2] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Stood");
  v4[0] = v0;
  v5[0] = &unk_26F075420;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Idle");
  v4[1] = v1;
  v5[1] = &unk_26F0753A8;
  id v2 = [NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

id WFHealthKitReadableMenstrualFlowToEnumDictionary()
{
  void v7[4] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Unspecified");
  v6[0] = v0;
  v7[0] = &unk_26F0753A8;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Light");
  v6[1] = v1;
  v7[1] = &unk_26F0753C0;
  id v2 = WFLocalizedParameterValueMarker(@"Medium");
  v6[2] = v2;
  _OWORD v7[2] = &unk_26F0753D8;
  id v3 = WFLocalizedParameterValueMarker(@"Heavy");
  v6[3] = v3;
  void v7[3] = &unk_26F0753F0;
  id v4 = [NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:4];

  return v4;
}

id WFHealthKitReadableMenstrualFlowIsStartOfCycleToBoolDictionary()
{
  v5[2] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Yes");
  v4[0] = v0;
  v5[0] = MEMORY[0x263EFFA88];
  uint64_t v1 = WFLocalizedParameterValueMarker(@"No");
  v4[1] = v1;
  v5[1] = MEMORY[0x263EFFA80];
  id v2 = [NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

id WFHealthKitReadableOvulationTestResultToEnumDictionary()
{
  void v7[4] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Negative");
  v6[0] = v0;
  v7[0] = &unk_26F0753A8;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Luteinizing Hormone Surge");
  v6[1] = v1;
  v7[1] = &unk_26F0753C0;
  id v2 = WFLocalizedParameterValueMarker(@"Estrogen Surge");
  v6[2] = v2;
  _OWORD v7[2] = &unk_26F0753F0;
  id v3 = WFLocalizedParameterValueMarker(@"Indeterminate");
  v6[3] = v3;
  void v7[3] = &unk_26F0753D8;
  id v4 = [NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:4];

  return v4;
}

id WFHealthKitReadableSleepAnalysisToEnumDictionary()
{
  v9[6] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"In Bed");
  v8[0] = v0;
  v9[0] = &unk_26F075420;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Asleep");
  v8[1] = v1;
  v9[1] = &unk_26F0753A8;
  id v2 = WFLocalizedParameterValueMarker(@"Awake");
  void v8[2] = v2;
  void v9[2] = &unk_26F0753C0;
  id v3 = WFLocalizedParameterValueMarker(@"Core");
  _OWORD v8[3] = v3;
  void v9[3] = &unk_26F0753D8;
  id v4 = WFLocalizedParameterValueMarker(@"Deep");
  v8[4] = v4;
  void v9[4] = &unk_26F0753F0;
  uint64_t v5 = WFLocalizedParameterValueMarker(@"REM");
  v8[5] = v5;
  v9[5] = &unk_26F075408;
  id v6 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:6];

  return v6;
}

id WFHealthKitReadableAppetiteChangesToEnumDictionary()
{
  void v7[4] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Increased");
  v6[0] = v0;
  v7[0] = &unk_26F0753D8;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Decreased");
  v6[1] = v1;
  v7[1] = &unk_26F0753C0;
  id v2 = WFLocalizedParameterValueMarker(@"No Change");
  v6[2] = v2;
  _OWORD v7[2] = &unk_26F0753A8;
  id v3 = WFLocalizedParameterValueMarker(@"Present");
  v6[3] = v3;
  void v7[3] = &unk_26F075420;
  id v4 = [NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:4];

  return v4;
}

id WFHealthKitReadablePresenceToEnumDictionary()
{
  v5[2] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Present");
  v4[0] = v0;
  v5[0] = &unk_26F075420;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Not Present");
  v4[1] = v1;
  v5[1] = &unk_26F0753A8;
  id v2 = [NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

id WFHealthKitReadableSeverityToEnumDictionary()
{
  v8[5] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Severe");
  v7[0] = v0;
  v8[0] = &unk_26F0753F0;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Moderate");
  v7[1] = v1;
  v8[1] = &unk_26F0753D8;
  id v2 = WFLocalizedParameterValueMarker(@"Mild");
  _OWORD v7[2] = v2;
  void v8[2] = &unk_26F0753C0;
  id v3 = WFLocalizedParameterValueMarker(@"Present");
  void v7[3] = v3;
  _OWORD v8[3] = &unk_26F075420;
  id v4 = WFLocalizedParameterValueMarker(@"Not Present");
  void v7[4] = v4;
  v8[4] = &unk_26F0753A8;
  uint64_t v5 = [NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:5];

  return v5;
}

id WFHealthKitReadableSexualActivityToBoolDictionary()
{
  v5[2] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Protection Used");
  v4[0] = v0;
  v5[0] = MEMORY[0x263EFFA88];
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Protection Unused");
  v4[1] = v1;
  v5[1] = MEMORY[0x263EFFA80];
  id v2 = [NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

id WFHealthKitReadableInsulinDeliveryReasonToEnumDictionary()
{
  v5[2] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Basal");
  v4[0] = v0;
  v5[0] = &unk_26F0753A8;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Bolus");
  v4[1] = v1;
  v5[1] = &unk_26F0753C0;
  id v2 = [NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

id WFHealthKitReadableBloodGlucoseMealTimeToEnumDictionary()
{
  v5[2] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Before Meal");
  v4[0] = v0;
  v5[0] = &unk_26F0753A8;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"After Meal");
  v4[1] = v1;
  v5[1] = &unk_26F0753C0;
  id v2 = [NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

id WFHealthKitReadableVO2MaxTestTypeToEnumDictionary()
{
  v6[3] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedParameterValueMarker(@"Max Exercise Test");
  v5[0] = v0;
  v6[0] = &unk_26F0753A8;
  uint64_t v1 = WFLocalizedParameterValueMarker(@"Sub-Max Exercise Prediction");
  v5[1] = v1;
  v6[1] = &unk_26F0753C0;
  id v2 = WFLocalizedParameterValueMarker(@"Non-Exercise Prediction");
  v5[2] = v2;
  v6[2] = &unk_26F0753D8;
  id v3 = [NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:3];

  return v3;
}

void sub_23C591598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaQueryClass_block_invoke_14389(uint64_t a1)
{
  MediaPlayerLibrary_14394();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaQuery");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaQueryClass_softClass_14388 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaQueryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaylistPickerParameter.m", 21, @"Unable to find class %s", "MPMediaQuery");

    __break(1u);
  }
}

void sub_23C591788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaPlaylistClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_14394();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaPlaylist");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaPlaylistClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaPlaylistClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaylistPickerParameter.m", 22, @"Unable to find class %s", "MPMediaPlaylist");

    __break(1u);
  }
}

void *MediaPlayerLibrary_14394()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_14404)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __MediaPlayerLibraryCore_block_invoke_14405;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E57AF8;
    uint64_t v6 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_14404 = _sl_dlopen();
  }
  uint64_t v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_14404;
  if (!MediaPlayerLibraryCore_frameworkLibrary_14404)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaylistPickerParameter.m", 19, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_14405()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_14404 = result;
  return result;
}

id getMPMediaLibraryClass_14415()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMPMediaLibraryClass_softClass_14416;
  uint64_t v7 = getMPMediaLibraryClass_softClass_14416;
  if (!getMPMediaLibraryClass_softClass_14416)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPMediaLibraryClass_block_invoke_14417;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getMPMediaLibraryClass_block_invoke_14417((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C591C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaLibraryClass_block_invoke_14417(uint64_t a1)
{
  MediaPlayerLibrary_14394();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaLibraryClass_softClass_14416 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaylistPickerParameter.m", 20, @"Unable to find class %s", "MPMediaLibrary");

    __break(1u);
  }
}

void getMPMediaLibraryDidChangeNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getMPMediaLibraryDidChangeNotificationSymbolLoc_ptr;
  uint64_t v9 = getMPMediaLibraryDidChangeNotificationSymbolLoc_ptr;
  if (!getMPMediaLibraryDidChangeNotificationSymbolLoc_ptr)
  {
    id v1 = MediaPlayerLibrary_14394();
    void v7[3] = (uint64_t)dlsym(v1, "MPMediaLibraryDidChangeNotification");
    getMPMediaLibraryDidChangeNotificationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getMPMediaLibraryDidChangeNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPlaylistPickerParameter.m", 23, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C591EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMPMediaLibraryDidChangeNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaPlayerLibrary_14394();
  uint64_t result = dlsym(v2, "MPMediaLibraryDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaLibraryDidChangeNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C594584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMPAVRoutingControllerErrorDomainSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_14899)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    void v5[3] = __MediaPlayerLibraryCore_block_invoke_14900;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_264E57C38;
    uint64_t v7 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_14899 = _sl_dlopen();
  }
  id v2 = (void *)MediaPlayerLibraryCore_frameworkLibrary_14899;
  if (!MediaPlayerLibraryCore_frameworkLibrary_14899)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFChangePlaybackDestinationAction.m", 17, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "MPAVRoutingControllerErrorDomain");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getMPAVRoutingControllerErrorDomainSymbolLoc_ptr = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_14900()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_14899 = result;
  return result;
}

void sub_23C595A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C5989C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15718(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15719(uint64_t a1)
{
}

void sub_23C59AAB8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15888(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15889(uint64_t a1)
{
}

void sub_23C59C350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *NetrbLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!NetrbLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __NetrbLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E580C0;
    uint64_t v6 = 0;
    NetrbLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)NetrbLibraryCore_frameworkLibrary;
  if (!NetrbLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *NetrbLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPersonalHotspotSettingsClient.m", 19, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __NetrbLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  NetrbLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C59C7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C59C998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C59CCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C59E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16402(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16403(uint64_t a1)
{
}

void WFConfigureAudioRoutesForUserInterface(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  if ([v3 isRunningWithSiriUI]
    && (objc_opt_respondsToSelector() & 1) != 0
    && ([v3 airPlayRouteIDs],
        long long v5 = objc_claimAutoreleasedReturnValue(),
        uint64_t v6 = [v5 count],
        v5,
        v6))
  {
    uint64_t v7 = [v3 airPlayRouteIDs];
    uint64_t v8 = v4;
    INCRouteAudioToAirplayOutputDevices();
  }
  else
  {
    v4[2](v4);
  }
}

void __WFConfigureAudioRoutesForUserInterface_block_invoke(uint64_t a1, char a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = getWFIntentExecutionLogObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "WFConfigureAudioRoutesForUserInterface_block_invoke";
      __int16 v9 = 2114;
      id v10 = v5;
      _os_log_impl(&dword_23C364000, v6, OS_LOG_TYPE_ERROR, "%s Failed to set AirPlay output device: %{public}@", (uint8_t *)&v7, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t WFStreamClientCallback(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 handleStreamEvent:a2];
}

void sub_23C5AAAA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C5AAB44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C5AADF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23C5AAEBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id generateBaseString(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  __int16 v9 = (void *)MEMORY[0x263EFF9A0];
  id v10 = a5;
  id v11 = a4;
  id v12 = a2;
  id v13 = a1;
  uint64_t v14 = [v9 dictionaryWithDictionary:a3];
  [v14 addEntriesFromDictionary:v11];

  [v14 addEntriesFromDictionary:v10];
  uint64_t v15 = TMDictionaryToQueryString(v14);
  uint64_t v16 = NSString;
  uint64_t v17 = TMURLEncode(v13);

  uint64_t v18 = TMURLEncode(v15);
  uint64_t v19 = [v16 stringWithFormat:@"%@&%@&%@", v12, v17, v18];

  return v19;
}

id sign(void *a1, uint64_t a2, __CFString *a3)
{
  uint64_t v4 = NSString;
  if (a3) {
    id v5 = a3;
  }
  else {
    id v5 = &stru_26F008428;
  }
  id v6 = a1;
  int v7 = [v4 stringWithFormat:@"%@&%@", a2, v5];
  uint64_t v8 = HMACSHA1(v6, v7);

  if (objc_opt_respondsToSelector()) {
    [v8 base64EncodedStringWithOptions:0];
  }
  else {
  __int16 v9 = [v8 base64Encoding];
  }

  return v9;
}

id HMACSHA1(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [a1 dataUsingEncoding:4];
  id v5 = [v3 dataUsingEncoding:4];

  id v6 = malloc_type_malloc(0x14uLL, 0xE3B29A8AuLL);
  id v7 = v5;
  uint64_t v8 = (const void *)[v7 bytes];
  size_t v9 = [v7 length];
  id v10 = v4;
  CCHmac(0, v8, v9, (const void *)[v10 bytes], objc_msgSend(v10, "length"), v6);
  id v11 = [MEMORY[0x263EFF8F8] dataWithBytesNoCopy:v6 length:20 freeWhenDone:1];

  return v11;
}

uint64_t UNIXTimestamp(void *a1)
{
  uint64_t v1 = NSString;
  [a1 timeIntervalSince1970];
  return objc_msgSend(v1, "stringWithFormat:", @"%f", round(v2));
}

void sub_23C5AC808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVLinearPCMIsFloatKeySymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary();
  uint64_t result = dlsym(v2, "AVLinearPCMIsFloatKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMIsFloatKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AVFoundationLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_18449)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_18450;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E58538;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_18449 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_18449;
  if (!AVFoundationLibraryCore_frameworkLibrary_18449)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesizer.m", 30, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getAVLinearPCMBitDepthKeySymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary();
  uint64_t result = dlsym(v2, "AVLinearPCMBitDepthKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMBitDepthKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AVFoundationLibraryCore_block_invoke_18450()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_18449 = result;
  return result;
}

void sub_23C5AD0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVSpeechUtteranceClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVSpeechUtterance");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVSpeechUtteranceClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVSpeechUtteranceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesizer.m", 36, @"Unable to find class %s", "AVSpeechUtterance");

    __break(1u);
  }
}

void *__getAVSpeechUtteranceMinimumSpeechRateSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary();
  uint64_t result = dlsym(v2, "AVSpeechUtteranceMinimumSpeechRate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVSpeechUtteranceMinimumSpeechRateSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVSpeechUtteranceMaximumSpeechRateSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary();
  uint64_t result = dlsym(v2, "AVSpeechUtteranceMaximumSpeechRate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVSpeechUtteranceMaximumSpeechRateSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVSpeechUtteranceDefaultSpeechRateSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary();
  uint64_t result = dlsym(v2, "AVSpeechUtteranceDefaultSpeechRate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVSpeechUtteranceDefaultSpeechRateSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C5AD5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSiriTTSSynthesisVoiceClass_block_invoke(uint64_t a1)
{
  SiriTTSServiceLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SiriTTSSynthesisVoice");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSiriTTSSynthesisVoiceClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSiriTTSSynthesisVoiceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesizer.m", 55, @"Unable to find class %s", "SiriTTSSynthesisVoice");

    __break(1u);
  }
}

void __getSiriTTSSpeechRequestClass_block_invoke(uint64_t a1)
{
  SiriTTSServiceLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SiriTTSSpeechRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSiriTTSSpeechRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSiriTTSSpeechRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesizer.m", 54, @"Unable to find class %s", "SiriTTSSpeechRequest");

    __break(1u);
  }
}

void SiriTTSServiceLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!SiriTTSServiceLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __SiriTTSServiceLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E58550;
    uint64_t v5 = 0;
    SiriTTSServiceLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SiriTTSServiceLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = [MEMORY[0x263F08690] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *SiriTTSServiceLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFSpeechSynthesizer.m", 52, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __SiriTTSServiceLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SiriTTSServiceLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C5ADA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSiriTTSDaemonSessionClass_block_invoke(uint64_t a1)
{
  SiriTTSServiceLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SiriTTSDaemonSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSiriTTSDaemonSessionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSiriTTSDaemonSessionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesizer.m", 53, @"Unable to find class %s", "SiriTTSDaemonSession");

    __break(1u);
  }
}

void sub_23C5ADEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVSpeechSynthesizerClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVSpeechSynthesizer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVSpeechSynthesizerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVSpeechSynthesizerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesizer.m", 35, @"Unable to find class %s", "AVSpeechSynthesizer");

    __break(1u);
  }
}

id getWFTextToSpeechLogObject()
{
  if (getWFTextToSpeechLogObject_onceToken != -1) {
    dispatch_once(&getWFTextToSpeechLogObject_onceToken, &__block_literal_global_18486);
  }
  uint64_t v0 = (void *)getWFTextToSpeechLogObject_log;
  return v0;
}

void sub_23C5AE700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

void *__getAVAudioFileTypeKeySymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary();
  uint64_t result = dlsym(v2, "AVAudioFileTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAudioFileTypeKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVLinearPCMIsNonInterleavedSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary();
  uint64_t result = dlsym(v2, "AVLinearPCMIsNonInterleaved");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMIsNonInterleavedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVAudioFileClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioFile");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioFileClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAudioFileClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesizer.m", 31, @"Unable to find class %s", "AVAudioFile");

    __break(1u);
  }
}

void sub_23C5AEA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVAudioPCMBufferClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioPCMBuffer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioPCMBufferClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAudioPCMBufferClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeechSynthesizer.m", 32, @"Unable to find class %s", "AVAudioPCMBuffer");

    __break(1u);
  }
}

void __getWFTextToSpeechLogObject_block_invoke()
{
  os_log_t v0 = os_log_create((const char *)*MEMORY[0x263F85748], "TextToSpeech");
  uint64_t v1 = (void *)getWFTextToSpeechLogObject_log;
  getWFTextToSpeechLogObject_log = (uint64_t)v0;
}

void sub_23C5AEF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C5B0AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C5B21C8(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x23C5B2198);
  }

  objc_exception_rethrow();
}

void sub_23C5B21EC(_Unwind_Exception *a1)
{
}

void sub_23C5B58C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19484(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19485(uint64_t a1)
{
}

void sub_23C5B66D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __HealthKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  HealthKitLibraryCore_frameworkLibrary = result;
  return result;
}

id getFIUIWorkoutActivityTypeClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getFIUIWorkoutActivityTypeClass_softClass;
  uint64_t v7 = getFIUIWorkoutActivityTypeClass_softClass;
  if (!getFIUIWorkoutActivityTypeClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getFIUIWorkoutActivityTypeClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    v3[4] = &v4;
    __getFIUIWorkoutActivityTypeClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5B7134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getFIUIWorkoutActivityTypeClass_block_invoke(uint64_t a1)
{
  FitnessUILibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FIUIWorkoutActivityType");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFIUIWorkoutActivityTypeClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFIUIWorkoutActivityTypeClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFFitnessUIHelper.m", 17, @"Unable to find class %s", "FIUIWorkoutActivityType");

    __break(1u);
  }
}

void *FitnessUILibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!FitnessUILibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __FitnessUILibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E58778;
    uint64_t v6 = 0;
    FitnessUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  os_log_t v0 = (void *)FitnessUILibraryCore_frameworkLibrary;
  if (!FitnessUILibraryCore_frameworkLibrary)
  {
    os_log_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *FitnessUILibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFFitnessUIHelper.m", 16, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __FitnessUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  FitnessUILibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C5B7558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getFIUIDeviceSupportsSwimmingSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = FitnessUILibrary();
  uint64_t result = dlsym(v2, "FIUIDeviceSupportsSwimming");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFIUIDeviceSupportsSwimmingSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void WFAddContentToPlaylist(void *a1, void *a2, void *a3)
{
  v27[2] = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2050000000;
  uint64_t v8 = (void *)getMPMediaLibraryClass_softClass_19729;
  uint64_t v26 = getMPMediaLibraryClass_softClass_19729;
  if (!getMPMediaLibraryClass_softClass_19729)
  {
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 3221225472;
    v22[2] = __getMPMediaLibraryClass_block_invoke_19730;
    v22[3] = &unk_264E5EC88;
    v22[4] = &v23;
    __getMPMediaLibraryClass_block_invoke_19730((uint64_t)v22);
    uint64_t v8 = (void *)v24[3];
  }
  id v9 = v8;
  _Block_object_dispose(&v23, 8);
  id v10 = [v9 defaultMediaLibrary];
  id v11 = objc_opt_new();
  v27[0] = objc_opt_class();
  v27[1] = objc_opt_class();
  id v12 = [MEMORY[0x263EFF8C0] arrayWithObjects:v27 count:2];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = __WFAddContentToPlaylist_block_invoke;
  v17[3] = &unk_264E589B8;
  id v18 = v11;
  id v19 = v5;
  id v20 = v10;
  id v21 = v7;
  id v13 = v10;
  id v14 = v5;
  id v15 = v11;
  id v16 = v7;
  [v6 generateCollectionByCoercingToItemClasses:v12 completionHandler:v17];
}

void sub_23C5B88D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaLibraryClass_block_invoke_19730(uint64_t a1)
{
  MediaPlayerLibrary_19739();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaLibraryClass_softClass_19729 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddToPlaylistAction.m", 21, @"Unable to find class %s", "MPMediaLibrary");

    __break(1u);
  }
}

void __WFAddContentToPlaylist_block_invoke(id *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  if (a4)
  {
    (*((void (**)(void))a1[7] + 2))();
  }
  else
  {
    id v7 = objc_opt_new();
    uint64_t v8 = objc_opt_new();
    id v9 = [v6 items];
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    void v18[2] = __WFAddContentToPlaylist_block_invoke_2;
    v18[3] = &unk_264E58940;
    id v19 = a1[5];
    id v20 = v8;
    id v21 = v7;
    id v22 = a1[6];
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = __WFAddContentToPlaylist_block_invoke_16;
    v12[3] = &unk_264E58990;
    id v13 = v21;
    id v14 = a1[4];
    id v17 = a1[7];
    id v15 = a1[5];
    id v16 = v20;
    id v10 = v20;
    id v11 = v21;
    objc_msgSend(v9, "if_enumerateAsynchronouslyInSequence:completionHandler:", v18, v12);
  }
}

void __WFAddContentToPlaylist_block_invoke_2(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v29[0] = MEMORY[0x263EF8330];
    v29[1] = 3221225472;
    v29[2] = __WFAddContentToPlaylist_block_invoke_3;
    v29[3] = &unk_264E58850;
    id v30 = a1[4];
    id v31 = a1[5];
    id v32 = a1[6];
    id v34 = v7;
    id v33 = a1[7];
    uint64_t v36 = 0;
    uint64_t v37 = &v36;
    uint64_t v38 = 0x2050000000;
    uint64_t v8 = (void *)getMPMediaItemClass_softClass_19754;
    uint64_t v39 = getMPMediaItemClass_softClass_19754;
    if (!getMPMediaItemClass_softClass_19754)
    {
      v35[0] = MEMORY[0x263EF8330];
      v35[1] = 3221225472;
      v35[2] = __getMPMediaItemClass_block_invoke_19755;
      v35[3] = &unk_264E5EC88;
      v35[4] = &v36;
      __getMPMediaItemClass_block_invoke_19755((uint64_t)v35);
      uint64_t v8 = (void *)v37[3];
    }
    id v9 = &v30;
    id v10 = &v31;
    id v11 = &v32;
    id v12 = &v34;
    id v13 = &v33;
    id v14 = v8;
    _Block_object_dispose(&v36, 8);
    [v6 getObjectRepresentations:v29 forClass:v14];
  }
  else
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __WFAddContentToPlaylist_block_invoke_7;
    aBlock[3] = &unk_264E588F0;
    id v9 = &v24;
    id v24 = v6;
    id v10 = &v28;
    id v15 = v7;
    id v28 = v15;
    id v11 = &v25;
    id v25 = a1[4];
    id v12 = &v26;
    id v26 = a1[6];
    id v13 = &v27;
    id v27 = a1[7];
    id v16 = (void (**)(void))_Block_copy(aBlock);
    if (a1[4] && [a1[5] count])
    {
      id v17 = a1[5];
      id v18 = a1[4];
      v19[0] = MEMORY[0x263EF8330];
      v19[1] = 3221225472;
      v19[2] = __WFAddContentToPlaylist_block_invoke_15;
      v19[3] = &unk_264E58918;
      id v20 = v17;
      id v21 = v15;
      id v22 = v16;
      [v18 appendItems:v20 completion:v19];
    }
    else
    {
      v16[2](v16);
    }
  }
}

void sub_23C5B8ED4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void __WFAddContentToPlaylist_block_invoke_16(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __WFAddContentToPlaylist_block_invoke_17;
  aBlock[3] = &unk_264E58968;
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 64);
  id v5 = _Block_copy(aBlock);
  if (!v4 && *(void *)(a1 + 48) && [*(id *)(a1 + 56) count])
  {
    id v7 = *(void **)(a1 + 48);
    id v6 = *(void **)(a1 + 56);
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = __WFAddContentToPlaylist_block_invoke_18;
    _OWORD v8[3] = &unk_264E5ADE8;
    id v9 = v6;
    id v10 = v5;
    [v7 appendItems:v9 completion:v8];
  }
  else
  {
    (*((void (**)(void *, id))v5 + 2))(v5, v4);
  }
}

void __WFAddContentToPlaylist_block_invoke_17(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(*(id *)(a1 + 40), "addObject:", *(void *)(*((void *)&v9 + 1) + 8 * v8++), (void)v9);
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void __WFAddContentToPlaylist_block_invoke_18(uint64_t a1, int a2)
{
  [*(id *)(a1 + 32) removeAllObjects];
  uint64_t v4 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v5 = *(void (**)(uint64_t, void))(v4 + 16);
    v5(v4, 0);
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x263F087E8];
    getMPErrorDomain();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v7 = [v6 errorWithDomain:v8 code:0 userInfo:0];
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v7);
  }
}

void getMPErrorDomain()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  os_log_t v0 = (void **)getMPErrorDomainSymbolLoc_ptr;
  uint64_t v9 = getMPErrorDomainSymbolLoc_ptr;
  if (!getMPErrorDomainSymbolLoc_ptr)
  {
    uint64_t v1 = MediaPlayerLibrary_19739();
    void v7[3] = (uint64_t)dlsym(v1, "MPErrorDomain");
    getMPErrorDomainSymbolLoc_ptr = v7[3];
    os_log_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    double v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getMPErrorDomain(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAddToPlaylistAction.m", 26, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C5B939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMPErrorDomainSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = MediaPlayerLibrary_19739();
  uint64_t result = dlsym(v2, "MPErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPErrorDomainSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MediaPlayerLibrary_19739()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_19748)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __MediaPlayerLibraryCore_block_invoke_19749;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E589D8;
    uint64_t v6 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_19748 = _sl_dlopen();
  }
  os_log_t v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_19748;
  if (!MediaPlayerLibraryCore_frameworkLibrary_19748)
  {
    os_log_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddToPlaylistAction.m", 20, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_19749()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_19748 = result;
  return result;
}

void __WFAddContentToPlaylist_block_invoke_3(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = *(void **)(a1 + 40);
    id v5 = a2;
    [v4 addObjectsFromArray:v5];
    [*(id *)(a1 + 48) addObjectsFromArray:v5];

    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v6();
  }
  else
  {
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3221225472;
    v10[2] = __WFAddContentToPlaylist_block_invoke_4;
    _OWORD v10[3] = &unk_264E58800;
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 48);
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = __WFAddContentToPlaylist_block_invoke_6;
    _OWORD v8[3] = &unk_264E58828;
    id v9 = *(id *)(a1 + 64);
    id v7 = a2;
    objc_msgSend(v7, "if_enumerateAsynchronouslyInSequence:completionHandler:", v10, v8);
  }
}

void __getMPMediaItemClass_block_invoke_19755(uint64_t a1)
{
  MediaPlayerLibrary_19739();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaItemClass_softClass_19754 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddToPlaylistAction.m", 22, @"Unable to find class %s", "MPMediaItem");

    __break(1u);
  }
}

void __WFAddContentToPlaylist_block_invoke_7(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __WFAddContentToPlaylist_block_invoke_8;
  v3[3] = &unk_264E588C8;
  id v7 = *(id *)(a1 + 64);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  [v2 getObjectRepresentations:v3 forClass:objc_opt_class()];
}

void __WFAddContentToPlaylist_block_invoke_15(uint64_t a1, char a2)
{
  [*(id *)(a1 + 32) removeAllObjects];
  if (a2)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v4();
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = (void *)MEMORY[0x263F087E8];
    getMPErrorDomain();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    id v7 = [v6 errorWithDomain:v8 code:0 userInfo:0];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v7);
  }
}

void __WFAddContentToPlaylist_block_invoke_8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    long long v10 = *(void **)(a1 + 32);
    if (v10)
    {
      v19[0] = MEMORY[0x263EF8330];
      v19[1] = 3221225472;
      v19[2] = __WFAddContentToPlaylist_block_invoke_9;
      v19[3] = &unk_264E588A0;
      id v20 = v10;
      id v21 = *(id *)(a1 + 40);
      v17[0] = MEMORY[0x263EF8330];
      v17[1] = 3221225472;
      v17[2] = __WFAddContentToPlaylist_block_invoke_11;
      v17[3] = &unk_264E58828;
      id v18 = *(id *)(a1 + 56);
      objc_msgSend(v7, "if_enumerateAsynchronouslyInSequence:completionHandler:", v19, v17);

      id v11 = v20;
    }
    else
    {
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 3221225472;
      v14[2] = __WFAddContentToPlaylist_block_invoke_12;
      v14[3] = &unk_264E588A0;
      id v15 = *(id *)(a1 + 48);
      id v16 = *(id *)(a1 + 40);
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 3221225472;
      v12[2] = __WFAddContentToPlaylist_block_invoke_14;
      v12[3] = &unk_264E58828;
      id v13 = *(id *)(a1 + 56);
      objc_msgSend(v7, "if_enumerateAsynchronouslyInSequence:completionHandler:", v14, v12);

      id v11 = v15;
    }
  }
}

void __WFAddContentToPlaylist_block_invoke_9(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = (void *)[*(id *)(a1 + 32) count];
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v9 = *(void **)(a1 + 32);
  long long v10 = [v6 identifier];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = __WFAddContentToPlaylist_block_invoke_10;
  v12[3] = &unk_264E58878;
  objc_copyWeak(v15, &location);
  v15[1] = v8;
  id v13 = *(id *)(a1 + 40);
  id v11 = v7;
  id v14 = v11;
  [v9 addItemWithProductID:v10 completionHandler:v12];

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
}

void sub_23C5B9CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __WFAddContentToPlaylist_block_invoke_11(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __WFAddContentToPlaylist_block_invoke_12(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = *(void **)(a1 + 32);
  id v8 = [a2 identifier];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = __WFAddContentToPlaylist_block_invoke_13;
  _OWORD v10[3] = &unk_264E5E4B8;
  id v11 = *(id *)(a1 + 40);
  id v12 = v6;
  id v9 = v6;
  [v7 addItemWithProductID:v8 completionHandler:v10];
}

uint64_t __WFAddContentToPlaylist_block_invoke_14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __WFAddContentToPlaylist_block_invoke_13(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 addObjectsFromArray:a2];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void __WFAddContentToPlaylist_block_invoke_10(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v32 = 0;
  id v33 = &v32;
  uint64_t v34 = 0x2050000000;
  uint64_t v5 = (void *)getMPMediaPropertyPredicateClass_softClass_19761;
  uint64_t v35 = getMPMediaPropertyPredicateClass_softClass_19761;
  if (!getMPMediaPropertyPredicateClass_softClass_19761)
  {
    uint64_t v27 = MEMORY[0x263EF8330];
    uint64_t v28 = 3221225472;
    uint64_t v29 = __getMPMediaPropertyPredicateClass_block_invoke_19762;
    id v30 = &unk_264E5EC88;
    id v31 = &v32;
    __getMPMediaPropertyPredicateClass_block_invoke_19762((uint64_t)&v27);
    uint64_t v5 = (void *)v33[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v32, 8);
  id v7 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(WeakRetained, "persistentID"));
  uint64_t v32 = 0;
  id v33 = &v32;
  uint64_t v34 = 0x2020000000;
  id v8 = (void *)getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr_19764;
  uint64_t v35 = getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr_19764;
  if (!getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr_19764)
  {
    uint64_t v27 = MEMORY[0x263EF8330];
    uint64_t v28 = 3221225472;
    uint64_t v29 = __getMPMediaPlaylistPropertyPersistentIDSymbolLoc_block_invoke_19765;
    id v30 = &unk_264E5EC88;
    id v31 = &v32;
    id v9 = MediaPlayerLibrary_19739();
    long long v10 = dlsym(v9, "MPMediaPlaylistPropertyPersistentID");
    *(void *)(v31[1] + 24) = v10;
    getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr_19764 = *(void *)(v31[1] + 24);
    id v8 = (void *)v33[3];
  }
  _Block_object_dispose(&v32, 8);
  if (v8)
  {
    id v11 = [v6 predicateWithValue:v7 forProperty:*v8];

    uint64_t v32 = 0;
    id v33 = &v32;
    uint64_t v34 = 0x2050000000;
    id v12 = (void *)getMPMediaQueryClass_softClass_19768;
    uint64_t v35 = getMPMediaQueryClass_softClass_19768;
    if (!getMPMediaQueryClass_softClass_19768)
    {
      uint64_t v27 = MEMORY[0x263EF8330];
      uint64_t v28 = 3221225472;
      uint64_t v29 = __getMPMediaQueryClass_block_invoke_19769;
      id v30 = &unk_264E5EC88;
      id v31 = &v32;
      __getMPMediaQueryClass_block_invoke_19769((uint64_t)&v27);
      id v12 = (void *)v33[3];
    }
    id v13 = v12;
    _Block_object_dispose(&v32, 8);
    id v14 = [v13 alloc];
    id v15 = [MEMORY[0x263EFFA08] setWithObject:v11];
    id v16 = (void *)[v14 initWithFilterPredicates:v15];

    [v16 setGroupingType:6];
    id v17 = [v16 collections];
    id v18 = [v17 firstObject];

    uint64_t v19 = *(void *)(a1 + 56);
    id v20 = [v18 items];
    uint64_t v21 = [v20 count] - *(void *)(a1 + 56);

    id v22 = *(void **)(a1 + 32);
    uint64_t v23 = [v18 items];
    id v24 = objc_msgSend(v23, "subarrayWithRange:", v19, v21);
    [v22 addObjectsFromArray:v24];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v25 = [MEMORY[0x263F08690] currentHandler];
    id v26 = [NSString stringWithUTF8String:"NSString *getMPMediaPlaylistPropertyPersistentID(void)"];
    objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, @"WFAddToPlaylistAction.m", 25, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C5BA250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaPropertyPredicateClass_block_invoke_19762(uint64_t a1)
{
  MediaPlayerLibrary_19739();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaPropertyPredicate");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaPropertyPredicateClass_softClass_19761 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaPropertyPredicateClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddToPlaylistAction.m", 24, @"Unable to find class %s", "MPMediaPropertyPredicate");

    __break(1u);
  }
}

void *__getMPMediaPlaylistPropertyPersistentIDSymbolLoc_block_invoke_19765(uint64_t a1)
{
  double v2 = MediaPlayerLibrary_19739();
  uint64_t result = dlsym(v2, "MPMediaPlaylistPropertyPersistentID");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaPlaylistPropertyPersistentIDSymbolLoc_ptr_19764 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getMPMediaQueryClass_block_invoke_19769(uint64_t a1)
{
  MediaPlayerLibrary_19739();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaQuery");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaQueryClass_softClass_19768 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaQueryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddToPlaylistAction.m", 23, @"Unable to find class %s", "MPMediaQuery");

    __break(1u);
  }
}

void __WFAddContentToPlaylist_block_invoke_4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = *(void **)(a1 + 32);
  id v8 = [a2 playbackStoreID];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = __WFAddContentToPlaylist_block_invoke_5;
  _OWORD v10[3] = &unk_264E5E4B8;
  id v11 = *(id *)(a1 + 40);
  id v12 = v6;
  id v9 = v6;
  [v7 addItemWithProductID:v8 completionHandler:v10];
}

uint64_t __WFAddContentToPlaylist_block_invoke_6(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __WFAddContentToPlaylist_block_invoke_5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 addObjectsFromArray:a2];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_23C5BAB08(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

Class __getMPMediaItemClass_block_invoke_19829(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_19835)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaPlayerLibraryCore_block_invoke_19836;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E58A38;
    uint64_t v8 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_19835 = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary_19835)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFAddMusicToUpNextAction.m", 17, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPMediaItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getMPMediaItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAddMusicToUpNextAction.m", 18, @"Unable to find class %s", "MPMediaItem");

LABEL_10:
    __break(1u);
  }
  getMPMediaItemClass_softClass_19828 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_19836()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_19835 = result;
  return result;
}

id getMPAVRoutingControllerClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getMPAVRoutingControllerClass_softClass;
  uint64_t v7 = getMPAVRoutingControllerClass_softClass;
  if (!getMPAVRoutingControllerClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPAVRoutingControllerClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getMPAVRoutingControllerClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5BB2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPAVRoutingControllerClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_19913();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVRoutingController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPAVRoutingControllerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPAVRoutingControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaRoutePickerParameter.m", 21, @"Unable to find class %s", "MPAVRoutingController");

    __break(1u);
  }
}

void MediaPlayerLibrary_19913()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_19923)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __MediaPlayerLibraryCore_block_invoke_19924;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E58A78;
    uint64_t v5 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_19923 = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary_19923)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFMediaRoutePickerParameter.m", 20, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __MediaPlayerLibraryCore_block_invoke_19924()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_19923 = result;
  return result;
}

void sub_23C5BB790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19931(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19932(uint64_t a1)
{
}

void sub_23C5BB940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

WFMediaRouteState *WFGetLocalDeviceMediaRoute()
{
  os_log_t v0 = [[WFMediaRouteDescriptor alloc] initWithRouteUID:@"Speaker" groupUID:0 routeName:0 isLocalDevice:1];
  id v1 = [(WFVariableSubstitutableParameterState *)[WFMediaRouteState alloc] initWithValue:v0];

  return v1;
}

void __getMPAVOutputDeviceRouteClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_19913();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVOutputDeviceRoute");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPAVOutputDeviceRouteClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPAVOutputDeviceRouteClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaRoutePickerParameter.m", 22, @"Unable to find class %s", "MPAVOutputDeviceRoute");

    __break(1u);
  }
}

void sub_23C5BCB80(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

Class __getMKMapItemClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MapKitLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E58B08;
    uint64_t v8 = 0;
    MapKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MapKitLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFShowInBlindSquareAction.m", 13, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MKMapItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFShowInBlindSquareAction.m", 14, @"Unable to find class %s", "MKMapItem");

LABEL_10:
    __break(1u);
  }
  getMKMapItemClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id getCLPlacemarkClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getCLPlacemarkClass_softClass;
  uint64_t v7 = getCLPlacemarkClass_softClass;
  if (!getCLPlacemarkClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLPlacemarkClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getCLPlacemarkClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5BCE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCLLocationClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getCLLocationClass_softClass_20213;
  uint64_t v7 = getCLLocationClass_softClass_20213;
  if (!getCLLocationClass_softClass_20213)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_20214;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getCLLocationClass_block_invoke_20214((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5BD130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLLocationClass_block_invoke_20214(uint64_t a1)
{
  CoreLocationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_20213 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFShowInBlindSquareAction.m", 18, @"Unable to find class %s", "CLLocation");

    __break(1u);
  }
}

void CoreLocationLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_20224)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __CoreLocationLibraryCore_block_invoke_20225;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E58B20;
    uint64_t v5 = 0;
    CoreLocationLibraryCore_frameworkLibrary_20224 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_20224)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFShowInBlindSquareAction.m", 16, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __CoreLocationLibraryCore_block_invoke_20225()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_20224 = result;
  return result;
}

void __getCLPlacemarkClass_block_invoke(uint64_t a1)
{
  CoreLocationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLPlacemarkClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFShowInBlindSquareAction.m", 17, @"Unable to find class %s", "CLPlacemark");

    __break(1u);
  }
}

uint64_t __MapKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C5BFB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C5C0878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

uint64_t __Block_byref_object_copy__20406(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20407(uint64_t a1)
{
}

id getAVAudioSessionClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getAVAudioSessionClass_softClass;
  uint64_t v7 = getAVAudioSessionClass_softClass;
  if (!getAVAudioSessionClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVAudioSessionClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getAVAudioSessionClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5C2818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVAudioSessionClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_20578();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioSessionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAudioSessionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeakTextAction.m", 18, @"Unable to find class %s", "AVAudioSession");

    __break(1u);
  }
}

void *AVFoundationLibrary_20578()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_20588)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_20589;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E58E20;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_20588 = _sl_dlopen();
  }
  os_log_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_20588;
  if (!AVFoundationLibraryCore_frameworkLibrary_20588)
  {
    os_log_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSpeakTextAction.m", 16, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke_20589()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_20588 = result;
  return result;
}

void sub_23C5C3AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  _Block_object_dispose((const void *)(v30 - 160), 8);
  _Unwind_Resume(a1);
}

void getAVAudioSessionCategoryPlayback()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  os_log_t v0 = (void **)getAVAudioSessionCategoryPlaybackSymbolLoc_ptr;
  uint64_t v9 = getAVAudioSessionCategoryPlaybackSymbolLoc_ptr;
  if (!getAVAudioSessionCategoryPlaybackSymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_20578();
    void v7[3] = (uint64_t)dlsym(v1, "AVAudioSessionCategoryPlayback");
    getAVAudioSessionCategoryPlaybackSymbolLoc_ptr = v7[3];
    os_log_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    double v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"AVAudioSessionCategory getAVAudioSessionCategoryPlayback(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSpeakTextAction.m", 20, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C5C3DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVAudioSessionModeVoicePromptSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary_20578();
  uint64_t result = dlsym(v2, "AVAudioSessionModeVoicePrompt");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAudioSessionModeVoicePromptSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAudioSessionModeDefaultSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary_20578();
  uint64_t result = dlsym(v2, "AVAudioSessionModeDefault");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAudioSessionModeDefaultSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAudioSessionCategoryPlaybackSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = AVFoundationLibrary_20578();
  uint64_t result = dlsym(v2, "AVAudioSessionCategoryPlayback");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAudioSessionCategoryPlaybackSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id getCTServiceDescriptorClass_20807()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getCTServiceDescriptorClass_softClass_20808;
  uint64_t v7 = getCTServiceDescriptorClass_softClass_20808;
  if (!getCTServiceDescriptorClass_softClass_20808)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCTServiceDescriptorClass_block_invoke_20809;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getCTServiceDescriptorClass_block_invoke_20809((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5C42EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCTServiceDescriptorClass_block_invoke_20809(uint64_t a1)
{
  CoreTelephonyLibrary_20810();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CTServiceDescriptor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCTServiceDescriptorClass_softClass_20808 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCTServiceDescriptorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCellularManager.m", 36, @"Unable to find class %s", "CTServiceDescriptor");

    __break(1u);
  }
}

void *CoreTelephonyLibrary_20810()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreTelephonyLibraryCore_frameworkLibrary_20820)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __CoreTelephonyLibraryCore_block_invoke_20821;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E58EF8;
    uint64_t v6 = 0;
    CoreTelephonyLibraryCore_frameworkLibrary_20820 = _sl_dlopen();
  }
  os_log_t v0 = (void *)CoreTelephonyLibraryCore_frameworkLibrary_20820;
  if (!CoreTelephonyLibraryCore_frameworkLibrary_20820)
  {
    os_log_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreTelephonyLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCellularManager.m", 34, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreTelephonyLibraryCore_block_invoke_20821()
{
  uint64_t result = _sl_dlopen();
  CoreTelephonyLibraryCore_frameworkLibrary_20820 = result;
  return result;
}

id getCTCellularPlanManagerClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getCTCellularPlanManagerClass_softClass;
  uint64_t v7 = getCTCellularPlanManagerClass_softClass;
  if (!getCTCellularPlanManagerClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCTCellularPlanManagerClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getCTCellularPlanManagerClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5C56CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCTCellularPlanManagerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CellularPlanManagerLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CellularPlanManagerLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E58F10;
    uint64_t v8 = 0;
    CellularPlanManagerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CellularPlanManagerLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CellularPlanManagerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFCellularManager.m", 40, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CTCellularPlanManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCTCellularPlanManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFCellularManager.m", 41, @"Unable to find class %s", "CTCellularPlanManager");

LABEL_10:
    __break(1u);
  }
  getCTCellularPlanManagerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CellularPlanManagerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CellularPlanManagerLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C5C5C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C5C6684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCoreTelephonyClientClass_block_invoke_20924(uint64_t a1)
{
  CoreTelephonyLibrary_20810();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CoreTelephonyClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCoreTelephonyClientClass_softClass_20923 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCoreTelephonyClientClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCellularManager.m", 35, @"Unable to find class %s", "CoreTelephonyClient");

    __break(1u);
  }
}

void sub_23C5C9390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPAVOutputDeviceRouteClass_block_invoke_21340(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_21361)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaPlayerLibraryCore_block_invoke_21362;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E58F50;
    uint64_t v8 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_21361 = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary_21361)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFListeningModePickerParameter.m", 25, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPAVOutputDeviceRoute");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getMPAVOutputDeviceRouteClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFListeningModePickerParameter.m", 26, @"Unable to find class %s", "MPAVOutputDeviceRoute");

LABEL_10:
    __break(1u);
  }
  getMPAVOutputDeviceRouteClass_softClass_21339 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_21362()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_21361 = result;
  return result;
}

uint64_t WFTextPositionIsTopPosition(void *a1)
{
  id v1 = a1;
  if (([v1 isEqualToString:@"Top Left"] & 1) != 0
    || ([v1 isEqualToString:@"Top Center"] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = [v1 isEqualToString:@"Top Right"];
  }

  return v2;
}

uint64_t WFTextPositionIsBottomPosition(void *a1)
{
  id v1 = a1;
  if (([v1 isEqualToString:@"Bottom Left"] & 1) != 0
    || ([v1 isEqualToString:@"Bottom Center"] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = [v1 isEqualToString:@"Bottom Right"];
  }

  return v2;
}

void sub_23C5CA2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getUIFontClass_block_invoke(uint64_t a1)
{
  UIKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("UIFont");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getUIFontClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getUIFontClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFOverlayTextAction.m", 22, @"Unable to find class %s", "UIFont");

    __break(1u);
  }
}

void *UIKitLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!UIKitLibraryCore_frameworkLibrary_21632)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __UIKitLibraryCore_block_invoke_21633;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E58FB8;
    uint64_t v6 = 0;
    UIKitLibraryCore_frameworkLibrary_21632 = _sl_dlopen();
  }
  os_log_t v0 = (void *)UIKitLibraryCore_frameworkLibrary_21632;
  if (!UIKitLibraryCore_frameworkLibrary_21632)
  {
    os_log_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFOverlayTextAction.m", 15, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __UIKitLibraryCore_block_invoke_21633()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore_frameworkLibrary_21632 = result;
  return result;
}

void sub_23C5CA930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSStrokeColorAttributeNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = UIKitLibrary();
  uint64_t result = dlsym(v2, "NSStrokeColorAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSStrokeColorAttributeNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getNSStrokeWidthAttributeNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = UIKitLibrary();
  uint64_t result = dlsym(v2, "NSStrokeWidthAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSStrokeWidthAttributeNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C5CAE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSForegroundColorAttributeNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = UIKitLibrary();
  uint64_t result = dlsym(v2, "NSForegroundColorAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSForegroundColorAttributeNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getNSFontAttributeNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = UIKitLibrary();
  uint64_t result = dlsym(v2, "NSFontAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSFontAttributeNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getNSParagraphStyleAttributeNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = UIKitLibrary();
  uint64_t result = dlsym(v2, "NSParagraphStyleAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSParagraphStyleAttributeNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C5CB0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getNSParagraphStyleClass_block_invoke(uint64_t a1)
{
  UIKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("NSParagraphStyle");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getNSParagraphStyleClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getNSParagraphStyleClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFOverlayTextAction.m", 21, @"Unable to find class %s", "NSParagraphStyle");

    __break(1u);
  }
}

void CheckXMLResult(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((a1 & 0x80000000) != 0)
  {
    id v5 = v3;
    xmlErrorPtr LastError = xmlGetLastError();
    if (LastError)
    {
      xmlErrorPtr LastError = (xmlErrorPtr)[[NSString alloc] initWithCString:LastError->message encoding:4];
      xmlResetLastError();
    }
    [MEMORY[0x263EFF940] raise:@"ENXMLWriterLibXMLError", @"%@ returned result=%i, error=%@", v5, a1, LastError format];

    id v3 = v5;
  }
}

uint64_t ENXMLWriter_contentsWriteCallback(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = NSString;
  id v6 = a1;
  uint64_t v7 = [v5 stringWithUTF8String:a2];
  [v6 appendString:v7];

  return a3;
}

uint64_t ENXMLWriter_delegateCloseCallback(id *a1)
{
  id v1 = a1 + 1;
  uint64_t v2 = a1;
  id WeakRetained = objc_loadWeakRetained(v1);
  [WeakRetained xmlWriterDidEndWritingDocument:v2];

  return 0;
}

uint64_t ENXMLWriter_delegateWriteCallback(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = (objc_class *)MEMORY[0x263EFF8F8];
  id v6 = a1;
  uint64_t v7 = (void *)[[v5 alloc] initWithBytes:a2 length:(int)a3];
  id WeakRetained = objc_loadWeakRetained(v6 + 1);
  [WeakRetained xmlWriter:v6 didGenerateData:v7];

  return a3;
}

void sub_23C5CCFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21951(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21952(uint64_t a1)
{
}

void sub_23C5CE888(_Unwind_Exception *a1)
{
}

id getFIUIWorkoutActivityTypeClass_22375()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getFIUIWorkoutActivityTypeClass_softClass_22396;
  uint64_t v7 = getFIUIWorkoutActivityTypeClass_softClass_22396;
  if (!getFIUIWorkoutActivityTypeClass_softClass_22396)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getFIUIWorkoutActivityTypeClass_block_invoke_22397;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getFIUIWorkoutActivityTypeClass_block_invoke_22397((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5D0860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFIUIWorkoutActivityTypeClass_block_invoke_22397(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!FitnessUILibraryCore_frameworkLibrary_22398)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __FitnessUILibraryCore_block_invoke_22399;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E59020;
    uint64_t v8 = 0;
    FitnessUILibraryCore_frameworkLibrary_22398 = _sl_dlopen();
  }
  if (!FitnessUILibraryCore_frameworkLibrary_22398)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *FitnessUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFFIUIWorkoutActivityTypeSubstitutableState.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("FIUIWorkoutActivityType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getFIUIWorkoutActivityTypeClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFFIUIWorkoutActivityTypeSubstitutableState.m", 16, @"Unable to find class %s", "FIUIWorkoutActivityType");

LABEL_10:
    __break(1u);
  }
  getFIUIWorkoutActivityTypeClass_softClass_22396 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __FitnessUILibraryCore_block_invoke_22399()
{
  uint64_t result = _sl_dlopen();
  FitnessUILibraryCore_frameworkLibrary_22398 = result;
  return result;
}

void sub_23C5D0FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__22454(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__22455(uint64_t a1)
{
}

void __WFMigrateDropboxToV2_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = WFEnforceClass(v7, v8);

  long long v10 = [v9 objectForKeyedSubscript:@"kMPOAuthCredentialAccessToken"];
  uint64_t v11 = objc_opt_class();
  id v12 = WFEnforceClass(v10, v11);

  id v13 = [v9 objectForKeyedSubscript:@"kMPOAuthCredentialAccessTokenSecret"];
  uint64_t v14 = objc_opt_class();
  id v15 = WFEnforceClass(v13, v14);

  id v16 = *(void **)(a1 + 32);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = __WFMigrateDropboxToV2_block_invoke_3;
  v18[3] = &unk_264E59090;
  id v19 = v6;
  id v17 = v6;
  [v16 authenticateWithLegacyAccessToken:v12 accessTokenSecret:v15 completionHandler:v18];
}

void __WFMigrateDropboxToV2_block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = 0;
    uint64_t v7 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v3);
        }
        v6 |= +[WFAccount saveAccount:*(void *)(*((void *)&v9 + 1) + 8 * i)];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
    if (v6) {
      SecItemDelete(*(CFDictionaryRef *)(a1 + 32));
    }
  }
  [(id)WFMigrateDropboxToV2_lock unlock];
}

void __WFMigrateDropboxToV2_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    id v5 = a3;
    id v7 = +[WFOAuth2Account accountWithCredential:a2];
    (*(void (**)(uint64_t))(v3 + 16))(v3);
  }
  else
  {
    int v6 = *(void (**)(uint64_t, void))(v3 + 16);
    id v7 = a3;
    v6(v3, 0);
  }
}

void __WFMigrateDropboxToV2_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  id v1 = (void *)WFMigrateDropboxToV2_lock;
  WFMigrateDropboxToV2_lock = v0;
}

void kb_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, id *a8)
{
  LODWORD(v10) = a5;
  id v17 = *a8;
  if ((int)v10 >= 1)
  {
    uint64_t v10 = v10;
    long long v11 = (_DWORD *)(a7 + 8);
    long long v12 = (void *)(a6 + 8);
    do
    {
      id v13 = (void *)[[NSString alloc] initWithBytes:*(v12 - 1) length:*v12 encoding:4];
      uint64_t v14 = [v17 keyboardInteractiveRequest:v13];
      if (!v14) {
        uint64_t v14 = &stru_26F008428;
      }
      id v15 = v14;
      *((void *)v11 - ripemd160_block_data_order(c, b, 1) = strdup((const char *)[(__CFString *)v15 UTF8String]);
      id v16 = v15;
      _DWORD *v11 = strlen((const char *)[(__CFString *)v16 UTF8String]);
      v11 += 4;

      v12 += 3;
      --v10;
    }
    while (v10);
  }
}

void sub_23C5D3F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void disconnect_callback(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, id *a7)
{
  id v21 = *a7;
  long long v12 = (void *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithCapacity:2];
  if (a3)
  {
    id v13 = (void *)[[NSString alloc] initWithBytes:a3 length:a4 encoding:4];
    [v12 setObject:v13 forKey:*MEMORY[0x263F08320]];
  }
  if (a5)
  {
    uint64_t v14 = (void *)[[NSString alloc] initWithBytes:a5 length:a6 encoding:4];
    [v12 setObject:v14 forKey:@"language"];
  }
  id v15 = [MEMORY[0x263F087E8] errorWithDomain:@"NMSSH" code:a2 userInfo:v12];
  uint64_t v16 = [v21 delegate];
  if (v16)
  {
    id v17 = (void *)v16;
    id v18 = [v21 delegate];
    char v19 = objc_opt_respondsToSelector();

    if (v19)
    {
      id v20 = [v21 delegate];
      [v20 session:v21 didDisconnectWithError:v15];
    }
  }
  [v21 disconnect];
}

uint64_t IsEvernoteInstalled()
{
  uint64_t v0 = [MEMORY[0x263F01880] defaultWorkspace];
  id v1 = [NSURL URLWithString:@"en://"];
  uint64_t v2 = [v0 isApplicationAvailableToOpenURL:v1 error:0];

  return v2;
}

void sub_23C5D5760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

Class __getREMSaveRequestClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!ReminderKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __ReminderKitLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E59108;
    uint64_t v8 = 0;
    ReminderKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ReminderKitLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ReminderKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFRemoveCalendarItemsAction.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("REMSaveRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getREMSaveRequestClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFRemoveCalendarItemsAction.m", 19, @"Unable to find class %s", "REMSaveRequest");

LABEL_10:
    __break(1u);
  }
  getREMSaveRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ReminderKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ReminderKitLibraryCore_frameworkLibrary = result;
  return result;
}

id getCBClientClass_22998()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCBClientClass_softClass_22999;
  uint64_t v7 = getCBClientClass_softClass_22999;
  if (!getCBClientClass_softClass_22999)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCBClientClass_block_invoke_23000;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getCBClientClass_block_invoke_23000((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5D6448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCBClientClass_block_invoke_23000(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreBrightnessLibraryCore_frameworkLibrary_23001)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreBrightnessLibraryCore_block_invoke_23002;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E59120;
    uint64_t v8 = 0;
    CoreBrightnessLibraryCore_frameworkLibrary_23001 = _sl_dlopen();
  }
  if (!CoreBrightnessLibraryCore_frameworkLibrary_23001)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreBrightnessLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFTrueToneSettingsClient.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CBClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getCBClientClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFTrueToneSettingsClient.m", 30, @"Unable to find class %s", "CBClient");

LABEL_10:
    __break(1u);
  }
  getCBClientClass_softClass_22999 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreBrightnessLibraryCore_block_invoke_23002()
{
  uint64_t result = _sl_dlopen();
  CoreBrightnessLibraryCore_frameworkLibrary_23001 = result;
  return result;
}

id ONOXPathFromCSS(void *a1)
{
  id v1 = (void *)MEMORY[0x263EFF980];
  id v2 = a1;
  uint64_t v3 = [v1 array];
  uint64_t v4 = [v2 componentsSeparatedByString:@","];

  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __ONOXPathFromCSS_block_invoke;
  _OWORD v8[3] = &unk_264E59168;
  id v9 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v8];

  uint64_t v6 = [v5 componentsJoinedByString:@" | "];

  return v6;
}

void __ONOXPathFromCSS_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 length])
  {
    uint64_t v14 = 0;
    id v15 = &v14;
    uint64_t v16 = 0x3032000000;
    id v17 = __Block_byref_object_copy__23253;
    id v18 = __Block_byref_object_dispose__23254;
    id v19 = [MEMORY[0x263EFF980] arrayWithObject:@"./"];
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x3032000000;
    v12[3] = __Block_byref_object_copy__23253;
    void v12[4] = __Block_byref_object_dispose__23254;
    id v13 = 0;
    id v5 = [MEMORY[0x263F08708] whitespaceCharacterSet];
    uint64_t v6 = [v4 stringByTrimmingCharactersInSet:v5];
    long long v7 = [MEMORY[0x263F08708] whitespaceCharacterSet];
    uint64_t v8 = [v6 componentsSeparatedByCharactersInSet:v7];
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __ONOXPathFromCSS_block_invoke_8;
    v11[3] = &unk_264E59140;
    void v11[4] = &v14;
    v11[5] = v12;
    [v8 enumerateObjectsUsingBlock:v11];

    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = [(id)v15[5] componentsJoinedByString:@"/"];
    [v9 addObject:v10];

    _Block_object_dispose(v12, 8);
    _Block_object_dispose(&v14, 8);
  }
}

void sub_23C5D8030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23253(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23254(uint64_t a1)
{
}

void __ONOXPathFromCSS_block_invoke_8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  id v5 = a2;
  int v6 = [v5 isEqualToString:@"*"];
  if (a3 && v6)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:@"/*"];
    goto LABEL_11;
  }
  if ([v5 isEqualToString:@">"])
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    id v9 = &stru_26F008428;
LABEL_10:
    *(void *)(v7 + 40) = v9;

    goto LABEL_11;
  }
  if ([v5 isEqualToString:@"+"])
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    id v9 = @"following-sibling::*[1]/self::";
    goto LABEL_10;
  }
  int v10 = [v5 isEqualToString:@"~"];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  if (v10)
  {
    id v9 = @"following-sibling::";
    goto LABEL_10;
  }
  if (a3 && !v8) {
    *(void *)(v7 + 40) = @"descendant::";
  }
  uint64_t v11 = [MEMORY[0x263F08708] characterSetWithCharactersInString:@"#.[]"];
  uint64_t v12 = [v5 rangeOfCharacterFromSet:v11];

  if (v12 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v13 = v5;
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x263F089D8];
    id v15 = [v5 substringToIndex:v12];
    uint64_t v13 = [v14 stringWithString:v15];

    uint64_t v16 = [v5 length];
    if (ONOIdRegularExpression_onceToken != -1) {
      dispatch_once(&ONOIdRegularExpression_onceToken, &__block_literal_global_23271);
    }
    id v17 = objc_msgSend((id)ONOIdRegularExpression__ONOIdRegularExpression, "firstMatchInString:options:range:", v5, 0, 0, v16);
    id v18 = &stru_26F008428;
    if ((unint64_t)[v17 numberOfRanges] >= 2)
    {
      if (v12) {
        id v19 = &stru_26F008428;
      }
      else {
        id v19 = @"*";
      }
      uint64_t v20 = [v17 rangeAtIndex:1];
      id v22 = objc_msgSend(v5, "substringWithRange:", v20, v21);
      [v13 appendFormat:@"%@[@id = '%@']", v19, v22];
    }
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    if (ONOClassRegularExpression_onceToken != -1) {
      dispatch_once(&ONOClassRegularExpression_onceToken, &__block_literal_global_328);
    }
    uint64_t v45 = v16;
    uint64_t v23 = objc_msgSend((id)ONOClassRegularExpression__ONOClassRegularExpression, "matchesInString:options:range:", v5, 0, 0, v16);
    uint64_t v24 = [v23 countByEnumeratingWithState:&v50 objects:v55 count:16];
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = *(void *)v51;
      if (!v12) {
        id v18 = @"*";
      }
      do
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v51 != v26) {
            objc_enumerationMutation(v23);
          }
          uint64_t v28 = *(void **)(*((void *)&v50 + 1) + 8 * i);
          if ((unint64_t)[v28 numberOfRanges] >= 2)
          {
            uint64_t v29 = [v28 rangeAtIndex:1];
            id v31 = objc_msgSend(v5, "substringWithRange:", v29, v30);
            [v13 appendFormat:@"%@[contains(concat(' ',normalize-space(@class),' '),' %@ ')]", v18, v31];
          }
        }
        uint64_t v25 = [v23 countByEnumeratingWithState:&v50 objects:v55 count:16];
      }
      while (v25);
    }

    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    if (ONOAttributeRegularExpression_onceToken != -1) {
      dispatch_once(&ONOAttributeRegularExpression_onceToken, &__block_literal_global_333);
    }
    uint64_t v32 = objc_msgSend((id)ONOAttributeRegularExpression__ONOAttributeRegularExpression, "matchesInString:options:range:", v5, 0, 0, v45);
    uint64_t v33 = [v32 countByEnumeratingWithState:&v46 objects:v54 count:16];
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v35 = *(void *)v47;
      do
      {
        for (uint64_t j = 0; j != v34; ++j)
        {
          if (*(void *)v47 != v35) {
            objc_enumerationMutation(v32);
          }
          uint64_t v37 = *(void **)(*((void *)&v46 + 1) + 8 * j);
          if ((unint64_t)[v37 numberOfRanges] >= 2)
          {
            uint64_t v38 = [v37 rangeAtIndex:1];
            uint64_t v40 = objc_msgSend(v5, "substringWithRange:", v38, v39);
            [v13 appendFormat:@"[@%@]", v40];
          }
        }
        uint64_t v34 = [v32 countByEnumeratingWithState:&v46 objects:v54 count:16];
      }
      while (v34);
    }
  }
  uint64_t v41 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v41)
  {
    uint64_t v42 = [v41 stringByAppendingString:v13];

    uint64_t v43 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v44 = *(void **)(v43 + 40);
    *(void *)(v43 + 40) = 0;

    uint64_t v13 = (void *)v42;
  }
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v13];
  id v5 = v13;
LABEL_11:
}

void __ONOAttributeRegularExpression_block_invoke()
{
  uint64_t v0 = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"\\[(\\w+)\\]" options:0 error:0];
  id v1 = (void *)ONOAttributeRegularExpression__ONOAttributeRegularExpression;
  ONOAttributeRegularExpression__ONOAttributeRegularExpressioint n = v0;
}

void __ONOClassRegularExpression_block_invoke()
{
  uint64_t v0 = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"\\.([^\\.]+)" options:0 error:0];
  id v1 = (void *)ONOClassRegularExpression__ONOClassRegularExpression;
  ONOClassRegularExpression__ONOClassRegularExpressioint n = v0;
}

void __ONOIdRegularExpression_block_invoke()
{
  uint64_t v0 = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"\\#([\\w-_]+)" options:0 error:0];
  id v1 = (void *)ONOIdRegularExpression__ONOIdRegularExpression;
  ONOIdRegularExpression__ONOIdRegularExpressioint n = v0;
}

uint64_t ONOXMLNodeMatchesTagInNamespace(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5)
  {
    BOOL v9 = 1;
    if (v6) {
      goto LABEL_3;
    }
LABEL_7:
    BOOL v12 = 1;
    goto LABEL_9;
  }
  uint64_t v8 = [NSString stringWithUTF8String:*(void *)(a1 + 16)];
  BOOL v9 = [v8 compare:v5 options:1] == 0;

  if (!v7) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v10 = *(void *)(a1 + 72);
  if (v10 && *(void *)(v10 + 24))
  {
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:");
    BOOL v12 = [v11 compare:v7 options:1] == 0;
  }
  else
  {
    BOOL v12 = 0;
  }
LABEL_9:

  return v9 & v12;
}

void ONOSetErrorFromXMLErrorPtr(void *a1, xmlError *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = [NSString stringWithCString:a2->message encoding:4];
      id v5 = [MEMORY[0x263F08708] whitespaceAndNewlineCharacterSet];
      id v6 = [v4 stringByTrimmingCharactersInSet:v5];

      uint64_t code = a2->code;
      uint64_t v9 = *MEMORY[0x263F08338];
      v10[0] = v6;
      uint64_t v8 = [NSDictionary dictionaryWithObjects:v10 forKeys:&v9 count:1];
      *a1 = [MEMORY[0x263F087E8] errorWithDomain:@"com.ono.error" code:code userInfo:v8];
      xmlResetError(a2);
    }
  }
}

void sub_23C5DAAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23406(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23407(uint64_t a1)
{
}

void sub_23C5DCE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C5DEF14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_23C5DF3D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Unwind_Resume(a1);
}

void __getAVMutableMovieClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_24179();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVMutableMovie");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVMutableMovieClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVMutableMovieClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFImageRotateAction.m", 23, @"Unable to find class %s", "AVMutableMovie");

    __break(1u);
  }
}

void *AVFoundationLibrary_24179()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_24189)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_24190;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E594E0;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_24189 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_24189;
  if (!AVFoundationLibraryCore_frameworkLibrary_24189)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFImageRotateAction.m", 17, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke_24190()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_24189 = result;
  return result;
}

id WFImageRotateError(uint64_t a1)
{
  v12[1] = *MEMORY[0x263EF8340];
  if (a1 == 1)
  {
    uint64_t v7 = (void *)MEMORY[0x263F087E8];
    uint64_t v9 = *MEMORY[0x263F08320];
    id v3 = WFLocalizedString(@"Cannot rotate Dolby Vision content.");
    uint64_t v10 = v3;
    uint64_t v4 = [NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    long long v5 = v7;
    uint64_t v6 = 1;
  }
  else
  {
    if (a1) {
      goto LABEL_6;
    }
    id v2 = (void *)MEMORY[0x263F087E8];
    uint64_t v11 = *MEMORY[0x263F08320];
    id v3 = WFLocalizedString(@"Cannot rotate protected media.");
    v12[0] = v3;
    uint64_t v4 = [NSDictionary dictionaryWithObjects:v12 forKeys:&v11 count:1];
    long long v5 = v2;
    uint64_t v6 = 0;
  }
  uint64_t v1 = [v5 errorWithDomain:@"WFImageRotateErrorDomain" code:v6 userInfo:v4];

LABEL_6:
  return v1;
}

void *__getAVMediaTypeVideoSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_24179();
  uint64_t result = dlsym(v2, "AVMediaTypeVideo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMediaTypeVideoSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id mutableRequestWithURLString(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x263EFC5E8];
  id v2 = [NSURL URLWithString:a1];
  id v3 = [v1 requestWithURL:v2];

  return v3;
}

id formEncodedDataToDictionary(void *a1)
{
  uint64_t v1 = (objc_class *)NSString;
  id v2 = a1;
  id v3 = (void *)[[v1 alloc] initWithData:v2 encoding:4];

  uint64_t v4 = type metadata for some(v3);

  return v4;
}

uint64_t errorWithStatusCode(uint64_t a1)
{
  return [MEMORY[0x263F087E8] errorWithDomain:@"Authentication request failed" code:a1 userInfo:0];
}

id __HTMLEscapedString(void *a1)
{
  uint64_t v1 = (void *)[a1 mutableCopy];
  objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", @"&", @"&amp;",
    2,
    0,
    [v1 length]);
  objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", @"\"", @"&quot;",
    2,
    0,
    [v1 length]);
  return v1;
}

id __obfuscatedEmailAddress(void *a1)
{
  v12[3] = *MEMORY[0x263EF8340];
  id v1 = a1;
  id v2 = objc_opt_new();
  v12[0] = &__block_literal_global_25553;
  v12[1] = &__block_literal_global_115;
  void v12[2] = &__block_literal_global_120;
  id v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v12 count:3];
  if ([v1 length])
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = [v1 characterAtIndex:v4];
      if (v5 == 64)
      {
        uint64_t v6 = [v3 objectAtIndex:arc4random_uniform(2u)];
      }
      else
      {
        signed int v7 = arc4random_uniform(0x64u);
        if (v7 <= 89) {
          uint64_t v8 = v7 > 44;
        }
        else {
          uint64_t v8 = 2;
        }
        uint64_t v6 = [v3 objectAtIndexedSubscript:v8];
      }
      uint64_t v9 = (void *)v6;
      uint64_t v10 = (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v5);
      [v2 appendString:v10];

      ++v4;
    }
    while (v4 < [v1 length]);
  }

  return v2;
}

id ____obfuscatedEmailAddress_block_invoke_3(uint64_t a1, __int16 a2)
{
  __int16 v4 = a2;
  id v2 = [NSString stringWithCharacters:&v4 length:1];
  return v2;
}

uint64_t ____obfuscatedEmailAddress_block_invoke_2(uint64_t a1, unsigned int a2)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"&#x%x;", a2);
}

uint64_t ____obfuscatedEmailAddress_block_invoke(uint64_t a1, unsigned int a2)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"&#%d;", a2);
}

id getCLLocationClass_25809()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCLLocationClass_softClass_25810;
  uint64_t v7 = getCLLocationClass_softClass_25810;
  if (!getCLLocationClass_softClass_25810)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_25811;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getCLLocationClass_block_invoke_25811((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5EA190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLLocationClass_block_invoke_25811(uint64_t a1)
{
  CoreLocationLibrary_25812();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_25810 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSearchLocalBusinessesAction.m", 29, @"Unable to find class %s", "CLLocation");

    __break(1u);
  }
}

void *CoreLocationLibrary_25812()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_25822)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke_25823;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E59668;
    uint64_t v6 = 0;
    CoreLocationLibraryCore_frameworkLibrary_25822 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_25822;
  if (!CoreLocationLibraryCore_frameworkLibrary_25822)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSearchLocalBusinessesAction.m", 28, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreLocationLibraryCore_block_invoke_25823()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_25822 = result;
  return result;
}

void sub_23C5EABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKLocalSearchRequestClass_block_invoke(uint64_t a1)
{
  MapKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearchRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKLocalSearchRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSearchLocalBusinessesAction.m", 24, @"Unable to find class %s", "MKLocalSearchRequest");

    __break(1u);
  }
}

void *__getMKCoordinateRegionMakeWithDistanceSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MapKitLibrary();
  uint64_t result = dlsym(v2, "MKCoordinateRegionMakeWithDistance");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKCoordinateRegionMakeWithDistanceSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MapKitLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_25867)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __MapKitLibraryCore_block_invoke_25868;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E59680;
    uint64_t v6 = 0;
    MapKitLibraryCore_frameworkLibrary_25867 = _sl_dlopen();
  }
  uint64_t v0 = (void *)MapKitLibraryCore_frameworkLibrary_25867;
  if (!MapKitLibraryCore_frameworkLibrary_25867)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSearchLocalBusinessesAction.m", 22, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void __getMKLocalSearchClass_block_invoke(uint64_t a1)
{
  MapKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearch");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKLocalSearchClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSearchLocalBusinessesAction.m", 23, @"Unable to find class %s", "MKLocalSearch");

    __break(1u);
  }
}

void getMKErrorDomain()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getMKErrorDomainSymbolLoc_ptr;
  uint64_t v9 = getMKErrorDomainSymbolLoc_ptr;
  if (!getMKErrorDomainSymbolLoc_ptr)
  {
    id v1 = MapKitLibrary();
    void v7[3] = (uint64_t)dlsym(v1, "MKErrorDomain");
    getMKErrorDomainSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSErrorDomain getMKErrorDomain(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSearchLocalBusinessesAction.m", 25, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C5EB3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMKErrorDomainSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MapKitLibrary();
  uint64_t result = dlsym(v2, "MKErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKErrorDomainSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MapKitLibraryCore_block_invoke_25868()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_25867 = result;
  return result;
}

void sub_23C5EB770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getkCLLocationAccuracyHundredMetersSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreLocationLibrary_25812();
  uint64_t result = dlsym(v2, "kCLLocationAccuracyHundredMeters");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCLLocationAccuracyHundredMetersSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C5EBA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C5ECEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_23C5ED6DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __getPHAssetClass_block_invoke_26244(uint64_t a1)
{
  PhotosLibrary_26245();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetClass_softClass_26243 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDeletePhotosIntentHandler.m", 18, @"Unable to find class %s", "PHAsset");

    __break(1u);
  }
}

void sub_23C5ED984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C5EDBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getPHPhotosErrorDomainSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = PhotosLibrary_26245();
  uint64_t result = dlsym(v2, "PHPhotosErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPHPhotosErrorDomainSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *PhotosLibrary_26245()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_26255)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __PhotosLibraryCore_block_invoke_26256;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E59758;
    uint64_t v6 = 0;
    PhotosLibraryCore_frameworkLibrary_26255 = _sl_dlopen();
  }
  uint64_t v0 = (void *)PhotosLibraryCore_frameworkLibrary_26255;
  if (!PhotosLibraryCore_frameworkLibrary_26255)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDeletePhotosIntentHandler.m", 17, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __PhotosLibraryCore_block_invoke_26256()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_26255 = result;
  return result;
}

void __getPHAssetChangeRequestClass_block_invoke(uint64_t a1)
{
  PhotosLibrary_26245();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetChangeRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetChangeRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetChangeRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDeletePhotosIntentHandler.m", 20, @"Unable to find class %s", "PHAssetChangeRequest");

    __break(1u);
  }
}

void sub_23C5EF7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_23C5F19C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void *__getSBSOpenApplicationLayoutRoleSideNarrowOverlaySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = SpringBoardServicesLibrary_26768();
  uint64_t result = dlsym(v2, "SBSOpenApplicationLayoutRoleSideNarrowOverlay");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSOpenApplicationLayoutRoleSideNarrowOverlaySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *SpringBoardServicesLibrary_26768()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_26801)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __SpringBoardServicesLibraryCore_block_invoke_26802;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E598D8;
    uint64_t v6 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary_26801 = _sl_dlopen();
  }
  uint64_t v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_26801;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_26801)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFOpenAppAction.m", 28, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void getSBSOpenApplicationOptionKeyLayoutRole_26773()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr_26793;
  uint64_t v9 = getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr_26793;
  if (!getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr_26793)
  {
    uint64_t v1 = SpringBoardServicesLibrary_26768();
    void v7[3] = (uint64_t)dlsym(v1, "SBSOpenApplicationOptionKeyLayoutRole");
    getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr_26793 = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getSBSOpenApplicationOptionKeyLayoutRole(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFOpenAppAction.m", 30, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C5F1E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSBSOpenApplicationLayoutRolePrimarySymbolLoc_block_invoke_26775(uint64_t a1)
{
  id v2 = SpringBoardServicesLibrary_26768();
  uint64_t result = dlsym(v2, "SBSOpenApplicationLayoutRolePrimary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSOpenApplicationLayoutRolePrimarySymbolLoc_ptr_26774 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSBSOpenApplicationLaunchOriginActionButtonSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = SpringBoardServicesLibrary_26768();
  uint64_t result = dlsym(v2, "SBSOpenApplicationLaunchOriginActionButton");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSOpenApplicationLaunchOriginActionButtonSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t WFOpenAppActionIsPDUError(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1) {
    goto LABEL_8;
  }
  id v3 = [v1 domain];
  if (![v3 isEqualToString:*MEMORY[0x263F646A8]])
  {

LABEL_6:
    uint64_t v6 = [v2 underlyingErrors];
    uint64_t v7 = [v6 count];

    if (v7)
    {
      uint64_t v8 = [v2 underlyingErrors];
      uint64_t v9 = [v8 firstObject];
      uint64_t IsPDUError = WFOpenAppActionIsPDUError();

      goto LABEL_9;
    }
LABEL_8:
    uint64_t IsPDUError = 0;
    goto LABEL_9;
  }
  uint64_t v4 = [v2 code];

  if (v4 != 8) {
    goto LABEL_6;
  }
  uint64_t IsPDUError = 1;
LABEL_9:

  return IsPDUError;
}

void *__getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_block_invoke_26794(uint64_t a1)
{
  id v2 = SpringBoardServicesLibrary_26768();
  uint64_t result = dlsym(v2, "SBSOpenApplicationOptionKeyLayoutRole");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSOpenApplicationOptionKeyLayoutRoleSymbolLoc_ptr_26793 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_26802()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary_26801 = result;
  return result;
}

void sub_23C5F2EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCWFInterfaceClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreWiFiLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreWiFiLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E598F0;
    uint64_t v8 = 0;
    CoreWiFiLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreWiFiLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreWiFiLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFWiFiSettingsClient.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CWFInterface");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCWFInterfaceClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFWiFiSettingsClient.m", 19, @"Unable to find class %s", "CWFInterface");

LABEL_10:
    __break(1u);
  }
  getCWFInterfaceClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreWiFiLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreWiFiLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C5F3C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVCaptureDeviceClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_27114();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVCaptureDevice");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVCaptureDeviceClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVCaptureDeviceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCameraAccessResource.m", 20, @"Unable to find class %s", "AVCaptureDevice");

    __break(1u);
  }
}

void *__getAVMediaTypeVideoSymbolLoc_block_invoke_27113(uint64_t a1)
{
  id v2 = AVFoundationLibrary_27114();
  uint64_t result = dlsym(v2, "AVMediaTypeVideo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMediaTypeVideoSymbolLoc_ptr_27112 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AVFoundationLibrary_27114()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_27126)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_27127;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E59938;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_27126 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_27126;
  if (!AVFoundationLibraryCore_frameworkLibrary_27126)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCameraAccessResource.m", 19, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke_27127()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_27126 = result;
  return result;
}

void sub_23C5F4638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27169(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27170(uint64_t a1)
{
}

void sub_23C5F4F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSHMatchedMediaItemClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!ShazamKitLibraryCore_frameworkLibrary_27283)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __ShazamKitLibraryCore_block_invoke_27284;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E599C8;
    uint64_t v8 = 0;
    ShazamKitLibraryCore_frameworkLibrary_27283 = _sl_dlopen();
  }
  if (!ShazamKitLibraryCore_frameworkLibrary_27283)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ShazamKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFShazamMedia.m", 17, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SHMatchedMediaItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getSHMatchedMediaItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFShazamMedia.m", 19, @"Unable to find class %s", "SHMatchedMediaItem");

LABEL_10:
    __break(1u);
  }
  getSHMatchedMediaItemClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ShazamKitLibraryCore_block_invoke_27284()
{
  uint64_t result = _sl_dlopen();
  ShazamKitLibraryCore_frameworkLibrary_27283 = result;
  return result;
}

void FATInvalidAbstractInvocation(const char *a1, objc_class *a2)
{
  uint64_t v4 = (void *)MEMORY[0x263EFF940];
  uint64_t v5 = *MEMORY[0x263EFF4A0];
  NSStringFromSelector(a1);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = NSStringFromClass(a2);
  long long v7 = NSStringFromSelector(a1);
  [v4 raise:v5, @"-%@ only defined for abstract class. Define -[%@ %@]!", v8, v6, v7 format];
}

void sub_23C5F6BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void __getPHImportSessionClass_block_invoke(uint64_t a1)
{
  PhotosLibrary_27572();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHImportSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHImportSessionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHImportSessionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetLatestPhotoImportAction.m", 18, @"Unable to find class %s", "PHImportSession");

    __break(1u);
  }
}

void __getPHAssetClass_block_invoke_27571(uint64_t a1)
{
  PhotosLibrary_27572();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetClass_softClass_27570 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetLatestPhotoImportAction.m", 17, @"Unable to find class %s", "PHAsset");

    __break(1u);
  }
}

void PhotosLibrary_27572()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_27583)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __PhotosLibraryCore_block_invoke_27584;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E599E0;
    uint64_t v5 = 0;
    PhotosLibraryCore_frameworkLibrary_27583 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_27583)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFGetLatestPhotoImportAction.m", 16, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PhotosLibraryCore_block_invoke_27584()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_27583 = result;
  return result;
}

void sub_23C5F7224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCLLocationClass_27714()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCLLocationClass_softClass_27715;
  uint64_t v7 = getCLLocationClass_softClass_27715;
  if (!getCLLocationClass_softClass_27715)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_27716;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getCLLocationClass_block_invoke_27716((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5F78BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCLLocationClass_block_invoke_27716(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_27717)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke_27718;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E59A58;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary_27717 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_27717)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFParkedCarContentItem.m", 20, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFParkedCarContentItem.m", 25, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClass_27715 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_27718()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_27717 = result;
  return result;
}

id getRTVehicleEventClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getRTVehicleEventClass_softClass;
  uint64_t v7 = getRTVehicleEventClass_softClass;
  if (!getRTVehicleEventClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getRTVehicleEventClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getRTVehicleEventClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C5F7C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getRTVehicleEventClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreRoutineLibraryCore_frameworkLibrary_27734)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreRoutineLibraryCore_block_invoke_27735;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E59A40;
    uint64_t v8 = 0;
    CoreRoutineLibraryCore_frameworkLibrary_27734 = _sl_dlopen();
  }
  if (!CoreRoutineLibraryCore_frameworkLibrary_27734)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreRoutineLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFParkedCarContentItem.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RTVehicleEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getRTVehicleEventClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFParkedCarContentItem.m", 23, @"Unable to find class %s", "RTVehicleEvent");

LABEL_10:
    __break(1u);
  }
  getRTVehicleEventClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreRoutineLibraryCore_block_invoke_27735()
{
  uint64_t result = _sl_dlopen();
  CoreRoutineLibraryCore_frameworkLibrary_27734 = result;
  return result;
}

void sub_23C5FB528(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getPRSServiceClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PosterBoardServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PosterBoardServicesLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E59BA0;
    uint64_t v8 = 0;
    PosterBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!PosterBoardServicesLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PosterBoardServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFGetPostersAction.m", 20, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PRSService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPRSServiceClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFGetPostersAction.m", 21, @"Unable to find class %s", "PRSService");

LABEL_10:
    __break(1u);
  }
  getPRSServiceClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PosterBoardServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PosterBoardServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C5FD3B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getMPMediaLibraryClass_block_invoke_28762(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_28768)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaPlayerLibraryCore_block_invoke_28769;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E59C50;
    uint64_t v8 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_28768 = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary_28768)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFAppleMusicAccessResource.m", 21, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPMediaLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getMPMediaLibraryClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAppleMusicAccessResource.m", 22, @"Unable to find class %s", "MPMediaLibrary");

LABEL_10:
    __break(1u);
  }
  getMPMediaLibraryClass_softClass_28761 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_28769()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_28768 = result;
  return result;
}

void sub_23C5FDBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C5FF164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28977(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28978(uint64_t a1)
{
}

id WFFormattedCurrencyAccount(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x263F08A30];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  [v3 setNumberStyle:2];
  uint64_t v4 = [v2 currencyCode];
  [v3 setCurrencyCode:v4];

  uint64_t v5 = [v2 amount];

  uint64_t v6 = [v3 stringFromNumber:v5];

  return v6;
}

void errorCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = [NSString stringWithCString:a2 encoding:4];
  uint64_t v10 = (void *)[[NSString alloc] initWithFormat:v9 arguments:&a9];
  uint64_t v11 = +[ENSession sharedSession];
  BOOL v12 = [v11 logger];
  uint64_t v13 = [NSString stringWithFormat:@"ENXMLSaxParser: %@ (nonfatal)", v10];
  [v12 evernoteLogInfoString:v13];
}

void fatalErrorCallback(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = [NSString stringWithCString:a2 encoding:4];
  uint64_t v11 = (void *)[[NSString alloc] initWithFormat:v10 arguments:&a9];
  BOOL v12 = +[ENSession sharedSession];
  uint64_t v13 = [v12 logger];
  uint64_t v14 = [NSString stringWithFormat:@"ENXMLSaxParser: fatal error %@", v11];
  [v13 evernoteLogErrorString:v14];

  id v15 = a1;
  id WeakRetained = objc_loadWeakRetained(v15 + 1);
  if (WeakRetained && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v17 = (void *)MEMORY[0x263F087E8];
    id v18 = [NSDictionary dictionaryWithObject:v11 forKey:@"message"];
    id v19 = [v17 errorWithDomain:@"ENXMLSaxParserErrorDomain" code:1001 userInfo:v18];

    [WeakRetained parser:v15 didFailWithError:v19];
  }
}

xmlEntityPtr getEntitySAXCallback(void *a1, xmlChar *name)
{
  xmlEntityPtr result = xmlGetPredefinedEntity(name);
  if (!result)
  {
    xmlEntityPtr result = (xmlEntityPtr)[a1 lookupEntity:name];
    if (!result)
    {
      uint64_t v5 = +[ENSession sharedSession];
      uint64_t v6 = [v5 logger];
      long long v7 = objc_msgSend(NSString, "stringWithFormat:", @"Ignoring unknown entity '%s'", name);
      [v6 evernoteLogInfoString:v7];

      return 0;
    }
  }
  return result;
}

void cdataBlockSAXCallback(id *a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = [objc_allocWithZone(NSString) initWithBytes:a2 length:a3 encoding:4];
    if (v4)
    {
      uint64_t v5 = a1 + 1;
      id v8 = (id)v4;
      uint64_t v6 = a1;
      id WeakRetained = objc_loadWeakRetained(v5);
      [WeakRetained parser:v6 foundCDATA:v8];
    }
  }
}

void endElementSAXCallback(void *a1, char *a2)
{
  uint64_t v4 = a1;
  if (a2) {
    a2 = (char *)[objc_allocWithZone(NSString) initWithBytes:a2 length:strlen(a2) encoding:4];
  }
  id WeakRetained = objc_loadWeakRetained(v4 + 1);
  [WeakRetained parser:v4 didEndElement:a2];
}

void startElementSAXCallback(id *a1, char *__s, const char **a3)
{
  if (__s) {
    id v14 = (id)[objc_allocWithZone(NSString) initWithBytes:__s length:strlen(__s) encoding:4];
  }
  else {
    id v14 = 0;
  }
  id v5 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  if (a3)
  {
    uint64_t v6 = *a3;
    if (*a3)
    {
      while (1)
      {
        long long v7 = (void *)[objc_allocWithZone(NSString) initWithBytes:v6 length:strlen(v6) encoding:4];
        id v8 = a3[1];
        if (!v8) {
          break;
        }
        uint64_t v9 = (void *)[objc_allocWithZone(NSString) initWithBytes:v8 length:strlen(a3[1]) encoding:4];
        a3 += 2;
        if (!v9) {
          goto LABEL_13;
        }
        if (v7) {
          goto LABEL_9;
        }
LABEL_10:

        uint64_t v6 = *a3;
        if (!*a3) {
          goto LABEL_15;
        }
      }
      a3 += 2;
LABEL_13:
      uint64_t v9 = [MEMORY[0x263EFF9D0] null];
      if (!v7) {
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v10 = [v7 lowercaseString];
      [v5 setObject:v9 forKey:v10];

      goto LABEL_10;
    }
  }
LABEL_15:
  uint64_t v11 = a1 + 1;
  BOOL v12 = a1;
  id WeakRetained = objc_loadWeakRetained(v11);
  [WeakRetained parser:v12 didStartElement:v14 attributes:v5];
}

void endDocumentSAXCallback(id *a1)
{
  uint64_t v1 = a1 + 1;
  id v2 = a1;
  id WeakRetained = objc_loadWeakRetained(v1);
  [WeakRetained parserDidEndDocument:v2];
}

void startDocumentSAXCallback(id *a1)
{
  uint64_t v1 = a1 + 1;
  id v2 = a1;
  id WeakRetained = objc_loadWeakRetained(v1);
  [WeakRetained parserDidStartDocument:v2];
}

void charactersSAXCallback(id *a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = [objc_allocWithZone(NSString) initWithBytes:a2 length:a3 encoding:4];
    if (v4)
    {
      id v5 = a1 + 1;
      id v8 = (id)v4;
      uint64_t v6 = a1;
      id WeakRetained = objc_loadWeakRetained(v5);
      [WeakRetained parser:v6 foundCharacters:v8];
    }
  }
}

void commentBlockSAXCallback(id *a1, char *__s)
{
  if (__s)
  {
    uint64_t v3 = [objc_allocWithZone(NSString) initWithBytes:__s length:strlen(__s) encoding:4];
    if (v3)
    {
      uint64_t v4 = a1 + 1;
      id v7 = (id)v3;
      id v5 = a1;
      id WeakRetained = objc_loadWeakRetained(v4);
      [WeakRetained parser:v5 foundComment:v7];
    }
  }
}

__CFString *WFListeningModeFromRawAVOutputDeviceBluetoothListeningModeValue(void *a1)
{
  id v1 = a1;
  id v2 = getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellation();
  char v3 = [v1 isEqualToString:v2];

  if (v3)
  {
    uint64_t v4 = @"ActiveNoiseCancellation";
  }
  else
  {
    id v5 = getAVOutputDeviceBluetoothListeningModeAudioTransparency();
    char v6 = [v1 isEqualToString:v5];

    if (v6)
    {
      uint64_t v4 = @"Transparency";
    }
    else
    {
      id v7 = getAVOutputDeviceBluetoothListeningModeAutomatic();
      int v8 = [v1 isEqualToString:v7];

      if (v8) {
        uint64_t v4 = @"Adaptive";
      }
      else {
        uint64_t v4 = @"Normal";
      }
    }
  }

  return v4;
}

void getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellation()
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellationSymbolLoc_ptr;
  uint64_t v9 = getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellationSymbolLoc_ptr;
  if (!getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellationSymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_30216();
    void v7[3] = (uint64_t)dlsym(v1, "AVOutputDeviceBluetoothListeningModeActiveNoiseCancellation");
    getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"NSString *getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellation(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFListeningMode.m", 17, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C607354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVOutputDeviceBluetoothListeningModeAudioTransparency()
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVOutputDeviceBluetoothListeningModeAudioTransparencySymbolLoc_ptr;
  uint64_t v9 = getAVOutputDeviceBluetoothListeningModeAudioTransparencySymbolLoc_ptr;
  if (!getAVOutputDeviceBluetoothListeningModeAudioTransparencySymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_30216();
    void v7[3] = (uint64_t)dlsym(v1, "AVOutputDeviceBluetoothListeningModeAudioTransparency");
    getAVOutputDeviceBluetoothListeningModeAudioTransparencySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"NSString *getAVOutputDeviceBluetoothListeningModeAudioTransparency(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFListeningMode.m", 18, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C6074BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVOutputDeviceBluetoothListeningModeAutomatic()
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVOutputDeviceBluetoothListeningModeAutomaticSymbolLoc_ptr;
  uint64_t v9 = getAVOutputDeviceBluetoothListeningModeAutomaticSymbolLoc_ptr;
  if (!getAVOutputDeviceBluetoothListeningModeAutomaticSymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_30216();
    void v7[3] = (uint64_t)dlsym(v1, "AVOutputDeviceBluetoothListeningModeAutomatic");
    getAVOutputDeviceBluetoothListeningModeAutomaticSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"NSString *getAVOutputDeviceBluetoothListeningModeAutomatic(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFListeningMode.m", 20, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C607624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVOutputDeviceBluetoothListeningModeAutomaticSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_30216();
  xmlEntityPtr result = dlsym(v2, "AVOutputDeviceBluetoothListeningModeAutomatic");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVOutputDeviceBluetoothListeningModeAutomaticSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *AVFoundationLibrary_30216()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_30224)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_30225;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E59FD0;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_30224 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_30224;
  if (!AVFoundationLibraryCore_frameworkLibrary_30224)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFListeningMode.m", 16, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke_30225()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_30224 = result;
  return result;
}

void *__getAVOutputDeviceBluetoothListeningModeAudioTransparencySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_30216();
  uint64_t result = dlsym(v2, "AVOutputDeviceBluetoothListeningModeAudioTransparency");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVOutputDeviceBluetoothListeningModeAudioTransparencySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                + 8)
                                                                                    + 24);
  return result;
}

void *__getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellationSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_30216();
  uint64_t result = dlsym(v2, "AVOutputDeviceBluetoothListeningModeActiveNoiseCancellation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                          + 24);
  return result;
}

void WFAVOutputDeviceBluetoothListeningModeFromListeningMode(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"ActiveNoiseCancellation"])
  {
    getAVOutputDeviceBluetoothListeningModeActiveNoiseCancellation();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else if ([v1 isEqualToString:@"Transparency"])
  {
    getAVOutputDeviceBluetoothListeningModeAudioTransparency();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else if ([v1 isEqualToString:@"Adaptive"])
  {
    getAVOutputDeviceBluetoothListeningModeAutomatic();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x2020000000;
    id v3 = (id *)getAVOutputDeviceBluetoothListeningModeNormalSymbolLoc_ptr;
    uint64_t v12 = getAVOutputDeviceBluetoothListeningModeNormalSymbolLoc_ptr;
    if (!getAVOutputDeviceBluetoothListeningModeNormalSymbolLoc_ptr)
    {
      uint64_t v4 = AVFoundationLibrary_30216();
      _OWORD v10[3] = (uint64_t)dlsym(v4, "AVOutputDeviceBluetoothListeningModeNormal");
      getAVOutputDeviceBluetoothListeningModeNormalSymbolLoc_ptr = v10[3];
      id v3 = (id *)v10[3];
    }
    _Block_object_dispose(&v9, 8);
    if (!v3)
    {
      uint64_t v7 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v8 = [NSString stringWithUTF8String:"NSString *getAVOutputDeviceBluetoothListeningModeNormal(void)"];
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, @"WFListeningMode.m", 19, @"%s", dlerror());

      __break(1u);
      return;
    }
    id v2 = *v3;
  }
  long long v5 = v2;

  id v6 = v5;
}

void sub_23C607AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVOutputDeviceBluetoothListeningModeNormalSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_30216();
  uint64_t result = dlsym(v2, "AVOutputDeviceBluetoothListeningModeNormal");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVOutputDeviceBluetoothListeningModeNormalSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id WFAvailableListeningModesForRoute(void *a1)
{
  [a1 logicalLeaderOutputDevice];
  id v1 = (void *)MRAVOutputDeviceCopyAvailableBluetoothListeningMode();
  id v2 = objc_msgSend(v1, "if_map:", &__block_literal_global_30234);

  return v2;
}

void sub_23C608384(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void __getREMReminderClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMReminderClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMReminderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddNewReminderAction.m", 25, @"Unable to find class %s", "REMReminder");

    __break(1u);
  }
}

void ReminderKitLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!ReminderKitLibraryCore_frameworkLibrary_30307)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __ReminderKitLibraryCore_block_invoke_30308;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5A0D8;
    uint64_t v5 = 0;
    ReminderKitLibraryCore_frameworkLibrary_30307 = _sl_dlopen();
  }
  if (!ReminderKitLibraryCore_frameworkLibrary_30307)
  {
    uint64_t v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *ReminderKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFAddNewReminderAction.m", 24, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __ReminderKitLibraryCore_block_invoke_30308()
{
  uint64_t result = _sl_dlopen();
  ReminderKitLibraryCore_frameworkLibrary_30307 = result;
  return result;
}

void sub_23C60922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void __getREMAlarmDateTriggerClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMAlarmDateTrigger");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMAlarmDateTriggerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMAlarmDateTriggerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddNewReminderAction.m", 26, @"Unable to find class %s", "REMAlarmDateTrigger");

    __break(1u);
  }
}

void sub_23C609938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMKMapItemClass_block_invoke_30340(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_30341)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MapKitLibraryCore_block_invoke_30342;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5A108;
    uint64_t v8 = 0;
    MapKitLibraryCore_frameworkLibrary_30341 = _sl_dlopen();
  }
  if (!MapKitLibraryCore_frameworkLibrary_30341)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFAddNewReminderAction.m", 33, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MKMapItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAddNewReminderAction.m", 34, @"Unable to find class %s", "MKMapItem");

LABEL_10:
    __break(1u);
  }
  getMKMapItemClass_softClass_30339 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MapKitLibraryCore_block_invoke_30342()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_30341 = result;
  return result;
}

void __getREMStructuredLocationClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMStructuredLocation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMStructuredLocationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMStructuredLocationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddNewReminderAction.m", 31, @"Unable to find class %s", "REMStructuredLocation");

    __break(1u);
  }
}

Class __getCNPostalAddressFormatterClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_30356)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __ContactsLibraryCore_block_invoke_30357;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5A0F0;
    uint64_t v8 = 0;
    ContactsLibraryCore_frameworkLibrary_30356 = _sl_dlopen();
  }
  if (!ContactsLibraryCore_frameworkLibrary_30356)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFAddNewReminderAction.m", 36, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CNPostalAddressFormatter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCNPostalAddressFormatterClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAddNewReminderAction.m", 37, @"Unable to find class %s", "CNPostalAddressFormatter");

LABEL_10:
    __break(1u);
  }
  getCNPostalAddressFormatterClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getREMAlarmLocationTriggerClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMAlarmLocationTrigger");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMAlarmLocationTriggerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMAlarmLocationTriggerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddNewReminderAction.m", 29, @"Unable to find class %s", "REMAlarmLocationTrigger");

    __break(1u);
  }
}

uint64_t __ContactsLibraryCore_block_invoke_30357()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_30356 = result;
  return result;
}

void sub_23C60A9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void __getREMSaveRequestClass_block_invoke_30404(uint64_t a1)
{
  ReminderKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMSaveRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMSaveRequestClass_softClass_30403 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMSaveRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddNewReminderAction.m", 27, @"Unable to find class %s", "REMSaveRequest");

    __break(1u);
  }
}

void sub_23C60ABBC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void getAVMetadataObjectTypeQRCode()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVMetadataObjectTypeQRCodeSymbolLoc_ptr;
  uint64_t v9 = getAVMetadataObjectTypeQRCodeSymbolLoc_ptr;
  if (!getAVMetadataObjectTypeQRCodeSymbolLoc_ptr)
  {
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = __getAVMetadataObjectTypeQRCodeSymbolLoc_block_invoke;
    void v5[3] = &unk_264E5EC88;
    void v5[4] = &v6;
    __getAVMetadataObjectTypeQRCodeSymbolLoc_block_invoke(v5);
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v1 = *v0;
    id v2 = v1;
  }
  else
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"NSString * _Nonnull getAVMetadataObjectTypeQRCode(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFMachineReadableCodeContentItem.m", 19, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C60B19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVMetadataObjectTypeQRCodeSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_30512)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    void v5[3] = __AVFoundationLibraryCore_block_invoke_30513;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_264E5A120;
    uint64_t v7 = 0;
    AVFoundationLibraryCore_frameworkLibrary_30512 = _sl_dlopen();
  }
  id v2 = (void *)AVFoundationLibraryCore_frameworkLibrary_30512;
  if (!AVFoundationLibraryCore_frameworkLibrary_30512)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void * _Nonnull AVFoundationLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFMachineReadableCodeContentItem.m", 18, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "AVMetadataObjectTypeQRCode");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getAVMetadataObjectTypeQRCodeSymbolLoc_ptr = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __AVFoundationLibraryCore_block_invoke_30513()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_30512 = result;
  return result;
}

id getPHAssetCollectionClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPHAssetCollectionClass_softClass;
  uint64_t v7 = getPHAssetCollectionClass_softClass;
  if (!getPHAssetCollectionClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetCollectionClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getPHAssetCollectionClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C60C50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetCollectionClass_block_invoke(uint64_t a1)
{
  PhotosLibrary_30913();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollection");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetCollectionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoAlbumPickerParameter.m", 21, @"Unable to find class %s", "PHAssetCollection");

    __break(1u);
  }
}

void PhotosLibrary_30913()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_30923)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __PhotosLibraryCore_block_invoke_30924;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5A140;
    uint64_t v5 = 0;
    PhotosLibraryCore_frameworkLibrary_30923 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_30923)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFPhotoAlbumPickerParameter.m", 19, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PhotosLibraryCore_block_invoke_30924()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_30923 = result;
  return result;
}

void sub_23C60D080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHPhotoLibraryClass_block_invoke(uint64_t a1)
{
  PhotosLibrary_30913();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHPhotoLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHPhotoLibraryClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHPhotoLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoAlbumPickerParameter.m", 22, @"Unable to find class %s", "PHPhotoLibrary");

    __break(1u);
  }
}

void sub_23C60DA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPHAssetCollectionClass_block_invoke_31050(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_31051)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PhotosLibraryCore_block_invoke_31052;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5A158;
    uint64_t v8 = 0;
    PhotosLibraryCore_frameworkLibrary_31051 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_31051)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFGetLatestPhotosAction.m", 14, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PHAssetCollection");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPHAssetCollectionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFGetLatestPhotosAction.m", 16, @"Unable to find class %s", "PHAssetCollection");

LABEL_10:
    __break(1u);
  }
  getPHAssetCollectionClass_softClass_31049 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PhotosLibraryCore_block_invoke_31052()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_31051 = result;
  return result;
}

id WFRFC6749Section5_2ErrorFromResponse(void *a1)
{
  id v1 = a1;
  id v2 = [v1 objectForKeyedSubscript:@"error"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if ([v2 isEqualToString:@"invalid_request"])
    {
      id v3 = @"The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed.";
      uint64_t v4 = 100;
    }
    else if ([v2 isEqualToString:@"invalid_client"])
    {
      id v3 = @"Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).  The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported.  If the client attempted to authenticate via the \"Authorization\" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.";
      uint64_t v4 = 101;
    }
    else if ([v2 isEqualToString:@"invalid_grant"])
    {
      id v3 = @"The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.";
      uint64_t v4 = 102;
    }
    else if ([v2 isEqualToString:@"unauthorized_client"])
    {
      id v3 = @"The authenticated client is not authorized to use this authorization grant type.";
      uint64_t v4 = 103;
    }
    else if ([v2 isEqualToString:@"unsupported_grant_type"])
    {
      id v3 = @"The authorization grant type is not supported by the authorization server.";
      uint64_t v4 = 104;
    }
    else if ([v2 isEqualToString:@"invalid_scope"])
    {
      id v3 = @"The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.";
      uint64_t v4 = 105;
    }
    else if ([v2 isEqualToString:@"access_denied"])
    {
      id v3 = @"The resource owner or authorization server denied the request.";
      uint64_t v4 = 106;
    }
    else if ([v2 isEqualToString:@"unsupported_response_type"])
    {
      id v3 = @"The authorization server does not support obtaining an authorization code using this method.";
      uint64_t v4 = 107;
    }
    else if ([v2 isEqualToString:@"server_error"])
    {
      id v3 = @" The authorization server encountered an unexpected condition that prevented it from fulfilling the request.";
      uint64_t v4 = 108;
    }
    else if ([v2 isEqualToString:@"temporarily_unavailable"])
    {
      id v3 = @"The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.";
      uint64_t v4 = 109;
    }
    else if ([v2 isEqualToString:@"invalid_token"])
    {
      id v3 = @"The requested token is invalid, unknown, or malformed.";
      uint64_t v4 = 201;
    }
    else
    {
      int v6 = [v2 isEqualToString:@"mismatching_redirect_uri"];
      if (v6) {
        id v3 = @"The requested redirect URI does not match any of the client's valid redirect URIs.";
      }
      else {
        id v3 = 0;
      }
      if (v6) {
        uint64_t v4 = 202;
      }
      else {
        uint64_t v4 = -1;
      }
    }
    uint64_t v7 = [v1 objectForKeyedSubscript:@"error_description"];
    uint64_t v8 = (void *)v7;
    if (v7) {
      uint64_t v9 = (void *)v7;
    }
    else {
      uint64_t v9 = v3;
    }
    id v10 = v9;

    uint64_t v11 = objc_opt_new();
    [v11 setValue:v10 forKey:*MEMORY[0x263F08320]];
    uint64_t v12 = NSURL;
    uint64_t v13 = [v1 objectForKeyedSubscript:@"error_uri"];
    id v14 = [v12 URLWithString:v13];
    [v11 setValue:v14 forKey:*MEMORY[0x263F08348]];

    uint64_t v5 = [MEMORY[0x263F087E8] errorWithDomain:@"WFOAuth2ErrorDomain" code:v4 userInfo:v11];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_23C60EAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getTUBundleIdentifierTelephonyUtilitiesFramework()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getTUBundleIdentifierTelephonyUtilitiesFrameworkSymbolLoc_ptr;
  uint64_t v9 = getTUBundleIdentifierTelephonyUtilitiesFrameworkSymbolLoc_ptr;
  if (!getTUBundleIdentifierTelephonyUtilitiesFrameworkSymbolLoc_ptr)
  {
    id v1 = TelephonyUtilitiesLibrary();
    void v7[3] = (uint64_t)dlsym(v1, "TUBundleIdentifierTelephonyUtilitiesFramework");
    getTUBundleIdentifierTelephonyUtilitiesFrameworkSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getTUBundleIdentifierTelephonyUtilitiesFramework(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSilenceUnknownCallersSettingsClient.m", 19, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C60EC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getTUCallFilteringPreferencesContactsOnlyKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getTUCallFilteringPreferencesContactsOnlyKeySymbolLoc_ptr;
  uint64_t v9 = getTUCallFilteringPreferencesContactsOnlyKeySymbolLoc_ptr;
  if (!getTUCallFilteringPreferencesContactsOnlyKeySymbolLoc_ptr)
  {
    id v1 = TelephonyUtilitiesLibrary();
    void v7[3] = (uint64_t)dlsym(v1, "TUCallFilteringPreferencesContactsOnlyKey");
    getTUCallFilteringPreferencesContactsOnlyKeySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getTUCallFilteringPreferencesContactsOnlyKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSilenceUnknownCallersSettingsClient.m", 20, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C60EDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getNPSManagerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!NanoPreferencesSyncLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __NanoPreferencesSyncLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5A1B0;
    uint64_t v8 = 0;
    NanoPreferencesSyncLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!NanoPreferencesSyncLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *NanoPreferencesSyncLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSilenceUnknownCallersSettingsClient.m", 21, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("NPSManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getNPSManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSilenceUnknownCallersSettingsClient.m", 22, @"Unable to find class %s", "NPSManager");

LABEL_10:
    __break(1u);
  }
  getNPSManagerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __NanoPreferencesSyncLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  NanoPreferencesSyncLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getTUCallFilteringPreferencesContactsOnlyKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = TelephonyUtilitiesLibrary();
  uint64_t result = dlsym(v2, "TUCallFilteringPreferencesContactsOnlyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getTUCallFilteringPreferencesContactsOnlyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *TelephonyUtilitiesLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __TelephonyUtilitiesLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E5A198;
    uint64_t v6 = 0;
    TelephonyUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)TelephonyUtilitiesLibraryCore_frameworkLibrary;
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *TelephonyUtilitiesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSilenceUnknownCallersSettingsClient.m", 18, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __TelephonyUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TelephonyUtilitiesLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getTUBundleIdentifierTelephonyUtilitiesFrameworkSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = TelephonyUtilitiesLibrary();
  uint64_t result = dlsym(v2, "TUBundleIdentifierTelephonyUtilitiesFramework");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getTUBundleIdentifierTelephonyUtilitiesFrameworkSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void sub_23C60FAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C611408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C612C00(void *a1)
{
}

void sub_23C614EDC(_Unwind_Exception *a1)
{
}

void sub_23C615DAC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

id WFContactPropertyIDsFromActionProperties(void *a1)
{
  uint64_t v1 = objc_msgSend(a1, "if_compactMap:", &__block_literal_global_32807);
  id v2 = v1;
  if (!v1) {
    uint64_t v1 = (void *)MEMORY[0x263EFFA68];
  }
  id v3 = v1;

  return v3;
}

void *__WFContactPropertyIDsFromActionProperties_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isEqualToString:@"Phone"])
  {
    id v3 = &unk_26F076080;
  }
  else if ([v2 isEqualToString:@"Email"])
  {
    id v3 = &unk_26F076098;
  }
  else if ([v2 isEqualToString:@"URL"])
  {
    id v3 = &unk_26F0760B0;
  }
  else
  {
    id v3 = &unk_26F0760C8;
  }

  return v3;
}

id WFCNPropertyKeysFromActionProperties(void *a1)
{
  uint64_t v1 = WFContactPropertyIDsFromActionProperties(a1);
  id v2 = objc_msgSend(v1, "if_compactMap:", &__block_literal_global_191);
  id v3 = v2;
  if (!v2) {
    id v2 = (void *)MEMORY[0x263EFFA68];
  }
  id v4 = v2;

  return v4;
}

uint64_t __WFCNPropertyKeysFromActionProperties_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 intValue];
  return MEMORY[0x270F18698](v2);
}

void sub_23C617D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBBSettingsGatewayClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!BulletinBoardLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __BulletinBoardLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5A360;
    uint64_t v8 = 0;
    BulletinBoardLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!BulletinBoardLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *BulletinBoardLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFAnnounceNotificationsSettingsClient.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("BBSettingsGateway");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getBBSettingsGatewayClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAnnounceNotificationsSettingsClient.m", 19, @"Unable to find class %s", "BBSettingsGateway");

LABEL_10:
    __break(1u);
  }
  getBBSettingsGatewayClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BulletinBoardLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BulletinBoardLibraryCore_frameworkLibrary = result;
  return result;
}

Class initUISCurrentUserInterfaceStyleValue()
{
  if (UIKitServicesLibrary_sOnce != -1) {
    dispatch_once(&UIKitServicesLibrary_sOnce, &__block_literal_global_33067);
  }
  Class result = objc_getClass("UISCurrentUserInterfaceStyleValue");
  classUISCurrentUserInterfaceStyleValue = (uint64_t)result;
  getUISCurrentUserInterfaceStyleValueClasunsigned int s = (uint64_t (*)())UISCurrentUserInterfaceStyleValueFunction;
  return result;
}

id UISCurrentUserInterfaceStyleValueFunction()
{
  return (id)classUISCurrentUserInterfaceStyleValue;
}

void *__UIKitServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
  UIKitServicesLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t (*initUISUserInterfaceStyleModeValueIsAutomatic(uint64_t a1))()
{
  if (UIKitServicesLibrary_sOnce != -1) {
    dispatch_once(&UIKitServicesLibrary_sOnce, &__block_literal_global_33067);
  }
  Class result = (uint64_t (*)())dlsym((void *)UIKitServicesLibrary_sLib, "UISUserInterfaceStyleModeValueIsAutomatic");
  softLinkUISUserInterfaceStyleModeValueIsAutomatic = result;
  if (result)
  {
    return (uint64_t (*)())((uint64_t (*)(uint64_t))result)(a1);
  }
  return result;
}

Class initUISUserInterfaceStyleMode()
{
  if (UIKitServicesLibrary_sOnce != -1) {
    dispatch_once(&UIKitServicesLibrary_sOnce, &__block_literal_global_33067);
  }
  Class result = objc_getClass("UISUserInterfaceStyleMode");
  classUISUserInterfaceStyleMode = (uint64_t)result;
  getUISUserInterfaceStyleModeClasunsigned int s = (uint64_t (*)())UISUserInterfaceStyleModeFunction;
  return result;
}

id UISUserInterfaceStyleModeFunction()
{
  return (id)classUISUserInterfaceStyleMode;
}

id WFDevicePossiblePlatformsTypeMapping()
{
  v6[3] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26F076128;
  uint64_t v0 = WFLocalizedContentPropertyPossibleValueMarker(@"iOS");
  v6[0] = v0;
  v5[1] = &unk_26F076140;
  uint64_t v1 = WFLocalizedContentPropertyPossibleValueMarker(@"macOS");
  v6[1] = v1;
  v5[2] = &unk_26F076158;
  uint64_t v2 = WFLocalizedContentPropertyPossibleValueMarker(@"watchOS");
  v6[2] = v2;
  id v3 = [NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:3];

  return v3;
}

id WFDevicePossibleIdiomsTypeMapping()
{
  v8[5] = *MEMORY[0x263EF8340];
  v7[0] = &unk_26F076128;
  uint64_t v0 = WFLocalizedContentPropertyPossibleValueMarker(@"iPhone");
  v8[0] = v0;
  v7[1] = &unk_26F076140;
  uint64_t v1 = WFLocalizedContentPropertyPossibleValueMarker(@"iPad");
  v8[1] = v1;
  _OWORD v7[2] = &unk_26F076170;
  uint64_t v2 = WFLocalizedContentPropertyPossibleValueMarker(@"iPod");
  void v8[2] = v2;
  void v7[3] = &unk_26F076158;
  id v3 = WFLocalizedContentPropertyPossibleValueMarker(@"Mac");
  _OWORD v8[3] = v3;
  void v7[4] = &unk_26F076188;
  id v4 = WFLocalizedContentPropertyPossibleValueMarker(@"Watch");
  void v8[4] = v4;
  long long v5 = [NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:5];

  return v5;
}

__CFString *PocketAPINameForHTTPMethod(int a1)
{
  if ((a1 - 1) > 2) {
    return @"GET";
  }
  else {
    return off_264E5A4A0[a1 - 1];
  }
}

void sub_23C61F51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34144(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__34145(uint64_t a1)
{
}

id getMKMapItemClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKMapItemClass_softClass_34149;
  uint64_t v7 = getMKMapItemClass_softClass_34149;
  if (!getMKMapItemClass_softClass_34149)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_34150;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getMKMapItemClass_block_invoke_34150((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C61F62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMKMapItemClass_block_invoke_34150(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_34151)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MapKitLibraryCore_block_invoke_34152;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5A610;
    uint64_t v8 = 0;
    MapKitLibraryCore_frameworkLibrary_34151 = _sl_dlopen();
  }
  if (!MapKitLibraryCore_frameworkLibrary_34151)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFGetDistanceAction.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MKMapItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFGetDistanceAction.m", 20, @"Unable to find class %s", "MKMapItem");

LABEL_10:
    __break(1u);
  }
  getMKMapItemClass_softClass_34149 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MapKitLibraryCore_block_invoke_34152()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_34151 = result;
  return result;
}

void sub_23C61FE98(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

id getCLLocationClass_34169()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCLLocationClass_softClass_34170;
  uint64_t v7 = getCLLocationClass_softClass_34170;
  if (!getCLLocationClass_softClass_34170)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_34171;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getCLLocationClass_block_invoke_34171((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C620090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCLLocationClass_block_invoke_34171(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_34172)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke_34173;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5A5F8;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary_34172 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_34172)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFGetDistanceAction.m", 22, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFGetDistanceAction.m", 23, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClass_34170 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_34173()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_34172 = result;
  return result;
}

void sub_23C62122C()
{
}

void sub_23C62B79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__35423(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__35424(uint64_t a1)
{
}

id blogPath(void *a1, void *a2)
{
  id v3 = NSString;
  id v4 = a1;
  long long v5 = fullBlogName(a2);
  uint64_t v6 = [v3 stringWithFormat:@"blog/%@/%@", v5, v4];

  return v6;
}

id fullBlogName(void *a1)
{
  id v1 = a1;
  if ([v1 rangeOfString:@"."] == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v2 = [v1 stringByAppendingString:@".tumblr.com"];

    id v1 = (id)v2;
  }
  id v3 = v1;

  return v3;
}

void sub_23C62DBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C632528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36507(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__36508(uint64_t a1)
{
}

void sub_23C6328B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C634670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void __getVNRecognizeDocumentsRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNRecognizeDocumentsRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNRecognizeDocumentsRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getVNRecognizeDocumentsRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFExtractTextFromImageAction.m", 17, @"Unable to find class %s", "VNRecognizeDocumentsRequest");

    __break(1u);
  }
}

void sub_23C6349E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void __getVNImageRequestHandlerClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNImageRequestHandler");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNImageRequestHandlerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getVNImageRequestHandlerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFExtractTextFromImageAction.m", 16, @"Unable to find class %s", "VNImageRequestHandler");

    __break(1u);
  }
}

void VisionLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!VisionLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __VisionLibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5AA98;
    uint64_t v5 = 0;
    VisionLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!VisionLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *VisionLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFExtractTextFromImageAction.m", 15, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __VisionLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  VisionLibraryCore_frameworkLibrary = result;
  return result;
}

void __getVNDocumentObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VNDocumentObservation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVNDocumentObservationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getVNDocumentObservationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFExtractTextFromImageAction.m", 18, @"Unable to find class %s", "VNDocumentObservation");

    __break(1u);
  }
}

void sub_23C636E0C(_Unwind_Exception *a1)
{
}

void sub_23C638D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMFMailAccountProxyGeneratorClass_block_invoke(uint64_t a1)
{
  MessageUILibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MFMailAccountProxyGenerator");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMFMailAccountProxyGeneratorClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMFMailAccountProxyGeneratorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSendEmailAction.m", 30, @"Unable to find class %s", "MFMailAccountProxyGenerator");

    __break(1u);
  }
}

void MessageUILibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!MessageUILibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __MessageUILibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5AD20;
    uint64_t v5 = 0;
    MessageUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MessageUILibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *MessageUILibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFSendEmailAction.m", 29, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __MessageUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MessageUILibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C63A6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMFMailComposeViewControllerClass_block_invoke(uint64_t a1)
{
  MessageUILibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MFMailComposeViewController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMFMailComposeViewControllerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMFMailComposeViewControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSendEmailAction.m", 31, @"Unable to find class %s", "MFMailComposeViewController");

    __break(1u);
  }
}

void sub_23C63B5D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

void getkCLLocationCoordinate2DInvalid()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkCLLocationCoordinate2DInvalidSymbolLoc_ptr;
  uint64_t v7 = getkCLLocationCoordinate2DInvalidSymbolLoc_ptr;
  if (!getkCLLocationCoordinate2DInvalidSymbolLoc_ptr)
  {
    uint64_t v1 = CoreLocationLibrary_37631();
    void v5[3] = (uint64_t)dlsym(v1, "kCLLocationCoordinate2DInvalid");
    getkCLLocationCoordinate2DInvalidSymbolLoc_ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"CLLocationCoordinate2D getkCLLocationCoordinate2DInvalid(void)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetHalfwayPointAction.m", 17, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C63B764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37624(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__37625(uint64_t a1)
{
}

void sub_23C63BB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void WFCLLocationCoordinate2DIsValid(double a1, double a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v4 = (void (*)(double, double))getCLLocationCoordinate2DIsValidSymbolLoc_ptr;
  uint64_t v11 = getCLLocationCoordinate2DIsValidSymbolLoc_ptr;
  if (!getCLLocationCoordinate2DIsValidSymbolLoc_ptr)
  {
    uint64_t v5 = CoreLocationLibrary_37631();
    void v9[3] = (uint64_t)dlsym(v5, "CLLocationCoordinate2DIsValid");
    getCLLocationCoordinate2DIsValidSymbolLoc_ptr = (_UNKNOWN *)v9[3];
    uint64_t v4 = (void (*)(double, double))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    v4(a1, a2);
  }
  else
  {
    uint64_t v6 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v7 = [NSString stringWithUTF8String:"BOOL WFCLLocationCoordinate2DIsValid(CLLocationCoordinate2D)"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFGetHalfwayPointAction.m", 16, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C63BCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLLocationClass_block_invoke_37628(uint64_t a1)
{
  CoreLocationLibrary_37631();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_37627 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetHalfwayPointAction.m", 13, @"Unable to find class %s", "CLLocation");

    __break(1u);
  }
}

void *CoreLocationLibrary_37631()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_37642)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke_37643;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E5AD88;
    uint64_t v6 = 0;
    CoreLocationLibraryCore_frameworkLibrary_37642 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_37642;
  if (!CoreLocationLibraryCore_frameworkLibrary_37642)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetHalfwayPointAction.m", 12, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreLocationLibraryCore_block_invoke_37643()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_37642 = result;
  return result;
}

void *__getCLLocationCoordinate2DIsValidSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreLocationLibrary_37631();
  uint64_t result = dlsym(v2, "CLLocationCoordinate2DIsValid");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCLLocationCoordinate2DIsValidSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkCLLocationCoordinate2DInvalidSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreLocationLibrary_37631();
  uint64_t result = dlsym(v2, "kCLLocationCoordinate2DInvalid");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCLLocationCoordinate2DInvalidSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C63C2FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __getCLPlacemarkClass_block_invoke_37670(uint64_t a1)
{
  CoreLocationLibrary_37631();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLPlacemarkClass_softClass_37669 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetHalfwayPointAction.m", 14, @"Unable to find class %s", "CLPlacemark");

    __break(1u);
  }
}

void sub_23C63C574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLGeocoderClass_block_invoke(uint64_t a1)
{
  CoreLocationLibrary_37631();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLGeocoder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLGeocoderClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLGeocoderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetHalfwayPointAction.m", 15, @"Unable to find class %s", "CLGeocoder");

    __break(1u);
  }
}

id __WFINRideOptionFromSerializedRepresentation_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = WFEnforceClass(v2, v3);

  long long v5 = [v4 objectForKeyedSubscript:@"PartySizeRangeString"];
  uint64_t v6 = objc_opt_class();
  WFEnforceClass(v5, v6);
  uint64_t v7 = (NSString *)objc_claimAutoreleasedReturnValue();

  uint64_t v8 = [v4 objectForKeyedSubscript:@"SizeDescription"];
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = WFEnforceClass(v8, v9);

  if (v7)
  {
    id v11 = objc_alloc(MEMORY[0x263F0FE18]);
    NSRange v12 = NSRangeFromString(v7);
    uint64_t v13 = objc_msgSend(v11, "initWithPartySizeRange:sizeDescription:priceRange:", v12.location, v12.length, v10, 0);
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

id __WFSerializedRepresentationFromINRideOption_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_new();
  v8.locatioint n = [v2 partySizeRange];
  uint64_t v4 = NSStringFromRange(v8);
  [v3 setObject:v4 forKey:@"PartySizeRangeString"];

  long long v5 = [v2 sizeDescription];

  [v3 setValue:v5 forKey:@"SizeDescription"];
  return v3;
}

void sub_23C63E418(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getAVAudioSessionClass_block_invoke_38147(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_38150)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __AVFoundationLibraryCore_block_invoke_38151;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5AE08;
    uint64_t v8 = 0;
    AVFoundationLibraryCore_frameworkLibrary_38150 = _sl_dlopen();
  }
  if (!AVFoundationLibraryCore_frameworkLibrary_38150)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFMicrophoneAccessResource.m", 16, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AVAudioSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getAVAudioSessionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFMicrophoneAccessResource.m", 17, @"Unable to find class %s", "AVAudioSession");

LABEL_10:
    __break(1u);
  }
  getAVAudioSessionClass_softClass_38146 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AVFoundationLibraryCore_block_invoke_38151()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_38150 = result;
  return result;
}

void WFContentCollectionFromStorageServiceResult(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a1;
  id v7 = a2;
  id v8 = a4;
  if (![v6 count]) {
    (*((void (**)(id, void, void))v8 + 2))(v8, 0, 0);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  v13[2] = __WFContentCollectionFromStorageServiceResult_block_invoke;
  v13[3] = &unk_264E5AE28;
  id v14 = v7;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = __WFContentCollectionFromStorageServiceResult_block_invoke_2;
  v11[3] = &unk_264E5CE88;
  id v12 = v8;
  id v9 = v8;
  id v10 = v7;
  objc_msgSend(v6, "if_mapAsynchronously:completionHandler:", v13, v11);
}

void __WFContentCollectionFromStorageServiceResult_block_invoke(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  id v8 = [v7 wrappedURL];

  if (v8)
  {
    id v9 = (void *)MEMORY[0x263F33870];
    id v10 = [v7 wrappedURL];

    id v11 = [v10 url];
    id v14 = [v9 fileWithURL:v11 options:8];

    [MEMORY[0x263F337C8] itemWithFile:v14 origin:*(void *)(a1 + 32) disclosureLevel:1];
  }
  else
  {
    id v12 = (void *)MEMORY[0x263F337C8];
    id v14 = [v7 metadataObject];

    [v12 itemWithObject:v14 origin:*(void *)(a1 + 32) disclosureLevel:1];
  uint64_t v13 = };
  v6[2](v6, v13, 0);
}

void __WFContentCollectionFromStorageServiceResult_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v4 = *(void (**)(uint64_t, void))(v3 + 16);
    uint64_t v5 = *(void *)(a1 + 32);
    v4(v5, 0);
  }
  else
  {
    id v6 = [MEMORY[0x263F337B0] collectionWithItems:a2];
    (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v6, 0);
  }
}

id initUIPasteboardChangedNotification()
{
  if (UIKitLibrary_sOnce_38212 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_38212, &__block_literal_global_38213);
  }
  uint64_t v0 = (id *)dlsym((void *)UIKitLibrary_sLib_38214, "UIPasteboardChangedNotification");
  if (!v0) {
    __assert_rtn("initUIPasteboardChangedNotification", "WFSetClipboardAction.m", 21, "constant");
  }
  objc_storeStrong((id *)&constantUIPasteboardChangedNotification, *v0);
  getUIPasteboardChangedNotificatioint n = (uint64_t (*)())UIPasteboardChangedNotificationFunction;
  uint64_t v1 = (void *)constantUIPasteboardChangedNotification;
  return v1;
}

id UIPasteboardChangedNotificationFunction()
{
  return (id)constantUIPasteboardChangedNotification;
}

void *__UIKitLibrary_block_invoke_38220()
{
  uint64_t result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_38214 = (uint64_t)result;
  return result;
}

id initUIPasteboardOptionLocalOnly()
{
  if (UIKitLibrary_sOnce_38212 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_38212, &__block_literal_global_38213);
  }
  uint64_t v0 = (id *)dlsym((void *)UIKitLibrary_sLib_38214, "UIPasteboardOptionLocalOnly");
  if (!v0) {
    __assert_rtn("initUIPasteboardOptionLocalOnly", "WFSetClipboardAction.m", 19, "constant");
  }
  objc_storeStrong((id *)&constantUIPasteboardOptionLocalOnly, *v0);
  getUIPasteboardOptionLocalOnly = (uint64_t (*)())UIPasteboardOptionLocalOnlyFunction;
  uint64_t v1 = (void *)constantUIPasteboardOptionLocalOnly;
  return v1;
}

id UIPasteboardOptionLocalOnlyFunction()
{
  return (id)constantUIPasteboardOptionLocalOnly;
}

id initUIPasteboardOptionExpirationDate()
{
  if (UIKitLibrary_sOnce_38212 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_38212, &__block_literal_global_38213);
  }
  uint64_t v0 = (id *)dlsym((void *)UIKitLibrary_sLib_38214, "UIPasteboardOptionExpirationDate");
  if (!v0) {
    __assert_rtn("initUIPasteboardOptionExpirationDate", "WFSetClipboardAction.m", 20, "constant");
  }
  objc_storeStrong((id *)&constantUIPasteboardOptionExpirationDate, *v0);
  getUIPasteboardOptionExpirationDate = (uint64_t (*)())UIPasteboardOptionExpirationDateFunction;
  uint64_t v1 = (void *)constantUIPasteboardOptionExpirationDate;
  return v1;
}

id UIPasteboardOptionExpirationDateFunction()
{
  return (id)constantUIPasteboardOptionExpirationDate;
}

Class initUIPasteboard()
{
  if (UIKitLibrary_sOnce_38212 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_38212, &__block_literal_global_38213);
  }
  Class result = objc_getClass("UIPasteboard");
  classUIPasteboard = (uint64_t)result;
  getUIPasteboardClasunsigned int s = (uint64_t (*)())UIPasteboardFunction;
  return result;
}

id UIPasteboardFunction()
{
  return (id)classUIPasteboard;
}

id getMPAVEndpointRouteClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMPAVEndpointRouteClass_softClass_38588;
  uint64_t v7 = getMPAVEndpointRouteClass_softClass_38588;
  if (!getMPAVEndpointRouteClass_softClass_38588)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPAVEndpointRouteClass_block_invoke_38589;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getMPAVEndpointRouteClass_block_invoke_38589((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C641950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFEnforceClass_38585(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a1;
  if (v3 && (objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v5 = getWFGeneralLogObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136315906;
      id v9 = "WFEnforceClass";
      __int16 v10 = 2114;
      id v11 = v3;
      __int16 v12 = 2114;
      id v13 = (id)objc_opt_class();
      __int16 v14 = 2114;
      uint64_t v15 = a2;
      id v6 = v13;
      _os_log_impl(&dword_23C364000, v5, OS_LOG_TYPE_FAULT, "%s Setting audio session category for route discovery failed: %d error: %@", (uint8_t *)&v8, 0x2Au);
    }
    id v4 = 0;
  }
  else
  {
    id v4 = v3;
  }

  return v4;
}

void __getMPAVEndpointRouteClass_block_invoke_38589(uint64_t a1)
{
  MediaPlayerLibrary_38590();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVEndpointRoute");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPAVEndpointRouteClass_softClass_38588 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPAVEndpointRouteClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaRoutePicker.m", 24, @"Unable to find class %s", "MPAVEndpointRoute");

    __break(1u);
  }
}

void MediaPlayerLibrary_38590()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_38597)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __MediaPlayerLibraryCore_block_invoke_38598;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5B078;
    uint64_t v5 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_38597 = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary_38597)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFMediaRoutePicker.m", 20, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __MediaPlayerLibraryCore_block_invoke_38598()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_38597 = result;
  return result;
}

void sub_23C642478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18, id a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  objc_destroyWeak(v33);
  objc_destroyWeak(v32);
  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  objc_destroyWeak(&a19);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v34 - 160), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__38620(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__38621(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
}

void sub_23C643384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id WFMediaRoutePickerInjectRouteNameInUserInfoIfPossible(void *a1, void *a2)
{
  v12[1] = *MEMORY[0x263EF8340];
  id v3 = a2;
  long long v4 = v3;
  if (a1)
  {
    id v11 = @"InvolvedMediaRoute";
    v12[0] = a1;
    uint64_t v5 = NSDictionary;
    id v6 = a1;
    uint64_t v7 = [v5 dictionaryWithObjects:v12 forKeys:&v11 count:1];

    if (v4)
    {
      objc_msgSend(v4, "if_dictionaryByAddingEntriesFromDictionary:", v7);
      id v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v8 = v7;
    }
    id v9 = v8;
  }
  else
  {
    id v9 = v3;
  }

  return v9;
}

void sub_23C643EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C64492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPAVOutputDeviceRoutingDataSourceClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_38590();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVOutputDeviceRoutingDataSource");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPAVOutputDeviceRoutingDataSourceClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPAVOutputDeviceRoutingDataSourceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaRoutePicker.m", 23, @"Unable to find class %s", "MPAVOutputDeviceRoutingDataSource");

    __break(1u);
  }
}

void __getMPAVRoutingControllerClass_block_invoke_38681(uint64_t a1)
{
  MediaPlayerLibrary_38590();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVRoutingController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPAVRoutingControllerClass_softClass_38680 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPAVRoutingControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMediaRoutePicker.m", 21, @"Unable to find class %s", "MPAVRoutingController");

    __break(1u);
  }
}

uint64_t WFMediaRoutePickerErrorCodeFromMRMediaRemoteError(int a1)
{
  if (a1 == 35) {
    return 8;
  }
  else {
    return 7;
  }
}

void WFPerformBooleanSettingIntent(void *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = a1;
  unint64_t v8 = [v7 operation];
  id v9 = [v7 state];

  uint64_t v10 = [v9 BOOLValue];
  id v11 = getWFBundledIntentsLogObject();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    if (v8 > 2) {
      __int16 v12 = @"Invalid";
    }
    else {
      __int16 v12 = off_264E5B1B8[v8];
    }
    id v13 = (objc_class *)objc_opt_class();
    __int16 v14 = NSStringFromClass(v13);
    *(_DWORD *)uint64_t v23 = 136315906;
    *(void *)&v23[4] = "WFPerformBooleanSettingIntent";
    *(_WORD *)&v23[12] = 2114;
    *(void *)&v23[14] = v12;
    *(_WORD *)&v23[22] = 2114;
    uint64_t v24 = v14;
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = v10;
    _os_log_impl(&dword_23C364000, v11, OS_LOG_TYPE_INFO, "%s Applying operation %{public}@ to %{public}@ with state %d", v23, 0x26u);
  }
  if (v8 == 2)
  {
    id v15 = v5;
    id v16 = v6;
    id v17 = (objc_class *)objc_opt_class();
    id v18 = NSStringFromClass(v17);
    *(void *)uint64_t v23 = MEMORY[0x263EF8330];
    *(void *)&v23[8] = 3221225472;
    *(void *)&v23[16] = __WFToggleBooleanSetting_block_invoke;
    uint64_t v24 = &unk_264E5B198;
    id v26 = v15;
    id v27 = v16;
    id v25 = v18;
    id v19 = v18;
    id v20 = v16;
    id v21 = v15;
    [v21 getStateWithCompletionHandler:v23];

LABEL_13:
    goto LABEL_14;
  }
  if (v8 != 1)
  {
    id v22 = getWFBundledIntentsLogObject();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v23 = 136315138;
      *(void *)&v23[4] = "WFPerformBooleanSettingIntent";
      _os_log_impl(&dword_23C364000, v22, OS_LOG_TYPE_ERROR, "%s Unknown operation!", v23, 0xCu);
    }

    WFSettingsClientError();
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id))v6 + 2))(v6, v21);
    goto LABEL_13;
  }
  [v5 setState:v10 completionHandler:v6];
LABEL_14:
}

void __WFToggleBooleanSetting_block_invoke(uint64_t a1, int a2, void *a3)
{
  v20[2] = *MEMORY[0x263EF8340];
  id v5 = a3;
  if (v5)
  {
    id v6 = getWFBundledIntentsLogObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136315650;
      id v16 = "WFToggleBooleanSetting_block_invoke";
      __int16 v17 = 2114;
      uint64_t v18 = v7;
      __int16 v19 = 2112;
      v20[0] = v5;
      _os_log_impl(&dword_23C364000, v6, OS_LOG_TYPE_ERROR, "%s Failed to get state for toggling %{public}@: %@", buf, 0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    unint64_t v8 = getWFBundledIntentsLogObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136315906;
      id v16 = "WFToggleBooleanSetting_block_invoke";
      __int16 v17 = 2114;
      uint64_t v18 = v9;
      __int16 v19 = 1024;
      LODWORD(v20[0]) = a2;
      WORD2(v20[0]) = 1024;
      *(_DWORD *)((char *)v20 + 6) = a2 ^ 1;
      _os_log_impl(&dword_23C364000, v8, OS_LOG_TYPE_INFO, "%s Toggling %{public}@ from %d to %d", buf, 0x22u);
    }

    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __WFToggleBooleanSetting_block_invoke_205;
    v11[3] = &unk_264E5B170;
    uint64_t v10 = *(void **)(a1 + 40);
    id v12 = *(id *)(a1 + 32);
    char v14 = a2 ^ 1;
    id v13 = *(id *)(a1 + 48);
    [v10 setState:a2 ^ 1u completionHandler:v11];
  }
}

void __WFToggleBooleanSetting_block_invoke_205(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    long long v4 = getWFBundledIntentsLogObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = *(unsigned __int8 *)(a1 + 48);
      int v8 = 136315906;
      uint64_t v9 = "WFToggleBooleanSetting_block_invoke";
      __int16 v10 = 2114;
      uint64_t v11 = v5;
      __int16 v12 = 1024;
      int v13 = v6;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_impl(&dword_23C364000, v4, OS_LOG_TYPE_ERROR, "%s Failed to toggle %{public}@ to %d: %@", (uint8_t *)&v8, 0x26u);
    }

    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v7();
}

id WFTodoistErrorFromResponseObject(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
    id v3 = [v2 objectForKeyedSubscript:@"error_code"];
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = WFEnforceClass(v3, v4);

    if (v5)
    {
      int v6 = objc_opt_new();
      uint64_t v7 = [v2 objectForKeyedSubscript:@"error"];
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = WFEnforceClass(v7, v8);

      if (v9) {
        [v6 setObject:v9 forKey:*MEMORY[0x263F08320]];
      }
      __int16 v10 = [v2 objectForKeyedSubscript:@"error_extra"];
      uint64_t v11 = objc_opt_class();
      __int16 v12 = WFEnforceClass(v10, v11);

      if (v12) {
        [v6 addEntriesFromDictionary:v12];
      }
      int v13 = objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"WFTodoistErrorDomain", objc_msgSend(v5, "integerValue"), v6);
      if ([v13 code] == 32)
      {
        __int16 v14 = [v13 userInfo];
        id v15 = (void *)[v14 mutableCopy];

        [v15 setObject:@"Premium Required" forKey:*MEMORY[0x263F08338]];
        [v15 setObject:@"Adding notes, reminders, and files requires a Todoist premium subscription.", *MEMORY[0x263F08320] forKey];
        uint64_t v16 = (void *)MEMORY[0x263F087E8];
        __int16 v17 = [v13 domain];
        uint64_t v18 = objc_msgSend(v16, "errorWithDomain:code:userInfo:", v17, objc_msgSend(v13, "code"), v15);

        int v13 = (void *)v18;
      }
    }
    else
    {
      int v13 = 0;
    }
  }
  else
  {
    int v13 = 0;
  }

  return v13;
}

void sub_23C64B280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

Class __getPHAssetClass_block_invoke_39825(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_39828)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PhotosLibraryCore_block_invoke_39829;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5B290;
    uint64_t v8 = 0;
    PhotosLibraryCore_frameworkLibrary_39828 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_39828)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSelectPhotoAction.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PHAsset");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPHAssetClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSelectPhotoAction.m", 16, @"Unable to find class %s", "PHAsset");

LABEL_10:
    __break(1u);
  }
  getPHAssetClass_softClass_39824 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PhotosLibraryCore_block_invoke_39829()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_39828 = result;
  return result;
}

Class initEMFEmojiToken()
{
  if (EmojiFoundationLibrary_sOnce != -1) {
    dispatch_once(&EmojiFoundationLibrary_sOnce, &__block_literal_global_39931);
  }
  Class result = objc_getClass("EMFEmojiToken");
  classEMFEmojiTokeint n = (uint64_t)result;
  getEMFEmojiTokenClasunsigned int s = (uint64_t (*)())EMFEmojiTokenFunction;
  return result;
}

id EMFEmojiTokenFunction()
{
  return (id)classEMFEmojiToken;
}

void *__EmojiFoundationLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/EmojiFoundation.framework/EmojiFoundation", 2);
  EmojiFoundationLibrary_sLib = (uint64_t)result;
  return result;
}

Class initEMFEmojiLocaleData()
{
  if (EmojiFoundationLibrary_sOnce != -1) {
    dispatch_once(&EmojiFoundationLibrary_sOnce, &__block_literal_global_39931);
  }
  Class result = objc_getClass("EMFEmojiLocaleData");
  classEMFEmojiLocaleData = (uint64_t)result;
  getEMFEmojiLocaleDataClasunsigned int s = (uint64_t (*)())EMFEmojiLocaleDataFunction;
  return result;
}

id EMFEmojiLocaleDataFunction()
{
  return (id)classEMFEmojiLocaleData;
}

void sub_23C64EA44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __getFPDeleteOperationClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary_40464();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPDeleteOperation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPDeleteOperationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFPDeleteOperationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDefaultFileStorageService.m", 39, @"Unable to find class %s", "FPDeleteOperation");

    __break(1u);
  }
}

void __getFPTrashOperationClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary_40464();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPTrashOperation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPTrashOperationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFPTrashOperationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDefaultFileStorageService.m", 40, @"Unable to find class %s", "FPTrashOperation");

    __break(1u);
  }
}

id getFPItemManagerClass_40461()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getFPItemManagerClass_softClass_40462;
  uint64_t v7 = getFPItemManagerClass_softClass_40462;
  if (!getFPItemManagerClass_softClass_40462)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getFPItemManagerClass_block_invoke_40463;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getFPItemManagerClass_block_invoke_40463((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C64ECCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getFPItemManagerClass_block_invoke_40463(uint64_t a1)
{
  FileProviderLibrary_40464();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPItemManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPItemManagerClass_softClass_40462 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFPItemManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDefaultFileStorageService.m", 37, @"Unable to find class %s", "FPItemManager");

    __break(1u);
  }
}

void *FileProviderLibrary_40464()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!FileProviderLibraryCore_frameworkLibrary_40471)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __FileProviderLibraryCore_block_invoke_40472;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E5B560;
    uint64_t v6 = 0;
    FileProviderLibraryCore_frameworkLibrary_40471 = _sl_dlopen();
  }
  uint64_t v0 = (void *)FileProviderLibraryCore_frameworkLibrary_40471;
  if (!FileProviderLibraryCore_frameworkLibrary_40471)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDefaultFileStorageService.m", 35, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __FileProviderLibraryCore_block_invoke_40472()
{
  uint64_t result = _sl_dlopen();
  FileProviderLibraryCore_frameworkLibrary_40471 = result;
  return result;
}

void sub_23C64F120(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void __getFPRenameOperationClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary_40464();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPRenameOperation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPRenameOperationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFPRenameOperationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDefaultFileStorageService.m", 41, @"Unable to find class %s", "FPRenameOperation");

    __break(1u);
  }
}

void sub_23C64F6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getFPCopyOperationClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary_40464();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPCopyOperation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPCopyOperationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFPCopyOperationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDefaultFileStorageService.m", 43, @"Unable to find class %s", "FPCopyOperation");

    __break(1u);
  }
}

void __getFPMoveOperationClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary_40464();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPMoveOperation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPMoveOperationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFPMoveOperationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDefaultFileStorageService.m", 42, @"Unable to find class %s", "FPMoveOperation");

    __break(1u);
  }
}

void sub_23C64FBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getFPCreateFolderOperationClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary_40464();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPCreateFolderOperation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPCreateFolderOperationClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFPCreateFolderOperationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDefaultFileStorageService.m", 38, @"Unable to find class %s", "FPCreateFolderOperation");

    __break(1u);
  }
}

void sub_23C65001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSFileProviderErrorDomainSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = FileProviderLibrary_40464();
  uint64_t result = dlsym(v2, "NSFileProviderErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSFileProviderErrorDomainSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getNSFileProviderErrorItemKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getNSFileProviderErrorItemKeySymbolLoc_ptr;
  uint64_t v9 = getNSFileProviderErrorItemKeySymbolLoc_ptr;
  if (!getNSFileProviderErrorItemKeySymbolLoc_ptr)
  {
    uint64_t v1 = FileProviderLibrary_40464();
    void v7[3] = (uint64_t)dlsym(v1, "NSFileProviderErrorItemKey");
    getNSFileProviderErrorItemKeySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSErrorUserInfoKey getNSFileProviderErrorItemKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFDefaultFileStorageService.m", 44, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C6501D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getFPItemClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary_40464();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPItemClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getFPItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDefaultFileStorageService.m", 36, @"Unable to find class %s", "FPItem");

    __break(1u);
  }
}

void *__getNSFileProviderErrorItemKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = FileProviderLibrary_40464();
  uint64_t result = dlsym(v2, "NSFileProviderErrorItemKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSFileProviderErrorItemKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C6519D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__40507(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__40508(uint64_t a1)
{
}

void sub_23C65232C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C652964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C652FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 216), 8);
  _Block_object_dispose((const void *)(v40 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_23C6552E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaPlaylistCreationMetadataClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_40888();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaPlaylistCreationMetadata");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaPlaylistCreationMetadataClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaPlaylistCreationMetadataClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCreatePlaylistAction.m", 18, @"Unable to find class %s", "MPMediaPlaylistCreationMetadata");

    __break(1u);
  }
}

void __getMPMediaLibraryClass_block_invoke_40885(uint64_t a1)
{
  MediaPlayerLibrary_40888();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaLibraryClass_softClass_40884 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCreatePlaylistAction.m", 17, @"Unable to find class %s", "MPMediaLibrary");

    __break(1u);
  }
}

void MediaPlayerLibrary_40888()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_40898)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __MediaPlayerLibraryCore_block_invoke_40899;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5B5A0;
    uint64_t v5 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_40898 = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary_40898)
  {
    uint64_t v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFCreatePlaylistAction.m", 16, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __MediaPlayerLibraryCore_block_invoke_40899()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_40898 = result;
  return result;
}

id getMKMapItemClass_40953()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKMapItemClass_softClass_41016;
  uint64_t v7 = getMKMapItemClass_softClass_41016;
  if (!getMKMapItemClass_softClass_41016)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_41017;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getMKMapItemClass_block_invoke_41017((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C655B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void WFGetMapItemFromContentCollection(void *a1, void *a2, void *a3)
{
  v16[2] = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  v16[0] = objc_opt_class();
  v16[1] = objc_opt_class();
  uint64_t v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v16 count:2];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  void v12[2] = __WFGetMapItemFromContentCollection_block_invoke;
  v12[3] = &unk_264E5B610;
  id v14 = v5;
  id v15 = v7;
  id v13 = v6;
  id v9 = v5;
  id v10 = v7;
  id v11 = v6;
  [v9 generateCollectionByCoercingToItemClasses:v8 completionHandler:v12];
}

void __WFGetMapItemFromContentCollection_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = [v7 items];
  id v11 = [v10 firstObject];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v12 = v11;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = __WFGetMapItemFromContentCollection_block_invoke_2;
    v19[3] = &unk_264E5B5C0;
    id v20 = *(id *)(a1 + 32);
    id v21 = *(id *)(a1 + 48);
    uint64_t v23 = 0;
    uint64_t v24 = &v23;
    uint64_t v25 = 0x2050000000;
    id v13 = (void *)getCLPlacemarkClass_softClass_40957;
    uint64_t v26 = getCLPlacemarkClass_softClass_40957;
    if (!getCLPlacemarkClass_softClass_40957)
    {
      v22[0] = MEMORY[0x263EF8330];
      v22[1] = 3221225472;
      v22[2] = __getCLPlacemarkClass_block_invoke_40958;
      v22[3] = &unk_264E5EC88;
      v22[4] = &v23;
      __getCLPlacemarkClass_block_invoke_40958((uint64_t)v22);
      id v13 = (void *)v24[3];
    }
    id v14 = v13;
    _Block_object_dispose(&v23, 8);
    [v12 getObjectRepresentation:v19 forClass:v14];
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v17[0] = MEMORY[0x263EF8330];
      v17[1] = 3221225472;
      v17[2] = __WFGetMapItemFromContentCollection_block_invoke_3;
      v17[3] = &unk_264E5B5E8;
      uint64_t v16 = *(void **)(a1 + 40);
      id v18 = *(id *)(a1 + 48);
      [v16 getStringRepresentation:v17];

      goto LABEL_9;
    }
    uint64_t v15 = *(void *)(a1 + 48);
    id v12 = [v11 mapItem];
    (*(void (**)(uint64_t, id, void))(v15 + 16))(v15, v12, 0);
  }

LABEL_9:
}

void sub_23C655F1C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __WFGetMapItemFromContentCollection_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  v37[2] = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7)
  {
    id v14 = [v9 domain];
    uint64_t v30 = 0;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x2020000000;
    uint64_t v15 = (void *)getkCLErrorDomainSymbolLoc_ptr_40989;
    uint64_t v33 = getkCLErrorDomainSymbolLoc_ptr_40989;
    if (!getkCLErrorDomainSymbolLoc_ptr_40989)
    {
      uint64_t v16 = CoreLocationLibrary_40979();
      v31[3] = (uint64_t)dlsym(v16, "kCLErrorDomain");
      getkCLErrorDomainSymbolLoc_ptr_40989 = v31[3];
      uint64_t v15 = (void *)v31[3];
    }
    _Block_object_dispose(&v30, 8);
    if (!v15)
    {
      uint64_t v28 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v29 = [NSString stringWithUTF8String:"NSString *getkCLErrorDomain(void)"];
      objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, @"WFGetTravelTimeAction.m", 32, @"%s", dlerror());

      __break(1u);
    }
    int v17 = [v14 isEqualToString:*v15];

    if (v17)
    {
      uint64_t v18 = [v10 code];
      if (v18 == 2)
      {
        uint64_t v26 = (void *)MEMORY[0x263F087E8];
        v34[0] = *MEMORY[0x263F08338];
        id v20 = WFLocalizedString(@"Unable to Determine Location");
        v35[0] = v20;
        v34[1] = *MEMORY[0x263F08320];
        id v27 = NSString;
        id v22 = WFLocalizedString(@"The location specified in the %@ action could not be determined due to a network error.");
        uint64_t v23 = objc_msgSend(v27, "localizedStringWithFormat:", v22, *(void *)(a1 + 32));
        v35[1] = v23;
        uint64_t v24 = [NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:2];
        uint64_t v25 = [v26 errorWithDomain:*MEMORY[0x263F870B8] code:6 userInfo:v24];
        goto LABEL_12;
      }
      if (v18 == 8)
      {
        __int16 v19 = (void *)MEMORY[0x263F087E8];
        v36[0] = *MEMORY[0x263F08338];
        id v20 = WFLocalizedString(@"Invalid Location");
        v37[0] = v20;
        v36[1] = *MEMORY[0x263F08320];
        id v21 = NSString;
        id v22 = WFLocalizedString(@"The location specified in the %@ action could not be found.");
        uint64_t v23 = objc_msgSend(v21, "localizedStringWithFormat:", v22, *(void *)(a1 + 32));
        v37[1] = v23;
        uint64_t v24 = [NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:2];
        uint64_t v25 = [v19 errorWithDomain:*MEMORY[0x263F870B8] code:6 userInfo:v24];
LABEL_12:
        id v13 = (void *)v25;

        goto LABEL_13;
      }
    }
    id v13 = v10;
LABEL_13:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_14;
  }
  id v11 = (void *)[objc_alloc((Class)getMKPlacemarkClass()) initWithPlacemark:v7];
  id v12 = (void *)[objc_alloc((Class)getMKMapItemClass_40953()) initWithPlacemark:v11];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

  id v13 = v10;
LABEL_14:
}

void sub_23C65633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLPlacemarkClass_block_invoke_40958(uint64_t a1)
{
  CoreLocationLibrary_40979();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLPlacemarkClass_softClass_40957 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetTravelTimeAction.m", 31, @"Unable to find class %s", "CLPlacemark");

    __break(1u);
  }
}

void __WFGetMapItemFromContentCollection_block_invoke_3(uint64_t a1, void *a2)
{
}

void WFGetMapItemFromString(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 length])
  {
    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x2050000000;
    id v5 = (void *)getCLGeocoderClass_softClass_40959;
    uint64_t v14 = getCLGeocoderClass_softClass_40959;
    if (!getCLGeocoderClass_softClass_40959)
    {
      v10[0] = MEMORY[0x263EF8330];
      v10[1] = 3221225472;
      void v10[2] = __getCLGeocoderClass_block_invoke_40960;
      _OWORD v10[3] = &unk_264E5EC88;
      void v10[4] = &v11;
      __getCLGeocoderClass_block_invoke_40960((uint64_t)v10);
      id v5 = (void *)v12[3];
    }
    id v6 = v5;
    _Block_object_dispose(&v11, 8);
    id v7 = objc_opt_new();
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = __WFGetMapItemFromString_block_invoke;
    _OWORD v8[3] = &unk_264E5CE88;
    id v9 = v4;
    [v7 geocodeAddressString:v3 completionHandler:v8];
  }
  else
  {
    (*((void (**)(id, void, void))v4 + 2))(v4, 0, 0);
  }
}

void sub_23C6565A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __getCLGeocoderClass_block_invoke_40960(uint64_t a1)
{
  CoreLocationLibrary_40979();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLGeocoder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLGeocoderClass_softClass_40959 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLGeocoderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetTravelTimeAction.m", 30, @"Unable to find class %s", "CLGeocoder");

    __break(1u);
  }
}

void __WFGetMapItemFromString_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if ([v10 count])
  {
    id v6 = objc_alloc((Class)getMKPlacemarkClass());
    id v7 = [v10 firstObject];
    id v8 = (void *)[v6 initWithPlacemark:v7];

    id v9 = (void *)[objc_alloc((Class)getMKMapItemClass_40953()) initWithPlacemark:v8];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id getMKPlacemarkClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKPlacemarkClass_softClass;
  uint64_t v7 = getMKPlacemarkClass_softClass;
  if (!getMKPlacemarkClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKPlacemarkClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getMKPlacemarkClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C65683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKPlacemarkClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_40961();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKPlacemarkClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetTravelTimeAction.m", 23, @"Unable to find class %s", "MKPlacemark");

    __break(1u);
  }
}

void *MapKitLibrary_40961()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_40971)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __MapKitLibraryCore_block_invoke_40972;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E5B720;
    uint64_t v6 = 0;
    MapKitLibraryCore_frameworkLibrary_40971 = _sl_dlopen();
  }
  uint64_t v0 = (void *)MapKitLibraryCore_frameworkLibrary_40971;
  if (!MapKitLibraryCore_frameworkLibrary_40971)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetTravelTimeAction.m", 21, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MapKitLibraryCore_block_invoke_40972()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_40971 = result;
  return result;
}

void *CoreLocationLibrary_40979()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_40982)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke_40983;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E5B738;
    uint64_t v6 = 0;
    CoreLocationLibraryCore_frameworkLibrary_40982 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_40982;
  if (!CoreLocationLibraryCore_frameworkLibrary_40982)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetTravelTimeAction.m", 29, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreLocationLibraryCore_block_invoke_40983()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_40982 = result;
  return result;
}

void *__getkCLErrorDomainSymbolLoc_block_invoke_40990(uint64_t a1)
{
  id v2 = CoreLocationLibrary_40979();
  uint64_t result = dlsym(v2, "kCLErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCLErrorDomainSymbolLoc_ptr_40989 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getMKMapItemClass_block_invoke_41017(uint64_t a1)
{
  MapKitLibrary_40961();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKMapItemClass_softClass_41016 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetTravelTimeAction.m", 24, @"Unable to find class %s", "MKMapItem");

    __break(1u);
  }
}

void WFGetTravelTime(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  id v9 = a2;
  id v10 = a1;
  uint64_t v11 = [getMKLocationManagerClass() sharedLocationManager];
  [v11 setContinuesWhileInactive:1];

  id v12 = [getMKLocationManagerClass() sharedLocationManager];
  WFSetEffectiveBundleForMKLocationManager();

  getMKDirectionsRequestClass();
  uint64_t v13 = objc_opt_new();
  [v13 setSource:v10];

  [v13 setDestination:v9];
  [v13 setTransportType:a3];
  uint64_t v14 = (void *)[objc_alloc((Class)getMKDirectionsClass()) initWithRequest:v13];
  uint64_t v15 = WFCLInUseAssertionWithOptions();
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = __WFGetTravelTime_block_invoke;
  v18[3] = &unk_264E5B638;
  id v19 = v15;
  id v20 = v8;
  id v16 = v15;
  id v17 = v8;
  [v14 calculateETAWithCompletionHandler:v18];
}

void WFGetTravelTimeWithTripInfo(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  id v9 = a2;
  id v10 = a1;
  uint64_t v11 = [getMKLocationManagerClass() sharedLocationManager];
  [v11 setContinuesWhileInactive:1];

  id v12 = [getMKLocationManagerClass() sharedLocationManager];
  WFSetEffectiveBundleForMKLocationManager();

  getMKDirectionsRequestClass();
  uint64_t v13 = objc_opt_new();
  [v13 setSource:v10];

  [v13 setDestination:v9];
  [v13 setTransportType:a3];
  uint64_t v14 = (void *)[objc_alloc((Class)getMKDirectionsClass()) initWithRequest:v13];
  uint64_t v15 = WFCLInUseAssertionWithOptions();
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = __WFGetTravelTimeWithTripInfo_block_invoke;
  v18[3] = &unk_264E5B660;
  id v19 = v15;
  id v20 = v8;
  id v16 = v15;
  id v17 = v8;
  [v14 calculateDirectionsWithCompletionHandler:v18];
}

id getMKLocationManagerClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKLocationManagerClass_softClass;
  uint64_t v7 = getMKLocationManagerClass_softClass;
  if (!getMKLocationManagerClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKLocationManagerClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getMKLocationManagerClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C6578CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMKDirectionsRequestClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKDirectionsRequestClass_softClass;
  uint64_t v7 = getMKDirectionsRequestClass_softClass;
  if (!getMKDirectionsRequestClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKDirectionsRequestClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getMKDirectionsRequestClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C6579B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMKDirectionsClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKDirectionsClass_softClass;
  uint64_t v7 = getMKDirectionsClass_softClass;
  if (!getMKDirectionsClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKDirectionsClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getMKDirectionsClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C657A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __WFGetTravelTimeWithTripInfo_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  if (v10)
  {
    id v5 = objc_alloc(MEMORY[0x263F339B8]);
    uint64_t v6 = [v10 routes];
    uint64_t v7 = [v6 firstObject];
    id v8 = (void *)[v5 initWithMKRoute:v7];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    [*(id *)(a1 + 32) invalidate];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    id v8 = WFLocalizedMapKitError(a3);
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v8);
  }
}

id WFLocalizedMapKitError(void *a1)
{
  v32[5] = *MEMORY[0x263EF8340];
  id v1 = a1;
  id v2 = v1;
  if (!v1) {
    goto LABEL_8;
  }
  id v3 = [v1 domain];
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  uint64_t v4 = (void *)getMKErrorDomainSymbolLoc_ptr_41045;
  uint64_t v28 = getMKErrorDomainSymbolLoc_ptr_41045;
  if (!getMKErrorDomainSymbolLoc_ptr_41045)
  {
    id v5 = MapKitLibrary_40961();
    v26[3] = (uint64_t)dlsym(v5, "MKErrorDomain");
    getMKErrorDomainSymbolLoc_ptr_41045 = v26[3];
    uint64_t v4 = (void *)v26[3];
  }
  _Block_object_dispose(&v25, 8);
  if (!v4)
  {
    uint64_t v23 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v24 = [NSString stringWithUTF8String:"NSErrorDomain getMKErrorDomain(void)"];
    objc_msgSend(v23, "handleFailureInFunction:file:lineNumber:description:", v24, @"WFGetTravelTimeAction.m", 22, @"%s", dlerror());

    __break(1u);
  }
  char v6 = [v3 isEqualToString:*v4];

  if (v6)
  {
    v31[0] = &unk_26F0763E0;
    uint64_t v7 = WFLocalizedString(@"An unknown mapping error occurred.");
    v32[0] = v7;
    v31[1] = &unk_26F0763F8;
    id v8 = WFLocalizedString(@"The map server was unable to return the desired information");
    v32[1] = v8;
    v31[2] = &unk_26F076410;
    uint64_t v9 = WFLocalizedString(@"The data was not loaded because data throttling is in effect. This can occur when making frequent requests for data over a short period of time.");
    v32[2] = v9;
    v31[3] = &unk_26F076428;
    id v10 = WFLocalizedString(@"The specified placemark could not be found.");
    v32[3] = v10;
    v31[4] = &unk_26F076440;
    uint64_t v11 = WFLocalizedString(@"The specified directions could not be found.");
    v32[4] = v11;
    id v12 = [NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:5];

    uint64_t v13 = [v2 code];
    uint64_t v14 = [NSNumber numberWithUnsignedInteger:v13];
    uint64_t v15 = [v12 objectForKey:v14];
    LODWORD(v10) = v15 == 0;

    if (v10)
    {
      id v21 = v2;
    }
    else
    {
      id v16 = (void *)MEMORY[0x263F087E8];
      id v17 = [v2 domain];
      uint64_t v29 = *MEMORY[0x263F08320];
      uint64_t v18 = [NSNumber numberWithUnsignedInteger:v13];
      id v19 = [v12 objectForKey:v18];
      uint64_t v30 = v19;
      id v20 = [NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
      id v21 = [v16 errorWithDomain:v17 code:v13 userInfo:v20];
    }
  }
  else
  {
LABEL_8:
    id v21 = v2;
  }

  return v21;
}

void sub_23C657F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMKErrorDomainSymbolLoc_block_invoke_41046(uint64_t a1)
{
  id v2 = MapKitLibrary_40961();
  uint64_t result = dlsym(v2, "MKErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKErrorDomainSymbolLoc_ptr_41045 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getMKDirectionsClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_40961();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKDirections");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKDirectionsClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKDirectionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetTravelTimeAction.m", 27, @"Unable to find class %s", "MKDirections");

    __break(1u);
  }
}

void __getMKDirectionsRequestClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_40961();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKDirectionsRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKDirectionsRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKDirectionsRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetTravelTimeAction.m", 26, @"Unable to find class %s", "MKDirectionsRequest");

    __break(1u);
  }
}

void __getMKLocationManagerClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_40961();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocationManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKLocationManagerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKLocationManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFGetTravelTimeAction.m", 25, @"Unable to find class %s", "MKLocationManager");

    __break(1u);
  }
}

void __WFGetTravelTime_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v12 = v5;
  if (v5)
  {
    [v5 expectedTravelTime];
    [v12 distance];
    double v7 = v6;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = WFTimeIntervalFromExpectedTravelTime();
    (*(void (**)(uint64_t, void *, void, double))(v8 + 16))(v8, v9, 0, v7);

    [*(id *)(a1 + 32) invalidate];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = WFLocalizedMapKitError(a3);
    (*(void (**)(uint64_t, void, void *, double))(v10 + 16))(v10, 0, v11, 0.0);
  }
}

void WFGetTravelTimeFromCurrentLocation(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = a1;
  id v9 = [getMKMapItemClass_40953() mapItemForCurrentLocation];
  WFGetTravelTime(v9, v8, a2, a3, v7);
}

void WFGetTravelTimeFromCurrentLocationWithTripInfo(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = a1;
  id v9 = [getMKMapItemClass_40953() mapItemForCurrentLocation];
  WFGetTravelTimeWithTripInfo(v9, v8, a2, a3, v7);
}

void sub_23C65A4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBKSDisplayBrightnessIsBrightnessLevelControlAvailableSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BackBoardServicesLibrary();
  uint64_t result = dlsym(v2, "BKSDisplayBrightnessIsBrightnessLevelControlAvailable");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBKSDisplayBrightnessIsBrightnessLevelControlAvailableSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                       + 24);
  return result;
}

void *BackBoardServicesLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!BackBoardServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __BackBoardServicesLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E5B7C8;
    uint64_t v6 = 0;
    BackBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)BackBoardServicesLibraryCore_frameworkLibrary;
  if (!BackBoardServicesLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *BackBoardServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFBrightnessSettingsClient.m", 17, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getBKSDisplayBrightnessTransactionCreateSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BackBoardServicesLibrary();
  uint64_t result = dlsym(v2, "BKSDisplayBrightnessTransactionCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBKSDisplayBrightnessTransactionCreateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBKSDisplayBrightnessSetSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BackBoardServicesLibrary();
  uint64_t result = dlsym(v2, "BKSDisplayBrightnessSet");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBKSDisplayBrightnessSetSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BackBoardServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BackBoardServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C65A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBKSDisplayBrightnessGetCurrentSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BackBoardServicesLibrary();
  uint64_t result = dlsym(v2, "BKSDisplayBrightnessGetCurrent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBKSDisplayBrightnessGetCurrentSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id getAVAudioSessionClass_42015()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVAudioSessionClass_softClass_42016;
  uint64_t v7 = getAVAudioSessionClass_softClass_42016;
  if (!getAVAudioSessionClass_softClass_42016)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVAudioSessionClass_block_invoke_42017;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getAVAudioSessionClass_block_invoke_42017((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C65DB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVAudioSessionClass_block_invoke_42017(uint64_t a1)
{
  AVFoundationLibrary_42018();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioSessionClass_softClass_42016 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAudioSessionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaySoundAction.m", 16, @"Unable to find class %s", "AVAudioSession");

    __break(1u);
  }
}

void *AVFoundationLibrary_42018()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_42029)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_42030;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E5B928;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_42029 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_42029;
  if (!AVFoundationLibraryCore_frameworkLibrary_42029)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaySoundAction.m", 15, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke_42030()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_42029 = result;
  return result;
}

void sub_23C65E4A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void getAVAudioSessionCategoryPlayback_42040()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVAudioSessionCategoryPlaybackSymbolLoc_ptr_42056;
  uint64_t v9 = getAVAudioSessionCategoryPlaybackSymbolLoc_ptr_42056;
  if (!getAVAudioSessionCategoryPlaybackSymbolLoc_ptr_42056)
  {
    uint64_t v1 = AVFoundationLibrary_42018();
    void v7[3] = (uint64_t)dlsym(v1, "AVAudioSessionCategoryPlayback");
    getAVAudioSessionCategoryPlaybackSymbolLoc_ptr_42056 = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"AVAudioSessionCategory getAVAudioSessionCategoryPlayback(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPlaySoundAction.m", 19, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C65E61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVAudioSessionModeDefaultSymbolLoc_block_invoke_42042(uint64_t a1)
{
  id v2 = AVFoundationLibrary_42018();
  uint64_t result = dlsym(v2, "AVAudioSessionModeDefault");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAudioSessionModeDefaultSymbolLoc_ptr_42041 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVAudioPlayerClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_42018();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioPlayer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioPlayerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAudioPlayerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPlaySoundAction.m", 17, @"Unable to find class %s", "AVAudioPlayer");

    __break(1u);
  }
}

void *__getAVAudioSessionCategoryPlaybackSymbolLoc_block_invoke_42057(uint64_t a1)
{
  id v2 = AVFoundationLibrary_42018();
  uint64_t result = dlsym(v2, "AVAudioSessionCategoryPlayback");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAudioSessionCategoryPlaybackSymbolLoc_ptr_42056 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C65F758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C65FE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42371(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42372(uint64_t a1)
{
}

void sub_23C660CA8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getPHPhotoLibraryClass_block_invoke_42472(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_42473)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PhotosLibraryCore_block_invoke_42474;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5BA10;
    uint64_t v8 = 0;
    PhotosLibraryCore_frameworkLibrary_42473 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_42473)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFPhotoAccessResource.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PHPhotoLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getPHPhotoLibraryClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPhotoAccessResource.m", 16, @"Unable to find class %s", "PHPhotoLibrary");

LABEL_10:
    __break(1u);
  }
  getPHPhotoLibraryClass_softClass_42471 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PhotosLibraryCore_block_invoke_42474()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_42473 = result;
  return result;
}

id WFiTunesPodcastObjectsFromDatabaseShows(void *a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  _OWORD v7[2] = __WFiTunesPodcastObjectsFromDatabaseShows_block_invoke;
  void v7[3] = &unk_264E5BB38;
  id v8 = v3;
  id v4 = v3;
  long long v5 = objc_msgSend(a1, "if_compactMap:", v7);

  return v5;
}

id __WFiTunesPodcastObjectsFromDatabaseShows_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 storeId];
  if (v4)
  {
    long long v5 = [*(id *)(a1 + 32) objectMatchingKey:@"identifier" value:v4];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      goto LABEL_5;
    }
  }
  id v6 = objc_alloc(MEMORY[0x263F87068]);
  long long v7 = [v3 title];
  id v8 = [v3 uuid];
  uint64_t v9 = [v3 feedURL];
  long long v5 = (void *)[v6 initWithName:v7 identifier:v4 podcastUUID:v8 feedURL:v9 kind:*MEMORY[0x263F87728]];

LABEL_5:
  return v5;
}

void sub_23C662A14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

Class __getPRSServiceClass_block_invoke_42745(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_42747)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PosterBoardServicesLibraryCore_block_invoke_42748;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5BBD0;
    uint64_t v8 = 0;
    PosterBoardServicesLibraryCore_frameworkLibrary_42747 = _sl_dlopen();
  }
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_42747)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *PosterBoardServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSwitchPosterAction.m", 20, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PRSService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getPRSServiceClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSwitchPosterAction.m", 21, @"Unable to find class %s", "PRSService");

LABEL_10:
    __break(1u);
  }
  getPRSServiceClass_softClass_42744 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PosterBoardServicesLibraryCore_block_invoke_42748()
{
  uint64_t result = _sl_dlopen();
  PosterBoardServicesLibraryCore_frameworkLibrary_42747 = result;
  return result;
}

void __WFIntentsSupportedExcludingShareExtensions_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (([a2 isEqualToString:@"com.apple.share-services"] & 1) == 0) {
    [*(id *)(a1 + 32) unionSet:v5];
  }
}

Class initWFAttribution()
{
  if (WeatherFoundationLibrary_sOnce != -1) {
    dispatch_once(&WeatherFoundationLibrary_sOnce, &__block_literal_global_43013);
  }
  Class result = objc_getClass("WFAttribution");
  classWFAttributioint n = (uint64_t)result;
  getWFAttributionClasunsigned int s = (uint64_t (*)())WFAttributionFunction;
  return result;
}

id WFAttributionFunction()
{
  return (id)classWFAttribution;
}

void *__WeatherFoundationLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/WeatherFoundation.framework/WeatherFoundation", 2);
  WeatherFoundationLibrary_sLib = (uint64_t)result;
  return result;
}

void sub_23C665BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPHAssetClass_block_invoke_43030(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_43033)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PhotosLibraryCore_block_invoke_43034;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5BE00;
    uint64_t v8 = 0;
    PhotosLibraryCore_frameworkLibrary_43033 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_43033)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFDeletePhotosAction.m", 16, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PHAsset");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getPHAssetClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFDeletePhotosAction.m", 17, @"Unable to find class %s", "PHAsset");

LABEL_10:
    __break(1u);
  }
  getPHAssetClass_softClass_43029 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PhotosLibraryCore_block_invoke_43034()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_43033 = result;
  return result;
}

void sub_23C665FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPMediaItemCollectionClass_block_invoke_43075(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_43076)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaPlayerLibraryCore_block_invoke_43077;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5BE40;
    uint64_t v8 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_43076 = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary_43076)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSelectMusicAction.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPMediaItemCollection");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getMPMediaItemCollectionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSelectMusicAction.m", 16, @"Unable to find class %s", "MPMediaItemCollection");

LABEL_10:
    __break(1u);
  }
  getMPMediaItemCollectionClass_softClass_43074 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_43077()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_43076 = result;
  return result;
}

Class initUIPasteboard_43229()
{
  if (UIKitLibrary_sOnce_43230 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_43230, &__block_literal_global_43231);
  }
  Class result = objc_getClass("UIPasteboard");
  classUIPasteboard_43233 = (uint64_t)result;
  getUIPasteboardClass_43226 = (uint64_t (*)())UIPasteboardFunction_43235;
  return result;
}

id UIPasteboardFunction_43235()
{
  return (id)classUIPasteboard_43233;
}

void *__UIKitLibrary_block_invoke_43238()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_43240 = (uint64_t)result;
  return result;
}

Class initUIDevice()
{
  if (UIKitLibrary_sOnce_43273 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_43273, &__block_literal_global_43274);
  }
  Class result = objc_getClass("UIDevice");
  classUIDevice = (uint64_t)result;
  getUIDeviceClasunsigned int s = (uint64_t (*)())UIDeviceFunction;
  return result;
}

id UIDeviceFunction()
{
  return (id)classUIDevice;
}

void *__UIKitLibrary_block_invoke_43278()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_43280 = (uint64_t)result;
  return result;
}

id WFAllPossibleMediaTypes()
{
  v6[9] = *MEMORY[0x263EF8340];
  uint64_t v0 = *MEMORY[0x263F876F0];
  v6[0] = *MEMORY[0x263F876E8];
  v6[1] = v0;
  uint64_t v1 = *MEMORY[0x263F876E0];
  v6[2] = *MEMORY[0x263F876F8];
  v6[3] = v1;
  uint64_t v2 = *MEMORY[0x263F87718];
  void v6[4] = *MEMORY[0x263F87708];
  v6[5] = v2;
  uint64_t v3 = *MEMORY[0x263F87720];
  v6[6] = *MEMORY[0x263F87710];
  v6[7] = v3;
  v6[8] = *MEMORY[0x263F876D8];
  id v4 = [MEMORY[0x263EFF8C0] arrayWithObjects:v6 count:9];
  return v4;
}

id WFSerializedNameForMediaType(void *a1)
{
  uint64_t v1 = WFSerializedNameForMediaType_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&WFSerializedNameForMediaType_onceToken, &__block_literal_global_418);
  }
  uint64_t v3 = [(id)WFSerializedNameForMediaType_mapping objectForKeyedSubscript:v2];

  return v3;
}

id WFLocalizedNameForMediaType(void *a1)
{
  uint64_t v1 = WFLocalizedNameForMediaType_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&WFLocalizedNameForMediaType_onceToken, &__block_literal_global_429);
  }
  uint64_t v3 = [(id)WFLocalizedNameForMediaType_mapping objectForKeyedSubscript:v2];

  return v3;
}

id WFEntityTypesForMediaType(void *a1)
{
  uint64_t v1 = WFEntityTypesForMediaType_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&WFEntityTypesForMediaType_onceToken, &__block_literal_global_369);
  }
  uint64_t v3 = [(id)WFEntityTypesForMediaType_mapping objectForKeyedSubscript:v2];

  return v3;
}

id WFSerializedNameForEntityType(void *a1)
{
  uint64_t v1 = WFSerializedNameForEntityType_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&WFSerializedNameForEntityType_onceToken, &__block_literal_global_371);
  }
  uint64_t v3 = [(id)WFSerializedNameForEntityType_mapping objectForKeyedSubscript:v2];

  return v3;
}

id WFLocalizedNameForEntityType(void *a1)
{
  uint64_t v1 = WFLocalizedNameForEntityType_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&WFLocalizedNameForEntityType_onceToken, &__block_literal_global_494_43810);
  }
  uint64_t v3 = [(id)WFLocalizedNameForEntityType_mapping objectForKeyedSubscript:v2];

  return v3;
}

id WFAttributesForMediaType(void *a1)
{
  v7[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = WFAttributesForMediaType_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&WFAttributesForMediaType_onceToken, &__block_literal_global_367);
  }
  v7[0] = @"productID";
  uint64_t v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v7 count:1];
  id v4 = [(id)WFAttributesForMediaType_mapping objectForKeyedSubscript:v2];

  id v5 = [v3 arrayByAddingObjectsFromArray:v4];

  return v5;
}

id WFSerializedNameForAttribute(void *a1)
{
  uint64_t v1 = WFSerializedNameForAttribute_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&WFSerializedNameForAttribute_onceToken, &__block_literal_global_289_43805);
  }
  uint64_t v3 = [(id)WFSerializedNameForAttribute_mapping objectForKeyedSubscript:v2];

  return v3;
}

id WFLocalizedNameForAttribute(void *a1)
{
  uint64_t v1 = WFLocalizedNameForAttribute_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&WFLocalizedNameForAttribute_onceToken, &__block_literal_global_622);
  }
  uint64_t v3 = [(id)WFLocalizedNameForAttribute_mapping objectForKeyedSubscript:v2];

  return v3;
}

void __WFLocalizedNameForAttribute_block_invoke()
{
  v31[28] = *MEMORY[0x263EF8340];
  v30[0] = @"productID";
  uint64_t v29 = WFLocalizedStringWithKey(@"Product ID (Attribute)", @"Product ID");
  v31[0] = v29;
  v30[1] = *MEMORY[0x263F87560];
  uint64_t v28 = WFLocalizedStringWithKey(@"Actor (Attribute)", @"Actor");
  v31[1] = v28;
  v30[2] = *MEMORY[0x263F87598];
  uint64_t v27 = WFLocalizedStringWithKey(@"Description (Attribute)", @"Description");
  v31[2] = v27;
  v30[3] = *MEMORY[0x263F87628];
  uint64_t v26 = WFLocalizedStringWithKey(@"Title (Attribute)", @"Title");
  v31[3] = v26;
  v30[4] = *MEMORY[0x263F875D0];
  uint64_t v25 = WFLocalizedStringWithKey(@"Movie Artist (Attribute)", @"Artist");
  v31[4] = v25;
  v30[5] = *MEMORY[0x263F87570];
  uint64_t v24 = WFLocalizedStringWithKey(@"All Artist (Attribute)", @"Artist");
  void v31[5] = v24;
  v30[6] = *MEMORY[0x263F87578];
  uint64_t v23 = WFLocalizedStringWithKey(@"Track (Attribute)", @"Track");
  v31[6] = v23;
  v30[7] = *MEMORY[0x263F875A0];
  id v22 = WFLocalizedStringWithKey(@"Director (Attribute)", @"Director");
  v31[7] = v22;
  v30[8] = *MEMORY[0x263F875C0];
  id v21 = WFLocalizedStringWithKey(@"Language (Attribute)", @"Language");
  v31[8] = v21;
  v30[9] = *MEMORY[0x263F87620];
  id v20 = WFLocalizedStringWithKey(@"Season (Attribute)", @"Season");
  v31[9] = v20;
  v30[10] = *MEMORY[0x263F875D8];
  id v19 = WFLocalizedStringWithKey(@"Producer (Attribute)", @"Producer");
  v31[10] = v19;
  v30[11] = *MEMORY[0x263F87610];
  uint64_t v18 = WFLocalizedStringWithKey(@"Song (Attribute)", @"Song");
  v31[11] = v18;
  v30[12] = *MEMORY[0x263F87568];
  id v17 = WFLocalizedStringWithKey(@"Album (Attribute)", @"Album");
  v31[12] = v17;
  v30[13] = *MEMORY[0x263F875E0];
  id v16 = WFLocalizedStringWithKey(@"Rating (Attribute)", @"Rating");
  v31[13] = v16;
  v30[14] = *MEMORY[0x263F875B0];
  uint64_t v15 = WFLocalizedStringWithKey(@"Genre (Attribute)", @"Genre");
  v31[14] = v15;
  v30[15] = *MEMORY[0x263F875C8];
  uint64_t v14 = WFLocalizedStringWithKey(@"Movie (Attribute)", @"Movie");
  v31[15] = v14;
  v30[16] = *MEMORY[0x263F87588];
  uint64_t v13 = WFLocalizedStringWithKey(@"Author (Attribute)", @"Author");
  v31[16] = v13;
  v30[17] = *MEMORY[0x263F875B8];
  id v12 = WFLocalizedStringWithKey(@"Keywords (Attribute)", @"Keywords");
  v31[17] = v12;
  v30[18] = *MEMORY[0x263F875F0];
  uint64_t v0 = WFLocalizedStringWithKey(@"Release Year (Attribute)", @"Release Year");
  v31[18] = v0;
  v30[19] = *MEMORY[0x263F875E8];
  uint64_t v1 = WFLocalizedStringWithKey(@"Rating Index (Attribute)", @"Rating Index");
  v31[19] = v1;
  v30[20] = *MEMORY[0x263F87600];
  id v2 = WFLocalizedStringWithKey(@"Show (Attribute)", @"Show");
  v31[20] = v2;
  v30[21] = *MEMORY[0x263F87580];
  uint64_t v3 = WFLocalizedStringWithKey(@"Artist (Attribute)", @"Artist");
  v31[21] = v3;
  v30[22] = *MEMORY[0x263F875F8];
  id v4 = WFLocalizedStringWithKey(@"Short Film (Attribute)", @"Short Film");
  v31[22] = v4;
  v30[23] = *MEMORY[0x263F87590];
  id v5 = WFLocalizedStringWithKey(@"Composer (Attribute)", @"Composer");
  v31[23] = v5;
  v30[24] = *MEMORY[0x263F87618];
  id v6 = WFLocalizedStringWithKey(@"Episode (Attribute)", @"Episode");
  v31[24] = v6;
  v30[25] = *MEMORY[0x263F87608];
  long long v7 = WFLocalizedStringWithKey(@"Developer (Attribute)", @"Developer");
  v31[25] = v7;
  v30[26] = *MEMORY[0x263F875A8];
  uint64_t v8 = WFLocalizedStringWithKey(@"Feature Film (Attribute)", @"Feature Film");
  v31[26] = v8;
  v30[27] = @"All";
  uint64_t v9 = WFLocalizedStringWithKey(@"All (Attribute)", @"All");
  v31[27] = v9;
  uint64_t v10 = [NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:28];
  uint64_t v11 = (void *)WFLocalizedNameForAttribute_mapping;
  WFLocalizedNameForAttribute_mapping = v10;
}

void __WFSerializedNameForAttribute_block_invoke()
{
  v16[27] = *MEMORY[0x263EF8340];
  uint64_t v0 = *MEMORY[0x263F87560];
  v15[0] = @"productID";
  v15[1] = v0;
  v16[0] = @"Product ID";
  v16[1] = @"Actor";
  uint64_t v1 = *MEMORY[0x263F87628];
  id v15[2] = *MEMORY[0x263F87598];
  void v15[3] = v1;
  v16[2] = @"Description";
  void v16[3] = @"Title";
  uint64_t v2 = *MEMORY[0x263F87570];
  v15[4] = *MEMORY[0x263F875D0];
  v15[5] = v2;
  v16[4] = @"Artist";
  v16[5] = @"Artist";
  uint64_t v3 = *MEMORY[0x263F875A0];
  v15[6] = *MEMORY[0x263F87578];
  v15[7] = v3;
  v16[6] = @"Track";
  v16[7] = @"Director";
  uint64_t v4 = *MEMORY[0x263F87620];
  v15[8] = *MEMORY[0x263F875C0];
  v15[9] = v4;
  v16[8] = @"Language";
  v16[9] = @"Season";
  uint64_t v5 = *MEMORY[0x263F87610];
  v15[10] = *MEMORY[0x263F875D8];
  v15[11] = v5;
  v16[10] = @"Producer";
  v16[11] = @"Song";
  uint64_t v6 = *MEMORY[0x263F875E0];
  v15[12] = *MEMORY[0x263F87568];
  v15[13] = v6;
  v16[12] = @"Album";
  v16[13] = @"Rating";
  uint64_t v7 = *MEMORY[0x263F875C8];
  v15[14] = *MEMORY[0x263F875B0];
  v15[15] = v7;
  v16[14] = @"Genre";
  v16[15] = @"Movie";
  uint64_t v8 = *MEMORY[0x263F875B8];
  v15[16] = *MEMORY[0x263F87588];
  v15[17] = v8;
  v16[16] = @"Author";
  v16[17] = @"Keywords";
  uint64_t v9 = *MEMORY[0x263F875E8];
  v15[18] = *MEMORY[0x263F875F0];
  v15[19] = v9;
  v16[18] = @"Release Year";
  v16[19] = @"Rating Index";
  uint64_t v10 = *MEMORY[0x263F87580];
  v15[20] = *MEMORY[0x263F87600];
  v15[21] = v10;
  v16[20] = @"Show";
  v16[21] = @"Artist";
  uint64_t v11 = *MEMORY[0x263F87590];
  v15[22] = *MEMORY[0x263F875F8];
  v15[23] = v11;
  v16[22] = @"Short Film";
  v16[23] = @"Composer";
  uint64_t v12 = *MEMORY[0x263F87608];
  v15[24] = *MEMORY[0x263F87618];
  v15[25] = v12;
  v16[24] = @"Episode";
  v16[25] = @"Developer";
  v15[26] = *MEMORY[0x263F875A8];
  v16[26] = @"Feature Film";
  uint64_t v13 = [NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:27];
  uint64_t v14 = (void *)WFSerializedNameForAttribute_mapping;
  WFSerializedNameForAttribute_mapping = v13;
}

void __WFAttributesForMediaType_block_invoke()
{
  v66[10] = *MEMORY[0x263EF8340];
  v65[0] = *MEMORY[0x263F876F0];
  uint64_t v34 = *MEMORY[0x263F87590];
  v61[0] = *MEMORY[0x263F87580];
  uint64_t v0 = v61[0];
  v61[1] = v34;
  uint64_t v1 = *MEMORY[0x263F875E8];
  uint64_t v62 = *MEMORY[0x263F87568];
  uint64_t v2 = v62;
  uint64_t v33 = v62;
  uint64_t v63 = v1;
  uint64_t v64 = *MEMORY[0x263F87610];
  uint64_t v3 = v64;
  uint64_t v32 = v64;
  uint64_t v37 = [MEMORY[0x263EFF8C0] arrayWithObjects:v61 count:5];
  v66[0] = v37;
  v65[1] = *MEMORY[0x263F876F8];
  v60[0] = v0;
  v60[1] = v2;
  v60[2] = v1;
  v60[3] = v3;
  uint64_t v36 = [MEMORY[0x263EFF8C0] arrayWithObjects:v60 count:4];
  v66[1] = v36;
  v65[2] = *MEMORY[0x263F87718];
  uint64_t v31 = *MEMORY[0x263F87600];
  v56[0] = *MEMORY[0x263F87618];
  uint64_t v28 = v56[0];
  v56[1] = v31;
  uint64_t v57 = *MEMORY[0x263F87620];
  uint64_t v29 = v57;
  uint64_t v58 = v1;
  uint64_t v59 = *MEMORY[0x263F87598];
  uint64_t v4 = v59;
  uint64_t v35 = [MEMORY[0x263EFF8C0] arrayWithObjects:v56 count:5];
  v66[2] = v35;
  v65[3] = *MEMORY[0x263F876E8];
  uint64_t v23 = *MEMORY[0x263F87560];
  v47[0] = *MEMORY[0x263F875C8];
  uint64_t v27 = v47[0];
  v47[1] = v23;
  uint64_t v5 = *MEMORY[0x263F875F8];
  v47[2] = v0;
  v47[3] = v5;
  uint64_t v25 = *MEMORY[0x263F875E0];
  uint64_t v48 = *MEMORY[0x263F875D8];
  uint64_t v24 = v48;
  uint64_t v49 = v25;
  uint64_t v20 = *MEMORY[0x263F875F0];
  uint64_t v50 = *MEMORY[0x263F875A0];
  uint64_t v19 = v50;
  uint64_t v51 = v20;
  uint64_t v21 = *MEMORY[0x263F875D0];
  uint64_t v52 = *MEMORY[0x263F875A8];
  uint64_t v18 = v52;
  uint64_t v53 = v21;
  uint64_t v54 = v1;
  uint64_t v55 = v4;
  uint64_t v30 = [MEMORY[0x263EFF8C0] arrayWithObjects:v47 count:12];
  v66[3] = v30;
  v65[4] = *MEMORY[0x263F87708];
  v46[0] = v0;
  v46[1] = v5;
  v46[2] = v1;
  v46[3] = v4;
  uint64_t v26 = [MEMORY[0x263EFF8C0] arrayWithObjects:v46 count:4];
  v66[4] = v26;
  v65[5] = *MEMORY[0x263F87710];
  uint64_t v45 = *MEMORY[0x263F87608];
  id v22 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v45 count:1];
  v66[5] = v22;
  v65[6] = *MEMORY[0x263F87700];
  uint64_t v7 = *MEMORY[0x263F875C0];
  v40[0] = *MEMORY[0x263F87628];
  uint64_t v6 = v40[0];
  v40[1] = v7;
  uint64_t v41 = *MEMORY[0x263F87588];
  uint64_t v8 = v41;
  uint64_t v42 = v1;
  uint64_t v43 = *MEMORY[0x263F875B8];
  uint64_t v9 = v43;
  uint64_t v44 = v4;
  uint64_t v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:v40 count:6];
  v66[6] = v10;
  v65[7] = *MEMORY[0x263F876E0];
  v39[0] = v6;
  v39[1] = v8;
  v39[2] = v1;
  uint64_t v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v39 count:3];
  uint64_t v12 = *MEMORY[0x263F87720];
  v66[7] = v11;
  v66[8] = MEMORY[0x263EFFA68];
  uint64_t v13 = *MEMORY[0x263F876D8];
  v65[8] = v12;
  v65[9] = v13;
  uint64_t v14 = *MEMORY[0x263F87570];
  v38[0] = *MEMORY[0x263F87578];
  v38[1] = v14;
  v38[2] = v23;
  v38[3] = v7;
  v38[4] = v28;
  v38[5] = v5;
  v38[6] = v19;
  v38[7] = v20;
  v38[8] = v6;
  v38[9] = v18;
  v38[10] = v1;
  v38[11] = v9;
  v38[12] = v4;
  v38[13] = v8;
  v38[14] = v0;
  v38[15] = v34;
  v38[16] = v29;
  v38[17] = v24;
  v38[18] = v25;
  v38[19] = v32;
  v38[20] = v21;
  v38[21] = v31;
  v38[22] = v27;
  v38[23] = v33;
  uint64_t v15 = [MEMORY[0x263EFF8C0] arrayWithObjects:v38 count:24];
  v66[9] = v15;
  uint64_t v16 = [NSDictionary dictionaryWithObjects:v66 forKeys:v65 count:10];
  id v17 = (void *)WFAttributesForMediaType_mapping;
  WFAttributesForMediaType_mapping = v16;
}

void __WFLocalizedNameForEntityType_block_invoke()
{
  v24[21] = *MEMORY[0x263EF8340];
  v23[0] = *MEMORY[0x263F87658];
  id v22 = WFLocalizedStringWithKey(@"Movies (Entity Type)", @"Movies");
  v24[0] = v22;
  v23[1] = *MEMORY[0x263F87660];
  uint64_t v21 = WFLocalizedStringWithKey(@"Movie Artists (Entity Type)", @"Artists");
  v24[1] = v21;
  v23[2] = *MEMORY[0x263F87690];
  uint64_t v20 = WFLocalizedStringWithKey(@"Podcasts (Entity Type)", @"Podcasts");
  _OWORD v24[2] = v20;
  v23[3] = *MEMORY[0x263F87698];
  uint64_t v19 = WFLocalizedStringWithKey(@"Podcast Authors (Entity Type)", @"Authors");
  v24[3] = v19;
  v23[4] = *MEMORY[0x263F87670];
  uint64_t v18 = WFLocalizedStringWithKey(@"Music Artists (Entity Type)", @"Artists");
  v24[4] = v18;
  v23[5] = *MEMORY[0x263F87680];
  id v17 = WFLocalizedStringWithKey(@"Music Tracks (Entity Type)", @"Tracks");
  v24[5] = v17;
  v23[6] = *MEMORY[0x263F87668];
  uint64_t v16 = WFLocalizedStringWithKey(@"Albums (Entity Type)", @"Albums");
  v24[6] = v16;
  v23[7] = *MEMORY[0x263F87688];
  uint64_t v15 = WFLocalizedStringWithKey(@"Music Videos (Entity Type)", @"Music Videos");
  v24[7] = v15;
  v23[8] = *MEMORY[0x263F87678];
  uint64_t v14 = WFLocalizedStringWithKey(@"Songs (Entity Type)", @"Songs");
  v24[8] = v14;
  v23[9] = *MEMORY[0x263F87648];
  uint64_t v13 = WFLocalizedStringWithKey(@"Audiobook Authors (Entity Type)", @"Authors");
  v24[9] = v13;
  v23[10] = *MEMORY[0x263F87640];
  uint64_t v12 = WFLocalizedStringWithKey(@"Audiobooks (Entity Type)", @"Audiobooks");
  v24[10] = v12;
  v23[11] = *MEMORY[0x263F876A0];
  uint64_t v0 = WFLocalizedStringWithKey(@"Short Films (Entity Type)", @"Short Films");
  v24[11] = v0;
  v23[12] = *MEMORY[0x263F876A8];
  uint64_t v1 = WFLocalizedStringWithKey(@"Short Film Artists (Entity Type)", @"Artists");
  v24[12] = v1;
  v23[13] = *MEMORY[0x263F876B8];
  uint64_t v2 = WFLocalizedStringWithKey(@"Episodes (Entity Type)", @"Episodes");
  v24[13] = v2;
  v23[14] = *MEMORY[0x263F876C0];
  uint64_t v3 = WFLocalizedStringWithKey(@"Seasons (Entity Type)", @"Seasons");
  v24[14] = v3;
  v23[15] = *MEMORY[0x263F876B0];
  uint64_t v4 = WFLocalizedStringWithKey(@"iPhone (Entity Type)", @"iPhone");
  v24[15] = v4;
  v23[16] = *MEMORY[0x263F876D0];
  uint64_t v5 = WFLocalizedStringWithKey(@"iPad (Entity Type)", @"iPad");
  v24[16] = v5;
  v23[17] = *MEMORY[0x263F87650];
  uint64_t v6 = WFLocalizedStringWithKey(@"Mac (Entity Type)", @"Mac");
  v24[17] = v6;
  v23[18] = *MEMORY[0x263F876C8];
  uint64_t v7 = WFLocalizedStringWithKey(@"Books (Entity Type)", @"Books");
  v24[18] = v7;
  v23[19] = *MEMORY[0x263F87630];
  uint64_t v8 = WFLocalizedStringWithKey(@"Artists (Entity Type)", @"Artists");
  v24[19] = v8;
  v23[20] = *MEMORY[0x263F87638];
  uint64_t v9 = WFLocalizedStringWithKey(@"Tracks (Entity Type)", @"Tracks");
  v24[20] = v9;
  uint64_t v10 = [NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:21];
  uint64_t v11 = (void *)WFLocalizedNameForEntityType_mapping;
  WFLocalizedNameForEntityType_mapping = v10;
}

void __WFSerializedNameForEntityType_block_invoke()
{
  v13[21] = *MEMORY[0x263EF8340];
  uint64_t v0 = *MEMORY[0x263F87660];
  v12[0] = *MEMORY[0x263F87658];
  v12[1] = v0;
  v13[0] = @"Movies";
  v13[1] = @"Artists";
  uint64_t v1 = *MEMORY[0x263F87698];
  void v12[2] = *MEMORY[0x263F87690];
  v12[3] = v1;
  v13[2] = @"Podcasts";
  v13[3] = @"Authors";
  uint64_t v2 = *MEMORY[0x263F87680];
  void v12[4] = *MEMORY[0x263F87670];
  void v12[5] = v2;
  void v13[4] = @"Artists";
  v13[5] = @"Tracks";
  uint64_t v3 = *MEMORY[0x263F87688];
  v12[6] = *MEMORY[0x263F87668];
  v12[7] = v3;
  v13[6] = @"Albums";
  v13[7] = @"Music Videos";
  uint64_t v4 = *MEMORY[0x263F87648];
  v12[8] = *MEMORY[0x263F87678];
  v12[9] = v4;
  v13[8] = @"Songs";
  v13[9] = @"Authors";
  uint64_t v5 = *MEMORY[0x263F876A0];
  v12[10] = *MEMORY[0x263F87640];
  v12[11] = v5;
  v13[10] = @"Audiobooks";
  v13[11] = @"Short Films";
  uint64_t v6 = *MEMORY[0x263F876B8];
  v12[12] = *MEMORY[0x263F876A8];
  v12[13] = v6;
  v13[12] = @"Artists";
  v13[13] = @"Episodes";
  uint64_t v7 = *MEMORY[0x263F876B0];
  v12[14] = *MEMORY[0x263F876C0];
  v12[15] = v7;
  v13[14] = @"Seasons";
  v13[15] = @"iPhone";
  uint64_t v8 = *MEMORY[0x263F87650];
  v12[16] = *MEMORY[0x263F876D0];
  v12[17] = v8;
  v13[16] = @"iPad";
  v13[17] = @"Mac";
  uint64_t v9 = *MEMORY[0x263F87630];
  v12[18] = *MEMORY[0x263F876C8];
  v12[19] = v9;
  v13[18] = @"iBooks";
  v13[19] = @"Artists";
  v12[20] = *MEMORY[0x263F87638];
  v13[20] = @"Tracks";
  uint64_t v10 = [NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:21];
  uint64_t v11 = (void *)WFSerializedNameForEntityType_mapping;
  WFSerializedNameForEntityType_mapping = v10;
}

void __WFEntityTypesForMediaType_block_invoke()
{
  v37[10] = *MEMORY[0x263EF8340];
  v36[0] = *MEMORY[0x263F876F0];
  uint64_t v0 = *MEMORY[0x263F87670];
  v33[0] = *MEMORY[0x263F87678];
  v33[1] = v0;
  uint64_t v1 = *MEMORY[0x263F87688];
  uint64_t v34 = *MEMORY[0x263F87668];
  uint64_t v20 = v34;
  uint64_t v35 = v1;
  uint64_t v23 = [MEMORY[0x263EFF8C0] arrayWithObjects:v33 count:4];
  v37[0] = v23;
  v36[1] = *MEMORY[0x263F876F8];
  v32[0] = v1;
  v32[1] = v0;
  id v22 = [MEMORY[0x263EFF8C0] arrayWithObjects:v32 count:2];
  v37[1] = v22;
  void v36[2] = *MEMORY[0x263F87718];
  uint64_t v17 = *MEMORY[0x263F876C0];
  v31[0] = *MEMORY[0x263F876B8];
  v31[1] = v17;
  uint64_t v21 = [MEMORY[0x263EFF8C0] arrayWithObjects:v31 count:2];
  v37[2] = v21;
  v36[3] = *MEMORY[0x263F876E8];
  uint64_t v3 = *MEMORY[0x263F87660];
  v30[0] = *MEMORY[0x263F87658];
  uint64_t v2 = v30[0];
  v30[1] = v3;
  uint64_t v19 = [MEMORY[0x263EFF8C0] arrayWithObjects:v30 count:2];
  void v37[3] = v19;
  v36[4] = *MEMORY[0x263F87708];
  uint64_t v4 = *MEMORY[0x263F876A8];
  v29[0] = *MEMORY[0x263F876A0];
  v29[1] = v4;
  uint64_t v18 = [MEMORY[0x263EFF8C0] arrayWithObjects:v29 count:2];
  v37[4] = v18;
  v36[5] = *MEMORY[0x263F87710];
  uint64_t v5 = *MEMORY[0x263F876D0];
  v28[0] = *MEMORY[0x263F876B0];
  v28[1] = v5;
  v28[2] = *MEMORY[0x263F87650];
  uint64_t v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v28 count:3];
  v37[5] = v6;
  v36[6] = *MEMORY[0x263F87700];
  uint64_t v8 = *MEMORY[0x263F87698];
  v27[0] = *MEMORY[0x263F87690];
  uint64_t v7 = v27[0];
  v27[1] = v8;
  uint64_t v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v27 count:2];
  v37[6] = v9;
  v36[7] = *MEMORY[0x263F876E0];
  uint64_t v11 = *MEMORY[0x263F87648];
  v26[0] = *MEMORY[0x263F87640];
  uint64_t v10 = v26[0];
  v26[1] = v11;
  uint64_t v12 = [MEMORY[0x263EFF8C0] arrayWithObjects:v26 count:2];
  v37[7] = v12;
  v36[8] = *MEMORY[0x263F87720];
  uint64_t v25 = *MEMORY[0x263F876C8];
  uint64_t v13 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v25 count:1];
  v37[8] = v13;
  v36[9] = *MEMORY[0x263F876D8];
  v24[0] = *MEMORY[0x263F87638];
  v24[1] = v2;
  _OWORD v24[2] = v20;
  v24[3] = v0;
  v24[4] = v7;
  v24[5] = v1;
  v24[6] = v10;
  v24[7] = v17;
  uint64_t v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:v24 count:8];
  v37[9] = v14;
  uint64_t v15 = [NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:10];
  uint64_t v16 = (void *)WFEntityTypesForMediaType_mapping;
  WFEntityTypesForMediaType_mapping = v15;
}

void __WFLocalizedNameForMediaType_block_invoke()
{
  v13[10] = *MEMORY[0x263EF8340];
  v12[0] = *MEMORY[0x263F876E8];
  uint64_t v0 = WFLocalizedStringWithKey(@"Movies (Media Type)", @"Movies");
  v13[0] = v0;
  v12[1] = *MEMORY[0x263F87700];
  uint64_t v1 = WFLocalizedStringWithKey(@"Podcasts (Media Type)", @"Podcasts");
  v13[1] = v1;
  void v12[2] = *MEMORY[0x263F876F0];
  uint64_t v2 = WFLocalizedStringWithKey(@"Music (Media Type)", @"Music");
  v13[2] = v2;
  v12[3] = *MEMORY[0x263F876F8];
  uint64_t v3 = WFLocalizedStringWithKey(@"Music Videos (Media Type)", @"Music Videos");
  v13[3] = v3;
  void v12[4] = *MEMORY[0x263F876E0];
  uint64_t v4 = WFLocalizedStringWithKey(@"Audiobooks (Media Type)", @"Audiobooks");
  void v13[4] = v4;
  void v12[5] = *MEMORY[0x263F87708];
  uint64_t v5 = WFLocalizedStringWithKey(@"Short Films (Media Type)", @"Short Films");
  v13[5] = v5;
  v12[6] = *MEMORY[0x263F87718];
  uint64_t v6 = WFLocalizedStringWithKey(@"TV Shows (Media Type)", @"TV Shows");
  v13[6] = v6;
  v12[7] = *MEMORY[0x263F87710];
  uint64_t v7 = WFLocalizedStringWithKey(@"Apps (Media Type)", @"Apps");
  v13[7] = v7;
  v12[8] = *MEMORY[0x263F87720];
  uint64_t v8 = WFLocalizedStringWithKey(@"Books (Media Type)", @"Books");
  v13[8] = v8;
  v12[9] = *MEMORY[0x263F876D8];
  uint64_t v9 = WFLocalizedStringWithKey(@"All (Media Type)", @"All");
  v13[9] = v9;
  uint64_t v10 = [NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:10];
  uint64_t v11 = (void *)WFLocalizedNameForMediaType_mapping;
  WFLocalizedNameForMediaType_mapping = v10;
}

void __WFSerializedNameForMediaType_block_invoke()
{
  v8[10] = *MEMORY[0x263EF8340];
  uint64_t v0 = *MEMORY[0x263F87700];
  v7[0] = *MEMORY[0x263F876E8];
  v7[1] = v0;
  v8[0] = @"Movies";
  v8[1] = @"Podcasts";
  uint64_t v1 = *MEMORY[0x263F876F8];
  void v7[2] = *MEMORY[0x263F876F0];
  void v7[3] = v1;
  void v8[2] = @"Music";
  _OWORD v8[3] = @"Music Videos";
  uint64_t v2 = *MEMORY[0x263F87708];
  void v7[4] = *MEMORY[0x263F876E0];
  void v7[5] = v2;
  void v8[4] = @"Audiobooks";
  v8[5] = @"Short Films";
  uint64_t v3 = *MEMORY[0x263F87710];
  v7[6] = *MEMORY[0x263F87718];
  v7[7] = v3;
  void v8[6] = @"TV Shows";
  v8[7] = @"Apps";
  uint64_t v4 = *MEMORY[0x263F876D8];
  v7[8] = *MEMORY[0x263F87720];
  v7[9] = v4;
  timeval v8[8] = @"iBooks";
  v8[9] = @"All";
  uint64_t v5 = [NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:10];
  uint64_t v6 = (void *)WFSerializedNameForMediaType_mapping;
  WFSerializedNameForMediaType_mapping = v5;
}

id WFLocalizedString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = WFCurrentBundle();
  uint64_t v3 = [v2 localizedStringForKey:v1 value:v1 table:0];

  return v3;
}

id WFCurrentBundle()
{
  if (WFCurrentBundle_onceToken != -1) {
    dispatch_once(&WFCurrentBundle_onceToken, &__block_literal_global_44140);
  }
  uint64_t v0 = (void *)WFCurrentBundle_bundle;
  return v0;
}

void __WFCurrentBundle_block_invoke()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(&v4, 0, sizeof(v4));
  if (dladdr(WFCurrentBundle, &v4) && v4.dli_fname)
  {
    uint64_t v0 = [objc_alloc(NSURL) initFileURLWithFileSystemRepresentation:v4.dli_fname isDirectory:0 relativeToURL:0];
    id v1 = (void *)_CFBundleCopyBundleURLForExecutableURL();
    uint64_t v2 = [MEMORY[0x263F086E0] bundleWithURL:v1];
    uint64_t v3 = (void *)WFCurrentBundle_bundle;
    WFCurrentBundle_bundle = v2;
  }
  else
  {
    uint64_t v0 = getWFGeneralLogObject();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v6 = "WFCurrentBundle_block_invoke";
      _os_log_impl(&dword_23C364000, v0, OS_LOG_TYPE_ERROR, "%s WFLocalizedString failed to locate current bundle", buf, 0xCu);
    }
  }
}

id WFLocalizedStringWithKey(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = WFCurrentBundle();
  uint64_t v6 = [v5 localizedStringForKey:v4 value:v3 table:0];

  return v6;
}

id WFLocalizedPluralString(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = NSString;
    id v3 = [v1 stringByReplacingOccurrencesOfString:@"\n" withString:@" "];
    id v4 = [v2 stringWithFormat:@"%@ (Pluralization)", v3];

    uint64_t v5 = WFCurrentBundle();
    id v6 = [v5 localizedStringForKey:v4 value:v1 table:0];
  }
  else
  {
    id v6 = v1;
  }

  return v6;
}

id WFLocalizedContentPropertyNameMarker(void *a1)
{
  id v1 = NSString;
  id v2 = a1;
  id v3 = [v1 stringWithFormat:@"%@ (Content Property Name)", v2];
  id v4 = WFDeferrableLocalizedStringWithKey(v3, v2);

  return v4;
}

id WFDeferrableLocalizedStringWithKey(void *a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x263F85250];
  id v4 = a2;
  id v5 = a1;
  id v6 = (void *)[[v3 alloc] initWithString:v4];
  uint64_t v7 = WFCurrentBundle();
  uint64_t v8 = [v7 localizedStringForKey:v5 value:v4 table:0];
  [v6 setLocalizedValue:v8];

  uint64_t v9 = WFLocalizedStringResourceWithKey(v5, v4);

  [v6 setStringResource:v9];
  return v6;
}

id WFLocalizedStringResourceWithKey(void *a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x263F08DB0];
  id v4 = a2;
  id v5 = a1;
  id v6 = [v3 alloc];
  uint64_t v7 = [MEMORY[0x263EFF960] autoupdatingCurrentLocale];
  uint64_t v8 = WFCurrentBundle();
  uint64_t v9 = [v8 bundleURL];
  uint64_t v10 = (void *)[v6 initWithKey:v5 defaultValue:v4 table:0 locale:v7 bundleURL:v9];

  return v10;
}

id WFLocalizedContentPropertyPossibleValueMarker(void *a1)
{
  id v1 = NSString;
  id v2 = a1;
  id v3 = [v1 stringWithFormat:@"%@ (Content Property Possible Value)", v2];
  id v4 = WFDeferrableLocalizedStringWithKey(v3, v2);

  return v4;
}

id WFLocalizedParameterValueMarker(void *a1)
{
  id v1 = NSString;
  id v2 = a1;
  id v3 = [v1 stringWithFormat:@"%@ (Parameter Value)", v2];
  id v4 = WFDeferrableLocalizedStringWithKey(v3, v2);

  return v4;
}

id WFLocalizedParameterValue(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = [v1 localizedValue];
  }
  else
  {
    id v3 = [NSString stringWithFormat:@"%@ (Parameter Value)", v1];
    id v2 = WFLocalizedStringWithKey(v3, v1);
  }
  return v2;
}

id getAVFlashlightClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVFlashlightClass_softClass;
  uint64_t v7 = getAVFlashlightClass_softClass;
  if (!getAVFlashlightClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVFlashlightClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getAVFlashlightClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C66F63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAVFlashlightClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_44721)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __AVFoundationLibraryCore_block_invoke_44722;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5BF70;
    uint64_t v8 = 0;
    AVFoundationLibraryCore_frameworkLibrary_44721 = _sl_dlopen();
  }
  if (!AVFoundationLibraryCore_frameworkLibrary_44721)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFFlashlightSettingsClient.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AVFlashlight");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getAVFlashlightClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFFlashlightSettingsClient.m", 19, @"Unable to find class %s", "AVFlashlight");

LABEL_10:
    __break(1u);
  }
  getAVFlashlightClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AVFoundationLibraryCore_block_invoke_44722()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_44721 = result;
  return result;
}

void sub_23C671C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class initCLPlacemark()
{
  if (CoreLocationLibrary_sOnce != -1) {
    dispatch_once(&CoreLocationLibrary_sOnce, &__block_literal_global_45475);
  }
  Class result = objc_getClass("CLPlacemark");
  classCLPlacemark = (uint64_t)result;
  getCLPlacemarkClass_45473 = (uint64_t (*)())CLPlacemarkFunction;
  return result;
}

id CLPlacemarkFunction()
{
  return (id)classCLPlacemark;
}

void *__CoreLocationLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
  CoreLocationLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t (*initHKUILocalizedWorkoutTypeName(uint64_t a1))()
{
  if (HealthUILibrary_sOnce != -1) {
    dispatch_once(&HealthUILibrary_sOnce, &__block_literal_global_178_45630);
  }
  id v2 = (uint64_t (*)())dlsym((void *)HealthUILibrary_sLib, "HKUILocalizedWorkoutTypeName");
  softLinkHKUILocalizedWorkoutTypeName = v2;
  if (v2)
  {
    ((void (*)(uint64_t))v2)(a1);
    id v2 = (uint64_t (*)())objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

void *__HealthUILibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/HealthUI.framework/HealthUI", 2);
  HealthUILibrary_sLib = (uint64_t)result;
  return result;
}

void sub_23C678BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getNEVPNManagerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!NetworkExtensionLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __NetworkExtensionLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5C170;
    uint64_t v8 = 0;
    NetworkExtensionLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!NetworkExtensionLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *NetworkExtensionLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFVPNPickerParameter.m", 14, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("NEVPNManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getNEVPNManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFVPNPickerParameter.m", 15, @"Unable to find class %s", "NEVPNManager");

LABEL_10:
    __break(1u);
  }
  getNEVPNManagerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __NetworkExtensionLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  NetworkExtensionLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C67ABA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__46357(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__46358(uint64_t a1)
{
}

void sub_23C687384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__46993(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__46994(uint64_t a1)
{
}

void sub_23C6874BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C6876FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetCollectionClass_block_invoke_46997(uint64_t a1)
{
  PhotosLibrary_47006();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollection");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionClass_softClass_46996 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetCollectionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCreatePhotoAlbumAction.m", 17, @"Unable to find class %s", "PHAssetCollection");

    __break(1u);
  }
}

void PhotosLibrary_47006()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_47012)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __PhotosLibraryCore_block_invoke_47013;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5C8F8;
    uint64_t v5 = 0;
    PhotosLibraryCore_frameworkLibrary_47012 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_47012)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFCreatePhotoAlbumAction.m", 16, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PhotosLibraryCore_block_invoke_47013()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_47012 = result;
  return result;
}

void __getPHAssetCollectionChangeRequestClass_block_invoke_47021(uint64_t a1)
{
  PhotosLibrary_47006();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollectionChangeRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionChangeRequestClass_softClass_47020 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetCollectionChangeRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCreatePhotoAlbumAction.m", 18, @"Unable to find class %s", "PHAssetCollectionChangeRequest");

    __break(1u);
  }
}

void sub_23C687FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVAudioSessionInterruptionTypeKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVAudioSessionInterruptionTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAudioSessionInterruptionTypeKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AVFoundationLibrary_47129()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_47139)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_47140;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E5C910;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_47139 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_47139;
  if (!AVFoundationLibraryCore_frameworkLibrary_47139)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAudioRecorder.m", 17, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke_47140()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_47139 = result;
  return result;
}

id getAVAudioSessionClass_47144()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVAudioSessionClass_softClass_47148;
  uint64_t v7 = getAVAudioSessionClass_softClass_47148;
  if (!getAVAudioSessionClass_softClass_47148)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVAudioSessionClass_block_invoke_47149;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getAVAudioSessionClass_block_invoke_47149((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C6884EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVAudioSessionInterruptionNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVAudioSessionInterruptionNotificationSymbolLoc_ptr;
  uint64_t v9 = getAVAudioSessionInterruptionNotificationSymbolLoc_ptr;
  if (!getAVAudioSessionInterruptionNotificationSymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_47129();
    void v7[3] = (uint64_t)dlsym(v1, "AVAudioSessionInterruptionNotification");
    getAVAudioSessionInterruptionNotificationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSNotificationName getAVAudioSessionInterruptionNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAudioRecorder.m", 30, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C688654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVAudioSessionInterruptionNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVAudioSessionInterruptionNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAudioSessionInterruptionNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVAudioSessionClass_block_invoke_47149(uint64_t a1)
{
  AVFoundationLibrary_47129();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioSessionClass_softClass_47148 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAudioSessionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAudioRecorder.m", 19, @"Unable to find class %s", "AVAudioSession");

    __break(1u);
  }
}

void sub_23C688A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVAudioSessionCategoryPlayAndRecordSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVAudioSessionCategoryPlayAndRecord");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAudioSessionCategoryPlayAndRecordSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C688FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVFormatIDKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVFormatIDKeySymbolLoc_ptr;
  uint64_t v9 = getAVFormatIDKeySymbolLoc_ptr;
  if (!getAVFormatIDKeySymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_47129();
    void v7[3] = (uint64_t)dlsym(v1, "AVFormatIDKey");
    getAVFormatIDKeySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVFormatIDKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAudioRecorder.m", 21, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C68914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSampleRateKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVSampleRateKeySymbolLoc_ptr;
  uint64_t v9 = getAVSampleRateKeySymbolLoc_ptr;
  if (!getAVSampleRateKeySymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_47129();
    void v7[3] = (uint64_t)dlsym(v1, "AVSampleRateKey");
    getAVSampleRateKeySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVSampleRateKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAudioRecorder.m", 22, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C6892B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVNumberOfChannelsKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVNumberOfChannelsKeySymbolLoc_ptr;
  uint64_t v9 = getAVNumberOfChannelsKeySymbolLoc_ptr;
  if (!getAVNumberOfChannelsKeySymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_47129();
    void v7[3] = (uint64_t)dlsym(v1, "AVNumberOfChannelsKey");
    getAVNumberOfChannelsKeySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVNumberOfChannelsKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAudioRecorder.m", 23, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C68941C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVEncoderAudioQualityKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVEncoderAudioQualityKeySymbolLoc_ptr;
  uint64_t v9 = getAVEncoderAudioQualityKeySymbolLoc_ptr;
  if (!getAVEncoderAudioQualityKeySymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_47129();
    void v7[3] = (uint64_t)dlsym(v1, "AVEncoderAudioQualityKey");
    getAVEncoderAudioQualityKeySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVEncoderAudioQualityKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAudioRecorder.m", 24, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C689584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVLinearPCMIsFloatKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVLinearPCMIsFloatKeySymbolLoc_ptr_47181;
  uint64_t v9 = getAVLinearPCMIsFloatKeySymbolLoc_ptr_47181;
  if (!getAVLinearPCMIsFloatKeySymbolLoc_ptr_47181)
  {
    id v1 = AVFoundationLibrary_47129();
    void v7[3] = (uint64_t)dlsym(v1, "AVLinearPCMIsFloatKey");
    getAVLinearPCMIsFloatKeySymbolLoc_ptr_47181 = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVLinearPCMIsFloatKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAudioRecorder.m", 25, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C6896EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVLinearPCMIsBigEndianKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVLinearPCMIsBigEndianKeySymbolLoc_ptr;
  uint64_t v9 = getAVLinearPCMIsBigEndianKeySymbolLoc_ptr;
  if (!getAVLinearPCMIsBigEndianKeySymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_47129();
    void v7[3] = (uint64_t)dlsym(v1, "AVLinearPCMIsBigEndianKey");
    getAVLinearPCMIsBigEndianKeySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVLinearPCMIsBigEndianKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAudioRecorder.m", 26, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C689854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVLinearPCMBitDepthKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVLinearPCMBitDepthKeySymbolLoc_ptr_47176;
  uint64_t v9 = getAVLinearPCMBitDepthKeySymbolLoc_ptr_47176;
  if (!getAVLinearPCMBitDepthKeySymbolLoc_ptr_47176)
  {
    id v1 = AVFoundationLibrary_47129();
    void v7[3] = (uint64_t)dlsym(v1, "AVLinearPCMBitDepthKey");
    getAVLinearPCMBitDepthKeySymbolLoc_ptr_47176 = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVLinearPCMBitDepthKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAudioRecorder.m", 27, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C6899BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVAudioRecorderClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_47129();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioRecorder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioRecorderClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAudioRecorderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAudioRecorder.m", 18, @"Unable to find class %s", "AVAudioRecorder");

    __break(1u);
  }
}

void *__getAVLinearPCMBitDepthKeySymbolLoc_block_invoke_47177(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVLinearPCMBitDepthKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMBitDepthKeySymbolLoc_ptr_47176 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVLinearPCMIsBigEndianKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVLinearPCMIsBigEndianKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMIsBigEndianKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVLinearPCMIsFloatKeySymbolLoc_block_invoke_47182(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVLinearPCMIsFloatKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMIsFloatKeySymbolLoc_ptr_47181 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVEncoderAudioQualityKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVEncoderAudioQualityKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVEncoderAudioQualityKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVNumberOfChannelsKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVNumberOfChannelsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVNumberOfChannelsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVSampleRateKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVSampleRateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVSampleRateKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVFormatIDKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_47129();
  uint64_t result = dlsym(v2, "AVFormatIDKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVFormatIDKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getBluetoothAvailabilityChangedNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getBluetoothAvailabilityChangedNotificationSymbolLoc_ptr;
  uint64_t v9 = getBluetoothAvailabilityChangedNotificationSymbolLoc_ptr;
  if (!getBluetoothAvailabilityChangedNotificationSymbolLoc_ptr)
  {
    id v1 = BluetoothManagerLibrary();
    void v7[3] = (uint64_t)dlsym(v1, "BluetoothAvailabilityChangedNotification");
    getBluetoothAvailabilityChangedNotificationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getBluetoothAvailabilityChangedNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFBluetoothSettingsClient.m", 16, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C68D088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getBluetoothDeviceUpdatedNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getBluetoothDeviceUpdatedNotificationSymbolLoc_ptr;
  uint64_t v9 = getBluetoothDeviceUpdatedNotificationSymbolLoc_ptr;
  if (!getBluetoothDeviceUpdatedNotificationSymbolLoc_ptr)
  {
    id v1 = BluetoothManagerLibrary();
    void v7[3] = (uint64_t)dlsym(v1, "BluetoothDeviceUpdatedNotification");
    getBluetoothDeviceUpdatedNotificationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getBluetoothDeviceUpdatedNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFBluetoothSettingsClient.m", 17, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C68D1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getBluetoothDeviceRemovedNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getBluetoothDeviceRemovedNotificationSymbolLoc_ptr;
  uint64_t v9 = getBluetoothDeviceRemovedNotificationSymbolLoc_ptr;
  if (!getBluetoothDeviceRemovedNotificationSymbolLoc_ptr)
  {
    id v1 = BluetoothManagerLibrary();
    void v7[3] = (uint64_t)dlsym(v1, "BluetoothDeviceRemovedNotification");
    getBluetoothDeviceRemovedNotificationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getBluetoothDeviceRemovedNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFBluetoothSettingsClient.m", 18, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C68D358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getBluetoothDeviceChangedNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getBluetoothDeviceChangedNotificationSymbolLoc_ptr;
  uint64_t v9 = getBluetoothDeviceChangedNotificationSymbolLoc_ptr;
  if (!getBluetoothDeviceChangedNotificationSymbolLoc_ptr)
  {
    id v1 = BluetoothManagerLibrary();
    void v7[3] = (uint64_t)dlsym(v1, "BluetoothDeviceChangedNotification");
    getBluetoothDeviceChangedNotificationSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getBluetoothDeviceChangedNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFBluetoothSettingsClient.m", 19, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C68D4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBluetoothDeviceChangedNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BluetoothManagerLibrary();
  uint64_t result = dlsym(v2, "BluetoothDeviceChangedNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBluetoothDeviceChangedNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *BluetoothManagerLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!BluetoothManagerLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __BluetoothManagerLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264E5CB28;
    uint64_t v6 = 0;
    BluetoothManagerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)BluetoothManagerLibraryCore_frameworkLibrary;
  if (!BluetoothManagerLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *BluetoothManagerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFBluetoothSettingsClient.m", 15, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __BluetoothManagerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BluetoothManagerLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getBluetoothDeviceRemovedNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BluetoothManagerLibrary();
  uint64_t result = dlsym(v2, "BluetoothDeviceRemovedNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBluetoothDeviceRemovedNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBluetoothDeviceUpdatedNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BluetoothManagerLibrary();
  uint64_t result = dlsym(v2, "BluetoothDeviceUpdatedNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBluetoothDeviceUpdatedNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBluetoothAvailabilityChangedNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BluetoothManagerLibrary();
  uint64_t result = dlsym(v2, "BluetoothAvailabilityChangedNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBluetoothAvailabilityChangedNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id WFBluetoothDeviceFilterDevicesMatchingType(void *a1, uint64_t a2)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  void v4[2] = __WFBluetoothDeviceFilterDevicesMatchingType_block_invoke;
  v4[3] = &__block_descriptor_40_e25_B16__0__BluetoothDevice_8l;
  v4[4] = a2;
  id v2 = objc_msgSend(a1, "if_objectsPassingTest:", v4);
  return v2;
}

uint64_t __WFBluetoothDeviceFilterDevicesMatchingType_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 == 2)
  {
    if (([v3 featureCapability:16] & 1) == 0)
    {
      uint64_t v6 = [v4 featureCapability:17];
      goto LABEL_8;
    }
  }
  else if (v5 == 1 && ([v3 isServiceSupported:16] & 1) == 0)
  {
    uint64_t v6 = [v4 isServiceSupported:1];
LABEL_8:
    uint64_t v7 = v6;
    goto LABEL_9;
  }
  uint64_t v7 = 1;
LABEL_9:

  return v7;
}

void sub_23C68E5A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __getBluetoothManagerClass_block_invoke(uint64_t a1)
{
  BluetoothManagerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BluetoothManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getBluetoothManagerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getBluetoothManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFBluetoothSettingsClient.m", 20, @"Unable to find class %s", "BluetoothManager");

    __break(1u);
  }
}

id getPDFDocumentClass_47985()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPDFDocumentClass_softClass_47988;
  uint64_t v7 = getPDFDocumentClass_softClass_47988;
  if (!getPDFDocumentClass_softClass_47988)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPDFDocumentClass_block_invoke_47989;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getPDFDocumentClass_block_invoke_47989((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C68EC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPDFDocumentClass_block_invoke_47989(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PDFKitLibraryCore_frameworkLibrary_47990)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PDFKitLibraryCore_block_invoke_47991;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5CB80;
    uint64_t v8 = 0;
    PDFKitLibraryCore_frameworkLibrary_47990 = _sl_dlopen();
  }
  if (!PDFKitLibraryCore_frameworkLibrary_47990)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PDFKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFPrintAction.m", 24, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PDFDocument");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPDFDocumentClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPrintAction.m", 25, @"Unable to find class %s", "PDFDocument");

LABEL_10:
    __break(1u);
  }
  getPDFDocumentClass_softClass_47988 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PDFKitLibraryCore_block_invoke_47991()
{
  uint64_t result = _sl_dlopen();
  PDFKitLibraryCore_frameworkLibrary_47990 = result;
  return result;
}

void sub_23C68F5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__48118(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__48119(uint64_t a1)
{
}

__CFString *WFHTTPFormEncodedString(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v2 = v1;
    id v3 = [MEMORY[0x263F08708] alphanumericCharacterSet];
    uint64_t v4 = (void *)[v3 mutableCopy];

    uint64_t v5 = [MEMORY[0x263F08708] whitespaceCharacterSet];
    [v4 formUnionWithCharacterSet:v5];

    [v4 addCharactersInString:@"-_.~"];
    uint64_t v6 = [v2 stringByReplacingOccurrencesOfString:@"\r\n" withString:@"\n"];

    long long v7 = [v6 stringByReplacingOccurrencesOfString:@"\n" withString:@"\r\n"];

    uint64_t v8 = [v7 stringByAddingPercentEncodingWithAllowedCharacters:v4];

    uint64_t v9 = [MEMORY[0x263F08708] whitespaceCharacterSet];
    uint64_t v10 = [v8 componentsSeparatedByCharactersInSet:v9];
    uint64_t v11 = [v10 componentsJoinedByString:@"+"];
  }
  else
  {
    uint64_t v11 = &stru_26F008428;
  }
  return v11;
}

CGPathRef WFCreateRoundedRectPath(double a1, double a2, double a3, double a4, double a5)
{
  -[objc_class bezierPathWithRoundedRect:cornerRadius:](getUIBezierPathClass(), "bezierPathWithRoundedRect:cornerRadius:", a1, a2, a3, a4, a5);
  id v5 = objc_claimAutoreleasedReturnValue();
  CGPathRef v6 = CGPathRetain((CGPathRef)[v5 CGPath]);

  return v6;
}

Class initUIBezierPath()
{
  if (UIKitLibrary_sOnce_48214 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_48214, &__block_literal_global_48215);
  }
  Class result = objc_getClass("UIBezierPath");
  classUIBezierPath = (uint64_t)result;
  getUIBezierPathClasunsigned int s = (uint64_t (*)())UIBezierPathFunction;
  return result;
}

id UIBezierPathFunction()
{
  return (id)classUIBezierPath;
}

void *__UIKitLibrary_block_invoke_48219()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_48221 = (uint64_t)result;
  return result;
}

void sub_23C693C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CoreTelephonyLibrary_48700()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreTelephonyLibraryCore_frameworkLibrary_48720)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __CoreTelephonyLibraryCore_block_invoke_48721;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_264E5CF38;
    uint64_t v6 = 0;
    CoreTelephonyLibraryCore_frameworkLibrary_48720 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreTelephonyLibraryCore_frameworkLibrary_48720;
  if (!CoreTelephonyLibraryCore_frameworkLibrary_48720)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreTelephonyLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCellularDataSettingsClient.m", 18, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

id WFNSErrorFromCTError(uint64_t a1)
{
  v13[2] = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      uint64_t v4 = 0;
      goto LABEL_9;
    case 2:
      id v2 = (void *)MEMORY[0x263F087E8];
      id v3 = (void *)MEMORY[0x263F08350];
      goto LABEL_7;
    case 1:
      id v2 = (void *)MEMORY[0x263F087E8];
      id v3 = (void *)MEMORY[0x263F08438];
LABEL_7:
      uint64_t v4 = [v2 errorWithDomain:*v3 code:a1 >> 32 userInfo:0];
      goto LABEL_9;
  }
  unint64_t v5 = HIDWORD(a1);
  uint64_t v6 = (void *)MEMORY[0x263F087E8];
  uint64_t v7 = *MEMORY[0x263F87418];
  v12[0] = @"CTErrorDomain";
  uint64_t v8 = [NSNumber numberWithInt:a1];
  v12[1] = @"CTError";
  v13[0] = v8;
  uint64_t v9 = [NSNumber numberWithInt:v5];
  v13[1] = v9;
  uint64_t v10 = [NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];
  uint64_t v4 = [v6 errorWithDomain:v7 code:2 userInfo:v10];

LABEL_9:
  return v4;
}

uint64_t __CoreTelephonyLibraryCore_block_invoke_48721()
{
  uint64_t result = _sl_dlopen();
  CoreTelephonyLibraryCore_frameworkLibrary_48720 = result;
  return result;
}

void sub_23C694220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C6945A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_23C694C04(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void *__getACAccountDataclassNotesSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!AccountsLibraryCore_frameworkLibrary)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    void v5[3] = __AccountsLibraryCore_block_invoke;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_264E5CFA0;
    uint64_t v7 = 0;
    AccountsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  id v2 = (void *)AccountsLibraryCore_frameworkLibrary;
  if (!AccountsLibraryCore_frameworkLibrary)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *AccountsLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFNoteGroupSubstituableState.m", 18, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "ACAccountDataclassNotes");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getACAccountDataclassNotesSymbolLoc_ptr = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __AccountsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AccountsLibraryCore_frameworkLibrary = result;
  return result;
}

id getWFDictateTextActionLogObject()
{
  if (getWFDictateTextActionLogObject_onceToken != -1) {
    dispatch_once(&getWFDictateTextActionLogObject_onceToken, &__block_literal_global_49008);
  }
  uint64_t v0 = (void *)getWFDictateTextActionLogObject_log;
  return v0;
}

id initkAFAssistantErrorDomain()
{
  if (AssistantServicesLibrary_sOnce != -1) {
    dispatch_once(&AssistantServicesLibrary_sOnce, &__block_literal_global_405);
  }
  uint64_t v0 = (id *)dlsym((void *)AssistantServicesLibrary_sLib, "kAFAssistantErrorDomain");
  if (!v0) {
    __assert_rtn("initkAFAssistantErrorDomain", "WFDictateTextAction.m", 35, "constant");
  }
  objc_storeStrong((id *)&constantkAFAssistantErrorDomain, *v0);
  getkAFAssistantErrorDomaiint n = (uint64_t (*)())kAFAssistantErrorDomainFunction;
  uint64_t v1 = (void *)constantkAFAssistantErrorDomain;
  return v1;
}

id kAFAssistantErrorDomainFunction()
{
  return (id)constantkAFAssistantErrorDomain;
}

void *__AssistantServicesLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices", 2);
  AssistantServicesLibrary_sLib = (uint64_t)result;
  return result;
}

void __getWFDictateTextActionLogObject_block_invoke()
{
  os_log_t v0 = os_log_create((const char *)*MEMORY[0x263F85748], "DictateTextAction");
  uint64_t v1 = (void *)getWFDictateTextActionLogObject_log;
  getWFDictateTextActionLogObject_log = (uint64_t)v0;
}

Class initAFSpeechRequestOptions()
{
  if (AssistantServicesLibrary_sOnce != -1) {
    dispatch_once(&AssistantServicesLibrary_sOnce, &__block_literal_global_405);
  }
  Class result = objc_getClass("AFSpeechRequestOptions");
  classAFSpeechRequestOptionunsigned int s = (uint64_t)result;
  getAFSpeechRequestOptionsClasunsigned int s = (uint64_t (*)())AFSpeechRequestOptionsFunction;
  return result;
}

id AFSpeechRequestOptionsFunction()
{
  return (id)classAFSpeechRequestOptions;
}

Class initAFDictationConnection()
{
  if (AssistantServicesLibrary_sOnce != -1) {
    dispatch_once(&AssistantServicesLibrary_sOnce, &__block_literal_global_405);
  }
  Class result = objc_getClass("AFDictationConnection");
  classAFDictationConnectioint n = (uint64_t)result;
  getAFDictationConnectionClasunsigned int s = (uint64_t (*)())AFDictationConnectionFunction;
  return result;
}

id AFDictationConnectionFunction()
{
  return (id)classAFDictationConnection;
}

Class initAFDictationOptions()
{
  if (AssistantServicesLibrary_sOnce != -1) {
    dispatch_once(&AssistantServicesLibrary_sOnce, &__block_literal_global_405);
  }
  Class result = objc_getClass("AFDictationOptions");
  classAFDictationOptionunsigned int s = (uint64_t)result;
  getAFDictationOptionsClasunsigned int s = (uint64_t (*)())AFDictationOptionsFunction;
  return result;
}

id AFDictationOptionsFunction()
{
  return (id)classAFDictationOptions;
}

Class initAFPreferences()
{
  if (AssistantServicesLibrary_sOnce != -1) {
    dispatch_once(&AssistantServicesLibrary_sOnce, &__block_literal_global_405);
  }
  Class result = objc_getClass("AFPreferences");
  classAFPreferenceunsigned int s = (uint64_t)result;
  getAFPreferencesClass_49078 = (uint64_t (*)())AFPreferencesFunction;
  return result;
}

id AFPreferencesFunction()
{
  return (id)classAFPreferences;
}

id getWFWFDictateTextActionLogObject()
{
  if (getWFWFDictateTextActionLogObject_onceToken != -1) {
    dispatch_once(&getWFWFDictateTextActionLogObject_onceToken, &__block_literal_global_173_49128);
  }
  os_log_t v0 = (void *)getWFWFDictateTextActionLogObject_log;
  return v0;
}

void __getWFWFDictateTextActionLogObject_block_invoke()
{
  os_log_t v0 = os_log_create((const char *)*MEMORY[0x263F85748], "WFDictateTextAction");
  uint64_t v1 = (void *)getWFWFDictateTextActionLogObject_log;
  getWFWFDictateTextActionLogObject_log = (uint64_t)v0;
}

void sub_23C697ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSBFWallpaperParallaxSettingsClass_block_invoke(uint64_t a1)
{
  SpringBoardFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SBFWallpaperParallaxSettings");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSBFWallpaperParallaxSettingsClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSBFWallpaperParallaxSettingsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetWallpaperAction.m", 36, @"Unable to find class %s", "SBFWallpaperParallaxSettings");

    __break(1u);
  }
}

void *SpringBoardFoundationLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!SpringBoardFoundationLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __SpringBoardFoundationLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_264E5D308;
    uint64_t v6 = 0;
    SpringBoardFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  os_log_t v0 = (void *)SpringBoardFoundationLibraryCore_frameworkLibrary;
  if (!SpringBoardFoundationLibraryCore_frameworkLibrary)
  {
    os_log_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *SpringBoardFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetWallpaperAction.m", 34, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __SpringBoardFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpringBoardFoundationLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C6985D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void *__getSBFStringForWallpaperModeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = SpringBoardFoundationLibrary();
  uint64_t result = dlsym(v2, "SBFStringForWallpaperMode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBFStringForWallpaperModeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getSBFWallpaperOptionsClass_block_invoke(uint64_t a1)
{
  SpringBoardFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SBFWallpaperOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSBFWallpaperOptionsClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSBFWallpaperOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetWallpaperAction.m", 35, @"Unable to find class %s", "SBFWallpaperOptions");

    __break(1u);
  }
}

void sub_23C698B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSBSUIWallpaperPreviewViewControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!SpringBoardUIServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __SpringBoardUIServicesLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5D320;
    uint64_t v8 = 0;
    SpringBoardUIServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SpringBoardUIServicesLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *SpringBoardUIServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSetWallpaperAction.m", 39, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SBSUIWallpaperPreviewViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getSBSUIWallpaperPreviewViewControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSetWallpaperAction.m", 40, @"Unable to find class %s", "SBSUIWallpaperPreviewViewController");

LABEL_10:
    __break(1u);
  }
  getSBSUIWallpaperPreviewViewControllerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getUIViewClass_block_invoke(uint64_t a1)
{
  UIKitLibrary_49347();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("UIView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getUIViewClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getUIViewClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetWallpaperAction.m", 47, @"Unable to find class %s", "UIView");

    __break(1u);
  }
}

void UIKitLibrary_49347()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!UIKitLibraryCore_frameworkLibrary_49349)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __UIKitLibraryCore_block_invoke_49350;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5D2F0;
    uint64_t v5 = 0;
    UIKitLibraryCore_frameworkLibrary_49349 = _sl_dlopen();
  }
  if (!UIKitLibraryCore_frameworkLibrary_49349)
  {
    uint64_t v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFSetWallpaperAction.m", 46, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __UIKitLibraryCore_block_invoke_49350()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore_frameworkLibrary_49349 = result;
  return result;
}

uint64_t __SpringBoardUIServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpringBoardUIServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C699888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getUIScreenClass_block_invoke(uint64_t a1)
{
  UIKitLibrary_49347();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("UIScreen");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getUIScreenClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getUIScreenClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetWallpaperAction.m", 49, @"Unable to find class %s", "UIScreen");

    __break(1u);
  }
}

void __getUIImageClass_block_invoke(uint64_t a1)
{
  UIKitLibrary_49347();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("UIImage");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getUIImageClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getUIImageClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetWallpaperAction.m", 48, @"Unable to find class %s", "UIImage");

    __break(1u);
  }
}

id getPRSServiceClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getPRSServiceClass_softClass_49368;
  uint64_t v7 = getPRSServiceClass_softClass_49368;
  if (!getPRSServiceClass_softClass_49368)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPRSServiceClass_block_invoke_49369;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getPRSServiceClass_block_invoke_49369((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C699BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPRSServiceClass_block_invoke_49369(uint64_t a1)
{
  PosterBoardServicesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PRSService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPRSServiceClass_softClass_49368 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPRSServiceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetWallpaperAction.m", 43, @"Unable to find class %s", "PRSService");

    __break(1u);
  }
}

void PosterBoardServicesLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_49371)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __PosterBoardServicesLibraryCore_block_invoke_49372;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5D2D8;
    uint64_t v5 = 0;
    PosterBoardServicesLibraryCore_frameworkLibrary_49371 = _sl_dlopen();
  }
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_49371)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *PosterBoardServicesLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFSetWallpaperAction.m", 42, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PosterBoardServicesLibraryCore_block_invoke_49372()
{
  uint64_t result = _sl_dlopen();
  PosterBoardServicesLibraryCore_frameworkLibrary_49371 = result;
  return result;
}

void sub_23C69AF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__49404(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__49405(uint64_t a1)
{
}

void sub_23C69B6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPRSExternalSystemServiceClass_block_invoke(uint64_t a1)
{
  PosterBoardServicesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PRSExternalSystemService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPRSExternalSystemServiceClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPRSExternalSystemServiceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetWallpaperAction.m", 44, @"Unable to find class %s", "PRSExternalSystemService");

    __break(1u);
  }
}

void sub_23C69EB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _Block_object_dispose(&a21, 8);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getASWebAuthenticationSessionClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!AuthenticationServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __AuthenticationServicesLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5D430;
    uint64_t v8 = 0;
    AuthenticationServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AuthenticationServicesLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *AuthenticationServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFOAuth2WebAuthorizationSession.m", 24, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("ASWebAuthenticationSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getASWebAuthenticationSessionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFOAuth2WebAuthorizationSession.m", 25, @"Unable to find class %s", "ASWebAuthenticationSession");

LABEL_10:
    __break(1u);
  }
  getASWebAuthenticationSessionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AuthenticationServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AuthenticationServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_23C6A13E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __WFHKGroupedSampleContainers_block_invoke(uint64_t a1, uint64_t a2)
{
  v8[1] = *MEMORY[0x263EF8340];
  id v3 = [MEMORY[0x263F08B30] sortDescriptorWithKey:@"self" ascending:a2];
  long long v4 = [*(id *)(a1 + 32) allKeys];
  v8[0] = v3;
  uint64_t v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:1];
  uint64_t v6 = [v4 sortedArrayUsingDescriptors:v5];

  return v6;
}

id WFHKInterpolateMissingGroups(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = -[WFHKGroupingIndexPathTransformer initWithGroupingOption:]([WFHKGroupingIndexPathTransformer alloc], "initWithGroupingOption:", [v6 groupingOption]);
  uint64_t v48 = v5;
  uint64_t v9 = (void *)[v5 mutableCopy];
  uint64_t v49 = objc_opt_new();
  uint64_t v10 = [v6 queryStartDate];
  uint64_t v11 = [(WFHKGroupingIndexPathTransformer *)v8 transformedValue:v10];

  uint64_t v12 = [v6 queryEndDate];
  uint64_t v13 = [(WFHKGroupingIndexPathTransformer *)v8 transformedValue:v12];

  long long v47 = v11;
  uint64_t v14 = WFHKOffsetGroupKey(v11, -1, [v6 groupingOption]);
  long long v46 = v13;
  uint64_t v15 = WFHKOffsetGroupKey(v13, 1, [v6 groupingOption]);
  uint64_t v45 = (void *)v14;
  [v9 insertObject:v14 atIndex:0];
  uint64_t v44 = (void *)v15;
  [v9 addObject:v15];
  if ([v9 count])
  {
    unint64_t v16 = 0;
    id v41 = v7;
    id v42 = v6;
    uint64_t v39 = v9;
    uint64_t v40 = v8;
    do
    {
      unint64_t v17 = v16++;
      if (v16 >= [v9 count]) {
        break;
      }
      if (![v7 isRunning])
      {
        id v37 = 0;
        uint64_t v36 = v49;
        goto LABEL_19;
      }
      uint64_t v18 = [v9 objectAtIndexedSubscript:v17];
      uint64_t v19 = [v9 objectAtIndexedSubscript:v16];
      uint64_t v52 = (void *)v18;
      uint64_t v20 = [(WFHKGroupingIndexPathTransformer *)v8 reverseTransformedValue:v18];
      uint64_t v51 = (void *)v19;
      uint64_t v21 = [(WFHKGroupingIndexPathTransformer *)v8 reverseTransformedValue:v19];
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 3221225472;
      aBlock[2] = __WFHKInterpolateMissingGroups_block_invoke;
      aBlock[3] = &unk_264E5D570;
      id v22 = v8;
      uint64_t v54 = v22;
      id v23 = v20;
      id v55 = v23;
      id v24 = v21;
      id v56 = v24;
      id v25 = v49;
      id v57 = v25;
      uint64_t v26 = (void (**)(void *, uint64_t, char *))_Block_copy(aBlock);
      uint64_t v50 = v26;
      switch([v6 groupingOption])
      {
        case 1:
          v26[2](v26, 64, sel_minute);
          break;
        case 2:
          v26[2](v26, 32, sel_hour);
          break;
        case 3:
          v26[2](v26, 16, sel_day);
          break;
        case 4:
          v26[2](v26, 0x2000, sel_weekOfYear);
          break;
        case 5:
          v26[2](v26, 8, sel_month);
          break;
        case 6:
          uint64_t v27 = [(WFHKGroupingIndexPathTransformer *)v22 conversionCalendar];
          id v43 = v24;
          uint64_t v28 = [v27 components:8 fromDate:v23 toDate:v24 options:0];

          uint64_t v29 = [v28 month];
          if ((unint64_t)(v29 - 3) >= 3)
          {
            uint64_t v30 = v29 / 3 - 1;
            uint64_t v31 = 3;
            do
            {
              id v32 = objc_alloc_init(MEMORY[0x263EFF918]);
              [v32 setMonth:v31];
              uint64_t v33 = [(WFHKGroupingIndexPathTransformer *)v22 conversionCalendar];
              uint64_t v34 = [v33 dateByAddingComponents:v32 toDate:v23 options:0];

              uint64_t v35 = [(WFHKGroupingIndexPathTransformer *)v22 transformedValue:v34];
              [v25 addObject:v35];

              v31 += 3;
              --v30;
            }
            while (v30);
          }

          id v7 = v41;
          id v6 = v42;
          uint64_t v9 = v39;
          uint64_t v8 = v40;
          id v24 = v43;
          uint64_t v26 = v50;
          break;
        case 7:
          v26[2](v26, 4, sel_year);
          break;
        default:
          break;
      }
    }
    while (v16 < [v9 count]);
  }
  uint64_t v36 = v49;
  id v37 = v49;
LABEL_19:

  return v37;
}

uint64_t __WFHKGroupedSampleContainers_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
}

WFHKQuantitySampleContainer *__WFHKGroupedSampleContainers_block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 firstObject];
  long long v4 = [v3 unit];
  id v5 = [v2 valueForKeyPath:@"@unionOfObjects.quantitySample"];

  id v6 = [[WFHKQuantitySampleContainer alloc] initWithSubsamples:v5 unit:v4];
  return v6;
}

id WFHKOffsetGroupKey(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = [[WFHKGroupingIndexPathTransformer alloc] initWithGroupingOption:a3];
  id v7 = [(WFHKGroupingIndexPathTransformer *)v6 reverseTransformedValue:v5];

  id v8 = objc_alloc_init(MEMORY[0x263EFF918]);
  uint64_t v9 = v8;
  switch(a3)
  {
    case 1:
      [v8 setMinute:a2];
      break;
    case 2:
      [v8 setHour:a2];
      break;
    case 3:
      [v8 setDay:a2];
      break;
    case 4:
      [v8 setWeekOfYear:a2];
      break;
    case 5:
      uint64_t v10 = a2;
      goto LABEL_8;
    case 6:
      uint64_t v10 = 3 * a2;
LABEL_8:
      [v8 setMonth:v10];
      break;
    case 7:
      [v8 setYear:a2];
      break;
    default:
      break;
  }
  uint64_t v11 = [(WFHKGroupingIndexPathTransformer *)v6 conversionCalendar];
  uint64_t v12 = [v11 dateByAddingComponents:v9 toDate:v7 options:0];

  uint64_t v13 = [(WFHKGroupingIndexPathTransformer *)v6 transformedValue:v12];

  return v13;
}

void __WFHKInterpolateMissingGroups_block_invoke(uint64_t a1, uint64_t a2, const char *a3)
{
  id v6 = [*(id *)(a1 + 32) conversionCalendar];
  id v19 = [v6 components:a2 fromDate:*(void *)(a1 + 40) toDate:*(void *)(a1 + 48) options:0];

  id v7 = NSStringFromSelector(a3);
  id v8 = [v19 valueForKeyPath:v7];
  uint64_t v9 = [v8 integerValue];

  if (v9 >= 2)
  {
    for (uint64_t i = 1; i != v9; ++i)
    {
      uint64_t v11 = (void *)MEMORY[0x23ECE6170]();
      id v12 = objc_alloc_init(MEMORY[0x263EFF918]);
      uint64_t v13 = [NSNumber numberWithInteger:i];
      uint64_t v14 = NSStringFromSelector(a3);
      [v12 setValue:v13 forKeyPath:v14];

      uint64_t v15 = [*(id *)(a1 + 32) conversionCalendar];
      unint64_t v16 = [v15 dateByAddingComponents:v12 toDate:*(void *)(a1 + 40) options:0];

      unint64_t v17 = *(void **)(a1 + 56);
      uint64_t v18 = [*(id *)(a1 + 32) transformedValue:v16];
      [v17 addObject:v18];
    }
  }
}

void sub_23C6A7A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAXSpringBoardServerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!AccessibilityUtilitiesLibraryCore_frameworkLibrary_51015)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __AccessibilityUtilitiesLibraryCore_block_invoke_51016;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5D768;
    uint64_t v8 = 0;
    AccessibilityUtilitiesLibraryCore_frameworkLibrary_51015 = _sl_dlopen();
  }
  if (!AccessibilityUtilitiesLibraryCore_frameworkLibrary_51015)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *AccessibilityUtilitiesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFOrientationSettingsClient.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AXSpringBoardServer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getAXSpringBoardServerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFOrientationSettingsClient.m", 19, @"Unable to find class %s", "AXSpringBoardServer");

LABEL_10:
    __break(1u);
  }
  getAXSpringBoardServerClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AccessibilityUtilitiesLibraryCore_block_invoke_51016()
{
  uint64_t result = _sl_dlopen();
  AccessibilityUtilitiesLibraryCore_frameworkLibrary_51015 = result;
  return result;
}

Class initCLPlacemark_51278()
{
  if (CoreLocationLibrary_sOnce_51279 != -1) {
    dispatch_once(&CoreLocationLibrary_sOnce_51279, &__block_literal_global_51280);
  }
  Class result = objc_getClass("CLPlacemark");
  classCLPlacemark_51282 = (uint64_t)result;
  getCLPlacemarkClass_51240 = (uint64_t (*)())CLPlacemarkFunction_51284;
  return result;
}

id CLPlacemarkFunction_51284()
{
  return (id)classCLPlacemark_51282;
}

void *__CoreLocationLibrary_block_invoke_51287()
{
  Class result = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
  CoreLocationLibrary_sLib_51289 = (uint64_t)result;
  return result;
}

Class initUIPrintFormatter()
{
  if (UIKitLibrary_sOnce_51381 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_51381, &__block_literal_global_376_51382);
  }
  Class result = objc_getClass("UIPrintFormatter");
  classUIPrintFormatter = (uint64_t)result;
  getUIPrintFormatterClasunsigned int s = (uint64_t (*)())UIPrintFormatterFunction;
  return result;
}

id UIPrintFormatterFunction()
{
  return (id)classUIPrintFormatter;
}

void *__UIKitLibrary_block_invoke_51386()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_51388 = (uint64_t)result;
  return result;
}

void sub_23C6A9DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__51402(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__51403(uint64_t a1)
{
}

void sub_23C6AA81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

id getPHAssetClass_51815()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getPHAssetClass_softClass_51852;
  uint64_t v7 = getPHAssetClass_softClass_51852;
  if (!getPHAssetClass_softClass_51852)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetClass_block_invoke_51853;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getPHAssetClass_block_invoke_51853((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C6AC55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C6ACA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__51820(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__51821(uint64_t a1)
{
}

void sub_23C6ACBF8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __getPHAssetCollectionChangeRequestClass_block_invoke_51827(uint64_t a1)
{
  PhotosLibrary_51832();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollectionChangeRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionChangeRequestClass_softClass_51826 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetCollectionChangeRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSaveToCameraRollAction.m", 20, @"Unable to find class %s", "PHAssetCollectionChangeRequest");

    __break(1u);
  }
}

void sub_23C6AD1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetChangeRequestClass_block_invoke_51831(uint64_t a1)
{
  PhotosLibrary_51832();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetChangeRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetChangeRequestClass_softClass_51830 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetChangeRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSaveToCameraRollAction.m", 19, @"Unable to find class %s", "PHAssetChangeRequest");

    __break(1u);
  }
}

void PhotosLibrary_51832()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_51842)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __PhotosLibraryCore_block_invoke_51843;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5DB40;
    uint64_t v5 = 0;
    PhotosLibraryCore_frameworkLibrary_51842 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_51842)
  {
    uint64_t v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFSaveToCameraRollAction.m", 16, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PhotosLibraryCore_block_invoke_51843()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_51842 = result;
  return result;
}

void __getPHAssetClass_block_invoke_51853(uint64_t a1)
{
  PhotosLibrary_51832();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetClass_softClass_51852 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSaveToCameraRollAction.m", 17, @"Unable to find class %s", "PHAsset");

    __break(1u);
  }
}

id WFPHAssetCollectionMatchingDescriptor(void *a1)
{
  v52[1] = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v46 = 0;
  long long v47 = &v46;
  uint64_t v48 = 0x2050000000;
  id v2 = (void *)getPHPhotoLibraryClass_softClass_51967;
  uint64_t v49 = getPHPhotoLibraryClass_softClass_51967;
  if (!getPHPhotoLibraryClass_softClass_51967)
  {
    v45[0] = MEMORY[0x263EF8330];
    v45[1] = 3221225472;
    v45[2] = __getPHPhotoLibraryClass_block_invoke_51968;
    v45[3] = &unk_264E5EC88;
    v45[4] = &v46;
    __getPHPhotoLibraryClass_block_invoke_51968((uint64_t)v45);
    id v2 = (void *)v47[3];
  }
  id v3 = v2;
  _Block_object_dispose(&v46, 8);
  if ([v3 authorizationStatus] == 3)
  {
    long long v4 = [MEMORY[0x263F33988] sharedLibrary];
    id v44 = 0;
    uint64_t v5 = [v4 fetchOptionsWithError:&v44];
    id v35 = v44;

    if (v5)
    {
      [v5 setWantsIncrementalChangeDetails:0];
      uint64_t v6 = objc_opt_new();
      uint64_t v7 = [v1 localIdentifier];

      if (v7)
      {
        id PHAssetCollectionClass_51969 = getPHAssetCollectionClass_51969();
        uint64_t v9 = [v1 localIdentifier];
        v52[0] = v9;
        uint64_t v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:v52 count:1];
        uint64_t v11 = [PHAssetCollectionClass_51969 fetchAssetCollectionsWithLocalIdentifiers:v10 options:v5];
        [v6 addObject:v11];
      }
      id v12 = [v1 localizedTitle];

      if (v12)
      {
        uint64_t v13 = (void *)MEMORY[0x263F08A98];
        uint64_t v14 = [v1 localizedTitle];
        uint64_t v15 = [v13 predicateWithFormat:@"title = %@", v14];
        [v5 setPredicate:v15];

        unint64_t v16 = [getPHAssetCollectionClass_51969() fetchAssetCollectionsWithType:1 subtype:0x7FFFFFFFFFFFFFFFLL options:v5];
        [v6 addObject:v16];
      }
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      id v17 = v6;
      uint64_t v18 = [v17 countByEnumeratingWithState:&v40 objects:v51 count:16];
      if (v18)
      {
        uint64_t v19 = *(void *)v41;
        uint64_t v34 = *(void *)v41;
        do
        {
          for (uint64_t i = 0; i != v18; ++i)
          {
            if (*(void *)v41 != v19) {
              objc_enumerationMutation(v17);
            }
            uint64_t v21 = *(void **)(*((void *)&v40 + 1) + 8 * i);
            long long v36 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            id v22 = v21;
            uint64_t v23 = [v22 countByEnumeratingWithState:&v36 objects:v50 count:16];
            if (v23)
            {
              uint64_t v24 = *(void *)v37;
              while (2)
              {
                for (uint64_t j = 0; j != v23; ++j)
                {
                  if (*(void *)v37 != v24) {
                    objc_enumerationMutation(v22);
                  }
                  uint64_t v26 = *(void **)(*((void *)&v36 + 1) + 8 * j);
                  if ([v26 canPerformEditOperation:3])
                  {
                    id v32 = v26;

                    id v28 = v17;
                    goto LABEL_30;
                  }
                }
                uint64_t v23 = [v22 countByEnumeratingWithState:&v36 objects:v50 count:16];
                if (v23) {
                  continue;
                }
                break;
              }
            }

            uint64_t v19 = v34;
          }
          uint64_t v18 = [v17 countByEnumeratingWithState:&v40 objects:v51 count:16];
          uint64_t v19 = v34;
        }
        while (v18);
      }

      [v5 setPredicate:0];
      uint64_t v27 = [getPHAssetCollectionClass_51969() fetchAssetCollectionsWithType:2 subtype:209 options:v5];
      id v28 = [v27 firstObject];

      uint64_t v29 = [v28 localizedTitle];
      uint64_t v30 = [v1 localizedTitle];
      int v31 = [v29 isEqualToString:v30];

      if (v31)
      {
        id v28 = v28;
        id v32 = v28;
      }
      else
      {
        id v32 = 0;
      }
LABEL_30:
    }
    else
    {
      id v32 = 0;
    }
  }
  else
  {
    id v32 = 0;
  }

  return v32;
}

void sub_23C6AE248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void __getPHPhotoLibraryClass_block_invoke_51968(uint64_t a1)
{
  PhotosLibrary_51975();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHPhotoLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHPhotoLibraryClass_softClass_51967 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHPhotoLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPHAssetCollectionState.m", 17, @"Unable to find class %s", "PHPhotoLibrary");

    __break(1u);
  }
}

id getPHAssetCollectionClass_51969()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getPHAssetCollectionClass_softClass_51973;
  uint64_t v7 = getPHAssetCollectionClass_softClass_51973;
  if (!getPHAssetCollectionClass_softClass_51973)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetCollectionClass_block_invoke_51974;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getPHAssetCollectionClass_block_invoke_51974((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C6AE3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetCollectionClass_block_invoke_51974(uint64_t a1)
{
  PhotosLibrary_51975();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollection");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionClass_softClass_51973 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetCollectionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPHAssetCollectionState.m", 16, @"Unable to find class %s", "PHAssetCollection");

    __break(1u);
  }
}

void PhotosLibrary_51975()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_51981)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __PhotosLibraryCore_block_invoke_51982;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5DB58;
    uint64_t v5 = 0;
    PhotosLibraryCore_frameworkLibrary_51981 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_51981)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFPHAssetCollectionState.m", 15, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PhotosLibraryCore_block_invoke_51982()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_51981 = result;
  return result;
}

void sub_23C6AF660(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void *__getAVAssetExportPresetAppleM4ASymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPresetAppleM4A");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetAppleM4ASymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AVFoundationLibrary_52045()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_52122)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_52123;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_264E5DCA8;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_52122 = _sl_dlopen();
  }
  os_log_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_52122;
  if (!AVFoundationLibraryCore_frameworkLibrary_52122)
  {
    os_log_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFEncodeMediaAction.m", 25, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getAVAssetExportPresetHEVC1920x1080WithAlphaSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPresetHEVC1920x1080WithAlpha");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetHEVC1920x1080WithAlphaSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAssetExportPresetHEVC1920x1080SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPresetHEVC1920x1080");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetHEVC1920x1080SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAssetExportPresetHEVC3840x2160WithAlphaSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPresetHEVC3840x2160WithAlpha");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetHEVC3840x2160WithAlphaSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAssetExportPresetHEVC3840x2160SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPresetHEVC3840x2160");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetHEVC3840x2160SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAssetExportPreset640x480SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPreset640x480");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPreset640x480SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAssetExportPreset960x540SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPreset960x540");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPreset960x540SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAssetExportPreset1280x720SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPreset1280x720");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPreset1280x720SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getAVAssetExportPreset1920x1080()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  os_log_t v0 = (void **)getAVAssetExportPreset1920x1080SymbolLoc_ptr;
  uint64_t v9 = getAVAssetExportPreset1920x1080SymbolLoc_ptr;
  if (!getAVAssetExportPreset1920x1080SymbolLoc_ptr)
  {
    uint64_t v1 = AVFoundationLibrary_52045();
    void v7[3] = (uint64_t)dlsym(v1, "AVAssetExportPreset1920x1080");
    getAVAssetExportPreset1920x1080SymbolLoc_ptr = v7[3];
    os_log_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    long long v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVAssetExportPreset1920x1080(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFEncodeMediaAction.m", 47, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C6AFD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVAssetExportPreset3840x2160()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  os_log_t v0 = (void **)getAVAssetExportPreset3840x2160SymbolLoc_ptr;
  uint64_t v9 = getAVAssetExportPreset3840x2160SymbolLoc_ptr;
  if (!getAVAssetExportPreset3840x2160SymbolLoc_ptr)
  {
    uint64_t v1 = AVFoundationLibrary_52045();
    void v7[3] = (uint64_t)dlsym(v1, "AVAssetExportPreset3840x2160");
    getAVAssetExportPreset3840x2160SymbolLoc_ptr = v7[3];
    os_log_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    long long v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVAssetExportPreset3840x2160(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFEncodeMediaAction.m", 48, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C6AFE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVAssetExportPresetAppleProRes422LPCM()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  os_log_t v0 = (void **)getAVAssetExportPresetAppleProRes422LPCMSymbolLoc_ptr;
  uint64_t v9 = getAVAssetExportPresetAppleProRes422LPCMSymbolLoc_ptr;
  if (!getAVAssetExportPresetAppleProRes422LPCMSymbolLoc_ptr)
  {
    uint64_t v1 = AVFoundationLibrary_52045();
    void v7[3] = (uint64_t)dlsym(v1, "AVAssetExportPresetAppleProRes422LPCM");
    getAVAssetExportPresetAppleProRes422LPCMSymbolLoc_ptr = v7[3];
    os_log_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    long long v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVAssetExportPresetAppleProRes422LPCM(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFEncodeMediaAction.m", 50, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C6AFFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVAssetExportPresetPassthrough()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  os_log_t v0 = (void **)getAVAssetExportPresetPassthroughSymbolLoc_ptr;
  uint64_t v9 = getAVAssetExportPresetPassthroughSymbolLoc_ptr;
  if (!getAVAssetExportPresetPassthroughSymbolLoc_ptr)
  {
    uint64_t v1 = AVFoundationLibrary_52045();
    void v7[3] = (uint64_t)dlsym(v1, "AVAssetExportPresetPassthrough");
    getAVAssetExportPresetPassthroughSymbolLoc_ptr = v7[3];
    os_log_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    long long v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getAVAssetExportPresetPassthrough(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFEncodeMediaAction.m", 49, @"%s", dlerror());

    __break(1u);
  }
}

void sub_23C6B0150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_23C6B02E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_23C6B0E08(_Unwind_Exception *a1)
{
}

void __getAVAssetClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_52045();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFEncodeMediaAction.m", 26, @"Unable to find class %s", "AVAsset");

    __break(1u);
  }
}

void __getAVMutableCompositionClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_52045();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVMutableComposition");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVMutableCompositionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVMutableCompositionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFEncodeMediaAction.m", 29, @"Unable to find class %s", "AVMutableComposition");

    __break(1u);
  }
}

void *__getCMTimeMultiplyByFloat64SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreMediaLibrary();
  uint64_t result = dlsym(v2, "CMTimeMultiplyByFloat64");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeMultiplyByFloat64SymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreMediaLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreMediaLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __CoreMediaLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_264E5DCC0;
    uint64_t v6 = 0;
    CoreMediaLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  os_log_t v0 = (void *)CoreMediaLibraryCore_frameworkLibrary;
  if (!CoreMediaLibraryCore_frameworkLibrary)
  {
    os_log_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreMediaLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFEncodeMediaAction.m", 16, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void __getAVAssetExportSessionClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_52045();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetExportSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetExportSessionClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAssetExportSessionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFEncodeMediaAction.m", 31, @"Unable to find class %s", "AVAssetExportSession");

    __break(1u);
  }
}

void *__getAVMediaTypeVideoSymbolLoc_block_invoke_52078(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVMediaTypeVideo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMediaTypeVideoSymbolLoc_ptr_52077 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVMediaTypeAudioSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVMediaTypeAudio");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMediaTypeAudioSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreMediaLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreMediaLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getAVAssetExportPresetPassthroughSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPresetPassthrough");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetPassthroughSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAssetExportPresetAppleProRes422LPCMSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPresetAppleProRes422LPCM");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetAppleProRes422LPCMSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAssetExportPreset3840x2160SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPreset3840x2160");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPreset3840x2160SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVAssetExportPreset1920x1080SymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVAssetExportPreset1920x1080");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPreset1920x1080SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AVFoundationLibraryCore_block_invoke_52123()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_52122 = result;
  return result;
}

void sub_23C6B189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void __getAVMetadataItemClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_52045();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVMetadataItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVMetadataItemClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVMetadataItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFEncodeMediaAction.m", 27, @"Unable to find class %s", "AVMetadataItem");

    __break(1u);
  }
}

void sub_23C6B233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVMetadataCommonIdentifierTitleSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVMetadataCommonIdentifierTitle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonIdentifierTitleSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id WFMakeMetadataItem(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  long long v5 = [getAVMutableMetadataItemClass() metadataItem];
  [v5 setIdentifier:v4];

  [v5 setValue:v3];
  return v5;
}

void *__getAVMetadataCommonIdentifierArtistSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVMetadataCommonIdentifierArtist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonIdentifierArtistSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVMetadataCommonIdentifierAlbumNameSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVMetadataCommonIdentifierAlbumName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonIdentifierAlbumNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVMetadataIdentifierQuickTimeMetadataGenreSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVMetadataIdentifierQuickTimeMetadataGenre");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataIdentifierQuickTimeMetadataGenreSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVMetadataIdentifierQuickTimeMetadataYearSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVMetadataIdentifierQuickTimeMetadataYear");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataIdentifierQuickTimeMetadataYearSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_23C6B2D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVMutableMetadataItemClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getAVMutableMetadataItemClass_softClass;
  uint64_t v7 = getAVMutableMetadataItemClass_softClass;
  if (!getAVMutableMetadataItemClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVMutableMetadataItemClass_block_invoke;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getAVMutableMetadataItemClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C6B2E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVMetadataCommonIdentifierArtworkSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_52045();
  uint64_t result = dlsym(v2, "AVMetadataCommonIdentifierArtwork");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonIdentifierArtworkSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVMutableMetadataItemClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_52045();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVMutableMetadataItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVMutableMetadataItemClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVMutableMetadataItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFEncodeMediaAction.m", 28, @"Unable to find class %s", "AVMutableMetadataItem");

    __break(1u);
  }
}

void sub_23C6B49B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_23C6B4C6C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_23C6B4F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C6B5160(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_23C6B657C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMKMapItemClass_block_invoke_52604(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_52605)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MapKitLibraryCore_block_invoke_52606;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5DFB8;
    uint64_t v8 = 0;
    MapKitLibraryCore_frameworkLibrary_52605 = _sl_dlopen();
  }
  if (!MapKitLibraryCore_frameworkLibrary_52605)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void * _Nonnull MapKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSearchMapsAction.m", 20, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MKMapItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class  _Nonnull getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSearchMapsAction.m", 21, @"Unable to find class %s", "MKMapItem");

LABEL_10:
    __break(1u);
  }
  getMKMapItemClass_softClass_52603 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MapKitLibraryCore_block_invoke_52606()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_52605 = result;
  return result;
}

void sub_23C6BA428(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *WFStringFromIPSocketAddress(unsigned __int8 *a1)
{
  void v9[3] = *MEMORY[0x263EF8340];
  if (a1)
  {
    int v1 = a1[1];
    switch(v1)
    {
      case 30:
        uint64_t v2 = MEMORY[0x270FA5388](a1);
        uint64_t v4 = (char *)&v8;
        long long v5 = (const void *)(v2 + 8);
        break;
      case 18:
        uint64_t v6 = &a1[a1[5]];
        objc_msgSend(NSString, "stringWithFormat:", @"%02X:%02X:%02X:%02X:%02X:%02X", v6[8], v6[9], v6[10], v6[11], v6[12], v6[13]);
        a1 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
        goto LABEL_12;
      case 2:
        uint64_t v2 = MEMORY[0x270FA5388](a1);
        uint64_t v4 = (char *)v9;
        long long v5 = (const void *)(v2 + 4);
        break;
      default:
        a1 = 0;
        goto LABEL_12;
    }
    a1 = (unsigned __int8 *)inet_ntop(*(unsigned __int8 *)(v2 + 1), v5, v4, v3);
    if (a1)
    {
      a1 = [NSString stringWithUTF8String:a1];
    }
  }
LABEL_12:
  return a1;
}

id WFDefaultNetworkInterfaces()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(_OWORD *)uint64_t v15 = xmmword_23C71CF00;
  uint64_t v16 = 7;
  size_t size = 0;
  sysctl(v15, 6u, 0, &size, 0, 0);
  os_log_t v0 = (char *)malloc_type_malloc(size, 0x852E95CCuLL);
  sysctl(v15, 6u, v0, &size, 0, 0);
  int v1 = objc_opt_new();
  size_t v2 = size;
  if (size)
  {
    size_t v3 = 0;
    do
    {
      uint64_t v4 = &v0[v3];
      if ((v0[v3 + 10] & 2) == 0 || (v4[22] & 1) == 0)
      {
        uint64_t v5 = 0;
        uint64_t v6 = v4 + 92;
        memset(v14, 0, sizeof(v14));
        unsigned int v7 = *((_DWORD *)v4 + 3);
        do
        {
          if ((v7 >> v5))
          {
            uint64_t v8 = ((*v6 - 1) & 0xFFFFFFFC) + 4;
            if (!*v6) {
              uint64_t v8 = 4;
            }
            uint64_t v9 = v6;
            v6 += v8;
          }
          else
          {
            uint64_t v9 = 0;
          }
          *((void *)v14 + v5++) = v9;
        }
        while (v5 != 8);
        if_indextoname(*((unsigned __int16 *)v4 + 2), v13);
        if (*(void *)&v14[0] && !*(_DWORD *)(*(void *)&v14[0] + 4))
        {
          uint64_t v10 = [NSString stringWithUTF8String:v13];
          [v1 addObject:v10];
        }
        size_t v2 = size;
      }
      v3 += *(unsigned __int16 *)v4;
    }
    while (v3 < v2);
  }
  free(v0);
  return v1;
}

void sub_23C6BE264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

Class __getCLLocationClass_block_invoke_53600(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_53727)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke_53728;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5E448;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary_53727 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_53727)
  {
    size_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFWeatherDataContentItem.m", 16, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    size_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFWeatherDataContentItem.m", 17, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClass_53599 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_53728()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_53727 = result;
  return result;
}

id getPDFDocumentClass_53984()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getPDFDocumentClass_softClass_53998;
  uint64_t v7 = getPDFDocumentClass_softClass_53998;
  if (!getPDFDocumentClass_softClass_53998)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPDFDocumentClass_block_invoke_53999;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getPDFDocumentClass_block_invoke_53999((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C6BFE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPDFDocumentClass_block_invoke_53999(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PDFKitLibraryCore_frameworkLibrary_54000)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PDFKitLibraryCore_block_invoke_54001;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5E528;
    uint64_t v8 = 0;
    PDFKitLibraryCore_frameworkLibrary_54000 = _sl_dlopen();
  }
  if (!PDFKitLibraryCore_frameworkLibrary_54000)
  {
    size_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PDFKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFMakePDFAction.m", 28, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PDFDocument");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    size_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPDFDocumentClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFMakePDFAction.m", 29, @"Unable to find class %s", "PDFDocument");

LABEL_10:
    __break(1u);
  }
  getPDFDocumentClass_softClass_53998 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PDFKitLibraryCore_block_invoke_54001()
{
  uint64_t result = _sl_dlopen();
  PDFKitLibraryCore_frameworkLibrary_54000 = result;
  return result;
}

void sub_23C6C0318(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __TranslationLibraryCore_block_invoke_54088()
{
  uint64_t result = _sl_dlopen();
  TranslationLibraryCore_frameworkLibrary_54087 = result;
  return result;
}

void sub_23C6C162C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void __getPRSServiceClass_block_invoke_54193(uint64_t a1)
{
  PosterBoardServicesLibrary_54198();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PRSService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPRSServiceClass_softClass_54192 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getPRSServiceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPosterContentItem.m", 23, @"Unable to find class %s", "PRSService");

    __break(1u);
  }
}

void sub_23C6C1950(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __getPRSPosterSnapshotRequestClass_block_invoke(uint64_t a1)
{
  PosterBoardServicesLibrary_54198();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PRSPosterSnapshotRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPRSPosterSnapshotRequestClass_softClasunsigned int s = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getPRSPosterSnapshotRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPosterContentItem.m", 24, @"Unable to find class %s", "PRSPosterSnapshotRequest");

    __break(1u);
  }
}

void PosterBoardServicesLibrary_54198()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_54208)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __PosterBoardServicesLibraryCore_block_invoke_54209;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264E5E690;
    uint64_t v5 = 0;
    PosterBoardServicesLibraryCore_frameworkLibrary_54208 = _sl_dlopen();
  }
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_54208)
  {
    uint64_t v1 = [MEMORY[0x263F08690] currentHandler];
    size_t v2 = [NSString stringWithUTF8String:"void *PosterBoardServicesLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFPosterContentItem.m", 22, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PosterBoardServicesLibraryCore_block_invoke_54209()
{
  uint64_t result = _sl_dlopen();
  PosterBoardServicesLibraryCore_frameworkLibrary_54208 = result;
  return result;
}

id WFDropboxErrorFromResponseObject(void *a1, int a2)
{
  v25[1] = *MEMORY[0x263EF8340];
  id v3 = a1;
  long long v4 = [v3 objectForKeyedSubscript:@"error"];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = WFEnforceClass(v4, v5);

  if (v6)
  {
    long long v7 = WFDropboxErrorFromErrorObject(v6, a2);
    uint64_t v8 = v7;
    if (v7)
    {
      id v9 = v7;
    }
    else
    {
      uint64_t v10 = [v3 objectForKeyedSubscript:@"error_summary"];
      uint64_t v11 = objc_opt_class();
      id v12 = WFEnforceClass(v10, v11);

      if (v12)
      {
        uint64_t v13 = NSString;
        uint64_t v14 = WFLocalizedString(@"An unknown error occurred (%@)");
        uint64_t v15 = objc_msgSend(v13, "localizedStringWithFormat:", v14, v12);
      }
      else
      {
        uint64_t v15 = WFLocalizedString(@"An unknown error occurred");
      }
      uint64_t v16 = [v6 objectForKeyedSubscript:@".tag"];
      uint64_t v17 = objc_opt_class();
      uint64_t v18 = WFEnforceClass(v16, v17);

      if (![v18 isEqualToString:@"path"]) {
        goto LABEL_11;
      }
      uint64_t v19 = [v6 objectForKeyedSubscript:@"path"];
      WFDropboxErrorFromErrorObject(v19, a2);
      id v9 = (id)objc_claimAutoreleasedReturnValue();

      if (!v9)
      {
        uint64_t v20 = [v6 objectForKeyedSubscript:@"reason"];
        WFDropboxErrorFromErrorObject(v20, a2);
        id v9 = (id)objc_claimAutoreleasedReturnValue();

        if (!v9)
        {
LABEL_11:
          uint64_t v21 = (void *)MEMORY[0x263F087E8];
          uint64_t v24 = *MEMORY[0x263F08320];
          v25[0] = v15;
          id v22 = [NSDictionary dictionaryWithObjects:v25 forKeys:&v24 count:1];
          id v9 = [v21 errorWithDomain:@"WFDropboxErrorDomain" code:-1 userInfo:v22];
        }
      }
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

id WFDropboxErrorFromErrorObject(void *a1, int a2)
{
  v16[1] = *MEMORY[0x263EF8340];
  id v3 = [a1 objectForKeyedSubscript:@".tag"];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = WFEnforceClass(v3, v4);

  if (!v5)
  {
    id v9 = 0;
    goto LABEL_41;
  }
  if ([v5 isEqualToString:@"not_found"])
  {
    uint64_t v6 = (__CFString *)(id)*MEMORY[0x263F07F70];
    long long v7 = @"We couldn’t find a file at the specified path.";
    uint64_t v8 = 4;
  }
  else if ([v5 isEqualToString:@"not_file"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 100;
    long long v7 = @"A file was expected, but the path provided refers to something that isn’t a file.";
  }
  else if ([v5 isEqualToString:@"not_folder"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 101;
    long long v7 = @"A folder was expected, but the path provided refers to something that isn’t a folder.";
  }
  else if ([v5 isEqualToString:@"restricted_content"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 102;
    long long v7 = @"The file cannot be transferred because the content is restricted. For example, sometimes there are legal restrictions due to copyright claims.";
  }
  else if ([v5 isEqualToString:@"invalid_path_root"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 103;
    long long v7 = @"The path root parameter provided is invalid.";
  }
  else if ([v5 isEqualToString:@"conflict"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 105;
    long long v7 = @"Dropbox cannot write to the specified path due to a conflict.";
  }
  else if ([v5 isEqualToString:@"no_write_permission"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 106;
    long long v7 = @"You don’t have permission to write to the specified location.";
  }
  else if ([v5 isEqualToString:@"insufficient_space"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 107;
    long long v7 = @"You don’t have enough available space in Dropbox to write this data.";
  }
  else if (([v5 isEqualToString:@"disallowed_name"] & 1) != 0 {
         || [v5 isEqualToString:@"malformed_path"])
  }
  {
    if (a2) {
      long long v7 = @"Dropbox cannot save this file or folder because of its name.";
    }
    else {
      long long v7 = @"Dropbox cannot access this file or folder because of its name.";
    }
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 108;
  }
  else if ([v5 isEqualToString:@"invalid_settings"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 111;
    long long v7 = @"The share settings provided are invalid.";
  }
  else if ([v5 isEqualToString:@"not_authorized"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 112;
    long long v7 = @"You are not allowed to modify the settings of this link.";
  }
  else if ([v5 isEqualToString:@"reset"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 104;
    long long v7 = @"The request timed out. Please try again.";
  }
  else if ([v5 isEqualToString:@"email_not_verified"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 109;
    long long v7 = @"An error occurred when creating a sharing link because the email associated with your Dropbox account has not been verified.";
  }
  else if ([v5 isEqualToString:@"shared_link_already_exists"])
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    uint64_t v8 = 110;
    long long v7 = @"A shared link already exists.";
  }
  else
  {
    uint64_t v6 = @"WFDropboxErrorDomain";
    if (![v5 isEqualToString:@"access_denied"]) {
      goto LABEL_39;
    }
    long long v7 = @"Access to the requested path is forbidden.";
    uint64_t v8 = 113;
  }
  uint64_t v10 = WFLocalizedString(v7);
  if (!v10)
  {
LABEL_39:
    id v9 = 0;
    goto LABEL_40;
  }
  uint64_t v11 = (void *)v10;
  id v12 = (void *)MEMORY[0x263F087E8];
  uint64_t v15 = *MEMORY[0x263F08320];
  v16[0] = v10;
  uint64_t v13 = [NSDictionary dictionaryWithObjects:v16 forKeys:&v15 count:1];
  id v9 = [v12 errorWithDomain:v6 code:v8 userInfo:v13];

LABEL_40:
LABEL_41:

  return v9;
}

void sub_23C6C2CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v13);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__347(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__348(uint64_t a1)
{
}

__CFString *WFDropboxProcessPath(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"/"])
  {
    size_t v2 = &stru_26F008428;
  }
  else
  {
    if (([v1 hasPrefix:@"/"] & 1) == 0 && objc_msgSend(v1, "length"))
    {
      uint64_t v3 = [@"/" stringByAppendingString:v1];

      id v1 = (id)v3;
    }
    if ([v1 hasSuffix:@"/"])
    {
      uint64_t v4 = objc_msgSend(v1, "substringToIndex:", objc_msgSend(v1, "length") - 1);

      id v1 = (id)v4;
    }
    size_t v2 = (__CFString *)v1;
    id v1 = v2;
  }

  return v2;
}

void sub_23C6C45B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__54533(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__54534(uint64_t a1)
{
}

void *__Block_byref_object_copy__234(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__235(uint64_t a1)
{
}

void sub_23C6C6098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMPAVRoutingControllerErrorDomainSymbolLoc_block_invoke_54785(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary_54786();
  uint64_t result = dlsym(v2, "MPAVRoutingControllerErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPAVRoutingControllerErrorDomainSymbolLoc_ptr_54784 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MediaPlayerLibrary_54786()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_54797)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    void v4[2] = (void *)3221225472;
    v4[3] = __MediaPlayerLibraryCore_block_invoke_54798;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_264E5E8A0;
    uint64_t v6 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_54797 = _sl_dlopen();
  }
  os_log_t v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_54797;
  if (!MediaPlayerLibraryCore_frameworkLibrary_54797)
  {
    os_log_t v0 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetListeningModeAction.m", 28, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_54798()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_54797 = result;
  return result;
}

void sub_23C6C664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPAVOutputDeviceRouteClass_block_invoke_54808(uint64_t a1)
{
  MediaPlayerLibrary_54786();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVOutputDeviceRoute");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPAVOutputDeviceRouteClass_softClass_54807 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getMPAVOutputDeviceRouteClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSetListeningModeAction.m", 29, @"Unable to find class %s", "MPAVOutputDeviceRoute");

    __break(1u);
  }
}

Class initHKUnitPreferenceController()
{
  if (HealthUILibrary_sOnce_55164 != -1) {
    dispatch_once(&HealthUILibrary_sOnce_55164, &__block_literal_global_55165);
  }
  Class result = objc_getClass("HKUnitPreferenceController");
  classHKUnitPreferenceController = (uint64_t)result;
  getHKUnitPreferenceControllerClasunsigned int s = (uint64_t (*)())HKUnitPreferenceControllerFunction;
  return result;
}

id HKUnitPreferenceControllerFunction()
{
  return (id)classHKUnitPreferenceController;
}

void *__HealthUILibrary_block_invoke_55169()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/HealthUI.framework/HealthUI", 2);
  HealthUILibrary_sLib_55170 = (uint64_t)result;
  return result;
}

void sub_23C6C9F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void __Block_byref_object_copy__55202(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__55203(uint64_t a1)
{
}

id WFHKBloodGlucoseMealTimeUnspecified()
{
  return WFLocalizedParameterValueMarker(@"Unspecified");
}

uint64_t WFHKNormalizeString(void *a1, const char *a2)
{
  return [a1 stringByReplacingOccurrencesOfString:@" " withString:@" "];
}

void sub_23C6CB430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getNEVPNManagerClass_block_invoke_55484(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!NetworkExtensionLibraryCore_frameworkLibrary_55517)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __NetworkExtensionLibraryCore_block_invoke_55518;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5EBE8;
    uint64_t v8 = 0;
    NetworkExtensionLibraryCore_frameworkLibrary_55517 = _sl_dlopen();
  }
  if (!NetworkExtensionLibraryCore_frameworkLibrary_55517)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *NetworkExtensionLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSetVPNAction.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("NEVPNManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getNEVPNManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSetVPNAction.m", 16, @"Unable to find class %s", "NEVPNManager");

LABEL_10:
    __break(1u);
  }
  getNEVPNManagerClass_softClass_55483 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __NetworkExtensionLibraryCore_block_invoke_55518()
{
  uint64_t result = _sl_dlopen();
  NetworkExtensionLibraryCore_frameworkLibrary_55517 = result;
  return result;
}

id getAVSystemControllerClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)getAVSystemControllerClass_softClass_55757;
  uint64_t v7 = getAVSystemControllerClass_softClass_55757;
  if (!getAVSystemControllerClass_softClass_55757)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVSystemControllerClass_block_invoke_55758;
    v3[3] = &unk_264E5EC88;
    void v3[4] = &v4;
    __getAVSystemControllerClass_block_invoke_55758((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_23C6CCA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAVSystemControllerClass_block_invoke_55758(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaExperienceLibraryCore_frameworkLibrary_55759)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaExperienceLibraryCore_block_invoke_55760;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264E5ECA8;
    uint64_t v8 = 0;
    MediaExperienceLibraryCore_frameworkLibrary_55759 = _sl_dlopen();
  }
  if (!MediaExperienceLibraryCore_frameworkLibrary_55759)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MediaExperienceLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSetVolumeAction.m", 24, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AVSystemController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getAVSystemControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSetVolumeAction.m", 25, @"Unable to find class %s", "AVSystemController");

LABEL_10:
    __break(1u);
  }
  getAVSystemControllerClass_softClass_55757 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaExperienceLibraryCore_block_invoke_55760()
{
  uint64_t result = _sl_dlopen();
  MediaExperienceLibraryCore_frameworkLibrary_55759 = result;
  return result;
}

uint64_t __Block_byref_object_copy__56097(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__56098(uint64_t a1)
{
}

void sub_23C6CFCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_23C6CFEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__56140(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__56141(uint64_t a1)
{
}

uint64_t sub_23C6D3E08()
{
  return MEMORY[0x270EE0A90]();
}

uint64_t sub_23C6D3E18()
{
  return MEMORY[0x270EE0A98]();
}

uint64_t sub_23C6D3E28()
{
  return MEMORY[0x270EE0AA8]();
}

uint64_t sub_23C6D3E38()
{
  return MEMORY[0x270EE0AB0]();
}

uint64_t sub_23C6D3E48()
{
  return MEMORY[0x270EE0AB8]();
}

uint64_t sub_23C6D3E78()
{
  return MEMORY[0x270EE0C80]();
}

uint64_t sub_23C6D3E88()
{
  return MEMORY[0x270EE0CB0]();
}

uint64_t sub_23C6D3E98()
{
  return MEMORY[0x270EE0CC0]();
}

uint64_t sub_23C6D3EA8()
{
  return MEMORY[0x270EE0CD0]();
}

uint64_t sub_23C6D3EB8()
{
  return MEMORY[0x270EE0D18]();
}

uint64_t sub_23C6D3ED8()
{
  return MEMORY[0x270EE0DD8]();
}

uint64_t sub_23C6D3EE8()
{
  return MEMORY[0x270EE0DF8]();
}

uint64_t sub_23C6D3F18()
{
  return MEMORY[0x270EE0E88]();
}

uint64_t sub_23C6D3F28()
{
  return MEMORY[0x270EE0E98]();
}

uint64_t sub_23C6D3F38()
{
  return MEMORY[0x270EE0F98]();
}

uint64_t sub_23C6D3F48()
{
  return MEMORY[0x270EE0FB0]();
}

uint64_t sub_23C6D3F58()
{
  return MEMORY[0x270EE1050]();
}

uint64_t sub_23C6D3F68()
{
  return MEMORY[0x270EE1060]();
}

uint64_t sub_23C6D3F78()
{
  return MEMORY[0x270EE1068]();
}

uint64_t sub_23C6D3F88()
{
  return MEMORY[0x270EE1100]();
}

uint64_t sub_23C6D3F98()
{
  return MEMORY[0x270EE1118]();
}

uint64_t sub_23C6D3FA8()
{
  return MEMORY[0x270EE11A8]();
}

uint64_t sub_23C6D3FB8()
{
  return MEMORY[0x270EE11B0]();
}

uint64_t sub_23C6D3FC8()
{
  return MEMORY[0x270EE11C0]();
}

uint64_t sub_23C6D3FD8()
{
  return MEMORY[0x270EE11D8]();
}

uint64_t sub_23C6D3FE8()
{
  return MEMORY[0x270EE11E0]();
}

uint64_t sub_23C6D3FF8()
{
  return MEMORY[0x270EE11F8]();
}

uint64_t sub_23C6D4008()
{
  return MEMORY[0x270EE1250]();
}

uint64_t sub_23C6D4018()
{
  return MEMORY[0x270EE1270]();
}

uint64_t sub_23C6D4028()
{
  return MEMORY[0x270EE1280]();
}

uint64_t sub_23C6D4038()
{
  return MEMORY[0x270EE12F0]();
}

uint64_t sub_23C6D4048()
{
  return MEMORY[0x270EE1308]();
}

uint64_t sub_23C6D4068()
{
  return MEMORY[0x270EE1570]();
}

uint64_t sub_23C6D4078()
{
  return MEMORY[0x270EE1588]();
}

uint64_t sub_23C6D4088()
{
  return MEMORY[0x270EE15A0]();
}

uint64_t sub_23C6D4098()
{
  return MEMORY[0x270EE1638]();
}

uint64_t sub_23C6D40A8()
{
  return MEMORY[0x270EE1640]();
}

uint64_t sub_23C6D40B8()
{
  return MEMORY[0x270EE16A0]();
}

uint64_t sub_23C6D40C8()
{
  return MEMORY[0x270EE16B0]();
}

uint64_t sub_23C6D40D8()
{
  return MEMORY[0x270EE18B8]();
}

uint64_t sub_23C6D40E8()
{
  return MEMORY[0x270EE18C8]();
}

uint64_t sub_23C6D40F8()
{
  return MEMORY[0x270EE18D0]();
}

uint64_t sub_23C6D4108()
{
  return MEMORY[0x270EE18D8]();
}

uint64_t sub_23C6D4118()
{
  return MEMORY[0x270EE18F0]();
}

uint64_t sub_23C6D4128()
{
  return MEMORY[0x270EE1900]();
}

uint64_t sub_23C6D4138()
{
  return MEMORY[0x270EE1908]();
}

uint64_t sub_23C6D4148()
{
  return MEMORY[0x270EE1918]();
}

uint64_t sub_23C6D4158()
{
  return MEMORY[0x270EE1938]();
}

uint64_t sub_23C6D4168()
{
  return MEMORY[0x270EE1958]();
}

uint64_t sub_23C6D4178()
{
  return MEMORY[0x270EE1968]();
}

uint64_t sub_23C6D4198()
{
  return MEMORY[0x270EE1A20]();
}

uint64_t sub_23C6D41A8()
{
  return MEMORY[0x270EE1A40]();
}

uint64_t sub_23C6D41B8()
{
  return MEMORY[0x270EE1A48]();
}

uint64_t sub_23C6D41C8()
{
  return MEMORY[0x270EE1A50]();
}

uint64_t sub_23C6D41D8()
{
  return MEMORY[0x270EE1A58]();
}

uint64_t sub_23C6D41E8()
{
  return MEMORY[0x270EE1AB0]();
}

uint64_t sub_23C6D41F8()
{
  return MEMORY[0x270EE1AB8]();
}

uint64_t sub_23C6D4208()
{
  return MEMORY[0x270EE1AC0]();
}

uint64_t sub_23C6D4218()
{
  return MEMORY[0x270EE1AC8]();
}

uint64_t sub_23C6D4228()
{
  return MEMORY[0x270EE1AD0]();
}

uint64_t sub_23C6D4238()
{
  return MEMORY[0x270EE1B80]();
}

uint64_t sub_23C6D4248()
{
  return MEMORY[0x270EE1B88]();
}

uint64_t sub_23C6D4258()
{
  return MEMORY[0x270EE1B90]();
}

uint64_t sub_23C6D4278()
{
  return MEMORY[0x270EE1C48]();
}

uint64_t sub_23C6D4288()
{
  return MEMORY[0x270EE1C70]();
}

uint64_t sub_23C6D4298()
{
  return MEMORY[0x270EE1C78]();
}

uint64_t sub_23C6D42A8()
{
  return MEMORY[0x270EE1C90]();
}

uint64_t sub_23C6D42B8()
{
  return MEMORY[0x270EE1CA0]();
}

uint64_t sub_23C6D42C8()
{
  return MEMORY[0x270EE1CB0]();
}

uint64_t sub_23C6D42D8()
{
  return MEMORY[0x270EE1CC0]();
}

uint64_t sub_23C6D42E8()
{
  return MEMORY[0x270EE1D48]();
}

uint64_t sub_23C6D42F8()
{
  return MEMORY[0x270EE1D60]();
}

uint64_t sub_23C6D4308()
{
  return MEMORY[0x270EE1D78]();
}

uint64_t sub_23C6D4318()
{
  return MEMORY[0x270EE1D88]();
}

uint64_t sub_23C6D4338()
{
  return MEMORY[0x270EE1DD0]();
}

uint64_t sub_23C6D4348()
{
  return MEMORY[0x270EE1DE8]();
}

uint64_t sub_23C6D4358()
{
  return MEMORY[0x270EE1DF0]();
}

uint64_t sub_23C6D4368()
{
  return MEMORY[0x270EE1DF8]();
}

uint64_t sub_23C6D4378()
{
  return MEMORY[0x270EE1E00]();
}

uint64_t sub_23C6D4398()
{
  return MEMORY[0x270EE1E60]();
}

uint64_t sub_23C6D43A8()
{
  return MEMORY[0x270EE1E70]();
}

uint64_t sub_23C6D43B8()
{
  return MEMORY[0x270EE1EB0]();
}

uint64_t sub_23C6D43C8()
{
  return MEMORY[0x270EEDF50]();
}

uint64_t sub_23C6D43D8()
{
  return MEMORY[0x270EEDF90]();
}

uint64_t sub_23C6D43E8()
{
  return MEMORY[0x270EEDFA0]();
}

uint64_t sub_23C6D43F8()
{
  return MEMORY[0x270EEDFA8]();
}

uint64_t sub_23C6D4408()
{
  return MEMORY[0x270EEDFC0]();
}

uint64_t sub_23C6D4418()
{
  return MEMORY[0x270EEE188]();
}

uint64_t sub_23C6D4428()
{
  return MEMORY[0x270EEE258]();
}

uint64_t sub_23C6D4438()
{
  return MEMORY[0x270EEE3D0]();
}

uint64_t sub_23C6D4448()
{
  return MEMORY[0x270EEE920]();
}

uint64_t sub_23C6D4458()
{
  return MEMORY[0x270EEE930]();
}

uint64_t sub_23C6D4468()
{
  return MEMORY[0x270EEE940]();
}

uint64_t sub_23C6D4478()
{
  return MEMORY[0x270EEE950]();
}

uint64_t sub_23C6D4488()
{
  return MEMORY[0x270EEF320]();
}

uint64_t sub_23C6D4498()
{
  return MEMORY[0x270EEF410]();
}

uint64_t sub_23C6D44A8()
{
  return MEMORY[0x270EEF460]();
}

uint64_t sub_23C6D44B8()
{
  return MEMORY[0x270EEF830]();
}

uint64_t sub_23C6D44C8()
{
  return MEMORY[0x270EEF840]();
}

uint64_t sub_23C6D44D8()
{
  return MEMORY[0x270EEF868]();
}

uint64_t sub_23C6D44E8()
{
  return MEMORY[0x270EEF870]();
}

uint64_t sub_23C6D44F8()
{
  return MEMORY[0x270EEF888]();
}

uint64_t sub_23C6D4508()
{
  return MEMORY[0x270EEF8C0]();
}

uint64_t sub_23C6D4518()
{
  return MEMORY[0x270EEF8D8]();
}

uint64_t sub_23C6D4528()
{
  return MEMORY[0x270EEFC48]();
}

uint64_t sub_23C6D4538()
{
  return MEMORY[0x270EEFC58]();
}

uint64_t sub_23C6D4548()
{
  return MEMORY[0x270EEFCB0]();
}

uint64_t sub_23C6D4558()
{
  return MEMORY[0x270EEFCE0]();
}

uint64_t sub_23C6D4568()
{
  return MEMORY[0x270EEFD28]();
}

uint64_t sub_23C6D4578()
{
  return MEMORY[0x270EEFD58]();
}

uint64_t sub_23C6D4588()
{
  return MEMORY[0x270EEFD90]();
}

uint64_t sub_23C6D4598()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t sub_23C6D45A8()
{
  return MEMORY[0x270EEFE68]();
}

uint64_t sub_23C6D45B8()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t sub_23C6D45C8()
{
  return MEMORY[0x270EF0120]();
}

uint64_t sub_23C6D45D8()
{
  return MEMORY[0x270EF0178]();
}

uint64_t sub_23C6D45E8()
{
  return MEMORY[0x270EF0198]();
}

uint64_t sub_23C6D45F8()
{
  return MEMORY[0x270EF0898]();
}

uint64_t sub_23C6D4608()
{
  return MEMORY[0x270EF0998]();
}

uint64_t sub_23C6D4618()
{
  return MEMORY[0x270EF09B8]();
}

uint64_t sub_23C6D4628()
{
  return MEMORY[0x270EF0BA8]();
}

uint64_t sub_23C6D4638()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t sub_23C6D4648()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t sub_23C6D4658()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t sub_23C6D4668()
{
  return MEMORY[0x270EF0CB8]();
}

uint64_t sub_23C6D4678()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t sub_23C6D4688()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t sub_23C6D4698()
{
  return MEMORY[0x270EF0D80]();
}

uint64_t sub_23C6D46A8()
{
  return MEMORY[0x270EF0EE0]();
}

uint64_t sub_23C6D46B8()
{
  return MEMORY[0x270EF0EF8]();
}

uint64_t sub_23C6D46C8()
{
  return MEMORY[0x270EF0F40]();
}

uint64_t sub_23C6D46D8()
{
  return MEMORY[0x270EF0FA0]();
}

uint64_t sub_23C6D46E8()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t sub_23C6D46F8()
{
  return MEMORY[0x270EF13B0]();
}

uint64_t sub_23C6D4708()
{
  return MEMORY[0x270EF13D8]();
}

uint64_t sub_23C6D4718()
{
  return MEMORY[0x270EF1440]();
}

uint64_t sub_23C6D4728()
{
  return MEMORY[0x270EF15C8]();
}

uint64_t sub_23C6D4738()
{
  return MEMORY[0x270EF15E8]();
}

uint64_t sub_23C6D4748()
{
  return MEMORY[0x270EF1608]();
}

uint64_t sub_23C6D4758()
{
  return MEMORY[0x270F06B18]();
}

uint64_t sub_23C6D4768()
{
  return MEMORY[0x270F06B20]();
}

uint64_t sub_23C6D4778()
{
  return MEMORY[0x270F06B38]();
}

uint64_t sub_23C6D4788()
{
  return MEMORY[0x270F06B50]();
}

uint64_t sub_23C6D4798()
{
  return MEMORY[0x270F06B68]();
}

uint64_t sub_23C6D47A8()
{
  return MEMORY[0x270F06B70]();
}

uint64_t sub_23C6D47B8()
{
  return MEMORY[0x270F06B78]();
}

uint64_t sub_23C6D47C8()
{
  return MEMORY[0x270F06B80]();
}

uint64_t sub_23C6D47D8()
{
  return MEMORY[0x270F06B88]();
}

uint64_t sub_23C6D47E8()
{
  return MEMORY[0x270F06B90]();
}

uint64_t sub_23C6D47F8()
{
  return MEMORY[0x270F06BA8]();
}

uint64_t sub_23C6D4808()
{
  return MEMORY[0x270F06BB0]();
}

uint64_t sub_23C6D4818()
{
  return MEMORY[0x270F06BE8]();
}

uint64_t sub_23C6D4828()
{
  return MEMORY[0x270F06BF0]();
}

uint64_t sub_23C6D4838()
{
  return MEMORY[0x270F06BF8]();
}

uint64_t sub_23C6D4848()
{
  return MEMORY[0x270F06C10]();
}

uint64_t sub_23C6D4858()
{
  return MEMORY[0x270F06C18]();
}

uint64_t sub_23C6D4868()
{
  return MEMORY[0x270F06C20]();
}

uint64_t sub_23C6D4878()
{
  return MEMORY[0x270F06C28]();
}

uint64_t sub_23C6D4888()
{
  return MEMORY[0x270F06C30]();
}

uint64_t sub_23C6D4898()
{
  return MEMORY[0x270F06C38]();
}

uint64_t sub_23C6D48A8()
{
  return MEMORY[0x270F06C40]();
}

uint64_t sub_23C6D48B8()
{
  return MEMORY[0x270F06C48]();
}

uint64_t sub_23C6D48C8()
{
  return MEMORY[0x270F06CB8]();
}

uint64_t sub_23C6D48D8()
{
  return MEMORY[0x270F06CC0]();
}

uint64_t sub_23C6D48E8()
{
  return MEMORY[0x270F06CE8]();
}

uint64_t sub_23C6D48F8()
{
  return MEMORY[0x270F06CF0]();
}

uint64_t sub_23C6D4908()
{
  return MEMORY[0x270F06CF8]();
}

uint64_t sub_23C6D4918()
{
  return MEMORY[0x270F06D38]();
}

uint64_t sub_23C6D4928()
{
  return MEMORY[0x270F06D40]();
}

uint64_t sub_23C6D4938()
{
  return MEMORY[0x270F06D48]();
}

uint64_t sub_23C6D4948()
{
  return MEMORY[0x270F06D50]();
}

uint64_t sub_23C6D4958()
{
  return MEMORY[0x270F06D58]();
}

uint64_t sub_23C6D4968()
{
  return MEMORY[0x270F06D60]();
}

uint64_t sub_23C6D4978()
{
  return MEMORY[0x270F06D68]();
}

uint64_t sub_23C6D4988()
{
  return MEMORY[0x270F06D78]();
}

uint64_t sub_23C6D4998()
{
  return MEMORY[0x270F06E68]();
}

uint64_t sub_23C6D49A8()
{
  return MEMORY[0x270F06E70]();
}

uint64_t sub_23C6D49B8()
{
  return MEMORY[0x270F06E78]();
}

uint64_t sub_23C6D49C8()
{
  return MEMORY[0x270F06E80]();
}

uint64_t sub_23C6D49D8()
{
  return MEMORY[0x270F06E90]();
}

uint64_t sub_23C6D4A08()
{
  return MEMORY[0x270F06EB8]();
}

uint64_t sub_23C6D4A18()
{
  return MEMORY[0x270F06ED0]();
}

uint64_t sub_23C6D4A28()
{
  return MEMORY[0x270F06ED8]();
}

uint64_t sub_23C6D4A38()
{
  return MEMORY[0x270F06EE8]();
}

uint64_t sub_23C6D4A48()
{
  return MEMORY[0x270F06EF8]();
}

uint64_t sub_23C6D4A58()
{
  return MEMORY[0x270F06F38]();
}

uint64_t sub_23C6D4A68()
{
  return MEMORY[0x270F06F60]();
}

uint64_t sub_23C6D4A78()
{
  return MEMORY[0x270F06F68]();
}

uint64_t sub_23C6D4A88()
{
  return MEMORY[0x270F06F80]();
}

uint64_t sub_23C6D4A98()
{
  return MEMORY[0x270F06F88]();
}

uint64_t sub_23C6D4AA8()
{
  return MEMORY[0x270F06F90]();
}

uint64_t sub_23C6D4AB8()
{
  return MEMORY[0x270F070D8]();
}

uint64_t sub_23C6D4AC8()
{
  return MEMORY[0x270F070E0]();
}

uint64_t sub_23C6D4AD8()
{
  return MEMORY[0x270F070F8]();
}

uint64_t sub_23C6D4AE8()
{
  return MEMORY[0x270F07100]();
}

uint64_t sub_23C6D4AF8()
{
  return MEMORY[0x270F07130]();
}

uint64_t sub_23C6D4B08()
{
  return MEMORY[0x270F071F8]();
}

uint64_t sub_23C6D4B18()
{
  return MEMORY[0x270F07200]();
}

uint64_t sub_23C6D4B28()
{
  return MEMORY[0x270F07208]();
}

uint64_t sub_23C6D4B38()
{
  return MEMORY[0x270F07238]();
}

uint64_t sub_23C6D4B48()
{
  return MEMORY[0x270F07248]();
}

uint64_t sub_23C6D4B58()
{
  return MEMORY[0x270F07258]();
}

uint64_t sub_23C6D4B68()
{
  return MEMORY[0x270F072C8]();
}

uint64_t sub_23C6D4B78()
{
  return MEMORY[0x270F072D0]();
}

uint64_t sub_23C6D4B88()
{
  return MEMORY[0x270F072F0]();
}

uint64_t sub_23C6D4B98()
{
  return MEMORY[0x270F85B38]();
}

uint64_t sub_23C6D4BA8()
{
  return MEMORY[0x270F85B40]();
}

uint64_t sub_23C6D4BB8()
{
  return MEMORY[0x270F85D30]();
}

uint64_t sub_23C6D4BC8()
{
  return MEMORY[0x270F85D60]();
}

uint64_t sub_23C6D4BD8()
{
  return MEMORY[0x270F85D68]();
}

uint64_t sub_23C6D4BE8()
{
  return MEMORY[0x270F85D70]();
}

uint64_t sub_23C6D4BF8()
{
  return MEMORY[0x270F85D78]();
}

uint64_t sub_23C6D4C08()
{
  return MEMORY[0x270F85D80]();
}

uint64_t sub_23C6D4C18()
{
  return MEMORY[0x270F85D88]();
}

uint64_t sub_23C6D4C28()
{
  return MEMORY[0x270F85E00]();
}

uint64_t sub_23C6D4C38()
{
  return MEMORY[0x270F85E08]();
}

uint64_t sub_23C6D4C48()
{
  return MEMORY[0x270F85E10]();
}

uint64_t sub_23C6D4C58()
{
  return MEMORY[0x270F85F20]();
}

uint64_t sub_23C6D4C68()
{
  return MEMORY[0x270F85F28]();
}

uint64_t sub_23C6D4C78()
{
  return MEMORY[0x270F85F98]();
}

uint64_t sub_23C6D4C88()
{
  return MEMORY[0x270F85FA0]();
}

uint64_t sub_23C6D4C98()
{
  return MEMORY[0x270F85FA8]();
}

uint64_t sub_23C6D4CA8()
{
  return MEMORY[0x270F85FB0]();
}

uint64_t sub_23C6D4CB8()
{
  return MEMORY[0x270F85FB8]();
}

uint64_t sub_23C6D4CC8()
{
  return MEMORY[0x270F85FD0]();
}

uint64_t sub_23C6D4CD8()
{
  return MEMORY[0x270F85FD8]();
}

uint64_t sub_23C6D4CE8()
{
  return MEMORY[0x270F86040]();
}

uint64_t sub_23C6D4CF8()
{
  return MEMORY[0x270F86060]();
}

uint64_t sub_23C6D4D08()
{
  return MEMORY[0x270F86068]();
}

uint64_t sub_23C6D4D18()
{
  return MEMORY[0x270F86070]();
}

uint64_t sub_23C6D4D28()
{
  return MEMORY[0x270F86078]();
}

uint64_t sub_23C6D4D38()
{
  return MEMORY[0x270F86080]();
}

uint64_t sub_23C6D4D48()
{
  return MEMORY[0x270F86088]();
}

uint64_t sub_23C6D4D58()
{
  return MEMORY[0x270F86090]();
}

uint64_t sub_23C6D4D68()
{
  return MEMORY[0x270F86098]();
}

uint64_t sub_23C6D4D78()
{
  return MEMORY[0x270F860A0]();
}

uint64_t sub_23C6D4D88()
{
  return MEMORY[0x270F860A8]();
}

uint64_t sub_23C6D4D98()
{
  return MEMORY[0x270F860B0]();
}

uint64_t sub_23C6D4DA8()
{
  return MEMORY[0x270F860B8]();
}

uint64_t sub_23C6D4DB8()
{
  return MEMORY[0x270F860C0]();
}

uint64_t sub_23C6D4DC8()
{
  return MEMORY[0x270F9C868]();
}

uint64_t sub_23C6D4DD8()
{
  return MEMORY[0x270F9C890]();
}

uint64_t sub_23C6D4DE8()
{
  return MEMORY[0x270F28690]();
}

uint64_t sub_23C6D4DF8()
{
  return MEMORY[0x270F847B0]();
}

uint64_t sub_23C6D4E08()
{
  return MEMORY[0x270FA1778]();
}

uint64_t sub_23C6D4E18()
{
  return MEMORY[0x270FA17B8]();
}

uint64_t sub_23C6D4E28()
{
  return MEMORY[0x270FA1938]();
}

uint64_t sub_23C6D4E38()
{
  return MEMORY[0x270FA1948]();
}

uint64_t sub_23C6D4E48()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_23C6D4E58()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_23C6D4E78()
{
  return MEMORY[0x270F7F958]();
}

uint64_t sub_23C6D4E88()
{
  return MEMORY[0x270F7F960]();
}

uint64_t sub_23C6D4E98()
{
  return MEMORY[0x270F7FD20]();
}

uint64_t sub_23C6D4EA8()
{
  return MEMORY[0x270F7FD68]();
}

uint64_t sub_23C6D4EB8()
{
  return MEMORY[0x270F7FE60]();
}

uint64_t sub_23C6D4EC8()
{
  return MEMORY[0x270F7FE70]();
}

uint64_t sub_23C6D4ED8()
{
  return MEMORY[0x270F7FFA8]();
}

uint64_t sub_23C6D4EE8()
{
  return MEMORY[0x270F80000]();
}

uint64_t sub_23C6D4EF8()
{
  return MEMORY[0x270F80008]();
}

uint64_t sub_23C6D4F18()
{
  return MEMORY[0x270F80048]();
}

uint64_t sub_23C6D4F28()
{
  return MEMORY[0x270F80080]();
}

uint64_t sub_23C6D4F38()
{
  return MEMORY[0x270F80098]();
}

uint64_t sub_23C6D4F48()
{
  return MEMORY[0x270F800B0]();
}

uint64_t sub_23C6D4F58()
{
  return MEMORY[0x270F800C0]();
}

uint64_t sub_23C6D4F68()
{
  return MEMORY[0x270F800C8]();
}

uint64_t sub_23C6D4F78()
{
  return MEMORY[0x270F800D8]();
}

uint64_t sub_23C6D4F88()
{
  return MEMORY[0x270F800F0]();
}

uint64_t sub_23C6D4F98()
{
  return MEMORY[0x270F80100]();
}

uint64_t sub_23C6D4FA8()
{
  return MEMORY[0x270F80108]();
}

uint64_t sub_23C6D4FB8()
{
  return MEMORY[0x270F80110]();
}

uint64_t sub_23C6D4FC8()
{
  return MEMORY[0x270F80128]();
}

uint64_t sub_23C6D4FD8()
{
  return MEMORY[0x270F80148]();
}

uint64_t sub_23C6D4FE8()
{
  return MEMORY[0x270F80150]();
}

uint64_t sub_23C6D4FF8()
{
  return MEMORY[0x270F80178]();
}

uint64_t sub_23C6D5008()
{
  return MEMORY[0x270F80188]();
}

uint64_t sub_23C6D5018()
{
  return MEMORY[0x270F80190]();
}

uint64_t sub_23C6D5028()
{
  return MEMORY[0x270F801F0]();
}

uint64_t sub_23C6D5038()
{
  return MEMORY[0x270F80208]();
}

uint64_t sub_23C6D5048()
{
  return MEMORY[0x270F80218]();
}

uint64_t sub_23C6D5058()
{
  return MEMORY[0x270F80220]();
}

uint64_t sub_23C6D5078()
{
  return MEMORY[0x270F80230]();
}

uint64_t sub_23C6D5088()
{
  return MEMORY[0x270F80238]();
}

uint64_t sub_23C6D5098()
{
  return MEMORY[0x270F80240]();
}

uint64_t sub_23C6D50A8()
{
  return MEMORY[0x270F80248]();
}

uint64_t sub_23C6D50B8()
{
  return MEMORY[0x270F80250]();
}

uint64_t sub_23C6D50C8()
{
  return MEMORY[0x270F80258]();
}

uint64_t sub_23C6D50D8()
{
  return MEMORY[0x270F80260]();
}

uint64_t sub_23C6D50E8()
{
  return MEMORY[0x270F80268]();
}

uint64_t sub_23C6D50F8()
{
  return MEMORY[0x270F80270]();
}

uint64_t sub_23C6D5108()
{
  return MEMORY[0x270F80278]();
}

uint64_t sub_23C6D5118()
{
  return MEMORY[0x270F80280]();
}

uint64_t sub_23C6D5128()
{
  return MEMORY[0x270F80288]();
}

uint64_t sub_23C6D5138()
{
  return MEMORY[0x270F80290]();
}

uint64_t sub_23C6D5148()
{
  return MEMORY[0x270F80298]();
}

uint64_t sub_23C6D5158()
{
  return MEMORY[0x270F802A0]();
}

uint64_t sub_23C6D5168()
{
  return MEMORY[0x270F802B8]();
}

uint64_t sub_23C6D5178()
{
  return MEMORY[0x270F802C0]();
}

uint64_t sub_23C6D5188()
{
  return MEMORY[0x270F802C8]();
}

uint64_t sub_23C6D5198()
{
  return MEMORY[0x270F802D0]();
}

uint64_t sub_23C6D51A8()
{
  return MEMORY[0x270F802E8]();
}

uint64_t sub_23C6D51B8()
{
  return MEMORY[0x270F802F8]();
}

uint64_t sub_23C6D51C8()
{
  return MEMORY[0x270F80360]();
}

uint64_t sub_23C6D51D8()
{
  return MEMORY[0x270F80368]();
}

uint64_t sub_23C6D51E8()
{
  return MEMORY[0x270F80370]();
}

uint64_t sub_23C6D51F8()
{
  return MEMORY[0x270F80378]();
}

uint64_t sub_23C6D5208()
{
  return MEMORY[0x270F860D0]();
}

uint64_t sub_23C6D5218()
{
  return MEMORY[0x270F80460]();
}

uint64_t sub_23C6D5228()
{
  return MEMORY[0x270F80468]();
}

uint64_t sub_23C6D5238()
{
  return MEMORY[0x270F80480]();
}

uint64_t sub_23C6D5248()
{
  return MEMORY[0x270F804B0]();
}

uint64_t sub_23C6D5258()
{
  return MEMORY[0x270F804B8]();
}

uint64_t sub_23C6D5268()
{
  return MEMORY[0x270F80528]();
}

uint64_t sub_23C6D5278()
{
  return MEMORY[0x270F80540]();
}

uint64_t sub_23C6D5288()
{
  return MEMORY[0x270F80548]();
}

uint64_t sub_23C6D5298()
{
  return MEMORY[0x270F80550]();
}

uint64_t sub_23C6D52A8()
{
  return MEMORY[0x270F80558]();
}

uint64_t sub_23C6D52B8()
{
  return MEMORY[0x270F80560]();
}

uint64_t sub_23C6D52C8()
{
  return MEMORY[0x270F80570]();
}

uint64_t sub_23C6D52D8()
{
  return MEMORY[0x270F805C0]();
}

uint64_t sub_23C6D52E8()
{
  return MEMORY[0x270F80600]();
}

uint64_t sub_23C6D52F8()
{
  return MEMORY[0x270F80608]();
}

uint64_t sub_23C6D5308()
{
  return MEMORY[0x270F80618]();
}

uint64_t sub_23C6D5318()
{
  return MEMORY[0x270F80620]();
}

uint64_t sub_23C6D5328()
{
  return MEMORY[0x270F80628]();
}

uint64_t sub_23C6D5338()
{
  return MEMORY[0x270F80640]();
}

uint64_t sub_23C6D5348()
{
  return MEMORY[0x270F80648]();
}

uint64_t sub_23C6D5358()
{
  return MEMORY[0x270F80680]();
}

uint64_t sub_23C6D5368()
{
  return MEMORY[0x270F80698]();
}

uint64_t sub_23C6D5378()
{
  return MEMORY[0x270F806A0]();
}

uint64_t sub_23C6D5388()
{
  return MEMORY[0x270F806B0]();
}

uint64_t sub_23C6D5398()
{
  return MEMORY[0x270F806C0]();
}

uint64_t sub_23C6D53A8()
{
  return MEMORY[0x270F806C8]();
}

uint64_t sub_23C6D53B8()
{
  return MEMORY[0x270F806D0]();
}

uint64_t sub_23C6D53C8()
{
  return MEMORY[0x270F806D8]();
}

uint64_t sub_23C6D53D8()
{
  return MEMORY[0x270F806E0]();
}

uint64_t sub_23C6D53E8()
{
  return MEMORY[0x270FA0A10]();
}

uint64_t sub_23C6D53F8()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t sub_23C6D5408()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_23C6D5418()
{
  return MEMORY[0x270EF1840]();
}

uint64_t sub_23C6D5428()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t sub_23C6D5438()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_23C6D5448()
{
  return MEMORY[0x270F9D380]();
}

uint64_t sub_23C6D5458()
{
  return MEMORY[0x270F9D3A8]();
}

uint64_t sub_23C6D5468()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_23C6D5478()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_23C6D5488()
{
  return MEMORY[0x270EE1EF0]();
}

uint64_t sub_23C6D5498()
{
  return MEMORY[0x270EF18C0]();
}

uint64_t sub_23C6D54A8()
{
  return MEMORY[0x270EF18D0]();
}

uint64_t sub_23C6D54B8()
{
  return MEMORY[0x270EF18D8]();
}

uint64_t sub_23C6D54C8()
{
  return MEMORY[0x270EF1908]();
}

uint64_t sub_23C6D54D8()
{
  return MEMORY[0x270EF1918]();
}

uint64_t sub_23C6D54E8()
{
  return MEMORY[0x270EF1928]();
}

uint64_t sub_23C6D54F8()
{
  return MEMORY[0x270EF1938]();
}

uint64_t sub_23C6D5508()
{
  return MEMORY[0x270EF1950]();
}

uint64_t sub_23C6D5518()
{
  return MEMORY[0x270EF1958]();
}

uint64_t sub_23C6D5528()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_23C6D5538()
{
  return MEMORY[0x270EF19B8]();
}

uint64_t sub_23C6D5548()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t sub_23C6D5558()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t sub_23C6D5568()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_23C6D5578()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t sub_23C6D5588()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_23C6D5598()
{
  return MEMORY[0x270F9D5F8]();
}

uint64_t sub_23C6D55A8()
{
  return MEMORY[0x270F9D6B0]();
}

uint64_t sub_23C6D55B8()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_23C6D55C8()
{
  return MEMORY[0x270F9D740]();
}

uint64_t sub_23C6D55D8()
{
  return MEMORY[0x270F9D758]();
}

uint64_t sub_23C6D55E8()
{
  return MEMORY[0x270F9D788]();
}

uint64_t sub_23C6D55F8()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_23C6D5608()
{
  return MEMORY[0x270F9D7D8]();
}

uint64_t sub_23C6D5618()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_23C6D5628()
{
  return MEMORY[0x270F9D800]();
}

uint64_t sub_23C6D5638()
{
  return MEMORY[0x270F9D860]();
}

uint64_t sub_23C6D5648()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t sub_23C6D5658()
{
  return MEMORY[0x270F9D8F0]();
}

uint64_t sub_23C6D5668()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t sub_23C6D5678()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t sub_23C6D5688()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_23C6D5698()
{
  return MEMORY[0x270EF1B88]();
}

uint64_t sub_23C6D56A8()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_23C6D56B8()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_23C6D56C8()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_23C6D56D8()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_23C6D56E8()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_23C6D56F8()
{
  return MEMORY[0x270EE1F10]();
}

uint64_t sub_23C6D5708()
{
  return MEMORY[0x270EF1BE8]();
}

uint64_t sub_23C6D5718()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t sub_23C6D5728()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t sub_23C6D5738()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t sub_23C6D5758()
{
  return MEMORY[0x270FA1EA0]();
}

uint64_t sub_23C6D5768()
{
  return MEMORY[0x270FA1EA8]();
}

uint64_t sub_23C6D5778()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t sub_23C6D5788()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t sub_23C6D5798()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t sub_23C6D57A8()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t sub_23C6D57B8()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t sub_23C6D57C8()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t sub_23C6D57D8()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t sub_23C6D57E8()
{
  return MEMORY[0x270F806F8]();
}

uint64_t sub_23C6D57F8()
{
  return MEMORY[0x270F860F8]();
}

uint64_t sub_23C6D5808()
{
  return MEMORY[0x270F86100]();
}

uint64_t sub_23C6D5818()
{
  return MEMORY[0x270F86108]();
}

uint64_t sub_23C6D5828()
{
  return MEMORY[0x270F86110]();
}

uint64_t sub_23C6D5838()
{
  return MEMORY[0x270F86118]();
}

uint64_t sub_23C6D5848()
{
  return MEMORY[0x270F86120]();
}

uint64_t sub_23C6D5858()
{
  return MEMORY[0x270F86128]();
}

uint64_t sub_23C6D5868()
{
  return MEMORY[0x270F86130]();
}

uint64_t sub_23C6D5878()
{
  return MEMORY[0x270F86138]();
}

uint64_t sub_23C6D5898()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t sub_23C6D58A8()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t sub_23C6D58B8()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_23C6D58C8()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t sub_23C6D58D8()
{
  return MEMORY[0x270F86148]();
}

uint64_t sub_23C6D58E8()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t sub_23C6D58F8()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t sub_23C6D5908()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t sub_23C6D5918()
{
  return MEMORY[0x270F86158]();
}

uint64_t sub_23C6D5928()
{
  return MEMORY[0x270F86160]();
}

uint64_t sub_23C6D5938()
{
  return MEMORY[0x270EF1FD8]();
}

uint64_t sub_23C6D5948()
{
  return MEMORY[0x270EF1FE8]();
}

uint64_t sub_23C6D5958()
{
  return MEMORY[0x270EF1FF8]();
}

uint64_t sub_23C6D5968()
{
  return MEMORY[0x270F80708]();
}

uint64_t sub_23C6D5998()
{
  return MEMORY[0x270FA0890]();
}

uint64_t sub_23C6D59A8()
{
  return MEMORY[0x270F861D8]();
}

uint64_t sub_23C6D59B8()
{
  return MEMORY[0x270F861E0]();
}

uint64_t sub_23C6D59D8()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_23C6D59E8()
{
  return MEMORY[0x270FA1190]();
}

uint64_t sub_23C6D59F8()
{
  return MEMORY[0x270EF21A8]();
}

uint64_t sub_23C6D5A08()
{
  return MEMORY[0x270F86200]();
}

uint64_t sub_23C6D5A18()
{
  return MEMORY[0x270F86210]();
}

uint64_t sub_23C6D5A28()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_23C6D5A38()
{
  return MEMORY[0x270F9E468]();
}

uint64_t sub_23C6D5A48()
{
  return MEMORY[0x270F9E518]();
}

uint64_t sub_23C6D5A58()
{
  return MEMORY[0x270EF23C8]();
}

uint64_t sub_23C6D5A68()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_23C6D5A78()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_23C6D5A88()
{
  return MEMORY[0x270EF23D8]();
}

uint64_t sub_23C6D5A98()
{
  return MEMORY[0x270EF2410]();
}

uint64_t sub_23C6D5AA8()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t sub_23C6D5AB8()
{
  return MEMORY[0x270EF25B0]();
}

uint64_t sub_23C6D5AC8()
{
  return MEMORY[0x270F9E670]();
}

uint64_t sub_23C6D5AD8()
{
  return MEMORY[0x270F9E6A0]();
}

uint64_t sub_23C6D5AE8()
{
  return MEMORY[0x270F9E6B0]();
}

uint64_t sub_23C6D5AF8()
{
  return MEMORY[0x270F9E740]();
}

uint64_t sub_23C6D5B08()
{
  return MEMORY[0x270F9E798]();
}

uint64_t sub_23C6D5B18()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_23C6D5B28()
{
  return MEMORY[0x270F9E818]();
}

uint64_t sub_23C6D5B38()
{
  return MEMORY[0x270F9E870]();
}

uint64_t sub_23C6D5B58()
{
  return MEMORY[0x270F9E9A0]();
}

uint64_t sub_23C6D5B68()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_23C6D5B78()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_23C6D5B88()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_23C6D5B98()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t sub_23C6D5BA8()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_23C6D5BB8()
{
  return MEMORY[0x270F9EB30]();
}

uint64_t sub_23C6D5BC8()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_23C6D5BD8()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_23C6D5BE8()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_23C6D5BF8()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_23C6D5C08()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_23C6D5C18()
{
  return MEMORY[0x270F9EF08]();
}

uint64_t sub_23C6D5C28()
{
  return MEMORY[0x270F9EF20]();
}

uint64_t sub_23C6D5C38()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_23C6D5C48()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_23C6D5C58()
{
  return MEMORY[0x270F9F000]();
}

uint64_t sub_23C6D5C68()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_23C6D5C78()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_23C6D5C88()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_23C6D5CA8()
{
  return MEMORY[0x270F9F230]();
}

uint64_t sub_23C6D5CB8()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_23C6D5CC8()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_23C6D5CE8()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t sub_23C6D5CF8()
{
  return MEMORY[0x270F9F7C8]();
}

uint64_t sub_23C6D5D08()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_23C6D5D18()
{
  return MEMORY[0x270F9F918]();
}

uint64_t sub_23C6D5D28()
{
  return MEMORY[0x270F9F920]();
}

uint64_t sub_23C6D5D48()
{
  return MEMORY[0x270F9FA68]();
}

uint64_t sub_23C6D5D58()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_23C6D5D88()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_23C6D5D98()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_23C6D5DA8()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_23C6D5DB8()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_23C6D5DC8()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_23C6D5DD8()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_23C6D5DE8()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_23C6D5DF8()
{
  return MEMORY[0x270F9FC90]();
}

void AudioServicesPlaySystemSoundWithCompletion(SystemSoundID inSystemSoundID, void *inCompletionBlock)
{
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x270F10AF0]();
}

uint64_t CARenderServerGetDisplayLogicalBounds()
{
  return MEMORY[0x270EFB8A0]();
}

uint64_t CARenderServerSnapshot()
{
  return MEMORY[0x270EFB8D8]();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
}

uint64_t CCRSACryptorCreatePublicKeyFromPrivateKey()
{
  return MEMORY[0x270ED7A40]();
}

uint64_t CCRSACryptorExport()
{
  return MEMORY[0x270ED7A48]();
}

uint64_t CCRSACryptorGeneratePair()
{
  return MEMORY[0x270ED7A50]();
}

uint64_t CCRSACryptorImport()
{
  return MEMORY[0x270ED7A58]();
}

uint64_t CCRSACryptorRelease()
{
  return MEMORY[0x270ED7A60]();
}

uint64_t CCRSAGetKeyComponents()
{
  return MEMORY[0x270ED7A68]();
}

uint64_t CCRSAGetKeySize()
{
  return MEMORY[0x270ED7A70]();
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7AD0](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7AF0](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7B28](data, *(void *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x270EE4440](arg);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFHTTPMessageRef CFHTTPMessageCreateRequest(CFAllocatorRef alloc, CFStringRef requestMethod, CFURLRef url, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x270EE2890](alloc, requestMethod, url, httpVersion);
}

void CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField, CFStringRef value)
{
}

CFHostRef CFHostCreateWithName(CFAllocatorRef allocator, CFStringRef hostname)
{
  return (CFHostRef)MEMORY[0x270EE28D8](allocator, hostname);
}

CFArrayRef CFHostGetAddressing(CFHostRef theHost, Boolean *hasBeenResolved)
{
  return (CFArrayRef)MEMORY[0x270EE28E0](theHost, hasBeenResolved);
}

Boolean CFHostStartInfoResolution(CFHostRef theHost, CFHostInfoType info, CFStreamError *error)
{
  return MEMORY[0x270EE28F8](theHost, *(void *)&info, error);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x270EE4CD0](key, applicationID, keyExistsAndHasValidFormat);
}

CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x270EE4D78](stream);
}

CFReadStreamRef CFReadStreamCreateForHTTPRequest(CFAllocatorRef alloc, CFHTTPMessageRef request)
{
  return (CFReadStreamRef)MEMORY[0x270EE2908](alloc, request);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x270EE4DB8](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x270EE4DC0](stream, buffer, bufferLength);
}

void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x270EE4DD0](stream, streamEvents, clientCB, clientContext);
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x270EE4DE0](stream, propertyName, propertyValue);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x270EE4E68]();
}

CFSocketError CFSocketConnectToAddress(CFSocketRef s, CFDataRef address, CFTimeInterval timeout)
{
  return MEMORY[0x270EE4FB8](s, address, timeout);
}

CFSocketRef CFSocketCreate(CFAllocatorRef allocator, SInt32 protocolFamily, SInt32 socketType, SInt32 protocol, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context)
{
  return (CFSocketRef)MEMORY[0x270EE4FC0](allocator, *(void *)&protocolFamily, *(void *)&socketType, *(void *)&protocol, callBackTypes, callout, context);
}

CFSocketNativeHandle CFSocketGetNative(CFSocketRef s)
{
  return MEMORY[0x270EE4FE8](s);
}

void CFSocketInvalidate(CFSocketRef s)
{
}

void CFStreamCreateBoundPair(CFAllocatorRef alloc, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream, CFIndex transferBufferSize)
{
}

CFStringRef CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE5060](*(void *)&encoding);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x270EE5068](*(void *)&encoding);
}

CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString)
{
  return MEMORY[0x270EE5070](theString);
}

CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unint64_t encoding)
{
  return MEMORY[0x270EE5078](encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x270EE5128](alloc, str, range.location, range.length);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x270EE5170](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFStringRef CFStringGetNameOfEncoding(CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE51F0](*(void *)&encoding);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x270EE5338](url);
}

CFStringRef CFURLCopyPassword(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5340](anURL);
}

CFStringRef CFURLCopyUserName(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5378](anURL);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x270EE53A0](allocator, url);
}

CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE53D0](allocator, originalString, charactersToLeaveUnescaped, legalURLCharactersToBeEscaped, *(void *)&encoding);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x270EE53D8](allocator, originalString, charactersToLeaveEscaped);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(CFAllocatorRef allocator, CFStringRef origString, CFStringRef charsToLeaveEscaped, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE53E0](allocator, origString, charsToLeaveEscaped, *(void *)&encoding);
}

Boolean CFURLHasDirectoryPath(CFURLRef anURL)
{
  return MEMORY[0x270EE5450](anURL);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x270EE5470](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x270EE5488](alloc, uuid);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x270EE5960](retstr, t1, t2);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x270EE5980](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x270EE5998](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59A8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59B0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59C8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59D8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C60]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextClip(CGContextRef c)
{
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x270EE62E0](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x270EE6738](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x270EE6750](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

uint64_t CGImageDestinationCopyImageFormats()
{
  return MEMORY[0x270EF4F08]();
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F38](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

void CGImageRelease(CGImageRef image)
{
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7060](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

void CGPathRelease(CGPathRef path)
{
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x270EE7108](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x270EE7168](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x270EE7230]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x270EE7E10](retstr, value, *(void *)&timescale);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x270EE7EF8](retstr, start, duration);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AF8](name, matrix, size);
}

BOOL CTFontGetGlyphsForCharacters(CTFontRef font, const UniChar *characters, CGGlyph *glyphs, CFIndex count)
{
  return MEMORY[0x270EE9C28](font, characters, glyphs, count);
}

uint64_t INCRouteAudioToAirplayOutputDevices()
{
  return MEMORY[0x270F44630]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x270EF4C28](properties);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x270EF4C58](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E18](buffer, *(void *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E88](buffer, *(void *)&options, seed);
}

BOOL JSCheckScriptSyntax(JSContextRef ctx, JSStringRef script, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  return MEMORY[0x270EF52E8](ctx, script, sourceURL, *(void *)&startingLineNumber, exception);
}

CFStringRef JSStringCopyCFString(CFAllocatorRef alloc, JSStringRef string)
{
  return (CFStringRef)MEMORY[0x270EF53C8](alloc, string);
}

JSStringRef JSStringCreateWithUTF8CString(const char *string)
{
  return (JSStringRef)MEMORY[0x270EF53D8](string);
}

void JSStringRelease(JSStringRef string)
{
}

JSStringRef JSValueToStringCopy(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return (JSStringRef)MEMORY[0x270EF54A0](ctx, value, exception);
}

uint64_t MRAVEndpointGetLocalEndpoint()
{
  return MEMORY[0x270F49BE0]();
}

uint64_t MRAVOutputDeviceCopyAvailableBluetoothListeningMode()
{
  return MEMORY[0x270F49C78]();
}

uint64_t MRAVOutputDeviceSetCurrentBluetoothListeningMode()
{
  return MEMORY[0x270F49CC0]();
}

uint64_t MRAVReconnaissanceSessionBeginEndpointsSearch()
{
  return MEMORY[0x270F49CD8]();
}

uint64_t MRAVReconnaissanceSessionCreateWithEndpointFeatures()
{
  return MEMORY[0x270F49CF0]();
}

uint64_t MRAVReconnaissanceSessionSetReturnPartialResults()
{
  return MEMORY[0x270F49D10]();
}

uint64_t MRAVReconnaissanceSessionSetWaitForUnanimousEndpoints()
{
  return MEMORY[0x270F49D28]();
}

uint64_t MRMediaRemoteCopyCommandDescription()
{
  return MEMORY[0x270F49ED8]();
}

uint64_t MRMediaRemoteCopyCommandHandlerStatusDescription()
{
  return MEMORY[0x270F49EE0]();
}

uint64_t MRMediaRemoteCopySendCommandErrorDescription()
{
  return MEMORY[0x270F49F10]();
}

uint64_t MRMediaRemoteGetLocalOrigin()
{
  return MEMORY[0x270F49F68]();
}

uint64_t MRMediaRemotePlaybackSessionMigrateForDevice()
{
  return MEMORY[0x270F4A010]();
}

uint64_t MRMediaRemoteSendCommandToPlayer()
{
  return MEMORY[0x270F4A058]();
}

uint64_t MRMediaRemoteSendCommandWithReply()
{
  return MEMORY[0x270F4A068]();
}

uint64_t MRMediaRemoteSetAppPlaybackQueueForPlayer()
{
  return MEMORY[0x270F4A078]();
}

uint64_t MRNowPlayingClientCreate()
{
  return MEMORY[0x270F4A0C0]();
}

uint64_t MRNowPlayingPlayerCreate()
{
  return MEMORY[0x270F4A0E8]();
}

uint64_t MRNowPlayingPlayerPathCreate()
{
  return MEMORY[0x270F4A100]();
}

uint64_t MRSystemAppPlaybackQueueCreate()
{
  return MEMORY[0x270F4A210]();
}

uint64_t MRSystemAppPlaybackQueueDestroy()
{
  return MEMORY[0x270F4A228]();
}

uint64_t MRSystemAppPlaybackQueueSetGenericTrackIdentifiers()
{
  return MEMORY[0x270F4A250]();
}

uint64_t MRSystemAppPlaybackQueueSetIsRequestingImmediatePlayback()
{
  return MEMORY[0x270F4A258]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x270EF2AF8](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.locatioint n = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
}

NSRange NSRangeFromString(NSString *aString)
{
  NSUInteger v1 = MEMORY[0x270EF2BA8](aString);
  result.length = v2;
  result.locatioint n = v1;
  return result;
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x270EF2BD8](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x270EF2BE8](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x270EF2C28](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

uint64_t SBSLockDevice()
{
  return MEMORY[0x270F77198]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x270EFD970](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x270EFD978](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x270EFD980](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x270EFD988](query, attributesToUpdate);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x270EFDCD0](allocator);
}

uint32_t SecTaskGetCodeSignStatus(SecTaskRef task)
{
  return MEMORY[0x270EFDCE8](task);
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
}

void UIGraphicsEndImageContext(void)
{
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return (UIImage *)MEMORY[0x270F06038]();
}

NSData *__cdecl UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality)
{
  return (NSData *)MEMORY[0x270F06070](image, compressionQuality);
}

CFStringRef UTTypeCopyPreferredTagWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  return (CFStringRef)MEMORY[0x270EE8570](inUTI, inTagClass);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFStringRef)MEMORY[0x270EE8580](inTagClass, inTag, inConformingToUTI);
}

uint64_t VCIsDeviceLocked()
{
  return MEMORY[0x270F84818]();
}

uint64_t VCIsInternalBuild()
{
  return MEMORY[0x270F84820]();
}

uint64_t WFAddEntriesToDictionary()
{
  return MEMORY[0x270F86238]();
}

uint64_t WFAddImageFileToGIF()
{
  return MEMORY[0x270F186A0]();
}

uint64_t WFAppTransportSecuredURL()
{
  return MEMORY[0x270F186A8]();
}

uint64_t WFArchiveFormatFileExtension()
{
  return MEMORY[0x270F186B0]();
}

uint64_t WFArchiveFormatSupportsMultipleFiles()
{
  return MEMORY[0x270F186B8]();
}

uint64_t WFAsyncTransformedImageFromImage()
{
  return MEMORY[0x270F186C0]();
}

uint64_t WFCLInUseAssertionWithOptions()
{
  return MEMORY[0x270F86250]();
}

uint64_t WFCLLocationAccuracyFromWFLocationAccuracy()
{
  return MEMORY[0x270F86258]();
}

uint64_t WFCapitalizeFirstLetter()
{
  return MEMORY[0x270F86270]();
}

uint64_t WFClearWorkflowEventStore()
{
  return MEMORY[0x270F186D8]();
}

uint64_t WFContentItemListThumbnailCornerRadiusForRoundingStyle()
{
  return MEMORY[0x270F84830]();
}

uint64_t WFCreateArchiveWithFiles()
{
  return MEMORY[0x270F186E8]();
}

uint64_t WFExtractArchiveFile()
{
  return MEMORY[0x270F18708]();
}

uint64_t WFFinderImageResizeFormatFromDescription()
{
  return MEMORY[0x270F84838]();
}

uint64_t WFFinderImageResizeSizeFromDescription()
{
  return MEMORY[0x270F84840]();
}

uint64_t WFGenerateGIFFromImageFiles()
{
  return MEMORY[0x270F18710]();
}

uint64_t WFGenerateGIFFromVideo()
{
  return MEMORY[0x270F18718]();
}

uint64_t WFGenerateImageFilesFromGIF()
{
  return MEMORY[0x270F18720]();
}

uint64_t WFGenerateVideoFromGIF()
{
  return MEMORY[0x270F18728]();
}

uint64_t WFGetContentLocationFromURLActionInput()
{
  return MEMORY[0x270F18730]();
}

uint64_t WFGetWorkflowEventStore()
{
  return MEMORY[0x270F18738]();
}

uint64_t WFGetWorkflowReminderStore()
{
  return MEMORY[0x270F18740]();
}

uint64_t WFImageDataIsAnimatedGIF()
{
  return MEMORY[0x270F18750]();
}

uint64_t WFImagePropertyNameAlbum()
{
  return MEMORY[0x270F18758]();
}

uint64_t WFImagePropertyNameDateTaken()
{
  return MEMORY[0x270F18760]();
}

uint64_t WFImagePropertyNameIsScreenshot()
{
  return MEMORY[0x270F18768]();
}

uint64_t WFImagePropertyNameMediaType()
{
  return MEMORY[0x270F18770]();
}

uint64_t WFImagePropertyNamePhotoType()
{
  return MEMORY[0x270F18778]();
}

uint64_t WFImageSizeFromFile()
{
  return MEMORY[0x270F18780]();
}

uint64_t WFLivePhotoFileType()
{
  return MEMORY[0x270F18798]();
}

uint64_t WFMakeContentLocationForRemindersAccount()
{
  return MEMORY[0x270F187A8]();
}

uint64_t WFMaximumBundleVersion()
{
  return MEMORY[0x270F862A8]();
}

uint64_t WFMetadataRotateImage()
{
  return MEMORY[0x270F187B0]();
}

uint64_t WFNotesFolderIntentsValueFromLinkValue()
{
  return MEMORY[0x270F862B8]();
}

uint64_t WFNotesFolderLinkValueFromIntentsValue()
{
  return MEMORY[0x270F862C0]();
}

uint64_t WFPhotoLibraryMediaTypeImage()
{
  return MEMORY[0x270F187B8]();
}

uint64_t WFPhotoLibraryMediaTypeVideo()
{
  return MEMORY[0x270F187C0]();
}

uint64_t WFPhotoLibraryPhotoTypeBurst()
{
  return MEMORY[0x270F187C8]();
}

uint64_t WFPhotoLibraryPhotoTypeLivePhoto()
{
  return MEMORY[0x270F187D0]();
}

uint64_t WFReminderPropertyNameDueDate()
{
  return MEMORY[0x270F187E8]();
}

uint64_t WFReminderPropertyNameIsCompleted()
{
  return MEMORY[0x270F187F0]();
}

uint64_t WFReminderPropertyNameList()
{
  return MEMORY[0x270F187F8]();
}

uint64_t WFResizedImageFromImageFile()
{
  return MEMORY[0x270F18800]();
}

uint64_t WFSanitizedPostersError()
{
  return MEMORY[0x270F862C8]();
}

uint64_t WFSetEffectiveBundleForMKLocationManager()
{
  return MEMORY[0x270F862D8]();
}

uint64_t WFSettingsClientError()
{
  return MEMORY[0x270F862E0]();
}

uint64_t WFSupportedArchiveFormats()
{
  return MEMORY[0x270F18808]();
}

uint64_t WFTimeIntervalFromExpectedTravelTime()
{
  return MEMORY[0x270F18810]();
}

uint64_t WiFiDeviceClientCopyCurrentNetwork()
{
  return MEMORY[0x270F4B418]();
}

uint64_t WiFiDeviceClientGetInterfaceName()
{
  return MEMORY[0x270F4B450]();
}

uint64_t WiFiManagerClientCopyInterfaces()
{
  return MEMORY[0x270F4B4E0]();
}

uint64_t WiFiManagerClientCopyMisPassword()
{
  return MEMORY[0x270F4B4E8]();
}

uint64_t WiFiManagerClientCreate()
{
  return MEMORY[0x270F4B510]();
}

uint64_t WiFiManagerClientGetDevice()
{
  return MEMORY[0x270F4B548]();
}

uint64_t WiFiManagerClientGetMISDiscoveryState()
{
  return MEMORY[0x270F4B558]();
}

uint64_t WiFiManagerClientSetMISDiscoveryState()
{
  return MEMORY[0x270F4B638]();
}

uint64_t WiFiManagerClientSetMisPassword()
{
  return MEMORY[0x270F4B650]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return MEMORY[0x270EE55A0]();
}

uint64_t _CTServerConnectionEraseCellularDataUsageRecords()
{
  return MEMORY[0x270EE87F0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x270ED7DA8](*(void *)&a1, a2, *(void *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

void j____explicit_bzero_hook()
{
  while (1)
    ;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x270ED7E38]();
}

uint64_t __memmove_chk()
{
  return MEMORY[0x270ED7E40]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x270ED7E48]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strcpy_chk()
{
  return MEMORY[0x270ED7ED0]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x270ED7ED8]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x270ED7EE0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

void _exit(int a1)
{
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x270ED8070]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x270ED85E0]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x270ED8688](a1, a2);
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

long double cbrt(long double __x)
{
  MEMORY[0x270ED87B8](__x);
  return result;
}

uint64_t cced25519_make_key_pair()
{
  return MEMORY[0x270ED8B40]();
}

uint64_t ccrng()
{
  return MEMORY[0x270ED8C90]();
}

uint64_t ccsha512_di()
{
  return MEMORY[0x270ED8D88]();
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x270F9A400](cls, name, imp, types);
}

BOOL class_addProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x270F9A418](cls, protocol);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x270F9A430](cls, outCount);
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x270ED8F58](*(void *)&a1, a2, *(void *)&a3);
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

double difftime(time_t a1, time_t a2)
{
  MEMORY[0x270ED9180](a1, a2);
  return result;
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9448](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x270ED9468](label, attr, target);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x270ED9610](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x270ED9698]();
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x270ED98D0](*(void *)&a1, *(void *)&a2);
}

int feof(FILE *a1)
{
  return MEMORY[0x270ED9910](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x270ED9918](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x270ED9968](a1, *(void *)&a2, a3);
}

int fileno(FILE *a1)
{
  return MEMORY[0x270ED9978](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x270ED9A18](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x270ED9B30](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

uint64_t getWFActionsLogObject()
{
  return MEMORY[0x270F848C0]();
}

uint64_t getWFBundledIntentsLogObject()
{
  return MEMORY[0x270F848D0]();
}

uint64_t getWFFilesLogObject()
{
  return MEMORY[0x270F848F8]();
}

uint64_t getWFGeneralLogObject()
{
  return MEMORY[0x270F84900]();
}

uint64_t getWFIntentExecutionLogObject()
{
  return MEMORY[0x270F84910]();
}

uint64_t getWFSessionKitLogObject()
{
  return MEMORY[0x270F84920]();
}

uint64_t getWFWorkflowExecutionLogObject()
{
  return MEMORY[0x270F84948]();
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

hostent *__cdecl gethostbyname2(const char *a1, int a2)
{
  return (hostent *)MEMORY[0x270ED9C50](a1, *(void *)&a2);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x270ED9C68](a1);
}

int getpagesize(void)
{
  return MEMORY[0x270ED9CC8]();
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x270ED9D00]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x270ED9DA0]();
}

tm *__cdecl gmtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270ED9DD8](a1);
}

const char *__cdecl hstrerror(int a1)
{
  return (const char *)MEMORY[0x270ED9E50](*(void *)&a1);
}

htmlParserCtxtPtr htmlCreatePushParserCtxt(htmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename, xmlCharEncoding enc)
{
  return (htmlParserCtxtPtr)MEMORY[0x270F9BA70](sax, user_data, chunk, *(void *)&size, filename, *(void *)&enc);
}

int htmlParseChunk(htmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
{
  return MEMORY[0x270F9BAA8](ctxt, chunk, *(void *)&size, *(void *)&terminate);
}

htmlDocPtr htmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (htmlDocPtr)MEMORY[0x270F9BAC0](buffer, *(void *)&size, URL, encoding, *(void *)&options);
}

size_t iconv(iconv_t a1, char **a2, size_t *a3, char **a4, size_t *a5)
{
  return MEMORY[0x270F994B0](a1, a2, a3, a4, a5);
}

int iconv_close(iconv_t a1)
{
  return MEMORY[0x270F994B8](a1);
}

iconv_t iconv_open(const char *a1, const char *a2)
{
  return (iconv_t)MEMORY[0x270F994C0](a1, a2);
}

int iconvctl(iconv_t a1, int a2, void *a3)
{
  return MEMORY[0x270F994C8](a1, *(void *)&a2, a3);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x270ED9E70](*(void *)&a1, a2);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x270ED9EC0](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x270ED9EC8](*(void *)&a1, a2, a3);
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x270EDA4B8](__s, __smax, *(void *)&__c, __n);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x270F9A4F0](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x270F9A4F8](m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x270F9A510](m);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x270EDA588](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x270EDA738](*(void *)&token);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x270EDA750](*(void *)&val);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x270EDA760](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x270EDA770](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x270F9A648](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x270F9A658](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x270EDAB30]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x270EDAEB0](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x270EDAFA0](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB190](*(void *)&a1, a2, a3, *(void *)&a4);
}

void rewind(FILE *a1)
{
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x270EDB328](*(void *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB3B0](*(void *)&a1, a2, a3, *(void *)&a4);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x270EDB440](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x270EDB4B8](*(void *)&a1, a2, a3);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x270EDB4D0](*(void *)&a1, a2);
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x270EDB520](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x270EDB590](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x270EDB5C8](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB5F8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x270EDB620](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x270EDB650](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

size_t strspn(const char *__s, const char *__charset)
{
  return MEMORY[0x270EDB698](__s, __charset);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6E8](__str, __endptr, *(void *)&__base);
}

uint64_t strtonum(const char *__numstr, uint64_t __minval, uint64_t __maxval, const char **__errstrp)
{
  return MEMORY[0x270EDB6F8](__numstr, __minval, __maxval, __errstrp);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB708](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x270FA23F8]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x270FA2400]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x270FA2408]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x270FA2420]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x270FA2428]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x270FA04F8]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x270FA0678]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x270EDB7D0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x270EDB7D8](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

int tcgetattr(int a1, termios *a2)
{
  return MEMORY[0x270EDB8C8](*(void *)&a1, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  return MEMORY[0x270EDB8D0](*(void *)&a1, *(void *)&a2, a3);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

time_t timegm(tm *const a1)
{
  return MEMORY[0x270EDB938](a1);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  return MEMORY[0x270EDB950](__b1, __b2, __len);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBA58](a1, a2, a3);
}

uint64_t vk_cgImageRemoveBackgroundWithDownsizing()
{
  return MEMORY[0x270F83C40]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

void vsyslog(int a1, const char *a2, __darwin_va_list a3)
{
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}

const xmlChar *__cdecl xmlBufferContent(const xmlBuffer *buf)
{
  return (const xmlChar *)MEMORY[0x270F9BB40](buf);
}

xmlBufferPtr xmlBufferCreate(void)
{
  return (xmlBufferPtr)MEMORY[0x270F9BB48]();
}

void xmlBufferFree(xmlBufferPtr buf)
{
}

int xmlBufferLength(const xmlBuffer *buf)
{
  return MEMORY[0x270F9BB68](buf);
}

xmlParserCtxtPtr xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename)
{
  return (xmlParserCtxtPtr)MEMORY[0x270F9BBC8](sax, user_data, chunk, *(void *)&size, filename);
}

int xmlCtxtUseOptions(xmlParserCtxtPtr ctxt, int options)
{
  return MEMORY[0x270F9BBF0](ctxt, *(void *)&options);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x270F9BC50](doc);
}

xmlNodePtr xmlDocSetRootElement(xmlDocPtr doc, xmlNodePtr root)
{
  return (xmlNodePtr)MEMORY[0x270F9BC58](doc, root);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

void xmlFreeDtd(xmlDtdPtr cur)
{
}

void xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
{
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
}

const char *__cdecl xmlGetCharEncodingName(xmlCharEncoding enc)
{
  return (const char *)MEMORY[0x270F9BCD0](*(void *)&enc);
}

xmlExternalEntityLoader xmlGetExternalEntityLoader(void)
{
  return (xmlExternalEntityLoader)MEMORY[0x270F9BCE8]();
}

xmlErrorPtr xmlGetLastError(void)
{
  return (xmlErrorPtr)MEMORY[0x270F9BD00]();
}

uint64_t xmlGetLineNo(const xmlNode *node)
{
  return MEMORY[0x270F9BD08](node);
}

xmlChar *__cdecl xmlGetNsProp(const xmlNode *node, const xmlChar *name, const xmlChar *nameSpace)
{
  return (xmlChar *)MEMORY[0x270F9BD20](node, name, nameSpace);
}

xmlEntityPtr xmlGetPredefinedEntity(const xmlChar *name)
{
  return (xmlEntityPtr)MEMORY[0x270F9BD28](name);
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x270F9BD30](node, name);
}

void *__cdecl xmlHashLookup(xmlHashTablePtr table, const xmlChar *name)
{
  return (void *)MEMORY[0x270F9BD70](table, name);
}

xmlDtdPtr xmlIOParseDTD(xmlSAXHandlerPtr sax, xmlParserInputBufferPtr input, xmlCharEncoding enc)
{
  return (xmlDtdPtr)MEMORY[0x270F9BDC0](sax, input, *(void *)&enc);
}

xmlParserInputPtr xmlNewInputFromFile(xmlParserCtxtPtr ctxt, const char *filename)
{
  return (xmlParserInputPtr)MEMORY[0x270F9BE78](ctxt, filename);
}

xmlTextWriterPtr xmlNewTextWriter(xmlOutputBufferPtr out)
{
  return (xmlTextWriterPtr)MEMORY[0x270F9BED8](out);
}

xmlNodePtr xmlNextElementSibling(xmlNodePtr node)
{
  return (xmlNodePtr)MEMORY[0x270F9BF00](node);
}

int xmlNodeDump(xmlBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format)
{
  return MEMORY[0x270F9BF18](buf, doc, cur, *(void *)&level, *(void *)&format);
}

xmlChar *__cdecl xmlNodeGetContent(const xmlNode *cur)
{
  return (xmlChar *)MEMORY[0x270F9BF30](cur);
}

xmlOutputBufferPtr xmlOutputBufferCreateIO(xmlOutputWriteCallback iowrite, xmlOutputCloseCallback ioclose, void *ioctx, xmlCharEncodingHandlerPtr encoder)
{
  return (xmlOutputBufferPtr)MEMORY[0x270F9BF78](iowrite, ioclose, ioctx, encoder);
}

int xmlParseChunk(xmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
{
  return MEMORY[0x270F9BF90](ctxt, chunk, *(void *)&size, *(void *)&terminate);
}

xmlParserInputBufferPtr xmlParserInputBufferCreateFilename(const char *URI, xmlCharEncoding enc)
{
  return (xmlParserInputBufferPtr)MEMORY[0x270F9BFC0](URI, *(void *)&enc);
}

xmlDocPtr xmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (xmlDocPtr)MEMORY[0x270F9BFE0](buffer, *(void *)&size, URL, encoding, *(void *)&options);
}

void xmlResetError(xmlErrorPtr err)
{
}

void xmlResetLastError(void)
{
}

void xmlSetExternalEntityLoader(xmlExternalEntityLoader f)
{
}

void xmlStopParser(xmlParserCtxtPtr ctxt)
{
}

int xmlTextWriterEndCDATA(xmlTextWriterPtr writer)
{
  return MEMORY[0x270F9C220](writer);
}

int xmlTextWriterEndDocument(xmlTextWriterPtr writer)
{
  return MEMORY[0x270F9C230](writer);
}

int xmlTextWriterEndElement(xmlTextWriterPtr writer)
{
  return MEMORY[0x270F9C238](writer);
}

int xmlTextWriterSetIndent(xmlTextWriterPtr writer, int indent)
{
  return MEMORY[0x270F9C258](writer, *(void *)&indent);
}

int xmlTextWriterStartCDATA(xmlTextWriterPtr writer)
{
  return MEMORY[0x270F9C270](writer);
}

int xmlTextWriterStartDocument(xmlTextWriterPtr writer, const char *version, const char *encoding, const char *standalone)
{
  return MEMORY[0x270F9C280](writer, version, encoding, standalone);
}

int xmlTextWriterStartElement(xmlTextWriterPtr writer, const xmlChar *name)
{
  return MEMORY[0x270F9C288](writer, name);
}

int xmlTextWriterWriteAttribute(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  return MEMORY[0x270F9C2A0](writer, name, content);
}

int xmlTextWriterWriteCDATA(xmlTextWriterPtr writer, const xmlChar *content)
{
  return MEMORY[0x270F9C2B8](writer, content);
}

int xmlTextWriterWriteRaw(xmlTextWriterPtr writer, const xmlChar *content)
{
  return MEMORY[0x270F9C2D8](writer, content);
}

int xmlTextWriterWriteString(xmlTextWriterPtr writer, const xmlChar *content)
{
  return MEMORY[0x270F9C2E0](writer, content);
}

xmlXPathObjectPtr xmlXPathEvalExpression(const xmlChar *str, xmlXPathContextPtr ctxt)
{
  return (xmlXPathObjectPtr)MEMORY[0x270F9C3D8](str, ctxt);
}

void xmlXPathFreeContext(xmlXPathContextPtr ctxt)
{
}

void xmlXPathFreeObject(xmlXPathObjectPtr obj)
{
}

xmlXPathContextPtr xmlXPathNewContext(xmlDocPtr doc)
{
  return (xmlXPathContextPtr)MEMORY[0x270F9C458](doc);
}

xmlXPathObjectPtr xmlXPathNodeEval(xmlNodePtr node, const xmlChar *str, xmlXPathContextPtr ctx)
{
  return (xmlXPathObjectPtr)MEMORY[0x270F9C498](node, str, ctx);
}

int xmlXPathRegisterNs(xmlXPathContextPtr ctxt, const xmlChar *prefix, const xmlChar *ns_uri)
{
  return MEMORY[0x270F9C538](ctxt, prefix, ns_uri);
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_Calculate(double a1)
{
  return a1;
}

double gotLoadHelper_x8__CalculateKeyLocales(double result)
{
  if (!atomic_load(dlopenHelperFlag_Calculate)) {
    return dlopenHelper_Calculate(result);
  }
  return result;
}

double gotLoadHelper_x8__CalculateKeyAllowUnits(double result)
{
  if (!atomic_load(dlopenHelperFlag_Calculate)) {
    return dlopenHelper_Calculate(result);
  }
  return result;
}

double gotLoadHelper_x8__OBJC_CLASS___Calculate(double result)
{
  if (!atomic_load(dlopenHelperFlag_Calculate)) {
    return dlopenHelper_Calculate(result);
  }
  return result;
}