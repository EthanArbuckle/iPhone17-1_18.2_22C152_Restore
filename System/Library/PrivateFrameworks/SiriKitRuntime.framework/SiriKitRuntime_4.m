uint64_t specialized HomeAutomationAffinityScorer.scoreSummariseSetting(usoTask:_:)(uint64_t a1, Swift::Int a2)
{
  uint64_t v2;
  void (**v3)(char *, void, void);
  uint64_t v4;
  void (**v5)(char *, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(char *, uint64_t);
  void (**v28)(char *, uint64_t);
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int *v45;
  Swift::Int v46;
  Swift::Int v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (**v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::Int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  BOOL v80;
  uint64_t inited;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (**v87)(char *, uint64_t);
  uint64_t v88;
  int64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void (*v93)(char *, unint64_t, uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int *v108;
  Swift::Int v109;
  Swift::Int v110;
  Swift::Int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  BOOL v116;
  uint64_t v117;
  void *v118;
  BOOL v119;
  char isUniquelyReferenced_nonNull_native;
  char v121;
  char v122;
  char *v123;
  char *v124;
  char *v125;
  void (**v126)(char *, uint64_t);
  void *v127;
  BOOL v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void (*v134)(char *, unint64_t, uint64_t);
  void *v135;
  void *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  Swift::Int *v149;
  Swift::Int v150;
  Swift::Int v151;
  Swift::Int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  void *v156;
  BOOL v157;
  uint64_t v158;
  void *v159;
  BOOL v160;
  char v161;
  char v162;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint8_t *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  NSObject *v173;
  os_log_type_t v174;
  uint8_t *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  long long v184;
  void (**v185)(char *, uint64_t);
  void (**v186)(char *, void, uint64_t);
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  Swift::Int v192;
  char *v193;
  char *v194;
  uint64_t v195;
  void (**v196)(char *, uint64_t);
  uint64_t v197;
  unint64_t v198;
  void (*v199)(char *, unint64_t, uint64_t);
  uint64_t v200;
  uint64_t v201;
  void (**v202)(char *, uint64_t);
  char *v203;
  uint64_t v204;
  uint64_t v205;
  void (**v206)(char *, uint64_t);
  char *v207;
  char *v208;
  uint64_t v209;
  Swift::Int v210;
  char *v211;
  void (**v212)(char *, uint64_t);
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216[4];
  uint64_t v217;

  v192 = a2;
  v2 = type metadata accessor for IdentifierNamespace();
  v3 = *(void (***)(char *, void, void))(v2 - 8);
  MEMORY[0x1F4188790](v2);
  v193 = (char *)&v176 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = type metadata accessor for IdentifierAppBundle();
  v5 = *(void (***)(char *, uint64_t))(v204 - 8);
  MEMORY[0x1F4188790](v204);
  v203 = (char *)&v176 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = type metadata accessor for SpanProperty();
  v209 = *(void *)(v215 - 8);
  v7 = MEMORY[0x1F4188790](v215);
  v211 = (char *)&v176 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  v214 = (char *)&v176 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  MEMORY[0x1F4188790](v10 - 8);
  v12 = (char *)&v176 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UsoEntitySpan();
  v201 = *(void *)(v13 - 8);
  v14 = MEMORY[0x1F4188790](v13);
  v16 = (char *)&v176 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1F4188790](v14);
  v207 = (char *)&v176 - v18;
  v19 = MEMORY[0x1F4188790](v17);
  v208 = (char *)&v176 - v20;
  v21 = MEMORY[0x1F4188790](v19);
  v23 = (char *)&v176 - v22;
  MEMORY[0x1F4188790](v21);
  v194 = (char *)&v176 - v24;
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v216[3])
  {
    v50 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    v51 = v216;
LABEL_23:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v51, v50);
    return 5;
  }
  type metadata accessor for UsoTask_summarise_common_Setting();
  if ((swift_dynamicCast() & 1) == 0) {
    return 5;
  }
  v188 = v2;
  v25 = v217;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  swift_release();
  if (!v216[0]
    || (v26 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)(), swift_release(), !v26))
  {
LABEL_24:
    swift_release();
    return 5;
  }
  v187 = v25;
  v27 = *(void (***)(char *, uint64_t))(v26 + 16);
  v195 = v13;
  v189 = v16;
  v202 = v27;
  if (v27)
  {
    v185 = v5;
    v186 = v3;
    v199 = *(void (**)(char *, unint64_t, uint64_t))(v201 + 16);
    v198 = v26 + ((*(unsigned __int8 *)(v201 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v201 + 80));
    v212 = (void (**)(char *, uint64_t))(v209 + 8);
    v213 = v209 + 16;
    v196 = (void (**)(char *, uint64_t))(v201 + 8);
    v200 = v201 + 16;
    v197 = *(void *)(v201 + 72);
    *(void *)&v184 = v26;
    swift_bridgeObjectRetain();
    v28 = 0;
    v191 = v12;
    v190 = v23;
    while (1)
    {
      v199(v23, v198 + v197 * (void)v28, v13);
      v210 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of HomeAutomationAffinityScorer.scoreSummariseSetting(usoTask:_:));
      swift_arrayDestroy();
      v29 = UsoEntitySpan.properties.getter();
      v30 = *(void *)(v29 + 16);
      if (v30)
      {
        v206 = v28;
        v216[0] = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
        v31 = (*(unsigned __int8 *)(v209 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80);
        v205 = v29;
        v32 = v29 + v31;
        v33 = *(void *)(v209 + 72);
        v34 = *(void (**)(char *, unint64_t, uint64_t))(v209 + 16);
        do
        {
          v35 = v214;
          v36 = v215;
          v34(v214, v32, v215);
          v37 = SpanProperty.key.getter();
          v39 = v38;
          (*v212)(v35, v36);
          v40 = v216[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1);
            v40 = v216[0];
          }
          v42 = *(void *)(v40 + 16);
          v41 = *(void *)(v40 + 24);
          if (v42 >= v41 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
            v40 = v216[0];
          }
          *(void *)(v40 + 16) = v42 + 1;
          v43 = v40 + 16 * v42;
          *(void *)(v43 + 32) = v37;
          *(void *)(v43 + 40) = v39;
          v32 += v33;
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease();
        v13 = v195;
        v12 = v191;
        v23 = v190;
        v28 = v206;
      }
      else
      {
        swift_bridgeObjectRelease();
        v40 = MEMORY[0x1E4FBC860];
      }
      v217 = Set.init(minimumCapacity:)();
      v44 = *(void *)(v40 + 16);
      if (v44)
      {
        v45 = (Swift::Int *)(v40 + 40);
        do
        {
          v46 = *(v45 - 1);
          v47 = *v45;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(v216, v46, v47);
          swift_bridgeObjectRelease();
          v45 += 2;
          --v44;
        }
        while (v44);
      }
      swift_bridgeObjectRelease();
      v48 = specialized Set.isDisjoint(with:)(v217, v210);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0) {
        break;
      }
      v28 = (void (**)(char *, uint64_t))((char *)v28 + 1);
      (*v196)(v23, v13);
      if (v28 == v202)
      {
        swift_bridgeObjectRelease();
        v49 = 1;
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v201 + 32))(v12, v23, v13);
    v49 = 0;
LABEL_29:
    v3 = v186;
    v5 = v185;
  }
  else
  {
    v49 = 1;
  }
  v54 = v201;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v201 + 56))(v12, v49, 1, v13);
  swift_bridgeObjectRelease();
  v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48))(v12, 1, v13);
  v56 = v194;
  if (v55 == 1)
  {
    swift_release();
    v50 = &demangling cache variable for type metadata for UsoEntitySpan?;
    v51 = (uint64_t *)v12;
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v194, v12, v13);
  if (one-time initialization token for kSummariseSettingStrictValues != -1) {
    swift_once();
  }
  if (!UsoEntitySpan.anyPropertiesValueMatchAny(value:)(static HomeAutomationAffinityScorer.kSummariseSettingStrictValues))
  {
    (*(void (**)(char *, uint64_t))(v201 + 8))(v56, v13);
    goto LABEL_24;
  }
  if ((~v192 & 0x1000000010000) == 0)
  {
    if (one-time initialization token for executor == -1)
    {
LABEL_37:
      v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)static Logger.executor);
      v58 = Logger.logObject.getter();
      v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v60 = 0;
        _os_log_impl(&dword_1B9C64000, v58, v59, "HomeAutomationAffinityScorer - [High] USO entity spans satisfy condition:\n(GeneralNamespaceMatches || ExactNameSpaceMatch) && PlaceHintGeneralMatches", v60, 2u);
        MEMORY[0x1BA9E48C0](v60, -1, -1);
      }
      swift_release();

      (*(void (**)(char *, uint64_t))(v201 + 8))(v194, v13);
      return 3;
    }
LABEL_157:
    swift_once();
    goto LABEL_37;
  }
  swift_retain();
  v61 = dispatch thunk of Uso_VerbTemplate_Reference.userEntities.getter();
  swift_release();
  if (v61)
  {
    v62 = specialized Sequence.compactMap<A>(_:)(v61);
    swift_bridgeObjectRelease();
    v178 = v62;
    v176 = 0;
    if (v62 >> 62)
    {
      swift_bridgeObjectRetain();
      v62 = v178;
      v63 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      v63 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v64 = v208;
    v179 = v63;
    if (v63)
    {
      v65 = 0;
      v180 = v62 & 0xC000000000000001;
      v177 = v62 + 32;
      v196 = v5 + 1;
      LODWORD(v190) = *MEMORY[0x1E4FA3060];
      v186 = v3 + 13;
      v185 = (void (**)(char *, uint64_t))(v3 + 1);
      v212 = (void (**)(char *, uint64_t))(v209 + 8);
      v213 = v209 + 16;
      v184 = xmmword_1BA04FD90;
      v202 = (void (**)(char *, uint64_t))(v201 + 8);
      v200 = v201 + 16;
      while (1)
      {
        if (v180)
        {
          v66 = MEMORY[0x1BA9E3990](v65, v62);
        }
        else
        {
          v66 = *(void *)(v177 + 8 * v65);
          swift_retain();
        }
        v183 = v65 + 1;
        if (__OFADD__(v65, 1))
        {
          __break(1u);
          goto LABEL_157;
        }
        v67 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
        if (!v67) {
          v67 = MEMORY[0x1E4FBC860];
        }
        v199 = *(void (**)(char *, unint64_t, uint64_t))(v67 + 16);
        if (v199) {
          break;
        }
        swift_release();
        swift_bridgeObjectRelease();
LABEL_47:
        v65 = v183;
        if (v183 == v179) {
          goto LABEL_149;
        }
      }
      v182 = v66;
      v198 = v67 + ((*(unsigned __int8 *)(v201 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v201 + 80));
      v197 = *(void *)(v201 + 72);
      v68 = *(void (***)(char *, uint64_t))(v201 + 16);
      v181 = v67;
      swift_bridgeObjectRetain();
      v69 = 0;
      v206 = v68;
      while (1)
      {
        v205 = v69;
        ((void (*)(char *, unint64_t, uint64_t))v68)(v64, v198 + v197 * v69, v13);
        if (one-time initialization token for kAppBundleIdMatches != -1) {
          swift_once();
        }
        v70 = static HomeAutomationAffinityScorer.kAppBundleIdMatches;
        v71 = v203;
        UsoEntitySpan.appBundleSemantic.getter();
        v72 = IdentifierAppBundle.rawValue.getter();
        v74 = v73;
        (*v196)(v71, v204);
        if (!*(void *)(v70 + 16)) {
          goto LABEL_108;
        }
        Hasher.init(_seed:)();
        String.hash(into:)();
        v75 = Hasher._finalize()();
        v76 = -1 << *(unsigned char *)(v70 + 32);
        v77 = v75 & ~v76;
        if (((*(void *)(v70 + 56 + ((v77 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v77) & 1) == 0) {
          goto LABEL_108;
        }
        v78 = *(void *)(v70 + 48);
        v79 = (void *)(v78 + 16 * v77);
        v80 = *v79 == v72 && v79[1] == v74;
        if (!v80 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
LABEL_67:
        swift_bridgeObjectRelease();
        ((void (*)(char *, char *, uint64_t))v206)(v207, v208, v13);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v184;
        v82 = v193;
        v83 = v188;
        (*v186)(v193, v190, v188);
        v84 = IdentifierNamespace.rawValue.getter();
        v86 = v85;
        (*v185)(v82, v83);
        *(void *)(inited + 32) = v84;
        *(void *)(inited + 40) = v86;
        v87 = v202;
        if (*(void *)(inited + 16)) {
          v192 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
        }
        else {
          v192 = MEMORY[0x1E4FBC870];
        }
        swift_setDeallocating();
        swift_arrayDestroy();
        v88 = UsoEntitySpan.properties.getter();
        v89 = *(void *)(v88 + 16);
        if (v89)
        {
          v216[0] = MEMORY[0x1E4FBC860];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89, 0);
          v90 = (*(unsigned __int8 *)(v209 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80);
          v210 = v88;
          v91 = v88 + v90;
          v92 = *(void *)(v209 + 72);
          v93 = *(void (**)(char *, unint64_t, uint64_t))(v209 + 16);
          do
          {
            v94 = v214;
            v95 = v215;
            v93(v214, v91, v215);
            v96 = SpanProperty.key.getter();
            v98 = v97;
            (*v212)(v94, v95);
            v99 = v216[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v99 + 16) + 1, 1);
              v99 = v216[0];
            }
            v101 = *(void *)(v99 + 16);
            v100 = *(void *)(v99 + 24);
            if (v101 >= v100 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v100 > 1, v101 + 1, 1);
              v99 = v216[0];
            }
            *(void *)(v99 + 16) = v101 + 1;
            v102 = v99 + 16 * v101;
            *(void *)(v102 + 32) = v96;
            *(void *)(v102 + 40) = v98;
            v91 += v92;
            --v89;
          }
          while (v89);
          swift_bridgeObjectRelease();
          v87 = v202;
        }
        else
        {
          swift_bridgeObjectRelease();
          v99 = MEMORY[0x1E4FBC860];
        }
        v103 = Set.init(minimumCapacity:)();
        v104 = v103;
        v105 = *(void *)(v99 + 16);
        if (v105)
        {
          v106 = 0;
          v210 = v99 + 32;
          v107 = v103 + 56;
          while (1)
          {
            v108 = (Swift::Int *)(v210 + 16 * v106);
            v110 = *v108;
            v109 = v108[1];
            ++v106;
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            v111 = Hasher._finalize()();
            v112 = -1 << *(unsigned char *)(v104 + 32);
            v113 = v111 & ~v112;
            if (((*(void *)(v107 + ((v113 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v113) & 1) == 0) {
              goto LABEL_96;
            }
            v114 = *(void *)(v104 + 48);
            v115 = (void *)(v114 + 16 * v113);
            v116 = *v115 == v110 && v115[1] == v109;
            if (v116 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_81:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v106 == v105) {
                goto LABEL_98;
              }
            }
            else
            {
              v117 = ~v112;
              while (1)
              {
                v113 = (v113 + 1) & v117;
                if (((*(void *)(v107 + ((v113 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v113) & 1) == 0) {
                  break;
                }
                v118 = (void *)(v114 + 16 * v113);
                v119 = *v118 == v110 && v118[1] == v109;
                if (v119 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_81;
                }
              }
LABEL_96:
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v216[0] = v104;
              swift_bridgeObjectRetain();
              specialized _NativeSet.insertNew(_:at:isUnique:)(v110, v109, v113, isUniquelyReferenced_nonNull_native);
              v104 = v216[0];
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v106 == v105)
              {
LABEL_98:
                swift_bridgeObjectRelease();
                v87 = v202;
                goto LABEL_100;
              }
              v107 = v104 + 56;
            }
          }
        }
        swift_bridgeObjectRelease();
LABEL_100:
        v121 = specialized Set.isDisjoint(with:)(v104, v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v122 = v121 ^ 1;
        v13 = v195;
        v123 = v189;
        v124 = v207;
        v125 = v208;
        v126 = v206;
LABEL_109:
        v129 = *v87;
        (*v87)(v124, v13);
        ((void (*)(char *, char *, uint64_t))v126)(v123, v125, v13);
        if (v122)
        {
          v192 = (Swift::Int)v129;
          if (one-time initialization token for kHKEntityTypes != -1) {
            swift_once();
          }
          v191 = (char *)static HomeAutomationAffinityScorer.kHKEntityTypes;
          v130 = UsoEntitySpan.properties.getter();
          v131 = *(void *)(v130 + 16);
          if (v131)
          {
            v132 = v130
                 + ((*(unsigned __int8 *)(v209 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80));
            v133 = *(void *)(v209 + 72);
            v134 = *(void (**)(char *, unint64_t, uint64_t))(v209 + 16);
            v135 = (void *)MEMORY[0x1E4FBC860];
            do
            {
              v137 = v211;
              v138 = v215;
              v134(v211, v132, v215);
              v139 = SpanProperty.valueString.getter();
              v141 = v140;
              (*v212)(v137, v138);
              if (v141)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v135[2] + 1, 1, v135);
                }
                v143 = v135[2];
                v142 = v135[3];
                if (v143 >= v142 >> 1) {
                  v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v142 > 1), v143 + 1, 1, v135);
                }
                v135[2] = v143 + 1;
                v136 = &v135[2 * v143];
                v136[4] = v139;
                v136[5] = v141;
              }
              v132 += v133;
              --v131;
            }
            while (v131);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            v135 = (void *)MEMORY[0x1E4FBC860];
          }
          v144 = Set.init(minimumCapacity:)();
          v145 = v144;
          v146 = v135[2];
          if (v146)
          {
            v147 = 0;
            v210 = (Swift::Int)(v135 + 4);
            v148 = v144 + 56;
            while (1)
            {
              v149 = (Swift::Int *)(v210 + 16 * v147);
              v151 = *v149;
              v150 = v149[1];
              ++v147;
              Hasher.init(_seed:)();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              v152 = Hasher._finalize()();
              v153 = -1 << *(unsigned char *)(v145 + 32);
              v154 = v152 & ~v153;
              if (((*(void *)(v148 + ((v154 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v154) & 1) == 0) {
                goto LABEL_140;
              }
              v155 = *(void *)(v145 + 48);
              v156 = (void *)(v155 + 16 * v154);
              v157 = *v156 == v151 && v156[1] == v150;
              if (v157 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_125:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v147 == v146) {
                  break;
                }
              }
              else
              {
                v158 = ~v153;
                while (1)
                {
                  v154 = (v154 + 1) & v158;
                  if (((*(void *)(v148 + ((v154 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v154) & 1) == 0) {
                    break;
                  }
                  v159 = (void *)(v155 + 16 * v154);
                  v160 = *v159 == v151 && v159[1] == v150;
                  if (v160 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    goto LABEL_125;
                  }
                }
LABEL_140:
                swift_bridgeObjectRelease();
                v161 = swift_isUniquelyReferenced_nonNull_native();
                v216[0] = v145;
                swift_bridgeObjectRetain();
                specialized _NativeSet.insertNew(_:at:isUnique:)(v151, v150, v154, v161);
                v145 = v216[0];
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v147 == v146) {
                  break;
                }
                v148 = v145 + 56;
              }
            }
          }
          swift_bridgeObjectRelease();
          v162 = specialized Set.isDisjoint(with:)(v145, (uint64_t)v191);
          swift_bridgeObjectRelease();
          v13 = v195;
          v163 = (void (*)(char *, uint64_t))v192;
          ((void (*)(char *, uint64_t))v192)(v189, v195);
          v64 = v208;
          v163(v208, v13);
          if ((v162 & 1) == 0)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            if (one-time initialization token for executor != -1) {
              swift_once();
            }
            v164 = type metadata accessor for Logger();
            __swift_project_value_buffer(v164, (uint64_t)static Logger.executor);
            v165 = v182;
            swift_retain_n();
            v166 = Logger.logObject.getter();
            v167 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v166, v167))
            {
              v168 = (uint8_t *)swift_slowAlloc();
              v169 = swift_slowAlloc();
              v216[0] = v169;
              *(_DWORD *)v168 = 136315138;
              v217 = v165;
              type metadata accessor for UsoEntity_common_UserEntity();
              swift_retain();
              v170 = String.init<A>(describing:)();
              v217 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v170, v171, v216);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1B9C64000, v166, v167, "HomeAutomationAffinityScorer - [High] Summarise setting with salient HA entity %s", v168, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1BA9E48C0](v169, -1, -1);
              MEMORY[0x1BA9E48C0](v168, -1, -1);
              swift_release();
              swift_release();

              ((void (*)(char *, uint64_t))v192)(v194, v13);
              return 3;
            }
            else
            {
              swift_release();
              v52 = 3;
              swift_release_n();

              v163(v194, v13);
            }
            return v52;
          }
        }
        else
        {
          v64 = v125;
          v129(v123, v13);
          v129(v125, v13);
        }
        v69 = v205 + 1;
        v68 = v206;
        if ((void (*)(char *, unint64_t, uint64_t))(v205 + 1) == v199)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          v62 = v178;
          goto LABEL_47;
        }
      }
      while (1)
      {
        v77 = (v77 + 1) & ~v76;
        if (((*(void *)(v70 + 56 + ((v77 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v77) & 1) == 0) {
          break;
        }
        v127 = (void *)(v78 + 16 * v77);
        v128 = *v127 == v72 && v127[1] == v74;
        if (v128 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_67;
        }
      }
LABEL_108:
      swift_bridgeObjectRelease();
      v124 = v207;
      v125 = v208;
      v126 = v206;
      ((void (*)(char *, char *, uint64_t))v206)(v207, v208, v13);
      v122 = 0;
      v123 = v189;
      v87 = v202;
      goto LABEL_109;
    }
LABEL_149:
    swift_bridgeObjectRelease_n();
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  v172 = type metadata accessor for Logger();
  __swift_project_value_buffer(v172, (uint64_t)static Logger.executor);
  v173 = Logger.logObject.getter();
  v174 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v173, v174))
  {
    v175 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v175 = 0;
    _os_log_impl(&dword_1B9C64000, v173, v174, "HomeAutomationAffinityScorer - [Low] Summarise setting with no mentioned HA specific user entities", v175, 2u);
    MEMORY[0x1BA9E48C0](v175, -1, -1);
  }
  swift_release();

  (*(void (**)(char *, uint64_t))(v201 + 8))(v194, v13);
  return 1;
}

uint64_t specialized HomeAutomationAffinityScorer.isDefaultScore(_:_:_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x10100010000) != 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_7;
    }
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    v6 = "HomeAutomationAffinityScorer - [Default] USO entity spans satisfy condition:\n"
         "GeneralNamespaceMatches || ExactNameSpaceMatch || HomeKitEntityType.FuzzyMatch || appBundleIdMatch";
LABEL_6:
    _os_log_impl(&dword_1B9C64000, v3, v4, v6, v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
LABEL_7:

    return 1;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (v11)
  {
    type metadata accessor for UsoTask_disable_common_Setting();
    if (swift_dynamicCast())
    {
      swift_release();
      SiriEnvironment.currentDevice.getter();
      char v8 = dispatch thunk of CurrentDevice.isAppleTV.getter();
      swift_release();
      if (v8)
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
        v3 = Logger.logObject.getter();
        os_log_type_t v4 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v3, v4)) {
          goto LABEL_7;
        }
        v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v5 = 0;
        v6 = "HomeAutomationAffinityScorer - [Default] Turn off on AppleTV case";
        goto LABEL_6;
      }
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

unint64_t specialized HomeAutomationAffinityScorer.HomeAutomationNamespace.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of HomeAutomationAffinityScorer.HomeAutomationNamespace.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

unint64_t specialized HomeAutomationAffinityScorer.HomeAppEntityType.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of HomeAutomationAffinityScorer.HomeAppEntityType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type HomeAutomationAffinityScorer.HomeAutomationNamespace and conformance HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  unint64_t result = lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAutomationNamespace and conformance HomeAutomationAffinityScorer.HomeAutomationNamespace;
  if (!lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAutomationNamespace and conformance HomeAutomationAffinityScorer.HomeAutomationNamespace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAutomationNamespace and conformance HomeAutomationAffinityScorer.HomeAutomationNamespace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HomeAutomationAffinityScorer.HomeAppEntityType and conformance HomeAutomationAffinityScorer.HomeAppEntityType()
{
  unint64_t result = lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAppEntityType and conformance HomeAutomationAffinityScorer.HomeAppEntityType;
  if (!lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAppEntityType and conformance HomeAutomationAffinityScorer.HomeAppEntityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAppEntityType and conformance HomeAutomationAffinityScorer.HomeAppEntityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAppEntityType and conformance HomeAutomationAffinityScorer.HomeAppEntityType;
  if (!lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAppEntityType and conformance HomeAutomationAffinityScorer.HomeAppEntityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAppEntityType and conformance HomeAutomationAffinityScorer.HomeAppEntityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [HomeAutomationAffinityScorer.HomeAppEntityType] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [HomeAutomationAffinityScorer.HomeAppEntityType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HomeAutomationAffinityScorer.HomeAppEntityType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HomeAutomationAffinityScorer.HomeAppEntityType]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [HomeAutomationAffinityScorer.HomeAppEntityType] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpanMatchAccuracy and conformance SpanMatchAccuracy()
{
  unint64_t result = lazy protocol witness table cache variable for type SpanMatchAccuracy and conformance SpanMatchAccuracy;
  if (!lazy protocol witness table cache variable for type SpanMatchAccuracy and conformance SpanMatchAccuracy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpanMatchAccuracy and conformance SpanMatchAccuracy);
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAutomationAffinityScorer()
{
  return &type metadata for HomeAutomationAffinityScorer;
}

unsigned char *storeEnumTagSinglePayload for HomeAutomationAffinityScorer.HomeAutomationNamespace(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9F1CD6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  return &type metadata for HomeAutomationAffinityScorer.HomeAutomationNamespace;
}

uint64_t __swift_memcpy9_1(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HomeAutomationAffinityScorer.HAMatchConditions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[9]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeAutomationAffinityScorer.HAMatchConditions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAutomationAffinityScorer.HAMatchConditions()
{
  return &type metadata for HomeAutomationAffinityScorer.HAMatchConditions;
}

unsigned char *storeEnumTagSinglePayload for HomeAutomationAffinityScorer.HomeAppEntityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9F1CF2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAutomationAffinityScorer.HomeAppEntityType()
{
  return &type metadata for HomeAutomationAffinityScorer.HomeAppEntityType;
}

unsigned char *storeEnumTagSinglePayload for SpanMatchAccuracy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9F1D030);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpanMatchAccuracy()
{
  return &type metadata for SpanMatchAccuracy;
}

uint64_t lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)@<X0>(char *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v101 = a5;
  uint64_t v9 = type metadata accessor for IdentifiedUser.Classification();
  MEMORY[0x1F4188790](v9 - 8);
  v94 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v11 - 8);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Locale.HourCycle?);
  MEMORY[0x1F4188790](v14 - 8);
  v98 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Locale.Language.Components();
  MEMORY[0x1F4188790](v16 - 8);
  v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.Region?);
  MEMORY[0x1F4188790](v19 - 8);
  v100 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.Script?);
  MEMORY[0x1F4188790](v21 - 8);
  v99 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  MEMORY[0x1F4188790](v23 - 8);
  v25 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Locale.Components();
  uint64_t v104 = *(void *)(v26 - 8);
  uint64_t v105 = v26;
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  v29 = (char *)&v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  v102 = (char *)&v81 - v30;
  uint64_t v31 = type metadata accessor for IdentifiedUser();
  MEMORY[0x1F4188790](v31);
  v106 = (char *)&v81 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v93 = v18;
    uint64_t v103 = v32;
    IdentifiedUser.init()();
    v34 = *(void **)&a1[OBJC_IVAR___SKEUserSpecificInfo_meCard];
    if (v34)
    {
      id v35 = v34;
      IdentifiedUser.person.setter();
LABEL_12:
      unint64_t v40 = *(void *)&a1[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage + 8];
      if (v40)
      {
        uint64_t v84 = *(void *)&a1[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage];
        unint64_t v85 = v40;
        swift_bridgeObjectRetain();
        goto LABEL_18;
      }
LABEL_14:
      if (a3)
      {
        id v41 = objc_msgSend(a3, sel_preferredLanguage);
        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v85 = v42;
        swift_bridgeObjectRelease();

        if (!a1) {
          goto LABEL_20;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v85 = 0xE200000000000000;
        uint64_t v84 = 28261;
        if (!a1) {
          goto LABEL_20;
        }
      }
LABEL_18:
      unint64_t v43 = *(void *)&a1[OBJC_IVAR___SKEUserSpecificInfo_countryCode + 8];
      if (v43)
      {
        v89 = v29;
        v90 = v13;
        uint64_t v91 = v31;
        v86 = a2;
        v87 = a4;
        id v88 = a3;
        v92 = a1;
        uint64_t v82 = *(void *)&a1[OBJC_IVAR___SKEUserSpecificInfo_countryCode];
        unint64_t v83 = v43;
        swift_bridgeObjectRetain();
        goto LABEL_23;
      }
LABEL_20:
      v92 = a1;
      v87 = a4;
      id v88 = a3;
      v86 = a2;
      v90 = v13;
      uint64_t v91 = v31;
      v89 = v29;
      if (a3)
      {
        id v44 = objc_msgSend(a3, sel_countryCode);
        uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v83 = v45;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v83 = 0xE200000000000000;
        uint64_t v82 = 21333;
      }
LABEL_23:
      uint64_t v46 = type metadata accessor for Locale.LanguageCode();
      uint64_t v47 = *(void *)(v46 - 8);
      v96 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
      uint64_t v97 = v47 + 56;
      v48 = v25;
      v96(v25, 1, 1, v46);
      uint64_t v49 = type metadata accessor for Locale.Script();
      v95 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56);
      v50 = v99;
      v95(v99, 1, 1, v49);
      uint64_t v51 = type metadata accessor for Locale.Region();
      v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56);
      v53 = v100;
      v52(v100, 1, 1, v51);
      v54 = v102;
      Locale.Components.init(languageCode:script:languageRegion:)();
      Locale.LanguageCode.init(_:)();
      v96(v48, 0, 1, v46);
      v95(v50, 1, 1, v49);
      Locale.Region.init(_:)();
      v52(v53, 0, 1, v51);
      Locale.Language.Components.init(languageCode:script:region:)();
      Locale.Components.languageComponents.setter();
      v55 = v92;
      if (v92)
      {
        uint64_t v56 = v101;
        v58 = v87;
        id v57 = v88;
        v59 = v86;
        v60 = v98;
        if (v92[OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay] == 1)
        {
LABEL_25:
          v61 = (unsigned int *)MEMORY[0x1E4F27A60];
LABEL_29:
          uint64_t v63 = *v61;
          uint64_t v64 = type metadata accessor for Locale.HourCycle();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 104))(v60, v63, v64);
          type metadata accessor for Locale.HourCycle();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v60, 0, 1, v64);
          Locale.Components.hourCycle.setter();
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v56 = v101;
        v58 = v87;
        id v57 = v88;
        v59 = v86;
        if (!v88)
        {
LABEL_30:
          (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v89, v54, v105);
          v65 = v90;
          Locale.init(components:)();
          uint64_t v66 = type metadata accessor for Locale();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v65, 0, 1, v66);
          v67 = v106;
          IdentifiedUser.locale.setter();
          if (v55 && *(void *)&v55[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit + 8])
          {
            swift_bridgeObjectRetain();
            IdentifiedUser.preferredTemperatureUnitName.setter();
          }
          else
          {
            if (v57)
            {
              id v68 = objc_msgSend(v57, sel_temperatureUnit);
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              swift_bridgeObjectRelease();

              v67 = v106;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            IdentifiedUser.preferredTemperatureUnitName.setter();
            if (!v55)
            {
LABEL_46:
              if (v59)
              {
                id v70 = v59;
                id v71 = objc_msgSend(v70, sel_iCloudAltDSID);
                if (v71)
                {
                  v72 = v71;
                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                }
                IdentifiedUser.iCloudAltDSID.setter();
                id v73 = objc_msgSend(v70, sel_homeUserId);
                if (v73)
                {
                  v74 = v73;
                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                }
                IdentifiedUser.homeUserID.setter();
                IdentifiedUser.sharedUserId.getter();
                uint64_t v76 = v75;
                swift_bridgeObjectRelease();
                if (!v76)
                {
                  id v77 = objc_msgSend(v70, sel_sharedUserId);
                  if (v77)
                  {
                    v78 = v77;
                    static String._unconditionallyBridgeFromObjectiveC(_:)();
                  }
                  IdentifiedUser.sharedUserId.setter();
                }
                id v79 = v70;
                IdentifiedUser.sharedUserInfo.setter();

                v54 = v102;
              }

              (*(void (**)(char *, uint64_t))(v104 + 8))(v54, v105);
              uint64_t v80 = v91;
              (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v56, v67, v91);
              return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v56, 0, 1, v80);
            }
          }
          v69 = v55;
          char v108 = 0;
          IdentifiedUser.voiceIDScore.setter();
          if (v69[OBJC_IVAR___SKEUserSpecificInfo_userAttribute] != 1) {
            _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          IdentifiedUser.belongsToHome.setter();
          IdentifiedUser.wasSpeechProfileUsedByASR.setter();
          char v107 = v69[OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold + 4];
          IdentifiedUser.lowConfidenceThreshold.setter();
          swift_bridgeObjectRetain();
          IdentifiedUser.sharedUserId.setter();
          IdentifiedUser.isUserSessionActive.setter();
          swift_bridgeObjectRetain();
          v67 = v106;
          IdentifiedUser.personaId.setter();
          IdentifiedUser.meetsUserSessionThreshold.setter();
          IdentifiedUser.meetsPersonalRequestThreshold.setter();
          IdentifiedUser.hasActiveUserSession.setter();
          switch(v69[OBJC_IVAR___SKEUserSpecificInfo_userIdentityClassification])
          {
            case 1:
              static IdentifiedUser.Classification.known.getter();
              break;
            case 2:
              static IdentifiedUser.Classification.unsure1.getter();
              break;
            case 3:
              static IdentifiedUser.Classification.unsureN.getter();
              break;
            case 4:
              static IdentifiedUser.Classification.unknown.getter();
              break;
            default:
              static IdentifiedUser.Classification.confident.getter();
              break;
          }
          IdentifiedUser.voiceConfidenceClassification.setter();

          goto LABEL_46;
        }
        unsigned __int8 v62 = objc_msgSend(v88, sel_twentyFourHourTimeDisplay);
        v60 = v98;
        if (v62) {
          goto LABEL_25;
        }
      }
      v61 = (unsigned int *)MEMORY[0x1E4F27A50];
      goto LABEL_29;
    }
LABEL_11:
    id v39 = a4;
    IdentifiedUser.person.setter();
    if (!a1) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (a2 || a3 || a4)
  {
    v93 = v18;
    uint64_t v103 = v32;
    IdentifiedUser.init()();
    goto LABEL_11;
  }
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
  uint64_t v37 = v101;

  return v36(v37, 1, 1, v31);
}

SiriKitRuntime::InformationAffinityScorer __swiftcall InformationAffinityScorer.init()()
{
  v0 = (void *)0x80000001BA0629A0;
  uint64_t v1 = 0xD000000000000024;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

void *InformationAffinityScorer.pommesConfidenceThreshold.unsafeMutableAddressor()
{
  return &static InformationAffinityScorer.pommesConfidenceThreshold;
}

double static InformationAffinityScorer.pommesConfidenceThreshold.getter()
{
  return 0.5;
}

uint64_t InformationAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for InformationAffinityScorer()
{
  return &type metadata for InformationAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type PommesSearchReason and conformance PommesSearchReason()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason;
  if (!lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason)
  {
    type metadata accessor for PommesSearchReason();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason);
  }
  return result;
}

uint64_t InputValueFetcher.__allocating_init(plist:)(uint64_t a1)
{
  return InputValueFetcher.init(plist:)(a1);
}

uint64_t InputValueFetcher.fetcherType.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t InputValueFetcher.argument.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void *InputValueFetcher.__allocating_init(type:argument:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return InputValueFetcher.init(type:argument:)(a1, a2, a3);
}

void *InputValueFetcher.init(type:argument:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (void *)v5;
  *(unsigned char *)(v5 + 16) = a1;
  if (a3)
  {
    int v8 = a1;
    if (((1 << a1) & 0x83) != 0)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v11)) {
        goto LABEL_32;
      }
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v33 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      unint64_t v14 = 0xE800000000000000;
      uint64_t v15 = 0x657079546B736174;
      switch(v8)
      {
        case 0:
          break;
        case 1:
          unint64_t v14 = 0xE600000000000000;
          uint64_t v15 = 0x726573726170;
          break;
        case 2:
          unint64_t v14 = 0xE500000000000000;
          uint64_t v15 = 0x6261636F76;
          break;
        case 3:
          uint64_t v15 = 0x63617073656D616ELL;
          goto LABEL_27;
        case 4:
          unint64_t v14 = 0xE700000000000000;
          uint64_t v29 = 0x756C6176736ELL;
          goto LABEL_29;
        case 5:
          unint64_t v14 = 0xE600000000000000;
          uint64_t v15 = 0x797469746E65;
          break;
        case 6:
          uint64_t v15 = 0x636E657265666572;
LABEL_27:
          unint64_t v14 = 0xE900000000000065;
          break;
        case 7:
          unint64_t v14 = 0xE700000000000000;
          uint64_t v29 = 0x707954616475;
LABEL_29:
          uint64_t v15 = v29 & 0xFFFFFFFFFFFFLL | 0x65000000000000;
          break;
        default:
          goto LABEL_11;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v30 = v11;
      uint64_t v31 = "input value fetcher %s given bogus argument";
LABEL_31:
      _os_log_impl(&dword_1B9C64000, v10, v30, v31, v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v13, -1, -1);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
LABEL_32:

      type metadata accessor for InputValueFetcher();
      swift_deallocPartialClassInstance();
      return 0;
    }
LABEL_11:
    v6[3] = a2;
    v6[4] = a3;
  }
  else
  {
    if (!v4 & v3 || ((1 << a1) & 0x83) == 0)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v10, v24)) {
        goto LABEL_32;
      }
      uint64_t v25 = 0x6261636F76;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v33 = v26;
      *(_DWORD *)uint64_t v12 = 136315138;
      int v27 = a1;
      unint64_t v28 = 0xE500000000000000;
      uint64_t v13 = v26;
      switch(v27)
      {
        case 3:
          uint64_t v25 = 0x63617073656D616ELL;
          goto LABEL_37;
        case 4:
          unint64_t v28 = 0xE700000000000000;
          uint64_t v25 = 0x65756C6176736ELL;
          break;
        case 5:
          unint64_t v28 = 0xE600000000000000;
          uint64_t v25 = 0x797469746E65;
          break;
        case 6:
          uint64_t v25 = 0x636E657265666572;
LABEL_37:
          unint64_t v28 = 0xE900000000000065;
          break;
        case 7:
          unint64_t v28 = 0xE700000000000000;
          uint64_t v25 = 0x65707954616475;
          break;
        case 8:
          unint64_t v28 = 0x80000001BA05F4E0;
          uint64_t v25 = 0xD000000000000019;
          break;
        default:
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v28, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v30 = v24;
      uint64_t v31 = "input value fetcher %s missing argument";
      goto LABEL_31;
    }
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v33 = v20;
    uint64_t v21 = (*(uint64_t (**)(void))(*v6 + 112))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v17, v18, "%s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v6;
}

unint64_t InputValueType.rawValue.getter(char a1)
{
  unint64_t result = 0x657079546B736174;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726573726170;
      break;
    case 2:
      unint64_t result = 0x6261636F76;
      break;
    case 3:
      unint64_t result = 0x63617073656D616ELL;
      break;
    case 4:
      unint64_t result = 0x65756C6176736ELL;
      break;
    case 5:
      unint64_t result = 0x797469746E65;
      break;
    case 6:
      unint64_t result = 0x636E657265666572;
      break;
    case 7:
      unint64_t result = 0x65707954616475;
      break;
    case 8:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t InputValueType.takesArgument.getter(unsigned __int8 a1)
{
  return (a1 > 7u) | (0x7Cu >> a1) & 1;
}

uint64_t InputValueFetcher.init(plist:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with copy of Any(a1, (uint64_t)v48);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_50;
  }
  v48[0] = v46;
  v48[1] = v47;
  unint64_t v4 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v5 = (void *)MEMORY[0x1BA9E37D0](58, 0xE100000000000000, 1, 1, MEMORY[0x1E4FBB1A0], v4);
  swift_bridgeObjectRelease();
  if (!v5[2]) {
    goto LABEL_4;
  }
  uint64_t v6 = v5[4];
  uint64_t v7 = v5[5];
  uint64_t v8 = v5[6];
  uint64_t v9 = v5[7];
  swift_bridgeObjectRetain();
  uint64_t v10 = MEMORY[0x1BA9E2EC0](v6, v7, v8, v9);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = v10;
  v49._object = v12;
  unsigned __int8 v13 = specialized InputValueType.init(rawValue:)(v49);
  if (v13 == 9)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    swift_bridgeObjectRelease();
LABEL_51:
    type metadata accessor for InputValueFetcher();
    swift_deallocPartialClassInstance();
    return 0;
  }
  *(unsigned char *)(v2 + 16) = v13;
  if (v13 > 7u || ((1 << v13) & 0x83) == 0)
  {
    if (v5[2] == 2)
    {
      uint64_t v24 = v5[8];
      uint64_t v25 = v5[9];
      uint64_t v26 = v5[10];
      uint64_t v27 = v5[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v28 = MEMORY[0x1BA9E2EC0](v24, v25, v26, v27);
      uint64_t v30 = v29;
      swift_bridgeObjectRelease();
      *(void *)(v2 + 24) = v28;
      *(void *)(v2 + 32) = v30;
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v39))
    {
      uint64_t v40 = 0x657079546B736174;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v48[0] = v41;
      *(_DWORD *)uint64_t v20 = 136315138;
      unint64_t v42 = 0xE800000000000000;
      uint64_t v23 = v41;
      switch(*(unsigned char *)(v2 + 16))
      {
        case 1:
          unint64_t v42 = 0xE600000000000000;
          uint64_t v40 = 0x726573726170;
          break;
        case 2:
          unint64_t v42 = 0xE500000000000000;
          uint64_t v40 = 0x6261636F76;
          break;
        case 3:
          uint64_t v40 = 0x63617073656D616ELL;
          goto LABEL_44;
        case 4:
          unint64_t v42 = 0xE700000000000000;
          uint64_t v40 = 0x65756C6176736ELL;
          break;
        case 5:
          unint64_t v42 = 0xE600000000000000;
          uint64_t v40 = 0x797469746E65;
          break;
        case 6:
          uint64_t v40 = 0x636E657265666572;
LABEL_44:
          unint64_t v42 = 0xE900000000000065;
          break;
        case 7:
          unint64_t v42 = 0xE700000000000000;
          uint64_t v40 = 0x65707954616475;
          break;
        case 8:
          unint64_t v42 = 0x80000001BA05F4E0;
          uint64_t v40 = 0xD000000000000019;
          break;
        default:
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v43 = v39;
      id v44 = "input value fetcher %s missing argument";
      goto LABEL_48;
    }
LABEL_29:
    swift_release_n();
LABEL_49:

LABEL_50:
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_51;
  }
  uint64_t v15 = v5[2];
  swift_bridgeObjectRelease();
  if (v15 != 1)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = 0x657079546B736174;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v48[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      unint64_t v22 = 0xE800000000000000;
      uint64_t v23 = v21;
      switch(*(unsigned char *)(v2 + 16))
      {
        case 1:
          unint64_t v22 = 0xE600000000000000;
          uint64_t v19 = 0x726573726170;
          break;
        case 2:
          unint64_t v22 = 0xE500000000000000;
          uint64_t v19 = 0x6261636F76;
          break;
        case 3:
          uint64_t v19 = 0x63617073656D616ELL;
          goto LABEL_35;
        case 4:
          unint64_t v22 = 0xE700000000000000;
          uint64_t v19 = 0x65756C6176736ELL;
          break;
        case 5:
          unint64_t v22 = 0xE600000000000000;
          uint64_t v19 = 0x797469746E65;
          break;
        case 6:
          uint64_t v19 = 0x636E657265666572;
LABEL_35:
          unint64_t v22 = 0xE900000000000065;
          break;
        case 7:
          unint64_t v22 = 0xE700000000000000;
          uint64_t v19 = 0x65707954616475;
          break;
        case 8:
          unint64_t v22 = 0x80000001BA05F4E0;
          uint64_t v19 = 0xD000000000000019;
          break;
        default:
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v22, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v43 = v18;
      id v44 = "input value fetcher %s given bogus argument(s)";
LABEL_48:
      _os_log_impl(&dword_1B9C64000, v17, v43, v44, v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      goto LABEL_49;
    }
    goto LABEL_29;
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
LABEL_18:
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)v34 = 136315138;
    v48[0] = v35;
    uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v2 + 112))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v32, v33, "%s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    MEMORY[0x1BA9E48C0](v34, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v2;
}

uint64_t InputValueFetcher.debugDescription.getter()
{
  _StringGuts.grow(_:)(47);
  v0._object = (void *)0x80000001BA069BA0;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x656D75677261202CLL;
  v1._object = (void *)0xEB000000003D746ELL;
  String.append(_:)(v1);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t InputValueFetcher.fetchValue(input:)()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 112))();
  uint64_t v3 = specialized logAction<A>(label:_:)(v1, v2, (void (*)(void *__return_ptr, void))partial apply for closure #1 in InputValueFetcher.fetchValue(input:));
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t InputValueFetcher.internalFetchValue(input:)()
{
  uint64_t v169 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  MEMORY[0x1F4188790](v169);
  v168 = (char *)&v164 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v171 = *(void *)(v172 - 8);
  MEMORY[0x1F4188790](v172);
  v170 = (char *)&v164 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v181 = *(void *)(v2 - 8);
  uint64_t v182 = v2;
  MEMORY[0x1F4188790](v2);
  v180 = (char *)&v164 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v175 = (uint64_t)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v174 = (uint64_t)&v164 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v173 = (uint64_t)&v164 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v192 = (uint64_t)&v164 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v12 - 8);
  v188 = (char *)&v164 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v14 - 8);
  v179 = (char *)&v164 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for USOParse();
  uint64_t v186 = *(void *)(v16 - 8);
  uint64_t v187 = v16;
  MEMORY[0x1F4188790](v16);
  v185 = (char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Parse();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v164 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v190 = *(void *)(v196 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v196);
  v183 = (char *)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v178 = (char *)&v164 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v164 - v27;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  v177 = (char *)&v164 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  v176 = (char *)&v164 - v32;
  MEMORY[0x1F4188790](v31);
  v189 = (char *)&v164 - v33;
  uint64_t v34 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v184 = v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v164 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v36);
  uint64_t v41 = (char *)&v164 - v40;
  MEMORY[0x1F4188790](v39);
  v194 = (char *)&v164 - v42;
  Input.parse.getter();
  int v43 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  int v44 = *MEMORY[0x1E4FA1F08];
  v195 = (uint8_t *)v34;
  if (v43 == v44)
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v45 = (uint64_t)v188;
    static ConversionUtils.toUserParse(from:)();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v45, 1, v34) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.executor);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        Swift::String v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v49 = 0;
        _os_log_impl(&dword_1B9C64000, v47, v48, "Could not convert to UserDialogAct", v49, 2u);
        MEMORY[0x1BA9E48C0](v49, -1, -1);
      }

      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t v65 = v45;
    uint64_t v66 = v195;
    (*(void (**)(char *, uint64_t, uint8_t *))(v35 + 32))(v38, v65, v195);
    uint64_t v67 = (*(uint64_t (**)(char *, char *, uint8_t *))(v35 + 16))(v194, v38, v66);
    uint64_t v68 = MEMORY[0x1BA9DE000](v67);
    if (*(void *)(v68 + 16))
    {
      uint64_t v69 = v190;
      id v70 = v183;
      uint64_t v71 = v196;
      (*(void (**)(char *, unint64_t, uint64_t))(v190 + 16))(v183, v68 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80)), v196);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v72 = *(char **)(v35 + 8);
      uint64_t v63 = v69;
      ((void (*)(char *, uint8_t *))v72)(v38, v195);
      uint64_t v64 = v189;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v189, v70, v71);
      uint64_t countAndFlagsBits = 0;
      v188 = 0;
      uint64_t v28 = v193;
      goto LABEL_32;
    }
    __break(1u);
    goto LABEL_142;
  }
  if (v43 != *MEMORY[0x1E4FA1F48])
  {
    uint64_t v196 = v19;
    if (one-time initialization token for executor == -1)
    {
LABEL_18:
      uint64_t v73 = type metadata accessor for Logger();
      __swift_project_value_buffer(v73, (uint64_t)static Logger.executor);
      uint64_t v74 = v191;
      swift_retain_n();
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v75, v76))
      {
        id v77 = (uint8_t *)swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)id v77 = 136315138;
        v197[0] = v78;
        v195 = v77 + 4;
        uint64_t v79 = (*(uint64_t (**)(void))(*(void *)v74 + 112))();
        v197[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v197);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v75, v76, "%s: given non-USO parse, returning nil", v77, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v78, -1, -1);
        MEMORY[0x1BA9E48C0](v77, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v196 + 8))(v21, v18);
      return 0;
    }
LABEL_142:
    swift_once();
    goto LABEL_18;
  }
  (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
  (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v185, v21, v187);
  USOParse.userParse.getter();
  uint64_t countAndFlagsBits = USOParse.appBundleId.getter();
  v188 = v51;
  uint64_t v52 = USOParse.userParse.getter();
  uint64_t v53 = MEMORY[0x1BA9DE000](v52);
  v183 = *(char **)(v35 + 8);
  uint64_t v166 = v35 + 8;
  ((void (*)(char *, uint8_t *))v183)(v41, v195);
  unint64_t v54 = *(void *)(v53 + 16);
  if (!v54)
  {
    uint64_t v63 = v190;
    uint64_t v62 = (uint64_t)v179;
    uint64_t v59 = v196;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v190 + 56))(v179, 1, 1, v196);
    uint64_t v64 = v189;
LABEL_23:
    swift_bridgeObjectRelease();
    int v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v62, 1, v59);
    uint64_t v28 = v193;
    if (v81 == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      if (one-time initialization token for executor == -1)
      {
LABEL_25:
        uint64_t v82 = type metadata accessor for Logger();
        __swift_project_value_buffer(v82, (uint64_t)static Logger.executor);
        unint64_t v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v83, v84))
        {
          unint64_t v85 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v85 = 0;
          _os_log_impl(&dword_1B9C64000, v83, v84, "Could not extract UserDialogAct from USO parse", v85, 2u);
          MEMORY[0x1BA9E48C0](v85, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v186 + 8))(v185, v187);
        ((void (*)(char *, uint8_t *))v183)(v194, v195);
        return 0;
      }
LABEL_147:
      swift_once();
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v186 + 8))(v185, v187);
    uint64_t v87 = v59;
    id v88 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 32);
    v89 = v178;
    v88(v178, v62, v87);
    v88(v64, (uint64_t)v89, v87);
    v72 = v183;
LABEL_32:
    unint64_t v93 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    if (v28)
    {

      uint64_t v61 = 0;
      uint64_t v28 = 0;
LABEL_40:
      if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter())
      {
        v95 = v180;
        Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
        uint64_t v96 = v192;
        Siri_Nlu_External_UserStatedTask.task.getter();
        (*(void (**)(char *, uint64_t))(v181 + 8))(v95, v182);
        uint64_t v97 = type metadata accessor for Siri_Nlu_External_UsoGraph();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v96, 0, 1, v97);
      }
      else
      {
        uint64_t v98 = type metadata accessor for Siri_Nlu_External_UsoGraph();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v192, 1, 1, v98);
      }
      uint64_t v99 = v196;
      switch(*(unsigned char *)(v191 + 16))
      {
        case 1:
          swift_bridgeObjectRelease();
          if (Siri_Nlu_External_UserParse.hasParserID.getter())
          {
            uint64_t v103 = v194;
            uint64_t v104 = Siri_Nlu_External_UserParse.parserID.getter();
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v192, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
            (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v196);
            uint64_t v105 = v103;
            uint64_t countAndFlagsBits = v104;
            ((void (*)(char *, uint8_t *))v72)(v105, v195);
            return countAndFlagsBits;
          }
          if (Siri_Nlu_External_UserParse.hasParser.getter())
          {
            uint64_t v187 = v61;
            v183 = v72;
            v143 = v170;
            Siri_Nlu_External_UserParse.parser.getter();
            char v144 = Siri_Nlu_External_Parser.hasParserID.getter();
            v145 = *(void (**)(char *, uint64_t))(v171 + 8);
            uint64_t v146 = v172;
            v145(v143, v172);
            if (v144)
            {
              v147 = v194;
              Siri_Nlu_External_UserParse.parser.getter();
              Siri_Nlu_External_Parser.parserID.getter();
              v145(v143, v146);
              uint64_t countAndFlagsBits = String.init<A>(describing:)();
              swift_release();
              outlined destroy of ReferenceResolutionClientProtocol?(v192, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
              (*(void (**)(char *, uint64_t))(v63 + 8))(v189, v196);
              ((void (*)(char *, uint8_t *))v183)(v147, v195);
              return countAndFlagsBits;
            }
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v192, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
            (*(void (**)(char *, uint64_t))(v63 + 8))(v189, v196);
            ((void (*)(char *, uint8_t *))v183)(v194, v195);
          }
          else
          {
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v192, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
            (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v196);
            ((void (*)(char *, uint8_t *))v72)(v194, v195);
          }
          return 0;
        case 2:
          uint64_t v187 = v61;
          v183 = v72;
          swift_bridgeObjectRelease();
          uint64_t v106 = v175;
          outlined init with copy of Siri_Nlu_External_UsoGraph?(v192, v175);
          uint64_t v107 = type metadata accessor for Siri_Nlu_External_UsoGraph();
          uint64_t v108 = *(void *)(v107 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v106, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
            uint64_t v109 = MEMORY[0x1E4FBC860];
          }
          else
          {
            uint64_t v109 = Siri_Nlu_External_UsoGraph.identifiers.getter();
            (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v107);
          }
          uint64_t v148 = v191;
          swift_retain();
          v149 = specialized Sequence.compactMap<A>(_:)(v109, v148);
          goto LABEL_105;
        case 3:
          uint64_t v187 = v61;
          v183 = v72;
          swift_bridgeObjectRelease();
          uint64_t v110 = v174;
          outlined init with copy of Siri_Nlu_External_UsoGraph?(v192, v174);
          uint64_t v111 = type metadata accessor for Siri_Nlu_External_UsoGraph();
          uint64_t v112 = *(void *)(v111 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v110, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
            uint64_t v113 = MEMORY[0x1E4FBC860];
          }
          else
          {
            uint64_t v113 = Siri_Nlu_External_UsoGraph.identifiers.getter();
            (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v110, v111);
          }
          uint64_t v150 = v191;
          swift_retain();
          v149 = specialized Sequence.compactMap<A>(_:)(v113, v150);
          goto LABEL_105;
        case 4:
          uint64_t v187 = v61;
          v183 = v72;
          swift_bridgeObjectRelease();
          uint64_t v114 = v173;
          outlined init with copy of Siri_Nlu_External_UsoGraph?(v192, v173);
          uint64_t v115 = type metadata accessor for Siri_Nlu_External_UsoGraph();
          uint64_t v116 = *(void *)(v115 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v114, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
            uint64_t v117 = MEMORY[0x1E4FBC860];
          }
          else
          {
            uint64_t v117 = Siri_Nlu_External_UsoGraph.identifiers.getter();
            (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v114, v115);
          }
          uint64_t v151 = v191;
          swift_retain();
          v149 = specialized Sequence.compactMap<A>(_:)(v117, v151);
LABEL_105:
          v152 = v149;
          swift_bridgeObjectRelease();
          swift_release();
          v153 = v183;
          v154 = v189;
          if (v152[2])
          {
            uint64_t countAndFlagsBits = v152[4];
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t countAndFlagsBits = 0;
          }
          swift_bridgeObjectRelease();
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v192, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
          (*(void (**)(char *, uint64_t))(v63 + 8))(v154, v196);
          ((void (*)(char *, uint8_t *))v153)(v194, v195);
          return countAndFlagsBits;
        case 5:
          swift_bridgeObjectRelease();
          if (!v61) {
            goto LABEL_95;
          }
          swift_retain();
          uint64_t v118 = UsoTask.arguments.getter();
          swift_release();
          if (!*(void *)(v118 + 16)) {
            goto LABEL_94;
          }
          unint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)(0x69746E4572657375, 0xEC00000073656974);
          if ((v120 & 1) == 0) {
            goto LABEL_94;
          }
          v183 = v72;
          unint64_t v54 = *(void *)(*(void *)(v118 + 56) + 8 * v119);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (v54 >> 62) {
            goto LABEL_149;
          }
          uint64_t v121 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          goto LABEL_59;
        case 6:
          swift_bridgeObjectRelease();
          if (!v61)
          {
LABEL_95:
            uint64_t countAndFlagsBits = 0;
            v188 = 0;
            goto LABEL_140;
          }
          swift_retain();
          uint64_t v130 = UsoTask.arguments.getter();
          swift_release();
          if (!*(void *)(v130 + 16)
            || (unint64_t v131 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065),
                (v132 & 1) == 0))
          {
LABEL_94:
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t countAndFlagsBits = 0;
            v188 = 0;
            uint64_t v99 = v196;
            goto LABEL_140;
          }
          v183 = v72;
          unint64_t v133 = *(void *)(*(void *)(v130 + 56) + 8 * v131);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (v133 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v134 = _CocoaArrayWrapper.endIndex.getter();
          }
          else
          {
            uint64_t v134 = *(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          uint64_t v99 = v196;
          v193 = 0;
          uint64_t v187 = v61;
          if (!v134)
          {
            v136 = (void *)MEMORY[0x1E4FBC860];
            goto LABEL_125;
          }
          if (v134 >= 1)
          {
            uint64_t v135 = 0;
            v136 = (void *)MEMORY[0x1E4FBC860];
            do
            {
              if ((v133 & 0xC000000000000001) != 0) {
                MEMORY[0x1BA9E3990](v135, v133);
              }
              else {
                swift_retain();
              }
              if (dispatch thunk of UsoValue.getAsEntity()())
              {
                uint64_t v137 = UsoTask.verbString.getter();
                uint64_t v139 = v138;
                swift_release();
                swift_release();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  v136 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v136[2] + 1, 1, v136);
                }
                unint64_t v141 = v136[2];
                unint64_t v140 = v136[3];
                if (v141 >= v140 >> 1) {
                  v136 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v140 > 1), v141 + 1, 1, v136);
                }
                v136[2] = v141 + 1;
                v142 = &v136[2 * v141];
                v142[4] = v137;
                v142[5] = v139;
              }
              else
              {
                swift_release();
              }
              ++v135;
              uint64_t v99 = v196;
            }
            while (v134 != v135);
LABEL_125:
            swift_bridgeObjectRelease_n();
            uint64_t v161 = v136[2];
            if (v161)
            {
              uint64_t v63 = v190;
              uint64_t v157 = *(void *)(v191 + 24);
              v156 = *(char **)(v191 + 32);
              v162 = (char **)(v136 + 5);
              while (1)
              {
                if (v156)
                {
                  uint64_t countAndFlagsBits = (uint64_t)*(v162 - 1);
                  v159 = *v162;
                  if (countAndFlagsBits == v157 && v156 == v159) {
                    goto LABEL_137;
                  }
                  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                    goto LABEL_134;
                  }
                }
                v162 += 2;
                if (!--v161) {
                  goto LABEL_136;
                }
              }
            }
            goto LABEL_135;
          }
          break;
        case 7:
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = Siri_Nlu_External_UserDialogAct.typeAsString()().value._countAndFlagsBits;
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v192, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
          (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v99);
          ((void (*)(char *, uint8_t *))v72)(v194, v195);
          return countAndFlagsBits;
        case 8:
          swift_release();
          goto LABEL_140;
        default:
          swift_bridgeObjectRelease();
          if (v61)
          {
            v197[0] = UsoTask.verbString.getter();
            v197[1] = v100;
            v101._uint64_t countAndFlagsBits = 14906;
            v101._object = (void *)0xE200000000000000;
            String.append(_:)(v101);
            v102._uint64_t countAndFlagsBits = UsoTask.baseEntityAsString.getter();
            String.append(_:)(v102);
            uint64_t v99 = v196;
            swift_bridgeObjectRelease();
            uint64_t v167 = v197[0];
          }
          else
          {
            uint64_t v167 = 0;
          }
          outlined destroy of ReferenceResolutionClientProtocol?(v192, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
          (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v99);
          ((void (*)(char *, uint8_t *))v72)(v194, v195);
          swift_release();
          return v167;
      }
LABEL_152:
      __break(1u);
      JUMPOUT(0x1B9F20BBCLL);
    }
    unint64_t v94 = v93;
    if (v93 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v61) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v61 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v61)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
    if ((v94 & 0xC000000000000001) != 0)
    {
      uint64_t v61 = MEMORY[0x1BA9E3990](0, v94);
      goto LABEL_39;
    }
    if (*(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v61 = *(void *)(v94 + 32);
      swift_retain();
      goto LABEL_39;
    }
    __break(1u);
    goto LABEL_147;
  }
  uint64_t v167 = countAndFlagsBits;
  v55 = *(void (**)(char *, unint64_t, uint64_t))(v190 + 16);
  unint64_t v56 = v53 + ((*(unsigned __int8 *)(v190 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80));
  id v57 = (void (**)(char *, uint64_t))(v190 + 8);
  uint64_t v58 = *(void *)(v190 + 72);
  uint64_t v165 = v53;
  swift_bridgeObjectRetain();
  unint64_t v164 = v56;
  uint64_t v59 = v196;
  do
  {
    v55(v28, v56, v59);
    uint64_t v60 = v59;
    if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter())
    {
      swift_bridgeObjectRelease();
      uint64_t v63 = v190;
      v90 = *(void (**)(char *, char *, uint64_t))(v190 + 32);
      uint64_t v91 = v177;
      v90(v177, v28, v60);
      (*(void (**)(char *, uint64_t))(v186 + 8))(v185, v187);
      swift_bridgeObjectRelease();
      v92 = v176;
      v90(v176, v91, v60);
      uint64_t v64 = v189;
      v90(v189, v92, v60);
      uint64_t v28 = v193;
      v72 = v183;
      uint64_t countAndFlagsBits = v167;
      goto LABEL_32;
    }
    (*v57)(v28, v59);
    v56 += v58;
    --v54;
  }
  while (v54);
  uint64_t v61 = v165;
  swift_bridgeObjectRelease();
  if (*(void *)(v61 + 16))
  {
    uint64_t v62 = (uint64_t)v179;
    v55(v179, v164, v59);
    uint64_t v63 = v190;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v190 + 56))(v62, 0, 1, v59);
    uint64_t v64 = v189;
    uint64_t countAndFlagsBits = v167;
    goto LABEL_23;
  }
  __break(1u);
LABEL_149:
  swift_bridgeObjectRetain();
  uint64_t v121 = _CocoaArrayWrapper.endIndex.getter();
LABEL_59:
  uint64_t v99 = v196;
  v193 = v28;
  uint64_t v187 = v61;
  if (!v121)
  {
    v123 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_114;
  }
  if (v121 < 1)
  {
    __break(1u);
    goto LABEL_152;
  }
  uint64_t v122 = 0;
  v123 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    if ((v54 & 0xC000000000000001) != 0) {
      MEMORY[0x1BA9E3990](v122, v54);
    }
    else {
      swift_retain();
    }
    if (dispatch thunk of UsoValue.getAsEntity()())
    {
      uint64_t v124 = UsoTask.verbString.getter();
      uint64_t v126 = v125;
      swift_release();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v123[2] + 1, 1, v123);
      }
      unint64_t v128 = v123[2];
      unint64_t v127 = v123[3];
      if (v128 >= v127 >> 1) {
        v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v127 > 1), v128 + 1, 1, v123);
      }
      v123[2] = v128 + 1;
      v129 = &v123[2 * v128];
      v129[4] = v124;
      v129[5] = v126;
    }
    else
    {
      swift_release();
    }
    ++v122;
    uint64_t v99 = v196;
  }
  while (v121 != v122);
LABEL_114:
  swift_bridgeObjectRelease_n();
  uint64_t v155 = v123[2];
  if (!v155)
  {
LABEL_135:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t countAndFlagsBits = 0;
    v188 = 0;
    uint64_t v63 = v190;
    goto LABEL_139;
  }
  uint64_t v63 = v190;
  uint64_t v157 = *(void *)(v191 + 24);
  v156 = *(char **)(v191 + 32);
  v158 = (char **)(v123 + 5);
  while (2)
  {
    if (!v156)
    {
LABEL_116:
      v158 += 2;
      if (!--v155)
      {
LABEL_136:
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t countAndFlagsBits = 0;
        v188 = 0;
        uint64_t v99 = v196;
        goto LABEL_139;
      }
      continue;
    }
    break;
  }
  uint64_t countAndFlagsBits = (uint64_t)*(v158 - 1);
  v159 = *v158;
  if (countAndFlagsBits != v157 || v156 != v159)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
LABEL_134:
      v188 = v159;
      goto LABEL_138;
    }
    goto LABEL_116;
  }
LABEL_137:
  v188 = v156;
  uint64_t countAndFlagsBits = v157;
LABEL_138:
  uint64_t v99 = v196;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_139:
  v72 = v183;
  uint64_t v64 = v189;
LABEL_140:
  outlined destroy of ReferenceResolutionClientProtocol?(v192, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v99);
  ((void (*)(char *, uint8_t *))v72)(v194, v195);
  return countAndFlagsBits;
}

uint64_t InputValueFetcher.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InputValueFetcher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AffinityValueFetcher.fetchValue(input:) in conformance InputValueFetcher()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InputValueFetcher()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InputValueType(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = InputValueType.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == InputValueType.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InputValueType()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  InputValueType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InputValueType()
{
  InputValueType.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InputValueType()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  InputValueType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance InputValueType@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized InputValueType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InputValueType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = InputValueType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t type metadata accessor for InputValueFetcher()
{
  return self;
}

unint64_t specialized InputValueType.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InputValueType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t partial apply for closure #1 in InputValueFetcher.fetchValue(input:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = InputValueFetcher.internalFetchValue(input:)();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InputValueType and conformance InputValueType()
{
  unint64_t result = lazy protocol witness table cache variable for type InputValueType and conformance InputValueType;
  if (!lazy protocol witness table cache variable for type InputValueType and conformance InputValueType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputValueType and conformance InputValueType);
  }
  return result;
}

uint64_t method lookup function for InputValueFetcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InputValueFetcher);
}

uint64_t dispatch thunk of InputValueFetcher.__allocating_init(type:argument:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of InputValueFetcher.__allocating_init(plist:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of InputValueFetcher.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of InputValueFetcher.fetchValue(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

unsigned char *storeEnumTagSinglePayload for InputValueType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9F21124);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InputValueType()
{
  return &type metadata for InputValueType;
}

uint64_t outlined init with copy of Siri_Nlu_External_UsoGraph?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

const char *InsightRequestSummaryKey.bridgeName.unsafeMutableAddressor()
{
  return "bridgeName";
}

void *InsightRequestSummaryKey.messageDescription.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.messageDescription;
}

const char *InsightRequestSummaryKey.requestId.unsafeMutableAddressor()
{
  return "requestId";
}

void *InsightRequestSummaryKey.resultCandidateId.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.resultCandidateId;
}

void *InsightRequestSummaryKey.serverFallbackContextId.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.serverFallbackContextId;
}

void *InsightRequestSummaryKey.serverFallbackReason.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.serverFallbackReason;
}

const char *InsightRequestSummaryKey.errorCode.unsafeMutableAddressor()
{
  return "errorCode";
}

void *InsightRequestSummaryKey.pommesFallbackResponseError.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.pommesFallbackResponseError;
}

void *InsightRequestSummaryKey.pommesFallbackResponseNil.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.pommesFallbackResponseNil;
}

const char *InsightRequestSummaryKey.assistantId.unsafeMutableAddressor()
{
  return "assistantId";
}

const char *InsightRequestSummaryKey.sessionId.unsafeMutableAddressor()
{
  return "sessionId";
}

const char *InsightRequestSummaryKey.trpId.unsafeMutableAddressor()
{
  return "trpId";
}

const char *InsightRequestSummaryKey.failureReason.unsafeMutableAddressor()
{
  return "failureReason";
}

const char *InsightRequestSummaryKey.commandName.unsafeMutableAddressor()
{
  return "commandName";
}

const char *InsightRequestSummaryKey.commandAceId.unsafeMutableAddressor()
{
  return "commandAceId";
}

const char *InsightRequestSummaryKey.tcuId.unsafeMutableAddressor()
{
  return "tcuId";
}

uint64_t InsightRequestSummaryLogger.log.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t InsightRequestSummaryLogger.log.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*InsightRequestSummaryLogger.log.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InsightRequestSummaryLogger.init()()
{
  type metadata accessor for OS_os_log();
  OS_os_log.init(subsystem:category:)();

  return Logger.init(_:)();
}

uint64_t InsightRequestSummaryLogger.emitError(_:)(uint64_t (*a1)(void))
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for InsightRequestSummaryLogger();
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v2, v7);
  outlined init with copy of InsightRequestSummaryLogger(v2, (uint64_t)v6);
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v21 = v7;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v23 = v20;
    *(_DWORD *)uint64_t v13 = 136315138;
    v19[1] = v13 + 4;
    swift_retain();
    uint64_t v14 = specialized InsightRequestSummaryLogger.constructLogJsonString(_:)((uint64_t)v6, a1);
    unint64_t v16 = v15;
    swift_release();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of InsightRequestSummaryLogger((uint64_t)v6);
    swift_release();
    _os_log_impl(&dword_1B9C64000, v11, v12, "%s", v13, 0xCu);
    uint64_t v17 = v20;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  }
  else
  {
    swift_release();
    outlined destroy of InsightRequestSummaryLogger((uint64_t)v6);

    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t InsightRequestSummaryKey.rawValue.getter(uint64_t a1)
{
  return a1;
}

uint64_t static InsightRequestSummaryKey.assistantId.getter()
{
  return 0x6E61747369737361;
}

uint64_t static InsightRequestSummaryKey.bridgeName.getter()
{
  return 0x614E656764697262;
}

uint64_t static InsightRequestSummaryKey.commandAceId.getter()
{
  return 0x41646E616D6D6F63;
}

uint64_t static InsightRequestSummaryKey.commandName.getter()
{
  return 0x4E646E616D6D6F63;
}

void *InsightRequestSummaryKey.dismissUIForMitigation.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.dismissUIForMitigation;
}

unint64_t static InsightRequestSummaryKey.dismissUIForMitigation.getter()
{
  return 0xD000000000000016;
}

uint64_t static InsightRequestSummaryKey.errorCode.getter()
{
  return 0x646F43726F727265;
}

uint64_t static InsightRequestSummaryKey.failureReason.getter()
{
  return 0x526572756C696166;
}

unint64_t static InsightRequestSummaryKey.messageDescription.getter()
{
  return 0xD000000000000012;
}

const char *InsightRequestSummaryKey.mitigatedByURS.unsafeMutableAddressor()
{
  return "mitigatedByURS";
}

uint64_t static InsightRequestSummaryKey.mitigatedByURS.getter()
{
  return 0x657461676974696DLL;
}

const char *InsightRequestSummaryKey.postSucceeded.unsafeMutableAddressor()
{
  return "postSucceeded";
}

uint64_t static InsightRequestSummaryKey.postSucceeded.getter()
{
  return 0x6363755374736F70;
}

void *InsightRequestSummaryKey.preExecutionDecision.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.preExecutionDecision;
}

unint64_t static InsightRequestSummaryKey.preExecutionDecision.getter()
{
  return 0xD000000000000014;
}

unint64_t static InsightRequestSummaryKey.pommesFallbackResponseError.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static InsightRequestSummaryKey.pommesFallbackResponseNil.getter()
{
  return 0xD000000000000019;
}

uint64_t static InsightRequestSummaryKey.requestId.getter()
{
  return 0x4974736575716572;
}

unint64_t static InsightRequestSummaryKey.resultCandidateId.getter()
{
  return 0xD000000000000011;
}

const char *InsightRequestSummaryKey.returnCode.unsafeMutableAddressor()
{
  return "returnCode";
}

uint64_t static InsightRequestSummaryKey.returnCode.getter()
{
  return 0x6F436E7275746572;
}

unint64_t static InsightRequestSummaryKey.serverFallbackReason.getter()
{
  return 0xD000000000000014;
}

unint64_t static InsightRequestSummaryKey.serverFallbackContextId.getter()
{
  return 0xD000000000000017;
}

uint64_t static InsightRequestSummaryKey.sessionId.getter()
{
  return 0x496E6F6973736573;
}

uint64_t static InsightRequestSummaryKey.tcuId.getter()
{
  return 0x6449756374;
}

uint64_t static InsightRequestSummaryKey.trpId.getter()
{
  return 0x6449707274;
}

const char *InsightRequestSummaryKey.utterance.unsafeMutableAddressor()
{
  return "utterance";
}

uint64_t static InsightRequestSummaryKey.utterance.getter()
{
  return 0x636E617265747475;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance InsightRequestSummaryKey@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InsightRequestSummaryKey@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, Swift::String *a3)
{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD00000000000001CLL, 0x80000001BA061330, 0x6449707274, 0xE500000000000000);
}

{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD00000000000001DLL, 0x80000001BA0612A0, 0xD000000000000011, 0x80000001BA0607B0);
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  uint64_t v14 = Logger.logObject.getter();
  int v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, (os_log_type_t)v15))
  {
    int v56 = v15;
    os_log_t v58 = v14;
    uint64_t v59 = v13;
    uint64_t v60 = v11;
    uint64_t v61 = v10;
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v55 = v17;
    id v57 = v16;
    *(_DWORD *)unint64_t v16 = 136315138;
    uint64_t v65 = 123;
    unint64_t v66 = 0xE100000000000000;
    uint64_t v67 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA052AC0;
    *(void *)(inited + 32) = 0x614E656764697262;
    *(void *)(inited + 40) = 0xEA0000000000656DLL;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001BA064FF0;
    *(void *)(inited + 64) = 0xD000000000000012;
    *(void *)(inited + 72) = 0x80000001BA065010;
    *(void *)(inited + 80) = 0xD000000000000013;
    *(void *)(inited + 88) = 0x80000001BA0612C0;
    *(void *)(inited + 96) = 0x4974736575716572;
    *(void *)(inited + 104) = 0xE900000000000064;
    *(void *)(inited + 112) = a2;
    *(void *)(inited + 120) = a3;
    *(void *)(inited + 128) = 0xD000000000000016;
    *(void *)(inited + 136) = 0x80000001BA069C00;
    uint64_t v63 = 0;
    unint64_t v64 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    if (a4) {
      uint64_t v20 = 1702195828;
    }
    else {
      uint64_t v20 = 0x65736C6166;
    }
    if (a4) {
      unint64_t v21 = 0xE400000000000000;
    }
    else {
      unint64_t v21 = 0xE500000000000000;
    }
    unint64_t v22 = v21;
    String.append(_:)(*(Swift::String *)&v20);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    unint64_t v24 = v64;
    *(void *)(inited + 144) = v63;
    *(void *)(inited + 152) = v24;
    strcpy((char *)(inited + 160), "mitigatedByURS");
    *(unsigned char *)(inited + 175) = -18;
    uint64_t v63 = 0;
    unint64_t v64 = 0xE000000000000000;
    v25._uint64_t countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    String.append(_:)(v25);
    if (a5) {
      uint64_t v26 = 1702195828;
    }
    else {
      uint64_t v26 = 0x65736C6166;
    }
    if (a5) {
      unint64_t v27 = 0xE400000000000000;
    }
    else {
      unint64_t v27 = 0xE500000000000000;
    }
    unint64_t v28 = v27;
    String.append(_:)(*(Swift::String *)&v26);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.append(_:)(v29);
    unint64_t v30 = v64;
    *(void *)(inited + 176) = v63;
    *(void *)(inited + 184) = v30;
    uint64_t v62 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 5, 0);
    uint64_t v31 = 0;
    uint64_t v32 = v62;
    do
    {
      uint64_t v33 = *(void *)(inited + v31 + 32);
      uint64_t v34 = *(void **)(inited + v31 + 40);
      uint64_t v36 = *(void *)(inited + v31 + 48);
      uint64_t v35 = *(void **)(inited + v31 + 56);
      uint64_t v63 = 34;
      unint64_t v64 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37._uint64_t countAndFlagsBits = v33;
      v37._object = v34;
      String.append(_:)(v37);
      v38._uint64_t countAndFlagsBits = 2243106;
      v38._object = (void *)0xE300000000000000;
      String.append(_:)(v38);
      v39._uint64_t countAndFlagsBits = v36;
      v39._object = v35;
      String.append(_:)(v39);
      v40._uint64_t countAndFlagsBits = 34;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v41 = v63;
      unint64_t v42 = v64;
      uint64_t v62 = v32;
      unint64_t v44 = *(void *)(v32 + 16);
      unint64_t v43 = *(void *)(v32 + 24);
      if (v44 >= v43 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
        uint64_t v32 = v62;
      }
      *(void *)(v32 + 16) = v44 + 1;
      unint64_t v45 = v32 + 16 * v44;
      *(void *)(v45 + 32) = v41;
      *(void *)(v45 + 40) = v42;
      v31 += 32;
    }
    while (v31 != 160);
    swift_bridgeObjectRelease();
    uint64_t v46 = v57;
    uint64_t v63 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v47 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v49 = v48;
    swift_release();
    v50._uint64_t countAndFlagsBits = v47;
    v50._object = v49;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._uint64_t countAndFlagsBits = 125;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v52 = v58;
    _os_log_impl(&dword_1B9C64000, v58, (os_log_type_t)v56, "%s", v46, 0xCu);
    uint64_t v53 = v55;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v53, -1, -1);
    MEMORY[0x1BA9E48C0](v46, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v59, v61);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v12 = Logger.logObject.getter();
  int v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, (os_log_type_t)v13))
  {
    int v46 = v13;
    os_log_t v48 = v12;
    Swift::String v49 = v11;
    uint64_t v50 = v9;
    uint64_t v51 = v8;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v45 = v15;
    uint64_t v47 = v14;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v55 = 123;
    unint64_t v56 = 0xE100000000000000;
    uint64_t v57 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA0563A0;
    *(void *)(inited + 32) = 0x614E656764697262;
    *(void *)(inited + 40) = 0xEA0000000000656DLL;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001BA064FF0;
    *(void *)(inited + 64) = 0xD000000000000012;
    *(void *)(inited + 72) = 0x80000001BA065010;
    *(void *)(inited + 80) = 0xD000000000000017;
    *(void *)(inited + 88) = 0x80000001BA061310;
    *(void *)(inited + 96) = 0xD000000000000014;
    *(void *)(inited + 104) = 0x80000001BA069C20;
    uint64_t v53 = 0;
    unint64_t v54 = 0xE000000000000000;
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = PreExecutionDecision.rawValue.getter(a2);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    unint64_t v20 = v54;
    *(void *)(inited + 112) = v53;
    *(void *)(inited + 120) = v20;
    *(void *)(inited + 128) = 0x4974736575716572;
    *(void *)(inited + 136) = 0xE900000000000064;
    *(void *)(inited + 144) = a3;
    *(void *)(inited + 152) = a4;
    uint64_t v52 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
    uint64_t v21 = 0;
    uint64_t v22 = v52;
    do
    {
      uint64_t v23 = *(void *)(inited + v21 + 32);
      unint64_t v24 = *(void **)(inited + v21 + 40);
      uint64_t v26 = *(void *)(inited + v21 + 48);
      Swift::String v25 = *(void **)(inited + v21 + 56);
      uint64_t v53 = 34;
      unint64_t v54 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27._uint64_t countAndFlagsBits = v23;
      v27._object = v24;
      String.append(_:)(v27);
      v28._uint64_t countAndFlagsBits = 2243106;
      v28._object = (void *)0xE300000000000000;
      String.append(_:)(v28);
      v29._uint64_t countAndFlagsBits = v26;
      v29._object = v25;
      String.append(_:)(v29);
      v30._uint64_t countAndFlagsBits = 34;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = v53;
      unint64_t v32 = v54;
      uint64_t v52 = v22;
      unint64_t v34 = *(void *)(v22 + 16);
      unint64_t v33 = *(void *)(v22 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        uint64_t v22 = v52;
      }
      *(void *)(v22 + 16) = v34 + 1;
      unint64_t v35 = v22 + 16 * v34;
      *(void *)(v35 + 32) = v31;
      *(void *)(v35 + 40) = v32;
      v21 += 32;
    }
    while (v21 != 128);
    swift_bridgeObjectRelease();
    uint64_t v36 = v47;
    uint64_t v53 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v39 = v38;
    swift_release();
    v40._uint64_t countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = 125;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v42 = v48;
    _os_log_impl(&dword_1B9C64000, v48, (os_log_type_t)v46, "%s", v36, 0xCu);
    uint64_t v43 = v45;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v43, -1, -1);
    MEMORY[0x1BA9E48C0](v36, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v63 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v11 = Logger.logObject.getter();
  int v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, (os_log_type_t)v12))
  {
    int v57 = v12;
    os_log_t v59 = v11;
    uint64_t v60 = v10;
    uint64_t v61 = v8;
    int v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v56 = v14;
    os_log_t v58 = v13;
    *(_DWORD *)int v13 = 136315138;
    uint64_t v67 = 123;
    unint64_t v68 = 0xE100000000000000;
    uint64_t v69 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA057000;
    *(void *)(inited + 32) = 0x614E656764697262;
    *(void *)(inited + 40) = 0xEA0000000000656DLL;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001BA064FF0;
    *(void *)(inited + 64) = 0xD000000000000012;
    *(void *)(inited + 72) = 0x80000001BA065010;
    *(void *)(inited + 80) = 0xD000000000000027;
    *(void *)(inited + 88) = 0x80000001BA0613F0;
    *(void *)(inited + 96) = 0xD00000000000001BLL;
    *(void *)(inited + 104) = 0x80000001BA069C40;
    uint64_t v65 = 0;
    unint64_t v66 = 0xE000000000000000;
    v16._uint64_t countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    PommesResultCandidateMessage.error.getter();
    v17._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    String.append(_:)(v18);
    unint64_t v19 = v66;
    *(void *)(inited + 112) = v65;
    *(void *)(inited + 120) = v19;
    *(void *)(inited + 128) = 0xD000000000000019;
    *(void *)(inited + 136) = 0x80000001BA069C60;
    unint64_t v20 = (void *)PommesResultCandidateMessage.pommesResponse.getter();
    uint64_t v62 = v7;
    if (v20)
    {

      unint64_t v21 = 0xE500000000000000;
      uint64_t v22 = 0x65736C6146;
    }
    else
    {
      unint64_t v21 = 0xE400000000000000;
      uint64_t v22 = 1702195796;
    }
    uint64_t v24 = v63;
    *(void *)(inited + 144) = v22;
    *(void *)(inited + 152) = v21;
    *(void *)(inited + 160) = 0x6E61747369737361;
    *(void *)(inited + 168) = 0xEB00000000644974;
    uint64_t v25 = a3[13];
    *(void *)(inited + 176) = a3[12];
    *(void *)(inited + 184) = v25;
    *(void *)(inited + 192) = 0x496E6F6973736573;
    *(void *)(inited + 200) = 0xE900000000000064;
    uint64_t v65 = 0;
    unint64_t v66 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v26._uint64_t countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    String.append(_:)(v26);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    unint64_t v29 = v66;
    *(void *)(inited + 208) = v65;
    *(void *)(inited + 216) = v29;
    *(void *)(inited + 224) = 0x4974736575716572;
    *(void *)(inited + 232) = 0xE900000000000064;
    uint64_t v30 = a3[9];
    *(void *)(inited + 240) = a3[8];
    *(void *)(inited + 248) = v30;
    *(void *)(inited + 256) = 0xD000000000000011;
    *(void *)(inited + 264) = 0x80000001BA0607B0;
    uint64_t v31 = *(void *)(v24 + 24);
    *(void *)(inited + 272) = *(void *)(v24 + 16);
    *(void *)(inited + 280) = v31;
    uint64_t v64 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
    uint64_t v32 = 0;
    uint64_t v33 = v64;
    do
    {
      uint64_t v34 = *(void *)(inited + v32 + 32);
      unint64_t v35 = *(void **)(inited + v32 + 40);
      uint64_t v37 = *(void *)(inited + v32 + 48);
      uint64_t v36 = *(void **)(inited + v32 + 56);
      uint64_t v65 = 34;
      unint64_t v66 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38._uint64_t countAndFlagsBits = v34;
      v38._object = v35;
      String.append(_:)(v38);
      v39._uint64_t countAndFlagsBits = 2243106;
      v39._object = (void *)0xE300000000000000;
      String.append(_:)(v39);
      v40._uint64_t countAndFlagsBits = v37;
      v40._object = v36;
      String.append(_:)(v40);
      v41._uint64_t countAndFlagsBits = 34;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v42 = v65;
      unint64_t v43 = v66;
      uint64_t v64 = v33;
      unint64_t v45 = *(void *)(v33 + 16);
      unint64_t v44 = *(void *)(v33 + 24);
      if (v45 >= v44 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
        uint64_t v33 = v64;
      }
      *(void *)(v33 + 16) = v45 + 1;
      unint64_t v46 = v33 + 16 * v45;
      *(void *)(v46 + 32) = v42;
      *(void *)(v46 + 40) = v43;
      v32 += 32;
    }
    while (v32 != 256);
    swift_bridgeObjectRelease();
    uint64_t v47 = v58;
    uint64_t v65 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v48 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v50 = v49;
    swift_release();
    v51._uint64_t countAndFlagsBits = v48;
    v51._object = v50;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._uint64_t countAndFlagsBits = 125;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v53 = v59;
    _os_log_impl(&dword_1B9C64000, v59, (os_log_type_t)v57, "%s", v47, 0xCu);
    uint64_t v54 = v56;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v54, -1, -1);
    MEMORY[0x1BA9E48C0](v47, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v60, v62);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  int v12 = Logger.logObject.getter();
  int v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, (os_log_type_t)v13))
  {
    int v46 = v13;
    os_log_t v48 = v12;
    Swift::String v49 = v11;
    uint64_t v50 = v9;
    uint64_t v51 = v8;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v45 = v15;
    uint64_t v47 = v14;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v55 = 123;
    unint64_t v56 = 0xE100000000000000;
    uint64_t v57 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 32) = 0x614E656764697262;
    *(void *)(inited + 40) = 0xEA0000000000656DLL;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001BA064FF0;
    *(void *)(inited + 64) = 0xD000000000000012;
    *(void *)(inited + 72) = 0x80000001BA065010;
    *(_OWORD *)(inited + 16) = xmmword_1BA0563A0;
    *(void *)(inited + 80) = 0xD000000000000017;
    *(void *)(inited + 88) = 0x80000001BA0613A0;
    *(void *)(inited + 96) = 0x4974736575716572;
    *(void *)(inited + 104) = 0xE900000000000064;
    *(void *)(inited + 112) = a2;
    *(void *)(inited + 120) = a3;
    *(void *)(inited + 128) = 0x646F43726F727265;
    *(void *)(inited + 136) = 0xE900000000000065;
    uint64_t v53 = 0;
    unint64_t v54 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    LODWORD(v52) = a4;
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    unint64_t v20 = v54;
    *(void *)(inited + 144) = v53;
    *(void *)(inited + 152) = v20;
    uint64_t v52 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
    uint64_t v21 = 0;
    uint64_t v22 = v52;
    do
    {
      uint64_t v23 = *(void *)(inited + v21 + 32);
      uint64_t v24 = *(void **)(inited + v21 + 40);
      uint64_t v26 = *(void *)(inited + v21 + 48);
      uint64_t v25 = *(void **)(inited + v21 + 56);
      uint64_t v53 = 34;
      unint64_t v54 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27._uint64_t countAndFlagsBits = v23;
      v27._object = v24;
      String.append(_:)(v27);
      v28._uint64_t countAndFlagsBits = 2243106;
      v28._object = (void *)0xE300000000000000;
      String.append(_:)(v28);
      v29._uint64_t countAndFlagsBits = v26;
      v29._object = v25;
      String.append(_:)(v29);
      v30._uint64_t countAndFlagsBits = 34;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = v53;
      unint64_t v32 = v54;
      uint64_t v52 = v22;
      unint64_t v34 = *(void *)(v22 + 16);
      unint64_t v33 = *(void *)(v22 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        uint64_t v22 = v52;
      }
      *(void *)(v22 + 16) = v34 + 1;
      unint64_t v35 = v22 + 16 * v34;
      *(void *)(v35 + 32) = v31;
      *(void *)(v35 + 40) = v32;
      v21 += 32;
    }
    while (v21 != 128);
    swift_bridgeObjectRelease();
    uint64_t v36 = v47;
    uint64_t v53 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v39 = v38;
    swift_release();
    v40._uint64_t countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = 125;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v42 = v48;
    _os_log_impl(&dword_1B9C64000, v48, (os_log_type_t)v46, "%s", v36, 0xCu);
    uint64_t v43 = v45;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v43, -1, -1);
    MEMORY[0x1BA9E48C0](v36, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, uint64_t a3)
{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD00000000000001FLL, 0x80000001BA061470);
}

{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD000000000000019, 0x80000001BA061420);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  int v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t inited;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  Swift::String v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v34;
  Swift::String v35;
  unint64_t v36;
  Swift::String v37;
  id v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint8_t *v69;
  os_log_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;

  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, (os_log_type_t)v11))
  {
    unint64_t v68 = v11;
    id v70 = v10;
    uint64_t v71 = v9;
    int v12 = (uint8_t *)swift_slowAlloc();
    int v13 = swift_slowAlloc();
    uint64_t v67 = v13;
    uint64_t v69 = v12;
    *(_DWORD *)int v12 = 136315138;
    id v77 = 123;
    uint64_t v78 = 0xE100000000000000;
    uint64_t v79 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA057000;
    *(void *)(inited + 32) = 0x614E656764697262;
    *(void *)(inited + 40) = 0xEA0000000000656DLL;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001BA064FF0;
    *(void *)(inited + 64) = 0xD000000000000012;
    *(void *)(inited + 72) = 0x80000001BA065010;
    *(void *)(inited + 80) = 0xD000000000000027;
    *(void *)(inited + 88) = 0x80000001BA061440;
    strcpy((char *)(inited + 96), "failureReason");
    *(_WORD *)(inited + 110) = -4864;
    *(void *)(inited + 112) = 0xD000000000000052;
    *(void *)(inited + 120) = 0x80000001BA069CC0;
    *(void *)(inited + 128) = 0x6E61747369737361;
    *(void *)(inited + 136) = 0xEB00000000644974;
    uint64_t v15 = (void *)0xE000000000000000;
    uint64_t v75 = 0;
    os_log_type_t v76 = 0xE000000000000000;
    v16._uint64_t countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    String.append(_:)(a2[6]);
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    Swift::String v18 = v76;
    *(void *)(inited + 144) = v75;
    *(void *)(inited + 152) = v18;
    *(void *)(inited + 160) = 0x496E6F6973736573;
    *(void *)(inited + 168) = 0xE900000000000064;
    uint64_t v75 = 0;
    os_log_type_t v76 = 0xE000000000000000;
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    uint64_t v22 = v76;
    *(void *)(inited + 176) = v75;
    *(void *)(inited + 184) = v22;
    *(void *)(inited + 192) = 0x4974736575716572;
    *(void *)(inited + 200) = 0xE900000000000064;
    uint64_t v75 = 0;
    os_log_type_t v76 = 0xE000000000000000;
    v23._uint64_t countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    String.append(_:)(a2[4]);
    v24._uint64_t countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.append(_:)(v24);
    uint64_t v25 = v76;
    *(void *)(inited + 208) = v75;
    *(void *)(inited + 216) = v25;
    *(void *)(inited + 224) = 0x4E646E616D6D6F63;
    *(void *)(inited + 232) = 0xEB00000000656D61;
    uint64_t v75 = 0;
    os_log_type_t v76 = 0xE000000000000000;
    v26._uint64_t countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    String.append(_:)(v26);
    Swift::String v27 = *(void **)(a3 + OBJC_IVAR___SKRExecutionOutput_command);
    if (v27
      && (Swift::String v28 = objc_msgSend(*(id *)(a3 + OBJC_IVAR___SKRExecutionOutput_command), sel_encodedClassName)) != 0)
    {
      Swift::String v29 = v28;
      Swift::String v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v32 = v31;
    }
    else
    {
      Swift::String v30 = 0;
      unint64_t v32 = (void *)0xE000000000000000;
    }
    v34._uint64_t countAndFlagsBits = v30;
    v34._object = v32;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 0;
    v35._object = (void *)0xE000000000000000;
    String.append(_:)(v35);
    uint64_t v36 = v76;
    *(void *)(inited + 240) = v75;
    *(void *)(inited + 248) = v36;
    strcpy((char *)(inited + 256), "commandAceId");
    *(unsigned char *)(inited + 269) = 0;
    *(_WORD *)(inited + 270) = -5120;
    uint64_t v75 = 0;
    os_log_type_t v76 = 0xE000000000000000;
    v37._uint64_t countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    String.append(_:)(v37);
    v72 = v7;
    uint64_t v73 = v6;
    if (v27)
    {
      Swift::String v38 = objc_msgSend(v27, sel_aceId);
      if (v38)
      {
        Swift::String v39 = v38;
        Swift::String v27 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v40;
      }
      else
      {
        Swift::String v27 = 0;
      }
    }
    v41._uint64_t countAndFlagsBits = (uint64_t)v27;
    v41._object = v15;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._uint64_t countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    String.append(_:)(v42);
    uint64_t v43 = v76;
    *(void *)(inited + 272) = v75;
    *(void *)(inited + 280) = v43;
    uint64_t v74 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
    unint64_t v44 = 0;
    uint64_t v45 = v74;
    do
    {
      int v46 = *(void *)(inited + v44 + 32);
      uint64_t v47 = *(void **)(inited + v44 + 40);
      Swift::String v49 = *(void *)(inited + v44 + 48);
      os_log_t v48 = *(void **)(inited + v44 + 56);
      uint64_t v75 = 34;
      os_log_type_t v76 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50._uint64_t countAndFlagsBits = v46;
      v50._object = v47;
      String.append(_:)(v50);
      v51._uint64_t countAndFlagsBits = 2243106;
      v51._object = (void *)0xE300000000000000;
      String.append(_:)(v51);
      v52._uint64_t countAndFlagsBits = v49;
      v52._object = v48;
      String.append(_:)(v52);
      v53._uint64_t countAndFlagsBits = 34;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v54 = v75;
      uint64_t v55 = v76;
      uint64_t v74 = v45;
      uint64_t v57 = *(void *)(v45 + 16);
      unint64_t v56 = *(void *)(v45 + 24);
      if (v57 >= v56 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
        uint64_t v45 = v74;
      }
      *(void *)(v45 + 16) = v57 + 1;
      os_log_t v58 = v45 + 16 * v57;
      *(void *)(v58 + 32) = v54;
      *(void *)(v58 + 40) = v55;
      v44 += 32;
    }
    while (v44 != 256);
    swift_bridgeObjectRelease();
    os_log_t v59 = v69;
    uint64_t v75 = v45;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v60 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v62 = v61;
    swift_release();
    v63._uint64_t countAndFlagsBits = v60;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64._uint64_t countAndFlagsBits = 125;
    v64._object = (void *)0xE100000000000000;
    String.append(_:)(v64);
    id v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v65 = v70;
    _os_log_impl(&dword_1B9C64000, v70, (os_log_type_t)v68, "%s", v59, 0xCu);
    unint64_t v66 = v67;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v66, -1, -1);
    MEMORY[0x1BA9E48C0](v59, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v71, v73);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD00000000000001ELL, 0x80000001BA0614C0);
}

{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD000000000000021, 0x80000001BA061490);
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v10 = Logger.logObject.getter();
  int v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, (os_log_type_t)v11))
  {
    int v47 = v11;
    os_log_t v49 = v10;
    uint64_t v50 = v9;
    uint64_t v51 = v7;
    uint64_t v52 = v6;
    int v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v46 = v13;
    os_log_t v48 = v12;
    *(_DWORD *)int v12 = 136315138;
    uint64_t v56 = 123;
    unint64_t v57 = 0xE100000000000000;
    uint64_t v58 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA050750;
    *(void *)(inited + 32) = 0x614E656764697262;
    *(void *)(inited + 40) = 0xEA0000000000656DLL;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001BA064FF0;
    *(void *)(inited + 64) = 0xD000000000000012;
    *(void *)(inited + 72) = 0x80000001BA065010;
    *(void *)(inited + 80) = 0xD000000000000020;
    *(void *)(inited + 88) = 0x80000001BA0613C0;
    *(void *)(inited + 96) = 0x6E61747369737361;
    *(void *)(inited + 104) = 0xEB00000000644974;
    uint64_t v15 = a2[13];
    *(void *)(inited + 112) = a2[12];
    *(void *)(inited + 120) = v15;
    *(void *)(inited + 128) = 0x496E6F6973736573;
    *(void *)(inited + 136) = 0xE900000000000064;
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    String.append(_:)(v18);
    unint64_t v19 = v55;
    *(void *)(inited + 144) = v54;
    *(void *)(inited + 152) = v19;
    *(void *)(inited + 160) = 0x4974736575716572;
    *(void *)(inited + 168) = 0xE900000000000064;
    uint64_t v20 = a2[9];
    *(void *)(inited + 176) = a2[8];
    *(void *)(inited + 184) = v20;
    *(void *)(inited + 192) = 0xD000000000000011;
    *(void *)(inited + 200) = 0x80000001BA0607B0;
    uint64_t v21 = *(void *)(a3 + 24);
    *(void *)(inited + 208) = *(void *)(a3 + 16);
    *(void *)(inited + 216) = v21;
    uint64_t v53 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 6, 0);
    uint64_t v22 = 0;
    uint64_t v23 = v53;
    do
    {
      uint64_t v24 = *(void *)(inited + v22 + 32);
      uint64_t v25 = *(void **)(inited + v22 + 40);
      uint64_t v27 = *(void *)(inited + v22 + 48);
      uint64_t v26 = *(void **)(inited + v22 + 56);
      uint64_t v54 = 34;
      unint64_t v55 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28._uint64_t countAndFlagsBits = v24;
      v28._object = v25;
      String.append(_:)(v28);
      v29._uint64_t countAndFlagsBits = 2243106;
      v29._object = (void *)0xE300000000000000;
      String.append(_:)(v29);
      v30._uint64_t countAndFlagsBits = v27;
      v30._object = v26;
      String.append(_:)(v30);
      v31._uint64_t countAndFlagsBits = 34;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v32 = v54;
      unint64_t v33 = v55;
      uint64_t v53 = v23;
      unint64_t v35 = *(void *)(v23 + 16);
      unint64_t v34 = *(void *)(v23 + 24);
      if (v35 >= v34 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        uint64_t v23 = v53;
      }
      *(void *)(v23 + 16) = v35 + 1;
      unint64_t v36 = v23 + 16 * v35;
      *(void *)(v36 + 32) = v32;
      *(void *)(v36 + 40) = v33;
      v22 += 32;
    }
    while (v22 != 192);
    swift_bridgeObjectRelease();
    uint64_t v37 = v48;
    uint64_t v54 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v38 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v40 = v39;
    swift_release();
    v41._uint64_t countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._uint64_t countAndFlagsBits = 125;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v43 = v49;
    _os_log_impl(&dword_1B9C64000, v49, (os_log_type_t)v47, "%s", v37, 0xCu);
    uint64_t v44 = v46;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v44, -1, -1);
    MEMORY[0x1BA9E48C0](v37, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  uint64_t v14 = Logger.logObject.getter();
  int v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, (os_log_type_t)v15))
  {
    int v72 = v15;
    os_log_t v74 = v14;
    uint64_t v75 = v13;
    Swift::String v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v71 = v17;
    uint64_t v73 = v16;
    *(_DWORD *)Swift::String v16 = 136315138;
    uint64_t v81 = 123;
    unint64_t v82 = 0xE100000000000000;
    uint64_t v83 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA0526C0;
    *(void *)(inited + 32) = 0x614E656764697262;
    *(void *)(inited + 40) = 0xEA0000000000656DLL;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001BA064FF0;
    *(void *)(inited + 64) = 0xD000000000000012;
    *(void *)(inited + 72) = 0x80000001BA065010;
    *(void *)(inited + 80) = a4;
    *(void *)(inited + 88) = a5;
    *(void *)(inited + 96) = 0x6E61747369737361;
    *(void *)(inited + 104) = 0xEB00000000644974;
    unint64_t v19 = (void *)0xE000000000000000;
    uint64_t v79 = 0;
    unint64_t v80 = 0xE000000000000000;
    v20._uint64_t countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    String.append(_:)(v20);
    String.append(_:)(a2[6]);
    v21._uint64_t countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    unint64_t v22 = v80;
    *(void *)(inited + 112) = v79;
    *(void *)(inited + 120) = v22;
    *(void *)(inited + 128) = 0x496E6F6973736573;
    *(void *)(inited + 136) = 0xE900000000000064;
    uint64_t v79 = 0;
    unint64_t v80 = 0xE000000000000000;
    v23._uint64_t countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    String.append(_:)(v25);
    unint64_t v26 = v80;
    *(void *)(inited + 144) = v79;
    *(void *)(inited + 152) = v26;
    *(void *)(inited + 160) = 0x4974736575716572;
    *(void *)(inited + 168) = 0xE900000000000064;
    uint64_t v79 = 0;
    unint64_t v80 = 0xE000000000000000;
    v27._uint64_t countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    String.append(_:)(v27);
    String.append(_:)(a2[5]);
    v28._uint64_t countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    unint64_t v29 = v80;
    *(void *)(inited + 176) = v79;
    *(void *)(inited + 184) = v29;
    *(void *)(inited + 192) = 0x4E646E616D6D6F63;
    *(void *)(inited + 200) = 0xEB00000000656D61;
    uint64_t v79 = 0;
    unint64_t v80 = 0xE000000000000000;
    v30._uint64_t countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    String.append(_:)(v30);
    Swift::String v31 = *(void **)(a3 + OBJC_IVAR___SKRExecutionOutput_command);
    if (v31
      && (id v32 = objc_msgSend(*(id *)(a3 + OBJC_IVAR___SKRExecutionOutput_command), sel_encodedClassName)) != 0)
    {
      unint64_t v33 = v32;
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;
    }
    else
    {
      uint64_t v34 = 0;
      unint64_t v36 = (void *)0xE000000000000000;
    }
    v38._uint64_t countAndFlagsBits = v34;
    v38._object = v36;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    String.append(_:)(v39);
    unint64_t v40 = v80;
    *(void *)(inited + 208) = v79;
    *(void *)(inited + 216) = v40;
    strcpy((char *)(inited + 224), "commandAceId");
    *(unsigned char *)(inited + 237) = 0;
    *(_WORD *)(inited + 238) = -5120;
    uint64_t v79 = 0;
    unint64_t v80 = 0xE000000000000000;
    v41._uint64_t countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    String.append(_:)(v41);
    uint64_t v76 = v11;
    uint64_t v77 = v10;
    if (v31)
    {
      id v42 = objc_msgSend(v31, sel_aceId);
      if (v42)
      {
        os_log_t v43 = v42;
        Swift::String v31 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v44;
      }
      else
      {
        Swift::String v31 = 0;
      }
    }
    v45._uint64_t countAndFlagsBits = (uint64_t)v31;
    v45._object = v19;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    String.append(_:)(v46);
    unint64_t v47 = v80;
    *(void *)(inited + 240) = v79;
    *(void *)(inited + 248) = v47;
    uint64_t v78 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0);
    uint64_t v48 = 0;
    uint64_t v49 = v78;
    do
    {
      uint64_t v50 = *(void *)(inited + v48 + 32);
      uint64_t v51 = *(void **)(inited + v48 + 40);
      uint64_t v53 = *(void *)(inited + v48 + 48);
      uint64_t v52 = *(void **)(inited + v48 + 56);
      uint64_t v79 = 34;
      unint64_t v80 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54._uint64_t countAndFlagsBits = v50;
      v54._object = v51;
      String.append(_:)(v54);
      v55._uint64_t countAndFlagsBits = 2243106;
      v55._object = (void *)0xE300000000000000;
      String.append(_:)(v55);
      v56._uint64_t countAndFlagsBits = v53;
      v56._object = v52;
      String.append(_:)(v56);
      v57._uint64_t countAndFlagsBits = 34;
      v57._object = (void *)0xE100000000000000;
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v58 = v79;
      unint64_t v59 = v80;
      uint64_t v78 = v49;
      unint64_t v61 = *(void *)(v49 + 16);
      unint64_t v60 = *(void *)(v49 + 24);
      if (v61 >= v60 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
        uint64_t v49 = v78;
      }
      *(void *)(v49 + 16) = v61 + 1;
      unint64_t v62 = v49 + 16 * v61;
      *(void *)(v62 + 32) = v58;
      *(void *)(v62 + 40) = v59;
      v48 += 32;
    }
    while (v48 != 224);
    swift_bridgeObjectRelease();
    uint64_t v63 = v73;
    uint64_t v79 = v49;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v64 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v66 = v65;
    swift_release();
    v67._uint64_t countAndFlagsBits = v64;
    v67._object = v66;
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v68._uint64_t countAndFlagsBits = 125;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v69 = v74;
    _os_log_impl(&dword_1B9C64000, v74, (os_log_type_t)v72, "%s", v63, 0xCu);
    uint64_t v70 = v71;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v70, -1, -1);
    MEMORY[0x1BA9E48C0](v63, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v75, v77);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v76 = a4;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  int v15 = Logger.logObject.getter();
  int v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    int v70 = v16;
    os_log_t v72 = v15;
    uint64_t v73 = v14;
    uint64_t v74 = v12;
    uint64_t v75 = v11;
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v69 = v18;
    uint64_t v71 = v17;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v80 = 123;
    unint64_t v81 = 0xE100000000000000;
    uint64_t v82 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    uint64_t inited = swift_initStackObject();
    Swift::String v68 = a6;
    Swift::String v20 = (void *)inited;
    *(_OWORD *)(inited + 16) = xmmword_1BA057000;
    *(void *)(inited + 32) = 0x614E656764697262;
    *(void *)(inited + 40) = 0xEA0000000000656DLL;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001BA064FF0;
    *(void *)(inited + 64) = 0xD000000000000012;
    *(void *)(inited + 72) = 0x80000001BA065010;
    *(void *)(inited + 80) = 0xD000000000000022;
    *(void *)(inited + 88) = 0x80000001BA0612E0;
    *(void *)(inited + 96) = 0x6E61747369737361;
    *(void *)(inited + 104) = 0xEB00000000644974;
    uint64_t v78 = 0;
    unint64_t v79 = 0xE000000000000000;
    v21._uint64_t countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    String.append(_:)(a2[6]);
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.append(_:)(v22);
    unint64_t v23 = v79;
    v20[14] = v78;
    v20[15] = v23;
    v20[16] = 0x496E6F6973736573;
    v20[17] = 0xE900000000000064;
    uint64_t v78 = 0;
    unint64_t v79 = 0xE000000000000000;
    v24._uint64_t countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.append(_:)(v24);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    String.append(_:)(v26);
    unint64_t v27 = v79;
    v20[18] = v78;
    v20[19] = v27;
    v20[20] = 0x4974736575716572;
    v20[21] = 0xE900000000000064;
    uint64_t v78 = 0;
    unint64_t v79 = 0xE000000000000000;
    v28._uint64_t countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    String.append(_:)(a2[4]);
    v29._uint64_t countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.append(_:)(v29);
    unint64_t v30 = v79;
    v20[22] = v78;
    v20[23] = v30;
    v20[24] = 0xD000000000000011;
    v20[25] = 0x80000001BA0607B0;
    uint64_t v78 = 0;
    unint64_t v79 = 0xE000000000000000;
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = a3;
    unint64_t v33 = v76;
    v32._object = v76;
    String.append(_:)(v32);
    v34._uint64_t countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    String.append(_:)(v34);
    unint64_t v35 = v79;
    v20[26] = v78;
    v20[27] = v35;
    v20[28] = 0x6449707274;
    v20[29] = 0xE500000000000000;
    uint64_t v78 = 0;
    unint64_t v79 = 0xE000000000000000;
    v36._uint64_t countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = a3;
    v37._object = v33;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    String.append(_:)(v38);
    unint64_t v39 = v79;
    v20[30] = v78;
    v20[31] = v39;
    v20[32] = 0x6449756374;
    v20[33] = 0xE500000000000000;
    uint64_t v78 = 0;
    unint64_t v79 = 0xE000000000000000;
    v40._uint64_t countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    String.append(_:)(v40);
    v41._uint64_t countAndFlagsBits = a5;
    v41._object = v68;
    String.append(_:)(v41);
    v42._uint64_t countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    String.append(_:)(v42);
    unint64_t v43 = v79;
    v20[34] = v78;
    v20[35] = v43;
    uint64_t v77 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
    uint64_t v44 = 0;
    uint64_t v45 = v77;
    do
    {
      uint64_t v46 = v20[v44 + 4];
      unint64_t v47 = (void *)v20[v44 + 5];
      uint64_t v49 = v20[v44 + 6];
      uint64_t v48 = (void *)v20[v44 + 7];
      uint64_t v78 = 34;
      unint64_t v79 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50._uint64_t countAndFlagsBits = v46;
      v50._object = v47;
      String.append(_:)(v50);
      v51._uint64_t countAndFlagsBits = 2243106;
      v51._object = (void *)0xE300000000000000;
      String.append(_:)(v51);
      v52._uint64_t countAndFlagsBits = v49;
      v52._object = v48;
      String.append(_:)(v52);
      v53._uint64_t countAndFlagsBits = 34;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v54 = v78;
      unint64_t v55 = v79;
      uint64_t v77 = v45;
      unint64_t v57 = *(void *)(v45 + 16);
      unint64_t v56 = *(void *)(v45 + 24);
      if (v57 >= v56 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
        uint64_t v45 = v77;
      }
      *(void *)(v45 + 16) = v57 + 1;
      unint64_t v58 = v45 + 16 * v57;
      *(void *)(v58 + 32) = v54;
      *(void *)(v58 + 40) = v55;
      v44 += 4;
    }
    while (v44 != 32);
    swift_bridgeObjectRelease();
    unint64_t v59 = v71;
    uint64_t v78 = v45;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v60 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v62 = v61;
    swift_release();
    v63._uint64_t countAndFlagsBits = v60;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64._uint64_t countAndFlagsBits = 125;
    v64._object = (void *)0xE100000000000000;
    String.append(_:)(v64);
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v65 = v72;
    _os_log_impl(&dword_1B9C64000, v72, (os_log_type_t)v70, "%s", v59, 0xCu);
    uint64_t v66 = v69;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v66, -1, -1);
    MEMORY[0x1BA9E48C0](v59, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v73, v75);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, Swift::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v66 = a6;
  uint64_t v67 = a7;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  int v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  int v16 = Logger.logObject.getter();
  int v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    int v60 = v17;
    os_log_t v62 = v16;
    Swift::String v63 = v15;
    uint64_t v64 = v13;
    uint64_t v65 = v12;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v59 = v19;
    unint64_t v61 = v18;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v71 = 123;
    unint64_t v72 = 0xE100000000000000;
    uint64_t v73 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA050750;
    *(void *)(inited + 32) = 0x614E656764697262;
    *(void *)(inited + 40) = 0xEA0000000000656DLL;
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001BA064FF0;
    *(void *)(inited + 64) = 0xD000000000000012;
    *(void *)(inited + 72) = 0x80000001BA065010;
    *(void *)(inited + 80) = a4;
    *(void *)(inited + 88) = a5;
    *(void *)(inited + 96) = 0x6E61747369737361;
    *(void *)(inited + 104) = 0xEB00000000644974;
    uint64_t v69 = 0;
    unint64_t v70 = 0xE000000000000000;
    v21._uint64_t countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    String.append(_:)(a2[6]);
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.append(_:)(v22);
    unint64_t v23 = v70;
    *(void *)(inited + 112) = v69;
    *(void *)(inited + 120) = v23;
    *(void *)(inited + 128) = 0x496E6F6973736573;
    *(void *)(inited + 136) = 0xE900000000000064;
    uint64_t v69 = 0;
    unint64_t v70 = 0xE000000000000000;
    v24._uint64_t countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.append(_:)(v24);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    String.append(_:)(v26);
    unint64_t v27 = v70;
    *(void *)(inited + 144) = v69;
    *(void *)(inited + 152) = v27;
    *(void *)(inited + 160) = 0x4974736575716572;
    *(void *)(inited + 168) = 0xE900000000000064;
    uint64_t v69 = 0;
    unint64_t v70 = 0xE000000000000000;
    v28._uint64_t countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    String.append(_:)(a2[4]);
    v29._uint64_t countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.append(_:)(v29);
    unint64_t v30 = v70;
    *(void *)(inited + 176) = v69;
    *(void *)(inited + 184) = v30;
    uint64_t v31 = v67;
    *(void *)(inited + 192) = v66;
    *(void *)(inited + 200) = v31;
    uint64_t v69 = 0;
    unint64_t v70 = 0xE000000000000000;
    v32._uint64_t countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    String.append(_:)(v32);
    String.append(_:)(a3[1]);
    v33._uint64_t countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    String.append(_:)(v33);
    unint64_t v34 = v70;
    *(void *)(inited + 208) = v69;
    *(void *)(inited + 216) = v34;
    uint64_t v68 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 6, 0);
    uint64_t v35 = 0;
    uint64_t v36 = v68;
    do
    {
      uint64_t v37 = *(void *)(inited + v35 + 32);
      Swift::String v38 = *(void **)(inited + v35 + 40);
      uint64_t v40 = *(void *)(inited + v35 + 48);
      unint64_t v39 = *(void **)(inited + v35 + 56);
      uint64_t v69 = 34;
      unint64_t v70 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41._uint64_t countAndFlagsBits = v37;
      v41._object = v38;
      String.append(_:)(v41);
      v42._uint64_t countAndFlagsBits = 2243106;
      v42._object = (void *)0xE300000000000000;
      String.append(_:)(v42);
      v43._uint64_t countAndFlagsBits = v40;
      v43._object = v39;
      String.append(_:)(v43);
      v44._uint64_t countAndFlagsBits = 34;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v45 = v69;
      unint64_t v46 = v70;
      uint64_t v68 = v36;
      unint64_t v48 = *(void *)(v36 + 16);
      unint64_t v47 = *(void *)(v36 + 24);
      if (v48 >= v47 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
        uint64_t v36 = v68;
      }
      *(void *)(v36 + 16) = v48 + 1;
      unint64_t v49 = v36 + 16 * v48;
      *(void *)(v49 + 32) = v45;
      *(void *)(v49 + 40) = v46;
      v35 += 32;
    }
    while (v35 != 192);
    swift_bridgeObjectRelease();
    Swift::String v50 = v61;
    uint64_t v69 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v51 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v53 = v52;
    swift_release();
    v54._uint64_t countAndFlagsBits = v51;
    v54._object = v53;
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._uint64_t countAndFlagsBits = 125;
    v55._object = (void *)0xE100000000000000;
    String.append(_:)(v55);
    uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v56 = v62;
    _os_log_impl(&dword_1B9C64000, v62, (os_log_type_t)v60, "%s", v50, 0xCu);
    uint64_t v57 = v59;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v57, -1, -1);
    MEMORY[0x1BA9E48C0](v50, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v63, v65);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
}

uint64_t specialized InsightRequestSummaryLogger.constructLogJsonString(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = (void **)(v2 + 56);
    do
    {
      uint64_t v5 = (uint64_t)*(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v7 = (uint64_t)*(v4 - 1);
      uint64_t v8 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9._uint64_t countAndFlagsBits = v5;
      v9._object = v6;
      String.append(_:)(v9);
      v10._uint64_t countAndFlagsBits = 2243106;
      v10._object = (void *)0xE300000000000000;
      String.append(_:)(v10);
      v11._uint64_t countAndFlagsBits = v7;
      v11._object = v8;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = 34;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = *(void *)(v22 + 16);
      unint64_t v13 = *(void *)(v22 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      v4 += 4;
      *(void *)(v22 + 16) = v14 + 1;
      uint64_t v15 = v22 + 16 * v14;
      *(void *)(v15 + 32) = 34;
      *(void *)(v15 + 40) = 0xE100000000000000;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 125;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return 123;
}

uint64_t initializeBufferWithCopyOfBuffer for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t assignWithCopy for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9F25380);
}

uint64_t sub_1B9F25380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9F25400);
}

uint64_t sub_1B9F25400(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for InsightRequestSummaryLogger()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InsightRequestSummaryKey()
{
  return &type metadata for InsightRequestSummaryKey;
}

uint64_t InstrumentationUtil.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t InstrumentationUtil.powerLogger()()
{
  return 0;
}

id InstrumentationUtil.convertUUIDStringToSISchemaUUID(uuidStr:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of UUID?((uint64_t)v2);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    id v8 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v7 = objc_msgSend(v8, sel_initWithNSUUID_, isa);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v7;
}

id InstrumentationUtil.buildWrapperEventMessage(_:logResourceUtilization:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a1, a2, 0, 0, a3);
}

uint64_t InstrumentationUtil.init()()
{
  return v0;
}

Swift::UInt64 __swiftcall InstrumentationUtil.roundOffToTwoSignificantFigures(_:)(Swift::UInt64 a1)
{
  Swift::UInt64 v1 = a1;
  double v2 = (double)a1;
  double v3 = ceil(log10((double)a1));
  if (v3 <= 2.0) {
    return v1;
  }
  double v5 = __exp10(v3 + -2.0);
  double v6 = v5 * rint(v2 / v5);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 < 1.84467441e19) {
    return (unint64_t)v6;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t InstrumentationUtil.deinit()
{
  return v0;
}

uint64_t InstrumentationUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

NSObject *specialized InstrumentationUtil.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1300]), sel_init);
  if (!v5)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    double v6 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v39 = v20;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v23 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v6, v18, "Failed to create RequestLink event for source component: %s and target component: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }
    goto LABEL_18;
  }
  double v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1310]), sel_init);
  if (!v7)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
    Swift::String v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      Swift::String v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v39 = v29;
      *(_DWORD *)Swift::String v28 = 136315138;
      uint64_t v30 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v26, v27, "Failed to create source link event for source component: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v29, -1, -1);
      MEMORY[0x1BA9E48C0](v28, -1, -1);
    }
LABEL_17:

LABEL_18:
    return 0;
  }
  id v8 = v7;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1310]), sel_init);
  if (!v9)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
    Swift::String v26 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v33))
    {

      return 0;
    }
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v39 = v35;
    *(_DWORD *)unint64_t v34 = 136315138;
    uint64_t v36 = SISchemaComponentName.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v26, v33, "Failed to create target link event for target component: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    MEMORY[0x1BA9E48C0](v34, -1, -1);

    goto LABEL_17;
  }
  Swift::String v10 = v9;
  objc_msgSend(v8, sel_setComponent_, a1);
  id v11 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v13 = objc_msgSend(v11, sel_initWithNSUUID_, isa);

  objc_msgSend(v8, sel_setUuid_, v13);
  objc_msgSend(v10, sel_setComponent_, a3);
  id v14 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
  Class v15 = UUID._bridgeToObjectiveC()().super.isa;
  id v16 = objc_msgSend(v14, sel_initWithNSUUID_, v15);

  objc_msgSend(v10, sel_setUuid_, v16);
  [v6 setSource:v8];
  [v6 setTarget:v10];

  return v6;
}

uint64_t type metadata accessor for InstrumentationUtil()
{
  return self;
}

uint64_t method lookup function for InstrumentationUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InstrumentationUtil);
}

uint64_t dispatch thunk of InstrumentationUtil.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

void *InstrumentedStack.__allocating_init(initialFlowAgent:)(uint64_t a1)
{
  double v2 = (void *)swift_allocObject();
  v2[5] = MEMORY[0x1E4FBC868];
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
    double v3 = (void *)swift_allocObject();
    swift_weakInit();
    swift_weakInit();
    v3[6] = 0;
    v3[2] = a1;
    swift_beginAccess();
    swift_weakAssign();
    v3[4] = MEMORY[0x1E4FBC860];
    swift_weakAssign();
    v3[6] = 0;
    swift_retain();
    swift_retain();
    swift_release();
    specialized OrderedForest._push(_:)((uint64_t)v3);
    uint64_t v4 = v3[2];
    type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    double v6 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v5, 0);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = v2[5];
    v2[5] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v6, v4, isUniquelyReferenced_nonNull_native);
    v2[5] = v9;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
  }
  return v2;
}

void *InstrumentedStack.init(initialFlowAgent:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBC868];
  v1[4] = 0;
  v1[5] = v2;
  v1[2] = 0;
  v1[3] = 0;
  if (a1)
  {
    uint64_t v5 = a1;
    double v3 = *(void (**)(uint64_t *, void))(*v1 + 208);
    swift_retain();
    v3(&v5, 0);
    swift_release();
    swift_release();
    swift_release();
  }
  return v1;
}

void *InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(uint64_t a1, void *a2)
{
  double v3 = v2;
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BA04FD90;
  swift_retain();
  uint64_t v11 = ObjectIdentifier.hashValue.getter();
  uint64_t v12 = MEMORY[0x1E4FBB5C8];
  *(void *)(v10 + 56) = MEMORY[0x1E4FBB550];
  *(void *)(v10 + 64) = v12;
  *(void *)(v10 + 32) = v11;
  unint64_t v13 = 0xE300000000000000;
  uint64_t v14 = String.init(format:_:)();
  uint64_t v16 = v15;
  swift_release();
  v3[2] = v14;
  v3[3] = v16;
  if (a2)
  {
    uint64_t v17 = a2[2];
    unint64_t v13 = a2[3];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v17 = 7104878;
  }
  v3[4] = v17;
  v3[5] = v13;
  swift_retain();
  uint64_t v18 = AnyFlow.description.getter();
  uint64_t v20 = v19;
  swift_release();
  v3[6] = v18;
  v3[7] = v20;
  if (a2)
  {
    uint64_t v22 = a2[8];
    BOOL v21 = __OFADD__(v22, 1);
    uint64_t v23 = v22 + 1;
    if (!v21) {
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v23 = 0;
  if (v21) {
    goto LABEL_10;
  }
LABEL_6:
  v3[8] = v23;
  if (one-time initialization token for executor != -1) {
LABEL_11:
  }
    swift_once();
  id v24 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v3+ OBJC_IVAR____TtCC14SiriKitRuntime17InstrumentedStackP33_D2D0045FA6DDADCCE44653D1D402214316TrackedFlowAgent_signpostId, v9, v6);
  v39[1] = static os_signpost_type_t.begin.getter();
  uint64_t v40 = static Log.executor;
  Swift::String v41 = (char *)v3
      + OBJC_IVAR____TtCC14SiriKitRuntime17InstrumentedStackP33_D2D0045FA6DDADCCE44653D1D402214316TrackedFlowAgent_signpostId;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1BA052AC0;
  uint64_t v26 = v3[6];
  uint64_t v27 = v3[7];
  uint64_t v28 = MEMORY[0x1E4FBB1A0];
  *(void *)(v25 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v29 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v27;
  uint64_t v30 = v3[8];
  uint64_t v31 = MEMORY[0x1E4FBB550];
  *(void *)(v25 + 96) = MEMORY[0x1E4FBB550];
  uint64_t v32 = MEMORY[0x1E4FBB5C8];
  *(void *)(v25 + 64) = v29;
  *(void *)(v25 + 72) = v30;
  uint64_t v33 = v3[2];
  uint64_t v34 = v3[3];
  *(void *)(v25 + 136) = v28;
  *(void *)(v25 + 144) = v29;
  *(void *)(v25 + 104) = v32;
  *(void *)(v25 + 112) = v33;
  *(void *)(v25 + 120) = v34;
  uint64_t v35 = v3[4];
  uint64_t v36 = v3[5];
  *(void *)(v25 + 176) = v28;
  *(void *)(v25 + 184) = v29;
  *(void *)(v25 + 152) = v35;
  *(void *)(v25 + 160) = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v37 = String.hashValue.getter();
  *(void *)(v25 + 216) = v31;
  *(void *)(v25 + 224) = v32;
  *(void *)(v25 + 192) = v37;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v3;
}

uint64_t InstrumentedStack.TrackedFlowAgent.__deallocating_deinit()
{
  static os_signpost_type_t.end.getter();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC14SiriKitRuntime17InstrumentedStackP33_D2D0045FA6DDADCCE44653D1D402214316TrackedFlowAgent_signpostId;
  os_signpost(_:dso:log:name:signpostID:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall InstrumentedStack.clear()()
{
  swift_beginAccess();
  v0[5] = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRelease();
  v0[2] = 0;
  swift_release();
  v0[3] = 0;
  swift_release();
  swift_beginAccess();
  v0[4] = 0;
}

void *InstrumentedStack.push(value:parentNode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = (void *)a2;
  uint64_t v5 = specialized OrderedForest.push(value:parentNode:)(a1, a2);
  if (v4)
  {
    uint64_t v6 = v4[2];
    swift_beginAccess();
    uint64_t v7 = *(void *)(v2 + 40);
    if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
    {
      uint64_t v4 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
      swift_retain();
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  uint64_t v10 = v5[2];
  type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
  swift_allocObject();
  swift_retain();
  uint64_t v11 = swift_retain();
  uint64_t v12 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v11, v4);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, v10, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 40) = v15;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  return v5;
}

void *specialized OrderedForest.push(value:parentNode:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  uint64_t v4 = (void *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v4[6] = 0;
  v4[2] = a1;
  swift_beginAccess();
  swift_weakAssign();
  v4[4] = MEMORY[0x1E4FBC860];
  swift_weakAssign();
  v4[6] = 0;
  swift_retain();
  swift_release();
  if (a2)
  {
    swift_beginAccess();
    swift_retain();
    uint64_t v5 = swift_retain();
    MEMORY[0x1BA9E3030](v5);
    if (*(void *)((*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
  }
  specialized OrderedForest._push(_:)((uint64_t)v4);
  return v4;
}

uint64_t InstrumentedStack.replan(node:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = specialized OrderedForest.replan(node:)(a1);
  unint64_t v4 = (*(uint64_t (**)(void *))(*v3 + 152))(v3);
  uint64_t v5 = (void *)v4;
  v95 = v3;
  if (v4 >> 62) {
    goto LABEL_101;
  }
  uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  unint64_t v7 = (unint64_t)v5;
  if (!v6)
  {
LABEL_102:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v95;
  }
LABEL_3:
  unint64_t v8 = 0;
  char v9 = (uint64_t *)(v2 + 40);
  unint64_t v10 = v7 & 0xC000000000000001;
  uint64_t v82 = (void *)(v7 + 32);
  uint64_t v85 = v6;
  v86 = (void *)v7;
  unint64_t v84 = v7 & 0xC000000000000001;
  while (v10)
  {
    uint64_t result = MEMORY[0x1BA9E3990](v8, v7);
    uint64_t v99 = (void *)result;
    BOOL v12 = __OFADD__(v8, 1);
    uint64_t v5 = (void *)((char *)v8 + 1);
    if (v12) {
      goto LABEL_103;
    }
LABEL_9:
    unint64_t v94 = v5;
    unint64_t v13 = (*(uint64_t (**)(void))(*v99 + 152))();
    unint64_t v14 = v13;
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      if (!v16) {
        goto LABEL_90;
      }
LABEL_11:
      uint64_t v17 = 0;
      unint64_t v18 = v14 & 0xC000000000000001;
      unint64_t v83 = v14 + 32;
      uint64_t v88 = v16;
      unint64_t v89 = v14;
      unint64_t v87 = v14 & 0xC000000000000001;
      while (2)
      {
        if (v18)
        {
          uint64_t v19 = v17;
          uint64_t result = MEMORY[0x1BA9E3990](v17, v14);
          uint64_t v100 = (void *)result;
          BOOL v12 = __OFADD__(v19, 1);
          uint64_t v20 = v19 + 1;
          if (v12) {
            goto LABEL_104;
          }
        }
        else
        {
          uint64_t v100 = *(void **)(v83 + 8 * v17);
          uint64_t v21 = v17;
          uint64_t result = swift_retain();
          BOOL v12 = __OFADD__(v21, 1);
          uint64_t v20 = v21 + 1;
          if (v12) {
            goto LABEL_104;
          }
        }
        uint64_t v96 = v20;
        unint64_t v22 = (*(uint64_t (**)(void))(*v100 + 152))();
        unint64_t v23 = v22;
        if (!(v22 >> 62))
        {
          uint64_t v24 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v25 = v24;
          if (v24) {
            break;
          }
          goto LABEL_83;
        }
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        if (!v25)
        {
LABEL_83:
          swift_bridgeObjectRelease_n();
          uint64_t v71 = v100[2];
          swift_beginAccess();
          unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v71);
          if (v73)
          {
            unint64_t v74 = v72;
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v5 = (void *)*v9;
            uint64_t v116 = (void *)*v9;
            *char v9 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v5 = v116;
            }
            specialized _NativeDictionary._delete(at:)(v74, (uint64_t)v5);
            *char v9 = (uint64_t)v5;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_release();
          unint64_t v14 = v89;
          uint64_t v17 = v96;
          unint64_t v18 = v87;
          if (v96 == v88) {
            goto LABEL_90;
          }
          continue;
        }
        break;
      }
      uint64_t v26 = 0;
      unint64_t v27 = v23 & 0xC000000000000001;
      unint64_t v90 = v23 + 32;
      unint64_t v91 = v23 & 0xC000000000000001;
      uint64_t v92 = v25;
      unint64_t v93 = v23;
      while (2)
      {
        if (v27)
        {
          uint64_t v28 = v26;
          uint64_t v103 = (void *)MEMORY[0x1BA9E3990](v26, v23);
          BOOL v12 = __OFADD__(v28, 1);
          uint64_t v29 = v28 + 1;
          if (v12) {
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v103 = *(void **)(v90 + 8 * v26);
          uint64_t v30 = v26;
          swift_retain();
          BOOL v12 = __OFADD__(v30, 1);
          uint64_t v29 = v30 + 1;
          if (v12) {
            goto LABEL_100;
          }
        }
        uint64_t v97 = v29;
        unint64_t v31 = (*(uint64_t (**)(void))(*v103 + 152))();
        unint64_t v32 = v31;
        if (!(v31 >> 62))
        {
          uint64_t v33 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v34 = v33;
          if (v33) {
            break;
          }
          goto LABEL_76;
        }
        swift_bridgeObjectRetain();
        uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
        if (!v34)
        {
LABEL_76:
          swift_bridgeObjectRelease_n();
          uint64_t v66 = v103[2];
          swift_beginAccess();
          unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(v66);
          if (v68)
          {
            unint64_t v69 = v67;
            int v70 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v5 = (void *)*v9;
            uint64_t v115 = (void *)*v9;
            *char v9 = 0x8000000000000000;
            if (!v70)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v5 = v115;
            }
            specialized _NativeDictionary._delete(at:)(v69, (uint64_t)v5);
            *char v9 = (uint64_t)v5;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_release();
          unint64_t v23 = v93;
          uint64_t v26 = v97;
          unint64_t v27 = v91;
          if (v97 == v92) {
            goto LABEL_83;
          }
          continue;
        }
        break;
      }
      uint64_t v35 = 0;
      unint64_t v104 = v32 & 0xC000000000000001;
      unint64_t v98 = v32 + 32;
      uint64_t v101 = v34;
      unint64_t v102 = v32;
      while (2)
      {
        if (v104)
        {
          uint64_t v36 = v35;
          uint64_t v106 = (void *)MEMORY[0x1BA9E3990](v35, v32);
          BOOL v12 = __OFADD__(v36, 1);
          uint64_t v37 = v36 + 1;
          if (v12) {
            goto LABEL_99;
          }
        }
        else
        {
          uint64_t v106 = *(void **)(v98 + 8 * v35);
          uint64_t v38 = v35;
          swift_retain();
          BOOL v12 = __OFADD__(v38, 1);
          uint64_t v37 = v38 + 1;
          if (v12) {
            goto LABEL_99;
          }
        }
        uint64_t v105 = v37;
        unint64_t v39 = (*(uint64_t (**)(void))(*v106 + 152))();
        unint64_t v107 = v39;
        if (!(v39 >> 62))
        {
          uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v40) {
            break;
          }
          goto LABEL_72;
        }
        swift_bridgeObjectRetain();
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
        if (!v40)
        {
LABEL_72:
          swift_bridgeObjectRelease_n();
          uint64_t v61 = v106[2];
          swift_beginAccess();
          unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v61);
          if (v63)
          {
            unint64_t v64 = v62;
            int v65 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v5 = (void *)*v9;
            uint64_t v114 = (void *)*v9;
            *char v9 = 0x8000000000000000;
            if (!v65)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v5 = v114;
            }
            specialized _NativeDictionary._delete(at:)(v64, (uint64_t)v5);
            *char v9 = (uint64_t)v5;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_release();
          unint64_t v32 = v102;
          uint64_t v35 = v105;
          if (v105 == v101) {
            goto LABEL_76;
          }
          continue;
        }
        break;
      }
      uint64_t v41 = 0;
      uint64_t v108 = v40;
      while (2)
      {
        if ((v107 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = (void *)MEMORY[0x1BA9E3990](v41, v107);
          BOOL v12 = __OFADD__(v41++, 1);
          if (v12) {
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v5 = *(void **)(v107 + 32 + 8 * v41);
          swift_retain();
          BOOL v12 = __OFADD__(v41++, 1);
          if (v12) {
            goto LABEL_98;
          }
        }
        unint64_t v42 = (*(uint64_t (**)(void))(*v5 + 152))();
        unint64_t v110 = v42;
        uint64_t v109 = v5;
        if (!(v42 >> 62))
        {
          uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v43) {
            break;
          }
          goto LABEL_68;
        }
        swift_bridgeObjectRetain();
        uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
        if (!v43)
        {
LABEL_68:
          swift_bridgeObjectRelease_n();
          uint64_t v56 = v109[2];
          swift_beginAccess();
          unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
          if (v58)
          {
            unint64_t v59 = v57;
            int v60 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v5 = (void *)*v9;
            uint64_t v113 = (void *)*v9;
            *char v9 = 0x8000000000000000;
            if (!v60)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v5 = v113;
            }
            specialized _NativeDictionary._delete(at:)(v59, (uint64_t)v5);
            *char v9 = (uint64_t)v5;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_release();
          if (v41 == v108) {
            goto LABEL_72;
          }
          continue;
        }
        break;
      }
      uint64_t v44 = 0;
      uint64_t v111 = v43;
      while (2)
      {
        if ((v110 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = (void *)MEMORY[0x1BA9E3990](v44, v110);
          BOOL v12 = __OFADD__(v44++, 1);
          if (v12) {
            goto LABEL_96;
          }
        }
        else
        {
          uint64_t v5 = *(void **)(v110 + 32 + 8 * v44);
          swift_retain();
          BOOL v12 = __OFADD__(v44++, 1);
          if (v12)
          {
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            swift_bridgeObjectRetain();
            uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
            unint64_t v7 = (unint64_t)v5;
            if (!v6) {
              goto LABEL_102;
            }
            goto LABEL_3;
          }
        }
        unint64_t v45 = (*(uint64_t (**)(void))(*v5 + 152))();
        unint64_t v46 = v45;
        if (v45 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
          if (v47)
          {
LABEL_57:
            if (v47 < 1) {
              goto LABEL_97;
            }
            for (uint64_t i = 0; i != v47; ++i)
            {
              if ((v46 & 0xC000000000000001) != 0)
              {
                unint64_t v49 = (void *)MEMORY[0x1BA9E3990](i, v46);
              }
              else
              {
                unint64_t v49 = *(void **)(v46 + 8 * i + 32);
                swift_retain();
              }
              InstrumentedStack.removeTrackedFlow(for:)(v49);
              swift_release();
            }
          }
        }
        else
        {
          uint64_t v47 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v47) {
            goto LABEL_57;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v50 = v5[2];
        swift_beginAccess();
        unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
        if (v52)
        {
          unint64_t v53 = v51;
          int v54 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v55 = *v9;
          uint64_t v112 = *v9;
          *char v9 = 0x8000000000000000;
          if (!v54)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v55 = v112;
          }
          specialized _NativeDictionary._delete(at:)(v53, v55);
          *char v9 = v55;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        swift_release();
        swift_release();
        if (v44 == v111) {
          goto LABEL_68;
        }
        continue;
      }
    }
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v16 = v15;
    if (v15) {
      goto LABEL_11;
    }
LABEL_90:
    swift_bridgeObjectRelease_n();
    uint64_t v76 = v99[2];
    swift_beginAccess();
    unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v76);
    if (v78)
    {
      unint64_t v79 = v77;
      int v80 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v81 = *v9;
      uint64_t v117 = *v9;
      *char v9 = 0x8000000000000000;
      if (!v80)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v81 = v117;
      }
      specialized _NativeDictionary._delete(at:)(v79, v81);
      *char v9 = v81;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_release();
    swift_release();
    unint64_t v7 = (unint64_t)v86;
    unint64_t v8 = v94;
    unint64_t v10 = v84;
    if (v94 == (void *)v85) {
      goto LABEL_102;
    }
  }
  uint64_t v99 = (void *)v82[(void)v8];
  uint64_t result = swift_retain();
  BOOL v12 = __OFADD__(v8, 1);
  uint64_t v5 = (void *)((char *)v8 + 1);
  if (!v12) {
    goto LABEL_9;
  }
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

void *specialized OrderedForest.replan(node:)(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void (**)(uint64_t))(*a1 + 128);
  uint64_t v4 = swift_retain();
  v3(v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  uint64_t v5 = (void *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v5[6] = 0;
  v5[2] = v2;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  uint64_t v6 = MEMORY[0x1E4FBC860];
  v5[4] = MEMORY[0x1E4FBC860];
  swift_weakAssign();
  v5[6] = 0;
  swift_release();
  unint64_t v7 = specialized OrderedForest._recursiveRemove(_:)((uint64_t)a1);
  uint64_t v8 = (*(uint64_t (**)(unint64_t))(*a1 + 152))(v7);
  swift_beginAccess();
  v5[4] = v8;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  a1[4] = v6;
  swift_bridgeObjectRelease();
  uint64_t v9 = specialized OrderedForest._push(_:)((uint64_t)a1);
  uint64_t v10 = ((uint64_t (*)(uint64_t))v3)(v9);
  if (v10)
  {
    uint64_t v11 = v10;
    BOOL v12 = *(uint64_t (**)(void))(*(void *)v10 + 152);
    unint64_t v13 = v12();
    if (v13 >> 62) {
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v15 = swift_bridgeObjectRelease();
    if (v14)
    {
      unint64_t v16 = ((uint64_t (*)(uint64_t))v12)(v15);
      swift_retain();
      uint64_t v17 = specialized _ArrayProtocol.filter(_:)(v16, (uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_beginAccess();
      *(void *)(v11 + 32) = v17;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v18 = swift_retain();
      MEMORY[0x1BA9E3030](v18);
      if (*(void *)((*(void *)(v11 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v11 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
    swift_release();
  }
  return v5;
}

uint64_t InstrumentedStack.remove(node:)(uint64_t a1)
{
  uint64_t v1 = specialized OrderedForest.remove(node:)(a1);
  uint64_t v2 = (void *)swift_retain();
  InstrumentedStack.removeTrackedFlow(for:)(v2);
  return v1;
}

uint64_t InstrumentedStack.removeTrackedFlow(for:)(void *a1)
{
  unint64_t v2 = (*(uint64_t (**)(void))(*a1 + 152))();
  unint64_t v3 = v2;
  if (!(v2 >> 62))
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    uint64_t v8 = a1[2];
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(v8);
    swift_endAccess();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x1BA9E3990](i, v3);
      }
      else
      {
        uint64_t v7 = *(void *)(v3 + 8 * i + 32);
        swift_retain();
      }
      InstrumentedStack.removeTrackedFlow(for:)(v7);
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void InstrumentedStack.__allocating_init()()
{
}

void InstrumentedStack.init()()
{
}

uint64_t InstrumentedStack.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t InstrumentedStack.deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InstrumentedStack.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *vtable thunk for OrderedForest.push(value:parentNode:) dispatching to InstrumentedStack.push(value:parentNode:)(uint64_t *a1, uint64_t a2)
{
  return InstrumentedStack.push(value:parentNode:)(*a1, a2);
}

uint64_t specialized OrderedForest._push(_:)(uint64_t a1)
{
  uint64_t v3 = v1[3];
  if (v1[2] && v3)
  {
    swift_weakAssign();
    *(void *)(v3 + 48) = a1;
    swift_retain();
    swift_release();
    v1[3] = a1;
  }
  else
  {
    v1[3] = a1;
    swift_retain();
    swift_release();
    v1[2] = a1;
  }
  swift_retain();
  swift_release();
  uint64_t result = swift_beginAccess();
  uint64_t v5 = v1[4];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    v1[4] = v7;
  }
  return result;
}

uint64_t type metadata accessor for InstrumentedStack.TrackedFlowAgent(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for InstrumentedStack.TrackedFlowAgent);
}

uint64_t specialized OrderedForest._remove(_:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  if (v3) {
    BOOL v5 = v3 == a1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    if (v4) {
      BOOL v8 = v4 == a1;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      v1[2] = 0;
      swift_release();
      v1[3] = 0;
    }
    else
    {
      v1[2] = *(void *)(a1 + 48);
      swift_retain();
    }
    goto LABEL_23;
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (v4) {
    BOOL v7 = v4 == a1;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (Strong)
    {
      *(void *)(Strong + 48) = 0;
      swift_retain();
      swift_release();
      swift_release();
    }
    else
    {
      swift_retain();
    }
    uint64_t v9 = swift_weakLoadStrong();
    swift_release();
    v1[3] = v9;
    goto LABEL_23;
  }
  if (Strong)
  {
    *(void *)(Strong + 48) = *(void *)(a1 + 48);
    swift_retain();
    swift_release();
    swift_release();
  }
  if (*(void *)(a1 + 48))
  {
    swift_weakLoadStrong();
    swift_weakAssign();
LABEL_23:
    swift_release();
  }
  swift_weakAssign();
  *(void *)(a1 + 48) = 0;
  swift_release();
  uint64_t result = swift_beginAccess();
  uint64_t v11 = v1[4];
  BOOL v12 = __OFSUB__(v11, 1);
  uint64_t v13 = v11 - 1;
  if (v12) {
    __break(1u);
  }
  else {
    v1[4] = v13;
  }
  return result;
}

unint64_t specialized OrderedForest._recursiveRemove(_:)(uint64_t a1)
{
  unint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 152))();
  unint64_t v3 = result;
  if (!(result >> 62))
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    specialized OrderedForest._remove(_:)(a1);
    return a1;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x1BA9E3990](i, v3);
      }
      else
      {
        uint64_t v6 = *(void *)(v3 + 8 * i + 32);
        swift_retain();
      }
      specialized OrderedForest._recursiveRemove(_:)(v6);
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedForest.remove(node:)(uint64_t a1)
{
  unint64_t v2 = specialized OrderedForest._recursiveRemove(_:)(a1);
  uint64_t v3 = (*(uint64_t (**)(unint64_t))(*(void *)a1 + 128))(v2);
  if (v3)
  {
    uint64_t v4 = v3;
    BOOL v5 = *(uint64_t (**)(void))(*(void *)v3 + 152);
    unint64_t v6 = v5();
    if (v6 >> 62) {
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v8 = swift_bridgeObjectRelease();
    if (v7)
    {
      unint64_t v9 = ((uint64_t (*)(uint64_t))v5)(v8);
      swift_retain();
      uint64_t v10 = specialized _ArrayProtocol.filter(_:)(v9, a1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_beginAccess();
      *(void *)(v4 + 32) = v10;
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_weakAssign();
    }
    else
    {
      swift_release();
    }
  }
  return a1;
}

uint64_t type metadata accessor for InstrumentedStack(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for InstrumentedStack);
}

uint64_t type metadata completion function for InstrumentedStack()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for InstrumentedStack(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InstrumentedStack);
}

uint64_t dispatch thunk of InstrumentedStack.__allocating_init(initialFlowAgent:)()
{
  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t ObjC metadata update function for InstrumentedStack.TrackedFlowAgent()
{
  return type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
}

uint64_t type metadata completion function for InstrumentedStack.TrackedFlowAgent()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t IntelligenceFlowFeatureFlag.isEnabled.getter()
{
  uint64_t v3 = &type metadata for IntelligenceFlowFeatureFlag;
  unint64_t v4 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  return v0 & 1;
}

const char *IntelligenceFlowFeatureFlag.domain.getter()
{
  return "IntelligenceFlow";
}

const char *IntelligenceFlowFeatureFlag.feature.getter()
{
  return "IntelligenceFlow";
}

uint64_t static IntelligenceFlowFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void IntelligenceFlowFeatureFlag.hash(into:)()
{
}

Swift::Int IntelligenceFlowFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance IntelligenceFlowFeatureFlag()
{
  return "IntelligenceFlow";
}

unsigned char *storeEnumTagSinglePayload for IntelligenceFlowFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9F28054);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IntelligenceFlowFeatureFlag()
{
  return &type metadata for IntelligenceFlowFeatureFlag;
}

uint64_t IntentLoggingEventSink.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t *IntentLoggingEventSink.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static IntentLoggingEventSink.instance;
}

uint64_t static IntentLoggingEventSink.instance.getter()
{
  return swift_initStaticObject();
}

uint64_t one-time initialization function for intentStore()
{
  uint64_t v0 = type metadata accessor for IntentEventStore();
  __swift_allocate_value_buffer(v0, static IntentLoggingEventSink.intentStore);
  __swift_project_value_buffer(v0, (uint64_t)static IntentLoggingEventSink.intentStore);
  return IntentEventStore.init()();
}

void IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v9 = *v4;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  if (a1)
  {
    uint64_t v36 = v9;
    id v13 = a1;
    objc_msgSend(v13, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for INIntent();
    if (swift_dynamicCast())
    {
      uint64_t v34 = a3;
      unint64_t v35 = a4;
      uint64_t v14 = (void *)v37;
      id v15 = objc_msgSend(v13, sel_intentId);
      if (v15)
      {
        unint64_t v16 = v15;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
      unint64_t v31 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = v14;
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v32 + v31, (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      *(void *)(v32 + ((v12 + v31 + 7) & 0xFFFFFFFFFFFFFFF8)) = v36;
      id v33 = v14;
      specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v17, v19, v34, v35, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:));
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.instrumentation);
      id v24 = v13;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        v38[0] = v28;
        *(_DWORD *)unint64_t v27 = 136315138;
        uint64_t v29 = INIntent.debugDescriptionLite.getter();
        uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v25, v26, "Unexpected failure when cloning intent: %s", v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v28, -1, -1);
        MEMORY[0x1BA9E48C0](v27, -1, -1);
      }
      else
      {
      }
    }
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.instrumentation);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl(&dword_1B9C64000, v36, v21, "Intent is nil, not sending handleIntentStarted event.", v22, 2u);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
  }
}

void IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, NSObject *a9)
{
  int v37 = a5;
  uint64_t v35 = a2;
  uint64_t v36 = a4;
  uint64_t v38 = a9;
  uint64_t v15 = *v9;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](v16);
  if (a1)
  {
    uint64_t v33 = v15;
    uint64_t v34 = a8;
    id v19 = a1;
    id v20 = objc_msgSend(v19, sel_intentId);
    if (v20)
    {
      os_log_type_t v21 = v20;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v23 = 0;
    }
    outlined init with copy of Any(a6, (uint64_t)v39);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a7, v16);
    unint64_t v27 = (*(unsigned __int8 *)(v17 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v28 = swift_allocObject();
    outlined init with take of Any(v39, (_OWORD *)(v28 + 16));
    *(void *)(v28 + 48) = v35;
    *(void *)(v28 + 56) = a3;
    uint64_t v29 = v36;
    *(void *)(v28 + 64) = v19;
    *(void *)(v28 + 72) = v29;
    *(unsigned char *)(v28 + 80) = v37 & 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v28 + v27, (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
    *(void *)(v28 + ((v18 + v27 + 7) & 0xFFFFFFFFFFFFFFF8)) = v33;
    id v30 = v19;
    swift_bridgeObjectRetain();
    specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v32, v23, v34, (unint64_t)v38, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:));
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl(&dword_1B9C64000, v38, v25, "Intent is nil, not sending handleConfirmationOffered event.", v26, 2u);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }
  }
}

void IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v46 = a6;
  uint64_t v47 = a2;
  int v49 = a5;
  uint64_t v48 = a4;
  uint64_t v50 = a3;
  uint64_t v13 = *v9;
  os_log_t v52 = (os_log_t)type metadata accessor for Date();
  Class isa = v52[-1].isa;
  uint64_t v15 = *((void *)isa + 8);
  MEMORY[0x1F4188790](v52);
  unint64_t v51 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SiriKitConfirmationState();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  if (a1)
  {
    uint64_t v42 = a7;
    uint64_t v20 = v19;
    uint64_t v45 = a8;
    id v41 = a1;
    id v21 = objc_msgSend(v41, sel_intentId);
    uint64_t v43 = v13;
    unint64_t v44 = a9;
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v23;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
    }
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    uint64_t v38 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    v28(v38, v46, v20);
    (*((void (**)(char *, uint64_t, os_log_t))isa + 2))(v51, v42, v52);
    unint64_t v29 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    unint64_t v30 = (v18 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = (*((unsigned __int8 *)isa + 80) + v30 + 9) & ~(unint64_t)*((unsigned __int8 *)isa + 80);
    uint64_t v32 = (char *)swift_allocObject();
    id v33 = v41;
    uint64_t v34 = v47;
    *((void *)v32 + 2) = v41;
    *((void *)v32 + 3) = v34;
    *((void *)v32 + 4) = v50;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v32[v29], v38, v20);
    uint64_t v35 = &v32[v30];
    *(void *)uint64_t v35 = v48;
    v35[8] = v49 & 1;
    (*((void (**)(char *, char *, os_log_t))isa + 4))(&v32[v31], v51, v52);
    *(void *)&v32[(v15 + v31 + 7) & 0xFFFFFFFFFFFFFFF8] = v43;
    id v36 = v33;
    swift_bridgeObjectRetain();
    specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v39, v40, v45, v44, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:));
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
    os_log_t v52 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl(&dword_1B9C64000, v52, v25, "Intent is nil, not sending handleConfirmationResult event.", v26, 2u);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }
    os_log_t v27 = v52;
  }
}

void IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(void *a1, uint64_t a2, uint64_t a3, NSObject *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v51 = a6;
  uint64_t v52 = a3;
  uint64_t v50 = a2;
  uint64_t v54 = *v6;
  os_log_t v55 = a4;
  uint64_t v53 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v53 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v53);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v49 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v49 + 64);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    unint64_t v48 = a5;
    id v18 = a1;
    objc_msgSend(v18, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for INIntent();
    if (swift_dynamicCast())
    {
      id v46 = v56;
      id v19 = objc_msgSend(v56, sel_intentId);
      id v47 = v18;
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v45 = v21;
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v45 = 0;
      }
      outlined init with copy of ReferenceResolutionClientProtocol?(v50, (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for LaunchAppBehavior?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v51, (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      uint64_t v43 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v35 = v53;
      v34(v43, v52, v53);
      unint64_t v36 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      unint64_t v37 = (v16 + *(unsigned __int8 *)(v49 + 80) + v36) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      unint64_t v38 = (v12 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v39 = (*(unsigned __int8 *)(v9 + 80) + v38 + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v40 = swift_allocObject();
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v17, v40 + v36, &demangling cache variable for type metadata for LaunchAppBehavior?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v13, v40 + v37, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      id v41 = v47;
      *(void *)(v40 + v38) = v47;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v40 + v39, v43, v35);
      *(void *)(v40 + ((v10 + v39 + 7) & 0xFFFFFFFFFFFFFFF8)) = v54;
      id v42 = v41;
      specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v44, v45, (uint64_t)v55, v48, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:));
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.instrumentation);
      id v27 = v18;
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        unint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        v57[0] = v31;
        *(_DWORD *)unint64_t v30 = 136315138;
        uint64_t v32 = INIntent.debugDescriptionLite.getter();
        id v56 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v28, v29, "Unexpected failure when cloning intent: %s", v30, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v31, -1, -1);
        MEMORY[0x1BA9E48C0](v30, -1, -1);
      }
      else
      {
      }
    }
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.instrumentation);
    os_log_t v55 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, v55, v23, "Intent is nil, not sending handleIntentResult event.", v24, 2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }
    os_log_t v25 = v55;
  }
}

uint64_t closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a2;
  uint64_t v25 = a5;
  uint64_t v23 = a1;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.background.getter();
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 0, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v16 = (v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = 0;
  *((void *)v17 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v17[v15], v10, v7);
  id v18 = &v17[v16];
  uint64_t v19 = v24;
  *(void *)id v18 = v23;
  *((void *)v18 + 1) = v19;
  *(void *)&v17[(v16 + 23) & 0xFFFFFFFFFFFFFFF8] = v25;
  id v20 = a3;
  swift_bridgeObjectRetain();
  _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:), (uint64_t)v17);
  swift_release();
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  uint64_t v8 = type metadata accessor for Date();
  v7[6] = v8;
  v7[7] = *(void *)(v8 - 8);
  v7[8] = swift_task_alloc();
  v7[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:), 0, 0);
}

uint64_t closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)()
{
  unint64_t v1 = (void *)v0[2];
  unint64_t v2 = *(void (**)(void, void, void))(v0[7] + 16);
  v2(v0[9], v0[3], v0[6]);
  type metadata accessor for IntentStart();
  swift_allocObject();
  id v3 = v1;
  IntentStart.init(intent:timestamp:)();
  v2(v0[8], v0[3], v0[6]);
  type metadata accessor for IntentEvent();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  IntentEvent.init(intentId:intentStart:createdAt:)();
  if (one-time initialization token for intentStore != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for IntentEventStore();
  __swift_project_value_buffer(v5, (uint64_t)static IntentLoggingEventSink.intentStore);
  IntentEventStore.log(event:)();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t closure #1 in IntentLoggingEventSink.handleDisambiguationOffered(intent:parameterName:multicardinalValueIndex:disambiguationItems:now:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v28 = a6;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v24 = a1;
  int v27 = a7 & 1;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v22 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = (char *)&v21 - v14;
  swift_bridgeObjectRetain();
  id v16 = objc_msgSend(a5, sel__className);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v23 = a9;
  v17(v15, a9, v10);
  type metadata accessor for DisambiguationOffer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v18 = v29;
  uint64_t result = DisambiguationOffer.init(parameterName:intentType:multicardinalIndexValue:disambiguationItems:timestamp:)();
  if (!v18)
  {
    v17(v22, v23, v10);
    type metadata accessor for IntentEvent();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    IntentEvent.init(intentId:disambiguationOffer:createdAt:)();
    if (one-time initialization token for intentStore != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for IntentEventStore();
    __swift_project_value_buffer(v20, (uint64_t)static IntentLoggingEventSink.intentStore);
    IntentEventStore.log(event:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in IntentLoggingEventSink.handleDisambiguationResult(intent:parameterName:multicardinalIndexValue:sirikitConfirmationState:now:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  int v32 = a7;
  uint64_t v33 = a6;
  v31[1] = a1;
  v31[2] = a2;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v31[0] = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v31 - v16;
  id v18 = objc_msgSend(a3, sel__dictionaryRepresentation);
  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v34 = a4;
  *(void *)&long long v35 = a4;
  *((void *)&v35 + 1) = a5;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v19 + 16) && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v21 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v19 + 56) + 32 * v20, (uint64_t)&v35);
  }
  else
  {
    long long v35 = 0u;
    long long v36 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((void *)&v36 + 1))
  {
    outlined init with take of Any(&v35, v38);
    swift_bridgeObjectRetain();
    id v22 = objc_msgSend(a3, sel__className);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    outlined init with copy of Any((uint64_t)v38, (uint64_t)v37);
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v23(v17, a8, v12);
    type metadata accessor for DisambiguationResult();
    swift_allocObject();
    uint64_t v24 = v39;
    DisambiguationResult.init(parameterName:intentType:multicardinalIndexValue:resolvedValue:timestamp:)();
    if (!v24)
    {
      v23((char *)v31[0], a8, v12);
      type metadata accessor for IntentEvent();
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      IntentEvent.init(intentId:disambiguationResult:createdAt:)();
      if (one-time initialization token for intentStore != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for IntentEventStore();
      __swift_project_value_buffer(v30, (uint64_t)static IntentLoggingEventSink.intentStore);
      IntentEventStore.log(event:)();
      swift_release();
      swift_release();
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v35, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      v37[0] = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, a5, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v26, v27, "Intent has no value for %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v29, -1, -1);
      MEMORY[0x1BA9E48C0](v28, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v42 = a7;
  uint64_t v38 = a6;
  uint64_t v39 = a5;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v32 = v7;
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v43 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v33 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v35 + 64);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v31 = (uint64_t)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?);
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v34 + 64);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.background.getter();
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 0, 1, v17);
  outlined init with copy of ReferenceResolutionClientProtocol?(v36, (uint64_t)v13, &demangling cache variable for type metadata for LaunchAppBehavior?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v37, (uint64_t)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v18 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v7);
  unint64_t v19 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  unint64_t v20 = (v12 + *(unsigned __int8 *)(v35 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  unint64_t v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (*(unsigned __int8 *)(v18 + 80) + v21 + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v23 = (v8 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0;
  *(void *)(v24 + 24) = 0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v13, v24 + v19, &demangling cache variable for type metadata for LaunchAppBehavior?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v31, v24 + v20, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v25 = v39;
  *(void *)(v24 + v21) = v39;
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v24 + v22, v33, v32);
  uint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v41;
  *uint64_t v26 = v40;
  v26[1] = v27;
  *(void *)(v24 + ((v23 + 23) & 0xFFFFFFFFFFFFFFF8)) = v42;
  id v28 = v25;
  swift_bridgeObjectRetain();
  _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:), v24);
  swift_release();
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v15;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  uint64_t v9 = type metadata accessor for Date();
  v8[8] = v9;
  v8[9] = *(void *)(v9 - 8);
  v8[10] = swift_task_alloc();
  v8[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v8[12] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SiriKitReliabilityCodes();
  v8[13] = v10;
  v8[14] = *(void *)(v10 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?);
  v8[17] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for LaunchAppBehavior();
  v8[18] = v11;
  v8[19] = *(void *)(v11 - 8);
  v8[20] = swift_task_alloc();
  v8[21] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for IntentResultType();
  v8[22] = v12;
  v8[23] = *(void *)(v12 - 8);
  v8[24] = swift_task_alloc();
  v8[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:), 0, 0);
}

uint64_t closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  outlined init with copy of ReferenceResolutionClientProtocol?(v0[2], v3, &demangling cache variable for type metadata for LaunchAppBehavior?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v11 = v0[20];
    uint64_t v12 = v0[21];
    uint64_t v13 = v0[18];
    uint64_t v14 = v0[19];
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
    v15(v12, v0[17], v13);
    v15(v11, v12, v13);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v11, v13);
    if (v16 == *MEMORY[0x1E4FA1C80])
    {
      uint64_t v17 = v0[25];
      uint64_t v18 = v0[22];
      uint64_t v19 = v0[23];
      unint64_t v20 = (id *)v0[20];
      (*(void (**)(id *, void))(v0[19] + 96))(v20, v0[18]);

      (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v17, *MEMORY[0x1E4FA1500], v18);
      goto LABEL_14;
    }
    if (v16 == *MEMORY[0x1E4FA1C78]) {
      goto LABEL_12;
    }
    if (v16 == *MEMORY[0x1E4FA1C70])
    {
      uint64_t v27 = v0[25];
      uint64_t v28 = v0[22];
      uint64_t v29 = v0[23];
      uint64_t v30 = (unsigned int *)MEMORY[0x1E4FA1510];
      goto LABEL_13;
    }
    uint64_t v48 = v0[22];
    uint64_t v49 = *(void (**)(uint64_t, void, uint64_t))(v0[23] + 104);
    uint64_t v50 = v0[25];
    if (v16 == *MEMORY[0x1E4FA1C68])
    {
      uint64_t v51 = (unsigned int *)MEMORY[0x1E4FA14F8];
LABEL_28:
      v49(v50, *v51, v48);
      goto LABEL_14;
    }
    uint64_t v53 = v0[19];
    uint64_t v52 = v0[20];
    uint64_t v54 = v0[18];
LABEL_30:
    v49(v50, *MEMORY[0x1E4FA1518], v48);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    goto LABEL_14;
  }
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[3];
  outlined destroy of ReferenceResolutionClientProtocol?(v0[17], &demangling cache variable for type metadata for LaunchAppBehavior?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v7, v6, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) != 1)
  {
    uint64_t v21 = v0[15];
    uint64_t v22 = v0[16];
    uint64_t v23 = v0[13];
    uint64_t v24 = v0[14];
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
    v25(v22, v0[12], v23);
    v25(v21, v22, v23);
    int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 88))(v21, v23);
    if (v26 == *MEMORY[0x1E4FA19C0])
    {
      uint64_t v27 = v0[25];
      uint64_t v28 = v0[22];
      uint64_t v29 = v0[23];
      uint64_t v30 = (unsigned int *)MEMORY[0x1E4FA1500];
LABEL_13:
      (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v27, *v30, v28);
      goto LABEL_14;
    }
    if (v26 == *MEMORY[0x1E4FA19B8])
    {
LABEL_12:
      uint64_t v27 = v0[25];
      uint64_t v28 = v0[22];
      uint64_t v29 = v0[23];
      uint64_t v30 = (unsigned int *)MEMORY[0x1E4FA1508];
      goto LABEL_13;
    }
    if (v26 == *MEMORY[0x1E4FA1A08])
    {
      uint64_t v27 = v0[25];
      uint64_t v28 = v0[22];
      uint64_t v29 = v0[23];
      uint64_t v30 = (unsigned int *)MEMORY[0x1E4FA14F8];
      goto LABEL_13;
    }
    uint64_t v48 = v0[22];
    uint64_t v49 = *(void (**)(uint64_t, void, uint64_t))(v0[23] + 104);
    uint64_t v50 = v0[25];
    if (v26 == *MEMORY[0x1E4FA19F8])
    {
      uint64_t v51 = (unsigned int *)MEMORY[0x1E4FA1510];
      goto LABEL_28;
    }
    uint64_t v53 = v0[14];
    uint64_t v52 = v0[15];
    uint64_t v54 = v0[13];
    goto LABEL_30;
  }
  uint64_t v8 = v0[25];
  uint64_t v9 = v0[22];
  uint64_t v10 = v0[23];
  outlined destroy of ReferenceResolutionClientProtocol?(v0[12], &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v8, *MEMORY[0x1E4FA1518], v9);
LABEL_14:
  uint64_t v31 = v0[24];
  uint64_t v32 = v0[25];
  uint64_t v34 = v0[22];
  uint64_t v33 = v0[23];
  uint64_t v35 = v0[11];
  uint64_t v36 = v0[9];
  uint64_t v55 = v0[8];
  uint64_t v37 = (void *)v0[4];
  uint64_t v38 = v0[5];
  id v39 = objc_msgSend(v37, sel__className);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v31, v32, v34);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v40(v35, v38, v55);
  type metadata accessor for IntentResult();
  swift_allocObject();
  id v41 = v37;
  IntentResult.init(intentType:type:intent:timestamp:)();
  v40(v0[10], v0[5], v0[8]);
  type metadata accessor for IntentEvent();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  IntentEvent.init(intentId:intentResult:createdAt:)();
  if (one-time initialization token for intentStore != -1) {
    swift_once();
  }
  uint64_t v43 = v0[25];
  uint64_t v44 = v0[22];
  uint64_t v45 = v0[23];
  uint64_t v46 = type metadata accessor for IntentEventStore();
  __swift_project_value_buffer(v46, (uint64_t)static IntentLoggingEventSink.intentStore);
  IntentEventStore.log(event:)();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v47 = (uint64_t (*)(void))v0[1];
  return v47();
}

uint64_t closure #1 in IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v40 = a5;
  uint64_t v41 = a7;
  uint64_t v39 = a4;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v45 = a9;
  int v38 = a8 & 1;
  uint64_t v44 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v44 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v44);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v37 = (char *)&v33 - v15;
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v42 = v11;
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.instrumentation);
  outlined init with copy of Any(a3, (uint64_t)v47);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v34 = a3;
    unint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v33 = a6;
    uint64_t v22 = v21;
    uint64_t v48 = v21;
    *(_DWORD *)unint64_t v20 = 136315138;
    outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
    uint64_t v23 = String.init<A>(describing:)();
    v46[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
    _os_log_impl(&dword_1B9C64000, v17, v18, "Confirmation offered resolvedValue: %s", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v22;
    a6 = v33;
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    int v26 = v20;
    a3 = v34;
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  }

  swift_bridgeObjectRetain();
  id v27 = objc_msgSend(a6, sel__className);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined init with copy of Any(a3, (uint64_t)v47);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  uint64_t v29 = v44;
  v28(v37, v45, v44);
  type metadata accessor for ConfirmationOffer();
  swift_allocObject();
  uint64_t v30 = v43;
  uint64_t result = ConfirmationOffer.init(parameterName:intentType:multicardinalIndexValue:item:timestamp:)();
  if (!v30)
  {
    v28(v14, v45, v29);
    type metadata accessor for IntentEvent();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    IntentEvent.init(intentId:confirmationOffer:createdAt:)();
    if (one-time initialization token for intentStore != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for IntentEventStore();
    __swift_project_value_buffer(v32, (uint64_t)static IntentLoggingEventSink.intentStore);
    IntentEventStore.log(event:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  LODWORD(v63) = a8;
  uint64_t v60 = a7;
  uint64_t v64 = a6;
  uint64_t v58 = a2;
  uint64_t v57 = a1;
  uint64_t v53 = type metadata accessor for ConfirmationResolution();
  uint64_t v55 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  unint64_t v59 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v61 = v13;
  uint64_t v62 = v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v56 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v54 = (char *)v51 - v18;
  MEMORY[0x1F4188790](v17);
  unint64_t v20 = (char *)v51 - v19;
  uint64_t v21 = type metadata accessor for SiriKitConfirmationState();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = objc_msgSend(a3, sel__dictionaryRepresentation);
  uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v65 = a4;
  *(void *)&long long v66 = a4;
  *((void *)&v66 + 1) = a5;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v26 + 16) && (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v68), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v66);
  }
  else
  {
    long long v66 = 0u;
    long long v67 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v68);
  if (*((void *)&v67 + 1))
  {
    int v29 = v63 & 1;
    outlined init with take of Any(&v66, v69);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v64, v21);
    int v30 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v24, v21);
    if (v30 == *MEMORY[0x1E4FA1A38])
    {
      swift_bridgeObjectRetain();
      id v31 = objc_msgSend(a3, sel__className);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t))(v55 + 104))(v59, *MEMORY[0x1E4FA1608], v53);
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
      uint64_t v52 = a9;
      uint64_t v33 = v61;
      v32(v54, a9, v61);
      type metadata accessor for ConfirmationResult();
      swift_allocObject();
      ConfirmationResult.init(parameterName:intentType:multicardinalIndexValue:resolution:timestamp:)();
    }
    else
    {
      int v39 = v30;
      LODWORD(v64) = v29;
      if (v30 == *MEMORY[0x1E4FA1A40])
      {
        swift_bridgeObjectRetain();
        id v40 = objc_msgSend(a3, sel__className);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        outlined init with copy of Any((uint64_t)v69, (uint64_t)v68);
        uint64_t v33 = v61;
        uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
        v32(v20, a9, v61);
        type metadata accessor for ConfirmationResult();
        swift_allocObject();
        uint64_t v41 = v70;
        ConfirmationResult.init(parameterName:intentType:multicardinalIndexValue:confirmedValue:timestamp:)();
        uint64_t v42 = v41;
        if (v41)
        {
LABEL_25:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v69);
          return;
        }
        uint64_t v52 = a9;
LABEL_20:
        v32(v56, v52, v33);
        type metadata accessor for IntentEvent();
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_retain();
        IntentEvent.init(intentId:confirmationResult:createdAt:)();
        if (!v42)
        {
          if (one-time initialization token for intentStore != -1) {
            swift_once();
          }
          uint64_t v50 = type metadata accessor for IntentEventStore();
          __swift_project_value_buffer(v50, (uint64_t)static IntentLoggingEventSink.intentStore);
          IntentEventStore.log(event:)();
          swift_release();
        }
        swift_release();
        goto LABEL_25;
      }
      unint64_t v43 = a5;
      int v44 = *MEMORY[0x1E4FA1A30];
      unint64_t v63 = v43;
      swift_bridgeObjectRetain();
      id v45 = objc_msgSend(a3, sel__className);
      v51[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v51[1] = v46;

      id v47 = *(void (**)(char *, void, uint64_t))(v55 + 104);
      uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v62 + 16);
      uint64_t v52 = a9;
      if (v39 == v44)
      {
        v47(v59, *MEMORY[0x1E4FA1600], v53);
        uint64_t v32 = *v48;
        uint64_t v33 = v61;
        (*v48)(v54, a9, v61);
        type metadata accessor for ConfirmationResult();
        swift_allocObject();
        ConfirmationResult.init(parameterName:intentType:multicardinalIndexValue:resolution:timestamp:)();
      }
      else
      {
        v47(v59, *MEMORY[0x1E4FA15F8], v53);
        uint64_t v32 = *v48;
        uint64_t v49 = v61;
        (*v48)(v54, a9, v61);
        type metadata accessor for ConfirmationResult();
        swift_allocObject();
        ConfirmationResult.init(parameterName:intentType:multicardinalIndexValue:resolution:timestamp:)();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
        uint64_t v33 = v49;
      }
    }
    uint64_t v42 = v70;
    goto LABEL_20;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v66, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    v68[0] = v38;
    *(_DWORD *)uint64_t v37 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&v69[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, a5, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v35, v36, "Intent has no value for %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v38, -1, -1);
    MEMORY[0x1BA9E48C0](v37, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t IntentLoggingEventSink.deinit()
{
  return v0;
}

uint64_t IntentLoggingEventSink.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t IntentLoggingEventSink.init()()
{
  return v0;
}

void specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void))
{
  if (a2)
  {
    a5();
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v8, v9, "IntentLoggingEventSink ignoring %s event with missing intent Id", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t type metadata accessor for IntentLoggingEventSink()
{
  return self;
}

uint64_t method lookup function for IntentLoggingEventSink(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IntentLoggingEventSink);
}

uint64_t dispatch thunk of IntentLoggingEventSink.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

unint64_t lazy protocol witness table accessor for type ActivityType and conformance ActivityType()
{
  unint64_t result = lazy protocol witness table cache variable for type ActivityType and conformance ActivityType;
  if (!lazy protocol witness table cache variable for type ActivityType and conformance ActivityType)
  {
    type metadata accessor for ActivityType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityType and conformance ActivityType);
  }
  return result;
}

uint64_t sub_1B9F2C07C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 49) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6, v5);
}

void partial apply for closure #1 in IntentLoggingEventSink.handleDisambiguationResult(intent:parameterName:multicardinalIndexValue:sirikitConfirmationState:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  closure #1 in IntentLoggingEventSink.handleDisambiguationResult(intent:parameterName:multicardinalIndexValue:sirikitConfirmationState:now:context:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), v2 + ((*(unsigned __int8 *)(v5 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
}

uint64_t sub_1B9F2C21C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in IntentLoggingEventSink.handleDisambiguationOffered(intent:parameterName:multicardinalValueIndex:disambiguationItems:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  return closure #1 in IntentLoggingEventSink.handleDisambiguationOffered(intent:parameterName:multicardinalValueIndex:disambiguationItems:now:context:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48), *(void *)(v2 + 56), v2 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
}

unint64_t type metadata accessor for INIntent()
{
  unint64_t result = lazy cache variable for type metadata for INIntent;
  if (!lazy cache variable for type metadata for INIntent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  }
  return result;
}

uint64_t sub_1B9F2C408()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(a1, a2, *(void **)(v2 + 16), v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1B9F2C58C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = *(void *)((char *)v1 + v6 + 8);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(a1, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1B9F2C7D4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 81) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  return closure #1 in IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(a1, a2, v2 + 16, *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), *(void *)(v2 + 72), *(unsigned char *)(v2 + 80), v2 + ((*(unsigned __int8 *)(v5 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
}

uint64_t sub_1B9F2C980()
{
  uint64_t v1 = type metadata accessor for SiriKitConfirmationState();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 9) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x1F4186498](v0, v11, v10);
}

void partial apply for closure #1 in IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for SiriKitConfirmationState() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for Date() - 8);
  closure #1 in IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), v2 + v6, *(void *)(v2 + v7), *(unsigned __int8 *)(v2 + v7 + 8), v2 + ((v7 + *(unsigned __int8 *)(v8 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
}

uint64_t sub_1B9F2CC30()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v20 = *(void *)(v5 + 64);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(v9 + 64);
  uint64_t v11 = v0 + v3;
  uint64_t v12 = type metadata accessor for LaunchAppBehavior();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v14 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v0 + v7, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v0 + v7, v14);
  }
  unint64_t v16 = (v20 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = (v16 + v10 + 8) & ~v10;

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v17, v8);

  return MEMORY[0x1F4186498](v0, ((v19 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | v6 | v10 | 7);
}

uint64_t partial apply for closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v12 = (v10 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  return closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(a1, a2, v2 + v6, v2 + v9, *(void **)(v2 + v10), v2 + v12, *(void *)(v2 + ((*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1B9F2D080()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v20 = *(void *)(v5 + 64);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(v9 + 64);
  swift_unknownObjectRelease();
  uint64_t v11 = v0 + v3;
  uint64_t v12 = type metadata accessor for LaunchAppBehavior();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v14 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v0 + v7, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v0 + v7, v14);
  }
  unint64_t v16 = (v20 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = (v16 + v10 + 8) & ~v10;

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v17, v8);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, ((((v19 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | v6 | v10 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v13 = *(void *)(v1 + v8);
  uint64_t v14 = v1 + v10;
  uint64_t v15 = *(void *)(v1 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v16;
  *unint64_t v16 = v2;
  v16[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(a1, v11, v12, v1 + v4, v1 + v7, v13, v14, v15);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  unint64_t v10 = (void *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  return swift_task_create();
}

void *InterruptibleTaskManager.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = (void *)swift_allocObject();
  result[4] = MEMORY[0x1E4FBC868];
  result[5] = 0;
  result[2] = a1;
  result[3] = a2;
  return result;
}

BOOL InterruptibleTaskManager.hasActiveTasks.getter()
{
  swift_beginAccess();
  return *(void *)(*(void *)(v0 + 32) + 16) != 0;
}

Swift::Void __swiftcall InterruptibleTaskManager.invalidate()()
{
  uint64_t v1 = (uint64_t *)(v0 + 32);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return;
    }
    if (v13 >= v7) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v8;
    if (!v14)
    {
      int64_t v8 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v8);
      if (!v14)
      {
        int64_t v8 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v8);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = *(void (**)(uint64_t))(*(void *)(v2 + 56) + 16 * v10);
    uint64_t v12 = swift_retain();
    v11(v12);
    swift_release();
  }
  int64_t v15 = v13 + 4;
  if (v15 < v7)
  {
    unint64_t v14 = *(void *)(v3 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v8 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_27;
        }
        if (v8 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v8);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v8 = v15;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  swift_beginAccess();
  if (*(void *)(*v1 + 16))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v1;
    *uint64_t v1 = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<UInt, ()>);
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *uint64_t v1 = v17;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
}

void *InterruptibleTaskManager.init(name:)(uint64_t a1, uint64_t a2)
{
  v2[4] = MEMORY[0x1E4FBC868];
  v2[5] = 0;
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a1;
  v8[7] = a4;
  uint64_t v10 = type metadata accessor for CancellationError();
  v8[12] = v10;
  v8[13] = *(void *)(v10 - 8);
  v8[14] = swift_task_alloc();
  v8[15] = swift_task_alloc();
  v8[16] = *(void *)(a8 - 8);
  v8[17] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = static MessageBusActor.shared;
  v8[18] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in InterruptibleTaskManager.perform<A>(_:), v11, 0);
}

uint64_t closure #1 in InterruptibleTaskManager.perform<A>(_:)()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = (void *)swift_allocObject();
  v0[19] = v5;
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  v5[5] = v1;
  swift_retain();
  swift_retain();
  unint64_t v6 = (void *)swift_task_alloc();
  v0[20] = v6;
  void *v6 = v0;
  v6[1] = closure #1 in InterruptibleTaskManager.perform<A>(_:);
  uint64_t v7 = v0[17];
  uint64_t v8 = v0[11];
  return withCancellableContinuation<A>(body:)(v7, (uint64_t)partial apply for closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v5, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = closure #1 in InterruptibleTaskManager.perform<A>(_:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 144);
    swift_release();
    uint64_t v4 = closure #1 in InterruptibleTaskManager.perform<A>(_:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[6];
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  type metadata accessor for InterruptibleTaskResult();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v1 = *(void **)(v0 + 168);
  swift_release();
  swift_release();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void **)(v0 + 168);
  if (v3)
  {
    unint64_t v6 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v9 = *(uint64_t **)(v0 + 48);

    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v10(v5, v6, v7);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
    uint64_t v11 = swift_allocError();
    v10(v12, v5, v7);
    *unint64_t v9 = v11;
    type metadata accessor for InterruptibleTaskResult();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 48);

    void *v13 = v4;
    type metadata accessor for InterruptibleTaskResult();
    swift_storeEnumTagMultiPayload();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1B9F2E024()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  void v14[4] = a2;
  v14[5] = a3;
  v14[6] = a1;
  v14[7] = a4;
  v14[8] = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  uint64_t v9 = *(void *)(*(void *)a6 + 80);
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)()
{
  int64_t v15 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[6];
    uint64_t v12 = v0[7];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v8 = *(void *)(v4 + 16);
    unint64_t v7 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v5 + 12) = 2048;
    v0[5] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v2, v3, "%s: task %lu begin", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v13 = (uint64_t (*)(uint64_t))(v0[9] + *(int *)v0[9]);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[15] = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  uint64_t v10 = v0[13];
  return v13(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  void *v15;
  uint64_t v16;

  int64_t v15 = v0;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[11];
  os_log_type_t v3 = v0[12];
  ManagedContinuation.resume(returning:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_retain();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[6];
    unint64_t v7 = v0[7];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = *(void *)(v6 + 16);
    uint64_t v11 = *(void *)(v6 + 24);
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v8 + 12) = 2048;
    v0[3] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v4, v5, "%s: task %lu succeeded", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
    swift_release();
  }

  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String *v4;
  id v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v0[14];
  os_log_type_t v3 = v0[7];
  uint64_t v4 = (Swift::String *)v0[6];
  swift_retain();
  uint64_t v5 = v1;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/InterruptibleTaskManager.swift", 45, 2, (uint64_t)"perform(_:)", 11, 2, v2, v4, v3, v1);

  swift_release();
  ManagedContinuation.resume(throwing:)(v1);

  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t closure #2 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = a2;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v11 = *(void *)(a1 + 16);
    unint64_t v10 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    a2 = v7;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "%s: task cancelled", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v12 = type metadata accessor for InterruptibleTaskResult();
  return MEMORY[0x1BA9E3300](a2, v12, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
}

uint64_t sub_1B9F2EBAC()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #2 in InterruptibleTaskManager.perform<A>(_:)()
{
  return closure #2 in InterruptibleTaskManager.perform<A>(_:)(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t InterruptibleTaskManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t method lookup function for InterruptibleTaskManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InterruptibleTaskManager);
}

uint64_t dispatch thunk of InterruptibleTaskManager.__allocating_init(name:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata completion function for InterruptibleTaskResult()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for InterruptibleTaskResult(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  os_log_type_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(char **)a2;
    *(void *)os_log_type_t v3 = *(void *)a2;
    os_log_type_t v3 = &v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 3;
    if (v9 >= 3)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 3;
          unsigned int v9 = v12 + 3;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 2)
    {
      uint64_t v16 = *(void *)a2;
      id v17 = *(id *)a2;
      *(void *)os_log_type_t v3 = v16;
      v3[v5] = 2;
    }
    else if (v9 == 1)
    {
      id v14 = *(id *)a2;
      id v15 = *(id *)a2;
      *(void *)os_log_type_t v3 = v14;
      v3[v5] = 1;
    }
    else
    {
      (*(void (**)(char *))(v4 + 16))(a1);
      v3[v5] = 0;
    }
  }
  return v3;
}

unsigned __int8 *assignWithCopy for InterruptibleTaskResult(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 2 || v8 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      uint64_t v21 = *(void **)a2;
      id v22 = v21;
      *(void *)a1 = v21;
      char v20 = 2;
    }
    else if (v13 == 1)
    {
      uint64_t v18 = *(void **)a2;
      id v19 = v18;
      *(void *)a1 = v18;
      char v20 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v20 = 0;
    }
    a1[v7] = v20;
  }
  return a1;
}

void *initializeWithTake for InterruptibleTaskResult(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 3;
        unsigned int v5 = v8 + 3;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 2)
  {
    *a1 = *(void *)a2;
    char v10 = 2;
  }
  else if (v5 == 1)
  {
    *a1 = *(void *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *assignWithTake for InterruptibleTaskResult(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 2 || v8 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 2;
    }
    else if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InterruptibleTaskResult(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void storeEnumTagSinglePayload for InterruptibleTaskResult(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1B9F2F784);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for InterruptibleTaskResult(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 8;
  if (*(void *)(v2 + 64) > 8uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 3;
  if (v4 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 3;
        LODWORD(v4) = v7 + 3;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void destructiveInjectEnumTag for InterruptibleTaskResult(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 2)
  {
    unsigned int v5 = a2 - 3;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_1B9F2F93C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA(uint64_t a1)
{
  size_t v4 = *(int **)(v1 + 24);
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  unsigned int v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu);
  return v6(a1, v4);
}

uint64_t sub_1B9F2FA3C()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B9F2FAD0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  int v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *int v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t InvocationStateImpl.aceId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.aceId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.aceId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.refId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.refId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*InvocationStateImpl.refId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 24);
  uint64_t v4 = type metadata accessor for InputOrigin();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t InvocationStateImpl.inputOrigin.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 24);
  uint64_t v4 = type metadata accessor for InputOrigin();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.inputOrigin.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.interactionType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 28);
  uint64_t v4 = type metadata accessor for InteractionType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t InvocationStateImpl.interactionType.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 28);
  uint64_t v4 = type metadata accessor for InteractionType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.interactionType.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.audioSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 32), a1, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t InvocationStateImpl.audioSource.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 32), (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t (*InvocationStateImpl.audioSource.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.audioDestination.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 36), a1, &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t InvocationStateImpl.audioDestination.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 36), &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t (*InvocationStateImpl.audioDestination.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.responseMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 40);
  uint64_t v4 = type metadata accessor for ResponseMode();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t InvocationStateImpl.responseMode.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 40);
  uint64_t v4 = type metadata accessor for ResponseMode();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.responseMode.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.multiUserState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 44);

  return outlined init with copy of MultiUserState(v3, a1);
}

uint64_t InvocationStateImpl.multiUserState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 44);

  return outlined assign with take of MultiUserState(a1, v3);
}

uint64_t (*InvocationStateImpl.multiUserState.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.sessionHandOffContinuityID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.sessionHandOffContinuityID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.sessionHandOffContinuityID.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isEyesFree.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 52));
}

uint64_t InvocationStateImpl.isEyesFree.setter(char a1)
{
  uint64_t result = type metadata accessor for InvocationStateImpl();
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isEyesFree.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isVoiceTriggerEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 56));
}

uint64_t InvocationStateImpl.isVoiceTriggerEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for InvocationStateImpl();
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isVoiceTriggerEnabled.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isTextToSpeechEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 60));
}

uint64_t InvocationStateImpl.isTextToSpeechEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for InvocationStateImpl();
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isTextToSpeechEnabled.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isRecognizeMyVoiceEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 64));
}

uint64_t InvocationStateImpl.isRecognizeMyVoiceEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for InvocationStateImpl();
  *(unsigned char *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isRecognizeMyVoiceEnabled.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isDirectAction.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 68));
}

uint64_t InvocationStateImpl.isDirectAction.setter(char a1)
{
  uint64_t result = type metadata accessor for InvocationStateImpl();
  *(unsigned char *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isDirectAction.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.siriLocale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 72);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t InvocationStateImpl.siriLocale.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 72);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.siriLocale.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.siriVoiceGender.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 76);
  uint64_t v4 = type metadata accessor for SiriVoiceGender();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t InvocationStateImpl.siriVoiceGender.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 76);
  uint64_t v4 = type metadata accessor for SiriVoiceGender();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.siriVoiceGender.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

void *InvocationStateImpl.remoteContext.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 80));
  id v2 = v1;
  return v1;
}

void InvocationStateImpl.remoteContext.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for InvocationStateImpl() + 80);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*InvocationStateImpl.remoteContext.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.executionRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 84));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.executionRequestId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 84));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.executionRequestId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.interactionId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 88));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.interactionId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 88));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.interactionId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.preferencesLanguageCode.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 92));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.preferencesLanguageCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 92));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.preferencesLanguageCode.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.personalDomainsAuthenticationMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 96), a1, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t InvocationStateImpl.personalDomainsAuthenticationMode.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 96), &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t (*InvocationStateImpl.personalDomainsAuthenticationMode.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.bargeInContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 100), a1, &demangling cache variable for type metadata for BargeInContext?);
}

uint64_t InvocationStateImpl.bargeInContext.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 100), &demangling cache variable for type metadata for BargeInContext?);
}

uint64_t (*InvocationStateImpl.bargeInContext.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.restrictions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 104);
  uint64_t v4 = type metadata accessor for Restrictions();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t InvocationStateImpl.restrictions.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 104);
  uint64_t v4 = type metadata accessor for Restrictions();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.restrictions.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.originatingHome.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 108), a1, &demangling cache variable for type metadata for HomeInfo?);
}

uint64_t InvocationStateImpl.originatingHome.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 108), &demangling cache variable for type metadata for HomeInfo?);
}

uint64_t (*InvocationStateImpl.originatingHome.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.currentDeviceAssistantId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 112));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.currentDeviceAssistantId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 112));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.currentDeviceAssistantId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.voiceTriggerEventInfo.getter()
{
  type metadata accessor for InvocationStateImpl();

  return swift_bridgeObjectRetain();
}

uint64_t InvocationStateImpl.voiceTriggerEventInfo.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for InvocationStateImpl() + 116);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.voiceTriggerEventInfo.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.voiceAudioSessionId.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 120));
}

uint64_t InvocationStateImpl.voiceAudioSessionId.setter(int a1)
{
  uint64_t result = type metadata accessor for InvocationStateImpl();
  *(_DWORD *)(v1 + *(int *)(result + 120)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.voiceAudioSessionId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isSystemApertureEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 124));
}

uint64_t InvocationStateImpl.isSystemApertureEnabled.setter(char a1)
{
  uint64_t result = type metadata accessor for InvocationStateImpl();
  *(unsigned char *)(v1 + *(int *)(result + 124)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isSystemApertureEnabled.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isLiveActivitiesSupported.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 128));
}

uint64_t InvocationStateImpl.isLiveActivitiesSupported.setter(char a1)
{
  uint64_t result = type metadata accessor for InvocationStateImpl();
  *(unsigned char *)(v1 + *(int *)(result + 128)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isLiveActivitiesSupported.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isInAmbient.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 132));
}

uint64_t InvocationStateImpl.isInAmbient.setter(char a1)
{
  uint64_t result = type metadata accessor for InvocationStateImpl();
  *(unsigned char *)(v1 + *(int *)(result + 132)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isInAmbient.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.deviceRestrictions.getter()
{
  return Restrictions.deviceRestrictions.getter();
}

uint64_t InvocationStateImpl.init(proxiedRequestContext:restrictions:executionRequestId:originatingHome:audioSource:audioDestination:responseMode:currentDeviceAssistantId:voiceTriggerEventInfo:voiceAudioSessionId:isRMVEnabled:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  uint64_t v111 = a8;
  uint64_t v107 = a2;
  uint64_t v108 = a5;
  int v99 = a14;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v106 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = (int *)type metadata accessor for InvocationStateImpl();
  uint64_t v26 = (uint64_t)a9 + v25[8];
  uint64_t v27 = type metadata accessor for AudioSource();
  char v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  uint64_t v91 = v26;
  v28(v26, 1, 1, v27);
  uint64_t v29 = (uint64_t)a9 + v25[9];
  uint64_t v30 = type metadata accessor for AudioDestination();
  id v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56);
  uint64_t v90 = v29;
  v31(v29, 1, 1, v30);
  uint64_t v32 = (void *)((char *)a9 + v25[12]);
  *uint64_t v32 = 0;
  v32[1] = 0;
  uint64_t v100 = v25[20];
  *(void *)((char *)a9 + v100) = 0;
  uint64_t v33 = (void *)((char *)a9 + v25[23]);
  *uint64_t v33 = 0;
  v33[1] = 0;
  uint64_t v101 = v33;
  uint64_t v34 = (uint64_t)a9 + v25[24];
  uint64_t v35 = type metadata accessor for PersonalDomainsAuthenticationMode();
  os_log_type_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
  uint64_t v104 = v34;
  v36(v34, 1, 1, v35);
  uint64_t v37 = (uint64_t)a9 + v25[25];
  uint64_t v38 = type metadata accessor for BargeInContext();
  int v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
  uint64_t v102 = v37;
  v39(v37, 1, 1, v38);
  uint64_t v40 = (uint64_t)a9 + v25[27];
  uint64_t v41 = type metadata accessor for HomeInfo();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56);
  uint64_t v105 = v40;
  v42(v40, 1, 1, v41);
  uint64_t v103 = v25[29];
  *(void *)((char *)a9 + v103) = 0;
  uint64_t v43 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId + 8];
  *a9 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId];
  a9[1] = v43;
  uint64_t v44 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId + 8];
  uint64_t v109 = a7;
  uint64_t v110 = a6;
  unint64_t v89 = a4;
  uint64_t v88 = a3;
  if (v44)
  {
    a9[2] = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId];
    a9[3] = v44;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v45 = one-time initialization token for executor;
    swift_bridgeObjectRetain();
    if (v45 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v98 = swift_slowAlloc();
      uint64_t v113 = v98;
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v97 = v49 + 4;
      swift_bridgeObjectRetain();
      uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v47, v48, "[InvocationState] RSKE has a nil refId? Setting refId to executionRequestId=%s", v49, 0xCu);
      uint64_t v50 = v98;
      swift_arrayDestroy();
      uint64_t v51 = v50;
      a6 = v110;
      MEMORY[0x1BA9E48C0](v51, -1, -1);
      uint64_t v52 = v49;
      a7 = v109;
      MEMORY[0x1BA9E48C0](v52, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a9[2] = a3;
    a9[3] = a4;
    swift_bridgeObjectRetain();
  }
  LODWORD(v98) = a17;
  int v96 = a15;
  LODWORD(v97) = a16;
  int v95 = a13;
  uint64_t v93 = a11;
  uint64_t v94 = a12;
  uint64_t v92 = a10;
  uint64_t v53 = &a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin];
  uint64_t v54 = (char *)a9 + v25[6];
  uint64_t v55 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16))(v54, v53, v55);
  uint64_t v56 = &a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType];
  uint64_t v57 = (char *)a9 + v25[7];
  uint64_t v58 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v57, v56, v58);
  swift_bridgeObjectRetain();
  outlined assign with copy of ReferenceResolutionClientProtocol?(a6, v91, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined assign with copy of ReferenceResolutionClientProtocol?(a7, v90, &demangling cache variable for type metadata for AudioDestination?);
  unint64_t v59 = (char *)a9 + v25[10];
  uint64_t v60 = type metadata accessor for ResponseMode();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(void (**)(char *, uint64_t))(v61 + 16);
  uint64_t v91 = v60;
  v62(v59, v111);
  ProxiedRequestContext.multiUserState.getter((uint64_t)a9 + v25[11]);
  uint64_t v63 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId + 8];
  *uint64_t v32 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId];
  v32[1] = v63;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a9 + v25[13]) = a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree];
  *((unsigned char *)a9 + v25[14]) = a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled];
  *((unsigned char *)a9 + v25[15]) = a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled];
  *((unsigned char *)a9 + v25[16]) = v99 & 1;
  *((unsigned char *)a9 + v25[17]) = a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction];
  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1BA9DD9D0]();
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.siriLocale.getter();
  uint64_t v64 = swift_release();
  MEMORY[0x1BA9DD9D0](v64);
  swift_release();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  swift_release();
  uint64_t v65 = *(void **)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution];
  long long v66 = *(void **)((char *)a9 + v100);
  *(void *)((char *)a9 + v100) = v65;
  id v67 = v65;

  char v68 = (void *)((char *)a9 + v25[21]);
  unint64_t v69 = v89;
  *char v68 = v88;
  v68[1] = v69;
  uint64_t v70 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId + 8];
  uint64_t v71 = (void *)((char *)a9 + v25[22]);
  *uint64_t v71 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId];
  v71[1] = v70;
  uint64_t v72 = swift_bridgeObjectRetain();
  MEMORY[0x1BA9DD9D0](v72);
  swift_release();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  uint64_t v73 = dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  uint64_t v75 = v74;
  swift_release();
  uint64_t v76 = v101;
  swift_bridgeObjectRelease();
  *uint64_t v76 = v73;
  v76[1] = v75;
  if (v65)
  {
    id v77 = objc_msgSend(v67, sel_personalDomainAuthenticationMode);
    if (v77)
    {
      char v78 = v77;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  uint64_t v80 = v109;
  uint64_t v79 = v110;
  uint64_t v81 = (uint64_t)v106;
  PersonalDomainsAuthenticationMode.init(aceValue:)();
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v111, v91);
  outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of ReferenceResolutionClientProtocol?(v79, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v81, v104, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext], v102, &demangling cache variable for type metadata for BargeInContext?);

  uint64_t v82 = (char *)a9 + v25[26];
  uint64_t v83 = type metadata accessor for Restrictions();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v83 - 8) + 32))(v82, v107, v83);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v108, v105, &demangling cache variable for type metadata for HomeInfo?);
  unint64_t v84 = (void *)((char *)a9 + v25[28]);
  uint64_t v85 = v93;
  *unint64_t v84 = v92;
  v84[1] = v85;
  uint64_t v86 = v103;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)((char *)a9 + v86) = v94;
  *(_DWORD *)((char *)a9 + v25[30]) = v95;
  *((unsigned char *)a9 + v25[31]) = v96 & 1;
  *((unsigned char *)a9 + v25[32]) = v97 & 1;
  *((unsigned char *)a9 + v25[33]) = v98 & 1;
  return result;
}

uint64_t AFHomeInfo.asInternalHomeInfo.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v13 - v6;
  HomeInfo.init()();
  id v8 = objc_msgSend(v1, sel_homeIdentifier);
  if (v8)
  {
    uint64_t v9 = v8;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 0, 1, v10);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 1, 1, v10);
  }
  outlined init with take of UUID?((uint64_t)v5, (uint64_t)v7);
  type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
  }
  return HomeInfo.homeIdentifier.setter();
}

uint64_t outlined assign with take of MultiUserState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiUserState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for InvocationState.refId.getter in conformance InvocationStateImpl()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for InvocationState.inputOrigin.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for InputOrigin();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.interactionType.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for InteractionType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.audioSource.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 32), a2, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t protocol witness for InvocationState.audioDestination.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 36), a2, &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t protocol witness for InvocationState.responseMode.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for ResponseMode();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.multiUserState.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of MultiUserState(v2 + *(int *)(a1 + 44), a2);
}

uint64_t protocol witness for InvocationState.sessionHandOffContinuityID.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 48));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.isEyesFree.getter in conformance InvocationStateImpl(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t protocol witness for InvocationState.isVoiceTriggerEnabled.getter in conformance InvocationStateImpl(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t protocol witness for InvocationState.isTextToSpeechEnabled.getter in conformance InvocationStateImpl(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

uint64_t protocol witness for InvocationState.isRecognizeMyVoiceEnabled.getter in conformance InvocationStateImpl(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 64));
}

uint64_t protocol witness for InvocationState.isDirectAction.getter in conformance InvocationStateImpl(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 68));
}

uint64_t protocol witness for InvocationState.siriLocale.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 72);
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.siriVoiceGender.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 76);
  uint64_t v5 = type metadata accessor for SiriVoiceGender();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

void *protocol witness for InvocationState.remoteContext.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + *(int *)(a1 + 80));
  id v3 = v2;
  return v2;
}

uint64_t protocol witness for InvocationState.executionRequestId.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 84));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.interactionId.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 88));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.preferencesLanguageCode.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 92));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.personalDomainsAuthenticationMode.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 96), a2, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t protocol witness for InvocationState.bargeInContext.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 100), a2, &demangling cache variable for type metadata for BargeInContext?);
}

uint64_t protocol witness for InvocationState.deviceRestrictions.getter in conformance InvocationStateImpl()
{
  return Restrictions.deviceRestrictions.getter();
}

uint64_t protocol witness for InvocationState.restrictions.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 104);
  uint64_t v5 = type metadata accessor for Restrictions();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.originatingHome.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 108), a2, &demangling cache variable for type metadata for HomeInfo?);
}

uint64_t protocol witness for InvocationState.currentDeviceAssistantId.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 112));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.voiceTriggerEventInfo.getter in conformance InvocationStateImpl()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for InvocationState.voiceAudioSessionId.getter in conformance InvocationStateImpl(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 120));
}

uint64_t protocol witness for InvocationState.isSystemApertureEnabled.getter in conformance InvocationStateImpl(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 124));
}

uint64_t protocol witness for InvocationState.isLiveActivitiesSupported.getter in conformance InvocationStateImpl(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 128));
}

uint64_t protocol witness for InvocationState.isInAmbient.getter in conformance InvocationStateImpl(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 132));
}

uint64_t dispatch thunk of InvocationState.refId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InvocationState.aceId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InvocationState.inputOrigin.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InvocationState.interactionType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InvocationState.audioSource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of InvocationState.audioDestination.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of InvocationState.responseMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of InvocationState.multiUserState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of InvocationState.sessionHandOffContinuityID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of InvocationState.isEyesFree.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of InvocationState.isVoiceTriggerEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of InvocationState.isTextToSpeechEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of InvocationState.isRecognizeMyVoiceEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of InvocationState.isDirectAction.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of InvocationState.siriLocale.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of InvocationState.siriVoiceGender.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of InvocationState.remoteContext.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of InvocationState.executionRequestId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of InvocationState.interactionId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of InvocationState.preferencesLanguageCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of InvocationState.personalDomainsAuthenticationMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of InvocationState.bargeInContext.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of InvocationState.deviceRestrictions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of InvocationState.restrictions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of InvocationState.originatingHome.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of InvocationState.currentDeviceAssistantId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of InvocationState.voiceTriggerEventInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of InvocationState.voiceAudioSessionId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of InvocationState.isSystemApertureEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of InvocationState.isLiveActivitiesSupported.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of InvocationState.isInAmbient.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

void *initializeBufferWithCopyOfBuffer for InvocationStateImpl(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for InputOrigin();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v4 + v14;
    int v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for InteractionType();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[8];
    id v19 = (char *)v4 + v18;
    char v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for AudioSource();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v25 = a3[9];
    uint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for AudioDestination();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    uint64_t v31 = a3[10];
    uint64_t v32 = (char *)v4 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = type metadata accessor for ResponseMode();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
    uint64_t v35 = a3[11];
    os_log_type_t v36 = (char *)v4 + v35;
    uint64_t v37 = (char *)a2 + v35;
    uint64_t v38 = type metadata accessor for MultiUserContext();
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = type metadata accessor for MultiUserState();
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    uint64_t v41 = a3[12];
    uint64_t v42 = a3[13];
    uint64_t v43 = (void *)((char *)v4 + v41);
    uint64_t v44 = (void *)((char *)a2 + v41);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    *((unsigned char *)v4 + v42) = *((unsigned char *)a2 + v42);
    uint64_t v46 = a3[15];
    *((unsigned char *)v4 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    *((unsigned char *)v4 + v46) = *((unsigned char *)a2 + v46);
    uint64_t v47 = a3[17];
    *((unsigned char *)v4 + a3[16]) = *((unsigned char *)a2 + a3[16]);
    *((unsigned char *)v4 + v47) = *((unsigned char *)a2 + v47);
    uint64_t v48 = a3[18];
    uint64_t v49 = (char *)v4 + v48;
    uint64_t v50 = (char *)a2 + v48;
    uint64_t v51 = type metadata accessor for Locale();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    v52(v49, v50, v51);
    uint64_t v53 = a3[19];
    uint64_t v54 = (char *)v4 + v53;
    uint64_t v55 = (char *)a2 + v53;
    uint64_t v56 = type metadata accessor for SiriVoiceGender();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
    uint64_t v57 = a3[20];
    uint64_t v58 = a3[21];
    unint64_t v59 = *(void **)((char *)a2 + v57);
    *(void *)((char *)v4 + v57) = v59;
    uint64_t v60 = (void *)((char *)v4 + v58);
    uint64_t v61 = (void *)((char *)a2 + v58);
    uint64_t v62 = v61[1];
    void *v60 = *v61;
    v60[1] = v62;
    uint64_t v63 = a3[22];
    uint64_t v64 = a3[23];
    uint64_t v65 = (void *)((char *)v4 + v63);
    long long v66 = (void *)((char *)a2 + v63);
    uint64_t v67 = v66[1];
    void *v65 = *v66;
    v65[1] = v67;
    char v68 = (void *)((char *)v4 + v64);
    unint64_t v69 = (void *)((char *)a2 + v64);
    uint64_t v70 = v69[1];
    *char v68 = *v69;
    v68[1] = v70;
    uint64_t v71 = a3[24];
    __dst = (char *)v4 + v71;
    uint64_t v100 = (char *)a2 + v71;
    uint64_t v72 = type metadata accessor for PersonalDomainsAuthenticationMode();
    uint64_t v73 = *(void *)(v72 - 8);
    uint64_t v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
    id v74 = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v101(v100, 1, v72))
    {
      uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
      memcpy(__dst, v100, *(void *)(*(void *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(__dst, v100, v72);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(__dst, 0, 1, v72);
    }
    uint64_t v76 = a3[25];
    id v77 = (char *)v4 + v76;
    char v78 = (char *)a2 + v76;
    uint64_t v79 = type metadata accessor for BargeInContext();
    uint64_t v80 = *(void *)(v79 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
      memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v77, v78, v79);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
    }
    uint64_t v82 = a3[26];
    uint64_t v83 = (char *)v4 + v82;
    unint64_t v84 = (char *)a2 + v82;
    uint64_t v85 = type metadata accessor for Restrictions();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16))(v83, v84, v85);
    uint64_t v86 = a3[27];
    unint64_t v87 = (char *)v4 + v86;
    uint64_t v88 = (char *)a2 + v86;
    uint64_t v89 = type metadata accessor for HomeInfo();
    uint64_t v90 = *(void *)(v89 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
    {
      uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
      memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v87, v88, v89);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
    }
    uint64_t v92 = a3[28];
    uint64_t v93 = a3[29];
    uint64_t v94 = (void *)((char *)v4 + v92);
    int v95 = (void *)((char *)a2 + v92);
    uint64_t v96 = v95[1];
    void *v94 = *v95;
    v94[1] = v96;
    *(void *)((char *)v4 + v93) = *(void *)((char *)a2 + v93);
    uint64_t v97 = a3[31];
    *(_DWORD *)((char *)v4 + a3[30]) = *(_DWORD *)((char *)a2 + a3[30]);
    *((unsigned char *)v4 + v97) = *((unsigned char *)a2 + v97);
    uint64_t v98 = a3[33];
    *((unsigned char *)v4 + a3[32]) = *((unsigned char *)a2 + a3[32]);
    *((unsigned char *)v4 + v98) = *((unsigned char *)a2 + v98);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

void *assignWithCopy for InvocationStateImpl(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  int v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for AudioSource();
  uint64_t v18 = *(void *)(v17 - 8);
  id v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = a3[9];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for AudioDestination();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_12:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_13:
  uint64_t v32 = a3[10];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 24))(v33, v34, v35);
  uint64_t v36 = a3[11];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = type metadata accessor for MultiUserContext();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
LABEL_18:
    uint64_t v44 = type metadata accessor for MultiUserState();
    memcpy(v37, v38, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v39);
LABEL_19:
  uint64_t v45 = a3[12];
  uint64_t v46 = (void *)((char *)a1 + v45);
  uint64_t v47 = (void *)((char *)a2 + v45);
  *uint64_t v46 = *v47;
  v46[1] = v47[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  uint64_t v48 = a3[18];
  uint64_t v49 = (char *)a1 + v48;
  uint64_t v50 = (char *)a2 + v48;
  uint64_t v51 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 24))(v49, v50, v51);
  uint64_t v52 = a3[19];
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)a2 + v52;
  uint64_t v55 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 24))(v53, v54, v55);
  uint64_t v56 = a3[20];
  uint64_t v57 = *(void **)((char *)a1 + v56);
  uint64_t v58 = *(void **)((char *)a2 + v56);
  *(void *)((char *)a1 + v56) = v58;
  id v59 = v58;

  uint64_t v60 = a3[21];
  uint64_t v61 = (void *)((char *)a1 + v60);
  uint64_t v62 = (void *)((char *)a2 + v60);
  void *v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[22];
  uint64_t v64 = (void *)((char *)a1 + v63);
  uint64_t v65 = (void *)((char *)a2 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = a3[23];
  uint64_t v67 = (void *)((char *)a1 + v66);
  char v68 = (void *)((char *)a2 + v66);
  void *v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[24];
  uint64_t v70 = (char *)a1 + v69;
  uint64_t v71 = (char *)a2 + v69;
  uint64_t v72 = type metadata accessor for PersonalDomainsAuthenticationMode();
  uint64_t v73 = *(void *)(v72 - 8);
  id v74 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
  int v75 = v74(v70, 1, v72);
  int v76 = v74(v71, 1, v72);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v70, v72);
LABEL_24:
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
    memcpy(v70, v71, *(void *)(*(void *)(v77 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v73 + 24))(v70, v71, v72);
LABEL_25:
  uint64_t v78 = a3[25];
  uint64_t v79 = (char *)a1 + v78;
  uint64_t v80 = (char *)a2 + v78;
  uint64_t v81 = type metadata accessor for BargeInContext();
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
  int v84 = v83(v79, 1, v81);
  int v85 = v83(v80, 1, v81);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v79, v80, v81);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v79, v81);
LABEL_30:
    uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
    memcpy(v79, v80, *(void *)(*(void *)(v86 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v82 + 24))(v79, v80, v81);
LABEL_31:
  uint64_t v87 = a3[26];
  uint64_t v88 = (char *)a1 + v87;
  uint64_t v89 = (char *)a2 + v87;
  uint64_t v90 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 24))(v88, v89, v90);
  uint64_t v91 = a3[27];
  uint64_t v92 = (char *)a1 + v91;
  uint64_t v93 = (char *)a2 + v91;
  uint64_t v94 = type metadata accessor for HomeInfo();
  uint64_t v95 = *(void *)(v94 - 8);
  uint64_t v96 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
  int v97 = v96(v92, 1, v94);
  int v98 = v96(v93, 1, v94);
  if (!v97)
  {
    if (!v98)
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 24))(v92, v93, v94);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v94);
    goto LABEL_36;
  }
  if (v98)
  {
LABEL_36:
    uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
    memcpy(v92, v93, *(void *)(*(void *)(v99 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v92, v93, v94);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
LABEL_37:
  uint64_t v100 = a3[28];
  uint64_t v101 = (void *)((char *)a1 + v100);
  uint64_t v102 = (void *)((char *)a2 + v100);
  *uint64_t v101 = *v102;
  v101[1] = v102[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[29]) = *(void *)((char *)a2 + a3[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)((char *)a1 + a3[30]) = *(_DWORD *)((char *)a2 + a3[30]);
  *((unsigned char *)a1 + a3[31]) = *((unsigned char *)a2 + a3[31]);
  *((unsigned char *)a1 + a3[32]) = *((unsigned char *)a2 + a3[32]);
  *((unsigned char *)a1 + a3[33]) = *((unsigned char *)a2 + a3[33]);
  return a1;
}

_OWORD *initializeWithTake for InvocationStateImpl(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[8];
  int v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for AudioSource();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v21 = a3[9];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for AudioDestination();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v27 = a3[10];
  uint64_t v28 = (char *)a1 + v27;
  int v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
  uint64_t v31 = a3[11];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for MultiUserContext();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = type metadata accessor for MultiUserState();
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v37 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *((unsigned char *)a1 + v37) = *((unsigned char *)a2 + v37);
  uint64_t v38 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  *((unsigned char *)a1 + v38) = *((unsigned char *)a2 + v38);
  uint64_t v39 = a3[17];
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  *((unsigned char *)a1 + v39) = *((unsigned char *)a2 + v39);
  uint64_t v40 = a3[18];
  uint64_t v41 = (char *)a1 + v40;
  int v42 = (char *)a2 + v40;
  uint64_t v43 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
  uint64_t v44 = a3[19];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
  uint64_t v48 = a3[21];
  *(void *)((char *)a1 + a3[20]) = *(void *)((char *)a2 + a3[20]);
  *(_OWORD *)((char *)a1 + v48) = *(_OWORD *)((char *)a2 + v48);
  uint64_t v49 = a3[23];
  *(_OWORD *)((char *)a1 + a3[22]) = *(_OWORD *)((char *)a2 + a3[22]);
  *(_OWORD *)((char *)a1 + v49) = *(_OWORD *)((char *)a2 + v49);
  uint64_t v50 = a3[24];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  uint64_t v53 = type metadata accessor for PersonalDomainsAuthenticationMode();
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  uint64_t v56 = a3[25];
  uint64_t v57 = (char *)a1 + v56;
  uint64_t v58 = (char *)a2 + v56;
  uint64_t v59 = type metadata accessor for BargeInContext();
  uint64_t v60 = *(void *)(v59 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
  {
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
    memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v58, v59);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
  }
  uint64_t v62 = a3[26];
  uint64_t v63 = (char *)a1 + v62;
  uint64_t v64 = (char *)a2 + v62;
  uint64_t v65 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v63, v64, v65);
  uint64_t v66 = a3[27];
  uint64_t v67 = (char *)a1 + v66;
  char v68 = (char *)a2 + v66;
  uint64_t v69 = type metadata accessor for HomeInfo();
  uint64_t v70 = *(void *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
  {
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
  }
  uint64_t v72 = a3[29];
  *(_OWORD *)((char *)a1 + a3[28]) = *(_OWORD *)((char *)a2 + a3[28]);
  *(void *)((char *)a1 + v72) = *(void *)((char *)a2 + v72);
  uint64_t v73 = a3[31];
  *(_DWORD *)((char *)a1 + a3[30]) = *(_DWORD *)((char *)a2 + a3[30]);
  *((unsigned char *)a1 + v73) = *((unsigned char *)a2 + v73);
  uint64_t v74 = a3[33];
  *((unsigned char *)a1 + a3[32]) = *((unsigned char *)a2 + a3[32]);
  *((unsigned char *)a1 + v74) = *((unsigned char *)a2 + v74);
  return a1;
}

void *assignWithTake for InvocationStateImpl(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for AudioSource();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  uint64_t v25 = a3[9];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for AudioDestination();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v26, v27, v28);
LABEL_13:
  uint64_t v34 = a3[10];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 40))(v35, v36, v37);
  uint64_t v38 = a3[11];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = type metadata accessor for MultiUserContext();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  int v44 = v43(v39, 1, v41);
  int v45 = v43(v40, 1, v41);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
LABEL_18:
    uint64_t v46 = type metadata accessor for MultiUserState();
    memcpy(v39, v40, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v39, v40, v41);
LABEL_19:
  uint64_t v47 = a3[12];
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = (void *)((char *)a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  void *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  *((unsigned char *)a1 + v52) = *((unsigned char *)a2 + v52);
  uint64_t v53 = a3[16];
  *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  *((unsigned char *)a1 + v53) = *((unsigned char *)a2 + v53);
  uint64_t v54 = a3[18];
  *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  uint64_t v55 = (char *)a1 + v54;
  uint64_t v56 = (char *)a2 + v54;
  uint64_t v57 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 40))(v55, v56, v57);
  uint64_t v58 = a3[19];
  uint64_t v59 = (char *)a1 + v58;
  uint64_t v60 = (char *)a2 + v58;
  uint64_t v61 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 40))(v59, v60, v61);
  uint64_t v62 = a3[20];
  uint64_t v63 = *(void **)((char *)a1 + v62);
  *(void *)((char *)a1 + v62) = *(void *)((char *)a2 + v62);

  uint64_t v64 = a3[21];
  uint64_t v65 = (void *)((char *)a1 + v64);
  uint64_t v66 = (void *)((char *)a2 + v64);
  uint64_t v68 = *v66;
  uint64_t v67 = v66[1];
  void *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[22];
  uint64_t v70 = (void *)((char *)a1 + v69);
  uint64_t v71 = (void *)((char *)a2 + v69);
  uint64_t v73 = *v71;
  uint64_t v72 = v71[1];
  *uint64_t v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  uint64_t v74 = a3[23];
  int v75 = (void *)((char *)a1 + v74);
  int v76 = (void *)((char *)a2 + v74);
  uint64_t v78 = *v76;
  uint64_t v77 = v76[1];
  *int v75 = v78;
  v75[1] = v77;
  swift_bridgeObjectRelease();
  uint64_t v79 = a3[24];
  uint64_t v80 = (char *)a1 + v79;
  uint64_t v81 = (char *)a2 + v79;
  uint64_t v82 = type metadata accessor for PersonalDomainsAuthenticationMode();
  uint64_t v83 = *(void *)(v82 - 8);
  int v84 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
  int v85 = v84(v80, 1, v82);
  int v86 = v84(v81, 1, v82);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v80, v81, v82);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v80, v82);
LABEL_24:
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
    memcpy(v80, v81, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 40))(v80, v81, v82);
LABEL_25:
  uint64_t v88 = a3[25];
  uint64_t v89 = (char *)a1 + v88;
  uint64_t v90 = (char *)a2 + v88;
  uint64_t v91 = type metadata accessor for BargeInContext();
  uint64_t v92 = *(void *)(v91 - 8);
  uint64_t v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
  int v94 = v93(v89, 1, v91);
  int v95 = v93(v90, 1, v91);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v89, v90, v91);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v95)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v89, v91);
LABEL_30:
    uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
    memcpy(v89, v90, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 40))(v89, v90, v91);
LABEL_31:
  uint64_t v97 = a3[26];
  int v98 = (char *)a1 + v97;
  uint64_t v99 = (char *)a2 + v97;
  uint64_t v100 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 40))(v98, v99, v100);
  uint64_t v101 = a3[27];
  uint64_t v102 = (char *)a1 + v101;
  uint64_t v103 = (char *)a2 + v101;
  uint64_t v104 = type metadata accessor for HomeInfo();
  uint64_t v105 = *(void *)(v104 - 8);
  uint64_t v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
  int v107 = v106(v102, 1, v104);
  int v108 = v106(v103, 1, v104);
  if (!v107)
  {
    if (!v108)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 40))(v102, v103, v104);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v105 + 8))(v102, v104);
    goto LABEL_36;
  }
  if (v108)
  {
LABEL_36:
    uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
    memcpy(v102, v103, *(void *)(*(void *)(v109 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v102, v103, v104);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
LABEL_37:
  uint64_t v110 = a3[28];
  uint64_t v111 = (void *)((char *)a1 + v110);
  uint64_t v112 = (void *)((char *)a2 + v110);
  uint64_t v114 = *v112;
  uint64_t v113 = v112[1];
  *uint64_t v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[29]) = *(void *)((char *)a2 + a3[29]);
  swift_bridgeObjectRelease();
  uint64_t v115 = a3[31];
  *(_DWORD *)((char *)a1 + a3[30]) = *(_DWORD *)((char *)a2 + a3[30]);
  *((unsigned char *)a1 + v115) = *((unsigned char *)a2 + v115);
  uint64_t v116 = a3[33];
  *((unsigned char *)a1 + a3[32]) = *((unsigned char *)a2 + a3[32]);
  *((unsigned char *)a1 + v116) = *((unsigned char *)a2 + v116);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvocationStateImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9F34E5C);
}

uint64_t sub_1B9F34E5C(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for InputOrigin();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_27:
    int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v22(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for InteractionType();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_27;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_27;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_27;
  }
  uint64_t v15 = type metadata accessor for ResponseMode();
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v9 = v15;
    uint64_t v10 = *(void *)(v15 - 8);
    uint64_t v11 = a3[10];
    goto LABEL_27;
  }
  uint64_t v16 = type metadata accessor for MultiUserState();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v9 = v16;
    uint64_t v10 = *(void *)(v16 - 8);
    uint64_t v11 = a3[11];
    goto LABEL_27;
  }
  uint64_t v17 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v9 = v17;
    uint64_t v10 = *(void *)(v17 - 8);
    uint64_t v11 = a3[18];
    goto LABEL_27;
  }
  uint64_t v18 = type metadata accessor for SiriVoiceGender();
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a2)
  {
    uint64_t v9 = v18;
    uint64_t v10 = *(void *)(v18 - 8);
    uint64_t v11 = a3[19];
    goto LABEL_27;
  }
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a2)
  {
    uint64_t v9 = v19;
    uint64_t v10 = *(void *)(v19 - 8);
    uint64_t v11 = a3[24];
    goto LABEL_27;
  }
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
  if (*(_DWORD *)(*(void *)(v20 - 8) + 84) == a2)
  {
    uint64_t v9 = v20;
    uint64_t v10 = *(void *)(v20 - 8);
    uint64_t v11 = a3[25];
    goto LABEL_27;
  }
  uint64_t v21 = type metadata accessor for Restrictions();
  if (*(_DWORD *)(*(void *)(v21 - 8) + 84) == a2)
  {
    uint64_t v9 = v21;
    uint64_t v10 = *(void *)(v21 - 8);
    uint64_t v11 = a3[26];
    goto LABEL_27;
  }
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48);
  uint64_t v25 = v23;
  uint64_t v26 = a1 + a3[27];

  return v24(v26, a2, v25);
}

uint64_t storeEnumTagSinglePayload for InvocationStateImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9F352A8);
}

uint64_t sub_1B9F352A8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for InputOrigin();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_25:
    int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v22(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for InteractionType();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_25;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_25;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a3)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_25;
  }
  uint64_t v15 = type metadata accessor for ResponseMode();
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a3)
  {
    uint64_t v9 = v15;
    uint64_t v10 = *(void *)(v15 - 8);
    uint64_t v11 = a4[10];
    goto LABEL_25;
  }
  uint64_t v16 = type metadata accessor for MultiUserState();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v9 = v16;
    uint64_t v10 = *(void *)(v16 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_25;
  }
  uint64_t v17 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
  {
    uint64_t v9 = v17;
    uint64_t v10 = *(void *)(v17 - 8);
    uint64_t v11 = a4[18];
    goto LABEL_25;
  }
  uint64_t v18 = type metadata accessor for SiriVoiceGender();
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
  {
    uint64_t v9 = v18;
    uint64_t v10 = *(void *)(v18 - 8);
    uint64_t v11 = a4[19];
    goto LABEL_25;
  }
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a3)
  {
    uint64_t v9 = v19;
    uint64_t v10 = *(void *)(v19 - 8);
    uint64_t v11 = a4[24];
    goto LABEL_25;
  }
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
  if (*(_DWORD *)(*(void *)(v20 - 8) + 84) == a3)
  {
    uint64_t v9 = v20;
    uint64_t v10 = *(void *)(v20 - 8);
    uint64_t v11 = a4[25];
    goto LABEL_25;
  }
  uint64_t v21 = type metadata accessor for Restrictions();
  if (*(_DWORD *)(*(void *)(v21 - 8) + 84) == a3)
  {
    uint64_t v9 = v21;
    uint64_t v10 = *(void *)(v21 - 8);
    uint64_t v11 = a4[26];
    goto LABEL_25;
  }
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  uint64_t v25 = v23;
  uint64_t v26 = v5 + a4[27];

  return v24(v26, a2, a2, v25);
}

void type metadata completion function for InvocationStateImpl()
{
  type metadata accessor for InputOrigin();
  if (v0 <= 0x3F)
  {
    type metadata accessor for InteractionType();
    if (v1 <= 0x3F)
    {
      type metadata accessor for AudioSource?(319, &lazy cache variable for type metadata for AudioSource?, MEMORY[0x1E4FA5070]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for AudioSource?(319, &lazy cache variable for type metadata for AudioDestination?, MEMORY[0x1E4FA5258]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for ResponseMode();
          if (v4 <= 0x3F)
          {
            type metadata accessor for MultiUserState();
            if (v5 <= 0x3F)
            {
              type metadata accessor for Locale();
              if (v6 <= 0x3F)
              {
                type metadata accessor for SiriVoiceGender();
                if (v7 <= 0x3F)
                {
                  type metadata accessor for AudioSource?(319, &lazy cache variable for type metadata for PersonalDomainsAuthenticationMode?, MEMORY[0x1E4FA52F0]);
                  if (v8 <= 0x3F)
                  {
                    type metadata accessor for AudioSource?(319, &lazy cache variable for type metadata for BargeInContext?, MEMORY[0x1E4FA5208]);
                    if (v9 <= 0x3F)
                    {
                      type metadata accessor for Restrictions();
                      if (v10 <= 0x3F)
                      {
                        type metadata accessor for AudioSource?(319, &lazy cache variable for type metadata for HomeInfo?, MEMORY[0x1E4FA52F8]);
                        if (v11 <= 0x3F) {
                          swift_initStructMetadata();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for AudioSource?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t JetsamHelper.defaultTimeout.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();

  return __swift_project_value_buffer(v0, (uint64_t)static JetsamHelper.defaultTimeout);
}

void *JetsamHelper.__allocating_init(name:queue:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_allocObject();
  unint64_t v9 = (void *)((char *)v8 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *unint64_t v9 = 0;
  v9[1] = 0;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = dispatch_semaphore_create(1);
  v8[5] = a3;
  unint64_t v10 = (char *)v8 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a4, v11);
  return v8;
}

Swift::Void __swiftcall JetsamHelper.ensureJetsamTransaction()()
{
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.ensureJetsamTransaction()(v0);
  OS_dispatch_semaphore.signal()();
}

Swift::Bool __swiftcall JetsamHelper.releaseJetsamTransaction()()
{
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.releaseJetsamTransaction()(v0, &v2);
  OS_dispatch_semaphore.signal()();
  return v2;
}

uint64_t one-time initialization function for defaultTimeout()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static JetsamHelper.defaultTimeout);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)static JetsamHelper.defaultTimeout) = 180;
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static SiriAceLocationProvider.defaultTimeout);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)static SiriAceLocationProvider.defaultTimeout) = 50;
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

uint64_t static JetsamHelper.defaultTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static JetsamHelper.defaultTimeout);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void *JetsamHelper.init(name:queue:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (void *)((char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *unint64_t v7 = 0;
  v7[1] = 0;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = dispatch_semaphore_create(1);
  v4[5] = a3;
  unint64_t v8 = (char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a4, v9);
  return v4;
}

void closure #1 in closure #1 in JetsamHelper.ensureJetsamTransaction()()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    OS_dispatch_semaphore.wait()();
    closure #1 in JetsamHelper.releaseJetsamTransaction()(v5, (BOOL *)v18);
    OS_dispatch_semaphore.signal()();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    swift_retain_n();
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v18[0] = v16;
      *(_DWORD *)uint64_t v9 = 136315394;
      uint64_t v10 = *(void *)(v5 + 16);
      unint64_t v11 = *(void *)(v5 + 24);
      swift_bridgeObjectRetain();
      uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v0);
      uint64_t v12 = String.init<A>(describing:)();
      uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v7, v8, "os_transaction(%s) released after %s", (uint8_t *)v9, 0x16u);
      uint64_t v14 = v16;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v14, -1, -1);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      swift_release();
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t JetsamHelper.deinit()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction), *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction + 8));
  return v0;
}

uint64_t JetsamHelper.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction), *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction + 8));

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for JetsamHelper()
{
  return type metadata accessor for JetsamHelper();
}

uint64_t type metadata accessor for JetsamHelper()
{
  uint64_t result = type metadata singleton initialization cache for JetsamHelper;
  if (!type metadata singleton initialization cache for JetsamHelper) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for JetsamHelper()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for JetsamHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for JetsamHelper);
}

uint64_t dispatch thunk of JetsamHelper.__allocating_init(name:queue:timeout:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1B9F3643C()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in closure #1 in JetsamHelper.ensureJetsamTransaction()()
{
}

uint64_t static LaunchAppMetricsLogger.logAnalytics(launchApp:)(void *a1)
{
  return specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(a1, (uint64_t (*)(void))specialized static LaunchAppMetricsLogger.getSparseCommand(command:));
}

{
  return specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(a1, (uint64_t (*)(void))specialized static LaunchAppMetricsLogger.getSparseCommand(command:));
}

id specialized static LaunchAppMetricsLogger.getSparseCommand(command:)(void *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96708]), sel_init);
  id v8 = objc_msgSend(a1, sel_appId);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = v7;
    objc_msgSend(v10, sel_setAppId_, v9);
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v19;

  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96548]), sel_init);
  id v8 = objc_msgSend(a1, sel_appId);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = v7;
    objc_msgSend(v10, sel_setAppId_, v9);
  }
  unint64_t v11 = objc_msgSend(a1, sel_launchId);
  if (v11)
  {
    uint64_t v12 = v11;
    objc_msgSend(v7, sel_setLaunchId_, v11);
  }
  unint64_t v13 = objc_msgSend(a1, sel_applicationClientIdentifier);
  if (v13)
  {
    uint64_t v14 = v13;
    objc_msgSend(v7, sel_setApplicationClientIdentifier_, v13);
  }
  uint64_t v15 = objc_msgSend(a1, sel_callbacks);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = v7;
    objc_msgSend(v17, sel_setCallbacks_, v16);
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(void *a1)
{
  return specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(a1, (uint64_t (*)(void))specialized static LaunchAppMetricsLogger.getSparseCommand(command:));
}

{
  return specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(a1, (uint64_t (*)(void))specialized static LaunchAppMetricsLogger.getSparseCommand(command:));
}

uint64_t specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(void *a1, uint64_t (*a2)(void))
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v8 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.instrumentation);
  id v10 = a1;
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v29 = a2;
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v31 = v4;
    uint64_t v15 = (void *)v14;
    uint64_t v30 = v7;
    *(_DWORD *)unint64_t v13 = 138412290;
    *(void *)&long long v34 = v10;
    uint64_t v16 = v10;
    a2 = v29;
    id v7 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v10;

    _os_log_impl(&dword_1B9C64000, v11, v12, "Logging LaunchApp to AFAnalytics: %@", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v17 = v15;
    uint64_t v4 = v31;
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    unint64_t v11 = v10;
  }

  unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v36 = v18;
  uint64_t v19 = (void *)a2(v10);
  id v20 = objc_msgSend(v19, sel_dictionary);
  if (v20)
  {
    id v21 = v20;
    unint64_t v35 = type metadata accessor for NSMutableDictionary();
    *(void *)&long long v34 = v21;
    outlined init with take of Any(&v34, v33);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v32 = v18;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = v32;
    unint64_t v36 = v32;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v34);
    outlined destroy of Any?((uint64_t)&v34);
    uint64_t v23 = v36;
  }
  id v24 = objc_msgSend(self, sel_sharedAnalytics);
  if (v24)
  {
    uint64_t v25 = v24;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v23);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v25, sel_logEventWithType_context_, 3700, isa);

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

ValueMetadata *type metadata accessor for LaunchAppMetricsLogger()
{
  return &type metadata for LaunchAppMetricsLogger;
}

unint64_t type metadata accessor for NSMutableDictionary()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableDictionary;
  if (!lazy cache variable for type metadata for NSMutableDictionary)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
  }
  return result;
}

uint64_t one-time initialization function for kLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v4 = a2[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a2, v3);

  return specialized LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(a1, (uint64_t)v5, v3, v4);
}

uint64_t closure #2 in LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  char v19 = *((unsigned char *)a1 + 32);
  char v9 = *((unsigned char *)a1 + 33);
  char v10 = *((unsigned char *)a1 + 34);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA050760;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x80000001BA06A0C0;
  uint64_t v12 = MEMORY[0x1E4FBB390];
  *(unsigned char *)(inited + 48) = v9;
  *(void *)(inited + 72) = v12;
  *(void *)(inited + 80) = 0xD000000000000014;
  uint64_t v13 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 88) = 0x80000001BA063BF0;
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = v5;
  *(void *)(inited + 120) = v13;
  *(void *)(inited + 128) = 0x6E65657263536E6FLL;
  *(void *)(inited + 136) = 0xE800000000000000;
  *(void *)(inited + 168) = v12;
  *(unsigned char *)(inited + 144) = v10;
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  if (v8)
  {
    uint64_t v24 = v13;
    *(void *)&long long v23 = v7;
    *((void *)&v23 + 1) = v8;
    outlined init with take of Any(&v23, v22);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v25 = v14;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, 0x69746E456B6E696CLL, 0xEE00657079547974, isUniquelyReferenced_nonNull_native);
    unint64_t v14 = v25;
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = v12;
  LOBYTE(v23) = v19;
  outlined init with take of Any(&v23, v22);
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v25 = v14;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, 0xD000000000000016, 0x80000001BA06A0E0, v16);
  unint64_t v17 = v25;
  swift_bridgeObjectRelease();
  *a4 = a2;
  a4[1] = a3;
  a4[2] = v17;
  return swift_bridgeObjectRetain();
}

uint64_t specialized LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  MEMORY[0x1F4188790](a1);
  uint64_t v156 = v7;
  uint64_t v8 = *(void (**)(void))(v7 + 16);
  uint64_t v157 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = v9;
  v8();
  char v10 = *(void **)v5;
  if (*(void *)v5)
  {
    uint64_t v11 = one-time initialization token for kLogger;
    id v12 = v10;
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)kLogger);
    uint64_t v15 = v12;
    uint64_t v165 = v14;
    char v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v163 = v5;
    v162 = v15;
    if (v18)
    {
      char v19 = (uint8_t *)swift_slowAlloc();
      id v20 = (void *)swift_slowAlloc();
      *(_DWORD *)char v19 = 138412290;
      uint64_t v176 = (uint64_t)v15;
      id v21 = v15;
      uint64_t v5 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v20 = v10;

      _os_log_impl(&dword_1B9C64000, v16, v17, "[LinkParseExpansion] Evaluating compatible Link actions for %@", v19, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }
    else
    {

      char v16 = v15;
    }

    if (*(unsigned char *)(v5 + 32))
    {
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        unint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v35 = 0;
        _os_log_impl(&dword_1B9C64000, v33, v34, "[LinkParseExpansion] Detected noEntity parse, using entities directly from SRR entity pool.", v35, 2u);
        MEMORY[0x1BA9E48C0](v35, -1, -1);
      }

      uint64_t v184 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(v158, a4);
    }
    else
    {
      uint64_t v27 = *(void *)(v5 + 16);
      uint64_t v28 = *(void *)(v27 + 16);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      BOOL v31 = os_log_type_enabled(v29, v30);
      if (v28)
      {
        if (v31)
        {
          unint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v32 = 0;
          _os_log_impl(&dword_1B9C64000, v29, v30, "[LinkParseExpansion] Detected parse with explicitly mentioned entity type.", v32, 2u);
          MEMORY[0x1BA9E48C0](v32, -1, -1);
        }

        uint64_t v184 = v27;
      }
      else
      {
        if (v31)
        {
          unint64_t v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v36 = 0;
          _os_log_impl(&dword_1B9C64000, v29, v30, "[LinkParseExpansion] Detected parse without explicitly mentioned entity type.", v36, 2u);
          MEMORY[0x1BA9E48C0](v36, -1, -1);
        }

        uint64_t v184 = *(void *)(v5 + 8);
      }
      swift_bridgeObjectRetain();
    }
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = MEMORY[0x1E4FBC840];
    if (v39)
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v176 = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
      uint64_t v43 = Dictionary.description.getter();
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      uint64_t v46 = v43;
      uint64_t v40 = MEMORY[0x1E4FBC840];
      uint64_t v179 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v45, &v176);
      uint64_t v5 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v37, v38, "[LinkParseExpansion] Considering salient entities types: %s", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v42, -1, -1);
      MEMORY[0x1BA9E48C0](v41, -1, -1);
    }

    uint64_t v47 = v162;
    uint64_t v48 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v182 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v183 = MEMORY[0x1E4FBC860];
    (*(void (**)(uint64_t, uint64_t))(a4 + 24))(v158, a4);
    uint64_t v49 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    swift_retain();
    uint64_t v167 = v49;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    unint64_t v51 = v177;
    if (v177)
    {
      uint64_t v52 = 0;
      uint64_t v53 = v176;
      uint64_t v54 = v178;
      *(void *)&long long v50 = 136315650;
      long long v161 = v50;
      uint64_t v160 = v40 + 8;
      while (1)
      {
        uint64_t v57 = *(void *)(v5 + 24);
        if (*(void *)(v57 + 16) && (specialized Set.contains(_:)(v53, v51, v57) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v63 = v182;
          unint64_t v64 = v51;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
          }
          unint64_t v66 = v63[2];
          unint64_t v65 = v63[3];
          if (v66 >= v65 >> 1) {
            uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v63);
          }
          v63[2] = v66 + 1;
          uint64_t v67 = &v63[2 * v66];
          v67[4] = v53;
          v67[5] = v64;
          uint64_t v182 = v63;
          goto LABEL_30;
        }
        swift_beginAccess();
        uint64_t v58 = v184;
        uint64_t v59 = *(void *)(v184 + 16);
        uint64_t v168 = v52;
        if (v59)
        {
          swift_bridgeObjectRetain();
          unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v51);
          if (v61)
          {
            uint64_t v62 = *(void *)(*(void *)(v58 + 56) + 8 * v60);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v62 = 0;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v62 = 0;
        }
        swift_endAccess();
        v185 = v48;
        uint64_t v186 = v48;
        uint64_t v68 = *(void *)(v54 + 16);
        uint64_t v169 = v53;
        if (!v68) {
          goto LABEL_80;
        }
        uint64_t v69 = v47;
        unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v69);
        if ((v71 & 1) == 0)
        {

LABEL_80:
          swift_bridgeObjectRelease();
          goto LABEL_81;
        }
        uint64_t v72 = *(void *)(*(void *)(v54 + 56) + 8 * v70);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        uint64_t v172 = *(void *)(v72 + 16);
        if (!v172) {
          goto LABEL_80;
        }
        unint64_t v166 = v51;
        uint64_t v171 = v72 + 32;
        uint64_t v170 = v62 + 56;
        uint64_t v159 = v72;
        swift_bridgeObjectRetain();
        uint64_t v73 = v48;
        uint64_t v74 = 0;
        uint64_t v173 = v73;
        do
        {
          uint64_t v76 = v171 + 40 * v74;
          uint64_t v77 = *(void *)v76;
          uint64_t v78 = *(void *)(v76 + 8);
          uint64_t v79 = *(void *)(v76 + 16);
          uint64_t v80 = *(void *)(v76 + 24);
          char v81 = *(unsigned char *)(v76 + 32);
          int v174 = *(unsigned __int8 *)(v76 + 33);
          LODWORD(v175) = *(unsigned __int8 *)(v76 + 34);
          if (v62 && v80)
          {
            if (*(void *)(v62 + 16))
            {
              Hasher.init(_seed:)();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              Swift::Int v82 = Hasher._finalize()();
              uint64_t v83 = -1 << *(unsigned char *)(v62 + 32);
              unint64_t v84 = v82 & ~v83;
              if ((*(void *)(v170 + ((v84 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v84))
              {
                int v85 = (void *)(*(void *)(v62 + 48) + 16 * v84);
                if (*v85 == v79 && v80 == v85[1]) {
                  goto LABEL_75;
                }
                uint64_t v164 = *(void *)(v62 + 48);
                if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                  goto LABEL_75;
                }
                uint64_t v87 = ~v83;
                unint64_t v88 = (v84 + 1) & v87;
                if ((*(void *)(v170 + ((v88 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v88))
                {
                  while (1)
                  {
                    uint64_t v89 = (void *)(v164 + 16 * v88);
                    BOOL v90 = *v89 == v79 && v80 == v89[1];
                    if (v90 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                      break;
                    }
                    unint64_t v88 = (v88 + 1) & v87;
                    if (((*(void *)(v170 + ((v88 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v88) & 1) == 0) {
                      goto LABEL_66;
                    }
                  }
LABEL_75:
                  swift_beginAccess();
                  uint64_t v96 = v186;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96[2] + 1, 1, v96);
                  }
                  unint64_t v98 = v96[2];
                  unint64_t v97 = v96[3];
                  if (v98 >= v97 >> 1) {
                    uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v97 > 1), v98 + 1, 1, v96);
                  }
                  v96[2] = v98 + 1;
                  int v75 = &v96[5 * v98];
                  v75[4] = v77;
                  v75[5] = v78;
                  v75[6] = v79;
                  v75[7] = v80;
                  *((unsigned char *)v75 + 64) = v81;
                  *((unsigned char *)v75 + 65) = v174;
                  *((unsigned char *)v75 + 66) = (_BYTE)v175;
                  uint64_t v186 = v96;
                  goto LABEL_49;
                }
              }
LABEL_66:
              if ((v81 & 1) == 0) {
                goto LABEL_75;
              }
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((v81 & 1) == 0) {
                goto LABEL_75;
              }
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v81 & 1) == 0) {
              goto LABEL_75;
            }
          }
          swift_beginAccess();
          uint64_t v91 = v185;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v173 = v91;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v173[2] + 1, 1, v173);
          }
          unint64_t v93 = v173[2];
          unint64_t v92 = v173[3];
          if (v93 >= v92 >> 1) {
            uint64_t v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v92 > 1), v93 + 1, 1, v173);
          }
          int v94 = v173;
          v173[2] = v93 + 1;
          int v95 = &v94[5 * v93];
          v95[4] = v77;
          v95[5] = v78;
          v95[6] = v79;
          v95[7] = v80;
          *((unsigned char *)v95 + 64) = v81;
          *((unsigned char *)v95 + 65) = v174;
          *((unsigned char *)v95 + 66) = (_BYTE)v175;
          v185 = v94;
LABEL_49:
          swift_endAccess();
          ++v74;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        while (v74 != v172);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v5 = v163;
        uint64_t v47 = v162;
        uint64_t v48 = (void *)MEMORY[0x1E4FBC860];
        unint64_t v51 = v166;
LABEL_81:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain_n();
        uint64_t v99 = Logger.logObject.getter();
        int v100 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v99, (os_log_type_t)v100))
        {
          int v174 = v100;
          os_log_t v175 = v99;
          uint64_t v101 = swift_slowAlloc();
          uint64_t v172 = swift_slowAlloc();
          os_log_t v181 = (os_log_t)v172;
          *(_DWORD *)uint64_t v101 = v161;
          swift_bridgeObjectRetain();
          *(void *)(v101 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v169, v51, (uint64_t *)&v181);
          unint64_t v166 = v51;
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v101 + 12) = 2080;
          swift_beginAccess();
          uint64_t v102 = v186;
          int64_t v103 = v186[2];
          if (v103)
          {
            uint64_t v180 = (uint64_t)v48;
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v103, 0);
            uint64_t v104 = v180;
            uint64_t v105 = (void **)(v102 + 7);
            do
            {
              uint64_t v107 = (uint64_t)*(v105 - 3);
              unint64_t v106 = (unint64_t)*(v105 - 2);
              int v108 = *v105;
              if (*v105)
              {
                uint64_t v109 = (uint64_t)*(v105 - 1);
                uint64_t v176 = (uint64_t)*(v105 - 3);
                unint64_t v177 = v106;
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                v110._uint64_t countAndFlagsBits = 60;
                v110._object = (void *)0xE100000000000000;
                String.append(_:)(v110);
                v111._uint64_t countAndFlagsBits = v109;
                v111._object = v108;
                String.append(_:)(v111);
                v112._uint64_t countAndFlagsBits = 62;
                v112._object = (void *)0xE100000000000000;
                String.append(_:)(v112);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                uint64_t v107 = v176;
                unint64_t v106 = v177;
              }
              else
              {
                swift_bridgeObjectRetain();
              }
              uint64_t v180 = v104;
              unint64_t v114 = *(void *)(v104 + 16);
              unint64_t v113 = *(void *)(v104 + 24);
              if (v114 >= v113 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v113 > 1, v114 + 1, 1);
                uint64_t v104 = v180;
              }
              v105 += 5;
              *(void *)(v104 + 16) = v114 + 1;
              uint64_t v115 = v104 + 16 * v114;
              *(void *)(v115 + 32) = v107;
              *(void *)(v115 + 40) = v106;
              --v103;
            }
            while (v103);
            swift_bridgeObjectRelease();
            uint64_t v48 = (void *)MEMORY[0x1E4FBC860];
          }
          else
          {
            uint64_t v104 = (uint64_t)v48;
          }
          uint64_t v176 = v104;
          uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          unint64_t v117 = lazy protocol witness table accessor for type [String] and conformance [A]();
          uint64_t v118 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v120 = v119;
          swift_bridgeObjectRelease();
          *(void *)(v101 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v120, (uint64_t *)&v181);
          swift_bridgeObjectRelease();
          *(_WORD *)(v101 + 22) = 2080;
          swift_beginAccess();
          uint64_t v121 = v185;
          int64_t v122 = v185[2];
          uint64_t v173 = v185;
          if (v122)
          {
            uint64_t v170 = v117;
            uint64_t v171 = v116;
            uint64_t v180 = (uint64_t)v48;
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v122, 0);
            uint64_t v123 = v180;
            uint64_t v124 = (void **)(v121 + 7);
            do
            {
              uint64_t v126 = (uint64_t)*(v124 - 3);
              unint64_t v125 = (unint64_t)*(v124 - 2);
              unint64_t v127 = *v124;
              if (*v124)
              {
                uint64_t v128 = (uint64_t)*(v124 - 1);
                uint64_t v176 = (uint64_t)*(v124 - 3);
                unint64_t v177 = v125;
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                v129._uint64_t countAndFlagsBits = 60;
                v129._object = (void *)0xE100000000000000;
                String.append(_:)(v129);
                v130._uint64_t countAndFlagsBits = v128;
                v130._object = v127;
                String.append(_:)(v130);
                v131._uint64_t countAndFlagsBits = 62;
                v131._object = (void *)0xE100000000000000;
                String.append(_:)(v131);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                uint64_t v126 = v176;
                unint64_t v125 = v177;
              }
              else
              {
                swift_bridgeObjectRetain();
              }
              uint64_t v180 = v123;
              unint64_t v133 = *(void *)(v123 + 16);
              unint64_t v132 = *(void *)(v123 + 24);
              if (v133 >= v132 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1);
                uint64_t v123 = v180;
              }
              v124 += 5;
              *(void *)(v123 + 16) = v133 + 1;
              uint64_t v134 = v123 + 16 * v133;
              *(void *)(v134 + 32) = v126;
              *(void *)(v134 + 40) = v125;
              --v122;
            }
            while (v122);
            swift_bridgeObjectRelease();
            uint64_t v48 = (void *)MEMORY[0x1E4FBC860];
          }
          else
          {
            uint64_t v123 = (uint64_t)v48;
          }
          uint64_t v176 = v123;
          uint64_t v135 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v137 = v136;
          swift_bridgeObjectRelease();
          *(void *)(v101 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v137, (uint64_t *)&v181);
          swift_bridgeObjectRelease();
          os_log_t v138 = v175;
          _os_log_impl(&dword_1B9C64000, v175, (os_log_type_t)v174, "[LinkParseExpansion] %s Compatible actions: [%s] Incompatible actions: [%s]", (uint8_t *)v101, 0x20u);
          uint64_t v139 = v172;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v139, -1, -1);
          MEMORY[0x1BA9E48C0](v101, -1, -1);

          uint64_t v5 = v163;
          uint64_t v47 = v162;
          uint64_t v52 = v168;
          unint64_t v51 = v166;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v52 = v168;
        }
        swift_bridgeObjectRetain();
        uint64_t v55 = swift_bridgeObjectRetain();
        uint64_t v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_SS11appBundleId_SDySSypG8userDatats5NeverOTg504_s14de9Runtime16gh72FilterV010compatibleD7Actions13parseMetadata16expansionContextSaySS11appkL76_SDySSypG8userDatatGAA0d5ParseJ0V_AA0dL9Providing_ptFSSAG_AhItAA0deJ0VXEfU0_SSTf1cn_nTf4ng_n(v55, v169, v51);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        specialized Array.append<A>(contentsOf:)(v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_30:
        dispatch thunk of _AnyIteratorBoxBase.next()();
        uint64_t v53 = v176;
        unint64_t v51 = v177;
        uint64_t v54 = v178;
        if (!v177)
        {
          uint64_t v48 = v182;
          break;
        }
      }
    }
    swift_release_n();
    if (v48[2])
    {
      unint64_t v140 = *(void **)(v5 + 8);
      v185 = *(void **)(v5 + 16);
      uint64_t v186 = v140;
      unint64_t v141 = v47;
      outlined retain of [String : Set<String>]((uint64_t)&v186);
      outlined retain of [String : Set<String>]((uint64_t)&v185);
      swift_bridgeObjectRetain();
      v142 = v141;
      outlined retain of [String : Set<String>]((uint64_t)&v186);
      outlined retain of [String : Set<String>]((uint64_t)&v185);
      swift_bridgeObjectRetain();
      v143 = Logger.logObject.getter();
      os_log_type_t v144 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v143, v144))
      {
        uint64_t v145 = swift_slowAlloc();
        os_log_t v175 = (os_log_t)swift_slowAlloc();
        os_log_t v181 = v175;
        *(_DWORD *)uint64_t v145 = 136315394;
        swift_beginAccess();
        uint64_t v146 = swift_bridgeObjectRetain();
        uint64_t v147 = MEMORY[0x1BA9E3080](v146, MEMORY[0x1E4FBB1A0]);
        unint64_t v149 = v148;
        swift_bridgeObjectRelease();
        uint64_t v180 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v147, v149, (uint64_t *)&v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v145 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v150 = Set.description.getter();
        unint64_t v152 = v151;
        swift_bridgeObjectRelease();
        uint64_t v180 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v150, v152, (uint64_t *)&v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        outlined release of [String : Set<String>]((uint64_t)&v186);
        outlined release of [String : Set<String>]((uint64_t)&v185);

        swift_bridgeObjectRelease();
        outlined release of [String : Set<String>]((uint64_t)&v186);
        outlined release of [String : Set<String>]((uint64_t)&v185);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v143, v144, "[LinkParseExpansion] Skipped %s as the parse explicitly refers to %s", (uint8_t *)v145, 0x16u);
        os_log_t v153 = v175;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v153, -1, -1);
        MEMORY[0x1BA9E48C0](v145, -1, -1);
        swift_bridgeObjectRelease();
      }
      else
      {

        outlined release of [String : Set<String>]((uint64_t)&v186);
        outlined release of [String : Set<String>]((uint64_t)&v185);

        swift_bridgeObjectRelease();
        outlined release of [String : Set<String>]((uint64_t)&v186);
        outlined release of [String : Set<String>]((uint64_t)&v185);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v183;
  }
  else
  {
    if (one-time initialization token for kLogger != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)kLogger);
    long long v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl(&dword_1B9C64000, v23, v24, "[LinkParseExpansion] Skipping parse expansion as could not find systemProtocol from parse.", v25, 2u);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }

    uint64_t v26 = MEMORY[0x1E4FBC860];
  }
  (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v158);
  return v26;
}

ValueMetadata *type metadata accessor for LinkActionFilter()
{
  return &type metadata for LinkActionFilter;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg504_s14d133KitRuntime27LinkExpansionContextBuilderC40extractOnScreenBundleIDsFromRRCandidates33_96F732C182F07CCE7D79D4AD573D548BLLyShySSGSay0A28efg7Model11I60VGFSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v20 = type metadata accessor for RREntity();
  uint64_t v3 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    v18[1] = v1;
    uint64_t v21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v8 = *(void *)(type metadata accessor for RRCandidate() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v19 = *(void *)(v8 + 72);
    char v10 = (void (**)(char *, uint64_t))(v3 + 8);
    do
    {
      RRCandidate.entity.getter();
      uint64_t v11 = RREntity.id.getter();
      uint64_t v13 = v12;
      (*v10)(v5, v20);
      uint64_t v7 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v21;
      }
      unint64_t v15 = *(void *)(v7 + 16);
      unint64_t v14 = *(void *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v7 = v21;
      }
      *(void *)(v7 + 16) = v15 + 1;
      uint64_t v16 = v7 + 16 * v15;
      *(void *)(v16 + 32) = v11;
      *(void *)(v16 + 40) = v13;
      v9 += v19;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySSSDySo16LNSystemProtocolCSay14SiriKitRuntime18LinkActionMetadataVGG_G_SSs5NeverOTg504_s14gh9Runtime20J59ExpansionContextV07SessionF0C16debugDescriptionSSvgS2SXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v28 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v28;
  uint64_t result = specialized _NativeDictionary.startIndex.getter(a1);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  int64_t v22 = v1;
  int v23 = v5;
  uint64_t v24 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v25 = v7;
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v6);
    uint64_t v26 = *v12;
    uint64_t v27 = v12[1];
    swift_bridgeObjectRetain_n();
    v13._uint64_t countAndFlagsBits = 0x5D2E2E2E5B203ALL;
    v13._object = (void *)0xE700000000000000;
    String.append(_:)(v13);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v15 = *(void *)(v28 + 16);
    unint64_t v14 = *(void *)(v28 + 24);
    if (v15 >= v14 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    }
    *(void *)(v28 + 16) = v15 + 1;
    uint64_t v16 = v28 + 16 * v15;
    *(void *)(v16 + 32) = v26;
    *(void *)(v16 + 40) = v27;
    int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v17 = *(void *)(v24 + 8 * v11);
    if ((v17 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v23;
    if (*(_DWORD *)(a1 + 36) != v23) {
      goto LABEL_27;
    }
    unint64_t v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      int64_t v9 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v22;
    }
    else
    {
      unint64_t v19 = v11 + 1;
      unint64_t v20 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v22;
      if (v11 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            unint64_t v21 = *(void *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              unint64_t v19 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v25 + 1;
    uint64_t v6 = v9;
    if (v25 + 1 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo12LNViewActionCG_SSs5NeverOTg5059_s14SiriKitRuntime27LinkExpansionContextBuilderC26fetchViewe82Identifiers33_96F732C182F07CCE7D79D4AD573D548BLL3forShySSGSS_tYaFAGyYaKXEfU_SSSo06D56J0Ccfu_33_3bab3ebd54a35cd855c23bddc349bd1fAISSTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      return v3;
    }
    uint64_t v15 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v15;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x1BA9E3990](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_actionIdentifier);
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      unint64_t v13 = *(void *)(v15 + 16);
      unint64_t v12 = *(void *)(v15 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      ++v5;
      *(void *)(v15 + 16) = v13 + 1;
      uint64_t v14 = v15 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      if (v2 == v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall LinkExpansionContextBuilder.newSessionStarted()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = one-time initialization token for shared;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  uint64_t v7 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  id v8 = (void *)swift_allocObject();
  v8[2] = v6;
  v8[3] = v7;
  v8[4] = v0;
  swift_retain();
  *(void *)(v0 + 104) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime20LinkExpansionContextV07SessionI0C_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in LinkExpansionContextBuilder.newSessionStarted(), (uint64_t)v8);
  swift_release();
}

Swift::Void __swiftcall LinkExpansionContextBuilder.newTurnStarted()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)kLogger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[LinkExpansionContext] New turn started", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  swift_beginAccess();
  *(void *)(v1 + 16) = 0;
  swift_release();
}

uint64_t LinkExpansionContextBuilder.build(rrCandidates:)(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v2[14] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](LinkExpansionContextBuilder.build(rrCandidates:), v4, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](LinkExpansionContextBuilder.build(rrCandidates:), v2, 0);
}

uint64_t LinkExpansionContextBuilder.build(rrCandidates:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[10];
  id v2 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v3 = *(void *)(v1 + 104);
  v0[15] = v3;
  if (v3)
  {
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[16] = v4;
    uint64_t v5 = type metadata accessor for LinkExpansionContext.SessionContext();
    *uint64_t v4 = v0;
    v4[1] = LinkExpansionContextBuilder.build(rrCandidates:);
    return MEMORY[0x1F4187DC0](v0 + 8, v3, v5);
  }
  else
  {
    swift_release();
    if (one-time initialization token for kLogger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)kLogger);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1B9C64000, v7, v8, "[LinkExpansionContext] Trying to build LinkExpansionContext before newSessionStarted was called! Returning empty context.", v9, 2u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }

    if (one-time initialization token for emptyContext != -1) {
      swift_once();
    }
    uint64_t v11 = static LinkExpansionContext.emptyContext;
    uint64_t v10 = *(void *)algn_1E9F3D518;
    uint64_t v13 = v0[12];
    uint64_t v12 = v0[13];
    uint64_t v14 = v0[11];
    swift_retain();
    swift_retain();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v15(v11, v10);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](LinkExpansionContextBuilder.build(rrCandidates:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = v0[10];
  v0[17] = v0[8];
  swift_beginAccess();
  id v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_retain();
    swift_release();
    uint64_t v3 = v0[17];
    uint64_t v5 = v0[12];
    uint64_t v4 = v0[13];
    uint64_t v6 = v0[11];
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v7(v3, v2);
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v0[18] = v9;
    *uint64_t v9 = v0;
    v9[1] = LinkExpansionContextBuilder.build(rrCandidates:);
    uint64_t v10 = v0[9];
    return LinkExpansionContextBuilder.collectTurnContext(rrCandidates:)(v10);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[19];
  id v2 = v0[10];
  swift_release();
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = v0[19];
  swift_retain();
  swift_release();
  uint64_t v4 = v0[17];
  uint64_t v6 = v0[12];
  uint64_t v5 = v0[13];
  uint64_t v7 = v0[11];
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  os_log_type_t v8 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v8(v4, v3);
}

uint64_t *LinkExpansionContext.emptyContext.unsafeMutableAddressor()
{
  if (one-time initialization token for emptyContext != -1) {
    swift_once();
  }
  return &static LinkExpansionContext.emptyContext;
}

uint64_t RRCandidate.isOnScreen.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1F4188790](v0 - 8);
  Swift::String v112 = (char *)&v93 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for RRMetadata();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v115 = (char *)&v93 - v7;
  uint64_t v103 = type metadata accessor for RRDataSourceMetadataValue();
  uint64_t v8 = *(void *)(v103 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v103);
  int v94 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  int v95 = (char *)&v93 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  Swift::String v111 = (char *)&v93 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v101 = (char *)&v93 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  int v100 = (char *)&v93 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v96 = (char *)&v93 - v20;
  MEMORY[0x1F4188790](v19);
  unint64_t v97 = (char *)&v93 - v21;
  uint64_t v22 = type metadata accessor for RREntity();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  RRCandidate.entity.getter();
  uint64_t v26 = RREntity.metadata.getter();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v102 = v8;
  if (v27)
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    unint64_t v28 = v3 + 16;
    uint64_t v30 = v26;
    unint64_t v31 = v26 + ((*(unsigned __int8 *)(v28 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64));
    uint64_t v32 = *(void *)(v28 + 56);
    uint64_t v104 = v29;
    uint64_t v105 = v32;
    int v108 = (uint64_t (**)(char *, uint64_t))(v28 + 72);
    uint64_t v33 = (void (**)(char *, uint64_t))(v28 - 8);
    LODWORD(v107) = *MEMORY[0x1E4FA3DB0];
    unint64_t v106 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    uint64_t v99 = (void (**)(char *, uint64_t))(v28 + 80);
    unint64_t v113 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    os_log_type_t v34 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v93 = v30;
    swift_bridgeObjectRetain();
    unint64_t v114 = MEMORY[0x1E4FBC860];
    uint64_t v35 = v103;
    unint64_t v109 = v28;
    Swift::String v110 = v6;
    unint64_t v98 = v34;
    do
    {
      unint64_t v36 = v115;
      uint64_t v37 = v104;
      v104(v115, (char *)v31, v2);
      v37(v6, v36, v2);
      int v38 = (*v108)(v6, v2);
      if (v38 == v107)
      {
        (*v99)(v6, v2);
        BOOL v39 = *v113;
        uint64_t v40 = v27;
        uint64_t v41 = v33;
        uint64_t v42 = v101;
        (*v113)(v101, v6, v35);
        uint64_t v43 = (uint64_t)v112;
        unint64_t v44 = v42;
        uint64_t v33 = v41;
        uint64_t v27 = v40;
        v39(v112, v44, v35);
        os_log_type_t v34 = v98;
        (*v106)(v43, 0, 1, v35);
        (*v33)(v115, v2);
      }
      else
      {
        unint64_t v45 = *v33;
        (*v33)(v6, v2);
        uint64_t v43 = (uint64_t)v112;
        (*v106)((uint64_t)v112, 1, 1, v35);
        v45(v115, v2);
      }
      int v46 = (*v34)(v43, 1, v35);
      uint64_t v47 = v43;
      if (v46 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        uint64_t v6 = v110;
      }
      else
      {
        uint64_t v48 = *v113;
        uint64_t v49 = v100;
        (*v113)(v100, (char *)v47, v35);
        v48(v111, v49, v35);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v6 = v110;
        if (isUniquelyReferenced_nonNull_native) {
          unint64_t v51 = v114;
        }
        else {
          unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v114 + 16) + 1, 1, v114);
        }
        unint64_t v53 = *(void *)(v51 + 16);
        unint64_t v52 = *(void *)(v51 + 24);
        if (v53 >= v52 >> 1) {
          unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v51);
        }
        *(void *)(v51 + 16) = v53 + 1;
        uint64_t v35 = v103;
        unint64_t v54 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
        unint64_t v114 = v51;
        v48((char *)(v51 + v54 + *(void *)(v102 + 72) * v53), v111, v103);
      }
      v31 += v105;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease_n();
    uint64_t v8 = v102;
    unint64_t v55 = v114;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v55 = MEMORY[0x1E4FBC860];
    uint64_t v35 = v103;
  }
  uint64_t v56 = *(char **)(v8 + 104);
  uint64_t v57 = v97;
  ((void (*)(char *, void, uint64_t))v56)(v97, *MEMORY[0x1E4FA3DE0], v35);
  uint64_t v58 = *(void *)(v55 + 16);
  unint64_t v114 = v55;
  if (!v58)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v57, v103);
    goto LABEL_28;
  }
  Swift::String v110 = v56;
  Swift::String v111 = (char *)(v8 + 104);
  unint64_t v59 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v60 = *(char **)(v8 + 16);
  char v61 = v96;
  unint64_t v109 = v55 + v59;
  Swift::String v112 = v60;
  ((void (*)(char *))v60)(v96);
  uint64_t v62 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, MEMORY[0x1E4FA3DE8]);
  swift_bridgeObjectRetain();
  unint64_t v113 = (void (**)(char *, char *, uint64_t))v62;
  char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v64 = v35;
  unint64_t v65 = v61;
  uint64_t v115 = *(char **)(v8 + 8);
  ((void (*)(char *, uint64_t))v115)(v61, v64);
  if ((v63 & 1) == 0)
  {
    if (v58 != 1)
    {
      uint64_t v107 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      int v108 = (uint64_t (**)(char *, uint64_t))v59;
      uint64_t v68 = *(void *)(v8 + 72);
      unint64_t v69 = v114 + v68 + v59;
      uint64_t v70 = 1;
      char v71 = (uint64_t (*)(char *, unint64_t, uint64_t))v112;
      uint64_t v72 = v103;
      while (1)
      {
        uint64_t result = v71(v65, v69, v72);
        uint64_t v74 = v70 + 1;
        if (__OFADD__(v70, 1)) {
          break;
        }
        char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v76 = v65;
        char v77 = v75;
        ((void (*)(char *, uint64_t))v115)(v76, v72);
        if (v77)
        {
          unint64_t v55 = v114;
          swift_bridgeObjectRelease();
          unint64_t v66 = v95;
          uint64_t v67 = v94;
          uint64_t v8 = v102;
          uint64_t v57 = v97;
          unint64_t v59 = (unint64_t)v108;
          goto LABEL_30;
        }
        ++v70;
        v69 += v68;
        unint64_t v65 = v96;
        if (v74 == v58)
        {
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v115)(v97, v103);
          goto LABEL_28;
        }
      }
      __break(1u);
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v115)(v57, v103);
LABEL_28:
    uint64_t v78 = 0;
LABEL_43:
    swift_bridgeObjectRelease();
    return v78;
  }
  swift_bridgeObjectRelease();
  unint64_t v66 = v95;
  uint64_t v67 = v94;
LABEL_30:
  uint64_t v79 = v57;
  uint64_t v80 = v103;
  char v81 = v115;
  ((void (*)(char *, uint64_t))v115)(v79, v103);
  ((void (*)(char *, void, uint64_t))v110)(v66, *MEMORY[0x1E4FA3DD0], v80);
  uint64_t v82 = *(void *)(v55 + 16);
  if (!v82)
  {
    uint64_t v78 = 1;
LABEL_42:
    ((void (*)(char *, uint64_t))v81)(v66, v103);
    goto LABEL_43;
  }
  ((void (*)(char *, unint64_t, uint64_t))v112)(v67, v109, v80);
  swift_bridgeObjectRetain();
  uint64_t v83 = v67;
  char v84 = dispatch thunk of static Equatable.== infix(_:_:)();
  ((void (*)(char *, uint64_t))v81)(v83, v80);
  if (v84)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    uint64_t v78 = 0;
    goto LABEL_41;
  }
  if (v82 == 1)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v78 = 1;
LABEL_41:
    unint64_t v66 = v95;
    goto LABEL_42;
  }
  uint64_t v85 = *(void *)(v8 + 72);
  uint64_t v86 = v114 + v85 + v59;
  uint64_t v87 = 1;
  uint64_t v88 = v103;
  while (1)
  {
    uint64_t v89 = v94;
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v112)(v94, v86, v88);
    uint64_t v90 = v87 + 1;
    if (__OFADD__(v87, 1)) {
      break;
    }
    char v91 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v92 = v89;
    char v81 = v115;
    ((void (*)(char *, uint64_t))v115)(v92, v88);
    if (v91) {
      goto LABEL_40;
    }
    ++v87;
    v86 += v85;
    if (v90 == v82) {
      goto LABEL_39;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t RRCandidate.isCommonApp.getter()
{
  uint64_t v0 = type metadata accessor for RREntity();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v4 = UsoTask.verbString.getter();
  uint64_t v6 = v5;
  swift_release();
  if (one-time initialization token for kUsoCommonAppEntityName != -1) {
    swift_once();
  }
  if (v4 == kUsoCommonAppEntityName._countAndFlagsBits && v6 == kUsoCommonAppEntityName._object) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void *LinkExpansionContextBuilder.__allocating_init(metadataProvider:viewActionsProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a2, v11);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = specialized LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)((uint64_t)v9, (uint64_t)v15, v4, v6, v11, v5, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v17;
}

uint64_t LinkActionMetadata.logDescription.getter()
{
  long long v10 = v0[1];
  char v11 = *((unsigned char *)v0 + 32);
  outlined init with take of String?((uint64_t)&v10, (uint64_t)v12);
  outlined init with take of String?((uint64_t)v12, (uint64_t)&v13);
  uint64_t v1 = v14;
  if (v14)
  {
    uint64_t v2 = v13;
    long long v9 = *v0;
    uint64_t v8 = v9;
    outlined retain of String((uint64_t)&v9);
    v3._uint64_t countAndFlagsBits = 60;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = v2;
    v4._object = v1;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 62;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    return v8;
  }
  else
  {
    uint64_t v6 = *(void *)v0;
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t one-time initialization function for kUsoCommonAppEntityName()
{
  uint64_t result = MEMORY[0x1BA9DE8B0](0xD000000000000012, 0x80000001BA06A3C0);
  if (v3)
  {
    uint64_t v4 = v1;
    Swift::String v5 = v2;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    Swift::String v5 = (void *)0xEA00000000007070;
    uint64_t v4 = 0x415F6E6F6D6D6F63;
  }
  kUsoCommonAppEntityName._uint64_t countAndFlagsBits = v4;
  kUsoCommonAppEntityName._object = v5;
  return result;
}

uint64_t LinkActionMetadata.linkActionId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LinkActionMetadata.entityTypeMetadata.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LinkActionMetadata.defaultAction.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t LinkActionMetadata.onScreen.getter()
{
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t LinkActionMetadata.onScreen.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 34) = result;
  return result;
}

uint64_t (*LinkActionMetadata.onScreen.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

void __swiftcall LinkActionMetadata.init(linkActionId:entityTypeMetadata:defaultAction:onScreen:)(SiriKitRuntime::LinkActionMetadata *__return_ptr retstr, Swift::String linkActionId, SiriKitRuntime::EntityTypeMetadata entityTypeMetadata, Swift::Bool defaultAction, Swift::Bool onScreen)
{
  retstr->linkActionId = linkActionId;
  retstr->entityTypeMetadata = entityTypeMetadata;
  retstr->defaultAction = defaultAction;
  retstr->onScreen = onScreen;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LinkActionMetadata(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(_DWORD *)((char *)v6 + 15) = *(_DWORD *)((char *)a1 + 31);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(_DWORD *)((char *)v8 + 15) = *(_DWORD *)((char *)a2 + 31);
  return specialized static LinkActionMetadata.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t *LinkExpansionContext.SessionContext.emptySessionContext.unsafeMutableAddressor()
{
  if (one-time initialization token for emptySessionContext != -1) {
    swift_once();
  }
  return &static LinkExpansionContext.SessionContext.emptySessionContext;
}

uint64_t *LinkExpansionContext.TurnContext.emptyTurnContext.unsafeMutableAddressor()
{
  if (one-time initialization token for emptyTurnContext != -1) {
    swift_once();
  }
  return &static LinkExpansionContext.TurnContext.emptyTurnContext;
}

uint64_t static LinkExpansionContext.emptyContext.getter()
{
  if (one-time initialization token for emptyContext != -1) {
    swift_once();
  }
  uint64_t v0 = static LinkExpansionContext.emptyContext;
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t LinkExpansionContext.SessionContext.__allocating_init(linkActionMetadata:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t LinkExpansionContext.SessionContext.init(linkActionMetadata:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t one-time initialization function for emptySessionContext()
{
  type metadata accessor for LinkExpansionContext.SessionContext();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static LinkExpansionContext.SessionContext.emptySessionContext = result;
  return result;
}

uint64_t static LinkExpansionContext.SessionContext.emptySessionContext.getter()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for emptySessionContext);
}

unint64_t LinkExpansionContext.SessionContext.debugDescription.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySSSDySo16LNSystemProtocolCSay14SiriKitRuntime18LinkActionMetadataVGG_G_SSs5NeverOTg504_s14gh9Runtime20J59ExpansionContextV07SessionF0C16debugDescriptionSSvgS2SXEfU_Tf1cn_n(v0);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = MEMORY[0x1BA9E3080](v1, MEMORY[0x1E4FBB1A0]);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000027;
}

uint64_t LinkExpansionContext.SessionContext.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LinkExpansionContext.SessionContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkExpansionContext.SessionContext()
{
  return LinkExpansionContext.SessionContext.debugDescription.getter();
}

uint64_t LinkExpansionContext.TurnContext.onScreenActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkExpansionContext.TurnContext.onScreenAppBundleIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkExpansionContext.TurnContext.onScreenEntityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

void *LinkExpansionContext.TurnContext.__allocating_init(onScreenActions:onScreenAppBundleIds:onScreenEntityTypes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void *LinkExpansionContext.TurnContext.init(onScreenActions:onScreenAppBundleIds:onScreenEntityTypes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

void *one-time initialization function for emptyTurnContext()
{
  type metadata accessor for LinkExpansionContext.TurnContext();
  uint64_t result = (void *)swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4FBC868];
  uint64_t v2 = MEMORY[0x1E4FBC870];
  result[2] = MEMORY[0x1E4FBC868];
  result[3] = v2;
  result[4] = v1;
  static LinkExpansionContext.TurnContext.emptyTurnContext = (uint64_t)result;
  return result;
}

uint64_t static LinkExpansionContext.TurnContext.emptyTurnContext.getter()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for emptyTurnContext);
}

uint64_t LinkExpansionContext.TurnContext.debugDescription.getter()
{
  _StringGuts.grow(_:)(58);
  v0._uint64_t countAndFlagsBits = 0xD000000000000022;
  v0._object = (void *)0x80000001BA06A150;
  String.append(_:)(v0);
  swift_bridgeObjectRetain();
  uint64_t v1 = Set.description.getter();
  Swift::String v3 = v2;
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001BA06A180;
  v5._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  uint64_t v6 = Dictionary.description.getter();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t LinkExpansionContext.TurnContext.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LinkExpansionContext.TurnContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkExpansionContext.TurnContext()
{
  return LinkExpansionContext.TurnContext.debugDescription.getter();
}

uint64_t LinkExpansionContext.LinkActionMetadataView.next()()
{
  uint64_t v1 = v0;
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  if (v5 >= *(void *)(v4 + 16)) {
    return v2;
  }
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = v4 + 16 * v5;
  uint64_t v2 = *(void *)(v6 + 32);
  unint64_t v3 = *(void *)(v6 + 40);
  uint64_t v7 = *(void *)(v0[1] + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (!v8)
  {
LABEL_9:
    if (one-time initialization token for kLogger == -1)
    {
LABEL_10:
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)kLogger);
      swift_bridgeObjectRetain();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v23 = v21;
        *(_DWORD *)uint64_t v20 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v3, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v18, v19, "Could not find action metadata for %s in sessionContext! The sessionContext must have been mutated. Ending iteration of action metadata early.", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v21, -1, -1);
        MEMORY[0x1BA9E48C0](v20, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return 0;
    }
LABEL_18:
    swift_once();
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v3);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*v1 + 16);
  uint64_t v13 = *(void *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13 && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v3), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(*(void *)(v12 + 56) + 8 * v14);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v16 = MEMORY[0x1E4FBC870];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.mapValues<A>(_:)(v11, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v1[3] = v5 + 1;
  return v2;
}

__n128 protocol witness for Sequence.makeIterator() in conformance LinkExpansionContext.LinkActionMetadataView@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  unint64_t v3 = v1[1].n128_u64[1];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = v3;
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance LinkExpansionContext.LinkActionMetadataView()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance LinkExpansionContext.LinkActionMetadataView()
{
  uint64_t v0 = specialized _copySequenceToContiguousArray<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance LinkExpansionContext.LinkActionMetadataView(void *a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

void *specialized Sequence._copyContents(initializing:)(void *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = result;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_11:
    *uint64_t v7 = a4;
    v7[1] = a5;
    v7[2] = a6;
    v7[3] = a7;
    return (void *)v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v9 = a2;
    uint64_t v10 = LinkExpansionContext.LinkActionMetadataView.next()();
    uint64_t v13 = 0;
    if (v11)
    {
      while (1)
      {
        *unint64_t v9 = v10;
        v9[1] = v11;
        v9[2] = v12;
        if (v8 - 1 == v13) {
          break;
        }
        uint64_t v10 = LinkExpansionContext.LinkActionMetadataView.next()();
        v9 += 3;
        ++v13;
        if (!v11) {
          goto LABEL_7;
        }
      }
      a4 = v14;
      a5 = v15;
    }
    else
    {
LABEL_7:
      a4 = v14;
      a5 = v15;
      uint64_t v8 = v13;
    }
    a6 = v16;
    a7 = v17;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance LinkExpansionContext.LinkActionMetadataView()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t protocol witness for IteratorProtocol.next() in conformance LinkExpansionContext.LinkActionMetadataView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LinkExpansionContext.LinkActionMetadataView.next()();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t LinkExpansionContext.debugDescription.getter()
{
  _StringGuts.grow(_:)(55);
  v0._uint64_t countAndFlagsBits = 0xD000000000000021;
  v0._object = (void *)0x80000001BA06A1A0;
  String.append(_:)(v0);
  type metadata accessor for LinkExpansionContext.TurnContext();
  swift_retain();
  v1._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000001BA06A1D0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v2);
  type metadata accessor for LinkExpansionContext.SessionContext();
  swift_retain();
  v3._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t LinkExpansionContext.salientAppBundleIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkExpansionContext.onScreenEntityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

void *LinkExpansionContext.actionMetadata.getter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  swift_retain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SequenceBox<LinkExpansionContext.LinkActionMetadataView>);
  uint64_t result = (void *)swift_allocObject();
  result[2] = a2;
  result[3] = a1;
  result[4] = v5;
  result[5] = 0;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkExpansionContext()
{
  return LinkExpansionContext.debugDescription.getter();
}

uint64_t protocol witness for LinkContextProviding.salientAppBundleIds.getter in conformance LinkExpansionContext()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for LinkContextProviding.onScreenEntityTypes.getter in conformance LinkExpansionContext()
{
  return swift_bridgeObjectRetain();
}

void *protocol witness for LinkContextProviding.actionMetadata.getter in conformance LinkExpansionContext()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  swift_retain();
  swift_retain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SequenceBox<LinkExpansionContext.LinkActionMetadataView>);
  uint64_t result = (void *)swift_allocObject();
  result[2] = v2;
  result[3] = v1;
  result[4] = v4;
  result[5] = 0;
  return result;
}

uint64_t one-time initialization function for appsDenyList()
{
  uint64_t v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for appsDenyList);
  swift_arrayDestroy();
  uint64_t v1 = specialized Set.union<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for appsDenyList, v0);
  uint64_t result = swift_arrayDestroy();
  static LinkExpansionContextBuilder.appsDenyList = v1;
  return result;
}

uint64_t *LinkExpansionContextBuilder.appsDenyList.unsafeMutableAddressor()
{
  if (one-time initialization token for appsDenyList != -1) {
    swift_once();
  }
  return &static LinkExpansionContextBuilder.appsDenyList;
}

uint64_t static LinkExpansionContextBuilder.appsDenyList.getter()
{
  if (one-time initialization token for appsDenyList != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t LinkExpansionContextBuilder.linkExpansionTurnContext.getter()
{
  return swift_retain();
}

uint64_t LinkExpansionContextBuilder.linkExpansionTurnContext.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*LinkExpansionContextBuilder.linkExpansionTurnContext.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t LinkExpansionContextBuilder.metadataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 24, a1);
}

uint64_t LinkExpansionContextBuilder.viewActionsProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 64, a1);
}

void *LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  uint64_t v18 = specialized LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)((uint64_t)v10, (uint64_t)v16, v3, v7, v12, v6, v13);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v18;
}

uint64_t closure #1 in LinkExpansionContextBuilder.newSessionStarted()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a1;
  v4[8] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  v4[9] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in LinkExpansionContextBuilder.newSessionStarted(), v5, 0);
}

uint64_t closure #1 in LinkExpansionContextBuilder.newSessionStarted()()
{
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[10] = __swift_project_value_buffer(v1, (uint64_t)kLogger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[LinkExpansionContext] Collecting SessionContext", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = (void *)v0[8];

  uint64_t v6 = v5 + 3;
  uint64_t v7 = v5[6];
  uint64_t v8 = v5[7];
  __swift_project_boxed_opaque_existential_1(v6, v7);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8 + 8) + **(int **)(v8 + 8));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[11] = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in LinkExpansionContextBuilder.newSessionStarted();
  return v11(v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v13 = v0;
  uint64_t v1 = *(void *)(v0 + 96);
  swift_release();
  uint64_t v2 = specialized LinkExpansionContextBuilder.extractActionMetadata(allLinkActionsMetadata:)(v1);
  swift_bridgeObjectRelease();
  type metadata accessor for LinkExpansionContext.SessionContext();
  os_log_type_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v12 = v7;
    *(void *)(v0 + 40) = v3;
    swift_retain();
    uint64_t v8 = String.init<A>(reflecting:)();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v4, v5, "[LinkExpansionContext] SessionContext: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  **(void **)(v0 + 56) = v3;
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t closure #1 in LinkExpansionContextBuilder.newSessionStarted()(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in LinkExpansionContextBuilder.newSessionStarted(), v2, 0);
}

uint64_t sub_1B9F3BE04()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in LinkExpansionContextBuilder.newSessionStarted()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in LinkExpansionContextBuilder.newSessionStarted()(a1, v4, v5, v6);
}

uint64_t LinkExpansionContextBuilder.collectTurnContext(rrCandidates:)(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = static MessageBusActor.shared;
  v2[9] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](LinkExpansionContextBuilder.collectTurnContext(rrCandidates:), v3, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](LinkExpansionContextBuilder.collectTurnContext(rrCandidates:), v2, 0);
}

uint64_t LinkExpansionContextBuilder.collectTurnContext(rrCandidates:)()
{
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[10] = __swift_project_value_buffer(v1, (uint64_t)kLogger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[LinkExpansionContext] Collecting TurnContext", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = v0[7];

  uint64_t v6 = specialized LinkExpansionContextBuilder.extractOnScreenBundleIDsFromRRCandidates(_:)(v5);
  v0[11] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[12] = v7;
  *uint64_t v7 = v0;
  v7[1] = LinkExpansionContextBuilder.collectTurnContext(rrCandidates:);
  return LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(v6);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void *);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  uint64_t v1 = v0;
  os_log_type_t v3 = v0 + 7;
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[13];
  uint64_t v5 = v3[4];
  swift_release();
  uint64_t v6 = specialized LinkExpansionContextBuilder.extractOnScreenEntityTypesFromRRCandidates(_:)(v2);
  type metadata accessor for LinkExpansionContext.TurnContext();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v6;
  swift_retain_n();
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v16 = v11;
    v1[5] = v7;
    swift_retain();
    uint64_t v12 = String.init<A>(reflecting:)();
    v1[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v8, v9, "[LinkExpansionContext] TurnContext: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v11, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v14 = (uint64_t (*)(void *))v1[1];
  return v14(v7);
}

uint64_t LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = static MessageBusActor.shared;
  v2[8] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), v3, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), v2, 0);
}

uint64_t LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  *uint64_t v4 = v0;
  v4[1] = LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  return v6(v2, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = specialized Set.init<A>(_:)(v0[10]);
  swift_bridgeObjectRelease();
  uint64_t v4 = specialized _NativeSet.intersection(_:)(v1, v3);
  v0[11] = v4;
  v0[5] = MEMORY[0x1E4FBC868];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Set<String>));
  uint64_t v6 = static MessageBusActor.shared;
  v0[12] = static MessageBusActor.shared;
  uint64_t v7 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[13] = v8;
  _OWORD v8[2] = v4;
  v8[3] = v2;
  v8[4] = v0 + 5;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[14] = v9;
  *uint64_t v9 = v0;
  v9[1] = LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  uint64_t v10 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4187F28](v9, v5, v10, v6, v7, &async function pointer to partial apply for closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), v8, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t RRCandidate.isAppEntityType.getter()
{
  uint64_t v0 = type metadata accessor for RREntity();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v23 - v5;
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v6, v0);
  uint64_t v8 = UsoTask.verbString.getter();
  uint64_t v10 = v9;
  swift_release();
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  v7(v4, v0);
  uint64_t v11 = UsoEntity.attributes.getter();
  swift_release();
  if (!*(void *)(v11 + 16)) {
    goto LABEL_10;
  }
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v13 & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v14 >> 62))
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v14 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v14);
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v16 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (v16)
    {
      uint64_t v17 = UsoTask.verbString.getter();
      uint64_t v19 = v18;
      swift_release();
LABEL_12:
      if (v8 == 0xD000000000000010 && v10 == 0x80000001BA06A1F0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
      if (v19)
      {
        if (v17 == 0xD000000000000014 && v19 == 0x80000001BA06A210)
        {
          swift_bridgeObjectRelease();
          char v21 = 1;
        }
        else
        {
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
        return v21 & 1;
      }
LABEL_21:
      char v21 = 0;
      return v21 & 1;
    }
LABEL_11:
    uint64_t v17 = 0;
    uint64_t v19 = 0;
    goto LABEL_12;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<(String, Set<String>)>.Iterator);
  v5[22] = v6;
  v5[23] = *(void *)(v6 - 8);
  v5[24] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  v5[25] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), v7, 0);
}

uint64_t closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v37 = v1 + 56;
  uint64_t v39 = v1;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & v2;
  int64_t v38 = (unint64_t)(63 - v4) >> 6;
  uint64_t v6 = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v5)
    {
      int64_t v40 = v10;
      uint64_t v41 = (v5 - 1) & v5;
      unint64_t v12 = __clz(__rbit64(v5)) | (v10 << 6);
      goto LABEL_21;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return MEMORY[0x1F4187C58](v6, v7, v8, v9);
    }
    if (v13 >= v38) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v37 + 8 * v13);
    int64_t v15 = v10 + 1;
    if (!v14)
    {
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v38) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v37 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v10 + 3;
        if (v10 + 3 >= v38) {
          goto LABEL_29;
        }
        unint64_t v14 = *(void *)(v37 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    int64_t v40 = v15;
    uint64_t v41 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_21:
    uint64_t v18 = *(void *)(v0 + 160);
    uint64_t v17 = *(void *)(v0 + 168);
    uint64_t v19 = *(void *)(v0 + 144);
    char v20 = (uint64_t *)(*(void *)(v39 + 48) + 16 * v12);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = type metadata accessor for TaskPriority();
    uint64_t v24 = *(void *)(v23 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v17, 1, 1, v23);
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = 0;
    v25[3] = 0;
    v25[4] = v21;
    v25[5] = v22;
    v25[6] = v19;
    outlined init with copy of TaskPriority?(v17, v18);
    LODWORD(v18) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v18, 1, v23);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v26 = *(void *)(v0 + 160);
    if (v18 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 160), &demangling cache variable for type metadata for TaskPriority?);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v23);
    }
    int64_t v10 = v40;
    if (v25[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v27 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v29 = v28;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v29 = 0;
    }
    uint64_t v30 = **(void **)(v0 + 128);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
    *(void *)(v31 + 24) = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Set<String>));
    uint64_t v32 = v29 | v27;
    if (v29 | v27)
    {
      uint64_t v32 = v0 + 16;
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = v27;
      *(void *)(v0 + 40) = v29;
    }
    uint64_t v11 = *(void *)(v0 + 168);
    *(void *)(v0 + 72) = 1;
    *(void *)(v0 + 80) = v32;
    *(void *)(v0 + 88) = v30;
    swift_task_create();
    swift_release();
    uint64_t v6 = outlined destroy of ReferenceResolutionClientProtocol?(v11, &demangling cache variable for type metadata for TaskPriority?);
    unint64_t v5 = v41;
  }
  uint64_t v16 = v10 + 4;
  if (v10 + 4 < v38)
  {
    unint64_t v14 = *(void *)(v37 + 8 * v16);
    if (!v14)
    {
      while (1)
      {
        int64_t v15 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_33;
        }
        if (v15 >= v38) {
          goto LABEL_29;
        }
        unint64_t v14 = *(void *)(v37 + 8 * v15);
        ++v16;
        if (v14) {
          goto LABEL_20;
        }
      }
    }
    int64_t v15 = v10 + 4;
    goto LABEL_20;
  }
LABEL_29:
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Set<String>));
  TaskGroup.makeAsyncIterator()();
  uint64_t v33 = static MessageBusActor.shared;
  *(void *)(v0 + 208) = static MessageBusActor.shared;
  uint64_t v34 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v35;
  *uint64_t v35 = v0;
  v35[1] = closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v6 = v0 + 96;
  uint64_t v7 = v33;
  uint64_t v8 = v34;
  return MEMORY[0x1F4187C58](v6, v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t (*v16)(void);
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  if (v1)
  {
    uint64_t v3 = v0[14];
    uint64_t v4 = (uint64_t *)v0[19];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v4;
    v0[15] = *v4;
    *uint64_t v4 = 0x8000000000000000;
    int64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
    uint64_t v11 = *(void *)(v6 + 16);
    unint64_t v12 = (v7 & 1) == 0;
    int64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
    }
    else
    {
      unint64_t v14 = v7;
      if (*(void *)(v6 + 24) >= v13)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          int64_t v13 = (uint64_t)specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, isUniquelyReferenced_nonNull_native);
        int64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
        if ((v14 & 1) != (v7 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        int64_t v10 = v13;
      }
      uint64_t v17 = (void *)v0[15];
      if (v14)
      {
        uint64_t v18 = v17[7];
        swift_bridgeObjectRelease();
        *(void *)(v18 + 8 * v10) = v3;
        goto LABEL_18;
      }
      v17[(v10 >> 6) + 8] |= 1 << v10;
      uint64_t v19 = (uint64_t *)(v17[6] + 16 * v10);
      *uint64_t v19 = v2;
      v19[1] = v1;
      *(void *)(v17[7] + 8 * v10) = v3;
      char v20 = v17[2];
      uint64_t v21 = __OFADD__(v20, 1);
      uint64_t v22 = v20 + 1;
      if (!v21)
      {
        v17[2] = v22;
        swift_bridgeObjectRetain();
LABEL_18:
        *(void *)v0[19] = v17;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v23 = static MessageBusActor.shared;
        v0[26] = static MessageBusActor.shared;
        uint64_t v24 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
        swift_retain();
        uint64_t v25 = (void *)swift_task_alloc();
        v0[27] = v25;
        void *v25 = v0;
        v25[1] = closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
        uint64_t v9 = v0[22];
        int64_t v13 = (uint64_t)(v0 + 12);
        uint64_t v7 = v23;
        uint64_t v8 = v24;
        return MEMORY[0x1F4187C58](v13, v7, v8, v9);
      }
    }
    __break(1u);
    return MEMORY[0x1F4187C58](v13, v7, v8, v9);
  }
  (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  uint64_t v6 = v0[10];
  unint64_t v5 = v0[11];
  return v8(v6, v5, v2, v3);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = v0;
  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo12LNViewActionCG_SSs5NeverOTg5059_s14SiriKitRuntime27LinkExpansionContextBuilderC26fetchViewe82Identifiers33_96F732C182F07CCE7D79D4AD573D548BLL3forShySSGSS_tYaFAGyYaKXEfU_SSSo06D56J0Ccfu_33_3bab3ebd54a35cd855c23bddc349bd1fAISSTf3nnnpk_nTf1cn_n(v1);
  uint64_t v3 = specialized Set.init<A>(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4 == v5) {
      goto LABEL_3;
    }
  }
  else if (v4 == *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)kLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.error.getter();
  uint64_t v9 = os_log_type_enabled(v7, v8);
  int64_t v10 = *(void *)(v0 + 88);
  if (v9)
  {
    uint64_t v11 = *(void *)(v0 + 80);
    unint64_t v12 = swift_slowAlloc();
    char v20 = swift_slowAlloc();
    v21[0] = v20;
    *(_DWORD *)unint64_t v12 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    int64_t v13 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNViewAction);
    unint64_t v14 = swift_bridgeObjectRetain();
    int64_t v15 = MEMORY[0x1BA9E3080](v14, v13);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v7, v8, "Multiple viewActions for a given action identifier on screen for '%s'\nDisambiguting to a viewAction instance is not supported, the action will be routed to any instance matching the action identifier.\nViewActions: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

LABEL_11:
  **(void **)(v0 + 64) = v3;
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a1;
  v6[6] = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), 0, 0);
}

uint64_t closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = (void *)v0[5];
  *uint64_t v2 = v0[6];
  v2[1] = v1;
  uint64_t v3 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v0[9] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), v4, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = v0[7];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[8] + 64;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  unint64_t v5 = (void *)swift_task_alloc();
  v0[11] = v5;
  void *v5 = v0;
  v5[1] = closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  return specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:)(0xD00000000000001CLL, 0x80000001BA06A3E0, (int *)&async function pointer to partial apply for closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:));
}

{
  uint64_t v1;

  swift_release();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 96);
  if (!v1) {
    uint64_t v1 = MEMORY[0x1E4FBC870];
  }
  *(void *)(*(void *)(v0 + 40) + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), v2, 0);
}

uint64_t closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  v4[12] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), v5, 0);
}

uint64_t closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 112) = a1;
  *(void *)(v4 + 120) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 96);
  if (v1) {
    uint64_t v6 = closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  }
  else {
    uint64_t v6 = closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t LinkExpansionContextBuilder.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  swift_release();
  return v0;
}

uint64_t LinkExpansionContextBuilder.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LinkExpansionContext.SessionContext()
{
  return self;
}

uint64_t _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v58 = type metadata accessor for RREntity();
  uint64_t v2 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  int64_t v6 = 0;
  uint64_t v49 = result;
  uint64_t v50 = a1;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = a1 + 64;
  uint64_t v7 = v9;
  uint64_t v10 = 1 << *(unsigned char *)(v8 - 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v7;
  uint64_t v46 = v8;
  int64_t v47 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v57 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v48 = result + 8;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v12));
  uint64_t v14 = (v12 - 1) & v12;
  for (unint64_t i = v13 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v6 << 6))
  {
    unint64_t v51 = v14;
    int64_t v52 = v6;
    uint64_t v19 = *(void *)(v50 + 56);
    char v20 = (uint64_t *)(*(void *)(v50 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v54 = *v20;
    uint64_t v55 = v21;
    unint64_t v56 = i;
    uint64_t v22 = *(void *)(v19 + 8 * i);
    uint64_t v23 = *(void *)(v22 + 16);
    uint64_t v53 = v22;
    if (v23)
    {
      uint64_t v24 = *(void *)(type metadata accessor for RRCandidate() - 8);
      uint64_t v25 = v22 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      uint64_t v26 = *(void *)(v24 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v27 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        RRCandidate.entity.getter();
        uint64_t v29 = RREntity.dataType.getter();
        uint64_t v31 = v30;
        (*v57)(v4, v58);
        if (v31)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          }
          unint64_t v33 = v27[2];
          unint64_t v32 = v27[3];
          if (v33 >= v32 >> 1) {
            uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v27);
          }
          v27[2] = v33 + 1;
          uint64_t v28 = &v27[2 * v33];
          v28[4] = v29;
          v28[5] = v31;
        }
        v25 += v26;
        --v23;
      }
      while (v23);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v27 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v34 = v27[2];
    uint64_t v60 = Set.init(minimumCapacity:)();
    if (v34)
    {
      uint64_t v35 = v27 + 5;
      do
      {
        Swift::Int v36 = *(v35 - 1);
        Swift::Int v37 = *v35;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v59, v36, v37);
        swift_bridgeObjectRelease();
        v35 += 2;
        --v34;
      }
      while (v34);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v38 = v60;
    unint64_t v39 = v56;
    uint64_t result = v49;
    *(void *)((char *)v48 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
    int64_t v40 = (void *)(result[6] + 16 * v39);
    uint64_t v41 = v55;
    *int64_t v40 = v54;
    v40[1] = v41;
    *(void *)(result[7] + 8 * v39) = v38;
    uint64_t v42 = result[2];
    BOOL v43 = __OFADD__(v42, 1);
    uint64_t v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    result[2] = v44;
    unint64_t v12 = v51;
    int64_t v6 = v52;
    if (v51) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_37;
    }
    if (v16 >= v47) {
      return result;
    }
    unint64_t v17 = *(void *)(v46 + 8 * v16);
    ++v6;
    if (!v17)
    {
      int64_t v6 = v16 + 1;
      if (v16 + 1 >= v47) {
        return result;
      }
      unint64_t v17 = *(void *)(v46 + 8 * v6);
      if (!v17)
      {
        int64_t v6 = v16 + 2;
        if (v16 + 2 >= v47) {
          return result;
        }
        unint64_t v17 = *(void *)(v46 + 8 * v6);
        if (!v17) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v14 = (v17 - 1) & v17;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v47) {
    return result;
  }
  unint64_t v17 = *(void *)(v46 + 8 * v18);
  if (v17)
  {
    int64_t v6 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v6 >= v47) {
      return result;
    }
    unint64_t v17 = *(void *)(v46 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_18;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = LinkExpansionContext.LinkActionMetadataView.next()();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v4 = result;
    uint64_t v5 = v1;
    uint64_t v6 = v2;
    uint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)(MEMORY[0x1E4FBC860] + 32);
    while (1)
    {
      if (!v7)
      {
        unint64_t v9 = v3[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_26;
        }
        int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1) {
          uint64_t v11 = 1;
        }
        else {
          uint64_t v11 = v10;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [LNSystemProtocol : [LinkActionMetadata]])>);
        unint64_t v12 = (void *)swift_allocObject();
        uint64_t v13 = (uint64_t)(_swift_stdlib_malloc_size(v12) - 32) / 24;
        v12[2] = v11;
        v12[3] = 2 * v13;
        unint64_t v14 = (unint64_t)(v12 + 4);
        uint64_t v15 = v3[3] >> 1;
        if (v3[2])
        {
          if (v12 != v3 || v14 >= (unint64_t)&v3[3 * v15 + 4]) {
            memmove(v12 + 4, v3 + 4, 24 * v15);
          }
          v3[2] = 0;
        }
        uint64_t v8 = (uint64_t *)(v14 + 24 * v15);
        uint64_t v7 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - v15;
        uint64_t result = swift_release();
        uint64_t v3 = v12;
      }
      BOOL v17 = __OFSUB__(v7--, 1);
      if (v17) {
        break;
      }
      *uint64_t v8 = v4;
      v8[1] = v5;
      _OWORD v8[2] = v6;
      v8 += 3;
      uint64_t result = LinkExpansionContext.LinkActionMetadataView.next()();
      uint64_t v4 = result;
      uint64_t v5 = v18;
      uint64_t v6 = v19;
      if (!v18) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v7 = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  unint64_t v20 = v3[3];
  if (v20 < 2) {
    return (uint64_t)v3;
  }
  unint64_t v21 = v20 >> 1;
  BOOL v17 = __OFSUB__(v21, v7);
  uint64_t v22 = v21 - v7;
  if (!v17)
  {
    v3[2] = v22;
    return (uint64_t)v3;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v58 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v59 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v61 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          int64_t v62 = v6;
          unint64_t v12 = v11 | (v6 << 6);
        }
        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59) {
            goto LABEL_79;
          }
          unint64_t v14 = *(void *)(v58 + 8 * v13);
          int64_t v15 = v6 + 1;
          if (!v14)
          {
            int64_t v15 = v6 + 2;
            if (v6 + 2 >= v59) {
              goto LABEL_79;
            }
            unint64_t v14 = *(void *)(v58 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v6 + 3;
              if (v6 + 3 >= v59) {
                goto LABEL_79;
              }
              unint64_t v14 = *(void *)(v58 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v6 + 4;
                if (v6 + 4 >= v59) {
                  goto LABEL_79;
                }
                unint64_t v14 = *(void *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v59) {
                      goto LABEL_79;
                    }
                    unint64_t v14 = *(void *)(v58 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          unint64_t v9 = (v14 - 1) & v14;
          int64_t v62 = v15;
          unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        BOOL v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v20 = Hasher._finalize()();
        uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v22 = v20 & ~v21;
        unint64_t v23 = v22 >> 6;
        uint64_t v24 = 1 << v22;
        if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v6 = v62;
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v25 = *(void *)(a3 + 48);
      uint64_t v26 = (void *)(v25 + 16 * v22);
      BOOL v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v28 = ~v21;
        for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
        {
          unint64_t v30 = i & v28;
          if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
            break;
          }
          uint64_t v31 = (void *)(v25 + 16 * v30);
          BOOL v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v23 = v30 >> 6;
            uint64_t v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
  }
  int64_t v34 = 0;
  uint64_t v60 = a3 + 56;
  uint64_t v61 = 0;
  uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v37 = v36 & *(void *)(a3 + 56);
  int64_t v63 = (unint64_t)(v35 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    int64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      int64_t v34 = v41 + 1;
      if (v41 + 1 >= v63) {
        goto LABEL_79;
      }
      unint64_t v42 = *(void *)(v60 + 8 * v34);
      if (!v42)
      {
        int64_t v34 = v41 + 2;
        if (v41 + 2 >= v63) {
          goto LABEL_79;
        }
        unint64_t v42 = *(void *)(v60 + 8 * v34);
        if (!v42) {
          break;
        }
      }
    }
LABEL_62:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v47 = Hasher._finalize()();
    uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v49 = v47 & ~v48;
    if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v50 = *(void *)(a4 + 48);
    unint64_t v51 = (void *)(v50 + 16 * v49);
    BOOL v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v57, a2, v61, v5);
      }
    }
    else
    {
      uint64_t v53 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v53;
        if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          break;
        }
        uint64_t v54 = (void *)(v50 + 16 * v49);
        BOOL v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_76;
        }
      }
LABEL_46:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  int64_t v43 = v41 + 3;
  if (v43 >= v63) {
    goto LABEL_79;
  }
  unint64_t v42 = *(void *)(v60 + 8 * v43);
  if (v42)
  {
    int64_t v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    int64_t v34 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v34 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v34);
    ++v43;
    if (v42) {
      goto LABEL_62;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x1E4FBC870];
LABEL_36:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    BOOL v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  unint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *specialized LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  a3[6] = a4;
  a3[7] = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3 + 3);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a1, a4);
  a3[11] = a5;
  a3[12] = a7;
  uint64_t v14 = __swift_allocate_boxed_opaque_existential_0(a3 + 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v14, a2, a5);
  a3[2] = 0;
  a3[13] = 0;
  return a3;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 40) = a1;
  char v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v3;
  void *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  long long v4 = *(_OWORD *)(v1 + 24);
  *(void *)uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)(v2 + 8) = v4;
  char v5 = *(uint64_t (**)(void))(v3 + 8);
  return v5();
}

uint64_t specialized static LinkActionMetadata.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    if ((v5 & 1) == 0) {
      return v6 & 1;
    }
  }
  uint64_t v7 = *(void *)(a1 + 24);
  int v8 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 24);
  int v10 = *(unsigned __int8 *)(a2 + 32);
  if (!v7)
  {
    if (!v9) {
      goto LABEL_15;
    }
LABEL_17:
    char v6 = 0;
    return v6 & 1;
  }
  if (!v9) {
    goto LABEL_17;
  }
  BOOL v11 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && v7 == v9;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v6 = 0, (v12 & 1) != 0))
  {
LABEL_15:
    if (((v8 ^ v10) & 1) == 0 && ((*(unsigned __int8 *)(a1 + 33) ^ *(unsigned __int8 *)(a2 + 33)) & 1) == 0)
    {
      char v6 = ((*(unsigned char *)(a1 + 34) & 1) == 0) ^ *(unsigned char *)(a2 + 34);
      return v6 & 1;
    }
    goto LABEL_17;
  }
  return v6 & 1;
}

uint64_t type metadata accessor for LinkExpansionContext.TurnContext()
{
  return self;
}

uint64_t destroy for LinkActionMetadata()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LinkActionMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LinkActionMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

__n128 __swift_memcpy35_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LinkActionMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkActionMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 35)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkActionMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 35) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 35) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkActionMetadata()
{
  return &type metadata for LinkActionMetadata;
}

uint64_t dispatch thunk of LinkContextProviding.salientAppBundleIds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LinkContextProviding.onScreenEntityTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LinkContextProviding.actionMetadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for LinkExpansionContext()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for LinkExpansionContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for LinkExpansionContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for LinkExpansionContext(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LinkExpansionContext()
{
  return &type metadata for LinkExpansionContext;
}

uint64_t method lookup function for LinkExpansionContext.SessionContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkExpansionContext.SessionContext);
}

uint64_t dispatch thunk of LinkExpansionContext.SessionContext.__allocating_init(linkActionMetadata:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for LinkExpansionContext.TurnContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkExpansionContext.TurnContext);
}

uint64_t dispatch thunk of LinkExpansionContext.TurnContext.__allocating_init(onScreenActions:onScreenAppBundleIds:onScreenEntityTypes:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for LinkExpansionContextBuilder()
{
  return self;
}

uint64_t method lookup function for LinkExpansionContextBuilder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkExpansionContextBuilder);
}

uint64_t dispatch thunk of LinkExpansionContextBuilder.__allocating_init(metadataProvider:viewActionsProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t destroy for LinkExpansionContext.LinkActionMetadataView()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LinkExpansionContext.LinkActionMetadataView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LinkExpansionContext.LinkActionMetadataView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for LinkExpansionContext.LinkActionMetadataView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkExpansionContext.LinkActionMetadataView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkExpansionContext.LinkActionMetadataView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for LinkExpansionContext.LinkActionMetadataView()
{
  return &unk_1F137EA60;
}

unint64_t lazy protocol witness table accessor for type LinkExpansionContext.LinkActionMetadataView and conformance LinkExpansionContext.LinkActionMetadataView()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkExpansionContext.LinkActionMetadataView and conformance LinkExpansionContext.LinkActionMetadataView;
  if (!lazy protocol witness table cache variable for type LinkExpansionContext.LinkActionMetadataView and conformance LinkExpansionContext.LinkActionMetadataView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkExpansionContext.LinkActionMetadataView and conformance LinkExpansionContext.LinkActionMetadataView);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_AHs5NeverOTg504_s14de9Runtime20g21ExpansionContextV0D18hI108View33_96F732C182F07CCE7D79D4AD573D548BLLV4nextSS_SDySo16LNSystemProtocolCSayAA0dgH0VGGtSgyFA2LXEfU_A2KXEfU_ShySSGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v26 = *(void *)(a1 + 16);
    uint64_t v33 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v6 = v26;
    uint64_t v7 = 0;
    uint64_t v3 = v33;
    uint64_t v27 = a1 + 32;
    uint64_t v28 = a2;
    uint64_t v29 = a2 + 56;
    while (1)
    {
      int v8 = (uint64_t *)(v27 + 40 * v7);
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      uint64_t v11 = v8[3];
      uint64_t v32 = v8[2];
      char v30 = *((unsigned char *)v8 + 33);
      char v31 = *((unsigned char *)v8 + 32);
      if (*(void *)(a2 + 16)) {
        break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v18 = 0;
LABEL_22:
      unint64_t v23 = *(void *)(v33 + 16);
      unint64_t v22 = *(void *)(v33 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v6 = v26;
      }
      ++v7;
      *(void *)(v33 + 16) = v23 + 1;
      uint64_t v24 = v33 + 40 * v23;
      *(void *)(v24 + 32) = v9;
      *(void *)(v24 + 40) = v10;
      *(void *)(v24 + 48) = v32;
      *(void *)(v24 + 56) = v11;
      *(unsigned char *)(v24 + 64) = v31;
      *(unsigned char *)(v24 + 65) = v30;
      *(unsigned char *)(v24 + 66) = v18;
      a2 = v28;
      if (v7 == v6) {
        return v3;
      }
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v29 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      uint64_t v15 = *(void *)(a2 + 48);
      uint64_t v16 = (void *)(v15 + 16 * v14);
      BOOL v17 = *v16 == v9 && v16[1] == v10;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        char v18 = 1;
LABEL_21:
        uint64_t v6 = v26;
        goto LABEL_22;
      }
      uint64_t v19 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v19;
        if (((*(void *)(v29 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * v14);
        BOOL v21 = *v20 == v9 && v20[1] == v10;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_10;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    char v18 = 0;
    goto LABEL_21;
  }
  return v3;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocol, [LinkActionMetadata]>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v4 = 0;
  uint64_t v23 = a1;
  uint64_t v24 = (void *)result;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  int64_t v21 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v22 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(v23 + 56) + 8 * i);
    id v17 = *(id *)(*(void *)(v23 + 48) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_AHs5NeverOTg504_s14de9Runtime20g21ExpansionContextV0D18hI108View33_96F732C182F07CCE7D79D4AD573D548BLLV4nextSS_SDySo16LNSystemProtocolCSayAA0dgH0VGGtSgyFA2LXEfU_A2KXEfU_ShySSGTf1cn_nTf4ng_n(v16, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v22 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = (uint64_t)v24;
    *(void *)(v24[6] + 8 * i) = v17;
    *(void *)(v24[7] + 8 * i) = v18;
    uint64_t v19 = v24[2];
    BOOL v13 = __OFADD__(v19, 1);
    uint64_t v20 = v19 + 1;
    if (v13)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v24[2] = v20;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v13 = __OFADD__(v4++, 1);
    if (v13) {
      goto LABEL_25;
    }
    if (v4 >= v21) {
      return result;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v4);
    if (!v14) {
      break;
    }
LABEL_15:
    unint64_t v10 = (v14 - 1) & v14;
  }
  int64_t v15 = v4 + 1;
  if (v4 + 1 >= v21) {
    return result;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v4 + 2;
  if (v4 + 2 >= v21) {
    return result;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v4 + 3;
  if (v4 + 3 >= v21) {
    return result;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_14:
    int64_t v4 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v21) {
      return result;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_15;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized LinkExpansionContextBuilder.extractOnScreenBundleIDsFromRRCandidates(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v160 = (char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for RRMetadata();
  uint64_t v127 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v173 = (char *)&v120 - v8;
  uint64_t v9 = type metadata accessor for RRDataSourceMetadataValue();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v128 = (char *)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  unint64_t v133 = (char *)&v120 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v169 = (char *)&v120 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v159 = (char *)&v120 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v158 = (char *)&v120 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v135 = (char *)&v120 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v145 = (char *)&v120 - v23;
  uint64_t v150 = type metadata accessor for RREntity();
  uint64_t v172 = *(void (***)(void, void, void))(v150 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v150);
  unint64_t v132 = (char *)&v120 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  Swift::String v131 = (char *)&v120 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v139 = (char *)&v120 - v28;
  uint64_t v29 = type metadata accessor for RRCandidate();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v124 = (char *)&v120 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  unint64_t v149 = (char *)&v120 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  os_log_t v153 = (char *)&v120 - v36;
  MEMORY[0x1F4188790](v35);
  unint64_t v151 = (char *)&v120 - v37;
  uint64_t v38 = MEMORY[0x1E4FBC860];
  uint64_t v174 = MEMORY[0x1E4FBC860];
  uint64_t v39 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v138 = v39;
  uint64_t v120 = a1;
  if (!v39)
  {
LABEL_70:
    swift_bridgeObjectRelease();
    uint64_t v118 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg504_s14d133KitRuntime27LinkExpansionContextBuilderC40extractOnScreenBundleIDsFromRRCandidates33_96F732C182F07CCE7D79D4AD573D548BLLyShySSGSay0A28efg7Model11I60VGFSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(v38);
    swift_release();
    uint64_t v119 = specialized Set.init<A>(_:)(v118);
    swift_bridgeObjectRelease();
    return v119;
  }
  uint64_t v40 = 0;
  unint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  uint64_t v41 = v30 + 16;
  uint64_t v156 = v42;
  unint64_t v43 = (*(unsigned __int8 *)(v41 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 64);
  uint64_t v140 = *(void *)(v41 + 56);
  unint64_t v121 = v43;
  uint64_t v137 = a1 + v43;
  unint64_t v148 = (void (**)(char *, uint64_t))(v172 + 1);
  uint64_t v147 = (void (**)(char *, uint64_t))(v41 - 8);
  uint64_t v167 = (uint64_t (**)(char *, uint64_t))(v127 + 88);
  uint64_t v168 = v127 + 16;
  int v166 = *MEMORY[0x1E4FA3DB0];
  uint64_t v163 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v164 = (void (**)(char *, uint64_t))(v127 + 8);
  uint64_t v157 = (void (**)(char *, uint64_t))(v127 + 96);
  uint64_t v172 = (void (**)(void, void, void))(v10 + 32);
  uint64_t v165 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  unsigned int v130 = *MEMORY[0x1E4FA3DE0];
  uint64_t v134 = (void *)(v10 + 104);
  uint64_t v144 = v10 + 16;
  uint64_t v161 = v10;
  uint64_t v146 = (void (**)(char *, uint64_t))(v10 + 8);
  unsigned int v125 = *MEMORY[0x1E4FA3DD0];
  uint64_t v123 = (void (**)(char *, char *, uint64_t))(v41 + 16);
  uint64_t v170 = v7;
  uint64_t v154 = v29;
  uint64_t v44 = v41;
  uint64_t v45 = v151;
  uint64_t v162 = v4;
  uint64_t v155 = v44;
  while (1)
  {
    uint64_t v152 = v40;
    v156(v45, v137 + v140 * v40, v29);
    if (one-time initialization token for appsDenyList != -1) {
      swift_once();
    }
    uint64_t v46 = static LinkExpansionContextBuilder.appsDenyList;
    Swift::Int v47 = v139;
    RRCandidate.entity.getter();
    uint64_t v48 = RREntity.id.getter();
    uint64_t v50 = v49;
    unint64_t v51 = *v148;
    BOOL v52 = v47;
    uint64_t v53 = v150;
    (*v148)(v52, v150);
    LOBYTE(v46) = specialized Set.contains(_:)(v48, v50, v46);
    swift_bridgeObjectRelease();
    uint64_t v29 = v154;
    v156(v153, (uint64_t)v45, v154);
    uint64_t v171 = v51;
    if (v46)
    {
      char v54 = 0;
      BOOL v55 = v149;
      unint64_t v56 = v147;
    }
    else
    {
      uint64_t v57 = v131;
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      v51(v57, v53);
      uint64_t v58 = UsoTask.verbString.getter();
      uint64_t v60 = v59;
      swift_release();
      if (one-time initialization token for kUsoCommonAppEntityName != -1) {
        swift_once();
      }
      if (v58 == kUsoCommonAppEntityName._countAndFlagsBits && v60 == kUsoCommonAppEntityName._object) {
        char v54 = 1;
      }
      else {
        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t v29 = v154;
      BOOL v55 = v149;
      unint64_t v56 = v147;
      swift_bridgeObjectRelease();
    }
    uint64_t v61 = *v56;
    (*v56)(v153, v29);
    uint64_t v45 = v151;
    v156(v55, (uint64_t)v151, v29);
    if ((v54 & 1) == 0) {
      goto LABEL_61;
    }
    unint64_t v141 = v61;
    int64_t v62 = v132;
    RRCandidate.entity.getter();
    uint64_t v63 = RREntity.metadata.getter();
    v171(v62, v150);
    uint64_t v64 = *(void *)(v63 + 16);
    if (v64)
    {
      unint64_t v65 = v63 + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
      uint64_t v171 = *(void (**)(char *, uint64_t))(v127 + 72);
      unint64_t v66 = *(void (**)(char *, unint64_t, uint64_t))(v127 + 16);
      v143 = (void (*)(char *))v63;
      swift_bridgeObjectRetain();
      unint64_t v67 = MEMORY[0x1E4FBC860];
      uint64_t v68 = (uint64_t)v160;
      do
      {
        unint64_t v69 = v173;
        v66(v173, v65, v4);
        v66(v7, (unint64_t)v69, v4);
        int v70 = (*v167)(v7, v4);
        if (v70 == v166)
        {
          (*v157)(v7, v4);
          char v71 = (void (*)(char *, char *, uint64_t))*v172;
          uint64_t v72 = v159;
          (*v172)(v159, v7, v9);
          v71((char *)v68, v72, v9);
          uint64_t v4 = v162;
          (*v163)(v68, 0, 1, v9);
          (*v164)(v173, v4);
        }
        else
        {
          uint64_t v73 = *v164;
          (*v164)(v7, v4);
          (*v163)(v68, 1, 1, v9);
          v73(v173, v4);
        }
        if ((*v165)(v68, 1, v9) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v68, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        }
        else
        {
          uint64_t v74 = (void (*)(char *, char *, uint64_t))*v172;
          char v75 = v158;
          (*v172)(v158, v68, v9);
          v74(v169, v75, v9);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v67 + 16) + 1, 1, v67);
          }
          unint64_t v77 = *(void *)(v67 + 16);
          unint64_t v76 = *(void *)(v67 + 24);
          uint64_t v4 = v162;
          if (v77 >= v76 >> 1) {
            unint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1, v67);
          }
          *(void *)(v67 + 16) = v77 + 1;
          v74((char *)(v67+ ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80))+ *(void *)(v161 + 72) * v77), v169, v9);
          uint64_t v68 = (uint64_t)v160;
        }
        uint64_t v7 = v170;
        v65 += (unint64_t)v171;
        --v64;
      }
      while (v64);
      swift_bridgeObjectRelease_n();
      uint64_t v78 = v145;
      uint64_t v29 = v154;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v67 = MEMORY[0x1E4FBC860];
      uint64_t v78 = v145;
    }
    uint64_t v79 = (void (*)(char *, void, uint64_t))*v134;
    ((void (*)(char *, void, uint64_t))*v134)(v78, v130, v9);
    uint64_t v171 = *(void (**)(char *, uint64_t))(v67 + 16);
    if (v171) {
      break;
    }
    (*v146)(v78, v9);
LABEL_60:
    swift_bridgeObjectRelease();
    uint64_t v45 = v151;
    uint64_t v61 = v141;
    BOOL v55 = v149;
LABEL_61:
    v61(v55, v29);
    v61(v45, v29);
LABEL_62:
    uint64_t v40 = v152 + 1;
    if (v152 + 1 == v138)
    {
      uint64_t v38 = v174;
      goto LABEL_70;
    }
  }
  Swift::String v129 = v79;
  uint64_t v80 = v161;
  unint64_t v126 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  char v81 = v135;
  unint64_t v82 = v67 + v126;
  v143 = *(void (**)(char *))(v161 + 16);
  v143(v135);
  uint64_t v83 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, MEMORY[0x1E4FA3DE8]);
  swift_bridgeObjectRetain();
  uint64_t v142 = v83;
  char v84 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v85 = *(void (**)(char *, uint64_t))(v80 + 8);
  v85(v81, v9);
  unint64_t v136 = v85;
  if (v84)
  {
    swift_bridgeObjectRelease();
    uint64_t v86 = v128;
    uint64_t v87 = v145;
    uint64_t v88 = v141;
    goto LABEL_51;
  }
  uint64_t v29 = v154;
  if (v171 == (void (*)(char *, uint64_t))1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  unint64_t v89 = v82;
  uint64_t v90 = *(void *)(v161 + 72);
  unint64_t v122 = v89;
  char v91 = v135;
  ((void (*)(char *, unint64_t, uint64_t))v143)(v135, v89 + v90, v9);
  char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
  v85(v91, v9);
  if (v92)
  {
    swift_bridgeObjectRelease();
    uint64_t v86 = v128;
    uint64_t v88 = v141;
    uint64_t v87 = v145;
LABEL_50:
    unint64_t v82 = v122;
LABEL_51:
    v85(v87, v9);
    v129(v133, v125, v9);
    ((void (*)(char *, unint64_t, uint64_t))v143)(v86, v82, v9);
    swift_bridgeObjectRetain();
    char v102 = dispatch thunk of static Equatable.== infix(_:_:)();
    v85(v86, v9);
    if ((v102 & 1) == 0)
    {
      if (v171 == (void (*)(char *, uint64_t))1) {
        goto LABEL_53;
      }
      unint64_t v108 = v82;
      uint64_t v109 = *(void *)(v161 + 72);
      Swift::String v110 = v128;
      ((void (*)(char *, unint64_t, uint64_t))v143)(v128, v108 + v109, v9);
      char v111 = dispatch thunk of static Equatable.== infix(_:_:)();
      v85(v110, v9);
      if ((v111 & 1) == 0)
      {
        if (v171 != (void (*)(char *, uint64_t))2)
        {
          unint64_t v112 = v67 + v126 + 2 * v109;
          uint64_t v113 = 2;
          do
          {
            unint64_t v114 = v128;
            uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v143)(v128, v112, v9);
            uint64_t v115 = (void (*)(char *, uint64_t))(v113 + 1);
            if (__OFADD__(v113, 1)) {
              goto LABEL_72;
            }
            char v116 = dispatch thunk of static Equatable.== infix(_:_:)();
            unint64_t v117 = v114;
            uint64_t v85 = v136;
            v136(v117, v9);
            if (v116) {
              goto LABEL_59;
            }
            ++v113;
            v112 += v109;
          }
          while (v115 != v171);
        }
LABEL_53:
        swift_bridgeObjectRelease();
        v85(v133, v9);
        swift_bridgeObjectRelease();
        uint64_t v103 = v154;
        v88(v149, v154);
        uint64_t v104 = *v123;
        uint64_t v45 = v151;
        (*v123)(v124, v151, v103);
        uint64_t v105 = v174;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v105 + 16) + 1, 1);
          uint64_t v45 = v151;
          uint64_t v105 = v174;
        }
        unint64_t v107 = *(void *)(v105 + 16);
        unint64_t v106 = *(void *)(v105 + 24);
        if (v107 >= v106 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v106 > 1, v107 + 1, 1);
          uint64_t v45 = v151;
          uint64_t v105 = v174;
        }
        *(void *)(v105 + 16) = v107 + 1;
        uint64_t v29 = v154;
        v104((char *)(v105 + v121 + v107 * v140), v124, v154);
        uint64_t v174 = v105;
        uint64_t v7 = v170;
        goto LABEL_62;
      }
    }
LABEL_59:
    swift_bridgeObjectRelease();
    v85(v133, v9);
    uint64_t v7 = v170;
    uint64_t v29 = v154;
    goto LABEL_60;
  }
  if (v171 == (void (*)(char *, uint64_t))2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v170;
LABEL_41:
    uint64_t v93 = v145;
LABEL_42:
    v85(v93, v9);
    goto LABEL_60;
  }
  unint64_t v94 = v67 + v126 + 2 * v90;
  uint64_t v95 = 2;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v143)(v91, v94, v9);
    unint64_t v97 = v91;
    unint64_t v98 = (void (*)(char *, uint64_t))(v95 + 1);
    if (__OFADD__(v95, 1)) {
      break;
    }
    char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v100 = v97;
    uint64_t v85 = v136;
    v136(v100, v9);
    if (v99)
    {
      swift_bridgeObjectRelease();
      uint64_t v86 = v128;
      uint64_t v87 = v145;
      uint64_t v88 = v141;
      goto LABEL_50;
    }
    ++v95;
    v94 += v90;
    BOOL v101 = v98 == v171;
    char v91 = v135;
    if (v101)
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = v170;
      uint64_t v93 = v145;
      uint64_t v29 = v154;
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.init<A>(grouping:by:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RREntity();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for RRCandidate();
  uint64_t v6 = MEMORY[0x1F4188790](v57);
  char v54 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v56 = (char *)&v43 - v9;
  uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v58 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return (uint64_t)v10;
  }
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v12 = v8 + 16;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 64);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v12 + 56);
  BOOL v52 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v53 = v13;
  uint64_t v51 = v15;
  uint64_t v45 = v14 | 7;
  uint64_t v46 = v17 + v15;
  BOOL v55 = (void (**)(char *, char *, uint64_t))(v12 + 16);
  long long v44 = xmmword_1BA04FD90;
  Swift::Int v47 = v5;
  uint64_t v48 = v2;
  uint64_t v49 = v17;
  uint64_t v50 = v12;
  v13(v56, v16, v57);
  while (1)
  {
    RRCandidate.entity.getter();
    uint64_t v20 = RREntity.appBundleId.getter();
    uint64_t v22 = v21;
    (*v52)(v5, v2);
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22);
    uint64_t v25 = v10[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    char v28 = v23;
    if (v10[3] < v27)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, 1);
      uint64_t v10 = v58;
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_20;
      }
      unint64_t v24 = v29;
    }
    if (v28)
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = v10[7];
      uint64_t v32 = *v55;
      (*v55)(v54, v56, v57);
      unint64_t v33 = *(void *)(v31 + 8 * v24);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v31 + 8 * v24) = v33;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v33 + 16) + 1, 1, v33);
        *(void *)(v31 + 8 * v24) = v33;
      }
      unint64_t v36 = *(void *)(v33 + 16);
      unint64_t v35 = *(void *)(v33 + 24);
      if (v36 >= v35 >> 1)
      {
        unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v33);
        *(void *)(v31 + 8 * v24) = v33;
      }
      *(void *)(v33 + 16) = v36 + 1;
      unint64_t v18 = v33 + v51;
      uint64_t v2 = v48;
      uint64_t v19 = v49;
      v32((char *)(v18 + v36 * v49), v54, v57);
      uint64_t v5 = v47;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = v44;
      (*v55)((char *)(v37 + v51), v56, v57);
      v10[(v24 >> 6) + 8] |= 1 << v24;
      uint64_t v38 = (uint64_t *)(v10[6] + 16 * v24);
      *uint64_t v38 = v20;
      v38[1] = v22;
      *(void *)(v10[7] + 8 * v24) = v37;
      uint64_t v39 = v10[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_19;
      }
      void v10[2] = v41;
      uint64_t v19 = v49;
    }
    v16 += v19;
    if (!--v11) {
      return (uint64_t)v10;
    }
    v53(v56, v16, v57);
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *rawValue;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  unint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void (**v62)(char *, uint64_t);
  char *v63;
  void (**v64)(char *, char *, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  void *v68;

  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v63 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  unint64_t v67 = (char *)&v54 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v54 - v7;
  uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v68 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return (uint64_t)v10;
  }
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v12 = v8 + 16;
  uint64_t v13 = v14;
  uint64_t v15 = *(unsigned __int8 *)(v12 + 64);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v17 = (char *)(a1 + v16);
  unint64_t v18 = *(void *)(v12 + 56);
  uint64_t v61 = v16;
  int64_t v62 = (void (**)(char *, uint64_t))(v12 - 8);
  unint64_t v56 = v15 | 7;
  uint64_t v57 = v18 + v16;
  uint64_t v64 = (void (**)(char *, char *, uint64_t))(v12 + 16);
  BOOL v55 = xmmword_1BA04FD90;
  unint64_t v65 = (char *)&v54 - v7;
  unint64_t v66 = v12;
  uint64_t v58 = v2;
  int64_t v59 = v14;
  uint64_t v60 = v18;
  v14(v9, v17, v2);
  while (1)
  {
    if (one-time initialization token for kBundleAliasToFullyQualifiedBundleId != -1) {
      swift_once();
    }
    rawValue = kBundleAliasToFullyQualifiedBundleId._rawValue;
    uint64_t v22 = UsoIdentifier.appBundleId.getter();
    if (rawValue[2] && (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23), (v25 & 1) != 0))
    {
      BOOL v26 = (uint64_t *)(rawValue[7] + 16 * v24);
      uint64_t v27 = v9;
      unint64_t v29 = *v26;
      char v28 = v26[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      char v30 = v67;
      uint64_t v31 = v27;
      uint64_t v13 = v59;
      v59(v67, v31, v2);
      if (v28) {
        goto LABEL_14;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v13(v67, v9, v2);
    }
    uint64_t v32 = UsoIdentifier.appBundleId.getter();
    char v30 = v67;
    unint64_t v29 = v32;
    char v28 = v33;
LABEL_14:
    (*v62)(v30, v2);
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
    unint64_t v36 = v10[2];
    uint64_t v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    uint64_t v39 = v34;
    if (v10[3] < v38)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, 1);
      uint64_t v10 = v68;
      BOOL v40 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_28;
      }
      unint64_t v35 = v40;
    }
    if (v39)
    {
      swift_bridgeObjectRelease();
      unint64_t v42 = v10[7];
      uint64_t v43 = *v64;
      (*v64)(v63, v65, v2);
      long long v44 = *(void *)(v42 + 8 * v35);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v42 + 8 * v35) = v44;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        long long v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
        *(void *)(v42 + 8 * v35) = v44;
      }
      Swift::Int v47 = *(void *)(v44 + 16);
      uint64_t v46 = *(void *)(v44 + 24);
      if (v47 >= v46 >> 1)
      {
        long long v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v44);
        *(void *)(v42 + 8 * v35) = v44;
      }
      uint64_t v13 = v59;
      uint64_t v19 = v60;
      *(void *)(v44 + 16) = v47 + 1;
      uint64_t v20 = v44 + v61 + v47 * v19;
      uint64_t v2 = v58;
      v43((char *)v20, v63, v58);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v55;
      (*v64)((char *)(v48 + v61), v65, v2);
      v10[(v35 >> 6) + 8] |= 1 << v35;
      uint64_t v49 = (uint64_t *)(v10[6] + 16 * v35);
      *uint64_t v49 = v29;
      v49[1] = v28;
      *(void *)(v10[7] + 8 * v35) = v48;
      uint64_t v50 = v10[2];
      uint64_t v51 = __OFADD__(v50, 1);
      BOOL v52 = v50 + 1;
      if (v51) {
        goto LABEL_27;
      }
      void v10[2] = v52;
      uint64_t v19 = v60;
    }
    v17 += v19;
    --v11;
    uint64_t v9 = v65;
    if (!v11) {
      return (uint64_t)v10;
    }
    v13(v65, v17, v2);
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized LinkExpansionContextBuilder.extractOnScreenEntityTypesFromRRCandidates(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RRMetadata();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v150 = (char *)v101 - v10;
  uint64_t v11 = type metadata accessor for RRDataSourceMetadataValue();
  uint64_t v138 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v123 = (char *)v101 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v144 = (char *)v101 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unint64_t v136 = (char *)v101 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v135 = (char *)v101 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  unint64_t v126 = (char *)v101 - v24;
  MEMORY[0x1F4188790](v23);
  unint64_t v132 = (char *)v101 - v25;
  uint64_t v117 = type metadata accessor for RREntity();
  unint64_t v149 = *(void (***)(char *, uint64_t))(v117 - 8);
  MEMORY[0x1F4188790](v117);
  char v116 = (char *)v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for RRCandidate();
  uint64_t v27 = *(void *)(v118 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v118);
  uint64_t v104 = (char *)v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v115 = (char *)v101 - v31;
  MEMORY[0x1F4188790](v30);
  unint64_t v121 = (char *)v101 - v32;
  uint64_t v33 = MEMORY[0x1E4FBC860];
  uint64_t v151 = MEMORY[0x1E4FBC860];
  uint64_t v34 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v114 = v34;
  if (!v34)
  {
LABEL_55:
    swift_bridgeObjectRelease();
    uint64_t v99 = specialized Dictionary.init<A>(grouping:by:)(v33);
    swift_release();
    int v100 = specialized _NativeDictionary.mapValues<A>(_:)(v99);
    swift_bridgeObjectRelease();
    return (uint64_t)v100;
  }
  uint64_t v109 = v14;
  uint64_t v35 = 0;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v36 = v27 + 16;
  Swift::String v129 = v37;
  unint64_t v38 = (*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64);
  uint64_t v120 = *(void *)(v36 + 56);
  v101[1] = a1;
  unint64_t v102 = v38;
  uint64_t v113 = a1 + v38;
  unint64_t v112 = v149 + 1;
  uint64_t v143 = v6 + 16;
  uint64_t v142 = (uint64_t (**)(char *, uint64_t))(v6 + 88);
  int v141 = *MEMORY[0x1E4FA3DB0];
  unint64_t v149 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v140 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v138 + 56);
  uint64_t v106 = v6;
  uint64_t v134 = (void (**)(char *, uint64_t))(v6 + 96);
  unint64_t v148 = (void (**)(char *, char *, uint64_t))(v138 + 32);
  uint64_t v139 = (unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48);
  unsigned int v111 = *MEMORY[0x1E4FA3DE0];
  uint64_t v124 = (void (**)(char *, void, uint64_t))(v138 + 104);
  uint64_t v131 = v138 + 16;
  unint64_t v133 = (void (**)(char *, uint64_t))(v138 + 8);
  unsigned int v105 = *MEMORY[0x1E4FA3DD0];
  Swift::String v110 = (void (**)(char *, uint64_t))(v36 - 8);
  uint64_t v103 = (void (**)(char *, char *, uint64_t))(v36 + 16);
  uint64_t v137 = v4;
  uint64_t v145 = v9;
  uint64_t v39 = v118;
  uint64_t v119 = v36;
  BOOL v40 = v121;
  while (1)
  {
    uint64_t v128 = v35;
    v129(v40, v113 + v120 * v35, v39);
    uint64_t v41 = v116;
    RRCandidate.entity.getter();
    uint64_t v42 = RREntity.metadata.getter();
    (*v112)(v41, v117);
    uint64_t v43 = *(void *)(v42 + 16);
    if (v43)
    {
      unint64_t v44 = v42 + ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
      unint64_t v45 = *(void *)(v106 + 72);
      uint64_t v146 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
      unint64_t v147 = v45;
      uint64_t v130 = v42;
      swift_bridgeObjectRetain();
      unint64_t v46 = MEMORY[0x1E4FBC860];
      do
      {
        Swift::Int v47 = v150;
        uint64_t v48 = v146;
        v146(v150, (char *)v44, v5);
        v48(v9, v47, v5);
        int v49 = (*v142)(v9, v5);
        if (v49 == v141)
        {
          (*v134)(v9, v5);
          uint64_t v50 = v9;
          uint64_t v51 = *v148;
          BOOL v52 = v136;
          (*v148)(v136, v50, v11);
          v51(v4, v52, v11);
          (*v140)(v4, 0, 1, v11);
          (*v149)(v150, v5);
        }
        else
        {
          uint64_t v53 = v9;
          char v54 = *v149;
          (*v149)(v53, v5);
          (*v140)(v4, 1, 1, v11);
          v54(v150, v5);
        }
        if ((*v139)(v4, 1, v11) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        }
        else
        {
          BOOL v55 = *v148;
          unint64_t v56 = v135;
          (*v148)(v135, v4, v11);
          v55(v144, v56, v11);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1, v46);
          }
          unint64_t v58 = *(void *)(v46 + 16);
          unint64_t v57 = *(void *)(v46 + 24);
          if (v58 >= v57 >> 1) {
            unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1, v46);
          }
          *(void *)(v46 + 16) = v58 + 1;
          v55((char *)(v46+ ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))+ *(void *)(v138 + 72) * v58), v144, v11);
          uint64_t v4 = v137;
        }
        v44 += v147;
        --v43;
        uint64_t v9 = v145;
      }
      while (v43);
      swift_bridgeObjectRelease_n();
      int64_t v59 = v126;
      uint64_t v60 = v132;
      unint64_t v61 = v46;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v61 = MEMORY[0x1E4FBC860];
      int64_t v59 = v126;
      uint64_t v60 = v132;
    }
    int64_t v62 = *v124;
    (*v124)(v60, v111, v11);
    uint64_t v63 = *(void *)(v61 + 16);
    unint64_t v147 = v61;
    if (!v63)
    {
      uint64_t v68 = *v133;
      goto LABEL_22;
    }
    uint64_t v125 = v63;
    uint64_t v64 = v138;
    unint64_t v107 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    unint64_t v65 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
    unint64_t v122 = v61 + v107;
    uint64_t v146 = v65;
    ((void (*)(char *))v65)(v59);
    uint64_t v66 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, MEMORY[0x1E4FA3DE8]);
    swift_bridgeObjectRetain();
    uint64_t v130 = v66;
    char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v127 = *(void (**)(char *, uint64_t))(v64 + 8);
    v127(v59, v11);
    if (v67)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    if (v125 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v60 = v132;
      uint64_t v39 = v118;
      uint64_t v68 = v127;
      goto LABEL_25;
    }
    uint64_t v108 = *(void *)(v138 + 72);
    v146(v59, (char *)(v122 + v108), v11);
    char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v68 = v127;
    v127(v59, v11);
    if ((v69 & 1) == 0) {
      break;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t v4 = v137;
LABEL_28:
    unint64_t v70 = v122;
    char v71 = v127;
    v127(v132, v11);
    v62(v123, v105, v11);
    uint64_t v72 = v109;
    v146(v109, (char *)v70, v11);
    uint64_t v73 = v71;
    swift_bridgeObjectRetain();
    char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
    v71(v72, v11);
    if (v74) {
      goto LABEL_31;
    }
    if (v125 != 1)
    {
      unint64_t v122 = *(void *)(v138 + 72);
      char v75 = v109;
      v146(v109, (char *)(v70 + v122), v11);
      char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
      v71(v75, v11);
      if (v76)
      {
LABEL_31:
        swift_bridgeObjectRelease();
        v73(v123, v11);
        uint64_t v9 = v145;
        uint64_t v39 = v118;
        goto LABEL_32;
      }
      if (v125 != 2)
      {
        unint64_t v81 = v147 + v107 + 2 * v122;
        uint64_t v82 = 2;
        do
        {
          uint64_t v83 = v109;
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v146)(v109, v81, v11);
          uint64_t v85 = v82 + 1;
          if (__OFADD__(v82, 1)) {
            goto LABEL_57;
          }
          char v86 = dispatch thunk of static Equatable.== infix(_:_:)();
          v73(v83, v11);
          if (v86) {
            goto LABEL_31;
          }
          ++v82;
          v81 += v122;
        }
        while (v85 != v125);
      }
    }
    swift_bridgeObjectRelease();
    v73(v123, v11);
    swift_bridgeObjectRelease();
    uint64_t v87 = v115;
    uint64_t v78 = v121;
    uint64_t v39 = v118;
    v129(v115, (uint64_t)v121, v118);
    char v88 = RRCandidate.isAppEntityType.getter();
    uint64_t v79 = *v110;
    (*v110)(v87, v39);
    if (v88)
    {
      unint64_t v89 = *v103;
      (*v103)(v104, v78, v39);
      uint64_t v90 = v151;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v90 + 16) + 1, 1);
        uint64_t v90 = v151;
      }
      unint64_t v92 = *(void *)(v90 + 16);
      unint64_t v91 = *(void *)(v90 + 24);
      if (v92 >= v91 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
        uint64_t v90 = v151;
      }
      *(void *)(v90 + 16) = v92 + 1;
      v89((char *)(v90 + v102 + v92 * v120), v104, v39);
      uint64_t v151 = v90;
      uint64_t v9 = v145;
      BOOL v40 = v121;
      goto LABEL_34;
    }
    uint64_t v9 = v145;
LABEL_33:
    v79(v78, v39);
    BOOL v40 = v78;
LABEL_34:
    uint64_t v35 = v128 + 1;
    if (v128 + 1 == v114)
    {
      uint64_t v33 = v151;
      goto LABEL_55;
    }
  }
  uint64_t v80 = v125;
  if (v125 == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v60 = v132;
LABEL_22:
    uint64_t v39 = v118;
LABEL_25:
    v68(v60, v11);
    uint64_t v4 = v137;
LABEL_32:
    swift_bridgeObjectRelease();
    unint64_t v77 = v115;
    uint64_t v78 = v121;
    v129(v115, (uint64_t)v121, v39);
    uint64_t v79 = *v110;
    (*v110)(v77, v39);
    goto LABEL_33;
  }
  unint64_t v93 = v147 + v107 + 2 * v108;
  uint64_t v94 = 2;
  while (1)
  {
    uint64_t v95 = v126;
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v146)(v126, v93, v11);
    uint64_t v96 = v94 + 1;
    if (__OFADD__(v94, 1)) {
      break;
    }
    char v97 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v98 = v95;
    uint64_t v68 = v127;
    v127(v98, v11);
    if (v97) {
      goto LABEL_27;
    }
    ++v94;
    v93 += v108;
    uint64_t v60 = v132;
    if (v96 == v80)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = v145;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(a1, a2, v6, v7, v8);
}

uint64_t sub_1B9F42A5C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 40);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(_OWORD *)(v5 + 56) = v6;
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = v4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:), 0, 0);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B9F42BCC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  long long v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(a1, v4, v5, v6);
}

uint64_t specialized LinkExpansionContextBuilder.getAssociatedEntityTypeMetadata(actionMetadata:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_typeSpecificMetadata);
  if (!v2)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    goto LABEL_11;
  }
  uint64_t v3 = v2;
  type metadata accessor for LNActionTypeSpecificMetadataKey(0);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, type metadata accessor for LNActionTypeSpecificMetadataKey);
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v4 + 16))
  {
    long long v25 = 0u;
    long long v26 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  id v5 = (id)*MEMORY[0x1E4F72548];
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v7 & 1) == 0)
  {
    long long v25 = 0u;
    long long v26 = 0u;

    goto LABEL_10;
  }
  outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v25);

  swift_bridgeObjectRelease();
  if (!*((void *)&v26 + 1))
  {
LABEL_11:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v25, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
  if (swift_dynamicCast()) {
    return v24;
  }
LABEL_12:
  id v9 = objc_msgSend(a1, sel_parameters);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for LNActionParameterMetadata);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62) {
    goto LABEL_26;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v11)
  {
    uint64_t v12 = 4;
    while (1)
    {
      id v13 = (v10 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1BA9E3990](v12 - 4, v10)
          : *(id *)(v10 + 8 * v12);
      uint64_t v14 = v13;
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      id v16 = objc_msgSend(v13, sel_valueType);
      self;
      uint64_t v17 = (void *)swift_dynamicCastObjCClass();
      if (v17)
      {
        id v18 = objc_msgSend(v17, sel_memberValueType);

        id v16 = v18;
      }
      self;
      uint64_t v19 = swift_dynamicCastObjCClass();
      if (v19)
      {
        uint64_t v20 = (void *)v19;
        id v21 = v16;
        swift_bridgeObjectRelease();
        id v22 = objc_msgSend(v20, sel_typeName);
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return v8;
      }

      ++v12;
      if (v15 == v11) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized LinkExpansionContextBuilder.extractActionMetadata(allLinkActionsMetadata:)(uint64_t a1)
{
  unint64_t v108 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v102 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v103 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v104 = a1;
  swift_bridgeObjectRetain();
  id v5 = 0;
  int64_t v6 = 0;
  char v7 = &off_1E61F1000;
  while (1)
  {
    if (v4)
    {
      uint64_t v106 = (v4 - 1) & v4;
      int64_t v107 = v6;
      unint64_t v9 = __clz(__rbit64(v4)) | (v6 << 6);
    }
    else
    {
      int64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_115;
      }
      if (v10 >= v103) {
        goto LABEL_110;
      }
      unint64_t v11 = *(void *)(v102 + 8 * v10);
      int64_t v12 = v6 + 1;
      if (!v11)
      {
        int64_t v12 = v6 + 2;
        if (v6 + 2 >= v103) {
          goto LABEL_110;
        }
        unint64_t v11 = *(void *)(v102 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v6 + 3;
          if (v6 + 3 >= v103) {
            goto LABEL_110;
          }
          unint64_t v11 = *(void *)(v102 + 8 * v12);
          if (!v11)
          {
            uint64_t v13 = v6 + 4;
            if (v6 + 4 >= v103) {
              goto LABEL_110;
            }
            unint64_t v11 = *(void *)(v102 + 8 * v13);
            if (!v11)
            {
              while (1)
              {
                int64_t v12 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_116;
                }
                if (v12 >= v103) {
                  goto LABEL_110;
                }
                unint64_t v11 = *(void *)(v102 + 8 * v12);
                ++v13;
                if (v11) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v12 = v6 + 4;
          }
        }
      }
LABEL_21:
      uint64_t v106 = (v11 - 1) & v11;
      int64_t v107 = v12;
      unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    }
    uint64_t v14 = (uint64_t *)(*(void *)(v104 + 48) + 16 * v9);
    uint64_t v15 = v14[1];
    uint64_t v109 = *v14;
    id v16 = *(void **)(*(void *)(v104 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    id v17 = v16;
    unint64_t v122 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    id v18 = objc_msgSend(v17, sel_systemProtocolDefaults);
    uint64_t v19 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
    uint64_t v113 = v19;
    uint64_t v115 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    unsigned int v105 = v17;
    id v20 = objc_msgSend(v17, sel_actions);
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNActionMetadata);
    uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v22 = 0;
    uint64_t v110 = v21 + 64;
    uint64_t v23 = 1 << *(unsigned char *)(v21 + 32);
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    unint64_t v25 = v24 & *(void *)(v21 + 64);
    int64_t v111 = (unint64_t)(v23 + 63) >> 6;
    uint64_t v112 = v21;
    unint64_t v114 = v15;
LABEL_28:
    if (v25)
    {
      uint64_t v116 = (v25 - 1) & v25;
      int64_t v117 = v22;
      unint64_t v26 = __clz(__rbit64(v25)) | (v22 << 6);
LABEL_44:
      uint64_t v31 = (uint64_t *)(*(void *)(v112 + 48) + 16 * v26);
      uint64_t v124 = *v31;
      uint64_t v32 = *(void **)(*(void *)(v112 + 56) + 8 * v26);
      unint64_t v127 = v31[1];
      swift_bridgeObjectRetain();
      id v33 = v32;
      uint64_t v120 = specialized LinkExpansionContextBuilder.getAssociatedEntityTypeMetadata(actionMetadata:)(v33);
      uint64_t v126 = v34;
      char v36 = v35;
      id v118 = v33;
      id v37 = objc_msgSend(v33, sel_systemProtocolMetadata);
      type metadata accessor for LNSystemProtocolIdentifier(0);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LNSystemProtocolMetadata);
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
      uint64_t v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      int64_t v39 = 0;
      uint64_t v40 = v38 + 64;
      uint64_t v41 = 1 << *(unsigned char *)(v38 + 32);
      if (v41 < 64) {
        uint64_t v42 = ~(-1 << v41);
      }
      else {
        uint64_t v42 = -1;
      }
      unint64_t v43 = v42 & *(void *)(v38 + 64);
      int64_t v128 = (unint64_t)(v41 + 63) >> 6;
      char v119 = v36 & 1;
      if (v43)
      {
LABEL_48:
        unint64_t v44 = __clz(__rbit64(v43));
        v43 &= v43 - 1;
        unint64_t v45 = v44 | (v39 << 6);
        goto LABEL_49;
      }
      while (1)
      {
        int64_t v50 = v39 + 1;
        if (__OFADD__(v39, 1)) {
          break;
        }
        if (v50 >= v128) {
          goto LABEL_99;
        }
        unint64_t v51 = *(void *)(v40 + 8 * v50);
        ++v39;
        if (!v51)
        {
          int64_t v39 = v50 + 1;
          if (v50 + 1 >= v128) {
            goto LABEL_99;
          }
          unint64_t v51 = *(void *)(v40 + 8 * v39);
          if (!v51)
          {
            int64_t v39 = v50 + 2;
            if (v50 + 2 >= v128) {
              goto LABEL_99;
            }
            unint64_t v51 = *(void *)(v40 + 8 * v39);
            if (!v51)
            {
              int64_t v39 = v50 + 3;
              if (v50 + 3 >= v128) {
                goto LABEL_99;
              }
              unint64_t v51 = *(void *)(v40 + 8 * v39);
              if (!v51)
              {
                int64_t v39 = v50 + 4;
                if (v50 + 4 >= v128) {
                  goto LABEL_99;
                }
                unint64_t v51 = *(void *)(v40 + 8 * v39);
                if (!v51)
                {
                  int64_t v52 = v50 + 5;
                  if (v52 >= v128)
                  {
LABEL_99:
                    swift_bridgeObjectRelease();
                    swift_release();
                    id v84 = objc_msgSend(v118, sel_systemProtocols);
                    unint64_t v85 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                    if (v85 >> 62)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      uint64_t v86 = *(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    }
                    uint64_t v15 = v114;
                    swift_bridgeObjectRelease();
                    if (v86 == 1)
                    {
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      if (one-time initialization token for kLogger != -1) {
                        swift_once();
                      }
                      uint64_t v87 = type metadata accessor for Logger();
                      __swift_project_value_buffer(v87, (uint64_t)kLogger);
                      swift_bridgeObjectRetain_n();
                      id v88 = v118;
                      swift_bridgeObjectRetain();
                      id v89 = v88;
                      uint64_t v90 = Logger.logObject.getter();
                      os_log_type_t v91 = static os_log_type_t.error.getter();
                      if (os_log_type_enabled(v90, v91))
                      {
                        uint64_t v92 = swift_slowAlloc();
                        Swift::String v129 = v5;
                        uint64_t v93 = swift_slowAlloc();
                        v130[0] = v93;
                        *(_DWORD *)uint64_t v92 = 136315650;
                        swift_bridgeObjectRetain();
                        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v114, v130);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease_n();
                        *(_WORD *)(v92 + 12) = 2080;
                        swift_bridgeObjectRetain();
                        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v127, v130);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease_n();
                        *(_WORD *)(v92 + 22) = 2080;
                        id v94 = objc_msgSend(v89, sel_systemProtocols);
                        uint64_t v95 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v96 = MEMORY[0x1BA9E3080](v95, v113);
                        unint64_t v98 = v97;
                        swift_bridgeObjectRelease();
                        uint64_t v99 = v96;
                        uint64_t v15 = v114;
                        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v98, v130);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();

                        char v7 = &off_1E61F1000;
                        swift_bridgeObjectRelease();
                        _os_log_impl(&dword_1B9C64000, v90, v91, "[LinkExpansionContext] Expected exactly one systemProtocol for %s:%s, got %s", (uint8_t *)v92, 0x20u);
                        swift_arrayDestroy();
                        uint64_t v100 = v93;
                        id v5 = v129;
                        MEMORY[0x1BA9E48C0](v100, -1, -1);
                        MEMORY[0x1BA9E48C0](v92, -1, -1);
                      }
                      else
                      {

                        swift_bridgeObjectRelease_n();
                        swift_bridgeObjectRelease_n();
                      }
                    }
                    unint64_t v25 = v116;
                    int64_t v22 = v117;
                    goto LABEL_28;
                  }
                  unint64_t v51 = *(void *)(v40 + 8 * v52);
                  if (!v51)
                  {
                    while (1)
                    {
                      int64_t v39 = v52 + 1;
                      if (__OFADD__(v52, 1)) {
                        goto LABEL_112;
                      }
                      if (v39 >= v128) {
                        goto LABEL_99;
                      }
                      unint64_t v51 = *(void *)(v40 + 8 * v39);
                      ++v52;
                      if (v51) {
                        goto LABEL_75;
                      }
                    }
                  }
                  int64_t v39 = v52;
                }
              }
            }
          }
        }
LABEL_75:
        unint64_t v43 = (v51 - 1) & v51;
        unint64_t v45 = __clz(__rbit64(v51)) + (v39 << 6);
LABEL_49:
        unint64_t v46 = *(void **)(*(void *)(v38 + 48) + 8 * v45);
        Swift::Int v47 = self;
        id v48 = v46;
        id v49 = objc_msgSend(v47, (SEL)v7[486], v48);
        if (v49)
        {
          uint64_t v53 = v49;
          if (*(void *)(v115 + 16))
          {
            char v54 = v5;
            id v55 = v49;
            unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v55);
            if (v57)
            {
              unint64_t v58 = (uint64_t *)(*(void *)(v115 + 56) + 16 * v56);
              uint64_t v60 = *v58;
              uint64_t v59 = v58[1];
              swift_bridgeObjectRetain();

              if (v60 == v124 && v59 == v127)
              {
                swift_bridgeObjectRelease();
                char v121 = 1;
              }
              else
              {
                char v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
              }
              id v5 = v54;
            }
            else
            {

              char v121 = 0;
              id v5 = v54;
            }
          }
          else
          {
            char v121 = 0;
          }
          swift_bridgeObjectRetain();
          id v62 = v53;
          swift_bridgeObjectRetain();
          _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v5);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v130[0] = v122;
          unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
          uint64_t v66 = *(void *)(v122 + 16);
          BOOL v67 = (v64 & 1) == 0;
          uint64_t v68 = v66 + v67;
          if (__OFADD__(v66, v67)) {
            goto LABEL_109;
          }
          char v69 = v64;
          uint64_t v125 = v62;
          if (*(void *)(v122 + 24) >= v68)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v68, isUniquelyReferenced_nonNull_native);
            unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
            if ((v69 & 1) != (v71 & 1)) {
              goto LABEL_117;
            }
            unint64_t v65 = v70;
          }
          uint64_t v72 = (void *)v130[0];
          swift_bridgeObjectRelease();
          if (v69)
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            v72[(v65 >> 6) + 8] |= 1 << v65;
            *(void *)(v72[6] + 8 * v65) = v62;
            *(void *)(v72[7] + 8 * v65) = MEMORY[0x1E4FBC860];
            uint64_t v73 = v72[2];
            char v74 = v72;
            uint64_t v75 = v73 + 1;
            BOOL v76 = __OFADD__(v73, 1);
            BOOL v123 = v76;
            swift_bridgeObjectRetain();
            if (v123)
            {
              __break(1u);
LABEL_112:
              __break(1u);
              goto LABEL_113;
            }
            v74[2] = v75;
            id v77 = v62;
            uint64_t v72 = v74;
          }
          uint64_t v78 = v72[7];
          unint64_t v122 = (unint64_t)v72;
          swift_bridgeObjectRelease();
          uint64_t v79 = *(void **)(v78 + 8 * v65);
          char v80 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v78 + 8 * v65) = v79;
          if ((v80 & 1) == 0)
          {
            uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79[2] + 1, 1, v79);
            *(void *)(v78 + 8 * v65) = v79;
          }
          unint64_t v82 = v79[2];
          unint64_t v81 = v79[3];
          if (v82 >= v81 >> 1)
          {
            uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v81 > 1), v82 + 1, 1, v79);
            *(void *)(v78 + 8 * v65) = v79;
          }
          char v7 = &off_1E61F1000;
          v79[2] = v82 + 1;
          uint64_t v83 = &v79[5 * v82];
          v83[4] = v124;
          v83[5] = v127;
          v83[6] = v120;
          v83[7] = v126;
          *((unsigned char *)v83 + 64) = v119;
          *((unsigned char *)v83 + 65) = v121 & 1;
          *((unsigned char *)v83 + 66) = 0;

          id v5 = specialized thunk for @callee_guaranteed () -> (@owned [String]);
          if (v43) {
            goto LABEL_48;
          }
        }
        else
        {

          if (v43) {
            goto LABEL_48;
          }
        }
      }
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      swift_release();
      _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v5);
      return v108;
    }
    int64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
    if (v27 < v111)
    {
      unint64_t v28 = *(void *)(v110 + 8 * v27);
      int64_t v29 = v22 + 1;
      if (v28) {
        goto LABEL_43;
      }
      int64_t v29 = v22 + 2;
      if (v22 + 2 < v111)
      {
        unint64_t v28 = *(void *)(v110 + 8 * v29);
        if (v28) {
          goto LABEL_43;
        }
        int64_t v29 = v22 + 3;
        if (v22 + 3 < v111)
        {
          unint64_t v28 = *(void *)(v110 + 8 * v29);
          if (v28) {
            goto LABEL_43;
          }
          uint64_t v30 = v22 + 4;
          if (v22 + 4 < v111) {
            break;
          }
        }
      }
    }
LABEL_5:
    swift_bridgeObjectRelease();
    swift_release();
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    v130[0] = v108;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v122, v109, v15, v8);
    unint64_t v108 = v130[0];

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v4 = v106;
    int64_t v6 = v107;
  }
  unint64_t v28 = *(void *)(v110 + 8 * v30);
  if (v28)
  {
    int64_t v29 = v22 + 4;
LABEL_43:
    uint64_t v116 = (v28 - 1) & v28;
    int64_t v117 = v29;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v29 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v29 >= v111) {
      goto LABEL_5;
    }
    unint64_t v28 = *(void *)(v110 + 8 * v29);
    ++v30;
    if (v28) {
      goto LABEL_43;
    }
  }
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:)(uint64_t a1, uint64_t a2, int *a3)
{
  id v5 = v3;
  int64_t v6 = v3 + 8;
  v5[12] = a1;
  v5[13] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  v5[14] = static MessageBusActor.shared;
  unint64_t v9 = (uint64_t (*)(void *))((char *)a3 + *a3);
  swift_retain();
  char v7 = (void *)swift_task_alloc();
  v5[15] = v7;
  *char v7 = v5;
  v7[1] = specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:);
  return v9(v6);
}

uint64_t specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:);
  }
  else {
    uint64_t v3 = specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:);
  }
  return MEMORY[0x1F4188298](v3, v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  id v18 = v0;
  swift_release();
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)kLogger);
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  int64_t v6 = static os_log_type_t.error.getter();
  char v7 = os_log_type_enabled(v5, v6);
  char v8 = (void *)v0[16];
  unint64_t v9 = v0[13];
  if (v7)
  {
    uint64_t v10 = v0[12];
    unint64_t v11 = swift_slowAlloc();
    id v16 = swift_slowAlloc();
    id v17 = v16;
    *(_DWORD *)unint64_t v11 = 136315394;
    swift_bridgeObjectRetain();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue();
    int64_t v12 = Error.localizedDescription.getter();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v5, v6, "[LinkExpansionContext] %s : %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v16, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14(0);
}

unint64_t lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject;
  if (!lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject)
  {
    type metadata accessor for OS_dispatch_queue(255, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject);
  }
  return result;
}

uint64_t LinkMetadataProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  return v0;
}

uint64_t static LinkMetadataProvider.Errors.== infix(_:_:)()
{
  return 1;
}

void LinkMetadataProvider.Errors.hash(into:)()
{
}

Swift::Int LinkMetadataProvider.Errors.hashValue.getter()
{
  return Hasher._finalize()();
}

id LinkMetadataProvider.wrappedProvider.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t LinkMetadataProvider.actionMetadata()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](LinkMetadataProvider.actionMetadata(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_retain();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = LinkMetadataProvider.actionMetadata();
  *(void *)(v1 + 80) = *(void *)(v0 + 16);
  *(_OWORD *)(v1 + 64) = xmmword_1BA0578D0;
  return MEMORY[0x1F4188298](specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:), 0, 0);
}

uint64_t LinkMetadataProvider.actionMetadata()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 32) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x1F4188298](LinkMetadataProvider.actionMetadata(), 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t LinkMetadataProvider.conditionallyEnabledActionMetadata()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](LinkMetadataProvider.conditionallyEnabledActionMetadata(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_retain();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = LinkMetadataProvider.conditionallyEnabledActionMetadata();
  *(void *)(v1 + 120) = *(void *)(v0 + 16);
  *(_OWORD *)(v1 + 104) = xmmword_1BA0578D0;
  return MEMORY[0x1F4188298](specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = MEMORY[0x1E4FBC868];
  return v1(v2);
}

uint64_t LinkMetadataProvider.conditionallyEnabledActionMetadata()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 32) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x1F4188298](LinkMetadataProvider.conditionallyEnabledActionMetadata(), 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t LinkMetadataProvider.bundles()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](LinkMetadataProvider.bundles(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_retain();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = LinkMetadataProvider.bundles();
  *(void *)(v1 + 80) = *(void *)(v0 + 16);
  *(_OWORD *)(v1 + 64) = xmmword_1BA0578D0;
  return MEMORY[0x1F4188298](specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  return v1(v2);
}

uint64_t LinkMetadataProvider.bundles()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 32) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x1F4188298](LinkMetadataProvider.bundles(), 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t LinkMetadataProvider.deinit()
{
  return v0;
}

uint64_t LinkMetadataProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LinkMetadataProvider.init()()
{
  *(void *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  return v0;
}

uint64_t protocol witness for LinkMetadataProviding.actionMetadata() in conformance LinkMetadataProvider()
{
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x1F4188298](LinkMetadataProvider.actionMetadata(), 0, 0);
}

uint64_t protocol witness for LinkMetadataProviding.conditionallyEnabledActionMetadata() in conformance LinkMetadataProvider()
{
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x1F4188298](LinkMetadataProvider.conditionallyEnabledActionMetadata(), 0, 0);
}

uint64_t protocol witness for LinkMetadataProviding.bundles() in conformance LinkMetadataProvider()
{
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x1F4188298](LinkMetadataProvider.bundles(), 0, 0);
}

uint64_t specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[14] = a2;
  v3[15] = a3;
  v3[13] = a1;
  return MEMORY[0x1F4188298](specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:), 0, 0);
}

{
  void *v3;
  uint64_t v5;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return MEMORY[0x1F4188298](specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:), 0, 0);
}

{
  void *v3;
  uint64_t v5;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return MEMORY[0x1F4188298](specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:), 0, 0);
}

uint64_t specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:)()
{
  uint64_t v31 = v0;
  v30[1] = *MEMORY[0x1E4F143B8];
  v0[10] = 0;
  uint64_t v1 = v0 + 10;
  uint64_t v2 = v0[13];
  lazy protocol witness table accessor for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors();
  uint64_t v3 = (void *)swift_allocError();
  swift_beginAccess();
  if (v0[10] < v2)
  {
    uint64_t v4 = *(void **)(v0[15] + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA0578E0;
    *(void *)(inited + 32) = objc_msgSend(self, sel_conditionallyEnabledProtocol);
    v30[0] = inited;
    specialized Array._endMutation()();
    specialized Set.init<A>(_:)(inited);
    swift_bridgeObjectRelease();
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v0[11] = 0;
    id v7 = objc_msgSend(v4, sel_actionsConformingToSystemProtocols_logicalType_bundleIdentifier_error_, isa, 2, 0, v0 + 11);

    char v8 = (void *)v0[11];
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : LNActionMetadata]);
      uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      id v10 = v8;

      swift_release();
      unint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
      return v11(v9);
    }
    id v14 = v8;
    uint64_t v15 = (void *)_convertNSErrorToError(_:)();
    v0[16] = v15;

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    id v17 = v15;
    id v18 = v15;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = v0[13];
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v30[0] = v23;
      *(_DWORD *)uint64_t v22 = 134218498;
      *(void *)(v22 + 4) = v0[10];
      *(_WORD *)(v22 + 12) = 2048;
      *(void *)(v22 + 14) = v21;
      *(_WORD *)(v22 + 22) = 2080;
      v0[12] = v15;
      id v24 = v15;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v25 = String.init<A>(describing:)();
      *(void *)(v22 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v30);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v19, v20, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    else
    {
    }
    if (__OFADD__(*v1, 1))
    {
      __break(1u);
    }
    else
    {
      unint64_t v27 = v0[14];
      v0[10] = *v1 + 1;
      if (is_mul_ok(v27, 0xF4240uLL))
      {
        id v28 = v15;
        int64_t v29 = (void *)swift_task_alloc();
        v0[17] = v29;
        void *v29 = v0;
        v29[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
        return MEMORY[0x1F4187DE0](1000000 * v27);
      }
    }
    __break(1u);
  }
  swift_willThrow();
  swift_release();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  }
  else {
    uint64_t v2 = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  unint64_t inited;
  Class isa;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t (*v11)(uint64_t);
  uint64_t (*v13)(void);
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;

  uint64_t v31 = v0;
  v30[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 104);

  uint64_t v2 = (void *)(v0 + 80);
  if (*(void *)(v0 + 80) < v1)
  {
    uint64_t v3 = *(void **)(v0 + 128);
    uint64_t v4 = *(void **)(*(void *)(v0 + 120) + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    unint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA0578E0;
    *(void *)(inited + 32) = objc_msgSend(self, sel_conditionallyEnabledProtocol);
    v30[0] = inited;
    specialized Array._endMutation()();
    specialized Set.init<A>(_:)(inited);
    swift_bridgeObjectRelease();
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 88) = 0;
    id v7 = objc_msgSend(v4, sel_actionsConformingToSystemProtocols_logicalType_bundleIdentifier_error_, isa, 2, 0, v0 + 88);

    char v8 = *(void **)(v0 + 88);
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : LNActionMetadata]);
      uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      id v10 = v8;

      swift_release();
      unint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v11(v9);
    }
    id v14 = v8;
    uint64_t v15 = (void *)_convertNSErrorToError(_:)();
    *(void *)(v0 + 128) = v15;

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    id v17 = v15;
    id v18 = v15;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = *(void *)(v0 + 104);
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v30[0] = v23;
      *(_DWORD *)uint64_t v22 = 134218498;
      *(void *)(v22 + 4) = *(void *)(v0 + 80);
      *(_WORD *)(v22 + 12) = 2048;
      *(void *)(v22 + 14) = v21;
      *(_WORD *)(v22 + 22) = 2080;
      *(void *)(v0 + 96) = v15;
      id v24 = v15;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v25 = String.init<A>(describing:)();
      *(void *)(v22 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v30);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v19, v20, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    else
    {
    }
    if (__OFADD__(*v2, 1))
    {
      __break(1u);
    }
    else
    {
      unint64_t v27 = *(void *)(v0 + 112);
      *(void *)(v0 + 80) = *v2 + 1;
      if (is_mul_ok(v27, 0xF4240uLL))
      {
        id v28 = v15;
        int64_t v29 = (void *)swift_task_alloc();
        *(void *)(v0 + 136) = v29;
        void *v29 = v0;
        v29[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
        return MEMORY[0x1F4187DE0](1000000 * v27);
      }
    }
    __break(1u);
  }
  swift_willThrow();
  swift_release();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 128);

  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v12)(void);
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29[2];
  void *v30;
  uint64_t v31;

  uint64_t v30 = v0;
  v29[1] = *MEMORY[0x1E4F143B8];
  v0[5] = 0;
  uint64_t v1 = v0 + 5;
  uint64_t v2 = v0[8];
  lazy protocol witness table accessor for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors();
  uint64_t v3 = (void *)swift_allocError();
  swift_beginAccess();
  if (v0[5] < v2)
  {
    uint64_t v4 = *(void **)(v0[10] + 16);
    v0[6] = 0;
    uint64_t v5 = objc_msgSend(v4, sel_bundlesWithError_, v0 + 6);
    int64_t v6 = (void *)v0[6];
    if (v5)
    {
      id v7 = v5;
      char v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v6;

      swift_release();
      id v10 = (uint64_t (*)(uint64_t))v0[1];
      return v10(v8);
    }
    uint64_t v13 = v6;
    id v14 = (void *)_convertNSErrorToError(_:)();
    v0[11] = v14;

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = v14;
    id v17 = v14;
    id v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = v0[8];
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v29[0] = v22;
      *(_DWORD *)uint64_t v21 = 134218498;
      *(void *)(v21 + 4) = v0[5];
      *(_WORD *)(v21 + 12) = 2048;
      *(void *)(v21 + 14) = v20;
      *(_WORD *)(v21 + 22) = 2080;
      v0[7] = v14;
      uint64_t v23 = v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      id v24 = String.init<A>(describing:)();
      *(void *)(v21 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v29);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v18, v19, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
    else
    {
    }
    if (__OFADD__(*v1, 1))
    {
      __break(1u);
    }
    else
    {
      unint64_t v26 = v0[9];
      v0[5] = *v1 + 1;
      if (is_mul_ok(v26, 0xF4240uLL))
      {
        unint64_t v27 = v14;
        id v28 = (void *)swift_task_alloc();
        v0[12] = v28;
        *id v28 = v0;
        v28[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
        return MEMORY[0x1F4187DE0](1000000 * v26);
      }
    }
    __break(1u);
  }
  swift_willThrow();
  swift_release();
  int64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  }
  else {
    uint64_t v2 = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v12)(void);
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  v29[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 64);

  uint64_t v2 = (void *)(v0 + 40);
  if (*(void *)(v0 + 40) < v1)
  {
    uint64_t v3 = *(void **)(*(void *)(v0 + 80) + 16);
    *(void *)(v0 + 48) = 0;
    uint64_t v4 = *(void **)(v0 + 88);
    uint64_t v5 = objc_msgSend(v3, sel_bundlesWithError_, v0 + 48);
    int64_t v6 = *(void **)(v0 + 48);
    if (v5)
    {
      id v7 = v5;
      char v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v6;

      swift_release();
      id v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v10(v8);
    }
    uint64_t v13 = v6;
    id v14 = (void *)_convertNSErrorToError(_:)();
    *(void *)(v0 + 88) = v14;

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = v14;
    id v17 = v14;
    id v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = *(void *)(v0 + 64);
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v29[0] = v22;
      *(_DWORD *)uint64_t v21 = 134218498;
      *(void *)(v21 + 4) = *(void *)(v0 + 40);
      *(_WORD *)(v21 + 12) = 2048;
      *(void *)(v21 + 14) = v20;
      *(_WORD *)(v21 + 22) = 2080;
      *(void *)(v0 + 56) = v14;
      uint64_t v23 = v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      id v24 = String.init<A>(describing:)();
      *(void *)(v21 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v29);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v18, v19, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
    else
    {
    }
    if (__OFADD__(*v2, 1))
    {
      __break(1u);
    }
    else
    {
      unint64_t v26 = *(void *)(v0 + 72);
      *(void *)(v0 + 40) = *v2 + 1;
      if (is_mul_ok(v26, 0xF4240uLL))
      {
        unint64_t v27 = v14;
        id v28 = (void *)swift_task_alloc();
        *(void *)(v0 + 96) = v28;
        *id v28 = v0;
        v28[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
        return MEMORY[0x1F4187DE0](1000000 * v26);
      }
    }
    __break(1u);
  }
  swift_willThrow();
  swift_release();
  int64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v12)(void);
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29[2];
  void *v30;
  uint64_t v31;

  uint64_t v30 = v0;
  v29[1] = *MEMORY[0x1E4F143B8];
  v0[5] = 0;
  uint64_t v1 = v0 + 5;
  uint64_t v2 = v0[8];
  lazy protocol witness table accessor for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors();
  uint64_t v3 = (void *)swift_allocError();
  swift_beginAccess();
  if (v0[5] < v2)
  {
    uint64_t v4 = *(void **)(v0[10] + 16);
    v0[6] = 0;
    uint64_t v5 = objc_msgSend(v4, sel_actionsAndSystemProtocolDefaultsForBundleIdentifier_error_, 0, v0 + 6);
    int64_t v6 = (void *)v0[6];
    if (v5)
    {
      id v7 = v5;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for LNBundleActionsMetadata);
      char v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v6;

      swift_release();
      id v10 = (uint64_t (*)(uint64_t))v0[1];
      return v10(v8);
    }
    uint64_t v13 = v6;
    id v14 = (void *)_convertNSErrorToError(_:)();
    v0[11] = v14;

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = v14;
    id v17 = v14;
    id v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = v0[8];
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v29[0] = v22;
      *(_DWORD *)uint64_t v21 = 134218498;
      *(void *)(v21 + 4) = v0[5];
      *(_WORD *)(v21 + 12) = 2048;
      *(void *)(v21 + 14) = v20;
      *(_WORD *)(v21 + 22) = 2080;
      v0[7] = v14;
      uint64_t v23 = v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      id v24 = String.init<A>(describing:)();
      *(void *)(v21 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v29);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v18, v19, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
    else
    {
    }
    if (__OFADD__(*v1, 1))
    {
      __break(1u);
    }
    else
    {
      unint64_t v26 = v0[9];
      v0[5] = *v1 + 1;
      if (is_mul_ok(v26, 0xF4240uLL))
      {
        unint64_t v27 = v14;
        id v28 = (void *)swift_task_alloc();
        v0[12] = v28;
        *id v28 = v0;
        v28[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
        return MEMORY[0x1F4187DE0](1000000 * v26);
      }
    }
    __break(1u);
  }
  swift_willThrow();
  swift_release();
  int64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  }
  else {
    uint64_t v2 = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v12)(void);
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  v29[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 64);

  uint64_t v2 = (void *)(v0 + 40);
  if (*(void *)(v0 + 40) < v1)
  {
    uint64_t v3 = *(void **)(*(void *)(v0 + 80) + 16);
    *(void *)(v0 + 48) = 0;
    uint64_t v4 = *(void **)(v0 + 88);
    uint64_t v5 = objc_msgSend(v3, sel_actionsAndSystemProtocolDefaultsForBundleIdentifier_error_, 0, v0 + 48);
    int64_t v6 = *(void **)(v0 + 48);
    if (v5)
    {
      id v7 = v5;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for LNBundleActionsMetadata);
      char v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v6;

      swift_release();
      id v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v10(v8);
    }
    uint64_t v13 = v6;
    id v14 = (void *)_convertNSErrorToError(_:)();
    *(void *)(v0 + 88) = v14;

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = v14;
    id v17 = v14;
    id v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = *(void *)(v0 + 64);
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v29[0] = v22;
      *(_DWORD *)uint64_t v21 = 134218498;
      *(void *)(v21 + 4) = *(void *)(v0 + 40);
      *(_WORD *)(v21 + 12) = 2048;
      *(void *)(v21 + 14) = v20;
      *(_WORD *)(v21 + 22) = 2080;
      *(void *)(v0 + 56) = v14;
      uint64_t v23 = v14;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      id v24 = String.init<A>(describing:)();
      *(void *)(v21 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v29);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v18, v19, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
    else
    {
    }
    if (__OFADD__(*v2, 1))
    {
      __break(1u);
    }
    else
    {
      unint64_t v26 = *(void *)(v0 + 72);
      *(void *)(v0 + 40) = *v2 + 1;
      if (is_mul_ok(v26, 0xF4240uLL))
      {
        unint64_t v27 = v14;
        id v28 = (void *)swift_task_alloc();
        *(void *)(v0 + 96) = v28;
        *id v28 = v0;
        v28[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
        return MEMORY[0x1F4187DE0](1000000 * v26);
      }
    }
    __break(1u);
  }
  swift_willThrow();
  swift_release();
  int64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 88);

  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v1;

  return specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:)();
}

unint64_t lazy protocol witness table accessor for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors;
  if (!lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors;
  if (!lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors);
  }
  return result;
}

uint64_t dispatch thunk of LinkMetadataProviding.actionMetadata()(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v7(a1, a2);
}

uint64_t dispatch thunk of LinkMetadataProviding.conditionallyEnabledActionMetadata()(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 16) + **(int **)(a2 + 16));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of LinkMetadataProviding.bundles()(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 24) + **(int **)(a2 + 24));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v7(a1, a2);
}

uint64_t type metadata accessor for LinkMetadataProvider()
{
  return self;
}

uint64_t method lookup function for LinkMetadataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkMetadataProvider);
}

uint64_t dispatch thunk of LinkMetadataProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unsigned char *storeEnumTagSinglePayload for LinkMetadataProvider.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9F47298);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkMetadataProvider.Errors()
{
  return &type metadata for LinkMetadataProvider.Errors;
}

Swift::String *kLinkEntityTypeUserDataKey.unsafeMutableAddressor()
{
  return &kLinkEntityTypeUserDataKey;
}

Swift::String *kDefaultLinkActionUserDataKey.unsafeMutableAddressor()
{
  return &kDefaultLinkActionUserDataKey;
}

Swift::String *kOnScreenLinkActionUserDataKey.unsafeMutableAddressor()
{
  return &kOnScreenLinkActionUserDataKey;
}

Swift::String *kLinkEntityTypeRequirementUserDataKey.unsafeMutableAddressor()
{
  return &kLinkEntityTypeRequirementUserDataKey;
}

uint64_t static EntityTypeMetadata.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a2)
  {
    if (!a5)
    {
LABEL_9:
      char v9 = a3 ^ a6 ^ 1;
      return v9 & 1;
    }
LABEL_8:
    char v9 = 0;
    return v9 & 1;
  }
  if (!a5) {
    goto LABEL_8;
  }
  if (a1 == a4 && a2 == a5) {
    goto LABEL_9;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v9 = 0;
  if (v8) {
    goto LABEL_9;
  }
  return v9 & 1;
}

SiriKitRuntime::EntityTypeMetadata __swiftcall EntityTypeMetadata.init(entityTypeName:entityTypeRequired:)(Swift::String_optional entityTypeName, Swift::Bool entityTypeRequired)
{
  Swift::Bool v2 = entityTypeRequired;
  result.entityTypeName = entityTypeName;
  result.entityTypeRequired = v2;
  return result;
}

Swift::String *kLinkUserParseUserDataKey.unsafeMutableAddressor()
{
  return &kLinkUserParseUserDataKey;
}

uint64_t EntityTypeMetadata.entityTypeName.getter(uint64_t a1)
{
  return a1;
}

uint64_t EntityTypeMetadata.entityTypeRequired.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EntityTypeMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (!v3)
  {
    if (!v5) {
      return v4 ^ v6 ^ 1u;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  if (*(void *)a1 == *(void *)a2 && v3 == v5) {
    return v4 ^ v6 ^ 1u;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v8) {
    return v4 ^ v6 ^ 1u;
  }
  return result;
}

uint64_t LinkParseExpansion.linkExpansionContext.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t one-time initialization function for allowListedParsers()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Parser.ParserIdentifier>);
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BA04F9C0;
  unint64_t v5 = v4 + v3;
  int v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E4FA2798], v0);
  v6(v5 + v2, *MEMORY[0x1E4FA27A8], v0);
  uint64_t v7 = specialized Set.init(_nonEmptyArrayLiteral:)(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  static LinkParseExpansion.allowListedParsers = v7;
  return result;
}

uint64_t *LinkParseExpansion.allowListedParsers.unsafeMutableAddressor()
{
  if (one-time initialization token for allowListedParsers != -1) {
    swift_once();
  }
  return &static LinkParseExpansion.allowListedParsers;
}

uint64_t static LinkParseExpansion.allowListedParsers.getter()
{
  if (one-time initialization token for allowListedParsers != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t LinkParseExpansion.__allocating_init(linkExpansionContext:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t LinkParseExpansion.init(linkExpansionContext:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t LinkParseExpansion.expand(parses:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = *v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USOParse?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for USOParse();
  uint64_t v59 = *(void *)(v8 - 8);
  uint64_t v60 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  BOOL v67 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v56 = (char *)v54 - v11;
  uint64_t v12 = type metadata accessor for Parse();
  uint64_t v66 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v61 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)kLogger);
  swift_retain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  char v57 = v7;
  uint64_t v58 = v4;
  if (v18)
  {
    uint64_t v19 = (_DWORD *)swift_slowAlloc();
    char v64 = (unsigned int (**)(void, void, void))swift_slowAlloc();
    v69[0] = (uint64_t)v64;
    unint64_t v65 = (void (**)(uint64_t, uint64_t))a1;
    os_log_type_t v20 = (uint8_t *)v19;
    *uint64_t v19 = 136315138;
    uint64_t v63 = (void (**)(char *, char *, uint64_t))(v19 + 1);
    uint64_t v21 = LinkExpansionContext.debugDescription.getter();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v69);
    uint64_t v7 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v16, v17, "[LinkParseExpansion] Expanding LINK parses from context %s", v20, 0xCu);
    uint64_t v23 = v64;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    id v24 = v20;
    a1 = (uint64_t)v65;
    MEMORY[0x1BA9E48C0](v24, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = swift_bridgeObjectRetain();
  unint64_t v26 = specialized Sequence.compactMap<A>(_:)(v25, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = (uint64_t)v61;
  if (v27)
  {
    v54[1] = v15;
    uint64_t v55 = v2;
    uint64_t v30 = *(void *)(v66 + 16);
    uint64_t v29 = v66 + 16;
    unint64_t v31 = v26 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
    unint64_t v65 = (void (**)(uint64_t, uint64_t))(v66 + 8);
    uint64_t v66 = v30;
    uint64_t v63 = (void (**)(char *, char *, uint64_t))(v59 + 32);
    char v64 = (unsigned int (**)(void, void, void))(v59 + 48);
    uint64_t v62 = *(void *)(v29 + 56);
    v54[0] = v26;
    swift_bridgeObjectRetain();
    uint64_t v32 = MEMORY[0x1E4FBC860];
    uint64_t v33 = v60;
    do
    {
      ((void (*)(uint64_t, unint64_t, uint64_t))v66)(v28, v31, v12);
      closure #1 in LinkParseExpansion.expand(parses:)(v28, (uint64_t)v7);
      (*v65)(v28, v12);
      if ((*v64)(v7, 1, v33) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for USOParse?);
      }
      else
      {
        uint64_t v34 = v29;
        uint64_t v35 = v12;
        uint64_t v36 = v33;
        id v37 = *v63;
        uint64_t v38 = v56;
        (*v63)(v56, v7, v36);
        v37(v67, v38, v36);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1, v32);
        }
        unint64_t v40 = *(void *)(v32 + 16);
        unint64_t v39 = *(void *)(v32 + 24);
        uint64_t v12 = v35;
        if (v40 >= v39 >> 1) {
          uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v32);
        }
        uint64_t v29 = v34;
        *(void *)(v32 + 16) = v40 + 1;
        unint64_t v41 = v32
            + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))
            + *(void *)(v59 + 72) * v40;
        uint64_t v42 = v60;
        v37((char *)v41, v67, v60);
        uint64_t v33 = v42;
        uint64_t v7 = v57;
        uint64_t v28 = (uint64_t)v61;
      }
      v31 += v62;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease_n();
    uint64_t v2 = v55;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = MEMORY[0x1E4FBC860];
  }
  swift_retain();
  uint64_t v43 = specialized Sequence.flatMap<A>(_:)(v32, v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain_n();
  unint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    v69[0] = v47;
    *(_DWORD *)unint64_t v46 = 136315138;
    uint64_t v48 = type metadata accessor for ParseUserDataAttachment();
    uint64_t v49 = swift_bridgeObjectRetain();
    uint64_t v50 = MEMORY[0x1BA9E3080](v49, v48);
    unint64_t v52 = v51;
    swift_bridgeObjectRelease();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v44, v45, "[LinkParseExpansion] Returning expanded parses: %s", v46, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v47, -1, -1);
    MEMORY[0x1BA9E48C0](v46, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v43;
}

uint64_t closure #1 in LinkParseExpansion.expand(parses:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v2 = MEMORY[0x1F4188790](v41);
  v40[2] = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v40 - v4;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v43 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for USOParse();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v42 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)v40 - v13);
  uint64_t v15 = type metadata accessor for Parse();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  BOOL v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v44, v15);
  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 88))(v18, v15) != *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v45, 1, 1, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v44 = *(void *)(v10 + 32);
  ((void (*)(unsigned int (**)(char *, uint64_t, uint64_t), char *, uint64_t))v44)(v14, v18, v9);
  uint64_t v19 = v14;
  USOParse.parserIdentifier.getter();
  os_log_type_t v20 = v43;
  uint64_t v21 = v10;
  if (v43[6](v5, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  }
  else
  {
    v20[4](v8, (uint64_t)v5, v6);
    uint64_t v23 = v20;
    if (one-time initialization token for allowListedParsers != -1) {
      swift_once();
    }
    char v24 = specialized Set.contains(_:)((uint64_t)v8, static LinkParseExpansion.allowListedParsers);
    ((void (*)(char *, uint64_t))v23[1])(v8, v6);
    if (v24)
    {
      uint64_t v25 = v45;
      ((void (*)(uint64_t, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))v44)(v45, v19, v9);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v25, 0, 1, v9);
    }
  }
  uint64_t v26 = v45;
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)kLogger);
  uint64_t v28 = *(void (**)(char *, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))(v10 + 16);
  uint64_t v29 = v42;
  v28(v42, v19, v9);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v43 = v19;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v47 = v34;
    uint64_t v44 = v21;
    *(_DWORD *)uint64_t v33 = 136315138;
    v40[1] = v33 + 4;
    USOParse.parserIdentifier.getter();
    uint64_t v35 = String.init<A>(describing:)();
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v37 = *(void (**)(char *, uint64_t))(v44 + 8);
    v37(v29, v9);
    _os_log_impl(&dword_1B9C64000, v30, v31, "[LinkParseExpansion] Skipping link parse expansion for parse from %s", v33, 0xCu);
    swift_arrayDestroy();
    uint64_t v38 = v34;
    uint64_t v26 = v45;
    MEMORY[0x1BA9E48C0](v38, -1, -1);
    MEMORY[0x1BA9E48C0](v33, -1, -1);

    v37((char *)v43, v9);
    uint64_t v21 = v44;
  }
  else
  {

    unint64_t v39 = *(void (**)(char *, uint64_t))(v21 + 8);
    v39(v29, v9);
    v39((char *)v19, v9);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v26, 1, 1, v9);
}

uint64_t closure #2 in LinkParseExpansion.expand(parses:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for USOParse();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v45 - v10;
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)kLogger);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v11, a1, v5);
  uint64_t v51 = v13;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  uint64_t v48 = v15;
  int v47 = v16;
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v50 = a1;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v46 = a2;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v45 = swift_slowAlloc();
    *(void *)&long long v55 = v45;
    *(_DWORD *)uint64_t v19 = 136315138;
    v14(v9, (uint64_t)v11, v5);
    uint64_t v20 = String.init<A>(reflecting:)();
    *(void *)&v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, (uint64_t *)&v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    unint64_t v22 = v48;
    _os_log_impl(&dword_1B9C64000, v48, (os_log_type_t)v47, "[LinkParseExpansion] Expanding parse %s", v19, 0xCu);
    uint64_t v23 = v45;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    char v24 = v19;
    a2 = v46;
    MEMORY[0x1BA9E48C0](v24, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  specialized LinkUsoParser.extractParseInformation(usoParse:)((uint64_t)&v55);
  outlined init with take of LNSystemProtocol?((uint64_t)&v55, (uint64_t)&v61);
  uint64_t v59 = v56;
  v60[0] = *((void *)&v55 + 1);
  uint64_t v58 = *((void *)&v56 + 1);
  outlined retain of RequestConjunctionInfo?(&v61);
  outlined retain of [String : Set<String>]((uint64_t)v60);
  outlined retain of [String : Set<String>]((uint64_t)&v59);
  outlined retain of [String : Set<String>]((uint64_t)&v58);
  outlined retain of RequestConjunctionInfo?(&v61);
  outlined retain of [String : Set<String>]((uint64_t)v60);
  outlined retain of [String : Set<String>]((uint64_t)&v59);
  outlined retain of [String : Set<String>]((uint64_t)&v58);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v54 = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    v52[0] = v55;
    v52[1] = v56;
    char v53 = v57;
    outlined retain of RequestConjunctionInfo?(&v61);
    outlined retain of [String : Set<String>]((uint64_t)v60);
    outlined retain of [String : Set<String>]((uint64_t)&v59);
    outlined retain of [String : Set<String>]((uint64_t)&v58);
    uint64_t v29 = String.init<A>(reflecting:)();
    *(void *)&v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of RequestConjunctionInfo?(&v61);
    outlined release of [String : Set<String>]((uint64_t)v60);
    outlined release of [String : Set<String>]((uint64_t)&v59);
    outlined release of [String : Set<String>]((uint64_t)&v58);
    outlined release of RequestConjunctionInfo?(&v61);
    outlined release of [String : Set<String>]((uint64_t)v60);
    outlined release of [String : Set<String>]((uint64_t)&v59);
    outlined release of [String : Set<String>]((uint64_t)&v58);
    _os_log_impl(&dword_1B9C64000, v25, v26, "[LinkParseExpansion] Extracted parse metadata %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v28, -1, -1);
    MEMORY[0x1BA9E48C0](v27, -1, -1);
  }
  else
  {
    outlined release of RequestConjunctionInfo?(&v61);
    outlined release of [String : Set<String>]((uint64_t)v60);
    outlined release of [String : Set<String>]((uint64_t)&v59);
    outlined release of [String : Set<String>]((uint64_t)&v58);
    outlined release of RequestConjunctionInfo?(&v61);
    outlined release of [String : Set<String>]((uint64_t)v60);
    outlined release of [String : Set<String>]((uint64_t)&v59);
    outlined release of [String : Set<String>]((uint64_t)&v58);
  }

  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  uint64_t v33 = specialized LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)((void **)&v55, v31, v32);
  swift_release();
  swift_release();
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(void *)&v52[0] = v37;
    *(_DWORD *)unint64_t v36 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (appBundleId: String, userData: [String : Any]));
    uint64_t v39 = MEMORY[0x1BA9E3080](v33, v38);
    unint64_t v41 = v40;
    swift_bridgeObjectRelease();
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, (uint64_t *)v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v34, v35, "[LinkParseExpansion] Compatible Link Actions %s", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v37, -1, -1);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
  }
  else
  {

    uint64_t v42 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1F4188790](v42);
  *(&v45 - 2) = v50;
  uint64_t v43 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS11appBundleId_SDySSypG8userDatatG_14SiriKitRuntime09ParseUserH10AttachmentVs5NeverOTg5((void (*)(void *))partial apply for closure #1 in closure #2 in LinkParseExpansion.expand(parses:), (uint64_t)(&v45 - 4), v33);
  outlined release of RequestConjunctionInfo?(&v61);
  outlined release of [String : Set<String>]((uint64_t)v60);
  outlined release of [String : Set<String>]((uint64_t)&v59);
  outlined release of [String : Set<String>]((uint64_t)&v58);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v49 = v43;
  return result;
}

uint64_t closure #1 in closure #2 in LinkParseExpansion.expand(parses:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v9 = *(void *)(v24 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v24);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v25 = type metadata accessor for Parse();
  uint64_t v13 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  v23[1] = a1[1];
  v23[2] = v16;
  uint64_t v17 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  USOParse.userParse.getter();
  USOParse.userParse.getter();
  Siri_Nlu_External_UserParse.parser.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v24);
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v27);
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 0, 1, v18);
  USOParse.init(userParse:parserIdentifier:appBundleId:)();
  uint64_t v19 = v25;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4FA1F48], v25);
  uint64_t v20 = type metadata accessor for ParseUserDataAttachment();
  uint64_t v21 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v28 + *(int *)(v20 + 20), v15, v19);
  UUID.init()();
  *(void *)(v21 + *(int *)(v20 + 24)) = v17;
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v19);
}

uint64_t LinkParseExpansion.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t LinkParseExpansion.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_SS11appBundleId_SDySSypG8userDatats5NeverOTg504_s14de9Runtime16gh72FilterV010compatibleD7Actions13parseMetadata16expansionContextSaySS11appkL76_SDySSypG8userDatatGAA0d5ParseJ0V_AA0dL9Providing_ptFSSAG_AhItAA0deJ0VXEfU0_SSTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v30 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v30;
    uint64_t v10 = (char *)(a1 + 66);
    while (1)
    {
      uint64_t v11 = *(void *)(v10 - 26);
      uint64_t v12 = *(void *)(v10 - 18);
      uint64_t v13 = *(void *)(v10 - 10);
      char v14 = *(v10 - 2);
      char v15 = *(v10 - 1);
      char v16 = *v10;
      v24[0] = *(void *)(v10 - 34);
      v24[1] = v11;
      v24[2] = v12;
      v24[3] = v13;
      char v25 = v14;
      char v26 = v15;
      char v27 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #2 in LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(v24, a2, a3, &v28);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = v28;
      long long v18 = v29;
      uint64_t v30 = v6;
      unint64_t v20 = *(void *)(v6 + 16);
      unint64_t v19 = *(void *)(v6 + 24);
      if (v20 >= v19 >> 1)
      {
        long long v23 = v29;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        long long v18 = v23;
        uint64_t v6 = v30;
      }
      v10 += 40;
      *(void *)(v6 + 16) = v20 + 1;
      uint64_t v21 = v6 + 24 * v20;
      *(void *)(v21 + 32) = v17;
      *(_OWORD *)(v21 + 40) = v18;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t specialized LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(void **a1, uint64_t a2, uint64_t a3)
{
  int64_t v5 = *a1;
  if (!*a1)
  {
    uint64_t v20 = one-time initialization token for kLogger;
    swift_retain();
    swift_retain();
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)kLogger);
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, v22, v23, "[LinkParseExpansion] Skipping parse expansion as could not find systemProtocol from parse.", v24, 2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }

    swift_release();
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = a1;
  uint64_t v7 = one-time initialization token for kLogger;
  swift_retain();
  swift_retain();
  id v8 = v5;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)kLogger);
  id v10 = v8;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  uint64_t v152 = a2;
  uint64_t v154 = v6;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    char v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    uint64_t v169 = (uint64_t)v10;
    id v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v14 = v5;

    _os_log_impl(&dword_1B9C64000, v11, v12, "[LinkParseExpansion] Evaluating compatible Link actions for %@", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);

    if ((_BYTE)v6[4])
    {
LABEL_6:
      char v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        long long v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v18 = 0;
        _os_log_impl(&dword_1B9C64000, v16, v17, "[LinkParseExpansion] Detected noEntity parse, using entities directly from SRR entity pool.", v18, 2u);
        MEMORY[0x1BA9E48C0](v18, -1, -1);
      }

      unint64_t v19 = *(void **)(a3 + 32);
      goto LABEL_22;
    }
  }
  else
  {

    if ((_BYTE)v6[4]) {
      goto LABEL_6;
    }
  }
  char v26 = v6[2];
  uint64_t v27 = v26[2];
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  if (v27)
  {
    if (v30)
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_1B9C64000, v28, v29, "[LinkParseExpansion] Detected parse with explicitly mentioned entity type.", v31, 2u);
      MEMORY[0x1BA9E48C0](v31, -1, -1);
    }

    uint64_t v176 = v26;
    goto LABEL_23;
  }
  if (v30)
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl(&dword_1B9C64000, v28, v29, "[LinkParseExpansion] Detected parse without explicitly mentioned entity type.", v32, 2u);
    MEMORY[0x1BA9E48C0](v32, -1, -1);
  }

  unint64_t v19 = v6[1];
LABEL_22:
  uint64_t v176 = v19;
LABEL_23:
  swift_bridgeObjectRetain();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v169 = v36;
    *(_DWORD *)os_log_type_t v35 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    uint64_t v37 = Dictionary.description.getter();
    unint64_t v39 = v38;
    swift_bridgeObjectRelease();
    uint64_t v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v33, v34, "[LinkParseExpansion] Considering salient entities types: %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v36, -1, -1);
    MEMORY[0x1BA9E48C0](v35, -1, -1);
  }

  uint64_t v40 = MEMORY[0x1E4FBC860];
  uint64_t v174 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v175 = MEMORY[0x1E4FBC860];
  swift_retain();
  swift_retain();
  uint64_t v41 = swift_bridgeObjectRetain();
  uint64_t v42 = specialized _copyCollectionToContiguousArray<A>(_:)(v41);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SequenceBox<LinkExpansionContext.LinkActionMetadataView>);
  unint64_t inited = (void *)swift_initStackObject();
  inited[2] = a3;
  inited[3] = v152;
  inited[4] = v42;
  inited[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<LinkExpansionContext.LinkActionMetadataView>);
  uint64_t v44 = (void *)swift_initStackObject();
  v44[2] = a3;
  v44[3] = v152;
  v44[4] = v42;
  v44[5] = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_retain();
  uint64_t v45 = LinkExpansionContext.LinkActionMetadataView.next()();
  if (v46)
  {
    uint64_t v48 = v45;
    uint64_t v49 = v46;
    uint64_t v50 = v47;
    uint64_t v51 = 0;
    id v153 = v10;
    while (1)
    {
      uint64_t v56 = (uint64_t)v6[3];
      if (*(void *)(v56 + 16) && (specialized Set.contains(_:)(v48, v49, v56) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        id v61 = v174;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
        }
        unint64_t v63 = v61[2];
        unint64_t v62 = v61[3];
        if (v63 >= v62 >> 1) {
          id v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v61);
        }
        v61[2] = v63 + 1;
        char v64 = &v61[2 * v63];
        v64[4] = v48;
        v64[5] = v49;
        uint64_t v174 = v61;
        goto LABEL_29;
      }
      swift_beginAccess();
      char v57 = v176;
      uint64_t v156 = v51;
      unint64_t v159 = v49;
      if (v176[2])
      {
        swift_bridgeObjectRetain();
        unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49);
        if (v59)
        {
          uint64_t v60 = *(void *)(v57[7] + 8 * v58);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v60 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v60 = 0;
      }
      swift_endAccess();
      unint64_t v177 = (void *)v40;
      v178[0] = v40;
      uint64_t v157 = v48;
      if (!*(void *)(v50 + 16)) {
        goto LABEL_95;
      }
      id v65 = v10;
      unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v65);
      if ((v67 & 1) == 0)
      {

LABEL_95:
        swift_bridgeObjectRelease();
        goto LABEL_96;
      }
      uint64_t v68 = *(void *)(*(void *)(v50 + 56) + 8 * v66);
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      uint64_t v161 = *(void *)(v68 + 16);
      if (!v161) {
        goto LABEL_95;
      }
      uint64_t v160 = v68 + 32;
      uint64_t v158 = v60 + 56;
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v161; ++i)
      {
        char v71 = (uint64_t *)(v160 + 40 * i);
        uint64_t v72 = *v71;
        uint64_t v73 = v71[1];
        uint64_t v74 = v71[2];
        uint64_t v75 = v71[3];
        char v76 = *((unsigned char *)v71 + 32);
        char v164 = *((unsigned char *)v71 + 33);
        char log = *((unsigned char *)v71 + 34);
        if (v60 && v75)
        {
          if (*(void *)(v60 + 16))
          {
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            Swift::Int v77 = Hasher._finalize()();
            uint64_t v78 = -1 << *(unsigned char *)(v60 + 32);
            unint64_t v79 = v77 & ~v78;
            if ((*(void *)(v158 + ((v79 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v79))
            {
              char v80 = (void *)(*(void *)(v60 + 48) + 16 * v79);
              if (*v80 == v74 && v75 == v80[1]) {
                goto LABEL_88;
              }
              uint64_t v155 = *(void *)(v60 + 48);
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                goto LABEL_88;
              }
              uint64_t v82 = ~v78;
              unint64_t v83 = (v79 + 1) & v82;
              if ((*(void *)(v158 + ((v83 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v83))
              {
                id v84 = (void *)(v155 + 16 * v83);
                BOOL v85 = *v84 == v74 && v75 == v84[1];
                if (v85 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_88;
                }
                unint64_t v86 = (v83 + 1) & v82;
                if ((*(void *)(v158 + ((v86 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v86))
                {
                  uint64_t v87 = (void *)(v155 + 16 * v86);
                  BOOL v88 = *v87 == v74 && v75 == v87[1];
                  if (v88 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    goto LABEL_88;
                  }
                  unint64_t v89 = (v86 + 1) & v82;
                  if ((*(void *)(v158 + ((v89 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v89))
                  {
                    uint64_t v90 = (void *)(v155 + 16 * v89);
                    if (*v90 != v74 || v75 != v90[1])
                    {
                      do
                      {
                        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                          break;
                        }
                        unint64_t v89 = (v89 + 1) & v82;
                        if (((*(void *)(v158 + ((v89 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v89) & 1) == 0) {
                          goto LABEL_92;
                        }
                        os_log_type_t v91 = (void *)(v155 + 16 * v89);
                      }
                      while (*v91 != v74 || v75 != v91[1]);
                    }
LABEL_88:
                    swift_beginAccess();
                    unint64_t v97 = (void *)v178[0];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      unint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1, v97);
                    }
                    unint64_t v99 = v97[2];
                    unint64_t v98 = v97[3];
                    if (v99 >= v98 >> 1) {
                      unint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v98 > 1), v99 + 1, 1, v97);
                    }
                    v97[2] = v99 + 1;
                    unint64_t v70 = &v97[5 * v99];
                    v70[4] = v72;
                    v70[5] = v73;
                    v70[6] = v74;
                    v70[7] = v75;
                    *((unsigned char *)v70 + 64) = v76;
                    *((unsigned char *)v70 + 65) = v164;
                    *((unsigned char *)v70 + 66) = log;
                    v178[0] = v97;
                    goto LABEL_48;
                  }
                }
              }
            }
LABEL_92:
            if ((v76 & 1) == 0) {
              goto LABEL_88;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v76 & 1) == 0) {
              goto LABEL_88;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v76 & 1) == 0) {
            goto LABEL_88;
          }
        }
        swift_beginAccess();
        uint64_t v93 = v177;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v163 = v93;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93[2] + 1, 1, v93);
        }
        unint64_t v95 = v163[2];
        unint64_t v94 = v163[3];
        if (v95 >= v94 >> 1) {
          uint64_t v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v94 > 1), v95 + 1, 1, v163);
        }
        v163[2] = v95 + 1;
        uint64_t v96 = &v163[5 * v95];
        v96[4] = v72;
        v96[5] = v73;
        v96[6] = v74;
        v96[7] = v75;
        *((unsigned char *)v96 + 64) = v76;
        *((unsigned char *)v96 + 65) = v164;
        *((unsigned char *)v96 + 66) = log;
        unint64_t v177 = v163;
LABEL_48:
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v10 = v153;
      uint64_t v6 = v154;
      uint64_t v40 = MEMORY[0x1E4FBC860];
LABEL_96:
      swift_bridgeObjectRelease();
      uint64_t v100 = v159;
      swift_bridgeObjectRetain_n();
      BOOL v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v101, v102))
      {
        os_log_type_t v165 = v102;
        loga = v101;
        uint64_t v103 = swift_slowAlloc();
        uint64_t v162 = swift_slowAlloc();
        uint64_t v173 = v162;
        *(_DWORD *)uint64_t v103 = 136315650;
        swift_bridgeObjectRetain();
        *(void *)(v103 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v159, &v173);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v103 + 12) = 2080;
        swift_beginAccess();
        uint64_t v104 = v178[0];
        int64_t v105 = *(void *)(v178[0] + 16);
        if (v105)
        {
          uint64_t v172 = v40;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v105, 0);
          uint64_t v106 = v172;
          int64_t v107 = (void **)(v104 + 56);
          do
          {
            uint64_t v109 = (uint64_t)*(v107 - 3);
            uint64_t v108 = (uint64_t)*(v107 - 2);
            uint64_t v110 = *v107;
            if (*v107)
            {
              uint64_t v111 = (uint64_t)*(v107 - 1);
              uint64_t v169 = (uint64_t)*(v107 - 3);
              uint64_t v170 = v108;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              v112._uint64_t countAndFlagsBits = 60;
              v112._object = (void *)0xE100000000000000;
              String.append(_:)(v112);
              v113._uint64_t countAndFlagsBits = v111;
              v113._object = v110;
              String.append(_:)(v113);
              v114._uint64_t countAndFlagsBits = 62;
              v114._object = (void *)0xE100000000000000;
              String.append(_:)(v114);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              uint64_t v109 = v169;
              uint64_t v108 = v170;
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            uint64_t v172 = v106;
            unint64_t v116 = *(void *)(v106 + 16);
            unint64_t v115 = *(void *)(v106 + 24);
            if (v116 >= v115 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v116 + 1, 1);
              uint64_t v106 = v172;
            }
            v107 += 5;
            *(void *)(v106 + 16) = v116 + 1;
            uint64_t v117 = v106 + 16 * v116;
            *(void *)(v117 + 32) = v109;
            *(void *)(v117 + 40) = v108;
            --v105;
          }
          while (v105);
          swift_bridgeObjectRelease();
          uint64_t v40 = MEMORY[0x1E4FBC860];
        }
        else
        {
          uint64_t v106 = v40;
        }
        uint64_t v169 = v106;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v118 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v120 = v119;
        swift_bridgeObjectRelease();
        *(void *)(v103 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v120, &v173);
        swift_bridgeObjectRelease();
        *(_WORD *)(v103 + 22) = 2080;
        swift_beginAccess();
        char v121 = v177;
        int64_t v122 = v177[2];
        if (v122)
        {
          uint64_t v172 = v40;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v122, 0);
          uint64_t v123 = v172;
          uint64_t v124 = (void **)(v121 + 7);
          do
          {
            uint64_t v125 = (uint64_t)*(v124 - 3);
            uint64_t v126 = (uint64_t)*(v124 - 2);
            unint64_t v127 = *v124;
            if (*v124)
            {
              uint64_t v128 = (uint64_t)*(v124 - 1);
              uint64_t v169 = (uint64_t)*(v124 - 3);
              uint64_t v170 = v126;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              v129._uint64_t countAndFlagsBits = 60;
              v129._object = (void *)0xE100000000000000;
              String.append(_:)(v129);
              v130._uint64_t countAndFlagsBits = v128;
              v130._object = v127;
              String.append(_:)(v130);
              v131._uint64_t countAndFlagsBits = 62;
              v131._object = (void *)0xE100000000000000;
              String.append(_:)(v131);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              uint64_t v125 = v169;
              uint64_t v126 = v170;
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            uint64_t v172 = v123;
            unint64_t v133 = *(void *)(v123 + 16);
            unint64_t v132 = *(void *)(v123 + 24);
            if (v133 >= v132 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1);
              uint64_t v123 = v172;
            }
            v124 += 5;
            *(void *)(v123 + 16) = v133 + 1;
            uint64_t v134 = v123 + 16 * v133;
            *(void *)(v134 + 32) = v125;
            *(void *)(v134 + 40) = v126;
            --v122;
          }
          while (v122);
          swift_bridgeObjectRelease();
          uint64_t v40 = MEMORY[0x1E4FBC860];
          uint64_t v135 = v162;
        }
        else
        {
          uint64_t v123 = v40;
          uint64_t v135 = v162;
        }
        uint64_t v169 = v123;
        uint64_t v136 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v138 = v137;
        swift_bridgeObjectRelease();
        *(void *)(v103 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v138, &v173);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, loga, v165, "[LinkParseExpansion] %s Compatible actions: [%s] Incompatible actions: [%s]", (uint8_t *)v103, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v135, -1, -1);
        MEMORY[0x1BA9E48C0](v103, -1, -1);

        id v10 = v153;
        uint64_t v6 = v154;
        uint64_t v51 = v156;
        uint64_t v100 = v159;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v51 = v156;
      }
      swift_bridgeObjectRetain();
      uint64_t v52 = swift_bridgeObjectRetain();
      uint64_t v53 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_SS11appBundleId_SDySSypG8userDatats5NeverOTg504_s14de9Runtime16gh72FilterV010compatibleD7Actions13parseMetadata16expansionContextSaySS11appkL76_SDySSypG8userDatatGAA0d5ParseJ0V_AA0dL9Providing_ptFSSAG_AhItAA0deJ0VXEfU0_SSTf1cn_nTf4ng_n(v52, v157, v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      specialized Array.append<A>(contentsOf:)(v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_29:
      uint64_t v48 = LinkExpansionContext.LinkActionMetadataView.next()();
      uint64_t v49 = v54;
      uint64_t v50 = v55;
      if (!v54)
      {
        uint64_t v40 = (uint64_t)v174;
        break;
      }
    }
  }
  swift_release();
  swift_setDeallocating();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v40 + 16))
  {
    uint64_t v139 = v6[1];
    unint64_t v177 = v6[2];
    v178[0] = v139;
    id v140 = v10;
    outlined retain of [String : Set<String>]((uint64_t)v178);
    outlined retain of [String : Set<String>]((uint64_t)&v177);
    swift_bridgeObjectRetain();
    id v141 = v140;
    outlined retain of [String : Set<String>]((uint64_t)v178);
    outlined retain of [String : Set<String>]((uint64_t)&v177);
    swift_bridgeObjectRetain();
    uint64_t v142 = Logger.logObject.getter();
    os_log_type_t v143 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v142, v143))
    {
      uint64_t v144 = swift_slowAlloc();
      os_log_t logb = (os_log_t)swift_slowAlloc();
      uint64_t v173 = (uint64_t)logb;
      *(_DWORD *)uint64_t v144 = 136315394;
      swift_beginAccess();
      uint64_t v145 = swift_bridgeObjectRetain();
      uint64_t v146 = MEMORY[0x1BA9E3080](v145, MEMORY[0x1E4FBB1A0]);
      unint64_t v148 = v147;
      swift_bridgeObjectRelease();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v148, &v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v144 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v149 = Set.description.getter();
      unint64_t v151 = v150;
      swift_bridgeObjectRelease();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v151, &v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      outlined release of [String : Set<String>]((uint64_t)v178);
      outlined release of [String : Set<String>]((uint64_t)&v177);

      swift_bridgeObjectRelease();
      outlined release of [String : Set<String>]((uint64_t)v178);
      outlined release of [String : Set<String>]((uint64_t)&v177);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v142, v143, "[LinkParseExpansion] Skipped %s as the parse explicitly refers to %s", (uint8_t *)v144, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](logb, -1, -1);
      MEMORY[0x1BA9E48C0](v144, -1, -1);
      swift_bridgeObjectRelease();
    }
    else
    {

      outlined release of [String : Set<String>]((uint64_t)v178);
      outlined release of [String : Set<String>]((uint64_t)&v177);

      swift_bridgeObjectRelease();
      outlined release of [String : Set<String>]((uint64_t)v178);
      outlined release of [String : Set<String>]((uint64_t)&v177);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v175;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = *(void *)(type metadata accessor for USOParse() - 8);
  uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v7 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  unint64_t v8 = MEMORY[0x1E4FBC860];
  while (1)
  {
    closure #2 in LinkParseExpansion.expand(parses:)(v6, a2, &v31);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    uint64_t v9 = v31;
    uint64_t v10 = *(void *)(v31 + 16);
    int64_t v11 = *(void *)(v8 + 16);
    int64_t v12 = v11 + v10;
    if (__OFADD__(v11, v10)) {
      break;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v12 <= *(void *)(v8 + 24) >> 1)
    {
      if (*(void *)(v9 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= v12) {
        int64_t v14 = v11 + v10;
      }
      else {
        int64_t v14 = v11;
      }
      unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v8);
      if (*(void *)(v9 + 16))
      {
LABEL_15:
        uint64_t v15 = *(void *)(v8 + 16);
        uint64_t v16 = (*(void *)(v8 + 24) >> 1) - v15;
        uint64_t v17 = *(void *)(type metadata accessor for ParseUserDataAttachment() - 8);
        uint64_t v18 = *(void *)(v17 + 72);
        if (v16 < v10) {
          goto LABEL_30;
        }
        unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
        unint64_t v20 = v8 + v19 + v18 * v15;
        unint64_t v21 = v9 + v19;
        uint64_t v22 = v18 * v10;
        unint64_t v23 = v20 + v22;
        unint64_t v24 = v21 + v22;
        if (v21 < v23 && v20 < v24) {
          goto LABEL_32;
        }
        swift_arrayInitWithCopy();
        if (v10)
        {
          uint64_t v26 = *(void *)(v8 + 16);
          BOOL v27 = __OFADD__(v26, v10);
          uint64_t v28 = v26 + v10;
          if (v27) {
            goto LABEL_31;
          }
          *(void *)(v8 + 16) = v28;
        }
        goto LABEL_4;
      }
    }
    if (v10) {
      goto LABEL_29;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    v6 += v7;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  swift_release();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for EntityTypeMetadata(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityTypeMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityTypeMetadata()
{
  return &type metadata for EntityTypeMetadata;
}

uint64_t type metadata accessor for LinkParseExpansion()
{
  return self;
}

uint64_t method lookup function for LinkParseExpansion(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkParseExpansion);
}

uint64_t dispatch thunk of LinkParseExpansion.__allocating_init(linkExpansionContext:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of LinkParseExpansion.expand(parses:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t outlined init with take of LNSystemProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LNSystemProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #2 in LinkParseExpansion.expand(parses:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #2 in LinkParseExpansion.expand(parses:)(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology13UsoIdentifierVG_SSs5NeverOTg504_s14d16KitRuntime13Linkf79ParserV29appBundleIdsFromMentionedApps7usoTaskShySSG0A8Ontology0eN0C_tFSSAG0E10G54Vcfu_33_6552710fe21eac3bc6e61b74c3fc727bAKSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UsoIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  os_log_type_t v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v26 = v1;
    uint64_t v30 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    if (one-time initialization token for kBundleAliasToFullyQualifiedBundleId != -1) {
      swift_once();
    }
    uint64_t v27 = *(void *)(v4 + 72);
    uint64_t v28 = v3;
    uint64_t v9 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v10 = (void (**)(char *, uint64_t))(v4 + 8);
    do
    {
      rawValue = kBundleAliasToFullyQualifiedBundleId._rawValue;
      uint64_t v12 = UsoIdentifier.value.getter();
      if (rawValue[2] && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13), (v15 & 1) != 0))
      {
        uint64_t v16 = (uint64_t *)(rawValue[7] + 16 * v14);
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
      }
      unint64_t v19 = v29;
      swift_bridgeObjectRelease();
      (*v9)(v19, v8, v3);
      if (!v18)
      {
        uint64_t v20 = UsoIdentifier.value.getter();
        unint64_t v19 = v29;
        uint64_t v17 = v20;
        uint64_t v18 = v21;
      }
      (*v10)(v19, v3);
      uint64_t v7 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v30;
      }
      unint64_t v23 = *(void *)(v7 + 16);
      unint64_t v22 = *(void *)(v7 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v7 = v30;
      }
      *(void *)(v7 + 16) = v23 + 1;
      uint64_t v24 = v7 + 16 * v23;
      *(void *)(v24 + 32) = v17;
      *(void *)(v24 + 40) = v18;
      uint64_t v3 = v28;
      v8 += v27;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    int64_t v11 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

double LinkUsoParser.extractParseInformation(usoParse:)@<D0>(uint64_t a1@<X8>)
{
  specialized LinkUsoParser.extractParseInformation(usoParse:)((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

void *one-time initialization function for kBundleAliasToFullyQualifiedBundleId()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA050760;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = 0xD000000000000013;
  *(void *)(inited + 56) = 0x80000001BA06A5F0;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v2;
  *(void *)(inited + 80) = 0xD000000000000013;
  *(void *)(inited + 88) = 0x80000001BA06A610;
  *(void *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 104) = v3;
  *(void *)(inited + 112) = 0xD000000000000019;
  *(void *)(inited + 120) = 0x80000001BA06A630;
  double result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  kBundleAliasToFullyQualifiedBundleId._rawValue = result;
  return result;
}

id LinkParseMetadata.systemProtocol.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

uint64_t LinkParseMetadata.entityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkParseMetadata.mentionedEntityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkParseMetadata.mentionedAppBundleIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkParseMetadata.noReferenceVerb.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t LinkParseMetadata.debugDescription.getter()
{
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(128);
  v1._uint64_t countAndFlagsBits = 0xD000000000000022;
  v1._object = (void *)0x80000001BA06A4C0;
  String.append(_:)(v1);
  outlined init with take of LNSystemProtocol?(v0, (uint64_t)&v18);
  outlined init with take of LNSystemProtocol?((uint64_t)&v18, (uint64_t)&v15);
  outlined retain of RequestConjunctionInfo?(&v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LNSystemProtocol?);
  v2._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x797469746E65202CLL;
  v3._object = (void *)0xEF203A7365707954;
  String.append(_:)(v3);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  v4._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0xD000000000000018;
  v5._object = (void *)0x80000001BA06A4F0;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0xD000000000000019;
  v7._object = (void *)0x80000001BA06A510;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001BA06A530;
  v9._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v9);
  if (*(unsigned char *)(v0 + 32)) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 32)) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v16;
}

uint64_t LinkParseMetadata.init(systemProtocol:entityTypes:mentionedEntityTypes:mentionedAppBundleIds:noReferenceVerb:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkParseMetadata()
{
  return LinkParseMetadata.debugDescription.getter();
}

uint64_t LinkUsoParser.extractParseInformation(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = specialized LinkUsoParser.getSystemProtocol(usoTask:)(a1);
  specialized LinkUsoParser.extractIdentifiers(task:)();
  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v5 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = specialized _ArrayProtocol.filter(_:)(v9, v6, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = specialized Dictionary.init<A>(grouping:by:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = specialized _NativeDictionary.mapValues<A>(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v13 = specialized LinkUsoParser.extractMentionedEntityTypes(usoTask:)(a1);
  uint64_t v14 = specialized LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)();
  uint64_t result = specialized LinkUsoParser.extractNoReferenceVerb(task:)();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(unsigned char *)(a2 + 32) = result & 1;
  return result;
}

uint64_t UsoIdentifier.appBundleIdAsFullyQualifiedBundleId.getter()
{
  return UsoIdentifier.appBundleIdAsFullyQualifiedBundleId.getter(MEMORY[0x1E4FA2CB0]);
}

uint64_t closure #1 in LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = &v39[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v39[-v7];
  uint64_t v9 = UsoIdentifier.appBundleId.getter();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12) {
    char v14 = 1;
  }
  else {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v3;
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16);
  v16(v8, a1, v2);
  uint64_t v41 = v15;
  if ((v14 & 1) == 0)
  {
    uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
    v24(v8, v2);
LABEL_16:
    int v40 = 0;
    goto LABEL_19;
  }
  uint64_t v17 = UsoIdentifier.namespace.getter();
  uint64_t v19 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v19)
  {
    uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v41 + 8);
    v24(v8, v2);
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (v17 == v20 && v19 == v21) {
    int v23 = 1;
  }
  else {
    int v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  int v40 = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v41 + 8);
  v24(v8, v2);
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v25 = UsoIdentifier.appBundleId.getter();
  uint64_t v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
    v16(v6, a1, v2);
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16(v6, a1, v2);
    if ((v30 & 1) == 0)
    {
      v24(v6, v2);
LABEL_33:
      int v37 = 0;
      return (v40 | v37) & 1;
    }
  }
  uint64_t v31 = UsoIdentifier.namespace.getter();
  uint64_t v33 = v32;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v33)
  {
    v24(v6, v2);
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  if (v31 == v34 && v33 == v35) {
    int v37 = 1;
  }
  else {
    int v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  v24(v6, v2);
  swift_bridgeObjectRelease();
  return (v40 | v37) & 1;
}

uint64_t UsoIdentifier.valueAsFullyQualifiedAppBundleId.getter()
{
  return UsoIdentifier.appBundleIdAsFullyQualifiedBundleId.getter(MEMORY[0x1E4FA2CE8]);
}

uint64_t UsoIdentifier.appBundleIdAsFullyQualifiedBundleId.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for UsoIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for kBundleAliasToFullyQualifiedBundleId != -1) {
    swift_once();
  }
  rawValue = kBundleAliasToFullyQualifiedBundleId._rawValue;
  uint64_t v9 = a1();
  if (rawValue[2] && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10), (v12 & 1) != 0))
  {
    unint64_t v13 = (uint64_t *)(rawValue[7] + 16 * v11);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, v4);
  if (!v15) {
    uint64_t v14 = ((uint64_t (*)(uint64_t))a1)(v16);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

unint64_t one-time initialization function for verbMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (_:))>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA057AD0;
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_changeBinarySettingSystemProtocol);
  uint64_t v3 = swift_allocObject();
  strcpy((char *)(v3 + 16), "common_Setting");
  *(unsigned char *)(v3 + 31) = -18;
  *(void *)(v3 + 32) = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v4 + 24) = v3;
  *(void *)(inited + 32) = 0x656C6261736964;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?);
  *(void *)(inited + 56) = v4;
  id v5 = objc_msgSend(v1, sel_changeBinarySettingSystemProtocol);
  uint64_t v6 = swift_allocObject();
  strcpy((char *)(v6 + 16), "common_Setting");
  *(unsigned char *)(v6 + 31) = -18;
  *(void *)(v6 + 32) = v5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v7 + 24) = v6;
  *(void *)(inited + 64) = 0x656C62616E65;
  *(void *)(inited + 72) = 0xE600000000000000;
  *(void *)(inited + 80) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 88) = v7;
  id v8 = objc_msgSend(v1, sel_changeBinarySettingSystemProtocol);
  uint64_t v9 = swift_allocObject();
  strcpy((char *)(v9 + 16), "common_Setting");
  *(unsigned char *)(v9 + 31) = -18;
  *(void *)(v9 + 32) = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v10 + 24) = v9;
  *(void *)(inited + 96) = 0x656C67676F74;
  *(void *)(inited + 104) = 0xE600000000000000;
  *(void *)(inited + 112) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 120) = v10;
  *(void *)(inited + 128) = 0x7473756A6461;
  *(void *)(inited + 136) = 0xE600000000000000;
  *(void *)(inited + 144) = specialized thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?);
  *(void *)(inited + 152) = 0;
  id v11 = objc_msgSend(v1, sel_closeEntityProtocol);
  char v12 = (void *)swift_allocObject();
  v12[2] = 0xD000000000000010;
  v12[3] = 0x80000001BA06A1F0;
  v12[4] = v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v13 + 24) = v12;
  *(void *)(inited + 160) = 0x65736F6C63;
  *(void *)(inited + 168) = 0xE500000000000000;
  *(void *)(inited + 176) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 184) = v13;
  id v14 = objc_msgSend(v1, sel_copyEntityProtocol);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0xD000000000000010;
  v15[3] = 0x80000001BA06A1F0;
  v15[4] = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v16 + 24) = v15;
  *(void *)(inited + 192) = 2037411683;
  *(void *)(inited + 200) = 0xE400000000000000;
  *(void *)(inited + 208) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 216) = v16;
  id v17 = objc_msgSend(v1, sel_createEntitySystemProtocol);
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = 0xD000000000000010;
  v18[3] = 0x80000001BA06A1F0;
  v18[4] = v17;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v19 + 24) = v18;
  *(void *)(inited + 224) = 0x657461657263;
  *(void *)(inited + 232) = 0xE600000000000000;
  *(void *)(inited + 240) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 248) = v19;
  id v20 = objc_msgSend(v1, sel_cutSystemProtocol);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = 0xD000000000000010;
  v21[3] = 0x80000001BA06A1F0;
  v21[4] = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v22 + 24) = v21;
  *(void *)(inited + 256) = 7632227;
  *(void *)(inited + 264) = 0xE300000000000000;
  *(void *)(inited + 272) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 280) = v22;
  id v23 = objc_msgSend(v1, sel_deleteEntitySystemProtocol);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = 0xD000000000000010;
  v24[3] = 0x80000001BA06A1F0;
  uint64_t v24[4] = v23;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v25 + 24) = v24;
  *(void *)(inited + 288) = 0x6574656C6564;
  *(void *)(inited + 296) = 0xE600000000000000;
  *(void *)(inited + 304) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 312) = v25;
  id v26 = objc_msgSend(v1, sel_enterMarkupProtocol);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = 0xD000000000000010;
  v27[3] = 0x80000001BA06A1F0;
  v27[4] = v26;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v28 + 24) = v27;
  *(void *)(inited + 320) = 0x72614D7265746E65;
  *(void *)(inited + 328) = 0xEB0000000070756BLL;
  *(void *)(inited + 336) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 344) = v28;
  id v29 = objc_msgSend(v1, sel_exitMarkupProtocol);
  char v30 = (void *)swift_allocObject();
  uint64_t v30[2] = 0xD000000000000010;
  v30[3] = 0x80000001BA06A1F0;
  v30[4] = v29;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v31 + 24) = v30;
  *(void *)(inited + 352) = 0x6B72614D74697865;
  *(void *)(inited + 360) = 0xEA00000000007075;
  *(void *)(inited + 368) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 376) = v31;
  id v32 = objc_msgSend(v1, sel_favoriteEntityProtocol);
  uint64_t v33 = (void *)swift_allocObject();
  _OWORD v33[2] = 0xD000000000000010;
  v33[3] = 0x80000001BA06A1F0;
  v33[4] = v32;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v34 + 24) = v33;
  *(void *)(inited + 384) = 1701538156;
  *(void *)(inited + 392) = 0xE400000000000000;
  *(void *)(inited + 400) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 408) = v34;
  id v35 = objc_msgSend(v1, sel_openEntitySystemProtocol);
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = 0xD000000000000010;
  v36[3] = 0x80000001BA06A1F0;
  v36[4] = v35;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v37 + 24) = v36;
  *(void *)(inited + 416) = 1852141679;
  *(void *)(inited + 424) = 0xE400000000000000;
  *(void *)(inited + 432) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 440) = v37;
  id v38 = objc_msgSend(v1, sel_pasteSystemProtocol);
  unint64_t v39 = (void *)swift_allocObject();
  _OWORD v39[2] = 0xD000000000000010;
  v39[3] = 0x80000001BA06A1F0;
  unsigned char v39[4] = v38;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v40 + 24) = v39;
  *(void *)(inited + 448) = 0x6574736170;
  *(void *)(inited + 456) = 0xE500000000000000;
  *(void *)(inited + 464) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 472) = v40;
  id v41 = objc_msgSend(v1, sel_previewEntityProtocol);
  uint64_t v42 = (void *)swift_allocObject();
  v42[2] = 0xD000000000000010;
  v42[3] = 0x80000001BA06A1F0;
  v42[4] = v41;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v43 + 24) = v42;
  *(void *)(inited + 480) = 0x77656976657270;
  *(void *)(inited + 488) = 0xE700000000000000;
  *(void *)(inited + 496) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 504) = v43;
  id v44 = objc_msgSend(v1, sel_navigateSequentiallyProtocol);
  uint64_t v45 = (void *)swift_allocObject();
  v45[2] = 0xD000000000000010;
  v45[3] = 0x80000001BA06A1F0;
  v45[4] = v44;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v46 + 24) = v45;
  strcpy((char *)(inited + 512), "skipBackward");
  *(unsigned char *)(inited + 525) = 0;
  *(_WORD *)(inited + 526) = -5120;
  *(void *)(inited + 528) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 536) = v46;
  id v47 = objc_msgSend(v1, sel_navigateSequentiallyProtocol);
  uint64_t v48 = (void *)swift_allocObject();
  v48[2] = 0xD000000000000010;
  v48[3] = 0x80000001BA06A1F0;
  uint64_t v48[4] = v47;
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v49 + 24) = v48;
  *(void *)(inited + 544) = 0x77726F4670696B73;
  *(void *)(inited + 552) = 0xEB00000000647261;
  *(void *)(inited + 560) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 568) = v49;
  id v50 = objc_msgSend(v1, sel_searchSystemProtocol);
  uint64_t v51 = (void *)swift_allocObject();
  void v51[2] = 0xD000000000000010;
  v51[3] = 0x80000001BA06A1F0;
  v51[4] = v50;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v52 + 24) = v51;
  *(void *)(inited + 576) = 0x736972616D6D7573;
  *(void *)(inited + 584) = 0xE900000000000065;
  *(void *)(inited + 592) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 600) = v52;
  id v53 = objc_msgSend(v1, sel_favoriteEntityProtocol);
  uint64_t v54 = (void *)swift_allocObject();
  void v54[2] = 0xD000000000000010;
  v54[3] = 0x80000001BA06A1F0;
  v54[4] = v53;
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v55 + 24) = v54;
  *(void *)(inited + 608) = 0x656B696C6E75;
  *(void *)(inited + 616) = 0xE600000000000000;
  *(void *)(inited + 624) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 632) = v55;
  id v56 = objc_msgSend(v1, sel_undoSystemProtocol);
  char v57 = (void *)swift_allocObject();
  v57[2] = 0xD000000000000010;
  v57[3] = 0x80000001BA06A550;
  uint64_t v57[4] = v56;
  uint64_t v58 = swift_allocObject();
  *(void *)(v58 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v58 + 24) = v57;
  *(void *)(inited + 640) = 1868852853;
  *(void *)(inited + 648) = 0xE400000000000000;
  *(void *)(inited + 656) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 664) = v58;
  id v59 = objc_msgSend(v1, sel_undoSystemProtocol);
  uint64_t v60 = (void *)swift_allocObject();
  void v60[2] = 0xD000000000000010;
  v60[3] = 0x80000001BA06A550;
  v60[4] = v59;
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(void *)(v61 + 24) = v60;
  *(void *)(inited + 672) = 1868850546;
  *(void *)(inited + 680) = 0xE400000000000000;
  *(void *)(inited + 688) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(void *)(inited + 696) = v61;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static LinkUsoParser.verbMap = result;
  return result;
}

void *(*static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)(uint64_t a1, uint64_t a2, void *a3))(uint64_t a1)
{
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  id v7 = a3;
  return partial apply for closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static LinkUsoParser.adjustmentTaskProtocolExtractor(usoTask:)();
  *a1 = result;
  return result;
}

uint64_t *LinkUsoParser.verbMap.unsafeMutableAddressor()
{
  if (one-time initialization token for verbMap != -1) {
    swift_once();
  }
  return &static LinkUsoParser.verbMap;
}

uint64_t static LinkUsoParser.verbMap.getter()
{
  if (one-time initialization token for verbMap != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void *closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = UsoTask.baseEntityAsString.getter();
  uint64_t v9 = v7;
  if (v8 == a2 && v7 == a3
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v8 == 0x6E456F4E5F6F7375 && v9 == 0xEC00000079746974)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      return 0;
    }
  }
  id v10 = a4;
  return a4;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v55 = v9;
  char v12 = (void *)*a5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if (a4)
    {
      uint64_t v21 = (void *)*a5;
      if (v13) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v21 = (void *)*a5;
      if (v18) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    id v26 = (uint64_t *)(v21[6] + 16 * v14);
    *id v26 = v10;
    v26[1] = v11;
    *(void *)(v21[7] + 8 * v14) = v55;
    uint64_t v27 = v21[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v29;
LABEL_13:
    uint64_t v30 = specialized LazyMapSequence.Iterator.next()();
    if (v31)
    {
      uint64_t v33 = v30;
      uint64_t v34 = v31;
      uint64_t v35 = v32;
      do
      {
        uint64_t v42 = (void *)*a5;
        unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
        uint64_t v45 = v42[2];
        BOOL v46 = (v44 & 1) == 0;
        BOOL v28 = __OFADD__(v45, v46);
        uint64_t v47 = v45 + v46;
        if (v28) {
          goto LABEL_24;
        }
        char v48 = v44;
        if (v42[3] < v47)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, 1);
          unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
          if ((v48 & 1) != (v49 & 1)) {
            goto LABEL_26;
          }
        }
        id v50 = (void *)*a5;
        if (v48)
        {
          uint64_t v36 = 8 * v43;
          uint64_t v37 = *(void *)(v50[7] + 8 * v43);
          swift_bridgeObjectRetain();
          uint64_t v38 = specialized Set.union<A>(_:)(v35, v37);
          swift_bridgeObjectRelease();
          uint64_t v39 = v50[7];
          swift_bridgeObjectRelease();
          *(void *)(v39 + v36) = v38;
        }
        else
        {
          v50[(v43 >> 6) + 8] |= 1 << v43;
          uint64_t v51 = (uint64_t *)(v50[6] + 16 * v43);
          *uint64_t v51 = v33;
          v51[1] = v34;
          *(void *)(v50[7] + 8 * v43) = v35;
          uint64_t v52 = v50[2];
          BOOL v28 = __OFADD__(v52, 1);
          uint64_t v53 = v52 + 1;
          if (v28) {
            goto LABEL_25;
          }
          v50[2] = v53;
        }
        uint64_t v33 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v34 = v40;
        uint64_t v35 = v41;
      }
      while (v40);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    uint64_t v21 = (void *)*a5;
    if ((v18 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v22 = 8 * v14;
    uint64_t v23 = *(void *)(v21[7] + 8 * v14);
    swift_bridgeObjectRetain();
    uint64_t v24 = specialized Set.union<A>(_:)(v55, v23);
    swift_bridgeObjectRelease();
    uint64_t v25 = v21[7];
    swift_bridgeObjectRelease();
    *(void *)(v25 + v22) = v24;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  void *v24;
  void *v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  void *v52;
  uint64_t *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v11 = v7;
  char v12 = v8;
  char v13 = v9;
  unint64_t v14 = v10;
  uint64_t v15 = (void *)*a5;
  uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  char v18 = v15[2];
  unint64_t v19 = (v16 & 1) == 0;
  char v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v21 = v16;
  if (v15[3] >= v20)
  {
    if (a4)
    {
      uint64_t v24 = (void *)*a5;
      if (v16) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v24 = (void *)*a5;
      if (v21) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    id v26 = (uint64_t *)(v24[6] + 16 * v17);
    *id v26 = v11;
    v26[1] = v12;
    uint64_t v27 = (void *)(v24[7] + 16 * v17);
    *uint64_t v27 = v13;
    v27[1] = v14;
    BOOL v28 = v24[2];
    uint64_t v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v24[2] = v30;
LABEL_13:
    uint64_t v31 = specialized LazyMapSequence.Iterator.next()();
    if (v32)
    {
      uint64_t v35 = v31;
      uint64_t v36 = v32;
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      do
      {
        unint64_t v43 = (void *)*a5;
        uint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
        BOOL v46 = v43[2];
        uint64_t v47 = (v44 & 1) == 0;
        char v48 = v46 + v47;
        if (__OFADD__(v46, v47)) {
          goto LABEL_25;
        }
        char v49 = v44;
        if (v43[3] < v48)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, 1);
          id v50 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
          if ((v49 & 1) != (v51 & 1)) {
            goto LABEL_27;
          }
          uint64_t v45 = v50;
        }
        uint64_t v52 = (void *)*a5;
        if (v49)
        {
          swift_bridgeObjectRelease();
          uint64_t v39 = (void *)(v52[7] + 16 * v45);
          swift_bridgeObjectRelease();
          *uint64_t v39 = v37;
          v39[1] = v38;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          uint64_t v53 = (uint64_t *)(v52[6] + 16 * v45);
          void *v53 = v35;
          v53[1] = v36;
          uint64_t v54 = (void *)(v52[7] + 16 * v45);
          void *v54 = v37;
          v54[1] = v38;
          uint64_t v55 = v52[2];
          uint64_t v29 = __OFADD__(v55, 1);
          id v56 = v55 + 1;
          if (v29) {
            goto LABEL_26;
          }
          _OWORD v52[2] = v56;
        }
        uint64_t v35 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v36 = v40;
        uint64_t v37 = v41;
        uint64_t v38 = v42;
      }
      while (v40);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a4 & 1);
  uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v21 & 1) == (v23 & 1))
  {
    uint64_t v17 = v22;
    uint64_t v24 = (void *)*a5;
    if ((v21 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v25 = (void *)(v24[7] + 16 * v17);
    swift_bridgeObjectRelease();
    NSObject *v25 = v13;
    v25[1] = v14;
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v45 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v42 = v6;
  int64_t v43 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v44 = result + 64;
  Swift::Int v11 = MEMORY[0x1E4FBC860];
  uint64_t v41 = (void *)result;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v45 + 48) + 16 * i);
    uint64_t v18 = v17[1];
    uint64_t v50 = *v17;
    uint64_t v19 = *(void *)(*(void *)(v45 + 56) + 8 * i);
    int64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      unint64_t v48 = i;
      unint64_t v49 = v10;
      int64_t v46 = v4;
      Swift::Int v51 = v11;
      uint64_t v47 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
      Swift::Int v21 = v51;
      uint64_t v22 = *(void *)(type metadata accessor for UsoIdentifier() - 8);
      uint64_t v23 = v19 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      uint64_t v24 = *(void *)(v22 + 72);
      do
      {
        uint64_t v25 = UsoIdentifier.value.getter();
        uint64_t v27 = v26;
        Swift::Int v51 = v21;
        unint64_t v29 = *(void *)(v21 + 16);
        unint64_t v28 = *(void *)(v21 + 24);
        unint64_t v30 = v29 + 1;
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          Swift::Int v21 = v51;
        }
        *(void *)(v21 + 16) = v30;
        Swift::Int v31 = v21 + 16 * v29;
        *(void *)(v31 + 32) = v25;
        *(void *)(v31 + 40) = v27;
        v23 += v24;
        --v20;
      }
      while (v20);
      uint64_t v52 = Set.init(minimumCapacity:)();
      uint64_t v3 = v41;
      Swift::Int v11 = MEMORY[0x1E4FBC860];
      int64_t v4 = v46;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v30 = *(void *)(v11 + 16);
      uint64_t v32 = Set.init(minimumCapacity:)();
      uint64_t v52 = v32;
      if (!v30)
      {
        uint64_t v36 = v32;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      uint64_t v47 = v18;
      unint64_t v48 = i;
      unint64_t v49 = v10;
      Swift::Int v21 = v11;
    }
    uint64_t v33 = (Swift::Int *)(v21 + 40);
    do
    {
      Swift::Int v35 = *(v33 - 1);
      Swift::Int v34 = *v33;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v51, v35, v34);
      swift_bridgeObjectRelease();
      v33 += 2;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v36 = v52;
    unint64_t i = v48;
    unint64_t v10 = v49;
    uint64_t v18 = v47;
LABEL_30:
    *(void *)(v44 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v37 = (void *)(v3[6] + 16 * i);
    *uint64_t v37 = v50;
    v37[1] = v18;
    *(void *)(v3[7] + 8 * i) = v36;
    uint64_t v38 = v3[2];
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (v39)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v3[2] = v40;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v43) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v42 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v43) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v42 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v43) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v42 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v43) {
    return (uint64_t)v3;
  }
  unint64_t v15 = *(void *)(v42 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v43) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v42 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  int64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v36 = type metadata accessor for UsoIdentifier();
  uint64_t v6 = MEMORY[0x1F4188790](v36);
  Swift::Int v35 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)v28 - v9;
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v37 = MEMORY[0x1E4FBC860];
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v13 = v8 + 16;
    int64_t v14 = v15;
    uint64_t v16 = *(unsigned __int8 *)(v13 + 64);
    uint64_t v17 = *(void *)(v13 + 56);
    v28[1] = v3;
    uint64_t v29 = (v16 + 32) & ~v16;
    uint64_t v18 = a1 + v29;
    Swift::Int v34 = (void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v31 = a2;
    uint64_t v32 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v19 = v13;
    unint64_t v30 = v15;
    v15(v10, a1 + v29, v36);
    while (1)
    {
      uint64_t v20 = UsoIdentifier.namespace.getter();
      if (!v21) {
        break;
      }
      if (v20 == a2 && v21 == v33)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          break;
        }
      }
      uint64_t v23 = v19;
      uint64_t v24 = *v34;
      (*v34)(v35, v10, v36);
      uint64_t v25 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
        uint64_t v25 = v37;
      }
      unint64_t v27 = *(void *)(v25 + 16);
      unint64_t v26 = *(void *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        uint64_t v25 = v37;
      }
      *(void *)(v25 + 16) = v27 + 1;
      v24((char *)(v25 + v29 + v27 * v17), v35, v36);
      uint64_t v37 = v25;
      uint64_t v19 = v23;
      int64_t v14 = v30;
      a2 = v31;
LABEL_4:
      v18 += v17;
      if (!--v12) {
        return v37;
      }
      v14(v10, v18, v36);
    }
    (*v32)(v10, v36);
    goto LABEL_4;
  }
  return result;
}

uint64_t specialized LinkUsoParser.isCancelTask(_:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = USOParse.userParse.getter();
  uint64_t v8 = MEMORY[0x1BA9DE000](v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v11 = *(void *)(v10 - 8);
  if (v9)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v6, v8+ ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80)), v10);
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, v12, 1, v10);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v6);
    char v13 = 0;
  }
  else
  {
    char v13 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v10);
  }
  return v13 & 1;
}

unint64_t specialized LinkUsoParser.getTask(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = &v17[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = USOParse.userParse.getter();
  uint64_t v12 = MEMORY[0x1BA9DE000](v11);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  if (*(void *)(v12 + 16))
  {
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(v8 + 16))(v2, v12 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v2, v13, 1, v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v2);
    return 0;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v2, v7);
  unint64_t result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v16 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v14) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      return v14;
    }
  }
  if ((v16 & 0xC000000000000001) != 0)
  {
    uint64_t v14 = MEMORY[0x1BA9E3990](0, v16);
    goto LABEL_11;
  }
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v14 = *(void *)(v16 + 32);
    swift_retain();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized LinkUsoParser.getSystemProtocol(usoTask:)(uint64_t a1)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = UsoTask.verbString.getter();
  unint64_t v4 = v3;
  if (one-time initialization token for verbMap != -1) {
    swift_once();
  }
  uint64_t v5 = static LinkUsoParser.verbMap;
  if (*(void *)(static LinkUsoParser.verbMap + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v4);
    if (v7)
    {
      uint64_t v8 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)(v5 + 56) + 16 * v6);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v17 = a1;
      v8(&v16, &v17);
      swift_release();
      uint64_t v9 = v16;
      if (v16)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)kLogger);
  swift_bridgeObjectRetain();
  uint64_t v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v17 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    unint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v11, v12, "[LinkParseExpansion] Could not find systemProtocol for verb %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t specialized LinkUsoParser.extractIdentifiers(task:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoValue?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04F9C0;
  uint64_t v1 = UsoTask.arguments.getter();
  if (!*(void *)(v1 + 16)
    || (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065), (v3 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    *(void *)(inited + 32) = 0;
    goto LABEL_12;
  }
  unint64_t v4 = *(void *)(*(void *)(v1 + 56) + 8 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0xC000000000000001) != 0) {
    goto LABEL_144;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v5 = swift_retain();
    goto LABEL_11;
  }
  __break(1u);
  do
  {
    uint64_t v11 = MEMORY[0x1BA9E3990](0, v4);
LABEL_22:
    while (1)
    {
      *(void *)(inited + 40) = v11;
      swift_bridgeObjectRelease();
      while (1)
      {
        uint64_t v64 = inited;
        unint64_t v4 = (unint64_t)&v64;
        specialized Array._endMutation()();
        uint64_t v13 = v64;
        uint64_t v14 = MEMORY[0x1E4FBC860];
        uint64_t v64 = MEMORY[0x1E4FBC860];
        if (*(void *)(v13 + 32))
        {
          uint64_t v15 = swift_retain();
          MEMORY[0x1BA9E3030](v15);
          if (*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v4 = (unint64_t)&v64;
          specialized Array._endMutation()();
        }
        if (*(void *)(v13 + 40))
        {
          uint64_t v16 = swift_retain();
          MEMORY[0x1BA9E3030](v16);
          if (*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v4 = (unint64_t)&v64;
          specialized Array._endMutation()();
        }
        uint64_t inited = v64;
        swift_bridgeObjectRelease();
        uint64_t v64 = v14;
        if ((unint64_t)inited >> 62) {
          goto LABEL_135;
        }
        uint64_t v17 = *(void *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v17)
        {
LABEL_139:
          swift_bridgeObjectRelease();
          return MEMORY[0x1E4FBC860];
        }
        while (2)
        {
          if (v17 >= 1)
          {
            uint64_t v18 = 0;
            uint64_t v19 = MEMORY[0x1E4FBC860];
LABEL_38:
            if ((inited & 0xC000000000000001) != 0) {
              MEMORY[0x1BA9E3990](v18, inited);
            }
            else {
              swift_retain();
            }
            uint64_t v20 = dispatch thunk of UsoValue.getUsoIdentifiers()();
            specialized Array.append<A>(contentsOf:)(v20);
            if (!dispatch thunk of UsoValue.getAsEntity()()) {
              goto LABEL_36;
            }
            uint64_t v21 = UsoEntity.usoIdentifiers.getter();
            specialized Array.append<A>(contentsOf:)(v21);
            uint64_t v22 = UsoEntity.attributes.getter();
            if (!*(void *)(v22 + 16)) {
              goto LABEL_50;
            }
            unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
            if ((v24 & 1) == 0) {
              goto LABEL_50;
            }
            unint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (v25 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v57) {
                goto LABEL_50;
              }
LABEL_46:
              if ((v25 & 0xC000000000000001) != 0)
              {
                MEMORY[0x1BA9E3990](0, v25);
              }
              else
              {
                if (!*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_132:
                  __break(1u);
LABEL_133:
                  __break(1u);
LABEL_134:
                  __break(1u);
LABEL_135:
                  if (inited < 0) {
                    unint64_t v4 = inited;
                  }
                  else {
                    unint64_t v4 = inited & 0xFFFFFFFFFFFFFF8;
                  }
                  swift_bridgeObjectRetain();
                  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v17) {
                    goto LABEL_139;
                  }
                  continue;
                }
                swift_retain();
              }
              swift_bridgeObjectRelease();
              uint64_t v26 = dispatch thunk of UsoValue.getUsoIdentifiers()();
              swift_release();
            }
            else
            {
              if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_46;
              }
LABEL_50:
              swift_bridgeObjectRelease();
              uint64_t v26 = v19;
            }
            specialized Array.append<A>(contentsOf:)(v26);
            uint64_t v27 = UsoEntity.attributes.getter();
            if (!*(void *)(v27 + 16)) {
              goto LABEL_59;
            }
            unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001BA06A670);
            if ((v29 & 1) == 0) {
              goto LABEL_59;
            }
            unint64_t v30 = *(void *)(*(void *)(v27 + 56) + 8 * v28);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (v30 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v58) {
                goto LABEL_59;
              }
LABEL_55:
              if ((v30 & 0xC000000000000001) != 0)
              {
                MEMORY[0x1BA9E3990](0, v30);
              }
              else
              {
                if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_132;
                }
                swift_retain();
              }
              swift_bridgeObjectRelease();
              uint64_t v31 = dispatch thunk of UsoValue.getUsoIdentifiers()();
              swift_release();
            }
            else
            {
              if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_55;
              }
LABEL_59:
              swift_bridgeObjectRelease();
              uint64_t v31 = v19;
            }
            specialized Array.append<A>(contentsOf:)(v31);
            uint64_t v32 = UsoEntity.attributes.getter();
            if (!*(void *)(v32 + 16)) {
              goto LABEL_76;
            }
            unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
            if ((v34 & 1) == 0) {
              goto LABEL_76;
            }
            unint64_t v35 = *(void *)(*(void *)(v32 + 56) + 8 * v33);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (!(v35 >> 62))
            {
              if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_64;
              }
LABEL_76:
              swift_bridgeObjectRelease();
LABEL_77:
              uint64_t v43 = UsoEntity.attributes.getter();
              if (*(void *)(v43 + 16))
              {
                unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001BA06A650);
                if (v45)
                {
                  unint64_t v46 = *(void *)(*(void *)(v43 + 56) + 8 * v44);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  if (v46 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (!v60)
                    {
LABEL_116:
                      swift_release();
                      swift_release();
                      swift_bridgeObjectRelease();
                      goto LABEL_37;
                    }
                  }
                  else if (!*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  {
                    goto LABEL_116;
                  }
                  if ((v46 & 0xC000000000000001) != 0)
                  {
                    MEMORY[0x1BA9E3990](0, v46);
                  }
                  else
                  {
                    if (!*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                      goto LABEL_134;
                    }
                    swift_retain();
                  }
                  swift_bridgeObjectRelease();
                  uint64_t v47 = dispatch thunk of UsoValue.getAsEntity()();
                  swift_release();
                  if (v47)
                  {
                    uint64_t v48 = UsoEntity.usoIdentifiers.getter();
                    specialized Array.append<A>(contentsOf:)(v48);
                    uint64_t v49 = UsoEntity.attributes.getter();
                    if (!*(void *)(v49 + 16)) {
                      goto LABEL_105;
                    }
                    unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
                    if ((v51 & 1) == 0) {
                      goto LABEL_105;
                    }
                    unint64_t v4 = *(void *)(*(void *)(v49 + 56) + 8 * v50);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    if (v4 >> 62)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
                      swift_bridgeObjectRelease();
                      if (!v62) {
                        goto LABEL_105;
                      }
LABEL_89:
                      if ((v4 & 0xC000000000000001) != 0)
                      {
                        MEMORY[0x1BA9E3990](0, v4);
                      }
                      else
                      {
                        if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                          goto LABEL_142;
                        }
                        swift_retain();
                      }
                      swift_bridgeObjectRelease();
                      dispatch thunk of UsoValue.getUsoIdentifiers()();
                      swift_release();
                    }
                    else
                    {
                      if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                        goto LABEL_89;
                      }
LABEL_105:
                      swift_bridgeObjectRelease();
                    }
                    uint64_t v56 = swift_bridgeObjectRetain();
                    specialized Array.append<A>(contentsOf:)(v56);
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_release();
                  }
                  else
                  {
                    swift_release();
                  }
                  swift_release();
                  uint64_t v19 = MEMORY[0x1E4FBC860];
                  goto LABEL_37;
                }
              }
              swift_release();
              swift_bridgeObjectRelease();
LABEL_36:
              swift_release();
LABEL_37:
              if (v17 == ++v18)
              {
                swift_bridgeObjectRelease();
                return v64;
              }
              goto LABEL_38;
            }
            swift_bridgeObjectRetain();
            uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v59) {
              goto LABEL_76;
            }
LABEL_64:
            if ((v35 & 0xC000000000000001) != 0)
            {
              MEMORY[0x1BA9E3990](0, v35);
            }
            else
            {
              if (!*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_133;
              }
              swift_retain();
            }
            swift_bridgeObjectRelease();
            uint64_t v36 = dispatch thunk of UsoValue.getAsEntity()();
            swift_release();
            if (!v36) {
              goto LABEL_77;
            }
            uint64_t v37 = UsoEntity.usoIdentifiers.getter();
            specialized Array.append<A>(contentsOf:)(v37);
            uint64_t v38 = UsoEntity.attributes.getter();
            if (*(void *)(v38 + 16)
              && (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000),
                  (v40 & 1) != 0))
            {
              unint64_t v4 = *(void *)(*(void *)(v38 + 56) + 8 * v39);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              if (v4 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                uint64_t v41 = MEMORY[0x1E4FBC860];
                if (!v61) {
                  goto LABEL_122;
                }
LABEL_72:
                if ((v4 & 0xC000000000000001) != 0)
                {
                  MEMORY[0x1BA9E3990](0, v4);
                }
                else
                {
                  if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                    goto LABEL_141;
                  }
                  swift_retain();
                }
                swift_bridgeObjectRelease();
                uint64_t v42 = dispatch thunk of UsoValue.getUsoIdentifiers()();
                swift_release();
              }
              else
              {
                uint64_t v41 = MEMORY[0x1E4FBC860];
                if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_72;
                }
LABEL_122:
                swift_bridgeObjectRelease();
                uint64_t v42 = v41;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v42 = MEMORY[0x1E4FBC860];
            }
            specialized Array.append<A>(contentsOf:)(v42);
            uint64_t v52 = UsoEntity.attributes.getter();
            if (!*(void *)(v52 + 16)) {
              goto LABEL_103;
            }
            unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001BA06A670);
            if ((v54 & 1) == 0) {
              goto LABEL_103;
            }
            unint64_t v4 = *(void *)(*(void *)(v52 + 56) + 8 * v53);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (v4 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v63) {
                goto LABEL_103;
              }
LABEL_99:
              if ((v4 & 0xC000000000000001) != 0)
              {
                MEMORY[0x1BA9E3990](0, v4);
              }
              else
              {
                if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_143;
                }
                swift_retain();
              }
              swift_bridgeObjectRelease();
              dispatch thunk of UsoValue.getUsoIdentifiers()();
              swift_release();
            }
            else
            {
              if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_99;
              }
LABEL_103:
              swift_bridgeObjectRelease();
            }
            uint64_t v55 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v55);
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v19 = MEMORY[0x1E4FBC860];
            goto LABEL_77;
          }
          break;
        }
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        uint64_t v5 = MEMORY[0x1BA9E3990](0, v4);
LABEL_11:
        *(void *)(inited + 32) = v5;
        swift_bridgeObjectRelease();
LABEL_12:
        uint64_t v7 = UsoTask.arguments.getter();
        if (*(void *)(v7 + 16))
        {
          unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x746567726174, 0xE600000000000000);
          if (v9) {
            break;
          }
        }
        swift_bridgeObjectRelease();
        *(void *)(inited + 40) = 0;
      }
      unint64_t v4 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      if (v4 >> 62) {
        break;
      }
      if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_16;
      }
LABEL_21:
      uint64_t v11 = 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_21;
    }
LABEL_16:
    ;
  }
  while ((v4 & 0xC000000000000001) != 0);
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v11 = swift_retain();
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized LinkUsoParser.getEntityTypes(usoTask:identifiers:)()
{
  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v0 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized _ArrayProtocol.filter(_:)(v4, v1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = specialized Dictionary.init<A>(grouping:by:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = specialized _NativeDictionary.mapValues<A>(_:)(v6);
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t specialized LinkUsoParser.extractMentionedEntityTypes(usoTask:)(unint64_t a1)
{
  unint64_t v2 = 0x535F6E6F6D6D6F63;
  uint64_t v3 = type metadata accessor for UsoIdentifier();
  uint64_t v89 = *(void *)(v3 - 8);
  uint64_t v90 = v3;
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (void (**)(char *, uint64_t))((char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  BOOL v88 = (char *)&v77 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (unint64_t)&v77 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v77 - v12;
  uint64_t v14 = UsoTask.baseEntityAsString.getter();
  unint64_t v16 = v15;
  if (v14 == 0x535F6E6F6D6D6F63 && v15 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v18 = UsoTask.arguments.getter();
    if (!*(void *)(v18 + 16)) {
      goto LABEL_22;
    }
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
    if ((v20 & 1) == 0) {
      goto LABEL_22;
    }
    unint64_t v16 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!(v16 >> 62))
    {
      if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_22;
      }
      goto LABEL_9;
    }
LABEL_110:
    swift_bridgeObjectRetain();
    uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v75) {
      goto LABEL_22;
    }
LABEL_9:
    if ((v16 & 0xC000000000000001) != 0) {
      goto LABEL_113;
    }
    if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      swift_retain();
      goto LABEL_12;
    }
    __break(1u);
LABEL_115:
    swift_bridgeObjectRetain();
    uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v76) {
      goto LABEL_17;
    }
    goto LABEL_116;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v17) {
    goto LABEL_5;
  }
  BOOL v85 = v6;
  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  char v29 = 0;
  unint64_t v30 = 0;
  uint64_t v80 = 0;
  unint64_t v2 = (unint64_t)v88;
  uint64_t v87 = v89 + 16;
  unint64_t v86 = (void (**)(unint64_t, char *, uint64_t))*MEMORY[0x1E4FA3900];
  id v84 = (void (**)(void (**)(char *, uint64_t), unint64_t, uint64_t))(v89 + 32);
  unint64_t v83 = (void (**)(unint64_t, uint64_t))(v89 + 8);
  uint64_t v31 = &unk_1F1372000;
LABEL_46:
  char v43 = v29;
  if (v30 >= v31[379])
  {
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  unint64_t v44 = (char *)&outlined read-only object #0 of LinkUsoParser.extractMentionedEntityTypes(usoTask:) + 16 * v30;
  uint64_t v45 = *((void *)v44 + 4);
  uint64_t v46 = *((void *)v44 + 5);
  swift_bridgeObjectRetain();
  unint64_t v16 = a1;
  uint64_t v13 = (char *)UsoTask.arguments.getter();
  if (!*((void *)v13 + 2)
    || (unint64_t v16 = (unint64_t)v13, v47 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46), (v48 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  unint64_t v16 = *(void *)(*((void *)v13 + 7) + 8 * v47);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v71) {
      goto LABEL_44;
    }
  }
  else if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_44;
  }
  if ((v16 & 0xC000000000000001) != 0)
  {
    uint64_t v49 = MEMORY[0x1BA9E3990](0, v16);
  }
  else
  {
    if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_107;
    }
    uint64_t v49 = *(void *)(v16 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  unint64_t v16 = v49;
  uint64_t v50 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v50) {
    goto LABEL_45;
  }
  unint64_t v16 = v50;
  uint64_t v13 = (char *)UsoEntity.attributes.getter();
  if (!*((void *)v13 + 2)) {
    goto LABEL_43;
  }
  unint64_t v16 = (unint64_t)v13;
  unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v52 & 1) == 0) {
    goto LABEL_43;
  }
  unint64_t v16 = *(void *)(*((void *)v13 + 7) + 8 * v51);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v72) {
      goto LABEL_43;
    }
  }
  else if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_43;
  }
  if ((v16 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v16);
    goto LABEL_62;
  }
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_62:
    swift_bridgeObjectRelease();
    unint64_t v16 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (!v16)
    {
      swift_release();
      goto LABEL_45;
    }
    uint64_t v53 = UsoEntity.attributes.getter();
    if (!*(void *)(v53 + 16)
      || (unint64_t v79 = v16,
          unint64_t v16 = v53,
          unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000),
          (v55 & 1) == 0))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    unint64_t v16 = *(void *)(*(void *)(v53 + 56) + 8 * v54);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v73)
      {
LABEL_42:
        swift_release();
LABEL_43:
        swift_release();
LABEL_44:
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
    }
    else if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_42;
    }
    if ((v16 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1BA9E3990](0, v16);
    }
    else
    {
      if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_118:
        MEMORY[0x1BA9E3990](0, v16);
LABEL_20:
        swift_bridgeObjectRelease();
        uint64_t v24 = dispatch thunk of UsoValue.getUsoIdentifiers()();
        swift_release();
        unint64_t v16 = MEMORY[0x1E4FBC860];
        unint64_t v91 = MEMORY[0x1E4FBC860];
        unint64_t v25 = *(void (***)(void (**)(char *, uint64_t), unint64_t, uint64_t))(v24 + 16);
        if (!v25)
        {
LABEL_105:
          swift_bridgeObjectRelease();
          uint64_t v74 = specialized Dictionary.init<A>(grouping:by:)(v16);
          swift_release();
          unint64_t v11 = specialized _NativeDictionary.mapValues<A>(_:)(v74);
          swift_release();
          swift_bridgeObjectRelease();
          return v11;
        }
        unint64_t v83 = (void (**)(unint64_t, uint64_t))v2;
        unint64_t v2 = 0;
        BOOL v88 = (char *)(v89 + 16);
        uint64_t v26 = *MEMORY[0x1E4FA3910];
        unint64_t v86 = (void (**)(unint64_t, char *, uint64_t))(v89 + 32);
        uint64_t v87 = v26;
        id v84 = v25;
        BOOL v85 = (void (**)(char *, uint64_t))(v89 + 8);
        while (2)
        {
          if (v2 >= *(void *)(v24 + 16)) {
            goto LABEL_109;
          }
          unint64_t v32 = (*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
          uint64_t v33 = *(void *)(v89 + 72);
          (*(void (**)(char *, unint64_t, uint64_t))(v89 + 16))(v13, v24 + v32 + v33 * v2, v90);
          uint64_t v34 = UsoIdentifier.namespace.getter();
          uint64_t v36 = v35;
          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v16 = v38;
          if (v36)
          {
            if (v34 == v37 && v36 == v38)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_36;
            }
            char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v39)
            {
LABEL_36:
              char v40 = *v86;
              (*v86)(v11, v13, v90);
              unint64_t v16 = v91;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
                unint64_t v16 = v91;
              }
              unint64_t v42 = *(void *)(v16 + 16);
              unint64_t v41 = *(void *)(v16 + 24);
              if (v42 >= v41 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
                unint64_t v16 = v91;
              }
              *(void *)(v16 + 16) = v42 + 1;
              v40(v16 + v32 + v42 * v33, (char *)v11, v90);
              unint64_t v91 = v16;
              unint64_t v25 = v84;
LABEL_29:
              if (v25 == (void (**)(void (**)(char *, uint64_t), unint64_t, uint64_t))++v2)
              {
                unint64_t v16 = v91;
                goto LABEL_105;
              }
              continue;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          break;
        }
        (*v85)(v13, v90);
        goto LABEL_29;
      }
      swift_retain();
    }
    unint64_t v78 = v11;
    swift_bridgeObjectRelease();
    uint64_t v13 = (char *)dispatch thunk of UsoValue.getUsoIdentifiers()();
    swift_release();
    unint64_t v16 = MEMORY[0x1E4FBC860];
    unint64_t v91 = MEMORY[0x1E4FBC860];
    uint64_t v82 = *((void *)v13 + 2);
    if (!v82) {
      goto LABEL_91;
    }
    unint64_t v11 = 0;
    unint64_t v81 = v13;
    while (1)
    {
      if (v11 >= *((void *)v13 + 2)) {
        goto LABEL_108;
      }
      unint64_t v56 = (*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
      uint64_t v57 = *(void *)(v89 + 72);
      (*(void (**)(unint64_t, char *, uint64_t))(v89 + 16))(v2, &v13[v56 + v57 * v11], v90);
      uint64_t v58 = UsoIdentifier.namespace.getter();
      uint64_t v60 = v59;
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v62;
      if (v60)
      {
        if (v58 == v61 && v60 == v62)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_83:
          uint64_t v64 = *v84;
          (*v84)(v85, v2, v90);
          unint64_t v16 = v91;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
            unint64_t v16 = v91;
          }
          unint64_t v66 = *(void *)(v16 + 16);
          unint64_t v65 = *(void *)(v16 + 24);
          if (v66 >= v65 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
            unint64_t v16 = v91;
          }
          *(void *)(v16 + 16) = v66 + 1;
          v64((void (**)(char *, uint64_t))(v16 + v56 + v66 * v57), (unint64_t)v85, v90);
          unint64_t v91 = v16;
          unint64_t v2 = (unint64_t)v88;
          goto LABEL_76;
        }
        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v63) {
          goto LABEL_83;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      (*v83)(v2, v90);
LABEL_76:
      ++v11;
      uint64_t v13 = v81;
      if (v82 == v11)
      {
        unint64_t v16 = v91;
LABEL_91:
        swift_bridgeObjectRelease();
        uint64_t v67 = v80;
        uint64_t v68 = specialized Dictionary.init<A>(grouping:by:)(v16);
        swift_release();
        unint64_t v16 = specialized _NativeDictionary.mapValues<A>(_:)(v68);
        swift_bridgeObjectRelease();
        unint64_t v69 = v78;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v91 = v69;
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v91);
        uint64_t v80 = v67;
        if (v67) {
          goto LABEL_120;
        }
        unint64_t v11 = v91;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v31 = (void *)&unk_1F1372000;
LABEL_45:
        char v29 = 1;
        unint64_t v30 = 1;
        if (v43)
        {
          swift_arrayDestroy();
          return v11;
        }
        goto LABEL_46;
      }
    }
  }
  __break(1u);
LABEL_113:
  MEMORY[0x1BA9E3990](0, v16);
LABEL_12:
  swift_bridgeObjectRelease();
  unint64_t v2 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v2)
  {
LABEL_23:
    uint64_t v27 = MEMORY[0x1E4FBC860];
    return specialized Dictionary.init(dictionaryLiteral:)(v27);
  }
  uint64_t v21 = UsoEntity.attributes.getter();
  if (!*(void *)(v21 + 16)) {
    goto LABEL_116;
  }
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
  if ((v23 & 1) == 0) {
    goto LABEL_116;
  }
  unint64_t v16 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v16 >> 62) {
    goto LABEL_115;
  }
  if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_116:
    swift_release();
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_17:
  if ((v16 & 0xC000000000000001) != 0) {
    goto LABEL_118;
  }
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_20;
  }
  __break(1u);
LABEL_120:
  unint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t specialized LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)()
{
  uint64_t v0 = 0;
  uint64_t v48 = type metadata accessor for UsoIdentifier();
  uint64_t v1 = *(void *)(v48 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v48);
  unint64_t v51 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  unint64_t v47 = (char *)&v44 - v4;
  uint64_t v5 = 0;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v53 = MEMORY[0x1E4FBC860];
  uint64_t v50 = (void (**)(char *, unint64_t, uint64_t))0x80000001BA06A650;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = v5;
    uint64_t v9 = (char *)&outlined read-only object #0 of LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:) + 16 * v7;
    uint64_t v10 = *((void *)v9 + 4);
    uint64_t v11 = *((void *)v9 + 5);
    swift_bridgeObjectRetain();
    uint64_t v12 = UsoTask.arguments.getter();
    if (!*(void *)(v12 + 16) || (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11), (v14 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    unint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v25) {
        goto LABEL_27;
      }
    }
    else if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_27;
    }
    if ((v15 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1BA9E3990](0, v15);
    }
    else
    {
      if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_58;
      }
      swift_retain();
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (v16)
    {
      uint64_t v17 = UsoEntity.attributes.getter();
      if (!*(void *)(v17 + 16)) {
        goto LABEL_32;
      }
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, (uint64_t)v50);
      if ((v19 & 1) == 0) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v26) {
          goto LABEL_32;
        }
      }
      else if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_32;
      }
      if ((v15 & 0xC000000000000001) != 0)
      {
        MEMORY[0x1BA9E3990](0, v15);
      }
      else
      {
        if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_59;
        }
        swift_retain();
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = dispatch thunk of UsoValue.getAsEntity()();
      swift_release();
      if (v20)
      {
        unint64_t v15 = UsoEntity.attributes.getter();
        if (!*(void *)(v15 + 16)
          || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000), (v22 & 1) == 0))
        {
          swift_release();
LABEL_32:
          swift_release();
LABEL_27:
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(*(void *)(v15 + 56) + 8 * v21);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v23 >> 62)
        {
          swift_bridgeObjectRetain();
          unint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v15)
          {
LABEL_41:
            swift_release();
            swift_release();
            goto LABEL_27;
          }
        }
        else if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_41;
        }
        if ((v23 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1BA9E3990](0, v23);
        }
        else
        {
          if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_60;
          }
          swift_retain();
        }
        swift_bridgeObjectRelease();
        uint64_t v24 = dispatch thunk of UsoValue.getUsoIdentifiers()();
        swift_release();
        specialized Array.append<A>(contentsOf:)(v24);
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
LABEL_28:
    uint64_t v5 = 1;
    uint64_t v7 = 1;
  }
  while ((v8 & 1) == 0);
  swift_arrayDestroy();
  uint64_t v27 = v53;
  uint64_t v52 = v6;
  uint64_t v28 = *(void *)(v53 + 16);
  swift_bridgeObjectRetain();
  if (!v28)
  {
LABEL_56:
    swift_bridgeObjectRelease();
    uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology13UsoIdentifierVG_SSs5NeverOTg504_s14d16KitRuntime13Linkf79ParserV29appBundleIdsFromMentionedApps7usoTaskShySSG0A8Ontology0eN0C_tFSSAG0E10G54Vcfu_33_6552710fe21eac3bc6e61b74c3fc727bAKSSTf3nnnpk_nTf1cn_n(v6);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v42 = specialized Set.init<A>(_:)(v41);
    swift_bridgeObjectRelease();
    return v42;
  }
  unint64_t v29 = 0;
  uint64_t v30 = v1 + 16;
  uint64_t v45 = (void (**)(unint64_t, uint64_t))(v1 + 8);
  uint64_t v46 = v28;
  uint64_t v50 = (void (**)(char *, unint64_t, uint64_t))(v1 + 32);
  unint64_t v15 = (unint64_t)v47;
  uint64_t v8 = v48;
  while (v29 < *(void *)(v27 + 16))
  {
    unint64_t v31 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v32 = *(void *)(v1 + 72);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1 + 16))(v15, v27 + v31 + v32 * v29, v8);
    char v33 = closure #1 in LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)(v15);
    if (v0) {
      goto LABEL_61;
    }
    if (v33)
    {
      uint64_t v49 = 0;
      uint64_t v34 = v30;
      uint64_t v35 = v1;
      uint64_t v36 = *v50;
      (*v50)(v51, v15, v8);
      uint64_t v37 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1);
        uint64_t v37 = v52;
      }
      unint64_t v39 = *(void *)(v37 + 16);
      unint64_t v38 = *(void *)(v37 + 24);
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        uint64_t v37 = v52;
      }
      *(void *)(v37 + 16) = v39 + 1;
      unint64_t v40 = v37 + v31 + v39 * v32;
      uint64_t v8 = v48;
      v36((char *)v40, (unint64_t)v51, v48);
      uint64_t v52 = v37;
      uint64_t v1 = v35;
      uint64_t v28 = v46;
      unint64_t v15 = (unint64_t)v47;
      uint64_t v30 = v34;
      uint64_t v0 = v49;
    }
    else
    {
      (*v45)(v15, v8);
    }
    if (v28 == ++v29)
    {
      uint64_t v6 = v52;
      goto LABEL_56;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  (*v45)(v15, v8);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized LinkUsoParser.extractNoReferenceVerb(task:)()
{
  if (UsoTask.baseEntityAsString.getter() == 0x6E456F4E5F6F7375 && v0 == 0xEC00000079746974)
  {
    swift_bridgeObjectRelease();
    char v1 = 1;
  }
  else
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(UsoTask.arguments.getter() + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
    char v3 = v2;
    swift_bridgeObjectRelease();
    v1 &= v3 ^ 1;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v1 & 1;
}

unint64_t specialized LinkUsoParser.extractParseInformation(usoParse:)@<X0>(uint64_t a1@<X8>)
{
  if (specialized LinkUsoParser.isCancelTask(_:)())
  {
    id v2 = objc_msgSend(self, sel_cancelProtocol);
    uint64_t v3 = MEMORY[0x1E4FBC860];
    unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v3);
    unint64_t v6 = result;
LABEL_8:
    char v11 = 0;
    uint64_t v12 = MEMORY[0x1E4FBC870];
    goto LABEL_11;
  }
  unint64_t v7 = specialized LinkUsoParser.getTask(_:)();
  if (!v7)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v10);
    unint64_t v6 = result;
    id v2 = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7;
  id v2 = (id)specialized LinkUsoParser.getSystemProtocol(usoTask:)(v7);
  specialized LinkUsoParser.extractIdentifiers(task:)();
  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v9 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = specialized _ArrayProtocol.filter(_:)(v16, v13, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = specialized Dictionary.init<A>(grouping:by:)(v17);
  swift_bridgeObjectRelease();
  unint64_t v4 = specialized _NativeDictionary.mapValues<A>(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v6 = specialized LinkUsoParser.extractMentionedEntityTypes(usoTask:)(v8);
  uint64_t v12 = specialized LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)();
  char v11 = specialized LinkUsoParser.extractNoReferenceVerb(task:)();
  unint64_t result = swift_release();
LABEL_11:
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v12;
  *(unsigned char *)(a1 + 32) = v11 & 1;
  return result;
}

void *partial apply for closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)(uint64_t a1)
{
  return closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v4 = *(v3 - 1);
      Swift::Int v5 = *v3;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return a2;
}

uint64_t specialized static LinkUsoParser.adjustmentTaskProtocolExtractor(usoTask:)()
{
  unint64_t v0 = UsoTask.arguments.getter();
  if (!*(void *)(v0 + 16)) {
    goto LABEL_43;
  }
  unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x656D7473756A6461, 0xEE0065707954746ELL);
  if ((v2 & 1) == 0) {
    goto LABEL_43;
  }
  unint64_t v3 = *(void *)(*(void *)(v0 + 56) + 8 * v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v0) {
      goto LABEL_43;
    }
  }
  else if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_43;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v3);
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_41;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v4) {
    return 0;
  }
  swift_retain();
  uint64_t v5 = UsoEntity.attributes.getter();
  swift_release();
  if (!*(void *)(v5 + 16)) {
    goto LABEL_42;
  }
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x5664656E69666564, 0xEC00000065756C61);
  if ((v7 & 1) == 0) {
    goto LABEL_42;
  }
  unint64_t v0 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v0 >> 62))
  {
    if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v16)
  {
LABEL_42:
    swift_release();
LABEL_43:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_13:
  if ((v0 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v0);
    goto LABEL_16;
  }
  if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v9 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (v9)
    {
      uint64_t v10 = UsoTask.verbString.getter();
      uint64_t v12 = v11;
      swift_release();
      if (v10 == 0xD00000000000001ALL && v12 == 0x80000001BA06A570
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v13 = objc_msgSend(self, sel_moveSpatialProtocol);
LABEL_21:
        id v14 = v13;
        swift_release();
        return (uint64_t)v14;
      }
      if (v10 == 0xD00000000000001CLL && v12 == 0x80000001BA06A590
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v13 = objc_msgSend(self, sel_scrollProtocol);
        goto LABEL_21;
      }
      if (v10 == 0xD00000000000001ALL && v12 == 0x80000001BA06A5B0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v13 = objc_msgSend(self, sel_zoomProtocol);
        goto LABEL_21;
      }
      if (v10 == 0xD00000000000001CLL && v12 == 0x80000001BA06A5D0)
      {
        swift_bridgeObjectRelease();
LABEL_37:
        id v13 = objc_msgSend(self, sel_resizeProtocol);
        goto LABEL_21;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_37;
      }
    }
    swift_release();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t destroy for LinkParseMetadata(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LinkParseMetadata(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LinkParseMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LinkParseMetadata(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkParseMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkParseMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkParseMetadata()
{
  return &type metadata for LinkParseMetadata;
}

ValueMetadata *type metadata accessor for LinkUsoParser()
{
  return &type metadata for LinkUsoParser;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B9F508BC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t objectdestroyTm_5()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t LinkViewActionProvider.viewActions(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  char v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized LinkViewActionProvider.viewActions(bundleIdentifier:)
                                                + async function pointer to specialized LinkViewActionProvider.viewActions(bundleIdentifier:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [LNViewAction](uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    type metadata accessor for LNViewAction();
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return MEMORY[0x1F4188200](v3);
  }
}

uint64_t protocol witness for LinkViewActionProviding.viewActions(bundleIdentifier:) in conformance LinkViewActionProvider(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized LinkViewActionProvider.viewActions(bundleIdentifier:)
                                                + async function pointer to specialized LinkViewActionProvider.viewActions(bundleIdentifier:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for AceServiceInvokerAsync.submit<A>(_:setRefId:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

uint64_t specialized LinkViewActionProvider.viewActions(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return MEMORY[0x1F4188298](specialized LinkViewActionProvider.viewActions(bundleIdentifier:), 0, 0);
}

uint64_t specialized LinkViewActionProvider.viewActions(bundleIdentifier:)()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  id v3 = objc_allocWithZone(MEMORY[0x1E4F72BB8]);
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](v1, v2);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithBundleIdentifier_, v4);
  v0[18] = v5;

  if (v5)
  {
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = specialized LinkViewActionProvider.viewActions(bundleIdentifier:);
    uint64_t v6 = swift_continuation_init();
    v0[10] = MEMORY[0x1E4F143A8];
    v0[11] = 0x40000000;
    v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [LNViewAction];
    v0[13] = &block_descriptor_0;
    v0[14] = v6;
    objc_msgSend(v5, sel_fetchViewActionsWithCompletionHandler_, v0 + 10);
    return MEMORY[0x1F41881E8](v0 + 2);
  }
  else
  {
    id v7 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v8 = MEMORY[0x1E4FBC860];
    return v7(v8);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = specialized LinkViewActionProvider.viewActions(bundleIdentifier:);
  }
  else {
    uint64_t v2 = specialized LinkViewActionProvider.viewActions(bundleIdentifier:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = v0[15];

  id v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t dispatch thunk of LinkViewActionProviding.viewActions(bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return v11(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for LinkViewActionProvider()
{
  return &type metadata for LinkViewActionProvider;
}

unint64_t type metadata accessor for LNViewAction()
{
  unint64_t result = lazy cache variable for type metadata for LNViewAction;
  if (!lazy cache variable for type metadata for LNViewAction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNViewAction);
  }
  return result;
}

uint64_t *MeCardService.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static MeCardService.instance;
}

void one-time initialization function for instance()
{
  type metadata accessor for MeCardService();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_clearCachedMeCard, *MEMORY[0x1E4F1AF88], 0);

  static MeCardService.instance = v0;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v0 = type metadata accessor for TaskPriority();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = objc_msgSend(self, sel_siriExecutionStream);
  uint64_t v4 = objc_msgSend(v3, sel_source);

  static TaskPriority.background.getter();
  type metadata accessor for SiriKitBiomeDonator();
  id v5 = swift_allocObject();
  uint64_t v6 = v4;
  id v7 = specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)((uint64_t)v6, (uint64_t)v2, v5);

  static SiriKitBiomeDonator.instance = v7;
}

uint64_t static MeCardService.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t one-time initialization function for meCardKeys()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v17;
  uint64_t v25 = v16;
  uint64_t v26 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray.reserveCapacity(_:)();
  swift_bridgeObjectRetain();
  MEMORY[0x1BA9E2DD0](v0, v2);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1BA9E2DD0](v3, v5);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1BA9E2DD0](v19, v7);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1BA9E2DD0](v20, v9);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1BA9E2DD0](v21, v11);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1BA9E2DD0](v22, v13);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1BA9E2DD0](v23, v15);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1BA9E2DD0](v25, v24);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  uint64_t result = swift_arrayDestroy();
  static MeCardService.meCardKeys = v26;
  return result;
}

id MeCardService.contactSource.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
    uint64_t v4 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id MeCardService.fetchMeCard()()
{
  v7[1] = *(id *)MEMORY[0x1E4F143B8];
  id v0 = MeCardService.contactSource.getter();
  if (one-time initialization token for meCardKeys != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v7[0] = 0;
  id v2 = objc_msgSend(v0, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, isa, v7);

  if (v2)
  {
    id v3 = v7[0];
    return v2;
  }
  else
  {
    id v5 = v7[0];
    uint64_t v4 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (id)v4;
}

CNContact_optional __swiftcall MeCardService.fetchMeCard(allowCached:)(Swift::Bool allowCached)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = *(id *)(v1 + 16);
  if (v7 && allowCached)
  {
    id v8 = v7;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    id v10 = (id)static Log.executor;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    id v7 = MeCardService.fetchMeCard()();
    char v12 = v11;
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    if (v12)
    {
      id v15 = v7;
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1BA04FD90;
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      uint64_t v19 = v18;
      *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v16 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v16 + 32) = v17;
      *(void *)(v16 + 40) = v19;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<SABaseCommand?, Error>(v7);
      outlined consume of Result<SABaseCommand?, Error>(v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      id v7 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      uint64_t v13 = *(void **)(v1 + 16);
      *(void *)(v1 + 16) = v7;
      id v14 = v7;
    }
  }
  uint64_t v20 = (objc_class *)v7;
  result.value.super.Class isa = v20;
  result.is_nil = v9;
  return result;
}

uint64_t MeCardService.deinit()
{
  return v0;
}

uint64_t MeCardService.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MeCardFetching.fetchMeCard(allowCached:) in conformance MeCardService()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t type metadata accessor for MeCardService()
{
  return self;
}

uint64_t method lookup function for MeCardService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MeCardService);
}

uint64_t dispatch thunk of MeCardService.fetchMeCard(allowCached:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MeCardFetching.fetchMeCard(allowCached:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

SiriKitRuntime::MessagesAffinityScorer __swiftcall MessagesAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA0629D0;
  uint64_t v1 = 0xD000000000000031;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t MessagesAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for MessagesAffinityScorer()
{
  return &type metadata for MessagesAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues)
  {
    type metadata accessor for UsoEntity_common_MessageMode.DefinedValues();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues);
  }
  return result;
}

uint64_t MetricsEventInformation.flowTask.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.flowTask.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *id v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MetricsEventInformation.flowTask.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t MetricsEventInformation.requestEventJson.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.requestEventJson.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MetricsEventInformation.requestEventJson.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t MetricsEventInformation.interactionId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.interactionId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*MetricsEventInformation.interactionId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t MetricsEventInformation.resultCandidateId.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.resultCandidateId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*MetricsEventInformation.resultCandidateId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t MetricsEventInformation.appBundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.appBundleId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*MetricsEventInformation.appBundleId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

void __swiftcall MetricsEventInformation.init(flowTask:requestEventJson:interactionId:resultCandidateId:appBundleId:)(SiriKitRuntime::MetricsEventInformation *__return_ptr retstr, Swift::String flowTask, Swift::String requestEventJson, Swift::String interactionId, Swift::String resultCandidateId, Swift::String appBundleId)
{
  retstr->flowTask = flowTask;
  retstr->requestEventJson = requestEventJson;
  retstr->interactionId = interactionId;
  retstr->resultCandidateId = resultCandidateId;
  retstr->appBundleId = appBundleId;
}

uint64_t destroy for MetricsEventInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MetricsEventInformation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MetricsEventInformation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for MetricsEventInformation(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEventInformation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEventInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEventInformation()
{
  return &type metadata for MetricsEventInformation;
}

uint64_t MitigationDismissalHelper.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  MitigationDismissalHelper.init()();
  return v0;
}

void *MitigationDismissalHelper.init()()
{
  uint64_t v1 = (void *)v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v2);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v7 - 8);
  *(_OWORD *)(v0 + 16) = xmmword_1BA057C70;
  *(void *)(v0 + 32) = 0xD00000000000001FLL;
  *(void *)(v0 + 40) = 0x80000001BA06A740;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCC68], v3);
  *(void *)&v20[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v8 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  Swift::Bool v9 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA063780);
  id v10 = objc_msgSend(v8, sel_initWithSuiteName_, v9);

  if (!v10) {
    id v10 = objc_msgSend(self, sel_standardUserDefaults);
  }
  uint64_t v11 = v1[4];
  uint64_t v12 = v1[5];
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)MEMORY[0x1BA9E2DD0](v11, v12);
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v10, sel_objectForKey_, v13);

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v15 = v1[4];
    uint64_t v16 = v1[5];
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)MEMORY[0x1BA9E2DD0](v15, v16);
    swift_bridgeObjectRelease();
    id v18 = objc_msgSend(v10, sel_integerForKey_, v17);

    v1[3] = v18;
  }
  else
  {
    memset(v20, 0, sizeof(v20));

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t MitigationDismissalHelper.shouldDismissUI(_:_:)(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InputOrigin();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InputOrigin?, InputOrigin?));
  MEMORY[0x1F4188790](v7);
  Swift::Bool v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v30 - v15;
  MEMORY[0x1F4188790](v14);
  id v18 = (char *)&v30 - v17;
  if (PreExecutionDecision.rawValue.getter(a1) == 0x747065636361 && v19 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    outlined init with copy of InputOrigin?(a2, (uint64_t)v18);
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    outlined init with copy of InputOrigin?(a2, (uint64_t)v18);
    if ((v20 & 1) == 0)
    {
      uint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for InputOrigin?;
      uint64_t v25 = (uint64_t)v18;
      goto LABEL_12;
    }
  }
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v16, *MEMORY[0x1E4FA2390], v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  uint64_t v21 = (uint64_t)&v9[*(int *)(v7 + 48)];
  outlined init with copy of InputOrigin?((uint64_t)v18, (uint64_t)v9);
  outlined init with copy of InputOrigin?((uint64_t)v16, v21);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v22((uint64_t)v9, 1, v4) != 1)
  {
    outlined init with copy of InputOrigin?((uint64_t)v9, (uint64_t)v13);
    if (v22(v21, 1, v4) != 1)
    {
      uint64_t v26 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v31, v21, v4);
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, MEMORY[0x1E4FA23A0]);
      char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28(v26, v4);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
      v28(v13, v4);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
      char v23 = v27 ^ 1;
      return v23 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    goto LABEL_10;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  if (v22(v21, 1, v4) != 1)
  {
LABEL_10:
    uint64_t v24 = &demangling cache variable for type metadata for (InputOrigin?, InputOrigin?);
    uint64_t v25 = (uint64_t)v9;
LABEL_12:
    outlined destroy of ReferenceResolutionClientProtocol?(v25, v24);
    char v23 = 1;
    return v23 & 1;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  char v23 = 0;
  return v23 & 1;
}

uint64_t MitigationDismissalHelper.deinit()
{
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t MitigationDismissalHelper.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of InputOrigin?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MitigationDismissalHelper()
{
  return self;
}

uint64_t method lookup function for MitigationDismissalHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MitigationDismissalHelper);
}

uint64_t dispatch thunk of MitigationDismissalHelper.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of MitigationDismissalHelper.shouldDismissUI(_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MitigationDismissalHelper.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: ContextUpdater));
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v9) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v5 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v9) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v5 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v9) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v5 + 8 * v11);
        if (!v19)
        {
          int64_t v11 = v18 + 3;
          if (v18 + 3 >= v9) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v5 + 8 * v11);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v19 - 1) & v19;
    unint64_t v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = type metadata accessor for UserID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v4, v14 + *(void *)(*(void *)(v15 - 8) + 72) * v13, v15);
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    *(void *)&v4[*(int *)(v2 + 48)] = v16;
    uint64_t v17 = *(void (**)(void))(*(void *)v16 + 480);
    swift_retain();
    v17();
    uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for (key: UserID, value: ContextUpdater));
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v9) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v5 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v5 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = *(void *)(a11 + 24);
  uint64_t v18 = *(void *)(a11 + 32);
  uint64_t v19 = __swift_mutable_project_boxed_opaque_existential_1(a11, v17);
  uint64_t v20 = specialized MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, v19, a12, a13, v13, v17, ObjectType, v18);
  __swift_destroy_boxed_opaque_existential_1Tm(a11);
  return v20;
}

uint64_t MultiUserContextUpdater.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t MultiUserContextUpdater.rraasClient.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, a1);
}

uint64_t MultiUserContextUpdater.correctionsPlatformClient.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 96, a1);
}

uint64_t MultiUserContextUpdater.serviceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t MultiUserContextUpdater.assistantId.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultiUserContextUpdater.requestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultiUserContextUpdater.rootRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultiUserContextUpdater.contextDonator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 192, a1);
}

uint64_t MultiUserContextUpdater.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t MultiUserContextUpdater.userIdSet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiUserContextUpdater.knownUserIdSet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiUserContextUpdater.userIdToContextUpdater.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 256) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MultiUserContextUpdater.sharedContextUpdater.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t MultiUserContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  uint64_t v26 = a2;
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  char v27 = a3;
  long long v24 = a12;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = *(void *)(a11 + 24);
  uint64_t v17 = *(void *)(a11 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a11, v16);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = specialized MultiUserContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(a1, v26, v27, a4, v28, v29, v30, v31, a9, a10, (uint64_t)v20, v24, a13, v25, v16, ObjectType, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a11);
  return v22;
}

id Dictionary<>.toNSError()(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  specialized _dictionaryUpCast<A, B, C, D>(_:)(a1);
  id v1 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
  uint64_t v2 = (void *)MEMORY[0x1BA9E2DD0](0x55747865746E6F43, 0xEE00726574616470);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v1, sel_initWithDomain_code_userInfo_, v2, -1, isa);

  return v4;
}

uint64_t specialized MultiUserContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v28 = a15;
  uint64_t v29 = a17;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32))(boxed_opaque_existential_0, a11, a15);
  *(void *)(a14 + 256) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(a14 + 264) = 0;
  outlined init with take of ReferenceResolutionClientProtocol(a1, a14 + 16);
  outlined init with take of ReferenceResolutionClientProtocol(a2, a14 + 56);
  outlined init with take of ReferenceResolutionClientProtocol(a3, a14 + 96);
  *(void *)(a14 + 136) = a4;
  *(void *)(a14 + 144) = a5;
  *(void *)(a14 + 152) = a6;
  *(void *)(a14 + 160) = a7;
  *(void *)(a14 + 168) = a8;
  *(void *)(a14 + 176) = a9;
  *(void *)(a14 + 184) = a10;
  outlined init with take of ReferenceResolutionClientProtocol(&v27, a14 + 192);
  *(_OWORD *)(a14 + 232) = a12;
  *(void *)(a14 + 248) = a13;
  return a14;
}

uint64_t specialized MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  char v23 = a1;
  long long v24 = a2;
  long long v22 = a12;
  uint64_t v17 = *(void *)(a15 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MultiUserContextUpdater();
  uint64_t v20 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a11, a15);
  return specialized MultiUserContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, (uint64_t)v19, v22, a13, v20, a15, a16, a17);
}

uint64_t sub_1B9F538D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9F53920(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 192);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9F53974@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9F539C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 216);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t method lookup function for MultiUserContextUpdater(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MultiUserContextUpdater);
}

uint64_t dispatch thunk of MultiUserContextUpdater.userIdToContextUpdater.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.userIdToContextUpdater.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.userIdToContextUpdater.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.sharedContextUpdater.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.sharedContextUpdater.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.sharedContextUpdater.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.updateServerContext()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.applyResponseText(_:scope:userId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.dispatch(forScope:currentUserId:applyContextTo:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.makeContextUpdater(userId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t SIRINLUTask.toNluTask()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = objc_msgSend(self, sel_convertFromTask_, v1);
  unint64_t v8 = v7;
  if (v7 && (id v9 = [v7 data]) != 0)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    uint64_t v14 = type metadata accessor for Siri_Nlu_External_Task();
    uint64_t v26 = v11;
    unint64_t v27 = v13;
    uint64_t v25 = 0;
    memset(&v24[16], 0, 32);
    outlined copy of Data._Representation(v11, v13);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
    Message.init<A>(contiguousBytes:extensions:partial:options:)();
    outlined consume of Data._Representation(v11, v13);
    uint64_t v21 = *(void *)(v14 - 8);
    long long v22 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56);
    v22((uint64_t)v6, 0, 1, v14);

    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v21 + 32))(a1, v6, v14);
    return v22(a1, 0, 1, v14);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v16, v17, "Proto NL Task has no data.", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      uint64_t v19 = v8;
    }
    else
    {
      uint64_t v19 = v16;
      uint64_t v16 = v8;
    }

    uint64_t v20 = type metadata accessor for Siri_Nlu_External_Task();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a1, 1, 1, v20);
  }
}

id Siri_Nlu_External_Task.toLegacyTask()()
{
  type metadata accessor for Siri_Nlu_External_Task();
  lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
  uint64_t v6 = Message.serializedData(partial:)();
  unint64_t v8 = v7;
  id v9 = objc_allocWithZone(MEMORY[0x1E4FA29C0]);
  outlined copy of Data._Representation(v6, v8);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v6, v8);
  id v11 = objc_msgSend(v9, sel_initWithData_, isa);

  if (!v11)
  {
    outlined consume of Data._Representation(v6, v8);
LABEL_2:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_1B9C64000, v1, v2, "Failed to convert proto-backed Siri_Nlu_External_Task to legacy NLTask", v3, 2u);
      MEMORY[0x1BA9E48C0](v3, -1, -1);
    }

    return 0;
  }
  unint64_t v12 = self;
  id v13 = objc_msgSend(v11, sel_task);
  id v14 = objc_msgSend(v12, sel_convertUsoGraph_, v13);

  if (!v14)
  {
    outlined consume of Data._Representation(v6, v8);

    goto LABEL_2;
  }
  id result = objc_msgSend(v11, sel_score);
  if (result)
  {
    uint64_t v15 = result;
    objc_msgSend(result, sel_value);
    double v17 = v16;

    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA3A18]), sel_initWithTask_score_, v14, v17);
    outlined consume of Data._Representation(v6, v8);

    return v4;
  }
  __break(1u);
  return result;
}

id Array<A>.toLegacyTasks()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = (id)MEMORY[0x1E4FBC860];
  uint64_t v33 = MEMORY[0x1E4FBC860];
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    id v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v8 = v3 + 16;
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v8 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64));
    uint64_t v31 = *(void *)(v8 + 56);
    uint64_t v32 = v9;
    uint64_t v30 = (uint64_t (**)(char *, uint64_t))(v8 - 8);
    v29[1] = a1;
    swift_bridgeObjectRetain();
    v29[2] = v8;
    while (1)
    {
      v32(v5, v10, v2);
      lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
      uint64_t v15 = Message.serializedData(partial:)();
      unint64_t v17 = v16;
      id v18 = objc_allocWithZone(MEMORY[0x1E4FA29C0]);
      outlined copy of Data._Representation(v15, v17);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v15, v17);
      id v20 = objc_msgSend(v18, sel_initWithData_, isa);

      if (!v20) {
        break;
      }
      uint64_t v21 = self;
      id v22 = objc_msgSend(v20, sel_task);
      id v23 = objc_msgSend(v21, sel_convertUsoGraph_, v22);

      if (!v23)
      {
        outlined consume of Data._Representation(v15, v17);

        goto LABEL_6;
      }
      id result = objc_msgSend(v20, sel_score);
      if (!result)
      {
        __break(1u);
        return result;
      }
      long long v24 = result;
      objc_msgSend(result, sel_value);
      double v26 = v25;

      id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA3A18]), sel_initWithTask_score_, v23, v26);
      outlined consume of Data._Representation(v15, v17);

      uint64_t v28 = (*v30)(v5, v2);
      if (v27)
      {
        MEMORY[0x1BA9E3030](v28);
        if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
LABEL_4:
      v10 += v31;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        return (id)v33;
      }
    }
    outlined consume of Data._Representation(v15, v17);
LABEL_6:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "Failed to convert proto-backed Siri_Nlu_External_Task to legacy NLTask", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    (*v30)(v5, v2);
    goto LABEL_4;
  }
  return result;
}

uint64_t Array<A>.toNluTasks()(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v44 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  id v9 = (char *)&v42 - v8;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  os_log_type_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v45 = (char *)&v42 - v14;
  if (!(a1 >> 62))
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_3;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v15 = result;
  if (!result) {
    goto LABEL_27;
  }
LABEL_3:
  if (v15 >= 1)
  {
    char v43 = v7;
    unint64_t v51 = a1 & 0xC000000000000001;
    id v50 = self;
    uint64_t v17 = 0;
    uint64_t v53 = (void (**)(char *, char *, uint64_t))(v46 + 32);
    unint64_t v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
    uint64_t v48 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
    unint64_t v18 = MEMORY[0x1E4FBC860];
    unint64_t v47 = a1;
    uint64_t v49 = v9;
    uint64_t v42 = v13;
    uint64_t v52 = v15;
    do
    {
      unint64_t v19 = v18;
      if (v51) {
        id v20 = (id)MEMORY[0x1BA9E3990](v17, a1);
      }
      else {
        id v20 = *(id *)(a1 + 8 * v17 + 32);
      }
      uint64_t v21 = v20;
      id v22 = objc_msgSend(v50, sel_convertFromTask_, v20, v42);
      id v23 = v22;
      if (v22 && (id v24 = [v22 data]) != 0)
      {
        double v25 = v24;
        uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v28 = v27;

        uint64_t v58 = v26;
        unint64_t v59 = v28;
        uint64_t v57 = 0;
        long long v55 = 0u;
        long long v56 = 0u;
        outlined copy of Data._Representation(v26, v28);
        BinaryDecodingOptions.init()();
        lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
        uint64_t v29 = v43;
        Message.init<A>(contiguousBytes:extensions:partial:options:)();
        outlined consume of Data._Representation(v26, v28);
        unint64_t v40 = *v54;
        (*v54)(v29, 0, 1, v10);

        uint64_t v41 = (uint64_t)v49;
        (*v53)(v49, v29, v10);
        v40((char *)v41, 0, 1, v10);
        a1 = v47;
        os_log_type_t v13 = v42;
      }
      else
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v33 = 0;
          _os_log_impl(&dword_1B9C64000, v31, v32, "Proto NL Task has no data.", v33, 2u);
          uint64_t v34 = v33;
          a1 = v47;
          MEMORY[0x1BA9E48C0](v34, -1, -1);
          uint64_t v35 = v23;
        }
        else
        {
          uint64_t v35 = v31;
          uint64_t v31 = v23;
        }

        uint64_t v41 = (uint64_t)v49;
        (*v54)(v49, 1, 1, v10);
      }
      unint64_t v18 = v19;

      if ((*v48)(v41, 1, v10) == 1)
      {
        outlined destroy of Siri_Nlu_External_Task?(v41);
      }
      else
      {
        uint64_t v36 = *v53;
        uint64_t v37 = v45;
        (*v53)(v45, (char *)v41, v10);
        v36(v13, v37, v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, v19);
        }
        unint64_t v39 = *(void *)(v18 + 16);
        unint64_t v38 = *(void *)(v18 + 24);
        if (v39 >= v38 >> 1) {
          unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v18);
        }
        *(void *)(v18 + 16) = v39 + 1;
        v36((char *)(v18+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v39), v13, v10);
      }
      ++v17;
    }
    while (v52 != v17);
    swift_bridgeObjectRelease();
    return v18;
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of Siri_Nlu_External_Task?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Sequence<>.isContainsAppShortcutParse.getter()
{
  return Sequence.contains(where:)() & 1;
}

void *Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier.NluComponent();
  uint64_t v76 = *(void **)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v77 = (char *)v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  MEMORY[0x1F4188790](v79);
  uint64_t v82 = (uint64_t)v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v78 = (uint64_t)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v81 = (uint64_t)v62 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v80 = (uint64_t)v62 - v8;
  uint64_t v9 = type metadata accessor for UsoIdentifier();
  uint64_t v83 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1BA9DE000](v13);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v19 = *(void *)(v18 - 8);
  if (v17)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v15, v16 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)), v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v15, 1, 1, v18);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v20 = v19;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18) == 1)
  {
    uint64_t v21 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
    id v22 = v15;
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, v21);
    return (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v23 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v18);
  if (!v23) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!v85[3])
  {
    swift_release();
    uint64_t v21 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    id v22 = (char *)v85;
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_execute_common_VoiceCommand();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_42:
    swift_release();
    return (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v64 = v23;
  uint64_t v24 = v84;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.reference.getter();
  swift_release();
  if (!v85[0]
    || (uint64_t v25 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(), swift_release(), !v25))
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.executor);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl(&dword_1B9C64000, v58, v59, "[Generalized AppShortcuts] Identifiers missing for VoiceCommand node", v60, 2u);
      MEMORY[0x1BA9E48C0](v60, -1, -1);
    }

    swift_release();
    goto LABEL_42;
  }
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x1E4FBC860];
  }
  v62[2] = v24;
  uint64_t v75 = *(void (**)(char *, unint64_t, uint64_t))(v83 + 16);
  unint64_t v27 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
  v62[1] = v25;
  unint64_t v28 = v25 + v27;
  uint64_t v29 = *(void *)(v83 + 72);
  uint64_t v73 = *MEMORY[0x1E4FA3928];
  uint64_t v74 = v29;
  unsigned int v72 = *MEMORY[0x1E4FA2CD0];
  unint64_t v70 = v76 + 7;
  uint64_t v71 = v76 + 13;
  uint64_t v30 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 6);
  char v63 = (void (**)(char *, uint64_t, uint64_t))(v76 + 4);
  unint64_t v65 = (void (**)(uint64_t, uint64_t))(v76 + 1);
  uint64_t v76 = (void *)MEMORY[0x1E4FBC860];
  v83 += 16;
  uint64_t v31 = (void (**)(char *, uint64_t))(v83 - 8);
  uint64_t v68 = v9;
  unint64_t v69 = v30;
  uint64_t v67 = (void (**)(char *, uint64_t))(v83 - 8);
  v75(v11, v28, v9);
  while (1)
  {
    uint64_t v32 = UsoIdentifier.namespace.getter();
    uint64_t v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (!v34)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    if (v32 == v35 && v34 == v36)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0) {
        goto LABEL_15;
      }
    }
    uint64_t v38 = v80;
    UsoIdentifier.sourceComponent.getter();
    uint64_t v39 = v81;
    ((void (*)(uint64_t, void, uint64_t))*v71)(v81, v72, v0);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))*v70)(v39, 0, 1, v0);
    uint64_t v40 = v0;
    uint64_t v41 = v82;
    uint64_t v42 = v82 + *(int *)(v79 + 48);
    outlined init with copy of UsoIdentifier.NluComponent?(v38, v82);
    outlined init with copy of UsoIdentifier.NluComponent?(v39, v42);
    char v43 = *v69;
    if ((*v69)(v41, 1, v40) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v39, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      int v44 = v43(v42, 1, v40);
      uint64_t v9 = v68;
      uint64_t v0 = v40;
      if (v44 != 1) {
        goto LABEL_27;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v82, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      uint64_t v31 = v67;
LABEL_29:
      uint64_t v49 = UsoIdentifier.appBundleId.getter();
      uint64_t v66 = v50;
      uint64_t v51 = UsoIdentifier.groupIndex.getter();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v52 = v76;
      }
      else {
        uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76[2] + 1, 1, v76);
      }
      unint64_t v54 = v52[2];
      unint64_t v53 = v52[3];
      if (v54 >= v53 >> 1) {
        uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v52);
      }
      _OWORD v52[2] = v54 + 1;
      uint64_t v76 = v52;
      long long v55 = &v52[3 * v54];
      uint64_t v56 = v66;
      v55[4] = v49;
      v55[5] = v56;
      *((_DWORD *)v55 + 12) = v51;
      *((unsigned char *)v55 + 52) = BYTE4(v51) & 1;
      goto LABEL_15;
    }
    uint64_t v45 = v78;
    outlined init with copy of UsoIdentifier.NluComponent?(v41, v78);
    if (v43(v42, 1, v40) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v81, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      (*v65)(v45, v40);
      uint64_t v9 = v68;
      uint64_t v0 = v40;
LABEL_27:
      outlined destroy of ReferenceResolutionClientProtocol?(v82, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      uint64_t v31 = v67;
      goto LABEL_15;
    }
    uint64_t v46 = v77;
    (*v63)(v77, v42, v40);
    lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent();
    char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v48 = *v65;
    (*v65)((uint64_t)v46, v40);
    outlined destroy of ReferenceResolutionClientProtocol?(v81, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v48(v45, v40);
    outlined destroy of ReferenceResolutionClientProtocol?(v82, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    uint64_t v9 = v68;
    uint64_t v0 = v40;
    uint64_t v31 = v67;
    if (v47) {
      goto LABEL_29;
    }
LABEL_15:
    (*v31)(v11, v9);
    v28 += v74;
    if (!--v26) {
      break;
    }
    v75(v11, v28, v9);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v76;
}

uint64_t AppShortcutTarget.bundleIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppShortcutTarget.actionIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t AppShortcutTarget.groupIndex.getter()
{
  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32);
}

uint64_t AppShortcutTarget.containsAppName.getter()
{
  return *(unsigned __int8 *)(v0 + 37);
}

uint64_t AppShortcutTarget.debugDescription.getter()
{
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v26[0] = 0xD000000000000023;
  v26[1] = 0x80000001BA06A870;
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v26[0] = 0xD000000000000012;
  v26[1] = 0x80000001BA06A8A0;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 0xD000000000000012;
  v9._object = (void *)0x80000001BA06A8A0;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v26, "groupIndex: ");
  HIWORD(v26[1]) = -5120;
  outlined init with take of UInt32?(v0 + 32, (uint64_t)v27);
  outlined init with take of UInt32?((uint64_t)v27, (uint64_t)&v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  v10._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  uint64_t v12 = v26[0];
  uint64_t v13 = (void *)v26[1];
  v26[0] = 0xD000000000000023;
  v26[1] = 0x80000001BA06A870;
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v26[0];
  uint64_t v15 = v26[1];
  v26[0] = 0;
  v26[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v26[0] = 0xD000000000000011;
  v26[1] = 0x80000001BA06A8C0;
  if (*(unsigned char *)(v0 + 37)) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 37)) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  uint64_t v20 = v26[0];
  uint64_t v21 = (void *)v26[1];
  v26[0] = v16;
  v26[1] = v15;
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v23._uint64_t countAndFlagsBits = 41;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return v26[0];
}

uint64_t AppShortcutTarget.identifier.getter()
{
  long long v7 = *v0;
  uint64_t v6 = v7;
  outlined retain of String((uint64_t)&v7);
  v1._uint64_t countAndFlagsBits = 35;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  uint64_t v3 = *((void *)v0 + 2);
  uint64_t v2 = (void *)*((void *)v0 + 3);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v3;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return v6;
}

void AppShortcutTarget.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 36) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v1 = *(_DWORD *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + 37) & 1);
}

Swift::Int AppShortcutTarget.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 36) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v1 = *(_DWORD *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + 37) & 1);
  return Hasher._finalize()();
}

uint64_t AppShortcutTarget.init(bundleIdentifier:actionIdentifier:groupIndex:containsAppName:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(_DWORD *)(a7 + 32) = a5;
  *(unsigned char *)(a7 + 36) = BYTE4(a5) & 1;
  *(unsigned char *)(a7 + 37) = a6;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppShortcutTarget()
{
  return AppShortcutTarget.debugDescription.getter();
}

void protocol witness for Hashable.hash(into:) in conformance AppShortcutTarget()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 32);
  int v2 = *(unsigned __int8 *)(v0 + 36);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 37);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppShortcutTarget()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 32);
  int v2 = *(unsigned __int8 *)(v0 + 36);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 37);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppShortcutTarget(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(void *)((char *)v6 + 14) = *(void *)((char *)a1 + 30);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(void *)((char *)v8 + 14) = *(void *)((char *)a2 + 30);
  return specialized static AppShortcutTarget.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t GeneralizedAppShortcutTarget.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t GeneralizedAppShortcutTarget.groupIndex.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 | ((HIDWORD(a3) & 1) << 32);
}

uint64_t UsoTask_run_common_VoiceCommand.appShortcuts.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v111 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  long long v3 = (char *)v104 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  Swift::String v129 = (char *)v104 - v5;
  MEMORY[0x1F4188790](v4);
  Swift::String v131 = (char *)v104 - v6;
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  if (!v136 || (uint64_t v7 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(), swift_release(), !v7))
  {
    if (one-time initialization token for executor == -1)
    {
LABEL_20:
      uint64_t v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.executor);
      int v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v44, v45))
      {
        char v47 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_24;
      }
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_1B9C64000, v44, v45, "[AppShortcuts] Identifiers missing for VoiceCommand node", v46, 2u);
      char v47 = (void *)MEMORY[0x1E4FBC860];
      goto LABEL_22;
    }
LABEL_88:
    swift_once();
    goto LABEL_20;
  }
  uint64_t v136 = MEMORY[0x1E4FBC868];
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v126 = v0;
  unint64_t v121 = v7;
  if (!v8)
  {
    unint64_t v116 = (void *)MEMORY[0x1E4FBC868];
LABEL_26:
    swift_bridgeObjectRelease();
    int64_t v49 = 0;
    uint64_t v50 = v116;
    uint64_t v51 = v116[8];
    uint64_t v110 = v116 + 8;
    uint64_t v52 = 1 << *((unsigned char *)v116 + 32);
    uint64_t v53 = -1;
    if (v52 < 64) {
      uint64_t v53 = ~(-1 << v52);
    }
    unint64_t v54 = v53 & v51;
    int64_t v112 = (unint64_t)(v52 + 63) >> 6;
    uint64_t v55 = *MEMORY[0x1E4FA3928];
    uint64_t v125 = *MEMORY[0x1E4FA3938];
    Swift::String v130 = (void (**)(char *, char *, uint64_t))(v111 + 8);
    uint64_t v106 = v137;
    int64_t v107 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v117 = "containsAppName: ";
    unint64_t v121 = 0x80000001BA06A8E0;
    unint64_t v120 = 0x80000001BA06A900;
    *(void *)&long long v48 = 136315138;
    long long v105 = v48;
    v104[1] = MEMORY[0x1E4FBC840] + 8;
    uint64_t v123 = v111 + 16;
    uint64_t v124 = v55;
LABEL_30:
    while (2)
    {
      if (v54)
      {
        unint64_t v56 = __clz(__rbit64(v54));
        v54 &= v54 - 1;
        unint64_t v57 = v56 | (v49 << 6);
LABEL_46:
        uint64_t v61 = 8 * v57;
        uint64_t v62 = *(void *)(v50[7] + v61);
        uint64_t v63 = *(void *)(v62 + 16);
        if (!v63) {
          continue;
        }
        unint64_t v114 = v54;
        int64_t v115 = v49;
        uint64_t v64 = v50[6] + v61;
        int v109 = *(_DWORD *)v64;
        int v108 = *(unsigned __int8 *)(v64 + 4);
        uint64_t v65 = v62 + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80));
        uint64_t v66 = *(uint8_t **)(v111 + 72);
        Swift::String v131 = *(char **)(v111 + 16);
        uint64_t v113 = v62;
        swift_bridgeObjectRetain();
        uint64_t v119 = 0;
        uint64_t v128 = 0;
        uint64_t v118 = 0;
        Swift::String v129 = 0;
        LODWORD(v122) = 0;
        unint64_t v127 = v66;
        while (1)
        {
          ((void (*)(char *, uint64_t, uint64_t))v131)(v3, v65, v0);
          uint64_t v68 = UsoIdentifier.namespace.getter();
          uint64_t v70 = v69;
          uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          if (!v70)
          {
            swift_bridgeObjectRelease();
            goto LABEL_61;
          }
          if (v68 == v71 && v70 == v72)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v73 & 1) == 0) {
              goto LABEL_61;
            }
          }
          uint64_t v136 = UsoIdentifier.value.getter();
          v137[0] = v74;
          uint64_t v134 = 94;
          unint64_t v135 = 0xE100000000000000;
          v75._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          String.append(_:)(v75);
          swift_bridgeObjectRelease();
          uint64_t v132 = 0;
          unint64_t v133 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v76 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v78 = v77;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v136 = v76;
          v137[0] = v78;
          uint64_t v134 = 35;
          unint64_t v135 = 0xE100000000000000;
          uint64_t v79 = (void *)StringProtocol.components<A>(separatedBy:)();
          swift_bridgeObjectRelease();
          if (v79[2])
          {
            uint64_t v80 = v79[5];
            uint64_t v119 = v79[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v118 = UsoIdentifier.appBundleId.getter();
            Swift::String v129 = v81;
            uint64_t v0 = v126;
            ((void (*)(char *, uint64_t))*v130)(v3, v126);
            uint64_t v128 = v80;
            uint64_t v66 = v127;
            goto LABEL_51;
          }
          swift_bridgeObjectRelease();
          uint64_t v0 = v126;
          uint64_t v66 = v127;
LABEL_61:
          uint64_t v82 = UsoIdentifier.namespace.getter();
          if (v83)
          {
            if (v82 == 0xD000000000000018 && v83 == v121)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v84 & 1) == 0) {
                goto LABEL_50;
              }
            }
            uint64_t v136 = UsoIdentifier.value.getter();
            v137[0] = v67;
            uint64_t v134 = 0xD000000000000012;
            unint64_t v135 = v120;
            lazy protocol witness table accessor for type String and conformance String();
            LODWORD(v122) = StringProtocol.contains<A>(_:)();
            swift_bridgeObjectRelease();
          }
LABEL_50:
          ((void (*)(char *, uint64_t))*v130)(v3, v0);
LABEL_51:
          v65 += (uint64_t)v66;
          if (!--v63)
          {
            swift_bridgeObjectRelease();
            BOOL v85 = v129;
            if (v129 && (uint64_t v86 = v128) != 0)
            {
              if (one-time initialization token for executor != -1) {
                swift_once();
              }
              uint64_t v87 = type metadata accessor for Logger();
              __swift_project_value_buffer(v87, (uint64_t)static Logger.executor);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              BOOL v88 = Logger.logObject.getter();
              os_log_type_t v89 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v88, v89))
              {
                uint64_t v90 = (uint8_t *)swift_slowAlloc();
                Swift::String v131 = (char *)swift_slowAlloc();
                uint64_t v134 = (uint64_t)v131;
                unint64_t v127 = v90;
                *(_DWORD *)uint64_t v90 = v105;
                uint64_t v136 = v118;
                v137[0] = v129;
                v137[1] = v119;
                v137[2] = v86;
                int v138 = v109;
                char v139 = v108;
                char v140 = v122 & 1;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v91 = String.init<A>(describing:)();
                uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v134);
                BOOL v85 = v129;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                uint64_t v93 = v127;
                _os_log_impl(&dword_1B9C64000, v88, v89, "Found AppShortcutTarget: %s", v127, 0xCu);
                unint64_t v94 = v131;
                swift_arrayDestroy();
                MEMORY[0x1BA9E48C0](v94, -1, -1);
                MEMORY[0x1BA9E48C0](v93, -1, -1);
              }
              else
              {

                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                int64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v107[2] + 1, 1, v107);
              }
              unint64_t v96 = v107[2];
              unint64_t v95 = v107[3];
              uint64_t v50 = v116;
              int64_t v49 = v115;
              unint64_t v54 = v114;
              if (v96 >= v95 >> 1)
              {
                uint64_t v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v95 > 1), v96 + 1, 1, v107);
                unint64_t v54 = v114;
                int64_t v49 = v115;
                uint64_t v50 = v116;
                int64_t v107 = v100;
              }
              unint64_t v97 = v107;
              v107[2] = v96 + 1;
              unint64_t v98 = &v97[5 * v96];
              v98[4] = v118;
              v98[5] = v85;
              uint64_t v99 = v128;
              v98[6] = v119;
              v98[7] = v99;
              *((_DWORD *)v98 + 16) = v109;
              *((unsigned char *)v98 + 68) = v108;
              *((unsigned char *)v98 + 69) = v122 & 1;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v50 = v116;
              int64_t v49 = v115;
              unint64_t v54 = v114;
            }
            goto LABEL_30;
          }
        }
      }
      break;
    }
    int64_t v58 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    if (v58 < v112)
    {
      unint64_t v59 = v110[v58];
      ++v49;
      if (v59) {
        goto LABEL_45;
      }
      int64_t v49 = v58 + 1;
      if (v58 + 1 >= v112) {
        goto LABEL_78;
      }
      unint64_t v59 = v110[v49];
      if (v59) {
        goto LABEL_45;
      }
      int64_t v49 = v58 + 2;
      if (v58 + 2 >= v112) {
        goto LABEL_78;
      }
      unint64_t v59 = v110[v49];
      if (v59)
      {
LABEL_45:
        unint64_t v54 = (v59 - 1) & v59;
        unint64_t v57 = __clz(__rbit64(v59)) + (v49 << 6);
        goto LABEL_46;
      }
      int64_t v60 = v58 + 3;
      if (v60 < v112)
      {
        unint64_t v59 = v110[v60];
        if (v59)
        {
          int64_t v49 = v60;
          goto LABEL_45;
        }
        while (1)
        {
          int64_t v49 = v60 + 1;
          if (__OFADD__(v60, 1)) {
            goto LABEL_87;
          }
          if (v49 >= v112) {
            break;
          }
          unint64_t v59 = v110[v49];
          ++v60;
          if (v59) {
            goto LABEL_45;
          }
        }
      }
    }
LABEL_78:
    swift_release();
    char v47 = v107;
    if (v107[2]) {
      return (uint64_t)v47;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v102 = type metadata accessor for Logger();
    __swift_project_value_buffer(v102, (uint64_t)static Logger.executor);
    int v44 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v44, v103))
    {
LABEL_24:

      return (uint64_t)v47;
    }
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl(&dword_1B9C64000, v44, v103, "Found no AppShortcutTargets!", v46, 2u);
LABEL_22:
    MEMORY[0x1BA9E48C0](v46, -1, -1);
    goto LABEL_24;
  }
  unint64_t v127 = *(uint8_t **)(v111 + 16);
  uint64_t v9 = *(unsigned __int8 *)(v111 + 80);
  uint64_t v10 = (v9 + 32) & ~v9;
  uint64_t v11 = v7 + v10;
  uint64_t v12 = *(void *)(v111 + 72);
  uint64_t v125 = v10;
  uint64_t v123 = v9 | 7;
  uint64_t v124 = v12 + v10;
  unint64_t v116 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v128 = v111 + 16;
  Swift::String v130 = (void (**)(char *, char *, uint64_t))(v111 + 32);
  long long v122 = xmmword_1BA04FD90;
  ((void (*)(char *, uint64_t, uint64_t))v127)(v131, v7 + v10, v0);
  while (1)
  {
    unint64_t v14 = UsoIdentifier.groupIndex.getter();
    int v15 = v14;
    uint64_t v16 = HIDWORD(v14) & 1;
    uint64_t v17 = v14;
    unint64_t v18 = v116;
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v14 | (unint64_t)(v16 << 32));
    uint64_t v21 = v18;
    unint64_t v22 = v19;
    uint64_t v23 = v21[2];
    BOOL v24 = (v20 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
      __break(1u);
      goto LABEL_85;
    }
    char v26 = v20;
    if (v21[3] < v25) {
      break;
    }
LABEL_12:
    unint64_t v116 = v21;
    if (v26)
    {
      uint64_t v31 = v21[7];
      uint64_t v32 = *v130;
      (*v130)(v129, v131, v0);
      unint64_t v33 = *(void *)(v31 + 8 * v22);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v31 + 8 * v22) = v33;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v33 + 16) + 1, 1, v33);
        *(void *)(v31 + 8 * v22) = v33;
      }
      unint64_t v36 = *(void *)(v33 + 16);
      unint64_t v35 = *(void *)(v33 + 24);
      if (v36 >= v35 >> 1)
      {
        unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v33);
        *(void *)(v31 + 8 * v22) = v33;
      }
      *(void *)(v33 + 16) = v36 + 1;
      unint64_t v13 = v33 + v125 + v36 * v12;
      uint64_t v0 = v126;
      v32((char *)v13, v129, v126);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = v122;
      (*v130)((char *)(v37 + v125), v131, v0);
      uint64_t v38 = v116;
      v116[(v22 >> 6) + 8] |= 1 << v22;
      uint64_t v39 = v38[6] + 8 * v22;
      *(_DWORD *)uint64_t v39 = v15;
      *(unsigned char *)(v39 + 4) = v16;
      *(void *)(v38[7] + 8 * v22) = v37;
      uint64_t v40 = v38[2];
      BOOL v41 = __OFADD__(v40, 1);
      uint64_t v42 = v40 + 1;
      if (v41) {
        goto LABEL_86;
      }
      _OWORD v38[2] = v42;
    }
    v11 += v12;
    if (!--v8) {
      goto LABEL_26;
    }
    ((void (*)(char *, uint64_t, uint64_t))v127)(v131, v11, v0);
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, 1);
  unint64_t v27 = v17 | (v16 << 32);
  unint64_t v28 = (void *)v136;
  unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
  if ((v26 & 1) == (v30 & 1))
  {
    unint64_t v22 = v29;
    uint64_t v21 = v28;
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Siri_Nlu_External_UserParse.isAppShortcutParse.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  long long v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = MEMORY[0x1BA9DE000](v1);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v7 = *(void *)(v6 - 8);
  if (v5)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v3, v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  }
  else
  {
    Siri_Nlu_External_UserDialogAct.toUsoTask()();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
  }
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (v11)
  {
    type metadata accessor for UsoTask_run_common_VoiceCommand();
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  return result;
}

BOOL closure #1 in Sequence<>.isContainsAppShortcutParse.getter()
{
  uint64_t v0 = *(void *)(Siri_Nlu_External_UserParse.appShortcuts.getter() + 16);
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t outlined init with copy of UsoIdentifier.NluComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent;
  if (!lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent)
  {
    type metadata accessor for UsoIdentifier.NluComponent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent);
  }
  return result;
}

uint64_t outlined init with take of UInt32?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static AppShortcutTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v8 & 1) != 0))
    {
      char v6 = *(unsigned char *)(a2 + 36);
      if (*(unsigned char *)(a1 + 36))
      {
        if (!*(unsigned char *)(a2 + 36)) {
          return v6 & 1;
        }
        goto LABEL_18;
      }
      if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
        char v6 = 1;
      }
      if ((v6 & 1) == 0)
      {
LABEL_18:
        char v6 = ((*(unsigned char *)(a1 + 37) & 1) == 0) ^ *(unsigned char *)(a2 + 37);
        return v6 & 1;
      }
      char v6 = 0;
    }
  }
  return v6 & 1;
}

unint64_t lazy protocol witness table accessor for type AppShortcutTarget and conformance AppShortcutTarget()
{
  unint64_t result = lazy protocol witness table cache variable for type AppShortcutTarget and conformance AppShortcutTarget;
  if (!lazy protocol witness table cache variable for type AppShortcutTarget and conformance AppShortcutTarget)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppShortcutTarget and conformance AppShortcutTarget);
  }
  return result;
}

uint64_t initializeWithCopy for AppShortcutTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppShortcutTarget(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  return a1;
}

__n128 __swift_memcpy38_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 30) = *(void *)(a2 + 30);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppShortcutTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutTarget(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 38)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutTarget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 38) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 38) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutTarget()
{
  return &type metadata for AppShortcutTarget;
}

uint64_t initializeBufferWithCopyOfBuffer for GeneralizedAppShortcutTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeneralizedAppShortcutTarget(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GeneralizedAppShortcutTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeneralizedAppShortcutTarget(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 21)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeneralizedAppShortcutTarget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 21) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeneralizedAppShortcutTarget()
{
  return &type metadata for GeneralizedAppShortcutTarget;
}

uint64_t Siri_Nlu_External_UserParse.isPSC.getter()
{
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v0 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  unint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  BOOL v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E4FA2780], v3);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v15 = v22;
  uint64_t v14 = v23;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v3);
  v16(v9, v3);
  uint64_t v17 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 16))(v2, v20, v21);
  if (v14 == v15) {
    char v18 = 1;
  }
  else {
    char v18 = Siri_Nlu_External_UserParse.isOverriddenPSC.getter();
  }
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v17);
  return v18 & 1;
}

uint64_t Siri_Nlu_External_UserParse.isDelegated.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1BA9DE000](v1);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v7 = *(void *)(v6 - 8);
  if (v5)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v3, v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v8 = v7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v3);
    char v9 = 0;
  }
  else
  {
    char v9 = Siri_Nlu_External_UserDialogAct.hasDelegated.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v3, v6);
  }
  return v9 & 1;
}

uint64_t Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t closure #1 in Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Message.serializedData(partial:)();
  if (v1)
  {

    uint64_t result = 0;
    unint64_t v4 = 0xF000000000000000;
  }
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t partial apply for closure #1 in Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(a1);
}

uint64_t closure #1 in Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v7 - 8);
  outlined copy of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  BinaryDecodingOptions.init()();
  Message.init(serializedData:extensions:partial:options:)();
  if (v3)
  {

    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v8, 1, a2);
}

uint64_t partial apply for closure #1 in Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [Data] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Data] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance [A]);
  }
  return result;
}

SiriKitRuntime::NotebookAffinityScorer __swiftcall NotebookAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062C40;
  uint64_t v1 = 0xD000000000000021;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t NotebookAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized NotebookAffinityScorer.isExplicitlySupported(usoTask:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v4) {
    goto LABEL_42;
  }
  outlined init with copy of Any?((uint64_t)v3, (uint64_t)v2);
  type metadata accessor for UsoTask_create_common_Reminder();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_Reminder();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_checkExistence_common_Reminder();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_delete_common_Reminder();
        if (!swift_dynamicCast())
        {
          type metadata accessor for UsoTask_request_common_Reminder();
          if (!swift_dynamicCast())
          {
            type metadata accessor for UsoTask_summarise_common_Reminder();
            if (!swift_dynamicCast())
            {
              type metadata accessor for UsoTask_read_common_Reminder();
              if (!swift_dynamicCast())
              {
                type metadata accessor for UsoTask_update_common_Reminder();
                if (!swift_dynamicCast())
                {
                  type metadata accessor for UsoTask_disableSetting_common_Reminder();
                  if (!swift_dynamicCast())
                  {
                    type metadata accessor for UsoTask_disable_common_Reminder();
                    if (!swift_dynamicCast())
                    {
                      type metadata accessor for UsoTask_enableSetting_common_Reminder();
                      if (!swift_dynamicCast())
                      {
                        type metadata accessor for UsoTask_snooze_common_Reminder();
                        if (!swift_dynamicCast())
                        {
                          type metadata accessor for UsoTask_create_common_ReminderList();
                          if (!swift_dynamicCast())
                          {
                            type metadata accessor for UsoTask_noVerb_common_ReminderList();
                            if (!swift_dynamicCast())
                            {
                              type metadata accessor for UsoTask_checkExistence_common_ReminderList();
                              if (!swift_dynamicCast())
                              {
                                type metadata accessor for UsoTask_delete_common_ReminderList();
                                if (!swift_dynamicCast())
                                {
                                  type metadata accessor for UsoTask_request_common_ReminderList();
                                  if (!swift_dynamicCast())
                                  {
                                    type metadata accessor for UsoTask_summarise_common_ReminderList();
                                    if (!swift_dynamicCast())
                                    {
                                      type metadata accessor for UsoTask_read_common_ReminderList();
                                      if (!swift_dynamicCast())
                                      {
                                        type metadata accessor for UsoTask_update_common_ReminderList();
                                        if (!swift_dynamicCast())
                                        {
                                          type metadata accessor for UsoTask_create_common_Note();
                                          if (!swift_dynamicCast())
                                          {
                                            type metadata accessor for UsoTask_noVerb_common_Note();
                                            if (!swift_dynamicCast())
                                            {
                                              type metadata accessor for UsoTask_checkExistence_common_Note();
                                              if (!swift_dynamicCast())
                                              {
                                                type metadata accessor for UsoTask_delete_common_Note();
                                                if (!swift_dynamicCast())
                                                {
                                                  type metadata accessor for UsoTask_request_common_Note();
                                                  if (!swift_dynamicCast())
                                                  {
                                                    type metadata accessor for UsoTask_summarise_common_Note();
                                                    if (!swift_dynamicCast())
                                                    {
                                                      type metadata accessor for UsoTask_update_common_Note();
                                                      if (!swift_dynamicCast())
                                                      {
                                                        type metadata accessor for UsoTask_read_common_Note();
                                                        if (!swift_dynamicCast())
                                                        {
                                                          type metadata accessor for UsoTask_enableSetting_common_Note();
                                                          if (!swift_dynamicCast())
                                                          {
                                                            type metadata accessor for UsoTask_disableSetting_common_Note();
                                                            if (!swift_dynamicCast())
                                                            {
                                                              type metadata accessor for UsoTask_undo_common_Note();
                                                              if (!swift_dynamicCast())
                                                              {
                                                                type metadata accessor for UsoTask_create_common_NoteFolder();
                                                                if (!swift_dynamicCast())
                                                                {
                                                                  type metadata accessor for UsoTask_noVerb_common_NoteFolder();
                                                                  if (!swift_dynamicCast())
                                                                  {
                                                                    type metadata accessor for UsoTask_checkExistence_common_NoteFolder();
                                                                    if (!swift_dynamicCast())
                                                                    {
                                                                      type metadata accessor for UsoTask_delete_common_NoteFolder();
                                                                      if (!swift_dynamicCast())
                                                                      {
                                                                        type metadata accessor for UsoTask_request_common_NoteFolder();
                                                                        if (!swift_dynamicCast())
                                                                        {
                                                                          type metadata accessor for UsoTask_summarise_common_NoteFolder();
                                                                          if (!swift_dynamicCast())
                                                                          {
                                                                            type metadata accessor for UsoTask_update_common_NoteFolder();
                                                                            if (!swift_dynamicCast())
                                                                            {
                                                                              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
LABEL_42:
                                                                              uint64_t v0 = 0;
                                                                              goto LABEL_43;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  uint64_t v0 = 1;
LABEL_43:
  outlined destroy of Any?((uint64_t)v3);
  return v0;
}

uint64_t specialized NotebookAffinityScorer.score(input:environment:)(uint64_t a1, void (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v80 = a2;
  uint64_t v81 = type metadata accessor for RREntity();
  unint64_t v78 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v3 = (char *)v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for RRCandidate();
  uint64_t v82 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v79 = (char *)v70 - v8;
  uint64_t v9 = type metadata accessor for Parse();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for USOParse();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v12, v9) != *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v19 = 2;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1B9C64000, v21, v22, "[NotebookAffinityScorer] Unexpected parse", v23, 2u);
      MEMORY[0x1BA9E48C0](v23, -1, -1);

      return v19;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  unint64_t v17 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v17)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl(&dword_1B9C64000, v25, v26, "[NotebookAffinityScorer] Unable to obtain task from parse", v27, 2u);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }

    goto LABEL_37;
  }
  unint64_t v18 = v17;
  if (specialized NotebookAffinityScorer.isExplicitlySupported(usoTask:)())
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_release();
    return 3;
  }
  uint64_t v74 = v13;
  if (UsoTask.baseEntityAsString.getter() == 0x6E456F4E5F6F7375 && v28 == 0xEC00000079746974)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = v74;
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = v74;
    if ((v30 & 1) == 0) {
      goto LABEL_32;
    }
  }
  if (UsoTask.verbString.getter() == 0x657461647075 && v31 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {
LABEL_32:
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      __swift_project_value_buffer(v51, (uint64_t)static Logger.executor);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v52, v53))
      {
        unint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v54 = 0;
        _os_log_impl(&dword_1B9C64000, v52, v53, "[NotebookAffinityScorer] Not a shared task", v54, 2u);
        MEMORY[0x1BA9E48C0](v54, -1, -1);
      }

      swift_release();
LABEL_37:
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return 2;
    }
  }
  uint64_t v72 = v16;
  unint64_t v73 = v18;
  SiriEnvironment.salientEntitiesProvider.getter();
  uint64_t v33 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  uint64_t v34 = *(char **)(v33 + 16);
  if (v34)
  {
    v70[1] = v33;
    uint64_t v71 = v14;
    uint64_t v80 = *(void (**)(char *, unint64_t, uint64_t))(v82 + 16);
    unint64_t v35 = v33 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
    unint64_t v36 = (void (**)(char *, uint64_t))(v78 + 8);
    uint64_t v77 = (void (**)(char *, uint64_t))(v82 + 8);
    v82 += 16;
    uint64_t v75 = *(void *)(v82 + 56);
    swift_bridgeObjectRetain();
    unint64_t v76 = 0x80000001BA06A960;
    uint64_t v37 = v79;
    while (1)
    {
      unint64_t v78 = v35;
      uint64_t v79 = v34;
      uint64_t v38 = v3;
      v80(v37, v35, v4);
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      uint64_t v39 = *v36;
      uint64_t v40 = v3;
      uint64_t v41 = v81;
      (*v36)(v40, v81);
      uint64_t v42 = UsoTask.verbString.getter();
      uint64_t v44 = v43;
      swift_release();
      uint64_t v85 = v42;
      uint64_t v86 = v44;
      unint64_t v83 = 0x525F6E6F6D6D6F63;
      unint64_t v84 = 0xEF7265646E696D65;
      lazy protocol witness table accessor for type String and conformance String();
      char v45 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      v80(v7, (unint64_t)v37, v4);
      if (v45) {
        break;
      }
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      v39(v38, v41);
      uint64_t v46 = UsoTask.verbString.getter();
      uint64_t v48 = v47;
      swift_release();
      uint64_t v85 = v46;
      uint64_t v86 = v48;
      unint64_t v83 = 0xD000000000000013;
      unint64_t v84 = v76;
      char v49 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v50 = *v77;
      (*v77)(v7, v4);
      v50(v37, v4);
      if (v49) {
        goto LABEL_47;
      }
      uint64_t v3 = v38;
      unint64_t v35 = v78 + v75;
      uint64_t v34 = v79 - 1;
      if (v79 == (char *)1)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v14 = v71;
        uint64_t v13 = v74;
        goto LABEL_41;
      }
    }
    uint64_t v61 = *v77;
    (*v77)(v7, v4);
    v61(v37, v4);
LABEL_47:
    swift_bridgeObjectRelease_n();
    uint64_t v62 = v74;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.executor);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    BOOL v66 = os_log_type_enabled(v64, v65);
    uint64_t v67 = v71;
    uint64_t v68 = v72;
    if (v66)
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      _os_log_impl(&dword_1B9C64000, v64, v65, "[NotebookAffinityScorer] Reminders found in entities, returning .high", v69, 2u);
      MEMORY[0x1BA9E48C0](v69, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v62);
    return 3;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_41:
    unint64_t v56 = v72;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.executor);
    int64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v58, v59))
    {
      int64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v60 = 0;
      _os_log_impl(&dword_1B9C64000, v58, v59, "[NotebookAffinityScorer] No reminders found in entities, returning .low", v60, 2u);
      MEMORY[0x1BA9E48C0](v60, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v56, v13);
    return 1;
  }
}

ValueMetadata *type metadata accessor for NotebookAffinityScorer()
{
  return &type metadata for NotebookAffinityScorer;
}

SiriKitRuntime::NotificationAffinityScorer __swiftcall NotificationAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062A10;
  uint64_t v1 = 0xD00000000000002ELL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t NotificationAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized NotificationAffinityScorer.isAmbiguousRead(task:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v4) {
    goto LABEL_5;
  }
  outlined init with copy of Any?((uint64_t)v3, (uint64_t)v2);
  type metadata accessor for UsoTask_read_uso_NoEntity();
  if (!swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
LABEL_5:
    uint64_t v0 = 0;
    goto LABEL_6;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  uint64_t v0 = 1;
LABEL_6:
  outlined destroy of Any?((uint64_t)v3);
  return v0;
}

uint64_t specialized NotificationAffinityScorer.isSalientNotification(_:)()
{
  uint64_t v23 = type metadata accessor for RREntity();
  uint64_t v0 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v2 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for RRCandidate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  SiriEnvironment.salientEntitiesProvider.getter();
  uint64_t v7 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v9 = v4 + 16;
  os_log_type_t v22 = v10;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 64);
  v21[1] = v7;
  uint64_t v12 = v7 + ((v11 + 32) & ~v11);
  uint64_t v13 = (void (**)(char *, uint64_t))(v0 + 8);
  uint64_t v14 = (void (**)(char *, uint64_t))(v9 - 8);
  uint64_t v15 = *(void *)(v9 + 56);
  v21[2] = MEMORY[0x1E4FBC840] + 8;
  v10(v6, v12, v3);
  while (1)
  {
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    (*v13)(v2, v23);
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (!v26)
    {
      (*v14)(v6, v3);
      goto LABEL_4;
    }
    outlined init with copy of Any?((uint64_t)v25, (uint64_t)v24);
    type metadata accessor for UsoEntity_common_Notification();
    if (swift_dynamicCast()) {
      break;
    }
    (*v14)(v6, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
LABEL_4:
    outlined destroy of Any?((uint64_t)v25);
    v12 += v15;
    if (!--v8) {
      goto LABEL_9;
    }
    v22(v6, v12, v3);
  }
  swift_bridgeObjectRelease();
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_1B9C64000, v18, v19, "NotificationAffinityScorer isSalientNotification | salient notification in entity pool", v20, 2u);
    MEMORY[0x1BA9E48C0](v20, -1, -1);
  }

  (*v14)(v6, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  outlined destroy of Any?((uint64_t)v25);
  return 1;
}

uint64_t specialized NotificationAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) != *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v8 = 2;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v11, "NotificationAffinityScorer score | unexpected parse, returning default affinity", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);

      return v8;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "NotificationAffinityScorer score | unable to obtain task, returning default affinity", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }

    goto LABEL_21;
  }
  if ((specialized NotificationAffinityScorer.isAmbiguousRead(task:)() & 1) == 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1B9C64000, v18, v19, "NotificationAffinityScorer score | not an ambiguous read task, returning default affinity", v20, 2u);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }

    swift_release();
LABEL_21:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 2;
  }
  if (specialized NotificationAffinityScorer.isSalientNotification(_:)())
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release();
    return 3;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1B9C64000, v23, v24, "NotificationAffinityScorer score | no salient notification, returning low affinity", v25, 2u);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 1;
  }
}

ValueMetadata *type metadata accessor for NotificationAffinityScorer()
{
  return &type metadata for NotificationAffinityScorer;
}

Swift::Bool __swiftcall NSProcessInfo.isLowPowerModeEnabled()()
{
  return objc_msgSend(v0, sel_isLowPowerModeEnabled);
}

id protocol witness for ProcessInfoProtocol.isLowPowerModeEnabled() in conformance NSProcessInfo()
{
  return objc_msgSend(*v0, sel_isLowPowerModeEnabled);
}

uint64_t OfflineServerFallbackRule.ruleType.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t OfflineServerFallbackRule.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

uint64_t OfflineServerFallbackRule.coreTelephonyServiceProvider.getter()
{
  return swift_retain();
}

uint64_t OfflineServerFallbackRule.fallbackReason.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ServerFallbackReason?(v1 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, a1);
}

uint64_t outlined init with copy of ServerFallbackReason?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OfflineServerFallbackRule.processInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo, a1);
}

uint64_t OfflineServerFallbackRule.__allocating_init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(a4 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  uint64_t v12 = specialized OfflineServerFallbackRule.__allocating_init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(a1, a2, a3, v11, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v12;
}

uint64_t OfflineServerFallbackRule.init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(a4 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  uint64_t v15 = specialized OfflineServerFallbackRule.init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(a1, a2, a3, (uint64_t)v13, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v15;
}

Swift::Bool __swiftcall OfflineServerFallbackRule.isFallbackReasonAnError()()
{
  uint64_t v1 = type metadata accessor for ServerFallbackReason();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v38 = &v34[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v45 = &v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v34[-v7];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v44 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v43 = &v34[-v13];
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v34[-v15];
  MEMORY[0x1F4188790](v14);
  unint64_t v18 = &v34[-v17];
  uint64_t v19 = v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason;
  uint64_t v20 = *MEMORY[0x1E4FA25D8];
  uint64_t v39 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 104);
  v39(&v34[-v17], v20, v1);
  uint64_t v40 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v2 + 56);
  v40(v18, 0, 1, v1);
  uint64_t v41 = v19;
  uint64_t v42 = v4;
  uint64_t v21 = (uint64_t)&v8[*(int *)(v4 + 48)];
  outlined init with copy of ServerFallbackReason?(v19, (uint64_t)v8);
  outlined init with copy of ServerFallbackReason?((uint64_t)v18, v21);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v22((uint64_t)v8, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);
    if (v22(v21, 1, v1) == 1)
    {
      uint64_t v23 = (uint64_t)v8;
LABEL_10:
      outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for ServerFallbackReason?);
LABEL_15:
      char v27 = 1;
      return v27 & 1;
    }
    goto LABEL_6;
  }
  outlined init with copy of ServerFallbackReason?((uint64_t)v8, (uint64_t)v16);
  uint64_t v37 = v22;
  if (v22(v21, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v16, v1);
    uint64_t v22 = v37;
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
    goto LABEL_7;
  }
  uint64_t v28 = v38;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 32))(v38, v21, v1);
  lazy protocol witness table accessor for type ServerFallbackReason and conformance ServerFallbackReason();
  int v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v36 = v2;
  unint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v2 + 8);
  v29(v28, v1);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);
  v29(v16, v1);
  uint64_t v2 = v36;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
  uint64_t v22 = v37;
  if (v35) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v24 = (uint64_t)v43;
  v39(v43, *MEMORY[0x1E4FA25E0], v1);
  v40((unsigned char *)v24, 0, 1, v1);
  uint64_t v25 = v45;
  uint64_t v26 = (uint64_t)&v45[*(int *)(v42 + 48)];
  outlined init with copy of ServerFallbackReason?(v41, (uint64_t)v45);
  outlined init with copy of ServerFallbackReason?(v24, v26);
  if (v22((uint64_t)v25, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for ServerFallbackReason?);
    if (v22(v26, 1, v1) == 1)
    {
      uint64_t v23 = (uint64_t)v25;
      goto LABEL_10;
    }
  }
  else
  {
    outlined init with copy of ServerFallbackReason?((uint64_t)v25, (uint64_t)v44);
    if (v22(v26, 1, v1) != 1)
    {
      char v30 = v44;
      uint64_t v31 = v38;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 32))(v38, v26, v1);
      lazy protocol witness table accessor for type ServerFallbackReason and conformance ServerFallbackReason();
      char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v32 = *(void (**)(unsigned char *, uint64_t))(v2 + 8);
      v32(v31, v1);
      outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for ServerFallbackReason?);
      v32(v30, v1);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, &demangling cache variable for type metadata for ServerFallbackReason?);
      return v27 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for ServerFallbackReason?);
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v44, v1);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, &demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
  char v27 = 0;
  return v27 & 1;
}

uint64_t OfflineServerFallbackRule.isLowPowerModeEnabled(processInfo:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2) & 1;
}

uint64_t OfflineServerFallbackRule.deinit()
{
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);
  return v0;
}

uint64_t specialized OfflineServerFallbackRule.init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (uint64_t *)(a5 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);
  v13[3] = a6;
  v13[4] = a7;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_0, a4, a6);
  *(unsigned char *)(a5 + 16) = 5;
  *(void *)(a5 + 24) = a1;
  outlined init with take of ServerFallbackReason?(a3, a5 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason);
  *(void *)(a5 + 32) = a2;
  return a5;
}

uint64_t specialized OfflineServerFallbackRule.__allocating_init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OfflineServerFallbackRule();
  uint64_t v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, a6);
  return specialized OfflineServerFallbackRule.init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(a1, a2, a3, (uint64_t)v15, v16, a6, a7);
}

unint64_t lazy protocol witness table accessor for type ServerFallbackReason and conformance ServerFallbackReason()
{
  unint64_t result = lazy protocol witness table cache variable for type ServerFallbackReason and conformance ServerFallbackReason;
  if (!lazy protocol witness table cache variable for type ServerFallbackReason and conformance ServerFallbackReason)
  {
    type metadata accessor for ServerFallbackReason();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ServerFallbackReason and conformance ServerFallbackReason);
  }
  return result;
}

uint64_t dispatch thunk of ProcessInfoProtocol.isLowPowerModeEnabled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t ObjC metadata update function for OfflineServerFallbackRule()
{
  return type metadata accessor for OfflineServerFallbackRule();
}

void type metadata completion function for OfflineServerFallbackRule()
{
  type metadata accessor for ServerFallbackReason?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for OfflineServerFallbackRule(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for OfflineServerFallbackRule);
}

uint64_t dispatch thunk of OfflineServerFallbackRule.__allocating_init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of OfflineServerFallbackRule.evaluate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of OfflineServerFallbackRule.isFallbackReasonAnError()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of OfflineServerFallbackRule.isLowPowerModeEnabled(processInfo:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

void type metadata accessor for ServerFallbackReason?()
{
  if (!lazy cache variable for type metadata for ServerFallbackReason?)
  {
    type metadata accessor for ServerFallbackReason();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ServerFallbackReason?);
    }
  }
}

uint64_t outlined init with take of ServerFallbackReason?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t NodeIterator.next()()
{
  uint64_t v1 = *v0;
  if (*v0) {
    uint64_t *v0 = swift_weakLoadStrong();
  }
  return v1;
}

void *OrderedForest.__allocating_init()()
{
  unint64_t result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void *OrderedForest.init()()
{
  unint64_t result = v0;
  v0[2] = 0;
  v0[3] = 0;
  v0[4] = 0;
  return result;
}

Swift::Void __swiftcall OrderedForest.clear()()
{
  v0[2] = 0;
  swift_release();
  v0[3] = 0;
  swift_release();
  swift_beginAccess();
  v0[4] = 0;
}

uint64_t *OrderedForest.push(value:parentNode:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Node();
  swift_retain();
  uint64_t v4 = specialized Node.__allocating_init(value:parent:)(a1);
  if (a2)
  {
    swift_beginAccess();
    type metadata accessor for Array();
    swift_retain();
    swift_retain();
    Array.append(_:)();
    swift_endAccess();
    swift_release();
  }
  OrderedForest._push(_:)((uint64_t)v4);
  return v4;
}

uint64_t type metadata accessor for Node()
{
  return __swift_instantiateGenericMetadata();
}

{
  return MEMORY[0x1F4157448]();
}

uint64_t *OrderedForest.replan(node:)(uint64_t a1)
{
  type metadata accessor for Node();
  uint64_t v2 = *(void (**)(void))(*(void *)a1 + 128);
  uint64_t v3 = a1 + *(void *)(*(void *)a1 + 88);
  v2();
  uint64_t v4 = specialized Node.__allocating_init(value:parent:)(v3);
  uint64_t v5 = specialized OrderedForest._recursiveRemove(_:)(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(v5);
  uint64_t v7 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 104));
  swift_beginAccess();
  *uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v8 = static Array._allocateUninitialized(_:)();
  uint64_t v9 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 104));
  swift_beginAccess();
  *uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t v10 = OrderedForest._push(_:)(a1);
  uint64_t v11 = ((uint64_t (*)(uint64_t))v2)(v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void (**)(void))(*(void *)v11 + 152);
    v13();
    type metadata accessor for Array();
    swift_getWitnessTable();
    char v14 = Collection.isEmpty.getter();
    uint64_t v15 = swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      ((void (*)(uint64_t))v13)(v15);
      swift_getWitnessTable();
      uint64_t v16 = _ArrayProtocol.filter(_:)();
      uint64_t v17 = (uint64_t *)(v12 + *(void *)(*(void *)v12 + 104));
      swift_beginAccess();
      *uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_retain();
      Array.append(_:)();
      swift_endAccess();
    }
    swift_release();
  }
  return v4;
}

uint64_t OrderedForest.remove(node:)(uint64_t a1)
{
  specialized OrderedForest._recursiveRemove(_:)(a1);
  specialized OrderedForest._detachFromParent(_:)(a1);

  return swift_retain();
}

uint64_t OrderedForest.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedForest.count.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

BOOL OrderedForest.isEmpty.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))() == 0;
}

uint64_t OrderedForest.makeIterator()()
{
  return swift_retain();
}

uint64_t OrderedForest.top()()
{
  return swift_retain();
}

uint64_t OrderedForest.raise(node:)(uint64_t a1)
{
  uint64_t v2 = OrderedForest._raise(_:)(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void (**)(void))(*(void *)v3 + 152);
    v5();
    type metadata accessor for Node();
    type metadata accessor for Array();
    swift_getWitnessTable();
    char v6 = Collection.isEmpty.getter();
    uint64_t v7 = swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      ((void (*)(uint64_t))v5)(v7);
      swift_getWitnessTable();
      uint64_t v8 = _ArrayProtocol.filter(_:)();
      uint64_t v9 = (uint64_t *)(v4 + *(void *)(*(void *)v4 + 104));
      swift_beginAccess();
      *uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_retain();
      Array.append(_:)();
      swift_endAccess();
    }
    swift_release();
  }
  return swift_retain();
}

uint64_t OrderedForest.removeTree(node:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 128);
  swift_retain();
  uint64_t v5 = v4();
  if (v5)
  {
    uint64_t v6 = v5;
    do
    {
      uint64_t v7 = swift_release();
      uint64_t v3 = v6;
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 128))(v7);
    }
    while (v6);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 240))(v3);
  swift_release();
  return v8;
}

uint64_t OrderedForest.removeBranch(node:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 128);
  swift_retain();
  uint64_t v5 = v4();
  if (v5)
  {
    uint64_t v6 = v5;
    while (1)
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 152))();
      uint64_t v8 = type metadata accessor for Node();
      uint64_t v9 = MEMORY[0x1BA9E3110](v7, v8);
      swift_bridgeObjectRelease();
      if (v9 > 1) {
        break;
      }
      uint64_t v10 = v6;
      uint64_t v11 = swift_release();
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 128))(v11);
      uint64_t v3 = v10;
      if (!v6) {
        goto LABEL_8;
      }
    }
    swift_release();
  }
  uint64_t v10 = v3;
LABEL_8:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 240))(v10);
  swift_release();
  return v12;
}

uint64_t OrderedForest._push(_:)(uint64_t a1)
{
  uint64_t v3 = v1[3];
  if (v1[2] && v3)
  {
    swift_weakAssign();
    *(void *)(v3 + *(void *)(*(void *)v3 + 120)) = a1;
    swift_retain();
    swift_release();
    v1[3] = a1;
  }
  else
  {
    v1[3] = a1;
    swift_retain();
    swift_release();
    v1[2] = a1;
  }
  swift_retain();
  swift_release();
  uint64_t result = swift_beginAccess();
  uint64_t v5 = v1[4];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    v1[4] = v7;
  }
  return result;
}

uint64_t OrderedForest._raise(_:)(uint64_t a1)
{
  OrderedForest._remove(_:)(a1);
  uint64_t v2 = OrderedForest._push(_:)(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(v2);
  uint64_t v4 = type metadata accessor for Node();
  if (MEMORY[0x1BA9E3130](v3, v4))
  {
    uint64_t v5 = 4;
    do
    {
      uint64_t v6 = v5 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v8 = *(void *)(v3 + 8 * v5);
        swift_retain();
        uint64_t v9 = v5 - 3;
        if (__OFADD__(v6, 1)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v8 = _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v9 = v5 - 3;
        if (__OFADD__(v6, 1))
        {
LABEL_9:
          __break(1u);
          break;
        }
      }
      OrderedForest._raise(_:)(v8);
      swift_release();
      ++v5;
    }
    while (v9 != MEMORY[0x1BA9E3130](v3, v4));
  }

  return swift_bridgeObjectRelease();
}

uint64_t OrderedForest._remove(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  if (v4) {
    BOOL v5 = v4 == a1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    if (v3) {
      BOOL v8 = v3 == a1;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      v1[2] = 0;
      swift_release();
      v1[3] = 0;
    }
    else
    {
      v1[2] = *(void *)(a1 + *(void *)(*(void *)a1 + 120));
      swift_retain();
    }
    goto LABEL_23;
  }
  if (v3) {
    BOOL v6 = v3 == a1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      *(void *)(Strong + *(void *)(*(void *)Strong + 120)) = 0;
      swift_retain();
      swift_release();
      swift_release();
    }
    else
    {
      swift_retain();
    }
    uint64_t v10 = swift_weakLoadStrong();
    swift_release();
    v1[3] = v10;
    goto LABEL_23;
  }
  uint64_t v7 = swift_weakLoadStrong();
  if (v7)
  {
    *(void *)(v7 + *(void *)(*(void *)v7 + 120)) = *(void *)(a1 + *(void *)(*(void *)a1 + 120));
    swift_retain();
    swift_release();
    swift_release();
  }
  if (*(void *)(a1 + *(void *)(*(void *)a1 + 120)))
  {
    swift_weakLoadStrong();
    swift_weakAssign();
LABEL_23:
    swift_release();
  }
  swift_weakAssign();
  *(void *)(a1 + *(void *)(*(void *)a1 + 120)) = 0;
  swift_release();
  uint64_t result = swift_beginAccess();
  uint64_t v12 = v1[4];
  BOOL v13 = __OFSUB__(v12, 1);
  uint64_t v14 = v12 - 1;
  if (v13) {
    __break(1u);
  }
  else {
    v1[4] = v14;
  }
  return result;
}

uint64_t OrderedForest.debugDescription(printer:)(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  if (!*(void *)(v2 + 16)) {
    return 0x54207974706D453CLL;
  }
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  uint64_t v5 = swift_retain();
  OrderedForest.debugDescription(for:printer:level:result:)(v5, a1, a2, 0, (uint64_t)v7);
  swift_release();
  return v7[0];
}

uint64_t OrderedForest.debugDescription(for:printer:level:result:)(uint64_t result, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4 < 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  if (a4)
  {
    uint64_t v9 = a4;
    do
    {
      v10._uint64_t countAndFlagsBits = 8224;
      v10._object = (void *)0xE200000000000000;
      String.append(_:)(v10);
      --v9;
    }
    while (v9);
  }
  v11._uint64_t countAndFlagsBits = a2(v8 + *(void *)(*(void *)v8 + 88));
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 10;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v8 + 152))();
  uint64_t v14 = type metadata accessor for Node();
  uint64_t result = MEMORY[0x1BA9E3130](v13, v14);
  if (result)
  {
    BOOL v15 = __OFADD__(a4, 1);
    uint64_t v16 = a4 + 1;
    if (!v15)
    {
      uint64_t v17 = 4;
      while (1)
      {
        uint64_t v18 = v17 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v20 = *(void *)(v13 + 8 * v17);
          swift_retain();
          uint64_t v21 = v17 - 3;
          if (__OFADD__(v18, 1)) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v20 = _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v21 = v17 - 3;
          if (__OFADD__(v18, 1))
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        OrderedForest.debugDescription(for:printer:level:result:)(v20, a2, a3, v16, a5);
        swift_release();
        ++v17;
        if (v21 == MEMORY[0x1BA9E3130](v13, v14)) {
          goto LABEL_15;
        }
      }
    }
    goto LABEL_19;
  }
LABEL_15:

  return swift_bridgeObjectRelease();
}

uint64_t Node.value.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 88));
}

uint64_t key path setter for Node.parent : <A>Node<A>()
{
  return swift_weakAssign();
}

uint64_t Node.parent.getter()
{
  return swift_weakLoadStrong();
}

uint64_t key path setter for Node.children : <A>Node<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*(void *)a2 + *(void *)(**(void **)a2 + 104));
  swift_beginAccess();
  void *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t Node.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t *Node.__allocating_init(value:parent:)(uint64_t a1)
{
  uint64_t v3 = specialized Node.__allocating_init(value:parent:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))(a1);
  return v3;
}

uint64_t *Node.init(value:parent:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = specialized Node.init(value:parent:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t Node.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  uint64_t v2 = *(void *)(v0 + v1);
  *(void *)(v0 + v1) = 0;
  if (v2)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v3 = *(void *)(v2 + *(void *)(*(void *)v2 + 120));
      swift_retain();
      swift_release();
      uint64_t v2 = v3;
    }
    while (v3);
  }
  swift_release();
  return v0;
}

uint64_t Node.__deallocating_deinit()
{
  Node.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for IteratorProtocol.next() in conformance NodeIterator<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NodeIterator.next()();
  *a1 = result;
  return result;
}

uint64_t closure #1 in default argument 0 of OrderedForest.debugDescription(printer:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return String.init<A>(describing:)();
}

uint64_t OrderedForest.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance OrderedForest<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v1 + 192))();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedForest<A>()
{
  type metadata accessor for OrderedForest();
  uint64_t v0 = specialized Sequence._copyToContiguousArray()();
  swift_release();
  return v0;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance OrderedForest<A>()
{
  type metadata accessor for OrderedForest();

  JUMPOUT(0x1BA9E2FD0);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance OrderedForest<A>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t specialized Sequence._copyToContiguousArray()()
{
  return MEMORY[0x1F4185CF8]();
}

uint64_t specialized OrderedForest._recursiveRemove(_:)(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)a1 + 152))();
  uint64_t v3 = type metadata accessor for Node();
  if (MEMORY[0x1BA9E3130](v2, v3))
  {
    uint64_t v4 = 4;
    do
    {
      uint64_t v5 = v4 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v7 = *(void *)(v2 + 8 * v4);
        swift_retain();
        uint64_t v8 = v4 - 3;
        if (__OFADD__(v5, 1)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v7 = _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v8 = v4 - 3;
        if (__OFADD__(v5, 1))
        {
LABEL_9:
          __break(1u);
          break;
        }
      }
      specialized OrderedForest._recursiveRemove(_:)(v7);
      swift_release();
      ++v4;
    }
    while (v8 != MEMORY[0x1BA9E3130](v2, v3));
  }
  swift_bridgeObjectRelease();
  OrderedForest._remove(_:)(a1);
  return a1;
}

uint64_t specialized OrderedForest._detachFromParent(_:)(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 128))();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void (**)(void))(*(void *)result + 152);
    v3();
    type metadata accessor for Node();
    type metadata accessor for Array();
    swift_getWitnessTable();
    char v4 = Collection.isEmpty.getter();
    uint64_t v5 = swift_bridgeObjectRelease();
    if (v4)
    {
      return swift_release();
    }
    else
    {
      ((void (*)(uint64_t))v3)(v5);
      swift_getWitnessTable();
      uint64_t v6 = _ArrayProtocol.filter(_:)();
      uint64_t v7 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 104));
      swift_beginAccess();
      *uint64_t v7 = v6;
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      return swift_weakAssign();
    }
  }
  return result;
}

uint64_t *specialized Node.init(value:parent:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_weakInit();
  swift_weakInit();
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 120)) = 0;
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(v3 + 80) - 8) + 16))((uint64_t)v1 + *(void *)(*v1 + 88), a1, *(void *)(v3 + 80));
  swift_beginAccess();
  swift_weakAssign();
  type metadata accessor for Node();
  uint64_t v4 = static Array._allocateUninitialized(_:)();
  swift_release();
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 104)) = v4;
  swift_weakAssign();
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 120)) = 0;
  swift_release();
  return v1;
}

uint64_t *specialized Node.__allocating_init(value:parent:)(uint64_t a1)
{
  return specialized Node.init(value:parent:)(a1);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedForest<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B9F5C3C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9F5C410()
{
  return 8;
}

void *sub_1B9F5C41C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B9F5C428@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9F5C478()
{
  return 8;
}

uint64_t sub_1B9F5C484@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9F5C4D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_1B9F5C514()
{
  return 8;
}

uint64_t type metadata completion function for Node()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for Node(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Node);
}

uint64_t dispatch thunk of Node.parent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of Node.children.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of Node.__allocating_init(value:parent:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

void *assignWithCopy for NodeIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for NodeIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeIterator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for NodeIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for OrderedForest()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for OrderedForest()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for OrderedForest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for OrderedForest);
}

uint64_t dispatch thunk of OrderedForest.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of OrderedForest.isEmpty.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of OrderedForest.makeIterator()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of OrderedForest.clear()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of OrderedForest.push(value:parentNode:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of OrderedForest.top()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of OrderedForest.raise(node:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of OrderedForest.replan(node:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of OrderedForest.remove(node:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of OrderedForest.removeTree(node:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of OrderedForest.removeBranch(node:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of OrderedForest.debugDescription(printer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of OrderedForest.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

BOOL partial apply for closure #1 in OrderedForest._detachFromParent(_:)(void *a1)
{
  return *a1 != v1;
}

BOOL partial apply for closure #1 in OrderedForest.replan(node:)(void *a1)
{
  return partial apply for closure #1 in OrderedForest._detachFromParent(_:)(a1);
}

uint64_t PeerInfoProvider.__allocating_init(peerInfo:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void *PeerInfoProvider.peerInfo.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t PeerInfoProvider.init(peerInfo:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

Swift::String_optional __swiftcall PeerInfoProvider.getIdsIdentifier()()
{
  uint64_t v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_idsIdentifier);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PeerInfoProvider.getRapportEffectiveIdentifier()()
{
  uint64_t v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_rapportEffectiveIdentifier);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PeerInfoProvider.getMediaSystemIdentifier()()
{
  uint64_t v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_mediaSystemIdentifier);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall PeerInfoProvider.isOwnedByCurrentUser()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1) {
    return objc_msgSend(v1, sel_isDeviceOwnedByCurrentUser);
  }
  else {
    return 1;
  }
}

uint64_t PeerInfoProvider.getDeviceIdiom()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1 && (id v2 = objc_msgSend(v1, sel_userInterfaceIdiom)) != 0)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    return DeviceIdiom.init(aceValue:)();
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentDevice.getter();
    swift_release();
    CurrentDevice.localDeviceIdiom.getter();
    return swift_release();
  }
}

Swift::String_optional __swiftcall PeerInfoProvider.getMediaRouteIdentifier()()
{
  uint64_t v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_mediaRouteIdentifier);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PeerInfoProvider.getPeerName()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (!v1) {
    goto LABEL_7;
  }
  id v2 = objc_msgSend(v1, sel_name);
  if (!v2) {
    goto LABEL_7;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  uint64_t v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    uint64_t v4 = 0;
    unint64_t v6 = 0;
  }
  uint64_t v8 = v4;
  uint64_t v9 = (void *)v6;
  result.value._object = v9;
  result.value._uint64_t countAndFlagsBits = v8;
  return result;
}

uint64_t PeerInfoProvider.deinit()
{
  return v0;
}

uint64_t protocol witness for PeerInfoProviding.getIdsIdentifier() in conformance PeerInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for PeerInfoProviding.getRapportEffectiveIdentifier() in conformance PeerInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for PeerInfoProviding.getMediaSystemIdentifier() in conformance PeerInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for PeerInfoProviding.isOwnedByCurrentUser() in conformance PeerInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))() & 1;
}

uint64_t protocol witness for PeerInfoProviding.getDeviceIdiom() in conformance PeerInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for PeerInfoProviding.getMediaRouteIdentifier() in conformance PeerInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for PeerInfoProviding.getPeerName() in conformance PeerInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t method lookup function for PeerInfoProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PeerInfoProvider);
}

uint64_t dispatch thunk of PeerInfoProvider.__allocating_init(peerInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PeerInfoProvider.getIdsIdentifier()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PeerInfoProvider.getRapportEffectiveIdentifier()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PeerInfoProvider.getMediaSystemIdentifier()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PeerInfoProvider.isOwnedByCurrentUser()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PeerInfoProvider.getDeviceIdiom()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PeerInfoProvider.getMediaRouteIdentifier()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PeerInfoProvider.getPeerName()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t PerTCUFlowOperationQueue.submit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  unint64_t v6 = (void *)(v2 + 112);
  swift_beginAccess();
  uint64_t v7 = *(void **)(v2 + 112);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 112) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    void *v6 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    void *v6 = v7;
  }
  void v7[2] = v10 + 1;
  Swift::String v11 = &v7[2 * v10];
  v11[4] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error);
  v11[5] = v5;
  uint64_t result = swift_endAccess();
  if ((unint64_t)(*(void *)(v2 + 144) - 1) >= 2)
  {
    PerTCUFlowOperationQueue.runTasksNow()();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  void *v3 = v2;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v5();
}

uint64_t sub_1B9F5D13C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)
                                              + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error));
  return v6(a1, v4);
}

uint64_t PerTCUFlowOperationQueue.wait()()
{
  *(void *)(v1 + 16) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v1 + 24) = swift_task_alloc();
  return MEMORY[0x1F4188298](PerTCUFlowOperationQueue.wait(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(v1 + 120);
  v0[4] = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[5] = v3;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    void *v3 = v0;
    uint64_t v5 = PerTCUFlowOperationQueue.wait();
LABEL_8:
    v3[1] = v5;
    BOOL v15 = MEMORY[0x1E4FBC848] + 8;
    uint64_t v16 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187D90](v4, v2, v15, v4, v16);
  }
  if (*(void *)(v1 + 144) != 2)
  {
    unint64_t v10 = v0[3];
    Swift::String v11 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    uint64_t v13 = lazy protocol witness table accessor for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue(&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue, v12, (void (*)(uint64_t))type metadata accessor for PerTCUFlowOperationQueue);
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = v1;
    v14[3] = v13;
    void v14[4] = v1;
    swift_retain_n();
    uint64_t v2 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v10, (uint64_t)&async function pointer to partial apply for closure #1 in PerTCUFlowOperationQueue.wait(), (uint64_t)v14);
    v0[7] = v2;
    *(void *)(v1 + 120) = v2;
    swift_retain();
    swift_release();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[8] = v3;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    void *v3 = v0;
    uint64_t v5 = PerTCUFlowOperationQueue.wait();
    goto LABEL_8;
  }
  uint64_t v6 = type metadata accessor for UnsafeFlowOperationQueueError();
  lazy protocol witness table accessor for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue(&lazy protocol witness table cache variable for type UnsafeFlowOperationQueueError and conformance UnsafeFlowOperationQueueError, 255, MEMORY[0x1E4FA1788]);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, *MEMORY[0x1E4FA1780], v6);
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0) {
    uint64_t v4 = PerTCUFlowOperationQueue.wait();
  }
  else {
    uint64_t v4 = PerTCUFlowOperationQueue.wait();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0) {
    uint64_t v4 = PerTCUFlowOperationQueue.wait();
  }
  else {
    uint64_t v4 = PerTCUFlowOperationQueue.wait();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PerTCUFlowOperationQueue.wait()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  return MEMORY[0x1F4188298](closure #1 in PerTCUFlowOperationQueue.wait(), a4, 0);
}

uint64_t closure #1 in PerTCUFlowOperationQueue.wait()()
{
  uint64_t v21 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void **)(v1 + 128);
  *(void *)(v0 + 72) = v3;
  int v4 = *(unsigned __int8 *)(v1 + 136);
  *(unsigned char *)(v0 + 88) = v4;
  if (v4 != 255)
  {
    uint64_t v5 = v3;
    if ((v4 & 1) == 0)
    {
LABEL_3:
      *(void *)(v1 + 120) = 0;
      outlined copy of Result<(), Error>?(v3, v4);
      swift_release();
      uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
LABEL_19:
      return v6();
    }
    goto LABEL_13;
  }
  if (static Task<>.isCancelled.getter())
  {
    int v7 = *(unsigned __int8 *)(*v2 + 136);
    if (v7 != 255)
    {
      uint64_t v5 = *(void **)(*v2 + 128);
      outlined copy of Result<(), Error>(v5, v7 & 1);
      LOBYTE(v4) = *(unsigned char *)(v0 + 88);
      uint64_t v3 = *(void **)(v0 + 72);
      if ((v7 & 1) == 0)
      {
        uint64_t v1 = *v2;
        goto LABEL_3;
      }
LABEL_13:
      *(void *)(v0 + 40) = v5;
      outlined copy of Result<(), Error>?(v3, v4);
      outlined copy of Result<(), Error>(v5, 1);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
      id v11 = v5;
      id v12 = v5;
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        BOOL v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v20 = v16;
        *(_DWORD *)BOOL v15 = 136315138;
        swift_getErrorValue();
        uint64_t v17 = Error.localizedDescription.getter();
        *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of Result<(), Error>(v5, 1);
        outlined consume of Result<(), Error>(v5, 1);
        _os_log_impl(&dword_1B9C64000, v13, v14, "UnsafeFlowOperationQueue: Operation threw an error: %s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v16, -1, -1);
        MEMORY[0x1BA9E48C0](v15, -1, -1);
      }
      else
      {
        outlined consume of Result<(), Error>(v5, 1);
        outlined consume of Result<(), Error>(v5, 1);
      }

      uint64_t v19 = *(void *)(v0 + 64);
      swift_willThrow();
      outlined consume of Result<(), Error>(v5, 1);
      *(void *)(v19 + 120) = 0;
      swift_release();
      uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_19;
    }
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000064, 0x80000001BA06ABA0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/PerTCUFlowOperationQueue.swift", 99, 2, 57);
  }
  else
  {
    unint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v9;
    *unint64_t v9 = v0;
    v9[1] = closure #1 in PerTCUFlowOperationQueue.wait();
    return MEMORY[0x1F4187DE0](0x7FFFFFFFFFFFFFFFLL);
  }
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0)
  {

    int v4 = closure #1 in PerTCUFlowOperationQueue.wait();
  }
  else
  {
    int v4 = closure #1 in PerTCUFlowOperationQueue.wait();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = v0;
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 136);
  if (v2 == 255)
  {
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000064, 0x80000001BA06ABA0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/PerTCUFlowOperationQueue.swift", 99, 2, 57);
  }
  else
  {
    int v4 = *(void **)(v1 + 128);
    outlined copy of Result<(), Error>(v4, v2 & 1);
    uint64_t v5 = *(unsigned char *)(v0 + 88);
    uint64_t v6 = *(void **)(v0 + 72);
    if (v2)
    {
      *(void *)(v0 + 40) = v4;
      outlined copy of Result<(), Error>?(v6, v5);
      outlined copy of Result<(), Error>(v4, 1);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      int v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
      uint64_t v8 = v4;
      unint64_t v9 = v4;
      uint64_t v10 = Logger.logObject.getter();
      id v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        unint64_t v18 = v13;
        *(_DWORD *)id v12 = 136315138;
        swift_getErrorValue();
        os_log_type_t v14 = Error.localizedDescription.getter();
        *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of Result<(), Error>(v4, 1);
        outlined consume of Result<(), Error>(v4, 1);
        _os_log_impl(&dword_1B9C64000, v10, v11, "UnsafeFlowOperationQueue: Operation threw an error: %s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v13, -1, -1);
        MEMORY[0x1BA9E48C0](v12, -1, -1);
      }
      else
      {
        outlined consume of Result<(), Error>(v4, 1);
        outlined consume of Result<(), Error>(v4, 1);
      }

      uint64_t v17 = *(void *)(v0 + 64);
      swift_willThrow();
      outlined consume of Result<(), Error>(v4, 1);
      *(void *)(v17 + 120) = 0;
      swift_release();
      uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    }
    else
    {
      *(void *)(*(void *)(v0 + 64) + 120) = 0;
      outlined copy of Result<(), Error>?(v6, v5);
      swift_release();
      uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    }
    return v16();
  }
}

unint64_t PerTCUFlowOperationQueue.finalize()()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (v1 == 1) {
    return PerTCUFlowOperationQueue.runTasksNow()();
  }
  if (v1 == 2) {
    char v2 = 1;
  }
  else {
    char v2 = 3;
  }
  lazy protocol witness table accessor for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError();
  swift_allocError();
  char *v3 = v2;
  return swift_willThrow();
}

unint64_t PerTCUFlowOperationQueue.runTasksNow()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v4 = *(void **)(v0 + 128);
  *(void *)(v0 + 128) = 0;
  unsigned __int8 v5 = *(unsigned char *)(v0 + 136);
  *(unsigned char *)(v0 + 136) = -1;
  outlined consume of Result<(), Error>?(v4, v5);
  unint64_t v6 = *(void *)(v0 + 144);
  if (v6 >= 3)
  {
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
    uint64_t v9 = lazy protocol witness table accessor for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue(&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue, v8, (void (*)(uint64_t))type metadata accessor for PerTCUFlowOperationQueue);
    uint64_t v10 = (void *)swift_allocObject();
    void v10[2] = v0;
    v10[3] = v9;
    v10[4] = v0;
    swift_retain_n();
    unint64_t v6 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in PerTCUFlowOperationQueue.runTasksNow(), (uint64_t)v10);
    uint64_t v11 = *(void *)(v0 + 144);
    *(void *)(v0 + 144) = v6;
    swift_retain();
    outlined consume of PerTCUFlowOperationQueue.State(v11);
  }
  return v6;
}

uint64_t closure #1 in PerTCUFlowOperationQueue.runTasksNow()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  return MEMORY[0x1F4188298](closure #1 in PerTCUFlowOperationQueue.runTasksNow(), a4, 0);
}

uint64_t closure #1 in PerTCUFlowOperationQueue.runTasksNow()()
{
  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = v0[8];
  if (*(void *)(*(void *)(v1 + 112) + 16))
  {
    swift_beginAccess();
    uint64_t v3 = *(void **)(v2 + 112);
    int64_t v4 = v3[2];
    if (v4)
    {
      unsigned __int8 v5 = (int *)v3[4];
      v0[9] = v3[5];
      swift_retain();
      char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (unint64_t)(v4 - 1) > v3[3] >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v4, 1, v3);
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ());
      swift_arrayDestroy();
      uint64_t v7 = v3[2];
      if (v7)
      {
        uint64_t v8 = v0[8];
        memmove(v3 + 4, v3 + 6, 16 * v7 - 16);
        v3[2] = v7 - 1;
        *(void *)(v8 + 112) = v3;
        swift_endAccess();
        uint64_t v17 = (uint64_t (*)(void))((char *)v5 + *v5);
        uint64_t v9 = (void *)swift_task_alloc();
        v0[10] = v9;
        *uint64_t v9 = v0;
        v9[1] = closure #1 in PerTCUFlowOperationQueue.runTasksNow();
        return v17();
      }
    }
    else
    {
      __break(1u);
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
  uint64_t v11 = *(void **)(v2 + 128);
  *(void *)(v2 + 128) = 0;
  unsigned __int8 v12 = *(unsigned char *)(v2 + 136);
  *(unsigned char *)(v2 + 136) = 0;
  outlined copy of Result<(), Error>(0, 0);
  outlined consume of Result<(), Error>?(v11, v12);
  uint64_t v13 = *(void *)(v2 + 144);
  *(void *)(v2 + 144) = 0;
  outlined consume of PerTCUFlowOperationQueue.State(v13);
  uint64_t v14 = *(void *)(v2 + 120);
  if (v14)
  {
    swift_retain();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1BA9E3300](v14, MEMORY[0x1E4FBC848] + 8, v15, MEMORY[0x1E4FBC0F0]);
    outlined consume of Result<(), Error>(0, 0);
    swift_release();
  }
  else
  {
    outlined consume of Result<(), Error>(0, 0);
  }
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  swift_release();
  if (v0) {
    int64_t v4 = closure #1 in PerTCUFlowOperationQueue.runTasksNow();
  }
  else {
    int64_t v4 = closure #1 in PerTCUFlowOperationQueue.runTasksNow();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int *v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t (*v17)(void);
  uint64_t v18;

  uint64_t v1 = v0[8];
  uint64_t v2 = v1 + 112;
  if (*(void *)(*(void *)(v1 + 112) + 16))
  {
    swift_beginAccess();
    uint64_t v3 = *(void **)v2;
    int64_t v4 = *(void *)(*(void *)v2 + 16);
    if (v4)
    {
      unsigned __int8 v5 = (int *)v3[4];
      v0[9] = v3[5];
      swift_retain();
      char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (unint64_t)(v4 - 1) > v3[3] >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v4, 1, v3);
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ());
      swift_arrayDestroy();
      uint64_t v7 = v3[2];
      if (v7)
      {
        uint64_t v8 = v0[8];
        memmove(v3 + 4, v3 + 6, 16 * v7 - 16);
        v3[2] = v7 - 1;
        *(void *)(v8 + 112) = v3;
        swift_endAccess();
        uint64_t v17 = (uint64_t (*)(void))((char *)v5 + *v5);
        uint64_t v9 = (void *)swift_task_alloc();
        v0[10] = v9;
        *uint64_t v9 = v0;
        v9[1] = closure #1 in PerTCUFlowOperationQueue.runTasksNow();
        return v17();
      }
    }
    else
    {
      __break(1u);
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
  uint64_t v11 = *(void **)(v1 + 128);
  *(void *)(v1 + 128) = 0;
  unsigned __int8 v12 = *(unsigned char *)(v1 + 136);
  *(unsigned char *)(v1 + 136) = 0;
  outlined copy of Result<(), Error>(0, 0);
  outlined consume of Result<(), Error>?(v11, v12);
  uint64_t v13 = *(void *)(v1 + 144);
  *(void *)(v1 + 144) = 0;
  outlined consume of PerTCUFlowOperationQueue.State(v13);
  uint64_t v14 = *(void *)(v1 + 120);
  if (v14)
  {
    swift_retain();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1BA9E3300](v14, MEMORY[0x1E4FBC848] + 8, v15, MEMORY[0x1E4FBC0F0]);
    outlined consume of Result<(), Error>(0, 0);
    swift_release();
  }
  else
  {
    outlined consume of Result<(), Error>(0, 0);
  }
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = *(void **)(v2 + 128);
  *(void *)(v2 + 128) = v1;
  int64_t v4 = *(unsigned char *)(v2 + 136);
  *(unsigned char *)(v2 + 136) = 1;
  outlined copy of Result<(), Error>(v1, 1);
  outlined consume of Result<(), Error>?(v3, v4);
  unsigned __int8 v5 = *(void *)(v2 + 144);
  *(void *)(v2 + 144) = 0;
  outlined consume of PerTCUFlowOperationQueue.State(v5);
  unint64_t v6 = *(void *)(v2 + 120);
  if (v6)
  {
    swift_retain();
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1BA9E3300](v6, MEMORY[0x1E4FBC848] + 8, v7, MEMORY[0x1E4FBC0F0]);
    outlined consume of Result<(), Error>(v1, 1);
    swift_release();
  }
  else
  {
    outlined consume of Result<(), Error>(v1, 1);
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PerTCUFlowOperationQueue.abandon()()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (v1 == 1)
  {
    uint64_t v4 = type metadata accessor for UnsafeFlowOperationQueueError();
    lazy protocol witness table accessor for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue(&lazy protocol witness table cache variable for type UnsafeFlowOperationQueueError and conformance UnsafeFlowOperationQueueError, 255, MEMORY[0x1E4FA1788]);
    uint64_t v5 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *MEMORY[0x1E4FA1780], v4);
    uint64_t v7 = *(void **)(v0 + 128);
    *(void *)(v0 + 128) = v5;
    unsigned __int8 v8 = *(unsigned char *)(v0 + 136);
    *(unsigned char *)(v0 + 136) = 1;
    outlined consume of Result<(), Error>?(v7, v8);
    uint64_t v9 = *(void *)(v0 + 144);
    *(void *)(v0 + 144) = 2;
    outlined consume of PerTCUFlowOperationQueue.State(v9);
    uint64_t v10 = *(void *)(v0 + 120);
    if (v10)
    {
      swift_retain();
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      MEMORY[0x1BA9E3300](v10, MEMORY[0x1E4FBC848] + 8, v11, MEMORY[0x1E4FBC0F0]);
      swift_release();
    }
  }
  else
  {
    if (v1 == 2) {
      char v2 = 2;
    }
    else {
      char v2 = 0;
    }
    lazy protocol witness table accessor for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError();
    swift_allocError();
    char *v3 = v2;
    swift_willThrow();
  }
}

unint64_t PerTCUFlowOperationQueue.OperationError.debugDescription.getter(char a1)
{
  unint64_t result = 0xD000000000000031;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000031;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000022;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static PerTCUFlowOperationQueue.OperationError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PerTCUFlowOperationQueue.OperationError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int PerTCUFlowOperationQueue.OperationError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PerTCUFlowOperationQueue.OperationError()
{
  return PerTCUFlowOperationQueue.OperationError.debugDescription.getter(*v0);
}

uint64_t PerTCUFlowOperationQueue.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Result<(), Error>?(*(void **)(v0 + 128), *(unsigned char *)(v0 + 136));
  outlined consume of PerTCUFlowOperationQueue.State(*(void *)(v0 + 144));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t PerTCUFlowOperationQueue.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Result<(), Error>?(*(void **)(v0 + 128), *(unsigned char *)(v0 + 136));
  outlined consume of PerTCUFlowOperationQueue.State(*(void *)(v0 + 144));
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t PerTCUFlowOperationQueue.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 112) = v1;
  *(unsigned char *)(v0 + 136) = -1;
  *(void *)(v0 + 144) = 1;
  return v0;
}

uint64_t PerTCUFlowOperationQueue.init()()
{
  swift_defaultActor_initialize();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 112) = v1;
  *(unsigned char *)(v0 + 136) = -1;
  *(void *)(v0 + 144) = 1;
  return v0;
}

uint64_t PerTCUFlowOperationQueue.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for UnsafeFlowOperationQueue.wait() in conformance PerTCUFlowOperationQueue()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return PerTCUFlowOperationQueue.wait()();
}

uint64_t type metadata accessor for PerTCUFlowOperationQueue()
{
  return self;
}

uint64_t partial apply for closure #1 in PerTCUFlowOperationQueue.wait()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v3[8] = v2;
  return MEMORY[0x1F4188298](closure #1 in PerTCUFlowOperationQueue.wait(), v2, 0);
}

uint64_t lazy protocol witness table accessor for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError()
{
  unint64_t result = lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError;
  if (!lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError;
  if (!lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError);
  }
  return result;
}

uint64_t outlined consume of PerTCUFlowOperationQueue.State(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t base witness table accessor for Actor in PerTCUFlowOperationQueue(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue(&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue, a2, (void (*)(uint64_t))type metadata accessor for PerTCUFlowOperationQueue);
}

uint64_t method lookup function for PerTCUFlowOperationQueue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PerTCUFlowOperationQueue);
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.submit(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.wait()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 224) + **(int **)(*(void *)v0 + 224));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.finalize()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.abandon()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

unsigned char *storeEnumTagSinglePayload for PerTCUFlowOperationQueue.OperationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9F5F568);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PerTCUFlowOperationQueue.OperationError()
{
  return &type metadata for PerTCUFlowOperationQueue.OperationError;
}

unint64_t destroy for PerTCUFlowOperationQueue.State(unint64_t *a1)
{
  unint64_t result = *a1;
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_release();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PerTCUFlowOperationQueue.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  if ((int)v4 - 1 < 0) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

uint64_t *assignWithCopy for PerTCUFlowOperationQueue.State(uint64_t *a1, uint64_t *a2)
{
  LODWORD(v3) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v4) = -1;
  }
  else {
    uint64_t v4 = *a1;
  }
  int v5 = v4 - 1;
  uint64_t v6 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v3 = *a2;
  }
  int v7 = v3 - 1;
  if (v5 < 0)
  {
    if (v7 < 0)
    {
      *a1 = v6;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_release();
      *a1 = *a2;
    }
  }
  else
  {
    *a1 = v6;
    if (v7 < 0) {
      swift_retain();
    }
  }
  return a1;
}

unint64_t *assignWithTake for PerTCUFlowOperationQueue.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  int v4 = -1;
  if (v3 < 0xFFFFFFFF) {
    int v4 = v3;
  }
  unint64_t v5 = *a2;
  if (v4 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (v5 < 0xFFFFFFFF) {
      unint64_t v6 = *a2;
    }
    if ((int)v6 - 1 < 0)
    {
      *a1 = v5;
      swift_release();
      return a1;
    }
    swift_release();
  }
  *a1 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for PerTCUFlowOperationQueue.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 1;
  if (v5 >= 3) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PerTCUFlowOperationQueue.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for PerTCUFlowOperationQueue.State(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *destructiveInjectEnumTag for PerTCUFlowOperationQueue.State(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2) {
LABEL_5:
  }
    *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PerTCUFlowOperationQueue.State()
{
  return &type metadata for PerTCUFlowOperationQueue.State;
}

id outlined copy of Result<(), Error>?(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined copy of Result<(), Error>(result, a2 & 1);
  }
  return result;
}

uint64_t partial apply for closure #1 in PerTCUFlowOperationQueue.runTasksNow()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v3[8] = v2;
  return MEMORY[0x1F4188298](closure #1 in PerTCUFlowOperationQueue.runTasksNow(), v2, 0);
}

SiriKitRuntime::PhoneAffinityScorer __swiftcall PhoneAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062B90;
  uint64_t v1 = 0xD00000000000002ALL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t key path getter for CodeGenListEntry.entry : CodeGenListEntry<UsoEntity_common_UserEntity>@<X0>(void *a1@<X8>)
{
  uint64_t result = dispatch thunk of CodeGenListEntry.entry.getter();
  *a1 = v3;
  return result;
}

uint64_t PhoneAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t PhoneFeatureFlags.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v0 = (unsigned __int8 *)(static PhoneFeatureFlags.forceEnabled + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static PhoneFeatureFlags.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static PhoneFeatureFlags.forceEnabled + 20));
  partial apply for closure #1 in PhoneFeatureFlags.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t UsoTask.parseResult.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (v43[3])
  {
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v43, (uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceTrigger<UsoEntity_common_Setting>);
    if (swift_dynamicCast())
    {
      unsigned __int8 v0 = UsoTask.parse(referenceTriggerTask:)();
LABEL_6:
      unsigned __int8 v1 = v0;
      swift_release();
LABEL_7:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
      int v2 = 0;
      goto LABEL_51;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceNumberTrigger<UsoEntity_common_Setting>);
    if (swift_dynamicCast())
    {
      unsigned __int8 v0 = UsoTask.parse(referenceNumberTriggerTask:)();
      goto LABEL_6;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Reference<UsoEntity_common_Setting>);
    if (swift_dynamicCast())
    {
      type metadata accessor for UsoTask_summarise_common_Setting();
      if (!swift_dynamicCastClass())
      {
        type metadata accessor for UsoTask_checkExistence_common_Setting();
        if (!swift_dynamicCastClass())
        {
          swift_release();
          unsigned __int8 v1 = 0;
          goto LABEL_7;
        }
      }
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      char v3 = UsoTask.parseEntity(setting:)(v41);
      swift_release();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      if (v41)
      {
        uint64_t v4 = dispatch thunk of UsoEntity_common_Setting.associatedSetting.getter();
        swift_release();
      }
      else
      {
        uint64_t v4 = 0;
      }
      char v7 = UsoTask.parseEntity(setting:)(v4);
      swift_release();
      unint64_t v8 = dispatch thunk of Uso_VerbTemplate_Reference.userEntities.getter();
      if (v8)
      {
        unint64_t v9 = specialized Sequence.compactMap<A>(_:)(v8);
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v9 = MEMORY[0x1E4FBC860];
      }
      char v10 = v7 | v3;
      swift_retain();
      uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology021UsoEntity_common_UserG0CG_0D10KitRuntime19SettingParseOptionsVs5NeverOTg504_s12d9Ontology7f9TaskC0A10jk69E11parseEntity33_78CB2465498F39AEB41E4B41B1A3637CLL12userEntitiesAD19lmn12VSayAA0ch12_h1_I25H0CG_tFAiKcACcfu_AiKcfu0_AF0fR0CTf1cn_nTf4ng_n(v9);
      swift_release();
      unint64_t v12 = *(void *)(v11 + 16);
      if (!v12)
      {
        unsigned __int8 v14 = 0;
LABEL_45:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        unsigned __int8 v1 = v10 | v14;
        goto LABEL_7;
      }
      if (v12 < 8)
      {
        uint64_t v13 = 0;
        unsigned __int8 v14 = 0;
LABEL_43:
        unint64_t v28 = v12 - v13;
        unint64_t v29 = (char *)(v13 + v11 + 32);
        do
        {
          char v30 = *v29++;
          v14 |= v30;
          --v28;
        }
        while (v28);
        goto LABEL_45;
      }
      if (v12 >= 0x20)
      {
        uint64_t v13 = v12 & 0x7FFFFFFFFFFFFFE0;
        uint64_t v16 = (int8x16_t *)(v11 + 48);
        int8x16_t v17 = 0uLL;
        uint64_t v18 = v12 & 0x7FFFFFFFFFFFFFE0;
        int8x16_t v19 = 0uLL;
        do
        {
          int8x16_t v17 = vorrq_s8(v16[-1], v17);
          int8x16_t v19 = vorrq_s8(*v16, v19);
          v16 += 2;
          v18 -= 32;
        }
        while (v18);
        int8x16_t v20 = vorrq_s8(v19, v17);
        *(int8x8_t *)v20.i8 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
        unint64_t v21 = v20.i64[0] | HIDWORD(v20.i64[0]) | ((unint64_t)(v20.i64[0] | HIDWORD(v20.i64[0])) >> 16);
        unsigned __int8 v14 = v21 | BYTE1(v21);
        if (v12 == v13) {
          goto LABEL_45;
        }
        if ((v12 & 0x18) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
        unsigned __int8 v14 = 0;
        uint64_t v13 = 0;
      }
      uint64_t v22 = v13;
      uint64_t v13 = v12 & 0x7FFFFFFFFFFFFFF8;
      int8x8_t v23 = (int8x8_t)v14;
      uint64_t v24 = (int8x8_t *)(v22 + v11 + 32);
      unint64_t v25 = v22 - (v12 & 0x7FFFFFFFFFFFFFF8);
      do
      {
        int8x8_t v26 = *v24++;
        int8x8_t v23 = vorr_s8(v26, v23);
        v25 += 8;
      }
      while (v25);
      uint64_t v27 = *(void *)&v23 | HIDWORD(*(void *)&v23) | ((*(void *)&v23 | HIDWORD(*(void *)&v23)) >> 16);
      unsigned __int8 v14 = v27 | BYTE1(v27);
      if (v12 == v13) {
        goto LABEL_45;
      }
      goto LABEL_43;
    }
    type metadata accessor for UsoTask_noVerb_common_Setting();
    if (swift_dynamicCast())
    {
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      char v5 = UsoTask.parseEntity(setting:)(v41);
      swift_release();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      if (v41)
      {
        uint64_t v6 = dispatch thunk of UsoEntity_common_Setting.associatedSetting.getter();
        swift_release();
      }
      else
      {
        uint64_t v6 = 0;
      }
      char v15 = UsoTask.parseEntity(setting:)(v6);
      swift_release();
      swift_release();
      unsigned __int8 v1 = v15 | v5;
      goto LABEL_7;
    }
    type metadata accessor for UsoTask_reply_uso_NoEntity();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
      swift_release();
      swift_release();
      if (v41)
      {
        swift_release();
        unsigned __int8 v1 = 0;
      }
      else
      {
        dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
        swift_release();
        swift_retain();
        uint64_t v40 = dispatch thunk of Uso_VerbTemplate_ReferenceTarget.userEntities.getter();
        swift_release_n();
        swift_bridgeObjectRelease();
        unsigned __int8 v1 = v40 == 0;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
      goto LABEL_50;
    }
    type metadata accessor for UsoTask_update_common_PhoneCall();
    if (swift_dynamicCast())
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
      int v2 = 1;
      unsigned __int8 v1 = 3;
      goto LABEL_51;
    }
    type metadata accessor for UsoTask_update_common_Communication();
    if (swift_dynamicCast())
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
      int v2 = 1;
      unsigned __int8 v1 = 2;
      goto LABEL_51;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
  }
  unsigned __int8 v1 = 0;
LABEL_50:
  int v2 = 1;
LABEL_51:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
  char v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v43[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    int v36 = v1;
    uint64_t v37 = PhoneSettingParseResult.description.getter(v1 | (unsigned __int16)((_WORD)v2 << 8));
    v42[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v32, v33, "PhoneAffinityScorer UsoTask.parseResult = %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    MEMORY[0x1BA9E48C0](v34, -1, -1);
  }
  else
  {

    int v36 = v1;
  }
  return v36 | (v2 << 8);
}

uint64_t InCallFeatureFlags.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  unsigned __int8 v0 = (unsigned __int8 *)(static InCallFeatureFlags.forceEnabled + 16);
  unsigned __int8 v1 = (os_unfair_lock_s *)(static InCallFeatureFlags.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static InCallFeatureFlags.forceEnabled + 20));
  partial apply for closure #1 in InCallFeatureFlags.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

BOOL SettingParseOptions.isSupportedInCall.getter(char a1)
{
  return (a1 & 1) == 0 && a1 != 0;
}

void *SettingParseOptions.callVolume.unsafeMutableAddressor()
{
  return &static SettingParseOptions.callVolume;
}

uint64_t PhoneSettingParseResult.description.getter(__int16 a1)
{
  unsigned __int8 v1 = a1;
  if ((a1 & 0x100) != 0)
  {
    uint64_t result = 0x726568746F2ELL;
    switch(v1)
    {
      case 1u:
        uint64_t result = 0xD000000000000013;
        break;
      case 2u:
        uint64_t result = 0xD000000000000019;
        break;
      case 3u:
        uint64_t result = 0xD000000000000015;
        break;
      default:
        return result;
    }
  }
  else
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v2._uint64_t countAndFlagsBits = SettingParseOptions.description.getter(v1);
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    v3._uint64_t countAndFlagsBits = 41;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    return 0x676E69747465732ELL;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSettingParseResult()
{
  return PhoneSettingParseResult.description.getter(*v0 | (unsigned __int16)(v0[1] << 8));
}

void one-time initialization function for descriptionLabels()
{
  static SettingParseOptions.descriptionLabels = &outlined read-only object #0 of one-time initialization function for descriptionLabels;
}

void *SettingParseOptions.none.unsafeMutableAddressor()
{
  return &static SettingParseOptions.none;
}

uint64_t static SettingParseOptions.none.getter()
{
  return 0;
}

void *SettingParseOptions.unsupportedTask.unsafeMutableAddressor()
{
  return &static SettingParseOptions.unsupportedTask;
}

uint64_t static SettingParseOptions.unsupportedTask.getter()
{
  return 0;
}

void *SettingParseOptions.unsupportedEntity.unsafeMutableAddressor()
{
  return &static SettingParseOptions.unsupportedEntity;
}

uint64_t static SettingParseOptions.unsupportedEntity.getter()
{
  return 1;
}

void *SettingParseOptions.phoneSetting.unsafeMutableAddressor()
{
  return &static SettingParseOptions.phoneSetting;
}

uint64_t static SettingParseOptions.phoneSetting.getter()
{
  return 2;
}

void *SettingParseOptions.generalVolume.unsafeMutableAddressor()
{
  return &static SettingParseOptions.generalVolume;
}

uint64_t static SettingParseOptions.generalVolume.getter()
{
  return 4;
}

uint64_t static SettingParseOptions.callVolume.getter()
{
  return 8;
}

void *SettingParseOptions.mediaVolume.unsafeMutableAddressor()
{
  return &static SettingParseOptions.mediaVolume;
}

uint64_t static SettingParseOptions.mediaVolume.getter()
{
  return 16;
}

void *SettingParseOptions.voiceVolume.unsafeMutableAddressor()
{
  return &static SettingParseOptions.voiceVolume;
}

uint64_t static SettingParseOptions.voiceVolume.getter()
{
  return 32;
}

void *SettingParseOptions.BOOLeanSetting.unsafeMutableAddressor()
{
  return &static SettingParseOptions.BOOLeanSetting;
}

uint64_t static SettingParseOptions.BOOLeanSetting.getter()
{
  return 64;
}

uint64_t SettingParseOptions.description.getter(unsigned __int8 a1)
{
  if (one-time initialization token for descriptionLabels != -1) {
    swift_once();
  }
  Swift::String v2 = (char *)static SettingParseOptions.descriptionLabels;
  uint64_t v3 = *((void *)static SettingParseOptions.descriptionLabels + 2);
  if (v3)
  {
    unsigned int v4 = a1;
    swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 40);
    char v7 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v10 = *(v6 - 1);
      uint64_t v9 = *v6;
      if (v5 > 7 || ((v4 >> v5) & 1) != 0)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        unint64_t v12 = v7[2];
        unint64_t v11 = v7[3];
        if (v12 >= v11 >> 1) {
          char v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v7);
        }
        void v7[2] = v12 + 1;
        unint64_t v8 = &v7[2 * v12];
        v8[4] = v10;
        v8[5] = v9;
      }
      ++v5;
      v6 += 2;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = MEMORY[0x1BA9E3080](v7, MEMORY[0x1E4FBB1A0]);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SettingParseOptions()
{
  return SettingParseOptions.description.getter(*v0);
}

void protocol witness for SetAlgebra.init() in conformance SettingParseOptions(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unsigned char *protocol witness for SetAlgebra.union(_:) in conformance SettingParseOptions@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.intersection(_:) in conformance SettingParseOptions@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance SettingParseOptions@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance SettingParseOptions(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *Swift::String v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance SettingParseOptions@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *Swift::String v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance SettingParseOptions@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *Swift::String v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formUnion(_:) in conformance SettingParseOptions(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formIntersection(_:) in conformance SettingParseOptions(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance SettingParseOptions(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.subtracting(_:) in conformance SettingParseOptions@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance SettingParseOptions(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance SettingParseOptions(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance SettingParseOptions(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance SettingParseOptions()
{
  return *v0 == 0;
}

unsigned char *protocol witness for SetAlgebra.subtract(_:) in conformance SettingParseOptions(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance SettingParseOptions@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SettingParseOptions(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance SettingParseOptions@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

const char *UsoTask.kPhoneSettingNamespace.unsafeMutableAddressor()
{
  return "phoneSetting";
}

uint64_t static UsoTask.kPhoneSettingNamespace.getter()
{
  return 0x746553656E6F6870;
}

void *UsoTask.kFloatSettingNameNamespace.unsafeMutableAddressor()
{
  return &static UsoTask.kFloatSettingNameNamespace;
}

unint64_t static UsoTask.kFloatSettingNameNamespace.getter()
{
  return 0xD000000000000010;
}

const char *UsoTask.kAnswerProductNamespace.unsafeMutableAddressor()
{
  return "answerProduct";
}

uint64_t static UsoTask.kAnswerProductNamespace.getter()
{
  return 0x7250726577736E61;
}

void *UsoTask.kBoolSettingNamespace.unsafeMutableAddressor()
{
  return &static UsoTask.kBoolSettingNamespace;
}

uint64_t static UsoTask.kBoolSettingNamespace.getter()
{
  return 0x747465536C6F6F62;
}

uint64_t one-time initialization function for kAnswerProductValues()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAnswerProductValues);
  uint64_t result = swift_arrayDestroy();
  static UsoTask.kAnswerProductValues = v0;
  return result;
}

uint64_t *UsoTask.kAnswerProductValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kAnswerProductValues != -1) {
    swift_once();
  }
  return &static UsoTask.kAnswerProductValues;
}

uint64_t static UsoTask.kAnswerProductValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kAnswerProductValues);
}

uint64_t one-time initialization function for kSupportedBooleanNamespaceValues()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedBooleanNamespaceValues);
  uint64_t result = swift_arrayDestroy();
  static UsoTask.kSupportedBooleanNamespaceValues = v0;
  return result;
}

uint64_t *UsoTask.kSupportedBooleanNamespaceValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedBooleanNamespaceValues != -1) {
    swift_once();
  }
  return &static UsoTask.kSupportedBooleanNamespaceValues;
}

uint64_t static UsoTask.kSupportedBooleanNamespaceValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSupportedBooleanNamespaceValues);
}

uint64_t UsoTask.parse(referenceTriggerTask:)()
{
  type metadata accessor for UsoTask_enable_common_Setting();
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for UsoTask_disable_common_Setting();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for UsoTask_toggle_common_Setting();
      if (!swift_dynamicCastClass())
      {
        type metadata accessor for UsoTask_set_common_Setting();
        uint64_t result = swift_dynamicCastClass();
        if (!result) {
          return result;
        }
      }
    }
  }
  dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
  int v1 = UsoTask.parseEntity(setting:)(v32);
  swift_release();
  dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
  if (v32)
  {
    uint64_t v2 = dispatch thunk of UsoEntity_common_Setting.associatedSetting.getter();
    swift_release();
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v3 = UsoTask.parseEntity(setting:)(v2);
  swift_release();
  unint64_t v4 = dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.userEntities.getter();
  if (v4)
  {
    unint64_t v5 = specialized Sequence.compactMap<A>(_:)(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = MEMORY[0x1E4FBC860];
  }
  int v6 = v3 | v1;
  swift_retain();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology021UsoEntity_common_UserG0CG_0D10KitRuntime19SettingParseOptionsVs5NeverOTg504_s12d9Ontology7f9TaskC0A10jk69E11parseEntity33_78CB2465498F39AEB41E4B41B1A3637CLL12userEntitiesAD19lmn12VSayAA0ch12_h1_I25H0CG_tFAiKcACcfu_AiKcfu0_AF0fR0CTf1cn_nTf4ng_n(v5);
  swift_release();
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    if (v8 < 8)
    {
      uint64_t v9 = 0;
      int v10 = 0;
LABEL_24:
      unint64_t v23 = v8 - v9;
      uint64_t v24 = (unsigned __int8 *)(v9 + v7 + 32);
      do
      {
        int v25 = *v24++;
        v10 |= v25;
        --v23;
      }
      while (v23);
      goto LABEL_26;
    }
    if (v8 >= 0x20)
    {
      uint64_t v9 = v8 & 0x7FFFFFFFFFFFFFE0;
      unint64_t v11 = (int8x16_t *)(v7 + 48);
      int8x16_t v12 = 0uLL;
      uint64_t v13 = v8 & 0x7FFFFFFFFFFFFFE0;
      int8x16_t v14 = 0uLL;
      do
      {
        int8x16_t v12 = vorrq_s8(v11[-1], v12);
        int8x16_t v14 = vorrq_s8(*v11, v14);
        v11 += 2;
        v13 -= 32;
      }
      while (v13);
      int8x16_t v15 = vorrq_s8(v14, v12);
      *(int8x8_t *)v15.i8 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      unint64_t v16 = v15.i64[0] | HIDWORD(v15.i64[0]) | ((unint64_t)(v15.i64[0] | HIDWORD(v15.i64[0])) >> 16);
      int v10 = v16 | (v16 >> 8);
      if (v8 == v9) {
        goto LABEL_26;
      }
      if ((v8 & 0x18) == 0) {
        goto LABEL_24;
      }
    }
    else
    {
      LOBYTE(v10) = 0;
      uint64_t v9 = 0;
    }
    uint64_t v17 = v9;
    uint64_t v9 = v8 & 0x7FFFFFFFFFFFFFF8;
    int8x8_t v18 = (int8x8_t)v10;
    int8x16_t v19 = (int8x8_t *)(v17 + v7 + 32);
    unint64_t v20 = v17 - (v8 & 0x7FFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v21 = *v19++;
      int8x8_t v18 = vorr_s8(v21, v18);
      v20 += 8;
    }
    while (v20);
    unint64_t v22 = *(void *)&v18 | HIDWORD(*(void *)&v18) | ((*(void *)&v18 | HIDWORD(*(void *)&v18)) >> 16);
    int v10 = v22 | (v22 >> 8);
    if (v8 == v9) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  int v10 = 0;
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v26 = v6 | v10;
  if (dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.trigger.getter())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      char v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v30 = 0;
      _os_log_impl(&dword_1B9C64000, v28, v29, "PhoneAffinityScorer Found an unsupported UsoEntity_common_EventTrigger", v30, 2u);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }

    swift_release();
    int v31 = 1;
  }
  else
  {
    int v31 = 0;
  }
  return v26 | v31;
}

uint64_t UsoTask.parse(referenceNumberTriggerTask:)()
{
  uint64_t v0 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
  MEMORY[0x1F4188790](v4);
  int v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  int v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v57 - v12;
  MEMORY[0x1F4188790](v11);
  int8x16_t v15 = (char *)&v57 - v14;
  type metadata accessor for UsoTask_increaseBy_common_Setting();
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for UsoTask_decreaseBy_common_Setting();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for UsoTask_setNumber_common_Setting();
      uint64_t result = swift_dynamicCastClass();
      if (!result) {
        return result;
      }
    }
  }
  int64_t v60 = v3;
  uint64_t v61 = v1;
  dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter();
  if (v62)
  {
    dispatch thunk of UsoEntity_common_Setting.name.getter();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if (v18)
    {
LABEL_15:
      swift_release();
      goto LABEL_16;
    }
    uint64_t v19 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
    int64_t v58 = v10;
    if (v19)
    {
      dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter();
      swift_release();
      uint64_t v20 = v61;
    }
    else
    {
      uint64_t v20 = v61;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v15, 1, 1, v0);
    }
    (*(void (**)(char *, void, uint64_t))(v20 + 104))(v13, *MEMORY[0x1E4FA3638], v0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v0);
    uint64_t v21 = (uint64_t)&v6[*(int *)(v4 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    uint64_t v59 = v21;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v13, v21, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    unint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
    if (v22((uint64_t)v6, 1, v0) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      if (v22(v59, 1, v0) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        swift_release();
        return 4;
      }
      goto LABEL_14;
    }
    uint64_t v23 = (uint64_t)v58;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t)v58, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    if (v22(v59, 1, v0) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v23, v0);
LABEL_14:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
      goto LABEL_15;
    }
    uint64_t v55 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v60, v59, v0);
    lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues, MEMORY[0x1E4FA3640]);
    LODWORD(v59) = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v56 = *(void (**)(char *, uint64_t))(v55 + 8);
    v56(v60, v0);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    v56((char *)v23, v0);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    swift_release();
    if (v59) {
      return 4;
    }
  }
LABEL_16:
  dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter();
  int v24 = UsoTask.parseEntity(setting:)(v62);
  swift_release();
  dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter();
  if (v62)
  {
    uint64_t v25 = dispatch thunk of UsoEntity_common_Setting.associatedSetting.getter();
    swift_release();
  }
  else
  {
    uint64_t v25 = 0;
  }
  int v26 = UsoTask.parseEntity(setting:)(v25);
  swift_release();
  unint64_t v27 = dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.userEntities.getter();
  if (v27)
  {
    unint64_t v28 = specialized Sequence.compactMap<A>(_:)(v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v28 = MEMORY[0x1E4FBC860];
  }
  int v29 = v26 | v24;
  swift_retain();
  uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology021UsoEntity_common_UserG0CG_0D10KitRuntime19SettingParseOptionsVs5NeverOTg504_s12d9Ontology7f9TaskC0A10jk69E11parseEntity33_78CB2465498F39AEB41E4B41B1A3637CLL12userEntitiesAD19lmn12VSayAA0ch12_h1_I25H0CG_tFAiKcACcfu_AiKcfu0_AF0fR0CTf1cn_nTf4ng_n(v28);
  swift_release();
  unint64_t v31 = *(void *)(v30 + 16);
  if (v31)
  {
    if (v31 < 8)
    {
      uint64_t v32 = 0;
      int v33 = 0;
LABEL_35:
      unint64_t v46 = v31 - v32;
      uint64_t v47 = (unsigned __int8 *)(v32 + v30 + 32);
      do
      {
        int v48 = *v47++;
        v33 |= v48;
        --v46;
      }
      while (v46);
      goto LABEL_37;
    }
    if (v31 >= 0x20)
    {
      uint64_t v32 = v31 & 0x7FFFFFFFFFFFFFE0;
      uint64_t v34 = (int8x16_t *)(v30 + 48);
      int8x16_t v35 = 0uLL;
      uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFE0;
      int8x16_t v37 = 0uLL;
      do
      {
        int8x16_t v35 = vorrq_s8(v34[-1], v35);
        int8x16_t v37 = vorrq_s8(*v34, v37);
        v34 += 2;
        v36 -= 32;
      }
      while (v36);
      int8x16_t v38 = vorrq_s8(v37, v35);
      *(int8x8_t *)v38.i8 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
      unint64_t v39 = v38.i64[0] | HIDWORD(v38.i64[0]) | ((unint64_t)(v38.i64[0] | HIDWORD(v38.i64[0])) >> 16);
      int v33 = v39 | (v39 >> 8);
      if (v31 == v32) {
        goto LABEL_37;
      }
      if ((v31 & 0x18) == 0) {
        goto LABEL_35;
      }
    }
    else
    {
      LOBYTE(v33) = 0;
      uint64_t v32 = 0;
    }
    uint64_t v40 = v32;
    uint64_t v32 = v31 & 0x7FFFFFFFFFFFFFF8;
    int8x8_t v41 = (int8x8_t)v33;
    uint64_t v42 = (int8x8_t *)(v40 + v30 + 32);
    unint64_t v43 = v40 - (v31 & 0x7FFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v44 = *v42++;
      int8x8_t v41 = vorr_s8(v44, v41);
      v43 += 8;
    }
    while (v43);
    unint64_t v45 = *(void *)&v41 | HIDWORD(*(void *)&v41) | ((*(void *)&v41 | HIDWORD(*(void *)&v41)) >> 16);
    int v33 = v45 | (v45 >> 8);
    if (v31 == v32) {
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  int v33 = 0;
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v49 = v29 | v33;
  if (dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.trigger.getter())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.executor);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      os_log_type_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v53 = 0;
      _os_log_impl(&dword_1B9C64000, v51, v52, "PhoneAffinityScorer Found an unsupported UsoEntity_common_EventTrigger", v53, 2u);
      MEMORY[0x1BA9E48C0](v53, -1, -1);
    }

    swift_release();
    int v54 = 1;
  }
  else
  {
    int v54 = 0;
  }
  return v49 | v54;
}

uint64_t UsoTask.parseEntity(setting:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UsoIdentifier.NluComponent();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  v309 = (char *)&v281 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v345 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  uint64_t v7 = MEMORY[0x1F4188790](v345);
  uint64_t v311 = (uint64_t)&v281 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v281 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v281 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v308 = (uint64_t)&v281 - v16;
  MEMORY[0x1F4188790](v15);
  v325 = (void (**)(uint64_t, uint64_t))((char *)&v281 - v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v21 = (char *)&v281 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v322 = (uint64_t)&v281 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v334 = (uint64_t)&v281 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  unint64_t v28 = (char *)&v281 - v27;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v316 = (uint64_t)&v281 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v315 = (uint64_t)&v281 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v298 = (uint64_t)&v281 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v318 = (uint64_t)&v281 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v317 = (uint64_t)&v281 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v299 = (uint64_t)&v281 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  v320 = (void (**)(uint64_t, uint64_t))((char *)&v281 - v42);
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v319 = (uint64_t)&v281 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v297 = (uint64_t)&v281 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  v312 = (uint64_t *)((char *)&v281 - v48);
  MEMORY[0x1F4188790](v47);
  v326 = (uint64_t *)((char *)&v281 - v49);
  uint64_t v348 = type metadata accessor for IdentifierAppBundle();
  uint64_t v296 = *(void *)(v348 - 8);
  uint64_t v50 = MEMORY[0x1F4188790](v348);
  v347 = (char *)&v281 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v50);
  v346 = (char *)&v281 - v52;
  uint64_t v53 = type metadata accessor for UsoIdentifier();
  uint64_t v300 = *(void *)(v53 - 8);
  uint64_t v54 = MEMORY[0x1F4188790](v53);
  uint64_t v55 = MEMORY[0x1F4188790](v54);
  v333 = (char *)&v281 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  v336 = (char *)&v281 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v60 = MEMORY[0x1F4188790](v59);
  v328 = (char *)&v281 - v61;
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  MEMORY[0x1F4188790](v62);
  uint64_t v64 = MEMORY[0x1F4188790]((char *)&v281 - v63);
  v321 = (char *)&v281 - v65;
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  v330 = (char *)&v281 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  v329 = (char *)&v281 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  v338 = (char *)&v281 - v71;
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  uint64_t v343 = (uint64_t)&v281 - v73;
  uint64_t v74 = MEMORY[0x1F4188790](v72);
  v332 = (void (**)(char *, uint64_t))((char *)&v281 - v75);
  uint64_t v76 = MEMORY[0x1F4188790](v74);
  v331 = (char *)&v281 - v77;
  uint64_t v78 = MEMORY[0x1F4188790](v76);
  v339 = (char *)&v281 - v79;
  uint64_t v80 = MEMORY[0x1F4188790](v78);
  v341 = (char *)&v281 - v81;
  uint64_t v82 = MEMORY[0x1F4188790](v80);
  v295 = (void (**)(uint64_t, uint64_t))((char *)&v281 - v83);
  uint64_t v84 = MEMORY[0x1F4188790](v82);
  v324 = (void (**)(char *, uint64_t, uint64_t))((char *)&v281 - v85);
  uint64_t v86 = MEMORY[0x1F4188790](v84);
  v337 = (char *)&v281 - v87;
  uint64_t v88 = MEMORY[0x1F4188790](v86);
  uint64_t v93 = (char *)&v281 - v92;
  if (!a1) {
    return 0;
  }
  v314 = v14;
  uint64_t v335 = v88;
  v327 = v91;
  v289 = v28;
  uint64_t v344 = v90;
  uint64_t v323 = v89;
  swift_retain();
  uint64_t v94 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (v94) {
    uint64_t v95 = v94;
  }
  else {
    uint64_t v95 = MEMORY[0x1E4FBC860];
  }
  v349 = *(char **)(v95 + 16);
  if (!v349)
  {
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  v310 = v11;
  uint64_t v286 = v5;
  uint64_t v96 = v300;
  unint64_t v287 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
  uint64_t v98 = v300 + 16;
  unint64_t v97 = *(void (**)(void))(v300 + 16);
  unint64_t v301 = v95 + v287;
  v353 = (void (*)(uint64_t, unint64_t, uint64_t))v97;
  v97((void (**)(char *, uint64_t, uint64_t))v93);
  swift_retain();
  swift_bridgeObjectRetain();
  char v99 = specialized implicit closure #3 in implicit closure #2 in UsoTask.parseEntity(setting:)((uint64_t)v93);
  uint64_t v100 = *(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v96 + 8);
  uint64_t v351 = v96 + 8;
  v352 = v100;
  v100((void (**)(char *, uint64_t, uint64_t))v93, v53);
  uint64_t v302 = v2;
  uint64_t v342 = v4;
  v288 = v21;
  uint64_t v313 = v95;
  uint64_t v350 = v98;
  uint64_t v285 = a1;
  if (v99)
  {
    swift_release();
    swift_bridgeObjectRelease();
    unsigned int v307 = 2;
    BOOL v101 = v353;
    goto LABEL_32;
  }
  if (v349 == (char *)1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    unsigned int v307 = 0;
    BOOL v101 = v353;
    goto LABEL_32;
  }
  os_log_type_t v103 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v300 + 72);
  unsigned int v307 = *MEMORY[0x1E4FA3020];
  v306 = (const char *)(v296 + 104);
  v305 = (void (**)(char *, uint64_t))(v296 + 8);
  v294 = (void (**)(char *, uint64_t, uint64_t))(v286 + 104);
  v293 = (void (**)(void (**)(void, void, void), void, uint64_t, uint64_t))(v286 + 56);
  v292 = (const char *)(v286 + 48);
  v282 = (void (**)(char *, uint64_t, uint64_t))(v286 + 32);
  unsigned int v291 = *MEMORY[0x1E4FA2CC8];
  v284 = (void (**)(uint64_t, uint64_t))(v286 + 8);
  v304 = v103;
  unint64_t v104 = (unint64_t)v103 + v95 + v287;
  uint64_t v105 = 1;
  v290 = v93;
  v353((uint64_t)v93, v104, v53);
  while (1)
  {
    if (__OFADD__(v105, 1)) {
      goto LABEL_173;
    }
    v340 = (char *)(v105 + 1);
    int v108 = v346;
    UsoIdentifier.appBundleSemantic.getter();
    int v109 = v347;
    uint64_t v110 = v348;
    (*(void (**)(char *, void, uint64_t))v306)(v347, v307, v348);
    char v111 = MEMORY[0x1BA9DE8E0](v108, v109);
    int64_t v112 = *v305;
    uint64_t v113 = v109;
    unint64_t v114 = (void (*)(char *, char *, uint64_t))v353;
    (*v305)(v113, v110);
    v112(v108, v110);
    int64_t v115 = v114;
    unint64_t v116 = (void (**)(char *, uint64_t, uint64_t))v337;
    v115(v337, v93, v53);
    if ((v111 & 1) == 0)
    {
      uint64_t v106 = v352;
      v352(v116, v53);
      int64_t v107 = v324;
      v115((char *)v324, v93, v53);
      goto LABEL_14;
    }
    uint64_t v117 = v326;
    UsoIdentifier.sourceComponent.getter();
    uint64_t v118 = (void (**)(void, void, void))v312;
    uint64_t v119 = v342;
    (*v294)((char *)v312, v291, v342);
    (*v293)(v118, 0, 1, v119);
    unint64_t v120 = v325;
    uint64_t v121 = (uint64_t)v325 + *(int *)(v345 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v117, (uint64_t)v325, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v118, v121, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    long long v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v292;
    if ((*(unsigned int (**)(void (**)(uint64_t, uint64_t), uint64_t, uint64_t))v292)(v120, 1, v119) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v118, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v326, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      uint64_t v106 = v352;
      v352((void (**)(char *, uint64_t, uint64_t))v337, v53);
      int v123 = v122(v121, 1, v119);
      uint64_t v93 = v290;
      if (v123 != 1) {
        goto LABEL_24;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v325, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      int64_t v107 = v324;
      int64_t v115 = (void (*)(char *, char *, uint64_t))v353;
      v353((uint64_t)v324, (unint64_t)v93, v53);
      goto LABEL_26;
    }
    uint64_t v124 = v297;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v120, v297, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    if (v122(v121, 1, v119) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v312, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v326, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      uint64_t v106 = v352;
      v352((void (**)(char *, uint64_t, uint64_t))v337, v53);
      (*v284)(v124, v119);
      uint64_t v93 = v290;
LABEL_24:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v325, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      int64_t v107 = v324;
      int64_t v115 = (void (*)(char *, char *, uint64_t))v353;
      v353((uint64_t)v324, (unint64_t)v93, v53);
LABEL_14:
      v106(v107, v53);
      v106((void (**)(char *, uint64_t, uint64_t))v93, v53);
      goto LABEL_15;
    }
    uint64_t v125 = v309;
    (*v282)(v309, v121, v119);
    lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, MEMORY[0x1E4FA2CD8]);
    int v283 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v126 = *v284;
    (*v284)((uint64_t)v125, v119);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v312, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v326, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    unint64_t v127 = v352;
    v352((void (**)(char *, uint64_t, uint64_t))v337, v53);
    v126(v124, v119);
    uint64_t v106 = v127;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v325, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    int64_t v107 = v324;
    uint64_t v93 = v290;
    int64_t v115 = (void (*)(char *, char *, uint64_t))v353;
    v353((uint64_t)v324, (unint64_t)v290, v53);
    if ((v283 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_26:
    uint64_t v128 = UsoIdentifier.namespace.getter();
    if (!v129) {
      goto LABEL_14;
    }
    if (v128 == 0x746553656E6F6870 && v129 == 0xEC000000676E6974) {
      break;
    }
    char v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v106(v107, v53);
    swift_bridgeObjectRelease();
    v106((void (**)(char *, uint64_t, uint64_t))v93, v53);
    int64_t v115 = (void (*)(char *, char *, uint64_t))v353;
    if (v130) {
      goto LABEL_165;
    }
LABEL_15:
    ++v105;
    v104 += (unint64_t)v304;
    if (v340 == v349)
    {
      BOOL v101 = (void (*)(uint64_t, unint64_t, uint64_t))v115;
      swift_release();
      swift_bridgeObjectRelease();
      unsigned int v307 = 0;
      goto LABEL_32;
    }
    v115(v93, (char *)v104, v53);
  }
  v106(v107, v53);
  swift_bridgeObjectRelease();
  v106((void (**)(char *, uint64_t, uint64_t))v93, v53);
  int64_t v115 = (void (*)(char *, char *, uint64_t))v353;
LABEL_165:
  BOOL v101 = (void (*)(uint64_t, unint64_t, uint64_t))v115;
  swift_release();
  swift_bridgeObjectRelease();
  unsigned int v307 = 2;
LABEL_32:
  uint64_t v131 = (uint64_t)v295;
  uint64_t v132 = v101;
  v101((uint64_t)v295, v301, v53);
  swift_retain();
  swift_bridgeObjectRetain();
  char v133 = specialized UsoTask.generalVolumeFilter(_:)(v131);
  v352((void (**)(char *, uint64_t, uint64_t))v131, v53);
  if (v133)
  {
LABEL_33:
    swift_release();
    swift_bridgeObjectRelease();
    v307 |= 4u;
  }
  else
  {
    if (v349 != (char *)1)
    {
      uint64_t v134 = *(void *)(v300 + 72);
      unint64_t v135 = v313 + v134 + v287;
      uint64_t v136 = 1;
      do
      {
        v132(v131, v135, v53);
        uint64_t v137 = v136 + 1;
        if (__OFADD__(v136, 1)) {
          goto LABEL_174;
        }
        char v138 = specialized UsoTask.generalVolumeFilter(_:)(v131);
        v352((void (**)(char *, uint64_t, uint64_t))v131, v53);
        if (v138) {
          goto LABEL_33;
        }
        ++v136;
        v135 += v134;
      }
      while ((char *)v137 != v349);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v139 = (uint64_t)v341;
  char v140 = v353;
  v353((uint64_t)v341, v301, v53);
  swift_retain();
  id v141 = v140;
  swift_bridgeObjectRetain();
  char v142 = specialized UsoTask.siriVolumeFilter(_:)(v139);
  os_log_type_t v143 = v352;
  v352((void (**)(char *, uint64_t, uint64_t))v139, v53);
  uint64_t v144 = v143;
  if (v142) {
    goto LABEL_41;
  }
  if (v349 == (char *)1)
  {
LABEL_43:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  v337 = (char *)(v296 + 104);
  v326 = (void *)(v296 + 8);
  uint64_t v158 = *(void (***)(char *, uint64_t, uint64_t))(v300 + 72);
  v306 = (const char *)(v286 + 104);
  v305 = (void (**)(char *, uint64_t))(v286 + 56);
  LODWORD(v325) = *MEMORY[0x1E4FA3020];
  LODWORD(v297) = *MEMORY[0x1E4FA2CC8];
  v294 = (void (**)(char *, uint64_t, uint64_t))(v286 + 32);
  v295 = (void (**)(uint64_t, uint64_t))(v286 + 8);
  v324 = v158;
  unint64_t v159 = (unint64_t)v158 + v287 + v313;
  uint64_t v160 = 1;
  v292 = "environmentPlaceName";
  v293 = (void (**)(void (**)(void, void, void), void, uint64_t, uint64_t))0x80000001BA05EF30;
  v304 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v286 + 48);
  while (2)
  {
    v141(v139, v159, v53);
    if (__OFADD__(v160, 1)) {
      goto LABEL_170;
    }
    v340 = (char *)(v160 + 1);
    uint64_t v161 = v346;
    UsoIdentifier.appBundleSemantic.getter();
    uint64_t v162 = v347;
    uint64_t v163 = v348;
    (*(void (**)(char *, void, uint64_t))v337)(v347, v325, v348);
    char v164 = MEMORY[0x1BA9DE8E0](v161, v162);
    os_log_type_t v165 = (void (*)(char *, uint64_t))*v326;
    ((void (*)(char *, uint64_t))*v326)(v162, v163);
    uint64_t v166 = v163;
    uint64_t v139 = (uint64_t)v341;
    v165(v161, v166);
    uint64_t v167 = (void (**)(char *, uint64_t, uint64_t))v339;
    v353((uint64_t)v339, v139, v53);
    if ((v164 & 1) == 0)
    {
      v352(v167, v53);
      uint64_t v176 = v332;
      unint64_t v177 = (void (**)(char *, uint64_t, uint64_t))v331;
      goto LABEL_74;
    }
    v312 = (void *)v160;
    uint64_t v168 = v319;
    UsoIdentifier.sourceComponent.getter();
    uint64_t v169 = v168;
    uint64_t v170 = v320;
    uint64_t v171 = v342;
    (*(void (**)(void (**)(uint64_t, uint64_t), void, uint64_t))v306)(v320, v297, v342);
    ((void (*)(void (**)(uint64_t, uint64_t), void, uint64_t, uint64_t))*v305)(v170, 0, 1, v171);
    uint64_t v172 = v308;
    uint64_t v173 = v308 + *(int *)(v345 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol?(v168, v308, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v170, v173, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    uint64_t v174 = *v304;
    if ((*v304)(v172, 1, v171) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v170, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v169, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v352((void (**)(char *, uint64_t, uint64_t))v339, v53);
      unsigned int v175 = v174(v173, 1, v171);
      uint64_t v176 = v332;
      if (v175 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v172, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        unint64_t v177 = (void (**)(char *, uint64_t, uint64_t))v331;
        uint64_t v139 = (uint64_t)v341;
        uint64_t v178 = (void (*)(void (**)(char *, uint64_t), uint64_t, uint64_t))v353;
        v353((uint64_t)v331, (unint64_t)v341, v53);
        uint64_t v160 = (uint64_t)v312;
        goto LABEL_80;
      }
LABEL_73:
      outlined destroy of ReferenceResolutionClientProtocol?(v172, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      unint64_t v177 = (void (**)(char *, uint64_t, uint64_t))v331;
      uint64_t v139 = (uint64_t)v341;
      uint64_t v160 = (uint64_t)v312;
LABEL_74:
      uint64_t v178 = (void (*)(void (**)(char *, uint64_t), uint64_t, uint64_t))v353;
      v353((uint64_t)v177, v139, v53);
LABEL_75:
      uint64_t v144 = v352;
      v352(v177, v53);
      v178(v176, v139, v53);
LABEL_76:
      v144((void (**)(char *, uint64_t, uint64_t))v176, v53);
      v144((void (**)(char *, uint64_t, uint64_t))v139, v53);
      id v141 = v353;
LABEL_77:
      ++v160;
      v159 += (unint64_t)v324;
      if (v340 == v349) {
        goto LABEL_43;
      }
      continue;
    }
    break;
  }
  uint64_t v179 = v299;
  outlined init with copy of ReferenceResolutionClientProtocol?(v172, v299, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  unsigned int v180 = v174(v173, 1, v171);
  uint64_t v176 = v332;
  if (v180 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v320, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?(v319, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v352((void (**)(char *, uint64_t, uint64_t))v339, v53);
    (*v295)(v179, v171);
    goto LABEL_73;
  }
  os_log_t v181 = v309;
  (*v294)(v309, v173, v171);
  lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, MEMORY[0x1E4FA2CD8]);
  char v182 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v183 = *v295;
  (*v295)((uint64_t)v181, v171);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v320, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of ReferenceResolutionClientProtocol?(v319, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v352((void (**)(char *, uint64_t, uint64_t))v339, v53);
  v183(v179, v171);
  outlined destroy of ReferenceResolutionClientProtocol?(v308, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  unint64_t v177 = (void (**)(char *, uint64_t, uint64_t))v331;
  uint64_t v139 = (uint64_t)v341;
  uint64_t v178 = (void (*)(void (**)(char *, uint64_t), uint64_t, uint64_t))v353;
  v353((uint64_t)v331, (unint64_t)v341, v53);
  uint64_t v160 = (uint64_t)v312;
  if ((v182 & 1) == 0) {
    goto LABEL_75;
  }
LABEL_80:
  uint64_t v184 = UsoIdentifier.namespace.getter();
  if (!v185) {
    goto LABEL_75;
  }
  if (v184 == 0xD000000000000010 && v185 == v293)
  {
    uint64_t v144 = v352;
    v352(v177, v53);
    swift_bridgeObjectRelease();
    v353((uint64_t)v176, v139, v53);
  }
  else
  {
    char v186 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v144 = v352;
    v352(v177, v53);
    swift_bridgeObjectRelease();
    v353((uint64_t)v176, v139, v53);
    if ((v186 & 1) == 0) {
      goto LABEL_76;
    }
  }
  if (UsoIdentifier.value.getter() != 0x6563696F76 || v187 != 0xE500000000000000)
  {
    char v188 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v144((void (**)(char *, uint64_t, uint64_t))v176, v53);
    v144((void (**)(char *, uint64_t, uint64_t))v139, v53);
    id v141 = v353;
    if (v188) {
      goto LABEL_41;
    }
    goto LABEL_77;
  }
  swift_bridgeObjectRelease();
  v144((void (**)(char *, uint64_t, uint64_t))v176, v53);
  v144((void (**)(char *, uint64_t, uint64_t))v139, v53);
LABEL_41:
  swift_release();
  swift_bridgeObjectRelease();
  v307 |= 0x20u;
LABEL_44:
  uint64_t v145 = v343;
  v353(v343, v301, v53);
  swift_retain();
  swift_bridgeObjectRetain();
  char v146 = specialized UsoTask.mediaVolumeFilter(_:)(v145);
  v144((void (**)(char *, uint64_t, uint64_t))v145, v53);
  if (v146) {
    goto LABEL_45;
  }
  if (v349 == (char *)1)
  {
LABEL_47:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  v189 = *(void (***)(char *, uint64_t))(v300 + 72);
  v339 = (char *)(v296 + 8);
  v340 = (char *)(v296 + 104);
  v331 = (char *)(v286 + 104);
  LODWORD(v337) = *MEMORY[0x1E4FA3020];
  v326 = (void *)(v286 + 56);
  LODWORD(v325) = *MEMORY[0x1E4FA2CC8];
  v312 = (void *)(v286 + 32);
  v320 = (void (**)(uint64_t, uint64_t))(v286 + 8);
  v332 = v189;
  unint64_t v190 = (unint64_t)v189 + v287 + v313;
  uint64_t v191 = 1;
  v306 = "environmentPlaceName";
  uint64_t v308 = 0x80000001BA05EF30;
  v324 = (void (**)(char *, uint64_t, uint64_t))(v286 + 48);
  while (2)
  {
    uint64_t v192 = v343;
    v353(v343, v190, v53);
    if (__OFADD__(v191, 1)) {
      goto LABEL_171;
    }
    v341 = (char *)(v191 + 1);
    v193 = v346;
    UsoIdentifier.appBundleSemantic.getter();
    v194 = v347;
    uint64_t v195 = v348;
    (*(void (**)(char *, void, uint64_t))v340)(v347, v337, v348);
    char v196 = MEMORY[0x1BA9DE8E0](v193, v194);
    v197 = *(void (**)(char *, uint64_t))v339;
    (*(void (**)(char *, uint64_t))v339)(v194, v195);
    v197(v193, v195);
    v198 = (void (**)(char *, uint64_t, uint64_t))v338;
    v353((uint64_t)v338, v192, v53);
    if ((v196 & 1) == 0)
    {
      v352(v198, v53);
      goto LABEL_99;
    }
    uint64_t v199 = v317;
    UsoIdentifier.sourceComponent.getter();
    uint64_t v200 = v318;
    uint64_t v201 = v342;
    (*(void (**)(uint64_t, void, uint64_t))v331)(v318, v325, v342);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))*v326)(v200, 0, 1, v201);
    uint64_t v202 = (uint64_t)v314;
    uint64_t v203 = (uint64_t)&v314[*(int *)(v345 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?(v199, (uint64_t)v314, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v200, v203, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v204 = *v324;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v324)(v202, 1, v201) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v200, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v199, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v352((void (**)(char *, uint64_t, uint64_t))v338, v53);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v204)(v203, 1, v201) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v314, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v205 = (void (**)(char *, uint64_t, uint64_t))v329;
        uint64_t v206 = v343;
        v207 = (void (*)(char *, uint64_t, uint64_t))v353;
        v353((uint64_t)v329, v343, v53);
        v208 = v330;
        goto LABEL_105;
      }
LABEL_98:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v314, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
LABEL_99:
      v208 = v330;
      v205 = (void (**)(char *, uint64_t, uint64_t))v329;
      uint64_t v206 = v343;
      v207 = (void (*)(char *, uint64_t, uint64_t))v353;
      v353((uint64_t)v329, v343, v53);
LABEL_100:
      uint64_t v144 = v352;
      v352(v205, v53);
      v207(v208, v206, v53);
LABEL_101:
      v144((void (**)(char *, uint64_t, uint64_t))v208, v53);
      v144((void (**)(char *, uint64_t, uint64_t))v206, v53);
LABEL_102:
      ++v191;
      v190 += (unint64_t)v332;
      if (v341 == v349) {
        goto LABEL_47;
      }
      continue;
    }
    break;
  }
  uint64_t v209 = v298;
  outlined init with copy of ReferenceResolutionClientProtocol?(v202, v298, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v204)(v203, 1, v201) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v318, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?(v317, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v352((void (**)(char *, uint64_t, uint64_t))v338, v53);
    (*v320)(v209, v201);
    goto LABEL_98;
  }
  uint64_t v210 = v209;
  v211 = v309;
  ((void (*)(char *, uint64_t, uint64_t))*v312)(v309, v203, v201);
  lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, MEMORY[0x1E4FA2CD8]);
  uint64_t v212 = v210;
  LODWORD(v319) = dispatch thunk of static Equatable.== infix(_:_:)();
  v213 = *v320;
  (*v320)((uint64_t)v211, v201);
  outlined destroy of ReferenceResolutionClientProtocol?(v318, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of ReferenceResolutionClientProtocol?(v317, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v352((void (**)(char *, uint64_t, uint64_t))v338, v53);
  v213(v212, v201);
  outlined destroy of ReferenceResolutionClientProtocol?(v202, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v205 = (void (**)(char *, uint64_t, uint64_t))v329;
  uint64_t v206 = v343;
  v207 = (void (*)(char *, uint64_t, uint64_t))v353;
  v353((uint64_t)v329, v343, v53);
  v208 = v330;
  if ((v319 & 1) == 0) {
    goto LABEL_100;
  }
LABEL_105:
  uint64_t v214 = UsoIdentifier.namespace.getter();
  if (!v215) {
    goto LABEL_100;
  }
  if (v214 == 0xD000000000000010 && v215 == v308)
  {
    uint64_t v144 = v352;
    v352(v205, v53);
    swift_bridgeObjectRelease();
    v353((uint64_t)v208, v343, v53);
  }
  else
  {
    char v216 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v144 = v352;
    v352(v205, v53);
    swift_bridgeObjectRelease();
    uint64_t v206 = v343;
    v353((uint64_t)v208, v343, v53);
    if ((v216 & 1) == 0) {
      goto LABEL_101;
    }
  }
  if (UsoIdentifier.value.getter() != 0x707954616964656DLL || v217 != 0xE900000000000065)
  {
    char v218 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v144((void (**)(char *, uint64_t, uint64_t))v208, v53);
    v144((void (**)(char *, uint64_t, uint64_t))v343, v53);
    if (v218) {
      goto LABEL_45;
    }
    goto LABEL_102;
  }
  swift_bridgeObjectRelease();
  v144((void (**)(char *, uint64_t, uint64_t))v208, v53);
  v144((void (**)(char *, uint64_t, uint64_t))v343, v53);
LABEL_45:
  swift_release();
  swift_bridgeObjectRelease();
  v307 |= 0x10u;
LABEL_48:
  uint64_t v147 = (uint64_t)v321;
  unint64_t v148 = (void (*)(uint64_t, char *, uint64_t))v353;
  v353((uint64_t)v321, v301, v53);
  swift_retain();
  swift_bridgeObjectRetain();
  char v149 = specialized UsoTask.callVolumeFilter(_:)(v147);
  v144((void (**)(char *, uint64_t, uint64_t))v147, v53);
  if (v149) {
    goto LABEL_49;
  }
  if (v349 == (char *)1)
  {
LABEL_51:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  v219 = *(char **)(v300 + 72);
  LODWORD(v338) = *MEMORY[0x1E4FA3020];
  v337 = (char *)(v296 + 104);
  v332 = (void (**)(char *, uint64_t))(v296 + 8);
  v330 = (char *)(v286 + 104);
  v329 = (char *)(v286 + 56);
  LODWORD(v326) = *MEMORY[0x1E4FA2CC8];
  v339 = (char *)(v286 + 48);
  v324 = (void (**)(char *, uint64_t, uint64_t))(v286 + 32);
  v325 = (void (**)(uint64_t, uint64_t))(v286 + 8);
  v331 = v219;
  v220 = &v219[v287 + v313];
  uint64_t v221 = 1;
  while (2)
  {
    v148(v147, v220, v53);
    if (__OFADD__(v221, 1)) {
      goto LABEL_172;
    }
    v340 = (char *)(v221 + 1);
    v341 = (char *)v221;
    uint64_t v343 = (uint64_t)v220;
    v222 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v339;
    v223 = v346;
    UsoIdentifier.appBundleSemantic.getter();
    v224 = v347;
    uint64_t v225 = v348;
    (*(void (**)(char *, void, uint64_t))v337)(v347, v338, v348);
    char v226 = MEMORY[0x1BA9DE8E0](v223, v224);
    v227 = *v332;
    unint64_t v148 = (void (*)(uint64_t, char *, uint64_t))v353;
    (*v332)(v224, v225);
    v227(v223, v225);
    uint64_t v228 = v335;
    v148(v335, (char *)v147, v53);
    if ((v226 & 1) == 0)
    {
      v352((void (**)(char *, uint64_t, uint64_t))v228, v53);
      v236 = v328;
      goto LABEL_124;
    }
    uint64_t v229 = v315;
    UsoIdentifier.sourceComponent.getter();
    uint64_t v230 = v316;
    uint64_t v231 = v342;
    (*(void (**)(uint64_t, void, uint64_t))v330)(v316, v326, v342);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))v329)(v230, 0, 1, v231);
    uint64_t v232 = (uint64_t)v310;
    uint64_t v233 = (uint64_t)&v310[*(int *)(v345 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?(v229, (uint64_t)v310, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v230, v233, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v234 = *v222;
    if ((*v222)(v232, 1, v231) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v230, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v229, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v352((void (**)(char *, uint64_t, uint64_t))v228, v53);
      unsigned int v235 = v234(v233, 1, v231);
      v236 = v328;
      if (v235 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v310, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v237 = v327;
        uint64_t v147 = (uint64_t)v321;
        unint64_t v148 = (void (*)(uint64_t, char *, uint64_t))v353;
        v353((uint64_t)v327, (unint64_t)v321, v53);
        goto LABEL_130;
      }
LABEL_123:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v310, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      uint64_t v147 = (uint64_t)v321;
      unint64_t v148 = (void (*)(uint64_t, char *, uint64_t))v353;
LABEL_124:
      v237 = v327;
      v148((uint64_t)v327, (char *)v147, v53);
LABEL_125:
      uint64_t v144 = v352;
      v352(v237, v53);
      v148((uint64_t)v236, (char *)v147, v53);
LABEL_126:
      v144((void (**)(char *, uint64_t, uint64_t))v236, v53);
      v144((void (**)(char *, uint64_t, uint64_t))v147, v53);
LABEL_127:
      uint64_t v221 = (uint64_t)(v341 + 1);
      v220 = &v331[v343];
      if (v340 == v349) {
        goto LABEL_51;
      }
      continue;
    }
    break;
  }
  uint64_t v238 = (uint64_t)v289;
  outlined init with copy of ReferenceResolutionClientProtocol?(v232, (uint64_t)v289, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  if (v234(v233, 1, v231) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v316, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?(v315, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v352((void (**)(char *, uint64_t, uint64_t))v335, v53);
    (*v325)(v238, v231);
    v236 = v328;
    goto LABEL_123;
  }
  v239 = v309;
  (*v324)(v309, v233, v231);
  lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, MEMORY[0x1E4FA2CD8]);
  char v240 = dispatch thunk of static Equatable.== infix(_:_:)();
  v241 = *v325;
  (*v325)((uint64_t)v239, v231);
  outlined destroy of ReferenceResolutionClientProtocol?(v316, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of ReferenceResolutionClientProtocol?(v315, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v352((void (**)(char *, uint64_t, uint64_t))v335, v53);
  v241(v238, v231);
  outlined destroy of ReferenceResolutionClientProtocol?(v232, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v237 = v327;
  uint64_t v147 = (uint64_t)v321;
  unint64_t v148 = (void (*)(uint64_t, char *, uint64_t))v353;
  v353((uint64_t)v327, (unint64_t)v321, v53);
  v236 = v328;
  if ((v240 & 1) == 0) {
    goto LABEL_125;
  }
LABEL_130:
  uint64_t v242 = UsoIdentifier.namespace.getter();
  if (!v243) {
    goto LABEL_125;
  }
  if (v242 == 0x746553656E6F6870 && v243 == 0xEC000000676E6974)
  {
    uint64_t v144 = v352;
    v352(v327, v53);
    swift_bridgeObjectRelease();
    uint64_t v147 = (uint64_t)v321;
    unint64_t v148 = (void (*)(uint64_t, char *, uint64_t))v353;
    v353((uint64_t)v236, (unint64_t)v321, v53);
  }
  else
  {
    char v244 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v144 = v352;
    v352(v327, v53);
    swift_bridgeObjectRelease();
    uint64_t v147 = (uint64_t)v321;
    unint64_t v148 = (void (*)(uint64_t, char *, uint64_t))v353;
    v353((uint64_t)v236, (unint64_t)v321, v53);
    if ((v244 & 1) == 0) {
      goto LABEL_126;
    }
  }
  if (UsoIdentifier.value.getter() != 0x6C6F765F6C6C6163 || v245 != 0xEB00000000656D75)
  {
    char v246 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v144((void (**)(char *, uint64_t, uint64_t))v236, v53);
    v144((void (**)(char *, uint64_t, uint64_t))v147, v53);
    if (v246) {
      goto LABEL_49;
    }
    goto LABEL_127;
  }
  swift_bridgeObjectRelease();
  v144((void (**)(char *, uint64_t, uint64_t))v236, v53);
  v144((void (**)(char *, uint64_t, uint64_t))v147, v53);
LABEL_49:
  swift_release();
  swift_bridgeObjectRelease();
  v307 |= 8u;
LABEL_52:
  uint64_t v150 = v344;
  v353(v344, v301, v53);
  swift_retain();
  swift_bridgeObjectRetain();
  char v151 = specialized UsoTask.supportedBooleanNamespaceValuesFilter(_:)(v150);
  v144((void (**)(char *, uint64_t, uint64_t))v150, v53);
  if (v151)
  {
LABEL_53:
    swift_release();
    swift_bridgeObjectRelease_n();
    uint64_t v102 = v307 | 0x40;
LABEL_56:
    swift_release();
    return v102;
  }
  if (v349 != (char *)1)
  {
    v338 = (char *)(v296 + 8);
    v339 = (char *)(v296 + 104);
    uint64_t v247 = *(void *)(v300 + 72);
    v332 = (void (**)(char *, uint64_t))(v286 + 104);
    v331 = (char *)(v286 + 56);
    LODWORD(v337) = *MEMORY[0x1E4FA3020];
    v330 = (char *)(v286 + 48);
    v327 = (void (**)(char *, uint64_t, uint64_t))(v286 + 32);
    LODWORD(v329) = *MEMORY[0x1E4FA2CC8];
    v328 = (char *)(v286 + 8);
    uint64_t v335 = v247;
    v248 = (char *)(v313 + v247 + v287);
    uint64_t v249 = 1;
    uint64_t v303 = v53;
    while (1)
    {
      uint64_t v250 = v344;
      v251 = (void (*)(char *, uint64_t, uint64_t))v353;
      v353(v344, (unint64_t)v248, v53);
      if (__OFADD__(v249, 1))
      {
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        swift_once();
LABEL_60:
        uint64_t v153 = type metadata accessor for Logger();
        __swift_project_value_buffer(v153, (uint64_t)static Logger.executor);
        uint64_t v154 = Logger.logObject.getter();
        os_log_type_t v155 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v154, v155))
        {
          uint64_t v156 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v156 = 0;
          _os_log_impl(&dword_1B9C64000, v154, v155, "PhoneAffinityScorer Found an unsupported UsoEntity_common_Setting", v156, 2u);
          MEMORY[0x1BA9E48C0](v156, -1, -1);
        }
        swift_release();

        return 1;
      }
      v340 = (char *)(v249 + 1);
      v341 = v248;
      uint64_t v343 = v249;
      v252 = v346;
      uint64_t v253 = v250;
      UsoIdentifier.appBundleSemantic.getter();
      v254 = v347;
      uint64_t v255 = v348;
      (*(void (**)(char *, void, uint64_t))v339)(v347, v337, v348);
      char v256 = MEMORY[0x1BA9DE8E0](v252, v254);
      v257 = *(void (**)(char *, uint64_t))v338;
      (*(void (**)(char *, uint64_t))v338)(v254, v255);
      v257(v252, v255);
      v258 = v336;
      v251(v336, v253, v53);
      if ((v256 & 1) == 0) {
        break;
      }
      v259 = (void (**)(char *, uint64_t, uint64_t))v258;
      uint64_t v260 = v334;
      UsoIdentifier.sourceComponent.getter();
      uint64_t v261 = v322;
      uint64_t v262 = v342;
      ((void (*)(uint64_t, void, uint64_t))*v332)(v322, v329, v342);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))v331)(v261, 0, 1, v262);
      uint64_t v263 = v311;
      uint64_t v264 = v311 + *(int *)(v345 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?(v260, v311, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v261, v264, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v265 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v330;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v330)(v263, 1, v262) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v261, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        outlined destroy of ReferenceResolutionClientProtocol?(v334, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v352(v259, v303);
        if (v265(v264, 1, v262) != 1) {
          goto LABEL_148;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v263, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v266 = (void (**)(char *, uint64_t, uint64_t))v333;
        uint64_t v267 = v344;
        uint64_t v53 = v303;
        v268 = (void (*)(uint64_t, uint64_t, uint64_t))v353;
        v353((uint64_t)v333, v344, v303);
      }
      else
      {
        uint64_t v269 = (uint64_t)v288;
        outlined init with copy of ReferenceResolutionClientProtocol?(v263, (uint64_t)v288, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        if (v265(v264, 1, v262) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v322, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          outlined destroy of ReferenceResolutionClientProtocol?(v334, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          v352((void (**)(char *, uint64_t, uint64_t))v336, v303);
          (*(void (**)(uint64_t, uint64_t))v328)(v269, v262);
LABEL_148:
          outlined destroy of ReferenceResolutionClientProtocol?(v263, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
          v266 = (void (**)(char *, uint64_t, uint64_t))v333;
          uint64_t v267 = v344;
          uint64_t v53 = v303;
LABEL_149:
          v268 = (void (*)(uint64_t, uint64_t, uint64_t))v353;
          v353((uint64_t)v266, v267, v53);
LABEL_150:
          v270 = (void (*)(uint64_t, uint64_t))v352;
          v352(v266, v53);
          uint64_t v271 = v323;
          v268(v323, v267, v53);
LABEL_151:
          v270(v271, v53);
          v270(v267, v53);
          goto LABEL_152;
        }
        v272 = v309;
        (*v327)(v309, v264, v262);
        lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, MEMORY[0x1E4FA2CD8]);
        char v273 = dispatch thunk of static Equatable.== infix(_:_:)();
        v274 = *(void (**)(uint64_t, uint64_t))v328;
        (*(void (**)(char *, uint64_t))v328)(v272, v262);
        outlined destroy of ReferenceResolutionClientProtocol?(v322, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        outlined destroy of ReferenceResolutionClientProtocol?(v334, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        uint64_t v53 = v303;
        v352((void (**)(char *, uint64_t, uint64_t))v336, v303);
        v274(v269, v262);
        outlined destroy of ReferenceResolutionClientProtocol?(v311, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v266 = (void (**)(char *, uint64_t, uint64_t))v333;
        uint64_t v267 = v344;
        v268 = (void (*)(uint64_t, uint64_t, uint64_t))v353;
        v353((uint64_t)v333, v344, v53);
        if ((v273 & 1) == 0) {
          goto LABEL_150;
        }
      }
      uint64_t v275 = UsoIdentifier.namespace.getter();
      if (!v276) {
        goto LABEL_150;
      }
      if (v275 == 0x747465536C6F6F62 && v276 == 0xEF656D614E676E69)
      {
        v270 = (void (*)(uint64_t, uint64_t))v352;
        v352(v266, v53);
        swift_bridgeObjectRelease();
        uint64_t v271 = v323;
        v353(v323, v344, v53);
      }
      else
      {
        char v277 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v270 = (void (*)(uint64_t, uint64_t))v352;
        v352(v266, v53);
        swift_bridgeObjectRelease();
        uint64_t v271 = v323;
        uint64_t v267 = v344;
        v353(v323, v344, v53);
        if ((v277 & 1) == 0) {
          goto LABEL_151;
        }
      }
      if (one-time initialization token for kSupportedBooleanNamespaceValues != -1) {
        swift_once();
      }
      uint64_t v278 = static UsoTask.kSupportedBooleanNamespaceValues;
      uint64_t v279 = UsoIdentifier.value.getter();
      LOBYTE(v278) = specialized Set.contains(_:)(v279, v280, v278);
      swift_bridgeObjectRelease();
      v270(v271, v53);
      v270(v344, v53);
      if (v278) {
        goto LABEL_53;
      }
LABEL_152:
      uint64_t v249 = v343 + 1;
      v248 = &v341[v335];
      if (v340 == v349) {
        goto LABEL_55;
      }
    }
    v352((void (**)(char *, uint64_t, uint64_t))v258, v53);
    v266 = (void (**)(char *, uint64_t, uint64_t))v333;
    uint64_t v267 = v344;
    goto LABEL_149;
  }
LABEL_55:
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v102 = v307;
  if (v307) {
    goto LABEL_56;
  }
LABEL_57:
  uint64_t v152 = dispatch thunk of UsoEntity_common_Setting.value.getter();
  swift_release();
  if (!v152)
  {
    if (one-time initialization token for executor != -1) {
      goto LABEL_175;
    }
    goto LABEL_60;
  }
  swift_release();
  return 0;
}

uint64_t UsoTask.parseEntity(userEntity:)()
{
  uint64_t v152 = type metadata accessor for UsoIdentifier.NluComponent();
  uint64_t v0 = *(void *)(v152 - 8);
  MEMORY[0x1F4188790](v152);
  uint64_t v137 = (char *)&v126 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  uint64_t v2 = MEMORY[0x1F4188790](v151);
  uint64_t v149 = (uint64_t)&v126 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v158 = (uint64_t)&v126 - v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v147 = (uint64_t)&v126 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v146 = (uint64_t)&v126 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v138 = (uint64_t)&v126 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v150 = (void (**)(uint64_t, uint64_t))((char *)&v126 - v16);
  MEMORY[0x1F4188790](v15);
  unint64_t v159 = (void (**)(char *, uint64_t))((char *)&v126 - v17);
  uint64_t v164 = type metadata accessor for IdentifierAppBundle();
  uint64_t v135 = *(void *)(v164 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v164);
  uint64_t v163 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v162 = (char *)&v126 - v20;
  uint64_t v21 = type metadata accessor for UsoIdentifier();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  unint64_t v28 = (char *)&v126 - v27;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v153 = (char *)&v126 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v126 - v32;
  uint64_t v34 = MEMORY[0x1F4188790](v31);
  uint64_t v36 = (char *)&v126 - v35;
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v160 = (char *)&v126 - v38;
  MEMORY[0x1F4188790](v37);
  uint64_t v40 = (char *)&v126 - v39;
  uint64_t v41 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v41) {
    uint64_t v41 = MEMORY[0x1E4FBC860];
  }
  os_log_type_t v165 = *(char **)(v41 + 16);
  if (!v165)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  uint64_t v129 = v0;
  unint64_t v148 = v28;
  unint64_t v128 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
  uint64_t v43 = v41;
  unint64_t v130 = v41 + v128;
  uint64_t v171 = v42;
  ((void (*)(char *))v42)(v40);
  swift_retain();
  swift_bridgeObjectRetain();
  char v44 = specialized implicit closure #3 in implicit closure #2 in UsoTask.parseEntity(setting:)((uint64_t)v40);
  uint64_t v132 = v22;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v161 = v40;
  uint64_t v169 = v45;
  uint64_t v170 = v22 + 8;
  v45(v40, v21);
  if (v44) {
    goto LABEL_5;
  }
  uint64_t v133 = v43;
  unint64_t v127 = v8;
  uint64_t v145 = v25;
  uint64_t v168 = v22 + 16;
  if (v165 == (char *)1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v47 = v169;
LABEL_30:
    uint64_t v85 = v132;
    v171(v33, v130, v21);
    swift_retain();
    swift_bridgeObjectRetain();
    char v86 = specialized UsoTask.answerProductFilter(_:)((uint64_t)v33);
    v47(v33, v21);
    if (v86)
    {
LABEL_31:
      swift_release();
      swift_bridgeObjectRelease_n();
      return 0;
    }
    if (v165 == (char *)1)
    {
LABEL_33:
      swift_release();
      swift_bridgeObjectRelease_n();
LABEL_34:
      if (one-time initialization token for executor == -1)
      {
LABEL_35:
        uint64_t v87 = type metadata accessor for Logger();
        __swift_project_value_buffer(v87, (uint64_t)static Logger.executor);
        uint64_t v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v90 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v90 = 0;
          _os_log_impl(&dword_1B9C64000, v88, v89, "PhoneAffinityScorer Found an unsupported UsoEntity_common_UserEntity", v90, 2u);
          MEMORY[0x1BA9E48C0](v90, -1, -1);
        }

        return 1;
      }
LABEL_66:
      swift_once();
      goto LABEL_35;
    }
    unint64_t v159 = (void (**)(char *, uint64_t))(v135 + 8);
    uint64_t v160 = (char *)(v135 + 104);
    uint64_t v91 = *(void *)(v85 + 72);
    os_log_type_t v155 = (void (**)(char *, uint64_t))(v129 + 56);
    uint64_t v156 = (void (**)(uint64_t, void, uint64_t))(v129 + 104);
    LODWORD(v158) = *MEMORY[0x1E4FA3020];
    uint64_t v92 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
    os_log_type_t v143 = (void (**)(char *, uint64_t, uint64_t))(v129 + 32);
    LODWORD(v154) = *MEMORY[0x1E4FA2CC8];
    uint64_t v150 = (void (**)(uint64_t, uint64_t))(v129 + 8);
    uint64_t v157 = v91;
    uint64_t v93 = v133 + v91 + v128;
    uint64_t v94 = 1;
    uint64_t v136 = v33;
    while (1)
    {
      uint64_t v95 = v171;
      v171(v33, v93, v21);
      if (__OFADD__(v94, 1)) {
        goto LABEL_65;
      }
      uint64_t v161 = (char *)(v94 + 1);
      uint64_t v166 = v94;
      uint64_t v167 = v93;
      uint64_t v96 = v162;
      UsoIdentifier.appBundleSemantic.getter();
      uint64_t v98 = v163;
      uint64_t v97 = v164;
      (*(void (**)(char *, void, uint64_t))v160)(v163, v158, v164);
      char v99 = MEMORY[0x1BA9DE8E0](v96, v98);
      uint64_t v100 = (void (*)(char *, char *, uint64_t))v95;
      BOOL v101 = *v159;
      (*v159)(v98, v97);
      v101(v96, v97);
      uint64_t v102 = v153;
      v100(v153, v33, v21);
      if ((v99 & 1) == 0) {
        break;
      }
      uint64_t v103 = v146;
      UsoIdentifier.sourceComponent.getter();
      uint64_t v104 = v147;
      uint64_t v105 = v152;
      (*v156)(v147, v154, v152);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))*v155)(v104, 0, 1, v105);
      uint64_t v106 = v149;
      uint64_t v107 = v149 + *(int *)(v151 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?(v103, v149, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v104, v107, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      int v108 = *v92;
      if ((*v92)(v106, 1, v105) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v104, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        outlined destroy of ReferenceResolutionClientProtocol?(v103, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v169(v153, v21);
        if (v108(v107, 1, v105) != 1) {
          goto LABEL_47;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v149, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        int v109 = v148;
        uint64_t v33 = v136;
        uint64_t v110 = (void (*)(char *, char *, uint64_t))v171;
        v171(v148, (unint64_t)v136, v21);
        char v111 = v145;
      }
      else
      {
        uint64_t v112 = (uint64_t)v127;
        outlined init with copy of ReferenceResolutionClientProtocol?(v106, (uint64_t)v127, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        if (v108(v107, 1, v105) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v147, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          outlined destroy of ReferenceResolutionClientProtocol?(v146, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          v169(v153, v21);
          (*v150)(v112, v105);
LABEL_47:
          outlined destroy of ReferenceResolutionClientProtocol?(v149, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
          char v111 = v145;
          int v109 = v148;
          uint64_t v33 = v136;
LABEL_48:
          uint64_t v110 = (void (*)(char *, char *, uint64_t))v171;
          v171(v109, (unint64_t)v33, v21);
LABEL_49:
          uint64_t v113 = v109;
          unint64_t v114 = v169;
          v169(v113, v21);
          v110(v111, v33, v21);
LABEL_50:
          v114(v111, v21);
          v114(v33, v21);
          goto LABEL_51;
        }
        int64_t v115 = v137;
        (*v143)(v137, v107, v105);
        lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, MEMORY[0x1E4FA2CD8]);
        LODWORD(v144) = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v116 = *v150;
        (*v150)((uint64_t)v115, v105);
        outlined destroy of ReferenceResolutionClientProtocol?(v147, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        outlined destroy of ReferenceResolutionClientProtocol?(v146, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v169(v153, v21);
        v116(v112, v105);
        outlined destroy of ReferenceResolutionClientProtocol?(v106, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        int v109 = v148;
        uint64_t v33 = v136;
        uint64_t v110 = (void (*)(char *, char *, uint64_t))v171;
        v171(v148, (unint64_t)v136, v21);
        char v111 = v145;
        if ((v144 & 1) == 0) {
          goto LABEL_49;
        }
      }
      uint64_t v117 = UsoIdentifier.namespace.getter();
      if (!v118) {
        goto LABEL_49;
      }
      if (v117 == 0x7250726577736E61 && v118 == 0xED0000746375646FLL)
      {
        v169(v109, v21);
        swift_bridgeObjectRelease();
        v171(v111, (unint64_t)v33, v21);
      }
      else
      {
        char v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
        unint64_t v120 = v109;
        unint64_t v114 = v169;
        v169(v120, v21);
        swift_bridgeObjectRelease();
        v171(v111, (unint64_t)v33, v21);
        if ((v119 & 1) == 0) {
          goto LABEL_50;
        }
      }
      if (one-time initialization token for kAnswerProductValues != -1) {
        swift_once();
      }
      uint64_t v121 = static UsoTask.kAnswerProductValues;
      uint64_t v122 = UsoIdentifier.value.getter();
      LOBYTE(v121) = specialized Set.contains(_:)(v122, v123, v121);
      swift_bridgeObjectRelease();
      uint64_t v124 = v111;
      uint64_t v125 = v169;
      v169(v124, v21);
      v125(v33, v21);
      if (v121) {
        goto LABEL_31;
      }
LABEL_51:
      uint64_t v94 = v166 + 1;
      uint64_t v93 = v167 + v157;
      if (v161 == v165) {
        goto LABEL_33;
      }
    }
    v169(v102, v21);
    char v111 = v145;
    int v109 = v148;
    goto LABEL_48;
  }
  uint64_t v136 = v33;
  uint64_t v48 = *(void *)(v132 + 72);
  LODWORD(v157) = *MEMORY[0x1E4FA3020];
  os_log_type_t v155 = (void (**)(char *, uint64_t))(v135 + 8);
  uint64_t v156 = (void (**)(uint64_t, void, uint64_t))(v135 + 104);
  uint64_t v144 = v129 + 104;
  os_log_type_t v143 = (void (**)(char *, uint64_t, uint64_t))(v129 + 56);
  char v142 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
  uint64_t v126 = (void (**)(char *, uint64_t, uint64_t))(v129 + 32);
  unsigned int v141 = *MEMORY[0x1E4FA2CC8];
  uint64_t v134 = (void (**)(uint64_t, uint64_t))(v129 + 8);
  uint64_t v154 = v48;
  unint64_t v49 = v133 + v48 + v128;
  uint64_t v50 = 1;
  uint64_t v51 = &demangling cache variable for type metadata for UsoIdentifier.NluComponent?;
  uint64_t v140 = v21;
  uint64_t v139 = v36;
  v171(v161, v49, v21);
  while (1)
  {
    if (__OFADD__(v50, 1))
    {
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    uint64_t v166 = v50;
    uint64_t v167 = v50 + 1;
    uint64_t v54 = v51;
    uint64_t v55 = v162;
    UsoIdentifier.appBundleSemantic.getter();
    uint64_t v56 = v163;
    uint64_t v57 = v164;
    (*v156)((uint64_t)v163, v157, v164);
    char v58 = MEMORY[0x1BA9DE8E0](v55, v56);
    uint64_t v59 = *v155;
    (*v155)(v56, v57);
    uint64_t v60 = v55;
    uint64_t v61 = (void (*)(char *, char *, uint64_t))v171;
    uint64_t v62 = v57;
    uint64_t v63 = v161;
    v59(v60, v62);
    uint64_t v64 = v160;
    v61(v160, v63, v21);
    if ((v58 & 1) == 0)
    {
      uint64_t v52 = v64;
      uint64_t v53 = v169;
      v169(v52, v21);
LABEL_11:
      v61(v36, v63, v21);
LABEL_12:
      v53(v36, v21);
      v53(v63, v21);
      goto LABEL_13;
    }
    uint64_t v65 = v159;
    UsoIdentifier.sourceComponent.getter();
    uint64_t v66 = v150;
    uint64_t v67 = v152;
    (*(void (**)(void (**)(uint64_t, uint64_t), void, uint64_t))v144)(v150, v141, v152);
    ((void (*)(void (**)(uint64_t, uint64_t), void, uint64_t, uint64_t))*v143)(v66, 0, 1, v67);
    uint64_t v68 = v158;
    uint64_t v69 = v158 + *(int *)(v151 + 48);
    uint64_t v70 = (uint64_t)v65;
    uint64_t v71 = v54;
    outlined init with copy of ReferenceResolutionClientProtocol?(v70, v158, v54);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v66, v69, v54);
    uint64_t v72 = *v142;
    int v73 = (*v142)(v68, 1, v67);
    uint64_t v74 = v169;
    if (v73 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v66, v71);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v159, v71);
      uint64_t v21 = v140;
      v74(v64, v140);
      int v75 = v72(v69, 1, v67);
      uint64_t v36 = v139;
      uint64_t v51 = v71;
      uint64_t v61 = (void (*)(char *, char *, uint64_t))v171;
      uint64_t v53 = v74;
      if (v75 != 1) {
        goto LABEL_22;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v158, v51);
      uint64_t v63 = v161;
      v61(v36, v161, v21);
      goto LABEL_24;
    }
    uint64_t v53 = v169;
    uint64_t v76 = v138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v68, v138, v71);
    uint64_t v51 = v71;
    if (v72(v69, 1, v67) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v150, v71);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v159, v71);
      uint64_t v21 = v140;
      v53(v160, v140);
      (*v134)(v76, v67);
      uint64_t v36 = v139;
      uint64_t v61 = (void (*)(char *, char *, uint64_t))v171;
LABEL_22:
      outlined destroy of ReferenceResolutionClientProtocol?(v158, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      uint64_t v63 = v161;
      goto LABEL_11;
    }
    uint64_t v77 = v137;
    (*v126)(v137, v69, v67);
    lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, MEMORY[0x1E4FA2CD8]);
    int v131 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v78 = *v134;
    uint64_t v79 = v77;
    uint64_t v53 = v169;
    (*v134)((uint64_t)v79, v67);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v150, v71);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v159, v71);
    uint64_t v80 = v140;
    v53(v160, v140);
    v78(v76, v67);
    uint64_t v81 = v68;
    uint64_t v21 = v80;
    outlined destroy of ReferenceResolutionClientProtocol?(v81, v71);
    uint64_t v36 = v139;
    uint64_t v63 = v161;
    uint64_t v61 = (void (*)(char *, char *, uint64_t))v171;
    v171(v139, (unint64_t)v161, v21);
    if ((v131 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t v82 = UsoIdentifier.namespace.getter();
    if (!v83) {
      goto LABEL_12;
    }
    if (v82 == 0x746553656E6F6870 && v83 == 0xEC000000676E6974) {
      break;
    }
    char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v169(v36, v21);
    swift_bridgeObjectRelease();
    v169(v63, v21);
    uint64_t v53 = v169;
    if (v84) {
      goto LABEL_5;
    }
LABEL_13:
    uint64_t v50 = v166 + 1;
    v49 += v154;
    if ((char *)v167 == v165)
    {
      swift_release();
      uint64_t v47 = v53;
      swift_bridgeObjectRelease();
      uint64_t v33 = v136;
      goto LABEL_30;
    }
    v61(v63, (char *)v49, v21);
  }
  v53(v36, v21);
  swift_bridgeObjectRelease();
  v53(v63, v21);
LABEL_5:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t one-time initialization function for forceEnabled(uint64_t a1)
{
  return one-time initialization function for forceEnabled(a1, &static InCallFeatureFlags.forceEnabled);
}

{
  return one-time initialization function for forceEnabled(a1, &static PhoneFeatureFlags.forceEnabled);
}

uint64_t *InCallFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static InCallFeatureFlags.forceEnabled;
}

uint64_t static InCallFeatureFlags.forceEnabled.getter()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for forceEnabled);
}

const char *InCallFeatureFlags.domain.getter()
{
  return "SiriInCall";
}

const char *InCallFeatureFlags.feature.getter()
{
  return "blushing_phantom";
}

uint64_t static InCallFeatureFlags.== infix(_:_:)()
{
  return 1;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance InCallFeatureFlags()
{
  return "SiriInCall";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance InCallFeatureFlags()
{
  return "blushing_phantom";
}

uint64_t one-time initialization function for forceEnabled(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 2;
  *a2 = result;
  return result;
}

uint64_t *PhoneFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static PhoneFeatureFlags.forceEnabled;
}

uint64_t static PhoneFeatureFlags.forceEnabled.getter()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for forceEnabled);
}

const char *PhoneFeatureFlags.domain.getter()
{
  return "SiriPhone";
}

const char *PhoneFeatureFlags.feature.getter()
{
  return "CancelCallBell";
}

unsigned __int8 *closure #1 in InCallFeatureFlags.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, unsigned char *a4@<X8>)
{
  int v5 = *result;
  if (v5 == 2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = a3();
    char v6 = isFeatureEnabled(_:)();
    uint64_t result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
    char v7 = v6 & 1;
  }
  else
  {
    char v7 = v5 & 1;
  }
  *a4 = v7;
  return result;
}

uint64_t static PhoneFeatureFlags.== infix(_:_:)()
{
  return 1;
}

void PhoneFeatureFlags.hash(into:)()
{
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology021UsoEntity_common_UserG0CG_0D10KitRuntime19SettingParseOptionsVs5NeverOTg504_s12d9Ontology7f9TaskC0A10jk69E11parseEntity33_78CB2465498F39AEB41E4B41B1A3637CLL12userEntitiesAD19lmn12VSayAA0ch12_h1_I25H0CG_tFAiKcACcfu_AiKcfu0_AF0fR0CTf1cn_nTf4ng_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      break;
    }
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      JUMPOUT(0x1B9F6616CLL);
    }
    uint64_t v4 = 0;
    uint64_t v3 = v9;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x1BA9E3990](v4, a1);
      }
      else {
        swift_retain();
      }
      char v5 = UsoTask.parseEntity(userEntity:)();
      swift_release();
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      ++v4;
      *(void *)(v9 + 16) = v7 + 1;
      *(unsigned char *)(v9 + v7 + 32) = v5;
      if (v2 == v4) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return v3;
}

unsigned __int8 *partial apply for closure #1 in PhoneFeatureFlags.isEnabled.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in InCallFeatureFlags.isEnabled.getter(a1, (uint64_t)&type metadata for PhoneFeatureFlags, (uint64_t (*)(void))lazy protocol witness table accessor for type PhoneFeatureFlags and conformance PhoneFeatureFlags, a2);
}

unsigned __int8 *partial apply for closure #1 in InCallFeatureFlags.isEnabled.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in InCallFeatureFlags.isEnabled.getter(a1, (uint64_t)&type metadata for InCallFeatureFlags, (uint64_t (*)(void))lazy protocol witness table accessor for type InCallFeatureFlags and conformance InCallFeatureFlags, a2);
}

unint64_t lazy protocol witness table accessor for type SettingParseOptions and conformance SettingParseOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions;
  if (!lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions;
  if (!lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions;
  if (!lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions;
  if (!lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InCallFeatureFlags and conformance InCallFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags;
  if (!lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags;
  if (!lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags);
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneAffinityScorer()
{
  return &type metadata for PhoneAffinityScorer;
}

uint64_t getEnumTagSinglePayload for PhoneSettingParseResult(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  switch(v4)
  {
    case 1:
      uint64_t v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        return v4;
      }
      goto LABEL_17;
    case 2:
      uint64_t v4 = a1[1];
      if (!a1[1]) {
        return v4;
      }
      goto LABEL_17;
    case 3:
      __break(1u);
      JUMPOUT(0x1B9F6644CLL);
    case 4:
      uint64_t v4 = *(unsigned int *)(a1 + 1);
      if (v4) {
LABEL_17:
      }
        uint64_t v4 = (*a1 | (v4 << 16)) - 0xFFFF;
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for PhoneSettingParseResult(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2)
  {
    unsigned int v7 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v7;
        return result;
      case 3:
        goto LABEL_21;
      case 4:
        *(_DWORD *)(result + 2) = v7;
        return result;
      default:
        return result;
    }
  }
  switch(v6)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_21:
      __break(1u);
      JUMPOUT(0x1B9F6651CLL);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for PhoneSettingParseResult(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for PhoneSettingParseResult(unsigned char *result, int a2)
{
  if (a2)
  {
    *unint64_t result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneSettingParseResult()
{
  return &type metadata for PhoneSettingParseResult;
}

ValueMetadata *type metadata accessor for SettingParseOptions()
{
  return &type metadata for SettingParseOptions;
}

ValueMetadata *type metadata accessor for InCallFeatureFlags()
{
  return &type metadata for InCallFeatureFlags;
}

unsigned char *storeEnumTagSinglePayload for InCallFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9F6665CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneFeatureFlags()
{
  return &type metadata for PhoneFeatureFlags;
}

uint64_t sub_1B9F666E8@<X0>(void *a1@<X8>)
{
  uint64_t result = dispatch thunk of CodeGenListEntry.entry.getter();
  *a1 = v3;
  return result;
}

uint64_t specialized implicit closure #3 in implicit closure #2 in UsoTask.parseEntity(setting:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = specialized UsoTask.vocFilter(_:)(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  if ((v6 & 1) != 0 && (uint64_t v7 = UsoIdentifier.namespace.getter(), v8))
  {
    if (v7 == 0x746553656E6F6870 && v8 == 0xEC000000676E6974) {
      char v10 = 1;
    }
    else {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t specialized UsoTask.answerProductFilter(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v21 - v7;
  char v9 = specialized UsoTask.vocFilter(_:)(a1);
  char v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) != 0 && (uint64_t v11 = UsoIdentifier.namespace.getter(), v12))
  {
    if (v11 == 0x7250726577736E61 && v12 == 0xED0000746375646FLL)
    {
      uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
      v15(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
      v15(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
      char v16 = 0;
      if ((v14 & 1) == 0) {
        goto LABEL_14;
      }
    }
    if (one-time initialization token for kAnswerProductValues != -1) {
      swift_once();
    }
    uint64_t v17 = static UsoTask.kAnswerProductValues;
    uint64_t v18 = UsoIdentifier.value.getter();
    char v16 = specialized Set.contains(_:)(v18, v19, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    v10(v6, a1, v2);
    char v16 = 0;
  }
LABEL_14:
  v15(v6, v2);
  return v16 & 1;
}

SiriKitRuntime::PhotosAffinityScorer __swiftcall PhotosAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062CA0;
  uint64_t v1 = 0xD000000000000027;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t PhotosAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t one-time initialization function for supportedIntents()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for supportedIntents);
  uint64_t result = swift_arrayDestroy();
  static PhotosAffinityScorer.supportedIntents = v0;
  return result;
}

uint64_t *PhotosAffinityScorer.supportedIntents.unsafeMutableAddressor()
{
  if (one-time initialization token for supportedIntents != -1) {
    swift_once();
  }
  return &static PhotosAffinityScorer.supportedIntents;
}

uint64_t static PhotosAffinityScorer.supportedIntents.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for supportedIntents);
}

uint64_t one-time initialization function for sharedIntents()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for sharedIntents);
  uint64_t result = swift_arrayDestroy();
  static PhotosAffinityScorer.sharedIntents = v0;
  return result;
}

uint64_t *PhotosAffinityScorer.sharedIntents.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedIntents != -1) {
    swift_once();
  }
  return &static PhotosAffinityScorer.sharedIntents;
}

uint64_t static PhotosAffinityScorer.sharedIntents.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for sharedIntents);
}

uint64_t one-time initialization function for supportedApps()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for supportedApps);
  uint64_t result = swift_arrayDestroy();
  static PhotosAffinityScorer.supportedApps = v0;
  return result;
}

uint64_t *PhotosAffinityScorer.supportedApps.unsafeMutableAddressor()
{
  if (one-time initialization token for supportedApps != -1) {
    swift_once();
  }
  return &static PhotosAffinityScorer.supportedApps;
}

uint64_t static PhotosAffinityScorer.supportedApps.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for supportedApps);
}

uint64_t one-time initialization function for supportedEntities()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for supportedEntities);
  uint64_t result = swift_arrayDestroy();
  static PhotosAffinityScorer.supportedEntities = v0;
  return result;
}

uint64_t *PhotosAffinityScorer.supportedEntities.unsafeMutableAddressor()
{
  if (one-time initialization token for supportedEntities != -1) {
    swift_once();
  }
  return &static PhotosAffinityScorer.supportedEntities;
}

uint64_t static PhotosAffinityScorer.supportedEntities.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for supportedEntities);
}

void one-time initialization function for ignoredApps()
{
  static PhotosAffinityScorer.ignoredApps = MEMORY[0x1E4FBC870];
}

uint64_t *PhotosAffinityScorer.ignoredApps.unsafeMutableAddressor()
{
  if (one-time initialization token for ignoredApps != -1) {
    swift_once();
  }
  return &static PhotosAffinityScorer.ignoredApps;
}

uint64_t static PhotosAffinityScorer.ignoredApps.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for ignoredApps);
}

uint64_t closure #2 in PhotosAffinityScorer.isMediaPlaying(with:)()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_PlaybackState.DefinedValues();
  uint64_t v42 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v39 = (char *)v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_PlaybackState.DefinedValues?, UsoEntity_common_PlaybackState.DefinedValues?));
  MEMORY[0x1F4188790](v3);
  uint64_t v43 = (uint64_t)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v40 = (uint64_t)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  char v10 = (char *)v37 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v41 = (uint64_t)v37 - v11;
  uint64_t v12 = type metadata accessor for RREntity();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v16 = static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  swift_release();
  unint64_t v17 = MEMORY[0x1BA9DE8C0](v16);
  unint64_t v18 = v17;
  if (v17 >> 62)
  {
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (!result) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t result = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!result) {
      goto LABEL_7;
    }
  }
  if ((v18 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v18);
LABEL_7:
    swift_bridgeObjectRelease();
    static UsoTask_CodegenConverter.convert(task:)();
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v45, (uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v44[3])
    {
      type metadata accessor for UsoTask_noVerb_common_MediaItem();
      if (swift_dynamicCast())
      {
        uint64_t v38 = v10;
        uint64_t v20 = v1;
        uint64_t v21 = v46;
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        v37[0] = v21;
        swift_release();
        v37[1] = v0;
        if (v44[0] && (uint64_t v22 = dispatch thunk of UsoEntity_common_MediaItem.playbackState.getter(), swift_release(), v22))
        {
          uint64_t v23 = v41;
          dispatch thunk of UsoEntity_common_PlaybackState.definedValue.getter();
          swift_release();
          uint64_t v24 = v42;
        }
        else
        {
          uint64_t v23 = v41;
          uint64_t v24 = v42;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v41, 1, 1, v20);
        }
        uint64_t v28 = (uint64_t)v38;
        (*(void (**)(char *, void, uint64_t))(v24 + 104))(v38, *MEMORY[0x1E4FA3618], v20);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v20);
        uint64_t v29 = v43;
        uint64_t v30 = v43 + *(int *)(v3 + 48);
        outlined init with copy of ReferenceResolutionClientProtocol?(v23, v43, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
        uint64_t v31 = v29;
        outlined init with copy of ReferenceResolutionClientProtocol?(v28, v30, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
        uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
        if (v32(v29, 1, v20) == 1)
        {
          swift_release();
          swift_release();
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v28, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
          uint64_t v31 = v43;
          outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
          if (v32(v30, 1, v20) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v31, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
            char v27 = 1;
            return v27 & 1;
          }
        }
        else
        {
          uint64_t v33 = v40;
          outlined init with copy of ReferenceResolutionClientProtocol?(v29, v40, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
          if (v32(v30, 1, v20) != 1)
          {
            uint64_t v34 = v42;
            uint64_t v35 = v39;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v39, v30, v20);
            lazy protocol witness table accessor for type UsoEntity_common_PlaybackState.DefinedValues and conformance UsoEntity_common_PlaybackState.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_PlaybackState.DefinedValues and conformance UsoEntity_common_PlaybackState.DefinedValues, MEMORY[0x1E4FA3620]);
            char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            swift_release();
            swift_release();
            uint64_t v36 = *(void (**)(char *, uint64_t))(v34 + 8);
            v36(v35, v20);
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v38, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
            v36((char *)v33, v20);
            outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
            return v27 & 1;
          }
          swift_release();
          swift_release();
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v38, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for UsoEntity_common_PlaybackState.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
          (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v33, v20);
        }
        uint64_t v25 = &demangling cache variable for type metadata for (UsoEntity_common_PlaybackState.DefinedValues?, UsoEntity_common_PlaybackState.DefinedValues?);
        uint64_t v26 = (unsigned char *)v31;
LABEL_15:
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, v25);
        char v27 = 0;
        return v27 & 1;
      }
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    uint64_t v25 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    uint64_t v26 = v45;
    goto LABEL_15;
  }
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t specialized PhotosAffinityScorer.unsupportedAppIsOnScreen(with:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1F4188790](v2 - 8);
  v220 = (void (*)(char *, char *, uint64_t))((char *)&v163 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for RRMetadata();
  uint64_t v171 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v216 = (char *)&v163 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  v219 = (char *)&v163 - v7;
  uint64_t v8 = type metadata accessor for RRDataSourceMetadataValue();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v173 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unsigned int v180 = (char *)&v163 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v214 = (char *)&v163 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v206 = (char *)&v163 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v205 = (char *)&v163 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v178 = (char *)&v163 - v21;
  MEMORY[0x1F4188790](v20);
  unint64_t v190 = (char *)&v163 - v22;
  uint64_t v201 = type metadata accessor for RREntity();
  uint64_t v23 = *(void *)(v201 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v201);
  uint64_t v176 = (char *)&v163 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  unsigned int v175 = (char *)&v163 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v199 = (char *)&v163 - v28;
  uint64_t v29 = type metadata accessor for RRCandidate();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  char v186 = (char *)&v163 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v168 = (char *)&v163 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  v185 = (char *)&v163 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  v193 = (char *)&v163 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  v198 = (char *)&v163 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v200 = (char *)&v163 - v41;
  uint64_t v42 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v221 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v43 = a1;
  uint64_t v44 = *(void *)(a1 + 16);
  uint64_t v45 = v43;
  swift_bridgeObjectRetain();
  uint64_t v203 = v29;
  uint64_t v184 = v44;
  uint64_t v165 = v30;
  uint64_t v166 = v23;
  if (!v44)
  {
    char v142 = v42;
    os_log_type_t v143 = v42;
LABEL_69:
    swift_bridgeObjectRelease();
    int64_t v144 = *((void *)v142 + 2);
    uint64_t v145 = v166;
    if (v144)
    {
      uint64_t v221 = v143;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v144, 0);
      uint64_t v146 = v165 + 16;
      uint64_t v147 = *(void **)(v165 + 16);
      uint64_t v148 = *(unsigned __int8 *)(v165 + 80);
      uint64_t v217 = v142;
      uint64_t v149 = &v142[(v148 + 32) & ~v148];
      v219 = *(char **)(v165 + 72);
      v220 = (void (*)(char *, char *, uint64_t))v147;
      char v218 = (void (**)(char *, uint64_t))(v145 + 8);
      uint64_t v150 = (void (**)(char *, uint64_t))(v165 + 8);
      uint64_t v151 = v186;
      do
      {
        uint64_t v152 = v203;
        uint64_t v153 = v146;
        v220(v151, v149, v203);
        uint64_t v154 = v199;
        RRCandidate.entity.getter();
        uint64_t v155 = RREntity.appBundleId.getter();
        uint64_t v157 = v156;
        (*v218)(v154, v201);
        (*v150)(v151, v152);
        uint64_t v158 = v221;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v158 + 2) + 1, 1);
          uint64_t v158 = v221;
        }
        unint64_t v160 = *((void *)v158 + 2);
        unint64_t v159 = *((void *)v158 + 3);
        if (v160 >= v159 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v159 > 1, v160 + 1, 1);
          uint64_t v158 = v221;
        }
        *((void *)v158 + 2) = v160 + 1;
        uint64_t v161 = &v158[16 * v160];
        *((void *)v161 + 4) = v155;
        *((void *)v161 + 5) = v157;
        uint64_t v149 = &v219[(void)v149];
        --v144;
        uint64_t v146 = v153;
      }
      while (v144);
      swift_release();
      if (*((void *)v158 + 2)) {
        goto LABEL_77;
      }
    }
    else
    {
      swift_release();
      uint64_t v158 = (char *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16))
      {
LABEL_77:
        uint64_t v162 = *((void *)v158 + 4);
        swift_bridgeObjectRetain();
LABEL_80:
        swift_bridgeObjectRelease();
        return v162;
      }
    }
    uint64_t v162 = 0;
    goto LABEL_80;
  }
  uint64_t v46 = 0;
  uint64_t v47 = *(void (**)(void, void, void))(v30 + 16);
  unint64_t v48 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v187 = *(void *)(v30 + 72);
  uint64_t v163 = v45;
  unint64_t v164 = v48;
  uint64_t v183 = v45 + v48;
  unint64_t v49 = (void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v213 = v171 + 16;
  uint64_t v212 = (uint64_t (**)(char *, uint64_t))(v171 + 88);
  int v211 = *MEMORY[0x1E4FA3DB0];
  char v218 = (void (**)(char *, uint64_t))(v171 + 8);
  uint64_t v210 = (void (**)(void, void, void, void))(v9 + 56);
  v204 = (void (**)(char *, uint64_t))(v171 + 96);
  uint64_t v217 = (char *)(v9 + 32);
  uint64_t v209 = (unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48);
  unsigned int v174 = *MEMORY[0x1E4FA3DE0];
  os_log_t v181 = (void (**)(char *, void, uint64_t))(v9 + 104);
  uint64_t v189 = v9 + 16;
  uint64_t v207 = v9;
  uint64_t v191 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v47;
  unsigned int v169 = *MEMORY[0x1E4FA3DD0];
  uint64_t v167 = (void (**)(char *, char *, uint64_t))(v30 + 32);
  uint64_t v51 = v200;
  uint64_t v52 = v29;
  uint64_t v202 = v30 + 16;
  char v196 = v47;
  uint64_t v195 = v49;
  uint64_t v192 = (void (**)(char *, uint64_t))(v30 + 8);
  while (1)
  {
    uint64_t v197 = v46;
    v50(v51, v183 + v187 * v46, v52);
    uint64_t v53 = (void (*)(char *, char *, uint64_t))v50;
    uint64_t v54 = v52;
    if (one-time initialization token for ignoredApps != -1) {
      swift_once();
    }
    uint64_t v55 = static PhotosAffinityScorer.ignoredApps;
    uint64_t v56 = v199;
    RRCandidate.entity.getter();
    uint64_t v57 = RREntity.appBundleId.getter();
    uint64_t v59 = v58;
    uint64_t v60 = *v195;
    uint64_t v61 = v56;
    uint64_t v62 = v201;
    (*v195)(v61, v201);
    LOBYTE(v57) = specialized Set.contains(_:)(v57, v59, v55);
    uint64_t v63 = v200;
    swift_bridgeObjectRelease();
    v53(v198, v63, v54);
    v194 = v60;
    if (v57)
    {
      LODWORD(v215) = 0;
      uint64_t v64 = v216;
      uint64_t v65 = v192;
    }
    else
    {
      uint64_t v66 = v62;
      uint64_t v67 = v175;
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      v60(v67, v66);
      uint64_t v68 = UsoTask.verbString.getter();
      uint64_t v70 = v69;
      swift_release();
      uint64_t v64 = v216;
      if (one-time initialization token for kUsoCommonAppEntityName != -1) {
        swift_once();
      }
      if (v68 == kUsoCommonAppEntityName._countAndFlagsBits && v70 == kUsoCommonAppEntityName._object) {
        int v71 = 1;
      }
      else {
        int v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t v63 = v200;
      uint64_t v65 = v192;
      LODWORD(v215) = v71;
      swift_bridgeObjectRelease();
    }
    uint64_t v72 = *v65;
    uint64_t v52 = v203;
    (*v65)(v198, v203);
    int v73 = v193;
    uint64_t v74 = v63;
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v196;
    v196(v193, v63, v52);
    if ((v215 & 1) == 0) {
      goto LABEL_51;
    }
    char v182 = v72;
    int v75 = v176;
    RRCandidate.entity.getter();
    uint64_t v76 = RREntity.metadata.getter();
    v194(v75, v201);
    uint64_t v77 = *(void *)(v76 + 16);
    if (v77)
    {
      unint64_t v78 = v76 + ((*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
      uint64_t v215 = *(void *)(v171 + 72);
      uint64_t v79 = *(void (**)(char *, unint64_t, uint64_t))(v171 + 16);
      uint64_t v188 = v76;
      swift_bridgeObjectRetain();
      unint64_t v80 = MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v81 = v219;
        v79(v219, v78, v4);
        v79(v64, (unint64_t)v81, v4);
        int v82 = (*v212)(v64, v4);
        if (v82 == v211)
        {
          uint64_t v83 = *v204;
          v208 = (void (*)(char *, unint64_t, uint64_t))v80;
          v83(v64, v4);
          char v84 = v64;
          uint64_t v85 = *(void (**)(void, char *, uint64_t))v217;
          uint64_t v86 = v4;
          uint64_t v87 = (void (*)(void, void, void))v220;
          uint64_t v88 = v206;
          (*(void (**)(char *, char *, uint64_t))v217)(v206, v84, v8);
          os_log_type_t v89 = v87;
          uint64_t v90 = v88;
          uint64_t v91 = v87;
          uint64_t v4 = v86;
          v85(v89, v90, v8);
          (*v210)(v91, 0, 1, v8);
          unint64_t v80 = (unint64_t)v208;
          (*v218)(v219, v86);
        }
        else
        {
          uint64_t v92 = v64;
          uint64_t v93 = *v218;
          (*v218)(v92, v4);
          (*v210)(v220, 1, 1, v8);
          v93(v219, v4);
        }
        if ((*v209)(v220, 1, v8) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v220, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        }
        else
        {
          uint64_t v94 = *(void (**)(char *, char *, uint64_t))v217;
          uint64_t v95 = v205;
          (*(void (**)(char *, void *, uint64_t))v217)(v205, v220, v8);
          v94(v214, v95, v8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v80 + 16) + 1, 1, v80);
          }
          unint64_t v97 = *(void *)(v80 + 16);
          unint64_t v96 = *(void *)(v80 + 24);
          uint64_t v98 = v207;
          if (v97 >= v96 >> 1)
          {
            uint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1, v80);
            uint64_t v98 = v207;
            unint64_t v80 = v99;
          }
          *(void *)(v80 + 16) = v97 + 1;
          v94((char *)(v80+ ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))+ *(void *)(v98 + 72) * v97), v214, v8);
        }
        uint64_t v64 = v216;
        v78 += v215;
        --v77;
      }
      while (v77);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v80 = MEMORY[0x1E4FBC860];
    }
    uint64_t v100 = *v181;
    BOOL v101 = v190;
    (*v181)(v190, v174, v8);
    uint64_t v102 = v203;
    uint64_t v215 = *(void *)(v80 + 16);
    if (!v215)
    {
      uint64_t v110 = *v191;
      goto LABEL_39;
    }
    uint64_t v103 = v207;
    unint64_t v170 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
    uint64_t v104 = *(void (**)(void))(v207 + 16);
    uint64_t v105 = v178;
    unint64_t v177 = v80 + v170;
    v208 = (void (*)(char *, unint64_t, uint64_t))v104;
    v104(v178);
    uint64_t v106 = lazy protocol witness table accessor for type UsoEntity_common_PlaybackState.DefinedValues and conformance UsoEntity_common_PlaybackState.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, MEMORY[0x1E4FA3DE8]);
    swift_bridgeObjectRetain();
    uint64_t v188 = v106;
    char v107 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v108 = *(void (**)(char *, uint64_t))(v103 + 8);
    int v109 = v105;
    v108(v105, v8);
    if (v107)
    {
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    uint64_t v179 = v108;
    if (v215 == 1) {
      goto LABEL_37;
    }
    uint64_t v172 = *(void *)(v207 + 72);
    v208(v105, v177 + v172, v8);
    char v111 = dispatch thunk of static Equatable.== infix(_:_:)();
    v179(v105, v8);
    if ((v111 & 1) == 0) {
      break;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    int v108 = v179;
LABEL_46:
    v108(v190, v8);
    v100(v180, v169, v8);
    uint64_t v118 = v173;
    v208(v173, v177, v8);
    swift_bridgeObjectRetain();
    char v119 = dispatch thunk of static Equatable.== infix(_:_:)();
    v108(v118, v8);
    if (v119) {
      goto LABEL_49;
    }
    if (v215 != 1)
    {
      uint64_t v120 = *(void *)(v207 + 72);
      uint64_t v121 = v173;
      v208(v173, v177 + v120, v8);
      char v122 = dispatch thunk of static Equatable.== infix(_:_:)();
      v108(v121, v8);
      if (v122)
      {
LABEL_49:
        swift_bridgeObjectRelease();
        v108(v180, v8);
        uint64_t v112 = v203;
        goto LABEL_50;
      }
      if (v215 != 2)
      {
        unint64_t v124 = v80 + v170 + 2 * v120;
        uint64_t v125 = 2;
        do
        {
          uint64_t v126 = v173;
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v208)(v173, v124, v8);
          uint64_t v127 = v125 + 1;
          if (__OFADD__(v125, 1)) {
            goto LABEL_82;
          }
          unint64_t v128 = (void (*)(void, void))v108;
          uint64_t v129 = v126;
          char v130 = dispatch thunk of static Equatable.== infix(_:_:)();
          int v131 = v129;
          int v108 = (void (*)(char *, uint64_t))v128;
          v128(v131, v8);
          if (v130) {
            goto LABEL_49;
          }
          ++v125;
          v124 += v120;
        }
        while (v127 != v215);
      }
    }
    swift_bridgeObjectRelease();
    v108(v180, v8);
    swift_bridgeObjectRelease();
    uint64_t v52 = v203;
    uint64_t v72 = v182;
    v182(v193, v203);
    uint64_t v132 = v185;
    v196(v185, v200, v52);
    if (one-time initialization token for supportedApps != -1) {
      swift_once();
    }
    uint64_t v133 = static PhotosAffinityScorer.supportedApps;
    uint64_t v134 = v199;
    RRCandidate.entity.getter();
    uint64_t v135 = RREntity.appBundleId.getter();
    uint64_t v137 = v136;
    v194(v134, v201);
    LOBYTE(v135) = specialized Set.contains(_:)(v135, v137, v133);
    swift_bridgeObjectRelease();
    v72(v132, v52);
    uint64_t v51 = v200;
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v196;
    if ((v135 & 1) == 0)
    {
      uint64_t v138 = *v167;
      (*v167)(v168, v200, v52);
      uint64_t v139 = v221;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v139 + 2) + 1, 1);
        uint64_t v139 = v221;
      }
      unint64_t v141 = *((void *)v139 + 2);
      unint64_t v140 = *((void *)v139 + 3);
      if (v141 >= v140 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v140 > 1, v141 + 1, 1);
        uint64_t v139 = v221;
      }
      *((void *)v139 + 2) = v141 + 1;
      uint64_t v52 = v203;
      v138(&v139[v164 + v141 * v187], v168, v203);
      uint64_t v221 = v139;
      uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v196;
      goto LABEL_53;
    }
LABEL_52:
    v72(v51, v52);
LABEL_53:
    uint64_t v46 = v197 + 1;
    if (v197 + 1 == v184)
    {
      char v142 = v221;
      os_log_type_t v143 = (char *)MEMORY[0x1E4FBC860];
      goto LABEL_69;
    }
  }
  if (v215 == 2)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    BOOL v101 = v190;
LABEL_38:
    uint64_t v110 = v179;
LABEL_39:
    uint64_t v112 = v102;
    v110(v101, v8);
LABEL_50:
    swift_bridgeObjectRelease();
    int v73 = v193;
    uint64_t v74 = v200;
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v196;
    uint64_t v72 = v182;
    uint64_t v52 = v112;
LABEL_51:
    v72(v73, v52);
    uint64_t v123 = v185;
    v50(v185, (uint64_t)v74, v52);
    v72(v123, v52);
    uint64_t v51 = v74;
    goto LABEL_52;
  }
  unint64_t v113 = v80 + v170 + 2 * v172;
  uint64_t v114 = 2;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v208)(v109, v113, v8);
    uint64_t v116 = v114 + 1;
    if (__OFADD__(v114, 1)) {
      break;
    }
    char v117 = dispatch thunk of static Equatable.== infix(_:_:)();
    v179(v109, v8);
    if (v117) {
      goto LABEL_45;
    }
    ++v114;
    v113 += v172;
    int v109 = v178;
    BOOL v101 = v190;
    if (v116 == v215)
    {
      swift_bridgeObjectRelease();
      uint64_t v102 = v203;
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t specialized PhotosAffinityScorer.isMediaPlaying(with:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RRMetadata();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v50 - v7;
  uint64_t v66 = type metadata accessor for RREntity();
  uint64_t v73 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v65 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RRCandidate();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v53 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v57 = (char *)&v50 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v50 - v16;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v74 = MEMORY[0x1E4FBC860];
  uint64_t v19 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v64 = v19;
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v51 = v11;
    uint64_t v21 = v11 + 16;
    uint64_t v62 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    unint64_t v22 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v69 = *(void *)(v11 + 72);
    uint64_t v50 = a1;
    unint64_t v52 = v22;
    uint64_t v61 = a1 + v22;
    uint64_t v60 = (void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v73 = v3 + 16;
    unsigned int v23 = *MEMORY[0x1E4FA3DD8];
    unsigned int v71 = *MEMORY[0x1E4FA3DB0];
    unsigned int v72 = v23;
    uint64_t v70 = (void (**)(char *, void, uint64_t))(v3 + 104);
    uint64_t v24 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v55 = v10;
    uint64_t v56 = (void (**)(char *, char *, uint64_t))(v21 + 16);
    uint64_t v63 = v21;
    uint64_t v58 = (void (**)(char *, uint64_t))(v21 - 8);
    uint64_t v59 = v17;
    uint64_t v54 = v3;
    v62(v17, a1 + v22, v10);
    while (1)
    {
      uint64_t v25 = v65;
      RRCandidate.entity.getter();
      uint64_t v26 = RREntity.metadata.getter();
      (*v60)(v25, v66);
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)(v26 + 16);
      if (v28)
      {
        uint64_t v67 = v27;
        uint64_t v68 = v20;
        unint64_t v29 = v27 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
        uint64_t v30 = *(void *)(v3 + 72);
        uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v31(v8, v29, v2);
          uint64_t v32 = type metadata accessor for RRDataSourceMetadataValue();
          (*(void (**)(char *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v6, v72, v32);
          (*v70)(v6, v71, v2);
          char v33 = static RRMetadata.== infix(_:_:)();
          uint64_t v34 = *v24;
          (*v24)(v6, v2);
          v34(v8, v2);
          if (v33) {
            break;
          }
          v29 += v30;
          if (!--v28)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v3 = v54;
            uint64_t v10 = v55;
            uint64_t v17 = v59;
            uint64_t v20 = v68;
            goto LABEL_4;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v35 = *v56;
        uint64_t v10 = v55;
        (*v56)(v57, v59, v55);
        uint64_t v36 = v74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1);
          uint64_t v36 = v74;
        }
        uint64_t v3 = v54;
        unint64_t v38 = *(void *)(v36 + 16);
        unint64_t v37 = *(void *)(v36 + 24);
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
          uint64_t v36 = v74;
        }
        *(void *)(v36 + 16) = v38 + 1;
        v35((char *)(v36 + v52 + v38 * v69), v57, v10);
        uint64_t v74 = v36;
        uint64_t v17 = v59;
        uint64_t v20 = v68;
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_4:
        (*v58)(v17, v10);
      }
      if (++v20 == v64) {
        break;
      }
      v62(v17, v61 + v69 * v20, v10);
    }
    uint64_t v18 = v74;
    uint64_t v11 = v51;
  }
  swift_bridgeObjectRelease();
  uint64_t v39 = *(void *)(v18 + 16);
  uint64_t v40 = v53;
  if (v39)
  {
    uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v41 = v11 + 16;
    uint64_t v42 = v43;
    uint64_t v44 = v18 + ((*(unsigned __int8 *)(v41 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 64));
    uint64_t v45 = *(void *)(v41 + 56);
    swift_retain();
    while (1)
    {
      v42(v40, v44, v10);
      char v46 = closure #2 in PhotosAffinityScorer.isMediaPlaying(with:)();
      uint64_t v47 = v40;
      char v48 = v46;
      (*(void (**)(char *, uint64_t))(v41 - 8))(v47, v10);
      if (v48) {
        break;
      }
      v44 += v45;
      --v39;
      uint64_t v40 = v53;
      if (!v39)
      {
        swift_release_n();
        return 0;
      }
    }
    swift_release_n();
    return 1;
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t specialized PhotosAffinityScorer.supportedAppIsOnScreen(with:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1F4188790](v2 - 8);
  v220 = (void (*)(char *, char *, uint64_t))((char *)&v163 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for RRMetadata();
  uint64_t v171 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v216 = (char *)&v163 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  v219 = (char *)&v163 - v7;
  uint64_t v8 = type metadata accessor for RRDataSourceMetadataValue();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v173 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unsigned int v180 = (char *)&v163 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v214 = (char *)&v163 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v206 = (char *)&v163 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v205 = (char *)&v163 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v178 = (char *)&v163 - v21;
  MEMORY[0x1F4188790](v20);
  unint64_t v190 = (char *)&v163 - v22;
  uint64_t v201 = type metadata accessor for RREntity();
  uint64_t v23 = *(void *)(v201 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v201);
  uint64_t v176 = (char *)&v163 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  unsigned int v175 = (char *)&v163 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v199 = (char *)&v163 - v28;
  uint64_t v29 = type metadata accessor for RRCandidate();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  char v186 = (char *)&v163 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v168 = (char *)&v163 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  v185 = (char *)&v163 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  v193 = (char *)&v163 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  v198 = (char *)&v163 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v200 = (char *)&v163 - v41;
  uint64_t v42 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v221 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v43 = a1;
  uint64_t v44 = *(void *)(a1 + 16);
  uint64_t v45 = v43;
  swift_bridgeObjectRetain();
  uint64_t v203 = v29;
  uint64_t v184 = v44;
  uint64_t v165 = v30;
  uint64_t v166 = v23;
  if (!v44)
  {
    char v142 = v42;
    os_log_type_t v143 = v42;
LABEL_69:
    swift_bridgeObjectRelease();
    int64_t v144 = *((void *)v142 + 2);
    uint64_t v145 = v166;
    if (v144)
    {
      uint64_t v221 = v143;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v144, 0);
      uint64_t v146 = v165 + 16;
      uint64_t v147 = *(void **)(v165 + 16);
      uint64_t v148 = *(unsigned __int8 *)(v165 + 80);
      uint64_t v217 = v142;
      uint64_t v149 = &v142[(v148 + 32) & ~v148];
      v219 = *(char **)(v165 + 72);
      v220 = (void (*)(char *, char *, uint64_t))v147;
      char v218 = (void (**)(char *, uint64_t))(v145 + 8);
      uint64_t v150 = (void (**)(char *, uint64_t))(v165 + 8);
      uint64_t v151 = v186;
      do
      {
        uint64_t v152 = v203;
        uint64_t v153 = v146;
        v220(v151, v149, v203);
        uint64_t v154 = v199;
        RRCandidate.entity.getter();
        uint64_t v155 = RREntity.appBundleId.getter();
        uint64_t v157 = v156;
        (*v218)(v154, v201);
        (*v150)(v151, v152);
        uint64_t v158 = v221;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v158 + 2) + 1, 1);
          uint64_t v158 = v221;
        }
        unint64_t v160 = *((void *)v158 + 2);
        unint64_t v159 = *((void *)v158 + 3);
        if (v160 >= v159 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v159 > 1, v160 + 1, 1);
          uint64_t v158 = v221;
        }
        *((void *)v158 + 2) = v160 + 1;
        uint64_t v161 = &v158[16 * v160];
        *((void *)v161 + 4) = v155;
        *((void *)v161 + 5) = v157;
        uint64_t v149 = &v219[(void)v149];
        --v144;
        uint64_t v146 = v153;
      }
      while (v144);
      swift_release();
      if (*((void *)v158 + 2)) {
        goto LABEL_77;
      }
    }
    else
    {
      swift_release();
      uint64_t v158 = (char *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16))
      {
LABEL_77:
        uint64_t v162 = *((void *)v158 + 4);
        swift_bridgeObjectRetain();
LABEL_80:
        swift_bridgeObjectRelease();
        return v162;
      }
    }
    uint64_t v162 = 0;
    goto LABEL_80;
  }
  uint64_t v46 = 0;
  uint64_t v47 = *(void (**)(void, void, void))(v30 + 16);
  unint64_t v48 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v187 = *(void *)(v30 + 72);
  uint64_t v163 = v45;
  unint64_t v164 = v48;
  uint64_t v183 = v45 + v48;
  unint64_t v49 = (void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v213 = v171 + 16;
  uint64_t v212 = (uint64_t (**)(char *, uint64_t))(v171 + 88);
  int v211 = *MEMORY[0x1E4FA3DB0];
  char v218 = (void (**)(char *, uint64_t))(v171 + 8);
  uint64_t v210 = (void (**)(void, void, void, void))(v9 + 56);
  v204 = (void (**)(char *, uint64_t))(v171 + 96);
  uint64_t v217 = (char *)(v9 + 32);
  uint64_t v209 = (unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48);
  unsigned int v174 = *MEMORY[0x1E4FA3DE0];
  os_log_t v181 = (void (**)(char *, void, uint64_t))(v9 + 104);
  uint64_t v189 = v9 + 16;
  uint64_t v207 = v9;
  uint64_t v191 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v47;
  unsigned int v169 = *MEMORY[0x1E4FA3DD0];
  uint64_t v167 = (void (**)(char *, char *, uint64_t))(v30 + 32);
  uint64_t v51 = v200;
  uint64_t v52 = v29;
  uint64_t v202 = v30 + 16;
  char v196 = v47;
  uint64_t v195 = v49;
  uint64_t v192 = (void (**)(char *, uint64_t))(v30 + 8);
  while (1)
  {
    uint64_t v197 = v46;
    v50(v51, v183 + v187 * v46, v52);
    uint64_t v53 = (void (*)(char *, char *, uint64_t))v50;
    uint64_t v54 = v52;
    if (one-time initialization token for ignoredApps != -1) {
      swift_once();
    }
    uint64_t v55 = static PhotosAffinityScorer.ignoredApps;
    uint64_t v56 = v199;
    RRCandidate.entity.getter();
    uint64_t v57 = RREntity.appBundleId.getter();
    uint64_t v59 = v58;
    uint64_t v60 = *v195;
    uint64_t v61 = v56;
    uint64_t v62 = v201;
    (*v195)(v61, v201);
    LOBYTE(v57) = specialized Set.contains(_:)(v57, v59, v55);
    uint64_t v63 = v200;
    swift_bridgeObjectRelease();
    v53(v198, v63, v54);
    v194 = v60;
    if (v57)
    {
      LODWORD(v215) = 0;
      uint64_t v64 = v216;
      uint64_t v65 = v192;
    }
    else
    {
      uint64_t v66 = v62;
      uint64_t v67 = v175;
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      v60(v67, v66);
      uint64_t v68 = UsoTask.verbString.getter();
      uint64_t v70 = v69;
      swift_release();
      uint64_t v64 = v216;
      if (one-time initialization token for kUsoCommonAppEntityName != -1) {
        swift_once();
      }
      if (v68 == kUsoCommonAppEntityName._countAndFlagsBits && v70 == kUsoCommonAppEntityName._object) {
        int v71 = 1;
      }
      else {
        int v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t v63 = v200;
      uint64_t v65 = v192;
      LODWORD(v215) = v71;
      swift_bridgeObjectRelease();
    }
    unsigned int v72 = *v65;
    uint64_t v52 = v203;
    (*v65)(v198, v203);
    uint64_t v73 = v193;
    uint64_t v74 = v63;
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v196;
    v196(v193, v63, v52);
    if ((v215 & 1) == 0) {
      goto LABEL_51;
    }
    char v182 = v72;
    int v75 = v176;
    RRCandidate.entity.getter();
    uint64_t v76 = RREntity.metadata.getter();
    v194(v75, v201);
    uint64_t v77 = *(void *)(v76 + 16);
    if (v77)
    {
      unint64_t v78 = v76 + ((*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
      uint64_t v215 = *(void *)(v171 + 72);
      uint64_t v79 = *(void (**)(char *, unint64_t, uint64_t))(v171 + 16);
      uint64_t v188 = v76;
      swift_bridgeObjectRetain();
      unint64_t v80 = MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v81 = v219;
        v79(v219, v78, v4);
        v79(v64, (unint64_t)v81, v4);
        int v82 = (*v212)(v64, v4);
        if (v82 == v211)
        {
          uint64_t v83 = *v204;
          v208 = (void (*)(char *, unint64_t, uint64_t))v80;
          v83(v64, v4);
          char v84 = v64;
          uint64_t v85 = *(void (**)(void, char *, uint64_t))v217;
          uint64_t v86 = v4;
          uint64_t v87 = (void (*)(void, void, void))v220;
          uint64_t v88 = v206;
          (*(void (**)(char *, char *, uint64_t))v217)(v206, v84, v8);
          os_log_type_t v89 = v87;
          uint64_t v90 = v88;
          uint64_t v91 = v87;
          uint64_t v4 = v86;
          v85(v89, v90, v8);
          (*v210)(v91, 0, 1, v8);
          unint64_t v80 = (unint64_t)v208;
          (*v218)(v219, v86);
        }
        else
        {
          uint64_t v92 = v64;
          uint64_t v93 = *v218;
          (*v218)(v92, v4);
          (*v210)(v220, 1, 1, v8);
          v93(v219, v4);
        }
        if ((*v209)(v220, 1, v8) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v220, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        }
        else
        {
          uint64_t v94 = *(void (**)(char *, char *, uint64_t))v217;
          uint64_t v95 = v205;
          (*(void (**)(char *, void *, uint64_t))v217)(v205, v220, v8);
          v94(v214, v95, v8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v80 + 16) + 1, 1, v80);
          }
          unint64_t v97 = *(void *)(v80 + 16);
          unint64_t v96 = *(void *)(v80 + 24);
          uint64_t v98 = v207;
          if (v97 >= v96 >> 1)
          {
            uint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1, v80);
            uint64_t v98 = v207;
            unint64_t v80 = v99;
          }
          *(void *)(v80 + 16) = v97 + 1;
          v94((char *)(v80+ ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))+ *(void *)(v98 + 72) * v97), v214, v8);
        }
        uint64_t v64 = v216;
        v78 += v215;
        --v77;
      }
      while (v77);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v80 = MEMORY[0x1E4FBC860];
    }
    uint64_t v100 = *v181;
    BOOL v101 = v190;
    (*v181)(v190, v174, v8);
    uint64_t v102 = v203;
    uint64_t v215 = *(void *)(v80 + 16);
    if (!v215)
    {
      uint64_t v110 = *v191;
      goto LABEL_39;
    }
    uint64_t v103 = v207;
    unint64_t v170 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
    uint64_t v104 = *(void (**)(void))(v207 + 16);
    uint64_t v105 = v178;
    unint64_t v177 = v80 + v170;
    v208 = (void (*)(char *, unint64_t, uint64_t))v104;
    v104(v178);
    uint64_t v106 = lazy protocol witness table accessor for type UsoEntity_common_PlaybackState.DefinedValues and conformance UsoEntity_common_PlaybackState.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, MEMORY[0x1E4FA3DE8]);
    swift_bridgeObjectRetain();
    uint64_t v188 = v106;
    char v107 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v108 = *(void (**)(char *, uint64_t))(v103 + 8);
    int v109 = v105;
    v108(v105, v8);
    if (v107)
    {
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    uint64_t v179 = v108;
    if (v215 == 1) {
      goto LABEL_37;
    }
    uint64_t v172 = *(void *)(v207 + 72);
    v208(v105, v177 + v172, v8);
    char v111 = dispatch thunk of static Equatable.== infix(_:_:)();
    v179(v105, v8);
    if ((v111 & 1) == 0) {
      break;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    int v108 = v179;
LABEL_46:
    v108(v190, v8);
    v100(v180, v169, v8);
    uint64_t v118 = v173;
    v208(v173, v177, v8);
    swift_bridgeObjectRetain();
    char v119 = dispatch thunk of static Equatable.== infix(_:_:)();
    v108(v118, v8);
    if (v119) {
      goto LABEL_49;
    }
    if (v215 != 1)
    {
      uint64_t v120 = *(void *)(v207 + 72);
      uint64_t v121 = v173;
      v208(v173, v177 + v120, v8);
      char v122 = dispatch thunk of static Equatable.== infix(_:_:)();
      v108(v121, v8);
      if (v122)
      {
LABEL_49:
        swift_bridgeObjectRelease();
        v108(v180, v8);
        uint64_t v112 = v203;
        goto LABEL_50;
      }
      if (v215 != 2)
      {
        unint64_t v124 = v80 + v170 + 2 * v120;
        uint64_t v125 = 2;
        do
        {
          uint64_t v126 = v173;
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v208)(v173, v124, v8);
          uint64_t v127 = v125 + 1;
          if (__OFADD__(v125, 1)) {
            goto LABEL_82;
          }
          unint64_t v128 = (void (*)(void, void))v108;
          uint64_t v129 = v126;
          char v130 = dispatch thunk of static Equatable.== infix(_:_:)();
          int v131 = v129;
          int v108 = (void (*)(char *, uint64_t))v128;
          v128(v131, v8);
          if (v130) {
            goto LABEL_49;
          }
          ++v125;
          v124 += v120;
        }
        while (v127 != v215);
      }
    }
    swift_bridgeObjectRelease();
    v108(v180, v8);
    swift_bridgeObjectRelease();
    uint64_t v52 = v203;
    unsigned int v72 = v182;
    v182(v193, v203);
    uint64_t v132 = v185;
    v196(v185, v200, v52);
    if (one-time initialization token for supportedApps != -1) {
      swift_once();
    }
    uint64_t v133 = static PhotosAffinityScorer.supportedApps;
    uint64_t v134 = v199;
    RRCandidate.entity.getter();
    uint64_t v135 = RREntity.appBundleId.getter();
    uint64_t v137 = v136;
    v194(v134, v201);
    LOBYTE(v135) = specialized Set.contains(_:)(v135, v137, v133);
    swift_bridgeObjectRelease();
    v72(v132, v52);
    uint64_t v51 = v200;
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v196;
    if (v135)
    {
      uint64_t v138 = *v167;
      (*v167)(v168, v200, v52);
      uint64_t v139 = v221;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v139 + 2) + 1, 1);
        uint64_t v139 = v221;
      }
      unint64_t v141 = *((void *)v139 + 2);
      unint64_t v140 = *((void *)v139 + 3);
      if (v141 >= v140 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v140 > 1, v141 + 1, 1);
        uint64_t v139 = v221;
      }
      *((void *)v139 + 2) = v141 + 1;
      uint64_t v52 = v203;
      v138(&v139[v164 + v141 * v187], v168, v203);
      uint64_t v221 = v139;
      uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v196;
      goto LABEL_53;
    }
LABEL_52:
    v72(v51, v52);
LABEL_53:
    uint64_t v46 = v197 + 1;
    if (v197 + 1 == v184)
    {
      char v142 = v221;
      os_log_type_t v143 = (char *)MEMORY[0x1E4FBC860];
      goto LABEL_69;
    }
  }
  if (v215 == 2)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    BOOL v101 = v190;
LABEL_38:
    uint64_t v110 = v179;
LABEL_39:
    uint64_t v112 = v102;
    v110(v101, v8);
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v73 = v193;
    uint64_t v74 = v200;
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v196;
    unsigned int v72 = v182;
    uint64_t v52 = v112;
LABEL_51:
    v72(v73, v52);
    uint64_t v123 = v185;
    v50(v185, (uint64_t)v74, v52);
    v72(v123, v52);
    uint64_t v51 = v74;
    goto LABEL_52;
  }
  unint64_t v113 = v80 + v170 + 2 * v172;
  uint64_t v114 = 2;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v208)(v109, v113, v8);
    uint64_t v116 = v114 + 1;
    if (__OFADD__(v114, 1)) {
      break;
    }
    char v117 = dispatch thunk of static Equatable.== infix(_:_:)();
    v179(v109, v8);
    if (v117) {
      goto LABEL_45;
    }
    ++v114;
    v113 += v172;
    int v109 = v178;
    BOOL v101 = v190;
    if (v116 == v215)
    {
      swift_bridgeObjectRelease();
      uint64_t v102 = v203;
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t specialized PhotosAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for USOParse();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v86 = v7;
  uint64_t v87 = v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v10, v6, v86);
    unint64_t v11 = specialized static AffinityScorerUtils.getTask(_:)();
    if (!v11)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl(&dword_1B9C64000, v33, v34, "[PhotosAffinityScorer] Unable to extract task from uso parse, returning .default", v35, 2u);
        MEMORY[0x1BA9E48C0](v35, -1, -1);
      }

      goto LABEL_17;
    }
    unint64_t v12 = v11;
    uint64_t v85 = a2;
    uint64_t v13 = UsoTask.verbString.getter();
    unint64_t v15 = v14;
    uint64_t v16 = UsoTask.baseEntityAsString.getter();
    uint64_t v18 = v17;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v84 = v20;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v83 = v13;
      uint64_t v24 = v23;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v89 = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v15, &v89);
      unint64_t v82 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, (unint64_t)v18, &v89);
      unint64_t v12 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v21, v22, "[PhotosAffinityScorer] UsoTask for %s:%s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v25, -1, -1);
      uint64_t v26 = v24;
      uint64_t v13 = v83;
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v89 = v13;
    unint64_t v90 = v15;
    swift_bridgeObjectRetain();
    v36._uint64_t countAndFlagsBits = 58;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    swift_bridgeObjectRetain();
    v37._uint64_t countAndFlagsBits = v16;
    v37._object = v18;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    uint64_t v39 = v89;
    uint64_t v38 = v90;
    if (one-time initialization token for supportedIntents != -1) {
      swift_once();
    }
    char v40 = specialized Set.contains(_:)(v39, v38, static PhotosAffinityScorer.supportedIntents);
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        unint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v48 = 0;
        _os_log_impl(&dword_1B9C64000, v46, v47, "[PhotosAffinityScorer] UsoTask (verb + entity combination) is not supported, returning .unsupported", v48, 2u);
        MEMORY[0x1BA9E48C0](v48, -1, -1);
      }

      goto LABEL_41;
    }
    uint64_t v41 = v13;
    SiriEnvironment.salientEntitiesProvider.getter();
    uint64_t v42 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
    swift_release();
    uint64_t v43 = specialized PhotosAffinityScorer.unsupportedAppIsOnScreen(with:)(v42);
    unint64_t v45 = v44;
    swift_bridgeObjectRelease();
    if (v45)
    {
      uint64_t v85 = v43;
      swift_bridgeObjectRelease();
      if (v16 == 0x6E456F4E5F6F7375 && v18 == (void *)0xEC00000079746974)
      {
        swift_bridgeObjectRelease();
LABEL_37:
        swift_bridgeObjectRetain();
        uint64_t v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = (uint8_t *)swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          uint64_t v89 = v64;
          *(_DWORD *)uint64_t v63 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v45, &v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v61, v62, "[PhotosAffinityScorer] UsoTask is shared, unsupported app (%s) is on screen and no entity specified, returning .unsupported", v63, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v64, -1, -1);
          MEMORY[0x1BA9E48C0](v63, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

LABEL_41:
        swift_release();
        (*(void (**)(char *, uint64_t))(v87 + 8))(v10, v86);
        return 0;
      }
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v60) {
        goto LABEL_37;
      }
      swift_bridgeObjectRetain();
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v69, v70))
      {
        int v71 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        uint64_t v89 = v72;
        *(_DWORD *)int v71 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v45, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v69, v70, "[PhotosAffinityScorer] UsoTask is not shared, unsupported app (%s) is on screen, returning .default", v71, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v72, -1, -1);
        MEMORY[0x1BA9E48C0](v71, -1, -1);

LABEL_48:
        swift_release();
LABEL_17:
        (*(void (**)(char *, uint64_t))(v87 + 8))(v10, v86);
        return 2;
      }
      uint64_t v30 = 2;
      swift_bridgeObjectRelease_n();

LABEL_53:
      swift_release();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v10, v86);
      return v30;
    }
    uint64_t v89 = v41;
    unint64_t v90 = v15;
    swift_bridgeObjectRetain();
    v49._uint64_t countAndFlagsBits = 58;
    v49._object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    swift_bridgeObjectRetain();
    v50._uint64_t countAndFlagsBits = v16;
    v50._object = v18;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    uint64_t v52 = v89;
    uint64_t v51 = v90;
    if (one-time initialization token for sharedIntents != -1) {
      swift_once();
    }
    char v53 = specialized Set.contains(_:)(v52, v51, static PhotosAffinityScorer.sharedIntents);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v53 & 1) == 0)
    {
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v68 = 0;
        _os_log_impl(&dword_1B9C64000, v66, v67, "[PhotosAffinityScorer] UsoTask is not shared, returning .default", v68, 2u);
        MEMORY[0x1BA9E48C0](v68, -1, -1);
      }

      goto LABEL_48;
    }
    SiriEnvironment.salientEntitiesProvider.getter();
    uint64_t v54 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
    swift_release();
    char v55 = specialized PhotosAffinityScorer.isMediaPlaying(with:)(v54);
    swift_bridgeObjectRelease();
    if (v55)
    {
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v58 = 0;
        uint64_t v59 = "[PhotosAffinityScorer] UsoTask is shared and media is playing on device, returning .low";
LABEL_56:
        _os_log_impl(&dword_1B9C64000, v56, v57, v59, v58, 2u);
        MEMORY[0x1BA9E48C0](v58, -1, -1);
      }
    }
    else
    {
      SiriEnvironment.salientEntitiesProvider.getter();
      uint64_t v73 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
      swift_release();
      uint64_t v74 = specialized PhotosAffinityScorer.supportedAppIsOnScreen(with:)(v73);
      unint64_t v76 = v75;
      swift_bridgeObjectRelease();
      if (v76)
      {
        unint64_t v82 = v12;
        swift_bridgeObjectRetain();
        uint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v77, v78))
        {
          swift_bridgeObjectRelease_n();

          swift_release();
          (*(void (**)(char *, uint64_t))(v87 + 8))(v10, v86);
          return 3;
        }
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        uint64_t v89 = v80;
        *(_DWORD *)uint64_t v79 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v30 = 3;
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v77, v78, "[PhotosAffinityScorer] UsoTask is shared and supported app (%s) is on screen, returning .high", v79, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v80, -1, -1);
        MEMORY[0x1BA9E48C0](v79, -1, -1);

        goto LABEL_53;
      }
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v58 = 0;
        uint64_t v59 = "[PhotosAffinityScorer] UsoTask is shared and unsupported app is on screen, returning .low";
        goto LABEL_56;
      }
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v10, v86);
    return 1;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v28, v29))
  {

    return 2;
  }
  uint64_t v30 = 2;
  uint64_t v31 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v31 = 0;
  _os_log_impl(&dword_1B9C64000, v28, v29, "[PhotosAffinityScorer] Not a Uso parse, returning .default", v31, 2u);
  MEMORY[0x1BA9E48C0](v31, -1, -1);

  return v30;
}

ValueMetadata *type metadata accessor for PhotosAffinityScorer()
{
  return &type metadata for PhotosAffinityScorer;
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_PlaybackState.DefinedValues and conformance UsoEntity_common_PlaybackState.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()()
{
  return static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()(MEMORY[0x1E4FA1A60]);
}

uint64_t static PlatformErrorActions.renderCompanionHardwareTooOldForPersonalRequests()()
{
  return static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()(MEMORY[0x1E4FA1A58]);
}

uint64_t static PlatformErrorActions.renderUserDataNotSynced()()
{
  return static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()(MEMORY[0x1E4FA1A50]);
}

uint64_t static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()(unsigned int *a1)
{
  uint64_t v2 = type metadata accessor for SiriKitPlatformErrorCase();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *a1, v2);
  SiriKitPlatformErrorCase.makePluginActionToRenderError()();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

ValueMetadata *type metadata accessor for PlatformErrorActions()
{
  return &type metadata for PlatformErrorActions;
}

SiriKitRuntime::PlaybackControlsAffinityScorer __swiftcall PlaybackControlsAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062A40;
  uint64_t v1 = 0xD00000000000002FLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t PlaybackControlsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

void one-time initialization function for kSupportedIdentifierNamespaces()
{
  static PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedIdentifierNamespaces;
}

{
  static SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedIdentifierNamespaces;
}

uint64_t *PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedIdentifierNamespaces != -1) {
    swift_once();
  }
  return &static PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces;
}

uint64_t static PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces.getter()
{
  if (one-time initialization token for kSupportedIdentifierNamespaces != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t PlaybackControlsAffinityScorer.ParseAttributes.hasControlsSupportedIdentifier.getter(char a1)
{
  return a1 & 1;
}

uint64_t PlaybackControlsAffinityScorer.ParseAttributes.hasControlsSupportedIdentifier.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PlaybackControlsAffinityScorer.ParseAttributes.hasControlsSupportedIdentifier.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t PlaybackControlsAffinityScorer.ParseAttributes.hasAirPlaySetting.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t PlaybackControlsAffinityScorer.ParseAttributes.hasAirPlaySetting.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*PlaybackControlsAffinityScorer.ParseAttributes.hasAirPlaySetting.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)()
{
  return specialized static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)() & 0x101;
}

SiriKitRuntime::PlaybackControlsAffinityScorer::ParseAttributes __swiftcall PlaybackControlsAffinityScorer.ParseAttributes.init(hasControlsSupportedIdentifier:hasAirPlaySetting:)(Swift::Bool hasControlsSupportedIdentifier, Swift::Bool hasAirPlaySetting)
{
  if (hasAirPlaySetting) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return (SiriKitRuntime::PlaybackControlsAffinityScorer::ParseAttributes)(v2 & 0xFFFE | hasControlsSupportedIdentifier);
}

ValueMetadata *type metadata accessor for PlaybackControlsAffinityScorer()
{
  return &type metadata for PlaybackControlsAffinityScorer;
}

uint64_t storeEnumTagSinglePayload for PlaybackControlsAffinityScorer.ParseAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)SiriKitRuntime::PlaybackControlsAffinityScorer result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9F6B91CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)SiriKitRuntime::PlaybackControlsAffinityScorer result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackControlsAffinityScorer.ParseAttributes()
{
  return &type metadata for PlaybackControlsAffinityScorer.ParseAttributes;
}

void *PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getObjectType();

  return specialized PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a1, a2, a3, a4, a5);
}

void *PreExecutionActionHandler.serverFallbackWithNoConnectionCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.serverFallbackWithNoConnectionCatId;
}

unint64_t static PreExecutionActionHandler.serverFallbackWithNoConnectionCatId.getter()
{
  return 0xD000000000000022;
}

void *PreExecutionActionHandler.serverFallbackWithAirplaneModeCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.serverFallbackWithAirplaneModeCatId;
}

unint64_t static PreExecutionActionHandler.serverFallbackWithAirplaneModeCatId.getter()
{
  return 0xD000000000000022;
}

void *PreExecutionActionHandler.announceCallsUnrelatedFollowupCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.announceCallsUnrelatedFollowupCatId;
}

unint64_t static PreExecutionActionHandler.announceCallsUnrelatedFollowupCatId.getter()
{
  return 0xD000000000000032;
}

void *PreExecutionActionHandler.activePhoneCallUnrelatedFollowupCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.activePhoneCallUnrelatedFollowupCatId;
}

unint64_t static PreExecutionActionHandler.activePhoneCallUnrelatedFollowupCatId.getter()
{
  return 0xD00000000000002BLL;
}

void *PreExecutionActionHandler.activePhoneCallHangUpOnlyCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.activePhoneCallHangUpOnlyCatId;
}

unint64_t static PreExecutionActionHandler.activePhoneCallHangUpOnlyCatId.getter()
{
  return 0xD000000000000035;
}

void *PreExecutionActionHandler.init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getObjectType();

  return specialized PreExecutionActionHandler.init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a1, a2, a3, a4, a5, v5);
}

uint64_t PreExecutionActionHandler.getPreExecutionMitigationDecision(rcState:inputOrigin:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  unsigned int v6 = &v50[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  char v53 = &v50[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v12 = &v50[-v11];
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = &v50[-v13];
  uint64_t v15 = type metadata accessor for TTResponseMessage.MitigationDecision();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v52 = &v50[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = &v50[-v20];
  int v56 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(v19);
  os_log_type_t v22 = *(uint64_t (**)(unsigned char *))(v16 + 104);
  unsigned int v54 = *MEMORY[0x1E4FA2078];
  uint64_t v23 = v22(v21);
  (*(void (**)(uint64_t))(*(void *)a1 + 544))(v23);
  unsigned int v55 = *MEMORY[0x1E4FA2080];
  os_log_type_t v57 = (uint64_t (*)(void))v22;
  uint64_t v58 = v16 + 104;
  v22(v12);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  uint64_t v24 = (uint64_t)&v6[*(int *)(v4 + 56)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t)v6, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v12, v24, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v60 = v16;
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v25((uint64_t)v6, 1, v15) != 1)
  {
    uint64_t v31 = v53;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t)v53, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    if (v25(v24, 1, v15) != 1)
    {
      uint64_t v32 = v60;
      uint64_t v33 = v52;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v60 + 32))(v52, v24, v15);
      lazy protocol witness table accessor for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, MEMORY[0x1E4FA2088]);
      int v51 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v34 = v32;
      uint64_t v35 = *(void (**)(unsigned char *, uint64_t))(v32 + 8);
      v35(v33, v15);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      v35(v31, v15);
      uint64_t v27 = v34;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      os_log_type_t v29 = (void (*)(unsigned char *, uint64_t, uint64_t))v57;
      uint64_t v30 = v55;
      unsigned __int8 v28 = v56;
      if ((v51 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_8;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    uint64_t v27 = v60;
    (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v31, v15);
    unsigned __int8 v28 = v56;
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
    os_log_type_t v29 = (void (*)(unsigned char *, uint64_t, uint64_t))v57;
    LODWORD(v30) = v55;
    goto LABEL_17;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  unsigned int v26 = v25(v24, 1, v15);
  uint64_t v27 = v60;
  unsigned __int8 v28 = v56;
  if (v26 != 1) {
    goto LABEL_6;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  os_log_type_t v29 = (void (*)(unsigned char *, uint64_t, uint64_t))v57;
  uint64_t v30 = v55;
LABEL_8:
  if (PreExecutionDecision.rawValue.getter(v28) == 0xD000000000000019 && v36 == 0x80000001BA060BC0) {
    goto LABEL_16;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {
    if (PreExecutionDecision.rawValue.getter(v28) == 0xD000000000000010 && v38 == 0x80000001BA060CA0) {
      goto LABEL_16;
    }
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v39 & 1) == 0)
    {
      if (PreExecutionDecision.rawValue.getter(v28) == 0xD000000000000017 && v40 == 0x80000001BA060CC0)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0)
      {
        (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v21, v15);
        v29(v21, v30, v15);
        return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v27 + 32))(v59, v21, v15);
      }
    }
  }
LABEL_17:
  if (((1 << v28) & 0x177) != 0) {
    unsigned int v41 = v30;
  }
  else {
    unsigned int v41 = v54;
  }
  if (v28 <= 8u) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = v54;
  }
  uint64_t v43 = *(void (**)(unsigned char *, uint64_t))(v27 + 8);
  v43(v21, v15);
  v29(v21, v42, v15);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.conversationBridge);
  unint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    os_log_type_t v47 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v47 = 134217984;
    swift_beginAccess();
    uint64_t v61 = TTResponseMessage.MitigationDecision.rawValue.getter();
    uint64_t v27 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v45, v46, "preExecution Mitigation Decision %ld", v47, 0xCu);
    MEMORY[0x1BA9E48C0](v47, -1, -1);
  }

  swift_beginAccess();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v27 + 16))(v59, v21, v15);
  return ((uint64_t (*)(unsigned char *, uint64_t))v43)(v21, v15);
}

uint64_t PreExecutionActionHandler.rejectUnrelatedAnnounceCallsFollowup(requestId:rcId:catId:userId:meetsUserSessionThreshold:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return PreExecutionActionHandler.rejectUnrelatedAnnounceCallsFollowup(requestId:rcId:catId:userId:meetsUserSessionThreshold:)(a1, a2, a3, a4, a5, a6, a7, a8, "Rejecting this request: %s because it's an unrelated followup to an announced call.", (uint64_t)&unk_1F137FFB0, (uint64_t)closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)partial apply);
}

uint64_t PreExecutionActionHandler.rejectRequestSinceUserIsOnCall(requestId:rcId:userId:meetsUserSessionThreshold:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v27 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v11, v12, "Rejecting this request: %s since user is on a phone call", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v15 = 0xD00000000000002BLL;
  if ((AFSupportsSiriInCall() & 1) != 0 || (AFSupportsCallHangUp() & 1) == 0)
  {
    uint64_t v16 = "ActivePhoneCall#UnsupportedDuringActiveCall";
  }
  else
  {
    unint64_t v15 = 0xD000000000000035;
    uint64_t v16 = "ActivePhoneCall#UnsupportedDuringActiveCallHangUpOnly";
  }
  unint64_t v17 = (unint64_t)(v16 - 32) | 0x8000000000000000;
  unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v19 = *(void *)(v7 + 48);
  uint64_t v20 = (void *)swift_allocObject();
  _OWORD v20[2] = v7;
  v20[3] = a1;
  v20[4] = a2;
  uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, void, _BYTE, unint64_t, void, uint64_t (*)(char), void *))(*(void *)v19 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  v21(a1, a2, a3, a4, v15, v17, a5, a6 & 1, 0, v18, 0, partial apply for closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:), v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void PreExecutionActionHandler.rejectNonActiveSessionUserRequest(requestId:rcId:userId:meetsUserSessionThreshold:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v40 = a4;
  int v38 = a6;
  uint64_t v37 = a3;
  uint64_t v36 = type metadata accessor for UserID();
  uint64_t v9 = *(void *)(v36 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v36);
  uint64_t v35 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v11 = a1;
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v33 = a1;
  unint64_t v34 = a2;
  if (v15)
  {
    uint64_t v32 = a5;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    aBlock[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, a2, aBlock);
    a5 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v13, v14, "Rejecting this request: %s because it's an unrelated followup to an announced call.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    MEMORY[0x1BA9E48C0](v16, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4E4E8]), sel_init);
  uint64_t v19 = UserID.sharedUserId.getter();
  uint64_t v20 = (void *)MEMORY[0x1BA9E2DD0](v19);
  swift_bridgeObjectRelease();
  uint64_t v21 = v35;
  uint64_t v22 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v35, a5, v36);
  unint64_t v23 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v24 = (v10 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v26 + v23, v21, v22);
  *(void *)(v26 + v24) = v39;
  uint64_t v27 = (uint64_t *)(v26 + v25);
  unint64_t v28 = v34;
  *uint64_t v27 = v33;
  v27[1] = v28;
  unint64_t v29 = v26 + ((v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v40;
  *(void *)unint64_t v29 = v37;
  *(void *)(v29 + 8) = v30;
  *(unsigned char *)(v29 + 16) = v38 & 1;
  aBlock[4] = (uint64_t)partial apply for closure #1 in PreExecutionActionHandler.rejectNonActiveSessionUserRequest(requestId:rcId:userId:meetsUserSessionThreshold:);
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_30;
  uint64_t v31 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v18, sel_getFirstNameForSharedUserId_completion_, v20, v31);
  _Block_release(v31);
}

uint64_t closure #1 in PreExecutionActionHandler.rejectNonActiveSessionUserRequest(requestId:rcId:userId:meetsUserSessionThreshold:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v60 = a7;
  uint64_t v61 = a8;
  uint64_t v62 = a4;
  uint64_t v58 = a9;
  uint64_t v59 = a6;
  uint64_t v14 = type metadata accessor for UserID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    id v18 = a3;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v62, v14);
    id v20 = a3;
    id v21 = a3;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v25 = swift_slowAlloc();
      os_log_t v55 = v22;
      uint64_t v26 = v25;
      unsigned int v54 = (void *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v64 = v56;
      *(_DWORD *)uint64_t v26 = 136315394;
      HIDWORD(v53) = v24;
      uint64_t v27 = UserID.sharedUserId.getter();
      uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v64);
      uint64_t v57 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      *(_WORD *)(v26 + 12) = 2112;
      id v29 = a3;
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v63 = v30;
      a2 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v31 = v54;
      void *v54 = v30;

      os_log_t v32 = v55;
      _os_log_impl(&dword_1B9C64000, v55, BYTE4(v53), "Error attempting to read first name of user %s for dialog purposes. Error: %@", (uint8_t *)v26, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      uint64_t v33 = v56;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v33, -1, -1);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    }
  }
  LODWORD(v57) = a10;
  if (a2)
  {
    id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F968C8]), sel_init);
    uint64_t v35 = v34;
    if (v34)
    {
      id v36 = v34;
      uint64_t v37 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
      objc_msgSend(v36, sel_setFirstName_, v37);
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  id v38 = v35;
  uint64_t v56 = static UserIdentityCheckResponseProvider.activeSessionUserNotRecognizedCatInfo(activeSessionUser:deviceName:)();
  uint64_t v40 = v39;
  uint64_t v42 = v41;

  type metadata accessor for UserIdentityCheckFlow();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v44 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v45 = *(void *)(a5 + 48);
  os_log_type_t v46 = (void *)swift_allocObject();
  uint64_t v47 = a5;
  unint64_t v48 = v46;
  uint64_t v49 = v59;
  uint64_t v50 = v60;
  v46[2] = v47;
  v46[3] = v49;
  uint64_t v46[4] = v50;
  int v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, id, uint64_t (*)(), void *))(*(void *)v45 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  v51(v49, v50, v61, v58, v56, v40, v62, v57 & 1, 1, v42, v44, closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)partial apply, v48);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void PreExecutionActionHandler.mitigateDueToEmptyASR(requestId:)(uint64_t a1, unint64_t a2)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Mitigating this request: %s due to empty ASR", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(a1, a2, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v11, v12, "RequestID: %s has been mitigated", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void PreExecutionActionHandler.mitigateRequest(requestId:dismissUI:logToStream:mitigatedByURS:)(uint64_t a1, unint64_t a2, char a3, char a4, char a5)
{
  os_log_type_t v6 = v5;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v29 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v27 = v6;
    swift_bridgeObjectRetain();
    uint64_t v16 = a1;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2080;
    if (a5) {
      uint64_t v17 = 7562585;
    }
    else {
      uint64_t v17 = 28494;
    }
    if (a5) {
      unint64_t v18 = 0xE300000000000000;
    }
    else {
      unint64_t v18 = 0xE200000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v6 = v27;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v12, v13, "Mitigating this request: %s. Requested to mitigate by Speech: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v15, -1, -1);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {
    uint64_t v16 = a1;

    swift_bridgeObjectRelease_n();
  }
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.insightRequestSummaryLogger);
  swift_bridgeObjectRetain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v20, v16, a2, a3 & 1, a5 & 1);
  swift_bridgeObjectRelease();
  if (a3)
  {
    if (a4) {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*v6[3] + 176))(v16, a2, 2);
    }
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(v16, a2, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v29 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, a2, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v23, v24, "RequestID: %s has been mitigated", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v26, -1, -1);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    ((void (*)(uint64_t, unint64_t))(*v6)[29])(v16, a2);
  }
}

void PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = a4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  os_log_type_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96AE0]), sel_init);
  UUID.init()();
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v17 = (void *)MEMORY[0x1BA9E2DD0](v14, v16);
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_setAceId_, v17);

  id v18 = v13;
  uint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  objc_msgSend(v18, sel_setRefId_, v19);

  uint64_t v20 = (void *)MEMORY[0x1BA9E2DD0](a3, v25);
  objc_msgSend(v18, sel_setReason_, v20);

  uint64_t v21 = *(void **)(v5 + 16);
  aBlock[4] = closure #1 in PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_12;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = v18;
  objc_msgSend(v21, sel_handleCommand_completion_, v23, v22);
  _Block_release(v22);

  PreExecutionActionHandler.cancelRequest(requestId:)(a1, a2);
}

void closure #1 in PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(uint64_t a1, void *a2)
{
}

uint64_t PreExecutionActionHandler.rejectOfflineServerFallback(requestId:rcId:catId:userId:meetsUserSessionThreshold:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return PreExecutionActionHandler.rejectUnrelatedAnnounceCallsFollowup(requestId:rcId:catId:userId:meetsUserSessionThreshold:)(a1, a2, a3, a4, a5, a6, a7, a8, "Rejecting this request: %s because it's an offline server fallback", (uint64_t)&unk_1F137FFD8, (uint64_t)closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)partial apply);
}

uint64_t PreExecutionActionHandler.rejectUnrelatedAnnounceCallsFollowup(requestId:rcId:catId:userId:meetsUserSessionThreshold:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, const char *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v30 = a6;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = a7;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v35 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v18, v19, a9, v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v21;
    a7 = v29;
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    id v23 = v20;
    a6 = v30;
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v25 = *(void *)(v12 + 48);
  uint64_t v26 = (void *)swift_allocObject();
  void v26[2] = v12;
  v26[3] = a1;
  v26[4] = a2;
  uint64_t v27 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, char, unint64_t, void, uint64_t, void *))(*(void *)v25 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  v27(a1, a2, a3, a4, a5, a6, a7, a8 & 1, 1, v24, 0, a11, v26);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = static MessageBusActor.shared;
  uint64_t v14 = lazy protocol witness table accessor for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v14;
  *(unsigned char *)(v15 + 32) = a1 & 1;
  *(void *)(v15 + 40) = a2;
  *(void *)(v15 + 48) = a3;
  *(void *)(v15 + 56) = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:), v15);
  return swift_release();
}

uint64_t closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a7;
  *(void *)(v7 + 40) = a5;
  *(unsigned char *)(v7 + 64) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:), v8, 0);
}

uint64_t closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)()
{
  uint64_t v1 = **(void **)(v0 + 40);
  if (*(unsigned char *)(v0 + 64) == 1) {
    __int16 v2 = (void (**)(void, void))(v1 + 232);
  }
  else {
    __int16 v2 = (void (**)(void, void))(v1 + 224);
  }
  (*v2)(*(void *)(v0 + 48), *(void *)(v0 + 56));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

Swift::Void __swiftcall PreExecutionActionHandler.failRequest(requestId:)(Swift::String requestId)
{
}

void closure #1 in PreExecutionActionHandler.failRequest(requestId:)(uint64_t a1, uint64_t a2)
{
}

Swift::Void __swiftcall PreExecutionActionHandler.completeRequest(requestId:)(Swift::String requestId)
{
}

void PreExecutionActionHandler.failRequest(requestId:)(uint64_t a1, uint64_t a2, const char *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1B9C64000, v15, v16, a3, v17, 2u);
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }

  id v18 = objc_msgSend(objc_allocWithZone(*a4), sel_init);
  UUID.init()();
  uint64_t v19 = UUID.uuidString.getter();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v22 = (void *)MEMORY[0x1BA9E2DD0](v19, v21);
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setAceId_, v22);

  id v23 = v18;
  unint64_t v24 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  objc_msgSend(v23, sel_setRefId_, v24);

  uint64_t v25 = *(void **)(v28[1] + 16);
  aBlock[4] = v29;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = v30;
  uint64_t v26 = _Block_copy(aBlock);
  id v27 = v23;
  objc_msgSend(v25, sel_handleCommand_completion_, v27, v26);
  _Block_release(v26);
}

void closure #1 in PreExecutionActionHandler.completeRequest(requestId:)(uint64_t a1, uint64_t a2)
{
}

void closure #1 in PreExecutionActionHandler.failRequest(requestId:)(uint64_t a1, uint64_t a2, const char *a3)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  oschar log = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v6 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v5, a3, v6, 2u);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
}

void PreExecutionActionHandler.cancelRequest(requestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96590]), sel_init);
  UUID.init()();
  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](v11, v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setAceId_, v14);

  uint64_t v15 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  objc_msgSend(v10, sel_setRefId_, v15);

  os_log_type_t v16 = *(void **)(v3 + 16);
  aBlock[4] = closure #1 in PreExecutionActionHandler.cancelRequest(requestId:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_9_1;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v10;
  objc_msgSend(v16, sel_handleCommand_completion_, v18, v17);
  _Block_release(v17);
}

void closure #1 in PreExecutionActionHandler.cancelRequest(requestId:)(uint64_t a1, void *a2)
{
}

void closure #1 in PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(uint64_t a1, void *a2, const char *a3)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  id v6 = a2;
  id v7 = a2;
  oschar log = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    uint64_t v11 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, oslog, v8, a3, v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
  }
}

uint64_t PreExecutionActionHandler.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return v0;
}

uint64_t PreExecutionActionHandler.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

void *specialized PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for PreExecutionActionHandler();
  uint64_t v10 = (void *)swift_allocObject();

  return specialized PreExecutionActionHandler.init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a1, a2, a3, a4, a5, v10);
}

void *specialized PreExecutionActionHandler.init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[2] = a1;
  a6[3] = a2;
  a6[4] = a3;
  a6[5] = a4;
  a6[6] = a5;
  type metadata accessor for MitigationDismissalHelper();
  swift_allocObject();
  a6[7] = MitigationDismissalHelper.init()();
  return a6;
}

uint64_t type metadata accessor for PreExecutionActionHandler()
{
  return self;
}

uint64_t method lookup function for PreExecutionActionHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PreExecutionActionHandler);
}

uint64_t dispatch thunk of PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of PreExecutionActionHandler.getPreExecutionMitigationDecision(rcState:inputOrigin:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PreExecutionActionHandler.actOnPreExecutionDecision(rcState:requestId:inputOrigin:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PreExecutionActionHandler.failRequest(requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PreExecutionActionHandler.completeRequest(requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t partial apply for closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)(char a1)
{
  return closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t lazy protocol witness table accessor for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B9F6EA60()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:)(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1B9F6EB88()
{
  uint64_t v1 = type metadata accessor for UserID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v6 + 17, v5);
}

uint64_t partial apply for closure #1 in PreExecutionActionHandler.rejectNonActiveSessionUserRequest(requestId:rcId:userId:meetsUserSessionThreshold:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for UserID() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in PreExecutionActionHandler.rejectNonActiveSessionUserRequest(requestId:rcId:userId:meetsUserSessionThreshold:)(a1, a2, a3, v3 + v8, *(void *)(v3 + v9), *(void *)(v3 + v10), *(void *)(v3 + v10 + 8), *(void *)(v3 + ((v10 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3 + ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(v3 + ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 16));
}

uint64_t objectdestroyTm_6()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreExecutionDecision(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = PreExecutionDecision.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == PreExecutionDecision.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PreExecutionDecision()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PreExecutionDecision.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PreExecutionDecision()
{
  PreExecutionDecision.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PreExecutionDecision()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PreExecutionDecision.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PreExecutionDecision@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized PreExecutionDecision.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PreExecutionDecision@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PreExecutionDecision.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t specialized PreExecutionDecision.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PreExecutionDecision.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xD) {
    return 13;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type PreExecutionDecision and conformance PreExecutionDecision()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExecutionDecision and conformance PreExecutionDecision;
  if (!lazy protocol witness table cache variable for type PreExecutionDecision and conformance PreExecutionDecision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExecutionDecision and conformance PreExecutionDecision);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PreExecutionDecision(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9F6F140);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PreExecutionDecision()
{
  return &type metadata for PreExecutionDecision;
}

uint64_t PreExecutionDecisionMaker.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PreExecutionDecisionMaker.init()()
{
  return v0;
}

uint64_t PreExecutionDecisionMaker.deinit()
{
  return v0;
}

uint64_t PreExecutionDecisionMaker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PreExecutionDecisionMaker()
{
  return self;
}

uint64_t method lookup function for PreExecutionDecisionMaker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PreExecutionDecisionMaker);
}

uint64_t dispatch thunk of PreExecutionDecisionMaker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of PreExecutionDecisionMaker.evaluate(rules:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t PreExecutionDialogHandler.__allocating_init(executionOutputSubmitter:preferences:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t PreExecutionDialogHandler.init(executionOutputSubmitter:preferences:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

void PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, uint64_t a10, void *a11, void (*a12)(void), uint64_t a13)
{
  uint64_t v44 = a7;
  uint64_t v45 = a5;
  uint64_t v46 = a1;
  uint64_t v17 = type metadata accessor for UserID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v21 = PreExecutionDialogHandler.createCATContext()();
  if (v21)
  {
    uint64_t v39 = a12;
    id v41 = v21;
    int v42 = a8;
    uint64_t v43 = a2;
    int v36 = a9;
    if (a11)
    {
      id v40 = a11;
    }
    else
    {
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v40 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    }
    id v38 = self;
    id v23 = a11;
    uint64_t v24 = v45;
    uint64_t v37 = MEMORY[0x1BA9E2DD0](v45, a6);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(a10);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v44, v17);
    unint64_t v25 = (*(unsigned __int8 *)(v18 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    uint64_t v26 = v25 + v19;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v39;
    *(void *)(v27 + 24) = a13;
    *(void *)(v27 + 32) = v24;
    *(void *)(v27 + 40) = a6;
    uint64_t v28 = v46;
    *(void *)(v27 + 48) = v13;
    *(void *)(v27 + 56) = v28;
    *(void *)(v27 + 64) = v43;
    *(unsigned char *)(v27 + 72) = v36 & 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v27 + v25, v20, v17);
    *(unsigned char *)(v27 + v26) = v42 & 1;
    aBlock[4] = partial apply for closure #1 in PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:completion:);
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_18;
    uint64_t v29 = _Block_copy(aBlock);
    id v30 = v41;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v31 = (void *)v37;
    os_log_t v32 = v40;
    Class v33 = isa;
    objc_msgSend(v38, sel_execute_catId_parameters_globals_completion_, v40, v37, isa, v30, v29);
    _Block_release(v29);
  }
  else
  {
    a12();
  }
}

void closure #1 in PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:completion:)(uint64_t a1, id a2, void (*a3)(void), uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
  {
    id v15 = a2;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    id v17 = a2;
    id v18 = a2;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)id v21 = 138412290;
      id v23 = a2;
      uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v39;

      _os_log_impl(&dword_1B9C64000, v19, v20, "CAT.execute failed: %@", v21, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
    else
    {
    }
    a3(0);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      int v36 = a3;
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = a4;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v39 = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v29, v30, "Submitting executionOutput for catId %s", v31, 0xCu);
      swift_arrayDestroy();
      uint64_t v33 = v32;
      a4 = v37;
      MEMORY[0x1BA9E48C0](v33, -1, -1);
      uint64_t v34 = v31;
      a3 = v36;
      MEMORY[0x1BA9E48C0](v34, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a7 + 128))(a1, a8, a9, a10 & 1);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, void, void (*)(void), uint64_t))(*(void *)a7 + 112))(v35, a8, a9, a11, a12 & 1, a3, a4);
  }
}

uint64_t PreExecutionDialogHandler.submitAddViews(addViews:requestId:userId:meetsUserSessionThreshold:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a6;
  uint64_t v60 = a7;
  int v57 = a5;
  uint64_t v55 = a4;
  uint64_t v51 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v56 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UserID();
  uint64_t v53 = *(void *)(v11 - 8);
  uint64_t v54 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v52 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for RequestType();
  uint64_t v48 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v47 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  id v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  os_log_type_t v20 = (char *)&v47 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v47 - v25;
  uint64_t v27 = type metadata accessor for FlowOutputMessage.InAppResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v20, *MEMORY[0x1E4FA24B8], v14);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
  outlined init with copy of FlowOutputMessage.InAppResponse?((uint64_t)v26, (uint64_t)v24);
  id v28 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  uint64_t v49 = a3;
  swift_bridgeObjectRetain();
  id v29 = a1;
  uint64_t v46 = a3;
  uint64_t v30 = v51;
  id v31 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(a1, 0, 0, 0, 0, 0, 0, 0, 0, 0, v51, v46, (uint64_t)v18, (uint64_t)v24);

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  uint64_t v32 = v47;
  uint64_t v33 = v48;
  uint64_t v34 = v50;
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v47, *MEMORY[0x1E4FA2448], v50);
  int v36 = v52;
  uint64_t v35 = v53;
  uint64_t v37 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v55, v54);
  type metadata accessor for ConversationContextUpdateMetadata();
  uint64_t v38 = swift_allocObject();
  *(unsigned char *)(v38 + 16) = 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v38 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v32, v34);
  *(void *)(v38 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v38 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v36, v37);
  *(unsigned char *)(v38 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
  *(unsigned char *)(v38 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = v57;
  uint64_t v39 = *(void *)(v58 + 16);
  uint64_t v40 = type metadata accessor for UUID();
  memset(v61, 0, sizeof(v61));
  uint64_t v62 = 0;
  uint64_t v41 = (uint64_t)v56;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v56, 1, 1, v40);
  uint64_t v42 = swift_allocObject();
  uint64_t v43 = v60;
  *(void *)(v42 + 16) = v59;
  *(void *)(v42 + 24) = v43;
  uint64_t v44 = *(void (**)(id, uint64_t, uint64_t, void, void, _OWORD *, void, uint64_t, void, void, uint64_t, void, void, uint64_t (*)(), uint64_t))(*(void *)v39 + 296);
  swift_retain();
  swift_retain();
  v44(v31, v30, v49, 0, 0, v61, 0, v38, 0, 0, v41, 0, 0, partial apply for closure #1 in PreExecutionDialogHandler.submitAddViews(addViews:requestId:userId:meetsUserSessionThreshold:completion:), v42);

  swift_release_n();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v41, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v61, &demangling cache variable for type metadata for ContextUpdating?);
}

id PreExecutionDialogHandler.createCATContext()()
{
  char v1 = *(void **)(v0 + 24);
  id v2 = objc_msgSend(v1, sel_languageCode);
  if (!v2)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_14;
    }
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v20 = 0;
    uint64_t v21 = "Unable to retrieve input language code";
    goto LABEL_13;
  }
  int v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  id v7 = objc_msgSend(v1, sel_outputVoice);
  if (!v7
    || (char v8 = v7, v9 = objc_msgSend(v7, sel_languageCode), v8, !v9))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_14;
    }
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v20 = 0;
    uint64_t v21 = "Unable to retrieve outputVoice language code";
LABEL_13:
    _os_log_impl(&dword_1B9C64000, v18, v19, v21, v20, 2u);
    MEMORY[0x1BA9E48C0](v20, -1, -1);
LABEL_14:

    return 0;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  id v13 = objc_allocWithZone(MEMORY[0x1E4F5F3F0]);
  uint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](v4, v6);
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)MEMORY[0x1BA9E2DD0](v10, v12);
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_initWithInputLocale_outputVoiceLocale_, v14, v15);

  return v16;
}

uint64_t sub_1B9F7028C()
{
  uint64_t v1 = type metadata accessor for UserID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 73) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6, v5);
}

void partial apply for closure #1 in PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:completion:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UserID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  closure #1 in PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:completion:)(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(unsigned char *)(v2 + 72), v2 + v6, *(unsigned char *)(v2 + v6 + *(void *)(v5 + 64)));
}

id PreExecutionDialogHandler.generateAddViewsForCATResult(result:requestId:shouldSpeak:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96AD0]), sel_init);
  id v9 = objc_allocWithZone(MEMORY[0x1E4F29128]);
  id v10 = v8;
  id v11 = objc_msgSend(v9, sel_init);
  id v12 = objc_msgSend(v11, sel_UUIDString);

  if (!v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v12 = (id)MEMORY[0x1BA9E2DD0](v13);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v10, sel_setAceId_, v12);

  id v14 = v10;
  uint64_t v15 = (void *)MEMORY[0x1BA9E2DD0](a2, a3);
  objc_msgSend(v14, sel_setRefId_, v15);

  id v16 = objc_msgSend(a1, sel_print);
  uint64_t v17 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17[2])
  {
    uint64_t v18 = v17[4];
    uint64_t v19 = v17[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_log_type_t v20 = (void *)MEMORY[0x1BA9E2DD0](v18, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v20 = 0;
  }
  objc_msgSend(v14, sel_setText_, v20);

  id v21 = objc_msgSend(a1, sel_dialogId);
  uint64_t v22 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v22[2])
  {
    uint64_t v23 = v22[4];
    uint64_t v24 = v22[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](v23, v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = 0;
  }
  objc_msgSend(v14, sel_setDialogIdentifier_, v25);

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v26 = v14;
  Class isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
  objc_msgSend(v26, sel_setListenAfterSpeaking_, isa);

  id v28 = objc_msgSend(a1, sel_meta);
  uint64_t v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v29 + 16)
    && (unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(0x79726F6765746163, 0xE800000000000000), (v31 & 1) != 0))
  {
    uint64_t v32 = (uint64_t *)(*(void *)(v29 + 56) + 16 * v30);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v35 = (void *)MEMORY[0x1BA9E2DD0](v33, v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = 0;
  }
  objc_msgSend(v26, sel_setDialogCategory_, v35);

  if (a4)
  {
    id v36 = v26;
    id v37 = objc_msgSend(a1, sel_print);
    uint64_t v38 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v38[2])
    {
      uint64_t v39 = v38[4];
      uint64_t v40 = v38[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v41 = (void *)MEMORY[0x1BA9E2DD0](v39, v40);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v41 = 0;
    }
    objc_msgSend(v36, sel_setSpeakableText_, v41);
  }
  id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96AC0]), sel_init);
  id v43 = objc_allocWithZone(MEMORY[0x1E4F29128]);
  id v44 = v42;
  id v45 = objc_msgSend(v43, sel_init);
  id v46 = objc_msgSend(v45, sel_UUIDString);

  if (!v46)
  {
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v46 = (id)MEMORY[0x1BA9E2DD0](v47);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v44, sel_setAceId_, v46);

  id v48 = v44;
  uint64_t v49 = (void *)MEMORY[0x1BA9E2DD0](a2, a3);
  objc_msgSend(v48, sel_setRefId_, v49);

  objc_msgSend(v48, sel_setDialogPhase_, *MEMORY[0x1E4F977A8]);
  objc_msgSend(v48, sel_setDisplayTarget_, *MEMORY[0x1E4F977E0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1BA0578E0;
  *(void *)(v50 + 32) = v26;
  specialized Array._endMutation()();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  id v51 = v26;
  Class v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v48, sel_setViews_, v52);

  return v48;
}

uint64_t PreExecutionDialogHandler.deinit()
{
  swift_release();

  return v0;
}

uint64_t PreExecutionDialogHandler.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1B9F70A18()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PreExecutionDialogHandler.submitAddViews(addViews:requestId:userId:meetsUserSessionThreshold:completion:)()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t type metadata accessor for PreExecutionDialogHandler()
{
  return self;
}

uint64_t method lookup function for PreExecutionDialogHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PreExecutionDialogHandler);
}

uint64_t dispatch thunk of PreExecutionDialogHandler.__allocating_init(executionOutputSubmitter:preferences:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:meetsUserSessionThreshold:shouldSpeak:parameters:catSource:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PreExecutionDialogHandler.submitAddViews(addViews:requestId:userId:meetsUserSessionThreshold:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PreExecutionDialogHandler.generateAddViewsForCATResult(result:requestId:shouldSpeak:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PreExecutionRule.ruleType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PreExecutionRule.evaluate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

unint64_t PreExecutionRuleType.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000021;
      break;
    case 2:
      unint64_t result = 0xD000000000000023;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000022;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0x5253417974706D65;
      break;
    case 7:
      unint64_t result = 1701736302;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreExecutionRuleType(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = PreExecutionRuleType.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == PreExecutionRuleType.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PreExecutionRuleType()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PreExecutionRuleType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PreExecutionRuleType()
{
  PreExecutionRuleType.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PreExecutionRuleType()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PreExecutionRuleType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PreExecutionRuleType@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized PreExecutionRuleType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PreExecutionRuleType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PreExecutionRuleType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t specialized PreExecutionRuleType.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PreExecutionRuleType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type PreExecutionRuleType and conformance PreExecutionRuleType()
{
  unint64_t result = lazy protocol witness table cache variable for type PreExecutionRuleType and conformance PreExecutionRuleType;
  if (!lazy protocol witness table cache variable for type PreExecutionRuleType and conformance PreExecutionRuleType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExecutionRuleType and conformance PreExecutionRuleType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PreExecutionRuleType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9F70FE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PreExecutionRuleType()
{
  return &type metadata for PreExecutionRuleType;
}

uint64_t static ReactiveUIEventActor.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

Swift::Void __swiftcall ReactiveUIEventActor.run()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  unsigned int v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 128) == 1)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    os_log_t v17 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl(&dword_1B9C64000, v17, v6, "[ReactiveEventActor] already running.", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    os_log_t v8 = v17;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v11, "[ReactiveEventActor] Starting EncoreEvent Loop.", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }

    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
    unint64_t v14 = lazy protocol witness table accessor for type ReactiveUIEventActor and conformance ReactiveUIEventActor();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v1;
    v15[3] = v14;
    v15[4] = v1;
    swift_retain_n();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in ReactiveUIEventActor.run(), (uint64_t)v15);
    swift_release();
  }
}

uint64_t closure #1 in ReactiveUIEventActor.run()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<EncoreEvent>);
  v4[4] = v6;
  v4[5] = *(void *)(v6 - 8);
  v4[6] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEvent>.Iterator);
  v4[7] = v7;
  v4[8] = *(void *)(v7 - 8);
  v4[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in ReactiveUIEventActor.run(), a4, 0);
}

uint64_t closure #1 in ReactiveUIEventActor.run()()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  type metadata accessor for EncoreService();
  unsigned int v4 = (void *)dispatch thunk of static EncoreService.service.getter();
  dispatch thunk of AsyncService.events.getter();

  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  unint64_t v5 = lazy protocol witness table accessor for type ReactiveUIEventActor and conformance ReactiveUIEventActor();
  v0[10] = v5;
  uint64_t v6 = v0[3];
  uint64_t v7 = (void *)swift_task_alloc();
  v0[11] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in ReactiveUIEventActor.run();
  uint64_t v8 = v0[7];
  return MEMORY[0x1F4187D58](v0 + 2, v6, v5, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in ReactiveUIEventActor.run(), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(void);
  void (*v10)(id);
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  uint64_t v1 = (void *)v0[2];
  if (v1)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    uint64_t v3 = v1;
    unsigned int v4 = Logger.logObject.getter();
    unint64_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138412290;
      *(void *)(v6 + 4) = v3;
      *uint64_t v7 = v1;
      _os_log_impl(&dword_1B9C64000, v4, v5, "[ReactiveEventActor] Got Event %@", (uint8_t *)v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v7, -1, -1);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
    else
    {
    }
    uint64_t v10 = *(void (**)(id))(v0[3] + 112);
    if (v10)
    {
      os_log_type_t v11 = v3;
      outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?((uint64_t)v10);
      id v12 = Logger.logObject.getter();
      uint64_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v24 = v3;
        unint64_t v14 = swift_slowAlloc();
        uint64_t v15 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v14 = 138412290;
        *(void *)(v14 + 4) = v11;
        *uint64_t v15 = v1;
        _os_log_impl(&dword_1B9C64000, v12, v13, "[ReactiveEventActor] Dispatching  Event %@", (uint8_t *)v14, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v15, -1, -1);
        uint64_t v16 = v14;
        uint64_t v3 = v24;
        MEMORY[0x1BA9E48C0](v16, -1, -1);
      }
      else
      {
      }
      v10(v11);
      _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v10);
    }
    else
    {
      os_log_t v17 = Logger.logObject.getter();
      uint64_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, (os_log_type_t)v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl(&dword_1B9C64000, v17, (os_log_type_t)v18, "[ReactiveEventActor] No registered handler", v19, 2u);
        MEMORY[0x1BA9E48C0](v19, -1, -1);
      }
    }
    os_log_type_t v20 = v0[10];
    id v21 = v0[3];
    uint64_t v22 = (void *)swift_task_alloc();
    v0[11] = v22;
    *uint64_t v22 = v0;
    v22[1] = closure #1 in ReactiveUIEventActor.run();
    uint64_t v23 = v0[7];
    return MEMORY[0x1F4187D58](v0 + 2, v21, v20, v23);
  }
  else
  {
    (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t ReactiveUIEventActor.setHandler(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_1B9C64000, v7, v8, "[ReactiveEventActor] setting new handler", v9, 2u);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }

  uint64_t v10 = *(void *)(v3 + 112);
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = a2;
  swift_retain();

  return _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v10);
}

uint64_t ReactiveUIEventActor.deinit()
{
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(*(void *)(v0 + 112));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ReactiveUIEventActor.__deallocating_deinit()
{
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(*(void *)(v0 + 112));
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t ReactiveUIEventActor.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance ReactiveUIEventActor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance ReactiveUIEventActor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ReactiveUIEventActor();

  return MEMORY[0x1F4187F20](v3, a2);
}

unint64_t lazy protocol witness table accessor for type ReactiveUIEventActor and conformance ReactiveUIEventActor()
{
  unint64_t result = lazy protocol witness table cache variable for type ReactiveUIEventActor and conformance ReactiveUIEventActor;
  if (!lazy protocol witness table cache variable for type ReactiveUIEventActor and conformance ReactiveUIEventActor)
  {
    type metadata accessor for ReactiveUIEventActor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReactiveUIEventActor and conformance ReactiveUIEventActor);
  }
  return result;
}

uint64_t type metadata accessor for ReactiveUIEventActor()
{
  return self;
}

uint64_t sub_1B9F71D24()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ReactiveUIEventActor.run()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ReactiveUIEventActor.run()(a1, v4, v5, v6);
}

uint64_t method lookup function for ReactiveUIEventActor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ReactiveUIEventActor);
}

uint64_t dispatch thunk of ReactiveUIEventActor.run()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ReactiveUIEventActor.setHandler(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

SiriKitRuntime::ReaderAffinityScorer __swiftcall ReaderAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062BC0;
  uint64_t v1 = 0xD00000000000001FLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t *ReaderAffinityScorer.kAppBundleIdMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppBundleIdMatches != -1) {
    swift_once();
  }
  return &static ReaderAffinityScorer.kAppBundleIdMatches;
}

uint64_t static ReaderAffinityScorer.kAppBundleIdMatches.getter()
{
  if (one-time initialization token for kAppBundleIdMatches != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t ReaderAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized ReaderAffinityScorer.supportedAppIsOnScreen(with:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v86 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v89 = (char *)&v66 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v66 - v8;
  uint64_t v10 = type metadata accessor for RREntity();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RRCandidate();
  MEMORY[0x1F4188790](v14);
  os_log_type_t v70 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = *(void *)(a1 + 16);
  if (!v78) {
    return 0;
  }
  uint64_t v17 = v15;
  uint64_t v76 = type metadata accessor for UsoEntity_common_App();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v17 += 16;
  unint64_t v75 = v18;
  uint64_t v74 = a1 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
  uint64_t v73 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v90 = v3 + 16;
  unint64_t v82 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v85 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  int v71 = (void (**)(char *, uint64_t))(v17 - 8);
  uint64_t v77 = v17;
  uint64_t v72 = *(void *)(v17 + 56);
  uint64_t v66 = a1;
  swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  os_log_type_t v20 = v70;
  uint64_t v81 = v3;
  uint64_t v69 = v10;
  uint64_t v68 = v13;
  uint64_t v67 = v14;
  while (1)
  {
    uint64_t v80 = v19;
    v75(v20, v74 + v72 * v19, v14);
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    id v21 = v20;
    (*v73)(v13, v10);
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v22 = v91;
    if (v91) {
      break;
    }
    (*v71)(v21, v14);
    os_log_type_t v20 = v21;
LABEL_4:
    uint64_t v19 = v80 + 1;
    if (v80 + 1 == v78)
    {
      uint64_t v65 = 0;
LABEL_54:
      swift_bridgeObjectRelease();
      return v65;
    }
  }
  swift_retain();
  uint64_t v23 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v79 = v22;
  uint64_t result = swift_release();
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t v92 = MEMORY[0x1E4FBC860];
  uint64_t v84 = *(void *)(v23 + 16);
  if (!v84)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v64 = *(void *)(v25 + 16);
    swift_release();
    swift_release();
    os_log_type_t v20 = v70;
    (*v71)(v70, v14);
    if (v64)
    {
      uint64_t v65 = 1;
      goto LABEL_54;
    }
    goto LABEL_4;
  }
  unint64_t v26 = 0;
  uint64_t v83 = v23;
  while (v26 < *(void *)(v23 + 16))
  {
    unint64_t v28 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v87 = *(void *)(v3 + 72);
    unint64_t v88 = v28;
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v29(v9, v23 + v28 + v87 * v26, v2);
    if (one-time initialization token for kAppBundleIdMatches != -1) {
      swift_once();
    }
    uint64_t v30 = static ReaderAffinityScorer.kAppBundleIdMatches;
    uint64_t v31 = UsoIdentifier.appBundleId.getter();
    uint64_t v33 = v32;
    if (*(void *)(v30 + 16))
    {
      uint64_t v34 = v31;
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v35 = Hasher._finalize()();
      uint64_t v36 = -1 << *(unsigned char *)(v30 + 32);
      unint64_t v37 = v35 & ~v36;
      uint64_t v38 = v30 + 56;
      if ((*(void *)(v30 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37))
      {
        uint64_t v39 = *(void *)(v30 + 48);
        uint64_t v40 = (void *)(v39 + 16 * v37);
        BOOL v41 = *v40 == v34 && v40[1] == v33;
        if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_20:
          swift_bridgeObjectRelease();
          id v42 = v89;
          v29(v89, (unint64_t)v9, v2);
          uint64_t v3 = v81;
LABEL_37:
          (*v82)(v42, v2);
          uint64_t v58 = *v85;
          (*v85)(v86, v9, v2);
          uint64_t v59 = v92;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v59 + 16) + 1, 1);
            uint64_t v59 = v92;
          }
          unint64_t v61 = *(void *)(v59 + 16);
          unint64_t v60 = *(void *)(v59 + 24);
          if (v61 >= v60 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
            uint64_t v59 = v92;
          }
          *(void *)(v59 + 16) = v61 + 1;
          uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v58)(v59 + v88 + v61 * v87, v86, v2);
          uint64_t v92 = v59;
          goto LABEL_9;
        }
        uint64_t v43 = ~v36;
        while (1)
        {
          unint64_t v37 = (v37 + 1) & v43;
          if (((*(void *)(v38 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0) {
            break;
          }
          id v44 = (void *)(v39 + 16 * v37);
          BOOL v45 = *v44 == v34 && v44[1] == v33;
          if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_20;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    v29(v89, (unint64_t)v9, v2);
    uint64_t v46 = static ReaderAffinityScorer.kAppBundleIdMatches;
    uint64_t v47 = UsoIdentifier.value.getter();
    uint64_t v49 = v48;
    if (*(void *)(v46 + 16))
    {
      uint64_t v50 = v47;
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v51 = Hasher._finalize()();
      uint64_t v52 = -1 << *(unsigned char *)(v46 + 32);
      unint64_t v53 = v51 & ~v52;
      uint64_t v54 = v46 + 56;
      if ((*(void *)(v46 + 56 + ((v53 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v53))
      {
        uint64_t v55 = *(void *)(v46 + 48);
        uint64_t v56 = (void *)(v55 + 16 * v53);
        BOOL v57 = *v56 == v50 && v56[1] == v49;
        if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_36:
          swift_bridgeObjectRelease();
          uint64_t v3 = v81;
          id v42 = v89;
          goto LABEL_37;
        }
        while (1)
        {
          unint64_t v53 = (v53 + 1) & ~v52;
          if (((*(void *)(v54 + ((v53 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v53) & 1) == 0) {
            break;
          }
          uint64_t v62 = (void *)(v55 + 16 * v53);
          BOOL v63 = *v62 == v50 && v62[1] == v49;
          if (v63 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_36;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = *v82;
    (*v82)(v89, v2);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v9, v2);
    uint64_t v3 = v81;
LABEL_9:
    ++v26;
    uint64_t v23 = v83;
    if (v26 == v84)
    {
      uint64_t v25 = v92;
      uint64_t v10 = v69;
      uint64_t v13 = v68;
      uint64_t v14 = v67;
      goto LABEL_50;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized ReaderAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v154 = a2;
  uint64_t v161 = type metadata accessor for RREntity();
  uint64_t v138 = *(void *)(v161 - 8);
  MEMORY[0x1F4188790](v161);
  unint64_t v160 = (char *)v135 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1F4188790](v3 - 8);
  int64_t v144 = (char *)v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for RRCandidate();
  uint64_t v155 = *(void *)(v162 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v162);
  uint64_t v145 = (char *)v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v139 = (char *)v135 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v146 = (char *)v135 - v9;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v158 = v10;
  uint64_t v159 = v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v157 = (char *)v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v142 = *(void *)(v143 - 8);
  MEMORY[0x1F4188790](v143);
  unint64_t v141 = (char *)v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v156 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v152 = *(void *)(v17 - 8);
  uint64_t v153 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v135 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v148 = (char *)v135 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v150 = *(void *)(v151 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v151);
  unint64_t v140 = (char *)v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v149 = (char *)v135 - v24;
  uint64_t v25 = type metadata accessor for USOParse();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  unint64_t v28 = (char *)v135 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Parse();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)v135 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v30 + 88))(v32, v29) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v32, v25);
    unint64_t v33 = specialized static AffinityScorerUtils.getTask(_:)();
    uint64_t v147 = v28;
    if (v33)
    {
      uint64_t v136 = v25;
      unint64_t v34 = v33;
      uint64_t v163 = UsoTask.verbString.getter();
      unint64_t v164 = v35;
      v36._uint64_t countAndFlagsBits = 14906;
      v36._object = (void *)0xE200000000000000;
      String.append(_:)(v36);
      v135[3] = v34;
      v37._uint64_t countAndFlagsBits = UsoTask.baseEntityAsString.getter();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      uint64_t v39 = v163;
      unint64_t v38 = v164;
      if (v163 == 0xD000000000000012 && v164 == 0x80000001BA06AFE0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        uint64_t v41 = __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
        swift_bridgeObjectRetain();
        v135[2] = v41;
        id v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.debug.getter();
        BOOL v44 = os_log_type_enabled(v42, v43);
        uint64_t v137 = v26;
        if (v44)
        {
          BOOL v45 = (uint8_t *)swift_slowAlloc();
          uint64_t v163 = swift_slowAlloc();
          uint64_t v46 = v163;
          *(_DWORD *)BOOL v45 = 136315138;
          v135[1] = v45 + 4;
          swift_bridgeObjectRetain();
          uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, &v163);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v42, v43, "ReaderAffinityScorer found %s", v45, 0xCu);
          swift_arrayDestroy();
          uint64_t v47 = v46;
          uint64_t v26 = v137;
          MEMORY[0x1BA9E48C0](v47, -1, -1);
          MEMORY[0x1BA9E48C0](v45, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v57 = v156;
        uint64_t v58 = USOParse.userParse.getter();
        uint64_t v59 = MEMORY[0x1BA9DE000](v58);
        (*(void (**)(char *, uint64_t))(v152 + 8))(v19, v153);
        uint64_t v60 = *(void *)(v59 + 16);
        if (v60)
        {
          BOOL v63 = *(void (**)(char *, unint64_t, uint64_t))(v57 + 16);
          uint64_t v61 = v57 + 16;
          uint64_t v62 = v63;
          unint64_t v64 = v59 + ((*(unsigned __int8 *)(v61 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 64));
          uint64_t v65 = *(void *)(v61 + 56);
          swift_bridgeObjectRetain();
          while (1)
          {
            v62(v16, v64, v14);
            if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
              break;
            }
            (*(void (**)(char *, uint64_t))(v61 - 8))(v16, v14);
            v64 += v65;
            if (!--v60)
            {
              swift_bridgeObjectRelease();
              uint64_t v66 = 1;
              uint64_t v26 = v137;
              uint64_t v57 = v156;
              goto LABEL_27;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v57 = v156;
          uint64_t v67 = (uint64_t)v148;
          (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v148, v16, v14);
          uint64_t v66 = 0;
          uint64_t v26 = v137;
        }
        else
        {
          uint64_t v66 = 1;
LABEL_27:
          uint64_t v67 = (uint64_t)v148;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v67, v66, 1, v14);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v67, 1, v14) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        }
        else
        {
          uint64_t v68 = v141;
          Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
          (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v67, v14);
          uint64_t v69 = v140;
          Siri_Nlu_External_UserStatedTask.task.getter();
          (*(void (**)(char *, uint64_t))(v142 + 8))(v68, v143);
          (*(void (**)(char *, char *, uint64_t))(v150 + 32))(v149, v69, v151);
          uint64_t v70 = Siri_Nlu_External_UsoGraph.identifiers.getter();
          uint64_t v71 = *(void *)(v70 + 16);
          if (v71)
          {
            uint64_t v156 = *(void *)(v159 + 16);
            uint64_t v153 = v70 + ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80));
            uint64_t v72 = (void (**)(char *, uint64_t))(v159 + 8);
            v159 += 16;
            uint64_t v152 = *(void *)(v159 + 56);
            uint64_t v148 = (char *)v70;
            swift_bridgeObjectRetain();
            uint64_t v73 = 0;
            unint64_t v75 = v157;
            uint64_t v74 = v158;
            while (1)
            {
              ((void (*)(char *, uint64_t, uint64_t))v156)(v75, v153 + v152 * v73, v74);
              if (one-time initialization token for kAppBundleIdMatches != -1) {
                swift_once();
              }
              uint64_t v76 = static ReaderAffinityScorer.kAppBundleIdMatches;
              uint64_t v77 = Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
              uint64_t v79 = v78;
              if (*(void *)(v76 + 16))
              {
                uint64_t v80 = v77;
                Hasher.init(_seed:)();
                String.hash(into:)();
                Swift::Int v81 = Hasher._finalize()();
                uint64_t v82 = -1 << *(unsigned char *)(v76 + 32);
                unint64_t v83 = v81 & ~v82;
                uint64_t v84 = v76 + 56;
                if ((*(void *)(v76 + 56 + ((v83 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v83))
                {
                  uint64_t v85 = *(void *)(v76 + 48);
                  uint64_t v86 = (void *)(v85 + 16 * v83);
                  BOOL v87 = *v86 == v80 && v86[1] == v79;
                  if (v87 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
LABEL_54:
                    swift_bridgeObjectRelease();
                    (*v72)(v157, v158);
                    swift_bridgeObjectRelease_n();
                    uint64_t v93 = Logger.logObject.getter();
                    os_log_type_t v94 = static os_log_type_t.debug.getter();
                    if (os_log_type_enabled(v93, v94))
                    {
                      uint64_t v95 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)uint64_t v95 = 0;
                      _os_log_impl(&dword_1B9C64000, v93, v94, "ReaderAffinityScorer found matching identifier", v95, 2u);
                      MEMORY[0x1BA9E48C0](v95, -1, -1);
                    }

                    swift_release();
                    (*(void (**)(char *, uint64_t))(v150 + 8))(v149, v151);
                    (*(void (**)(char *, uint64_t))(v137 + 8))(v147, v136);
                    return 3;
                  }
                  uint64_t v88 = ~v82;
                  for (unint64_t i = v83 + 1; ; unint64_t i = v90 + 1)
                  {
                    uint64_t v90 = i & v88;
                    if (((*(void *)(v84 + (((i & v88) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v88)) & 1) == 0) {
                      break;
                    }
                    uint64_t v91 = (void *)(v85 + 16 * v90);
                    BOOL v92 = *v91 == v80 && v91[1] == v79;
                    if (v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                      goto LABEL_54;
                    }
                  }
                }
              }
              ++v73;
              swift_bridgeObjectRelease();
              unint64_t v75 = v157;
              uint64_t v74 = v158;
              (*v72)(v157, v158);
              if (v73 == v71)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v26 = v137;
                goto LABEL_58;
              }
            }
          }
          swift_bridgeObjectRelease();
LABEL_58:
          (*(void (**)(char *, uint64_t))(v150 + 8))(v149, v151);
        }
        uint64_t v96 = v162;
        uint64_t v97 = v155;
        SiriEnvironment.salientEntitiesProvider.getter();
        uint64_t v98 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
        swift_release();
        uint64_t v99 = *(void *)(v98 + 16);
        if (v99)
        {
          uint64_t v101 = *(void *)(v97 + 16);
          uint64_t v100 = v97 + 16;
          uint64_t v159 = v101;
          uint64_t v102 = (char *)v98;
          unint64_t v103 = v98 + ((*(unsigned __int8 *)(v100 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 64));
          uint64_t v104 = (void (**)(char *, uint64_t))(v138 + 8);
          uint64_t v105 = *(void *)(v100 + 56);
          uint64_t v157 = v102;
          uint64_t v158 = v105;
          swift_bridgeObjectRetain();
          uint64_t v106 = v139;
          char v107 = v160;
          while (1)
          {
            ((void (*)(char *, unint64_t, uint64_t))v159)(v106, v103, v96);
            if (one-time initialization token for kAppBundleIdMatches != -1) {
              swift_once();
            }
            uint64_t v108 = static ReaderAffinityScorer.kAppBundleIdMatches;
            RRCandidate.entity.getter();
            uint64_t v109 = RREntity.appBundleId.getter();
            uint64_t v111 = v110;
            (*v104)(v107, v161);
            LOBYTE(v109) = specialized Set.contains(_:)(v109, v111, v108);
            swift_bridgeObjectRelease();
            if (v109) {
              break;
            }
            uint64_t v96 = v162;
            (*(void (**)(char *, uint64_t))(v100 - 8))(v106, v162);
            v103 += v158;
            if (!--v99)
            {
              swift_bridgeObjectRelease();
              uint64_t v113 = 1;
              uint64_t v26 = v137;
              uint64_t v97 = v155;
              goto LABEL_68;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v97 = v155;
          uint64_t v112 = (uint64_t)v144;
          uint64_t v96 = v162;
          (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v144, v106, v162);
          uint64_t v113 = 0;
          uint64_t v26 = v137;
        }
        else
        {
          uint64_t v113 = 1;
LABEL_68:
          uint64_t v112 = (uint64_t)v144;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v112, v113, 1, v96);
        swift_bridgeObjectRelease();
        int v114 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v112, 1, v96);
        int64_t v115 = v146;
        uint64_t v116 = v145;
        if (v114 != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v146, v112, v96);
          (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v116, v115, v96);
          char v122 = Logger.logObject.getter();
          os_log_type_t v123 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v122, v123))
          {
            unint64_t v124 = (uint8_t *)swift_slowAlloc();
            uint64_t v125 = swift_slowAlloc();
            uint64_t v163 = v125;
            *(_DWORD *)unint64_t v124 = 136315138;
            lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate();
            uint64_t v126 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, &v163);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            unint64_t v128 = *(void (**)(char *, uint64_t))(v155 + 8);
            v128(v116, v96);
            _os_log_impl(&dword_1B9C64000, v122, v123, "ReaderAffinityScorer found salient reader entity %s", v124, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v125, -1, -1);
            MEMORY[0x1BA9E48C0](v124, -1, -1);

            swift_release();
            v128(v146, v96);
          }
          else
          {

            swift_release();
            uint64_t v129 = *(void (**)(char *, uint64_t))(v97 + 8);
            v129(v116, v96);
            v129(v115, v96);
          }
LABEL_78:
          (*(void (**)(char *, uint64_t))(v26 + 8))(v147, v136);
          return 3;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v112, &demangling cache variable for type metadata for RRCandidate?);
        SiriEnvironment.salientEntitiesProvider.getter();
        uint64_t v117 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
        swift_release();
        char v118 = specialized ReaderAffinityScorer.supportedAppIsOnScreen(with:)(v117);
        swift_bridgeObjectRelease();
        if (v118)
        {
          char v119 = Logger.logObject.getter();
          os_log_type_t v120 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v119, v120))
          {
            uint64_t v121 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v121 = 0;
            _os_log_impl(&dword_1B9C64000, v119, v120, "ReaderAffinityScorer found commonApp entity with Safari bundle ID", v121, 2u);
            MEMORY[0x1BA9E48C0](v121, -1, -1);
          }

          swift_release();
          goto LABEL_78;
        }
        (*(void (**)(char *, uint64_t))(v26 + 8))(v147, v136);
        swift_release();
        return 1;
      }
      if (v39 == 0xD000000000000016 && v38 == 0x80000001BA06B000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v130 & 1) == 0)
        {
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v131 = type metadata accessor for Logger();
          __swift_project_value_buffer(v131, (uint64_t)static Logger.executor);
          uint64_t v132 = Logger.logObject.getter();
          os_log_type_t v133 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v132, v133))
          {
            uint64_t v134 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v134 = 0;
            _os_log_impl(&dword_1B9C64000, v132, v133, "ReaderAffinityScorer could not find a supported parse or identifiers", v134, 2u);
            MEMORY[0x1BA9E48C0](v134, -1, -1);
          }

          swift_release();
          (*(void (**)(char *, uint64_t))(v26 + 8))(v147, v136);
          return 1;
        }
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v147, v136);
      swift_release();
      return 3;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.executor);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl(&dword_1B9C64000, v54, v55, "ReaderAffinityScorer could not extract usoTask from parse", v56, 2u);
      MEMORY[0x1BA9E48C0](v56, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v26 + 8))(v147, v25);
    return 0;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      Swift::Int v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Int v51 = 0;
      _os_log_impl(&dword_1B9C64000, v49, v50, "ReaderAffinityScorer received an unexpected parse", v51, 2u);
      MEMORY[0x1BA9E48C0](v51, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
    return 2;
  }
}

ValueMetadata *type metadata accessor for ReaderAffinityScorer()
{
  return &type metadata for ReaderAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate()
{
  unint64_t result = lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate;
  if (!lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate)
  {
    type metadata accessor for RRCandidate();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate);
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v4 & 0xC000000000000001;
      unint64_t v15 = v4;
      while (v17)
      {
        id v9 = (id)MEMORY[0x1BA9E3990](v8, v4);
LABEL_9:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        id v18 = v9;
        uint64_t v12 = a2;
        char v13 = a1(&v18);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t SiriEnvironment.recentDialogs.getter()
{
  type metadata accessor for RecentDialogsEnvironmentProvider();
  lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider((unint64_t *)&lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider, v0, (void (*)(uint64_t))type metadata accessor for RecentDialogsEnvironmentProvider);

  return dispatch thunk of SiriEnvironment.subscript.getter();
}

uint64_t RecentDialogTracker.__allocating_init()()
{
  return (*(uint64_t (**)(uint64_t (*)(), void))(v0 + 216))(closure #1 in RecentDialogTracker.init(), 0);
}

uint64_t RecentDialogTracker.__allocating_init(timeProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  RecentDialogTracker.init(timeProvider:)(a1, a2);
  return v4;
}

uint64_t RecentDialogTracker.init(timeProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentSessionId;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  unint64_t v8 = (void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId);
  *unint64_t v8 = 0;
  v8[1] = 0;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestHasTrackedDialogs) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs) = MEMORY[0x1E4FBC860];
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_1B9C64000, v10, v11, "RecentDialogTracker initalized", v12, 2u);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }

  char v13 = (void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_timeProvider);
  void *v13 = a1;
  v13[1] = a2;
  return v3;
}

uint64_t RecentDialogTracker.clearRecentDialogs()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    uint64_t v6 = (void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
    swift_beginAccess();
    if (*v6 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v3, v4, "RecentDialogTracker: clearing currently tracked %ld dialog(s).", v5, 0xCu);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v7 = (void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
  swift_beginAccess();
  *uint64_t v7 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  return RecentDialogTracker.updateSiriEnvironment()();
}

Swift::Bool __swiftcall DialogPhase.shouldTrack()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DialogPhase();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v11 - v7, v1, v2);
  static DialogPhase.reflection.getter();
  lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider(&lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase, 255, MEMORY[0x1E4FA1A80]);
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v6, v2);
  v9(v8, v2);
  return (v1 & 1) == 0;
}

uint64_t RecentDialogTracker.getRecentDialogs()()
{
  uint64_t v1 = v0;
  RecentDialogTracker.filterExpired()();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    uint64_t v6 = (void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
    swift_beginAccess();
    if (*v6 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v3, v4, "RecentDialogTracker: returning %ld recent dialogs.", v5, 0xCu);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t RecentDialogTracker.updateSiriEnvironment()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v8 = type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  type metadata accessor for RecentDialogsEnvironmentProvider();
  lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider((unint64_t *)&lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider, v9, (void (*)(uint64_t))type metadata accessor for RecentDialogsEnvironmentProvider);
  uint64_t v10 = dispatch thunk of SiriEnvironment.subscript.getter();
  swift_release();
  uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
  swift_beginAccess();
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 112))(v12);
  swift_release();
  static SiriEnvironment.default.getter();
  uint64_t v13 = dispatch thunk of SiriEnvironment.subscript.getter();
  swift_release();
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v14 = &selRef_scrollProtocol;
    if (v22) {
      goto LABEL_5;
    }
LABEL_16:
    Swift::Bool v21 = 0;
    goto LABEL_17;
  }
  uint64_t v14 = &selRef_scrollProtocol;
  if (!*(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v15 = *v11;
  if ((*v11 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v16 = (id)MEMORY[0x1BA9E3990](0, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_33:
      swift_bridgeObjectRetain();
      id v24 = (id)MEMORY[0x1BA9E3990](1, v15);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    id v16 = *(id *)(v15 + 32);
  }
  unint64_t v17 = (void *)RecentDialog.addViews.getter();

  id v18 = objc_msgSend(v17, sel_dialogPhase);
  if (v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  DialogPhase.init(aceValue:)();
  uint64_t v19 = type metadata accessor for DialogPhase();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v19) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for DialogPhase?);
    Swift::Bool v21 = 0;
  }
  else
  {
    Swift::Bool v21 = DialogPhase.canBeReplayed()();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
  }
  uint64_t v14 = &selRef_scrollProtocol;
LABEL_17:
  (*(void (**)(Swift::Bool))(*(void *)v13 + 136))(v21);
  swift_release();
  static SiriEnvironment.default.getter();
  uint64_t v8 = dispatch thunk of SiriEnvironment.subscript.getter();
  uint64_t result = swift_release();
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v30 < 2) {
      goto LABEL_26;
    }
  }
  else if (*(uint64_t *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
  {
    goto LABEL_26;
  }
  uint64_t v15 = *v11;
  if ((*v11 & 0xC000000000000001) != 0) {
    goto LABEL_33;
  }
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    id v24 = *(id *)(v15 + 40);
LABEL_22:
    uint64_t v25 = (void *)RecentDialog.addViews.getter();

    id v26 = [v25 v14[37]];
    if (v26)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    DialogPhase.init(aceValue:)();
    uint64_t v27 = type metadata accessor for DialogPhase();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v5, 1, v27) != 1)
    {
      Swift::Bool v29 = DialogPhase.canBeReplayed()();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v27);
      goto LABEL_28;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for DialogPhase?);
LABEL_26:
    Swift::Bool v29 = 0;
LABEL_28:
    (*(void (**)(Swift::Bool))(*(void *)v8 + 160))(v29);
    return swift_release();
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall DialogPhase.canBeReplayed()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DialogPhase();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v13 - v7, v1, v2);
  static DialogPhase.summary.getter();
  lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider(&lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase, 255, MEMORY[0x1E4FA1A80]);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  if (v9)
  {
    char v11 = 1;
  }
  else
  {
    static DialogPhase.completion.getter();
    char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    v10(v6, v2);
  }
  v10(v8, v2);
  return v11 & 1;
}

uint64_t RecentDialogTracker.deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t RecentDialogTracker.__deallocating_deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t RecentDialogsEnvironmentProvider.numCurrentlyTracked.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t (*RecentDialogsEnvironmentProvider.numCurrentlyTracked.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RecentDialogsEnvironmentProvider.hasDialogToRepeat.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t RecentDialogsEnvironmentProvider.hasDialogToRepeat.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 24) = a1;
  return result;
}

uint64_t (*RecentDialogsEnvironmentProvider.hasDialogToRepeat.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 25) = a1;
  return result;
}

uint64_t (*RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t RecentDialogsEnvironmentProvider.__allocating_init(storage:)()
{
  swift_release();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  return result;
}

uint64_t RecentDialogsEnvironmentProvider.init(storage:)()
{
  swift_release();
  *(void *)(v0 + 16) = 0;
  *(_WORD *)(v0 + 24) = 0;
  return v0;
}

uint64_t RecentDialogsEnvironmentProvider.deinit()
{
  return v0;
}

uint64_t RecentDialogsEnvironmentProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static SiriEnvironmentProvider.defaultScope.getter in conformance RecentDialogsEnvironmentProvider()
{
  return MEMORY[0x1F415AB38]();
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance RecentDialogsEnvironmentProvider()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance RecentDialogsEnvironmentProvider@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for RecentDialogsEnvironmentProvider();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for ObservableObject in RecentDialogsEnvironmentProvider(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider(&lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider, a2, (void (*)(uint64_t))type metadata accessor for RecentDialogsEnvironmentProvider);
}

uint64_t lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in RecentDialogsEnvironmentProvider()
{
  return MEMORY[0x1E4F1ABE8];
}

uint64_t sub_1B9F7536C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9F753B8(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 112))(*a1);
}

uint64_t sub_1B9F75400@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9F75450(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_1B9F75498@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9F754E8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 160))(*a1);
}

uint64_t ObjC metadata update function for RecentDialogTracker()
{
  return type metadata accessor for RecentDialogTracker();
}

uint64_t type metadata accessor for RecentDialogTracker()
{
  uint64_t result = type metadata singleton initialization cache for RecentDialogTracker;
  if (!type metadata singleton initialization cache for RecentDialogTracker) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for RecentDialogTracker()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for RecentDialogTracker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentDialogTracker);
}

uint64_t dispatch thunk of RecentDialogTracker.__allocating_init(timeProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of RecentDialogTracker.setCurrentRequest(withRequestId:sessionId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of RecentDialogTracker.handleEndRequest(sessionState:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of RecentDialogTracker.handleSessionEnded()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of RecentDialogTracker.maybeMemorizeDialog(command:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of RecentDialogTracker.getRecentDialogs()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t method lookup function for RecentDialogsEnvironmentProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RecentDialogsEnvironmentProvider);
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.numCurrentlyTracked.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.numCurrentlyTracked.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.numCurrentlyTracked.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToRepeat.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToRepeat.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToRepeat.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.__allocating_init(storage:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void *RemoteConversationClient.__allocating_init(identifier:remoteConversationXPCProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized RemoteConversationClient.__allocating_init(identifier:remoteConversationXPCProvider:)(a1, a2, (uint64_t)v11, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  return v13;
}

uint64_t RemoteConversationClient.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteConversationClient.remoteConversationXPCProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 128, a1);
}

uint64_t key path setter for RemoteConversationClient.currentRcId : RemoteConversationClient(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 168) = v3;
  *(void *)(v4 + 176) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t RemoteConversationClient.currentRcId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 168);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteConversationClient.currentRcId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 168) = a1;
  *(void *)(v2 + 176) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*RemoteConversationClient.currentRcId.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *RemoteConversationClient.init(identifier:remoteConversationXPCProvider:)(uint64_t a1, uint64_t a2, long long *a3)
{
  swift_defaultActor_initialize();
  v3[21] = 0;
  v3[22] = 0;
  v3[14] = a1;
  v3[15] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, (uint64_t)(v3 + 16));
  return v3;
}

void closure #1 in closure #1 in RemoteConversationClient.warmup(refId:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (void *)MEMORY[0x1BA9E2DD0](a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork();
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_208;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_warmupWithRefId_reply_, v12, v15);
  _Block_release(v15);
}

uint64_t RemoteConversationClient.cancel()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:), v0, 0);
}

uint64_t RemoteConversationClient.reset()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:), v0, 0);
}

uint64_t closure #1 in RemoteConversationClient.reset()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.reset(), 0, 0);
}

uint64_t closure #1 in RemoteConversationClient.reset()()
{
  uint64_t v15 = v0;
  uint64_t v1 = v0[4];
  if (v1)
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = swift_task_alloc();
    v0[6] = v3;
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[7] = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.cancel();
    uint64_t v5 = v0[3];
    uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F41880D8](v5, 0, 0, 0x29287465736572, 0xE700000000000000, partial apply for closure #1 in closure #1 in RemoteConversationClient.reset(), v3, v6);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v14 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x29287465736572, 0xE700000000000000, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v8, v9, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t RemoteConversationClient.ensureReady()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](RemoteConversationClient.ensureReady(), v0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  os_log_type_t v9 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                  + **(int **)(v5 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v6;
  char *v6 = v0;
  v6[1] = RemoteConversationClient.ensureReady();
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return v9(v0 + 40, &async function pointer to closure #1 in RemoteConversationClient.ensureReady(), 0, v7, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 32) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0) {
    uint64_t v4 = RemoteConversationClient.ensureReady();
  }
  else {
    uint64_t v4 = RemoteConversationClient.ensureReady();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in RemoteConversationClient.ensureReady()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:);
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_187;
  os_log_type_t v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_ensureReadyWithReply_, v9);
  _Block_release(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    id v4 = a1;
    id v5 = a1;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v14 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      id v10 = a1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v11 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v6, v7, "Error calling startTurn: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
    else
    {
    }
    uint64_t v14 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async (@guaranteed RemoteConversationXPC) -> (@error @owned Error)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  void *v6 = v4;
  v6[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v8(a2);
}

void closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  aBlock[3] = &block_descriptor_143;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_acceptInitialInputWithInputIdentifier_speechData_reply_, isa, a5, v14);
  _Block_release(v14);
}

uint64_t RemoteConversationClient.prepare(bridge:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](RemoteConversationClient.prepare(bridge:), v2, 0);
}

uint64_t RemoteConversationClient.prepare(bridge:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = v1 + 16;
  long long v10 = *(_OWORD *)(v0 + 16);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 40) = v6;
  *(_OWORD *)(v6 + 16) = v10;
  uint64_t v9 = (uint64_t (*)(void))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
  swift_unknownObjectRetain();
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  *os_log_type_t v7 = v0;
  v7[1] = RemoteConversationClient.prepare(bridge:);
  return v9();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    uint64_t v4 = AceServiceInvokerImpl.submitToCompanion<A>(_:setRefId:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 32);
    swift_release();
    uint64_t v4 = RemoteConversationClient.ensureReady();
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_132;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_prepareWithBridge_reply_, v12, v15);
  _Block_release(v15);
  return swift_unknownObjectRelease();
}

uint64_t RemoteConversationClient.paraphrase()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](RemoteConversationClient.paraphrase(), v1, 0);
}

uint64_t RemoteConversationClient.paraphrase()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v10 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8)
                                                                                   + **(int **)(v5 + 8));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[4] = v6;
  uint64_t v7 = type metadata accessor for ConversationParaphraseResult(0);
  void *v6 = v0;
  v6[1] = UndoCommand.execute();
  uint64_t v8 = v0[2];
  return v10(v8, &async function pointer to closure #1 in RemoteConversationClient.paraphrase(), 0, v7, v4, v5);
}

uint64_t closure #1 in RemoteConversationClient.paraphrase()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.paraphrase(), 0, 0);
}

uint64_t closure #1 in RemoteConversationClient.paraphrase()()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  swift_unknownObjectRetain();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(void *)(v2 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.paraphrase();
  *(void *)(v2 + 24) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = type metadata accessor for ConversationParaphraseResult(0);
  void *v3 = v0;
  v3[1] = closure #1 in RemoteConversationClient.paraphrase();
  uint64_t v5 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v5, 0, 0, 0xD000000000000028, 0x80000001BA063410, partial apply for specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:), v2, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.paraphrase(), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in closure #1 in RemoteConversationClient.paraphrase()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationParaphraseResult, Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.paraphrase();
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  aBlock[3] = &block_descriptor_121;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_paraphraseWithReply_, v9);
  _Block_release(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.paraphrase()()
{
  uint64_t v0 = type metadata accessor for ConversationParaphraseResult(0);
  MEMORY[0x1F4188790](v0 - 8);
  ConversationParaphraseResultXPC.swiftRepresentation()((uint64_t *)((char *)&v3 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0)));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationParaphraseResult, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t RemoteConversationClient.commit(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](RemoteConversationClient.commit(bridge:), v3, 0);
}

uint64_t RemoteConversationClient.commit(bridge:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = v1 + 16;
  long long v12 = *(_OWORD *)(v0 + 24);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 48) = v6;
  *(_OWORD *)(v6 + 16) = v12;
  uint64_t v11 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8)
                                                                                    + **(int **)(v5 + 8));
  swift_unknownObjectRetain();
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v7;
  uint64_t v8 = type metadata accessor for ConversationCommitResult();
  *unint64_t v7 = v0;
  v7[1] = RemoteConversationClient.commit(bridge:);
  uint64_t v9 = *(void *)(v0 + 16);
  return v11(v9, &async function pointer to partial apply for closure #1 in RemoteConversationClient.commit(bridge:), v6, v8, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[8] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[5];
    return MEMORY[0x1F4188298](specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:), v3, 0);
  }
  else
  {
    swift_release();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.commit(bridge:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  aBlock[3] = &block_descriptor_110;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_commitWithBridge_reply_, v12, v15);
  _Block_release(v15);
  return swift_unknownObjectRelease();
}

uint64_t RemoteConversationClient.drainAsyncWork()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.drainAsyncWork(), v0, 0);
}

uint64_t closure #1 in RemoteConversationClient.drainAsyncWork()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.drainAsyncWork(), 0, 0);
}

uint64_t closure #1 in RemoteConversationClient.drainAsyncWork()()
{
  uint64_t v15 = v0;
  uint64_t v1 = v0[4];
  if (v1)
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = swift_task_alloc();
    v0[6] = v3;
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[7] = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.cancel();
    uint64_t v5 = v0[3];
    uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F41880D8](v5, 0, 0, 0xD000000000000010, 0x80000001BA066EF0, partial apply for closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork(), v3, v6);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v14 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001BA066EF0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v8, v9, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

void closure #1 in closure #1 in RemoteConversationClient.cancel()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v16 + v15, (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = a5;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a6;
  unint64_t v17 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, *a7, v17);
  _Block_release(v17);
}

void closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<FlexibleExecutionSupportOptions, Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions();
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  aBlock[3] = &block_descriptor_85;
  os_log_type_t v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_flexibleExecutionSupportOptionsWithReply_, v9);
  _Block_release(v9);
}

void closure #1 in closure #1 in RemoteConversationClient.isEmpty()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v16 + v15, (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = a5;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  aBlock[3] = a6;
  unint64_t v17 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, *a7, v17);
  _Block_release(v17);
}

uint64_t RemoteConversationClient.invalidate()()
{
  *(void *)(v1 + 80) = v0;
  return MEMORY[0x1F4188298](RemoteConversationClient.invalidate(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[10] + 128, (uint64_t)(v0 + 2));
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  v0[11] = v1;
  v0[12] = v2;
  v0[13] = __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v3 = v2 + 24;
  v0[14] = v4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  v0[15] = v3 & 0xFFFFFFFFFFFFLL | 0xEB38000000000000;
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](RemoteConversationClient.invalidate(), v5, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 80);
  *(unsigned char *)(v0 + 128) = (*(uint64_t (**)(void, void))(v0 + 112))(*(void *)(v0 + 88), *(void *)(v0 + 96));
  return MEMORY[0x1F4188298](RemoteConversationClient.invalidate(), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned char *)(v0 + 128) & 1;
  return v1(v2);
}

uint64_t RemoteConversationClient.description.getter()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "FlowExtension(");
  HIBYTE(v6[1]) = -18;
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 120);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t static RemoteConversationClient.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 112) == *(void *)(a2 + 112) && *(void *)(a1 + 120) == *(void *)(a2 + 120)) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t RemoteConversationClient.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t RemoteConversationClient.hashValue.getter()
{
  return String.hashValue.getter();
}

uint64_t RemoteConversationClient.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t RemoteConversationClient.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RemoteConversationClient()
{
  return String.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RemoteConversationClient()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RemoteConversationClient()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteConversationClient()
{
  return RemoteConversationClient.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RemoteConversationClient(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 112) == *(void *)(*(void *)a2 + 112)
    && *(void *)(*(void *)a1 + 120) == *(void *)(*(void *)a2 + 120))
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

void *specialized RemoteConversationClient.__allocating_init(identifier:remoteConversationXPCProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_0, a3, a5);
  type metadata accessor for RemoteConversationClient();
  uint64_t v11 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v11[21] = 0;
  v11[22] = 0;
  v11[14] = a1;
  v11[15] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(&v13, (uint64_t)(v11 + 16));
  return v11;
}

uint64_t sub_1B9F788A8()
{
  uint64_t v1 = type metadata accessor for Input();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t sub_1B9F78950()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B9F78988()
{
  uint64_t v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[6];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }

  uint64_t v9 = v4 + v1[8];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_release();

  uint64_t v10 = (uint64_t *)(v4 + v1[12]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    outlined consume of Data._Representation(*v10, v11);
  }
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1B9F78B7C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B9F78BB4()
{
  return objectdestroy_24Tm(MEMORY[0x1E4FA1EE0]);
}

uint64_t sub_1B9F78BCC()
{
  return objectdestroy_24Tm(MEMORY[0x1E4F27990]);
}

uint64_t objectdestroy_24Tm(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x1F4186498](v1, v7 + 8, v6);
}

uint64_t base witness table accessor for Equatable in RemoteConversationClient(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type RemoteConversationClient and conformance RemoteConversationClient(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, a2, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
}

uint64_t sub_1B9F78CD8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 176);
  *a2 = *(void *)(v3 + 168);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for RemoteConversationClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteConversationClient);
}

uint64_t dispatch thunk of RemoteConversationClient.currentRcId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of RemoteConversationClient.currentRcId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of RemoteConversationClient.currentRcId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of RemoteConversationClient.__allocating_init(identifier:remoteConversationXPCProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 144)
                                                          + **(int **)(*(void *)v3 + 144));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.warmup(refId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 152) + **(int **)(*(void *)v2 + 152));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of RemoteConversationClient.cancel()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 160) + **(int **)(*(void *)v0 + 160));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.reset()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 168) + **(int **)(*(void *)v0 + 168));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.ensureReady()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 176) + **(int **)(*(void *)v0 + 176));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 184)
                                                          + **(int **)(*(void *)v3 + 184));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 192)
                                                          + **(int **)(*(void *)v3 + 192));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 200)
                                                          + **(int **)(*(void *)v3 + 200));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.prepare(bridge:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 208) + **(int **)(*(void *)v2 + 208));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of RemoteConversationClient.paraphrase()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 216) + **(int **)(*(void *)v1 + 216));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

uint64_t dispatch thunk of RemoteConversationClient.commit(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 224)
                                                          + **(int **)(*(void *)v3 + 224));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.isEmpty()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 232) + **(int **)(*(void *)v0 + 232));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.drainAsyncWork()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 240) + **(int **)(*(void *)v0 + 240));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 248) + **(int **)(*(void *)v1 + 248));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

uint64_t dispatch thunk of RemoteConversationClient.isCorrectable()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 256) + **(int **)(*(void *)v0 + 256));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.invalidate()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 264) + **(int **)(*(void *)v0 + 264));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = dispatch thunk of RemoteConversationClient.invalidate();
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.invalidate()(char a1)
{
  uint64_t v5 = *v1;
  uint64_t v2 = a1 & 1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

uint64_t dispatch thunk of RemoteConversationClient.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of RemoteConversationClient.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of RemoteConversationClient.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.isCorrectable()(uint64_t a1)
{
  closure #1 in closure #1 in RemoteConversationClient.isEmpty()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1F1380410, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.isCorrectable(), (uint64_t)&block_descriptor_19, (SEL *)&selRef_isCorrectableWithReply_);
}

uint64_t sub_1B9F7A008()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1)
{
  closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1)
{
  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1B9F7A054()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<FlexibleExecutionSupportOptions, Error>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork()(uint64_t a1)
{
  closure #1 in closure #1 in RemoteConversationClient.cancel()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1F13804D8, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork(), (uint64_t)&block_descriptor_92, (SEL *)&selRef_drainAsyncWorkWithReply_);
}

uint64_t sub_1B9F7A0A8()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.isEmpty()(uint64_t a1)
{
  closure #1 in closure #1 in RemoteConversationClient.isEmpty()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1F1380528, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.isCorrectable(), (uint64_t)&block_descriptor_99, (SEL *)&selRef_isEmptyWithReply_);
}

uint64_t sub_1B9F7A0FC()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1)
{
  return closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1B9F7A150()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
}

uint64_t sub_1B9F7A15C()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.paraphrase()(uint64_t a1)
{
  closure #1 in closure #1 in RemoteConversationClient.paraphrase()(a1, *(void **)(v1 + 16));
}

uint64_t sub_1B9F7A1D4()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<ConversationParaphraseResult, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.paraphrase()(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<ConversationParaphraseResult, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.paraphrase());
}

uint64_t objectdestroy_101Tm()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1)
{
  return closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1B9F7A288()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t sub_1B9F7A294()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1B9F7A43C()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
}

uint64_t sub_1B9F7A448()
{
  uint64_t v1 = type metadata accessor for Input();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Input() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:)(a1, v1 + v4, *(void **)(v1 + v5), *(void *)(v1 + v5 + 8), *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1B9F7A5AC()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
}

uint64_t sub_1B9F7A5B8()
{
  uint64_t v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  uint64_t v4 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[6];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }

  uint64_t v9 = v4 + v1[8];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_release();

  uint64_t v10 = (uint64_t *)(v4 + v1[12]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    outlined consume of Data._Representation(*v10, v11);
  }
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(a1, *(void **)(v1 + 16), (void *)(v1 + v4), *(void *)(v1 + v5), *(void *)(v1 + v5 + 8));
}

uint64_t sub_1B9F7A854()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v7 = *(unsigned __int8 *)(*((void *)v6 - 1) + 80);
  uint64_t v17 = *(void *)(*((void *)v6 - 1) + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();
  uint64_t v18 = (v5 + v7 + 8) & ~v7;
  uint64_t v8 = v0 + v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v0 + v18 + v6[6];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }

  uint64_t v13 = v8 + v6[8];
  if (!v12(v13, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  }
  swift_release();

  uint64_t v14 = (uint64_t *)(v8 + v6[12]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    outlined consume of Data._Representation(*v14, v15);
  }
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, ((v17 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v7 | 7);
}

uint64_t sub_1B9F7AAE0()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:));
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.ensureReady()(uint64_t a1)
{
  closure #1 in closure #1 in RemoteConversationClient.ensureReady()(a1, *(void **)(v1 + 16));
}

uint64_t sub_1B9F7AB28()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.reset()(uint64_t a1)
{
  closure #1 in closure #1 in RemoteConversationClient.cancel()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1F1380910, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork(), (uint64_t)&block_descriptor_194, (SEL *)&selRef_resetWithReply_);
}

uint64_t sub_1B9F7AB7C()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.cancel()(uint64_t a1)
{
  closure #1 in closure #1 in RemoteConversationClient.cancel()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1F1380960, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork(), (uint64_t)&block_descriptor_201, (SEL *)&selRef_cancelWithReply_);
}

uint64_t sub_1B9F7ABD0()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.warmup(refId:)(uint64_t a1)
{
  closure #1 in closure #1 in RemoteConversationClient.warmup(refId:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1B9F7ABE8()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t sub_1B9F7ABF4()
{
  uint64_t v1 = type metadata accessor for Input();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Input() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(a1, v1 + v4, *(void **)(v1 + v5), *(void *)(v1 + v5 + 8), *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1B9F7AD84()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<ConversationCanHandleResult, Error>);
}

BOOL static RemoteConversationConnectionInvalidationResult.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void RemoteConversationConnectionInvalidationResult.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int RemoteConversationConnectionInvalidationResult.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RemoteConversationConnectionInvalidationResult(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t lazy protocol witness table accessor for type RemoteConversationConnectionInvalidationResult and conformance RemoteConversationConnectionInvalidationResult()
{
  unint64_t result = lazy protocol witness table cache variable for type RemoteConversationConnectionInvalidationResult and conformance RemoteConversationConnectionInvalidationResult;
  if (!lazy protocol witness table cache variable for type RemoteConversationConnectionInvalidationResult and conformance RemoteConversationConnectionInvalidationResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationConnectionInvalidationResult and conformance RemoteConversationConnectionInvalidationResult);
  }
  return result;
}

uint64_t dispatch thunk of RemoteConversationConnectionProviding.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 8)
                                                                                     + **(int **)(a6 + 8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  void *v13 = v6;
  v13[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of RemoteConversationConnectionProviding.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 16)
                                                                                     + **(int **)(a6 + 16));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  void *v13 = v6;
  v13[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of RemoteConversationConnectionProviding.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))() & 1;
}

unsigned char *storeEnumTagSinglePayload for RemoteConversationConnectionInvalidationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9F7B260);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteConversationConnectionInvalidationResult()
{
  return &type metadata for RemoteConversationConnectionInvalidationResult;
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntF14SiriKitRuntime24RemoteConversationClientCSg_Tg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v11 = type metadata accessor for TaskPriority();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v15 = v14;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = 0;
  uint64_t v15 = 0;
LABEL_6:
  uint64_t v16 = *v4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
  uint64_t v18 = (void *)(v15 | v13);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v18 = v21;
    v21[2] = v13;
    void v21[3] = v15;
  }
  v20[1] = 1;
  _OWORD v20[2] = v18;
  v20[3] = v16;
  swift_task_create();
  return swift_release();
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v11 = type metadata accessor for TaskPriority();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v15 = v14;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = 0;
  uint64_t v15 = 0;
LABEL_6:
  uint64_t v16 = *v4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  uint64_t v18 = (void *)(v15 | v13);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v18 = v21;
    v21[2] = v13;
    void v21[3] = v15;
  }
  v20[1] = 1;
  _OWORD v20[2] = v18;
  v20[3] = v16;
  swift_task_create();
  return swift_release();
}

void *RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a1, v14);
  uint64_t v17 = *(void *)(a4 + 24);
  uint64_t v16 = *(void *)(a4 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a4, v17);
  uint64_t v19 = specialized RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(v15, a2, a3, v18, a5, a6, a7, a8, a9, v23, v14, v17, v13, v16);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v19;
}

uint64_t RemoteConversationService.warmup(refId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
  uint64_t v15 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v17 = static ConversationActor.shared;
  uint64_t v18 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v16, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = v17;
  v19[3] = v18;
  v19[4] = v5;
  v19[5] = a1;
  v19[6] = a2;
  v19[7] = a3;
  v19[8] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.warmup(refId:reply:), (uint64_t)v19);
  return swift_release();
}

uint64_t RemoteConversationService.canHandle(inputData:rcId:reply:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v26 = a3;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 1, 1, v17);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v18 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = static ConversationActor.shared;
  uint64_t v21 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v19, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v22 = (void *)swift_allocObject();
  _OWORD v22[2] = v20;
  v22[3] = v21;
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = a5;
  v22[7] = a6;
  uint64_t v23 = v26;
  v22[8] = v7;
  v22[9] = v23;
  v22[10] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:), (uint64_t)v22);
  return swift_release();
}

uint64_t RemoteConversationService.cancel(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"cancel(reply:)", 14, (uint64_t)&unk_1F1380B58, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.cancel(reply:));
}

uint64_t RemoteConversationService.reset(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"reset(reply:)", 13, (uint64_t)&unk_1F1380B80, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.reset(reply:));
}

uint64_t RemoteConversationService.cancel(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  uint64_t v16 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v18 = static ConversationActor.shared;
  uint64_t v19 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v17, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v20 = (void *)swift_allocObject();
  _OWORD v20[2] = v18;
  v20[3] = v19;
  void v20[4] = v8;
  v20[5] = a1;
  v20[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, a6, (uint64_t)v20);
  return swift_release();
}

uint64_t RemoteConversationService.ensureReady(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"ensureReady(reply:)", 19, (uint64_t)&unk_1F1380BA8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.ensureReady(reply:));
}

uint64_t RemoteConversationService.startTurn(turnData:bridge:reply:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  swift_getObjectType();
  uint64_t v13 = ServiceBridge.errorHandlingProxy.getter();
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
  uint64_t v15 = one-time initialization token for shared;
  swift_retain();
  id v16 = a1;
  swift_retain();
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v18 = static ConversationActor.shared;
  uint64_t v19 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v17, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v20 = (void *)swift_allocObject();
  _OWORD v20[2] = v18;
  v20[3] = v19;
  void v20[4] = v5;
  v20[5] = v16;
  v20[6] = v13;
  v20[7] = a3;
  v20[8] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:), (uint64_t)v20);
  swift_release();
  return swift_release();
}

uint64_t RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v34 = a3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  uint64_t v17 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  id v18 = a2;
  uint64_t v32 = v14;
  id v33 = v18;
  uint64_t v20 = v9;
  uint64_t v21 = a4;
  uint64_t v22 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v5;
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v24 = static ConversationActor.shared;
  uint64_t v25 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v19, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  unint64_t v26 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v27 = (v11 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = (char *)swift_allocObject();
  *((void *)v28 + 2) = v24;
  *((void *)v28 + 3) = v25;
  uint64_t v29 = v34;
  *((void *)v28 + 4) = v23;
  *((void *)v28 + 5) = v29;
  *((void *)v28 + 6) = v21;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v28[v26], v22, v20);
  *(void *)&v28[v27] = v33;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v32, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:), (uint64_t)v28);
  return swift_release();
}

uint64_t RemoteConversationService.accept(inputData:speechData:reply:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v17 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  id v19 = a3;
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v20 = static ConversationActor.shared;
  uint64_t v21 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v18, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v22 = (void *)swift_allocObject();
  _OWORD v22[2] = v20;
  v22[3] = v21;
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = a4;
  v22[7] = a5;
  v22[8] = v6;
  v22[9] = v19;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.accept(inputData:speechData:reply:), (uint64_t)v22);
  return swift_release();
}

uint64_t RemoteConversationService.paraphrase(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"paraphrase(reply:)", 18, (uint64_t)&unk_1F1380C48, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.paraphrase(reply:));
}

uint64_t RemoteConversationService.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoteConversationService.prepare(bridge:reply:)(a1, a2, a3, (uint64_t)"prepare(bridge:reply:)", 22, (uint64_t)&unk_1F1380C70, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.prepare(bridge:reply:));
}

uint64_t RemoteConversationService.commit(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoteConversationService.prepare(bridge:reply:)(a1, a2, a3, (uint64_t)"commit(bridge:reply:)", 21, (uint64_t)&unk_1F1380C98, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.commit(bridge:reply:));
}

uint64_t RemoteConversationService.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v7;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  uint64_t v17 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v19 = static ConversationActor.shared;
  uint64_t v20 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v18, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v19;
  void v21[3] = v20;
  void v21[4] = v9;
  v21[5] = a2;
  v21[6] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, a7, (uint64_t)v21);
  return swift_release();
}

uint64_t RemoteConversationService.isEmpty(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"isEmpty(reply:)", 15, (uint64_t)&unk_1F1380CC0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.isEmpty(reply:));
}

uint64_t RemoteConversationService.isCorrectable(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"isCorrectable(reply:)", 21, (uint64_t)&unk_1F1380CE8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.isCorrectable(reply:));
}

uint64_t RemoteConversationService.flexibleExecutionSupportOptions(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"flexibleExecutionSupportOptions(reply:)", 39, (uint64_t)&unk_1F1380D10, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:));
}

uint64_t RemoteConversationService.drainAsyncWork(reply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = static ConversationActor.shared;
  uint64_t v12 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v10, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v11;
  v13[3] = v12;
  v13[4] = v2;
  v13[5] = a1;
  v13[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.drainAsyncWork(reply:), (uint64_t)v13);
  return swift_release();
}

uint64_t ConversationActor.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t static ConversationActor.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t ConversationActor.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ConversationActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t ConversationActor.init()()
{
  swift_defaultActor_initialize();
  return v0;
}

uint64_t ConversationActor.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance ConversationActor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance ConversationActor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ConversationActor();

  return MEMORY[0x1F4187F20](v3, a2);
}

uint64_t one-time initialization function for ensureReadyTimeout()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static RemoteConversationService.ensureReadyTimeout);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)static RemoteConversationService.ensureReadyTimeout) = 500;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

uint64_t RemoteConversationService.turnDataProvider.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_turnDataProvider);
  swift_retain();
  return v1;
}

void *RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v32 = a6;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v27 = *(void *)(a1 + 32);
  uint64_t v28 = a9;
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a1, v14);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = *(void *)(a4 + 24);
  uint64_t v20 = *(void *)(a4 + 32);
  uint64_t v21 = __swift_mutable_project_boxed_opaque_existential_1(a4, v19);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v24 + 16))(v23);
  uint64_t v25 = specialized RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)((uint64_t)v17, v29, v30, (uint64_t)v23, a5, v32, a7, a8, v28, v31, v14, v19, v27, v20);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v25;
}

uint64_t closure #1 in RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)()
{
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static ReactiveUIEventActor.shared;
  *(void *)(v0 + 16) = static ReactiveUIEventActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  ReactiveUIEventActor.run()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in RemoteConversationService.warmup(refId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  _OWORD v8[2] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v9 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.warmup(refId:reply:), v9, 0);
}

uint64_t closure #1 in RemoteConversationService.warmup(refId:reply:)()
{
  uint64_t v1 = (void (*)(uint64_t))v0[5];
  __swift_project_boxed_opaque_existential_1((void *)(v0[2] + 16), *(void *)(v0[2] + 40));
  uint64_t v2 = dispatch thunk of FlowPlugin.warmup(refId:)();
  v1(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[26] = v14;
  v8[27] = v15;
  unsigned char v8[24] = a7;
  v8[25] = a8;
  v8[22] = a5;
  v8[23] = a6;
  v8[21] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v8[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v8[31] = v9;
  v8[32] = *(void *)(v9 - 8);
  v8[33] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Input();
  v8[34] = v10;
  v8[35] = *(void *)(v10 - 8);
  v8[36] = swift_task_alloc();
  v8[37] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:), v11, 0);
}

uint64_t closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = (long long *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 200);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v4);
  outlined init with copy of ReferenceResolutionClientProtocol(v6 + 16, v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPlugin);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginExtended);
  if (swift_dynamicCast())
  {
    uint64_t v7 = *(void *)(v0 + 296);
    uint64_t v8 = *(void *)(v0 + 280);
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 264);
    uint64_t v31 = *(void *)(v0 + 248);
    id v33 = *(objc_super **)(v0 + 272);
    uint64_t v11 = *(void *)(v0 + 200);
    long long v29 = *(_OWORD *)(v0 + 184);
    outlined init with take of ReferenceResolutionClientProtocol(v1, v0 + 16);
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    Input.identifier.getter();
    uint64_t v12 = swift_task_alloc();
    *(void *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = v0 + 16;
    *(void *)(v12 + 32) = v7;
    *(_OWORD *)(v12 + 40) = v29;
    dispatch thunk of ConversationSELFHelper.withExecutionFlowPluginFindFlowTime<A>(rcId:hypothesisId:_:)();
    swift_release();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v31);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    (*(void (**)(uint64_t, objc_super *))(v8 + 8))(v7, v33);
  }
  else
  {
    *(void *)(v0 + 128) = 0;
    *uint64_t v1 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for FlowPluginExtended?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "Warning: Old flow plugin that doesn't support findFlowForX. Cannot safely ask it if it will handle input, so assuming it will.", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    uint64_t v17 = *(void *)(v0 + 272);
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 256);
    uint64_t v22 = *(void *)(v0 + 232);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v23 = *(void *)(v0 + 224);
    uint64_t v32 = *(void *)(v0 + 296);
    uint64_t v30 = *(void (**)(id))(v0 + 184);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, 1, 1, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v23, 1, 1, v17);
    outlined init with copy of ReferenceResolutionClientProtocol?(v21, v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
    uint64_t v25 = objc_allocWithZone(CanHandleResult);
    v25[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
    v25[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
    outlined init with copy of ReferenceResolutionClientProtocol?(v23, (uint64_t)&v25[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v22, (uint64_t)&v25[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    *(void *)(v0 + 136) = v25;
    *(void *)(v0 + 144) = CanHandleResult;
    id v26 = objc_msgSendSuper2((objc_super *)(v0 + 136), sel_init);
    outlined destroy of ReferenceResolutionClientProtocol?(v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for Input?);
    outlined destroy of ReferenceResolutionClientProtocol?(v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v30(v26);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v32, v17);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(uint64_t a1, char *a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v196 = a5;
  uint64_t v197 = a4;
  uint64_t v204 = a3;
  uint64_t v202 = a2;
  uint64_t v190 = a1;
  uint64_t v193 = type metadata accessor for Input();
  uint64_t v191 = *(void *)(v193 - 8);
  MEMORY[0x1F4188790](v193);
  uint64_t v171 = (char *)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = type metadata accessor for Parse();
  uint64_t v174 = *(void *)(v175 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v175);
  unsigned int v169 = (char *)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v170 = (char *)&v168 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v199 = (char *)&v168 - v10;
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Parse, Error>);
  uint64_t v11 = MEMORY[0x1F4188790](v173);
  v198 = (char *)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v200 = (char *)&v168 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v172 = (id *)((char *)&v168 - v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v176 = (char *)&v168 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NamedParseTransformer?);
  MEMORY[0x1F4188790](v18 - 8);
  os_log_t v181 = (char *)&v168 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Parse, Parse>?);
  MEMORY[0x1F4188790](v20 - 8);
  unsigned int v180 = (char *)&v168 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Parse, Parse>);
  uint64_t v182 = *(void *)(v183 - 8);
  MEMORY[0x1F4188790](v183);
  unint64_t v177 = (char *)&v168 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v187 = (char *)&v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v186 = (uint64_t)&v168 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v188 = (char *)&v168 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?);
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v179 = (char *)&v168 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = type metadata accessor for UUID();
  uint64_t v201 = *(void *)(v205 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v205);
  uint64_t v184 = (char *)&v168 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v192 = (char *)&v168 - v33;
  uint64_t v189 = type metadata accessor for RemoteConversationService.State(0);
  uint64_t v34 = MEMORY[0x1F4188790](v189);
  uint64_t v185 = (uint64_t)&v168 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v178 = (uint64_t)&v168 - v37;
  MEMORY[0x1F4188790](v36);
  uint64_t v39 = (char *)&v168 - v38;
  uint64_t v40 = type metadata accessor for FlowTraceEvent();
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  os_log_type_t v43 = (uint64_t *)((char *)&v168 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = type metadata accessor for FlowSearchResult();
  uint64_t v195 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v46 = (char *)&v168 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  swift_allocObject();
  uint64_t v47 = SiriEnvironment.init(parent:)();
  type metadata accessor for UserIdentityProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, 255, MEMORY[0x1E4FA1DD0]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for FlowTaskProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, 255, MEMORY[0x1E4FA1890]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for CallStateEnvironmentProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, 255, MEMORY[0x1E4FA1E60]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  uint64_t v206 = v202;
  uint64_t v207 = v204;
  uint64_t v203 = v47;
  uint64_t v194 = v44;
  uint64_t v48 = v217;
  static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  uint64_t v202 = v48;
  uint64_t v217 = v46;
  uint64_t v49 = FlowSearchResult.flow.getter();
  if (v49)
  {
    *os_log_type_t v43 = v49;
    (*(void (**)(uint64_t *, void, uint64_t))(v41 + 104))(v43, *MEMORY[0x1E4FA1858], v40);
    static FlowTrace.trace(event:)();
    (*(void (**)(uint64_t *, uint64_t))(v41 + 8))(v43, v40);
  }
  else
  {
    FlowSearchResult.actingFlow.getter();
    if (v215)
    {
      outlined init with take of ReferenceResolutionClientProtocol(&v214, (uint64_t)v216);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v216, (uint64_t)v43);
      (*(void (**)(uint64_t *, void, uint64_t))(v41 + 104))(v43, *MEMORY[0x1E4FA1820], v40);
      static FlowTrace.trace(event:)();
      (*(void (**)(uint64_t *, uint64_t))(v41 + 8))(v43, v40);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v216);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v214, &demangling cache variable for type metadata for ActingFlow?);
    }
  }
  os_log_type_t v50 = v200;
  Swift::Int v51 = v199;
  uint64_t v52 = (uint64_t)v198;
  v216[3] = (uint64_t)&type metadata for EncoreFeatureFlag;
  v216[4] = lazy protocol witness table accessor for type EncoreFeatureFlag and conformance EncoreFeatureFlag();
  char v53 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v216);
  if (v53)
  {
    FlowSearchResult.actingFlow.getter();
    if (v215)
    {
      outlined init with take of ReferenceResolutionClientProtocol(&v214, (uint64_t)v216);
      uint64_t v54 = v190 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
      swift_beginAccess();
      outlined init with copy of RemoteConversationService.State(v54, (uint64_t)v39, type metadata accessor for RemoteConversationService.State);
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of RemoteConversationService.State((uint64_t)v39, type metadata accessor for RemoteConversationService.State);
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v58 = 0;
          _os_log_impl(&dword_1B9C64000, v56, v57, "canHandle() called while we're not in a turn. This means we cannot keep the provided input in-memory for followup calls to accept().", v58, 2u);
          MEMORY[0x1BA9E48C0](v58, -1, -1);
        }

        uint64_t v59 = (uint64_t)v188;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v201 + 56))(v188, 1, 1, v205);
        uint64_t v60 = (uint64_t)v187;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v187, 1, 1, v193);
        uint64_t v61 = v186;
        outlined init with copy of ReferenceResolutionClientProtocol?(v59, v186, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
        BOOL v63 = objc_allocWithZone(CanHandleResult);
        v63[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
        v63[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
        outlined init with copy of ReferenceResolutionClientProtocol?(v60, (uint64_t)&v63[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v61, (uint64_t)&v63[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v209.receiver = v63;
        v209.super_class = CanHandleResult;
        id v64 = objc_msgSendSuper2(&v209, sel_init);
LABEL_34:
        uint64_t v95 = v64;
        outlined destroy of ReferenceResolutionClientProtocol?(v61, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for Input?);
        outlined destroy of ReferenceResolutionClientProtocol?(v59, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        ((void (*)(void *))v197)(v95);
        swift_release();

LABEL_43:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v216);
        return (*(uint64_t (**)(char *, uint64_t))(v195 + 8))(v217, v194);
      }
      uint64_t v200 = (char *)*((void *)v39 + 10);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v39 + 40), &demangling cache variable for type metadata for Conversational?);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
      uint64_t v111 = v192;
      UUID.init()();
      uint64_t v199 = *(char **)(v201 + 16);
      uint64_t v112 = (uint64_t)v184;
      ((void (*)(char *, char *, uint64_t))v199)(v184, v111, v205);
      uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
      uint64_t v114 = (uint64_t)v179;
      uint64_t v115 = (uint64_t)&v179[*(int *)(v113 + 48)];
      uint64_t v116 = *(int *)(v113 + 64);
      uint64_t v117 = v191;
      uint64_t v118 = v193;
      (*(void (**)(char *, uint64_t, uint64_t))(v191 + 16))(v179, v204, v193);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v216, v115);
      *(void *)(v114 + v116) = v203;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v114, 0, 1, v113);
      swift_beginAccess();
      swift_retain();
      specialized Dictionary.subscript.setter(v114, v112);
      swift_endAccess();
      uint64_t v119 = (uint64_t)v188;
      uint64_t v120 = v205;
      ((void (*)(char *, char *, uint64_t))v199)(v188, v192, v205);
      uint64_t v121 = v201;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v201 + 56))(v119, 0, 1, v120);
      uint64_t v122 = (uint64_t)v187;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56))(v187, 1, 1, v118);
      uint64_t v123 = v186;
      outlined init with copy of ReferenceResolutionClientProtocol?(v119, v186, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      unint64_t v124 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
      uint64_t v125 = objc_allocWithZone(v124);
      v125[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
      v125[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
      outlined init with copy of ReferenceResolutionClientProtocol?(v122, (uint64_t)&v125[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v123, (uint64_t)&v125[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v208.receiver = v125;
      v208.super_class = v124;
      id v126 = objc_msgSendSuper2(&v208, sel_init);
      outlined destroy of ReferenceResolutionClientProtocol?(v123, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ReferenceResolutionClientProtocol?(v122, &demangling cache variable for type metadata for Input?);
      outlined destroy of ReferenceResolutionClientProtocol?(v119, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      ((void (*)(id))v197)(v126);

      swift_release();
      goto LABEL_42;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v214, &demangling cache variable for type metadata for ActingFlow?);
  }
  FlowSearchResult.actingFlow.getter();
  if (v215)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v214, (uint64_t)v216);
    uint64_t v65 = FlowSearchResult.flow.getter();
    swift_release();
    if (!v65)
    {
      uint64_t v86 = v190 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
      swift_beginAccess();
      uint64_t v87 = v86;
      uint64_t v88 = v178;
      outlined init with copy of RemoteConversationService.State(v87, v178, type metadata accessor for RemoteConversationService.State);
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of RemoteConversationService.State(v88, type metadata accessor for RemoteConversationService.State);
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v89 = type metadata accessor for Logger();
        __swift_project_value_buffer(v89, (uint64_t)static Logger.executor);
        uint64_t v90 = Logger.logObject.getter();
        os_log_type_t v91 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v90, v91))
        {
          BOOL v92 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)BOOL v92 = 0;
          _os_log_impl(&dword_1B9C64000, v90, v91, "canHandle() called while we're not in a turn. This means we cannot keep the provided input in-memory for followup calls to accept().", v92, 2u);
          MEMORY[0x1BA9E48C0](v92, -1, -1);
        }

        uint64_t v59 = (uint64_t)v188;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v201 + 56))(v188, 1, 1, v205);
        uint64_t v60 = (uint64_t)v187;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v187, 1, 1, v193);
        uint64_t v61 = v186;
        outlined init with copy of ReferenceResolutionClientProtocol?(v59, v186, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v93 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
        os_log_type_t v94 = objc_allocWithZone(v93);
        v94[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
        v94[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
        outlined init with copy of ReferenceResolutionClientProtocol?(v60, (uint64_t)&v94[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v61, (uint64_t)&v94[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v211.receiver = v94;
        v211.super_class = v93;
        id v64 = objc_msgSendSuper2(&v211, sel_init);
        goto LABEL_34;
      }
      uint64_t v200 = *(char **)(v88 + 80);
      outlined destroy of ReferenceResolutionClientProtocol?(v88 + 40, &demangling cache variable for type metadata for Conversational?);
      __swift_destroy_boxed_opaque_existential_1Tm(v88);
      uint64_t v129 = v192;
      UUID.init()();
      uint64_t v199 = *(char **)(v201 + 16);
      uint64_t v130 = (uint64_t)v184;
      ((void (*)(char *, char *, uint64_t))v199)(v184, v129, v205);
      uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
      uint64_t v132 = (uint64_t)v179;
      uint64_t v133 = (uint64_t)&v179[*(int *)(v131 + 48)];
      uint64_t v134 = *(int *)(v131 + 64);
      uint64_t v135 = v191;
      uint64_t v136 = v193;
      (*(void (**)(char *, uint64_t, uint64_t))(v191 + 16))(v179, v204, v193);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v216, v133);
      *(void *)(v132 + v134) = v203;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56))(v132, 0, 1, v131);
      swift_beginAccess();
      swift_retain();
      specialized Dictionary.subscript.setter(v132, v130);
      swift_endAccess();
      uint64_t v137 = (uint64_t)v188;
      uint64_t v138 = v205;
      ((void (*)(char *, char *, uint64_t))v199)(v188, v192, v205);
      uint64_t v121 = v201;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v201 + 56))(v137, 0, 1, v138);
      uint64_t v139 = (uint64_t)v187;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v135 + 56))(v187, 1, 1, v136);
      uint64_t v140 = v186;
      outlined init with copy of ReferenceResolutionClientProtocol?(v137, v186, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      unint64_t v141 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
      uint64_t v142 = objc_allocWithZone(v141);
      v142[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
      v142[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
      outlined init with copy of ReferenceResolutionClientProtocol?(v139, (uint64_t)&v142[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v140, (uint64_t)&v142[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v210.receiver = v142;
      v210.super_class = v141;
      id v143 = objc_msgSendSuper2(&v210, sel_init);
      outlined destroy of ReferenceResolutionClientProtocol?(v140, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ReferenceResolutionClientProtocol?(v139, &demangling cache variable for type metadata for Input?);
      outlined destroy of ReferenceResolutionClientProtocol?(v137, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      ((void (*)(id))v197)(v143);
      swift_release();

LABEL_42:
      swift_release();
      (*(void (**)(char *, uint64_t))(v121 + 8))(v192, v205);
      goto LABEL_43;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v216);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v214, &demangling cache variable for type metadata for ActingFlow?);
  }
  uint64_t v66 = FlowSearchResult.flow.getter();
  if (v66)
  {
    uint64_t v67 = v66;
    uint64_t v68 = v190 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
    swift_beginAccess();
    uint64_t v69 = v68;
    uint64_t v70 = v185;
    outlined init with copy of RemoteConversationService.State(v69, v185, type metadata accessor for RemoteConversationService.State);
    if (swift_getEnumCaseMultiPayload())
    {
      swift_retain();
      outlined destroy of RemoteConversationService.State(v70, type metadata accessor for RemoteConversationService.State);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v71 = type metadata accessor for Logger();
      __swift_project_value_buffer(v71, (uint64_t)static Logger.executor);
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl(&dword_1B9C64000, v72, v73, "canHandle() called while we're not in a turn. This means we cannot keep the provided input in-memory for followup calls to accept().", v74, 2u);
        MEMORY[0x1BA9E48C0](v74, -1, -1);
      }

      uint64_t v75 = (uint64_t)v188;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v201 + 56))(v188, 1, 1, v205);
      uint64_t v76 = (uint64_t)v187;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v187, 1, 1, v193);
      uint64_t v77 = v186;
      outlined init with copy of ReferenceResolutionClientProtocol?(v75, v186, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v78 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
      uint64_t v79 = objc_allocWithZone(v78);
      v79[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
      v79[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
      outlined init with copy of ReferenceResolutionClientProtocol?(v76, (uint64_t)&v79[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v77, (uint64_t)&v79[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v213.receiver = v79;
      v213.super_class = v78;
      id v80 = objc_msgSendSuper2(&v213, sel_init);
      outlined destroy of ReferenceResolutionClientProtocol?(v77, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for Input?);
      outlined destroy of ReferenceResolutionClientProtocol?(v75, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      ((void (*)(id))v197)(v80);
      swift_release();

      swift_release_n();
    }
    else
    {
      uint64_t v200 = *(char **)(v70 + 80);
      swift_retain();
      outlined destroy of ReferenceResolutionClientProtocol?(v70 + 40, &demangling cache variable for type metadata for Conversational?);
      __swift_destroy_boxed_opaque_existential_1Tm(v70);
      uint64_t v96 = v192;
      UUID.init()();
      uint64_t v199 = *(char **)(v201 + 16);
      uint64_t v97 = (uint64_t)v184;
      ((void (*)(char *, char *, uint64_t))v199)(v184, v96, v205);
      uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
      uint64_t v99 = *(int *)(v98 + 48);
      uint64_t v100 = *(int *)(v98 + 64);
      uint64_t v101 = v191;
      uint64_t v102 = (uint64_t)v176;
      (*(void (**)(char *, uint64_t, uint64_t))(v191 + 16))(v176, v204, v193);
      *(void *)(v102 + v99) = v67;
      *(void *)(v102 + v100) = v203;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v102, 0, 1, v98);
      swift_beginAccess();
      swift_retain();
      swift_retain();
      specialized Dictionary.subscript.setter(v102, v97);
      swift_endAccess();
      uint64_t v103 = (uint64_t)v188;
      uint64_t v104 = v205;
      ((void (*)(char *, char *, uint64_t))v199)(v188, v192, v205);
      uint64_t v105 = v201;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v201 + 56))(v103, 0, 1, v104);
      uint64_t v106 = (uint64_t)v187;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v187, 1, 1, v193);
      uint64_t v107 = v186;
      outlined init with copy of ReferenceResolutionClientProtocol?(v103, v186, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v108 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
      uint64_t v109 = objc_allocWithZone(v108);
      v109[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
      v109[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
      outlined init with copy of ReferenceResolutionClientProtocol?(v106, (uint64_t)&v109[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v107, (uint64_t)&v109[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v212.receiver = v109;
      v212.super_class = v108;
      id v110 = objc_msgSendSuper2(&v212, sel_init);
      outlined destroy of ReferenceResolutionClientProtocol?(v107, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ReferenceResolutionClientProtocol?(v106, &demangling cache variable for type metadata for Input?);
      outlined destroy of ReferenceResolutionClientProtocol?(v103, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      ((void (*)(id))v197)(v110);
      swift_release();
      swift_release_n();

      swift_release();
      (*(void (**)(char *, uint64_t))(v105 + 8))(v192, v205);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v195 + 8))(v217, v194);
  }
  Swift::Int v81 = v181;
  FlowSearchResult.transformer.getter();
  uint64_t v82 = (uint64_t)v81;
  uint64_t v83 = type metadata accessor for NamedParseTransformer();
  uint64_t v84 = *(void *)(v83 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v82, (uint64_t *)&demangling cache variable for type metadata for NamedParseTransformer?);
    uint64_t v85 = (uint64_t)v180;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v182 + 56))(v180, 1, 1, v183);
LABEL_38:
    outlined destroy of ReferenceResolutionClientProtocol?(v85, &demangling cache variable for type metadata for Transformer<Parse, Parse>?);
    if (one-time initialization token for unsupported != -1) {
      swift_once();
    }
    ((void (*)(uint64_t))v197)(static ConversationCanHandleResult.unsupported);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v195 + 8))(v217, v194);
  }
  uint64_t v85 = (uint64_t)v180;
  NamedParseTransformer.resolve()();
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v82, v83);
  uint64_t v127 = v182;
  uint64_t v128 = v183;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48))(v85, 1, v183) == 1) {
    goto LABEL_38;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v127 + 32))(v177, v85, v128);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v145 = type metadata accessor for Logger();
  __swift_project_value_buffer(v145, (uint64_t)static Logger.executor);
  uint64_t v146 = Logger.logObject.getter();
  os_log_type_t v147 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v146, v147))
  {
    uint64_t v148 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v148 = 0;
    _os_log_impl(&dword_1B9C64000, v146, v147, "Conversation wants to reform input", v148, 2u);
    MEMORY[0x1BA9E48C0](v148, -1, -1);
  }

  uint64_t v149 = (void (*)(char *))Transformer.transform.getter();
  Input.parse.getter();
  uint64_t v150 = v202;
  v149(v51);
  uint64_t v202 = v150;
  swift_release();
  uint64_t v151 = *(void (**)(char *, uint64_t))(v174 + 8);
  v151(v51, v175);
  if (v150)
  {
    void *v50 = v202;
    swift_storeEnumTagMultiPayload();
    uint64_t v202 = 0;
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v52, (uint64_t)v50, &demangling cache variable for type metadata for Result<Parse, Error>);
  }
  uint64_t v152 = v172;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v50, (uint64_t)v172, &demangling cache variable for type metadata for Result<Parse, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v153 = *v152;
    id v154 = *v152;
    id v155 = v153;
    uint64_t v156 = Logger.logObject.getter();
    os_log_type_t v157 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v156, v157))
    {
      uint64_t v158 = (uint8_t *)swift_slowAlloc();
      uint64_t v159 = swift_slowAlloc();
      v216[0] = v159;
      *(_DWORD *)uint64_t v158 = 136315138;
      *(void *)&long long v214 = v153;
      id v160 = v153;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v161 = String.init<A>(describing:)();
      *(void *)&long long v214 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v161, v162, v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v156, v157, "Conversation wants to reform input, but got an error in transformation: %s", v158, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v159, -1, -1);
      MEMORY[0x1BA9E48C0](v158, -1, -1);
    }
    else
    {
    }
    if (one-time initialization token for unsupported != -1) {
      swift_once();
    }
    ((void (*)(uint64_t))v197)(static ConversationCanHandleResult.unsupported);
    swift_release();
  }
  else
  {
    uint64_t v163 = v174;
    unint64_t v164 = v170;
    uint64_t v165 = v175;
    (*(void (**)(char *, id *, uint64_t))(v174 + 32))(v170, v152, v175);
    (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v169, v164, v165);
    uint64_t v166 = (uint64_t)v171;
    Input.init(parse:)();
    id v167 = specialized static ConversationCanHandleResult.reformTo(input:)(v166);
    v197();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v166, v193);
    v151(v164, v165);
  }
  (*(void (**)(char *, uint64_t))(v195 + 8))(v217, v194);
  return (*(uint64_t (**)(char *, uint64_t))(v182 + 8))(v177, v183);
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Parse();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Input.parse.getter();
  dispatch thunk of FlowPluginExtended.findFlowForX(parse:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t RemoteConversationService.FlowAndInputRegistry.register(flow:input:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
  uint64_t v16 = (uint64_t)&v10[*(int *)(v15 + 48)];
  uint64_t v17 = *(int *)(v15 + 64);
  uint64_t v18 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v10, a2, v18);
  outlined init with copy of ReferenceResolutionClientProtocol(a1, v16);
  *(void *)&v10[v17] = a3;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 0, 1, v15);
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v14);
  return swift_endAccess();
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
  uint64_t v16 = *(int *)(v15 + 48);
  uint64_t v17 = *(int *)(v15 + 64);
  uint64_t v18 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v10, a2, v18);
  *(void *)&v10[v16] = a1;
  *(void *)&v10[v17] = a3;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 0, 1, v15);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v14);
  return swift_endAccess();
}

uint64_t closure #1 in RemoteConversationService.cancel(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  v6[9] = type metadata accessor for RemoteConversationService.State(0);
  v6[10] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.cancel(reply:), v7, 0);
}

uint64_t closure #1 in RemoteConversationService.cancel(reply:)()
{
  uint64_t v17 = v0;
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[6] + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = v0[10];
      uint64_t v5 = (void (*)(void))v0[7];
      uint64_t v6 = v4
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                  + 64);
      swift_bridgeObjectRelease();
      SiriKitRuntimeState.invalidateCurrentTurn()();
      v5();
      uint64_t v7 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm(v4 + 40);
      __swift_destroy_boxed_opaque_existential_1Tm(v4);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = v0[10];
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v8 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1Tm(v8);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v16 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x72286C65636E6163, 0xEE00293A796C7065, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v10, v11, "No conversation is active, ignoring %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }

  ((void (*)(void))v0[7])();
LABEL_10:
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t closure #1 in RemoteConversationService.reset(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[30] = a5;
  v6[31] = a6;
  v6[29] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[32] = swift_task_alloc();
  v6[33] = type metadata accessor for RemoteConversationService.State(0);
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.reset(reply:), v7, 0);
}

uint64_t closure #1 in RemoteConversationService.reset(reply:)()
{
  uint64_t v23 = v0;
  uint64_t v1 = (long long *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 232) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v3, v2, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *(void *)(v0 + 280);
      uint64_t v6 = v5
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                  + 64);
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v5 + 40), v0 + 16);
      uint64_t v7 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm(v5);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 280);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v8 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1Tm(v8);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6572287465736572, 0xED0000293A796C70, &v22);
    uint64_t v1 = (long long *)(v0 + 136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v10, v11, "No conversation is active, ignoring %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }

  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
LABEL_10:
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t)v1, &demangling cache variable for type metadata for Conversational?);
  if (*(void *)(v0 + 160))
  {
    uint64_t v14 = *(void *)(v0 + 256);
    outlined init with take of ReferenceResolutionClientProtocol(v1, v0 + 96);
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 96, v0 + 56);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = 0;
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v16 + 32);
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RemoteConversationService.reset(reply:), v16);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v14, &demangling cache variable for type metadata for TaskPriority?);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v1, &demangling cache variable for type metadata for Conversational?);
  }
  uint64_t v17 = *(void *)(v0 + 272);
  uint64_t v18 = *(void (**)(uint64_t))(v0 + 240);
  SiriKitRuntimeState.invalidateCurrentTurn()();
  SiriKitRuntimeState.taskService.getter();
  TaskService.onTurnInvalidated()();
  swift_release();
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of RemoteConversationService.State(v17, v3);
  uint64_t v19 = swift_endAccess();
  v18(v19);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for Conversational?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.reset(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RemoteConversationService.reset(reply:), 0, 0);
}

uint64_t closure #1 in closure #1 in RemoteConversationService.reset(reply:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in RemoteConversationService.reset(reply:);
  return v6(v2, v3);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in RemoteConversationService.ensureReady(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[32] = a5;
  v6[33] = a6;
  v6[31] = a4;
  v6[34] = type metadata accessor for RemoteConversationService.State(0);
  v6[35] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v6[36] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.ensureReady(reply:), v7, 0);
}

uint64_t closure #1 in RemoteConversationService.ensureReady(reply:)()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 248) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *(void *)(v0 + 280);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v4 + 40), v0 + 96);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1B9C64000, v7, v8, "startTurn received for conversation which is executing, ensuring ready", v9, 2u);
        MEMORY[0x1BA9E48C0](v9, -1, -1);
      }
      uint64_t v10 = *(void *)(v0 + 280);

      uint64_t v11 = v10 + *(int *)(v5 + 64);
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 96), v0 + 16);
      uint64_t v12 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
LABEL_14:
      __swift_destroy_boxed_opaque_existential_1Tm(*(void *)(v0 + 280));
      uint64_t v20 = *(void *)(v0 + 40);
      uint64_t v21 = *(void *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v20);
      if (one-time initialization token for ensureReadyTimeout != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for DispatchTimeInterval();
      uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static RemoteConversationService.ensureReadyTimeout);
      uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 16) + **(int **)(v21 + 16));
      uint64_t v24 = (void *)swift_task_alloc();
      *(void *)(v0 + 296) = v24;
      *uint64_t v24 = v0;
      v24[1] = closure #1 in RemoteConversationService.ensureReady(reply:);
      return v34(v23, v20, v21);
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v35 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x80000001BA069110, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v27, v28, "No conversation is active, ignoring %s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v30, -1, -1);
      MEMORY[0x1BA9E48C0](v29, -1, -1);
    }

    (*(void (**)(void))(v0 + 256))(0);
  }
  else
  {
    uint64_t v13 = (long long *)(v0 + 56);
    uint64_t v14 = v0 + 136;
    uint64_t v15 = *(void *)(v0 + 280) + 40;
    swift_release();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v15, v0 + 136, &demangling cache variable for type metadata for Conversational?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 136, v0 + 56, &demangling cache variable for type metadata for Conversational?);
    if (*(void *)(v0 + 80))
    {
      outlined init with take of ReferenceResolutionClientProtocol(v13, v0 + 176);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl(&dword_1B9C64000, v17, v18, "startTurn received for conversation which is awaiting input, ensuring ready", v19, 2u);
        MEMORY[0x1BA9E48C0](v19, -1, -1);
      }

      outlined destroy of ReferenceResolutionClientProtocol?(v14, &demangling cache variable for type metadata for Conversational?);
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 176), v0 + 16);
      goto LABEL_14;
    }
    uint64_t v31 = *(void *)(v0 + 280);
    uint64_t v32 = *(void (**)(void))(v0 + 256);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for Conversational?);
    v32(0);
    outlined destroy of ReferenceResolutionClientProtocol?(v14, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1Tm(v31);
  }
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
  return v33();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 288);
  if (v0) {
    uint64_t v4 = closure #1 in RemoteConversationService.ensureReady(reply:);
  }
  else {
    uint64_t v4 = closure #1 in RemoteConversationService.ensureReady(reply:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 256))(0);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void (*v2)(void *);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[38];
  uint64_t v2 = (void (*)(void *))v0[32];
  uint64_t v3 = v1;
  v2(v1);

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  uint64_t v17 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v19 = static ConversationActor.shared;
  uint64_t v20 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v18, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v19;
  void v21[3] = v20;
  void v21[4] = v6;
  v21[5] = a1;
  v21[6] = a2;
  v21[7] = a3;
  v21[8] = a4;
  v21[9] = a5;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:), (uint64_t)v21);
  return swift_release();
}

uint64_t closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v12;
  v8[4] = a6;
  v8[5] = a7;
  _OWORD v8[2] = a4;
  v8[3] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v9 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:), v9, 0);
}

uint64_t closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)()
{
  uint64_t v1 = (*(uint64_t (**)(void, void))(v0[2]
                                                 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_turnDataProvider))(v0[3], v0[4]);
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "Starting turn from pre-cached turn data", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
    uint64_t v8 = v0[6];
    uint64_t v7 = v0[7];
    uint64_t v9 = v0[5];

    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = v7;
    swift_retain();
    RemoteConversationService.startTurn(turnData:bridge:reply:)(v2, v9, (uint64_t)partial apply for closure #1 in closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:), v10);

    swift_release();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "No pre-cached turn data available, it will need to be re-sent.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }
    uint64_t v15 = (void (*)(void, void))v0[6];

    v15(0, 0);
  }
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[28] = a7;
  v8[29] = a8;
  v8[26] = a5;
  v8[27] = a6;
  v8[25] = a4;
  uint64_t v9 = type metadata accessor for UUID();
  v8[30] = v9;
  v8[31] = *(void *)(v9 - 8);
  v8[32] = swift_task_alloc();
  v8[33] = type metadata accessor for RemoteConversationService.State(0);
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  type metadata accessor for RemoteConversationTurnData(0);
  v8[36] = swift_task_alloc();
  v8[37] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v10 = static ConversationActor.shared;
  v8[38] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:), v10, 0);
}

uint64_t closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:)()
{
  uint64_t v40 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  *(void *)(v0 + 312) = SiriKitRuntimeState.taskService.getter();
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_flowTask);
  if (v2)
  {
    uint64_t v3 = v2;
    TaskService.onExistingXPCTask(_:)(v3);
    TaskService.onNewTurn()();
  }
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 208)) + 0xA0))();
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 200) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v5, v4, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v14 = *(void *)(v0 + 280);
    uint64_t v36 = *(void *)(v14 + 80);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v14 + 40, v0 + 16, &demangling cache variable for type metadata for Conversational?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v16 = *(void *)(v0 + 288);
    uint64_t v15 = *(void *)(v0 + 296);
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    outlined init with copy of RemoteConversationService.State(v15, v16, type metadata accessor for RemoteConversationTurnData);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(uint64_t **)(v0 + 288);
    if (v20)
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v39 = v35;
      *(_DWORD *)uint64_t v22 = 136380675;
      uint64_t v23 = *v21;
      unint64_t v24 = v21[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RemoteConversationService.State((uint64_t)v21, type metadata accessor for RemoteConversationTurnData);
      _os_log_impl(&dword_1B9C64000, v18, v19, "Multiple StartTurns while awaiting input. New executionRequestId=%{private}s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v35, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    else
    {
      outlined destroy of RemoteConversationService.State(*(void *)(v0 + 288), type metadata accessor for RemoteConversationTurnData);
    }

    uint64_t v32 = *(void **)(v0 + 272);
    uint64_t v8 = *(void *)(v0 + 280);
    RemoteConversationService.makeTurn(turnData:bridge:)(*(uint64_t **)(v0 + 296), *(void *)(v0 + 216), v32);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0 + 16, (uint64_t)(v32 + 5), &demangling cache variable for type metadata for Conversational?);
    v32[10] = v36;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of RemoteConversationService.State((uint64_t)v32, v5);
    swift_endAccess();
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = *(uint64_t **)(v0 + 296);
    uint64_t v9 = *(void **)(v0 + 272);
    uint64_t v8 = *(void *)(v0 + 280);
    uint64_t v10 = *(void *)(v0 + 216);
    uint64_t v37 = v8
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                 + 64);
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v8 + 40), v0 + 56);
    RemoteConversationService.makeTurn(turnData:bridge:)(v7, v10, v9);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), (uint64_t)(v9 + 5));
    type metadata accessor for RemoteConversationService.FlowAndInputRegistry();
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = MEMORY[0x1E4FBC868];
    *(void *)(v11 + 16) = MEMORY[0x1E4FBC868];
    *(void *)(v11 + 24) = v12;
    v9[10] = v11;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of RemoteConversationService.State((uint64_t)v9, v5);
    swift_endAccess();
    uint64_t v13 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v37, v13);
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1Tm(v8);
    goto LABEL_18;
  }
  uint64_t v25 = *(void *)(v0 + 272);
  RemoteConversationService.makeTurn(turnData:bridge:)(*(uint64_t **)(v0 + 296), *(void *)(v0 + 216), (void *)v25);
  type metadata accessor for RemoteConversationService.FlowAndInputRegistry();
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(void *)(v25 + 72) = 0;
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = MEMORY[0x1E4FBC868];
  *(void *)(v26 + 16) = MEMORY[0x1E4FBC868];
  *(void *)(v26 + 24) = v27;
  *(void *)(v25 + 80) = v26;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of RemoteConversationService.State(v25, v5);
  swift_endAccess();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&dword_1B9C64000, v29, v30, "Turn Started.", v31, 2u);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }

LABEL_18:
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.root.getter();
  *(void *)(v0 + 320) = SiriEnvironment.callState.getter();
  swift_release();
  uint64_t v38 = (uint64_t (*)(void))((int)*MEMORY[0x1E4FA1E50] + MEMORY[0x1E4FA1E50]);
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v33;
  *uint64_t v33 = v0;
  v33[1] = closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:);
  return v38();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 304);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = v0[37];
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v8 = v0[30];
  uint64_t v4 = (void (*)(void))v0[28];
  uint64_t v5 = v0[25];
  type metadata accessor for ConversationSELFHelper();
  swift_bridgeObjectRetain();
  static ConversationSELFHelper.makeUUID(fromExecutionRequestId:)();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1((void *)(v5 + 120), *(void *)(v5 + 144));
  dispatch thunk of ReferenceResolutionClientProtocol.inRequest(requestId:)();
  v4(0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v8);
  outlined destroy of RemoteConversationService.State(v1, type metadata accessor for RemoteConversationTurnData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t RemoteConversationService.makeTurn(turnData:bridge:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for InvocationStateImpl();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v8 = (int *)v7;
  uint64_t v9 = *(void **)((char *)a1 + *(int *)(v7 + 44));
  if (v9)
  {
    uint64_t v10 = *(void **)((char *)a1 + *(int *)(v7 + 28));
    uint64_t v12 = *a1;
    uint64_t v11 = (void *)a1[1];
    uint64_t v13 = v9;
    uint64_t v14 = v10;
    swift_bridgeObjectRetain();
    uint64_t v23 = v12;
    InvocationStateImpl.init(proxiedRequestContext:localRequestContextData:executionRequestId:)(v13, v14, v12, (unint64_t)v11, v6);
  }
  else
  {
    uint64_t v15 = *a1;
    uint64_t v11 = (void *)a1[1];
    uint64_t v16 = *(void **)((char *)a1 + *(int *)(v7 + 28));
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    swift_bridgeObjectRetain();
    uint64_t v14 = v16;
    uint64_t v23 = v15;
    InvocationStateImpl.init(executionRequestId:requestContextData:previousInvocationState:)(v15, (uint64_t)v11, v14, (uint64_t)&v26, v6);
  }
  uint64_t v17 = a1[2];
  uint64_t v18 = a1[3];
  uint64_t v19 = (uint64_t)a1 + v8[6];
  *((void *)&v27 + 1) = v4;
  uint64_t v28 = &protocol witness table for InvocationStateImpl;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v26);
  outlined init with copy of RemoteConversationService.State((uint64_t)v6, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  SiriKitRuntimeState.makeNewTurn(requestContextData:executionRequestId:rootRequestId:sessionId:invocationState:conversationLoggingId:bridge:scopedRRData:invokedByPeerToPeerEORR:)(v14, v23, v11, v17, v18, v19, (uint64_t)&v26, (uint64_t)a1 + v8[8], v24, v25, *(uint64_t *)((char *)a1 + v8[12]), *(uint64_t *)((char *)a1 + v8[12] + 8), *((unsigned char *)a1 + v8[10]));
  outlined destroy of RemoteConversationService.State((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v26);
}

uint64_t RemoteConversationService.FlowAndInputRegistry.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  *(void *)(result + 24) = v1;
  return result;
}

uint64_t closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[41] = a7;
  v8[42] = a8;
  v8[39] = a5;
  v8[40] = a6;
  v8[38] = a4;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  v8[43] = v9;
  v8[44] = *(void *)(v9 - 8);
  v8[45] = swift_task_alloc();
  v8[46] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Parse();
  v8[47] = v10;
  v8[48] = *(void *)(v10 - 8);
  v8[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?);
  v8[50] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?);
  v8[51] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Input();
  v8[52] = v11;
  v8[53] = *(void *)(v11 - 8);
  v8[54] = swift_task_alloc();
  v8[55] = swift_task_alloc();
  v8[56] = type metadata accessor for RemoteConversationService.State(0);
  v8[57] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v12 = static ConversationActor.shared;
  v8[58] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:), v12, 0);
}

uint64_t closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)()
{
  uint64_t v100 = v0;
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 304) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *(void *)(v0 + 456);
      uint64_t v5 = *(void *)(v0 + 416);
      uint64_t v6 = *(void *)(v0 + 424);
      uint64_t v7 = *(void (**)(id))(v0 + 312);
      uint64_t v8 = v4
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                  + 64);
      swift_bridgeObjectRelease();
      uint64_t v98 = 0;
      unint64_t v99 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
      uint64_t v9 = (void *)swift_allocError();
      *uint64_t v10 = 0xD000000000000058;
      v10[1] = 0x80000001BA06B980;
      id v11 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

      v7(v11);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
      __swift_destroy_boxed_opaque_existential_1Tm(v4 + 40);
      __swift_destroy_boxed_opaque_existential_1Tm(v4);
    }
    else
    {
      uint64_t v19 = *(void (**)(id))(v0 + 312);
      uint64_t v98 = 0;
      unint64_t v99 = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v20._object = (void *)0x80000001BA06B3D0;
      v20._uint64_t countAndFlagsBits = 0xD000000000000035;
      String.append(_:)(v20);
      v21._uint64_t countAndFlagsBits = 0xD000000000000038;
      v21._object = (void *)0x80000001BA06B9E0;
      String.append(_:)(v21);
      lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
      uint64_t v22 = (void *)swift_allocError();
      *uint64_t v23 = 0;
      v23[1] = 0xE000000000000000;
      id v24 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

      v19(v24);
    }
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  uint64_t v12 = *(void *)(v0 + 456);
  uint64_t v13 = v12 + 40;
  *(void *)(v0 + 472) = *(void *)(v12 + 80);
  outlined init with take of ReferenceResolutionClientProtocol((long long *)v12, v0 + 56);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v13, v0 + 96, &demangling cache variable for type metadata for Conversational?);
  if (*(void *)(v0 + 120))
  {
    uint64_t v14 = *(void (**)(id))(v0 + 312);
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    uint64_t v15 = (void *)swift_allocError();
    *uint64_t v16 = 0xD000000000000062;
    v16[1] = 0x80000001BA06B910;
    id v17 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

    v14(v17);
    swift_release();
    uint64_t v18 = v0 + 56;
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1Tm(v18);
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for Conversational?);
    goto LABEL_8;
  }
  uint64_t v27 = *(void *)(v0 + 408);
  RemoteConversationService.FlowAndInputRegistry.getRegisteredActingFlow(uuid:)(*(void *)(v0 + 328), v27);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
  uint64_t v97 = v0 + 56;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28) == 1)
  {
    uint64_t v29 = *(void *)(v0 + 400);
    uint64_t v30 = *(void *)(v0 + 328);
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 408), &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?);
    RemoteConversationService.FlowAndInputRegistry.getRegisteredFlow(uuid:)(v30, v29);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v29, 1, v31) == 1)
    {
      uint64_t v32 = *(void (**)(id))(v0 + 312);
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 400), &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?);
      uint64_t v98 = 0;
      unint64_t v99 = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      v33._uint64_t countAndFlagsBits = 0xD000000000000020;
      v33._object = (void *)0x80000001BA06B8C0;
      String.append(_:)(v33);
      v34._object = (void *)0x80000001BA06B3D0;
      v34._uint64_t countAndFlagsBits = 0xD000000000000035;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      v35._object = (void *)0x80000001BA06B8F0;
      String.append(_:)(v35);
      lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
      uint64_t v36 = (void *)swift_allocError();
      *uint64_t v37 = 0;
      v37[1] = 0xE000000000000000;
      id v38 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

      v32(v38);
      swift_release();
      uint64_t v18 = v0 + 56;
      goto LABEL_6;
    }
    uint64_t v58 = *(void *)(v0 + 424);
    uint64_t v59 = *(void *)(v0 + 432);
    uint64_t v61 = *(void *)(v0 + 392);
    uint64_t v60 = *(void *)(v0 + 400);
    uint64_t v63 = *(void *)(v0 + 376);
    uint64_t v62 = *(void *)(v0 + 384);
    uint64_t v64 = *(void *)(v0 + 304);
    uint64_t v65 = *(void *)(v60 + *(int *)(v31 + 48));
    *(void *)(v0 + 504) = v65;
    uint64_t v66 = *(void *)(v60 + *(int *)(v31 + 64));
    *(void *)(v0 + 512) = v66;
    (*(void (**)(uint64_t))(v58 + 32))(v59);
    swift_retain();
    Input.parse.getter();
    uint64_t v67 = Parse.usoTasks.getter();
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
    type metadata accessor for FlowPluginInfo();
    outlined init with copy of ReferenceResolutionClientProtocol(v64 + 80, v0 + 16);
    uint64_t v68 = FlowPluginInfo.__allocating_init(pluginBundle:)((void *)(v0 + 16));
    type metadata accessor for FlowAgent();
    swift_allocObject();
    uint64_t v69 = FlowAgent.init(flow:tasks:pluginInfo:completion:)(v65, v67, v68, 0);
    *(void *)(v0 + 520) = v69;
    uint64_t v89 = v69;
    swift_retain();
    uint64_t v70 = SiriKitRuntimeState.taskService.getter();
    uint64_t v91 = *(void *)(v64 + 56);
    uint64_t v93 = (uint64_t)v70;
    uint64_t v95 = v64;
    uint64_t v71 = one-time initialization token for defaultTimeout;
    uint64_t v90 = *(void *)(v64 + 64);
    swift_bridgeObjectRetain();
    uint64_t v96 = v66;
    swift_retain();
    if (v71 != -1) {
      swift_once();
    }
    uint64_t v72 = *(void *)(v0 + 368);
    uint64_t v87 = v72;
    uint64_t v88 = *(void *)(v0 + 360);
    uint64_t v74 = *(void *)(v0 + 344);
    uint64_t v73 = *(void *)(v0 + 352);
    uint64_t v75 = __swift_project_value_buffer(v74, (uint64_t)static JetsamHelper.defaultTimeout);
    uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
    v76(v72, v75, v74);
    type metadata accessor for ServerFallbackDisablingUtils();
    uint64_t v77 = (void *)swift_allocObject();
    v77[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
    v77[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
    v77[4] = 0;
    type metadata accessor for CorrectionsUndoManager();
    uint64_t v78 = swift_allocObject();
    *(_OWORD *)(v78 + 40) = 0u;
    *(void *)(v78 + 56) = 0;
    *(_OWORD *)(v78 + 24) = 0u;
    *(void *)(v78 + 16) = MEMORY[0x1E4FBC860];
    *(_OWORD *)(v0 + 232) = 0u;
    *(void *)(v0 + 248) = 0;
    *(_OWORD *)(v0 + 216) = 0u;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    outlined assign with take of CorrectingFlow?(v0 + 216, v78 + 24);
    swift_endAccess();
    v76(v88, v72, v74);
    type metadata accessor for Conversation(0);
    uint64_t v79 = swift_allocObject();
    uint64_t v80 = specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(v89, v93, v91, v90, v78, v95, (uint64_t)&protocol witness table for RemoteConversationService, v88, v96, (uint64_t)v77, v79);
    *(void *)(v0 + 528) = v80;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v87, v74);
    swift_release();
    swift_retain();
    Swift::Int v81 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v81;
    *Swift::Int v81 = v0;
    v81[1] = closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:);
    uint64_t v82 = *(void *)(v0 + 432);
    uint64_t v83 = *(void *)(v0 + 336);
    uint64_t v84 = *(void *)(v0 + 312);
    uint64_t v85 = *(void *)(v0 + 320);
    uint64_t v86 = *(void *)(v0 + 304);
    return specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(v97, v80, v82, v83, 0, v84, v85, v86);
  }
  else
  {
    uint64_t v39 = *(void *)(v0 + 440);
    uint64_t v40 = *(void *)(v0 + 424);
    uint64_t v41 = *(void *)(v0 + 408);
    uint64_t v42 = *(void **)(v0 + 304);
    os_log_type_t v43 = (long long *)(v41 + *(int *)(v28 + 48));
    uint64_t v44 = *(void *)(v41 + *(int *)(v28 + 64));
    *(void *)(v0 + 480) = v44;
    (*(void (**)(uint64_t))(v40 + 32))(v39);
    outlined init with take of ReferenceResolutionClientProtocol(v43, v0 + 136);
    uint64_t v45 = *(void *)(v0 + 160);
    uint64_t v46 = *(void *)(v0 + 168);
    os_log_type_t v94 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v45);
    type metadata accessor for EncoreConversation(0);
    uint64_t v47 = v42[8];
    uint64_t v92 = v42[7];
    type metadata accessor for FlowPluginInfo();
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v42 + 10), v0 + 176);
    swift_bridgeObjectRetain();
    uint64_t v48 = (void *)FlowPluginInfo.__allocating_init(pluginBundle:)((void *)(v0 + 176));
    uint64_t v49 = SiriKitRuntimeState.taskService.getter();
    uint64_t v50 = v42[20];
    swift_retain();
    swift_retain();
    default argument 7 of EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(&v98);
    swift_retain();
    Swift::Int v51 = specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)((uint64_t)v94, v92, v47, v48, (uint64_t)v49, (uint64_t)v42, (uint64_t)&protocol witness table for RemoteConversationService, v50, v44, &v98, v45, v46);
    *(void *)(v0 + 488) = v51;

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v52 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v52;
    *uint64_t v52 = v0;
    v52[1] = closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:);
    uint64_t v53 = *(void *)(v0 + 440);
    uint64_t v54 = *(void *)(v0 + 336);
    uint64_t v55 = *(void *)(v0 + 312);
    uint64_t v56 = *(void *)(v0 + 320);
    uint64_t v57 = *(void *)(v0 + 304);
    return specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(v97, (uint64_t)v51, v53, v54, 0, v55, v56, v57);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 464);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[55];
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[53];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 12), &demangling cache variable for type metadata for Conversational?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 464);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[53];
  uint64_t v1 = v0[54];
  uint64_t v3 = v0[52];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 12), &demangling cache variable for type metadata for Conversational?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t RemoteConversationService.FlowAndInputRegistry.getRegisteredActingFlow(uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 24);
  if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
    uint64_t v11 = *(void *)(v10 - 8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v9 + *(void *)(v11 + 72) * v8, a2, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
  return swift_endAccess();
}

uint64_t RemoteConversationService.FlowAndInputRegistry.getRegisteredFlow(uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
    uint64_t v11 = *(void *)(v10 - 8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v9 + *(void *)(v11 + 72) * v8, a2, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
  return swift_endAccess();
}

uint64_t closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[137] = v20;
  v8[136] = a8;
  v8[135] = a7;
  v8[134] = a6;
  v8[133] = a5;
  v8[132] = a4;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  v8[138] = v9;
  v8[139] = *(void *)(v9 - 8);
  v8[140] = swift_task_alloc();
  v8[141] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Parse();
  v8[142] = v10;
  v8[143] = *(void *)(v10 - 8);
  v8[144] = swift_task_alloc();
  v8[145] = swift_task_alloc();
  v8[146] = swift_task_alloc();
  v8[147] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Parse, Error>);
  v8[148] = swift_task_alloc();
  v8[149] = swift_task_alloc();
  v8[150] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NamedParseTransformer?);
  v8[151] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Parse, Parse>?);
  v8[152] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Parse, Parse>);
  v8[153] = v11;
  v8[154] = *(void *)(v11 - 8);
  v8[155] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for FlowTraceEvent();
  v8[156] = v12;
  v8[157] = *(void *)(v12 - 8);
  v8[158] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for UUID();
  v8[159] = v13;
  v8[160] = *(void *)(v13 - 8);
  v8[161] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for FlowSearchResult();
  v8[162] = v14;
  v8[163] = *(void *)(v14 - 8);
  v8[164] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for FlexibleExecutionSupportOptions();
  v8[165] = v15;
  v8[166] = *(void *)(v15 - 8);
  v8[167] = swift_task_alloc();
  v8[168] = swift_task_alloc();
  v8[169] = swift_task_alloc();
  v8[170] = type metadata accessor for RemoteConversationService.State(0);
  v8[171] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for Input();
  v8[172] = v16;
  v8[173] = *(void *)(v16 - 8);
  v8[174] = swift_task_alloc();
  v8[175] = swift_task_alloc();
  v8[176] = swift_task_alloc();
  v8[177] = swift_task_alloc();
  v8[178] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v17 = static ConversationActor.shared;
  v8[179] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.accept(inputData:speechData:reply:), v17, 0);
}

uint64_t closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)()
{
  objc_super v212 = v0;
  uint64_t v1 = v0;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v4 = v0[178];
  uint64_t v5 = v0[177];
  uint64_t v6 = v0[173];
  uint64_t v7 = v0[172];
  uint64_t v8 = v0[171];
  uint64_t v9 = v0[136];
  swift_release();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v10(v4, v5, v7);
  uint64_t v11 = v9 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v11, v8, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = v1[176];
      uint64_t v14 = v1[172];
      uint64_t v15 = (long long *)v1[171];
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      uint64_t v17 = (char *)v15 + *(int *)(v16 + 64);
      uint64_t v18 = (void *)((char *)v15 + *(int *)(v16 + 80));
      v1[180] = *v18;
      v1[181] = v18[1];
      outlined init with take of ReferenceResolutionClientProtocol(v15, (uint64_t)(v1 + 112));
      outlined init with take of ReferenceResolutionClientProtocol((long long *)((char *)v15 + 40), (uint64_t)(v1 + 82));
      v10(v13, (uint64_t)v17, v14);
      uint64_t v19 = v1[85];
      uint64_t v20 = v1[86];
      __swift_project_boxed_opaque_existential_1(v1 + 82, v19);
      uint64_t v203 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 + 72) + **(int **)(v20 + 72));
      Swift::String v21 = (void *)swift_task_alloc();
      v1[182] = v21;
      *Swift::String v21 = v1;
      v21[1] = closure #1 in RemoteConversationService.accept(inputData:speechData:reply:);
      uint64_t v22 = v1[168];
      return v203(v22, v19, v20);
    }
    uint64_t v31 = v1[178];
    uint64_t v32 = v1[173];
    uint64_t v33 = v1[172];
    Swift::String v34 = (void (*)(id))v1[134];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    Swift::String v35 = (void *)swift_allocError();
    *uint64_t v36 = 0xD000000000000035;
    v36[1] = 0x80000001BA06B7C0;
    id v37 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

    v34(v37);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    goto LABEL_2;
  }
  uint64_t v23 = (uint64_t)(v1 + 7);
  id v24 = v1 + 17;
  uint64_t v25 = (long long *)v1[171];
  swift_release();
  outlined init with take of ReferenceResolutionClientProtocol(v25, (uint64_t)(v1 + 7));
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v25 + 40, (uint64_t)(v1 + 12), &demangling cache variable for type metadata for Conversational?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 12), (uint64_t)(v1 + 27), &demangling cache variable for type metadata for Conversational?);
  uint64_t v26 = v1[30];
  if (v26)
  {
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v1 + 27), (uint64_t)(v1 + 22));
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1B9C64000, v28, v29, "accept() sending input to active conversation", v30, 2u);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }

    outlined init with take of ReferenceResolutionClientProtocol((long long *)v1 + 11, (uint64_t)(v1 + 17));
    goto LABEL_50;
  }
  uint64_t v181 = (uint64_t)(v1 + 12);
  uint64_t v185 = (uint64_t)(v1 + 17);
  uint64_t v187 = (uint64_t)(v1 + 7);
  uint64_t v38 = v1[178];
  uint64_t v39 = v1[161];
  uint64_t v40 = v1[160];
  uint64_t v204 = v1[159];
  uint64_t v188 = v1[136];
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 27), &demangling cache variable for type metadata for Conversational?);
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  swift_allocObject();
  uint64_t v41 = SiriEnvironment.init(parent:)();
  type metadata accessor for UserIdentityProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, 255, MEMORY[0x1E4FA1DD0]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for FlowTaskProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, 255, MEMORY[0x1E4FA1890]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for CallStateEnvironmentProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, 255, MEMORY[0x1E4FA1E60]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  uint64_t v42 = (void *)swift_task_alloc();
  uint64_t v210 = v41;
  v42[2] = v41;
  v42[3] = v188;
  v42[4] = v38;
  dispatch thunk of ConversationSELFHelper.withExecutionFlowPluginFindFlowTime<A>(rcId:hypothesisId:_:)();
  swift_release();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v204);
  uint64_t v43 = FlowSearchResult.flow.getter();
  if (v43)
  {
    uint64_t v44 = (uint64_t *)v1[158];
    uint64_t v45 = v1[157];
    uint64_t v46 = v1[156];
    *uint64_t v44 = v43;
    (*(void (**)(uint64_t *, void, uint64_t))(v45 + 104))(v44, *MEMORY[0x1E4FA1858], v46);
    static FlowTrace.trace(event:)();
    (*(void (**)(uint64_t *, uint64_t))(v45 + 8))(v44, v46);
  }
  else
  {
    FlowSearchResult.actingFlow.getter();
    if (v1[40])
    {
      uint64_t v47 = v1[158];
      uint64_t v48 = v1[157];
      uint64_t v49 = v1[156];
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v1 + 37), (uint64_t)(v1 + 32));
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 32), v47);
      (*(void (**)(uint64_t, void, uint64_t))(v48 + 104))(v47, *MEMORY[0x1E4FA1820], v49);
      static FlowTrace.trace(event:)();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v1 + 32));
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 37), &demangling cache variable for type metadata for ActingFlow?);
    }
  }
  uint64_t v50 = v1[151];
  FlowSearchResult.transformer.getter();
  uint64_t v51 = type metadata accessor for NamedParseTransformer();
  uint64_t v52 = *(void *)(v51 - 8);
  int v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51);
  uint64_t v54 = v1[154];
  uint64_t v55 = v1[153];
  uint64_t v56 = v1[152];
  uint64_t v57 = v1[151];
  if (v53 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v1[151], (uint64_t *)&demangling cache variable for type metadata for NamedParseTransformer?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v56, 1, 1, v55);
  }
  else
  {
    NamedParseTransformer.resolve()();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v57, v51);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v56, 1, v55) != 1)
    {
      (*(void (**)(void, void, void))(v1[154] + 32))(v1[155], v1[152], v1[153]);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.executor);
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v73 = 0;
        _os_log_impl(&dword_1B9C64000, v71, v72, "Conversation wants to reform input", v73, 2u);
        MEMORY[0x1BA9E48C0](v73, -1, -1);
      }
      uint64_t v74 = v1[146];

      uint64_t v75 = (void (*)(uint64_t))Transformer.transform.getter();
      Input.parse.getter();
      v75(v74);
      uint64_t v76 = v1[149];
      uint64_t v133 = v1[148];
      uint64_t v134 = v1[146];
      uint64_t v135 = v1[143];
      uint64_t v136 = v1[142];
      swift_release();
      uint64_t v137 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
      v137(v134, v136);
      swift_storeEnumTagMultiPayload();
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v133, v76, &demangling cache variable for type metadata for Result<Parse, Error>);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1[149], v1[150], &demangling cache variable for type metadata for Result<Parse, Error>);
      int v138 = swift_getEnumCaseMultiPayload();
      if (v138 != 1)
      {
        uint64_t v209 = v1[178];
        uint64_t v149 = v1[174];
        uint64_t v150 = v1[173];
        uint64_t v192 = v1[164];
        uint64_t v151 = v1[163];
        uint64_t v184 = v1[172];
        uint64_t v186 = v1[162];
        uint64_t v202 = v1[155];
        uint64_t v152 = v1[154];
        uint64_t v196 = v1[153];
        uint64_t v153 = v1[145];
        uint64_t v154 = v1[144];
        unsigned int v180 = v137;
        uint64_t v155 = v1[143];
        uint64_t v156 = v1[142];
        uint64_t v173 = (void (*)(void))v1[134];
        (*(void (**)(uint64_t, void, uint64_t))(v155 + 32))(v153, v1[150], v156);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 16))(v154, v153, v156);
        Input.init(parse:)();
        id v157 = specialized static FlowExtensionUserInputResultXPC.reformedInput(_:)();
        v173();
        swift_release();

        uint64_t v158 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
        v158(v149, v184);
        v180(v153, v156);
        (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v192, v186);
        outlined destroy of ReferenceResolutionClientProtocol?(v181, &demangling cache variable for type metadata for Conversational?);
        __swift_destroy_boxed_opaque_existential_1Tm(v187);
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v202, v196);
        v158(v209, v184);
LABEL_2:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v2 = (uint64_t (*)(void))v1[1];
        return v2();
      }
      uint64_t v139 = *(void **)v1[150];
      id v140 = v139;
      id v141 = v139;
      uint64_t v142 = Logger.logObject.getter();
      os_log_type_t v143 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v142, v143))
      {
        int64_t v144 = (uint8_t *)swift_slowAlloc();
        uint64_t v145 = swift_slowAlloc();
        v211[0] = v145;
        *(_DWORD *)int64_t v144 = 136315138;
        v1[127] = v139;
        id v146 = v139;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v147 = String.init<A>(describing:)();
        v1[126] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v147, v148, v211);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B9C64000, v142, v143, "Conversation wants to reform input, but got an error in transformation: %s", v144, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v145, -1, -1);
        MEMORY[0x1BA9E48C0](v144, -1, -1);
      }
      else
      {
      }
      uint64_t v106 = v1[173];
      uint64_t v200 = v1[172];
      uint64_t v207 = v1[178];
      uint64_t v159 = v1[164];
      uint64_t v160 = v1[163];
      uint64_t v161 = v1[162];
      uint64_t v162 = v1[154];
      uint64_t v193 = v1[153];
      uint64_t v197 = v1[155];
      uint64_t v163 = (void (*)(void))v1[134];
      unint64_t v164 = v1;
      id v165 = specialized static FlowExtensionUserInputResultXPC.error(_:)();
      v163();

      uint64_t v1 = v164;
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v159, v161);
      outlined destroy of ReferenceResolutionClientProtocol?(v181, &demangling cache variable for type metadata for Conversational?);
      __swift_destroy_boxed_opaque_existential_1Tm(v187);
      (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v197, v193);
LABEL_59:
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v207, v200);
      goto LABEL_2;
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v1[152], &demangling cache variable for type metadata for Transformer<Parse, Parse>?);
  v1[45] = &type metadata for EncoreFeatureFlag;
  v1[46] = lazy protocol witness table accessor for type EncoreFeatureFlag and conformance EncoreFeatureFlag();
  char v58 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v1 + 42));
  if ((v58 & 1) == 0)
  {
LABEL_34:
    FlowSearchResult.actingFlow.getter();
    if (v1[55])
    {
      uint64_t v77 = (uint64_t)(v1 + 47);
      outlined init with take of ReferenceResolutionClientProtocol((long long *)v1 + 26, (uint64_t)(v1 + 47));
      uint64_t v78 = FlowSearchResult.flow.getter();
      swift_release();
      if (!v78)
      {
        uint64_t v201 = (long long *)(v1 + 2);
        uint64_t v183 = v1[163];
        uint64_t v191 = v1[162];
        uint64_t v195 = v1[164];
        uint64_t v115 = (void *)v1[136];
        uint64_t v116 = v1[50];
        uint64_t v117 = v1[51];
        uint64_t v176 = __swift_project_boxed_opaque_existential_1(v1 + 47, v116);
        uint64_t v179 = type metadata accessor for EncoreConversation(0);
        uint64_t v118 = v115[8];
        uint64_t v172 = v115[7];
        type metadata accessor for FlowPluginInfo();
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v115 + 10), (uint64_t)(v1 + 87));
        swift_bridgeObjectRetain();
        uint64_t v119 = (void *)FlowPluginInfo.__allocating_init(pluginBundle:)(v1 + 87);
        uint64_t v120 = SiriKitRuntimeState.taskService.getter();
        objc_super v208 = v1;
        uint64_t v121 = v115[20];
        swift_retain();
        swift_retain();
        default argument 7 of EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(v211);
        swift_retain();
        uint64_t v122 = specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)((uint64_t)v176, v172, v118, v119, (uint64_t)v120, (uint64_t)v115, (uint64_t)&protocol witness table for RemoteConversationService, v121, v210, v211, v116, v117);

        swift_release();
        swift_release();
        uint64_t v1 = v208;
        swift_release();
        swift_release();
        v208[5] = v179;
        v208[6] = &protocol witness table for EncoreConversation;
        swift_release();
        v208[2] = v122;
        (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v195, v191);
        id v24 = (void *)v185;
        outlined init with take of ReferenceResolutionClientProtocol(v201, v185);
        uint64_t v69 = v77;
        goto LABEL_48;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v1 + 47));
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 52), &demangling cache variable for type metadata for ActingFlow?);
    }
    uint64_t v79 = FlowSearchResult.flow.getter();
    if (v79)
    {
      uint64_t v199 = (long long *)(v1 + 67);
      uint64_t v178 = (uint64_t)(v1 + 72);
      uint64_t v80 = v1[145];
      uint64_t v81 = v1[143];
      uint64_t v82 = v1[142];
      uint64_t v83 = v1[136];
      uint64_t v84 = v79;
      swift_retain();
      Input.parse.getter();
      uint64_t v85 = Parse.usoTasks.getter();
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v82);
      type metadata accessor for FlowPluginInfo();
      outlined init with copy of ReferenceResolutionClientProtocol(v83 + 80, (uint64_t)(v1 + 62));
      uint64_t v86 = FlowPluginInfo.__allocating_init(pluginBundle:)(v1 + 62);
      type metadata accessor for FlowAgent();
      swift_allocObject();
      uint64_t v190 = FlowAgent.init(flow:tasks:pluginInfo:completion:)(v84, v85, v86, 0);
      swift_retain();
      uint64_t v87 = SiriKitRuntimeState.taskService.getter();
      uint64_t v88 = *(void *)(v83 + 64);
      uint64_t v167 = *(void *)(v83 + 56);
      uint64_t v168 = (uint64_t)v87;
      uint64_t v89 = one-time initialization token for defaultTimeout;
      swift_retain();
      uint64_t v166 = v88;
      swift_bridgeObjectRetain();
      if (v89 != -1) {
        swift_once();
      }
      uint64_t v169 = v1[163];
      uint64_t v171 = v1[162];
      uint64_t v175 = v1[164];
      uint64_t v90 = v1[141];
      uint64_t v91 = v1[140];
      uint64_t v92 = v1[139];
      uint64_t v206 = v1;
      uint64_t v93 = v1[138];
      uint64_t v94 = __swift_project_value_buffer(v93, (uint64_t)static JetsamHelper.defaultTimeout);
      uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16);
      v95(v90, v94, v93);
      type metadata accessor for ServerFallbackDisablingUtils();
      uint64_t v96 = (void *)swift_allocObject();
      v96[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
      v96[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
      v96[4] = 0;
      type metadata accessor for CorrectionsUndoManager();
      uint64_t v97 = swift_allocObject();
      *(_OWORD *)(v97 + 40) = 0u;
      *(void *)(v97 + 56) = 0;
      *(_OWORD *)(v97 + 24) = 0u;
      *(void *)(v97 + 16) = MEMORY[0x1E4FBC860];
      *(_OWORD *)uint64_t v178 = 0u;
      *(_OWORD *)(v178 + 16) = 0u;
      *(void *)(v178 + 32) = 0;
      swift_beginAccess();
      swift_retain();
      swift_retain();
      outlined assign with take of CorrectingFlow?(v178, v97 + 24);
      swift_endAccess();
      v95(v91, v90, v93);
      uint64_t v98 = type metadata accessor for Conversation(0);
      uint64_t v99 = swift_allocObject();
      uint64_t v100 = specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(v190, v168, v167, v166, v97, v83, (uint64_t)&protocol witness table for RemoteConversationService, v91, v210, (uint64_t)v96, v99);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v101 = v93;
      uint64_t v1 = v206;
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v90, v101);
      swift_release();
      v206[70] = v98;
      v206[71] = &protocol witness table for Conversation;
      swift_release();
      swift_release();
      swift_release();
      v206[67] = v100;
      (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v175, v171);
      id v24 = (void *)v185;
      outlined init with take of ReferenceResolutionClientProtocol(v199, v185);
      goto LABEL_49;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v102 = type metadata accessor for Logger();
    __swift_project_value_buffer(v102, (uint64_t)static Logger.executor);
    uint64_t v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v103, v104))
    {
      uint64_t v105 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v105 = 0;
      _os_log_impl(&dword_1B9C64000, v103, v104, "FlowExtension did not find a flow to handle the input", v105, 2u);
      MEMORY[0x1BA9E48C0](v105, -1, -1);
    }
    uint64_t v106 = v1[173];
    uint64_t v200 = v1[172];
    uint64_t v207 = v1[178];
    uint64_t v107 = v1[164];
    uint64_t v108 = v1[163];
    uint64_t v109 = v1[162];
    id v110 = (void (*)(void))v1[134];

    char v111 = FlowSearchResult.exclude.getter();
    uint64_t v112 = (objc_class *)type metadata accessor for FlowExtensionUserInputResultXPC();
    uint64_t v113 = objc_allocWithZone(v112);
    *(void *)&v113[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = 1;
    *(void *)&v113[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = 0;
    *(_OWORD *)&v113[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData] = xmmword_1BA058F60;
    v113[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = v111 & 1;
    v1[123] = v113;
    v1[124] = v112;
    id v114 = objc_msgSendSuper2((objc_super *)(v1 + 123), sel_init);
    v110();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v107, v109);
    outlined destroy of ReferenceResolutionClientProtocol?(v181, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1Tm(v187);
    goto LABEL_59;
  }
  FlowSearchResult.actingFlow.getter();
  if (!v1[100])
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 97), &demangling cache variable for type metadata for ActingFlow?);
    goto LABEL_34;
  }
  uint64_t v182 = (uint64_t)(v1 + 92);
  v198 = (long long *)(v1 + 102);
  uint64_t v59 = v1 + 107;
  uint64_t v177 = v1[163];
  uint64_t v189 = v1[162];
  uint64_t v194 = v1[164];
  uint64_t v60 = (void *)v1[136];
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v1 + 97), (uint64_t)(v1 + 92));
  uint64_t v61 = v1[95];
  uint64_t v62 = v1[96];
  uint64_t v174 = __swift_project_boxed_opaque_existential_1(v1 + 92, v61);
  uint64_t v205 = v1;
  uint64_t v63 = type metadata accessor for EncoreConversation(0);
  uint64_t v64 = v60[8];
  uint64_t v170 = v60[7];
  type metadata accessor for FlowPluginInfo();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v60 + 10), (uint64_t)v59);
  swift_bridgeObjectRetain();
  uint64_t v65 = (void *)FlowPluginInfo.__allocating_init(pluginBundle:)(v59);
  uint64_t v66 = SiriKitRuntimeState.taskService.getter();
  uint64_t v67 = v60[20];
  swift_retain();
  swift_retain();
  default argument 7 of EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(v211);
  swift_retain();
  uint64_t v68 = specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)((uint64_t)v174, v170, v64, v65, (uint64_t)v66, (uint64_t)v60, (uint64_t)&protocol witness table for RemoteConversationService, v67, v210, v211, v61, v62);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v205[105] = v63;
  uint64_t v1 = v205;
  v205[106] = &protocol witness table for EncoreConversation;
  swift_release();
  v205[102] = v68;
  (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v194, v189);
  id v24 = (void *)v185;
  outlined init with take of ReferenceResolutionClientProtocol(v198, v185);
  uint64_t v69 = v182;
LABEL_48:
  __swift_destroy_boxed_opaque_existential_1Tm(v69);
LABEL_49:
  uint64_t v23 = v187;
  uint64_t v26 = 0;
LABEL_50:
  char v123 = v26 != 0;
  uint64_t v124 = v1[20];
  uint64_t v125 = v1[21];
  id v126 = __swift_project_boxed_opaque_existential_1(v24, v124);
  uint64_t v127 = (void *)swift_task_alloc();
  v1[185] = v127;
  *uint64_t v127 = v1;
  v127[1] = closure #1 in RemoteConversationService.accept(inputData:speechData:reply:);
  uint64_t v128 = v1[178];
  uint64_t v129 = v1[137];
  uint64_t v130 = v1[136];
  uint64_t v131 = v1[135];
  uint64_t v132 = v1[134];
  uint64_t v214 = v124;
  uint64_t v215 = v125;
  return specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(v23, (uint64_t)v126, v128, v129, v123, v132, v131, v130);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 1432);
    swift_bridgeObjectRelease();
    uint64_t v4 = closure #1 in RemoteConversationService.accept(inputData:speechData:reply:);
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 1432);
    uint64_t v4 = closure #1 in RemoteConversationService.accept(inputData:speechData:reply:);
  }
  return MEMORY[0x1F4188298](v4, v5, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(id);
  void *v27;
  void *v28;
  id v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  int v53 = v0;
  uint64_t v1 = (uint64_t)(v0 + 112);
  uint64_t v2 = v0[167];
  uint64_t v3 = v0[166];
  uint64_t v4 = v0[165];
  (*(void (**)(void, void, uint64_t))(v3 + 32))(v0[169], v0[168], v4);
  static FlexibleExecutionSupportOptions.inputContinuation.getter();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions, 255, MEMORY[0x1E4FA1E88]);
  uint64_t v5 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v51 = v0 + 82;
  if (v5)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v6 = v0[176];
    uint64_t v7 = v0[175];
    uint64_t v8 = v0[173];
    uint64_t v9 = v0[172];
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 82), (uint64_t)(v0 + 77));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.debug.getter();
    uint64_t v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = v0[181];
    if (v13)
    {
      uint64_t v45 = v0[180];
      uint64_t v47 = v0[175];
      uint64_t v48 = v0[173];
      uint64_t v46 = v0[172];
      uint64_t v15 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v52 = v49;
      *(_DWORD *)uint64_t v15 = 136315906;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 77), (uint64_t)(v0 + 57));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conversational);
      uint64_t v16 = String.init<A>(describing:)();
      v0[128] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 77));
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[129] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v14, &v52);
      uint64_t v1 = (uint64_t)(v0 + 112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 22) = 2080;
      static FlexibleExecutionSupportOptions.inputContinuation.getter();
      uint64_t v18 = String.init<A>(describing:)();
      v0[130] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 32) = 2080;
      _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[131] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v46);
      _os_log_impl(&dword_1B9C64000, v11, v12, "Conversation %s for rcId: %s supports %s on %s. Running accept()", (uint8_t *)v15, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v49, -1, -1);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
    else
    {
      uint64_t v33 = v0[175];
      Swift::String v34 = v0[173];
      Swift::String v35 = v0[172];
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 77));
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }

    uint64_t v36 = v0[85];
    id v37 = v0[86];
    uint64_t v38 = __swift_project_boxed_opaque_existential_1(v51, v36);
    uint64_t v39 = (void *)swift_task_alloc();
    v0[184] = v39;
    *uint64_t v39 = v0;
    v39[1] = closure #1 in RemoteConversationService.accept(inputData:speechData:reply:);
    uint64_t v40 = v0[176];
    uint64_t v41 = v0[137];
    uint64_t v42 = v0[136];
    uint64_t v43 = v0[135];
    uint64_t v44 = v0[134];
    uint64_t v55 = v36;
    uint64_t v56 = v37;
    return specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(v1, (uint64_t)v38, v40, v41, 1, v44, v43, v42);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v50 = v0[183];
    uint64_t v22 = v0[178];
    uint64_t v23 = v0[176];
    id v24 = v0[173];
    uint64_t v25 = v0[172];
    uint64_t v26 = (void (*)(id))v0[134];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    uint64_t v27 = (void *)swift_allocError();
    *uint64_t v28 = 0xD000000000000024;
    v28[1] = 0x80000001BA06B790;
    os_log_type_t v29 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

    v26(v29);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v30(v23, v25);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 112));
    v30(v22, v25);
    if (!v50) {
      (*(void (**)(void, void))(v0[166] + 8))(v0[169], v0[165]);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 1432);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.accept(inputData:speechData:reply:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(id);
  void *v6;
  void *v7;
  id v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0[183];
  uint64_t v1 = v0[178];
  uint64_t v2 = v0[176];
  uint64_t v3 = v0[173];
  uint64_t v4 = v0[172];
  uint64_t v5 = (void (*)(id))v0[134];
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  uint64_t v6 = (void *)swift_allocError();
  *uint64_t v7 = 0xD000000000000024;
  v7[1] = 0x80000001BA06B790;
  uint64_t v8 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

  v5(v8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(v2, v4);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 112));
  v9(v1, v4);
  if (!v12) {
    (*(void (**)(void, void))(v0[166] + 8))(v0[169], v0[165]);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 82));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 1432);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.accept(inputData:speechData:reply:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[178];
  uint64_t v2 = v0[173];
  uint64_t v3 = v0[172];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 12), &demangling cache variable for type metadata for Conversational?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(id);
  void *v19;
  void *v20;
  id v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t (*v23)(void);
  uint64_t v25;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[183];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[183];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    uint64_t v11 = v8;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[125] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v12;

    _os_log_impl(&dword_1B9C64000, v5, v6, "Error %@ while checking if conversation supports flexible execution. Presuming it doesn't support flexible execution", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = v0[183];
  uint64_t v14 = v0[178];
  uint64_t v15 = v0[176];
  uint64_t v16 = v0[173];
  uint64_t v17 = v0[172];
  uint64_t v18 = (void (*)(id))v0[134];
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  uint64_t v19 = (void *)swift_allocError();
  *uint64_t v20 = 0xD000000000000024;
  v20[1] = 0x80000001BA06B790;
  Swift::String v21 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

  v18(v21);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v22(v15, v17);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 112));
  v22(v14, v17);
  if (!v13) {
    (*(void (**)(void, void))(v0[166] + 8))(v0[169], v0[165]);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 82));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)()
{
  return static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Parse();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol(a1 + 16, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPlugin);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginExtended);
  if (swift_dynamicCast())
  {
    outlined init with take of ReferenceResolutionClientProtocol(v7, (uint64_t)v10);
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    Input.parse.getter();
    dispatch thunk of FlowPluginExtended.findFlowForX(parse:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  }
  else
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for FlowPluginExtended?);
    __swift_project_boxed_opaque_existential_1((void *)(a1 + 16), *(void *)(a1 + 40));
    Input.parse.getter();
    dispatch thunk of FlowPlugin.makeFlowFor(parse:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    static FlowSearchResult.flow(_:)();
    return swift_release();
  }
}

uint64_t RemoteConversationService.makeRequestIdentities(from:)(uint64_t a1, uint64_t a2)
{
  v2[146] = a2;
  v2[145] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v2[147] = swift_task_alloc();
  v2[148] = swift_task_alloc();
  v2[149] = swift_task_alloc();
  v2[150] = swift_task_alloc();
  v2[151] = swift_task_alloc();
  v2[152] = swift_task_alloc();
  v2[153] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for IdentifiedUser();
  v2[154] = v3;
  v2[155] = *(void *)(v3 - 8);
  v2[156] = swift_task_alloc();
  v2[157] = swift_task_alloc();
  v2[158] = swift_task_alloc();
  v2[159] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static ConversationActor.shared;
  v2[160] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](RemoteConversationService.makeRequestIdentities(from:), v4, 0);
}

uint64_t RemoteConversationService.makeRequestIdentities(from:)()
{
  uint64_t v59 = v0;
  if (AFSupportsMultiUser())
  {
    uint64_t v1 = v0[146];
    id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4E4E8]), sel_init);
    v0[161] = v2;
    uint64_t v3 = *(char **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
    v0[162] = v3;
    if (v3)
    {
      uint64_t v4 = OBJC_IVAR___SKEUserSpecificInfo_userId;
      v0[163] = OBJC_IVAR___SKEUserSpecificInfo_userId;
      uint64_t v5 = &v3[v4];
      uint64_t v6 = *(void *)v5;
      uint64_t v7 = *((void *)v5 + 1);
      uint64_t v8 = v3;
      swift_bridgeObjectRetain();
      uint64_t v9 = MEMORY[0x1BA9E2DD0](v6, v7);
      v0[164] = v9;
      swift_bridgeObjectRelease();
      v0[10] = v0;
      v0[15] = v0 + 139;
      v0[11] = RemoteConversationService.makeRequestIdentities(from:);
      v0[106] = swift_continuation_init();
      v0[102] = MEMORY[0x1E4F143A8];
      v0[103] = 0x40000000;
      v0[104] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?;
      v0[105] = &block_descriptor_268;
      objc_msgSend(v2, sel_getSharedUserInfoForSharedUserID_completion_, v9, v0 + 102);
      uint64_t v10 = v0 + 10;
    }
    else
    {
      v0[26] = v0;
      v0[31] = v0 + 137;
      v0[27] = RemoteConversationService.makeRequestIdentities(from:);
      v0[91] = swift_continuation_init();
      v0[87] = MEMORY[0x1E4F143A8];
      v0[88] = 0x40000000;
      v0[89] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
      v0[90] = &block_descriptor_1;
      objc_msgSend(v2, sel_getMultiUserSettingsForRecognizedUserWithCompletion_, v0 + 87);
      uint64_t v10 = v0 + 26;
    }
    return MEMORY[0x1F41881E8](v10);
  }
  else
  {
    uint64_t v11 = v0[152];
    uint64_t v12 = v0[151];
    uint64_t v13 = v0[146];
    uint64_t v14 = *(void **)(v13
                   + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
    id v15 = v14;
    IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v14, 0, 0, 0, v11);
    uint64_t v16 = *(void **)(v13
                   + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
    id v17 = v16;
    IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v16, 0, 0, 0, v12);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v18 = v0[152];
    uint64_t v19 = v0[150];
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol?(v18, v19, &demangling cache variable for type metadata for IdentifiedUser?);
    Swift::String v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = v0[155];
      uint64_t v24 = v0[154];
      uint64_t v25 = v0[150];
      uint64_t v26 = v0[149];
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v58 = v56;
      *(_DWORD *)uint64_t v27 = 136315138;
      outlined init with copy of ReferenceResolutionClientProtocol?(v25, v26, &demangling cache variable for type metadata for IdentifiedUser?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v26, 1, v24) == 1)
      {
        uint64_t v28 = v0[149];
        IdentifiedUser.init()();
        outlined destroy of ReferenceResolutionClientProtocol?(v28, &demangling cache variable for type metadata for IdentifiedUser?);
      }
      else
      {
        (*(void (**)(void, void, void))(v0[155] + 32))(v0[157], v0[149], v0[154]);
      }
      uint64_t v29 = v0[157];
      uint64_t v30 = v0[155];
      uint64_t v31 = v0[154];
      uint64_t v54 = v0[150];
      _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v34 = v33;
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      v0[140] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v54, &demangling cache variable for type metadata for IdentifiedUser?);
      _os_log_impl(&dword_1B9C64000, v21, v22, "#user-session: proposedIdentityOfRecongizedUser=%s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v56, -1, -1);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0[150], &demangling cache variable for type metadata for IdentifiedUser?);
    }
    outlined init with copy of ReferenceResolutionClientProtocol?(v0[151], v0[148], &demangling cache variable for type metadata for IdentifiedUser?);
    Swift::String v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = v0[155];
      uint64_t v38 = v0[154];
      uint64_t v39 = v0[148];
      uint64_t v40 = v0[147];
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v58 = v57;
      *(_DWORD *)uint64_t v41 = 136315138;
      outlined init with copy of ReferenceResolutionClientProtocol?(v39, v40, &demangling cache variable for type metadata for IdentifiedUser?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v40, 1, v38) == 1)
      {
        uint64_t v42 = v0[147];
        IdentifiedUser.init()();
        outlined destroy of ReferenceResolutionClientProtocol?(v42, &demangling cache variable for type metadata for IdentifiedUser?);
      }
      else
      {
        (*(void (**)(void, void, void))(v0[155] + 32))(v0[156], v0[147], v0[154]);
      }
      uint64_t v43 = v0[156];
      uint64_t v44 = v0[155];
      uint64_t v45 = v0[154];
      uint64_t v55 = v0[148];
      _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v48 = v47;
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
      v0[144] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v55, &demangling cache variable for type metadata for IdentifiedUser?);
      _os_log_impl(&dword_1B9C64000, v35, v36, "#user-session: proposedIdentityOfUserMeetingSessionThreshold=%s", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v57, -1, -1);
      MEMORY[0x1BA9E48C0](v41, -1, -1);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0[148], &demangling cache variable for type metadata for IdentifiedUser?);
    }

    uint64_t v49 = v0[151];
    uint64_t v50 = v0[145];
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0[152], v50, &demangling cache variable for type metadata for IdentifiedUser?);
    uint64_t v51 = type metadata accessor for SiriRequestIdentities(0);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v49, v50 + *(int *)(v51 + 20), &demangling cache variable for type metadata for IdentifiedUser?);
    *(void *)(v50 + *(int *)(v51 + 24)) = MEMORY[0x1E4FBC860];
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 0, 1, v51);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v52 = (uint64_t (*)(void))v0[1];
    return v52();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 1280);
  return MEMORY[0x1F4188298](RemoteConversationService.makeRequestIdentities(from:), v1, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = (void *)v0[164];
  id v2 = (void *)v0[161];
  uint64_t v3 = (uint64_t *)(v0[162] + v0[163]);
  v0[165] = v0[139];

  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  swift_bridgeObjectRetain();
  uint64_t v6 = MEMORY[0x1BA9E2DD0](v4, v5);
  v0[166] = v6;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[7] = v0 + 142;
  v0[3] = RemoteConversationService.makeRequestIdentities(from:);
  v0[116] = swift_continuation_init();
  v0[112] = MEMORY[0x1E4F143A8];
  v0[113] = 0x40000000;
  v0[114] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
  v0[115] = &block_descriptor_269;
  objc_msgSend(v2, sel_getMultiUserSettingsForSharedUserID_completion_, v6, v0 + 112);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v1 = *v0;
  id v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 1336) = v2;
  uint64_t v3 = *(void *)(v1 + 1280);
  if (v2) {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  else {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 1328);

  id v2 = *(void *)(v0 + 1136);
  *(void *)(v0 + 1360) = *(void *)(v0 + 1320);
  *(void *)(v0 + 1352) = v2;
  uint64_t v3 = *(char **)(*(void *)(v0 + 1168)
                + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  *(void *)(v0 + 1368) = v3;
  uint64_t v4 = *(void **)(v0 + 1288);
  if (v3)
  {
    uint64_t v5 = OBJC_IVAR___SKEUserSpecificInfo_userId;
    *(void *)(v0 + 1376) = OBJC_IVAR___SKEUserSpecificInfo_userId;
    uint64_t v6 = &v3[v5];
    uint64_t v7 = *(void *)v6;
    uint64_t v8 = *((void *)v6 + 1);
    uint64_t v9 = v3;
    swift_bridgeObjectRetain();
    uint64_t v10 = MEMORY[0x1BA9E2DD0](v7, v8);
    *(void *)(v0 + 1384) = v10;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 272) = v0;
    *(void *)(v0 + 312) = v0 + 1072;
    *(void *)(v0 + 280) = RemoteConversationService.makeRequestIdentities(from:);
    *(void *)(v0 + 1008) = swift_continuation_init();
    *(void *)(v0 + 976) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 984) = 0x40000000;
    *(void *)(v0 + 992) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?;
    *(void *)(v0 + 1000) = &block_descriptor_266;
    objc_msgSend(v4, sel_getSharedUserInfoForSharedUserID_completion_, v10, v0 + 976);
    uint64_t v11 = v0 + 272;
  }
  else
  {
    *(void *)(v0 + 400) = v0;
    *(void *)(v0 + 440) = v0 + 1080;
    *(void *)(v0 + 408) = RemoteConversationService.makeRequestIdentities(from:);
    *(void *)(v0 + 888) = swift_continuation_init();
    *(void *)(v0 + 856) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 864) = 0x40000000;
    *(void *)(v0 + 872) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
    *(void *)(v0 + 880) = &block_descriptor_261;
    objc_msgSend(v4, sel_getMultiUserSettingsForRecognizedUserWithCompletion_, v0 + 856);
    uint64_t v11 = v0 + 400;
  }
  return MEMORY[0x1F41881E8](v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v1 = *v0;
  id v2 = *(void *)(*v0 + 240);
  *(void *)(*v0 + 1344) = v2;
  uint64_t v3 = *(void *)(v1 + 1280);
  if (v2) {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  else {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  char *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  uint64_t v1 = v0[137];
  v0[170] = 0;
  v0[169] = v1;
  id v2 = *(char **)(v0[146]
                + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  v0[171] = v2;
  uint64_t v3 = (void *)v0[161];
  if (v2)
  {
    uint64_t v4 = OBJC_IVAR___SKEUserSpecificInfo_userId;
    v0[172] = OBJC_IVAR___SKEUserSpecificInfo_userId;
    uint64_t v5 = &v2[v4];
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = *((void *)v5 + 1);
    uint64_t v8 = v2;
    swift_bridgeObjectRetain();
    uint64_t v9 = MEMORY[0x1BA9E2DD0](v6, v7);
    v0[173] = v9;
    swift_bridgeObjectRelease();
    v0[34] = v0;
    v0[39] = v0 + 134;
    v0[35] = RemoteConversationService.makeRequestIdentities(from:);
    v0[126] = swift_continuation_init();
    v0[122] = MEMORY[0x1E4F143A8];
    v0[123] = 0x40000000;
    v0[124] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?;
    v0[125] = &block_descriptor_266;
    objc_msgSend(v3, sel_getSharedUserInfoForSharedUserID_completion_, v9, v0 + 122);
    uint64_t v10 = v0 + 34;
  }
  else
  {
    v0[50] = v0;
    v0[55] = v0 + 135;
    v0[51] = RemoteConversationService.makeRequestIdentities(from:);
    v0[111] = swift_continuation_init();
    v0[107] = MEMORY[0x1E4F143A8];
    v0[108] = 0x40000000;
    v0[109] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
    v0[110] = &block_descriptor_261;
    objc_msgSend(v3, sel_getMultiUserSettingsForRecognizedUserWithCompletion_, v0 + 107);
    uint64_t v10 = v0 + 50;
  }
  return MEMORY[0x1F41881E8](v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 1280);
  return MEMORY[0x1F4188298](RemoteConversationService.makeRequestIdentities(from:), v1, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = (void *)v0[173];
  id v2 = (void *)v0[161];
  uint64_t v3 = (uint64_t *)(v0[171] + v0[172]);
  v0[174] = v0[134];

  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  swift_bridgeObjectRetain();
  uint64_t v6 = MEMORY[0x1BA9E2DD0](v4, v5);
  v0[175] = v6;
  swift_bridgeObjectRelease();
  v0[18] = v0;
  v0[23] = v0 + 136;
  v0[19] = RemoteConversationService.makeRequestIdentities(from:);
  v0[121] = swift_continuation_init();
  v0[117] = MEMORY[0x1E4F143A8];
  v0[118] = 0x40000000;
  v0[119] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
  v0[120] = &block_descriptor_267;
  objc_msgSend(v2, sel_getMultiUserSettingsForSharedUserID_completion_, v6, v0 + 117);
  return MEMORY[0x1F41881E8](v0 + 18);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v1 = *v0;
  id v2 = *(void *)(*v0 + 176);
  *(void *)(*v0 + 1408) = v2;
  uint64_t v3 = *(void *)(v1 + 1280);
  if (v2) {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  else {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  uint64_t v1 = *(void **)(v0 + 1400);

  id v2 = *(void *)(v0 + 1088);
  *(void *)(v0 + 1432) = *(void *)(v0 + 1392);
  *(void *)(v0 + 1424) = v2;
  uint64_t v3 = *(void **)(v0 + 1288);
  *(void *)(v0 + 592) = v0;
  *(void *)(v0 + 632) = v0 + 1144;
  *(void *)(v0 + 600) = RemoteConversationService.makeRequestIdentities(from:);
  *(void *)(v0 + 688) = swift_continuation_init();
  *(void *)(v0 + 656) = MEMORY[0x1E4F143A8];
  *(void *)(v0 + 664) = 0x40000000;
  *(void *)(v0 + 672) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [String : SAPerson];
  *(void *)(v0 + 680) = &block_descriptor_262;
  objc_msgSend(v3, sel_homeUserIdToNames_, v0 + 656);
  return MEMORY[0x1F41881E8](v0 + 592);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v1 = *v0;
  id v2 = *(void *)(*v0 + 432);
  *(void *)(*v0 + 1416) = v2;
  uint64_t v3 = *(void *)(v1 + 1280);
  if (v2) {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  else {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  uint64_t v1 = v0[135];
  v0[179] = 0;
  v0[178] = v1;
  id v2 = (void *)v0[161];
  v0[74] = v0;
  v0[79] = v0 + 143;
  v0[75] = RemoteConversationService.makeRequestIdentities(from:);
  v0[86] = swift_continuation_init();
  v0[82] = MEMORY[0x1E4F143A8];
  v0[83] = 0x40000000;
  v0[84] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [String : SAPerson];
  v0[85] = &block_descriptor_262;
  objc_msgSend(v2, sel_homeUserIdToNames_, v0 + 82);
  return MEMORY[0x1F41881E8](v0 + 74);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v1 = *v0;
  id v2 = *(void *)(*v0 + 624);
  *(void *)(*v0 + 1440) = v2;
  uint64_t v3 = *(void *)(v1 + 1280);
  if (v2) {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  else {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  uint64_t v81 = v0;
  uint64_t v1 = *(void *)(v0 + 1144);
  *(void *)(v0 + 1448) = v1;
  id v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 1552) = v2;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << v2;
  uint64_t v5 = *(void *)(v1 + 64);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  *(void *)(v0 + 1456) = MEMORY[0x1E4FBC860];
  uint64_t v6 = v3 & v5;
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = __clz(__rbit64(v6));
    uint64_t v9 = (v6 - 1) & v6;
LABEL_5:
    *(void *)(v0 + 1472) = v9;
    *(void *)(v0 + 1464) = v7;
    uint64_t v10 = *(void **)(v0 + 1288);
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v8);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = *(void **)(*(void *)(v1 + 56) + 8 * v8);
    *(void *)(v0 + 1480) = v14;
    swift_bridgeObjectRetain();
    id v15 = v14;
    uint64_t v16 = MEMORY[0x1BA9E2DD0](v12, v13);
    *(void *)(v0 + 1488) = v16;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 528) = v0;
    *(void *)(v0 + 568) = v0 + 1056;
    *(void *)(v0 + 536) = RemoteConversationService.makeRequestIdentities(from:);
    *(void *)(v0 + 808) = swift_continuation_init();
    *(void *)(v0 + 776) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 784) = 0x40000000;
    *(void *)(v0 + 792) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
    *(void *)(v0 + 800) = &block_descriptor_263;
    objc_msgSend(v10, sel_getSharedUserIdForHomeUserId_completion_, v16, v0 + 776);
    return MEMORY[0x1F41881E8](v0 + 528);
  }
  id v17 = 63 - v4;
  if (v17 > 0x7F)
  {
    uint64_t v18 = *(void *)(v1 + 72);
    if (v18)
    {
      uint64_t v7 = 1;
LABEL_11:
      uint64_t v9 = (v18 - 1) & v18;
      uint64_t v8 = __clz(__rbit64(v18)) + (v7 << 6);
      goto LABEL_5;
    }
    if (v17 >= 0xC0)
    {
      uint64_t v18 = *(void *)(v1 + 80);
      if (v18)
      {
        uint64_t v7 = 2;
        goto LABEL_11;
      }
      if (v17 >= 0x100)
      {
        uint64_t v18 = *(void *)(v1 + 88);
        if (v18)
        {
          uint64_t v7 = 3;
          goto LABEL_11;
        }
        if (v17 >= 0x140)
        {
          uint64_t v18 = *(void *)(v1 + 96);
          if (v18)
          {
            uint64_t v7 = 4;
            goto LABEL_11;
          }
          uint64_t v19 = 0;
          uint64_t v20 = v17 >> 6;
          if (v20 <= 5) {
            uint64_t v20 = 5;
          }
          Swift::String v21 = v20 - 5;
          while (v21 != v19)
          {
            uint64_t v18 = *(void *)(v1 + 104 + 8 * v19++);
            if (v18)
            {
              uint64_t v7 = v19 + 4;
              goto LABEL_11;
            }
          }
        }
      }
    }
  }
  os_log_type_t v22 = *(void **)(v0 + 1288);
  swift_release();

  uint64_t v79 = *(void *)(v0 + 1456);
  uint64_t v23 = *(void **)(v0 + 1432);
  uint64_t v24 = *(void **)(v0 + 1424);
  uint64_t v25 = *(void **)(v0 + 1360);
  uint64_t v26 = *(void **)(v0 + 1352);
  uint64_t v27 = *(void *)(v0 + 1216);
  uint64_t v28 = *(void *)(v0 + 1208);
  uint64_t v29 = *(void *)(v0 + 1168);
  uint64_t v30 = *(void **)(v29 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
  uint64_t v78 = v26;
  uint64_t v31 = v30;
  uint64_t v76 = v25;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v30, v25, v26, 0, v27);
  uint64_t v32 = *(void **)(v29
                 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  uint64_t v77 = v24;
  unint64_t v33 = v32;
  uint64_t v75 = v23;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v32, v23, v24, 0, v28);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  unint64_t v34 = *(void *)(v0 + 1216);
  Swift::String v35 = *(void *)(v0 + 1200);
  os_log_type_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v34, v35, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v37 = Logger.logObject.getter();
  uint64_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = *(void *)(v0 + 1240);
    uint64_t v40 = *(void *)(v0 + 1232);
    uint64_t v41 = *(void *)(v0 + 1200);
    uint64_t v42 = *(void *)(v0 + 1192);
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v80 = v73;
    *(_DWORD *)uint64_t v43 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v41, v42, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v42, 1, v40) == 1)
    {
      uint64_t v44 = *(void *)(v0 + 1192);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v44, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1256), *(void *)(v0 + 1192), *(void *)(v0 + 1232));
    }
    uint64_t v45 = *(void *)(v0 + 1256);
    uint64_t v46 = *(void *)(v0 + 1240);
    unint64_t v47 = *(void *)(v0 + 1232);
    uint64_t v71 = *(void *)(v0 + 1200);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    unint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v50 = v49;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    *(void *)(v0 + 1120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v37, v38, "#user-session: proposedIdentityOfRecongizedUser=%s", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v73, -1, -1);
    MEMORY[0x1BA9E48C0](v43, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1200), &demangling cache variable for type metadata for IdentifiedUser?);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1208), *(void *)(v0 + 1184), &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v51 = Logger.logObject.getter();
  uint64_t v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    int v53 = *(void *)(v0 + 1240);
    uint64_t v54 = *(void *)(v0 + 1232);
    uint64_t v55 = *(void *)(v0 + 1184);
    uint64_t v56 = *(void *)(v0 + 1176);
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    uint64_t v80 = v74;
    *(_DWORD *)uint64_t v57 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v55, v56, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v56, 1, v54) == 1)
    {
      uint64_t v58 = *(void *)(v0 + 1176);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v58, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1248), *(void *)(v0 + 1176), *(void *)(v0 + 1232));
    }
    uint64_t v60 = *(void *)(v0 + 1248);
    uint64_t v61 = *(void *)(v0 + 1240);
    uint64_t v62 = *(void *)(v0 + 1232);
    os_log_type_t v72 = *(void *)(v0 + 1184);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v65 = v64;
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    *(void *)(v0 + 1152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v72, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v51, v52, "#user-session: proposedIdentityOfUserMeetingSessionThreshold=%s", v57, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v74, -1, -1);
    MEMORY[0x1BA9E48C0](v57, -1, -1);
  }
  else
  {
    uint64_t v59 = *(void *)(v0 + 1184);

    outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for IdentifiedUser?);
  }
  uint64_t v66 = *(void *)(v0 + 1208);
  uint64_t v67 = *(void *)(v0 + 1160);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v0 + 1216), v67, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v68 = type metadata accessor for SiriRequestIdentities(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v66, v67 + *(int *)(v68 + 20), &demangling cache variable for type metadata for IdentifiedUser?);
  *(void *)(v67 + *(int *)(v68 + 24)) = v79;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 0, 1, v68);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v69 = *(uint64_t (**)(void))(v0 + 8);
  return v69();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82[2];
  uint64_t v83;
  uint64_t v84;

  uint64_t v83 = v0;
  uint64_t v1 = *(void **)(v0 + 1440);
  swift_willThrow();

  id v2 = MEMORY[0x1E4FBC860];
  uint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(v0 + 1448) = v3;
  uint64_t v4 = *(unsigned char *)(v3 + 32);
  *(unsigned char *)(v0 + 1552) = v4;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << v4;
  uint64_t v7 = *(void *)(v3 + 64);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  *(void *)(v0 + 1456) = v2;
  uint64_t v8 = v5 & v7;
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = __clz(__rbit64(v8));
    uint64_t v11 = (v8 - 1) & v8;
LABEL_5:
    *(void *)(v0 + 1472) = v11;
    *(void *)(v0 + 1464) = v9;
    uint64_t v12 = *(void **)(v0 + 1288);
    uint64_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v14 = *v13;
    id v15 = v13[1];
    uint64_t v16 = *(void **)(*(void *)(v3 + 56) + 8 * v10);
    *(void *)(v0 + 1480) = v16;
    swift_bridgeObjectRetain();
    id v17 = v16;
    uint64_t v18 = MEMORY[0x1BA9E2DD0](v14, v15);
    *(void *)(v0 + 1488) = v18;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 528) = v0;
    *(void *)(v0 + 568) = v0 + 1056;
    *(void *)(v0 + 536) = RemoteConversationService.makeRequestIdentities(from:);
    *(void *)(v0 + 808) = swift_continuation_init();
    *(void *)(v0 + 776) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 784) = 0x40000000;
    *(void *)(v0 + 792) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
    *(void *)(v0 + 800) = &block_descriptor_263;
    objc_msgSend(v12, sel_getSharedUserIdForHomeUserId_completion_, v18, v0 + 776);
    return MEMORY[0x1F41881E8](v0 + 528);
  }
  uint64_t v19 = 63 - v6;
  if (v19 > 0x7F)
  {
    uint64_t v20 = *(void *)(v3 + 72);
    if (v20)
    {
      uint64_t v9 = 1;
LABEL_11:
      uint64_t v11 = (v20 - 1) & v20;
      uint64_t v10 = __clz(__rbit64(v20)) + (v9 << 6);
      goto LABEL_5;
    }
    if (v19 >= 0xC0)
    {
      uint64_t v20 = *(void *)(v3 + 80);
      if (v20)
      {
        uint64_t v9 = 2;
        goto LABEL_11;
      }
      if (v19 >= 0x100)
      {
        uint64_t v20 = *(void *)(v3 + 88);
        if (v20)
        {
          uint64_t v9 = 3;
          goto LABEL_11;
        }
        if (v19 >= 0x140)
        {
          uint64_t v20 = *(void *)(v3 + 96);
          if (v20)
          {
            uint64_t v9 = 4;
            goto LABEL_11;
          }
          Swift::String v21 = 0;
          os_log_type_t v22 = v19 >> 6;
          if (v22 <= 5) {
            os_log_type_t v22 = 5;
          }
          uint64_t v23 = v22 - 5;
          while (v23 != v21)
          {
            uint64_t v20 = *(void *)(v3 + 104 + 8 * v21++);
            if (v20)
            {
              uint64_t v9 = v21 + 4;
              goto LABEL_11;
            }
          }
        }
      }
    }
  }
  uint64_t v24 = *(void **)(v0 + 1288);
  swift_release();

  uint64_t v81 = *(void *)(v0 + 1456);
  uint64_t v25 = *(void **)(v0 + 1432);
  uint64_t v26 = *(void **)(v0 + 1424);
  uint64_t v27 = *(void **)(v0 + 1360);
  uint64_t v28 = *(void **)(v0 + 1352);
  uint64_t v29 = *(void *)(v0 + 1216);
  uint64_t v30 = *(void *)(v0 + 1208);
  uint64_t v31 = *(void *)(v0 + 1168);
  uint64_t v32 = *(void **)(v31 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
  uint64_t v80 = v28;
  unint64_t v33 = v32;
  uint64_t v78 = v27;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v32, v27, v28, 0, v29);
  unint64_t v34 = *(void **)(v31
                 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  uint64_t v79 = v26;
  Swift::String v35 = v34;
  uint64_t v77 = v25;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v34, v25, v26, 0, v30);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  os_log_type_t v36 = *(void *)(v0 + 1216);
  uint64_t v37 = *(void *)(v0 + 1200);
  uint64_t v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v36, v37, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v39 = Logger.logObject.getter();
  uint64_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = *(void *)(v0 + 1240);
    uint64_t v42 = *(void *)(v0 + 1232);
    uint64_t v43 = *(void *)(v0 + 1200);
    uint64_t v44 = *(void *)(v0 + 1192);
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    v82[0] = v75;
    *(_DWORD *)uint64_t v45 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v43, v44, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v44, 1, v42) == 1)
    {
      uint64_t v46 = *(void *)(v0 + 1192);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1256), *(void *)(v0 + 1192), *(void *)(v0 + 1232));
    }
    unint64_t v47 = *(void *)(v0 + 1256);
    unint64_t v48 = *(void *)(v0 + 1240);
    uint64_t v49 = *(void *)(v0 + 1232);
    uint64_t v73 = *(void *)(v0 + 1200);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v52 = v51;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    *(void *)(v0 + 1120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v73, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v39, v40, "#user-session: proposedIdentityOfRecongizedUser=%s", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v75, -1, -1);
    MEMORY[0x1BA9E48C0](v45, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1200), &demangling cache variable for type metadata for IdentifiedUser?);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1208), *(void *)(v0 + 1184), &demangling cache variable for type metadata for IdentifiedUser?);
  int v53 = Logger.logObject.getter();
  uint64_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = *(void *)(v0 + 1240);
    uint64_t v56 = *(void *)(v0 + 1232);
    uint64_t v57 = *(void *)(v0 + 1184);
    uint64_t v58 = *(void *)(v0 + 1176);
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    v82[0] = v76;
    *(_DWORD *)uint64_t v59 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v57, v58, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v58, 1, v56) == 1)
    {
      uint64_t v60 = *(void *)(v0 + 1176);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1248), *(void *)(v0 + 1176), *(void *)(v0 + 1232));
    }
    uint64_t v62 = *(void *)(v0 + 1248);
    uint64_t v63 = *(void *)(v0 + 1240);
    uint64_t v64 = *(void *)(v0 + 1232);
    uint64_t v74 = *(void *)(v0 + 1184);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v67 = v66;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
    *(void *)(v0 + 1152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v67, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v53, v54, "#user-session: proposedIdentityOfUserMeetingSessionThreshold=%s", v59, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v76, -1, -1);
    MEMORY[0x1BA9E48C0](v59, -1, -1);
  }
  else
  {
    uint64_t v61 = *(void *)(v0 + 1184);

    outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for IdentifiedUser?);
  }
  uint64_t v68 = *(void *)(v0 + 1208);
  uint64_t v69 = *(void *)(v0 + 1160);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v0 + 1216), v69, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v70 = type metadata accessor for SiriRequestIdentities(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v68, v69 + *(int *)(v70 + 20), &demangling cache variable for type metadata for IdentifiedUser?);
  *(void *)(v69 + *(int *)(v70 + 24)) = v81;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, 0, 1, v70);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v71 = *(uint64_t (**)(void))(v0 + 8);
  return v71();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v1 = *v0;
  id v2 = *(void *)(*v0 + 560);
  *(void *)(*v0 + 1496) = v2;
  uint64_t v3 = *(void *)(v1 + 1280);
  if (v2) {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  else {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = (void *)v0[186];
  id v2 = (void *)v0[161];
  uint64_t v3 = v0[132];
  v0[188] = v3;
  uint64_t v4 = v0[133];
  v0[189] = v4;

  uint64_t v5 = MEMORY[0x1BA9E2DD0](v3, v4);
  v0[190] = v5;
  v0[58] = v0;
  v0[63] = v0 + 141;
  v0[59] = RemoteConversationService.makeRequestIdentities(from:);
  v0[96] = swift_continuation_init();
  v0[92] = MEMORY[0x1E4F143A8];
  v0[93] = 0x40000000;
  v0[94] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?;
  v0[95] = &block_descriptor_264;
  objc_msgSend(v2, sel_getSharedUserInfoForSharedUserID_completion_, v5, v0 + 92);
  return MEMORY[0x1F41881E8](v0 + 58);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 1280);
  return MEMORY[0x1F4188298](RemoteConversationService.makeRequestIdentities(from:), v1, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  uint64_t v81 = v0;
  uint64_t v1 = *(void **)(v0 + 1520);
  id v2 = *(void *)(v0 + 1128);
  *(void *)(v0 + 1528) = v2;

  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + 1288);
    uint64_t v4 = MEMORY[0x1BA9E2DD0](*(void *)(v0 + 1504), *(void *)(v0 + 1512));
    *(void *)(v0 + 1536) = v4;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 336) = v0;
    *(void *)(v0 + 376) = v0 + 1104;
    *(void *)(v0 + 344) = RemoteConversationService.makeRequestIdentities(from:);
    *(void *)(v0 + 1048) = swift_continuation_init();
    *(void *)(v0 + 1016) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 1024) = 0x40000000;
    *(void *)(v0 + 1032) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
    *(void *)(v0 + 1040) = &block_descriptor_265;
    objc_msgSend(v3, sel_getMultiUserSettingsForSharedUserID_completion_, v4, v0 + 1016);
    uint64_t v5 = v0 + 336;
    goto LABEL_6;
  }

  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v0 + 1472);
  uint64_t v7 = *(void *)(v0 + 1464);
  if (v6)
  {
    uint64_t v8 = (v6 - 1) & v6;
    uint64_t v9 = __clz(__rbit64(v6)) | (v7 << 6);
    uint64_t v5 = *(void *)(v0 + 1448);
LABEL_5:
    *(void *)(v0 + 1472) = v8;
    *(void *)(v0 + 1464) = v7;
    uint64_t v10 = *(void **)(v0 + 1288);
    uint64_t v11 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v9);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = *(void **)(*(void *)(v5 + 56) + 8 * v9);
    *(void *)(v0 + 1480) = v14;
    swift_bridgeObjectRetain();
    id v15 = v14;
    uint64_t v16 = MEMORY[0x1BA9E2DD0](v12, v13);
    *(void *)(v0 + 1488) = v16;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 528) = v0;
    *(void *)(v0 + 568) = v0 + 1056;
    *(void *)(v0 + 536) = RemoteConversationService.makeRequestIdentities(from:);
    *(void *)(v0 + 808) = swift_continuation_init();
    *(void *)(v0 + 776) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 784) = 0x40000000;
    *(void *)(v0 + 792) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
    *(void *)(v0 + 800) = &block_descriptor_263;
    objc_msgSend(v10, sel_getSharedUserIdForHomeUserId_completion_, v16, v0 + 776);
    uint64_t v5 = v0 + 528;
LABEL_6:
    return MEMORY[0x1F41881E8](v5);
  }
  id v17 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_40:
    swift_once();
    goto LABEL_24;
  }
  uint64_t v18 = (unint64_t)((1 << *(unsigned char *)(v0 + 1552)) + 63) >> 6;
  uint64_t v5 = *(void *)(v0 + 1448);
  if (v17 < v18)
  {
    uint64_t v19 = v5 + 64;
    uint64_t v20 = *(void *)(v5 + 64 + 8 * v17);
    ++v7;
    if (v20)
    {
LABEL_12:
      uint64_t v8 = (v20 - 1) & v20;
      uint64_t v9 = __clz(__rbit64(v20)) + (v7 << 6);
      goto LABEL_5;
    }
    uint64_t v7 = v17 + 1;
    if (v17 + 1 < v18)
    {
      uint64_t v20 = *(void *)(v19 + 8 * v7);
      if (v20) {
        goto LABEL_12;
      }
      uint64_t v7 = v17 + 2;
      if (v17 + 2 < v18)
      {
        uint64_t v20 = *(void *)(v19 + 8 * v7);
        if (v20) {
          goto LABEL_12;
        }
        Swift::String v21 = v17 + 3;
        if (v21 < v18)
        {
          uint64_t v20 = *(void *)(v19 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              uint64_t v7 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v7 >= v18) {
                goto LABEL_23;
              }
              uint64_t v20 = *(void *)(v19 + 8 * v7);
              ++v21;
              if (v20) {
                goto LABEL_12;
              }
            }
            __break(1u);
            return MEMORY[0x1F41881E8](v5);
          }
          uint64_t v7 = v21;
          goto LABEL_12;
        }
      }
    }
  }
LABEL_23:
  os_log_type_t v22 = *(void **)(v0 + 1288);
  swift_release();

  uint64_t v79 = *(void *)(v0 + 1456);
  uint64_t v23 = *(void **)(v0 + 1432);
  uint64_t v24 = *(void **)(v0 + 1424);
  uint64_t v25 = *(void **)(v0 + 1360);
  uint64_t v26 = *(void **)(v0 + 1352);
  uint64_t v27 = *(void *)(v0 + 1216);
  uint64_t v28 = *(void *)(v0 + 1208);
  uint64_t v29 = *(void *)(v0 + 1168);
  uint64_t v30 = *(void **)(v29 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
  uint64_t v78 = v26;
  uint64_t v31 = v30;
  uint64_t v76 = v25;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v30, v25, v26, 0, v27);
  uint64_t v32 = *(void **)(v29
                 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  uint64_t v77 = v24;
  unint64_t v33 = v32;
  uint64_t v75 = v23;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v32, v23, v24, 0, v28);
  if (one-time initialization token for executor != -1) {
    goto LABEL_40;
  }
LABEL_24:
  unint64_t v34 = *(void *)(v0 + 1216);
  Swift::String v35 = *(void *)(v0 + 1200);
  os_log_type_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v34, v35, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v37 = Logger.logObject.getter();
  uint64_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = *(void *)(v0 + 1240);
    uint64_t v40 = *(void *)(v0 + 1232);
    uint64_t v41 = *(void *)(v0 + 1200);
    uint64_t v42 = *(void *)(v0 + 1192);
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v80 = v73;
    *(_DWORD *)uint64_t v43 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v41, v42, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v42, 1, v40) == 1)
    {
      uint64_t v44 = *(void *)(v0 + 1192);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v44, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1256), *(void *)(v0 + 1192), *(void *)(v0 + 1232));
    }
    uint64_t v45 = *(void *)(v0 + 1256);
    uint64_t v46 = *(void *)(v0 + 1240);
    unint64_t v47 = *(void *)(v0 + 1232);
    uint64_t v71 = *(void *)(v0 + 1200);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    unint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v50 = v49;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    *(void *)(v0 + 1120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v37, v38, "#user-session: proposedIdentityOfRecongizedUser=%s", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v73, -1, -1);
    MEMORY[0x1BA9E48C0](v43, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1200), &demangling cache variable for type metadata for IdentifiedUser?);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1208), *(void *)(v0 + 1184), &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v51 = Logger.logObject.getter();
  uint64_t v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    int v53 = *(void *)(v0 + 1240);
    uint64_t v54 = *(void *)(v0 + 1232);
    uint64_t v55 = *(void *)(v0 + 1184);
    uint64_t v56 = *(void *)(v0 + 1176);
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    uint64_t v80 = v74;
    *(_DWORD *)uint64_t v57 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v55, v56, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v56, 1, v54) == 1)
    {
      uint64_t v58 = *(void *)(v0 + 1176);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v58, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1248), *(void *)(v0 + 1176), *(void *)(v0 + 1232));
    }
    uint64_t v60 = *(void *)(v0 + 1248);
    uint64_t v61 = *(void *)(v0 + 1240);
    uint64_t v62 = *(void *)(v0 + 1232);
    os_log_type_t v72 = *(void *)(v0 + 1184);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v65 = v64;
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    *(void *)(v0 + 1152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v72, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v51, v52, "#user-session: proposedIdentityOfUserMeetingSessionThreshold=%s", v57, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v74, -1, -1);
    MEMORY[0x1BA9E48C0](v57, -1, -1);
  }
  else
  {
    uint64_t v59 = *(void *)(v0 + 1184);

    outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for IdentifiedUser?);
  }
  uint64_t v66 = *(void *)(v0 + 1208);
  uint64_t v67 = *(void *)(v0 + 1160);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v0 + 1216), v67, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v68 = type metadata accessor for SiriRequestIdentities(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v66, v67 + *(int *)(v68 + 20), &demangling cache variable for type metadata for IdentifiedUser?);
  *(void *)(v67 + *(int *)(v68 + 24)) = v79;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 0, 1, v68);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v69 = *(uint64_t (**)(void))(v0 + 8);
  return v69();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v1 = *v0;
  id v2 = *(void *)(*v0 + 368);
  *(void *)(*v0 + 1544) = v2;
  uint64_t v3 = *(void *)(v1 + 1280);
  if (v2) {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  else {
    uint64_t v4 = RemoteConversationService.makeRequestIdentities(from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(void);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  uint64_t v103 = v0;
  uint64_t v1 = *(void **)(v0 + 1104);

  id v2 = *(void **)(v0 + 1528);
  uint64_t v3 = *(void **)(v0 + 1480);
  uint64_t v4 = *(void *)(v0 + 1240);
  uint64_t v5 = *(void *)(v0 + 1232);
  uint64_t v6 = *(void *)(v0 + 1224);
  uint64_t v7 = v1;
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)(0, v2, v1, v3, v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    uint64_t v10 = *(void **)(v0 + 1528);
    uint64_t v11 = *(void **)(v0 + 1480);
    uint64_t v12 = *(void *)(v0 + 1224);

    outlined destroy of ReferenceResolutionClientProtocol?(v12, &demangling cache variable for type metadata for IdentifiedUser?);
    uint64_t v13 = *(void *)(v0 + 1472);
    uint64_t v14 = *(void *)(v0 + 1464);
    if (v13)
    {
LABEL_3:
      id v15 = (v13 - 1) & v13;
      uint64_t v16 = __clz(__rbit64(v13)) | (v14 << 6);
      id v17 = *(void *)(v0 + 1448);
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v25 = *(void *)(v0 + 1272);
    uint64_t v26 = *(void *)(v0 + 1264);
    uint64_t v27 = *(void *)(v0 + 1240);
    uint64_t v28 = *(void *)(v0 + 1232);
    uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
    v100(v25, *(void *)(v0 + 1224), v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v25, v28);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *(void *)(v0 + 1456);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1, *(void *)(v0 + 1456));
    }
    uint64_t v32 = *(void *)(v30 + 16);
    uint64_t v31 = *(void *)(v30 + 24);
    uint64_t v101 = v7;
    if (v32 >= v31 >> 1) {
      uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v30);
    }
    unint64_t v33 = *(void **)(v0 + 1528);
    unint64_t v34 = *(void **)(v0 + 1480);
    Swift::String v35 = *(void *)(v0 + 1272);
    os_log_type_t v36 = *(void *)(v0 + 1264);
    uint64_t v37 = *(void *)(v0 + 1240);
    uint64_t v38 = *(void *)(v0 + 1232);
    *(void *)(v30 + 16) = v32 + 1;
    v100(v30+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v32, v36, v38);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v38);
    uint64_t v13 = *(void *)(v0 + 1472);
    uint64_t v14 = *(void *)(v0 + 1464);
    *(void *)(v0 + 1456) = v30;
    if (v13) {
      goto LABEL_3;
    }
  }
  uint64_t v39 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_43:
    swift_once();
    goto LABEL_27;
  }
  uint64_t v40 = (unint64_t)((1 << *(unsigned char *)(v0 + 1552)) + 63) >> 6;
  id v17 = *(void *)(v0 + 1448);
  if (v39 < v40)
  {
    uint64_t v41 = v17 + 64;
    uint64_t v42 = *(void *)(v17 + 64 + 8 * v39);
    ++v14;
    if (v42)
    {
LABEL_15:
      id v15 = (v42 - 1) & v42;
      uint64_t v16 = __clz(__rbit64(v42)) + (v14 << 6);
LABEL_4:
      *(void *)(v0 + 1472) = v15;
      *(void *)(v0 + 1464) = v14;
      uint64_t v18 = *(void **)(v0 + 1288);
      uint64_t v19 = (uint64_t *)(*(void *)(v17 + 48) + 16 * v16);
      uint64_t v20 = *v19;
      Swift::String v21 = v19[1];
      os_log_type_t v22 = *(void **)(*(void *)(v17 + 56) + 8 * v16);
      *(void *)(v0 + 1480) = v22;
      swift_bridgeObjectRetain();
      uint64_t v23 = v22;
      uint64_t v24 = MEMORY[0x1BA9E2DD0](v20, v21);
      *(void *)(v0 + 1488) = v24;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 528) = v0;
      *(void *)(v0 + 568) = v0 + 1056;
      *(void *)(v0 + 536) = RemoteConversationService.makeRequestIdentities(from:);
      *(void *)(v0 + 808) = swift_continuation_init();
      *(void *)(v0 + 776) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 784) = 0x40000000;
      *(void *)(v0 + 792) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
      *(void *)(v0 + 800) = &block_descriptor_263;
      objc_msgSend(v18, sel_getSharedUserIdForHomeUserId_completion_, v24, v0 + 776);
      id v17 = v0 + 528;
      return MEMORY[0x1F41881E8](v17);
    }
    uint64_t v14 = v39 + 1;
    if (v39 + 1 < v40)
    {
      uint64_t v42 = *(void *)(v41 + 8 * v14);
      if (v42) {
        goto LABEL_15;
      }
      uint64_t v14 = v39 + 2;
      if (v39 + 2 < v40)
      {
        uint64_t v42 = *(void *)(v41 + 8 * v14);
        if (v42) {
          goto LABEL_15;
        }
        uint64_t v43 = v39 + 3;
        if (v43 < v40)
        {
          uint64_t v42 = *(void *)(v41 + 8 * v43);
          if (!v42)
          {
            while (1)
            {
              uint64_t v14 = v43 + 1;
              if (__OFADD__(v43, 1)) {
                break;
              }
              if (v14 >= v40) {
                goto LABEL_26;
              }
              uint64_t v42 = *(void *)(v41 + 8 * v14);
              ++v43;
              if (v42) {
                goto LABEL_15;
              }
            }
            __break(1u);
            return MEMORY[0x1F41881E8](v17);
          }
          uint64_t v14 = v43;
          goto LABEL_15;
        }
      }
    }
  }
LABEL_26:
  uint64_t v44 = *(void **)(v0 + 1288);
  swift_release();

  uint64_t v101 = *(void **)(v0 + 1456);
  uint64_t v45 = *(void **)(v0 + 1432);
  uint64_t v46 = *(void **)(v0 + 1424);
  unint64_t v47 = *(void **)(v0 + 1360);
  unint64_t v48 = *(void **)(v0 + 1352);
  uint64_t v49 = *(void *)(v0 + 1216);
  uint64_t v50 = *(void *)(v0 + 1208);
  uint64_t v51 = *(void *)(v0 + 1168);
  uint64_t v52 = *(void **)(v51 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
  uint64_t v100 = v48;
  int v53 = v52;
  uint64_t v98 = v47;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v52, v47, v48, 0, v49);
  uint64_t v54 = *(void **)(v51
                 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  uint64_t v99 = v46;
  uint64_t v55 = v54;
  uint64_t v97 = v45;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v54, v45, v46, 0, v50);
  if (one-time initialization token for executor != -1) {
    goto LABEL_43;
  }
LABEL_27:
  uint64_t v56 = *(void *)(v0 + 1216);
  uint64_t v57 = *(void *)(v0 + 1200);
  uint64_t v58 = type metadata accessor for Logger();
  __swift_project_value_buffer(v58, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v56, v57, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v59 = Logger.logObject.getter();
  uint64_t v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = *(void *)(v0 + 1240);
    uint64_t v62 = *(void *)(v0 + 1232);
    uint64_t v63 = *(void *)(v0 + 1200);
    uint64_t v64 = *(void *)(v0 + 1192);
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    uint64_t v102 = v95;
    *(_DWORD *)uint64_t v65 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v63, v64, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v64, 1, v62) == 1)
    {
      uint64_t v66 = *(void *)(v0 + 1192);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v66, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1256), *(void *)(v0 + 1192), *(void *)(v0 + 1232));
    }
    uint64_t v67 = *(void *)(v0 + 1256);
    uint64_t v68 = *(void *)(v0 + 1240);
    uint64_t v69 = *(void *)(v0 + 1232);
    uint64_t v93 = *(void *)(v0 + 1200);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_type_t v72 = v71;
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    *(void *)(v0 + 1120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v93, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v59, v60, "#user-session: proposedIdentityOfRecongizedUser=%s", v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v95, -1, -1);
    MEMORY[0x1BA9E48C0](v65, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1200), &demangling cache variable for type metadata for IdentifiedUser?);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1208), *(void *)(v0 + 1184), &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v73 = Logger.logObject.getter();
  uint64_t v74 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v75 = *(void *)(v0 + 1240);
    uint64_t v76 = *(void *)(v0 + 1232);
    uint64_t v77 = *(void *)(v0 + 1184);
    uint64_t v78 = *(void *)(v0 + 1176);
    uint64_t v79 = (uint8_t *)swift_slowAlloc();
    uint64_t v96 = swift_slowAlloc();
    uint64_t v102 = v96;
    *(_DWORD *)uint64_t v79 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v77, v78, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v78, 1, v76) == 1)
    {
      uint64_t v80 = *(void *)(v0 + 1176);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1248), *(void *)(v0 + 1176), *(void *)(v0 + 1232));
    }
    uint64_t v82 = *(void *)(v0 + 1248);
    uint64_t v83 = *(void *)(v0 + 1240);
    uint64_t v84 = *(void *)(v0 + 1232);
    uint64_t v94 = *(void *)(v0 + 1184);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v87 = v86;
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
    *(void *)(v0 + 1152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v87, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v94, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v73, v74, "#user-session: proposedIdentityOfUserMeetingSessionThreshold=%s", v79, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v96, -1, -1);
    MEMORY[0x1BA9E48C0](v79, -1, -1);
  }
  else
  {
    uint64_t v81 = *(void *)(v0 + 1184);

    outlined destroy of ReferenceResolutionClientProtocol?(v81, &demangling cache variable for type metadata for IdentifiedUser?);
  }
  uint64_t v88 = *(void *)(v0 + 1208);
  uint64_t v89 = *(void *)(v0 + 1160);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v0 + 1216), v89, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v90 = type metadata accessor for SiriRequestIdentities(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v88, v89 + *(int *)(v90 + 20), &demangling cache variable for type metadata for IdentifiedUser?);
  *(void *)(v89 + *(int *)(v90 + 24)) = v101;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 0, 1, v90);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v91 = *(uint64_t (**)(void))(v0 + 8);
  return v91();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  uint64_t v1 = (void *)v0[167];
  id v2 = (void *)v0[166];
  uint64_t v3 = (void *)v0[162];
  swift_willThrow();

  v0[170] = v0[165];
  v0[169] = 0;
  uint64_t v4 = *(char **)(v0[146]
                + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  v0[171] = v4;
  uint64_t v5 = (void *)v0[161];
  if (v4)
  {
    uint64_t v6 = OBJC_IVAR___SKEUserSpecificInfo_userId;
    v0[172] = OBJC_IVAR___SKEUserSpecificInfo_userId;
    uint64_t v7 = &v4[v6];
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *((void *)v7 + 1);
    uint64_t v10 = v4;
    swift_bridgeObjectRetain();
    uint64_t v11 = MEMORY[0x1BA9E2DD0](v8, v9);
    v0[173] = v11;
    swift_bridgeObjectRelease();
    v0[34] = v0;
    v0[39] = v0 + 134;
    v0[35] = RemoteConversationService.makeRequestIdentities(from:);
    v0[126] = swift_continuation_init();
    v0[122] = MEMORY[0x1E4F143A8];
    v0[123] = 0x40000000;
    v0[124] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?;
    v0[125] = &block_descriptor_266;
    objc_msgSend(v5, sel_getSharedUserInfoForSharedUserID_completion_, v11, v0 + 122);
    uint64_t v12 = v0 + 34;
  }
  else
  {
    v0[50] = v0;
    v0[55] = v0 + 135;
    v0[51] = RemoteConversationService.makeRequestIdentities(from:);
    v0[111] = swift_continuation_init();
    v0[107] = MEMORY[0x1E4F143A8];
    v0[108] = 0x40000000;
    v0[109] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
    v0[110] = &block_descriptor_261;
    objc_msgSend(v5, sel_getMultiUserSettingsForRecognizedUserWithCompletion_, v0 + 107);
    uint64_t v12 = v0 + 50;
  }
  return MEMORY[0x1F41881E8](v12);
}

{
  uint64_t v0;
  void *v1;
  char *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = *(void **)(v0 + 1344);
  swift_willThrow();

  *(_OWORD *)(v0 + 1352) = 0u;
  id v2 = *(char **)(*(void *)(v0 + 1168)
                + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  *(void *)(v0 + 1368) = v2;
  uint64_t v3 = *(void **)(v0 + 1288);
  if (v2)
  {
    uint64_t v4 = OBJC_IVAR___SKEUserSpecificInfo_userId;
    *(void *)(v0 + 1376) = OBJC_IVAR___SKEUserSpecificInfo_userId;
    uint64_t v5 = &v2[v4];
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = *((void *)v5 + 1);
    uint64_t v8 = v2;
    swift_bridgeObjectRetain();
    uint64_t v9 = MEMORY[0x1BA9E2DD0](v6, v7);
    *(void *)(v0 + 1384) = v9;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 272) = v0;
    *(void *)(v0 + 312) = v0 + 1072;
    *(void *)(v0 + 280) = RemoteConversationService.makeRequestIdentities(from:);
    *(void *)(v0 + 1008) = swift_continuation_init();
    *(void *)(v0 + 976) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 984) = 0x40000000;
    *(void *)(v0 + 992) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?;
    *(void *)(v0 + 1000) = &block_descriptor_266;
    objc_msgSend(v3, sel_getSharedUserInfoForSharedUserID_completion_, v9, v0 + 976);
    uint64_t v10 = v0 + 272;
  }
  else
  {
    *(void *)(v0 + 400) = v0;
    *(void *)(v0 + 440) = v0 + 1080;
    *(void *)(v0 + 408) = RemoteConversationService.makeRequestIdentities(from:);
    *(void *)(v0 + 888) = swift_continuation_init();
    *(void *)(v0 + 856) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 864) = 0x40000000;
    *(void *)(v0 + 872) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
    *(void *)(v0 + 880) = &block_descriptor_261;
    objc_msgSend(v3, sel_getMultiUserSettingsForRecognizedUserWithCompletion_, v0 + 856);
    uint64_t v10 = v0 + 400;
  }
  return MEMORY[0x1F41881E8](v10);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = (void *)v0[176];
  id v2 = (void *)v0[175];
  uint64_t v3 = (void *)v0[171];
  swift_willThrow();

  v0[179] = v0[174];
  v0[178] = 0;
  uint64_t v4 = (void *)v0[161];
  v0[74] = v0;
  v0[79] = v0 + 143;
  v0[75] = RemoteConversationService.makeRequestIdentities(from:);
  v0[86] = swift_continuation_init();
  v0[82] = MEMORY[0x1E4F143A8];
  v0[83] = 0x40000000;
  v0[84] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [String : SAPerson];
  v0[85] = &block_descriptor_262;
  objc_msgSend(v4, sel_homeUserIdToNames_, v0 + 82);
  return MEMORY[0x1F41881E8](v0 + 74);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 1416);
  swift_willThrow();

  *(_OWORD *)(v0 + 1424) = 0u;
  id v2 = *(void **)(v0 + 1288);
  *(void *)(v0 + 592) = v0;
  *(void *)(v0 + 632) = v0 + 1144;
  *(void *)(v0 + 600) = RemoteConversationService.makeRequestIdentities(from:);
  *(void *)(v0 + 688) = swift_continuation_init();
  *(void *)(v0 + 656) = MEMORY[0x1E4F143A8];
  *(void *)(v0 + 664) = 0x40000000;
  *(void *)(v0 + 672) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [String : SAPerson];
  *(void *)(v0 + 680) = &block_descriptor_262;
  objc_msgSend(v2, sel_homeUserIdToNames_, v0 + 656);
  return MEMORY[0x1F41881E8](v0 + 592);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(void);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79[2];
  uint64_t v80;
  uint64_t v81;

  uint64_t v80 = v0;
  uint64_t v1 = *(void **)(v0 + 1496);
  id v2 = *(void **)(v0 + 1488);
  uint64_t v3 = *(void **)(v0 + 1480);
  swift_willThrow();

  uint64_t v4 = *(void *)(v0 + 1472);
  uint64_t v5 = *(void *)(v0 + 1464);
  if (v4)
  {
    uint64_t v6 = (v4 - 1) & v4;
    uint64_t v7 = __clz(__rbit64(v4)) | (v5 << 6);
    uint64_t v8 = *(void *)(v0 + 1448);
    goto LABEL_3;
  }
  uint64_t v16 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_37:
    swift_once();
    goto LABEL_21;
  }
  id v17 = (unint64_t)((1 << *(unsigned char *)(v0 + 1552)) + 63) >> 6;
  uint64_t v8 = *(void *)(v0 + 1448);
  if (v16 < v17)
  {
    uint64_t v18 = v8 + 64;
    uint64_t v19 = *(void *)(v8 + 64 + 8 * v16);
    ++v5;
    if (v19)
    {
LABEL_9:
      uint64_t v6 = (v19 - 1) & v19;
      uint64_t v7 = __clz(__rbit64(v19)) + (v5 << 6);
LABEL_3:
      *(void *)(v0 + 1472) = v6;
      *(void *)(v0 + 1464) = v5;
      uint64_t v9 = *(void **)(v0 + 1288);
      uint64_t v10 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v7);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = *(void **)(*(void *)(v8 + 56) + 8 * v7);
      *(void *)(v0 + 1480) = v13;
      swift_bridgeObjectRetain();
      uint64_t v14 = v13;
      id v15 = MEMORY[0x1BA9E2DD0](v11, v12);
      *(void *)(v0 + 1488) = v15;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 528) = v0;
      *(void *)(v0 + 568) = v0 + 1056;
      *(void *)(v0 + 536) = RemoteConversationService.makeRequestIdentities(from:);
      *(void *)(v0 + 808) = swift_continuation_init();
      *(void *)(v0 + 776) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 784) = 0x40000000;
      *(void *)(v0 + 792) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
      *(void *)(v0 + 800) = &block_descriptor_263;
      objc_msgSend(v9, sel_getSharedUserIdForHomeUserId_completion_, v15, v0 + 776);
      uint64_t v8 = v0 + 528;
      return MEMORY[0x1F41881E8](v8);
    }
    uint64_t v5 = v16 + 1;
    if (v16 + 1 < v17)
    {
      uint64_t v19 = *(void *)(v18 + 8 * v5);
      if (v19) {
        goto LABEL_9;
      }
      uint64_t v5 = v16 + 2;
      if (v16 + 2 < v17)
      {
        uint64_t v19 = *(void *)(v18 + 8 * v5);
        if (v19) {
          goto LABEL_9;
        }
        uint64_t v20 = v16 + 3;
        if (v20 < v17)
        {
          uint64_t v19 = *(void *)(v18 + 8 * v20);
          if (!v19)
          {
            while (1)
            {
              uint64_t v5 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              if (v5 >= v17) {
                goto LABEL_20;
              }
              uint64_t v19 = *(void *)(v18 + 8 * v5);
              ++v20;
              if (v19) {
                goto LABEL_9;
              }
            }
            __break(1u);
            return MEMORY[0x1F41881E8](v8);
          }
          uint64_t v5 = v20;
          goto LABEL_9;
        }
      }
    }
  }
LABEL_20:
  Swift::String v21 = *(void **)(v0 + 1288);
  swift_release();

  uint64_t v78 = *(void *)(v0 + 1456);
  os_log_type_t v22 = *(void **)(v0 + 1432);
  uint64_t v23 = *(void **)(v0 + 1424);
  uint64_t v24 = *(void **)(v0 + 1360);
  uint64_t v25 = *(void **)(v0 + 1352);
  uint64_t v26 = *(void *)(v0 + 1216);
  uint64_t v27 = *(void *)(v0 + 1208);
  uint64_t v28 = *(void *)(v0 + 1168);
  uint64_t v29 = *(void **)(v28 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
  uint64_t v77 = v25;
  uint64_t v30 = v29;
  uint64_t v75 = v24;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v29, v24, v25, 0, v26);
  uint64_t v31 = *(void **)(v28
                 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  uint64_t v76 = v23;
  uint64_t v32 = v31;
  uint64_t v74 = v22;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v31, v22, v23, 0, v27);
  if (one-time initialization token for executor != -1) {
    goto LABEL_37;
  }
LABEL_21:
  unint64_t v33 = *(void *)(v0 + 1216);
  unint64_t v34 = *(void *)(v0 + 1200);
  Swift::String v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v33, v34, &demangling cache variable for type metadata for IdentifiedUser?);
  os_log_type_t v36 = Logger.logObject.getter();
  uint64_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = *(void *)(v0 + 1240);
    uint64_t v39 = *(void *)(v0 + 1232);
    uint64_t v40 = *(void *)(v0 + 1200);
    uint64_t v41 = *(void *)(v0 + 1192);
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v72 = swift_slowAlloc();
    v79[0] = v72;
    *(_DWORD *)uint64_t v42 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v40, v41, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v41, 1, v39) == 1)
    {
      uint64_t v43 = *(void *)(v0 + 1192);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1256), *(void *)(v0 + 1192), *(void *)(v0 + 1232));
    }
    uint64_t v44 = *(void *)(v0 + 1256);
    uint64_t v45 = *(void *)(v0 + 1240);
    uint64_t v46 = *(void *)(v0 + 1232);
    uint64_t v70 = *(void *)(v0 + 1200);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    unint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v49 = v48;
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    *(void *)(v0 + 1120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v70, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v36, v37, "#user-session: proposedIdentityOfRecongizedUser=%s", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v72, -1, -1);
    MEMORY[0x1BA9E48C0](v42, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1200), &demangling cache variable for type metadata for IdentifiedUser?);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1208), *(void *)(v0 + 1184), &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v50 = Logger.logObject.getter();
  uint64_t v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = *(void *)(v0 + 1240);
    int v53 = *(void *)(v0 + 1232);
    uint64_t v54 = *(void *)(v0 + 1184);
    uint64_t v55 = *(void *)(v0 + 1176);
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    v79[0] = v73;
    *(_DWORD *)uint64_t v56 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v54, v55, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v55, 1, v53) == 1)
    {
      uint64_t v57 = *(void *)(v0 + 1176);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1248), *(void *)(v0 + 1176), *(void *)(v0 + 1232));
    }
    uint64_t v59 = *(void *)(v0 + 1248);
    uint64_t v60 = *(void *)(v0 + 1240);
    uint64_t v61 = *(void *)(v0 + 1232);
    uint64_t v71 = *(void *)(v0 + 1184);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = v63;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
    *(void *)(v0 + 1152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v64, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v50, v51, "#user-session: proposedIdentityOfUserMeetingSessionThreshold=%s", v56, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v73, -1, -1);
    MEMORY[0x1BA9E48C0](v56, -1, -1);
  }
  else
  {
    uint64_t v58 = *(void *)(v0 + 1184);

    outlined destroy of ReferenceResolutionClientProtocol?(v58, &demangling cache variable for type metadata for IdentifiedUser?);
  }
  uint64_t v65 = *(void *)(v0 + 1208);
  uint64_t v66 = *(void *)(v0 + 1160);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v0 + 1216), v66, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v67 = type metadata accessor for SiriRequestIdentities(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v65, v66 + *(int *)(v67 + 20), &demangling cache variable for type metadata for IdentifiedUser?);
  *(void *)(v66 + *(int *)(v67 + 24)) = v78;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v66, 0, 1, v67);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v68 = *(uint64_t (**)(void))(v0 + 8);
  return v68();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(void);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  id v99;
  void (*v100)(unint64_t, uint64_t, uint64_t);
  uint64_t v101[2];
  uint64_t v102;
  uint64_t v103;

  uint64_t v102 = v0;
  uint64_t v1 = *(void **)(v0 + 1544);
  id v2 = *(void **)(v0 + 1536);
  swift_willThrow();

  uint64_t v3 = *(void **)(v0 + 1528);
  uint64_t v4 = *(void **)(v0 + 1480);
  uint64_t v5 = *(void *)(v0 + 1240);
  uint64_t v6 = *(void *)(v0 + 1232);
  uint64_t v7 = *(void *)(v0 + 1224);
  uint64_t v8 = v4;
  uint64_t v9 = v3;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)(0, v3, 0, v4, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v6) == 1)
  {
    uint64_t v10 = *(void **)(v0 + 1528);
    uint64_t v11 = *(void *)(v0 + 1224);

    outlined destroy of ReferenceResolutionClientProtocol?(v11, &demangling cache variable for type metadata for IdentifiedUser?);
    uint64_t v12 = *(void *)(v0 + 1472);
    uint64_t v13 = *(void *)(v0 + 1464);
    if (v12)
    {
LABEL_3:
      uint64_t v14 = (v12 - 1) & v12;
      id v15 = __clz(__rbit64(v12)) | (v13 << 6);
      uint64_t v16 = *(void *)(v0 + 1448);
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 1272);
    uint64_t v25 = *(void *)(v0 + 1264);
    uint64_t v26 = *(void *)(v0 + 1240);
    uint64_t v27 = *(void *)(v0 + 1232);
    uint64_t v100 = *(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32);
    v100(v24, *(void *)(v0 + 1224), v27);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 16))(v25, v24, v27);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *(void *)(v0 + 1456);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, *(void *)(v0 + 1456));
    }
    uint64_t v31 = *(void *)(v29 + 16);
    uint64_t v30 = *(void *)(v29 + 24);
    if (v31 >= v30 >> 1) {
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, v29);
    }
    uint64_t v32 = *(void **)(v0 + 1528);
    unint64_t v33 = *(void **)(v0 + 1480);
    unint64_t v34 = *(void *)(v0 + 1272);
    Swift::String v35 = *(void *)(v0 + 1264);
    os_log_type_t v36 = *(void *)(v0 + 1240);
    uint64_t v37 = *(void *)(v0 + 1232);
    *(void *)(v29 + 16) = v31 + 1;
    v100(v29+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v31, v35, v37);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v37);
    uint64_t v12 = *(void *)(v0 + 1472);
    uint64_t v13 = *(void *)(v0 + 1464);
    *(void *)(v0 + 1456) = v29;
    if (v12) {
      goto LABEL_3;
    }
  }
  uint64_t v38 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_43:
    swift_once();
    goto LABEL_27;
  }
  uint64_t v39 = (unint64_t)((1 << *(unsigned char *)(v0 + 1552)) + 63) >> 6;
  uint64_t v16 = *(void *)(v0 + 1448);
  if (v38 < v39)
  {
    uint64_t v40 = v16 + 64;
    uint64_t v41 = *(void *)(v16 + 64 + 8 * v38);
    ++v13;
    if (v41)
    {
LABEL_15:
      uint64_t v14 = (v41 - 1) & v41;
      id v15 = __clz(__rbit64(v41)) + (v13 << 6);
LABEL_4:
      *(void *)(v0 + 1472) = v14;
      *(void *)(v0 + 1464) = v13;
      id v17 = *(void **)(v0 + 1288);
      uint64_t v18 = (uint64_t *)(*(void *)(v16 + 48) + 16 * v15);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      Swift::String v21 = *(void **)(*(void *)(v16 + 56) + 8 * v15);
      *(void *)(v0 + 1480) = v21;
      swift_bridgeObjectRetain();
      os_log_type_t v22 = v21;
      uint64_t v23 = MEMORY[0x1BA9E2DD0](v19, v20);
      *(void *)(v0 + 1488) = v23;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 528) = v0;
      *(void *)(v0 + 568) = v0 + 1056;
      *(void *)(v0 + 536) = RemoteConversationService.makeRequestIdentities(from:);
      *(void *)(v0 + 808) = swift_continuation_init();
      *(void *)(v0 + 776) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 784) = 0x40000000;
      *(void *)(v0 + 792) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
      *(void *)(v0 + 800) = &block_descriptor_263;
      objc_msgSend(v17, sel_getSharedUserIdForHomeUserId_completion_, v23, v0 + 776);
      uint64_t v16 = v0 + 528;
      return MEMORY[0x1F41881E8](v16);
    }
    uint64_t v13 = v38 + 1;
    if (v38 + 1 < v39)
    {
      uint64_t v41 = *(void *)(v40 + 8 * v13);
      if (v41) {
        goto LABEL_15;
      }
      uint64_t v13 = v38 + 2;
      if (v38 + 2 < v39)
      {
        uint64_t v41 = *(void *)(v40 + 8 * v13);
        if (v41) {
          goto LABEL_15;
        }
        uint64_t v42 = v38 + 3;
        if (v42 < v39)
        {
          uint64_t v41 = *(void *)(v40 + 8 * v42);
          if (!v41)
          {
            while (1)
            {
              uint64_t v13 = v42 + 1;
              if (__OFADD__(v42, 1)) {
                break;
              }
              if (v13 >= v39) {
                goto LABEL_26;
              }
              uint64_t v41 = *(void *)(v40 + 8 * v13);
              ++v42;
              if (v41) {
                goto LABEL_15;
              }
            }
            __break(1u);
            return MEMORY[0x1F41881E8](v16);
          }
          uint64_t v13 = v42;
          goto LABEL_15;
        }
      }
    }
  }
LABEL_26:
  uint64_t v43 = *(void **)(v0 + 1288);
  swift_release();

  uint64_t v100 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1456);
  uint64_t v44 = *(void **)(v0 + 1432);
  uint64_t v45 = *(void **)(v0 + 1424);
  uint64_t v46 = *(void **)(v0 + 1360);
  unint64_t v47 = *(void **)(v0 + 1352);
  unint64_t v48 = *(void *)(v0 + 1216);
  uint64_t v49 = *(void *)(v0 + 1208);
  uint64_t v50 = *(void *)(v0 + 1168);
  uint64_t v51 = *(void **)(v50 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
  uint64_t v99 = v47;
  uint64_t v52 = v51;
  uint64_t v97 = v46;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v51, v46, v47, 0, v48);
  int v53 = *(void **)(v50
                 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  uint64_t v98 = v45;
  uint64_t v54 = v53;
  uint64_t v96 = v44;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v53, v44, v45, 0, v49);
  if (one-time initialization token for executor != -1) {
    goto LABEL_43;
  }
LABEL_27:
  uint64_t v55 = *(void *)(v0 + 1216);
  uint64_t v56 = *(void *)(v0 + 1200);
  uint64_t v57 = type metadata accessor for Logger();
  __swift_project_value_buffer(v57, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v55, v56, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v58 = Logger.logObject.getter();
  uint64_t v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = *(void *)(v0 + 1240);
    uint64_t v61 = *(void *)(v0 + 1232);
    uint64_t v62 = *(void *)(v0 + 1200);
    uint64_t v63 = *(void *)(v0 + 1192);
    uint64_t v64 = (uint8_t *)swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    v101[0] = v94;
    *(_DWORD *)uint64_t v64 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v62, v63, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v63, 1, v61) == 1)
    {
      uint64_t v65 = *(void *)(v0 + 1192);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v65, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1256), *(void *)(v0 + 1192), *(void *)(v0 + 1232));
    }
    uint64_t v66 = *(void *)(v0 + 1256);
    uint64_t v67 = *(void *)(v0 + 1240);
    uint64_t v68 = *(void *)(v0 + 1232);
    uint64_t v92 = *(void *)(v0 + 1200);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v71 = v70;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    *(void *)(v0 + 1120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v71, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v92, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v58, v59, "#user-session: proposedIdentityOfRecongizedUser=%s", v64, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v94, -1, -1);
    MEMORY[0x1BA9E48C0](v64, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1200), &demangling cache variable for type metadata for IdentifiedUser?);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 1208), *(void *)(v0 + 1184), &demangling cache variable for type metadata for IdentifiedUser?);
  os_log_type_t v72 = Logger.logObject.getter();
  uint64_t v73 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = *(void *)(v0 + 1240);
    uint64_t v75 = *(void *)(v0 + 1232);
    uint64_t v76 = *(void *)(v0 + 1184);
    uint64_t v77 = *(void *)(v0 + 1176);
    uint64_t v78 = (uint8_t *)swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    v101[0] = v95;
    *(_DWORD *)uint64_t v78 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v76, v77, &demangling cache variable for type metadata for IdentifiedUser?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v77, 1, v75) == 1)
    {
      uint64_t v79 = *(void *)(v0 + 1176);
      IdentifiedUser.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for IdentifiedUser?);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1240) + 32))(*(void *)(v0 + 1248), *(void *)(v0 + 1176), *(void *)(v0 + 1232));
    }
    uint64_t v81 = *(void *)(v0 + 1248);
    uint64_t v82 = *(void *)(v0 + 1240);
    uint64_t v83 = *(void *)(v0 + 1232);
    uint64_t v93 = *(void *)(v0 + 1184);
    _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type IdentifiedUser and conformance IdentifiedUser, 255, MEMORY[0x1E4FA1BD8]);
    uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v86 = v85;
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
    *(void *)(v0 + 1152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v86, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v93, &demangling cache variable for type metadata for IdentifiedUser?);
    _os_log_impl(&dword_1B9C64000, v72, v73, "#user-session: proposedIdentityOfUserMeetingSessionThreshold=%s", v78, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v95, -1, -1);
    MEMORY[0x1BA9E48C0](v78, -1, -1);
  }
  else
  {
    uint64_t v80 = *(void *)(v0 + 1184);

    outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for IdentifiedUser?);
  }
  uint64_t v87 = *(void *)(v0 + 1208);
  uint64_t v88 = *(void *)(v0 + 1160);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v0 + 1216), v88, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v89 = type metadata accessor for SiriRequestIdentities(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v87, v88 + *(int *)(v89 + 20), &demangling cache variable for type metadata for IdentifiedUser?);
  *(void *)(v88 + *(int *)(v89 + 24)) = v100;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v88, 0, 1, v89);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v90 = *(uint64_t (**)(void))(v0 + 8);
  return v90();
}

uint64_t closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v4 + 80) = a4;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 40) = type metadata accessor for UserInputResult();
  *(void *)(v4 + 48) = swift_task_alloc();
  *(void *)(v4 + 56) = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:), 0, 0);
}

uint64_t closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[4];
  return v8(v5, v6, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  }
  else {
    uint64_t v2 = closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  char v1;
  BOOL v2;
  uint64_t (*v3)(BOOL);
  uint64_t v5;

  outlined init with copy of RemoteConversationService.State(*(void *)(v0 + 56), *(void *)(v0 + 48), (uint64_t (*)(void))type metadata accessor for UserInputResult);
  uint64_t v2 = 0;
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    uint64_t v1 = *(unsigned char *)(v0 + 80);
    outlined destroy of RemoteConversationService.State(*(void *)(v0 + 48), (uint64_t (*)(void))type metadata accessor for UserInputResult);
    if (v1) {
      uint64_t v2 = 1;
    }
  }
  outlined init with take of UserInputResult(*(void *)(v0 + 56), *(void *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t closure #1 in RemoteConversationService.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  v6[14] = type metadata accessor for RemoteConversationService.State(0);
  v6[15] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v6[16] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.prepare(bridge:reply:), v7, 0);
}

uint64_t closure #1 in RemoteConversationService.prepare(bridge:reply:)()
{
  uint64_t v27 = v0;
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 88) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *(void *)(v0 + 120);
      *(_DWORD *)(v0 + 152) = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                                        + 64);
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v4 + 40), v0 + 16);
      uint64_t v5 = *(void *)(v0 + 40);
      uint64_t v6 = *(void *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v5);
      uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 40) + **(int **)(v6 + 40));
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 136) = v7;
      *uint64_t v7 = v0;
      v7[1] = closure #1 in RemoteConversationService.prepare(bridge:reply:);
      return v24(v5, v6);
    }
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    uint64_t v13 = 0xD00000000000003FLL;
    unint64_t v14 = 0x80000001BA06B730;
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 120);
    swift_release();
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v10._uint64_t countAndFlagsBits = 0x74784520776F6C46;
    v10._object = (void *)0xEF206E6F69736E65;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001BA069380;
    v11._uint64_t countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0xD000000000000023;
    v12._object = (void *)0x80000001BA06B700;
    String.append(_:)(v12);
    uint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
    outlined destroy of ReferenceResolutionClientProtocol?(v9 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v25 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v16, v17, "%s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v20 = *(void (**)(void))(v0 + 96);
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  Swift::String v21 = (void *)swift_allocError();
  *os_log_type_t v22 = v13;
  v22[1] = v14;
  v20();

  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v4 = closure #1 in RemoteConversationService.prepare(bridge:reply:);
  }
  else {
    uint64_t v4 = closure #1 in RemoteConversationService.prepare(bridge:reply:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = v1 + *(int *)(v0 + 152);
  (*(void (**)(void))(v0 + 96))(0);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v3 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(void *);
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void (**)(void *))(v0 + 96);
  uint64_t v4 = v2 + *(int *)(v0 + 152);
  uint64_t v5 = v1;
  v3(v1);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v6 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t closure #1 in RemoteConversationService.paraphrase(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v6[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[24] = swift_task_alloc();
  v6[25] = type metadata accessor for RemoteConversationService.State(0);
  v6[26] = swift_task_alloc();
  v6[27] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.paraphrase(reply:), v7, 0);
}

uint64_t closure #1 in RemoteConversationService.paraphrase(reply:)()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 160) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 192);
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v6 = *(void *)(v0 + 176);
    uint64_t v36 = v3
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                 + 64);
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v3 + 40), v0 + 16);
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 56);
    uint64_t v8 = static ConversationActor.shared;
    uint64_t v10 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v9, (void (*)(uint64_t))type metadata accessor for ConversationActor);
    Swift::String v11 = (void *)swift_allocObject();
    v11[2] = v8;
    v11[3] = v10;
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), (uint64_t)(v11 + 4));
    v11[9] = v5;
    v11[10] = v6;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:), (uint64_t)v11);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    uint64_t v12 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v36, v12);
    __swift_destroy_boxed_opaque_existential_1Tm(v3);
  }
  else
  {
    uint64_t v13 = (objc_super *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 208);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    *(void *)(v0 + 120) = 0;
    *(void *)(v0 + 128) = 0xE000000000000000;
    v15._uint64_t countAndFlagsBits = 0x74784520776F6C46;
    v15._object = (void *)0xEF206E6F69736E65;
    String.append(_:)(v15);
    v16._object = (void *)0x80000001BA069160;
    v16._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 0xD000000000000016;
    v17._object = (void *)0x80000001BA06B770;
    String.append(_:)(v17);
    outlined init with copy of RemoteConversationService.State(v2, v14, type metadata accessor for RemoteConversationService.State);
    _print_unlocked<A, B>(_:_:)();
    outlined destroy of RemoteConversationService.State(v14, type metadata accessor for RemoteConversationService.State);
    uint64_t v18 = *(void *)(v0 + 120);
    unint64_t v19 = *(void *)(v0 + 128);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v37 = v18;
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    Swift::String v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v38[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v19, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v21, v22, "%s", v23, 0xCu);
      swift_arrayDestroy();
      uint64_t v25 = v24;
      uint64_t v13 = (objc_super *)(v0 + 136);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v26 = *(void *)(v0 + 216);
    uint64_t v27 = *(void *)(v0 + 184);
    uint64_t v28 = *(void (**)(objc_super *))(v0 + 168);
    uint64_t v29 = type metadata accessor for ActionParaphrase();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v27, 1, 1, v29);
    uint64_t v30 = (objc_class *)type metadata accessor for ConversationParaphraseResultXPC(0);
    uint64_t v31 = (char *)objc_allocWithZone(v30);
    outlined init with copy of ReferenceResolutionClientProtocol?(v27, (uint64_t)&v31[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase], &demangling cache variable for type metadata for ActionParaphrase?);
    uint64_t v32 = (uint64_t *)&v31[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
    *uint64_t v32 = v37;
    v32[1] = v19;
    *(void *)(v0 + 136) = v31;
    *(void *)(v0 + 144) = v30;
    swift_bridgeObjectRetain();
    unint64_t v33 = [(objc_super *)v13 init];
    outlined destroy of ReferenceResolutionClientProtocol?(v27, &demangling cache variable for type metadata for ActionParaphrase?);
    swift_bridgeObjectRelease();
    v28(v33);

    outlined destroy of RemoteConversationService.State(v26, type metadata accessor for RemoteConversationService.State);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v6[11] = swift_task_alloc();
  type metadata accessor for ConversationParaphraseResult(0);
  v6[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v6[13] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:), v7, 0);
}

uint64_t closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:)()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[14] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:);
  uint64_t v5 = v0[12];
  return v7(v5, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:);
  }
  else {
    uint64_t v4 = closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(void);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[12];
  uint64_t v2 = (void (*)(void))v0[9];
  uint64_t v3 = ConversationParaphraseResult.xpcRepresentation.getter();
  v2();

  outlined destroy of RemoteConversationService.State(v1, type metadata accessor for ConversationParaphraseResult);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(id);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  uint64_t *v10;
  id v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void (**)(id))(v0 + 72);
  swift_getErrorValue();
  uint64_t v4 = Error.localizedDescription.getter();
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for ActionParaphrase();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  uint64_t v8 = (objc_class *)type metadata accessor for ConversationParaphraseResultXPC(0);
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2, (uint64_t)&v9[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase], &demangling cache variable for type metadata for ActionParaphrase?);
  uint64_t v10 = (uint64_t *)&v9[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
  *uint64_t v10 = v4;
  v10[1] = v6;
  *(void *)(v0 + 40) = v9;
  *(void *)(v0 + 48) = v8;
  swift_bridgeObjectRetain();
  Swift::String v11 = objc_msgSendSuper2((objc_super *)(v0 + 40), sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for ActionParaphrase?);
  swift_bridgeObjectRelease();
  v3(v11);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t closure #1 in RemoteConversationService.commit(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  type metadata accessor for ConversationCommitResult();
  v6[14] = swift_task_alloc();
  v6[15] = type metadata accessor for RemoteConversationService.State(0);
  v6[16] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v6[17] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.commit(bridge:reply:), v7, 0);
}

uint64_t closure #1 in RemoteConversationService.commit(bridge:reply:)()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 88) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *(void *)(v0 + 128);
      *(_DWORD *)(v0 + 160) = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                                        + 64);
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v4 + 40), v0 + 16);
      uint64_t v5 = *(void *)(v0 + 40);
      uint64_t v6 = *(void *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v5);
      uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 48) + **(int **)(v6 + 48));
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 144) = v7;
      *uint64_t v7 = v0;
      v7[1] = closure #1 in RemoteConversationService.commit(bridge:reply:);
      uint64_t v8 = *(void *)(v0 + 112);
      return v26(v8, v5, v6);
    }
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    uint64_t v15 = 0xD00000000000003ELL;
    unint64_t v14 = 0x80000001BA06B6C0;
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 128);
    swift_release();
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v11._uint64_t countAndFlagsBits = 0x74784520776F6C46;
    v11._object = (void *)0xEF206E6F69736E65;
    String.append(_:)(v11);
    v12._object = (void *)0x80000001BA069360;
    v12._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 0xD000000000000023;
    v13._object = (void *)0x80000001BA06B700;
    String.append(_:)(v13);
    uint64_t v15 = 0;
    unint64_t v14 = 0xE000000000000000;
    outlined destroy of ReferenceResolutionClientProtocol?(v10 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1Tm(v10);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  Swift::String v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v27 = v20;
    *(_DWORD *)unint64_t v19 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v17, v18, "%s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Swift::String v21 = *(void (**)(id))(v0 + 96);
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  os_log_type_t v22 = (void *)swift_allocError();
  *uint64_t v23 = v15;
  v23[1] = v14;
  id v24 = specialized static ConversationCommitResultXPC.error(_:)(v22);

  v21(v24);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v4 = closure #1 in RemoteConversationService.commit(bridge:reply:);
  }
  else {
    uint64_t v4 = closure #1 in RemoteConversationService.commit(bridge:reply:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void (**)(void))(v0 + 96);
  uint64_t v4 = v1 + *(int *)(v0 + 160);
  uint64_t v5 = ConversationCommitResult.xpcRepresentation.getter();
  v3();

  outlined destroy of RemoteConversationService.State(v2, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v6 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void (**)(void))(v0 + 96);
  uint64_t v4 = v2 + *(int *)(v0 + 160);
  uint64_t v5 = specialized static ConversationCommitResultXPC.error(_:)(v1);
  v3();

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v6 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[36] = a5;
  v6[37] = a6;
  v6[35] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[38] = swift_task_alloc();
  v6[39] = type metadata accessor for RemoteConversationService.State(0);
  v6[40] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.isEmpty(reply:), v7, 0);
}

uint64_t closure #1 in RemoteConversationService.isEmpty(reply:)()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 280) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      (*(void (**)(uint64_t))(v0 + 288))(1);
      goto LABEL_9;
    }
    uint64_t v4 = *(void *)(v0 + 320);
    uint64_t v6 = *(void *)(v0 + 296);
    uint64_t v5 = *(void *)(v0 + 304);
    uint64_t v7 = *(void *)(v0 + 288);
    uint64_t v28 = v4
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                 + 64);
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v4 + 40), v0 + 216);
    uint64_t v8 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 216, v0 + 136);
    uint64_t v9 = static ConversationActor.shared;
    uint64_t v11 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v10, (void (*)(uint64_t))type metadata accessor for ConversationActor);
    Swift::String v12 = (void *)swift_allocObject();
    v12[2] = v9;
    v12[3] = v11;
    v12[4] = v7;
    v12[5] = v6;
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 136), (uint64_t)(v12 + 6));
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:), (uint64_t)v12);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
    uint64_t v13 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v28, v13);
    uint64_t v14 = v4;
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 320) + 40;
    swift_release();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v15, v0 + 56, &demangling cache variable for type metadata for Conversational?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 56, v0 + 16, &demangling cache variable for type metadata for Conversational?);
    uint64_t v16 = *(void *)(v0 + 320);
    if (*(void *)(v0 + 40))
    {
      uint64_t v18 = *(void *)(v0 + 296);
      uint64_t v17 = *(void *)(v0 + 304);
      uint64_t v29 = *(void *)(v0 + 320);
      uint64_t v19 = *(void *)(v0 + 288);
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 16), v0 + 96);
      uint64_t v20 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v17, 1, 1, v20);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 96, v0 + 176);
      uint64_t v21 = static ConversationActor.shared;
      uint64_t v23 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v22, (void (*)(uint64_t))type metadata accessor for ConversationActor);
      id v24 = (void *)swift_allocObject();
      v24[2] = v21;
      v24[3] = v23;
      uint64_t v24[4] = v19;
      v24[5] = v18;
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 176), (uint64_t)(v24 + 6));
      swift_retain();
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v17, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in RemoteConversationService.isEmpty(reply:), (uint64_t)v24);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
      uint64_t v14 = v29;
    }
    else
    {
      uint64_t v25 = *(void (**)(uint64_t))(v0 + 288);
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for Conversational?);
      v25(1);
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
      uint64_t v14 = v16;
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v14);
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  void v6[2] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v6[5] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:), v7, 0);
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 56) + **(int **)(v3 + 56));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:);
  return v6(v2, v3);
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(unsigned char *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:), v2, 0);
}

uint64_t closure #1 in RemoteConversationService.drainAsyncWork(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  void v6[2] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v6[5] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.drainAsyncWork(reply:), v7, 0);
}

uint64_t closure #1 in RemoteConversationService.drainAsyncWork(reply:)()
{
  uint64_t v3 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 16) + 168) + 216)
                         + **(int **)(**(void **)(*(void *)(v0 + 16) + 168) + 216));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in RemoteConversationService.drainAsyncWork(reply:);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.drainAsyncWork(reply:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 24))();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[38] = a5;
  v6[39] = a6;
  v6[37] = a4;
  uint64_t v7 = type metadata accessor for FlexibleExecutionSupportOptions();
  v6[40] = v7;
  v6[41] = *(void *)(v7 - 8);
  v6[42] = swift_task_alloc();
  v6[43] = swift_task_alloc();
  v6[44] = type metadata accessor for RemoteConversationService.State(0);
  v6[45] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = static ConversationActor.shared;
  v6[46] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:), v8, 0);
}

uint64_t closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:)()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 296) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *(void *)(v0 + 360);
      *(void *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v4 + 40), v0 + 16);
      uint64_t v5 = *(void *)(v0 + 40);
      uint64_t v6 = *(void *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v5);
      uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 72) + **(int **)(v6 + 72));
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 384) = v7;
      *uint64_t v7 = v0;
      v7[1] = closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:);
      uint64_t v8 = *(void *)(v0 + 344);
LABEL_6:
      return v28(v8, v5, v6);
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "No conversation while idle", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
    uint64_t v16 = *(void (**)(void))(v0 + 304);

    uint64_t v17 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
    uint64_t v18 = (char *)objc_allocWithZone(v17);
    *(void *)&v18[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
    *(void *)(v0 + 248) = v18;
    *(void *)(v0 + 256) = v17;
    id v19 = objc_msgSendSuper2((objc_super *)(v0 + 248), sel_init);
    v16();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 360) + 40;
    swift_release();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v9, v0 + 56, &demangling cache variable for type metadata for Conversational?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 56, v0 + 136, &demangling cache variable for type metadata for Conversational?);
    if (*(void *)(v0 + 160))
    {
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 136), v0 + 96);
      uint64_t v5 = *(void *)(v0 + 120);
      uint64_t v6 = *(void *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v5);
      uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 72) + **(int **)(v6 + 72));
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 400) = v10;
      *uint64_t v10 = v0;
      v10[1] = closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:);
      uint64_t v8 = *(void *)(v0 + 336);
      goto LABEL_6;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for Conversational?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v21 = *(void (**)(void))(v0 + 304);
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteConversationService.swift", 46, 2, (uint64_t)"flexibleExecutionSupportOptions(reply:)", 39, 2, v23);
    id v24 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
    uint64_t v25 = (char *)objc_allocWithZone(v24);
    *(void *)&v25[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
    *(void *)(v0 + 200) = v25;
    *(void *)(v0 + 208) = v24;
    id v26 = objc_msgSendSuper2((objc_super *)(v0 + 200), sel_init);
    v21();

    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1Tm(v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 392) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 368);
  if (v0) {
    uint64_t v4 = closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:);
  }
  else {
    uint64_t v4 = closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  objc_class *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void (**)(void))(v0 + 304);
  uint64_t v5 = FlexibleExecutionSupportOptions.rawValue.getter();
  uint64_t v6 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  *(void *)&v7[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v5;
  *(void *)(v0 + 280) = v7;
  *(void *)(v0 + 288) = v6;
  uint64_t v8 = objc_msgSendSuper2((objc_super *)(v0 + 280), sel_init);
  v4();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v9 = *(void *)(v0 + 360);
  uint64_t v10 = v9 + *(int *)(*(void *)(v0 + 376) + 64);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v11 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  __swift_destroy_boxed_opaque_existential_1Tm(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 408) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 368);
  if (v0) {
    uint64_t v4 = closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:);
  }
  else {
    uint64_t v4 = closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  objc_class *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v4 = *(void (**)(void))(v0 + 304);
  uint64_t v5 = FlexibleExecutionSupportOptions.rawValue.getter();
  uint64_t v6 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  *(void *)&v7[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v5;
  *(void *)(v0 + 232) = v7;
  *(void *)(v0 + 240) = v6;
  uint64_t v8 = objc_msgSendSuper2((objc_super *)(v0 + 232), sel_init);
  v4();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v9 = *(void *)(v0 + 360);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1Tm(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 392);
  uint64_t v2 = *(void (**)(void))(v0 + 304);
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteConversationService.swift", 46, 2, (uint64_t)"flexibleExecutionSupportOptions(reply:)", 39, 2, v4);
  uint64_t v5 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
  *(void *)(v0 + 264) = v6;
  *(void *)(v0 + 272) = v5;
  uint64_t v7 = objc_msgSendSuper2((objc_super *)(v0 + 264), sel_init);
  v2();

  uint64_t v8 = *(void *)(v0 + 360);
  uint64_t v9 = v8 + *(int *)(*(void *)(v0 + 376) + 64);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v10 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  void (*v6)(void);
  objc_class *v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "Error in whil querying remote conversation for flexible execution support", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = *(void **)(v0 + 408);
  uint64_t v6 = *(void (**)(void))(v0 + 304);

  uint64_t v7 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
  *(void *)(v0 + 216) = v8;
  *(void *)(v0 + 224) = v7;
  uint64_t v9 = objc_msgSendSuper2((objc_super *)(v0 + 216), sel_init);
  v6();

  uint64_t v10 = *(void *)(v0 + 360);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1Tm(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t closure #1 in RemoteConversationService.isCorrectable(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[18] = swift_task_alloc();
  v6[19] = type metadata accessor for RemoteConversationService.State(0);
  v6[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.isCorrectable(reply:), v7, 0);
}

uint64_t closure #1 in RemoteConversationService.isCorrectable(reply:)()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *(void *)(v0 + 160);
      uint64_t v6 = *(void *)(v0 + 136);
      uint64_t v5 = *(void *)(v0 + 144);
      uint64_t v7 = *(void *)(v0 + 128);
      uint64_t v18 = v4
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                   + 64);
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v4 + 40), v0 + 16);
      uint64_t v8 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 56);
      uint64_t v9 = static ConversationActor.shared;
      uint64_t v11 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v10, (void (*)(uint64_t))type metadata accessor for ConversationActor);
      uint64_t v12 = (void *)swift_allocObject();
      v12[2] = v9;
      v12[3] = v11;
      v12[4] = v7;
      v12[5] = v6;
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), (uint64_t)(v12 + 6));
      swift_retain();
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:), (uint64_t)v12);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
      uint64_t v13 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v18, v13);
      __swift_destroy_boxed_opaque_existential_1Tm(v4);
    }
    else
    {
      (*(void (**)(void))(v0 + 128))(0);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 160);
    uint64_t v15 = *(void (**)(void))(v0 + 128);
    swift_release();
    v15(0);
    outlined destroy of ReferenceResolutionClientProtocol?(v14 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1Tm(v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  void v6[2] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v6[5] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:), v7, 0);
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 64) + **(int **)(v3 + 64));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:);
  return v6(v2, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 16))(*(unsigned __int8 *)(v0 + 56));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(unsigned char *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:), v2, 0);
}

uint64_t RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](RemoteConversationService.activeTasksDidChange(activeTasks:rcId:), v5, 0);
}

uint64_t RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = *(void *)(v2 + 168);
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  v6[5] = v1;
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, void *, void *))(*(void *)v5 + 208);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(0xD000000000000027, 0x80000001BA06B460, &async function pointer to partial apply for closure #1 in RemoteConversationService.activeTasksDidChange(activeTasks:rcId:), v6);
  swift_release();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t closure #1 in RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return RemoteConversationService.sendActiveTasks(_:rcId:)(a2, a3, a4);
}

uint64_t RemoteConversationService.sendActiveTasks(_:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  uint64_t v5 = type metadata accessor for RequestSummary.ExecutionSource();
  v4[24] = v5;
  v4[25] = *(void *)(v5 - 8);
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  uint64_t updated = type metadata accessor for ContextUpdateScope();
  v4[30] = updated;
  v4[31] = *(void *)(updated - 8);
  v4[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  v4[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  v4[34] = swift_task_alloc();
  type metadata accessor for RemoteConversationService.State(0);
  v4[35] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v4[36] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](RemoteConversationService.sendActiveTasks(_:rcId:), v7, 0);
}

uint64_t RemoteConversationService.sendActiveTasks(_:rcId:)()
{
  uint64_t v33 = v0;
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 184) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v2, v1, type metadata accessor for RemoteConversationService.State);
  RemoteConversationService.State.activeTurn.getter(v0 + 56);
  outlined destroy of RemoteConversationService.State(v1, type metadata accessor for RemoteConversationService.State);
  if (*(void *)(v0 + 80))
  {
    uint64_t v3 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 264);
    uint64_t v5 = *(void *)(v0 + 272);
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 240);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
    uint64_t v9 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
    uint64_t v10 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, *MEMORY[0x1E4FA1C98], v8);
    objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
    swift_bridgeObjectRetain();
    *(void *)(v0 + 296) = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(0, 0, 0, v3, 0, v5, 0, v4, v6, 0, 0);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    *(void *)(v0 + 304) = __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    unint64_t v15 = *(void *)(v0 + 176);
    if (v14)
    {
      uint64_t v30 = *(void *)(v0 + 168);
      uint64_t v16 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = v31;
      *(_DWORD *)uint64_t v16 = 136315650;
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x80000001BA06B670, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v15, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 22) = 2080;
      uint64_t v17 = type metadata accessor for Siri_Nlu_External_Task();
      uint64_t v18 = swift_bridgeObjectRetain();
      uint64_t v19 = MEMORY[0x1BA9E3080](v18, v17);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v12, v13, "RemoteConversationService: %s sending active tasks if rcId='%s' is selected: %s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v28 = *(void *)(v0 + 40);
    uint64_t v29 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v28);
    *(void *)(v0 + 312) = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 56))(v28, v29);
    return MEMORY[0x1F4188298](RemoteConversationService.sendActiveTasks(_:rcId:), 0, 0);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ConversationTurnState?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1B9C64000, v23, v24, "Cannot send active task list to Execution Bridge: We're not in an active turn", v25, 2u);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v1 = v0[39];
  uint64_t v2 = (void *)v0[37];
  uint64_t v4 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v5 = v0[26];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[24];
  uint64_t v8 = v0[25];
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v17 = *(void *)(v1 + 40);
  uint64_t v10 = type metadata accessor for FlowOutputMessage.InAppResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 1, 1, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v6, *MEMORY[0x1E4FA24B8], v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v6, v7);
  uint64_t v11 = v4;
  outlined init with copy of ReferenceResolutionClientProtocol?(v3, v4, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v12 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  swift_bridgeObjectRetain();
  os_log_type_t v13 = v2;
  BOOL v14 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, v2, 0, 0, 0, 0, 0, 0, 0, 0, v17, v9, v5, v11);
  v0[40] = v14;

  outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  unint64_t v15 = (void *)swift_task_alloc();
  v0[41] = v15;
  *unint64_t v15 = v0;
  v15[1] = RemoteConversationService.sendActiveTasks(_:rcId:);
  return AceServiceInvokerImpl.publish(executionOutput:)((uint64_t)v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = RemoteConversationService.sendActiveTasks(_:rcId:);
  }
  else {
    uint64_t v2 = RemoteConversationService.sendActiveTasks(_:rcId:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 288);

  swift_release();
  return MEMORY[0x1F4188298](RemoteConversationService.sendActiveTasks(_:rcId:), v1, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  void *v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  uint64_t v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = *(void **)(v0 + 296);
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v1, v2, "Sent active task list to SiriRequestDispatcher", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 288);

  return MEMORY[0x1F4188298](RemoteConversationService.sendActiveTasks(_:rcId:), v1, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  uint64_t v1 = *(void **)(v0 + 336);
  swift_release();
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 336);
    uint64_t v7 = *(void **)(v0 + 296);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v16 = v9;
    *(void *)(v0 + 120) = v6;
    uint64_t v10 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "Error sending active task list to SiriRequestDispatcher: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
    os_log_type_t v13 = *(void **)(v0 + 336);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  type metadata accessor for RemoteConversationService.State(0);
  v5[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), v6, 0);
}

uint64_t RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v13 = v0[17];
  uint64_t v5 = (void *)v0[15];
  uint64_t v4 = v0[16];
  uint64_t v6 = v2 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of RemoteConversationService.State(v6, v1, type metadata accessor for RemoteConversationService.State);
  RemoteConversationService.State.activeTurn.getter((uint64_t)(v0 + 2));
  outlined destroy of RemoteConversationService.State(v1, type metadata accessor for RemoteConversationService.State);
  uint64_t v7 = *(void *)(v2 + 168);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 2), (uint64_t)(v0 + 7), &demangling cache variable for type metadata for ConversationTurnState?);
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = v5;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v0 + 7), (uint64_t)(v8 + 3), &demangling cache variable for type metadata for ConversationTurnState?);
  v8[8] = v2;
  v8[9] = v4;
  v8[10] = v13;
  v8[11] = v3;
  uint64_t v9 = *(void (**)(unint64_t, unint64_t, void *, void *))(*(void *)v7 + 208);
  id v10 = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(0xD000000000000039, 0x80000001BA06B490, &async function pointer to partial apply for closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), v8);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for ConversationTurnState?);
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t RemoteConversationService.State.activeTurn.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RemoteConversationService.State(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (long long *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of RemoteConversationService.State(v2, (uint64_t)v6, type metadata accessor for RemoteConversationService.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_release();
    outlined init with take of ReferenceResolutionClientProtocol(v6, (uint64_t)v12);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6 + 40, &demangling cache variable for type metadata for Conversational?);
    return outlined init with take of ReferenceResolutionClientProtocol(v12, a1);
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = (char *)v6
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                + 64);
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol(v6, (uint64_t)v12);
    uint64_t v9 = type metadata accessor for Input();
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6 + 40);
    return outlined init with take of ReferenceResolutionClientProtocol(v12, a1);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return outlined destroy of RemoteConversationService.State((uint64_t)v6, type metadata accessor for RemoteConversationService.State);
}

uint64_t closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  void v6[2] = a1;
  v6[3] = a2;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), 0, 0);
}

uint64_t closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v10 = *(_OWORD *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  *(_OWORD *)(v3 + 40) = v10;
  *(void *)(v3 + 56) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  void *v5 = v0;
  v5[1] = closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:);
  uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v8 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4187F28](v5, v6, v7, 0, 0, &async function pointer to partial apply for closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), v3, v8);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.prepareForAudioHandoffFailed(), 0, 0);
}

uint64_t closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[22] = a7;
  v8[23] = a8;
  v8[20] = a5;
  v8[21] = a6;
  v8[18] = a3;
  v8[19] = a4;
  v8[17] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  unsigned char v8[24] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), 0, 0);
}

uint64_t closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v1 = *(void **)(v0 + 144);
  if (v1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 152), v0 + 56, &demangling cache variable for type metadata for ConversationTurnState?);
    if (*(void *)(v0 + 80))
    {
      uint64_t v2 = *(void *)(v0 + 192);
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
      uint64_t v3 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 96);
      uint64_t v4 = one-time initialization token for shared;
      id v6 = v1;
      if (v4 != -1) {
        swift_once();
      }
      uint64_t v7 = *(void *)(v0 + 192);
      uint64_t v8 = static ConversationActor.shared;
      uint64_t v9 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v5, (void (*)(uint64_t))type metadata accessor for ConversationActor);
      uint64_t v10 = (void *)swift_allocObject();
      void v10[2] = v8;
      v10[3] = v9;
      void v10[4] = v6;
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 96), (uint64_t)(v10 + 5));
      swift_retain();
      _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), (uint64_t)v10);

      outlined destroy of ReferenceResolutionClientProtocol?(v7, &demangling cache variable for type metadata for TaskPriority?);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ConversationTurnState?);
    }
  }
  uint64_t v12 = *(void *)(v0 + 184);
  uint64_t v11 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 168);
  uint64_t v14 = *(void *)(v0 + 176);
  uint64_t v15 = *(void *)(v0 + 160);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v15;
  v17[5] = v13;
  v17[6] = v14;
  v17[7] = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v11, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), (uint64_t)v17);
  outlined destroy of ReferenceResolutionClientProtocol?(v11, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<()>);
  void *v18 = v0;
  v18[1] = closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:);
  return MEMORY[0x1F4187C40](0, 0, v19);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), v6, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v19 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[3];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = v17;
    *(_DWORD *)uint64_t v8 = 136315394;
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000039, 0x80000001BA06B490, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    v0[2] = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v7;

    _os_log_impl(&dword_1B9C64000, v4, v5, "RemoteConversationService: %s sending loaded flow info to ExecutionBridge: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v16, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = v0[3];
  uint64_t v10 = (void *)v0[4];
  uint64_t v12 = v10[3];
  uint64_t v13 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v12);
  objc_msgSend((id)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13), sel_flowPluginWillExecuteWithFlowPluginInfo_, v11);
  swift_unknownObjectRelease();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t closure #2 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v11;
  *uint64_t v11 = v7;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return RemoteConversationService.sendActiveTasks(_:rcId:)(a5, a6, a7);
}

uint64_t RemoteConversationService.executionDidComplete()()
{
  *(void *)(v1 + 16) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](RemoteConversationService.executionDidComplete(), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v1 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](RemoteConversationService.executionDidComplete(), v1, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v3)(void);
  uint64_t v4;

  id v3 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 16) + 168) + 216)
                         + **(int **)(**(void **)(*(void *)(v0 + 16) + 168) + 216));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #1 in RemoteConversationService.reset(reply:);
  return v3();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v6 = a2;
  uint64_t v3 = *(void *)(*(void *)(v2 + 64) + 40);
  id v4 = a2;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v6, v3, &demangling cache variable for type metadata for AFSharedUserInfo?);
  return swift_continuation_resume();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x1F4188200](a1);
  }
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = *(uint64_t **)(*(void *)(v3 + 64) + 40);
    *id v9 = v8;
    v9[1] = v10;
    return MEMORY[0x1F4188200](v3);
  }
}

uint64_t RemoteConversationService.FlowAndInputRegistry.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RemoteConversationService.FlowAndInputRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t RemoteConversationService.FlowAndInputRegistry.init()()
{
  uint64_t result = v0;
  uint64_t v2 = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 24) = v2;
  return result;
}

uint64_t RemoteConversationService.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 120);
  swift_release();
  swift_release();
  outlined destroy of RemoteConversationService.State(v0 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state, type metadata accessor for RemoteConversationService.State);
  swift_release();
  return v0;
}

uint64_t RemoteConversationService.__deallocating_deinit()
{
  RemoteConversationService.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ConversationTaskObservationDelegate.conversationWillExecute(flowPluginInfo:activeTasks:rcId:) in conformance RemoteConversationService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *id v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ConversationTaskObservationDelegate.executionDidComplete() in conformance RemoteConversationService()
{
  *(void *)(v1 + 16) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](RemoteConversationService.executionDidComplete(), v2, 0);
}

uint64_t protocol witness for ConversationTaskObservationDelegate.activeTasksDidChange(activeTasks:rcId:) in conformance RemoteConversationService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](protocol witness for ConversationTaskObservationDelegate.activeTasksDidChange(activeTasks:rcId:) in conformance RemoteConversationService, v5, 0);
}

uint64_t protocol witness for ConversationTaskObservationDelegate.activeTasksDidChange(activeTasks:rcId:) in conformance RemoteConversationService()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = *(void *)(v2 + 168);
  BOOL v6 = (void *)swift_allocObject();
  void v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  v6[5] = v1;
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, void *, void *))(*(void *)v5 + 208);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(0xD000000000000027, 0x80000001BA06B460, &closure #1 in RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)partial apply, v6);
  swift_release();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 144) = a7;
  *(void *)(v8 + 152) = a8;
  *(unsigned char *)(v8 + 432) = a5;
  *(void *)(v8 + 128) = a4;
  *(void *)(v8 + 136) = a6;
  *(void *)(v8 + 112) = a1;
  *(void *)(v8 + 120) = a3;
  *(void *)(v8 + 160) = type metadata accessor for RemoteConversationService.State(0);
  *(void *)(v8 + 168) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v8 + 176) = v10;
  *(void *)(v8 + 184) = *(void *)(v10 - 8);
  *(void *)(v8 + 192) = swift_task_alloc();
  *(void *)(v8 + 200) = type metadata accessor for UserInputResult();
  *(void *)(v8 + 208) = swift_task_alloc();
  *(void *)(v8 + 216) = swift_task_alloc();
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  *(void *)(v8 + 240) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Input();
  *(void *)(v8 + 248) = v11;
  *(void *)(v8 + 256) = *(void *)(v11 - 8);
  *(void *)(v8 + 264) = swift_task_alloc();
  *(void *)(v8 + 272) = type metadata accessor for SiriRequest(0);
  *(void *)(v8 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  *(void *)(v8 + 288) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for RequestPositionInSession();
  *(void *)(v8 + 296) = v12;
  *(void *)(v8 + 304) = *(void *)(v12 - 8);
  *(void *)(v8 + 312) = swift_task_alloc();
  *(void *)(v8 + 40) = type metadata accessor for EncoreConversation(0);
  *(void *)(v8 + 48) = &protocol witness table for EncoreConversation;
  *(void *)(v8 + 16) = a2;
  uint64_t v13 = one-time initialization token for shared;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = static ConversationActor.shared;
  *(void *)(v8 + 320) = static ConversationActor.shared;
  return MEMORY[0x1F4188298](specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:), v14, 0);
}

{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  *(void *)(v8 + 144) = a7;
  *(void *)(v8 + 152) = a8;
  *(unsigned char *)(v8 + 432) = a5;
  *(void *)(v8 + 128) = a4;
  *(void *)(v8 + 136) = a6;
  *(void *)(v8 + 112) = a1;
  *(void *)(v8 + 120) = a3;
  *(void *)(v8 + 160) = type metadata accessor for RemoteConversationService.State(0);
  *(void *)(v8 + 168) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v8 + 176) = v10;
  *(void *)(v8 + 184) = *(void *)(v10 - 8);
  *(void *)(v8 + 192) = swift_task_alloc();
  *(void *)(v8 + 200) = type metadata accessor for UserInputResult();
  *(void *)(v8 + 208) = swift_task_alloc();
  *(void *)(v8 + 216) = swift_task_alloc();
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  *(void *)(v8 + 240) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Input();
  *(void *)(v8 + 248) = v11;
  *(void *)(v8 + 256) = *(void *)(v11 - 8);
  *(void *)(v8 + 264) = swift_task_alloc();
  *(void *)(v8 + 272) = type metadata accessor for SiriRequest(0);
  *(void *)(v8 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  *(void *)(v8 + 288) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for RequestPositionInSession();
  *(void *)(v8 + 296) = v12;
  *(void *)(v8 + 304) = *(void *)(v12 - 8);
  *(void *)(v8 + 312) = swift_task_alloc();
  *(void *)(v8 + 40) = type metadata accessor for Conversation(0);
  *(void *)(v8 + 48) = &protocol witness table for Conversation;
  *(void *)(v8 + 16) = a2;
  uint64_t v13 = one-time initialization token for shared;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = static ConversationActor.shared;
  *(void *)(v8 + 320) = static ConversationActor.shared;
  return MEMORY[0x1F4188298](specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:), v14, 0);
}

{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(void *)(v8 + 144) = a7;
  *(void *)(v8 + 152) = a8;
  *(unsigned char *)(v8 + 432) = a5;
  *(void *)(v8 + 128) = a4;
  *(void *)(v8 + 136) = a6;
  *(void *)(v8 + 112) = a1;
  *(void *)(v8 + 120) = a3;
  *(void *)(v8 + 160) = type metadata accessor for RemoteConversationService.State(0);
  *(void *)(v8 + 168) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v8 + 176) = v10;
  *(void *)(v8 + 184) = *(void *)(v10 - 8);
  *(void *)(v8 + 192) = swift_task_alloc();
  *(void *)(v8 + 200) = type metadata accessor for UserInputResult();
  *(void *)(v8 + 208) = swift_task_alloc();
  *(void *)(v8 + 216) = swift_task_alloc();
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  *(void *)(v8 + 240) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Input();
  *(void *)(v8 + 248) = v11;
  *(void *)(v8 + 256) = *(void *)(v11 - 8);
  *(void *)(v8 + 264) = swift_task_alloc();
  *(void *)(v8 + 272) = type metadata accessor for SiriRequest(0);
  *(void *)(v8 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  *(void *)(v8 + 288) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for RequestPositionInSession();
  *(void *)(v8 + 296) = v12;
  *(void *)(v8 + 304) = *(void *)(v12 - 8);
  *(void *)(v8 + 312) = swift_task_alloc();
  *(void *)(v8 + 40) = v17;
  *(void *)(v8 + 48) = v18;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v8 + 16));
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16))(boxed_opaque_existential_0, a2);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v14 = static ConversationActor.shared;
  *(void *)(v8 + 320) = static ConversationActor.shared;
  return MEMORY[0x1F4188298](specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:), v14, 0);
}

uint64_t specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = (char *)v0[39];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[32];
  uint64_t v24 = v0[31];
  uint64_t v25 = v0[33];
  uint64_t v21 = (char *)v0[16];
  uint64_t v22 = v0[36];
  uint64_t v5 = (void *)v0[14];
  uint64_t v23 = v0[15];
  BOOL v6 = (char *)v5[3];
  uint64_t v20 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, (uint64_t)v6);
  uint64_t v8 = v5[3];
  uint64_t v7 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v8);
  id v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v8, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v2, (uint64_t)v9 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, v3);

  v0[41] = ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(v21, v2, v6, v20);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v2, v3);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v21[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_genAIFallbackSuppressReason], v22, &demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  type metadata accessor for NLRoutingDecisionProvider();
  swift_allocObject();
  v0[42] = NLRoutingDecisionProvider.init(genAIFallbackSuppressReason:)();
  uint64_t v10 = &v21[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  v0[43] = *(void *)&v21[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  v0[44] = *((void *)v10 + 1);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[45] = v11;
  v0[46] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v25, v23, v24);
  uint64_t v12 = v5[3];
  uint64_t v13 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v12);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  v0[47] = v14(v12, v13);
  v0[48] = v15;
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[49] = v16;
  *uint64_t v16 = v0;
  v16[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  uint64_t v17 = v0[30];
  uint64_t v18 = v0[16];
  return RemoteConversationService.makeRequestIdentities(from:)(v17, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v7 = *(int **)(v0 + 272);
  BOOL v6 = *(char **)(v0 + 280);
  id v9 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v21 = *(unsigned char *)(v0 + 432);
  *(void *)BOOL v6 = *(void *)(v0 + 344);
  *((void *)v6 + 1) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(&v6[v7[5]], v8, v10);
  *(void *)&v6[v7[6]] = v4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v11, (uint64_t)&v6[v7[10]], &demangling cache variable for type metadata for SiriRequestIdentities?);
  uint64_t v12 = &v6[v7[7]];
  *(void *)uint64_t v12 = v2;
  *((void *)v12 + 1) = v1;
  *(void *)&v6[v7[8]] = 0;
  *(void *)&v6[v7[9]] = v5;
  type metadata accessor for ConversationSELFHelper();
  *(void *)(v0 + 400) = static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  uint64_t v13 = swift_task_alloc();
  *(void *)(v0 + 408) = v13;
  *(void *)(v13 + 16) = v0 + 16;
  *(void *)(v13 + 24) = v6;
  *(unsigned char *)(v13 + 32) = v21;
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))((int)*MEMORY[0x1E4FA1DF8]
                                                                                             + MEMORY[0x1E4FA1DF8]);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v14;
  *uint64_t v14 = v0;
  v14[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 224);
  uint64_t v18 = *(void *)(v0 + 192);
  uint64_t v19 = *(void *)(v0 + 200);
  return v22(v17, v15, v16, v18, &closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)partial apply, v13, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 192);
  uint64_t v4 = *(void *)(*v1 + 184);
  uint64_t v5 = *(void *)(*v1 + 176);
  *(void *)(*v1 + 424) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  swift_task_dealloc();
  BOOL v6 = *(void *)(v2 + 320);
  if (v0) {
    uint64_t v7 = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  }
  else {
    uint64_t v7 = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  id v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;

  uint64_t v33 = v0;
  uint64_t v31 = (uint64_t)(v0 + 2);
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[27];
  outlined init with take of UserInputResult(v0[28], v1);
  outlined init with copy of RemoteConversationService.State(v1, v2, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  LODWORD(v1) = swift_getEnumCaseMultiPayload();
  outlined destroy of RemoteConversationService.State(v2, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  if (v1 == 2)
  {
    uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[45];
    uint64_t v4 = v0[44];
    uint64_t v29 = v0[43];
    uint64_t v5 = v0[31];
    BOOL v6 = v0[21];
    uint64_t v30 = v0[19];
    uint64_t v8 = v0[14];
    uint64_t v7 = v0[15];
    id v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
    uint64_t v10 = v6 + *(int *)(v9 + 64);
    uint64_t v11 = (void *)(v6 + *(int *)(v9 + 80));
    outlined init with copy of ReferenceResolutionClientProtocol(v8, v6);
    outlined init with copy of ReferenceResolutionClientProtocol(v31, v6 + 40);
    v3(v10, v7, v5);
    *uint64_t v11 = v29;
    v11[1] = v4;
    swift_storeEnumTagMultiPayload();
    uint64_t v12 = v30 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined assign with take of RemoteConversationService.State(v6, v12);
    swift_endAccess();
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v13 = v0[29];
  uint64_t v14 = v0[26];
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  outlined init with copy of RemoteConversationService.State(v13, v14, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  uint64_t v16 = Logger.logObject.getter();
  uint64_t v17 = static os_log_type_t.debug.getter();
  uint64_t v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = v0[26];
  if (v18)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v32 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v22 = UserInputResult.description.getter();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RemoteConversationService.State(v19, (uint64_t (*)(void))type metadata accessor for UserInputResult);
    _os_log_impl(&dword_1B9C64000, v16, v17, "FlowExtensionContext: accept() returned %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    MEMORY[0x1BA9E48C0](v20, -1, -1);
  }
  else
  {
    outlined destroy of RemoteConversationService.State(v0[26], (uint64_t (*)(void))type metadata accessor for UserInputResult);
  }

  uint64_t v24 = v0[29];
  uint64_t v25 = (void (*)(void))v0[17];
  uint64_t v26 = UserInputResult.xpcRepresentation.getter();
  v25();
  swift_release();
  swift_release();

  outlined destroy of RemoteConversationService.State(v24, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  outlined destroy of RemoteConversationService.State(v0[35], type metadata accessor for SiriRequest);
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void (*v15)(void);
  id v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[53];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  BOOL v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[53];
  if (v7)
  {
    id v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v19 = v10;
    *(_DWORD *)id v9 = 136315394;
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000061, 0x80000001BA06B800, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    v0[11] = v8;
    uint64_t v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(describing:)();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v5, v6, "%s: Error calling conversation.accept: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (void *)v0[53];
  uint64_t v15 = (void (*)(void))v0[17];
  uint64_t v16 = specialized static FlowExtensionUserInputResultXPC.error(_:)();
  v15();
  swift_release();
  swift_release();

  outlined destroy of RemoteConversationService.State(v0[35], type metadata accessor for SiriRequest);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

{
  void *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0[38];
  uint64_t v2 = (char *)v0[39];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[32];
  uint64_t v24 = v0[31];
  uint64_t v25 = v0[33];
  uint64_t v21 = (char *)v0[16];
  uint64_t v22 = v0[36];
  uint64_t v5 = (void *)v0[14];
  uint64_t v23 = v0[15];
  BOOL v6 = (char *)v5[3];
  uint64_t v20 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, (uint64_t)v6);
  uint64_t v8 = v5[3];
  uint64_t v7 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v8);
  id v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v8, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v2, (uint64_t)v9 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, v3);

  v0[41] = ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(v21, v2, v6, v20);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v2, v3);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v21[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_genAIFallbackSuppressReason], v22, &demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  type metadata accessor for NLRoutingDecisionProvider();
  swift_allocObject();
  v0[42] = NLRoutingDecisionProvider.init(genAIFallbackSuppressReason:)();
  uint64_t v10 = &v21[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  v0[43] = *(void *)&v21[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  v0[44] = *((void *)v10 + 1);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[45] = v11;
  v0[46] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v25, v23, v24);
  uint64_t v12 = v5[3];
  uint64_t v13 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v12);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  v0[47] = v14(v12, v13);
  v0[48] = v15;
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[49] = v16;
  *uint64_t v16 = v0;
  v16[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  uint64_t v17 = v0[30];
  uint64_t v18 = v0[16];
  return RemoteConversationService.makeRequestIdentities(from:)(v17, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v7 = *(int **)(v0 + 272);
  BOOL v6 = *(char **)(v0 + 280);
  id v9 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v21 = *(unsigned char *)(v0 + 432);
  *(void *)BOOL v6 = *(void *)(v0 + 344);
  *((void *)v6 + 1) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(&v6[v7[5]], v8, v10);
  *(void *)&v6[v7[6]] = v4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v11, (uint64_t)&v6[v7[10]], &demangling cache variable for type metadata for SiriRequestIdentities?);
  uint64_t v12 = &v6[v7[7]];
  *(void *)uint64_t v12 = v2;
  *((void *)v12 + 1) = v1;
  *(void *)&v6[v7[8]] = 0;
  *(void *)&v6[v7[9]] = v5;
  type metadata accessor for ConversationSELFHelper();
  *(void *)(v0 + 400) = static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  uint64_t v13 = swift_task_alloc();
  *(void *)(v0 + 408) = v13;
  *(void *)(v13 + 16) = v0 + 16;
  *(void *)(v13 + 24) = v6;
  *(unsigned char *)(v13 + 32) = v21;
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))((int)*MEMORY[0x1E4FA1DF8]
                                                                                             + MEMORY[0x1E4FA1DF8]);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v14;
  *uint64_t v14 = v0;
  v14[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 224);
  uint64_t v18 = *(void *)(v0 + 192);
  uint64_t v19 = *(void *)(v0 + 200);
  return v22(v17, v15, v16, v18, &closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)partial apply, v13, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 192);
  uint64_t v4 = *(void *)(*v1 + 184);
  uint64_t v5 = *(void *)(*v1 + 176);
  *(void *)(*v1 + 424) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  swift_task_dealloc();
  BOOL v6 = *(void *)(v2 + 320);
  if (v0) {
    uint64_t v7 = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  }
  else {
    uint64_t v7 = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  void *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0[38];
  uint64_t v2 = (char *)v0[39];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[32];
  uint64_t v24 = v0[31];
  uint64_t v25 = v0[33];
  uint64_t v21 = (char *)v0[16];
  uint64_t v22 = v0[36];
  uint64_t v5 = (void *)v0[14];
  uint64_t v23 = v0[15];
  BOOL v6 = (char *)v5[3];
  uint64_t v20 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, (uint64_t)v6);
  uint64_t v8 = v5[3];
  uint64_t v7 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v8);
  id v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v8, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v2, (uint64_t)v9 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, v3);

  v0[41] = ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(v21, v2, v6, v20);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v2, v3);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v21[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_genAIFallbackSuppressReason], v22, &demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  type metadata accessor for NLRoutingDecisionProvider();
  swift_allocObject();
  v0[42] = NLRoutingDecisionProvider.init(genAIFallbackSuppressReason:)();
  uint64_t v10 = &v21[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  v0[43] = *(void *)&v21[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  v0[44] = *((void *)v10 + 1);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[45] = v11;
  v0[46] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v25, v23, v24);
  uint64_t v12 = v5[3];
  uint64_t v13 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v12);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  v0[47] = v14(v12, v13);
  v0[48] = v15;
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[49] = v16;
  *uint64_t v16 = v0;
  v16[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  uint64_t v17 = v0[30];
  uint64_t v18 = v0[16];
  return RemoteConversationService.makeRequestIdentities(from:)(v17, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v7 = *(int **)(v0 + 272);
  BOOL v6 = *(char **)(v0 + 280);
  id v9 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v21 = *(unsigned char *)(v0 + 432);
  *(void *)BOOL v6 = *(void *)(v0 + 344);
  *((void *)v6 + 1) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(&v6[v7[5]], v8, v10);
  *(void *)&v6[v7[6]] = v4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v11, (uint64_t)&v6[v7[10]], &demangling cache variable for type metadata for SiriRequestIdentities?);
  uint64_t v12 = &v6[v7[7]];
  *(void *)uint64_t v12 = v2;
  *((void *)v12 + 1) = v1;
  *(void *)&v6[v7[8]] = 0;
  *(void *)&v6[v7[9]] = v5;
  type metadata accessor for ConversationSELFHelper();
  *(void *)(v0 + 400) = static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  uint64_t v13 = swift_task_alloc();
  *(void *)(v0 + 408) = v13;
  *(void *)(v13 + 16) = v0 + 16;
  *(void *)(v13 + 24) = v6;
  *(unsigned char *)(v13 + 32) = v21;
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))((int)*MEMORY[0x1E4FA1DF8]
                                                                                             + MEMORY[0x1E4FA1DF8]);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v14;
  *uint64_t v14 = v0;
  v14[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 224);
  uint64_t v18 = *(void *)(v0 + 192);
  uint64_t v19 = *(void *)(v0 + 200);
  return v22(v17, v15, v16, v18, &async function pointer to partial apply for closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:), v13, v19);
}

void *specialized RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v43 = a8;
  uint64_t v46 = a7;
  uint64_t v44 = a6;
  uint64_t v42 = a5;
  uint64_t v40 = a3;
  uint64_t v39 = a2;
  uint64_t v41 = a9;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v45 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51[3] = a11;
  v51[4] = a13;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v51);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32))(boxed_opaque_existential_0, a1, a11);
  v50[3] = a12;
  v50[4] = a14;
  uint64_t v23 = __swift_allocate_boxed_opaque_existential_0(v50);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(v23, a4, a12);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v24 = __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v24, v18);
  type metadata accessor for AsyncSerialQueue();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = MEMORY[0x1E4FBC860];
  v25[3] = 0;
  v25[4] = 0;
  v25[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = 0;
  v25[6] = v26;
  v25[7] = 0xD00000000000002ALL;
  v25[8] = 0x80000001BA06B690;
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))((uint64_t)v25 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger, v21, v18);
  a10[21] = v25;
  type metadata accessor for RemoteConversationService.State(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v51, (uint64_t)(a10 + 2));
  uint64_t v27 = v40;
  a10[7] = v39;
  a10[8] = v27;
  a10[9] = v42;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v50, (uint64_t)(a10 + 10));
  a10[20] = v43;
  uint64_t v28 = v41;
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, (uint64_t)&v47, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (v48)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v47, (uint64_t)v49);
    outlined init with take of ReferenceResolutionClientProtocol(v49, (uint64_t)(a10 + 15));
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v47, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    uint64_t v29 = type metadata accessor for ReferenceResolutionClient();
    uint64_t v30 = ReferenceResolutionClient.__allocating_init()();
    uint64_t v31 = MEMORY[0x1E4FA1F98];
    a10[18] = v29;
    a10[19] = v31;
    a10[15] = v30;
  }
  uint64_t v32 = (void *)((char *)a10 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_turnDataProvider);
  uint64_t v33 = v46;
  *uint64_t v32 = v44;
  v32[1] = v33;
  uint64_t v34 = type metadata accessor for TaskPriority();
  uint64_t v35 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v45, 1, 1, v34);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = 0;
  *(void *)(v36 + 24) = 0;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:), v36);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v28, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
  return a10;
}

void *specialized RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v25 = a14;
  uint64_t v26 = a13;
  uint64_t v16 = *(void *)(a12 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](a10);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (void *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, a11);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a4, a12);
  return specialized RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)((uint64_t)v22, v27, v28, (uint64_t)v19, v29, v30, v31, v32, a9, v23, a11, a12, v26, v25);
}

uint64_t type metadata accessor for ConversationActor()
{
  return self;
}

uint64_t sub_1B9F989A0()
{
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 88, 7);
}

uint64_t sub_1B9F98A04()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B9F98B38()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1B9F98D70()
{
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1B9F98DE4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)(v2, v3, v5, v4);
}

uint64_t type metadata accessor for RemoteConversationService.State(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteConversationService.State);
}

uint64_t sub_1B9F98FF8()
{
  if (*(void *)(v0 + 48)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 96, 7);
}

uint64_t partial apply for closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v0 + 64);
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(void *)(v5 + 48) = v3;
  *(void *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 32) = v6;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v0 + 24;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), 0, 0);
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in ConversationActor(uint64_t a1, uint64_t a2)
{
  return _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, a2, (void (*)(uint64_t))type metadata accessor for ConversationActor);
}

uint64_t method lookup function for ConversationActor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationActor);
}

uint64_t dispatch thunk of ConversationActor.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t ObjC metadata update function for RemoteConversationService()
{
  return type metadata accessor for RemoteConversationService(0);
}

uint64_t type metadata accessor for RemoteConversationService(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteConversationService);
}

uint64_t type metadata completion function for RemoteConversationService()
{
  uint64_t result = type metadata accessor for RemoteConversationService.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for RemoteConversationService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteConversationService);
}

uint64_t dispatch thunk of RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

char *initializeBufferWithCopyOfBuffer for RemoteConversationService.State(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      long long v14 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v14;
      (**(void (***)(void *, const void *))(v14 - 8))(a1, a2);
      long long v15 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 4) = v15;
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))((uint64_t)(a1 + 40), (uint64_t)(a2 + 40));
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      uint64_t v17 = *(int *)(v16 + 64);
      uint64_t v18 = &a1[v17];
      uint64_t v19 = &a2[v17];
      uint64_t v20 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      uint64_t v21 = *(int *)(v16 + 80);
      uint64_t v22 = &a1[v21];
      uint64_t v23 = &a2[v21];
      uint64_t v24 = *((void *)v23 + 1);
      *(void *)uint64_t v22 = *(void *)v23;
      *((void *)v22 + 1) = v24;
      swift_bridgeObjectRetain();
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      long long v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(void *, const void *))(v8 - 8))(a1, a2);
      uint64_t v9 = a1 + 40;
      uint64_t v10 = a2 + 40;
      uint64_t v11 = *((void *)a2 + 8);
      if (v11)
      {
        uint64_t v12 = *((void *)a2 + 9);
        *((void *)a1 + 8) = v11;
        *((void *)a1 + 9) = v12;
        (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
      }
      else
      {
        long long v25 = *(_OWORD *)(a2 + 56);
        *uint64_t v9 = *v10;
        *(_OWORD *)(a1 + 56) = v25;
        *((void *)a1 + 9) = *((void *)a2 + 9);
      }
      *((void *)a1 + 10) = *((void *)a2 + 10);
      swift_retain();
      goto LABEL_11;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for RemoteConversationService.State(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
    uint64_t v3 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                + 64);
    uint64_t v4 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    if (*(void *)(a1 + 64)) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
    }
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for RemoteConversationService.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    long long v12 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
    long long v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v13;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 40, a2 + 40);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
    uint64_t v15 = *(int *)(v14 + 64);
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    uint64_t v18 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = *(int *)(v14 + 80);
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (void *)(a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    long long v8 = (_OWORD *)(a1 + 40);
    uint64_t v9 = (_OWORD *)(a2 + 40);
    uint64_t v10 = *(void *)(a2 + 64);
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v10;
      *(void *)(a1 + 72) = v11;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
    }
    else
    {
      long long v23 = *(_OWORD *)(a2 + 56);
      *long long v8 = *v9;
      *(_OWORD *)(a1 + 56) = v23;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_retain();
    goto LABEL_9;
  }
  memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t assignWithCopy for RemoteConversationService.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RemoteConversationService.State(a1, type metadata accessor for RemoteConversationService.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
      uint64_t v12 = *(void *)(a2 + 64);
      *(void *)(a1 + 64) = v12;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 40, a2 + 40);
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      uint64_t v14 = *(int *)(v13 + 64);
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      uint64_t v17 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      uint64_t v18 = *(int *)(v13 + 80);
      uint64_t v19 = (void *)(a1 + v18);
      uint64_t v20 = (void *)(a2 + v18);
      *uint64_t v19 = *v20;
      v19[1] = v20[1];
      swift_bridgeObjectRetain();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      long long v8 = (_OWORD *)(a1 + 40);
      uint64_t v9 = (long long *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 64);
      if (v10)
      {
        *(void *)(a1 + 64) = v10;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        (**(void (***)(_OWORD *, long long *))(v10 - 8))(v8, v9);
      }
      else
      {
        long long v21 = *v9;
        long long v22 = *(_OWORD *)(a2 + 56);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *long long v8 = v21;
        *(_OWORD *)(a1 + 56) = v22;
      }
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_retain();
      goto LABEL_10;
    }
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *initializeWithTake for RemoteConversationService.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *((void *)a1 + 4) = *((void *)a2 + 4);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
    *((void *)a1 + 9) = *((void *)a2 + 9);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
    uint64_t v8 = *(int *)(v7 + 64);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Input();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    *(_OWORD *)((char *)a1 + *(int *)(v7 + 80)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for RemoteConversationService.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RemoteConversationService.State((uint64_t)a1, type metadata accessor for RemoteConversationService.State);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      *((void *)a1 + 9) = *((void *)a2 + 9);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      uint64_t v8 = *(int *)(v7 + 64);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 80)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 80));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for RemoteConversationService.State()
{
  uint64_t v3 = "X";
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    uint64_t v4 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for RemoteConversationService.FlowAndInputRegistry()
{
  return self;
}

uint64_t method lookup function for RemoteConversationService.FlowAndInputRegistry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteConversationService.FlowAndInputRegistry);
}

uint64_t dispatch thunk of RemoteConversationService.FlowAndInputRegistry.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_1B9F99E30()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ()(char a1, uint64_t a2)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ()(a1, a2, *(void *)(v2 + 16));
}

uint64_t objectdestroyTm_7()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t objectdestroy_63Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v11 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_1B9F9A00C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  int v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  void *v6 = v5;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return RemoteConversationService.sendActiveTasks(_:rcId:)(v2, v4, v3);
}

uint64_t sub_1B9F9A154()
{
  swift_unknownObjectRelease();

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(a1, v4, v5, v6, (uint64_t)(v1 + 5));
}

uint64_t sub_1B9F9A260()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(1, a1);
}

uint64_t sub_1B9F9A2C8()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:), 0, 0);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)(a1, v4, v5, v6, v7, (uint64_t)(v1 + 6));
}

uint64_t partial apply for closure #2 in closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(a1, v4, v5, v6, v7, (uint64_t)(v1 + 6));
}

uint64_t objectdestroy_232Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 48);

  return MEMORY[0x1F4186498](v0, 88, 7);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(a1, v4, v5, v6, v7, (uint64_t)(v1 + 6));
}

uint64_t outlined destroy of RemoteConversationService.State(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B9F9A6B0()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();

  return MEMORY[0x1F4186498](v0, 88, 7);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v8 = v1[9];
  uint64_t v7 = v1[10];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:)(a1, v4, v5, v6, v8, v7);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)()
{
  return closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)();
}

uint64_t specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v53 = a8;
  uint64_t v49 = a7;
  uint64_t v50 = a6;
  uint64_t v52 = a4;
  uint64_t v51 = a3;
  uint64_t v46 = a2;
  uint64_t v47 = a9;
  uint64_t v48 = type metadata accessor for DispatchTimeInterval();
  uint64_t v54 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60[3] = type metadata accessor for ServerFallbackDisablingUtils();
  v60[4] = &protocol witness table for ServerFallbackDisablingUtils;
  v60[0] = a10;
  uint64_t v58 = type metadata accessor for CorrectionsUndoManager();
  uint64_t v59 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager, 255, (void (*)(uint64_t))type metadata accessor for CorrectionsUndoManager);
  v57[0] = a5;
  swift_defaultActor_initialize();
  type metadata accessor for Conversation.State(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  *(void *)(v15 + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
  uint64_t v16 = (void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  *uint64_t v16 = 12589;
  v16[1] = 0xE200000000000000;
  uint64_t v17 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(unsigned char *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused) = 0;
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = 0;
  type metadata accessor for InstrumentedStack(0);
  uint64_t v19 = (void *)swift_allocObject();
  v19[5] = MEMORY[0x1E4FBC868];
  v19[3] = 0;
  v19[4] = 0;
  void v19[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  uint64_t v20 = (void *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v20[6] = 0;
  _OWORD v20[2] = a1;
  swift_beginAccess();
  swift_weakAssign();
  void v20[4] = MEMORY[0x1E4FBC860];
  swift_weakAssign();
  v20[6] = 0;
  swift_retain_n();
  swift_retain();
  swift_release();
  specialized OrderedForest._push(_:)((uint64_t)v20);
  uint64_t v21 = v20[2];
  type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
  swift_allocObject();
  uint64_t v22 = swift_retain();
  long long v23 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v22, 0);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v56 = v19[5];
  v19[5] = 0x8000000000000000;
  uint64_t v25 = (uint64_t)v23;
  uint64_t v26 = v46;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, v21, isUniquelyReferenced_nonNull_native);
  v19[5] = v56;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  uint64_t v27 = v47;
  swift_release();
  swift_release();
  *(void *)(a11 + 112) = v19;
  uint64_t v28 = v54;
  uint64_t v29 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v14, v53, v48);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v30 = static OS_dispatch_queue.main.getter();
  type metadata accessor for JetsamHelper();
  uint64_t v31 = (void *)swift_allocObject();
  uint64_t v32 = (void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *uint64_t v32 = 0;
  v32[1] = 0;
  v31[2] = 0xD000000000000023;
  void v31[3] = 0x80000001BA064730;
  v31[4] = dispatch_semaphore_create(1);
  v31[5] = v30;
  uint64_t v33 = v14;
  uint64_t v34 = v29;
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))((uint64_t)v31 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v33, v29);
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper) = v31;
  swift_beginAccess();
  *(void *)(v15 + 8) = v49;
  swift_unknownObjectWeakAssign();
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskService) = v26;
  uint64_t v35 = (void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
  uint64_t v36 = v52;
  *uint64_t v35 = v51;
  v35[1] = v36;
  uint64_t v37 = *(void **)(a1 + 160);
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo) = v37;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v57, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v60, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils);
  if (v27)
  {
    swift_retain();
    id v38 = v37;
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    swift_retain();
    id v39 = v37;
    static SiriEnvironment.default.getter();
  }
  type metadata accessor for SiriEnvironment();
  swift_allocObject();
  swift_retain();
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rootEnvironment) = SiriEnvironment.init(parent:)();
  type metadata accessor for SiriCorrectionsClientProvider();
  swift_allocObject();
  swift_retain();
  SiriCorrectionsClientProvider.init()();
  SiriEnvironment.correctionsClientProvider.setter();
  swift_release();
  SiriEnvironment.correctionsClientProvider.getter();
  uint64_t v40 = v58;
  uint64_t v41 = v59;
  uint64_t v42 = __swift_project_boxed_opaque_existential_1(v57, v58);
  v55[3] = v40;
  v55[4] = *(void *)(v41 + 8);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v55);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(boxed_opaque_existential_0, v42, v40);
  dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.setter();
  swift_release();
  type metadata accessor for UserIdentityProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, 255, MEMORY[0x1E4FA1DD0]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for FlowTaskProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, 255, MEMORY[0x1E4FA1890]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for CallStateEnvironmentProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, 255, MEMORY[0x1E4FA1E60]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for ScopedReferenceResolutionDataProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type ScopedReferenceResolutionDataProvider and conformance ScopedReferenceResolutionDataProvider, 255, MEMORY[0x1E4FA3D90]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for AceServiceContextProvider();
  _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type AceServiceContextProvider and conformance AceServiceContextProvider, 255, MEMORY[0x1E4FA1E30]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  swift_retain();
  dispatch thunk of AnyFlow.siriEnvironment.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v60);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v34);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
  return a11;
}

uint64_t partial apply for closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  return closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(a1, v4, v5, v6);
}

uint64_t outlined init with take of UserInputResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UserInputResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of RemoteConversationService.State(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of RemoteConversationService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteConversationService.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_1(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)()
{
  return closure #1 in closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(*(void *)(v0 + 16));
}

uint64_t closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(a1, v4, v5, v6);
}

uint64_t sub_1B9F9B3B4()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.reset(reply:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v2[2] = v0 + 32;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RemoteConversationService.reset(reply:), 0, 0);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)()
{
  return closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(*(void *)(v0 + 16), *(char **)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)()
{
  return closure #1 in closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(*(void **)(v0 + 16));
}

id RemoteConversationSpeechData.__allocating_init(rcId:asrOnDevice:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:genAIFallbackSuppressReason:asrLocation:nlLocation:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, uint64_t a12)
{
  id v21 = objc_allocWithZone(v12);
  return RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:genAIFallbackSuppressReason:asrLocation:nlLocation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12);
}

uint64_t RemoteConversationSpeechData.rcId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteConversationSpeechData.asrOnDevice.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrOnDevice);
}

void *RemoteConversationSpeechData.userSpecificInfoForRecognizedUser.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
  id v2 = v1;
  return v1;
}

void *RemoteConversationSpeechData.userSpecificInfoForUserMeetingSessionThreshold.getter()
{
  uint64_t v1 = *(void **)(v0
                + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  id v2 = v1;
  return v1;
}

void *RemoteConversationSpeechData.speechPackage.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_speechPackage);
  id v2 = v1;
  return v1;
}

uint64_t RemoteConversationSpeechData.utterance.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance);
}

uint64_t RemoteConversationSpeechData.responseLanguageVariant.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant);
}

uint64_t RemoteConversationSpeechData.requestLanguageVariant.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant);
}

uint64_t RemoteConversationSpeechData.genAIFallbackSuppressReason.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?(v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_genAIFallbackSuppressReason, a1);
}

uint64_t RemoteConversationSpeechData.asrLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return RemoteConversationSpeechData.asrLocation.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrLocation, a1);
}

uint64_t RemoteConversationSpeechData.nlLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return RemoteConversationSpeechData.asrLocation.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_nlLocation, a1);
}

uint64_t RemoteConversationSpeechData.asrLocation.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for ExecutionLocation();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

id RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:genAIFallbackSuppressReason:asrLocation:nlLocation:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = v15;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  long long v23 = &v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  *long long v23 = a1;
  v23[1] = a2;
  v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrOnDevice] = a3;
  *(void *)&v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser] = a4;
  *(void *)&v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold] = a5;
  *(void *)&v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_speechPackage] = a6;
  uint64_t v24 = &v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance];
  *uint64_t v24 = a7;
  v24[1] = a8;
  uint64_t v25 = &v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant];
  void *v25 = a9;
  v25[1] = a10;
  uint64_t v26 = &v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant];
  *uint64_t v26 = a11;
  v26[1] = a12;
  outlined init with copy of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?(a13, (uint64_t)&v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_genAIFallbackSuppressReason]);
  uint64_t v27 = &v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrLocation];
  uint64_t v28 = type metadata accessor for ExecutionLocation();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v30(v27, a14, v28);
  v30(&v16[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_nlLocation], a15, v28);
  v37.receiver = v16;
  v37.super_class = ObjectType;
  id v31 = objc_msgSendSuper2(&v37, sel_init);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v32(a15, v28);
  v32(a14, v28);
  outlined destroy of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?(a13);
  return v31;
}

uint64_t outlined init with copy of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static RemoteConversationSpeechData.supportsSecureCoding.getter()
{
  return static RemoteConversationSpeechData.supportsSecureCoding;
}

uint64_t static RemoteConversationSpeechData.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static RemoteConversationSpeechData.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static RemoteConversationSpeechData.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

id RemoteConversationSpeechData.__allocating_init(coder:)(NSObject *a1)
{
  id v3 = objc_allocWithZone(v1);
  return RemoteConversationSpeechData.init(coder:)(a1);
}

id RemoteConversationSpeechData.init(coder:)(NSObject *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for ExecutionLocation();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v99 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v98 = (char *)&v76 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v100 = (char *)&v76 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v96 = (char *)&v76 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v76 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v101 = (char *)&v76 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v97 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  long long v23 = (char *)&v76 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v102 = (uint64_t)&v76 - v24;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v25 = v1;
  uint64_t v26 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v26)
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_1B9C64000, v40, v41, "Could not decode UserInputRequestXPC: Missing rcId", v42, 2u);
      MEMORY[0x1BA9E48C0](v42, -1, -1);
    }
    goto LABEL_14;
  }
  uint64_t v27 = v26;
  Class v92 = ObjectType;
  uint64_t v28 = (void *)MEMORY[0x1BA9E2DD0](0x7665446E4F727361, 0xEB00000000656369);
  unsigned __int8 v29 = [a1 containsValueForKey:v28];

  if ((v29 & 1) == 0)
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.executor);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl(&dword_1B9C64000, v40, v44, "Could not decode UserInputRequestXPC: Missing asrOnDevice", v45, 2u);
      MEMORY[0x1BA9E48C0](v45, -1, -1);
    }
    else
    {

      uint64_t v40 = a1;
      a1 = v27;
    }
LABEL_14:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v93 = v27;
  id v94 = v25;
  uint64_t v88 = v16;
  uint64_t v30 = (void *)MEMORY[0x1BA9E2DD0](0x7665446E4F727361, 0xEB00000000656369);
  unsigned int v87 = [a1 decodeBoolForKey:v30];

  type metadata accessor for UserSpecificInfo();
  uint64_t v86 = NSCoder.decodeObject<A>(of:forKey:)();
  uint64_t v85 = NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPackage);
  uint64_t v84 = NSCoder.decodeObject<A>(of:forKey:)();
  id v91 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  id v90 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  id v89 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v31 = JSONDecoder.init()();
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  uint64_t v32 = NSCoder.decodeObject<A>(of:forKey:)();
  uint64_t v33 = type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
  uint64_t v34 = v33;
  uint64_t v95 = v5;
  uint64_t v83 = v31;
  if (v32)
  {
    uint64_t v82 = v4;
    uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v37 = v36;
    lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation(&lazy protocol witness table cache variable for type NLRoutingDecisionMessage.GenAIFallbackSuppressReason and conformance NLRoutingDecisionMessage.GenAIFallbackSuppressReason, MEMORY[0x1E4FA2130]);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    id v38 = v100;

    outlined consume of Data._Representation(v35, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v23, 0, 1, v34);
    outlined init with take of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?((uint64_t)v23, v102);
    uint64_t v4 = v82;
    uint64_t v5 = v95;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v102, 1, 1, v33);
    id v38 = v100;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v47 = PropertyListDecoder.init()();
  uint64_t v48 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v48)
  {
    id v49 = v48;
    uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v52 = v51;

    lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation(&lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation, MEMORY[0x1E4FA5260]);
    uint64_t v53 = v47;
    uint64_t v54 = v96;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();

    outlined consume of Data._Representation(v50, v52);
    uint64_t v5 = v95;
    (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v101, v54, v4);
    uint64_t v47 = v53;
    id v38 = v100;
  }
  else
  {
    static ExecutionLocation.unknown.getter();
  }
  uint64_t v55 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v55)
  {
    id v56 = v55;
    uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v59 = v58;

    lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation(&lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation, MEMORY[0x1E4FA5260]);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();

    outlined consume of Data._Representation(v57, v59);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v88, v38, v4);
  }
  else
  {
    static ExecutionLocation.unknown.getter();
  }

  uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v81 = v60;
  if (v91)
  {
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v79 = v61;
  }
  else
  {
    uint64_t v80 = 0;
    uint64_t v79 = 0;
  }
  uint64_t v100 = (char *)a1;
  uint64_t v62 = v4;
  if (v90)
  {
    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v77 = v63;
  }
  else
  {
    uint64_t v78 = 0;
    uint64_t v77 = 0;
  }
  uint64_t v96 = (char *)v47;
  if (v89)
  {
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v65 = v64;
  }
  else
  {
    uint64_t v76 = 0;
    uint64_t v65 = 0;
  }
  uint64_t v66 = v97;
  outlined init with copy of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?(v102, v97);
  uint64_t v67 = v95;
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
  uint64_t v69 = (uint64_t)v98;
  uint64_t v70 = v101;
  v68(v98, v101, v62);
  uint64_t v71 = (uint64_t)v99;
  os_log_type_t v72 = v88;
  v68(v99, v88, v62);
  id v73 = objc_allocWithZone(v92);
  id v46 = RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:genAIFallbackSuppressReason:asrLocation:nlLocation:)(v82, v81, v87, v86, v85, v84, v80, v79, v78, v77, v76, v65, v66, v69, v71);

  swift_release();
  swift_release();

  uint64_t v74 = *(void (**)(char *, uint64_t))(v67 + 8);
  v74(v72, v62);
  v74(v70, v62);
  outlined destroy of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?(v102);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v46;
}

id RemoteConversationSpeechData.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void RemoteConversationSpeechData.init()()
{
}

id RemoteConversationSpeechData.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t outlined init with take of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ObjC metadata update function for RemoteConversationSpeechData()
{
  return type metadata accessor for RemoteConversationSpeechData();
}

void type metadata completion function for RemoteConversationSpeechData()
{
  type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ExecutionLocation();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for RemoteConversationSpeechData(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteConversationSpeechData);
}

uint64_t dispatch thunk of RemoteConversationSpeechData.__allocating_init(rcId:asrOnDevice:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:genAIFallbackSuppressReason:asrLocation:nlLocation:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of RemoteConversationSpeechData.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

void type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?()
{
  if (!lazy cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?)
  {
    type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
    }
  }
}

id ProxiedRequestContext.__allocating_init(rske:executionRequestId:resultCandidateId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = specialized ProxiedRequestContext.__allocating_init(rske:executionRequestId:resultCandidateId:)(a1, a2, a3, a4, a5);

  return v6;
}

uint64_t RemoteConversationTurnData.init(executionRequestId:rootRequestId:sessionId:requestContextData:conversationLoggingId:flowTask:scopedRRData:invokedByPeerToPeerEORR:proxiedRequestContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  uint64_t v17 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a5, (uint64_t)a9 + v17[6], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)((char *)a9 + v17[7]) = a6;
  uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a7, (uint64_t)a9 + v17[8], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)((char *)a9 + v17[9]) = a8;
  uint64_t v19 = (void *)((char *)a9 + v17[12]);
  *uint64_t v19 = a10;
  v19[1] = a11;
  *((unsigned char *)a9 + v17[10]) = a12;
  *(void *)((char *)a9 + v17[11]) = a13;
  return result;
}

uint64_t RemoteConversationTurnData.executionRequestId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteConversationTurnData.rootRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteConversationTurnData.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RemoteConversationTurnData(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 24), a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

id RemoteConversationTurnData.requestContextData.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for RemoteConversationTurnData(0) + 28));

  return v1;
}

uint64_t RemoteConversationTurnData.conversationLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RemoteConversationTurnData(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 32), a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t RemoteConversationTurnData.flowTask.getter()
{
  type metadata accessor for RemoteConversationTurnData(0);

  return swift_retain();
}

uint64_t RemoteConversationTurnData.invokedByPeerToPeerEORR.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for RemoteConversationTurnData(0) + 40));
}

void *RemoteConversationTurnData.proxiedRequestContext.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for RemoteConversationTurnData(0) + 44));
  id v2 = v1;
  return v1;
}

uint64_t RemoteConversationTurnData.scopedRRData.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for RemoteConversationTurnData(0) + 48);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t RemoteConversationTurnData.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = 0;
  unint64_t v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(255);
  v5._uint64_t countAndFlagsBits = 0xD000000000000034;
  v5._object = (void *)0x80000001BA06BB90;
  String.append(_:)(v5);
  uint64_t v6 = *v0;
  uint64_t v7 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD000000000000015;
  v9._object = (void *)0x80000001BA06BBD0;
  String.append(_:)(v9);
  if (v0[3])
  {
    uint64_t v10 = v0[2];
    uint64_t v11 = (void *)v0[3];
  }
  else
  {
    uint64_t v11 = (void *)0xE500000000000000;
    uint64_t v10 = 0x3E6C696E3CLL;
  }
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0xD000000000000010;
  v13._object = (void *)0x80000001BA06BBF0;
  String.append(_:)(v13);
  uint64_t v14 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v0 + v14[6], (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v15._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v16._object = (void *)0x80000001BA06BC10;
  String.append(_:)(v16);
  id v17 = objc_msgSend(*(id *)((char *)v0 + v14[7]), sel_debugDescription);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x80000001BA06BC30;
  v22._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v22);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + v14[8], (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v23._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0x6C6620202020202CLL;
  v24._object = (void *)0xEF3D6B736154776FLL;
  String.append(_:)(v24);
  uint64_t v39 = *(uint64_t *)((char *)v1 + v14[9]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTask?);
  v25._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0xD000000000000013;
  v26._object = (void *)0x80000001BA06BC50;
  String.append(_:)(v26);
  if (*(unint64_t *)((char *)v1 + v14[12] + 8) >> 60 == 15) {
    uint64_t v27 = 28526;
  }
  else {
    uint64_t v27 = 7562617;
  }
  if (*(unint64_t *)((char *)v1 + v14[12] + 8) >> 60 == 15) {
    unint64_t v28 = 0xE200000000000000;
  }
  else {
    unint64_t v28 = 0xE300000000000000;
  }
  unint64_t v29 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v30._object = (void *)0x80000001BA06BC70;
  String.append(_:)(v30);
  if (*((unsigned char *)v1 + v14[10])) {
    uint64_t v31 = 1702195828;
  }
  else {
    uint64_t v31 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + v14[10])) {
    unint64_t v32 = 0xE400000000000000;
  }
  else {
    unint64_t v32 = 0xE500000000000000;
  }
  unint64_t v33 = v32;
  String.append(_:)(*(Swift::String *)&v31);
  swift_bridgeObjectRelease();
  v34._object = (void *)0x80000001BA06BC90;
  v34._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v34);
  uint64_t v39 = *(uint64_t *)((char *)v1 + v14[11]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProxiedRequestContext?);
  v35._uint64_t countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 32010;
  v36._object = (void *)0xE200000000000000;
  String.append(_:)(v36);
  return v40;
}

uint64_t static ConversationTurnDataXPC.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t ConversationTurnDataXPC.executionRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationTurnDataXPC.rootRequestId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId);
}

void *ConversationTurnDataXPC.sessionId.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_sessionId);
  id v2 = v1;
  return v1;
}

id ConversationTurnDataXPC.requestContextData.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_requestContextData);
}

void *ConversationTurnDataXPC.conversationLoggingId.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_conversationLoggingId);
  id v2 = v1;
  return v1;
}

void *ConversationTurnDataXPC.flowTask.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_flowTask);
  id v2 = v1;
  return v1;
}

uint64_t ConversationTurnDataXPC.invokedByPeerToPeerEORR.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_invokedByPeerToPeerEORR);
}

void *ConversationTurnDataXPC.scopedRRData.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_scopedRRData);
  id v2 = v1;
  return v1;
}

void *ConversationTurnDataXPC.proxiedRequestContext.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_proxiedRequestContext);
  id v2 = v1;
  return v1;
}

id ConversationTurnDataXPC.swiftRepresentation()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  Swift::String v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId);
  uint64_t v13 = *(void *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId + 8);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId + 8);
  uint64_t v15 = *(void *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_sessionId);
  uint64_t v40 = *(void *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId);
  uint64_t v41 = v12;
  if (v15)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 0, 1, v16);
  }
  else
  {
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 1, 1, v17);
  }
  id v44 = *(id *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_requestContextData);
  uint64_t v18 = *(void *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_conversationLoggingId);
  uint64_t v43 = v9;
  if (v18)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 0, 1, v19);
  }
  else
  {
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v9, 1, 1, v20);
  }
  Swift::String v21 = *(void **)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_flowTask);
  if (v21)
  {
    Swift::String v22 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v21) + 0x78);
    swift_bridgeObjectRetain();
    id v23 = v44;
    uint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = v22(v24);
    if (v2)
    {

      uint64_t v39 = 0;
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v39 = v25;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    id v26 = v44;
    swift_bridgeObjectRetain();
    uint64_t v39 = 0;
  }
  uint64_t v27 = *(void *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_scopedRRData);
  uint64_t v42 = v3;
  uint64_t v28 = (uint64_t)v11;
  if (v27)
  {
    uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;
  }
  else
  {
    uint64_t v29 = 0;
    unint64_t v31 = 0xF000000000000000;
  }
  uint64_t v32 = v40;
  char v33 = *(unsigned char *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_invokedByPeerToPeerEORR);
  Swift::String v34 = *(void **)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_proxiedRequestContext);
  *a1 = v41;
  a1[1] = v13;
  a1[2] = v32;
  a1[3] = v14;
  Swift::String v35 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v28, (uint64_t)a1 + v35[6], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)((char *)a1 + v35[7]) = v44;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v43, (uint64_t)a1 + v35[8], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)((char *)a1 + v35[9]) = v39;
  Swift::String v36 = (void *)((char *)a1 + v35[12]);
  *Swift::String v36 = v29;
  v36[1] = v31;
  *((unsigned char *)a1 + v35[10]) = v33;
  *(void *)((char *)a1 + v35[11]) = v34;
  return v34;
}

unint64_t ConversationTurnDataXPC.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x75716552746F6F72;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x6B736154776F6C66;
      break;
    case 5:
      unint64_t result = 0x52526465706F6373;
      break;
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0x496E6F6973736573;
      break;
    default:
      return result;
  }
  return result;
}

id ConversationTurnDataXPC.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ConversationTurnDataXPC.init(coder:)(a1);
}

id ConversationTurnDataXPC.init(coder:)(void *a1)
{
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v3 = v1;
  uint64_t v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v4)
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1B9C64000, v23, v24, "Error decoding ConversationTurnDataXPC: executionRequestId not present", v25, 2u);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }

    goto LABEL_23;
  }
  Swift::String v5 = (void *)v4;
  Swift::String v35 = NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSUUID);
  uint64_t v6 = NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for RequestContextData(0);
  uint64_t v7 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v7)
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_1B9C64000, v27, v28, "Error decoding ConversationTurnDataXPC: requestContextData not present", v29, 2u);
      MEMORY[0x1BA9E48C0](v29, -1, -1);

      a1 = v35;
    }
    else
    {

      a1 = v6;
    }
LABEL_23:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v34 = v7;
  uint64_t v33 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v33)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    Swift::String v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1B9C64000, v9, v10, "No conversation logging ID found when decoding ConversationTurnData", v11, 2u);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }
  }
  type metadata accessor for FlowTaskXPC(0);
  uint64_t v32 = NSCoder.decodeObject<A>(of:forKey:)();
  uint64_t v12 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000017, 0x80000001BA060F10);
  char v13 = objc_msgSend(a1, sel_decodeBoolForKey_, v12);

  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  uint64_t v14 = NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for ProxiedRequestContext(0);
  uint64_t v15 = NSCoder.decodeObject<A>(of:forKey:)();
  swift_getObjectType();

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  if (v35)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  id v30 = specialized ConversationTurnDataXPC.__allocating_init(executionRequestId:rootRequestId:sessionId:requestContextData:conversationLoggingId:flowTask:scopedRRData:invokedByPeerToPeerEORR:proxiedRequestContext:)(v16, v18, v19, v21, (uint64_t)v6, v34, v33, v32, v14, v13, v15);

  swift_deallocPartialClassInstance();
  return v30;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationTurnDataXPC.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance ConversationTurnDataXPC.CodingKeys(a1, a2, a3, a4, (uint64_t (*)(uint64_t))ConversationTurnDataXPC.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationTurnDataXPC.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance ConversationTurnDataXPC.CodingKeys(a1, a2, (void (*)(uint64_t))ConversationTurnDataXPC.CodingKeys.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationTurnDataXPC.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance ConversationTurnDataXPC.CodingKeys(a1, a2, a3, (void (*)(void))ConversationTurnDataXPC.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationTurnDataXPC.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationTurnDataXPC.CodingKeys(a1, a2, a3, (void (*)(uint64_t))ConversationTurnDataXPC.CodingKeys.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationTurnDataXPC.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ConversationTurnDataXPC.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationTurnDataXPC.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ConversationTurnDataXPC.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void ConversationTurnDataXPC.init()()
{
}

id ConversationTurnDataXPC.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationTurnDataXPC();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance ConversationTurnDataXPC()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

char *ProxiedRequestContext.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static ProxiedRequestContext.supportsSecureCoding;
}

uint64_t static ProxiedRequestContext.supportsSecureCoding.getter()
{
  return static ProxiedRequestContext.supportsSecureCoding;
}

uint64_t static ProxiedRequestContext.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static ProxiedRequestContext.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ProxiedRequestContext.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ProxiedRequestContext.aceId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId);
}

uint64_t ProxiedRequestContext.refId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId);
}

uint64_t ProxiedRequestContext.interactionType.getter@<X0>(uint64_t a1@<X8>)
{
  return ProxiedRequestContext.interactionType.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType, MEMORY[0x1E4FA5250], a1);
}

uint64_t ProxiedRequestContext.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  return ProxiedRequestContext.interactionType.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin, MEMORY[0x1E4FA51A0], a1);
}

uint64_t ProxiedRequestContext.interactionType.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = a2(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

void *ProxiedRequestContext.aceMeCard.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard);
  id v2 = v1;
  return v1;
}

uint64_t ProxiedRequestContext.sessionHandoffContinuityId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId);
}

uint64_t ProxiedRequestContext.isMultiUserEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled);
}

uint64_t ProxiedRequestContext.requiresConditionalMultiUserGrounding.getter()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_requiresConditionalMultiUserGrounding);
}

uint64_t ProxiedRequestContext.isEyesFree.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree);
}

uint64_t ProxiedRequestContext.isVoiceTriggerEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled);
}

uint64_t ProxiedRequestContext.isTextToSpeechEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled);
}

uint64_t ProxiedRequestContext.isDirectAction.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction);
}

uint64_t ProxiedRequestContext.interactionId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ProxiedRequestContext.bargeInContext.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext, a1, &demangling cache variable for type metadata for BargeInContext?);
}

void *ProxiedRequestContext.aceRemoteExecution.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution);
  id v2 = v1;
  return v1;
}

uint64_t ProxiedRequestContext.resultCandidateId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId);
  swift_bridgeObjectRetain();
  return v1;
}

id ProxiedRequestContext.__allocating_init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, long long a16, long long a17, uint64_t a18, uint64_t a19)
{
  id v20 = objc_allocWithZone(v19);
  return ProxiedRequestContext.init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, *((uint64_t *)&a16 + 1), a17, *((uint64_t *)&a17 + 1),
           a18,
           a19);
}

id ProxiedRequestContext.init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  os_log_type_t v28 = &v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId];
  *os_log_type_t v28 = a1;
  v28[1] = a2;
  uint64_t v29 = &v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId];
  void *v29 = a3;
  v29[1] = a4;
  id v30 = &v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType];
  uint64_t v31 = type metadata accessor for InteractionType();
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v30, a5, v31);
  uint64_t v33 = &v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin];
  uint64_t v34 = type metadata accessor for InputOrigin();
  uint64_t v35 = *(void *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v33, a6, v34);
  *(void *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard] = a7;
  Swift::String v36 = &v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId];
  *Swift::String v36 = a8;
  v36[1] = a9;
  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled] = a10;
  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_requiresConditionalMultiUserGrounding] = a11;
  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree] = a12;
  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled] = a13;
  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled] = a14;
  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction] = a15;
  unint64_t v37 = &v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId];
  *unint64_t v37 = a16;
  v37[1] = a17;
  outlined init with copy of ReferenceResolutionClientProtocol?(a18, (uint64_t)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext], &demangling cache variable for type metadata for BargeInContext?);
  *(void *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution] = a19;
  uint64_t v38 = &v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId];
  *uint64_t v38 = a20;
  v38[1] = a21;
  v45.receiver = v21;
  v45.super_class = ObjectType;
  id v39 = objc_msgSendSuper2(&v45, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(a18, &demangling cache variable for type metadata for BargeInContext?);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(a6, v34);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a5, v31);
  return v39;
}

unint64_t ProxiedRequestContext.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x6449656361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6449666572;
      break;
    case 2:
    case 12:
      unint64_t result = 0x7463617265746E69;
      break;
    case 3:
      unint64_t result = 0x69724F7475706E69;
      break;
    case 4:
      unint64_t result = 0x726143654D656361;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
    case 14:
    case 15:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0xD000000000000025;
      break;
    case 8:
      unint64_t result = 0x7246736579457369;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    case 11:
      unint64_t result = 0x7463657269447369;
      break;
    case 13:
      unint64_t result = 0x4D6E496567726162;
      break;
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

id ProxiedRequestContext.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ProxiedRequestContext.init(coder:)(a1);
}

id ProxiedRequestContext.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v102 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BargeInMode();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v100 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v101 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for InputOrigin();
  uint64_t v103 = *(void *)(v12 - 8);
  uint64_t v104 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for InteractionType();
  uint64_t v108 = *(void *)(v18 - 8);
  uint64_t v109 = v18;
  MEMORY[0x1F4188790](v18);
  id v20 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  uint64_t v21 = v1;
  uint64_t v22 = a1;
  uint64_t v23 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v23)
  {
    os_log_type_t v24 = (void *)v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v27 = 0;
  }
  os_log_type_t v28 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId];
  *os_log_type_t v28 = v25;
  v28[1] = v27;
  uint64_t v105 = v28;
  uint64_t v29 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v29)
  {
    id v30 = (void *)v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v34 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId];
  uint64_t *v34 = v31;
  v34[1] = v33;
  uint64_t v106 = v34;
  uint64_t v35 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v35) {
    goto LABEL_10;
  }
  Swift::String v36 = (void *)v35;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  InteractionType.init(rawValue:)();
  uint64_t v37 = v108;
  uint64_t v38 = v109;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v17, 1, v109) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, &demangling cache variable for type metadata for InteractionType?);
LABEL_10:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    BOOL v42 = os_log_type_enabled(v40, v41);
    uint64_t v38 = v109;
    if (!v42)
    {
      int v44 = 0;
      int v45 = 0;
      int v46 = 0;
      goto LABEL_23;
    }
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl(&dword_1B9C64000, v40, v41, "Unknown interactionType when decoding ProxiedRequestContext, returning nil", v43, 2u);
    int v44 = 0;
    int v45 = 0;
    int v46 = 0;
    goto LABEL_22;
  }
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v47(v20, v17, v38);
  v47(&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType], v20, v38);
  uint64_t v48 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v48) {
    goto LABEL_18;
  }
  id v49 = (void *)v48;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  InputOrigin.init(rawValue:)();
  uint64_t v50 = v103;
  uint64_t v51 = v104;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v11, 1, v104) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for InputOrigin?);
LABEL_18:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.executor);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v53))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_1B9C64000, v40, v53, "Unknown input origin when decoding ProxiedRequestContext, returning nil", v43, 2u);
      int v45 = 0;
      int v46 = 0;
      int v44 = 1;
LABEL_22:
      MEMORY[0x1BA9E48C0](v43, -1, -1);
      goto LABEL_23;
    }
    int v45 = 0;
    int v46 = 0;
    int v44 = 1;
    goto LABEL_23;
  }
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  v57(v14, v11, v51);
  v57(&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin], v14, v51);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  *(void *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard] = NSCoder.decodeObject<A>(of:forKey:)();
  uint64_t v58 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v58)
  {
    unint64_t v59 = (void *)v58;
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v62 = v61;
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v62 = 0;
  }
  uint64_t v63 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId];
  *uint64_t v63 = v60;
  v63[1] = v62;
  uint64_t v64 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA060FA0);
  unsigned __int8 v65 = objc_msgSend(v22, sel_decodeBoolForKey_, v64);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled] = v65;
  uint64_t v66 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000025, 0x80000001BA060FC0);
  unsigned __int8 v67 = objc_msgSend(v22, sel_decodeBoolForKey_, v66);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_requiresConditionalMultiUserGrounding] = v67;
  uint64_t v68 = (void *)MEMORY[0x1BA9E2DD0](0x7246736579457369, 0xEA00000000006565);
  unsigned __int8 v69 = objc_msgSend(v22, sel_decodeBoolForKey_, v68);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree] = v69;
  uint64_t v70 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA060FF0);
  unsigned __int8 v71 = objc_msgSend(v22, sel_decodeBoolForKey_, v70);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled] = v71;
  os_log_type_t v72 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA061010);
  LOBYTE(v70) = objc_msgSend(v22, sel_decodeBoolForKey_, v72);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled] = (_BYTE)v70;
  id v73 = (void *)MEMORY[0x1BA9E2DD0](0x7463657269447369, 0xEE006E6F69746341);
  LOBYTE(v70) = objc_msgSend(v22, sel_decodeBoolForKey_, v73);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction] = (_BYTE)v70;
  uint64_t v74 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v74)
  {
    uint64_t v75 = (void *)v74;
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v78 = v77;

    uint64_t v79 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId];
    *uint64_t v79 = v76;
    v79[1] = v78;
    uint64_t v80 = (void *)MEMORY[0x1BA9E2DD0](0x4D6E496567726162, 0xEB0000000065646FLL);
    LOBYTE(v76) = objc_msgSend(v22, sel_containsValueForKey_, v80);

    if (v76)
    {
      uint64_t v81 = (void *)MEMORY[0x1BA9E2DD0](0x4D6E496567726162, 0xEB0000000065646FLL);
      objc_msgSend(v22, sel_decodeIntegerForKey_, v81);

      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSDateInterval);
      uint64_t v82 = NSCoder.decodeObject<A>(of:forKey:)();
      BargeInMode.init(rawValue:)();
      if (v82)
      {
        uint64_t v83 = v102;
        static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v84 = type metadata accessor for DateInterval();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v83, 0, 1, v84);
      }
      else
      {
        uint64_t v89 = type metadata accessor for DateInterval();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v102, 1, 1, v89);
      }
      uint64_t v90 = (uint64_t)v101;
      BargeInContext.init(mode:approximatePreviousTTSInterval:)();

      uint64_t v91 = type metadata accessor for BargeInContext();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 0, 1, v91);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v90, (uint64_t)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext], &demangling cache variable for type metadata for BargeInContext?);
    }
    else
    {
      unsigned int v87 = &v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext];
      uint64_t v88 = type metadata accessor for BargeInContext();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 1, v88);
    }
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitRemoteExecution);
    *(void *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution] = NSCoder.decodeObject<A>(of:forKey:)();
    uint64_t v92 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v92)
    {
      uint64_t v93 = (void *)v92;
      uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v96 = v95;

      uint64_t v97 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId];
      *uint64_t v97 = v94;
      v97[1] = v96;

      v110.receiver = v21;
      v110.super_class = ObjectType;
      id v55 = objc_msgSendSuper2(&v110, sel_init);

      return v55;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.executor);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v99))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_1B9C64000, v40, v99, "Unknown resultCandidateId when decoding ProxiedRequestContext, returning nil", v43, 2u);
      int v44 = 1;
      int v45 = 1;
      int v46 = 1;
      goto LABEL_22;
    }
    int v44 = 1;
    int v45 = 1;
    int v46 = 1;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Logger.executor);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v86))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_1B9C64000, v40, v86, "Unknown interactionId when decoding ProxiedRequestContext, returning nil", v43, 2u);
      int v46 = 0;
      int v44 = 1;
      int v45 = 1;
      goto LABEL_22;
    }
    int v46 = 0;
    int v44 = 1;
    int v45 = 1;
  }
LABEL_23:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v44)
  {
    if (!v45) {
      goto LABEL_25;
    }
LABEL_30:
    (*(void (**)(unsigned char *, uint64_t))(v103 + 8))(&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin], v104);

    swift_bridgeObjectRelease();
    uint64_t v54 = v21;
    if (!v46) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  (*(void (**)(unsigned char *, uint64_t))(v108 + 8))(&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType], v38);
  if (v45) {
    goto LABEL_30;
  }
LABEL_25:
  uint64_t v54 = v21;
  if (v46)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext], &demangling cache variable for type metadata for BargeInContext?);
    uint64_t v54 = *(void **)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution];
  }
LABEL_27:

  swift_deallocPartialClassInstance();
  return 0;
}

SiriKitRuntime::ProxiedRequestContext::CodingKeys_optional __swiftcall ProxiedRequestContext.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::ProxiedRequestContext::CodingKeys_optional)17;
}

uint64_t ProxiedRequestContext.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t ProxiedRequestContext.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6449656361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6449666572;
      break;
    case 2:
    case 12:
      unint64_t result = 0x7463617265746E69;
      break;
    case 3:
      unint64_t result = 0x69724F7475706E69;
      break;
    case 4:
      unint64_t result = 0x726143654D656361;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
    case 14:
    case 15:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0xD000000000000025;
      break;
    case 8:
      unint64_t result = 0x7246736579457369;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    case 11:
      unint64_t result = 0x7463657269447369;
      break;
    case 13:
      unint64_t result = 0x4D6E496567726162;
      break;
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProxiedRequestContext.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance ConversationTurnDataXPC.CodingKeys(a1, a2, a3, a4, (uint64_t (*)(uint64_t))ProxiedRequestContext.CodingKeys.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationTurnDataXPC.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ProxiedRequestContext.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance ConversationTurnDataXPC.CodingKeys(a1, a2, (void (*)(uint64_t))ProxiedRequestContext.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationTurnDataXPC.CodingKeys(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ProxiedRequestContext.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance ConversationTurnDataXPC.CodingKeys(a1, a2, a3, (void (*)(void))ProxiedRequestContext.CodingKeys.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationTurnDataXPC.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ProxiedRequestContext.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationTurnDataXPC.CodingKeys(a1, a2, a3, (void (*)(uint64_t))ProxiedRequestContext.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationTurnDataXPC.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ProxiedRequestContext.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized ProxiedRequestContext.CodingKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ProxiedRequestContext.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ProxiedRequestContext.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ProxiedRequestContext.CodingKeys()
{
  return ProxiedRequestContext.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProxiedRequestContext.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized ProxiedRequestContext.CodingKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ProxiedRequestContext.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 17;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProxiedRequestContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProxiedRequestContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

id ProxiedRequestContext.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ProxiedRequestContext.init()()
{
}

id ProxiedRequestContext.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized ProxiedRequestContext.__allocating_init(rske:executionRequestId:resultCandidateId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v67 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for InputOrigin();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v73 = (uint64_t)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for InteractionType();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v72 = (uint64_t)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = objc_msgSend(a1, sel_aceId);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v20;
  }
  else
  {
    uint64_t v61 = 0;
    uint64_t v66 = 0;
  }
  id v21 = objc_msgSend(a1, sel_refId);
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v24;
    uint64_t v65 = v23;
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v65 = 0;
  }
  id v25 = objc_msgSend(a1, sel_interactionType);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    static SiriKitExecutorRunUtils.interactionTypeFrom(aceValue:)(v27, v29, v72);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v72, *MEMORY[0x1E4FA5240], v15);
  }
  id v30 = objc_msgSend(a1, sel_inputOrigin);
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    static SiriKitExecutorRunUtils.inputOriginFrom(aceValue:)(v32, v34, v73);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v73, *MEMORY[0x1E4FA5148], v12);
  }
  id v35 = objc_msgSend(a1, sel_identifiedUserMeCard);
  id v36 = objc_msgSend(a1, sel_sessionHandOffContinuityID);
  uint64_t v60 = a2;
  uint64_t v71 = (uint64_t)v35;
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = a3;
    uint64_t v39 = a5;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v62 = v41;
    uint64_t v63 = v40;
  }
  else
  {
    uint64_t v38 = a3;
    uint64_t v39 = a5;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
  }
  unsigned int v42 = objc_msgSend(a1, sel_multiUser);
  unsigned int v43 = objc_msgSend(a1, sel_requiresConditionalMultiUserGrounding);
  char v44 = objc_msgSend(a1, sel_eyesFree);
  char v45 = objc_msgSend(a1, sel_voiceTriggerEnabled);
  char v46 = objc_msgSend(a1, sel_textToSpeechEnabled);
  unsigned int v68 = objc_msgSend(a1, sel_directAction);
  id v47 = objc_msgSend(a1, sel_siriKitMetrics);
  unsigned int v69 = v43;
  unsigned int v70 = v42;
  if (!v47) {
    goto LABEL_20;
  }
  uint64_t v48 = v47;
  uint64_t v49 = a4;
  id v50 = objc_msgSend(v47, sel_interactionId);

  if (!v50)
  {
    a4 = v49;
LABEL_20:
    uint64_t v51 = v60;
    goto LABEL_21;
  }
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;
  swift_bridgeObjectRelease();

  uint64_t v38 = v53;
  a4 = v49;
LABEL_21:
  uint64_t v54 = v67;
  uint64_t v55 = v61;
  static SiriKitExecutorRunUtils.bargeInContextFrom(command:)(a1, v67);
  id v56 = objc_msgSend(a1, sel_remoteExecution);
  id v57 = objc_allocWithZone((Class)type metadata accessor for ProxiedRequestContext(0));
  return ProxiedRequestContext.init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)(v55, v66, v65, v64, v72, v73, v71, v63, v62, v70, v69, v44, v45, v46, v68, v51, v38, v54, (uint64_t)v56,
           a4,
           v39);
}

unint64_t lazy protocol witness table accessor for type DefaultMeCardProxy and conformance DefaultMeCardProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy;
  if (!lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy)
  {
    type metadata accessor for DefaultMeCardProxy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy);
  }
  return result;
}

id specialized ConversationTurnDataXPC.__allocating_init(executionRequestId:rootRequestId:sessionId:requestContextData:conversationLoggingId:flowTask:scopedRRData:invokedByPeerToPeerEORR:proxiedRequestContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  id v18 = (objc_class *)type metadata accessor for ConversationTurnDataXPC();
  uint64_t v19 = objc_allocWithZone(v18);
  uint64_t v20 = &v19[OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId];
  *uint64_t v20 = a1;
  v20[1] = a2;
  id v21 = &v19[OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId];
  *id v21 = a3;
  v21[1] = a4;
  *(void *)&v19[OBJC_IVAR___SKRConversationTurnDataXPC_requestContextData] = a6;
  *(void *)&v19[OBJC_IVAR___SKRConversationTurnDataXPC_conversationLoggingId] = a7;
  *(void *)&v19[OBJC_IVAR___SKRConversationTurnDataXPC_flowTask] = a8;
  *(void *)&v19[OBJC_IVAR___SKRConversationTurnDataXPC_scopedRRData] = a9;
  v19[OBJC_IVAR___SKRConversationTurnDataXPC_invokedByPeerToPeerEORR] = a10;
  *(void *)&v19[OBJC_IVAR___SKRConversationTurnDataXPC_proxiedRequestContext] = a11;
  *(void *)&v19[OBJC_IVAR___SKRConversationTurnDataXPC_sessionId] = a5;
  v24.receiver = v19;
  v24.super_class = v18;
  return objc_msgSendSuper2(&v24, sel_init);
}

unint64_t specialized ConversationTurnDataXPC.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationTurnDataXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t specialized ProxiedRequestContext.CodingKeys.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11) {
    return 17;
  }
  else {
    return v0;
  }
}

unint64_t lazy protocol witness table accessor for type ConversationTurnDataXPC.CodingKeys and conformance ConversationTurnDataXPC.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationTurnDataXPC.CodingKeys and conformance ConversationTurnDataXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationTurnDataXPC.CodingKeys and conformance ConversationTurnDataXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationTurnDataXPC.CodingKeys and conformance ConversationTurnDataXPC.CodingKeys);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in ConversationTurnDataXPC()
{
  return &protocol witness table for RemoteConversationTurnData;
}

unint64_t lazy protocol witness table accessor for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for RemoteConversationTurnData(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    uint64_t v19 = *(void **)((char *)a2 + v17);
    *(void *)((char *)v4 + v17) = v19;
    uint64_t v20 = (char *)v4 + v18;
    id v21 = (char *)a2 + v18;
    id v22 = v19;
    if (v14(v21, 1, v12))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
    }
    uint64_t v24 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *((unsigned char *)v4 + v24) = *((unsigned char *)a2 + v24);
    uint64_t v25 = a3[11];
    uint64_t v26 = a3[12];
    uint64_t v27 = *(void **)((char *)a2 + v25);
    *(void *)((char *)v4 + v25) = v27;
    uint64_t v28 = (char *)v4 + v26;
    uint64_t v29 = (_OWORD *)((char *)a2 + v26);
    unint64_t v30 = *(void *)((char *)a2 + v26 + 8);
    swift_retain();
    id v31 = v27;
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v28 = *v29;
    }
    else
    {
      uint64_t v32 = *(void *)v29;
      outlined copy of Data._Representation(v32, v30);
      *(void *)uint64_t v28 = v32;
      *((void *)v28 + 1) = v30;
    }
  }
  return v4;
}

char *assignWithCopy for RemoteConversationTurnData(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = *(void **)((char *)a2 + v15);
  uint64_t v17 = *(void **)&a1[v15];
  *(void *)&a1[v15] = v16;
  id v18 = v16;

  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  id v21 = (char *)a2 + v19;
  int v22 = v11(&a1[v19], 1, v9);
  int v23 = v11(v21, 1, v9);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v20, v21, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
LABEL_12:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v20, v21, v9);
LABEL_13:
  *(void *)&a1[a3[9]] = *(void *)((char *)a2 + a3[9]);
  swift_retain();
  swift_release();
  a1[a3[10]] = *((unsigned char *)a2 + a3[10]);
  uint64_t v25 = a3[11];
  uint64_t v26 = *(void **)&a1[v25];
  uint64_t v27 = *(void **)((char *)a2 + v25);
  *(void *)&a1[v25] = v27;
  id v28 = v27;

  uint64_t v29 = a3[12];
  unint64_t v30 = (uint64_t *)&a1[v29];
  id v31 = (void *)((char *)a2 + v29);
  unint64_t v32 = *(void *)((char *)a2 + v29 + 8);
  if (*(void *)&a1[v29 + 8] >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      uint64_t v34 = *v31;
      outlined copy of Data._Representation(v34, v32);
      uint64_t v35 = *v30;
      unint64_t v36 = v30[1];
      *unint64_t v30 = v34;
      v30[1] = v32;
      outlined consume of Data._Representation(v35, v36);
      return a1;
    }
    outlined destroy of Data((uint64_t)v30);
    goto LABEL_18;
  }
  if (v32 >> 60 == 15)
  {
LABEL_18:
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
    return a1;
  }
  uint64_t v33 = *v31;
  outlined copy of Data._Representation(v33, v32);
  *unint64_t v30 = v33;
  v30[1] = v32;
  return a1;
}

_OWORD *initializeWithTake for RemoteConversationTurnData(_OWORD *a1, char *a2, int *a3)
{
  long long v6 = *((_OWORD *)a2 + 1);
  *a1 = *(_OWORD *)a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = &a2[v14];
  if (v12(&a2[v14], 1, v10))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v18 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)&a2[a3[9]];
  *((unsigned char *)a1 + v18) = a2[v18];
  uint64_t v19 = a3[12];
  *(void *)((char *)a1 + a3[11]) = *(void *)&a2[a3[11]];
  *(_OWORD *)((char *)a1 + v19) = *(_OWORD *)&a2[v19];
  return a1;
}

char *assignWithTake for RemoteConversationTurnData(char *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = a3[7];
  uint64_t v18 = *(void **)&a1[v17];
  *(void *)&a1[v17] = *(void *)((char *)a2 + v17);

  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  id v21 = (char *)a2 + v19;
  int v22 = v13(&a1[v19], 1, v11);
  int v23 = v13(v21, 1, v11);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v21, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
LABEL_12:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v20, v21, v11);
LABEL_13:
  *(void *)&a1[a3[9]] = *(void *)((char *)a2 + a3[9]);
  swift_release();
  uint64_t v25 = a3[11];
  a1[a3[10]] = *((unsigned char *)a2 + a3[10]);
  uint64_t v26 = *(void **)&a1[v25];
  *(void *)&a1[v25] = *(void *)((char *)a2 + v25);

  uint64_t v27 = a3[12];
  id v28 = (uint64_t *)&a1[v27];
  uint64_t v29 = (void *)((char *)a2 + v27);
  unint64_t v30 = *(void *)&a1[v27 + 8];
  if (v30 >> 60 != 15)
  {
    unint64_t v31 = v29[1];
    if (v31 >> 60 != 15)
    {
      uint64_t v32 = *v28;
      *id v28 = *v29;
      v28[1] = v31;
      outlined consume of Data._Representation(v32, v30);
      return a1;
    }
    outlined destroy of Data((uint64_t)v28);
  }
  *(_OWORD *)id v28 = *(_OWORD *)v29;
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteConversationTurnData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9FA141C);
}

uint64_t sub_1B9FA141C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for RemoteConversationTurnData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9FA14E4);
}

uint64_t sub_1B9FA14E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for RemoteConversationTurnData()
{
  _s10Foundation4UUIDVSgMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t method lookup function for ConversationTurnDataXPC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationTurnDataXPC);
}

uint64_t dispatch thunk of ConversationTurnDataXPC.swiftRepresentation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationTurnDataXPC.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationTurnDataXPC.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

unsigned char *storeEnumTagSinglePayload for ConversationTurnDataXPC.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9FA17F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationTurnDataXPC.CodingKeys()
{
  return &type metadata for ConversationTurnDataXPC.CodingKeys;
}

uint64_t ObjC metadata update function for ProxiedRequestContext()
{
  return type metadata accessor for ProxiedRequestContext(0);
}

void type metadata completion function for ProxiedRequestContext()
{
  type metadata accessor for InteractionType();
  if (v0 <= 0x3F)
  {
    type metadata accessor for InputOrigin();
    if (v1 <= 0x3F)
    {
      _s10Foundation4UUIDVSgMaTm_1(319, &lazy cache variable for type metadata for BargeInContext?, MEMORY[0x1E4FA5208]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for ProxiedRequestContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ProxiedRequestContext);
}

uint64_t dispatch thunk of ProxiedRequestContext.__allocating_init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)()
{
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 208);
  return v2();
}

uint64_t dispatch thunk of ProxiedRequestContext.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

void _s10Foundation4UUIDVSgMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for ProxiedRequestContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ProxiedRequestContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *unint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9FA1BE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxiedRequestContext.CodingKeys()
{
  return &type metadata for ProxiedRequestContext.CodingKeys;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ConversationCanHandleResult) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t SendableRemoteConversationXPCWrapper.__allocating_init(wrapping:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t SendableRemoteConversationXPCWrapper.wrapped.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SendableRemoteConversationXPCWrapper.init(wrapping:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized SendableRemoteConversationXPCWrapper.init(wrapping:)(a1, v1);
}

void SendableRemoteConversationXPCWrapper.warmup(refId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = *(void **)(v4 + 16);
  int v8 = (void *)MEMORY[0x1BA9E2DD0]();
  void v10[4] = a3;
  v10[5] = a4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  void v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v10[3] = &block_descriptor_20;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_warmupWithRefId_reply_, v8, v9);
  _Block_release(v9);
}

void SendableRemoteConversationXPCWrapper.canHandle(inputData:rcId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void **)(v6 + 16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v13 = (void *)MEMORY[0x1BA9E2DD0](a3, a4);
  v15[4] = a5;
  v15[5] = a6;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  v15[3] = &block_descriptor_3_2;
  int v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  objc_msgSend(v11, sel_canHandleWithInputData_rcId_reply_, isa, v13, v14);
  _Block_release(v14);
}

void SendableRemoteConversationXPCWrapper.cancel(reply:)(uint64_t a1, uint64_t a2)
{
}

void SendableRemoteConversationXPCWrapper.reset(reply:)(uint64_t a1, uint64_t a2)
{
}

void SendableRemoteConversationXPCWrapper.ensureReady(reply:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  v5[3] = &block_descriptor_12_0;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_ensureReadyWithReply_, v4);
  _Block_release(v4);
}

void SendableRemoteConversationXPCWrapper.startTurn(turnData:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = *(void **)(v4 + 16);
  v9[4] = a3;
  v9[5] = a4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  v9[3] = &block_descriptor_15;
  int v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_startTurnWithTurnData_bridge_reply_, a1, a2, v8);
  _Block_release(v8);
}

void SendableRemoteConversationXPCWrapper.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void **)(v5 + 16);
  uint64_t v10 = (void *)MEMORY[0x1BA9E2DD0]();
  v12[4] = a4;
  v12[5] = a5;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  long long v12[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v12[3] = &block_descriptor_18;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_startTurnFromCacheWithExecutionRequestId_bridge_reply_, v10, a3, v11);
  _Block_release(v11);
}

void SendableRemoteConversationXPCWrapper.accept(inputData:speechData:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void **)(v5 + 16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v12[4] = a4;
  v12[5] = a5;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  long long v12[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  v12[3] = &block_descriptor_21;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_acceptWithInputData_speechData_reply_, isa, a3, v11);
  _Block_release(v11);
}

void SendableRemoteConversationXPCWrapper.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(void **)(v4 + 16);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v11[4] = a3;
  v11[5] = a4;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  v11[3] = &block_descriptor_24;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_acceptInitialInputWithInputIdentifier_speechData_reply_, isa, a2, v10);
  _Block_release(v10);
}

void SendableRemoteConversationXPCWrapper.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(v3 + 16);
  v7[4] = a2;
  v7[5] = a3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  long long v7[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  v7[3] = &block_descriptor_27;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_prepareWithBridge_reply_, a1, v6);
  _Block_release(v6);
}

void SendableRemoteConversationXPCWrapper.paraphrase(reply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  v5[3] = &block_descriptor_30_0;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_paraphraseWithReply_, v4);
  _Block_release(v4);
}

void SendableRemoteConversationXPCWrapper.commit(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(v3 + 16);
  v7[4] = a2;
  v7[5] = a3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  long long v7[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  v7[3] = &block_descriptor_33;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_commitWithBridge_reply_, a1, v6);
  _Block_release(v6);
}

void SendableRemoteConversationXPCWrapper.drainAsyncWork(reply:)(uint64_t a1, uint64_t a2)
{
}

void SendableRemoteConversationXPCWrapper.cancel(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v6 = *(void **)(v4 + 16);
  v8[4] = a1;
  v8[5] = a2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  _OWORD v8[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v8[3] = a3;
  BOOL v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, *a4, v7);
  _Block_release(v7);
}

void SendableRemoteConversationXPCWrapper.isEmpty(reply:)(uint64_t a1, uint64_t a2)
{
}

void SendableRemoteConversationXPCWrapper.isCorrectable(reply:)(uint64_t a1, uint64_t a2)
{
}

void SendableRemoteConversationXPCWrapper.isEmpty(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v6 = *(void **)(v4 + 16);
  v8[4] = a1;
  v8[5] = a2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  _OWORD v8[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v8[3] = a3;
  BOOL v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, *a4, v7);
  _Block_release(v7);
}

void SendableRemoteConversationXPCWrapper.flexibleExecutionSupportOptions(reply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  v5[3] = &block_descriptor_45;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_flexibleExecutionSupportOptionsWithReply_, v4);
  _Block_release(v4);
}

uint64_t SendableRemoteConversationXPCWrapper.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

id one-time initialization function for remoteConversationXPCInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F1398AF0);
  if (one-time initialization token for executionBridgeXPCInterface != -1) {
    swift_once();
  }
  uint64_t v1 = static ServiceBridgeHelper.executionBridgeXPCInterface;
  objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, static ServiceBridgeHelper.executionBridgeXPCInterface, sel_startTurnWithTurnData_bridge_reply_, 1, 0);
  objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, v1, sel_startTurnFromCacheWithExecutionRequestId_bridge_reply_, 1, 0);
  objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, v1, sel_prepareWithBridge_reply_, 0, 0);
  id result = objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, v1, sel_commitWithBridge_reply_, 0, 0);
  static RemoteConversationXPCHelper.remoteConversationXPCInterface = (uint64_t)v0;
  return result;
}

id static RemoteConversationXPCHelper.remoteConversationXPCInterface.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationXPCInterface, (void **)&static RemoteConversationXPCHelper.remoteConversationXPCInterface);
}

id one-time initialization function for remoteConversationHostXPCInterface()
{
  id result = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F1398D60);
  static RemoteConversationXPCHelper.remoteConversationHostXPCInterface = (uint64_t)result;
  return result;
}

id static RemoteConversationXPCHelper.remoteConversationHostXPCInterface.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationHostXPCInterface, (void **)&static RemoteConversationXPCHelper.remoteConversationHostXPCInterface);
}

uint64_t specialized SendableRemoteConversationXPCWrapper.init(wrapping:)(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = a1;
  return a2;
}

uint64_t method lookup function for SendableRemoteConversationXPCWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SendableRemoteConversationXPCWrapper);
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.__allocating_init(wrapping:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.warmup(refId:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.canHandle(inputData:rcId:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.cancel(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.reset(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.ensureReady(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.startTurn(turnData:bridge:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.startTurnFromCache(executionRequestId:bridge:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.accept(inputData:speechData:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.acceptInitialInput(inputIdentifier:speechData:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.prepare(bridge:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.paraphrase(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.commit(bridge:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.drainAsyncWork(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.isEmpty(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.isCorrectable(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.flexibleExecutionSupportOptions(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

ValueMetadata *type metadata accessor for RemoteConversationXPCHelper()
{
  return &type metadata for RemoteConversationXPCHelper;
}

uint64_t sub_1B9FA3098()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t _s14SiriKitRuntime27ConversationCanHandleResultCIeyBhy_ACIeghg_TRTA_0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t RemoteFlowPluginBundleConversationHandler.bundlePath.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteFlowPluginBundleConversationHandler.sharedFlowPluginServiceClient.getter()
{
  return swift_retain();
}

uint64_t RemoteFlowPluginBundleConversationHandler.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteFlowPluginBundleConversationHandler.affinityScorer.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, a1);
}

uint64_t RemoteFlowPluginBundleConversationHandler.remoteConversationClient.getter()
{
  return swift_retain();
}

uint64_t RemoteFlowPluginBundleConversationHandler.remoteConversationClient.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 96) = a1;
  return swift_release();
}

uint64_t (*RemoteFlowPluginBundleConversationHandler.remoteConversationClient.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RemoteFlowPluginBundleConversationHandler.loadRemoteConversationTask.getter()
{
  return swift_retain();
}

uint64_t RemoteFlowPluginBundleConversationHandler.loadRemoteConversationTask.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 104) = a1;
  return swift_release();
}

uint64_t (*RemoteFlowPluginBundleConversationHandler.loadRemoteConversationTask.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void RemoteFlowPluginBundleConversationHandler.__allocating_init()()
{
}

void RemoteFlowPluginBundleConversationHandler.init()()
{
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000065, 0x80000001BA06BE10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/ConversationHandler/RemoteFlowPluginBundleConversationHandler.swift", 136, 2, 26);
  __break(1u);
}

void *RemoteFlowPluginBundleConversationHandler.__allocating_init(bundleId:bundlePath:affinityScorer:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[12] = 0;
  v12[13] = 0;
  long long v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v12 + 7));
  void v12[6] = a6;
  return v12;
}

void *RemoteFlowPluginBundleConversationHandler.init(bundleId:bundlePath:affinityScorer:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  v6[12] = 0;
  v6[13] = 0;
  void v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v6 + 7));
  v6[6] = a6;
  return v6;
}

uint64_t closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  v7[11] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  v7[16] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:), v8, 0);
}

uint64_t closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)()
{
  uint64_t v1 = (void *)v0[12];
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[17] = v6;
  void *v6 = v0;
  v6[1] = closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[15];
  uint64_t v9 = v0[13];
  return SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(v3, v4, v5, v2, v9, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 144);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v3 = *(void *)(v0 + 96);
    swift_beginAccess();
    *(void *)(v3 + 96) = v2;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(void *)(v3 + 104) = 0;
    swift_release();
  }
  **(void **)(v0 + 88) = *(void *)(v0 + 144);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 144) = a1;
  *(void *)(v4 + 152) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 128);
  if (v1) {
    uint64_t v6 = closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
  }
  else {
    uint64_t v6 = closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t RemoteFlowPluginBundleConversationHandler.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  swift_release();
  return v0;
}

void protocol witness for Plugin.init() in conformance RemoteFlowPluginBundleConversationHandler()
{
}

uint64_t protocol witness for Identifiable.id.getter in conformance RemoteFlowPluginBundleConversationHandler@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *a1 = *(void *)(*(void *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B9FA3FA0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t instantiation function for generic protocol witness table for RemoteFlowPluginBundleConversationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, a2, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for RemoteFlowPluginBundleConversationHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteFlowPluginBundleConversationHandler);
}

uint64_t dispatch thunk of RemoteFlowPluginBundleConversationHandler.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of RemoteFlowPluginBundleConversationHandler.__allocating_init(bundleId:bundlePath:affinityScorer:sharedFlowPluginServiceClient:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1B9FA4070()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t RemoteFlowPluginPackage.__allocating_init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t FlowPluginPackageFinder.__allocating_init(wrapping:sharedFlowPluginServiceClient:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(a1, v4 + 16);
  *(void *)(v4 + 56) = a2;
  return v4;
}

uint64_t RemoteFlowPluginPackage.bundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteFlowPluginPackage.sharedFlowPluginServiceClient.getter()
{
  return swift_retain();
}

uint64_t RemoteFlowPluginPackage.supportedTopics.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RemoteFlowPluginPackage.bundlePath.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteFlowPluginPackage.__allocating_init(bundle:sharedFlowPluginServiceClient:)(void *a1, uint64_t a2)
{
  uint64_t v3 = specialized RemoteFlowPluginPackage.__allocating_init(bundle:sharedFlowPluginServiceClient:)(a1, a2);

  return v3;
}

uint64_t RemoteFlowPluginPackage.__allocating_init(path:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone(MEMORY[0x1E4F28B50]);
  uint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithPath_, v7);

  if (v8)
  {
    id v9 = objc_msgSend(v8, sel_infoDictionary);
    if (v9)
    {
      uint64_t v10 = v9;
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    }
    uint64_t v12 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = NSBundle.packageId.getter();
    int v15 = v14;
    id v16 = objc_msgSend(v8, sel_bundlePath);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    uint64_t v11 = swift_allocObject();
    RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v13, v15, v17, v19, v12, a3, (uint64_t)v21);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v11;
}

void *RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v7[2] = a1;
  v7[3] = a2;
  void v7[6] = a3;
  v7[7] = a4;
  v7[4] = a6;
  v7[5] = a5;
  outlined init with copy of AffinityScorer?(a7, (uint64_t)&v16);
  if (v17)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a7, &demangling cache variable for type metadata for AffinityScorer?);
    outlined init with take of ReferenceResolutionClientProtocol(&v16, (uint64_t)v18);
  }
  else
  {
    *(void *)&v18[0] = 0;
    *((void *)&v18[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_retain();
    _StringGuts.grow(_:)(52);
    v11._uint64_t countAndFlagsBits = 0xD000000000000022;
    v11._object = (void *)0x80000001BA06BFE0;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001BA06C010;
    v13._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v13);
    long long v14 = v18[0];
    swift_bridgeObjectRetain();
    specialized logAction<A>(label:_:)(v14, *((unint64_t *)&v14 + 1), a1, (unint64_t)a2, (uint64_t)v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(a7, &demangling cache variable for type metadata for AffinityScorer?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v16, &demangling cache variable for type metadata for AffinityScorer?);
  }
  outlined init with take of ReferenceResolutionClientProtocol(v18, (uint64_t)(v7 + 8));
  return v7;
}

uint64_t closure #1 in implicit closure #1 in RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static AmbiguityFeatureFlags.forceEnabled;
  if (!*(void *)(static AmbiguityFeatureFlags.forceEnabled + 16)
    || (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(0), (v8 & 1) == 0))
  {
    void v21[3] = (uint64_t)&type metadata for AmbiguityFeatureFlags;
    void v21[4] = lazy protocol witness table accessor for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags();
    LOBYTE(v21[0]) = 0;
    char v14 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
    if ((v14 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_11:
    static AffinityScorerManager.affinityScorer(for:)(a1, a2, (uint64_t)v21);
    uint64_t v15 = type metadata accessor for AffinityScoringAdapter();
    a3[3] = v15;
    a3[4] = lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type AffinityScoringAdapter and conformance AffinityScoringAdapter, 255, (void (*)(uint64_t))type metadata accessor for AffinityScoringAdapter);
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a3);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v21, (uint64_t)boxed_opaque_existential_0 + *(int *)(v15 + 20));
    UUID.init()();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  }
  if (*(unsigned char *)(*(void *)(v6 + 56) + v7) == 1) {
    goto LABEL_11;
  }
LABEL_6:
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    Swift::String v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v21[0] = v13;
    *(_DWORD *)Swift::String v12 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v10, v11, "loadAffinityScorer Error loading affinity scorer for plugin %s, affinity scoring v2 is not enabled", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v18 = type metadata accessor for FixedAffinityScorer(0);
  uint64_t v19 = swift_allocObject();
  UUID.init()();
  uint64_t v20 = v19 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 0;
  a3[3] = v18;
  uint64_t result = lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, 255, (void (*)(uint64_t))type metadata accessor for FixedAffinityScorer);
  a3[4] = result;
  *a3 = v19;
  return result;
}

uint64_t static RemoteFlowPluginPackage.from(id:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](static RemoteFlowPluginPackage.from(id:sharedFlowPluginServiceClient:), 0, 0);
}

uint64_t static RemoteFlowPluginPackage.from(id:sharedFlowPluginServiceClient:)()
{
  id v21 = v0;
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)MEMORY[0x1BA9E2DD0](v1, v2);
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(self, sel_bundleWithIdentifier_, v3);

  if (v4)
  {
    swift_retain();
    id v5 = objc_msgSend(v4, sel_infoDictionary);
    if (v5)
    {
      uint64_t v6 = v5;
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    }
    uint64_t v8 = v0[4];
    uint64_t v9 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = NSBundle.packageId.getter();
    Swift::String v12 = v11;
    id v13 = objc_msgSend(v4, sel_bundlePath);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v7 = swift_allocObject();
    RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v10, v12, v14, v16, v9, v8, (uint64_t)v19);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v17 = (uint64_t (*)(uint64_t))v0[1];
  return v17(v7);
}

uint64_t RemoteFlowPluginPackage.isLoaded.getter()
{
  return 0;
}

uint64_t static RemoteFlowPluginPackage.packageFrom(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 16);
  uint64_t v9 = (os_unfair_lock_s *)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24));
  closure #1 in static RemoteFlowPluginPackage.packageFrom(_:)(v8, v27);
  os_unfair_lock_unlock(v9);
  uint64_t v10 = *(void *)&v27[0];
  if (*(void *)&v27[0])
  {
    id v11 = objc_allocWithZone(MEMORY[0x1E4F28B50]);
    swift_bridgeObjectRetain();
    swift_retain();
    Swift::String v12 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initWithPath_, v12);

    if (v13)
    {
      id v14 = objc_msgSend(v13, sel_infoDictionary);
      if (v14)
      {
        uint64_t v15 = v14;
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      }
      uint64_t v17 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
      swift_bridgeObjectRelease();
      uint64_t v18 = NSBundle.packageId.getter();
      uint64_t v20 = v19;
      id v21 = objc_msgSend(v13, sel_bundlePath);
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      uint64_t v28 = 0;
      memset(v27, 0, sizeof(v27));
      uint64_t v25 = swift_allocObject();
      RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v18, v20, v22, v24, v17, v10, (uint64_t)v27);

      *(void *)(a3 + 24) = v4;
      *(void *)(a3 + 32) = lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage, v26, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginPackage);
      uint64_t result = swift_release();
      *(void *)a3 = v25;
    }
    else
    {
      swift_release();
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return swift_release();
    }
  }
  else
  {
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000008CLL, 0x80000001BA06C030, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/ConversationHandler/RemoteFlowPluginPackage.swift", 118, 2, 102);
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static RemoteFlowPluginPackage.packageFrom(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

void *RemoteFlowPluginPackage.loadPlugin()()
{
  uint64_t v0 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, 255, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler);
  return v0;
}

uint64_t RemoteFlowPluginPackage.exposedCapabilities()()
{
  return swift_bridgeObjectRetain();
}

uint64_t RemoteFlowPluginPackage.get(capability:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, 255, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler);
  uint64_t result = swift_getObjectType();
  a1[3] = result;
  *a1 = v2;
  return result;
}

uint64_t RemoteFlowPluginPackage.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0x3A656C646E7562;
}

unint64_t RemoteFlowPluginPackage.affinityScore(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v67 = a1;
  uint64_t v65 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v65 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v65);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v57 - v7;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v62 = *(void *)(v9 - 8);
  uint64_t v63 = v9;
  MEMORY[0x1F4188790](v9);
  id v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OSSignposter();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v59 = v8;
  uint64_t v60 = v6;
  uint64_t v64 = v3;
  uint64_t v16 = __swift_project_value_buffer(v12, (uint64_t)static Signposter.executor);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v61 = v12;
  v17(v15, v16, v12);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v18 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  swift_retain();
  uint64_t v19 = (uint8_t *)swift_slowAlloc();
  uint64_t v20 = swift_slowAlloc();
  uint64_t v69 = v20;
  *(_DWORD *)uint64_t v19 = 136315138;
  uint64_t v22 = v2[2];
  unint64_t v21 = v2[3];
  swift_bridgeObjectRetain();
  uint64_t v57 = v22;
  uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v69);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  unint64_t v58 = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = OSSignposter.logHandle.getter();
  os_signpost_type_t v24 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B9C64000, v23, v24, v25, "RunAffinityScorer", "AffinityScorer=%s", v19, 0xCu);
  __swift_project_boxed_opaque_existential_1(v2 + 8, v2[11]);
  unint64_t v66 = AffinityScorer.score(for:)();
  LODWORD(v22) = v26 & 1;
  os_signpost_type_t v27 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v28 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B9C64000, v23, v27, v28, "RunAffinityScorer", "AffinityScorer=%s", v19, 0xCu);

  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v20, -1, -1);
  MEMORY[0x1BA9E48C0](v19, -1, -1);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v11, v63);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v61);
  int v29 = v22;
  if (v22)
  {
    uint64_t v31 = v64;
    uint64_t v30 = v65;
    uint64_t v32 = v67;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    uint64_t v34 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v60, v32, v30);
    swift_retain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v35, v36))
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v30);
      goto LABEL_17;
    }
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v69 = v38;
    *(_DWORD *)uint64_t v37 = 136315394;
    unint64_t v39 = v58;
    swift_bridgeObjectRetain();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v39, &v69);
    LODWORD(v67) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
    uint64_t v40 = v60;
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v30);
    _os_log_impl(&dword_1B9C64000, v35, v36, "[%s] Missing affinity for input %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    uint64_t v43 = v38;
  }
  else
  {
    uint64_t v45 = v64;
    uint64_t v44 = v65;
    uint64_t v46 = v67;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
    uint64_t v48 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v59, v46, v44);
    swift_retain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v35, v49))
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
      goto LABEL_17;
    }
    uint64_t v37 = swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    uint64_t v69 = v67;
    *(_DWORD *)uint64_t v37 = 136315650;
    unint64_t v50 = v58;
    swift_bridgeObjectRetain();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v50, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    LOBYTE(v68) = specialized Affinity.init(rawValue:)(v66);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Affinity?);
    uint64_t v51 = String.init<A>(describing:)();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 22) = 2080;
    lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
    _os_log_impl(&dword_1B9C64000, v35, v49, "[%s] Affinity: %s for input %s", (uint8_t *)v37, 0x20u);
    uint64_t v55 = v67;
    swift_arrayDestroy();
    uint64_t v43 = v55;
  }
  MEMORY[0x1BA9E48C0](v43, -1, -1);
  MEMORY[0x1BA9E48C0](v37, -1, -1);
LABEL_17:

  return v66;
}

uint64_t RemoteFlowPluginPackage.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  return v0;
}

uint64_t RemoteFlowPluginPackage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PluginPackage.configData.getter in conformance RemoteFlowPluginPackage()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for PluginCapabilityExposing.advertisedCapabilities() in conformance RemoteFlowPluginPackage()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for PluginCapabilityExposing.get(capability:) in conformance RemoteFlowPluginPackage@<X0>(void *a1@<X8>)
{
  uint64_t v2 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, 255, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler);
  uint64_t result = swift_getObjectType();
  a1[3] = result;
  *a1 = v2;
  return result;
}

uint64_t FlowPluginPackageFinder.wrapped.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t FlowPluginPackageFinder.sharedFlowPluginServiceClient.getter()
{
  return swift_retain();
}

uint64_t FlowPluginPackageFinder.init(wrapping:sharedFlowPluginServiceClient:)(long long *a1, uint64_t a2)
{
  outlined init with take of ReferenceResolutionClientProtocol(a1, v2 + 16);
  *(void *)(v2 + 56) = a2;
  return v2;
}

void *FlowPluginPackageFinder.findAllPackages()()
{
  uint64_t v1 = v0;
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v2 = dispatch thunk of PluginFinder.findAllPackages()();
  swift_retain();
  uint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t FlowPluginPackageFinder.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  return v0;
}

uint64_t FlowPluginPackageFinder.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();

  return swift_deallocClassInstance();
}

void *protocol witness for PluginFinder.findAllPackages() in conformance FlowPluginPackageFinder()
{
  uint64_t v1 = *v0;
  __swift_project_boxed_opaque_existential_1((void *)(*v0 + 16), *(void *)(*v0 + 40));
  uint64_t v2 = dispatch thunk of PluginFinder.findAllPackages()();
  swift_retain();
  uint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t specialized RemoteFlowPluginPackage.__allocating_init(bundle:sharedFlowPluginServiceClient:)(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(a1, sel_infoDictionary);
  if (v4)
  {
    uint64_t v5 = v4;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  uint64_t v6 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = NSBundle.packageId.getter();
  uint64_t v9 = v8;
  id v10 = objc_msgSend(a1, sel_bundlePath);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  type metadata accessor for RemoteFlowPluginPackage();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  uint64_t v14 = swift_allocObject();
  RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v7, v9, v11, v13, v6, a2, (uint64_t)v16);
  return v14;
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Decodable in RemoteFlowPluginPackage()
{
  return lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, 255, MEMORY[0x1E4FA1AB0]);
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Encodable in RemoteFlowPluginPackage()
{
  return lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, 255, MEMORY[0x1E4FA1AB0]);
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Hashable in RemoteFlowPluginPackage()
{
  return lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, 255, MEMORY[0x1E4FA1AB0]);
}

uint64_t method lookup function for RemoteFlowPluginPackage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RemoteFlowPluginPackage);
}

uint64_t dispatch thunk of RemoteFlowPluginPackage.__allocating_init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for FlowPluginPackageFinder()
{
  return self;
}

uint64_t method lookup function for FlowPluginPackageFinder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowPluginPackageFinder);
}

uint64_t dispatch thunk of FlowPluginPackageFinder.__allocating_init(wrapping:sharedFlowPluginServiceClient:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t result = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
  }
  return result;
}

unint64_t RepeatRecentDialogIntent.debugDescription.getter()
{
  return 0xD00000000000002ALL;
}

BOOL static RepeatRecentDialogIntent.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void RepeatRecentDialogIntent.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int RepeatRecentDialogIntent.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t specialized static RepeatRecentDialogIntent.fromParse(_:)(uint64_t a1)
{
  uint64_t v57 = type metadata accessor for UsoEntity_common_Interjection.DefinedValues();
  uint64_t v60 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v55 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Interjection.DefinedValues?, UsoEntity_common_Interjection.DefinedValues?));
  MEMORY[0x1F4188790](v58);
  uint64_t v62 = (uint64_t)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v56 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v61 = (uint64_t)&v53 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v59 = (uint64_t)&v53 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v63 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  uint64_t v65 = v13;
  MEMORY[0x1F4188790](v12);
  unint64_t v66 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  id v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Parse();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for USOParse();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  char v26 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, v19);
  if ((*(unsigned int (**)(char *, uint64_t))(v20 + 88))(v22, v19) != *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    return 3;
  }
  (*(void (**)(char *, uint64_t))(v20 + 96))(v22, v19);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  uint64_t v27 = USOParse.userParse.getter();
  uint64_t v28 = MEMORY[0x1BA9DE000](v27);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v29 = v23;
  if (*(void *)(v28 + 16))
  {
    uint64_t v31 = v64;
    uint64_t v30 = v65;
    uint64_t v32 = (uint64_t)v63;
    (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))(v63, v28 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80)), v64);
    uint64_t v33 = 0;
    uint64_t v34 = v66;
  }
  else
  {
    uint64_t v33 = 1;
    uint64_t v31 = v64;
    uint64_t v30 = v65;
    uint64_t v34 = v66;
    uint64_t v32 = (uint64_t)v63;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v32, v33, 1, v31);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v32, 1, v31) == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v29);
    outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    return 3;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v34, v32, v31);
  if (Siri_Nlu_External_UserDialogAct.hasWantedToRepeat.getter())
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v31);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v29);
    return 0;
  }
  unint64_t result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v36 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v52)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      static UsoTask_CodegenConverter.convert(task:)();
      swift_release();
      if (!v70)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v31);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v29);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v69, (uint64_t *)&demangling cache variable for type metadata for Any?);
        return 3;
      }
      outlined init with take of Any(&v69, v71);
      outlined init with copy of Any((uint64_t)v71, (uint64_t)&v69);
      type metadata accessor for UsoTask_repeat_uso_NoEntity();
      if (swift_dynamicCast())
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v31);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v29);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);
        return 0;
      }
      type metadata accessor for UsoTask_skipBackward_uso_NoEntity();
      if (swift_dynamicCast())
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v31);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v29);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);
        return 1;
      }
      type metadata accessor for UsoTask_noVerb_common_Interjection();
      if (swift_dynamicCast()
        && (swift_release(),
            outlined init with copy of Any((uint64_t)v71, (uint64_t)v68),
            swift_dynamicCast()))
      {
        uint64_t v37 = v67;
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        uint64_t v65 = v37;
        swift_release();
        uint64_t v54 = v29;
        uint64_t v53 = v26;
        if (v68[0])
        {
          uint64_t v38 = v59;
          dispatch thunk of UsoEntity_common_Interjection.definedValue.getter();
          swift_release();
          uint64_t v39 = v57;
          uint64_t v40 = v62;
          uint64_t v41 = v60;
        }
        else
        {
          uint64_t v41 = v60;
          uint64_t v38 = v59;
          uint64_t v39 = v57;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v59, 1, 1, v57);
          uint64_t v40 = v62;
        }
        uint64_t v42 = v61;
        (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v61, *MEMORY[0x1E4FA32F8], v39);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v39);
        uint64_t v43 = v41;
        uint64_t v44 = v40 + *(int *)(v58 + 48);
        outlined init with copy of UsoEntity_common_Interjection.DefinedValues?(v38, v40);
        uint64_t v64 = v44;
        outlined init with copy of UsoEntity_common_Interjection.DefinedValues?(v42, v44);
        uint64_t v45 = v38;
        uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
        if (v46(v40, 1, v39) == 1)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v42, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v31);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v53, v54);
          if (v46(v64, 1, v39) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
LABEL_37:
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);
            return 2;
          }
          goto LABEL_35;
        }
        uint64_t v47 = v56;
        outlined init with copy of UsoEntity_common_Interjection.DefinedValues?(v40, v56);
        uint64_t v48 = v64;
        if (v46(v64, 1, v39) == 1)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v66, v31);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v53, v54);
          (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v47, v39);
LABEL_35:
          outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for (UsoEntity_common_Interjection.DefinedValues?, UsoEntity_common_Interjection.DefinedValues?));
          goto LABEL_28;
        }
        uint64_t v49 = v60;
        unint64_t v50 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v55, v48, v39);
        lazy protocol witness table accessor for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues();
        LODWORD(v64) = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        uint64_t v51 = *(void (**)(char *, uint64_t))(v49 + 8);
        v51(v50, v39);
        outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v66, v31);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v53, v54);
        v51((char *)v47, v39);
        outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
        if (v64) {
          goto LABEL_37;
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v31);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v29);
      }
LABEL_28:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);
      return 3;
    }
  }
  else if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_17;
  }
  if ((v36 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v36);
    goto LABEL_17;
  }
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type RepeatRecentDialogIntent and conformance RepeatRecentDialogIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type RepeatRecentDialogIntent and conformance RepeatRecentDialogIntent;
  if (!lazy protocol witness table cache variable for type RepeatRecentDialogIntent and conformance RepeatRecentDialogIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatRecentDialogIntent and conformance RepeatRecentDialogIntent);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RepeatRecentDialogIntent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9FA6EE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RepeatRecentDialogIntent()
{
  return &type metadata for RepeatRecentDialogIntent;
}

uint64_t outlined init with copy of UsoEntity_common_Interjection.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues)
  {
    type metadata accessor for UsoEntity_common_Interjection.DefinedValues();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues);
  }
  return result;
}

uint64_t RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(a1, a3, a4, a5, a6, v6, ObjectType, a2);
}

uint64_t static RequestContextData.builder.getter()
{
  type metadata accessor for RequestContextData.Builder(0);
  uint64_t v0 = swift_allocObject();
  RequestContextData.Builder.init()();
  return v0;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t static RequestContextData.supportsSecureCoding.getter()
{
  return static RequestContextData.supportsSecureCoding;
}

uint64_t static RequestContextData.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static RequestContextData.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static RequestContextData.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t RequestContextData.inputOrigin.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestContextData.audioSource.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource, a1, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t RequestContextData.audioDestination.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination, a1, &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t RequestContextData.responseMode.getter@<X0>(uint64_t a1@<X8>)
{
  return RequestContextData.responseMode.getter(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode, MEMORY[0x1E4FA51C0], a1);
}

uint64_t RequestContextData.isEyesFree.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree);
}

{
  return MEMORY[0x1F4154B60]();
}

uint64_t RequestContextData.isDirectAction.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction);
}

uint64_t RequestContextData.isVoiceTriggerEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled);
}

{
  return MEMORY[0x1F4154BC0]();
}

uint64_t RequestContextData.isTextToSpeechEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled);
}

{
  return MEMORY[0x1F4154BB0]();
}

void *RequestContextData.peerInfo.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  id v2 = v1;
  return v1;
}

void *RequestContextData.endpointInfo.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
  id v2 = v1;
  return v1;
}

void *RequestContextData.instanceInfo.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo);
  id v2 = v1;
  return v1;
}

uint64_t RequestContextData.bargeInModes.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x1F4154B78]();
}

uint64_t RequestContextData.approximatePreviousTTSInterval.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval, a1, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
}

uint64_t RequestContextData.restrictions.getter@<X0>(uint64_t a1@<X8>)
{
  return RequestContextData.responseMode.getter(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions, MEMORY[0x1E4FA51E0], a1);
}

void *RequestContextData.originatingHome.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome);
  id v2 = v1;
  return v1;
}

uint64_t RequestContextData.currentDeviceAssistantId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestContextData.isTriggerlessFollowup.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup);
}

{
  return MEMORY[0x1F4154BB8]();
}

uint64_t RequestContextData.didPreviouslyFallbackToServer.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer);
}

uint64_t RequestContextData.isSpeechRequest.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest);
}

uint64_t RequestContextData.isUserOnActivePhoneCall.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall);
}

uint64_t RequestContextData.voiceTriggerEventInfo.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x1F4154BC8]();
}

uint64_t RequestContextData.isRecognizeMyVoiceEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled);
}

uint64_t RequestContextData.voiceAudioSessionId.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
}

{
  return MEMORY[0x1F4154BA8]();
}

uint64_t RequestContextData.isSystemApertureEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled);
}

{
  return MEMORY[0x1F4154BD0]();
}

uint64_t RequestContextData.isLiveActivitiesSupported.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported);
}

{
  return MEMORY[0x1F4154BE0]();
}

uint64_t RequestContextData.isInAmbient.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient);
}

{
  return MEMORY[0x1F4154B70]();
}

uint64_t RequestContextData.positionInSession.getter@<X0>(uint64_t a1@<X8>)
{
  return RequestContextData.responseMode.getter(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, MEMORY[0x1E4F9FD50], a1);
}

uint64_t RequestContextData.responseMode.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = a2(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

void *RequestContextData.conjunctionInfo.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
  id v2 = v1;
  return v1;
}

uint64_t RequestContextData.isDeviceShowingLockScreen.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen);
}

{
  return MEMORY[0x1F4154BD8]();
}

uint64_t RequestContextData.isDeviceLocked.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked);
}

{
  return MEMORY[0x1F4154B88]();
}

id RequestContextData.__allocating_init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9, long long a10, long long a11, long long a12, long long a13, uint64_t a14, char a15, char a16, char a17, char a18, uint64_t a19, char a20,int a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,char a28)
{
  id v29 = objc_allocWithZone(v28);
  return RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12, *((uint64_t *)&a12 + 1), a13, *((uint64_t *)&a13 + 1), a14, a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

id RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char a20,char a21,char a22,uint64_t a23,char a24,int a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31,char a32)
{
  uint64_t v35 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin];
  *uint64_t v35 = a1;
  v35[1] = a2;
  outlined init with copy of ReferenceResolutionClientProtocol?(a3, (uint64_t)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource], (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined init with copy of ReferenceResolutionClientProtocol?(a4, (uint64_t)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination], &demangling cache variable for type metadata for AudioDestination?);
  unint64_t v36 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode];
  uint64_t v37 = type metadata accessor for ResponseMode();
  uint64_t v38 = *(void *)(v37 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v36, a5, v37);
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree] = a6;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction] = a7;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled] = a8;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled] = a9;
  *(void *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo] = a10;
  *(void *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo] = a11;
  *(void *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo] = a12;
  *(void *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_bargeInModes] = a13;
  outlined init with copy of ReferenceResolutionClientProtocol?(a14, (uint64_t)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval], (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  uint64_t v39 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions];
  uint64_t v40 = type metadata accessor for Restrictions();
  uint64_t v41 = *(void *)(v40 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v39, a15, v40);
  *(void *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome] = a16;
  uint64_t v42 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId];
  *uint64_t v42 = a17;
  v42[1] = a18;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup] = a19;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer] = a20;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest] = a21;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall] = a22;
  *(void *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo] = a23;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled] = a24;
  *(_DWORD *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId] = a25;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled] = a26;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported] = a27;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient] = a28;
  uint64_t v43 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession];
  uint64_t v44 = type metadata accessor for RequestPositionInSession();
  uint64_t v45 = *(void *)(v44 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v43, a29, v44);
  *(void *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo] = a30;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen] = a31;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked] = a32;
  v54.receiver = v32;
  v54.super_class = (Class)type metadata accessor for RequestContextData(0);
  id v46 = objc_msgSendSuper2(&v54, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(a29, v44);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(a15, v40);
  outlined destroy of ReferenceResolutionClientProtocol?(a14, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(a5, v37);
  outlined destroy of ReferenceResolutionClientProtocol?(a4, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of ReferenceResolutionClientProtocol?(a3, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  return v46;
}

uint64_t RequestContextData.__allocating_init(coder:)(char *a1)
{
  id v3 = objc_allocWithZone(v1);
  return RequestContextData.init(coder:)(a1);
}

uint64_t RequestContextData.init(coder:)(char *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v201 = (char *)&v178 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RequestPositionInSession();
  uint64_t v205 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v203 = (char *)&v178 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v178 - v8;
  uint64_t v199 = (void *)type metadata accessor for DeviceRestrictions();
  uint64_t v198 = *(v199 - 1);
  uint64_t v10 = MEMORY[0x1F4188790](v199);
  uint64_t v197 = (char *)&v178 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v196 = (char *)&v178 - v12;
  uint64_t v13 = type metadata accessor for Restrictions();
  uint64_t v204 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v202 = (char *)&v178 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v220 = (char *)&v178 - v16;
  uint64_t v17 = type metadata accessor for NSFastEnumerationIterator();
  unint64_t v214 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  v223 = (char *)&v178 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v178 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v200 = (uint64_t)&v178 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v221 = (char *)&v178 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v219 = (uint64_t)&v178 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v28 - 8);
  uint64_t v30 = (char *)&v178 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = type metadata accessor for ResponseMode();
  uint64_t v213 = *(void *)(v218 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v218);
  objc_super v212 = (char *)&v178 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v217 = (char *)&v178 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  uint64_t v35 = MEMORY[0x1F4188790](v34 - 8);
  uint64_t v211 = (uint64_t)&v178 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v216 = (uint64_t)&v178 - v37;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  uint64_t v39 = MEMORY[0x1F4188790](v38 - 8);
  uint64_t v210 = (uint64_t)&v178 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39);
  uint64_t v215 = (uint64_t)&v178 - v41;
  uint64_t v42 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v43 = v1;
  uint64_t v222 = v42;
  uint64_t v44 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v44)
  {

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v45 = (void *)v44;
  id v206 = v43;
  uint64_t v209 = v5;
  uint64_t v195 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v194 = v46;

  uint64_t v47 = (void *)MEMORY[0x1BA9E2DD0](0x756F536F69647561, 0xEB00000000656372);
  unsigned __int8 v48 = objc_msgSend(a1, sel_containsValueForKey_, v47);

  objc_super v208 = v9;
  uint64_t v207 = v13;
  if (v48)
  {
    uint64_t v49 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v49)
    {
      unint64_t v50 = (void *)v49;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    AudioSource.init(aceValue:)();
  }
  else
  {
    uint64_t v52 = type metadata accessor for AudioSource();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v215, 1, 1, v52);
  }
  uint64_t v53 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000010, 0x80000001BA06C1B0);
  unsigned int v54 = objc_msgSend(a1, sel_containsValueForKey_, v53);

  if (v54)
  {
    uint64_t v55 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v55)
    {
      uint64_t v56 = (void *)v55;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v58 = v213;
    AudioDestination.init(aceValue:)();
  }
  else
  {
    uint64_t v57 = type metadata accessor for AudioDestination();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v216, 1, 1, v57);
    uint64_t v58 = v213;
  }
  uint64_t v59 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v59)
  {
    uint64_t v60 = (void *)v59;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  ResponseMode.init(aceValue:)();
  uint64_t v61 = v218;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v30, 1, v218) == 1)
  {
    static ResponseMode.displayForward.getter();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v30, &demangling cache variable for type metadata for ResponseMode?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v217, v30, v61);
  }
  uint64_t v62 = (void *)MEMORY[0x1BA9E2DD0](0x7246736579457369, 0xEA00000000006565);
  unsigned int v193 = objc_msgSend(a1, sel_decodeBoolForKey_, v62);

  uint64_t v63 = (void *)MEMORY[0x1BA9E2DD0](0x7463657269447369, 0xEE006E6F69746341);
  unsigned int v192 = objc_msgSend(a1, sel_decodeBoolForKey_, v63);

  uint64_t v64 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA060FF0);
  unsigned int v191 = objc_msgSend(a1, sel_decodeBoolForKey_, v64);

  uint64_t v65 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA061010);
  unsigned int v190 = objc_msgSend(a1, sel_decodeBoolForKey_, v65);

  unint64_t v66 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA067D10);
  unsigned int v189 = objc_msgSend(a1, sel_decodeBoolForKey_, v66);

  uint64_t v67 = (void *)MEMORY[0x1BA9E2DD0](0x6563697665447369, 0xEE0064656B636F4CLL);
  unsigned int v188 = objc_msgSend(a1, sel_decodeBoolForKey_, v67);

  uint64_t v68 = (void *)MEMORY[0x1BA9E2DD0](0x6F666E4972656570, 0xE800000000000000);
  unsigned int v69 = objc_msgSend(a1, sel_containsValueForKey_, v68);

  if (v69)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFPeerInfo);
    uint64_t v187 = NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    uint64_t v187 = 0;
  }
  uint64_t v70 = (void *)MEMORY[0x1BA9E2DD0](0x746E696F70646E65, 0xEC0000006F666E49);
  unsigned int v71 = objc_msgSend(a1, sel_containsValueForKey_, v70);

  if (v71)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFEndpointInfo);
    uint64_t v186 = NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    uint64_t v186 = 0;
  }
  uint64_t v72 = (void *)MEMORY[0x1BA9E2DD0](0x65636E6174736E69, 0xEC0000006F666E49);
  unsigned int v73 = objc_msgSend(a1, sel_containsValueForKey_, v72);

  if (v73)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFInstanceInfo);
    uint64_t v185 = NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    uint64_t v185 = 0;
  }
  uint64_t v74 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001ELL, 0x80000001BA06C1D0);
  unsigned int v75 = objc_msgSend(a1, sel_containsValueForKey_, v74);

  if (v75)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSDateInterval);
    uint64_t v76 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v76)
    {
      uint64_t v77 = (void *)v76;
      uint64_t v78 = v221;
      static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v79 = type metadata accessor for DateInterval();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v78, 0, 1, v79);
    }
    else
    {
      uint64_t v81 = type metadata accessor for DateInterval();
      uint64_t v78 = v221;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v221, 1, 1, v81);
    }
    outlined init with take of DateInterval?((uint64_t)v78, v219);
  }
  else
  {
    uint64_t v80 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v219, 1, 1, v80);
  }
  uint64_t v82 = (void *)MEMORY[0x1BA9E2DD0](0x74616E696769726FLL, 0xEF656D6F48676E69);
  unsigned int v83 = objc_msgSend(a1, sel_containsValueForKey_, v82);

  if (v83)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFHomeInfo);
    uint64_t v184 = NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    uint64_t v184 = 0;
  }
  uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v84 = swift_allocObject();
  long long v180 = xmmword_1BA04F9C0;
  *(_OWORD *)(v84 + 16) = xmmword_1BA04F9C0;
  uint64_t v85 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSArray);
  uint64_t v86 = v222;
  *(void *)(v84 + 32) = v85;
  *(void *)(v84 + 40) = v86;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v229)
  {
    if (swift_dynamicCast())
    {
      unsigned int v87 = (void *)v227;
      goto LABEL_41;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v228, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  unsigned int v87 = (void *)MEMORY[0x1BA9E3640](MEMORY[0x1E4FBC860]);
LABEL_41:
  uint64_t v182 = v85;
  uint64_t v221 = a1;
  id v88 = v87;
  NSArray.makeIterator()();
  id v183 = v88;

  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, MEMORY[0x1E4F27660]);
  dispatch thunk of IteratorProtocol.next()();
  if (v229)
  {
    uint64_t v89 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      outlined init with take of Any(&v228, &v227);
      outlined init with copy of Any((uint64_t)&v227, (uint64_t)v224);
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v225 = 0;
        uint64_t v226 = 0;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v227);
      uint64_t v91 = v226;
      if (v226)
      {
        uint64_t v92 = v225;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89[2] + 1, 1, v89);
        }
        unint64_t v94 = v89[2];
        unint64_t v93 = v89[3];
        if (v94 >= v93 >> 1) {
          uint64_t v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v93 > 1), v94 + 1, 1, v89);
        }
        v89[2] = v94 + 1;
        uint64_t v90 = &v89[2 * v94];
        v90[4] = v92;
        v90[5] = v91;
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v229);
  }
  else
  {
    uint64_t v89 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v95 = *(void (**)(char *, uint64_t))(v214 + 8);
  v214 += 8;
  uint64_t v179 = v95;
  v95(v21, v17);

  uint64_t v96 = (void *)MEMORY[0x1BA9E2DD0](0x7463697274736572, 0xEC000000736E6F69);
  uint64_t v97 = v221;
  unsigned __int8 v98 = objc_msgSend(v221, sel_containsValueForKey_, v96);

  if ((v98 & 1) == 0)
  {
    uint64_t v102 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA06C1F0);
    objc_msgSend(v97, (SEL)0x1F62EEE18, v102);

    uint64_t v103 = v196;
    DeviceRestrictions.init(rawValue:)();
    uint64_t v104 = v198;
    uint64_t v105 = v199;
    (*(void (**)(char *, char *, void *))(v198 + 16))(v197, v103, v199);
    Restrictions.init(deviceRestrictions:)();
    (*(void (**)(char *, void *))(v104 + 8))(v103, v105);
    goto LABEL_72;
  }
  uint64_t v99 = swift_allocObject();
  *(_OWORD *)(v99 + 16) = v180;
  uint64_t v100 = v222;
  *(void *)(v99 + 32) = v182;
  *(void *)(v99 + 40) = v100;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v229)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v228, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_59;
  }
  if (!swift_dynamicCast())
  {
LABEL_59:
    uint64_t v101 = (void *)MEMORY[0x1BA9E3640](MEMORY[0x1E4FBC860]);
    goto LABEL_60;
  }
  uint64_t v101 = (void *)v227;
LABEL_60:
  uint64_t v106 = v101;
  NSArray.makeIterator()();
  uint64_t v199 = v106;

  dispatch thunk of IteratorProtocol.next()();
  if (v229)
  {
    uint64_t v107 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      outlined init with take of Any(&v228, &v227);
      outlined init with copy of Any((uint64_t)&v227, (uint64_t)v224);
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v225 = 0;
        uint64_t v226 = 0;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v227);
      uint64_t v109 = v226;
      if (v226)
      {
        uint64_t v110 = v225;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v107[2] + 1, 1, v107);
        }
        unint64_t v112 = v107[2];
        unint64_t v111 = v107[3];
        if (v112 >= v111 >> 1) {
          uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v111 > 1), v112 + 1, 1, v107);
        }
        v107[2] = v112 + 1;
        uint64_t v108 = &v107[2 * v112];
        v108[4] = v110;
        v108[5] = v109;
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v229);
  }
  v179(v223, v17);

  Restrictions.init(aceValue:)();
  uint64_t v97 = v221;
LABEL_72:
  uint64_t v113 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v113)
  {
    id v114 = v113;
    uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v117 = v116;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v118 = type metadata accessor for Logger();
    __swift_project_value_buffer(v118, (uint64_t)static Logger.executor);
    id v114 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v114, v119))
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v120 = 0;
      _os_log_impl(&dword_1B9C64000, v114, v119, "Could not decode currentDeviceAssistantId, setting to empty string", v120, 2u);
      MEMORY[0x1BA9E48C0](v120, -1, -1);
    }
    uint64_t v115 = 0;
    unint64_t v117 = 0xE000000000000000;
  }

  uint64_t v121 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001DLL, 0x80000001BA067F60);
  LODWORD(v199) = objc_msgSend(v97, sel_decodeBoolForKey_, v121);

  uint64_t v122 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA063080);
  LODWORD(v198) = objc_msgSend(v97, sel_decodeBoolForKey_, v122);

  char v123 = (void *)MEMORY[0x1BA9E2DD0](0x6863656570537369, 0xEF74736575716552);
  LODWORD(v197) = objc_msgSend(v97, sel_decodeBoolForKey_, v123);

  uint64_t v124 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000017, 0x80000001BA069B20);
  LODWORD(v196) = objc_msgSend(v97, sel_decodeBoolForKey_, v124);

  uint64_t v125 = NSCoder.decodeDictionary<A, B>(withKeyClass:objectClass:forKey:)();
  if (v125)
  {
    *(void *)&long long v228 = v125;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [NSString : NSString]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : String]);
    int v126 = swift_dynamicCast();
    uint64_t v127 = v227;
    if (!v126) {
      uint64_t v127 = 0;
    }
    uint64_t v222 = v127;
  }
  else
  {
    uint64_t v222 = 0;
  }
  uint64_t v128 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA06C250);
  LODWORD(v183) = objc_msgSend(v97, sel_decodeBoolForKey_, v128);

  uint64_t v129 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA06C270);
  unsigned int v130 = objc_msgSend(v97, sel_containsValueForKey_, v129);

  v223 = (char *)v115;
  if (!v130)
  {
    uint64_t v182 = 0;
    goto LABEL_89;
  }
  uint64_t v131 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA06C270);
  unint64_t v132 = (unint64_t)objc_msgSend(v97, sel_decodeInt64ForKey_, v131);

  if ((v132 & 0x8000000000000000) == 0 && !HIDWORD(v132))
  {
    uint64_t v182 = v132;
LABEL_89:
    uint64_t v133 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000017, 0x80000001BA06C290);
    unsigned int v134 = objc_msgSend(v97, sel_containsValueForKey_, v133);

    if (v134)
    {
      uint64_t v135 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000017, 0x80000001BA06C290);
      unsigned int v136 = objc_msgSend(v97, sel_decodeBoolForKey_, v135);

      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v137 = type metadata accessor for Logger();
      __swift_project_value_buffer(v137, (uint64_t)static Logger.executor);
      int v138 = Logger.logObject.getter();
      os_log_type_t v139 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v138, v139))
      {
        id v140 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v140 = 67109120;
        LODWORD(v228) = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v138, v139, "#jindoRF SKE ReqContextData - Got isSystemUI %{BOOL}d", v140, 8u);
        MEMORY[0x1BA9E48C0](v140, -1, -1);
      }
      LODWORD(v181) = v136;
    }
    else
    {
      LODWORD(v181) = 0;
    }
    id v141 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA06C2B0);
    unsigned int v142 = objc_msgSend(v97, sel_containsValueForKey_, v141);

    if (v142)
    {
      os_log_type_t v143 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA06C2B0);
      unsigned int v142 = objc_msgSend(v97, sel_decodeBoolForKey_, v143);

      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v144 = type metadata accessor for Logger();
      __swift_project_value_buffer(v144, (uint64_t)static Logger.executor);
      uint64_t v145 = Logger.logObject.getter();
      os_log_type_t v146 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v145, v146))
      {
        uint64_t v147 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v147 = 67109120;
        LODWORD(v228) = v142;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v145, v146, "#liveActivitiesSupported SKE ReqContextData - Got isLiveActivitiesSupported %{BOOL}d", v147, 8u);
        MEMORY[0x1BA9E48C0](v147, -1, -1);
      }
    }
    unint64_t v148 = (void *)MEMORY[0x1BA9E2DD0](0x69626D416E497369, 0xEB00000000746E65);
    uint64_t v149 = v221;
    unsigned int v150 = objc_msgSend(v221, sel_containsValueForKey_, v148);

    LODWORD(v180) = v142;
    if (v150)
    {
      uint64_t v151 = (void *)MEMORY[0x1BA9E2DD0](0x69626D416E497369, 0xEB00000000746E65);
      unsigned int v152 = objc_msgSend(v149, sel_decodeBoolForKey_, v151);

      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v153 = type metadata accessor for Logger();
      __swift_project_value_buffer(v153, (uint64_t)static Logger.executor);
      uint64_t v154 = Logger.logObject.getter();
      os_log_type_t v155 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v154, v155))
      {
        uint64_t v156 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v156 = 67109120;
        LODWORD(v228) = v152;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v154, v155, "#ambientRF SKE ReqContextData - Got isInAmbient %{BOOL}d", v156, 8u);
        MEMORY[0x1BA9E48C0](v156, -1, -1);
      }
    }
    else
    {
      unsigned int v152 = 0;
    }
    uint64_t v157 = v205;
    uint64_t v158 = (uint64_t)v201;
    uint64_t v159 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA06C2D0);
    objc_msgSend(v221, sel_decodeIntegerForKey_, v159);

    RequestPositionInSession.init(rawValue:)();
    uint64_t v160 = v209;
    int v161 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v158, 1, v209);
    unint64_t v214 = v117;
    LODWORD(v205) = v152;
    if (v161 == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v157 + 104))(v208, *MEMORY[0x1E4F9FD40], v160);
      outlined destroy of ReferenceResolutionClientProtocol?(v158, &demangling cache variable for type metadata for RequestPositionInSession?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v208, v158, v160);
    }
    uint64_t v162 = v157;
    uint64_t v163 = v206;
    type metadata accessor for RequestConjunctionInfo();
    uint64_t v201 = (char *)NSCoder.decodeObject<A>(of:forKey:)();
    uint64_t ObjectType = swift_getObjectType();

    outlined init with copy of ReferenceResolutionClientProtocol?(v215, v210, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v216, v211, &demangling cache variable for type metadata for AudioDestination?);
    uint64_t v165 = v213;
    (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v212, v217, v218);
    uint64_t v166 = v200;
    outlined init with copy of ReferenceResolutionClientProtocol?(v219, v200, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    uint64_t v167 = v204;
    uint64_t v168 = v202;
    (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v202, v220, v207);
    uint64_t v169 = *(void (**)(char *, char *, uint64_t))(v157 + 16);
    uint64_t v170 = v203;
    uint64_t v171 = v208;
    uint64_t v172 = v209;
    v169(v203, v208, v209);
    HIBYTE(v177) = v188;
    LOBYTE(v177) = v189;
    BYTE2(v176) = v205;
    BYTE1(v176) = v180;
    LOBYTE(v176) = v181;
    HIDWORD(v175) = v182;
    LOBYTE(v175) = (_BYTE)v183;
    HIBYTE(v174) = (_BYTE)v196;
    BYTE2(v174) = (_BYTE)v197;
    BYTE1(v174) = (_BYTE)v199;
    LOBYTE(v174) = v198;
    uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, void, void, void, _BYTE, uint64_t, uint64_t, uint64_t, void *, uint64_t, char *, uint64_t, char *, unint64_t, int, uint64_t, uint64_t, int, char *, char *, __int16))(ObjectType + 344))(v195, v194, v210, v211, v212, v193, v192, v191, v190, v187, v186, v185, v89, v166, v168, v184, v223, v214, v174,
            v222,
            v175,
            v176,
            v170,
            v201,
            v177);

    (*(void (**)(char *, uint64_t))(v162 + 8))(v171, v172);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v220, v207);
    outlined destroy of ReferenceResolutionClientProtocol?(v219, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v217, v218);
    outlined destroy of ReferenceResolutionClientProtocol?(v216, &demangling cache variable for type metadata for AudioDestination?);
    outlined destroy of ReferenceResolutionClientProtocol?(v215, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    swift_deallocPartialClassInstance();
    return v51;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t RequestContextData.Builder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  RequestContextData.Builder.init()();
  return v0;
}

uint64_t key path setter for RequestContextData.Builder.audioSource : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 352))(v6);
}

uint64_t (*RequestContextData.Builder.audioSource.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.audioDestination : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AudioDestination?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 376))(v6);
}

uint64_t (*RequestContextData.Builder.audioDestination.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.responseMode : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for ResponseMode?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 400))(v6);
}

uint64_t (*RequestContextData.Builder.responseMode.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isEyesFree.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isDirectAction.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isVoiceTriggerEnabled.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isTextToSpeechEnabled.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.peerInfo.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.endpointInfo.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.instanceInfo.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.bargeInModes.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.approximatePreviousTTSInterval : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 616))(v6);
}

uint64_t (*RequestContextData.Builder.approximatePreviousTTSInterval.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.restrictions : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Restrictions?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 640))(v6);
}

uint64_t (*RequestContextData.Builder.restrictions.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.originatingHome.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.currentDeviceAssistantId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isTriggerlessFollowup.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.didPreviouslyFallbackToServer.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isSpeechRequest.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isUserOnActivePhoneCall.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.voiceTriggerEventInfo.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isRecognizeMyVoiceEnabled.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.voiceAudioSessionId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isSystemApertureEnabled.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isLiveActivitiesSupported.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isLiveActivitiesSupported);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isLiveActivitiesSupported.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isLiveActivitiesSupported);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*RequestContextData.Builder.isLiveActivitiesSupported.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isInAmbient.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isInAmbient);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isInAmbient.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isInAmbient);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*RequestContextData.Builder.isInAmbient.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.positionInSession : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for RequestPositionInSession?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 952))(v6);
}

uint64_t (*RequestContextData.Builder.positionInSession.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void *RequestContextData.Builder.conjunctionInfo.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_conjunctionInfo);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void RequestContextData.Builder.conjunctionInfo.setter(void *a1)
{
}

uint64_t (*RequestContextData.Builder.conjunctionInfo.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isDeviceShowingLockScreen.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceShowingLockScreen);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isDeviceShowingLockScreen.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceShowingLockScreen);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*RequestContextData.Builder.isDeviceShowingLockScreen.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isDeviceLocked.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceLocked);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isDeviceLocked.setter(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceLocked);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*RequestContextData.Builder.isDeviceLocked.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isLiveActivitiesSupported(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 904))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isInAmbient(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 928))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.conjunctionInfo(_:)(void *a1)
{
  id v3 = *(void (**)(void *))(*(void *)v1 + 976);
  id v4 = a1;
  v3(a1);

  return swift_retain();
}

uint64_t RequestContextData.Builder.isDeviceShowingLockScreen(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 1000))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isDeviceLocked(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 1024))();

  return swift_retain();
}

id RequestContextData.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void RequestContextData.init()()
{
}

id RequestContextData.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RequestContextData(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_118:
      unint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          unint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + vspecialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000065, 0x80000001BA06BE10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/ConversationHandler/RemoteFlowPluginBundleConversationHandler.swift", 136, 2, 26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    id v43 = &v11[16 * v41 + 32];
    *(void *)id v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        unsigned int v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        id v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
}

{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
}

{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t vars8;

  Swift::Int v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for RRCandidate();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  int64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(void *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v77 = a2;
  uint64_t v78 = a6;
  int v75 = a5;
  int v76 = a4;
  uint64_t v80 = a3;
  uint64_t v74 = type metadata accessor for RequestPositionInSession();
  uint64_t v72 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v73 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Restrictions();
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v83 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v82 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ResponseMode();
  uint64_t v70 = *(void *)(v19 - 8);
  uint64_t v71 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v81 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v21 - 8);
  BOOL v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for InputOrigin();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a7;
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8);
  if (v32)
  {
    uint64_t v33 = (void *)v32;
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(a8 + 24);
    id v79 = a1;
    v34(v31, a8);
    uint64_t v35 = InputOrigin.aceInputOrigin.getter();
    uint64_t v66 = v36;
    uint64_t v67 = v35;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    RequestContextData.audioSource.getter();
    AudioSource.init(aceValue:)();
    RequestContextData.audioDestination.getter();
    AudioDestination.init(aceValue:)();
    RequestContextData.responseMode.getter();
    ResponseMode.init(aceValue:)();
    uint64_t v38 = v70;
    uint64_t v37 = v71;
    int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48))(v18, 1, v71);
    uint64_t v68 = v26;
    uint64_t v69 = v23;
    if (v39 == 1)
    {
      static ResponseMode.displayForward.getter();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for ResponseMode?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v81, v18, v37);
    }
    LODWORD(v71) = RequestContextData.isEyesFree.getter();
    type metadata accessor for StartDirectActionRequestMessage();
    LODWORD(v70) = swift_dynamicCastClass() != 0;
    int v65 = RequestContextData.isVoiceTriggerEnabled.getter();
    int v64 = RequestContextData.isTextToSpeechEnabled.getter();
    uint64_t v63 = RequestContextData.bargeInModes.getter();
    RequestContextData.approximatePreviousTTSInterval.getter();
    RequestContextData.deviceRestrictions.getter();
    Restrictions.init(aceValue:)();
    int v62 = RequestContextData.isTriggerlessFollowup.getter();
    type metadata accessor for StartSpeechRequestMessage();
    BOOL v61 = swift_dynamicCastClass() != 0;
    uint64_t v60 = RequestContextData.voiceTriggerEventInfo.getter();
    int v47 = RequestContextData.voiceAudioSessionId.getter();
    char v48 = RequestContextData.isSystemApertureEnabled.getter() & 1;
    char v49 = RequestContextData.isLiveActivitiesSupported.getter() & 1;
    char v50 = RequestContextData.isInAmbient.getter() & 1;
    uint64_t v51 = RequestContextData.conjunctionInfo.getter();
    char v52 = RequestContextData.isDeviceShowingLockScreen.getter();
    char v53 = RequestContextData.isDeviceLocked.getter();
    uint64_t v54 = v73;
    (*(void (**)(char *, void, uint64_t))(v72 + 104))(v73, *MEMORY[0x1E4F9FD40], v74);
    HIBYTE(v59) = v53 & 1;
    LOBYTE(v59) = v52 & 1;
    BYTE2(v58) = v50;
    BYTE1(v58) = v49;
    LOBYTE(v58) = v48;
    HIDWORD(v57) = v47;
    LOBYTE(v57) = v75 & 1;
    HIWORD(v56) = v61;
    BYTE1(v56) = v76 & 1;
    LOBYTE(v56) = v62 & 1;
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, char *, uint64_t, void, void, _BYTE, void, void, void, uint64_t, char *, char *, void, uint64_t, uint64_t, int, uint64_t, uint64_t, int, char *, uint64_t, __int16))(v78 + 344))(v67, v66, v68, v69, v81, v71 & 1, v70, v65 & 1, v64 & 1, 0, 0, 0, v63, v82, v83, 0, v77, v80, v56,
            v60,
            v57,
            v58,
            v54,
            v51,
            v59);
  }
  else
  {
    unint64_t v40 = a1;
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.executor);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    unint64_t v44 = v40;
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl(&dword_1B9C64000, v42, v43, "RequestContextData.init(startSpeechRequest: StartSpeechRequestMessage) - missing requestContextData", v45, 2u);
      MEMORY[0x1BA9E48C0](v45, -1, -1);
    }

    return 0;
  }
  return v46;
}

uint64_t lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B9FAC808@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 320))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9FAC85C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 328);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B9FAC8CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 344))();
}

uint64_t sub_1B9FAC91C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 368))();
}

uint64_t sub_1B9FAC96C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 392))();
}

uint64_t sub_1B9FAC9BC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 416))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FACA10(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 424))(*a1);
}

uint64_t sub_1B9FACA60@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 440))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FACAB4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 448))(*a1);
}

uint64_t sub_1B9FACB04@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 464))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FACB58(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 472))(*a1);
}

uint64_t sub_1B9FACBA8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 488))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FACBFC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 496))(*a1);
}

uint64_t sub_1B9FACC4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 512))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FACCA0(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 520);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9FACD00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 536))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FACD54(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 544);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9FACDB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 560))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FACE08(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 568);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9FACE68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 584))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FACEBC(uint64_t a1, uint64_t a2)
{
  id v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 592);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9FACF18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 608))();
}

uint64_t sub_1B9FACF68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 632))();
}

uint64_t sub_1B9FACFB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 656))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD00C(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 664);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9FAD06C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 680))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9FAD0C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 688);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B9FAD130@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 704))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD184(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 712))(*a1);
}

uint64_t sub_1B9FAD1D4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 728))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD228(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 736))(*a1);
}

uint64_t sub_1B9FAD278@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 752))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD2CC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 760))(*a1);
}

uint64_t sub_1B9FAD31C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 776))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD370(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 784))(*a1);
}

uint64_t sub_1B9FAD3C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 800))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD414(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 808);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9FAD470@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 824))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD4C4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 832))(*a1);
}

uint64_t sub_1B9FAD514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 848))();
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1B9FAD570(unsigned int *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(**(void **)a2 + 856))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_1B9FAD5D8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 872))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD62C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 880))(*a1);
}

uint64_t sub_1B9FAD67C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 896))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD6D0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 904))(*a1);
}

uint64_t sub_1B9FAD720@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 920))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD774(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 928))(*a1);
}

uint64_t sub_1B9FAD7C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 944))();
}

uint64_t sub_1B9FAD814@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 968))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD868(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 976);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9FAD8C8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 992))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD91C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 1000))(*a1);
}

uint64_t sub_1B9FAD96C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1016))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FAD9C0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 1024))(*a1);
}

uint64_t ObjC metadata update function for RequestContextData()
{
  return type metadata accessor for RequestContextData(0);
}

void type metadata completion function for RequestContextData()
{
  _s13SiriUtilities11AudioSourceVSgMaTm_0(319, &lazy cache variable for type metadata for AudioSource?, MEMORY[0x1E4FA5070]);
  if (v0 <= 0x3F)
  {
    _s13SiriUtilities11AudioSourceVSgMaTm_0(319, &lazy cache variable for type metadata for AudioDestination?, MEMORY[0x1E4FA5258]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ResponseMode();
      if (v2 <= 0x3F)
      {
        _s13SiriUtilities11AudioSourceVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for DateInterval?, MEMORY[0x1E4F26E60]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Restrictions();
          if (v4 <= 0x3F)
          {
            type metadata accessor for RequestPositionInSession();
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for RequestContextData(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RequestContextData);
}

uint64_t dispatch thunk of RequestContextData.isDeviceInStarkMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of RequestContextData.isDeviceInCarDND.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of RequestContextData.deviceRestrictions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of RequestContextData.__allocating_init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)()
{
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 344);
  return v1();
}

uint64_t dispatch thunk of RequestContextData.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t dispatch thunk of RequestContextData.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of RequestContextData.makeBuilder()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t ObjC metadata update function for RequestContextData.Builder()
{
  return type metadata accessor for RequestContextData.Builder(0);
}

void type metadata completion function for RequestContextData.Builder()
{
  _s13SiriUtilities11AudioSourceVSgMaTm_0(319, &lazy cache variable for type metadata for AudioSource?, MEMORY[0x1E4FA5070]);
  if (v0 <= 0x3F)
  {
    _s13SiriUtilities11AudioSourceVSgMaTm_0(319, &lazy cache variable for type metadata for AudioDestination?, MEMORY[0x1E4FA5258]);
    if (v1 <= 0x3F)
    {
      _s13SiriUtilities11AudioSourceVSgMaTm_0(319, &lazy cache variable for type metadata for ResponseMode?, MEMORY[0x1E4FA51C0]);
      if (v2 <= 0x3F)
      {
        _s13SiriUtilities11AudioSourceVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for DateInterval?, MEMORY[0x1E4F26E60]);
        if (v3 <= 0x3F)
        {
          _s13SiriUtilities11AudioSourceVSgMaTm_0(319, &lazy cache variable for type metadata for Restrictions?, MEMORY[0x1E4FA51E0]);
          if (v4 <= 0x3F)
          {
            _s13SiriUtilities11AudioSourceVSgMaTm_0(319, &lazy cache variable for type metadata for RequestPositionInSession?, MEMORY[0x1E4F9FD50]);
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RequestContextData.Builder);
}

uint64_t dispatch thunk of RequestContextData.Builder.inputOrigin.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of RequestContextData.Builder.inputOrigin.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of RequestContextData.Builder.inputOrigin.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioSource.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioSource.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioSource.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioDestination.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioDestination.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioDestination.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of RequestContextData.Builder.responseMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of RequestContextData.Builder.responseMode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of RequestContextData.Builder.responseMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isEyesFree.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isEyesFree.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isEyesFree.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDirectAction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDirectAction.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDirectAction.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isVoiceTriggerEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isVoiceTriggerEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isVoiceTriggerEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTextToSpeechEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTextToSpeechEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTextToSpeechEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of RequestContextData.Builder.peerInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of RequestContextData.Builder.peerInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of RequestContextData.Builder.peerInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of RequestContextData.Builder.endpointInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of RequestContextData.Builder.endpointInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of RequestContextData.Builder.endpointInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of RequestContextData.Builder.instanceInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of RequestContextData.Builder.instanceInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of RequestContextData.Builder.instanceInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of RequestContextData.Builder.bargeInModes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of RequestContextData.Builder.bargeInModes.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of RequestContextData.Builder.bargeInModes.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of RequestContextData.Builder.approximatePreviousTTSInterval.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of RequestContextData.Builder.approximatePreviousTTSInterval.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of RequestContextData.Builder.approximatePreviousTTSInterval.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of RequestContextData.Builder.restrictions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of RequestContextData.Builder.restrictions.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of RequestContextData.Builder.restrictions.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of RequestContextData.Builder.originatingHome.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of RequestContextData.Builder.originatingHome.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of RequestContextData.Builder.originatingHome.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of RequestContextData.Builder.currentDeviceAssistantId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of RequestContextData.Builder.currentDeviceAssistantId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of RequestContextData.Builder.currentDeviceAssistantId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTriggerlessFollowup.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTriggerlessFollowup.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTriggerlessFollowup.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of RequestContextData.Builder.didPreviouslyFallbackToServer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of RequestContextData.Builder.didPreviouslyFallbackToServer.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of RequestContextData.Builder.didPreviouslyFallbackToServer.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSpeechRequest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSpeechRequest.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSpeechRequest.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isUserOnActivePhoneCall.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isUserOnActivePhoneCall.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isUserOnActivePhoneCall.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceTriggerEventInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceTriggerEventInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceTriggerEventInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isRecognizeMyVoiceEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isRecognizeMyVoiceEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isRecognizeMyVoiceEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceAudioSessionId.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 848))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceAudioSessionId.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)v1 + 856))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceAudioSessionId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSystemApertureEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSystemApertureEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSystemApertureEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 888))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isLiveActivitiesSupported.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 896))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isLiveActivitiesSupported.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isLiveActivitiesSupported.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 912))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isInAmbient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 920))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isInAmbient.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 928))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isInAmbient.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 936))();
}

uint64_t dispatch thunk of RequestContextData.Builder.positionInSession.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 944))();
}

uint64_t dispatch thunk of RequestContextData.Builder.positionInSession.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 952))();
}

uint64_t dispatch thunk of RequestContextData.Builder.positionInSession.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 960))();
}

uint64_t dispatch thunk of RequestContextData.Builder.conjunctionInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 968))();
}

uint64_t dispatch thunk of RequestContextData.Builder.conjunctionInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 976))();
}

uint64_t dispatch thunk of RequestContextData.Builder.conjunctionInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 984))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceShowingLockScreen.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 992))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceShowingLockScreen.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1000))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceShowingLockScreen.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1008))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceLocked.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1016))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceLocked.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1024))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceLocked.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1032))();
}

uint64_t dispatch thunk of RequestContextData.Builder.inputOrigin(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1040))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioSource(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1048))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioDestination(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1056))();
}

uint64_t dispatch thunk of RequestContextData.Builder.responseMode(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1064))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isEyesFree(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1072))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDirectAction(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1080))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isVoiceTriggerEnabled(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1088))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTextToSpeechEnabled(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1096))();
}

uint64_t dispatch thunk of RequestContextData.Builder.peerInfo(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1104))();
}

uint64_t dispatch thunk of RequestContextData.Builder.endpointInfo(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1112))();
}

uint64_t dispatch thunk of RequestContextData.Builder.instanceInfo(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1120))();
}

uint64_t dispatch thunk of RequestContextData.Builder.bargeInModes(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1128))();
}

uint64_t dispatch thunk of RequestContextData.Builder.approximatePreviousTTSInterval(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1136))();
}

uint64_t dispatch thunk of RequestContextData.Builder.restrictions(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1144))();
}

uint64_t dispatch thunk of RequestContextData.Builder.originatingHome(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1152))();
}

uint64_t dispatch thunk of RequestContextData.Builder.currentDeviceAssistantId(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1160))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTriggerlessFollowup(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1168))();
}

uint64_t dispatch thunk of RequestContextData.Builder.didPreviouslyFallbackToServer(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1176))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSpeechRequest(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1184))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isUserOnActivePhoneCall(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1192))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceTriggerEventInfo(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1200))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isRecognizeMyVoiceEnabled(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1208))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceAudioSessionId(_:)(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)v1 + 1216))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of RequestContextData.Builder.isSystemApertureEnabled(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1224))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isLiveActivitiesSupported(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1232))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isInAmbient(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1240))();
}

uint64_t dispatch thunk of RequestContextData.Builder.positionInSession(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1248))();
}

uint64_t dispatch thunk of RequestContextData.Builder.conjunctionInfo(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1256))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceShowingLockScreen(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1264))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceLocked(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1272))();
}

uint64_t dispatch thunk of RequestContextData.Builder.build()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1280))();
}

uint64_t dispatch thunk of RequestContextData.Builder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 1288))();
}

void _s13SiriUtilities11AudioSourceVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ResponseTextExtractionUtil()
{
  return &type metadata for ResponseTextExtractionUtil;
}

uint64_t TTResponseMessage.MitigationDecision.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TTResponseMessage.MitigationDecision();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E4FA2078]) {
    return 0x64657463656C6573;
  }
  if (v6 == *MEMORY[0x1E4FA2080]) {
    return 0x657461676974696DLL;
  }
  if (v6 == *MEMORY[0x1E4FA2070])
  {
    unsigned int v8 = 1652121965;
    return v8 | 0x74694D6500000000;
  }
  if (v6 == *MEMORY[0x1E4FA2068])
  {
    unsigned int v8 = 1668444006;
    return v8 | 0x74694D6500000000;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t RoutingDecision.value.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoutingDecision(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v21 - v15;
  outlined init with copy of RoutingDecision(v2, (uint64_t)v9, type metadata accessor for RoutingDecision);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v17(v16, v9, v10);
    v17(a1, v16, v10);
LABEL_6:
    uint64_t v18 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, v18, 1, v10);
  }
  _s14SiriKitRuntime15RoutingDecisionOWOhTm_0((uint64_t)v9, type metadata accessor for RoutingDecision);
  outlined init with copy of RoutingDecision(v2, (uint64_t)v7, type metadata accessor for RoutingDecision);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v19(v14, v7, v10);
    v19(a1, v14, v10);
    goto LABEL_6;
  }
  _s14SiriKitRuntime15RoutingDecisionOWOhTm_0((uint64_t)v7, type metadata accessor for RoutingDecision);
  uint64_t v18 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, v18, 1, v10);
}

uint64_t type metadata accessor for RoutingDecision(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for RoutingDecision);
}

uint64_t SpeechContext.__allocating_init(speechPackage:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 1;
  *(void *)(v2 + 16) = a1;
  id v3 = a1;
  id v4 = objc_msgSend(v3, sel_recognition);
  id v5 = objc_msgSend(v4, sel_aceRecognition);

  *(void *)(v2 + 24) = v5;
  return v2;
}

uint64_t ResultCandidateState.__allocating_init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, unsigned __int8 a13)
{
  int v19 = a7 & 1;
  uint64_t v20 = swift_allocObject();
  ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(a1, a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6, v19, a8 | ((HIDWORD(a8) & 1) << 32), a9, a10, a11, a12, a13);
  return v20;
}

void __swiftcall TextContext.init(utterance:trpId:tcuId:)(SiriKitRuntime::TextContext *__return_ptr retstr, Swift::String utterance, Swift::String_optional trpId, Swift::String_optional tcuId)
{
  retstr->utterance = utterance;
  retstr->trpId = trpId;
  retstr->tcuId = tcuId;
}

id TRPContext.__allocating_init(requestMessage:)(void *a1)
{
  return TRPContext.init(requestMessage:)(a1);
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()(uint64_t a1)
{
  uint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) == 0)
  {
    if ((*v1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if ((v2 & 0xF00000000000000) == 0)
  {
    __break(1u);
    return MEMORY[0x1F4183A58](a1);
  }
LABEL_5:
  a1 = String.index(before:)();

  return MEMORY[0x1F4183A58](a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResultCandidateProcessingStatus(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = ResultCandidateProcessingStatus.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == ResultCandidateProcessingStatus.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResultCandidateProcessingStatus()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ResultCandidateProcessingStatus.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ResultCandidateProcessingStatus()
{
  ResultCandidateProcessingStatus.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResultCandidateProcessingStatus()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ResultCandidateProcessingStatus.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ResultCandidateProcessingStatus@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized ResultCandidateProcessingStatus.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ResultCandidateProcessingStatus@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ResultCandidateProcessingStatus.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ResultCandidateState.resultCandidateId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ResultCandidateState.resultCandidateType.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of RoutingDecision(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, a1, type metadata accessor for ResultCandidateType);
}

uint64_t ResultCandidateState.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  uint64_t v4 = type metadata accessor for UserID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ResultCandidateState.asrLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, a1, &demangling cache variable for type metadata for ExecutionLocation?);
}

uint64_t ResultCandidateState.conversationUserInputId.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_conversationUserInputId);
}

uint64_t ResultCandidateState.conversationUserInputId.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_conversationUserInputId);
}

uint64_t (*ResultCandidateState.conversationUserInputId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.nlUserParses.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.nlLanguageVariantResult : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 336))(v6);
}

uint64_t (*ResultCandidateState.nlLanguageVariantResult.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.nlResponseVariantResult.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseVariantResult);
}

uint64_t ResultCandidateState.nlResponseVariantResult.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseVariantResult);
}

uint64_t ResultCandidateState.conversationUserInputId.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)(v3 + *a3);
  swift_beginAccess();
  void *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ResultCandidateState.nlResponseVariantResult.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.pommesInfo.getter()
{
  return swift_retain();
}

uint64_t ResultCandidateState.pommesInfo.setter(uint64_t a1)
{
  return ResultCandidateState.nlUserParses.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_pommesInfo, MEMORY[0x1E4FBC8D0]);
}

uint64_t (*ResultCandidateState.pommesInfo.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.processingStatus.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.flowOutputList.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.serverContextUpdateCandidate.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.selected.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.preExecutionDecision.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.preExcutionRuleType.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExcutionRuleType);
  swift_beginAccess();
  return *v1;
}

uint64_t (*ResultCandidateState.preExcutionRuleType.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.mitigationDecision : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 552))(v6);
}

uint64_t (*ResultCandidateState.mitigationDecision.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.routingDecision : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingDecision(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RoutingDecision(a1, (uint64_t)v6, type metadata accessor for RoutingDecision);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 576))(v6);
}

uint64_t ResultCandidateState.routingDecision.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_routingDecision;
  swift_beginAccess();
  return outlined init with copy of RoutingDecision(v3, a1, type metadata accessor for RoutingDecision);
}

uint64_t ResultCandidateState.routingDecision.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_routingDecision;
  swift_beginAccess();
  outlined assign with take of RoutingDecision(a1, v3);
  return swift_endAccess();
}

uint64_t (*ResultCandidateState.routingDecision.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.nlResponseStatusCode : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 600))(v6);
}

uint64_t (*ResultCandidateState.nlResponseStatusCode.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.overrideFTMAsPerServer.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.serverFallback.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.infoDomainFallback.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_infoDomainFallback);
  swift_beginAccess();
  return *v1;
}

uint64_t ResultCandidateState.infoDomainFallback.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_infoDomainFallback);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*ResultCandidateState.infoDomainFallback.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.fallbackParse : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 696))(v6);
}

uint64_t (*ResultCandidateState.fallbackParse.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.serverFallbackReason : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for ServerFallbackReason?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 720))(v6);
}

uint64_t ResultCandidateState.serverFallbackReason.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
}

uint64_t (*ResultCandidateState.serverFallbackReason.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.selectedUserAttribute : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for SelectedUserAttributes?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 768))(v6);
}

uint64_t ResultCandidateState.selectedUserAttribute.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selectedUserAttribute, &demangling cache variable for type metadata for SelectedUserAttributes?, a1);
}

uint64_t ResultCandidateState.selectedUserAttribute.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selectedUserAttribute, &demangling cache variable for type metadata for SelectedUserAttributes?);
}

uint64_t (*ResultCandidateState.selectedUserAttribute.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, unsigned __int8 a13)
{
  uint64_t v56 = a8;
  uint64_t v59 = a6;
  uint64_t v61 = a5;
  uint64_t v53 = a4;
  int v60 = a13;
  int v57 = a12;
  int v58 = a7;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v17 - 8);
  int v62 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v19 = (void *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_conversationUserInputId);
  *int v19 = 0;
  v19[1] = 0;
  *(void *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlUserParses) = 0;
  uint64_t v20 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlLanguageVariantResult;
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_LanguageVariantResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  uint64_t v22 = (void *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseVariantResult);
  *uint64_t v22 = 0;
  v22[1] = 0;
  *(void *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_pommesInfo) = 0;
  *(void *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_flowOutputList) = 0;
  *(void *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverContextUpdateCandidate) = 0;
  uint64_t v23 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_mitigationDecision;
  uint64_t v24 = type metadata accessor for TTResponseMessage.MitigationDecision();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(unsigned char *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_overrideFTMAsPerServer) = 0;
  *(unsigned char *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallback) = 0;
  *(unsigned char *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_infoDomainFallback) = 0;
  uint64_t v25 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_fallbackParse;
  uint64_t v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason;
  uint64_t v28 = type metadata accessor for ServerFallbackReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  uint64_t v29 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selectedUserAttribute;
  uint64_t v30 = type metadata accessor for SelectedUserAttributes();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56);
  uint64_t v54 = v31 + 56;
  BOOL v55 = v32;
  v32(v29, 1, 1, v30);
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  uint64_t v63 = a3;
  uint64_t v33 = a3;
  uint64_t v34 = v53;
  outlined init with copy of RoutingDecision(v33, v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, type metadata accessor for ResultCandidateType);
  *(unsigned char *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_processingStatus) = 0;
  *(unsigned char *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selected) = 0;
  *(unsigned char *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExecutionDecision) = 12;
  uint64_t v35 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseStatusCode;
  uint64_t v36 = *MEMORY[0x1E4FA2878];
  uint64_t v37 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104))(v35, v36, v37);
  *(unsigned char *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExcutionRuleType) = 7;
  uint64_t v38 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  uint64_t v39 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
  uint64_t v40 = v38 + *(int *)(type metadata accessor for ResultCandidateState.LoggingMetadata(0) + 20);
  uint64_t v41 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
  uint64_t v42 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  uint64_t v43 = type metadata accessor for UserID();
  uint64_t v44 = *(void *)(v43 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v42, v34, v43);
  swift_beginAccess();
  outlined assign with copy of ReferenceResolutionClientProtocol?(a9, v25, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_endAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(a10, v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, &demangling cache variable for type metadata for ExecutionLocation?);
  uint64_t v45 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason;
  swift_beginAccess();
  outlined assign with copy of ReferenceResolutionClientProtocol?(a11, v45, &demangling cache variable for type metadata for ServerFallbackReason?);
  swift_endAccess();
  uint64_t v46 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_routingDecision;
  uint64_t v47 = *MEMORY[0x1E4FA20C0];
  uint64_t v48 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104))(v46, v47, v48);
  type metadata accessor for RoutingDecision(0);
  swift_storeEnumTagMultiPayload();
  if ((v56 & 0x100000000) != 0) {
    static SelectedUserAttributes.defaultLowVoiceIdThreshold.getter();
  }
  uint64_t v49 = (uint64_t)v62;
  SelectedUserAttributes.init(score:classification:lowScoreThreshold:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)();
  outlined destroy of ReferenceResolutionClientProtocol?(a11, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of ReferenceResolutionClientProtocol?(a10, &demangling cache variable for type metadata for ExecutionLocation?);
  outlined destroy of ReferenceResolutionClientProtocol?(a9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v34, v43);
  _s14SiriKitRuntime15RoutingDecisionOWOhTm_0(v63, type metadata accessor for ResultCandidateType);
  v55(v49, 0, 1, v30);
  uint64_t v50 = v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selectedUserAttribute;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v49, v50, &demangling cache variable for type metadata for SelectedUserAttributes?);
  swift_endAccess();
  return v13;
}

uint64_t key path setter for ResultCandidateState.serverFallbackContextId : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 816))(v6);
}

void (*ResultCandidateState.serverFallbackContextId.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                             - 8)
                 + 64);
  v3[10] = malloc(v4);
  uint64_t v5 = malloc(v4);
  uint64_t v6 = OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  v3[11] = v5;
  v3[12] = v6;
  uint64_t v7 = v1 + v6;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return ResultCandidateState.serverFallbackContextId.modify;
}

void ResultCandidateState.serverFallbackContextId.modify(uint64_t a1, char a2)
{
  char v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 88);
  size_t v4 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 72) + *(void *)(*(void *)a1 + 96);
  if (a2)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(*(void *)a1 + 88), (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_beginAccess();
    outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)v4, v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_endAccess();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    swift_beginAccess();
    outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)v3, v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_endAccess();
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  free(v3);
  free(v4);

  free(v2);
}

uint64_t key path setter for ResultCandidateState.commitSignpostID : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for OSSignpostID?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 840))(v6);
}

void (*ResultCandidateState.commitSignpostID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[9] = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?)
                             - 8)
                 + 64);
  v3[10] = malloc(v4);
  uint64_t v5 = malloc(v4);
  uint64_t v6 = OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  v3[11] = v5;
  v3[12] = v6;
  uint64_t v7 = v1 + v6;
  swift_beginAccess();
  uint64_t v8 = type metadata accessor for ResultCandidateState.LoggingMetadata(0);
  v3[13] = v8;
  outlined init with copy of ReferenceResolutionClientProtocol?(v7 + *(int *)(v8 + 20), (uint64_t)v5, &demangling cache variable for type metadata for OSSignpostID?);
  return ResultCandidateState.commitSignpostID.modify;
}

void ResultCandidateState.commitSignpostID.modify(uint64_t a1, char a2)
{
  char v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 104);
  size_t v4 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void **)(*(void *)a1 + 88);
  uint64_t v6 = *(void *)(*(void *)a1 + 72) + *(void *)(*(void *)a1 + 96);
  if (a2)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(*(void *)a1 + 88), (uint64_t)v4, &demangling cache variable for type metadata for OSSignpostID?);
    swift_beginAccess();
    outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)v4, v6 + *(int *)(v3 + 20), &demangling cache variable for type metadata for OSSignpostID?);
    swift_endAccess();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for OSSignpostID?);
  }
  else
  {
    swift_beginAccess();
    outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)v5, v6 + *(int *)(v3 + 20), &demangling cache variable for type metadata for OSSignpostID?);
    swift_endAccess();
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for OSSignpostID?);
  free(v5);
  free(v4);

  free(v2);
}

uint64_t ResultCandidateState.speechContextIfApplicable.getter()
{
  uint64_t v1 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RoutingDecision(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)v3, type metadata accessor for ResultCandidateType);
  if (!swift_getEnumCaseMultiPayload()) {
    return *(void *)v3;
  }
  _s14SiriKitRuntime15RoutingDecisionOWOhTm_0((uint64_t)v3, type metadata accessor for ResultCandidateType);
  return 0;
}

uint64_t ResultCandidateState.trpContextIfApplicable.getter()
{
  uint64_t v1 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RoutingDecision(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)v3, type metadata accessor for ResultCandidateType);
  if (swift_getEnumCaseMultiPayload())
  {
    _s14SiriKitRuntime15RoutingDecisionOWOhTm_0((uint64_t)v3, type metadata accessor for ResultCandidateType);
    return 0;
  }
  type metadata accessor for TRPContext();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_release();
    return 0;
  }
  return result;
}

uint64_t ResultCandidateState.directActionContextIfApplicable.getter()
{
  uint64_t v1 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RoutingDecision(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)v3, type metadata accessor for ResultCandidateType);
  if (swift_getEnumCaseMultiPayload() == 2) {
    return *(void *)v3;
  }
  _s14SiriKitRuntime15RoutingDecisionOWOhTm_0((uint64_t)v3, type metadata accessor for ResultCandidateType);
  return 0;
}

uint64_t ResultCandidateState.__deallocating_deinit()
{
  ResultCandidateState.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResultCandidateState()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 800))();
}

id SpeechContext.defaultSpeechPackage.getter()
{
  return *(id *)(v0 + 16);
}

id SpeechContext.speechPackage.getter()
{
  return *(id *)(v0 + 16);
}

void *SpeechContext.aceRecognition.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t SpeechContext.repetitionResults.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpeechContext.repetitionResults.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SpeechContext.repetitionResults.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SpeechContext.endpointMode.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 40);
}

uint64_t SpeechContext.endpointMode.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 40) = a1;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*SpeechContext.endpointMode.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SpeechContext.init(speechPackage:)(void *a1)
{
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 1;
  *(void *)(v1 + 16) = a1;
  id v2 = a1;
  id v3 = objc_msgSend(v2, sel_recognition);
  id v4 = objc_msgSend(v3, sel_aceRecognition);

  *(void *)(v1 + 24) = v4;
  return v1;
}

uint64_t SpeechContext.utterance.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  id v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 112))(v2);
  id v6 = objc_msgSend(v5, sel_recognition);

  if (v6)
  {
    uint64_t v7 = AFSpeechRecognition.toAsrHypotheses()();

    uint64_t v8 = *(void *)(v7 + 16);
    uint64_t v9 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
    uint64_t v10 = *(void *)(v9 - 8);
    if (v8)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v4, v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v4, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v4, 1, 1, v9);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Siri_Nlu_External_AsrHypothesis();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9) != 1)
    {
      uint64_t v11 = Siri_Nlu_External_AsrHypothesis.utterance.getter();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v9);
      return v11;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  }
  return 0;
}

uint64_t AFSpeechRecognition.toAsrHypotheses()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for Siri_Nlu_External_UUID();
  uint64_t v9 = *(void *)(v144 - 8);
  MEMORY[0x1F4188790](v144);
  os_log_type_t v143 = (char *)v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v142 - 8);
  MEMORY[0x1F4188790](v142);
  id v141 = (char *)v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
  uint64_t v145 = *(void *)(v155 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v155);
  uint64_t v154 = (char *)v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v159 = (char *)v128 - v15;
  uint64_t v177 = type metadata accessor for Siri_Nlu_External_AsrTokenInformation();
  uint64_t v175 = *(void *)(v177 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v177);
  int v176 = (char *)v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  int v19 = (char *)v128 - v18;
  id v20 = objc_msgSend(v1, sel_utterances);
  if (!v20)
  {
LABEL_126:
    if (one-time initialization token for conversationBridge == -1)
    {
LABEL_127:
      uint64_t v123 = type metadata accessor for Logger();
      __swift_project_value_buffer(v123, (uint64_t)static Logger.conversationBridge);
      uint64_t v124 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v124, v125))
      {
        int v126 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v126 = 0;
        _os_log_impl(&dword_1B9C64000, v124, v125, "AFSpeechRecognition utterances/phrases is nil", v126, 2u);
        MEMORY[0x1BA9E48C0](v126, -1, -1);
      }

      return MEMORY[0x1E4FBC860];
    }
LABEL_152:
    swift_once();
    goto LABEL_127;
  }
  uint64_t v21 = v20;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFSpeechUtterance);
  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v23 = objc_msgSend(v1, sel_phrases);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    goto LABEL_126;
  }
  uint64_t v24 = v23;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
  uint64_t v165 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v25 = v22;
  unint64_t v158 = v22;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v25 = v158;
  }
  else
  {
    uint64_t v26 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v153 = v26;
  if (!v26)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v157 = v25 & 0xC000000000000001;
  uint64_t v140 = v25 & 0xFFFFFFFFFFFFFF8;
  unint64_t v139 = v25 + 32;
  uint64_t v27 = v165 & 0xFFFFFFFFFFFFFF8;
  uint64_t v160 = v165 & 0xFFFFFFFFFFFFFF8;
  if (v165 < 0) {
    uint64_t v27 = v165;
  }
  v128[1] = v27;
  unint64_t v150 = v165 & 0xC000000000000001;
  uint64_t v156 = (id *)(v165 + 32);
  uint64_t v171 = (void (**)(char *, char *, uint64_t))(v175 + 16);
  uint64_t v169 = v175 + 8;
  uint64_t v170 = v175 + 32;
  uint64_t v137 = (void (**)(char *, uint64_t))(v11 + 8);
  unsigned int v136 = (void (**)(char *, uint64_t))(v3 + 8);
  unint64_t v28 = 0;
  uint64_t v135 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v131 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  unsigned int v134 = (void (**)(char *, char *, uint64_t))(v145 + 16);
  uint64_t v133 = v145 + 32;
  uint64_t v132 = v145 + 8;
  unint64_t v29 = MEMORY[0x1E4FBC860];
  int v138 = v8;
  uint64_t v30 = v153;
  uint64_t v130 = v2;
  uint64_t v129 = v5;
  while (1)
  {
    if (v157)
    {
      id v31 = (id)MEMORY[0x1BA9E3990](v28, v25);
    }
    else
    {
      if (v28 >= *(void *)(v140 + 16)) {
        goto LABEL_150;
      }
      id v31 = *(id *)(v139 + 8 * v28);
    }
    uint64_t v32 = v31;
    BOOL v33 = __OFADD__(v28, 1);
    unint64_t v34 = v28 + 1;
    if (v33)
    {
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    unint64_t v163 = v34;
    id v35 = objc_msgSend(v31, sel_interpretationIndices);
    if (!v35) {
      goto LABEL_120;
    }
    uint64_t v36 = v35;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    unint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v38 = v37;
    unint64_t v39 = v37 >> 62;
    unint64_t v166 = v38;
    if (v39)
    {
      swift_bridgeObjectRetain();
      uint64_t v167 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v167 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unint64_t)v165 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v117 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v30 = v153;
      swift_bridgeObjectRelease();
      if (v167 != v117)
      {
LABEL_119:
        swift_bridgeObjectRelease();
LABEL_120:
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v118 = type metadata accessor for Logger();
        __swift_project_value_buffer(v118, (uint64_t)static Logger.executor);
        os_log_type_t v119 = Logger.logObject.getter();
        os_log_type_t v120 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v119, v120))
        {
          uint64_t v121 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v121 = 0;
          _os_log_impl(&dword_1B9C64000, v119, v120, "Phrase length is not the same as interpretationIndices.", v121, 2u);
          uint64_t v122 = v121;
          uint64_t v30 = v153;
          MEMORY[0x1BA9E48C0](v122, -1, -1);
        }

        goto LABEL_10;
      }
      uint64_t v184 = 0;
      unint64_t v185 = 0xE000000000000000;
      swift_bridgeObjectRetain_n();
      uint64_t v167 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v167 != *(void *)(v160 + 16)) {
        goto LABEL_119;
      }
      uint64_t v184 = 0;
      unint64_t v185 = 0xE000000000000000;
      swift_bridgeObjectRetain();
    }
    unint64_t v149 = v29;
    id v148 = v32;
    if (v167) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_105:
    unint64_t v47 = MEMORY[0x1E4FBC860];
LABEL_108:
    Siri_Nlu_External_AsrHypothesis.init()();
    uint64_t v182 = v184;
    unint64_t v183 = v185;
    uint64_t v180 = 0x2B5D735C5BLL;
    unint64_t v181 = 0xE500000000000000;
    uint64_t v178 = 32;
    unint64_t v179 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v182 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v183 = v107;
    uint64_t v108 = v141;
    static CharacterSet.whitespacesAndNewlines.getter();
    StringProtocol.trimmingCharacters(in:)();
    (*v137)(v108, v142);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Siri_Nlu_External_AsrHypothesis.utterance.setter();
    id v109 = v148;
    objc_msgSend(v148, sel_confidenceScore);
    Siri_Nlu_External_AsrHypothesis.probability.setter();
    MEMORY[0x1BA9DE0B0](v47);
    UUID.init()();
    uint64_t v110 = (uint64_t)v138;
    static ConversionUtils.convertUuidToProto(uuid:)();
    (*v136)(v5, v2);
    uint64_t v111 = v144;
    if ((*v135)(v110, 1, v144) == 1)
    {
      Siri_Nlu_External_UUID.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v110, &demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
    }
    else
    {
      (*v131)(v143, v110, v111);
    }
    unint64_t v29 = v149;
    unint64_t v112 = v159;
    Siri_Nlu_External_AsrHypothesis.id.setter();
    (*v134)(v154, v112, v155);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, v29);
    }
    unint64_t v114 = *(void *)(v29 + 16);
    unint64_t v113 = *(void *)(v29 + 24);
    if (v114 >= v113 >> 1) {
      unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v113 > 1, v114 + 1, 1, v29);
    }
    *(void *)(v29 + 16) = v114 + 1;
    uint64_t v115 = v145;
    uint64_t v116 = v155;
    (*(void (**)(unint64_t, char *, uint64_t))(v145 + 32))(v29+ ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80))+ *(void *)(v115 + 72) * v114, v154, v155);

    (*(void (**)(char *, uint64_t))(v115 + 8))(v159, v116);
    uint64_t v30 = v153;
LABEL_10:
    unint64_t v28 = v163;
    unint64_t v25 = v158;
    if (v163 == v30)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v29;
    }
  }
  if (v150)
  {
    id v40 = (id)MEMORY[0x1BA9E3990](0, v165);
  }
  else
  {
    if (!*(void *)(v160 + 16)) {
      goto LABEL_151;
    }
    id v40 = *v156;
  }
  id v41 = v40;
  if (!v39)
  {
    uint64_t v42 = *(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v43 = v40;
    if (v42) {
      goto LABEL_28;
    }
    goto LABEL_104;
  }
  swift_bridgeObjectRetain();
  uint64_t v106 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v42 = v106;
  uint64_t v43 = v41;
  if (!v42)
  {
LABEL_104:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_105;
  }
LABEL_28:
  int v44 = 0;
  unint64_t v45 = 0;
  unint64_t v162 = v166 & 0xC000000000000001;
  uint64_t v152 = v166 & 0xFFFFFFFFFFFFFF8;
  unint64_t v151 = v166 + 32;
  uint64_t v46 = 1;
  unint64_t v47 = MEMORY[0x1E4FBC860];
  unint64_t v48 = v150;
  uint64_t v161 = v42;
  while (2)
  {
    unint64_t v168 = v46;
    if (v162)
    {
      id v49 = (id)MEMORY[0x1BA9E3990](v45, v166);
    }
    else
    {
      if (v45 >= *(void *)(v152 + 16)) {
        goto LABEL_146;
      }
      id v49 = *(id *)(v151 + 8 * v45);
    }
    uint64_t v50 = v49;
    id v51 = objc_msgSend(v43, sel_interpretations);
    if (!v51)
    {
      uint64_t v98 = v43;
      goto LABEL_92;
    }
    uint64_t v52 = v51;
    unint64_t v164 = v43;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechInterpretation);
    unint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v54 = objc_msgSend(v50, sel_integerValue);
    uint64_t v55 = (uint64_t)v54;
    if (!(v53 >> 62))
    {
      if ((uint64_t)v54 < *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_36;
      }
LABEL_87:
      swift_bridgeObjectRelease();
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v100 = type metadata accessor for Logger();
      __swift_project_value_buffer(v100, (uint64_t)static Logger.conversationBridge);
      unint64_t v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v103 = 0;
        _os_log_impl(&dword_1B9C64000, v101, v102, "Invalid interpretation index.", v103, 2u);
        MEMORY[0x1BA9E48C0](v103, -1, -1);
      }

      uint64_t v98 = v164;
LABEL_92:

      unint64_t v104 = v168;
      if (v168 == v167)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_107:
        uint64_t v2 = v130;
        uint64_t v5 = v129;
        goto LABEL_108;
      }
      if (v48)
      {
        id v105 = (id)MEMORY[0x1BA9E3990](v168, v165);
      }
      else
      {
        if (v168 >= *(void *)(v160 + 16)) {
          goto LABEL_147;
        }
        id v105 = v156[v168];
      }
      uint64_t v43 = v105;
      if (__OFADD__(v104, 1))
      {
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }
      unint64_t v45 = v104;
      uint64_t v46 = v104 + 1;
      if (v104 == v161)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_107;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRetain();
  uint64_t v99 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v55 >= v99) {
    goto LABEL_87;
  }
LABEL_36:
  unint64_t v56 = (unint64_t)objc_msgSend(v50, sel_integerValue);
  int v57 = v164;
  if ((v53 & 0xC000000000000001) != 0)
  {
    id v58 = (id)MEMORY[0x1BA9E3990](v56, v53);
  }
  else
  {
    if ((v56 & 0x8000000000000000) != 0) {
      goto LABEL_148;
    }
    if (v56 >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_149;
    }
    id v58 = *(id *)(v53 + 8 * v56 + 32);
  }
  uint64_t v59 = v58;
  swift_bridgeObjectRelease();
  id v60 = objc_msgSend(v59, sel_tokens);
  if (!v60)
  {

    uint64_t v98 = v50;
    uint64_t v50 = v59;
    goto LABEL_92;
  }
  uint64_t v61 = v60;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechToken);
  unint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v62 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v63 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  os_log_type_t v146 = v59;
  id v147 = v50;
  if (!v63)
  {
LABEL_84:

    swift_bridgeObjectRelease();
    uint64_t v98 = v146;
    unint64_t v48 = v150;
    uint64_t v50 = v164;
    goto LABEL_92;
  }
  unint64_t v173 = v62;
  unint64_t v174 = v62 & 0xC000000000000001;
  uint64_t v64 = 4;
  uint64_t v172 = v63;
  while (1)
  {
    if (v174) {
      id v65 = (id)MEMORY[0x1BA9E3990](v64 - 4, v62);
    }
    else {
      id v65 = *(id *)(v62 + 8 * v64);
    }
    uint64_t v66 = v65;
    uint64_t v67 = v64 - 3;
    if (__OFADD__(v64 - 4, 1))
    {
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
    Siri_Nlu_External_AsrTokenInformation.init()();
    objc_msgSend(v66, sel_removeSpaceBefore);
    Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.setter();
    if (Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.getter())
    {
      uint64_t v68 = v184;
      unint64_t v69 = v185;
      swift_bridgeObjectRetain();
      uint64_t v70 = specialized BidirectionalCollection.last.getter(v68, v69);
      uint64_t v72 = v71;
      swift_bridgeObjectRelease();
      if (v72)
      {
        if (v70 == 32 && v72 == 0xE100000000000000)
        {
          uint64_t v73 = swift_bridgeObjectRelease();
        }
        else
        {
          char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v73 = swift_bridgeObjectRelease();
          if ((v74 & 1) == 0) {
            goto LABEL_57;
          }
        }
        if (!v44) {
          goto LABEL_144;
        }
        specialized RangeReplaceableCollection<>.removeLast()(v73);
        swift_bridgeObjectRelease();
      }
    }
LABEL_57:
    id v75 = objc_msgSend(v66, sel_text);
    if (v75)
    {
      int v76 = v75;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    Siri_Nlu_External_AsrTokenInformation.postItnText.setter();
    v77._uint64_t countAndFlagsBits = Siri_Nlu_External_AsrTokenInformation.postItnText.getter();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    id v78 = objc_msgSend(v66, sel_phoneSequence);
    if (v78)
    {
      id v79 = v78;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    Siri_Nlu_External_AsrTokenInformation.phoneSequence.setter();
    id v80 = objc_msgSend(v66, sel_ipaPhoneSequence);
    if (v80)
    {
      uint64_t v81 = v80;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    Siri_Nlu_External_AsrTokenInformation.ipaPhoneSequence.setter();
    objc_msgSend(v66, sel_removeSpaceAfter);
    Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.setter();
    Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.getter();
    Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.setter();
    objc_msgSend(v66, sel_confidenceScore);
    Siri_Nlu_External_AsrTokenInformation.confidenceScore.setter();
    Siri_Nlu_External_AsrTokenInformation.beginIndex.setter();
    int v82 = Siri_Nlu_External_AsrTokenInformation.beginIndex.getter();
    id v83 = objc_msgSend(v66, sel_text);
    if (!v83) {
      break;
    }
    uint64_t v84 = v83;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v85 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((v85 & 0x8000000000000000) != 0 || HIDWORD(v85)) {
      goto LABEL_155;
    }
    if (__CFADD__(v82, v85)) {
      goto LABEL_135;
    }
    Siri_Nlu_External_AsrTokenInformation.endIndex.setter();
    int v44 = Siri_Nlu_External_AsrTokenInformation.endIndex.getter();
    if (Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.getter())
    {
      if (__CFADD__(v44++, 1)) {
        goto LABEL_142;
      }
      v87._uint64_t countAndFlagsBits = 32;
      v87._object = (void *)0xE100000000000000;
      String.append(_:)(v87);
    }
    objc_msgSend(v66, sel_startTime);
    double v89 = v88 * 1000.0;
    if ((~*(void *)&v89 & 0x7FF0000000000000) == 0) {
      goto LABEL_136;
    }
    if (v89 <= -2147483650.0) {
      goto LABEL_137;
    }
    if (v89 >= 2147483650.0) {
      goto LABEL_138;
    }
    Siri_Nlu_External_AsrTokenInformation.startMilliSeconds.setter();
    objc_msgSend(v66, sel_endTime);
    double v91 = v90 * 1000.0;
    if ((~*(void *)&v91 & 0x7FF0000000000000) == 0) {
      goto LABEL_139;
    }
    if (v91 <= -2147483650.0) {
      goto LABEL_140;
    }
    if (v91 >= 2147483650.0) {
      goto LABEL_141;
    }
    Siri_Nlu_External_AsrTokenInformation.endMilliSeconds.setter();
    (*v171)(v176, v19, v177);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1, v47);
    }
    unint64_t v93 = *(void *)(v47 + 16);
    unint64_t v92 = *(void *)(v47 + 24);
    if (v93 >= v92 >> 1) {
      unint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1, v47);
    }
    *(void *)(v47 + 16) = v93 + 1;
    uint64_t v94 = v175;
    unint64_t v95 = v47
        + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))
        + *(void *)(v94 + 72) * v93;
    uint64_t v96 = v177;
    (*(void (**)(unint64_t, char *, uint64_t))(v175 + 32))(v95, v176, v177);

    (*(void (**)(char *, uint64_t))(v94 + 8))(v19, v96);
    ++v64;
    BOOL v97 = v67 == v172;
    unint64_t v62 = v173;
    if (v97) {
      goto LABEL_84;
    }
  }
  __break(1u);
LABEL_155:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SpeechContext.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SpeechContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t TRPContext.selectedTCUId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TRPContext.selectedTCUId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TRPContext.selectedTCUId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t TRPContext.pommesTCUId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TRPContext.pommesTCUId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TRPContext.pommesTCUId.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

id TRPContext.speechPackage.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))(*v0 + 216))();
  if (!v3)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    swift_retain();
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = v1;
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      v38[0] = v21;
      *(_DWORD *)id v20 = 136315138;
      uint64_t v22 = v18[7];
      unint64_t v23 = v18[8];
      swift_bridgeObjectRetain();
      *(void *)&v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v17, v19, "Warning: Selected TCU is not known for TRP Candidate %s, falling back on last TCU in the list for speechPackage.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v21, -1, -1);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
    else
    {

      swift_release();
    }
    uint64_t v24 = (void *)v18[2];
    goto LABEL_29;
  }
  unint64_t v4 = v3;
  uint64_t v35 = v2;
  uint64_t v5 = v0[9];
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRetain();
LABEL_21:
    long long v39 = 0u;
    long long v40 = 0u;
    *(_OWORD *)unint64_t v38 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v7 = v5 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v7, (uint64_t)v37, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
    uint64_t v8 = *(void **)&v37[0];
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v37 + 8, (uint64_t)v36);
    id v9 = objc_msgSend(v8, sel_tcuId);
    if (!v9)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
      goto LABEL_5;
    }
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (v11 == v35 && v4 == v13) {
      break;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
    if (v15) {
      goto LABEL_33;
    }
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v37, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
    v7 += 48;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v36);
LABEL_33:
  swift_bridgeObjectRelease();
  *(_OWORD *)unint64_t v38 = v37[0];
  long long v39 = v37[1];
  long long v40 = v37[2];
  swift_bridgeObjectRelease();
  id v33 = v38[0];
  if (!v38[0])
  {
LABEL_22:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v38, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState)?);
    goto LABEL_23;
  }
  id v34 = objc_msgSend(v38[0], sel_speechPackage);

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v38[1]);
  if (v34)
  {
    swift_bridgeObjectRelease();
    return v34;
  }
LABEL_23:
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    unint64_t v29 = (void *)swift_slowAlloc();
    v38[0] = v29;
    *(_DWORD *)uint64_t v28 = 136315394;
    uint64_t v30 = v1[7];
    unint64_t v31 = v1[8];
    swift_bridgeObjectRetain();
    *(void *)&v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v4, (uint64_t *)v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v26, v27, "Warning: TRP Candidate %s does not contain speech info for selected TCU ID %s, falling back on last TCU in the list for speechPackage.", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v29, -1, -1);
    MEMORY[0x1BA9E48C0](v28, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v24 = (void *)v1[2];
LABEL_29:

  return v24;
}

uint64_t TRPContext.selectedTCUPackage.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*v0 + 216))();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = v0[9];
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    swift_bridgeObjectRetain();
LABEL_15:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v6 = v1;
  uint64_t v7 = v4 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v7, (uint64_t)v19, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
    uint64_t v8 = *(void **)&v19[0];
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v19 + 8, (uint64_t)v18);
    id v9 = objc_msgSend(v8, sel_tcuId);
    if (!v9)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      goto LABEL_5;
    }
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (v11 == v6 && v3 == v13) {
      break;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    if (v15) {
      goto LABEL_20;
    }
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
    v7 += 48;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
LABEL_20:
  swift_bridgeObjectRelease();
  long long v20 = v19[0];
  long long v21 = v19[1];
  long long v22 = v19[2];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v20;
  if ((void)v20)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v20 + 8);
    return v16;
  }
LABEL_16:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v20, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState)?);
  return 0;
}

id TRPContext.init(requestMessage:)(void *a1)
{
  uint64_t v2 = v1;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  swift_retain();
  uint64_t v4 = TRPCandidateRequestMessage.tcuToContextList.getter();
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    memset(v19, 0, sizeof(v19));
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v4 + 48 * v5 - 16, (uint64_t)v19, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)&v19[0];
  if (!*(void *)&v19[0])
  {
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState)?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v16, v17, "Could not build TRPContext from TRPCandidateRequestMessage: No TCU's found", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for TRPContext();
    swift_deallocPartialClassInstance();
    return 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19 + 8);
  id v7 = a1;
  uint64_t v8 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v10 = v9;

  *(void *)(v2 + 56) = v8;
  *(void *)(v2 + 64) = v10;
  *(void *)(v2 + 72) = TRPCandidateRequestMessage.tcuToContextList.getter();
  swift_release();
  id result = objc_msgSend(v6, sel_speechPackage);
  if (result)
  {
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 40) = 0;
    *(unsigned char *)(v2 + 48) = 1;
    *(void *)(v2 + 16) = result;
    id v12 = result;
    id v13 = objc_msgSend(v12, sel_recognition);
    id v14 = objc_msgSend(v13, sel_aceRecognition);

    *(void *)(v2 + 24) = v14;
    return (id)v2;
  }
  __break(1u);
  return result;
}

void TRPContext.__allocating_init(speechPackage:)()
{
}

void TRPContext.init(speechPackage:)()
{
}

uint64_t TRPContext.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t TRPContext.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TRPContext.__deallocating_deinit()
{
  TRPContext.deinit();

  return swift_deallocClassInstance();
}

uint64_t DirectActionContext.directAction.getter(uint64_t a1)
{
  return a1;
}

uint64_t DirectActionContext.requestExecutionParameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TextContext.utterance.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextContext.trpId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextContext.tcuId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

Swift::String __swiftcall String.sanitize()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  v15[2] = 0x2B5D735C5BLL;
  v15[3] = 0xE500000000000000;
  v15[0] = 32;
  v15[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v17 = v8;
  static CharacterSet.whitespacesAndNewlines.getter();
  uint64_t v9 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  uint64_t v12 = v9;
  id v13 = v11;
  result._object = v13;
  result._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t specialized ResultCandidateProcessingStatus.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12) {
    return 18;
  }
  else {
    return v0;
  }
}

uint64_t outlined init with copy of RoutingDecision(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ResultCandidateType(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ResultCandidateType);
}

uint64_t outlined assign with take of RoutingDecision(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingDecision(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s14SiriKitRuntime15RoutingDecisionOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for TRPContext()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type ResultCandidateProcessingStatus and conformance ResultCandidateProcessingStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type ResultCandidateProcessingStatus and conformance ResultCandidateProcessingStatus;
  if (!lazy protocol witness table cache variable for type ResultCandidateProcessingStatus and conformance ResultCandidateProcessingStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResultCandidateProcessingStatus and conformance ResultCandidateProcessingStatus);
  }
  return result;
}

uint64_t sub_1B9FB4D0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 280))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9FB4D60(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 288);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B9FB4DD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 304))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FB4E24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 312);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9FB4E80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 328))();
}

uint64_t sub_1B9FB4ED0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 352))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9FB4F24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 360);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B9FB4F94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 376))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FB4FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 384);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B9FB5044@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 400))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FB5098(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 408))(*a1);
}

uint64_t sub_1B9FB50E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 424))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FB513C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 432);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9FB5198@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 448))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FB51EC(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 456);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9FB524C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 472))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9FB52A4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 480))(*a1);
}

uint64_t sub_1B9FB52F4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 496))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FB5348(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 504))(*a1);
}

uint64_t sub_1B9FB5398@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 520))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FB53EC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 528))(*a1);
}

uint64_t sub_1B9FB543C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 544))();
}

uint64_t sub_1B9FB548C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 568))();
}

uint64_t sub_1B9FB54DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 592))();
}

uint64_t sub_1B9FB552C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 616))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9FB5584(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 624))(*a1);
}

uint64_t sub_1B9FB55D4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 640))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9FB562C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 648))(*a1);
}

uint64_t sub_1B9FB567C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 664))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9FB56D4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 672))(*a1);
}

uint64_t sub_1B9FB5724(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 688))();
}

uint64_t sub_1B9FB5774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 712))();
}

uint64_t sub_1B9FB57C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 760))();
}

uint64_t sub_1B9FB5814(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 808))();
}

uint64_t sub_1B9FB5864(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 832))();
}

uint64_t sub_1B9FB58B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FB5900(uint64_t a1, uint64_t a2)
{
  id v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9FB5954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B9FB59A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)a2 + 152))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B9FB59FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9FB5A48(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 224);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B9FB5AB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 240))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9FB5AFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 248);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

unsigned char *storeEnumTagSinglePayload for ResultCandidateProcessingStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9FB5C30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResultCandidateProcessingStatus()
{
  return &type metadata for ResultCandidateProcessingStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResultCandidateType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        uint64_t v10 = a2[3];
        a1[2] = a2[2];
        a1[3] = v10;
        uint64_t v11 = a2[4];
        uint64_t v12 = a2[5];
        a1[4] = v11;
        a1[5] = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v8 = type metadata accessor for GestureInput();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        break;
      default:
        *a1 = *a2;
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ResultCandidateType(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t result = swift_release();
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 2:
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t v3 = type metadata accessor for GestureInput();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for ResultCandidateType(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      uint64_t v8 = a2[4];
      uint64_t v9 = a2[5];
      a1[4] = v8;
      a1[5] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 2u:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v5 = type metadata accessor for GestureInput();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      break;
    default:
      *a1 = *a2;
      swift_retain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for ResultCandidateType(void *a1, void *a2)
{
  if (a1 != a2)
  {
    _s14SiriKitRuntime15RoutingDecisionOWOhTm_0((uint64_t)a1, type metadata accessor for ResultCandidateType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v4 = type metadata accessor for GestureInput();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        break;
      default:
        *a1 = *a2;
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ResultCandidateType(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = type metadata accessor for GestureInput();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ResultCandidateType(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s14SiriKitRuntime15RoutingDecisionOWOhTm_0((uint64_t)a1, type metadata accessor for ResultCandidateType);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = type metadata accessor for GestureInput();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ResultCandidateType()
{
  uint64_t result = type metadata accessor for GestureInput();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RoutingDecision(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v6 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for RoutingDecision(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for RoutingDecision(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for RoutingDecision(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s14SiriKitRuntime15RoutingDecisionOWOhTm_0(a1, type metadata accessor for RoutingDecision);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for RoutingDecision(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for RoutingDecision(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s14SiriKitRuntime15RoutingDecisionOWOhTm_0(a1, type metadata accessor for RoutingDecision);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for RoutingDecision()
{
  uint64_t result = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for ResultCandidateState()
{
  return type metadata accessor for ResultCandidateState(0);
}

uint64_t type metadata accessor for ResultCandidateState(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ResultCandidateState);
}

void type metadata completion function for ResultCandidateState()
{
  type metadata accessor for ResultCandidateType(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UserID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for ExecutionLocation?(319, &lazy cache variable for type metadata for ExecutionLocation?, MEMORY[0x1E4FA5260]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for ExecutionLocation?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?, MEMORY[0x1E4FA2980]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for ExecutionLocation?(319, (unint64_t *)&lazy cache variable for type metadata for TTResponseMessage.MitigationDecision?, MEMORY[0x1E4FA2088]);
          if (v4 <= 0x3F)
          {
            type metadata accessor for RoutingDecision(319);
            if (v5 <= 0x3F)
            {
              type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
              if (v6 <= 0x3F)
              {
                type metadata accessor for ExecutionLocation?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, MEMORY[0x1E4FA2990]);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for ExecutionLocation?(319, (unint64_t *)&lazy cache variable for type metadata for ServerFallbackReason?, MEMORY[0x1E4FA2600]);
                  if (v8 <= 0x3F)
                  {
                    type metadata accessor for ResultCandidateState.LoggingMetadata(319);
                    if (v9 <= 0x3F)
                    {
                      type metadata accessor for ExecutionLocation?(319, &lazy cache variable for type metadata for SelectedUserAttributes?, MEMORY[0x1E4FA2698]);
                      if (v10 <= 0x3F) {
                        swift_updateClassMetadata2();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for ResultCandidateState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ResultCandidateState);
}

uint64_t dispatch thunk of ResultCandidateState.conversationUserInputId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of ResultCandidateState.conversationUserInputId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of ResultCandidateState.conversationUserInputId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of ResultCandidateState.nlUserParses.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of ResultCandidateState.nlUserParses.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of ResultCandidateState.nlUserParses.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of ResultCandidateState.nlLanguageVariantResult.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of ResultCandidateState.nlLanguageVariantResult.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of ResultCandidateState.nlLanguageVariantResult.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseVariantResult.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseVariantResult.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseVariantResult.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of ResultCandidateState.pommesInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of ResultCandidateState.pommesInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of ResultCandidateState.pommesInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of ResultCandidateState.processingStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of ResultCandidateState.processingStatus.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of ResultCandidateState.processingStatus.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of ResultCandidateState.flowOutputList.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of ResultCandidateState.flowOutputList.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of ResultCandidateState.flowOutputList.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of ResultCandidateState.serverContextUpdateCandidate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of ResultCandidateState.serverContextUpdateCandidate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of ResultCandidateState.serverContextUpdateCandidate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of ResultCandidateState.selected.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of ResultCandidateState.selected.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of ResultCandidateState.selected.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of ResultCandidateState.preExecutionDecision.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of ResultCandidateState.preExecutionDecision.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of ResultCandidateState.preExecutionDecision.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of ResultCandidateState.preExcutionRuleType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of ResultCandidateState.preExcutionRuleType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of ResultCandidateState.preExcutionRuleType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of ResultCandidateState.mitigationDecision.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of ResultCandidateState.mitigationDecision.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of ResultCandidateState.mitigationDecision.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of ResultCandidateState.routingDecision.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of ResultCandidateState.routingDecision.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of ResultCandidateState.routingDecision.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseStatusCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseStatusCode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseStatusCode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of ResultCandidateState.overrideFTMAsPerServer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of ResultCandidateState.overrideFTMAsPerServer.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of ResultCandidateState.overrideFTMAsPerServer.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallback.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallback.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallback.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of ResultCandidateState.infoDomainFallback.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of ResultCandidateState.infoDomainFallback.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of ResultCandidateState.infoDomainFallback.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of ResultCandidateState.fallbackParse.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of ResultCandidateState.fallbackParse.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of ResultCandidateState.fallbackParse.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackReason.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackReason.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackReason.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of ResultCandidateState.selectedUserAttribute.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of ResultCandidateState.selectedUserAttribute.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of ResultCandidateState.selectedUserAttribute.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of ResultCandidateState.__allocating_init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, unint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, void, unint64_t))(v8 + 792))(a1, a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6, a7 & 1, a8 | ((HIDWORD(a8) & 1) << 32));
}

uint64_t dispatch thunk of ResultCandidateState.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackContextId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackContextId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackContextId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of ResultCandidateState.commitSignpostID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of ResultCandidateState.commitSignpostID.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of ResultCandidateState.commitSignpostID.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of ResultCandidateState.utteranceIfAvailable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of ResultCandidateState.speechContextIfApplicable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of ResultCandidateState.trpContextIfApplicable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of ResultCandidateState.directActionContextIfApplicable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t type metadata accessor for SpeechContext()
{
  return self;
}

uint64_t method lookup function for SpeechContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SpeechContext);
}

uint64_t dispatch thunk of SpeechContext.speechPackage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SpeechContext.repetitionResults.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SpeechContext.repetitionResults.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SpeechContext.repetitionResults.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SpeechContext.endpointMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SpeechContext.endpointMode.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 152))(a1, a2 & 1);
}

uint64_t dispatch thunk of SpeechContext.endpointMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SpeechContext.__allocating_init(speechPackage:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of SpeechContext.utterance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t method lookup function for TRPContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TRPContext);
}

uint64_t dispatch thunk of TRPContext.selectedTCUId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of TRPContext.selectedTCUId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of TRPContext.selectedTCUId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of TRPContext.pommesTCUId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of TRPContext.pommesTCUId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of TRPContext.pommesTCUId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of TRPContext.selectedTCUPackage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of TRPContext.__allocating_init(requestMessage:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t destroy for DirectActionContext()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for DirectActionContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DirectActionContext(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DirectActionContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DirectActionContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DirectActionContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DirectActionContext()
{
  return &type metadata for DirectActionContext;
}

uint64_t destroy for TextContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for TextContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TextContext(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for TextContext(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextContext()
{
  return &type metadata for TextContext;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResultCandidateState.LoggingMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = (char *)a1 + v11;
    id v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for OSSignpostID();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for ResultCandidateState.LoggingMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v6, v7);
  }
  return result;
}

char *initializeWithCopy for ResultCandidateState.LoggingMetadata(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for ResultCandidateState.LoggingMetadata(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for OSSignpostID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for ResultCandidateState.LoggingMetadata(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for ResultCandidateState.LoggingMetadata(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for OSSignpostID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResultCandidateState.LoggingMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9FB8D98);
}

uint64_t sub_1B9FB8D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for ResultCandidateState.LoggingMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9FB8EAC);
}

uint64_t sub_1B9FB8EAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for ResultCandidateState.LoggingMetadata()
{
  type metadata accessor for ExecutionLocation?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ExecutionLocation?(319, &lazy cache variable for type metadata for OSSignpostID?, MEMORY[0x1E4FBD318]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for ExecutionLocation?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t static ReuseEagerChildRequestForIFFeatureFlag.isEnabled.getter()
{
  uint64_t v3 = &type metadata for ReuseEagerChildRequestForIFFeatureFlag;
  unint64_t v4 = lazy protocol witness table accessor for type ReuseEagerChildRequestForIFFeatureFlag and conformance ReuseEagerChildRequestForIFFeatureFlag();
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  return v0 & 1;
}

const char *ReuseEagerChildRequestForIFFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *ReuseEagerChildRequestForIFFeatureFlag.feature.getter()
{
  return "reuseEagerChildRequestForIF";
}

uint64_t static ReuseEagerChildRequestForIFFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void ReuseEagerChildRequestForIFFeatureFlag.hash(into:)()
{
}

Swift::Int ReuseEagerChildRequestForIFFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance ReuseEagerChildRequestForIFFeatureFlag()
{
  return "reuseEagerChildRequestForIF";
}

unsigned char *storeEnumTagSinglePayload for ReuseEagerChildRequestForIFFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9FB9300);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReuseEagerChildRequestForIFFeatureFlag()
{
  return &type metadata for ReuseEagerChildRequestForIFFeatureFlag;
}

uint64_t NLRoutingDecisionMessage.RoutingDecision.genAIFallbackSuppressReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision.SiriXRoute();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v4) == *MEMORY[0x1E4FA20D0])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    NLRoutingDecisionMessage.RoutingDecision.SiriXRoute.genAIFallbackSuppressReason.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v13 = type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

uint64_t RunLocation.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6F69747563657845;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t static RunLocation.convert(aceRunLocation:)(uint64_t a1, void *a2)
{
  return specialized static RunLocation.convert(aceRunLocation:)(a1, a2) & 1;
}

SiriKitRuntime::RunLocation_optional __swiftcall RunLocation.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunLocation.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = SiriKitRuntime_RunLocation_executionDevice;
  }
  else {
    v4.value = SiriKitRuntime_RunLocation_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunLocation(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    unint64_t v3 = 0x6F69747563657845;
  }
  else {
    unint64_t v3 = 0xD000000000000010;
  }
  if (v2) {
    unint64_t v4 = 0x80000001BA0606E0;
  }
  else {
    unint64_t v4 = 0xEF6563697665446ELL;
  }
  if (*a2) {
    unint64_t v5 = 0x6F69747563657845;
  }
  else {
    unint64_t v5 = 0xD000000000000010;
  }
  if (*a2) {
    unint64_t v6 = 0xEF6563697665446ELL;
  }
  else {
    unint64_t v6 = 0x80000001BA0606E0;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunLocation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLocation()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunLocation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RunLocation@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunLocation.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLocation(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000010;
  if (*v1) {
    unint64_t v2 = 0x6F69747563657845;
  }
  unint64_t v3 = 0x80000001BA0606E0;
  if (*v1) {
    unint64_t v3 = 0xEF6563697665446ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t lazy protocol witness table accessor for type RunLocation and conformance RunLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLocation and conformance RunLocation;
  if (!lazy protocol witness table cache variable for type RunLocation and conformance RunLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLocation and conformance RunLocation);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RunLocation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9FB9A5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RunLocation()
{
  return &type metadata for RunLocation;
}

uint64_t RunSiriKitExecutorProcessor.__allocating_init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:meetsUserSessionThreshold:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:muxContextMessage:previousUserId:userSessionState:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  swift_allocObject();
  uint64_t v29 = specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:meetsUserSessionThreshold:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:muxContextMessage:previousUserId:userSessionState:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(a3);
  return v29;
}

uint64_t RSKESource.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6C61636F6CLL;
  }
  if (a1 == 1) {
    return 0x65746F6D6572;
  }
  return 0x726576726573;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RSKESource(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  uint64_t v3 = 0x65746F6D6572;
  if (v2 != 1) {
    uint64_t v3 = 0x726576726573;
  }
  if (*a1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6C61636F6CLL;
  }
  if (v2) {
    unint64_t v5 = 0xE600000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  uint64_t v6 = 0x65746F6D6572;
  if (*a2 != 1) {
    uint64_t v6 = 0x726576726573;
  }
  if (*a2) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0x6C61636F6CLL;
  }
  if (*a2) {
    unint64_t v8 = 0xE600000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  if (v4 == v7 && v5 == v8) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RSKESource()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RSKESource()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RSKESource()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RSKESource@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized RSKESource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RSKESource(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = 0x65746F6D6572;
  if (v2 != 1) {
    uint64_t v4 = 0x726576726573;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x6C61636F6CLL;
  }
  if (!v5) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

id RunSiriKitExecutorProcessor.command.getter()
{
  return *(id *)(v0 + 16);
}

id RunSiriKitExecutorProcessor.executionContext.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t RunSiriKitExecutorProcessor.reply.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v1);
  return v1;
}

uint64_t RunSiriKitExecutorProcessor.executionOutputSubmitter.getter()
{
  return swift_retain();
}

uint64_t RunSiriKitExecutorProcessor.executionClient.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, a1);
}

uint64_t RunSiriKitExecutorProcessor.contextUpdater.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 96, a1, &demangling cache variable for type metadata for ContextUpdating?);
}

uint64_t RunSiriKitExecutorProcessor.requestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RunSiriKitExecutorProcessor.assistantId.getter()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RunSiriKitExecutorProcessor.source.getter()
{
  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t RunSiriKitExecutorProcessor.requestDispatcherServiceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RunSiriKitExecutorProcessor.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t RunSiriKitExecutorProcessor.requestType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType;
  uint64_t v4 = type metadata accessor for RequestType();
  BOOL v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t RunSiriKitExecutorProcessor.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t RunSiriKitExecutorProcessor.messagePublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher, a1);
}

uint64_t RunSiriKitExecutorProcessor.isMuxEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_isMuxEnabled);
}

uint64_t RunSiriKitExecutorProcessor.plannerInvocationId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RunSiriKitExecutorProcessor.previousUserId.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_previousUserId, a1, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

uint64_t RunSiriKitExecutorProcessor.userSessionState.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userSessionState);
  outlined copy of UserSessionState(v1, *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userSessionState + 8));
  return v1;
}

void *RunSiriKitExecutorProcessor.muxContextMessage.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_muxContextMessage);
  id v2 = v1;
  return v1;
}

uint64_t key path setter for RunSiriKitExecutorProcessor.userId : RunSiriKitExecutorProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 312))(v6);
}

uint64_t RunSiriKitExecutorProcessor.userId.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userId;
  swift_beginAccess();
  outlined assign with take of UserID?(a1, v3);
  return swift_endAccess();
}

uint64_t (*RunSiriKitExecutorProcessor.userId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RunSiriKitExecutorProcessor.meetsUserSessionThreshold.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_meetsUserSessionThreshold);
  swift_beginAccess();
  return *v1;
}

uint64_t RunSiriKitExecutorProcessor.meetsUserSessionThreshold.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_meetsUserSessionThreshold);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*RunSiriKitExecutorProcessor.meetsUserSessionThreshold.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RunSiriKitExecutorProcessor.outputCounter.setter(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_outputCounter);
  uint64_t result = swift_beginAccess();
  _DWORD *v3 = a1;
  return result;
}

uint64_t (*RunSiriKitExecutorProcessor.loggedStartOfCall.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RunSiriKitExecutorProcessor.resultCandidateId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_resultCandidateId);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*RunSiriKitExecutorProcessor.resultCandidateId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RunSiriKitExecutorProcessor.requestFinished.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void key path setter for RunSiriKitExecutorProcessor.flowPluginInfo : RunSiriKitExecutorProcessor(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void **)(*a2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_flowPluginInfo);
  swift_beginAccess();
  uint64_t v4 = *v3;
  _DWORD *v3 = v2;
  id v5 = v2;
}

uint64_t RunSiriKitExecutorProcessor.asyncWork.getter()
{
  return swift_retain();
}

uint64_t RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:meetsUserSessionThreshold:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:muxContextMessage:previousUserId:userSessionState:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v32 = specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:meetsUserSessionThreshold:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:muxContextMessage:previousUserId:userSessionState:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(a3);
  return v32;
}

uint64_t RunSiriKitExecutorProcessor.isGestureInvocation(rske:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_parse);
  if (v1
    && (uint64_t v2 = v1, v3 = objc_msgSend(v1, sel_directInvocation), v2, v3)
    && (id v4 = objc_msgSend(v3, sel_invocationIdentifier), v3, v4))
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    if (v5 == static SiriKitDirectInvocationPayloads.headGestureIdentifier.getter() && v7 == v8)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    else
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "Unable to get the payload identifier, not a gesture invocation", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }

    return 0;
  }
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.handleCancel()()
{
  id v1 = v0;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "Cancelling RSKE..", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  if ((*(uint64_t (**)(void))(*v1 + 424))())
  {
    oschar log = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v6, "RSKE request already finished. Ignoring cancellation..", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
  }
  else
  {
    if (v1[18])
    {
      uint64_t v8 = v1[17];
      unint64_t v9 = v1[18];
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0xE000000000000000;
    }
    type metadata accessor for CancelExecutionTurn();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = v9;
    uint64_t v11 = v1[10];
    uint64_t v12 = v1[11];
    __swift_project_boxed_opaque_existential_1(v1 + 7, v11);
    uint64_t v13 = *(void *)((char *)v1
                    + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_rskeProcessorExecutionDelegate);
    os_log_type_t v14 = *(void (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v12 + 40);
    swift_bridgeObjectRetain();
    v14(v10, v13, &protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate, v11, v12);
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v22 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v19 = CancelExecutionTurn.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v15, v16, "Successfully sent: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      swift_release();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(uint64_t))(*v1 + 432))(1);
  }
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.handleRuntimeError(error:)(NSError *error)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1B9C64000, v5, v6, "Handling Runtime error for RSKE", v7, 2u);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  if ((*(uint64_t (**)(void))(*v2 + 424))())
  {
    oschar log = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v8, "RSKE request already finished. Ignoring runtime error..", v9, 2u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
  }
  else
  {
    uint64_t v10 = (void (*)(void, NSError *))v2[4];
    if (v10) {
      v10(0, error);
    }
    uint64_t v11 = *(void (**)(uint64_t))(*v2 + 432);
    v11(1);
  }
}

uint64_t closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a8;
  v8[14] = v12;
  v8[11] = a6;
  v8[12] = a7;
  v8[9] = a4;
  v8[10] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:), v9, 0);
}

uint64_t closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)()
{
  id v1 = *(void **)(v0 + 72);
  uint64_t v2 = v1[18];
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 88);
    uint64_t v5 = v1[17];
    uint64_t v6 = v1[23];
    uint64_t v7 = (*(uint64_t (**)(void))(*v1 + 352))();
    (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, void, void, uint64_t))(*(void *)v6 + 160))(v7, 1, v4 != 0, v5, v2, 0, 0, v3);
    os_log_type_t v8 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(*v1 + 368))(v0 + 16);
    if (!__OFADD__(*v9, 1))
    {
      ++*v9;
      v8(v0 + 16, 0);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_12;
  }
  if (one-time initialization token for conversationBridge != -1) {
LABEL_12:
  }
    swift_once();
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1B9C64000, v11, v12, "Failed to find requestId for logging self message", v13, 2u);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }

LABEL_8:
  (*(void (**)(void, void))(v0 + 96))(*(void *)(v0 + 112), *(void *)(v0 + 80));
  os_log_type_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t RunSiriKitExecutorProcessor.acquireConversationUserInput(forUserId:requestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, 0x80000001BA064A00, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v7, v8, "Cannot do %s for RSKE initiated execution", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }

  return a5(0);
}

uint64_t RunSiriKitExecutorProcessor.close(withExecutionOutput:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v1 + 544))(a1, 0);
}

void RunSiriKitExecutorProcessor.postToMessageBus(message:completion:)(void *a1, void (*a2)(uint64_t, void))
{
  uint64_t v3 = v2;
  type metadata accessor for RequestMessageBase();
  if (swift_dynamicCastClass())
  {
    id v24 = a1;
    uint64_t v6 = RequestMessageBase.requestId.getter();
    uint64_t v8 = *(void *)(v3 + 144);
    if (v8)
    {
      if (v6 == *(void *)(v3 + 136) && v8 == v7)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl(&dword_1B9C64000, v16, v17, "Posting message received from Flow", v18, 2u);
          MEMORY[0x1BA9E48C0](v18, -1, -1);
        }

        __swift_project_boxed_opaque_existential_1((void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher), *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher + 24));
        dispatch thunk of MessagePublishing.postMessage(_:)();
        a2(1, 0);

        return;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_13;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v25 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001BA064B90, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v20, v21, "Skipping: %s,  Message requestId doesn't match current requestId", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }

    a2(0, 0);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v25 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001BA064B90, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v10, v11, "Skipping: %s,  Message from flow is not of type RequestMessageBase", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v13, -1, -1);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }

    a2(0, 0);
  }
}

void RunSiriKitExecutorProcessor.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v21 = a3;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v22 = v20;
    *(_DWORD *)uint64_t v12 = 136315138;
    id v13 = objc_msgSend(v9, sel_debugDescription);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3 = v21;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v10, v11, "<<<--- %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
  }
  if ((*(uint64_t (**)(void))(*(void *)v4 + 424))())
  {
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1B9C64000, v17, v18, "Ignoring close() because request already finished", v19, 2u);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }
  }
  else
  {
    RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(v9, a2, a3, 0);
  }
}

uint64_t RunSiriKitExecutorProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "Execution requested server fallback from an RSKE. Returning a RunSiriKitExecutorCompleted with needsServerExecution=true", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  specialized static RunSiriKitExecutorProcessor.replyRunSiriKitExecutorCompleted(forCommand:needsUserInput:needsServerExecution:replyHandler:)(*(void **)(v1 + 16), 0, 1, *(void *)(v1 + 32), *(void *)(v1 + 40));
  (*(void (**)(uint64_t))(*(void *)v1 + 432))(1);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)v1 + 616);

  return v6();
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1B9C64000, v4, v5, "Execution requested fallback to info domain from an RSKE. Returning a RunSiriKitExecutorCompleted with needsServerExecution=true", v6, 2u);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }

  specialized static RunSiriKitExecutorProcessor.replyRunSiriKitExecutorCompleted(forCommand:needsUserInput:needsServerExecution:replyHandler:)(*(void **)(v2 + 16), 0, 1, *(void *)(v2 + 32), *(void *)(v2 + 40));
  (*(void (**)(uint64_t))(*(void *)v2 + 432))(1);
  uint64_t v7 = *(void (**)(void))(*(void *)v2 + 616);

  v7();
}

uint64_t closure #1 in RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  os_log_type_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *MEMORY[0x1E4FA2328];
  uint64_t v10 = type metadata accessor for MessageSource();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  FlowPluginInfoMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.assistantId.setter();
  outlined init with copy of ReferenceResolutionClientProtocol?(a2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  FlowPluginInfoMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.requestId.setter();
  FlowPluginInfoMessage.Builder.resultCandidateId.setter();
  FlowPluginInfoMessage.Builder.supportsOnDeviceNL.setter();
  return FlowPluginInfoMessage.Builder.isPersonalRequest.setter();
}

uint64_t closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[12] = a7;
  v8[13] = a8;
  v8[10] = a5;
  v8[11] = a6;
  v8[9] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:), v9, 0);
}

void (*closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)())(void *, void)
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  os_log_type_t v5 = (void *)v0[9];
  uint64_t v6 = v5[23];
  uint64_t v7 = (*(uint64_t (**)(void))(*v5 + 352))();
  (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, void, void, uint64_t))(*(void *)v6 + 160))(v7, 1, v4 != 0, v3, v2, 0, 0, v1);
  uint64_t result = (void (*)(void *, void))(*(uint64_t (**)(void *))(*v5 + 368))(v0 + 2);
  if (__OFADD__(*v9, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v9;
    result(v0 + 2, 0);
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return (void (*)(void *, void))v10();
  }
  return result;
}

uint64_t closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  *(void *)(v4 + 128) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater(), v5, 0);
}

uint64_t closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater()()
{
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 120) + 96, v0 + 56, &demangling cache variable for type metadata for ContextUpdating?);
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 120);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
    uint64_t v2 = *(void *)(*(void *)(v1 + 48) + 16);
    *(void *)(v0 + 136) = v2;
    uint64_t v6 = (uint64_t (*)(void))(*(void *)(*(void *)v2 + 136) + **(int **)(*(void *)v2 + 136));
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v3;
    void *v3 = v0;
    v3[1] = closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater();
    uint64_t v4 = v6;
  }
  else
  {
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ContextUpdating?);
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:meetsUserSessionThreshold:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:muxContextMessage:previousUserId:userSessionState:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v30 = v29;
  uint64_t v61 = v29 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userId;
  uint64_t v36 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v61, 1, 1, v36);
  *(unsigned char *)(v29 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_loggedStartOfCall) = 0;
  unint64_t v37 = (void *)(v29 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_resultCandidateId);
  *unint64_t v37 = 0;
  v37[1] = 0;
  *(unsigned char *)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestFinished) = 0;
  unint64_t v38 = (void **)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_flowPluginInfo);
  *(void *)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_flowPluginInfo) = 0;
  uint64_t v39 = OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_asyncWork;
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v41 = swift_allocObject();
  *(_DWORD *)(v41 + 16) = 0;
  *(void *)(v40 + 24) = v41;
  *(void *)(v30 + v39) = v40;
  *(void *)(v30 + 16) = a1;
  *(void *)(v30 + 24) = a2;
  *(void *)(v30 + 32) = a3;
  *(void *)(v30 + 40) = a4;
  *(void *)(v30 + 48) = a5;
  uint64_t v63 = a6;
  outlined init with copy of ReferenceResolutionClientProtocol(a6, v30 + 56);
  outlined init with copy of ReferenceResolutionClientProtocol?(a7, v30 + 96, &demangling cache variable for type metadata for ContextUpdating?);
  *(unsigned char *)(v30 + 168) = a10;
  *(void *)(v30 + 152) = a8;
  *(void *)(v30 + 160) = a9;
  *(void *)(v30 + 136) = a11;
  *(void *)(v30 + 144) = a12;
  *(_DWORD *)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_outputCounter) = 0;
  *(void *)(v30 + 176) = a14;
  *(void *)(v30 + 184) = a13;
  swift_beginAccess();
  *unint64_t v37 = a15;
  v37[1] = a16;
  id v42 = a1;
  id v43 = a2;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(a3);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  int v44 = *v38;
  *unint64_t v38 = a17;
  id v45 = a17;

  uint64_t v46 = v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType;
  uint64_t v47 = type metadata accessor for RequestType();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v62 = v47;
  (*(void (**)(uint64_t, uint64_t))(v48 + 16))(v46, a18);
  swift_beginAccess();
  outlined assign with copy of UserID?(a19, v61);
  swift_endAccess();
  *(unsigned char *)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_meetsUserSessionThreshold) = a20;
  outlined init with copy of ReferenceResolutionClientProtocol?(a21, v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  id v49 = (void *)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId);
  *id v49 = a22;
  v49[1] = a23;
  outlined init with copy of ReferenceResolutionClientProtocol(a24, v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher);
  *(unsigned char *)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_isMuxEnabled) = a25;
  *(void *)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_muxContextMessage) = a26;
  outlined init with copy of ReferenceResolutionClientProtocol?(a27, v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_previousUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v50 = (void *)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userSessionState);
  void *v50 = a28;
  v50[1] = a29;
  type metadata accessor for RunSiriKitExecutorProcessorExecutionDelegate();
  uint64_t v51 = swift_allocObject();
  swift_weakInit();
  *(void *)(v51 + 24) = a14;
  *(void *)(v30 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_rskeProcessorExecutionDelegate) = v51;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  unint64_t v53 = a26;
  swift_unknownObjectRetain();
  swift_release();
  if (Strong)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.conversationBridge);
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      int v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v57 = 0;
      _os_log_impl(&dword_1B9C64000, v55, v56, "rskeProcessor was already set on RunSiriKitExecutorProcessorExecutionDelegate ignoring this operation", v57, 2u);
      MEMORY[0x1BA9E48C0](v57, -1, -1);
    }

    unint64_t v53 = v55;
  }
  else
  {
    swift_weakAssign();
  }

  outlined destroy of ReferenceResolutionClientProtocol?(a27, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  __swift_destroy_boxed_opaque_existential_1Tm(a24);
  outlined destroy of ReferenceResolutionClientProtocol?(a21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(a19, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(a18, v62);
  outlined destroy of ReferenceResolutionClientProtocol?(a7, &demangling cache variable for type metadata for ContextUpdating?);
  __swift_destroy_boxed_opaque_existential_1Tm(v63);
  return v30;
}

unint64_t specialized RSKESource.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RSKESource.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t outlined assign with take of UserID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B9FBCB94()
{
  swift_release();

  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1)
{
  return closure #1 in RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1B9FBCBE4()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater()(a1, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type RSKESource and conformance RSKESource()
{
  unint64_t result = lazy protocol witness table cache variable for type RSKESource and conformance RSKESource;
  if (!lazy protocol witness table cache variable for type RSKESource and conformance RSKESource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RSKESource and conformance RSKESource);
  }
  return result;
}

uint64_t sub_1B9FBCD30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 304))();
}

uint64_t sub_1B9FBCD80@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 328))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9FBCDD8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 336))(*a1);
}

uint64_t sub_1B9FBCE28@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 352))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FBCE7C(unsigned int *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 360))(*a1);
}

uint64_t sub_1B9FBCECC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 376))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9FBCF24(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 384))(*a1);
}

uint64_t sub_1B9FBCF74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 400))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9FBCFC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 408);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B9FBD038@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 424))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9FBD090(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 432))(*a1);
}

uint64_t sub_1B9FBD0E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 448))();
  *a2 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for RSKESource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9FBD204);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RSKESource()
{
  return &type metadata for RSKESource;
}

uint64_t ObjC metadata update function for RunSiriKitExecutorProcessor()
{
  return type metadata accessor for RunSiriKitExecutorProcessor();
}

void type metadata completion function for RunSiriKitExecutorProcessor()
{
  type metadata accessor for RequestType();
  if (v0 <= 0x3F)
  {
    _s10Foundation4UUIDVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
    if (v1 <= 0x3F)
    {
      _s10Foundation4UUIDVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for UserID?, MEMORY[0x1E4FA26E0]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for RunSiriKitExecutorProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RunSiriKitExecutorProcessor);
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.userId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.userId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.userId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.meetsUserSessionThreshold.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.meetsUserSessionThreshold.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.meetsUserSessionThreshold.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.outputCounter.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.outputCounter.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.outputCounter.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.loggedStartOfCall.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.loggedStartOfCall.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.loggedStartOfCall.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.resultCandidateId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.resultCandidateId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.resultCandidateId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.requestFinished.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.requestFinished.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.requestFinished.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.flowPluginInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.__allocating_init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:meetsUserSessionThreshold:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:muxContextMessage:previousUserId:userSessionState:)()
{
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 472);
  return v2();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.isGestureInvocation(rske:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.handle(sendStartExecutionTurn:overrideRequestContextData:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.handleCancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.handleRuntimeError(error:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.logStartOfExecutionForRSKE(requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.submit(executionOutput:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.acquireConversationUserInput(forUserId:requestId:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.close(withExecutionOutput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.close(withExecutionOutput:needsUserInput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.postToMessageBus(message:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.close(withExecutionOutput:errorString:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.fallbackToInfoDomainResults(forResultCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.fetchSpeechInfo(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.makeRequestContextData()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.safelyCloseContextUpdater()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t sub_1B9FBDB18()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B9FBDB58()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B9FBDC8C()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.__allocating_init(requestDispatcherServiceHelper:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  *(void *)(v2 + 24) = a1;
  return v2;
}

void RunSiriKitExecutorProcessorExecutionDelegate.setRSKEProcessor(rskeProcessor:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B9C64000, v2, v3, "rskeProcessor was already set on RunSiriKitExecutorProcessorExecutionDelegate ignoring this operation", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }
  }
  else
  {
    swift_weakAssign();
  }
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.rskeProcessor.getter()
{
  return swift_weakLoadStrong();
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.init(requestDispatcherServiceHelper:)(uint64_t a1)
{
  swift_weakInit();
  *(void *)(v1 + 24) = a1;
  return v1;
}

void RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:)(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *))(*(void *)Strong + 536))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    uint64_t v4 = a1;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v11 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v9 = *(void *)&v4[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      unint64_t v10 = *(void *)&v4[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v5, v6, "RunSiriKitExecutorProcessor already released, ignoring close of %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {
    }
  }
}

void RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)Strong + 560))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    uint64_t v8 = a1;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v15 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v13 = *(void *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      unint64_t v14 = *(void *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v9, v10, "RunSiriKitExecutorProcessor already released, ignoring close of %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }
    else
    {
    }
  }
}

void RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)()
{
}

void RunSiriKitExecutorProcessorExecutionDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)Strong + 568))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v13 = v11;
      *(_DWORD *)os_log_type_t v10 = 136315138;
      if (a2)
      {
        unint64_t v12 = a2;
      }
      else
      {
        a1 = 7104878;
        unint64_t v12 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v8, v9, "RunSiriKitExecutorProcessor already released, ignoring fallbackToServer of %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

Swift::Void __swiftcall RunSiriKitExecutorProcessorExecutionDelegate.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  object = forResultCandidateId.value._object;
  uint64_t countAndFlagsBits = forResultCandidateId.value._countAndFlagsBits;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, void *))(*(void *)Strong + 576))(countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v10 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      if (object)
      {
        unint64_t v9 = (unint64_t)object;
      }
      else
      {
        uint64_t countAndFlagsBits = 7104878;
        unint64_t v9 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v5, v6, "RunSiriKitExecutorProcessor already released, ignoring fallbackToInfoDomainResults of %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void RunSiriKitExecutorProcessorExecutionDelegate.fallbackToIntelligenceFlow(prescribedTool:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oschar log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "RunSiriKitExecutorProcessor does not support fallbackToIntelligenceFlow", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

Swift::Void __swiftcall RunSiriKitExecutorProcessorExecutionDelegate.fallbackToSiriX(rcId:)(Swift::String rcId)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  oschar log = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v2, "RunSiriKitExecutorProcessor does not support fallbackToSiriX", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2)
{
  return RunSiriKitExecutorProcessorExecutionDelegate.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t, void, _UNKNOWN **))static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:));
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2)
{
  return RunSiriKitExecutorProcessorExecutionDelegate.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t, void, _UNKNOWN **))static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:));
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t, uint64_t, void, _UNKNOWN **))
{
  return a3(v3[3], a1, a2, *v3, &protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate);
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return specialized RunSiriKitExecutorProcessorExecutionDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(a7);
}

Swift::Void __swiftcall RunSiriKitExecutorProcessorExecutionDelegate.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
}

Swift::Void __swiftcall RunSiriKitExecutorProcessorExecutionDelegate.actionCandidatesGenerated(_:rcId:)(Swift::OpaquePointer _, Swift::String rcId)
{
}

void RunSiriKitExecutorProcessorExecutionDelegate.willExecute(executionInputInfo:)()
{
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(a1, *(id *)(v3 + 24), a2, a3);
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.postToMessageBus(message:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void), uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageXPCTransporter?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MessageXPCTransporter();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = Strong;
    uint64_t v22 = a4;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    lazy protocol witness table accessor for type MessageXPCTransporter and conformance MessageXPCTransporter();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    uint64_t v19 = (void *)MessageXPCTransporter.toMessageBase()();
    (*(void (**)(void *, uint64_t (*)(void, void), uint64_t))(*(void *)v14 + 552))(v19, a3, v22);
    swift_release();
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v16, v17, "Not publising flow message because RSKEProcessor is not in scope", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }

    return a3(0, 0);
  }
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.deinit()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  return v0;
}

void protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
}

void protocol witness for ServiceBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oschar log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "RunSiriKitExecutorProcessor does not support fallbackToIntelligenceFlow", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

void protocol witness for ServiceBridgeDelegate.fallbackToSiriX(rcId:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oschar log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "RunSiriKitExecutorProcessor does not support fallbackToSiriX", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t, void, _UNKNOWN **))static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:));
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoffFailed(completion:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t, void, _UNKNOWN **))static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:));
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, void, _UNKNOWN **))
{
  return a5(v5[3], a1, a2, *v5, &protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate);
}

uint64_t protocol witness for ServiceBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return specialized RunSiriKitExecutorProcessorExecutionDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(a7);
}

void protocol witness for ServiceBridgeDelegate.actionCandidatesGenerated(_:rcId:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
}

void protocol witness for ServiceBridgeDelegate.willExecute(executionInputInfo:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
}

uint64_t protocol witness for ServiceBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(a1, *(id *)(v3 + 24), a2, a3);
}

uint64_t specialized RunSiriKitExecutorProcessorExecutionDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t (*a1)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v8 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000060, 0x80000001BA064A40, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v3, v4, "Cannot do %s for RSKE initiated execution", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  return a1(0);
}

uint64_t specialized RunSiriKitExecutorProcessorExecutionDelegate.fetchSelfReflectionDecision(reply:)(uint64_t (*a1)(uint64_t *))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v8 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x80000001BA064B60, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v3, v4, "Need not do %s for RSKE initiated execution", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  LOBYTE(v8) = 2;
  return a1(&v8);
}

void specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(uint64_t a1, unint64_t a2, const char *a3)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  oschar log = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v11 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, oslog, v7, a3, v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
}

uint64_t specialized RunSiriKitExecutorProcessorExecutionDelegate.fetchRecentDialogs(reply:)(uint64_t (*a1)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v8 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001BA064AE0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v3, v4, "Need not do %s for RSKE initiated execution", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  return a1(MEMORY[0x1E4FBC860]);
}

unint64_t lazy protocol witness table accessor for type MessageXPCTransporter and conformance MessageXPCTransporter()
{
  unint64_t result = lazy protocol witness table cache variable for type MessageXPCTransporter and conformance MessageXPCTransporter;
  if (!lazy protocol witness table cache variable for type MessageXPCTransporter and conformance MessageXPCTransporter)
  {
    type metadata accessor for MessageXPCTransporter();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageXPCTransporter and conformance MessageXPCTransporter);
  }
  return result;
}

uint64_t sub_1B9FBFAE0@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1B9FBFB30()
{
  return swift_weakAssign();
}

uint64_t method lookup function for RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RunSiriKitExecutorProcessorExecutionDelegate);
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessorExecutionDelegate.__allocating_init(requestDispatcherServiceHelper:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t NonUnderstandingError.message.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NonUnderstandingError.input.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t NonUnderstandingError.localizedDescription.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NonUnderstandingError.init(message:input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  os_log_type_t v7 = (char *)a5 + *(int *)(type metadata accessor for NonUnderstandingError() + 28);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v8(v7, a3, a4);
}

uint64_t type metadata accessor for NonUnderstandingError()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance NonUnderstandingError<A>()
{
  return MEMORY[0x1F40E3AB0]();
}

uint64_t RequestPaused.message.getter(uint64_t a1)
{
  return a1;
}

uint64_t RequestPaused.localizedDescription.getter(uint64_t a1)
{
  return a1;
}

uint64_t RequestPaused.errorDescription.getter(uint64_t a1)
{
  return a1;
}

uint64_t base witness table accessor for Error in NonUnderstandingError<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type RequestPaused and conformance RequestPaused()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestPaused and conformance RequestPaused;
  if (!lazy protocol witness table cache variable for type RequestPaused and conformance RequestPaused)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaused and conformance RequestPaused);
  }
  return result;
}

ValueMetadata *type metadata accessor for IllegalStateError()
{
  return &type metadata for IllegalStateError;
}

uint64_t type metadata completion function for NonUnderstandingError()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NonUnderstandingError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for NonUnderstandingError(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for NonUnderstandingError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void *assignWithCopy for NonUnderstandingError(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for NonUnderstandingError(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for NonUnderstandingError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for NonUnderstandingError(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for NonUnderstandingError(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1B9FC0658);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for TimedOutError()
{
  return &type metadata for TimedOutError;
}

ValueMetadata *type metadata accessor for CancelledError()
{
  return &type metadata for CancelledError;
}

ValueMetadata *type metadata accessor for RequestPaused()
{
  return &type metadata for RequestPaused;
}

id SABaseCommand.forcedBargeInResult<A>(forExpectedResponseType:)(uint64_t a1)
{
  self;
  if (swift_dynamicCastObjCClass()
    || (self, swift_dynamicCastObjCClass())
    || (self, swift_dynamicCastObjCClass())
    || (self, swift_dynamicCastObjCClass()))
  {
    if (!a1) {
      type metadata accessor for SABaseCommand();
    }
    return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  }
  else
  {
    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type BargeInError and conformance BargeInError();
    uint64_t v2 = swift_allocError();
    BargeInError.init(rawError:)();
  }
  return (id)v2;
}

BOOL SABaseCommand.isSuccessfulOnBargeIn.getter()
{
  if (swift_dynamicCastObjCClass()) {
    return 1;
  }
  self;
  if (swift_dynamicCastObjCClass()) {
    return 1;
  }
  self;
  if (swift_dynamicCastObjCClass()) {
    return 1;
  }
  self;
  return swift_dynamicCastObjCClass() != 0;
}

unint64_t lazy protocol witness table accessor for type BargeInError and conformance BargeInError()
{
  unint64_t result = lazy protocol witness table cache variable for type BargeInError and conformance BargeInError;
  if (!lazy protocol witness table cache variable for type BargeInError and conformance BargeInError)
  {
    type metadata accessor for BargeInError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError);
  }
  return result;
}

uint64_t SABaseCommand.isConfirmation.getter()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    id v3 = v0;
    id v4 = objc_msgSend(v2, sel_dialogPhase);
    if (v4)
    {
      unsigned int v5 = v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      if (v6 != 0x616D7269666E6F43 || v8 != 0xEC0000006E6F6974)
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();

        return v10 & 1;
      }
      swift_bridgeObjectRelease();

      return 1;
    }

    return 0;
  }
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (!v12) {
    return 0;
  }
  int v13 = (void *)v12;
  id v14 = v0;
  id v15 = objc_msgSend(v13, sel_callbacks);
  if (v15)
  {
    unsigned int v16 = v15;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAResultCallback);
    unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v17 >> 62)) {
      goto LABEL_11;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18) {
      goto LABEL_12;
    }
LABEL_42:

LABEL_43:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v18;
  }
  unint64_t v17 = MEMORY[0x1E4FBC860];
  if (MEMORY[0x1E4FBC860] >> 62) {
    goto LABEL_41;
  }
LABEL_11:
  uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v18) {
    goto LABEL_42;
  }
LABEL_12:
  uint64_t v19 = 0;
  unint64_t v32 = v17;
  unint64_t v33 = v17 & 0xC000000000000001;
  unint64_t v30 = v17 + 32;
  uint64_t v31 = v18;
  while (1)
  {
    uint64_t result = v33 ? MEMORY[0x1BA9E3990](v19, v32) : (uint64_t)*(id *)(v30 + 8 * v19);
    uint64_t v20 = (void *)result;
    if (__OFADD__(v19++, 1)) {
      break;
    }
    id v22 = objc_msgSend((id)result, sel_commands);
    if (v22)
    {
      uint64_t v23 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
      unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v24 >> 62)) {
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v24 = MEMORY[0x1E4FBC860];
      if (!(MEMORY[0x1E4FBC860] >> 62))
      {
LABEL_20:
        uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v25) {
          goto LABEL_21;
        }
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRetain_n();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_21:
      uint64_t v26 = 4;
      uint64_t v27 = 0;
      if ((v24 & 0xC000000000000001) != 0)
      {
LABEL_22:
        uint64_t result = MEMORY[0x1BA9E3990](v27, v24);
        uint64_t v28 = v27 + 1;
        if (!__OFADD__(v27, 1)) {
          goto LABEL_26;
        }
      }
      else
      {
        while (1)
        {
          uint64_t result = swift_unknownObjectRetain();
          uint64_t v28 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            break;
          }
LABEL_26:
          self;
          if (swift_dynamicCastObjCClass())
          {
            char v29 = SABaseCommand.isConfirmation.getter();
            swift_unknownObjectRelease();
            if (v29)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v18 = 1;
              goto LABEL_43;
            }
            if (v28 == v25) {
              goto LABEL_13;
            }
          }
          else
          {
            swift_unknownObjectRelease();
            if (v28 == v25) {
              goto LABEL_13;
            }
          }
          uint64_t v27 = ++v26 - 4;
          if ((v24 & 0xC000000000000001) != 0) {
            goto LABEL_22;
          }
        }
      }
      __break(1u);
      break;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();

    if (v19 == v31)
    {

      uint64_t v18 = 0;
      goto LABEL_43;
    }
  }
  __break(1u);
  return result;
}